// starting begin Game_Start := false ;
   0: LD_ADDR_EXP 9
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// Randomize ;
   8: CALL_OW 10
// Init ( ) ;
  12: CALL 112 0 0
// InitBot ( ) ;
  16: CALL 3614 0 0
// Game_Start := true ;
  20: LD_ADDR_EXP 9
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// end ;
  28: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , bot_side ] ) = 0 do
  29: LD_EXP 9
  33: PUSH
  34: LD_INT 22
  36: PUSH
  37: LD_EXP 8
  41: PUSH
  42: EMPTY
  43: LIST
  44: LIST
  45: PPUSH
  46: CALL_OW 69
  50: PUSH
  51: LD_INT 0
  53: EQUAL
  54: AND
  55: IFFALSE 64
  57: GO 59
  59: DISABLE
// YouWinInMultiplayer ;
  60: CALL_OW 106
  64: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , your_side ] ) = 0 do
  65: LD_EXP 9
  69: PUSH
  70: LD_INT 22
  72: PUSH
  73: LD_OWVAR 2
  77: PUSH
  78: EMPTY
  79: LIST
  80: LIST
  81: PPUSH
  82: CALL_OW 69
  86: PUSH
  87: LD_INT 0
  89: EQUAL
  90: AND
  91: IFFALSE 111
  93: GO 95
  95: DISABLE
// begin Multiplayer_Loose_Message ;
  96: CALL_OW 521
// Wait ( 0 0$03 ) ;
 100: LD_INT 105
 102: PPUSH
 103: CALL_OW 67
// YouLostInMultiplayer ;
 107: CALL_OW 107
// end ;
 111: END
// export Game_Type , Side_Positions , Side_Teams , Side_Nations , Teams ; export Team_Game , Side_Start , Bot_Side , Game_Start ; export number_of_people , skill_level , crates_spawn , respawning_time_min , respawning_time_max , amount_of_apeman ; export definitions , mines_list , apeman_areas , patrols , attackers , to_produce , veh_counter , queue_codes , rng , target , handicap , attackers_tmp ; export function Init ( ) ; var i , j ; begin
 112: LD_INT 0
 114: PPUSH
 115: PPUSH
 116: PPUSH
// definitions := [ ] ;
 117: LD_ADDR_EXP 16
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// if Multiplayer then
 124: LD_OWVAR 4
 128: IFFALSE 306
// begin Game_Type := mp_game_type ;
 130: LD_ADDR_EXP 1
 134: PUSH
 135: LD_OWVAR 6
 139: ST_TO_ADDR
// Your_Side := mp_player_side ;
 140: LD_ADDR_OWVAR 2
 144: PUSH
 145: LD_OWVAR 7
 149: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
 150: LD_ADDR_EXP 2
 154: PUSH
 155: LD_OWVAR 17
 159: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 160: LD_ADDR_EXP 3
 164: PUSH
 165: LD_OWVAR 15
 169: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 170: LD_ADDR_EXP 4
 174: PUSH
 175: LD_OWVAR 16
 179: ST_TO_ADDR
// Teams := [ [ ] ] ;
 180: LD_ADDR_EXP 5
 184: PUSH
 185: EMPTY
 186: PUSH
 187: EMPTY
 188: LIST
 189: ST_TO_ADDR
// for i in mp_teams do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: LD_OWVAR 12
 199: PUSH
 200: FOR_IN
 201: IFFALSE 244
// if i then
 203: LD_VAR 0 2
 207: IFFALSE 242
// Teams := Replace ( Teams , 1 , Teams [ 1 ] union i ) ;
 209: LD_ADDR_EXP 5
 213: PUSH
 214: LD_EXP 5
 218: PPUSH
 219: LD_INT 1
 221: PPUSH
 222: LD_EXP 5
 226: PUSH
 227: LD_INT 1
 229: ARRAY
 230: PUSH
 231: LD_VAR 0 2
 235: UNION
 236: PPUSH
 237: CALL_OW 1
 241: ST_TO_ADDR
 242: GO 200
 244: POP
 245: POP
// for i = 0 to 6 do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 0
 254: DEC
 255: ST_TO_ADDR
 256: LD_INT 6
 258: PUSH
 259: FOR_TO
 260: IFFALSE 302
// definitions := Insert ( definitions , definitions + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 262: LD_ADDR_EXP 16
 266: PUSH
 267: LD_EXP 16
 271: PPUSH
 272: LD_EXP 16
 276: PUSH
 277: LD_INT 1
 279: PLUS
 280: PPUSH
 281: LD_VAR 0 2
 285: PPUSH
 286: CALL_OW 426
 290: PUSH
 291: LD_INT 1
 293: PLUS
 294: PPUSH
 295: CALL_OW 2
 299: ST_TO_ADDR
 300: GO 259
 302: POP
 303: POP
// end else
 304: GO 461
// begin Game_Type := 1 ;
 306: LD_ADDR_EXP 1
 310: PUSH
 311: LD_INT 1
 313: ST_TO_ADDR
// Your_Side := 2 ;
 314: LD_ADDR_OWVAR 2
 318: PUSH
 319: LD_INT 2
 321: ST_TO_ADDR
// Side_Positions := [ 1 , 0 , 0 , 0 , 2 , 0 , 3 , 0 ] ;
 322: LD_ADDR_EXP 2
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: LD_INT 0
 332: PUSH
 333: LD_INT 0
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 2
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: LD_INT 3
 347: PUSH
 348: LD_INT 0
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: ST_TO_ADDR
// Side_Teams := [ 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 ] ;
 361: LD_ADDR_EXP 3
 365: PUSH
 366: LD_INT 1
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 1
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: LD_INT 1
 386: PUSH
 387: LD_INT 0
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: ST_TO_ADDR
// Side_Nations := [ 3 , 0 , 0 , 0 , 3 , 0 , 3 , 0 ] ;
 400: LD_ADDR_EXP 4
 404: PUSH
 405: LD_INT 3
 407: PUSH
 408: LD_INT 0
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 0
 416: PUSH
 417: LD_INT 3
 419: PUSH
 420: LD_INT 0
 422: PUSH
 423: LD_INT 3
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: ST_TO_ADDR
// Teams := [ [ 1 , 5 , 7 ] ] ;
 439: LD_ADDR_EXP 5
 443: PUSH
 444: LD_INT 1
 446: PUSH
 447: LD_INT 5
 449: PUSH
 450: LD_INT 7
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: ST_TO_ADDR
// end ; Side_Start := [ [ 203 , 174 ] , [ 114 , 171 ] , [ 26 , 44 ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
 461: LD_ADDR_EXP 7
 465: PUSH
 466: LD_INT 203
 468: PUSH
 469: LD_INT 174
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 114
 478: PUSH
 479: LD_INT 171
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: LD_INT 26
 488: PUSH
 489: LD_INT 44
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: PUSH
 496: EMPTY
 497: PUSH
 498: EMPTY
 499: PUSH
 500: EMPTY
 501: PUSH
 502: EMPTY
 503: PUSH
 504: EMPTY
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: ST_TO_ADDR
// Bot_Side := 2 ;
 516: LD_ADDR_EXP 8
 520: PUSH
 521: LD_INT 2
 523: ST_TO_ADDR
// for i = 1 to 8 do
 524: LD_ADDR_VAR 0 2
 528: PUSH
 529: DOUBLE
 530: LD_INT 1
 532: DEC
 533: ST_TO_ADDR
 534: LD_INT 8
 536: PUSH
 537: FOR_TO
 538: IFFALSE 632
// begin if Multiplayer_GetPlayerIsSpec ( i ) or Multiplayer_GetPlayerIsComp ( i ) then
 540: LD_VAR 0 2
 544: PPUSH
 545: CALL_OW 530
 549: PUSH
 550: LD_VAR 0 2
 554: PPUSH
 555: CALL_OW 532
 559: OR
 560: IFFALSE 585
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 562: LD_ADDR_EXP 2
 566: PUSH
 567: LD_EXP 2
 571: PPUSH
 572: LD_VAR 0 2
 576: PPUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 1
 584: ST_TO_ADDR
// end ; if Side_Nations [ i ] and Side_Nations <> 3 then
 585: LD_EXP 4
 589: PUSH
 590: LD_VAR 0 2
 594: ARRAY
 595: PUSH
 596: LD_EXP 4
 600: PUSH
 601: LD_INT 3
 603: NONEQUAL
 604: AND
 605: IFFALSE 630
// Side_Nations := Replace ( Side_Nations , i , 3 ) ;
 607: LD_ADDR_EXP 4
 611: PUSH
 612: LD_EXP 4
 616: PPUSH
 617: LD_VAR 0 2
 621: PPUSH
 622: LD_INT 3
 624: PPUSH
 625: CALL_OW 1
 629: ST_TO_ADDR
// end ;
 630: GO 537
 632: POP
 633: POP
// if bot_side = 2 and Side_Positions [ 2 ] then
 634: LD_EXP 8
 638: PUSH
 639: LD_INT 2
 641: EQUAL
 642: PUSH
 643: LD_EXP 2
 647: PUSH
 648: LD_INT 2
 650: ARRAY
 651: AND
 652: IFFALSE 662
// bot_side := 5 ;
 654: LD_ADDR_EXP 8
 658: PUSH
 659: LD_INT 5
 661: ST_TO_ADDR
// if bot_side = 5 and Side_Positions [ 5 ] then
 662: LD_EXP 8
 666: PUSH
 667: LD_INT 5
 669: EQUAL
 670: PUSH
 671: LD_EXP 2
 675: PUSH
 676: LD_INT 5
 678: ARRAY
 679: AND
 680: IFFALSE 690
// bot_side := 8 ;
 682: LD_ADDR_EXP 8
 686: PUSH
 687: LD_INT 8
 689: ST_TO_ADDR
// Team_Game := true ;
 690: LD_ADDR_EXP 6
 694: PUSH
 695: LD_INT 1
 697: ST_TO_ADDR
// for i = 1 to 8 do
 698: LD_ADDR_VAR 0 2
 702: PUSH
 703: DOUBLE
 704: LD_INT 1
 706: DEC
 707: ST_TO_ADDR
 708: LD_INT 8
 710: PUSH
 711: FOR_TO
 712: IFFALSE 748
// if i <> bot_side then
 714: LD_VAR 0 2
 718: PUSH
 719: LD_EXP 8
 723: NONEQUAL
 724: IFFALSE 746
// SetAttitude ( i , bot_side , att_enemy , true ) ;
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_EXP 8
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: LD_INT 1
 741: PPUSH
 742: CALL_OW 80
 746: GO 711
 748: POP
 749: POP
// for i := 2 to Teams [ 1 ] do
 750: LD_ADDR_VAR 0 2
 754: PUSH
 755: DOUBLE
 756: LD_INT 2
 758: DEC
 759: ST_TO_ADDR
 760: LD_EXP 5
 764: PUSH
 765: LD_INT 1
 767: ARRAY
 768: PUSH
 769: FOR_TO
 770: IFFALSE 844
// begin ChangeSideFog ( Teams [ 1 ] [ i ] , Teams [ 1 ] [ 1 ] ) ;
 772: LD_EXP 5
 776: PUSH
 777: LD_INT 1
 779: ARRAY
 780: PUSH
 781: LD_VAR 0 2
 785: ARRAY
 786: PPUSH
 787: LD_EXP 5
 791: PUSH
 792: LD_INT 1
 794: ARRAY
 795: PUSH
 796: LD_INT 1
 798: ARRAY
 799: PPUSH
 800: CALL_OW 343
// SetAttitude ( Teams [ 1 ] [ i ] , Teams [ 1 ] [ 1 ] , att_friend , true ) ;
 804: LD_EXP 5
 808: PUSH
 809: LD_INT 1
 811: ARRAY
 812: PUSH
 813: LD_VAR 0 2
 817: ARRAY
 818: PPUSH
 819: LD_EXP 5
 823: PUSH
 824: LD_INT 1
 826: ARRAY
 827: PUSH
 828: LD_INT 1
 830: ARRAY
 831: PPUSH
 832: LD_INT 1
 834: PPUSH
 835: LD_INT 1
 837: PPUSH
 838: CALL_OW 80
// end ;
 842: GO 769
 844: POP
 845: POP
// if not Multiplayer then
 846: LD_OWVAR 4
 850: NOT
 851: IFFALSE 888
// definitions := [ 1 , 1 , 1 , 1 , 2 , 3 , 3 ] ;
 853: LD_ADDR_EXP 16
 857: PUSH
 858: LD_INT 1
 860: PUSH
 861: LD_INT 1
 863: PUSH
 864: LD_INT 1
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 2
 872: PUSH
 873: LD_INT 3
 875: PUSH
 876: LD_INT 3
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ definitions [ 1 ] ] ;
 888: LD_ADDR_EXP 10
 892: PUSH
 893: LD_INT 9
 895: PUSH
 896: LD_INT 12
 898: PUSH
 899: LD_INT 15
 901: PUSH
 902: LD_INT 24
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_EXP 16
 915: PUSH
 916: LD_INT 1
 918: ARRAY
 919: ARRAY
 920: ST_TO_ADDR
// skill_level := [ 2 , 4 , 6 , 8 ] [ definitions [ 2 ] ] ;
 921: LD_ADDR_EXP 11
 925: PUSH
 926: LD_INT 2
 928: PUSH
 929: LD_INT 4
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: LD_INT 8
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PUSH
 944: LD_EXP 16
 948: PUSH
 949: LD_INT 2
 951: ARRAY
 952: ARRAY
 953: ST_TO_ADDR
// crates_spawn := [ 0 0$20 , 0 0$15 , 0 0$10 , 0 0$07 ] [ definitions [ 3 ] ] ;
 954: LD_ADDR_EXP 12
 958: PUSH
 959: LD_INT 700
 961: PUSH
 962: LD_INT 525
 964: PUSH
 965: LD_INT 350
 967: PUSH
 968: LD_INT 245
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: PUSH
 977: LD_EXP 16
 981: PUSH
 982: LD_INT 3
 984: ARRAY
 985: ARRAY
 986: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ definitions [ 4 ] ] ;
 987: LD_ADDR_EXP 13
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 10500
 997: PUSH
 998: LD_INT 6300
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: PUSH
1006: LD_EXP 16
1010: PUSH
1011: LD_INT 4
1013: ARRAY
1014: ARRAY
1015: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ definitions [ 4 ] ] ;
1016: LD_ADDR_EXP 14
1020: PUSH
1021: LD_INT 0
1023: PUSH
1024: LD_INT 31500
1026: PUSH
1027: LD_INT 10500
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_EXP 16
1039: PUSH
1040: LD_INT 4
1042: ARRAY
1043: ARRAY
1044: ST_TO_ADDR
// amount_of_apeman := [ 0 , 3 , 5 , 7 ] [ definitions [ 5 ] ] ;
1045: LD_ADDR_EXP 15
1049: PUSH
1050: LD_INT 0
1052: PUSH
1053: LD_INT 3
1055: PUSH
1056: LD_INT 5
1058: PUSH
1059: LD_INT 7
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: PUSH
1068: LD_EXP 16
1072: PUSH
1073: LD_INT 5
1075: ARRAY
1076: ARRAY
1077: ST_TO_ADDR
// difficulty := [ 1 , 2 , 3 ] [ definitions [ 6 ] ] ;
1078: LD_ADDR_OWVAR 67
1082: PUSH
1083: LD_INT 1
1085: PUSH
1086: LD_INT 2
1088: PUSH
1089: LD_INT 3
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: LIST
1096: PUSH
1097: LD_EXP 16
1101: PUSH
1102: LD_INT 6
1104: ARRAY
1105: ARRAY
1106: ST_TO_ADDR
// handicap := [ 0 , 1 , 2 ] [ definitions [ 7 ] ] ;
1107: LD_ADDR_EXP 26
1111: PUSH
1112: LD_INT 0
1114: PUSH
1115: LD_INT 1
1117: PUSH
1118: LD_INT 2
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_EXP 16
1130: PUSH
1131: LD_INT 7
1133: ARRAY
1134: ARRAY
1135: ST_TO_ADDR
// queue_codes := [ 11353 , 12244 , 44444 , 12345 , 43413 , 14152 ] ;
1136: LD_ADDR_EXP 23
1140: PUSH
1141: LD_INT 11353
1143: PUSH
1144: LD_INT 12244
1146: PUSH
1147: LD_INT 44444
1149: PUSH
1150: LD_INT 12345
1152: PUSH
1153: LD_INT 43413
1155: PUSH
1156: LD_INT 14152
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: ST_TO_ADDR
// rng := Rand ( 1 , 6 ) ;
1167: LD_ADDR_EXP 24
1171: PUSH
1172: LD_INT 1
1174: PPUSH
1175: LD_INT 6
1177: PPUSH
1178: CALL_OW 12
1182: ST_TO_ADDR
// if bot_side <> 2 then
1183: LD_EXP 8
1187: PUSH
1188: LD_INT 2
1190: NONEQUAL
1191: IFFALSE 1234
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
1193: LD_ADDR_VAR 0 2
1197: PUSH
1198: LD_INT 22
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: PPUSH
1208: CALL_OW 69
1212: PUSH
1213: FOR_IN
1214: IFFALSE 1232
// SetSide ( i , bot_side ) ;
1216: LD_VAR 0 2
1220: PPUSH
1221: LD_EXP 8
1225: PPUSH
1226: CALL_OW 235
1230: GO 1213
1232: POP
1233: POP
// ResetFog ;
1234: CALL_OW 335
// PreparePeople ( ) ;
1238: CALL 2122 0 0
// apeman_areas := [ ape1 , ape2 , ape3 ] ;
1242: LD_ADDR_EXP 18
1246: PUSH
1247: LD_INT 14
1249: PUSH
1250: LD_INT 15
1252: PUSH
1253: LD_INT 16
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: ST_TO_ADDR
// if amount_of_apeman then
1261: LD_EXP 15
1265: IFFALSE 1315
// for j in apeman_areas do
1267: LD_ADDR_VAR 0 3
1271: PUSH
1272: LD_EXP 18
1276: PUSH
1277: FOR_IN
1278: IFFALSE 1313
// for i = 1 to amount_of_apeman do
1280: LD_ADDR_VAR 0 2
1284: PUSH
1285: DOUBLE
1286: LD_INT 1
1288: DEC
1289: ST_TO_ADDR
1290: LD_EXP 15
1294: PUSH
1295: FOR_TO
1296: IFFALSE 1309
// AddApeman ( j ) ;
1298: LD_VAR 0 3
1302: PPUSH
1303: CALL 3071 0 1
1307: GO 1295
1309: POP
1310: POP
1311: GO 1277
1313: POP
1314: POP
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
1315: LD_INT 22
1317: PUSH
1318: LD_OWVAR 2
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PPUSH
1327: CALL_OW 69
1331: PUSH
1332: LD_INT 1
1334: ARRAY
1335: PPUSH
1336: CALL_OW 87
// disable ( 17 ) ;
1340: LD_INT 17
1342: DISABLE_MARKED
// end ;
1343: LD_VAR 0 1
1347: RET
// every 2 2$40 trigger game_start do
1348: LD_EXP 9
1352: IFFALSE 1408
1354: GO 1356
1356: DISABLE
// begin CreateCratesArea ( tick mod 5 + 1 , kabul_crates , true ) ;
1357: LD_OWVAR 1
1361: PUSH
1362: LD_INT 5
1364: MOD
1365: PUSH
1366: LD_INT 1
1368: PLUS
1369: PPUSH
1370: LD_INT 13
1372: PPUSH
1373: LD_INT 1
1375: PPUSH
1376: CALL_OW 55
// Wait ( 0 0$15 ) ;
1380: LD_INT 525
1382: PPUSH
1383: CALL_OW 67
// CreateCratesAnywhere ( tick mod 5 + 1 , true ) ;
1387: LD_OWVAR 1
1391: PUSH
1392: LD_INT 5
1394: MOD
1395: PUSH
1396: LD_INT 1
1398: PLUS
1399: PPUSH
1400: LD_INT 1
1402: PPUSH
1403: CALL_OW 57
// enable ;
1407: ENABLE
// end ;
1408: END
// every 0 0$01 + 0 0$10 trigger game_start do var cr , cr_queue ;
1409: LD_EXP 9
1413: IFFALSE 2119
1415: GO 1417
1417: DISABLE
1418: LD_INT 0
1420: PPUSH
1421: PPUSH
// begin cr := 1 ;
1422: LD_ADDR_VAR 0 1
1426: PUSH
1427: LD_INT 1
1429: ST_TO_ADDR
// cr_queue := [ rand ( 1 , 3 ) , rand ( 2 , 4 ) , rand ( 3 , 5 ) , rand ( 3 , 5 ) , rand ( 2 , 5 ) , rand ( 1 , 5 ) ] ;
1430: LD_ADDR_VAR 0 2
1434: PUSH
1435: LD_INT 1
1437: PPUSH
1438: LD_INT 3
1440: PPUSH
1441: CALL_OW 12
1445: PUSH
1446: LD_INT 2
1448: PPUSH
1449: LD_INT 4
1451: PPUSH
1452: CALL_OW 12
1456: PUSH
1457: LD_INT 3
1459: PPUSH
1460: LD_INT 5
1462: PPUSH
1463: CALL_OW 12
1467: PUSH
1468: LD_INT 3
1470: PPUSH
1471: LD_INT 5
1473: PPUSH
1474: CALL_OW 12
1478: PUSH
1479: LD_INT 2
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL_OW 12
1489: PUSH
1490: LD_INT 1
1492: PPUSH
1493: LD_INT 5
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: ST_TO_ADDR
// while ( true ) do
1509: LD_INT 1
1511: IFFALSE 2119
// begin Wait ( crates_spawn ) ;
1513: LD_EXP 12
1517: PPUSH
1518: CALL_OW 67
// crates_spawn := crates_spawn + 0 0$2 ;
1522: LD_ADDR_EXP 12
1526: PUSH
1527: LD_EXP 12
1531: PUSH
1532: LD_INT 70
1534: PLUS
1535: ST_TO_ADDR
// if crates_spawn > 2 2$00 then
1536: LD_EXP 12
1540: PUSH
1541: LD_INT 4200
1543: GREATER
1544: IFFALSE 1554
// crates_spawn := 0 0$40 ;
1546: LD_ADDR_EXP 12
1550: PUSH
1551: LD_INT 1400
1553: ST_TO_ADDR
// if cr mod 3 = 0 then
1554: LD_VAR 0 1
1558: PUSH
1559: LD_INT 3
1561: MOD
1562: PUSH
1563: LD_INT 0
1565: EQUAL
1566: IFFALSE 1731
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1568: LD_VAR 0 2
1572: PUSH
1573: LD_VAR 0 1
1577: PUSH
1578: LD_VAR 0 2
1582: MOD
1583: PUSH
1584: LD_INT 1
1586: PLUS
1587: ARRAY
1588: PPUSH
1589: LD_INT 17
1591: PPUSH
1592: LD_INT 1
1594: PPUSH
1595: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1599: LD_EXP 12
1603: PUSH
1604: LD_INT 2
1606: DIV
1607: PPUSH
1608: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1612: LD_VAR 0 2
1616: PUSH
1617: LD_VAR 0 1
1621: PUSH
1622: LD_VAR 0 2
1626: MOD
1627: PUSH
1628: LD_INT 1
1630: PLUS
1631: ARRAY
1632: PPUSH
1633: LD_INT 18
1635: PPUSH
1636: LD_INT 1
1638: PPUSH
1639: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1643: LD_EXP 12
1647: PUSH
1648: LD_INT 2
1650: DIV
1651: PPUSH
1652: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1656: LD_VAR 0 2
1660: PUSH
1661: LD_VAR 0 1
1665: PUSH
1666: LD_VAR 0 2
1670: MOD
1671: PUSH
1672: LD_INT 1
1674: PLUS
1675: ARRAY
1676: PPUSH
1677: LD_INT 19
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1687: LD_EXP 12
1691: PUSH
1692: LD_INT 2
1694: DIV
1695: PPUSH
1696: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1700: LD_VAR 0 2
1704: PUSH
1705: LD_VAR 0 1
1709: PUSH
1710: LD_VAR 0 2
1714: MOD
1715: PUSH
1716: LD_INT 1
1718: PLUS
1719: ARRAY
1720: PPUSH
1721: LD_INT 17
1723: PPUSH
1724: LD_INT 1
1726: PPUSH
1727: CALL_OW 55
// end ; if cr mod 3 = 1 then
1731: LD_VAR 0 1
1735: PUSH
1736: LD_INT 3
1738: MOD
1739: PUSH
1740: LD_INT 1
1742: EQUAL
1743: IFFALSE 1908
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1745: LD_VAR 0 2
1749: PUSH
1750: LD_VAR 0 1
1754: PUSH
1755: LD_VAR 0 2
1759: MOD
1760: PUSH
1761: LD_INT 1
1763: PLUS
1764: ARRAY
1765: PPUSH
1766: LD_INT 18
1768: PPUSH
1769: LD_INT 1
1771: PPUSH
1772: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1776: LD_EXP 12
1780: PUSH
1781: LD_INT 2
1783: DIV
1784: PPUSH
1785: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1789: LD_VAR 0 2
1793: PUSH
1794: LD_VAR 0 1
1798: PUSH
1799: LD_VAR 0 2
1803: MOD
1804: PUSH
1805: LD_INT 1
1807: PLUS
1808: ARRAY
1809: PPUSH
1810: LD_INT 17
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1820: LD_EXP 12
1824: PUSH
1825: LD_INT 2
1827: DIV
1828: PPUSH
1829: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1833: LD_VAR 0 2
1837: PUSH
1838: LD_VAR 0 1
1842: PUSH
1843: LD_VAR 0 2
1847: MOD
1848: PUSH
1849: LD_INT 1
1851: PLUS
1852: ARRAY
1853: PPUSH
1854: LD_INT 19
1856: PPUSH
1857: LD_INT 1
1859: PPUSH
1860: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1864: LD_EXP 12
1868: PUSH
1869: LD_INT 2
1871: DIV
1872: PPUSH
1873: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1877: LD_VAR 0 2
1881: PUSH
1882: LD_VAR 0 1
1886: PUSH
1887: LD_VAR 0 2
1891: MOD
1892: PUSH
1893: LD_INT 1
1895: PLUS
1896: ARRAY
1897: PPUSH
1898: LD_INT 18
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 55
// end ; if cr mod 3 = 2 then
1908: LD_VAR 0 1
1912: PUSH
1913: LD_INT 3
1915: MOD
1916: PUSH
1917: LD_INT 2
1919: EQUAL
1920: IFFALSE 2085
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1922: LD_VAR 0 2
1926: PUSH
1927: LD_VAR 0 1
1931: PUSH
1932: LD_VAR 0 2
1936: MOD
1937: PUSH
1938: LD_INT 1
1940: PLUS
1941: ARRAY
1942: PPUSH
1943: LD_INT 19
1945: PPUSH
1946: LD_INT 1
1948: PPUSH
1949: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1953: LD_EXP 12
1957: PUSH
1958: LD_INT 2
1960: DIV
1961: PPUSH
1962: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1966: LD_VAR 0 2
1970: PUSH
1971: LD_VAR 0 1
1975: PUSH
1976: LD_VAR 0 2
1980: MOD
1981: PUSH
1982: LD_INT 1
1984: PLUS
1985: ARRAY
1986: PPUSH
1987: LD_INT 18
1989: PPUSH
1990: LD_INT 1
1992: PPUSH
1993: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1997: LD_EXP 12
2001: PUSH
2002: LD_INT 2
2004: DIV
2005: PPUSH
2006: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
2010: LD_VAR 0 2
2014: PUSH
2015: LD_VAR 0 1
2019: PUSH
2020: LD_VAR 0 2
2024: MOD
2025: PUSH
2026: LD_INT 1
2028: PLUS
2029: ARRAY
2030: PPUSH
2031: LD_INT 17
2033: PPUSH
2034: LD_INT 1
2036: PPUSH
2037: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
2041: LD_EXP 12
2045: PUSH
2046: LD_INT 2
2048: DIV
2049: PPUSH
2050: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
2054: LD_VAR 0 2
2058: PUSH
2059: LD_VAR 0 1
2063: PUSH
2064: LD_VAR 0 2
2068: MOD
2069: PUSH
2070: LD_INT 1
2072: PLUS
2073: ARRAY
2074: PPUSH
2075: LD_INT 19
2077: PPUSH
2078: LD_INT 1
2080: PPUSH
2081: CALL_OW 55
// end ; cr := cr + 1 ;
2085: LD_ADDR_VAR 0 1
2089: PUSH
2090: LD_VAR 0 1
2094: PUSH
2095: LD_INT 1
2097: PLUS
2098: ST_TO_ADDR
// if cr > 150 then
2099: LD_VAR 0 1
2103: PUSH
2104: LD_INT 150
2106: GREATER
2107: IFFALSE 2117
// cr := 43 ;
2109: LD_ADDR_VAR 0 1
2113: PUSH
2114: LD_INT 43
2116: ST_TO_ADDR
// end ;
2117: GO 1509
// end ; end_of_file
2119: PPOPN 2
2121: END
// export function PreparePeople ( ) ; var i , j , un , to_copy , x , y , c , d ; begin
2122: LD_INT 0
2124: PPUSH
2125: PPUSH
2126: PPUSH
2127: PPUSH
2128: PPUSH
2129: PPUSH
2130: PPUSH
2131: PPUSH
2132: PPUSH
// to_copy := [ ] ;
2133: LD_ADDR_VAR 0 5
2137: PUSH
2138: EMPTY
2139: ST_TO_ADDR
// for i = 1 to 8 do
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: DOUBLE
2146: LD_INT 1
2148: DEC
2149: ST_TO_ADDR
2150: LD_INT 8
2152: PUSH
2153: FOR_TO
2154: IFFALSE 3064
// begin if Side_Positions [ i ] then
2156: LD_EXP 2
2160: PUSH
2161: LD_VAR 0 2
2165: ARRAY
2166: IFFALSE 3062
// begin uc_side := i ;
2168: LD_ADDR_OWVAR 20
2172: PUSH
2173: LD_VAR 0 2
2177: ST_TO_ADDR
// uc_nation := Side_Nations [ i ] ;
2178: LD_ADDR_OWVAR 21
2182: PUSH
2183: LD_EXP 4
2187: PUSH
2188: LD_VAR 0 2
2192: ARRAY
2193: ST_TO_ADDR
// x := Side_Start [ Side_Positions [ i ] ] [ 1 ] ;
2194: LD_ADDR_VAR 0 6
2198: PUSH
2199: LD_EXP 7
2203: PUSH
2204: LD_EXP 2
2208: PUSH
2209: LD_VAR 0 2
2213: ARRAY
2214: ARRAY
2215: PUSH
2216: LD_INT 1
2218: ARRAY
2219: ST_TO_ADDR
// y := Side_Start [ Side_Positions [ i ] ] [ 2 ] ;
2220: LD_ADDR_VAR 0 7
2224: PUSH
2225: LD_EXP 7
2229: PUSH
2230: LD_EXP 2
2234: PUSH
2235: LD_VAR 0 2
2239: ARRAY
2240: ARRAY
2241: PUSH
2242: LD_INT 2
2244: ARRAY
2245: ST_TO_ADDR
// hc_importance := 100 ;
2246: LD_ADDR_OWVAR 32
2250: PUSH
2251: LD_INT 100
2253: ST_TO_ADDR
// if Multiplayer then
2254: LD_OWVAR 4
2258: IFFALSE 2316
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2260: LD_ADDR_OWVAR 26
2264: PUSH
2265: LD_OWVAR 19
2269: PUSH
2270: LD_OWVAR 20
2274: ARRAY
2275: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2276: LD_ADDR_OWVAR 33
2280: PUSH
2281: LD_STRING MULTIAVATARS
2283: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2284: LD_ADDR_OWVAR 34
2288: PUSH
2289: LD_OWVAR 20
2293: PPUSH
2294: CALL_OW 525
2298: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2299: LD_ADDR_OWVAR 27
2303: PUSH
2304: LD_OWVAR 20
2308: PPUSH
2309: CALL_OW 526
2313: ST_TO_ADDR
// end else
2314: GO 2348
// begin hc_name :=  ;
2316: LD_ADDR_OWVAR 26
2320: PUSH
2321: LD_STRING 
2323: ST_TO_ADDR
// hc_gallery :=  ;
2324: LD_ADDR_OWVAR 33
2328: PUSH
2329: LD_STRING 
2331: ST_TO_ADDR
// hc_sex := Rand ( 1 , 2 ) ;
2332: LD_ADDR_OWVAR 27
2336: PUSH
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 2
2342: PPUSH
2343: CALL_OW 12
2347: ST_TO_ADDR
// end ; PrepareHuman ( hc_sex , 1 , skill_level ) ;
2348: LD_OWVAR 27
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: LD_EXP 11
2360: PPUSH
2361: CALL_OW 380
// un := CreateHuman ;
2365: LD_ADDR_VAR 0 4
2369: PUSH
2370: CALL_OW 44
2374: ST_TO_ADDR
// if not to_copy then
2375: LD_VAR 0 5
2379: NOT
2380: IFFALSE 2407
// to_copy := Replace ( to_copy , 1 , un ) else
2382: LD_ADDR_VAR 0 5
2386: PUSH
2387: LD_VAR 0 5
2391: PPUSH
2392: LD_INT 1
2394: PPUSH
2395: LD_VAR 0 4
2399: PPUSH
2400: CALL_OW 1
2404: ST_TO_ADDR
2405: GO 2483
// begin CopySkills ( to_copy [ 1 ] , un ) ;
2407: LD_VAR 0 5
2411: PUSH
2412: LD_INT 1
2414: ARRAY
2415: PPUSH
2416: LD_VAR 0 4
2420: PPUSH
2421: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ 1 ] , attr_speed ) ) ;
2425: LD_VAR 0 4
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_VAR 0 5
2437: PUSH
2438: LD_INT 1
2440: ARRAY
2441: PPUSH
2442: LD_INT 2
2444: PPUSH
2445: CALL_OW 260
2449: PPUSH
2450: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ 1 ] , attr_stamina ) ) ;
2454: LD_VAR 0 4
2458: PPUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_VAR 0 5
2466: PUSH
2467: LD_INT 1
2469: ARRAY
2470: PPUSH
2471: LD_INT 1
2473: PPUSH
2474: CALL_OW 260
2478: PPUSH
2479: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2483: LD_VAR 0 4
2487: PPUSH
2488: LD_VAR 0 6
2492: PPUSH
2493: LD_VAR 0 7
2497: PPUSH
2498: LD_INT 10
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 50
// hc_importance := 0 ;
2508: LD_ADDR_OWVAR 32
2512: PUSH
2513: LD_INT 0
2515: ST_TO_ADDR
// hc_name :=  ;
2516: LD_ADDR_OWVAR 26
2520: PUSH
2521: LD_STRING 
2523: ST_TO_ADDR
// hc_gallery :=  ;
2524: LD_ADDR_OWVAR 33
2528: PUSH
2529: LD_STRING 
2531: ST_TO_ADDR
// d := ( number_of_people - 1 ) / 4 ;
2532: LD_ADDR_VAR 0 9
2536: PUSH
2537: LD_EXP 10
2541: PUSH
2542: LD_INT 1
2544: MINUS
2545: PUSH
2546: LD_INT 4
2548: DIVREAL
2549: ST_TO_ADDR
// c := 1 ;
2550: LD_ADDR_VAR 0 8
2554: PUSH
2555: LD_INT 1
2557: ST_TO_ADDR
// for j = 2 to number_of_people do
2558: LD_ADDR_VAR 0 3
2562: PUSH
2563: DOUBLE
2564: LD_INT 2
2566: DEC
2567: ST_TO_ADDR
2568: LD_EXP 10
2572: PUSH
2573: FOR_TO
2574: IFFALSE 2785
// begin PrepareHuman ( false , c , skill_level ) ;
2576: LD_INT 0
2578: PPUSH
2579: LD_VAR 0 8
2583: PPUSH
2584: LD_EXP 11
2588: PPUSH
2589: CALL_OW 380
// if ( j - 1 ) mod d = 0 then
2593: LD_VAR 0 3
2597: PUSH
2598: LD_INT 1
2600: MINUS
2601: PUSH
2602: LD_VAR 0 9
2606: MOD
2607: PUSH
2608: LD_INT 0
2610: EQUAL
2611: IFFALSE 2627
// c := c + 1 ;
2613: LD_ADDR_VAR 0 8
2617: PUSH
2618: LD_VAR 0 8
2622: PUSH
2623: LD_INT 1
2625: PLUS
2626: ST_TO_ADDR
// un := CreateHuman ;
2627: LD_ADDR_VAR 0 4
2631: PUSH
2632: CALL_OW 44
2636: ST_TO_ADDR
// if to_copy < j then
2637: LD_VAR 0 5
2641: PUSH
2642: LD_VAR 0 3
2646: LESS
2647: IFFALSE 2676
// to_copy := Replace ( to_copy , j , un ) else
2649: LD_ADDR_VAR 0 5
2653: PUSH
2654: LD_VAR 0 5
2658: PPUSH
2659: LD_VAR 0 3
2663: PPUSH
2664: LD_VAR 0 4
2668: PPUSH
2669: CALL_OW 1
2673: ST_TO_ADDR
2674: GO 2758
// begin CopySkills ( to_copy [ j ] , un ) ;
2676: LD_VAR 0 5
2680: PUSH
2681: LD_VAR 0 3
2685: ARRAY
2686: PPUSH
2687: LD_VAR 0 4
2691: PPUSH
2692: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ j ] , attr_speed ) ) ;
2696: LD_VAR 0 4
2700: PPUSH
2701: LD_INT 2
2703: PPUSH
2704: LD_VAR 0 5
2708: PUSH
2709: LD_VAR 0 3
2713: ARRAY
2714: PPUSH
2715: LD_INT 2
2717: PPUSH
2718: CALL_OW 260
2722: PPUSH
2723: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ j ] , attr_stamina ) ) ;
2727: LD_VAR 0 4
2731: PPUSH
2732: LD_INT 1
2734: PPUSH
2735: LD_VAR 0 5
2739: PUSH
2740: LD_VAR 0 3
2744: ARRAY
2745: PPUSH
2746: LD_INT 1
2748: PPUSH
2749: CALL_OW 260
2753: PPUSH
2754: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2758: LD_VAR 0 4
2762: PPUSH
2763: LD_VAR 0 6
2767: PPUSH
2768: LD_VAR 0 7
2772: PPUSH
2773: LD_INT 10
2775: PPUSH
2776: LD_INT 0
2778: PPUSH
2779: CALL_OW 50
// end ;
2783: GO 2573
2785: POP
2786: POP
// if handicap then
2787: LD_EXP 26
2791: IFFALSE 3062
// begin if handicap = 1 then
2793: LD_EXP 26
2797: PUSH
2798: LD_INT 1
2800: EQUAL
2801: IFFALSE 2880
// for j = 1 to 2 do
2803: LD_ADDR_VAR 0 3
2807: PUSH
2808: DOUBLE
2809: LD_INT 1
2811: DEC
2812: ST_TO_ADDR
2813: LD_INT 2
2815: PUSH
2816: FOR_TO
2817: IFFALSE 2878
// begin vc_chassis := ru_medium_tracked ;
2819: LD_ADDR_OWVAR 37
2823: PUSH
2824: LD_INT 22
2826: ST_TO_ADDR
// vc_engine := engine_combustion ;
2827: LD_ADDR_OWVAR 39
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// vc_control := control_manual ;
2835: LD_ADDR_OWVAR 38
2839: PUSH
2840: LD_INT 1
2842: ST_TO_ADDR
// vc_weapon := ru_gun ;
2843: LD_ADDR_OWVAR 40
2847: PUSH
2848: LD_INT 44
2850: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2851: CALL_OW 45
2855: PPUSH
2856: LD_VAR 0 6
2860: PPUSH
2861: LD_VAR 0 7
2865: PPUSH
2866: LD_INT 13
2868: PPUSH
2869: LD_INT 0
2871: PPUSH
2872: CALL_OW 50
// end ;
2876: GO 2816
2878: POP
2879: POP
// if handicap = 2 then
2880: LD_EXP 26
2884: PUSH
2885: LD_INT 2
2887: EQUAL
2888: IFFALSE 3062
// begin for j = 1 to 2 do
2890: LD_ADDR_VAR 0 3
2894: PUSH
2895: DOUBLE
2896: LD_INT 1
2898: DEC
2899: ST_TO_ADDR
2900: LD_INT 2
2902: PUSH
2903: FOR_TO
2904: IFFALSE 2978
// begin vc_chassis := ru_heavy_tracked ;
2906: LD_ADDR_OWVAR 37
2910: PUSH
2911: LD_INT 24
2913: ST_TO_ADDR
// vc_engine := engine_combustion ;
2914: LD_ADDR_OWVAR 39
2918: PUSH
2919: LD_INT 1
2921: ST_TO_ADDR
// vc_control := control_manual ;
2922: LD_ADDR_OWVAR 38
2926: PUSH
2927: LD_INT 1
2929: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_heavy_gun ] [ j ] ;
2930: LD_ADDR_OWVAR 40
2934: PUSH
2935: LD_INT 43
2937: PUSH
2938: LD_INT 46
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: PUSH
2945: LD_VAR 0 3
2949: ARRAY
2950: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2951: CALL_OW 45
2955: PPUSH
2956: LD_VAR 0 6
2960: PPUSH
2961: LD_VAR 0 7
2965: PPUSH
2966: LD_INT 13
2968: PPUSH
2969: LD_INT 0
2971: PPUSH
2972: CALL_OW 50
// end ;
2976: GO 2903
2978: POP
2979: POP
// vc_chassis := ru_medium_tracked ;
2980: LD_ADDR_OWVAR 37
2984: PUSH
2985: LD_INT 22
2987: ST_TO_ADDR
// vc_engine := engine_siberite ;
2988: LD_ADDR_OWVAR 39
2992: PUSH
2993: LD_INT 3
2995: ST_TO_ADDR
// vc_control := control_computer ;
2996: LD_ADDR_OWVAR 38
3000: PUSH
3001: LD_INT 3
3003: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
3004: LD_ADDR_OWVAR 40
3008: PUSH
3009: LD_INT 51
3011: ST_TO_ADDR
// un := CreateVehicle ;
3012: LD_ADDR_VAR 0 4
3016: PUSH
3017: CALL_OW 45
3021: ST_TO_ADDR
// PlaceUnitXYR ( un , x , y , 13 , false ) ;
3022: LD_VAR 0 4
3026: PPUSH
3027: LD_VAR 0 6
3031: PPUSH
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 13
3039: PPUSH
3040: LD_INT 0
3042: PPUSH
3043: CALL_OW 50
// SetCargo ( un , mat_cans , 100 ) ;
3047: LD_VAR 0 4
3051: PPUSH
3052: LD_INT 1
3054: PPUSH
3055: LD_INT 100
3057: PPUSH
3058: CALL_OW 290
// end ; end ; end ; end ;
3062: GO 2153
3064: POP
3065: POP
// end ;
3066: LD_VAR 0 1
3070: RET
// export function AddApeman ( area ) ; begin
3071: LD_INT 0
3073: PPUSH
// uc_nation := 0 ;
3074: LD_ADDR_OWVAR 21
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// uc_side := 0 ;
3082: LD_ADDR_OWVAR 20
3086: PUSH
3087: LD_INT 0
3089: ST_TO_ADDR
// hc_agressivity := rand ( - 10 , 15 ) ;
3090: LD_ADDR_OWVAR 35
3094: PUSH
3095: LD_INT 10
3097: NEG
3098: PPUSH
3099: LD_INT 15
3101: PPUSH
3102: CALL_OW 12
3106: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
3107: LD_INT 0
3109: PPUSH
3110: LD_INT 12
3112: PPUSH
3113: LD_INT 0
3115: PPUSH
3116: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
3120: LD_ADDR_OWVAR 29
3124: PUSH
3125: LD_INT 10
3127: PUSH
3128: LD_INT 12
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , area , false ) ;
3135: CALL_OW 44
3139: PPUSH
3140: LD_VAR 0 1
3144: PPUSH
3145: LD_INT 0
3147: PPUSH
3148: CALL_OW 49
// end ;
3152: LD_VAR 0 2
3156: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
3157: LD_INT 0
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
// tmp := AreaToList ( area , 0 ) ;
3163: LD_ADDR_VAR 0 5
3167: PUSH
3168: LD_VAR 0 1
3172: PPUSH
3173: LD_INT 0
3175: PPUSH
3176: CALL_OW 517
3180: ST_TO_ADDR
// if not tmp then
3181: LD_VAR 0 5
3185: NOT
3186: IFFALSE 3190
// exit ;
3188: GO 3428
// for i := 1 to n do
3190: LD_ADDR_VAR 0 4
3194: PUSH
3195: DOUBLE
3196: LD_INT 1
3198: DEC
3199: ST_TO_ADDR
3200: LD_VAR 0 2
3204: PUSH
3205: FOR_TO
3206: IFFALSE 3426
// begin r := rand ( 1 , tmp [ 1 ] ) ;
3208: LD_ADDR_VAR 0 6
3212: PUSH
3213: LD_INT 1
3215: PPUSH
3216: LD_VAR 0 5
3220: PUSH
3221: LD_INT 1
3223: ARRAY
3224: PPUSH
3225: CALL_OW 12
3229: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , bot_side , 0 ) ;
3230: LD_VAR 0 5
3234: PUSH
3235: LD_INT 1
3237: ARRAY
3238: PUSH
3239: LD_VAR 0 6
3243: ARRAY
3244: PPUSH
3245: LD_VAR 0 5
3249: PUSH
3250: LD_INT 2
3252: ARRAY
3253: PUSH
3254: LD_VAR 0 6
3258: ARRAY
3259: PPUSH
3260: LD_EXP 8
3264: PPUSH
3265: LD_INT 0
3267: PPUSH
3268: CALL_OW 454
// mines_list := Insert ( mines_list , mines_list + 1 , tmp [ 1 ] [ r ] ) ;
3272: LD_ADDR_EXP 17
3276: PUSH
3277: LD_EXP 17
3281: PPUSH
3282: LD_EXP 17
3286: PUSH
3287: LD_INT 1
3289: PLUS
3290: PPUSH
3291: LD_VAR 0 5
3295: PUSH
3296: LD_INT 1
3298: ARRAY
3299: PUSH
3300: LD_VAR 0 6
3304: ARRAY
3305: PPUSH
3306: CALL_OW 2
3310: ST_TO_ADDR
// mines_list := Insert ( mines_list , mines_list + 1 , tmp [ 2 ] [ r ] ) ;
3311: LD_ADDR_EXP 17
3315: PUSH
3316: LD_EXP 17
3320: PPUSH
3321: LD_EXP 17
3325: PUSH
3326: LD_INT 1
3328: PLUS
3329: PPUSH
3330: LD_VAR 0 5
3334: PUSH
3335: LD_INT 2
3337: ARRAY
3338: PUSH
3339: LD_VAR 0 6
3343: ARRAY
3344: PPUSH
3345: CALL_OW 2
3349: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
3350: LD_ADDR_VAR 0 5
3354: PUSH
3355: LD_VAR 0 5
3359: PPUSH
3360: LD_INT 1
3362: PPUSH
3363: LD_VAR 0 5
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PPUSH
3372: LD_VAR 0 6
3376: PPUSH
3377: CALL_OW 3
3381: PPUSH
3382: CALL_OW 1
3386: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
3387: LD_ADDR_VAR 0 5
3391: PUSH
3392: LD_VAR 0 5
3396: PPUSH
3397: LD_INT 2
3399: PPUSH
3400: LD_VAR 0 5
3404: PUSH
3405: LD_INT 2
3407: ARRAY
3408: PPUSH
3409: LD_VAR 0 6
3413: PPUSH
3414: CALL_OW 3
3418: PPUSH
3419: CALL_OW 1
3423: ST_TO_ADDR
// end ;
3424: GO 3205
3426: POP
3427: POP
// end ;
3428: LD_VAR 0 3
3432: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
3433: LD_INT 0
3435: PPUSH
3436: PPUSH
3437: PPUSH
// if not GetControl ( veh ) = control_manual then
3438: LD_VAR 0 1
3442: PPUSH
3443: CALL_OW 263
3447: PUSH
3448: LD_INT 1
3450: EQUAL
3451: NOT
3452: IFFALSE 3464
// result := false else
3454: LD_ADDR_VAR 0 2
3458: PUSH
3459: LD_INT 0
3461: ST_TO_ADDR
3462: GO 3609
// if veh in FilterAllUnits ( [ f_empty ] ) then
3464: LD_VAR 0 1
3468: PUSH
3469: LD_INT 58
3471: PUSH
3472: EMPTY
3473: LIST
3474: PPUSH
3475: CALL_OW 69
3479: IN
3480: IFFALSE 3492
// result := false else
3482: LD_ADDR_VAR 0 2
3486: PUSH
3487: LD_INT 0
3489: ST_TO_ADDR
3490: GO 3609
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
3492: LD_ADDR_VAR 0 4
3496: PUSH
3497: LD_INT 22
3499: PUSH
3500: LD_VAR 0 1
3504: PPUSH
3505: CALL_OW 255
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PUSH
3514: LD_INT 55
3516: PUSH
3517: EMPTY
3518: LIST
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PPUSH
3524: CALL_OW 69
3528: ST_TO_ADDR
// if not filter then
3529: LD_VAR 0 4
3533: NOT
3534: IFFALSE 3546
// result := false else
3536: LD_ADDR_VAR 0 2
3540: PUSH
3541: LD_INT 0
3543: ST_TO_ADDR
3544: GO 3609
// for i = 1 to filter do
3546: LD_ADDR_VAR 0 3
3550: PUSH
3551: DOUBLE
3552: LD_INT 1
3554: DEC
3555: ST_TO_ADDR
3556: LD_VAR 0 4
3560: PUSH
3561: FOR_TO
3562: IFFALSE 3607
// if IsDriver ( filter [ i ] ) = veh then
3564: LD_VAR 0 4
3568: PUSH
3569: LD_VAR 0 3
3573: ARRAY
3574: PPUSH
3575: CALL 43538 0 1
3579: PUSH
3580: LD_VAR 0 1
3584: EQUAL
3585: IFFALSE 3605
// begin result := filter [ i ] ;
3587: LD_ADDR_VAR 0 2
3591: PUSH
3592: LD_VAR 0 4
3596: PUSH
3597: LD_VAR 0 3
3601: ARRAY
3602: ST_TO_ADDR
// break ;
3603: GO 3607
// end ;
3605: GO 3561
3607: POP
3608: POP
// end ; end ; end_of_file
3609: LD_VAR 0 2
3613: RET
// export function InitBot ; var i , ct , hex , side , un , veh , weapons , skill ; begin
3614: LD_INT 0
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
3620: PPUSH
3621: PPUSH
3622: PPUSH
3623: PPUSH
3624: PPUSH
// side := Bot_Side ;
3625: LD_ADDR_VAR 0 5
3629: PUSH
3630: LD_EXP 8
3634: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
3635: LD_ADDR_VAR 0 9
3639: PUSH
3640: LD_INT 4
3642: PUSH
3643: LD_INT 6
3645: PUSH
3646: LD_INT 8
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: LIST
3653: PUSH
3654: LD_OWVAR 67
3658: ARRAY
3659: ST_TO_ADDR
// weapons := [ ar_gun , ar_rocket_launcher , ar_gatling_gun , ar_flame_thrower ] ;
3660: LD_ADDR_VAR 0 8
3664: PUSH
3665: LD_INT 27
3667: PUSH
3668: LD_INT 28
3670: PUSH
3671: LD_INT 25
3673: PUSH
3674: LD_INT 26
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: ST_TO_ADDR
// veh_counter := [ 4 , 5 , 6 ] [ Difficulty ] ;
3683: LD_ADDR_EXP 22
3687: PUSH
3688: LD_INT 4
3690: PUSH
3691: LD_INT 5
3693: PUSH
3694: LD_INT 6
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: LIST
3701: PUSH
3702: LD_OWVAR 67
3706: ARRAY
3707: ST_TO_ADDR
// ct := [ ] ;
3708: LD_ADDR_VAR 0 3
3712: PUSH
3713: EMPTY
3714: ST_TO_ADDR
// patrols := [ ] ;
3715: LD_ADDR_EXP 19
3719: PUSH
3720: EMPTY
3721: ST_TO_ADDR
// attackers := [ ] ;
3722: LD_ADDR_EXP 20
3726: PUSH
3727: EMPTY
3728: ST_TO_ADDR
// attackers_tmp := [ ] ;
3729: LD_ADDR_EXP 27
3733: PUSH
3734: EMPTY
3735: ST_TO_ADDR
// to_produce := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , ] ;
3736: LD_ADDR_EXP 21
3740: PUSH
3741: LD_INT 14
3743: PUSH
3744: LD_INT 1
3746: PUSH
3747: LD_INT 2
3749: PUSH
3750: LD_INT 27
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: PUSH
3759: LD_INT 14
3761: PUSH
3762: LD_INT 1
3764: PUSH
3765: LD_INT 2
3767: PUSH
3768: LD_INT 25
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: PUSH
3777: LD_INT 14
3779: PUSH
3780: LD_INT 1
3782: PUSH
3783: LD_INT 2
3785: PUSH
3786: LD_INT 28
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 14
3797: PUSH
3798: LD_INT 1
3800: PUSH
3801: LD_INT 2
3803: PUSH
3804: LD_INT 29
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: ST_TO_ADDR
// if Difficulty > 2 then
3819: LD_OWVAR 67
3823: PUSH
3824: LD_INT 2
3826: GREATER
3827: IFFALSE 3895
// begin to_produce := Join ( to_produce , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ) ;
3829: LD_ADDR_EXP 21
3833: PUSH
3834: LD_EXP 21
3838: PPUSH
3839: LD_INT 14
3841: PUSH
3842: LD_INT 1
3844: PUSH
3845: LD_INT 2
3847: PUSH
3848: LD_INT 27
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL 45921 0 2
3861: ST_TO_ADDR
// to_produce := Join ( to_produce , [ ar_medium_trike , engine_siberite , control_remote , ar_selfpropelled_bomb ] ) ;
3862: LD_ADDR_EXP 21
3866: PUSH
3867: LD_EXP 21
3871: PPUSH
3872: LD_INT 13
3874: PUSH
3875: LD_INT 3
3877: PUSH
3878: LD_INT 2
3880: PUSH
3881: LD_INT 29
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: PPUSH
3890: CALL 45921 0 2
3894: ST_TO_ADDR
// end ; SetBName ( ar_dep , newkabul ) ;
3895: LD_INT 2
3897: PPUSH
3898: LD_STRING newkabul
3900: PPUSH
3901: CALL_OW 500
// SetResourceType ( GetBase ( ar_dep ) , mat_cans , 90000 ) ;
3905: LD_INT 2
3907: PPUSH
3908: CALL_OW 274
3912: PPUSH
3913: LD_INT 1
3915: PPUSH
3916: LD_INT 90000
3918: PPUSH
3919: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_oil , 9000 ) ;
3923: LD_INT 2
3925: PPUSH
3926: CALL_OW 274
3930: PPUSH
3931: LD_INT 2
3933: PPUSH
3934: LD_INT 9000
3936: PPUSH
3937: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_siberit , 3000 ) ;
3941: LD_INT 2
3943: PPUSH
3944: CALL_OW 274
3948: PPUSH
3949: LD_INT 3
3951: PPUSH
3952: LD_INT 3000
3954: PPUSH
3955: CALL_OW 277
// if Difficulty > 1 then
3959: LD_OWVAR 67
3963: PUSH
3964: LD_INT 1
3966: GREATER
3967: IFFALSE 3984
// SetTech ( 5 , side , state_researched ) ;
3969: LD_INT 5
3971: PPUSH
3972: LD_VAR 0 5
3976: PPUSH
3977: LD_INT 2
3979: PPUSH
3980: CALL_OW 322
// SetTech ( tech_mortar , side , state_researched ) ;
3984: LD_INT 41
3986: PPUSH
3987: LD_VAR 0 5
3991: PPUSH
3992: LD_INT 2
3994: PPUSH
3995: CALL_OW 322
// SetTech ( tech_weap1 , side , state_researched ) ;
3999: LD_INT 51
4001: PPUSH
4002: LD_VAR 0 5
4006: PPUSH
4007: LD_INT 2
4009: PPUSH
4010: CALL_OW 322
// SetTech ( tech_weap2 , side , state_researched ) ;
4014: LD_INT 52
4016: PPUSH
4017: LD_VAR 0 5
4021: PPUSH
4022: LD_INT 2
4024: PPUSH
4025: CALL_OW 322
// SetTech ( tech_weap3 , side , state_researched ) ;
4029: LD_INT 53
4031: PPUSH
4032: LD_VAR 0 5
4036: PPUSH
4037: LD_INT 2
4039: PPUSH
4040: CALL_OW 322
// SetTech ( tech_opto1 , side , state_researched ) ;
4044: LD_INT 60
4046: PPUSH
4047: LD_VAR 0 5
4051: PPUSH
4052: LD_INT 2
4054: PPUSH
4055: CALL_OW 322
// SetTech ( tech_opto2 , side , state_researched ) ;
4059: LD_INT 61
4061: PPUSH
4062: LD_VAR 0 5
4066: PPUSH
4067: LD_INT 2
4069: PPUSH
4070: CALL_OW 322
// SetTech ( tech_opto3 , side , state_researched ) ;
4074: LD_INT 62
4076: PPUSH
4077: LD_VAR 0 5
4081: PPUSH
4082: LD_INT 2
4084: PPUSH
4085: CALL_OW 322
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
4089: LD_ADDR_VAR 0 2
4093: PUSH
4094: LD_INT 22
4096: PUSH
4097: LD_VAR 0 5
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 21
4108: PUSH
4109: LD_INT 3
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: PPUSH
4120: CALL_OW 69
4124: PUSH
4125: FOR_IN
4126: IFFALSE 4159
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
4128: LD_VAR 0 2
4132: PPUSH
4133: LD_INT 6
4135: PUSH
4136: LD_INT 8
4138: PUSH
4139: LD_INT 10
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: LIST
4146: PUSH
4147: LD_OWVAR 67
4151: ARRAY
4152: PPUSH
4153: CALL_OW 241
4157: GO 4125
4159: POP
4160: POP
// if Difficulty > 1 then
4161: LD_OWVAR 67
4165: PUSH
4166: LD_INT 1
4168: GREATER
4169: IFFALSE 4178
// RemoveEnvironmentArea ( forest_road ) ;
4171: LD_INT 11
4173: PPUSH
4174: CALL_OW 355
// PlaceMines ( mine_west_zone , [ 10 , 12 , 18 ] [ Difficulty ] ) ;
4178: LD_INT 4
4180: PPUSH
4181: LD_INT 10
4183: PUSH
4184: LD_INT 12
4186: PUSH
4187: LD_INT 18
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: LIST
4194: PUSH
4195: LD_OWVAR 67
4199: ARRAY
4200: PPUSH
4201: CALL 3157 0 2
// PlaceMines ( mine_east_zone , [ 7 , 12 , 15 ] [ Difficulty ] ) ;
4205: LD_INT 5
4207: PPUSH
4208: LD_INT 7
4210: PUSH
4211: LD_INT 12
4213: PUSH
4214: LD_INT 15
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: LIST
4221: PUSH
4222: LD_OWVAR 67
4226: ARRAY
4227: PPUSH
4228: CALL 3157 0 2
// PlaceMines ( mine_south_zone , [ 5 , 8 , 12 ] [ Difficulty ] ) ;
4232: LD_INT 7
4234: PPUSH
4235: LD_INT 5
4237: PUSH
4238: LD_INT 8
4240: PUSH
4241: LD_INT 12
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: PUSH
4249: LD_OWVAR 67
4253: ARRAY
4254: PPUSH
4255: CALL 3157 0 2
// PlaceMines ( mine_high_zone , [ 0 , 3 , 5 ] [ Difficulty ] ) ;
4259: LD_INT 6
4261: PPUSH
4262: LD_INT 0
4264: PUSH
4265: LD_INT 3
4267: PUSH
4268: LD_INT 5
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: LIST
4275: PUSH
4276: LD_OWVAR 67
4280: ARRAY
4281: PPUSH
4282: CALL 3157 0 2
// PlaceMines ( mine_road_zone , [ 2 , 5 , 8 ] [ Difficulty ] ) ;
4286: LD_INT 8
4288: PPUSH
4289: LD_INT 2
4291: PUSH
4292: LD_INT 5
4294: PUSH
4295: LD_INT 8
4297: PUSH
4298: EMPTY
4299: LIST
4300: LIST
4301: LIST
4302: PUSH
4303: LD_OWVAR 67
4307: ARRAY
4308: PPUSH
4309: CALL 3157 0 2
// PlaceMines ( mine_southpass_zone , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
4313: LD_INT 9
4315: PPUSH
4316: LD_INT 0
4318: PUSH
4319: LD_INT 2
4321: PUSH
4322: LD_INT 4
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: LIST
4329: PUSH
4330: LD_OWVAR 67
4334: ARRAY
4335: PPUSH
4336: CALL 3157 0 2
// PlaceMines ( mine_oileast_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4340: LD_INT 10
4342: PPUSH
4343: LD_INT 0
4345: PUSH
4346: LD_INT 1
4348: PUSH
4349: LD_INT 1
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: PUSH
4357: LD_OWVAR 67
4361: ARRAY
4362: PPUSH
4363: CALL 3157 0 2
// PlaceMines ( mine_oilwest_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4367: LD_INT 12
4369: PPUSH
4370: LD_INT 0
4372: PUSH
4373: LD_INT 1
4375: PUSH
4376: LD_INT 1
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: LIST
4383: PUSH
4384: LD_OWVAR 67
4388: ARRAY
4389: PPUSH
4390: CALL 3157 0 2
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4394: LD_ADDR_VAR 0 2
4398: PUSH
4399: LD_INT 22
4401: PUSH
4402: LD_VAR 0 5
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: PUSH
4411: LD_INT 30
4413: PUSH
4414: LD_INT 32
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PPUSH
4425: CALL_OW 69
4429: PUSH
4430: FOR_IN
4431: IFFALSE 4463
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
4433: LD_VAR 0 2
4437: PPUSH
4438: LD_VAR 0 8
4442: PUSH
4443: LD_INT 1
4445: PPUSH
4446: LD_VAR 0 8
4450: PPUSH
4451: CALL_OW 12
4455: ARRAY
4456: PPUSH
4457: CALL_OW 431
4461: GO 4430
4463: POP
4464: POP
// uc_side := side ;
4465: LD_ADDR_OWVAR 20
4469: PUSH
4470: LD_VAR 0 5
4474: ST_TO_ADDR
// uc_nation := 2 ;
4475: LD_ADDR_OWVAR 21
4479: PUSH
4480: LD_INT 2
4482: ST_TO_ADDR
// for i = 1 to 1 + Difficulty do
4483: LD_ADDR_VAR 0 2
4487: PUSH
4488: DOUBLE
4489: LD_INT 1
4491: DEC
4492: ST_TO_ADDR
4493: LD_INT 1
4495: PUSH
4496: LD_OWVAR 67
4500: PLUS
4501: PUSH
4502: FOR_TO
4503: IFFALSE 4593
// begin vc_chassis := ar_half_tracked ;
4505: LD_ADDR_OWVAR 37
4509: PUSH
4510: LD_INT 14
4512: ST_TO_ADDR
// vc_engine := engine_combustion ;
4513: LD_ADDR_OWVAR 39
4517: PUSH
4518: LD_INT 1
4520: ST_TO_ADDR
// vc_control := control_manual ;
4521: LD_ADDR_OWVAR 38
4525: PUSH
4526: LD_INT 1
4528: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4529: LD_ADDR_OWVAR 40
4533: PUSH
4534: LD_INT 31
4536: ST_TO_ADDR
// veh := CreateVehicle ;
4537: LD_ADDR_VAR 0 7
4541: PUSH
4542: CALL_OW 45
4546: ST_TO_ADDR
// PlaceUnitArea ( veh , ct_area , false ) ;
4547: LD_VAR 0 7
4551: PPUSH
4552: LD_INT 3
4554: PPUSH
4555: LD_INT 0
4557: PPUSH
4558: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
4562: LD_INT 0
4564: PPUSH
4565: LD_INT 3
4567: PPUSH
4568: LD_VAR 0 9
4572: PPUSH
4573: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4577: CALL_OW 44
4581: PPUSH
4582: LD_VAR 0 7
4586: PPUSH
4587: CALL_OW 52
// end ;
4591: GO 4502
4593: POP
4594: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4595: LD_ADDR_VAR 0 2
4599: PUSH
4600: LD_INT 22
4602: PUSH
4603: LD_VAR 0 5
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: LD_INT 30
4614: PUSH
4615: LD_INT 32
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PPUSH
4626: CALL_OW 69
4630: PUSH
4631: FOR_IN
4632: IFFALSE 4665
// begin PrepareHuman ( false , 1 , skill ) ;
4634: LD_INT 0
4636: PPUSH
4637: LD_INT 1
4639: PPUSH
4640: LD_VAR 0 9
4644: PPUSH
4645: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4649: CALL_OW 44
4653: PPUSH
4654: LD_VAR 0 2
4658: PPUSH
4659: CALL_OW 52
// end ;
4663: GO 4631
4665: POP
4666: POP
// for i = 1 to 4 do
4667: LD_ADDR_VAR 0 2
4671: PUSH
4672: DOUBLE
4673: LD_INT 1
4675: DEC
4676: ST_TO_ADDR
4677: LD_INT 4
4679: PUSH
4680: FOR_TO
4681: IFFALSE 4712
// begin PrepareHuman ( false , 2 , skill ) ;
4683: LD_INT 0
4685: PPUSH
4686: LD_INT 2
4688: PPUSH
4689: LD_VAR 0 9
4693: PPUSH
4694: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_dep ) ;
4698: CALL_OW 44
4702: PPUSH
4703: LD_INT 2
4705: PPUSH
4706: CALL_OW 52
// end ;
4710: GO 4680
4712: POP
4713: POP
// for i = 1 to 6 do
4714: LD_ADDR_VAR 0 2
4718: PUSH
4719: DOUBLE
4720: LD_INT 1
4722: DEC
4723: ST_TO_ADDR
4724: LD_INT 6
4726: PUSH
4727: FOR_TO
4728: IFFALSE 4759
// begin PrepareHuman ( false , 3 , skill ) ;
4730: LD_INT 0
4732: PPUSH
4733: LD_INT 3
4735: PPUSH
4736: LD_VAR 0 9
4740: PPUSH
4741: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_fac ) ;
4745: CALL_OW 44
4749: PPUSH
4750: LD_INT 12
4752: PPUSH
4753: CALL_OW 52
// end ;
4757: GO 4727
4759: POP
4760: POP
// for i = 1 to 4 do
4761: LD_ADDR_VAR 0 2
4765: PUSH
4766: DOUBLE
4767: LD_INT 1
4769: DEC
4770: ST_TO_ADDR
4771: LD_INT 4
4773: PUSH
4774: FOR_TO
4775: IFFALSE 4832
// begin PrepareHuman ( false , 4 , skill ) ;
4777: LD_INT 0
4779: PPUSH
4780: LD_INT 4
4782: PPUSH
4783: LD_VAR 0 9
4787: PPUSH
4788: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ f_btype , b_lab_full ] ) [ ( i mod 2 ) + 1 ] ) ;
4792: CALL_OW 44
4796: PPUSH
4797: LD_INT 30
4799: PUSH
4800: LD_INT 8
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: PPUSH
4807: CALL_OW 69
4811: PUSH
4812: LD_VAR 0 2
4816: PUSH
4817: LD_INT 2
4819: MOD
4820: PUSH
4821: LD_INT 1
4823: PLUS
4824: ARRAY
4825: PPUSH
4826: CALL_OW 52
// end ;
4830: GO 4774
4832: POP
4833: POP
// PrepareHuman ( false , class_mortar , skill ) ;
4834: LD_INT 0
4836: PPUSH
4837: LD_INT 8
4839: PPUSH
4840: LD_VAR 0 9
4844: PPUSH
4845: CALL_OW 380
// un := CreateHuman ;
4849: LD_ADDR_VAR 0 6
4853: PUSH
4854: CALL_OW 44
4858: ST_TO_ADDR
// SetDir ( un , 2 ) ;
4859: LD_VAR 0 6
4863: PPUSH
4864: LD_INT 2
4866: PPUSH
4867: CALL_OW 233
// PlaceHumanInUnit ( un , bun1 ) ;
4871: LD_VAR 0 6
4875: PPUSH
4876: LD_INT 31
4878: PPUSH
4879: CALL_OW 52
// for i = 1 to 4 do
4883: LD_ADDR_VAR 0 2
4887: PUSH
4888: DOUBLE
4889: LD_INT 1
4891: DEC
4892: ST_TO_ADDR
4893: LD_INT 4
4895: PUSH
4896: FOR_TO
4897: IFFALSE 4953
// begin uc_nation := 0 ;
4899: LD_ADDR_OWVAR 21
4903: PUSH
4904: LD_INT 0
4906: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 1 ) ;
4907: LD_INT 0
4909: PPUSH
4910: LD_INT 16
4912: PPUSH
4913: LD_INT 1
4915: PPUSH
4916: CALL_OW 380
// un := CreateHuman ;
4920: LD_ADDR_VAR 0 6
4924: PUSH
4925: CALL_OW 44
4929: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 46 , 8 , false ) ;
4930: LD_VAR 0 6
4934: PPUSH
4935: LD_INT 106
4937: PPUSH
4938: LD_INT 46
4940: PPUSH
4941: LD_INT 8
4943: PPUSH
4944: LD_INT 0
4946: PPUSH
4947: CALL_OW 50
// end ;
4951: GO 4896
4953: POP
4954: POP
// for i = 1 to 2 * Difficulty do
4955: LD_ADDR_VAR 0 2
4959: PUSH
4960: DOUBLE
4961: LD_INT 1
4963: DEC
4964: ST_TO_ADDR
4965: LD_INT 2
4967: PUSH
4968: LD_OWVAR 67
4972: MUL
4973: PUSH
4974: FOR_TO
4975: IFFALSE 5015
// begin uc_nation := 0 ;
4977: LD_ADDR_OWVAR 21
4981: PUSH
4982: LD_INT 0
4984: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_soldier , 3 ) ;
4985: LD_INT 0
4987: PPUSH
4988: LD_INT 15
4990: PPUSH
4991: LD_INT 3
4993: PPUSH
4994: CALL_OW 380
// PlaceUnitArea ( CreateHuman , ap1 , false ) ;
4998: CALL_OW 44
5002: PPUSH
5003: LD_INT 20
5005: PPUSH
5006: LD_INT 0
5008: PPUSH
5009: CALL_OW 49
// end ;
5013: GO 4974
5015: POP
5016: POP
// for i = 1 to 4 * Difficulty do
5017: LD_ADDR_VAR 0 2
5021: PUSH
5022: DOUBLE
5023: LD_INT 1
5025: DEC
5026: ST_TO_ADDR
5027: LD_INT 4
5029: PUSH
5030: LD_OWVAR 67
5034: MUL
5035: PUSH
5036: FOR_TO
5037: IFFALSE 5111
// begin uc_nation := 0 ;
5039: LD_ADDR_OWVAR 21
5043: PUSH
5044: LD_INT 0
5046: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_kamikaze , 3 ) ;
5047: LD_INT 0
5049: PPUSH
5050: LD_INT 17
5052: PPUSH
5053: LD_INT 3
5055: PPUSH
5056: CALL_OW 380
// hc_attr := [ 11 , 13 ] ;
5060: LD_ADDR_OWVAR 29
5064: PUSH
5065: LD_INT 11
5067: PUSH
5068: LD_INT 13
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: ST_TO_ADDR
// un := CreateHuman ;
5075: LD_ADDR_VAR 0 6
5079: PUSH
5080: CALL_OW 44
5084: ST_TO_ADDR
// PlaceUnitArea ( un , ap2 , false ) ;
5085: LD_VAR 0 6
5089: PPUSH
5090: LD_INT 21
5092: PPUSH
5093: LD_INT 0
5095: PPUSH
5096: CALL_OW 49
// ComHold ( un ) ;
5100: LD_VAR 0 6
5104: PPUSH
5105: CALL_OW 140
// end ;
5109: GO 5036
5111: POP
5112: POP
// end ;
5113: LD_VAR 0 1
5117: RET
// every 12 12$00 + 2 2$00 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) do var i , tmp , p ;
5118: LD_INT 22
5120: PUSH
5121: LD_EXP 8
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: LD_INT 30
5132: PUSH
5133: LD_INT 3
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PPUSH
5144: CALL_OW 69
5148: IFFALSE 5455
5150: GO 5152
5152: DISABLE
5153: LD_INT 0
5155: PPUSH
5156: PPUSH
5157: PPUSH
// begin enable ;
5158: ENABLE
// if Difficulty < 3 then
5159: LD_OWVAR 67
5163: PUSH
5164: LD_INT 3
5166: LESS
5167: IFFALSE 5176
// wait ( 1 1$00 ) ;
5169: LD_INT 2100
5171: PPUSH
5172: CALL_OW 67
// tmp := queue_codes [ rng ] ;
5176: LD_ADDR_VAR 0 2
5180: PUSH
5181: LD_EXP 23
5185: PUSH
5186: LD_EXP 24
5190: ARRAY
5191: ST_TO_ADDR
// p := 1 ;
5192: LD_ADDR_VAR 0 3
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// for i = 1 to veh_counter + [ - 1 , 0 , 1 ] [ Difficulty ] do
5200: LD_ADDR_VAR 0 1
5204: PUSH
5205: DOUBLE
5206: LD_INT 1
5208: DEC
5209: ST_TO_ADDR
5210: LD_EXP 22
5214: PUSH
5215: LD_INT 1
5217: NEG
5218: PUSH
5219: LD_INT 0
5221: PUSH
5222: LD_INT 1
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: LIST
5229: PUSH
5230: LD_OWVAR 67
5234: ARRAY
5235: PLUS
5236: PUSH
5237: FOR_TO
5238: IFFALSE 5419
// begin AddComConstruct ( FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) [ 1 ] , to_produce [ tmp mod 10 ] [ 1 ] , to_produce [ tmp mod 10 ] [ 2 ] , to_produce [ tmp mod 10 ] [ 3 ] , to_produce [ tmp mod 10 ] [ 4 ] ) ;
5240: LD_INT 22
5242: PUSH
5243: LD_EXP 8
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: LD_INT 30
5254: PUSH
5255: LD_INT 3
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PUSH
5271: LD_INT 1
5273: ARRAY
5274: PPUSH
5275: LD_EXP 21
5279: PUSH
5280: LD_VAR 0 2
5284: PUSH
5285: LD_INT 10
5287: MOD
5288: ARRAY
5289: PUSH
5290: LD_INT 1
5292: ARRAY
5293: PPUSH
5294: LD_EXP 21
5298: PUSH
5299: LD_VAR 0 2
5303: PUSH
5304: LD_INT 10
5306: MOD
5307: ARRAY
5308: PUSH
5309: LD_INT 2
5311: ARRAY
5312: PPUSH
5313: LD_EXP 21
5317: PUSH
5318: LD_VAR 0 2
5322: PUSH
5323: LD_INT 10
5325: MOD
5326: ARRAY
5327: PUSH
5328: LD_INT 3
5330: ARRAY
5331: PPUSH
5332: LD_EXP 21
5336: PUSH
5337: LD_VAR 0 2
5341: PUSH
5342: LD_INT 10
5344: MOD
5345: ARRAY
5346: PUSH
5347: LD_INT 4
5349: ARRAY
5350: PPUSH
5351: CALL_OW 185
// tmp := tmp / 10 ;
5355: LD_ADDR_VAR 0 2
5359: PUSH
5360: LD_VAR 0 2
5364: PUSH
5365: LD_INT 10
5367: DIVREAL
5368: ST_TO_ADDR
// p := p + 1 ;
5369: LD_ADDR_VAR 0 3
5373: PUSH
5374: LD_VAR 0 3
5378: PUSH
5379: LD_INT 1
5381: PLUS
5382: ST_TO_ADDR
// if p > 5 then
5383: LD_VAR 0 3
5387: PUSH
5388: LD_INT 5
5390: GREATER
5391: IFFALSE 5417
// begin p := 1 ;
5393: LD_ADDR_VAR 0 3
5397: PUSH
5398: LD_INT 1
5400: ST_TO_ADDR
// tmp := queue_codes [ rng ] ;
5401: LD_ADDR_VAR 0 2
5405: PUSH
5406: LD_EXP 23
5410: PUSH
5411: LD_EXP 24
5415: ARRAY
5416: ST_TO_ADDR
// end ; end ;
5417: GO 5237
5419: POP
5420: POP
// rng := rng + 1 ;
5421: LD_ADDR_EXP 24
5425: PUSH
5426: LD_EXP 24
5430: PUSH
5431: LD_INT 1
5433: PLUS
5434: ST_TO_ADDR
// if rng > queue_codes then
5435: LD_EXP 24
5439: PUSH
5440: LD_EXP 23
5444: GREATER
5445: IFFALSE 5455
// rng := 1 ;
5447: LD_ADDR_EXP 24
5451: PUSH
5452: LD_INT 1
5454: ST_TO_ADDR
// end ;
5455: PPOPN 3
5457: END
// every 0 0$01 trigger FilterAllUnits ( [ f_class , 17 ] ) do var i , un ;
5458: LD_INT 25
5460: PUSH
5461: LD_INT 17
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: PPUSH
5468: CALL_OW 69
5472: IFFALSE 5575
5474: GO 5476
5476: DISABLE
5477: LD_INT 0
5479: PPUSH
5480: PPUSH
// begin enable ;
5481: ENABLE
// for i in FilterAllUnits ( [ f_class , 17 ] ) do
5482: LD_ADDR_VAR 0 1
5486: PUSH
5487: LD_INT 25
5489: PUSH
5490: LD_INT 17
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PPUSH
5497: CALL_OW 69
5501: PUSH
5502: FOR_IN
5503: IFFALSE 5573
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , bot_side ] ) , i ) ;
5505: LD_ADDR_VAR 0 2
5509: PUSH
5510: LD_INT 81
5512: PUSH
5513: LD_EXP 8
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PPUSH
5522: CALL_OW 69
5526: PPUSH
5527: LD_VAR 0 1
5531: PPUSH
5532: CALL_OW 74
5536: ST_TO_ADDR
// if GetDistUnits ( i , un ) < 15 then
5537: LD_VAR 0 1
5541: PPUSH
5542: LD_VAR 0 2
5546: PPUSH
5547: CALL_OW 296
5551: PUSH
5552: LD_INT 15
5554: LESS
5555: IFFALSE 5571
// ComAttackUnit ( i , un ) ;
5557: LD_VAR 0 1
5561: PPUSH
5562: LD_VAR 0 2
5566: PPUSH
5567: CALL_OW 115
// end ;
5571: GO 5502
5573: POP
5574: POP
// end ;
5575: PPOPN 2
5577: END
// every 0 0$01 trigger attackers marked 17 do var i ;
5578: LD_EXP 20
5582: IFFALSE 5649
5584: GO 5586
5586: DISABLE
5587: LD_INT 0
5589: PPUSH
// begin enable ;
5590: ENABLE
// for i in attackers do
5591: LD_ADDR_VAR 0 1
5595: PUSH
5596: LD_EXP 20
5600: PUSH
5601: FOR_IN
5602: IFFALSE 5647
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
5604: LD_VAR 0 1
5608: PPUSH
5609: LD_INT 81
5611: PUSH
5612: LD_VAR 0 1
5616: PPUSH
5617: CALL_OW 255
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PPUSH
5626: CALL_OW 69
5630: PPUSH
5631: LD_VAR 0 1
5635: PPUSH
5636: CALL_OW 74
5640: PPUSH
5641: CALL_OW 115
5645: GO 5601
5647: POP
5648: POP
// end ;
5649: PPOPN 1
5651: END
// every 0 0$01 trigger not attackers marked 17 do
5652: LD_EXP 20
5656: NOT
5657: IFFALSE 5666
5659: GO 5661
5661: DISABLE
// begin enable ;
5662: ENABLE
// disable ( 17 ) ;
5663: LD_INT 17
5665: DISABLE_MARKED
// end ;
5666: END
// every 1 1$00 trigger veh_counter <= attackers do var max , i ;
5667: LD_EXP 22
5671: PUSH
5672: LD_EXP 20
5676: LESSEQUAL
5677: IFFALSE 5690
5679: GO 5681
5681: DISABLE
5682: LD_INT 0
5684: PPUSH
5685: PPUSH
// begin enable ;
5686: ENABLE
// enable ( 17 ) ;
5687: LD_INT 17
5689: ENABLE_MARKED
// end ;
5690: PPOPN 2
5692: END
// every 0 0$01 trigger game_start and tick >= 50 50$00 do
5693: LD_EXP 9
5697: PUSH
5698: LD_OWVAR 1
5702: PUSH
5703: LD_INT 105000
5705: GREATEREQUAL
5706: AND
5707: IFFALSE 5726
5709: GO 5711
5711: DISABLE
// veh_counter := veh_counter + 2 ;
5712: LD_ADDR_EXP 22
5716: PUSH
5717: LD_EXP 22
5721: PUSH
5722: LD_INT 2
5724: PLUS
5725: ST_TO_ADDR
5726: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
5727: LD_INT 22
5729: PUSH
5730: LD_EXP 8
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: LD_INT 33
5741: PUSH
5742: LD_INT 2
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: PPUSH
5753: CALL_OW 69
5757: IFFALSE 5973
5759: GO 5761
5761: DISABLE
5762: LD_INT 0
5764: PPUSH
5765: PPUSH
5766: PPUSH
5767: PPUSH
5768: PPUSH
5769: PPUSH
5770: PPUSH
// begin enable ;
5771: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
5772: LD_ADDR_VAR 0 4
5776: PUSH
5777: LD_INT 22
5779: PUSH
5780: LD_EXP 8
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 33
5791: PUSH
5792: LD_INT 2
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 3
5801: PUSH
5802: LD_INT 61
5804: PUSH
5805: EMPTY
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: LIST
5816: PPUSH
5817: CALL_OW 69
5821: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_weapon , ar_control_tower ] ] ) ;
5822: LD_ADDR_VAR 0 3
5826: PUSH
5827: LD_INT 22
5829: PUSH
5830: LD_EXP 8
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PUSH
5839: LD_INT 34
5841: PUSH
5842: LD_INT 31
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: PPUSH
5853: CALL_OW 69
5857: ST_TO_ADDR
// best := 10 ;
5858: LD_ADDR_VAR 0 5
5862: PUSH
5863: LD_INT 10
5865: ST_TO_ADDR
// best_mechanic := - 1 ;
5866: LD_ADDR_VAR 0 6
5870: PUSH
5871: LD_INT 1
5873: NEG
5874: ST_TO_ADDR
// if vehs then
5875: LD_VAR 0 4
5879: IFFALSE 5973
// begin for j in cts do
5881: LD_ADDR_VAR 0 2
5885: PUSH
5886: LD_VAR 0 3
5890: PUSH
5891: FOR_IN
5892: IFFALSE 5953
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
5894: LD_ADDR_VAR 0 7
5898: PUSH
5899: LD_VAR 0 2
5903: PPUSH
5904: CALL 3433 0 1
5908: PPUSH
5909: CALL_OW 432
5913: ST_TO_ADDR
// if p < best then
5914: LD_VAR 0 7
5918: PUSH
5919: LD_VAR 0 5
5923: LESS
5924: IFFALSE 5951
// begin best := p ;
5926: LD_ADDR_VAR 0 5
5930: PUSH
5931: LD_VAR 0 7
5935: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
5936: LD_ADDR_VAR 0 6
5940: PUSH
5941: LD_VAR 0 2
5945: PPUSH
5946: CALL 3433 0 1
5950: ST_TO_ADDR
// end ; end ;
5951: GO 5891
5953: POP
5954: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
5955: LD_VAR 0 4
5959: PUSH
5960: LD_INT 1
5962: ARRAY
5963: PPUSH
5964: LD_VAR 0 6
5968: PPUSH
5969: CALL_OW 135
// end ; end ;
5973: PPOPN 7
5975: END
// every 0 0$01 do var i , j , h , sci , eng , b , p ;
5976: GO 5978
5978: DISABLE
5979: LD_INT 0
5981: PPUSH
5982: PPUSH
5983: PPUSH
5984: PPUSH
5985: PPUSH
5986: PPUSH
5987: PPUSH
// begin enable ;
5988: ENABLE
// b := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5989: LD_ADDR_VAR 0 6
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_EXP 8
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PUSH
6006: LD_INT 21
6008: PUSH
6009: LD_INT 3
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PUSH
6016: LD_INT 3
6018: PUSH
6019: LD_INT 24
6021: PUSH
6022: LD_INT 1000
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: LIST
6037: PPUSH
6038: CALL_OW 69
6042: ST_TO_ADDR
// h := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6043: LD_ADDR_VAR 0 3
6047: PUSH
6048: LD_INT 22
6050: PUSH
6051: LD_EXP 8
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: PUSH
6060: LD_INT 2
6062: PUSH
6063: LD_INT 25
6065: PUSH
6066: LD_INT 1
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 25
6075: PUSH
6076: LD_INT 2
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 25
6085: PUSH
6086: LD_INT 3
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 3
6101: PUSH
6102: LD_INT 24
6104: PUSH
6105: LD_INT 750
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 69
6125: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) ;
6126: LD_ADDR_VAR 0 4
6130: PUSH
6131: LD_INT 22
6133: PUSH
6134: LD_EXP 8
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PUSH
6143: LD_INT 25
6145: PUSH
6146: LD_INT 4
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PPUSH
6157: CALL_OW 69
6161: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 2 ] ] ) ;
6162: LD_ADDR_VAR 0 5
6166: PUSH
6167: LD_INT 22
6169: PUSH
6170: LD_EXP 8
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 25
6181: PUSH
6182: LD_INT 2
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PPUSH
6193: CALL_OW 69
6197: ST_TO_ADDR
// if not h and not b then
6198: LD_VAR 0 3
6202: NOT
6203: PUSH
6204: LD_VAR 0 6
6208: NOT
6209: AND
6210: IFFALSE 6494
// begin if sci then
6212: LD_VAR 0 4
6216: IFFALSE 6353
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) then
6218: LD_VAR 0 4
6222: PPUSH
6223: LD_INT 3
6225: PUSH
6226: LD_INT 54
6228: PUSH
6229: EMPTY
6230: LIST
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PPUSH
6236: CALL_OW 72
6240: PUSH
6241: LD_INT 22
6243: PUSH
6244: LD_EXP 8
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 30
6255: PUSH
6256: LD_INT 8
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PPUSH
6267: CALL_OW 69
6271: AND
6272: IFFALSE 6353
// for j in UnitFilter ( sci , [ f_not , [ f_inside ] ] ) do
6274: LD_ADDR_VAR 0 2
6278: PUSH
6279: LD_VAR 0 4
6283: PPUSH
6284: LD_INT 3
6286: PUSH
6287: LD_INT 54
6289: PUSH
6290: EMPTY
6291: LIST
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PPUSH
6297: CALL_OW 72
6301: PUSH
6302: FOR_IN
6303: IFFALSE 6351
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
6305: LD_VAR 0 2
6309: PPUSH
6310: LD_INT 22
6312: PUSH
6313: LD_EXP 8
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PUSH
6322: LD_INT 30
6324: PUSH
6325: LD_INT 8
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PPUSH
6336: CALL_OW 69
6340: PUSH
6341: LD_INT 1
6343: ARRAY
6344: PPUSH
6345: CALL_OW 120
6349: GO 6302
6351: POP
6352: POP
// if eng then
6353: LD_VAR 0 5
6357: IFFALSE 6494
// if UnitFilter ( eng , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) then
6359: LD_VAR 0 5
6363: PPUSH
6364: LD_INT 3
6366: PUSH
6367: LD_INT 54
6369: PUSH
6370: EMPTY
6371: LIST
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PPUSH
6377: CALL_OW 72
6381: PUSH
6382: LD_INT 22
6384: PUSH
6385: LD_EXP 8
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 30
6396: PUSH
6397: LD_INT 1
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PPUSH
6408: CALL_OW 69
6412: AND
6413: IFFALSE 6494
// for j in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6415: LD_ADDR_VAR 0 2
6419: PUSH
6420: LD_VAR 0 5
6424: PPUSH
6425: LD_INT 3
6427: PUSH
6428: LD_INT 54
6430: PUSH
6431: EMPTY
6432: LIST
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PPUSH
6438: CALL_OW 72
6442: PUSH
6443: FOR_IN
6444: IFFALSE 6492
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
6446: LD_VAR 0 2
6450: PPUSH
6451: LD_INT 22
6453: PUSH
6454: LD_EXP 8
6458: PUSH
6459: EMPTY
6460: LIST
6461: LIST
6462: PUSH
6463: LD_INT 30
6465: PUSH
6466: LD_INT 1
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PPUSH
6477: CALL_OW 69
6481: PUSH
6482: LD_INT 1
6484: ARRAY
6485: PPUSH
6486: CALL_OW 120
6490: GO 6443
6492: POP
6493: POP
// end ; p := 1 ;
6494: LD_ADDR_VAR 0 7
6498: PUSH
6499: LD_INT 1
6501: ST_TO_ADDR
// if b and eng then
6502: LD_VAR 0 6
6506: PUSH
6507: LD_VAR 0 5
6511: AND
6512: IFFALSE 6646
// for j in eng do
6514: LD_ADDR_VAR 0 2
6518: PUSH
6519: LD_VAR 0 5
6523: PUSH
6524: FOR_IN
6525: IFFALSE 6644
// begin if IsInUnit ( j ) then
6527: LD_VAR 0 2
6531: PPUSH
6532: CALL_OW 310
6536: IFFALSE 6549
// ComExitBuilding ( j ) else
6538: LD_VAR 0 2
6542: PPUSH
6543: CALL_OW 122
6547: GO 6642
// if not HasTask ( j ) and GetLives ( j ) > 750 then
6549: LD_VAR 0 2
6553: PPUSH
6554: CALL_OW 314
6558: NOT
6559: PUSH
6560: LD_VAR 0 2
6564: PPUSH
6565: CALL_OW 256
6569: PUSH
6570: LD_INT 750
6572: GREATER
6573: AND
6574: IFFALSE 6642
// begin if b > p then
6576: LD_VAR 0 6
6580: PUSH
6581: LD_VAR 0 7
6585: GREATER
6586: IFFALSE 6624
// begin ComRepairBuilding ( j , b [ p ] ) ;
6588: LD_VAR 0 2
6592: PPUSH
6593: LD_VAR 0 6
6597: PUSH
6598: LD_VAR 0 7
6602: ARRAY
6603: PPUSH
6604: CALL_OW 130
// p := p + 1 ;
6608: LD_ADDR_VAR 0 7
6612: PUSH
6613: LD_VAR 0 7
6617: PUSH
6618: LD_INT 1
6620: PLUS
6621: ST_TO_ADDR
// end else
6622: GO 6642
// ComRepairBuilding ( j , b [ 1 ] ) ;
6624: LD_VAR 0 2
6628: PPUSH
6629: LD_VAR 0 6
6633: PUSH
6634: LD_INT 1
6636: ARRAY
6637: PPUSH
6638: CALL_OW 130
// end ; end ;
6642: GO 6524
6644: POP
6645: POP
// if h and sci then
6646: LD_VAR 0 3
6650: PUSH
6651: LD_VAR 0 4
6655: AND
6656: IFFALSE 6795
// for i in h do
6658: LD_ADDR_VAR 0 1
6662: PUSH
6663: LD_VAR 0 3
6667: PUSH
6668: FOR_IN
6669: IFFALSE 6793
// if GetDistUnitXY ( i , 108 , 42 ) > 10 then
6671: LD_VAR 0 1
6675: PPUSH
6676: LD_INT 108
6678: PPUSH
6679: LD_INT 42
6681: PPUSH
6682: CALL_OW 297
6686: PUSH
6687: LD_INT 10
6689: GREATER
6690: IFFALSE 6709
// ComMoveXY ( i , 108 , 42 ) else
6692: LD_VAR 0 1
6696: PPUSH
6697: LD_INT 108
6699: PPUSH
6700: LD_INT 42
6702: PPUSH
6703: CALL_OW 111
6707: GO 6791
// begin for j in sci do
6709: LD_ADDR_VAR 0 2
6713: PUSH
6714: LD_VAR 0 4
6718: PUSH
6719: FOR_IN
6720: IFFALSE 6789
// begin if GetTag ( j ) > 0 then
6722: LD_VAR 0 2
6726: PPUSH
6727: CALL_OW 110
6731: PUSH
6732: LD_INT 0
6734: GREATER
6735: IFFALSE 6739
// continue ;
6737: GO 6719
// if IsInUnit ( j ) then
6739: LD_VAR 0 2
6743: PPUSH
6744: CALL_OW 310
6748: IFFALSE 6761
// ComExitBuilding ( j ) else
6750: LD_VAR 0 2
6754: PPUSH
6755: CALL_OW 122
6759: GO 6787
// if not HasTask ( j ) then
6761: LD_VAR 0 2
6765: PPUSH
6766: CALL_OW 314
6770: NOT
6771: IFFALSE 6787
// ComHeal ( j , h ) ;
6773: LD_VAR 0 2
6777: PPUSH
6778: LD_VAR 0 3
6782: PPUSH
6783: CALL_OW 128
// end ;
6787: GO 6719
6789: POP
6790: POP
// end ;
6791: GO 6668
6793: POP
6794: POP
// end ;
6795: PPOPN 7
6797: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 155 , 88 ) and GetBType ( HexInfo ( 155 , 88 ) = b_siberite_mine ) do var sci , p ;
6798: LD_INT 155
6800: PPUSH
6801: LD_INT 88
6803: PPUSH
6804: CALL_OW 428
6808: PUSH
6809: LD_INT 155
6811: PPUSH
6812: LD_INT 88
6814: PPUSH
6815: CALL_OW 428
6819: PUSH
6820: LD_INT 30
6822: EQUAL
6823: PPUSH
6824: CALL_OW 266
6828: AND
6829: IFFALSE 7078
6831: GO 6833
6833: DISABLE
6834: LD_INT 0
6836: PPUSH
6837: PPUSH
// begin p := GetSide ( HexInfo ( 155 , 88 ) ) ;
6838: LD_ADDR_VAR 0 2
6842: PUSH
6843: LD_INT 155
6845: PPUSH
6846: LD_INT 88
6848: PPUSH
6849: CALL_OW 428
6853: PPUSH
6854: CALL_OW 255
6858: ST_TO_ADDR
// Wait ( [ 5 5$30 , 6 6$33 , 6 6$21 , 8 8$44 , 9 9$31 , 4 4$33 , 9 9$01 , 5 5$01 ] [ p ] ) ;
6859: LD_INT 11550
6861: PUSH
6862: LD_INT 13755
6864: PUSH
6865: LD_INT 13335
6867: PUSH
6868: LD_INT 18340
6870: PUSH
6871: LD_INT 19985
6873: PUSH
6874: LD_INT 9555
6876: PUSH
6877: LD_INT 18935
6879: PUSH
6880: LD_INT 10535
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: PUSH
6893: LD_VAR 0 2
6897: ARRAY
6898: PPUSH
6899: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
6903: LD_INT 22
6905: PUSH
6906: LD_EXP 8
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 25
6917: PUSH
6918: LD_INT 4
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PPUSH
6929: CALL_OW 69
6933: PUSH
6934: LD_INT 0
6936: EQUAL
6937: IFFALSE 6941
// exit ;
6939: GO 7078
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ 1 ] ;
6941: LD_ADDR_VAR 0 1
6945: PUSH
6946: LD_INT 22
6948: PUSH
6949: LD_EXP 8
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 25
6960: PUSH
6961: LD_INT 4
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PPUSH
6972: CALL_OW 69
6976: PUSH
6977: LD_INT 1
6979: ARRAY
6980: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
6981: LD_VAR 0 1
6985: PPUSH
6986: LD_INT 1
6988: PPUSH
6989: CALL_OW 109
// ComExitBuilding ( sci ) ;
6993: LD_VAR 0 1
6997: PPUSH
6998: CALL_OW 122
// AddComMoveXY ( sci , 126 , 59 ) ;
7002: LD_VAR 0 1
7006: PPUSH
7007: LD_INT 126
7009: PPUSH
7010: LD_INT 59
7012: PPUSH
7013: CALL_OW 171
// if p mod 2 = 0 then
7017: LD_VAR 0 2
7021: PUSH
7022: LD_INT 2
7024: MOD
7025: PUSH
7026: LD_INT 0
7028: EQUAL
7029: IFFALSE 7048
// AddComMoveXY ( sci , 148 , 66 ) else
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 148
7038: PPUSH
7039: LD_INT 66
7041: PPUSH
7042: CALL_OW 171
7046: GO 7063
// AddComMoveXY ( sci , 135 , 84 ) ;
7048: LD_VAR 0 1
7052: PPUSH
7053: LD_INT 135
7055: PPUSH
7056: LD_INT 84
7058: PPUSH
7059: CALL_OW 171
// AddComContaminate ( sci , 155 , 88 ) ;
7063: LD_VAR 0 1
7067: PPUSH
7068: LD_INT 155
7070: PPUSH
7071: LD_INT 88
7073: PPUSH
7074: CALL_OW 218
// end ;
7078: PPOPN 2
7080: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 33 , 10 ) and GetBType ( HexInfo ( 33 , 10 ) = b_siberite_mine ) do var sci , p ;
7081: LD_INT 33
7083: PPUSH
7084: LD_INT 10
7086: PPUSH
7087: CALL_OW 428
7091: PUSH
7092: LD_INT 33
7094: PPUSH
7095: LD_INT 10
7097: PPUSH
7098: CALL_OW 428
7102: PUSH
7103: LD_INT 30
7105: EQUAL
7106: PPUSH
7107: CALL_OW 266
7111: AND
7112: IFFALSE 7363
7114: GO 7116
7116: DISABLE
7117: LD_INT 0
7119: PPUSH
7120: PPUSH
// begin p := GetSide ( HexInfo ( 33 , 10 ) ) ;
7121: LD_ADDR_VAR 0 2
7125: PUSH
7126: LD_INT 33
7128: PPUSH
7129: LD_INT 10
7131: PPUSH
7132: CALL_OW 428
7136: PPUSH
7137: CALL_OW 255
7141: ST_TO_ADDR
// Wait ( [ 4 4$30 , 5 5$33 , 3 3$21 , 4 4$44 , 3 3$31 , 5 5$33 , 3 3$01 , 8 8$01 ] [ p ] ) ;
7142: LD_INT 9450
7144: PUSH
7145: LD_INT 11655
7147: PUSH
7148: LD_INT 7035
7150: PUSH
7151: LD_INT 9940
7153: PUSH
7154: LD_INT 7385
7156: PUSH
7157: LD_INT 11655
7159: PUSH
7160: LD_INT 6335
7162: PUSH
7163: LD_INT 16835
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: LD_VAR 0 2
7180: ARRAY
7181: PPUSH
7182: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
7186: LD_INT 22
7188: PUSH
7189: LD_EXP 8
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 25
7200: PUSH
7201: LD_INT 4
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PPUSH
7212: CALL_OW 69
7216: PUSH
7217: LD_INT 0
7219: EQUAL
7220: IFFALSE 7224
// exit ;
7222: GO 7363
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ sci ] ;
7224: LD_ADDR_VAR 0 1
7228: PUSH
7229: LD_INT 22
7231: PUSH
7232: LD_EXP 8
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 25
7243: PUSH
7244: LD_INT 4
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PPUSH
7255: CALL_OW 69
7259: PUSH
7260: LD_VAR 0 1
7264: ARRAY
7265: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
7266: LD_VAR 0 1
7270: PPUSH
7271: LD_INT 1
7273: PPUSH
7274: CALL_OW 109
// ComExitBuilding ( sci ) ;
7278: LD_VAR 0 1
7282: PPUSH
7283: CALL_OW 122
// AddComMoveXY ( sci , 67 , 13 ) ;
7287: LD_VAR 0 1
7291: PPUSH
7292: LD_INT 67
7294: PPUSH
7295: LD_INT 13
7297: PPUSH
7298: CALL_OW 171
// if p mod 2 = 0 then
7302: LD_VAR 0 2
7306: PUSH
7307: LD_INT 2
7309: MOD
7310: PUSH
7311: LD_INT 0
7313: EQUAL
7314: IFFALSE 7333
// AddComMoveXY ( sci , 37 , 3 ) else
7316: LD_VAR 0 1
7320: PPUSH
7321: LD_INT 37
7323: PPUSH
7324: LD_INT 3
7326: PPUSH
7327: CALL_OW 171
7331: GO 7348
// AddComMoveXY ( sci , 45 , 20 ) ;
7333: LD_VAR 0 1
7337: PPUSH
7338: LD_INT 45
7340: PPUSH
7341: LD_INT 20
7343: PPUSH
7344: CALL_OW 171
// AddComContaminate ( sci , 33 , 10 ) ;
7348: LD_VAR 0 1
7352: PPUSH
7353: LD_INT 33
7355: PPUSH
7356: LD_INT 10
7358: PPUSH
7359: CALL_OW 218
// end ;
7363: PPOPN 2
7365: END
// every 0 0$01 trigger mines_list do var i , p ;
7366: LD_EXP 17
7370: IFFALSE 7596
7372: GO 7374
7374: DISABLE
7375: LD_INT 0
7377: PPUSH
7378: PPUSH
// begin enable ;
7379: ENABLE
// p := 1 ;
7380: LD_ADDR_VAR 0 2
7384: PUSH
7385: LD_INT 1
7387: ST_TO_ADDR
// for i = 1 to mines_list / 2 do
7388: LD_ADDR_VAR 0 1
7392: PUSH
7393: DOUBLE
7394: LD_INT 1
7396: DEC
7397: ST_TO_ADDR
7398: LD_EXP 17
7402: PUSH
7403: LD_INT 2
7405: DIVREAL
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7594
// begin if HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) > 0 then
7410: LD_EXP 17
7414: PUSH
7415: LD_VAR 0 2
7419: ARRAY
7420: PPUSH
7421: LD_EXP 17
7425: PUSH
7426: LD_VAR 0 2
7430: PUSH
7431: LD_INT 1
7433: PLUS
7434: ARRAY
7435: PPUSH
7436: CALL_OW 428
7440: PUSH
7441: LD_INT 0
7443: GREATER
7444: IFFALSE 7578
// if GetSide ( HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) ) <> bot_side then
7446: LD_EXP 17
7450: PUSH
7451: LD_VAR 0 2
7455: ARRAY
7456: PPUSH
7457: LD_EXP 17
7461: PUSH
7462: LD_VAR 0 2
7466: PUSH
7467: LD_INT 1
7469: PLUS
7470: ARRAY
7471: PPUSH
7472: CALL_OW 428
7476: PPUSH
7477: CALL_OW 255
7481: PUSH
7482: LD_EXP 8
7486: NONEQUAL
7487: IFFALSE 7578
// begin LaunchMineAtPos ( mines_list [ p ] , mines_list [ p + 1 ] , bot_side ) ;
7489: LD_EXP 17
7493: PUSH
7494: LD_VAR 0 2
7498: ARRAY
7499: PPUSH
7500: LD_EXP 17
7504: PUSH
7505: LD_VAR 0 2
7509: PUSH
7510: LD_INT 1
7512: PLUS
7513: ARRAY
7514: PPUSH
7515: LD_EXP 8
7519: PPUSH
7520: CALL_OW 456
// mines_list := Delete ( mines_list , p ) ;
7524: LD_ADDR_EXP 17
7528: PUSH
7529: LD_EXP 17
7533: PPUSH
7534: LD_VAR 0 2
7538: PPUSH
7539: CALL_OW 3
7543: ST_TO_ADDR
// mines_list := Delete ( mines_list , p ) ;
7544: LD_ADDR_EXP 17
7548: PUSH
7549: LD_EXP 17
7553: PPUSH
7554: LD_VAR 0 2
7558: PPUSH
7559: CALL_OW 3
7563: ST_TO_ADDR
// p := p - 2 ;
7564: LD_ADDR_VAR 0 2
7568: PUSH
7569: LD_VAR 0 2
7573: PUSH
7574: LD_INT 2
7576: MINUS
7577: ST_TO_ADDR
// end ; p := p + 2 ;
7578: LD_ADDR_VAR 0 2
7582: PUSH
7583: LD_VAR 0 2
7587: PUSH
7588: LD_INT 2
7590: PLUS
7591: ST_TO_ADDR
// end ;
7592: GO 7407
7594: POP
7595: POP
// end ;
7596: PPOPN 2
7598: END
// every 0 0$03 do var i , p , skr , filter , dep ;
7599: GO 7601
7601: DISABLE
7602: LD_INT 0
7604: PPUSH
7605: PPUSH
7606: PPUSH
7607: PPUSH
7608: PPUSH
// begin enable ;
7609: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , bot_side ] , [ f_class , class_apeman_engineer ] ] ) ;
7610: LD_ADDR_VAR 0 4
7614: PUSH
7615: LD_INT 50
7617: PUSH
7618: EMPTY
7619: LIST
7620: PUSH
7621: LD_INT 22
7623: PUSH
7624: LD_EXP 8
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: LD_INT 25
7635: PUSH
7636: LD_INT 16
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: LIST
7647: PPUSH
7648: CALL_OW 69
7652: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7653: LD_ADDR_VAR 0 5
7657: PUSH
7658: LD_INT 22
7660: PUSH
7661: LD_EXP 8
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PUSH
7670: LD_INT 2
7672: PUSH
7673: LD_INT 30
7675: PUSH
7676: LD_INT 0
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 30
7685: PUSH
7686: LD_INT 1
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 69
7706: ST_TO_ADDR
// skr := GetListOfCratesInArea ( kabul_crates ) ;
7707: LD_ADDR_VAR 0 3
7711: PUSH
7712: LD_INT 13
7714: PPUSH
7715: CALL_OW 435
7719: ST_TO_ADDR
// if filter and skr then
7720: LD_VAR 0 4
7724: PUSH
7725: LD_VAR 0 3
7729: AND
7730: IFFALSE 7805
// for i = 1 to filter do
7732: LD_ADDR_VAR 0 1
7736: PUSH
7737: DOUBLE
7738: LD_INT 1
7740: DEC
7741: ST_TO_ADDR
7742: LD_VAR 0 4
7746: PUSH
7747: FOR_TO
7748: IFFALSE 7803
// if not HasTask ( filter [ i ] ) then
7750: LD_VAR 0 4
7754: PUSH
7755: LD_VAR 0 1
7759: ARRAY
7760: PPUSH
7761: CALL_OW 314
7765: NOT
7766: IFFALSE 7801
// ComCollect ( filter [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
7768: LD_VAR 0 4
7772: PUSH
7773: LD_VAR 0 1
7777: ARRAY
7778: PPUSH
7779: LD_VAR 0 3
7783: PUSH
7784: LD_INT 1
7786: ARRAY
7787: PPUSH
7788: LD_VAR 0 3
7792: PUSH
7793: LD_INT 2
7795: ARRAY
7796: PPUSH
7797: CALL_OW 117
7801: GO 7747
7803: POP
7804: POP
// end ; end_of_file
7805: PPOPN 5
7807: END
// on UnitDestroyed ( un ) do var shooter , cl , s , n ;
7808: LD_INT 0
7810: PPUSH
7811: PPUSH
7812: PPUSH
7813: PPUSH
// begin if un in attackers then
7814: LD_VAR 0 1
7818: PUSH
7819: LD_EXP 20
7823: IN
7824: IFFALSE 7842
// attackers := attackers diff un ;
7826: LD_ADDR_EXP 20
7830: PUSH
7831: LD_EXP 20
7835: PUSH
7836: LD_VAR 0 1
7840: DIFF
7841: ST_TO_ADDR
// if GetSide ( un ) <> bot_side and GetSide ( un ) > 0 and un in FilterAllUnits ( [ f_type , unit_human ] ) then
7842: LD_VAR 0 1
7846: PPUSH
7847: CALL_OW 255
7851: PUSH
7852: LD_EXP 8
7856: NONEQUAL
7857: PUSH
7858: LD_VAR 0 1
7862: PPUSH
7863: CALL_OW 255
7867: PUSH
7868: LD_INT 0
7870: GREATER
7871: AND
7872: PUSH
7873: LD_VAR 0 1
7877: PUSH
7878: LD_INT 21
7880: PUSH
7881: LD_INT 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PPUSH
7888: CALL_OW 69
7892: IN
7893: AND
7894: IFFALSE 8078
// begin if respawning_time_min > 0 0$00 then
7896: LD_EXP 13
7900: PUSH
7901: LD_INT 0
7903: GREATER
7904: IFFALSE 8078
// begin s := GetSide ( un ) ;
7906: LD_ADDR_VAR 0 4
7910: PUSH
7911: LD_VAR 0 1
7915: PPUSH
7916: CALL_OW 255
7920: ST_TO_ADDR
// n := GetNation ( un ) ;
7921: LD_ADDR_VAR 0 5
7925: PUSH
7926: LD_VAR 0 1
7930: PPUSH
7931: CALL_OW 248
7935: ST_TO_ADDR
// cl := GetClass ( un ) ;
7936: LD_ADDR_VAR 0 3
7940: PUSH
7941: LD_VAR 0 1
7945: PPUSH
7946: CALL_OW 257
7950: ST_TO_ADDR
// wait ( respawning_time_min ) ;
7951: LD_EXP 13
7955: PPUSH
7956: CALL_OW 67
// wait ( respawning_time_max - ( 0 0$10 * tick mod 10 + 1 ) * cl ) ;
7960: LD_EXP 14
7964: PUSH
7965: LD_INT 350
7967: PUSH
7968: LD_OWVAR 1
7972: MUL
7973: PUSH
7974: LD_INT 10
7976: MOD
7977: PUSH
7978: LD_INT 1
7980: PLUS
7981: PUSH
7982: LD_VAR 0 3
7986: MUL
7987: MINUS
7988: PPUSH
7989: CALL_OW 67
// uc_side := s ;
7993: LD_ADDR_OWVAR 20
7997: PUSH
7998: LD_VAR 0 4
8002: ST_TO_ADDR
// uc_nation := n ;
8003: LD_ADDR_OWVAR 21
8007: PUSH
8008: LD_VAR 0 5
8012: ST_TO_ADDR
// PrepareHuman ( false , cl , skill_level - 2 ) ;
8013: LD_INT 0
8015: PPUSH
8016: LD_VAR 0 3
8020: PPUSH
8021: LD_EXP 11
8025: PUSH
8026: LD_INT 2
8028: MINUS
8029: PPUSH
8030: CALL_OW 380
// PlaceUnitArea ( CreateHuman , [ cr1 , cr3 , cr2 , cr3 ] [ ( cl mod 4 ) + 1 ] , true ) ;
8034: CALL_OW 44
8038: PPUSH
8039: LD_INT 17
8041: PUSH
8042: LD_INT 19
8044: PUSH
8045: LD_INT 18
8047: PUSH
8048: LD_INT 19
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: LD_VAR 0 3
8061: PUSH
8062: LD_INT 4
8064: MOD
8065: PUSH
8066: LD_INT 1
8068: PLUS
8069: ARRAY
8070: PPUSH
8071: LD_INT 1
8073: PPUSH
8074: CALL_OW 49
// end ; end ; end ;
8078: PPOPN 5
8080: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = bot_side and un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_type , unit_vehicle ] ] ) then
8081: LD_VAR 0 1
8085: PPUSH
8086: CALL_OW 255
8090: PUSH
8091: LD_EXP 8
8095: EQUAL
8096: PUSH
8097: LD_VAR 0 1
8101: PUSH
8102: LD_INT 33
8104: PUSH
8105: LD_INT 2
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 21
8114: PUSH
8115: LD_INT 2
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PPUSH
8126: CALL_OW 69
8130: IN
8131: AND
8132: IFFALSE 8255
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> bot_side then
8134: LD_OWVAR 3
8138: PUSH
8139: LD_VAR 0 1
8143: DIFF
8144: PPUSH
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 74
8154: PPUSH
8155: CALL_OW 255
8159: PUSH
8160: LD_EXP 8
8164: NONEQUAL
8165: IFFALSE 8255
// begin Wait ( 0 0$1.3 ) ;
8167: LD_INT 46
8169: PPUSH
8170: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 250
8183: PPUSH
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 251
8193: PPUSH
8194: LD_INT 1
8196: PPUSH
8197: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8201: LD_VAR 0 1
8205: PPUSH
8206: CALL_OW 250
8210: PPUSH
8211: LD_VAR 0 1
8215: PPUSH
8216: CALL_OW 251
8220: PPUSH
8221: LD_INT 1
8223: PPUSH
8224: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8228: LD_VAR 0 1
8232: PPUSH
8233: CALL_OW 250
8237: PPUSH
8238: LD_VAR 0 1
8242: PPUSH
8243: CALL_OW 251
8247: PPUSH
8248: LD_INT 1
8250: PPUSH
8251: CALL_OW 453
// end ; if GetControl ( un ) = control_remote then
8255: LD_VAR 0 1
8259: PPUSH
8260: CALL_OW 263
8264: PUSH
8265: LD_INT 2
8267: EQUAL
8268: IFFALSE 8279
// ComUnlink ( un ) ;
8270: LD_VAR 0 1
8274: PPUSH
8275: CALL_OW 136
// end ;
8279: PPOPN 1
8281: END
// on VehicleConstructed ( veh , b ) do begin if GetSide ( veh ) = bot_side then
8282: LD_VAR 0 1
8286: PPUSH
8287: CALL_OW 255
8291: PUSH
8292: LD_EXP 8
8296: EQUAL
8297: IFFALSE 8328
// attackers := Insert ( attackers , attackers + 1 , veh ) ;
8299: LD_ADDR_EXP 20
8303: PUSH
8304: LD_EXP 20
8308: PPUSH
8309: LD_EXP 20
8313: PUSH
8314: LD_INT 1
8316: PLUS
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL_OW 2
8327: ST_TO_ADDR
// end ;
8328: PPOPN 2
8330: END
// on LeaveBuilding ( b , un ) do var i , arm ;
8331: LD_INT 0
8333: PPUSH
8334: PPUSH
// begin if GetSide ( b ) = bot_side and GetBType ( b ) = b_bunker then
8335: LD_VAR 0 1
8339: PPUSH
8340: CALL_OW 255
8344: PUSH
8345: LD_EXP 8
8349: EQUAL
8350: PUSH
8351: LD_VAR 0 1
8355: PPUSH
8356: CALL_OW 266
8360: PUSH
8361: LD_INT 32
8363: EQUAL
8364: AND
8365: IFFALSE 8463
// begin arm := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_barracks ] ] ) ;
8367: LD_ADDR_VAR 0 4
8371: PUSH
8372: LD_INT 22
8374: PUSH
8375: LD_EXP 8
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PUSH
8384: LD_INT 30
8386: PUSH
8387: LD_INT 5
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PPUSH
8398: CALL_OW 69
8402: ST_TO_ADDR
// for i in arm do
8403: LD_ADDR_VAR 0 3
8407: PUSH
8408: LD_VAR 0 4
8412: PUSH
8413: FOR_IN
8414: IFFALSE 8461
// if UnitsInside ( i ) < 6 then
8416: LD_VAR 0 3
8420: PPUSH
8421: CALL_OW 313
8425: PUSH
8426: LD_INT 6
8428: LESS
8429: IFFALSE 8459
// begin ComEnterUnit ( un , i ) ;
8431: LD_VAR 0 2
8435: PPUSH
8436: LD_VAR 0 3
8440: PPUSH
8441: CALL_OW 120
// AddComChangeProfession ( un , class_mortar ) ;
8445: LD_VAR 0 2
8449: PPUSH
8450: LD_INT 8
8452: PPUSH
8453: CALL_OW 183
// break ;
8457: GO 8461
// end ;
8459: GO 8413
8461: POP
8462: POP
// end ; end ; end_of_file
8463: PPOPN 4
8465: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
8466: LD_VAR 0 1
8470: PUSH
8471: LD_INT 200
8473: DOUBLE
8474: GREATEREQUAL
8475: IFFALSE 8483
8477: LD_INT 299
8479: DOUBLE
8480: LESSEQUAL
8481: IFTRUE 8485
8483: GO 8517
8485: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
8486: LD_VAR 0 1
8490: PPUSH
8491: LD_VAR 0 2
8495: PPUSH
8496: LD_VAR 0 3
8500: PPUSH
8501: LD_VAR 0 4
8505: PPUSH
8506: LD_VAR 0 5
8510: PPUSH
8511: CALL 66163 0 5
8515: GO 8594
8517: LD_INT 300
8519: DOUBLE
8520: GREATEREQUAL
8521: IFFALSE 8529
8523: LD_INT 399
8525: DOUBLE
8526: LESSEQUAL
8527: IFTRUE 8531
8529: GO 8593
8531: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
8532: LD_VAR 0 1
8536: PPUSH
8537: LD_VAR 0 2
8541: PPUSH
8542: LD_VAR 0 3
8546: PPUSH
8547: LD_VAR 0 4
8551: PPUSH
8552: LD_VAR 0 5
8556: PPUSH
8557: LD_VAR 0 6
8561: PPUSH
8562: LD_VAR 0 7
8566: PPUSH
8567: LD_VAR 0 8
8571: PPUSH
8572: LD_VAR 0 9
8576: PPUSH
8577: LD_VAR 0 10
8581: PPUSH
8582: LD_VAR 0 11
8586: PPUSH
8587: CALL 62496 0 11
8591: GO 8594
8593: POP
// end ;
8594: PPOPN 11
8596: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
8597: LD_VAR 0 1
8601: PPUSH
8602: LD_VAR 0 2
8606: PPUSH
8607: LD_VAR 0 3
8611: PPUSH
8612: LD_VAR 0 4
8616: PPUSH
8617: LD_VAR 0 5
8621: PPUSH
8622: CALL 65899 0 5
// end ; end_of_file
8626: PPOPN 5
8628: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8629: LD_INT 0
8631: PPUSH
8632: PPUSH
// if exist_mode then
8633: LD_VAR 0 2
8637: IFFALSE 8662
// unit := CreateCharacter ( prefix & ident ) else
8639: LD_ADDR_VAR 0 5
8643: PUSH
8644: LD_VAR 0 3
8648: PUSH
8649: LD_VAR 0 1
8653: STR
8654: PPUSH
8655: CALL_OW 34
8659: ST_TO_ADDR
8660: GO 8677
// unit := NewCharacter ( ident ) ;
8662: LD_ADDR_VAR 0 5
8666: PUSH
8667: LD_VAR 0 1
8671: PPUSH
8672: CALL_OW 25
8676: ST_TO_ADDR
// result := unit ;
8677: LD_ADDR_VAR 0 4
8681: PUSH
8682: LD_VAR 0 5
8686: ST_TO_ADDR
// end ;
8687: LD_VAR 0 4
8691: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8692: LD_INT 0
8694: PPUSH
8695: PPUSH
// if not side or not nation then
8696: LD_VAR 0 1
8700: NOT
8701: PUSH
8702: LD_VAR 0 2
8706: NOT
8707: OR
8708: IFFALSE 8712
// exit ;
8710: GO 9480
// case nation of nation_american :
8712: LD_VAR 0 2
8716: PUSH
8717: LD_INT 1
8719: DOUBLE
8720: EQUAL
8721: IFTRUE 8725
8723: GO 8939
8725: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8726: LD_ADDR_VAR 0 4
8730: PUSH
8731: LD_INT 35
8733: PUSH
8734: LD_INT 45
8736: PUSH
8737: LD_INT 46
8739: PUSH
8740: LD_INT 47
8742: PUSH
8743: LD_INT 82
8745: PUSH
8746: LD_INT 83
8748: PUSH
8749: LD_INT 84
8751: PUSH
8752: LD_INT 85
8754: PUSH
8755: LD_INT 86
8757: PUSH
8758: LD_INT 1
8760: PUSH
8761: LD_INT 2
8763: PUSH
8764: LD_INT 6
8766: PUSH
8767: LD_INT 15
8769: PUSH
8770: LD_INT 16
8772: PUSH
8773: LD_INT 7
8775: PUSH
8776: LD_INT 12
8778: PUSH
8779: LD_INT 13
8781: PUSH
8782: LD_INT 10
8784: PUSH
8785: LD_INT 14
8787: PUSH
8788: LD_INT 20
8790: PUSH
8791: LD_INT 21
8793: PUSH
8794: LD_INT 22
8796: PUSH
8797: LD_INT 25
8799: PUSH
8800: LD_INT 32
8802: PUSH
8803: LD_INT 27
8805: PUSH
8806: LD_INT 36
8808: PUSH
8809: LD_INT 69
8811: PUSH
8812: LD_INT 39
8814: PUSH
8815: LD_INT 34
8817: PUSH
8818: LD_INT 40
8820: PUSH
8821: LD_INT 48
8823: PUSH
8824: LD_INT 49
8826: PUSH
8827: LD_INT 50
8829: PUSH
8830: LD_INT 51
8832: PUSH
8833: LD_INT 52
8835: PUSH
8836: LD_INT 53
8838: PUSH
8839: LD_INT 54
8841: PUSH
8842: LD_INT 55
8844: PUSH
8845: LD_INT 56
8847: PUSH
8848: LD_INT 57
8850: PUSH
8851: LD_INT 58
8853: PUSH
8854: LD_INT 59
8856: PUSH
8857: LD_INT 60
8859: PUSH
8860: LD_INT 61
8862: PUSH
8863: LD_INT 62
8865: PUSH
8866: LD_INT 80
8868: PUSH
8869: LD_INT 82
8871: PUSH
8872: LD_INT 83
8874: PUSH
8875: LD_INT 84
8877: PUSH
8878: LD_INT 85
8880: PUSH
8881: LD_INT 86
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: ST_TO_ADDR
8937: GO 9404
8939: LD_INT 2
8941: DOUBLE
8942: EQUAL
8943: IFTRUE 8947
8945: GO 9173
8947: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
8948: LD_ADDR_VAR 0 4
8952: PUSH
8953: LD_INT 35
8955: PUSH
8956: LD_INT 45
8958: PUSH
8959: LD_INT 46
8961: PUSH
8962: LD_INT 47
8964: PUSH
8965: LD_INT 82
8967: PUSH
8968: LD_INT 83
8970: PUSH
8971: LD_INT 84
8973: PUSH
8974: LD_INT 85
8976: PUSH
8977: LD_INT 87
8979: PUSH
8980: LD_INT 70
8982: PUSH
8983: LD_INT 1
8985: PUSH
8986: LD_INT 11
8988: PUSH
8989: LD_INT 3
8991: PUSH
8992: LD_INT 4
8994: PUSH
8995: LD_INT 5
8997: PUSH
8998: LD_INT 6
9000: PUSH
9001: LD_INT 15
9003: PUSH
9004: LD_INT 18
9006: PUSH
9007: LD_INT 7
9009: PUSH
9010: LD_INT 17
9012: PUSH
9013: LD_INT 8
9015: PUSH
9016: LD_INT 20
9018: PUSH
9019: LD_INT 21
9021: PUSH
9022: LD_INT 22
9024: PUSH
9025: LD_INT 72
9027: PUSH
9028: LD_INT 26
9030: PUSH
9031: LD_INT 69
9033: PUSH
9034: LD_INT 39
9036: PUSH
9037: LD_INT 40
9039: PUSH
9040: LD_INT 41
9042: PUSH
9043: LD_INT 42
9045: PUSH
9046: LD_INT 43
9048: PUSH
9049: LD_INT 48
9051: PUSH
9052: LD_INT 49
9054: PUSH
9055: LD_INT 50
9057: PUSH
9058: LD_INT 51
9060: PUSH
9061: LD_INT 52
9063: PUSH
9064: LD_INT 53
9066: PUSH
9067: LD_INT 54
9069: PUSH
9070: LD_INT 55
9072: PUSH
9073: LD_INT 56
9075: PUSH
9076: LD_INT 60
9078: PUSH
9079: LD_INT 61
9081: PUSH
9082: LD_INT 62
9084: PUSH
9085: LD_INT 66
9087: PUSH
9088: LD_INT 67
9090: PUSH
9091: LD_INT 68
9093: PUSH
9094: LD_INT 81
9096: PUSH
9097: LD_INT 82
9099: PUSH
9100: LD_INT 83
9102: PUSH
9103: LD_INT 84
9105: PUSH
9106: LD_INT 85
9108: PUSH
9109: LD_INT 87
9111: PUSH
9112: LD_INT 88
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: ST_TO_ADDR
9171: GO 9404
9173: LD_INT 3
9175: DOUBLE
9176: EQUAL
9177: IFTRUE 9181
9179: GO 9403
9181: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9182: LD_ADDR_VAR 0 4
9186: PUSH
9187: LD_INT 46
9189: PUSH
9190: LD_INT 47
9192: PUSH
9193: LD_INT 1
9195: PUSH
9196: LD_INT 2
9198: PUSH
9199: LD_INT 82
9201: PUSH
9202: LD_INT 83
9204: PUSH
9205: LD_INT 84
9207: PUSH
9208: LD_INT 85
9210: PUSH
9211: LD_INT 86
9213: PUSH
9214: LD_INT 11
9216: PUSH
9217: LD_INT 9
9219: PUSH
9220: LD_INT 20
9222: PUSH
9223: LD_INT 19
9225: PUSH
9226: LD_INT 21
9228: PUSH
9229: LD_INT 24
9231: PUSH
9232: LD_INT 22
9234: PUSH
9235: LD_INT 25
9237: PUSH
9238: LD_INT 28
9240: PUSH
9241: LD_INT 29
9243: PUSH
9244: LD_INT 30
9246: PUSH
9247: LD_INT 31
9249: PUSH
9250: LD_INT 37
9252: PUSH
9253: LD_INT 38
9255: PUSH
9256: LD_INT 32
9258: PUSH
9259: LD_INT 27
9261: PUSH
9262: LD_INT 33
9264: PUSH
9265: LD_INT 69
9267: PUSH
9268: LD_INT 39
9270: PUSH
9271: LD_INT 34
9273: PUSH
9274: LD_INT 40
9276: PUSH
9277: LD_INT 71
9279: PUSH
9280: LD_INT 23
9282: PUSH
9283: LD_INT 44
9285: PUSH
9286: LD_INT 48
9288: PUSH
9289: LD_INT 49
9291: PUSH
9292: LD_INT 50
9294: PUSH
9295: LD_INT 51
9297: PUSH
9298: LD_INT 52
9300: PUSH
9301: LD_INT 53
9303: PUSH
9304: LD_INT 54
9306: PUSH
9307: LD_INT 55
9309: PUSH
9310: LD_INT 56
9312: PUSH
9313: LD_INT 57
9315: PUSH
9316: LD_INT 58
9318: PUSH
9319: LD_INT 59
9321: PUSH
9322: LD_INT 63
9324: PUSH
9325: LD_INT 64
9327: PUSH
9328: LD_INT 65
9330: PUSH
9331: LD_INT 82
9333: PUSH
9334: LD_INT 83
9336: PUSH
9337: LD_INT 84
9339: PUSH
9340: LD_INT 85
9342: PUSH
9343: LD_INT 86
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: ST_TO_ADDR
9401: GO 9404
9403: POP
// if state > - 1 and state < 3 then
9404: LD_VAR 0 3
9408: PUSH
9409: LD_INT 1
9411: NEG
9412: GREATER
9413: PUSH
9414: LD_VAR 0 3
9418: PUSH
9419: LD_INT 3
9421: LESS
9422: AND
9423: IFFALSE 9480
// for i in result do
9425: LD_ADDR_VAR 0 5
9429: PUSH
9430: LD_VAR 0 4
9434: PUSH
9435: FOR_IN
9436: IFFALSE 9478
// if GetTech ( i , side ) <> state then
9438: LD_VAR 0 5
9442: PPUSH
9443: LD_VAR 0 1
9447: PPUSH
9448: CALL_OW 321
9452: PUSH
9453: LD_VAR 0 3
9457: NONEQUAL
9458: IFFALSE 9476
// result := result diff i ;
9460: LD_ADDR_VAR 0 4
9464: PUSH
9465: LD_VAR 0 4
9469: PUSH
9470: LD_VAR 0 5
9474: DIFF
9475: ST_TO_ADDR
9476: GO 9435
9478: POP
9479: POP
// end ;
9480: LD_VAR 0 4
9484: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9485: LD_INT 0
9487: PPUSH
9488: PPUSH
9489: PPUSH
// result := true ;
9490: LD_ADDR_VAR 0 3
9494: PUSH
9495: LD_INT 1
9497: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9498: LD_ADDR_VAR 0 5
9502: PUSH
9503: LD_VAR 0 2
9507: PPUSH
9508: CALL_OW 480
9512: ST_TO_ADDR
// if not tmp then
9513: LD_VAR 0 5
9517: NOT
9518: IFFALSE 9522
// exit ;
9520: GO 9571
// for i in tmp do
9522: LD_ADDR_VAR 0 4
9526: PUSH
9527: LD_VAR 0 5
9531: PUSH
9532: FOR_IN
9533: IFFALSE 9569
// if GetTech ( i , side ) <> state_researched then
9535: LD_VAR 0 4
9539: PPUSH
9540: LD_VAR 0 1
9544: PPUSH
9545: CALL_OW 321
9549: PUSH
9550: LD_INT 2
9552: NONEQUAL
9553: IFFALSE 9567
// begin result := false ;
9555: LD_ADDR_VAR 0 3
9559: PUSH
9560: LD_INT 0
9562: ST_TO_ADDR
// exit ;
9563: POP
9564: POP
9565: GO 9571
// end ;
9567: GO 9532
9569: POP
9570: POP
// end ;
9571: LD_VAR 0 3
9575: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9576: LD_INT 0
9578: PPUSH
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
9583: PPUSH
9584: PPUSH
9585: PPUSH
9586: PPUSH
9587: PPUSH
9588: PPUSH
9589: PPUSH
9590: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9591: LD_VAR 0 1
9595: NOT
9596: PUSH
9597: LD_VAR 0 1
9601: PPUSH
9602: CALL_OW 257
9606: PUSH
9607: LD_INT 9
9609: NONEQUAL
9610: OR
9611: IFFALSE 9615
// exit ;
9613: GO 10188
// side := GetSide ( unit ) ;
9615: LD_ADDR_VAR 0 9
9619: PUSH
9620: LD_VAR 0 1
9624: PPUSH
9625: CALL_OW 255
9629: ST_TO_ADDR
// tech_space := tech_spacanom ;
9630: LD_ADDR_VAR 0 12
9634: PUSH
9635: LD_INT 29
9637: ST_TO_ADDR
// tech_time := tech_taurad ;
9638: LD_ADDR_VAR 0 13
9642: PUSH
9643: LD_INT 28
9645: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9646: LD_ADDR_VAR 0 11
9650: PUSH
9651: LD_VAR 0 1
9655: PPUSH
9656: CALL_OW 310
9660: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9661: LD_VAR 0 11
9665: PPUSH
9666: CALL_OW 247
9670: PUSH
9671: LD_INT 2
9673: EQUAL
9674: IFFALSE 9678
// exit ;
9676: GO 10188
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9678: LD_ADDR_VAR 0 8
9682: PUSH
9683: LD_INT 81
9685: PUSH
9686: LD_VAR 0 9
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: PUSH
9695: LD_INT 3
9697: PUSH
9698: LD_INT 21
9700: PUSH
9701: LD_INT 3
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PPUSH
9716: CALL_OW 69
9720: ST_TO_ADDR
// if not tmp then
9721: LD_VAR 0 8
9725: NOT
9726: IFFALSE 9730
// exit ;
9728: GO 10188
// if in_unit then
9730: LD_VAR 0 11
9734: IFFALSE 9758
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9736: LD_ADDR_VAR 0 10
9740: PUSH
9741: LD_VAR 0 8
9745: PPUSH
9746: LD_VAR 0 11
9750: PPUSH
9751: CALL_OW 74
9755: ST_TO_ADDR
9756: GO 9778
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9758: LD_ADDR_VAR 0 10
9762: PUSH
9763: LD_VAR 0 8
9767: PPUSH
9768: LD_VAR 0 1
9772: PPUSH
9773: CALL_OW 74
9777: ST_TO_ADDR
// if not enemy then
9778: LD_VAR 0 10
9782: NOT
9783: IFFALSE 9787
// exit ;
9785: GO 10188
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9787: LD_VAR 0 11
9791: PUSH
9792: LD_VAR 0 11
9796: PPUSH
9797: LD_VAR 0 10
9801: PPUSH
9802: CALL_OW 296
9806: PUSH
9807: LD_INT 13
9809: GREATER
9810: AND
9811: PUSH
9812: LD_VAR 0 1
9816: PPUSH
9817: LD_VAR 0 10
9821: PPUSH
9822: CALL_OW 296
9826: PUSH
9827: LD_INT 12
9829: GREATER
9830: OR
9831: IFFALSE 9835
// exit ;
9833: GO 10188
// missile := [ 1 ] ;
9835: LD_ADDR_VAR 0 14
9839: PUSH
9840: LD_INT 1
9842: PUSH
9843: EMPTY
9844: LIST
9845: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9846: LD_VAR 0 9
9850: PPUSH
9851: LD_VAR 0 12
9855: PPUSH
9856: CALL_OW 325
9860: IFFALSE 9889
// missile := Replace ( missile , missile + 1 , 2 ) ;
9862: LD_ADDR_VAR 0 14
9866: PUSH
9867: LD_VAR 0 14
9871: PPUSH
9872: LD_VAR 0 14
9876: PUSH
9877: LD_INT 1
9879: PLUS
9880: PPUSH
9881: LD_INT 2
9883: PPUSH
9884: CALL_OW 1
9888: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9889: LD_VAR 0 9
9893: PPUSH
9894: LD_VAR 0 13
9898: PPUSH
9899: CALL_OW 325
9903: PUSH
9904: LD_VAR 0 10
9908: PPUSH
9909: CALL_OW 255
9913: PPUSH
9914: LD_VAR 0 13
9918: PPUSH
9919: CALL_OW 325
9923: NOT
9924: AND
9925: IFFALSE 9954
// missile := Replace ( missile , missile + 1 , 3 ) ;
9927: LD_ADDR_VAR 0 14
9931: PUSH
9932: LD_VAR 0 14
9936: PPUSH
9937: LD_VAR 0 14
9941: PUSH
9942: LD_INT 1
9944: PLUS
9945: PPUSH
9946: LD_INT 3
9948: PPUSH
9949: CALL_OW 1
9953: ST_TO_ADDR
// if missile < 2 then
9954: LD_VAR 0 14
9958: PUSH
9959: LD_INT 2
9961: LESS
9962: IFFALSE 9966
// exit ;
9964: GO 10188
// x := GetX ( enemy ) ;
9966: LD_ADDR_VAR 0 4
9970: PUSH
9971: LD_VAR 0 10
9975: PPUSH
9976: CALL_OW 250
9980: ST_TO_ADDR
// y := GetY ( enemy ) ;
9981: LD_ADDR_VAR 0 5
9985: PUSH
9986: LD_VAR 0 10
9990: PPUSH
9991: CALL_OW 251
9995: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9996: LD_ADDR_VAR 0 6
10000: PUSH
10001: LD_VAR 0 4
10005: PUSH
10006: LD_INT 1
10008: NEG
10009: PPUSH
10010: LD_INT 1
10012: PPUSH
10013: CALL_OW 12
10017: PLUS
10018: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10019: LD_ADDR_VAR 0 7
10023: PUSH
10024: LD_VAR 0 5
10028: PUSH
10029: LD_INT 1
10031: NEG
10032: PPUSH
10033: LD_INT 1
10035: PPUSH
10036: CALL_OW 12
10040: PLUS
10041: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10042: LD_VAR 0 6
10046: PPUSH
10047: LD_VAR 0 7
10051: PPUSH
10052: CALL_OW 488
10056: NOT
10057: IFFALSE 10079
// begin _x := x ;
10059: LD_ADDR_VAR 0 6
10063: PUSH
10064: LD_VAR 0 4
10068: ST_TO_ADDR
// _y := y ;
10069: LD_ADDR_VAR 0 7
10073: PUSH
10074: LD_VAR 0 5
10078: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10079: LD_ADDR_VAR 0 3
10083: PUSH
10084: LD_INT 1
10086: PPUSH
10087: LD_VAR 0 14
10091: PPUSH
10092: CALL_OW 12
10096: ST_TO_ADDR
// case i of 1 :
10097: LD_VAR 0 3
10101: PUSH
10102: LD_INT 1
10104: DOUBLE
10105: EQUAL
10106: IFTRUE 10110
10108: GO 10127
10110: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10111: LD_VAR 0 1
10115: PPUSH
10116: LD_VAR 0 10
10120: PPUSH
10121: CALL_OW 115
10125: GO 10188
10127: LD_INT 2
10129: DOUBLE
10130: EQUAL
10131: IFTRUE 10135
10133: GO 10157
10135: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10136: LD_VAR 0 1
10140: PPUSH
10141: LD_VAR 0 6
10145: PPUSH
10146: LD_VAR 0 7
10150: PPUSH
10151: CALL_OW 153
10155: GO 10188
10157: LD_INT 3
10159: DOUBLE
10160: EQUAL
10161: IFTRUE 10165
10163: GO 10187
10165: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10166: LD_VAR 0 1
10170: PPUSH
10171: LD_VAR 0 6
10175: PPUSH
10176: LD_VAR 0 7
10180: PPUSH
10181: CALL_OW 154
10185: GO 10188
10187: POP
// end ;
10188: LD_VAR 0 2
10192: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10193: LD_INT 0
10195: PPUSH
10196: PPUSH
10197: PPUSH
10198: PPUSH
10199: PPUSH
10200: PPUSH
// if not unit or not building then
10201: LD_VAR 0 1
10205: NOT
10206: PUSH
10207: LD_VAR 0 2
10211: NOT
10212: OR
10213: IFFALSE 10217
// exit ;
10215: GO 10375
// x := GetX ( building ) ;
10217: LD_ADDR_VAR 0 5
10221: PUSH
10222: LD_VAR 0 2
10226: PPUSH
10227: CALL_OW 250
10231: ST_TO_ADDR
// y := GetY ( building ) ;
10232: LD_ADDR_VAR 0 6
10236: PUSH
10237: LD_VAR 0 2
10241: PPUSH
10242: CALL_OW 251
10246: ST_TO_ADDR
// for i = 0 to 5 do
10247: LD_ADDR_VAR 0 4
10251: PUSH
10252: DOUBLE
10253: LD_INT 0
10255: DEC
10256: ST_TO_ADDR
10257: LD_INT 5
10259: PUSH
10260: FOR_TO
10261: IFFALSE 10373
// begin _x := ShiftX ( x , i , 3 ) ;
10263: LD_ADDR_VAR 0 7
10267: PUSH
10268: LD_VAR 0 5
10272: PPUSH
10273: LD_VAR 0 4
10277: PPUSH
10278: LD_INT 3
10280: PPUSH
10281: CALL_OW 272
10285: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10286: LD_ADDR_VAR 0 8
10290: PUSH
10291: LD_VAR 0 6
10295: PPUSH
10296: LD_VAR 0 4
10300: PPUSH
10301: LD_INT 3
10303: PPUSH
10304: CALL_OW 273
10308: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10309: LD_VAR 0 7
10313: PPUSH
10314: LD_VAR 0 8
10318: PPUSH
10319: CALL_OW 488
10323: NOT
10324: IFFALSE 10328
// continue ;
10326: GO 10260
// if HexInfo ( _x , _y ) = 0 then
10328: LD_VAR 0 7
10332: PPUSH
10333: LD_VAR 0 8
10337: PPUSH
10338: CALL_OW 428
10342: PUSH
10343: LD_INT 0
10345: EQUAL
10346: IFFALSE 10371
// begin ComMoveXY ( unit , _x , _y ) ;
10348: LD_VAR 0 1
10352: PPUSH
10353: LD_VAR 0 7
10357: PPUSH
10358: LD_VAR 0 8
10362: PPUSH
10363: CALL_OW 111
// exit ;
10367: POP
10368: POP
10369: GO 10375
// end ; end ;
10371: GO 10260
10373: POP
10374: POP
// end ;
10375: LD_VAR 0 3
10379: RET
// export function ScanBase ( side , base_area ) ; begin
10380: LD_INT 0
10382: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10383: LD_ADDR_VAR 0 3
10387: PUSH
10388: LD_VAR 0 2
10392: PPUSH
10393: LD_INT 81
10395: PUSH
10396: LD_VAR 0 1
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PPUSH
10405: CALL_OW 70
10409: ST_TO_ADDR
// end ;
10410: LD_VAR 0 3
10414: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10415: LD_INT 0
10417: PPUSH
10418: PPUSH
10419: PPUSH
10420: PPUSH
// result := false ;
10421: LD_ADDR_VAR 0 2
10425: PUSH
10426: LD_INT 0
10428: ST_TO_ADDR
// side := GetSide ( unit ) ;
10429: LD_ADDR_VAR 0 3
10433: PUSH
10434: LD_VAR 0 1
10438: PPUSH
10439: CALL_OW 255
10443: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10444: LD_ADDR_VAR 0 4
10448: PUSH
10449: LD_VAR 0 1
10453: PPUSH
10454: CALL_OW 248
10458: ST_TO_ADDR
// case nat of 1 :
10459: LD_VAR 0 4
10463: PUSH
10464: LD_INT 1
10466: DOUBLE
10467: EQUAL
10468: IFTRUE 10472
10470: GO 10483
10472: POP
// tech := tech_lassight ; 2 :
10473: LD_ADDR_VAR 0 5
10477: PUSH
10478: LD_INT 12
10480: ST_TO_ADDR
10481: GO 10522
10483: LD_INT 2
10485: DOUBLE
10486: EQUAL
10487: IFTRUE 10491
10489: GO 10502
10491: POP
// tech := tech_mortar ; 3 :
10492: LD_ADDR_VAR 0 5
10496: PUSH
10497: LD_INT 41
10499: ST_TO_ADDR
10500: GO 10522
10502: LD_INT 3
10504: DOUBLE
10505: EQUAL
10506: IFTRUE 10510
10508: GO 10521
10510: POP
// tech := tech_bazooka ; end ;
10511: LD_ADDR_VAR 0 5
10515: PUSH
10516: LD_INT 44
10518: ST_TO_ADDR
10519: GO 10522
10521: POP
// if Researched ( side , tech ) then
10522: LD_VAR 0 3
10526: PPUSH
10527: LD_VAR 0 5
10531: PPUSH
10532: CALL_OW 325
10536: IFFALSE 10563
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10538: LD_ADDR_VAR 0 2
10542: PUSH
10543: LD_INT 5
10545: PUSH
10546: LD_INT 8
10548: PUSH
10549: LD_INT 9
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: LD_VAR 0 4
10561: ARRAY
10562: ST_TO_ADDR
// end ;
10563: LD_VAR 0 2
10567: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10568: LD_INT 0
10570: PPUSH
10571: PPUSH
10572: PPUSH
// if not mines then
10573: LD_VAR 0 2
10577: NOT
10578: IFFALSE 10582
// exit ;
10580: GO 10726
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10582: LD_ADDR_VAR 0 5
10586: PUSH
10587: LD_INT 81
10589: PUSH
10590: LD_VAR 0 1
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 3
10601: PUSH
10602: LD_INT 21
10604: PUSH
10605: LD_INT 3
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PPUSH
10620: CALL_OW 69
10624: ST_TO_ADDR
// for i in mines do
10625: LD_ADDR_VAR 0 4
10629: PUSH
10630: LD_VAR 0 2
10634: PUSH
10635: FOR_IN
10636: IFFALSE 10724
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10638: LD_VAR 0 4
10642: PUSH
10643: LD_INT 1
10645: ARRAY
10646: PPUSH
10647: LD_VAR 0 4
10651: PUSH
10652: LD_INT 2
10654: ARRAY
10655: PPUSH
10656: CALL_OW 458
10660: NOT
10661: IFFALSE 10665
// continue ;
10663: GO 10635
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10665: LD_VAR 0 4
10669: PUSH
10670: LD_INT 1
10672: ARRAY
10673: PPUSH
10674: LD_VAR 0 4
10678: PUSH
10679: LD_INT 2
10681: ARRAY
10682: PPUSH
10683: CALL_OW 428
10687: PUSH
10688: LD_VAR 0 5
10692: IN
10693: IFFALSE 10722
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10695: LD_VAR 0 4
10699: PUSH
10700: LD_INT 1
10702: ARRAY
10703: PPUSH
10704: LD_VAR 0 4
10708: PUSH
10709: LD_INT 2
10711: ARRAY
10712: PPUSH
10713: LD_VAR 0 1
10717: PPUSH
10718: CALL_OW 456
// end ;
10722: GO 10635
10724: POP
10725: POP
// end ;
10726: LD_VAR 0 3
10730: RET
// export function Count ( array ) ; begin
10731: LD_INT 0
10733: PPUSH
// result := array + 0 ;
10734: LD_ADDR_VAR 0 2
10738: PUSH
10739: LD_VAR 0 1
10743: PUSH
10744: LD_INT 0
10746: PLUS
10747: ST_TO_ADDR
// end ;
10748: LD_VAR 0 2
10752: RET
// export function IsEmpty ( building ) ; begin
10753: LD_INT 0
10755: PPUSH
// if not building then
10756: LD_VAR 0 1
10760: NOT
10761: IFFALSE 10765
// exit ;
10763: GO 10808
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10765: LD_ADDR_VAR 0 2
10769: PUSH
10770: LD_VAR 0 1
10774: PUSH
10775: LD_INT 22
10777: PUSH
10778: LD_VAR 0 1
10782: PPUSH
10783: CALL_OW 255
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 58
10794: PUSH
10795: EMPTY
10796: LIST
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PPUSH
10802: CALL_OW 69
10806: IN
10807: ST_TO_ADDR
// end ;
10808: LD_VAR 0 2
10812: RET
// export function IsNotFull ( building ) ; var places ; begin
10813: LD_INT 0
10815: PPUSH
10816: PPUSH
// if not building then
10817: LD_VAR 0 1
10821: NOT
10822: IFFALSE 10826
// exit ;
10824: GO 10854
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
10826: LD_ADDR_VAR 0 2
10830: PUSH
10831: LD_VAR 0 1
10835: PPUSH
10836: LD_INT 3
10838: PUSH
10839: LD_INT 62
10841: PUSH
10842: EMPTY
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 72
10853: ST_TO_ADDR
// end ;
10854: LD_VAR 0 2
10858: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10859: LD_INT 0
10861: PPUSH
10862: PPUSH
10863: PPUSH
10864: PPUSH
// tmp := [ ] ;
10865: LD_ADDR_VAR 0 3
10869: PUSH
10870: EMPTY
10871: ST_TO_ADDR
// list := [ ] ;
10872: LD_ADDR_VAR 0 5
10876: PUSH
10877: EMPTY
10878: ST_TO_ADDR
// for i = 16 to 25 do
10879: LD_ADDR_VAR 0 4
10883: PUSH
10884: DOUBLE
10885: LD_INT 16
10887: DEC
10888: ST_TO_ADDR
10889: LD_INT 25
10891: PUSH
10892: FOR_TO
10893: IFFALSE 10966
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10895: LD_ADDR_VAR 0 3
10899: PUSH
10900: LD_VAR 0 3
10904: PUSH
10905: LD_INT 22
10907: PUSH
10908: LD_VAR 0 1
10912: PPUSH
10913: CALL_OW 255
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 91
10924: PUSH
10925: LD_VAR 0 1
10929: PUSH
10930: LD_INT 6
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 30
10940: PUSH
10941: LD_VAR 0 4
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: LIST
10954: PUSH
10955: EMPTY
10956: LIST
10957: PPUSH
10958: CALL_OW 69
10962: ADD
10963: ST_TO_ADDR
10964: GO 10892
10966: POP
10967: POP
// for i = 1 to tmp do
10968: LD_ADDR_VAR 0 4
10972: PUSH
10973: DOUBLE
10974: LD_INT 1
10976: DEC
10977: ST_TO_ADDR
10978: LD_VAR 0 3
10982: PUSH
10983: FOR_TO
10984: IFFALSE 11072
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10986: LD_ADDR_VAR 0 5
10990: PUSH
10991: LD_VAR 0 5
10995: PUSH
10996: LD_VAR 0 3
11000: PUSH
11001: LD_VAR 0 4
11005: ARRAY
11006: PPUSH
11007: CALL_OW 266
11011: PUSH
11012: LD_VAR 0 3
11016: PUSH
11017: LD_VAR 0 4
11021: ARRAY
11022: PPUSH
11023: CALL_OW 250
11027: PUSH
11028: LD_VAR 0 3
11032: PUSH
11033: LD_VAR 0 4
11037: ARRAY
11038: PPUSH
11039: CALL_OW 251
11043: PUSH
11044: LD_VAR 0 3
11048: PUSH
11049: LD_VAR 0 4
11053: ARRAY
11054: PPUSH
11055: CALL_OW 254
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: PUSH
11066: EMPTY
11067: LIST
11068: ADD
11069: ST_TO_ADDR
11070: GO 10983
11072: POP
11073: POP
// result := list ;
11074: LD_ADDR_VAR 0 2
11078: PUSH
11079: LD_VAR 0 5
11083: ST_TO_ADDR
// end ;
11084: LD_VAR 0 2
11088: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11089: LD_INT 0
11091: PPUSH
11092: PPUSH
11093: PPUSH
11094: PPUSH
11095: PPUSH
11096: PPUSH
11097: PPUSH
// if not factory then
11098: LD_VAR 0 1
11102: NOT
11103: IFFALSE 11107
// exit ;
11105: GO 11700
// if control = control_apeman then
11107: LD_VAR 0 4
11111: PUSH
11112: LD_INT 5
11114: EQUAL
11115: IFFALSE 11224
// begin tmp := UnitsInside ( factory ) ;
11117: LD_ADDR_VAR 0 8
11121: PUSH
11122: LD_VAR 0 1
11126: PPUSH
11127: CALL_OW 313
11131: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11132: LD_VAR 0 8
11136: PPUSH
11137: LD_INT 25
11139: PUSH
11140: LD_INT 12
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PPUSH
11147: CALL_OW 72
11151: NOT
11152: IFFALSE 11162
// control := control_manual ;
11154: LD_ADDR_VAR 0 4
11158: PUSH
11159: LD_INT 1
11161: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11162: LD_ADDR_VAR 0 8
11166: PUSH
11167: LD_VAR 0 1
11171: PPUSH
11172: CALL 10859 0 1
11176: ST_TO_ADDR
// if tmp then
11177: LD_VAR 0 8
11181: IFFALSE 11224
// begin for i in tmp do
11183: LD_ADDR_VAR 0 7
11187: PUSH
11188: LD_VAR 0 8
11192: PUSH
11193: FOR_IN
11194: IFFALSE 11222
// if i [ 1 ] = b_ext_radio then
11196: LD_VAR 0 7
11200: PUSH
11201: LD_INT 1
11203: ARRAY
11204: PUSH
11205: LD_INT 22
11207: EQUAL
11208: IFFALSE 11220
// begin control := control_remote ;
11210: LD_ADDR_VAR 0 4
11214: PUSH
11215: LD_INT 2
11217: ST_TO_ADDR
// break ;
11218: GO 11222
// end ;
11220: GO 11193
11222: POP
11223: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11224: LD_VAR 0 1
11228: PPUSH
11229: LD_VAR 0 2
11233: PPUSH
11234: LD_VAR 0 3
11238: PPUSH
11239: LD_VAR 0 4
11243: PPUSH
11244: LD_VAR 0 5
11248: PPUSH
11249: CALL_OW 448
11253: IFFALSE 11288
// begin result := [ chassis , engine , control , weapon ] ;
11255: LD_ADDR_VAR 0 6
11259: PUSH
11260: LD_VAR 0 2
11264: PUSH
11265: LD_VAR 0 3
11269: PUSH
11270: LD_VAR 0 4
11274: PUSH
11275: LD_VAR 0 5
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: ST_TO_ADDR
// exit ;
11286: GO 11700
// end ; _chassis := AvailableChassisList ( factory ) ;
11288: LD_ADDR_VAR 0 9
11292: PUSH
11293: LD_VAR 0 1
11297: PPUSH
11298: CALL_OW 475
11302: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11303: LD_ADDR_VAR 0 11
11307: PUSH
11308: LD_VAR 0 1
11312: PPUSH
11313: CALL_OW 476
11317: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11318: LD_ADDR_VAR 0 12
11322: PUSH
11323: LD_VAR 0 1
11327: PPUSH
11328: CALL_OW 477
11332: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11333: LD_ADDR_VAR 0 10
11337: PUSH
11338: LD_VAR 0 1
11342: PPUSH
11343: CALL_OW 478
11347: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11348: LD_VAR 0 9
11352: NOT
11353: PUSH
11354: LD_VAR 0 11
11358: NOT
11359: OR
11360: PUSH
11361: LD_VAR 0 12
11365: NOT
11366: OR
11367: PUSH
11368: LD_VAR 0 10
11372: NOT
11373: OR
11374: IFFALSE 11409
// begin result := [ chassis , engine , control , weapon ] ;
11376: LD_ADDR_VAR 0 6
11380: PUSH
11381: LD_VAR 0 2
11385: PUSH
11386: LD_VAR 0 3
11390: PUSH
11391: LD_VAR 0 4
11395: PUSH
11396: LD_VAR 0 5
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: ST_TO_ADDR
// exit ;
11407: GO 11700
// end ; if not chassis in _chassis then
11409: LD_VAR 0 2
11413: PUSH
11414: LD_VAR 0 9
11418: IN
11419: NOT
11420: IFFALSE 11446
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11422: LD_ADDR_VAR 0 2
11426: PUSH
11427: LD_VAR 0 9
11431: PUSH
11432: LD_INT 1
11434: PPUSH
11435: LD_VAR 0 9
11439: PPUSH
11440: CALL_OW 12
11444: ARRAY
11445: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11446: LD_VAR 0 2
11450: PPUSH
11451: LD_VAR 0 3
11455: PPUSH
11456: CALL 11705 0 2
11460: NOT
11461: IFFALSE 11520
// repeat engine := _engine [ 1 ] ;
11463: LD_ADDR_VAR 0 3
11467: PUSH
11468: LD_VAR 0 11
11472: PUSH
11473: LD_INT 1
11475: ARRAY
11476: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11477: LD_ADDR_VAR 0 11
11481: PUSH
11482: LD_VAR 0 11
11486: PPUSH
11487: LD_INT 1
11489: PPUSH
11490: CALL_OW 3
11494: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11495: LD_VAR 0 2
11499: PPUSH
11500: LD_VAR 0 3
11504: PPUSH
11505: CALL 11705 0 2
11509: PUSH
11510: LD_VAR 0 11
11514: PUSH
11515: EMPTY
11516: EQUAL
11517: OR
11518: IFFALSE 11463
// if not control in _control then
11520: LD_VAR 0 4
11524: PUSH
11525: LD_VAR 0 12
11529: IN
11530: NOT
11531: IFFALSE 11557
// control := _control [ rand ( 1 , _control ) ] ;
11533: LD_ADDR_VAR 0 4
11537: PUSH
11538: LD_VAR 0 12
11542: PUSH
11543: LD_INT 1
11545: PPUSH
11546: LD_VAR 0 12
11550: PPUSH
11551: CALL_OW 12
11555: ARRAY
11556: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11557: LD_VAR 0 2
11561: PPUSH
11562: LD_VAR 0 5
11566: PPUSH
11567: CALL 11925 0 2
11571: NOT
11572: IFFALSE 11631
// repeat weapon := _weapon [ 1 ] ;
11574: LD_ADDR_VAR 0 5
11578: PUSH
11579: LD_VAR 0 10
11583: PUSH
11584: LD_INT 1
11586: ARRAY
11587: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11588: LD_ADDR_VAR 0 10
11592: PUSH
11593: LD_VAR 0 10
11597: PPUSH
11598: LD_INT 1
11600: PPUSH
11601: CALL_OW 3
11605: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11606: LD_VAR 0 2
11610: PPUSH
11611: LD_VAR 0 5
11615: PPUSH
11616: CALL 11925 0 2
11620: PUSH
11621: LD_VAR 0 10
11625: PUSH
11626: EMPTY
11627: EQUAL
11628: OR
11629: IFFALSE 11574
// result := [ ] ;
11631: LD_ADDR_VAR 0 6
11635: PUSH
11636: EMPTY
11637: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11638: LD_VAR 0 1
11642: PPUSH
11643: LD_VAR 0 2
11647: PPUSH
11648: LD_VAR 0 3
11652: PPUSH
11653: LD_VAR 0 4
11657: PPUSH
11658: LD_VAR 0 5
11662: PPUSH
11663: CALL_OW 448
11667: IFFALSE 11700
// result := [ chassis , engine , control , weapon ] ;
11669: LD_ADDR_VAR 0 6
11673: PUSH
11674: LD_VAR 0 2
11678: PUSH
11679: LD_VAR 0 3
11683: PUSH
11684: LD_VAR 0 4
11688: PUSH
11689: LD_VAR 0 5
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: ST_TO_ADDR
// end ;
11700: LD_VAR 0 6
11704: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11705: LD_INT 0
11707: PPUSH
// if not chassis or not engine then
11708: LD_VAR 0 1
11712: NOT
11713: PUSH
11714: LD_VAR 0 2
11718: NOT
11719: OR
11720: IFFALSE 11724
// exit ;
11722: GO 11920
// case engine of engine_solar :
11724: LD_VAR 0 2
11728: PUSH
11729: LD_INT 2
11731: DOUBLE
11732: EQUAL
11733: IFTRUE 11737
11735: GO 11775
11737: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11738: LD_ADDR_VAR 0 3
11742: PUSH
11743: LD_INT 11
11745: PUSH
11746: LD_INT 12
11748: PUSH
11749: LD_INT 13
11751: PUSH
11752: LD_INT 14
11754: PUSH
11755: LD_INT 1
11757: PUSH
11758: LD_INT 2
11760: PUSH
11761: LD_INT 3
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: ST_TO_ADDR
11773: GO 11904
11775: LD_INT 1
11777: DOUBLE
11778: EQUAL
11779: IFTRUE 11783
11781: GO 11845
11783: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11784: LD_ADDR_VAR 0 3
11788: PUSH
11789: LD_INT 11
11791: PUSH
11792: LD_INT 12
11794: PUSH
11795: LD_INT 13
11797: PUSH
11798: LD_INT 14
11800: PUSH
11801: LD_INT 1
11803: PUSH
11804: LD_INT 2
11806: PUSH
11807: LD_INT 3
11809: PUSH
11810: LD_INT 4
11812: PUSH
11813: LD_INT 5
11815: PUSH
11816: LD_INT 21
11818: PUSH
11819: LD_INT 23
11821: PUSH
11822: LD_INT 22
11824: PUSH
11825: LD_INT 24
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: ST_TO_ADDR
11843: GO 11904
11845: LD_INT 3
11847: DOUBLE
11848: EQUAL
11849: IFTRUE 11853
11851: GO 11903
11853: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11854: LD_ADDR_VAR 0 3
11858: PUSH
11859: LD_INT 13
11861: PUSH
11862: LD_INT 14
11864: PUSH
11865: LD_INT 2
11867: PUSH
11868: LD_INT 3
11870: PUSH
11871: LD_INT 4
11873: PUSH
11874: LD_INT 5
11876: PUSH
11877: LD_INT 21
11879: PUSH
11880: LD_INT 22
11882: PUSH
11883: LD_INT 23
11885: PUSH
11886: LD_INT 24
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: ST_TO_ADDR
11901: GO 11904
11903: POP
// result := ( chassis in result ) ;
11904: LD_ADDR_VAR 0 3
11908: PUSH
11909: LD_VAR 0 1
11913: PUSH
11914: LD_VAR 0 3
11918: IN
11919: ST_TO_ADDR
// end ;
11920: LD_VAR 0 3
11924: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11925: LD_INT 0
11927: PPUSH
// if not chassis or not weapon then
11928: LD_VAR 0 1
11932: NOT
11933: PUSH
11934: LD_VAR 0 2
11938: NOT
11939: OR
11940: IFFALSE 11944
// exit ;
11942: GO 13004
// case weapon of us_machine_gun :
11944: LD_VAR 0 2
11948: PUSH
11949: LD_INT 2
11951: DOUBLE
11952: EQUAL
11953: IFTRUE 11957
11955: GO 11987
11957: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11958: LD_ADDR_VAR 0 3
11962: PUSH
11963: LD_INT 1
11965: PUSH
11966: LD_INT 2
11968: PUSH
11969: LD_INT 3
11971: PUSH
11972: LD_INT 4
11974: PUSH
11975: LD_INT 5
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: ST_TO_ADDR
11985: GO 12988
11987: LD_INT 3
11989: DOUBLE
11990: EQUAL
11991: IFTRUE 11995
11993: GO 12025
11995: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11996: LD_ADDR_VAR 0 3
12000: PUSH
12001: LD_INT 1
12003: PUSH
12004: LD_INT 2
12006: PUSH
12007: LD_INT 3
12009: PUSH
12010: LD_INT 4
12012: PUSH
12013: LD_INT 5
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: ST_TO_ADDR
12023: GO 12988
12025: LD_INT 11
12027: DOUBLE
12028: EQUAL
12029: IFTRUE 12033
12031: GO 12063
12033: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12034: LD_ADDR_VAR 0 3
12038: PUSH
12039: LD_INT 1
12041: PUSH
12042: LD_INT 2
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: LD_INT 4
12050: PUSH
12051: LD_INT 5
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: ST_TO_ADDR
12061: GO 12988
12063: LD_INT 4
12065: DOUBLE
12066: EQUAL
12067: IFTRUE 12071
12069: GO 12097
12071: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12072: LD_ADDR_VAR 0 3
12076: PUSH
12077: LD_INT 2
12079: PUSH
12080: LD_INT 3
12082: PUSH
12083: LD_INT 4
12085: PUSH
12086: LD_INT 5
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: ST_TO_ADDR
12095: GO 12988
12097: LD_INT 5
12099: DOUBLE
12100: EQUAL
12101: IFTRUE 12105
12103: GO 12131
12105: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12106: LD_ADDR_VAR 0 3
12110: PUSH
12111: LD_INT 2
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: LD_INT 4
12119: PUSH
12120: LD_INT 5
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: ST_TO_ADDR
12129: GO 12988
12131: LD_INT 9
12133: DOUBLE
12134: EQUAL
12135: IFTRUE 12139
12137: GO 12165
12139: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12140: LD_ADDR_VAR 0 3
12144: PUSH
12145: LD_INT 2
12147: PUSH
12148: LD_INT 3
12150: PUSH
12151: LD_INT 4
12153: PUSH
12154: LD_INT 5
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: ST_TO_ADDR
12163: GO 12988
12165: LD_INT 7
12167: DOUBLE
12168: EQUAL
12169: IFTRUE 12173
12171: GO 12199
12173: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12174: LD_ADDR_VAR 0 3
12178: PUSH
12179: LD_INT 2
12181: PUSH
12182: LD_INT 3
12184: PUSH
12185: LD_INT 4
12187: PUSH
12188: LD_INT 5
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: ST_TO_ADDR
12197: GO 12988
12199: LD_INT 12
12201: DOUBLE
12202: EQUAL
12203: IFTRUE 12207
12205: GO 12233
12207: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12208: LD_ADDR_VAR 0 3
12212: PUSH
12213: LD_INT 2
12215: PUSH
12216: LD_INT 3
12218: PUSH
12219: LD_INT 4
12221: PUSH
12222: LD_INT 5
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: ST_TO_ADDR
12231: GO 12988
12233: LD_INT 13
12235: DOUBLE
12236: EQUAL
12237: IFTRUE 12241
12239: GO 12267
12241: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12242: LD_ADDR_VAR 0 3
12246: PUSH
12247: LD_INT 2
12249: PUSH
12250: LD_INT 3
12252: PUSH
12253: LD_INT 4
12255: PUSH
12256: LD_INT 5
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: ST_TO_ADDR
12265: GO 12988
12267: LD_INT 14
12269: DOUBLE
12270: EQUAL
12271: IFTRUE 12275
12273: GO 12293
12275: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12276: LD_ADDR_VAR 0 3
12280: PUSH
12281: LD_INT 4
12283: PUSH
12284: LD_INT 5
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: ST_TO_ADDR
12291: GO 12988
12293: LD_INT 6
12295: DOUBLE
12296: EQUAL
12297: IFTRUE 12301
12299: GO 12319
12301: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12302: LD_ADDR_VAR 0 3
12306: PUSH
12307: LD_INT 4
12309: PUSH
12310: LD_INT 5
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: ST_TO_ADDR
12317: GO 12988
12319: LD_INT 10
12321: DOUBLE
12322: EQUAL
12323: IFTRUE 12327
12325: GO 12345
12327: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12328: LD_ADDR_VAR 0 3
12332: PUSH
12333: LD_INT 4
12335: PUSH
12336: LD_INT 5
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: ST_TO_ADDR
12343: GO 12988
12345: LD_INT 22
12347: DOUBLE
12348: EQUAL
12349: IFTRUE 12353
12351: GO 12379
12353: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12354: LD_ADDR_VAR 0 3
12358: PUSH
12359: LD_INT 11
12361: PUSH
12362: LD_INT 12
12364: PUSH
12365: LD_INT 13
12367: PUSH
12368: LD_INT 14
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: ST_TO_ADDR
12377: GO 12988
12379: LD_INT 23
12381: DOUBLE
12382: EQUAL
12383: IFTRUE 12387
12385: GO 12413
12387: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12388: LD_ADDR_VAR 0 3
12392: PUSH
12393: LD_INT 11
12395: PUSH
12396: LD_INT 12
12398: PUSH
12399: LD_INT 13
12401: PUSH
12402: LD_INT 14
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: ST_TO_ADDR
12411: GO 12988
12413: LD_INT 24
12415: DOUBLE
12416: EQUAL
12417: IFTRUE 12421
12419: GO 12447
12421: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12422: LD_ADDR_VAR 0 3
12426: PUSH
12427: LD_INT 11
12429: PUSH
12430: LD_INT 12
12432: PUSH
12433: LD_INT 13
12435: PUSH
12436: LD_INT 14
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: ST_TO_ADDR
12445: GO 12988
12447: LD_INT 30
12449: DOUBLE
12450: EQUAL
12451: IFTRUE 12455
12453: GO 12481
12455: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12456: LD_ADDR_VAR 0 3
12460: PUSH
12461: LD_INT 11
12463: PUSH
12464: LD_INT 12
12466: PUSH
12467: LD_INT 13
12469: PUSH
12470: LD_INT 14
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: ST_TO_ADDR
12479: GO 12988
12481: LD_INT 25
12483: DOUBLE
12484: EQUAL
12485: IFTRUE 12489
12487: GO 12507
12489: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12490: LD_ADDR_VAR 0 3
12494: PUSH
12495: LD_INT 13
12497: PUSH
12498: LD_INT 14
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: ST_TO_ADDR
12505: GO 12988
12507: LD_INT 27
12509: DOUBLE
12510: EQUAL
12511: IFTRUE 12515
12513: GO 12533
12515: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12516: LD_ADDR_VAR 0 3
12520: PUSH
12521: LD_INT 13
12523: PUSH
12524: LD_INT 14
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: ST_TO_ADDR
12531: GO 12988
12533: LD_INT 92
12535: DOUBLE
12536: EQUAL
12537: IFTRUE 12541
12539: GO 12567
12541: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12542: LD_ADDR_VAR 0 3
12546: PUSH
12547: LD_INT 11
12549: PUSH
12550: LD_INT 12
12552: PUSH
12553: LD_INT 13
12555: PUSH
12556: LD_INT 14
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: ST_TO_ADDR
12565: GO 12988
12567: LD_INT 28
12569: DOUBLE
12570: EQUAL
12571: IFTRUE 12575
12573: GO 12593
12575: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12576: LD_ADDR_VAR 0 3
12580: PUSH
12581: LD_INT 13
12583: PUSH
12584: LD_INT 14
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: ST_TO_ADDR
12591: GO 12988
12593: LD_INT 29
12595: DOUBLE
12596: EQUAL
12597: IFTRUE 12601
12599: GO 12619
12601: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12602: LD_ADDR_VAR 0 3
12606: PUSH
12607: LD_INT 13
12609: PUSH
12610: LD_INT 14
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: ST_TO_ADDR
12617: GO 12988
12619: LD_INT 31
12621: DOUBLE
12622: EQUAL
12623: IFTRUE 12627
12625: GO 12645
12627: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12628: LD_ADDR_VAR 0 3
12632: PUSH
12633: LD_INT 13
12635: PUSH
12636: LD_INT 14
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: ST_TO_ADDR
12643: GO 12988
12645: LD_INT 26
12647: DOUBLE
12648: EQUAL
12649: IFTRUE 12653
12651: GO 12671
12653: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12654: LD_ADDR_VAR 0 3
12658: PUSH
12659: LD_INT 13
12661: PUSH
12662: LD_INT 14
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: ST_TO_ADDR
12669: GO 12988
12671: LD_INT 42
12673: DOUBLE
12674: EQUAL
12675: IFTRUE 12679
12677: GO 12705
12679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12680: LD_ADDR_VAR 0 3
12684: PUSH
12685: LD_INT 21
12687: PUSH
12688: LD_INT 22
12690: PUSH
12691: LD_INT 23
12693: PUSH
12694: LD_INT 24
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: ST_TO_ADDR
12703: GO 12988
12705: LD_INT 43
12707: DOUBLE
12708: EQUAL
12709: IFTRUE 12713
12711: GO 12739
12713: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12714: LD_ADDR_VAR 0 3
12718: PUSH
12719: LD_INT 21
12721: PUSH
12722: LD_INT 22
12724: PUSH
12725: LD_INT 23
12727: PUSH
12728: LD_INT 24
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: ST_TO_ADDR
12737: GO 12988
12739: LD_INT 44
12741: DOUBLE
12742: EQUAL
12743: IFTRUE 12747
12745: GO 12773
12747: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12748: LD_ADDR_VAR 0 3
12752: PUSH
12753: LD_INT 21
12755: PUSH
12756: LD_INT 22
12758: PUSH
12759: LD_INT 23
12761: PUSH
12762: LD_INT 24
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: ST_TO_ADDR
12771: GO 12988
12773: LD_INT 45
12775: DOUBLE
12776: EQUAL
12777: IFTRUE 12781
12779: GO 12807
12781: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12782: LD_ADDR_VAR 0 3
12786: PUSH
12787: LD_INT 21
12789: PUSH
12790: LD_INT 22
12792: PUSH
12793: LD_INT 23
12795: PUSH
12796: LD_INT 24
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: ST_TO_ADDR
12805: GO 12988
12807: LD_INT 49
12809: DOUBLE
12810: EQUAL
12811: IFTRUE 12815
12813: GO 12841
12815: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12816: LD_ADDR_VAR 0 3
12820: PUSH
12821: LD_INT 21
12823: PUSH
12824: LD_INT 22
12826: PUSH
12827: LD_INT 23
12829: PUSH
12830: LD_INT 24
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: ST_TO_ADDR
12839: GO 12988
12841: LD_INT 51
12843: DOUBLE
12844: EQUAL
12845: IFTRUE 12849
12847: GO 12875
12849: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12850: LD_ADDR_VAR 0 3
12854: PUSH
12855: LD_INT 21
12857: PUSH
12858: LD_INT 22
12860: PUSH
12861: LD_INT 23
12863: PUSH
12864: LD_INT 24
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: ST_TO_ADDR
12873: GO 12988
12875: LD_INT 52
12877: DOUBLE
12878: EQUAL
12879: IFTRUE 12883
12881: GO 12909
12883: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12884: LD_ADDR_VAR 0 3
12888: PUSH
12889: LD_INT 21
12891: PUSH
12892: LD_INT 22
12894: PUSH
12895: LD_INT 23
12897: PUSH
12898: LD_INT 24
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: ST_TO_ADDR
12907: GO 12988
12909: LD_INT 53
12911: DOUBLE
12912: EQUAL
12913: IFTRUE 12917
12915: GO 12935
12917: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: LD_INT 23
12925: PUSH
12926: LD_INT 24
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: ST_TO_ADDR
12933: GO 12988
12935: LD_INT 46
12937: DOUBLE
12938: EQUAL
12939: IFTRUE 12943
12941: GO 12961
12943: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12944: LD_ADDR_VAR 0 3
12948: PUSH
12949: LD_INT 23
12951: PUSH
12952: LD_INT 24
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: ST_TO_ADDR
12959: GO 12988
12961: LD_INT 47
12963: DOUBLE
12964: EQUAL
12965: IFTRUE 12969
12967: GO 12987
12969: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12970: LD_ADDR_VAR 0 3
12974: PUSH
12975: LD_INT 23
12977: PUSH
12978: LD_INT 24
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: ST_TO_ADDR
12985: GO 12988
12987: POP
// result := ( chassis in result ) ;
12988: LD_ADDR_VAR 0 3
12992: PUSH
12993: LD_VAR 0 1
12997: PUSH
12998: LD_VAR 0 3
13002: IN
13003: ST_TO_ADDR
// end ;
13004: LD_VAR 0 3
13008: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13009: LD_INT 0
13011: PPUSH
13012: PPUSH
13013: PPUSH
13014: PPUSH
13015: PPUSH
13016: PPUSH
13017: PPUSH
// result := array ;
13018: LD_ADDR_VAR 0 5
13022: PUSH
13023: LD_VAR 0 1
13027: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13028: LD_VAR 0 1
13032: NOT
13033: PUSH
13034: LD_VAR 0 2
13038: NOT
13039: OR
13040: PUSH
13041: LD_VAR 0 3
13045: NOT
13046: OR
13047: PUSH
13048: LD_VAR 0 2
13052: PUSH
13053: LD_VAR 0 1
13057: GREATER
13058: OR
13059: PUSH
13060: LD_VAR 0 3
13064: PUSH
13065: LD_VAR 0 1
13069: GREATER
13070: OR
13071: IFFALSE 13075
// exit ;
13073: GO 13371
// if direction then
13075: LD_VAR 0 4
13079: IFFALSE 13143
// begin d := 1 ;
13081: LD_ADDR_VAR 0 9
13085: PUSH
13086: LD_INT 1
13088: ST_TO_ADDR
// if i_from > i_to then
13089: LD_VAR 0 2
13093: PUSH
13094: LD_VAR 0 3
13098: GREATER
13099: IFFALSE 13125
// length := ( array - i_from ) + i_to else
13101: LD_ADDR_VAR 0 11
13105: PUSH
13106: LD_VAR 0 1
13110: PUSH
13111: LD_VAR 0 2
13115: MINUS
13116: PUSH
13117: LD_VAR 0 3
13121: PLUS
13122: ST_TO_ADDR
13123: GO 13141
// length := i_to - i_from ;
13125: LD_ADDR_VAR 0 11
13129: PUSH
13130: LD_VAR 0 3
13134: PUSH
13135: LD_VAR 0 2
13139: MINUS
13140: ST_TO_ADDR
// end else
13141: GO 13204
// begin d := - 1 ;
13143: LD_ADDR_VAR 0 9
13147: PUSH
13148: LD_INT 1
13150: NEG
13151: ST_TO_ADDR
// if i_from > i_to then
13152: LD_VAR 0 2
13156: PUSH
13157: LD_VAR 0 3
13161: GREATER
13162: IFFALSE 13182
// length := i_from - i_to else
13164: LD_ADDR_VAR 0 11
13168: PUSH
13169: LD_VAR 0 2
13173: PUSH
13174: LD_VAR 0 3
13178: MINUS
13179: ST_TO_ADDR
13180: GO 13204
// length := ( array - i_to ) + i_from ;
13182: LD_ADDR_VAR 0 11
13186: PUSH
13187: LD_VAR 0 1
13191: PUSH
13192: LD_VAR 0 3
13196: MINUS
13197: PUSH
13198: LD_VAR 0 2
13202: PLUS
13203: ST_TO_ADDR
// end ; if not length then
13204: LD_VAR 0 11
13208: NOT
13209: IFFALSE 13213
// exit ;
13211: GO 13371
// tmp := array ;
13213: LD_ADDR_VAR 0 10
13217: PUSH
13218: LD_VAR 0 1
13222: ST_TO_ADDR
// for i = 1 to length do
13223: LD_ADDR_VAR 0 6
13227: PUSH
13228: DOUBLE
13229: LD_INT 1
13231: DEC
13232: ST_TO_ADDR
13233: LD_VAR 0 11
13237: PUSH
13238: FOR_TO
13239: IFFALSE 13359
// begin for j = 1 to array do
13241: LD_ADDR_VAR 0 7
13245: PUSH
13246: DOUBLE
13247: LD_INT 1
13249: DEC
13250: ST_TO_ADDR
13251: LD_VAR 0 1
13255: PUSH
13256: FOR_TO
13257: IFFALSE 13345
// begin k := j + d ;
13259: LD_ADDR_VAR 0 8
13263: PUSH
13264: LD_VAR 0 7
13268: PUSH
13269: LD_VAR 0 9
13273: PLUS
13274: ST_TO_ADDR
// if k > array then
13275: LD_VAR 0 8
13279: PUSH
13280: LD_VAR 0 1
13284: GREATER
13285: IFFALSE 13295
// k := 1 ;
13287: LD_ADDR_VAR 0 8
13291: PUSH
13292: LD_INT 1
13294: ST_TO_ADDR
// if not k then
13295: LD_VAR 0 8
13299: NOT
13300: IFFALSE 13312
// k := array ;
13302: LD_ADDR_VAR 0 8
13306: PUSH
13307: LD_VAR 0 1
13311: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13312: LD_ADDR_VAR 0 10
13316: PUSH
13317: LD_VAR 0 10
13321: PPUSH
13322: LD_VAR 0 8
13326: PPUSH
13327: LD_VAR 0 1
13331: PUSH
13332: LD_VAR 0 7
13336: ARRAY
13337: PPUSH
13338: CALL_OW 1
13342: ST_TO_ADDR
// end ;
13343: GO 13256
13345: POP
13346: POP
// array := tmp ;
13347: LD_ADDR_VAR 0 1
13351: PUSH
13352: LD_VAR 0 10
13356: ST_TO_ADDR
// end ;
13357: GO 13238
13359: POP
13360: POP
// result := array ;
13361: LD_ADDR_VAR 0 5
13365: PUSH
13366: LD_VAR 0 1
13370: ST_TO_ADDR
// end ;
13371: LD_VAR 0 5
13375: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13376: LD_INT 0
13378: PPUSH
13379: PPUSH
// result := 0 ;
13380: LD_ADDR_VAR 0 3
13384: PUSH
13385: LD_INT 0
13387: ST_TO_ADDR
// if not array or not value in array then
13388: LD_VAR 0 1
13392: NOT
13393: PUSH
13394: LD_VAR 0 2
13398: PUSH
13399: LD_VAR 0 1
13403: IN
13404: NOT
13405: OR
13406: IFFALSE 13410
// exit ;
13408: GO 13464
// for i = 1 to array do
13410: LD_ADDR_VAR 0 4
13414: PUSH
13415: DOUBLE
13416: LD_INT 1
13418: DEC
13419: ST_TO_ADDR
13420: LD_VAR 0 1
13424: PUSH
13425: FOR_TO
13426: IFFALSE 13462
// if value = array [ i ] then
13428: LD_VAR 0 2
13432: PUSH
13433: LD_VAR 0 1
13437: PUSH
13438: LD_VAR 0 4
13442: ARRAY
13443: EQUAL
13444: IFFALSE 13460
// begin result := i ;
13446: LD_ADDR_VAR 0 3
13450: PUSH
13451: LD_VAR 0 4
13455: ST_TO_ADDR
// exit ;
13456: POP
13457: POP
13458: GO 13464
// end ;
13460: GO 13425
13462: POP
13463: POP
// end ;
13464: LD_VAR 0 3
13468: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13469: LD_INT 0
13471: PPUSH
// vc_chassis := chassis ;
13472: LD_ADDR_OWVAR 37
13476: PUSH
13477: LD_VAR 0 1
13481: ST_TO_ADDR
// vc_engine := engine ;
13482: LD_ADDR_OWVAR 39
13486: PUSH
13487: LD_VAR 0 2
13491: ST_TO_ADDR
// vc_control := control ;
13492: LD_ADDR_OWVAR 38
13496: PUSH
13497: LD_VAR 0 3
13501: ST_TO_ADDR
// vc_weapon := weapon ;
13502: LD_ADDR_OWVAR 40
13506: PUSH
13507: LD_VAR 0 4
13511: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13512: LD_ADDR_OWVAR 41
13516: PUSH
13517: LD_VAR 0 5
13521: ST_TO_ADDR
// end ;
13522: LD_VAR 0 6
13526: RET
// export function WantPlant ( unit ) ; var task ; begin
13527: LD_INT 0
13529: PPUSH
13530: PPUSH
// result := false ;
13531: LD_ADDR_VAR 0 2
13535: PUSH
13536: LD_INT 0
13538: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13539: LD_ADDR_VAR 0 3
13543: PUSH
13544: LD_VAR 0 1
13548: PPUSH
13549: CALL_OW 437
13553: ST_TO_ADDR
// if task then
13554: LD_VAR 0 3
13558: IFFALSE 13586
// if task [ 1 ] [ 1 ] = p then
13560: LD_VAR 0 3
13564: PUSH
13565: LD_INT 1
13567: ARRAY
13568: PUSH
13569: LD_INT 1
13571: ARRAY
13572: PUSH
13573: LD_STRING p
13575: EQUAL
13576: IFFALSE 13586
// result := true ;
13578: LD_ADDR_VAR 0 2
13582: PUSH
13583: LD_INT 1
13585: ST_TO_ADDR
// end ;
13586: LD_VAR 0 2
13590: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13591: LD_INT 0
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
// if pos < 1 then
13597: LD_VAR 0 2
13601: PUSH
13602: LD_INT 1
13604: LESS
13605: IFFALSE 13609
// exit ;
13607: GO 13912
// if pos = 1 then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_INT 1
13616: EQUAL
13617: IFFALSE 13650
// result := Replace ( arr , pos [ 1 ] , value ) else
13619: LD_ADDR_VAR 0 4
13623: PUSH
13624: LD_VAR 0 1
13628: PPUSH
13629: LD_VAR 0 2
13633: PUSH
13634: LD_INT 1
13636: ARRAY
13637: PPUSH
13638: LD_VAR 0 3
13642: PPUSH
13643: CALL_OW 1
13647: ST_TO_ADDR
13648: GO 13912
// begin tmp := arr ;
13650: LD_ADDR_VAR 0 6
13654: PUSH
13655: LD_VAR 0 1
13659: ST_TO_ADDR
// s_arr := [ tmp ] ;
13660: LD_ADDR_VAR 0 7
13664: PUSH
13665: LD_VAR 0 6
13669: PUSH
13670: EMPTY
13671: LIST
13672: ST_TO_ADDR
// for i = 1 to pos - 1 do
13673: LD_ADDR_VAR 0 5
13677: PUSH
13678: DOUBLE
13679: LD_INT 1
13681: DEC
13682: ST_TO_ADDR
13683: LD_VAR 0 2
13687: PUSH
13688: LD_INT 1
13690: MINUS
13691: PUSH
13692: FOR_TO
13693: IFFALSE 13738
// begin tmp := tmp [ pos [ i ] ] ;
13695: LD_ADDR_VAR 0 6
13699: PUSH
13700: LD_VAR 0 6
13704: PUSH
13705: LD_VAR 0 2
13709: PUSH
13710: LD_VAR 0 5
13714: ARRAY
13715: ARRAY
13716: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13717: LD_ADDR_VAR 0 7
13721: PUSH
13722: LD_VAR 0 7
13726: PUSH
13727: LD_VAR 0 6
13731: PUSH
13732: EMPTY
13733: LIST
13734: ADD
13735: ST_TO_ADDR
// end ;
13736: GO 13692
13738: POP
13739: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13740: LD_ADDR_VAR 0 6
13744: PUSH
13745: LD_VAR 0 6
13749: PPUSH
13750: LD_VAR 0 2
13754: PUSH
13755: LD_VAR 0 2
13759: ARRAY
13760: PPUSH
13761: LD_VAR 0 3
13765: PPUSH
13766: CALL_OW 1
13770: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13771: LD_ADDR_VAR 0 7
13775: PUSH
13776: LD_VAR 0 7
13780: PPUSH
13781: LD_VAR 0 7
13785: PPUSH
13786: LD_VAR 0 6
13790: PPUSH
13791: CALL_OW 1
13795: ST_TO_ADDR
// for i = s_arr downto 2 do
13796: LD_ADDR_VAR 0 5
13800: PUSH
13801: DOUBLE
13802: LD_VAR 0 7
13806: INC
13807: ST_TO_ADDR
13808: LD_INT 2
13810: PUSH
13811: FOR_DOWNTO
13812: IFFALSE 13896
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13814: LD_ADDR_VAR 0 6
13818: PUSH
13819: LD_VAR 0 7
13823: PUSH
13824: LD_VAR 0 5
13828: PUSH
13829: LD_INT 1
13831: MINUS
13832: ARRAY
13833: PPUSH
13834: LD_VAR 0 2
13838: PUSH
13839: LD_VAR 0 5
13843: PUSH
13844: LD_INT 1
13846: MINUS
13847: ARRAY
13848: PPUSH
13849: LD_VAR 0 7
13853: PUSH
13854: LD_VAR 0 5
13858: ARRAY
13859: PPUSH
13860: CALL_OW 1
13864: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13865: LD_ADDR_VAR 0 7
13869: PUSH
13870: LD_VAR 0 7
13874: PPUSH
13875: LD_VAR 0 5
13879: PUSH
13880: LD_INT 1
13882: MINUS
13883: PPUSH
13884: LD_VAR 0 6
13888: PPUSH
13889: CALL_OW 1
13893: ST_TO_ADDR
// end ;
13894: GO 13811
13896: POP
13897: POP
// result := s_arr [ 1 ] ;
13898: LD_ADDR_VAR 0 4
13902: PUSH
13903: LD_VAR 0 7
13907: PUSH
13908: LD_INT 1
13910: ARRAY
13911: ST_TO_ADDR
// end ; end ;
13912: LD_VAR 0 4
13916: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13917: LD_INT 0
13919: PPUSH
13920: PPUSH
// if not list then
13921: LD_VAR 0 1
13925: NOT
13926: IFFALSE 13930
// exit ;
13928: GO 14021
// i := list [ pos1 ] ;
13930: LD_ADDR_VAR 0 5
13934: PUSH
13935: LD_VAR 0 1
13939: PUSH
13940: LD_VAR 0 2
13944: ARRAY
13945: ST_TO_ADDR
// if not i then
13946: LD_VAR 0 5
13950: NOT
13951: IFFALSE 13955
// exit ;
13953: GO 14021
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13955: LD_ADDR_VAR 0 1
13959: PUSH
13960: LD_VAR 0 1
13964: PPUSH
13965: LD_VAR 0 2
13969: PPUSH
13970: LD_VAR 0 1
13974: PUSH
13975: LD_VAR 0 3
13979: ARRAY
13980: PPUSH
13981: CALL_OW 1
13985: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13986: LD_ADDR_VAR 0 1
13990: PUSH
13991: LD_VAR 0 1
13995: PPUSH
13996: LD_VAR 0 3
14000: PPUSH
14001: LD_VAR 0 5
14005: PPUSH
14006: CALL_OW 1
14010: ST_TO_ADDR
// result := list ;
14011: LD_ADDR_VAR 0 4
14015: PUSH
14016: LD_VAR 0 1
14020: ST_TO_ADDR
// end ;
14021: LD_VAR 0 4
14025: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14026: LD_INT 0
14028: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14029: LD_ADDR_VAR 0 5
14033: PUSH
14034: LD_VAR 0 1
14038: PPUSH
14039: CALL_OW 250
14043: PPUSH
14044: LD_VAR 0 1
14048: PPUSH
14049: CALL_OW 251
14053: PPUSH
14054: LD_VAR 0 2
14058: PPUSH
14059: LD_VAR 0 3
14063: PPUSH
14064: LD_VAR 0 4
14068: PPUSH
14069: CALL 14079 0 5
14073: ST_TO_ADDR
// end ;
14074: LD_VAR 0 5
14078: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14079: LD_INT 0
14081: PPUSH
14082: PPUSH
14083: PPUSH
14084: PPUSH
// if not list then
14085: LD_VAR 0 3
14089: NOT
14090: IFFALSE 14094
// exit ;
14092: GO 14482
// result := [ ] ;
14094: LD_ADDR_VAR 0 6
14098: PUSH
14099: EMPTY
14100: ST_TO_ADDR
// for i in list do
14101: LD_ADDR_VAR 0 7
14105: PUSH
14106: LD_VAR 0 3
14110: PUSH
14111: FOR_IN
14112: IFFALSE 14314
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14114: LD_ADDR_VAR 0 9
14118: PUSH
14119: LD_VAR 0 7
14123: PPUSH
14124: LD_VAR 0 1
14128: PPUSH
14129: LD_VAR 0 2
14133: PPUSH
14134: CALL_OW 297
14138: ST_TO_ADDR
// if not result then
14139: LD_VAR 0 6
14143: NOT
14144: IFFALSE 14170
// result := [ [ i , tmp ] ] else
14146: LD_ADDR_VAR 0 6
14150: PUSH
14151: LD_VAR 0 7
14155: PUSH
14156: LD_VAR 0 9
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PUSH
14165: EMPTY
14166: LIST
14167: ST_TO_ADDR
14168: GO 14312
// begin if result [ result ] [ 2 ] < tmp then
14170: LD_VAR 0 6
14174: PUSH
14175: LD_VAR 0 6
14179: ARRAY
14180: PUSH
14181: LD_INT 2
14183: ARRAY
14184: PUSH
14185: LD_VAR 0 9
14189: LESS
14190: IFFALSE 14232
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14192: LD_ADDR_VAR 0 6
14196: PUSH
14197: LD_VAR 0 6
14201: PPUSH
14202: LD_VAR 0 6
14206: PUSH
14207: LD_INT 1
14209: PLUS
14210: PPUSH
14211: LD_VAR 0 7
14215: PUSH
14216: LD_VAR 0 9
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PPUSH
14225: CALL_OW 2
14229: ST_TO_ADDR
14230: GO 14312
// for j = 1 to result do
14232: LD_ADDR_VAR 0 8
14236: PUSH
14237: DOUBLE
14238: LD_INT 1
14240: DEC
14241: ST_TO_ADDR
14242: LD_VAR 0 6
14246: PUSH
14247: FOR_TO
14248: IFFALSE 14310
// begin if tmp < result [ j ] [ 2 ] then
14250: LD_VAR 0 9
14254: PUSH
14255: LD_VAR 0 6
14259: PUSH
14260: LD_VAR 0 8
14264: ARRAY
14265: PUSH
14266: LD_INT 2
14268: ARRAY
14269: LESS
14270: IFFALSE 14308
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14272: LD_ADDR_VAR 0 6
14276: PUSH
14277: LD_VAR 0 6
14281: PPUSH
14282: LD_VAR 0 8
14286: PPUSH
14287: LD_VAR 0 7
14291: PUSH
14292: LD_VAR 0 9
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PPUSH
14301: CALL_OW 2
14305: ST_TO_ADDR
// break ;
14306: GO 14310
// end ; end ;
14308: GO 14247
14310: POP
14311: POP
// end ; end ;
14312: GO 14111
14314: POP
14315: POP
// if result and not asc then
14316: LD_VAR 0 6
14320: PUSH
14321: LD_VAR 0 4
14325: NOT
14326: AND
14327: IFFALSE 14402
// begin tmp := result ;
14329: LD_ADDR_VAR 0 9
14333: PUSH
14334: LD_VAR 0 6
14338: ST_TO_ADDR
// for i = tmp downto 1 do
14339: LD_ADDR_VAR 0 7
14343: PUSH
14344: DOUBLE
14345: LD_VAR 0 9
14349: INC
14350: ST_TO_ADDR
14351: LD_INT 1
14353: PUSH
14354: FOR_DOWNTO
14355: IFFALSE 14400
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14357: LD_ADDR_VAR 0 6
14361: PUSH
14362: LD_VAR 0 6
14366: PPUSH
14367: LD_VAR 0 9
14371: PUSH
14372: LD_VAR 0 7
14376: MINUS
14377: PUSH
14378: LD_INT 1
14380: PLUS
14381: PPUSH
14382: LD_VAR 0 9
14386: PUSH
14387: LD_VAR 0 7
14391: ARRAY
14392: PPUSH
14393: CALL_OW 1
14397: ST_TO_ADDR
14398: GO 14354
14400: POP
14401: POP
// end ; tmp := [ ] ;
14402: LD_ADDR_VAR 0 9
14406: PUSH
14407: EMPTY
14408: ST_TO_ADDR
// if mode then
14409: LD_VAR 0 5
14413: IFFALSE 14482
// begin for i = 1 to result do
14415: LD_ADDR_VAR 0 7
14419: PUSH
14420: DOUBLE
14421: LD_INT 1
14423: DEC
14424: ST_TO_ADDR
14425: LD_VAR 0 6
14429: PUSH
14430: FOR_TO
14431: IFFALSE 14470
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
14433: LD_ADDR_VAR 0 9
14437: PUSH
14438: LD_VAR 0 9
14442: PPUSH
14443: LD_VAR 0 7
14447: PPUSH
14448: LD_VAR 0 6
14452: PUSH
14453: LD_VAR 0 7
14457: ARRAY
14458: PUSH
14459: LD_INT 1
14461: ARRAY
14462: PPUSH
14463: CALL_OW 1
14467: ST_TO_ADDR
14468: GO 14430
14470: POP
14471: POP
// result := tmp ;
14472: LD_ADDR_VAR 0 6
14476: PUSH
14477: LD_VAR 0 9
14481: ST_TO_ADDR
// end ; end ;
14482: LD_VAR 0 6
14486: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
14487: LD_INT 0
14489: PPUSH
14490: PPUSH
14491: PPUSH
14492: PPUSH
14493: PPUSH
14494: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
14495: LD_ADDR_VAR 0 5
14499: PUSH
14500: LD_INT 0
14502: PUSH
14503: LD_INT 0
14505: PUSH
14506: LD_INT 0
14508: PUSH
14509: EMPTY
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: ST_TO_ADDR
// if not x or not y then
14517: LD_VAR 0 2
14521: NOT
14522: PUSH
14523: LD_VAR 0 3
14527: NOT
14528: OR
14529: IFFALSE 14533
// exit ;
14531: GO 16183
// if not range then
14533: LD_VAR 0 4
14537: NOT
14538: IFFALSE 14548
// range := 10 ;
14540: LD_ADDR_VAR 0 4
14544: PUSH
14545: LD_INT 10
14547: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14548: LD_ADDR_VAR 0 8
14552: PUSH
14553: LD_INT 81
14555: PUSH
14556: LD_VAR 0 1
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: LD_INT 92
14567: PUSH
14568: LD_VAR 0 2
14572: PUSH
14573: LD_VAR 0 3
14577: PUSH
14578: LD_VAR 0 4
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 3
14591: PUSH
14592: LD_INT 21
14594: PUSH
14595: LD_INT 3
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: LIST
14610: PPUSH
14611: CALL_OW 69
14615: ST_TO_ADDR
// if not tmp then
14616: LD_VAR 0 8
14620: NOT
14621: IFFALSE 14625
// exit ;
14623: GO 16183
// for i in tmp do
14625: LD_ADDR_VAR 0 6
14629: PUSH
14630: LD_VAR 0 8
14634: PUSH
14635: FOR_IN
14636: IFFALSE 16158
// begin points := [ 0 , 0 , 0 ] ;
14638: LD_ADDR_VAR 0 9
14642: PUSH
14643: LD_INT 0
14645: PUSH
14646: LD_INT 0
14648: PUSH
14649: LD_INT 0
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: LIST
14656: ST_TO_ADDR
// bpoints := 1 ;
14657: LD_ADDR_VAR 0 10
14661: PUSH
14662: LD_INT 1
14664: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14665: LD_VAR 0 6
14669: PPUSH
14670: CALL_OW 247
14674: PUSH
14675: LD_INT 1
14677: DOUBLE
14678: EQUAL
14679: IFTRUE 14683
14681: GO 15261
14683: POP
// begin if GetClass ( i ) = 1 then
14684: LD_VAR 0 6
14688: PPUSH
14689: CALL_OW 257
14693: PUSH
14694: LD_INT 1
14696: EQUAL
14697: IFFALSE 14718
// points := [ 10 , 5 , 3 ] ;
14699: LD_ADDR_VAR 0 9
14703: PUSH
14704: LD_INT 10
14706: PUSH
14707: LD_INT 5
14709: PUSH
14710: LD_INT 3
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: LIST
14717: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14718: LD_VAR 0 6
14722: PPUSH
14723: CALL_OW 257
14727: PUSH
14728: LD_INT 2
14730: PUSH
14731: LD_INT 3
14733: PUSH
14734: LD_INT 4
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: LIST
14741: IN
14742: IFFALSE 14763
// points := [ 3 , 2 , 1 ] ;
14744: LD_ADDR_VAR 0 9
14748: PUSH
14749: LD_INT 3
14751: PUSH
14752: LD_INT 2
14754: PUSH
14755: LD_INT 1
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14763: LD_VAR 0 6
14767: PPUSH
14768: CALL_OW 257
14772: PUSH
14773: LD_INT 5
14775: EQUAL
14776: IFFALSE 14797
// points := [ 130 , 5 , 2 ] ;
14778: LD_ADDR_VAR 0 9
14782: PUSH
14783: LD_INT 130
14785: PUSH
14786: LD_INT 5
14788: PUSH
14789: LD_INT 2
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14797: LD_VAR 0 6
14801: PPUSH
14802: CALL_OW 257
14806: PUSH
14807: LD_INT 8
14809: EQUAL
14810: IFFALSE 14831
// points := [ 35 , 35 , 30 ] ;
14812: LD_ADDR_VAR 0 9
14816: PUSH
14817: LD_INT 35
14819: PUSH
14820: LD_INT 35
14822: PUSH
14823: LD_INT 30
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14831: LD_VAR 0 6
14835: PPUSH
14836: CALL_OW 257
14840: PUSH
14841: LD_INT 9
14843: EQUAL
14844: IFFALSE 14865
// points := [ 20 , 55 , 40 ] ;
14846: LD_ADDR_VAR 0 9
14850: PUSH
14851: LD_INT 20
14853: PUSH
14854: LD_INT 55
14856: PUSH
14857: LD_INT 40
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: LIST
14864: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14865: LD_VAR 0 6
14869: PPUSH
14870: CALL_OW 257
14874: PUSH
14875: LD_INT 12
14877: PUSH
14878: LD_INT 16
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: IN
14885: IFFALSE 14906
// points := [ 5 , 3 , 2 ] ;
14887: LD_ADDR_VAR 0 9
14891: PUSH
14892: LD_INT 5
14894: PUSH
14895: LD_INT 3
14897: PUSH
14898: LD_INT 2
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: LIST
14905: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14906: LD_VAR 0 6
14910: PPUSH
14911: CALL_OW 257
14915: PUSH
14916: LD_INT 17
14918: EQUAL
14919: IFFALSE 14940
// points := [ 100 , 50 , 75 ] ;
14921: LD_ADDR_VAR 0 9
14925: PUSH
14926: LD_INT 100
14928: PUSH
14929: LD_INT 50
14931: PUSH
14932: LD_INT 75
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: LIST
14939: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14940: LD_VAR 0 6
14944: PPUSH
14945: CALL_OW 257
14949: PUSH
14950: LD_INT 15
14952: EQUAL
14953: IFFALSE 14974
// points := [ 10 , 5 , 3 ] ;
14955: LD_ADDR_VAR 0 9
14959: PUSH
14960: LD_INT 10
14962: PUSH
14963: LD_INT 5
14965: PUSH
14966: LD_INT 3
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: LIST
14973: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14974: LD_VAR 0 6
14978: PPUSH
14979: CALL_OW 257
14983: PUSH
14984: LD_INT 14
14986: EQUAL
14987: IFFALSE 15008
// points := [ 10 , 0 , 0 ] ;
14989: LD_ADDR_VAR 0 9
14993: PUSH
14994: LD_INT 10
14996: PUSH
14997: LD_INT 0
14999: PUSH
15000: LD_INT 0
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15008: LD_VAR 0 6
15012: PPUSH
15013: CALL_OW 257
15017: PUSH
15018: LD_INT 11
15020: EQUAL
15021: IFFALSE 15042
// points := [ 30 , 10 , 5 ] ;
15023: LD_ADDR_VAR 0 9
15027: PUSH
15028: LD_INT 30
15030: PUSH
15031: LD_INT 10
15033: PUSH
15034: LD_INT 5
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: LIST
15041: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15042: LD_VAR 0 1
15046: PPUSH
15047: LD_INT 5
15049: PPUSH
15050: CALL_OW 321
15054: PUSH
15055: LD_INT 2
15057: EQUAL
15058: IFFALSE 15075
// bpoints := bpoints * 1.8 ;
15060: LD_ADDR_VAR 0 10
15064: PUSH
15065: LD_VAR 0 10
15069: PUSH
15070: LD_REAL  1.80000000000000E+0000
15073: MUL
15074: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15075: LD_VAR 0 6
15079: PPUSH
15080: CALL_OW 257
15084: PUSH
15085: LD_INT 1
15087: PUSH
15088: LD_INT 2
15090: PUSH
15091: LD_INT 3
15093: PUSH
15094: LD_INT 4
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: IN
15103: PUSH
15104: LD_VAR 0 1
15108: PPUSH
15109: LD_INT 51
15111: PPUSH
15112: CALL_OW 321
15116: PUSH
15117: LD_INT 2
15119: EQUAL
15120: AND
15121: IFFALSE 15138
// bpoints := bpoints * 1.2 ;
15123: LD_ADDR_VAR 0 10
15127: PUSH
15128: LD_VAR 0 10
15132: PUSH
15133: LD_REAL  1.20000000000000E+0000
15136: MUL
15137: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15138: LD_VAR 0 6
15142: PPUSH
15143: CALL_OW 257
15147: PUSH
15148: LD_INT 5
15150: PUSH
15151: LD_INT 7
15153: PUSH
15154: LD_INT 9
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: LIST
15161: IN
15162: PUSH
15163: LD_VAR 0 1
15167: PPUSH
15168: LD_INT 52
15170: PPUSH
15171: CALL_OW 321
15175: PUSH
15176: LD_INT 2
15178: EQUAL
15179: AND
15180: IFFALSE 15197
// bpoints := bpoints * 1.5 ;
15182: LD_ADDR_VAR 0 10
15186: PUSH
15187: LD_VAR 0 10
15191: PUSH
15192: LD_REAL  1.50000000000000E+0000
15195: MUL
15196: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15197: LD_VAR 0 1
15201: PPUSH
15202: LD_INT 66
15204: PPUSH
15205: CALL_OW 321
15209: PUSH
15210: LD_INT 2
15212: EQUAL
15213: IFFALSE 15230
// bpoints := bpoints * 1.1 ;
15215: LD_ADDR_VAR 0 10
15219: PUSH
15220: LD_VAR 0 10
15224: PUSH
15225: LD_REAL  1.10000000000000E+0000
15228: MUL
15229: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15230: LD_ADDR_VAR 0 10
15234: PUSH
15235: LD_VAR 0 10
15239: PUSH
15240: LD_VAR 0 6
15244: PPUSH
15245: LD_INT 1
15247: PPUSH
15248: CALL_OW 259
15252: PUSH
15253: LD_REAL  1.15000000000000E+0000
15256: MUL
15257: MUL
15258: ST_TO_ADDR
// end ; unit_vehicle :
15259: GO 16087
15261: LD_INT 2
15263: DOUBLE
15264: EQUAL
15265: IFTRUE 15269
15267: GO 16075
15269: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15270: LD_VAR 0 6
15274: PPUSH
15275: CALL_OW 264
15279: PUSH
15280: LD_INT 2
15282: PUSH
15283: LD_INT 42
15285: PUSH
15286: LD_INT 24
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: LIST
15293: IN
15294: IFFALSE 15315
// points := [ 25 , 5 , 3 ] ;
15296: LD_ADDR_VAR 0 9
15300: PUSH
15301: LD_INT 25
15303: PUSH
15304: LD_INT 5
15306: PUSH
15307: LD_INT 3
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: LIST
15314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15315: LD_VAR 0 6
15319: PPUSH
15320: CALL_OW 264
15324: PUSH
15325: LD_INT 4
15327: PUSH
15328: LD_INT 43
15330: PUSH
15331: LD_INT 25
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: LIST
15338: IN
15339: IFFALSE 15360
// points := [ 40 , 15 , 5 ] ;
15341: LD_ADDR_VAR 0 9
15345: PUSH
15346: LD_INT 40
15348: PUSH
15349: LD_INT 15
15351: PUSH
15352: LD_INT 5
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15360: LD_VAR 0 6
15364: PPUSH
15365: CALL_OW 264
15369: PUSH
15370: LD_INT 3
15372: PUSH
15373: LD_INT 23
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: IN
15380: IFFALSE 15401
// points := [ 7 , 25 , 8 ] ;
15382: LD_ADDR_VAR 0 9
15386: PUSH
15387: LD_INT 7
15389: PUSH
15390: LD_INT 25
15392: PUSH
15393: LD_INT 8
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: LIST
15400: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
15401: LD_VAR 0 6
15405: PPUSH
15406: CALL_OW 264
15410: PUSH
15411: LD_INT 5
15413: PUSH
15414: LD_INT 27
15416: PUSH
15417: LD_INT 44
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: LIST
15424: IN
15425: IFFALSE 15446
// points := [ 14 , 50 , 16 ] ;
15427: LD_ADDR_VAR 0 9
15431: PUSH
15432: LD_INT 14
15434: PUSH
15435: LD_INT 50
15437: PUSH
15438: LD_INT 16
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: LIST
15445: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
15446: LD_VAR 0 6
15450: PPUSH
15451: CALL_OW 264
15455: PUSH
15456: LD_INT 6
15458: PUSH
15459: LD_INT 46
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: IN
15466: IFFALSE 15487
// points := [ 32 , 120 , 70 ] ;
15468: LD_ADDR_VAR 0 9
15472: PUSH
15473: LD_INT 32
15475: PUSH
15476: LD_INT 120
15478: PUSH
15479: LD_INT 70
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
15487: LD_VAR 0 6
15491: PPUSH
15492: CALL_OW 264
15496: PUSH
15497: LD_INT 7
15499: PUSH
15500: LD_INT 28
15502: PUSH
15503: LD_INT 45
15505: PUSH
15506: LD_INT 92
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: IN
15515: IFFALSE 15536
// points := [ 35 , 20 , 45 ] ;
15517: LD_ADDR_VAR 0 9
15521: PUSH
15522: LD_INT 35
15524: PUSH
15525: LD_INT 20
15527: PUSH
15528: LD_INT 45
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
15536: LD_VAR 0 6
15540: PPUSH
15541: CALL_OW 264
15545: PUSH
15546: LD_INT 47
15548: PUSH
15549: EMPTY
15550: LIST
15551: IN
15552: IFFALSE 15573
// points := [ 67 , 45 , 75 ] ;
15554: LD_ADDR_VAR 0 9
15558: PUSH
15559: LD_INT 67
15561: PUSH
15562: LD_INT 45
15564: PUSH
15565: LD_INT 75
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: LIST
15572: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
15573: LD_VAR 0 6
15577: PPUSH
15578: CALL_OW 264
15582: PUSH
15583: LD_INT 26
15585: PUSH
15586: EMPTY
15587: LIST
15588: IN
15589: IFFALSE 15610
// points := [ 120 , 30 , 80 ] ;
15591: LD_ADDR_VAR 0 9
15595: PUSH
15596: LD_INT 120
15598: PUSH
15599: LD_INT 30
15601: PUSH
15602: LD_INT 80
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15610: LD_VAR 0 6
15614: PPUSH
15615: CALL_OW 264
15619: PUSH
15620: LD_INT 22
15622: PUSH
15623: EMPTY
15624: LIST
15625: IN
15626: IFFALSE 15647
// points := [ 40 , 1 , 1 ] ;
15628: LD_ADDR_VAR 0 9
15632: PUSH
15633: LD_INT 40
15635: PUSH
15636: LD_INT 1
15638: PUSH
15639: LD_INT 1
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: LIST
15646: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15647: LD_VAR 0 6
15651: PPUSH
15652: CALL_OW 264
15656: PUSH
15657: LD_INT 29
15659: PUSH
15660: EMPTY
15661: LIST
15662: IN
15663: IFFALSE 15684
// points := [ 70 , 200 , 400 ] ;
15665: LD_ADDR_VAR 0 9
15669: PUSH
15670: LD_INT 70
15672: PUSH
15673: LD_INT 200
15675: PUSH
15676: LD_INT 400
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: LIST
15683: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15684: LD_VAR 0 6
15688: PPUSH
15689: CALL_OW 264
15693: PUSH
15694: LD_INT 14
15696: PUSH
15697: LD_INT 53
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: IN
15704: IFFALSE 15725
// points := [ 40 , 10 , 20 ] ;
15706: LD_ADDR_VAR 0 9
15710: PUSH
15711: LD_INT 40
15713: PUSH
15714: LD_INT 10
15716: PUSH
15717: LD_INT 20
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: LIST
15724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15725: LD_VAR 0 6
15729: PPUSH
15730: CALL_OW 264
15734: PUSH
15735: LD_INT 9
15737: PUSH
15738: EMPTY
15739: LIST
15740: IN
15741: IFFALSE 15762
// points := [ 5 , 70 , 20 ] ;
15743: LD_ADDR_VAR 0 9
15747: PUSH
15748: LD_INT 5
15750: PUSH
15751: LD_INT 70
15753: PUSH
15754: LD_INT 20
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: LIST
15761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15762: LD_VAR 0 6
15766: PPUSH
15767: CALL_OW 264
15771: PUSH
15772: LD_INT 10
15774: PUSH
15775: EMPTY
15776: LIST
15777: IN
15778: IFFALSE 15799
// points := [ 35 , 110 , 70 ] ;
15780: LD_ADDR_VAR 0 9
15784: PUSH
15785: LD_INT 35
15787: PUSH
15788: LD_INT 110
15790: PUSH
15791: LD_INT 70
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: LIST
15798: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15799: LD_VAR 0 6
15803: PPUSH
15804: CALL_OW 265
15808: PUSH
15809: LD_INT 25
15811: EQUAL
15812: IFFALSE 15833
// points := [ 80 , 65 , 100 ] ;
15814: LD_ADDR_VAR 0 9
15818: PUSH
15819: LD_INT 80
15821: PUSH
15822: LD_INT 65
15824: PUSH
15825: LD_INT 100
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: LIST
15832: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15833: LD_VAR 0 6
15837: PPUSH
15838: CALL_OW 263
15842: PUSH
15843: LD_INT 1
15845: EQUAL
15846: IFFALSE 15881
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15848: LD_ADDR_VAR 0 10
15852: PUSH
15853: LD_VAR 0 10
15857: PUSH
15858: LD_VAR 0 6
15862: PPUSH
15863: CALL_OW 311
15867: PPUSH
15868: LD_INT 3
15870: PPUSH
15871: CALL_OW 259
15875: PUSH
15876: LD_INT 4
15878: MUL
15879: MUL
15880: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15881: LD_VAR 0 6
15885: PPUSH
15886: CALL_OW 263
15890: PUSH
15891: LD_INT 2
15893: EQUAL
15894: IFFALSE 15945
// begin j := IsControledBy ( i ) ;
15896: LD_ADDR_VAR 0 7
15900: PUSH
15901: LD_VAR 0 6
15905: PPUSH
15906: CALL_OW 312
15910: ST_TO_ADDR
// if j then
15911: LD_VAR 0 7
15915: IFFALSE 15945
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15917: LD_ADDR_VAR 0 10
15921: PUSH
15922: LD_VAR 0 10
15926: PUSH
15927: LD_VAR 0 7
15931: PPUSH
15932: LD_INT 3
15934: PPUSH
15935: CALL_OW 259
15939: PUSH
15940: LD_INT 3
15942: MUL
15943: MUL
15944: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15945: LD_VAR 0 6
15949: PPUSH
15950: CALL_OW 264
15954: PUSH
15955: LD_INT 5
15957: PUSH
15958: LD_INT 6
15960: PUSH
15961: LD_INT 46
15963: PUSH
15964: LD_INT 44
15966: PUSH
15967: LD_INT 47
15969: PUSH
15970: LD_INT 45
15972: PUSH
15973: LD_INT 28
15975: PUSH
15976: LD_INT 7
15978: PUSH
15979: LD_INT 27
15981: PUSH
15982: LD_INT 29
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: IN
15997: PUSH
15998: LD_VAR 0 1
16002: PPUSH
16003: LD_INT 52
16005: PPUSH
16006: CALL_OW 321
16010: PUSH
16011: LD_INT 2
16013: EQUAL
16014: AND
16015: IFFALSE 16032
// bpoints := bpoints * 1.2 ;
16017: LD_ADDR_VAR 0 10
16021: PUSH
16022: LD_VAR 0 10
16026: PUSH
16027: LD_REAL  1.20000000000000E+0000
16030: MUL
16031: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16032: LD_VAR 0 6
16036: PPUSH
16037: CALL_OW 264
16041: PUSH
16042: LD_INT 6
16044: PUSH
16045: LD_INT 46
16047: PUSH
16048: LD_INT 47
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: LIST
16055: IN
16056: IFFALSE 16073
// bpoints := bpoints * 1.2 ;
16058: LD_ADDR_VAR 0 10
16062: PUSH
16063: LD_VAR 0 10
16067: PUSH
16068: LD_REAL  1.20000000000000E+0000
16071: MUL
16072: ST_TO_ADDR
// end ; unit_building :
16073: GO 16087
16075: LD_INT 3
16077: DOUBLE
16078: EQUAL
16079: IFTRUE 16083
16081: GO 16086
16083: POP
// ; end ;
16084: GO 16087
16086: POP
// for j = 1 to 3 do
16087: LD_ADDR_VAR 0 7
16091: PUSH
16092: DOUBLE
16093: LD_INT 1
16095: DEC
16096: ST_TO_ADDR
16097: LD_INT 3
16099: PUSH
16100: FOR_TO
16101: IFFALSE 16154
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16103: LD_ADDR_VAR 0 5
16107: PUSH
16108: LD_VAR 0 5
16112: PPUSH
16113: LD_VAR 0 7
16117: PPUSH
16118: LD_VAR 0 5
16122: PUSH
16123: LD_VAR 0 7
16127: ARRAY
16128: PUSH
16129: LD_VAR 0 9
16133: PUSH
16134: LD_VAR 0 7
16138: ARRAY
16139: PUSH
16140: LD_VAR 0 10
16144: MUL
16145: PLUS
16146: PPUSH
16147: CALL_OW 1
16151: ST_TO_ADDR
16152: GO 16100
16154: POP
16155: POP
// end ;
16156: GO 14635
16158: POP
16159: POP
// result := Replace ( result , 4 , tmp ) ;
16160: LD_ADDR_VAR 0 5
16164: PUSH
16165: LD_VAR 0 5
16169: PPUSH
16170: LD_INT 4
16172: PPUSH
16173: LD_VAR 0 8
16177: PPUSH
16178: CALL_OW 1
16182: ST_TO_ADDR
// end ;
16183: LD_VAR 0 5
16187: RET
// export function DangerAtRange ( unit , range ) ; begin
16188: LD_INT 0
16190: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16191: LD_ADDR_VAR 0 3
16195: PUSH
16196: LD_VAR 0 1
16200: PPUSH
16201: CALL_OW 255
16205: PPUSH
16206: LD_VAR 0 1
16210: PPUSH
16211: CALL_OW 250
16215: PPUSH
16216: LD_VAR 0 1
16220: PPUSH
16221: CALL_OW 251
16225: PPUSH
16226: LD_VAR 0 2
16230: PPUSH
16231: CALL 14487 0 4
16235: ST_TO_ADDR
// end ;
16236: LD_VAR 0 3
16240: RET
// export function DangerInArea ( side , area ) ; begin
16241: LD_INT 0
16243: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16244: LD_ADDR_VAR 0 3
16248: PUSH
16249: LD_VAR 0 2
16253: PPUSH
16254: LD_INT 81
16256: PUSH
16257: LD_VAR 0 1
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PPUSH
16266: CALL_OW 70
16270: ST_TO_ADDR
// end ;
16271: LD_VAR 0 3
16275: RET
// export function IsExtension ( b ) ; begin
16276: LD_INT 0
16278: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16279: LD_ADDR_VAR 0 2
16283: PUSH
16284: LD_VAR 0 1
16288: PUSH
16289: LD_INT 23
16291: PUSH
16292: LD_INT 20
16294: PUSH
16295: LD_INT 22
16297: PUSH
16298: LD_INT 17
16300: PUSH
16301: LD_INT 24
16303: PUSH
16304: LD_INT 21
16306: PUSH
16307: LD_INT 19
16309: PUSH
16310: LD_INT 16
16312: PUSH
16313: LD_INT 25
16315: PUSH
16316: LD_INT 18
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: IN
16331: ST_TO_ADDR
// end ;
16332: LD_VAR 0 2
16336: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
16337: LD_INT 0
16339: PPUSH
16340: PPUSH
16341: PPUSH
// result := [ ] ;
16342: LD_ADDR_VAR 0 4
16346: PUSH
16347: EMPTY
16348: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16349: LD_ADDR_VAR 0 5
16353: PUSH
16354: LD_VAR 0 2
16358: PPUSH
16359: LD_INT 21
16361: PUSH
16362: LD_INT 3
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PPUSH
16369: CALL_OW 70
16373: ST_TO_ADDR
// if not tmp then
16374: LD_VAR 0 5
16378: NOT
16379: IFFALSE 16383
// exit ;
16381: GO 16447
// if checkLink then
16383: LD_VAR 0 3
16387: IFFALSE 16437
// begin for i in tmp do
16389: LD_ADDR_VAR 0 6
16393: PUSH
16394: LD_VAR 0 5
16398: PUSH
16399: FOR_IN
16400: IFFALSE 16435
// if GetBase ( i ) <> base then
16402: LD_VAR 0 6
16406: PPUSH
16407: CALL_OW 274
16411: PUSH
16412: LD_VAR 0 1
16416: NONEQUAL
16417: IFFALSE 16433
// ComLinkToBase ( base , i ) ;
16419: LD_VAR 0 1
16423: PPUSH
16424: LD_VAR 0 6
16428: PPUSH
16429: CALL_OW 169
16433: GO 16399
16435: POP
16436: POP
// end ; result := tmp ;
16437: LD_ADDR_VAR 0 4
16441: PUSH
16442: LD_VAR 0 5
16446: ST_TO_ADDR
// end ;
16447: LD_VAR 0 4
16451: RET
// export function ComComplete ( units , b ) ; var i ; begin
16452: LD_INT 0
16454: PPUSH
16455: PPUSH
// if not units then
16456: LD_VAR 0 1
16460: NOT
16461: IFFALSE 16465
// exit ;
16463: GO 16555
// for i in units do
16465: LD_ADDR_VAR 0 4
16469: PUSH
16470: LD_VAR 0 1
16474: PUSH
16475: FOR_IN
16476: IFFALSE 16553
// if BuildingStatus ( b ) = bs_build then
16478: LD_VAR 0 2
16482: PPUSH
16483: CALL_OW 461
16487: PUSH
16488: LD_INT 1
16490: EQUAL
16491: IFFALSE 16551
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
16493: LD_VAR 0 4
16497: PPUSH
16498: LD_STRING h
16500: PUSH
16501: LD_VAR 0 2
16505: PPUSH
16506: CALL_OW 250
16510: PUSH
16511: LD_VAR 0 2
16515: PPUSH
16516: CALL_OW 251
16520: PUSH
16521: LD_VAR 0 2
16525: PUSH
16526: LD_INT 0
16528: PUSH
16529: LD_INT 0
16531: PUSH
16532: LD_INT 0
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: PPUSH
16547: CALL_OW 446
16551: GO 16475
16553: POP
16554: POP
// end ;
16555: LD_VAR 0 3
16559: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
16560: LD_INT 0
16562: PPUSH
16563: PPUSH
16564: PPUSH
16565: PPUSH
16566: PPUSH
16567: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
16568: LD_VAR 0 1
16572: NOT
16573: PUSH
16574: LD_VAR 0 1
16578: PPUSH
16579: CALL_OW 263
16583: PUSH
16584: LD_INT 2
16586: NONEQUAL
16587: OR
16588: IFFALSE 16592
// exit ;
16590: GO 16908
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16592: LD_ADDR_VAR 0 6
16596: PUSH
16597: LD_INT 22
16599: PUSH
16600: LD_VAR 0 1
16604: PPUSH
16605: CALL_OW 255
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 2
16616: PUSH
16617: LD_INT 30
16619: PUSH
16620: LD_INT 36
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 34
16629: PUSH
16630: LD_INT 31
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: LIST
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PPUSH
16646: CALL_OW 69
16650: ST_TO_ADDR
// if not tmp then
16651: LD_VAR 0 6
16655: NOT
16656: IFFALSE 16660
// exit ;
16658: GO 16908
// result := [ ] ;
16660: LD_ADDR_VAR 0 2
16664: PUSH
16665: EMPTY
16666: ST_TO_ADDR
// for i in tmp do
16667: LD_ADDR_VAR 0 3
16671: PUSH
16672: LD_VAR 0 6
16676: PUSH
16677: FOR_IN
16678: IFFALSE 16749
// begin t := UnitsInside ( i ) ;
16680: LD_ADDR_VAR 0 4
16684: PUSH
16685: LD_VAR 0 3
16689: PPUSH
16690: CALL_OW 313
16694: ST_TO_ADDR
// if t then
16695: LD_VAR 0 4
16699: IFFALSE 16747
// for j in t do
16701: LD_ADDR_VAR 0 7
16705: PUSH
16706: LD_VAR 0 4
16710: PUSH
16711: FOR_IN
16712: IFFALSE 16745
// result := Replace ( result , result + 1 , j ) ;
16714: LD_ADDR_VAR 0 2
16718: PUSH
16719: LD_VAR 0 2
16723: PPUSH
16724: LD_VAR 0 2
16728: PUSH
16729: LD_INT 1
16731: PLUS
16732: PPUSH
16733: LD_VAR 0 7
16737: PPUSH
16738: CALL_OW 1
16742: ST_TO_ADDR
16743: GO 16711
16745: POP
16746: POP
// end ;
16747: GO 16677
16749: POP
16750: POP
// if not result then
16751: LD_VAR 0 2
16755: NOT
16756: IFFALSE 16760
// exit ;
16758: GO 16908
// mech := result [ 1 ] ;
16760: LD_ADDR_VAR 0 5
16764: PUSH
16765: LD_VAR 0 2
16769: PUSH
16770: LD_INT 1
16772: ARRAY
16773: ST_TO_ADDR
// if result > 1 then
16774: LD_VAR 0 2
16778: PUSH
16779: LD_INT 1
16781: GREATER
16782: IFFALSE 16894
// begin for i = 2 to result do
16784: LD_ADDR_VAR 0 3
16788: PUSH
16789: DOUBLE
16790: LD_INT 2
16792: DEC
16793: ST_TO_ADDR
16794: LD_VAR 0 2
16798: PUSH
16799: FOR_TO
16800: IFFALSE 16892
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16802: LD_ADDR_VAR 0 4
16806: PUSH
16807: LD_VAR 0 2
16811: PUSH
16812: LD_VAR 0 3
16816: ARRAY
16817: PPUSH
16818: LD_INT 3
16820: PPUSH
16821: CALL_OW 259
16825: PUSH
16826: LD_VAR 0 2
16830: PUSH
16831: LD_VAR 0 3
16835: ARRAY
16836: PPUSH
16837: CALL_OW 432
16841: MINUS
16842: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16843: LD_VAR 0 4
16847: PUSH
16848: LD_VAR 0 5
16852: PPUSH
16853: LD_INT 3
16855: PPUSH
16856: CALL_OW 259
16860: PUSH
16861: LD_VAR 0 5
16865: PPUSH
16866: CALL_OW 432
16870: MINUS
16871: GREATEREQUAL
16872: IFFALSE 16890
// mech := result [ i ] ;
16874: LD_ADDR_VAR 0 5
16878: PUSH
16879: LD_VAR 0 2
16883: PUSH
16884: LD_VAR 0 3
16888: ARRAY
16889: ST_TO_ADDR
// end ;
16890: GO 16799
16892: POP
16893: POP
// end ; ComLinkTo ( vehicle , mech ) ;
16894: LD_VAR 0 1
16898: PPUSH
16899: LD_VAR 0 5
16903: PPUSH
16904: CALL_OW 135
// end ;
16908: LD_VAR 0 2
16912: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16913: LD_INT 0
16915: PPUSH
16916: PPUSH
16917: PPUSH
16918: PPUSH
16919: PPUSH
16920: PPUSH
16921: PPUSH
16922: PPUSH
16923: PPUSH
16924: PPUSH
16925: PPUSH
16926: PPUSH
16927: PPUSH
// result := [ ] ;
16928: LD_ADDR_VAR 0 7
16932: PUSH
16933: EMPTY
16934: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16935: LD_VAR 0 1
16939: PPUSH
16940: CALL_OW 266
16944: PUSH
16945: LD_INT 0
16947: PUSH
16948: LD_INT 1
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: IN
16955: NOT
16956: IFFALSE 16960
// exit ;
16958: GO 18594
// if name then
16960: LD_VAR 0 3
16964: IFFALSE 16980
// SetBName ( base_dep , name ) ;
16966: LD_VAR 0 1
16970: PPUSH
16971: LD_VAR 0 3
16975: PPUSH
16976: CALL_OW 500
// base := GetBase ( base_dep ) ;
16980: LD_ADDR_VAR 0 15
16984: PUSH
16985: LD_VAR 0 1
16989: PPUSH
16990: CALL_OW 274
16994: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16995: LD_ADDR_VAR 0 16
16999: PUSH
17000: LD_VAR 0 1
17004: PPUSH
17005: CALL_OW 255
17009: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17010: LD_ADDR_VAR 0 17
17014: PUSH
17015: LD_VAR 0 1
17019: PPUSH
17020: CALL_OW 248
17024: ST_TO_ADDR
// if sources then
17025: LD_VAR 0 5
17029: IFFALSE 17076
// for i = 1 to 3 do
17031: LD_ADDR_VAR 0 8
17035: PUSH
17036: DOUBLE
17037: LD_INT 1
17039: DEC
17040: ST_TO_ADDR
17041: LD_INT 3
17043: PUSH
17044: FOR_TO
17045: IFFALSE 17074
// AddResourceType ( base , i , sources [ i ] ) ;
17047: LD_VAR 0 15
17051: PPUSH
17052: LD_VAR 0 8
17056: PPUSH
17057: LD_VAR 0 5
17061: PUSH
17062: LD_VAR 0 8
17066: ARRAY
17067: PPUSH
17068: CALL_OW 276
17072: GO 17044
17074: POP
17075: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17076: LD_ADDR_VAR 0 18
17080: PUSH
17081: LD_VAR 0 15
17085: PPUSH
17086: LD_VAR 0 2
17090: PPUSH
17091: LD_INT 1
17093: PPUSH
17094: CALL 16337 0 3
17098: ST_TO_ADDR
// InitHc ;
17099: CALL_OW 19
// InitUc ;
17103: CALL_OW 18
// uc_side := side ;
17107: LD_ADDR_OWVAR 20
17111: PUSH
17112: LD_VAR 0 16
17116: ST_TO_ADDR
// uc_nation := nation ;
17117: LD_ADDR_OWVAR 21
17121: PUSH
17122: LD_VAR 0 17
17126: ST_TO_ADDR
// if buildings then
17127: LD_VAR 0 18
17131: IFFALSE 18453
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17133: LD_ADDR_VAR 0 19
17137: PUSH
17138: LD_VAR 0 18
17142: PPUSH
17143: LD_INT 2
17145: PUSH
17146: LD_INT 30
17148: PUSH
17149: LD_INT 29
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 30
17158: PUSH
17159: LD_INT 30
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: LIST
17170: PPUSH
17171: CALL_OW 72
17175: ST_TO_ADDR
// if tmp then
17176: LD_VAR 0 19
17180: IFFALSE 17228
// for i in tmp do
17182: LD_ADDR_VAR 0 8
17186: PUSH
17187: LD_VAR 0 19
17191: PUSH
17192: FOR_IN
17193: IFFALSE 17226
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17195: LD_VAR 0 8
17199: PPUSH
17200: CALL_OW 250
17204: PPUSH
17205: LD_VAR 0 8
17209: PPUSH
17210: CALL_OW 251
17214: PPUSH
17215: LD_VAR 0 16
17219: PPUSH
17220: CALL_OW 441
17224: GO 17192
17226: POP
17227: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17228: LD_VAR 0 18
17232: PPUSH
17233: LD_INT 2
17235: PUSH
17236: LD_INT 30
17238: PUSH
17239: LD_INT 32
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: LD_INT 30
17248: PUSH
17249: LD_INT 33
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: LIST
17260: PPUSH
17261: CALL_OW 72
17265: IFFALSE 17353
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17267: LD_ADDR_VAR 0 8
17271: PUSH
17272: LD_VAR 0 18
17276: PPUSH
17277: LD_INT 2
17279: PUSH
17280: LD_INT 30
17282: PUSH
17283: LD_INT 32
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 30
17292: PUSH
17293: LD_INT 33
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: LIST
17304: PPUSH
17305: CALL_OW 72
17309: PUSH
17310: FOR_IN
17311: IFFALSE 17351
// begin if not GetBWeapon ( i ) then
17313: LD_VAR 0 8
17317: PPUSH
17318: CALL_OW 269
17322: NOT
17323: IFFALSE 17349
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17325: LD_VAR 0 8
17329: PPUSH
17330: LD_VAR 0 8
17334: PPUSH
17335: LD_VAR 0 2
17339: PPUSH
17340: CALL 18599 0 2
17344: PPUSH
17345: CALL_OW 431
// end ;
17349: GO 17310
17351: POP
17352: POP
// end ; for i = 1 to personel do
17353: LD_ADDR_VAR 0 8
17357: PUSH
17358: DOUBLE
17359: LD_INT 1
17361: DEC
17362: ST_TO_ADDR
17363: LD_VAR 0 6
17367: PUSH
17368: FOR_TO
17369: IFFALSE 18433
// begin if i > 4 then
17371: LD_VAR 0 8
17375: PUSH
17376: LD_INT 4
17378: GREATER
17379: IFFALSE 17383
// break ;
17381: GO 18433
// case i of 1 :
17383: LD_VAR 0 8
17387: PUSH
17388: LD_INT 1
17390: DOUBLE
17391: EQUAL
17392: IFTRUE 17396
17394: GO 17476
17396: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
17397: LD_ADDR_VAR 0 12
17401: PUSH
17402: LD_VAR 0 18
17406: PPUSH
17407: LD_INT 22
17409: PUSH
17410: LD_VAR 0 16
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 58
17421: PUSH
17422: EMPTY
17423: LIST
17424: PUSH
17425: LD_INT 2
17427: PUSH
17428: LD_INT 30
17430: PUSH
17431: LD_INT 32
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PUSH
17438: LD_INT 30
17440: PUSH
17441: LD_INT 4
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 30
17450: PUSH
17451: LD_INT 5
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: LIST
17468: PPUSH
17469: CALL_OW 72
17473: ST_TO_ADDR
17474: GO 17698
17476: LD_INT 2
17478: DOUBLE
17479: EQUAL
17480: IFTRUE 17484
17482: GO 17546
17484: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
17485: LD_ADDR_VAR 0 12
17489: PUSH
17490: LD_VAR 0 18
17494: PPUSH
17495: LD_INT 22
17497: PUSH
17498: LD_VAR 0 16
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 2
17509: PUSH
17510: LD_INT 30
17512: PUSH
17513: LD_INT 0
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 30
17522: PUSH
17523: LD_INT 1
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: LIST
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PPUSH
17539: CALL_OW 72
17543: ST_TO_ADDR
17544: GO 17698
17546: LD_INT 3
17548: DOUBLE
17549: EQUAL
17550: IFTRUE 17554
17552: GO 17616
17554: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
17555: LD_ADDR_VAR 0 12
17559: PUSH
17560: LD_VAR 0 18
17564: PPUSH
17565: LD_INT 22
17567: PUSH
17568: LD_VAR 0 16
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 2
17579: PUSH
17580: LD_INT 30
17582: PUSH
17583: LD_INT 2
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 30
17592: PUSH
17593: LD_INT 3
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PPUSH
17609: CALL_OW 72
17613: ST_TO_ADDR
17614: GO 17698
17616: LD_INT 4
17618: DOUBLE
17619: EQUAL
17620: IFTRUE 17624
17622: GO 17697
17624: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
17625: LD_ADDR_VAR 0 12
17629: PUSH
17630: LD_VAR 0 18
17634: PPUSH
17635: LD_INT 22
17637: PUSH
17638: LD_VAR 0 16
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PUSH
17647: LD_INT 2
17649: PUSH
17650: LD_INT 30
17652: PUSH
17653: LD_INT 6
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 30
17662: PUSH
17663: LD_INT 7
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 30
17672: PUSH
17673: LD_INT 8
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PPUSH
17690: CALL_OW 72
17694: ST_TO_ADDR
17695: GO 17698
17697: POP
// if i = 1 then
17698: LD_VAR 0 8
17702: PUSH
17703: LD_INT 1
17705: EQUAL
17706: IFFALSE 17817
// begin tmp := [ ] ;
17708: LD_ADDR_VAR 0 19
17712: PUSH
17713: EMPTY
17714: ST_TO_ADDR
// for j in f do
17715: LD_ADDR_VAR 0 9
17719: PUSH
17720: LD_VAR 0 12
17724: PUSH
17725: FOR_IN
17726: IFFALSE 17799
// if GetBType ( j ) = b_bunker then
17728: LD_VAR 0 9
17732: PPUSH
17733: CALL_OW 266
17737: PUSH
17738: LD_INT 32
17740: EQUAL
17741: IFFALSE 17768
// tmp := Insert ( tmp , 1 , j ) else
17743: LD_ADDR_VAR 0 19
17747: PUSH
17748: LD_VAR 0 19
17752: PPUSH
17753: LD_INT 1
17755: PPUSH
17756: LD_VAR 0 9
17760: PPUSH
17761: CALL_OW 2
17765: ST_TO_ADDR
17766: GO 17797
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17768: LD_ADDR_VAR 0 19
17772: PUSH
17773: LD_VAR 0 19
17777: PPUSH
17778: LD_VAR 0 19
17782: PUSH
17783: LD_INT 1
17785: PLUS
17786: PPUSH
17787: LD_VAR 0 9
17791: PPUSH
17792: CALL_OW 2
17796: ST_TO_ADDR
17797: GO 17725
17799: POP
17800: POP
// if tmp then
17801: LD_VAR 0 19
17805: IFFALSE 17817
// f := tmp ;
17807: LD_ADDR_VAR 0 12
17811: PUSH
17812: LD_VAR 0 19
17816: ST_TO_ADDR
// end ; x := personel [ i ] ;
17817: LD_ADDR_VAR 0 13
17821: PUSH
17822: LD_VAR 0 6
17826: PUSH
17827: LD_VAR 0 8
17831: ARRAY
17832: ST_TO_ADDR
// if x = - 1 then
17833: LD_VAR 0 13
17837: PUSH
17838: LD_INT 1
17840: NEG
17841: EQUAL
17842: IFFALSE 18051
// begin for j in f do
17844: LD_ADDR_VAR 0 9
17848: PUSH
17849: LD_VAR 0 12
17853: PUSH
17854: FOR_IN
17855: IFFALSE 18047
// repeat InitHc ;
17857: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17861: LD_VAR 0 9
17865: PPUSH
17866: CALL_OW 266
17870: PUSH
17871: LD_INT 5
17873: EQUAL
17874: IFFALSE 17944
// begin if UnitsInside ( j ) < 3 then
17876: LD_VAR 0 9
17880: PPUSH
17881: CALL_OW 313
17885: PUSH
17886: LD_INT 3
17888: LESS
17889: IFFALSE 17925
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17891: LD_INT 0
17893: PPUSH
17894: LD_INT 5
17896: PUSH
17897: LD_INT 8
17899: PUSH
17900: LD_INT 9
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: LIST
17907: PUSH
17908: LD_VAR 0 17
17912: ARRAY
17913: PPUSH
17914: LD_VAR 0 4
17918: PPUSH
17919: CALL_OW 380
17923: GO 17942
// PrepareHuman ( false , i , skill ) ;
17925: LD_INT 0
17927: PPUSH
17928: LD_VAR 0 8
17932: PPUSH
17933: LD_VAR 0 4
17937: PPUSH
17938: CALL_OW 380
// end else
17942: GO 17961
// PrepareHuman ( false , i , skill ) ;
17944: LD_INT 0
17946: PPUSH
17947: LD_VAR 0 8
17951: PPUSH
17952: LD_VAR 0 4
17956: PPUSH
17957: CALL_OW 380
// un := CreateHuman ;
17961: LD_ADDR_VAR 0 14
17965: PUSH
17966: CALL_OW 44
17970: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17971: LD_ADDR_VAR 0 7
17975: PUSH
17976: LD_VAR 0 7
17980: PPUSH
17981: LD_INT 1
17983: PPUSH
17984: LD_VAR 0 14
17988: PPUSH
17989: CALL_OW 2
17993: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17994: LD_VAR 0 14
17998: PPUSH
17999: LD_VAR 0 9
18003: PPUSH
18004: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18008: LD_VAR 0 9
18012: PPUSH
18013: CALL_OW 313
18017: PUSH
18018: LD_INT 6
18020: EQUAL
18021: PUSH
18022: LD_VAR 0 9
18026: PPUSH
18027: CALL_OW 266
18031: PUSH
18032: LD_INT 32
18034: PUSH
18035: LD_INT 31
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: IN
18042: OR
18043: IFFALSE 17857
18045: GO 17854
18047: POP
18048: POP
// end else
18049: GO 18431
// for j = 1 to x do
18051: LD_ADDR_VAR 0 9
18055: PUSH
18056: DOUBLE
18057: LD_INT 1
18059: DEC
18060: ST_TO_ADDR
18061: LD_VAR 0 13
18065: PUSH
18066: FOR_TO
18067: IFFALSE 18429
// begin InitHc ;
18069: CALL_OW 19
// if not f then
18073: LD_VAR 0 12
18077: NOT
18078: IFFALSE 18167
// begin PrepareHuman ( false , i , skill ) ;
18080: LD_INT 0
18082: PPUSH
18083: LD_VAR 0 8
18087: PPUSH
18088: LD_VAR 0 4
18092: PPUSH
18093: CALL_OW 380
// un := CreateHuman ;
18097: LD_ADDR_VAR 0 14
18101: PUSH
18102: CALL_OW 44
18106: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18107: LD_ADDR_VAR 0 7
18111: PUSH
18112: LD_VAR 0 7
18116: PPUSH
18117: LD_INT 1
18119: PPUSH
18120: LD_VAR 0 14
18124: PPUSH
18125: CALL_OW 2
18129: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18130: LD_VAR 0 14
18134: PPUSH
18135: LD_VAR 0 1
18139: PPUSH
18140: CALL_OW 250
18144: PPUSH
18145: LD_VAR 0 1
18149: PPUSH
18150: CALL_OW 251
18154: PPUSH
18155: LD_INT 10
18157: PPUSH
18158: LD_INT 0
18160: PPUSH
18161: CALL_OW 50
// continue ;
18165: GO 18066
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18167: LD_VAR 0 12
18171: PUSH
18172: LD_INT 1
18174: ARRAY
18175: PPUSH
18176: CALL_OW 313
18180: PUSH
18181: LD_VAR 0 12
18185: PUSH
18186: LD_INT 1
18188: ARRAY
18189: PPUSH
18190: CALL_OW 266
18194: PUSH
18195: LD_INT 32
18197: PUSH
18198: LD_INT 31
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: IN
18205: AND
18206: PUSH
18207: LD_VAR 0 12
18211: PUSH
18212: LD_INT 1
18214: ARRAY
18215: PPUSH
18216: CALL_OW 313
18220: PUSH
18221: LD_INT 6
18223: EQUAL
18224: OR
18225: IFFALSE 18245
// f := Delete ( f , 1 ) ;
18227: LD_ADDR_VAR 0 12
18231: PUSH
18232: LD_VAR 0 12
18236: PPUSH
18237: LD_INT 1
18239: PPUSH
18240: CALL_OW 3
18244: ST_TO_ADDR
// if not f then
18245: LD_VAR 0 12
18249: NOT
18250: IFFALSE 18268
// begin x := x + 2 ;
18252: LD_ADDR_VAR 0 13
18256: PUSH
18257: LD_VAR 0 13
18261: PUSH
18262: LD_INT 2
18264: PLUS
18265: ST_TO_ADDR
// continue ;
18266: GO 18066
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18268: LD_VAR 0 12
18272: PUSH
18273: LD_INT 1
18275: ARRAY
18276: PPUSH
18277: CALL_OW 266
18281: PUSH
18282: LD_INT 5
18284: EQUAL
18285: IFFALSE 18359
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18287: LD_VAR 0 12
18291: PUSH
18292: LD_INT 1
18294: ARRAY
18295: PPUSH
18296: CALL_OW 313
18300: PUSH
18301: LD_INT 3
18303: LESS
18304: IFFALSE 18340
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18306: LD_INT 0
18308: PPUSH
18309: LD_INT 5
18311: PUSH
18312: LD_INT 8
18314: PUSH
18315: LD_INT 9
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: LIST
18322: PUSH
18323: LD_VAR 0 17
18327: ARRAY
18328: PPUSH
18329: LD_VAR 0 4
18333: PPUSH
18334: CALL_OW 380
18338: GO 18357
// PrepareHuman ( false , i , skill ) ;
18340: LD_INT 0
18342: PPUSH
18343: LD_VAR 0 8
18347: PPUSH
18348: LD_VAR 0 4
18352: PPUSH
18353: CALL_OW 380
// end else
18357: GO 18376
// PrepareHuman ( false , i , skill ) ;
18359: LD_INT 0
18361: PPUSH
18362: LD_VAR 0 8
18366: PPUSH
18367: LD_VAR 0 4
18371: PPUSH
18372: CALL_OW 380
// un := CreateHuman ;
18376: LD_ADDR_VAR 0 14
18380: PUSH
18381: CALL_OW 44
18385: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18386: LD_ADDR_VAR 0 7
18390: PUSH
18391: LD_VAR 0 7
18395: PPUSH
18396: LD_INT 1
18398: PPUSH
18399: LD_VAR 0 14
18403: PPUSH
18404: CALL_OW 2
18408: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
18409: LD_VAR 0 14
18413: PPUSH
18414: LD_VAR 0 12
18418: PUSH
18419: LD_INT 1
18421: ARRAY
18422: PPUSH
18423: CALL_OW 52
// end ;
18427: GO 18066
18429: POP
18430: POP
// end ;
18431: GO 17368
18433: POP
18434: POP
// result := result ^ buildings ;
18435: LD_ADDR_VAR 0 7
18439: PUSH
18440: LD_VAR 0 7
18444: PUSH
18445: LD_VAR 0 18
18449: ADD
18450: ST_TO_ADDR
// end else
18451: GO 18594
// begin for i = 1 to personel do
18453: LD_ADDR_VAR 0 8
18457: PUSH
18458: DOUBLE
18459: LD_INT 1
18461: DEC
18462: ST_TO_ADDR
18463: LD_VAR 0 6
18467: PUSH
18468: FOR_TO
18469: IFFALSE 18592
// begin if i > 4 then
18471: LD_VAR 0 8
18475: PUSH
18476: LD_INT 4
18478: GREATER
18479: IFFALSE 18483
// break ;
18481: GO 18592
// x := personel [ i ] ;
18483: LD_ADDR_VAR 0 13
18487: PUSH
18488: LD_VAR 0 6
18492: PUSH
18493: LD_VAR 0 8
18497: ARRAY
18498: ST_TO_ADDR
// if x = - 1 then
18499: LD_VAR 0 13
18503: PUSH
18504: LD_INT 1
18506: NEG
18507: EQUAL
18508: IFFALSE 18512
// continue ;
18510: GO 18468
// PrepareHuman ( false , i , skill ) ;
18512: LD_INT 0
18514: PPUSH
18515: LD_VAR 0 8
18519: PPUSH
18520: LD_VAR 0 4
18524: PPUSH
18525: CALL_OW 380
// un := CreateHuman ;
18529: LD_ADDR_VAR 0 14
18533: PUSH
18534: CALL_OW 44
18538: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18539: LD_VAR 0 14
18543: PPUSH
18544: LD_VAR 0 1
18548: PPUSH
18549: CALL_OW 250
18553: PPUSH
18554: LD_VAR 0 1
18558: PPUSH
18559: CALL_OW 251
18563: PPUSH
18564: LD_INT 10
18566: PPUSH
18567: LD_INT 0
18569: PPUSH
18570: CALL_OW 50
// result := result ^ un ;
18574: LD_ADDR_VAR 0 7
18578: PUSH
18579: LD_VAR 0 7
18583: PUSH
18584: LD_VAR 0 14
18588: ADD
18589: ST_TO_ADDR
// end ;
18590: GO 18468
18592: POP
18593: POP
// end ; end ;
18594: LD_VAR 0 7
18598: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18599: LD_INT 0
18601: PPUSH
18602: PPUSH
18603: PPUSH
18604: PPUSH
18605: PPUSH
18606: PPUSH
18607: PPUSH
18608: PPUSH
18609: PPUSH
18610: PPUSH
18611: PPUSH
18612: PPUSH
18613: PPUSH
18614: PPUSH
18615: PPUSH
18616: PPUSH
// result := false ;
18617: LD_ADDR_VAR 0 3
18621: PUSH
18622: LD_INT 0
18624: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
18625: LD_VAR 0 1
18629: NOT
18630: PUSH
18631: LD_VAR 0 1
18635: PPUSH
18636: CALL_OW 266
18640: PUSH
18641: LD_INT 32
18643: PUSH
18644: LD_INT 33
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: IN
18651: NOT
18652: OR
18653: IFFALSE 18657
// exit ;
18655: GO 19766
// nat := GetNation ( tower ) ;
18657: LD_ADDR_VAR 0 12
18661: PUSH
18662: LD_VAR 0 1
18666: PPUSH
18667: CALL_OW 248
18671: ST_TO_ADDR
// side := GetSide ( tower ) ;
18672: LD_ADDR_VAR 0 16
18676: PUSH
18677: LD_VAR 0 1
18681: PPUSH
18682: CALL_OW 255
18686: ST_TO_ADDR
// x := GetX ( tower ) ;
18687: LD_ADDR_VAR 0 10
18691: PUSH
18692: LD_VAR 0 1
18696: PPUSH
18697: CALL_OW 250
18701: ST_TO_ADDR
// y := GetY ( tower ) ;
18702: LD_ADDR_VAR 0 11
18706: PUSH
18707: LD_VAR 0 1
18711: PPUSH
18712: CALL_OW 251
18716: ST_TO_ADDR
// if not x or not y then
18717: LD_VAR 0 10
18721: NOT
18722: PUSH
18723: LD_VAR 0 11
18727: NOT
18728: OR
18729: IFFALSE 18733
// exit ;
18731: GO 19766
// weapon := 0 ;
18733: LD_ADDR_VAR 0 18
18737: PUSH
18738: LD_INT 0
18740: ST_TO_ADDR
// fac_list := [ ] ;
18741: LD_ADDR_VAR 0 17
18745: PUSH
18746: EMPTY
18747: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18748: LD_ADDR_VAR 0 6
18752: PUSH
18753: LD_VAR 0 1
18757: PPUSH
18758: CALL_OW 274
18762: PPUSH
18763: LD_VAR 0 2
18767: PPUSH
18768: LD_INT 0
18770: PPUSH
18771: CALL 16337 0 3
18775: PPUSH
18776: LD_INT 30
18778: PUSH
18779: LD_INT 3
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PPUSH
18786: CALL_OW 72
18790: ST_TO_ADDR
// if not factories then
18791: LD_VAR 0 6
18795: NOT
18796: IFFALSE 18800
// exit ;
18798: GO 19766
// for i in factories do
18800: LD_ADDR_VAR 0 8
18804: PUSH
18805: LD_VAR 0 6
18809: PUSH
18810: FOR_IN
18811: IFFALSE 18836
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18813: LD_ADDR_VAR 0 17
18817: PUSH
18818: LD_VAR 0 17
18822: PUSH
18823: LD_VAR 0 8
18827: PPUSH
18828: CALL_OW 478
18832: UNION
18833: ST_TO_ADDR
18834: GO 18810
18836: POP
18837: POP
// if not fac_list then
18838: LD_VAR 0 17
18842: NOT
18843: IFFALSE 18847
// exit ;
18845: GO 19766
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18847: LD_ADDR_VAR 0 5
18851: PUSH
18852: LD_INT 4
18854: PUSH
18855: LD_INT 5
18857: PUSH
18858: LD_INT 9
18860: PUSH
18861: LD_INT 10
18863: PUSH
18864: LD_INT 6
18866: PUSH
18867: LD_INT 7
18869: PUSH
18870: LD_INT 11
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 27
18884: PUSH
18885: LD_INT 28
18887: PUSH
18888: LD_INT 26
18890: PUSH
18891: LD_INT 30
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 43
18902: PUSH
18903: LD_INT 44
18905: PUSH
18906: LD_INT 46
18908: PUSH
18909: LD_INT 45
18911: PUSH
18912: LD_INT 47
18914: PUSH
18915: LD_INT 49
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: LIST
18930: PUSH
18931: LD_VAR 0 12
18935: ARRAY
18936: ST_TO_ADDR
// list := list isect fac_list ;
18937: LD_ADDR_VAR 0 5
18941: PUSH
18942: LD_VAR 0 5
18946: PUSH
18947: LD_VAR 0 17
18951: ISECT
18952: ST_TO_ADDR
// if not list then
18953: LD_VAR 0 5
18957: NOT
18958: IFFALSE 18962
// exit ;
18960: GO 19766
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18962: LD_VAR 0 12
18966: PUSH
18967: LD_INT 3
18969: EQUAL
18970: PUSH
18971: LD_INT 49
18973: PUSH
18974: LD_VAR 0 5
18978: IN
18979: AND
18980: PUSH
18981: LD_INT 31
18983: PPUSH
18984: LD_VAR 0 16
18988: PPUSH
18989: CALL_OW 321
18993: PUSH
18994: LD_INT 2
18996: EQUAL
18997: AND
18998: IFFALSE 19058
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19000: LD_INT 22
19002: PUSH
19003: LD_VAR 0 16
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 35
19014: PUSH
19015: LD_INT 49
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 91
19024: PUSH
19025: LD_VAR 0 1
19029: PUSH
19030: LD_INT 10
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: LIST
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: LIST
19042: PPUSH
19043: CALL_OW 69
19047: NOT
19048: IFFALSE 19058
// weapon := ru_time_lapser ;
19050: LD_ADDR_VAR 0 18
19054: PUSH
19055: LD_INT 49
19057: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19058: LD_VAR 0 12
19062: PUSH
19063: LD_INT 1
19065: PUSH
19066: LD_INT 2
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: IN
19073: PUSH
19074: LD_INT 11
19076: PUSH
19077: LD_VAR 0 5
19081: IN
19082: PUSH
19083: LD_INT 30
19085: PUSH
19086: LD_VAR 0 5
19090: IN
19091: OR
19092: AND
19093: PUSH
19094: LD_INT 6
19096: PPUSH
19097: LD_VAR 0 16
19101: PPUSH
19102: CALL_OW 321
19106: PUSH
19107: LD_INT 2
19109: EQUAL
19110: AND
19111: IFFALSE 19276
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19113: LD_INT 22
19115: PUSH
19116: LD_VAR 0 16
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 2
19127: PUSH
19128: LD_INT 35
19130: PUSH
19131: LD_INT 11
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 35
19140: PUSH
19141: LD_INT 30
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 91
19155: PUSH
19156: LD_VAR 0 1
19160: PUSH
19161: LD_INT 18
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: LIST
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: LIST
19173: PPUSH
19174: CALL_OW 69
19178: NOT
19179: PUSH
19180: LD_INT 22
19182: PUSH
19183: LD_VAR 0 16
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 2
19194: PUSH
19195: LD_INT 30
19197: PUSH
19198: LD_INT 32
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 30
19207: PUSH
19208: LD_INT 33
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 91
19222: PUSH
19223: LD_VAR 0 1
19227: PUSH
19228: LD_INT 12
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: LIST
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: LIST
19240: PUSH
19241: EMPTY
19242: LIST
19243: PPUSH
19244: CALL_OW 69
19248: PUSH
19249: LD_INT 2
19251: GREATER
19252: AND
19253: IFFALSE 19276
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19255: LD_ADDR_VAR 0 18
19259: PUSH
19260: LD_INT 11
19262: PUSH
19263: LD_INT 30
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_VAR 0 12
19274: ARRAY
19275: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19276: LD_VAR 0 18
19280: NOT
19281: PUSH
19282: LD_INT 40
19284: PPUSH
19285: LD_VAR 0 16
19289: PPUSH
19290: CALL_OW 321
19294: PUSH
19295: LD_INT 2
19297: EQUAL
19298: AND
19299: PUSH
19300: LD_INT 7
19302: PUSH
19303: LD_VAR 0 5
19307: IN
19308: PUSH
19309: LD_INT 28
19311: PUSH
19312: LD_VAR 0 5
19316: IN
19317: OR
19318: PUSH
19319: LD_INT 45
19321: PUSH
19322: LD_VAR 0 5
19326: IN
19327: OR
19328: AND
19329: IFFALSE 19583
// begin hex := GetHexInfo ( x , y ) ;
19331: LD_ADDR_VAR 0 4
19335: PUSH
19336: LD_VAR 0 10
19340: PPUSH
19341: LD_VAR 0 11
19345: PPUSH
19346: CALL_OW 546
19350: ST_TO_ADDR
// if hex [ 1 ] then
19351: LD_VAR 0 4
19355: PUSH
19356: LD_INT 1
19358: ARRAY
19359: IFFALSE 19363
// exit ;
19361: GO 19766
// height := hex [ 2 ] ;
19363: LD_ADDR_VAR 0 15
19367: PUSH
19368: LD_VAR 0 4
19372: PUSH
19373: LD_INT 2
19375: ARRAY
19376: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
19377: LD_ADDR_VAR 0 14
19381: PUSH
19382: LD_INT 0
19384: PUSH
19385: LD_INT 2
19387: PUSH
19388: LD_INT 3
19390: PUSH
19391: LD_INT 5
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: ST_TO_ADDR
// for i in tmp do
19400: LD_ADDR_VAR 0 8
19404: PUSH
19405: LD_VAR 0 14
19409: PUSH
19410: FOR_IN
19411: IFFALSE 19581
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
19413: LD_ADDR_VAR 0 9
19417: PUSH
19418: LD_VAR 0 10
19422: PPUSH
19423: LD_VAR 0 8
19427: PPUSH
19428: LD_INT 5
19430: PPUSH
19431: CALL_OW 272
19435: PUSH
19436: LD_VAR 0 11
19440: PPUSH
19441: LD_VAR 0 8
19445: PPUSH
19446: LD_INT 5
19448: PPUSH
19449: CALL_OW 273
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
19458: LD_VAR 0 9
19462: PUSH
19463: LD_INT 1
19465: ARRAY
19466: PPUSH
19467: LD_VAR 0 9
19471: PUSH
19472: LD_INT 2
19474: ARRAY
19475: PPUSH
19476: CALL_OW 488
19480: IFFALSE 19579
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
19482: LD_ADDR_VAR 0 4
19486: PUSH
19487: LD_VAR 0 9
19491: PUSH
19492: LD_INT 1
19494: ARRAY
19495: PPUSH
19496: LD_VAR 0 9
19500: PUSH
19501: LD_INT 2
19503: ARRAY
19504: PPUSH
19505: CALL_OW 546
19509: ST_TO_ADDR
// if hex [ 1 ] then
19510: LD_VAR 0 4
19514: PUSH
19515: LD_INT 1
19517: ARRAY
19518: IFFALSE 19522
// continue ;
19520: GO 19410
// h := hex [ 2 ] ;
19522: LD_ADDR_VAR 0 13
19526: PUSH
19527: LD_VAR 0 4
19531: PUSH
19532: LD_INT 2
19534: ARRAY
19535: ST_TO_ADDR
// if h + 7 < height then
19536: LD_VAR 0 13
19540: PUSH
19541: LD_INT 7
19543: PLUS
19544: PUSH
19545: LD_VAR 0 15
19549: LESS
19550: IFFALSE 19579
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19552: LD_ADDR_VAR 0 18
19556: PUSH
19557: LD_INT 7
19559: PUSH
19560: LD_INT 28
19562: PUSH
19563: LD_INT 45
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: LIST
19570: PUSH
19571: LD_VAR 0 12
19575: ARRAY
19576: ST_TO_ADDR
// break ;
19577: GO 19581
// end ; end ; end ;
19579: GO 19410
19581: POP
19582: POP
// end ; if not weapon then
19583: LD_VAR 0 18
19587: NOT
19588: IFFALSE 19648
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19590: LD_ADDR_VAR 0 5
19594: PUSH
19595: LD_VAR 0 5
19599: PUSH
19600: LD_INT 11
19602: PUSH
19603: LD_INT 30
19605: PUSH
19606: LD_INT 49
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: LIST
19613: DIFF
19614: ST_TO_ADDR
// if not list then
19615: LD_VAR 0 5
19619: NOT
19620: IFFALSE 19624
// exit ;
19622: GO 19766
// weapon := list [ rand ( 1 , list ) ] ;
19624: LD_ADDR_VAR 0 18
19628: PUSH
19629: LD_VAR 0 5
19633: PUSH
19634: LD_INT 1
19636: PPUSH
19637: LD_VAR 0 5
19641: PPUSH
19642: CALL_OW 12
19646: ARRAY
19647: ST_TO_ADDR
// end ; if weapon then
19648: LD_VAR 0 18
19652: IFFALSE 19766
// begin tmp := CostOfWeapon ( weapon ) ;
19654: LD_ADDR_VAR 0 14
19658: PUSH
19659: LD_VAR 0 18
19663: PPUSH
19664: CALL_OW 451
19668: ST_TO_ADDR
// j := GetBase ( tower ) ;
19669: LD_ADDR_VAR 0 9
19673: PUSH
19674: LD_VAR 0 1
19678: PPUSH
19679: CALL_OW 274
19683: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19684: LD_VAR 0 9
19688: PPUSH
19689: LD_INT 1
19691: PPUSH
19692: CALL_OW 275
19696: PUSH
19697: LD_VAR 0 14
19701: PUSH
19702: LD_INT 1
19704: ARRAY
19705: GREATEREQUAL
19706: PUSH
19707: LD_VAR 0 9
19711: PPUSH
19712: LD_INT 2
19714: PPUSH
19715: CALL_OW 275
19719: PUSH
19720: LD_VAR 0 14
19724: PUSH
19725: LD_INT 2
19727: ARRAY
19728: GREATEREQUAL
19729: AND
19730: PUSH
19731: LD_VAR 0 9
19735: PPUSH
19736: LD_INT 3
19738: PPUSH
19739: CALL_OW 275
19743: PUSH
19744: LD_VAR 0 14
19748: PUSH
19749: LD_INT 3
19751: ARRAY
19752: GREATEREQUAL
19753: AND
19754: IFFALSE 19766
// result := weapon ;
19756: LD_ADDR_VAR 0 3
19760: PUSH
19761: LD_VAR 0 18
19765: ST_TO_ADDR
// end ; end ;
19766: LD_VAR 0 3
19770: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19771: LD_INT 0
19773: PPUSH
19774: PPUSH
// result := true ;
19775: LD_ADDR_VAR 0 3
19779: PUSH
19780: LD_INT 1
19782: ST_TO_ADDR
// if array1 = array2 then
19783: LD_VAR 0 1
19787: PUSH
19788: LD_VAR 0 2
19792: EQUAL
19793: IFFALSE 19853
// begin for i = 1 to array1 do
19795: LD_ADDR_VAR 0 4
19799: PUSH
19800: DOUBLE
19801: LD_INT 1
19803: DEC
19804: ST_TO_ADDR
19805: LD_VAR 0 1
19809: PUSH
19810: FOR_TO
19811: IFFALSE 19849
// if array1 [ i ] <> array2 [ i ] then
19813: LD_VAR 0 1
19817: PUSH
19818: LD_VAR 0 4
19822: ARRAY
19823: PUSH
19824: LD_VAR 0 2
19828: PUSH
19829: LD_VAR 0 4
19833: ARRAY
19834: NONEQUAL
19835: IFFALSE 19847
// begin result := false ;
19837: LD_ADDR_VAR 0 3
19841: PUSH
19842: LD_INT 0
19844: ST_TO_ADDR
// break ;
19845: GO 19849
// end ;
19847: GO 19810
19849: POP
19850: POP
// end else
19851: GO 19861
// result := false ;
19853: LD_ADDR_VAR 0 3
19857: PUSH
19858: LD_INT 0
19860: ST_TO_ADDR
// end ;
19861: LD_VAR 0 3
19865: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19866: LD_INT 0
19868: PPUSH
19869: PPUSH
// if not array1 or not array2 then
19870: LD_VAR 0 1
19874: NOT
19875: PUSH
19876: LD_VAR 0 2
19880: NOT
19881: OR
19882: IFFALSE 19886
// exit ;
19884: GO 19950
// result := true ;
19886: LD_ADDR_VAR 0 3
19890: PUSH
19891: LD_INT 1
19893: ST_TO_ADDR
// for i = 1 to array1 do
19894: LD_ADDR_VAR 0 4
19898: PUSH
19899: DOUBLE
19900: LD_INT 1
19902: DEC
19903: ST_TO_ADDR
19904: LD_VAR 0 1
19908: PUSH
19909: FOR_TO
19910: IFFALSE 19948
// if array1 [ i ] <> array2 [ i ] then
19912: LD_VAR 0 1
19916: PUSH
19917: LD_VAR 0 4
19921: ARRAY
19922: PUSH
19923: LD_VAR 0 2
19927: PUSH
19928: LD_VAR 0 4
19932: ARRAY
19933: NONEQUAL
19934: IFFALSE 19946
// begin result := false ;
19936: LD_ADDR_VAR 0 3
19940: PUSH
19941: LD_INT 0
19943: ST_TO_ADDR
// break ;
19944: GO 19948
// end ;
19946: GO 19909
19948: POP
19949: POP
// end ;
19950: LD_VAR 0 3
19954: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19955: LD_INT 0
19957: PPUSH
19958: PPUSH
19959: PPUSH
// pom := GetBase ( fac ) ;
19960: LD_ADDR_VAR 0 5
19964: PUSH
19965: LD_VAR 0 1
19969: PPUSH
19970: CALL_OW 274
19974: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19975: LD_ADDR_VAR 0 4
19979: PUSH
19980: LD_VAR 0 2
19984: PUSH
19985: LD_INT 1
19987: ARRAY
19988: PPUSH
19989: LD_VAR 0 2
19993: PUSH
19994: LD_INT 2
19996: ARRAY
19997: PPUSH
19998: LD_VAR 0 2
20002: PUSH
20003: LD_INT 3
20005: ARRAY
20006: PPUSH
20007: LD_VAR 0 2
20011: PUSH
20012: LD_INT 4
20014: ARRAY
20015: PPUSH
20016: CALL_OW 449
20020: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20021: LD_ADDR_VAR 0 3
20025: PUSH
20026: LD_VAR 0 5
20030: PPUSH
20031: LD_INT 1
20033: PPUSH
20034: CALL_OW 275
20038: PUSH
20039: LD_VAR 0 4
20043: PUSH
20044: LD_INT 1
20046: ARRAY
20047: GREATEREQUAL
20048: PUSH
20049: LD_VAR 0 5
20053: PPUSH
20054: LD_INT 2
20056: PPUSH
20057: CALL_OW 275
20061: PUSH
20062: LD_VAR 0 4
20066: PUSH
20067: LD_INT 2
20069: ARRAY
20070: GREATEREQUAL
20071: AND
20072: PUSH
20073: LD_VAR 0 5
20077: PPUSH
20078: LD_INT 3
20080: PPUSH
20081: CALL_OW 275
20085: PUSH
20086: LD_VAR 0 4
20090: PUSH
20091: LD_INT 3
20093: ARRAY
20094: GREATEREQUAL
20095: AND
20096: ST_TO_ADDR
// end ;
20097: LD_VAR 0 3
20101: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20102: LD_INT 0
20104: PPUSH
20105: PPUSH
20106: PPUSH
20107: PPUSH
// pom := GetBase ( building ) ;
20108: LD_ADDR_VAR 0 3
20112: PUSH
20113: LD_VAR 0 1
20117: PPUSH
20118: CALL_OW 274
20122: ST_TO_ADDR
// if not pom then
20123: LD_VAR 0 3
20127: NOT
20128: IFFALSE 20132
// exit ;
20130: GO 20302
// btype := GetBType ( building ) ;
20132: LD_ADDR_VAR 0 5
20136: PUSH
20137: LD_VAR 0 1
20141: PPUSH
20142: CALL_OW 266
20146: ST_TO_ADDR
// if btype = b_armoury then
20147: LD_VAR 0 5
20151: PUSH
20152: LD_INT 4
20154: EQUAL
20155: IFFALSE 20165
// btype := b_barracks ;
20157: LD_ADDR_VAR 0 5
20161: PUSH
20162: LD_INT 5
20164: ST_TO_ADDR
// if btype = b_depot then
20165: LD_VAR 0 5
20169: PUSH
20170: LD_INT 0
20172: EQUAL
20173: IFFALSE 20183
// btype := b_warehouse ;
20175: LD_ADDR_VAR 0 5
20179: PUSH
20180: LD_INT 1
20182: ST_TO_ADDR
// if btype = b_workshop then
20183: LD_VAR 0 5
20187: PUSH
20188: LD_INT 2
20190: EQUAL
20191: IFFALSE 20201
// btype := b_factory ;
20193: LD_ADDR_VAR 0 5
20197: PUSH
20198: LD_INT 3
20200: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20201: LD_ADDR_VAR 0 4
20205: PUSH
20206: LD_VAR 0 5
20210: PPUSH
20211: LD_VAR 0 1
20215: PPUSH
20216: CALL_OW 248
20220: PPUSH
20221: CALL_OW 450
20225: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20226: LD_ADDR_VAR 0 2
20230: PUSH
20231: LD_VAR 0 3
20235: PPUSH
20236: LD_INT 1
20238: PPUSH
20239: CALL_OW 275
20243: PUSH
20244: LD_VAR 0 4
20248: PUSH
20249: LD_INT 1
20251: ARRAY
20252: GREATEREQUAL
20253: PUSH
20254: LD_VAR 0 3
20258: PPUSH
20259: LD_INT 2
20261: PPUSH
20262: CALL_OW 275
20266: PUSH
20267: LD_VAR 0 4
20271: PUSH
20272: LD_INT 2
20274: ARRAY
20275: GREATEREQUAL
20276: AND
20277: PUSH
20278: LD_VAR 0 3
20282: PPUSH
20283: LD_INT 3
20285: PPUSH
20286: CALL_OW 275
20290: PUSH
20291: LD_VAR 0 4
20295: PUSH
20296: LD_INT 3
20298: ARRAY
20299: GREATEREQUAL
20300: AND
20301: ST_TO_ADDR
// end ;
20302: LD_VAR 0 2
20306: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20307: LD_INT 0
20309: PPUSH
20310: PPUSH
20311: PPUSH
// pom := GetBase ( building ) ;
20312: LD_ADDR_VAR 0 4
20316: PUSH
20317: LD_VAR 0 1
20321: PPUSH
20322: CALL_OW 274
20326: ST_TO_ADDR
// if not pom then
20327: LD_VAR 0 4
20331: NOT
20332: IFFALSE 20336
// exit ;
20334: GO 20437
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20336: LD_ADDR_VAR 0 5
20340: PUSH
20341: LD_VAR 0 2
20345: PPUSH
20346: LD_VAR 0 1
20350: PPUSH
20351: CALL_OW 248
20355: PPUSH
20356: CALL_OW 450
20360: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20361: LD_ADDR_VAR 0 3
20365: PUSH
20366: LD_VAR 0 4
20370: PPUSH
20371: LD_INT 1
20373: PPUSH
20374: CALL_OW 275
20378: PUSH
20379: LD_VAR 0 5
20383: PUSH
20384: LD_INT 1
20386: ARRAY
20387: GREATEREQUAL
20388: PUSH
20389: LD_VAR 0 4
20393: PPUSH
20394: LD_INT 2
20396: PPUSH
20397: CALL_OW 275
20401: PUSH
20402: LD_VAR 0 5
20406: PUSH
20407: LD_INT 2
20409: ARRAY
20410: GREATEREQUAL
20411: AND
20412: PUSH
20413: LD_VAR 0 4
20417: PPUSH
20418: LD_INT 3
20420: PPUSH
20421: CALL_OW 275
20425: PUSH
20426: LD_VAR 0 5
20430: PUSH
20431: LD_INT 3
20433: ARRAY
20434: GREATEREQUAL
20435: AND
20436: ST_TO_ADDR
// end ;
20437: LD_VAR 0 3
20441: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
20442: LD_INT 0
20444: PPUSH
20445: PPUSH
20446: PPUSH
20447: PPUSH
20448: PPUSH
20449: PPUSH
20450: PPUSH
20451: PPUSH
20452: PPUSH
20453: PPUSH
20454: PPUSH
// result := false ;
20455: LD_ADDR_VAR 0 8
20459: PUSH
20460: LD_INT 0
20462: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
20463: LD_VAR 0 5
20467: NOT
20468: PUSH
20469: LD_VAR 0 1
20473: NOT
20474: OR
20475: PUSH
20476: LD_VAR 0 2
20480: NOT
20481: OR
20482: PUSH
20483: LD_VAR 0 3
20487: NOT
20488: OR
20489: IFFALSE 20493
// exit ;
20491: GO 21307
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
20493: LD_ADDR_VAR 0 14
20497: PUSH
20498: LD_VAR 0 1
20502: PPUSH
20503: LD_VAR 0 2
20507: PPUSH
20508: LD_VAR 0 3
20512: PPUSH
20513: LD_VAR 0 4
20517: PPUSH
20518: LD_VAR 0 5
20522: PUSH
20523: LD_INT 1
20525: ARRAY
20526: PPUSH
20527: CALL_OW 248
20531: PPUSH
20532: LD_INT 0
20534: PPUSH
20535: CALL 22540 0 6
20539: ST_TO_ADDR
// if not hexes then
20540: LD_VAR 0 14
20544: NOT
20545: IFFALSE 20549
// exit ;
20547: GO 21307
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20549: LD_ADDR_VAR 0 17
20553: PUSH
20554: LD_VAR 0 5
20558: PPUSH
20559: LD_INT 22
20561: PUSH
20562: LD_VAR 0 13
20566: PPUSH
20567: CALL_OW 255
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 2
20578: PUSH
20579: LD_INT 30
20581: PUSH
20582: LD_INT 0
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 30
20591: PUSH
20592: LD_INT 1
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: LIST
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PPUSH
20608: CALL_OW 72
20612: ST_TO_ADDR
// for i = 1 to hexes do
20613: LD_ADDR_VAR 0 9
20617: PUSH
20618: DOUBLE
20619: LD_INT 1
20621: DEC
20622: ST_TO_ADDR
20623: LD_VAR 0 14
20627: PUSH
20628: FOR_TO
20629: IFFALSE 21305
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20631: LD_ADDR_VAR 0 13
20635: PUSH
20636: LD_VAR 0 14
20640: PUSH
20641: LD_VAR 0 9
20645: ARRAY
20646: PUSH
20647: LD_INT 1
20649: ARRAY
20650: PPUSH
20651: LD_VAR 0 14
20655: PUSH
20656: LD_VAR 0 9
20660: ARRAY
20661: PUSH
20662: LD_INT 2
20664: ARRAY
20665: PPUSH
20666: CALL_OW 428
20670: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20671: LD_VAR 0 14
20675: PUSH
20676: LD_VAR 0 9
20680: ARRAY
20681: PUSH
20682: LD_INT 1
20684: ARRAY
20685: PPUSH
20686: LD_VAR 0 14
20690: PUSH
20691: LD_VAR 0 9
20695: ARRAY
20696: PUSH
20697: LD_INT 2
20699: ARRAY
20700: PPUSH
20701: CALL_OW 351
20705: PUSH
20706: LD_VAR 0 14
20710: PUSH
20711: LD_VAR 0 9
20715: ARRAY
20716: PUSH
20717: LD_INT 1
20719: ARRAY
20720: PPUSH
20721: LD_VAR 0 14
20725: PUSH
20726: LD_VAR 0 9
20730: ARRAY
20731: PUSH
20732: LD_INT 2
20734: ARRAY
20735: PPUSH
20736: CALL_OW 488
20740: NOT
20741: OR
20742: PUSH
20743: LD_VAR 0 13
20747: PPUSH
20748: CALL_OW 247
20752: PUSH
20753: LD_INT 3
20755: EQUAL
20756: OR
20757: IFFALSE 20763
// exit ;
20759: POP
20760: POP
20761: GO 21307
// if not tmp then
20763: LD_VAR 0 13
20767: NOT
20768: IFFALSE 20772
// continue ;
20770: GO 20628
// result := true ;
20772: LD_ADDR_VAR 0 8
20776: PUSH
20777: LD_INT 1
20779: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20780: LD_VAR 0 6
20784: PUSH
20785: LD_VAR 0 13
20789: PPUSH
20790: CALL_OW 247
20794: PUSH
20795: LD_INT 2
20797: EQUAL
20798: AND
20799: PUSH
20800: LD_VAR 0 13
20804: PPUSH
20805: CALL_OW 263
20809: PUSH
20810: LD_INT 1
20812: EQUAL
20813: AND
20814: IFFALSE 20978
// begin if IsDrivenBy ( tmp ) then
20816: LD_VAR 0 13
20820: PPUSH
20821: CALL_OW 311
20825: IFFALSE 20829
// continue ;
20827: GO 20628
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20829: LD_VAR 0 6
20833: PPUSH
20834: LD_INT 3
20836: PUSH
20837: LD_INT 60
20839: PUSH
20840: EMPTY
20841: LIST
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 3
20849: PUSH
20850: LD_INT 55
20852: PUSH
20853: EMPTY
20854: LIST
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PPUSH
20864: CALL_OW 72
20868: IFFALSE 20976
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20870: LD_ADDR_VAR 0 18
20874: PUSH
20875: LD_VAR 0 6
20879: PPUSH
20880: LD_INT 3
20882: PUSH
20883: LD_INT 60
20885: PUSH
20886: EMPTY
20887: LIST
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 3
20895: PUSH
20896: LD_INT 55
20898: PUSH
20899: EMPTY
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PPUSH
20910: CALL_OW 72
20914: PUSH
20915: LD_INT 1
20917: ARRAY
20918: ST_TO_ADDR
// if IsInUnit ( driver ) then
20919: LD_VAR 0 18
20923: PPUSH
20924: CALL_OW 310
20928: IFFALSE 20939
// ComExit ( driver ) ;
20930: LD_VAR 0 18
20934: PPUSH
20935: CALL 46319 0 1
// AddComEnterUnit ( driver , tmp ) ;
20939: LD_VAR 0 18
20943: PPUSH
20944: LD_VAR 0 13
20948: PPUSH
20949: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20953: LD_VAR 0 18
20957: PPUSH
20958: LD_VAR 0 7
20962: PPUSH
20963: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20967: LD_VAR 0 18
20971: PPUSH
20972: CALL_OW 181
// end ; continue ;
20976: GO 20628
// end ; if not cleaners or not tmp in cleaners then
20978: LD_VAR 0 6
20982: NOT
20983: PUSH
20984: LD_VAR 0 13
20988: PUSH
20989: LD_VAR 0 6
20993: IN
20994: NOT
20995: OR
20996: IFFALSE 21303
// begin if dep then
20998: LD_VAR 0 17
21002: IFFALSE 21138
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21004: LD_ADDR_VAR 0 16
21008: PUSH
21009: LD_VAR 0 17
21013: PUSH
21014: LD_INT 1
21016: ARRAY
21017: PPUSH
21018: CALL_OW 250
21022: PPUSH
21023: LD_VAR 0 17
21027: PUSH
21028: LD_INT 1
21030: ARRAY
21031: PPUSH
21032: CALL_OW 254
21036: PPUSH
21037: LD_INT 5
21039: PPUSH
21040: CALL_OW 272
21044: PUSH
21045: LD_VAR 0 17
21049: PUSH
21050: LD_INT 1
21052: ARRAY
21053: PPUSH
21054: CALL_OW 251
21058: PPUSH
21059: LD_VAR 0 17
21063: PUSH
21064: LD_INT 1
21066: ARRAY
21067: PPUSH
21068: CALL_OW 254
21072: PPUSH
21073: LD_INT 5
21075: PPUSH
21076: CALL_OW 273
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21085: LD_VAR 0 16
21089: PUSH
21090: LD_INT 1
21092: ARRAY
21093: PPUSH
21094: LD_VAR 0 16
21098: PUSH
21099: LD_INT 2
21101: ARRAY
21102: PPUSH
21103: CALL_OW 488
21107: IFFALSE 21138
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21109: LD_VAR 0 13
21113: PPUSH
21114: LD_VAR 0 16
21118: PUSH
21119: LD_INT 1
21121: ARRAY
21122: PPUSH
21123: LD_VAR 0 16
21127: PUSH
21128: LD_INT 2
21130: ARRAY
21131: PPUSH
21132: CALL_OW 111
// continue ;
21136: GO 20628
// end ; end ; r := GetDir ( tmp ) ;
21138: LD_ADDR_VAR 0 15
21142: PUSH
21143: LD_VAR 0 13
21147: PPUSH
21148: CALL_OW 254
21152: ST_TO_ADDR
// if r = 5 then
21153: LD_VAR 0 15
21157: PUSH
21158: LD_INT 5
21160: EQUAL
21161: IFFALSE 21171
// r := 0 ;
21163: LD_ADDR_VAR 0 15
21167: PUSH
21168: LD_INT 0
21170: ST_TO_ADDR
// for j = r to 5 do
21171: LD_ADDR_VAR 0 10
21175: PUSH
21176: DOUBLE
21177: LD_VAR 0 15
21181: DEC
21182: ST_TO_ADDR
21183: LD_INT 5
21185: PUSH
21186: FOR_TO
21187: IFFALSE 21301
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21189: LD_ADDR_VAR 0 11
21193: PUSH
21194: LD_VAR 0 13
21198: PPUSH
21199: CALL_OW 250
21203: PPUSH
21204: LD_VAR 0 10
21208: PPUSH
21209: LD_INT 2
21211: PPUSH
21212: CALL_OW 272
21216: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21217: LD_ADDR_VAR 0 12
21221: PUSH
21222: LD_VAR 0 13
21226: PPUSH
21227: CALL_OW 251
21231: PPUSH
21232: LD_VAR 0 10
21236: PPUSH
21237: LD_INT 2
21239: PPUSH
21240: CALL_OW 273
21244: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21245: LD_VAR 0 11
21249: PPUSH
21250: LD_VAR 0 12
21254: PPUSH
21255: CALL_OW 488
21259: PUSH
21260: LD_VAR 0 11
21264: PPUSH
21265: LD_VAR 0 12
21269: PPUSH
21270: CALL_OW 428
21274: NOT
21275: AND
21276: IFFALSE 21299
// begin ComMoveXY ( tmp , _x , _y ) ;
21278: LD_VAR 0 13
21282: PPUSH
21283: LD_VAR 0 11
21287: PPUSH
21288: LD_VAR 0 12
21292: PPUSH
21293: CALL_OW 111
// break ;
21297: GO 21301
// end ; end ;
21299: GO 21186
21301: POP
21302: POP
// end ; end ;
21303: GO 20628
21305: POP
21306: POP
// end ;
21307: LD_VAR 0 8
21311: RET
// export function BuildingTechInvented ( side , btype ) ; begin
21312: LD_INT 0
21314: PPUSH
// result := true ;
21315: LD_ADDR_VAR 0 3
21319: PUSH
21320: LD_INT 1
21322: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
21323: LD_VAR 0 2
21327: PUSH
21328: LD_INT 24
21330: DOUBLE
21331: EQUAL
21332: IFTRUE 21342
21334: LD_INT 33
21336: DOUBLE
21337: EQUAL
21338: IFTRUE 21342
21340: GO 21367
21342: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
21343: LD_ADDR_VAR 0 3
21347: PUSH
21348: LD_INT 32
21350: PPUSH
21351: LD_VAR 0 1
21355: PPUSH
21356: CALL_OW 321
21360: PUSH
21361: LD_INT 2
21363: EQUAL
21364: ST_TO_ADDR
21365: GO 21683
21367: LD_INT 20
21369: DOUBLE
21370: EQUAL
21371: IFTRUE 21375
21373: GO 21400
21375: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
21376: LD_ADDR_VAR 0 3
21380: PUSH
21381: LD_INT 6
21383: PPUSH
21384: LD_VAR 0 1
21388: PPUSH
21389: CALL_OW 321
21393: PUSH
21394: LD_INT 2
21396: EQUAL
21397: ST_TO_ADDR
21398: GO 21683
21400: LD_INT 22
21402: DOUBLE
21403: EQUAL
21404: IFTRUE 21414
21406: LD_INT 36
21408: DOUBLE
21409: EQUAL
21410: IFTRUE 21414
21412: GO 21439
21414: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
21415: LD_ADDR_VAR 0 3
21419: PUSH
21420: LD_INT 15
21422: PPUSH
21423: LD_VAR 0 1
21427: PPUSH
21428: CALL_OW 321
21432: PUSH
21433: LD_INT 2
21435: EQUAL
21436: ST_TO_ADDR
21437: GO 21683
21439: LD_INT 30
21441: DOUBLE
21442: EQUAL
21443: IFTRUE 21447
21445: GO 21472
21447: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
21448: LD_ADDR_VAR 0 3
21452: PUSH
21453: LD_INT 20
21455: PPUSH
21456: LD_VAR 0 1
21460: PPUSH
21461: CALL_OW 321
21465: PUSH
21466: LD_INT 2
21468: EQUAL
21469: ST_TO_ADDR
21470: GO 21683
21472: LD_INT 28
21474: DOUBLE
21475: EQUAL
21476: IFTRUE 21486
21478: LD_INT 21
21480: DOUBLE
21481: EQUAL
21482: IFTRUE 21486
21484: GO 21511
21486: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
21487: LD_ADDR_VAR 0 3
21491: PUSH
21492: LD_INT 21
21494: PPUSH
21495: LD_VAR 0 1
21499: PPUSH
21500: CALL_OW 321
21504: PUSH
21505: LD_INT 2
21507: EQUAL
21508: ST_TO_ADDR
21509: GO 21683
21511: LD_INT 16
21513: DOUBLE
21514: EQUAL
21515: IFTRUE 21519
21517: GO 21544
21519: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
21520: LD_ADDR_VAR 0 3
21524: PUSH
21525: LD_INT 84
21527: PPUSH
21528: LD_VAR 0 1
21532: PPUSH
21533: CALL_OW 321
21537: PUSH
21538: LD_INT 2
21540: EQUAL
21541: ST_TO_ADDR
21542: GO 21683
21544: LD_INT 19
21546: DOUBLE
21547: EQUAL
21548: IFTRUE 21558
21550: LD_INT 23
21552: DOUBLE
21553: EQUAL
21554: IFTRUE 21558
21556: GO 21583
21558: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
21559: LD_ADDR_VAR 0 3
21563: PUSH
21564: LD_INT 83
21566: PPUSH
21567: LD_VAR 0 1
21571: PPUSH
21572: CALL_OW 321
21576: PUSH
21577: LD_INT 2
21579: EQUAL
21580: ST_TO_ADDR
21581: GO 21683
21583: LD_INT 17
21585: DOUBLE
21586: EQUAL
21587: IFTRUE 21591
21589: GO 21616
21591: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
21592: LD_ADDR_VAR 0 3
21596: PUSH
21597: LD_INT 39
21599: PPUSH
21600: LD_VAR 0 1
21604: PPUSH
21605: CALL_OW 321
21609: PUSH
21610: LD_INT 2
21612: EQUAL
21613: ST_TO_ADDR
21614: GO 21683
21616: LD_INT 18
21618: DOUBLE
21619: EQUAL
21620: IFTRUE 21624
21622: GO 21649
21624: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
21625: LD_ADDR_VAR 0 3
21629: PUSH
21630: LD_INT 40
21632: PPUSH
21633: LD_VAR 0 1
21637: PPUSH
21638: CALL_OW 321
21642: PUSH
21643: LD_INT 2
21645: EQUAL
21646: ST_TO_ADDR
21647: GO 21683
21649: LD_INT 27
21651: DOUBLE
21652: EQUAL
21653: IFTRUE 21657
21655: GO 21682
21657: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
21658: LD_ADDR_VAR 0 3
21662: PUSH
21663: LD_INT 35
21665: PPUSH
21666: LD_VAR 0 1
21670: PPUSH
21671: CALL_OW 321
21675: PUSH
21676: LD_INT 2
21678: EQUAL
21679: ST_TO_ADDR
21680: GO 21683
21682: POP
// end ;
21683: LD_VAR 0 3
21687: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
21688: LD_INT 0
21690: PPUSH
21691: PPUSH
21692: PPUSH
21693: PPUSH
21694: PPUSH
21695: PPUSH
21696: PPUSH
21697: PPUSH
21698: PPUSH
21699: PPUSH
21700: PPUSH
// result := false ;
21701: LD_ADDR_VAR 0 6
21705: PUSH
21706: LD_INT 0
21708: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21709: LD_VAR 0 1
21713: NOT
21714: PUSH
21715: LD_VAR 0 1
21719: PPUSH
21720: CALL_OW 266
21724: PUSH
21725: LD_INT 0
21727: PUSH
21728: LD_INT 1
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: IN
21735: NOT
21736: OR
21737: PUSH
21738: LD_VAR 0 2
21742: NOT
21743: OR
21744: PUSH
21745: LD_VAR 0 5
21749: PUSH
21750: LD_INT 0
21752: PUSH
21753: LD_INT 1
21755: PUSH
21756: LD_INT 2
21758: PUSH
21759: LD_INT 3
21761: PUSH
21762: LD_INT 4
21764: PUSH
21765: LD_INT 5
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: IN
21776: NOT
21777: OR
21778: PUSH
21779: LD_VAR 0 3
21783: PPUSH
21784: LD_VAR 0 4
21788: PPUSH
21789: CALL_OW 488
21793: NOT
21794: OR
21795: IFFALSE 21799
// exit ;
21797: GO 22535
// side := GetSide ( depot ) ;
21799: LD_ADDR_VAR 0 9
21803: PUSH
21804: LD_VAR 0 1
21808: PPUSH
21809: CALL_OW 255
21813: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
21814: LD_VAR 0 9
21818: PPUSH
21819: LD_VAR 0 2
21823: PPUSH
21824: CALL 21312 0 2
21828: NOT
21829: IFFALSE 21833
// exit ;
21831: GO 22535
// pom := GetBase ( depot ) ;
21833: LD_ADDR_VAR 0 10
21837: PUSH
21838: LD_VAR 0 1
21842: PPUSH
21843: CALL_OW 274
21847: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
21848: LD_ADDR_VAR 0 11
21852: PUSH
21853: LD_VAR 0 2
21857: PPUSH
21858: LD_VAR 0 1
21862: PPUSH
21863: CALL_OW 248
21867: PPUSH
21868: CALL_OW 450
21872: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21873: LD_VAR 0 10
21877: PPUSH
21878: LD_INT 1
21880: PPUSH
21881: CALL_OW 275
21885: PUSH
21886: LD_VAR 0 11
21890: PUSH
21891: LD_INT 1
21893: ARRAY
21894: GREATEREQUAL
21895: PUSH
21896: LD_VAR 0 10
21900: PPUSH
21901: LD_INT 2
21903: PPUSH
21904: CALL_OW 275
21908: PUSH
21909: LD_VAR 0 11
21913: PUSH
21914: LD_INT 2
21916: ARRAY
21917: GREATEREQUAL
21918: AND
21919: PUSH
21920: LD_VAR 0 10
21924: PPUSH
21925: LD_INT 3
21927: PPUSH
21928: CALL_OW 275
21932: PUSH
21933: LD_VAR 0 11
21937: PUSH
21938: LD_INT 3
21940: ARRAY
21941: GREATEREQUAL
21942: AND
21943: NOT
21944: IFFALSE 21948
// exit ;
21946: GO 22535
// if GetBType ( depot ) = b_depot then
21948: LD_VAR 0 1
21952: PPUSH
21953: CALL_OW 266
21957: PUSH
21958: LD_INT 0
21960: EQUAL
21961: IFFALSE 21973
// dist := 28 else
21963: LD_ADDR_VAR 0 14
21967: PUSH
21968: LD_INT 28
21970: ST_TO_ADDR
21971: GO 21981
// dist := 36 ;
21973: LD_ADDR_VAR 0 14
21977: PUSH
21978: LD_INT 36
21980: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21981: LD_VAR 0 1
21985: PPUSH
21986: LD_VAR 0 3
21990: PPUSH
21991: LD_VAR 0 4
21995: PPUSH
21996: CALL_OW 297
22000: PUSH
22001: LD_VAR 0 14
22005: GREATER
22006: IFFALSE 22010
// exit ;
22008: GO 22535
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22010: LD_ADDR_VAR 0 12
22014: PUSH
22015: LD_VAR 0 2
22019: PPUSH
22020: LD_VAR 0 3
22024: PPUSH
22025: LD_VAR 0 4
22029: PPUSH
22030: LD_VAR 0 5
22034: PPUSH
22035: LD_VAR 0 1
22039: PPUSH
22040: CALL_OW 248
22044: PPUSH
22045: LD_INT 0
22047: PPUSH
22048: CALL 22540 0 6
22052: ST_TO_ADDR
// if not hexes then
22053: LD_VAR 0 12
22057: NOT
22058: IFFALSE 22062
// exit ;
22060: GO 22535
// hex := GetHexInfo ( x , y ) ;
22062: LD_ADDR_VAR 0 15
22066: PUSH
22067: LD_VAR 0 3
22071: PPUSH
22072: LD_VAR 0 4
22076: PPUSH
22077: CALL_OW 546
22081: ST_TO_ADDR
// if hex [ 1 ] then
22082: LD_VAR 0 15
22086: PUSH
22087: LD_INT 1
22089: ARRAY
22090: IFFALSE 22094
// exit ;
22092: GO 22535
// height := hex [ 2 ] ;
22094: LD_ADDR_VAR 0 13
22098: PUSH
22099: LD_VAR 0 15
22103: PUSH
22104: LD_INT 2
22106: ARRAY
22107: ST_TO_ADDR
// for i = 1 to hexes do
22108: LD_ADDR_VAR 0 7
22112: PUSH
22113: DOUBLE
22114: LD_INT 1
22116: DEC
22117: ST_TO_ADDR
22118: LD_VAR 0 12
22122: PUSH
22123: FOR_TO
22124: IFFALSE 22454
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22126: LD_VAR 0 12
22130: PUSH
22131: LD_VAR 0 7
22135: ARRAY
22136: PUSH
22137: LD_INT 1
22139: ARRAY
22140: PPUSH
22141: LD_VAR 0 12
22145: PUSH
22146: LD_VAR 0 7
22150: ARRAY
22151: PUSH
22152: LD_INT 2
22154: ARRAY
22155: PPUSH
22156: CALL_OW 488
22160: NOT
22161: PUSH
22162: LD_VAR 0 12
22166: PUSH
22167: LD_VAR 0 7
22171: ARRAY
22172: PUSH
22173: LD_INT 1
22175: ARRAY
22176: PPUSH
22177: LD_VAR 0 12
22181: PUSH
22182: LD_VAR 0 7
22186: ARRAY
22187: PUSH
22188: LD_INT 2
22190: ARRAY
22191: PPUSH
22192: CALL_OW 428
22196: PUSH
22197: LD_INT 0
22199: GREATER
22200: OR
22201: PUSH
22202: LD_VAR 0 12
22206: PUSH
22207: LD_VAR 0 7
22211: ARRAY
22212: PUSH
22213: LD_INT 1
22215: ARRAY
22216: PPUSH
22217: LD_VAR 0 12
22221: PUSH
22222: LD_VAR 0 7
22226: ARRAY
22227: PUSH
22228: LD_INT 2
22230: ARRAY
22231: PPUSH
22232: CALL_OW 351
22236: OR
22237: IFFALSE 22243
// exit ;
22239: POP
22240: POP
22241: GO 22535
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22243: LD_ADDR_VAR 0 8
22247: PUSH
22248: LD_VAR 0 12
22252: PUSH
22253: LD_VAR 0 7
22257: ARRAY
22258: PUSH
22259: LD_INT 1
22261: ARRAY
22262: PPUSH
22263: LD_VAR 0 12
22267: PUSH
22268: LD_VAR 0 7
22272: ARRAY
22273: PUSH
22274: LD_INT 2
22276: ARRAY
22277: PPUSH
22278: CALL_OW 546
22282: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22283: LD_VAR 0 8
22287: PUSH
22288: LD_INT 1
22290: ARRAY
22291: PUSH
22292: LD_VAR 0 8
22296: PUSH
22297: LD_INT 2
22299: ARRAY
22300: PUSH
22301: LD_VAR 0 13
22305: PUSH
22306: LD_INT 2
22308: PLUS
22309: GREATER
22310: OR
22311: PUSH
22312: LD_VAR 0 8
22316: PUSH
22317: LD_INT 2
22319: ARRAY
22320: PUSH
22321: LD_VAR 0 13
22325: PUSH
22326: LD_INT 2
22328: MINUS
22329: LESS
22330: OR
22331: PUSH
22332: LD_VAR 0 8
22336: PUSH
22337: LD_INT 3
22339: ARRAY
22340: PUSH
22341: LD_INT 0
22343: PUSH
22344: LD_INT 8
22346: PUSH
22347: LD_INT 9
22349: PUSH
22350: LD_INT 10
22352: PUSH
22353: LD_INT 11
22355: PUSH
22356: LD_INT 12
22358: PUSH
22359: LD_INT 13
22361: PUSH
22362: LD_INT 16
22364: PUSH
22365: LD_INT 17
22367: PUSH
22368: LD_INT 18
22370: PUSH
22371: LD_INT 19
22373: PUSH
22374: LD_INT 20
22376: PUSH
22377: LD_INT 21
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: IN
22395: NOT
22396: OR
22397: PUSH
22398: LD_VAR 0 8
22402: PUSH
22403: LD_INT 5
22405: ARRAY
22406: NOT
22407: OR
22408: PUSH
22409: LD_VAR 0 8
22413: PUSH
22414: LD_INT 6
22416: ARRAY
22417: PUSH
22418: LD_INT 1
22420: PUSH
22421: LD_INT 2
22423: PUSH
22424: LD_INT 7
22426: PUSH
22427: LD_INT 9
22429: PUSH
22430: LD_INT 10
22432: PUSH
22433: LD_INT 11
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: IN
22444: NOT
22445: OR
22446: IFFALSE 22452
// exit ;
22448: POP
22449: POP
22450: GO 22535
// end ;
22452: GO 22123
22454: POP
22455: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
22456: LD_VAR 0 9
22460: PPUSH
22461: LD_VAR 0 3
22465: PPUSH
22466: LD_VAR 0 4
22470: PPUSH
22471: LD_INT 20
22473: PPUSH
22474: CALL 14487 0 4
22478: PUSH
22479: LD_INT 4
22481: ARRAY
22482: IFFALSE 22486
// exit ;
22484: GO 22535
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
22486: LD_VAR 0 2
22490: PUSH
22491: LD_INT 29
22493: PUSH
22494: LD_INT 30
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: IN
22501: PUSH
22502: LD_VAR 0 3
22506: PPUSH
22507: LD_VAR 0 4
22511: PPUSH
22512: LD_VAR 0 9
22516: PPUSH
22517: CALL_OW 440
22521: NOT
22522: AND
22523: IFFALSE 22527
// exit ;
22525: GO 22535
// result := true ;
22527: LD_ADDR_VAR 0 6
22531: PUSH
22532: LD_INT 1
22534: ST_TO_ADDR
// end ;
22535: LD_VAR 0 6
22539: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
22540: LD_INT 0
22542: PPUSH
22543: PPUSH
22544: PPUSH
22545: PPUSH
22546: PPUSH
22547: PPUSH
22548: PPUSH
22549: PPUSH
22550: PPUSH
22551: PPUSH
22552: PPUSH
22553: PPUSH
22554: PPUSH
22555: PPUSH
22556: PPUSH
22557: PPUSH
22558: PPUSH
22559: PPUSH
22560: PPUSH
22561: PPUSH
22562: PPUSH
22563: PPUSH
22564: PPUSH
22565: PPUSH
22566: PPUSH
22567: PPUSH
22568: PPUSH
22569: PPUSH
22570: PPUSH
22571: PPUSH
22572: PPUSH
22573: PPUSH
22574: PPUSH
22575: PPUSH
22576: PPUSH
22577: PPUSH
22578: PPUSH
22579: PPUSH
22580: PPUSH
22581: PPUSH
22582: PPUSH
22583: PPUSH
22584: PPUSH
22585: PPUSH
22586: PPUSH
22587: PPUSH
22588: PPUSH
22589: PPUSH
22590: PPUSH
22591: PPUSH
22592: PPUSH
22593: PPUSH
22594: PPUSH
22595: PPUSH
22596: PPUSH
22597: PPUSH
22598: PPUSH
22599: PPUSH
// result = [ ] ;
22600: LD_ADDR_VAR 0 7
22604: PUSH
22605: EMPTY
22606: ST_TO_ADDR
// temp_list = [ ] ;
22607: LD_ADDR_VAR 0 9
22611: PUSH
22612: EMPTY
22613: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
22614: LD_VAR 0 4
22618: PUSH
22619: LD_INT 0
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: LD_INT 2
22627: PUSH
22628: LD_INT 3
22630: PUSH
22631: LD_INT 4
22633: PUSH
22634: LD_INT 5
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: IN
22645: NOT
22646: PUSH
22647: LD_VAR 0 1
22651: PUSH
22652: LD_INT 0
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: IN
22662: PUSH
22663: LD_VAR 0 5
22667: PUSH
22668: LD_INT 1
22670: PUSH
22671: LD_INT 2
22673: PUSH
22674: LD_INT 3
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: LIST
22681: IN
22682: NOT
22683: AND
22684: OR
22685: IFFALSE 22689
// exit ;
22687: GO 41080
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22689: LD_VAR 0 1
22693: PUSH
22694: LD_INT 6
22696: PUSH
22697: LD_INT 7
22699: PUSH
22700: LD_INT 8
22702: PUSH
22703: LD_INT 13
22705: PUSH
22706: LD_INT 12
22708: PUSH
22709: LD_INT 15
22711: PUSH
22712: LD_INT 11
22714: PUSH
22715: LD_INT 14
22717: PUSH
22718: LD_INT 10
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: IN
22732: IFFALSE 22742
// btype = b_lab ;
22734: LD_ADDR_VAR 0 1
22738: PUSH
22739: LD_INT 6
22741: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22742: LD_VAR 0 6
22746: PUSH
22747: LD_INT 0
22749: PUSH
22750: LD_INT 1
22752: PUSH
22753: LD_INT 2
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: LIST
22760: IN
22761: NOT
22762: PUSH
22763: LD_VAR 0 1
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: LD_INT 1
22773: PUSH
22774: LD_INT 2
22776: PUSH
22777: LD_INT 3
22779: PUSH
22780: LD_INT 6
22782: PUSH
22783: LD_INT 36
22785: PUSH
22786: LD_INT 4
22788: PUSH
22789: LD_INT 5
22791: PUSH
22792: LD_INT 31
22794: PUSH
22795: LD_INT 32
22797: PUSH
22798: LD_INT 33
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: IN
22814: NOT
22815: PUSH
22816: LD_VAR 0 6
22820: PUSH
22821: LD_INT 1
22823: EQUAL
22824: AND
22825: OR
22826: PUSH
22827: LD_VAR 0 1
22831: PUSH
22832: LD_INT 2
22834: PUSH
22835: LD_INT 3
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: IN
22842: NOT
22843: PUSH
22844: LD_VAR 0 6
22848: PUSH
22849: LD_INT 2
22851: EQUAL
22852: AND
22853: OR
22854: IFFALSE 22864
// mode = 0 ;
22856: LD_ADDR_VAR 0 6
22860: PUSH
22861: LD_INT 0
22863: ST_TO_ADDR
// case mode of 0 :
22864: LD_VAR 0 6
22868: PUSH
22869: LD_INT 0
22871: DOUBLE
22872: EQUAL
22873: IFTRUE 22877
22875: GO 34330
22877: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22878: LD_ADDR_VAR 0 11
22882: PUSH
22883: LD_INT 0
22885: PUSH
22886: LD_INT 0
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 0
22895: PUSH
22896: LD_INT 1
22898: NEG
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: LD_INT 0
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: LD_INT 1
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 0
22926: PUSH
22927: LD_INT 1
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 1
22936: NEG
22937: PUSH
22938: LD_INT 0
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 1
22947: NEG
22948: PUSH
22949: LD_INT 1
22951: NEG
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: NEG
22960: PUSH
22961: LD_INT 2
22963: NEG
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 0
22971: PUSH
22972: LD_INT 2
22974: NEG
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 1
22982: PUSH
22983: LD_INT 1
22985: NEG
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 1
22993: PUSH
22994: LD_INT 2
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 0
23003: PUSH
23004: LD_INT 2
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 1
23013: NEG
23014: PUSH
23015: LD_INT 1
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 1
23024: PUSH
23025: LD_INT 3
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: LD_INT 3
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 1
23044: NEG
23045: PUSH
23046: LD_INT 2
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23071: LD_ADDR_VAR 0 12
23075: PUSH
23076: LD_INT 0
23078: PUSH
23079: LD_INT 0
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 0
23088: PUSH
23089: LD_INT 1
23091: NEG
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 1
23099: PUSH
23100: LD_INT 0
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 1
23109: PUSH
23110: LD_INT 1
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 0
23119: PUSH
23120: LD_INT 1
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 1
23129: NEG
23130: PUSH
23131: LD_INT 0
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 1
23140: NEG
23141: PUSH
23142: LD_INT 1
23144: NEG
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: LD_INT 1
23155: NEG
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 2
23163: PUSH
23164: LD_INT 0
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 2
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 1
23183: NEG
23184: PUSH
23185: LD_INT 1
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 2
23194: NEG
23195: PUSH
23196: LD_INT 0
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 2
23205: NEG
23206: PUSH
23207: LD_INT 1
23209: NEG
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 2
23217: NEG
23218: PUSH
23219: LD_INT 1
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 3
23228: NEG
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 3
23239: NEG
23240: PUSH
23241: LD_INT 1
23243: NEG
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23267: LD_ADDR_VAR 0 13
23271: PUSH
23272: LD_INT 0
23274: PUSH
23275: LD_INT 0
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 0
23284: PUSH
23285: LD_INT 1
23287: NEG
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 1
23295: PUSH
23296: LD_INT 0
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 1
23305: PUSH
23306: LD_INT 1
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 0
23315: PUSH
23316: LD_INT 1
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 1
23325: NEG
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 1
23336: NEG
23337: PUSH
23338: LD_INT 1
23340: NEG
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 1
23348: NEG
23349: PUSH
23350: LD_INT 2
23352: NEG
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 2
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 2
23370: PUSH
23371: LD_INT 2
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: LD_INT 2
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 2
23390: NEG
23391: PUSH
23392: LD_INT 1
23394: NEG
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 2
23402: NEG
23403: PUSH
23404: LD_INT 2
23406: NEG
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 2
23414: NEG
23415: PUSH
23416: LD_INT 3
23418: NEG
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 3
23426: NEG
23427: PUSH
23428: LD_INT 2
23430: NEG
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 3
23438: NEG
23439: PUSH
23440: LD_INT 3
23442: NEG
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23466: LD_ADDR_VAR 0 14
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: LD_INT 0
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 0
23483: PUSH
23484: LD_INT 1
23486: NEG
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 1
23494: PUSH
23495: LD_INT 0
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 1
23504: PUSH
23505: LD_INT 1
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 0
23514: PUSH
23515: LD_INT 1
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 1
23524: NEG
23525: PUSH
23526: LD_INT 0
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 1
23535: NEG
23536: PUSH
23537: LD_INT 1
23539: NEG
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 1
23547: NEG
23548: PUSH
23549: LD_INT 2
23551: NEG
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 0
23559: PUSH
23560: LD_INT 2
23562: NEG
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 1
23570: PUSH
23571: LD_INT 1
23573: NEG
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: LD_INT 2
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 0
23591: PUSH
23592: LD_INT 2
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 1
23601: NEG
23602: PUSH
23603: LD_INT 1
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 1
23612: NEG
23613: PUSH
23614: LD_INT 3
23616: NEG
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: LD_INT 3
23627: NEG
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 1
23635: PUSH
23636: LD_INT 2
23638: NEG
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23662: LD_ADDR_VAR 0 15
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 0
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 0
23679: PUSH
23680: LD_INT 1
23682: NEG
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: PUSH
23691: LD_INT 0
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: LD_INT 1
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: LD_INT 1
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 1
23720: NEG
23721: PUSH
23722: LD_INT 0
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: LD_INT 1
23735: NEG
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: LD_INT 1
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 2
23754: PUSH
23755: LD_INT 0
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 2
23764: PUSH
23765: LD_INT 1
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 1
23774: NEG
23775: PUSH
23776: LD_INT 1
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 2
23785: NEG
23786: PUSH
23787: LD_INT 0
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 2
23796: NEG
23797: PUSH
23798: LD_INT 1
23800: NEG
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: LD_INT 1
23811: NEG
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 3
23819: PUSH
23820: LD_INT 0
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 3
23829: PUSH
23830: LD_INT 1
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23855: LD_ADDR_VAR 0 16
23859: PUSH
23860: LD_INT 0
23862: PUSH
23863: LD_INT 0
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 0
23872: PUSH
23873: LD_INT 1
23875: NEG
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 1
23883: PUSH
23884: LD_INT 0
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 1
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 0
23903: PUSH
23904: LD_INT 1
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 1
23913: NEG
23914: PUSH
23915: LD_INT 0
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: LD_INT 1
23928: NEG
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 1
23936: NEG
23937: PUSH
23938: LD_INT 2
23940: NEG
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 2
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 2
23958: PUSH
23959: LD_INT 2
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 1
23968: PUSH
23969: LD_INT 2
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 2
23978: NEG
23979: PUSH
23980: LD_INT 1
23982: NEG
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 2
23990: NEG
23991: PUSH
23992: LD_INT 2
23994: NEG
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 3
24002: PUSH
24003: LD_INT 2
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 3
24012: PUSH
24013: LD_INT 3
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 2
24022: PUSH
24023: LD_INT 3
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24048: LD_ADDR_VAR 0 17
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: LD_INT 0
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 0
24065: PUSH
24066: LD_INT 1
24068: NEG
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 1
24076: PUSH
24077: LD_INT 0
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: LD_INT 1
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 0
24096: PUSH
24097: LD_INT 1
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 1
24106: NEG
24107: PUSH
24108: LD_INT 0
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 1
24117: NEG
24118: PUSH
24119: LD_INT 1
24121: NEG
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 1
24129: NEG
24130: PUSH
24131: LD_INT 2
24133: NEG
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 0
24141: PUSH
24142: LD_INT 2
24144: NEG
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 1
24152: PUSH
24153: LD_INT 1
24155: NEG
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 2
24163: PUSH
24164: LD_INT 0
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 2
24173: PUSH
24174: LD_INT 1
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 2
24183: PUSH
24184: LD_INT 2
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 1
24193: PUSH
24194: LD_INT 2
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 0
24203: PUSH
24204: LD_INT 2
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 1
24213: NEG
24214: PUSH
24215: LD_INT 1
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 2
24224: NEG
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 2
24235: NEG
24236: PUSH
24237: LD_INT 1
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 2
24247: NEG
24248: PUSH
24249: LD_INT 2
24251: NEG
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24278: LD_ADDR_VAR 0 18
24282: PUSH
24283: LD_INT 0
24285: PUSH
24286: LD_INT 0
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 0
24295: PUSH
24296: LD_INT 1
24298: NEG
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 1
24306: PUSH
24307: LD_INT 0
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 1
24316: PUSH
24317: LD_INT 1
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: LD_INT 1
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 1
24336: NEG
24337: PUSH
24338: LD_INT 0
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 1
24347: NEG
24348: PUSH
24349: LD_INT 1
24351: NEG
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 1
24359: NEG
24360: PUSH
24361: LD_INT 2
24363: NEG
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 0
24371: PUSH
24372: LD_INT 2
24374: NEG
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 1
24382: PUSH
24383: LD_INT 1
24385: NEG
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 2
24393: PUSH
24394: LD_INT 0
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 2
24403: PUSH
24404: LD_INT 1
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 2
24413: PUSH
24414: LD_INT 2
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 1
24423: PUSH
24424: LD_INT 2
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: LD_INT 2
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 1
24443: NEG
24444: PUSH
24445: LD_INT 1
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 2
24454: NEG
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 2
24465: NEG
24466: PUSH
24467: LD_INT 1
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 2
24477: NEG
24478: PUSH
24479: LD_INT 2
24481: NEG
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24508: LD_ADDR_VAR 0 19
24512: PUSH
24513: LD_INT 0
24515: PUSH
24516: LD_INT 0
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: LD_INT 1
24528: NEG
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 1
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 0
24556: PUSH
24557: LD_INT 1
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 1
24566: NEG
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 1
24577: NEG
24578: PUSH
24579: LD_INT 1
24581: NEG
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 1
24589: NEG
24590: PUSH
24591: LD_INT 2
24593: NEG
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 2
24604: NEG
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: LD_INT 1
24615: NEG
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 2
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 2
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 2
24643: PUSH
24644: LD_INT 2
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 1
24653: PUSH
24654: LD_INT 2
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 0
24663: PUSH
24664: LD_INT 2
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 1
24673: NEG
24674: PUSH
24675: LD_INT 1
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 2
24684: NEG
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 2
24695: NEG
24696: PUSH
24697: LD_INT 1
24699: NEG
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 2
24707: NEG
24708: PUSH
24709: LD_INT 2
24711: NEG
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24738: LD_ADDR_VAR 0 20
24742: PUSH
24743: LD_INT 0
24745: PUSH
24746: LD_INT 0
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: LD_INT 1
24758: NEG
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 1
24766: PUSH
24767: LD_INT 0
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 1
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 0
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 1
24796: NEG
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 1
24807: NEG
24808: PUSH
24809: LD_INT 1
24811: NEG
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: LD_INT 2
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: LD_INT 2
24834: NEG
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: LD_INT 1
24845: NEG
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 2
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 2
24863: PUSH
24864: LD_INT 1
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 2
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: LD_INT 2
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 2
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 2
24914: NEG
24915: PUSH
24916: LD_INT 0
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 2
24925: NEG
24926: PUSH
24927: LD_INT 1
24929: NEG
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 2
24937: NEG
24938: PUSH
24939: LD_INT 2
24941: NEG
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24968: LD_ADDR_VAR 0 21
24972: PUSH
24973: LD_INT 0
24975: PUSH
24976: LD_INT 0
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 0
24985: PUSH
24986: LD_INT 1
24988: NEG
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: LD_INT 0
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: LD_INT 1
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 1
25026: NEG
25027: PUSH
25028: LD_INT 0
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 1
25037: NEG
25038: PUSH
25039: LD_INT 1
25041: NEG
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 1
25049: NEG
25050: PUSH
25051: LD_INT 2
25053: NEG
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 0
25061: PUSH
25062: LD_INT 2
25064: NEG
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 1
25075: NEG
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 2
25083: PUSH
25084: LD_INT 0
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 2
25093: PUSH
25094: LD_INT 1
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 2
25103: PUSH
25104: LD_INT 2
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 1
25113: PUSH
25114: LD_INT 2
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 0
25123: PUSH
25124: LD_INT 2
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 1
25133: NEG
25134: PUSH
25135: LD_INT 1
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 2
25144: NEG
25145: PUSH
25146: LD_INT 0
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 2
25155: NEG
25156: PUSH
25157: LD_INT 1
25159: NEG
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 2
25167: NEG
25168: PUSH
25169: LD_INT 2
25171: NEG
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25198: LD_ADDR_VAR 0 22
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 0
25215: PUSH
25216: LD_INT 1
25218: NEG
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 1
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 1
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 0
25246: PUSH
25247: LD_INT 1
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 1
25256: NEG
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: LD_INT 1
25271: NEG
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 1
25279: NEG
25280: PUSH
25281: LD_INT 2
25283: NEG
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 0
25291: PUSH
25292: LD_INT 2
25294: NEG
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 1
25302: PUSH
25303: LD_INT 1
25305: NEG
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 2
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 2
25323: PUSH
25324: LD_INT 1
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 2
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 1
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 0
25353: PUSH
25354: LD_INT 2
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 1
25363: NEG
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 2
25374: NEG
25375: PUSH
25376: LD_INT 0
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 2
25385: NEG
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 2
25397: NEG
25398: PUSH
25399: LD_INT 2
25401: NEG
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
25428: LD_ADDR_VAR 0 23
25432: PUSH
25433: LD_INT 0
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 0
25445: PUSH
25446: LD_INT 1
25448: NEG
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 1
25456: PUSH
25457: LD_INT 0
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 1
25466: PUSH
25467: LD_INT 1
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: LD_INT 1
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 1
25486: NEG
25487: PUSH
25488: LD_INT 0
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 1
25497: NEG
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 1
25509: NEG
25510: PUSH
25511: LD_INT 2
25513: NEG
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: LD_INT 2
25524: NEG
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: LD_INT 1
25535: NEG
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 2
25543: PUSH
25544: LD_INT 0
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 2
25553: PUSH
25554: LD_INT 1
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 2
25563: PUSH
25564: LD_INT 2
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: LD_INT 2
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 0
25583: PUSH
25584: LD_INT 2
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 1
25593: NEG
25594: PUSH
25595: LD_INT 1
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 2
25604: NEG
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 2
25615: NEG
25616: PUSH
25617: LD_INT 1
25619: NEG
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 2
25627: NEG
25628: PUSH
25629: LD_INT 2
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 2
25639: NEG
25640: PUSH
25641: LD_INT 3
25643: NEG
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 1
25651: NEG
25652: PUSH
25653: LD_INT 3
25655: NEG
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 1
25663: PUSH
25664: LD_INT 2
25666: NEG
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: LD_INT 1
25677: NEG
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25708: LD_ADDR_VAR 0 24
25712: PUSH
25713: LD_INT 0
25715: PUSH
25716: LD_INT 0
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 0
25725: PUSH
25726: LD_INT 1
25728: NEG
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: LD_INT 0
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 1
25746: PUSH
25747: LD_INT 1
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 0
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 1
25766: NEG
25767: PUSH
25768: LD_INT 0
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 1
25777: NEG
25778: PUSH
25779: LD_INT 1
25781: NEG
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 1
25789: NEG
25790: PUSH
25791: LD_INT 2
25793: NEG
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 0
25801: PUSH
25802: LD_INT 2
25804: NEG
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 1
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 2
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 2
25833: PUSH
25834: LD_INT 1
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 2
25843: PUSH
25844: LD_INT 2
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 1
25853: PUSH
25854: LD_INT 2
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 0
25863: PUSH
25864: LD_INT 2
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 1
25873: NEG
25874: PUSH
25875: LD_INT 1
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 2
25884: NEG
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 2
25895: NEG
25896: PUSH
25897: LD_INT 1
25899: NEG
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 2
25907: NEG
25908: PUSH
25909: LD_INT 2
25911: NEG
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: LD_INT 2
25922: NEG
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 2
25930: PUSH
25931: LD_INT 1
25933: NEG
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 3
25941: PUSH
25942: LD_INT 1
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 3
25951: PUSH
25952: LD_INT 2
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25984: LD_ADDR_VAR 0 25
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: LD_INT 0
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 0
26001: PUSH
26002: LD_INT 1
26004: NEG
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 1
26012: PUSH
26013: LD_INT 0
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: LD_INT 1
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: LD_INT 1
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 1
26042: NEG
26043: PUSH
26044: LD_INT 0
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 1
26053: NEG
26054: PUSH
26055: LD_INT 1
26057: NEG
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 1
26065: NEG
26066: PUSH
26067: LD_INT 2
26069: NEG
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 0
26077: PUSH
26078: LD_INT 2
26080: NEG
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 1
26088: PUSH
26089: LD_INT 1
26091: NEG
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 2
26099: PUSH
26100: LD_INT 0
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 2
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 2
26119: PUSH
26120: LD_INT 2
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: LD_INT 2
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: LD_INT 2
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 1
26149: NEG
26150: PUSH
26151: LD_INT 1
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 2
26160: NEG
26161: PUSH
26162: LD_INT 0
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 2
26171: NEG
26172: PUSH
26173: LD_INT 1
26175: NEG
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 2
26183: NEG
26184: PUSH
26185: LD_INT 2
26187: NEG
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 3
26195: PUSH
26196: LD_INT 1
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 3
26205: PUSH
26206: LD_INT 2
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 2
26215: PUSH
26216: LD_INT 3
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 1
26225: PUSH
26226: LD_INT 3
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26258: LD_ADDR_VAR 0 26
26262: PUSH
26263: LD_INT 0
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 0
26275: PUSH
26276: LD_INT 1
26278: NEG
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 1
26286: PUSH
26287: LD_INT 0
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 1
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 0
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 1
26316: NEG
26317: PUSH
26318: LD_INT 0
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: PUSH
26329: LD_INT 1
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 1
26339: NEG
26340: PUSH
26341: LD_INT 2
26343: NEG
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 0
26351: PUSH
26352: LD_INT 2
26354: NEG
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 2
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 1
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 2
26393: PUSH
26394: LD_INT 2
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 1
26403: PUSH
26404: LD_INT 2
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 0
26413: PUSH
26414: LD_INT 2
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 1
26423: NEG
26424: PUSH
26425: LD_INT 1
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 2
26434: NEG
26435: PUSH
26436: LD_INT 0
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 2
26445: NEG
26446: PUSH
26447: LD_INT 1
26449: NEG
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 2
26457: NEG
26458: PUSH
26459: LD_INT 2
26461: NEG
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 2
26469: PUSH
26470: LD_INT 3
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: LD_INT 3
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 1
26489: NEG
26490: PUSH
26491: LD_INT 2
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 2
26500: NEG
26501: PUSH
26502: LD_INT 1
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26534: LD_ADDR_VAR 0 27
26538: PUSH
26539: LD_INT 0
26541: PUSH
26542: LD_INT 0
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 1
26562: PUSH
26563: LD_INT 0
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 1
26572: PUSH
26573: LD_INT 1
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 1
26592: NEG
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: LD_INT 1
26607: NEG
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 1
26615: NEG
26616: PUSH
26617: LD_INT 2
26619: NEG
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 0
26627: PUSH
26628: LD_INT 2
26630: NEG
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 1
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 2
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 2
26659: PUSH
26660: LD_INT 1
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 2
26669: PUSH
26670: LD_INT 2
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: LD_INT 2
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: LD_INT 2
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: NEG
26700: PUSH
26701: LD_INT 1
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 2
26710: NEG
26711: PUSH
26712: LD_INT 0
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 2
26721: NEG
26722: PUSH
26723: LD_INT 1
26725: NEG
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 2
26733: NEG
26734: PUSH
26735: LD_INT 2
26737: NEG
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: LD_INT 2
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 2
26756: NEG
26757: PUSH
26758: LD_INT 1
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 3
26767: NEG
26768: PUSH
26769: LD_INT 1
26771: NEG
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 3
26779: NEG
26780: PUSH
26781: LD_INT 2
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26814: LD_ADDR_VAR 0 28
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: LD_INT 0
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 0
26831: PUSH
26832: LD_INT 1
26834: NEG
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 1
26842: PUSH
26843: LD_INT 0
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: LD_INT 1
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 1
26872: NEG
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 1
26883: NEG
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 1
26895: NEG
26896: PUSH
26897: LD_INT 2
26899: NEG
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: LD_INT 2
26910: NEG
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 2
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 2
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 2
26949: PUSH
26950: LD_INT 2
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: LD_INT 2
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: LD_INT 2
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 2
26990: NEG
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 2
27001: NEG
27002: PUSH
27003: LD_INT 1
27005: NEG
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 2
27013: NEG
27014: PUSH
27015: LD_INT 2
27017: NEG
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 2
27025: NEG
27026: PUSH
27027: LD_INT 3
27029: NEG
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 1
27037: NEG
27038: PUSH
27039: LD_INT 3
27041: NEG
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 3
27049: NEG
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 3
27061: NEG
27062: PUSH
27063: LD_INT 2
27065: NEG
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27096: LD_ADDR_VAR 0 29
27100: PUSH
27101: LD_INT 0
27103: PUSH
27104: LD_INT 0
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: LD_INT 1
27116: NEG
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: PUSH
27135: LD_INT 1
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: LD_INT 1
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: LD_INT 0
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 1
27165: NEG
27166: PUSH
27167: LD_INT 1
27169: NEG
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: LD_INT 2
27181: NEG
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 0
27189: PUSH
27190: LD_INT 2
27192: NEG
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 1
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 2
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 2
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 1
27231: PUSH
27232: LD_INT 2
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 0
27241: PUSH
27242: LD_INT 2
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 1
27251: NEG
27252: PUSH
27253: LD_INT 1
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 2
27262: NEG
27263: PUSH
27264: LD_INT 1
27266: NEG
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 2
27274: NEG
27275: PUSH
27276: LD_INT 2
27278: NEG
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 2
27286: NEG
27287: PUSH
27288: LD_INT 3
27290: NEG
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 2
27298: PUSH
27299: LD_INT 1
27301: NEG
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 3
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 1
27319: PUSH
27320: LD_INT 3
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 1
27329: NEG
27330: PUSH
27331: LD_INT 2
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 3
27340: NEG
27341: PUSH
27342: LD_INT 2
27344: NEG
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27375: LD_ADDR_VAR 0 30
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: LD_INT 0
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 0
27392: PUSH
27393: LD_INT 1
27395: NEG
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: LD_INT 0
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: LD_INT 1
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 0
27423: PUSH
27424: LD_INT 1
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: LD_INT 0
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: NEG
27445: PUSH
27446: LD_INT 1
27448: NEG
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: NEG
27457: PUSH
27458: LD_INT 2
27460: NEG
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: LD_INT 2
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: PUSH
27480: LD_INT 1
27482: NEG
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: LD_INT 0
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 2
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 2
27510: PUSH
27511: LD_INT 2
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 1
27520: PUSH
27521: LD_INT 2
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 1
27530: NEG
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 2
27541: NEG
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 2
27552: NEG
27553: PUSH
27554: LD_INT 1
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 1
27564: NEG
27565: PUSH
27566: LD_INT 3
27568: NEG
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 1
27576: PUSH
27577: LD_INT 2
27579: NEG
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 3
27587: PUSH
27588: LD_INT 2
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 2
27597: PUSH
27598: LD_INT 3
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 2
27607: NEG
27608: PUSH
27609: LD_INT 1
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 3
27618: NEG
27619: PUSH
27620: LD_INT 1
27622: NEG
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27653: LD_ADDR_VAR 0 31
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: LD_INT 0
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 0
27670: PUSH
27671: LD_INT 1
27673: NEG
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 1
27681: PUSH
27682: LD_INT 0
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 1
27691: PUSH
27692: LD_INT 1
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 0
27701: PUSH
27702: LD_INT 1
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 1
27711: NEG
27712: PUSH
27713: LD_INT 0
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 1
27722: NEG
27723: PUSH
27724: LD_INT 1
27726: NEG
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 1
27734: NEG
27735: PUSH
27736: LD_INT 2
27738: NEG
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 1
27746: PUSH
27747: LD_INT 1
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 2
27757: PUSH
27758: LD_INT 0
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 2
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 2
27777: PUSH
27778: LD_INT 2
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 1
27787: PUSH
27788: LD_INT 2
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 0
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 2
27818: NEG
27819: PUSH
27820: LD_INT 1
27822: NEG
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 2
27830: NEG
27831: PUSH
27832: LD_INT 2
27834: NEG
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 2
27842: NEG
27843: PUSH
27844: LD_INT 3
27846: NEG
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 2
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 3
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: LD_INT 3
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: NEG
27886: PUSH
27887: LD_INT 2
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 3
27896: NEG
27897: PUSH
27898: LD_INT 2
27900: NEG
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27931: LD_ADDR_VAR 0 32
27935: PUSH
27936: LD_INT 0
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: LD_INT 1
27951: NEG
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 1
27959: PUSH
27960: LD_INT 0
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 1
27969: PUSH
27970: LD_INT 1
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 0
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 1
27989: NEG
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 1
28000: NEG
28001: PUSH
28002: LD_INT 1
28004: NEG
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 1
28012: NEG
28013: PUSH
28014: LD_INT 2
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 0
28024: PUSH
28025: LD_INT 2
28027: NEG
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: LD_INT 1
28038: NEG
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 2
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 2
28056: PUSH
28057: LD_INT 2
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 1
28066: PUSH
28067: LD_INT 2
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 0
28076: PUSH
28077: LD_INT 2
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 1
28086: NEG
28087: PUSH
28088: LD_INT 1
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 2
28097: NEG
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 2
28108: NEG
28109: PUSH
28110: LD_INT 1
28112: NEG
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 1
28120: NEG
28121: PUSH
28122: LD_INT 3
28124: NEG
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 1
28132: PUSH
28133: LD_INT 2
28135: NEG
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 3
28143: PUSH
28144: LD_INT 2
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 2
28153: PUSH
28154: LD_INT 3
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 2
28163: NEG
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 3
28174: NEG
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28209: LD_ADDR_VAR 0 33
28213: PUSH
28214: LD_INT 0
28216: PUSH
28217: LD_INT 0
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: LD_INT 1
28229: NEG
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: LD_INT 0
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 1
28247: PUSH
28248: LD_INT 1
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 0
28257: PUSH
28258: LD_INT 1
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 1
28267: NEG
28268: PUSH
28269: LD_INT 0
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 1
28278: NEG
28279: PUSH
28280: LD_INT 1
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 1
28290: NEG
28291: PUSH
28292: LD_INT 2
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 1
28302: PUSH
28303: LD_INT 1
28305: NEG
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: LD_INT 1
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: LD_INT 2
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: LD_INT 2
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: LD_INT 1
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 2
28364: NEG
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 2
28375: NEG
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 2
28387: NEG
28388: PUSH
28389: LD_INT 2
28391: NEG
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 2
28399: NEG
28400: PUSH
28401: LD_INT 3
28403: NEG
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 2
28411: PUSH
28412: LD_INT 1
28414: NEG
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 3
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: LD_INT 3
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: LD_INT 2
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 3
28453: NEG
28454: PUSH
28455: LD_INT 2
28457: NEG
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28488: LD_ADDR_VAR 0 34
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: LD_INT 1
28508: NEG
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 1
28516: PUSH
28517: LD_INT 0
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: LD_INT 1
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 0
28536: PUSH
28537: LD_INT 1
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 1
28546: NEG
28547: PUSH
28548: LD_INT 0
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 1
28557: NEG
28558: PUSH
28559: LD_INT 1
28561: NEG
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 1
28569: NEG
28570: PUSH
28571: LD_INT 2
28573: NEG
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 0
28581: PUSH
28582: LD_INT 2
28584: NEG
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 1
28592: PUSH
28593: LD_INT 1
28595: NEG
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 2
28603: PUSH
28604: LD_INT 1
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 2
28613: PUSH
28614: LD_INT 2
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 1
28623: PUSH
28624: LD_INT 2
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 1
28633: NEG
28634: PUSH
28635: LD_INT 1
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 2
28644: NEG
28645: PUSH
28646: LD_INT 0
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 2
28655: NEG
28656: PUSH
28657: LD_INT 1
28659: NEG
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 2
28667: NEG
28668: PUSH
28669: LD_INT 2
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 1
28679: NEG
28680: PUSH
28681: LD_INT 3
28683: NEG
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: LD_INT 2
28694: NEG
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 3
28702: PUSH
28703: LD_INT 2
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 2
28712: PUSH
28713: LD_INT 3
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 2
28722: NEG
28723: PUSH
28724: LD_INT 1
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 3
28733: NEG
28734: PUSH
28735: LD_INT 1
28737: NEG
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28768: LD_ADDR_VAR 0 35
28772: PUSH
28773: LD_INT 0
28775: PUSH
28776: LD_INT 0
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: LD_INT 1
28788: NEG
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 1
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 0
28816: PUSH
28817: LD_INT 1
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 1
28826: NEG
28827: PUSH
28828: LD_INT 0
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: NEG
28838: PUSH
28839: LD_INT 1
28841: NEG
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 2
28849: PUSH
28850: LD_INT 1
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 2
28859: NEG
28860: PUSH
28861: LD_INT 1
28863: NEG
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28880: LD_ADDR_VAR 0 36
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: LD_INT 0
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 0
28897: PUSH
28898: LD_INT 1
28900: NEG
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 1
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 0
28928: PUSH
28929: LD_INT 1
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: LD_INT 0
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 1
28949: NEG
28950: PUSH
28951: LD_INT 1
28953: NEG
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 1
28961: NEG
28962: PUSH
28963: LD_INT 2
28965: NEG
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 1
28973: PUSH
28974: LD_INT 2
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28992: LD_ADDR_VAR 0 37
28996: PUSH
28997: LD_INT 0
28999: PUSH
29000: LD_INT 0
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 0
29009: PUSH
29010: LD_INT 1
29012: NEG
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: LD_INT 0
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 1
29030: PUSH
29031: LD_INT 1
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 0
29040: PUSH
29041: LD_INT 1
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 1
29050: NEG
29051: PUSH
29052: LD_INT 0
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: LD_INT 1
29065: NEG
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 1
29073: PUSH
29074: LD_INT 1
29076: NEG
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 1
29084: NEG
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29104: LD_ADDR_VAR 0 38
29108: PUSH
29109: LD_INT 0
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 0
29121: PUSH
29122: LD_INT 1
29124: NEG
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: LD_INT 0
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: LD_INT 1
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 1
29162: NEG
29163: PUSH
29164: LD_INT 0
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 1
29173: NEG
29174: PUSH
29175: LD_INT 1
29177: NEG
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 2
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 2
29195: NEG
29196: PUSH
29197: LD_INT 1
29199: NEG
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29216: LD_ADDR_VAR 0 39
29220: PUSH
29221: LD_INT 0
29223: PUSH
29224: LD_INT 0
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: LD_INT 1
29236: NEG
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: LD_INT 0
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: LD_INT 1
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: LD_INT 1
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 1
29274: NEG
29275: PUSH
29276: LD_INT 0
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 1
29285: NEG
29286: PUSH
29287: LD_INT 1
29289: NEG
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 1
29297: NEG
29298: PUSH
29299: LD_INT 2
29301: NEG
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 1
29309: PUSH
29310: LD_INT 2
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29328: LD_ADDR_VAR 0 40
29332: PUSH
29333: LD_INT 0
29335: PUSH
29336: LD_INT 0
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: LD_INT 1
29348: NEG
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 1
29356: PUSH
29357: LD_INT 0
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: LD_INT 1
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 0
29376: PUSH
29377: LD_INT 1
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 1
29386: NEG
29387: PUSH
29388: LD_INT 0
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 1
29397: NEG
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 1
29409: PUSH
29410: LD_INT 1
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 1
29420: NEG
29421: PUSH
29422: LD_INT 1
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29440: LD_ADDR_VAR 0 41
29444: PUSH
29445: LD_INT 0
29447: PUSH
29448: LD_INT 0
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 0
29457: PUSH
29458: LD_INT 1
29460: NEG
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 1
29468: PUSH
29469: LD_INT 0
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: LD_INT 1
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 0
29488: PUSH
29489: LD_INT 1
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 1
29498: NEG
29499: PUSH
29500: LD_INT 0
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 1
29509: NEG
29510: PUSH
29511: LD_INT 1
29513: NEG
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 1
29521: NEG
29522: PUSH
29523: LD_INT 2
29525: NEG
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 1
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 2
29544: PUSH
29545: LD_INT 0
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 2
29554: PUSH
29555: LD_INT 1
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 2
29564: PUSH
29565: LD_INT 2
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 1
29574: PUSH
29575: LD_INT 2
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: NEG
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 2
29595: NEG
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 2
29606: NEG
29607: PUSH
29608: LD_INT 1
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 2
29618: NEG
29619: PUSH
29620: LD_INT 2
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 2
29630: NEG
29631: PUSH
29632: LD_INT 3
29634: NEG
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 2
29642: PUSH
29643: LD_INT 1
29645: NEG
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 3
29653: PUSH
29654: LD_INT 0
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 3
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 3
29673: PUSH
29674: LD_INT 2
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 3
29683: PUSH
29684: LD_INT 3
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 2
29693: PUSH
29694: LD_INT 3
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 2
29703: NEG
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 3
29714: NEG
29715: PUSH
29716: LD_INT 0
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 3
29725: NEG
29726: PUSH
29727: LD_INT 1
29729: NEG
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 3
29737: NEG
29738: PUSH
29739: LD_INT 2
29741: NEG
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 3
29749: NEG
29750: PUSH
29751: LD_INT 3
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29790: LD_ADDR_VAR 0 42
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: LD_INT 0
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 0
29807: PUSH
29808: LD_INT 1
29810: NEG
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 1
29818: PUSH
29819: LD_INT 0
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 1
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 0
29838: PUSH
29839: LD_INT 1
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 1
29848: NEG
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 1
29859: NEG
29860: PUSH
29861: LD_INT 1
29863: NEG
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 1
29871: NEG
29872: PUSH
29873: LD_INT 2
29875: NEG
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: LD_INT 2
29886: NEG
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: LD_INT 1
29897: NEG
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 2
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 2
29915: PUSH
29916: LD_INT 2
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 1
29925: PUSH
29926: LD_INT 2
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 0
29935: PUSH
29936: LD_INT 2
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 1
29945: NEG
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 2
29956: NEG
29957: PUSH
29958: LD_INT 1
29960: NEG
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 2
29968: NEG
29969: PUSH
29970: LD_INT 2
29972: NEG
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 2
29980: NEG
29981: PUSH
29982: LD_INT 3
29984: NEG
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 1
29992: NEG
29993: PUSH
29994: LD_INT 3
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: LD_INT 3
30007: NEG
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 1
30015: PUSH
30016: LD_INT 2
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 3
30026: PUSH
30027: LD_INT 2
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 3
30036: PUSH
30037: LD_INT 3
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 2
30046: PUSH
30047: LD_INT 3
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 1
30056: PUSH
30057: LD_INT 3
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 0
30066: PUSH
30067: LD_INT 3
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 1
30076: NEG
30077: PUSH
30078: LD_INT 2
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 3
30087: NEG
30088: PUSH
30089: LD_INT 2
30091: NEG
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 3
30099: NEG
30100: PUSH
30101: LD_INT 3
30103: NEG
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30140: LD_ADDR_VAR 0 43
30144: PUSH
30145: LD_INT 0
30147: PUSH
30148: LD_INT 0
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 0
30157: PUSH
30158: LD_INT 1
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 1
30168: PUSH
30169: LD_INT 0
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 1
30178: PUSH
30179: LD_INT 1
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: LD_INT 1
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 1
30198: NEG
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 1
30209: NEG
30210: PUSH
30211: LD_INT 1
30213: NEG
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 1
30221: NEG
30222: PUSH
30223: LD_INT 2
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: LD_INT 2
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: LD_INT 1
30247: NEG
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 2
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 2
30265: PUSH
30266: LD_INT 1
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: LD_INT 2
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 0
30285: PUSH
30286: LD_INT 2
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 1
30295: NEG
30296: PUSH
30297: LD_INT 1
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 2
30306: NEG
30307: PUSH
30308: LD_INT 0
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 2
30317: NEG
30318: PUSH
30319: LD_INT 1
30321: NEG
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 1
30329: NEG
30330: PUSH
30331: LD_INT 3
30333: NEG
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 0
30341: PUSH
30342: LD_INT 3
30344: NEG
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: LD_INT 2
30355: NEG
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 2
30363: PUSH
30364: LD_INT 1
30366: NEG
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 3
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: LD_INT 3
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: LD_INT 3
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: LD_INT 2
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 2
30425: NEG
30426: PUSH
30427: LD_INT 1
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 3
30436: NEG
30437: PUSH
30438: LD_INT 0
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 3
30447: NEG
30448: PUSH
30449: LD_INT 1
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30488: LD_ADDR_VAR 0 44
30492: PUSH
30493: LD_INT 0
30495: PUSH
30496: LD_INT 0
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: LD_INT 1
30508: NEG
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 1
30526: PUSH
30527: LD_INT 1
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 0
30536: PUSH
30537: LD_INT 1
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 1
30546: NEG
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 1
30557: NEG
30558: PUSH
30559: LD_INT 1
30561: NEG
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 1
30569: NEG
30570: PUSH
30571: LD_INT 2
30573: NEG
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: LD_INT 1
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 2
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 2
30612: PUSH
30613: LD_INT 2
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: PUSH
30623: LD_INT 2
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 1
30632: NEG
30633: PUSH
30634: LD_INT 1
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 2
30643: NEG
30644: PUSH
30645: LD_INT 0
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 2
30654: NEG
30655: PUSH
30656: LD_INT 1
30658: NEG
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 2
30666: NEG
30667: PUSH
30668: LD_INT 2
30670: NEG
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 2
30678: NEG
30679: PUSH
30680: LD_INT 3
30682: NEG
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 2
30690: PUSH
30691: LD_INT 1
30693: NEG
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 3
30701: PUSH
30702: LD_INT 0
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 3
30711: PUSH
30712: LD_INT 1
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 3
30721: PUSH
30722: LD_INT 2
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 3
30731: PUSH
30732: LD_INT 3
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 2
30741: PUSH
30742: LD_INT 3
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 2
30751: NEG
30752: PUSH
30753: LD_INT 1
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 3
30762: NEG
30763: PUSH
30764: LD_INT 0
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 3
30773: NEG
30774: PUSH
30775: LD_INT 1
30777: NEG
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 3
30785: NEG
30786: PUSH
30787: LD_INT 2
30789: NEG
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 3
30797: NEG
30798: PUSH
30799: LD_INT 3
30801: NEG
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30838: LD_ADDR_VAR 0 45
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: LD_INT 0
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 0
30855: PUSH
30856: LD_INT 1
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: LD_INT 0
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 1
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 0
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 1
30896: NEG
30897: PUSH
30898: LD_INT 0
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 1
30907: NEG
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PUSH
30921: LD_INT 2
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 0
30931: PUSH
30932: LD_INT 2
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: LD_INT 1
30945: NEG
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 2
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 2
30963: PUSH
30964: LD_INT 2
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: LD_INT 2
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: LD_INT 2
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 1
30993: NEG
30994: PUSH
30995: LD_INT 1
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 2
31004: NEG
31005: PUSH
31006: LD_INT 1
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 2
31016: NEG
31017: PUSH
31018: LD_INT 2
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 2
31028: NEG
31029: PUSH
31030: LD_INT 3
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: NEG
31041: PUSH
31042: LD_INT 3
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: LD_INT 3
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 1
31063: PUSH
31064: LD_INT 2
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 3
31074: PUSH
31075: LD_INT 2
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 3
31084: PUSH
31085: LD_INT 3
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 2
31094: PUSH
31095: LD_INT 3
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: LD_INT 3
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 0
31114: PUSH
31115: LD_INT 3
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: LD_INT 2
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 3
31135: NEG
31136: PUSH
31137: LD_INT 2
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 3
31147: NEG
31148: PUSH
31149: LD_INT 3
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31188: LD_ADDR_VAR 0 46
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: LD_INT 0
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 0
31205: PUSH
31206: LD_INT 1
31208: NEG
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 1
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 1
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 1
31246: NEG
31247: PUSH
31248: LD_INT 0
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 1
31257: NEG
31258: PUSH
31259: LD_INT 1
31261: NEG
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 1
31269: NEG
31270: PUSH
31271: LD_INT 2
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 0
31281: PUSH
31282: LD_INT 2
31284: NEG
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: LD_INT 1
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 2
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 2
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 1
31323: PUSH
31324: LD_INT 2
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: LD_INT 2
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 1
31343: NEG
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 2
31354: NEG
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 2
31365: NEG
31366: PUSH
31367: LD_INT 1
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: LD_INT 3
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 0
31389: PUSH
31390: LD_INT 3
31392: NEG
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 1
31400: PUSH
31401: LD_INT 2
31403: NEG
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 2
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 3
31422: PUSH
31423: LD_INT 0
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 3
31432: PUSH
31433: LD_INT 1
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 1
31442: PUSH
31443: LD_INT 3
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: LD_INT 3
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 2
31473: NEG
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 3
31484: NEG
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 3
31495: NEG
31496: PUSH
31497: LD_INT 1
31499: NEG
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31536: LD_ADDR_VAR 0 47
31540: PUSH
31541: LD_INT 0
31543: PUSH
31544: LD_INT 0
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 0
31553: PUSH
31554: LD_INT 1
31556: NEG
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 1
31564: PUSH
31565: LD_INT 0
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 1
31574: PUSH
31575: LD_INT 1
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 0
31584: PUSH
31585: LD_INT 1
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 1
31594: NEG
31595: PUSH
31596: LD_INT 0
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 1
31605: NEG
31606: PUSH
31607: LD_INT 1
31609: NEG
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 1
31617: NEG
31618: PUSH
31619: LD_INT 2
31621: NEG
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: LD_INT 2
31632: NEG
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 1
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 2
31651: NEG
31652: PUSH
31653: LD_INT 1
31655: NEG
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: LD_INT 2
31667: NEG
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31687: LD_ADDR_VAR 0 48
31691: PUSH
31692: LD_INT 0
31694: PUSH
31695: LD_INT 0
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 0
31704: PUSH
31705: LD_INT 1
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: LD_INT 0
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 1
31725: PUSH
31726: LD_INT 1
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: LD_INT 1
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 1
31745: NEG
31746: PUSH
31747: LD_INT 0
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 1
31756: NEG
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: LD_INT 2
31772: NEG
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: LD_INT 2
31783: NEG
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 1
31791: PUSH
31792: LD_INT 1
31794: NEG
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 2
31802: PUSH
31803: LD_INT 0
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 2
31812: PUSH
31813: LD_INT 1
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31834: LD_ADDR_VAR 0 49
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: LD_INT 0
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: LD_INT 1
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: LD_INT 0
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 1
31903: NEG
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: PUSH
31916: LD_INT 1
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 2
31926: PUSH
31927: LD_INT 0
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 2
31936: PUSH
31937: LD_INT 1
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 2
31946: PUSH
31947: LD_INT 2
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: LD_INT 2
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31978: LD_ADDR_VAR 0 50
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: LD_INT 0
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 1
32016: PUSH
32017: LD_INT 1
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 0
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: NEG
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: LD_INT 1
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 2
32059: PUSH
32060: LD_INT 1
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: LD_INT 2
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 1
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: LD_INT 2
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32122: LD_ADDR_VAR 0 51
32126: PUSH
32127: LD_INT 0
32129: PUSH
32130: LD_INT 0
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 0
32139: PUSH
32140: LD_INT 1
32142: NEG
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 1
32150: PUSH
32151: LD_INT 0
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 0
32170: PUSH
32171: LD_INT 1
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 1
32180: NEG
32181: PUSH
32182: LD_INT 0
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 1
32191: NEG
32192: PUSH
32193: LD_INT 1
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: LD_INT 2
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: LD_INT 2
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 1
32223: NEG
32224: PUSH
32225: LD_INT 1
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 2
32234: NEG
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 2
32245: NEG
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32269: LD_ADDR_VAR 0 52
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: LD_INT 0
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 1
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 0
32317: PUSH
32318: LD_INT 1
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 1
32327: NEG
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 1
32338: NEG
32339: PUSH
32340: LD_INT 1
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 1
32350: NEG
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 1
32362: NEG
32363: PUSH
32364: LD_INT 1
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 2
32373: NEG
32374: PUSH
32375: LD_INT 0
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 2
32384: NEG
32385: PUSH
32386: LD_INT 1
32388: NEG
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 2
32396: NEG
32397: PUSH
32398: LD_INT 2
32400: NEG
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32420: LD_ADDR_VAR 0 53
32424: PUSH
32425: LD_INT 0
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 0
32437: PUSH
32438: LD_INT 1
32440: NEG
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 1
32448: PUSH
32449: LD_INT 0
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 1
32458: PUSH
32459: LD_INT 1
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: LD_INT 1
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 1
32478: NEG
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: NEG
32490: PUSH
32491: LD_INT 1
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: NEG
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 0
32513: PUSH
32514: LD_INT 2
32516: NEG
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 1
32524: PUSH
32525: LD_INT 1
32527: NEG
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 2
32535: PUSH
32536: LD_INT 0
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 2
32545: PUSH
32546: LD_INT 1
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 2
32555: PUSH
32556: LD_INT 2
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: LD_INT 2
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: LD_INT 2
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 1
32585: NEG
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 2
32596: NEG
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 2
32607: NEG
32608: PUSH
32609: LD_INT 1
32611: NEG
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 2
32619: NEG
32620: PUSH
32621: LD_INT 2
32623: NEG
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32650: LD_ADDR_VAR 0 54
32654: PUSH
32655: LD_INT 0
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: LD_INT 1
32670: NEG
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: LD_INT 0
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: PUSH
32689: LD_INT 1
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: LD_INT 1
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 1
32708: NEG
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: LD_INT 2
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 0
32743: PUSH
32744: LD_INT 2
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 1
32754: PUSH
32755: LD_INT 1
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 2
32765: PUSH
32766: LD_INT 0
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 2
32775: PUSH
32776: LD_INT 1
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 2
32785: PUSH
32786: LD_INT 2
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: LD_INT 2
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 0
32805: PUSH
32806: LD_INT 2
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 1
32815: NEG
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 2
32826: NEG
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 2
32837: NEG
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 2
32849: NEG
32850: PUSH
32851: LD_INT 2
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32880: LD_ADDR_VAR 0 55
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: LD_INT 0
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: LD_INT 1
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 1
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: LD_INT 1
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 1
32938: NEG
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 1
32949: NEG
32950: PUSH
32951: LD_INT 1
32953: NEG
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 1
32961: NEG
32962: PUSH
32963: LD_INT 2
32965: NEG
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: LD_INT 2
32976: NEG
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 1
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 2
32995: PUSH
32996: LD_INT 0
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 2
33005: PUSH
33006: LD_INT 1
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: LD_INT 2
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 0
33035: PUSH
33036: LD_INT 2
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 1
33045: NEG
33046: PUSH
33047: LD_INT 1
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 2
33056: NEG
33057: PUSH
33058: LD_INT 0
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 2
33067: NEG
33068: PUSH
33069: LD_INT 1
33071: NEG
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 2
33079: NEG
33080: PUSH
33081: LD_INT 2
33083: NEG
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33110: LD_ADDR_VAR 0 56
33114: PUSH
33115: LD_INT 0
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 1
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 1
33148: PUSH
33149: LD_INT 1
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 0
33158: PUSH
33159: LD_INT 1
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 1
33168: NEG
33169: PUSH
33170: LD_INT 0
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 1
33179: NEG
33180: PUSH
33181: LD_INT 1
33183: NEG
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: LD_INT 2
33195: NEG
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 0
33203: PUSH
33204: LD_INT 2
33206: NEG
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 1
33214: PUSH
33215: LD_INT 1
33217: NEG
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 2
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 2
33235: PUSH
33236: LD_INT 1
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 2
33245: PUSH
33246: LD_INT 2
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 1
33255: PUSH
33256: LD_INT 2
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 0
33265: PUSH
33266: LD_INT 2
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 1
33275: NEG
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 2
33286: NEG
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 2
33297: NEG
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 2
33309: NEG
33310: PUSH
33311: LD_INT 2
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33340: LD_ADDR_VAR 0 57
33344: PUSH
33345: LD_INT 0
33347: PUSH
33348: LD_INT 0
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 0
33357: PUSH
33358: LD_INT 1
33360: NEG
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 1
33368: PUSH
33369: LD_INT 0
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 1
33378: PUSH
33379: LD_INT 1
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 0
33388: PUSH
33389: LD_INT 1
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 1
33398: NEG
33399: PUSH
33400: LD_INT 0
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 1
33409: NEG
33410: PUSH
33411: LD_INT 1
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 1
33421: NEG
33422: PUSH
33423: LD_INT 2
33425: NEG
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 0
33433: PUSH
33434: LD_INT 2
33436: NEG
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: LD_INT 1
33447: NEG
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 2
33455: PUSH
33456: LD_INT 0
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 2
33465: PUSH
33466: LD_INT 1
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: LD_INT 2
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 1
33485: PUSH
33486: LD_INT 2
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: LD_INT 2
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: NEG
33506: PUSH
33507: LD_INT 1
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 2
33516: NEG
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 2
33527: NEG
33528: PUSH
33529: LD_INT 1
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 2
33539: NEG
33540: PUSH
33541: LD_INT 2
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33570: LD_ADDR_VAR 0 58
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: LD_INT 0
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: LD_INT 1
33590: NEG
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: LD_INT 0
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 1
33628: NEG
33629: PUSH
33630: LD_INT 0
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: LD_INT 1
33643: NEG
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 1
33651: NEG
33652: PUSH
33653: LD_INT 2
33655: NEG
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 0
33663: PUSH
33664: LD_INT 2
33666: NEG
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 1
33674: PUSH
33675: LD_INT 1
33677: NEG
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 2
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 2
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 2
33705: PUSH
33706: LD_INT 2
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 1
33715: PUSH
33716: LD_INT 2
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 0
33725: PUSH
33726: LD_INT 2
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 1
33735: NEG
33736: PUSH
33737: LD_INT 1
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 2
33746: NEG
33747: PUSH
33748: LD_INT 0
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 2
33757: NEG
33758: PUSH
33759: LD_INT 1
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 2
33769: NEG
33770: PUSH
33771: LD_INT 2
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33800: LD_ADDR_VAR 0 59
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: LD_INT 1
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 1
33828: PUSH
33829: LD_INT 0
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 1
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 0
33848: PUSH
33849: LD_INT 1
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 1
33858: NEG
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 1
33869: NEG
33870: PUSH
33871: LD_INT 1
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33888: LD_ADDR_VAR 0 60
33892: PUSH
33893: LD_INT 0
33895: PUSH
33896: LD_INT 0
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 0
33905: PUSH
33906: LD_INT 1
33908: NEG
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 1
33916: PUSH
33917: LD_INT 0
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 1
33926: PUSH
33927: LD_INT 1
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 1
33946: NEG
33947: PUSH
33948: LD_INT 0
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 1
33957: NEG
33958: PUSH
33959: LD_INT 1
33961: NEG
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33976: LD_ADDR_VAR 0 61
33980: PUSH
33981: LD_INT 0
33983: PUSH
33984: LD_INT 0
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: LD_INT 1
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 1
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: LD_INT 1
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 0
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 1
34034: NEG
34035: PUSH
34036: LD_INT 0
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 1
34045: NEG
34046: PUSH
34047: LD_INT 1
34049: NEG
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34064: LD_ADDR_VAR 0 62
34068: PUSH
34069: LD_INT 0
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 1
34092: PUSH
34093: LD_INT 0
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 1
34102: PUSH
34103: LD_INT 1
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: LD_INT 1
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: LD_INT 0
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 1
34133: NEG
34134: PUSH
34135: LD_INT 1
34137: NEG
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34152: LD_ADDR_VAR 0 63
34156: PUSH
34157: LD_INT 0
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 0
34169: PUSH
34170: LD_INT 1
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 1
34180: PUSH
34181: LD_INT 0
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 1
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: LD_INT 1
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 1
34210: NEG
34211: PUSH
34212: LD_INT 0
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 1
34221: NEG
34222: PUSH
34223: LD_INT 1
34225: NEG
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34240: LD_ADDR_VAR 0 64
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: LD_INT 1
34260: NEG
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: LD_INT 1
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 0
34288: PUSH
34289: LD_INT 1
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 1
34298: NEG
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 1
34309: NEG
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: ST_TO_ADDR
// end ; 1 :
34328: GO 40225
34330: LD_INT 1
34332: DOUBLE
34333: EQUAL
34334: IFTRUE 34338
34336: GO 36961
34338: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34339: LD_ADDR_VAR 0 11
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: LD_INT 3
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: LD_INT 3
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 1
34369: PUSH
34370: LD_INT 2
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: LIST
34382: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34383: LD_ADDR_VAR 0 12
34387: PUSH
34388: LD_INT 2
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 3
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 3
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: LIST
34423: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34424: LD_ADDR_VAR 0 13
34428: PUSH
34429: LD_INT 3
34431: PUSH
34432: LD_INT 2
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 3
34441: PUSH
34442: LD_INT 3
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 2
34451: PUSH
34452: LD_INT 3
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: LIST
34463: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34464: LD_ADDR_VAR 0 14
34468: PUSH
34469: LD_INT 1
34471: PUSH
34472: LD_INT 3
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: LD_INT 3
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 1
34491: NEG
34492: PUSH
34493: LD_INT 2
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: LIST
34504: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34505: LD_ADDR_VAR 0 15
34509: PUSH
34510: LD_INT 2
34512: NEG
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 3
34523: NEG
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 3
34534: NEG
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34549: LD_ADDR_VAR 0 16
34553: PUSH
34554: LD_INT 2
34556: NEG
34557: PUSH
34558: LD_INT 3
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 3
34568: NEG
34569: PUSH
34570: LD_INT 2
34572: NEG
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 3
34580: NEG
34581: PUSH
34582: LD_INT 3
34584: NEG
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: LIST
34594: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34595: LD_ADDR_VAR 0 17
34599: PUSH
34600: LD_INT 1
34602: NEG
34603: PUSH
34604: LD_INT 3
34606: NEG
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 0
34614: PUSH
34615: LD_INT 3
34617: NEG
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 1
34625: PUSH
34626: LD_INT 2
34628: NEG
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34639: LD_ADDR_VAR 0 18
34643: PUSH
34644: LD_INT 2
34646: PUSH
34647: LD_INT 1
34649: NEG
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 3
34657: PUSH
34658: LD_INT 0
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 3
34667: PUSH
34668: LD_INT 1
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: LIST
34679: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34680: LD_ADDR_VAR 0 19
34684: PUSH
34685: LD_INT 3
34687: PUSH
34688: LD_INT 2
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 3
34697: PUSH
34698: LD_INT 3
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 2
34707: PUSH
34708: LD_INT 3
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: LIST
34719: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34720: LD_ADDR_VAR 0 20
34724: PUSH
34725: LD_INT 1
34727: PUSH
34728: LD_INT 3
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: LD_INT 3
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 1
34747: NEG
34748: PUSH
34749: LD_INT 2
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: LIST
34760: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34761: LD_ADDR_VAR 0 21
34765: PUSH
34766: LD_INT 2
34768: NEG
34769: PUSH
34770: LD_INT 1
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 3
34779: NEG
34780: PUSH
34781: LD_INT 0
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 3
34790: NEG
34791: PUSH
34792: LD_INT 1
34794: NEG
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: LIST
34804: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34805: LD_ADDR_VAR 0 22
34809: PUSH
34810: LD_INT 2
34812: NEG
34813: PUSH
34814: LD_INT 3
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 3
34824: NEG
34825: PUSH
34826: LD_INT 2
34828: NEG
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 3
34836: NEG
34837: PUSH
34838: LD_INT 3
34840: NEG
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: LIST
34850: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
34851: LD_ADDR_VAR 0 23
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: LD_INT 3
34861: NEG
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: LD_INT 4
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 1
34881: PUSH
34882: LD_INT 3
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: LIST
34894: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
34895: LD_ADDR_VAR 0 24
34899: PUSH
34900: LD_INT 3
34902: PUSH
34903: LD_INT 0
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 3
34912: PUSH
34913: LD_INT 1
34915: NEG
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 4
34923: PUSH
34924: LD_INT 1
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: LIST
34935: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34936: LD_ADDR_VAR 0 25
34940: PUSH
34941: LD_INT 3
34943: PUSH
34944: LD_INT 3
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 4
34953: PUSH
34954: LD_INT 3
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 3
34963: PUSH
34964: LD_INT 4
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: LIST
34975: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34976: LD_ADDR_VAR 0 26
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: LD_INT 3
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: LD_INT 4
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 1
35003: NEG
35004: PUSH
35005: LD_INT 3
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: LIST
35016: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35017: LD_ADDR_VAR 0 27
35021: PUSH
35022: LD_INT 3
35024: NEG
35025: PUSH
35026: LD_INT 0
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 3
35035: NEG
35036: PUSH
35037: LD_INT 1
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 4
35046: NEG
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35061: LD_ADDR_VAR 0 28
35065: PUSH
35066: LD_INT 3
35068: NEG
35069: PUSH
35070: LD_INT 3
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 3
35080: NEG
35081: PUSH
35082: LD_INT 4
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 4
35092: NEG
35093: PUSH
35094: LD_INT 3
35096: NEG
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: LIST
35106: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35107: LD_ADDR_VAR 0 29
35111: PUSH
35112: LD_INT 1
35114: NEG
35115: PUSH
35116: LD_INT 3
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: LD_INT 3
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: LD_INT 2
35140: NEG
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 1
35148: NEG
35149: PUSH
35150: LD_INT 4
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: LD_INT 4
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 1
35171: PUSH
35172: LD_INT 3
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: LD_INT 5
35186: NEG
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 0
35194: PUSH
35195: LD_INT 5
35197: NEG
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 1
35205: PUSH
35206: LD_INT 4
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: LD_INT 6
35220: NEG
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 0
35228: PUSH
35229: LD_INT 6
35231: NEG
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 1
35239: PUSH
35240: LD_INT 5
35242: NEG
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35262: LD_ADDR_VAR 0 30
35266: PUSH
35267: LD_INT 2
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 3
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 3
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 3
35300: PUSH
35301: LD_INT 1
35303: NEG
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 4
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 4
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 4
35331: PUSH
35332: LD_INT 1
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 5
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 5
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 5
35362: PUSH
35363: LD_INT 1
35365: NEG
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 6
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 6
35383: PUSH
35384: LD_INT 1
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
35405: LD_ADDR_VAR 0 31
35409: PUSH
35410: LD_INT 3
35412: PUSH
35413: LD_INT 2
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 3
35422: PUSH
35423: LD_INT 3
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 2
35432: PUSH
35433: LD_INT 3
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 4
35442: PUSH
35443: LD_INT 3
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 4
35452: PUSH
35453: LD_INT 4
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 3
35462: PUSH
35463: LD_INT 4
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 5
35472: PUSH
35473: LD_INT 4
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 5
35482: PUSH
35483: LD_INT 5
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 4
35492: PUSH
35493: LD_INT 5
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 6
35502: PUSH
35503: LD_INT 5
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 6
35512: PUSH
35513: LD_INT 6
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 5
35522: PUSH
35523: LD_INT 6
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
35544: LD_ADDR_VAR 0 32
35548: PUSH
35549: LD_INT 1
35551: PUSH
35552: LD_INT 3
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: LD_INT 3
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 1
35571: NEG
35572: PUSH
35573: LD_INT 2
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 1
35582: PUSH
35583: LD_INT 4
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: LD_INT 4
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 1
35602: NEG
35603: PUSH
35604: LD_INT 3
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 1
35613: PUSH
35614: LD_INT 5
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 0
35623: PUSH
35624: LD_INT 5
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 1
35633: NEG
35634: PUSH
35635: LD_INT 4
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 1
35644: PUSH
35645: LD_INT 6
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: LD_INT 6
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 1
35664: NEG
35665: PUSH
35666: LD_INT 5
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35687: LD_ADDR_VAR 0 33
35691: PUSH
35692: LD_INT 2
35694: NEG
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 3
35705: NEG
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 3
35716: NEG
35717: PUSH
35718: LD_INT 1
35720: NEG
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 3
35728: NEG
35729: PUSH
35730: LD_INT 1
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 4
35739: NEG
35740: PUSH
35741: LD_INT 0
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 4
35750: NEG
35751: PUSH
35752: LD_INT 1
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 4
35762: NEG
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 5
35773: NEG
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 5
35784: NEG
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 5
35796: NEG
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 6
35807: NEG
35808: PUSH
35809: LD_INT 0
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 6
35818: NEG
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
35842: LD_ADDR_VAR 0 34
35846: PUSH
35847: LD_INT 2
35849: NEG
35850: PUSH
35851: LD_INT 3
35853: NEG
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 3
35861: NEG
35862: PUSH
35863: LD_INT 2
35865: NEG
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 3
35873: NEG
35874: PUSH
35875: LD_INT 3
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 3
35885: NEG
35886: PUSH
35887: LD_INT 4
35889: NEG
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 4
35897: NEG
35898: PUSH
35899: LD_INT 3
35901: NEG
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 4
35909: NEG
35910: PUSH
35911: LD_INT 4
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 4
35921: NEG
35922: PUSH
35923: LD_INT 5
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 5
35933: NEG
35934: PUSH
35935: LD_INT 4
35937: NEG
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 5
35945: NEG
35946: PUSH
35947: LD_INT 5
35949: NEG
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 5
35957: NEG
35958: PUSH
35959: LD_INT 6
35961: NEG
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 6
35969: NEG
35970: PUSH
35971: LD_INT 5
35973: NEG
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 6
35981: NEG
35982: PUSH
35983: LD_INT 6
35985: NEG
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36005: LD_ADDR_VAR 0 41
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: LD_INT 2
36015: NEG
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: NEG
36024: PUSH
36025: LD_INT 3
36027: NEG
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: PUSH
36036: LD_INT 2
36038: NEG
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: LIST
36048: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36049: LD_ADDR_VAR 0 42
36053: PUSH
36054: LD_INT 2
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 2
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 3
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: LIST
36089: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36090: LD_ADDR_VAR 0 43
36094: PUSH
36095: LD_INT 2
36097: PUSH
36098: LD_INT 2
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 3
36107: PUSH
36108: LD_INT 2
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 2
36117: PUSH
36118: LD_INT 3
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: LIST
36129: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36130: LD_ADDR_VAR 0 44
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: LD_INT 2
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: PUSH
36148: LD_INT 3
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: LD_INT 2
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: LIST
36170: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36171: LD_ADDR_VAR 0 45
36175: PUSH
36176: LD_INT 2
36178: NEG
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 2
36189: NEG
36190: PUSH
36191: LD_INT 1
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 3
36200: NEG
36201: PUSH
36202: LD_INT 1
36204: NEG
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: LIST
36214: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36215: LD_ADDR_VAR 0 46
36219: PUSH
36220: LD_INT 2
36222: NEG
36223: PUSH
36224: LD_INT 2
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 2
36234: NEG
36235: PUSH
36236: LD_INT 3
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 3
36246: NEG
36247: PUSH
36248: LD_INT 2
36250: NEG
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: LIST
36260: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36261: LD_ADDR_VAR 0 47
36265: PUSH
36266: LD_INT 2
36268: NEG
36269: PUSH
36270: LD_INT 3
36272: NEG
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: NEG
36281: PUSH
36282: LD_INT 3
36284: NEG
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36294: LD_ADDR_VAR 0 48
36298: PUSH
36299: LD_INT 1
36301: PUSH
36302: LD_INT 2
36304: NEG
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 2
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36325: LD_ADDR_VAR 0 49
36329: PUSH
36330: LD_INT 3
36332: PUSH
36333: LD_INT 1
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 3
36342: PUSH
36343: LD_INT 2
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
36354: LD_ADDR_VAR 0 50
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: LD_INT 3
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: LD_INT 3
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36383: LD_ADDR_VAR 0 51
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 2
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 2
36401: NEG
36402: PUSH
36403: LD_INT 1
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36414: LD_ADDR_VAR 0 52
36418: PUSH
36419: LD_INT 3
36421: NEG
36422: PUSH
36423: LD_INT 1
36425: NEG
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 3
36433: NEG
36434: PUSH
36435: LD_INT 2
36437: NEG
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36447: LD_ADDR_VAR 0 53
36451: PUSH
36452: LD_INT 1
36454: NEG
36455: PUSH
36456: LD_INT 3
36458: NEG
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: LD_INT 3
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: LD_INT 2
36480: NEG
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: LIST
36490: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36491: LD_ADDR_VAR 0 54
36495: PUSH
36496: LD_INT 2
36498: PUSH
36499: LD_INT 1
36501: NEG
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 3
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 3
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: LIST
36531: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36532: LD_ADDR_VAR 0 55
36536: PUSH
36537: LD_INT 3
36539: PUSH
36540: LD_INT 2
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 3
36549: PUSH
36550: LD_INT 3
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 2
36559: PUSH
36560: LD_INT 3
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: LIST
36571: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36572: LD_ADDR_VAR 0 56
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: LD_INT 3
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: LD_INT 3
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: LD_INT 2
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: LIST
36612: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36613: LD_ADDR_VAR 0 57
36617: PUSH
36618: LD_INT 2
36620: NEG
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 3
36631: NEG
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 3
36642: NEG
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: LIST
36656: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36657: LD_ADDR_VAR 0 58
36661: PUSH
36662: LD_INT 2
36664: NEG
36665: PUSH
36666: LD_INT 3
36668: NEG
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 3
36676: NEG
36677: PUSH
36678: LD_INT 2
36680: NEG
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 3
36688: NEG
36689: PUSH
36690: LD_INT 3
36692: NEG
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: LIST
36702: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36703: LD_ADDR_VAR 0 59
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: PUSH
36712: LD_INT 2
36714: NEG
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: LD_INT 2
36725: NEG
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 1
36733: PUSH
36734: LD_INT 1
36736: NEG
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: LIST
36746: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36747: LD_ADDR_VAR 0 60
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: LD_INT 1
36757: NEG
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 2
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 2
36775: PUSH
36776: LD_INT 1
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: LIST
36787: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36788: LD_ADDR_VAR 0 61
36792: PUSH
36793: LD_INT 2
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 2
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: LD_INT 2
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: LIST
36827: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36828: LD_ADDR_VAR 0 62
36832: PUSH
36833: LD_INT 1
36835: PUSH
36836: LD_INT 2
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: LD_INT 2
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: LIST
36868: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36869: LD_ADDR_VAR 0 63
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: LD_INT 1
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 2
36887: NEG
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 2
36898: NEG
36899: PUSH
36900: LD_INT 1
36902: NEG
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: LIST
36912: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36913: LD_ADDR_VAR 0 64
36917: PUSH
36918: LD_INT 1
36920: NEG
36921: PUSH
36922: LD_INT 2
36924: NEG
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 2
36932: NEG
36933: PUSH
36934: LD_INT 1
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 2
36944: NEG
36945: PUSH
36946: LD_INT 2
36948: NEG
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: LIST
36958: ST_TO_ADDR
// end ; 2 :
36959: GO 40225
36961: LD_INT 2
36963: DOUBLE
36964: EQUAL
36965: IFTRUE 36969
36967: GO 40224
36969: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36970: LD_ADDR_VAR 0 29
36974: PUSH
36975: LD_INT 4
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 4
36987: PUSH
36988: LD_INT 1
36990: NEG
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 5
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 5
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 4
37018: PUSH
37019: LD_INT 1
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 3
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 3
37038: PUSH
37039: LD_INT 1
37041: NEG
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 3
37049: PUSH
37050: LD_INT 2
37052: NEG
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 5
37060: PUSH
37061: LD_INT 2
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 3
37070: PUSH
37071: LD_INT 3
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 3
37080: PUSH
37081: LD_INT 2
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 4
37090: PUSH
37091: LD_INT 3
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 4
37100: PUSH
37101: LD_INT 4
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 3
37110: PUSH
37111: LD_INT 4
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 2
37120: PUSH
37121: LD_INT 3
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 2
37130: PUSH
37131: LD_INT 2
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 4
37140: PUSH
37141: LD_INT 2
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 2
37150: PUSH
37151: LD_INT 4
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 0
37160: PUSH
37161: LD_INT 4
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: LD_INT 3
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 1
37180: PUSH
37181: LD_INT 4
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 1
37190: PUSH
37191: LD_INT 5
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 0
37200: PUSH
37201: LD_INT 5
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: LD_INT 4
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 1
37221: NEG
37222: PUSH
37223: LD_INT 3
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 2
37232: PUSH
37233: LD_INT 5
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 2
37242: NEG
37243: PUSH
37244: LD_INT 3
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 3
37253: NEG
37254: PUSH
37255: LD_INT 0
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 3
37264: NEG
37265: PUSH
37266: LD_INT 1
37268: NEG
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 2
37276: NEG
37277: PUSH
37278: LD_INT 0
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: NEG
37288: PUSH
37289: LD_INT 1
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 3
37298: NEG
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 4
37309: NEG
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 4
37320: NEG
37321: PUSH
37322: LD_INT 1
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 4
37332: NEG
37333: PUSH
37334: LD_INT 2
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 2
37344: NEG
37345: PUSH
37346: LD_INT 2
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 4
37355: NEG
37356: PUSH
37357: LD_INT 4
37359: NEG
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 4
37367: NEG
37368: PUSH
37369: LD_INT 5
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 3
37379: NEG
37380: PUSH
37381: LD_INT 4
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 3
37391: NEG
37392: PUSH
37393: LD_INT 3
37395: NEG
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 4
37403: NEG
37404: PUSH
37405: LD_INT 3
37407: NEG
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 5
37415: NEG
37416: PUSH
37417: LD_INT 4
37419: NEG
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 5
37427: NEG
37428: PUSH
37429: LD_INT 5
37431: NEG
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 3
37439: NEG
37440: PUSH
37441: LD_INT 5
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 5
37451: NEG
37452: PUSH
37453: LD_INT 3
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37508: LD_ADDR_VAR 0 30
37512: PUSH
37513: LD_INT 4
37515: PUSH
37516: LD_INT 4
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 4
37525: PUSH
37526: LD_INT 3
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 5
37535: PUSH
37536: LD_INT 4
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 5
37545: PUSH
37546: LD_INT 5
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 4
37555: PUSH
37556: LD_INT 5
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 3
37565: PUSH
37566: LD_INT 4
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 3
37575: PUSH
37576: LD_INT 3
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 5
37585: PUSH
37586: LD_INT 3
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 3
37595: PUSH
37596: LD_INT 5
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: LD_INT 3
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 0
37615: PUSH
37616: LD_INT 2
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 1
37625: PUSH
37626: LD_INT 3
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: LD_INT 4
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 0
37645: PUSH
37646: LD_INT 4
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: NEG
37656: PUSH
37657: LD_INT 3
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 1
37666: NEG
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 2
37677: PUSH
37678: LD_INT 4
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 2
37687: NEG
37688: PUSH
37689: LD_INT 2
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 4
37698: NEG
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 4
37709: NEG
37710: PUSH
37711: LD_INT 1
37713: NEG
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 3
37721: NEG
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 3
37732: NEG
37733: PUSH
37734: LD_INT 1
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 4
37743: NEG
37744: PUSH
37745: LD_INT 1
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 5
37754: NEG
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 5
37765: NEG
37766: PUSH
37767: LD_INT 1
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 5
37777: NEG
37778: PUSH
37779: LD_INT 2
37781: NEG
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 3
37789: NEG
37790: PUSH
37791: LD_INT 2
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 3
37800: NEG
37801: PUSH
37802: LD_INT 3
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 3
37812: NEG
37813: PUSH
37814: LD_INT 4
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 2
37824: NEG
37825: PUSH
37826: LD_INT 3
37828: NEG
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 2
37836: NEG
37837: PUSH
37838: LD_INT 2
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 3
37848: NEG
37849: PUSH
37850: LD_INT 2
37852: NEG
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 4
37860: NEG
37861: PUSH
37862: LD_INT 3
37864: NEG
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 4
37872: NEG
37873: PUSH
37874: LD_INT 4
37876: NEG
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 2
37884: NEG
37885: PUSH
37886: LD_INT 4
37888: NEG
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 4
37896: NEG
37897: PUSH
37898: LD_INT 2
37900: NEG
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 0
37908: PUSH
37909: LD_INT 4
37911: NEG
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: LD_INT 5
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 1
37930: PUSH
37931: LD_INT 4
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: LD_INT 3
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: LD_INT 3
37955: NEG
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: NEG
37964: PUSH
37965: LD_INT 4
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: LD_INT 5
37979: NEG
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 2
37987: PUSH
37988: LD_INT 3
37990: NEG
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 2
37998: NEG
37999: PUSH
38000: LD_INT 5
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38055: LD_ADDR_VAR 0 31
38059: PUSH
38060: LD_INT 0
38062: PUSH
38063: LD_INT 4
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: LD_INT 3
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: LD_INT 4
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 1
38092: PUSH
38093: LD_INT 5
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: LD_INT 5
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 1
38112: NEG
38113: PUSH
38114: LD_INT 4
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: NEG
38124: PUSH
38125: LD_INT 3
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 2
38134: PUSH
38135: LD_INT 5
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 2
38144: NEG
38145: PUSH
38146: LD_INT 3
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 3
38155: NEG
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 3
38166: NEG
38167: PUSH
38168: LD_INT 1
38170: NEG
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 2
38178: NEG
38179: PUSH
38180: LD_INT 0
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 2
38189: NEG
38190: PUSH
38191: LD_INT 1
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 3
38200: NEG
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 4
38211: NEG
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 4
38222: NEG
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 4
38234: NEG
38235: PUSH
38236: LD_INT 2
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 2
38246: NEG
38247: PUSH
38248: LD_INT 2
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 4
38257: NEG
38258: PUSH
38259: LD_INT 4
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 4
38269: NEG
38270: PUSH
38271: LD_INT 5
38273: NEG
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 3
38281: NEG
38282: PUSH
38283: LD_INT 4
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 3
38293: NEG
38294: PUSH
38295: LD_INT 3
38297: NEG
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 4
38305: NEG
38306: PUSH
38307: LD_INT 3
38309: NEG
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 5
38317: NEG
38318: PUSH
38319: LD_INT 4
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 5
38329: NEG
38330: PUSH
38331: LD_INT 5
38333: NEG
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 3
38341: NEG
38342: PUSH
38343: LD_INT 5
38345: NEG
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 5
38353: NEG
38354: PUSH
38355: LD_INT 3
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: LD_INT 3
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: LD_INT 4
38379: NEG
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 1
38387: PUSH
38388: LD_INT 3
38390: NEG
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 1
38398: PUSH
38399: LD_INT 2
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: LD_INT 2
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: LD_INT 3
38424: NEG
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: LD_INT 4
38436: NEG
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 2
38444: PUSH
38445: LD_INT 2
38447: NEG
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 2
38455: NEG
38456: PUSH
38457: LD_INT 4
38459: NEG
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 4
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 4
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 5
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 5
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 4
38508: PUSH
38509: LD_INT 1
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 3
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 3
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 3
38539: PUSH
38540: LD_INT 2
38542: NEG
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 5
38550: PUSH
38551: LD_INT 2
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
38605: LD_ADDR_VAR 0 32
38609: PUSH
38610: LD_INT 4
38612: NEG
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 4
38623: NEG
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 3
38635: NEG
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 3
38646: NEG
38647: PUSH
38648: LD_INT 1
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 4
38657: NEG
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 5
38668: NEG
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 5
38679: NEG
38680: PUSH
38681: LD_INT 1
38683: NEG
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 5
38691: NEG
38692: PUSH
38693: LD_INT 2
38695: NEG
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 3
38703: NEG
38704: PUSH
38705: LD_INT 2
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 3
38714: NEG
38715: PUSH
38716: LD_INT 3
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 3
38726: NEG
38727: PUSH
38728: LD_INT 4
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 2
38738: NEG
38739: PUSH
38740: LD_INT 3
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 2
38750: NEG
38751: PUSH
38752: LD_INT 2
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 3
38762: NEG
38763: PUSH
38764: LD_INT 2
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 4
38774: NEG
38775: PUSH
38776: LD_INT 3
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 4
38786: NEG
38787: PUSH
38788: LD_INT 4
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 2
38798: NEG
38799: PUSH
38800: LD_INT 4
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 4
38810: NEG
38811: PUSH
38812: LD_INT 2
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: LD_INT 4
38825: NEG
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 5
38836: NEG
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 1
38844: PUSH
38845: LD_INT 4
38847: NEG
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 1
38855: PUSH
38856: LD_INT 3
38858: NEG
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: LD_INT 3
38869: NEG
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: LD_INT 4
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: LD_INT 5
38893: NEG
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 2
38901: PUSH
38902: LD_INT 3
38904: NEG
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 2
38912: NEG
38913: PUSH
38914: LD_INT 5
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 3
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 3
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 4
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 4
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 3
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 2
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 2
38996: PUSH
38997: LD_INT 2
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 4
39007: PUSH
39008: LD_INT 2
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 4
39017: PUSH
39018: LD_INT 4
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 4
39027: PUSH
39028: LD_INT 3
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 5
39037: PUSH
39038: LD_INT 4
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 5
39047: PUSH
39048: LD_INT 5
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 4
39057: PUSH
39058: LD_INT 5
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 3
39067: PUSH
39068: LD_INT 4
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 3
39077: PUSH
39078: LD_INT 3
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 5
39087: PUSH
39088: LD_INT 3
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 3
39097: PUSH
39098: LD_INT 5
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39152: LD_ADDR_VAR 0 33
39156: PUSH
39157: LD_INT 4
39159: NEG
39160: PUSH
39161: LD_INT 4
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 4
39171: NEG
39172: PUSH
39173: LD_INT 5
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 3
39183: NEG
39184: PUSH
39185: LD_INT 4
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 3
39195: NEG
39196: PUSH
39197: LD_INT 3
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 4
39207: NEG
39208: PUSH
39209: LD_INT 3
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 5
39219: NEG
39220: PUSH
39221: LD_INT 4
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 5
39231: NEG
39232: PUSH
39233: LD_INT 5
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 3
39243: NEG
39244: PUSH
39245: LD_INT 5
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 5
39255: NEG
39256: PUSH
39257: LD_INT 3
39259: NEG
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 0
39267: PUSH
39268: LD_INT 3
39270: NEG
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: LD_INT 4
39281: NEG
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: LD_INT 3
39292: NEG
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 1
39300: PUSH
39301: LD_INT 2
39303: NEG
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 2
39314: NEG
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 1
39322: NEG
39323: PUSH
39324: LD_INT 3
39326: NEG
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: LD_INT 4
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 2
39346: PUSH
39347: LD_INT 2
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 2
39357: NEG
39358: PUSH
39359: LD_INT 4
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 4
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 4
39379: PUSH
39380: LD_INT 1
39382: NEG
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 5
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 5
39400: PUSH
39401: LD_INT 1
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 4
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 3
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 3
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 3
39441: PUSH
39442: LD_INT 2
39444: NEG
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 5
39452: PUSH
39453: LD_INT 2
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 3
39462: PUSH
39463: LD_INT 3
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 3
39472: PUSH
39473: LD_INT 2
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 4
39482: PUSH
39483: LD_INT 3
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 4
39492: PUSH
39493: LD_INT 4
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 3
39502: PUSH
39503: LD_INT 4
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 2
39512: PUSH
39513: LD_INT 3
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 4
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 2
39542: PUSH
39543: LD_INT 4
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 0
39552: PUSH
39553: LD_INT 4
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: LD_INT 3
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: PUSH
39573: LD_INT 4
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: LD_INT 5
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: LD_INT 5
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 1
39602: NEG
39603: PUSH
39604: LD_INT 4
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 1
39613: NEG
39614: PUSH
39615: LD_INT 3
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: LD_INT 5
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 2
39634: NEG
39635: PUSH
39636: LD_INT 3
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39690: LD_ADDR_VAR 0 34
39694: PUSH
39695: LD_INT 0
39697: PUSH
39698: LD_INT 4
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: LD_INT 5
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: PUSH
39720: LD_INT 4
39722: NEG
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: LD_INT 3
39733: NEG
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: LD_INT 3
39744: NEG
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: LD_INT 4
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: LD_INT 5
39768: NEG
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 2
39776: PUSH
39777: LD_INT 3
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 2
39787: NEG
39788: PUSH
39789: LD_INT 5
39791: NEG
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 3
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 3
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 4
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 4
39830: PUSH
39831: LD_INT 1
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 3
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 2
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: LD_INT 1
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 2
39871: PUSH
39872: LD_INT 2
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 4
39882: PUSH
39883: LD_INT 2
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 4
39892: PUSH
39893: LD_INT 4
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 4
39902: PUSH
39903: LD_INT 3
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 5
39912: PUSH
39913: LD_INT 4
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 5
39922: PUSH
39923: LD_INT 5
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 4
39932: PUSH
39933: LD_INT 5
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 3
39942: PUSH
39943: LD_INT 4
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 3
39952: PUSH
39953: LD_INT 3
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 5
39962: PUSH
39963: LD_INT 3
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 3
39972: PUSH
39973: LD_INT 5
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 0
39982: PUSH
39983: LD_INT 3
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: LD_INT 2
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 1
40002: PUSH
40003: LD_INT 3
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: LD_INT 4
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: LD_INT 4
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: NEG
40033: PUSH
40034: LD_INT 3
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: NEG
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: LD_INT 4
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 2
40064: NEG
40065: PUSH
40066: LD_INT 2
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 4
40075: NEG
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 4
40086: NEG
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 3
40098: NEG
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 3
40109: NEG
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 4
40120: NEG
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 5
40131: NEG
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 5
40142: NEG
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 5
40154: NEG
40155: PUSH
40156: LD_INT 2
40158: NEG
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 3
40166: NEG
40167: PUSH
40168: LD_INT 2
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: ST_TO_ADDR
// end ; end ;
40222: GO 40225
40224: POP
// case btype of b_depot , b_warehouse :
40225: LD_VAR 0 1
40229: PUSH
40230: LD_INT 0
40232: DOUBLE
40233: EQUAL
40234: IFTRUE 40244
40236: LD_INT 1
40238: DOUBLE
40239: EQUAL
40240: IFTRUE 40244
40242: GO 40445
40244: POP
// case nation of nation_american :
40245: LD_VAR 0 5
40249: PUSH
40250: LD_INT 1
40252: DOUBLE
40253: EQUAL
40254: IFTRUE 40258
40256: GO 40314
40258: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40259: LD_ADDR_VAR 0 9
40263: PUSH
40264: LD_VAR 0 11
40268: PUSH
40269: LD_VAR 0 12
40273: PUSH
40274: LD_VAR 0 13
40278: PUSH
40279: LD_VAR 0 14
40283: PUSH
40284: LD_VAR 0 15
40288: PUSH
40289: LD_VAR 0 16
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: PUSH
40302: LD_VAR 0 4
40306: PUSH
40307: LD_INT 1
40309: PLUS
40310: ARRAY
40311: ST_TO_ADDR
40312: GO 40443
40314: LD_INT 2
40316: DOUBLE
40317: EQUAL
40318: IFTRUE 40322
40320: GO 40378
40322: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
40323: LD_ADDR_VAR 0 9
40327: PUSH
40328: LD_VAR 0 17
40332: PUSH
40333: LD_VAR 0 18
40337: PUSH
40338: LD_VAR 0 19
40342: PUSH
40343: LD_VAR 0 20
40347: PUSH
40348: LD_VAR 0 21
40352: PUSH
40353: LD_VAR 0 22
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: PUSH
40366: LD_VAR 0 4
40370: PUSH
40371: LD_INT 1
40373: PLUS
40374: ARRAY
40375: ST_TO_ADDR
40376: GO 40443
40378: LD_INT 3
40380: DOUBLE
40381: EQUAL
40382: IFTRUE 40386
40384: GO 40442
40386: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
40387: LD_ADDR_VAR 0 9
40391: PUSH
40392: LD_VAR 0 23
40396: PUSH
40397: LD_VAR 0 24
40401: PUSH
40402: LD_VAR 0 25
40406: PUSH
40407: LD_VAR 0 26
40411: PUSH
40412: LD_VAR 0 27
40416: PUSH
40417: LD_VAR 0 28
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: PUSH
40430: LD_VAR 0 4
40434: PUSH
40435: LD_INT 1
40437: PLUS
40438: ARRAY
40439: ST_TO_ADDR
40440: GO 40443
40442: POP
40443: GO 40998
40445: LD_INT 2
40447: DOUBLE
40448: EQUAL
40449: IFTRUE 40459
40451: LD_INT 3
40453: DOUBLE
40454: EQUAL
40455: IFTRUE 40459
40457: GO 40515
40459: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
40460: LD_ADDR_VAR 0 9
40464: PUSH
40465: LD_VAR 0 29
40469: PUSH
40470: LD_VAR 0 30
40474: PUSH
40475: LD_VAR 0 31
40479: PUSH
40480: LD_VAR 0 32
40484: PUSH
40485: LD_VAR 0 33
40489: PUSH
40490: LD_VAR 0 34
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: PUSH
40503: LD_VAR 0 4
40507: PUSH
40508: LD_INT 1
40510: PLUS
40511: ARRAY
40512: ST_TO_ADDR
40513: GO 40998
40515: LD_INT 16
40517: DOUBLE
40518: EQUAL
40519: IFTRUE 40577
40521: LD_INT 17
40523: DOUBLE
40524: EQUAL
40525: IFTRUE 40577
40527: LD_INT 18
40529: DOUBLE
40530: EQUAL
40531: IFTRUE 40577
40533: LD_INT 19
40535: DOUBLE
40536: EQUAL
40537: IFTRUE 40577
40539: LD_INT 22
40541: DOUBLE
40542: EQUAL
40543: IFTRUE 40577
40545: LD_INT 20
40547: DOUBLE
40548: EQUAL
40549: IFTRUE 40577
40551: LD_INT 21
40553: DOUBLE
40554: EQUAL
40555: IFTRUE 40577
40557: LD_INT 23
40559: DOUBLE
40560: EQUAL
40561: IFTRUE 40577
40563: LD_INT 24
40565: DOUBLE
40566: EQUAL
40567: IFTRUE 40577
40569: LD_INT 25
40571: DOUBLE
40572: EQUAL
40573: IFTRUE 40577
40575: GO 40633
40577: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
40578: LD_ADDR_VAR 0 9
40582: PUSH
40583: LD_VAR 0 35
40587: PUSH
40588: LD_VAR 0 36
40592: PUSH
40593: LD_VAR 0 37
40597: PUSH
40598: LD_VAR 0 38
40602: PUSH
40603: LD_VAR 0 39
40607: PUSH
40608: LD_VAR 0 40
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: PUSH
40621: LD_VAR 0 4
40625: PUSH
40626: LD_INT 1
40628: PLUS
40629: ARRAY
40630: ST_TO_ADDR
40631: GO 40998
40633: LD_INT 6
40635: DOUBLE
40636: EQUAL
40637: IFTRUE 40689
40639: LD_INT 7
40641: DOUBLE
40642: EQUAL
40643: IFTRUE 40689
40645: LD_INT 8
40647: DOUBLE
40648: EQUAL
40649: IFTRUE 40689
40651: LD_INT 13
40653: DOUBLE
40654: EQUAL
40655: IFTRUE 40689
40657: LD_INT 12
40659: DOUBLE
40660: EQUAL
40661: IFTRUE 40689
40663: LD_INT 15
40665: DOUBLE
40666: EQUAL
40667: IFTRUE 40689
40669: LD_INT 11
40671: DOUBLE
40672: EQUAL
40673: IFTRUE 40689
40675: LD_INT 14
40677: DOUBLE
40678: EQUAL
40679: IFTRUE 40689
40681: LD_INT 10
40683: DOUBLE
40684: EQUAL
40685: IFTRUE 40689
40687: GO 40745
40689: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40690: LD_ADDR_VAR 0 9
40694: PUSH
40695: LD_VAR 0 41
40699: PUSH
40700: LD_VAR 0 42
40704: PUSH
40705: LD_VAR 0 43
40709: PUSH
40710: LD_VAR 0 44
40714: PUSH
40715: LD_VAR 0 45
40719: PUSH
40720: LD_VAR 0 46
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: PUSH
40733: LD_VAR 0 4
40737: PUSH
40738: LD_INT 1
40740: PLUS
40741: ARRAY
40742: ST_TO_ADDR
40743: GO 40998
40745: LD_INT 36
40747: DOUBLE
40748: EQUAL
40749: IFTRUE 40753
40751: GO 40809
40753: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40754: LD_ADDR_VAR 0 9
40758: PUSH
40759: LD_VAR 0 47
40763: PUSH
40764: LD_VAR 0 48
40768: PUSH
40769: LD_VAR 0 49
40773: PUSH
40774: LD_VAR 0 50
40778: PUSH
40779: LD_VAR 0 51
40783: PUSH
40784: LD_VAR 0 52
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: PUSH
40797: LD_VAR 0 4
40801: PUSH
40802: LD_INT 1
40804: PLUS
40805: ARRAY
40806: ST_TO_ADDR
40807: GO 40998
40809: LD_INT 4
40811: DOUBLE
40812: EQUAL
40813: IFTRUE 40835
40815: LD_INT 5
40817: DOUBLE
40818: EQUAL
40819: IFTRUE 40835
40821: LD_INT 34
40823: DOUBLE
40824: EQUAL
40825: IFTRUE 40835
40827: LD_INT 37
40829: DOUBLE
40830: EQUAL
40831: IFTRUE 40835
40833: GO 40891
40835: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
40836: LD_ADDR_VAR 0 9
40840: PUSH
40841: LD_VAR 0 53
40845: PUSH
40846: LD_VAR 0 54
40850: PUSH
40851: LD_VAR 0 55
40855: PUSH
40856: LD_VAR 0 56
40860: PUSH
40861: LD_VAR 0 57
40865: PUSH
40866: LD_VAR 0 58
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: PUSH
40879: LD_VAR 0 4
40883: PUSH
40884: LD_INT 1
40886: PLUS
40887: ARRAY
40888: ST_TO_ADDR
40889: GO 40998
40891: LD_INT 31
40893: DOUBLE
40894: EQUAL
40895: IFTRUE 40941
40897: LD_INT 32
40899: DOUBLE
40900: EQUAL
40901: IFTRUE 40941
40903: LD_INT 33
40905: DOUBLE
40906: EQUAL
40907: IFTRUE 40941
40909: LD_INT 27
40911: DOUBLE
40912: EQUAL
40913: IFTRUE 40941
40915: LD_INT 26
40917: DOUBLE
40918: EQUAL
40919: IFTRUE 40941
40921: LD_INT 28
40923: DOUBLE
40924: EQUAL
40925: IFTRUE 40941
40927: LD_INT 29
40929: DOUBLE
40930: EQUAL
40931: IFTRUE 40941
40933: LD_INT 30
40935: DOUBLE
40936: EQUAL
40937: IFTRUE 40941
40939: GO 40997
40941: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40942: LD_ADDR_VAR 0 9
40946: PUSH
40947: LD_VAR 0 59
40951: PUSH
40952: LD_VAR 0 60
40956: PUSH
40957: LD_VAR 0 61
40961: PUSH
40962: LD_VAR 0 62
40966: PUSH
40967: LD_VAR 0 63
40971: PUSH
40972: LD_VAR 0 64
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: PUSH
40985: LD_VAR 0 4
40989: PUSH
40990: LD_INT 1
40992: PLUS
40993: ARRAY
40994: ST_TO_ADDR
40995: GO 40998
40997: POP
// temp_list2 = [ ] ;
40998: LD_ADDR_VAR 0 10
41002: PUSH
41003: EMPTY
41004: ST_TO_ADDR
// for i in temp_list do
41005: LD_ADDR_VAR 0 8
41009: PUSH
41010: LD_VAR 0 9
41014: PUSH
41015: FOR_IN
41016: IFFALSE 41068
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41018: LD_ADDR_VAR 0 10
41022: PUSH
41023: LD_VAR 0 10
41027: PUSH
41028: LD_VAR 0 8
41032: PUSH
41033: LD_INT 1
41035: ARRAY
41036: PUSH
41037: LD_VAR 0 2
41041: PLUS
41042: PUSH
41043: LD_VAR 0 8
41047: PUSH
41048: LD_INT 2
41050: ARRAY
41051: PUSH
41052: LD_VAR 0 3
41056: PLUS
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: EMPTY
41063: LIST
41064: ADD
41065: ST_TO_ADDR
41066: GO 41015
41068: POP
41069: POP
// result = temp_list2 ;
41070: LD_ADDR_VAR 0 7
41074: PUSH
41075: LD_VAR 0 10
41079: ST_TO_ADDR
// end ;
41080: LD_VAR 0 7
41084: RET
// export function EnemyInRange ( unit , dist ) ; begin
41085: LD_INT 0
41087: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41088: LD_ADDR_VAR 0 3
41092: PUSH
41093: LD_VAR 0 1
41097: PPUSH
41098: CALL_OW 255
41102: PPUSH
41103: LD_VAR 0 1
41107: PPUSH
41108: CALL_OW 250
41112: PPUSH
41113: LD_VAR 0 1
41117: PPUSH
41118: CALL_OW 251
41122: PPUSH
41123: LD_VAR 0 2
41127: PPUSH
41128: CALL 14487 0 4
41132: PUSH
41133: LD_INT 4
41135: ARRAY
41136: ST_TO_ADDR
// end ;
41137: LD_VAR 0 3
41141: RET
// export function PlayerSeeMe ( unit ) ; begin
41142: LD_INT 0
41144: PPUSH
// result := See ( your_side , unit ) ;
41145: LD_ADDR_VAR 0 2
41149: PUSH
41150: LD_OWVAR 2
41154: PPUSH
41155: LD_VAR 0 1
41159: PPUSH
41160: CALL_OW 292
41164: ST_TO_ADDR
// end ;
41165: LD_VAR 0 2
41169: RET
// export function ReverseDir ( unit ) ; begin
41170: LD_INT 0
41172: PPUSH
// if not unit then
41173: LD_VAR 0 1
41177: NOT
41178: IFFALSE 41182
// exit ;
41180: GO 41205
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41182: LD_ADDR_VAR 0 2
41186: PUSH
41187: LD_VAR 0 1
41191: PPUSH
41192: CALL_OW 254
41196: PUSH
41197: LD_INT 3
41199: PLUS
41200: PUSH
41201: LD_INT 6
41203: MOD
41204: ST_TO_ADDR
// end ;
41205: LD_VAR 0 2
41209: RET
// export function ReverseArray ( array ) ; var i ; begin
41210: LD_INT 0
41212: PPUSH
41213: PPUSH
// if not array then
41214: LD_VAR 0 1
41218: NOT
41219: IFFALSE 41223
// exit ;
41221: GO 41278
// result := [ ] ;
41223: LD_ADDR_VAR 0 2
41227: PUSH
41228: EMPTY
41229: ST_TO_ADDR
// for i := array downto 1 do
41230: LD_ADDR_VAR 0 3
41234: PUSH
41235: DOUBLE
41236: LD_VAR 0 1
41240: INC
41241: ST_TO_ADDR
41242: LD_INT 1
41244: PUSH
41245: FOR_DOWNTO
41246: IFFALSE 41276
// result := Join ( result , array [ i ] ) ;
41248: LD_ADDR_VAR 0 2
41252: PUSH
41253: LD_VAR 0 2
41257: PPUSH
41258: LD_VAR 0 1
41262: PUSH
41263: LD_VAR 0 3
41267: ARRAY
41268: PPUSH
41269: CALL 45921 0 2
41273: ST_TO_ADDR
41274: GO 41245
41276: POP
41277: POP
// end ;
41278: LD_VAR 0 2
41282: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
41283: LD_INT 0
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
41289: PPUSH
41290: PPUSH
// if not unit or not hexes then
41291: LD_VAR 0 1
41295: NOT
41296: PUSH
41297: LD_VAR 0 2
41301: NOT
41302: OR
41303: IFFALSE 41307
// exit ;
41305: GO 41430
// dist := 9999 ;
41307: LD_ADDR_VAR 0 5
41311: PUSH
41312: LD_INT 9999
41314: ST_TO_ADDR
// for i = 1 to hexes do
41315: LD_ADDR_VAR 0 4
41319: PUSH
41320: DOUBLE
41321: LD_INT 1
41323: DEC
41324: ST_TO_ADDR
41325: LD_VAR 0 2
41329: PUSH
41330: FOR_TO
41331: IFFALSE 41418
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41333: LD_ADDR_VAR 0 6
41337: PUSH
41338: LD_VAR 0 1
41342: PPUSH
41343: LD_VAR 0 2
41347: PUSH
41348: LD_VAR 0 4
41352: ARRAY
41353: PUSH
41354: LD_INT 1
41356: ARRAY
41357: PPUSH
41358: LD_VAR 0 2
41362: PUSH
41363: LD_VAR 0 4
41367: ARRAY
41368: PUSH
41369: LD_INT 2
41371: ARRAY
41372: PPUSH
41373: CALL_OW 297
41377: ST_TO_ADDR
// if tdist < dist then
41378: LD_VAR 0 6
41382: PUSH
41383: LD_VAR 0 5
41387: LESS
41388: IFFALSE 41416
// begin hex := hexes [ i ] ;
41390: LD_ADDR_VAR 0 8
41394: PUSH
41395: LD_VAR 0 2
41399: PUSH
41400: LD_VAR 0 4
41404: ARRAY
41405: ST_TO_ADDR
// dist := tdist ;
41406: LD_ADDR_VAR 0 5
41410: PUSH
41411: LD_VAR 0 6
41415: ST_TO_ADDR
// end ; end ;
41416: GO 41330
41418: POP
41419: POP
// result := hex ;
41420: LD_ADDR_VAR 0 3
41424: PUSH
41425: LD_VAR 0 8
41429: ST_TO_ADDR
// end ;
41430: LD_VAR 0 3
41434: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
41435: LD_INT 0
41437: PPUSH
41438: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
41439: LD_VAR 0 1
41443: NOT
41444: PUSH
41445: LD_VAR 0 1
41449: PUSH
41450: LD_INT 21
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 23
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PPUSH
41474: CALL_OW 69
41478: IN
41479: NOT
41480: OR
41481: IFFALSE 41485
// exit ;
41483: GO 41532
// for i = 1 to 3 do
41485: LD_ADDR_VAR 0 3
41489: PUSH
41490: DOUBLE
41491: LD_INT 1
41493: DEC
41494: ST_TO_ADDR
41495: LD_INT 3
41497: PUSH
41498: FOR_TO
41499: IFFALSE 41530
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
41501: LD_VAR 0 1
41505: PPUSH
41506: CALL_OW 250
41510: PPUSH
41511: LD_VAR 0 1
41515: PPUSH
41516: CALL_OW 251
41520: PPUSH
41521: LD_INT 1
41523: PPUSH
41524: CALL_OW 453
41528: GO 41498
41530: POP
41531: POP
// end ;
41532: LD_VAR 0 2
41536: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
41537: LD_INT 0
41539: PPUSH
41540: PPUSH
41541: PPUSH
41542: PPUSH
41543: PPUSH
41544: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
41545: LD_VAR 0 1
41549: NOT
41550: PUSH
41551: LD_VAR 0 2
41555: NOT
41556: OR
41557: PUSH
41558: LD_VAR 0 1
41562: PPUSH
41563: CALL_OW 314
41567: OR
41568: IFFALSE 41572
// exit ;
41570: GO 42039
// if GetLives ( i ) < 250 then
41572: LD_VAR 0 4
41576: PPUSH
41577: CALL_OW 256
41581: PUSH
41582: LD_INT 250
41584: LESS
41585: IFFALSE 41598
// begin ComAutodestruct ( i ) ;
41587: LD_VAR 0 4
41591: PPUSH
41592: CALL 41435 0 1
// exit ;
41596: GO 42039
// end ; x := GetX ( enemy_unit ) ;
41598: LD_ADDR_VAR 0 7
41602: PUSH
41603: LD_VAR 0 2
41607: PPUSH
41608: CALL_OW 250
41612: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
41613: LD_ADDR_VAR 0 8
41617: PUSH
41618: LD_VAR 0 2
41622: PPUSH
41623: CALL_OW 251
41627: ST_TO_ADDR
// if not x or not y then
41628: LD_VAR 0 7
41632: NOT
41633: PUSH
41634: LD_VAR 0 8
41638: NOT
41639: OR
41640: IFFALSE 41644
// exit ;
41642: GO 42039
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
41644: LD_ADDR_VAR 0 6
41648: PUSH
41649: LD_VAR 0 7
41653: PPUSH
41654: LD_INT 0
41656: PPUSH
41657: LD_INT 4
41659: PPUSH
41660: CALL_OW 272
41664: PUSH
41665: LD_VAR 0 8
41669: PPUSH
41670: LD_INT 0
41672: PPUSH
41673: LD_INT 4
41675: PPUSH
41676: CALL_OW 273
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_VAR 0 7
41689: PPUSH
41690: LD_INT 1
41692: PPUSH
41693: LD_INT 4
41695: PPUSH
41696: CALL_OW 272
41700: PUSH
41701: LD_VAR 0 8
41705: PPUSH
41706: LD_INT 1
41708: PPUSH
41709: LD_INT 4
41711: PPUSH
41712: CALL_OW 273
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_VAR 0 7
41725: PPUSH
41726: LD_INT 2
41728: PPUSH
41729: LD_INT 4
41731: PPUSH
41732: CALL_OW 272
41736: PUSH
41737: LD_VAR 0 8
41741: PPUSH
41742: LD_INT 2
41744: PPUSH
41745: LD_INT 4
41747: PPUSH
41748: CALL_OW 273
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_VAR 0 7
41761: PPUSH
41762: LD_INT 3
41764: PPUSH
41765: LD_INT 4
41767: PPUSH
41768: CALL_OW 272
41772: PUSH
41773: LD_VAR 0 8
41777: PPUSH
41778: LD_INT 3
41780: PPUSH
41781: LD_INT 4
41783: PPUSH
41784: CALL_OW 273
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_VAR 0 7
41797: PPUSH
41798: LD_INT 4
41800: PPUSH
41801: LD_INT 4
41803: PPUSH
41804: CALL_OW 272
41808: PUSH
41809: LD_VAR 0 8
41813: PPUSH
41814: LD_INT 4
41816: PPUSH
41817: LD_INT 4
41819: PPUSH
41820: CALL_OW 273
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_VAR 0 7
41833: PPUSH
41834: LD_INT 5
41836: PPUSH
41837: LD_INT 4
41839: PPUSH
41840: CALL_OW 272
41844: PUSH
41845: LD_VAR 0 8
41849: PPUSH
41850: LD_INT 5
41852: PPUSH
41853: LD_INT 4
41855: PPUSH
41856: CALL_OW 273
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: ST_TO_ADDR
// for i = tmp downto 1 do
41873: LD_ADDR_VAR 0 4
41877: PUSH
41878: DOUBLE
41879: LD_VAR 0 6
41883: INC
41884: ST_TO_ADDR
41885: LD_INT 1
41887: PUSH
41888: FOR_DOWNTO
41889: IFFALSE 41990
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41891: LD_VAR 0 6
41895: PUSH
41896: LD_VAR 0 4
41900: ARRAY
41901: PUSH
41902: LD_INT 1
41904: ARRAY
41905: PPUSH
41906: LD_VAR 0 6
41910: PUSH
41911: LD_VAR 0 4
41915: ARRAY
41916: PUSH
41917: LD_INT 2
41919: ARRAY
41920: PPUSH
41921: CALL_OW 488
41925: NOT
41926: PUSH
41927: LD_VAR 0 6
41931: PUSH
41932: LD_VAR 0 4
41936: ARRAY
41937: PUSH
41938: LD_INT 1
41940: ARRAY
41941: PPUSH
41942: LD_VAR 0 6
41946: PUSH
41947: LD_VAR 0 4
41951: ARRAY
41952: PUSH
41953: LD_INT 2
41955: ARRAY
41956: PPUSH
41957: CALL_OW 428
41961: PUSH
41962: LD_INT 0
41964: NONEQUAL
41965: OR
41966: IFFALSE 41988
// tmp := Delete ( tmp , i ) ;
41968: LD_ADDR_VAR 0 6
41972: PUSH
41973: LD_VAR 0 6
41977: PPUSH
41978: LD_VAR 0 4
41982: PPUSH
41983: CALL_OW 3
41987: ST_TO_ADDR
41988: GO 41888
41990: POP
41991: POP
// j := GetClosestHex ( unit , tmp ) ;
41992: LD_ADDR_VAR 0 5
41996: PUSH
41997: LD_VAR 0 1
42001: PPUSH
42002: LD_VAR 0 6
42006: PPUSH
42007: CALL 41283 0 2
42011: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42012: LD_VAR 0 1
42016: PPUSH
42017: LD_VAR 0 5
42021: PUSH
42022: LD_INT 1
42024: ARRAY
42025: PPUSH
42026: LD_VAR 0 5
42030: PUSH
42031: LD_INT 2
42033: ARRAY
42034: PPUSH
42035: CALL_OW 111
// end ;
42039: LD_VAR 0 3
42043: RET
// export function PrepareApemanSoldier ( ) ; begin
42044: LD_INT 0
42046: PPUSH
// uc_nation := 0 ;
42047: LD_ADDR_OWVAR 21
42051: PUSH
42052: LD_INT 0
42054: ST_TO_ADDR
// hc_sex := sex_male ;
42055: LD_ADDR_OWVAR 27
42059: PUSH
42060: LD_INT 1
42062: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42063: LD_ADDR_OWVAR 28
42067: PUSH
42068: LD_INT 15
42070: ST_TO_ADDR
// hc_gallery :=  ;
42071: LD_ADDR_OWVAR 33
42075: PUSH
42076: LD_STRING 
42078: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42079: LD_ADDR_OWVAR 31
42083: PUSH
42084: LD_INT 0
42086: PPUSH
42087: LD_INT 3
42089: PPUSH
42090: CALL_OW 12
42094: PUSH
42095: LD_INT 0
42097: PPUSH
42098: LD_INT 3
42100: PPUSH
42101: CALL_OW 12
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: ST_TO_ADDR
// end ;
42118: LD_VAR 0 1
42122: RET
// export function PrepareApemanEngineer ( ) ; begin
42123: LD_INT 0
42125: PPUSH
// uc_nation := 0 ;
42126: LD_ADDR_OWVAR 21
42130: PUSH
42131: LD_INT 0
42133: ST_TO_ADDR
// hc_sex := sex_male ;
42134: LD_ADDR_OWVAR 27
42138: PUSH
42139: LD_INT 1
42141: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
42142: LD_ADDR_OWVAR 28
42146: PUSH
42147: LD_INT 16
42149: ST_TO_ADDR
// hc_gallery :=  ;
42150: LD_ADDR_OWVAR 33
42154: PUSH
42155: LD_STRING 
42157: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42158: LD_ADDR_OWVAR 31
42162: PUSH
42163: LD_INT 0
42165: PPUSH
42166: LD_INT 3
42168: PPUSH
42169: CALL_OW 12
42173: PUSH
42174: LD_INT 0
42176: PPUSH
42177: LD_INT 3
42179: PPUSH
42180: CALL_OW 12
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: ST_TO_ADDR
// end ;
42197: LD_VAR 0 1
42201: RET
// export function PrepareApeman ( agressivity ) ; begin
42202: LD_INT 0
42204: PPUSH
// uc_side := 0 ;
42205: LD_ADDR_OWVAR 20
42209: PUSH
42210: LD_INT 0
42212: ST_TO_ADDR
// uc_nation := 0 ;
42213: LD_ADDR_OWVAR 21
42217: PUSH
42218: LD_INT 0
42220: ST_TO_ADDR
// hc_sex := sex_male ;
42221: LD_ADDR_OWVAR 27
42225: PUSH
42226: LD_INT 1
42228: ST_TO_ADDR
// hc_class := class_apeman ;
42229: LD_ADDR_OWVAR 28
42233: PUSH
42234: LD_INT 12
42236: ST_TO_ADDR
// hc_gallery :=  ;
42237: LD_ADDR_OWVAR 33
42241: PUSH
42242: LD_STRING 
42244: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42245: LD_ADDR_OWVAR 35
42249: PUSH
42250: LD_VAR 0 1
42254: NEG
42255: PPUSH
42256: LD_VAR 0 1
42260: PPUSH
42261: CALL_OW 12
42265: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42266: LD_ADDR_OWVAR 31
42270: PUSH
42271: LD_INT 0
42273: PPUSH
42274: LD_INT 3
42276: PPUSH
42277: CALL_OW 12
42281: PUSH
42282: LD_INT 0
42284: PPUSH
42285: LD_INT 3
42287: PPUSH
42288: CALL_OW 12
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: ST_TO_ADDR
// end ;
42305: LD_VAR 0 2
42309: RET
// export function PrepareTiger ( agressivity ) ; begin
42310: LD_INT 0
42312: PPUSH
// uc_side := 0 ;
42313: LD_ADDR_OWVAR 20
42317: PUSH
42318: LD_INT 0
42320: ST_TO_ADDR
// uc_nation := 0 ;
42321: LD_ADDR_OWVAR 21
42325: PUSH
42326: LD_INT 0
42328: ST_TO_ADDR
// hc_class := class_tiger ;
42329: LD_ADDR_OWVAR 28
42333: PUSH
42334: LD_INT 14
42336: ST_TO_ADDR
// hc_gallery :=  ;
42337: LD_ADDR_OWVAR 33
42341: PUSH
42342: LD_STRING 
42344: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42345: LD_ADDR_OWVAR 35
42349: PUSH
42350: LD_VAR 0 1
42354: NEG
42355: PPUSH
42356: LD_VAR 0 1
42360: PPUSH
42361: CALL_OW 12
42365: ST_TO_ADDR
// end ;
42366: LD_VAR 0 2
42370: RET
// export function PrepareEnchidna ( ) ; begin
42371: LD_INT 0
42373: PPUSH
// uc_side := 0 ;
42374: LD_ADDR_OWVAR 20
42378: PUSH
42379: LD_INT 0
42381: ST_TO_ADDR
// uc_nation := 0 ;
42382: LD_ADDR_OWVAR 21
42386: PUSH
42387: LD_INT 0
42389: ST_TO_ADDR
// hc_class := class_baggie ;
42390: LD_ADDR_OWVAR 28
42394: PUSH
42395: LD_INT 13
42397: ST_TO_ADDR
// hc_gallery :=  ;
42398: LD_ADDR_OWVAR 33
42402: PUSH
42403: LD_STRING 
42405: ST_TO_ADDR
// end ;
42406: LD_VAR 0 1
42410: RET
// export function PrepareFrog ( ) ; begin
42411: LD_INT 0
42413: PPUSH
// uc_side := 0 ;
42414: LD_ADDR_OWVAR 20
42418: PUSH
42419: LD_INT 0
42421: ST_TO_ADDR
// uc_nation := 0 ;
42422: LD_ADDR_OWVAR 21
42426: PUSH
42427: LD_INT 0
42429: ST_TO_ADDR
// hc_class := class_frog ;
42430: LD_ADDR_OWVAR 28
42434: PUSH
42435: LD_INT 19
42437: ST_TO_ADDR
// hc_gallery :=  ;
42438: LD_ADDR_OWVAR 33
42442: PUSH
42443: LD_STRING 
42445: ST_TO_ADDR
// end ;
42446: LD_VAR 0 1
42450: RET
// export function PrepareFish ( ) ; begin
42451: LD_INT 0
42453: PPUSH
// uc_side := 0 ;
42454: LD_ADDR_OWVAR 20
42458: PUSH
42459: LD_INT 0
42461: ST_TO_ADDR
// uc_nation := 0 ;
42462: LD_ADDR_OWVAR 21
42466: PUSH
42467: LD_INT 0
42469: ST_TO_ADDR
// hc_class := class_fish ;
42470: LD_ADDR_OWVAR 28
42474: PUSH
42475: LD_INT 20
42477: ST_TO_ADDR
// hc_gallery :=  ;
42478: LD_ADDR_OWVAR 33
42482: PUSH
42483: LD_STRING 
42485: ST_TO_ADDR
// end ;
42486: LD_VAR 0 1
42490: RET
// export function PrepareBird ( ) ; begin
42491: LD_INT 0
42493: PPUSH
// uc_side := 0 ;
42494: LD_ADDR_OWVAR 20
42498: PUSH
42499: LD_INT 0
42501: ST_TO_ADDR
// uc_nation := 0 ;
42502: LD_ADDR_OWVAR 21
42506: PUSH
42507: LD_INT 0
42509: ST_TO_ADDR
// hc_class := class_phororhacos ;
42510: LD_ADDR_OWVAR 28
42514: PUSH
42515: LD_INT 18
42517: ST_TO_ADDR
// hc_gallery :=  ;
42518: LD_ADDR_OWVAR 33
42522: PUSH
42523: LD_STRING 
42525: ST_TO_ADDR
// end ;
42526: LD_VAR 0 1
42530: RET
// export function PrepareHorse ( ) ; begin
42531: LD_INT 0
42533: PPUSH
// uc_side := 0 ;
42534: LD_ADDR_OWVAR 20
42538: PUSH
42539: LD_INT 0
42541: ST_TO_ADDR
// uc_nation := 0 ;
42542: LD_ADDR_OWVAR 21
42546: PUSH
42547: LD_INT 0
42549: ST_TO_ADDR
// hc_class := class_horse ;
42550: LD_ADDR_OWVAR 28
42554: PUSH
42555: LD_INT 21
42557: ST_TO_ADDR
// hc_gallery :=  ;
42558: LD_ADDR_OWVAR 33
42562: PUSH
42563: LD_STRING 
42565: ST_TO_ADDR
// end ;
42566: LD_VAR 0 1
42570: RET
// export function PrepareMastodont ( ) ; begin
42571: LD_INT 0
42573: PPUSH
// uc_side := 0 ;
42574: LD_ADDR_OWVAR 20
42578: PUSH
42579: LD_INT 0
42581: ST_TO_ADDR
// uc_nation := 0 ;
42582: LD_ADDR_OWVAR 21
42586: PUSH
42587: LD_INT 0
42589: ST_TO_ADDR
// vc_chassis := class_mastodont ;
42590: LD_ADDR_OWVAR 37
42594: PUSH
42595: LD_INT 31
42597: ST_TO_ADDR
// vc_control := control_rider ;
42598: LD_ADDR_OWVAR 38
42602: PUSH
42603: LD_INT 4
42605: ST_TO_ADDR
// end ;
42606: LD_VAR 0 1
42610: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
42611: LD_INT 0
42613: PPUSH
42614: PPUSH
42615: PPUSH
// uc_side = 0 ;
42616: LD_ADDR_OWVAR 20
42620: PUSH
42621: LD_INT 0
42623: ST_TO_ADDR
// uc_nation = 0 ;
42624: LD_ADDR_OWVAR 21
42628: PUSH
42629: LD_INT 0
42631: ST_TO_ADDR
// InitHc_All ( ) ;
42632: CALL_OW 584
// InitVc ;
42636: CALL_OW 20
// if mastodonts then
42640: LD_VAR 0 6
42644: IFFALSE 42711
// for i = 1 to mastodonts do
42646: LD_ADDR_VAR 0 11
42650: PUSH
42651: DOUBLE
42652: LD_INT 1
42654: DEC
42655: ST_TO_ADDR
42656: LD_VAR 0 6
42660: PUSH
42661: FOR_TO
42662: IFFALSE 42709
// begin vc_chassis := 31 ;
42664: LD_ADDR_OWVAR 37
42668: PUSH
42669: LD_INT 31
42671: ST_TO_ADDR
// vc_control := control_rider ;
42672: LD_ADDR_OWVAR 38
42676: PUSH
42677: LD_INT 4
42679: ST_TO_ADDR
// animal := CreateVehicle ;
42680: LD_ADDR_VAR 0 12
42684: PUSH
42685: CALL_OW 45
42689: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42690: LD_VAR 0 12
42694: PPUSH
42695: LD_VAR 0 8
42699: PPUSH
42700: LD_INT 0
42702: PPUSH
42703: CALL 44839 0 3
// end ;
42707: GO 42661
42709: POP
42710: POP
// if horses then
42711: LD_VAR 0 5
42715: IFFALSE 42782
// for i = 1 to horses do
42717: LD_ADDR_VAR 0 11
42721: PUSH
42722: DOUBLE
42723: LD_INT 1
42725: DEC
42726: ST_TO_ADDR
42727: LD_VAR 0 5
42731: PUSH
42732: FOR_TO
42733: IFFALSE 42780
// begin hc_class := 21 ;
42735: LD_ADDR_OWVAR 28
42739: PUSH
42740: LD_INT 21
42742: ST_TO_ADDR
// hc_gallery :=  ;
42743: LD_ADDR_OWVAR 33
42747: PUSH
42748: LD_STRING 
42750: ST_TO_ADDR
// animal := CreateHuman ;
42751: LD_ADDR_VAR 0 12
42755: PUSH
42756: CALL_OW 44
42760: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42761: LD_VAR 0 12
42765: PPUSH
42766: LD_VAR 0 8
42770: PPUSH
42771: LD_INT 0
42773: PPUSH
42774: CALL 44839 0 3
// end ;
42778: GO 42732
42780: POP
42781: POP
// if birds then
42782: LD_VAR 0 1
42786: IFFALSE 42853
// for i = 1 to birds do
42788: LD_ADDR_VAR 0 11
42792: PUSH
42793: DOUBLE
42794: LD_INT 1
42796: DEC
42797: ST_TO_ADDR
42798: LD_VAR 0 1
42802: PUSH
42803: FOR_TO
42804: IFFALSE 42851
// begin hc_class = 18 ;
42806: LD_ADDR_OWVAR 28
42810: PUSH
42811: LD_INT 18
42813: ST_TO_ADDR
// hc_gallery =  ;
42814: LD_ADDR_OWVAR 33
42818: PUSH
42819: LD_STRING 
42821: ST_TO_ADDR
// animal := CreateHuman ;
42822: LD_ADDR_VAR 0 12
42826: PUSH
42827: CALL_OW 44
42831: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42832: LD_VAR 0 12
42836: PPUSH
42837: LD_VAR 0 8
42841: PPUSH
42842: LD_INT 0
42844: PPUSH
42845: CALL 44839 0 3
// end ;
42849: GO 42803
42851: POP
42852: POP
// if tigers then
42853: LD_VAR 0 2
42857: IFFALSE 42941
// for i = 1 to tigers do
42859: LD_ADDR_VAR 0 11
42863: PUSH
42864: DOUBLE
42865: LD_INT 1
42867: DEC
42868: ST_TO_ADDR
42869: LD_VAR 0 2
42873: PUSH
42874: FOR_TO
42875: IFFALSE 42939
// begin hc_class = class_tiger ;
42877: LD_ADDR_OWVAR 28
42881: PUSH
42882: LD_INT 14
42884: ST_TO_ADDR
// hc_gallery =  ;
42885: LD_ADDR_OWVAR 33
42889: PUSH
42890: LD_STRING 
42892: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
42893: LD_ADDR_OWVAR 35
42897: PUSH
42898: LD_INT 7
42900: NEG
42901: PPUSH
42902: LD_INT 7
42904: PPUSH
42905: CALL_OW 12
42909: ST_TO_ADDR
// animal := CreateHuman ;
42910: LD_ADDR_VAR 0 12
42914: PUSH
42915: CALL_OW 44
42919: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42920: LD_VAR 0 12
42924: PPUSH
42925: LD_VAR 0 8
42929: PPUSH
42930: LD_INT 0
42932: PPUSH
42933: CALL 44839 0 3
// end ;
42937: GO 42874
42939: POP
42940: POP
// if apemans then
42941: LD_VAR 0 3
42945: IFFALSE 43068
// for i = 1 to apemans do
42947: LD_ADDR_VAR 0 11
42951: PUSH
42952: DOUBLE
42953: LD_INT 1
42955: DEC
42956: ST_TO_ADDR
42957: LD_VAR 0 3
42961: PUSH
42962: FOR_TO
42963: IFFALSE 43066
// begin hc_class = class_apeman ;
42965: LD_ADDR_OWVAR 28
42969: PUSH
42970: LD_INT 12
42972: ST_TO_ADDR
// hc_gallery =  ;
42973: LD_ADDR_OWVAR 33
42977: PUSH
42978: LD_STRING 
42980: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
42981: LD_ADDR_OWVAR 35
42985: PUSH
42986: LD_INT 2
42988: NEG
42989: PPUSH
42990: LD_INT 2
42992: PPUSH
42993: CALL_OW 12
42997: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
42998: LD_ADDR_OWVAR 31
43002: PUSH
43003: LD_INT 1
43005: PPUSH
43006: LD_INT 3
43008: PPUSH
43009: CALL_OW 12
43013: PUSH
43014: LD_INT 1
43016: PPUSH
43017: LD_INT 3
43019: PPUSH
43020: CALL_OW 12
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: ST_TO_ADDR
// animal := CreateHuman ;
43037: LD_ADDR_VAR 0 12
43041: PUSH
43042: CALL_OW 44
43046: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43047: LD_VAR 0 12
43051: PPUSH
43052: LD_VAR 0 8
43056: PPUSH
43057: LD_INT 0
43059: PPUSH
43060: CALL 44839 0 3
// end ;
43064: GO 42962
43066: POP
43067: POP
// if enchidnas then
43068: LD_VAR 0 4
43072: IFFALSE 43139
// for i = 1 to enchidnas do
43074: LD_ADDR_VAR 0 11
43078: PUSH
43079: DOUBLE
43080: LD_INT 1
43082: DEC
43083: ST_TO_ADDR
43084: LD_VAR 0 4
43088: PUSH
43089: FOR_TO
43090: IFFALSE 43137
// begin hc_class = 13 ;
43092: LD_ADDR_OWVAR 28
43096: PUSH
43097: LD_INT 13
43099: ST_TO_ADDR
// hc_gallery =  ;
43100: LD_ADDR_OWVAR 33
43104: PUSH
43105: LD_STRING 
43107: ST_TO_ADDR
// animal := CreateHuman ;
43108: LD_ADDR_VAR 0 12
43112: PUSH
43113: CALL_OW 44
43117: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43118: LD_VAR 0 12
43122: PPUSH
43123: LD_VAR 0 8
43127: PPUSH
43128: LD_INT 0
43130: PPUSH
43131: CALL 44839 0 3
// end ;
43135: GO 43089
43137: POP
43138: POP
// if fishes then
43139: LD_VAR 0 7
43143: IFFALSE 43210
// for i = 1 to fishes do
43145: LD_ADDR_VAR 0 11
43149: PUSH
43150: DOUBLE
43151: LD_INT 1
43153: DEC
43154: ST_TO_ADDR
43155: LD_VAR 0 7
43159: PUSH
43160: FOR_TO
43161: IFFALSE 43208
// begin hc_class = 20 ;
43163: LD_ADDR_OWVAR 28
43167: PUSH
43168: LD_INT 20
43170: ST_TO_ADDR
// hc_gallery =  ;
43171: LD_ADDR_OWVAR 33
43175: PUSH
43176: LD_STRING 
43178: ST_TO_ADDR
// animal := CreateHuman ;
43179: LD_ADDR_VAR 0 12
43183: PUSH
43184: CALL_OW 44
43188: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43189: LD_VAR 0 12
43193: PPUSH
43194: LD_VAR 0 9
43198: PPUSH
43199: LD_INT 0
43201: PPUSH
43202: CALL 44839 0 3
// end ;
43206: GO 43160
43208: POP
43209: POP
// end ;
43210: LD_VAR 0 10
43214: RET
// export function WantHeal ( sci , unit ) ; begin
43215: LD_INT 0
43217: PPUSH
// if GetTaskList ( sci ) > 0 then
43218: LD_VAR 0 1
43222: PPUSH
43223: CALL_OW 437
43227: PUSH
43228: LD_INT 0
43230: GREATER
43231: IFFALSE 43301
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43233: LD_VAR 0 1
43237: PPUSH
43238: CALL_OW 437
43242: PUSH
43243: LD_INT 1
43245: ARRAY
43246: PUSH
43247: LD_INT 1
43249: ARRAY
43250: PUSH
43251: LD_STRING l
43253: EQUAL
43254: PUSH
43255: LD_VAR 0 1
43259: PPUSH
43260: CALL_OW 437
43264: PUSH
43265: LD_INT 1
43267: ARRAY
43268: PUSH
43269: LD_INT 4
43271: ARRAY
43272: PUSH
43273: LD_VAR 0 2
43277: EQUAL
43278: AND
43279: IFFALSE 43291
// result := true else
43281: LD_ADDR_VAR 0 3
43285: PUSH
43286: LD_INT 1
43288: ST_TO_ADDR
43289: GO 43299
// result := false ;
43291: LD_ADDR_VAR 0 3
43295: PUSH
43296: LD_INT 0
43298: ST_TO_ADDR
// end else
43299: GO 43309
// result := false ;
43301: LD_ADDR_VAR 0 3
43305: PUSH
43306: LD_INT 0
43308: ST_TO_ADDR
// end ;
43309: LD_VAR 0 3
43313: RET
// export function HealTarget ( sci ) ; begin
43314: LD_INT 0
43316: PPUSH
// if not sci then
43317: LD_VAR 0 1
43321: NOT
43322: IFFALSE 43326
// exit ;
43324: GO 43391
// result := 0 ;
43326: LD_ADDR_VAR 0 2
43330: PUSH
43331: LD_INT 0
43333: ST_TO_ADDR
// if GetTaskList ( sci ) then
43334: LD_VAR 0 1
43338: PPUSH
43339: CALL_OW 437
43343: IFFALSE 43391
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
43345: LD_VAR 0 1
43349: PPUSH
43350: CALL_OW 437
43354: PUSH
43355: LD_INT 1
43357: ARRAY
43358: PUSH
43359: LD_INT 1
43361: ARRAY
43362: PUSH
43363: LD_STRING l
43365: EQUAL
43366: IFFALSE 43391
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
43368: LD_ADDR_VAR 0 2
43372: PUSH
43373: LD_VAR 0 1
43377: PPUSH
43378: CALL_OW 437
43382: PUSH
43383: LD_INT 1
43385: ARRAY
43386: PUSH
43387: LD_INT 4
43389: ARRAY
43390: ST_TO_ADDR
// end ;
43391: LD_VAR 0 2
43395: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
43396: LD_INT 0
43398: PPUSH
43399: PPUSH
43400: PPUSH
43401: PPUSH
// if not base_units then
43402: LD_VAR 0 1
43406: NOT
43407: IFFALSE 43411
// exit ;
43409: GO 43498
// result := false ;
43411: LD_ADDR_VAR 0 2
43415: PUSH
43416: LD_INT 0
43418: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
43419: LD_ADDR_VAR 0 5
43423: PUSH
43424: LD_VAR 0 1
43428: PPUSH
43429: LD_INT 21
43431: PUSH
43432: LD_INT 3
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PPUSH
43439: CALL_OW 72
43443: ST_TO_ADDR
// if not tmp then
43444: LD_VAR 0 5
43448: NOT
43449: IFFALSE 43453
// exit ;
43451: GO 43498
// for i in tmp do
43453: LD_ADDR_VAR 0 3
43457: PUSH
43458: LD_VAR 0 5
43462: PUSH
43463: FOR_IN
43464: IFFALSE 43496
// begin result := EnemyInRange ( i , 22 ) ;
43466: LD_ADDR_VAR 0 2
43470: PUSH
43471: LD_VAR 0 3
43475: PPUSH
43476: LD_INT 22
43478: PPUSH
43479: CALL 41085 0 2
43483: ST_TO_ADDR
// if result then
43484: LD_VAR 0 2
43488: IFFALSE 43494
// exit ;
43490: POP
43491: POP
43492: GO 43498
// end ;
43494: GO 43463
43496: POP
43497: POP
// end ;
43498: LD_VAR 0 2
43502: RET
// export function FilterByTag ( units , tag ) ; begin
43503: LD_INT 0
43505: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
43506: LD_ADDR_VAR 0 3
43510: PUSH
43511: LD_VAR 0 1
43515: PPUSH
43516: LD_INT 120
43518: PUSH
43519: LD_VAR 0 2
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PPUSH
43528: CALL_OW 72
43532: ST_TO_ADDR
// end ;
43533: LD_VAR 0 3
43537: RET
// export function IsDriver ( un ) ; begin
43538: LD_INT 0
43540: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
43541: LD_ADDR_VAR 0 2
43545: PUSH
43546: LD_VAR 0 1
43550: PUSH
43551: LD_INT 55
43553: PUSH
43554: EMPTY
43555: LIST
43556: PPUSH
43557: CALL_OW 69
43561: IN
43562: ST_TO_ADDR
// end ;
43563: LD_VAR 0 2
43567: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
43568: LD_INT 0
43570: PPUSH
43571: PPUSH
// list := [ ] ;
43572: LD_ADDR_VAR 0 5
43576: PUSH
43577: EMPTY
43578: ST_TO_ADDR
// case d of 0 :
43579: LD_VAR 0 3
43583: PUSH
43584: LD_INT 0
43586: DOUBLE
43587: EQUAL
43588: IFTRUE 43592
43590: GO 43725
43592: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
43593: LD_ADDR_VAR 0 5
43597: PUSH
43598: LD_VAR 0 1
43602: PUSH
43603: LD_INT 4
43605: MINUS
43606: PUSH
43607: LD_VAR 0 2
43611: PUSH
43612: LD_INT 4
43614: MINUS
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: LIST
43623: PUSH
43624: LD_VAR 0 1
43628: PUSH
43629: LD_INT 3
43631: MINUS
43632: PUSH
43633: LD_VAR 0 2
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: LIST
43645: PUSH
43646: LD_VAR 0 1
43650: PUSH
43651: LD_INT 4
43653: PLUS
43654: PUSH
43655: LD_VAR 0 2
43659: PUSH
43660: LD_INT 4
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: LIST
43667: PUSH
43668: LD_VAR 0 1
43672: PUSH
43673: LD_INT 3
43675: PLUS
43676: PUSH
43677: LD_VAR 0 2
43681: PUSH
43682: LD_INT 3
43684: PLUS
43685: PUSH
43686: LD_INT 5
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: LIST
43693: PUSH
43694: LD_VAR 0 1
43698: PUSH
43699: LD_VAR 0 2
43703: PUSH
43704: LD_INT 4
43706: PLUS
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: LIST
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: ST_TO_ADDR
// end ; 1 :
43723: GO 44423
43725: LD_INT 1
43727: DOUBLE
43728: EQUAL
43729: IFTRUE 43733
43731: GO 43866
43733: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
43734: LD_ADDR_VAR 0 5
43738: PUSH
43739: LD_VAR 0 1
43743: PUSH
43744: LD_VAR 0 2
43748: PUSH
43749: LD_INT 4
43751: MINUS
43752: PUSH
43753: LD_INT 3
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: LIST
43760: PUSH
43761: LD_VAR 0 1
43765: PUSH
43766: LD_INT 3
43768: MINUS
43769: PUSH
43770: LD_VAR 0 2
43774: PUSH
43775: LD_INT 3
43777: MINUS
43778: PUSH
43779: LD_INT 2
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: LIST
43786: PUSH
43787: LD_VAR 0 1
43791: PUSH
43792: LD_INT 4
43794: MINUS
43795: PUSH
43796: LD_VAR 0 2
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: LIST
43808: PUSH
43809: LD_VAR 0 1
43813: PUSH
43814: LD_VAR 0 2
43818: PUSH
43819: LD_INT 3
43821: PLUS
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: LIST
43830: PUSH
43831: LD_VAR 0 1
43835: PUSH
43836: LD_INT 4
43838: PLUS
43839: PUSH
43840: LD_VAR 0 2
43844: PUSH
43845: LD_INT 4
43847: PLUS
43848: PUSH
43849: LD_INT 5
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: LIST
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: ST_TO_ADDR
// end ; 2 :
43864: GO 44423
43866: LD_INT 2
43868: DOUBLE
43869: EQUAL
43870: IFTRUE 43874
43872: GO 44003
43874: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
43875: LD_ADDR_VAR 0 5
43879: PUSH
43880: LD_VAR 0 1
43884: PUSH
43885: LD_VAR 0 2
43889: PUSH
43890: LD_INT 3
43892: MINUS
43893: PUSH
43894: LD_INT 3
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: LIST
43901: PUSH
43902: LD_VAR 0 1
43906: PUSH
43907: LD_INT 4
43909: PLUS
43910: PUSH
43911: LD_VAR 0 2
43915: PUSH
43916: LD_INT 4
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: LIST
43923: PUSH
43924: LD_VAR 0 1
43928: PUSH
43929: LD_VAR 0 2
43933: PUSH
43934: LD_INT 4
43936: PLUS
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: LIST
43945: PUSH
43946: LD_VAR 0 1
43950: PUSH
43951: LD_INT 3
43953: MINUS
43954: PUSH
43955: LD_VAR 0 2
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: LIST
43967: PUSH
43968: LD_VAR 0 1
43972: PUSH
43973: LD_INT 4
43975: MINUS
43976: PUSH
43977: LD_VAR 0 2
43981: PUSH
43982: LD_INT 4
43984: MINUS
43985: PUSH
43986: LD_INT 2
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: LIST
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: ST_TO_ADDR
// end ; 3 :
44001: GO 44423
44003: LD_INT 3
44005: DOUBLE
44006: EQUAL
44007: IFTRUE 44011
44009: GO 44144
44011: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44012: LD_ADDR_VAR 0 5
44016: PUSH
44017: LD_VAR 0 1
44021: PUSH
44022: LD_INT 3
44024: PLUS
44025: PUSH
44026: LD_VAR 0 2
44030: PUSH
44031: LD_INT 4
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: LIST
44038: PUSH
44039: LD_VAR 0 1
44043: PUSH
44044: LD_INT 4
44046: PLUS
44047: PUSH
44048: LD_VAR 0 2
44052: PUSH
44053: LD_INT 4
44055: PLUS
44056: PUSH
44057: LD_INT 5
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: LIST
44064: PUSH
44065: LD_VAR 0 1
44069: PUSH
44070: LD_INT 4
44072: MINUS
44073: PUSH
44074: LD_VAR 0 2
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: LIST
44086: PUSH
44087: LD_VAR 0 1
44091: PUSH
44092: LD_VAR 0 2
44096: PUSH
44097: LD_INT 4
44099: MINUS
44100: PUSH
44101: LD_INT 3
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: LIST
44108: PUSH
44109: LD_VAR 0 1
44113: PUSH
44114: LD_INT 3
44116: MINUS
44117: PUSH
44118: LD_VAR 0 2
44122: PUSH
44123: LD_INT 3
44125: MINUS
44126: PUSH
44127: LD_INT 2
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: LIST
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: ST_TO_ADDR
// end ; 4 :
44142: GO 44423
44144: LD_INT 4
44146: DOUBLE
44147: EQUAL
44148: IFTRUE 44152
44150: GO 44285
44152: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44153: LD_ADDR_VAR 0 5
44157: PUSH
44158: LD_VAR 0 1
44162: PUSH
44163: LD_VAR 0 2
44167: PUSH
44168: LD_INT 4
44170: PLUS
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: LIST
44179: PUSH
44180: LD_VAR 0 1
44184: PUSH
44185: LD_INT 3
44187: PLUS
44188: PUSH
44189: LD_VAR 0 2
44193: PUSH
44194: LD_INT 3
44196: PLUS
44197: PUSH
44198: LD_INT 5
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: LIST
44205: PUSH
44206: LD_VAR 0 1
44210: PUSH
44211: LD_INT 4
44213: PLUS
44214: PUSH
44215: LD_VAR 0 2
44219: PUSH
44220: LD_INT 4
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: LIST
44227: PUSH
44228: LD_VAR 0 1
44232: PUSH
44233: LD_VAR 0 2
44237: PUSH
44238: LD_INT 3
44240: MINUS
44241: PUSH
44242: LD_INT 3
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: LIST
44249: PUSH
44250: LD_VAR 0 1
44254: PUSH
44255: LD_INT 4
44257: MINUS
44258: PUSH
44259: LD_VAR 0 2
44263: PUSH
44264: LD_INT 4
44266: MINUS
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: LIST
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: ST_TO_ADDR
// end ; 5 :
44283: GO 44423
44285: LD_INT 5
44287: DOUBLE
44288: EQUAL
44289: IFTRUE 44293
44291: GO 44422
44293: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44294: LD_ADDR_VAR 0 5
44298: PUSH
44299: LD_VAR 0 1
44303: PUSH
44304: LD_INT 4
44306: MINUS
44307: PUSH
44308: LD_VAR 0 2
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: LIST
44320: PUSH
44321: LD_VAR 0 1
44325: PUSH
44326: LD_VAR 0 2
44330: PUSH
44331: LD_INT 4
44333: MINUS
44334: PUSH
44335: LD_INT 3
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: LIST
44342: PUSH
44343: LD_VAR 0 1
44347: PUSH
44348: LD_INT 4
44350: PLUS
44351: PUSH
44352: LD_VAR 0 2
44356: PUSH
44357: LD_INT 4
44359: PLUS
44360: PUSH
44361: LD_INT 5
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: LIST
44368: PUSH
44369: LD_VAR 0 1
44373: PUSH
44374: LD_INT 3
44376: PLUS
44377: PUSH
44378: LD_VAR 0 2
44382: PUSH
44383: LD_INT 4
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: LIST
44390: PUSH
44391: LD_VAR 0 1
44395: PUSH
44396: LD_VAR 0 2
44400: PUSH
44401: LD_INT 3
44403: PLUS
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: LIST
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: ST_TO_ADDR
// end ; end ;
44420: GO 44423
44422: POP
// result := list ;
44423: LD_ADDR_VAR 0 4
44427: PUSH
44428: LD_VAR 0 5
44432: ST_TO_ADDR
// end ;
44433: LD_VAR 0 4
44437: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
44438: LD_INT 0
44440: PPUSH
44441: PPUSH
44442: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
44443: LD_VAR 0 1
44447: NOT
44448: PUSH
44449: LD_VAR 0 2
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: LD_INT 3
44462: PUSH
44463: LD_INT 4
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: IN
44472: NOT
44473: OR
44474: IFFALSE 44478
// exit ;
44476: GO 44561
// tmp := [ ] ;
44478: LD_ADDR_VAR 0 5
44482: PUSH
44483: EMPTY
44484: ST_TO_ADDR
// for i in units do
44485: LD_ADDR_VAR 0 4
44489: PUSH
44490: LD_VAR 0 1
44494: PUSH
44495: FOR_IN
44496: IFFALSE 44530
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
44498: LD_ADDR_VAR 0 5
44502: PUSH
44503: LD_VAR 0 5
44507: PPUSH
44508: LD_VAR 0 4
44512: PPUSH
44513: LD_VAR 0 2
44517: PPUSH
44518: CALL_OW 259
44522: PPUSH
44523: CALL 45921 0 2
44527: ST_TO_ADDR
44528: GO 44495
44530: POP
44531: POP
// if not tmp then
44532: LD_VAR 0 5
44536: NOT
44537: IFFALSE 44541
// exit ;
44539: GO 44561
// result := SortListByListDesc ( units , tmp ) ;
44541: LD_ADDR_VAR 0 3
44545: PUSH
44546: LD_VAR 0 1
44550: PPUSH
44551: LD_VAR 0 5
44555: PPUSH
44556: CALL_OW 77
44560: ST_TO_ADDR
// end ;
44561: LD_VAR 0 3
44565: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
44566: LD_INT 0
44568: PPUSH
44569: PPUSH
44570: PPUSH
// result := false ;
44571: LD_ADDR_VAR 0 3
44575: PUSH
44576: LD_INT 0
44578: ST_TO_ADDR
// if not building then
44579: LD_VAR 0 2
44583: NOT
44584: IFFALSE 44588
// exit ;
44586: GO 44726
// x := GetX ( building ) ;
44588: LD_ADDR_VAR 0 4
44592: PUSH
44593: LD_VAR 0 2
44597: PPUSH
44598: CALL_OW 250
44602: ST_TO_ADDR
// y := GetY ( building ) ;
44603: LD_ADDR_VAR 0 5
44607: PUSH
44608: LD_VAR 0 2
44612: PPUSH
44613: CALL_OW 251
44617: ST_TO_ADDR
// if not x or not y then
44618: LD_VAR 0 4
44622: NOT
44623: PUSH
44624: LD_VAR 0 5
44628: NOT
44629: OR
44630: IFFALSE 44634
// exit ;
44632: GO 44726
// if GetTaskList ( unit ) then
44634: LD_VAR 0 1
44638: PPUSH
44639: CALL_OW 437
44643: IFFALSE 44726
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44645: LD_STRING e
44647: PUSH
44648: LD_VAR 0 1
44652: PPUSH
44653: CALL_OW 437
44657: PUSH
44658: LD_INT 1
44660: ARRAY
44661: PUSH
44662: LD_INT 1
44664: ARRAY
44665: EQUAL
44666: PUSH
44667: LD_VAR 0 4
44671: PUSH
44672: LD_VAR 0 1
44676: PPUSH
44677: CALL_OW 437
44681: PUSH
44682: LD_INT 1
44684: ARRAY
44685: PUSH
44686: LD_INT 2
44688: ARRAY
44689: EQUAL
44690: AND
44691: PUSH
44692: LD_VAR 0 5
44696: PUSH
44697: LD_VAR 0 1
44701: PPUSH
44702: CALL_OW 437
44706: PUSH
44707: LD_INT 1
44709: ARRAY
44710: PUSH
44711: LD_INT 3
44713: ARRAY
44714: EQUAL
44715: AND
44716: IFFALSE 44726
// result := true end ;
44718: LD_ADDR_VAR 0 3
44722: PUSH
44723: LD_INT 1
44725: ST_TO_ADDR
// end ;
44726: LD_VAR 0 3
44730: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
44731: LD_INT 0
44733: PPUSH
// result := false ;
44734: LD_ADDR_VAR 0 4
44738: PUSH
44739: LD_INT 0
44741: ST_TO_ADDR
// if GetTaskList ( unit ) then
44742: LD_VAR 0 1
44746: PPUSH
44747: CALL_OW 437
44751: IFFALSE 44834
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44753: LD_STRING M
44755: PUSH
44756: LD_VAR 0 1
44760: PPUSH
44761: CALL_OW 437
44765: PUSH
44766: LD_INT 1
44768: ARRAY
44769: PUSH
44770: LD_INT 1
44772: ARRAY
44773: EQUAL
44774: PUSH
44775: LD_VAR 0 2
44779: PUSH
44780: LD_VAR 0 1
44784: PPUSH
44785: CALL_OW 437
44789: PUSH
44790: LD_INT 1
44792: ARRAY
44793: PUSH
44794: LD_INT 2
44796: ARRAY
44797: EQUAL
44798: AND
44799: PUSH
44800: LD_VAR 0 3
44804: PUSH
44805: LD_VAR 0 1
44809: PPUSH
44810: CALL_OW 437
44814: PUSH
44815: LD_INT 1
44817: ARRAY
44818: PUSH
44819: LD_INT 3
44821: ARRAY
44822: EQUAL
44823: AND
44824: IFFALSE 44834
// result := true ;
44826: LD_ADDR_VAR 0 4
44830: PUSH
44831: LD_INT 1
44833: ST_TO_ADDR
// end ; end ;
44834: LD_VAR 0 4
44838: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
44839: LD_INT 0
44841: PPUSH
44842: PPUSH
44843: PPUSH
44844: PPUSH
// if not unit or not area then
44845: LD_VAR 0 1
44849: NOT
44850: PUSH
44851: LD_VAR 0 2
44855: NOT
44856: OR
44857: IFFALSE 44861
// exit ;
44859: GO 45024
// tmp := AreaToList ( area , i ) ;
44861: LD_ADDR_VAR 0 6
44865: PUSH
44866: LD_VAR 0 2
44870: PPUSH
44871: LD_VAR 0 5
44875: PPUSH
44876: CALL_OW 517
44880: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
44881: LD_ADDR_VAR 0 5
44885: PUSH
44886: DOUBLE
44887: LD_INT 1
44889: DEC
44890: ST_TO_ADDR
44891: LD_VAR 0 6
44895: PUSH
44896: LD_INT 1
44898: ARRAY
44899: PUSH
44900: FOR_TO
44901: IFFALSE 45022
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
44903: LD_ADDR_VAR 0 7
44907: PUSH
44908: LD_VAR 0 6
44912: PUSH
44913: LD_INT 1
44915: ARRAY
44916: PUSH
44917: LD_VAR 0 5
44921: ARRAY
44922: PUSH
44923: LD_VAR 0 6
44927: PUSH
44928: LD_INT 2
44930: ARRAY
44931: PUSH
44932: LD_VAR 0 5
44936: ARRAY
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
44942: LD_INT 92
44944: PUSH
44945: LD_VAR 0 7
44949: PUSH
44950: LD_INT 1
44952: ARRAY
44953: PUSH
44954: LD_VAR 0 7
44958: PUSH
44959: LD_INT 2
44961: ARRAY
44962: PUSH
44963: LD_INT 3
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: PPUSH
44972: CALL_OW 69
44976: PUSH
44977: LD_INT 0
44979: EQUAL
44980: IFFALSE 45020
// begin PlaceUnitArea ( unit , area , mode ) ;
44982: LD_VAR 0 1
44986: PPUSH
44987: LD_VAR 0 2
44991: PPUSH
44992: LD_VAR 0 3
44996: PPUSH
44997: CALL_OW 49
// result := IsPlaced ( unit ) ;
45001: LD_ADDR_VAR 0 4
45005: PUSH
45006: LD_VAR 0 1
45010: PPUSH
45011: CALL_OW 305
45015: ST_TO_ADDR
// exit ;
45016: POP
45017: POP
45018: GO 45024
// end ; end ;
45020: GO 44900
45022: POP
45023: POP
// end ;
45024: LD_VAR 0 4
45028: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45029: LD_INT 0
45031: PPUSH
45032: PPUSH
45033: PPUSH
// if not side or side > 8 then
45034: LD_VAR 0 1
45038: NOT
45039: PUSH
45040: LD_VAR 0 1
45044: PUSH
45045: LD_INT 8
45047: GREATER
45048: OR
45049: IFFALSE 45053
// exit ;
45051: GO 45240
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45053: LD_ADDR_VAR 0 4
45057: PUSH
45058: LD_INT 22
45060: PUSH
45061: LD_VAR 0 1
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 21
45072: PUSH
45073: LD_INT 3
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PPUSH
45084: CALL_OW 69
45088: ST_TO_ADDR
// if not tmp then
45089: LD_VAR 0 4
45093: NOT
45094: IFFALSE 45098
// exit ;
45096: GO 45240
// enable_addtolog := true ;
45098: LD_ADDR_OWVAR 81
45102: PUSH
45103: LD_INT 1
45105: ST_TO_ADDR
// AddToLog ( [ ) ;
45106: LD_STRING [
45108: PPUSH
45109: CALL_OW 561
// for i in tmp do
45113: LD_ADDR_VAR 0 3
45117: PUSH
45118: LD_VAR 0 4
45122: PUSH
45123: FOR_IN
45124: IFFALSE 45231
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45126: LD_STRING [
45128: PUSH
45129: LD_VAR 0 3
45133: PPUSH
45134: CALL_OW 266
45138: STR
45139: PUSH
45140: LD_STRING , 
45142: STR
45143: PUSH
45144: LD_VAR 0 3
45148: PPUSH
45149: CALL_OW 250
45153: STR
45154: PUSH
45155: LD_STRING , 
45157: STR
45158: PUSH
45159: LD_VAR 0 3
45163: PPUSH
45164: CALL_OW 251
45168: STR
45169: PUSH
45170: LD_STRING , 
45172: STR
45173: PUSH
45174: LD_VAR 0 3
45178: PPUSH
45179: CALL_OW 254
45183: STR
45184: PUSH
45185: LD_STRING , 
45187: STR
45188: PUSH
45189: LD_VAR 0 3
45193: PPUSH
45194: LD_INT 1
45196: PPUSH
45197: CALL_OW 268
45201: STR
45202: PUSH
45203: LD_STRING , 
45205: STR
45206: PUSH
45207: LD_VAR 0 3
45211: PPUSH
45212: LD_INT 2
45214: PPUSH
45215: CALL_OW 268
45219: STR
45220: PUSH
45221: LD_STRING ],
45223: STR
45224: PPUSH
45225: CALL_OW 561
// end ;
45229: GO 45123
45231: POP
45232: POP
// AddToLog ( ]; ) ;
45233: LD_STRING ];
45235: PPUSH
45236: CALL_OW 561
// end ;
45240: LD_VAR 0 2
45244: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45245: LD_INT 0
45247: PPUSH
45248: PPUSH
45249: PPUSH
45250: PPUSH
45251: PPUSH
// if not area or not rate or not max then
45252: LD_VAR 0 1
45256: NOT
45257: PUSH
45258: LD_VAR 0 2
45262: NOT
45263: OR
45264: PUSH
45265: LD_VAR 0 4
45269: NOT
45270: OR
45271: IFFALSE 45275
// exit ;
45273: GO 45464
// while 1 do
45275: LD_INT 1
45277: IFFALSE 45464
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45279: LD_ADDR_VAR 0 9
45283: PUSH
45284: LD_VAR 0 1
45288: PPUSH
45289: LD_INT 1
45291: PPUSH
45292: CALL_OW 287
45296: PUSH
45297: LD_INT 10
45299: MUL
45300: ST_TO_ADDR
// r := rate / 10 ;
45301: LD_ADDR_VAR 0 7
45305: PUSH
45306: LD_VAR 0 2
45310: PUSH
45311: LD_INT 10
45313: DIVREAL
45314: ST_TO_ADDR
// time := 1 1$00 ;
45315: LD_ADDR_VAR 0 8
45319: PUSH
45320: LD_INT 2100
45322: ST_TO_ADDR
// if amount < min then
45323: LD_VAR 0 9
45327: PUSH
45328: LD_VAR 0 3
45332: LESS
45333: IFFALSE 45351
// r := r * 2 else
45335: LD_ADDR_VAR 0 7
45339: PUSH
45340: LD_VAR 0 7
45344: PUSH
45345: LD_INT 2
45347: MUL
45348: ST_TO_ADDR
45349: GO 45377
// if amount > max then
45351: LD_VAR 0 9
45355: PUSH
45356: LD_VAR 0 4
45360: GREATER
45361: IFFALSE 45377
// r := r / 2 ;
45363: LD_ADDR_VAR 0 7
45367: PUSH
45368: LD_VAR 0 7
45372: PUSH
45373: LD_INT 2
45375: DIVREAL
45376: ST_TO_ADDR
// time := time / r ;
45377: LD_ADDR_VAR 0 8
45381: PUSH
45382: LD_VAR 0 8
45386: PUSH
45387: LD_VAR 0 7
45391: DIVREAL
45392: ST_TO_ADDR
// if time < 0 then
45393: LD_VAR 0 8
45397: PUSH
45398: LD_INT 0
45400: LESS
45401: IFFALSE 45418
// time := time * - 1 ;
45403: LD_ADDR_VAR 0 8
45407: PUSH
45408: LD_VAR 0 8
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: MUL
45417: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
45418: LD_VAR 0 8
45422: PUSH
45423: LD_INT 35
45425: PPUSH
45426: LD_INT 875
45428: PPUSH
45429: CALL_OW 12
45433: PLUS
45434: PPUSH
45435: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
45439: LD_INT 1
45441: PPUSH
45442: LD_INT 5
45444: PPUSH
45445: CALL_OW 12
45449: PPUSH
45450: LD_VAR 0 1
45454: PPUSH
45455: LD_INT 1
45457: PPUSH
45458: CALL_OW 55
// end ;
45462: GO 45275
// end ;
45464: LD_VAR 0 5
45468: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
45469: LD_INT 0
45471: PPUSH
45472: PPUSH
45473: PPUSH
45474: PPUSH
45475: PPUSH
45476: PPUSH
45477: PPUSH
45478: PPUSH
// if not turrets or not factories then
45479: LD_VAR 0 1
45483: NOT
45484: PUSH
45485: LD_VAR 0 2
45489: NOT
45490: OR
45491: IFFALSE 45495
// exit ;
45493: GO 45802
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
45495: LD_ADDR_VAR 0 10
45499: PUSH
45500: LD_INT 5
45502: PUSH
45503: LD_INT 6
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: PUSH
45513: LD_INT 4
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 3
45522: PUSH
45523: LD_INT 5
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 24
45537: PUSH
45538: LD_INT 25
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 23
45547: PUSH
45548: LD_INT 27
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 42
45561: PUSH
45562: LD_INT 43
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 44
45571: PUSH
45572: LD_INT 46
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 45
45581: PUSH
45582: LD_INT 47
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: LIST
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: LIST
45598: ST_TO_ADDR
// result := [ ] ;
45599: LD_ADDR_VAR 0 3
45603: PUSH
45604: EMPTY
45605: ST_TO_ADDR
// for i in turrets do
45606: LD_ADDR_VAR 0 4
45610: PUSH
45611: LD_VAR 0 1
45615: PUSH
45616: FOR_IN
45617: IFFALSE 45800
// begin nat := GetNation ( i ) ;
45619: LD_ADDR_VAR 0 7
45623: PUSH
45624: LD_VAR 0 4
45628: PPUSH
45629: CALL_OW 248
45633: ST_TO_ADDR
// weapon := 0 ;
45634: LD_ADDR_VAR 0 8
45638: PUSH
45639: LD_INT 0
45641: ST_TO_ADDR
// if not nat then
45642: LD_VAR 0 7
45646: NOT
45647: IFFALSE 45651
// continue ;
45649: GO 45616
// for j in list [ nat ] do
45651: LD_ADDR_VAR 0 5
45655: PUSH
45656: LD_VAR 0 10
45660: PUSH
45661: LD_VAR 0 7
45665: ARRAY
45666: PUSH
45667: FOR_IN
45668: IFFALSE 45709
// if GetBWeapon ( i ) = j [ 1 ] then
45670: LD_VAR 0 4
45674: PPUSH
45675: CALL_OW 269
45679: PUSH
45680: LD_VAR 0 5
45684: PUSH
45685: LD_INT 1
45687: ARRAY
45688: EQUAL
45689: IFFALSE 45707
// begin weapon := j [ 2 ] ;
45691: LD_ADDR_VAR 0 8
45695: PUSH
45696: LD_VAR 0 5
45700: PUSH
45701: LD_INT 2
45703: ARRAY
45704: ST_TO_ADDR
// break ;
45705: GO 45709
// end ;
45707: GO 45667
45709: POP
45710: POP
// if not weapon then
45711: LD_VAR 0 8
45715: NOT
45716: IFFALSE 45720
// continue ;
45718: GO 45616
// for k in factories do
45720: LD_ADDR_VAR 0 6
45724: PUSH
45725: LD_VAR 0 2
45729: PUSH
45730: FOR_IN
45731: IFFALSE 45796
// begin weapons := AvailableWeaponList ( k ) ;
45733: LD_ADDR_VAR 0 9
45737: PUSH
45738: LD_VAR 0 6
45742: PPUSH
45743: CALL_OW 478
45747: ST_TO_ADDR
// if not weapons then
45748: LD_VAR 0 9
45752: NOT
45753: IFFALSE 45757
// continue ;
45755: GO 45730
// if weapon in weapons then
45757: LD_VAR 0 8
45761: PUSH
45762: LD_VAR 0 9
45766: IN
45767: IFFALSE 45794
// begin result := [ i , weapon ] ;
45769: LD_ADDR_VAR 0 3
45773: PUSH
45774: LD_VAR 0 4
45778: PUSH
45779: LD_VAR 0 8
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: ST_TO_ADDR
// exit ;
45788: POP
45789: POP
45790: POP
45791: POP
45792: GO 45802
// end ; end ;
45794: GO 45730
45796: POP
45797: POP
// end ;
45798: GO 45616
45800: POP
45801: POP
// end ;
45802: LD_VAR 0 3
45806: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
45807: LD_INT 0
45809: PPUSH
// if not side or side > 8 then
45810: LD_VAR 0 3
45814: NOT
45815: PUSH
45816: LD_VAR 0 3
45820: PUSH
45821: LD_INT 8
45823: GREATER
45824: OR
45825: IFFALSE 45829
// exit ;
45827: GO 45888
// if not range then
45829: LD_VAR 0 4
45833: NOT
45834: IFFALSE 45845
// range := - 12 ;
45836: LD_ADDR_VAR 0 4
45840: PUSH
45841: LD_INT 12
45843: NEG
45844: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
45845: LD_VAR 0 1
45849: PPUSH
45850: LD_VAR 0 2
45854: PPUSH
45855: LD_VAR 0 3
45859: PPUSH
45860: LD_VAR 0 4
45864: PPUSH
45865: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
45869: LD_VAR 0 1
45873: PPUSH
45874: LD_VAR 0 2
45878: PPUSH
45879: LD_VAR 0 3
45883: PPUSH
45884: CALL_OW 331
// end ;
45888: LD_VAR 0 5
45892: RET
// export function Video ( mode ) ; begin
45893: LD_INT 0
45895: PPUSH
// ingame_video = mode ;
45896: LD_ADDR_OWVAR 52
45900: PUSH
45901: LD_VAR 0 1
45905: ST_TO_ADDR
// interface_hidden = mode ;
45906: LD_ADDR_OWVAR 54
45910: PUSH
45911: LD_VAR 0 1
45915: ST_TO_ADDR
// end ;
45916: LD_VAR 0 2
45920: RET
// export function Join ( array , element ) ; begin
45921: LD_INT 0
45923: PPUSH
// result := Replace ( array , array + 1 , element ) ;
45924: LD_ADDR_VAR 0 3
45928: PUSH
45929: LD_VAR 0 1
45933: PPUSH
45934: LD_VAR 0 1
45938: PUSH
45939: LD_INT 1
45941: PLUS
45942: PPUSH
45943: LD_VAR 0 2
45947: PPUSH
45948: CALL_OW 1
45952: ST_TO_ADDR
// end ;
45953: LD_VAR 0 3
45957: RET
// export function JoinUnion ( array , element ) ; begin
45958: LD_INT 0
45960: PPUSH
// result := array union element ;
45961: LD_ADDR_VAR 0 3
45965: PUSH
45966: LD_VAR 0 1
45970: PUSH
45971: LD_VAR 0 2
45975: UNION
45976: ST_TO_ADDR
// end ;
45977: LD_VAR 0 3
45981: RET
// export function GetBehemoths ( side ) ; begin
45982: LD_INT 0
45984: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
45985: LD_ADDR_VAR 0 2
45989: PUSH
45990: LD_INT 22
45992: PUSH
45993: LD_VAR 0 1
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 31
46004: PUSH
46005: LD_INT 25
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PPUSH
46016: CALL_OW 69
46020: ST_TO_ADDR
// end ;
46021: LD_VAR 0 2
46025: RET
// export function Shuffle ( array ) ; var i , index ; begin
46026: LD_INT 0
46028: PPUSH
46029: PPUSH
46030: PPUSH
// result := [ ] ;
46031: LD_ADDR_VAR 0 2
46035: PUSH
46036: EMPTY
46037: ST_TO_ADDR
// if not array then
46038: LD_VAR 0 1
46042: NOT
46043: IFFALSE 46047
// exit ;
46045: GO 46146
// Randomize ;
46047: CALL_OW 10
// for i = array downto 1 do
46051: LD_ADDR_VAR 0 3
46055: PUSH
46056: DOUBLE
46057: LD_VAR 0 1
46061: INC
46062: ST_TO_ADDR
46063: LD_INT 1
46065: PUSH
46066: FOR_DOWNTO
46067: IFFALSE 46144
// begin index := rand ( 1 , array ) ;
46069: LD_ADDR_VAR 0 4
46073: PUSH
46074: LD_INT 1
46076: PPUSH
46077: LD_VAR 0 1
46081: PPUSH
46082: CALL_OW 12
46086: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46087: LD_ADDR_VAR 0 2
46091: PUSH
46092: LD_VAR 0 2
46096: PPUSH
46097: LD_VAR 0 2
46101: PUSH
46102: LD_INT 1
46104: PLUS
46105: PPUSH
46106: LD_VAR 0 1
46110: PUSH
46111: LD_VAR 0 4
46115: ARRAY
46116: PPUSH
46117: CALL_OW 2
46121: ST_TO_ADDR
// array := Delete ( array , index ) ;
46122: LD_ADDR_VAR 0 1
46126: PUSH
46127: LD_VAR 0 1
46131: PPUSH
46132: LD_VAR 0 4
46136: PPUSH
46137: CALL_OW 3
46141: ST_TO_ADDR
// end ;
46142: GO 46066
46144: POP
46145: POP
// end ;
46146: LD_VAR 0 2
46150: RET
// export function GetBaseMaterials ( base ) ; begin
46151: LD_INT 0
46153: PPUSH
// result := [ 0 , 0 , 0 ] ;
46154: LD_ADDR_VAR 0 2
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: LIST
46172: ST_TO_ADDR
// if not base then
46173: LD_VAR 0 1
46177: NOT
46178: IFFALSE 46182
// exit ;
46180: GO 46231
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46182: LD_ADDR_VAR 0 2
46186: PUSH
46187: LD_VAR 0 1
46191: PPUSH
46192: LD_INT 1
46194: PPUSH
46195: CALL_OW 275
46199: PUSH
46200: LD_VAR 0 1
46204: PPUSH
46205: LD_INT 2
46207: PPUSH
46208: CALL_OW 275
46212: PUSH
46213: LD_VAR 0 1
46217: PPUSH
46218: LD_INT 3
46220: PPUSH
46221: CALL_OW 275
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: LIST
46230: ST_TO_ADDR
// end ;
46231: LD_VAR 0 2
46235: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46236: LD_INT 0
46238: PPUSH
46239: PPUSH
// result := array ;
46240: LD_ADDR_VAR 0 3
46244: PUSH
46245: LD_VAR 0 1
46249: ST_TO_ADDR
// if size >= result then
46250: LD_VAR 0 2
46254: PUSH
46255: LD_VAR 0 3
46259: GREATEREQUAL
46260: IFFALSE 46264
// exit ;
46262: GO 46314
// if size then
46264: LD_VAR 0 2
46268: IFFALSE 46314
// for i := array downto size do
46270: LD_ADDR_VAR 0 4
46274: PUSH
46275: DOUBLE
46276: LD_VAR 0 1
46280: INC
46281: ST_TO_ADDR
46282: LD_VAR 0 2
46286: PUSH
46287: FOR_DOWNTO
46288: IFFALSE 46312
// result := Delete ( result , result ) ;
46290: LD_ADDR_VAR 0 3
46294: PUSH
46295: LD_VAR 0 3
46299: PPUSH
46300: LD_VAR 0 3
46304: PPUSH
46305: CALL_OW 3
46309: ST_TO_ADDR
46310: GO 46287
46312: POP
46313: POP
// end ;
46314: LD_VAR 0 3
46318: RET
// export function ComExit ( unit ) ; var tmp ; begin
46319: LD_INT 0
46321: PPUSH
46322: PPUSH
// if not IsInUnit ( unit ) then
46323: LD_VAR 0 1
46327: PPUSH
46328: CALL_OW 310
46332: NOT
46333: IFFALSE 46337
// exit ;
46335: GO 46397
// tmp := IsInUnit ( unit ) ;
46337: LD_ADDR_VAR 0 3
46341: PUSH
46342: LD_VAR 0 1
46346: PPUSH
46347: CALL_OW 310
46351: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
46352: LD_VAR 0 3
46356: PPUSH
46357: CALL_OW 247
46361: PUSH
46362: LD_INT 2
46364: EQUAL
46365: IFFALSE 46378
// ComExitVehicle ( unit ) else
46367: LD_VAR 0 1
46371: PPUSH
46372: CALL_OW 121
46376: GO 46387
// ComExitBuilding ( unit ) ;
46378: LD_VAR 0 1
46382: PPUSH
46383: CALL_OW 122
// result := tmp ;
46387: LD_ADDR_VAR 0 2
46391: PUSH
46392: LD_VAR 0 3
46396: ST_TO_ADDR
// end ;
46397: LD_VAR 0 2
46401: RET
// export function ComExitAll ( units ) ; var i ; begin
46402: LD_INT 0
46404: PPUSH
46405: PPUSH
// if not units then
46406: LD_VAR 0 1
46410: NOT
46411: IFFALSE 46415
// exit ;
46413: GO 46441
// for i in units do
46415: LD_ADDR_VAR 0 3
46419: PUSH
46420: LD_VAR 0 1
46424: PUSH
46425: FOR_IN
46426: IFFALSE 46439
// ComExit ( i ) ;
46428: LD_VAR 0 3
46432: PPUSH
46433: CALL 46319 0 1
46437: GO 46425
46439: POP
46440: POP
// end ;
46441: LD_VAR 0 2
46445: RET
// export function ResetHc ; begin
46446: LD_INT 0
46448: PPUSH
// InitHc ;
46449: CALL_OW 19
// hc_importance := 0 ;
46453: LD_ADDR_OWVAR 32
46457: PUSH
46458: LD_INT 0
46460: ST_TO_ADDR
// end ;
46461: LD_VAR 0 1
46465: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
46466: LD_INT 0
46468: PPUSH
46469: PPUSH
46470: PPUSH
// _x := ( x1 + x2 ) div 2 ;
46471: LD_ADDR_VAR 0 6
46475: PUSH
46476: LD_VAR 0 1
46480: PUSH
46481: LD_VAR 0 3
46485: PLUS
46486: PUSH
46487: LD_INT 2
46489: DIV
46490: ST_TO_ADDR
// if _x < 0 then
46491: LD_VAR 0 6
46495: PUSH
46496: LD_INT 0
46498: LESS
46499: IFFALSE 46516
// _x := _x * - 1 ;
46501: LD_ADDR_VAR 0 6
46505: PUSH
46506: LD_VAR 0 6
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: MUL
46515: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
46516: LD_ADDR_VAR 0 7
46520: PUSH
46521: LD_VAR 0 2
46525: PUSH
46526: LD_VAR 0 4
46530: PLUS
46531: PUSH
46532: LD_INT 2
46534: DIV
46535: ST_TO_ADDR
// if _y < 0 then
46536: LD_VAR 0 7
46540: PUSH
46541: LD_INT 0
46543: LESS
46544: IFFALSE 46561
// _y := _y * - 1 ;
46546: LD_ADDR_VAR 0 7
46550: PUSH
46551: LD_VAR 0 7
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: MUL
46560: ST_TO_ADDR
// result := [ _x , _y ] ;
46561: LD_ADDR_VAR 0 5
46565: PUSH
46566: LD_VAR 0 6
46570: PUSH
46571: LD_VAR 0 7
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: ST_TO_ADDR
// end ;
46580: LD_VAR 0 5
46584: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
46585: LD_INT 0
46587: PPUSH
46588: PPUSH
46589: PPUSH
46590: PPUSH
// task := GetTaskList ( unit ) ;
46591: LD_ADDR_VAR 0 7
46595: PUSH
46596: LD_VAR 0 1
46600: PPUSH
46601: CALL_OW 437
46605: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
46606: LD_VAR 0 7
46610: NOT
46611: PUSH
46612: LD_VAR 0 1
46616: PPUSH
46617: LD_VAR 0 2
46621: PPUSH
46622: CALL_OW 308
46626: NOT
46627: AND
46628: IFFALSE 46632
// exit ;
46630: GO 46750
// if IsInArea ( unit , area ) then
46632: LD_VAR 0 1
46636: PPUSH
46637: LD_VAR 0 2
46641: PPUSH
46642: CALL_OW 308
46646: IFFALSE 46664
// begin ComMoveToArea ( unit , goAway ) ;
46648: LD_VAR 0 1
46652: PPUSH
46653: LD_VAR 0 3
46657: PPUSH
46658: CALL_OW 113
// exit ;
46662: GO 46750
// end ; if task [ 1 ] [ 1 ] <> M then
46664: LD_VAR 0 7
46668: PUSH
46669: LD_INT 1
46671: ARRAY
46672: PUSH
46673: LD_INT 1
46675: ARRAY
46676: PUSH
46677: LD_STRING M
46679: NONEQUAL
46680: IFFALSE 46684
// exit ;
46682: GO 46750
// x := task [ 1 ] [ 2 ] ;
46684: LD_ADDR_VAR 0 5
46688: PUSH
46689: LD_VAR 0 7
46693: PUSH
46694: LD_INT 1
46696: ARRAY
46697: PUSH
46698: LD_INT 2
46700: ARRAY
46701: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
46702: LD_ADDR_VAR 0 6
46706: PUSH
46707: LD_VAR 0 7
46711: PUSH
46712: LD_INT 1
46714: ARRAY
46715: PUSH
46716: LD_INT 3
46718: ARRAY
46719: ST_TO_ADDR
// if InArea ( x , y , area ) then
46720: LD_VAR 0 5
46724: PPUSH
46725: LD_VAR 0 6
46729: PPUSH
46730: LD_VAR 0 2
46734: PPUSH
46735: CALL_OW 309
46739: IFFALSE 46750
// ComStop ( unit ) ;
46741: LD_VAR 0 1
46745: PPUSH
46746: CALL_OW 141
// end ;
46750: LD_VAR 0 4
46754: RET
// export function Abs ( value ) ; begin
46755: LD_INT 0
46757: PPUSH
// result := value ;
46758: LD_ADDR_VAR 0 2
46762: PUSH
46763: LD_VAR 0 1
46767: ST_TO_ADDR
// if value < 0 then
46768: LD_VAR 0 1
46772: PUSH
46773: LD_INT 0
46775: LESS
46776: IFFALSE 46793
// result := value * - 1 ;
46778: LD_ADDR_VAR 0 2
46782: PUSH
46783: LD_VAR 0 1
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: MUL
46792: ST_TO_ADDR
// end ;
46793: LD_VAR 0 2
46797: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
46798: LD_INT 0
46800: PPUSH
46801: PPUSH
46802: PPUSH
46803: PPUSH
46804: PPUSH
46805: PPUSH
46806: PPUSH
46807: PPUSH
// if not unit or not building then
46808: LD_VAR 0 1
46812: NOT
46813: PUSH
46814: LD_VAR 0 2
46818: NOT
46819: OR
46820: IFFALSE 46824
// exit ;
46822: GO 47050
// x := GetX ( building ) ;
46824: LD_ADDR_VAR 0 4
46828: PUSH
46829: LD_VAR 0 2
46833: PPUSH
46834: CALL_OW 250
46838: ST_TO_ADDR
// y := GetY ( building ) ;
46839: LD_ADDR_VAR 0 6
46843: PUSH
46844: LD_VAR 0 2
46848: PPUSH
46849: CALL_OW 251
46853: ST_TO_ADDR
// d := GetDir ( building ) ;
46854: LD_ADDR_VAR 0 8
46858: PUSH
46859: LD_VAR 0 2
46863: PPUSH
46864: CALL_OW 254
46868: ST_TO_ADDR
// r := 4 ;
46869: LD_ADDR_VAR 0 9
46873: PUSH
46874: LD_INT 4
46876: ST_TO_ADDR
// for i := 1 to 5 do
46877: LD_ADDR_VAR 0 10
46881: PUSH
46882: DOUBLE
46883: LD_INT 1
46885: DEC
46886: ST_TO_ADDR
46887: LD_INT 5
46889: PUSH
46890: FOR_TO
46891: IFFALSE 47048
// begin _x := ShiftX ( x , d , r + i ) ;
46893: LD_ADDR_VAR 0 5
46897: PUSH
46898: LD_VAR 0 4
46902: PPUSH
46903: LD_VAR 0 8
46907: PPUSH
46908: LD_VAR 0 9
46912: PUSH
46913: LD_VAR 0 10
46917: PLUS
46918: PPUSH
46919: CALL_OW 272
46923: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
46924: LD_ADDR_VAR 0 7
46928: PUSH
46929: LD_VAR 0 6
46933: PPUSH
46934: LD_VAR 0 8
46938: PPUSH
46939: LD_VAR 0 9
46943: PUSH
46944: LD_VAR 0 10
46948: PLUS
46949: PPUSH
46950: CALL_OW 273
46954: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
46955: LD_VAR 0 5
46959: PPUSH
46960: LD_VAR 0 7
46964: PPUSH
46965: CALL_OW 488
46969: PUSH
46970: LD_VAR 0 5
46974: PPUSH
46975: LD_VAR 0 7
46979: PPUSH
46980: CALL_OW 428
46984: PPUSH
46985: CALL_OW 247
46989: PUSH
46990: LD_INT 3
46992: PUSH
46993: LD_INT 2
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: IN
47000: NOT
47001: AND
47002: IFFALSE 47046
// begin ComMoveXY ( unit , _x , _y ) ;
47004: LD_VAR 0 1
47008: PPUSH
47009: LD_VAR 0 5
47013: PPUSH
47014: LD_VAR 0 7
47018: PPUSH
47019: CALL_OW 111
// result := [ _x , _y ] ;
47023: LD_ADDR_VAR 0 3
47027: PUSH
47028: LD_VAR 0 5
47032: PUSH
47033: LD_VAR 0 7
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: ST_TO_ADDR
// exit ;
47042: POP
47043: POP
47044: GO 47050
// end ; end ;
47046: GO 46890
47048: POP
47049: POP
// end ;
47050: LD_VAR 0 3
47054: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47055: LD_INT 0
47057: PPUSH
47058: PPUSH
47059: PPUSH
// result := 0 ;
47060: LD_ADDR_VAR 0 3
47064: PUSH
47065: LD_INT 0
47067: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47068: LD_VAR 0 1
47072: PUSH
47073: LD_INT 0
47075: LESS
47076: PUSH
47077: LD_VAR 0 1
47081: PUSH
47082: LD_INT 8
47084: GREATER
47085: OR
47086: PUSH
47087: LD_VAR 0 2
47091: PUSH
47092: LD_INT 0
47094: LESS
47095: OR
47096: PUSH
47097: LD_VAR 0 2
47101: PUSH
47102: LD_INT 8
47104: GREATER
47105: OR
47106: IFFALSE 47110
// exit ;
47108: GO 47185
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47110: LD_ADDR_VAR 0 4
47114: PUSH
47115: LD_INT 22
47117: PUSH
47118: LD_VAR 0 2
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PPUSH
47127: CALL_OW 69
47131: PUSH
47132: FOR_IN
47133: IFFALSE 47183
// begin un := UnitShoot ( i ) ;
47135: LD_ADDR_VAR 0 5
47139: PUSH
47140: LD_VAR 0 4
47144: PPUSH
47145: CALL_OW 504
47149: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47150: LD_VAR 0 5
47154: PPUSH
47155: CALL_OW 255
47159: PUSH
47160: LD_VAR 0 1
47164: EQUAL
47165: IFFALSE 47181
// begin result := un ;
47167: LD_ADDR_VAR 0 3
47171: PUSH
47172: LD_VAR 0 5
47176: ST_TO_ADDR
// exit ;
47177: POP
47178: POP
47179: GO 47185
// end ; end ;
47181: GO 47132
47183: POP
47184: POP
// end ;
47185: LD_VAR 0 3
47189: RET
// export function GetCargoBay ( units ) ; begin
47190: LD_INT 0
47192: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47193: LD_ADDR_VAR 0 2
47197: PUSH
47198: LD_VAR 0 1
47202: PPUSH
47203: LD_INT 2
47205: PUSH
47206: LD_INT 34
47208: PUSH
47209: LD_INT 12
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 34
47218: PUSH
47219: LD_INT 51
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 34
47228: PUSH
47229: LD_INT 32
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 34
47238: PUSH
47239: LD_INT 89
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: PPUSH
47253: CALL_OW 72
47257: ST_TO_ADDR
// end ;
47258: LD_VAR 0 2
47262: RET
// export function Negate ( value ) ; begin
47263: LD_INT 0
47265: PPUSH
// result := not value ;
47266: LD_ADDR_VAR 0 2
47270: PUSH
47271: LD_VAR 0 1
47275: NOT
47276: ST_TO_ADDR
// end ;
47277: LD_VAR 0 2
47281: RET
// export function Inc ( value ) ; begin
47282: LD_INT 0
47284: PPUSH
// result := value + 1 ;
47285: LD_ADDR_VAR 0 2
47289: PUSH
47290: LD_VAR 0 1
47294: PUSH
47295: LD_INT 1
47297: PLUS
47298: ST_TO_ADDR
// end ;
47299: LD_VAR 0 2
47303: RET
// export function Dec ( value ) ; begin
47304: LD_INT 0
47306: PPUSH
// result := value - 1 ;
47307: LD_ADDR_VAR 0 2
47311: PUSH
47312: LD_VAR 0 1
47316: PUSH
47317: LD_INT 1
47319: MINUS
47320: ST_TO_ADDR
// end ;
47321: LD_VAR 0 2
47325: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
47326: LD_INT 0
47328: PPUSH
47329: PPUSH
47330: PPUSH
47331: PPUSH
47332: PPUSH
47333: PPUSH
47334: PPUSH
47335: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
47336: LD_VAR 0 1
47340: PPUSH
47341: LD_VAR 0 2
47345: PPUSH
47346: CALL_OW 488
47350: NOT
47351: PUSH
47352: LD_VAR 0 3
47356: PPUSH
47357: LD_VAR 0 4
47361: PPUSH
47362: CALL_OW 488
47366: NOT
47367: OR
47368: IFFALSE 47381
// begin result := - 1 ;
47370: LD_ADDR_VAR 0 5
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: ST_TO_ADDR
// exit ;
47379: GO 47616
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
47381: LD_ADDR_VAR 0 12
47385: PUSH
47386: LD_VAR 0 1
47390: PPUSH
47391: LD_VAR 0 2
47395: PPUSH
47396: LD_VAR 0 3
47400: PPUSH
47401: LD_VAR 0 4
47405: PPUSH
47406: CALL 46466 0 4
47410: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
47411: LD_ADDR_VAR 0 11
47415: PUSH
47416: LD_VAR 0 1
47420: PPUSH
47421: LD_VAR 0 2
47425: PPUSH
47426: LD_VAR 0 12
47430: PUSH
47431: LD_INT 1
47433: ARRAY
47434: PPUSH
47435: LD_VAR 0 12
47439: PUSH
47440: LD_INT 2
47442: ARRAY
47443: PPUSH
47444: CALL_OW 298
47448: ST_TO_ADDR
// distance := 9999 ;
47449: LD_ADDR_VAR 0 10
47453: PUSH
47454: LD_INT 9999
47456: ST_TO_ADDR
// for i := 0 to 5 do
47457: LD_ADDR_VAR 0 6
47461: PUSH
47462: DOUBLE
47463: LD_INT 0
47465: DEC
47466: ST_TO_ADDR
47467: LD_INT 5
47469: PUSH
47470: FOR_TO
47471: IFFALSE 47614
// begin _x := ShiftX ( x1 , i , centerDist ) ;
47473: LD_ADDR_VAR 0 7
47477: PUSH
47478: LD_VAR 0 1
47482: PPUSH
47483: LD_VAR 0 6
47487: PPUSH
47488: LD_VAR 0 11
47492: PPUSH
47493: CALL_OW 272
47497: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
47498: LD_ADDR_VAR 0 8
47502: PUSH
47503: LD_VAR 0 2
47507: PPUSH
47508: LD_VAR 0 6
47512: PPUSH
47513: LD_VAR 0 11
47517: PPUSH
47518: CALL_OW 273
47522: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47523: LD_VAR 0 7
47527: PPUSH
47528: LD_VAR 0 8
47532: PPUSH
47533: CALL_OW 488
47537: NOT
47538: IFFALSE 47542
// continue ;
47540: GO 47470
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
47542: LD_ADDR_VAR 0 9
47546: PUSH
47547: LD_VAR 0 12
47551: PUSH
47552: LD_INT 1
47554: ARRAY
47555: PPUSH
47556: LD_VAR 0 12
47560: PUSH
47561: LD_INT 2
47563: ARRAY
47564: PPUSH
47565: LD_VAR 0 7
47569: PPUSH
47570: LD_VAR 0 8
47574: PPUSH
47575: CALL_OW 298
47579: ST_TO_ADDR
// if tmp < distance then
47580: LD_VAR 0 9
47584: PUSH
47585: LD_VAR 0 10
47589: LESS
47590: IFFALSE 47612
// begin result := i ;
47592: LD_ADDR_VAR 0 5
47596: PUSH
47597: LD_VAR 0 6
47601: ST_TO_ADDR
// distance := tmp ;
47602: LD_ADDR_VAR 0 10
47606: PUSH
47607: LD_VAR 0 9
47611: ST_TO_ADDR
// end ; end ;
47612: GO 47470
47614: POP
47615: POP
// end ;
47616: LD_VAR 0 5
47620: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47621: LD_INT 0
47623: PPUSH
47624: PPUSH
// if not driver or not IsInUnit ( driver ) then
47625: LD_VAR 0 1
47629: NOT
47630: PUSH
47631: LD_VAR 0 1
47635: PPUSH
47636: CALL_OW 310
47640: NOT
47641: OR
47642: IFFALSE 47646
// exit ;
47644: GO 47736
// vehicle := IsInUnit ( driver ) ;
47646: LD_ADDR_VAR 0 3
47650: PUSH
47651: LD_VAR 0 1
47655: PPUSH
47656: CALL_OW 310
47660: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47661: LD_VAR 0 1
47665: PPUSH
47666: LD_STRING \
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: PUSH
47696: LD_STRING E
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_VAR 0 3
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PPUSH
47732: CALL_OW 446
// end ;
47736: LD_VAR 0 2
47740: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47741: LD_INT 0
47743: PPUSH
47744: PPUSH
// if not driver or not IsInUnit ( driver ) then
47745: LD_VAR 0 1
47749: NOT
47750: PUSH
47751: LD_VAR 0 1
47755: PPUSH
47756: CALL_OW 310
47760: NOT
47761: OR
47762: IFFALSE 47766
// exit ;
47764: GO 47856
// vehicle := IsInUnit ( driver ) ;
47766: LD_ADDR_VAR 0 3
47770: PUSH
47771: LD_VAR 0 1
47775: PPUSH
47776: CALL_OW 310
47780: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47781: LD_VAR 0 1
47785: PPUSH
47786: LD_STRING \
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: PUSH
47816: LD_STRING E
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_VAR 0 3
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PPUSH
47852: CALL_OW 447
// end ;
47856: LD_VAR 0 2
47860: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
47861: LD_INT 0
47863: PPUSH
47864: PPUSH
47865: PPUSH
// tmp := [ ] ;
47866: LD_ADDR_VAR 0 5
47870: PUSH
47871: EMPTY
47872: ST_TO_ADDR
// for i in units do
47873: LD_ADDR_VAR 0 4
47877: PUSH
47878: LD_VAR 0 1
47882: PUSH
47883: FOR_IN
47884: IFFALSE 47922
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
47886: LD_ADDR_VAR 0 5
47890: PUSH
47891: LD_VAR 0 5
47895: PPUSH
47896: LD_VAR 0 5
47900: PUSH
47901: LD_INT 1
47903: PLUS
47904: PPUSH
47905: LD_VAR 0 4
47909: PPUSH
47910: CALL_OW 256
47914: PPUSH
47915: CALL_OW 2
47919: ST_TO_ADDR
47920: GO 47883
47922: POP
47923: POP
// if not tmp then
47924: LD_VAR 0 5
47928: NOT
47929: IFFALSE 47933
// exit ;
47931: GO 47981
// if asc then
47933: LD_VAR 0 2
47937: IFFALSE 47961
// result := SortListByListAsc ( units , tmp ) else
47939: LD_ADDR_VAR 0 3
47943: PUSH
47944: LD_VAR 0 1
47948: PPUSH
47949: LD_VAR 0 5
47953: PPUSH
47954: CALL_OW 76
47958: ST_TO_ADDR
47959: GO 47981
// result := SortListByListDesc ( units , tmp ) ;
47961: LD_ADDR_VAR 0 3
47965: PUSH
47966: LD_VAR 0 1
47970: PPUSH
47971: LD_VAR 0 5
47975: PPUSH
47976: CALL_OW 77
47980: ST_TO_ADDR
// end ;
47981: LD_VAR 0 3
47985: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
47986: LD_INT 0
47988: PPUSH
47989: PPUSH
// task := GetTaskList ( mech ) ;
47990: LD_ADDR_VAR 0 4
47994: PUSH
47995: LD_VAR 0 1
47999: PPUSH
48000: CALL_OW 437
48004: ST_TO_ADDR
// if not task then
48005: LD_VAR 0 4
48009: NOT
48010: IFFALSE 48014
// exit ;
48012: GO 48056
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48014: LD_ADDR_VAR 0 3
48018: PUSH
48019: LD_VAR 0 4
48023: PUSH
48024: LD_INT 1
48026: ARRAY
48027: PUSH
48028: LD_INT 1
48030: ARRAY
48031: PUSH
48032: LD_STRING r
48034: EQUAL
48035: PUSH
48036: LD_VAR 0 4
48040: PUSH
48041: LD_INT 1
48043: ARRAY
48044: PUSH
48045: LD_INT 4
48047: ARRAY
48048: PUSH
48049: LD_VAR 0 2
48053: EQUAL
48054: AND
48055: ST_TO_ADDR
// end ;
48056: LD_VAR 0 3
48060: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48061: LD_INT 0
48063: PPUSH
// SetDir ( unit , d ) ;
48064: LD_VAR 0 1
48068: PPUSH
48069: LD_VAR 0 4
48073: PPUSH
48074: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48078: LD_VAR 0 1
48082: PPUSH
48083: LD_VAR 0 2
48087: PPUSH
48088: LD_VAR 0 3
48092: PPUSH
48093: LD_VAR 0 5
48097: PPUSH
48098: CALL_OW 48
// end ;
48102: LD_VAR 0 6
48106: RET
// export function ToNaturalNumber ( number ) ; begin
48107: LD_INT 0
48109: PPUSH
// result := number div 1 ;
48110: LD_ADDR_VAR 0 2
48114: PUSH
48115: LD_VAR 0 1
48119: PUSH
48120: LD_INT 1
48122: DIV
48123: ST_TO_ADDR
// if number < 0 then
48124: LD_VAR 0 1
48128: PUSH
48129: LD_INT 0
48131: LESS
48132: IFFALSE 48142
// result := 0 ;
48134: LD_ADDR_VAR 0 2
48138: PUSH
48139: LD_INT 0
48141: ST_TO_ADDR
// end ;
48142: LD_VAR 0 2
48146: RET
// export function SortByClass ( units , class ) ; var un ; begin
48147: LD_INT 0
48149: PPUSH
48150: PPUSH
// if not units or not class then
48151: LD_VAR 0 1
48155: NOT
48156: PUSH
48157: LD_VAR 0 2
48161: NOT
48162: OR
48163: IFFALSE 48167
// exit ;
48165: GO 48262
// result := [ ] ;
48167: LD_ADDR_VAR 0 3
48171: PUSH
48172: EMPTY
48173: ST_TO_ADDR
// for un in units do
48174: LD_ADDR_VAR 0 4
48178: PUSH
48179: LD_VAR 0 1
48183: PUSH
48184: FOR_IN
48185: IFFALSE 48260
// if GetClass ( un ) = class then
48187: LD_VAR 0 4
48191: PPUSH
48192: CALL_OW 257
48196: PUSH
48197: LD_VAR 0 2
48201: EQUAL
48202: IFFALSE 48229
// result := Insert ( result , 1 , un ) else
48204: LD_ADDR_VAR 0 3
48208: PUSH
48209: LD_VAR 0 3
48213: PPUSH
48214: LD_INT 1
48216: PPUSH
48217: LD_VAR 0 4
48221: PPUSH
48222: CALL_OW 2
48226: ST_TO_ADDR
48227: GO 48258
// result := Replace ( result , result + 1 , un ) ;
48229: LD_ADDR_VAR 0 3
48233: PUSH
48234: LD_VAR 0 3
48238: PPUSH
48239: LD_VAR 0 3
48243: PUSH
48244: LD_INT 1
48246: PLUS
48247: PPUSH
48248: LD_VAR 0 4
48252: PPUSH
48253: CALL_OW 1
48257: ST_TO_ADDR
48258: GO 48184
48260: POP
48261: POP
// end ;
48262: LD_VAR 0 3
48266: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
48267: LD_INT 0
48269: PPUSH
48270: PPUSH
48271: PPUSH
48272: PPUSH
48273: PPUSH
48274: PPUSH
48275: PPUSH
// result := [ ] ;
48276: LD_ADDR_VAR 0 4
48280: PUSH
48281: EMPTY
48282: ST_TO_ADDR
// if x - r < 0 then
48283: LD_VAR 0 1
48287: PUSH
48288: LD_VAR 0 3
48292: MINUS
48293: PUSH
48294: LD_INT 0
48296: LESS
48297: IFFALSE 48309
// min_x := 0 else
48299: LD_ADDR_VAR 0 8
48303: PUSH
48304: LD_INT 0
48306: ST_TO_ADDR
48307: GO 48325
// min_x := x - r ;
48309: LD_ADDR_VAR 0 8
48313: PUSH
48314: LD_VAR 0 1
48318: PUSH
48319: LD_VAR 0 3
48323: MINUS
48324: ST_TO_ADDR
// if y - r < 0 then
48325: LD_VAR 0 2
48329: PUSH
48330: LD_VAR 0 3
48334: MINUS
48335: PUSH
48336: LD_INT 0
48338: LESS
48339: IFFALSE 48351
// min_y := 0 else
48341: LD_ADDR_VAR 0 7
48345: PUSH
48346: LD_INT 0
48348: ST_TO_ADDR
48349: GO 48367
// min_y := y - r ;
48351: LD_ADDR_VAR 0 7
48355: PUSH
48356: LD_VAR 0 2
48360: PUSH
48361: LD_VAR 0 3
48365: MINUS
48366: ST_TO_ADDR
// max_x := x + r ;
48367: LD_ADDR_VAR 0 9
48371: PUSH
48372: LD_VAR 0 1
48376: PUSH
48377: LD_VAR 0 3
48381: PLUS
48382: ST_TO_ADDR
// max_y := y + r ;
48383: LD_ADDR_VAR 0 10
48387: PUSH
48388: LD_VAR 0 2
48392: PUSH
48393: LD_VAR 0 3
48397: PLUS
48398: ST_TO_ADDR
// for _x = min_x to max_x do
48399: LD_ADDR_VAR 0 5
48403: PUSH
48404: DOUBLE
48405: LD_VAR 0 8
48409: DEC
48410: ST_TO_ADDR
48411: LD_VAR 0 9
48415: PUSH
48416: FOR_TO
48417: IFFALSE 48518
// for _y = min_y to max_y do
48419: LD_ADDR_VAR 0 6
48423: PUSH
48424: DOUBLE
48425: LD_VAR 0 7
48429: DEC
48430: ST_TO_ADDR
48431: LD_VAR 0 10
48435: PUSH
48436: FOR_TO
48437: IFFALSE 48514
// begin if not ValidHex ( _x , _y ) then
48439: LD_VAR 0 5
48443: PPUSH
48444: LD_VAR 0 6
48448: PPUSH
48449: CALL_OW 488
48453: NOT
48454: IFFALSE 48458
// continue ;
48456: GO 48436
// if GetResourceTypeXY ( _x , _y ) then
48458: LD_VAR 0 5
48462: PPUSH
48463: LD_VAR 0 6
48467: PPUSH
48468: CALL_OW 283
48472: IFFALSE 48512
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
48474: LD_ADDR_VAR 0 4
48478: PUSH
48479: LD_VAR 0 4
48483: PPUSH
48484: LD_VAR 0 4
48488: PUSH
48489: LD_INT 1
48491: PLUS
48492: PPUSH
48493: LD_VAR 0 5
48497: PUSH
48498: LD_VAR 0 6
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PPUSH
48507: CALL_OW 1
48511: ST_TO_ADDR
// end ;
48512: GO 48436
48514: POP
48515: POP
48516: GO 48416
48518: POP
48519: POP
// end ;
48520: LD_VAR 0 4
48524: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
48525: LD_INT 0
48527: PPUSH
48528: PPUSH
48529: PPUSH
48530: PPUSH
48531: PPUSH
48532: PPUSH
48533: PPUSH
48534: PPUSH
// if not units then
48535: LD_VAR 0 1
48539: NOT
48540: IFFALSE 48544
// exit ;
48542: GO 49068
// result := UnitFilter ( units , [ f_ok ] ) ;
48544: LD_ADDR_VAR 0 3
48548: PUSH
48549: LD_VAR 0 1
48553: PPUSH
48554: LD_INT 50
48556: PUSH
48557: EMPTY
48558: LIST
48559: PPUSH
48560: CALL_OW 72
48564: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
48565: LD_ADDR_VAR 0 8
48569: PUSH
48570: LD_VAR 0 1
48574: PUSH
48575: LD_INT 1
48577: ARRAY
48578: PPUSH
48579: CALL_OW 255
48583: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
48584: LD_ADDR_VAR 0 10
48588: PUSH
48589: LD_INT 29
48591: PUSH
48592: LD_INT 91
48594: PUSH
48595: LD_INT 49
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: LIST
48602: ST_TO_ADDR
// if not result then
48603: LD_VAR 0 3
48607: NOT
48608: IFFALSE 48612
// exit ;
48610: GO 49068
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
48612: LD_ADDR_VAR 0 5
48616: PUSH
48617: LD_INT 81
48619: PUSH
48620: LD_VAR 0 8
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PPUSH
48629: CALL_OW 69
48633: ST_TO_ADDR
// for i in result do
48634: LD_ADDR_VAR 0 4
48638: PUSH
48639: LD_VAR 0 3
48643: PUSH
48644: FOR_IN
48645: IFFALSE 49066
// begin tag := GetTag ( i ) + 1 ;
48647: LD_ADDR_VAR 0 9
48651: PUSH
48652: LD_VAR 0 4
48656: PPUSH
48657: CALL_OW 110
48661: PUSH
48662: LD_INT 1
48664: PLUS
48665: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
48666: LD_ADDR_VAR 0 7
48670: PUSH
48671: LD_VAR 0 4
48675: PPUSH
48676: CALL_OW 250
48680: PPUSH
48681: LD_VAR 0 4
48685: PPUSH
48686: CALL_OW 251
48690: PPUSH
48691: LD_INT 6
48693: PPUSH
48694: CALL 48267 0 3
48698: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
48699: LD_VAR 0 4
48703: PPUSH
48704: CALL_OW 247
48708: PUSH
48709: LD_INT 2
48711: EQUAL
48712: PUSH
48713: LD_VAR 0 7
48717: AND
48718: PUSH
48719: LD_VAR 0 4
48723: PPUSH
48724: CALL_OW 264
48728: PUSH
48729: LD_VAR 0 10
48733: IN
48734: NOT
48735: AND
48736: IFFALSE 48775
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
48738: LD_VAR 0 4
48742: PPUSH
48743: LD_VAR 0 7
48747: PUSH
48748: LD_INT 1
48750: ARRAY
48751: PUSH
48752: LD_INT 1
48754: ARRAY
48755: PPUSH
48756: LD_VAR 0 7
48760: PUSH
48761: LD_INT 1
48763: ARRAY
48764: PUSH
48765: LD_INT 2
48767: ARRAY
48768: PPUSH
48769: CALL_OW 116
48773: GO 49064
// if path > tag then
48775: LD_VAR 0 2
48779: PUSH
48780: LD_VAR 0 9
48784: GREATER
48785: IFFALSE 48993
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
48787: LD_ADDR_VAR 0 6
48791: PUSH
48792: LD_VAR 0 5
48796: PPUSH
48797: LD_INT 91
48799: PUSH
48800: LD_VAR 0 4
48804: PUSH
48805: LD_INT 8
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: LIST
48812: PPUSH
48813: CALL_OW 72
48817: ST_TO_ADDR
// if nearEnemy then
48818: LD_VAR 0 6
48822: IFFALSE 48891
// begin if GetWeapon ( i ) = ru_time_lapser then
48824: LD_VAR 0 4
48828: PPUSH
48829: CALL_OW 264
48833: PUSH
48834: LD_INT 49
48836: EQUAL
48837: IFFALSE 48865
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
48839: LD_VAR 0 4
48843: PPUSH
48844: LD_VAR 0 6
48848: PPUSH
48849: LD_VAR 0 4
48853: PPUSH
48854: CALL_OW 74
48858: PPUSH
48859: CALL_OW 112
48863: GO 48889
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
48865: LD_VAR 0 4
48869: PPUSH
48870: LD_VAR 0 6
48874: PPUSH
48875: LD_VAR 0 4
48879: PPUSH
48880: CALL_OW 74
48884: PPUSH
48885: CALL_OW 115
// end else
48889: GO 48991
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
48891: LD_VAR 0 4
48895: PPUSH
48896: LD_VAR 0 2
48900: PUSH
48901: LD_VAR 0 9
48905: ARRAY
48906: PUSH
48907: LD_INT 1
48909: ARRAY
48910: PPUSH
48911: LD_VAR 0 2
48915: PUSH
48916: LD_VAR 0 9
48920: ARRAY
48921: PUSH
48922: LD_INT 2
48924: ARRAY
48925: PPUSH
48926: CALL_OW 297
48930: PUSH
48931: LD_INT 6
48933: GREATER
48934: IFFALSE 48977
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
48936: LD_VAR 0 4
48940: PPUSH
48941: LD_VAR 0 2
48945: PUSH
48946: LD_VAR 0 9
48950: ARRAY
48951: PUSH
48952: LD_INT 1
48954: ARRAY
48955: PPUSH
48956: LD_VAR 0 2
48960: PUSH
48961: LD_VAR 0 9
48965: ARRAY
48966: PUSH
48967: LD_INT 2
48969: ARRAY
48970: PPUSH
48971: CALL_OW 114
48975: GO 48991
// SetTag ( i , tag ) ;
48977: LD_VAR 0 4
48981: PPUSH
48982: LD_VAR 0 9
48986: PPUSH
48987: CALL_OW 109
// end else
48991: GO 49064
// if enemy then
48993: LD_VAR 0 5
48997: IFFALSE 49064
// begin if GetWeapon ( i ) = ru_time_lapser then
48999: LD_VAR 0 4
49003: PPUSH
49004: CALL_OW 264
49008: PUSH
49009: LD_INT 49
49011: EQUAL
49012: IFFALSE 49040
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49014: LD_VAR 0 4
49018: PPUSH
49019: LD_VAR 0 5
49023: PPUSH
49024: LD_VAR 0 4
49028: PPUSH
49029: CALL_OW 74
49033: PPUSH
49034: CALL_OW 112
49038: GO 49064
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49040: LD_VAR 0 4
49044: PPUSH
49045: LD_VAR 0 5
49049: PPUSH
49050: LD_VAR 0 4
49054: PPUSH
49055: CALL_OW 74
49059: PPUSH
49060: CALL_OW 115
// end ; end ;
49064: GO 48644
49066: POP
49067: POP
// end ;
49068: LD_VAR 0 3
49072: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49073: LD_INT 0
49075: PPUSH
49076: PPUSH
49077: PPUSH
// if not unit or IsInUnit ( unit ) then
49078: LD_VAR 0 1
49082: NOT
49083: PUSH
49084: LD_VAR 0 1
49088: PPUSH
49089: CALL_OW 310
49093: OR
49094: IFFALSE 49098
// exit ;
49096: GO 49189
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49098: LD_ADDR_VAR 0 4
49102: PUSH
49103: LD_VAR 0 1
49107: PPUSH
49108: CALL_OW 250
49112: PPUSH
49113: LD_VAR 0 2
49117: PPUSH
49118: LD_INT 1
49120: PPUSH
49121: CALL_OW 272
49125: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49126: LD_ADDR_VAR 0 5
49130: PUSH
49131: LD_VAR 0 1
49135: PPUSH
49136: CALL_OW 251
49140: PPUSH
49141: LD_VAR 0 2
49145: PPUSH
49146: LD_INT 1
49148: PPUSH
49149: CALL_OW 273
49153: ST_TO_ADDR
// if ValidHex ( x , y ) then
49154: LD_VAR 0 4
49158: PPUSH
49159: LD_VAR 0 5
49163: PPUSH
49164: CALL_OW 488
49168: IFFALSE 49189
// ComTurnXY ( unit , x , y ) ;
49170: LD_VAR 0 1
49174: PPUSH
49175: LD_VAR 0 4
49179: PPUSH
49180: LD_VAR 0 5
49184: PPUSH
49185: CALL_OW 118
// end ;
49189: LD_VAR 0 3
49193: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49194: LD_INT 0
49196: PPUSH
49197: PPUSH
// result := false ;
49198: LD_ADDR_VAR 0 3
49202: PUSH
49203: LD_INT 0
49205: ST_TO_ADDR
// if not units then
49206: LD_VAR 0 2
49210: NOT
49211: IFFALSE 49215
// exit ;
49213: GO 49260
// for i in units do
49215: LD_ADDR_VAR 0 4
49219: PUSH
49220: LD_VAR 0 2
49224: PUSH
49225: FOR_IN
49226: IFFALSE 49258
// if See ( side , i ) then
49228: LD_VAR 0 1
49232: PPUSH
49233: LD_VAR 0 4
49237: PPUSH
49238: CALL_OW 292
49242: IFFALSE 49256
// begin result := true ;
49244: LD_ADDR_VAR 0 3
49248: PUSH
49249: LD_INT 1
49251: ST_TO_ADDR
// exit ;
49252: POP
49253: POP
49254: GO 49260
// end ;
49256: GO 49225
49258: POP
49259: POP
// end ;
49260: LD_VAR 0 3
49264: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49265: LD_INT 0
49267: PPUSH
49268: PPUSH
49269: PPUSH
49270: PPUSH
// if not unit or not points then
49271: LD_VAR 0 1
49275: NOT
49276: PUSH
49277: LD_VAR 0 2
49281: NOT
49282: OR
49283: IFFALSE 49287
// exit ;
49285: GO 49377
// dist := 99999 ;
49287: LD_ADDR_VAR 0 5
49291: PUSH
49292: LD_INT 99999
49294: ST_TO_ADDR
// for i in points do
49295: LD_ADDR_VAR 0 4
49299: PUSH
49300: LD_VAR 0 2
49304: PUSH
49305: FOR_IN
49306: IFFALSE 49375
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49308: LD_ADDR_VAR 0 6
49312: PUSH
49313: LD_VAR 0 1
49317: PPUSH
49318: LD_VAR 0 4
49322: PUSH
49323: LD_INT 1
49325: ARRAY
49326: PPUSH
49327: LD_VAR 0 4
49331: PUSH
49332: LD_INT 2
49334: ARRAY
49335: PPUSH
49336: CALL_OW 297
49340: ST_TO_ADDR
// if tmpDist < dist then
49341: LD_VAR 0 6
49345: PUSH
49346: LD_VAR 0 5
49350: LESS
49351: IFFALSE 49373
// begin result := i ;
49353: LD_ADDR_VAR 0 3
49357: PUSH
49358: LD_VAR 0 4
49362: ST_TO_ADDR
// dist := tmpDist ;
49363: LD_ADDR_VAR 0 5
49367: PUSH
49368: LD_VAR 0 6
49372: ST_TO_ADDR
// end ; end ;
49373: GO 49305
49375: POP
49376: POP
// end ;
49377: LD_VAR 0 3
49381: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
49382: LD_INT 0
49384: PPUSH
// uc_side := side ;
49385: LD_ADDR_OWVAR 20
49389: PUSH
49390: LD_VAR 0 1
49394: ST_TO_ADDR
// uc_nation := 3 ;
49395: LD_ADDR_OWVAR 21
49399: PUSH
49400: LD_INT 3
49402: ST_TO_ADDR
// vc_chassis := 25 ;
49403: LD_ADDR_OWVAR 37
49407: PUSH
49408: LD_INT 25
49410: ST_TO_ADDR
// vc_engine := engine_siberite ;
49411: LD_ADDR_OWVAR 39
49415: PUSH
49416: LD_INT 3
49418: ST_TO_ADDR
// vc_control := control_computer ;
49419: LD_ADDR_OWVAR 38
49423: PUSH
49424: LD_INT 3
49426: ST_TO_ADDR
// vc_weapon := 59 ;
49427: LD_ADDR_OWVAR 40
49431: PUSH
49432: LD_INT 59
49434: ST_TO_ADDR
// result := CreateVehicle ;
49435: LD_ADDR_VAR 0 5
49439: PUSH
49440: CALL_OW 45
49444: ST_TO_ADDR
// SetDir ( result , d ) ;
49445: LD_VAR 0 5
49449: PPUSH
49450: LD_VAR 0 4
49454: PPUSH
49455: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
49459: LD_VAR 0 5
49463: PPUSH
49464: LD_VAR 0 2
49468: PPUSH
49469: LD_VAR 0 3
49473: PPUSH
49474: LD_INT 0
49476: PPUSH
49477: CALL_OW 48
// end ;
49481: LD_VAR 0 5
49485: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
49486: LD_INT 0
49488: PPUSH
49489: PPUSH
49490: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
49491: LD_ADDR_VAR 0 2
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
49514: LD_VAR 0 1
49518: NOT
49519: PUSH
49520: LD_VAR 0 1
49524: PPUSH
49525: CALL_OW 264
49529: PUSH
49530: LD_INT 12
49532: PUSH
49533: LD_INT 51
49535: PUSH
49536: LD_INT 32
49538: PUSH
49539: LD_INT 89
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: IN
49548: NOT
49549: OR
49550: IFFALSE 49554
// exit ;
49552: GO 49652
// for i := 1 to 3 do
49554: LD_ADDR_VAR 0 3
49558: PUSH
49559: DOUBLE
49560: LD_INT 1
49562: DEC
49563: ST_TO_ADDR
49564: LD_INT 3
49566: PUSH
49567: FOR_TO
49568: IFFALSE 49650
// begin tmp := GetCargo ( cargo , i ) ;
49570: LD_ADDR_VAR 0 4
49574: PUSH
49575: LD_VAR 0 1
49579: PPUSH
49580: LD_VAR 0 3
49584: PPUSH
49585: CALL_OW 289
49589: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
49590: LD_ADDR_VAR 0 2
49594: PUSH
49595: LD_VAR 0 2
49599: PPUSH
49600: LD_VAR 0 3
49604: PPUSH
49605: LD_VAR 0 4
49609: PPUSH
49610: CALL_OW 1
49614: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
49615: LD_ADDR_VAR 0 2
49619: PUSH
49620: LD_VAR 0 2
49624: PPUSH
49625: LD_INT 4
49627: PPUSH
49628: LD_VAR 0 2
49632: PUSH
49633: LD_INT 4
49635: ARRAY
49636: PUSH
49637: LD_VAR 0 4
49641: PLUS
49642: PPUSH
49643: CALL_OW 1
49647: ST_TO_ADDR
// end ;
49648: GO 49567
49650: POP
49651: POP
// end ;
49652: LD_VAR 0 2
49656: RET
// export function Length ( array ) ; begin
49657: LD_INT 0
49659: PPUSH
// result := array + 0 ;
49660: LD_ADDR_VAR 0 2
49664: PUSH
49665: LD_VAR 0 1
49669: PUSH
49670: LD_INT 0
49672: PLUS
49673: ST_TO_ADDR
// end ;
49674: LD_VAR 0 2
49678: RET
// export function PrepareArray ( array ) ; begin
49679: LD_INT 0
49681: PPUSH
// result := array diff 0 ;
49682: LD_ADDR_VAR 0 2
49686: PUSH
49687: LD_VAR 0 1
49691: PUSH
49692: LD_INT 0
49694: DIFF
49695: ST_TO_ADDR
// if not result [ 1 ] then
49696: LD_VAR 0 2
49700: PUSH
49701: LD_INT 1
49703: ARRAY
49704: NOT
49705: IFFALSE 49725
// result := Delete ( result , 1 ) ;
49707: LD_ADDR_VAR 0 2
49711: PUSH
49712: LD_VAR 0 2
49716: PPUSH
49717: LD_INT 1
49719: PPUSH
49720: CALL_OW 3
49724: ST_TO_ADDR
// end ;
49725: LD_VAR 0 2
49729: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
49730: LD_INT 0
49732: PPUSH
49733: PPUSH
49734: PPUSH
49735: PPUSH
// sibRocketRange := 25 ;
49736: LD_ADDR_VAR 0 6
49740: PUSH
49741: LD_INT 25
49743: ST_TO_ADDR
// result := false ;
49744: LD_ADDR_VAR 0 4
49748: PUSH
49749: LD_INT 0
49751: ST_TO_ADDR
// for i := 0 to 5 do
49752: LD_ADDR_VAR 0 5
49756: PUSH
49757: DOUBLE
49758: LD_INT 0
49760: DEC
49761: ST_TO_ADDR
49762: LD_INT 5
49764: PUSH
49765: FOR_TO
49766: IFFALSE 49833
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
49768: LD_VAR 0 1
49772: PPUSH
49773: LD_VAR 0 5
49777: PPUSH
49778: LD_VAR 0 6
49782: PPUSH
49783: CALL_OW 272
49787: PPUSH
49788: LD_VAR 0 2
49792: PPUSH
49793: LD_VAR 0 5
49797: PPUSH
49798: LD_VAR 0 6
49802: PPUSH
49803: CALL_OW 273
49807: PPUSH
49808: LD_VAR 0 3
49812: PPUSH
49813: CALL_OW 309
49817: IFFALSE 49831
// begin result := true ;
49819: LD_ADDR_VAR 0 4
49823: PUSH
49824: LD_INT 1
49826: ST_TO_ADDR
// exit ;
49827: POP
49828: POP
49829: GO 49835
// end ;
49831: GO 49765
49833: POP
49834: POP
// end ;
49835: LD_VAR 0 4
49839: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
49840: LD_INT 0
49842: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
49843: LD_VAR 0 1
49847: PPUSH
49848: LD_VAR 0 2
49852: PPUSH
49853: LD_INT 0
49855: PPUSH
49856: LD_INT 0
49858: PPUSH
49859: LD_INT 1
49861: PPUSH
49862: LD_INT 0
49864: PPUSH
49865: CALL_OW 587
// end ;
49869: LD_VAR 0 3
49873: RET
// export function CenterOnNow ( unit ) ; begin
49874: LD_INT 0
49876: PPUSH
// result := IsInUnit ( unit ) ;
49877: LD_ADDR_VAR 0 2
49881: PUSH
49882: LD_VAR 0 1
49886: PPUSH
49887: CALL_OW 310
49891: ST_TO_ADDR
// if not result then
49892: LD_VAR 0 2
49896: NOT
49897: IFFALSE 49909
// result := unit ;
49899: LD_ADDR_VAR 0 2
49903: PUSH
49904: LD_VAR 0 1
49908: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
49909: LD_VAR 0 1
49913: PPUSH
49914: CALL_OW 87
// end ;
49918: LD_VAR 0 2
49922: RET
// export function ComMoveHex ( unit , hex ) ; begin
49923: LD_INT 0
49925: PPUSH
// if not hex then
49926: LD_VAR 0 2
49930: NOT
49931: IFFALSE 49935
// exit ;
49933: GO 49988
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
49935: LD_VAR 0 2
49939: PUSH
49940: LD_INT 1
49942: ARRAY
49943: PPUSH
49944: LD_VAR 0 2
49948: PUSH
49949: LD_INT 2
49951: ARRAY
49952: PPUSH
49953: CALL_OW 428
49957: IFFALSE 49961
// exit ;
49959: GO 49988
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
49961: LD_VAR 0 1
49965: PPUSH
49966: LD_VAR 0 2
49970: PUSH
49971: LD_INT 1
49973: ARRAY
49974: PPUSH
49975: LD_VAR 0 2
49979: PUSH
49980: LD_INT 2
49982: ARRAY
49983: PPUSH
49984: CALL_OW 111
// end ; end_of_file
49988: LD_VAR 0 3
49992: RET
// export globalGameSaveCounter ; every 0 0$1 do
49993: GO 49995
49995: DISABLE
// begin enable ;
49996: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
49997: LD_STRING updateTimer(
49999: PUSH
50000: LD_OWVAR 1
50004: STR
50005: PUSH
50006: LD_STRING );
50008: STR
50009: PPUSH
50010: CALL_OW 559
// end ;
50014: END
// every 0 0$1 do
50015: GO 50017
50017: DISABLE
// begin globalGameSaveCounter := 0 ;
50018: LD_ADDR_EXP 28
50022: PUSH
50023: LD_INT 0
50025: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
50026: LD_STRING setGameSaveCounter(0)
50028: PPUSH
50029: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
50033: LD_STRING initStreamRollete();
50035: PPUSH
50036: CALL_OW 559
// InitStreamMode ;
50040: CALL 51366 0 0
// DefineStreamItems ( false ) ;
50044: LD_INT 0
50046: PPUSH
50047: CALL 51830 0 1
// end ;
50051: END
// export function SOS_MapStart ( ) ; begin
50052: LD_INT 0
50054: PPUSH
// if streamModeActive then
50055: LD_EXP 29
50059: IFFALSE 50068
// DefineStreamItems ( true ) ;
50061: LD_INT 1
50063: PPUSH
50064: CALL 51830 0 1
// UpdateLuaVariables ( ) ;
50068: CALL 50085 0 0
// UpdateFactoryWaypoints ( ) ;
50072: CALL 64691 0 0
// UpdateWarehouseGatheringPoints ( ) ;
50076: CALL 64948 0 0
// end ;
50080: LD_VAR 0 1
50084: RET
// function UpdateLuaVariables ( ) ; begin
50085: LD_INT 0
50087: PPUSH
// if globalGameSaveCounter then
50088: LD_EXP 28
50092: IFFALSE 50126
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
50094: LD_ADDR_EXP 28
50098: PUSH
50099: LD_EXP 28
50103: PPUSH
50104: CALL 47282 0 1
50108: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50109: LD_STRING setGameSaveCounter(
50111: PUSH
50112: LD_EXP 28
50116: STR
50117: PUSH
50118: LD_STRING )
50120: STR
50121: PPUSH
50122: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
50126: LD_STRING setGameDifficulty(
50128: PUSH
50129: LD_OWVAR 67
50133: STR
50134: PUSH
50135: LD_STRING )
50137: STR
50138: PPUSH
50139: CALL_OW 559
// end ;
50143: LD_VAR 0 1
50147: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
50148: LD_INT 0
50150: PPUSH
// if p2 = stream_mode then
50151: LD_VAR 0 2
50155: PUSH
50156: LD_INT 100
50158: EQUAL
50159: IFFALSE 51162
// begin if not StreamModeActive then
50161: LD_EXP 29
50165: NOT
50166: IFFALSE 50176
// StreamModeActive := true ;
50168: LD_ADDR_EXP 29
50172: PUSH
50173: LD_INT 1
50175: ST_TO_ADDR
// if p3 = 0 then
50176: LD_VAR 0 3
50180: PUSH
50181: LD_INT 0
50183: EQUAL
50184: IFFALSE 50190
// InitStreamMode ;
50186: CALL 51366 0 0
// if p3 = 1 then
50190: LD_VAR 0 3
50194: PUSH
50195: LD_INT 1
50197: EQUAL
50198: IFFALSE 50208
// sRocket := true ;
50200: LD_ADDR_EXP 34
50204: PUSH
50205: LD_INT 1
50207: ST_TO_ADDR
// if p3 = 2 then
50208: LD_VAR 0 3
50212: PUSH
50213: LD_INT 2
50215: EQUAL
50216: IFFALSE 50226
// sSpeed := true ;
50218: LD_ADDR_EXP 33
50222: PUSH
50223: LD_INT 1
50225: ST_TO_ADDR
// if p3 = 3 then
50226: LD_VAR 0 3
50230: PUSH
50231: LD_INT 3
50233: EQUAL
50234: IFFALSE 50244
// sEngine := true ;
50236: LD_ADDR_EXP 35
50240: PUSH
50241: LD_INT 1
50243: ST_TO_ADDR
// if p3 = 4 then
50244: LD_VAR 0 3
50248: PUSH
50249: LD_INT 4
50251: EQUAL
50252: IFFALSE 50262
// sSpec := true ;
50254: LD_ADDR_EXP 32
50258: PUSH
50259: LD_INT 1
50261: ST_TO_ADDR
// if p3 = 5 then
50262: LD_VAR 0 3
50266: PUSH
50267: LD_INT 5
50269: EQUAL
50270: IFFALSE 50280
// sLevel := true ;
50272: LD_ADDR_EXP 36
50276: PUSH
50277: LD_INT 1
50279: ST_TO_ADDR
// if p3 = 6 then
50280: LD_VAR 0 3
50284: PUSH
50285: LD_INT 6
50287: EQUAL
50288: IFFALSE 50298
// sArmoury := true ;
50290: LD_ADDR_EXP 37
50294: PUSH
50295: LD_INT 1
50297: ST_TO_ADDR
// if p3 = 7 then
50298: LD_VAR 0 3
50302: PUSH
50303: LD_INT 7
50305: EQUAL
50306: IFFALSE 50316
// sRadar := true ;
50308: LD_ADDR_EXP 38
50312: PUSH
50313: LD_INT 1
50315: ST_TO_ADDR
// if p3 = 8 then
50316: LD_VAR 0 3
50320: PUSH
50321: LD_INT 8
50323: EQUAL
50324: IFFALSE 50334
// sBunker := true ;
50326: LD_ADDR_EXP 39
50330: PUSH
50331: LD_INT 1
50333: ST_TO_ADDR
// if p3 = 9 then
50334: LD_VAR 0 3
50338: PUSH
50339: LD_INT 9
50341: EQUAL
50342: IFFALSE 50352
// sHack := true ;
50344: LD_ADDR_EXP 40
50348: PUSH
50349: LD_INT 1
50351: ST_TO_ADDR
// if p3 = 10 then
50352: LD_VAR 0 3
50356: PUSH
50357: LD_INT 10
50359: EQUAL
50360: IFFALSE 50370
// sFire := true ;
50362: LD_ADDR_EXP 41
50366: PUSH
50367: LD_INT 1
50369: ST_TO_ADDR
// if p3 = 11 then
50370: LD_VAR 0 3
50374: PUSH
50375: LD_INT 11
50377: EQUAL
50378: IFFALSE 50388
// sRefresh := true ;
50380: LD_ADDR_EXP 42
50384: PUSH
50385: LD_INT 1
50387: ST_TO_ADDR
// if p3 = 12 then
50388: LD_VAR 0 3
50392: PUSH
50393: LD_INT 12
50395: EQUAL
50396: IFFALSE 50406
// sExp := true ;
50398: LD_ADDR_EXP 43
50402: PUSH
50403: LD_INT 1
50405: ST_TO_ADDR
// if p3 = 13 then
50406: LD_VAR 0 3
50410: PUSH
50411: LD_INT 13
50413: EQUAL
50414: IFFALSE 50424
// sDepot := true ;
50416: LD_ADDR_EXP 44
50420: PUSH
50421: LD_INT 1
50423: ST_TO_ADDR
// if p3 = 14 then
50424: LD_VAR 0 3
50428: PUSH
50429: LD_INT 14
50431: EQUAL
50432: IFFALSE 50442
// sFlag := true ;
50434: LD_ADDR_EXP 45
50438: PUSH
50439: LD_INT 1
50441: ST_TO_ADDR
// if p3 = 15 then
50442: LD_VAR 0 3
50446: PUSH
50447: LD_INT 15
50449: EQUAL
50450: IFFALSE 50460
// sKamikadze := true ;
50452: LD_ADDR_EXP 53
50456: PUSH
50457: LD_INT 1
50459: ST_TO_ADDR
// if p3 = 16 then
50460: LD_VAR 0 3
50464: PUSH
50465: LD_INT 16
50467: EQUAL
50468: IFFALSE 50478
// sTroll := true ;
50470: LD_ADDR_EXP 54
50474: PUSH
50475: LD_INT 1
50477: ST_TO_ADDR
// if p3 = 17 then
50478: LD_VAR 0 3
50482: PUSH
50483: LD_INT 17
50485: EQUAL
50486: IFFALSE 50496
// sSlow := true ;
50488: LD_ADDR_EXP 55
50492: PUSH
50493: LD_INT 1
50495: ST_TO_ADDR
// if p3 = 18 then
50496: LD_VAR 0 3
50500: PUSH
50501: LD_INT 18
50503: EQUAL
50504: IFFALSE 50514
// sLack := true ;
50506: LD_ADDR_EXP 56
50510: PUSH
50511: LD_INT 1
50513: ST_TO_ADDR
// if p3 = 19 then
50514: LD_VAR 0 3
50518: PUSH
50519: LD_INT 19
50521: EQUAL
50522: IFFALSE 50532
// sTank := true ;
50524: LD_ADDR_EXP 58
50528: PUSH
50529: LD_INT 1
50531: ST_TO_ADDR
// if p3 = 20 then
50532: LD_VAR 0 3
50536: PUSH
50537: LD_INT 20
50539: EQUAL
50540: IFFALSE 50550
// sRemote := true ;
50542: LD_ADDR_EXP 59
50546: PUSH
50547: LD_INT 1
50549: ST_TO_ADDR
// if p3 = 21 then
50550: LD_VAR 0 3
50554: PUSH
50555: LD_INT 21
50557: EQUAL
50558: IFFALSE 50568
// sPowell := true ;
50560: LD_ADDR_EXP 60
50564: PUSH
50565: LD_INT 1
50567: ST_TO_ADDR
// if p3 = 22 then
50568: LD_VAR 0 3
50572: PUSH
50573: LD_INT 22
50575: EQUAL
50576: IFFALSE 50586
// sTeleport := true ;
50578: LD_ADDR_EXP 63
50582: PUSH
50583: LD_INT 1
50585: ST_TO_ADDR
// if p3 = 23 then
50586: LD_VAR 0 3
50590: PUSH
50591: LD_INT 23
50593: EQUAL
50594: IFFALSE 50604
// sOilTower := true ;
50596: LD_ADDR_EXP 65
50600: PUSH
50601: LD_INT 1
50603: ST_TO_ADDR
// if p3 = 24 then
50604: LD_VAR 0 3
50608: PUSH
50609: LD_INT 24
50611: EQUAL
50612: IFFALSE 50622
// sShovel := true ;
50614: LD_ADDR_EXP 66
50618: PUSH
50619: LD_INT 1
50621: ST_TO_ADDR
// if p3 = 25 then
50622: LD_VAR 0 3
50626: PUSH
50627: LD_INT 25
50629: EQUAL
50630: IFFALSE 50640
// sSheik := true ;
50632: LD_ADDR_EXP 67
50636: PUSH
50637: LD_INT 1
50639: ST_TO_ADDR
// if p3 = 26 then
50640: LD_VAR 0 3
50644: PUSH
50645: LD_INT 26
50647: EQUAL
50648: IFFALSE 50658
// sEarthquake := true ;
50650: LD_ADDR_EXP 69
50654: PUSH
50655: LD_INT 1
50657: ST_TO_ADDR
// if p3 = 27 then
50658: LD_VAR 0 3
50662: PUSH
50663: LD_INT 27
50665: EQUAL
50666: IFFALSE 50676
// sAI := true ;
50668: LD_ADDR_EXP 70
50672: PUSH
50673: LD_INT 1
50675: ST_TO_ADDR
// if p3 = 28 then
50676: LD_VAR 0 3
50680: PUSH
50681: LD_INT 28
50683: EQUAL
50684: IFFALSE 50694
// sCargo := true ;
50686: LD_ADDR_EXP 73
50690: PUSH
50691: LD_INT 1
50693: ST_TO_ADDR
// if p3 = 29 then
50694: LD_VAR 0 3
50698: PUSH
50699: LD_INT 29
50701: EQUAL
50702: IFFALSE 50712
// sDLaser := true ;
50704: LD_ADDR_EXP 74
50708: PUSH
50709: LD_INT 1
50711: ST_TO_ADDR
// if p3 = 30 then
50712: LD_VAR 0 3
50716: PUSH
50717: LD_INT 30
50719: EQUAL
50720: IFFALSE 50730
// sExchange := true ;
50722: LD_ADDR_EXP 75
50726: PUSH
50727: LD_INT 1
50729: ST_TO_ADDR
// if p3 = 31 then
50730: LD_VAR 0 3
50734: PUSH
50735: LD_INT 31
50737: EQUAL
50738: IFFALSE 50748
// sFac := true ;
50740: LD_ADDR_EXP 76
50744: PUSH
50745: LD_INT 1
50747: ST_TO_ADDR
// if p3 = 32 then
50748: LD_VAR 0 3
50752: PUSH
50753: LD_INT 32
50755: EQUAL
50756: IFFALSE 50766
// sPower := true ;
50758: LD_ADDR_EXP 77
50762: PUSH
50763: LD_INT 1
50765: ST_TO_ADDR
// if p3 = 33 then
50766: LD_VAR 0 3
50770: PUSH
50771: LD_INT 33
50773: EQUAL
50774: IFFALSE 50784
// sRandom := true ;
50776: LD_ADDR_EXP 78
50780: PUSH
50781: LD_INT 1
50783: ST_TO_ADDR
// if p3 = 34 then
50784: LD_VAR 0 3
50788: PUSH
50789: LD_INT 34
50791: EQUAL
50792: IFFALSE 50802
// sShield := true ;
50794: LD_ADDR_EXP 79
50798: PUSH
50799: LD_INT 1
50801: ST_TO_ADDR
// if p3 = 35 then
50802: LD_VAR 0 3
50806: PUSH
50807: LD_INT 35
50809: EQUAL
50810: IFFALSE 50820
// sTime := true ;
50812: LD_ADDR_EXP 80
50816: PUSH
50817: LD_INT 1
50819: ST_TO_ADDR
// if p3 = 36 then
50820: LD_VAR 0 3
50824: PUSH
50825: LD_INT 36
50827: EQUAL
50828: IFFALSE 50838
// sTools := true ;
50830: LD_ADDR_EXP 81
50834: PUSH
50835: LD_INT 1
50837: ST_TO_ADDR
// if p3 = 101 then
50838: LD_VAR 0 3
50842: PUSH
50843: LD_INT 101
50845: EQUAL
50846: IFFALSE 50856
// sSold := true ;
50848: LD_ADDR_EXP 46
50852: PUSH
50853: LD_INT 1
50855: ST_TO_ADDR
// if p3 = 102 then
50856: LD_VAR 0 3
50860: PUSH
50861: LD_INT 102
50863: EQUAL
50864: IFFALSE 50874
// sDiff := true ;
50866: LD_ADDR_EXP 47
50870: PUSH
50871: LD_INT 1
50873: ST_TO_ADDR
// if p3 = 103 then
50874: LD_VAR 0 3
50878: PUSH
50879: LD_INT 103
50881: EQUAL
50882: IFFALSE 50892
// sFog := true ;
50884: LD_ADDR_EXP 50
50888: PUSH
50889: LD_INT 1
50891: ST_TO_ADDR
// if p3 = 104 then
50892: LD_VAR 0 3
50896: PUSH
50897: LD_INT 104
50899: EQUAL
50900: IFFALSE 50910
// sReset := true ;
50902: LD_ADDR_EXP 51
50906: PUSH
50907: LD_INT 1
50909: ST_TO_ADDR
// if p3 = 105 then
50910: LD_VAR 0 3
50914: PUSH
50915: LD_INT 105
50917: EQUAL
50918: IFFALSE 50928
// sSun := true ;
50920: LD_ADDR_EXP 52
50924: PUSH
50925: LD_INT 1
50927: ST_TO_ADDR
// if p3 = 106 then
50928: LD_VAR 0 3
50932: PUSH
50933: LD_INT 106
50935: EQUAL
50936: IFFALSE 50946
// sTiger := true ;
50938: LD_ADDR_EXP 48
50942: PUSH
50943: LD_INT 1
50945: ST_TO_ADDR
// if p3 = 107 then
50946: LD_VAR 0 3
50950: PUSH
50951: LD_INT 107
50953: EQUAL
50954: IFFALSE 50964
// sBomb := true ;
50956: LD_ADDR_EXP 49
50960: PUSH
50961: LD_INT 1
50963: ST_TO_ADDR
// if p3 = 108 then
50964: LD_VAR 0 3
50968: PUSH
50969: LD_INT 108
50971: EQUAL
50972: IFFALSE 50982
// sWound := true ;
50974: LD_ADDR_EXP 57
50978: PUSH
50979: LD_INT 1
50981: ST_TO_ADDR
// if p3 = 109 then
50982: LD_VAR 0 3
50986: PUSH
50987: LD_INT 109
50989: EQUAL
50990: IFFALSE 51000
// sBetray := true ;
50992: LD_ADDR_EXP 61
50996: PUSH
50997: LD_INT 1
50999: ST_TO_ADDR
// if p3 = 110 then
51000: LD_VAR 0 3
51004: PUSH
51005: LD_INT 110
51007: EQUAL
51008: IFFALSE 51018
// sContamin := true ;
51010: LD_ADDR_EXP 62
51014: PUSH
51015: LD_INT 1
51017: ST_TO_ADDR
// if p3 = 111 then
51018: LD_VAR 0 3
51022: PUSH
51023: LD_INT 111
51025: EQUAL
51026: IFFALSE 51036
// sOil := true ;
51028: LD_ADDR_EXP 64
51032: PUSH
51033: LD_INT 1
51035: ST_TO_ADDR
// if p3 = 112 then
51036: LD_VAR 0 3
51040: PUSH
51041: LD_INT 112
51043: EQUAL
51044: IFFALSE 51054
// sStu := true ;
51046: LD_ADDR_EXP 68
51050: PUSH
51051: LD_INT 1
51053: ST_TO_ADDR
// if p3 = 113 then
51054: LD_VAR 0 3
51058: PUSH
51059: LD_INT 113
51061: EQUAL
51062: IFFALSE 51072
// sBazooka := true ;
51064: LD_ADDR_EXP 71
51068: PUSH
51069: LD_INT 1
51071: ST_TO_ADDR
// if p3 = 114 then
51072: LD_VAR 0 3
51076: PUSH
51077: LD_INT 114
51079: EQUAL
51080: IFFALSE 51090
// sMortar := true ;
51082: LD_ADDR_EXP 72
51086: PUSH
51087: LD_INT 1
51089: ST_TO_ADDR
// if p3 = 115 then
51090: LD_VAR 0 3
51094: PUSH
51095: LD_INT 115
51097: EQUAL
51098: IFFALSE 51108
// sRanger := true ;
51100: LD_ADDR_EXP 82
51104: PUSH
51105: LD_INT 1
51107: ST_TO_ADDR
// if p3 = 116 then
51108: LD_VAR 0 3
51112: PUSH
51113: LD_INT 116
51115: EQUAL
51116: IFFALSE 51126
// sComputer := true ;
51118: LD_ADDR_EXP 83
51122: PUSH
51123: LD_INT 1
51125: ST_TO_ADDR
// if p3 = 117 then
51126: LD_VAR 0 3
51130: PUSH
51131: LD_INT 117
51133: EQUAL
51134: IFFALSE 51144
// s30 := true ;
51136: LD_ADDR_EXP 84
51140: PUSH
51141: LD_INT 1
51143: ST_TO_ADDR
// if p3 = 118 then
51144: LD_VAR 0 3
51148: PUSH
51149: LD_INT 118
51151: EQUAL
51152: IFFALSE 51162
// s60 := true ;
51154: LD_ADDR_EXP 85
51158: PUSH
51159: LD_INT 1
51161: ST_TO_ADDR
// end ; if p2 = hack_mode then
51162: LD_VAR 0 2
51166: PUSH
51167: LD_INT 101
51169: EQUAL
51170: IFFALSE 51298
// begin case p3 of 1 :
51172: LD_VAR 0 3
51176: PUSH
51177: LD_INT 1
51179: DOUBLE
51180: EQUAL
51181: IFTRUE 51185
51183: GO 51192
51185: POP
// hHackUnlimitedResources ; 2 :
51186: CALL 63437 0 0
51190: GO 51298
51192: LD_INT 2
51194: DOUBLE
51195: EQUAL
51196: IFTRUE 51200
51198: GO 51207
51200: POP
// hHackSetLevel10 ; 3 :
51201: CALL 63570 0 0
51205: GO 51298
51207: LD_INT 3
51209: DOUBLE
51210: EQUAL
51211: IFTRUE 51215
51213: GO 51222
51215: POP
// hHackSetLevel10YourUnits ; 4 :
51216: CALL 63655 0 0
51220: GO 51298
51222: LD_INT 4
51224: DOUBLE
51225: EQUAL
51226: IFTRUE 51230
51228: GO 51237
51230: POP
// hHackInvincible ; 5 :
51231: CALL 64103 0 0
51235: GO 51298
51237: LD_INT 5
51239: DOUBLE
51240: EQUAL
51241: IFTRUE 51245
51243: GO 51252
51245: POP
// hHackInvisible ; 6 :
51246: CALL 64214 0 0
51250: GO 51298
51252: LD_INT 6
51254: DOUBLE
51255: EQUAL
51256: IFTRUE 51260
51258: GO 51267
51260: POP
// hHackChangeYourSide ; 7 :
51261: CALL 64271 0 0
51265: GO 51298
51267: LD_INT 7
51269: DOUBLE
51270: EQUAL
51271: IFTRUE 51275
51273: GO 51282
51275: POP
// hHackChangeUnitSide ; 8 :
51276: CALL 64313 0 0
51280: GO 51298
51282: LD_INT 8
51284: DOUBLE
51285: EQUAL
51286: IFTRUE 51290
51288: GO 51297
51290: POP
// hHackFog ; end ;
51291: CALL 64414 0 0
51295: GO 51298
51297: POP
// end ; if p2 = game_save_mode then
51298: LD_VAR 0 2
51302: PUSH
51303: LD_INT 102
51305: EQUAL
51306: IFFALSE 51361
// begin if p3 = 1 then
51308: LD_VAR 0 3
51312: PUSH
51313: LD_INT 1
51315: EQUAL
51316: IFFALSE 51328
// globalGameSaveCounter := p4 ;
51318: LD_ADDR_EXP 28
51322: PUSH
51323: LD_VAR 0 4
51327: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
51328: LD_VAR 0 3
51332: PUSH
51333: LD_INT 2
51335: EQUAL
51336: PUSH
51337: LD_EXP 28
51341: AND
51342: IFFALSE 51361
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51344: LD_STRING setGameSaveCounter(
51346: PUSH
51347: LD_EXP 28
51351: STR
51352: PUSH
51353: LD_STRING )
51355: STR
51356: PPUSH
51357: CALL_OW 559
// end ; end ;
51361: LD_VAR 0 7
51365: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
51366: LD_INT 0
51368: PPUSH
// streamModeActive := false ;
51369: LD_ADDR_EXP 29
51373: PUSH
51374: LD_INT 0
51376: ST_TO_ADDR
// normalCounter := 36 ;
51377: LD_ADDR_EXP 30
51381: PUSH
51382: LD_INT 36
51384: ST_TO_ADDR
// hardcoreCounter := 18 ;
51385: LD_ADDR_EXP 31
51389: PUSH
51390: LD_INT 18
51392: ST_TO_ADDR
// sRocket := false ;
51393: LD_ADDR_EXP 34
51397: PUSH
51398: LD_INT 0
51400: ST_TO_ADDR
// sSpeed := false ;
51401: LD_ADDR_EXP 33
51405: PUSH
51406: LD_INT 0
51408: ST_TO_ADDR
// sEngine := false ;
51409: LD_ADDR_EXP 35
51413: PUSH
51414: LD_INT 0
51416: ST_TO_ADDR
// sSpec := false ;
51417: LD_ADDR_EXP 32
51421: PUSH
51422: LD_INT 0
51424: ST_TO_ADDR
// sLevel := false ;
51425: LD_ADDR_EXP 36
51429: PUSH
51430: LD_INT 0
51432: ST_TO_ADDR
// sArmoury := false ;
51433: LD_ADDR_EXP 37
51437: PUSH
51438: LD_INT 0
51440: ST_TO_ADDR
// sRadar := false ;
51441: LD_ADDR_EXP 38
51445: PUSH
51446: LD_INT 0
51448: ST_TO_ADDR
// sBunker := false ;
51449: LD_ADDR_EXP 39
51453: PUSH
51454: LD_INT 0
51456: ST_TO_ADDR
// sHack := false ;
51457: LD_ADDR_EXP 40
51461: PUSH
51462: LD_INT 0
51464: ST_TO_ADDR
// sFire := false ;
51465: LD_ADDR_EXP 41
51469: PUSH
51470: LD_INT 0
51472: ST_TO_ADDR
// sRefresh := false ;
51473: LD_ADDR_EXP 42
51477: PUSH
51478: LD_INT 0
51480: ST_TO_ADDR
// sExp := false ;
51481: LD_ADDR_EXP 43
51485: PUSH
51486: LD_INT 0
51488: ST_TO_ADDR
// sDepot := false ;
51489: LD_ADDR_EXP 44
51493: PUSH
51494: LD_INT 0
51496: ST_TO_ADDR
// sFlag := false ;
51497: LD_ADDR_EXP 45
51501: PUSH
51502: LD_INT 0
51504: ST_TO_ADDR
// sKamikadze := false ;
51505: LD_ADDR_EXP 53
51509: PUSH
51510: LD_INT 0
51512: ST_TO_ADDR
// sTroll := false ;
51513: LD_ADDR_EXP 54
51517: PUSH
51518: LD_INT 0
51520: ST_TO_ADDR
// sSlow := false ;
51521: LD_ADDR_EXP 55
51525: PUSH
51526: LD_INT 0
51528: ST_TO_ADDR
// sLack := false ;
51529: LD_ADDR_EXP 56
51533: PUSH
51534: LD_INT 0
51536: ST_TO_ADDR
// sTank := false ;
51537: LD_ADDR_EXP 58
51541: PUSH
51542: LD_INT 0
51544: ST_TO_ADDR
// sRemote := false ;
51545: LD_ADDR_EXP 59
51549: PUSH
51550: LD_INT 0
51552: ST_TO_ADDR
// sPowell := false ;
51553: LD_ADDR_EXP 60
51557: PUSH
51558: LD_INT 0
51560: ST_TO_ADDR
// sTeleport := false ;
51561: LD_ADDR_EXP 63
51565: PUSH
51566: LD_INT 0
51568: ST_TO_ADDR
// sOilTower := false ;
51569: LD_ADDR_EXP 65
51573: PUSH
51574: LD_INT 0
51576: ST_TO_ADDR
// sShovel := false ;
51577: LD_ADDR_EXP 66
51581: PUSH
51582: LD_INT 0
51584: ST_TO_ADDR
// sSheik := false ;
51585: LD_ADDR_EXP 67
51589: PUSH
51590: LD_INT 0
51592: ST_TO_ADDR
// sEarthquake := false ;
51593: LD_ADDR_EXP 69
51597: PUSH
51598: LD_INT 0
51600: ST_TO_ADDR
// sAI := false ;
51601: LD_ADDR_EXP 70
51605: PUSH
51606: LD_INT 0
51608: ST_TO_ADDR
// sCargo := false ;
51609: LD_ADDR_EXP 73
51613: PUSH
51614: LD_INT 0
51616: ST_TO_ADDR
// sDLaser := false ;
51617: LD_ADDR_EXP 74
51621: PUSH
51622: LD_INT 0
51624: ST_TO_ADDR
// sExchange := false ;
51625: LD_ADDR_EXP 75
51629: PUSH
51630: LD_INT 0
51632: ST_TO_ADDR
// sFac := false ;
51633: LD_ADDR_EXP 76
51637: PUSH
51638: LD_INT 0
51640: ST_TO_ADDR
// sPower := false ;
51641: LD_ADDR_EXP 77
51645: PUSH
51646: LD_INT 0
51648: ST_TO_ADDR
// sRandom := false ;
51649: LD_ADDR_EXP 78
51653: PUSH
51654: LD_INT 0
51656: ST_TO_ADDR
// sShield := false ;
51657: LD_ADDR_EXP 79
51661: PUSH
51662: LD_INT 0
51664: ST_TO_ADDR
// sTime := false ;
51665: LD_ADDR_EXP 80
51669: PUSH
51670: LD_INT 0
51672: ST_TO_ADDR
// sTools := false ;
51673: LD_ADDR_EXP 81
51677: PUSH
51678: LD_INT 0
51680: ST_TO_ADDR
// sSold := false ;
51681: LD_ADDR_EXP 46
51685: PUSH
51686: LD_INT 0
51688: ST_TO_ADDR
// sDiff := false ;
51689: LD_ADDR_EXP 47
51693: PUSH
51694: LD_INT 0
51696: ST_TO_ADDR
// sFog := false ;
51697: LD_ADDR_EXP 50
51701: PUSH
51702: LD_INT 0
51704: ST_TO_ADDR
// sReset := false ;
51705: LD_ADDR_EXP 51
51709: PUSH
51710: LD_INT 0
51712: ST_TO_ADDR
// sSun := false ;
51713: LD_ADDR_EXP 52
51717: PUSH
51718: LD_INT 0
51720: ST_TO_ADDR
// sTiger := false ;
51721: LD_ADDR_EXP 48
51725: PUSH
51726: LD_INT 0
51728: ST_TO_ADDR
// sBomb := false ;
51729: LD_ADDR_EXP 49
51733: PUSH
51734: LD_INT 0
51736: ST_TO_ADDR
// sWound := false ;
51737: LD_ADDR_EXP 57
51741: PUSH
51742: LD_INT 0
51744: ST_TO_ADDR
// sBetray := false ;
51745: LD_ADDR_EXP 61
51749: PUSH
51750: LD_INT 0
51752: ST_TO_ADDR
// sContamin := false ;
51753: LD_ADDR_EXP 62
51757: PUSH
51758: LD_INT 0
51760: ST_TO_ADDR
// sOil := false ;
51761: LD_ADDR_EXP 64
51765: PUSH
51766: LD_INT 0
51768: ST_TO_ADDR
// sStu := false ;
51769: LD_ADDR_EXP 68
51773: PUSH
51774: LD_INT 0
51776: ST_TO_ADDR
// sBazooka := false ;
51777: LD_ADDR_EXP 71
51781: PUSH
51782: LD_INT 0
51784: ST_TO_ADDR
// sMortar := false ;
51785: LD_ADDR_EXP 72
51789: PUSH
51790: LD_INT 0
51792: ST_TO_ADDR
// sRanger := false ;
51793: LD_ADDR_EXP 82
51797: PUSH
51798: LD_INT 0
51800: ST_TO_ADDR
// sComputer := false ;
51801: LD_ADDR_EXP 83
51805: PUSH
51806: LD_INT 0
51808: ST_TO_ADDR
// s30 := false ;
51809: LD_ADDR_EXP 84
51813: PUSH
51814: LD_INT 0
51816: ST_TO_ADDR
// s60 := false ;
51817: LD_ADDR_EXP 85
51821: PUSH
51822: LD_INT 0
51824: ST_TO_ADDR
// end ;
51825: LD_VAR 0 1
51829: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
51830: LD_INT 0
51832: PPUSH
51833: PPUSH
51834: PPUSH
51835: PPUSH
51836: PPUSH
51837: PPUSH
51838: PPUSH
// result := [ ] ;
51839: LD_ADDR_VAR 0 2
51843: PUSH
51844: EMPTY
51845: ST_TO_ADDR
// if campaign_id = 1 then
51846: LD_OWVAR 69
51850: PUSH
51851: LD_INT 1
51853: EQUAL
51854: IFFALSE 55020
// begin case mission_number of 1 :
51856: LD_OWVAR 70
51860: PUSH
51861: LD_INT 1
51863: DOUBLE
51864: EQUAL
51865: IFTRUE 51869
51867: GO 51945
51869: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
51870: LD_ADDR_VAR 0 2
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: LD_INT 4
51880: PUSH
51881: LD_INT 11
51883: PUSH
51884: LD_INT 12
51886: PUSH
51887: LD_INT 15
51889: PUSH
51890: LD_INT 16
51892: PUSH
51893: LD_INT 22
51895: PUSH
51896: LD_INT 23
51898: PUSH
51899: LD_INT 26
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 101
51915: PUSH
51916: LD_INT 102
51918: PUSH
51919: LD_INT 106
51921: PUSH
51922: LD_INT 116
51924: PUSH
51925: LD_INT 117
51927: PUSH
51928: LD_INT 118
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: ST_TO_ADDR
51943: GO 55018
51945: LD_INT 2
51947: DOUBLE
51948: EQUAL
51949: IFTRUE 51953
51951: GO 52037
51953: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
51954: LD_ADDR_VAR 0 2
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: LD_INT 4
51964: PUSH
51965: LD_INT 11
51967: PUSH
51968: LD_INT 12
51970: PUSH
51971: LD_INT 15
51973: PUSH
51974: LD_INT 16
51976: PUSH
51977: LD_INT 22
51979: PUSH
51980: LD_INT 23
51982: PUSH
51983: LD_INT 26
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 101
51999: PUSH
52000: LD_INT 102
52002: PUSH
52003: LD_INT 105
52005: PUSH
52006: LD_INT 106
52008: PUSH
52009: LD_INT 108
52011: PUSH
52012: LD_INT 116
52014: PUSH
52015: LD_INT 117
52017: PUSH
52018: LD_INT 118
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: ST_TO_ADDR
52035: GO 55018
52037: LD_INT 3
52039: DOUBLE
52040: EQUAL
52041: IFTRUE 52045
52043: GO 52133
52045: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
52046: LD_ADDR_VAR 0 2
52050: PUSH
52051: LD_INT 2
52053: PUSH
52054: LD_INT 4
52056: PUSH
52057: LD_INT 5
52059: PUSH
52060: LD_INT 11
52062: PUSH
52063: LD_INT 12
52065: PUSH
52066: LD_INT 15
52068: PUSH
52069: LD_INT 16
52071: PUSH
52072: LD_INT 22
52074: PUSH
52075: LD_INT 26
52077: PUSH
52078: LD_INT 36
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 101
52095: PUSH
52096: LD_INT 102
52098: PUSH
52099: LD_INT 105
52101: PUSH
52102: LD_INT 106
52104: PUSH
52105: LD_INT 108
52107: PUSH
52108: LD_INT 116
52110: PUSH
52111: LD_INT 117
52113: PUSH
52114: LD_INT 118
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: ST_TO_ADDR
52131: GO 55018
52133: LD_INT 4
52135: DOUBLE
52136: EQUAL
52137: IFTRUE 52141
52139: GO 52237
52141: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
52142: LD_ADDR_VAR 0 2
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: LD_INT 4
52152: PUSH
52153: LD_INT 5
52155: PUSH
52156: LD_INT 8
52158: PUSH
52159: LD_INT 11
52161: PUSH
52162: LD_INT 12
52164: PUSH
52165: LD_INT 15
52167: PUSH
52168: LD_INT 16
52170: PUSH
52171: LD_INT 22
52173: PUSH
52174: LD_INT 23
52176: PUSH
52177: LD_INT 26
52179: PUSH
52180: LD_INT 36
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 101
52199: PUSH
52200: LD_INT 102
52202: PUSH
52203: LD_INT 105
52205: PUSH
52206: LD_INT 106
52208: PUSH
52209: LD_INT 108
52211: PUSH
52212: LD_INT 116
52214: PUSH
52215: LD_INT 117
52217: PUSH
52218: LD_INT 118
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: ST_TO_ADDR
52235: GO 55018
52237: LD_INT 5
52239: DOUBLE
52240: EQUAL
52241: IFTRUE 52245
52243: GO 52357
52245: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
52246: LD_ADDR_VAR 0 2
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: LD_INT 4
52256: PUSH
52257: LD_INT 5
52259: PUSH
52260: LD_INT 6
52262: PUSH
52263: LD_INT 8
52265: PUSH
52266: LD_INT 11
52268: PUSH
52269: LD_INT 12
52271: PUSH
52272: LD_INT 15
52274: PUSH
52275: LD_INT 16
52277: PUSH
52278: LD_INT 22
52280: PUSH
52281: LD_INT 23
52283: PUSH
52284: LD_INT 25
52286: PUSH
52287: LD_INT 26
52289: PUSH
52290: LD_INT 36
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 101
52311: PUSH
52312: LD_INT 102
52314: PUSH
52315: LD_INT 105
52317: PUSH
52318: LD_INT 106
52320: PUSH
52321: LD_INT 108
52323: PUSH
52324: LD_INT 109
52326: PUSH
52327: LD_INT 112
52329: PUSH
52330: LD_INT 116
52332: PUSH
52333: LD_INT 117
52335: PUSH
52336: LD_INT 118
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: ST_TO_ADDR
52355: GO 55018
52357: LD_INT 6
52359: DOUBLE
52360: EQUAL
52361: IFTRUE 52365
52363: GO 52497
52365: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
52366: LD_ADDR_VAR 0 2
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: LD_INT 4
52376: PUSH
52377: LD_INT 5
52379: PUSH
52380: LD_INT 6
52382: PUSH
52383: LD_INT 8
52385: PUSH
52386: LD_INT 11
52388: PUSH
52389: LD_INT 12
52391: PUSH
52392: LD_INT 15
52394: PUSH
52395: LD_INT 16
52397: PUSH
52398: LD_INT 20
52400: PUSH
52401: LD_INT 21
52403: PUSH
52404: LD_INT 22
52406: PUSH
52407: LD_INT 23
52409: PUSH
52410: LD_INT 25
52412: PUSH
52413: LD_INT 26
52415: PUSH
52416: LD_INT 30
52418: PUSH
52419: LD_INT 31
52421: PUSH
52422: LD_INT 32
52424: PUSH
52425: LD_INT 36
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 101
52451: PUSH
52452: LD_INT 102
52454: PUSH
52455: LD_INT 105
52457: PUSH
52458: LD_INT 106
52460: PUSH
52461: LD_INT 108
52463: PUSH
52464: LD_INT 109
52466: PUSH
52467: LD_INT 112
52469: PUSH
52470: LD_INT 116
52472: PUSH
52473: LD_INT 117
52475: PUSH
52476: LD_INT 118
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: ST_TO_ADDR
52495: GO 55018
52497: LD_INT 7
52499: DOUBLE
52500: EQUAL
52501: IFTRUE 52505
52503: GO 52617
52505: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
52506: LD_ADDR_VAR 0 2
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: LD_INT 4
52516: PUSH
52517: LD_INT 5
52519: PUSH
52520: LD_INT 7
52522: PUSH
52523: LD_INT 11
52525: PUSH
52526: LD_INT 12
52528: PUSH
52529: LD_INT 15
52531: PUSH
52532: LD_INT 16
52534: PUSH
52535: LD_INT 20
52537: PUSH
52538: LD_INT 21
52540: PUSH
52541: LD_INT 22
52543: PUSH
52544: LD_INT 23
52546: PUSH
52547: LD_INT 25
52549: PUSH
52550: LD_INT 26
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 101
52571: PUSH
52572: LD_INT 102
52574: PUSH
52575: LD_INT 103
52577: PUSH
52578: LD_INT 105
52580: PUSH
52581: LD_INT 106
52583: PUSH
52584: LD_INT 108
52586: PUSH
52587: LD_INT 112
52589: PUSH
52590: LD_INT 116
52592: PUSH
52593: LD_INT 117
52595: PUSH
52596: LD_INT 118
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: ST_TO_ADDR
52615: GO 55018
52617: LD_INT 8
52619: DOUBLE
52620: EQUAL
52621: IFTRUE 52625
52623: GO 52765
52625: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
52626: LD_ADDR_VAR 0 2
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: LD_INT 4
52636: PUSH
52637: LD_INT 5
52639: PUSH
52640: LD_INT 6
52642: PUSH
52643: LD_INT 7
52645: PUSH
52646: LD_INT 8
52648: PUSH
52649: LD_INT 11
52651: PUSH
52652: LD_INT 12
52654: PUSH
52655: LD_INT 15
52657: PUSH
52658: LD_INT 16
52660: PUSH
52661: LD_INT 20
52663: PUSH
52664: LD_INT 21
52666: PUSH
52667: LD_INT 22
52669: PUSH
52670: LD_INT 23
52672: PUSH
52673: LD_INT 25
52675: PUSH
52676: LD_INT 26
52678: PUSH
52679: LD_INT 30
52681: PUSH
52682: LD_INT 31
52684: PUSH
52685: LD_INT 32
52687: PUSH
52688: LD_INT 36
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 101
52715: PUSH
52716: LD_INT 102
52718: PUSH
52719: LD_INT 103
52721: PUSH
52722: LD_INT 105
52724: PUSH
52725: LD_INT 106
52727: PUSH
52728: LD_INT 108
52730: PUSH
52731: LD_INT 109
52733: PUSH
52734: LD_INT 112
52736: PUSH
52737: LD_INT 116
52739: PUSH
52740: LD_INT 117
52742: PUSH
52743: LD_INT 118
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: ST_TO_ADDR
52763: GO 55018
52765: LD_INT 9
52767: DOUBLE
52768: EQUAL
52769: IFTRUE 52773
52771: GO 52921
52773: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
52774: LD_ADDR_VAR 0 2
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: LD_INT 4
52784: PUSH
52785: LD_INT 5
52787: PUSH
52788: LD_INT 6
52790: PUSH
52791: LD_INT 7
52793: PUSH
52794: LD_INT 8
52796: PUSH
52797: LD_INT 11
52799: PUSH
52800: LD_INT 12
52802: PUSH
52803: LD_INT 15
52805: PUSH
52806: LD_INT 16
52808: PUSH
52809: LD_INT 20
52811: PUSH
52812: LD_INT 21
52814: PUSH
52815: LD_INT 22
52817: PUSH
52818: LD_INT 23
52820: PUSH
52821: LD_INT 25
52823: PUSH
52824: LD_INT 26
52826: PUSH
52827: LD_INT 28
52829: PUSH
52830: LD_INT 30
52832: PUSH
52833: LD_INT 31
52835: PUSH
52836: LD_INT 32
52838: PUSH
52839: LD_INT 36
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 101
52867: PUSH
52868: LD_INT 102
52870: PUSH
52871: LD_INT 103
52873: PUSH
52874: LD_INT 105
52876: PUSH
52877: LD_INT 106
52879: PUSH
52880: LD_INT 108
52882: PUSH
52883: LD_INT 109
52885: PUSH
52886: LD_INT 112
52888: PUSH
52889: LD_INT 114
52891: PUSH
52892: LD_INT 116
52894: PUSH
52895: LD_INT 117
52897: PUSH
52898: LD_INT 118
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: ST_TO_ADDR
52919: GO 55018
52921: LD_INT 10
52923: DOUBLE
52924: EQUAL
52925: IFTRUE 52929
52927: GO 53125
52929: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
52930: LD_ADDR_VAR 0 2
52934: PUSH
52935: LD_INT 2
52937: PUSH
52938: LD_INT 4
52940: PUSH
52941: LD_INT 5
52943: PUSH
52944: LD_INT 6
52946: PUSH
52947: LD_INT 7
52949: PUSH
52950: LD_INT 8
52952: PUSH
52953: LD_INT 9
52955: PUSH
52956: LD_INT 10
52958: PUSH
52959: LD_INT 11
52961: PUSH
52962: LD_INT 12
52964: PUSH
52965: LD_INT 13
52967: PUSH
52968: LD_INT 14
52970: PUSH
52971: LD_INT 15
52973: PUSH
52974: LD_INT 16
52976: PUSH
52977: LD_INT 17
52979: PUSH
52980: LD_INT 18
52982: PUSH
52983: LD_INT 19
52985: PUSH
52986: LD_INT 20
52988: PUSH
52989: LD_INT 21
52991: PUSH
52992: LD_INT 22
52994: PUSH
52995: LD_INT 23
52997: PUSH
52998: LD_INT 24
53000: PUSH
53001: LD_INT 25
53003: PUSH
53004: LD_INT 26
53006: PUSH
53007: LD_INT 28
53009: PUSH
53010: LD_INT 30
53012: PUSH
53013: LD_INT 31
53015: PUSH
53016: LD_INT 32
53018: PUSH
53019: LD_INT 36
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 101
53055: PUSH
53056: LD_INT 102
53058: PUSH
53059: LD_INT 103
53061: PUSH
53062: LD_INT 104
53064: PUSH
53065: LD_INT 105
53067: PUSH
53068: LD_INT 106
53070: PUSH
53071: LD_INT 107
53073: PUSH
53074: LD_INT 108
53076: PUSH
53077: LD_INT 109
53079: PUSH
53080: LD_INT 110
53082: PUSH
53083: LD_INT 111
53085: PUSH
53086: LD_INT 112
53088: PUSH
53089: LD_INT 114
53091: PUSH
53092: LD_INT 116
53094: PUSH
53095: LD_INT 117
53097: PUSH
53098: LD_INT 118
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: ST_TO_ADDR
53123: GO 55018
53125: LD_INT 11
53127: DOUBLE
53128: EQUAL
53129: IFTRUE 53133
53131: GO 53337
53133: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
53134: LD_ADDR_VAR 0 2
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: LD_INT 3
53144: PUSH
53145: LD_INT 4
53147: PUSH
53148: LD_INT 5
53150: PUSH
53151: LD_INT 6
53153: PUSH
53154: LD_INT 7
53156: PUSH
53157: LD_INT 8
53159: PUSH
53160: LD_INT 9
53162: PUSH
53163: LD_INT 10
53165: PUSH
53166: LD_INT 11
53168: PUSH
53169: LD_INT 12
53171: PUSH
53172: LD_INT 13
53174: PUSH
53175: LD_INT 14
53177: PUSH
53178: LD_INT 15
53180: PUSH
53181: LD_INT 16
53183: PUSH
53184: LD_INT 17
53186: PUSH
53187: LD_INT 18
53189: PUSH
53190: LD_INT 19
53192: PUSH
53193: LD_INT 20
53195: PUSH
53196: LD_INT 21
53198: PUSH
53199: LD_INT 22
53201: PUSH
53202: LD_INT 23
53204: PUSH
53205: LD_INT 24
53207: PUSH
53208: LD_INT 25
53210: PUSH
53211: LD_INT 26
53213: PUSH
53214: LD_INT 28
53216: PUSH
53217: LD_INT 30
53219: PUSH
53220: LD_INT 31
53222: PUSH
53223: LD_INT 32
53225: PUSH
53226: LD_INT 34
53228: PUSH
53229: LD_INT 36
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 101
53267: PUSH
53268: LD_INT 102
53270: PUSH
53271: LD_INT 103
53273: PUSH
53274: LD_INT 104
53276: PUSH
53277: LD_INT 105
53279: PUSH
53280: LD_INT 106
53282: PUSH
53283: LD_INT 107
53285: PUSH
53286: LD_INT 108
53288: PUSH
53289: LD_INT 109
53291: PUSH
53292: LD_INT 110
53294: PUSH
53295: LD_INT 111
53297: PUSH
53298: LD_INT 112
53300: PUSH
53301: LD_INT 114
53303: PUSH
53304: LD_INT 116
53306: PUSH
53307: LD_INT 117
53309: PUSH
53310: LD_INT 118
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: ST_TO_ADDR
53335: GO 55018
53337: LD_INT 12
53339: DOUBLE
53340: EQUAL
53341: IFTRUE 53345
53343: GO 53565
53345: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
53346: LD_ADDR_VAR 0 2
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: LD_INT 3
53359: PUSH
53360: LD_INT 4
53362: PUSH
53363: LD_INT 5
53365: PUSH
53366: LD_INT 6
53368: PUSH
53369: LD_INT 7
53371: PUSH
53372: LD_INT 8
53374: PUSH
53375: LD_INT 9
53377: PUSH
53378: LD_INT 10
53380: PUSH
53381: LD_INT 11
53383: PUSH
53384: LD_INT 12
53386: PUSH
53387: LD_INT 13
53389: PUSH
53390: LD_INT 14
53392: PUSH
53393: LD_INT 15
53395: PUSH
53396: LD_INT 16
53398: PUSH
53399: LD_INT 17
53401: PUSH
53402: LD_INT 18
53404: PUSH
53405: LD_INT 19
53407: PUSH
53408: LD_INT 20
53410: PUSH
53411: LD_INT 21
53413: PUSH
53414: LD_INT 22
53416: PUSH
53417: LD_INT 23
53419: PUSH
53420: LD_INT 24
53422: PUSH
53423: LD_INT 25
53425: PUSH
53426: LD_INT 26
53428: PUSH
53429: LD_INT 27
53431: PUSH
53432: LD_INT 28
53434: PUSH
53435: LD_INT 30
53437: PUSH
53438: LD_INT 31
53440: PUSH
53441: LD_INT 32
53443: PUSH
53444: LD_INT 33
53446: PUSH
53447: LD_INT 34
53449: PUSH
53450: LD_INT 36
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 101
53491: PUSH
53492: LD_INT 102
53494: PUSH
53495: LD_INT 103
53497: PUSH
53498: LD_INT 104
53500: PUSH
53501: LD_INT 105
53503: PUSH
53504: LD_INT 106
53506: PUSH
53507: LD_INT 107
53509: PUSH
53510: LD_INT 108
53512: PUSH
53513: LD_INT 109
53515: PUSH
53516: LD_INT 110
53518: PUSH
53519: LD_INT 111
53521: PUSH
53522: LD_INT 112
53524: PUSH
53525: LD_INT 113
53527: PUSH
53528: LD_INT 114
53530: PUSH
53531: LD_INT 116
53533: PUSH
53534: LD_INT 117
53536: PUSH
53537: LD_INT 118
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: ST_TO_ADDR
53563: GO 55018
53565: LD_INT 13
53567: DOUBLE
53568: EQUAL
53569: IFTRUE 53573
53571: GO 53781
53573: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
53574: LD_ADDR_VAR 0 2
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: LD_INT 3
53587: PUSH
53588: LD_INT 4
53590: PUSH
53591: LD_INT 5
53593: PUSH
53594: LD_INT 8
53596: PUSH
53597: LD_INT 9
53599: PUSH
53600: LD_INT 10
53602: PUSH
53603: LD_INT 11
53605: PUSH
53606: LD_INT 12
53608: PUSH
53609: LD_INT 14
53611: PUSH
53612: LD_INT 15
53614: PUSH
53615: LD_INT 16
53617: PUSH
53618: LD_INT 17
53620: PUSH
53621: LD_INT 18
53623: PUSH
53624: LD_INT 19
53626: PUSH
53627: LD_INT 20
53629: PUSH
53630: LD_INT 21
53632: PUSH
53633: LD_INT 22
53635: PUSH
53636: LD_INT 23
53638: PUSH
53639: LD_INT 24
53641: PUSH
53642: LD_INT 25
53644: PUSH
53645: LD_INT 26
53647: PUSH
53648: LD_INT 27
53650: PUSH
53651: LD_INT 28
53653: PUSH
53654: LD_INT 30
53656: PUSH
53657: LD_INT 31
53659: PUSH
53660: LD_INT 32
53662: PUSH
53663: LD_INT 33
53665: PUSH
53666: LD_INT 34
53668: PUSH
53669: LD_INT 36
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 101
53707: PUSH
53708: LD_INT 102
53710: PUSH
53711: LD_INT 103
53713: PUSH
53714: LD_INT 104
53716: PUSH
53717: LD_INT 105
53719: PUSH
53720: LD_INT 106
53722: PUSH
53723: LD_INT 107
53725: PUSH
53726: LD_INT 108
53728: PUSH
53729: LD_INT 109
53731: PUSH
53732: LD_INT 110
53734: PUSH
53735: LD_INT 111
53737: PUSH
53738: LD_INT 112
53740: PUSH
53741: LD_INT 113
53743: PUSH
53744: LD_INT 114
53746: PUSH
53747: LD_INT 116
53749: PUSH
53750: LD_INT 117
53752: PUSH
53753: LD_INT 118
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: ST_TO_ADDR
53779: GO 55018
53781: LD_INT 14
53783: DOUBLE
53784: EQUAL
53785: IFTRUE 53789
53787: GO 54013
53789: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
53790: LD_ADDR_VAR 0 2
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: LD_INT 2
53800: PUSH
53801: LD_INT 3
53803: PUSH
53804: LD_INT 4
53806: PUSH
53807: LD_INT 5
53809: PUSH
53810: LD_INT 6
53812: PUSH
53813: LD_INT 7
53815: PUSH
53816: LD_INT 8
53818: PUSH
53819: LD_INT 9
53821: PUSH
53822: LD_INT 10
53824: PUSH
53825: LD_INT 11
53827: PUSH
53828: LD_INT 12
53830: PUSH
53831: LD_INT 13
53833: PUSH
53834: LD_INT 14
53836: PUSH
53837: LD_INT 15
53839: PUSH
53840: LD_INT 16
53842: PUSH
53843: LD_INT 17
53845: PUSH
53846: LD_INT 18
53848: PUSH
53849: LD_INT 19
53851: PUSH
53852: LD_INT 20
53854: PUSH
53855: LD_INT 21
53857: PUSH
53858: LD_INT 22
53860: PUSH
53861: LD_INT 23
53863: PUSH
53864: LD_INT 24
53866: PUSH
53867: LD_INT 25
53869: PUSH
53870: LD_INT 26
53872: PUSH
53873: LD_INT 27
53875: PUSH
53876: LD_INT 28
53878: PUSH
53879: LD_INT 29
53881: PUSH
53882: LD_INT 30
53884: PUSH
53885: LD_INT 31
53887: PUSH
53888: LD_INT 32
53890: PUSH
53891: LD_INT 33
53893: PUSH
53894: LD_INT 34
53896: PUSH
53897: LD_INT 36
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 101
53939: PUSH
53940: LD_INT 102
53942: PUSH
53943: LD_INT 103
53945: PUSH
53946: LD_INT 104
53948: PUSH
53949: LD_INT 105
53951: PUSH
53952: LD_INT 106
53954: PUSH
53955: LD_INT 107
53957: PUSH
53958: LD_INT 108
53960: PUSH
53961: LD_INT 109
53963: PUSH
53964: LD_INT 110
53966: PUSH
53967: LD_INT 111
53969: PUSH
53970: LD_INT 112
53972: PUSH
53973: LD_INT 113
53975: PUSH
53976: LD_INT 114
53978: PUSH
53979: LD_INT 116
53981: PUSH
53982: LD_INT 117
53984: PUSH
53985: LD_INT 118
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: ST_TO_ADDR
54011: GO 55018
54013: LD_INT 15
54015: DOUBLE
54016: EQUAL
54017: IFTRUE 54021
54019: GO 54245
54021: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
54022: LD_ADDR_VAR 0 2
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: LD_INT 3
54035: PUSH
54036: LD_INT 4
54038: PUSH
54039: LD_INT 5
54041: PUSH
54042: LD_INT 6
54044: PUSH
54045: LD_INT 7
54047: PUSH
54048: LD_INT 8
54050: PUSH
54051: LD_INT 9
54053: PUSH
54054: LD_INT 10
54056: PUSH
54057: LD_INT 11
54059: PUSH
54060: LD_INT 12
54062: PUSH
54063: LD_INT 13
54065: PUSH
54066: LD_INT 14
54068: PUSH
54069: LD_INT 15
54071: PUSH
54072: LD_INT 16
54074: PUSH
54075: LD_INT 17
54077: PUSH
54078: LD_INT 18
54080: PUSH
54081: LD_INT 19
54083: PUSH
54084: LD_INT 20
54086: PUSH
54087: LD_INT 21
54089: PUSH
54090: LD_INT 22
54092: PUSH
54093: LD_INT 23
54095: PUSH
54096: LD_INT 24
54098: PUSH
54099: LD_INT 25
54101: PUSH
54102: LD_INT 26
54104: PUSH
54105: LD_INT 27
54107: PUSH
54108: LD_INT 28
54110: PUSH
54111: LD_INT 29
54113: PUSH
54114: LD_INT 30
54116: PUSH
54117: LD_INT 31
54119: PUSH
54120: LD_INT 32
54122: PUSH
54123: LD_INT 33
54125: PUSH
54126: LD_INT 34
54128: PUSH
54129: LD_INT 36
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 101
54171: PUSH
54172: LD_INT 102
54174: PUSH
54175: LD_INT 103
54177: PUSH
54178: LD_INT 104
54180: PUSH
54181: LD_INT 105
54183: PUSH
54184: LD_INT 106
54186: PUSH
54187: LD_INT 107
54189: PUSH
54190: LD_INT 108
54192: PUSH
54193: LD_INT 109
54195: PUSH
54196: LD_INT 110
54198: PUSH
54199: LD_INT 111
54201: PUSH
54202: LD_INT 112
54204: PUSH
54205: LD_INT 113
54207: PUSH
54208: LD_INT 114
54210: PUSH
54211: LD_INT 116
54213: PUSH
54214: LD_INT 117
54216: PUSH
54217: LD_INT 118
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: ST_TO_ADDR
54243: GO 55018
54245: LD_INT 16
54247: DOUBLE
54248: EQUAL
54249: IFTRUE 54253
54251: GO 54389
54253: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
54254: LD_ADDR_VAR 0 2
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: LD_INT 4
54264: PUSH
54265: LD_INT 5
54267: PUSH
54268: LD_INT 7
54270: PUSH
54271: LD_INT 11
54273: PUSH
54274: LD_INT 12
54276: PUSH
54277: LD_INT 15
54279: PUSH
54280: LD_INT 16
54282: PUSH
54283: LD_INT 20
54285: PUSH
54286: LD_INT 21
54288: PUSH
54289: LD_INT 22
54291: PUSH
54292: LD_INT 23
54294: PUSH
54295: LD_INT 25
54297: PUSH
54298: LD_INT 26
54300: PUSH
54301: LD_INT 30
54303: PUSH
54304: LD_INT 31
54306: PUSH
54307: LD_INT 32
54309: PUSH
54310: LD_INT 33
54312: PUSH
54313: LD_INT 34
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 101
54339: PUSH
54340: LD_INT 102
54342: PUSH
54343: LD_INT 103
54345: PUSH
54346: LD_INT 106
54348: PUSH
54349: LD_INT 108
54351: PUSH
54352: LD_INT 112
54354: PUSH
54355: LD_INT 113
54357: PUSH
54358: LD_INT 114
54360: PUSH
54361: LD_INT 116
54363: PUSH
54364: LD_INT 117
54366: PUSH
54367: LD_INT 118
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: ST_TO_ADDR
54387: GO 55018
54389: LD_INT 17
54391: DOUBLE
54392: EQUAL
54393: IFTRUE 54397
54395: GO 54621
54397: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
54398: LD_ADDR_VAR 0 2
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: LD_INT 3
54411: PUSH
54412: LD_INT 4
54414: PUSH
54415: LD_INT 5
54417: PUSH
54418: LD_INT 6
54420: PUSH
54421: LD_INT 7
54423: PUSH
54424: LD_INT 8
54426: PUSH
54427: LD_INT 9
54429: PUSH
54430: LD_INT 10
54432: PUSH
54433: LD_INT 11
54435: PUSH
54436: LD_INT 12
54438: PUSH
54439: LD_INT 13
54441: PUSH
54442: LD_INT 14
54444: PUSH
54445: LD_INT 15
54447: PUSH
54448: LD_INT 16
54450: PUSH
54451: LD_INT 17
54453: PUSH
54454: LD_INT 18
54456: PUSH
54457: LD_INT 19
54459: PUSH
54460: LD_INT 20
54462: PUSH
54463: LD_INT 21
54465: PUSH
54466: LD_INT 22
54468: PUSH
54469: LD_INT 23
54471: PUSH
54472: LD_INT 24
54474: PUSH
54475: LD_INT 25
54477: PUSH
54478: LD_INT 26
54480: PUSH
54481: LD_INT 27
54483: PUSH
54484: LD_INT 28
54486: PUSH
54487: LD_INT 29
54489: PUSH
54490: LD_INT 30
54492: PUSH
54493: LD_INT 31
54495: PUSH
54496: LD_INT 32
54498: PUSH
54499: LD_INT 33
54501: PUSH
54502: LD_INT 34
54504: PUSH
54505: LD_INT 36
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 101
54547: PUSH
54548: LD_INT 102
54550: PUSH
54551: LD_INT 103
54553: PUSH
54554: LD_INT 104
54556: PUSH
54557: LD_INT 105
54559: PUSH
54560: LD_INT 106
54562: PUSH
54563: LD_INT 107
54565: PUSH
54566: LD_INT 108
54568: PUSH
54569: LD_INT 109
54571: PUSH
54572: LD_INT 110
54574: PUSH
54575: LD_INT 111
54577: PUSH
54578: LD_INT 112
54580: PUSH
54581: LD_INT 113
54583: PUSH
54584: LD_INT 114
54586: PUSH
54587: LD_INT 116
54589: PUSH
54590: LD_INT 117
54592: PUSH
54593: LD_INT 118
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: ST_TO_ADDR
54619: GO 55018
54621: LD_INT 18
54623: DOUBLE
54624: EQUAL
54625: IFTRUE 54629
54627: GO 54777
54629: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
54630: LD_ADDR_VAR 0 2
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: LD_INT 4
54640: PUSH
54641: LD_INT 5
54643: PUSH
54644: LD_INT 7
54646: PUSH
54647: LD_INT 11
54649: PUSH
54650: LD_INT 12
54652: PUSH
54653: LD_INT 15
54655: PUSH
54656: LD_INT 16
54658: PUSH
54659: LD_INT 20
54661: PUSH
54662: LD_INT 21
54664: PUSH
54665: LD_INT 22
54667: PUSH
54668: LD_INT 23
54670: PUSH
54671: LD_INT 25
54673: PUSH
54674: LD_INT 26
54676: PUSH
54677: LD_INT 30
54679: PUSH
54680: LD_INT 31
54682: PUSH
54683: LD_INT 32
54685: PUSH
54686: LD_INT 33
54688: PUSH
54689: LD_INT 34
54691: PUSH
54692: LD_INT 35
54694: PUSH
54695: LD_INT 36
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 101
54723: PUSH
54724: LD_INT 102
54726: PUSH
54727: LD_INT 103
54729: PUSH
54730: LD_INT 106
54732: PUSH
54733: LD_INT 108
54735: PUSH
54736: LD_INT 112
54738: PUSH
54739: LD_INT 113
54741: PUSH
54742: LD_INT 114
54744: PUSH
54745: LD_INT 115
54747: PUSH
54748: LD_INT 116
54750: PUSH
54751: LD_INT 117
54753: PUSH
54754: LD_INT 118
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: ST_TO_ADDR
54775: GO 55018
54777: LD_INT 19
54779: DOUBLE
54780: EQUAL
54781: IFTRUE 54785
54783: GO 55017
54785: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
54786: LD_ADDR_VAR 0 2
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: LD_INT 3
54799: PUSH
54800: LD_INT 4
54802: PUSH
54803: LD_INT 5
54805: PUSH
54806: LD_INT 6
54808: PUSH
54809: LD_INT 7
54811: PUSH
54812: LD_INT 8
54814: PUSH
54815: LD_INT 9
54817: PUSH
54818: LD_INT 10
54820: PUSH
54821: LD_INT 11
54823: PUSH
54824: LD_INT 12
54826: PUSH
54827: LD_INT 13
54829: PUSH
54830: LD_INT 14
54832: PUSH
54833: LD_INT 15
54835: PUSH
54836: LD_INT 16
54838: PUSH
54839: LD_INT 17
54841: PUSH
54842: LD_INT 18
54844: PUSH
54845: LD_INT 19
54847: PUSH
54848: LD_INT 20
54850: PUSH
54851: LD_INT 21
54853: PUSH
54854: LD_INT 22
54856: PUSH
54857: LD_INT 23
54859: PUSH
54860: LD_INT 24
54862: PUSH
54863: LD_INT 25
54865: PUSH
54866: LD_INT 26
54868: PUSH
54869: LD_INT 27
54871: PUSH
54872: LD_INT 28
54874: PUSH
54875: LD_INT 29
54877: PUSH
54878: LD_INT 30
54880: PUSH
54881: LD_INT 31
54883: PUSH
54884: LD_INT 32
54886: PUSH
54887: LD_INT 33
54889: PUSH
54890: LD_INT 34
54892: PUSH
54893: LD_INT 35
54895: PUSH
54896: LD_INT 36
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 101
54939: PUSH
54940: LD_INT 102
54942: PUSH
54943: LD_INT 103
54945: PUSH
54946: LD_INT 104
54948: PUSH
54949: LD_INT 105
54951: PUSH
54952: LD_INT 106
54954: PUSH
54955: LD_INT 107
54957: PUSH
54958: LD_INT 108
54960: PUSH
54961: LD_INT 109
54963: PUSH
54964: LD_INT 110
54966: PUSH
54967: LD_INT 111
54969: PUSH
54970: LD_INT 112
54972: PUSH
54973: LD_INT 113
54975: PUSH
54976: LD_INT 114
54978: PUSH
54979: LD_INT 115
54981: PUSH
54982: LD_INT 116
54984: PUSH
54985: LD_INT 117
54987: PUSH
54988: LD_INT 118
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: ST_TO_ADDR
55015: GO 55018
55017: POP
// end else
55018: GO 55249
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
55020: LD_ADDR_VAR 0 2
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: LD_INT 3
55033: PUSH
55034: LD_INT 4
55036: PUSH
55037: LD_INT 5
55039: PUSH
55040: LD_INT 6
55042: PUSH
55043: LD_INT 7
55045: PUSH
55046: LD_INT 8
55048: PUSH
55049: LD_INT 9
55051: PUSH
55052: LD_INT 10
55054: PUSH
55055: LD_INT 11
55057: PUSH
55058: LD_INT 12
55060: PUSH
55061: LD_INT 13
55063: PUSH
55064: LD_INT 14
55066: PUSH
55067: LD_INT 15
55069: PUSH
55070: LD_INT 16
55072: PUSH
55073: LD_INT 17
55075: PUSH
55076: LD_INT 18
55078: PUSH
55079: LD_INT 19
55081: PUSH
55082: LD_INT 20
55084: PUSH
55085: LD_INT 21
55087: PUSH
55088: LD_INT 22
55090: PUSH
55091: LD_INT 23
55093: PUSH
55094: LD_INT 24
55096: PUSH
55097: LD_INT 25
55099: PUSH
55100: LD_INT 26
55102: PUSH
55103: LD_INT 27
55105: PUSH
55106: LD_INT 28
55108: PUSH
55109: LD_INT 29
55111: PUSH
55112: LD_INT 30
55114: PUSH
55115: LD_INT 31
55117: PUSH
55118: LD_INT 32
55120: PUSH
55121: LD_INT 33
55123: PUSH
55124: LD_INT 34
55126: PUSH
55127: LD_INT 35
55129: PUSH
55130: LD_INT 36
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 101
55173: PUSH
55174: LD_INT 102
55176: PUSH
55177: LD_INT 103
55179: PUSH
55180: LD_INT 104
55182: PUSH
55183: LD_INT 105
55185: PUSH
55186: LD_INT 106
55188: PUSH
55189: LD_INT 107
55191: PUSH
55192: LD_INT 108
55194: PUSH
55195: LD_INT 109
55197: PUSH
55198: LD_INT 110
55200: PUSH
55201: LD_INT 111
55203: PUSH
55204: LD_INT 112
55206: PUSH
55207: LD_INT 113
55209: PUSH
55210: LD_INT 114
55212: PUSH
55213: LD_INT 115
55215: PUSH
55216: LD_INT 116
55218: PUSH
55219: LD_INT 117
55221: PUSH
55222: LD_INT 118
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: ST_TO_ADDR
// if result then
55249: LD_VAR 0 2
55253: IFFALSE 56039
// begin normal :=  ;
55255: LD_ADDR_VAR 0 5
55259: PUSH
55260: LD_STRING 
55262: ST_TO_ADDR
// hardcore :=  ;
55263: LD_ADDR_VAR 0 6
55267: PUSH
55268: LD_STRING 
55270: ST_TO_ADDR
// active :=  ;
55271: LD_ADDR_VAR 0 7
55275: PUSH
55276: LD_STRING 
55278: ST_TO_ADDR
// for i = 1 to normalCounter do
55279: LD_ADDR_VAR 0 8
55283: PUSH
55284: DOUBLE
55285: LD_INT 1
55287: DEC
55288: ST_TO_ADDR
55289: LD_EXP 30
55293: PUSH
55294: FOR_TO
55295: IFFALSE 55396
// begin tmp := 0 ;
55297: LD_ADDR_VAR 0 3
55301: PUSH
55302: LD_STRING 0
55304: ST_TO_ADDR
// if result [ 1 ] then
55305: LD_VAR 0 2
55309: PUSH
55310: LD_INT 1
55312: ARRAY
55313: IFFALSE 55378
// if result [ 1 ] [ 1 ] = i then
55315: LD_VAR 0 2
55319: PUSH
55320: LD_INT 1
55322: ARRAY
55323: PUSH
55324: LD_INT 1
55326: ARRAY
55327: PUSH
55328: LD_VAR 0 8
55332: EQUAL
55333: IFFALSE 55378
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
55335: LD_ADDR_VAR 0 2
55339: PUSH
55340: LD_VAR 0 2
55344: PPUSH
55345: LD_INT 1
55347: PPUSH
55348: LD_VAR 0 2
55352: PUSH
55353: LD_INT 1
55355: ARRAY
55356: PPUSH
55357: LD_INT 1
55359: PPUSH
55360: CALL_OW 3
55364: PPUSH
55365: CALL_OW 1
55369: ST_TO_ADDR
// tmp := 1 ;
55370: LD_ADDR_VAR 0 3
55374: PUSH
55375: LD_STRING 1
55377: ST_TO_ADDR
// end ; normal := normal & tmp ;
55378: LD_ADDR_VAR 0 5
55382: PUSH
55383: LD_VAR 0 5
55387: PUSH
55388: LD_VAR 0 3
55392: STR
55393: ST_TO_ADDR
// end ;
55394: GO 55294
55396: POP
55397: POP
// for i = 1 to hardcoreCounter do
55398: LD_ADDR_VAR 0 8
55402: PUSH
55403: DOUBLE
55404: LD_INT 1
55406: DEC
55407: ST_TO_ADDR
55408: LD_EXP 31
55412: PUSH
55413: FOR_TO
55414: IFFALSE 55519
// begin tmp := 0 ;
55416: LD_ADDR_VAR 0 3
55420: PUSH
55421: LD_STRING 0
55423: ST_TO_ADDR
// if result [ 2 ] then
55424: LD_VAR 0 2
55428: PUSH
55429: LD_INT 2
55431: ARRAY
55432: IFFALSE 55501
// if result [ 2 ] [ 1 ] = 100 + i then
55434: LD_VAR 0 2
55438: PUSH
55439: LD_INT 2
55441: ARRAY
55442: PUSH
55443: LD_INT 1
55445: ARRAY
55446: PUSH
55447: LD_INT 100
55449: PUSH
55450: LD_VAR 0 8
55454: PLUS
55455: EQUAL
55456: IFFALSE 55501
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
55458: LD_ADDR_VAR 0 2
55462: PUSH
55463: LD_VAR 0 2
55467: PPUSH
55468: LD_INT 2
55470: PPUSH
55471: LD_VAR 0 2
55475: PUSH
55476: LD_INT 2
55478: ARRAY
55479: PPUSH
55480: LD_INT 1
55482: PPUSH
55483: CALL_OW 3
55487: PPUSH
55488: CALL_OW 1
55492: ST_TO_ADDR
// tmp := 1 ;
55493: LD_ADDR_VAR 0 3
55497: PUSH
55498: LD_STRING 1
55500: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
55501: LD_ADDR_VAR 0 6
55505: PUSH
55506: LD_VAR 0 6
55510: PUSH
55511: LD_VAR 0 3
55515: STR
55516: ST_TO_ADDR
// end ;
55517: GO 55413
55519: POP
55520: POP
// if isGameLoad then
55521: LD_VAR 0 1
55525: IFFALSE 56000
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
55527: LD_ADDR_VAR 0 4
55531: PUSH
55532: LD_EXP 34
55536: PUSH
55537: LD_EXP 33
55541: PUSH
55542: LD_EXP 35
55546: PUSH
55547: LD_EXP 32
55551: PUSH
55552: LD_EXP 36
55556: PUSH
55557: LD_EXP 37
55561: PUSH
55562: LD_EXP 38
55566: PUSH
55567: LD_EXP 39
55571: PUSH
55572: LD_EXP 40
55576: PUSH
55577: LD_EXP 41
55581: PUSH
55582: LD_EXP 42
55586: PUSH
55587: LD_EXP 43
55591: PUSH
55592: LD_EXP 44
55596: PUSH
55597: LD_EXP 45
55601: PUSH
55602: LD_EXP 53
55606: PUSH
55607: LD_EXP 54
55611: PUSH
55612: LD_EXP 55
55616: PUSH
55617: LD_EXP 56
55621: PUSH
55622: LD_EXP 58
55626: PUSH
55627: LD_EXP 59
55631: PUSH
55632: LD_EXP 60
55636: PUSH
55637: LD_EXP 63
55641: PUSH
55642: LD_EXP 65
55646: PUSH
55647: LD_EXP 66
55651: PUSH
55652: LD_EXP 67
55656: PUSH
55657: LD_EXP 69
55661: PUSH
55662: LD_EXP 70
55666: PUSH
55667: LD_EXP 73
55671: PUSH
55672: LD_EXP 74
55676: PUSH
55677: LD_EXP 75
55681: PUSH
55682: LD_EXP 76
55686: PUSH
55687: LD_EXP 77
55691: PUSH
55692: LD_EXP 78
55696: PUSH
55697: LD_EXP 79
55701: PUSH
55702: LD_EXP 80
55706: PUSH
55707: LD_EXP 81
55711: PUSH
55712: LD_EXP 46
55716: PUSH
55717: LD_EXP 47
55721: PUSH
55722: LD_EXP 50
55726: PUSH
55727: LD_EXP 51
55731: PUSH
55732: LD_EXP 52
55736: PUSH
55737: LD_EXP 48
55741: PUSH
55742: LD_EXP 49
55746: PUSH
55747: LD_EXP 57
55751: PUSH
55752: LD_EXP 61
55756: PUSH
55757: LD_EXP 62
55761: PUSH
55762: LD_EXP 64
55766: PUSH
55767: LD_EXP 68
55771: PUSH
55772: LD_EXP 71
55776: PUSH
55777: LD_EXP 72
55781: PUSH
55782: LD_EXP 82
55786: PUSH
55787: LD_EXP 83
55791: PUSH
55792: LD_EXP 84
55796: PUSH
55797: LD_EXP 85
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: ST_TO_ADDR
// tmp :=  ;
55858: LD_ADDR_VAR 0 3
55862: PUSH
55863: LD_STRING 
55865: ST_TO_ADDR
// for i = 1 to normalCounter do
55866: LD_ADDR_VAR 0 8
55870: PUSH
55871: DOUBLE
55872: LD_INT 1
55874: DEC
55875: ST_TO_ADDR
55876: LD_EXP 30
55880: PUSH
55881: FOR_TO
55882: IFFALSE 55918
// begin if flags [ i ] then
55884: LD_VAR 0 4
55888: PUSH
55889: LD_VAR 0 8
55893: ARRAY
55894: IFFALSE 55916
// tmp := tmp & i & ; ;
55896: LD_ADDR_VAR 0 3
55900: PUSH
55901: LD_VAR 0 3
55905: PUSH
55906: LD_VAR 0 8
55910: STR
55911: PUSH
55912: LD_STRING ;
55914: STR
55915: ST_TO_ADDR
// end ;
55916: GO 55881
55918: POP
55919: POP
// for i = 1 to hardcoreCounter do
55920: LD_ADDR_VAR 0 8
55924: PUSH
55925: DOUBLE
55926: LD_INT 1
55928: DEC
55929: ST_TO_ADDR
55930: LD_EXP 31
55934: PUSH
55935: FOR_TO
55936: IFFALSE 55982
// begin if flags [ normalCounter + i ] then
55938: LD_VAR 0 4
55942: PUSH
55943: LD_EXP 30
55947: PUSH
55948: LD_VAR 0 8
55952: PLUS
55953: ARRAY
55954: IFFALSE 55980
// tmp := tmp & ( 100 + i ) & ; ;
55956: LD_ADDR_VAR 0 3
55960: PUSH
55961: LD_VAR 0 3
55965: PUSH
55966: LD_INT 100
55968: PUSH
55969: LD_VAR 0 8
55973: PLUS
55974: STR
55975: PUSH
55976: LD_STRING ;
55978: STR
55979: ST_TO_ADDR
// end ;
55980: GO 55935
55982: POP
55983: POP
// if tmp then
55984: LD_VAR 0 3
55988: IFFALSE 56000
// active := tmp ;
55990: LD_ADDR_VAR 0 7
55994: PUSH
55995: LD_VAR 0 3
55999: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56000: LD_STRING getStreamItemsFromMission("
56002: PUSH
56003: LD_VAR 0 5
56007: STR
56008: PUSH
56009: LD_STRING ","
56011: STR
56012: PUSH
56013: LD_VAR 0 6
56017: STR
56018: PUSH
56019: LD_STRING ","
56021: STR
56022: PUSH
56023: LD_VAR 0 7
56027: STR
56028: PUSH
56029: LD_STRING ")
56031: STR
56032: PPUSH
56033: CALL_OW 559
// end else
56037: GO 56046
// ToLua ( getStreamItemsFromMission("","","") ) ;
56039: LD_STRING getStreamItemsFromMission("","","")
56041: PPUSH
56042: CALL_OW 559
// end ;
56046: LD_VAR 0 2
56050: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
56051: LD_EXP 29
56055: PUSH
56056: LD_EXP 34
56060: AND
56061: IFFALSE 56185
56063: GO 56065
56065: DISABLE
56066: LD_INT 0
56068: PPUSH
56069: PPUSH
// begin enable ;
56070: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
56071: LD_ADDR_VAR 0 2
56075: PUSH
56076: LD_INT 22
56078: PUSH
56079: LD_OWVAR 2
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: LD_INT 34
56093: PUSH
56094: LD_INT 7
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 34
56103: PUSH
56104: LD_INT 45
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 34
56113: PUSH
56114: LD_INT 28
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 34
56123: PUSH
56124: LD_INT 47
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PPUSH
56142: CALL_OW 69
56146: ST_TO_ADDR
// if not tmp then
56147: LD_VAR 0 2
56151: NOT
56152: IFFALSE 56156
// exit ;
56154: GO 56185
// for i in tmp do
56156: LD_ADDR_VAR 0 1
56160: PUSH
56161: LD_VAR 0 2
56165: PUSH
56166: FOR_IN
56167: IFFALSE 56183
// begin SetLives ( i , 0 ) ;
56169: LD_VAR 0 1
56173: PPUSH
56174: LD_INT 0
56176: PPUSH
56177: CALL_OW 234
// end ;
56181: GO 56166
56183: POP
56184: POP
// end ;
56185: PPOPN 2
56187: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
56188: LD_EXP 29
56192: PUSH
56193: LD_EXP 35
56197: AND
56198: IFFALSE 56282
56200: GO 56202
56202: DISABLE
56203: LD_INT 0
56205: PPUSH
56206: PPUSH
// begin enable ;
56207: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
56208: LD_ADDR_VAR 0 2
56212: PUSH
56213: LD_INT 22
56215: PUSH
56216: LD_OWVAR 2
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 32
56227: PUSH
56228: LD_INT 3
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PPUSH
56239: CALL_OW 69
56243: ST_TO_ADDR
// if not tmp then
56244: LD_VAR 0 2
56248: NOT
56249: IFFALSE 56253
// exit ;
56251: GO 56282
// for i in tmp do
56253: LD_ADDR_VAR 0 1
56257: PUSH
56258: LD_VAR 0 2
56262: PUSH
56263: FOR_IN
56264: IFFALSE 56280
// begin SetLives ( i , 0 ) ;
56266: LD_VAR 0 1
56270: PPUSH
56271: LD_INT 0
56273: PPUSH
56274: CALL_OW 234
// end ;
56278: GO 56263
56280: POP
56281: POP
// end ;
56282: PPOPN 2
56284: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
56285: LD_EXP 29
56289: PUSH
56290: LD_EXP 32
56294: AND
56295: IFFALSE 56388
56297: GO 56299
56299: DISABLE
56300: LD_INT 0
56302: PPUSH
// begin enable ;
56303: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
56304: LD_ADDR_VAR 0 1
56308: PUSH
56309: LD_INT 22
56311: PUSH
56312: LD_OWVAR 2
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 2
56323: PUSH
56324: LD_INT 25
56326: PUSH
56327: LD_INT 5
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 25
56336: PUSH
56337: LD_INT 9
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 25
56346: PUSH
56347: LD_INT 8
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PPUSH
56364: CALL_OW 69
56368: PUSH
56369: FOR_IN
56370: IFFALSE 56386
// begin SetClass ( i , 1 ) ;
56372: LD_VAR 0 1
56376: PPUSH
56377: LD_INT 1
56379: PPUSH
56380: CALL_OW 336
// end ;
56384: GO 56369
56386: POP
56387: POP
// end ;
56388: PPOPN 1
56390: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
56391: LD_EXP 29
56395: PUSH
56396: LD_EXP 33
56400: AND
56401: PUSH
56402: LD_OWVAR 65
56406: PUSH
56407: LD_INT 7
56409: LESS
56410: AND
56411: IFFALSE 56425
56413: GO 56415
56415: DISABLE
// begin enable ;
56416: ENABLE
// game_speed := 7 ;
56417: LD_ADDR_OWVAR 65
56421: PUSH
56422: LD_INT 7
56424: ST_TO_ADDR
// end ;
56425: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
56426: LD_EXP 29
56430: PUSH
56431: LD_EXP 36
56435: AND
56436: IFFALSE 56638
56438: GO 56440
56440: DISABLE
56441: LD_INT 0
56443: PPUSH
56444: PPUSH
56445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56446: LD_ADDR_VAR 0 3
56450: PUSH
56451: LD_INT 81
56453: PUSH
56454: LD_OWVAR 2
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 21
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PPUSH
56477: CALL_OW 69
56481: ST_TO_ADDR
// if not tmp then
56482: LD_VAR 0 3
56486: NOT
56487: IFFALSE 56491
// exit ;
56489: GO 56638
// if tmp > 5 then
56491: LD_VAR 0 3
56495: PUSH
56496: LD_INT 5
56498: GREATER
56499: IFFALSE 56511
// k := 5 else
56501: LD_ADDR_VAR 0 2
56505: PUSH
56506: LD_INT 5
56508: ST_TO_ADDR
56509: GO 56521
// k := tmp ;
56511: LD_ADDR_VAR 0 2
56515: PUSH
56516: LD_VAR 0 3
56520: ST_TO_ADDR
// for i := 1 to k do
56521: LD_ADDR_VAR 0 1
56525: PUSH
56526: DOUBLE
56527: LD_INT 1
56529: DEC
56530: ST_TO_ADDR
56531: LD_VAR 0 2
56535: PUSH
56536: FOR_TO
56537: IFFALSE 56636
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
56539: LD_VAR 0 3
56543: PUSH
56544: LD_VAR 0 1
56548: ARRAY
56549: PPUSH
56550: LD_VAR 0 1
56554: PUSH
56555: LD_INT 4
56557: MOD
56558: PUSH
56559: LD_INT 1
56561: PLUS
56562: PPUSH
56563: CALL_OW 259
56567: PUSH
56568: LD_INT 10
56570: LESS
56571: IFFALSE 56634
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
56573: LD_VAR 0 3
56577: PUSH
56578: LD_VAR 0 1
56582: ARRAY
56583: PPUSH
56584: LD_VAR 0 1
56588: PUSH
56589: LD_INT 4
56591: MOD
56592: PUSH
56593: LD_INT 1
56595: PLUS
56596: PPUSH
56597: LD_VAR 0 3
56601: PUSH
56602: LD_VAR 0 1
56606: ARRAY
56607: PPUSH
56608: LD_VAR 0 1
56612: PUSH
56613: LD_INT 4
56615: MOD
56616: PUSH
56617: LD_INT 1
56619: PLUS
56620: PPUSH
56621: CALL_OW 259
56625: PUSH
56626: LD_INT 1
56628: PLUS
56629: PPUSH
56630: CALL_OW 237
56634: GO 56536
56636: POP
56637: POP
// end ;
56638: PPOPN 3
56640: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
56641: LD_EXP 29
56645: PUSH
56646: LD_EXP 37
56650: AND
56651: IFFALSE 56671
56653: GO 56655
56655: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
56656: LD_INT 4
56658: PPUSH
56659: LD_OWVAR 2
56663: PPUSH
56664: LD_INT 0
56666: PPUSH
56667: CALL_OW 324
56671: END
// every 0 0$1 trigger StreamModeActive and sShovel do
56672: LD_EXP 29
56676: PUSH
56677: LD_EXP 66
56681: AND
56682: IFFALSE 56702
56684: GO 56686
56686: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
56687: LD_INT 19
56689: PPUSH
56690: LD_OWVAR 2
56694: PPUSH
56695: LD_INT 0
56697: PPUSH
56698: CALL_OW 324
56702: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
56703: LD_EXP 29
56707: PUSH
56708: LD_EXP 38
56712: AND
56713: IFFALSE 56815
56715: GO 56717
56717: DISABLE
56718: LD_INT 0
56720: PPUSH
56721: PPUSH
// begin enable ;
56722: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
56723: LD_ADDR_VAR 0 2
56727: PUSH
56728: LD_INT 22
56730: PUSH
56731: LD_OWVAR 2
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: LD_INT 34
56745: PUSH
56746: LD_INT 11
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 34
56755: PUSH
56756: LD_INT 30
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: LIST
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PPUSH
56772: CALL_OW 69
56776: ST_TO_ADDR
// if not tmp then
56777: LD_VAR 0 2
56781: NOT
56782: IFFALSE 56786
// exit ;
56784: GO 56815
// for i in tmp do
56786: LD_ADDR_VAR 0 1
56790: PUSH
56791: LD_VAR 0 2
56795: PUSH
56796: FOR_IN
56797: IFFALSE 56813
// begin SetLives ( i , 0 ) ;
56799: LD_VAR 0 1
56803: PPUSH
56804: LD_INT 0
56806: PPUSH
56807: CALL_OW 234
// end ;
56811: GO 56796
56813: POP
56814: POP
// end ;
56815: PPOPN 2
56817: END
// every 0 0$1 trigger StreamModeActive and sBunker do
56818: LD_EXP 29
56822: PUSH
56823: LD_EXP 39
56827: AND
56828: IFFALSE 56848
56830: GO 56832
56832: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
56833: LD_INT 32
56835: PPUSH
56836: LD_OWVAR 2
56840: PPUSH
56841: LD_INT 0
56843: PPUSH
56844: CALL_OW 324
56848: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
56849: LD_EXP 29
56853: PUSH
56854: LD_EXP 40
56858: AND
56859: IFFALSE 57040
56861: GO 56863
56863: DISABLE
56864: LD_INT 0
56866: PPUSH
56867: PPUSH
56868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
56869: LD_ADDR_VAR 0 2
56873: PUSH
56874: LD_INT 22
56876: PUSH
56877: LD_OWVAR 2
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 33
56888: PUSH
56889: LD_INT 3
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PPUSH
56900: CALL_OW 69
56904: ST_TO_ADDR
// if not tmp then
56905: LD_VAR 0 2
56909: NOT
56910: IFFALSE 56914
// exit ;
56912: GO 57040
// side := 0 ;
56914: LD_ADDR_VAR 0 3
56918: PUSH
56919: LD_INT 0
56921: ST_TO_ADDR
// for i := 1 to 8 do
56922: LD_ADDR_VAR 0 1
56926: PUSH
56927: DOUBLE
56928: LD_INT 1
56930: DEC
56931: ST_TO_ADDR
56932: LD_INT 8
56934: PUSH
56935: FOR_TO
56936: IFFALSE 56984
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
56938: LD_OWVAR 2
56942: PUSH
56943: LD_VAR 0 1
56947: NONEQUAL
56948: PUSH
56949: LD_OWVAR 2
56953: PPUSH
56954: LD_VAR 0 1
56958: PPUSH
56959: CALL_OW 81
56963: PUSH
56964: LD_INT 2
56966: EQUAL
56967: AND
56968: IFFALSE 56982
// begin side := i ;
56970: LD_ADDR_VAR 0 3
56974: PUSH
56975: LD_VAR 0 1
56979: ST_TO_ADDR
// break ;
56980: GO 56984
// end ;
56982: GO 56935
56984: POP
56985: POP
// if not side then
56986: LD_VAR 0 3
56990: NOT
56991: IFFALSE 56995
// exit ;
56993: GO 57040
// for i := 1 to tmp do
56995: LD_ADDR_VAR 0 1
56999: PUSH
57000: DOUBLE
57001: LD_INT 1
57003: DEC
57004: ST_TO_ADDR
57005: LD_VAR 0 2
57009: PUSH
57010: FOR_TO
57011: IFFALSE 57038
// if Prob ( 60 ) then
57013: LD_INT 60
57015: PPUSH
57016: CALL_OW 13
57020: IFFALSE 57036
// SetSide ( i , side ) ;
57022: LD_VAR 0 1
57026: PPUSH
57027: LD_VAR 0 3
57031: PPUSH
57032: CALL_OW 235
57036: GO 57010
57038: POP
57039: POP
// end ;
57040: PPOPN 3
57042: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
57043: LD_EXP 29
57047: PUSH
57048: LD_EXP 42
57052: AND
57053: IFFALSE 57172
57055: GO 57057
57057: DISABLE
57058: LD_INT 0
57060: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
57061: LD_ADDR_VAR 0 1
57065: PUSH
57066: LD_INT 22
57068: PUSH
57069: LD_OWVAR 2
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 21
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 3
57090: PUSH
57091: LD_INT 23
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: LIST
57109: PPUSH
57110: CALL_OW 69
57114: PUSH
57115: FOR_IN
57116: IFFALSE 57170
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
57118: LD_VAR 0 1
57122: PPUSH
57123: CALL_OW 257
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: LD_INT 2
57133: PUSH
57134: LD_INT 3
57136: PUSH
57137: LD_INT 4
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: IN
57146: IFFALSE 57168
// SetClass ( un , rand ( 1 , 4 ) ) ;
57148: LD_VAR 0 1
57152: PPUSH
57153: LD_INT 1
57155: PPUSH
57156: LD_INT 4
57158: PPUSH
57159: CALL_OW 12
57163: PPUSH
57164: CALL_OW 336
57168: GO 57115
57170: POP
57171: POP
// end ;
57172: PPOPN 1
57174: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
57175: LD_EXP 29
57179: PUSH
57180: LD_EXP 41
57184: AND
57185: IFFALSE 57264
57187: GO 57189
57189: DISABLE
57190: LD_INT 0
57192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57193: LD_ADDR_VAR 0 1
57197: PUSH
57198: LD_INT 22
57200: PUSH
57201: LD_OWVAR 2
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 21
57212: PUSH
57213: LD_INT 3
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PPUSH
57224: CALL_OW 69
57228: ST_TO_ADDR
// if not tmp then
57229: LD_VAR 0 1
57233: NOT
57234: IFFALSE 57238
// exit ;
57236: GO 57264
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
57238: LD_VAR 0 1
57242: PUSH
57243: LD_INT 1
57245: PPUSH
57246: LD_VAR 0 1
57250: PPUSH
57251: CALL_OW 12
57255: ARRAY
57256: PPUSH
57257: LD_INT 100
57259: PPUSH
57260: CALL_OW 234
// end ;
57264: PPOPN 1
57266: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
57267: LD_EXP 29
57271: PUSH
57272: LD_EXP 43
57276: AND
57277: IFFALSE 57375
57279: GO 57281
57281: DISABLE
57282: LD_INT 0
57284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57285: LD_ADDR_VAR 0 1
57289: PUSH
57290: LD_INT 22
57292: PUSH
57293: LD_OWVAR 2
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 21
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PPUSH
57316: CALL_OW 69
57320: ST_TO_ADDR
// if not tmp then
57321: LD_VAR 0 1
57325: NOT
57326: IFFALSE 57330
// exit ;
57328: GO 57375
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
57330: LD_VAR 0 1
57334: PUSH
57335: LD_INT 1
57337: PPUSH
57338: LD_VAR 0 1
57342: PPUSH
57343: CALL_OW 12
57347: ARRAY
57348: PPUSH
57349: LD_INT 1
57351: PPUSH
57352: LD_INT 4
57354: PPUSH
57355: CALL_OW 12
57359: PPUSH
57360: LD_INT 3000
57362: PPUSH
57363: LD_INT 9000
57365: PPUSH
57366: CALL_OW 12
57370: PPUSH
57371: CALL_OW 492
// end ;
57375: PPOPN 1
57377: END
// every 0 0$1 trigger StreamModeActive and sDepot do
57378: LD_EXP 29
57382: PUSH
57383: LD_EXP 44
57387: AND
57388: IFFALSE 57408
57390: GO 57392
57392: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
57393: LD_INT 1
57395: PPUSH
57396: LD_OWVAR 2
57400: PPUSH
57401: LD_INT 0
57403: PPUSH
57404: CALL_OW 324
57408: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
57409: LD_EXP 29
57413: PUSH
57414: LD_EXP 45
57418: AND
57419: IFFALSE 57502
57421: GO 57423
57423: DISABLE
57424: LD_INT 0
57426: PPUSH
57427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57428: LD_ADDR_VAR 0 2
57432: PUSH
57433: LD_INT 22
57435: PUSH
57436: LD_OWVAR 2
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 21
57447: PUSH
57448: LD_INT 3
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PPUSH
57459: CALL_OW 69
57463: ST_TO_ADDR
// if not tmp then
57464: LD_VAR 0 2
57468: NOT
57469: IFFALSE 57473
// exit ;
57471: GO 57502
// for i in tmp do
57473: LD_ADDR_VAR 0 1
57477: PUSH
57478: LD_VAR 0 2
57482: PUSH
57483: FOR_IN
57484: IFFALSE 57500
// SetBLevel ( i , 10 ) ;
57486: LD_VAR 0 1
57490: PPUSH
57491: LD_INT 10
57493: PPUSH
57494: CALL_OW 241
57498: GO 57483
57500: POP
57501: POP
// end ;
57502: PPOPN 2
57504: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
57505: LD_EXP 29
57509: PUSH
57510: LD_EXP 46
57514: AND
57515: IFFALSE 57626
57517: GO 57519
57519: DISABLE
57520: LD_INT 0
57522: PPUSH
57523: PPUSH
57524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57525: LD_ADDR_VAR 0 3
57529: PUSH
57530: LD_INT 22
57532: PUSH
57533: LD_OWVAR 2
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 25
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PPUSH
57556: CALL_OW 69
57560: ST_TO_ADDR
// if not tmp then
57561: LD_VAR 0 3
57565: NOT
57566: IFFALSE 57570
// exit ;
57568: GO 57626
// un := tmp [ rand ( 1 , tmp ) ] ;
57570: LD_ADDR_VAR 0 2
57574: PUSH
57575: LD_VAR 0 3
57579: PUSH
57580: LD_INT 1
57582: PPUSH
57583: LD_VAR 0 3
57587: PPUSH
57588: CALL_OW 12
57592: ARRAY
57593: ST_TO_ADDR
// if Crawls ( un ) then
57594: LD_VAR 0 2
57598: PPUSH
57599: CALL_OW 318
57603: IFFALSE 57614
// ComWalk ( un ) ;
57605: LD_VAR 0 2
57609: PPUSH
57610: CALL_OW 138
// SetClass ( un , class_sniper ) ;
57614: LD_VAR 0 2
57618: PPUSH
57619: LD_INT 5
57621: PPUSH
57622: CALL_OW 336
// end ;
57626: PPOPN 3
57628: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
57629: LD_EXP 29
57633: PUSH
57634: LD_EXP 47
57638: AND
57639: PUSH
57640: LD_OWVAR 67
57644: PUSH
57645: LD_INT 4
57647: LESS
57648: AND
57649: IFFALSE 57668
57651: GO 57653
57653: DISABLE
// begin Difficulty := Difficulty + 1 ;
57654: LD_ADDR_OWVAR 67
57658: PUSH
57659: LD_OWVAR 67
57663: PUSH
57664: LD_INT 1
57666: PLUS
57667: ST_TO_ADDR
// end ;
57668: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
57669: LD_EXP 29
57673: PUSH
57674: LD_EXP 48
57678: AND
57679: IFFALSE 57782
57681: GO 57683
57683: DISABLE
57684: LD_INT 0
57686: PPUSH
// begin for i := 1 to 5 do
57687: LD_ADDR_VAR 0 1
57691: PUSH
57692: DOUBLE
57693: LD_INT 1
57695: DEC
57696: ST_TO_ADDR
57697: LD_INT 5
57699: PUSH
57700: FOR_TO
57701: IFFALSE 57780
// begin uc_nation := nation_nature ;
57703: LD_ADDR_OWVAR 21
57707: PUSH
57708: LD_INT 0
57710: ST_TO_ADDR
// uc_side := 0 ;
57711: LD_ADDR_OWVAR 20
57715: PUSH
57716: LD_INT 0
57718: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57719: LD_ADDR_OWVAR 29
57723: PUSH
57724: LD_INT 12
57726: PUSH
57727: LD_INT 12
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: ST_TO_ADDR
// hc_agressivity := 20 ;
57734: LD_ADDR_OWVAR 35
57738: PUSH
57739: LD_INT 20
57741: ST_TO_ADDR
// hc_class := class_tiger ;
57742: LD_ADDR_OWVAR 28
57746: PUSH
57747: LD_INT 14
57749: ST_TO_ADDR
// hc_gallery :=  ;
57750: LD_ADDR_OWVAR 33
57754: PUSH
57755: LD_STRING 
57757: ST_TO_ADDR
// hc_name :=  ;
57758: LD_ADDR_OWVAR 26
57762: PUSH
57763: LD_STRING 
57765: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
57766: CALL_OW 44
57770: PPUSH
57771: LD_INT 0
57773: PPUSH
57774: CALL_OW 51
// end ;
57778: GO 57700
57780: POP
57781: POP
// end ;
57782: PPOPN 1
57784: END
// every 0 0$1 trigger StreamModeActive and sBomb do
57785: LD_EXP 29
57789: PUSH
57790: LD_EXP 49
57794: AND
57795: IFFALSE 57804
57797: GO 57799
57799: DISABLE
// StreamSibBomb ;
57800: CALL 57805 0 0
57804: END
// export function StreamSibBomb ; var i , x , y ; begin
57805: LD_INT 0
57807: PPUSH
57808: PPUSH
57809: PPUSH
57810: PPUSH
// result := false ;
57811: LD_ADDR_VAR 0 1
57815: PUSH
57816: LD_INT 0
57818: ST_TO_ADDR
// for i := 1 to 16 do
57819: LD_ADDR_VAR 0 2
57823: PUSH
57824: DOUBLE
57825: LD_INT 1
57827: DEC
57828: ST_TO_ADDR
57829: LD_INT 16
57831: PUSH
57832: FOR_TO
57833: IFFALSE 58032
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57835: LD_ADDR_VAR 0 3
57839: PUSH
57840: LD_INT 10
57842: PUSH
57843: LD_INT 20
57845: PUSH
57846: LD_INT 30
57848: PUSH
57849: LD_INT 40
57851: PUSH
57852: LD_INT 50
57854: PUSH
57855: LD_INT 60
57857: PUSH
57858: LD_INT 70
57860: PUSH
57861: LD_INT 80
57863: PUSH
57864: LD_INT 90
57866: PUSH
57867: LD_INT 100
57869: PUSH
57870: LD_INT 110
57872: PUSH
57873: LD_INT 120
57875: PUSH
57876: LD_INT 130
57878: PUSH
57879: LD_INT 140
57881: PUSH
57882: LD_INT 150
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: PPUSH
57905: LD_INT 15
57907: PPUSH
57908: CALL_OW 12
57912: ARRAY
57913: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57914: LD_ADDR_VAR 0 4
57918: PUSH
57919: LD_INT 10
57921: PUSH
57922: LD_INT 20
57924: PUSH
57925: LD_INT 30
57927: PUSH
57928: LD_INT 40
57930: PUSH
57931: LD_INT 50
57933: PUSH
57934: LD_INT 60
57936: PUSH
57937: LD_INT 70
57939: PUSH
57940: LD_INT 80
57942: PUSH
57943: LD_INT 90
57945: PUSH
57946: LD_INT 100
57948: PUSH
57949: LD_INT 110
57951: PUSH
57952: LD_INT 120
57954: PUSH
57955: LD_INT 130
57957: PUSH
57958: LD_INT 140
57960: PUSH
57961: LD_INT 150
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: PPUSH
57984: LD_INT 15
57986: PPUSH
57987: CALL_OW 12
57991: ARRAY
57992: ST_TO_ADDR
// if ValidHex ( x , y ) then
57993: LD_VAR 0 3
57997: PPUSH
57998: LD_VAR 0 4
58002: PPUSH
58003: CALL_OW 488
58007: IFFALSE 58030
// begin result := [ x , y ] ;
58009: LD_ADDR_VAR 0 1
58013: PUSH
58014: LD_VAR 0 3
58018: PUSH
58019: LD_VAR 0 4
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: ST_TO_ADDR
// break ;
58028: GO 58032
// end ; end ;
58030: GO 57832
58032: POP
58033: POP
// if result then
58034: LD_VAR 0 1
58038: IFFALSE 58098
// begin ToLua ( playSibBomb() ) ;
58040: LD_STRING playSibBomb()
58042: PPUSH
58043: CALL_OW 559
// wait ( 0 0$14 ) ;
58047: LD_INT 490
58049: PPUSH
58050: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
58054: LD_VAR 0 1
58058: PUSH
58059: LD_INT 1
58061: ARRAY
58062: PPUSH
58063: LD_VAR 0 1
58067: PUSH
58068: LD_INT 2
58070: ARRAY
58071: PPUSH
58072: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
58076: LD_VAR 0 1
58080: PUSH
58081: LD_INT 1
58083: ARRAY
58084: PPUSH
58085: LD_VAR 0 1
58089: PUSH
58090: LD_INT 2
58092: ARRAY
58093: PPUSH
58094: CALL_OW 429
// end ; end ;
58098: LD_VAR 0 1
58102: RET
// every 0 0$1 trigger StreamModeActive and sReset do
58103: LD_EXP 29
58107: PUSH
58108: LD_EXP 51
58112: AND
58113: IFFALSE 58125
58115: GO 58117
58117: DISABLE
// YouLost (  ) ;
58118: LD_STRING 
58120: PPUSH
58121: CALL_OW 104
58125: END
// every 0 0$1 trigger StreamModeActive and sFog do
58126: LD_EXP 29
58130: PUSH
58131: LD_EXP 50
58135: AND
58136: IFFALSE 58150
58138: GO 58140
58140: DISABLE
// FogOff ( your_side ) ;
58141: LD_OWVAR 2
58145: PPUSH
58146: CALL_OW 344
58150: END
// every 0 0$1 trigger StreamModeActive and sSun do
58151: LD_EXP 29
58155: PUSH
58156: LD_EXP 52
58160: AND
58161: IFFALSE 58189
58163: GO 58165
58165: DISABLE
// begin solar_recharge_percent := 0 ;
58166: LD_ADDR_OWVAR 79
58170: PUSH
58171: LD_INT 0
58173: ST_TO_ADDR
// wait ( 5 5$00 ) ;
58174: LD_INT 10500
58176: PPUSH
58177: CALL_OW 67
// solar_recharge_percent := 100 ;
58181: LD_ADDR_OWVAR 79
58185: PUSH
58186: LD_INT 100
58188: ST_TO_ADDR
// end ;
58189: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
58190: LD_EXP 29
58194: PUSH
58195: LD_EXP 53
58199: AND
58200: IFFALSE 58439
58202: GO 58204
58204: DISABLE
58205: LD_INT 0
58207: PPUSH
58208: PPUSH
58209: PPUSH
// begin tmp := [ ] ;
58210: LD_ADDR_VAR 0 3
58214: PUSH
58215: EMPTY
58216: ST_TO_ADDR
// for i := 1 to 6 do
58217: LD_ADDR_VAR 0 1
58221: PUSH
58222: DOUBLE
58223: LD_INT 1
58225: DEC
58226: ST_TO_ADDR
58227: LD_INT 6
58229: PUSH
58230: FOR_TO
58231: IFFALSE 58336
// begin uc_nation := nation_nature ;
58233: LD_ADDR_OWVAR 21
58237: PUSH
58238: LD_INT 0
58240: ST_TO_ADDR
// uc_side := 0 ;
58241: LD_ADDR_OWVAR 20
58245: PUSH
58246: LD_INT 0
58248: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58249: LD_ADDR_OWVAR 29
58253: PUSH
58254: LD_INT 12
58256: PUSH
58257: LD_INT 12
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: ST_TO_ADDR
// hc_agressivity := 20 ;
58264: LD_ADDR_OWVAR 35
58268: PUSH
58269: LD_INT 20
58271: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
58272: LD_ADDR_OWVAR 28
58276: PUSH
58277: LD_INT 17
58279: ST_TO_ADDR
// hc_gallery :=  ;
58280: LD_ADDR_OWVAR 33
58284: PUSH
58285: LD_STRING 
58287: ST_TO_ADDR
// hc_name :=  ;
58288: LD_ADDR_OWVAR 26
58292: PUSH
58293: LD_STRING 
58295: ST_TO_ADDR
// un := CreateHuman ;
58296: LD_ADDR_VAR 0 2
58300: PUSH
58301: CALL_OW 44
58305: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
58306: LD_VAR 0 2
58310: PPUSH
58311: LD_INT 1
58313: PPUSH
58314: CALL_OW 51
// tmp := tmp ^ un ;
58318: LD_ADDR_VAR 0 3
58322: PUSH
58323: LD_VAR 0 3
58327: PUSH
58328: LD_VAR 0 2
58332: ADD
58333: ST_TO_ADDR
// end ;
58334: GO 58230
58336: POP
58337: POP
// repeat wait ( 0 0$1 ) ;
58338: LD_INT 35
58340: PPUSH
58341: CALL_OW 67
// for un in tmp do
58345: LD_ADDR_VAR 0 2
58349: PUSH
58350: LD_VAR 0 3
58354: PUSH
58355: FOR_IN
58356: IFFALSE 58430
// begin if IsDead ( un ) then
58358: LD_VAR 0 2
58362: PPUSH
58363: CALL_OW 301
58367: IFFALSE 58387
// begin tmp := tmp diff un ;
58369: LD_ADDR_VAR 0 3
58373: PUSH
58374: LD_VAR 0 3
58378: PUSH
58379: LD_VAR 0 2
58383: DIFF
58384: ST_TO_ADDR
// continue ;
58385: GO 58355
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
58387: LD_VAR 0 2
58391: PPUSH
58392: LD_INT 3
58394: PUSH
58395: LD_INT 22
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PPUSH
58409: CALL_OW 69
58413: PPUSH
58414: LD_VAR 0 2
58418: PPUSH
58419: CALL_OW 74
58423: PPUSH
58424: CALL_OW 115
// end ;
58428: GO 58355
58430: POP
58431: POP
// until not tmp ;
58432: LD_VAR 0 3
58436: NOT
58437: IFFALSE 58338
// end ;
58439: PPOPN 3
58441: END
// every 0 0$1 trigger StreamModeActive and sTroll do
58442: LD_EXP 29
58446: PUSH
58447: LD_EXP 54
58451: AND
58452: IFFALSE 58506
58454: GO 58456
58456: DISABLE
// begin ToLua ( displayTroll(); ) ;
58457: LD_STRING displayTroll();
58459: PPUSH
58460: CALL_OW 559
// wait ( 3 3$00 ) ;
58464: LD_INT 6300
58466: PPUSH
58467: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58471: LD_STRING hideTroll();
58473: PPUSH
58474: CALL_OW 559
// wait ( 1 1$00 ) ;
58478: LD_INT 2100
58480: PPUSH
58481: CALL_OW 67
// ToLua ( displayTroll(); ) ;
58485: LD_STRING displayTroll();
58487: PPUSH
58488: CALL_OW 559
// wait ( 1 1$00 ) ;
58492: LD_INT 2100
58494: PPUSH
58495: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58499: LD_STRING hideTroll();
58501: PPUSH
58502: CALL_OW 559
// end ;
58506: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
58507: LD_EXP 29
58511: PUSH
58512: LD_EXP 55
58516: AND
58517: IFFALSE 58580
58519: GO 58521
58521: DISABLE
58522: LD_INT 0
58524: PPUSH
// begin p := 0 ;
58525: LD_ADDR_VAR 0 1
58529: PUSH
58530: LD_INT 0
58532: ST_TO_ADDR
// repeat game_speed := 1 ;
58533: LD_ADDR_OWVAR 65
58537: PUSH
58538: LD_INT 1
58540: ST_TO_ADDR
// wait ( 0 0$1 ) ;
58541: LD_INT 35
58543: PPUSH
58544: CALL_OW 67
// p := p + 1 ;
58548: LD_ADDR_VAR 0 1
58552: PUSH
58553: LD_VAR 0 1
58557: PUSH
58558: LD_INT 1
58560: PLUS
58561: ST_TO_ADDR
// until p >= 60 ;
58562: LD_VAR 0 1
58566: PUSH
58567: LD_INT 60
58569: GREATEREQUAL
58570: IFFALSE 58533
// game_speed := 4 ;
58572: LD_ADDR_OWVAR 65
58576: PUSH
58577: LD_INT 4
58579: ST_TO_ADDR
// end ;
58580: PPOPN 1
58582: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
58583: LD_EXP 29
58587: PUSH
58588: LD_EXP 56
58592: AND
58593: IFFALSE 58739
58595: GO 58597
58597: DISABLE
58598: LD_INT 0
58600: PPUSH
58601: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58602: LD_ADDR_VAR 0 1
58606: PUSH
58607: LD_INT 22
58609: PUSH
58610: LD_OWVAR 2
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: LD_INT 30
58624: PUSH
58625: LD_INT 0
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 30
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: LIST
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PPUSH
58651: CALL_OW 69
58655: ST_TO_ADDR
// if not depot then
58656: LD_VAR 0 1
58660: NOT
58661: IFFALSE 58665
// exit ;
58663: GO 58739
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
58665: LD_ADDR_VAR 0 2
58669: PUSH
58670: LD_VAR 0 1
58674: PUSH
58675: LD_INT 1
58677: PPUSH
58678: LD_VAR 0 1
58682: PPUSH
58683: CALL_OW 12
58687: ARRAY
58688: PPUSH
58689: CALL_OW 274
58693: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
58694: LD_VAR 0 2
58698: PPUSH
58699: LD_INT 1
58701: PPUSH
58702: LD_INT 0
58704: PPUSH
58705: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
58709: LD_VAR 0 2
58713: PPUSH
58714: LD_INT 2
58716: PPUSH
58717: LD_INT 0
58719: PPUSH
58720: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
58724: LD_VAR 0 2
58728: PPUSH
58729: LD_INT 3
58731: PPUSH
58732: LD_INT 0
58734: PPUSH
58735: CALL_OW 277
// end ;
58739: PPOPN 2
58741: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
58742: LD_EXP 29
58746: PUSH
58747: LD_EXP 57
58751: AND
58752: IFFALSE 58849
58754: GO 58756
58756: DISABLE
58757: LD_INT 0
58759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58760: LD_ADDR_VAR 0 1
58764: PUSH
58765: LD_INT 22
58767: PUSH
58768: LD_OWVAR 2
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 21
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 3
58789: PUSH
58790: LD_INT 23
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: LIST
58808: PPUSH
58809: CALL_OW 69
58813: ST_TO_ADDR
// if not tmp then
58814: LD_VAR 0 1
58818: NOT
58819: IFFALSE 58823
// exit ;
58821: GO 58849
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
58823: LD_VAR 0 1
58827: PUSH
58828: LD_INT 1
58830: PPUSH
58831: LD_VAR 0 1
58835: PPUSH
58836: CALL_OW 12
58840: ARRAY
58841: PPUSH
58842: LD_INT 200
58844: PPUSH
58845: CALL_OW 234
// end ;
58849: PPOPN 1
58851: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
58852: LD_EXP 29
58856: PUSH
58857: LD_EXP 58
58861: AND
58862: IFFALSE 58941
58864: GO 58866
58866: DISABLE
58867: LD_INT 0
58869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
58870: LD_ADDR_VAR 0 1
58874: PUSH
58875: LD_INT 22
58877: PUSH
58878: LD_OWVAR 2
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 21
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PPUSH
58901: CALL_OW 69
58905: ST_TO_ADDR
// if not tmp then
58906: LD_VAR 0 1
58910: NOT
58911: IFFALSE 58915
// exit ;
58913: GO 58941
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
58915: LD_VAR 0 1
58919: PUSH
58920: LD_INT 1
58922: PPUSH
58923: LD_VAR 0 1
58927: PPUSH
58928: CALL_OW 12
58932: ARRAY
58933: PPUSH
58934: LD_INT 60
58936: PPUSH
58937: CALL_OW 234
// end ;
58941: PPOPN 1
58943: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
58944: LD_EXP 29
58948: PUSH
58949: LD_EXP 59
58953: AND
58954: IFFALSE 59053
58956: GO 58958
58958: DISABLE
58959: LD_INT 0
58961: PPUSH
58962: PPUSH
// begin enable ;
58963: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
58964: LD_ADDR_VAR 0 1
58968: PUSH
58969: LD_INT 22
58971: PUSH
58972: LD_OWVAR 2
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 61
58983: PUSH
58984: EMPTY
58985: LIST
58986: PUSH
58987: LD_INT 33
58989: PUSH
58990: LD_INT 2
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: LIST
59001: PPUSH
59002: CALL_OW 69
59006: ST_TO_ADDR
// if not tmp then
59007: LD_VAR 0 1
59011: NOT
59012: IFFALSE 59016
// exit ;
59014: GO 59053
// for i in tmp do
59016: LD_ADDR_VAR 0 2
59020: PUSH
59021: LD_VAR 0 1
59025: PUSH
59026: FOR_IN
59027: IFFALSE 59051
// if IsControledBy ( i ) then
59029: LD_VAR 0 2
59033: PPUSH
59034: CALL_OW 312
59038: IFFALSE 59049
// ComUnlink ( i ) ;
59040: LD_VAR 0 2
59044: PPUSH
59045: CALL_OW 136
59049: GO 59026
59051: POP
59052: POP
// end ;
59053: PPOPN 2
59055: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
59056: LD_EXP 29
59060: PUSH
59061: LD_EXP 60
59065: AND
59066: IFFALSE 59206
59068: GO 59070
59070: DISABLE
59071: LD_INT 0
59073: PPUSH
59074: PPUSH
// begin ToLua ( displayPowell(); ) ;
59075: LD_STRING displayPowell();
59077: PPUSH
59078: CALL_OW 559
// uc_side := 0 ;
59082: LD_ADDR_OWVAR 20
59086: PUSH
59087: LD_INT 0
59089: ST_TO_ADDR
// uc_nation := 2 ;
59090: LD_ADDR_OWVAR 21
59094: PUSH
59095: LD_INT 2
59097: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
59098: LD_ADDR_OWVAR 37
59102: PUSH
59103: LD_INT 14
59105: ST_TO_ADDR
// vc_engine := engine_siberite ;
59106: LD_ADDR_OWVAR 39
59110: PUSH
59111: LD_INT 3
59113: ST_TO_ADDR
// vc_control := control_apeman ;
59114: LD_ADDR_OWVAR 38
59118: PUSH
59119: LD_INT 5
59121: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
59122: LD_ADDR_OWVAR 40
59126: PUSH
59127: LD_INT 29
59129: ST_TO_ADDR
// un := CreateVehicle ;
59130: LD_ADDR_VAR 0 2
59134: PUSH
59135: CALL_OW 45
59139: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59140: LD_VAR 0 2
59144: PPUSH
59145: LD_INT 1
59147: PPUSH
59148: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59152: LD_INT 35
59154: PPUSH
59155: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59159: LD_VAR 0 2
59163: PPUSH
59164: LD_INT 22
59166: PUSH
59167: LD_OWVAR 2
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PPUSH
59176: CALL_OW 69
59180: PPUSH
59181: LD_VAR 0 2
59185: PPUSH
59186: CALL_OW 74
59190: PPUSH
59191: CALL_OW 115
// until IsDead ( un ) ;
59195: LD_VAR 0 2
59199: PPUSH
59200: CALL_OW 301
59204: IFFALSE 59152
// end ;
59206: PPOPN 2
59208: END
// every 0 0$1 trigger StreamModeActive and sStu do
59209: LD_EXP 29
59213: PUSH
59214: LD_EXP 68
59218: AND
59219: IFFALSE 59235
59221: GO 59223
59223: DISABLE
// begin ToLua ( displayStucuk(); ) ;
59224: LD_STRING displayStucuk();
59226: PPUSH
59227: CALL_OW 559
// ResetFog ;
59231: CALL_OW 335
// end ;
59235: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
59236: LD_EXP 29
59240: PUSH
59241: LD_EXP 61
59245: AND
59246: IFFALSE 59387
59248: GO 59250
59250: DISABLE
59251: LD_INT 0
59253: PPUSH
59254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59255: LD_ADDR_VAR 0 2
59259: PUSH
59260: LD_INT 22
59262: PUSH
59263: LD_OWVAR 2
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 21
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PPUSH
59286: CALL_OW 69
59290: ST_TO_ADDR
// if not tmp then
59291: LD_VAR 0 2
59295: NOT
59296: IFFALSE 59300
// exit ;
59298: GO 59387
// un := tmp [ rand ( 1 , tmp ) ] ;
59300: LD_ADDR_VAR 0 1
59304: PUSH
59305: LD_VAR 0 2
59309: PUSH
59310: LD_INT 1
59312: PPUSH
59313: LD_VAR 0 2
59317: PPUSH
59318: CALL_OW 12
59322: ARRAY
59323: ST_TO_ADDR
// SetSide ( un , 0 ) ;
59324: LD_VAR 0 1
59328: PPUSH
59329: LD_INT 0
59331: PPUSH
59332: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
59336: LD_VAR 0 1
59340: PPUSH
59341: LD_OWVAR 3
59345: PUSH
59346: LD_VAR 0 1
59350: DIFF
59351: PPUSH
59352: LD_VAR 0 1
59356: PPUSH
59357: CALL_OW 74
59361: PPUSH
59362: CALL_OW 115
// wait ( 0 0$20 ) ;
59366: LD_INT 700
59368: PPUSH
59369: CALL_OW 67
// SetSide ( un , your_side ) ;
59373: LD_VAR 0 1
59377: PPUSH
59378: LD_OWVAR 2
59382: PPUSH
59383: CALL_OW 235
// end ;
59387: PPOPN 2
59389: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
59390: LD_EXP 29
59394: PUSH
59395: LD_EXP 62
59399: AND
59400: IFFALSE 59506
59402: GO 59404
59404: DISABLE
59405: LD_INT 0
59407: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59408: LD_ADDR_VAR 0 1
59412: PUSH
59413: LD_INT 22
59415: PUSH
59416: LD_OWVAR 2
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: LD_INT 30
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 30
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: LIST
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PPUSH
59457: CALL_OW 69
59461: ST_TO_ADDR
// if not depot then
59462: LD_VAR 0 1
59466: NOT
59467: IFFALSE 59471
// exit ;
59469: GO 59506
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
59471: LD_VAR 0 1
59475: PUSH
59476: LD_INT 1
59478: ARRAY
59479: PPUSH
59480: CALL_OW 250
59484: PPUSH
59485: LD_VAR 0 1
59489: PUSH
59490: LD_INT 1
59492: ARRAY
59493: PPUSH
59494: CALL_OW 251
59498: PPUSH
59499: LD_INT 70
59501: PPUSH
59502: CALL_OW 495
// end ;
59506: PPOPN 1
59508: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
59509: LD_EXP 29
59513: PUSH
59514: LD_EXP 63
59518: AND
59519: IFFALSE 59730
59521: GO 59523
59523: DISABLE
59524: LD_INT 0
59526: PPUSH
59527: PPUSH
59528: PPUSH
59529: PPUSH
59530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59531: LD_ADDR_VAR 0 5
59535: PUSH
59536: LD_INT 22
59538: PUSH
59539: LD_OWVAR 2
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 21
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PPUSH
59562: CALL_OW 69
59566: ST_TO_ADDR
// if not tmp then
59567: LD_VAR 0 5
59571: NOT
59572: IFFALSE 59576
// exit ;
59574: GO 59730
// for i in tmp do
59576: LD_ADDR_VAR 0 1
59580: PUSH
59581: LD_VAR 0 5
59585: PUSH
59586: FOR_IN
59587: IFFALSE 59728
// begin d := rand ( 0 , 5 ) ;
59589: LD_ADDR_VAR 0 4
59593: PUSH
59594: LD_INT 0
59596: PPUSH
59597: LD_INT 5
59599: PPUSH
59600: CALL_OW 12
59604: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
59605: LD_ADDR_VAR 0 2
59609: PUSH
59610: LD_VAR 0 1
59614: PPUSH
59615: CALL_OW 250
59619: PPUSH
59620: LD_VAR 0 4
59624: PPUSH
59625: LD_INT 3
59627: PPUSH
59628: LD_INT 12
59630: PPUSH
59631: CALL_OW 12
59635: PPUSH
59636: CALL_OW 272
59640: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
59641: LD_ADDR_VAR 0 3
59645: PUSH
59646: LD_VAR 0 1
59650: PPUSH
59651: CALL_OW 251
59655: PPUSH
59656: LD_VAR 0 4
59660: PPUSH
59661: LD_INT 3
59663: PPUSH
59664: LD_INT 12
59666: PPUSH
59667: CALL_OW 12
59671: PPUSH
59672: CALL_OW 273
59676: ST_TO_ADDR
// if ValidHex ( x , y ) then
59677: LD_VAR 0 2
59681: PPUSH
59682: LD_VAR 0 3
59686: PPUSH
59687: CALL_OW 488
59691: IFFALSE 59726
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
59693: LD_VAR 0 1
59697: PPUSH
59698: LD_VAR 0 2
59702: PPUSH
59703: LD_VAR 0 3
59707: PPUSH
59708: LD_INT 3
59710: PPUSH
59711: LD_INT 6
59713: PPUSH
59714: CALL_OW 12
59718: PPUSH
59719: LD_INT 1
59721: PPUSH
59722: CALL_OW 483
// end ;
59726: GO 59586
59728: POP
59729: POP
// end ;
59730: PPOPN 5
59732: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
59733: LD_EXP 29
59737: PUSH
59738: LD_EXP 64
59742: AND
59743: IFFALSE 59837
59745: GO 59747
59747: DISABLE
59748: LD_INT 0
59750: PPUSH
59751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
59752: LD_ADDR_VAR 0 2
59756: PUSH
59757: LD_INT 22
59759: PUSH
59760: LD_OWVAR 2
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 32
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 21
59781: PUSH
59782: LD_INT 2
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: LIST
59793: PPUSH
59794: CALL_OW 69
59798: ST_TO_ADDR
// if not tmp then
59799: LD_VAR 0 2
59803: NOT
59804: IFFALSE 59808
// exit ;
59806: GO 59837
// for i in tmp do
59808: LD_ADDR_VAR 0 1
59812: PUSH
59813: LD_VAR 0 2
59817: PUSH
59818: FOR_IN
59819: IFFALSE 59835
// SetFuel ( i , 0 ) ;
59821: LD_VAR 0 1
59825: PPUSH
59826: LD_INT 0
59828: PPUSH
59829: CALL_OW 240
59833: GO 59818
59835: POP
59836: POP
// end ;
59837: PPOPN 2
59839: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
59840: LD_EXP 29
59844: PUSH
59845: LD_EXP 65
59849: AND
59850: IFFALSE 59916
59852: GO 59854
59854: DISABLE
59855: LD_INT 0
59857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59858: LD_ADDR_VAR 0 1
59862: PUSH
59863: LD_INT 22
59865: PUSH
59866: LD_OWVAR 2
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 30
59877: PUSH
59878: LD_INT 29
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PPUSH
59889: CALL_OW 69
59893: ST_TO_ADDR
// if not tmp then
59894: LD_VAR 0 1
59898: NOT
59899: IFFALSE 59903
// exit ;
59901: GO 59916
// DestroyUnit ( tmp [ 1 ] ) ;
59903: LD_VAR 0 1
59907: PUSH
59908: LD_INT 1
59910: ARRAY
59911: PPUSH
59912: CALL_OW 65
// end ;
59916: PPOPN 1
59918: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
59919: LD_EXP 29
59923: PUSH
59924: LD_EXP 67
59928: AND
59929: IFFALSE 60058
59931: GO 59933
59933: DISABLE
59934: LD_INT 0
59936: PPUSH
// begin uc_side := 0 ;
59937: LD_ADDR_OWVAR 20
59941: PUSH
59942: LD_INT 0
59944: ST_TO_ADDR
// uc_nation := nation_arabian ;
59945: LD_ADDR_OWVAR 21
59949: PUSH
59950: LD_INT 2
59952: ST_TO_ADDR
// hc_gallery :=  ;
59953: LD_ADDR_OWVAR 33
59957: PUSH
59958: LD_STRING 
59960: ST_TO_ADDR
// hc_name :=  ;
59961: LD_ADDR_OWVAR 26
59965: PUSH
59966: LD_STRING 
59968: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
59969: LD_INT 1
59971: PPUSH
59972: LD_INT 11
59974: PPUSH
59975: LD_INT 10
59977: PPUSH
59978: CALL_OW 380
// un := CreateHuman ;
59982: LD_ADDR_VAR 0 1
59986: PUSH
59987: CALL_OW 44
59991: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59992: LD_VAR 0 1
59996: PPUSH
59997: LD_INT 1
59999: PPUSH
60000: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60004: LD_INT 35
60006: PPUSH
60007: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60011: LD_VAR 0 1
60015: PPUSH
60016: LD_INT 22
60018: PUSH
60019: LD_OWVAR 2
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PPUSH
60028: CALL_OW 69
60032: PPUSH
60033: LD_VAR 0 1
60037: PPUSH
60038: CALL_OW 74
60042: PPUSH
60043: CALL_OW 115
// until IsDead ( un ) ;
60047: LD_VAR 0 1
60051: PPUSH
60052: CALL_OW 301
60056: IFFALSE 60004
// end ;
60058: PPOPN 1
60060: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
60061: LD_EXP 29
60065: PUSH
60066: LD_EXP 69
60070: AND
60071: IFFALSE 60083
60073: GO 60075
60075: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
60076: LD_STRING earthquake(getX(game), 0, 32)
60078: PPUSH
60079: CALL_OW 559
60083: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
60084: LD_EXP 29
60088: PUSH
60089: LD_EXP 70
60093: AND
60094: IFFALSE 60185
60096: GO 60098
60098: DISABLE
60099: LD_INT 0
60101: PPUSH
// begin enable ;
60102: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
60103: LD_ADDR_VAR 0 1
60107: PUSH
60108: LD_INT 22
60110: PUSH
60111: LD_OWVAR 2
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 21
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 33
60132: PUSH
60133: LD_INT 3
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: LIST
60144: PPUSH
60145: CALL_OW 69
60149: ST_TO_ADDR
// if not tmp then
60150: LD_VAR 0 1
60154: NOT
60155: IFFALSE 60159
// exit ;
60157: GO 60185
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60159: LD_VAR 0 1
60163: PUSH
60164: LD_INT 1
60166: PPUSH
60167: LD_VAR 0 1
60171: PPUSH
60172: CALL_OW 12
60176: ARRAY
60177: PPUSH
60178: LD_INT 1
60180: PPUSH
60181: CALL_OW 234
// end ;
60185: PPOPN 1
60187: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
60188: LD_EXP 29
60192: PUSH
60193: LD_EXP 71
60197: AND
60198: IFFALSE 60339
60200: GO 60202
60202: DISABLE
60203: LD_INT 0
60205: PPUSH
60206: PPUSH
60207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60208: LD_ADDR_VAR 0 3
60212: PUSH
60213: LD_INT 22
60215: PUSH
60216: LD_OWVAR 2
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 25
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PPUSH
60239: CALL_OW 69
60243: ST_TO_ADDR
// if not tmp then
60244: LD_VAR 0 3
60248: NOT
60249: IFFALSE 60253
// exit ;
60251: GO 60339
// un := tmp [ rand ( 1 , tmp ) ] ;
60253: LD_ADDR_VAR 0 2
60257: PUSH
60258: LD_VAR 0 3
60262: PUSH
60263: LD_INT 1
60265: PPUSH
60266: LD_VAR 0 3
60270: PPUSH
60271: CALL_OW 12
60275: ARRAY
60276: ST_TO_ADDR
// if Crawls ( un ) then
60277: LD_VAR 0 2
60281: PPUSH
60282: CALL_OW 318
60286: IFFALSE 60297
// ComWalk ( un ) ;
60288: LD_VAR 0 2
60292: PPUSH
60293: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
60297: LD_VAR 0 2
60301: PPUSH
60302: LD_INT 9
60304: PPUSH
60305: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
60309: LD_INT 28
60311: PPUSH
60312: LD_OWVAR 2
60316: PPUSH
60317: LD_INT 2
60319: PPUSH
60320: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
60324: LD_INT 29
60326: PPUSH
60327: LD_OWVAR 2
60331: PPUSH
60332: LD_INT 2
60334: PPUSH
60335: CALL_OW 322
// end ;
60339: PPOPN 3
60341: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
60342: LD_EXP 29
60346: PUSH
60347: LD_EXP 72
60351: AND
60352: IFFALSE 60463
60354: GO 60356
60356: DISABLE
60357: LD_INT 0
60359: PPUSH
60360: PPUSH
60361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60362: LD_ADDR_VAR 0 3
60366: PUSH
60367: LD_INT 22
60369: PUSH
60370: LD_OWVAR 2
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 25
60381: PUSH
60382: LD_INT 1
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PPUSH
60393: CALL_OW 69
60397: ST_TO_ADDR
// if not tmp then
60398: LD_VAR 0 3
60402: NOT
60403: IFFALSE 60407
// exit ;
60405: GO 60463
// un := tmp [ rand ( 1 , tmp ) ] ;
60407: LD_ADDR_VAR 0 2
60411: PUSH
60412: LD_VAR 0 3
60416: PUSH
60417: LD_INT 1
60419: PPUSH
60420: LD_VAR 0 3
60424: PPUSH
60425: CALL_OW 12
60429: ARRAY
60430: ST_TO_ADDR
// if Crawls ( un ) then
60431: LD_VAR 0 2
60435: PPUSH
60436: CALL_OW 318
60440: IFFALSE 60451
// ComWalk ( un ) ;
60442: LD_VAR 0 2
60446: PPUSH
60447: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60451: LD_VAR 0 2
60455: PPUSH
60456: LD_INT 8
60458: PPUSH
60459: CALL_OW 336
// end ;
60463: PPOPN 3
60465: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
60466: LD_EXP 29
60470: PUSH
60471: LD_EXP 73
60475: AND
60476: IFFALSE 60620
60478: GO 60480
60480: DISABLE
60481: LD_INT 0
60483: PPUSH
60484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
60485: LD_ADDR_VAR 0 2
60489: PUSH
60490: LD_INT 22
60492: PUSH
60493: LD_OWVAR 2
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 21
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: LD_INT 34
60517: PUSH
60518: LD_INT 12
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 34
60527: PUSH
60528: LD_INT 51
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 34
60537: PUSH
60538: LD_INT 32
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: LIST
60555: PPUSH
60556: CALL_OW 69
60560: ST_TO_ADDR
// if not tmp then
60561: LD_VAR 0 2
60565: NOT
60566: IFFALSE 60570
// exit ;
60568: GO 60620
// for i in tmp do
60570: LD_ADDR_VAR 0 1
60574: PUSH
60575: LD_VAR 0 2
60579: PUSH
60580: FOR_IN
60581: IFFALSE 60618
// if GetCargo ( i , mat_artifact ) = 0 then
60583: LD_VAR 0 1
60587: PPUSH
60588: LD_INT 4
60590: PPUSH
60591: CALL_OW 289
60595: PUSH
60596: LD_INT 0
60598: EQUAL
60599: IFFALSE 60616
// SetCargo ( i , mat_siberit , 100 ) ;
60601: LD_VAR 0 1
60605: PPUSH
60606: LD_INT 3
60608: PPUSH
60609: LD_INT 100
60611: PPUSH
60612: CALL_OW 290
60616: GO 60580
60618: POP
60619: POP
// end ;
60620: PPOPN 2
60622: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
60623: LD_EXP 29
60627: PUSH
60628: LD_EXP 74
60632: AND
60633: IFFALSE 60816
60635: GO 60637
60637: DISABLE
60638: LD_INT 0
60640: PPUSH
60641: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60642: LD_ADDR_VAR 0 2
60646: PUSH
60647: LD_INT 22
60649: PUSH
60650: LD_OWVAR 2
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PPUSH
60659: CALL_OW 69
60663: ST_TO_ADDR
// if not tmp then
60664: LD_VAR 0 2
60668: NOT
60669: IFFALSE 60673
// exit ;
60671: GO 60816
// for i := 1 to 2 do
60673: LD_ADDR_VAR 0 1
60677: PUSH
60678: DOUBLE
60679: LD_INT 1
60681: DEC
60682: ST_TO_ADDR
60683: LD_INT 2
60685: PUSH
60686: FOR_TO
60687: IFFALSE 60814
// begin uc_side := your_side ;
60689: LD_ADDR_OWVAR 20
60693: PUSH
60694: LD_OWVAR 2
60698: ST_TO_ADDR
// uc_nation := nation_american ;
60699: LD_ADDR_OWVAR 21
60703: PUSH
60704: LD_INT 1
60706: ST_TO_ADDR
// vc_chassis := us_morphling ;
60707: LD_ADDR_OWVAR 37
60711: PUSH
60712: LD_INT 5
60714: ST_TO_ADDR
// vc_engine := engine_siberite ;
60715: LD_ADDR_OWVAR 39
60719: PUSH
60720: LD_INT 3
60722: ST_TO_ADDR
// vc_control := control_computer ;
60723: LD_ADDR_OWVAR 38
60727: PUSH
60728: LD_INT 3
60730: ST_TO_ADDR
// vc_weapon := us_double_laser ;
60731: LD_ADDR_OWVAR 40
60735: PUSH
60736: LD_INT 10
60738: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
60739: LD_VAR 0 2
60743: PUSH
60744: LD_INT 1
60746: ARRAY
60747: PPUSH
60748: CALL_OW 310
60752: NOT
60753: IFFALSE 60800
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
60755: CALL_OW 45
60759: PPUSH
60760: LD_VAR 0 2
60764: PUSH
60765: LD_INT 1
60767: ARRAY
60768: PPUSH
60769: CALL_OW 250
60773: PPUSH
60774: LD_VAR 0 2
60778: PUSH
60779: LD_INT 1
60781: ARRAY
60782: PPUSH
60783: CALL_OW 251
60787: PPUSH
60788: LD_INT 12
60790: PPUSH
60791: LD_INT 1
60793: PPUSH
60794: CALL_OW 50
60798: GO 60812
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
60800: CALL_OW 45
60804: PPUSH
60805: LD_INT 1
60807: PPUSH
60808: CALL_OW 51
// end ;
60812: GO 60686
60814: POP
60815: POP
// end ;
60816: PPOPN 2
60818: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
60819: LD_EXP 29
60823: PUSH
60824: LD_EXP 75
60828: AND
60829: IFFALSE 61051
60831: GO 60833
60833: DISABLE
60834: LD_INT 0
60836: PPUSH
60837: PPUSH
60838: PPUSH
60839: PPUSH
60840: PPUSH
60841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60842: LD_ADDR_VAR 0 6
60846: PUSH
60847: LD_INT 22
60849: PUSH
60850: LD_OWVAR 2
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 21
60861: PUSH
60862: LD_INT 1
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 3
60871: PUSH
60872: LD_INT 23
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: LIST
60890: PPUSH
60891: CALL_OW 69
60895: ST_TO_ADDR
// if not tmp then
60896: LD_VAR 0 6
60900: NOT
60901: IFFALSE 60905
// exit ;
60903: GO 61051
// s1 := rand ( 1 , 4 ) ;
60905: LD_ADDR_VAR 0 2
60909: PUSH
60910: LD_INT 1
60912: PPUSH
60913: LD_INT 4
60915: PPUSH
60916: CALL_OW 12
60920: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
60921: LD_ADDR_VAR 0 4
60925: PUSH
60926: LD_VAR 0 6
60930: PUSH
60931: LD_INT 1
60933: ARRAY
60934: PPUSH
60935: LD_VAR 0 2
60939: PPUSH
60940: CALL_OW 259
60944: ST_TO_ADDR
// if s1 = 1 then
60945: LD_VAR 0 2
60949: PUSH
60950: LD_INT 1
60952: EQUAL
60953: IFFALSE 60973
// s2 := rand ( 2 , 4 ) else
60955: LD_ADDR_VAR 0 3
60959: PUSH
60960: LD_INT 2
60962: PPUSH
60963: LD_INT 4
60965: PPUSH
60966: CALL_OW 12
60970: ST_TO_ADDR
60971: GO 60981
// s2 := 1 ;
60973: LD_ADDR_VAR 0 3
60977: PUSH
60978: LD_INT 1
60980: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
60981: LD_ADDR_VAR 0 5
60985: PUSH
60986: LD_VAR 0 6
60990: PUSH
60991: LD_INT 1
60993: ARRAY
60994: PPUSH
60995: LD_VAR 0 3
60999: PPUSH
61000: CALL_OW 259
61004: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61005: LD_VAR 0 6
61009: PUSH
61010: LD_INT 1
61012: ARRAY
61013: PPUSH
61014: LD_VAR 0 2
61018: PPUSH
61019: LD_VAR 0 5
61023: PPUSH
61024: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
61028: LD_VAR 0 6
61032: PUSH
61033: LD_INT 1
61035: ARRAY
61036: PPUSH
61037: LD_VAR 0 3
61041: PPUSH
61042: LD_VAR 0 4
61046: PPUSH
61047: CALL_OW 237
// end ;
61051: PPOPN 6
61053: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
61054: LD_EXP 29
61058: PUSH
61059: LD_EXP 76
61063: AND
61064: IFFALSE 61143
61066: GO 61068
61068: DISABLE
61069: LD_INT 0
61071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
61072: LD_ADDR_VAR 0 1
61076: PUSH
61077: LD_INT 22
61079: PUSH
61080: LD_OWVAR 2
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 30
61091: PUSH
61092: LD_INT 3
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PPUSH
61103: CALL_OW 69
61107: ST_TO_ADDR
// if not tmp then
61108: LD_VAR 0 1
61112: NOT
61113: IFFALSE 61117
// exit ;
61115: GO 61143
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61117: LD_VAR 0 1
61121: PUSH
61122: LD_INT 1
61124: PPUSH
61125: LD_VAR 0 1
61129: PPUSH
61130: CALL_OW 12
61134: ARRAY
61135: PPUSH
61136: LD_INT 1
61138: PPUSH
61139: CALL_OW 234
// end ;
61143: PPOPN 1
61145: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
61146: LD_EXP 29
61150: PUSH
61151: LD_EXP 77
61155: AND
61156: IFFALSE 61268
61158: GO 61160
61160: DISABLE
61161: LD_INT 0
61163: PPUSH
61164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
61165: LD_ADDR_VAR 0 2
61169: PUSH
61170: LD_INT 22
61172: PUSH
61173: LD_OWVAR 2
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: PUSH
61185: LD_INT 30
61187: PUSH
61188: LD_INT 27
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 30
61197: PUSH
61198: LD_INT 26
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 30
61207: PUSH
61208: LD_INT 28
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PPUSH
61225: CALL_OW 69
61229: ST_TO_ADDR
// if not tmp then
61230: LD_VAR 0 2
61234: NOT
61235: IFFALSE 61239
// exit ;
61237: GO 61268
// for i in tmp do
61239: LD_ADDR_VAR 0 1
61243: PUSH
61244: LD_VAR 0 2
61248: PUSH
61249: FOR_IN
61250: IFFALSE 61266
// SetLives ( i , 1 ) ;
61252: LD_VAR 0 1
61256: PPUSH
61257: LD_INT 1
61259: PPUSH
61260: CALL_OW 234
61264: GO 61249
61266: POP
61267: POP
// end ;
61268: PPOPN 2
61270: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
61271: LD_EXP 29
61275: PUSH
61276: LD_EXP 78
61280: AND
61281: IFFALSE 61568
61283: GO 61285
61285: DISABLE
61286: LD_INT 0
61288: PPUSH
61289: PPUSH
61290: PPUSH
// begin i := rand ( 1 , 7 ) ;
61291: LD_ADDR_VAR 0 1
61295: PUSH
61296: LD_INT 1
61298: PPUSH
61299: LD_INT 7
61301: PPUSH
61302: CALL_OW 12
61306: ST_TO_ADDR
// case i of 1 :
61307: LD_VAR 0 1
61311: PUSH
61312: LD_INT 1
61314: DOUBLE
61315: EQUAL
61316: IFTRUE 61320
61318: GO 61330
61320: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
61321: LD_STRING earthquake(getX(game), 0, 32)
61323: PPUSH
61324: CALL_OW 559
61328: GO 61568
61330: LD_INT 2
61332: DOUBLE
61333: EQUAL
61334: IFTRUE 61338
61336: GO 61352
61338: POP
// begin ToLua ( displayStucuk(); ) ;
61339: LD_STRING displayStucuk();
61341: PPUSH
61342: CALL_OW 559
// ResetFog ;
61346: CALL_OW 335
// end ; 3 :
61350: GO 61568
61352: LD_INT 3
61354: DOUBLE
61355: EQUAL
61356: IFTRUE 61360
61358: GO 61464
61360: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61361: LD_ADDR_VAR 0 2
61365: PUSH
61366: LD_INT 22
61368: PUSH
61369: LD_OWVAR 2
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 25
61380: PUSH
61381: LD_INT 1
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PPUSH
61392: CALL_OW 69
61396: ST_TO_ADDR
// if not tmp then
61397: LD_VAR 0 2
61401: NOT
61402: IFFALSE 61406
// exit ;
61404: GO 61568
// un := tmp [ rand ( 1 , tmp ) ] ;
61406: LD_ADDR_VAR 0 3
61410: PUSH
61411: LD_VAR 0 2
61415: PUSH
61416: LD_INT 1
61418: PPUSH
61419: LD_VAR 0 2
61423: PPUSH
61424: CALL_OW 12
61428: ARRAY
61429: ST_TO_ADDR
// if Crawls ( un ) then
61430: LD_VAR 0 3
61434: PPUSH
61435: CALL_OW 318
61439: IFFALSE 61450
// ComWalk ( un ) ;
61441: LD_VAR 0 3
61445: PPUSH
61446: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61450: LD_VAR 0 3
61454: PPUSH
61455: LD_INT 8
61457: PPUSH
61458: CALL_OW 336
// end ; 4 :
61462: GO 61568
61464: LD_INT 4
61466: DOUBLE
61467: EQUAL
61468: IFTRUE 61472
61470: GO 61546
61472: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61473: LD_ADDR_VAR 0 2
61477: PUSH
61478: LD_INT 22
61480: PUSH
61481: LD_OWVAR 2
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 30
61492: PUSH
61493: LD_INT 29
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PPUSH
61504: CALL_OW 69
61508: ST_TO_ADDR
// if not tmp then
61509: LD_VAR 0 2
61513: NOT
61514: IFFALSE 61518
// exit ;
61516: GO 61568
// CenterNowOnUnits ( tmp [ 1 ] ) ;
61518: LD_VAR 0 2
61522: PUSH
61523: LD_INT 1
61525: ARRAY
61526: PPUSH
61527: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
61531: LD_VAR 0 2
61535: PUSH
61536: LD_INT 1
61538: ARRAY
61539: PPUSH
61540: CALL_OW 65
// end ; 5 .. 7 :
61544: GO 61568
61546: LD_INT 5
61548: DOUBLE
61549: GREATEREQUAL
61550: IFFALSE 61558
61552: LD_INT 7
61554: DOUBLE
61555: LESSEQUAL
61556: IFTRUE 61560
61558: GO 61567
61560: POP
// StreamSibBomb ; end ;
61561: CALL 57805 0 0
61565: GO 61568
61567: POP
// end ;
61568: PPOPN 3
61570: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
61571: LD_EXP 29
61575: PUSH
61576: LD_EXP 79
61580: AND
61581: IFFALSE 61737
61583: GO 61585
61585: DISABLE
61586: LD_INT 0
61588: PPUSH
61589: PPUSH
61590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
61591: LD_ADDR_VAR 0 2
61595: PUSH
61596: LD_INT 81
61598: PUSH
61599: LD_OWVAR 2
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 2
61610: PUSH
61611: LD_INT 21
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 21
61623: PUSH
61624: LD_INT 2
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: LIST
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PPUSH
61640: CALL_OW 69
61644: ST_TO_ADDR
// if not tmp then
61645: LD_VAR 0 2
61649: NOT
61650: IFFALSE 61654
// exit ;
61652: GO 61737
// p := 0 ;
61654: LD_ADDR_VAR 0 3
61658: PUSH
61659: LD_INT 0
61661: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61662: LD_INT 35
61664: PPUSH
61665: CALL_OW 67
// p := p + 1 ;
61669: LD_ADDR_VAR 0 3
61673: PUSH
61674: LD_VAR 0 3
61678: PUSH
61679: LD_INT 1
61681: PLUS
61682: ST_TO_ADDR
// for i in tmp do
61683: LD_ADDR_VAR 0 1
61687: PUSH
61688: LD_VAR 0 2
61692: PUSH
61693: FOR_IN
61694: IFFALSE 61725
// if GetLives ( i ) < 1000 then
61696: LD_VAR 0 1
61700: PPUSH
61701: CALL_OW 256
61705: PUSH
61706: LD_INT 1000
61708: LESS
61709: IFFALSE 61723
// SetLives ( i , 1000 ) ;
61711: LD_VAR 0 1
61715: PPUSH
61716: LD_INT 1000
61718: PPUSH
61719: CALL_OW 234
61723: GO 61693
61725: POP
61726: POP
// until p > 20 ;
61727: LD_VAR 0 3
61731: PUSH
61732: LD_INT 20
61734: GREATER
61735: IFFALSE 61662
// end ;
61737: PPOPN 3
61739: END
// every 0 0$1 trigger StreamModeActive and sTime do
61740: LD_EXP 29
61744: PUSH
61745: LD_EXP 80
61749: AND
61750: IFFALSE 61785
61752: GO 61754
61754: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
61755: LD_INT 28
61757: PPUSH
61758: LD_OWVAR 2
61762: PPUSH
61763: LD_INT 2
61765: PPUSH
61766: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
61770: LD_INT 30
61772: PPUSH
61773: LD_OWVAR 2
61777: PPUSH
61778: LD_INT 2
61780: PPUSH
61781: CALL_OW 322
// end ;
61785: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
61786: LD_EXP 29
61790: PUSH
61791: LD_EXP 81
61795: AND
61796: IFFALSE 61917
61798: GO 61800
61800: DISABLE
61801: LD_INT 0
61803: PPUSH
61804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61805: LD_ADDR_VAR 0 2
61809: PUSH
61810: LD_INT 22
61812: PUSH
61813: LD_OWVAR 2
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 21
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 3
61834: PUSH
61835: LD_INT 23
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: LIST
61853: PPUSH
61854: CALL_OW 69
61858: ST_TO_ADDR
// if not tmp then
61859: LD_VAR 0 2
61863: NOT
61864: IFFALSE 61868
// exit ;
61866: GO 61917
// for i in tmp do
61868: LD_ADDR_VAR 0 1
61872: PUSH
61873: LD_VAR 0 2
61877: PUSH
61878: FOR_IN
61879: IFFALSE 61915
// begin if Crawls ( i ) then
61881: LD_VAR 0 1
61885: PPUSH
61886: CALL_OW 318
61890: IFFALSE 61901
// ComWalk ( i ) ;
61892: LD_VAR 0 1
61896: PPUSH
61897: CALL_OW 138
// SetClass ( i , 2 ) ;
61901: LD_VAR 0 1
61905: PPUSH
61906: LD_INT 2
61908: PPUSH
61909: CALL_OW 336
// end ;
61913: GO 61878
61915: POP
61916: POP
// end ;
61917: PPOPN 2
61919: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
61920: LD_EXP 29
61924: PUSH
61925: LD_EXP 82
61929: AND
61930: IFFALSE 62218
61932: GO 61934
61934: DISABLE
61935: LD_INT 0
61937: PPUSH
61938: PPUSH
61939: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
61940: LD_OWVAR 2
61944: PPUSH
61945: LD_INT 9
61947: PPUSH
61948: LD_INT 1
61950: PPUSH
61951: LD_INT 1
61953: PPUSH
61954: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
61958: LD_INT 9
61960: PPUSH
61961: LD_OWVAR 2
61965: PPUSH
61966: CALL_OW 343
// uc_side := 9 ;
61970: LD_ADDR_OWVAR 20
61974: PUSH
61975: LD_INT 9
61977: ST_TO_ADDR
// uc_nation := 2 ;
61978: LD_ADDR_OWVAR 21
61982: PUSH
61983: LD_INT 2
61985: ST_TO_ADDR
// hc_name := Dark Warrior ;
61986: LD_ADDR_OWVAR 26
61990: PUSH
61991: LD_STRING Dark Warrior
61993: ST_TO_ADDR
// hc_gallery :=  ;
61994: LD_ADDR_OWVAR 33
61998: PUSH
61999: LD_STRING 
62001: ST_TO_ADDR
// hc_noskilllimit := true ;
62002: LD_ADDR_OWVAR 76
62006: PUSH
62007: LD_INT 1
62009: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
62010: LD_ADDR_OWVAR 31
62014: PUSH
62015: LD_INT 30
62017: PUSH
62018: LD_INT 30
62020: PUSH
62021: LD_INT 30
62023: PUSH
62024: LD_INT 30
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: ST_TO_ADDR
// un := CreateHuman ;
62033: LD_ADDR_VAR 0 3
62037: PUSH
62038: CALL_OW 44
62042: ST_TO_ADDR
// hc_noskilllimit := false ;
62043: LD_ADDR_OWVAR 76
62047: PUSH
62048: LD_INT 0
62050: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62051: LD_VAR 0 3
62055: PPUSH
62056: LD_INT 1
62058: PPUSH
62059: CALL_OW 51
// ToLua ( playRanger() ) ;
62063: LD_STRING playRanger()
62065: PPUSH
62066: CALL_OW 559
// p := 0 ;
62070: LD_ADDR_VAR 0 2
62074: PUSH
62075: LD_INT 0
62077: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62078: LD_INT 35
62080: PPUSH
62081: CALL_OW 67
// p := p + 1 ;
62085: LD_ADDR_VAR 0 2
62089: PUSH
62090: LD_VAR 0 2
62094: PUSH
62095: LD_INT 1
62097: PLUS
62098: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
62099: LD_VAR 0 3
62103: PPUSH
62104: CALL_OW 256
62108: PUSH
62109: LD_INT 1000
62111: LESS
62112: IFFALSE 62126
// SetLives ( un , 1000 ) ;
62114: LD_VAR 0 3
62118: PPUSH
62119: LD_INT 1000
62121: PPUSH
62122: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
62126: LD_VAR 0 3
62130: PPUSH
62131: LD_INT 81
62133: PUSH
62134: LD_OWVAR 2
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 91
62145: PUSH
62146: LD_VAR 0 3
62150: PUSH
62151: LD_INT 30
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: LIST
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PPUSH
62163: CALL_OW 69
62167: PPUSH
62168: LD_VAR 0 3
62172: PPUSH
62173: CALL_OW 74
62177: PPUSH
62178: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
62182: LD_VAR 0 2
62186: PUSH
62187: LD_INT 80
62189: GREATER
62190: PUSH
62191: LD_VAR 0 3
62195: PPUSH
62196: CALL_OW 301
62200: OR
62201: IFFALSE 62078
// if un then
62203: LD_VAR 0 3
62207: IFFALSE 62218
// RemoveUnit ( un ) ;
62209: LD_VAR 0 3
62213: PPUSH
62214: CALL_OW 64
// end ;
62218: PPOPN 3
62220: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
62221: LD_EXP 83
62225: IFFALSE 62341
62227: GO 62229
62229: DISABLE
62230: LD_INT 0
62232: PPUSH
62233: PPUSH
62234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62235: LD_ADDR_VAR 0 2
62239: PUSH
62240: LD_INT 81
62242: PUSH
62243: LD_OWVAR 2
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 21
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PPUSH
62266: CALL_OW 69
62270: ST_TO_ADDR
// ToLua ( playComputer() ) ;
62271: LD_STRING playComputer()
62273: PPUSH
62274: CALL_OW 559
// if not tmp then
62278: LD_VAR 0 2
62282: NOT
62283: IFFALSE 62287
// exit ;
62285: GO 62341
// for i in tmp do
62287: LD_ADDR_VAR 0 1
62291: PUSH
62292: LD_VAR 0 2
62296: PUSH
62297: FOR_IN
62298: IFFALSE 62339
// for j := 1 to 4 do
62300: LD_ADDR_VAR 0 3
62304: PUSH
62305: DOUBLE
62306: LD_INT 1
62308: DEC
62309: ST_TO_ADDR
62310: LD_INT 4
62312: PUSH
62313: FOR_TO
62314: IFFALSE 62335
// SetSkill ( i , j , 10 ) ;
62316: LD_VAR 0 1
62320: PPUSH
62321: LD_VAR 0 3
62325: PPUSH
62326: LD_INT 10
62328: PPUSH
62329: CALL_OW 237
62333: GO 62313
62335: POP
62336: POP
62337: GO 62297
62339: POP
62340: POP
// end ;
62341: PPOPN 3
62343: END
// every 0 0$1 trigger s30 do var i , tmp ;
62344: LD_EXP 84
62348: IFFALSE 62417
62350: GO 62352
62352: DISABLE
62353: LD_INT 0
62355: PPUSH
62356: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62357: LD_ADDR_VAR 0 2
62361: PUSH
62362: LD_INT 22
62364: PUSH
62365: LD_OWVAR 2
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PPUSH
62374: CALL_OW 69
62378: ST_TO_ADDR
// if not tmp then
62379: LD_VAR 0 2
62383: NOT
62384: IFFALSE 62388
// exit ;
62386: GO 62417
// for i in tmp do
62388: LD_ADDR_VAR 0 1
62392: PUSH
62393: LD_VAR 0 2
62397: PUSH
62398: FOR_IN
62399: IFFALSE 62415
// SetLives ( i , 300 ) ;
62401: LD_VAR 0 1
62405: PPUSH
62406: LD_INT 300
62408: PPUSH
62409: CALL_OW 234
62413: GO 62398
62415: POP
62416: POP
// end ;
62417: PPOPN 2
62419: END
// every 0 0$1 trigger s60 do var i , tmp ;
62420: LD_EXP 85
62424: IFFALSE 62493
62426: GO 62428
62428: DISABLE
62429: LD_INT 0
62431: PPUSH
62432: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62433: LD_ADDR_VAR 0 2
62437: PUSH
62438: LD_INT 22
62440: PUSH
62441: LD_OWVAR 2
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PPUSH
62450: CALL_OW 69
62454: ST_TO_ADDR
// if not tmp then
62455: LD_VAR 0 2
62459: NOT
62460: IFFALSE 62464
// exit ;
62462: GO 62493
// for i in tmp do
62464: LD_ADDR_VAR 0 1
62468: PUSH
62469: LD_VAR 0 2
62473: PUSH
62474: FOR_IN
62475: IFFALSE 62491
// SetLives ( i , 600 ) ;
62477: LD_VAR 0 1
62481: PPUSH
62482: LD_INT 600
62484: PPUSH
62485: CALL_OW 234
62489: GO 62474
62491: POP
62492: POP
// end ;
62493: PPOPN 2
62495: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62496: LD_INT 0
62498: PPUSH
// case cmd of 301 :
62499: LD_VAR 0 1
62503: PUSH
62504: LD_INT 301
62506: DOUBLE
62507: EQUAL
62508: IFTRUE 62512
62510: GO 62544
62512: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
62513: LD_VAR 0 6
62517: PPUSH
62518: LD_VAR 0 7
62522: PPUSH
62523: LD_VAR 0 8
62527: PPUSH
62528: LD_VAR 0 4
62532: PPUSH
62533: LD_VAR 0 5
62537: PPUSH
62538: CALL 63745 0 5
62542: GO 62665
62544: LD_INT 302
62546: DOUBLE
62547: EQUAL
62548: IFTRUE 62552
62550: GO 62589
62552: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
62553: LD_VAR 0 6
62557: PPUSH
62558: LD_VAR 0 7
62562: PPUSH
62563: LD_VAR 0 8
62567: PPUSH
62568: LD_VAR 0 9
62572: PPUSH
62573: LD_VAR 0 4
62577: PPUSH
62578: LD_VAR 0 5
62582: PPUSH
62583: CALL 63836 0 6
62587: GO 62665
62589: LD_INT 303
62591: DOUBLE
62592: EQUAL
62593: IFTRUE 62597
62595: GO 62634
62597: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
62598: LD_VAR 0 6
62602: PPUSH
62603: LD_VAR 0 7
62607: PPUSH
62608: LD_VAR 0 8
62612: PPUSH
62613: LD_VAR 0 9
62617: PPUSH
62618: LD_VAR 0 4
62622: PPUSH
62623: LD_VAR 0 5
62627: PPUSH
62628: CALL 62670 0 6
62632: GO 62665
62634: LD_INT 304
62636: DOUBLE
62637: EQUAL
62638: IFTRUE 62642
62640: GO 62664
62642: POP
// hHackTeleport ( unit , x , y ) ; end ;
62643: LD_VAR 0 2
62647: PPUSH
62648: LD_VAR 0 4
62652: PPUSH
62653: LD_VAR 0 5
62657: PPUSH
62658: CALL 64429 0 3
62662: GO 62665
62664: POP
// end ;
62665: LD_VAR 0 12
62669: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
62670: LD_INT 0
62672: PPUSH
62673: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
62674: LD_VAR 0 1
62678: PUSH
62679: LD_INT 1
62681: LESS
62682: PUSH
62683: LD_VAR 0 1
62687: PUSH
62688: LD_INT 3
62690: GREATER
62691: OR
62692: PUSH
62693: LD_VAR 0 5
62697: PPUSH
62698: LD_VAR 0 6
62702: PPUSH
62703: CALL_OW 428
62707: OR
62708: IFFALSE 62712
// exit ;
62710: GO 63432
// uc_side := your_side ;
62712: LD_ADDR_OWVAR 20
62716: PUSH
62717: LD_OWVAR 2
62721: ST_TO_ADDR
// uc_nation := nation ;
62722: LD_ADDR_OWVAR 21
62726: PUSH
62727: LD_VAR 0 1
62731: ST_TO_ADDR
// bc_level = 1 ;
62732: LD_ADDR_OWVAR 43
62736: PUSH
62737: LD_INT 1
62739: ST_TO_ADDR
// case btype of 1 :
62740: LD_VAR 0 2
62744: PUSH
62745: LD_INT 1
62747: DOUBLE
62748: EQUAL
62749: IFTRUE 62753
62751: GO 62764
62753: POP
// bc_type := b_depot ; 2 :
62754: LD_ADDR_OWVAR 42
62758: PUSH
62759: LD_INT 0
62761: ST_TO_ADDR
62762: GO 63376
62764: LD_INT 2
62766: DOUBLE
62767: EQUAL
62768: IFTRUE 62772
62770: GO 62783
62772: POP
// bc_type := b_warehouse ; 3 :
62773: LD_ADDR_OWVAR 42
62777: PUSH
62778: LD_INT 1
62780: ST_TO_ADDR
62781: GO 63376
62783: LD_INT 3
62785: DOUBLE
62786: EQUAL
62787: IFTRUE 62791
62789: GO 62802
62791: POP
// bc_type := b_lab ; 4 .. 9 :
62792: LD_ADDR_OWVAR 42
62796: PUSH
62797: LD_INT 6
62799: ST_TO_ADDR
62800: GO 63376
62802: LD_INT 4
62804: DOUBLE
62805: GREATEREQUAL
62806: IFFALSE 62814
62808: LD_INT 9
62810: DOUBLE
62811: LESSEQUAL
62812: IFTRUE 62816
62814: GO 62868
62816: POP
// begin bc_type := b_lab_half ;
62817: LD_ADDR_OWVAR 42
62821: PUSH
62822: LD_INT 7
62824: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
62825: LD_ADDR_OWVAR 44
62829: PUSH
62830: LD_INT 10
62832: PUSH
62833: LD_INT 11
62835: PUSH
62836: LD_INT 12
62838: PUSH
62839: LD_INT 15
62841: PUSH
62842: LD_INT 14
62844: PUSH
62845: LD_INT 13
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: PUSH
62856: LD_VAR 0 2
62860: PUSH
62861: LD_INT 3
62863: MINUS
62864: ARRAY
62865: ST_TO_ADDR
// end ; 10 .. 13 :
62866: GO 63376
62868: LD_INT 10
62870: DOUBLE
62871: GREATEREQUAL
62872: IFFALSE 62880
62874: LD_INT 13
62876: DOUBLE
62877: LESSEQUAL
62878: IFTRUE 62882
62880: GO 62959
62882: POP
// begin bc_type := b_lab_full ;
62883: LD_ADDR_OWVAR 42
62887: PUSH
62888: LD_INT 8
62890: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
62891: LD_ADDR_OWVAR 44
62895: PUSH
62896: LD_INT 10
62898: PUSH
62899: LD_INT 12
62901: PUSH
62902: LD_INT 14
62904: PUSH
62905: LD_INT 13
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: PUSH
62914: LD_VAR 0 2
62918: PUSH
62919: LD_INT 9
62921: MINUS
62922: ARRAY
62923: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
62924: LD_ADDR_OWVAR 45
62928: PUSH
62929: LD_INT 11
62931: PUSH
62932: LD_INT 15
62934: PUSH
62935: LD_INT 12
62937: PUSH
62938: LD_INT 15
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: PUSH
62947: LD_VAR 0 2
62951: PUSH
62952: LD_INT 9
62954: MINUS
62955: ARRAY
62956: ST_TO_ADDR
// end ; 14 :
62957: GO 63376
62959: LD_INT 14
62961: DOUBLE
62962: EQUAL
62963: IFTRUE 62967
62965: GO 62978
62967: POP
// bc_type := b_workshop ; 15 :
62968: LD_ADDR_OWVAR 42
62972: PUSH
62973: LD_INT 2
62975: ST_TO_ADDR
62976: GO 63376
62978: LD_INT 15
62980: DOUBLE
62981: EQUAL
62982: IFTRUE 62986
62984: GO 62997
62986: POP
// bc_type := b_factory ; 16 :
62987: LD_ADDR_OWVAR 42
62991: PUSH
62992: LD_INT 3
62994: ST_TO_ADDR
62995: GO 63376
62997: LD_INT 16
62999: DOUBLE
63000: EQUAL
63001: IFTRUE 63005
63003: GO 63016
63005: POP
// bc_type := b_ext_gun ; 17 :
63006: LD_ADDR_OWVAR 42
63010: PUSH
63011: LD_INT 17
63013: ST_TO_ADDR
63014: GO 63376
63016: LD_INT 17
63018: DOUBLE
63019: EQUAL
63020: IFTRUE 63024
63022: GO 63052
63024: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
63025: LD_ADDR_OWVAR 42
63029: PUSH
63030: LD_INT 19
63032: PUSH
63033: LD_INT 23
63035: PUSH
63036: LD_INT 19
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: LIST
63043: PUSH
63044: LD_VAR 0 1
63048: ARRAY
63049: ST_TO_ADDR
63050: GO 63376
63052: LD_INT 18
63054: DOUBLE
63055: EQUAL
63056: IFTRUE 63060
63058: GO 63071
63060: POP
// bc_type := b_ext_radar ; 19 :
63061: LD_ADDR_OWVAR 42
63065: PUSH
63066: LD_INT 20
63068: ST_TO_ADDR
63069: GO 63376
63071: LD_INT 19
63073: DOUBLE
63074: EQUAL
63075: IFTRUE 63079
63077: GO 63090
63079: POP
// bc_type := b_ext_radio ; 20 :
63080: LD_ADDR_OWVAR 42
63084: PUSH
63085: LD_INT 22
63087: ST_TO_ADDR
63088: GO 63376
63090: LD_INT 20
63092: DOUBLE
63093: EQUAL
63094: IFTRUE 63098
63096: GO 63109
63098: POP
// bc_type := b_ext_siberium ; 21 :
63099: LD_ADDR_OWVAR 42
63103: PUSH
63104: LD_INT 21
63106: ST_TO_ADDR
63107: GO 63376
63109: LD_INT 21
63111: DOUBLE
63112: EQUAL
63113: IFTRUE 63117
63115: GO 63128
63117: POP
// bc_type := b_ext_computer ; 22 :
63118: LD_ADDR_OWVAR 42
63122: PUSH
63123: LD_INT 24
63125: ST_TO_ADDR
63126: GO 63376
63128: LD_INT 22
63130: DOUBLE
63131: EQUAL
63132: IFTRUE 63136
63134: GO 63147
63136: POP
// bc_type := b_ext_track ; 23 :
63137: LD_ADDR_OWVAR 42
63141: PUSH
63142: LD_INT 16
63144: ST_TO_ADDR
63145: GO 63376
63147: LD_INT 23
63149: DOUBLE
63150: EQUAL
63151: IFTRUE 63155
63153: GO 63166
63155: POP
// bc_type := b_ext_laser ; 24 :
63156: LD_ADDR_OWVAR 42
63160: PUSH
63161: LD_INT 25
63163: ST_TO_ADDR
63164: GO 63376
63166: LD_INT 24
63168: DOUBLE
63169: EQUAL
63170: IFTRUE 63174
63172: GO 63185
63174: POP
// bc_type := b_control_tower ; 25 :
63175: LD_ADDR_OWVAR 42
63179: PUSH
63180: LD_INT 36
63182: ST_TO_ADDR
63183: GO 63376
63185: LD_INT 25
63187: DOUBLE
63188: EQUAL
63189: IFTRUE 63193
63191: GO 63204
63193: POP
// bc_type := b_breastwork ; 26 :
63194: LD_ADDR_OWVAR 42
63198: PUSH
63199: LD_INT 31
63201: ST_TO_ADDR
63202: GO 63376
63204: LD_INT 26
63206: DOUBLE
63207: EQUAL
63208: IFTRUE 63212
63210: GO 63223
63212: POP
// bc_type := b_bunker ; 27 :
63213: LD_ADDR_OWVAR 42
63217: PUSH
63218: LD_INT 32
63220: ST_TO_ADDR
63221: GO 63376
63223: LD_INT 27
63225: DOUBLE
63226: EQUAL
63227: IFTRUE 63231
63229: GO 63242
63231: POP
// bc_type := b_turret ; 28 :
63232: LD_ADDR_OWVAR 42
63236: PUSH
63237: LD_INT 33
63239: ST_TO_ADDR
63240: GO 63376
63242: LD_INT 28
63244: DOUBLE
63245: EQUAL
63246: IFTRUE 63250
63248: GO 63261
63250: POP
// bc_type := b_armoury ; 29 :
63251: LD_ADDR_OWVAR 42
63255: PUSH
63256: LD_INT 4
63258: ST_TO_ADDR
63259: GO 63376
63261: LD_INT 29
63263: DOUBLE
63264: EQUAL
63265: IFTRUE 63269
63267: GO 63280
63269: POP
// bc_type := b_barracks ; 30 :
63270: LD_ADDR_OWVAR 42
63274: PUSH
63275: LD_INT 5
63277: ST_TO_ADDR
63278: GO 63376
63280: LD_INT 30
63282: DOUBLE
63283: EQUAL
63284: IFTRUE 63288
63286: GO 63299
63288: POP
// bc_type := b_solar_power ; 31 :
63289: LD_ADDR_OWVAR 42
63293: PUSH
63294: LD_INT 27
63296: ST_TO_ADDR
63297: GO 63376
63299: LD_INT 31
63301: DOUBLE
63302: EQUAL
63303: IFTRUE 63307
63305: GO 63318
63307: POP
// bc_type := b_oil_power ; 32 :
63308: LD_ADDR_OWVAR 42
63312: PUSH
63313: LD_INT 26
63315: ST_TO_ADDR
63316: GO 63376
63318: LD_INT 32
63320: DOUBLE
63321: EQUAL
63322: IFTRUE 63326
63324: GO 63337
63326: POP
// bc_type := b_siberite_power ; 33 :
63327: LD_ADDR_OWVAR 42
63331: PUSH
63332: LD_INT 28
63334: ST_TO_ADDR
63335: GO 63376
63337: LD_INT 33
63339: DOUBLE
63340: EQUAL
63341: IFTRUE 63345
63343: GO 63356
63345: POP
// bc_type := b_oil_mine ; 34 :
63346: LD_ADDR_OWVAR 42
63350: PUSH
63351: LD_INT 29
63353: ST_TO_ADDR
63354: GO 63376
63356: LD_INT 34
63358: DOUBLE
63359: EQUAL
63360: IFTRUE 63364
63362: GO 63375
63364: POP
// bc_type := b_siberite_mine ; end ;
63365: LD_ADDR_OWVAR 42
63369: PUSH
63370: LD_INT 30
63372: ST_TO_ADDR
63373: GO 63376
63375: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
63376: LD_ADDR_VAR 0 8
63380: PUSH
63381: LD_VAR 0 5
63385: PPUSH
63386: LD_VAR 0 6
63390: PPUSH
63391: LD_VAR 0 3
63395: PPUSH
63396: CALL_OW 47
63400: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
63401: LD_OWVAR 42
63405: PUSH
63406: LD_INT 32
63408: PUSH
63409: LD_INT 33
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: IN
63416: IFFALSE 63432
// PlaceWeaponTurret ( b , weapon ) ;
63418: LD_VAR 0 8
63422: PPUSH
63423: LD_VAR 0 4
63427: PPUSH
63428: CALL_OW 431
// end ;
63432: LD_VAR 0 7
63436: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
63437: LD_INT 0
63439: PPUSH
63440: PPUSH
63441: PPUSH
63442: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63443: LD_ADDR_VAR 0 4
63447: PUSH
63448: LD_INT 22
63450: PUSH
63451: LD_OWVAR 2
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 2
63462: PUSH
63463: LD_INT 30
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 30
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: LIST
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PPUSH
63492: CALL_OW 69
63496: ST_TO_ADDR
// if not tmp then
63497: LD_VAR 0 4
63501: NOT
63502: IFFALSE 63506
// exit ;
63504: GO 63565
// for i in tmp do
63506: LD_ADDR_VAR 0 2
63510: PUSH
63511: LD_VAR 0 4
63515: PUSH
63516: FOR_IN
63517: IFFALSE 63563
// for j = 1 to 3 do
63519: LD_ADDR_VAR 0 3
63523: PUSH
63524: DOUBLE
63525: LD_INT 1
63527: DEC
63528: ST_TO_ADDR
63529: LD_INT 3
63531: PUSH
63532: FOR_TO
63533: IFFALSE 63559
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
63535: LD_VAR 0 2
63539: PPUSH
63540: CALL_OW 274
63544: PPUSH
63545: LD_VAR 0 3
63549: PPUSH
63550: LD_INT 99999
63552: PPUSH
63553: CALL_OW 277
63557: GO 63532
63559: POP
63560: POP
63561: GO 63516
63563: POP
63564: POP
// end ;
63565: LD_VAR 0 1
63569: RET
// export function hHackSetLevel10 ; var i , j ; begin
63570: LD_INT 0
63572: PPUSH
63573: PPUSH
63574: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63575: LD_ADDR_VAR 0 2
63579: PUSH
63580: LD_INT 21
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PPUSH
63590: CALL_OW 69
63594: PUSH
63595: FOR_IN
63596: IFFALSE 63648
// if IsSelected ( i ) then
63598: LD_VAR 0 2
63602: PPUSH
63603: CALL_OW 306
63607: IFFALSE 63646
// begin for j := 1 to 4 do
63609: LD_ADDR_VAR 0 3
63613: PUSH
63614: DOUBLE
63615: LD_INT 1
63617: DEC
63618: ST_TO_ADDR
63619: LD_INT 4
63621: PUSH
63622: FOR_TO
63623: IFFALSE 63644
// SetSkill ( i , j , 10 ) ;
63625: LD_VAR 0 2
63629: PPUSH
63630: LD_VAR 0 3
63634: PPUSH
63635: LD_INT 10
63637: PPUSH
63638: CALL_OW 237
63642: GO 63622
63644: POP
63645: POP
// end ;
63646: GO 63595
63648: POP
63649: POP
// end ;
63650: LD_VAR 0 1
63654: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
63655: LD_INT 0
63657: PPUSH
63658: PPUSH
63659: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
63660: LD_ADDR_VAR 0 2
63664: PUSH
63665: LD_INT 22
63667: PUSH
63668: LD_OWVAR 2
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 21
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PPUSH
63691: CALL_OW 69
63695: PUSH
63696: FOR_IN
63697: IFFALSE 63738
// begin for j := 1 to 4 do
63699: LD_ADDR_VAR 0 3
63703: PUSH
63704: DOUBLE
63705: LD_INT 1
63707: DEC
63708: ST_TO_ADDR
63709: LD_INT 4
63711: PUSH
63712: FOR_TO
63713: IFFALSE 63734
// SetSkill ( i , j , 10 ) ;
63715: LD_VAR 0 2
63719: PPUSH
63720: LD_VAR 0 3
63724: PPUSH
63725: LD_INT 10
63727: PPUSH
63728: CALL_OW 237
63732: GO 63712
63734: POP
63735: POP
// end ;
63736: GO 63696
63738: POP
63739: POP
// end ;
63740: LD_VAR 0 1
63744: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
63745: LD_INT 0
63747: PPUSH
// uc_side := your_side ;
63748: LD_ADDR_OWVAR 20
63752: PUSH
63753: LD_OWVAR 2
63757: ST_TO_ADDR
// uc_nation := nation ;
63758: LD_ADDR_OWVAR 21
63762: PUSH
63763: LD_VAR 0 1
63767: ST_TO_ADDR
// InitHc ;
63768: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
63772: LD_INT 0
63774: PPUSH
63775: LD_VAR 0 2
63779: PPUSH
63780: LD_VAR 0 3
63784: PPUSH
63785: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
63789: LD_VAR 0 4
63793: PPUSH
63794: LD_VAR 0 5
63798: PPUSH
63799: CALL_OW 428
63803: PUSH
63804: LD_INT 0
63806: EQUAL
63807: IFFALSE 63831
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
63809: CALL_OW 44
63813: PPUSH
63814: LD_VAR 0 4
63818: PPUSH
63819: LD_VAR 0 5
63823: PPUSH
63824: LD_INT 1
63826: PPUSH
63827: CALL_OW 48
// end ;
63831: LD_VAR 0 6
63835: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
63836: LD_INT 0
63838: PPUSH
63839: PPUSH
// uc_side := your_side ;
63840: LD_ADDR_OWVAR 20
63844: PUSH
63845: LD_OWVAR 2
63849: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
63850: LD_VAR 0 1
63854: PUSH
63855: LD_INT 1
63857: PUSH
63858: LD_INT 2
63860: PUSH
63861: LD_INT 3
63863: PUSH
63864: LD_INT 4
63866: PUSH
63867: LD_INT 5
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: IN
63877: IFFALSE 63889
// uc_nation := nation_american else
63879: LD_ADDR_OWVAR 21
63883: PUSH
63884: LD_INT 1
63886: ST_TO_ADDR
63887: GO 63932
// if chassis in [ 11 , 12 , 13 , 14 ] then
63889: LD_VAR 0 1
63893: PUSH
63894: LD_INT 11
63896: PUSH
63897: LD_INT 12
63899: PUSH
63900: LD_INT 13
63902: PUSH
63903: LD_INT 14
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: IN
63912: IFFALSE 63924
// uc_nation := nation_arabian else
63914: LD_ADDR_OWVAR 21
63918: PUSH
63919: LD_INT 2
63921: ST_TO_ADDR
63922: GO 63932
// uc_nation := nation_russian ;
63924: LD_ADDR_OWVAR 21
63928: PUSH
63929: LD_INT 3
63931: ST_TO_ADDR
// vc_chassis := chassis ;
63932: LD_ADDR_OWVAR 37
63936: PUSH
63937: LD_VAR 0 1
63941: ST_TO_ADDR
// vc_engine := engine ;
63942: LD_ADDR_OWVAR 39
63946: PUSH
63947: LD_VAR 0 2
63951: ST_TO_ADDR
// vc_control := control ;
63952: LD_ADDR_OWVAR 38
63956: PUSH
63957: LD_VAR 0 3
63961: ST_TO_ADDR
// vc_weapon := weapon ;
63962: LD_ADDR_OWVAR 40
63966: PUSH
63967: LD_VAR 0 4
63971: ST_TO_ADDR
// un := CreateVehicle ;
63972: LD_ADDR_VAR 0 8
63976: PUSH
63977: CALL_OW 45
63981: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
63982: LD_VAR 0 8
63986: PPUSH
63987: LD_INT 0
63989: PPUSH
63990: LD_INT 5
63992: PPUSH
63993: CALL_OW 12
63997: PPUSH
63998: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
64002: LD_VAR 0 8
64006: PPUSH
64007: LD_VAR 0 5
64011: PPUSH
64012: LD_VAR 0 6
64016: PPUSH
64017: LD_INT 1
64019: PPUSH
64020: CALL_OW 48
// end ;
64024: LD_VAR 0 7
64028: RET
// export hInvincible ; every 1 do
64029: GO 64031
64031: DISABLE
// hInvincible := [ ] ;
64032: LD_ADDR_EXP 86
64036: PUSH
64037: EMPTY
64038: ST_TO_ADDR
64039: END
// every 10 do var i ;
64040: GO 64042
64042: DISABLE
64043: LD_INT 0
64045: PPUSH
// begin enable ;
64046: ENABLE
// if not hInvincible then
64047: LD_EXP 86
64051: NOT
64052: IFFALSE 64056
// exit ;
64054: GO 64100
// for i in hInvincible do
64056: LD_ADDR_VAR 0 1
64060: PUSH
64061: LD_EXP 86
64065: PUSH
64066: FOR_IN
64067: IFFALSE 64098
// if GetLives ( i ) < 1000 then
64069: LD_VAR 0 1
64073: PPUSH
64074: CALL_OW 256
64078: PUSH
64079: LD_INT 1000
64081: LESS
64082: IFFALSE 64096
// SetLives ( i , 1000 ) ;
64084: LD_VAR 0 1
64088: PPUSH
64089: LD_INT 1000
64091: PPUSH
64092: CALL_OW 234
64096: GO 64066
64098: POP
64099: POP
// end ;
64100: PPOPN 1
64102: END
// export function hHackInvincible ; var i ; begin
64103: LD_INT 0
64105: PPUSH
64106: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
64107: LD_ADDR_VAR 0 2
64111: PUSH
64112: LD_INT 2
64114: PUSH
64115: LD_INT 21
64117: PUSH
64118: LD_INT 1
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 21
64127: PUSH
64128: LD_INT 2
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: LIST
64139: PPUSH
64140: CALL_OW 69
64144: PUSH
64145: FOR_IN
64146: IFFALSE 64207
// if IsSelected ( i ) then
64148: LD_VAR 0 2
64152: PPUSH
64153: CALL_OW 306
64157: IFFALSE 64205
// begin if i in hInvincible then
64159: LD_VAR 0 2
64163: PUSH
64164: LD_EXP 86
64168: IN
64169: IFFALSE 64189
// hInvincible := hInvincible diff i else
64171: LD_ADDR_EXP 86
64175: PUSH
64176: LD_EXP 86
64180: PUSH
64181: LD_VAR 0 2
64185: DIFF
64186: ST_TO_ADDR
64187: GO 64205
// hInvincible := hInvincible union i ;
64189: LD_ADDR_EXP 86
64193: PUSH
64194: LD_EXP 86
64198: PUSH
64199: LD_VAR 0 2
64203: UNION
64204: ST_TO_ADDR
// end ;
64205: GO 64145
64207: POP
64208: POP
// end ;
64209: LD_VAR 0 1
64213: RET
// export function hHackInvisible ; var i , j ; begin
64214: LD_INT 0
64216: PPUSH
64217: PPUSH
64218: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64219: LD_ADDR_VAR 0 2
64223: PUSH
64224: LD_INT 21
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PPUSH
64234: CALL_OW 69
64238: PUSH
64239: FOR_IN
64240: IFFALSE 64264
// if IsSelected ( i ) then
64242: LD_VAR 0 2
64246: PPUSH
64247: CALL_OW 306
64251: IFFALSE 64262
// ComForceInvisible ( i ) ;
64253: LD_VAR 0 2
64257: PPUSH
64258: CALL_OW 496
64262: GO 64239
64264: POP
64265: POP
// end ;
64266: LD_VAR 0 1
64270: RET
// export function hHackChangeYourSide ; begin
64271: LD_INT 0
64273: PPUSH
// if your_side = 8 then
64274: LD_OWVAR 2
64278: PUSH
64279: LD_INT 8
64281: EQUAL
64282: IFFALSE 64294
// your_side := 0 else
64284: LD_ADDR_OWVAR 2
64288: PUSH
64289: LD_INT 0
64291: ST_TO_ADDR
64292: GO 64308
// your_side := your_side + 1 ;
64294: LD_ADDR_OWVAR 2
64298: PUSH
64299: LD_OWVAR 2
64303: PUSH
64304: LD_INT 1
64306: PLUS
64307: ST_TO_ADDR
// end ;
64308: LD_VAR 0 1
64312: RET
// export function hHackChangeUnitSide ; var i , j ; begin
64313: LD_INT 0
64315: PPUSH
64316: PPUSH
64317: PPUSH
// for i in all_units do
64318: LD_ADDR_VAR 0 2
64322: PUSH
64323: LD_OWVAR 3
64327: PUSH
64328: FOR_IN
64329: IFFALSE 64407
// if IsSelected ( i ) then
64331: LD_VAR 0 2
64335: PPUSH
64336: CALL_OW 306
64340: IFFALSE 64405
// begin j := GetSide ( i ) ;
64342: LD_ADDR_VAR 0 3
64346: PUSH
64347: LD_VAR 0 2
64351: PPUSH
64352: CALL_OW 255
64356: ST_TO_ADDR
// if j = 8 then
64357: LD_VAR 0 3
64361: PUSH
64362: LD_INT 8
64364: EQUAL
64365: IFFALSE 64377
// j := 0 else
64367: LD_ADDR_VAR 0 3
64371: PUSH
64372: LD_INT 0
64374: ST_TO_ADDR
64375: GO 64391
// j := j + 1 ;
64377: LD_ADDR_VAR 0 3
64381: PUSH
64382: LD_VAR 0 3
64386: PUSH
64387: LD_INT 1
64389: PLUS
64390: ST_TO_ADDR
// SetSide ( i , j ) ;
64391: LD_VAR 0 2
64395: PPUSH
64396: LD_VAR 0 3
64400: PPUSH
64401: CALL_OW 235
// end ;
64405: GO 64328
64407: POP
64408: POP
// end ;
64409: LD_VAR 0 1
64413: RET
// export function hHackFog ; begin
64414: LD_INT 0
64416: PPUSH
// FogOff ( true ) ;
64417: LD_INT 1
64419: PPUSH
64420: CALL_OW 344
// end ;
64424: LD_VAR 0 1
64428: RET
// export function hHackTeleport ( unit , x , y ) ; begin
64429: LD_INT 0
64431: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
64432: LD_VAR 0 1
64436: PPUSH
64437: LD_VAR 0 2
64441: PPUSH
64442: LD_VAR 0 3
64446: PPUSH
64447: LD_INT 1
64449: PPUSH
64450: LD_INT 1
64452: PPUSH
64453: CALL_OW 483
// CenterOnXY ( x , y ) ;
64457: LD_VAR 0 2
64461: PPUSH
64462: LD_VAR 0 3
64466: PPUSH
64467: CALL_OW 84
// end ;
64471: LD_VAR 0 4
64475: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64476: LD_INT 0
64478: PPUSH
64479: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64480: LD_VAR 0 1
64484: NOT
64485: PUSH
64486: LD_VAR 0 2
64490: PPUSH
64491: LD_VAR 0 3
64495: PPUSH
64496: CALL_OW 488
64500: NOT
64501: OR
64502: PUSH
64503: LD_VAR 0 1
64507: PPUSH
64508: CALL_OW 266
64512: PUSH
64513: LD_INT 3
64515: NONEQUAL
64516: PUSH
64517: LD_VAR 0 1
64521: PPUSH
64522: CALL_OW 247
64526: PUSH
64527: LD_INT 1
64529: EQUAL
64530: NOT
64531: AND
64532: OR
64533: IFFALSE 64537
// exit ;
64535: GO 64686
// if GetType ( factory ) = unit_human then
64537: LD_VAR 0 1
64541: PPUSH
64542: CALL_OW 247
64546: PUSH
64547: LD_INT 1
64549: EQUAL
64550: IFFALSE 64567
// factory := IsInUnit ( factory ) ;
64552: LD_ADDR_VAR 0 1
64556: PUSH
64557: LD_VAR 0 1
64561: PPUSH
64562: CALL_OW 310
64566: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64567: LD_VAR 0 1
64571: PPUSH
64572: CALL_OW 266
64576: PUSH
64577: LD_INT 3
64579: NONEQUAL
64580: IFFALSE 64584
// exit ;
64582: GO 64686
// if HexInfo ( x , y ) = factory then
64584: LD_VAR 0 2
64588: PPUSH
64589: LD_VAR 0 3
64593: PPUSH
64594: CALL_OW 428
64598: PUSH
64599: LD_VAR 0 1
64603: EQUAL
64604: IFFALSE 64631
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
64606: LD_ADDR_EXP 87
64610: PUSH
64611: LD_EXP 87
64615: PPUSH
64616: LD_VAR 0 1
64620: PPUSH
64621: LD_INT 0
64623: PPUSH
64624: CALL_OW 1
64628: ST_TO_ADDR
64629: GO 64682
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
64631: LD_ADDR_EXP 87
64635: PUSH
64636: LD_EXP 87
64640: PPUSH
64641: LD_VAR 0 1
64645: PPUSH
64646: LD_VAR 0 1
64650: PPUSH
64651: CALL_OW 255
64655: PUSH
64656: LD_VAR 0 1
64660: PUSH
64661: LD_VAR 0 2
64665: PUSH
64666: LD_VAR 0 3
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: PPUSH
64677: CALL_OW 1
64681: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64682: CALL 64691 0 0
// end ;
64686: LD_VAR 0 4
64690: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64691: LD_INT 0
64693: PPUSH
64694: PPUSH
64695: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64696: LD_STRING resetFactoryWaypoint();
64698: PPUSH
64699: CALL_OW 559
// if factoryWaypoints then
64703: LD_EXP 87
64707: IFFALSE 64833
// begin list := PrepareArray ( factoryWaypoints ) ;
64709: LD_ADDR_VAR 0 3
64713: PUSH
64714: LD_EXP 87
64718: PPUSH
64719: CALL 49679 0 1
64723: ST_TO_ADDR
// for i := 1 to list do
64724: LD_ADDR_VAR 0 2
64728: PUSH
64729: DOUBLE
64730: LD_INT 1
64732: DEC
64733: ST_TO_ADDR
64734: LD_VAR 0 3
64738: PUSH
64739: FOR_TO
64740: IFFALSE 64831
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64742: LD_STRING setFactoryWaypointXY(
64744: PUSH
64745: LD_VAR 0 3
64749: PUSH
64750: LD_VAR 0 2
64754: ARRAY
64755: PUSH
64756: LD_INT 1
64758: ARRAY
64759: STR
64760: PUSH
64761: LD_STRING ,
64763: STR
64764: PUSH
64765: LD_VAR 0 3
64769: PUSH
64770: LD_VAR 0 2
64774: ARRAY
64775: PUSH
64776: LD_INT 2
64778: ARRAY
64779: STR
64780: PUSH
64781: LD_STRING ,
64783: STR
64784: PUSH
64785: LD_VAR 0 3
64789: PUSH
64790: LD_VAR 0 2
64794: ARRAY
64795: PUSH
64796: LD_INT 3
64798: ARRAY
64799: STR
64800: PUSH
64801: LD_STRING ,
64803: STR
64804: PUSH
64805: LD_VAR 0 3
64809: PUSH
64810: LD_VAR 0 2
64814: ARRAY
64815: PUSH
64816: LD_INT 4
64818: ARRAY
64819: STR
64820: PUSH
64821: LD_STRING )
64823: STR
64824: PPUSH
64825: CALL_OW 559
64829: GO 64739
64831: POP
64832: POP
// end ; end ;
64833: LD_VAR 0 1
64837: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64838: LD_INT 0
64840: PPUSH
// if HexInfo ( x , y ) = warehouse then
64841: LD_VAR 0 2
64845: PPUSH
64846: LD_VAR 0 3
64850: PPUSH
64851: CALL_OW 428
64855: PUSH
64856: LD_VAR 0 1
64860: EQUAL
64861: IFFALSE 64888
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64863: LD_ADDR_EXP 88
64867: PUSH
64868: LD_EXP 88
64872: PPUSH
64873: LD_VAR 0 1
64877: PPUSH
64878: LD_INT 0
64880: PPUSH
64881: CALL_OW 1
64885: ST_TO_ADDR
64886: GO 64939
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64888: LD_ADDR_EXP 88
64892: PUSH
64893: LD_EXP 88
64897: PPUSH
64898: LD_VAR 0 1
64902: PPUSH
64903: LD_VAR 0 1
64907: PPUSH
64908: CALL_OW 255
64912: PUSH
64913: LD_VAR 0 1
64917: PUSH
64918: LD_VAR 0 2
64922: PUSH
64923: LD_VAR 0 3
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: PPUSH
64934: CALL_OW 1
64938: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64939: CALL 64948 0 0
// end ;
64943: LD_VAR 0 4
64947: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64948: LD_INT 0
64950: PPUSH
64951: PPUSH
64952: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64953: LD_STRING resetWarehouseGatheringPoints();
64955: PPUSH
64956: CALL_OW 559
// if warehouseGatheringPoints then
64960: LD_EXP 88
64964: IFFALSE 65090
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64966: LD_ADDR_VAR 0 3
64970: PUSH
64971: LD_EXP 88
64975: PPUSH
64976: CALL 49679 0 1
64980: ST_TO_ADDR
// for i := 1 to list do
64981: LD_ADDR_VAR 0 2
64985: PUSH
64986: DOUBLE
64987: LD_INT 1
64989: DEC
64990: ST_TO_ADDR
64991: LD_VAR 0 3
64995: PUSH
64996: FOR_TO
64997: IFFALSE 65088
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64999: LD_STRING setWarehouseGatheringPointXY(
65001: PUSH
65002: LD_VAR 0 3
65006: PUSH
65007: LD_VAR 0 2
65011: ARRAY
65012: PUSH
65013: LD_INT 1
65015: ARRAY
65016: STR
65017: PUSH
65018: LD_STRING ,
65020: STR
65021: PUSH
65022: LD_VAR 0 3
65026: PUSH
65027: LD_VAR 0 2
65031: ARRAY
65032: PUSH
65033: LD_INT 2
65035: ARRAY
65036: STR
65037: PUSH
65038: LD_STRING ,
65040: STR
65041: PUSH
65042: LD_VAR 0 3
65046: PUSH
65047: LD_VAR 0 2
65051: ARRAY
65052: PUSH
65053: LD_INT 3
65055: ARRAY
65056: STR
65057: PUSH
65058: LD_STRING ,
65060: STR
65061: PUSH
65062: LD_VAR 0 3
65066: PUSH
65067: LD_VAR 0 2
65071: ARRAY
65072: PUSH
65073: LD_INT 4
65075: ARRAY
65076: STR
65077: PUSH
65078: LD_STRING )
65080: STR
65081: PPUSH
65082: CALL_OW 559
65086: GO 64996
65088: POP
65089: POP
// end ; end ;
65090: LD_VAR 0 1
65094: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
65095: LD_EXP 88
65099: IFFALSE 65784
65101: GO 65103
65103: DISABLE
65104: LD_INT 0
65106: PPUSH
65107: PPUSH
65108: PPUSH
65109: PPUSH
65110: PPUSH
65111: PPUSH
65112: PPUSH
65113: PPUSH
65114: PPUSH
// begin enable ;
65115: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
65116: LD_ADDR_VAR 0 3
65120: PUSH
65121: LD_EXP 88
65125: PPUSH
65126: CALL 49679 0 1
65130: ST_TO_ADDR
// if not list then
65131: LD_VAR 0 3
65135: NOT
65136: IFFALSE 65140
// exit ;
65138: GO 65784
// for i := 1 to list do
65140: LD_ADDR_VAR 0 1
65144: PUSH
65145: DOUBLE
65146: LD_INT 1
65148: DEC
65149: ST_TO_ADDR
65150: LD_VAR 0 3
65154: PUSH
65155: FOR_TO
65156: IFFALSE 65782
// begin depot := list [ i ] [ 2 ] ;
65158: LD_ADDR_VAR 0 8
65162: PUSH
65163: LD_VAR 0 3
65167: PUSH
65168: LD_VAR 0 1
65172: ARRAY
65173: PUSH
65174: LD_INT 2
65176: ARRAY
65177: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
65178: LD_ADDR_VAR 0 5
65182: PUSH
65183: LD_VAR 0 3
65187: PUSH
65188: LD_VAR 0 1
65192: ARRAY
65193: PUSH
65194: LD_INT 1
65196: ARRAY
65197: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
65198: LD_VAR 0 8
65202: PPUSH
65203: CALL_OW 301
65207: PUSH
65208: LD_VAR 0 5
65212: PUSH
65213: LD_VAR 0 8
65217: PPUSH
65218: CALL_OW 255
65222: NONEQUAL
65223: OR
65224: IFFALSE 65253
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
65226: LD_ADDR_EXP 88
65230: PUSH
65231: LD_EXP 88
65235: PPUSH
65236: LD_VAR 0 8
65240: PPUSH
65241: LD_INT 0
65243: PPUSH
65244: CALL_OW 1
65248: ST_TO_ADDR
// exit ;
65249: POP
65250: POP
65251: GO 65784
// end ; x := list [ i ] [ 3 ] ;
65253: LD_ADDR_VAR 0 6
65257: PUSH
65258: LD_VAR 0 3
65262: PUSH
65263: LD_VAR 0 1
65267: ARRAY
65268: PUSH
65269: LD_INT 3
65271: ARRAY
65272: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
65273: LD_ADDR_VAR 0 7
65277: PUSH
65278: LD_VAR 0 3
65282: PUSH
65283: LD_VAR 0 1
65287: ARRAY
65288: PUSH
65289: LD_INT 4
65291: ARRAY
65292: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
65293: LD_ADDR_VAR 0 9
65297: PUSH
65298: LD_VAR 0 6
65302: PPUSH
65303: LD_VAR 0 7
65307: PPUSH
65308: LD_INT 16
65310: PPUSH
65311: CALL 48267 0 3
65315: ST_TO_ADDR
// if not cratesNearbyPoint then
65316: LD_VAR 0 9
65320: NOT
65321: IFFALSE 65327
// exit ;
65323: POP
65324: POP
65325: GO 65784
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
65327: LD_ADDR_VAR 0 4
65331: PUSH
65332: LD_INT 22
65334: PUSH
65335: LD_VAR 0 5
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 3
65346: PUSH
65347: LD_INT 60
65349: PUSH
65350: EMPTY
65351: LIST
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 91
65359: PUSH
65360: LD_VAR 0 8
65364: PUSH
65365: LD_INT 6
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 2
65375: PUSH
65376: LD_INT 25
65378: PUSH
65379: LD_INT 2
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 25
65388: PUSH
65389: LD_INT 16
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: LIST
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: PPUSH
65407: CALL_OW 69
65411: PUSH
65412: LD_VAR 0 8
65416: PPUSH
65417: CALL_OW 313
65421: PPUSH
65422: LD_INT 3
65424: PUSH
65425: LD_INT 60
65427: PUSH
65428: EMPTY
65429: LIST
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 2
65437: PUSH
65438: LD_INT 25
65440: PUSH
65441: LD_INT 2
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 25
65450: PUSH
65451: LD_INT 16
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: LIST
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PPUSH
65467: CALL_OW 72
65471: UNION
65472: ST_TO_ADDR
// if tmp then
65473: LD_VAR 0 4
65477: IFFALSE 65557
// begin tmp := ShrinkArray ( tmp , 3 ) ;
65479: LD_ADDR_VAR 0 4
65483: PUSH
65484: LD_VAR 0 4
65488: PPUSH
65489: LD_INT 3
65491: PPUSH
65492: CALL 46236 0 2
65496: ST_TO_ADDR
// for j in tmp do
65497: LD_ADDR_VAR 0 2
65501: PUSH
65502: LD_VAR 0 4
65506: PUSH
65507: FOR_IN
65508: IFFALSE 65551
// begin if IsInUnit ( j ) then
65510: LD_VAR 0 2
65514: PPUSH
65515: CALL_OW 310
65519: IFFALSE 65530
// ComExit ( j ) ;
65521: LD_VAR 0 2
65525: PPUSH
65526: CALL 46319 0 1
// AddComCollect ( j , x , y ) ;
65530: LD_VAR 0 2
65534: PPUSH
65535: LD_VAR 0 6
65539: PPUSH
65540: LD_VAR 0 7
65544: PPUSH
65545: CALL_OW 177
// end ;
65549: GO 65507
65551: POP
65552: POP
// exit ;
65553: POP
65554: POP
65555: GO 65784
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
65557: LD_ADDR_VAR 0 4
65561: PUSH
65562: LD_INT 22
65564: PUSH
65565: LD_VAR 0 5
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 91
65576: PUSH
65577: LD_VAR 0 8
65581: PUSH
65582: LD_INT 8
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 2
65592: PUSH
65593: LD_INT 34
65595: PUSH
65596: LD_INT 12
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 34
65605: PUSH
65606: LD_INT 51
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 34
65615: PUSH
65616: LD_INT 32
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 34
65625: PUSH
65626: LD_INT 89
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: LIST
65644: PPUSH
65645: CALL_OW 69
65649: ST_TO_ADDR
// if tmp then
65650: LD_VAR 0 4
65654: IFFALSE 65780
// begin for j in tmp do
65656: LD_ADDR_VAR 0 2
65660: PUSH
65661: LD_VAR 0 4
65665: PUSH
65666: FOR_IN
65667: IFFALSE 65778
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
65669: LD_VAR 0 2
65673: PPUSH
65674: CALL_OW 262
65678: PUSH
65679: LD_INT 3
65681: EQUAL
65682: PUSH
65683: LD_VAR 0 2
65687: PPUSH
65688: CALL_OW 261
65692: PUSH
65693: LD_INT 20
65695: GREATER
65696: OR
65697: PUSH
65698: LD_VAR 0 2
65702: PPUSH
65703: CALL_OW 314
65707: NOT
65708: AND
65709: PUSH
65710: LD_VAR 0 2
65714: PPUSH
65715: CALL_OW 263
65719: PUSH
65720: LD_INT 1
65722: NONEQUAL
65723: PUSH
65724: LD_VAR 0 2
65728: PPUSH
65729: CALL_OW 311
65733: OR
65734: AND
65735: IFFALSE 65776
// begin ComCollect ( j , x , y ) ;
65737: LD_VAR 0 2
65741: PPUSH
65742: LD_VAR 0 6
65746: PPUSH
65747: LD_VAR 0 7
65751: PPUSH
65752: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
65756: LD_VAR 0 2
65760: PPUSH
65761: LD_VAR 0 8
65765: PPUSH
65766: CALL_OW 172
// exit ;
65770: POP
65771: POP
65772: POP
65773: POP
65774: GO 65784
// end ;
65776: GO 65666
65778: POP
65779: POP
// end ; end ;
65780: GO 65155
65782: POP
65783: POP
// end ; end_of_file
65784: PPOPN 9
65786: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
65787: LD_INT 0
65789: PPUSH
65790: PPUSH
65791: PPUSH
65792: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
65793: LD_VAR 0 1
65797: PPUSH
65798: CALL_OW 264
65802: PUSH
65803: LD_INT 91
65805: EQUAL
65806: IFFALSE 65878
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
65808: LD_INT 68
65810: PPUSH
65811: LD_VAR 0 1
65815: PPUSH
65816: CALL_OW 255
65820: PPUSH
65821: CALL_OW 321
65825: PUSH
65826: LD_INT 2
65828: EQUAL
65829: IFFALSE 65841
// eff := 70 else
65831: LD_ADDR_VAR 0 4
65835: PUSH
65836: LD_INT 70
65838: ST_TO_ADDR
65839: GO 65849
// eff := 30 ;
65841: LD_ADDR_VAR 0 4
65845: PUSH
65846: LD_INT 30
65848: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
65849: LD_VAR 0 1
65853: PPUSH
65854: CALL_OW 250
65858: PPUSH
65859: LD_VAR 0 1
65863: PPUSH
65864: CALL_OW 251
65868: PPUSH
65869: LD_VAR 0 4
65873: PPUSH
65874: CALL_OW 495
// end ; end ;
65878: LD_VAR 0 2
65882: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
65883: LD_INT 0
65885: PPUSH
// end ;
65886: LD_VAR 0 4
65890: RET
// export function SOS_Command ( cmd ) ; begin
65891: LD_INT 0
65893: PPUSH
// end ;
65894: LD_VAR 0 2
65898: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
65899: LD_INT 0
65901: PPUSH
// end ;
65902: LD_VAR 0 6
65906: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
65907: LD_INT 0
65909: PPUSH
65910: PPUSH
// if not vehicle or not factory then
65911: LD_VAR 0 1
65915: NOT
65916: PUSH
65917: LD_VAR 0 2
65921: NOT
65922: OR
65923: IFFALSE 65927
// exit ;
65925: GO 66158
// if factoryWaypoints >= factory then
65927: LD_EXP 87
65931: PUSH
65932: LD_VAR 0 2
65936: GREATEREQUAL
65937: IFFALSE 66158
// if factoryWaypoints [ factory ] then
65939: LD_EXP 87
65943: PUSH
65944: LD_VAR 0 2
65948: ARRAY
65949: IFFALSE 66158
// begin if GetControl ( vehicle ) = control_manual then
65951: LD_VAR 0 1
65955: PPUSH
65956: CALL_OW 263
65960: PUSH
65961: LD_INT 1
65963: EQUAL
65964: IFFALSE 66045
// begin driver := IsDrivenBy ( vehicle ) ;
65966: LD_ADDR_VAR 0 4
65970: PUSH
65971: LD_VAR 0 1
65975: PPUSH
65976: CALL_OW 311
65980: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65981: LD_VAR 0 4
65985: PPUSH
65986: LD_EXP 87
65990: PUSH
65991: LD_VAR 0 2
65995: ARRAY
65996: PUSH
65997: LD_INT 3
65999: ARRAY
66000: PPUSH
66001: LD_EXP 87
66005: PUSH
66006: LD_VAR 0 2
66010: ARRAY
66011: PUSH
66012: LD_INT 4
66014: ARRAY
66015: PPUSH
66016: CALL_OW 171
// AddComExitVehicle ( driver ) ;
66020: LD_VAR 0 4
66024: PPUSH
66025: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
66029: LD_VAR 0 4
66033: PPUSH
66034: LD_VAR 0 2
66038: PPUSH
66039: CALL_OW 180
// end else
66043: GO 66158
// if GetControl ( vehicle ) = control_remote then
66045: LD_VAR 0 1
66049: PPUSH
66050: CALL_OW 263
66054: PUSH
66055: LD_INT 2
66057: EQUAL
66058: IFFALSE 66119
// begin wait ( 0 0$2 ) ;
66060: LD_INT 70
66062: PPUSH
66063: CALL_OW 67
// if Connect ( vehicle ) then
66067: LD_VAR 0 1
66071: PPUSH
66072: CALL 16560 0 1
66076: IFFALSE 66117
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66078: LD_VAR 0 1
66082: PPUSH
66083: LD_EXP 87
66087: PUSH
66088: LD_VAR 0 2
66092: ARRAY
66093: PUSH
66094: LD_INT 3
66096: ARRAY
66097: PPUSH
66098: LD_EXP 87
66102: PUSH
66103: LD_VAR 0 2
66107: ARRAY
66108: PUSH
66109: LD_INT 4
66111: ARRAY
66112: PPUSH
66113: CALL_OW 171
// end else
66117: GO 66158
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66119: LD_VAR 0 1
66123: PPUSH
66124: LD_EXP 87
66128: PUSH
66129: LD_VAR 0 2
66133: ARRAY
66134: PUSH
66135: LD_INT 3
66137: ARRAY
66138: PPUSH
66139: LD_EXP 87
66143: PUSH
66144: LD_VAR 0 2
66148: ARRAY
66149: PUSH
66150: LD_INT 4
66152: ARRAY
66153: PPUSH
66154: CALL_OW 171
// end ; end ;
66158: LD_VAR 0 3
66162: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
66163: LD_INT 0
66165: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
66166: LD_VAR 0 1
66170: PUSH
66171: LD_INT 250
66173: EQUAL
66174: PUSH
66175: LD_VAR 0 2
66179: PPUSH
66180: CALL_OW 264
66184: PUSH
66185: LD_INT 81
66187: EQUAL
66188: AND
66189: IFFALSE 66210
// MinerPlaceMine ( unit , x , y ) ;
66191: LD_VAR 0 2
66195: PPUSH
66196: LD_VAR 0 4
66200: PPUSH
66201: LD_VAR 0 5
66205: PPUSH
66206: CALL 68595 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
66210: LD_VAR 0 1
66214: PUSH
66215: LD_INT 251
66217: EQUAL
66218: PUSH
66219: LD_VAR 0 2
66223: PPUSH
66224: CALL_OW 264
66228: PUSH
66229: LD_INT 81
66231: EQUAL
66232: AND
66233: IFFALSE 66254
// MinerDetonateMine ( unit , x , y ) ;
66235: LD_VAR 0 2
66239: PPUSH
66240: LD_VAR 0 4
66244: PPUSH
66245: LD_VAR 0 5
66249: PPUSH
66250: CALL 68870 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
66254: LD_VAR 0 1
66258: PUSH
66259: LD_INT 252
66261: EQUAL
66262: PUSH
66263: LD_VAR 0 2
66267: PPUSH
66268: CALL_OW 264
66272: PUSH
66273: LD_INT 81
66275: EQUAL
66276: AND
66277: IFFALSE 66298
// MinerCreateMinefield ( unit , x , y ) ;
66279: LD_VAR 0 2
66283: PPUSH
66284: LD_VAR 0 4
66288: PPUSH
66289: LD_VAR 0 5
66293: PPUSH
66294: CALL 69287 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
66298: LD_VAR 0 1
66302: PUSH
66303: LD_INT 253
66305: EQUAL
66306: PUSH
66307: LD_VAR 0 2
66311: PPUSH
66312: CALL_OW 257
66316: PUSH
66317: LD_INT 5
66319: EQUAL
66320: AND
66321: IFFALSE 66342
// ComBinocular ( unit , x , y ) ;
66323: LD_VAR 0 2
66327: PPUSH
66328: LD_VAR 0 4
66332: PPUSH
66333: LD_VAR 0 5
66337: PPUSH
66338: CALL 69656 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
66342: LD_VAR 0 1
66346: PUSH
66347: LD_INT 254
66349: EQUAL
66350: PUSH
66351: LD_VAR 0 2
66355: PPUSH
66356: CALL_OW 264
66360: PUSH
66361: LD_INT 99
66363: EQUAL
66364: AND
66365: PUSH
66366: LD_VAR 0 3
66370: PPUSH
66371: CALL_OW 263
66375: PUSH
66376: LD_INT 3
66378: EQUAL
66379: AND
66380: IFFALSE 66396
// HackDestroyVehicle ( unit , selectedUnit ) ;
66382: LD_VAR 0 2
66386: PPUSH
66387: LD_VAR 0 3
66391: PPUSH
66392: CALL 67959 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
66396: LD_VAR 0 1
66400: PUSH
66401: LD_INT 255
66403: EQUAL
66404: PUSH
66405: LD_VAR 0 2
66409: PPUSH
66410: CALL_OW 264
66414: PUSH
66415: LD_INT 14
66417: PUSH
66418: LD_INT 53
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: IN
66425: AND
66426: PUSH
66427: LD_VAR 0 4
66431: PPUSH
66432: LD_VAR 0 5
66436: PPUSH
66437: CALL_OW 488
66441: AND
66442: IFFALSE 66466
// CutTreeXYR ( unit , x , y , 12 ) ;
66444: LD_VAR 0 2
66448: PPUSH
66449: LD_VAR 0 4
66453: PPUSH
66454: LD_VAR 0 5
66458: PPUSH
66459: LD_INT 12
66461: PPUSH
66462: CALL 66529 0 4
// if cmd = 256 then
66466: LD_VAR 0 1
66470: PUSH
66471: LD_INT 256
66473: EQUAL
66474: IFFALSE 66495
// SetFactoryWaypoint ( unit , x , y ) ;
66476: LD_VAR 0 2
66480: PPUSH
66481: LD_VAR 0 4
66485: PPUSH
66486: LD_VAR 0 5
66490: PPUSH
66491: CALL 64476 0 3
// if cmd = 257 then
66495: LD_VAR 0 1
66499: PUSH
66500: LD_INT 257
66502: EQUAL
66503: IFFALSE 66524
// SetWarehouseGatheringPoint ( unit , x , y ) ;
66505: LD_VAR 0 2
66509: PPUSH
66510: LD_VAR 0 4
66514: PPUSH
66515: LD_VAR 0 5
66519: PPUSH
66520: CALL 64838 0 3
// end ;
66524: LD_VAR 0 6
66528: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
66529: LD_INT 0
66531: PPUSH
66532: PPUSH
66533: PPUSH
66534: PPUSH
66535: PPUSH
66536: PPUSH
66537: PPUSH
66538: PPUSH
66539: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
66540: LD_VAR 0 1
66544: NOT
66545: PUSH
66546: LD_VAR 0 2
66550: PPUSH
66551: LD_VAR 0 3
66555: PPUSH
66556: CALL_OW 488
66560: NOT
66561: OR
66562: PUSH
66563: LD_VAR 0 4
66567: NOT
66568: OR
66569: IFFALSE 66573
// exit ;
66571: GO 66913
// list := [ ] ;
66573: LD_ADDR_VAR 0 13
66577: PUSH
66578: EMPTY
66579: ST_TO_ADDR
// if x - r < 0 then
66580: LD_VAR 0 2
66584: PUSH
66585: LD_VAR 0 4
66589: MINUS
66590: PUSH
66591: LD_INT 0
66593: LESS
66594: IFFALSE 66606
// min_x := 0 else
66596: LD_ADDR_VAR 0 7
66600: PUSH
66601: LD_INT 0
66603: ST_TO_ADDR
66604: GO 66622
// min_x := x - r ;
66606: LD_ADDR_VAR 0 7
66610: PUSH
66611: LD_VAR 0 2
66615: PUSH
66616: LD_VAR 0 4
66620: MINUS
66621: ST_TO_ADDR
// if y - r < 0 then
66622: LD_VAR 0 3
66626: PUSH
66627: LD_VAR 0 4
66631: MINUS
66632: PUSH
66633: LD_INT 0
66635: LESS
66636: IFFALSE 66648
// min_y := 0 else
66638: LD_ADDR_VAR 0 8
66642: PUSH
66643: LD_INT 0
66645: ST_TO_ADDR
66646: GO 66664
// min_y := y - r ;
66648: LD_ADDR_VAR 0 8
66652: PUSH
66653: LD_VAR 0 3
66657: PUSH
66658: LD_VAR 0 4
66662: MINUS
66663: ST_TO_ADDR
// max_x := x + r ;
66664: LD_ADDR_VAR 0 9
66668: PUSH
66669: LD_VAR 0 2
66673: PUSH
66674: LD_VAR 0 4
66678: PLUS
66679: ST_TO_ADDR
// max_y := y + r ;
66680: LD_ADDR_VAR 0 10
66684: PUSH
66685: LD_VAR 0 3
66689: PUSH
66690: LD_VAR 0 4
66694: PLUS
66695: ST_TO_ADDR
// for _x = min_x to max_x do
66696: LD_ADDR_VAR 0 11
66700: PUSH
66701: DOUBLE
66702: LD_VAR 0 7
66706: DEC
66707: ST_TO_ADDR
66708: LD_VAR 0 9
66712: PUSH
66713: FOR_TO
66714: IFFALSE 66831
// for _y = min_y to max_y do
66716: LD_ADDR_VAR 0 12
66720: PUSH
66721: DOUBLE
66722: LD_VAR 0 8
66726: DEC
66727: ST_TO_ADDR
66728: LD_VAR 0 10
66732: PUSH
66733: FOR_TO
66734: IFFALSE 66827
// begin if not ValidHex ( _x , _y ) then
66736: LD_VAR 0 11
66740: PPUSH
66741: LD_VAR 0 12
66745: PPUSH
66746: CALL_OW 488
66750: NOT
66751: IFFALSE 66755
// continue ;
66753: GO 66733
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
66755: LD_VAR 0 11
66759: PPUSH
66760: LD_VAR 0 12
66764: PPUSH
66765: CALL_OW 351
66769: PUSH
66770: LD_VAR 0 11
66774: PPUSH
66775: LD_VAR 0 12
66779: PPUSH
66780: CALL_OW 554
66784: AND
66785: IFFALSE 66825
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
66787: LD_ADDR_VAR 0 13
66791: PUSH
66792: LD_VAR 0 13
66796: PPUSH
66797: LD_VAR 0 13
66801: PUSH
66802: LD_INT 1
66804: PLUS
66805: PPUSH
66806: LD_VAR 0 11
66810: PUSH
66811: LD_VAR 0 12
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PPUSH
66820: CALL_OW 2
66824: ST_TO_ADDR
// end ;
66825: GO 66733
66827: POP
66828: POP
66829: GO 66713
66831: POP
66832: POP
// if not list then
66833: LD_VAR 0 13
66837: NOT
66838: IFFALSE 66842
// exit ;
66840: GO 66913
// for i in list do
66842: LD_ADDR_VAR 0 6
66846: PUSH
66847: LD_VAR 0 13
66851: PUSH
66852: FOR_IN
66853: IFFALSE 66911
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
66855: LD_VAR 0 1
66859: PPUSH
66860: LD_STRING M
66862: PUSH
66863: LD_VAR 0 6
66867: PUSH
66868: LD_INT 1
66870: ARRAY
66871: PUSH
66872: LD_VAR 0 6
66876: PUSH
66877: LD_INT 2
66879: ARRAY
66880: PUSH
66881: LD_INT 0
66883: PUSH
66884: LD_INT 0
66886: PUSH
66887: LD_INT 0
66889: PUSH
66890: LD_INT 0
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: PUSH
66902: EMPTY
66903: LIST
66904: PPUSH
66905: CALL_OW 447
66909: GO 66852
66911: POP
66912: POP
// end ;
66913: LD_VAR 0 5
66917: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
66918: LD_EXP 90
66922: NOT
66923: IFFALSE 66973
66925: GO 66927
66927: DISABLE
// begin initHack := true ;
66928: LD_ADDR_EXP 90
66932: PUSH
66933: LD_INT 1
66935: ST_TO_ADDR
// hackTanks := [ ] ;
66936: LD_ADDR_EXP 91
66940: PUSH
66941: EMPTY
66942: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
66943: LD_ADDR_EXP 92
66947: PUSH
66948: EMPTY
66949: ST_TO_ADDR
// hackLimit := 3 ;
66950: LD_ADDR_EXP 93
66954: PUSH
66955: LD_INT 3
66957: ST_TO_ADDR
// hackDist := 12 ;
66958: LD_ADDR_EXP 94
66962: PUSH
66963: LD_INT 12
66965: ST_TO_ADDR
// hackCounter := [ ] ;
66966: LD_ADDR_EXP 95
66970: PUSH
66971: EMPTY
66972: ST_TO_ADDR
// end ;
66973: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
66974: LD_EXP 90
66978: PUSH
66979: LD_INT 34
66981: PUSH
66982: LD_INT 99
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PPUSH
66989: CALL_OW 69
66993: AND
66994: IFFALSE 67247
66996: GO 66998
66998: DISABLE
66999: LD_INT 0
67001: PPUSH
67002: PPUSH
// begin enable ;
67003: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
67004: LD_ADDR_VAR 0 1
67008: PUSH
67009: LD_INT 34
67011: PUSH
67012: LD_INT 99
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PPUSH
67019: CALL_OW 69
67023: PUSH
67024: FOR_IN
67025: IFFALSE 67245
// begin if not i in hackTanks then
67027: LD_VAR 0 1
67031: PUSH
67032: LD_EXP 91
67036: IN
67037: NOT
67038: IFFALSE 67121
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
67040: LD_ADDR_EXP 91
67044: PUSH
67045: LD_EXP 91
67049: PPUSH
67050: LD_EXP 91
67054: PUSH
67055: LD_INT 1
67057: PLUS
67058: PPUSH
67059: LD_VAR 0 1
67063: PPUSH
67064: CALL_OW 1
67068: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
67069: LD_ADDR_EXP 92
67073: PUSH
67074: LD_EXP 92
67078: PPUSH
67079: LD_EXP 92
67083: PUSH
67084: LD_INT 1
67086: PLUS
67087: PPUSH
67088: EMPTY
67089: PPUSH
67090: CALL_OW 1
67094: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
67095: LD_ADDR_EXP 95
67099: PUSH
67100: LD_EXP 95
67104: PPUSH
67105: LD_EXP 95
67109: PUSH
67110: LD_INT 1
67112: PLUS
67113: PPUSH
67114: EMPTY
67115: PPUSH
67116: CALL_OW 1
67120: ST_TO_ADDR
// end ; if not IsOk ( i ) then
67121: LD_VAR 0 1
67125: PPUSH
67126: CALL_OW 302
67130: NOT
67131: IFFALSE 67144
// begin HackUnlinkAll ( i ) ;
67133: LD_VAR 0 1
67137: PPUSH
67138: CALL 67250 0 1
// continue ;
67142: GO 67024
// end ; HackCheckCapturedStatus ( i ) ;
67144: LD_VAR 0 1
67148: PPUSH
67149: CALL 67693 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
67153: LD_ADDR_VAR 0 2
67157: PUSH
67158: LD_INT 81
67160: PUSH
67161: LD_VAR 0 1
67165: PPUSH
67166: CALL_OW 255
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 33
67177: PUSH
67178: LD_INT 3
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 91
67187: PUSH
67188: LD_VAR 0 1
67192: PUSH
67193: LD_EXP 94
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 50
67205: PUSH
67206: EMPTY
67207: LIST
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: PPUSH
67215: CALL_OW 69
67219: ST_TO_ADDR
// if not tmp then
67220: LD_VAR 0 2
67224: NOT
67225: IFFALSE 67229
// continue ;
67227: GO 67024
// HackLink ( i , tmp ) ;
67229: LD_VAR 0 1
67233: PPUSH
67234: LD_VAR 0 2
67238: PPUSH
67239: CALL 67386 0 2
// end ;
67243: GO 67024
67245: POP
67246: POP
// end ;
67247: PPOPN 2
67249: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
67250: LD_INT 0
67252: PPUSH
67253: PPUSH
67254: PPUSH
// if not hack in hackTanks then
67255: LD_VAR 0 1
67259: PUSH
67260: LD_EXP 91
67264: IN
67265: NOT
67266: IFFALSE 67270
// exit ;
67268: GO 67381
// index := GetElementIndex ( hackTanks , hack ) ;
67270: LD_ADDR_VAR 0 4
67274: PUSH
67275: LD_EXP 91
67279: PPUSH
67280: LD_VAR 0 1
67284: PPUSH
67285: CALL 13376 0 2
67289: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
67290: LD_EXP 92
67294: PUSH
67295: LD_VAR 0 4
67299: ARRAY
67300: IFFALSE 67381
// begin for i in hackTanksCaptured [ index ] do
67302: LD_ADDR_VAR 0 3
67306: PUSH
67307: LD_EXP 92
67311: PUSH
67312: LD_VAR 0 4
67316: ARRAY
67317: PUSH
67318: FOR_IN
67319: IFFALSE 67345
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
67321: LD_VAR 0 3
67325: PUSH
67326: LD_INT 1
67328: ARRAY
67329: PPUSH
67330: LD_VAR 0 3
67334: PUSH
67335: LD_INT 2
67337: ARRAY
67338: PPUSH
67339: CALL_OW 235
67343: GO 67318
67345: POP
67346: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
67347: LD_ADDR_EXP 92
67351: PUSH
67352: LD_EXP 92
67356: PPUSH
67357: LD_VAR 0 4
67361: PPUSH
67362: EMPTY
67363: PPUSH
67364: CALL_OW 1
67368: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
67369: LD_VAR 0 1
67373: PPUSH
67374: LD_INT 0
67376: PPUSH
67377: CALL_OW 505
// end ; end ;
67381: LD_VAR 0 2
67385: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
67386: LD_INT 0
67388: PPUSH
67389: PPUSH
67390: PPUSH
// if not hack in hackTanks or not vehicles then
67391: LD_VAR 0 1
67395: PUSH
67396: LD_EXP 91
67400: IN
67401: NOT
67402: PUSH
67403: LD_VAR 0 2
67407: NOT
67408: OR
67409: IFFALSE 67413
// exit ;
67411: GO 67688
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
67413: LD_ADDR_VAR 0 2
67417: PUSH
67418: LD_VAR 0 1
67422: PPUSH
67423: LD_VAR 0 2
67427: PPUSH
67428: LD_INT 1
67430: PPUSH
67431: LD_INT 1
67433: PPUSH
67434: CALL 14026 0 4
67438: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
67439: LD_ADDR_VAR 0 5
67443: PUSH
67444: LD_EXP 91
67448: PPUSH
67449: LD_VAR 0 1
67453: PPUSH
67454: CALL 13376 0 2
67458: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
67459: LD_EXP 92
67463: PUSH
67464: LD_VAR 0 5
67468: ARRAY
67469: PUSH
67470: LD_EXP 93
67474: LESS
67475: IFFALSE 67664
// begin for i := 1 to vehicles do
67477: LD_ADDR_VAR 0 4
67481: PUSH
67482: DOUBLE
67483: LD_INT 1
67485: DEC
67486: ST_TO_ADDR
67487: LD_VAR 0 2
67491: PUSH
67492: FOR_TO
67493: IFFALSE 67662
// begin if hackTanksCaptured [ index ] = hackLimit then
67495: LD_EXP 92
67499: PUSH
67500: LD_VAR 0 5
67504: ARRAY
67505: PUSH
67506: LD_EXP 93
67510: EQUAL
67511: IFFALSE 67515
// break ;
67513: GO 67662
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
67515: LD_ADDR_EXP 95
67519: PUSH
67520: LD_EXP 95
67524: PPUSH
67525: LD_VAR 0 5
67529: PPUSH
67530: LD_EXP 95
67534: PUSH
67535: LD_VAR 0 5
67539: ARRAY
67540: PUSH
67541: LD_INT 1
67543: PLUS
67544: PPUSH
67545: CALL_OW 1
67549: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
67550: LD_ADDR_EXP 92
67554: PUSH
67555: LD_EXP 92
67559: PPUSH
67560: LD_VAR 0 5
67564: PUSH
67565: LD_EXP 92
67569: PUSH
67570: LD_VAR 0 5
67574: ARRAY
67575: PUSH
67576: LD_INT 1
67578: PLUS
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PPUSH
67584: LD_VAR 0 2
67588: PUSH
67589: LD_VAR 0 4
67593: ARRAY
67594: PUSH
67595: LD_VAR 0 2
67599: PUSH
67600: LD_VAR 0 4
67604: ARRAY
67605: PPUSH
67606: CALL_OW 255
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PPUSH
67615: CALL 13591 0 3
67619: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
67620: LD_VAR 0 2
67624: PUSH
67625: LD_VAR 0 4
67629: ARRAY
67630: PPUSH
67631: LD_VAR 0 1
67635: PPUSH
67636: CALL_OW 255
67640: PPUSH
67641: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
67645: LD_VAR 0 2
67649: PUSH
67650: LD_VAR 0 4
67654: ARRAY
67655: PPUSH
67656: CALL_OW 141
// end ;
67660: GO 67492
67662: POP
67663: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67664: LD_VAR 0 1
67668: PPUSH
67669: LD_EXP 92
67673: PUSH
67674: LD_VAR 0 5
67678: ARRAY
67679: PUSH
67680: LD_INT 0
67682: PLUS
67683: PPUSH
67684: CALL_OW 505
// end ;
67688: LD_VAR 0 3
67692: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
67693: LD_INT 0
67695: PPUSH
67696: PPUSH
67697: PPUSH
67698: PPUSH
// if not hack in hackTanks then
67699: LD_VAR 0 1
67703: PUSH
67704: LD_EXP 91
67708: IN
67709: NOT
67710: IFFALSE 67714
// exit ;
67712: GO 67954
// index := GetElementIndex ( hackTanks , hack ) ;
67714: LD_ADDR_VAR 0 4
67718: PUSH
67719: LD_EXP 91
67723: PPUSH
67724: LD_VAR 0 1
67728: PPUSH
67729: CALL 13376 0 2
67733: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
67734: LD_ADDR_VAR 0 3
67738: PUSH
67739: DOUBLE
67740: LD_EXP 92
67744: PUSH
67745: LD_VAR 0 4
67749: ARRAY
67750: INC
67751: ST_TO_ADDR
67752: LD_INT 1
67754: PUSH
67755: FOR_DOWNTO
67756: IFFALSE 67928
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
67758: LD_ADDR_VAR 0 5
67762: PUSH
67763: LD_EXP 92
67767: PUSH
67768: LD_VAR 0 4
67772: ARRAY
67773: PUSH
67774: LD_VAR 0 3
67778: ARRAY
67779: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
67780: LD_VAR 0 5
67784: PUSH
67785: LD_INT 1
67787: ARRAY
67788: PPUSH
67789: CALL_OW 302
67793: NOT
67794: PUSH
67795: LD_VAR 0 5
67799: PUSH
67800: LD_INT 1
67802: ARRAY
67803: PPUSH
67804: CALL_OW 255
67808: PUSH
67809: LD_VAR 0 1
67813: PPUSH
67814: CALL_OW 255
67818: NONEQUAL
67819: OR
67820: IFFALSE 67926
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
67822: LD_VAR 0 5
67826: PUSH
67827: LD_INT 1
67829: ARRAY
67830: PPUSH
67831: CALL_OW 305
67835: PUSH
67836: LD_VAR 0 5
67840: PUSH
67841: LD_INT 1
67843: ARRAY
67844: PPUSH
67845: CALL_OW 255
67849: PUSH
67850: LD_VAR 0 1
67854: PPUSH
67855: CALL_OW 255
67859: EQUAL
67860: AND
67861: IFFALSE 67885
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
67863: LD_VAR 0 5
67867: PUSH
67868: LD_INT 1
67870: ARRAY
67871: PPUSH
67872: LD_VAR 0 5
67876: PUSH
67877: LD_INT 2
67879: ARRAY
67880: PPUSH
67881: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
67885: LD_ADDR_EXP 92
67889: PUSH
67890: LD_EXP 92
67894: PPUSH
67895: LD_VAR 0 4
67899: PPUSH
67900: LD_EXP 92
67904: PUSH
67905: LD_VAR 0 4
67909: ARRAY
67910: PPUSH
67911: LD_VAR 0 3
67915: PPUSH
67916: CALL_OW 3
67920: PPUSH
67921: CALL_OW 1
67925: ST_TO_ADDR
// end ; end ;
67926: GO 67755
67928: POP
67929: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67930: LD_VAR 0 1
67934: PPUSH
67935: LD_EXP 92
67939: PUSH
67940: LD_VAR 0 4
67944: ARRAY
67945: PUSH
67946: LD_INT 0
67948: PLUS
67949: PPUSH
67950: CALL_OW 505
// end ;
67954: LD_VAR 0 2
67958: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
67959: LD_INT 0
67961: PPUSH
67962: PPUSH
67963: PPUSH
67964: PPUSH
// if not hack in hackTanks then
67965: LD_VAR 0 1
67969: PUSH
67970: LD_EXP 91
67974: IN
67975: NOT
67976: IFFALSE 67980
// exit ;
67978: GO 68065
// index := GetElementIndex ( hackTanks , hack ) ;
67980: LD_ADDR_VAR 0 5
67984: PUSH
67985: LD_EXP 91
67989: PPUSH
67990: LD_VAR 0 1
67994: PPUSH
67995: CALL 13376 0 2
67999: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
68000: LD_ADDR_VAR 0 4
68004: PUSH
68005: DOUBLE
68006: LD_INT 1
68008: DEC
68009: ST_TO_ADDR
68010: LD_EXP 92
68014: PUSH
68015: LD_VAR 0 5
68019: ARRAY
68020: PUSH
68021: FOR_TO
68022: IFFALSE 68063
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
68024: LD_EXP 92
68028: PUSH
68029: LD_VAR 0 5
68033: ARRAY
68034: PUSH
68035: LD_VAR 0 4
68039: ARRAY
68040: PUSH
68041: LD_INT 1
68043: ARRAY
68044: PUSH
68045: LD_VAR 0 2
68049: EQUAL
68050: IFFALSE 68061
// KillUnit ( vehicle ) ;
68052: LD_VAR 0 2
68056: PPUSH
68057: CALL_OW 66
68061: GO 68021
68063: POP
68064: POP
// end ;
68065: LD_VAR 0 3
68069: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
68070: LD_EXP 96
68074: NOT
68075: IFFALSE 68110
68077: GO 68079
68079: DISABLE
// begin initMiner := true ;
68080: LD_ADDR_EXP 96
68084: PUSH
68085: LD_INT 1
68087: ST_TO_ADDR
// minersList := [ ] ;
68088: LD_ADDR_EXP 97
68092: PUSH
68093: EMPTY
68094: ST_TO_ADDR
// minerMinesList := [ ] ;
68095: LD_ADDR_EXP 98
68099: PUSH
68100: EMPTY
68101: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
68102: LD_ADDR_EXP 99
68106: PUSH
68107: LD_INT 5
68109: ST_TO_ADDR
// end ;
68110: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
68111: LD_EXP 96
68115: PUSH
68116: LD_INT 34
68118: PUSH
68119: LD_INT 81
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PPUSH
68126: CALL_OW 69
68130: AND
68131: IFFALSE 68592
68133: GO 68135
68135: DISABLE
68136: LD_INT 0
68138: PPUSH
68139: PPUSH
68140: PPUSH
68141: PPUSH
// begin enable ;
68142: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
68143: LD_ADDR_VAR 0 1
68147: PUSH
68148: LD_INT 34
68150: PUSH
68151: LD_INT 81
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PPUSH
68158: CALL_OW 69
68162: PUSH
68163: FOR_IN
68164: IFFALSE 68236
// begin if not i in minersList then
68166: LD_VAR 0 1
68170: PUSH
68171: LD_EXP 97
68175: IN
68176: NOT
68177: IFFALSE 68234
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
68179: LD_ADDR_EXP 97
68183: PUSH
68184: LD_EXP 97
68188: PPUSH
68189: LD_EXP 97
68193: PUSH
68194: LD_INT 1
68196: PLUS
68197: PPUSH
68198: LD_VAR 0 1
68202: PPUSH
68203: CALL_OW 1
68207: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
68208: LD_ADDR_EXP 98
68212: PUSH
68213: LD_EXP 98
68217: PPUSH
68218: LD_EXP 98
68222: PUSH
68223: LD_INT 1
68225: PLUS
68226: PPUSH
68227: EMPTY
68228: PPUSH
68229: CALL_OW 1
68233: ST_TO_ADDR
// end end ;
68234: GO 68163
68236: POP
68237: POP
// for i := minerMinesList downto 1 do
68238: LD_ADDR_VAR 0 1
68242: PUSH
68243: DOUBLE
68244: LD_EXP 98
68248: INC
68249: ST_TO_ADDR
68250: LD_INT 1
68252: PUSH
68253: FOR_DOWNTO
68254: IFFALSE 68590
// begin if IsLive ( minersList [ i ] ) then
68256: LD_EXP 97
68260: PUSH
68261: LD_VAR 0 1
68265: ARRAY
68266: PPUSH
68267: CALL_OW 300
68271: IFFALSE 68299
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
68273: LD_EXP 97
68277: PUSH
68278: LD_VAR 0 1
68282: ARRAY
68283: PPUSH
68284: LD_EXP 98
68288: PUSH
68289: LD_VAR 0 1
68293: ARRAY
68294: PPUSH
68295: CALL_OW 505
// if not minerMinesList [ i ] then
68299: LD_EXP 98
68303: PUSH
68304: LD_VAR 0 1
68308: ARRAY
68309: NOT
68310: IFFALSE 68314
// continue ;
68312: GO 68253
// for j := minerMinesList [ i ] downto 1 do
68314: LD_ADDR_VAR 0 2
68318: PUSH
68319: DOUBLE
68320: LD_EXP 98
68324: PUSH
68325: LD_VAR 0 1
68329: ARRAY
68330: INC
68331: ST_TO_ADDR
68332: LD_INT 1
68334: PUSH
68335: FOR_DOWNTO
68336: IFFALSE 68586
// begin side := GetSide ( minersList [ i ] ) ;
68338: LD_ADDR_VAR 0 3
68342: PUSH
68343: LD_EXP 97
68347: PUSH
68348: LD_VAR 0 1
68352: ARRAY
68353: PPUSH
68354: CALL_OW 255
68358: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
68359: LD_ADDR_VAR 0 4
68363: PUSH
68364: LD_EXP 98
68368: PUSH
68369: LD_VAR 0 1
68373: ARRAY
68374: PUSH
68375: LD_VAR 0 2
68379: ARRAY
68380: PUSH
68381: LD_INT 1
68383: ARRAY
68384: PPUSH
68385: LD_EXP 98
68389: PUSH
68390: LD_VAR 0 1
68394: ARRAY
68395: PUSH
68396: LD_VAR 0 2
68400: ARRAY
68401: PUSH
68402: LD_INT 2
68404: ARRAY
68405: PPUSH
68406: CALL_OW 428
68410: ST_TO_ADDR
// if not tmp then
68411: LD_VAR 0 4
68415: NOT
68416: IFFALSE 68420
// continue ;
68418: GO 68335
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
68420: LD_VAR 0 4
68424: PUSH
68425: LD_INT 81
68427: PUSH
68428: LD_VAR 0 3
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PPUSH
68437: CALL_OW 69
68441: IN
68442: PUSH
68443: LD_EXP 98
68447: PUSH
68448: LD_VAR 0 1
68452: ARRAY
68453: PUSH
68454: LD_VAR 0 2
68458: ARRAY
68459: PUSH
68460: LD_INT 1
68462: ARRAY
68463: PPUSH
68464: LD_EXP 98
68468: PUSH
68469: LD_VAR 0 1
68473: ARRAY
68474: PUSH
68475: LD_VAR 0 2
68479: ARRAY
68480: PUSH
68481: LD_INT 2
68483: ARRAY
68484: PPUSH
68485: CALL_OW 458
68489: AND
68490: IFFALSE 68584
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
68492: LD_EXP 98
68496: PUSH
68497: LD_VAR 0 1
68501: ARRAY
68502: PUSH
68503: LD_VAR 0 2
68507: ARRAY
68508: PUSH
68509: LD_INT 1
68511: ARRAY
68512: PPUSH
68513: LD_EXP 98
68517: PUSH
68518: LD_VAR 0 1
68522: ARRAY
68523: PUSH
68524: LD_VAR 0 2
68528: ARRAY
68529: PUSH
68530: LD_INT 2
68532: ARRAY
68533: PPUSH
68534: LD_VAR 0 3
68538: PPUSH
68539: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
68543: LD_ADDR_EXP 98
68547: PUSH
68548: LD_EXP 98
68552: PPUSH
68553: LD_VAR 0 1
68557: PPUSH
68558: LD_EXP 98
68562: PUSH
68563: LD_VAR 0 1
68567: ARRAY
68568: PPUSH
68569: LD_VAR 0 2
68573: PPUSH
68574: CALL_OW 3
68578: PPUSH
68579: CALL_OW 1
68583: ST_TO_ADDR
// end ; end ;
68584: GO 68335
68586: POP
68587: POP
// end ;
68588: GO 68253
68590: POP
68591: POP
// end ;
68592: PPOPN 4
68594: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
68595: LD_INT 0
68597: PPUSH
68598: PPUSH
// result := false ;
68599: LD_ADDR_VAR 0 4
68603: PUSH
68604: LD_INT 0
68606: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
68607: LD_VAR 0 1
68611: PPUSH
68612: CALL_OW 264
68616: PUSH
68617: LD_INT 81
68619: EQUAL
68620: NOT
68621: IFFALSE 68625
// exit ;
68623: GO 68865
// index := GetElementIndex ( minersList , unit ) ;
68625: LD_ADDR_VAR 0 5
68629: PUSH
68630: LD_EXP 97
68634: PPUSH
68635: LD_VAR 0 1
68639: PPUSH
68640: CALL 13376 0 2
68644: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
68645: LD_EXP 98
68649: PUSH
68650: LD_VAR 0 5
68654: ARRAY
68655: PUSH
68656: LD_EXP 99
68660: GREATEREQUAL
68661: IFFALSE 68665
// exit ;
68663: GO 68865
// ComMoveXY ( unit , x , y ) ;
68665: LD_VAR 0 1
68669: PPUSH
68670: LD_VAR 0 2
68674: PPUSH
68675: LD_VAR 0 3
68679: PPUSH
68680: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68684: LD_INT 35
68686: PPUSH
68687: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
68691: LD_VAR 0 1
68695: PPUSH
68696: LD_VAR 0 2
68700: PPUSH
68701: LD_VAR 0 3
68705: PPUSH
68706: CALL 44731 0 3
68710: NOT
68711: PUSH
68712: LD_VAR 0 1
68716: PPUSH
68717: CALL_OW 314
68721: AND
68722: IFFALSE 68726
// exit ;
68724: GO 68865
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
68726: LD_VAR 0 2
68730: PPUSH
68731: LD_VAR 0 3
68735: PPUSH
68736: CALL_OW 428
68740: PUSH
68741: LD_VAR 0 1
68745: EQUAL
68746: PUSH
68747: LD_VAR 0 1
68751: PPUSH
68752: CALL_OW 314
68756: NOT
68757: AND
68758: IFFALSE 68684
// PlaySoundXY ( x , y , PlantMine ) ;
68760: LD_VAR 0 2
68764: PPUSH
68765: LD_VAR 0 3
68769: PPUSH
68770: LD_STRING PlantMine
68772: PPUSH
68773: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
68777: LD_VAR 0 2
68781: PPUSH
68782: LD_VAR 0 3
68786: PPUSH
68787: LD_VAR 0 1
68791: PPUSH
68792: CALL_OW 255
68796: PPUSH
68797: LD_INT 0
68799: PPUSH
68800: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
68804: LD_ADDR_EXP 98
68808: PUSH
68809: LD_EXP 98
68813: PPUSH
68814: LD_VAR 0 5
68818: PUSH
68819: LD_EXP 98
68823: PUSH
68824: LD_VAR 0 5
68828: ARRAY
68829: PUSH
68830: LD_INT 1
68832: PLUS
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PPUSH
68838: LD_VAR 0 2
68842: PUSH
68843: LD_VAR 0 3
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PPUSH
68852: CALL 13591 0 3
68856: ST_TO_ADDR
// result := true ;
68857: LD_ADDR_VAR 0 4
68861: PUSH
68862: LD_INT 1
68864: ST_TO_ADDR
// end ;
68865: LD_VAR 0 4
68869: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
68870: LD_INT 0
68872: PPUSH
68873: PPUSH
68874: PPUSH
// if not unit in minersList then
68875: LD_VAR 0 1
68879: PUSH
68880: LD_EXP 97
68884: IN
68885: NOT
68886: IFFALSE 68890
// exit ;
68888: GO 69282
// index := GetElementIndex ( minersList , unit ) ;
68890: LD_ADDR_VAR 0 6
68894: PUSH
68895: LD_EXP 97
68899: PPUSH
68900: LD_VAR 0 1
68904: PPUSH
68905: CALL 13376 0 2
68909: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
68910: LD_ADDR_VAR 0 5
68914: PUSH
68915: DOUBLE
68916: LD_EXP 98
68920: PUSH
68921: LD_VAR 0 6
68925: ARRAY
68926: INC
68927: ST_TO_ADDR
68928: LD_INT 1
68930: PUSH
68931: FOR_DOWNTO
68932: IFFALSE 69093
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
68934: LD_EXP 98
68938: PUSH
68939: LD_VAR 0 6
68943: ARRAY
68944: PUSH
68945: LD_VAR 0 5
68949: ARRAY
68950: PUSH
68951: LD_INT 1
68953: ARRAY
68954: PUSH
68955: LD_VAR 0 2
68959: EQUAL
68960: PUSH
68961: LD_EXP 98
68965: PUSH
68966: LD_VAR 0 6
68970: ARRAY
68971: PUSH
68972: LD_VAR 0 5
68976: ARRAY
68977: PUSH
68978: LD_INT 2
68980: ARRAY
68981: PUSH
68982: LD_VAR 0 3
68986: EQUAL
68987: AND
68988: IFFALSE 69091
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68990: LD_EXP 98
68994: PUSH
68995: LD_VAR 0 6
68999: ARRAY
69000: PUSH
69001: LD_VAR 0 5
69005: ARRAY
69006: PUSH
69007: LD_INT 1
69009: ARRAY
69010: PPUSH
69011: LD_EXP 98
69015: PUSH
69016: LD_VAR 0 6
69020: ARRAY
69021: PUSH
69022: LD_VAR 0 5
69026: ARRAY
69027: PUSH
69028: LD_INT 2
69030: ARRAY
69031: PPUSH
69032: LD_VAR 0 1
69036: PPUSH
69037: CALL_OW 255
69041: PPUSH
69042: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69046: LD_ADDR_EXP 98
69050: PUSH
69051: LD_EXP 98
69055: PPUSH
69056: LD_VAR 0 6
69060: PPUSH
69061: LD_EXP 98
69065: PUSH
69066: LD_VAR 0 6
69070: ARRAY
69071: PPUSH
69072: LD_VAR 0 5
69076: PPUSH
69077: CALL_OW 3
69081: PPUSH
69082: CALL_OW 1
69086: ST_TO_ADDR
// exit ;
69087: POP
69088: POP
69089: GO 69282
// end ; end ;
69091: GO 68931
69093: POP
69094: POP
// for i := minerMinesList [ index ] downto 1 do
69095: LD_ADDR_VAR 0 5
69099: PUSH
69100: DOUBLE
69101: LD_EXP 98
69105: PUSH
69106: LD_VAR 0 6
69110: ARRAY
69111: INC
69112: ST_TO_ADDR
69113: LD_INT 1
69115: PUSH
69116: FOR_DOWNTO
69117: IFFALSE 69280
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
69119: LD_EXP 98
69123: PUSH
69124: LD_VAR 0 6
69128: ARRAY
69129: PUSH
69130: LD_VAR 0 5
69134: ARRAY
69135: PUSH
69136: LD_INT 1
69138: ARRAY
69139: PPUSH
69140: LD_EXP 98
69144: PUSH
69145: LD_VAR 0 6
69149: ARRAY
69150: PUSH
69151: LD_VAR 0 5
69155: ARRAY
69156: PUSH
69157: LD_INT 2
69159: ARRAY
69160: PPUSH
69161: LD_VAR 0 2
69165: PPUSH
69166: LD_VAR 0 3
69170: PPUSH
69171: CALL_OW 298
69175: PUSH
69176: LD_INT 6
69178: LESS
69179: IFFALSE 69278
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69181: LD_EXP 98
69185: PUSH
69186: LD_VAR 0 6
69190: ARRAY
69191: PUSH
69192: LD_VAR 0 5
69196: ARRAY
69197: PUSH
69198: LD_INT 1
69200: ARRAY
69201: PPUSH
69202: LD_EXP 98
69206: PUSH
69207: LD_VAR 0 6
69211: ARRAY
69212: PUSH
69213: LD_VAR 0 5
69217: ARRAY
69218: PUSH
69219: LD_INT 2
69221: ARRAY
69222: PPUSH
69223: LD_VAR 0 1
69227: PPUSH
69228: CALL_OW 255
69232: PPUSH
69233: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69237: LD_ADDR_EXP 98
69241: PUSH
69242: LD_EXP 98
69246: PPUSH
69247: LD_VAR 0 6
69251: PPUSH
69252: LD_EXP 98
69256: PUSH
69257: LD_VAR 0 6
69261: ARRAY
69262: PPUSH
69263: LD_VAR 0 5
69267: PPUSH
69268: CALL_OW 3
69272: PPUSH
69273: CALL_OW 1
69277: ST_TO_ADDR
// end ; end ;
69278: GO 69116
69280: POP
69281: POP
// end ;
69282: LD_VAR 0 4
69286: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
69287: LD_INT 0
69289: PPUSH
69290: PPUSH
69291: PPUSH
69292: PPUSH
69293: PPUSH
69294: PPUSH
69295: PPUSH
69296: PPUSH
69297: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
69298: LD_VAR 0 1
69302: PPUSH
69303: CALL_OW 264
69307: PUSH
69308: LD_INT 81
69310: EQUAL
69311: NOT
69312: PUSH
69313: LD_VAR 0 1
69317: PUSH
69318: LD_EXP 97
69322: IN
69323: NOT
69324: OR
69325: IFFALSE 69329
// exit ;
69327: GO 69651
// index := GetElementIndex ( minersList , unit ) ;
69329: LD_ADDR_VAR 0 6
69333: PUSH
69334: LD_EXP 97
69338: PPUSH
69339: LD_VAR 0 1
69343: PPUSH
69344: CALL 13376 0 2
69348: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
69349: LD_ADDR_VAR 0 8
69353: PUSH
69354: LD_EXP 99
69358: PUSH
69359: LD_EXP 98
69363: PUSH
69364: LD_VAR 0 6
69368: ARRAY
69369: MINUS
69370: ST_TO_ADDR
// if not minesFreeAmount then
69371: LD_VAR 0 8
69375: NOT
69376: IFFALSE 69380
// exit ;
69378: GO 69651
// tmp := [ ] ;
69380: LD_ADDR_VAR 0 7
69384: PUSH
69385: EMPTY
69386: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
69387: LD_ADDR_VAR 0 5
69391: PUSH
69392: DOUBLE
69393: LD_INT 1
69395: DEC
69396: ST_TO_ADDR
69397: LD_VAR 0 8
69401: PUSH
69402: FOR_TO
69403: IFFALSE 69598
// begin _d := rand ( 0 , 5 ) ;
69405: LD_ADDR_VAR 0 11
69409: PUSH
69410: LD_INT 0
69412: PPUSH
69413: LD_INT 5
69415: PPUSH
69416: CALL_OW 12
69420: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
69421: LD_ADDR_VAR 0 12
69425: PUSH
69426: LD_INT 2
69428: PPUSH
69429: LD_INT 6
69431: PPUSH
69432: CALL_OW 12
69436: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
69437: LD_ADDR_VAR 0 9
69441: PUSH
69442: LD_VAR 0 2
69446: PPUSH
69447: LD_VAR 0 11
69451: PPUSH
69452: LD_VAR 0 12
69456: PPUSH
69457: CALL_OW 272
69461: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
69462: LD_ADDR_VAR 0 10
69466: PUSH
69467: LD_VAR 0 3
69471: PPUSH
69472: LD_VAR 0 11
69476: PPUSH
69477: LD_VAR 0 12
69481: PPUSH
69482: CALL_OW 273
69486: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
69487: LD_VAR 0 9
69491: PPUSH
69492: LD_VAR 0 10
69496: PPUSH
69497: CALL_OW 488
69501: PUSH
69502: LD_VAR 0 9
69506: PUSH
69507: LD_VAR 0 10
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_VAR 0 7
69520: IN
69521: NOT
69522: AND
69523: PUSH
69524: LD_VAR 0 9
69528: PPUSH
69529: LD_VAR 0 10
69533: PPUSH
69534: CALL_OW 458
69538: NOT
69539: AND
69540: IFFALSE 69582
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
69542: LD_ADDR_VAR 0 7
69546: PUSH
69547: LD_VAR 0 7
69551: PPUSH
69552: LD_VAR 0 7
69556: PUSH
69557: LD_INT 1
69559: PLUS
69560: PPUSH
69561: LD_VAR 0 9
69565: PUSH
69566: LD_VAR 0 10
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PPUSH
69575: CALL_OW 1
69579: ST_TO_ADDR
69580: GO 69596
// i := i - 1 ;
69582: LD_ADDR_VAR 0 5
69586: PUSH
69587: LD_VAR 0 5
69591: PUSH
69592: LD_INT 1
69594: MINUS
69595: ST_TO_ADDR
// end ;
69596: GO 69402
69598: POP
69599: POP
// for i in tmp do
69600: LD_ADDR_VAR 0 5
69604: PUSH
69605: LD_VAR 0 7
69609: PUSH
69610: FOR_IN
69611: IFFALSE 69649
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
69613: LD_VAR 0 1
69617: PPUSH
69618: LD_VAR 0 5
69622: PUSH
69623: LD_INT 1
69625: ARRAY
69626: PPUSH
69627: LD_VAR 0 5
69631: PUSH
69632: LD_INT 2
69634: ARRAY
69635: PPUSH
69636: CALL 68595 0 3
69640: NOT
69641: IFFALSE 69647
// exit ;
69643: POP
69644: POP
69645: GO 69651
69647: GO 69610
69649: POP
69650: POP
// end ;
69651: LD_VAR 0 4
69655: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
69656: LD_INT 0
69658: PPUSH
69659: PPUSH
69660: PPUSH
69661: PPUSH
69662: PPUSH
69663: PPUSH
69664: PPUSH
// if not GetClass ( unit ) = class_sniper then
69665: LD_VAR 0 1
69669: PPUSH
69670: CALL_OW 257
69674: PUSH
69675: LD_INT 5
69677: EQUAL
69678: NOT
69679: IFFALSE 69683
// exit ;
69681: GO 70071
// dist := 8 ;
69683: LD_ADDR_VAR 0 5
69687: PUSH
69688: LD_INT 8
69690: ST_TO_ADDR
// viewRange := 12 ;
69691: LD_ADDR_VAR 0 7
69695: PUSH
69696: LD_INT 12
69698: ST_TO_ADDR
// side := GetSide ( unit ) ;
69699: LD_ADDR_VAR 0 6
69703: PUSH
69704: LD_VAR 0 1
69708: PPUSH
69709: CALL_OW 255
69713: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
69714: LD_INT 61
69716: PPUSH
69717: LD_VAR 0 6
69721: PPUSH
69722: CALL_OW 321
69726: PUSH
69727: LD_INT 2
69729: EQUAL
69730: IFFALSE 69740
// viewRange := 16 ;
69732: LD_ADDR_VAR 0 7
69736: PUSH
69737: LD_INT 16
69739: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
69740: LD_VAR 0 1
69744: PPUSH
69745: LD_VAR 0 2
69749: PPUSH
69750: LD_VAR 0 3
69754: PPUSH
69755: CALL_OW 297
69759: PUSH
69760: LD_VAR 0 5
69764: GREATER
69765: IFFALSE 69844
// begin ComMoveXY ( unit , x , y ) ;
69767: LD_VAR 0 1
69771: PPUSH
69772: LD_VAR 0 2
69776: PPUSH
69777: LD_VAR 0 3
69781: PPUSH
69782: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69786: LD_INT 35
69788: PPUSH
69789: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
69793: LD_VAR 0 1
69797: PPUSH
69798: LD_VAR 0 2
69802: PPUSH
69803: LD_VAR 0 3
69807: PPUSH
69808: CALL 44731 0 3
69812: NOT
69813: IFFALSE 69817
// exit ;
69815: GO 70071
// until GetDistUnitXY ( unit , x , y ) < dist ;
69817: LD_VAR 0 1
69821: PPUSH
69822: LD_VAR 0 2
69826: PPUSH
69827: LD_VAR 0 3
69831: PPUSH
69832: CALL_OW 297
69836: PUSH
69837: LD_VAR 0 5
69841: LESS
69842: IFFALSE 69786
// end ; ComTurnXY ( unit , x , y ) ;
69844: LD_VAR 0 1
69848: PPUSH
69849: LD_VAR 0 2
69853: PPUSH
69854: LD_VAR 0 3
69858: PPUSH
69859: CALL_OW 118
// wait ( 5 ) ;
69863: LD_INT 5
69865: PPUSH
69866: CALL_OW 67
// _d := GetDir ( unit ) ;
69870: LD_ADDR_VAR 0 10
69874: PUSH
69875: LD_VAR 0 1
69879: PPUSH
69880: CALL_OW 254
69884: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
69885: LD_ADDR_VAR 0 8
69889: PUSH
69890: LD_VAR 0 1
69894: PPUSH
69895: CALL_OW 250
69899: PPUSH
69900: LD_VAR 0 10
69904: PPUSH
69905: LD_VAR 0 5
69909: PPUSH
69910: CALL_OW 272
69914: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
69915: LD_ADDR_VAR 0 9
69919: PUSH
69920: LD_VAR 0 1
69924: PPUSH
69925: CALL_OW 251
69929: PPUSH
69930: LD_VAR 0 10
69934: PPUSH
69935: LD_VAR 0 5
69939: PPUSH
69940: CALL_OW 273
69944: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69945: LD_VAR 0 8
69949: PPUSH
69950: LD_VAR 0 9
69954: PPUSH
69955: CALL_OW 488
69959: NOT
69960: IFFALSE 69964
// exit ;
69962: GO 70071
// ComAnimCustom ( unit , 1 ) ;
69964: LD_VAR 0 1
69968: PPUSH
69969: LD_INT 1
69971: PPUSH
69972: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
69976: LD_VAR 0 8
69980: PPUSH
69981: LD_VAR 0 9
69985: PPUSH
69986: LD_VAR 0 6
69990: PPUSH
69991: LD_VAR 0 7
69995: PPUSH
69996: CALL_OW 330
// repeat wait ( 1 ) ;
70000: LD_INT 1
70002: PPUSH
70003: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
70007: LD_VAR 0 1
70011: PPUSH
70012: CALL_OW 316
70016: PUSH
70017: LD_VAR 0 1
70021: PPUSH
70022: CALL_OW 314
70026: OR
70027: PUSH
70028: LD_VAR 0 1
70032: PPUSH
70033: CALL_OW 302
70037: NOT
70038: OR
70039: PUSH
70040: LD_VAR 0 1
70044: PPUSH
70045: CALL_OW 301
70049: OR
70050: IFFALSE 70000
// RemoveSeeing ( _x , _y , side ) ;
70052: LD_VAR 0 8
70056: PPUSH
70057: LD_VAR 0 9
70061: PPUSH
70062: LD_VAR 0 6
70066: PPUSH
70067: CALL_OW 331
// end ;
70071: LD_VAR 0 4
70075: RET
