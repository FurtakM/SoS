// starting begin Game_Start := false ;
   0: LD_ADDR_EXP 9
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// Randomize ;
   8: CALL_OW 10
// Init ( ) ;
  12: CALL 112 0 0
// InitBot ( ) ;
  16: CALL 3634 0 0
// Game_Start := true ;
  20: LD_ADDR_EXP 9
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// end ;
  28: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , bot_side ] ) = 0 do
  29: LD_EXP 9
  33: PUSH
  34: LD_INT 22
  36: PUSH
  37: LD_EXP 8
  41: PUSH
  42: EMPTY
  43: LIST
  44: LIST
  45: PPUSH
  46: CALL_OW 69
  50: PUSH
  51: LD_INT 0
  53: EQUAL
  54: AND
  55: IFFALSE 64
  57: GO 59
  59: DISABLE
// YouWinInMultiplayer ;
  60: CALL_OW 106
  64: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , your_side ] ) = 0 do
  65: LD_EXP 9
  69: PUSH
  70: LD_INT 22
  72: PUSH
  73: LD_OWVAR 2
  77: PUSH
  78: EMPTY
  79: LIST
  80: LIST
  81: PPUSH
  82: CALL_OW 69
  86: PUSH
  87: LD_INT 0
  89: EQUAL
  90: AND
  91: IFFALSE 111
  93: GO 95
  95: DISABLE
// begin Multiplayer_Loose_Message ;
  96: CALL_OW 521
// Wait ( 0 0$03 ) ;
 100: LD_INT 105
 102: PPUSH
 103: CALL_OW 67
// YouLostInMultiplayer ;
 107: CALL_OW 107
// end ;
 111: END
// export Game_Type , Side_Positions , Side_Teams , Side_Nations , Teams ; export Team_Game , Side_Start , Bot_Side , Game_Start ; export number_of_people , skill_level , crates_spawn , respawning_time_min , respawning_time_max , amount_of_apeman ; export definitions , mines_list , apeman_areas , patrols , attackers , to_produce , veh_counter , queue_codes , rng , target , handicap , attackers_tmp ; export function Init ( ) ; var i , j ; begin
 112: LD_INT 0
 114: PPUSH
 115: PPUSH
 116: PPUSH
// definitions := [ ] ;
 117: LD_ADDR_EXP 16
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// if Multiplayer then
 124: LD_OWVAR 4
 128: IFFALSE 304
// begin Game_Type := mp_game_type ;
 130: LD_ADDR_EXP 1
 134: PUSH
 135: LD_OWVAR 6
 139: ST_TO_ADDR
// Your_Side := mp_player_side ;
 140: LD_ADDR_OWVAR 2
 144: PUSH
 145: LD_OWVAR 7
 149: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
 150: LD_ADDR_EXP 2
 154: PUSH
 155: LD_OWVAR 17
 159: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 160: LD_ADDR_EXP 3
 164: PUSH
 165: LD_OWVAR 15
 169: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 170: LD_ADDR_EXP 4
 174: PUSH
 175: LD_OWVAR 16
 179: ST_TO_ADDR
// Teams := [ [ ] ] ;
 180: LD_ADDR_EXP 5
 184: PUSH
 185: EMPTY
 186: PUSH
 187: EMPTY
 188: LIST
 189: ST_TO_ADDR
// for i in mp_teams do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: LD_OWVAR 12
 199: PUSH
 200: FOR_IN
 201: IFFALSE 242
// Teams := Replace ( Teams , 1 , Teams [ 1 ] union i [ 1 ] ) ;
 203: LD_ADDR_EXP 5
 207: PUSH
 208: LD_EXP 5
 212: PPUSH
 213: LD_INT 1
 215: PPUSH
 216: LD_EXP 5
 220: PUSH
 221: LD_INT 1
 223: ARRAY
 224: PUSH
 225: LD_VAR 0 2
 229: PUSH
 230: LD_INT 1
 232: ARRAY
 233: UNION
 234: PPUSH
 235: CALL_OW 1
 239: ST_TO_ADDR
 240: GO 200
 242: POP
 243: POP
// for i = 0 to 6 do
 244: LD_ADDR_VAR 0 2
 248: PUSH
 249: DOUBLE
 250: LD_INT 0
 252: DEC
 253: ST_TO_ADDR
 254: LD_INT 6
 256: PUSH
 257: FOR_TO
 258: IFFALSE 300
// definitions := Insert ( definitions , definitions + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 260: LD_ADDR_EXP 16
 264: PUSH
 265: LD_EXP 16
 269: PPUSH
 270: LD_EXP 16
 274: PUSH
 275: LD_INT 1
 277: PLUS
 278: PPUSH
 279: LD_VAR 0 2
 283: PPUSH
 284: CALL_OW 426
 288: PUSH
 289: LD_INT 1
 291: PLUS
 292: PPUSH
 293: CALL_OW 2
 297: ST_TO_ADDR
 298: GO 257
 300: POP
 301: POP
// end else
 302: GO 459
// begin Game_Type := 1 ;
 304: LD_ADDR_EXP 1
 308: PUSH
 309: LD_INT 1
 311: ST_TO_ADDR
// Your_Side := 2 ;
 312: LD_ADDR_OWVAR 2
 316: PUSH
 317: LD_INT 2
 319: ST_TO_ADDR
// Side_Positions := [ 1 , 0 , 0 , 0 , 2 , 0 , 3 , 0 ] ;
 320: LD_ADDR_EXP 2
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: LD_INT 0
 333: PUSH
 334: LD_INT 0
 336: PUSH
 337: LD_INT 2
 339: PUSH
 340: LD_INT 0
 342: PUSH
 343: LD_INT 3
 345: PUSH
 346: LD_INT 0
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: LIST
 353: LIST
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: ST_TO_ADDR
// Side_Teams := [ 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 ] ;
 359: LD_ADDR_EXP 3
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: LD_INT 0
 369: PUSH
 370: LD_INT 0
 372: PUSH
 373: LD_INT 0
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: LD_INT 0
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: LD_INT 0
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: ST_TO_ADDR
// Side_Nations := [ 3 , 0 , 0 , 0 , 3 , 0 , 3 , 0 ] ;
 398: LD_ADDR_EXP 4
 402: PUSH
 403: LD_INT 3
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: LD_INT 0
 411: PUSH
 412: LD_INT 0
 414: PUSH
 415: LD_INT 3
 417: PUSH
 418: LD_INT 0
 420: PUSH
 421: LD_INT 3
 423: PUSH
 424: LD_INT 0
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: LIST
 435: LIST
 436: ST_TO_ADDR
// Teams := [ [ 1 , 5 , 7 ] ] ;
 437: LD_ADDR_EXP 5
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: LD_INT 5
 447: PUSH
 448: LD_INT 7
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: PUSH
 456: EMPTY
 457: LIST
 458: ST_TO_ADDR
// end ; Side_Start := [ [ 203 , 174 ] , [ 114 , 171 ] , [ 26 , 44 ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
 459: LD_ADDR_EXP 7
 463: PUSH
 464: LD_INT 203
 466: PUSH
 467: LD_INT 174
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 114
 476: PUSH
 477: LD_INT 171
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 26
 486: PUSH
 487: LD_INT 44
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: PUSH
 496: EMPTY
 497: PUSH
 498: EMPTY
 499: PUSH
 500: EMPTY
 501: PUSH
 502: EMPTY
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: ST_TO_ADDR
// Bot_Side := 2 ;
 514: LD_ADDR_EXP 8
 518: PUSH
 519: LD_INT 2
 521: ST_TO_ADDR
// for i = 1 to 8 do
 522: LD_ADDR_VAR 0 2
 526: PUSH
 527: DOUBLE
 528: LD_INT 1
 530: DEC
 531: ST_TO_ADDR
 532: LD_INT 8
 534: PUSH
 535: FOR_TO
 536: IFFALSE 630
// begin if Multiplayer_GetPlayerIsSpec ( i ) or Multiplayer_GetPlayerIsComp ( i ) then
 538: LD_VAR 0 2
 542: PPUSH
 543: CALL_OW 530
 547: PUSH
 548: LD_VAR 0 2
 552: PPUSH
 553: CALL_OW 532
 557: OR
 558: IFFALSE 583
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 560: LD_ADDR_EXP 2
 564: PUSH
 565: LD_EXP 2
 569: PPUSH
 570: LD_VAR 0 2
 574: PPUSH
 575: LD_INT 0
 577: PPUSH
 578: CALL_OW 1
 582: ST_TO_ADDR
// end ; if Side_Nations [ i ] and Side_Nations <> 3 then
 583: LD_EXP 4
 587: PUSH
 588: LD_VAR 0 2
 592: ARRAY
 593: PUSH
 594: LD_EXP 4
 598: PUSH
 599: LD_INT 3
 601: NONEQUAL
 602: AND
 603: IFFALSE 628
// Side_Nations := Replace ( Side_Nations , i , 3 ) ;
 605: LD_ADDR_EXP 4
 609: PUSH
 610: LD_EXP 4
 614: PPUSH
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 3
 622: PPUSH
 623: CALL_OW 1
 627: ST_TO_ADDR
// end ;
 628: GO 535
 630: POP
 631: POP
// if bot_side = 2 and Side_Positions [ 2 ] then
 632: LD_EXP 8
 636: PUSH
 637: LD_INT 2
 639: EQUAL
 640: PUSH
 641: LD_EXP 2
 645: PUSH
 646: LD_INT 2
 648: ARRAY
 649: AND
 650: IFFALSE 660
// bot_side := 5 ;
 652: LD_ADDR_EXP 8
 656: PUSH
 657: LD_INT 5
 659: ST_TO_ADDR
// if bot_side = 5 and Side_Positions [ 5 ] then
 660: LD_EXP 8
 664: PUSH
 665: LD_INT 5
 667: EQUAL
 668: PUSH
 669: LD_EXP 2
 673: PUSH
 674: LD_INT 5
 676: ARRAY
 677: AND
 678: IFFALSE 688
// bot_side := 8 ;
 680: LD_ADDR_EXP 8
 684: PUSH
 685: LD_INT 8
 687: ST_TO_ADDR
// Team_Game := true ;
 688: LD_ADDR_EXP 6
 692: PUSH
 693: LD_INT 1
 695: ST_TO_ADDR
// for i = 1 to 8 do
 696: LD_ADDR_VAR 0 2
 700: PUSH
 701: DOUBLE
 702: LD_INT 1
 704: DEC
 705: ST_TO_ADDR
 706: LD_INT 8
 708: PUSH
 709: FOR_TO
 710: IFFALSE 746
// if i <> bot_side then
 712: LD_VAR 0 2
 716: PUSH
 717: LD_EXP 8
 721: NONEQUAL
 722: IFFALSE 744
// SetAttitude ( i , bot_side , att_enemy , true ) ;
 724: LD_VAR 0 2
 728: PPUSH
 729: LD_EXP 8
 733: PPUSH
 734: LD_INT 2
 736: PPUSH
 737: LD_INT 1
 739: PPUSH
 740: CALL_OW 80
 744: GO 709
 746: POP
 747: POP
// for i := 2 to Teams [ 1 ] do
 748: LD_ADDR_VAR 0 2
 752: PUSH
 753: DOUBLE
 754: LD_INT 2
 756: DEC
 757: ST_TO_ADDR
 758: LD_EXP 5
 762: PUSH
 763: LD_INT 1
 765: ARRAY
 766: PUSH
 767: FOR_TO
 768: IFFALSE 842
// begin ChangeSideFog ( Teams [ 1 ] [ i ] , Teams [ 1 ] [ 1 ] ) ;
 770: LD_EXP 5
 774: PUSH
 775: LD_INT 1
 777: ARRAY
 778: PUSH
 779: LD_VAR 0 2
 783: ARRAY
 784: PPUSH
 785: LD_EXP 5
 789: PUSH
 790: LD_INT 1
 792: ARRAY
 793: PUSH
 794: LD_INT 1
 796: ARRAY
 797: PPUSH
 798: CALL_OW 343
// SetAttitude ( Teams [ 1 ] [ i ] , Teams [ 1 ] [ 1 ] , att_friend , true ) ;
 802: LD_EXP 5
 806: PUSH
 807: LD_INT 1
 809: ARRAY
 810: PUSH
 811: LD_VAR 0 2
 815: ARRAY
 816: PPUSH
 817: LD_EXP 5
 821: PUSH
 822: LD_INT 1
 824: ARRAY
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: CALL_OW 80
// end ;
 840: GO 767
 842: POP
 843: POP
// if not Multiplayer then
 844: LD_OWVAR 4
 848: NOT
 849: IFFALSE 886
// definitions := [ 1 , 1 , 1 , 1 , 2 , 3 , 3 ] ;
 851: LD_ADDR_EXP 16
 855: PUSH
 856: LD_INT 1
 858: PUSH
 859: LD_INT 1
 861: PUSH
 862: LD_INT 1
 864: PUSH
 865: LD_INT 1
 867: PUSH
 868: LD_INT 2
 870: PUSH
 871: LD_INT 3
 873: PUSH
 874: LD_INT 3
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ definitions [ 1 ] ] ;
 886: LD_ADDR_EXP 10
 890: PUSH
 891: LD_INT 9
 893: PUSH
 894: LD_INT 12
 896: PUSH
 897: LD_INT 15
 899: PUSH
 900: LD_INT 24
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: PUSH
 909: LD_EXP 16
 913: PUSH
 914: LD_INT 1
 916: ARRAY
 917: ARRAY
 918: ST_TO_ADDR
// skill_level := [ 2 , 4 , 6 , 8 ] [ definitions [ 2 ] ] ;
 919: LD_ADDR_EXP 11
 923: PUSH
 924: LD_INT 2
 926: PUSH
 927: LD_INT 4
 929: PUSH
 930: LD_INT 6
 932: PUSH
 933: LD_INT 8
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: LD_EXP 16
 946: PUSH
 947: LD_INT 2
 949: ARRAY
 950: ARRAY
 951: ST_TO_ADDR
// crates_spawn := [ 0 0$30 , 0 0$25 , 0 0$20 , 0 0$17 ] [ definitions [ 3 ] ] ;
 952: LD_ADDR_EXP 12
 956: PUSH
 957: LD_INT 1050
 959: PUSH
 960: LD_INT 875
 962: PUSH
 963: LD_INT 700
 965: PUSH
 966: LD_INT 595
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: PUSH
 975: LD_EXP 16
 979: PUSH
 980: LD_INT 3
 982: ARRAY
 983: ARRAY
 984: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ definitions [ 4 ] ] ;
 985: LD_ADDR_EXP 13
 989: PUSH
 990: LD_INT 0
 992: PUSH
 993: LD_INT 10500
 995: PUSH
 996: LD_INT 6300
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: LIST
1003: PUSH
1004: LD_EXP 16
1008: PUSH
1009: LD_INT 4
1011: ARRAY
1012: ARRAY
1013: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ definitions [ 4 ] ] ;
1014: LD_ADDR_EXP 14
1018: PUSH
1019: LD_INT 0
1021: PUSH
1022: LD_INT 31500
1024: PUSH
1025: LD_INT 10500
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: LD_EXP 16
1037: PUSH
1038: LD_INT 4
1040: ARRAY
1041: ARRAY
1042: ST_TO_ADDR
// amount_of_apeman := [ 0 , 3 , 5 , 7 ] [ definitions [ 5 ] ] ;
1043: LD_ADDR_EXP 15
1047: PUSH
1048: LD_INT 0
1050: PUSH
1051: LD_INT 3
1053: PUSH
1054: LD_INT 5
1056: PUSH
1057: LD_INT 7
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: PUSH
1066: LD_EXP 16
1070: PUSH
1071: LD_INT 5
1073: ARRAY
1074: ARRAY
1075: ST_TO_ADDR
// difficulty := [ 1 , 2 , 3 ] [ definitions [ 6 ] ] ;
1076: LD_ADDR_OWVAR 67
1080: PUSH
1081: LD_INT 1
1083: PUSH
1084: LD_INT 2
1086: PUSH
1087: LD_INT 3
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: LD_EXP 16
1099: PUSH
1100: LD_INT 6
1102: ARRAY
1103: ARRAY
1104: ST_TO_ADDR
// handicap := [ 0 , 1 , 2 ] [ definitions [ 7 ] ] ;
1105: LD_ADDR_EXP 26
1109: PUSH
1110: LD_INT 0
1112: PUSH
1113: LD_INT 1
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: LD_EXP 16
1128: PUSH
1129: LD_INT 7
1131: ARRAY
1132: ARRAY
1133: ST_TO_ADDR
// queue_codes := [ 11353 , 12244 , 44444 , 12345 , 43413 , 14152 ] ;
1134: LD_ADDR_EXP 23
1138: PUSH
1139: LD_INT 11353
1141: PUSH
1142: LD_INT 12244
1144: PUSH
1145: LD_INT 44444
1147: PUSH
1148: LD_INT 12345
1150: PUSH
1151: LD_INT 43413
1153: PUSH
1154: LD_INT 14152
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: ST_TO_ADDR
// rng := Rand ( 1 , 6 ) ;
1165: LD_ADDR_EXP 24
1169: PUSH
1170: LD_INT 1
1172: PPUSH
1173: LD_INT 6
1175: PPUSH
1176: CALL_OW 12
1180: ST_TO_ADDR
// if bot_side <> 2 then
1181: LD_EXP 8
1185: PUSH
1186: LD_INT 2
1188: NONEQUAL
1189: IFFALSE 1232
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
1191: LD_ADDR_VAR 0 2
1195: PUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 2
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 69
1210: PUSH
1211: FOR_IN
1212: IFFALSE 1230
// SetSide ( i , bot_side ) ;
1214: LD_VAR 0 2
1218: PPUSH
1219: LD_EXP 8
1223: PPUSH
1224: CALL_OW 235
1228: GO 1211
1230: POP
1231: POP
// ResetFog ;
1232: CALL_OW 335
// PreparePeople ( ) ;
1236: CALL 2066 0 0
// apeman_areas := [ ape1 , ape2 , ape3 ] ;
1240: LD_ADDR_EXP 18
1244: PUSH
1245: LD_INT 14
1247: PUSH
1248: LD_INT 15
1250: PUSH
1251: LD_INT 16
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// if amount_of_apeman then
1259: LD_EXP 15
1263: IFFALSE 1313
// for j in apeman_areas do
1265: LD_ADDR_VAR 0 3
1269: PUSH
1270: LD_EXP 18
1274: PUSH
1275: FOR_IN
1276: IFFALSE 1311
// for i = 1 to amount_of_apeman do
1278: LD_ADDR_VAR 0 2
1282: PUSH
1283: DOUBLE
1284: LD_INT 1
1286: DEC
1287: ST_TO_ADDR
1288: LD_EXP 15
1292: PUSH
1293: FOR_TO
1294: IFFALSE 1307
// AddApeman ( j ) ;
1296: LD_VAR 0 3
1300: PPUSH
1301: CALL 3015 0 1
1305: GO 1293
1307: POP
1308: POP
1309: GO 1275
1311: POP
1312: POP
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
1313: LD_INT 22
1315: PUSH
1316: LD_OWVAR 2
1320: PUSH
1321: EMPTY
1322: LIST
1323: LIST
1324: PPUSH
1325: CALL_OW 69
1329: PUSH
1330: LD_INT 1
1332: ARRAY
1333: PPUSH
1334: CALL_OW 87
// disable ( 17 ) ;
1338: LD_INT 17
1340: DISABLE_MARKED
// end ;
1341: LD_VAR 0 1
1345: RET
// every 3 3$40 trigger game_start do
1346: LD_EXP 9
1350: IFFALSE 1406
1352: GO 1354
1354: DISABLE
// begin CreateCratesArea ( tick mod 5 + 1 , kabul_crates , true ) ;
1355: LD_OWVAR 1
1359: PUSH
1360: LD_INT 5
1362: MOD
1363: PUSH
1364: LD_INT 1
1366: PLUS
1367: PPUSH
1368: LD_INT 13
1370: PPUSH
1371: LD_INT 1
1373: PPUSH
1374: CALL_OW 55
// Wait ( 0 0$15 ) ;
1378: LD_INT 525
1380: PPUSH
1381: CALL_OW 67
// CreateCratesAnywhere ( tick mod 5 + 1 , true ) ;
1385: LD_OWVAR 1
1389: PUSH
1390: LD_INT 5
1392: MOD
1393: PUSH
1394: LD_INT 1
1396: PLUS
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: CALL_OW 57
// enable ;
1405: ENABLE
// end ;
1406: END
// every 0 0$01 + 0 0$10 trigger game_start do var cr , cr_queue ;
1407: LD_EXP 9
1411: IFFALSE 2063
1413: GO 1415
1415: DISABLE
1416: LD_INT 0
1418: PPUSH
1419: PPUSH
// begin cr := 1 ;
1420: LD_ADDR_VAR 0 1
1424: PUSH
1425: LD_INT 1
1427: ST_TO_ADDR
// cr_queue := [ rand ( 1 , 3 ) , rand ( 2 , 4 ) , rand ( 3 , 5 ) , rand ( 3 , 5 ) , rand ( 2 , 5 ) , rand ( 1 , 5 ) ] ;
1428: LD_ADDR_VAR 0 2
1432: PUSH
1433: LD_INT 1
1435: PPUSH
1436: LD_INT 3
1438: PPUSH
1439: CALL_OW 12
1443: PUSH
1444: LD_INT 2
1446: PPUSH
1447: LD_INT 4
1449: PPUSH
1450: CALL_OW 12
1454: PUSH
1455: LD_INT 3
1457: PPUSH
1458: LD_INT 5
1460: PPUSH
1461: CALL_OW 12
1465: PUSH
1466: LD_INT 3
1468: PPUSH
1469: LD_INT 5
1471: PPUSH
1472: CALL_OW 12
1476: PUSH
1477: LD_INT 2
1479: PPUSH
1480: LD_INT 5
1482: PPUSH
1483: CALL_OW 12
1487: PUSH
1488: LD_INT 1
1490: PPUSH
1491: LD_INT 5
1493: PPUSH
1494: CALL_OW 12
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: ST_TO_ADDR
// while ( true ) do
1507: LD_INT 1
1509: IFFALSE 2063
// begin Wait ( crates_spawn + ( tick mod 35 * 60 ) ) ;
1511: LD_EXP 12
1515: PUSH
1516: LD_OWVAR 1
1520: PUSH
1521: LD_INT 35
1523: MOD
1524: PUSH
1525: LD_INT 60
1527: MUL
1528: PLUS
1529: PPUSH
1530: CALL_OW 67
// if cr mod 3 = 0 then
1534: LD_VAR 0 1
1538: PUSH
1539: LD_INT 3
1541: MOD
1542: PUSH
1543: LD_INT 0
1545: EQUAL
1546: IFFALSE 1699
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1548: LD_VAR 0 2
1552: PUSH
1553: LD_VAR 0 1
1557: PUSH
1558: LD_VAR 0 2
1562: MOD
1563: PUSH
1564: LD_INT 1
1566: PLUS
1567: ARRAY
1568: PPUSH
1569: LD_INT 17
1571: PPUSH
1572: LD_INT 1
1574: PPUSH
1575: CALL_OW 55
// Wait ( crates_spawn ) ;
1579: LD_EXP 12
1583: PPUSH
1584: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1588: LD_VAR 0 2
1592: PUSH
1593: LD_VAR 0 1
1597: PUSH
1598: LD_VAR 0 2
1602: MOD
1603: PUSH
1604: LD_INT 1
1606: PLUS
1607: ARRAY
1608: PPUSH
1609: LD_INT 18
1611: PPUSH
1612: LD_INT 1
1614: PPUSH
1615: CALL_OW 55
// Wait ( crates_spawn ) ;
1619: LD_EXP 12
1623: PPUSH
1624: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1628: LD_VAR 0 2
1632: PUSH
1633: LD_VAR 0 1
1637: PUSH
1638: LD_VAR 0 2
1642: MOD
1643: PUSH
1644: LD_INT 1
1646: PLUS
1647: ARRAY
1648: PPUSH
1649: LD_INT 19
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: CALL_OW 55
// Wait ( crates_spawn ) ;
1659: LD_EXP 12
1663: PPUSH
1664: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1668: LD_VAR 0 2
1672: PUSH
1673: LD_VAR 0 1
1677: PUSH
1678: LD_VAR 0 2
1682: MOD
1683: PUSH
1684: LD_INT 1
1686: PLUS
1687: ARRAY
1688: PPUSH
1689: LD_INT 17
1691: PPUSH
1692: LD_INT 1
1694: PPUSH
1695: CALL_OW 55
// end ; if cr mod 3 = 1 then
1699: LD_VAR 0 1
1703: PUSH
1704: LD_INT 3
1706: MOD
1707: PUSH
1708: LD_INT 1
1710: EQUAL
1711: IFFALSE 1864
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1713: LD_VAR 0 2
1717: PUSH
1718: LD_VAR 0 1
1722: PUSH
1723: LD_VAR 0 2
1727: MOD
1728: PUSH
1729: LD_INT 1
1731: PLUS
1732: ARRAY
1733: PPUSH
1734: LD_INT 18
1736: PPUSH
1737: LD_INT 1
1739: PPUSH
1740: CALL_OW 55
// Wait ( crates_spawn ) ;
1744: LD_EXP 12
1748: PPUSH
1749: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1753: LD_VAR 0 2
1757: PUSH
1758: LD_VAR 0 1
1762: PUSH
1763: LD_VAR 0 2
1767: MOD
1768: PUSH
1769: LD_INT 1
1771: PLUS
1772: ARRAY
1773: PPUSH
1774: LD_INT 17
1776: PPUSH
1777: LD_INT 1
1779: PPUSH
1780: CALL_OW 55
// Wait ( crates_spawn ) ;
1784: LD_EXP 12
1788: PPUSH
1789: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1793: LD_VAR 0 2
1797: PUSH
1798: LD_VAR 0 1
1802: PUSH
1803: LD_VAR 0 2
1807: MOD
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: ARRAY
1813: PPUSH
1814: LD_INT 19
1816: PPUSH
1817: LD_INT 1
1819: PPUSH
1820: CALL_OW 55
// Wait ( crates_spawn ) ;
1824: LD_EXP 12
1828: PPUSH
1829: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1833: LD_VAR 0 2
1837: PUSH
1838: LD_VAR 0 1
1842: PUSH
1843: LD_VAR 0 2
1847: MOD
1848: PUSH
1849: LD_INT 1
1851: PLUS
1852: ARRAY
1853: PPUSH
1854: LD_INT 18
1856: PPUSH
1857: LD_INT 1
1859: PPUSH
1860: CALL_OW 55
// end ; if cr mod 3 = 2 then
1864: LD_VAR 0 1
1868: PUSH
1869: LD_INT 3
1871: MOD
1872: PUSH
1873: LD_INT 2
1875: EQUAL
1876: IFFALSE 2029
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1878: LD_VAR 0 2
1882: PUSH
1883: LD_VAR 0 1
1887: PUSH
1888: LD_VAR 0 2
1892: MOD
1893: PUSH
1894: LD_INT 1
1896: PLUS
1897: ARRAY
1898: PPUSH
1899: LD_INT 19
1901: PPUSH
1902: LD_INT 1
1904: PPUSH
1905: CALL_OW 55
// Wait ( crates_spawn ) ;
1909: LD_EXP 12
1913: PPUSH
1914: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1918: LD_VAR 0 2
1922: PUSH
1923: LD_VAR 0 1
1927: PUSH
1928: LD_VAR 0 2
1932: MOD
1933: PUSH
1934: LD_INT 1
1936: PLUS
1937: ARRAY
1938: PPUSH
1939: LD_INT 18
1941: PPUSH
1942: LD_INT 1
1944: PPUSH
1945: CALL_OW 55
// Wait ( crates_spawn ) ;
1949: LD_EXP 12
1953: PPUSH
1954: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1958: LD_VAR 0 2
1962: PUSH
1963: LD_VAR 0 1
1967: PUSH
1968: LD_VAR 0 2
1972: MOD
1973: PUSH
1974: LD_INT 1
1976: PLUS
1977: ARRAY
1978: PPUSH
1979: LD_INT 17
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: CALL_OW 55
// Wait ( crates_spawn ) ;
1989: LD_EXP 12
1993: PPUSH
1994: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1998: LD_VAR 0 2
2002: PUSH
2003: LD_VAR 0 1
2007: PUSH
2008: LD_VAR 0 2
2012: MOD
2013: PUSH
2014: LD_INT 1
2016: PLUS
2017: ARRAY
2018: PPUSH
2019: LD_INT 19
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: CALL_OW 55
// end ; cr := cr + 1 ;
2029: LD_ADDR_VAR 0 1
2033: PUSH
2034: LD_VAR 0 1
2038: PUSH
2039: LD_INT 1
2041: PLUS
2042: ST_TO_ADDR
// if cr > 150 then
2043: LD_VAR 0 1
2047: PUSH
2048: LD_INT 150
2050: GREATER
2051: IFFALSE 2061
// cr := 43 ;
2053: LD_ADDR_VAR 0 1
2057: PUSH
2058: LD_INT 43
2060: ST_TO_ADDR
// end ;
2061: GO 1507
// end ; end_of_file
2063: PPOPN 2
2065: END
// export function PreparePeople ( ) ; var i , j , un , to_copy , x , y , c , d ; begin
2066: LD_INT 0
2068: PPUSH
2069: PPUSH
2070: PPUSH
2071: PPUSH
2072: PPUSH
2073: PPUSH
2074: PPUSH
2075: PPUSH
2076: PPUSH
// to_copy := [ ] ;
2077: LD_ADDR_VAR 0 5
2081: PUSH
2082: EMPTY
2083: ST_TO_ADDR
// for i = 1 to 8 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 8
2096: PUSH
2097: FOR_TO
2098: IFFALSE 3008
// begin if Side_Positions [ i ] then
2100: LD_EXP 2
2104: PUSH
2105: LD_VAR 0 2
2109: ARRAY
2110: IFFALSE 3006
// begin uc_side := i ;
2112: LD_ADDR_OWVAR 20
2116: PUSH
2117: LD_VAR 0 2
2121: ST_TO_ADDR
// uc_nation := Side_Nations [ i ] ;
2122: LD_ADDR_OWVAR 21
2126: PUSH
2127: LD_EXP 4
2131: PUSH
2132: LD_VAR 0 2
2136: ARRAY
2137: ST_TO_ADDR
// x := Side_Start [ Side_Positions [ i ] ] [ 1 ] ;
2138: LD_ADDR_VAR 0 6
2142: PUSH
2143: LD_EXP 7
2147: PUSH
2148: LD_EXP 2
2152: PUSH
2153: LD_VAR 0 2
2157: ARRAY
2158: ARRAY
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: ST_TO_ADDR
// y := Side_Start [ Side_Positions [ i ] ] [ 2 ] ;
2164: LD_ADDR_VAR 0 7
2168: PUSH
2169: LD_EXP 7
2173: PUSH
2174: LD_EXP 2
2178: PUSH
2179: LD_VAR 0 2
2183: ARRAY
2184: ARRAY
2185: PUSH
2186: LD_INT 2
2188: ARRAY
2189: ST_TO_ADDR
// hc_importance := 100 ;
2190: LD_ADDR_OWVAR 32
2194: PUSH
2195: LD_INT 100
2197: ST_TO_ADDR
// if Multiplayer then
2198: LD_OWVAR 4
2202: IFFALSE 2260
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2204: LD_ADDR_OWVAR 26
2208: PUSH
2209: LD_OWVAR 19
2213: PUSH
2214: LD_OWVAR 20
2218: ARRAY
2219: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2220: LD_ADDR_OWVAR 33
2224: PUSH
2225: LD_STRING MULTIAVATARS
2227: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2228: LD_ADDR_OWVAR 34
2232: PUSH
2233: LD_OWVAR 20
2237: PPUSH
2238: CALL_OW 525
2242: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2243: LD_ADDR_OWVAR 27
2247: PUSH
2248: LD_OWVAR 20
2252: PPUSH
2253: CALL_OW 526
2257: ST_TO_ADDR
// end else
2258: GO 2292
// begin hc_name :=  ;
2260: LD_ADDR_OWVAR 26
2264: PUSH
2265: LD_STRING 
2267: ST_TO_ADDR
// hc_gallery :=  ;
2268: LD_ADDR_OWVAR 33
2272: PUSH
2273: LD_STRING 
2275: ST_TO_ADDR
// hc_sex := Rand ( 1 , 2 ) ;
2276: LD_ADDR_OWVAR 27
2280: PUSH
2281: LD_INT 1
2283: PPUSH
2284: LD_INT 2
2286: PPUSH
2287: CALL_OW 12
2291: ST_TO_ADDR
// end ; PrepareHuman ( hc_sex , 1 , skill_level ) ;
2292: LD_OWVAR 27
2296: PPUSH
2297: LD_INT 1
2299: PPUSH
2300: LD_EXP 11
2304: PPUSH
2305: CALL_OW 380
// un := CreateHuman ;
2309: LD_ADDR_VAR 0 4
2313: PUSH
2314: CALL_OW 44
2318: ST_TO_ADDR
// if not to_copy then
2319: LD_VAR 0 5
2323: NOT
2324: IFFALSE 2351
// to_copy := Replace ( to_copy , 1 , un ) else
2326: LD_ADDR_VAR 0 5
2330: PUSH
2331: LD_VAR 0 5
2335: PPUSH
2336: LD_INT 1
2338: PPUSH
2339: LD_VAR 0 4
2343: PPUSH
2344: CALL_OW 1
2348: ST_TO_ADDR
2349: GO 2427
// begin CopySkills ( to_copy [ 1 ] , un ) ;
2351: LD_VAR 0 5
2355: PUSH
2356: LD_INT 1
2358: ARRAY
2359: PPUSH
2360: LD_VAR 0 4
2364: PPUSH
2365: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ 1 ] , attr_speed ) ) ;
2369: LD_VAR 0 4
2373: PPUSH
2374: LD_INT 2
2376: PPUSH
2377: LD_VAR 0 5
2381: PUSH
2382: LD_INT 1
2384: ARRAY
2385: PPUSH
2386: LD_INT 2
2388: PPUSH
2389: CALL_OW 260
2393: PPUSH
2394: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ 1 ] , attr_stamina ) ) ;
2398: LD_VAR 0 4
2402: PPUSH
2403: LD_INT 1
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_INT 1
2413: ARRAY
2414: PPUSH
2415: LD_INT 1
2417: PPUSH
2418: CALL_OW 260
2422: PPUSH
2423: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2427: LD_VAR 0 4
2431: PPUSH
2432: LD_VAR 0 6
2436: PPUSH
2437: LD_VAR 0 7
2441: PPUSH
2442: LD_INT 10
2444: PPUSH
2445: LD_INT 0
2447: PPUSH
2448: CALL_OW 50
// hc_importance := 0 ;
2452: LD_ADDR_OWVAR 32
2456: PUSH
2457: LD_INT 0
2459: ST_TO_ADDR
// hc_name :=  ;
2460: LD_ADDR_OWVAR 26
2464: PUSH
2465: LD_STRING 
2467: ST_TO_ADDR
// hc_gallery :=  ;
2468: LD_ADDR_OWVAR 33
2472: PUSH
2473: LD_STRING 
2475: ST_TO_ADDR
// d := ( number_of_people - 1 ) / 4 ;
2476: LD_ADDR_VAR 0 9
2480: PUSH
2481: LD_EXP 10
2485: PUSH
2486: LD_INT 1
2488: MINUS
2489: PUSH
2490: LD_INT 4
2492: DIVREAL
2493: ST_TO_ADDR
// c := 1 ;
2494: LD_ADDR_VAR 0 8
2498: PUSH
2499: LD_INT 1
2501: ST_TO_ADDR
// for j = 2 to number_of_people do
2502: LD_ADDR_VAR 0 3
2506: PUSH
2507: DOUBLE
2508: LD_INT 2
2510: DEC
2511: ST_TO_ADDR
2512: LD_EXP 10
2516: PUSH
2517: FOR_TO
2518: IFFALSE 2729
// begin PrepareHuman ( false , c , skill_level ) ;
2520: LD_INT 0
2522: PPUSH
2523: LD_VAR 0 8
2527: PPUSH
2528: LD_EXP 11
2532: PPUSH
2533: CALL_OW 380
// if ( j - 1 ) mod d = 0 then
2537: LD_VAR 0 3
2541: PUSH
2542: LD_INT 1
2544: MINUS
2545: PUSH
2546: LD_VAR 0 9
2550: MOD
2551: PUSH
2552: LD_INT 0
2554: EQUAL
2555: IFFALSE 2571
// c := c + 1 ;
2557: LD_ADDR_VAR 0 8
2561: PUSH
2562: LD_VAR 0 8
2566: PUSH
2567: LD_INT 1
2569: PLUS
2570: ST_TO_ADDR
// un := CreateHuman ;
2571: LD_ADDR_VAR 0 4
2575: PUSH
2576: CALL_OW 44
2580: ST_TO_ADDR
// if to_copy < j then
2581: LD_VAR 0 5
2585: PUSH
2586: LD_VAR 0 3
2590: LESS
2591: IFFALSE 2620
// to_copy := Replace ( to_copy , j , un ) else
2593: LD_ADDR_VAR 0 5
2597: PUSH
2598: LD_VAR 0 5
2602: PPUSH
2603: LD_VAR 0 3
2607: PPUSH
2608: LD_VAR 0 4
2612: PPUSH
2613: CALL_OW 1
2617: ST_TO_ADDR
2618: GO 2702
// begin CopySkills ( to_copy [ j ] , un ) ;
2620: LD_VAR 0 5
2624: PUSH
2625: LD_VAR 0 3
2629: ARRAY
2630: PPUSH
2631: LD_VAR 0 4
2635: PPUSH
2636: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ j ] , attr_speed ) ) ;
2640: LD_VAR 0 4
2644: PPUSH
2645: LD_INT 2
2647: PPUSH
2648: LD_VAR 0 5
2652: PUSH
2653: LD_VAR 0 3
2657: ARRAY
2658: PPUSH
2659: LD_INT 2
2661: PPUSH
2662: CALL_OW 260
2666: PPUSH
2667: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ j ] , attr_stamina ) ) ;
2671: LD_VAR 0 4
2675: PPUSH
2676: LD_INT 1
2678: PPUSH
2679: LD_VAR 0 5
2683: PUSH
2684: LD_VAR 0 3
2688: ARRAY
2689: PPUSH
2690: LD_INT 1
2692: PPUSH
2693: CALL_OW 260
2697: PPUSH
2698: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2702: LD_VAR 0 4
2706: PPUSH
2707: LD_VAR 0 6
2711: PPUSH
2712: LD_VAR 0 7
2716: PPUSH
2717: LD_INT 10
2719: PPUSH
2720: LD_INT 0
2722: PPUSH
2723: CALL_OW 50
// end ;
2727: GO 2517
2729: POP
2730: POP
// if handicap then
2731: LD_EXP 26
2735: IFFALSE 3006
// begin if handicap = 1 then
2737: LD_EXP 26
2741: PUSH
2742: LD_INT 1
2744: EQUAL
2745: IFFALSE 2824
// for j = 1 to 2 do
2747: LD_ADDR_VAR 0 3
2751: PUSH
2752: DOUBLE
2753: LD_INT 1
2755: DEC
2756: ST_TO_ADDR
2757: LD_INT 2
2759: PUSH
2760: FOR_TO
2761: IFFALSE 2822
// begin vc_chassis := ru_medium_tracked ;
2763: LD_ADDR_OWVAR 37
2767: PUSH
2768: LD_INT 22
2770: ST_TO_ADDR
// vc_engine := engine_combustion ;
2771: LD_ADDR_OWVAR 39
2775: PUSH
2776: LD_INT 1
2778: ST_TO_ADDR
// vc_control := control_manual ;
2779: LD_ADDR_OWVAR 38
2783: PUSH
2784: LD_INT 1
2786: ST_TO_ADDR
// vc_weapon := ru_gun ;
2787: LD_ADDR_OWVAR 40
2791: PUSH
2792: LD_INT 44
2794: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2795: CALL_OW 45
2799: PPUSH
2800: LD_VAR 0 6
2804: PPUSH
2805: LD_VAR 0 7
2809: PPUSH
2810: LD_INT 13
2812: PPUSH
2813: LD_INT 0
2815: PPUSH
2816: CALL_OW 50
// end ;
2820: GO 2760
2822: POP
2823: POP
// if handicap = 2 then
2824: LD_EXP 26
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: IFFALSE 3006
// begin for j = 1 to 2 do
2834: LD_ADDR_VAR 0 3
2838: PUSH
2839: DOUBLE
2840: LD_INT 1
2842: DEC
2843: ST_TO_ADDR
2844: LD_INT 2
2846: PUSH
2847: FOR_TO
2848: IFFALSE 2922
// begin vc_chassis := ru_heavy_tracked ;
2850: LD_ADDR_OWVAR 37
2854: PUSH
2855: LD_INT 24
2857: ST_TO_ADDR
// vc_engine := engine_combustion ;
2858: LD_ADDR_OWVAR 39
2862: PUSH
2863: LD_INT 1
2865: ST_TO_ADDR
// vc_control := control_manual ;
2866: LD_ADDR_OWVAR 38
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_heavy_gun ] [ j ] ;
2874: LD_ADDR_OWVAR 40
2878: PUSH
2879: LD_INT 43
2881: PUSH
2882: LD_INT 46
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PUSH
2889: LD_VAR 0 3
2893: ARRAY
2894: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2895: CALL_OW 45
2899: PPUSH
2900: LD_VAR 0 6
2904: PPUSH
2905: LD_VAR 0 7
2909: PPUSH
2910: LD_INT 13
2912: PPUSH
2913: LD_INT 0
2915: PPUSH
2916: CALL_OW 50
// end ;
2920: GO 2847
2922: POP
2923: POP
// vc_chassis := ru_medium_tracked ;
2924: LD_ADDR_OWVAR 37
2928: PUSH
2929: LD_INT 22
2931: ST_TO_ADDR
// vc_engine := engine_siberite ;
2932: LD_ADDR_OWVAR 39
2936: PUSH
2937: LD_INT 3
2939: ST_TO_ADDR
// vc_control := control_computer ;
2940: LD_ADDR_OWVAR 38
2944: PUSH
2945: LD_INT 3
2947: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2948: LD_ADDR_OWVAR 40
2952: PUSH
2953: LD_INT 51
2955: ST_TO_ADDR
// un := CreateVehicle ;
2956: LD_ADDR_VAR 0 4
2960: PUSH
2961: CALL_OW 45
2965: ST_TO_ADDR
// PlaceUnitXYR ( un , x , y , 13 , false ) ;
2966: LD_VAR 0 4
2970: PPUSH
2971: LD_VAR 0 6
2975: PPUSH
2976: LD_VAR 0 7
2980: PPUSH
2981: LD_INT 13
2983: PPUSH
2984: LD_INT 0
2986: PPUSH
2987: CALL_OW 50
// SetCargo ( un , mat_cans , 100 ) ;
2991: LD_VAR 0 4
2995: PPUSH
2996: LD_INT 1
2998: PPUSH
2999: LD_INT 100
3001: PPUSH
3002: CALL_OW 290
// end ; end ; end ; end ;
3006: GO 2097
3008: POP
3009: POP
// end ;
3010: LD_VAR 0 1
3014: RET
// export function AddApeman ( area ) ; begin
3015: LD_INT 0
3017: PPUSH
// uc_nation := 0 ;
3018: LD_ADDR_OWVAR 21
3022: PUSH
3023: LD_INT 0
3025: ST_TO_ADDR
// uc_side := 0 ;
3026: LD_ADDR_OWVAR 20
3030: PUSH
3031: LD_INT 0
3033: ST_TO_ADDR
// hc_agressivity := rand ( - 10 , 15 ) ;
3034: LD_ADDR_OWVAR 35
3038: PUSH
3039: LD_INT 10
3041: NEG
3042: PPUSH
3043: LD_INT 15
3045: PPUSH
3046: CALL_OW 12
3050: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
3051: LD_INT 0
3053: PPUSH
3054: LD_INT 12
3056: PPUSH
3057: LD_INT 0
3059: PPUSH
3060: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
3064: LD_ADDR_OWVAR 29
3068: PUSH
3069: LD_INT 10
3071: PUSH
3072: LD_INT 12
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , area , false ) ;
3079: CALL_OW 44
3083: PPUSH
3084: LD_VAR 0 1
3088: PPUSH
3089: LD_INT 0
3091: PPUSH
3092: CALL_OW 49
// end ;
3096: LD_VAR 0 2
3100: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
3101: LD_INT 0
3103: PPUSH
3104: PPUSH
3105: PPUSH
3106: PPUSH
// r := 100 ;
3107: LD_ADDR_VAR 0 5
3111: PUSH
3112: LD_INT 100
3114: ST_TO_ADDR
// x := 0 ;
3115: LD_ADDR_VAR 0 6
3119: PUSH
3120: LD_INT 0
3122: ST_TO_ADDR
// while ( x < n ) do
3123: LD_VAR 0 6
3127: PUSH
3128: LD_VAR 0 2
3132: LESS
3133: IFFALSE 3448
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
3135: LD_ADDR_VAR 0 4
3139: PUSH
3140: DOUBLE
3141: LD_INT 1
3143: DEC
3144: ST_TO_ADDR
3145: LD_VAR 0 1
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 517
3157: PUSH
3158: LD_INT 1
3160: ARRAY
3161: PUSH
3162: FOR_TO
3163: IFFALSE 3444
// begin if r > 50 then
3165: LD_VAR 0 5
3169: PUSH
3170: LD_INT 50
3172: GREATER
3173: IFFALSE 3420
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
3175: LD_VAR 0 1
3179: PPUSH
3180: LD_INT 0
3182: PPUSH
3183: CALL_OW 517
3187: PUSH
3188: LD_INT 1
3190: ARRAY
3191: PUSH
3192: LD_VAR 0 4
3196: ARRAY
3197: PPUSH
3198: LD_VAR 0 1
3202: PPUSH
3203: LD_INT 0
3205: PPUSH
3206: CALL_OW 517
3210: PUSH
3211: LD_INT 2
3213: ARRAY
3214: PUSH
3215: LD_VAR 0 4
3219: ARRAY
3220: PPUSH
3221: CALL_OW 458
3225: NOT
3226: IFFALSE 3404
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , bot_side , 0 ) ;
3228: LD_VAR 0 1
3232: PPUSH
3233: LD_INT 0
3235: PPUSH
3236: CALL_OW 517
3240: PUSH
3241: LD_INT 1
3243: ARRAY
3244: PUSH
3245: LD_VAR 0 4
3249: ARRAY
3250: PPUSH
3251: LD_VAR 0 1
3255: PPUSH
3256: LD_INT 0
3258: PPUSH
3259: CALL_OW 517
3263: PUSH
3264: LD_INT 2
3266: ARRAY
3267: PUSH
3268: LD_VAR 0 4
3272: ARRAY
3273: PPUSH
3274: LD_EXP 8
3278: PPUSH
3279: LD_INT 0
3281: PPUSH
3282: CALL_OW 454
// mines_list := Insert ( mines_list , mines_list + 1 , AreaToList ( area , 0 ) [ 1 ] [ i ] ) ;
3286: LD_ADDR_EXP 17
3290: PUSH
3291: LD_EXP 17
3295: PPUSH
3296: LD_EXP 17
3300: PUSH
3301: LD_INT 1
3303: PLUS
3304: PPUSH
3305: LD_VAR 0 1
3309: PPUSH
3310: LD_INT 0
3312: PPUSH
3313: CALL_OW 517
3317: PUSH
3318: LD_INT 1
3320: ARRAY
3321: PUSH
3322: LD_VAR 0 4
3326: ARRAY
3327: PPUSH
3328: CALL_OW 2
3332: ST_TO_ADDR
// mines_list := Insert ( mines_list , mines_list + 1 , AreaToList ( area , 0 ) [ 2 ] [ i ] ) ;
3333: LD_ADDR_EXP 17
3337: PUSH
3338: LD_EXP 17
3342: PPUSH
3343: LD_EXP 17
3347: PUSH
3348: LD_INT 1
3350: PLUS
3351: PPUSH
3352: LD_VAR 0 1
3356: PPUSH
3357: LD_INT 0
3359: PPUSH
3360: CALL_OW 517
3364: PUSH
3365: LD_INT 2
3367: ARRAY
3368: PUSH
3369: LD_VAR 0 4
3373: ARRAY
3374: PPUSH
3375: CALL_OW 2
3379: ST_TO_ADDR
// r := 0 ;
3380: LD_ADDR_VAR 0 5
3384: PUSH
3385: LD_INT 0
3387: ST_TO_ADDR
// x := x + 1 ;
3388: LD_ADDR_VAR 0 6
3392: PUSH
3393: LD_VAR 0 6
3397: PUSH
3398: LD_INT 1
3400: PLUS
3401: ST_TO_ADDR
// end else
3402: GO 3418
// r := r + 35 ;
3404: LD_ADDR_VAR 0 5
3408: PUSH
3409: LD_VAR 0 5
3413: PUSH
3414: LD_INT 35
3416: PLUS
3417: ST_TO_ADDR
// end else
3418: GO 3442
// r := r + rand ( 10 , 25 ) ;
3420: LD_ADDR_VAR 0 5
3424: PUSH
3425: LD_VAR 0 5
3429: PUSH
3430: LD_INT 10
3432: PPUSH
3433: LD_INT 25
3435: PPUSH
3436: CALL_OW 12
3440: PLUS
3441: ST_TO_ADDR
// end ;
3442: GO 3162
3444: POP
3445: POP
3446: GO 3123
// end ;
3448: LD_VAR 0 3
3452: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
3453: LD_INT 0
3455: PPUSH
3456: PPUSH
3457: PPUSH
// if not GetControl ( veh ) = control_manual then
3458: LD_VAR 0 1
3462: PPUSH
3463: CALL_OW 263
3467: PUSH
3468: LD_INT 1
3470: EQUAL
3471: NOT
3472: IFFALSE 3484
// result := false else
3474: LD_ADDR_VAR 0 2
3478: PUSH
3479: LD_INT 0
3481: ST_TO_ADDR
3482: GO 3629
// if veh in FilterAllUnits ( [ f_empty ] ) then
3484: LD_VAR 0 1
3488: PUSH
3489: LD_INT 58
3491: PUSH
3492: EMPTY
3493: LIST
3494: PPUSH
3495: CALL_OW 69
3499: IN
3500: IFFALSE 3512
// result := false else
3502: LD_ADDR_VAR 0 2
3506: PUSH
3507: LD_INT 0
3509: ST_TO_ADDR
3510: GO 3629
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
3512: LD_ADDR_VAR 0 4
3516: PUSH
3517: LD_INT 22
3519: PUSH
3520: LD_VAR 0 1
3524: PPUSH
3525: CALL_OW 255
3529: PUSH
3530: EMPTY
3531: LIST
3532: LIST
3533: PUSH
3534: LD_INT 55
3536: PUSH
3537: EMPTY
3538: LIST
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: PPUSH
3544: CALL_OW 69
3548: ST_TO_ADDR
// if not filter then
3549: LD_VAR 0 4
3553: NOT
3554: IFFALSE 3566
// result := false else
3556: LD_ADDR_VAR 0 2
3560: PUSH
3561: LD_INT 0
3563: ST_TO_ADDR
3564: GO 3629
// for i = 1 to filter do
3566: LD_ADDR_VAR 0 3
3570: PUSH
3571: DOUBLE
3572: LD_INT 1
3574: DEC
3575: ST_TO_ADDR
3576: LD_VAR 0 4
3580: PUSH
3581: FOR_TO
3582: IFFALSE 3627
// if IsDriver ( filter [ i ] ) = veh then
3584: LD_VAR 0 4
3588: PUSH
3589: LD_VAR 0 3
3593: ARRAY
3594: PPUSH
3595: CALL 43941 0 1
3599: PUSH
3600: LD_VAR 0 1
3604: EQUAL
3605: IFFALSE 3625
// begin result := filter [ i ] ;
3607: LD_ADDR_VAR 0 2
3611: PUSH
3612: LD_VAR 0 4
3616: PUSH
3617: LD_VAR 0 3
3621: ARRAY
3622: ST_TO_ADDR
// break ;
3623: GO 3627
// end ;
3625: GO 3581
3627: POP
3628: POP
// end ; end ; end_of_file
3629: LD_VAR 0 2
3633: RET
// export function InitBot ; var i , ct , hex , side , un , veh , weapons , skill ; begin
3634: LD_INT 0
3636: PPUSH
3637: PPUSH
3638: PPUSH
3639: PPUSH
3640: PPUSH
3641: PPUSH
3642: PPUSH
3643: PPUSH
3644: PPUSH
// side := Bot_Side ;
3645: LD_ADDR_VAR 0 5
3649: PUSH
3650: LD_EXP 8
3654: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
3655: LD_ADDR_VAR 0 9
3659: PUSH
3660: LD_INT 4
3662: PUSH
3663: LD_INT 6
3665: PUSH
3666: LD_INT 8
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: PUSH
3674: LD_OWVAR 67
3678: ARRAY
3679: ST_TO_ADDR
// weapons := [ ar_gun , ar_rocket_launcher , ar_gatling_gun , ar_flame_thrower ] ;
3680: LD_ADDR_VAR 0 8
3684: PUSH
3685: LD_INT 27
3687: PUSH
3688: LD_INT 28
3690: PUSH
3691: LD_INT 25
3693: PUSH
3694: LD_INT 26
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: ST_TO_ADDR
// veh_counter := [ 4 , 5 , 6 ] [ Difficulty ] ;
3703: LD_ADDR_EXP 22
3707: PUSH
3708: LD_INT 4
3710: PUSH
3711: LD_INT 5
3713: PUSH
3714: LD_INT 6
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: PUSH
3722: LD_OWVAR 67
3726: ARRAY
3727: ST_TO_ADDR
// ct := [ ] ;
3728: LD_ADDR_VAR 0 3
3732: PUSH
3733: EMPTY
3734: ST_TO_ADDR
// patrols := [ ] ;
3735: LD_ADDR_EXP 19
3739: PUSH
3740: EMPTY
3741: ST_TO_ADDR
// attackers := [ ] ;
3742: LD_ADDR_EXP 20
3746: PUSH
3747: EMPTY
3748: ST_TO_ADDR
// attackers_tmp := [ ] ;
3749: LD_ADDR_EXP 27
3753: PUSH
3754: EMPTY
3755: ST_TO_ADDR
// to_produce := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , ] ;
3756: LD_ADDR_EXP 21
3760: PUSH
3761: LD_INT 14
3763: PUSH
3764: LD_INT 1
3766: PUSH
3767: LD_INT 2
3769: PUSH
3770: LD_INT 27
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: PUSH
3779: LD_INT 14
3781: PUSH
3782: LD_INT 1
3784: PUSH
3785: LD_INT 2
3787: PUSH
3788: LD_INT 25
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: PUSH
3797: LD_INT 14
3799: PUSH
3800: LD_INT 1
3802: PUSH
3803: LD_INT 2
3805: PUSH
3806: LD_INT 28
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: PUSH
3815: LD_INT 14
3817: PUSH
3818: LD_INT 1
3820: PUSH
3821: LD_INT 2
3823: PUSH
3824: LD_INT 29
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: ST_TO_ADDR
// if Difficulty > 2 then
3839: LD_OWVAR 67
3843: PUSH
3844: LD_INT 2
3846: GREATER
3847: IFFALSE 3915
// begin to_produce := Join ( to_produce , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ) ;
3849: LD_ADDR_EXP 21
3853: PUSH
3854: LD_EXP 21
3858: PPUSH
3859: LD_INT 14
3861: PUSH
3862: LD_INT 1
3864: PUSH
3865: LD_INT 2
3867: PUSH
3868: LD_INT 27
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL 46325 0 2
3881: ST_TO_ADDR
// to_produce := Join ( to_produce , [ ar_medium_trike , engine_siberite , control_remote , ar_selfpropelled_bomb ] ) ;
3882: LD_ADDR_EXP 21
3886: PUSH
3887: LD_EXP 21
3891: PPUSH
3892: LD_INT 13
3894: PUSH
3895: LD_INT 3
3897: PUSH
3898: LD_INT 2
3900: PUSH
3901: LD_INT 29
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: PPUSH
3910: CALL 46325 0 2
3914: ST_TO_ADDR
// end ; SetBName ( ar_dep , newkabul ) ;
3915: LD_INT 2
3917: PPUSH
3918: LD_STRING newkabul
3920: PPUSH
3921: CALL_OW 500
// SetResourceType ( GetBase ( ar_dep ) , mat_cans , 90000 ) ;
3925: LD_INT 2
3927: PPUSH
3928: CALL_OW 274
3932: PPUSH
3933: LD_INT 1
3935: PPUSH
3936: LD_INT 90000
3938: PPUSH
3939: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_oil , 9000 ) ;
3943: LD_INT 2
3945: PPUSH
3946: CALL_OW 274
3950: PPUSH
3951: LD_INT 2
3953: PPUSH
3954: LD_INT 9000
3956: PPUSH
3957: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_siberit , 3000 ) ;
3961: LD_INT 2
3963: PPUSH
3964: CALL_OW 274
3968: PPUSH
3969: LD_INT 3
3971: PPUSH
3972: LD_INT 3000
3974: PPUSH
3975: CALL_OW 277
// if Difficulty > 1 then
3979: LD_OWVAR 67
3983: PUSH
3984: LD_INT 1
3986: GREATER
3987: IFFALSE 4004
// SetTech ( 5 , side , state_researched ) ;
3989: LD_INT 5
3991: PPUSH
3992: LD_VAR 0 5
3996: PPUSH
3997: LD_INT 2
3999: PPUSH
4000: CALL_OW 322
// SetTech ( tech_mortar , side , state_researched ) ;
4004: LD_INT 41
4006: PPUSH
4007: LD_VAR 0 5
4011: PPUSH
4012: LD_INT 2
4014: PPUSH
4015: CALL_OW 322
// SetTech ( tech_weap1 , side , state_researched ) ;
4019: LD_INT 51
4021: PPUSH
4022: LD_VAR 0 5
4026: PPUSH
4027: LD_INT 2
4029: PPUSH
4030: CALL_OW 322
// SetTech ( tech_weap2 , side , state_researched ) ;
4034: LD_INT 52
4036: PPUSH
4037: LD_VAR 0 5
4041: PPUSH
4042: LD_INT 2
4044: PPUSH
4045: CALL_OW 322
// SetTech ( tech_weap3 , side , state_researched ) ;
4049: LD_INT 53
4051: PPUSH
4052: LD_VAR 0 5
4056: PPUSH
4057: LD_INT 2
4059: PPUSH
4060: CALL_OW 322
// SetTech ( tech_opto1 , side , state_researched ) ;
4064: LD_INT 60
4066: PPUSH
4067: LD_VAR 0 5
4071: PPUSH
4072: LD_INT 2
4074: PPUSH
4075: CALL_OW 322
// SetTech ( tech_opto2 , side , state_researched ) ;
4079: LD_INT 61
4081: PPUSH
4082: LD_VAR 0 5
4086: PPUSH
4087: LD_INT 2
4089: PPUSH
4090: CALL_OW 322
// SetTech ( tech_opto3 , side , state_researched ) ;
4094: LD_INT 62
4096: PPUSH
4097: LD_VAR 0 5
4101: PPUSH
4102: LD_INT 2
4104: PPUSH
4105: CALL_OW 322
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
4109: LD_ADDR_VAR 0 2
4113: PUSH
4114: LD_INT 22
4116: PUSH
4117: LD_VAR 0 5
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: LD_INT 21
4128: PUSH
4129: LD_INT 3
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PPUSH
4140: CALL_OW 69
4144: PUSH
4145: FOR_IN
4146: IFFALSE 4179
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
4148: LD_VAR 0 2
4152: PPUSH
4153: LD_INT 6
4155: PUSH
4156: LD_INT 8
4158: PUSH
4159: LD_INT 10
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: LIST
4166: PUSH
4167: LD_OWVAR 67
4171: ARRAY
4172: PPUSH
4173: CALL_OW 241
4177: GO 4145
4179: POP
4180: POP
// if Difficulty > 1 then
4181: LD_OWVAR 67
4185: PUSH
4186: LD_INT 1
4188: GREATER
4189: IFFALSE 4198
// RemoveEnvironmentArea ( forest_road ) ;
4191: LD_INT 11
4193: PPUSH
4194: CALL_OW 355
// PlaceMines ( mine_west_zone , [ 10 , 12 , 25 ] [ Difficulty ] ) ;
4198: LD_INT 4
4200: PPUSH
4201: LD_INT 10
4203: PUSH
4204: LD_INT 12
4206: PUSH
4207: LD_INT 25
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: LIST
4214: PUSH
4215: LD_OWVAR 67
4219: ARRAY
4220: PPUSH
4221: CALL 3101 0 2
// PlaceMines ( mine_east_zone , [ 7 , 12 , 15 ] [ Difficulty ] ) ;
4225: LD_INT 5
4227: PPUSH
4228: LD_INT 7
4230: PUSH
4231: LD_INT 12
4233: PUSH
4234: LD_INT 15
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: LIST
4241: PUSH
4242: LD_OWVAR 67
4246: ARRAY
4247: PPUSH
4248: CALL 3101 0 2
// PlaceMines ( mine_south_zone , [ 5 , 8 , 12 ] [ Difficulty ] ) ;
4252: LD_INT 7
4254: PPUSH
4255: LD_INT 5
4257: PUSH
4258: LD_INT 8
4260: PUSH
4261: LD_INT 12
4263: PUSH
4264: EMPTY
4265: LIST
4266: LIST
4267: LIST
4268: PUSH
4269: LD_OWVAR 67
4273: ARRAY
4274: PPUSH
4275: CALL 3101 0 2
// PlaceMines ( mine_high_zone , [ 0 , 3 , 5 ] [ Difficulty ] ) ;
4279: LD_INT 6
4281: PPUSH
4282: LD_INT 0
4284: PUSH
4285: LD_INT 3
4287: PUSH
4288: LD_INT 5
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: LIST
4295: PUSH
4296: LD_OWVAR 67
4300: ARRAY
4301: PPUSH
4302: CALL 3101 0 2
// PlaceMines ( mine_road_zone , [ 2 , 5 , 8 ] [ Difficulty ] ) ;
4306: LD_INT 8
4308: PPUSH
4309: LD_INT 2
4311: PUSH
4312: LD_INT 5
4314: PUSH
4315: LD_INT 8
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: LIST
4322: PUSH
4323: LD_OWVAR 67
4327: ARRAY
4328: PPUSH
4329: CALL 3101 0 2
// PlaceMines ( mine_southpass_zone , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
4333: LD_INT 9
4335: PPUSH
4336: LD_INT 0
4338: PUSH
4339: LD_INT 2
4341: PUSH
4342: LD_INT 4
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: LIST
4349: PUSH
4350: LD_OWVAR 67
4354: ARRAY
4355: PPUSH
4356: CALL 3101 0 2
// PlaceMines ( mine_oileast_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4360: LD_INT 10
4362: PPUSH
4363: LD_INT 0
4365: PUSH
4366: LD_INT 1
4368: PUSH
4369: LD_INT 1
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: PUSH
4377: LD_OWVAR 67
4381: ARRAY
4382: PPUSH
4383: CALL 3101 0 2
// PlaceMines ( mine_oilwest_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4387: LD_INT 12
4389: PPUSH
4390: LD_INT 0
4392: PUSH
4393: LD_INT 1
4395: PUSH
4396: LD_INT 1
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: LIST
4403: PUSH
4404: LD_OWVAR 67
4408: ARRAY
4409: PPUSH
4410: CALL 3101 0 2
// for i = 1 to [ 3 , 6 , 9 ] [ Difficulty ] do
4414: LD_ADDR_VAR 0 2
4418: PUSH
4419: DOUBLE
4420: LD_INT 1
4422: DEC
4423: ST_TO_ADDR
4424: LD_INT 3
4426: PUSH
4427: LD_INT 6
4429: PUSH
4430: LD_INT 9
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: LIST
4437: PUSH
4438: LD_OWVAR 67
4442: ARRAY
4443: PUSH
4444: FOR_TO
4445: IFFALSE 4620
// begin hex := RandHexXYR ( 134 , 73 , 10 , false ) ;
4447: LD_ADDR_VAR 0 4
4451: PUSH
4452: LD_INT 134
4454: PPUSH
4455: LD_INT 73
4457: PPUSH
4458: LD_INT 10
4460: PPUSH
4461: LD_INT 0
4463: PPUSH
4464: CALL_OW 17
4468: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 and not MineAtPos ( hex [ 1 ] , hex [ 2 ] ) then
4469: LD_VAR 0 4
4473: PUSH
4474: LD_INT 1
4476: ARRAY
4477: PPUSH
4478: LD_VAR 0 4
4482: PUSH
4483: LD_INT 2
4485: ARRAY
4486: PPUSH
4487: CALL_OW 428
4491: PUSH
4492: LD_INT 0
4494: EQUAL
4495: PUSH
4496: LD_VAR 0 4
4500: PUSH
4501: LD_INT 1
4503: ARRAY
4504: PPUSH
4505: LD_VAR 0 4
4509: PUSH
4510: LD_INT 2
4512: ARRAY
4513: PPUSH
4514: CALL_OW 458
4518: NOT
4519: AND
4520: IFFALSE 4618
// begin mines_list := Insert ( mines_list , mines_list + 1 , hex [ 1 ] ) ;
4522: LD_ADDR_EXP 17
4526: PUSH
4527: LD_EXP 17
4531: PPUSH
4532: LD_EXP 17
4536: PUSH
4537: LD_INT 1
4539: PLUS
4540: PPUSH
4541: LD_VAR 0 4
4545: PUSH
4546: LD_INT 1
4548: ARRAY
4549: PPUSH
4550: CALL_OW 2
4554: ST_TO_ADDR
// mines_list := Insert ( mines_list , mines_list + 1 , hex [ 2 ] ) ;
4555: LD_ADDR_EXP 17
4559: PUSH
4560: LD_EXP 17
4564: PPUSH
4565: LD_EXP 17
4569: PUSH
4570: LD_INT 1
4572: PLUS
4573: PPUSH
4574: LD_VAR 0 4
4578: PUSH
4579: LD_INT 2
4581: ARRAY
4582: PPUSH
4583: CALL_OW 2
4587: ST_TO_ADDR
// PlaceMine ( hex [ 1 ] , hex [ 2 ] , bot_side , 0 ) ;
4588: LD_VAR 0 4
4592: PUSH
4593: LD_INT 1
4595: ARRAY
4596: PPUSH
4597: LD_VAR 0 4
4601: PUSH
4602: LD_INT 2
4604: ARRAY
4605: PPUSH
4606: LD_EXP 8
4610: PPUSH
4611: LD_INT 0
4613: PPUSH
4614: CALL_OW 454
// end ; end ;
4618: GO 4444
4620: POP
4621: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4622: LD_ADDR_VAR 0 2
4626: PUSH
4627: LD_INT 22
4629: PUSH
4630: LD_VAR 0 5
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: PUSH
4639: LD_INT 30
4641: PUSH
4642: LD_INT 32
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: PPUSH
4653: CALL_OW 69
4657: PUSH
4658: FOR_IN
4659: IFFALSE 4691
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
4661: LD_VAR 0 2
4665: PPUSH
4666: LD_VAR 0 8
4670: PUSH
4671: LD_INT 1
4673: PPUSH
4674: LD_VAR 0 8
4678: PPUSH
4679: CALL_OW 12
4683: ARRAY
4684: PPUSH
4685: CALL_OW 431
4689: GO 4658
4691: POP
4692: POP
// uc_side := side ;
4693: LD_ADDR_OWVAR 20
4697: PUSH
4698: LD_VAR 0 5
4702: ST_TO_ADDR
// uc_nation := 2 ;
4703: LD_ADDR_OWVAR 21
4707: PUSH
4708: LD_INT 2
4710: ST_TO_ADDR
// for i = 1 to 1 + Difficulty do
4711: LD_ADDR_VAR 0 2
4715: PUSH
4716: DOUBLE
4717: LD_INT 1
4719: DEC
4720: ST_TO_ADDR
4721: LD_INT 1
4723: PUSH
4724: LD_OWVAR 67
4728: PLUS
4729: PUSH
4730: FOR_TO
4731: IFFALSE 4821
// begin vc_chassis := ar_half_tracked ;
4733: LD_ADDR_OWVAR 37
4737: PUSH
4738: LD_INT 14
4740: ST_TO_ADDR
// vc_engine := engine_combustion ;
4741: LD_ADDR_OWVAR 39
4745: PUSH
4746: LD_INT 1
4748: ST_TO_ADDR
// vc_control := control_manual ;
4749: LD_ADDR_OWVAR 38
4753: PUSH
4754: LD_INT 1
4756: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4757: LD_ADDR_OWVAR 40
4761: PUSH
4762: LD_INT 31
4764: ST_TO_ADDR
// veh := CreateVehicle ;
4765: LD_ADDR_VAR 0 7
4769: PUSH
4770: CALL_OW 45
4774: ST_TO_ADDR
// PlaceUnitArea ( veh , ct_area , false ) ;
4775: LD_VAR 0 7
4779: PPUSH
4780: LD_INT 3
4782: PPUSH
4783: LD_INT 0
4785: PPUSH
4786: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
4790: LD_INT 0
4792: PPUSH
4793: LD_INT 3
4795: PPUSH
4796: LD_VAR 0 9
4800: PPUSH
4801: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4805: CALL_OW 44
4809: PPUSH
4810: LD_VAR 0 7
4814: PPUSH
4815: CALL_OW 52
// end ;
4819: GO 4730
4821: POP
4822: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4823: LD_ADDR_VAR 0 2
4827: PUSH
4828: LD_INT 22
4830: PUSH
4831: LD_VAR 0 5
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PUSH
4840: LD_INT 30
4842: PUSH
4843: LD_INT 32
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: PPUSH
4854: CALL_OW 69
4858: PUSH
4859: FOR_IN
4860: IFFALSE 4893
// begin PrepareHuman ( false , 1 , skill ) ;
4862: LD_INT 0
4864: PPUSH
4865: LD_INT 1
4867: PPUSH
4868: LD_VAR 0 9
4872: PPUSH
4873: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4877: CALL_OW 44
4881: PPUSH
4882: LD_VAR 0 2
4886: PPUSH
4887: CALL_OW 52
// end ;
4891: GO 4859
4893: POP
4894: POP
// for i = 1 to 4 do
4895: LD_ADDR_VAR 0 2
4899: PUSH
4900: DOUBLE
4901: LD_INT 1
4903: DEC
4904: ST_TO_ADDR
4905: LD_INT 4
4907: PUSH
4908: FOR_TO
4909: IFFALSE 4940
// begin PrepareHuman ( false , 2 , skill ) ;
4911: LD_INT 0
4913: PPUSH
4914: LD_INT 2
4916: PPUSH
4917: LD_VAR 0 9
4921: PPUSH
4922: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_dep ) ;
4926: CALL_OW 44
4930: PPUSH
4931: LD_INT 2
4933: PPUSH
4934: CALL_OW 52
// end ;
4938: GO 4908
4940: POP
4941: POP
// for i = 1 to 6 do
4942: LD_ADDR_VAR 0 2
4946: PUSH
4947: DOUBLE
4948: LD_INT 1
4950: DEC
4951: ST_TO_ADDR
4952: LD_INT 6
4954: PUSH
4955: FOR_TO
4956: IFFALSE 4987
// begin PrepareHuman ( false , 3 , skill ) ;
4958: LD_INT 0
4960: PPUSH
4961: LD_INT 3
4963: PPUSH
4964: LD_VAR 0 9
4968: PPUSH
4969: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_fac ) ;
4973: CALL_OW 44
4977: PPUSH
4978: LD_INT 12
4980: PPUSH
4981: CALL_OW 52
// end ;
4985: GO 4955
4987: POP
4988: POP
// for i = 1 to 4 do
4989: LD_ADDR_VAR 0 2
4993: PUSH
4994: DOUBLE
4995: LD_INT 1
4997: DEC
4998: ST_TO_ADDR
4999: LD_INT 4
5001: PUSH
5002: FOR_TO
5003: IFFALSE 5060
// begin PrepareHuman ( false , 4 , skill ) ;
5005: LD_INT 0
5007: PPUSH
5008: LD_INT 4
5010: PPUSH
5011: LD_VAR 0 9
5015: PPUSH
5016: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ f_btype , b_lab_full ] ) [ ( i mod 2 ) + 1 ] ) ;
5020: CALL_OW 44
5024: PPUSH
5025: LD_INT 30
5027: PUSH
5028: LD_INT 8
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: PUSH
5040: LD_VAR 0 2
5044: PUSH
5045: LD_INT 2
5047: MOD
5048: PUSH
5049: LD_INT 1
5051: PLUS
5052: ARRAY
5053: PPUSH
5054: CALL_OW 52
// end ;
5058: GO 5002
5060: POP
5061: POP
// PrepareHuman ( false , class_mortar , skill ) ;
5062: LD_INT 0
5064: PPUSH
5065: LD_INT 8
5067: PPUSH
5068: LD_VAR 0 9
5072: PPUSH
5073: CALL_OW 380
// un := CreateHuman ;
5077: LD_ADDR_VAR 0 6
5081: PUSH
5082: CALL_OW 44
5086: ST_TO_ADDR
// SetDir ( un , 2 ) ;
5087: LD_VAR 0 6
5091: PPUSH
5092: LD_INT 2
5094: PPUSH
5095: CALL_OW 233
// PlaceHumanInUnit ( un , bun1 ) ;
5099: LD_VAR 0 6
5103: PPUSH
5104: LD_INT 31
5106: PPUSH
5107: CALL_OW 52
// for i = 1 to 4 do
5111: LD_ADDR_VAR 0 2
5115: PUSH
5116: DOUBLE
5117: LD_INT 1
5119: DEC
5120: ST_TO_ADDR
5121: LD_INT 4
5123: PUSH
5124: FOR_TO
5125: IFFALSE 5181
// begin uc_nation := 0 ;
5127: LD_ADDR_OWVAR 21
5131: PUSH
5132: LD_INT 0
5134: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 1 ) ;
5135: LD_INT 0
5137: PPUSH
5138: LD_INT 16
5140: PPUSH
5141: LD_INT 1
5143: PPUSH
5144: CALL_OW 380
// un := CreateHuman ;
5148: LD_ADDR_VAR 0 6
5152: PUSH
5153: CALL_OW 44
5157: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 46 , 8 , false ) ;
5158: LD_VAR 0 6
5162: PPUSH
5163: LD_INT 106
5165: PPUSH
5166: LD_INT 46
5168: PPUSH
5169: LD_INT 8
5171: PPUSH
5172: LD_INT 0
5174: PPUSH
5175: CALL_OW 50
// end ;
5179: GO 5124
5181: POP
5182: POP
// for i = 1 to 2 * Difficulty do
5183: LD_ADDR_VAR 0 2
5187: PUSH
5188: DOUBLE
5189: LD_INT 1
5191: DEC
5192: ST_TO_ADDR
5193: LD_INT 2
5195: PUSH
5196: LD_OWVAR 67
5200: MUL
5201: PUSH
5202: FOR_TO
5203: IFFALSE 5243
// begin uc_nation := 0 ;
5205: LD_ADDR_OWVAR 21
5209: PUSH
5210: LD_INT 0
5212: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_soldier , 3 ) ;
5213: LD_INT 0
5215: PPUSH
5216: LD_INT 15
5218: PPUSH
5219: LD_INT 3
5221: PPUSH
5222: CALL_OW 380
// PlaceUnitArea ( CreateHuman , ap1 , false ) ;
5226: CALL_OW 44
5230: PPUSH
5231: LD_INT 20
5233: PPUSH
5234: LD_INT 0
5236: PPUSH
5237: CALL_OW 49
// end ;
5241: GO 5202
5243: POP
5244: POP
// for i = 1 to 4 * Difficulty do
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: DOUBLE
5251: LD_INT 1
5253: DEC
5254: ST_TO_ADDR
5255: LD_INT 4
5257: PUSH
5258: LD_OWVAR 67
5262: MUL
5263: PUSH
5264: FOR_TO
5265: IFFALSE 5339
// begin uc_nation := 0 ;
5267: LD_ADDR_OWVAR 21
5271: PUSH
5272: LD_INT 0
5274: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_kamikaze , 3 ) ;
5275: LD_INT 0
5277: PPUSH
5278: LD_INT 17
5280: PPUSH
5281: LD_INT 3
5283: PPUSH
5284: CALL_OW 380
// hc_attr := [ 11 , 13 ] ;
5288: LD_ADDR_OWVAR 29
5292: PUSH
5293: LD_INT 11
5295: PUSH
5296: LD_INT 13
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: ST_TO_ADDR
// un := CreateHuman ;
5303: LD_ADDR_VAR 0 6
5307: PUSH
5308: CALL_OW 44
5312: ST_TO_ADDR
// PlaceUnitArea ( un , ap2 , false ) ;
5313: LD_VAR 0 6
5317: PPUSH
5318: LD_INT 21
5320: PPUSH
5321: LD_INT 0
5323: PPUSH
5324: CALL_OW 49
// ComHold ( un ) ;
5328: LD_VAR 0 6
5332: PPUSH
5333: CALL_OW 140
// end ;
5337: GO 5264
5339: POP
5340: POP
// end ;
5341: LD_VAR 0 1
5345: RET
// every 12 12$00 + 2 2$00 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) do var i , tmp , p ;
5346: LD_INT 22
5348: PUSH
5349: LD_EXP 8
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: PUSH
5358: LD_INT 30
5360: PUSH
5361: LD_INT 3
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: PPUSH
5372: CALL_OW 69
5376: IFFALSE 5683
5378: GO 5380
5380: DISABLE
5381: LD_INT 0
5383: PPUSH
5384: PPUSH
5385: PPUSH
// begin enable ;
5386: ENABLE
// if Difficulty < 3 then
5387: LD_OWVAR 67
5391: PUSH
5392: LD_INT 3
5394: LESS
5395: IFFALSE 5404
// wait ( 1 1$00 ) ;
5397: LD_INT 2100
5399: PPUSH
5400: CALL_OW 67
// tmp := queue_codes [ rng ] ;
5404: LD_ADDR_VAR 0 2
5408: PUSH
5409: LD_EXP 23
5413: PUSH
5414: LD_EXP 24
5418: ARRAY
5419: ST_TO_ADDR
// p := 1 ;
5420: LD_ADDR_VAR 0 3
5424: PUSH
5425: LD_INT 1
5427: ST_TO_ADDR
// for i = 1 to veh_counter + [ - 1 , 0 , 1 ] [ Difficulty ] do
5428: LD_ADDR_VAR 0 1
5432: PUSH
5433: DOUBLE
5434: LD_INT 1
5436: DEC
5437: ST_TO_ADDR
5438: LD_EXP 22
5442: PUSH
5443: LD_INT 1
5445: NEG
5446: PUSH
5447: LD_INT 0
5449: PUSH
5450: LD_INT 1
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: LIST
5457: PUSH
5458: LD_OWVAR 67
5462: ARRAY
5463: PLUS
5464: PUSH
5465: FOR_TO
5466: IFFALSE 5647
// begin AddComConstruct ( FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) [ 1 ] , to_produce [ tmp mod 10 ] [ 1 ] , to_produce [ tmp mod 10 ] [ 2 ] , to_produce [ tmp mod 10 ] [ 3 ] , to_produce [ tmp mod 10 ] [ 4 ] ) ;
5468: LD_INT 22
5470: PUSH
5471: LD_EXP 8
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: PUSH
5480: LD_INT 30
5482: PUSH
5483: LD_INT 3
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PPUSH
5494: CALL_OW 69
5498: PUSH
5499: LD_INT 1
5501: ARRAY
5502: PPUSH
5503: LD_EXP 21
5507: PUSH
5508: LD_VAR 0 2
5512: PUSH
5513: LD_INT 10
5515: MOD
5516: ARRAY
5517: PUSH
5518: LD_INT 1
5520: ARRAY
5521: PPUSH
5522: LD_EXP 21
5526: PUSH
5527: LD_VAR 0 2
5531: PUSH
5532: LD_INT 10
5534: MOD
5535: ARRAY
5536: PUSH
5537: LD_INT 2
5539: ARRAY
5540: PPUSH
5541: LD_EXP 21
5545: PUSH
5546: LD_VAR 0 2
5550: PUSH
5551: LD_INT 10
5553: MOD
5554: ARRAY
5555: PUSH
5556: LD_INT 3
5558: ARRAY
5559: PPUSH
5560: LD_EXP 21
5564: PUSH
5565: LD_VAR 0 2
5569: PUSH
5570: LD_INT 10
5572: MOD
5573: ARRAY
5574: PUSH
5575: LD_INT 4
5577: ARRAY
5578: PPUSH
5579: CALL_OW 185
// tmp := tmp / 10 ;
5583: LD_ADDR_VAR 0 2
5587: PUSH
5588: LD_VAR 0 2
5592: PUSH
5593: LD_INT 10
5595: DIVREAL
5596: ST_TO_ADDR
// p := p + 1 ;
5597: LD_ADDR_VAR 0 3
5601: PUSH
5602: LD_VAR 0 3
5606: PUSH
5607: LD_INT 1
5609: PLUS
5610: ST_TO_ADDR
// if p > 5 then
5611: LD_VAR 0 3
5615: PUSH
5616: LD_INT 5
5618: GREATER
5619: IFFALSE 5645
// begin p := 1 ;
5621: LD_ADDR_VAR 0 3
5625: PUSH
5626: LD_INT 1
5628: ST_TO_ADDR
// tmp := queue_codes [ rng ] ;
5629: LD_ADDR_VAR 0 2
5633: PUSH
5634: LD_EXP 23
5638: PUSH
5639: LD_EXP 24
5643: ARRAY
5644: ST_TO_ADDR
// end ; end ;
5645: GO 5465
5647: POP
5648: POP
// rng := rng + 1 ;
5649: LD_ADDR_EXP 24
5653: PUSH
5654: LD_EXP 24
5658: PUSH
5659: LD_INT 1
5661: PLUS
5662: ST_TO_ADDR
// if rng > queue_codes then
5663: LD_EXP 24
5667: PUSH
5668: LD_EXP 23
5672: GREATER
5673: IFFALSE 5683
// rng := 1 ;
5675: LD_ADDR_EXP 24
5679: PUSH
5680: LD_INT 1
5682: ST_TO_ADDR
// end ;
5683: PPOPN 3
5685: END
// every 0 0$01 trigger FilterAllUnits ( [ f_class , 17 ] ) do var i , un ;
5686: LD_INT 25
5688: PUSH
5689: LD_INT 17
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: PPUSH
5696: CALL_OW 69
5700: IFFALSE 5803
5702: GO 5704
5704: DISABLE
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
// begin enable ;
5709: ENABLE
// for i in FilterAllUnits ( [ f_class , 17 ] ) do
5710: LD_ADDR_VAR 0 1
5714: PUSH
5715: LD_INT 25
5717: PUSH
5718: LD_INT 17
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PPUSH
5725: CALL_OW 69
5729: PUSH
5730: FOR_IN
5731: IFFALSE 5801
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , bot_side ] ) , i ) ;
5733: LD_ADDR_VAR 0 2
5737: PUSH
5738: LD_INT 81
5740: PUSH
5741: LD_EXP 8
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: PPUSH
5750: CALL_OW 69
5754: PPUSH
5755: LD_VAR 0 1
5759: PPUSH
5760: CALL_OW 74
5764: ST_TO_ADDR
// if GetDistUnits ( i , un ) < 15 then
5765: LD_VAR 0 1
5769: PPUSH
5770: LD_VAR 0 2
5774: PPUSH
5775: CALL_OW 296
5779: PUSH
5780: LD_INT 15
5782: LESS
5783: IFFALSE 5799
// ComAttackUnit ( i , un ) ;
5785: LD_VAR 0 1
5789: PPUSH
5790: LD_VAR 0 2
5794: PPUSH
5795: CALL_OW 115
// end ;
5799: GO 5730
5801: POP
5802: POP
// end ;
5803: PPOPN 2
5805: END
// every 0 0$01 trigger attackers marked 17 do var i ;
5806: LD_EXP 20
5810: IFFALSE 5877
5812: GO 5814
5814: DISABLE
5815: LD_INT 0
5817: PPUSH
// begin enable ;
5818: ENABLE
// for i in attackers do
5819: LD_ADDR_VAR 0 1
5823: PUSH
5824: LD_EXP 20
5828: PUSH
5829: FOR_IN
5830: IFFALSE 5875
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
5832: LD_VAR 0 1
5836: PPUSH
5837: LD_INT 81
5839: PUSH
5840: LD_VAR 0 1
5844: PPUSH
5845: CALL_OW 255
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PPUSH
5854: CALL_OW 69
5858: PPUSH
5859: LD_VAR 0 1
5863: PPUSH
5864: CALL_OW 74
5868: PPUSH
5869: CALL_OW 115
5873: GO 5829
5875: POP
5876: POP
// end ;
5877: PPOPN 1
5879: END
// every 0 0$01 trigger not attackers marked 17 do
5880: LD_EXP 20
5884: NOT
5885: IFFALSE 5894
5887: GO 5889
5889: DISABLE
// begin enable ;
5890: ENABLE
// disable ( 17 ) ;
5891: LD_INT 17
5893: DISABLE_MARKED
// end ;
5894: END
// every 1 1$00 trigger veh_counter <= attackers do var max , i ;
5895: LD_EXP 22
5899: PUSH
5900: LD_EXP 20
5904: LESSEQUAL
5905: IFFALSE 5918
5907: GO 5909
5909: DISABLE
5910: LD_INT 0
5912: PPUSH
5913: PPUSH
// begin enable ;
5914: ENABLE
// enable ( 17 ) ;
5915: LD_INT 17
5917: ENABLE_MARKED
// end ;
5918: PPOPN 2
5920: END
// every 0 0$01 trigger game_start and tick >= 50 50$00 do
5921: LD_EXP 9
5925: PUSH
5926: LD_OWVAR 1
5930: PUSH
5931: LD_INT 105000
5933: GREATEREQUAL
5934: AND
5935: IFFALSE 5954
5937: GO 5939
5939: DISABLE
// veh_counter := veh_counter + 2 ;
5940: LD_ADDR_EXP 22
5944: PUSH
5945: LD_EXP 22
5949: PUSH
5950: LD_INT 2
5952: PLUS
5953: ST_TO_ADDR
5954: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
5955: LD_INT 22
5957: PUSH
5958: LD_EXP 8
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 33
5969: PUSH
5970: LD_INT 2
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PPUSH
5981: CALL_OW 69
5985: IFFALSE 6201
5987: GO 5989
5989: DISABLE
5990: LD_INT 0
5992: PPUSH
5993: PPUSH
5994: PPUSH
5995: PPUSH
5996: PPUSH
5997: PPUSH
5998: PPUSH
// begin enable ;
5999: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
6000: LD_ADDR_VAR 0 4
6004: PUSH
6005: LD_INT 22
6007: PUSH
6008: LD_EXP 8
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PUSH
6017: LD_INT 33
6019: PUSH
6020: LD_INT 2
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 3
6029: PUSH
6030: LD_INT 61
6032: PUSH
6033: EMPTY
6034: LIST
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: LIST
6044: PPUSH
6045: CALL_OW 69
6049: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_weapon , ar_control_tower ] ] ) ;
6050: LD_ADDR_VAR 0 3
6054: PUSH
6055: LD_INT 22
6057: PUSH
6058: LD_EXP 8
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 34
6069: PUSH
6070: LD_INT 31
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: PPUSH
6081: CALL_OW 69
6085: ST_TO_ADDR
// best := 10 ;
6086: LD_ADDR_VAR 0 5
6090: PUSH
6091: LD_INT 10
6093: ST_TO_ADDR
// best_mechanic := - 1 ;
6094: LD_ADDR_VAR 0 6
6098: PUSH
6099: LD_INT 1
6101: NEG
6102: ST_TO_ADDR
// if vehs then
6103: LD_VAR 0 4
6107: IFFALSE 6201
// begin for j in cts do
6109: LD_ADDR_VAR 0 2
6113: PUSH
6114: LD_VAR 0 3
6118: PUSH
6119: FOR_IN
6120: IFFALSE 6181
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
6122: LD_ADDR_VAR 0 7
6126: PUSH
6127: LD_VAR 0 2
6131: PPUSH
6132: CALL 3453 0 1
6136: PPUSH
6137: CALL_OW 432
6141: ST_TO_ADDR
// if p < best then
6142: LD_VAR 0 7
6146: PUSH
6147: LD_VAR 0 5
6151: LESS
6152: IFFALSE 6179
// begin best := p ;
6154: LD_ADDR_VAR 0 5
6158: PUSH
6159: LD_VAR 0 7
6163: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
6164: LD_ADDR_VAR 0 6
6168: PUSH
6169: LD_VAR 0 2
6173: PPUSH
6174: CALL 3453 0 1
6178: ST_TO_ADDR
// end ; end ;
6179: GO 6119
6181: POP
6182: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
6183: LD_VAR 0 4
6187: PUSH
6188: LD_INT 1
6190: ARRAY
6191: PPUSH
6192: LD_VAR 0 6
6196: PPUSH
6197: CALL_OW 135
// end ; end ;
6201: PPOPN 7
6203: END
// every 0 0$01 do var i , j , h , sci , eng , b , p ;
6204: GO 6206
6206: DISABLE
6207: LD_INT 0
6209: PPUSH
6210: PPUSH
6211: PPUSH
6212: PPUSH
6213: PPUSH
6214: PPUSH
6215: PPUSH
// begin enable ;
6216: ENABLE
// b := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6217: LD_ADDR_VAR 0 6
6221: PUSH
6222: LD_INT 22
6224: PUSH
6225: LD_EXP 8
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 21
6236: PUSH
6237: LD_INT 3
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 3
6246: PUSH
6247: LD_INT 24
6249: PUSH
6250: LD_INT 1000
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: PPUSH
6266: CALL_OW 69
6270: ST_TO_ADDR
// h := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6271: LD_ADDR_VAR 0 3
6275: PUSH
6276: LD_INT 22
6278: PUSH
6279: LD_EXP 8
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 2
6290: PUSH
6291: LD_INT 25
6293: PUSH
6294: LD_INT 1
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 25
6303: PUSH
6304: LD_INT 2
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 25
6313: PUSH
6314: LD_INT 3
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: PUSH
6327: LD_INT 3
6329: PUSH
6330: LD_INT 24
6332: PUSH
6333: LD_INT 750
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: PPUSH
6349: CALL_OW 69
6353: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) ;
6354: LD_ADDR_VAR 0 4
6358: PUSH
6359: LD_INT 22
6361: PUSH
6362: LD_EXP 8
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 25
6373: PUSH
6374: LD_INT 4
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PPUSH
6385: CALL_OW 69
6389: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 2 ] ] ) ;
6390: LD_ADDR_VAR 0 5
6394: PUSH
6395: LD_INT 22
6397: PUSH
6398: LD_EXP 8
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 25
6409: PUSH
6410: LD_INT 2
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PPUSH
6421: CALL_OW 69
6425: ST_TO_ADDR
// if not h and not b then
6426: LD_VAR 0 3
6430: NOT
6431: PUSH
6432: LD_VAR 0 6
6436: NOT
6437: AND
6438: IFFALSE 6722
// begin if sci then
6440: LD_VAR 0 4
6444: IFFALSE 6581
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) then
6446: LD_VAR 0 4
6450: PPUSH
6451: LD_INT 3
6453: PUSH
6454: LD_INT 54
6456: PUSH
6457: EMPTY
6458: LIST
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PPUSH
6464: CALL_OW 72
6468: PUSH
6469: LD_INT 22
6471: PUSH
6472: LD_EXP 8
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 30
6483: PUSH
6484: LD_INT 8
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PPUSH
6495: CALL_OW 69
6499: AND
6500: IFFALSE 6581
// for j in UnitFilter ( sci , [ f_not , [ f_inside ] ] ) do
6502: LD_ADDR_VAR 0 2
6506: PUSH
6507: LD_VAR 0 4
6511: PPUSH
6512: LD_INT 3
6514: PUSH
6515: LD_INT 54
6517: PUSH
6518: EMPTY
6519: LIST
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PPUSH
6525: CALL_OW 72
6529: PUSH
6530: FOR_IN
6531: IFFALSE 6579
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
6533: LD_VAR 0 2
6537: PPUSH
6538: LD_INT 22
6540: PUSH
6541: LD_EXP 8
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: LD_INT 30
6552: PUSH
6553: LD_INT 8
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: PPUSH
6564: CALL_OW 69
6568: PUSH
6569: LD_INT 1
6571: ARRAY
6572: PPUSH
6573: CALL_OW 120
6577: GO 6530
6579: POP
6580: POP
// if eng then
6581: LD_VAR 0 5
6585: IFFALSE 6722
// if UnitFilter ( eng , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) then
6587: LD_VAR 0 5
6591: PPUSH
6592: LD_INT 3
6594: PUSH
6595: LD_INT 54
6597: PUSH
6598: EMPTY
6599: LIST
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PPUSH
6605: CALL_OW 72
6609: PUSH
6610: LD_INT 22
6612: PUSH
6613: LD_EXP 8
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 30
6624: PUSH
6625: LD_INT 1
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: PPUSH
6636: CALL_OW 69
6640: AND
6641: IFFALSE 6722
// for j in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6643: LD_ADDR_VAR 0 2
6647: PUSH
6648: LD_VAR 0 5
6652: PPUSH
6653: LD_INT 3
6655: PUSH
6656: LD_INT 54
6658: PUSH
6659: EMPTY
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PPUSH
6666: CALL_OW 72
6670: PUSH
6671: FOR_IN
6672: IFFALSE 6720
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
6674: LD_VAR 0 2
6678: PPUSH
6679: LD_INT 22
6681: PUSH
6682: LD_EXP 8
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PUSH
6691: LD_INT 30
6693: PUSH
6694: LD_INT 1
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: PPUSH
6705: CALL_OW 69
6709: PUSH
6710: LD_INT 1
6712: ARRAY
6713: PPUSH
6714: CALL_OW 120
6718: GO 6671
6720: POP
6721: POP
// end ; p := 1 ;
6722: LD_ADDR_VAR 0 7
6726: PUSH
6727: LD_INT 1
6729: ST_TO_ADDR
// if b and eng then
6730: LD_VAR 0 6
6734: PUSH
6735: LD_VAR 0 5
6739: AND
6740: IFFALSE 6874
// for j in eng do
6742: LD_ADDR_VAR 0 2
6746: PUSH
6747: LD_VAR 0 5
6751: PUSH
6752: FOR_IN
6753: IFFALSE 6872
// begin if IsInUnit ( j ) then
6755: LD_VAR 0 2
6759: PPUSH
6760: CALL_OW 310
6764: IFFALSE 6777
// ComExitBuilding ( j ) else
6766: LD_VAR 0 2
6770: PPUSH
6771: CALL_OW 122
6775: GO 6870
// if not HasTask ( j ) and GetLives ( j ) > 750 then
6777: LD_VAR 0 2
6781: PPUSH
6782: CALL_OW 314
6786: NOT
6787: PUSH
6788: LD_VAR 0 2
6792: PPUSH
6793: CALL_OW 256
6797: PUSH
6798: LD_INT 750
6800: GREATER
6801: AND
6802: IFFALSE 6870
// begin if b > p then
6804: LD_VAR 0 6
6808: PUSH
6809: LD_VAR 0 7
6813: GREATER
6814: IFFALSE 6852
// begin ComRepairBuilding ( j , b [ p ] ) ;
6816: LD_VAR 0 2
6820: PPUSH
6821: LD_VAR 0 6
6825: PUSH
6826: LD_VAR 0 7
6830: ARRAY
6831: PPUSH
6832: CALL_OW 130
// p := p + 1 ;
6836: LD_ADDR_VAR 0 7
6840: PUSH
6841: LD_VAR 0 7
6845: PUSH
6846: LD_INT 1
6848: PLUS
6849: ST_TO_ADDR
// end else
6850: GO 6870
// ComRepairBuilding ( j , b [ 1 ] ) ;
6852: LD_VAR 0 2
6856: PPUSH
6857: LD_VAR 0 6
6861: PUSH
6862: LD_INT 1
6864: ARRAY
6865: PPUSH
6866: CALL_OW 130
// end ; end ;
6870: GO 6752
6872: POP
6873: POP
// if h and sci then
6874: LD_VAR 0 3
6878: PUSH
6879: LD_VAR 0 4
6883: AND
6884: IFFALSE 7023
// for i in h do
6886: LD_ADDR_VAR 0 1
6890: PUSH
6891: LD_VAR 0 3
6895: PUSH
6896: FOR_IN
6897: IFFALSE 7021
// if GetDistUnitXY ( i , 108 , 42 ) > 10 then
6899: LD_VAR 0 1
6903: PPUSH
6904: LD_INT 108
6906: PPUSH
6907: LD_INT 42
6909: PPUSH
6910: CALL_OW 297
6914: PUSH
6915: LD_INT 10
6917: GREATER
6918: IFFALSE 6937
// ComMoveXY ( i , 108 , 42 ) else
6920: LD_VAR 0 1
6924: PPUSH
6925: LD_INT 108
6927: PPUSH
6928: LD_INT 42
6930: PPUSH
6931: CALL_OW 111
6935: GO 7019
// begin for j in sci do
6937: LD_ADDR_VAR 0 2
6941: PUSH
6942: LD_VAR 0 4
6946: PUSH
6947: FOR_IN
6948: IFFALSE 7017
// begin if GetTag ( j ) > 0 then
6950: LD_VAR 0 2
6954: PPUSH
6955: CALL_OW 110
6959: PUSH
6960: LD_INT 0
6962: GREATER
6963: IFFALSE 6967
// continue ;
6965: GO 6947
// if IsInUnit ( j ) then
6967: LD_VAR 0 2
6971: PPUSH
6972: CALL_OW 310
6976: IFFALSE 6989
// ComExitBuilding ( j ) else
6978: LD_VAR 0 2
6982: PPUSH
6983: CALL_OW 122
6987: GO 7015
// if not HasTask ( j ) then
6989: LD_VAR 0 2
6993: PPUSH
6994: CALL_OW 314
6998: NOT
6999: IFFALSE 7015
// ComHeal ( j , h ) ;
7001: LD_VAR 0 2
7005: PPUSH
7006: LD_VAR 0 3
7010: PPUSH
7011: CALL_OW 128
// end ;
7015: GO 6947
7017: POP
7018: POP
// end ;
7019: GO 6896
7021: POP
7022: POP
// end ;
7023: PPOPN 7
7025: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 155 , 88 ) and GetBType ( HexInfo ( 155 , 88 ) = b_siberite_mine ) do var sci , p ;
7026: LD_INT 155
7028: PPUSH
7029: LD_INT 88
7031: PPUSH
7032: CALL_OW 428
7036: PUSH
7037: LD_INT 155
7039: PPUSH
7040: LD_INT 88
7042: PPUSH
7043: CALL_OW 428
7047: PUSH
7048: LD_INT 30
7050: EQUAL
7051: PPUSH
7052: CALL_OW 266
7056: AND
7057: IFFALSE 7306
7059: GO 7061
7061: DISABLE
7062: LD_INT 0
7064: PPUSH
7065: PPUSH
// begin p := GetSide ( HexInfo ( 155 , 88 ) ) ;
7066: LD_ADDR_VAR 0 2
7070: PUSH
7071: LD_INT 155
7073: PPUSH
7074: LD_INT 88
7076: PPUSH
7077: CALL_OW 428
7081: PPUSH
7082: CALL_OW 255
7086: ST_TO_ADDR
// Wait ( [ 5 5$30 , 6 6$33 , 6 6$21 , 8 8$44 , 9 9$31 , 4 4$33 , 9 9$01 , 5 5$01 ] [ p ] ) ;
7087: LD_INT 11550
7089: PUSH
7090: LD_INT 13755
7092: PUSH
7093: LD_INT 13335
7095: PUSH
7096: LD_INT 18340
7098: PUSH
7099: LD_INT 19985
7101: PUSH
7102: LD_INT 9555
7104: PUSH
7105: LD_INT 18935
7107: PUSH
7108: LD_INT 10535
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: PUSH
7121: LD_VAR 0 2
7125: ARRAY
7126: PPUSH
7127: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
7131: LD_INT 22
7133: PUSH
7134: LD_EXP 8
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PUSH
7143: LD_INT 25
7145: PUSH
7146: LD_INT 4
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PPUSH
7157: CALL_OW 69
7161: PUSH
7162: LD_INT 0
7164: EQUAL
7165: IFFALSE 7169
// exit ;
7167: GO 7306
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ 1 ] ;
7169: LD_ADDR_VAR 0 1
7173: PUSH
7174: LD_INT 22
7176: PUSH
7177: LD_EXP 8
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: LD_INT 25
7188: PUSH
7189: LD_INT 4
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PPUSH
7200: CALL_OW 69
7204: PUSH
7205: LD_INT 1
7207: ARRAY
7208: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
7209: LD_VAR 0 1
7213: PPUSH
7214: LD_INT 1
7216: PPUSH
7217: CALL_OW 109
// ComExitBuilding ( sci ) ;
7221: LD_VAR 0 1
7225: PPUSH
7226: CALL_OW 122
// AddComMoveXY ( sci , 126 , 59 ) ;
7230: LD_VAR 0 1
7234: PPUSH
7235: LD_INT 126
7237: PPUSH
7238: LD_INT 59
7240: PPUSH
7241: CALL_OW 171
// if p mod 2 = 0 then
7245: LD_VAR 0 2
7249: PUSH
7250: LD_INT 2
7252: MOD
7253: PUSH
7254: LD_INT 0
7256: EQUAL
7257: IFFALSE 7276
// AddComMoveXY ( sci , 148 , 66 ) else
7259: LD_VAR 0 1
7263: PPUSH
7264: LD_INT 148
7266: PPUSH
7267: LD_INT 66
7269: PPUSH
7270: CALL_OW 171
7274: GO 7291
// AddComMoveXY ( sci , 135 , 84 ) ;
7276: LD_VAR 0 1
7280: PPUSH
7281: LD_INT 135
7283: PPUSH
7284: LD_INT 84
7286: PPUSH
7287: CALL_OW 171
// AddComContaminate ( sci , 155 , 88 ) ;
7291: LD_VAR 0 1
7295: PPUSH
7296: LD_INT 155
7298: PPUSH
7299: LD_INT 88
7301: PPUSH
7302: CALL_OW 218
// end ;
7306: PPOPN 2
7308: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 33 , 10 ) and GetBType ( HexInfo ( 33 , 10 ) = b_siberite_mine ) do var sci , p ;
7309: LD_INT 33
7311: PPUSH
7312: LD_INT 10
7314: PPUSH
7315: CALL_OW 428
7319: PUSH
7320: LD_INT 33
7322: PPUSH
7323: LD_INT 10
7325: PPUSH
7326: CALL_OW 428
7330: PUSH
7331: LD_INT 30
7333: EQUAL
7334: PPUSH
7335: CALL_OW 266
7339: AND
7340: IFFALSE 7591
7342: GO 7344
7344: DISABLE
7345: LD_INT 0
7347: PPUSH
7348: PPUSH
// begin p := GetSide ( HexInfo ( 33 , 10 ) ) ;
7349: LD_ADDR_VAR 0 2
7353: PUSH
7354: LD_INT 33
7356: PPUSH
7357: LD_INT 10
7359: PPUSH
7360: CALL_OW 428
7364: PPUSH
7365: CALL_OW 255
7369: ST_TO_ADDR
// Wait ( [ 4 4$30 , 5 5$33 , 3 3$21 , 4 4$44 , 3 3$31 , 5 5$33 , 3 3$01 , 8 8$01 ] [ p ] ) ;
7370: LD_INT 9450
7372: PUSH
7373: LD_INT 11655
7375: PUSH
7376: LD_INT 7035
7378: PUSH
7379: LD_INT 9940
7381: PUSH
7382: LD_INT 7385
7384: PUSH
7385: LD_INT 11655
7387: PUSH
7388: LD_INT 6335
7390: PUSH
7391: LD_INT 16835
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: PUSH
7404: LD_VAR 0 2
7408: ARRAY
7409: PPUSH
7410: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
7414: LD_INT 22
7416: PUSH
7417: LD_EXP 8
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 25
7428: PUSH
7429: LD_INT 4
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PPUSH
7440: CALL_OW 69
7444: PUSH
7445: LD_INT 0
7447: EQUAL
7448: IFFALSE 7452
// exit ;
7450: GO 7591
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ sci ] ;
7452: LD_ADDR_VAR 0 1
7456: PUSH
7457: LD_INT 22
7459: PUSH
7460: LD_EXP 8
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_INT 25
7471: PUSH
7472: LD_INT 4
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PPUSH
7483: CALL_OW 69
7487: PUSH
7488: LD_VAR 0 1
7492: ARRAY
7493: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
7494: LD_VAR 0 1
7498: PPUSH
7499: LD_INT 1
7501: PPUSH
7502: CALL_OW 109
// ComExitBuilding ( sci ) ;
7506: LD_VAR 0 1
7510: PPUSH
7511: CALL_OW 122
// AddComMoveXY ( sci , 67 , 13 ) ;
7515: LD_VAR 0 1
7519: PPUSH
7520: LD_INT 67
7522: PPUSH
7523: LD_INT 13
7525: PPUSH
7526: CALL_OW 171
// if p mod 2 = 0 then
7530: LD_VAR 0 2
7534: PUSH
7535: LD_INT 2
7537: MOD
7538: PUSH
7539: LD_INT 0
7541: EQUAL
7542: IFFALSE 7561
// AddComMoveXY ( sci , 37 , 3 ) else
7544: LD_VAR 0 1
7548: PPUSH
7549: LD_INT 37
7551: PPUSH
7552: LD_INT 3
7554: PPUSH
7555: CALL_OW 171
7559: GO 7576
// AddComMoveXY ( sci , 45 , 20 ) ;
7561: LD_VAR 0 1
7565: PPUSH
7566: LD_INT 45
7568: PPUSH
7569: LD_INT 20
7571: PPUSH
7572: CALL_OW 171
// AddComContaminate ( sci , 33 , 10 ) ;
7576: LD_VAR 0 1
7580: PPUSH
7581: LD_INT 33
7583: PPUSH
7584: LD_INT 10
7586: PPUSH
7587: CALL_OW 218
// end ;
7591: PPOPN 2
7593: END
// every 0 0$01 trigger mines_list do var i , p ;
7594: LD_EXP 17
7598: IFFALSE 7824
7600: GO 7602
7602: DISABLE
7603: LD_INT 0
7605: PPUSH
7606: PPUSH
// begin enable ;
7607: ENABLE
// p := 1 ;
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: LD_INT 1
7615: ST_TO_ADDR
// for i = 1 to mines_list / 2 do
7616: LD_ADDR_VAR 0 1
7620: PUSH
7621: DOUBLE
7622: LD_INT 1
7624: DEC
7625: ST_TO_ADDR
7626: LD_EXP 17
7630: PUSH
7631: LD_INT 2
7633: DIVREAL
7634: PUSH
7635: FOR_TO
7636: IFFALSE 7822
// begin if HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) > 0 then
7638: LD_EXP 17
7642: PUSH
7643: LD_VAR 0 2
7647: ARRAY
7648: PPUSH
7649: LD_EXP 17
7653: PUSH
7654: LD_VAR 0 2
7658: PUSH
7659: LD_INT 1
7661: PLUS
7662: ARRAY
7663: PPUSH
7664: CALL_OW 428
7668: PUSH
7669: LD_INT 0
7671: GREATER
7672: IFFALSE 7806
// if GetSide ( HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) ) <> bot_side then
7674: LD_EXP 17
7678: PUSH
7679: LD_VAR 0 2
7683: ARRAY
7684: PPUSH
7685: LD_EXP 17
7689: PUSH
7690: LD_VAR 0 2
7694: PUSH
7695: LD_INT 1
7697: PLUS
7698: ARRAY
7699: PPUSH
7700: CALL_OW 428
7704: PPUSH
7705: CALL_OW 255
7709: PUSH
7710: LD_EXP 8
7714: NONEQUAL
7715: IFFALSE 7806
// begin LaunchMineAtPos ( mines_list [ p ] , mines_list [ p + 1 ] , bot_side ) ;
7717: LD_EXP 17
7721: PUSH
7722: LD_VAR 0 2
7726: ARRAY
7727: PPUSH
7728: LD_EXP 17
7732: PUSH
7733: LD_VAR 0 2
7737: PUSH
7738: LD_INT 1
7740: PLUS
7741: ARRAY
7742: PPUSH
7743: LD_EXP 8
7747: PPUSH
7748: CALL_OW 456
// mines_list := Delete ( mines_list , p ) ;
7752: LD_ADDR_EXP 17
7756: PUSH
7757: LD_EXP 17
7761: PPUSH
7762: LD_VAR 0 2
7766: PPUSH
7767: CALL_OW 3
7771: ST_TO_ADDR
// mines_list := Delete ( mines_list , p ) ;
7772: LD_ADDR_EXP 17
7776: PUSH
7777: LD_EXP 17
7781: PPUSH
7782: LD_VAR 0 2
7786: PPUSH
7787: CALL_OW 3
7791: ST_TO_ADDR
// p := p - 2 ;
7792: LD_ADDR_VAR 0 2
7796: PUSH
7797: LD_VAR 0 2
7801: PUSH
7802: LD_INT 2
7804: MINUS
7805: ST_TO_ADDR
// end ; p := p + 2 ;
7806: LD_ADDR_VAR 0 2
7810: PUSH
7811: LD_VAR 0 2
7815: PUSH
7816: LD_INT 2
7818: PLUS
7819: ST_TO_ADDR
// end ;
7820: GO 7635
7822: POP
7823: POP
// end ;
7824: PPOPN 2
7826: END
// every 0 0$03 do var i , p , skr , filter , dep ;
7827: GO 7829
7829: DISABLE
7830: LD_INT 0
7832: PPUSH
7833: PPUSH
7834: PPUSH
7835: PPUSH
7836: PPUSH
// begin enable ;
7837: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , bot_side ] , [ f_class , class_apeman_engineer ] ] ) ;
7838: LD_ADDR_VAR 0 4
7842: PUSH
7843: LD_INT 50
7845: PUSH
7846: EMPTY
7847: LIST
7848: PUSH
7849: LD_INT 22
7851: PUSH
7852: LD_EXP 8
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: PUSH
7861: LD_INT 25
7863: PUSH
7864: LD_INT 16
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: LIST
7875: PPUSH
7876: CALL_OW 69
7880: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7881: LD_ADDR_VAR 0 5
7885: PUSH
7886: LD_INT 22
7888: PUSH
7889: LD_EXP 8
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PUSH
7898: LD_INT 2
7900: PUSH
7901: LD_INT 30
7903: PUSH
7904: LD_INT 0
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PUSH
7911: LD_INT 30
7913: PUSH
7914: LD_INT 1
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PPUSH
7930: CALL_OW 69
7934: ST_TO_ADDR
// skr := GetListOfCratesInArea ( kabul_crates ) ;
7935: LD_ADDR_VAR 0 3
7939: PUSH
7940: LD_INT 13
7942: PPUSH
7943: CALL_OW 435
7947: ST_TO_ADDR
// if filter and skr then
7948: LD_VAR 0 4
7952: PUSH
7953: LD_VAR 0 3
7957: AND
7958: IFFALSE 8033
// for i = 1 to filter do
7960: LD_ADDR_VAR 0 1
7964: PUSH
7965: DOUBLE
7966: LD_INT 1
7968: DEC
7969: ST_TO_ADDR
7970: LD_VAR 0 4
7974: PUSH
7975: FOR_TO
7976: IFFALSE 8031
// if not HasTask ( filter [ i ] ) then
7978: LD_VAR 0 4
7982: PUSH
7983: LD_VAR 0 1
7987: ARRAY
7988: PPUSH
7989: CALL_OW 314
7993: NOT
7994: IFFALSE 8029
// ComCollect ( filter [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
7996: LD_VAR 0 4
8000: PUSH
8001: LD_VAR 0 1
8005: ARRAY
8006: PPUSH
8007: LD_VAR 0 3
8011: PUSH
8012: LD_INT 1
8014: ARRAY
8015: PPUSH
8016: LD_VAR 0 3
8020: PUSH
8021: LD_INT 2
8023: ARRAY
8024: PPUSH
8025: CALL_OW 117
8029: GO 7975
8031: POP
8032: POP
// end ; end_of_file
8033: PPOPN 5
8035: END
// on UnitDestroyed ( un ) do var shooter , cl , s , n ;
8036: LD_INT 0
8038: PPUSH
8039: PPUSH
8040: PPUSH
8041: PPUSH
// begin if un in attackers then
8042: LD_VAR 0 1
8046: PUSH
8047: LD_EXP 20
8051: IN
8052: IFFALSE 8070
// attackers := attackers diff un ;
8054: LD_ADDR_EXP 20
8058: PUSH
8059: LD_EXP 20
8063: PUSH
8064: LD_VAR 0 1
8068: DIFF
8069: ST_TO_ADDR
// if GetSide ( un ) <> bot_side and GetSide ( un ) > 0 and un in FilterAllUnits ( [ f_type , unit_human ] ) then
8070: LD_VAR 0 1
8074: PPUSH
8075: CALL_OW 255
8079: PUSH
8080: LD_EXP 8
8084: NONEQUAL
8085: PUSH
8086: LD_VAR 0 1
8090: PPUSH
8091: CALL_OW 255
8095: PUSH
8096: LD_INT 0
8098: GREATER
8099: AND
8100: PUSH
8101: LD_VAR 0 1
8105: PUSH
8106: LD_INT 21
8108: PUSH
8109: LD_INT 1
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: PPUSH
8116: CALL_OW 69
8120: IN
8121: AND
8122: IFFALSE 8306
// begin if respawning_time_min > 0 0$00 then
8124: LD_EXP 13
8128: PUSH
8129: LD_INT 0
8131: GREATER
8132: IFFALSE 8306
// begin s := GetSide ( un ) ;
8134: LD_ADDR_VAR 0 4
8138: PUSH
8139: LD_VAR 0 1
8143: PPUSH
8144: CALL_OW 255
8148: ST_TO_ADDR
// n := GetNation ( un ) ;
8149: LD_ADDR_VAR 0 5
8153: PUSH
8154: LD_VAR 0 1
8158: PPUSH
8159: CALL_OW 248
8163: ST_TO_ADDR
// cl := GetClass ( un ) ;
8164: LD_ADDR_VAR 0 3
8168: PUSH
8169: LD_VAR 0 1
8173: PPUSH
8174: CALL_OW 257
8178: ST_TO_ADDR
// wait ( respawning_time_min ) ;
8179: LD_EXP 13
8183: PPUSH
8184: CALL_OW 67
// wait ( respawning_time_max - ( 0 0$10 * tick mod 10 + 1 ) * cl ) ;
8188: LD_EXP 14
8192: PUSH
8193: LD_INT 350
8195: PUSH
8196: LD_OWVAR 1
8200: MUL
8201: PUSH
8202: LD_INT 10
8204: MOD
8205: PUSH
8206: LD_INT 1
8208: PLUS
8209: PUSH
8210: LD_VAR 0 3
8214: MUL
8215: MINUS
8216: PPUSH
8217: CALL_OW 67
// uc_side := s ;
8221: LD_ADDR_OWVAR 20
8225: PUSH
8226: LD_VAR 0 4
8230: ST_TO_ADDR
// uc_nation := n ;
8231: LD_ADDR_OWVAR 21
8235: PUSH
8236: LD_VAR 0 5
8240: ST_TO_ADDR
// PrepareHuman ( false , cl , skill_level - 2 ) ;
8241: LD_INT 0
8243: PPUSH
8244: LD_VAR 0 3
8248: PPUSH
8249: LD_EXP 11
8253: PUSH
8254: LD_INT 2
8256: MINUS
8257: PPUSH
8258: CALL_OW 380
// PlaceUnitArea ( CreateHuman , [ cr1 , cr3 , cr2 , cr3 ] [ ( cl mod 4 ) + 1 ] , true ) ;
8262: CALL_OW 44
8266: PPUSH
8267: LD_INT 17
8269: PUSH
8270: LD_INT 19
8272: PUSH
8273: LD_INT 18
8275: PUSH
8276: LD_INT 19
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: PUSH
8285: LD_VAR 0 3
8289: PUSH
8290: LD_INT 4
8292: MOD
8293: PUSH
8294: LD_INT 1
8296: PLUS
8297: ARRAY
8298: PPUSH
8299: LD_INT 1
8301: PPUSH
8302: CALL_OW 49
// end ; end ; end ;
8306: PPOPN 5
8308: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = bot_side and un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_type , unit_vehicle ] ] ) then
8309: LD_VAR 0 1
8313: PPUSH
8314: CALL_OW 255
8318: PUSH
8319: LD_EXP 8
8323: EQUAL
8324: PUSH
8325: LD_VAR 0 1
8329: PUSH
8330: LD_INT 33
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: LD_INT 21
8342: PUSH
8343: LD_INT 2
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: PPUSH
8354: CALL_OW 69
8358: IN
8359: AND
8360: IFFALSE 8483
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> bot_side then
8362: LD_OWVAR 3
8366: PUSH
8367: LD_VAR 0 1
8371: DIFF
8372: PPUSH
8373: LD_VAR 0 1
8377: PPUSH
8378: CALL_OW 74
8382: PPUSH
8383: CALL_OW 255
8387: PUSH
8388: LD_EXP 8
8392: NONEQUAL
8393: IFFALSE 8483
// begin Wait ( 0 0$1.3 ) ;
8395: LD_INT 46
8397: PPUSH
8398: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8402: LD_VAR 0 1
8406: PPUSH
8407: CALL_OW 250
8411: PPUSH
8412: LD_VAR 0 1
8416: PPUSH
8417: CALL_OW 251
8421: PPUSH
8422: LD_INT 1
8424: PPUSH
8425: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8429: LD_VAR 0 1
8433: PPUSH
8434: CALL_OW 250
8438: PPUSH
8439: LD_VAR 0 1
8443: PPUSH
8444: CALL_OW 251
8448: PPUSH
8449: LD_INT 1
8451: PPUSH
8452: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8456: LD_VAR 0 1
8460: PPUSH
8461: CALL_OW 250
8465: PPUSH
8466: LD_VAR 0 1
8470: PPUSH
8471: CALL_OW 251
8475: PPUSH
8476: LD_INT 1
8478: PPUSH
8479: CALL_OW 453
// end ; if GetControl ( un ) = control_remote then
8483: LD_VAR 0 1
8487: PPUSH
8488: CALL_OW 263
8492: PUSH
8493: LD_INT 2
8495: EQUAL
8496: IFFALSE 8507
// ComUnlink ( un ) ;
8498: LD_VAR 0 1
8502: PPUSH
8503: CALL_OW 136
// end ;
8507: PPOPN 1
8509: END
// on VehicleConstructed ( veh , b ) do begin if GetSide ( veh ) = bot_side then
8510: LD_VAR 0 1
8514: PPUSH
8515: CALL_OW 255
8519: PUSH
8520: LD_EXP 8
8524: EQUAL
8525: IFFALSE 8556
// attackers := Insert ( attackers , attackers + 1 , veh ) ;
8527: LD_ADDR_EXP 20
8531: PUSH
8532: LD_EXP 20
8536: PPUSH
8537: LD_EXP 20
8541: PUSH
8542: LD_INT 1
8544: PLUS
8545: PPUSH
8546: LD_VAR 0 1
8550: PPUSH
8551: CALL_OW 2
8555: ST_TO_ADDR
// end ;
8556: PPOPN 2
8558: END
// on LeaveBuilding ( b , un ) do var i , arm ;
8559: LD_INT 0
8561: PPUSH
8562: PPUSH
// begin if GetSide ( b ) = bot_side and GetBType ( b ) = b_bunker then
8563: LD_VAR 0 1
8567: PPUSH
8568: CALL_OW 255
8572: PUSH
8573: LD_EXP 8
8577: EQUAL
8578: PUSH
8579: LD_VAR 0 1
8583: PPUSH
8584: CALL_OW 266
8588: PUSH
8589: LD_INT 32
8591: EQUAL
8592: AND
8593: IFFALSE 8691
// begin arm := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_barracks ] ] ) ;
8595: LD_ADDR_VAR 0 4
8599: PUSH
8600: LD_INT 22
8602: PUSH
8603: LD_EXP 8
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: PUSH
8612: LD_INT 30
8614: PUSH
8615: LD_INT 5
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: PPUSH
8626: CALL_OW 69
8630: ST_TO_ADDR
// for i in arm do
8631: LD_ADDR_VAR 0 3
8635: PUSH
8636: LD_VAR 0 4
8640: PUSH
8641: FOR_IN
8642: IFFALSE 8689
// if UnitsInside ( i ) < 6 then
8644: LD_VAR 0 3
8648: PPUSH
8649: CALL_OW 313
8653: PUSH
8654: LD_INT 6
8656: LESS
8657: IFFALSE 8687
// begin ComEnterUnit ( un , i ) ;
8659: LD_VAR 0 2
8663: PPUSH
8664: LD_VAR 0 3
8668: PPUSH
8669: CALL_OW 120
// AddComChangeProfession ( un , class_mortar ) ;
8673: LD_VAR 0 2
8677: PPUSH
8678: LD_INT 8
8680: PPUSH
8681: CALL_OW 183
// break ;
8685: GO 8689
// end ;
8687: GO 8641
8689: POP
8690: POP
// end ; end ; end_of_file
8691: PPOPN 4
8693: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
8694: LD_VAR 0 1
8698: PUSH
8699: LD_INT 200
8701: DOUBLE
8702: GREATEREQUAL
8703: IFFALSE 8711
8705: LD_INT 299
8707: DOUBLE
8708: LESSEQUAL
8709: IFTRUE 8713
8711: GO 8745
8713: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
8714: LD_VAR 0 1
8718: PPUSH
8719: LD_VAR 0 2
8723: PPUSH
8724: LD_VAR 0 3
8728: PPUSH
8729: LD_VAR 0 4
8733: PPUSH
8734: LD_VAR 0 5
8738: PPUSH
8739: CALL 66448 0 5
8743: GO 8822
8745: LD_INT 300
8747: DOUBLE
8748: GREATEREQUAL
8749: IFFALSE 8757
8751: LD_INT 399
8753: DOUBLE
8754: LESSEQUAL
8755: IFTRUE 8759
8757: GO 8821
8759: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
8760: LD_VAR 0 1
8764: PPUSH
8765: LD_VAR 0 2
8769: PPUSH
8770: LD_VAR 0 3
8774: PPUSH
8775: LD_VAR 0 4
8779: PPUSH
8780: LD_VAR 0 5
8784: PPUSH
8785: LD_VAR 0 6
8789: PPUSH
8790: LD_VAR 0 7
8794: PPUSH
8795: LD_VAR 0 8
8799: PPUSH
8800: LD_VAR 0 9
8804: PPUSH
8805: LD_VAR 0 10
8809: PPUSH
8810: LD_VAR 0 11
8814: PPUSH
8815: CALL 62781 0 11
8819: GO 8822
8821: POP
// end ;
8822: PPOPN 11
8824: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
8825: LD_VAR 0 1
8829: PPUSH
8830: LD_VAR 0 2
8834: PPUSH
8835: LD_VAR 0 3
8839: PPUSH
8840: LD_VAR 0 4
8844: PPUSH
8845: LD_VAR 0 5
8849: PPUSH
8850: CALL 66184 0 5
// end ; end_of_file
8854: PPOPN 5
8856: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8857: LD_INT 0
8859: PPUSH
8860: PPUSH
// if exist_mode then
8861: LD_VAR 0 2
8865: IFFALSE 8890
// unit := CreateCharacter ( prefix & ident ) else
8867: LD_ADDR_VAR 0 5
8871: PUSH
8872: LD_VAR 0 3
8876: PUSH
8877: LD_VAR 0 1
8881: STR
8882: PPUSH
8883: CALL_OW 34
8887: ST_TO_ADDR
8888: GO 8905
// unit := NewCharacter ( ident ) ;
8890: LD_ADDR_VAR 0 5
8894: PUSH
8895: LD_VAR 0 1
8899: PPUSH
8900: CALL_OW 25
8904: ST_TO_ADDR
// result := unit ;
8905: LD_ADDR_VAR 0 4
8909: PUSH
8910: LD_VAR 0 5
8914: ST_TO_ADDR
// end ;
8915: LD_VAR 0 4
8919: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8920: LD_INT 0
8922: PPUSH
8923: PPUSH
// if not side or not nation then
8924: LD_VAR 0 1
8928: NOT
8929: PUSH
8930: LD_VAR 0 2
8934: NOT
8935: OR
8936: IFFALSE 8940
// exit ;
8938: GO 9708
// case nation of nation_american :
8940: LD_VAR 0 2
8944: PUSH
8945: LD_INT 1
8947: DOUBLE
8948: EQUAL
8949: IFTRUE 8953
8951: GO 9167
8953: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8954: LD_ADDR_VAR 0 4
8958: PUSH
8959: LD_INT 35
8961: PUSH
8962: LD_INT 45
8964: PUSH
8965: LD_INT 46
8967: PUSH
8968: LD_INT 47
8970: PUSH
8971: LD_INT 82
8973: PUSH
8974: LD_INT 83
8976: PUSH
8977: LD_INT 84
8979: PUSH
8980: LD_INT 85
8982: PUSH
8983: LD_INT 86
8985: PUSH
8986: LD_INT 1
8988: PUSH
8989: LD_INT 2
8991: PUSH
8992: LD_INT 6
8994: PUSH
8995: LD_INT 15
8997: PUSH
8998: LD_INT 16
9000: PUSH
9001: LD_INT 7
9003: PUSH
9004: LD_INT 12
9006: PUSH
9007: LD_INT 13
9009: PUSH
9010: LD_INT 10
9012: PUSH
9013: LD_INT 14
9015: PUSH
9016: LD_INT 20
9018: PUSH
9019: LD_INT 21
9021: PUSH
9022: LD_INT 22
9024: PUSH
9025: LD_INT 25
9027: PUSH
9028: LD_INT 32
9030: PUSH
9031: LD_INT 27
9033: PUSH
9034: LD_INT 36
9036: PUSH
9037: LD_INT 69
9039: PUSH
9040: LD_INT 39
9042: PUSH
9043: LD_INT 34
9045: PUSH
9046: LD_INT 40
9048: PUSH
9049: LD_INT 48
9051: PUSH
9052: LD_INT 49
9054: PUSH
9055: LD_INT 50
9057: PUSH
9058: LD_INT 51
9060: PUSH
9061: LD_INT 52
9063: PUSH
9064: LD_INT 53
9066: PUSH
9067: LD_INT 54
9069: PUSH
9070: LD_INT 55
9072: PUSH
9073: LD_INT 56
9075: PUSH
9076: LD_INT 57
9078: PUSH
9079: LD_INT 58
9081: PUSH
9082: LD_INT 59
9084: PUSH
9085: LD_INT 60
9087: PUSH
9088: LD_INT 61
9090: PUSH
9091: LD_INT 62
9093: PUSH
9094: LD_INT 80
9096: PUSH
9097: LD_INT 82
9099: PUSH
9100: LD_INT 83
9102: PUSH
9103: LD_INT 84
9105: PUSH
9106: LD_INT 85
9108: PUSH
9109: LD_INT 86
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: ST_TO_ADDR
9165: GO 9632
9167: LD_INT 2
9169: DOUBLE
9170: EQUAL
9171: IFTRUE 9175
9173: GO 9401
9175: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9176: LD_ADDR_VAR 0 4
9180: PUSH
9181: LD_INT 35
9183: PUSH
9184: LD_INT 45
9186: PUSH
9187: LD_INT 46
9189: PUSH
9190: LD_INT 47
9192: PUSH
9193: LD_INT 82
9195: PUSH
9196: LD_INT 83
9198: PUSH
9199: LD_INT 84
9201: PUSH
9202: LD_INT 85
9204: PUSH
9205: LD_INT 87
9207: PUSH
9208: LD_INT 70
9210: PUSH
9211: LD_INT 1
9213: PUSH
9214: LD_INT 11
9216: PUSH
9217: LD_INT 3
9219: PUSH
9220: LD_INT 4
9222: PUSH
9223: LD_INT 5
9225: PUSH
9226: LD_INT 6
9228: PUSH
9229: LD_INT 15
9231: PUSH
9232: LD_INT 18
9234: PUSH
9235: LD_INT 7
9237: PUSH
9238: LD_INT 17
9240: PUSH
9241: LD_INT 8
9243: PUSH
9244: LD_INT 20
9246: PUSH
9247: LD_INT 21
9249: PUSH
9250: LD_INT 22
9252: PUSH
9253: LD_INT 72
9255: PUSH
9256: LD_INT 26
9258: PUSH
9259: LD_INT 69
9261: PUSH
9262: LD_INT 39
9264: PUSH
9265: LD_INT 40
9267: PUSH
9268: LD_INT 41
9270: PUSH
9271: LD_INT 42
9273: PUSH
9274: LD_INT 43
9276: PUSH
9277: LD_INT 48
9279: PUSH
9280: LD_INT 49
9282: PUSH
9283: LD_INT 50
9285: PUSH
9286: LD_INT 51
9288: PUSH
9289: LD_INT 52
9291: PUSH
9292: LD_INT 53
9294: PUSH
9295: LD_INT 54
9297: PUSH
9298: LD_INT 55
9300: PUSH
9301: LD_INT 56
9303: PUSH
9304: LD_INT 60
9306: PUSH
9307: LD_INT 61
9309: PUSH
9310: LD_INT 62
9312: PUSH
9313: LD_INT 66
9315: PUSH
9316: LD_INT 67
9318: PUSH
9319: LD_INT 68
9321: PUSH
9322: LD_INT 81
9324: PUSH
9325: LD_INT 82
9327: PUSH
9328: LD_INT 83
9330: PUSH
9331: LD_INT 84
9333: PUSH
9334: LD_INT 85
9336: PUSH
9337: LD_INT 87
9339: PUSH
9340: LD_INT 88
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: ST_TO_ADDR
9399: GO 9632
9401: LD_INT 3
9403: DOUBLE
9404: EQUAL
9405: IFTRUE 9409
9407: GO 9631
9409: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9410: LD_ADDR_VAR 0 4
9414: PUSH
9415: LD_INT 46
9417: PUSH
9418: LD_INT 47
9420: PUSH
9421: LD_INT 1
9423: PUSH
9424: LD_INT 2
9426: PUSH
9427: LD_INT 82
9429: PUSH
9430: LD_INT 83
9432: PUSH
9433: LD_INT 84
9435: PUSH
9436: LD_INT 85
9438: PUSH
9439: LD_INT 86
9441: PUSH
9442: LD_INT 11
9444: PUSH
9445: LD_INT 9
9447: PUSH
9448: LD_INT 20
9450: PUSH
9451: LD_INT 19
9453: PUSH
9454: LD_INT 21
9456: PUSH
9457: LD_INT 24
9459: PUSH
9460: LD_INT 22
9462: PUSH
9463: LD_INT 25
9465: PUSH
9466: LD_INT 28
9468: PUSH
9469: LD_INT 29
9471: PUSH
9472: LD_INT 30
9474: PUSH
9475: LD_INT 31
9477: PUSH
9478: LD_INT 37
9480: PUSH
9481: LD_INT 38
9483: PUSH
9484: LD_INT 32
9486: PUSH
9487: LD_INT 27
9489: PUSH
9490: LD_INT 33
9492: PUSH
9493: LD_INT 69
9495: PUSH
9496: LD_INT 39
9498: PUSH
9499: LD_INT 34
9501: PUSH
9502: LD_INT 40
9504: PUSH
9505: LD_INT 71
9507: PUSH
9508: LD_INT 23
9510: PUSH
9511: LD_INT 44
9513: PUSH
9514: LD_INT 48
9516: PUSH
9517: LD_INT 49
9519: PUSH
9520: LD_INT 50
9522: PUSH
9523: LD_INT 51
9525: PUSH
9526: LD_INT 52
9528: PUSH
9529: LD_INT 53
9531: PUSH
9532: LD_INT 54
9534: PUSH
9535: LD_INT 55
9537: PUSH
9538: LD_INT 56
9540: PUSH
9541: LD_INT 57
9543: PUSH
9544: LD_INT 58
9546: PUSH
9547: LD_INT 59
9549: PUSH
9550: LD_INT 63
9552: PUSH
9553: LD_INT 64
9555: PUSH
9556: LD_INT 65
9558: PUSH
9559: LD_INT 82
9561: PUSH
9562: LD_INT 83
9564: PUSH
9565: LD_INT 84
9567: PUSH
9568: LD_INT 85
9570: PUSH
9571: LD_INT 86
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: ST_TO_ADDR
9629: GO 9632
9631: POP
// if state > - 1 and state < 3 then
9632: LD_VAR 0 3
9636: PUSH
9637: LD_INT 1
9639: NEG
9640: GREATER
9641: PUSH
9642: LD_VAR 0 3
9646: PUSH
9647: LD_INT 3
9649: LESS
9650: AND
9651: IFFALSE 9708
// for i in result do
9653: LD_ADDR_VAR 0 5
9657: PUSH
9658: LD_VAR 0 4
9662: PUSH
9663: FOR_IN
9664: IFFALSE 9706
// if GetTech ( i , side ) <> state then
9666: LD_VAR 0 5
9670: PPUSH
9671: LD_VAR 0 1
9675: PPUSH
9676: CALL_OW 321
9680: PUSH
9681: LD_VAR 0 3
9685: NONEQUAL
9686: IFFALSE 9704
// result := result diff i ;
9688: LD_ADDR_VAR 0 4
9692: PUSH
9693: LD_VAR 0 4
9697: PUSH
9698: LD_VAR 0 5
9702: DIFF
9703: ST_TO_ADDR
9704: GO 9663
9706: POP
9707: POP
// end ;
9708: LD_VAR 0 4
9712: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9713: LD_INT 0
9715: PPUSH
9716: PPUSH
9717: PPUSH
// result := true ;
9718: LD_ADDR_VAR 0 3
9722: PUSH
9723: LD_INT 1
9725: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9726: LD_ADDR_VAR 0 5
9730: PUSH
9731: LD_VAR 0 2
9735: PPUSH
9736: CALL_OW 480
9740: ST_TO_ADDR
// if not tmp then
9741: LD_VAR 0 5
9745: NOT
9746: IFFALSE 9750
// exit ;
9748: GO 9799
// for i in tmp do
9750: LD_ADDR_VAR 0 4
9754: PUSH
9755: LD_VAR 0 5
9759: PUSH
9760: FOR_IN
9761: IFFALSE 9797
// if GetTech ( i , side ) <> state_researched then
9763: LD_VAR 0 4
9767: PPUSH
9768: LD_VAR 0 1
9772: PPUSH
9773: CALL_OW 321
9777: PUSH
9778: LD_INT 2
9780: NONEQUAL
9781: IFFALSE 9795
// begin result := false ;
9783: LD_ADDR_VAR 0 3
9787: PUSH
9788: LD_INT 0
9790: ST_TO_ADDR
// exit ;
9791: POP
9792: POP
9793: GO 9799
// end ;
9795: GO 9760
9797: POP
9798: POP
// end ;
9799: LD_VAR 0 3
9803: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
9808: PPUSH
9809: PPUSH
9810: PPUSH
9811: PPUSH
9812: PPUSH
9813: PPUSH
9814: PPUSH
9815: PPUSH
9816: PPUSH
9817: PPUSH
9818: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9819: LD_VAR 0 1
9823: NOT
9824: PUSH
9825: LD_VAR 0 1
9829: PPUSH
9830: CALL_OW 257
9834: PUSH
9835: LD_INT 9
9837: NONEQUAL
9838: OR
9839: IFFALSE 9843
// exit ;
9841: GO 10416
// side := GetSide ( unit ) ;
9843: LD_ADDR_VAR 0 9
9847: PUSH
9848: LD_VAR 0 1
9852: PPUSH
9853: CALL_OW 255
9857: ST_TO_ADDR
// tech_space := tech_spacanom ;
9858: LD_ADDR_VAR 0 12
9862: PUSH
9863: LD_INT 29
9865: ST_TO_ADDR
// tech_time := tech_taurad ;
9866: LD_ADDR_VAR 0 13
9870: PUSH
9871: LD_INT 28
9873: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9874: LD_ADDR_VAR 0 11
9878: PUSH
9879: LD_VAR 0 1
9883: PPUSH
9884: CALL_OW 310
9888: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9889: LD_VAR 0 11
9893: PPUSH
9894: CALL_OW 247
9898: PUSH
9899: LD_INT 2
9901: EQUAL
9902: IFFALSE 9906
// exit ;
9904: GO 10416
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9906: LD_ADDR_VAR 0 8
9910: PUSH
9911: LD_INT 81
9913: PUSH
9914: LD_VAR 0 9
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: LD_INT 3
9925: PUSH
9926: LD_INT 21
9928: PUSH
9929: LD_INT 3
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PPUSH
9944: CALL_OW 69
9948: ST_TO_ADDR
// if not tmp then
9949: LD_VAR 0 8
9953: NOT
9954: IFFALSE 9958
// exit ;
9956: GO 10416
// if in_unit then
9958: LD_VAR 0 11
9962: IFFALSE 9986
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9964: LD_ADDR_VAR 0 10
9968: PUSH
9969: LD_VAR 0 8
9973: PPUSH
9974: LD_VAR 0 11
9978: PPUSH
9979: CALL_OW 74
9983: ST_TO_ADDR
9984: GO 10006
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9986: LD_ADDR_VAR 0 10
9990: PUSH
9991: LD_VAR 0 8
9995: PPUSH
9996: LD_VAR 0 1
10000: PPUSH
10001: CALL_OW 74
10005: ST_TO_ADDR
// if not enemy then
10006: LD_VAR 0 10
10010: NOT
10011: IFFALSE 10015
// exit ;
10013: GO 10416
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10015: LD_VAR 0 11
10019: PUSH
10020: LD_VAR 0 11
10024: PPUSH
10025: LD_VAR 0 10
10029: PPUSH
10030: CALL_OW 296
10034: PUSH
10035: LD_INT 13
10037: GREATER
10038: AND
10039: PUSH
10040: LD_VAR 0 1
10044: PPUSH
10045: LD_VAR 0 10
10049: PPUSH
10050: CALL_OW 296
10054: PUSH
10055: LD_INT 12
10057: GREATER
10058: OR
10059: IFFALSE 10063
// exit ;
10061: GO 10416
// missile := [ 1 ] ;
10063: LD_ADDR_VAR 0 14
10067: PUSH
10068: LD_INT 1
10070: PUSH
10071: EMPTY
10072: LIST
10073: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10074: LD_VAR 0 9
10078: PPUSH
10079: LD_VAR 0 12
10083: PPUSH
10084: CALL_OW 325
10088: IFFALSE 10117
// missile := Replace ( missile , missile + 1 , 2 ) ;
10090: LD_ADDR_VAR 0 14
10094: PUSH
10095: LD_VAR 0 14
10099: PPUSH
10100: LD_VAR 0 14
10104: PUSH
10105: LD_INT 1
10107: PLUS
10108: PPUSH
10109: LD_INT 2
10111: PPUSH
10112: CALL_OW 1
10116: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10117: LD_VAR 0 9
10121: PPUSH
10122: LD_VAR 0 13
10126: PPUSH
10127: CALL_OW 325
10131: PUSH
10132: LD_VAR 0 10
10136: PPUSH
10137: CALL_OW 255
10141: PPUSH
10142: LD_VAR 0 13
10146: PPUSH
10147: CALL_OW 325
10151: NOT
10152: AND
10153: IFFALSE 10182
// missile := Replace ( missile , missile + 1 , 3 ) ;
10155: LD_ADDR_VAR 0 14
10159: PUSH
10160: LD_VAR 0 14
10164: PPUSH
10165: LD_VAR 0 14
10169: PUSH
10170: LD_INT 1
10172: PLUS
10173: PPUSH
10174: LD_INT 3
10176: PPUSH
10177: CALL_OW 1
10181: ST_TO_ADDR
// if missile < 2 then
10182: LD_VAR 0 14
10186: PUSH
10187: LD_INT 2
10189: LESS
10190: IFFALSE 10194
// exit ;
10192: GO 10416
// x := GetX ( enemy ) ;
10194: LD_ADDR_VAR 0 4
10198: PUSH
10199: LD_VAR 0 10
10203: PPUSH
10204: CALL_OW 250
10208: ST_TO_ADDR
// y := GetY ( enemy ) ;
10209: LD_ADDR_VAR 0 5
10213: PUSH
10214: LD_VAR 0 10
10218: PPUSH
10219: CALL_OW 251
10223: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10224: LD_ADDR_VAR 0 6
10228: PUSH
10229: LD_VAR 0 4
10233: PUSH
10234: LD_INT 1
10236: NEG
10237: PPUSH
10238: LD_INT 1
10240: PPUSH
10241: CALL_OW 12
10245: PLUS
10246: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10247: LD_ADDR_VAR 0 7
10251: PUSH
10252: LD_VAR 0 5
10256: PUSH
10257: LD_INT 1
10259: NEG
10260: PPUSH
10261: LD_INT 1
10263: PPUSH
10264: CALL_OW 12
10268: PLUS
10269: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10270: LD_VAR 0 6
10274: PPUSH
10275: LD_VAR 0 7
10279: PPUSH
10280: CALL_OW 488
10284: NOT
10285: IFFALSE 10307
// begin _x := x ;
10287: LD_ADDR_VAR 0 6
10291: PUSH
10292: LD_VAR 0 4
10296: ST_TO_ADDR
// _y := y ;
10297: LD_ADDR_VAR 0 7
10301: PUSH
10302: LD_VAR 0 5
10306: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10307: LD_ADDR_VAR 0 3
10311: PUSH
10312: LD_INT 1
10314: PPUSH
10315: LD_VAR 0 14
10319: PPUSH
10320: CALL_OW 12
10324: ST_TO_ADDR
// case i of 1 :
10325: LD_VAR 0 3
10329: PUSH
10330: LD_INT 1
10332: DOUBLE
10333: EQUAL
10334: IFTRUE 10338
10336: GO 10355
10338: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10339: LD_VAR 0 1
10343: PPUSH
10344: LD_VAR 0 10
10348: PPUSH
10349: CALL_OW 115
10353: GO 10416
10355: LD_INT 2
10357: DOUBLE
10358: EQUAL
10359: IFTRUE 10363
10361: GO 10385
10363: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10364: LD_VAR 0 1
10368: PPUSH
10369: LD_VAR 0 6
10373: PPUSH
10374: LD_VAR 0 7
10378: PPUSH
10379: CALL_OW 153
10383: GO 10416
10385: LD_INT 3
10387: DOUBLE
10388: EQUAL
10389: IFTRUE 10393
10391: GO 10415
10393: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10394: LD_VAR 0 1
10398: PPUSH
10399: LD_VAR 0 6
10403: PPUSH
10404: LD_VAR 0 7
10408: PPUSH
10409: CALL_OW 154
10413: GO 10416
10415: POP
// end ;
10416: LD_VAR 0 2
10420: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10421: LD_INT 0
10423: PPUSH
10424: PPUSH
10425: PPUSH
10426: PPUSH
10427: PPUSH
10428: PPUSH
// if not unit or not building then
10429: LD_VAR 0 1
10433: NOT
10434: PUSH
10435: LD_VAR 0 2
10439: NOT
10440: OR
10441: IFFALSE 10445
// exit ;
10443: GO 10603
// x := GetX ( building ) ;
10445: LD_ADDR_VAR 0 5
10449: PUSH
10450: LD_VAR 0 2
10454: PPUSH
10455: CALL_OW 250
10459: ST_TO_ADDR
// y := GetY ( building ) ;
10460: LD_ADDR_VAR 0 6
10464: PUSH
10465: LD_VAR 0 2
10469: PPUSH
10470: CALL_OW 251
10474: ST_TO_ADDR
// for i = 0 to 5 do
10475: LD_ADDR_VAR 0 4
10479: PUSH
10480: DOUBLE
10481: LD_INT 0
10483: DEC
10484: ST_TO_ADDR
10485: LD_INT 5
10487: PUSH
10488: FOR_TO
10489: IFFALSE 10601
// begin _x := ShiftX ( x , i , 3 ) ;
10491: LD_ADDR_VAR 0 7
10495: PUSH
10496: LD_VAR 0 5
10500: PPUSH
10501: LD_VAR 0 4
10505: PPUSH
10506: LD_INT 3
10508: PPUSH
10509: CALL_OW 272
10513: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10514: LD_ADDR_VAR 0 8
10518: PUSH
10519: LD_VAR 0 6
10523: PPUSH
10524: LD_VAR 0 4
10528: PPUSH
10529: LD_INT 3
10531: PPUSH
10532: CALL_OW 273
10536: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10537: LD_VAR 0 7
10541: PPUSH
10542: LD_VAR 0 8
10546: PPUSH
10547: CALL_OW 488
10551: NOT
10552: IFFALSE 10556
// continue ;
10554: GO 10488
// if HexInfo ( _x , _y ) = 0 then
10556: LD_VAR 0 7
10560: PPUSH
10561: LD_VAR 0 8
10565: PPUSH
10566: CALL_OW 428
10570: PUSH
10571: LD_INT 0
10573: EQUAL
10574: IFFALSE 10599
// begin ComMoveXY ( unit , _x , _y ) ;
10576: LD_VAR 0 1
10580: PPUSH
10581: LD_VAR 0 7
10585: PPUSH
10586: LD_VAR 0 8
10590: PPUSH
10591: CALL_OW 111
// exit ;
10595: POP
10596: POP
10597: GO 10603
// end ; end ;
10599: GO 10488
10601: POP
10602: POP
// end ;
10603: LD_VAR 0 3
10607: RET
// export function ScanBase ( side , base_area ) ; begin
10608: LD_INT 0
10610: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10611: LD_ADDR_VAR 0 3
10615: PUSH
10616: LD_VAR 0 2
10620: PPUSH
10621: LD_INT 81
10623: PUSH
10624: LD_VAR 0 1
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: PPUSH
10633: CALL_OW 70
10637: ST_TO_ADDR
// end ;
10638: LD_VAR 0 3
10642: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10643: LD_INT 0
10645: PPUSH
10646: PPUSH
10647: PPUSH
10648: PPUSH
// result := false ;
10649: LD_ADDR_VAR 0 2
10653: PUSH
10654: LD_INT 0
10656: ST_TO_ADDR
// side := GetSide ( unit ) ;
10657: LD_ADDR_VAR 0 3
10661: PUSH
10662: LD_VAR 0 1
10666: PPUSH
10667: CALL_OW 255
10671: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10672: LD_ADDR_VAR 0 4
10676: PUSH
10677: LD_VAR 0 1
10681: PPUSH
10682: CALL_OW 248
10686: ST_TO_ADDR
// case nat of 1 :
10687: LD_VAR 0 4
10691: PUSH
10692: LD_INT 1
10694: DOUBLE
10695: EQUAL
10696: IFTRUE 10700
10698: GO 10711
10700: POP
// tech := tech_lassight ; 2 :
10701: LD_ADDR_VAR 0 5
10705: PUSH
10706: LD_INT 12
10708: ST_TO_ADDR
10709: GO 10750
10711: LD_INT 2
10713: DOUBLE
10714: EQUAL
10715: IFTRUE 10719
10717: GO 10730
10719: POP
// tech := tech_mortar ; 3 :
10720: LD_ADDR_VAR 0 5
10724: PUSH
10725: LD_INT 41
10727: ST_TO_ADDR
10728: GO 10750
10730: LD_INT 3
10732: DOUBLE
10733: EQUAL
10734: IFTRUE 10738
10736: GO 10749
10738: POP
// tech := tech_bazooka ; end ;
10739: LD_ADDR_VAR 0 5
10743: PUSH
10744: LD_INT 44
10746: ST_TO_ADDR
10747: GO 10750
10749: POP
// if Researched ( side , tech ) then
10750: LD_VAR 0 3
10754: PPUSH
10755: LD_VAR 0 5
10759: PPUSH
10760: CALL_OW 325
10764: IFFALSE 10791
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10766: LD_ADDR_VAR 0 2
10770: PUSH
10771: LD_INT 5
10773: PUSH
10774: LD_INT 8
10776: PUSH
10777: LD_INT 9
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: LIST
10784: PUSH
10785: LD_VAR 0 4
10789: ARRAY
10790: ST_TO_ADDR
// end ;
10791: LD_VAR 0 2
10795: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10796: LD_INT 0
10798: PPUSH
10799: PPUSH
10800: PPUSH
// if not mines then
10801: LD_VAR 0 2
10805: NOT
10806: IFFALSE 10810
// exit ;
10808: GO 10954
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10810: LD_ADDR_VAR 0 5
10814: PUSH
10815: LD_INT 81
10817: PUSH
10818: LD_VAR 0 1
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PUSH
10827: LD_INT 3
10829: PUSH
10830: LD_INT 21
10832: PUSH
10833: LD_INT 3
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PPUSH
10848: CALL_OW 69
10852: ST_TO_ADDR
// for i in mines do
10853: LD_ADDR_VAR 0 4
10857: PUSH
10858: LD_VAR 0 2
10862: PUSH
10863: FOR_IN
10864: IFFALSE 10952
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10866: LD_VAR 0 4
10870: PUSH
10871: LD_INT 1
10873: ARRAY
10874: PPUSH
10875: LD_VAR 0 4
10879: PUSH
10880: LD_INT 2
10882: ARRAY
10883: PPUSH
10884: CALL_OW 458
10888: NOT
10889: IFFALSE 10893
// continue ;
10891: GO 10863
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10893: LD_VAR 0 4
10897: PUSH
10898: LD_INT 1
10900: ARRAY
10901: PPUSH
10902: LD_VAR 0 4
10906: PUSH
10907: LD_INT 2
10909: ARRAY
10910: PPUSH
10911: CALL_OW 428
10915: PUSH
10916: LD_VAR 0 5
10920: IN
10921: IFFALSE 10950
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10923: LD_VAR 0 4
10927: PUSH
10928: LD_INT 1
10930: ARRAY
10931: PPUSH
10932: LD_VAR 0 4
10936: PUSH
10937: LD_INT 2
10939: ARRAY
10940: PPUSH
10941: LD_VAR 0 1
10945: PPUSH
10946: CALL_OW 456
// end ;
10950: GO 10863
10952: POP
10953: POP
// end ;
10954: LD_VAR 0 3
10958: RET
// export function Count ( array ) ; var i ; begin
10959: LD_INT 0
10961: PPUSH
10962: PPUSH
// result := 0 ;
10963: LD_ADDR_VAR 0 2
10967: PUSH
10968: LD_INT 0
10970: ST_TO_ADDR
// for i in array do
10971: LD_ADDR_VAR 0 3
10975: PUSH
10976: LD_VAR 0 1
10980: PUSH
10981: FOR_IN
10982: IFFALSE 11006
// if i then
10984: LD_VAR 0 3
10988: IFFALSE 11004
// result := result + 1 ;
10990: LD_ADDR_VAR 0 2
10994: PUSH
10995: LD_VAR 0 2
10999: PUSH
11000: LD_INT 1
11002: PLUS
11003: ST_TO_ADDR
11004: GO 10981
11006: POP
11007: POP
// end ;
11008: LD_VAR 0 2
11012: RET
// export function IsEmpty ( building ) ; begin
11013: LD_INT 0
11015: PPUSH
// if not building then
11016: LD_VAR 0 1
11020: NOT
11021: IFFALSE 11025
// exit ;
11023: GO 11068
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11025: LD_ADDR_VAR 0 2
11029: PUSH
11030: LD_VAR 0 1
11034: PUSH
11035: LD_INT 22
11037: PUSH
11038: LD_VAR 0 1
11042: PPUSH
11043: CALL_OW 255
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 58
11054: PUSH
11055: EMPTY
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PPUSH
11062: CALL_OW 69
11066: IN
11067: ST_TO_ADDR
// end ;
11068: LD_VAR 0 2
11072: RET
// export function IsNotFull ( building ) ; var places ; begin
11073: LD_INT 0
11075: PPUSH
11076: PPUSH
// if not building then
11077: LD_VAR 0 1
11081: NOT
11082: IFFALSE 11086
// exit ;
11084: GO 11257
// result := false ;
11086: LD_ADDR_VAR 0 2
11090: PUSH
11091: LD_INT 0
11093: ST_TO_ADDR
// places := 0 ;
11094: LD_ADDR_VAR 0 3
11098: PUSH
11099: LD_INT 0
11101: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
11102: LD_VAR 0 1
11106: PPUSH
11107: CALL_OW 266
11111: PUSH
11112: LD_INT 0
11114: DOUBLE
11115: EQUAL
11116: IFTRUE 11174
11118: LD_INT 1
11120: DOUBLE
11121: EQUAL
11122: IFTRUE 11174
11124: LD_INT 6
11126: DOUBLE
11127: EQUAL
11128: IFTRUE 11174
11130: LD_INT 7
11132: DOUBLE
11133: EQUAL
11134: IFTRUE 11174
11136: LD_INT 8
11138: DOUBLE
11139: EQUAL
11140: IFTRUE 11174
11142: LD_INT 4
11144: DOUBLE
11145: EQUAL
11146: IFTRUE 11174
11148: LD_INT 5
11150: DOUBLE
11151: EQUAL
11152: IFTRUE 11174
11154: LD_INT 2
11156: DOUBLE
11157: EQUAL
11158: IFTRUE 11174
11160: LD_INT 3
11162: DOUBLE
11163: EQUAL
11164: IFTRUE 11174
11166: LD_INT 35
11168: DOUBLE
11169: EQUAL
11170: IFTRUE 11174
11172: GO 11185
11174: POP
// places := 6 ; b_bunker , b_breastwork :
11175: LD_ADDR_VAR 0 3
11179: PUSH
11180: LD_INT 6
11182: ST_TO_ADDR
11183: GO 11230
11185: LD_INT 32
11187: DOUBLE
11188: EQUAL
11189: IFTRUE 11199
11191: LD_INT 31
11193: DOUBLE
11194: EQUAL
11195: IFTRUE 11199
11197: GO 11210
11199: POP
// places := 1 ; b_control_tower :
11200: LD_ADDR_VAR 0 3
11204: PUSH
11205: LD_INT 1
11207: ST_TO_ADDR
11208: GO 11230
11210: LD_INT 36
11212: DOUBLE
11213: EQUAL
11214: IFTRUE 11218
11216: GO 11229
11218: POP
// places := 3 ; end ;
11219: LD_ADDR_VAR 0 3
11223: PUSH
11224: LD_INT 3
11226: ST_TO_ADDR
11227: GO 11230
11229: POP
// if places then
11230: LD_VAR 0 3
11234: IFFALSE 11257
// result := UnitsInside ( building ) < places ;
11236: LD_ADDR_VAR 0 2
11240: PUSH
11241: LD_VAR 0 1
11245: PPUSH
11246: CALL_OW 313
11250: PUSH
11251: LD_VAR 0 3
11255: LESS
11256: ST_TO_ADDR
// end ;
11257: LD_VAR 0 2
11261: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11262: LD_INT 0
11264: PPUSH
11265: PPUSH
11266: PPUSH
11267: PPUSH
// tmp := [ ] ;
11268: LD_ADDR_VAR 0 3
11272: PUSH
11273: EMPTY
11274: ST_TO_ADDR
// list := [ ] ;
11275: LD_ADDR_VAR 0 5
11279: PUSH
11280: EMPTY
11281: ST_TO_ADDR
// for i = 16 to 25 do
11282: LD_ADDR_VAR 0 4
11286: PUSH
11287: DOUBLE
11288: LD_INT 16
11290: DEC
11291: ST_TO_ADDR
11292: LD_INT 25
11294: PUSH
11295: FOR_TO
11296: IFFALSE 11369
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11298: LD_ADDR_VAR 0 3
11302: PUSH
11303: LD_VAR 0 3
11307: PUSH
11308: LD_INT 22
11310: PUSH
11311: LD_VAR 0 1
11315: PPUSH
11316: CALL_OW 255
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 91
11327: PUSH
11328: LD_VAR 0 1
11332: PUSH
11333: LD_INT 6
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 30
11343: PUSH
11344: LD_VAR 0 4
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: PPUSH
11361: CALL_OW 69
11365: ADD
11366: ST_TO_ADDR
11367: GO 11295
11369: POP
11370: POP
// for i = 1 to tmp do
11371: LD_ADDR_VAR 0 4
11375: PUSH
11376: DOUBLE
11377: LD_INT 1
11379: DEC
11380: ST_TO_ADDR
11381: LD_VAR 0 3
11385: PUSH
11386: FOR_TO
11387: IFFALSE 11475
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11389: LD_ADDR_VAR 0 5
11393: PUSH
11394: LD_VAR 0 5
11398: PUSH
11399: LD_VAR 0 3
11403: PUSH
11404: LD_VAR 0 4
11408: ARRAY
11409: PPUSH
11410: CALL_OW 266
11414: PUSH
11415: LD_VAR 0 3
11419: PUSH
11420: LD_VAR 0 4
11424: ARRAY
11425: PPUSH
11426: CALL_OW 250
11430: PUSH
11431: LD_VAR 0 3
11435: PUSH
11436: LD_VAR 0 4
11440: ARRAY
11441: PPUSH
11442: CALL_OW 251
11446: PUSH
11447: LD_VAR 0 3
11451: PUSH
11452: LD_VAR 0 4
11456: ARRAY
11457: PPUSH
11458: CALL_OW 254
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: PUSH
11469: EMPTY
11470: LIST
11471: ADD
11472: ST_TO_ADDR
11473: GO 11386
11475: POP
11476: POP
// result := list ;
11477: LD_ADDR_VAR 0 2
11481: PUSH
11482: LD_VAR 0 5
11486: ST_TO_ADDR
// end ;
11487: LD_VAR 0 2
11491: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11492: LD_INT 0
11494: PPUSH
11495: PPUSH
11496: PPUSH
11497: PPUSH
11498: PPUSH
11499: PPUSH
11500: PPUSH
// if not factory then
11501: LD_VAR 0 1
11505: NOT
11506: IFFALSE 11510
// exit ;
11508: GO 12103
// if control = control_apeman then
11510: LD_VAR 0 4
11514: PUSH
11515: LD_INT 5
11517: EQUAL
11518: IFFALSE 11627
// begin tmp := UnitsInside ( factory ) ;
11520: LD_ADDR_VAR 0 8
11524: PUSH
11525: LD_VAR 0 1
11529: PPUSH
11530: CALL_OW 313
11534: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11535: LD_VAR 0 8
11539: PPUSH
11540: LD_INT 25
11542: PUSH
11543: LD_INT 12
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PPUSH
11550: CALL_OW 72
11554: NOT
11555: IFFALSE 11565
// control := control_manual ;
11557: LD_ADDR_VAR 0 4
11561: PUSH
11562: LD_INT 1
11564: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11565: LD_ADDR_VAR 0 8
11569: PUSH
11570: LD_VAR 0 1
11574: PPUSH
11575: CALL 11262 0 1
11579: ST_TO_ADDR
// if tmp then
11580: LD_VAR 0 8
11584: IFFALSE 11627
// begin for i in tmp do
11586: LD_ADDR_VAR 0 7
11590: PUSH
11591: LD_VAR 0 8
11595: PUSH
11596: FOR_IN
11597: IFFALSE 11625
// if i [ 1 ] = b_ext_radio then
11599: LD_VAR 0 7
11603: PUSH
11604: LD_INT 1
11606: ARRAY
11607: PUSH
11608: LD_INT 22
11610: EQUAL
11611: IFFALSE 11623
// begin control := control_remote ;
11613: LD_ADDR_VAR 0 4
11617: PUSH
11618: LD_INT 2
11620: ST_TO_ADDR
// break ;
11621: GO 11625
// end ;
11623: GO 11596
11625: POP
11626: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11627: LD_VAR 0 1
11631: PPUSH
11632: LD_VAR 0 2
11636: PPUSH
11637: LD_VAR 0 3
11641: PPUSH
11642: LD_VAR 0 4
11646: PPUSH
11647: LD_VAR 0 5
11651: PPUSH
11652: CALL_OW 448
11656: IFFALSE 11691
// begin result := [ chassis , engine , control , weapon ] ;
11658: LD_ADDR_VAR 0 6
11662: PUSH
11663: LD_VAR 0 2
11667: PUSH
11668: LD_VAR 0 3
11672: PUSH
11673: LD_VAR 0 4
11677: PUSH
11678: LD_VAR 0 5
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: ST_TO_ADDR
// exit ;
11689: GO 12103
// end ; _chassis := AvailableChassisList ( factory ) ;
11691: LD_ADDR_VAR 0 9
11695: PUSH
11696: LD_VAR 0 1
11700: PPUSH
11701: CALL_OW 475
11705: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11706: LD_ADDR_VAR 0 11
11710: PUSH
11711: LD_VAR 0 1
11715: PPUSH
11716: CALL_OW 476
11720: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11721: LD_ADDR_VAR 0 12
11725: PUSH
11726: LD_VAR 0 1
11730: PPUSH
11731: CALL_OW 477
11735: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11736: LD_ADDR_VAR 0 10
11740: PUSH
11741: LD_VAR 0 1
11745: PPUSH
11746: CALL_OW 478
11750: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11751: LD_VAR 0 9
11755: NOT
11756: PUSH
11757: LD_VAR 0 11
11761: NOT
11762: OR
11763: PUSH
11764: LD_VAR 0 12
11768: NOT
11769: OR
11770: PUSH
11771: LD_VAR 0 10
11775: NOT
11776: OR
11777: IFFALSE 11812
// begin result := [ chassis , engine , control , weapon ] ;
11779: LD_ADDR_VAR 0 6
11783: PUSH
11784: LD_VAR 0 2
11788: PUSH
11789: LD_VAR 0 3
11793: PUSH
11794: LD_VAR 0 4
11798: PUSH
11799: LD_VAR 0 5
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: ST_TO_ADDR
// exit ;
11810: GO 12103
// end ; if not chassis in _chassis then
11812: LD_VAR 0 2
11816: PUSH
11817: LD_VAR 0 9
11821: IN
11822: NOT
11823: IFFALSE 11849
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11825: LD_ADDR_VAR 0 2
11829: PUSH
11830: LD_VAR 0 9
11834: PUSH
11835: LD_INT 1
11837: PPUSH
11838: LD_VAR 0 9
11842: PPUSH
11843: CALL_OW 12
11847: ARRAY
11848: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11849: LD_VAR 0 2
11853: PPUSH
11854: LD_VAR 0 3
11858: PPUSH
11859: CALL 12108 0 2
11863: NOT
11864: IFFALSE 11923
// repeat engine := _engine [ 1 ] ;
11866: LD_ADDR_VAR 0 3
11870: PUSH
11871: LD_VAR 0 11
11875: PUSH
11876: LD_INT 1
11878: ARRAY
11879: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11880: LD_ADDR_VAR 0 11
11884: PUSH
11885: LD_VAR 0 11
11889: PPUSH
11890: LD_INT 1
11892: PPUSH
11893: CALL_OW 3
11897: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11898: LD_VAR 0 2
11902: PPUSH
11903: LD_VAR 0 3
11907: PPUSH
11908: CALL 12108 0 2
11912: PUSH
11913: LD_VAR 0 11
11917: PUSH
11918: EMPTY
11919: EQUAL
11920: OR
11921: IFFALSE 11866
// if not control in _control then
11923: LD_VAR 0 4
11927: PUSH
11928: LD_VAR 0 12
11932: IN
11933: NOT
11934: IFFALSE 11960
// control := _control [ rand ( 1 , _control ) ] ;
11936: LD_ADDR_VAR 0 4
11940: PUSH
11941: LD_VAR 0 12
11945: PUSH
11946: LD_INT 1
11948: PPUSH
11949: LD_VAR 0 12
11953: PPUSH
11954: CALL_OW 12
11958: ARRAY
11959: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11960: LD_VAR 0 2
11964: PPUSH
11965: LD_VAR 0 5
11969: PPUSH
11970: CALL 12328 0 2
11974: NOT
11975: IFFALSE 12034
// repeat weapon := _weapon [ 1 ] ;
11977: LD_ADDR_VAR 0 5
11981: PUSH
11982: LD_VAR 0 10
11986: PUSH
11987: LD_INT 1
11989: ARRAY
11990: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11991: LD_ADDR_VAR 0 10
11995: PUSH
11996: LD_VAR 0 10
12000: PPUSH
12001: LD_INT 1
12003: PPUSH
12004: CALL_OW 3
12008: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12009: LD_VAR 0 2
12013: PPUSH
12014: LD_VAR 0 5
12018: PPUSH
12019: CALL 12328 0 2
12023: PUSH
12024: LD_VAR 0 10
12028: PUSH
12029: EMPTY
12030: EQUAL
12031: OR
12032: IFFALSE 11977
// result := [ ] ;
12034: LD_ADDR_VAR 0 6
12038: PUSH
12039: EMPTY
12040: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12041: LD_VAR 0 1
12045: PPUSH
12046: LD_VAR 0 2
12050: PPUSH
12051: LD_VAR 0 3
12055: PPUSH
12056: LD_VAR 0 4
12060: PPUSH
12061: LD_VAR 0 5
12065: PPUSH
12066: CALL_OW 448
12070: IFFALSE 12103
// result := [ chassis , engine , control , weapon ] ;
12072: LD_ADDR_VAR 0 6
12076: PUSH
12077: LD_VAR 0 2
12081: PUSH
12082: LD_VAR 0 3
12086: PUSH
12087: LD_VAR 0 4
12091: PUSH
12092: LD_VAR 0 5
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: ST_TO_ADDR
// end ;
12103: LD_VAR 0 6
12107: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12108: LD_INT 0
12110: PPUSH
// if not chassis or not engine then
12111: LD_VAR 0 1
12115: NOT
12116: PUSH
12117: LD_VAR 0 2
12121: NOT
12122: OR
12123: IFFALSE 12127
// exit ;
12125: GO 12323
// case engine of engine_solar :
12127: LD_VAR 0 2
12131: PUSH
12132: LD_INT 2
12134: DOUBLE
12135: EQUAL
12136: IFTRUE 12140
12138: GO 12178
12140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12141: LD_ADDR_VAR 0 3
12145: PUSH
12146: LD_INT 11
12148: PUSH
12149: LD_INT 12
12151: PUSH
12152: LD_INT 13
12154: PUSH
12155: LD_INT 14
12157: PUSH
12158: LD_INT 1
12160: PUSH
12161: LD_INT 2
12163: PUSH
12164: LD_INT 3
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: ST_TO_ADDR
12176: GO 12307
12178: LD_INT 1
12180: DOUBLE
12181: EQUAL
12182: IFTRUE 12186
12184: GO 12248
12186: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12187: LD_ADDR_VAR 0 3
12191: PUSH
12192: LD_INT 11
12194: PUSH
12195: LD_INT 12
12197: PUSH
12198: LD_INT 13
12200: PUSH
12201: LD_INT 14
12203: PUSH
12204: LD_INT 1
12206: PUSH
12207: LD_INT 2
12209: PUSH
12210: LD_INT 3
12212: PUSH
12213: LD_INT 4
12215: PUSH
12216: LD_INT 5
12218: PUSH
12219: LD_INT 21
12221: PUSH
12222: LD_INT 23
12224: PUSH
12225: LD_INT 22
12227: PUSH
12228: LD_INT 24
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: ST_TO_ADDR
12246: GO 12307
12248: LD_INT 3
12250: DOUBLE
12251: EQUAL
12252: IFTRUE 12256
12254: GO 12306
12256: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12257: LD_ADDR_VAR 0 3
12261: PUSH
12262: LD_INT 13
12264: PUSH
12265: LD_INT 14
12267: PUSH
12268: LD_INT 2
12270: PUSH
12271: LD_INT 3
12273: PUSH
12274: LD_INT 4
12276: PUSH
12277: LD_INT 5
12279: PUSH
12280: LD_INT 21
12282: PUSH
12283: LD_INT 22
12285: PUSH
12286: LD_INT 23
12288: PUSH
12289: LD_INT 24
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: ST_TO_ADDR
12304: GO 12307
12306: POP
// result := ( chassis in result ) ;
12307: LD_ADDR_VAR 0 3
12311: PUSH
12312: LD_VAR 0 1
12316: PUSH
12317: LD_VAR 0 3
12321: IN
12322: ST_TO_ADDR
// end ;
12323: LD_VAR 0 3
12327: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12328: LD_INT 0
12330: PPUSH
// if not chassis or not weapon then
12331: LD_VAR 0 1
12335: NOT
12336: PUSH
12337: LD_VAR 0 2
12341: NOT
12342: OR
12343: IFFALSE 12347
// exit ;
12345: GO 13407
// case weapon of us_machine_gun :
12347: LD_VAR 0 2
12351: PUSH
12352: LD_INT 2
12354: DOUBLE
12355: EQUAL
12356: IFTRUE 12360
12358: GO 12390
12360: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12361: LD_ADDR_VAR 0 3
12365: PUSH
12366: LD_INT 1
12368: PUSH
12369: LD_INT 2
12371: PUSH
12372: LD_INT 3
12374: PUSH
12375: LD_INT 4
12377: PUSH
12378: LD_INT 5
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: ST_TO_ADDR
12388: GO 13391
12390: LD_INT 3
12392: DOUBLE
12393: EQUAL
12394: IFTRUE 12398
12396: GO 12428
12398: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12399: LD_ADDR_VAR 0 3
12403: PUSH
12404: LD_INT 1
12406: PUSH
12407: LD_INT 2
12409: PUSH
12410: LD_INT 3
12412: PUSH
12413: LD_INT 4
12415: PUSH
12416: LD_INT 5
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: ST_TO_ADDR
12426: GO 13391
12428: LD_INT 11
12430: DOUBLE
12431: EQUAL
12432: IFTRUE 12436
12434: GO 12466
12436: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12437: LD_ADDR_VAR 0 3
12441: PUSH
12442: LD_INT 1
12444: PUSH
12445: LD_INT 2
12447: PUSH
12448: LD_INT 3
12450: PUSH
12451: LD_INT 4
12453: PUSH
12454: LD_INT 5
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: ST_TO_ADDR
12464: GO 13391
12466: LD_INT 4
12468: DOUBLE
12469: EQUAL
12470: IFTRUE 12474
12472: GO 12500
12474: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12475: LD_ADDR_VAR 0 3
12479: PUSH
12480: LD_INT 2
12482: PUSH
12483: LD_INT 3
12485: PUSH
12486: LD_INT 4
12488: PUSH
12489: LD_INT 5
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: ST_TO_ADDR
12498: GO 13391
12500: LD_INT 5
12502: DOUBLE
12503: EQUAL
12504: IFTRUE 12508
12506: GO 12534
12508: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12509: LD_ADDR_VAR 0 3
12513: PUSH
12514: LD_INT 2
12516: PUSH
12517: LD_INT 3
12519: PUSH
12520: LD_INT 4
12522: PUSH
12523: LD_INT 5
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: ST_TO_ADDR
12532: GO 13391
12534: LD_INT 9
12536: DOUBLE
12537: EQUAL
12538: IFTRUE 12542
12540: GO 12568
12542: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12543: LD_ADDR_VAR 0 3
12547: PUSH
12548: LD_INT 2
12550: PUSH
12551: LD_INT 3
12553: PUSH
12554: LD_INT 4
12556: PUSH
12557: LD_INT 5
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: ST_TO_ADDR
12566: GO 13391
12568: LD_INT 7
12570: DOUBLE
12571: EQUAL
12572: IFTRUE 12576
12574: GO 12602
12576: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12577: LD_ADDR_VAR 0 3
12581: PUSH
12582: LD_INT 2
12584: PUSH
12585: LD_INT 3
12587: PUSH
12588: LD_INT 4
12590: PUSH
12591: LD_INT 5
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: ST_TO_ADDR
12600: GO 13391
12602: LD_INT 12
12604: DOUBLE
12605: EQUAL
12606: IFTRUE 12610
12608: GO 12636
12610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12611: LD_ADDR_VAR 0 3
12615: PUSH
12616: LD_INT 2
12618: PUSH
12619: LD_INT 3
12621: PUSH
12622: LD_INT 4
12624: PUSH
12625: LD_INT 5
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: ST_TO_ADDR
12634: GO 13391
12636: LD_INT 13
12638: DOUBLE
12639: EQUAL
12640: IFTRUE 12644
12642: GO 12670
12644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12645: LD_ADDR_VAR 0 3
12649: PUSH
12650: LD_INT 2
12652: PUSH
12653: LD_INT 3
12655: PUSH
12656: LD_INT 4
12658: PUSH
12659: LD_INT 5
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: ST_TO_ADDR
12668: GO 13391
12670: LD_INT 14
12672: DOUBLE
12673: EQUAL
12674: IFTRUE 12678
12676: GO 12696
12678: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12679: LD_ADDR_VAR 0 3
12683: PUSH
12684: LD_INT 4
12686: PUSH
12687: LD_INT 5
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: ST_TO_ADDR
12694: GO 13391
12696: LD_INT 6
12698: DOUBLE
12699: EQUAL
12700: IFTRUE 12704
12702: GO 12722
12704: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12705: LD_ADDR_VAR 0 3
12709: PUSH
12710: LD_INT 4
12712: PUSH
12713: LD_INT 5
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: ST_TO_ADDR
12720: GO 13391
12722: LD_INT 10
12724: DOUBLE
12725: EQUAL
12726: IFTRUE 12730
12728: GO 12748
12730: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12731: LD_ADDR_VAR 0 3
12735: PUSH
12736: LD_INT 4
12738: PUSH
12739: LD_INT 5
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: ST_TO_ADDR
12746: GO 13391
12748: LD_INT 22
12750: DOUBLE
12751: EQUAL
12752: IFTRUE 12756
12754: GO 12782
12756: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12757: LD_ADDR_VAR 0 3
12761: PUSH
12762: LD_INT 11
12764: PUSH
12765: LD_INT 12
12767: PUSH
12768: LD_INT 13
12770: PUSH
12771: LD_INT 14
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: ST_TO_ADDR
12780: GO 13391
12782: LD_INT 23
12784: DOUBLE
12785: EQUAL
12786: IFTRUE 12790
12788: GO 12816
12790: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12791: LD_ADDR_VAR 0 3
12795: PUSH
12796: LD_INT 11
12798: PUSH
12799: LD_INT 12
12801: PUSH
12802: LD_INT 13
12804: PUSH
12805: LD_INT 14
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: ST_TO_ADDR
12814: GO 13391
12816: LD_INT 24
12818: DOUBLE
12819: EQUAL
12820: IFTRUE 12824
12822: GO 12850
12824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12825: LD_ADDR_VAR 0 3
12829: PUSH
12830: LD_INT 11
12832: PUSH
12833: LD_INT 12
12835: PUSH
12836: LD_INT 13
12838: PUSH
12839: LD_INT 14
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: ST_TO_ADDR
12848: GO 13391
12850: LD_INT 30
12852: DOUBLE
12853: EQUAL
12854: IFTRUE 12858
12856: GO 12884
12858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12859: LD_ADDR_VAR 0 3
12863: PUSH
12864: LD_INT 11
12866: PUSH
12867: LD_INT 12
12869: PUSH
12870: LD_INT 13
12872: PUSH
12873: LD_INT 14
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: ST_TO_ADDR
12882: GO 13391
12884: LD_INT 25
12886: DOUBLE
12887: EQUAL
12888: IFTRUE 12892
12890: GO 12910
12892: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12893: LD_ADDR_VAR 0 3
12897: PUSH
12898: LD_INT 13
12900: PUSH
12901: LD_INT 14
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: ST_TO_ADDR
12908: GO 13391
12910: LD_INT 27
12912: DOUBLE
12913: EQUAL
12914: IFTRUE 12918
12916: GO 12936
12918: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12919: LD_ADDR_VAR 0 3
12923: PUSH
12924: LD_INT 13
12926: PUSH
12927: LD_INT 14
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: ST_TO_ADDR
12934: GO 13391
12936: LD_INT 92
12938: DOUBLE
12939: EQUAL
12940: IFTRUE 12944
12942: GO 12970
12944: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12945: LD_ADDR_VAR 0 3
12949: PUSH
12950: LD_INT 11
12952: PUSH
12953: LD_INT 12
12955: PUSH
12956: LD_INT 13
12958: PUSH
12959: LD_INT 14
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: ST_TO_ADDR
12968: GO 13391
12970: LD_INT 28
12972: DOUBLE
12973: EQUAL
12974: IFTRUE 12978
12976: GO 12996
12978: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12979: LD_ADDR_VAR 0 3
12983: PUSH
12984: LD_INT 13
12986: PUSH
12987: LD_INT 14
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: ST_TO_ADDR
12994: GO 13391
12996: LD_INT 29
12998: DOUBLE
12999: EQUAL
13000: IFTRUE 13004
13002: GO 13022
13004: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13005: LD_ADDR_VAR 0 3
13009: PUSH
13010: LD_INT 13
13012: PUSH
13013: LD_INT 14
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: ST_TO_ADDR
13020: GO 13391
13022: LD_INT 31
13024: DOUBLE
13025: EQUAL
13026: IFTRUE 13030
13028: GO 13048
13030: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13031: LD_ADDR_VAR 0 3
13035: PUSH
13036: LD_INT 13
13038: PUSH
13039: LD_INT 14
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: ST_TO_ADDR
13046: GO 13391
13048: LD_INT 26
13050: DOUBLE
13051: EQUAL
13052: IFTRUE 13056
13054: GO 13074
13056: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13057: LD_ADDR_VAR 0 3
13061: PUSH
13062: LD_INT 13
13064: PUSH
13065: LD_INT 14
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: ST_TO_ADDR
13072: GO 13391
13074: LD_INT 42
13076: DOUBLE
13077: EQUAL
13078: IFTRUE 13082
13080: GO 13108
13082: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13083: LD_ADDR_VAR 0 3
13087: PUSH
13088: LD_INT 21
13090: PUSH
13091: LD_INT 22
13093: PUSH
13094: LD_INT 23
13096: PUSH
13097: LD_INT 24
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: ST_TO_ADDR
13106: GO 13391
13108: LD_INT 43
13110: DOUBLE
13111: EQUAL
13112: IFTRUE 13116
13114: GO 13142
13116: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13117: LD_ADDR_VAR 0 3
13121: PUSH
13122: LD_INT 21
13124: PUSH
13125: LD_INT 22
13127: PUSH
13128: LD_INT 23
13130: PUSH
13131: LD_INT 24
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: ST_TO_ADDR
13140: GO 13391
13142: LD_INT 44
13144: DOUBLE
13145: EQUAL
13146: IFTRUE 13150
13148: GO 13176
13150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13151: LD_ADDR_VAR 0 3
13155: PUSH
13156: LD_INT 21
13158: PUSH
13159: LD_INT 22
13161: PUSH
13162: LD_INT 23
13164: PUSH
13165: LD_INT 24
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: ST_TO_ADDR
13174: GO 13391
13176: LD_INT 45
13178: DOUBLE
13179: EQUAL
13180: IFTRUE 13184
13182: GO 13210
13184: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13185: LD_ADDR_VAR 0 3
13189: PUSH
13190: LD_INT 21
13192: PUSH
13193: LD_INT 22
13195: PUSH
13196: LD_INT 23
13198: PUSH
13199: LD_INT 24
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: ST_TO_ADDR
13208: GO 13391
13210: LD_INT 49
13212: DOUBLE
13213: EQUAL
13214: IFTRUE 13218
13216: GO 13244
13218: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13219: LD_ADDR_VAR 0 3
13223: PUSH
13224: LD_INT 21
13226: PUSH
13227: LD_INT 22
13229: PUSH
13230: LD_INT 23
13232: PUSH
13233: LD_INT 24
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: ST_TO_ADDR
13242: GO 13391
13244: LD_INT 51
13246: DOUBLE
13247: EQUAL
13248: IFTRUE 13252
13250: GO 13278
13252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13253: LD_ADDR_VAR 0 3
13257: PUSH
13258: LD_INT 21
13260: PUSH
13261: LD_INT 22
13263: PUSH
13264: LD_INT 23
13266: PUSH
13267: LD_INT 24
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: ST_TO_ADDR
13276: GO 13391
13278: LD_INT 52
13280: DOUBLE
13281: EQUAL
13282: IFTRUE 13286
13284: GO 13312
13286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13287: LD_ADDR_VAR 0 3
13291: PUSH
13292: LD_INT 21
13294: PUSH
13295: LD_INT 22
13297: PUSH
13298: LD_INT 23
13300: PUSH
13301: LD_INT 24
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: ST_TO_ADDR
13310: GO 13391
13312: LD_INT 53
13314: DOUBLE
13315: EQUAL
13316: IFTRUE 13320
13318: GO 13338
13320: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13321: LD_ADDR_VAR 0 3
13325: PUSH
13326: LD_INT 23
13328: PUSH
13329: LD_INT 24
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: ST_TO_ADDR
13336: GO 13391
13338: LD_INT 46
13340: DOUBLE
13341: EQUAL
13342: IFTRUE 13346
13344: GO 13364
13346: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13347: LD_ADDR_VAR 0 3
13351: PUSH
13352: LD_INT 23
13354: PUSH
13355: LD_INT 24
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: ST_TO_ADDR
13362: GO 13391
13364: LD_INT 47
13366: DOUBLE
13367: EQUAL
13368: IFTRUE 13372
13370: GO 13390
13372: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13373: LD_ADDR_VAR 0 3
13377: PUSH
13378: LD_INT 23
13380: PUSH
13381: LD_INT 24
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: ST_TO_ADDR
13388: GO 13391
13390: POP
// result := ( chassis in result ) ;
13391: LD_ADDR_VAR 0 3
13395: PUSH
13396: LD_VAR 0 1
13400: PUSH
13401: LD_VAR 0 3
13405: IN
13406: ST_TO_ADDR
// end ;
13407: LD_VAR 0 3
13411: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13412: LD_INT 0
13414: PPUSH
13415: PPUSH
13416: PPUSH
13417: PPUSH
13418: PPUSH
13419: PPUSH
13420: PPUSH
// result := array ;
13421: LD_ADDR_VAR 0 5
13425: PUSH
13426: LD_VAR 0 1
13430: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13431: LD_VAR 0 1
13435: NOT
13436: PUSH
13437: LD_VAR 0 2
13441: NOT
13442: OR
13443: PUSH
13444: LD_VAR 0 3
13448: NOT
13449: OR
13450: PUSH
13451: LD_VAR 0 2
13455: PUSH
13456: LD_VAR 0 1
13460: GREATER
13461: OR
13462: PUSH
13463: LD_VAR 0 3
13467: PUSH
13468: LD_VAR 0 1
13472: GREATER
13473: OR
13474: IFFALSE 13478
// exit ;
13476: GO 13774
// if direction then
13478: LD_VAR 0 4
13482: IFFALSE 13546
// begin d := 1 ;
13484: LD_ADDR_VAR 0 9
13488: PUSH
13489: LD_INT 1
13491: ST_TO_ADDR
// if i_from > i_to then
13492: LD_VAR 0 2
13496: PUSH
13497: LD_VAR 0 3
13501: GREATER
13502: IFFALSE 13528
// length := ( array - i_from ) + i_to else
13504: LD_ADDR_VAR 0 11
13508: PUSH
13509: LD_VAR 0 1
13513: PUSH
13514: LD_VAR 0 2
13518: MINUS
13519: PUSH
13520: LD_VAR 0 3
13524: PLUS
13525: ST_TO_ADDR
13526: GO 13544
// length := i_to - i_from ;
13528: LD_ADDR_VAR 0 11
13532: PUSH
13533: LD_VAR 0 3
13537: PUSH
13538: LD_VAR 0 2
13542: MINUS
13543: ST_TO_ADDR
// end else
13544: GO 13607
// begin d := - 1 ;
13546: LD_ADDR_VAR 0 9
13550: PUSH
13551: LD_INT 1
13553: NEG
13554: ST_TO_ADDR
// if i_from > i_to then
13555: LD_VAR 0 2
13559: PUSH
13560: LD_VAR 0 3
13564: GREATER
13565: IFFALSE 13585
// length := i_from - i_to else
13567: LD_ADDR_VAR 0 11
13571: PUSH
13572: LD_VAR 0 2
13576: PUSH
13577: LD_VAR 0 3
13581: MINUS
13582: ST_TO_ADDR
13583: GO 13607
// length := ( array - i_to ) + i_from ;
13585: LD_ADDR_VAR 0 11
13589: PUSH
13590: LD_VAR 0 1
13594: PUSH
13595: LD_VAR 0 3
13599: MINUS
13600: PUSH
13601: LD_VAR 0 2
13605: PLUS
13606: ST_TO_ADDR
// end ; if not length then
13607: LD_VAR 0 11
13611: NOT
13612: IFFALSE 13616
// exit ;
13614: GO 13774
// tmp := array ;
13616: LD_ADDR_VAR 0 10
13620: PUSH
13621: LD_VAR 0 1
13625: ST_TO_ADDR
// for i = 1 to length do
13626: LD_ADDR_VAR 0 6
13630: PUSH
13631: DOUBLE
13632: LD_INT 1
13634: DEC
13635: ST_TO_ADDR
13636: LD_VAR 0 11
13640: PUSH
13641: FOR_TO
13642: IFFALSE 13762
// begin for j = 1 to array do
13644: LD_ADDR_VAR 0 7
13648: PUSH
13649: DOUBLE
13650: LD_INT 1
13652: DEC
13653: ST_TO_ADDR
13654: LD_VAR 0 1
13658: PUSH
13659: FOR_TO
13660: IFFALSE 13748
// begin k := j + d ;
13662: LD_ADDR_VAR 0 8
13666: PUSH
13667: LD_VAR 0 7
13671: PUSH
13672: LD_VAR 0 9
13676: PLUS
13677: ST_TO_ADDR
// if k > array then
13678: LD_VAR 0 8
13682: PUSH
13683: LD_VAR 0 1
13687: GREATER
13688: IFFALSE 13698
// k := 1 ;
13690: LD_ADDR_VAR 0 8
13694: PUSH
13695: LD_INT 1
13697: ST_TO_ADDR
// if not k then
13698: LD_VAR 0 8
13702: NOT
13703: IFFALSE 13715
// k := array ;
13705: LD_ADDR_VAR 0 8
13709: PUSH
13710: LD_VAR 0 1
13714: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13715: LD_ADDR_VAR 0 10
13719: PUSH
13720: LD_VAR 0 10
13724: PPUSH
13725: LD_VAR 0 8
13729: PPUSH
13730: LD_VAR 0 1
13734: PUSH
13735: LD_VAR 0 7
13739: ARRAY
13740: PPUSH
13741: CALL_OW 1
13745: ST_TO_ADDR
// end ;
13746: GO 13659
13748: POP
13749: POP
// array := tmp ;
13750: LD_ADDR_VAR 0 1
13754: PUSH
13755: LD_VAR 0 10
13759: ST_TO_ADDR
// end ;
13760: GO 13641
13762: POP
13763: POP
// result := array ;
13764: LD_ADDR_VAR 0 5
13768: PUSH
13769: LD_VAR 0 1
13773: ST_TO_ADDR
// end ;
13774: LD_VAR 0 5
13778: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13779: LD_INT 0
13781: PPUSH
13782: PPUSH
// result := 0 ;
13783: LD_ADDR_VAR 0 3
13787: PUSH
13788: LD_INT 0
13790: ST_TO_ADDR
// if not array or not value in array then
13791: LD_VAR 0 1
13795: NOT
13796: PUSH
13797: LD_VAR 0 2
13801: PUSH
13802: LD_VAR 0 1
13806: IN
13807: NOT
13808: OR
13809: IFFALSE 13813
// exit ;
13811: GO 13867
// for i = 1 to array do
13813: LD_ADDR_VAR 0 4
13817: PUSH
13818: DOUBLE
13819: LD_INT 1
13821: DEC
13822: ST_TO_ADDR
13823: LD_VAR 0 1
13827: PUSH
13828: FOR_TO
13829: IFFALSE 13865
// if value = array [ i ] then
13831: LD_VAR 0 2
13835: PUSH
13836: LD_VAR 0 1
13840: PUSH
13841: LD_VAR 0 4
13845: ARRAY
13846: EQUAL
13847: IFFALSE 13863
// begin result := i ;
13849: LD_ADDR_VAR 0 3
13853: PUSH
13854: LD_VAR 0 4
13858: ST_TO_ADDR
// exit ;
13859: POP
13860: POP
13861: GO 13867
// end ;
13863: GO 13828
13865: POP
13866: POP
// end ;
13867: LD_VAR 0 3
13871: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13872: LD_INT 0
13874: PPUSH
// vc_chassis := chassis ;
13875: LD_ADDR_OWVAR 37
13879: PUSH
13880: LD_VAR 0 1
13884: ST_TO_ADDR
// vc_engine := engine ;
13885: LD_ADDR_OWVAR 39
13889: PUSH
13890: LD_VAR 0 2
13894: ST_TO_ADDR
// vc_control := control ;
13895: LD_ADDR_OWVAR 38
13899: PUSH
13900: LD_VAR 0 3
13904: ST_TO_ADDR
// vc_weapon := weapon ;
13905: LD_ADDR_OWVAR 40
13909: PUSH
13910: LD_VAR 0 4
13914: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13915: LD_ADDR_OWVAR 41
13919: PUSH
13920: LD_VAR 0 5
13924: ST_TO_ADDR
// end ;
13925: LD_VAR 0 6
13929: RET
// export function WantPlant ( unit ) ; var task ; begin
13930: LD_INT 0
13932: PPUSH
13933: PPUSH
// result := false ;
13934: LD_ADDR_VAR 0 2
13938: PUSH
13939: LD_INT 0
13941: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13942: LD_ADDR_VAR 0 3
13946: PUSH
13947: LD_VAR 0 1
13951: PPUSH
13952: CALL_OW 437
13956: ST_TO_ADDR
// if task then
13957: LD_VAR 0 3
13961: IFFALSE 13989
// if task [ 1 ] [ 1 ] = p then
13963: LD_VAR 0 3
13967: PUSH
13968: LD_INT 1
13970: ARRAY
13971: PUSH
13972: LD_INT 1
13974: ARRAY
13975: PUSH
13976: LD_STRING p
13978: EQUAL
13979: IFFALSE 13989
// result := true ;
13981: LD_ADDR_VAR 0 2
13985: PUSH
13986: LD_INT 1
13988: ST_TO_ADDR
// end ;
13989: LD_VAR 0 2
13993: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13994: LD_INT 0
13996: PPUSH
13997: PPUSH
13998: PPUSH
13999: PPUSH
// if pos < 1 then
14000: LD_VAR 0 2
14004: PUSH
14005: LD_INT 1
14007: LESS
14008: IFFALSE 14012
// exit ;
14010: GO 14315
// if pos = 1 then
14012: LD_VAR 0 2
14016: PUSH
14017: LD_INT 1
14019: EQUAL
14020: IFFALSE 14053
// result := Replace ( arr , pos [ 1 ] , value ) else
14022: LD_ADDR_VAR 0 4
14026: PUSH
14027: LD_VAR 0 1
14031: PPUSH
14032: LD_VAR 0 2
14036: PUSH
14037: LD_INT 1
14039: ARRAY
14040: PPUSH
14041: LD_VAR 0 3
14045: PPUSH
14046: CALL_OW 1
14050: ST_TO_ADDR
14051: GO 14315
// begin tmp := arr ;
14053: LD_ADDR_VAR 0 6
14057: PUSH
14058: LD_VAR 0 1
14062: ST_TO_ADDR
// s_arr := [ tmp ] ;
14063: LD_ADDR_VAR 0 7
14067: PUSH
14068: LD_VAR 0 6
14072: PUSH
14073: EMPTY
14074: LIST
14075: ST_TO_ADDR
// for i = 1 to pos - 1 do
14076: LD_ADDR_VAR 0 5
14080: PUSH
14081: DOUBLE
14082: LD_INT 1
14084: DEC
14085: ST_TO_ADDR
14086: LD_VAR 0 2
14090: PUSH
14091: LD_INT 1
14093: MINUS
14094: PUSH
14095: FOR_TO
14096: IFFALSE 14141
// begin tmp := tmp [ pos [ i ] ] ;
14098: LD_ADDR_VAR 0 6
14102: PUSH
14103: LD_VAR 0 6
14107: PUSH
14108: LD_VAR 0 2
14112: PUSH
14113: LD_VAR 0 5
14117: ARRAY
14118: ARRAY
14119: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14120: LD_ADDR_VAR 0 7
14124: PUSH
14125: LD_VAR 0 7
14129: PUSH
14130: LD_VAR 0 6
14134: PUSH
14135: EMPTY
14136: LIST
14137: ADD
14138: ST_TO_ADDR
// end ;
14139: GO 14095
14141: POP
14142: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14143: LD_ADDR_VAR 0 6
14147: PUSH
14148: LD_VAR 0 6
14152: PPUSH
14153: LD_VAR 0 2
14157: PUSH
14158: LD_VAR 0 2
14162: ARRAY
14163: PPUSH
14164: LD_VAR 0 3
14168: PPUSH
14169: CALL_OW 1
14173: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14174: LD_ADDR_VAR 0 7
14178: PUSH
14179: LD_VAR 0 7
14183: PPUSH
14184: LD_VAR 0 7
14188: PPUSH
14189: LD_VAR 0 6
14193: PPUSH
14194: CALL_OW 1
14198: ST_TO_ADDR
// for i = s_arr downto 2 do
14199: LD_ADDR_VAR 0 5
14203: PUSH
14204: DOUBLE
14205: LD_VAR 0 7
14209: INC
14210: ST_TO_ADDR
14211: LD_INT 2
14213: PUSH
14214: FOR_DOWNTO
14215: IFFALSE 14299
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14217: LD_ADDR_VAR 0 6
14221: PUSH
14222: LD_VAR 0 7
14226: PUSH
14227: LD_VAR 0 5
14231: PUSH
14232: LD_INT 1
14234: MINUS
14235: ARRAY
14236: PPUSH
14237: LD_VAR 0 2
14241: PUSH
14242: LD_VAR 0 5
14246: PUSH
14247: LD_INT 1
14249: MINUS
14250: ARRAY
14251: PPUSH
14252: LD_VAR 0 7
14256: PUSH
14257: LD_VAR 0 5
14261: ARRAY
14262: PPUSH
14263: CALL_OW 1
14267: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14268: LD_ADDR_VAR 0 7
14272: PUSH
14273: LD_VAR 0 7
14277: PPUSH
14278: LD_VAR 0 5
14282: PUSH
14283: LD_INT 1
14285: MINUS
14286: PPUSH
14287: LD_VAR 0 6
14291: PPUSH
14292: CALL_OW 1
14296: ST_TO_ADDR
// end ;
14297: GO 14214
14299: POP
14300: POP
// result := s_arr [ 1 ] ;
14301: LD_ADDR_VAR 0 4
14305: PUSH
14306: LD_VAR 0 7
14310: PUSH
14311: LD_INT 1
14313: ARRAY
14314: ST_TO_ADDR
// end ; end ;
14315: LD_VAR 0 4
14319: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14320: LD_INT 0
14322: PPUSH
14323: PPUSH
// if not list then
14324: LD_VAR 0 1
14328: NOT
14329: IFFALSE 14333
// exit ;
14331: GO 14424
// i := list [ pos1 ] ;
14333: LD_ADDR_VAR 0 5
14337: PUSH
14338: LD_VAR 0 1
14342: PUSH
14343: LD_VAR 0 2
14347: ARRAY
14348: ST_TO_ADDR
// if not i then
14349: LD_VAR 0 5
14353: NOT
14354: IFFALSE 14358
// exit ;
14356: GO 14424
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14358: LD_ADDR_VAR 0 1
14362: PUSH
14363: LD_VAR 0 1
14367: PPUSH
14368: LD_VAR 0 2
14372: PPUSH
14373: LD_VAR 0 1
14377: PUSH
14378: LD_VAR 0 3
14382: ARRAY
14383: PPUSH
14384: CALL_OW 1
14388: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14389: LD_ADDR_VAR 0 1
14393: PUSH
14394: LD_VAR 0 1
14398: PPUSH
14399: LD_VAR 0 3
14403: PPUSH
14404: LD_VAR 0 5
14408: PPUSH
14409: CALL_OW 1
14413: ST_TO_ADDR
// result := list ;
14414: LD_ADDR_VAR 0 4
14418: PUSH
14419: LD_VAR 0 1
14423: ST_TO_ADDR
// end ;
14424: LD_VAR 0 4
14428: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14429: LD_INT 0
14431: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14432: LD_ADDR_VAR 0 5
14436: PUSH
14437: LD_VAR 0 1
14441: PPUSH
14442: CALL_OW 250
14446: PPUSH
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 251
14456: PPUSH
14457: LD_VAR 0 2
14461: PPUSH
14462: LD_VAR 0 3
14466: PPUSH
14467: LD_VAR 0 4
14471: PPUSH
14472: CALL 14482 0 5
14476: ST_TO_ADDR
// end ;
14477: LD_VAR 0 5
14481: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14482: LD_INT 0
14484: PPUSH
14485: PPUSH
14486: PPUSH
14487: PPUSH
// if not list then
14488: LD_VAR 0 3
14492: NOT
14493: IFFALSE 14497
// exit ;
14495: GO 14885
// result := [ ] ;
14497: LD_ADDR_VAR 0 6
14501: PUSH
14502: EMPTY
14503: ST_TO_ADDR
// for i in list do
14504: LD_ADDR_VAR 0 7
14508: PUSH
14509: LD_VAR 0 3
14513: PUSH
14514: FOR_IN
14515: IFFALSE 14717
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14517: LD_ADDR_VAR 0 9
14521: PUSH
14522: LD_VAR 0 7
14526: PPUSH
14527: LD_VAR 0 1
14531: PPUSH
14532: LD_VAR 0 2
14536: PPUSH
14537: CALL_OW 297
14541: ST_TO_ADDR
// if not result then
14542: LD_VAR 0 6
14546: NOT
14547: IFFALSE 14573
// result := [ [ i , tmp ] ] else
14549: LD_ADDR_VAR 0 6
14553: PUSH
14554: LD_VAR 0 7
14558: PUSH
14559: LD_VAR 0 9
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: EMPTY
14569: LIST
14570: ST_TO_ADDR
14571: GO 14715
// begin if result [ result ] [ 2 ] < tmp then
14573: LD_VAR 0 6
14577: PUSH
14578: LD_VAR 0 6
14582: ARRAY
14583: PUSH
14584: LD_INT 2
14586: ARRAY
14587: PUSH
14588: LD_VAR 0 9
14592: LESS
14593: IFFALSE 14635
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14595: LD_ADDR_VAR 0 6
14599: PUSH
14600: LD_VAR 0 6
14604: PPUSH
14605: LD_VAR 0 6
14609: PUSH
14610: LD_INT 1
14612: PLUS
14613: PPUSH
14614: LD_VAR 0 7
14618: PUSH
14619: LD_VAR 0 9
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PPUSH
14628: CALL_OW 2
14632: ST_TO_ADDR
14633: GO 14715
// for j = 1 to result do
14635: LD_ADDR_VAR 0 8
14639: PUSH
14640: DOUBLE
14641: LD_INT 1
14643: DEC
14644: ST_TO_ADDR
14645: LD_VAR 0 6
14649: PUSH
14650: FOR_TO
14651: IFFALSE 14713
// begin if tmp < result [ j ] [ 2 ] then
14653: LD_VAR 0 9
14657: PUSH
14658: LD_VAR 0 6
14662: PUSH
14663: LD_VAR 0 8
14667: ARRAY
14668: PUSH
14669: LD_INT 2
14671: ARRAY
14672: LESS
14673: IFFALSE 14711
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14675: LD_ADDR_VAR 0 6
14679: PUSH
14680: LD_VAR 0 6
14684: PPUSH
14685: LD_VAR 0 8
14689: PPUSH
14690: LD_VAR 0 7
14694: PUSH
14695: LD_VAR 0 9
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PPUSH
14704: CALL_OW 2
14708: ST_TO_ADDR
// break ;
14709: GO 14713
// end ; end ;
14711: GO 14650
14713: POP
14714: POP
// end ; end ;
14715: GO 14514
14717: POP
14718: POP
// if result and not asc then
14719: LD_VAR 0 6
14723: PUSH
14724: LD_VAR 0 4
14728: NOT
14729: AND
14730: IFFALSE 14805
// begin tmp := result ;
14732: LD_ADDR_VAR 0 9
14736: PUSH
14737: LD_VAR 0 6
14741: ST_TO_ADDR
// for i = tmp downto 1 do
14742: LD_ADDR_VAR 0 7
14746: PUSH
14747: DOUBLE
14748: LD_VAR 0 9
14752: INC
14753: ST_TO_ADDR
14754: LD_INT 1
14756: PUSH
14757: FOR_DOWNTO
14758: IFFALSE 14803
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14760: LD_ADDR_VAR 0 6
14764: PUSH
14765: LD_VAR 0 6
14769: PPUSH
14770: LD_VAR 0 9
14774: PUSH
14775: LD_VAR 0 7
14779: MINUS
14780: PUSH
14781: LD_INT 1
14783: PLUS
14784: PPUSH
14785: LD_VAR 0 9
14789: PUSH
14790: LD_VAR 0 7
14794: ARRAY
14795: PPUSH
14796: CALL_OW 1
14800: ST_TO_ADDR
14801: GO 14757
14803: POP
14804: POP
// end ; tmp := [ ] ;
14805: LD_ADDR_VAR 0 9
14809: PUSH
14810: EMPTY
14811: ST_TO_ADDR
// if mode then
14812: LD_VAR 0 5
14816: IFFALSE 14885
// begin for i = 1 to result do
14818: LD_ADDR_VAR 0 7
14822: PUSH
14823: DOUBLE
14824: LD_INT 1
14826: DEC
14827: ST_TO_ADDR
14828: LD_VAR 0 6
14832: PUSH
14833: FOR_TO
14834: IFFALSE 14873
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
14836: LD_ADDR_VAR 0 9
14840: PUSH
14841: LD_VAR 0 9
14845: PPUSH
14846: LD_VAR 0 7
14850: PPUSH
14851: LD_VAR 0 6
14855: PUSH
14856: LD_VAR 0 7
14860: ARRAY
14861: PUSH
14862: LD_INT 1
14864: ARRAY
14865: PPUSH
14866: CALL_OW 1
14870: ST_TO_ADDR
14871: GO 14833
14873: POP
14874: POP
// result := tmp ;
14875: LD_ADDR_VAR 0 6
14879: PUSH
14880: LD_VAR 0 9
14884: ST_TO_ADDR
// end ; end ;
14885: LD_VAR 0 6
14889: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
14890: LD_INT 0
14892: PPUSH
14893: PPUSH
14894: PPUSH
14895: PPUSH
14896: PPUSH
14897: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
14898: LD_ADDR_VAR 0 5
14902: PUSH
14903: LD_INT 0
14905: PUSH
14906: LD_INT 0
14908: PUSH
14909: LD_INT 0
14911: PUSH
14912: EMPTY
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: ST_TO_ADDR
// if not x or not y then
14920: LD_VAR 0 2
14924: NOT
14925: PUSH
14926: LD_VAR 0 3
14930: NOT
14931: OR
14932: IFFALSE 14936
// exit ;
14934: GO 16586
// if not range then
14936: LD_VAR 0 4
14940: NOT
14941: IFFALSE 14951
// range := 10 ;
14943: LD_ADDR_VAR 0 4
14947: PUSH
14948: LD_INT 10
14950: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14951: LD_ADDR_VAR 0 8
14955: PUSH
14956: LD_INT 81
14958: PUSH
14959: LD_VAR 0 1
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 92
14970: PUSH
14971: LD_VAR 0 2
14975: PUSH
14976: LD_VAR 0 3
14980: PUSH
14981: LD_VAR 0 4
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 3
14994: PUSH
14995: LD_INT 21
14997: PUSH
14998: LD_INT 3
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: LIST
15013: PPUSH
15014: CALL_OW 69
15018: ST_TO_ADDR
// if not tmp then
15019: LD_VAR 0 8
15023: NOT
15024: IFFALSE 15028
// exit ;
15026: GO 16586
// for i in tmp do
15028: LD_ADDR_VAR 0 6
15032: PUSH
15033: LD_VAR 0 8
15037: PUSH
15038: FOR_IN
15039: IFFALSE 16561
// begin points := [ 0 , 0 , 0 ] ;
15041: LD_ADDR_VAR 0 9
15045: PUSH
15046: LD_INT 0
15048: PUSH
15049: LD_INT 0
15051: PUSH
15052: LD_INT 0
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: LIST
15059: ST_TO_ADDR
// bpoints := 1 ;
15060: LD_ADDR_VAR 0 10
15064: PUSH
15065: LD_INT 1
15067: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15068: LD_VAR 0 6
15072: PPUSH
15073: CALL_OW 247
15077: PUSH
15078: LD_INT 1
15080: DOUBLE
15081: EQUAL
15082: IFTRUE 15086
15084: GO 15664
15086: POP
// begin if GetClass ( i ) = 1 then
15087: LD_VAR 0 6
15091: PPUSH
15092: CALL_OW 257
15096: PUSH
15097: LD_INT 1
15099: EQUAL
15100: IFFALSE 15121
// points := [ 10 , 5 , 3 ] ;
15102: LD_ADDR_VAR 0 9
15106: PUSH
15107: LD_INT 10
15109: PUSH
15110: LD_INT 5
15112: PUSH
15113: LD_INT 3
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: LIST
15120: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15121: LD_VAR 0 6
15125: PPUSH
15126: CALL_OW 257
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: LD_INT 3
15136: PUSH
15137: LD_INT 4
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: IN
15145: IFFALSE 15166
// points := [ 3 , 2 , 1 ] ;
15147: LD_ADDR_VAR 0 9
15151: PUSH
15152: LD_INT 3
15154: PUSH
15155: LD_INT 2
15157: PUSH
15158: LD_INT 1
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: LIST
15165: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15166: LD_VAR 0 6
15170: PPUSH
15171: CALL_OW 257
15175: PUSH
15176: LD_INT 5
15178: EQUAL
15179: IFFALSE 15200
// points := [ 130 , 5 , 2 ] ;
15181: LD_ADDR_VAR 0 9
15185: PUSH
15186: LD_INT 130
15188: PUSH
15189: LD_INT 5
15191: PUSH
15192: LD_INT 2
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: LIST
15199: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15200: LD_VAR 0 6
15204: PPUSH
15205: CALL_OW 257
15209: PUSH
15210: LD_INT 8
15212: EQUAL
15213: IFFALSE 15234
// points := [ 35 , 35 , 30 ] ;
15215: LD_ADDR_VAR 0 9
15219: PUSH
15220: LD_INT 35
15222: PUSH
15223: LD_INT 35
15225: PUSH
15226: LD_INT 30
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: LIST
15233: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15234: LD_VAR 0 6
15238: PPUSH
15239: CALL_OW 257
15243: PUSH
15244: LD_INT 9
15246: EQUAL
15247: IFFALSE 15268
// points := [ 20 , 55 , 40 ] ;
15249: LD_ADDR_VAR 0 9
15253: PUSH
15254: LD_INT 20
15256: PUSH
15257: LD_INT 55
15259: PUSH
15260: LD_INT 40
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: LIST
15267: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15268: LD_VAR 0 6
15272: PPUSH
15273: CALL_OW 257
15277: PUSH
15278: LD_INT 12
15280: PUSH
15281: LD_INT 16
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: IN
15288: IFFALSE 15309
// points := [ 5 , 3 , 2 ] ;
15290: LD_ADDR_VAR 0 9
15294: PUSH
15295: LD_INT 5
15297: PUSH
15298: LD_INT 3
15300: PUSH
15301: LD_INT 2
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: LIST
15308: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15309: LD_VAR 0 6
15313: PPUSH
15314: CALL_OW 257
15318: PUSH
15319: LD_INT 17
15321: EQUAL
15322: IFFALSE 15343
// points := [ 100 , 50 , 75 ] ;
15324: LD_ADDR_VAR 0 9
15328: PUSH
15329: LD_INT 100
15331: PUSH
15332: LD_INT 50
15334: PUSH
15335: LD_INT 75
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15343: LD_VAR 0 6
15347: PPUSH
15348: CALL_OW 257
15352: PUSH
15353: LD_INT 15
15355: EQUAL
15356: IFFALSE 15377
// points := [ 10 , 5 , 3 ] ;
15358: LD_ADDR_VAR 0 9
15362: PUSH
15363: LD_INT 10
15365: PUSH
15366: LD_INT 5
15368: PUSH
15369: LD_INT 3
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: LIST
15376: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15377: LD_VAR 0 6
15381: PPUSH
15382: CALL_OW 257
15386: PUSH
15387: LD_INT 14
15389: EQUAL
15390: IFFALSE 15411
// points := [ 10 , 0 , 0 ] ;
15392: LD_ADDR_VAR 0 9
15396: PUSH
15397: LD_INT 10
15399: PUSH
15400: LD_INT 0
15402: PUSH
15403: LD_INT 0
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: LIST
15410: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15411: LD_VAR 0 6
15415: PPUSH
15416: CALL_OW 257
15420: PUSH
15421: LD_INT 11
15423: EQUAL
15424: IFFALSE 15445
// points := [ 30 , 10 , 5 ] ;
15426: LD_ADDR_VAR 0 9
15430: PUSH
15431: LD_INT 30
15433: PUSH
15434: LD_INT 10
15436: PUSH
15437: LD_INT 5
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: LIST
15444: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15445: LD_VAR 0 1
15449: PPUSH
15450: LD_INT 5
15452: PPUSH
15453: CALL_OW 321
15457: PUSH
15458: LD_INT 2
15460: EQUAL
15461: IFFALSE 15478
// bpoints := bpoints * 1.8 ;
15463: LD_ADDR_VAR 0 10
15467: PUSH
15468: LD_VAR 0 10
15472: PUSH
15473: LD_REAL  1.80000000000000E+0000
15476: MUL
15477: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15478: LD_VAR 0 6
15482: PPUSH
15483: CALL_OW 257
15487: PUSH
15488: LD_INT 1
15490: PUSH
15491: LD_INT 2
15493: PUSH
15494: LD_INT 3
15496: PUSH
15497: LD_INT 4
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: IN
15506: PUSH
15507: LD_VAR 0 1
15511: PPUSH
15512: LD_INT 51
15514: PPUSH
15515: CALL_OW 321
15519: PUSH
15520: LD_INT 2
15522: EQUAL
15523: AND
15524: IFFALSE 15541
// bpoints := bpoints * 1.2 ;
15526: LD_ADDR_VAR 0 10
15530: PUSH
15531: LD_VAR 0 10
15535: PUSH
15536: LD_REAL  1.20000000000000E+0000
15539: MUL
15540: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15541: LD_VAR 0 6
15545: PPUSH
15546: CALL_OW 257
15550: PUSH
15551: LD_INT 5
15553: PUSH
15554: LD_INT 7
15556: PUSH
15557: LD_INT 9
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: LIST
15564: IN
15565: PUSH
15566: LD_VAR 0 1
15570: PPUSH
15571: LD_INT 52
15573: PPUSH
15574: CALL_OW 321
15578: PUSH
15579: LD_INT 2
15581: EQUAL
15582: AND
15583: IFFALSE 15600
// bpoints := bpoints * 1.5 ;
15585: LD_ADDR_VAR 0 10
15589: PUSH
15590: LD_VAR 0 10
15594: PUSH
15595: LD_REAL  1.50000000000000E+0000
15598: MUL
15599: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15600: LD_VAR 0 1
15604: PPUSH
15605: LD_INT 66
15607: PPUSH
15608: CALL_OW 321
15612: PUSH
15613: LD_INT 2
15615: EQUAL
15616: IFFALSE 15633
// bpoints := bpoints * 1.1 ;
15618: LD_ADDR_VAR 0 10
15622: PUSH
15623: LD_VAR 0 10
15627: PUSH
15628: LD_REAL  1.10000000000000E+0000
15631: MUL
15632: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15633: LD_ADDR_VAR 0 10
15637: PUSH
15638: LD_VAR 0 10
15642: PUSH
15643: LD_VAR 0 6
15647: PPUSH
15648: LD_INT 1
15650: PPUSH
15651: CALL_OW 259
15655: PUSH
15656: LD_REAL  1.15000000000000E+0000
15659: MUL
15660: MUL
15661: ST_TO_ADDR
// end ; unit_vehicle :
15662: GO 16490
15664: LD_INT 2
15666: DOUBLE
15667: EQUAL
15668: IFTRUE 15672
15670: GO 16478
15672: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15673: LD_VAR 0 6
15677: PPUSH
15678: CALL_OW 264
15682: PUSH
15683: LD_INT 2
15685: PUSH
15686: LD_INT 42
15688: PUSH
15689: LD_INT 24
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: LIST
15696: IN
15697: IFFALSE 15718
// points := [ 25 , 5 , 3 ] ;
15699: LD_ADDR_VAR 0 9
15703: PUSH
15704: LD_INT 25
15706: PUSH
15707: LD_INT 5
15709: PUSH
15710: LD_INT 3
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: LIST
15717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15718: LD_VAR 0 6
15722: PPUSH
15723: CALL_OW 264
15727: PUSH
15728: LD_INT 4
15730: PUSH
15731: LD_INT 43
15733: PUSH
15734: LD_INT 25
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: LIST
15741: IN
15742: IFFALSE 15763
// points := [ 40 , 15 , 5 ] ;
15744: LD_ADDR_VAR 0 9
15748: PUSH
15749: LD_INT 40
15751: PUSH
15752: LD_INT 15
15754: PUSH
15755: LD_INT 5
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15763: LD_VAR 0 6
15767: PPUSH
15768: CALL_OW 264
15772: PUSH
15773: LD_INT 3
15775: PUSH
15776: LD_INT 23
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: IN
15783: IFFALSE 15804
// points := [ 7 , 25 , 8 ] ;
15785: LD_ADDR_VAR 0 9
15789: PUSH
15790: LD_INT 7
15792: PUSH
15793: LD_INT 25
15795: PUSH
15796: LD_INT 8
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: LIST
15803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
15804: LD_VAR 0 6
15808: PPUSH
15809: CALL_OW 264
15813: PUSH
15814: LD_INT 5
15816: PUSH
15817: LD_INT 27
15819: PUSH
15820: LD_INT 44
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: LIST
15827: IN
15828: IFFALSE 15849
// points := [ 14 , 50 , 16 ] ;
15830: LD_ADDR_VAR 0 9
15834: PUSH
15835: LD_INT 14
15837: PUSH
15838: LD_INT 50
15840: PUSH
15841: LD_INT 16
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
15849: LD_VAR 0 6
15853: PPUSH
15854: CALL_OW 264
15858: PUSH
15859: LD_INT 6
15861: PUSH
15862: LD_INT 46
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: IN
15869: IFFALSE 15890
// points := [ 32 , 120 , 70 ] ;
15871: LD_ADDR_VAR 0 9
15875: PUSH
15876: LD_INT 32
15878: PUSH
15879: LD_INT 120
15881: PUSH
15882: LD_INT 70
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: LIST
15889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
15890: LD_VAR 0 6
15894: PPUSH
15895: CALL_OW 264
15899: PUSH
15900: LD_INT 7
15902: PUSH
15903: LD_INT 28
15905: PUSH
15906: LD_INT 45
15908: PUSH
15909: LD_INT 92
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: IN
15918: IFFALSE 15939
// points := [ 35 , 20 , 45 ] ;
15920: LD_ADDR_VAR 0 9
15924: PUSH
15925: LD_INT 35
15927: PUSH
15928: LD_INT 20
15930: PUSH
15931: LD_INT 45
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: LIST
15938: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
15939: LD_VAR 0 6
15943: PPUSH
15944: CALL_OW 264
15948: PUSH
15949: LD_INT 47
15951: PUSH
15952: EMPTY
15953: LIST
15954: IN
15955: IFFALSE 15976
// points := [ 67 , 45 , 75 ] ;
15957: LD_ADDR_VAR 0 9
15961: PUSH
15962: LD_INT 67
15964: PUSH
15965: LD_INT 45
15967: PUSH
15968: LD_INT 75
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
15976: LD_VAR 0 6
15980: PPUSH
15981: CALL_OW 264
15985: PUSH
15986: LD_INT 26
15988: PUSH
15989: EMPTY
15990: LIST
15991: IN
15992: IFFALSE 16013
// points := [ 120 , 30 , 80 ] ;
15994: LD_ADDR_VAR 0 9
15998: PUSH
15999: LD_INT 120
16001: PUSH
16002: LD_INT 30
16004: PUSH
16005: LD_INT 80
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: LIST
16012: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16013: LD_VAR 0 6
16017: PPUSH
16018: CALL_OW 264
16022: PUSH
16023: LD_INT 22
16025: PUSH
16026: EMPTY
16027: LIST
16028: IN
16029: IFFALSE 16050
// points := [ 40 , 1 , 1 ] ;
16031: LD_ADDR_VAR 0 9
16035: PUSH
16036: LD_INT 40
16038: PUSH
16039: LD_INT 1
16041: PUSH
16042: LD_INT 1
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: LIST
16049: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16050: LD_VAR 0 6
16054: PPUSH
16055: CALL_OW 264
16059: PUSH
16060: LD_INT 29
16062: PUSH
16063: EMPTY
16064: LIST
16065: IN
16066: IFFALSE 16087
// points := [ 70 , 200 , 400 ] ;
16068: LD_ADDR_VAR 0 9
16072: PUSH
16073: LD_INT 70
16075: PUSH
16076: LD_INT 200
16078: PUSH
16079: LD_INT 400
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: LIST
16086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16087: LD_VAR 0 6
16091: PPUSH
16092: CALL_OW 264
16096: PUSH
16097: LD_INT 14
16099: PUSH
16100: LD_INT 53
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: IN
16107: IFFALSE 16128
// points := [ 40 , 10 , 20 ] ;
16109: LD_ADDR_VAR 0 9
16113: PUSH
16114: LD_INT 40
16116: PUSH
16117: LD_INT 10
16119: PUSH
16120: LD_INT 20
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: LIST
16127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16128: LD_VAR 0 6
16132: PPUSH
16133: CALL_OW 264
16137: PUSH
16138: LD_INT 9
16140: PUSH
16141: EMPTY
16142: LIST
16143: IN
16144: IFFALSE 16165
// points := [ 5 , 70 , 20 ] ;
16146: LD_ADDR_VAR 0 9
16150: PUSH
16151: LD_INT 5
16153: PUSH
16154: LD_INT 70
16156: PUSH
16157: LD_INT 20
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: LIST
16164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16165: LD_VAR 0 6
16169: PPUSH
16170: CALL_OW 264
16174: PUSH
16175: LD_INT 10
16177: PUSH
16178: EMPTY
16179: LIST
16180: IN
16181: IFFALSE 16202
// points := [ 35 , 110 , 70 ] ;
16183: LD_ADDR_VAR 0 9
16187: PUSH
16188: LD_INT 35
16190: PUSH
16191: LD_INT 110
16193: PUSH
16194: LD_INT 70
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: LIST
16201: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16202: LD_VAR 0 6
16206: PPUSH
16207: CALL_OW 265
16211: PUSH
16212: LD_INT 25
16214: EQUAL
16215: IFFALSE 16236
// points := [ 80 , 65 , 100 ] ;
16217: LD_ADDR_VAR 0 9
16221: PUSH
16222: LD_INT 80
16224: PUSH
16225: LD_INT 65
16227: PUSH
16228: LD_INT 100
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: LIST
16235: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16236: LD_VAR 0 6
16240: PPUSH
16241: CALL_OW 263
16245: PUSH
16246: LD_INT 1
16248: EQUAL
16249: IFFALSE 16284
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16251: LD_ADDR_VAR 0 10
16255: PUSH
16256: LD_VAR 0 10
16260: PUSH
16261: LD_VAR 0 6
16265: PPUSH
16266: CALL_OW 311
16270: PPUSH
16271: LD_INT 3
16273: PPUSH
16274: CALL_OW 259
16278: PUSH
16279: LD_INT 4
16281: MUL
16282: MUL
16283: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16284: LD_VAR 0 6
16288: PPUSH
16289: CALL_OW 263
16293: PUSH
16294: LD_INT 2
16296: EQUAL
16297: IFFALSE 16348
// begin j := IsControledBy ( i ) ;
16299: LD_ADDR_VAR 0 7
16303: PUSH
16304: LD_VAR 0 6
16308: PPUSH
16309: CALL_OW 312
16313: ST_TO_ADDR
// if j then
16314: LD_VAR 0 7
16318: IFFALSE 16348
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16320: LD_ADDR_VAR 0 10
16324: PUSH
16325: LD_VAR 0 10
16329: PUSH
16330: LD_VAR 0 7
16334: PPUSH
16335: LD_INT 3
16337: PPUSH
16338: CALL_OW 259
16342: PUSH
16343: LD_INT 3
16345: MUL
16346: MUL
16347: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16348: LD_VAR 0 6
16352: PPUSH
16353: CALL_OW 264
16357: PUSH
16358: LD_INT 5
16360: PUSH
16361: LD_INT 6
16363: PUSH
16364: LD_INT 46
16366: PUSH
16367: LD_INT 44
16369: PUSH
16370: LD_INT 47
16372: PUSH
16373: LD_INT 45
16375: PUSH
16376: LD_INT 28
16378: PUSH
16379: LD_INT 7
16381: PUSH
16382: LD_INT 27
16384: PUSH
16385: LD_INT 29
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: IN
16400: PUSH
16401: LD_VAR 0 1
16405: PPUSH
16406: LD_INT 52
16408: PPUSH
16409: CALL_OW 321
16413: PUSH
16414: LD_INT 2
16416: EQUAL
16417: AND
16418: IFFALSE 16435
// bpoints := bpoints * 1.2 ;
16420: LD_ADDR_VAR 0 10
16424: PUSH
16425: LD_VAR 0 10
16429: PUSH
16430: LD_REAL  1.20000000000000E+0000
16433: MUL
16434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16435: LD_VAR 0 6
16439: PPUSH
16440: CALL_OW 264
16444: PUSH
16445: LD_INT 6
16447: PUSH
16448: LD_INT 46
16450: PUSH
16451: LD_INT 47
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: IN
16459: IFFALSE 16476
// bpoints := bpoints * 1.2 ;
16461: LD_ADDR_VAR 0 10
16465: PUSH
16466: LD_VAR 0 10
16470: PUSH
16471: LD_REAL  1.20000000000000E+0000
16474: MUL
16475: ST_TO_ADDR
// end ; unit_building :
16476: GO 16490
16478: LD_INT 3
16480: DOUBLE
16481: EQUAL
16482: IFTRUE 16486
16484: GO 16489
16486: POP
// ; end ;
16487: GO 16490
16489: POP
// for j = 1 to 3 do
16490: LD_ADDR_VAR 0 7
16494: PUSH
16495: DOUBLE
16496: LD_INT 1
16498: DEC
16499: ST_TO_ADDR
16500: LD_INT 3
16502: PUSH
16503: FOR_TO
16504: IFFALSE 16557
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16506: LD_ADDR_VAR 0 5
16510: PUSH
16511: LD_VAR 0 5
16515: PPUSH
16516: LD_VAR 0 7
16520: PPUSH
16521: LD_VAR 0 5
16525: PUSH
16526: LD_VAR 0 7
16530: ARRAY
16531: PUSH
16532: LD_VAR 0 9
16536: PUSH
16537: LD_VAR 0 7
16541: ARRAY
16542: PUSH
16543: LD_VAR 0 10
16547: MUL
16548: PLUS
16549: PPUSH
16550: CALL_OW 1
16554: ST_TO_ADDR
16555: GO 16503
16557: POP
16558: POP
// end ;
16559: GO 15038
16561: POP
16562: POP
// result := Replace ( result , 4 , tmp ) ;
16563: LD_ADDR_VAR 0 5
16567: PUSH
16568: LD_VAR 0 5
16572: PPUSH
16573: LD_INT 4
16575: PPUSH
16576: LD_VAR 0 8
16580: PPUSH
16581: CALL_OW 1
16585: ST_TO_ADDR
// end ;
16586: LD_VAR 0 5
16590: RET
// export function DangerAtRange ( unit , range ) ; begin
16591: LD_INT 0
16593: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16594: LD_ADDR_VAR 0 3
16598: PUSH
16599: LD_VAR 0 1
16603: PPUSH
16604: CALL_OW 255
16608: PPUSH
16609: LD_VAR 0 1
16613: PPUSH
16614: CALL_OW 250
16618: PPUSH
16619: LD_VAR 0 1
16623: PPUSH
16624: CALL_OW 251
16628: PPUSH
16629: LD_VAR 0 2
16633: PPUSH
16634: CALL 14890 0 4
16638: ST_TO_ADDR
// end ;
16639: LD_VAR 0 3
16643: RET
// export function DangerInArea ( side , area ) ; begin
16644: LD_INT 0
16646: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16647: LD_ADDR_VAR 0 3
16651: PUSH
16652: LD_VAR 0 2
16656: PPUSH
16657: LD_INT 81
16659: PUSH
16660: LD_VAR 0 1
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PPUSH
16669: CALL_OW 70
16673: ST_TO_ADDR
// end ;
16674: LD_VAR 0 3
16678: RET
// export function IsExtension ( b ) ; begin
16679: LD_INT 0
16681: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16682: LD_ADDR_VAR 0 2
16686: PUSH
16687: LD_VAR 0 1
16691: PUSH
16692: LD_INT 23
16694: PUSH
16695: LD_INT 20
16697: PUSH
16698: LD_INT 22
16700: PUSH
16701: LD_INT 17
16703: PUSH
16704: LD_INT 24
16706: PUSH
16707: LD_INT 21
16709: PUSH
16710: LD_INT 19
16712: PUSH
16713: LD_INT 16
16715: PUSH
16716: LD_INT 25
16718: PUSH
16719: LD_INT 18
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: IN
16734: ST_TO_ADDR
// end ;
16735: LD_VAR 0 2
16739: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
16740: LD_INT 0
16742: PPUSH
16743: PPUSH
16744: PPUSH
// result := [ ] ;
16745: LD_ADDR_VAR 0 4
16749: PUSH
16750: EMPTY
16751: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16752: LD_ADDR_VAR 0 5
16756: PUSH
16757: LD_VAR 0 2
16761: PPUSH
16762: LD_INT 21
16764: PUSH
16765: LD_INT 3
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PPUSH
16772: CALL_OW 70
16776: ST_TO_ADDR
// if not tmp then
16777: LD_VAR 0 5
16781: NOT
16782: IFFALSE 16786
// exit ;
16784: GO 16850
// if checkLink then
16786: LD_VAR 0 3
16790: IFFALSE 16840
// begin for i in tmp do
16792: LD_ADDR_VAR 0 6
16796: PUSH
16797: LD_VAR 0 5
16801: PUSH
16802: FOR_IN
16803: IFFALSE 16838
// if GetBase ( i ) <> base then
16805: LD_VAR 0 6
16809: PPUSH
16810: CALL_OW 274
16814: PUSH
16815: LD_VAR 0 1
16819: NONEQUAL
16820: IFFALSE 16836
// ComLinkToBase ( base , i ) ;
16822: LD_VAR 0 1
16826: PPUSH
16827: LD_VAR 0 6
16831: PPUSH
16832: CALL_OW 169
16836: GO 16802
16838: POP
16839: POP
// end ; result := tmp ;
16840: LD_ADDR_VAR 0 4
16844: PUSH
16845: LD_VAR 0 5
16849: ST_TO_ADDR
// end ;
16850: LD_VAR 0 4
16854: RET
// export function ComComplete ( units , b ) ; var i ; begin
16855: LD_INT 0
16857: PPUSH
16858: PPUSH
// if not units then
16859: LD_VAR 0 1
16863: NOT
16864: IFFALSE 16868
// exit ;
16866: GO 16958
// for i in units do
16868: LD_ADDR_VAR 0 4
16872: PUSH
16873: LD_VAR 0 1
16877: PUSH
16878: FOR_IN
16879: IFFALSE 16956
// if BuildingStatus ( b ) = bs_build then
16881: LD_VAR 0 2
16885: PPUSH
16886: CALL_OW 461
16890: PUSH
16891: LD_INT 1
16893: EQUAL
16894: IFFALSE 16954
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
16896: LD_VAR 0 4
16900: PPUSH
16901: LD_STRING h
16903: PUSH
16904: LD_VAR 0 2
16908: PPUSH
16909: CALL_OW 250
16913: PUSH
16914: LD_VAR 0 2
16918: PPUSH
16919: CALL_OW 251
16923: PUSH
16924: LD_VAR 0 2
16928: PUSH
16929: LD_INT 0
16931: PUSH
16932: LD_INT 0
16934: PUSH
16935: LD_INT 0
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: PUSH
16947: EMPTY
16948: LIST
16949: PPUSH
16950: CALL_OW 446
16954: GO 16878
16956: POP
16957: POP
// end ;
16958: LD_VAR 0 3
16962: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
16963: LD_INT 0
16965: PPUSH
16966: PPUSH
16967: PPUSH
16968: PPUSH
16969: PPUSH
16970: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
16971: LD_VAR 0 1
16975: NOT
16976: PUSH
16977: LD_VAR 0 1
16981: PPUSH
16982: CALL_OW 263
16986: PUSH
16987: LD_INT 2
16989: NONEQUAL
16990: OR
16991: IFFALSE 16995
// exit ;
16993: GO 17311
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16995: LD_ADDR_VAR 0 6
16999: PUSH
17000: LD_INT 22
17002: PUSH
17003: LD_VAR 0 1
17007: PPUSH
17008: CALL_OW 255
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 2
17019: PUSH
17020: LD_INT 30
17022: PUSH
17023: LD_INT 36
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 34
17032: PUSH
17033: LD_INT 31
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PPUSH
17049: CALL_OW 69
17053: ST_TO_ADDR
// if not tmp then
17054: LD_VAR 0 6
17058: NOT
17059: IFFALSE 17063
// exit ;
17061: GO 17311
// result := [ ] ;
17063: LD_ADDR_VAR 0 2
17067: PUSH
17068: EMPTY
17069: ST_TO_ADDR
// for i in tmp do
17070: LD_ADDR_VAR 0 3
17074: PUSH
17075: LD_VAR 0 6
17079: PUSH
17080: FOR_IN
17081: IFFALSE 17152
// begin t := UnitsInside ( i ) ;
17083: LD_ADDR_VAR 0 4
17087: PUSH
17088: LD_VAR 0 3
17092: PPUSH
17093: CALL_OW 313
17097: ST_TO_ADDR
// if t then
17098: LD_VAR 0 4
17102: IFFALSE 17150
// for j in t do
17104: LD_ADDR_VAR 0 7
17108: PUSH
17109: LD_VAR 0 4
17113: PUSH
17114: FOR_IN
17115: IFFALSE 17148
// result := Replace ( result , result + 1 , j ) ;
17117: LD_ADDR_VAR 0 2
17121: PUSH
17122: LD_VAR 0 2
17126: PPUSH
17127: LD_VAR 0 2
17131: PUSH
17132: LD_INT 1
17134: PLUS
17135: PPUSH
17136: LD_VAR 0 7
17140: PPUSH
17141: CALL_OW 1
17145: ST_TO_ADDR
17146: GO 17114
17148: POP
17149: POP
// end ;
17150: GO 17080
17152: POP
17153: POP
// if not result then
17154: LD_VAR 0 2
17158: NOT
17159: IFFALSE 17163
// exit ;
17161: GO 17311
// mech := result [ 1 ] ;
17163: LD_ADDR_VAR 0 5
17167: PUSH
17168: LD_VAR 0 2
17172: PUSH
17173: LD_INT 1
17175: ARRAY
17176: ST_TO_ADDR
// if result > 1 then
17177: LD_VAR 0 2
17181: PUSH
17182: LD_INT 1
17184: GREATER
17185: IFFALSE 17297
// begin for i = 2 to result do
17187: LD_ADDR_VAR 0 3
17191: PUSH
17192: DOUBLE
17193: LD_INT 2
17195: DEC
17196: ST_TO_ADDR
17197: LD_VAR 0 2
17201: PUSH
17202: FOR_TO
17203: IFFALSE 17295
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17205: LD_ADDR_VAR 0 4
17209: PUSH
17210: LD_VAR 0 2
17214: PUSH
17215: LD_VAR 0 3
17219: ARRAY
17220: PPUSH
17221: LD_INT 3
17223: PPUSH
17224: CALL_OW 259
17228: PUSH
17229: LD_VAR 0 2
17233: PUSH
17234: LD_VAR 0 3
17238: ARRAY
17239: PPUSH
17240: CALL_OW 432
17244: MINUS
17245: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17246: LD_VAR 0 4
17250: PUSH
17251: LD_VAR 0 5
17255: PPUSH
17256: LD_INT 3
17258: PPUSH
17259: CALL_OW 259
17263: PUSH
17264: LD_VAR 0 5
17268: PPUSH
17269: CALL_OW 432
17273: MINUS
17274: GREATEREQUAL
17275: IFFALSE 17293
// mech := result [ i ] ;
17277: LD_ADDR_VAR 0 5
17281: PUSH
17282: LD_VAR 0 2
17286: PUSH
17287: LD_VAR 0 3
17291: ARRAY
17292: ST_TO_ADDR
// end ;
17293: GO 17202
17295: POP
17296: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17297: LD_VAR 0 1
17301: PPUSH
17302: LD_VAR 0 5
17306: PPUSH
17307: CALL_OW 135
// end ;
17311: LD_VAR 0 2
17315: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17316: LD_INT 0
17318: PPUSH
17319: PPUSH
17320: PPUSH
17321: PPUSH
17322: PPUSH
17323: PPUSH
17324: PPUSH
17325: PPUSH
17326: PPUSH
17327: PPUSH
17328: PPUSH
17329: PPUSH
17330: PPUSH
// result := [ ] ;
17331: LD_ADDR_VAR 0 7
17335: PUSH
17336: EMPTY
17337: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17338: LD_VAR 0 1
17342: PPUSH
17343: CALL_OW 266
17347: PUSH
17348: LD_INT 0
17350: PUSH
17351: LD_INT 1
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: IN
17358: NOT
17359: IFFALSE 17363
// exit ;
17361: GO 18997
// if name then
17363: LD_VAR 0 3
17367: IFFALSE 17383
// SetBName ( base_dep , name ) ;
17369: LD_VAR 0 1
17373: PPUSH
17374: LD_VAR 0 3
17378: PPUSH
17379: CALL_OW 500
// base := GetBase ( base_dep ) ;
17383: LD_ADDR_VAR 0 15
17387: PUSH
17388: LD_VAR 0 1
17392: PPUSH
17393: CALL_OW 274
17397: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17398: LD_ADDR_VAR 0 16
17402: PUSH
17403: LD_VAR 0 1
17407: PPUSH
17408: CALL_OW 255
17412: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17413: LD_ADDR_VAR 0 17
17417: PUSH
17418: LD_VAR 0 1
17422: PPUSH
17423: CALL_OW 248
17427: ST_TO_ADDR
// if sources then
17428: LD_VAR 0 5
17432: IFFALSE 17479
// for i = 1 to 3 do
17434: LD_ADDR_VAR 0 8
17438: PUSH
17439: DOUBLE
17440: LD_INT 1
17442: DEC
17443: ST_TO_ADDR
17444: LD_INT 3
17446: PUSH
17447: FOR_TO
17448: IFFALSE 17477
// AddResourceType ( base , i , sources [ i ] ) ;
17450: LD_VAR 0 15
17454: PPUSH
17455: LD_VAR 0 8
17459: PPUSH
17460: LD_VAR 0 5
17464: PUSH
17465: LD_VAR 0 8
17469: ARRAY
17470: PPUSH
17471: CALL_OW 276
17475: GO 17447
17477: POP
17478: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17479: LD_ADDR_VAR 0 18
17483: PUSH
17484: LD_VAR 0 15
17488: PPUSH
17489: LD_VAR 0 2
17493: PPUSH
17494: LD_INT 1
17496: PPUSH
17497: CALL 16740 0 3
17501: ST_TO_ADDR
// InitHc ;
17502: CALL_OW 19
// InitUc ;
17506: CALL_OW 18
// uc_side := side ;
17510: LD_ADDR_OWVAR 20
17514: PUSH
17515: LD_VAR 0 16
17519: ST_TO_ADDR
// uc_nation := nation ;
17520: LD_ADDR_OWVAR 21
17524: PUSH
17525: LD_VAR 0 17
17529: ST_TO_ADDR
// if buildings then
17530: LD_VAR 0 18
17534: IFFALSE 18856
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17536: LD_ADDR_VAR 0 19
17540: PUSH
17541: LD_VAR 0 18
17545: PPUSH
17546: LD_INT 2
17548: PUSH
17549: LD_INT 30
17551: PUSH
17552: LD_INT 29
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 30
17561: PUSH
17562: LD_INT 30
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: LIST
17573: PPUSH
17574: CALL_OW 72
17578: ST_TO_ADDR
// if tmp then
17579: LD_VAR 0 19
17583: IFFALSE 17631
// for i in tmp do
17585: LD_ADDR_VAR 0 8
17589: PUSH
17590: LD_VAR 0 19
17594: PUSH
17595: FOR_IN
17596: IFFALSE 17629
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17598: LD_VAR 0 8
17602: PPUSH
17603: CALL_OW 250
17607: PPUSH
17608: LD_VAR 0 8
17612: PPUSH
17613: CALL_OW 251
17617: PPUSH
17618: LD_VAR 0 16
17622: PPUSH
17623: CALL_OW 441
17627: GO 17595
17629: POP
17630: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17631: LD_VAR 0 18
17635: PPUSH
17636: LD_INT 2
17638: PUSH
17639: LD_INT 30
17641: PUSH
17642: LD_INT 32
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 30
17651: PUSH
17652: LD_INT 33
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: LIST
17663: PPUSH
17664: CALL_OW 72
17668: IFFALSE 17756
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17670: LD_ADDR_VAR 0 8
17674: PUSH
17675: LD_VAR 0 18
17679: PPUSH
17680: LD_INT 2
17682: PUSH
17683: LD_INT 30
17685: PUSH
17686: LD_INT 32
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 30
17695: PUSH
17696: LD_INT 33
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: LIST
17707: PPUSH
17708: CALL_OW 72
17712: PUSH
17713: FOR_IN
17714: IFFALSE 17754
// begin if not GetBWeapon ( i ) then
17716: LD_VAR 0 8
17720: PPUSH
17721: CALL_OW 269
17725: NOT
17726: IFFALSE 17752
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17728: LD_VAR 0 8
17732: PPUSH
17733: LD_VAR 0 8
17737: PPUSH
17738: LD_VAR 0 2
17742: PPUSH
17743: CALL 19002 0 2
17747: PPUSH
17748: CALL_OW 431
// end ;
17752: GO 17713
17754: POP
17755: POP
// end ; for i = 1 to personel do
17756: LD_ADDR_VAR 0 8
17760: PUSH
17761: DOUBLE
17762: LD_INT 1
17764: DEC
17765: ST_TO_ADDR
17766: LD_VAR 0 6
17770: PUSH
17771: FOR_TO
17772: IFFALSE 18836
// begin if i > 4 then
17774: LD_VAR 0 8
17778: PUSH
17779: LD_INT 4
17781: GREATER
17782: IFFALSE 17786
// break ;
17784: GO 18836
// case i of 1 :
17786: LD_VAR 0 8
17790: PUSH
17791: LD_INT 1
17793: DOUBLE
17794: EQUAL
17795: IFTRUE 17799
17797: GO 17879
17799: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
17800: LD_ADDR_VAR 0 12
17804: PUSH
17805: LD_VAR 0 18
17809: PPUSH
17810: LD_INT 22
17812: PUSH
17813: LD_VAR 0 16
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 58
17824: PUSH
17825: EMPTY
17826: LIST
17827: PUSH
17828: LD_INT 2
17830: PUSH
17831: LD_INT 30
17833: PUSH
17834: LD_INT 32
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 30
17843: PUSH
17844: LD_INT 4
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 30
17853: PUSH
17854: LD_INT 5
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: LIST
17871: PPUSH
17872: CALL_OW 72
17876: ST_TO_ADDR
17877: GO 18101
17879: LD_INT 2
17881: DOUBLE
17882: EQUAL
17883: IFTRUE 17887
17885: GO 17949
17887: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
17888: LD_ADDR_VAR 0 12
17892: PUSH
17893: LD_VAR 0 18
17897: PPUSH
17898: LD_INT 22
17900: PUSH
17901: LD_VAR 0 16
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 2
17912: PUSH
17913: LD_INT 30
17915: PUSH
17916: LD_INT 0
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 30
17925: PUSH
17926: LD_INT 1
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: LIST
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PPUSH
17942: CALL_OW 72
17946: ST_TO_ADDR
17947: GO 18101
17949: LD_INT 3
17951: DOUBLE
17952: EQUAL
17953: IFTRUE 17957
17955: GO 18019
17957: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
17958: LD_ADDR_VAR 0 12
17962: PUSH
17963: LD_VAR 0 18
17967: PPUSH
17968: LD_INT 22
17970: PUSH
17971: LD_VAR 0 16
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 2
17982: PUSH
17983: LD_INT 30
17985: PUSH
17986: LD_INT 2
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 30
17995: PUSH
17996: LD_INT 3
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: LIST
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PPUSH
18012: CALL_OW 72
18016: ST_TO_ADDR
18017: GO 18101
18019: LD_INT 4
18021: DOUBLE
18022: EQUAL
18023: IFTRUE 18027
18025: GO 18100
18027: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18028: LD_ADDR_VAR 0 12
18032: PUSH
18033: LD_VAR 0 18
18037: PPUSH
18038: LD_INT 22
18040: PUSH
18041: LD_VAR 0 16
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 2
18052: PUSH
18053: LD_INT 30
18055: PUSH
18056: LD_INT 6
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 30
18065: PUSH
18066: LD_INT 7
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 30
18075: PUSH
18076: LD_INT 8
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PPUSH
18093: CALL_OW 72
18097: ST_TO_ADDR
18098: GO 18101
18100: POP
// if i = 1 then
18101: LD_VAR 0 8
18105: PUSH
18106: LD_INT 1
18108: EQUAL
18109: IFFALSE 18220
// begin tmp := [ ] ;
18111: LD_ADDR_VAR 0 19
18115: PUSH
18116: EMPTY
18117: ST_TO_ADDR
// for j in f do
18118: LD_ADDR_VAR 0 9
18122: PUSH
18123: LD_VAR 0 12
18127: PUSH
18128: FOR_IN
18129: IFFALSE 18202
// if GetBType ( j ) = b_bunker then
18131: LD_VAR 0 9
18135: PPUSH
18136: CALL_OW 266
18140: PUSH
18141: LD_INT 32
18143: EQUAL
18144: IFFALSE 18171
// tmp := Insert ( tmp , 1 , j ) else
18146: LD_ADDR_VAR 0 19
18150: PUSH
18151: LD_VAR 0 19
18155: PPUSH
18156: LD_INT 1
18158: PPUSH
18159: LD_VAR 0 9
18163: PPUSH
18164: CALL_OW 2
18168: ST_TO_ADDR
18169: GO 18200
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18171: LD_ADDR_VAR 0 19
18175: PUSH
18176: LD_VAR 0 19
18180: PPUSH
18181: LD_VAR 0 19
18185: PUSH
18186: LD_INT 1
18188: PLUS
18189: PPUSH
18190: LD_VAR 0 9
18194: PPUSH
18195: CALL_OW 2
18199: ST_TO_ADDR
18200: GO 18128
18202: POP
18203: POP
// if tmp then
18204: LD_VAR 0 19
18208: IFFALSE 18220
// f := tmp ;
18210: LD_ADDR_VAR 0 12
18214: PUSH
18215: LD_VAR 0 19
18219: ST_TO_ADDR
// end ; x := personel [ i ] ;
18220: LD_ADDR_VAR 0 13
18224: PUSH
18225: LD_VAR 0 6
18229: PUSH
18230: LD_VAR 0 8
18234: ARRAY
18235: ST_TO_ADDR
// if x = - 1 then
18236: LD_VAR 0 13
18240: PUSH
18241: LD_INT 1
18243: NEG
18244: EQUAL
18245: IFFALSE 18454
// begin for j in f do
18247: LD_ADDR_VAR 0 9
18251: PUSH
18252: LD_VAR 0 12
18256: PUSH
18257: FOR_IN
18258: IFFALSE 18450
// repeat InitHc ;
18260: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18264: LD_VAR 0 9
18268: PPUSH
18269: CALL_OW 266
18273: PUSH
18274: LD_INT 5
18276: EQUAL
18277: IFFALSE 18347
// begin if UnitsInside ( j ) < 3 then
18279: LD_VAR 0 9
18283: PPUSH
18284: CALL_OW 313
18288: PUSH
18289: LD_INT 3
18291: LESS
18292: IFFALSE 18328
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18294: LD_INT 0
18296: PPUSH
18297: LD_INT 5
18299: PUSH
18300: LD_INT 8
18302: PUSH
18303: LD_INT 9
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: LIST
18310: PUSH
18311: LD_VAR 0 17
18315: ARRAY
18316: PPUSH
18317: LD_VAR 0 4
18321: PPUSH
18322: CALL_OW 380
18326: GO 18345
// PrepareHuman ( false , i , skill ) ;
18328: LD_INT 0
18330: PPUSH
18331: LD_VAR 0 8
18335: PPUSH
18336: LD_VAR 0 4
18340: PPUSH
18341: CALL_OW 380
// end else
18345: GO 18364
// PrepareHuman ( false , i , skill ) ;
18347: LD_INT 0
18349: PPUSH
18350: LD_VAR 0 8
18354: PPUSH
18355: LD_VAR 0 4
18359: PPUSH
18360: CALL_OW 380
// un := CreateHuman ;
18364: LD_ADDR_VAR 0 14
18368: PUSH
18369: CALL_OW 44
18373: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18374: LD_ADDR_VAR 0 7
18378: PUSH
18379: LD_VAR 0 7
18383: PPUSH
18384: LD_INT 1
18386: PPUSH
18387: LD_VAR 0 14
18391: PPUSH
18392: CALL_OW 2
18396: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18397: LD_VAR 0 14
18401: PPUSH
18402: LD_VAR 0 9
18406: PPUSH
18407: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18411: LD_VAR 0 9
18415: PPUSH
18416: CALL_OW 313
18420: PUSH
18421: LD_INT 6
18423: EQUAL
18424: PUSH
18425: LD_VAR 0 9
18429: PPUSH
18430: CALL_OW 266
18434: PUSH
18435: LD_INT 32
18437: PUSH
18438: LD_INT 31
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: IN
18445: OR
18446: IFFALSE 18260
18448: GO 18257
18450: POP
18451: POP
// end else
18452: GO 18834
// for j = 1 to x do
18454: LD_ADDR_VAR 0 9
18458: PUSH
18459: DOUBLE
18460: LD_INT 1
18462: DEC
18463: ST_TO_ADDR
18464: LD_VAR 0 13
18468: PUSH
18469: FOR_TO
18470: IFFALSE 18832
// begin InitHc ;
18472: CALL_OW 19
// if not f then
18476: LD_VAR 0 12
18480: NOT
18481: IFFALSE 18570
// begin PrepareHuman ( false , i , skill ) ;
18483: LD_INT 0
18485: PPUSH
18486: LD_VAR 0 8
18490: PPUSH
18491: LD_VAR 0 4
18495: PPUSH
18496: CALL_OW 380
// un := CreateHuman ;
18500: LD_ADDR_VAR 0 14
18504: PUSH
18505: CALL_OW 44
18509: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18510: LD_ADDR_VAR 0 7
18514: PUSH
18515: LD_VAR 0 7
18519: PPUSH
18520: LD_INT 1
18522: PPUSH
18523: LD_VAR 0 14
18527: PPUSH
18528: CALL_OW 2
18532: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18533: LD_VAR 0 14
18537: PPUSH
18538: LD_VAR 0 1
18542: PPUSH
18543: CALL_OW 250
18547: PPUSH
18548: LD_VAR 0 1
18552: PPUSH
18553: CALL_OW 251
18557: PPUSH
18558: LD_INT 10
18560: PPUSH
18561: LD_INT 0
18563: PPUSH
18564: CALL_OW 50
// continue ;
18568: GO 18469
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18570: LD_VAR 0 12
18574: PUSH
18575: LD_INT 1
18577: ARRAY
18578: PPUSH
18579: CALL_OW 313
18583: PUSH
18584: LD_VAR 0 12
18588: PUSH
18589: LD_INT 1
18591: ARRAY
18592: PPUSH
18593: CALL_OW 266
18597: PUSH
18598: LD_INT 32
18600: PUSH
18601: LD_INT 31
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: IN
18608: AND
18609: PUSH
18610: LD_VAR 0 12
18614: PUSH
18615: LD_INT 1
18617: ARRAY
18618: PPUSH
18619: CALL_OW 313
18623: PUSH
18624: LD_INT 6
18626: EQUAL
18627: OR
18628: IFFALSE 18648
// f := Delete ( f , 1 ) ;
18630: LD_ADDR_VAR 0 12
18634: PUSH
18635: LD_VAR 0 12
18639: PPUSH
18640: LD_INT 1
18642: PPUSH
18643: CALL_OW 3
18647: ST_TO_ADDR
// if not f then
18648: LD_VAR 0 12
18652: NOT
18653: IFFALSE 18671
// begin x := x + 2 ;
18655: LD_ADDR_VAR 0 13
18659: PUSH
18660: LD_VAR 0 13
18664: PUSH
18665: LD_INT 2
18667: PLUS
18668: ST_TO_ADDR
// continue ;
18669: GO 18469
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18671: LD_VAR 0 12
18675: PUSH
18676: LD_INT 1
18678: ARRAY
18679: PPUSH
18680: CALL_OW 266
18684: PUSH
18685: LD_INT 5
18687: EQUAL
18688: IFFALSE 18762
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18690: LD_VAR 0 12
18694: PUSH
18695: LD_INT 1
18697: ARRAY
18698: PPUSH
18699: CALL_OW 313
18703: PUSH
18704: LD_INT 3
18706: LESS
18707: IFFALSE 18743
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18709: LD_INT 0
18711: PPUSH
18712: LD_INT 5
18714: PUSH
18715: LD_INT 8
18717: PUSH
18718: LD_INT 9
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: LIST
18725: PUSH
18726: LD_VAR 0 17
18730: ARRAY
18731: PPUSH
18732: LD_VAR 0 4
18736: PPUSH
18737: CALL_OW 380
18741: GO 18760
// PrepareHuman ( false , i , skill ) ;
18743: LD_INT 0
18745: PPUSH
18746: LD_VAR 0 8
18750: PPUSH
18751: LD_VAR 0 4
18755: PPUSH
18756: CALL_OW 380
// end else
18760: GO 18779
// PrepareHuman ( false , i , skill ) ;
18762: LD_INT 0
18764: PPUSH
18765: LD_VAR 0 8
18769: PPUSH
18770: LD_VAR 0 4
18774: PPUSH
18775: CALL_OW 380
// un := CreateHuman ;
18779: LD_ADDR_VAR 0 14
18783: PUSH
18784: CALL_OW 44
18788: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18789: LD_ADDR_VAR 0 7
18793: PUSH
18794: LD_VAR 0 7
18798: PPUSH
18799: LD_INT 1
18801: PPUSH
18802: LD_VAR 0 14
18806: PPUSH
18807: CALL_OW 2
18811: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
18812: LD_VAR 0 14
18816: PPUSH
18817: LD_VAR 0 12
18821: PUSH
18822: LD_INT 1
18824: ARRAY
18825: PPUSH
18826: CALL_OW 52
// end ;
18830: GO 18469
18832: POP
18833: POP
// end ;
18834: GO 17771
18836: POP
18837: POP
// result := result ^ buildings ;
18838: LD_ADDR_VAR 0 7
18842: PUSH
18843: LD_VAR 0 7
18847: PUSH
18848: LD_VAR 0 18
18852: ADD
18853: ST_TO_ADDR
// end else
18854: GO 18997
// begin for i = 1 to personel do
18856: LD_ADDR_VAR 0 8
18860: PUSH
18861: DOUBLE
18862: LD_INT 1
18864: DEC
18865: ST_TO_ADDR
18866: LD_VAR 0 6
18870: PUSH
18871: FOR_TO
18872: IFFALSE 18995
// begin if i > 4 then
18874: LD_VAR 0 8
18878: PUSH
18879: LD_INT 4
18881: GREATER
18882: IFFALSE 18886
// break ;
18884: GO 18995
// x := personel [ i ] ;
18886: LD_ADDR_VAR 0 13
18890: PUSH
18891: LD_VAR 0 6
18895: PUSH
18896: LD_VAR 0 8
18900: ARRAY
18901: ST_TO_ADDR
// if x = - 1 then
18902: LD_VAR 0 13
18906: PUSH
18907: LD_INT 1
18909: NEG
18910: EQUAL
18911: IFFALSE 18915
// continue ;
18913: GO 18871
// PrepareHuman ( false , i , skill ) ;
18915: LD_INT 0
18917: PPUSH
18918: LD_VAR 0 8
18922: PPUSH
18923: LD_VAR 0 4
18927: PPUSH
18928: CALL_OW 380
// un := CreateHuman ;
18932: LD_ADDR_VAR 0 14
18936: PUSH
18937: CALL_OW 44
18941: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18942: LD_VAR 0 14
18946: PPUSH
18947: LD_VAR 0 1
18951: PPUSH
18952: CALL_OW 250
18956: PPUSH
18957: LD_VAR 0 1
18961: PPUSH
18962: CALL_OW 251
18966: PPUSH
18967: LD_INT 10
18969: PPUSH
18970: LD_INT 0
18972: PPUSH
18973: CALL_OW 50
// result := result ^ un ;
18977: LD_ADDR_VAR 0 7
18981: PUSH
18982: LD_VAR 0 7
18986: PUSH
18987: LD_VAR 0 14
18991: ADD
18992: ST_TO_ADDR
// end ;
18993: GO 18871
18995: POP
18996: POP
// end ; end ;
18997: LD_VAR 0 7
19001: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19002: LD_INT 0
19004: PPUSH
19005: PPUSH
19006: PPUSH
19007: PPUSH
19008: PPUSH
19009: PPUSH
19010: PPUSH
19011: PPUSH
19012: PPUSH
19013: PPUSH
19014: PPUSH
19015: PPUSH
19016: PPUSH
19017: PPUSH
19018: PPUSH
19019: PPUSH
// result := false ;
19020: LD_ADDR_VAR 0 3
19024: PUSH
19025: LD_INT 0
19027: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19028: LD_VAR 0 1
19032: NOT
19033: PUSH
19034: LD_VAR 0 1
19038: PPUSH
19039: CALL_OW 266
19043: PUSH
19044: LD_INT 32
19046: PUSH
19047: LD_INT 33
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: IN
19054: NOT
19055: OR
19056: IFFALSE 19060
// exit ;
19058: GO 20169
// nat := GetNation ( tower ) ;
19060: LD_ADDR_VAR 0 12
19064: PUSH
19065: LD_VAR 0 1
19069: PPUSH
19070: CALL_OW 248
19074: ST_TO_ADDR
// side := GetSide ( tower ) ;
19075: LD_ADDR_VAR 0 16
19079: PUSH
19080: LD_VAR 0 1
19084: PPUSH
19085: CALL_OW 255
19089: ST_TO_ADDR
// x := GetX ( tower ) ;
19090: LD_ADDR_VAR 0 10
19094: PUSH
19095: LD_VAR 0 1
19099: PPUSH
19100: CALL_OW 250
19104: ST_TO_ADDR
// y := GetY ( tower ) ;
19105: LD_ADDR_VAR 0 11
19109: PUSH
19110: LD_VAR 0 1
19114: PPUSH
19115: CALL_OW 251
19119: ST_TO_ADDR
// if not x or not y then
19120: LD_VAR 0 10
19124: NOT
19125: PUSH
19126: LD_VAR 0 11
19130: NOT
19131: OR
19132: IFFALSE 19136
// exit ;
19134: GO 20169
// weapon := 0 ;
19136: LD_ADDR_VAR 0 18
19140: PUSH
19141: LD_INT 0
19143: ST_TO_ADDR
// fac_list := [ ] ;
19144: LD_ADDR_VAR 0 17
19148: PUSH
19149: EMPTY
19150: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19151: LD_ADDR_VAR 0 6
19155: PUSH
19156: LD_VAR 0 1
19160: PPUSH
19161: CALL_OW 274
19165: PPUSH
19166: LD_VAR 0 2
19170: PPUSH
19171: LD_INT 0
19173: PPUSH
19174: CALL 16740 0 3
19178: PPUSH
19179: LD_INT 30
19181: PUSH
19182: LD_INT 3
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PPUSH
19189: CALL_OW 72
19193: ST_TO_ADDR
// if not factories then
19194: LD_VAR 0 6
19198: NOT
19199: IFFALSE 19203
// exit ;
19201: GO 20169
// for i in factories do
19203: LD_ADDR_VAR 0 8
19207: PUSH
19208: LD_VAR 0 6
19212: PUSH
19213: FOR_IN
19214: IFFALSE 19239
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19216: LD_ADDR_VAR 0 17
19220: PUSH
19221: LD_VAR 0 17
19225: PUSH
19226: LD_VAR 0 8
19230: PPUSH
19231: CALL_OW 478
19235: UNION
19236: ST_TO_ADDR
19237: GO 19213
19239: POP
19240: POP
// if not fac_list then
19241: LD_VAR 0 17
19245: NOT
19246: IFFALSE 19250
// exit ;
19248: GO 20169
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19250: LD_ADDR_VAR 0 5
19254: PUSH
19255: LD_INT 4
19257: PUSH
19258: LD_INT 5
19260: PUSH
19261: LD_INT 9
19263: PUSH
19264: LD_INT 10
19266: PUSH
19267: LD_INT 6
19269: PUSH
19270: LD_INT 7
19272: PUSH
19273: LD_INT 11
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 27
19287: PUSH
19288: LD_INT 28
19290: PUSH
19291: LD_INT 26
19293: PUSH
19294: LD_INT 30
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 43
19305: PUSH
19306: LD_INT 44
19308: PUSH
19309: LD_INT 46
19311: PUSH
19312: LD_INT 45
19314: PUSH
19315: LD_INT 47
19317: PUSH
19318: LD_INT 49
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: PUSH
19334: LD_VAR 0 12
19338: ARRAY
19339: ST_TO_ADDR
// list := list isect fac_list ;
19340: LD_ADDR_VAR 0 5
19344: PUSH
19345: LD_VAR 0 5
19349: PUSH
19350: LD_VAR 0 17
19354: ISECT
19355: ST_TO_ADDR
// if not list then
19356: LD_VAR 0 5
19360: NOT
19361: IFFALSE 19365
// exit ;
19363: GO 20169
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19365: LD_VAR 0 12
19369: PUSH
19370: LD_INT 3
19372: EQUAL
19373: PUSH
19374: LD_INT 49
19376: PUSH
19377: LD_VAR 0 5
19381: IN
19382: AND
19383: PUSH
19384: LD_INT 31
19386: PPUSH
19387: LD_VAR 0 16
19391: PPUSH
19392: CALL_OW 321
19396: PUSH
19397: LD_INT 2
19399: EQUAL
19400: AND
19401: IFFALSE 19461
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19403: LD_INT 22
19405: PUSH
19406: LD_VAR 0 16
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 35
19417: PUSH
19418: LD_INT 49
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 91
19427: PUSH
19428: LD_VAR 0 1
19432: PUSH
19433: LD_INT 10
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: LIST
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: LIST
19445: PPUSH
19446: CALL_OW 69
19450: NOT
19451: IFFALSE 19461
// weapon := ru_time_lapser ;
19453: LD_ADDR_VAR 0 18
19457: PUSH
19458: LD_INT 49
19460: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19461: LD_VAR 0 12
19465: PUSH
19466: LD_INT 1
19468: PUSH
19469: LD_INT 2
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: IN
19476: PUSH
19477: LD_INT 11
19479: PUSH
19480: LD_VAR 0 5
19484: IN
19485: PUSH
19486: LD_INT 30
19488: PUSH
19489: LD_VAR 0 5
19493: IN
19494: OR
19495: AND
19496: PUSH
19497: LD_INT 6
19499: PPUSH
19500: LD_VAR 0 16
19504: PPUSH
19505: CALL_OW 321
19509: PUSH
19510: LD_INT 2
19512: EQUAL
19513: AND
19514: IFFALSE 19679
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19516: LD_INT 22
19518: PUSH
19519: LD_VAR 0 16
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 2
19530: PUSH
19531: LD_INT 35
19533: PUSH
19534: LD_INT 11
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 35
19543: PUSH
19544: LD_INT 30
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 91
19558: PUSH
19559: LD_VAR 0 1
19563: PUSH
19564: LD_INT 18
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: LIST
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: LIST
19576: PPUSH
19577: CALL_OW 69
19581: NOT
19582: PUSH
19583: LD_INT 22
19585: PUSH
19586: LD_VAR 0 16
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 2
19597: PUSH
19598: LD_INT 30
19600: PUSH
19601: LD_INT 32
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 30
19610: PUSH
19611: LD_INT 33
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 91
19625: PUSH
19626: LD_VAR 0 1
19630: PUSH
19631: LD_INT 12
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: LIST
19643: PUSH
19644: EMPTY
19645: LIST
19646: PPUSH
19647: CALL_OW 69
19651: PUSH
19652: LD_INT 2
19654: GREATER
19655: AND
19656: IFFALSE 19679
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19658: LD_ADDR_VAR 0 18
19662: PUSH
19663: LD_INT 11
19665: PUSH
19666: LD_INT 30
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_VAR 0 12
19677: ARRAY
19678: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19679: LD_VAR 0 18
19683: NOT
19684: PUSH
19685: LD_INT 40
19687: PPUSH
19688: LD_VAR 0 16
19692: PPUSH
19693: CALL_OW 321
19697: PUSH
19698: LD_INT 2
19700: EQUAL
19701: AND
19702: PUSH
19703: LD_INT 7
19705: PUSH
19706: LD_VAR 0 5
19710: IN
19711: PUSH
19712: LD_INT 28
19714: PUSH
19715: LD_VAR 0 5
19719: IN
19720: OR
19721: PUSH
19722: LD_INT 45
19724: PUSH
19725: LD_VAR 0 5
19729: IN
19730: OR
19731: AND
19732: IFFALSE 19986
// begin hex := GetHexInfo ( x , y ) ;
19734: LD_ADDR_VAR 0 4
19738: PUSH
19739: LD_VAR 0 10
19743: PPUSH
19744: LD_VAR 0 11
19748: PPUSH
19749: CALL_OW 546
19753: ST_TO_ADDR
// if hex [ 1 ] then
19754: LD_VAR 0 4
19758: PUSH
19759: LD_INT 1
19761: ARRAY
19762: IFFALSE 19766
// exit ;
19764: GO 20169
// height := hex [ 2 ] ;
19766: LD_ADDR_VAR 0 15
19770: PUSH
19771: LD_VAR 0 4
19775: PUSH
19776: LD_INT 2
19778: ARRAY
19779: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
19780: LD_ADDR_VAR 0 14
19784: PUSH
19785: LD_INT 0
19787: PUSH
19788: LD_INT 2
19790: PUSH
19791: LD_INT 3
19793: PUSH
19794: LD_INT 5
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: ST_TO_ADDR
// for i in tmp do
19803: LD_ADDR_VAR 0 8
19807: PUSH
19808: LD_VAR 0 14
19812: PUSH
19813: FOR_IN
19814: IFFALSE 19984
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
19816: LD_ADDR_VAR 0 9
19820: PUSH
19821: LD_VAR 0 10
19825: PPUSH
19826: LD_VAR 0 8
19830: PPUSH
19831: LD_INT 5
19833: PPUSH
19834: CALL_OW 272
19838: PUSH
19839: LD_VAR 0 11
19843: PPUSH
19844: LD_VAR 0 8
19848: PPUSH
19849: LD_INT 5
19851: PPUSH
19852: CALL_OW 273
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
19861: LD_VAR 0 9
19865: PUSH
19866: LD_INT 1
19868: ARRAY
19869: PPUSH
19870: LD_VAR 0 9
19874: PUSH
19875: LD_INT 2
19877: ARRAY
19878: PPUSH
19879: CALL_OW 488
19883: IFFALSE 19982
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
19885: LD_ADDR_VAR 0 4
19889: PUSH
19890: LD_VAR 0 9
19894: PUSH
19895: LD_INT 1
19897: ARRAY
19898: PPUSH
19899: LD_VAR 0 9
19903: PUSH
19904: LD_INT 2
19906: ARRAY
19907: PPUSH
19908: CALL_OW 546
19912: ST_TO_ADDR
// if hex [ 1 ] then
19913: LD_VAR 0 4
19917: PUSH
19918: LD_INT 1
19920: ARRAY
19921: IFFALSE 19925
// continue ;
19923: GO 19813
// h := hex [ 2 ] ;
19925: LD_ADDR_VAR 0 13
19929: PUSH
19930: LD_VAR 0 4
19934: PUSH
19935: LD_INT 2
19937: ARRAY
19938: ST_TO_ADDR
// if h + 7 < height then
19939: LD_VAR 0 13
19943: PUSH
19944: LD_INT 7
19946: PLUS
19947: PUSH
19948: LD_VAR 0 15
19952: LESS
19953: IFFALSE 19982
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19955: LD_ADDR_VAR 0 18
19959: PUSH
19960: LD_INT 7
19962: PUSH
19963: LD_INT 28
19965: PUSH
19966: LD_INT 45
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: LIST
19973: PUSH
19974: LD_VAR 0 12
19978: ARRAY
19979: ST_TO_ADDR
// break ;
19980: GO 19984
// end ; end ; end ;
19982: GO 19813
19984: POP
19985: POP
// end ; if not weapon then
19986: LD_VAR 0 18
19990: NOT
19991: IFFALSE 20051
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19993: LD_ADDR_VAR 0 5
19997: PUSH
19998: LD_VAR 0 5
20002: PUSH
20003: LD_INT 11
20005: PUSH
20006: LD_INT 30
20008: PUSH
20009: LD_INT 49
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: LIST
20016: DIFF
20017: ST_TO_ADDR
// if not list then
20018: LD_VAR 0 5
20022: NOT
20023: IFFALSE 20027
// exit ;
20025: GO 20169
// weapon := list [ rand ( 1 , list ) ] ;
20027: LD_ADDR_VAR 0 18
20031: PUSH
20032: LD_VAR 0 5
20036: PUSH
20037: LD_INT 1
20039: PPUSH
20040: LD_VAR 0 5
20044: PPUSH
20045: CALL_OW 12
20049: ARRAY
20050: ST_TO_ADDR
// end ; if weapon then
20051: LD_VAR 0 18
20055: IFFALSE 20169
// begin tmp := CostOfWeapon ( weapon ) ;
20057: LD_ADDR_VAR 0 14
20061: PUSH
20062: LD_VAR 0 18
20066: PPUSH
20067: CALL_OW 451
20071: ST_TO_ADDR
// j := GetBase ( tower ) ;
20072: LD_ADDR_VAR 0 9
20076: PUSH
20077: LD_VAR 0 1
20081: PPUSH
20082: CALL_OW 274
20086: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20087: LD_VAR 0 9
20091: PPUSH
20092: LD_INT 1
20094: PPUSH
20095: CALL_OW 275
20099: PUSH
20100: LD_VAR 0 14
20104: PUSH
20105: LD_INT 1
20107: ARRAY
20108: GREATEREQUAL
20109: PUSH
20110: LD_VAR 0 9
20114: PPUSH
20115: LD_INT 2
20117: PPUSH
20118: CALL_OW 275
20122: PUSH
20123: LD_VAR 0 14
20127: PUSH
20128: LD_INT 2
20130: ARRAY
20131: GREATEREQUAL
20132: AND
20133: PUSH
20134: LD_VAR 0 9
20138: PPUSH
20139: LD_INT 3
20141: PPUSH
20142: CALL_OW 275
20146: PUSH
20147: LD_VAR 0 14
20151: PUSH
20152: LD_INT 3
20154: ARRAY
20155: GREATEREQUAL
20156: AND
20157: IFFALSE 20169
// result := weapon ;
20159: LD_ADDR_VAR 0 3
20163: PUSH
20164: LD_VAR 0 18
20168: ST_TO_ADDR
// end ; end ;
20169: LD_VAR 0 3
20173: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20174: LD_INT 0
20176: PPUSH
20177: PPUSH
// result := true ;
20178: LD_ADDR_VAR 0 3
20182: PUSH
20183: LD_INT 1
20185: ST_TO_ADDR
// if array1 = array2 then
20186: LD_VAR 0 1
20190: PUSH
20191: LD_VAR 0 2
20195: EQUAL
20196: IFFALSE 20256
// begin for i = 1 to array1 do
20198: LD_ADDR_VAR 0 4
20202: PUSH
20203: DOUBLE
20204: LD_INT 1
20206: DEC
20207: ST_TO_ADDR
20208: LD_VAR 0 1
20212: PUSH
20213: FOR_TO
20214: IFFALSE 20252
// if array1 [ i ] <> array2 [ i ] then
20216: LD_VAR 0 1
20220: PUSH
20221: LD_VAR 0 4
20225: ARRAY
20226: PUSH
20227: LD_VAR 0 2
20231: PUSH
20232: LD_VAR 0 4
20236: ARRAY
20237: NONEQUAL
20238: IFFALSE 20250
// begin result := false ;
20240: LD_ADDR_VAR 0 3
20244: PUSH
20245: LD_INT 0
20247: ST_TO_ADDR
// break ;
20248: GO 20252
// end ;
20250: GO 20213
20252: POP
20253: POP
// end else
20254: GO 20264
// result := false ;
20256: LD_ADDR_VAR 0 3
20260: PUSH
20261: LD_INT 0
20263: ST_TO_ADDR
// end ;
20264: LD_VAR 0 3
20268: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20269: LD_INT 0
20271: PPUSH
20272: PPUSH
// if not array1 or not array2 then
20273: LD_VAR 0 1
20277: NOT
20278: PUSH
20279: LD_VAR 0 2
20283: NOT
20284: OR
20285: IFFALSE 20289
// exit ;
20287: GO 20353
// result := true ;
20289: LD_ADDR_VAR 0 3
20293: PUSH
20294: LD_INT 1
20296: ST_TO_ADDR
// for i = 1 to array1 do
20297: LD_ADDR_VAR 0 4
20301: PUSH
20302: DOUBLE
20303: LD_INT 1
20305: DEC
20306: ST_TO_ADDR
20307: LD_VAR 0 1
20311: PUSH
20312: FOR_TO
20313: IFFALSE 20351
// if array1 [ i ] <> array2 [ i ] then
20315: LD_VAR 0 1
20319: PUSH
20320: LD_VAR 0 4
20324: ARRAY
20325: PUSH
20326: LD_VAR 0 2
20330: PUSH
20331: LD_VAR 0 4
20335: ARRAY
20336: NONEQUAL
20337: IFFALSE 20349
// begin result := false ;
20339: LD_ADDR_VAR 0 3
20343: PUSH
20344: LD_INT 0
20346: ST_TO_ADDR
// break ;
20347: GO 20351
// end ;
20349: GO 20312
20351: POP
20352: POP
// end ;
20353: LD_VAR 0 3
20357: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20358: LD_INT 0
20360: PPUSH
20361: PPUSH
20362: PPUSH
// pom := GetBase ( fac ) ;
20363: LD_ADDR_VAR 0 5
20367: PUSH
20368: LD_VAR 0 1
20372: PPUSH
20373: CALL_OW 274
20377: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20378: LD_ADDR_VAR 0 4
20382: PUSH
20383: LD_VAR 0 2
20387: PUSH
20388: LD_INT 1
20390: ARRAY
20391: PPUSH
20392: LD_VAR 0 2
20396: PUSH
20397: LD_INT 2
20399: ARRAY
20400: PPUSH
20401: LD_VAR 0 2
20405: PUSH
20406: LD_INT 3
20408: ARRAY
20409: PPUSH
20410: LD_VAR 0 2
20414: PUSH
20415: LD_INT 4
20417: ARRAY
20418: PPUSH
20419: CALL_OW 449
20423: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20424: LD_ADDR_VAR 0 3
20428: PUSH
20429: LD_VAR 0 5
20433: PPUSH
20434: LD_INT 1
20436: PPUSH
20437: CALL_OW 275
20441: PUSH
20442: LD_VAR 0 4
20446: PUSH
20447: LD_INT 1
20449: ARRAY
20450: GREATEREQUAL
20451: PUSH
20452: LD_VAR 0 5
20456: PPUSH
20457: LD_INT 2
20459: PPUSH
20460: CALL_OW 275
20464: PUSH
20465: LD_VAR 0 4
20469: PUSH
20470: LD_INT 2
20472: ARRAY
20473: GREATEREQUAL
20474: AND
20475: PUSH
20476: LD_VAR 0 5
20480: PPUSH
20481: LD_INT 3
20483: PPUSH
20484: CALL_OW 275
20488: PUSH
20489: LD_VAR 0 4
20493: PUSH
20494: LD_INT 3
20496: ARRAY
20497: GREATEREQUAL
20498: AND
20499: ST_TO_ADDR
// end ;
20500: LD_VAR 0 3
20504: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20505: LD_INT 0
20507: PPUSH
20508: PPUSH
20509: PPUSH
20510: PPUSH
// pom := GetBase ( building ) ;
20511: LD_ADDR_VAR 0 3
20515: PUSH
20516: LD_VAR 0 1
20520: PPUSH
20521: CALL_OW 274
20525: ST_TO_ADDR
// if not pom then
20526: LD_VAR 0 3
20530: NOT
20531: IFFALSE 20535
// exit ;
20533: GO 20705
// btype := GetBType ( building ) ;
20535: LD_ADDR_VAR 0 5
20539: PUSH
20540: LD_VAR 0 1
20544: PPUSH
20545: CALL_OW 266
20549: ST_TO_ADDR
// if btype = b_armoury then
20550: LD_VAR 0 5
20554: PUSH
20555: LD_INT 4
20557: EQUAL
20558: IFFALSE 20568
// btype := b_barracks ;
20560: LD_ADDR_VAR 0 5
20564: PUSH
20565: LD_INT 5
20567: ST_TO_ADDR
// if btype = b_depot then
20568: LD_VAR 0 5
20572: PUSH
20573: LD_INT 0
20575: EQUAL
20576: IFFALSE 20586
// btype := b_warehouse ;
20578: LD_ADDR_VAR 0 5
20582: PUSH
20583: LD_INT 1
20585: ST_TO_ADDR
// if btype = b_workshop then
20586: LD_VAR 0 5
20590: PUSH
20591: LD_INT 2
20593: EQUAL
20594: IFFALSE 20604
// btype := b_factory ;
20596: LD_ADDR_VAR 0 5
20600: PUSH
20601: LD_INT 3
20603: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20604: LD_ADDR_VAR 0 4
20608: PUSH
20609: LD_VAR 0 5
20613: PPUSH
20614: LD_VAR 0 1
20618: PPUSH
20619: CALL_OW 248
20623: PPUSH
20624: CALL_OW 450
20628: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20629: LD_ADDR_VAR 0 2
20633: PUSH
20634: LD_VAR 0 3
20638: PPUSH
20639: LD_INT 1
20641: PPUSH
20642: CALL_OW 275
20646: PUSH
20647: LD_VAR 0 4
20651: PUSH
20652: LD_INT 1
20654: ARRAY
20655: GREATEREQUAL
20656: PUSH
20657: LD_VAR 0 3
20661: PPUSH
20662: LD_INT 2
20664: PPUSH
20665: CALL_OW 275
20669: PUSH
20670: LD_VAR 0 4
20674: PUSH
20675: LD_INT 2
20677: ARRAY
20678: GREATEREQUAL
20679: AND
20680: PUSH
20681: LD_VAR 0 3
20685: PPUSH
20686: LD_INT 3
20688: PPUSH
20689: CALL_OW 275
20693: PUSH
20694: LD_VAR 0 4
20698: PUSH
20699: LD_INT 3
20701: ARRAY
20702: GREATEREQUAL
20703: AND
20704: ST_TO_ADDR
// end ;
20705: LD_VAR 0 2
20709: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20710: LD_INT 0
20712: PPUSH
20713: PPUSH
20714: PPUSH
// pom := GetBase ( building ) ;
20715: LD_ADDR_VAR 0 4
20719: PUSH
20720: LD_VAR 0 1
20724: PPUSH
20725: CALL_OW 274
20729: ST_TO_ADDR
// if not pom then
20730: LD_VAR 0 4
20734: NOT
20735: IFFALSE 20739
// exit ;
20737: GO 20840
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20739: LD_ADDR_VAR 0 5
20743: PUSH
20744: LD_VAR 0 2
20748: PPUSH
20749: LD_VAR 0 1
20753: PPUSH
20754: CALL_OW 248
20758: PPUSH
20759: CALL_OW 450
20763: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20764: LD_ADDR_VAR 0 3
20768: PUSH
20769: LD_VAR 0 4
20773: PPUSH
20774: LD_INT 1
20776: PPUSH
20777: CALL_OW 275
20781: PUSH
20782: LD_VAR 0 5
20786: PUSH
20787: LD_INT 1
20789: ARRAY
20790: GREATEREQUAL
20791: PUSH
20792: LD_VAR 0 4
20796: PPUSH
20797: LD_INT 2
20799: PPUSH
20800: CALL_OW 275
20804: PUSH
20805: LD_VAR 0 5
20809: PUSH
20810: LD_INT 2
20812: ARRAY
20813: GREATEREQUAL
20814: AND
20815: PUSH
20816: LD_VAR 0 4
20820: PPUSH
20821: LD_INT 3
20823: PPUSH
20824: CALL_OW 275
20828: PUSH
20829: LD_VAR 0 5
20833: PUSH
20834: LD_INT 3
20836: ARRAY
20837: GREATEREQUAL
20838: AND
20839: ST_TO_ADDR
// end ;
20840: LD_VAR 0 3
20844: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
20845: LD_INT 0
20847: PPUSH
20848: PPUSH
20849: PPUSH
20850: PPUSH
20851: PPUSH
20852: PPUSH
20853: PPUSH
20854: PPUSH
20855: PPUSH
20856: PPUSH
20857: PPUSH
// result := false ;
20858: LD_ADDR_VAR 0 8
20862: PUSH
20863: LD_INT 0
20865: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
20866: LD_VAR 0 5
20870: NOT
20871: PUSH
20872: LD_VAR 0 1
20876: NOT
20877: OR
20878: PUSH
20879: LD_VAR 0 2
20883: NOT
20884: OR
20885: PUSH
20886: LD_VAR 0 3
20890: NOT
20891: OR
20892: IFFALSE 20896
// exit ;
20894: GO 21710
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
20896: LD_ADDR_VAR 0 14
20900: PUSH
20901: LD_VAR 0 1
20905: PPUSH
20906: LD_VAR 0 2
20910: PPUSH
20911: LD_VAR 0 3
20915: PPUSH
20916: LD_VAR 0 4
20920: PPUSH
20921: LD_VAR 0 5
20925: PUSH
20926: LD_INT 1
20928: ARRAY
20929: PPUSH
20930: CALL_OW 248
20934: PPUSH
20935: LD_INT 0
20937: PPUSH
20938: CALL 22943 0 6
20942: ST_TO_ADDR
// if not hexes then
20943: LD_VAR 0 14
20947: NOT
20948: IFFALSE 20952
// exit ;
20950: GO 21710
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20952: LD_ADDR_VAR 0 17
20956: PUSH
20957: LD_VAR 0 5
20961: PPUSH
20962: LD_INT 22
20964: PUSH
20965: LD_VAR 0 13
20969: PPUSH
20970: CALL_OW 255
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 2
20981: PUSH
20982: LD_INT 30
20984: PUSH
20985: LD_INT 0
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 30
20994: PUSH
20995: LD_INT 1
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: LIST
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PPUSH
21011: CALL_OW 72
21015: ST_TO_ADDR
// for i = 1 to hexes do
21016: LD_ADDR_VAR 0 9
21020: PUSH
21021: DOUBLE
21022: LD_INT 1
21024: DEC
21025: ST_TO_ADDR
21026: LD_VAR 0 14
21030: PUSH
21031: FOR_TO
21032: IFFALSE 21708
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21034: LD_ADDR_VAR 0 13
21038: PUSH
21039: LD_VAR 0 14
21043: PUSH
21044: LD_VAR 0 9
21048: ARRAY
21049: PUSH
21050: LD_INT 1
21052: ARRAY
21053: PPUSH
21054: LD_VAR 0 14
21058: PUSH
21059: LD_VAR 0 9
21063: ARRAY
21064: PUSH
21065: LD_INT 2
21067: ARRAY
21068: PPUSH
21069: CALL_OW 428
21073: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21074: LD_VAR 0 14
21078: PUSH
21079: LD_VAR 0 9
21083: ARRAY
21084: PUSH
21085: LD_INT 1
21087: ARRAY
21088: PPUSH
21089: LD_VAR 0 14
21093: PUSH
21094: LD_VAR 0 9
21098: ARRAY
21099: PUSH
21100: LD_INT 2
21102: ARRAY
21103: PPUSH
21104: CALL_OW 351
21108: PUSH
21109: LD_VAR 0 14
21113: PUSH
21114: LD_VAR 0 9
21118: ARRAY
21119: PUSH
21120: LD_INT 1
21122: ARRAY
21123: PPUSH
21124: LD_VAR 0 14
21128: PUSH
21129: LD_VAR 0 9
21133: ARRAY
21134: PUSH
21135: LD_INT 2
21137: ARRAY
21138: PPUSH
21139: CALL_OW 488
21143: NOT
21144: OR
21145: PUSH
21146: LD_VAR 0 13
21150: PPUSH
21151: CALL_OW 247
21155: PUSH
21156: LD_INT 3
21158: EQUAL
21159: OR
21160: IFFALSE 21166
// exit ;
21162: POP
21163: POP
21164: GO 21710
// if not tmp then
21166: LD_VAR 0 13
21170: NOT
21171: IFFALSE 21175
// continue ;
21173: GO 21031
// result := true ;
21175: LD_ADDR_VAR 0 8
21179: PUSH
21180: LD_INT 1
21182: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21183: LD_VAR 0 6
21187: PUSH
21188: LD_VAR 0 13
21192: PPUSH
21193: CALL_OW 247
21197: PUSH
21198: LD_INT 2
21200: EQUAL
21201: AND
21202: PUSH
21203: LD_VAR 0 13
21207: PPUSH
21208: CALL_OW 263
21212: PUSH
21213: LD_INT 1
21215: EQUAL
21216: AND
21217: IFFALSE 21381
// begin if IsDrivenBy ( tmp ) then
21219: LD_VAR 0 13
21223: PPUSH
21224: CALL_OW 311
21228: IFFALSE 21232
// continue ;
21230: GO 21031
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21232: LD_VAR 0 6
21236: PPUSH
21237: LD_INT 3
21239: PUSH
21240: LD_INT 60
21242: PUSH
21243: EMPTY
21244: LIST
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 3
21252: PUSH
21253: LD_INT 55
21255: PUSH
21256: EMPTY
21257: LIST
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PPUSH
21267: CALL_OW 72
21271: IFFALSE 21379
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21273: LD_ADDR_VAR 0 18
21277: PUSH
21278: LD_VAR 0 6
21282: PPUSH
21283: LD_INT 3
21285: PUSH
21286: LD_INT 60
21288: PUSH
21289: EMPTY
21290: LIST
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 3
21298: PUSH
21299: LD_INT 55
21301: PUSH
21302: EMPTY
21303: LIST
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PPUSH
21313: CALL_OW 72
21317: PUSH
21318: LD_INT 1
21320: ARRAY
21321: ST_TO_ADDR
// if IsInUnit ( driver ) then
21322: LD_VAR 0 18
21326: PPUSH
21327: CALL_OW 310
21331: IFFALSE 21342
// ComExit ( driver ) ;
21333: LD_VAR 0 18
21337: PPUSH
21338: CALL 46723 0 1
// AddComEnterUnit ( driver , tmp ) ;
21342: LD_VAR 0 18
21346: PPUSH
21347: LD_VAR 0 13
21351: PPUSH
21352: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21356: LD_VAR 0 18
21360: PPUSH
21361: LD_VAR 0 7
21365: PPUSH
21366: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21370: LD_VAR 0 18
21374: PPUSH
21375: CALL_OW 181
// end ; continue ;
21379: GO 21031
// end ; if not cleaners or not tmp in cleaners then
21381: LD_VAR 0 6
21385: NOT
21386: PUSH
21387: LD_VAR 0 13
21391: PUSH
21392: LD_VAR 0 6
21396: IN
21397: NOT
21398: OR
21399: IFFALSE 21706
// begin if dep then
21401: LD_VAR 0 17
21405: IFFALSE 21541
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21407: LD_ADDR_VAR 0 16
21411: PUSH
21412: LD_VAR 0 17
21416: PUSH
21417: LD_INT 1
21419: ARRAY
21420: PPUSH
21421: CALL_OW 250
21425: PPUSH
21426: LD_VAR 0 17
21430: PUSH
21431: LD_INT 1
21433: ARRAY
21434: PPUSH
21435: CALL_OW 254
21439: PPUSH
21440: LD_INT 5
21442: PPUSH
21443: CALL_OW 272
21447: PUSH
21448: LD_VAR 0 17
21452: PUSH
21453: LD_INT 1
21455: ARRAY
21456: PPUSH
21457: CALL_OW 251
21461: PPUSH
21462: LD_VAR 0 17
21466: PUSH
21467: LD_INT 1
21469: ARRAY
21470: PPUSH
21471: CALL_OW 254
21475: PPUSH
21476: LD_INT 5
21478: PPUSH
21479: CALL_OW 273
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21488: LD_VAR 0 16
21492: PUSH
21493: LD_INT 1
21495: ARRAY
21496: PPUSH
21497: LD_VAR 0 16
21501: PUSH
21502: LD_INT 2
21504: ARRAY
21505: PPUSH
21506: CALL_OW 488
21510: IFFALSE 21541
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21512: LD_VAR 0 13
21516: PPUSH
21517: LD_VAR 0 16
21521: PUSH
21522: LD_INT 1
21524: ARRAY
21525: PPUSH
21526: LD_VAR 0 16
21530: PUSH
21531: LD_INT 2
21533: ARRAY
21534: PPUSH
21535: CALL_OW 111
// continue ;
21539: GO 21031
// end ; end ; r := GetDir ( tmp ) ;
21541: LD_ADDR_VAR 0 15
21545: PUSH
21546: LD_VAR 0 13
21550: PPUSH
21551: CALL_OW 254
21555: ST_TO_ADDR
// if r = 5 then
21556: LD_VAR 0 15
21560: PUSH
21561: LD_INT 5
21563: EQUAL
21564: IFFALSE 21574
// r := 0 ;
21566: LD_ADDR_VAR 0 15
21570: PUSH
21571: LD_INT 0
21573: ST_TO_ADDR
// for j = r to 5 do
21574: LD_ADDR_VAR 0 10
21578: PUSH
21579: DOUBLE
21580: LD_VAR 0 15
21584: DEC
21585: ST_TO_ADDR
21586: LD_INT 5
21588: PUSH
21589: FOR_TO
21590: IFFALSE 21704
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21592: LD_ADDR_VAR 0 11
21596: PUSH
21597: LD_VAR 0 13
21601: PPUSH
21602: CALL_OW 250
21606: PPUSH
21607: LD_VAR 0 10
21611: PPUSH
21612: LD_INT 2
21614: PPUSH
21615: CALL_OW 272
21619: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21620: LD_ADDR_VAR 0 12
21624: PUSH
21625: LD_VAR 0 13
21629: PPUSH
21630: CALL_OW 251
21634: PPUSH
21635: LD_VAR 0 10
21639: PPUSH
21640: LD_INT 2
21642: PPUSH
21643: CALL_OW 273
21647: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21648: LD_VAR 0 11
21652: PPUSH
21653: LD_VAR 0 12
21657: PPUSH
21658: CALL_OW 488
21662: PUSH
21663: LD_VAR 0 11
21667: PPUSH
21668: LD_VAR 0 12
21672: PPUSH
21673: CALL_OW 428
21677: NOT
21678: AND
21679: IFFALSE 21702
// begin ComMoveXY ( tmp , _x , _y ) ;
21681: LD_VAR 0 13
21685: PPUSH
21686: LD_VAR 0 11
21690: PPUSH
21691: LD_VAR 0 12
21695: PPUSH
21696: CALL_OW 111
// break ;
21700: GO 21704
// end ; end ;
21702: GO 21589
21704: POP
21705: POP
// end ; end ;
21706: GO 21031
21708: POP
21709: POP
// end ;
21710: LD_VAR 0 8
21714: RET
// export function BuildingTechInvented ( side , btype ) ; begin
21715: LD_INT 0
21717: PPUSH
// result := true ;
21718: LD_ADDR_VAR 0 3
21722: PUSH
21723: LD_INT 1
21725: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
21726: LD_VAR 0 2
21730: PUSH
21731: LD_INT 24
21733: DOUBLE
21734: EQUAL
21735: IFTRUE 21745
21737: LD_INT 33
21739: DOUBLE
21740: EQUAL
21741: IFTRUE 21745
21743: GO 21770
21745: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
21746: LD_ADDR_VAR 0 3
21750: PUSH
21751: LD_INT 32
21753: PPUSH
21754: LD_VAR 0 1
21758: PPUSH
21759: CALL_OW 321
21763: PUSH
21764: LD_INT 2
21766: EQUAL
21767: ST_TO_ADDR
21768: GO 22086
21770: LD_INT 20
21772: DOUBLE
21773: EQUAL
21774: IFTRUE 21778
21776: GO 21803
21778: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
21779: LD_ADDR_VAR 0 3
21783: PUSH
21784: LD_INT 6
21786: PPUSH
21787: LD_VAR 0 1
21791: PPUSH
21792: CALL_OW 321
21796: PUSH
21797: LD_INT 2
21799: EQUAL
21800: ST_TO_ADDR
21801: GO 22086
21803: LD_INT 22
21805: DOUBLE
21806: EQUAL
21807: IFTRUE 21817
21809: LD_INT 36
21811: DOUBLE
21812: EQUAL
21813: IFTRUE 21817
21815: GO 21842
21817: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
21818: LD_ADDR_VAR 0 3
21822: PUSH
21823: LD_INT 15
21825: PPUSH
21826: LD_VAR 0 1
21830: PPUSH
21831: CALL_OW 321
21835: PUSH
21836: LD_INT 2
21838: EQUAL
21839: ST_TO_ADDR
21840: GO 22086
21842: LD_INT 30
21844: DOUBLE
21845: EQUAL
21846: IFTRUE 21850
21848: GO 21875
21850: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
21851: LD_ADDR_VAR 0 3
21855: PUSH
21856: LD_INT 20
21858: PPUSH
21859: LD_VAR 0 1
21863: PPUSH
21864: CALL_OW 321
21868: PUSH
21869: LD_INT 2
21871: EQUAL
21872: ST_TO_ADDR
21873: GO 22086
21875: LD_INT 28
21877: DOUBLE
21878: EQUAL
21879: IFTRUE 21889
21881: LD_INT 21
21883: DOUBLE
21884: EQUAL
21885: IFTRUE 21889
21887: GO 21914
21889: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
21890: LD_ADDR_VAR 0 3
21894: PUSH
21895: LD_INT 21
21897: PPUSH
21898: LD_VAR 0 1
21902: PPUSH
21903: CALL_OW 321
21907: PUSH
21908: LD_INT 2
21910: EQUAL
21911: ST_TO_ADDR
21912: GO 22086
21914: LD_INT 16
21916: DOUBLE
21917: EQUAL
21918: IFTRUE 21922
21920: GO 21947
21922: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
21923: LD_ADDR_VAR 0 3
21927: PUSH
21928: LD_INT 84
21930: PPUSH
21931: LD_VAR 0 1
21935: PPUSH
21936: CALL_OW 321
21940: PUSH
21941: LD_INT 2
21943: EQUAL
21944: ST_TO_ADDR
21945: GO 22086
21947: LD_INT 19
21949: DOUBLE
21950: EQUAL
21951: IFTRUE 21961
21953: LD_INT 23
21955: DOUBLE
21956: EQUAL
21957: IFTRUE 21961
21959: GO 21986
21961: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
21962: LD_ADDR_VAR 0 3
21966: PUSH
21967: LD_INT 83
21969: PPUSH
21970: LD_VAR 0 1
21974: PPUSH
21975: CALL_OW 321
21979: PUSH
21980: LD_INT 2
21982: EQUAL
21983: ST_TO_ADDR
21984: GO 22086
21986: LD_INT 17
21988: DOUBLE
21989: EQUAL
21990: IFTRUE 21994
21992: GO 22019
21994: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
21995: LD_ADDR_VAR 0 3
21999: PUSH
22000: LD_INT 39
22002: PPUSH
22003: LD_VAR 0 1
22007: PPUSH
22008: CALL_OW 321
22012: PUSH
22013: LD_INT 2
22015: EQUAL
22016: ST_TO_ADDR
22017: GO 22086
22019: LD_INT 18
22021: DOUBLE
22022: EQUAL
22023: IFTRUE 22027
22025: GO 22052
22027: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22028: LD_ADDR_VAR 0 3
22032: PUSH
22033: LD_INT 40
22035: PPUSH
22036: LD_VAR 0 1
22040: PPUSH
22041: CALL_OW 321
22045: PUSH
22046: LD_INT 2
22048: EQUAL
22049: ST_TO_ADDR
22050: GO 22086
22052: LD_INT 27
22054: DOUBLE
22055: EQUAL
22056: IFTRUE 22060
22058: GO 22085
22060: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22061: LD_ADDR_VAR 0 3
22065: PUSH
22066: LD_INT 35
22068: PPUSH
22069: LD_VAR 0 1
22073: PPUSH
22074: CALL_OW 321
22078: PUSH
22079: LD_INT 2
22081: EQUAL
22082: ST_TO_ADDR
22083: GO 22086
22085: POP
// end ;
22086: LD_VAR 0 3
22090: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22091: LD_INT 0
22093: PPUSH
22094: PPUSH
22095: PPUSH
22096: PPUSH
22097: PPUSH
22098: PPUSH
22099: PPUSH
22100: PPUSH
22101: PPUSH
22102: PPUSH
22103: PPUSH
// result := false ;
22104: LD_ADDR_VAR 0 6
22108: PUSH
22109: LD_INT 0
22111: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22112: LD_VAR 0 1
22116: NOT
22117: PUSH
22118: LD_VAR 0 1
22122: PPUSH
22123: CALL_OW 266
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: LD_INT 1
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: IN
22138: NOT
22139: OR
22140: PUSH
22141: LD_VAR 0 2
22145: NOT
22146: OR
22147: PUSH
22148: LD_VAR 0 5
22152: PUSH
22153: LD_INT 0
22155: PUSH
22156: LD_INT 1
22158: PUSH
22159: LD_INT 2
22161: PUSH
22162: LD_INT 3
22164: PUSH
22165: LD_INT 4
22167: PUSH
22168: LD_INT 5
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: IN
22179: NOT
22180: OR
22181: PUSH
22182: LD_VAR 0 3
22186: PPUSH
22187: LD_VAR 0 4
22191: PPUSH
22192: CALL_OW 488
22196: NOT
22197: OR
22198: IFFALSE 22202
// exit ;
22200: GO 22938
// side := GetSide ( depot ) ;
22202: LD_ADDR_VAR 0 9
22206: PUSH
22207: LD_VAR 0 1
22211: PPUSH
22212: CALL_OW 255
22216: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22217: LD_VAR 0 9
22221: PPUSH
22222: LD_VAR 0 2
22226: PPUSH
22227: CALL 21715 0 2
22231: NOT
22232: IFFALSE 22236
// exit ;
22234: GO 22938
// pom := GetBase ( depot ) ;
22236: LD_ADDR_VAR 0 10
22240: PUSH
22241: LD_VAR 0 1
22245: PPUSH
22246: CALL_OW 274
22250: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22251: LD_ADDR_VAR 0 11
22255: PUSH
22256: LD_VAR 0 2
22260: PPUSH
22261: LD_VAR 0 1
22265: PPUSH
22266: CALL_OW 248
22270: PPUSH
22271: CALL_OW 450
22275: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22276: LD_VAR 0 10
22280: PPUSH
22281: LD_INT 1
22283: PPUSH
22284: CALL_OW 275
22288: PUSH
22289: LD_VAR 0 11
22293: PUSH
22294: LD_INT 1
22296: ARRAY
22297: GREATEREQUAL
22298: PUSH
22299: LD_VAR 0 10
22303: PPUSH
22304: LD_INT 2
22306: PPUSH
22307: CALL_OW 275
22311: PUSH
22312: LD_VAR 0 11
22316: PUSH
22317: LD_INT 2
22319: ARRAY
22320: GREATEREQUAL
22321: AND
22322: PUSH
22323: LD_VAR 0 10
22327: PPUSH
22328: LD_INT 3
22330: PPUSH
22331: CALL_OW 275
22335: PUSH
22336: LD_VAR 0 11
22340: PUSH
22341: LD_INT 3
22343: ARRAY
22344: GREATEREQUAL
22345: AND
22346: NOT
22347: IFFALSE 22351
// exit ;
22349: GO 22938
// if GetBType ( depot ) = b_depot then
22351: LD_VAR 0 1
22355: PPUSH
22356: CALL_OW 266
22360: PUSH
22361: LD_INT 0
22363: EQUAL
22364: IFFALSE 22376
// dist := 28 else
22366: LD_ADDR_VAR 0 14
22370: PUSH
22371: LD_INT 28
22373: ST_TO_ADDR
22374: GO 22384
// dist := 36 ;
22376: LD_ADDR_VAR 0 14
22380: PUSH
22381: LD_INT 36
22383: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22384: LD_VAR 0 1
22388: PPUSH
22389: LD_VAR 0 3
22393: PPUSH
22394: LD_VAR 0 4
22398: PPUSH
22399: CALL_OW 297
22403: PUSH
22404: LD_VAR 0 14
22408: GREATER
22409: IFFALSE 22413
// exit ;
22411: GO 22938
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22413: LD_ADDR_VAR 0 12
22417: PUSH
22418: LD_VAR 0 2
22422: PPUSH
22423: LD_VAR 0 3
22427: PPUSH
22428: LD_VAR 0 4
22432: PPUSH
22433: LD_VAR 0 5
22437: PPUSH
22438: LD_VAR 0 1
22442: PPUSH
22443: CALL_OW 248
22447: PPUSH
22448: LD_INT 0
22450: PPUSH
22451: CALL 22943 0 6
22455: ST_TO_ADDR
// if not hexes then
22456: LD_VAR 0 12
22460: NOT
22461: IFFALSE 22465
// exit ;
22463: GO 22938
// hex := GetHexInfo ( x , y ) ;
22465: LD_ADDR_VAR 0 15
22469: PUSH
22470: LD_VAR 0 3
22474: PPUSH
22475: LD_VAR 0 4
22479: PPUSH
22480: CALL_OW 546
22484: ST_TO_ADDR
// if hex [ 1 ] then
22485: LD_VAR 0 15
22489: PUSH
22490: LD_INT 1
22492: ARRAY
22493: IFFALSE 22497
// exit ;
22495: GO 22938
// height := hex [ 2 ] ;
22497: LD_ADDR_VAR 0 13
22501: PUSH
22502: LD_VAR 0 15
22506: PUSH
22507: LD_INT 2
22509: ARRAY
22510: ST_TO_ADDR
// for i = 1 to hexes do
22511: LD_ADDR_VAR 0 7
22515: PUSH
22516: DOUBLE
22517: LD_INT 1
22519: DEC
22520: ST_TO_ADDR
22521: LD_VAR 0 12
22525: PUSH
22526: FOR_TO
22527: IFFALSE 22857
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22529: LD_VAR 0 12
22533: PUSH
22534: LD_VAR 0 7
22538: ARRAY
22539: PUSH
22540: LD_INT 1
22542: ARRAY
22543: PPUSH
22544: LD_VAR 0 12
22548: PUSH
22549: LD_VAR 0 7
22553: ARRAY
22554: PUSH
22555: LD_INT 2
22557: ARRAY
22558: PPUSH
22559: CALL_OW 488
22563: NOT
22564: PUSH
22565: LD_VAR 0 12
22569: PUSH
22570: LD_VAR 0 7
22574: ARRAY
22575: PUSH
22576: LD_INT 1
22578: ARRAY
22579: PPUSH
22580: LD_VAR 0 12
22584: PUSH
22585: LD_VAR 0 7
22589: ARRAY
22590: PUSH
22591: LD_INT 2
22593: ARRAY
22594: PPUSH
22595: CALL_OW 428
22599: PUSH
22600: LD_INT 0
22602: GREATER
22603: OR
22604: PUSH
22605: LD_VAR 0 12
22609: PUSH
22610: LD_VAR 0 7
22614: ARRAY
22615: PUSH
22616: LD_INT 1
22618: ARRAY
22619: PPUSH
22620: LD_VAR 0 12
22624: PUSH
22625: LD_VAR 0 7
22629: ARRAY
22630: PUSH
22631: LD_INT 2
22633: ARRAY
22634: PPUSH
22635: CALL_OW 351
22639: OR
22640: IFFALSE 22646
// exit ;
22642: POP
22643: POP
22644: GO 22938
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22646: LD_ADDR_VAR 0 8
22650: PUSH
22651: LD_VAR 0 12
22655: PUSH
22656: LD_VAR 0 7
22660: ARRAY
22661: PUSH
22662: LD_INT 1
22664: ARRAY
22665: PPUSH
22666: LD_VAR 0 12
22670: PUSH
22671: LD_VAR 0 7
22675: ARRAY
22676: PUSH
22677: LD_INT 2
22679: ARRAY
22680: PPUSH
22681: CALL_OW 546
22685: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22686: LD_VAR 0 8
22690: PUSH
22691: LD_INT 1
22693: ARRAY
22694: PUSH
22695: LD_VAR 0 8
22699: PUSH
22700: LD_INT 2
22702: ARRAY
22703: PUSH
22704: LD_VAR 0 13
22708: PUSH
22709: LD_INT 2
22711: PLUS
22712: GREATER
22713: OR
22714: PUSH
22715: LD_VAR 0 8
22719: PUSH
22720: LD_INT 2
22722: ARRAY
22723: PUSH
22724: LD_VAR 0 13
22728: PUSH
22729: LD_INT 2
22731: MINUS
22732: LESS
22733: OR
22734: PUSH
22735: LD_VAR 0 8
22739: PUSH
22740: LD_INT 3
22742: ARRAY
22743: PUSH
22744: LD_INT 0
22746: PUSH
22747: LD_INT 8
22749: PUSH
22750: LD_INT 9
22752: PUSH
22753: LD_INT 10
22755: PUSH
22756: LD_INT 11
22758: PUSH
22759: LD_INT 12
22761: PUSH
22762: LD_INT 13
22764: PUSH
22765: LD_INT 16
22767: PUSH
22768: LD_INT 17
22770: PUSH
22771: LD_INT 18
22773: PUSH
22774: LD_INT 19
22776: PUSH
22777: LD_INT 20
22779: PUSH
22780: LD_INT 21
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: IN
22798: NOT
22799: OR
22800: PUSH
22801: LD_VAR 0 8
22805: PUSH
22806: LD_INT 5
22808: ARRAY
22809: NOT
22810: OR
22811: PUSH
22812: LD_VAR 0 8
22816: PUSH
22817: LD_INT 6
22819: ARRAY
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: LD_INT 7
22829: PUSH
22830: LD_INT 9
22832: PUSH
22833: LD_INT 10
22835: PUSH
22836: LD_INT 11
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: IN
22847: NOT
22848: OR
22849: IFFALSE 22855
// exit ;
22851: POP
22852: POP
22853: GO 22938
// end ;
22855: GO 22526
22857: POP
22858: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
22859: LD_VAR 0 9
22863: PPUSH
22864: LD_VAR 0 3
22868: PPUSH
22869: LD_VAR 0 4
22873: PPUSH
22874: LD_INT 20
22876: PPUSH
22877: CALL 14890 0 4
22881: PUSH
22882: LD_INT 4
22884: ARRAY
22885: IFFALSE 22889
// exit ;
22887: GO 22938
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
22889: LD_VAR 0 2
22893: PUSH
22894: LD_INT 29
22896: PUSH
22897: LD_INT 30
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: IN
22904: PUSH
22905: LD_VAR 0 3
22909: PPUSH
22910: LD_VAR 0 4
22914: PPUSH
22915: LD_VAR 0 9
22919: PPUSH
22920: CALL_OW 440
22924: NOT
22925: AND
22926: IFFALSE 22930
// exit ;
22928: GO 22938
// result := true ;
22930: LD_ADDR_VAR 0 6
22934: PUSH
22935: LD_INT 1
22937: ST_TO_ADDR
// end ;
22938: LD_VAR 0 6
22942: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
22943: LD_INT 0
22945: PPUSH
22946: PPUSH
22947: PPUSH
22948: PPUSH
22949: PPUSH
22950: PPUSH
22951: PPUSH
22952: PPUSH
22953: PPUSH
22954: PPUSH
22955: PPUSH
22956: PPUSH
22957: PPUSH
22958: PPUSH
22959: PPUSH
22960: PPUSH
22961: PPUSH
22962: PPUSH
22963: PPUSH
22964: PPUSH
22965: PPUSH
22966: PPUSH
22967: PPUSH
22968: PPUSH
22969: PPUSH
22970: PPUSH
22971: PPUSH
22972: PPUSH
22973: PPUSH
22974: PPUSH
22975: PPUSH
22976: PPUSH
22977: PPUSH
22978: PPUSH
22979: PPUSH
22980: PPUSH
22981: PPUSH
22982: PPUSH
22983: PPUSH
22984: PPUSH
22985: PPUSH
22986: PPUSH
22987: PPUSH
22988: PPUSH
22989: PPUSH
22990: PPUSH
22991: PPUSH
22992: PPUSH
22993: PPUSH
22994: PPUSH
22995: PPUSH
22996: PPUSH
22997: PPUSH
22998: PPUSH
22999: PPUSH
23000: PPUSH
23001: PPUSH
23002: PPUSH
// result = [ ] ;
23003: LD_ADDR_VAR 0 7
23007: PUSH
23008: EMPTY
23009: ST_TO_ADDR
// temp_list = [ ] ;
23010: LD_ADDR_VAR 0 9
23014: PUSH
23015: EMPTY
23016: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23017: LD_VAR 0 4
23021: PUSH
23022: LD_INT 0
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: LD_INT 2
23030: PUSH
23031: LD_INT 3
23033: PUSH
23034: LD_INT 4
23036: PUSH
23037: LD_INT 5
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: IN
23048: NOT
23049: PUSH
23050: LD_VAR 0 1
23054: PUSH
23055: LD_INT 0
23057: PUSH
23058: LD_INT 1
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: IN
23065: PUSH
23066: LD_VAR 0 5
23070: PUSH
23071: LD_INT 1
23073: PUSH
23074: LD_INT 2
23076: PUSH
23077: LD_INT 3
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: LIST
23084: IN
23085: NOT
23086: AND
23087: OR
23088: IFFALSE 23092
// exit ;
23090: GO 41483
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23092: LD_VAR 0 1
23096: PUSH
23097: LD_INT 6
23099: PUSH
23100: LD_INT 7
23102: PUSH
23103: LD_INT 8
23105: PUSH
23106: LD_INT 13
23108: PUSH
23109: LD_INT 12
23111: PUSH
23112: LD_INT 15
23114: PUSH
23115: LD_INT 11
23117: PUSH
23118: LD_INT 14
23120: PUSH
23121: LD_INT 10
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: IN
23135: IFFALSE 23145
// btype = b_lab ;
23137: LD_ADDR_VAR 0 1
23141: PUSH
23142: LD_INT 6
23144: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23145: LD_VAR 0 6
23149: PUSH
23150: LD_INT 0
23152: PUSH
23153: LD_INT 1
23155: PUSH
23156: LD_INT 2
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: LIST
23163: IN
23164: NOT
23165: PUSH
23166: LD_VAR 0 1
23170: PUSH
23171: LD_INT 0
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: LD_INT 2
23179: PUSH
23180: LD_INT 3
23182: PUSH
23183: LD_INT 6
23185: PUSH
23186: LD_INT 36
23188: PUSH
23189: LD_INT 4
23191: PUSH
23192: LD_INT 5
23194: PUSH
23195: LD_INT 31
23197: PUSH
23198: LD_INT 32
23200: PUSH
23201: LD_INT 33
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: IN
23217: NOT
23218: PUSH
23219: LD_VAR 0 6
23223: PUSH
23224: LD_INT 1
23226: EQUAL
23227: AND
23228: OR
23229: PUSH
23230: LD_VAR 0 1
23234: PUSH
23235: LD_INT 2
23237: PUSH
23238: LD_INT 3
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: IN
23245: NOT
23246: PUSH
23247: LD_VAR 0 6
23251: PUSH
23252: LD_INT 2
23254: EQUAL
23255: AND
23256: OR
23257: IFFALSE 23267
// mode = 0 ;
23259: LD_ADDR_VAR 0 6
23263: PUSH
23264: LD_INT 0
23266: ST_TO_ADDR
// case mode of 0 :
23267: LD_VAR 0 6
23271: PUSH
23272: LD_INT 0
23274: DOUBLE
23275: EQUAL
23276: IFTRUE 23280
23278: GO 34733
23280: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23281: LD_ADDR_VAR 0 11
23285: PUSH
23286: LD_INT 0
23288: PUSH
23289: LD_INT 0
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 0
23298: PUSH
23299: LD_INT 1
23301: NEG
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 1
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: LD_INT 1
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 1
23339: NEG
23340: PUSH
23341: LD_INT 0
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 1
23350: NEG
23351: PUSH
23352: LD_INT 1
23354: NEG
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 1
23362: NEG
23363: PUSH
23364: LD_INT 2
23366: NEG
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 0
23374: PUSH
23375: LD_INT 2
23377: NEG
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 1
23385: PUSH
23386: LD_INT 1
23388: NEG
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 1
23396: PUSH
23397: LD_INT 2
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: LD_INT 2
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 1
23416: NEG
23417: PUSH
23418: LD_INT 1
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 1
23427: PUSH
23428: LD_INT 3
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 0
23437: PUSH
23438: LD_INT 3
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 1
23447: NEG
23448: PUSH
23449: LD_INT 2
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23474: LD_ADDR_VAR 0 12
23478: PUSH
23479: LD_INT 0
23481: PUSH
23482: LD_INT 0
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 0
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: LD_INT 0
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 1
23512: PUSH
23513: LD_INT 1
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 0
23522: PUSH
23523: LD_INT 1
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 1
23532: NEG
23533: PUSH
23534: LD_INT 0
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 1
23543: NEG
23544: PUSH
23545: LD_INT 1
23547: NEG
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 1
23555: PUSH
23556: LD_INT 1
23558: NEG
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 2
23566: PUSH
23567: LD_INT 0
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 2
23576: PUSH
23577: LD_INT 1
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 1
23586: NEG
23587: PUSH
23588: LD_INT 1
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 2
23597: NEG
23598: PUSH
23599: LD_INT 0
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 2
23608: NEG
23609: PUSH
23610: LD_INT 1
23612: NEG
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 2
23620: NEG
23621: PUSH
23622: LD_INT 1
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 3
23631: NEG
23632: PUSH
23633: LD_INT 0
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 3
23642: NEG
23643: PUSH
23644: LD_INT 1
23646: NEG
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23670: LD_ADDR_VAR 0 13
23674: PUSH
23675: LD_INT 0
23677: PUSH
23678: LD_INT 0
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 0
23687: PUSH
23688: LD_INT 1
23690: NEG
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 1
23698: PUSH
23699: LD_INT 0
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 0
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 1
23728: NEG
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 1
23739: NEG
23740: PUSH
23741: LD_INT 1
23743: NEG
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 1
23751: NEG
23752: PUSH
23753: LD_INT 2
23755: NEG
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 2
23763: PUSH
23764: LD_INT 1
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 2
23773: PUSH
23774: LD_INT 2
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: LD_INT 2
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 2
23793: NEG
23794: PUSH
23795: LD_INT 1
23797: NEG
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 2
23805: NEG
23806: PUSH
23807: LD_INT 2
23809: NEG
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 2
23817: NEG
23818: PUSH
23819: LD_INT 3
23821: NEG
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 3
23829: NEG
23830: PUSH
23831: LD_INT 2
23833: NEG
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 3
23841: NEG
23842: PUSH
23843: LD_INT 3
23845: NEG
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23869: LD_ADDR_VAR 0 14
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: LD_INT 0
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 0
23886: PUSH
23887: LD_INT 1
23889: NEG
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 1
23897: PUSH
23898: LD_INT 0
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: LD_INT 1
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 0
23917: PUSH
23918: LD_INT 1
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 1
23927: NEG
23928: PUSH
23929: LD_INT 0
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 1
23938: NEG
23939: PUSH
23940: LD_INT 1
23942: NEG
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: LD_INT 2
23954: NEG
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: LD_INT 2
23965: NEG
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: LD_INT 1
23976: NEG
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: PUSH
23985: LD_INT 2
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 0
23994: PUSH
23995: LD_INT 2
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 1
24004: NEG
24005: PUSH
24006: LD_INT 1
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 1
24015: NEG
24016: PUSH
24017: LD_INT 3
24019: NEG
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 0
24027: PUSH
24028: LD_INT 3
24030: NEG
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 1
24038: PUSH
24039: LD_INT 2
24041: NEG
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24065: LD_ADDR_VAR 0 15
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 0
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: LD_INT 0
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 1
24103: PUSH
24104: LD_INT 1
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 0
24113: PUSH
24114: LD_INT 1
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: NEG
24124: PUSH
24125: LD_INT 0
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 1
24134: NEG
24135: PUSH
24136: LD_INT 1
24138: NEG
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: LD_INT 1
24149: NEG
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 2
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 2
24167: PUSH
24168: LD_INT 1
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 1
24177: NEG
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 2
24188: NEG
24189: PUSH
24190: LD_INT 0
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 2
24199: NEG
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 2
24211: PUSH
24212: LD_INT 1
24214: NEG
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 3
24222: PUSH
24223: LD_INT 0
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 3
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24258: LD_ADDR_VAR 0 16
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: LD_INT 0
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: LD_INT 1
24278: NEG
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 1
24296: PUSH
24297: LD_INT 1
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 0
24306: PUSH
24307: LD_INT 1
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 1
24316: NEG
24317: PUSH
24318: LD_INT 0
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 1
24327: NEG
24328: PUSH
24329: LD_INT 1
24331: NEG
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 1
24339: NEG
24340: PUSH
24341: LD_INT 2
24343: NEG
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 2
24351: PUSH
24352: LD_INT 1
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 2
24361: PUSH
24362: LD_INT 2
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 1
24371: PUSH
24372: LD_INT 2
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 2
24381: NEG
24382: PUSH
24383: LD_INT 1
24385: NEG
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 2
24393: NEG
24394: PUSH
24395: LD_INT 2
24397: NEG
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 3
24405: PUSH
24406: LD_INT 2
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 3
24415: PUSH
24416: LD_INT 3
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 2
24425: PUSH
24426: LD_INT 3
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24451: LD_ADDR_VAR 0 17
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: LD_INT 0
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 0
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: LD_INT 0
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 1
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 0
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 1
24509: NEG
24510: PUSH
24511: LD_INT 0
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 1
24520: NEG
24521: PUSH
24522: LD_INT 1
24524: NEG
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 1
24532: NEG
24533: PUSH
24534: LD_INT 2
24536: NEG
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 0
24544: PUSH
24545: LD_INT 2
24547: NEG
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 1
24555: PUSH
24556: LD_INT 1
24558: NEG
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: LD_INT 0
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 2
24576: PUSH
24577: LD_INT 1
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 2
24586: PUSH
24587: LD_INT 2
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 0
24606: PUSH
24607: LD_INT 2
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 1
24616: NEG
24617: PUSH
24618: LD_INT 1
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 2
24627: NEG
24628: PUSH
24629: LD_INT 0
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 2
24638: NEG
24639: PUSH
24640: LD_INT 1
24642: NEG
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 2
24650: NEG
24651: PUSH
24652: LD_INT 2
24654: NEG
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24681: LD_ADDR_VAR 0 18
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: LD_INT 0
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 0
24698: PUSH
24699: LD_INT 1
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 1
24709: PUSH
24710: LD_INT 0
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 1
24719: PUSH
24720: LD_INT 1
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 0
24729: PUSH
24730: LD_INT 1
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 1
24739: NEG
24740: PUSH
24741: LD_INT 0
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 1
24750: NEG
24751: PUSH
24752: LD_INT 1
24754: NEG
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 1
24762: NEG
24763: PUSH
24764: LD_INT 2
24766: NEG
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 0
24774: PUSH
24775: LD_INT 2
24777: NEG
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: PUSH
24786: LD_INT 1
24788: NEG
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 2
24796: PUSH
24797: LD_INT 0
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 2
24806: PUSH
24807: LD_INT 1
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 2
24816: PUSH
24817: LD_INT 2
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 1
24826: PUSH
24827: LD_INT 2
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 0
24836: PUSH
24837: LD_INT 2
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 1
24846: NEG
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 2
24857: NEG
24858: PUSH
24859: LD_INT 0
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 2
24868: NEG
24869: PUSH
24870: LD_INT 1
24872: NEG
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 2
24880: NEG
24881: PUSH
24882: LD_INT 2
24884: NEG
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24911: LD_ADDR_VAR 0 19
24915: PUSH
24916: LD_INT 0
24918: PUSH
24919: LD_INT 0
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: LD_INT 1
24931: NEG
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 1
24939: PUSH
24940: LD_INT 0
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 1
24949: PUSH
24950: LD_INT 1
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: NEG
24970: PUSH
24971: LD_INT 0
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 1
24980: NEG
24981: PUSH
24982: LD_INT 1
24984: NEG
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 1
24992: NEG
24993: PUSH
24994: LD_INT 2
24996: NEG
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 0
25004: PUSH
25005: LD_INT 2
25007: NEG
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 1
25015: PUSH
25016: LD_INT 1
25018: NEG
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 2
25026: PUSH
25027: LD_INT 0
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 2
25036: PUSH
25037: LD_INT 1
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 2
25046: PUSH
25047: LD_INT 2
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 1
25056: PUSH
25057: LD_INT 2
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 0
25066: PUSH
25067: LD_INT 2
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 1
25076: NEG
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 2
25087: NEG
25088: PUSH
25089: LD_INT 0
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 2
25098: NEG
25099: PUSH
25100: LD_INT 1
25102: NEG
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 2
25110: NEG
25111: PUSH
25112: LD_INT 2
25114: NEG
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25141: LD_ADDR_VAR 0 20
25145: PUSH
25146: LD_INT 0
25148: PUSH
25149: LD_INT 0
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 0
25158: PUSH
25159: LD_INT 1
25161: NEG
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 1
25169: PUSH
25170: LD_INT 0
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 1
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 1
25199: NEG
25200: PUSH
25201: LD_INT 0
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: NEG
25211: PUSH
25212: LD_INT 1
25214: NEG
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 1
25222: NEG
25223: PUSH
25224: LD_INT 2
25226: NEG
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: LD_INT 2
25237: NEG
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: LD_INT 1
25248: NEG
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 2
25256: PUSH
25257: LD_INT 0
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 2
25266: PUSH
25267: LD_INT 1
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 2
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: LD_INT 2
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 1
25306: NEG
25307: PUSH
25308: LD_INT 1
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 2
25317: NEG
25318: PUSH
25319: LD_INT 0
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 2
25328: NEG
25329: PUSH
25330: LD_INT 1
25332: NEG
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 2
25340: NEG
25341: PUSH
25342: LD_INT 2
25344: NEG
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25371: LD_ADDR_VAR 0 21
25375: PUSH
25376: LD_INT 0
25378: PUSH
25379: LD_INT 0
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 0
25388: PUSH
25389: LD_INT 1
25391: NEG
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 1
25399: PUSH
25400: LD_INT 0
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 1
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 0
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 1
25429: NEG
25430: PUSH
25431: LD_INT 0
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 1
25440: NEG
25441: PUSH
25442: LD_INT 1
25444: NEG
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: NEG
25453: PUSH
25454: LD_INT 2
25456: NEG
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 0
25464: PUSH
25465: LD_INT 2
25467: NEG
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 1
25475: PUSH
25476: LD_INT 1
25478: NEG
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 2
25486: PUSH
25487: LD_INT 0
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 2
25496: PUSH
25497: LD_INT 1
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 2
25506: PUSH
25507: LD_INT 2
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: LD_INT 2
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 1
25536: NEG
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 2
25547: NEG
25548: PUSH
25549: LD_INT 0
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 2
25558: NEG
25559: PUSH
25560: LD_INT 1
25562: NEG
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 2
25570: NEG
25571: PUSH
25572: LD_INT 2
25574: NEG
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25601: LD_ADDR_VAR 0 22
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: LD_INT 0
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 0
25618: PUSH
25619: LD_INT 1
25621: NEG
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: LD_INT 0
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 1
25659: NEG
25660: PUSH
25661: LD_INT 0
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 1
25670: NEG
25671: PUSH
25672: LD_INT 1
25674: NEG
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 1
25682: NEG
25683: PUSH
25684: LD_INT 2
25686: NEG
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 0
25694: PUSH
25695: LD_INT 2
25697: NEG
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 1
25705: PUSH
25706: LD_INT 1
25708: NEG
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 2
25716: PUSH
25717: LD_INT 0
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 2
25726: PUSH
25727: LD_INT 1
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 2
25736: PUSH
25737: LD_INT 2
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 1
25746: PUSH
25747: LD_INT 2
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 0
25756: PUSH
25757: LD_INT 2
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 1
25766: NEG
25767: PUSH
25768: LD_INT 1
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 2
25777: NEG
25778: PUSH
25779: LD_INT 0
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 2
25788: NEG
25789: PUSH
25790: LD_INT 1
25792: NEG
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 2
25800: NEG
25801: PUSH
25802: LD_INT 2
25804: NEG
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
25831: LD_ADDR_VAR 0 23
25835: PUSH
25836: LD_INT 0
25838: PUSH
25839: LD_INT 0
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: LD_INT 1
25851: NEG
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 1
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: PUSH
25870: LD_INT 1
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 1
25889: NEG
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: NEG
25901: PUSH
25902: LD_INT 1
25904: NEG
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 1
25912: NEG
25913: PUSH
25914: LD_INT 2
25916: NEG
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 0
25924: PUSH
25925: LD_INT 2
25927: NEG
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: LD_INT 1
25938: NEG
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 2
25946: PUSH
25947: LD_INT 0
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 2
25956: PUSH
25957: LD_INT 1
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 2
25966: PUSH
25967: LD_INT 2
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 1
25976: PUSH
25977: LD_INT 2
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 0
25986: PUSH
25987: LD_INT 2
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 1
25996: NEG
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 2
26007: NEG
26008: PUSH
26009: LD_INT 0
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 2
26018: NEG
26019: PUSH
26020: LD_INT 1
26022: NEG
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 2
26030: NEG
26031: PUSH
26032: LD_INT 2
26034: NEG
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 2
26042: NEG
26043: PUSH
26044: LD_INT 3
26046: NEG
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 1
26054: NEG
26055: PUSH
26056: LD_INT 3
26058: NEG
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 1
26066: PUSH
26067: LD_INT 2
26069: NEG
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 2
26077: PUSH
26078: LD_INT 1
26080: NEG
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26111: LD_ADDR_VAR 0 24
26115: PUSH
26116: LD_INT 0
26118: PUSH
26119: LD_INT 0
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 0
26128: PUSH
26129: LD_INT 1
26131: NEG
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 1
26139: PUSH
26140: LD_INT 0
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 1
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 0
26159: PUSH
26160: LD_INT 1
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 1
26169: NEG
26170: PUSH
26171: LD_INT 0
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 1
26180: NEG
26181: PUSH
26182: LD_INT 1
26184: NEG
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 1
26192: NEG
26193: PUSH
26194: LD_INT 2
26196: NEG
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 0
26204: PUSH
26205: LD_INT 2
26207: NEG
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: LD_INT 1
26218: NEG
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 2
26226: PUSH
26227: LD_INT 0
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 2
26236: PUSH
26237: LD_INT 1
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 2
26246: PUSH
26247: LD_INT 2
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 1
26256: PUSH
26257: LD_INT 2
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: LD_INT 2
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 1
26276: NEG
26277: PUSH
26278: LD_INT 1
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 2
26287: NEG
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 2
26298: NEG
26299: PUSH
26300: LD_INT 1
26302: NEG
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 2
26310: NEG
26311: PUSH
26312: LD_INT 2
26314: NEG
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: LD_INT 2
26325: NEG
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 2
26333: PUSH
26334: LD_INT 1
26336: NEG
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 3
26344: PUSH
26345: LD_INT 1
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 3
26354: PUSH
26355: LD_INT 2
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26387: LD_ADDR_VAR 0 25
26391: PUSH
26392: LD_INT 0
26394: PUSH
26395: LD_INT 0
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: LD_INT 1
26407: NEG
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 1
26415: PUSH
26416: LD_INT 0
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: LD_INT 1
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 0
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 1
26445: NEG
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 1
26468: NEG
26469: PUSH
26470: LD_INT 2
26472: NEG
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 0
26480: PUSH
26481: LD_INT 2
26483: NEG
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: LD_INT 2
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: LD_INT 2
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 0
26542: PUSH
26543: LD_INT 2
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 1
26552: NEG
26553: PUSH
26554: LD_INT 1
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 2
26563: NEG
26564: PUSH
26565: LD_INT 0
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 2
26574: NEG
26575: PUSH
26576: LD_INT 1
26578: NEG
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 2
26586: NEG
26587: PUSH
26588: LD_INT 2
26590: NEG
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 3
26598: PUSH
26599: LD_INT 1
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 3
26608: PUSH
26609: LD_INT 2
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 2
26618: PUSH
26619: LD_INT 3
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 1
26628: PUSH
26629: LD_INT 3
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26661: LD_ADDR_VAR 0 26
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: LD_INT 0
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 0
26678: PUSH
26679: LD_INT 1
26681: NEG
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 1
26689: PUSH
26690: LD_INT 0
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 0
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 1
26719: NEG
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 1
26730: NEG
26731: PUSH
26732: LD_INT 1
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 1
26742: NEG
26743: PUSH
26744: LD_INT 2
26746: NEG
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: LD_INT 2
26757: NEG
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: LD_INT 1
26768: NEG
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 2
26786: PUSH
26787: LD_INT 1
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 2
26796: PUSH
26797: LD_INT 2
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 1
26806: PUSH
26807: LD_INT 2
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: LD_INT 2
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 1
26826: NEG
26827: PUSH
26828: LD_INT 1
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 2
26837: NEG
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 2
26848: NEG
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 2
26860: NEG
26861: PUSH
26862: LD_INT 2
26864: NEG
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 2
26872: PUSH
26873: LD_INT 3
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 1
26882: PUSH
26883: LD_INT 3
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 1
26892: NEG
26893: PUSH
26894: LD_INT 2
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 2
26903: NEG
26904: PUSH
26905: LD_INT 1
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26937: LD_ADDR_VAR 0 27
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: LD_INT 0
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: LD_INT 1
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 1
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: PUSH
26976: LD_INT 1
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: LD_INT 1
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 1
27006: NEG
27007: PUSH
27008: LD_INT 1
27010: NEG
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 1
27018: NEG
27019: PUSH
27020: LD_INT 2
27022: NEG
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 0
27030: PUSH
27031: LD_INT 2
27033: NEG
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: LD_INT 1
27044: NEG
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 2
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 2
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 2
27072: PUSH
27073: LD_INT 2
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 1
27082: PUSH
27083: LD_INT 2
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 0
27092: PUSH
27093: LD_INT 2
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: LD_INT 1
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 2
27113: NEG
27114: PUSH
27115: LD_INT 0
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 2
27124: NEG
27125: PUSH
27126: LD_INT 1
27128: NEG
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 2
27136: NEG
27137: PUSH
27138: LD_INT 2
27140: NEG
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 1
27148: NEG
27149: PUSH
27150: LD_INT 2
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 2
27159: NEG
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 3
27170: NEG
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 3
27182: NEG
27183: PUSH
27184: LD_INT 2
27186: NEG
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27217: LD_ADDR_VAR 0 28
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: LD_INT 0
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: LD_INT 1
27237: NEG
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 1
27245: PUSH
27246: LD_INT 0
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 1
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 0
27265: PUSH
27266: LD_INT 1
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 1
27275: NEG
27276: PUSH
27277: LD_INT 0
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 1
27286: NEG
27287: PUSH
27288: LD_INT 1
27290: NEG
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 1
27298: NEG
27299: PUSH
27300: LD_INT 2
27302: NEG
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: LD_INT 2
27313: NEG
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 1
27321: PUSH
27322: LD_INT 1
27324: NEG
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 2
27332: PUSH
27333: LD_INT 0
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 2
27342: PUSH
27343: LD_INT 1
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 2
27352: PUSH
27353: LD_INT 2
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: LD_INT 2
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 2
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 1
27382: NEG
27383: PUSH
27384: LD_INT 1
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 2
27393: NEG
27394: PUSH
27395: LD_INT 0
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 2
27404: NEG
27405: PUSH
27406: LD_INT 1
27408: NEG
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 2
27416: NEG
27417: PUSH
27418: LD_INT 2
27420: NEG
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 2
27428: NEG
27429: PUSH
27430: LD_INT 3
27432: NEG
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 1
27440: NEG
27441: PUSH
27442: LD_INT 3
27444: NEG
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 3
27452: NEG
27453: PUSH
27454: LD_INT 1
27456: NEG
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 3
27464: NEG
27465: PUSH
27466: LD_INT 2
27468: NEG
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27499: LD_ADDR_VAR 0 29
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: LD_INT 0
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: PUSH
27538: LD_INT 1
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 1
27568: NEG
27569: PUSH
27570: LD_INT 1
27572: NEG
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 1
27580: NEG
27581: PUSH
27582: LD_INT 2
27584: NEG
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 0
27592: PUSH
27593: LD_INT 2
27595: NEG
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 1
27603: PUSH
27604: LD_INT 1
27606: NEG
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 2
27614: PUSH
27615: LD_INT 0
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: LD_INT 1
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 1
27634: PUSH
27635: LD_INT 2
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 0
27644: PUSH
27645: LD_INT 2
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 1
27654: NEG
27655: PUSH
27656: LD_INT 1
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 2
27665: NEG
27666: PUSH
27667: LD_INT 1
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 2
27677: NEG
27678: PUSH
27679: LD_INT 2
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 2
27689: NEG
27690: PUSH
27691: LD_INT 3
27693: NEG
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 2
27701: PUSH
27702: LD_INT 1
27704: NEG
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 3
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: LD_INT 3
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: LD_INT 2
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 3
27743: NEG
27744: PUSH
27745: LD_INT 2
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27778: LD_ADDR_VAR 0 30
27782: PUSH
27783: LD_INT 0
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 1
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 0
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 1
27836: NEG
27837: PUSH
27838: LD_INT 0
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 1
27847: NEG
27848: PUSH
27849: LD_INT 1
27851: NEG
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: LD_INT 2
27863: NEG
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 0
27871: PUSH
27872: LD_INT 2
27874: NEG
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 1
27882: PUSH
27883: LD_INT 1
27885: NEG
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 2
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 2
27903: PUSH
27904: LD_INT 1
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 2
27913: PUSH
27914: LD_INT 2
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: PUSH
27924: LD_INT 2
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: NEG
27934: PUSH
27935: LD_INT 1
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 2
27944: NEG
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 2
27955: NEG
27956: PUSH
27957: LD_INT 1
27959: NEG
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 1
27967: NEG
27968: PUSH
27969: LD_INT 3
27971: NEG
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: LD_INT 2
27982: NEG
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 3
27990: PUSH
27991: LD_INT 2
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 2
28000: PUSH
28001: LD_INT 3
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 2
28010: NEG
28011: PUSH
28012: LD_INT 1
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 3
28021: NEG
28022: PUSH
28023: LD_INT 1
28025: NEG
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28056: LD_ADDR_VAR 0 31
28060: PUSH
28061: LD_INT 0
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 0
28073: PUSH
28074: LD_INT 1
28076: NEG
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 1
28084: PUSH
28085: LD_INT 0
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 1
28094: PUSH
28095: LD_INT 1
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 0
28104: PUSH
28105: LD_INT 1
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 1
28114: NEG
28115: PUSH
28116: LD_INT 0
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: LD_INT 1
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 1
28137: NEG
28138: PUSH
28139: LD_INT 2
28141: NEG
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 1
28149: PUSH
28150: LD_INT 1
28152: NEG
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 2
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 2
28170: PUSH
28171: LD_INT 1
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 2
28180: PUSH
28181: LD_INT 2
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 1
28190: PUSH
28191: LD_INT 2
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: LD_INT 2
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 1
28210: NEG
28211: PUSH
28212: LD_INT 1
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 2
28221: NEG
28222: PUSH
28223: LD_INT 1
28225: NEG
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 2
28233: NEG
28234: PUSH
28235: LD_INT 2
28237: NEG
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 2
28245: NEG
28246: PUSH
28247: LD_INT 3
28249: NEG
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 2
28257: PUSH
28258: LD_INT 1
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 3
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: LD_INT 3
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 1
28288: NEG
28289: PUSH
28290: LD_INT 2
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 3
28299: NEG
28300: PUSH
28301: LD_INT 2
28303: NEG
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28334: LD_ADDR_VAR 0 32
28338: PUSH
28339: LD_INT 0
28341: PUSH
28342: LD_INT 0
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 0
28351: PUSH
28352: LD_INT 1
28354: NEG
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 1
28362: PUSH
28363: LD_INT 0
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 1
28372: PUSH
28373: LD_INT 1
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 0
28382: PUSH
28383: LD_INT 1
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 1
28392: NEG
28393: PUSH
28394: LD_INT 0
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 1
28403: NEG
28404: PUSH
28405: LD_INT 1
28407: NEG
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 1
28415: NEG
28416: PUSH
28417: LD_INT 2
28419: NEG
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: LD_INT 2
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: LD_INT 1
28441: NEG
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 2
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 2
28459: PUSH
28460: LD_INT 2
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 1
28469: PUSH
28470: LD_INT 2
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: LD_INT 2
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 1
28489: NEG
28490: PUSH
28491: LD_INT 1
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 2
28500: NEG
28501: PUSH
28502: LD_INT 0
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 2
28511: NEG
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: LD_INT 3
28527: NEG
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: LD_INT 2
28538: NEG
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 3
28546: PUSH
28547: LD_INT 2
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 2
28556: PUSH
28557: LD_INT 3
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 2
28566: NEG
28567: PUSH
28568: LD_INT 1
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 3
28577: NEG
28578: PUSH
28579: LD_INT 1
28581: NEG
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28612: LD_ADDR_VAR 0 33
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: LD_INT 1
28632: NEG
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: LD_INT 0
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 0
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: NEG
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 1
28681: NEG
28682: PUSH
28683: LD_INT 1
28685: NEG
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: NEG
28694: PUSH
28695: LD_INT 2
28697: NEG
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 1
28705: PUSH
28706: LD_INT 1
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 2
28716: PUSH
28717: LD_INT 0
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: LD_INT 1
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 1
28736: PUSH
28737: LD_INT 2
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 0
28746: PUSH
28747: LD_INT 2
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: LD_INT 1
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 2
28767: NEG
28768: PUSH
28769: LD_INT 0
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 2
28778: NEG
28779: PUSH
28780: LD_INT 1
28782: NEG
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 2
28790: NEG
28791: PUSH
28792: LD_INT 2
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 2
28802: NEG
28803: PUSH
28804: LD_INT 3
28806: NEG
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 2
28814: PUSH
28815: LD_INT 1
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 3
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: LD_INT 3
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 1
28845: NEG
28846: PUSH
28847: LD_INT 2
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 3
28856: NEG
28857: PUSH
28858: LD_INT 2
28860: NEG
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28891: LD_ADDR_VAR 0 34
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 0
28908: PUSH
28909: LD_INT 1
28911: NEG
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 1
28919: PUSH
28920: LD_INT 0
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: LD_INT 1
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 0
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 1
28949: NEG
28950: PUSH
28951: LD_INT 0
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 1
28960: NEG
28961: PUSH
28962: LD_INT 1
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 1
28972: NEG
28973: PUSH
28974: LD_INT 2
28976: NEG
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 0
28984: PUSH
28985: LD_INT 2
28987: NEG
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: LD_INT 1
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 2
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 2
29016: PUSH
29017: LD_INT 2
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 1
29026: PUSH
29027: LD_INT 2
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 1
29036: NEG
29037: PUSH
29038: LD_INT 1
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 2
29047: NEG
29048: PUSH
29049: LD_INT 0
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 2
29058: NEG
29059: PUSH
29060: LD_INT 1
29062: NEG
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 2
29070: NEG
29071: PUSH
29072: LD_INT 2
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 1
29082: NEG
29083: PUSH
29084: LD_INT 3
29086: NEG
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 1
29094: PUSH
29095: LD_INT 2
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 3
29105: PUSH
29106: LD_INT 2
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 2
29115: PUSH
29116: LD_INT 3
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 2
29125: NEG
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 3
29136: NEG
29137: PUSH
29138: LD_INT 1
29140: NEG
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29171: LD_ADDR_VAR 0 35
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: LD_INT 1
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: LD_INT 0
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: LD_INT 1
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 0
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 1
29229: NEG
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 1
29240: NEG
29241: PUSH
29242: LD_INT 1
29244: NEG
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 2
29252: PUSH
29253: LD_INT 1
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 2
29262: NEG
29263: PUSH
29264: LD_INT 1
29266: NEG
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29283: LD_ADDR_VAR 0 36
29287: PUSH
29288: LD_INT 0
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 0
29300: PUSH
29301: LD_INT 1
29303: NEG
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 1
29311: PUSH
29312: LD_INT 0
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 1
29321: PUSH
29322: LD_INT 1
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 0
29331: PUSH
29332: LD_INT 1
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 1
29341: NEG
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 1
29352: NEG
29353: PUSH
29354: LD_INT 1
29356: NEG
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: LD_INT 2
29368: NEG
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: LD_INT 2
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29395: LD_ADDR_VAR 0 37
29399: PUSH
29400: LD_INT 0
29402: PUSH
29403: LD_INT 0
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: LD_INT 1
29415: NEG
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 1
29423: PUSH
29424: LD_INT 0
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: LD_INT 1
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: LD_INT 1
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 1
29453: NEG
29454: PUSH
29455: LD_INT 0
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 1
29464: NEG
29465: PUSH
29466: LD_INT 1
29468: NEG
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 1
29476: PUSH
29477: LD_INT 1
29479: NEG
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 1
29487: NEG
29488: PUSH
29489: LD_INT 1
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29507: LD_ADDR_VAR 0 38
29511: PUSH
29512: LD_INT 0
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 0
29524: PUSH
29525: LD_INT 1
29527: NEG
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 1
29535: PUSH
29536: LD_INT 0
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 1
29545: PUSH
29546: LD_INT 1
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 0
29555: PUSH
29556: LD_INT 1
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 1
29565: NEG
29566: PUSH
29567: LD_INT 0
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 1
29576: NEG
29577: PUSH
29578: LD_INT 1
29580: NEG
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 2
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 2
29598: NEG
29599: PUSH
29600: LD_INT 1
29602: NEG
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29619: LD_ADDR_VAR 0 39
29623: PUSH
29624: LD_INT 0
29626: PUSH
29627: LD_INT 0
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 0
29636: PUSH
29637: LD_INT 1
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 1
29647: PUSH
29648: LD_INT 0
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 1
29657: PUSH
29658: LD_INT 1
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 0
29667: PUSH
29668: LD_INT 1
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 1
29677: NEG
29678: PUSH
29679: LD_INT 0
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 1
29688: NEG
29689: PUSH
29690: LD_INT 1
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 1
29700: NEG
29701: PUSH
29702: LD_INT 2
29704: NEG
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 1
29712: PUSH
29713: LD_INT 2
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29731: LD_ADDR_VAR 0 40
29735: PUSH
29736: LD_INT 0
29738: PUSH
29739: LD_INT 0
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 0
29748: PUSH
29749: LD_INT 1
29751: NEG
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 1
29759: PUSH
29760: LD_INT 0
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 1
29769: PUSH
29770: LD_INT 1
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 0
29779: PUSH
29780: LD_INT 1
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 1
29789: NEG
29790: PUSH
29791: LD_INT 0
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 1
29800: NEG
29801: PUSH
29802: LD_INT 1
29804: NEG
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 1
29812: PUSH
29813: LD_INT 1
29815: NEG
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: NEG
29824: PUSH
29825: LD_INT 1
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29843: LD_ADDR_VAR 0 41
29847: PUSH
29848: LD_INT 0
29850: PUSH
29851: LD_INT 0
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 0
29860: PUSH
29861: LD_INT 1
29863: NEG
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 1
29871: PUSH
29872: LD_INT 0
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 1
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 0
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 1
29901: NEG
29902: PUSH
29903: LD_INT 0
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 1
29912: NEG
29913: PUSH
29914: LD_INT 1
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 1
29924: NEG
29925: PUSH
29926: LD_INT 2
29928: NEG
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: LD_INT 1
29939: NEG
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 2
29947: PUSH
29948: LD_INT 0
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 2
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 2
29967: PUSH
29968: LD_INT 2
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: LD_INT 2
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 1
29987: NEG
29988: PUSH
29989: LD_INT 1
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 2
29998: NEG
29999: PUSH
30000: LD_INT 0
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 2
30009: NEG
30010: PUSH
30011: LD_INT 1
30013: NEG
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 2
30021: NEG
30022: PUSH
30023: LD_INT 2
30025: NEG
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 2
30033: NEG
30034: PUSH
30035: LD_INT 3
30037: NEG
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 2
30045: PUSH
30046: LD_INT 1
30048: NEG
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 3
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 3
30066: PUSH
30067: LD_INT 1
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 3
30076: PUSH
30077: LD_INT 2
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 3
30086: PUSH
30087: LD_INT 3
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 2
30096: PUSH
30097: LD_INT 3
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 2
30106: NEG
30107: PUSH
30108: LD_INT 1
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 3
30117: NEG
30118: PUSH
30119: LD_INT 0
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 3
30128: NEG
30129: PUSH
30130: LD_INT 1
30132: NEG
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 3
30140: NEG
30141: PUSH
30142: LD_INT 2
30144: NEG
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 3
30152: NEG
30153: PUSH
30154: LD_INT 3
30156: NEG
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30193: LD_ADDR_VAR 0 42
30197: PUSH
30198: LD_INT 0
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 0
30210: PUSH
30211: LD_INT 1
30213: NEG
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: LD_INT 0
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 1
30231: PUSH
30232: LD_INT 1
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: LD_INT 0
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 1
30262: NEG
30263: PUSH
30264: LD_INT 1
30266: NEG
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 1
30274: NEG
30275: PUSH
30276: LD_INT 2
30278: NEG
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: LD_INT 2
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: LD_INT 1
30300: NEG
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 2
30308: PUSH
30309: LD_INT 1
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 2
30318: PUSH
30319: LD_INT 2
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 1
30328: PUSH
30329: LD_INT 2
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 0
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 1
30348: NEG
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 2
30359: NEG
30360: PUSH
30361: LD_INT 1
30363: NEG
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 2
30371: NEG
30372: PUSH
30373: LD_INT 2
30375: NEG
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 2
30383: NEG
30384: PUSH
30385: LD_INT 3
30387: NEG
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 1
30395: NEG
30396: PUSH
30397: LD_INT 3
30399: NEG
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: LD_INT 3
30410: NEG
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 1
30418: PUSH
30419: LD_INT 2
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 3
30429: PUSH
30430: LD_INT 2
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 3
30439: PUSH
30440: LD_INT 3
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 2
30449: PUSH
30450: LD_INT 3
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 1
30459: PUSH
30460: LD_INT 3
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: LD_INT 3
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 1
30479: NEG
30480: PUSH
30481: LD_INT 2
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 3
30490: NEG
30491: PUSH
30492: LD_INT 2
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 3
30502: NEG
30503: PUSH
30504: LD_INT 3
30506: NEG
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30543: LD_ADDR_VAR 0 43
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: LD_INT 0
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: LD_INT 1
30563: NEG
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: LD_INT 0
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 0
30591: PUSH
30592: LD_INT 1
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 1
30601: NEG
30602: PUSH
30603: LD_INT 0
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 1
30612: NEG
30613: PUSH
30614: LD_INT 1
30616: NEG
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 1
30624: NEG
30625: PUSH
30626: LD_INT 2
30628: NEG
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 0
30636: PUSH
30637: LD_INT 2
30639: NEG
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 2
30658: PUSH
30659: LD_INT 0
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 2
30668: PUSH
30669: LD_INT 1
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 1
30678: PUSH
30679: LD_INT 2
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 0
30688: PUSH
30689: LD_INT 2
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 1
30698: NEG
30699: PUSH
30700: LD_INT 1
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 2
30709: NEG
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 2
30720: NEG
30721: PUSH
30722: LD_INT 1
30724: NEG
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 1
30732: NEG
30733: PUSH
30734: LD_INT 3
30736: NEG
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: LD_INT 3
30747: NEG
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 1
30755: PUSH
30756: LD_INT 2
30758: NEG
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 2
30766: PUSH
30767: LD_INT 1
30769: NEG
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 3
30777: PUSH
30778: LD_INT 0
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 3
30787: PUSH
30788: LD_INT 1
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 1
30797: PUSH
30798: LD_INT 3
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 0
30807: PUSH
30808: LD_INT 3
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 1
30817: NEG
30818: PUSH
30819: LD_INT 2
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 2
30828: NEG
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 3
30839: NEG
30840: PUSH
30841: LD_INT 0
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 3
30850: NEG
30851: PUSH
30852: LD_INT 1
30854: NEG
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30891: LD_ADDR_VAR 0 44
30895: PUSH
30896: LD_INT 0
30898: PUSH
30899: LD_INT 0
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 0
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: LD_INT 0
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 0
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 1
30949: NEG
30950: PUSH
30951: LD_INT 0
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 1
30960: NEG
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 1
30972: NEG
30973: PUSH
30974: LD_INT 2
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 1
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 2
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 2
31005: PUSH
31006: LD_INT 1
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 2
31015: PUSH
31016: LD_INT 2
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 1
31025: PUSH
31026: LD_INT 2
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 1
31035: NEG
31036: PUSH
31037: LD_INT 1
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 2
31046: NEG
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 2
31057: NEG
31058: PUSH
31059: LD_INT 1
31061: NEG
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 2
31069: NEG
31070: PUSH
31071: LD_INT 2
31073: NEG
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 2
31081: NEG
31082: PUSH
31083: LD_INT 3
31085: NEG
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 2
31093: PUSH
31094: LD_INT 1
31096: NEG
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 3
31104: PUSH
31105: LD_INT 0
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 3
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 3
31124: PUSH
31125: LD_INT 2
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 3
31134: PUSH
31135: LD_INT 3
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 2
31144: PUSH
31145: LD_INT 3
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 2
31154: NEG
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 3
31165: NEG
31166: PUSH
31167: LD_INT 0
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 3
31176: NEG
31177: PUSH
31178: LD_INT 1
31180: NEG
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 3
31188: NEG
31189: PUSH
31190: LD_INT 2
31192: NEG
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 3
31200: NEG
31201: PUSH
31202: LD_INT 3
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31241: LD_ADDR_VAR 0 45
31245: PUSH
31246: LD_INT 0
31248: PUSH
31249: LD_INT 0
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: LD_INT 1
31261: NEG
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 1
31269: PUSH
31270: LD_INT 0
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 1
31279: PUSH
31280: LD_INT 1
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 0
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 1
31299: NEG
31300: PUSH
31301: LD_INT 0
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 1
31310: NEG
31311: PUSH
31312: LD_INT 1
31314: NEG
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: LD_INT 2
31326: NEG
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: LD_INT 2
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: LD_INT 1
31348: NEG
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 2
31356: PUSH
31357: LD_INT 1
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 2
31366: PUSH
31367: LD_INT 2
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 1
31376: PUSH
31377: LD_INT 2
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: LD_INT 2
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 1
31396: NEG
31397: PUSH
31398: LD_INT 1
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 2
31407: NEG
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 2
31419: NEG
31420: PUSH
31421: LD_INT 2
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 2
31431: NEG
31432: PUSH
31433: LD_INT 3
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 1
31443: NEG
31444: PUSH
31445: LD_INT 3
31447: NEG
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 0
31455: PUSH
31456: LD_INT 3
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 1
31466: PUSH
31467: LD_INT 2
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 3
31477: PUSH
31478: LD_INT 2
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 3
31487: PUSH
31488: LD_INT 3
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 2
31497: PUSH
31498: LD_INT 3
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 1
31507: PUSH
31508: LD_INT 3
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: LD_INT 3
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 1
31527: NEG
31528: PUSH
31529: LD_INT 2
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 3
31538: NEG
31539: PUSH
31540: LD_INT 2
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 3
31550: NEG
31551: PUSH
31552: LD_INT 3
31554: NEG
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31591: LD_ADDR_VAR 0 46
31595: PUSH
31596: LD_INT 0
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: LD_INT 1
31611: NEG
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: LD_INT 1
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 1
31649: NEG
31650: PUSH
31651: LD_INT 0
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 1
31660: NEG
31661: PUSH
31662: LD_INT 1
31664: NEG
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: LD_INT 2
31676: NEG
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 0
31684: PUSH
31685: LD_INT 2
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 2
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: LD_INT 1
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 1
31726: PUSH
31727: LD_INT 2
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: LD_INT 2
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 1
31746: NEG
31747: PUSH
31748: LD_INT 1
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 2
31757: NEG
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 2
31768: NEG
31769: PUSH
31770: LD_INT 1
31772: NEG
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 1
31780: NEG
31781: PUSH
31782: LD_INT 3
31784: NEG
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: LD_INT 3
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 1
31803: PUSH
31804: LD_INT 2
31806: NEG
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 2
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 3
31825: PUSH
31826: LD_INT 0
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 3
31835: PUSH
31836: LD_INT 1
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 1
31845: PUSH
31846: LD_INT 3
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 0
31855: PUSH
31856: LD_INT 3
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 1
31865: NEG
31866: PUSH
31867: LD_INT 2
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 2
31876: NEG
31877: PUSH
31878: LD_INT 1
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 3
31887: NEG
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 3
31898: NEG
31899: PUSH
31900: LD_INT 1
31902: NEG
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31939: LD_ADDR_VAR 0 47
31943: PUSH
31944: LD_INT 0
31946: PUSH
31947: LD_INT 0
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 0
31956: PUSH
31957: LD_INT 1
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 1
31977: PUSH
31978: LD_INT 1
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 0
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 1
31997: NEG
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: LD_INT 1
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 1
32020: NEG
32021: PUSH
32022: LD_INT 2
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: LD_INT 2
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: LD_INT 1
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 2
32054: NEG
32055: PUSH
32056: LD_INT 1
32058: NEG
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 2
32066: NEG
32067: PUSH
32068: LD_INT 2
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32090: LD_ADDR_VAR 0 48
32094: PUSH
32095: LD_INT 0
32097: PUSH
32098: LD_INT 0
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 0
32107: PUSH
32108: LD_INT 1
32110: NEG
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 1
32118: PUSH
32119: LD_INT 0
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 1
32128: PUSH
32129: LD_INT 1
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 0
32138: PUSH
32139: LD_INT 1
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 1
32148: NEG
32149: PUSH
32150: LD_INT 0
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 1
32159: NEG
32160: PUSH
32161: LD_INT 1
32163: NEG
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 1
32171: NEG
32172: PUSH
32173: LD_INT 2
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: LD_INT 2
32186: NEG
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: LD_INT 1
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 2
32205: PUSH
32206: LD_INT 0
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 2
32215: PUSH
32216: LD_INT 1
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32237: LD_ADDR_VAR 0 49
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: LD_INT 0
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 0
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 1
32265: PUSH
32266: LD_INT 0
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 1
32275: PUSH
32276: LD_INT 1
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 0
32285: PUSH
32286: LD_INT 1
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 1
32295: NEG
32296: PUSH
32297: LD_INT 0
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 1
32306: NEG
32307: PUSH
32308: LD_INT 1
32310: NEG
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 1
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 2
32329: PUSH
32330: LD_INT 0
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 2
32339: PUSH
32340: LD_INT 1
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: LD_INT 2
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: LD_INT 2
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32381: LD_ADDR_VAR 0 50
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 0
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 1
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: LD_INT 1
32454: NEG
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 2
32462: PUSH
32463: LD_INT 1
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 2
32472: PUSH
32473: LD_INT 2
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: LD_INT 2
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: LD_INT 2
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: LD_INT 1
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32525: LD_ADDR_VAR 0 51
32529: PUSH
32530: LD_INT 0
32532: PUSH
32533: LD_INT 0
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: LD_INT 1
32545: NEG
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 1
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 1
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 0
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 1
32583: NEG
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 1
32594: NEG
32595: PUSH
32596: LD_INT 1
32598: NEG
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 1
32606: PUSH
32607: LD_INT 2
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: LD_INT 2
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 1
32626: NEG
32627: PUSH
32628: LD_INT 1
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 2
32637: NEG
32638: PUSH
32639: LD_INT 0
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: NEG
32649: PUSH
32650: LD_INT 1
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32672: LD_ADDR_VAR 0 52
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: LD_INT 0
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: LD_INT 1
32692: NEG
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 1
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: LD_INT 1
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: LD_INT 1
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 1
32730: NEG
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 1
32741: NEG
32742: PUSH
32743: LD_INT 1
32745: NEG
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PUSH
32755: LD_INT 2
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: LD_INT 1
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 2
32776: NEG
32777: PUSH
32778: LD_INT 0
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 2
32787: NEG
32788: PUSH
32789: LD_INT 1
32791: NEG
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: NEG
32800: PUSH
32801: LD_INT 2
32803: NEG
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32823: LD_ADDR_VAR 0 53
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: LD_INT 0
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: LD_INT 1
32843: NEG
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 1
32851: PUSH
32852: LD_INT 0
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 1
32861: PUSH
32862: LD_INT 1
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 0
32871: PUSH
32872: LD_INT 1
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 1
32881: NEG
32882: PUSH
32883: LD_INT 0
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 1
32892: NEG
32893: PUSH
32894: LD_INT 1
32896: NEG
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 1
32904: NEG
32905: PUSH
32906: LD_INT 2
32908: NEG
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: LD_INT 2
32919: NEG
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: LD_INT 1
32930: NEG
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 2
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 2
32948: PUSH
32949: LD_INT 1
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 2
32958: PUSH
32959: LD_INT 2
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 1
32968: PUSH
32969: LD_INT 2
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 0
32978: PUSH
32979: LD_INT 2
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 1
32988: NEG
32989: PUSH
32990: LD_INT 1
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 2
32999: NEG
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 2
33010: NEG
33011: PUSH
33012: LD_INT 1
33014: NEG
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 2
33022: NEG
33023: PUSH
33024: LD_INT 2
33026: NEG
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33053: LD_ADDR_VAR 0 54
33057: PUSH
33058: LD_INT 0
33060: PUSH
33061: LD_INT 0
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 1
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 1
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 1
33111: NEG
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 1
33122: NEG
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 1
33134: NEG
33135: PUSH
33136: LD_INT 2
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: LD_INT 2
33149: NEG
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 1
33157: PUSH
33158: LD_INT 1
33160: NEG
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 2
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 2
33178: PUSH
33179: LD_INT 1
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 2
33188: PUSH
33189: LD_INT 2
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 0
33208: PUSH
33209: LD_INT 2
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 1
33218: NEG
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 2
33229: NEG
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 2
33240: NEG
33241: PUSH
33242: LD_INT 1
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 2
33252: NEG
33253: PUSH
33254: LD_INT 2
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33283: LD_ADDR_VAR 0 55
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: LD_INT 0
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: LD_INT 1
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 1
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 1
33341: NEG
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: NEG
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 1
33364: NEG
33365: PUSH
33366: LD_INT 2
33368: NEG
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: LD_INT 2
33379: NEG
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 1
33387: PUSH
33388: LD_INT 1
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 2
33398: PUSH
33399: LD_INT 0
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 2
33408: PUSH
33409: LD_INT 1
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 2
33418: PUSH
33419: LD_INT 2
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 1
33428: PUSH
33429: LD_INT 2
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 0
33438: PUSH
33439: LD_INT 2
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 1
33448: NEG
33449: PUSH
33450: LD_INT 1
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 2
33459: NEG
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 2
33470: NEG
33471: PUSH
33472: LD_INT 1
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 2
33482: NEG
33483: PUSH
33484: LD_INT 2
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33513: LD_ADDR_VAR 0 56
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: LD_INT 0
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 0
33530: PUSH
33531: LD_INT 1
33533: NEG
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 1
33541: PUSH
33542: LD_INT 0
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: LD_INT 1
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 0
33561: PUSH
33562: LD_INT 1
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 1
33571: NEG
33572: PUSH
33573: LD_INT 0
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 1
33582: NEG
33583: PUSH
33584: LD_INT 1
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 1
33594: NEG
33595: PUSH
33596: LD_INT 2
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: LD_INT 2
33609: NEG
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: LD_INT 1
33620: NEG
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 2
33628: PUSH
33629: LD_INT 0
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 2
33638: PUSH
33639: LD_INT 1
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 2
33648: PUSH
33649: LD_INT 2
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 1
33658: PUSH
33659: LD_INT 2
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: LD_INT 2
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 1
33678: NEG
33679: PUSH
33680: LD_INT 1
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 2
33689: NEG
33690: PUSH
33691: LD_INT 0
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 2
33700: NEG
33701: PUSH
33702: LD_INT 1
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 2
33712: NEG
33713: PUSH
33714: LD_INT 2
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33743: LD_ADDR_VAR 0 57
33747: PUSH
33748: LD_INT 0
33750: PUSH
33751: LD_INT 0
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 0
33760: PUSH
33761: LD_INT 1
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 1
33771: PUSH
33772: LD_INT 0
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 1
33781: PUSH
33782: LD_INT 1
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: LD_INT 1
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: LD_INT 0
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: LD_INT 1
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 1
33824: NEG
33825: PUSH
33826: LD_INT 2
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: LD_INT 2
33839: NEG
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 1
33847: PUSH
33848: LD_INT 1
33850: NEG
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 2
33858: PUSH
33859: LD_INT 0
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 2
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 2
33878: PUSH
33879: LD_INT 2
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: LD_INT 2
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 0
33898: PUSH
33899: LD_INT 2
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 1
33908: NEG
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 2
33919: NEG
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 2
33930: NEG
33931: PUSH
33932: LD_INT 1
33934: NEG
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 2
33942: NEG
33943: PUSH
33944: LD_INT 2
33946: NEG
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33973: LD_ADDR_VAR 0 58
33977: PUSH
33978: LD_INT 0
33980: PUSH
33981: LD_INT 0
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 0
33990: PUSH
33991: LD_INT 1
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 1
34001: PUSH
34002: LD_INT 0
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 1
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: NEG
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 1
34054: NEG
34055: PUSH
34056: LD_INT 2
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: LD_INT 2
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: PUSH
34089: LD_INT 0
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 2
34098: PUSH
34099: LD_INT 1
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 2
34108: PUSH
34109: LD_INT 2
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 1
34118: PUSH
34119: LD_INT 2
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 0
34128: PUSH
34129: LD_INT 2
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 1
34138: NEG
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 2
34149: NEG
34150: PUSH
34151: LD_INT 0
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 2
34160: NEG
34161: PUSH
34162: LD_INT 1
34164: NEG
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 2
34172: NEG
34173: PUSH
34174: LD_INT 2
34176: NEG
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34203: LD_ADDR_VAR 0 59
34207: PUSH
34208: LD_INT 0
34210: PUSH
34211: LD_INT 0
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 0
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 1
34231: PUSH
34232: LD_INT 0
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 1
34241: PUSH
34242: LD_INT 1
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: LD_INT 1
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 1
34272: NEG
34273: PUSH
34274: LD_INT 1
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34291: LD_ADDR_VAR 0 60
34295: PUSH
34296: LD_INT 0
34298: PUSH
34299: LD_INT 0
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: LD_INT 1
34311: NEG
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 1
34319: PUSH
34320: LD_INT 0
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 1
34329: PUSH
34330: LD_INT 1
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 0
34339: PUSH
34340: LD_INT 1
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 1
34349: NEG
34350: PUSH
34351: LD_INT 0
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 1
34360: NEG
34361: PUSH
34362: LD_INT 1
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34379: LD_ADDR_VAR 0 61
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: LD_INT 1
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: LD_INT 0
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: LD_INT 1
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 0
34427: PUSH
34428: LD_INT 1
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: LD_INT 1
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34467: LD_ADDR_VAR 0 62
34471: PUSH
34472: LD_INT 0
34474: PUSH
34475: LD_INT 0
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: LD_INT 1
34487: NEG
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 1
34495: PUSH
34496: LD_INT 0
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 1
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 0
34515: PUSH
34516: LD_INT 1
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 1
34525: NEG
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34555: LD_ADDR_VAR 0 63
34559: PUSH
34560: LD_INT 0
34562: PUSH
34563: LD_INT 0
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 0
34572: PUSH
34573: LD_INT 1
34575: NEG
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 1
34583: PUSH
34584: LD_INT 0
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 1
34593: PUSH
34594: LD_INT 1
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 0
34603: PUSH
34604: LD_INT 1
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 1
34624: NEG
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34643: LD_ADDR_VAR 0 64
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 0
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: NEG
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: ST_TO_ADDR
// end ; 1 :
34731: GO 40628
34733: LD_INT 1
34735: DOUBLE
34736: EQUAL
34737: IFTRUE 34741
34739: GO 37364
34741: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34742: LD_ADDR_VAR 0 11
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: LD_INT 3
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: LD_INT 3
34764: NEG
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 1
34772: PUSH
34773: LD_INT 2
34775: NEG
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: LIST
34785: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34786: LD_ADDR_VAR 0 12
34790: PUSH
34791: LD_INT 2
34793: PUSH
34794: LD_INT 1
34796: NEG
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 3
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 3
34814: PUSH
34815: LD_INT 1
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: LIST
34826: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34827: LD_ADDR_VAR 0 13
34831: PUSH
34832: LD_INT 3
34834: PUSH
34835: LD_INT 2
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 3
34844: PUSH
34845: LD_INT 3
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: LD_INT 3
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: LIST
34866: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34867: LD_ADDR_VAR 0 14
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: LD_INT 3
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: LD_INT 3
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 1
34894: NEG
34895: PUSH
34896: LD_INT 2
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: LIST
34907: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34908: LD_ADDR_VAR 0 15
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: LD_INT 1
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 3
34926: NEG
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 3
34937: NEG
34938: PUSH
34939: LD_INT 1
34941: NEG
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: LIST
34951: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34952: LD_ADDR_VAR 0 16
34956: PUSH
34957: LD_INT 2
34959: NEG
34960: PUSH
34961: LD_INT 3
34963: NEG
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 3
34971: NEG
34972: PUSH
34973: LD_INT 2
34975: NEG
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 3
34983: NEG
34984: PUSH
34985: LD_INT 3
34987: NEG
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: LIST
34997: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34998: LD_ADDR_VAR 0 17
35002: PUSH
35003: LD_INT 1
35005: NEG
35006: PUSH
35007: LD_INT 3
35009: NEG
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 3
35020: NEG
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: LD_INT 2
35031: NEG
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: LIST
35041: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35042: LD_ADDR_VAR 0 18
35046: PUSH
35047: LD_INT 2
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 3
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 3
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: LIST
35082: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35083: LD_ADDR_VAR 0 19
35087: PUSH
35088: LD_INT 3
35090: PUSH
35091: LD_INT 2
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 3
35100: PUSH
35101: LD_INT 3
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: LD_INT 3
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: LIST
35122: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35123: LD_ADDR_VAR 0 20
35127: PUSH
35128: LD_INT 1
35130: PUSH
35131: LD_INT 3
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 0
35140: PUSH
35141: LD_INT 3
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 1
35150: NEG
35151: PUSH
35152: LD_INT 2
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: LIST
35163: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35164: LD_ADDR_VAR 0 21
35168: PUSH
35169: LD_INT 2
35171: NEG
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 3
35182: NEG
35183: PUSH
35184: LD_INT 0
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 3
35193: NEG
35194: PUSH
35195: LD_INT 1
35197: NEG
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: LIST
35207: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35208: LD_ADDR_VAR 0 22
35212: PUSH
35213: LD_INT 2
35215: NEG
35216: PUSH
35217: LD_INT 3
35219: NEG
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 3
35227: NEG
35228: PUSH
35229: LD_INT 2
35231: NEG
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 3
35239: NEG
35240: PUSH
35241: LD_INT 3
35243: NEG
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: LIST
35253: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35254: LD_ADDR_VAR 0 23
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: LD_INT 3
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: LD_INT 4
35276: NEG
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 1
35284: PUSH
35285: LD_INT 3
35287: NEG
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: LIST
35297: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35298: LD_ADDR_VAR 0 24
35302: PUSH
35303: LD_INT 3
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 3
35315: PUSH
35316: LD_INT 1
35318: NEG
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 4
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: LIST
35338: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35339: LD_ADDR_VAR 0 25
35343: PUSH
35344: LD_INT 3
35346: PUSH
35347: LD_INT 3
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 4
35356: PUSH
35357: LD_INT 3
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 3
35366: PUSH
35367: LD_INT 4
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: LIST
35378: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35379: LD_ADDR_VAR 0 26
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: LD_INT 3
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: PUSH
35397: LD_INT 4
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: LD_INT 3
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35420: LD_ADDR_VAR 0 27
35424: PUSH
35425: LD_INT 3
35427: NEG
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 3
35438: NEG
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 4
35449: NEG
35450: PUSH
35451: LD_INT 1
35453: NEG
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: LIST
35463: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35464: LD_ADDR_VAR 0 28
35468: PUSH
35469: LD_INT 3
35471: NEG
35472: PUSH
35473: LD_INT 3
35475: NEG
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 3
35483: NEG
35484: PUSH
35485: LD_INT 4
35487: NEG
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 4
35495: NEG
35496: PUSH
35497: LD_INT 3
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: LIST
35509: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35510: LD_ADDR_VAR 0 29
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: LD_INT 3
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: LD_INT 3
35532: NEG
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: LD_INT 2
35543: NEG
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 1
35551: NEG
35552: PUSH
35553: LD_INT 4
35555: NEG
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 0
35563: PUSH
35564: LD_INT 4
35566: NEG
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 1
35574: PUSH
35575: LD_INT 3
35577: NEG
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 1
35585: NEG
35586: PUSH
35587: LD_INT 5
35589: NEG
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 0
35597: PUSH
35598: LD_INT 5
35600: NEG
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 1
35608: PUSH
35609: LD_INT 4
35611: NEG
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 1
35619: NEG
35620: PUSH
35621: LD_INT 6
35623: NEG
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 0
35631: PUSH
35632: LD_INT 6
35634: NEG
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: LD_INT 5
35645: NEG
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35665: LD_ADDR_VAR 0 30
35669: PUSH
35670: LD_INT 2
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 3
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 3
35693: PUSH
35694: LD_INT 1
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 3
35703: PUSH
35704: LD_INT 1
35706: NEG
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 4
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 4
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 4
35734: PUSH
35735: LD_INT 1
35737: NEG
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 5
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 5
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 5
35765: PUSH
35766: LD_INT 1
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 6
35776: PUSH
35777: LD_INT 0
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 6
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
35808: LD_ADDR_VAR 0 31
35812: PUSH
35813: LD_INT 3
35815: PUSH
35816: LD_INT 2
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 3
35825: PUSH
35826: LD_INT 3
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 2
35835: PUSH
35836: LD_INT 3
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 4
35845: PUSH
35846: LD_INT 3
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 4
35855: PUSH
35856: LD_INT 4
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 3
35865: PUSH
35866: LD_INT 4
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 5
35875: PUSH
35876: LD_INT 4
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 5
35885: PUSH
35886: LD_INT 5
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 4
35895: PUSH
35896: LD_INT 5
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 6
35905: PUSH
35906: LD_INT 5
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 6
35915: PUSH
35916: LD_INT 6
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 5
35925: PUSH
35926: LD_INT 6
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
35947: LD_ADDR_VAR 0 32
35951: PUSH
35952: LD_INT 1
35954: PUSH
35955: LD_INT 3
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 0
35964: PUSH
35965: LD_INT 3
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 1
35974: NEG
35975: PUSH
35976: LD_INT 2
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: LD_INT 4
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: LD_INT 4
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: LD_INT 3
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: LD_INT 5
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: LD_INT 5
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 1
36036: NEG
36037: PUSH
36038: LD_INT 4
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: PUSH
36048: LD_INT 6
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 0
36057: PUSH
36058: LD_INT 6
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: NEG
36068: PUSH
36069: LD_INT 5
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36090: LD_ADDR_VAR 0 33
36094: PUSH
36095: LD_INT 2
36097: NEG
36098: PUSH
36099: LD_INT 1
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 3
36108: NEG
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 3
36119: NEG
36120: PUSH
36121: LD_INT 1
36123: NEG
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 3
36131: NEG
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 4
36142: NEG
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 4
36153: NEG
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 4
36165: NEG
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 5
36176: NEG
36177: PUSH
36178: LD_INT 0
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 5
36187: NEG
36188: PUSH
36189: LD_INT 1
36191: NEG
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 5
36199: NEG
36200: PUSH
36201: LD_INT 1
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 6
36210: NEG
36211: PUSH
36212: LD_INT 0
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 6
36221: NEG
36222: PUSH
36223: LD_INT 1
36225: NEG
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36245: LD_ADDR_VAR 0 34
36249: PUSH
36250: LD_INT 2
36252: NEG
36253: PUSH
36254: LD_INT 3
36256: NEG
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 3
36264: NEG
36265: PUSH
36266: LD_INT 2
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 3
36276: NEG
36277: PUSH
36278: LD_INT 3
36280: NEG
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 3
36288: NEG
36289: PUSH
36290: LD_INT 4
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 4
36300: NEG
36301: PUSH
36302: LD_INT 3
36304: NEG
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 4
36312: NEG
36313: PUSH
36314: LD_INT 4
36316: NEG
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 4
36324: NEG
36325: PUSH
36326: LD_INT 5
36328: NEG
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 5
36336: NEG
36337: PUSH
36338: LD_INT 4
36340: NEG
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 5
36348: NEG
36349: PUSH
36350: LD_INT 5
36352: NEG
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 5
36360: NEG
36361: PUSH
36362: LD_INT 6
36364: NEG
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 6
36372: NEG
36373: PUSH
36374: LD_INT 5
36376: NEG
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 6
36384: NEG
36385: PUSH
36386: LD_INT 6
36388: NEG
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36408: LD_ADDR_VAR 0 41
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: LD_INT 2
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 1
36426: NEG
36427: PUSH
36428: LD_INT 3
36430: NEG
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 1
36438: PUSH
36439: LD_INT 2
36441: NEG
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: LIST
36451: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36452: LD_ADDR_VAR 0 42
36456: PUSH
36457: LD_INT 2
36459: PUSH
36460: LD_INT 0
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 2
36469: PUSH
36470: LD_INT 1
36472: NEG
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 3
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: LIST
36492: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36493: LD_ADDR_VAR 0 43
36497: PUSH
36498: LD_INT 2
36500: PUSH
36501: LD_INT 2
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 3
36510: PUSH
36511: LD_INT 2
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 2
36520: PUSH
36521: LD_INT 3
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: LIST
36532: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36533: LD_ADDR_VAR 0 44
36537: PUSH
36538: LD_INT 0
36540: PUSH
36541: LD_INT 2
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 1
36550: PUSH
36551: LD_INT 3
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: LD_INT 2
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: LIST
36573: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36574: LD_ADDR_VAR 0 45
36578: PUSH
36579: LD_INT 2
36581: NEG
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 2
36592: NEG
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 3
36603: NEG
36604: PUSH
36605: LD_INT 1
36607: NEG
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: LIST
36617: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36618: LD_ADDR_VAR 0 46
36622: PUSH
36623: LD_INT 2
36625: NEG
36626: PUSH
36627: LD_INT 2
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 2
36637: NEG
36638: PUSH
36639: LD_INT 3
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 3
36649: NEG
36650: PUSH
36651: LD_INT 2
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: LIST
36663: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36664: LD_ADDR_VAR 0 47
36668: PUSH
36669: LD_INT 2
36671: NEG
36672: PUSH
36673: LD_INT 3
36675: NEG
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: LD_INT 3
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36697: LD_ADDR_VAR 0 48
36701: PUSH
36702: LD_INT 1
36704: PUSH
36705: LD_INT 2
36707: NEG
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 2
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36728: LD_ADDR_VAR 0 49
36732: PUSH
36733: LD_INT 3
36735: PUSH
36736: LD_INT 1
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 3
36745: PUSH
36746: LD_INT 2
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
36757: LD_ADDR_VAR 0 50
36761: PUSH
36762: LD_INT 2
36764: PUSH
36765: LD_INT 3
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 1
36774: PUSH
36775: LD_INT 3
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36786: LD_ADDR_VAR 0 51
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: LD_INT 2
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 2
36804: NEG
36805: PUSH
36806: LD_INT 1
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36817: LD_ADDR_VAR 0 52
36821: PUSH
36822: LD_INT 3
36824: NEG
36825: PUSH
36826: LD_INT 1
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 3
36836: NEG
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36850: LD_ADDR_VAR 0 53
36854: PUSH
36855: LD_INT 1
36857: NEG
36858: PUSH
36859: LD_INT 3
36861: NEG
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 0
36869: PUSH
36870: LD_INT 3
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 1
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: LIST
36893: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36894: LD_ADDR_VAR 0 54
36898: PUSH
36899: LD_INT 2
36901: PUSH
36902: LD_INT 1
36904: NEG
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 3
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 3
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: LIST
36934: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36935: LD_ADDR_VAR 0 55
36939: PUSH
36940: LD_INT 3
36942: PUSH
36943: LD_INT 2
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 3
36952: PUSH
36953: LD_INT 3
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 2
36962: PUSH
36963: LD_INT 3
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: LIST
36974: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36975: LD_ADDR_VAR 0 56
36979: PUSH
36980: LD_INT 1
36982: PUSH
36983: LD_INT 3
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: LD_INT 3
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 1
37002: NEG
37003: PUSH
37004: LD_INT 2
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37016: LD_ADDR_VAR 0 57
37020: PUSH
37021: LD_INT 2
37023: NEG
37024: PUSH
37025: LD_INT 1
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 3
37034: NEG
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 3
37045: NEG
37046: PUSH
37047: LD_INT 1
37049: NEG
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: LIST
37059: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37060: LD_ADDR_VAR 0 58
37064: PUSH
37065: LD_INT 2
37067: NEG
37068: PUSH
37069: LD_INT 3
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 3
37079: NEG
37080: PUSH
37081: LD_INT 2
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 3
37091: NEG
37092: PUSH
37093: LD_INT 3
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: LIST
37105: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37106: LD_ADDR_VAR 0 59
37110: PUSH
37111: LD_INT 1
37113: NEG
37114: PUSH
37115: LD_INT 2
37117: NEG
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: LD_INT 2
37128: NEG
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: LD_INT 1
37139: NEG
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: LIST
37149: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37150: LD_ADDR_VAR 0 60
37154: PUSH
37155: LD_INT 1
37157: PUSH
37158: LD_INT 1
37160: NEG
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 2
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 2
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: LIST
37190: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37191: LD_ADDR_VAR 0 61
37195: PUSH
37196: LD_INT 2
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 2
37208: PUSH
37209: LD_INT 2
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 1
37218: PUSH
37219: LD_INT 2
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: LIST
37230: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37231: LD_ADDR_VAR 0 62
37235: PUSH
37236: LD_INT 1
37238: PUSH
37239: LD_INT 2
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: LD_INT 2
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 1
37258: NEG
37259: PUSH
37260: LD_INT 1
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: LIST
37271: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37272: LD_ADDR_VAR 0 63
37276: PUSH
37277: LD_INT 1
37279: NEG
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 2
37290: NEG
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 2
37301: NEG
37302: PUSH
37303: LD_INT 1
37305: NEG
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: LIST
37315: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37316: LD_ADDR_VAR 0 64
37320: PUSH
37321: LD_INT 1
37323: NEG
37324: PUSH
37325: LD_INT 2
37327: NEG
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 2
37335: NEG
37336: PUSH
37337: LD_INT 1
37339: NEG
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 2
37347: NEG
37348: PUSH
37349: LD_INT 2
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: LIST
37361: ST_TO_ADDR
// end ; 2 :
37362: GO 40628
37364: LD_INT 2
37366: DOUBLE
37367: EQUAL
37368: IFTRUE 37372
37370: GO 40627
37372: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37373: LD_ADDR_VAR 0 29
37377: PUSH
37378: LD_INT 4
37380: PUSH
37381: LD_INT 0
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 4
37390: PUSH
37391: LD_INT 1
37393: NEG
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 5
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 5
37411: PUSH
37412: LD_INT 1
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 4
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 3
37431: PUSH
37432: LD_INT 0
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 3
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 3
37452: PUSH
37453: LD_INT 2
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 5
37463: PUSH
37464: LD_INT 2
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 3
37473: PUSH
37474: LD_INT 3
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 3
37483: PUSH
37484: LD_INT 2
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 4
37493: PUSH
37494: LD_INT 3
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 4
37503: PUSH
37504: LD_INT 4
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 3
37513: PUSH
37514: LD_INT 4
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 2
37523: PUSH
37524: LD_INT 3
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: PUSH
37534: LD_INT 2
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 4
37543: PUSH
37544: LD_INT 2
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 2
37553: PUSH
37554: LD_INT 4
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: LD_INT 4
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: LD_INT 3
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: LD_INT 4
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 1
37593: PUSH
37594: LD_INT 5
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: LD_INT 5
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: LD_INT 4
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: LD_INT 3
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 2
37635: PUSH
37636: LD_INT 5
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 2
37645: NEG
37646: PUSH
37647: LD_INT 3
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 3
37656: NEG
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 3
37667: NEG
37668: PUSH
37669: LD_INT 1
37671: NEG
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 2
37679: NEG
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 2
37690: NEG
37691: PUSH
37692: LD_INT 1
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 3
37701: NEG
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 4
37712: NEG
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 4
37723: NEG
37724: PUSH
37725: LD_INT 1
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 4
37735: NEG
37736: PUSH
37737: LD_INT 2
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 2
37747: NEG
37748: PUSH
37749: LD_INT 2
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 4
37758: NEG
37759: PUSH
37760: LD_INT 4
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 4
37770: NEG
37771: PUSH
37772: LD_INT 5
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 3
37782: NEG
37783: PUSH
37784: LD_INT 4
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 3
37794: NEG
37795: PUSH
37796: LD_INT 3
37798: NEG
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 4
37806: NEG
37807: PUSH
37808: LD_INT 3
37810: NEG
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 5
37818: NEG
37819: PUSH
37820: LD_INT 4
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 5
37830: NEG
37831: PUSH
37832: LD_INT 5
37834: NEG
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 3
37842: NEG
37843: PUSH
37844: LD_INT 5
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 5
37854: NEG
37855: PUSH
37856: LD_INT 3
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37911: LD_ADDR_VAR 0 30
37915: PUSH
37916: LD_INT 4
37918: PUSH
37919: LD_INT 4
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 4
37928: PUSH
37929: LD_INT 3
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 5
37938: PUSH
37939: LD_INT 4
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 5
37948: PUSH
37949: LD_INT 5
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 4
37958: PUSH
37959: LD_INT 5
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 3
37968: PUSH
37969: LD_INT 4
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 3
37978: PUSH
37979: LD_INT 3
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 5
37988: PUSH
37989: LD_INT 3
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 3
37998: PUSH
37999: LD_INT 5
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: LD_INT 3
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: LD_INT 2
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 1
38028: PUSH
38029: LD_INT 3
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 1
38038: PUSH
38039: LD_INT 4
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: LD_INT 4
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 1
38058: NEG
38059: PUSH
38060: LD_INT 3
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 1
38069: NEG
38070: PUSH
38071: LD_INT 2
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 2
38080: PUSH
38081: LD_INT 4
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 2
38090: NEG
38091: PUSH
38092: LD_INT 2
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 4
38101: NEG
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 4
38112: NEG
38113: PUSH
38114: LD_INT 1
38116: NEG
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 3
38124: NEG
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 3
38135: NEG
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 4
38146: NEG
38147: PUSH
38148: LD_INT 1
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 5
38157: NEG
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 5
38168: NEG
38169: PUSH
38170: LD_INT 1
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 5
38180: NEG
38181: PUSH
38182: LD_INT 2
38184: NEG
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 3
38192: NEG
38193: PUSH
38194: LD_INT 2
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 3
38203: NEG
38204: PUSH
38205: LD_INT 3
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 3
38215: NEG
38216: PUSH
38217: LD_INT 4
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: NEG
38228: PUSH
38229: LD_INT 3
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 2
38239: NEG
38240: PUSH
38241: LD_INT 2
38243: NEG
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 3
38251: NEG
38252: PUSH
38253: LD_INT 2
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 4
38263: NEG
38264: PUSH
38265: LD_INT 3
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 4
38275: NEG
38276: PUSH
38277: LD_INT 4
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 2
38287: NEG
38288: PUSH
38289: LD_INT 4
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 4
38299: NEG
38300: PUSH
38301: LD_INT 2
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: LD_INT 4
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: LD_INT 5
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: LD_INT 4
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: PUSH
38345: LD_INT 3
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 0
38355: PUSH
38356: LD_INT 3
38358: NEG
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 1
38366: NEG
38367: PUSH
38368: LD_INT 4
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: NEG
38379: PUSH
38380: LD_INT 5
38382: NEG
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 2
38390: PUSH
38391: LD_INT 3
38393: NEG
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 2
38401: NEG
38402: PUSH
38403: LD_INT 5
38405: NEG
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38458: LD_ADDR_VAR 0 31
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: LD_INT 4
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: LD_INT 3
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: LD_INT 4
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: LD_INT 5
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: LD_INT 5
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 1
38515: NEG
38516: PUSH
38517: LD_INT 4
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: LD_INT 3
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 2
38537: PUSH
38538: LD_INT 5
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 2
38547: NEG
38548: PUSH
38549: LD_INT 3
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 3
38558: NEG
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 3
38569: NEG
38570: PUSH
38571: LD_INT 1
38573: NEG
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 2
38581: NEG
38582: PUSH
38583: LD_INT 0
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 2
38592: NEG
38593: PUSH
38594: LD_INT 1
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 3
38603: NEG
38604: PUSH
38605: LD_INT 1
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 4
38614: NEG
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 4
38625: NEG
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 4
38637: NEG
38638: PUSH
38639: LD_INT 2
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 2
38649: NEG
38650: PUSH
38651: LD_INT 2
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 4
38660: NEG
38661: PUSH
38662: LD_INT 4
38664: NEG
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 4
38672: NEG
38673: PUSH
38674: LD_INT 5
38676: NEG
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 3
38684: NEG
38685: PUSH
38686: LD_INT 4
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 3
38696: NEG
38697: PUSH
38698: LD_INT 3
38700: NEG
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 4
38708: NEG
38709: PUSH
38710: LD_INT 3
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 5
38720: NEG
38721: PUSH
38722: LD_INT 4
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 5
38732: NEG
38733: PUSH
38734: LD_INT 5
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 3
38744: NEG
38745: PUSH
38746: LD_INT 5
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 5
38756: NEG
38757: PUSH
38758: LD_INT 3
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: LD_INT 3
38771: NEG
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: LD_INT 4
38782: NEG
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: LD_INT 3
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: LD_INT 2
38804: NEG
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: LD_INT 2
38815: NEG
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: LD_INT 3
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: PUSH
38837: LD_INT 4
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 2
38847: PUSH
38848: LD_INT 2
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 2
38858: NEG
38859: PUSH
38860: LD_INT 4
38862: NEG
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 4
38870: PUSH
38871: LD_INT 0
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 4
38880: PUSH
38881: LD_INT 1
38883: NEG
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 5
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 5
38901: PUSH
38902: LD_INT 1
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 4
38911: PUSH
38912: LD_INT 1
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 3
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 3
38931: PUSH
38932: LD_INT 1
38934: NEG
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 3
38942: PUSH
38943: LD_INT 2
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 5
38953: PUSH
38954: LD_INT 2
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39008: LD_ADDR_VAR 0 32
39012: PUSH
39013: LD_INT 4
39015: NEG
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 4
39026: NEG
39027: PUSH
39028: LD_INT 1
39030: NEG
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 3
39038: NEG
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 3
39049: NEG
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 4
39060: NEG
39061: PUSH
39062: LD_INT 1
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 5
39071: NEG
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 5
39082: NEG
39083: PUSH
39084: LD_INT 1
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 5
39094: NEG
39095: PUSH
39096: LD_INT 2
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 3
39106: NEG
39107: PUSH
39108: LD_INT 2
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 3
39117: NEG
39118: PUSH
39119: LD_INT 3
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 3
39129: NEG
39130: PUSH
39131: LD_INT 4
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 2
39141: NEG
39142: PUSH
39143: LD_INT 3
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: LD_INT 2
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 3
39165: NEG
39166: PUSH
39167: LD_INT 2
39169: NEG
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 4
39177: NEG
39178: PUSH
39179: LD_INT 3
39181: NEG
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 4
39189: NEG
39190: PUSH
39191: LD_INT 4
39193: NEG
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 2
39201: NEG
39202: PUSH
39203: LD_INT 4
39205: NEG
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 4
39213: NEG
39214: PUSH
39215: LD_INT 2
39217: NEG
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: LD_INT 4
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: LD_INT 5
39239: NEG
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 1
39247: PUSH
39248: LD_INT 4
39250: NEG
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: LD_INT 3
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: LD_INT 3
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: NEG
39281: PUSH
39282: LD_INT 4
39284: NEG
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: LD_INT 5
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 2
39304: PUSH
39305: LD_INT 3
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 2
39315: NEG
39316: PUSH
39317: LD_INT 5
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 3
39327: PUSH
39328: LD_INT 0
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 3
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 4
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 4
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 3
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 2
39399: PUSH
39400: LD_INT 2
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 4
39410: PUSH
39411: LD_INT 2
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 4
39420: PUSH
39421: LD_INT 4
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 4
39430: PUSH
39431: LD_INT 3
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 5
39440: PUSH
39441: LD_INT 4
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 5
39450: PUSH
39451: LD_INT 5
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 4
39460: PUSH
39461: LD_INT 5
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 3
39470: PUSH
39471: LD_INT 4
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 3
39480: PUSH
39481: LD_INT 3
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 5
39490: PUSH
39491: LD_INT 3
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 3
39500: PUSH
39501: LD_INT 5
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39555: LD_ADDR_VAR 0 33
39559: PUSH
39560: LD_INT 4
39562: NEG
39563: PUSH
39564: LD_INT 4
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 4
39574: NEG
39575: PUSH
39576: LD_INT 5
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 3
39586: NEG
39587: PUSH
39588: LD_INT 4
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 3
39598: NEG
39599: PUSH
39600: LD_INT 3
39602: NEG
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 4
39610: NEG
39611: PUSH
39612: LD_INT 3
39614: NEG
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 5
39622: NEG
39623: PUSH
39624: LD_INT 4
39626: NEG
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 5
39634: NEG
39635: PUSH
39636: LD_INT 5
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 3
39646: NEG
39647: PUSH
39648: LD_INT 5
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 5
39658: NEG
39659: PUSH
39660: LD_INT 3
39662: NEG
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: LD_INT 3
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: LD_INT 4
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: LD_INT 3
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 2
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: LD_INT 2
39717: NEG
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: LD_INT 3
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: LD_INT 4
39741: NEG
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 2
39749: PUSH
39750: LD_INT 2
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 2
39760: NEG
39761: PUSH
39762: LD_INT 4
39764: NEG
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 4
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 4
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 5
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 5
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 4
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 3
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 3
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 3
39844: PUSH
39845: LD_INT 2
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 5
39855: PUSH
39856: LD_INT 2
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 3
39865: PUSH
39866: LD_INT 3
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 3
39875: PUSH
39876: LD_INT 2
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 4
39885: PUSH
39886: LD_INT 3
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 4
39895: PUSH
39896: LD_INT 4
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 3
39905: PUSH
39906: LD_INT 4
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 2
39915: PUSH
39916: LD_INT 3
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 2
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 4
39935: PUSH
39936: LD_INT 2
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 2
39945: PUSH
39946: LD_INT 4
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: LD_INT 4
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 3
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: PUSH
39976: LD_INT 4
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 1
39985: PUSH
39986: LD_INT 5
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: LD_INT 5
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: LD_INT 4
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 1
40016: NEG
40017: PUSH
40018: LD_INT 3
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 2
40027: PUSH
40028: LD_INT 5
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 2
40037: NEG
40038: PUSH
40039: LD_INT 3
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40093: LD_ADDR_VAR 0 34
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: LD_INT 4
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 5
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: LD_INT 4
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: LD_INT 3
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 0
40144: PUSH
40145: LD_INT 3
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: LD_INT 4
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: LD_INT 5
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: LD_INT 3
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 2
40190: NEG
40191: PUSH
40192: LD_INT 5
40194: NEG
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 3
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 3
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 4
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 4
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 3
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 2
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 2
40274: PUSH
40275: LD_INT 2
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 4
40285: PUSH
40286: LD_INT 2
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 4
40295: PUSH
40296: LD_INT 4
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 4
40305: PUSH
40306: LD_INT 3
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 5
40315: PUSH
40316: LD_INT 4
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 5
40325: PUSH
40326: LD_INT 5
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 4
40335: PUSH
40336: LD_INT 5
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 3
40345: PUSH
40346: LD_INT 4
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 3
40355: PUSH
40356: LD_INT 3
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 5
40365: PUSH
40366: LD_INT 3
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 3
40375: PUSH
40376: LD_INT 5
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: LD_INT 3
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: LD_INT 2
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: LD_INT 3
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 4
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: LD_INT 4
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: LD_INT 3
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: LD_INT 2
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 2
40457: PUSH
40458: LD_INT 4
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 2
40467: NEG
40468: PUSH
40469: LD_INT 2
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 4
40478: NEG
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 4
40489: NEG
40490: PUSH
40491: LD_INT 1
40493: NEG
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 3
40501: NEG
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 3
40512: NEG
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 4
40523: NEG
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 5
40534: NEG
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 5
40545: NEG
40546: PUSH
40547: LD_INT 1
40549: NEG
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 5
40557: NEG
40558: PUSH
40559: LD_INT 2
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 3
40569: NEG
40570: PUSH
40571: LD_INT 2
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: ST_TO_ADDR
// end ; end ;
40625: GO 40628
40627: POP
// case btype of b_depot , b_warehouse :
40628: LD_VAR 0 1
40632: PUSH
40633: LD_INT 0
40635: DOUBLE
40636: EQUAL
40637: IFTRUE 40647
40639: LD_INT 1
40641: DOUBLE
40642: EQUAL
40643: IFTRUE 40647
40645: GO 40848
40647: POP
// case nation of nation_american :
40648: LD_VAR 0 5
40652: PUSH
40653: LD_INT 1
40655: DOUBLE
40656: EQUAL
40657: IFTRUE 40661
40659: GO 40717
40661: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40662: LD_ADDR_VAR 0 9
40666: PUSH
40667: LD_VAR 0 11
40671: PUSH
40672: LD_VAR 0 12
40676: PUSH
40677: LD_VAR 0 13
40681: PUSH
40682: LD_VAR 0 14
40686: PUSH
40687: LD_VAR 0 15
40691: PUSH
40692: LD_VAR 0 16
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: PUSH
40705: LD_VAR 0 4
40709: PUSH
40710: LD_INT 1
40712: PLUS
40713: ARRAY
40714: ST_TO_ADDR
40715: GO 40846
40717: LD_INT 2
40719: DOUBLE
40720: EQUAL
40721: IFTRUE 40725
40723: GO 40781
40725: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
40726: LD_ADDR_VAR 0 9
40730: PUSH
40731: LD_VAR 0 17
40735: PUSH
40736: LD_VAR 0 18
40740: PUSH
40741: LD_VAR 0 19
40745: PUSH
40746: LD_VAR 0 20
40750: PUSH
40751: LD_VAR 0 21
40755: PUSH
40756: LD_VAR 0 22
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: PUSH
40769: LD_VAR 0 4
40773: PUSH
40774: LD_INT 1
40776: PLUS
40777: ARRAY
40778: ST_TO_ADDR
40779: GO 40846
40781: LD_INT 3
40783: DOUBLE
40784: EQUAL
40785: IFTRUE 40789
40787: GO 40845
40789: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
40790: LD_ADDR_VAR 0 9
40794: PUSH
40795: LD_VAR 0 23
40799: PUSH
40800: LD_VAR 0 24
40804: PUSH
40805: LD_VAR 0 25
40809: PUSH
40810: LD_VAR 0 26
40814: PUSH
40815: LD_VAR 0 27
40819: PUSH
40820: LD_VAR 0 28
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: PUSH
40833: LD_VAR 0 4
40837: PUSH
40838: LD_INT 1
40840: PLUS
40841: ARRAY
40842: ST_TO_ADDR
40843: GO 40846
40845: POP
40846: GO 41401
40848: LD_INT 2
40850: DOUBLE
40851: EQUAL
40852: IFTRUE 40862
40854: LD_INT 3
40856: DOUBLE
40857: EQUAL
40858: IFTRUE 40862
40860: GO 40918
40862: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
40863: LD_ADDR_VAR 0 9
40867: PUSH
40868: LD_VAR 0 29
40872: PUSH
40873: LD_VAR 0 30
40877: PUSH
40878: LD_VAR 0 31
40882: PUSH
40883: LD_VAR 0 32
40887: PUSH
40888: LD_VAR 0 33
40892: PUSH
40893: LD_VAR 0 34
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: PUSH
40906: LD_VAR 0 4
40910: PUSH
40911: LD_INT 1
40913: PLUS
40914: ARRAY
40915: ST_TO_ADDR
40916: GO 41401
40918: LD_INT 16
40920: DOUBLE
40921: EQUAL
40922: IFTRUE 40980
40924: LD_INT 17
40926: DOUBLE
40927: EQUAL
40928: IFTRUE 40980
40930: LD_INT 18
40932: DOUBLE
40933: EQUAL
40934: IFTRUE 40980
40936: LD_INT 19
40938: DOUBLE
40939: EQUAL
40940: IFTRUE 40980
40942: LD_INT 22
40944: DOUBLE
40945: EQUAL
40946: IFTRUE 40980
40948: LD_INT 20
40950: DOUBLE
40951: EQUAL
40952: IFTRUE 40980
40954: LD_INT 21
40956: DOUBLE
40957: EQUAL
40958: IFTRUE 40980
40960: LD_INT 23
40962: DOUBLE
40963: EQUAL
40964: IFTRUE 40980
40966: LD_INT 24
40968: DOUBLE
40969: EQUAL
40970: IFTRUE 40980
40972: LD_INT 25
40974: DOUBLE
40975: EQUAL
40976: IFTRUE 40980
40978: GO 41036
40980: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
40981: LD_ADDR_VAR 0 9
40985: PUSH
40986: LD_VAR 0 35
40990: PUSH
40991: LD_VAR 0 36
40995: PUSH
40996: LD_VAR 0 37
41000: PUSH
41001: LD_VAR 0 38
41005: PUSH
41006: LD_VAR 0 39
41010: PUSH
41011: LD_VAR 0 40
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: PUSH
41024: LD_VAR 0 4
41028: PUSH
41029: LD_INT 1
41031: PLUS
41032: ARRAY
41033: ST_TO_ADDR
41034: GO 41401
41036: LD_INT 6
41038: DOUBLE
41039: EQUAL
41040: IFTRUE 41092
41042: LD_INT 7
41044: DOUBLE
41045: EQUAL
41046: IFTRUE 41092
41048: LD_INT 8
41050: DOUBLE
41051: EQUAL
41052: IFTRUE 41092
41054: LD_INT 13
41056: DOUBLE
41057: EQUAL
41058: IFTRUE 41092
41060: LD_INT 12
41062: DOUBLE
41063: EQUAL
41064: IFTRUE 41092
41066: LD_INT 15
41068: DOUBLE
41069: EQUAL
41070: IFTRUE 41092
41072: LD_INT 11
41074: DOUBLE
41075: EQUAL
41076: IFTRUE 41092
41078: LD_INT 14
41080: DOUBLE
41081: EQUAL
41082: IFTRUE 41092
41084: LD_INT 10
41086: DOUBLE
41087: EQUAL
41088: IFTRUE 41092
41090: GO 41148
41092: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41093: LD_ADDR_VAR 0 9
41097: PUSH
41098: LD_VAR 0 41
41102: PUSH
41103: LD_VAR 0 42
41107: PUSH
41108: LD_VAR 0 43
41112: PUSH
41113: LD_VAR 0 44
41117: PUSH
41118: LD_VAR 0 45
41122: PUSH
41123: LD_VAR 0 46
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: PUSH
41136: LD_VAR 0 4
41140: PUSH
41141: LD_INT 1
41143: PLUS
41144: ARRAY
41145: ST_TO_ADDR
41146: GO 41401
41148: LD_INT 36
41150: DOUBLE
41151: EQUAL
41152: IFTRUE 41156
41154: GO 41212
41156: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41157: LD_ADDR_VAR 0 9
41161: PUSH
41162: LD_VAR 0 47
41166: PUSH
41167: LD_VAR 0 48
41171: PUSH
41172: LD_VAR 0 49
41176: PUSH
41177: LD_VAR 0 50
41181: PUSH
41182: LD_VAR 0 51
41186: PUSH
41187: LD_VAR 0 52
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: PUSH
41200: LD_VAR 0 4
41204: PUSH
41205: LD_INT 1
41207: PLUS
41208: ARRAY
41209: ST_TO_ADDR
41210: GO 41401
41212: LD_INT 4
41214: DOUBLE
41215: EQUAL
41216: IFTRUE 41238
41218: LD_INT 5
41220: DOUBLE
41221: EQUAL
41222: IFTRUE 41238
41224: LD_INT 34
41226: DOUBLE
41227: EQUAL
41228: IFTRUE 41238
41230: LD_INT 37
41232: DOUBLE
41233: EQUAL
41234: IFTRUE 41238
41236: GO 41294
41238: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41239: LD_ADDR_VAR 0 9
41243: PUSH
41244: LD_VAR 0 53
41248: PUSH
41249: LD_VAR 0 54
41253: PUSH
41254: LD_VAR 0 55
41258: PUSH
41259: LD_VAR 0 56
41263: PUSH
41264: LD_VAR 0 57
41268: PUSH
41269: LD_VAR 0 58
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: PUSH
41282: LD_VAR 0 4
41286: PUSH
41287: LD_INT 1
41289: PLUS
41290: ARRAY
41291: ST_TO_ADDR
41292: GO 41401
41294: LD_INT 31
41296: DOUBLE
41297: EQUAL
41298: IFTRUE 41344
41300: LD_INT 32
41302: DOUBLE
41303: EQUAL
41304: IFTRUE 41344
41306: LD_INT 33
41308: DOUBLE
41309: EQUAL
41310: IFTRUE 41344
41312: LD_INT 27
41314: DOUBLE
41315: EQUAL
41316: IFTRUE 41344
41318: LD_INT 26
41320: DOUBLE
41321: EQUAL
41322: IFTRUE 41344
41324: LD_INT 28
41326: DOUBLE
41327: EQUAL
41328: IFTRUE 41344
41330: LD_INT 29
41332: DOUBLE
41333: EQUAL
41334: IFTRUE 41344
41336: LD_INT 30
41338: DOUBLE
41339: EQUAL
41340: IFTRUE 41344
41342: GO 41400
41344: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41345: LD_ADDR_VAR 0 9
41349: PUSH
41350: LD_VAR 0 59
41354: PUSH
41355: LD_VAR 0 60
41359: PUSH
41360: LD_VAR 0 61
41364: PUSH
41365: LD_VAR 0 62
41369: PUSH
41370: LD_VAR 0 63
41374: PUSH
41375: LD_VAR 0 64
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: PUSH
41388: LD_VAR 0 4
41392: PUSH
41393: LD_INT 1
41395: PLUS
41396: ARRAY
41397: ST_TO_ADDR
41398: GO 41401
41400: POP
// temp_list2 = [ ] ;
41401: LD_ADDR_VAR 0 10
41405: PUSH
41406: EMPTY
41407: ST_TO_ADDR
// for i in temp_list do
41408: LD_ADDR_VAR 0 8
41412: PUSH
41413: LD_VAR 0 9
41417: PUSH
41418: FOR_IN
41419: IFFALSE 41471
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41421: LD_ADDR_VAR 0 10
41425: PUSH
41426: LD_VAR 0 10
41430: PUSH
41431: LD_VAR 0 8
41435: PUSH
41436: LD_INT 1
41438: ARRAY
41439: PUSH
41440: LD_VAR 0 2
41444: PLUS
41445: PUSH
41446: LD_VAR 0 8
41450: PUSH
41451: LD_INT 2
41453: ARRAY
41454: PUSH
41455: LD_VAR 0 3
41459: PLUS
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: EMPTY
41466: LIST
41467: ADD
41468: ST_TO_ADDR
41469: GO 41418
41471: POP
41472: POP
// result = temp_list2 ;
41473: LD_ADDR_VAR 0 7
41477: PUSH
41478: LD_VAR 0 10
41482: ST_TO_ADDR
// end ;
41483: LD_VAR 0 7
41487: RET
// export function EnemyInRange ( unit , dist ) ; begin
41488: LD_INT 0
41490: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41491: LD_ADDR_VAR 0 3
41495: PUSH
41496: LD_VAR 0 1
41500: PPUSH
41501: CALL_OW 255
41505: PPUSH
41506: LD_VAR 0 1
41510: PPUSH
41511: CALL_OW 250
41515: PPUSH
41516: LD_VAR 0 1
41520: PPUSH
41521: CALL_OW 251
41525: PPUSH
41526: LD_VAR 0 2
41530: PPUSH
41531: CALL 14890 0 4
41535: PUSH
41536: LD_INT 4
41538: ARRAY
41539: ST_TO_ADDR
// end ;
41540: LD_VAR 0 3
41544: RET
// export function PlayerSeeMe ( unit ) ; begin
41545: LD_INT 0
41547: PPUSH
// result := See ( your_side , unit ) ;
41548: LD_ADDR_VAR 0 2
41552: PUSH
41553: LD_OWVAR 2
41557: PPUSH
41558: LD_VAR 0 1
41562: PPUSH
41563: CALL_OW 292
41567: ST_TO_ADDR
// end ;
41568: LD_VAR 0 2
41572: RET
// export function ReverseDir ( unit ) ; begin
41573: LD_INT 0
41575: PPUSH
// if not unit then
41576: LD_VAR 0 1
41580: NOT
41581: IFFALSE 41585
// exit ;
41583: GO 41608
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41585: LD_ADDR_VAR 0 2
41589: PUSH
41590: LD_VAR 0 1
41594: PPUSH
41595: CALL_OW 254
41599: PUSH
41600: LD_INT 3
41602: PLUS
41603: PUSH
41604: LD_INT 6
41606: MOD
41607: ST_TO_ADDR
// end ;
41608: LD_VAR 0 2
41612: RET
// export function ReverseArray ( array ) ; var i ; begin
41613: LD_INT 0
41615: PPUSH
41616: PPUSH
// if not array then
41617: LD_VAR 0 1
41621: NOT
41622: IFFALSE 41626
// exit ;
41624: GO 41681
// result := [ ] ;
41626: LD_ADDR_VAR 0 2
41630: PUSH
41631: EMPTY
41632: ST_TO_ADDR
// for i := array downto 1 do
41633: LD_ADDR_VAR 0 3
41637: PUSH
41638: DOUBLE
41639: LD_VAR 0 1
41643: INC
41644: ST_TO_ADDR
41645: LD_INT 1
41647: PUSH
41648: FOR_DOWNTO
41649: IFFALSE 41679
// result := Join ( result , array [ i ] ) ;
41651: LD_ADDR_VAR 0 2
41655: PUSH
41656: LD_VAR 0 2
41660: PPUSH
41661: LD_VAR 0 1
41665: PUSH
41666: LD_VAR 0 3
41670: ARRAY
41671: PPUSH
41672: CALL 46325 0 2
41676: ST_TO_ADDR
41677: GO 41648
41679: POP
41680: POP
// end ;
41681: LD_VAR 0 2
41685: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
41686: LD_INT 0
41688: PPUSH
41689: PPUSH
41690: PPUSH
41691: PPUSH
41692: PPUSH
41693: PPUSH
// if not unit or not hexes then
41694: LD_VAR 0 1
41698: NOT
41699: PUSH
41700: LD_VAR 0 2
41704: NOT
41705: OR
41706: IFFALSE 41710
// exit ;
41708: GO 41833
// dist := 9999 ;
41710: LD_ADDR_VAR 0 5
41714: PUSH
41715: LD_INT 9999
41717: ST_TO_ADDR
// for i = 1 to hexes do
41718: LD_ADDR_VAR 0 4
41722: PUSH
41723: DOUBLE
41724: LD_INT 1
41726: DEC
41727: ST_TO_ADDR
41728: LD_VAR 0 2
41732: PUSH
41733: FOR_TO
41734: IFFALSE 41821
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41736: LD_ADDR_VAR 0 6
41740: PUSH
41741: LD_VAR 0 1
41745: PPUSH
41746: LD_VAR 0 2
41750: PUSH
41751: LD_VAR 0 4
41755: ARRAY
41756: PUSH
41757: LD_INT 1
41759: ARRAY
41760: PPUSH
41761: LD_VAR 0 2
41765: PUSH
41766: LD_VAR 0 4
41770: ARRAY
41771: PUSH
41772: LD_INT 2
41774: ARRAY
41775: PPUSH
41776: CALL_OW 297
41780: ST_TO_ADDR
// if tdist < dist then
41781: LD_VAR 0 6
41785: PUSH
41786: LD_VAR 0 5
41790: LESS
41791: IFFALSE 41819
// begin hex := hexes [ i ] ;
41793: LD_ADDR_VAR 0 8
41797: PUSH
41798: LD_VAR 0 2
41802: PUSH
41803: LD_VAR 0 4
41807: ARRAY
41808: ST_TO_ADDR
// dist := tdist ;
41809: LD_ADDR_VAR 0 5
41813: PUSH
41814: LD_VAR 0 6
41818: ST_TO_ADDR
// end ; end ;
41819: GO 41733
41821: POP
41822: POP
// result := hex ;
41823: LD_ADDR_VAR 0 3
41827: PUSH
41828: LD_VAR 0 8
41832: ST_TO_ADDR
// end ;
41833: LD_VAR 0 3
41837: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
41838: LD_INT 0
41840: PPUSH
41841: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
41842: LD_VAR 0 1
41846: NOT
41847: PUSH
41848: LD_VAR 0 1
41852: PUSH
41853: LD_INT 21
41855: PUSH
41856: LD_INT 2
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 23
41865: PUSH
41866: LD_INT 2
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PPUSH
41877: CALL_OW 69
41881: IN
41882: NOT
41883: OR
41884: IFFALSE 41888
// exit ;
41886: GO 41935
// for i = 1 to 3 do
41888: LD_ADDR_VAR 0 3
41892: PUSH
41893: DOUBLE
41894: LD_INT 1
41896: DEC
41897: ST_TO_ADDR
41898: LD_INT 3
41900: PUSH
41901: FOR_TO
41902: IFFALSE 41933
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
41904: LD_VAR 0 1
41908: PPUSH
41909: CALL_OW 250
41913: PPUSH
41914: LD_VAR 0 1
41918: PPUSH
41919: CALL_OW 251
41923: PPUSH
41924: LD_INT 1
41926: PPUSH
41927: CALL_OW 453
41931: GO 41901
41933: POP
41934: POP
// end ;
41935: LD_VAR 0 2
41939: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
41940: LD_INT 0
41942: PPUSH
41943: PPUSH
41944: PPUSH
41945: PPUSH
41946: PPUSH
41947: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
41948: LD_VAR 0 1
41952: NOT
41953: PUSH
41954: LD_VAR 0 2
41958: NOT
41959: OR
41960: PUSH
41961: LD_VAR 0 1
41965: PPUSH
41966: CALL_OW 314
41970: OR
41971: IFFALSE 41975
// exit ;
41973: GO 42442
// if GetLives ( i ) < 250 then
41975: LD_VAR 0 4
41979: PPUSH
41980: CALL_OW 256
41984: PUSH
41985: LD_INT 250
41987: LESS
41988: IFFALSE 42001
// begin ComAutodestruct ( i ) ;
41990: LD_VAR 0 4
41994: PPUSH
41995: CALL 41838 0 1
// exit ;
41999: GO 42442
// end ; x := GetX ( enemy_unit ) ;
42001: LD_ADDR_VAR 0 7
42005: PUSH
42006: LD_VAR 0 2
42010: PPUSH
42011: CALL_OW 250
42015: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42016: LD_ADDR_VAR 0 8
42020: PUSH
42021: LD_VAR 0 2
42025: PPUSH
42026: CALL_OW 251
42030: ST_TO_ADDR
// if not x or not y then
42031: LD_VAR 0 7
42035: NOT
42036: PUSH
42037: LD_VAR 0 8
42041: NOT
42042: OR
42043: IFFALSE 42047
// exit ;
42045: GO 42442
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42047: LD_ADDR_VAR 0 6
42051: PUSH
42052: LD_VAR 0 7
42056: PPUSH
42057: LD_INT 0
42059: PPUSH
42060: LD_INT 4
42062: PPUSH
42063: CALL_OW 272
42067: PUSH
42068: LD_VAR 0 8
42072: PPUSH
42073: LD_INT 0
42075: PPUSH
42076: LD_INT 4
42078: PPUSH
42079: CALL_OW 273
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_VAR 0 7
42092: PPUSH
42093: LD_INT 1
42095: PPUSH
42096: LD_INT 4
42098: PPUSH
42099: CALL_OW 272
42103: PUSH
42104: LD_VAR 0 8
42108: PPUSH
42109: LD_INT 1
42111: PPUSH
42112: LD_INT 4
42114: PPUSH
42115: CALL_OW 273
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_VAR 0 7
42128: PPUSH
42129: LD_INT 2
42131: PPUSH
42132: LD_INT 4
42134: PPUSH
42135: CALL_OW 272
42139: PUSH
42140: LD_VAR 0 8
42144: PPUSH
42145: LD_INT 2
42147: PPUSH
42148: LD_INT 4
42150: PPUSH
42151: CALL_OW 273
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_VAR 0 7
42164: PPUSH
42165: LD_INT 3
42167: PPUSH
42168: LD_INT 4
42170: PPUSH
42171: CALL_OW 272
42175: PUSH
42176: LD_VAR 0 8
42180: PPUSH
42181: LD_INT 3
42183: PPUSH
42184: LD_INT 4
42186: PPUSH
42187: CALL_OW 273
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_VAR 0 7
42200: PPUSH
42201: LD_INT 4
42203: PPUSH
42204: LD_INT 4
42206: PPUSH
42207: CALL_OW 272
42211: PUSH
42212: LD_VAR 0 8
42216: PPUSH
42217: LD_INT 4
42219: PPUSH
42220: LD_INT 4
42222: PPUSH
42223: CALL_OW 273
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_VAR 0 7
42236: PPUSH
42237: LD_INT 5
42239: PPUSH
42240: LD_INT 4
42242: PPUSH
42243: CALL_OW 272
42247: PUSH
42248: LD_VAR 0 8
42252: PPUSH
42253: LD_INT 5
42255: PPUSH
42256: LD_INT 4
42258: PPUSH
42259: CALL_OW 273
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: ST_TO_ADDR
// for i = tmp downto 1 do
42276: LD_ADDR_VAR 0 4
42280: PUSH
42281: DOUBLE
42282: LD_VAR 0 6
42286: INC
42287: ST_TO_ADDR
42288: LD_INT 1
42290: PUSH
42291: FOR_DOWNTO
42292: IFFALSE 42393
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42294: LD_VAR 0 6
42298: PUSH
42299: LD_VAR 0 4
42303: ARRAY
42304: PUSH
42305: LD_INT 1
42307: ARRAY
42308: PPUSH
42309: LD_VAR 0 6
42313: PUSH
42314: LD_VAR 0 4
42318: ARRAY
42319: PUSH
42320: LD_INT 2
42322: ARRAY
42323: PPUSH
42324: CALL_OW 488
42328: NOT
42329: PUSH
42330: LD_VAR 0 6
42334: PUSH
42335: LD_VAR 0 4
42339: ARRAY
42340: PUSH
42341: LD_INT 1
42343: ARRAY
42344: PPUSH
42345: LD_VAR 0 6
42349: PUSH
42350: LD_VAR 0 4
42354: ARRAY
42355: PUSH
42356: LD_INT 2
42358: ARRAY
42359: PPUSH
42360: CALL_OW 428
42364: PUSH
42365: LD_INT 0
42367: NONEQUAL
42368: OR
42369: IFFALSE 42391
// tmp := Delete ( tmp , i ) ;
42371: LD_ADDR_VAR 0 6
42375: PUSH
42376: LD_VAR 0 6
42380: PPUSH
42381: LD_VAR 0 4
42385: PPUSH
42386: CALL_OW 3
42390: ST_TO_ADDR
42391: GO 42291
42393: POP
42394: POP
// j := GetClosestHex ( unit , tmp ) ;
42395: LD_ADDR_VAR 0 5
42399: PUSH
42400: LD_VAR 0 1
42404: PPUSH
42405: LD_VAR 0 6
42409: PPUSH
42410: CALL 41686 0 2
42414: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42415: LD_VAR 0 1
42419: PPUSH
42420: LD_VAR 0 5
42424: PUSH
42425: LD_INT 1
42427: ARRAY
42428: PPUSH
42429: LD_VAR 0 5
42433: PUSH
42434: LD_INT 2
42436: ARRAY
42437: PPUSH
42438: CALL_OW 111
// end ;
42442: LD_VAR 0 3
42446: RET
// export function PrepareApemanSoldier ( ) ; begin
42447: LD_INT 0
42449: PPUSH
// uc_nation := 0 ;
42450: LD_ADDR_OWVAR 21
42454: PUSH
42455: LD_INT 0
42457: ST_TO_ADDR
// hc_sex := sex_male ;
42458: LD_ADDR_OWVAR 27
42462: PUSH
42463: LD_INT 1
42465: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42466: LD_ADDR_OWVAR 28
42470: PUSH
42471: LD_INT 15
42473: ST_TO_ADDR
// hc_gallery :=  ;
42474: LD_ADDR_OWVAR 33
42478: PUSH
42479: LD_STRING 
42481: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42482: LD_ADDR_OWVAR 31
42486: PUSH
42487: LD_INT 0
42489: PPUSH
42490: LD_INT 3
42492: PPUSH
42493: CALL_OW 12
42497: PUSH
42498: LD_INT 0
42500: PPUSH
42501: LD_INT 3
42503: PPUSH
42504: CALL_OW 12
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: ST_TO_ADDR
// end ;
42521: LD_VAR 0 1
42525: RET
// export function PrepareApemanEngineer ( ) ; begin
42526: LD_INT 0
42528: PPUSH
// uc_nation := 0 ;
42529: LD_ADDR_OWVAR 21
42533: PUSH
42534: LD_INT 0
42536: ST_TO_ADDR
// hc_sex := sex_male ;
42537: LD_ADDR_OWVAR 27
42541: PUSH
42542: LD_INT 1
42544: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
42545: LD_ADDR_OWVAR 28
42549: PUSH
42550: LD_INT 16
42552: ST_TO_ADDR
// hc_gallery :=  ;
42553: LD_ADDR_OWVAR 33
42557: PUSH
42558: LD_STRING 
42560: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42561: LD_ADDR_OWVAR 31
42565: PUSH
42566: LD_INT 0
42568: PPUSH
42569: LD_INT 3
42571: PPUSH
42572: CALL_OW 12
42576: PUSH
42577: LD_INT 0
42579: PPUSH
42580: LD_INT 3
42582: PPUSH
42583: CALL_OW 12
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: ST_TO_ADDR
// end ;
42600: LD_VAR 0 1
42604: RET
// export function PrepareApeman ( agressivity ) ; begin
42605: LD_INT 0
42607: PPUSH
// uc_side := 0 ;
42608: LD_ADDR_OWVAR 20
42612: PUSH
42613: LD_INT 0
42615: ST_TO_ADDR
// uc_nation := 0 ;
42616: LD_ADDR_OWVAR 21
42620: PUSH
42621: LD_INT 0
42623: ST_TO_ADDR
// hc_sex := sex_male ;
42624: LD_ADDR_OWVAR 27
42628: PUSH
42629: LD_INT 1
42631: ST_TO_ADDR
// hc_class := class_apeman ;
42632: LD_ADDR_OWVAR 28
42636: PUSH
42637: LD_INT 12
42639: ST_TO_ADDR
// hc_gallery :=  ;
42640: LD_ADDR_OWVAR 33
42644: PUSH
42645: LD_STRING 
42647: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42648: LD_ADDR_OWVAR 35
42652: PUSH
42653: LD_VAR 0 1
42657: NEG
42658: PPUSH
42659: LD_VAR 0 1
42663: PPUSH
42664: CALL_OW 12
42668: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42669: LD_ADDR_OWVAR 31
42673: PUSH
42674: LD_INT 0
42676: PPUSH
42677: LD_INT 3
42679: PPUSH
42680: CALL_OW 12
42684: PUSH
42685: LD_INT 0
42687: PPUSH
42688: LD_INT 3
42690: PPUSH
42691: CALL_OW 12
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: ST_TO_ADDR
// end ;
42708: LD_VAR 0 2
42712: RET
// export function PrepareTiger ( agressivity ) ; begin
42713: LD_INT 0
42715: PPUSH
// uc_side := 0 ;
42716: LD_ADDR_OWVAR 20
42720: PUSH
42721: LD_INT 0
42723: ST_TO_ADDR
// uc_nation := 0 ;
42724: LD_ADDR_OWVAR 21
42728: PUSH
42729: LD_INT 0
42731: ST_TO_ADDR
// hc_class := class_tiger ;
42732: LD_ADDR_OWVAR 28
42736: PUSH
42737: LD_INT 14
42739: ST_TO_ADDR
// hc_gallery :=  ;
42740: LD_ADDR_OWVAR 33
42744: PUSH
42745: LD_STRING 
42747: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42748: LD_ADDR_OWVAR 35
42752: PUSH
42753: LD_VAR 0 1
42757: NEG
42758: PPUSH
42759: LD_VAR 0 1
42763: PPUSH
42764: CALL_OW 12
42768: ST_TO_ADDR
// end ;
42769: LD_VAR 0 2
42773: RET
// export function PrepareEnchidna ( ) ; begin
42774: LD_INT 0
42776: PPUSH
// uc_side := 0 ;
42777: LD_ADDR_OWVAR 20
42781: PUSH
42782: LD_INT 0
42784: ST_TO_ADDR
// uc_nation := 0 ;
42785: LD_ADDR_OWVAR 21
42789: PUSH
42790: LD_INT 0
42792: ST_TO_ADDR
// hc_class := class_baggie ;
42793: LD_ADDR_OWVAR 28
42797: PUSH
42798: LD_INT 13
42800: ST_TO_ADDR
// hc_gallery :=  ;
42801: LD_ADDR_OWVAR 33
42805: PUSH
42806: LD_STRING 
42808: ST_TO_ADDR
// end ;
42809: LD_VAR 0 1
42813: RET
// export function PrepareFrog ( ) ; begin
42814: LD_INT 0
42816: PPUSH
// uc_side := 0 ;
42817: LD_ADDR_OWVAR 20
42821: PUSH
42822: LD_INT 0
42824: ST_TO_ADDR
// uc_nation := 0 ;
42825: LD_ADDR_OWVAR 21
42829: PUSH
42830: LD_INT 0
42832: ST_TO_ADDR
// hc_class := class_frog ;
42833: LD_ADDR_OWVAR 28
42837: PUSH
42838: LD_INT 19
42840: ST_TO_ADDR
// hc_gallery :=  ;
42841: LD_ADDR_OWVAR 33
42845: PUSH
42846: LD_STRING 
42848: ST_TO_ADDR
// end ;
42849: LD_VAR 0 1
42853: RET
// export function PrepareFish ( ) ; begin
42854: LD_INT 0
42856: PPUSH
// uc_side := 0 ;
42857: LD_ADDR_OWVAR 20
42861: PUSH
42862: LD_INT 0
42864: ST_TO_ADDR
// uc_nation := 0 ;
42865: LD_ADDR_OWVAR 21
42869: PUSH
42870: LD_INT 0
42872: ST_TO_ADDR
// hc_class := class_fish ;
42873: LD_ADDR_OWVAR 28
42877: PUSH
42878: LD_INT 20
42880: ST_TO_ADDR
// hc_gallery :=  ;
42881: LD_ADDR_OWVAR 33
42885: PUSH
42886: LD_STRING 
42888: ST_TO_ADDR
// end ;
42889: LD_VAR 0 1
42893: RET
// export function PrepareBird ( ) ; begin
42894: LD_INT 0
42896: PPUSH
// uc_side := 0 ;
42897: LD_ADDR_OWVAR 20
42901: PUSH
42902: LD_INT 0
42904: ST_TO_ADDR
// uc_nation := 0 ;
42905: LD_ADDR_OWVAR 21
42909: PUSH
42910: LD_INT 0
42912: ST_TO_ADDR
// hc_class := class_phororhacos ;
42913: LD_ADDR_OWVAR 28
42917: PUSH
42918: LD_INT 18
42920: ST_TO_ADDR
// hc_gallery :=  ;
42921: LD_ADDR_OWVAR 33
42925: PUSH
42926: LD_STRING 
42928: ST_TO_ADDR
// end ;
42929: LD_VAR 0 1
42933: RET
// export function PrepareHorse ( ) ; begin
42934: LD_INT 0
42936: PPUSH
// uc_side := 0 ;
42937: LD_ADDR_OWVAR 20
42941: PUSH
42942: LD_INT 0
42944: ST_TO_ADDR
// uc_nation := 0 ;
42945: LD_ADDR_OWVAR 21
42949: PUSH
42950: LD_INT 0
42952: ST_TO_ADDR
// hc_class := class_horse ;
42953: LD_ADDR_OWVAR 28
42957: PUSH
42958: LD_INT 21
42960: ST_TO_ADDR
// hc_gallery :=  ;
42961: LD_ADDR_OWVAR 33
42965: PUSH
42966: LD_STRING 
42968: ST_TO_ADDR
// end ;
42969: LD_VAR 0 1
42973: RET
// export function PrepareMastodont ( ) ; begin
42974: LD_INT 0
42976: PPUSH
// uc_side := 0 ;
42977: LD_ADDR_OWVAR 20
42981: PUSH
42982: LD_INT 0
42984: ST_TO_ADDR
// uc_nation := 0 ;
42985: LD_ADDR_OWVAR 21
42989: PUSH
42990: LD_INT 0
42992: ST_TO_ADDR
// vc_chassis := class_mastodont ;
42993: LD_ADDR_OWVAR 37
42997: PUSH
42998: LD_INT 31
43000: ST_TO_ADDR
// vc_control := control_rider ;
43001: LD_ADDR_OWVAR 38
43005: PUSH
43006: LD_INT 4
43008: ST_TO_ADDR
// end ;
43009: LD_VAR 0 1
43013: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43014: LD_INT 0
43016: PPUSH
43017: PPUSH
43018: PPUSH
// uc_side = 0 ;
43019: LD_ADDR_OWVAR 20
43023: PUSH
43024: LD_INT 0
43026: ST_TO_ADDR
// uc_nation = 0 ;
43027: LD_ADDR_OWVAR 21
43031: PUSH
43032: LD_INT 0
43034: ST_TO_ADDR
// InitHc_All ( ) ;
43035: CALL_OW 584
// InitVc ;
43039: CALL_OW 20
// if mastodonts then
43043: LD_VAR 0 6
43047: IFFALSE 43114
// for i = 1 to mastodonts do
43049: LD_ADDR_VAR 0 11
43053: PUSH
43054: DOUBLE
43055: LD_INT 1
43057: DEC
43058: ST_TO_ADDR
43059: LD_VAR 0 6
43063: PUSH
43064: FOR_TO
43065: IFFALSE 43112
// begin vc_chassis := 31 ;
43067: LD_ADDR_OWVAR 37
43071: PUSH
43072: LD_INT 31
43074: ST_TO_ADDR
// vc_control := control_rider ;
43075: LD_ADDR_OWVAR 38
43079: PUSH
43080: LD_INT 4
43082: ST_TO_ADDR
// animal := CreateVehicle ;
43083: LD_ADDR_VAR 0 12
43087: PUSH
43088: CALL_OW 45
43092: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43093: LD_VAR 0 12
43097: PPUSH
43098: LD_VAR 0 8
43102: PPUSH
43103: LD_INT 0
43105: PPUSH
43106: CALL 45242 0 3
// end ;
43110: GO 43064
43112: POP
43113: POP
// if horses then
43114: LD_VAR 0 5
43118: IFFALSE 43185
// for i = 1 to horses do
43120: LD_ADDR_VAR 0 11
43124: PUSH
43125: DOUBLE
43126: LD_INT 1
43128: DEC
43129: ST_TO_ADDR
43130: LD_VAR 0 5
43134: PUSH
43135: FOR_TO
43136: IFFALSE 43183
// begin hc_class := 21 ;
43138: LD_ADDR_OWVAR 28
43142: PUSH
43143: LD_INT 21
43145: ST_TO_ADDR
// hc_gallery :=  ;
43146: LD_ADDR_OWVAR 33
43150: PUSH
43151: LD_STRING 
43153: ST_TO_ADDR
// animal := CreateHuman ;
43154: LD_ADDR_VAR 0 12
43158: PUSH
43159: CALL_OW 44
43163: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43164: LD_VAR 0 12
43168: PPUSH
43169: LD_VAR 0 8
43173: PPUSH
43174: LD_INT 0
43176: PPUSH
43177: CALL 45242 0 3
// end ;
43181: GO 43135
43183: POP
43184: POP
// if birds then
43185: LD_VAR 0 1
43189: IFFALSE 43256
// for i = 1 to birds do
43191: LD_ADDR_VAR 0 11
43195: PUSH
43196: DOUBLE
43197: LD_INT 1
43199: DEC
43200: ST_TO_ADDR
43201: LD_VAR 0 1
43205: PUSH
43206: FOR_TO
43207: IFFALSE 43254
// begin hc_class = 18 ;
43209: LD_ADDR_OWVAR 28
43213: PUSH
43214: LD_INT 18
43216: ST_TO_ADDR
// hc_gallery =  ;
43217: LD_ADDR_OWVAR 33
43221: PUSH
43222: LD_STRING 
43224: ST_TO_ADDR
// animal := CreateHuman ;
43225: LD_ADDR_VAR 0 12
43229: PUSH
43230: CALL_OW 44
43234: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43235: LD_VAR 0 12
43239: PPUSH
43240: LD_VAR 0 8
43244: PPUSH
43245: LD_INT 0
43247: PPUSH
43248: CALL 45242 0 3
// end ;
43252: GO 43206
43254: POP
43255: POP
// if tigers then
43256: LD_VAR 0 2
43260: IFFALSE 43344
// for i = 1 to tigers do
43262: LD_ADDR_VAR 0 11
43266: PUSH
43267: DOUBLE
43268: LD_INT 1
43270: DEC
43271: ST_TO_ADDR
43272: LD_VAR 0 2
43276: PUSH
43277: FOR_TO
43278: IFFALSE 43342
// begin hc_class = class_tiger ;
43280: LD_ADDR_OWVAR 28
43284: PUSH
43285: LD_INT 14
43287: ST_TO_ADDR
// hc_gallery =  ;
43288: LD_ADDR_OWVAR 33
43292: PUSH
43293: LD_STRING 
43295: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43296: LD_ADDR_OWVAR 35
43300: PUSH
43301: LD_INT 7
43303: NEG
43304: PPUSH
43305: LD_INT 7
43307: PPUSH
43308: CALL_OW 12
43312: ST_TO_ADDR
// animal := CreateHuman ;
43313: LD_ADDR_VAR 0 12
43317: PUSH
43318: CALL_OW 44
43322: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43323: LD_VAR 0 12
43327: PPUSH
43328: LD_VAR 0 8
43332: PPUSH
43333: LD_INT 0
43335: PPUSH
43336: CALL 45242 0 3
// end ;
43340: GO 43277
43342: POP
43343: POP
// if apemans then
43344: LD_VAR 0 3
43348: IFFALSE 43471
// for i = 1 to apemans do
43350: LD_ADDR_VAR 0 11
43354: PUSH
43355: DOUBLE
43356: LD_INT 1
43358: DEC
43359: ST_TO_ADDR
43360: LD_VAR 0 3
43364: PUSH
43365: FOR_TO
43366: IFFALSE 43469
// begin hc_class = class_apeman ;
43368: LD_ADDR_OWVAR 28
43372: PUSH
43373: LD_INT 12
43375: ST_TO_ADDR
// hc_gallery =  ;
43376: LD_ADDR_OWVAR 33
43380: PUSH
43381: LD_STRING 
43383: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43384: LD_ADDR_OWVAR 35
43388: PUSH
43389: LD_INT 2
43391: NEG
43392: PPUSH
43393: LD_INT 2
43395: PPUSH
43396: CALL_OW 12
43400: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43401: LD_ADDR_OWVAR 31
43405: PUSH
43406: LD_INT 1
43408: PPUSH
43409: LD_INT 3
43411: PPUSH
43412: CALL_OW 12
43416: PUSH
43417: LD_INT 1
43419: PPUSH
43420: LD_INT 3
43422: PPUSH
43423: CALL_OW 12
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: ST_TO_ADDR
// animal := CreateHuman ;
43440: LD_ADDR_VAR 0 12
43444: PUSH
43445: CALL_OW 44
43449: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43450: LD_VAR 0 12
43454: PPUSH
43455: LD_VAR 0 8
43459: PPUSH
43460: LD_INT 0
43462: PPUSH
43463: CALL 45242 0 3
// end ;
43467: GO 43365
43469: POP
43470: POP
// if enchidnas then
43471: LD_VAR 0 4
43475: IFFALSE 43542
// for i = 1 to enchidnas do
43477: LD_ADDR_VAR 0 11
43481: PUSH
43482: DOUBLE
43483: LD_INT 1
43485: DEC
43486: ST_TO_ADDR
43487: LD_VAR 0 4
43491: PUSH
43492: FOR_TO
43493: IFFALSE 43540
// begin hc_class = 13 ;
43495: LD_ADDR_OWVAR 28
43499: PUSH
43500: LD_INT 13
43502: ST_TO_ADDR
// hc_gallery =  ;
43503: LD_ADDR_OWVAR 33
43507: PUSH
43508: LD_STRING 
43510: ST_TO_ADDR
// animal := CreateHuman ;
43511: LD_ADDR_VAR 0 12
43515: PUSH
43516: CALL_OW 44
43520: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43521: LD_VAR 0 12
43525: PPUSH
43526: LD_VAR 0 8
43530: PPUSH
43531: LD_INT 0
43533: PPUSH
43534: CALL 45242 0 3
// end ;
43538: GO 43492
43540: POP
43541: POP
// if fishes then
43542: LD_VAR 0 7
43546: IFFALSE 43613
// for i = 1 to fishes do
43548: LD_ADDR_VAR 0 11
43552: PUSH
43553: DOUBLE
43554: LD_INT 1
43556: DEC
43557: ST_TO_ADDR
43558: LD_VAR 0 7
43562: PUSH
43563: FOR_TO
43564: IFFALSE 43611
// begin hc_class = 20 ;
43566: LD_ADDR_OWVAR 28
43570: PUSH
43571: LD_INT 20
43573: ST_TO_ADDR
// hc_gallery =  ;
43574: LD_ADDR_OWVAR 33
43578: PUSH
43579: LD_STRING 
43581: ST_TO_ADDR
// animal := CreateHuman ;
43582: LD_ADDR_VAR 0 12
43586: PUSH
43587: CALL_OW 44
43591: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43592: LD_VAR 0 12
43596: PPUSH
43597: LD_VAR 0 9
43601: PPUSH
43602: LD_INT 0
43604: PPUSH
43605: CALL 45242 0 3
// end ;
43609: GO 43563
43611: POP
43612: POP
// end ;
43613: LD_VAR 0 10
43617: RET
// export function WantHeal ( sci , unit ) ; begin
43618: LD_INT 0
43620: PPUSH
// if GetTaskList ( sci ) > 0 then
43621: LD_VAR 0 1
43625: PPUSH
43626: CALL_OW 437
43630: PUSH
43631: LD_INT 0
43633: GREATER
43634: IFFALSE 43704
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43636: LD_VAR 0 1
43640: PPUSH
43641: CALL_OW 437
43645: PUSH
43646: LD_INT 1
43648: ARRAY
43649: PUSH
43650: LD_INT 1
43652: ARRAY
43653: PUSH
43654: LD_STRING l
43656: EQUAL
43657: PUSH
43658: LD_VAR 0 1
43662: PPUSH
43663: CALL_OW 437
43667: PUSH
43668: LD_INT 1
43670: ARRAY
43671: PUSH
43672: LD_INT 4
43674: ARRAY
43675: PUSH
43676: LD_VAR 0 2
43680: EQUAL
43681: AND
43682: IFFALSE 43694
// result := true else
43684: LD_ADDR_VAR 0 3
43688: PUSH
43689: LD_INT 1
43691: ST_TO_ADDR
43692: GO 43702
// result := false ;
43694: LD_ADDR_VAR 0 3
43698: PUSH
43699: LD_INT 0
43701: ST_TO_ADDR
// end else
43702: GO 43712
// result := false ;
43704: LD_ADDR_VAR 0 3
43708: PUSH
43709: LD_INT 0
43711: ST_TO_ADDR
// end ;
43712: LD_VAR 0 3
43716: RET
// export function HealTarget ( sci ) ; begin
43717: LD_INT 0
43719: PPUSH
// if not sci then
43720: LD_VAR 0 1
43724: NOT
43725: IFFALSE 43729
// exit ;
43727: GO 43794
// result := 0 ;
43729: LD_ADDR_VAR 0 2
43733: PUSH
43734: LD_INT 0
43736: ST_TO_ADDR
// if GetTaskList ( sci ) then
43737: LD_VAR 0 1
43741: PPUSH
43742: CALL_OW 437
43746: IFFALSE 43794
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
43748: LD_VAR 0 1
43752: PPUSH
43753: CALL_OW 437
43757: PUSH
43758: LD_INT 1
43760: ARRAY
43761: PUSH
43762: LD_INT 1
43764: ARRAY
43765: PUSH
43766: LD_STRING l
43768: EQUAL
43769: IFFALSE 43794
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
43771: LD_ADDR_VAR 0 2
43775: PUSH
43776: LD_VAR 0 1
43780: PPUSH
43781: CALL_OW 437
43785: PUSH
43786: LD_INT 1
43788: ARRAY
43789: PUSH
43790: LD_INT 4
43792: ARRAY
43793: ST_TO_ADDR
// end ;
43794: LD_VAR 0 2
43798: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
43799: LD_INT 0
43801: PPUSH
43802: PPUSH
43803: PPUSH
43804: PPUSH
// if not base_units then
43805: LD_VAR 0 1
43809: NOT
43810: IFFALSE 43814
// exit ;
43812: GO 43901
// result := false ;
43814: LD_ADDR_VAR 0 2
43818: PUSH
43819: LD_INT 0
43821: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
43822: LD_ADDR_VAR 0 5
43826: PUSH
43827: LD_VAR 0 1
43831: PPUSH
43832: LD_INT 21
43834: PUSH
43835: LD_INT 3
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PPUSH
43842: CALL_OW 72
43846: ST_TO_ADDR
// if not tmp then
43847: LD_VAR 0 5
43851: NOT
43852: IFFALSE 43856
// exit ;
43854: GO 43901
// for i in tmp do
43856: LD_ADDR_VAR 0 3
43860: PUSH
43861: LD_VAR 0 5
43865: PUSH
43866: FOR_IN
43867: IFFALSE 43899
// begin result := EnemyInRange ( i , 22 ) ;
43869: LD_ADDR_VAR 0 2
43873: PUSH
43874: LD_VAR 0 3
43878: PPUSH
43879: LD_INT 22
43881: PPUSH
43882: CALL 41488 0 2
43886: ST_TO_ADDR
// if result then
43887: LD_VAR 0 2
43891: IFFALSE 43897
// exit ;
43893: POP
43894: POP
43895: GO 43901
// end ;
43897: GO 43866
43899: POP
43900: POP
// end ;
43901: LD_VAR 0 2
43905: RET
// export function FilterByTag ( units , tag ) ; begin
43906: LD_INT 0
43908: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
43909: LD_ADDR_VAR 0 3
43913: PUSH
43914: LD_VAR 0 1
43918: PPUSH
43919: LD_INT 120
43921: PUSH
43922: LD_VAR 0 2
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PPUSH
43931: CALL_OW 72
43935: ST_TO_ADDR
// end ;
43936: LD_VAR 0 3
43940: RET
// export function IsDriver ( un ) ; begin
43941: LD_INT 0
43943: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
43944: LD_ADDR_VAR 0 2
43948: PUSH
43949: LD_VAR 0 1
43953: PUSH
43954: LD_INT 55
43956: PUSH
43957: EMPTY
43958: LIST
43959: PPUSH
43960: CALL_OW 69
43964: IN
43965: ST_TO_ADDR
// end ;
43966: LD_VAR 0 2
43970: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
43971: LD_INT 0
43973: PPUSH
43974: PPUSH
// list := [ ] ;
43975: LD_ADDR_VAR 0 5
43979: PUSH
43980: EMPTY
43981: ST_TO_ADDR
// case d of 0 :
43982: LD_VAR 0 3
43986: PUSH
43987: LD_INT 0
43989: DOUBLE
43990: EQUAL
43991: IFTRUE 43995
43993: GO 44128
43995: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
43996: LD_ADDR_VAR 0 5
44000: PUSH
44001: LD_VAR 0 1
44005: PUSH
44006: LD_INT 4
44008: MINUS
44009: PUSH
44010: LD_VAR 0 2
44014: PUSH
44015: LD_INT 4
44017: MINUS
44018: PUSH
44019: LD_INT 2
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: LIST
44026: PUSH
44027: LD_VAR 0 1
44031: PUSH
44032: LD_INT 3
44034: MINUS
44035: PUSH
44036: LD_VAR 0 2
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: LIST
44048: PUSH
44049: LD_VAR 0 1
44053: PUSH
44054: LD_INT 4
44056: PLUS
44057: PUSH
44058: LD_VAR 0 2
44062: PUSH
44063: LD_INT 4
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: PUSH
44071: LD_VAR 0 1
44075: PUSH
44076: LD_INT 3
44078: PLUS
44079: PUSH
44080: LD_VAR 0 2
44084: PUSH
44085: LD_INT 3
44087: PLUS
44088: PUSH
44089: LD_INT 5
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: PUSH
44097: LD_VAR 0 1
44101: PUSH
44102: LD_VAR 0 2
44106: PUSH
44107: LD_INT 4
44109: PLUS
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: LIST
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: ST_TO_ADDR
// end ; 1 :
44126: GO 44826
44128: LD_INT 1
44130: DOUBLE
44131: EQUAL
44132: IFTRUE 44136
44134: GO 44269
44136: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44137: LD_ADDR_VAR 0 5
44141: PUSH
44142: LD_VAR 0 1
44146: PUSH
44147: LD_VAR 0 2
44151: PUSH
44152: LD_INT 4
44154: MINUS
44155: PUSH
44156: LD_INT 3
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: LIST
44163: PUSH
44164: LD_VAR 0 1
44168: PUSH
44169: LD_INT 3
44171: MINUS
44172: PUSH
44173: LD_VAR 0 2
44177: PUSH
44178: LD_INT 3
44180: MINUS
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: LIST
44189: PUSH
44190: LD_VAR 0 1
44194: PUSH
44195: LD_INT 4
44197: MINUS
44198: PUSH
44199: LD_VAR 0 2
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: LIST
44211: PUSH
44212: LD_VAR 0 1
44216: PUSH
44217: LD_VAR 0 2
44221: PUSH
44222: LD_INT 3
44224: PLUS
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: LIST
44233: PUSH
44234: LD_VAR 0 1
44238: PUSH
44239: LD_INT 4
44241: PLUS
44242: PUSH
44243: LD_VAR 0 2
44247: PUSH
44248: LD_INT 4
44250: PLUS
44251: PUSH
44252: LD_INT 5
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: LIST
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: ST_TO_ADDR
// end ; 2 :
44267: GO 44826
44269: LD_INT 2
44271: DOUBLE
44272: EQUAL
44273: IFTRUE 44277
44275: GO 44406
44277: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44278: LD_ADDR_VAR 0 5
44282: PUSH
44283: LD_VAR 0 1
44287: PUSH
44288: LD_VAR 0 2
44292: PUSH
44293: LD_INT 3
44295: MINUS
44296: PUSH
44297: LD_INT 3
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: LIST
44304: PUSH
44305: LD_VAR 0 1
44309: PUSH
44310: LD_INT 4
44312: PLUS
44313: PUSH
44314: LD_VAR 0 2
44318: PUSH
44319: LD_INT 4
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: LIST
44326: PUSH
44327: LD_VAR 0 1
44331: PUSH
44332: LD_VAR 0 2
44336: PUSH
44337: LD_INT 4
44339: PLUS
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: LIST
44348: PUSH
44349: LD_VAR 0 1
44353: PUSH
44354: LD_INT 3
44356: MINUS
44357: PUSH
44358: LD_VAR 0 2
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: LIST
44370: PUSH
44371: LD_VAR 0 1
44375: PUSH
44376: LD_INT 4
44378: MINUS
44379: PUSH
44380: LD_VAR 0 2
44384: PUSH
44385: LD_INT 4
44387: MINUS
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: LIST
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: ST_TO_ADDR
// end ; 3 :
44404: GO 44826
44406: LD_INT 3
44408: DOUBLE
44409: EQUAL
44410: IFTRUE 44414
44412: GO 44547
44414: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44415: LD_ADDR_VAR 0 5
44419: PUSH
44420: LD_VAR 0 1
44424: PUSH
44425: LD_INT 3
44427: PLUS
44428: PUSH
44429: LD_VAR 0 2
44433: PUSH
44434: LD_INT 4
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: LIST
44441: PUSH
44442: LD_VAR 0 1
44446: PUSH
44447: LD_INT 4
44449: PLUS
44450: PUSH
44451: LD_VAR 0 2
44455: PUSH
44456: LD_INT 4
44458: PLUS
44459: PUSH
44460: LD_INT 5
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: LIST
44467: PUSH
44468: LD_VAR 0 1
44472: PUSH
44473: LD_INT 4
44475: MINUS
44476: PUSH
44477: LD_VAR 0 2
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: LIST
44489: PUSH
44490: LD_VAR 0 1
44494: PUSH
44495: LD_VAR 0 2
44499: PUSH
44500: LD_INT 4
44502: MINUS
44503: PUSH
44504: LD_INT 3
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: LIST
44511: PUSH
44512: LD_VAR 0 1
44516: PUSH
44517: LD_INT 3
44519: MINUS
44520: PUSH
44521: LD_VAR 0 2
44525: PUSH
44526: LD_INT 3
44528: MINUS
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: LIST
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: ST_TO_ADDR
// end ; 4 :
44545: GO 44826
44547: LD_INT 4
44549: DOUBLE
44550: EQUAL
44551: IFTRUE 44555
44553: GO 44688
44555: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44556: LD_ADDR_VAR 0 5
44560: PUSH
44561: LD_VAR 0 1
44565: PUSH
44566: LD_VAR 0 2
44570: PUSH
44571: LD_INT 4
44573: PLUS
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: LIST
44582: PUSH
44583: LD_VAR 0 1
44587: PUSH
44588: LD_INT 3
44590: PLUS
44591: PUSH
44592: LD_VAR 0 2
44596: PUSH
44597: LD_INT 3
44599: PLUS
44600: PUSH
44601: LD_INT 5
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: LIST
44608: PUSH
44609: LD_VAR 0 1
44613: PUSH
44614: LD_INT 4
44616: PLUS
44617: PUSH
44618: LD_VAR 0 2
44622: PUSH
44623: LD_INT 4
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: LIST
44630: PUSH
44631: LD_VAR 0 1
44635: PUSH
44636: LD_VAR 0 2
44640: PUSH
44641: LD_INT 3
44643: MINUS
44644: PUSH
44645: LD_INT 3
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: LIST
44652: PUSH
44653: LD_VAR 0 1
44657: PUSH
44658: LD_INT 4
44660: MINUS
44661: PUSH
44662: LD_VAR 0 2
44666: PUSH
44667: LD_INT 4
44669: MINUS
44670: PUSH
44671: LD_INT 2
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: LIST
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: ST_TO_ADDR
// end ; 5 :
44686: GO 44826
44688: LD_INT 5
44690: DOUBLE
44691: EQUAL
44692: IFTRUE 44696
44694: GO 44825
44696: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44697: LD_ADDR_VAR 0 5
44701: PUSH
44702: LD_VAR 0 1
44706: PUSH
44707: LD_INT 4
44709: MINUS
44710: PUSH
44711: LD_VAR 0 2
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: LIST
44723: PUSH
44724: LD_VAR 0 1
44728: PUSH
44729: LD_VAR 0 2
44733: PUSH
44734: LD_INT 4
44736: MINUS
44737: PUSH
44738: LD_INT 3
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: LIST
44745: PUSH
44746: LD_VAR 0 1
44750: PUSH
44751: LD_INT 4
44753: PLUS
44754: PUSH
44755: LD_VAR 0 2
44759: PUSH
44760: LD_INT 4
44762: PLUS
44763: PUSH
44764: LD_INT 5
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: LIST
44771: PUSH
44772: LD_VAR 0 1
44776: PUSH
44777: LD_INT 3
44779: PLUS
44780: PUSH
44781: LD_VAR 0 2
44785: PUSH
44786: LD_INT 4
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: LIST
44793: PUSH
44794: LD_VAR 0 1
44798: PUSH
44799: LD_VAR 0 2
44803: PUSH
44804: LD_INT 3
44806: PLUS
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: ST_TO_ADDR
// end ; end ;
44823: GO 44826
44825: POP
// result := list ;
44826: LD_ADDR_VAR 0 4
44830: PUSH
44831: LD_VAR 0 5
44835: ST_TO_ADDR
// end ;
44836: LD_VAR 0 4
44840: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
44841: LD_INT 0
44843: PPUSH
44844: PPUSH
44845: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
44846: LD_VAR 0 1
44850: NOT
44851: PUSH
44852: LD_VAR 0 2
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: LD_INT 3
44865: PUSH
44866: LD_INT 4
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: IN
44875: NOT
44876: OR
44877: IFFALSE 44881
// exit ;
44879: GO 44964
// tmp := [ ] ;
44881: LD_ADDR_VAR 0 5
44885: PUSH
44886: EMPTY
44887: ST_TO_ADDR
// for i in units do
44888: LD_ADDR_VAR 0 4
44892: PUSH
44893: LD_VAR 0 1
44897: PUSH
44898: FOR_IN
44899: IFFALSE 44933
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
44901: LD_ADDR_VAR 0 5
44905: PUSH
44906: LD_VAR 0 5
44910: PPUSH
44911: LD_VAR 0 4
44915: PPUSH
44916: LD_VAR 0 2
44920: PPUSH
44921: CALL_OW 259
44925: PPUSH
44926: CALL 46325 0 2
44930: ST_TO_ADDR
44931: GO 44898
44933: POP
44934: POP
// if not tmp then
44935: LD_VAR 0 5
44939: NOT
44940: IFFALSE 44944
// exit ;
44942: GO 44964
// result := SortListByListDesc ( units , tmp ) ;
44944: LD_ADDR_VAR 0 3
44948: PUSH
44949: LD_VAR 0 1
44953: PPUSH
44954: LD_VAR 0 5
44958: PPUSH
44959: CALL_OW 77
44963: ST_TO_ADDR
// end ;
44964: LD_VAR 0 3
44968: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
44969: LD_INT 0
44971: PPUSH
44972: PPUSH
44973: PPUSH
// result := false ;
44974: LD_ADDR_VAR 0 3
44978: PUSH
44979: LD_INT 0
44981: ST_TO_ADDR
// if not building then
44982: LD_VAR 0 2
44986: NOT
44987: IFFALSE 44991
// exit ;
44989: GO 45129
// x := GetX ( building ) ;
44991: LD_ADDR_VAR 0 4
44995: PUSH
44996: LD_VAR 0 2
45000: PPUSH
45001: CALL_OW 250
45005: ST_TO_ADDR
// y := GetY ( building ) ;
45006: LD_ADDR_VAR 0 5
45010: PUSH
45011: LD_VAR 0 2
45015: PPUSH
45016: CALL_OW 251
45020: ST_TO_ADDR
// if not x or not y then
45021: LD_VAR 0 4
45025: NOT
45026: PUSH
45027: LD_VAR 0 5
45031: NOT
45032: OR
45033: IFFALSE 45037
// exit ;
45035: GO 45129
// if GetTaskList ( unit ) then
45037: LD_VAR 0 1
45041: PPUSH
45042: CALL_OW 437
45046: IFFALSE 45129
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45048: LD_STRING e
45050: PUSH
45051: LD_VAR 0 1
45055: PPUSH
45056: CALL_OW 437
45060: PUSH
45061: LD_INT 1
45063: ARRAY
45064: PUSH
45065: LD_INT 1
45067: ARRAY
45068: EQUAL
45069: PUSH
45070: LD_VAR 0 4
45074: PUSH
45075: LD_VAR 0 1
45079: PPUSH
45080: CALL_OW 437
45084: PUSH
45085: LD_INT 1
45087: ARRAY
45088: PUSH
45089: LD_INT 2
45091: ARRAY
45092: EQUAL
45093: AND
45094: PUSH
45095: LD_VAR 0 5
45099: PUSH
45100: LD_VAR 0 1
45104: PPUSH
45105: CALL_OW 437
45109: PUSH
45110: LD_INT 1
45112: ARRAY
45113: PUSH
45114: LD_INT 3
45116: ARRAY
45117: EQUAL
45118: AND
45119: IFFALSE 45129
// result := true end ;
45121: LD_ADDR_VAR 0 3
45125: PUSH
45126: LD_INT 1
45128: ST_TO_ADDR
// end ;
45129: LD_VAR 0 3
45133: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45134: LD_INT 0
45136: PPUSH
// result := false ;
45137: LD_ADDR_VAR 0 4
45141: PUSH
45142: LD_INT 0
45144: ST_TO_ADDR
// if GetTaskList ( unit ) then
45145: LD_VAR 0 1
45149: PPUSH
45150: CALL_OW 437
45154: IFFALSE 45237
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45156: LD_STRING M
45158: PUSH
45159: LD_VAR 0 1
45163: PPUSH
45164: CALL_OW 437
45168: PUSH
45169: LD_INT 1
45171: ARRAY
45172: PUSH
45173: LD_INT 1
45175: ARRAY
45176: EQUAL
45177: PUSH
45178: LD_VAR 0 2
45182: PUSH
45183: LD_VAR 0 1
45187: PPUSH
45188: CALL_OW 437
45192: PUSH
45193: LD_INT 1
45195: ARRAY
45196: PUSH
45197: LD_INT 2
45199: ARRAY
45200: EQUAL
45201: AND
45202: PUSH
45203: LD_VAR 0 3
45207: PUSH
45208: LD_VAR 0 1
45212: PPUSH
45213: CALL_OW 437
45217: PUSH
45218: LD_INT 1
45220: ARRAY
45221: PUSH
45222: LD_INT 3
45224: ARRAY
45225: EQUAL
45226: AND
45227: IFFALSE 45237
// result := true ;
45229: LD_ADDR_VAR 0 4
45233: PUSH
45234: LD_INT 1
45236: ST_TO_ADDR
// end ; end ;
45237: LD_VAR 0 4
45241: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45242: LD_INT 0
45244: PPUSH
45245: PPUSH
45246: PPUSH
45247: PPUSH
// if not unit or not area then
45248: LD_VAR 0 1
45252: NOT
45253: PUSH
45254: LD_VAR 0 2
45258: NOT
45259: OR
45260: IFFALSE 45264
// exit ;
45262: GO 45428
// tmp := AreaToList ( area , i ) ;
45264: LD_ADDR_VAR 0 6
45268: PUSH
45269: LD_VAR 0 2
45273: PPUSH
45274: LD_VAR 0 5
45278: PPUSH
45279: CALL_OW 517
45283: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45284: LD_ADDR_VAR 0 5
45288: PUSH
45289: DOUBLE
45290: LD_INT 1
45292: DEC
45293: ST_TO_ADDR
45294: LD_VAR 0 6
45298: PUSH
45299: LD_INT 1
45301: ARRAY
45302: PUSH
45303: FOR_TO
45304: IFFALSE 45426
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45306: LD_ADDR_VAR 0 7
45310: PUSH
45311: LD_VAR 0 6
45315: PUSH
45316: LD_INT 1
45318: ARRAY
45319: PUSH
45320: LD_VAR 0 5
45324: ARRAY
45325: PUSH
45326: LD_VAR 0 6
45330: PUSH
45331: LD_INT 2
45333: ARRAY
45334: PUSH
45335: LD_VAR 0 5
45339: ARRAY
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
45345: LD_VAR 0 7
45349: PUSH
45350: LD_INT 1
45352: ARRAY
45353: PPUSH
45354: LD_VAR 0 7
45358: PUSH
45359: LD_INT 2
45361: ARRAY
45362: PPUSH
45363: CALL_OW 428
45367: PUSH
45368: LD_INT 0
45370: EQUAL
45371: IFFALSE 45424
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45373: LD_VAR 0 1
45377: PPUSH
45378: LD_VAR 0 7
45382: PUSH
45383: LD_INT 1
45385: ARRAY
45386: PPUSH
45387: LD_VAR 0 7
45391: PUSH
45392: LD_INT 2
45394: ARRAY
45395: PPUSH
45396: LD_VAR 0 3
45400: PPUSH
45401: CALL_OW 48
// result := IsPlaced ( unit ) ;
45405: LD_ADDR_VAR 0 4
45409: PUSH
45410: LD_VAR 0 1
45414: PPUSH
45415: CALL_OW 305
45419: ST_TO_ADDR
// exit ;
45420: POP
45421: POP
45422: GO 45428
// end ; end ;
45424: GO 45303
45426: POP
45427: POP
// end ;
45428: LD_VAR 0 4
45432: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45433: LD_INT 0
45435: PPUSH
45436: PPUSH
45437: PPUSH
// if not side or side > 8 then
45438: LD_VAR 0 1
45442: NOT
45443: PUSH
45444: LD_VAR 0 1
45448: PUSH
45449: LD_INT 8
45451: GREATER
45452: OR
45453: IFFALSE 45457
// exit ;
45455: GO 45644
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45457: LD_ADDR_VAR 0 4
45461: PUSH
45462: LD_INT 22
45464: PUSH
45465: LD_VAR 0 1
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 21
45476: PUSH
45477: LD_INT 3
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PPUSH
45488: CALL_OW 69
45492: ST_TO_ADDR
// if not tmp then
45493: LD_VAR 0 4
45497: NOT
45498: IFFALSE 45502
// exit ;
45500: GO 45644
// enable_addtolog := true ;
45502: LD_ADDR_OWVAR 81
45506: PUSH
45507: LD_INT 1
45509: ST_TO_ADDR
// AddToLog ( [ ) ;
45510: LD_STRING [
45512: PPUSH
45513: CALL_OW 561
// for i in tmp do
45517: LD_ADDR_VAR 0 3
45521: PUSH
45522: LD_VAR 0 4
45526: PUSH
45527: FOR_IN
45528: IFFALSE 45635
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45530: LD_STRING [
45532: PUSH
45533: LD_VAR 0 3
45537: PPUSH
45538: CALL_OW 266
45542: STR
45543: PUSH
45544: LD_STRING , 
45546: STR
45547: PUSH
45548: LD_VAR 0 3
45552: PPUSH
45553: CALL_OW 250
45557: STR
45558: PUSH
45559: LD_STRING , 
45561: STR
45562: PUSH
45563: LD_VAR 0 3
45567: PPUSH
45568: CALL_OW 251
45572: STR
45573: PUSH
45574: LD_STRING , 
45576: STR
45577: PUSH
45578: LD_VAR 0 3
45582: PPUSH
45583: CALL_OW 254
45587: STR
45588: PUSH
45589: LD_STRING , 
45591: STR
45592: PUSH
45593: LD_VAR 0 3
45597: PPUSH
45598: LD_INT 1
45600: PPUSH
45601: CALL_OW 268
45605: STR
45606: PUSH
45607: LD_STRING , 
45609: STR
45610: PUSH
45611: LD_VAR 0 3
45615: PPUSH
45616: LD_INT 2
45618: PPUSH
45619: CALL_OW 268
45623: STR
45624: PUSH
45625: LD_STRING ],
45627: STR
45628: PPUSH
45629: CALL_OW 561
// end ;
45633: GO 45527
45635: POP
45636: POP
// AddToLog ( ]; ) ;
45637: LD_STRING ];
45639: PPUSH
45640: CALL_OW 561
// end ;
45644: LD_VAR 0 2
45648: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45649: LD_INT 0
45651: PPUSH
45652: PPUSH
45653: PPUSH
45654: PPUSH
45655: PPUSH
// if not area or not rate or not max then
45656: LD_VAR 0 1
45660: NOT
45661: PUSH
45662: LD_VAR 0 2
45666: NOT
45667: OR
45668: PUSH
45669: LD_VAR 0 4
45673: NOT
45674: OR
45675: IFFALSE 45679
// exit ;
45677: GO 45868
// while 1 do
45679: LD_INT 1
45681: IFFALSE 45868
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45683: LD_ADDR_VAR 0 9
45687: PUSH
45688: LD_VAR 0 1
45692: PPUSH
45693: LD_INT 1
45695: PPUSH
45696: CALL_OW 287
45700: PUSH
45701: LD_INT 10
45703: MUL
45704: ST_TO_ADDR
// r := rate / 10 ;
45705: LD_ADDR_VAR 0 7
45709: PUSH
45710: LD_VAR 0 2
45714: PUSH
45715: LD_INT 10
45717: DIVREAL
45718: ST_TO_ADDR
// time := 1 1$00 ;
45719: LD_ADDR_VAR 0 8
45723: PUSH
45724: LD_INT 2100
45726: ST_TO_ADDR
// if amount < min then
45727: LD_VAR 0 9
45731: PUSH
45732: LD_VAR 0 3
45736: LESS
45737: IFFALSE 45755
// r := r * 2 else
45739: LD_ADDR_VAR 0 7
45743: PUSH
45744: LD_VAR 0 7
45748: PUSH
45749: LD_INT 2
45751: MUL
45752: ST_TO_ADDR
45753: GO 45781
// if amount > max then
45755: LD_VAR 0 9
45759: PUSH
45760: LD_VAR 0 4
45764: GREATER
45765: IFFALSE 45781
// r := r / 2 ;
45767: LD_ADDR_VAR 0 7
45771: PUSH
45772: LD_VAR 0 7
45776: PUSH
45777: LD_INT 2
45779: DIVREAL
45780: ST_TO_ADDR
// time := time / r ;
45781: LD_ADDR_VAR 0 8
45785: PUSH
45786: LD_VAR 0 8
45790: PUSH
45791: LD_VAR 0 7
45795: DIVREAL
45796: ST_TO_ADDR
// if time < 0 then
45797: LD_VAR 0 8
45801: PUSH
45802: LD_INT 0
45804: LESS
45805: IFFALSE 45822
// time := time * - 1 ;
45807: LD_ADDR_VAR 0 8
45811: PUSH
45812: LD_VAR 0 8
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: MUL
45821: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
45822: LD_VAR 0 8
45826: PUSH
45827: LD_INT 35
45829: PPUSH
45830: LD_INT 875
45832: PPUSH
45833: CALL_OW 12
45837: PLUS
45838: PPUSH
45839: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
45843: LD_INT 1
45845: PPUSH
45846: LD_INT 5
45848: PPUSH
45849: CALL_OW 12
45853: PPUSH
45854: LD_VAR 0 1
45858: PPUSH
45859: LD_INT 1
45861: PPUSH
45862: CALL_OW 55
// end ;
45866: GO 45679
// end ;
45868: LD_VAR 0 5
45872: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
45873: LD_INT 0
45875: PPUSH
45876: PPUSH
45877: PPUSH
45878: PPUSH
45879: PPUSH
45880: PPUSH
45881: PPUSH
45882: PPUSH
// if not turrets or not factories then
45883: LD_VAR 0 1
45887: NOT
45888: PUSH
45889: LD_VAR 0 2
45893: NOT
45894: OR
45895: IFFALSE 45899
// exit ;
45897: GO 46206
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
45899: LD_ADDR_VAR 0 10
45903: PUSH
45904: LD_INT 5
45906: PUSH
45907: LD_INT 6
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: LD_INT 4
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 3
45926: PUSH
45927: LD_INT 5
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 24
45941: PUSH
45942: LD_INT 25
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 23
45951: PUSH
45952: LD_INT 27
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 42
45965: PUSH
45966: LD_INT 43
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 44
45975: PUSH
45976: LD_INT 46
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 45
45985: PUSH
45986: LD_INT 47
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: LIST
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: LIST
46002: ST_TO_ADDR
// result := [ ] ;
46003: LD_ADDR_VAR 0 3
46007: PUSH
46008: EMPTY
46009: ST_TO_ADDR
// for i in turrets do
46010: LD_ADDR_VAR 0 4
46014: PUSH
46015: LD_VAR 0 1
46019: PUSH
46020: FOR_IN
46021: IFFALSE 46204
// begin nat := GetNation ( i ) ;
46023: LD_ADDR_VAR 0 7
46027: PUSH
46028: LD_VAR 0 4
46032: PPUSH
46033: CALL_OW 248
46037: ST_TO_ADDR
// weapon := 0 ;
46038: LD_ADDR_VAR 0 8
46042: PUSH
46043: LD_INT 0
46045: ST_TO_ADDR
// if not nat then
46046: LD_VAR 0 7
46050: NOT
46051: IFFALSE 46055
// continue ;
46053: GO 46020
// for j in list [ nat ] do
46055: LD_ADDR_VAR 0 5
46059: PUSH
46060: LD_VAR 0 10
46064: PUSH
46065: LD_VAR 0 7
46069: ARRAY
46070: PUSH
46071: FOR_IN
46072: IFFALSE 46113
// if GetBWeapon ( i ) = j [ 1 ] then
46074: LD_VAR 0 4
46078: PPUSH
46079: CALL_OW 269
46083: PUSH
46084: LD_VAR 0 5
46088: PUSH
46089: LD_INT 1
46091: ARRAY
46092: EQUAL
46093: IFFALSE 46111
// begin weapon := j [ 2 ] ;
46095: LD_ADDR_VAR 0 8
46099: PUSH
46100: LD_VAR 0 5
46104: PUSH
46105: LD_INT 2
46107: ARRAY
46108: ST_TO_ADDR
// break ;
46109: GO 46113
// end ;
46111: GO 46071
46113: POP
46114: POP
// if not weapon then
46115: LD_VAR 0 8
46119: NOT
46120: IFFALSE 46124
// continue ;
46122: GO 46020
// for k in factories do
46124: LD_ADDR_VAR 0 6
46128: PUSH
46129: LD_VAR 0 2
46133: PUSH
46134: FOR_IN
46135: IFFALSE 46200
// begin weapons := AvailableWeaponList ( k ) ;
46137: LD_ADDR_VAR 0 9
46141: PUSH
46142: LD_VAR 0 6
46146: PPUSH
46147: CALL_OW 478
46151: ST_TO_ADDR
// if not weapons then
46152: LD_VAR 0 9
46156: NOT
46157: IFFALSE 46161
// continue ;
46159: GO 46134
// if weapon in weapons then
46161: LD_VAR 0 8
46165: PUSH
46166: LD_VAR 0 9
46170: IN
46171: IFFALSE 46198
// begin result := [ i , weapon ] ;
46173: LD_ADDR_VAR 0 3
46177: PUSH
46178: LD_VAR 0 4
46182: PUSH
46183: LD_VAR 0 8
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: ST_TO_ADDR
// exit ;
46192: POP
46193: POP
46194: POP
46195: POP
46196: GO 46206
// end ; end ;
46198: GO 46134
46200: POP
46201: POP
// end ;
46202: GO 46020
46204: POP
46205: POP
// end ;
46206: LD_VAR 0 3
46210: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46211: LD_INT 0
46213: PPUSH
// if not side or side > 8 then
46214: LD_VAR 0 3
46218: NOT
46219: PUSH
46220: LD_VAR 0 3
46224: PUSH
46225: LD_INT 8
46227: GREATER
46228: OR
46229: IFFALSE 46233
// exit ;
46231: GO 46292
// if not range then
46233: LD_VAR 0 4
46237: NOT
46238: IFFALSE 46249
// range := - 12 ;
46240: LD_ADDR_VAR 0 4
46244: PUSH
46245: LD_INT 12
46247: NEG
46248: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46249: LD_VAR 0 1
46253: PPUSH
46254: LD_VAR 0 2
46258: PPUSH
46259: LD_VAR 0 3
46263: PPUSH
46264: LD_VAR 0 4
46268: PPUSH
46269: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46273: LD_VAR 0 1
46277: PPUSH
46278: LD_VAR 0 2
46282: PPUSH
46283: LD_VAR 0 3
46287: PPUSH
46288: CALL_OW 331
// end ;
46292: LD_VAR 0 5
46296: RET
// export function Video ( mode ) ; begin
46297: LD_INT 0
46299: PPUSH
// ingame_video = mode ;
46300: LD_ADDR_OWVAR 52
46304: PUSH
46305: LD_VAR 0 1
46309: ST_TO_ADDR
// interface_hidden = mode ;
46310: LD_ADDR_OWVAR 54
46314: PUSH
46315: LD_VAR 0 1
46319: ST_TO_ADDR
// end ;
46320: LD_VAR 0 2
46324: RET
// export function Join ( array , element ) ; begin
46325: LD_INT 0
46327: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46328: LD_ADDR_VAR 0 3
46332: PUSH
46333: LD_VAR 0 1
46337: PPUSH
46338: LD_VAR 0 1
46342: PUSH
46343: LD_INT 1
46345: PLUS
46346: PPUSH
46347: LD_VAR 0 2
46351: PPUSH
46352: CALL_OW 1
46356: ST_TO_ADDR
// end ;
46357: LD_VAR 0 3
46361: RET
// export function JoinUnion ( array , element ) ; begin
46362: LD_INT 0
46364: PPUSH
// result := array union element ;
46365: LD_ADDR_VAR 0 3
46369: PUSH
46370: LD_VAR 0 1
46374: PUSH
46375: LD_VAR 0 2
46379: UNION
46380: ST_TO_ADDR
// end ;
46381: LD_VAR 0 3
46385: RET
// export function GetBehemoths ( side ) ; begin
46386: LD_INT 0
46388: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
46389: LD_ADDR_VAR 0 2
46393: PUSH
46394: LD_INT 22
46396: PUSH
46397: LD_VAR 0 1
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 31
46408: PUSH
46409: LD_INT 25
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PPUSH
46420: CALL_OW 69
46424: ST_TO_ADDR
// end ;
46425: LD_VAR 0 2
46429: RET
// export function Shuffle ( array ) ; var i , index ; begin
46430: LD_INT 0
46432: PPUSH
46433: PPUSH
46434: PPUSH
// result := [ ] ;
46435: LD_ADDR_VAR 0 2
46439: PUSH
46440: EMPTY
46441: ST_TO_ADDR
// if not array then
46442: LD_VAR 0 1
46446: NOT
46447: IFFALSE 46451
// exit ;
46449: GO 46550
// Randomize ;
46451: CALL_OW 10
// for i = array downto 1 do
46455: LD_ADDR_VAR 0 3
46459: PUSH
46460: DOUBLE
46461: LD_VAR 0 1
46465: INC
46466: ST_TO_ADDR
46467: LD_INT 1
46469: PUSH
46470: FOR_DOWNTO
46471: IFFALSE 46548
// begin index := rand ( 1 , array ) ;
46473: LD_ADDR_VAR 0 4
46477: PUSH
46478: LD_INT 1
46480: PPUSH
46481: LD_VAR 0 1
46485: PPUSH
46486: CALL_OW 12
46490: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46491: LD_ADDR_VAR 0 2
46495: PUSH
46496: LD_VAR 0 2
46500: PPUSH
46501: LD_VAR 0 2
46505: PUSH
46506: LD_INT 1
46508: PLUS
46509: PPUSH
46510: LD_VAR 0 1
46514: PUSH
46515: LD_VAR 0 4
46519: ARRAY
46520: PPUSH
46521: CALL_OW 2
46525: ST_TO_ADDR
// array := Delete ( array , index ) ;
46526: LD_ADDR_VAR 0 1
46530: PUSH
46531: LD_VAR 0 1
46535: PPUSH
46536: LD_VAR 0 4
46540: PPUSH
46541: CALL_OW 3
46545: ST_TO_ADDR
// end ;
46546: GO 46470
46548: POP
46549: POP
// end ;
46550: LD_VAR 0 2
46554: RET
// export function GetBaseMaterials ( base ) ; begin
46555: LD_INT 0
46557: PPUSH
// result := [ 0 , 0 , 0 ] ;
46558: LD_ADDR_VAR 0 2
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: LIST
46576: ST_TO_ADDR
// if not base then
46577: LD_VAR 0 1
46581: NOT
46582: IFFALSE 46586
// exit ;
46584: GO 46635
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46586: LD_ADDR_VAR 0 2
46590: PUSH
46591: LD_VAR 0 1
46595: PPUSH
46596: LD_INT 1
46598: PPUSH
46599: CALL_OW 275
46603: PUSH
46604: LD_VAR 0 1
46608: PPUSH
46609: LD_INT 2
46611: PPUSH
46612: CALL_OW 275
46616: PUSH
46617: LD_VAR 0 1
46621: PPUSH
46622: LD_INT 3
46624: PPUSH
46625: CALL_OW 275
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: LIST
46634: ST_TO_ADDR
// end ;
46635: LD_VAR 0 2
46639: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46640: LD_INT 0
46642: PPUSH
46643: PPUSH
// result := array ;
46644: LD_ADDR_VAR 0 3
46648: PUSH
46649: LD_VAR 0 1
46653: ST_TO_ADDR
// if size >= result then
46654: LD_VAR 0 2
46658: PUSH
46659: LD_VAR 0 3
46663: GREATEREQUAL
46664: IFFALSE 46668
// exit ;
46666: GO 46718
// if size then
46668: LD_VAR 0 2
46672: IFFALSE 46718
// for i := array downto size do
46674: LD_ADDR_VAR 0 4
46678: PUSH
46679: DOUBLE
46680: LD_VAR 0 1
46684: INC
46685: ST_TO_ADDR
46686: LD_VAR 0 2
46690: PUSH
46691: FOR_DOWNTO
46692: IFFALSE 46716
// result := Delete ( result , result ) ;
46694: LD_ADDR_VAR 0 3
46698: PUSH
46699: LD_VAR 0 3
46703: PPUSH
46704: LD_VAR 0 3
46708: PPUSH
46709: CALL_OW 3
46713: ST_TO_ADDR
46714: GO 46691
46716: POP
46717: POP
// end ;
46718: LD_VAR 0 3
46722: RET
// export function ComExit ( unit ) ; var tmp ; begin
46723: LD_INT 0
46725: PPUSH
46726: PPUSH
// if not IsInUnit ( unit ) then
46727: LD_VAR 0 1
46731: PPUSH
46732: CALL_OW 310
46736: NOT
46737: IFFALSE 46741
// exit ;
46739: GO 46801
// tmp := IsInUnit ( unit ) ;
46741: LD_ADDR_VAR 0 3
46745: PUSH
46746: LD_VAR 0 1
46750: PPUSH
46751: CALL_OW 310
46755: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
46756: LD_VAR 0 3
46760: PPUSH
46761: CALL_OW 247
46765: PUSH
46766: LD_INT 2
46768: EQUAL
46769: IFFALSE 46782
// ComExitVehicle ( unit ) else
46771: LD_VAR 0 1
46775: PPUSH
46776: CALL_OW 121
46780: GO 46791
// ComExitBuilding ( unit ) ;
46782: LD_VAR 0 1
46786: PPUSH
46787: CALL_OW 122
// result := tmp ;
46791: LD_ADDR_VAR 0 2
46795: PUSH
46796: LD_VAR 0 3
46800: ST_TO_ADDR
// end ;
46801: LD_VAR 0 2
46805: RET
// export function ComExitAll ( units ) ; var i ; begin
46806: LD_INT 0
46808: PPUSH
46809: PPUSH
// if not units then
46810: LD_VAR 0 1
46814: NOT
46815: IFFALSE 46819
// exit ;
46817: GO 46845
// for i in units do
46819: LD_ADDR_VAR 0 3
46823: PUSH
46824: LD_VAR 0 1
46828: PUSH
46829: FOR_IN
46830: IFFALSE 46843
// ComExit ( i ) ;
46832: LD_VAR 0 3
46836: PPUSH
46837: CALL 46723 0 1
46841: GO 46829
46843: POP
46844: POP
// end ;
46845: LD_VAR 0 2
46849: RET
// export function ResetHc ; begin
46850: LD_INT 0
46852: PPUSH
// InitHc ;
46853: CALL_OW 19
// hc_importance := 0 ;
46857: LD_ADDR_OWVAR 32
46861: PUSH
46862: LD_INT 0
46864: ST_TO_ADDR
// end ;
46865: LD_VAR 0 1
46869: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
46870: LD_INT 0
46872: PPUSH
46873: PPUSH
46874: PPUSH
// _x := ( x1 + x2 ) div 2 ;
46875: LD_ADDR_VAR 0 6
46879: PUSH
46880: LD_VAR 0 1
46884: PUSH
46885: LD_VAR 0 3
46889: PLUS
46890: PUSH
46891: LD_INT 2
46893: DIV
46894: ST_TO_ADDR
// if _x < 0 then
46895: LD_VAR 0 6
46899: PUSH
46900: LD_INT 0
46902: LESS
46903: IFFALSE 46920
// _x := _x * - 1 ;
46905: LD_ADDR_VAR 0 6
46909: PUSH
46910: LD_VAR 0 6
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: MUL
46919: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
46920: LD_ADDR_VAR 0 7
46924: PUSH
46925: LD_VAR 0 2
46929: PUSH
46930: LD_VAR 0 4
46934: PLUS
46935: PUSH
46936: LD_INT 2
46938: DIV
46939: ST_TO_ADDR
// if _y < 0 then
46940: LD_VAR 0 7
46944: PUSH
46945: LD_INT 0
46947: LESS
46948: IFFALSE 46965
// _y := _y * - 1 ;
46950: LD_ADDR_VAR 0 7
46954: PUSH
46955: LD_VAR 0 7
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: MUL
46964: ST_TO_ADDR
// result := [ _x , _y ] ;
46965: LD_ADDR_VAR 0 5
46969: PUSH
46970: LD_VAR 0 6
46974: PUSH
46975: LD_VAR 0 7
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: ST_TO_ADDR
// end ;
46984: LD_VAR 0 5
46988: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
46989: LD_INT 0
46991: PPUSH
46992: PPUSH
46993: PPUSH
46994: PPUSH
// task := GetTaskList ( unit ) ;
46995: LD_ADDR_VAR 0 7
46999: PUSH
47000: LD_VAR 0 1
47004: PPUSH
47005: CALL_OW 437
47009: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47010: LD_VAR 0 7
47014: NOT
47015: PUSH
47016: LD_VAR 0 1
47020: PPUSH
47021: LD_VAR 0 2
47025: PPUSH
47026: CALL_OW 308
47030: NOT
47031: AND
47032: IFFALSE 47036
// exit ;
47034: GO 47154
// if IsInArea ( unit , area ) then
47036: LD_VAR 0 1
47040: PPUSH
47041: LD_VAR 0 2
47045: PPUSH
47046: CALL_OW 308
47050: IFFALSE 47068
// begin ComMoveToArea ( unit , goAway ) ;
47052: LD_VAR 0 1
47056: PPUSH
47057: LD_VAR 0 3
47061: PPUSH
47062: CALL_OW 113
// exit ;
47066: GO 47154
// end ; if task [ 1 ] [ 1 ] <> M then
47068: LD_VAR 0 7
47072: PUSH
47073: LD_INT 1
47075: ARRAY
47076: PUSH
47077: LD_INT 1
47079: ARRAY
47080: PUSH
47081: LD_STRING M
47083: NONEQUAL
47084: IFFALSE 47088
// exit ;
47086: GO 47154
// x := task [ 1 ] [ 2 ] ;
47088: LD_ADDR_VAR 0 5
47092: PUSH
47093: LD_VAR 0 7
47097: PUSH
47098: LD_INT 1
47100: ARRAY
47101: PUSH
47102: LD_INT 2
47104: ARRAY
47105: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47106: LD_ADDR_VAR 0 6
47110: PUSH
47111: LD_VAR 0 7
47115: PUSH
47116: LD_INT 1
47118: ARRAY
47119: PUSH
47120: LD_INT 3
47122: ARRAY
47123: ST_TO_ADDR
// if InArea ( x , y , area ) then
47124: LD_VAR 0 5
47128: PPUSH
47129: LD_VAR 0 6
47133: PPUSH
47134: LD_VAR 0 2
47138: PPUSH
47139: CALL_OW 309
47143: IFFALSE 47154
// ComStop ( unit ) ;
47145: LD_VAR 0 1
47149: PPUSH
47150: CALL_OW 141
// end ;
47154: LD_VAR 0 4
47158: RET
// export function Abs ( value ) ; begin
47159: LD_INT 0
47161: PPUSH
// result := value ;
47162: LD_ADDR_VAR 0 2
47166: PUSH
47167: LD_VAR 0 1
47171: ST_TO_ADDR
// if value < 0 then
47172: LD_VAR 0 1
47176: PUSH
47177: LD_INT 0
47179: LESS
47180: IFFALSE 47197
// result := value * - 1 ;
47182: LD_ADDR_VAR 0 2
47186: PUSH
47187: LD_VAR 0 1
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: MUL
47196: ST_TO_ADDR
// end ;
47197: LD_VAR 0 2
47201: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47202: LD_INT 0
47204: PPUSH
47205: PPUSH
47206: PPUSH
47207: PPUSH
47208: PPUSH
47209: PPUSH
47210: PPUSH
47211: PPUSH
// if not unit or not building then
47212: LD_VAR 0 1
47216: NOT
47217: PUSH
47218: LD_VAR 0 2
47222: NOT
47223: OR
47224: IFFALSE 47228
// exit ;
47226: GO 47454
// x := GetX ( building ) ;
47228: LD_ADDR_VAR 0 4
47232: PUSH
47233: LD_VAR 0 2
47237: PPUSH
47238: CALL_OW 250
47242: ST_TO_ADDR
// y := GetY ( building ) ;
47243: LD_ADDR_VAR 0 6
47247: PUSH
47248: LD_VAR 0 2
47252: PPUSH
47253: CALL_OW 251
47257: ST_TO_ADDR
// d := GetDir ( building ) ;
47258: LD_ADDR_VAR 0 8
47262: PUSH
47263: LD_VAR 0 2
47267: PPUSH
47268: CALL_OW 254
47272: ST_TO_ADDR
// r := 4 ;
47273: LD_ADDR_VAR 0 9
47277: PUSH
47278: LD_INT 4
47280: ST_TO_ADDR
// for i := 1 to 5 do
47281: LD_ADDR_VAR 0 10
47285: PUSH
47286: DOUBLE
47287: LD_INT 1
47289: DEC
47290: ST_TO_ADDR
47291: LD_INT 5
47293: PUSH
47294: FOR_TO
47295: IFFALSE 47452
// begin _x := ShiftX ( x , d , r + i ) ;
47297: LD_ADDR_VAR 0 5
47301: PUSH
47302: LD_VAR 0 4
47306: PPUSH
47307: LD_VAR 0 8
47311: PPUSH
47312: LD_VAR 0 9
47316: PUSH
47317: LD_VAR 0 10
47321: PLUS
47322: PPUSH
47323: CALL_OW 272
47327: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47328: LD_ADDR_VAR 0 7
47332: PUSH
47333: LD_VAR 0 6
47337: PPUSH
47338: LD_VAR 0 8
47342: PPUSH
47343: LD_VAR 0 9
47347: PUSH
47348: LD_VAR 0 10
47352: PLUS
47353: PPUSH
47354: CALL_OW 273
47358: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47359: LD_VAR 0 5
47363: PPUSH
47364: LD_VAR 0 7
47368: PPUSH
47369: CALL_OW 488
47373: PUSH
47374: LD_VAR 0 5
47378: PPUSH
47379: LD_VAR 0 7
47383: PPUSH
47384: CALL_OW 428
47388: PPUSH
47389: CALL_OW 247
47393: PUSH
47394: LD_INT 3
47396: PUSH
47397: LD_INT 2
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: IN
47404: NOT
47405: AND
47406: IFFALSE 47450
// begin ComMoveXY ( unit , _x , _y ) ;
47408: LD_VAR 0 1
47412: PPUSH
47413: LD_VAR 0 5
47417: PPUSH
47418: LD_VAR 0 7
47422: PPUSH
47423: CALL_OW 111
// result := [ _x , _y ] ;
47427: LD_ADDR_VAR 0 3
47431: PUSH
47432: LD_VAR 0 5
47436: PUSH
47437: LD_VAR 0 7
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: ST_TO_ADDR
// exit ;
47446: POP
47447: POP
47448: GO 47454
// end ; end ;
47450: GO 47294
47452: POP
47453: POP
// end ;
47454: LD_VAR 0 3
47458: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47459: LD_INT 0
47461: PPUSH
47462: PPUSH
47463: PPUSH
// result := 0 ;
47464: LD_ADDR_VAR 0 3
47468: PUSH
47469: LD_INT 0
47471: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47472: LD_VAR 0 1
47476: PUSH
47477: LD_INT 0
47479: LESS
47480: PUSH
47481: LD_VAR 0 1
47485: PUSH
47486: LD_INT 8
47488: GREATER
47489: OR
47490: PUSH
47491: LD_VAR 0 2
47495: PUSH
47496: LD_INT 0
47498: LESS
47499: OR
47500: PUSH
47501: LD_VAR 0 2
47505: PUSH
47506: LD_INT 8
47508: GREATER
47509: OR
47510: IFFALSE 47514
// exit ;
47512: GO 47589
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47514: LD_ADDR_VAR 0 4
47518: PUSH
47519: LD_INT 22
47521: PUSH
47522: LD_VAR 0 2
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PPUSH
47531: CALL_OW 69
47535: PUSH
47536: FOR_IN
47537: IFFALSE 47587
// begin un := UnitShoot ( i ) ;
47539: LD_ADDR_VAR 0 5
47543: PUSH
47544: LD_VAR 0 4
47548: PPUSH
47549: CALL_OW 504
47553: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47554: LD_VAR 0 5
47558: PPUSH
47559: CALL_OW 255
47563: PUSH
47564: LD_VAR 0 1
47568: EQUAL
47569: IFFALSE 47585
// begin result := un ;
47571: LD_ADDR_VAR 0 3
47575: PUSH
47576: LD_VAR 0 5
47580: ST_TO_ADDR
// exit ;
47581: POP
47582: POP
47583: GO 47589
// end ; end ;
47585: GO 47536
47587: POP
47588: POP
// end ;
47589: LD_VAR 0 3
47593: RET
// export function GetCargoBay ( units ) ; begin
47594: LD_INT 0
47596: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47597: LD_ADDR_VAR 0 2
47601: PUSH
47602: LD_VAR 0 1
47606: PPUSH
47607: LD_INT 2
47609: PUSH
47610: LD_INT 34
47612: PUSH
47613: LD_INT 12
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 34
47622: PUSH
47623: LD_INT 51
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 34
47632: PUSH
47633: LD_INT 32
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 34
47642: PUSH
47643: LD_INT 89
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: PPUSH
47657: CALL_OW 72
47661: ST_TO_ADDR
// end ;
47662: LD_VAR 0 2
47666: RET
// export function Negate ( value ) ; begin
47667: LD_INT 0
47669: PPUSH
// result := not value ;
47670: LD_ADDR_VAR 0 2
47674: PUSH
47675: LD_VAR 0 1
47679: NOT
47680: ST_TO_ADDR
// end ;
47681: LD_VAR 0 2
47685: RET
// export function Inc ( value ) ; begin
47686: LD_INT 0
47688: PPUSH
// result := value + 1 ;
47689: LD_ADDR_VAR 0 2
47693: PUSH
47694: LD_VAR 0 1
47698: PUSH
47699: LD_INT 1
47701: PLUS
47702: ST_TO_ADDR
// end ;
47703: LD_VAR 0 2
47707: RET
// export function Dec ( value ) ; begin
47708: LD_INT 0
47710: PPUSH
// result := value - 1 ;
47711: LD_ADDR_VAR 0 2
47715: PUSH
47716: LD_VAR 0 1
47720: PUSH
47721: LD_INT 1
47723: MINUS
47724: ST_TO_ADDR
// end ;
47725: LD_VAR 0 2
47729: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
47730: LD_INT 0
47732: PPUSH
47733: PPUSH
47734: PPUSH
47735: PPUSH
47736: PPUSH
47737: PPUSH
47738: PPUSH
47739: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
47740: LD_VAR 0 1
47744: PPUSH
47745: LD_VAR 0 2
47749: PPUSH
47750: CALL_OW 488
47754: NOT
47755: PUSH
47756: LD_VAR 0 3
47760: PPUSH
47761: LD_VAR 0 4
47765: PPUSH
47766: CALL_OW 488
47770: NOT
47771: OR
47772: IFFALSE 47785
// begin result := - 1 ;
47774: LD_ADDR_VAR 0 5
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: ST_TO_ADDR
// exit ;
47783: GO 48020
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
47785: LD_ADDR_VAR 0 12
47789: PUSH
47790: LD_VAR 0 1
47794: PPUSH
47795: LD_VAR 0 2
47799: PPUSH
47800: LD_VAR 0 3
47804: PPUSH
47805: LD_VAR 0 4
47809: PPUSH
47810: CALL 46870 0 4
47814: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
47815: LD_ADDR_VAR 0 11
47819: PUSH
47820: LD_VAR 0 1
47824: PPUSH
47825: LD_VAR 0 2
47829: PPUSH
47830: LD_VAR 0 12
47834: PUSH
47835: LD_INT 1
47837: ARRAY
47838: PPUSH
47839: LD_VAR 0 12
47843: PUSH
47844: LD_INT 2
47846: ARRAY
47847: PPUSH
47848: CALL_OW 298
47852: ST_TO_ADDR
// distance := 9999 ;
47853: LD_ADDR_VAR 0 10
47857: PUSH
47858: LD_INT 9999
47860: ST_TO_ADDR
// for i := 0 to 5 do
47861: LD_ADDR_VAR 0 6
47865: PUSH
47866: DOUBLE
47867: LD_INT 0
47869: DEC
47870: ST_TO_ADDR
47871: LD_INT 5
47873: PUSH
47874: FOR_TO
47875: IFFALSE 48018
// begin _x := ShiftX ( x1 , i , centerDist ) ;
47877: LD_ADDR_VAR 0 7
47881: PUSH
47882: LD_VAR 0 1
47886: PPUSH
47887: LD_VAR 0 6
47891: PPUSH
47892: LD_VAR 0 11
47896: PPUSH
47897: CALL_OW 272
47901: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
47902: LD_ADDR_VAR 0 8
47906: PUSH
47907: LD_VAR 0 2
47911: PPUSH
47912: LD_VAR 0 6
47916: PPUSH
47917: LD_VAR 0 11
47921: PPUSH
47922: CALL_OW 273
47926: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47927: LD_VAR 0 7
47931: PPUSH
47932: LD_VAR 0 8
47936: PPUSH
47937: CALL_OW 488
47941: NOT
47942: IFFALSE 47946
// continue ;
47944: GO 47874
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
47946: LD_ADDR_VAR 0 9
47950: PUSH
47951: LD_VAR 0 12
47955: PUSH
47956: LD_INT 1
47958: ARRAY
47959: PPUSH
47960: LD_VAR 0 12
47964: PUSH
47965: LD_INT 2
47967: ARRAY
47968: PPUSH
47969: LD_VAR 0 7
47973: PPUSH
47974: LD_VAR 0 8
47978: PPUSH
47979: CALL_OW 298
47983: ST_TO_ADDR
// if tmp < distance then
47984: LD_VAR 0 9
47988: PUSH
47989: LD_VAR 0 10
47993: LESS
47994: IFFALSE 48016
// begin result := i ;
47996: LD_ADDR_VAR 0 5
48000: PUSH
48001: LD_VAR 0 6
48005: ST_TO_ADDR
// distance := tmp ;
48006: LD_ADDR_VAR 0 10
48010: PUSH
48011: LD_VAR 0 9
48015: ST_TO_ADDR
// end ; end ;
48016: GO 47874
48018: POP
48019: POP
// end ;
48020: LD_VAR 0 5
48024: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48025: LD_INT 0
48027: PPUSH
48028: PPUSH
// if not driver or not IsInUnit ( driver ) then
48029: LD_VAR 0 1
48033: NOT
48034: PUSH
48035: LD_VAR 0 1
48039: PPUSH
48040: CALL_OW 310
48044: NOT
48045: OR
48046: IFFALSE 48050
// exit ;
48048: GO 48140
// vehicle := IsInUnit ( driver ) ;
48050: LD_ADDR_VAR 0 3
48054: PUSH
48055: LD_VAR 0 1
48059: PPUSH
48060: CALL_OW 310
48064: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48065: LD_VAR 0 1
48069: PPUSH
48070: LD_STRING \
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: PUSH
48100: LD_STRING E
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: LD_VAR 0 3
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PPUSH
48136: CALL_OW 446
// end ;
48140: LD_VAR 0 2
48144: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48145: LD_INT 0
48147: PPUSH
48148: PPUSH
// if not driver or not IsInUnit ( driver ) then
48149: LD_VAR 0 1
48153: NOT
48154: PUSH
48155: LD_VAR 0 1
48159: PPUSH
48160: CALL_OW 310
48164: NOT
48165: OR
48166: IFFALSE 48170
// exit ;
48168: GO 48260
// vehicle := IsInUnit ( driver ) ;
48170: LD_ADDR_VAR 0 3
48174: PUSH
48175: LD_VAR 0 1
48179: PPUSH
48180: CALL_OW 310
48184: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48185: LD_VAR 0 1
48189: PPUSH
48190: LD_STRING \
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: PUSH
48220: LD_STRING E
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_VAR 0 3
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PPUSH
48256: CALL_OW 447
// end ;
48260: LD_VAR 0 2
48264: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48265: LD_INT 0
48267: PPUSH
48268: PPUSH
48269: PPUSH
// tmp := [ ] ;
48270: LD_ADDR_VAR 0 5
48274: PUSH
48275: EMPTY
48276: ST_TO_ADDR
// for i in units do
48277: LD_ADDR_VAR 0 4
48281: PUSH
48282: LD_VAR 0 1
48286: PUSH
48287: FOR_IN
48288: IFFALSE 48326
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48290: LD_ADDR_VAR 0 5
48294: PUSH
48295: LD_VAR 0 5
48299: PPUSH
48300: LD_VAR 0 5
48304: PUSH
48305: LD_INT 1
48307: PLUS
48308: PPUSH
48309: LD_VAR 0 4
48313: PPUSH
48314: CALL_OW 256
48318: PPUSH
48319: CALL_OW 2
48323: ST_TO_ADDR
48324: GO 48287
48326: POP
48327: POP
// if not tmp then
48328: LD_VAR 0 5
48332: NOT
48333: IFFALSE 48337
// exit ;
48335: GO 48385
// if asc then
48337: LD_VAR 0 2
48341: IFFALSE 48365
// result := SortListByListAsc ( units , tmp ) else
48343: LD_ADDR_VAR 0 3
48347: PUSH
48348: LD_VAR 0 1
48352: PPUSH
48353: LD_VAR 0 5
48357: PPUSH
48358: CALL_OW 76
48362: ST_TO_ADDR
48363: GO 48385
// result := SortListByListDesc ( units , tmp ) ;
48365: LD_ADDR_VAR 0 3
48369: PUSH
48370: LD_VAR 0 1
48374: PPUSH
48375: LD_VAR 0 5
48379: PPUSH
48380: CALL_OW 77
48384: ST_TO_ADDR
// end ;
48385: LD_VAR 0 3
48389: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48390: LD_INT 0
48392: PPUSH
48393: PPUSH
// task := GetTaskList ( mech ) ;
48394: LD_ADDR_VAR 0 4
48398: PUSH
48399: LD_VAR 0 1
48403: PPUSH
48404: CALL_OW 437
48408: ST_TO_ADDR
// if not task then
48409: LD_VAR 0 4
48413: NOT
48414: IFFALSE 48418
// exit ;
48416: GO 48460
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48418: LD_ADDR_VAR 0 3
48422: PUSH
48423: LD_VAR 0 4
48427: PUSH
48428: LD_INT 1
48430: ARRAY
48431: PUSH
48432: LD_INT 1
48434: ARRAY
48435: PUSH
48436: LD_STRING r
48438: EQUAL
48439: PUSH
48440: LD_VAR 0 4
48444: PUSH
48445: LD_INT 1
48447: ARRAY
48448: PUSH
48449: LD_INT 4
48451: ARRAY
48452: PUSH
48453: LD_VAR 0 2
48457: EQUAL
48458: AND
48459: ST_TO_ADDR
// end ;
48460: LD_VAR 0 3
48464: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48465: LD_INT 0
48467: PPUSH
// SetDir ( unit , d ) ;
48468: LD_VAR 0 1
48472: PPUSH
48473: LD_VAR 0 4
48477: PPUSH
48478: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48482: LD_VAR 0 1
48486: PPUSH
48487: LD_VAR 0 2
48491: PPUSH
48492: LD_VAR 0 3
48496: PPUSH
48497: LD_VAR 0 5
48501: PPUSH
48502: CALL_OW 48
// end ;
48506: LD_VAR 0 6
48510: RET
// export function ToNaturalNumber ( number ) ; begin
48511: LD_INT 0
48513: PPUSH
// result := number div 1 ;
48514: LD_ADDR_VAR 0 2
48518: PUSH
48519: LD_VAR 0 1
48523: PUSH
48524: LD_INT 1
48526: DIV
48527: ST_TO_ADDR
// if number < 0 then
48528: LD_VAR 0 1
48532: PUSH
48533: LD_INT 0
48535: LESS
48536: IFFALSE 48546
// result := 0 ;
48538: LD_ADDR_VAR 0 2
48542: PUSH
48543: LD_INT 0
48545: ST_TO_ADDR
// end ;
48546: LD_VAR 0 2
48550: RET
// export function SortByClass ( units , class ) ; var un ; begin
48551: LD_INT 0
48553: PPUSH
48554: PPUSH
// if not units or not class then
48555: LD_VAR 0 1
48559: NOT
48560: PUSH
48561: LD_VAR 0 2
48565: NOT
48566: OR
48567: IFFALSE 48571
// exit ;
48569: GO 48666
// result := [ ] ;
48571: LD_ADDR_VAR 0 3
48575: PUSH
48576: EMPTY
48577: ST_TO_ADDR
// for un in units do
48578: LD_ADDR_VAR 0 4
48582: PUSH
48583: LD_VAR 0 1
48587: PUSH
48588: FOR_IN
48589: IFFALSE 48664
// if GetClass ( un ) = class then
48591: LD_VAR 0 4
48595: PPUSH
48596: CALL_OW 257
48600: PUSH
48601: LD_VAR 0 2
48605: EQUAL
48606: IFFALSE 48633
// result := Insert ( result , 1 , un ) else
48608: LD_ADDR_VAR 0 3
48612: PUSH
48613: LD_VAR 0 3
48617: PPUSH
48618: LD_INT 1
48620: PPUSH
48621: LD_VAR 0 4
48625: PPUSH
48626: CALL_OW 2
48630: ST_TO_ADDR
48631: GO 48662
// result := Replace ( result , result + 1 , un ) ;
48633: LD_ADDR_VAR 0 3
48637: PUSH
48638: LD_VAR 0 3
48642: PPUSH
48643: LD_VAR 0 3
48647: PUSH
48648: LD_INT 1
48650: PLUS
48651: PPUSH
48652: LD_VAR 0 4
48656: PPUSH
48657: CALL_OW 1
48661: ST_TO_ADDR
48662: GO 48588
48664: POP
48665: POP
// end ;
48666: LD_VAR 0 3
48670: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
48671: LD_INT 0
48673: PPUSH
48674: PPUSH
48675: PPUSH
48676: PPUSH
48677: PPUSH
48678: PPUSH
48679: PPUSH
// result := [ ] ;
48680: LD_ADDR_VAR 0 4
48684: PUSH
48685: EMPTY
48686: ST_TO_ADDR
// if x - r < 0 then
48687: LD_VAR 0 1
48691: PUSH
48692: LD_VAR 0 3
48696: MINUS
48697: PUSH
48698: LD_INT 0
48700: LESS
48701: IFFALSE 48713
// min_x := 0 else
48703: LD_ADDR_VAR 0 8
48707: PUSH
48708: LD_INT 0
48710: ST_TO_ADDR
48711: GO 48729
// min_x := x - r ;
48713: LD_ADDR_VAR 0 8
48717: PUSH
48718: LD_VAR 0 1
48722: PUSH
48723: LD_VAR 0 3
48727: MINUS
48728: ST_TO_ADDR
// if y - r < 0 then
48729: LD_VAR 0 2
48733: PUSH
48734: LD_VAR 0 3
48738: MINUS
48739: PUSH
48740: LD_INT 0
48742: LESS
48743: IFFALSE 48755
// min_y := 0 else
48745: LD_ADDR_VAR 0 7
48749: PUSH
48750: LD_INT 0
48752: ST_TO_ADDR
48753: GO 48771
// min_y := y - r ;
48755: LD_ADDR_VAR 0 7
48759: PUSH
48760: LD_VAR 0 2
48764: PUSH
48765: LD_VAR 0 3
48769: MINUS
48770: ST_TO_ADDR
// max_x := x + r ;
48771: LD_ADDR_VAR 0 9
48775: PUSH
48776: LD_VAR 0 1
48780: PUSH
48781: LD_VAR 0 3
48785: PLUS
48786: ST_TO_ADDR
// max_y := y + r ;
48787: LD_ADDR_VAR 0 10
48791: PUSH
48792: LD_VAR 0 2
48796: PUSH
48797: LD_VAR 0 3
48801: PLUS
48802: ST_TO_ADDR
// for _x = min_x to max_x do
48803: LD_ADDR_VAR 0 5
48807: PUSH
48808: DOUBLE
48809: LD_VAR 0 8
48813: DEC
48814: ST_TO_ADDR
48815: LD_VAR 0 9
48819: PUSH
48820: FOR_TO
48821: IFFALSE 48922
// for _y = min_y to max_y do
48823: LD_ADDR_VAR 0 6
48827: PUSH
48828: DOUBLE
48829: LD_VAR 0 7
48833: DEC
48834: ST_TO_ADDR
48835: LD_VAR 0 10
48839: PUSH
48840: FOR_TO
48841: IFFALSE 48918
// begin if not ValidHex ( _x , _y ) then
48843: LD_VAR 0 5
48847: PPUSH
48848: LD_VAR 0 6
48852: PPUSH
48853: CALL_OW 488
48857: NOT
48858: IFFALSE 48862
// continue ;
48860: GO 48840
// if GetResourceTypeXY ( _x , _y ) then
48862: LD_VAR 0 5
48866: PPUSH
48867: LD_VAR 0 6
48871: PPUSH
48872: CALL_OW 283
48876: IFFALSE 48916
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
48878: LD_ADDR_VAR 0 4
48882: PUSH
48883: LD_VAR 0 4
48887: PPUSH
48888: LD_VAR 0 4
48892: PUSH
48893: LD_INT 1
48895: PLUS
48896: PPUSH
48897: LD_VAR 0 5
48901: PUSH
48902: LD_VAR 0 6
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PPUSH
48911: CALL_OW 1
48915: ST_TO_ADDR
// end ;
48916: GO 48840
48918: POP
48919: POP
48920: GO 48820
48922: POP
48923: POP
// end ;
48924: LD_VAR 0 4
48928: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
48929: LD_INT 0
48931: PPUSH
48932: PPUSH
48933: PPUSH
48934: PPUSH
48935: PPUSH
48936: PPUSH
48937: PPUSH
48938: PPUSH
// if not units then
48939: LD_VAR 0 1
48943: NOT
48944: IFFALSE 48948
// exit ;
48946: GO 49472
// result := UnitFilter ( units , [ f_ok ] ) ;
48948: LD_ADDR_VAR 0 3
48952: PUSH
48953: LD_VAR 0 1
48957: PPUSH
48958: LD_INT 50
48960: PUSH
48961: EMPTY
48962: LIST
48963: PPUSH
48964: CALL_OW 72
48968: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
48969: LD_ADDR_VAR 0 8
48973: PUSH
48974: LD_VAR 0 1
48978: PUSH
48979: LD_INT 1
48981: ARRAY
48982: PPUSH
48983: CALL_OW 255
48987: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
48988: LD_ADDR_VAR 0 10
48992: PUSH
48993: LD_INT 29
48995: PUSH
48996: LD_INT 91
48998: PUSH
48999: LD_INT 49
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: LIST
49006: ST_TO_ADDR
// if not result then
49007: LD_VAR 0 3
49011: NOT
49012: IFFALSE 49016
// exit ;
49014: GO 49472
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49016: LD_ADDR_VAR 0 5
49020: PUSH
49021: LD_INT 81
49023: PUSH
49024: LD_VAR 0 8
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PPUSH
49033: CALL_OW 69
49037: ST_TO_ADDR
// for i in result do
49038: LD_ADDR_VAR 0 4
49042: PUSH
49043: LD_VAR 0 3
49047: PUSH
49048: FOR_IN
49049: IFFALSE 49470
// begin tag := GetTag ( i ) + 1 ;
49051: LD_ADDR_VAR 0 9
49055: PUSH
49056: LD_VAR 0 4
49060: PPUSH
49061: CALL_OW 110
49065: PUSH
49066: LD_INT 1
49068: PLUS
49069: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
49070: LD_ADDR_VAR 0 7
49074: PUSH
49075: LD_VAR 0 4
49079: PPUSH
49080: CALL_OW 250
49084: PPUSH
49085: LD_VAR 0 4
49089: PPUSH
49090: CALL_OW 251
49094: PPUSH
49095: LD_INT 6
49097: PPUSH
49098: CALL 48671 0 3
49102: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
49103: LD_VAR 0 4
49107: PPUSH
49108: CALL_OW 247
49112: PUSH
49113: LD_INT 2
49115: EQUAL
49116: PUSH
49117: LD_VAR 0 7
49121: AND
49122: PUSH
49123: LD_VAR 0 4
49127: PPUSH
49128: CALL_OW 264
49132: PUSH
49133: LD_VAR 0 10
49137: IN
49138: NOT
49139: AND
49140: IFFALSE 49179
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49142: LD_VAR 0 4
49146: PPUSH
49147: LD_VAR 0 7
49151: PUSH
49152: LD_INT 1
49154: ARRAY
49155: PUSH
49156: LD_INT 1
49158: ARRAY
49159: PPUSH
49160: LD_VAR 0 7
49164: PUSH
49165: LD_INT 1
49167: ARRAY
49168: PUSH
49169: LD_INT 2
49171: ARRAY
49172: PPUSH
49173: CALL_OW 116
49177: GO 49468
// if path > tag then
49179: LD_VAR 0 2
49183: PUSH
49184: LD_VAR 0 9
49188: GREATER
49189: IFFALSE 49397
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49191: LD_ADDR_VAR 0 6
49195: PUSH
49196: LD_VAR 0 5
49200: PPUSH
49201: LD_INT 91
49203: PUSH
49204: LD_VAR 0 4
49208: PUSH
49209: LD_INT 8
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: LIST
49216: PPUSH
49217: CALL_OW 72
49221: ST_TO_ADDR
// if nearEnemy then
49222: LD_VAR 0 6
49226: IFFALSE 49295
// begin if GetWeapon ( i ) = ru_time_lapser then
49228: LD_VAR 0 4
49232: PPUSH
49233: CALL_OW 264
49237: PUSH
49238: LD_INT 49
49240: EQUAL
49241: IFFALSE 49269
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49243: LD_VAR 0 4
49247: PPUSH
49248: LD_VAR 0 6
49252: PPUSH
49253: LD_VAR 0 4
49257: PPUSH
49258: CALL_OW 74
49262: PPUSH
49263: CALL_OW 112
49267: GO 49293
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49269: LD_VAR 0 4
49273: PPUSH
49274: LD_VAR 0 6
49278: PPUSH
49279: LD_VAR 0 4
49283: PPUSH
49284: CALL_OW 74
49288: PPUSH
49289: CALL_OW 115
// end else
49293: GO 49395
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49295: LD_VAR 0 4
49299: PPUSH
49300: LD_VAR 0 2
49304: PUSH
49305: LD_VAR 0 9
49309: ARRAY
49310: PUSH
49311: LD_INT 1
49313: ARRAY
49314: PPUSH
49315: LD_VAR 0 2
49319: PUSH
49320: LD_VAR 0 9
49324: ARRAY
49325: PUSH
49326: LD_INT 2
49328: ARRAY
49329: PPUSH
49330: CALL_OW 297
49334: PUSH
49335: LD_INT 6
49337: GREATER
49338: IFFALSE 49381
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49340: LD_VAR 0 4
49344: PPUSH
49345: LD_VAR 0 2
49349: PUSH
49350: LD_VAR 0 9
49354: ARRAY
49355: PUSH
49356: LD_INT 1
49358: ARRAY
49359: PPUSH
49360: LD_VAR 0 2
49364: PUSH
49365: LD_VAR 0 9
49369: ARRAY
49370: PUSH
49371: LD_INT 2
49373: ARRAY
49374: PPUSH
49375: CALL_OW 114
49379: GO 49395
// SetTag ( i , tag ) ;
49381: LD_VAR 0 4
49385: PPUSH
49386: LD_VAR 0 9
49390: PPUSH
49391: CALL_OW 109
// end else
49395: GO 49468
// if enemy then
49397: LD_VAR 0 5
49401: IFFALSE 49468
// begin if GetWeapon ( i ) = ru_time_lapser then
49403: LD_VAR 0 4
49407: PPUSH
49408: CALL_OW 264
49412: PUSH
49413: LD_INT 49
49415: EQUAL
49416: IFFALSE 49444
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49418: LD_VAR 0 4
49422: PPUSH
49423: LD_VAR 0 5
49427: PPUSH
49428: LD_VAR 0 4
49432: PPUSH
49433: CALL_OW 74
49437: PPUSH
49438: CALL_OW 112
49442: GO 49468
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49444: LD_VAR 0 4
49448: PPUSH
49449: LD_VAR 0 5
49453: PPUSH
49454: LD_VAR 0 4
49458: PPUSH
49459: CALL_OW 74
49463: PPUSH
49464: CALL_OW 115
// end ; end ;
49468: GO 49048
49470: POP
49471: POP
// end ;
49472: LD_VAR 0 3
49476: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49477: LD_INT 0
49479: PPUSH
49480: PPUSH
49481: PPUSH
// if not unit or IsInUnit ( unit ) then
49482: LD_VAR 0 1
49486: NOT
49487: PUSH
49488: LD_VAR 0 1
49492: PPUSH
49493: CALL_OW 310
49497: OR
49498: IFFALSE 49502
// exit ;
49500: GO 49593
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49502: LD_ADDR_VAR 0 4
49506: PUSH
49507: LD_VAR 0 1
49511: PPUSH
49512: CALL_OW 250
49516: PPUSH
49517: LD_VAR 0 2
49521: PPUSH
49522: LD_INT 1
49524: PPUSH
49525: CALL_OW 272
49529: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49530: LD_ADDR_VAR 0 5
49534: PUSH
49535: LD_VAR 0 1
49539: PPUSH
49540: CALL_OW 251
49544: PPUSH
49545: LD_VAR 0 2
49549: PPUSH
49550: LD_INT 1
49552: PPUSH
49553: CALL_OW 273
49557: ST_TO_ADDR
// if ValidHex ( x , y ) then
49558: LD_VAR 0 4
49562: PPUSH
49563: LD_VAR 0 5
49567: PPUSH
49568: CALL_OW 488
49572: IFFALSE 49593
// ComTurnXY ( unit , x , y ) ;
49574: LD_VAR 0 1
49578: PPUSH
49579: LD_VAR 0 4
49583: PPUSH
49584: LD_VAR 0 5
49588: PPUSH
49589: CALL_OW 118
// end ;
49593: LD_VAR 0 3
49597: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49598: LD_INT 0
49600: PPUSH
49601: PPUSH
// result := false ;
49602: LD_ADDR_VAR 0 3
49606: PUSH
49607: LD_INT 0
49609: ST_TO_ADDR
// if not units then
49610: LD_VAR 0 2
49614: NOT
49615: IFFALSE 49619
// exit ;
49617: GO 49664
// for i in units do
49619: LD_ADDR_VAR 0 4
49623: PUSH
49624: LD_VAR 0 2
49628: PUSH
49629: FOR_IN
49630: IFFALSE 49662
// if See ( side , i ) then
49632: LD_VAR 0 1
49636: PPUSH
49637: LD_VAR 0 4
49641: PPUSH
49642: CALL_OW 292
49646: IFFALSE 49660
// begin result := true ;
49648: LD_ADDR_VAR 0 3
49652: PUSH
49653: LD_INT 1
49655: ST_TO_ADDR
// exit ;
49656: POP
49657: POP
49658: GO 49664
// end ;
49660: GO 49629
49662: POP
49663: POP
// end ;
49664: LD_VAR 0 3
49668: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49669: LD_INT 0
49671: PPUSH
49672: PPUSH
49673: PPUSH
49674: PPUSH
// if not unit or not points then
49675: LD_VAR 0 1
49679: NOT
49680: PUSH
49681: LD_VAR 0 2
49685: NOT
49686: OR
49687: IFFALSE 49691
// exit ;
49689: GO 49781
// dist := 99999 ;
49691: LD_ADDR_VAR 0 5
49695: PUSH
49696: LD_INT 99999
49698: ST_TO_ADDR
// for i in points do
49699: LD_ADDR_VAR 0 4
49703: PUSH
49704: LD_VAR 0 2
49708: PUSH
49709: FOR_IN
49710: IFFALSE 49779
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49712: LD_ADDR_VAR 0 6
49716: PUSH
49717: LD_VAR 0 1
49721: PPUSH
49722: LD_VAR 0 4
49726: PUSH
49727: LD_INT 1
49729: ARRAY
49730: PPUSH
49731: LD_VAR 0 4
49735: PUSH
49736: LD_INT 2
49738: ARRAY
49739: PPUSH
49740: CALL_OW 297
49744: ST_TO_ADDR
// if tmpDist < dist then
49745: LD_VAR 0 6
49749: PUSH
49750: LD_VAR 0 5
49754: LESS
49755: IFFALSE 49777
// begin result := i ;
49757: LD_ADDR_VAR 0 3
49761: PUSH
49762: LD_VAR 0 4
49766: ST_TO_ADDR
// dist := tmpDist ;
49767: LD_ADDR_VAR 0 5
49771: PUSH
49772: LD_VAR 0 6
49776: ST_TO_ADDR
// end ; end ;
49777: GO 49709
49779: POP
49780: POP
// end ;
49781: LD_VAR 0 3
49785: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
49786: LD_INT 0
49788: PPUSH
// uc_side := side ;
49789: LD_ADDR_OWVAR 20
49793: PUSH
49794: LD_VAR 0 1
49798: ST_TO_ADDR
// uc_nation := 3 ;
49799: LD_ADDR_OWVAR 21
49803: PUSH
49804: LD_INT 3
49806: ST_TO_ADDR
// vc_chassis := 25 ;
49807: LD_ADDR_OWVAR 37
49811: PUSH
49812: LD_INT 25
49814: ST_TO_ADDR
// vc_engine := engine_siberite ;
49815: LD_ADDR_OWVAR 39
49819: PUSH
49820: LD_INT 3
49822: ST_TO_ADDR
// vc_control := control_computer ;
49823: LD_ADDR_OWVAR 38
49827: PUSH
49828: LD_INT 3
49830: ST_TO_ADDR
// vc_weapon := 59 ;
49831: LD_ADDR_OWVAR 40
49835: PUSH
49836: LD_INT 59
49838: ST_TO_ADDR
// result := CreateVehicle ;
49839: LD_ADDR_VAR 0 5
49843: PUSH
49844: CALL_OW 45
49848: ST_TO_ADDR
// SetDir ( result , d ) ;
49849: LD_VAR 0 5
49853: PPUSH
49854: LD_VAR 0 4
49858: PPUSH
49859: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
49863: LD_VAR 0 5
49867: PPUSH
49868: LD_VAR 0 2
49872: PPUSH
49873: LD_VAR 0 3
49877: PPUSH
49878: LD_INT 0
49880: PPUSH
49881: CALL_OW 48
// end ;
49885: LD_VAR 0 5
49889: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
49890: LD_INT 0
49892: PPUSH
49893: PPUSH
49894: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
49895: LD_ADDR_VAR 0 2
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
49918: LD_VAR 0 1
49922: NOT
49923: PUSH
49924: LD_VAR 0 1
49928: PPUSH
49929: CALL_OW 264
49933: PUSH
49934: LD_INT 12
49936: PUSH
49937: LD_INT 51
49939: PUSH
49940: LD_INT 32
49942: PUSH
49943: LD_INT 89
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: IN
49952: NOT
49953: OR
49954: IFFALSE 49958
// exit ;
49956: GO 50056
// for i := 1 to 3 do
49958: LD_ADDR_VAR 0 3
49962: PUSH
49963: DOUBLE
49964: LD_INT 1
49966: DEC
49967: ST_TO_ADDR
49968: LD_INT 3
49970: PUSH
49971: FOR_TO
49972: IFFALSE 50054
// begin tmp := GetCargo ( cargo , i ) ;
49974: LD_ADDR_VAR 0 4
49978: PUSH
49979: LD_VAR 0 1
49983: PPUSH
49984: LD_VAR 0 3
49988: PPUSH
49989: CALL_OW 289
49993: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
49994: LD_ADDR_VAR 0 2
49998: PUSH
49999: LD_VAR 0 2
50003: PPUSH
50004: LD_VAR 0 3
50008: PPUSH
50009: LD_VAR 0 4
50013: PPUSH
50014: CALL_OW 1
50018: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50019: LD_ADDR_VAR 0 2
50023: PUSH
50024: LD_VAR 0 2
50028: PPUSH
50029: LD_INT 4
50031: PPUSH
50032: LD_VAR 0 2
50036: PUSH
50037: LD_INT 4
50039: ARRAY
50040: PUSH
50041: LD_VAR 0 4
50045: PLUS
50046: PPUSH
50047: CALL_OW 1
50051: ST_TO_ADDR
// end ;
50052: GO 49971
50054: POP
50055: POP
// end ;
50056: LD_VAR 0 2
50060: RET
// export function Length ( array ) ; begin
50061: LD_INT 0
50063: PPUSH
// result := array + 0 ;
50064: LD_ADDR_VAR 0 2
50068: PUSH
50069: LD_VAR 0 1
50073: PUSH
50074: LD_INT 0
50076: PLUS
50077: ST_TO_ADDR
// end ;
50078: LD_VAR 0 2
50082: RET
// export function PrepareArray ( array ) ; begin
50083: LD_INT 0
50085: PPUSH
// result := array diff 0 ;
50086: LD_ADDR_VAR 0 2
50090: PUSH
50091: LD_VAR 0 1
50095: PUSH
50096: LD_INT 0
50098: DIFF
50099: ST_TO_ADDR
// if not result [ 1 ] then
50100: LD_VAR 0 2
50104: PUSH
50105: LD_INT 1
50107: ARRAY
50108: NOT
50109: IFFALSE 50129
// result := Delete ( result , 1 ) ;
50111: LD_ADDR_VAR 0 2
50115: PUSH
50116: LD_VAR 0 2
50120: PPUSH
50121: LD_INT 1
50123: PPUSH
50124: CALL_OW 3
50128: ST_TO_ADDR
// end ;
50129: LD_VAR 0 2
50133: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50134: LD_INT 0
50136: PPUSH
50137: PPUSH
50138: PPUSH
50139: PPUSH
// sibRocketRange := 25 ;
50140: LD_ADDR_VAR 0 6
50144: PUSH
50145: LD_INT 25
50147: ST_TO_ADDR
// result := false ;
50148: LD_ADDR_VAR 0 4
50152: PUSH
50153: LD_INT 0
50155: ST_TO_ADDR
// for i := 0 to 5 do
50156: LD_ADDR_VAR 0 5
50160: PUSH
50161: DOUBLE
50162: LD_INT 0
50164: DEC
50165: ST_TO_ADDR
50166: LD_INT 5
50168: PUSH
50169: FOR_TO
50170: IFFALSE 50237
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50172: LD_VAR 0 1
50176: PPUSH
50177: LD_VAR 0 5
50181: PPUSH
50182: LD_VAR 0 6
50186: PPUSH
50187: CALL_OW 272
50191: PPUSH
50192: LD_VAR 0 2
50196: PPUSH
50197: LD_VAR 0 5
50201: PPUSH
50202: LD_VAR 0 6
50206: PPUSH
50207: CALL_OW 273
50211: PPUSH
50212: LD_VAR 0 3
50216: PPUSH
50217: CALL_OW 309
50221: IFFALSE 50235
// begin result := true ;
50223: LD_ADDR_VAR 0 4
50227: PUSH
50228: LD_INT 1
50230: ST_TO_ADDR
// exit ;
50231: POP
50232: POP
50233: GO 50239
// end ;
50235: GO 50169
50237: POP
50238: POP
// end ;
50239: LD_VAR 0 4
50243: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
50244: LD_INT 0
50246: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
50247: LD_VAR 0 1
50251: PPUSH
50252: LD_VAR 0 2
50256: PPUSH
50257: LD_INT 0
50259: PPUSH
50260: LD_INT 0
50262: PPUSH
50263: LD_INT 1
50265: PPUSH
50266: LD_INT 0
50268: PPUSH
50269: CALL_OW 587
// end ; end_of_file
50273: LD_VAR 0 3
50277: RET
// export globalGameSaveCounter ; every 0 0$1 do
50278: GO 50280
50280: DISABLE
// begin enable ;
50281: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
50282: LD_STRING updateTimer(
50284: PUSH
50285: LD_OWVAR 1
50289: STR
50290: PUSH
50291: LD_STRING );
50293: STR
50294: PPUSH
50295: CALL_OW 559
// end ;
50299: END
// every 0 0$1 do
50300: GO 50302
50302: DISABLE
// begin globalGameSaveCounter := 0 ;
50303: LD_ADDR_EXP 28
50307: PUSH
50308: LD_INT 0
50310: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
50311: LD_STRING setGameSaveCounter(0)
50313: PPUSH
50314: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
50318: LD_STRING initStreamRollete();
50320: PPUSH
50321: CALL_OW 559
// InitStreamMode ;
50325: CALL 51651 0 0
// DefineStreamItems ( false ) ;
50329: LD_INT 0
50331: PPUSH
50332: CALL 52115 0 1
// end ;
50336: END
// export function SOS_MapStart ( ) ; begin
50337: LD_INT 0
50339: PPUSH
// if streamModeActive then
50340: LD_EXP 29
50344: IFFALSE 50353
// DefineStreamItems ( true ) ;
50346: LD_INT 1
50348: PPUSH
50349: CALL 52115 0 1
// UpdateLuaVariables ( ) ;
50353: CALL 50370 0 0
// UpdateFactoryWaypoints ( ) ;
50357: CALL 64976 0 0
// UpdateWarehouseGatheringPoints ( ) ;
50361: CALL 65233 0 0
// end ;
50365: LD_VAR 0 1
50369: RET
// function UpdateLuaVariables ( ) ; begin
50370: LD_INT 0
50372: PPUSH
// if globalGameSaveCounter then
50373: LD_EXP 28
50377: IFFALSE 50411
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
50379: LD_ADDR_EXP 28
50383: PUSH
50384: LD_EXP 28
50388: PPUSH
50389: CALL 47686 0 1
50393: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50394: LD_STRING setGameSaveCounter(
50396: PUSH
50397: LD_EXP 28
50401: STR
50402: PUSH
50403: LD_STRING )
50405: STR
50406: PPUSH
50407: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
50411: LD_STRING setGameDifficulty(
50413: PUSH
50414: LD_OWVAR 67
50418: STR
50419: PUSH
50420: LD_STRING )
50422: STR
50423: PPUSH
50424: CALL_OW 559
// end ;
50428: LD_VAR 0 1
50432: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
50433: LD_INT 0
50435: PPUSH
// if p2 = stream_mode then
50436: LD_VAR 0 2
50440: PUSH
50441: LD_INT 100
50443: EQUAL
50444: IFFALSE 51447
// begin if not StreamModeActive then
50446: LD_EXP 29
50450: NOT
50451: IFFALSE 50461
// StreamModeActive := true ;
50453: LD_ADDR_EXP 29
50457: PUSH
50458: LD_INT 1
50460: ST_TO_ADDR
// if p3 = 0 then
50461: LD_VAR 0 3
50465: PUSH
50466: LD_INT 0
50468: EQUAL
50469: IFFALSE 50475
// InitStreamMode ;
50471: CALL 51651 0 0
// if p3 = 1 then
50475: LD_VAR 0 3
50479: PUSH
50480: LD_INT 1
50482: EQUAL
50483: IFFALSE 50493
// sRocket := true ;
50485: LD_ADDR_EXP 34
50489: PUSH
50490: LD_INT 1
50492: ST_TO_ADDR
// if p3 = 2 then
50493: LD_VAR 0 3
50497: PUSH
50498: LD_INT 2
50500: EQUAL
50501: IFFALSE 50511
// sSpeed := true ;
50503: LD_ADDR_EXP 33
50507: PUSH
50508: LD_INT 1
50510: ST_TO_ADDR
// if p3 = 3 then
50511: LD_VAR 0 3
50515: PUSH
50516: LD_INT 3
50518: EQUAL
50519: IFFALSE 50529
// sEngine := true ;
50521: LD_ADDR_EXP 35
50525: PUSH
50526: LD_INT 1
50528: ST_TO_ADDR
// if p3 = 4 then
50529: LD_VAR 0 3
50533: PUSH
50534: LD_INT 4
50536: EQUAL
50537: IFFALSE 50547
// sSpec := true ;
50539: LD_ADDR_EXP 32
50543: PUSH
50544: LD_INT 1
50546: ST_TO_ADDR
// if p3 = 5 then
50547: LD_VAR 0 3
50551: PUSH
50552: LD_INT 5
50554: EQUAL
50555: IFFALSE 50565
// sLevel := true ;
50557: LD_ADDR_EXP 36
50561: PUSH
50562: LD_INT 1
50564: ST_TO_ADDR
// if p3 = 6 then
50565: LD_VAR 0 3
50569: PUSH
50570: LD_INT 6
50572: EQUAL
50573: IFFALSE 50583
// sArmoury := true ;
50575: LD_ADDR_EXP 37
50579: PUSH
50580: LD_INT 1
50582: ST_TO_ADDR
// if p3 = 7 then
50583: LD_VAR 0 3
50587: PUSH
50588: LD_INT 7
50590: EQUAL
50591: IFFALSE 50601
// sRadar := true ;
50593: LD_ADDR_EXP 38
50597: PUSH
50598: LD_INT 1
50600: ST_TO_ADDR
// if p3 = 8 then
50601: LD_VAR 0 3
50605: PUSH
50606: LD_INT 8
50608: EQUAL
50609: IFFALSE 50619
// sBunker := true ;
50611: LD_ADDR_EXP 39
50615: PUSH
50616: LD_INT 1
50618: ST_TO_ADDR
// if p3 = 9 then
50619: LD_VAR 0 3
50623: PUSH
50624: LD_INT 9
50626: EQUAL
50627: IFFALSE 50637
// sHack := true ;
50629: LD_ADDR_EXP 40
50633: PUSH
50634: LD_INT 1
50636: ST_TO_ADDR
// if p3 = 10 then
50637: LD_VAR 0 3
50641: PUSH
50642: LD_INT 10
50644: EQUAL
50645: IFFALSE 50655
// sFire := true ;
50647: LD_ADDR_EXP 41
50651: PUSH
50652: LD_INT 1
50654: ST_TO_ADDR
// if p3 = 11 then
50655: LD_VAR 0 3
50659: PUSH
50660: LD_INT 11
50662: EQUAL
50663: IFFALSE 50673
// sRefresh := true ;
50665: LD_ADDR_EXP 42
50669: PUSH
50670: LD_INT 1
50672: ST_TO_ADDR
// if p3 = 12 then
50673: LD_VAR 0 3
50677: PUSH
50678: LD_INT 12
50680: EQUAL
50681: IFFALSE 50691
// sExp := true ;
50683: LD_ADDR_EXP 43
50687: PUSH
50688: LD_INT 1
50690: ST_TO_ADDR
// if p3 = 13 then
50691: LD_VAR 0 3
50695: PUSH
50696: LD_INT 13
50698: EQUAL
50699: IFFALSE 50709
// sDepot := true ;
50701: LD_ADDR_EXP 44
50705: PUSH
50706: LD_INT 1
50708: ST_TO_ADDR
// if p3 = 14 then
50709: LD_VAR 0 3
50713: PUSH
50714: LD_INT 14
50716: EQUAL
50717: IFFALSE 50727
// sFlag := true ;
50719: LD_ADDR_EXP 45
50723: PUSH
50724: LD_INT 1
50726: ST_TO_ADDR
// if p3 = 15 then
50727: LD_VAR 0 3
50731: PUSH
50732: LD_INT 15
50734: EQUAL
50735: IFFALSE 50745
// sKamikadze := true ;
50737: LD_ADDR_EXP 53
50741: PUSH
50742: LD_INT 1
50744: ST_TO_ADDR
// if p3 = 16 then
50745: LD_VAR 0 3
50749: PUSH
50750: LD_INT 16
50752: EQUAL
50753: IFFALSE 50763
// sTroll := true ;
50755: LD_ADDR_EXP 54
50759: PUSH
50760: LD_INT 1
50762: ST_TO_ADDR
// if p3 = 17 then
50763: LD_VAR 0 3
50767: PUSH
50768: LD_INT 17
50770: EQUAL
50771: IFFALSE 50781
// sSlow := true ;
50773: LD_ADDR_EXP 55
50777: PUSH
50778: LD_INT 1
50780: ST_TO_ADDR
// if p3 = 18 then
50781: LD_VAR 0 3
50785: PUSH
50786: LD_INT 18
50788: EQUAL
50789: IFFALSE 50799
// sLack := true ;
50791: LD_ADDR_EXP 56
50795: PUSH
50796: LD_INT 1
50798: ST_TO_ADDR
// if p3 = 19 then
50799: LD_VAR 0 3
50803: PUSH
50804: LD_INT 19
50806: EQUAL
50807: IFFALSE 50817
// sTank := true ;
50809: LD_ADDR_EXP 58
50813: PUSH
50814: LD_INT 1
50816: ST_TO_ADDR
// if p3 = 20 then
50817: LD_VAR 0 3
50821: PUSH
50822: LD_INT 20
50824: EQUAL
50825: IFFALSE 50835
// sRemote := true ;
50827: LD_ADDR_EXP 59
50831: PUSH
50832: LD_INT 1
50834: ST_TO_ADDR
// if p3 = 21 then
50835: LD_VAR 0 3
50839: PUSH
50840: LD_INT 21
50842: EQUAL
50843: IFFALSE 50853
// sPowell := true ;
50845: LD_ADDR_EXP 60
50849: PUSH
50850: LD_INT 1
50852: ST_TO_ADDR
// if p3 = 22 then
50853: LD_VAR 0 3
50857: PUSH
50858: LD_INT 22
50860: EQUAL
50861: IFFALSE 50871
// sTeleport := true ;
50863: LD_ADDR_EXP 63
50867: PUSH
50868: LD_INT 1
50870: ST_TO_ADDR
// if p3 = 23 then
50871: LD_VAR 0 3
50875: PUSH
50876: LD_INT 23
50878: EQUAL
50879: IFFALSE 50889
// sOilTower := true ;
50881: LD_ADDR_EXP 65
50885: PUSH
50886: LD_INT 1
50888: ST_TO_ADDR
// if p3 = 24 then
50889: LD_VAR 0 3
50893: PUSH
50894: LD_INT 24
50896: EQUAL
50897: IFFALSE 50907
// sShovel := true ;
50899: LD_ADDR_EXP 66
50903: PUSH
50904: LD_INT 1
50906: ST_TO_ADDR
// if p3 = 25 then
50907: LD_VAR 0 3
50911: PUSH
50912: LD_INT 25
50914: EQUAL
50915: IFFALSE 50925
// sSheik := true ;
50917: LD_ADDR_EXP 67
50921: PUSH
50922: LD_INT 1
50924: ST_TO_ADDR
// if p3 = 26 then
50925: LD_VAR 0 3
50929: PUSH
50930: LD_INT 26
50932: EQUAL
50933: IFFALSE 50943
// sEarthquake := true ;
50935: LD_ADDR_EXP 69
50939: PUSH
50940: LD_INT 1
50942: ST_TO_ADDR
// if p3 = 27 then
50943: LD_VAR 0 3
50947: PUSH
50948: LD_INT 27
50950: EQUAL
50951: IFFALSE 50961
// sAI := true ;
50953: LD_ADDR_EXP 70
50957: PUSH
50958: LD_INT 1
50960: ST_TO_ADDR
// if p3 = 28 then
50961: LD_VAR 0 3
50965: PUSH
50966: LD_INT 28
50968: EQUAL
50969: IFFALSE 50979
// sCargo := true ;
50971: LD_ADDR_EXP 73
50975: PUSH
50976: LD_INT 1
50978: ST_TO_ADDR
// if p3 = 29 then
50979: LD_VAR 0 3
50983: PUSH
50984: LD_INT 29
50986: EQUAL
50987: IFFALSE 50997
// sDLaser := true ;
50989: LD_ADDR_EXP 74
50993: PUSH
50994: LD_INT 1
50996: ST_TO_ADDR
// if p3 = 30 then
50997: LD_VAR 0 3
51001: PUSH
51002: LD_INT 30
51004: EQUAL
51005: IFFALSE 51015
// sExchange := true ;
51007: LD_ADDR_EXP 75
51011: PUSH
51012: LD_INT 1
51014: ST_TO_ADDR
// if p3 = 31 then
51015: LD_VAR 0 3
51019: PUSH
51020: LD_INT 31
51022: EQUAL
51023: IFFALSE 51033
// sFac := true ;
51025: LD_ADDR_EXP 76
51029: PUSH
51030: LD_INT 1
51032: ST_TO_ADDR
// if p3 = 32 then
51033: LD_VAR 0 3
51037: PUSH
51038: LD_INT 32
51040: EQUAL
51041: IFFALSE 51051
// sPower := true ;
51043: LD_ADDR_EXP 77
51047: PUSH
51048: LD_INT 1
51050: ST_TO_ADDR
// if p3 = 33 then
51051: LD_VAR 0 3
51055: PUSH
51056: LD_INT 33
51058: EQUAL
51059: IFFALSE 51069
// sRandom := true ;
51061: LD_ADDR_EXP 78
51065: PUSH
51066: LD_INT 1
51068: ST_TO_ADDR
// if p3 = 34 then
51069: LD_VAR 0 3
51073: PUSH
51074: LD_INT 34
51076: EQUAL
51077: IFFALSE 51087
// sShield := true ;
51079: LD_ADDR_EXP 79
51083: PUSH
51084: LD_INT 1
51086: ST_TO_ADDR
// if p3 = 35 then
51087: LD_VAR 0 3
51091: PUSH
51092: LD_INT 35
51094: EQUAL
51095: IFFALSE 51105
// sTime := true ;
51097: LD_ADDR_EXP 80
51101: PUSH
51102: LD_INT 1
51104: ST_TO_ADDR
// if p3 = 36 then
51105: LD_VAR 0 3
51109: PUSH
51110: LD_INT 36
51112: EQUAL
51113: IFFALSE 51123
// sTools := true ;
51115: LD_ADDR_EXP 81
51119: PUSH
51120: LD_INT 1
51122: ST_TO_ADDR
// if p3 = 101 then
51123: LD_VAR 0 3
51127: PUSH
51128: LD_INT 101
51130: EQUAL
51131: IFFALSE 51141
// sSold := true ;
51133: LD_ADDR_EXP 46
51137: PUSH
51138: LD_INT 1
51140: ST_TO_ADDR
// if p3 = 102 then
51141: LD_VAR 0 3
51145: PUSH
51146: LD_INT 102
51148: EQUAL
51149: IFFALSE 51159
// sDiff := true ;
51151: LD_ADDR_EXP 47
51155: PUSH
51156: LD_INT 1
51158: ST_TO_ADDR
// if p3 = 103 then
51159: LD_VAR 0 3
51163: PUSH
51164: LD_INT 103
51166: EQUAL
51167: IFFALSE 51177
// sFog := true ;
51169: LD_ADDR_EXP 50
51173: PUSH
51174: LD_INT 1
51176: ST_TO_ADDR
// if p3 = 104 then
51177: LD_VAR 0 3
51181: PUSH
51182: LD_INT 104
51184: EQUAL
51185: IFFALSE 51195
// sReset := true ;
51187: LD_ADDR_EXP 51
51191: PUSH
51192: LD_INT 1
51194: ST_TO_ADDR
// if p3 = 105 then
51195: LD_VAR 0 3
51199: PUSH
51200: LD_INT 105
51202: EQUAL
51203: IFFALSE 51213
// sSun := true ;
51205: LD_ADDR_EXP 52
51209: PUSH
51210: LD_INT 1
51212: ST_TO_ADDR
// if p3 = 106 then
51213: LD_VAR 0 3
51217: PUSH
51218: LD_INT 106
51220: EQUAL
51221: IFFALSE 51231
// sTiger := true ;
51223: LD_ADDR_EXP 48
51227: PUSH
51228: LD_INT 1
51230: ST_TO_ADDR
// if p3 = 107 then
51231: LD_VAR 0 3
51235: PUSH
51236: LD_INT 107
51238: EQUAL
51239: IFFALSE 51249
// sBomb := true ;
51241: LD_ADDR_EXP 49
51245: PUSH
51246: LD_INT 1
51248: ST_TO_ADDR
// if p3 = 108 then
51249: LD_VAR 0 3
51253: PUSH
51254: LD_INT 108
51256: EQUAL
51257: IFFALSE 51267
// sWound := true ;
51259: LD_ADDR_EXP 57
51263: PUSH
51264: LD_INT 1
51266: ST_TO_ADDR
// if p3 = 109 then
51267: LD_VAR 0 3
51271: PUSH
51272: LD_INT 109
51274: EQUAL
51275: IFFALSE 51285
// sBetray := true ;
51277: LD_ADDR_EXP 61
51281: PUSH
51282: LD_INT 1
51284: ST_TO_ADDR
// if p3 = 110 then
51285: LD_VAR 0 3
51289: PUSH
51290: LD_INT 110
51292: EQUAL
51293: IFFALSE 51303
// sContamin := true ;
51295: LD_ADDR_EXP 62
51299: PUSH
51300: LD_INT 1
51302: ST_TO_ADDR
// if p3 = 111 then
51303: LD_VAR 0 3
51307: PUSH
51308: LD_INT 111
51310: EQUAL
51311: IFFALSE 51321
// sOil := true ;
51313: LD_ADDR_EXP 64
51317: PUSH
51318: LD_INT 1
51320: ST_TO_ADDR
// if p3 = 112 then
51321: LD_VAR 0 3
51325: PUSH
51326: LD_INT 112
51328: EQUAL
51329: IFFALSE 51339
// sStu := true ;
51331: LD_ADDR_EXP 68
51335: PUSH
51336: LD_INT 1
51338: ST_TO_ADDR
// if p3 = 113 then
51339: LD_VAR 0 3
51343: PUSH
51344: LD_INT 113
51346: EQUAL
51347: IFFALSE 51357
// sBazooka := true ;
51349: LD_ADDR_EXP 71
51353: PUSH
51354: LD_INT 1
51356: ST_TO_ADDR
// if p3 = 114 then
51357: LD_VAR 0 3
51361: PUSH
51362: LD_INT 114
51364: EQUAL
51365: IFFALSE 51375
// sMortar := true ;
51367: LD_ADDR_EXP 72
51371: PUSH
51372: LD_INT 1
51374: ST_TO_ADDR
// if p3 = 115 then
51375: LD_VAR 0 3
51379: PUSH
51380: LD_INT 115
51382: EQUAL
51383: IFFALSE 51393
// sRanger := true ;
51385: LD_ADDR_EXP 82
51389: PUSH
51390: LD_INT 1
51392: ST_TO_ADDR
// if p3 = 116 then
51393: LD_VAR 0 3
51397: PUSH
51398: LD_INT 116
51400: EQUAL
51401: IFFALSE 51411
// sComputer := true ;
51403: LD_ADDR_EXP 83
51407: PUSH
51408: LD_INT 1
51410: ST_TO_ADDR
// if p3 = 117 then
51411: LD_VAR 0 3
51415: PUSH
51416: LD_INT 117
51418: EQUAL
51419: IFFALSE 51429
// s30 := true ;
51421: LD_ADDR_EXP 84
51425: PUSH
51426: LD_INT 1
51428: ST_TO_ADDR
// if p3 = 118 then
51429: LD_VAR 0 3
51433: PUSH
51434: LD_INT 118
51436: EQUAL
51437: IFFALSE 51447
// s60 := true ;
51439: LD_ADDR_EXP 85
51443: PUSH
51444: LD_INT 1
51446: ST_TO_ADDR
// end ; if p2 = hack_mode then
51447: LD_VAR 0 2
51451: PUSH
51452: LD_INT 101
51454: EQUAL
51455: IFFALSE 51583
// begin case p3 of 1 :
51457: LD_VAR 0 3
51461: PUSH
51462: LD_INT 1
51464: DOUBLE
51465: EQUAL
51466: IFTRUE 51470
51468: GO 51477
51470: POP
// hHackUnlimitedResources ; 2 :
51471: CALL 63722 0 0
51475: GO 51583
51477: LD_INT 2
51479: DOUBLE
51480: EQUAL
51481: IFTRUE 51485
51483: GO 51492
51485: POP
// hHackSetLevel10 ; 3 :
51486: CALL 63855 0 0
51490: GO 51583
51492: LD_INT 3
51494: DOUBLE
51495: EQUAL
51496: IFTRUE 51500
51498: GO 51507
51500: POP
// hHackSetLevel10YourUnits ; 4 :
51501: CALL 63940 0 0
51505: GO 51583
51507: LD_INT 4
51509: DOUBLE
51510: EQUAL
51511: IFTRUE 51515
51513: GO 51522
51515: POP
// hHackInvincible ; 5 :
51516: CALL 64388 0 0
51520: GO 51583
51522: LD_INT 5
51524: DOUBLE
51525: EQUAL
51526: IFTRUE 51530
51528: GO 51537
51530: POP
// hHackInvisible ; 6 :
51531: CALL 64499 0 0
51535: GO 51583
51537: LD_INT 6
51539: DOUBLE
51540: EQUAL
51541: IFTRUE 51545
51543: GO 51552
51545: POP
// hHackChangeYourSide ; 7 :
51546: CALL 64556 0 0
51550: GO 51583
51552: LD_INT 7
51554: DOUBLE
51555: EQUAL
51556: IFTRUE 51560
51558: GO 51567
51560: POP
// hHackChangeUnitSide ; 8 :
51561: CALL 64598 0 0
51565: GO 51583
51567: LD_INT 8
51569: DOUBLE
51570: EQUAL
51571: IFTRUE 51575
51573: GO 51582
51575: POP
// hHackFog ; end ;
51576: CALL 64699 0 0
51580: GO 51583
51582: POP
// end ; if p2 = game_save_mode then
51583: LD_VAR 0 2
51587: PUSH
51588: LD_INT 102
51590: EQUAL
51591: IFFALSE 51646
// begin if p3 = 1 then
51593: LD_VAR 0 3
51597: PUSH
51598: LD_INT 1
51600: EQUAL
51601: IFFALSE 51613
// globalGameSaveCounter := p4 ;
51603: LD_ADDR_EXP 28
51607: PUSH
51608: LD_VAR 0 4
51612: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
51613: LD_VAR 0 3
51617: PUSH
51618: LD_INT 2
51620: EQUAL
51621: PUSH
51622: LD_EXP 28
51626: AND
51627: IFFALSE 51646
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51629: LD_STRING setGameSaveCounter(
51631: PUSH
51632: LD_EXP 28
51636: STR
51637: PUSH
51638: LD_STRING )
51640: STR
51641: PPUSH
51642: CALL_OW 559
// end ; end ;
51646: LD_VAR 0 7
51650: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
51651: LD_INT 0
51653: PPUSH
// streamModeActive := false ;
51654: LD_ADDR_EXP 29
51658: PUSH
51659: LD_INT 0
51661: ST_TO_ADDR
// normalCounter := 36 ;
51662: LD_ADDR_EXP 30
51666: PUSH
51667: LD_INT 36
51669: ST_TO_ADDR
// hardcoreCounter := 18 ;
51670: LD_ADDR_EXP 31
51674: PUSH
51675: LD_INT 18
51677: ST_TO_ADDR
// sRocket := false ;
51678: LD_ADDR_EXP 34
51682: PUSH
51683: LD_INT 0
51685: ST_TO_ADDR
// sSpeed := false ;
51686: LD_ADDR_EXP 33
51690: PUSH
51691: LD_INT 0
51693: ST_TO_ADDR
// sEngine := false ;
51694: LD_ADDR_EXP 35
51698: PUSH
51699: LD_INT 0
51701: ST_TO_ADDR
// sSpec := false ;
51702: LD_ADDR_EXP 32
51706: PUSH
51707: LD_INT 0
51709: ST_TO_ADDR
// sLevel := false ;
51710: LD_ADDR_EXP 36
51714: PUSH
51715: LD_INT 0
51717: ST_TO_ADDR
// sArmoury := false ;
51718: LD_ADDR_EXP 37
51722: PUSH
51723: LD_INT 0
51725: ST_TO_ADDR
// sRadar := false ;
51726: LD_ADDR_EXP 38
51730: PUSH
51731: LD_INT 0
51733: ST_TO_ADDR
// sBunker := false ;
51734: LD_ADDR_EXP 39
51738: PUSH
51739: LD_INT 0
51741: ST_TO_ADDR
// sHack := false ;
51742: LD_ADDR_EXP 40
51746: PUSH
51747: LD_INT 0
51749: ST_TO_ADDR
// sFire := false ;
51750: LD_ADDR_EXP 41
51754: PUSH
51755: LD_INT 0
51757: ST_TO_ADDR
// sRefresh := false ;
51758: LD_ADDR_EXP 42
51762: PUSH
51763: LD_INT 0
51765: ST_TO_ADDR
// sExp := false ;
51766: LD_ADDR_EXP 43
51770: PUSH
51771: LD_INT 0
51773: ST_TO_ADDR
// sDepot := false ;
51774: LD_ADDR_EXP 44
51778: PUSH
51779: LD_INT 0
51781: ST_TO_ADDR
// sFlag := false ;
51782: LD_ADDR_EXP 45
51786: PUSH
51787: LD_INT 0
51789: ST_TO_ADDR
// sKamikadze := false ;
51790: LD_ADDR_EXP 53
51794: PUSH
51795: LD_INT 0
51797: ST_TO_ADDR
// sTroll := false ;
51798: LD_ADDR_EXP 54
51802: PUSH
51803: LD_INT 0
51805: ST_TO_ADDR
// sSlow := false ;
51806: LD_ADDR_EXP 55
51810: PUSH
51811: LD_INT 0
51813: ST_TO_ADDR
// sLack := false ;
51814: LD_ADDR_EXP 56
51818: PUSH
51819: LD_INT 0
51821: ST_TO_ADDR
// sTank := false ;
51822: LD_ADDR_EXP 58
51826: PUSH
51827: LD_INT 0
51829: ST_TO_ADDR
// sRemote := false ;
51830: LD_ADDR_EXP 59
51834: PUSH
51835: LD_INT 0
51837: ST_TO_ADDR
// sPowell := false ;
51838: LD_ADDR_EXP 60
51842: PUSH
51843: LD_INT 0
51845: ST_TO_ADDR
// sTeleport := false ;
51846: LD_ADDR_EXP 63
51850: PUSH
51851: LD_INT 0
51853: ST_TO_ADDR
// sOilTower := false ;
51854: LD_ADDR_EXP 65
51858: PUSH
51859: LD_INT 0
51861: ST_TO_ADDR
// sShovel := false ;
51862: LD_ADDR_EXP 66
51866: PUSH
51867: LD_INT 0
51869: ST_TO_ADDR
// sSheik := false ;
51870: LD_ADDR_EXP 67
51874: PUSH
51875: LD_INT 0
51877: ST_TO_ADDR
// sEarthquake := false ;
51878: LD_ADDR_EXP 69
51882: PUSH
51883: LD_INT 0
51885: ST_TO_ADDR
// sAI := false ;
51886: LD_ADDR_EXP 70
51890: PUSH
51891: LD_INT 0
51893: ST_TO_ADDR
// sCargo := false ;
51894: LD_ADDR_EXP 73
51898: PUSH
51899: LD_INT 0
51901: ST_TO_ADDR
// sDLaser := false ;
51902: LD_ADDR_EXP 74
51906: PUSH
51907: LD_INT 0
51909: ST_TO_ADDR
// sExchange := false ;
51910: LD_ADDR_EXP 75
51914: PUSH
51915: LD_INT 0
51917: ST_TO_ADDR
// sFac := false ;
51918: LD_ADDR_EXP 76
51922: PUSH
51923: LD_INT 0
51925: ST_TO_ADDR
// sPower := false ;
51926: LD_ADDR_EXP 77
51930: PUSH
51931: LD_INT 0
51933: ST_TO_ADDR
// sRandom := false ;
51934: LD_ADDR_EXP 78
51938: PUSH
51939: LD_INT 0
51941: ST_TO_ADDR
// sShield := false ;
51942: LD_ADDR_EXP 79
51946: PUSH
51947: LD_INT 0
51949: ST_TO_ADDR
// sTime := false ;
51950: LD_ADDR_EXP 80
51954: PUSH
51955: LD_INT 0
51957: ST_TO_ADDR
// sTools := false ;
51958: LD_ADDR_EXP 81
51962: PUSH
51963: LD_INT 0
51965: ST_TO_ADDR
// sSold := false ;
51966: LD_ADDR_EXP 46
51970: PUSH
51971: LD_INT 0
51973: ST_TO_ADDR
// sDiff := false ;
51974: LD_ADDR_EXP 47
51978: PUSH
51979: LD_INT 0
51981: ST_TO_ADDR
// sFog := false ;
51982: LD_ADDR_EXP 50
51986: PUSH
51987: LD_INT 0
51989: ST_TO_ADDR
// sReset := false ;
51990: LD_ADDR_EXP 51
51994: PUSH
51995: LD_INT 0
51997: ST_TO_ADDR
// sSun := false ;
51998: LD_ADDR_EXP 52
52002: PUSH
52003: LD_INT 0
52005: ST_TO_ADDR
// sTiger := false ;
52006: LD_ADDR_EXP 48
52010: PUSH
52011: LD_INT 0
52013: ST_TO_ADDR
// sBomb := false ;
52014: LD_ADDR_EXP 49
52018: PUSH
52019: LD_INT 0
52021: ST_TO_ADDR
// sWound := false ;
52022: LD_ADDR_EXP 57
52026: PUSH
52027: LD_INT 0
52029: ST_TO_ADDR
// sBetray := false ;
52030: LD_ADDR_EXP 61
52034: PUSH
52035: LD_INT 0
52037: ST_TO_ADDR
// sContamin := false ;
52038: LD_ADDR_EXP 62
52042: PUSH
52043: LD_INT 0
52045: ST_TO_ADDR
// sOil := false ;
52046: LD_ADDR_EXP 64
52050: PUSH
52051: LD_INT 0
52053: ST_TO_ADDR
// sStu := false ;
52054: LD_ADDR_EXP 68
52058: PUSH
52059: LD_INT 0
52061: ST_TO_ADDR
// sBazooka := false ;
52062: LD_ADDR_EXP 71
52066: PUSH
52067: LD_INT 0
52069: ST_TO_ADDR
// sMortar := false ;
52070: LD_ADDR_EXP 72
52074: PUSH
52075: LD_INT 0
52077: ST_TO_ADDR
// sRanger := false ;
52078: LD_ADDR_EXP 82
52082: PUSH
52083: LD_INT 0
52085: ST_TO_ADDR
// sComputer := false ;
52086: LD_ADDR_EXP 83
52090: PUSH
52091: LD_INT 0
52093: ST_TO_ADDR
// s30 := false ;
52094: LD_ADDR_EXP 84
52098: PUSH
52099: LD_INT 0
52101: ST_TO_ADDR
// s60 := false ;
52102: LD_ADDR_EXP 85
52106: PUSH
52107: LD_INT 0
52109: ST_TO_ADDR
// end ;
52110: LD_VAR 0 1
52114: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
52115: LD_INT 0
52117: PPUSH
52118: PPUSH
52119: PPUSH
52120: PPUSH
52121: PPUSH
52122: PPUSH
52123: PPUSH
// result := [ ] ;
52124: LD_ADDR_VAR 0 2
52128: PUSH
52129: EMPTY
52130: ST_TO_ADDR
// if campaign_id = 1 then
52131: LD_OWVAR 69
52135: PUSH
52136: LD_INT 1
52138: EQUAL
52139: IFFALSE 55305
// begin case mission_number of 1 :
52141: LD_OWVAR 70
52145: PUSH
52146: LD_INT 1
52148: DOUBLE
52149: EQUAL
52150: IFTRUE 52154
52152: GO 52230
52154: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
52155: LD_ADDR_VAR 0 2
52159: PUSH
52160: LD_INT 2
52162: PUSH
52163: LD_INT 4
52165: PUSH
52166: LD_INT 11
52168: PUSH
52169: LD_INT 12
52171: PUSH
52172: LD_INT 15
52174: PUSH
52175: LD_INT 16
52177: PUSH
52178: LD_INT 22
52180: PUSH
52181: LD_INT 23
52183: PUSH
52184: LD_INT 26
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 101
52200: PUSH
52201: LD_INT 102
52203: PUSH
52204: LD_INT 106
52206: PUSH
52207: LD_INT 116
52209: PUSH
52210: LD_INT 117
52212: PUSH
52213: LD_INT 118
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: ST_TO_ADDR
52228: GO 55303
52230: LD_INT 2
52232: DOUBLE
52233: EQUAL
52234: IFTRUE 52238
52236: GO 52322
52238: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
52239: LD_ADDR_VAR 0 2
52243: PUSH
52244: LD_INT 2
52246: PUSH
52247: LD_INT 4
52249: PUSH
52250: LD_INT 11
52252: PUSH
52253: LD_INT 12
52255: PUSH
52256: LD_INT 15
52258: PUSH
52259: LD_INT 16
52261: PUSH
52262: LD_INT 22
52264: PUSH
52265: LD_INT 23
52267: PUSH
52268: LD_INT 26
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 101
52284: PUSH
52285: LD_INT 102
52287: PUSH
52288: LD_INT 105
52290: PUSH
52291: LD_INT 106
52293: PUSH
52294: LD_INT 108
52296: PUSH
52297: LD_INT 116
52299: PUSH
52300: LD_INT 117
52302: PUSH
52303: LD_INT 118
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: ST_TO_ADDR
52320: GO 55303
52322: LD_INT 3
52324: DOUBLE
52325: EQUAL
52326: IFTRUE 52330
52328: GO 52418
52330: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
52331: LD_ADDR_VAR 0 2
52335: PUSH
52336: LD_INT 2
52338: PUSH
52339: LD_INT 4
52341: PUSH
52342: LD_INT 5
52344: PUSH
52345: LD_INT 11
52347: PUSH
52348: LD_INT 12
52350: PUSH
52351: LD_INT 15
52353: PUSH
52354: LD_INT 16
52356: PUSH
52357: LD_INT 22
52359: PUSH
52360: LD_INT 26
52362: PUSH
52363: LD_INT 36
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 101
52380: PUSH
52381: LD_INT 102
52383: PUSH
52384: LD_INT 105
52386: PUSH
52387: LD_INT 106
52389: PUSH
52390: LD_INT 108
52392: PUSH
52393: LD_INT 116
52395: PUSH
52396: LD_INT 117
52398: PUSH
52399: LD_INT 118
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: ST_TO_ADDR
52416: GO 55303
52418: LD_INT 4
52420: DOUBLE
52421: EQUAL
52422: IFTRUE 52426
52424: GO 52522
52426: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
52427: LD_ADDR_VAR 0 2
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: LD_INT 4
52437: PUSH
52438: LD_INT 5
52440: PUSH
52441: LD_INT 8
52443: PUSH
52444: LD_INT 11
52446: PUSH
52447: LD_INT 12
52449: PUSH
52450: LD_INT 15
52452: PUSH
52453: LD_INT 16
52455: PUSH
52456: LD_INT 22
52458: PUSH
52459: LD_INT 23
52461: PUSH
52462: LD_INT 26
52464: PUSH
52465: LD_INT 36
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 101
52484: PUSH
52485: LD_INT 102
52487: PUSH
52488: LD_INT 105
52490: PUSH
52491: LD_INT 106
52493: PUSH
52494: LD_INT 108
52496: PUSH
52497: LD_INT 116
52499: PUSH
52500: LD_INT 117
52502: PUSH
52503: LD_INT 118
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: ST_TO_ADDR
52520: GO 55303
52522: LD_INT 5
52524: DOUBLE
52525: EQUAL
52526: IFTRUE 52530
52528: GO 52642
52530: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
52531: LD_ADDR_VAR 0 2
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: LD_INT 4
52541: PUSH
52542: LD_INT 5
52544: PUSH
52545: LD_INT 6
52547: PUSH
52548: LD_INT 8
52550: PUSH
52551: LD_INT 11
52553: PUSH
52554: LD_INT 12
52556: PUSH
52557: LD_INT 15
52559: PUSH
52560: LD_INT 16
52562: PUSH
52563: LD_INT 22
52565: PUSH
52566: LD_INT 23
52568: PUSH
52569: LD_INT 25
52571: PUSH
52572: LD_INT 26
52574: PUSH
52575: LD_INT 36
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 101
52596: PUSH
52597: LD_INT 102
52599: PUSH
52600: LD_INT 105
52602: PUSH
52603: LD_INT 106
52605: PUSH
52606: LD_INT 108
52608: PUSH
52609: LD_INT 109
52611: PUSH
52612: LD_INT 112
52614: PUSH
52615: LD_INT 116
52617: PUSH
52618: LD_INT 117
52620: PUSH
52621: LD_INT 118
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: ST_TO_ADDR
52640: GO 55303
52642: LD_INT 6
52644: DOUBLE
52645: EQUAL
52646: IFTRUE 52650
52648: GO 52782
52650: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
52651: LD_ADDR_VAR 0 2
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: LD_INT 4
52661: PUSH
52662: LD_INT 5
52664: PUSH
52665: LD_INT 6
52667: PUSH
52668: LD_INT 8
52670: PUSH
52671: LD_INT 11
52673: PUSH
52674: LD_INT 12
52676: PUSH
52677: LD_INT 15
52679: PUSH
52680: LD_INT 16
52682: PUSH
52683: LD_INT 20
52685: PUSH
52686: LD_INT 21
52688: PUSH
52689: LD_INT 22
52691: PUSH
52692: LD_INT 23
52694: PUSH
52695: LD_INT 25
52697: PUSH
52698: LD_INT 26
52700: PUSH
52701: LD_INT 30
52703: PUSH
52704: LD_INT 31
52706: PUSH
52707: LD_INT 32
52709: PUSH
52710: LD_INT 36
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 101
52736: PUSH
52737: LD_INT 102
52739: PUSH
52740: LD_INT 105
52742: PUSH
52743: LD_INT 106
52745: PUSH
52746: LD_INT 108
52748: PUSH
52749: LD_INT 109
52751: PUSH
52752: LD_INT 112
52754: PUSH
52755: LD_INT 116
52757: PUSH
52758: LD_INT 117
52760: PUSH
52761: LD_INT 118
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: ST_TO_ADDR
52780: GO 55303
52782: LD_INT 7
52784: DOUBLE
52785: EQUAL
52786: IFTRUE 52790
52788: GO 52902
52790: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
52791: LD_ADDR_VAR 0 2
52795: PUSH
52796: LD_INT 2
52798: PUSH
52799: LD_INT 4
52801: PUSH
52802: LD_INT 5
52804: PUSH
52805: LD_INT 7
52807: PUSH
52808: LD_INT 11
52810: PUSH
52811: LD_INT 12
52813: PUSH
52814: LD_INT 15
52816: PUSH
52817: LD_INT 16
52819: PUSH
52820: LD_INT 20
52822: PUSH
52823: LD_INT 21
52825: PUSH
52826: LD_INT 22
52828: PUSH
52829: LD_INT 23
52831: PUSH
52832: LD_INT 25
52834: PUSH
52835: LD_INT 26
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 101
52856: PUSH
52857: LD_INT 102
52859: PUSH
52860: LD_INT 103
52862: PUSH
52863: LD_INT 105
52865: PUSH
52866: LD_INT 106
52868: PUSH
52869: LD_INT 108
52871: PUSH
52872: LD_INT 112
52874: PUSH
52875: LD_INT 116
52877: PUSH
52878: LD_INT 117
52880: PUSH
52881: LD_INT 118
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: ST_TO_ADDR
52900: GO 55303
52902: LD_INT 8
52904: DOUBLE
52905: EQUAL
52906: IFTRUE 52910
52908: GO 53050
52910: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
52911: LD_ADDR_VAR 0 2
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: LD_INT 4
52921: PUSH
52922: LD_INT 5
52924: PUSH
52925: LD_INT 6
52927: PUSH
52928: LD_INT 7
52930: PUSH
52931: LD_INT 8
52933: PUSH
52934: LD_INT 11
52936: PUSH
52937: LD_INT 12
52939: PUSH
52940: LD_INT 15
52942: PUSH
52943: LD_INT 16
52945: PUSH
52946: LD_INT 20
52948: PUSH
52949: LD_INT 21
52951: PUSH
52952: LD_INT 22
52954: PUSH
52955: LD_INT 23
52957: PUSH
52958: LD_INT 25
52960: PUSH
52961: LD_INT 26
52963: PUSH
52964: LD_INT 30
52966: PUSH
52967: LD_INT 31
52969: PUSH
52970: LD_INT 32
52972: PUSH
52973: LD_INT 36
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 101
53000: PUSH
53001: LD_INT 102
53003: PUSH
53004: LD_INT 103
53006: PUSH
53007: LD_INT 105
53009: PUSH
53010: LD_INT 106
53012: PUSH
53013: LD_INT 108
53015: PUSH
53016: LD_INT 109
53018: PUSH
53019: LD_INT 112
53021: PUSH
53022: LD_INT 116
53024: PUSH
53025: LD_INT 117
53027: PUSH
53028: LD_INT 118
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: ST_TO_ADDR
53048: GO 55303
53050: LD_INT 9
53052: DOUBLE
53053: EQUAL
53054: IFTRUE 53058
53056: GO 53206
53058: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
53059: LD_ADDR_VAR 0 2
53063: PUSH
53064: LD_INT 2
53066: PUSH
53067: LD_INT 4
53069: PUSH
53070: LD_INT 5
53072: PUSH
53073: LD_INT 6
53075: PUSH
53076: LD_INT 7
53078: PUSH
53079: LD_INT 8
53081: PUSH
53082: LD_INT 11
53084: PUSH
53085: LD_INT 12
53087: PUSH
53088: LD_INT 15
53090: PUSH
53091: LD_INT 16
53093: PUSH
53094: LD_INT 20
53096: PUSH
53097: LD_INT 21
53099: PUSH
53100: LD_INT 22
53102: PUSH
53103: LD_INT 23
53105: PUSH
53106: LD_INT 25
53108: PUSH
53109: LD_INT 26
53111: PUSH
53112: LD_INT 28
53114: PUSH
53115: LD_INT 30
53117: PUSH
53118: LD_INT 31
53120: PUSH
53121: LD_INT 32
53123: PUSH
53124: LD_INT 36
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 101
53152: PUSH
53153: LD_INT 102
53155: PUSH
53156: LD_INT 103
53158: PUSH
53159: LD_INT 105
53161: PUSH
53162: LD_INT 106
53164: PUSH
53165: LD_INT 108
53167: PUSH
53168: LD_INT 109
53170: PUSH
53171: LD_INT 112
53173: PUSH
53174: LD_INT 114
53176: PUSH
53177: LD_INT 116
53179: PUSH
53180: LD_INT 117
53182: PUSH
53183: LD_INT 118
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: ST_TO_ADDR
53204: GO 55303
53206: LD_INT 10
53208: DOUBLE
53209: EQUAL
53210: IFTRUE 53214
53212: GO 53410
53214: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
53215: LD_ADDR_VAR 0 2
53219: PUSH
53220: LD_INT 2
53222: PUSH
53223: LD_INT 4
53225: PUSH
53226: LD_INT 5
53228: PUSH
53229: LD_INT 6
53231: PUSH
53232: LD_INT 7
53234: PUSH
53235: LD_INT 8
53237: PUSH
53238: LD_INT 9
53240: PUSH
53241: LD_INT 10
53243: PUSH
53244: LD_INT 11
53246: PUSH
53247: LD_INT 12
53249: PUSH
53250: LD_INT 13
53252: PUSH
53253: LD_INT 14
53255: PUSH
53256: LD_INT 15
53258: PUSH
53259: LD_INT 16
53261: PUSH
53262: LD_INT 17
53264: PUSH
53265: LD_INT 18
53267: PUSH
53268: LD_INT 19
53270: PUSH
53271: LD_INT 20
53273: PUSH
53274: LD_INT 21
53276: PUSH
53277: LD_INT 22
53279: PUSH
53280: LD_INT 23
53282: PUSH
53283: LD_INT 24
53285: PUSH
53286: LD_INT 25
53288: PUSH
53289: LD_INT 26
53291: PUSH
53292: LD_INT 28
53294: PUSH
53295: LD_INT 30
53297: PUSH
53298: LD_INT 31
53300: PUSH
53301: LD_INT 32
53303: PUSH
53304: LD_INT 36
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 101
53340: PUSH
53341: LD_INT 102
53343: PUSH
53344: LD_INT 103
53346: PUSH
53347: LD_INT 104
53349: PUSH
53350: LD_INT 105
53352: PUSH
53353: LD_INT 106
53355: PUSH
53356: LD_INT 107
53358: PUSH
53359: LD_INT 108
53361: PUSH
53362: LD_INT 109
53364: PUSH
53365: LD_INT 110
53367: PUSH
53368: LD_INT 111
53370: PUSH
53371: LD_INT 112
53373: PUSH
53374: LD_INT 114
53376: PUSH
53377: LD_INT 116
53379: PUSH
53380: LD_INT 117
53382: PUSH
53383: LD_INT 118
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: ST_TO_ADDR
53408: GO 55303
53410: LD_INT 11
53412: DOUBLE
53413: EQUAL
53414: IFTRUE 53418
53416: GO 53622
53418: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
53419: LD_ADDR_VAR 0 2
53423: PUSH
53424: LD_INT 2
53426: PUSH
53427: LD_INT 3
53429: PUSH
53430: LD_INT 4
53432: PUSH
53433: LD_INT 5
53435: PUSH
53436: LD_INT 6
53438: PUSH
53439: LD_INT 7
53441: PUSH
53442: LD_INT 8
53444: PUSH
53445: LD_INT 9
53447: PUSH
53448: LD_INT 10
53450: PUSH
53451: LD_INT 11
53453: PUSH
53454: LD_INT 12
53456: PUSH
53457: LD_INT 13
53459: PUSH
53460: LD_INT 14
53462: PUSH
53463: LD_INT 15
53465: PUSH
53466: LD_INT 16
53468: PUSH
53469: LD_INT 17
53471: PUSH
53472: LD_INT 18
53474: PUSH
53475: LD_INT 19
53477: PUSH
53478: LD_INT 20
53480: PUSH
53481: LD_INT 21
53483: PUSH
53484: LD_INT 22
53486: PUSH
53487: LD_INT 23
53489: PUSH
53490: LD_INT 24
53492: PUSH
53493: LD_INT 25
53495: PUSH
53496: LD_INT 26
53498: PUSH
53499: LD_INT 28
53501: PUSH
53502: LD_INT 30
53504: PUSH
53505: LD_INT 31
53507: PUSH
53508: LD_INT 32
53510: PUSH
53511: LD_INT 34
53513: PUSH
53514: LD_INT 36
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 101
53552: PUSH
53553: LD_INT 102
53555: PUSH
53556: LD_INT 103
53558: PUSH
53559: LD_INT 104
53561: PUSH
53562: LD_INT 105
53564: PUSH
53565: LD_INT 106
53567: PUSH
53568: LD_INT 107
53570: PUSH
53571: LD_INT 108
53573: PUSH
53574: LD_INT 109
53576: PUSH
53577: LD_INT 110
53579: PUSH
53580: LD_INT 111
53582: PUSH
53583: LD_INT 112
53585: PUSH
53586: LD_INT 114
53588: PUSH
53589: LD_INT 116
53591: PUSH
53592: LD_INT 117
53594: PUSH
53595: LD_INT 118
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: ST_TO_ADDR
53620: GO 55303
53622: LD_INT 12
53624: DOUBLE
53625: EQUAL
53626: IFTRUE 53630
53628: GO 53850
53630: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
53631: LD_ADDR_VAR 0 2
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: LD_INT 3
53644: PUSH
53645: LD_INT 4
53647: PUSH
53648: LD_INT 5
53650: PUSH
53651: LD_INT 6
53653: PUSH
53654: LD_INT 7
53656: PUSH
53657: LD_INT 8
53659: PUSH
53660: LD_INT 9
53662: PUSH
53663: LD_INT 10
53665: PUSH
53666: LD_INT 11
53668: PUSH
53669: LD_INT 12
53671: PUSH
53672: LD_INT 13
53674: PUSH
53675: LD_INT 14
53677: PUSH
53678: LD_INT 15
53680: PUSH
53681: LD_INT 16
53683: PUSH
53684: LD_INT 17
53686: PUSH
53687: LD_INT 18
53689: PUSH
53690: LD_INT 19
53692: PUSH
53693: LD_INT 20
53695: PUSH
53696: LD_INT 21
53698: PUSH
53699: LD_INT 22
53701: PUSH
53702: LD_INT 23
53704: PUSH
53705: LD_INT 24
53707: PUSH
53708: LD_INT 25
53710: PUSH
53711: LD_INT 26
53713: PUSH
53714: LD_INT 27
53716: PUSH
53717: LD_INT 28
53719: PUSH
53720: LD_INT 30
53722: PUSH
53723: LD_INT 31
53725: PUSH
53726: LD_INT 32
53728: PUSH
53729: LD_INT 33
53731: PUSH
53732: LD_INT 34
53734: PUSH
53735: LD_INT 36
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 101
53776: PUSH
53777: LD_INT 102
53779: PUSH
53780: LD_INT 103
53782: PUSH
53783: LD_INT 104
53785: PUSH
53786: LD_INT 105
53788: PUSH
53789: LD_INT 106
53791: PUSH
53792: LD_INT 107
53794: PUSH
53795: LD_INT 108
53797: PUSH
53798: LD_INT 109
53800: PUSH
53801: LD_INT 110
53803: PUSH
53804: LD_INT 111
53806: PUSH
53807: LD_INT 112
53809: PUSH
53810: LD_INT 113
53812: PUSH
53813: LD_INT 114
53815: PUSH
53816: LD_INT 116
53818: PUSH
53819: LD_INT 117
53821: PUSH
53822: LD_INT 118
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: ST_TO_ADDR
53848: GO 55303
53850: LD_INT 13
53852: DOUBLE
53853: EQUAL
53854: IFTRUE 53858
53856: GO 54066
53858: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
53859: LD_ADDR_VAR 0 2
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 2
53869: PUSH
53870: LD_INT 3
53872: PUSH
53873: LD_INT 4
53875: PUSH
53876: LD_INT 5
53878: PUSH
53879: LD_INT 8
53881: PUSH
53882: LD_INT 9
53884: PUSH
53885: LD_INT 10
53887: PUSH
53888: LD_INT 11
53890: PUSH
53891: LD_INT 12
53893: PUSH
53894: LD_INT 14
53896: PUSH
53897: LD_INT 15
53899: PUSH
53900: LD_INT 16
53902: PUSH
53903: LD_INT 17
53905: PUSH
53906: LD_INT 18
53908: PUSH
53909: LD_INT 19
53911: PUSH
53912: LD_INT 20
53914: PUSH
53915: LD_INT 21
53917: PUSH
53918: LD_INT 22
53920: PUSH
53921: LD_INT 23
53923: PUSH
53924: LD_INT 24
53926: PUSH
53927: LD_INT 25
53929: PUSH
53930: LD_INT 26
53932: PUSH
53933: LD_INT 27
53935: PUSH
53936: LD_INT 28
53938: PUSH
53939: LD_INT 30
53941: PUSH
53942: LD_INT 31
53944: PUSH
53945: LD_INT 32
53947: PUSH
53948: LD_INT 33
53950: PUSH
53951: LD_INT 34
53953: PUSH
53954: LD_INT 36
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 101
53992: PUSH
53993: LD_INT 102
53995: PUSH
53996: LD_INT 103
53998: PUSH
53999: LD_INT 104
54001: PUSH
54002: LD_INT 105
54004: PUSH
54005: LD_INT 106
54007: PUSH
54008: LD_INT 107
54010: PUSH
54011: LD_INT 108
54013: PUSH
54014: LD_INT 109
54016: PUSH
54017: LD_INT 110
54019: PUSH
54020: LD_INT 111
54022: PUSH
54023: LD_INT 112
54025: PUSH
54026: LD_INT 113
54028: PUSH
54029: LD_INT 114
54031: PUSH
54032: LD_INT 116
54034: PUSH
54035: LD_INT 117
54037: PUSH
54038: LD_INT 118
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: ST_TO_ADDR
54064: GO 55303
54066: LD_INT 14
54068: DOUBLE
54069: EQUAL
54070: IFTRUE 54074
54072: GO 54298
54074: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
54075: LD_ADDR_VAR 0 2
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: LD_INT 3
54088: PUSH
54089: LD_INT 4
54091: PUSH
54092: LD_INT 5
54094: PUSH
54095: LD_INT 6
54097: PUSH
54098: LD_INT 7
54100: PUSH
54101: LD_INT 8
54103: PUSH
54104: LD_INT 9
54106: PUSH
54107: LD_INT 10
54109: PUSH
54110: LD_INT 11
54112: PUSH
54113: LD_INT 12
54115: PUSH
54116: LD_INT 13
54118: PUSH
54119: LD_INT 14
54121: PUSH
54122: LD_INT 15
54124: PUSH
54125: LD_INT 16
54127: PUSH
54128: LD_INT 17
54130: PUSH
54131: LD_INT 18
54133: PUSH
54134: LD_INT 19
54136: PUSH
54137: LD_INT 20
54139: PUSH
54140: LD_INT 21
54142: PUSH
54143: LD_INT 22
54145: PUSH
54146: LD_INT 23
54148: PUSH
54149: LD_INT 24
54151: PUSH
54152: LD_INT 25
54154: PUSH
54155: LD_INT 26
54157: PUSH
54158: LD_INT 27
54160: PUSH
54161: LD_INT 28
54163: PUSH
54164: LD_INT 29
54166: PUSH
54167: LD_INT 30
54169: PUSH
54170: LD_INT 31
54172: PUSH
54173: LD_INT 32
54175: PUSH
54176: LD_INT 33
54178: PUSH
54179: LD_INT 34
54181: PUSH
54182: LD_INT 36
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 101
54224: PUSH
54225: LD_INT 102
54227: PUSH
54228: LD_INT 103
54230: PUSH
54231: LD_INT 104
54233: PUSH
54234: LD_INT 105
54236: PUSH
54237: LD_INT 106
54239: PUSH
54240: LD_INT 107
54242: PUSH
54243: LD_INT 108
54245: PUSH
54246: LD_INT 109
54248: PUSH
54249: LD_INT 110
54251: PUSH
54252: LD_INT 111
54254: PUSH
54255: LD_INT 112
54257: PUSH
54258: LD_INT 113
54260: PUSH
54261: LD_INT 114
54263: PUSH
54264: LD_INT 116
54266: PUSH
54267: LD_INT 117
54269: PUSH
54270: LD_INT 118
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: ST_TO_ADDR
54296: GO 55303
54298: LD_INT 15
54300: DOUBLE
54301: EQUAL
54302: IFTRUE 54306
54304: GO 54530
54306: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
54307: LD_ADDR_VAR 0 2
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: LD_INT 2
54317: PUSH
54318: LD_INT 3
54320: PUSH
54321: LD_INT 4
54323: PUSH
54324: LD_INT 5
54326: PUSH
54327: LD_INT 6
54329: PUSH
54330: LD_INT 7
54332: PUSH
54333: LD_INT 8
54335: PUSH
54336: LD_INT 9
54338: PUSH
54339: LD_INT 10
54341: PUSH
54342: LD_INT 11
54344: PUSH
54345: LD_INT 12
54347: PUSH
54348: LD_INT 13
54350: PUSH
54351: LD_INT 14
54353: PUSH
54354: LD_INT 15
54356: PUSH
54357: LD_INT 16
54359: PUSH
54360: LD_INT 17
54362: PUSH
54363: LD_INT 18
54365: PUSH
54366: LD_INT 19
54368: PUSH
54369: LD_INT 20
54371: PUSH
54372: LD_INT 21
54374: PUSH
54375: LD_INT 22
54377: PUSH
54378: LD_INT 23
54380: PUSH
54381: LD_INT 24
54383: PUSH
54384: LD_INT 25
54386: PUSH
54387: LD_INT 26
54389: PUSH
54390: LD_INT 27
54392: PUSH
54393: LD_INT 28
54395: PUSH
54396: LD_INT 29
54398: PUSH
54399: LD_INT 30
54401: PUSH
54402: LD_INT 31
54404: PUSH
54405: LD_INT 32
54407: PUSH
54408: LD_INT 33
54410: PUSH
54411: LD_INT 34
54413: PUSH
54414: LD_INT 36
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 101
54456: PUSH
54457: LD_INT 102
54459: PUSH
54460: LD_INT 103
54462: PUSH
54463: LD_INT 104
54465: PUSH
54466: LD_INT 105
54468: PUSH
54469: LD_INT 106
54471: PUSH
54472: LD_INT 107
54474: PUSH
54475: LD_INT 108
54477: PUSH
54478: LD_INT 109
54480: PUSH
54481: LD_INT 110
54483: PUSH
54484: LD_INT 111
54486: PUSH
54487: LD_INT 112
54489: PUSH
54490: LD_INT 113
54492: PUSH
54493: LD_INT 114
54495: PUSH
54496: LD_INT 116
54498: PUSH
54499: LD_INT 117
54501: PUSH
54502: LD_INT 118
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: ST_TO_ADDR
54528: GO 55303
54530: LD_INT 16
54532: DOUBLE
54533: EQUAL
54534: IFTRUE 54538
54536: GO 54674
54538: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
54539: LD_ADDR_VAR 0 2
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: LD_INT 4
54549: PUSH
54550: LD_INT 5
54552: PUSH
54553: LD_INT 7
54555: PUSH
54556: LD_INT 11
54558: PUSH
54559: LD_INT 12
54561: PUSH
54562: LD_INT 15
54564: PUSH
54565: LD_INT 16
54567: PUSH
54568: LD_INT 20
54570: PUSH
54571: LD_INT 21
54573: PUSH
54574: LD_INT 22
54576: PUSH
54577: LD_INT 23
54579: PUSH
54580: LD_INT 25
54582: PUSH
54583: LD_INT 26
54585: PUSH
54586: LD_INT 30
54588: PUSH
54589: LD_INT 31
54591: PUSH
54592: LD_INT 32
54594: PUSH
54595: LD_INT 33
54597: PUSH
54598: LD_INT 34
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 101
54624: PUSH
54625: LD_INT 102
54627: PUSH
54628: LD_INT 103
54630: PUSH
54631: LD_INT 106
54633: PUSH
54634: LD_INT 108
54636: PUSH
54637: LD_INT 112
54639: PUSH
54640: LD_INT 113
54642: PUSH
54643: LD_INT 114
54645: PUSH
54646: LD_INT 116
54648: PUSH
54649: LD_INT 117
54651: PUSH
54652: LD_INT 118
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: ST_TO_ADDR
54672: GO 55303
54674: LD_INT 17
54676: DOUBLE
54677: EQUAL
54678: IFTRUE 54682
54680: GO 54906
54682: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
54683: LD_ADDR_VAR 0 2
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 2
54693: PUSH
54694: LD_INT 3
54696: PUSH
54697: LD_INT 4
54699: PUSH
54700: LD_INT 5
54702: PUSH
54703: LD_INT 6
54705: PUSH
54706: LD_INT 7
54708: PUSH
54709: LD_INT 8
54711: PUSH
54712: LD_INT 9
54714: PUSH
54715: LD_INT 10
54717: PUSH
54718: LD_INT 11
54720: PUSH
54721: LD_INT 12
54723: PUSH
54724: LD_INT 13
54726: PUSH
54727: LD_INT 14
54729: PUSH
54730: LD_INT 15
54732: PUSH
54733: LD_INT 16
54735: PUSH
54736: LD_INT 17
54738: PUSH
54739: LD_INT 18
54741: PUSH
54742: LD_INT 19
54744: PUSH
54745: LD_INT 20
54747: PUSH
54748: LD_INT 21
54750: PUSH
54751: LD_INT 22
54753: PUSH
54754: LD_INT 23
54756: PUSH
54757: LD_INT 24
54759: PUSH
54760: LD_INT 25
54762: PUSH
54763: LD_INT 26
54765: PUSH
54766: LD_INT 27
54768: PUSH
54769: LD_INT 28
54771: PUSH
54772: LD_INT 29
54774: PUSH
54775: LD_INT 30
54777: PUSH
54778: LD_INT 31
54780: PUSH
54781: LD_INT 32
54783: PUSH
54784: LD_INT 33
54786: PUSH
54787: LD_INT 34
54789: PUSH
54790: LD_INT 36
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 101
54832: PUSH
54833: LD_INT 102
54835: PUSH
54836: LD_INT 103
54838: PUSH
54839: LD_INT 104
54841: PUSH
54842: LD_INT 105
54844: PUSH
54845: LD_INT 106
54847: PUSH
54848: LD_INT 107
54850: PUSH
54851: LD_INT 108
54853: PUSH
54854: LD_INT 109
54856: PUSH
54857: LD_INT 110
54859: PUSH
54860: LD_INT 111
54862: PUSH
54863: LD_INT 112
54865: PUSH
54866: LD_INT 113
54868: PUSH
54869: LD_INT 114
54871: PUSH
54872: LD_INT 116
54874: PUSH
54875: LD_INT 117
54877: PUSH
54878: LD_INT 118
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: ST_TO_ADDR
54904: GO 55303
54906: LD_INT 18
54908: DOUBLE
54909: EQUAL
54910: IFTRUE 54914
54912: GO 55062
54914: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
54915: LD_ADDR_VAR 0 2
54919: PUSH
54920: LD_INT 2
54922: PUSH
54923: LD_INT 4
54925: PUSH
54926: LD_INT 5
54928: PUSH
54929: LD_INT 7
54931: PUSH
54932: LD_INT 11
54934: PUSH
54935: LD_INT 12
54937: PUSH
54938: LD_INT 15
54940: PUSH
54941: LD_INT 16
54943: PUSH
54944: LD_INT 20
54946: PUSH
54947: LD_INT 21
54949: PUSH
54950: LD_INT 22
54952: PUSH
54953: LD_INT 23
54955: PUSH
54956: LD_INT 25
54958: PUSH
54959: LD_INT 26
54961: PUSH
54962: LD_INT 30
54964: PUSH
54965: LD_INT 31
54967: PUSH
54968: LD_INT 32
54970: PUSH
54971: LD_INT 33
54973: PUSH
54974: LD_INT 34
54976: PUSH
54977: LD_INT 35
54979: PUSH
54980: LD_INT 36
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 101
55008: PUSH
55009: LD_INT 102
55011: PUSH
55012: LD_INT 103
55014: PUSH
55015: LD_INT 106
55017: PUSH
55018: LD_INT 108
55020: PUSH
55021: LD_INT 112
55023: PUSH
55024: LD_INT 113
55026: PUSH
55027: LD_INT 114
55029: PUSH
55030: LD_INT 115
55032: PUSH
55033: LD_INT 116
55035: PUSH
55036: LD_INT 117
55038: PUSH
55039: LD_INT 118
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: ST_TO_ADDR
55060: GO 55303
55062: LD_INT 19
55064: DOUBLE
55065: EQUAL
55066: IFTRUE 55070
55068: GO 55302
55070: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
55071: LD_ADDR_VAR 0 2
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: LD_INT 3
55084: PUSH
55085: LD_INT 4
55087: PUSH
55088: LD_INT 5
55090: PUSH
55091: LD_INT 6
55093: PUSH
55094: LD_INT 7
55096: PUSH
55097: LD_INT 8
55099: PUSH
55100: LD_INT 9
55102: PUSH
55103: LD_INT 10
55105: PUSH
55106: LD_INT 11
55108: PUSH
55109: LD_INT 12
55111: PUSH
55112: LD_INT 13
55114: PUSH
55115: LD_INT 14
55117: PUSH
55118: LD_INT 15
55120: PUSH
55121: LD_INT 16
55123: PUSH
55124: LD_INT 17
55126: PUSH
55127: LD_INT 18
55129: PUSH
55130: LD_INT 19
55132: PUSH
55133: LD_INT 20
55135: PUSH
55136: LD_INT 21
55138: PUSH
55139: LD_INT 22
55141: PUSH
55142: LD_INT 23
55144: PUSH
55145: LD_INT 24
55147: PUSH
55148: LD_INT 25
55150: PUSH
55151: LD_INT 26
55153: PUSH
55154: LD_INT 27
55156: PUSH
55157: LD_INT 28
55159: PUSH
55160: LD_INT 29
55162: PUSH
55163: LD_INT 30
55165: PUSH
55166: LD_INT 31
55168: PUSH
55169: LD_INT 32
55171: PUSH
55172: LD_INT 33
55174: PUSH
55175: LD_INT 34
55177: PUSH
55178: LD_INT 35
55180: PUSH
55181: LD_INT 36
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 101
55224: PUSH
55225: LD_INT 102
55227: PUSH
55228: LD_INT 103
55230: PUSH
55231: LD_INT 104
55233: PUSH
55234: LD_INT 105
55236: PUSH
55237: LD_INT 106
55239: PUSH
55240: LD_INT 107
55242: PUSH
55243: LD_INT 108
55245: PUSH
55246: LD_INT 109
55248: PUSH
55249: LD_INT 110
55251: PUSH
55252: LD_INT 111
55254: PUSH
55255: LD_INT 112
55257: PUSH
55258: LD_INT 113
55260: PUSH
55261: LD_INT 114
55263: PUSH
55264: LD_INT 115
55266: PUSH
55267: LD_INT 116
55269: PUSH
55270: LD_INT 117
55272: PUSH
55273: LD_INT 118
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: ST_TO_ADDR
55300: GO 55303
55302: POP
// end else
55303: GO 55534
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
55305: LD_ADDR_VAR 0 2
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: LD_INT 3
55318: PUSH
55319: LD_INT 4
55321: PUSH
55322: LD_INT 5
55324: PUSH
55325: LD_INT 6
55327: PUSH
55328: LD_INT 7
55330: PUSH
55331: LD_INT 8
55333: PUSH
55334: LD_INT 9
55336: PUSH
55337: LD_INT 10
55339: PUSH
55340: LD_INT 11
55342: PUSH
55343: LD_INT 12
55345: PUSH
55346: LD_INT 13
55348: PUSH
55349: LD_INT 14
55351: PUSH
55352: LD_INT 15
55354: PUSH
55355: LD_INT 16
55357: PUSH
55358: LD_INT 17
55360: PUSH
55361: LD_INT 18
55363: PUSH
55364: LD_INT 19
55366: PUSH
55367: LD_INT 20
55369: PUSH
55370: LD_INT 21
55372: PUSH
55373: LD_INT 22
55375: PUSH
55376: LD_INT 23
55378: PUSH
55379: LD_INT 24
55381: PUSH
55382: LD_INT 25
55384: PUSH
55385: LD_INT 26
55387: PUSH
55388: LD_INT 27
55390: PUSH
55391: LD_INT 28
55393: PUSH
55394: LD_INT 29
55396: PUSH
55397: LD_INT 30
55399: PUSH
55400: LD_INT 31
55402: PUSH
55403: LD_INT 32
55405: PUSH
55406: LD_INT 33
55408: PUSH
55409: LD_INT 34
55411: PUSH
55412: LD_INT 35
55414: PUSH
55415: LD_INT 36
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 101
55458: PUSH
55459: LD_INT 102
55461: PUSH
55462: LD_INT 103
55464: PUSH
55465: LD_INT 104
55467: PUSH
55468: LD_INT 105
55470: PUSH
55471: LD_INT 106
55473: PUSH
55474: LD_INT 107
55476: PUSH
55477: LD_INT 108
55479: PUSH
55480: LD_INT 109
55482: PUSH
55483: LD_INT 110
55485: PUSH
55486: LD_INT 111
55488: PUSH
55489: LD_INT 112
55491: PUSH
55492: LD_INT 113
55494: PUSH
55495: LD_INT 114
55497: PUSH
55498: LD_INT 115
55500: PUSH
55501: LD_INT 116
55503: PUSH
55504: LD_INT 117
55506: PUSH
55507: LD_INT 118
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: ST_TO_ADDR
// if result then
55534: LD_VAR 0 2
55538: IFFALSE 56324
// begin normal :=  ;
55540: LD_ADDR_VAR 0 5
55544: PUSH
55545: LD_STRING 
55547: ST_TO_ADDR
// hardcore :=  ;
55548: LD_ADDR_VAR 0 6
55552: PUSH
55553: LD_STRING 
55555: ST_TO_ADDR
// active :=  ;
55556: LD_ADDR_VAR 0 7
55560: PUSH
55561: LD_STRING 
55563: ST_TO_ADDR
// for i = 1 to normalCounter do
55564: LD_ADDR_VAR 0 8
55568: PUSH
55569: DOUBLE
55570: LD_INT 1
55572: DEC
55573: ST_TO_ADDR
55574: LD_EXP 30
55578: PUSH
55579: FOR_TO
55580: IFFALSE 55681
// begin tmp := 0 ;
55582: LD_ADDR_VAR 0 3
55586: PUSH
55587: LD_STRING 0
55589: ST_TO_ADDR
// if result [ 1 ] then
55590: LD_VAR 0 2
55594: PUSH
55595: LD_INT 1
55597: ARRAY
55598: IFFALSE 55663
// if result [ 1 ] [ 1 ] = i then
55600: LD_VAR 0 2
55604: PUSH
55605: LD_INT 1
55607: ARRAY
55608: PUSH
55609: LD_INT 1
55611: ARRAY
55612: PUSH
55613: LD_VAR 0 8
55617: EQUAL
55618: IFFALSE 55663
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
55620: LD_ADDR_VAR 0 2
55624: PUSH
55625: LD_VAR 0 2
55629: PPUSH
55630: LD_INT 1
55632: PPUSH
55633: LD_VAR 0 2
55637: PUSH
55638: LD_INT 1
55640: ARRAY
55641: PPUSH
55642: LD_INT 1
55644: PPUSH
55645: CALL_OW 3
55649: PPUSH
55650: CALL_OW 1
55654: ST_TO_ADDR
// tmp := 1 ;
55655: LD_ADDR_VAR 0 3
55659: PUSH
55660: LD_STRING 1
55662: ST_TO_ADDR
// end ; normal := normal & tmp ;
55663: LD_ADDR_VAR 0 5
55667: PUSH
55668: LD_VAR 0 5
55672: PUSH
55673: LD_VAR 0 3
55677: STR
55678: ST_TO_ADDR
// end ;
55679: GO 55579
55681: POP
55682: POP
// for i = 1 to hardcoreCounter do
55683: LD_ADDR_VAR 0 8
55687: PUSH
55688: DOUBLE
55689: LD_INT 1
55691: DEC
55692: ST_TO_ADDR
55693: LD_EXP 31
55697: PUSH
55698: FOR_TO
55699: IFFALSE 55804
// begin tmp := 0 ;
55701: LD_ADDR_VAR 0 3
55705: PUSH
55706: LD_STRING 0
55708: ST_TO_ADDR
// if result [ 2 ] then
55709: LD_VAR 0 2
55713: PUSH
55714: LD_INT 2
55716: ARRAY
55717: IFFALSE 55786
// if result [ 2 ] [ 1 ] = 100 + i then
55719: LD_VAR 0 2
55723: PUSH
55724: LD_INT 2
55726: ARRAY
55727: PUSH
55728: LD_INT 1
55730: ARRAY
55731: PUSH
55732: LD_INT 100
55734: PUSH
55735: LD_VAR 0 8
55739: PLUS
55740: EQUAL
55741: IFFALSE 55786
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
55743: LD_ADDR_VAR 0 2
55747: PUSH
55748: LD_VAR 0 2
55752: PPUSH
55753: LD_INT 2
55755: PPUSH
55756: LD_VAR 0 2
55760: PUSH
55761: LD_INT 2
55763: ARRAY
55764: PPUSH
55765: LD_INT 1
55767: PPUSH
55768: CALL_OW 3
55772: PPUSH
55773: CALL_OW 1
55777: ST_TO_ADDR
// tmp := 1 ;
55778: LD_ADDR_VAR 0 3
55782: PUSH
55783: LD_STRING 1
55785: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
55786: LD_ADDR_VAR 0 6
55790: PUSH
55791: LD_VAR 0 6
55795: PUSH
55796: LD_VAR 0 3
55800: STR
55801: ST_TO_ADDR
// end ;
55802: GO 55698
55804: POP
55805: POP
// if isGameLoad then
55806: LD_VAR 0 1
55810: IFFALSE 56285
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
55812: LD_ADDR_VAR 0 4
55816: PUSH
55817: LD_EXP 34
55821: PUSH
55822: LD_EXP 33
55826: PUSH
55827: LD_EXP 35
55831: PUSH
55832: LD_EXP 32
55836: PUSH
55837: LD_EXP 36
55841: PUSH
55842: LD_EXP 37
55846: PUSH
55847: LD_EXP 38
55851: PUSH
55852: LD_EXP 39
55856: PUSH
55857: LD_EXP 40
55861: PUSH
55862: LD_EXP 41
55866: PUSH
55867: LD_EXP 42
55871: PUSH
55872: LD_EXP 43
55876: PUSH
55877: LD_EXP 44
55881: PUSH
55882: LD_EXP 45
55886: PUSH
55887: LD_EXP 53
55891: PUSH
55892: LD_EXP 54
55896: PUSH
55897: LD_EXP 55
55901: PUSH
55902: LD_EXP 56
55906: PUSH
55907: LD_EXP 58
55911: PUSH
55912: LD_EXP 59
55916: PUSH
55917: LD_EXP 60
55921: PUSH
55922: LD_EXP 63
55926: PUSH
55927: LD_EXP 65
55931: PUSH
55932: LD_EXP 66
55936: PUSH
55937: LD_EXP 67
55941: PUSH
55942: LD_EXP 69
55946: PUSH
55947: LD_EXP 70
55951: PUSH
55952: LD_EXP 73
55956: PUSH
55957: LD_EXP 74
55961: PUSH
55962: LD_EXP 75
55966: PUSH
55967: LD_EXP 76
55971: PUSH
55972: LD_EXP 77
55976: PUSH
55977: LD_EXP 78
55981: PUSH
55982: LD_EXP 79
55986: PUSH
55987: LD_EXP 80
55991: PUSH
55992: LD_EXP 81
55996: PUSH
55997: LD_EXP 46
56001: PUSH
56002: LD_EXP 47
56006: PUSH
56007: LD_EXP 50
56011: PUSH
56012: LD_EXP 51
56016: PUSH
56017: LD_EXP 52
56021: PUSH
56022: LD_EXP 48
56026: PUSH
56027: LD_EXP 49
56031: PUSH
56032: LD_EXP 57
56036: PUSH
56037: LD_EXP 61
56041: PUSH
56042: LD_EXP 62
56046: PUSH
56047: LD_EXP 64
56051: PUSH
56052: LD_EXP 68
56056: PUSH
56057: LD_EXP 71
56061: PUSH
56062: LD_EXP 72
56066: PUSH
56067: LD_EXP 82
56071: PUSH
56072: LD_EXP 83
56076: PUSH
56077: LD_EXP 84
56081: PUSH
56082: LD_EXP 85
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: ST_TO_ADDR
// tmp :=  ;
56143: LD_ADDR_VAR 0 3
56147: PUSH
56148: LD_STRING 
56150: ST_TO_ADDR
// for i = 1 to normalCounter do
56151: LD_ADDR_VAR 0 8
56155: PUSH
56156: DOUBLE
56157: LD_INT 1
56159: DEC
56160: ST_TO_ADDR
56161: LD_EXP 30
56165: PUSH
56166: FOR_TO
56167: IFFALSE 56203
// begin if flags [ i ] then
56169: LD_VAR 0 4
56173: PUSH
56174: LD_VAR 0 8
56178: ARRAY
56179: IFFALSE 56201
// tmp := tmp & i & ; ;
56181: LD_ADDR_VAR 0 3
56185: PUSH
56186: LD_VAR 0 3
56190: PUSH
56191: LD_VAR 0 8
56195: STR
56196: PUSH
56197: LD_STRING ;
56199: STR
56200: ST_TO_ADDR
// end ;
56201: GO 56166
56203: POP
56204: POP
// for i = 1 to hardcoreCounter do
56205: LD_ADDR_VAR 0 8
56209: PUSH
56210: DOUBLE
56211: LD_INT 1
56213: DEC
56214: ST_TO_ADDR
56215: LD_EXP 31
56219: PUSH
56220: FOR_TO
56221: IFFALSE 56267
// begin if flags [ normalCounter + i ] then
56223: LD_VAR 0 4
56227: PUSH
56228: LD_EXP 30
56232: PUSH
56233: LD_VAR 0 8
56237: PLUS
56238: ARRAY
56239: IFFALSE 56265
// tmp := tmp & ( 100 + i ) & ; ;
56241: LD_ADDR_VAR 0 3
56245: PUSH
56246: LD_VAR 0 3
56250: PUSH
56251: LD_INT 100
56253: PUSH
56254: LD_VAR 0 8
56258: PLUS
56259: STR
56260: PUSH
56261: LD_STRING ;
56263: STR
56264: ST_TO_ADDR
// end ;
56265: GO 56220
56267: POP
56268: POP
// if tmp then
56269: LD_VAR 0 3
56273: IFFALSE 56285
// active := tmp ;
56275: LD_ADDR_VAR 0 7
56279: PUSH
56280: LD_VAR 0 3
56284: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56285: LD_STRING getStreamItemsFromMission("
56287: PUSH
56288: LD_VAR 0 5
56292: STR
56293: PUSH
56294: LD_STRING ","
56296: STR
56297: PUSH
56298: LD_VAR 0 6
56302: STR
56303: PUSH
56304: LD_STRING ","
56306: STR
56307: PUSH
56308: LD_VAR 0 7
56312: STR
56313: PUSH
56314: LD_STRING ")
56316: STR
56317: PPUSH
56318: CALL_OW 559
// end else
56322: GO 56331
// ToLua ( getStreamItemsFromMission("","","") ) ;
56324: LD_STRING getStreamItemsFromMission("","","")
56326: PPUSH
56327: CALL_OW 559
// end ;
56331: LD_VAR 0 2
56335: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
56336: LD_EXP 29
56340: PUSH
56341: LD_EXP 34
56345: AND
56346: IFFALSE 56470
56348: GO 56350
56350: DISABLE
56351: LD_INT 0
56353: PPUSH
56354: PPUSH
// begin enable ;
56355: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
56356: LD_ADDR_VAR 0 2
56360: PUSH
56361: LD_INT 22
56363: PUSH
56364: LD_OWVAR 2
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: LD_INT 34
56378: PUSH
56379: LD_INT 7
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 34
56388: PUSH
56389: LD_INT 45
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 34
56398: PUSH
56399: LD_INT 28
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 34
56408: PUSH
56409: LD_INT 47
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PPUSH
56427: CALL_OW 69
56431: ST_TO_ADDR
// if not tmp then
56432: LD_VAR 0 2
56436: NOT
56437: IFFALSE 56441
// exit ;
56439: GO 56470
// for i in tmp do
56441: LD_ADDR_VAR 0 1
56445: PUSH
56446: LD_VAR 0 2
56450: PUSH
56451: FOR_IN
56452: IFFALSE 56468
// begin SetLives ( i , 0 ) ;
56454: LD_VAR 0 1
56458: PPUSH
56459: LD_INT 0
56461: PPUSH
56462: CALL_OW 234
// end ;
56466: GO 56451
56468: POP
56469: POP
// end ;
56470: PPOPN 2
56472: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
56473: LD_EXP 29
56477: PUSH
56478: LD_EXP 35
56482: AND
56483: IFFALSE 56567
56485: GO 56487
56487: DISABLE
56488: LD_INT 0
56490: PPUSH
56491: PPUSH
// begin enable ;
56492: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
56493: LD_ADDR_VAR 0 2
56497: PUSH
56498: LD_INT 22
56500: PUSH
56501: LD_OWVAR 2
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 32
56512: PUSH
56513: LD_INT 3
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PPUSH
56524: CALL_OW 69
56528: ST_TO_ADDR
// if not tmp then
56529: LD_VAR 0 2
56533: NOT
56534: IFFALSE 56538
// exit ;
56536: GO 56567
// for i in tmp do
56538: LD_ADDR_VAR 0 1
56542: PUSH
56543: LD_VAR 0 2
56547: PUSH
56548: FOR_IN
56549: IFFALSE 56565
// begin SetLives ( i , 0 ) ;
56551: LD_VAR 0 1
56555: PPUSH
56556: LD_INT 0
56558: PPUSH
56559: CALL_OW 234
// end ;
56563: GO 56548
56565: POP
56566: POP
// end ;
56567: PPOPN 2
56569: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
56570: LD_EXP 29
56574: PUSH
56575: LD_EXP 32
56579: AND
56580: IFFALSE 56673
56582: GO 56584
56584: DISABLE
56585: LD_INT 0
56587: PPUSH
// begin enable ;
56588: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
56589: LD_ADDR_VAR 0 1
56593: PUSH
56594: LD_INT 22
56596: PUSH
56597: LD_OWVAR 2
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 2
56608: PUSH
56609: LD_INT 25
56611: PUSH
56612: LD_INT 5
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 25
56621: PUSH
56622: LD_INT 9
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 25
56631: PUSH
56632: LD_INT 8
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PPUSH
56649: CALL_OW 69
56653: PUSH
56654: FOR_IN
56655: IFFALSE 56671
// begin SetClass ( i , 1 ) ;
56657: LD_VAR 0 1
56661: PPUSH
56662: LD_INT 1
56664: PPUSH
56665: CALL_OW 336
// end ;
56669: GO 56654
56671: POP
56672: POP
// end ;
56673: PPOPN 1
56675: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
56676: LD_EXP 29
56680: PUSH
56681: LD_EXP 33
56685: AND
56686: PUSH
56687: LD_OWVAR 65
56691: PUSH
56692: LD_INT 7
56694: LESS
56695: AND
56696: IFFALSE 56710
56698: GO 56700
56700: DISABLE
// begin enable ;
56701: ENABLE
// game_speed := 7 ;
56702: LD_ADDR_OWVAR 65
56706: PUSH
56707: LD_INT 7
56709: ST_TO_ADDR
// end ;
56710: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
56711: LD_EXP 29
56715: PUSH
56716: LD_EXP 36
56720: AND
56721: IFFALSE 56923
56723: GO 56725
56725: DISABLE
56726: LD_INT 0
56728: PPUSH
56729: PPUSH
56730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56731: LD_ADDR_VAR 0 3
56735: PUSH
56736: LD_INT 81
56738: PUSH
56739: LD_OWVAR 2
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 21
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PPUSH
56762: CALL_OW 69
56766: ST_TO_ADDR
// if not tmp then
56767: LD_VAR 0 3
56771: NOT
56772: IFFALSE 56776
// exit ;
56774: GO 56923
// if tmp > 5 then
56776: LD_VAR 0 3
56780: PUSH
56781: LD_INT 5
56783: GREATER
56784: IFFALSE 56796
// k := 5 else
56786: LD_ADDR_VAR 0 2
56790: PUSH
56791: LD_INT 5
56793: ST_TO_ADDR
56794: GO 56806
// k := tmp ;
56796: LD_ADDR_VAR 0 2
56800: PUSH
56801: LD_VAR 0 3
56805: ST_TO_ADDR
// for i := 1 to k do
56806: LD_ADDR_VAR 0 1
56810: PUSH
56811: DOUBLE
56812: LD_INT 1
56814: DEC
56815: ST_TO_ADDR
56816: LD_VAR 0 2
56820: PUSH
56821: FOR_TO
56822: IFFALSE 56921
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
56824: LD_VAR 0 3
56828: PUSH
56829: LD_VAR 0 1
56833: ARRAY
56834: PPUSH
56835: LD_VAR 0 1
56839: PUSH
56840: LD_INT 4
56842: MOD
56843: PUSH
56844: LD_INT 1
56846: PLUS
56847: PPUSH
56848: CALL_OW 259
56852: PUSH
56853: LD_INT 10
56855: LESS
56856: IFFALSE 56919
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
56858: LD_VAR 0 3
56862: PUSH
56863: LD_VAR 0 1
56867: ARRAY
56868: PPUSH
56869: LD_VAR 0 1
56873: PUSH
56874: LD_INT 4
56876: MOD
56877: PUSH
56878: LD_INT 1
56880: PLUS
56881: PPUSH
56882: LD_VAR 0 3
56886: PUSH
56887: LD_VAR 0 1
56891: ARRAY
56892: PPUSH
56893: LD_VAR 0 1
56897: PUSH
56898: LD_INT 4
56900: MOD
56901: PUSH
56902: LD_INT 1
56904: PLUS
56905: PPUSH
56906: CALL_OW 259
56910: PUSH
56911: LD_INT 1
56913: PLUS
56914: PPUSH
56915: CALL_OW 237
56919: GO 56821
56921: POP
56922: POP
// end ;
56923: PPOPN 3
56925: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
56926: LD_EXP 29
56930: PUSH
56931: LD_EXP 37
56935: AND
56936: IFFALSE 56956
56938: GO 56940
56940: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
56941: LD_INT 4
56943: PPUSH
56944: LD_OWVAR 2
56948: PPUSH
56949: LD_INT 0
56951: PPUSH
56952: CALL_OW 324
56956: END
// every 0 0$1 trigger StreamModeActive and sShovel do
56957: LD_EXP 29
56961: PUSH
56962: LD_EXP 66
56966: AND
56967: IFFALSE 56987
56969: GO 56971
56971: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
56972: LD_INT 19
56974: PPUSH
56975: LD_OWVAR 2
56979: PPUSH
56980: LD_INT 0
56982: PPUSH
56983: CALL_OW 324
56987: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
56988: LD_EXP 29
56992: PUSH
56993: LD_EXP 38
56997: AND
56998: IFFALSE 57100
57000: GO 57002
57002: DISABLE
57003: LD_INT 0
57005: PPUSH
57006: PPUSH
// begin enable ;
57007: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
57008: LD_ADDR_VAR 0 2
57012: PUSH
57013: LD_INT 22
57015: PUSH
57016: LD_OWVAR 2
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 2
57027: PUSH
57028: LD_INT 34
57030: PUSH
57031: LD_INT 11
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 34
57040: PUSH
57041: LD_INT 30
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: LIST
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PPUSH
57057: CALL_OW 69
57061: ST_TO_ADDR
// if not tmp then
57062: LD_VAR 0 2
57066: NOT
57067: IFFALSE 57071
// exit ;
57069: GO 57100
// for i in tmp do
57071: LD_ADDR_VAR 0 1
57075: PUSH
57076: LD_VAR 0 2
57080: PUSH
57081: FOR_IN
57082: IFFALSE 57098
// begin SetLives ( i , 0 ) ;
57084: LD_VAR 0 1
57088: PPUSH
57089: LD_INT 0
57091: PPUSH
57092: CALL_OW 234
// end ;
57096: GO 57081
57098: POP
57099: POP
// end ;
57100: PPOPN 2
57102: END
// every 0 0$1 trigger StreamModeActive and sBunker do
57103: LD_EXP 29
57107: PUSH
57108: LD_EXP 39
57112: AND
57113: IFFALSE 57133
57115: GO 57117
57117: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
57118: LD_INT 32
57120: PPUSH
57121: LD_OWVAR 2
57125: PPUSH
57126: LD_INT 0
57128: PPUSH
57129: CALL_OW 324
57133: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
57134: LD_EXP 29
57138: PUSH
57139: LD_EXP 40
57143: AND
57144: IFFALSE 57325
57146: GO 57148
57148: DISABLE
57149: LD_INT 0
57151: PPUSH
57152: PPUSH
57153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
57154: LD_ADDR_VAR 0 2
57158: PUSH
57159: LD_INT 22
57161: PUSH
57162: LD_OWVAR 2
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 33
57173: PUSH
57174: LD_INT 3
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PPUSH
57185: CALL_OW 69
57189: ST_TO_ADDR
// if not tmp then
57190: LD_VAR 0 2
57194: NOT
57195: IFFALSE 57199
// exit ;
57197: GO 57325
// side := 0 ;
57199: LD_ADDR_VAR 0 3
57203: PUSH
57204: LD_INT 0
57206: ST_TO_ADDR
// for i := 1 to 8 do
57207: LD_ADDR_VAR 0 1
57211: PUSH
57212: DOUBLE
57213: LD_INT 1
57215: DEC
57216: ST_TO_ADDR
57217: LD_INT 8
57219: PUSH
57220: FOR_TO
57221: IFFALSE 57269
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
57223: LD_OWVAR 2
57227: PUSH
57228: LD_VAR 0 1
57232: NONEQUAL
57233: PUSH
57234: LD_OWVAR 2
57238: PPUSH
57239: LD_VAR 0 1
57243: PPUSH
57244: CALL_OW 81
57248: PUSH
57249: LD_INT 2
57251: EQUAL
57252: AND
57253: IFFALSE 57267
// begin side := i ;
57255: LD_ADDR_VAR 0 3
57259: PUSH
57260: LD_VAR 0 1
57264: ST_TO_ADDR
// break ;
57265: GO 57269
// end ;
57267: GO 57220
57269: POP
57270: POP
// if not side then
57271: LD_VAR 0 3
57275: NOT
57276: IFFALSE 57280
// exit ;
57278: GO 57325
// for i := 1 to tmp do
57280: LD_ADDR_VAR 0 1
57284: PUSH
57285: DOUBLE
57286: LD_INT 1
57288: DEC
57289: ST_TO_ADDR
57290: LD_VAR 0 2
57294: PUSH
57295: FOR_TO
57296: IFFALSE 57323
// if Prob ( 60 ) then
57298: LD_INT 60
57300: PPUSH
57301: CALL_OW 13
57305: IFFALSE 57321
// SetSide ( i , side ) ;
57307: LD_VAR 0 1
57311: PPUSH
57312: LD_VAR 0 3
57316: PPUSH
57317: CALL_OW 235
57321: GO 57295
57323: POP
57324: POP
// end ;
57325: PPOPN 3
57327: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
57328: LD_EXP 29
57332: PUSH
57333: LD_EXP 42
57337: AND
57338: IFFALSE 57457
57340: GO 57342
57342: DISABLE
57343: LD_INT 0
57345: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
57346: LD_ADDR_VAR 0 1
57350: PUSH
57351: LD_INT 22
57353: PUSH
57354: LD_OWVAR 2
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 21
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 3
57375: PUSH
57376: LD_INT 23
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: LIST
57394: PPUSH
57395: CALL_OW 69
57399: PUSH
57400: FOR_IN
57401: IFFALSE 57455
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
57403: LD_VAR 0 1
57407: PPUSH
57408: CALL_OW 257
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: LD_INT 2
57418: PUSH
57419: LD_INT 3
57421: PUSH
57422: LD_INT 4
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: IN
57431: IFFALSE 57453
// SetClass ( un , rand ( 1 , 4 ) ) ;
57433: LD_VAR 0 1
57437: PPUSH
57438: LD_INT 1
57440: PPUSH
57441: LD_INT 4
57443: PPUSH
57444: CALL_OW 12
57448: PPUSH
57449: CALL_OW 336
57453: GO 57400
57455: POP
57456: POP
// end ;
57457: PPOPN 1
57459: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
57460: LD_EXP 29
57464: PUSH
57465: LD_EXP 41
57469: AND
57470: IFFALSE 57549
57472: GO 57474
57474: DISABLE
57475: LD_INT 0
57477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57478: LD_ADDR_VAR 0 1
57482: PUSH
57483: LD_INT 22
57485: PUSH
57486: LD_OWVAR 2
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 21
57497: PUSH
57498: LD_INT 3
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PPUSH
57509: CALL_OW 69
57513: ST_TO_ADDR
// if not tmp then
57514: LD_VAR 0 1
57518: NOT
57519: IFFALSE 57523
// exit ;
57521: GO 57549
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
57523: LD_VAR 0 1
57527: PUSH
57528: LD_INT 1
57530: PPUSH
57531: LD_VAR 0 1
57535: PPUSH
57536: CALL_OW 12
57540: ARRAY
57541: PPUSH
57542: LD_INT 100
57544: PPUSH
57545: CALL_OW 234
// end ;
57549: PPOPN 1
57551: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
57552: LD_EXP 29
57556: PUSH
57557: LD_EXP 43
57561: AND
57562: IFFALSE 57660
57564: GO 57566
57566: DISABLE
57567: LD_INT 0
57569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57570: LD_ADDR_VAR 0 1
57574: PUSH
57575: LD_INT 22
57577: PUSH
57578: LD_OWVAR 2
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 21
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PPUSH
57601: CALL_OW 69
57605: ST_TO_ADDR
// if not tmp then
57606: LD_VAR 0 1
57610: NOT
57611: IFFALSE 57615
// exit ;
57613: GO 57660
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
57615: LD_VAR 0 1
57619: PUSH
57620: LD_INT 1
57622: PPUSH
57623: LD_VAR 0 1
57627: PPUSH
57628: CALL_OW 12
57632: ARRAY
57633: PPUSH
57634: LD_INT 1
57636: PPUSH
57637: LD_INT 4
57639: PPUSH
57640: CALL_OW 12
57644: PPUSH
57645: LD_INT 3000
57647: PPUSH
57648: LD_INT 9000
57650: PPUSH
57651: CALL_OW 12
57655: PPUSH
57656: CALL_OW 492
// end ;
57660: PPOPN 1
57662: END
// every 0 0$1 trigger StreamModeActive and sDepot do
57663: LD_EXP 29
57667: PUSH
57668: LD_EXP 44
57672: AND
57673: IFFALSE 57693
57675: GO 57677
57677: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
57678: LD_INT 1
57680: PPUSH
57681: LD_OWVAR 2
57685: PPUSH
57686: LD_INT 0
57688: PPUSH
57689: CALL_OW 324
57693: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
57694: LD_EXP 29
57698: PUSH
57699: LD_EXP 45
57703: AND
57704: IFFALSE 57787
57706: GO 57708
57708: DISABLE
57709: LD_INT 0
57711: PPUSH
57712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57713: LD_ADDR_VAR 0 2
57717: PUSH
57718: LD_INT 22
57720: PUSH
57721: LD_OWVAR 2
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 21
57732: PUSH
57733: LD_INT 3
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PPUSH
57744: CALL_OW 69
57748: ST_TO_ADDR
// if not tmp then
57749: LD_VAR 0 2
57753: NOT
57754: IFFALSE 57758
// exit ;
57756: GO 57787
// for i in tmp do
57758: LD_ADDR_VAR 0 1
57762: PUSH
57763: LD_VAR 0 2
57767: PUSH
57768: FOR_IN
57769: IFFALSE 57785
// SetBLevel ( i , 10 ) ;
57771: LD_VAR 0 1
57775: PPUSH
57776: LD_INT 10
57778: PPUSH
57779: CALL_OW 241
57783: GO 57768
57785: POP
57786: POP
// end ;
57787: PPOPN 2
57789: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
57790: LD_EXP 29
57794: PUSH
57795: LD_EXP 46
57799: AND
57800: IFFALSE 57911
57802: GO 57804
57804: DISABLE
57805: LD_INT 0
57807: PPUSH
57808: PPUSH
57809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57810: LD_ADDR_VAR 0 3
57814: PUSH
57815: LD_INT 22
57817: PUSH
57818: LD_OWVAR 2
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 25
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PPUSH
57841: CALL_OW 69
57845: ST_TO_ADDR
// if not tmp then
57846: LD_VAR 0 3
57850: NOT
57851: IFFALSE 57855
// exit ;
57853: GO 57911
// un := tmp [ rand ( 1 , tmp ) ] ;
57855: LD_ADDR_VAR 0 2
57859: PUSH
57860: LD_VAR 0 3
57864: PUSH
57865: LD_INT 1
57867: PPUSH
57868: LD_VAR 0 3
57872: PPUSH
57873: CALL_OW 12
57877: ARRAY
57878: ST_TO_ADDR
// if Crawls ( un ) then
57879: LD_VAR 0 2
57883: PPUSH
57884: CALL_OW 318
57888: IFFALSE 57899
// ComWalk ( un ) ;
57890: LD_VAR 0 2
57894: PPUSH
57895: CALL_OW 138
// SetClass ( un , class_sniper ) ;
57899: LD_VAR 0 2
57903: PPUSH
57904: LD_INT 5
57906: PPUSH
57907: CALL_OW 336
// end ;
57911: PPOPN 3
57913: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
57914: LD_EXP 29
57918: PUSH
57919: LD_EXP 47
57923: AND
57924: PUSH
57925: LD_OWVAR 67
57929: PUSH
57930: LD_INT 4
57932: LESS
57933: AND
57934: IFFALSE 57953
57936: GO 57938
57938: DISABLE
// begin Difficulty := Difficulty + 1 ;
57939: LD_ADDR_OWVAR 67
57943: PUSH
57944: LD_OWVAR 67
57948: PUSH
57949: LD_INT 1
57951: PLUS
57952: ST_TO_ADDR
// end ;
57953: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
57954: LD_EXP 29
57958: PUSH
57959: LD_EXP 48
57963: AND
57964: IFFALSE 58067
57966: GO 57968
57968: DISABLE
57969: LD_INT 0
57971: PPUSH
// begin for i := 1 to 5 do
57972: LD_ADDR_VAR 0 1
57976: PUSH
57977: DOUBLE
57978: LD_INT 1
57980: DEC
57981: ST_TO_ADDR
57982: LD_INT 5
57984: PUSH
57985: FOR_TO
57986: IFFALSE 58065
// begin uc_nation := nation_nature ;
57988: LD_ADDR_OWVAR 21
57992: PUSH
57993: LD_INT 0
57995: ST_TO_ADDR
// uc_side := 0 ;
57996: LD_ADDR_OWVAR 20
58000: PUSH
58001: LD_INT 0
58003: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58004: LD_ADDR_OWVAR 29
58008: PUSH
58009: LD_INT 12
58011: PUSH
58012: LD_INT 12
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: ST_TO_ADDR
// hc_agressivity := 20 ;
58019: LD_ADDR_OWVAR 35
58023: PUSH
58024: LD_INT 20
58026: ST_TO_ADDR
// hc_class := class_tiger ;
58027: LD_ADDR_OWVAR 28
58031: PUSH
58032: LD_INT 14
58034: ST_TO_ADDR
// hc_gallery :=  ;
58035: LD_ADDR_OWVAR 33
58039: PUSH
58040: LD_STRING 
58042: ST_TO_ADDR
// hc_name :=  ;
58043: LD_ADDR_OWVAR 26
58047: PUSH
58048: LD_STRING 
58050: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
58051: CALL_OW 44
58055: PPUSH
58056: LD_INT 0
58058: PPUSH
58059: CALL_OW 51
// end ;
58063: GO 57985
58065: POP
58066: POP
// end ;
58067: PPOPN 1
58069: END
// every 0 0$1 trigger StreamModeActive and sBomb do
58070: LD_EXP 29
58074: PUSH
58075: LD_EXP 49
58079: AND
58080: IFFALSE 58089
58082: GO 58084
58084: DISABLE
// StreamSibBomb ;
58085: CALL 58090 0 0
58089: END
// export function StreamSibBomb ; var i , x , y ; begin
58090: LD_INT 0
58092: PPUSH
58093: PPUSH
58094: PPUSH
58095: PPUSH
// result := false ;
58096: LD_ADDR_VAR 0 1
58100: PUSH
58101: LD_INT 0
58103: ST_TO_ADDR
// for i := 1 to 16 do
58104: LD_ADDR_VAR 0 2
58108: PUSH
58109: DOUBLE
58110: LD_INT 1
58112: DEC
58113: ST_TO_ADDR
58114: LD_INT 16
58116: PUSH
58117: FOR_TO
58118: IFFALSE 58317
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58120: LD_ADDR_VAR 0 3
58124: PUSH
58125: LD_INT 10
58127: PUSH
58128: LD_INT 20
58130: PUSH
58131: LD_INT 30
58133: PUSH
58134: LD_INT 40
58136: PUSH
58137: LD_INT 50
58139: PUSH
58140: LD_INT 60
58142: PUSH
58143: LD_INT 70
58145: PUSH
58146: LD_INT 80
58148: PUSH
58149: LD_INT 90
58151: PUSH
58152: LD_INT 100
58154: PUSH
58155: LD_INT 110
58157: PUSH
58158: LD_INT 120
58160: PUSH
58161: LD_INT 130
58163: PUSH
58164: LD_INT 140
58166: PUSH
58167: LD_INT 150
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: PPUSH
58190: LD_INT 15
58192: PPUSH
58193: CALL_OW 12
58197: ARRAY
58198: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58199: LD_ADDR_VAR 0 4
58203: PUSH
58204: LD_INT 10
58206: PUSH
58207: LD_INT 20
58209: PUSH
58210: LD_INT 30
58212: PUSH
58213: LD_INT 40
58215: PUSH
58216: LD_INT 50
58218: PUSH
58219: LD_INT 60
58221: PUSH
58222: LD_INT 70
58224: PUSH
58225: LD_INT 80
58227: PUSH
58228: LD_INT 90
58230: PUSH
58231: LD_INT 100
58233: PUSH
58234: LD_INT 110
58236: PUSH
58237: LD_INT 120
58239: PUSH
58240: LD_INT 130
58242: PUSH
58243: LD_INT 140
58245: PUSH
58246: LD_INT 150
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: PPUSH
58269: LD_INT 15
58271: PPUSH
58272: CALL_OW 12
58276: ARRAY
58277: ST_TO_ADDR
// if ValidHex ( x , y ) then
58278: LD_VAR 0 3
58282: PPUSH
58283: LD_VAR 0 4
58287: PPUSH
58288: CALL_OW 488
58292: IFFALSE 58315
// begin result := [ x , y ] ;
58294: LD_ADDR_VAR 0 1
58298: PUSH
58299: LD_VAR 0 3
58303: PUSH
58304: LD_VAR 0 4
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: ST_TO_ADDR
// break ;
58313: GO 58317
// end ; end ;
58315: GO 58117
58317: POP
58318: POP
// if result then
58319: LD_VAR 0 1
58323: IFFALSE 58383
// begin ToLua ( playSibBomb() ) ;
58325: LD_STRING playSibBomb()
58327: PPUSH
58328: CALL_OW 559
// wait ( 0 0$14 ) ;
58332: LD_INT 490
58334: PPUSH
58335: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
58339: LD_VAR 0 1
58343: PUSH
58344: LD_INT 1
58346: ARRAY
58347: PPUSH
58348: LD_VAR 0 1
58352: PUSH
58353: LD_INT 2
58355: ARRAY
58356: PPUSH
58357: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
58361: LD_VAR 0 1
58365: PUSH
58366: LD_INT 1
58368: ARRAY
58369: PPUSH
58370: LD_VAR 0 1
58374: PUSH
58375: LD_INT 2
58377: ARRAY
58378: PPUSH
58379: CALL_OW 429
// end ; end ;
58383: LD_VAR 0 1
58387: RET
// every 0 0$1 trigger StreamModeActive and sReset do
58388: LD_EXP 29
58392: PUSH
58393: LD_EXP 51
58397: AND
58398: IFFALSE 58410
58400: GO 58402
58402: DISABLE
// YouLost (  ) ;
58403: LD_STRING 
58405: PPUSH
58406: CALL_OW 104
58410: END
// every 0 0$1 trigger StreamModeActive and sFog do
58411: LD_EXP 29
58415: PUSH
58416: LD_EXP 50
58420: AND
58421: IFFALSE 58435
58423: GO 58425
58425: DISABLE
// FogOff ( your_side ) ;
58426: LD_OWVAR 2
58430: PPUSH
58431: CALL_OW 344
58435: END
// every 0 0$1 trigger StreamModeActive and sSun do
58436: LD_EXP 29
58440: PUSH
58441: LD_EXP 52
58445: AND
58446: IFFALSE 58474
58448: GO 58450
58450: DISABLE
// begin solar_recharge_percent := 0 ;
58451: LD_ADDR_OWVAR 79
58455: PUSH
58456: LD_INT 0
58458: ST_TO_ADDR
// wait ( 5 5$00 ) ;
58459: LD_INT 10500
58461: PPUSH
58462: CALL_OW 67
// solar_recharge_percent := 100 ;
58466: LD_ADDR_OWVAR 79
58470: PUSH
58471: LD_INT 100
58473: ST_TO_ADDR
// end ;
58474: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
58475: LD_EXP 29
58479: PUSH
58480: LD_EXP 53
58484: AND
58485: IFFALSE 58724
58487: GO 58489
58489: DISABLE
58490: LD_INT 0
58492: PPUSH
58493: PPUSH
58494: PPUSH
// begin tmp := [ ] ;
58495: LD_ADDR_VAR 0 3
58499: PUSH
58500: EMPTY
58501: ST_TO_ADDR
// for i := 1 to 6 do
58502: LD_ADDR_VAR 0 1
58506: PUSH
58507: DOUBLE
58508: LD_INT 1
58510: DEC
58511: ST_TO_ADDR
58512: LD_INT 6
58514: PUSH
58515: FOR_TO
58516: IFFALSE 58621
// begin uc_nation := nation_nature ;
58518: LD_ADDR_OWVAR 21
58522: PUSH
58523: LD_INT 0
58525: ST_TO_ADDR
// uc_side := 0 ;
58526: LD_ADDR_OWVAR 20
58530: PUSH
58531: LD_INT 0
58533: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58534: LD_ADDR_OWVAR 29
58538: PUSH
58539: LD_INT 12
58541: PUSH
58542: LD_INT 12
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: ST_TO_ADDR
// hc_agressivity := 20 ;
58549: LD_ADDR_OWVAR 35
58553: PUSH
58554: LD_INT 20
58556: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
58557: LD_ADDR_OWVAR 28
58561: PUSH
58562: LD_INT 17
58564: ST_TO_ADDR
// hc_gallery :=  ;
58565: LD_ADDR_OWVAR 33
58569: PUSH
58570: LD_STRING 
58572: ST_TO_ADDR
// hc_name :=  ;
58573: LD_ADDR_OWVAR 26
58577: PUSH
58578: LD_STRING 
58580: ST_TO_ADDR
// un := CreateHuman ;
58581: LD_ADDR_VAR 0 2
58585: PUSH
58586: CALL_OW 44
58590: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
58591: LD_VAR 0 2
58595: PPUSH
58596: LD_INT 1
58598: PPUSH
58599: CALL_OW 51
// tmp := tmp ^ un ;
58603: LD_ADDR_VAR 0 3
58607: PUSH
58608: LD_VAR 0 3
58612: PUSH
58613: LD_VAR 0 2
58617: ADD
58618: ST_TO_ADDR
// end ;
58619: GO 58515
58621: POP
58622: POP
// repeat wait ( 0 0$1 ) ;
58623: LD_INT 35
58625: PPUSH
58626: CALL_OW 67
// for un in tmp do
58630: LD_ADDR_VAR 0 2
58634: PUSH
58635: LD_VAR 0 3
58639: PUSH
58640: FOR_IN
58641: IFFALSE 58715
// begin if IsDead ( un ) then
58643: LD_VAR 0 2
58647: PPUSH
58648: CALL_OW 301
58652: IFFALSE 58672
// begin tmp := tmp diff un ;
58654: LD_ADDR_VAR 0 3
58658: PUSH
58659: LD_VAR 0 3
58663: PUSH
58664: LD_VAR 0 2
58668: DIFF
58669: ST_TO_ADDR
// continue ;
58670: GO 58640
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
58672: LD_VAR 0 2
58676: PPUSH
58677: LD_INT 3
58679: PUSH
58680: LD_INT 22
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PPUSH
58694: CALL_OW 69
58698: PPUSH
58699: LD_VAR 0 2
58703: PPUSH
58704: CALL_OW 74
58708: PPUSH
58709: CALL_OW 115
// end ;
58713: GO 58640
58715: POP
58716: POP
// until not tmp ;
58717: LD_VAR 0 3
58721: NOT
58722: IFFALSE 58623
// end ;
58724: PPOPN 3
58726: END
// every 0 0$1 trigger StreamModeActive and sTroll do
58727: LD_EXP 29
58731: PUSH
58732: LD_EXP 54
58736: AND
58737: IFFALSE 58791
58739: GO 58741
58741: DISABLE
// begin ToLua ( displayTroll(); ) ;
58742: LD_STRING displayTroll();
58744: PPUSH
58745: CALL_OW 559
// wait ( 3 3$00 ) ;
58749: LD_INT 6300
58751: PPUSH
58752: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58756: LD_STRING hideTroll();
58758: PPUSH
58759: CALL_OW 559
// wait ( 1 1$00 ) ;
58763: LD_INT 2100
58765: PPUSH
58766: CALL_OW 67
// ToLua ( displayTroll(); ) ;
58770: LD_STRING displayTroll();
58772: PPUSH
58773: CALL_OW 559
// wait ( 1 1$00 ) ;
58777: LD_INT 2100
58779: PPUSH
58780: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58784: LD_STRING hideTroll();
58786: PPUSH
58787: CALL_OW 559
// end ;
58791: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
58792: LD_EXP 29
58796: PUSH
58797: LD_EXP 55
58801: AND
58802: IFFALSE 58865
58804: GO 58806
58806: DISABLE
58807: LD_INT 0
58809: PPUSH
// begin p := 0 ;
58810: LD_ADDR_VAR 0 1
58814: PUSH
58815: LD_INT 0
58817: ST_TO_ADDR
// repeat game_speed := 1 ;
58818: LD_ADDR_OWVAR 65
58822: PUSH
58823: LD_INT 1
58825: ST_TO_ADDR
// wait ( 0 0$1 ) ;
58826: LD_INT 35
58828: PPUSH
58829: CALL_OW 67
// p := p + 1 ;
58833: LD_ADDR_VAR 0 1
58837: PUSH
58838: LD_VAR 0 1
58842: PUSH
58843: LD_INT 1
58845: PLUS
58846: ST_TO_ADDR
// until p >= 60 ;
58847: LD_VAR 0 1
58851: PUSH
58852: LD_INT 60
58854: GREATEREQUAL
58855: IFFALSE 58818
// game_speed := 4 ;
58857: LD_ADDR_OWVAR 65
58861: PUSH
58862: LD_INT 4
58864: ST_TO_ADDR
// end ;
58865: PPOPN 1
58867: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
58868: LD_EXP 29
58872: PUSH
58873: LD_EXP 56
58877: AND
58878: IFFALSE 59024
58880: GO 58882
58882: DISABLE
58883: LD_INT 0
58885: PPUSH
58886: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58887: LD_ADDR_VAR 0 1
58891: PUSH
58892: LD_INT 22
58894: PUSH
58895: LD_OWVAR 2
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: LD_INT 30
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 30
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: LIST
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PPUSH
58936: CALL_OW 69
58940: ST_TO_ADDR
// if not depot then
58941: LD_VAR 0 1
58945: NOT
58946: IFFALSE 58950
// exit ;
58948: GO 59024
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
58950: LD_ADDR_VAR 0 2
58954: PUSH
58955: LD_VAR 0 1
58959: PUSH
58960: LD_INT 1
58962: PPUSH
58963: LD_VAR 0 1
58967: PPUSH
58968: CALL_OW 12
58972: ARRAY
58973: PPUSH
58974: CALL_OW 274
58978: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
58979: LD_VAR 0 2
58983: PPUSH
58984: LD_INT 1
58986: PPUSH
58987: LD_INT 0
58989: PPUSH
58990: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
58994: LD_VAR 0 2
58998: PPUSH
58999: LD_INT 2
59001: PPUSH
59002: LD_INT 0
59004: PPUSH
59005: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
59009: LD_VAR 0 2
59013: PPUSH
59014: LD_INT 3
59016: PPUSH
59017: LD_INT 0
59019: PPUSH
59020: CALL_OW 277
// end ;
59024: PPOPN 2
59026: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
59027: LD_EXP 29
59031: PUSH
59032: LD_EXP 57
59036: AND
59037: IFFALSE 59134
59039: GO 59041
59041: DISABLE
59042: LD_INT 0
59044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59045: LD_ADDR_VAR 0 1
59049: PUSH
59050: LD_INT 22
59052: PUSH
59053: LD_OWVAR 2
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 21
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 3
59074: PUSH
59075: LD_INT 23
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: LIST
59093: PPUSH
59094: CALL_OW 69
59098: ST_TO_ADDR
// if not tmp then
59099: LD_VAR 0 1
59103: NOT
59104: IFFALSE 59108
// exit ;
59106: GO 59134
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
59108: LD_VAR 0 1
59112: PUSH
59113: LD_INT 1
59115: PPUSH
59116: LD_VAR 0 1
59120: PPUSH
59121: CALL_OW 12
59125: ARRAY
59126: PPUSH
59127: LD_INT 200
59129: PPUSH
59130: CALL_OW 234
// end ;
59134: PPOPN 1
59136: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
59137: LD_EXP 29
59141: PUSH
59142: LD_EXP 58
59146: AND
59147: IFFALSE 59226
59149: GO 59151
59151: DISABLE
59152: LD_INT 0
59154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
59155: LD_ADDR_VAR 0 1
59159: PUSH
59160: LD_INT 22
59162: PUSH
59163: LD_OWVAR 2
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 21
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PPUSH
59186: CALL_OW 69
59190: ST_TO_ADDR
// if not tmp then
59191: LD_VAR 0 1
59195: NOT
59196: IFFALSE 59200
// exit ;
59198: GO 59226
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
59200: LD_VAR 0 1
59204: PUSH
59205: LD_INT 1
59207: PPUSH
59208: LD_VAR 0 1
59212: PPUSH
59213: CALL_OW 12
59217: ARRAY
59218: PPUSH
59219: LD_INT 60
59221: PPUSH
59222: CALL_OW 234
// end ;
59226: PPOPN 1
59228: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
59229: LD_EXP 29
59233: PUSH
59234: LD_EXP 59
59238: AND
59239: IFFALSE 59338
59241: GO 59243
59243: DISABLE
59244: LD_INT 0
59246: PPUSH
59247: PPUSH
// begin enable ;
59248: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
59249: LD_ADDR_VAR 0 1
59253: PUSH
59254: LD_INT 22
59256: PUSH
59257: LD_OWVAR 2
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 61
59268: PUSH
59269: EMPTY
59270: LIST
59271: PUSH
59272: LD_INT 33
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: LIST
59286: PPUSH
59287: CALL_OW 69
59291: ST_TO_ADDR
// if not tmp then
59292: LD_VAR 0 1
59296: NOT
59297: IFFALSE 59301
// exit ;
59299: GO 59338
// for i in tmp do
59301: LD_ADDR_VAR 0 2
59305: PUSH
59306: LD_VAR 0 1
59310: PUSH
59311: FOR_IN
59312: IFFALSE 59336
// if IsControledBy ( i ) then
59314: LD_VAR 0 2
59318: PPUSH
59319: CALL_OW 312
59323: IFFALSE 59334
// ComUnlink ( i ) ;
59325: LD_VAR 0 2
59329: PPUSH
59330: CALL_OW 136
59334: GO 59311
59336: POP
59337: POP
// end ;
59338: PPOPN 2
59340: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
59341: LD_EXP 29
59345: PUSH
59346: LD_EXP 60
59350: AND
59351: IFFALSE 59491
59353: GO 59355
59355: DISABLE
59356: LD_INT 0
59358: PPUSH
59359: PPUSH
// begin ToLua ( displayPowell(); ) ;
59360: LD_STRING displayPowell();
59362: PPUSH
59363: CALL_OW 559
// uc_side := 0 ;
59367: LD_ADDR_OWVAR 20
59371: PUSH
59372: LD_INT 0
59374: ST_TO_ADDR
// uc_nation := 2 ;
59375: LD_ADDR_OWVAR 21
59379: PUSH
59380: LD_INT 2
59382: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
59383: LD_ADDR_OWVAR 37
59387: PUSH
59388: LD_INT 14
59390: ST_TO_ADDR
// vc_engine := engine_siberite ;
59391: LD_ADDR_OWVAR 39
59395: PUSH
59396: LD_INT 3
59398: ST_TO_ADDR
// vc_control := control_apeman ;
59399: LD_ADDR_OWVAR 38
59403: PUSH
59404: LD_INT 5
59406: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
59407: LD_ADDR_OWVAR 40
59411: PUSH
59412: LD_INT 29
59414: ST_TO_ADDR
// un := CreateVehicle ;
59415: LD_ADDR_VAR 0 2
59419: PUSH
59420: CALL_OW 45
59424: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59425: LD_VAR 0 2
59429: PPUSH
59430: LD_INT 1
59432: PPUSH
59433: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59437: LD_INT 35
59439: PPUSH
59440: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59444: LD_VAR 0 2
59448: PPUSH
59449: LD_INT 22
59451: PUSH
59452: LD_OWVAR 2
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PPUSH
59461: CALL_OW 69
59465: PPUSH
59466: LD_VAR 0 2
59470: PPUSH
59471: CALL_OW 74
59475: PPUSH
59476: CALL_OW 115
// until IsDead ( un ) ;
59480: LD_VAR 0 2
59484: PPUSH
59485: CALL_OW 301
59489: IFFALSE 59437
// end ;
59491: PPOPN 2
59493: END
// every 0 0$1 trigger StreamModeActive and sStu do
59494: LD_EXP 29
59498: PUSH
59499: LD_EXP 68
59503: AND
59504: IFFALSE 59520
59506: GO 59508
59508: DISABLE
// begin ToLua ( displayStucuk(); ) ;
59509: LD_STRING displayStucuk();
59511: PPUSH
59512: CALL_OW 559
// ResetFog ;
59516: CALL_OW 335
// end ;
59520: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
59521: LD_EXP 29
59525: PUSH
59526: LD_EXP 61
59530: AND
59531: IFFALSE 59672
59533: GO 59535
59535: DISABLE
59536: LD_INT 0
59538: PPUSH
59539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59540: LD_ADDR_VAR 0 2
59544: PUSH
59545: LD_INT 22
59547: PUSH
59548: LD_OWVAR 2
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 21
59559: PUSH
59560: LD_INT 1
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PPUSH
59571: CALL_OW 69
59575: ST_TO_ADDR
// if not tmp then
59576: LD_VAR 0 2
59580: NOT
59581: IFFALSE 59585
// exit ;
59583: GO 59672
// un := tmp [ rand ( 1 , tmp ) ] ;
59585: LD_ADDR_VAR 0 1
59589: PUSH
59590: LD_VAR 0 2
59594: PUSH
59595: LD_INT 1
59597: PPUSH
59598: LD_VAR 0 2
59602: PPUSH
59603: CALL_OW 12
59607: ARRAY
59608: ST_TO_ADDR
// SetSide ( un , 0 ) ;
59609: LD_VAR 0 1
59613: PPUSH
59614: LD_INT 0
59616: PPUSH
59617: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
59621: LD_VAR 0 1
59625: PPUSH
59626: LD_OWVAR 3
59630: PUSH
59631: LD_VAR 0 1
59635: DIFF
59636: PPUSH
59637: LD_VAR 0 1
59641: PPUSH
59642: CALL_OW 74
59646: PPUSH
59647: CALL_OW 115
// wait ( 0 0$20 ) ;
59651: LD_INT 700
59653: PPUSH
59654: CALL_OW 67
// SetSide ( un , your_side ) ;
59658: LD_VAR 0 1
59662: PPUSH
59663: LD_OWVAR 2
59667: PPUSH
59668: CALL_OW 235
// end ;
59672: PPOPN 2
59674: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
59675: LD_EXP 29
59679: PUSH
59680: LD_EXP 62
59684: AND
59685: IFFALSE 59791
59687: GO 59689
59689: DISABLE
59690: LD_INT 0
59692: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59693: LD_ADDR_VAR 0 1
59697: PUSH
59698: LD_INT 22
59700: PUSH
59701: LD_OWVAR 2
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: PUSH
59713: LD_INT 30
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 30
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: LIST
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PPUSH
59742: CALL_OW 69
59746: ST_TO_ADDR
// if not depot then
59747: LD_VAR 0 1
59751: NOT
59752: IFFALSE 59756
// exit ;
59754: GO 59791
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
59756: LD_VAR 0 1
59760: PUSH
59761: LD_INT 1
59763: ARRAY
59764: PPUSH
59765: CALL_OW 250
59769: PPUSH
59770: LD_VAR 0 1
59774: PUSH
59775: LD_INT 1
59777: ARRAY
59778: PPUSH
59779: CALL_OW 251
59783: PPUSH
59784: LD_INT 70
59786: PPUSH
59787: CALL_OW 495
// end ;
59791: PPOPN 1
59793: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
59794: LD_EXP 29
59798: PUSH
59799: LD_EXP 63
59803: AND
59804: IFFALSE 60015
59806: GO 59808
59808: DISABLE
59809: LD_INT 0
59811: PPUSH
59812: PPUSH
59813: PPUSH
59814: PPUSH
59815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59816: LD_ADDR_VAR 0 5
59820: PUSH
59821: LD_INT 22
59823: PUSH
59824: LD_OWVAR 2
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 21
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PPUSH
59847: CALL_OW 69
59851: ST_TO_ADDR
// if not tmp then
59852: LD_VAR 0 5
59856: NOT
59857: IFFALSE 59861
// exit ;
59859: GO 60015
// for i in tmp do
59861: LD_ADDR_VAR 0 1
59865: PUSH
59866: LD_VAR 0 5
59870: PUSH
59871: FOR_IN
59872: IFFALSE 60013
// begin d := rand ( 0 , 5 ) ;
59874: LD_ADDR_VAR 0 4
59878: PUSH
59879: LD_INT 0
59881: PPUSH
59882: LD_INT 5
59884: PPUSH
59885: CALL_OW 12
59889: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
59890: LD_ADDR_VAR 0 2
59894: PUSH
59895: LD_VAR 0 1
59899: PPUSH
59900: CALL_OW 250
59904: PPUSH
59905: LD_VAR 0 4
59909: PPUSH
59910: LD_INT 3
59912: PPUSH
59913: LD_INT 12
59915: PPUSH
59916: CALL_OW 12
59920: PPUSH
59921: CALL_OW 272
59925: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
59926: LD_ADDR_VAR 0 3
59930: PUSH
59931: LD_VAR 0 1
59935: PPUSH
59936: CALL_OW 251
59940: PPUSH
59941: LD_VAR 0 4
59945: PPUSH
59946: LD_INT 3
59948: PPUSH
59949: LD_INT 12
59951: PPUSH
59952: CALL_OW 12
59956: PPUSH
59957: CALL_OW 273
59961: ST_TO_ADDR
// if ValidHex ( x , y ) then
59962: LD_VAR 0 2
59966: PPUSH
59967: LD_VAR 0 3
59971: PPUSH
59972: CALL_OW 488
59976: IFFALSE 60011
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
59978: LD_VAR 0 1
59982: PPUSH
59983: LD_VAR 0 2
59987: PPUSH
59988: LD_VAR 0 3
59992: PPUSH
59993: LD_INT 3
59995: PPUSH
59996: LD_INT 6
59998: PPUSH
59999: CALL_OW 12
60003: PPUSH
60004: LD_INT 1
60006: PPUSH
60007: CALL_OW 483
// end ;
60011: GO 59871
60013: POP
60014: POP
// end ;
60015: PPOPN 5
60017: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
60018: LD_EXP 29
60022: PUSH
60023: LD_EXP 64
60027: AND
60028: IFFALSE 60122
60030: GO 60032
60032: DISABLE
60033: LD_INT 0
60035: PPUSH
60036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
60037: LD_ADDR_VAR 0 2
60041: PUSH
60042: LD_INT 22
60044: PUSH
60045: LD_OWVAR 2
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 32
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 21
60066: PUSH
60067: LD_INT 2
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: LIST
60078: PPUSH
60079: CALL_OW 69
60083: ST_TO_ADDR
// if not tmp then
60084: LD_VAR 0 2
60088: NOT
60089: IFFALSE 60093
// exit ;
60091: GO 60122
// for i in tmp do
60093: LD_ADDR_VAR 0 1
60097: PUSH
60098: LD_VAR 0 2
60102: PUSH
60103: FOR_IN
60104: IFFALSE 60120
// SetFuel ( i , 0 ) ;
60106: LD_VAR 0 1
60110: PPUSH
60111: LD_INT 0
60113: PPUSH
60114: CALL_OW 240
60118: GO 60103
60120: POP
60121: POP
// end ;
60122: PPOPN 2
60124: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
60125: LD_EXP 29
60129: PUSH
60130: LD_EXP 65
60134: AND
60135: IFFALSE 60201
60137: GO 60139
60139: DISABLE
60140: LD_INT 0
60142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60143: LD_ADDR_VAR 0 1
60147: PUSH
60148: LD_INT 22
60150: PUSH
60151: LD_OWVAR 2
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 30
60162: PUSH
60163: LD_INT 29
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PPUSH
60174: CALL_OW 69
60178: ST_TO_ADDR
// if not tmp then
60179: LD_VAR 0 1
60183: NOT
60184: IFFALSE 60188
// exit ;
60186: GO 60201
// DestroyUnit ( tmp [ 1 ] ) ;
60188: LD_VAR 0 1
60192: PUSH
60193: LD_INT 1
60195: ARRAY
60196: PPUSH
60197: CALL_OW 65
// end ;
60201: PPOPN 1
60203: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
60204: LD_EXP 29
60208: PUSH
60209: LD_EXP 67
60213: AND
60214: IFFALSE 60343
60216: GO 60218
60218: DISABLE
60219: LD_INT 0
60221: PPUSH
// begin uc_side := 0 ;
60222: LD_ADDR_OWVAR 20
60226: PUSH
60227: LD_INT 0
60229: ST_TO_ADDR
// uc_nation := nation_arabian ;
60230: LD_ADDR_OWVAR 21
60234: PUSH
60235: LD_INT 2
60237: ST_TO_ADDR
// hc_gallery :=  ;
60238: LD_ADDR_OWVAR 33
60242: PUSH
60243: LD_STRING 
60245: ST_TO_ADDR
// hc_name :=  ;
60246: LD_ADDR_OWVAR 26
60250: PUSH
60251: LD_STRING 
60253: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
60254: LD_INT 1
60256: PPUSH
60257: LD_INT 11
60259: PPUSH
60260: LD_INT 10
60262: PPUSH
60263: CALL_OW 380
// un := CreateHuman ;
60267: LD_ADDR_VAR 0 1
60271: PUSH
60272: CALL_OW 44
60276: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60277: LD_VAR 0 1
60281: PPUSH
60282: LD_INT 1
60284: PPUSH
60285: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60289: LD_INT 35
60291: PPUSH
60292: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60296: LD_VAR 0 1
60300: PPUSH
60301: LD_INT 22
60303: PUSH
60304: LD_OWVAR 2
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PPUSH
60313: CALL_OW 69
60317: PPUSH
60318: LD_VAR 0 1
60322: PPUSH
60323: CALL_OW 74
60327: PPUSH
60328: CALL_OW 115
// until IsDead ( un ) ;
60332: LD_VAR 0 1
60336: PPUSH
60337: CALL_OW 301
60341: IFFALSE 60289
// end ;
60343: PPOPN 1
60345: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
60346: LD_EXP 29
60350: PUSH
60351: LD_EXP 69
60355: AND
60356: IFFALSE 60368
60358: GO 60360
60360: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
60361: LD_STRING earthquake(getX(game), 0, 32)
60363: PPUSH
60364: CALL_OW 559
60368: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
60369: LD_EXP 29
60373: PUSH
60374: LD_EXP 70
60378: AND
60379: IFFALSE 60470
60381: GO 60383
60383: DISABLE
60384: LD_INT 0
60386: PPUSH
// begin enable ;
60387: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
60388: LD_ADDR_VAR 0 1
60392: PUSH
60393: LD_INT 22
60395: PUSH
60396: LD_OWVAR 2
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 21
60407: PUSH
60408: LD_INT 2
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 33
60417: PUSH
60418: LD_INT 3
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: LIST
60429: PPUSH
60430: CALL_OW 69
60434: ST_TO_ADDR
// if not tmp then
60435: LD_VAR 0 1
60439: NOT
60440: IFFALSE 60444
// exit ;
60442: GO 60470
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60444: LD_VAR 0 1
60448: PUSH
60449: LD_INT 1
60451: PPUSH
60452: LD_VAR 0 1
60456: PPUSH
60457: CALL_OW 12
60461: ARRAY
60462: PPUSH
60463: LD_INT 1
60465: PPUSH
60466: CALL_OW 234
// end ;
60470: PPOPN 1
60472: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
60473: LD_EXP 29
60477: PUSH
60478: LD_EXP 71
60482: AND
60483: IFFALSE 60624
60485: GO 60487
60487: DISABLE
60488: LD_INT 0
60490: PPUSH
60491: PPUSH
60492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60493: LD_ADDR_VAR 0 3
60497: PUSH
60498: LD_INT 22
60500: PUSH
60501: LD_OWVAR 2
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 25
60512: PUSH
60513: LD_INT 1
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PPUSH
60524: CALL_OW 69
60528: ST_TO_ADDR
// if not tmp then
60529: LD_VAR 0 3
60533: NOT
60534: IFFALSE 60538
// exit ;
60536: GO 60624
// un := tmp [ rand ( 1 , tmp ) ] ;
60538: LD_ADDR_VAR 0 2
60542: PUSH
60543: LD_VAR 0 3
60547: PUSH
60548: LD_INT 1
60550: PPUSH
60551: LD_VAR 0 3
60555: PPUSH
60556: CALL_OW 12
60560: ARRAY
60561: ST_TO_ADDR
// if Crawls ( un ) then
60562: LD_VAR 0 2
60566: PPUSH
60567: CALL_OW 318
60571: IFFALSE 60582
// ComWalk ( un ) ;
60573: LD_VAR 0 2
60577: PPUSH
60578: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
60582: LD_VAR 0 2
60586: PPUSH
60587: LD_INT 9
60589: PPUSH
60590: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
60594: LD_INT 28
60596: PPUSH
60597: LD_OWVAR 2
60601: PPUSH
60602: LD_INT 2
60604: PPUSH
60605: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
60609: LD_INT 29
60611: PPUSH
60612: LD_OWVAR 2
60616: PPUSH
60617: LD_INT 2
60619: PPUSH
60620: CALL_OW 322
// end ;
60624: PPOPN 3
60626: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
60627: LD_EXP 29
60631: PUSH
60632: LD_EXP 72
60636: AND
60637: IFFALSE 60748
60639: GO 60641
60641: DISABLE
60642: LD_INT 0
60644: PPUSH
60645: PPUSH
60646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60647: LD_ADDR_VAR 0 3
60651: PUSH
60652: LD_INT 22
60654: PUSH
60655: LD_OWVAR 2
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 25
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PPUSH
60678: CALL_OW 69
60682: ST_TO_ADDR
// if not tmp then
60683: LD_VAR 0 3
60687: NOT
60688: IFFALSE 60692
// exit ;
60690: GO 60748
// un := tmp [ rand ( 1 , tmp ) ] ;
60692: LD_ADDR_VAR 0 2
60696: PUSH
60697: LD_VAR 0 3
60701: PUSH
60702: LD_INT 1
60704: PPUSH
60705: LD_VAR 0 3
60709: PPUSH
60710: CALL_OW 12
60714: ARRAY
60715: ST_TO_ADDR
// if Crawls ( un ) then
60716: LD_VAR 0 2
60720: PPUSH
60721: CALL_OW 318
60725: IFFALSE 60736
// ComWalk ( un ) ;
60727: LD_VAR 0 2
60731: PPUSH
60732: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60736: LD_VAR 0 2
60740: PPUSH
60741: LD_INT 8
60743: PPUSH
60744: CALL_OW 336
// end ;
60748: PPOPN 3
60750: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
60751: LD_EXP 29
60755: PUSH
60756: LD_EXP 73
60760: AND
60761: IFFALSE 60905
60763: GO 60765
60765: DISABLE
60766: LD_INT 0
60768: PPUSH
60769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
60770: LD_ADDR_VAR 0 2
60774: PUSH
60775: LD_INT 22
60777: PUSH
60778: LD_OWVAR 2
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 21
60789: PUSH
60790: LD_INT 2
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 2
60799: PUSH
60800: LD_INT 34
60802: PUSH
60803: LD_INT 12
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 34
60812: PUSH
60813: LD_INT 51
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 34
60822: PUSH
60823: LD_INT 32
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: LIST
60840: PPUSH
60841: CALL_OW 69
60845: ST_TO_ADDR
// if not tmp then
60846: LD_VAR 0 2
60850: NOT
60851: IFFALSE 60855
// exit ;
60853: GO 60905
// for i in tmp do
60855: LD_ADDR_VAR 0 1
60859: PUSH
60860: LD_VAR 0 2
60864: PUSH
60865: FOR_IN
60866: IFFALSE 60903
// if GetCargo ( i , mat_artifact ) = 0 then
60868: LD_VAR 0 1
60872: PPUSH
60873: LD_INT 4
60875: PPUSH
60876: CALL_OW 289
60880: PUSH
60881: LD_INT 0
60883: EQUAL
60884: IFFALSE 60901
// SetCargo ( i , mat_siberit , 100 ) ;
60886: LD_VAR 0 1
60890: PPUSH
60891: LD_INT 3
60893: PPUSH
60894: LD_INT 100
60896: PPUSH
60897: CALL_OW 290
60901: GO 60865
60903: POP
60904: POP
// end ;
60905: PPOPN 2
60907: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
60908: LD_EXP 29
60912: PUSH
60913: LD_EXP 74
60917: AND
60918: IFFALSE 61101
60920: GO 60922
60922: DISABLE
60923: LD_INT 0
60925: PPUSH
60926: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60927: LD_ADDR_VAR 0 2
60931: PUSH
60932: LD_INT 22
60934: PUSH
60935: LD_OWVAR 2
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PPUSH
60944: CALL_OW 69
60948: ST_TO_ADDR
// if not tmp then
60949: LD_VAR 0 2
60953: NOT
60954: IFFALSE 60958
// exit ;
60956: GO 61101
// for i := 1 to 2 do
60958: LD_ADDR_VAR 0 1
60962: PUSH
60963: DOUBLE
60964: LD_INT 1
60966: DEC
60967: ST_TO_ADDR
60968: LD_INT 2
60970: PUSH
60971: FOR_TO
60972: IFFALSE 61099
// begin uc_side := your_side ;
60974: LD_ADDR_OWVAR 20
60978: PUSH
60979: LD_OWVAR 2
60983: ST_TO_ADDR
// uc_nation := nation_american ;
60984: LD_ADDR_OWVAR 21
60988: PUSH
60989: LD_INT 1
60991: ST_TO_ADDR
// vc_chassis := us_morphling ;
60992: LD_ADDR_OWVAR 37
60996: PUSH
60997: LD_INT 5
60999: ST_TO_ADDR
// vc_engine := engine_siberite ;
61000: LD_ADDR_OWVAR 39
61004: PUSH
61005: LD_INT 3
61007: ST_TO_ADDR
// vc_control := control_computer ;
61008: LD_ADDR_OWVAR 38
61012: PUSH
61013: LD_INT 3
61015: ST_TO_ADDR
// vc_weapon := us_double_laser ;
61016: LD_ADDR_OWVAR 40
61020: PUSH
61021: LD_INT 10
61023: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
61024: LD_VAR 0 2
61028: PUSH
61029: LD_INT 1
61031: ARRAY
61032: PPUSH
61033: CALL_OW 310
61037: NOT
61038: IFFALSE 61085
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
61040: CALL_OW 45
61044: PPUSH
61045: LD_VAR 0 2
61049: PUSH
61050: LD_INT 1
61052: ARRAY
61053: PPUSH
61054: CALL_OW 250
61058: PPUSH
61059: LD_VAR 0 2
61063: PUSH
61064: LD_INT 1
61066: ARRAY
61067: PPUSH
61068: CALL_OW 251
61072: PPUSH
61073: LD_INT 12
61075: PPUSH
61076: LD_INT 1
61078: PPUSH
61079: CALL_OW 50
61083: GO 61097
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
61085: CALL_OW 45
61089: PPUSH
61090: LD_INT 1
61092: PPUSH
61093: CALL_OW 51
// end ;
61097: GO 60971
61099: POP
61100: POP
// end ;
61101: PPOPN 2
61103: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
61104: LD_EXP 29
61108: PUSH
61109: LD_EXP 75
61113: AND
61114: IFFALSE 61336
61116: GO 61118
61118: DISABLE
61119: LD_INT 0
61121: PPUSH
61122: PPUSH
61123: PPUSH
61124: PPUSH
61125: PPUSH
61126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61127: LD_ADDR_VAR 0 6
61131: PUSH
61132: LD_INT 22
61134: PUSH
61135: LD_OWVAR 2
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 21
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 3
61156: PUSH
61157: LD_INT 23
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: LIST
61175: PPUSH
61176: CALL_OW 69
61180: ST_TO_ADDR
// if not tmp then
61181: LD_VAR 0 6
61185: NOT
61186: IFFALSE 61190
// exit ;
61188: GO 61336
// s1 := rand ( 1 , 4 ) ;
61190: LD_ADDR_VAR 0 2
61194: PUSH
61195: LD_INT 1
61197: PPUSH
61198: LD_INT 4
61200: PPUSH
61201: CALL_OW 12
61205: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
61206: LD_ADDR_VAR 0 4
61210: PUSH
61211: LD_VAR 0 6
61215: PUSH
61216: LD_INT 1
61218: ARRAY
61219: PPUSH
61220: LD_VAR 0 2
61224: PPUSH
61225: CALL_OW 259
61229: ST_TO_ADDR
// if s1 = 1 then
61230: LD_VAR 0 2
61234: PUSH
61235: LD_INT 1
61237: EQUAL
61238: IFFALSE 61258
// s2 := rand ( 2 , 4 ) else
61240: LD_ADDR_VAR 0 3
61244: PUSH
61245: LD_INT 2
61247: PPUSH
61248: LD_INT 4
61250: PPUSH
61251: CALL_OW 12
61255: ST_TO_ADDR
61256: GO 61266
// s2 := 1 ;
61258: LD_ADDR_VAR 0 3
61262: PUSH
61263: LD_INT 1
61265: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
61266: LD_ADDR_VAR 0 5
61270: PUSH
61271: LD_VAR 0 6
61275: PUSH
61276: LD_INT 1
61278: ARRAY
61279: PPUSH
61280: LD_VAR 0 3
61284: PPUSH
61285: CALL_OW 259
61289: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61290: LD_VAR 0 6
61294: PUSH
61295: LD_INT 1
61297: ARRAY
61298: PPUSH
61299: LD_VAR 0 2
61303: PPUSH
61304: LD_VAR 0 5
61308: PPUSH
61309: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
61313: LD_VAR 0 6
61317: PUSH
61318: LD_INT 1
61320: ARRAY
61321: PPUSH
61322: LD_VAR 0 3
61326: PPUSH
61327: LD_VAR 0 4
61331: PPUSH
61332: CALL_OW 237
// end ;
61336: PPOPN 6
61338: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
61339: LD_EXP 29
61343: PUSH
61344: LD_EXP 76
61348: AND
61349: IFFALSE 61428
61351: GO 61353
61353: DISABLE
61354: LD_INT 0
61356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
61357: LD_ADDR_VAR 0 1
61361: PUSH
61362: LD_INT 22
61364: PUSH
61365: LD_OWVAR 2
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 30
61376: PUSH
61377: LD_INT 3
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PPUSH
61388: CALL_OW 69
61392: ST_TO_ADDR
// if not tmp then
61393: LD_VAR 0 1
61397: NOT
61398: IFFALSE 61402
// exit ;
61400: GO 61428
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61402: LD_VAR 0 1
61406: PUSH
61407: LD_INT 1
61409: PPUSH
61410: LD_VAR 0 1
61414: PPUSH
61415: CALL_OW 12
61419: ARRAY
61420: PPUSH
61421: LD_INT 1
61423: PPUSH
61424: CALL_OW 234
// end ;
61428: PPOPN 1
61430: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
61431: LD_EXP 29
61435: PUSH
61436: LD_EXP 77
61440: AND
61441: IFFALSE 61553
61443: GO 61445
61445: DISABLE
61446: LD_INT 0
61448: PPUSH
61449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
61450: LD_ADDR_VAR 0 2
61454: PUSH
61455: LD_INT 22
61457: PUSH
61458: LD_OWVAR 2
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 2
61469: PUSH
61470: LD_INT 30
61472: PUSH
61473: LD_INT 27
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 30
61482: PUSH
61483: LD_INT 26
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 30
61492: PUSH
61493: LD_INT 28
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PPUSH
61510: CALL_OW 69
61514: ST_TO_ADDR
// if not tmp then
61515: LD_VAR 0 2
61519: NOT
61520: IFFALSE 61524
// exit ;
61522: GO 61553
// for i in tmp do
61524: LD_ADDR_VAR 0 1
61528: PUSH
61529: LD_VAR 0 2
61533: PUSH
61534: FOR_IN
61535: IFFALSE 61551
// SetLives ( i , 1 ) ;
61537: LD_VAR 0 1
61541: PPUSH
61542: LD_INT 1
61544: PPUSH
61545: CALL_OW 234
61549: GO 61534
61551: POP
61552: POP
// end ;
61553: PPOPN 2
61555: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
61556: LD_EXP 29
61560: PUSH
61561: LD_EXP 78
61565: AND
61566: IFFALSE 61853
61568: GO 61570
61570: DISABLE
61571: LD_INT 0
61573: PPUSH
61574: PPUSH
61575: PPUSH
// begin i := rand ( 1 , 7 ) ;
61576: LD_ADDR_VAR 0 1
61580: PUSH
61581: LD_INT 1
61583: PPUSH
61584: LD_INT 7
61586: PPUSH
61587: CALL_OW 12
61591: ST_TO_ADDR
// case i of 1 :
61592: LD_VAR 0 1
61596: PUSH
61597: LD_INT 1
61599: DOUBLE
61600: EQUAL
61601: IFTRUE 61605
61603: GO 61615
61605: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
61606: LD_STRING earthquake(getX(game), 0, 32)
61608: PPUSH
61609: CALL_OW 559
61613: GO 61853
61615: LD_INT 2
61617: DOUBLE
61618: EQUAL
61619: IFTRUE 61623
61621: GO 61637
61623: POP
// begin ToLua ( displayStucuk(); ) ;
61624: LD_STRING displayStucuk();
61626: PPUSH
61627: CALL_OW 559
// ResetFog ;
61631: CALL_OW 335
// end ; 3 :
61635: GO 61853
61637: LD_INT 3
61639: DOUBLE
61640: EQUAL
61641: IFTRUE 61645
61643: GO 61749
61645: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61646: LD_ADDR_VAR 0 2
61650: PUSH
61651: LD_INT 22
61653: PUSH
61654: LD_OWVAR 2
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 25
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PPUSH
61677: CALL_OW 69
61681: ST_TO_ADDR
// if not tmp then
61682: LD_VAR 0 2
61686: NOT
61687: IFFALSE 61691
// exit ;
61689: GO 61853
// un := tmp [ rand ( 1 , tmp ) ] ;
61691: LD_ADDR_VAR 0 3
61695: PUSH
61696: LD_VAR 0 2
61700: PUSH
61701: LD_INT 1
61703: PPUSH
61704: LD_VAR 0 2
61708: PPUSH
61709: CALL_OW 12
61713: ARRAY
61714: ST_TO_ADDR
// if Crawls ( un ) then
61715: LD_VAR 0 3
61719: PPUSH
61720: CALL_OW 318
61724: IFFALSE 61735
// ComWalk ( un ) ;
61726: LD_VAR 0 3
61730: PPUSH
61731: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61735: LD_VAR 0 3
61739: PPUSH
61740: LD_INT 8
61742: PPUSH
61743: CALL_OW 336
// end ; 4 :
61747: GO 61853
61749: LD_INT 4
61751: DOUBLE
61752: EQUAL
61753: IFTRUE 61757
61755: GO 61831
61757: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61758: LD_ADDR_VAR 0 2
61762: PUSH
61763: LD_INT 22
61765: PUSH
61766: LD_OWVAR 2
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 30
61777: PUSH
61778: LD_INT 29
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PPUSH
61789: CALL_OW 69
61793: ST_TO_ADDR
// if not tmp then
61794: LD_VAR 0 2
61798: NOT
61799: IFFALSE 61803
// exit ;
61801: GO 61853
// CenterNowOnUnits ( tmp [ 1 ] ) ;
61803: LD_VAR 0 2
61807: PUSH
61808: LD_INT 1
61810: ARRAY
61811: PPUSH
61812: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
61816: LD_VAR 0 2
61820: PUSH
61821: LD_INT 1
61823: ARRAY
61824: PPUSH
61825: CALL_OW 65
// end ; 5 .. 7 :
61829: GO 61853
61831: LD_INT 5
61833: DOUBLE
61834: GREATEREQUAL
61835: IFFALSE 61843
61837: LD_INT 7
61839: DOUBLE
61840: LESSEQUAL
61841: IFTRUE 61845
61843: GO 61852
61845: POP
// StreamSibBomb ; end ;
61846: CALL 58090 0 0
61850: GO 61853
61852: POP
// end ;
61853: PPOPN 3
61855: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
61856: LD_EXP 29
61860: PUSH
61861: LD_EXP 79
61865: AND
61866: IFFALSE 62022
61868: GO 61870
61870: DISABLE
61871: LD_INT 0
61873: PPUSH
61874: PPUSH
61875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
61876: LD_ADDR_VAR 0 2
61880: PUSH
61881: LD_INT 81
61883: PUSH
61884: LD_OWVAR 2
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 2
61895: PUSH
61896: LD_INT 21
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 21
61908: PUSH
61909: LD_INT 2
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: LIST
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PPUSH
61925: CALL_OW 69
61929: ST_TO_ADDR
// if not tmp then
61930: LD_VAR 0 2
61934: NOT
61935: IFFALSE 61939
// exit ;
61937: GO 62022
// p := 0 ;
61939: LD_ADDR_VAR 0 3
61943: PUSH
61944: LD_INT 0
61946: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61947: LD_INT 35
61949: PPUSH
61950: CALL_OW 67
// p := p + 1 ;
61954: LD_ADDR_VAR 0 3
61958: PUSH
61959: LD_VAR 0 3
61963: PUSH
61964: LD_INT 1
61966: PLUS
61967: ST_TO_ADDR
// for i in tmp do
61968: LD_ADDR_VAR 0 1
61972: PUSH
61973: LD_VAR 0 2
61977: PUSH
61978: FOR_IN
61979: IFFALSE 62010
// if GetLives ( i ) < 1000 then
61981: LD_VAR 0 1
61985: PPUSH
61986: CALL_OW 256
61990: PUSH
61991: LD_INT 1000
61993: LESS
61994: IFFALSE 62008
// SetLives ( i , 1000 ) ;
61996: LD_VAR 0 1
62000: PPUSH
62001: LD_INT 1000
62003: PPUSH
62004: CALL_OW 234
62008: GO 61978
62010: POP
62011: POP
// until p > 20 ;
62012: LD_VAR 0 3
62016: PUSH
62017: LD_INT 20
62019: GREATER
62020: IFFALSE 61947
// end ;
62022: PPOPN 3
62024: END
// every 0 0$1 trigger StreamModeActive and sTime do
62025: LD_EXP 29
62029: PUSH
62030: LD_EXP 80
62034: AND
62035: IFFALSE 62070
62037: GO 62039
62039: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
62040: LD_INT 28
62042: PPUSH
62043: LD_OWVAR 2
62047: PPUSH
62048: LD_INT 2
62050: PPUSH
62051: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
62055: LD_INT 30
62057: PPUSH
62058: LD_OWVAR 2
62062: PPUSH
62063: LD_INT 2
62065: PPUSH
62066: CALL_OW 322
// end ;
62070: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
62071: LD_EXP 29
62075: PUSH
62076: LD_EXP 81
62080: AND
62081: IFFALSE 62202
62083: GO 62085
62085: DISABLE
62086: LD_INT 0
62088: PPUSH
62089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62090: LD_ADDR_VAR 0 2
62094: PUSH
62095: LD_INT 22
62097: PUSH
62098: LD_OWVAR 2
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 21
62109: PUSH
62110: LD_INT 1
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 3
62119: PUSH
62120: LD_INT 23
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: LIST
62138: PPUSH
62139: CALL_OW 69
62143: ST_TO_ADDR
// if not tmp then
62144: LD_VAR 0 2
62148: NOT
62149: IFFALSE 62153
// exit ;
62151: GO 62202
// for i in tmp do
62153: LD_ADDR_VAR 0 1
62157: PUSH
62158: LD_VAR 0 2
62162: PUSH
62163: FOR_IN
62164: IFFALSE 62200
// begin if Crawls ( i ) then
62166: LD_VAR 0 1
62170: PPUSH
62171: CALL_OW 318
62175: IFFALSE 62186
// ComWalk ( i ) ;
62177: LD_VAR 0 1
62181: PPUSH
62182: CALL_OW 138
// SetClass ( i , 2 ) ;
62186: LD_VAR 0 1
62190: PPUSH
62191: LD_INT 2
62193: PPUSH
62194: CALL_OW 336
// end ;
62198: GO 62163
62200: POP
62201: POP
// end ;
62202: PPOPN 2
62204: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
62205: LD_EXP 29
62209: PUSH
62210: LD_EXP 82
62214: AND
62215: IFFALSE 62503
62217: GO 62219
62219: DISABLE
62220: LD_INT 0
62222: PPUSH
62223: PPUSH
62224: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
62225: LD_OWVAR 2
62229: PPUSH
62230: LD_INT 9
62232: PPUSH
62233: LD_INT 1
62235: PPUSH
62236: LD_INT 1
62238: PPUSH
62239: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
62243: LD_INT 9
62245: PPUSH
62246: LD_OWVAR 2
62250: PPUSH
62251: CALL_OW 343
// uc_side := 9 ;
62255: LD_ADDR_OWVAR 20
62259: PUSH
62260: LD_INT 9
62262: ST_TO_ADDR
// uc_nation := 2 ;
62263: LD_ADDR_OWVAR 21
62267: PUSH
62268: LD_INT 2
62270: ST_TO_ADDR
// hc_name := Dark Warrior ;
62271: LD_ADDR_OWVAR 26
62275: PUSH
62276: LD_STRING Dark Warrior
62278: ST_TO_ADDR
// hc_gallery :=  ;
62279: LD_ADDR_OWVAR 33
62283: PUSH
62284: LD_STRING 
62286: ST_TO_ADDR
// hc_noskilllimit := true ;
62287: LD_ADDR_OWVAR 76
62291: PUSH
62292: LD_INT 1
62294: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
62295: LD_ADDR_OWVAR 31
62299: PUSH
62300: LD_INT 30
62302: PUSH
62303: LD_INT 30
62305: PUSH
62306: LD_INT 30
62308: PUSH
62309: LD_INT 30
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: ST_TO_ADDR
// un := CreateHuman ;
62318: LD_ADDR_VAR 0 3
62322: PUSH
62323: CALL_OW 44
62327: ST_TO_ADDR
// hc_noskilllimit := false ;
62328: LD_ADDR_OWVAR 76
62332: PUSH
62333: LD_INT 0
62335: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62336: LD_VAR 0 3
62340: PPUSH
62341: LD_INT 1
62343: PPUSH
62344: CALL_OW 51
// ToLua ( playRanger() ) ;
62348: LD_STRING playRanger()
62350: PPUSH
62351: CALL_OW 559
// p := 0 ;
62355: LD_ADDR_VAR 0 2
62359: PUSH
62360: LD_INT 0
62362: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62363: LD_INT 35
62365: PPUSH
62366: CALL_OW 67
// p := p + 1 ;
62370: LD_ADDR_VAR 0 2
62374: PUSH
62375: LD_VAR 0 2
62379: PUSH
62380: LD_INT 1
62382: PLUS
62383: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
62384: LD_VAR 0 3
62388: PPUSH
62389: CALL_OW 256
62393: PUSH
62394: LD_INT 1000
62396: LESS
62397: IFFALSE 62411
// SetLives ( un , 1000 ) ;
62399: LD_VAR 0 3
62403: PPUSH
62404: LD_INT 1000
62406: PPUSH
62407: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
62411: LD_VAR 0 3
62415: PPUSH
62416: LD_INT 81
62418: PUSH
62419: LD_OWVAR 2
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 91
62430: PUSH
62431: LD_VAR 0 3
62435: PUSH
62436: LD_INT 30
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: LIST
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PPUSH
62448: CALL_OW 69
62452: PPUSH
62453: LD_VAR 0 3
62457: PPUSH
62458: CALL_OW 74
62462: PPUSH
62463: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
62467: LD_VAR 0 2
62471: PUSH
62472: LD_INT 80
62474: GREATER
62475: PUSH
62476: LD_VAR 0 3
62480: PPUSH
62481: CALL_OW 301
62485: OR
62486: IFFALSE 62363
// if un then
62488: LD_VAR 0 3
62492: IFFALSE 62503
// RemoveUnit ( un ) ;
62494: LD_VAR 0 3
62498: PPUSH
62499: CALL_OW 64
// end ;
62503: PPOPN 3
62505: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
62506: LD_EXP 83
62510: IFFALSE 62626
62512: GO 62514
62514: DISABLE
62515: LD_INT 0
62517: PPUSH
62518: PPUSH
62519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62520: LD_ADDR_VAR 0 2
62524: PUSH
62525: LD_INT 81
62527: PUSH
62528: LD_OWVAR 2
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 21
62539: PUSH
62540: LD_INT 1
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PPUSH
62551: CALL_OW 69
62555: ST_TO_ADDR
// ToLua ( playComputer() ) ;
62556: LD_STRING playComputer()
62558: PPUSH
62559: CALL_OW 559
// if not tmp then
62563: LD_VAR 0 2
62567: NOT
62568: IFFALSE 62572
// exit ;
62570: GO 62626
// for i in tmp do
62572: LD_ADDR_VAR 0 1
62576: PUSH
62577: LD_VAR 0 2
62581: PUSH
62582: FOR_IN
62583: IFFALSE 62624
// for j := 1 to 4 do
62585: LD_ADDR_VAR 0 3
62589: PUSH
62590: DOUBLE
62591: LD_INT 1
62593: DEC
62594: ST_TO_ADDR
62595: LD_INT 4
62597: PUSH
62598: FOR_TO
62599: IFFALSE 62620
// SetSkill ( i , j , 10 ) ;
62601: LD_VAR 0 1
62605: PPUSH
62606: LD_VAR 0 3
62610: PPUSH
62611: LD_INT 10
62613: PPUSH
62614: CALL_OW 237
62618: GO 62598
62620: POP
62621: POP
62622: GO 62582
62624: POP
62625: POP
// end ;
62626: PPOPN 3
62628: END
// every 0 0$1 trigger s30 do var i , tmp ;
62629: LD_EXP 84
62633: IFFALSE 62702
62635: GO 62637
62637: DISABLE
62638: LD_INT 0
62640: PPUSH
62641: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62642: LD_ADDR_VAR 0 2
62646: PUSH
62647: LD_INT 22
62649: PUSH
62650: LD_OWVAR 2
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PPUSH
62659: CALL_OW 69
62663: ST_TO_ADDR
// if not tmp then
62664: LD_VAR 0 2
62668: NOT
62669: IFFALSE 62673
// exit ;
62671: GO 62702
// for i in tmp do
62673: LD_ADDR_VAR 0 1
62677: PUSH
62678: LD_VAR 0 2
62682: PUSH
62683: FOR_IN
62684: IFFALSE 62700
// SetLives ( i , 300 ) ;
62686: LD_VAR 0 1
62690: PPUSH
62691: LD_INT 300
62693: PPUSH
62694: CALL_OW 234
62698: GO 62683
62700: POP
62701: POP
// end ;
62702: PPOPN 2
62704: END
// every 0 0$1 trigger s60 do var i , tmp ;
62705: LD_EXP 85
62709: IFFALSE 62778
62711: GO 62713
62713: DISABLE
62714: LD_INT 0
62716: PPUSH
62717: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62718: LD_ADDR_VAR 0 2
62722: PUSH
62723: LD_INT 22
62725: PUSH
62726: LD_OWVAR 2
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PPUSH
62735: CALL_OW 69
62739: ST_TO_ADDR
// if not tmp then
62740: LD_VAR 0 2
62744: NOT
62745: IFFALSE 62749
// exit ;
62747: GO 62778
// for i in tmp do
62749: LD_ADDR_VAR 0 1
62753: PUSH
62754: LD_VAR 0 2
62758: PUSH
62759: FOR_IN
62760: IFFALSE 62776
// SetLives ( i , 600 ) ;
62762: LD_VAR 0 1
62766: PPUSH
62767: LD_INT 600
62769: PPUSH
62770: CALL_OW 234
62774: GO 62759
62776: POP
62777: POP
// end ;
62778: PPOPN 2
62780: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62781: LD_INT 0
62783: PPUSH
// case cmd of 301 :
62784: LD_VAR 0 1
62788: PUSH
62789: LD_INT 301
62791: DOUBLE
62792: EQUAL
62793: IFTRUE 62797
62795: GO 62829
62797: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
62798: LD_VAR 0 6
62802: PPUSH
62803: LD_VAR 0 7
62807: PPUSH
62808: LD_VAR 0 8
62812: PPUSH
62813: LD_VAR 0 4
62817: PPUSH
62818: LD_VAR 0 5
62822: PPUSH
62823: CALL 64030 0 5
62827: GO 62950
62829: LD_INT 302
62831: DOUBLE
62832: EQUAL
62833: IFTRUE 62837
62835: GO 62874
62837: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
62838: LD_VAR 0 6
62842: PPUSH
62843: LD_VAR 0 7
62847: PPUSH
62848: LD_VAR 0 8
62852: PPUSH
62853: LD_VAR 0 9
62857: PPUSH
62858: LD_VAR 0 4
62862: PPUSH
62863: LD_VAR 0 5
62867: PPUSH
62868: CALL 64121 0 6
62872: GO 62950
62874: LD_INT 303
62876: DOUBLE
62877: EQUAL
62878: IFTRUE 62882
62880: GO 62919
62882: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
62883: LD_VAR 0 6
62887: PPUSH
62888: LD_VAR 0 7
62892: PPUSH
62893: LD_VAR 0 8
62897: PPUSH
62898: LD_VAR 0 9
62902: PPUSH
62903: LD_VAR 0 4
62907: PPUSH
62908: LD_VAR 0 5
62912: PPUSH
62913: CALL 62955 0 6
62917: GO 62950
62919: LD_INT 304
62921: DOUBLE
62922: EQUAL
62923: IFTRUE 62927
62925: GO 62949
62927: POP
// hHackTeleport ( unit , x , y ) ; end ;
62928: LD_VAR 0 2
62932: PPUSH
62933: LD_VAR 0 4
62937: PPUSH
62938: LD_VAR 0 5
62942: PPUSH
62943: CALL 64714 0 3
62947: GO 62950
62949: POP
// end ;
62950: LD_VAR 0 12
62954: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
62955: LD_INT 0
62957: PPUSH
62958: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
62959: LD_VAR 0 1
62963: PUSH
62964: LD_INT 1
62966: LESS
62967: PUSH
62968: LD_VAR 0 1
62972: PUSH
62973: LD_INT 3
62975: GREATER
62976: OR
62977: PUSH
62978: LD_VAR 0 5
62982: PPUSH
62983: LD_VAR 0 6
62987: PPUSH
62988: CALL_OW 428
62992: OR
62993: IFFALSE 62997
// exit ;
62995: GO 63717
// uc_side := your_side ;
62997: LD_ADDR_OWVAR 20
63001: PUSH
63002: LD_OWVAR 2
63006: ST_TO_ADDR
// uc_nation := nation ;
63007: LD_ADDR_OWVAR 21
63011: PUSH
63012: LD_VAR 0 1
63016: ST_TO_ADDR
// bc_level = 1 ;
63017: LD_ADDR_OWVAR 43
63021: PUSH
63022: LD_INT 1
63024: ST_TO_ADDR
// case btype of 1 :
63025: LD_VAR 0 2
63029: PUSH
63030: LD_INT 1
63032: DOUBLE
63033: EQUAL
63034: IFTRUE 63038
63036: GO 63049
63038: POP
// bc_type := b_depot ; 2 :
63039: LD_ADDR_OWVAR 42
63043: PUSH
63044: LD_INT 0
63046: ST_TO_ADDR
63047: GO 63661
63049: LD_INT 2
63051: DOUBLE
63052: EQUAL
63053: IFTRUE 63057
63055: GO 63068
63057: POP
// bc_type := b_warehouse ; 3 :
63058: LD_ADDR_OWVAR 42
63062: PUSH
63063: LD_INT 1
63065: ST_TO_ADDR
63066: GO 63661
63068: LD_INT 3
63070: DOUBLE
63071: EQUAL
63072: IFTRUE 63076
63074: GO 63087
63076: POP
// bc_type := b_lab ; 4 .. 9 :
63077: LD_ADDR_OWVAR 42
63081: PUSH
63082: LD_INT 6
63084: ST_TO_ADDR
63085: GO 63661
63087: LD_INT 4
63089: DOUBLE
63090: GREATEREQUAL
63091: IFFALSE 63099
63093: LD_INT 9
63095: DOUBLE
63096: LESSEQUAL
63097: IFTRUE 63101
63099: GO 63153
63101: POP
// begin bc_type := b_lab_half ;
63102: LD_ADDR_OWVAR 42
63106: PUSH
63107: LD_INT 7
63109: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
63110: LD_ADDR_OWVAR 44
63114: PUSH
63115: LD_INT 10
63117: PUSH
63118: LD_INT 11
63120: PUSH
63121: LD_INT 12
63123: PUSH
63124: LD_INT 15
63126: PUSH
63127: LD_INT 14
63129: PUSH
63130: LD_INT 13
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: PUSH
63141: LD_VAR 0 2
63145: PUSH
63146: LD_INT 3
63148: MINUS
63149: ARRAY
63150: ST_TO_ADDR
// end ; 10 .. 13 :
63151: GO 63661
63153: LD_INT 10
63155: DOUBLE
63156: GREATEREQUAL
63157: IFFALSE 63165
63159: LD_INT 13
63161: DOUBLE
63162: LESSEQUAL
63163: IFTRUE 63167
63165: GO 63244
63167: POP
// begin bc_type := b_lab_full ;
63168: LD_ADDR_OWVAR 42
63172: PUSH
63173: LD_INT 8
63175: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
63176: LD_ADDR_OWVAR 44
63180: PUSH
63181: LD_INT 10
63183: PUSH
63184: LD_INT 12
63186: PUSH
63187: LD_INT 14
63189: PUSH
63190: LD_INT 13
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: PUSH
63199: LD_VAR 0 2
63203: PUSH
63204: LD_INT 9
63206: MINUS
63207: ARRAY
63208: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
63209: LD_ADDR_OWVAR 45
63213: PUSH
63214: LD_INT 11
63216: PUSH
63217: LD_INT 15
63219: PUSH
63220: LD_INT 12
63222: PUSH
63223: LD_INT 15
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: PUSH
63232: LD_VAR 0 2
63236: PUSH
63237: LD_INT 9
63239: MINUS
63240: ARRAY
63241: ST_TO_ADDR
// end ; 14 :
63242: GO 63661
63244: LD_INT 14
63246: DOUBLE
63247: EQUAL
63248: IFTRUE 63252
63250: GO 63263
63252: POP
// bc_type := b_workshop ; 15 :
63253: LD_ADDR_OWVAR 42
63257: PUSH
63258: LD_INT 2
63260: ST_TO_ADDR
63261: GO 63661
63263: LD_INT 15
63265: DOUBLE
63266: EQUAL
63267: IFTRUE 63271
63269: GO 63282
63271: POP
// bc_type := b_factory ; 16 :
63272: LD_ADDR_OWVAR 42
63276: PUSH
63277: LD_INT 3
63279: ST_TO_ADDR
63280: GO 63661
63282: LD_INT 16
63284: DOUBLE
63285: EQUAL
63286: IFTRUE 63290
63288: GO 63301
63290: POP
// bc_type := b_ext_gun ; 17 :
63291: LD_ADDR_OWVAR 42
63295: PUSH
63296: LD_INT 17
63298: ST_TO_ADDR
63299: GO 63661
63301: LD_INT 17
63303: DOUBLE
63304: EQUAL
63305: IFTRUE 63309
63307: GO 63337
63309: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
63310: LD_ADDR_OWVAR 42
63314: PUSH
63315: LD_INT 19
63317: PUSH
63318: LD_INT 23
63320: PUSH
63321: LD_INT 19
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: LIST
63328: PUSH
63329: LD_VAR 0 1
63333: ARRAY
63334: ST_TO_ADDR
63335: GO 63661
63337: LD_INT 18
63339: DOUBLE
63340: EQUAL
63341: IFTRUE 63345
63343: GO 63356
63345: POP
// bc_type := b_ext_radar ; 19 :
63346: LD_ADDR_OWVAR 42
63350: PUSH
63351: LD_INT 20
63353: ST_TO_ADDR
63354: GO 63661
63356: LD_INT 19
63358: DOUBLE
63359: EQUAL
63360: IFTRUE 63364
63362: GO 63375
63364: POP
// bc_type := b_ext_radio ; 20 :
63365: LD_ADDR_OWVAR 42
63369: PUSH
63370: LD_INT 22
63372: ST_TO_ADDR
63373: GO 63661
63375: LD_INT 20
63377: DOUBLE
63378: EQUAL
63379: IFTRUE 63383
63381: GO 63394
63383: POP
// bc_type := b_ext_siberium ; 21 :
63384: LD_ADDR_OWVAR 42
63388: PUSH
63389: LD_INT 21
63391: ST_TO_ADDR
63392: GO 63661
63394: LD_INT 21
63396: DOUBLE
63397: EQUAL
63398: IFTRUE 63402
63400: GO 63413
63402: POP
// bc_type := b_ext_computer ; 22 :
63403: LD_ADDR_OWVAR 42
63407: PUSH
63408: LD_INT 24
63410: ST_TO_ADDR
63411: GO 63661
63413: LD_INT 22
63415: DOUBLE
63416: EQUAL
63417: IFTRUE 63421
63419: GO 63432
63421: POP
// bc_type := b_ext_track ; 23 :
63422: LD_ADDR_OWVAR 42
63426: PUSH
63427: LD_INT 16
63429: ST_TO_ADDR
63430: GO 63661
63432: LD_INT 23
63434: DOUBLE
63435: EQUAL
63436: IFTRUE 63440
63438: GO 63451
63440: POP
// bc_type := b_ext_laser ; 24 :
63441: LD_ADDR_OWVAR 42
63445: PUSH
63446: LD_INT 25
63448: ST_TO_ADDR
63449: GO 63661
63451: LD_INT 24
63453: DOUBLE
63454: EQUAL
63455: IFTRUE 63459
63457: GO 63470
63459: POP
// bc_type := b_control_tower ; 25 :
63460: LD_ADDR_OWVAR 42
63464: PUSH
63465: LD_INT 36
63467: ST_TO_ADDR
63468: GO 63661
63470: LD_INT 25
63472: DOUBLE
63473: EQUAL
63474: IFTRUE 63478
63476: GO 63489
63478: POP
// bc_type := b_breastwork ; 26 :
63479: LD_ADDR_OWVAR 42
63483: PUSH
63484: LD_INT 31
63486: ST_TO_ADDR
63487: GO 63661
63489: LD_INT 26
63491: DOUBLE
63492: EQUAL
63493: IFTRUE 63497
63495: GO 63508
63497: POP
// bc_type := b_bunker ; 27 :
63498: LD_ADDR_OWVAR 42
63502: PUSH
63503: LD_INT 32
63505: ST_TO_ADDR
63506: GO 63661
63508: LD_INT 27
63510: DOUBLE
63511: EQUAL
63512: IFTRUE 63516
63514: GO 63527
63516: POP
// bc_type := b_turret ; 28 :
63517: LD_ADDR_OWVAR 42
63521: PUSH
63522: LD_INT 33
63524: ST_TO_ADDR
63525: GO 63661
63527: LD_INT 28
63529: DOUBLE
63530: EQUAL
63531: IFTRUE 63535
63533: GO 63546
63535: POP
// bc_type := b_armoury ; 29 :
63536: LD_ADDR_OWVAR 42
63540: PUSH
63541: LD_INT 4
63543: ST_TO_ADDR
63544: GO 63661
63546: LD_INT 29
63548: DOUBLE
63549: EQUAL
63550: IFTRUE 63554
63552: GO 63565
63554: POP
// bc_type := b_barracks ; 30 :
63555: LD_ADDR_OWVAR 42
63559: PUSH
63560: LD_INT 5
63562: ST_TO_ADDR
63563: GO 63661
63565: LD_INT 30
63567: DOUBLE
63568: EQUAL
63569: IFTRUE 63573
63571: GO 63584
63573: POP
// bc_type := b_solar_power ; 31 :
63574: LD_ADDR_OWVAR 42
63578: PUSH
63579: LD_INT 27
63581: ST_TO_ADDR
63582: GO 63661
63584: LD_INT 31
63586: DOUBLE
63587: EQUAL
63588: IFTRUE 63592
63590: GO 63603
63592: POP
// bc_type := b_oil_power ; 32 :
63593: LD_ADDR_OWVAR 42
63597: PUSH
63598: LD_INT 26
63600: ST_TO_ADDR
63601: GO 63661
63603: LD_INT 32
63605: DOUBLE
63606: EQUAL
63607: IFTRUE 63611
63609: GO 63622
63611: POP
// bc_type := b_siberite_power ; 33 :
63612: LD_ADDR_OWVAR 42
63616: PUSH
63617: LD_INT 28
63619: ST_TO_ADDR
63620: GO 63661
63622: LD_INT 33
63624: DOUBLE
63625: EQUAL
63626: IFTRUE 63630
63628: GO 63641
63630: POP
// bc_type := b_oil_mine ; 34 :
63631: LD_ADDR_OWVAR 42
63635: PUSH
63636: LD_INT 29
63638: ST_TO_ADDR
63639: GO 63661
63641: LD_INT 34
63643: DOUBLE
63644: EQUAL
63645: IFTRUE 63649
63647: GO 63660
63649: POP
// bc_type := b_siberite_mine ; end ;
63650: LD_ADDR_OWVAR 42
63654: PUSH
63655: LD_INT 30
63657: ST_TO_ADDR
63658: GO 63661
63660: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
63661: LD_ADDR_VAR 0 8
63665: PUSH
63666: LD_VAR 0 5
63670: PPUSH
63671: LD_VAR 0 6
63675: PPUSH
63676: LD_VAR 0 3
63680: PPUSH
63681: CALL_OW 47
63685: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
63686: LD_OWVAR 42
63690: PUSH
63691: LD_INT 32
63693: PUSH
63694: LD_INT 33
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: IN
63701: IFFALSE 63717
// PlaceWeaponTurret ( b , weapon ) ;
63703: LD_VAR 0 8
63707: PPUSH
63708: LD_VAR 0 4
63712: PPUSH
63713: CALL_OW 431
// end ;
63717: LD_VAR 0 7
63721: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
63722: LD_INT 0
63724: PPUSH
63725: PPUSH
63726: PPUSH
63727: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63728: LD_ADDR_VAR 0 4
63732: PUSH
63733: LD_INT 22
63735: PUSH
63736: LD_OWVAR 2
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 2
63747: PUSH
63748: LD_INT 30
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 30
63760: PUSH
63761: LD_INT 1
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: LIST
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PPUSH
63777: CALL_OW 69
63781: ST_TO_ADDR
// if not tmp then
63782: LD_VAR 0 4
63786: NOT
63787: IFFALSE 63791
// exit ;
63789: GO 63850
// for i in tmp do
63791: LD_ADDR_VAR 0 2
63795: PUSH
63796: LD_VAR 0 4
63800: PUSH
63801: FOR_IN
63802: IFFALSE 63848
// for j = 1 to 3 do
63804: LD_ADDR_VAR 0 3
63808: PUSH
63809: DOUBLE
63810: LD_INT 1
63812: DEC
63813: ST_TO_ADDR
63814: LD_INT 3
63816: PUSH
63817: FOR_TO
63818: IFFALSE 63844
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
63820: LD_VAR 0 2
63824: PPUSH
63825: CALL_OW 274
63829: PPUSH
63830: LD_VAR 0 3
63834: PPUSH
63835: LD_INT 99999
63837: PPUSH
63838: CALL_OW 277
63842: GO 63817
63844: POP
63845: POP
63846: GO 63801
63848: POP
63849: POP
// end ;
63850: LD_VAR 0 1
63854: RET
// export function hHackSetLevel10 ; var i , j ; begin
63855: LD_INT 0
63857: PPUSH
63858: PPUSH
63859: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63860: LD_ADDR_VAR 0 2
63864: PUSH
63865: LD_INT 21
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PPUSH
63875: CALL_OW 69
63879: PUSH
63880: FOR_IN
63881: IFFALSE 63933
// if IsSelected ( i ) then
63883: LD_VAR 0 2
63887: PPUSH
63888: CALL_OW 306
63892: IFFALSE 63931
// begin for j := 1 to 4 do
63894: LD_ADDR_VAR 0 3
63898: PUSH
63899: DOUBLE
63900: LD_INT 1
63902: DEC
63903: ST_TO_ADDR
63904: LD_INT 4
63906: PUSH
63907: FOR_TO
63908: IFFALSE 63929
// SetSkill ( i , j , 10 ) ;
63910: LD_VAR 0 2
63914: PPUSH
63915: LD_VAR 0 3
63919: PPUSH
63920: LD_INT 10
63922: PPUSH
63923: CALL_OW 237
63927: GO 63907
63929: POP
63930: POP
// end ;
63931: GO 63880
63933: POP
63934: POP
// end ;
63935: LD_VAR 0 1
63939: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
63940: LD_INT 0
63942: PPUSH
63943: PPUSH
63944: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
63945: LD_ADDR_VAR 0 2
63949: PUSH
63950: LD_INT 22
63952: PUSH
63953: LD_OWVAR 2
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 21
63964: PUSH
63965: LD_INT 1
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PPUSH
63976: CALL_OW 69
63980: PUSH
63981: FOR_IN
63982: IFFALSE 64023
// begin for j := 1 to 4 do
63984: LD_ADDR_VAR 0 3
63988: PUSH
63989: DOUBLE
63990: LD_INT 1
63992: DEC
63993: ST_TO_ADDR
63994: LD_INT 4
63996: PUSH
63997: FOR_TO
63998: IFFALSE 64019
// SetSkill ( i , j , 10 ) ;
64000: LD_VAR 0 2
64004: PPUSH
64005: LD_VAR 0 3
64009: PPUSH
64010: LD_INT 10
64012: PPUSH
64013: CALL_OW 237
64017: GO 63997
64019: POP
64020: POP
// end ;
64021: GO 63981
64023: POP
64024: POP
// end ;
64025: LD_VAR 0 1
64029: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
64030: LD_INT 0
64032: PPUSH
// uc_side := your_side ;
64033: LD_ADDR_OWVAR 20
64037: PUSH
64038: LD_OWVAR 2
64042: ST_TO_ADDR
// uc_nation := nation ;
64043: LD_ADDR_OWVAR 21
64047: PUSH
64048: LD_VAR 0 1
64052: ST_TO_ADDR
// InitHc ;
64053: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
64057: LD_INT 0
64059: PPUSH
64060: LD_VAR 0 2
64064: PPUSH
64065: LD_VAR 0 3
64069: PPUSH
64070: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
64074: LD_VAR 0 4
64078: PPUSH
64079: LD_VAR 0 5
64083: PPUSH
64084: CALL_OW 428
64088: PUSH
64089: LD_INT 0
64091: EQUAL
64092: IFFALSE 64116
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
64094: CALL_OW 44
64098: PPUSH
64099: LD_VAR 0 4
64103: PPUSH
64104: LD_VAR 0 5
64108: PPUSH
64109: LD_INT 1
64111: PPUSH
64112: CALL_OW 48
// end ;
64116: LD_VAR 0 6
64120: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
64121: LD_INT 0
64123: PPUSH
64124: PPUSH
// uc_side := your_side ;
64125: LD_ADDR_OWVAR 20
64129: PUSH
64130: LD_OWVAR 2
64134: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
64135: LD_VAR 0 1
64139: PUSH
64140: LD_INT 1
64142: PUSH
64143: LD_INT 2
64145: PUSH
64146: LD_INT 3
64148: PUSH
64149: LD_INT 4
64151: PUSH
64152: LD_INT 5
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: IN
64162: IFFALSE 64174
// uc_nation := nation_american else
64164: LD_ADDR_OWVAR 21
64168: PUSH
64169: LD_INT 1
64171: ST_TO_ADDR
64172: GO 64217
// if chassis in [ 11 , 12 , 13 , 14 ] then
64174: LD_VAR 0 1
64178: PUSH
64179: LD_INT 11
64181: PUSH
64182: LD_INT 12
64184: PUSH
64185: LD_INT 13
64187: PUSH
64188: LD_INT 14
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: IN
64197: IFFALSE 64209
// uc_nation := nation_arabian else
64199: LD_ADDR_OWVAR 21
64203: PUSH
64204: LD_INT 2
64206: ST_TO_ADDR
64207: GO 64217
// uc_nation := nation_russian ;
64209: LD_ADDR_OWVAR 21
64213: PUSH
64214: LD_INT 3
64216: ST_TO_ADDR
// vc_chassis := chassis ;
64217: LD_ADDR_OWVAR 37
64221: PUSH
64222: LD_VAR 0 1
64226: ST_TO_ADDR
// vc_engine := engine ;
64227: LD_ADDR_OWVAR 39
64231: PUSH
64232: LD_VAR 0 2
64236: ST_TO_ADDR
// vc_control := control ;
64237: LD_ADDR_OWVAR 38
64241: PUSH
64242: LD_VAR 0 3
64246: ST_TO_ADDR
// vc_weapon := weapon ;
64247: LD_ADDR_OWVAR 40
64251: PUSH
64252: LD_VAR 0 4
64256: ST_TO_ADDR
// un := CreateVehicle ;
64257: LD_ADDR_VAR 0 8
64261: PUSH
64262: CALL_OW 45
64266: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
64267: LD_VAR 0 8
64271: PPUSH
64272: LD_INT 0
64274: PPUSH
64275: LD_INT 5
64277: PPUSH
64278: CALL_OW 12
64282: PPUSH
64283: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
64287: LD_VAR 0 8
64291: PPUSH
64292: LD_VAR 0 5
64296: PPUSH
64297: LD_VAR 0 6
64301: PPUSH
64302: LD_INT 1
64304: PPUSH
64305: CALL_OW 48
// end ;
64309: LD_VAR 0 7
64313: RET
// export hInvincible ; every 1 do
64314: GO 64316
64316: DISABLE
// hInvincible := [ ] ;
64317: LD_ADDR_EXP 86
64321: PUSH
64322: EMPTY
64323: ST_TO_ADDR
64324: END
// every 10 do var i ;
64325: GO 64327
64327: DISABLE
64328: LD_INT 0
64330: PPUSH
// begin enable ;
64331: ENABLE
// if not hInvincible then
64332: LD_EXP 86
64336: NOT
64337: IFFALSE 64341
// exit ;
64339: GO 64385
// for i in hInvincible do
64341: LD_ADDR_VAR 0 1
64345: PUSH
64346: LD_EXP 86
64350: PUSH
64351: FOR_IN
64352: IFFALSE 64383
// if GetLives ( i ) < 1000 then
64354: LD_VAR 0 1
64358: PPUSH
64359: CALL_OW 256
64363: PUSH
64364: LD_INT 1000
64366: LESS
64367: IFFALSE 64381
// SetLives ( i , 1000 ) ;
64369: LD_VAR 0 1
64373: PPUSH
64374: LD_INT 1000
64376: PPUSH
64377: CALL_OW 234
64381: GO 64351
64383: POP
64384: POP
// end ;
64385: PPOPN 1
64387: END
// export function hHackInvincible ; var i ; begin
64388: LD_INT 0
64390: PPUSH
64391: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
64392: LD_ADDR_VAR 0 2
64396: PUSH
64397: LD_INT 2
64399: PUSH
64400: LD_INT 21
64402: PUSH
64403: LD_INT 1
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 21
64412: PUSH
64413: LD_INT 2
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: LIST
64424: PPUSH
64425: CALL_OW 69
64429: PUSH
64430: FOR_IN
64431: IFFALSE 64492
// if IsSelected ( i ) then
64433: LD_VAR 0 2
64437: PPUSH
64438: CALL_OW 306
64442: IFFALSE 64490
// begin if i in hInvincible then
64444: LD_VAR 0 2
64448: PUSH
64449: LD_EXP 86
64453: IN
64454: IFFALSE 64474
// hInvincible := hInvincible diff i else
64456: LD_ADDR_EXP 86
64460: PUSH
64461: LD_EXP 86
64465: PUSH
64466: LD_VAR 0 2
64470: DIFF
64471: ST_TO_ADDR
64472: GO 64490
// hInvincible := hInvincible union i ;
64474: LD_ADDR_EXP 86
64478: PUSH
64479: LD_EXP 86
64483: PUSH
64484: LD_VAR 0 2
64488: UNION
64489: ST_TO_ADDR
// end ;
64490: GO 64430
64492: POP
64493: POP
// end ;
64494: LD_VAR 0 1
64498: RET
// export function hHackInvisible ; var i , j ; begin
64499: LD_INT 0
64501: PPUSH
64502: PPUSH
64503: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64504: LD_ADDR_VAR 0 2
64508: PUSH
64509: LD_INT 21
64511: PUSH
64512: LD_INT 1
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PPUSH
64519: CALL_OW 69
64523: PUSH
64524: FOR_IN
64525: IFFALSE 64549
// if IsSelected ( i ) then
64527: LD_VAR 0 2
64531: PPUSH
64532: CALL_OW 306
64536: IFFALSE 64547
// ComForceInvisible ( i ) ;
64538: LD_VAR 0 2
64542: PPUSH
64543: CALL_OW 496
64547: GO 64524
64549: POP
64550: POP
// end ;
64551: LD_VAR 0 1
64555: RET
// export function hHackChangeYourSide ; begin
64556: LD_INT 0
64558: PPUSH
// if your_side = 8 then
64559: LD_OWVAR 2
64563: PUSH
64564: LD_INT 8
64566: EQUAL
64567: IFFALSE 64579
// your_side := 0 else
64569: LD_ADDR_OWVAR 2
64573: PUSH
64574: LD_INT 0
64576: ST_TO_ADDR
64577: GO 64593
// your_side := your_side + 1 ;
64579: LD_ADDR_OWVAR 2
64583: PUSH
64584: LD_OWVAR 2
64588: PUSH
64589: LD_INT 1
64591: PLUS
64592: ST_TO_ADDR
// end ;
64593: LD_VAR 0 1
64597: RET
// export function hHackChangeUnitSide ; var i , j ; begin
64598: LD_INT 0
64600: PPUSH
64601: PPUSH
64602: PPUSH
// for i in all_units do
64603: LD_ADDR_VAR 0 2
64607: PUSH
64608: LD_OWVAR 3
64612: PUSH
64613: FOR_IN
64614: IFFALSE 64692
// if IsSelected ( i ) then
64616: LD_VAR 0 2
64620: PPUSH
64621: CALL_OW 306
64625: IFFALSE 64690
// begin j := GetSide ( i ) ;
64627: LD_ADDR_VAR 0 3
64631: PUSH
64632: LD_VAR 0 2
64636: PPUSH
64637: CALL_OW 255
64641: ST_TO_ADDR
// if j = 8 then
64642: LD_VAR 0 3
64646: PUSH
64647: LD_INT 8
64649: EQUAL
64650: IFFALSE 64662
// j := 0 else
64652: LD_ADDR_VAR 0 3
64656: PUSH
64657: LD_INT 0
64659: ST_TO_ADDR
64660: GO 64676
// j := j + 1 ;
64662: LD_ADDR_VAR 0 3
64666: PUSH
64667: LD_VAR 0 3
64671: PUSH
64672: LD_INT 1
64674: PLUS
64675: ST_TO_ADDR
// SetSide ( i , j ) ;
64676: LD_VAR 0 2
64680: PPUSH
64681: LD_VAR 0 3
64685: PPUSH
64686: CALL_OW 235
// end ;
64690: GO 64613
64692: POP
64693: POP
// end ;
64694: LD_VAR 0 1
64698: RET
// export function hHackFog ; begin
64699: LD_INT 0
64701: PPUSH
// FogOff ( true ) ;
64702: LD_INT 1
64704: PPUSH
64705: CALL_OW 344
// end ;
64709: LD_VAR 0 1
64713: RET
// export function hHackTeleport ( unit , x , y ) ; begin
64714: LD_INT 0
64716: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
64717: LD_VAR 0 1
64721: PPUSH
64722: LD_VAR 0 2
64726: PPUSH
64727: LD_VAR 0 3
64731: PPUSH
64732: LD_INT 1
64734: PPUSH
64735: LD_INT 1
64737: PPUSH
64738: CALL_OW 483
// CenterOnXY ( x , y ) ;
64742: LD_VAR 0 2
64746: PPUSH
64747: LD_VAR 0 3
64751: PPUSH
64752: CALL_OW 84
// end ;
64756: LD_VAR 0 4
64760: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64761: LD_INT 0
64763: PPUSH
64764: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64765: LD_VAR 0 1
64769: NOT
64770: PUSH
64771: LD_VAR 0 2
64775: PPUSH
64776: LD_VAR 0 3
64780: PPUSH
64781: CALL_OW 488
64785: NOT
64786: OR
64787: PUSH
64788: LD_VAR 0 1
64792: PPUSH
64793: CALL_OW 266
64797: PUSH
64798: LD_INT 3
64800: NONEQUAL
64801: PUSH
64802: LD_VAR 0 1
64806: PPUSH
64807: CALL_OW 247
64811: PUSH
64812: LD_INT 1
64814: EQUAL
64815: NOT
64816: AND
64817: OR
64818: IFFALSE 64822
// exit ;
64820: GO 64971
// if GetType ( factory ) = unit_human then
64822: LD_VAR 0 1
64826: PPUSH
64827: CALL_OW 247
64831: PUSH
64832: LD_INT 1
64834: EQUAL
64835: IFFALSE 64852
// factory := IsInUnit ( factory ) ;
64837: LD_ADDR_VAR 0 1
64841: PUSH
64842: LD_VAR 0 1
64846: PPUSH
64847: CALL_OW 310
64851: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64852: LD_VAR 0 1
64856: PPUSH
64857: CALL_OW 266
64861: PUSH
64862: LD_INT 3
64864: NONEQUAL
64865: IFFALSE 64869
// exit ;
64867: GO 64971
// if HexInfo ( x , y ) = factory then
64869: LD_VAR 0 2
64873: PPUSH
64874: LD_VAR 0 3
64878: PPUSH
64879: CALL_OW 428
64883: PUSH
64884: LD_VAR 0 1
64888: EQUAL
64889: IFFALSE 64916
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
64891: LD_ADDR_EXP 87
64895: PUSH
64896: LD_EXP 87
64900: PPUSH
64901: LD_VAR 0 1
64905: PPUSH
64906: LD_INT 0
64908: PPUSH
64909: CALL_OW 1
64913: ST_TO_ADDR
64914: GO 64967
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
64916: LD_ADDR_EXP 87
64920: PUSH
64921: LD_EXP 87
64925: PPUSH
64926: LD_VAR 0 1
64930: PPUSH
64931: LD_VAR 0 1
64935: PPUSH
64936: CALL_OW 255
64940: PUSH
64941: LD_VAR 0 1
64945: PUSH
64946: LD_VAR 0 2
64950: PUSH
64951: LD_VAR 0 3
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: PPUSH
64962: CALL_OW 1
64966: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64967: CALL 64976 0 0
// end ;
64971: LD_VAR 0 4
64975: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64976: LD_INT 0
64978: PPUSH
64979: PPUSH
64980: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64981: LD_STRING resetFactoryWaypoint();
64983: PPUSH
64984: CALL_OW 559
// if factoryWaypoints then
64988: LD_EXP 87
64992: IFFALSE 65118
// begin list := PrepareArray ( factoryWaypoints ) ;
64994: LD_ADDR_VAR 0 3
64998: PUSH
64999: LD_EXP 87
65003: PPUSH
65004: CALL 50083 0 1
65008: ST_TO_ADDR
// for i := 1 to list do
65009: LD_ADDR_VAR 0 2
65013: PUSH
65014: DOUBLE
65015: LD_INT 1
65017: DEC
65018: ST_TO_ADDR
65019: LD_VAR 0 3
65023: PUSH
65024: FOR_TO
65025: IFFALSE 65116
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65027: LD_STRING setFactoryWaypointXY(
65029: PUSH
65030: LD_VAR 0 3
65034: PUSH
65035: LD_VAR 0 2
65039: ARRAY
65040: PUSH
65041: LD_INT 1
65043: ARRAY
65044: STR
65045: PUSH
65046: LD_STRING ,
65048: STR
65049: PUSH
65050: LD_VAR 0 3
65054: PUSH
65055: LD_VAR 0 2
65059: ARRAY
65060: PUSH
65061: LD_INT 2
65063: ARRAY
65064: STR
65065: PUSH
65066: LD_STRING ,
65068: STR
65069: PUSH
65070: LD_VAR 0 3
65074: PUSH
65075: LD_VAR 0 2
65079: ARRAY
65080: PUSH
65081: LD_INT 3
65083: ARRAY
65084: STR
65085: PUSH
65086: LD_STRING ,
65088: STR
65089: PUSH
65090: LD_VAR 0 3
65094: PUSH
65095: LD_VAR 0 2
65099: ARRAY
65100: PUSH
65101: LD_INT 4
65103: ARRAY
65104: STR
65105: PUSH
65106: LD_STRING )
65108: STR
65109: PPUSH
65110: CALL_OW 559
65114: GO 65024
65116: POP
65117: POP
// end ; end ;
65118: LD_VAR 0 1
65122: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65123: LD_INT 0
65125: PPUSH
// if HexInfo ( x , y ) = warehouse then
65126: LD_VAR 0 2
65130: PPUSH
65131: LD_VAR 0 3
65135: PPUSH
65136: CALL_OW 428
65140: PUSH
65141: LD_VAR 0 1
65145: EQUAL
65146: IFFALSE 65173
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65148: LD_ADDR_EXP 88
65152: PUSH
65153: LD_EXP 88
65157: PPUSH
65158: LD_VAR 0 1
65162: PPUSH
65163: LD_INT 0
65165: PPUSH
65166: CALL_OW 1
65170: ST_TO_ADDR
65171: GO 65224
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65173: LD_ADDR_EXP 88
65177: PUSH
65178: LD_EXP 88
65182: PPUSH
65183: LD_VAR 0 1
65187: PPUSH
65188: LD_VAR 0 1
65192: PPUSH
65193: CALL_OW 255
65197: PUSH
65198: LD_VAR 0 1
65202: PUSH
65203: LD_VAR 0 2
65207: PUSH
65208: LD_VAR 0 3
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: PPUSH
65219: CALL_OW 1
65223: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65224: CALL 65233 0 0
// end ;
65228: LD_VAR 0 4
65232: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65233: LD_INT 0
65235: PPUSH
65236: PPUSH
65237: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65238: LD_STRING resetWarehouseGatheringPoints();
65240: PPUSH
65241: CALL_OW 559
// if warehouseGatheringPoints then
65245: LD_EXP 88
65249: IFFALSE 65375
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65251: LD_ADDR_VAR 0 3
65255: PUSH
65256: LD_EXP 88
65260: PPUSH
65261: CALL 50083 0 1
65265: ST_TO_ADDR
// for i := 1 to list do
65266: LD_ADDR_VAR 0 2
65270: PUSH
65271: DOUBLE
65272: LD_INT 1
65274: DEC
65275: ST_TO_ADDR
65276: LD_VAR 0 3
65280: PUSH
65281: FOR_TO
65282: IFFALSE 65373
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65284: LD_STRING setWarehouseGatheringPointXY(
65286: PUSH
65287: LD_VAR 0 3
65291: PUSH
65292: LD_VAR 0 2
65296: ARRAY
65297: PUSH
65298: LD_INT 1
65300: ARRAY
65301: STR
65302: PUSH
65303: LD_STRING ,
65305: STR
65306: PUSH
65307: LD_VAR 0 3
65311: PUSH
65312: LD_VAR 0 2
65316: ARRAY
65317: PUSH
65318: LD_INT 2
65320: ARRAY
65321: STR
65322: PUSH
65323: LD_STRING ,
65325: STR
65326: PUSH
65327: LD_VAR 0 3
65331: PUSH
65332: LD_VAR 0 2
65336: ARRAY
65337: PUSH
65338: LD_INT 3
65340: ARRAY
65341: STR
65342: PUSH
65343: LD_STRING ,
65345: STR
65346: PUSH
65347: LD_VAR 0 3
65351: PUSH
65352: LD_VAR 0 2
65356: ARRAY
65357: PUSH
65358: LD_INT 4
65360: ARRAY
65361: STR
65362: PUSH
65363: LD_STRING )
65365: STR
65366: PPUSH
65367: CALL_OW 559
65371: GO 65281
65373: POP
65374: POP
// end ; end ;
65375: LD_VAR 0 1
65379: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
65380: LD_EXP 88
65384: IFFALSE 66069
65386: GO 65388
65388: DISABLE
65389: LD_INT 0
65391: PPUSH
65392: PPUSH
65393: PPUSH
65394: PPUSH
65395: PPUSH
65396: PPUSH
65397: PPUSH
65398: PPUSH
65399: PPUSH
// begin enable ;
65400: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
65401: LD_ADDR_VAR 0 3
65405: PUSH
65406: LD_EXP 88
65410: PPUSH
65411: CALL 50083 0 1
65415: ST_TO_ADDR
// if not list then
65416: LD_VAR 0 3
65420: NOT
65421: IFFALSE 65425
// exit ;
65423: GO 66069
// for i := 1 to list do
65425: LD_ADDR_VAR 0 1
65429: PUSH
65430: DOUBLE
65431: LD_INT 1
65433: DEC
65434: ST_TO_ADDR
65435: LD_VAR 0 3
65439: PUSH
65440: FOR_TO
65441: IFFALSE 66067
// begin depot := list [ i ] [ 2 ] ;
65443: LD_ADDR_VAR 0 8
65447: PUSH
65448: LD_VAR 0 3
65452: PUSH
65453: LD_VAR 0 1
65457: ARRAY
65458: PUSH
65459: LD_INT 2
65461: ARRAY
65462: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
65463: LD_ADDR_VAR 0 5
65467: PUSH
65468: LD_VAR 0 3
65472: PUSH
65473: LD_VAR 0 1
65477: ARRAY
65478: PUSH
65479: LD_INT 1
65481: ARRAY
65482: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
65483: LD_VAR 0 8
65487: PPUSH
65488: CALL_OW 301
65492: PUSH
65493: LD_VAR 0 5
65497: PUSH
65498: LD_VAR 0 8
65502: PPUSH
65503: CALL_OW 255
65507: NONEQUAL
65508: OR
65509: IFFALSE 65538
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
65511: LD_ADDR_EXP 88
65515: PUSH
65516: LD_EXP 88
65520: PPUSH
65521: LD_VAR 0 8
65525: PPUSH
65526: LD_INT 0
65528: PPUSH
65529: CALL_OW 1
65533: ST_TO_ADDR
// exit ;
65534: POP
65535: POP
65536: GO 66069
// end ; x := list [ i ] [ 3 ] ;
65538: LD_ADDR_VAR 0 6
65542: PUSH
65543: LD_VAR 0 3
65547: PUSH
65548: LD_VAR 0 1
65552: ARRAY
65553: PUSH
65554: LD_INT 3
65556: ARRAY
65557: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
65558: LD_ADDR_VAR 0 7
65562: PUSH
65563: LD_VAR 0 3
65567: PUSH
65568: LD_VAR 0 1
65572: ARRAY
65573: PUSH
65574: LD_INT 4
65576: ARRAY
65577: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
65578: LD_ADDR_VAR 0 9
65582: PUSH
65583: LD_VAR 0 6
65587: PPUSH
65588: LD_VAR 0 7
65592: PPUSH
65593: LD_INT 16
65595: PPUSH
65596: CALL 48671 0 3
65600: ST_TO_ADDR
// if not cratesNearbyPoint then
65601: LD_VAR 0 9
65605: NOT
65606: IFFALSE 65612
// exit ;
65608: POP
65609: POP
65610: GO 66069
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
65612: LD_ADDR_VAR 0 4
65616: PUSH
65617: LD_INT 22
65619: PUSH
65620: LD_VAR 0 5
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 3
65631: PUSH
65632: LD_INT 60
65634: PUSH
65635: EMPTY
65636: LIST
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 91
65644: PUSH
65645: LD_VAR 0 8
65649: PUSH
65650: LD_INT 6
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 2
65660: PUSH
65661: LD_INT 25
65663: PUSH
65664: LD_INT 2
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 25
65673: PUSH
65674: LD_INT 16
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: LIST
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: PPUSH
65692: CALL_OW 69
65696: PUSH
65697: LD_VAR 0 8
65701: PPUSH
65702: CALL_OW 313
65706: PPUSH
65707: LD_INT 3
65709: PUSH
65710: LD_INT 60
65712: PUSH
65713: EMPTY
65714: LIST
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 2
65722: PUSH
65723: LD_INT 25
65725: PUSH
65726: LD_INT 2
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 25
65735: PUSH
65736: LD_INT 16
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: LIST
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PPUSH
65752: CALL_OW 72
65756: UNION
65757: ST_TO_ADDR
// if tmp then
65758: LD_VAR 0 4
65762: IFFALSE 65842
// begin tmp := ShrinkArray ( tmp , 3 ) ;
65764: LD_ADDR_VAR 0 4
65768: PUSH
65769: LD_VAR 0 4
65773: PPUSH
65774: LD_INT 3
65776: PPUSH
65777: CALL 46640 0 2
65781: ST_TO_ADDR
// for j in tmp do
65782: LD_ADDR_VAR 0 2
65786: PUSH
65787: LD_VAR 0 4
65791: PUSH
65792: FOR_IN
65793: IFFALSE 65836
// begin if IsInUnit ( j ) then
65795: LD_VAR 0 2
65799: PPUSH
65800: CALL_OW 310
65804: IFFALSE 65815
// ComExit ( j ) ;
65806: LD_VAR 0 2
65810: PPUSH
65811: CALL 46723 0 1
// AddComCollect ( j , x , y ) ;
65815: LD_VAR 0 2
65819: PPUSH
65820: LD_VAR 0 6
65824: PPUSH
65825: LD_VAR 0 7
65829: PPUSH
65830: CALL_OW 177
// end ;
65834: GO 65792
65836: POP
65837: POP
// exit ;
65838: POP
65839: POP
65840: GO 66069
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
65842: LD_ADDR_VAR 0 4
65846: PUSH
65847: LD_INT 22
65849: PUSH
65850: LD_VAR 0 5
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 91
65861: PUSH
65862: LD_VAR 0 8
65866: PUSH
65867: LD_INT 8
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 2
65877: PUSH
65878: LD_INT 34
65880: PUSH
65881: LD_INT 12
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 34
65890: PUSH
65891: LD_INT 51
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 34
65900: PUSH
65901: LD_INT 32
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 34
65910: PUSH
65911: LD_INT 89
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: LIST
65929: PPUSH
65930: CALL_OW 69
65934: ST_TO_ADDR
// if tmp then
65935: LD_VAR 0 4
65939: IFFALSE 66065
// begin for j in tmp do
65941: LD_ADDR_VAR 0 2
65945: PUSH
65946: LD_VAR 0 4
65950: PUSH
65951: FOR_IN
65952: IFFALSE 66063
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
65954: LD_VAR 0 2
65958: PPUSH
65959: CALL_OW 262
65963: PUSH
65964: LD_INT 3
65966: EQUAL
65967: PUSH
65968: LD_VAR 0 2
65972: PPUSH
65973: CALL_OW 261
65977: PUSH
65978: LD_INT 20
65980: GREATER
65981: OR
65982: PUSH
65983: LD_VAR 0 2
65987: PPUSH
65988: CALL_OW 314
65992: NOT
65993: AND
65994: PUSH
65995: LD_VAR 0 2
65999: PPUSH
66000: CALL_OW 263
66004: PUSH
66005: LD_INT 1
66007: NONEQUAL
66008: PUSH
66009: LD_VAR 0 2
66013: PPUSH
66014: CALL_OW 311
66018: OR
66019: AND
66020: IFFALSE 66061
// begin ComCollect ( j , x , y ) ;
66022: LD_VAR 0 2
66026: PPUSH
66027: LD_VAR 0 6
66031: PPUSH
66032: LD_VAR 0 7
66036: PPUSH
66037: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
66041: LD_VAR 0 2
66045: PPUSH
66046: LD_VAR 0 8
66050: PPUSH
66051: CALL_OW 172
// exit ;
66055: POP
66056: POP
66057: POP
66058: POP
66059: GO 66069
// end ;
66061: GO 65951
66063: POP
66064: POP
// end ; end ;
66065: GO 65440
66067: POP
66068: POP
// end ; end_of_file
66069: PPOPN 9
66071: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
66072: LD_INT 0
66074: PPUSH
66075: PPUSH
66076: PPUSH
66077: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
66078: LD_VAR 0 1
66082: PPUSH
66083: CALL_OW 264
66087: PUSH
66088: LD_INT 91
66090: EQUAL
66091: IFFALSE 66163
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
66093: LD_INT 68
66095: PPUSH
66096: LD_VAR 0 1
66100: PPUSH
66101: CALL_OW 255
66105: PPUSH
66106: CALL_OW 321
66110: PUSH
66111: LD_INT 2
66113: EQUAL
66114: IFFALSE 66126
// eff := 70 else
66116: LD_ADDR_VAR 0 4
66120: PUSH
66121: LD_INT 70
66123: ST_TO_ADDR
66124: GO 66134
// eff := 30 ;
66126: LD_ADDR_VAR 0 4
66130: PUSH
66131: LD_INT 30
66133: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
66134: LD_VAR 0 1
66138: PPUSH
66139: CALL_OW 250
66143: PPUSH
66144: LD_VAR 0 1
66148: PPUSH
66149: CALL_OW 251
66153: PPUSH
66154: LD_VAR 0 4
66158: PPUSH
66159: CALL_OW 495
// end ; end ;
66163: LD_VAR 0 2
66167: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
66168: LD_INT 0
66170: PPUSH
// end ;
66171: LD_VAR 0 4
66175: RET
// export function SOS_Command ( cmd ) ; begin
66176: LD_INT 0
66178: PPUSH
// end ;
66179: LD_VAR 0 2
66183: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
66184: LD_INT 0
66186: PPUSH
// end ;
66187: LD_VAR 0 6
66191: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
66192: LD_INT 0
66194: PPUSH
66195: PPUSH
// if not vehicle or not factory then
66196: LD_VAR 0 1
66200: NOT
66201: PUSH
66202: LD_VAR 0 2
66206: NOT
66207: OR
66208: IFFALSE 66212
// exit ;
66210: GO 66443
// if factoryWaypoints >= factory then
66212: LD_EXP 87
66216: PUSH
66217: LD_VAR 0 2
66221: GREATEREQUAL
66222: IFFALSE 66443
// if factoryWaypoints [ factory ] then
66224: LD_EXP 87
66228: PUSH
66229: LD_VAR 0 2
66233: ARRAY
66234: IFFALSE 66443
// begin if GetControl ( vehicle ) = control_manual then
66236: LD_VAR 0 1
66240: PPUSH
66241: CALL_OW 263
66245: PUSH
66246: LD_INT 1
66248: EQUAL
66249: IFFALSE 66330
// begin driver := IsDrivenBy ( vehicle ) ;
66251: LD_ADDR_VAR 0 4
66255: PUSH
66256: LD_VAR 0 1
66260: PPUSH
66261: CALL_OW 311
66265: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66266: LD_VAR 0 4
66270: PPUSH
66271: LD_EXP 87
66275: PUSH
66276: LD_VAR 0 2
66280: ARRAY
66281: PUSH
66282: LD_INT 3
66284: ARRAY
66285: PPUSH
66286: LD_EXP 87
66290: PUSH
66291: LD_VAR 0 2
66295: ARRAY
66296: PUSH
66297: LD_INT 4
66299: ARRAY
66300: PPUSH
66301: CALL_OW 171
// AddComExitVehicle ( driver ) ;
66305: LD_VAR 0 4
66309: PPUSH
66310: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
66314: LD_VAR 0 4
66318: PPUSH
66319: LD_VAR 0 2
66323: PPUSH
66324: CALL_OW 180
// end else
66328: GO 66443
// if GetControl ( vehicle ) = control_remote then
66330: LD_VAR 0 1
66334: PPUSH
66335: CALL_OW 263
66339: PUSH
66340: LD_INT 2
66342: EQUAL
66343: IFFALSE 66404
// begin wait ( 0 0$2 ) ;
66345: LD_INT 70
66347: PPUSH
66348: CALL_OW 67
// if Connect ( vehicle ) then
66352: LD_VAR 0 1
66356: PPUSH
66357: CALL 16963 0 1
66361: IFFALSE 66402
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66363: LD_VAR 0 1
66367: PPUSH
66368: LD_EXP 87
66372: PUSH
66373: LD_VAR 0 2
66377: ARRAY
66378: PUSH
66379: LD_INT 3
66381: ARRAY
66382: PPUSH
66383: LD_EXP 87
66387: PUSH
66388: LD_VAR 0 2
66392: ARRAY
66393: PUSH
66394: LD_INT 4
66396: ARRAY
66397: PPUSH
66398: CALL_OW 171
// end else
66402: GO 66443
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66404: LD_VAR 0 1
66408: PPUSH
66409: LD_EXP 87
66413: PUSH
66414: LD_VAR 0 2
66418: ARRAY
66419: PUSH
66420: LD_INT 3
66422: ARRAY
66423: PPUSH
66424: LD_EXP 87
66428: PUSH
66429: LD_VAR 0 2
66433: ARRAY
66434: PUSH
66435: LD_INT 4
66437: ARRAY
66438: PPUSH
66439: CALL_OW 171
// end ; end ;
66443: LD_VAR 0 3
66447: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
66448: LD_INT 0
66450: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
66451: LD_VAR 0 1
66455: PUSH
66456: LD_INT 250
66458: EQUAL
66459: PUSH
66460: LD_VAR 0 2
66464: PPUSH
66465: CALL_OW 264
66469: PUSH
66470: LD_INT 81
66472: EQUAL
66473: AND
66474: IFFALSE 66495
// MinerPlaceMine ( unit , x , y ) ;
66476: LD_VAR 0 2
66480: PPUSH
66481: LD_VAR 0 4
66485: PPUSH
66486: LD_VAR 0 5
66490: PPUSH
66491: CALL 68880 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
66495: LD_VAR 0 1
66499: PUSH
66500: LD_INT 251
66502: EQUAL
66503: PUSH
66504: LD_VAR 0 2
66508: PPUSH
66509: CALL_OW 264
66513: PUSH
66514: LD_INT 81
66516: EQUAL
66517: AND
66518: IFFALSE 66539
// MinerDetonateMine ( unit , x , y ) ;
66520: LD_VAR 0 2
66524: PPUSH
66525: LD_VAR 0 4
66529: PPUSH
66530: LD_VAR 0 5
66534: PPUSH
66535: CALL 69155 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
66539: LD_VAR 0 1
66543: PUSH
66544: LD_INT 252
66546: EQUAL
66547: PUSH
66548: LD_VAR 0 2
66552: PPUSH
66553: CALL_OW 264
66557: PUSH
66558: LD_INT 81
66560: EQUAL
66561: AND
66562: IFFALSE 66583
// MinerCreateMinefield ( unit , x , y ) ;
66564: LD_VAR 0 2
66568: PPUSH
66569: LD_VAR 0 4
66573: PPUSH
66574: LD_VAR 0 5
66578: PPUSH
66579: CALL 69572 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
66583: LD_VAR 0 1
66587: PUSH
66588: LD_INT 253
66590: EQUAL
66591: PUSH
66592: LD_VAR 0 2
66596: PPUSH
66597: CALL_OW 257
66601: PUSH
66602: LD_INT 5
66604: EQUAL
66605: AND
66606: IFFALSE 66627
// ComBinocular ( unit , x , y ) ;
66608: LD_VAR 0 2
66612: PPUSH
66613: LD_VAR 0 4
66617: PPUSH
66618: LD_VAR 0 5
66622: PPUSH
66623: CALL 69941 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
66627: LD_VAR 0 1
66631: PUSH
66632: LD_INT 254
66634: EQUAL
66635: PUSH
66636: LD_VAR 0 2
66640: PPUSH
66641: CALL_OW 264
66645: PUSH
66646: LD_INT 99
66648: EQUAL
66649: AND
66650: PUSH
66651: LD_VAR 0 3
66655: PPUSH
66656: CALL_OW 263
66660: PUSH
66661: LD_INT 3
66663: EQUAL
66664: AND
66665: IFFALSE 66681
// HackDestroyVehicle ( unit , selectedUnit ) ;
66667: LD_VAR 0 2
66671: PPUSH
66672: LD_VAR 0 3
66676: PPUSH
66677: CALL 68244 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
66681: LD_VAR 0 1
66685: PUSH
66686: LD_INT 255
66688: EQUAL
66689: PUSH
66690: LD_VAR 0 2
66694: PPUSH
66695: CALL_OW 264
66699: PUSH
66700: LD_INT 14
66702: PUSH
66703: LD_INT 53
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: IN
66710: AND
66711: PUSH
66712: LD_VAR 0 4
66716: PPUSH
66717: LD_VAR 0 5
66721: PPUSH
66722: CALL_OW 488
66726: AND
66727: IFFALSE 66751
// CutTreeXYR ( unit , x , y , 12 ) ;
66729: LD_VAR 0 2
66733: PPUSH
66734: LD_VAR 0 4
66738: PPUSH
66739: LD_VAR 0 5
66743: PPUSH
66744: LD_INT 12
66746: PPUSH
66747: CALL 66814 0 4
// if cmd = 256 then
66751: LD_VAR 0 1
66755: PUSH
66756: LD_INT 256
66758: EQUAL
66759: IFFALSE 66780
// SetFactoryWaypoint ( unit , x , y ) ;
66761: LD_VAR 0 2
66765: PPUSH
66766: LD_VAR 0 4
66770: PPUSH
66771: LD_VAR 0 5
66775: PPUSH
66776: CALL 64761 0 3
// if cmd = 257 then
66780: LD_VAR 0 1
66784: PUSH
66785: LD_INT 257
66787: EQUAL
66788: IFFALSE 66809
// SetWarehouseGatheringPoint ( unit , x , y ) ;
66790: LD_VAR 0 2
66794: PPUSH
66795: LD_VAR 0 4
66799: PPUSH
66800: LD_VAR 0 5
66804: PPUSH
66805: CALL 65123 0 3
// end ;
66809: LD_VAR 0 6
66813: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
66814: LD_INT 0
66816: PPUSH
66817: PPUSH
66818: PPUSH
66819: PPUSH
66820: PPUSH
66821: PPUSH
66822: PPUSH
66823: PPUSH
66824: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
66825: LD_VAR 0 1
66829: NOT
66830: PUSH
66831: LD_VAR 0 2
66835: PPUSH
66836: LD_VAR 0 3
66840: PPUSH
66841: CALL_OW 488
66845: NOT
66846: OR
66847: PUSH
66848: LD_VAR 0 4
66852: NOT
66853: OR
66854: IFFALSE 66858
// exit ;
66856: GO 67198
// list := [ ] ;
66858: LD_ADDR_VAR 0 13
66862: PUSH
66863: EMPTY
66864: ST_TO_ADDR
// if x - r < 0 then
66865: LD_VAR 0 2
66869: PUSH
66870: LD_VAR 0 4
66874: MINUS
66875: PUSH
66876: LD_INT 0
66878: LESS
66879: IFFALSE 66891
// min_x := 0 else
66881: LD_ADDR_VAR 0 7
66885: PUSH
66886: LD_INT 0
66888: ST_TO_ADDR
66889: GO 66907
// min_x := x - r ;
66891: LD_ADDR_VAR 0 7
66895: PUSH
66896: LD_VAR 0 2
66900: PUSH
66901: LD_VAR 0 4
66905: MINUS
66906: ST_TO_ADDR
// if y - r < 0 then
66907: LD_VAR 0 3
66911: PUSH
66912: LD_VAR 0 4
66916: MINUS
66917: PUSH
66918: LD_INT 0
66920: LESS
66921: IFFALSE 66933
// min_y := 0 else
66923: LD_ADDR_VAR 0 8
66927: PUSH
66928: LD_INT 0
66930: ST_TO_ADDR
66931: GO 66949
// min_y := y - r ;
66933: LD_ADDR_VAR 0 8
66937: PUSH
66938: LD_VAR 0 3
66942: PUSH
66943: LD_VAR 0 4
66947: MINUS
66948: ST_TO_ADDR
// max_x := x + r ;
66949: LD_ADDR_VAR 0 9
66953: PUSH
66954: LD_VAR 0 2
66958: PUSH
66959: LD_VAR 0 4
66963: PLUS
66964: ST_TO_ADDR
// max_y := y + r ;
66965: LD_ADDR_VAR 0 10
66969: PUSH
66970: LD_VAR 0 3
66974: PUSH
66975: LD_VAR 0 4
66979: PLUS
66980: ST_TO_ADDR
// for _x = min_x to max_x do
66981: LD_ADDR_VAR 0 11
66985: PUSH
66986: DOUBLE
66987: LD_VAR 0 7
66991: DEC
66992: ST_TO_ADDR
66993: LD_VAR 0 9
66997: PUSH
66998: FOR_TO
66999: IFFALSE 67116
// for _y = min_y to max_y do
67001: LD_ADDR_VAR 0 12
67005: PUSH
67006: DOUBLE
67007: LD_VAR 0 8
67011: DEC
67012: ST_TO_ADDR
67013: LD_VAR 0 10
67017: PUSH
67018: FOR_TO
67019: IFFALSE 67112
// begin if not ValidHex ( _x , _y ) then
67021: LD_VAR 0 11
67025: PPUSH
67026: LD_VAR 0 12
67030: PPUSH
67031: CALL_OW 488
67035: NOT
67036: IFFALSE 67040
// continue ;
67038: GO 67018
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
67040: LD_VAR 0 11
67044: PPUSH
67045: LD_VAR 0 12
67049: PPUSH
67050: CALL_OW 351
67054: PUSH
67055: LD_VAR 0 11
67059: PPUSH
67060: LD_VAR 0 12
67064: PPUSH
67065: CALL_OW 554
67069: AND
67070: IFFALSE 67110
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
67072: LD_ADDR_VAR 0 13
67076: PUSH
67077: LD_VAR 0 13
67081: PPUSH
67082: LD_VAR 0 13
67086: PUSH
67087: LD_INT 1
67089: PLUS
67090: PPUSH
67091: LD_VAR 0 11
67095: PUSH
67096: LD_VAR 0 12
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PPUSH
67105: CALL_OW 2
67109: ST_TO_ADDR
// end ;
67110: GO 67018
67112: POP
67113: POP
67114: GO 66998
67116: POP
67117: POP
// if not list then
67118: LD_VAR 0 13
67122: NOT
67123: IFFALSE 67127
// exit ;
67125: GO 67198
// for i in list do
67127: LD_ADDR_VAR 0 6
67131: PUSH
67132: LD_VAR 0 13
67136: PUSH
67137: FOR_IN
67138: IFFALSE 67196
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
67140: LD_VAR 0 1
67144: PPUSH
67145: LD_STRING M
67147: PUSH
67148: LD_VAR 0 6
67152: PUSH
67153: LD_INT 1
67155: ARRAY
67156: PUSH
67157: LD_VAR 0 6
67161: PUSH
67162: LD_INT 2
67164: ARRAY
67165: PUSH
67166: LD_INT 0
67168: PUSH
67169: LD_INT 0
67171: PUSH
67172: LD_INT 0
67174: PUSH
67175: LD_INT 0
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: PUSH
67187: EMPTY
67188: LIST
67189: PPUSH
67190: CALL_OW 447
67194: GO 67137
67196: POP
67197: POP
// end ;
67198: LD_VAR 0 5
67202: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
67203: LD_EXP 90
67207: NOT
67208: IFFALSE 67258
67210: GO 67212
67212: DISABLE
// begin initHack := true ;
67213: LD_ADDR_EXP 90
67217: PUSH
67218: LD_INT 1
67220: ST_TO_ADDR
// hackTanks := [ ] ;
67221: LD_ADDR_EXP 91
67225: PUSH
67226: EMPTY
67227: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
67228: LD_ADDR_EXP 92
67232: PUSH
67233: EMPTY
67234: ST_TO_ADDR
// hackLimit := 3 ;
67235: LD_ADDR_EXP 93
67239: PUSH
67240: LD_INT 3
67242: ST_TO_ADDR
// hackDist := 12 ;
67243: LD_ADDR_EXP 94
67247: PUSH
67248: LD_INT 12
67250: ST_TO_ADDR
// hackCounter := [ ] ;
67251: LD_ADDR_EXP 95
67255: PUSH
67256: EMPTY
67257: ST_TO_ADDR
// end ;
67258: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
67259: LD_EXP 90
67263: PUSH
67264: LD_INT 34
67266: PUSH
67267: LD_INT 99
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PPUSH
67274: CALL_OW 69
67278: AND
67279: IFFALSE 67532
67281: GO 67283
67283: DISABLE
67284: LD_INT 0
67286: PPUSH
67287: PPUSH
// begin enable ;
67288: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
67289: LD_ADDR_VAR 0 1
67293: PUSH
67294: LD_INT 34
67296: PUSH
67297: LD_INT 99
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PPUSH
67304: CALL_OW 69
67308: PUSH
67309: FOR_IN
67310: IFFALSE 67530
// begin if not i in hackTanks then
67312: LD_VAR 0 1
67316: PUSH
67317: LD_EXP 91
67321: IN
67322: NOT
67323: IFFALSE 67406
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
67325: LD_ADDR_EXP 91
67329: PUSH
67330: LD_EXP 91
67334: PPUSH
67335: LD_EXP 91
67339: PUSH
67340: LD_INT 1
67342: PLUS
67343: PPUSH
67344: LD_VAR 0 1
67348: PPUSH
67349: CALL_OW 1
67353: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
67354: LD_ADDR_EXP 92
67358: PUSH
67359: LD_EXP 92
67363: PPUSH
67364: LD_EXP 92
67368: PUSH
67369: LD_INT 1
67371: PLUS
67372: PPUSH
67373: EMPTY
67374: PPUSH
67375: CALL_OW 1
67379: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
67380: LD_ADDR_EXP 95
67384: PUSH
67385: LD_EXP 95
67389: PPUSH
67390: LD_EXP 95
67394: PUSH
67395: LD_INT 1
67397: PLUS
67398: PPUSH
67399: EMPTY
67400: PPUSH
67401: CALL_OW 1
67405: ST_TO_ADDR
// end ; if not IsOk ( i ) then
67406: LD_VAR 0 1
67410: PPUSH
67411: CALL_OW 302
67415: NOT
67416: IFFALSE 67429
// begin HackUnlinkAll ( i ) ;
67418: LD_VAR 0 1
67422: PPUSH
67423: CALL 67535 0 1
// continue ;
67427: GO 67309
// end ; HackCheckCapturedStatus ( i ) ;
67429: LD_VAR 0 1
67433: PPUSH
67434: CALL 67978 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
67438: LD_ADDR_VAR 0 2
67442: PUSH
67443: LD_INT 81
67445: PUSH
67446: LD_VAR 0 1
67450: PPUSH
67451: CALL_OW 255
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 33
67462: PUSH
67463: LD_INT 3
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 91
67472: PUSH
67473: LD_VAR 0 1
67477: PUSH
67478: LD_EXP 94
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 50
67490: PUSH
67491: EMPTY
67492: LIST
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: PPUSH
67500: CALL_OW 69
67504: ST_TO_ADDR
// if not tmp then
67505: LD_VAR 0 2
67509: NOT
67510: IFFALSE 67514
// continue ;
67512: GO 67309
// HackLink ( i , tmp ) ;
67514: LD_VAR 0 1
67518: PPUSH
67519: LD_VAR 0 2
67523: PPUSH
67524: CALL 67671 0 2
// end ;
67528: GO 67309
67530: POP
67531: POP
// end ;
67532: PPOPN 2
67534: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
67535: LD_INT 0
67537: PPUSH
67538: PPUSH
67539: PPUSH
// if not hack in hackTanks then
67540: LD_VAR 0 1
67544: PUSH
67545: LD_EXP 91
67549: IN
67550: NOT
67551: IFFALSE 67555
// exit ;
67553: GO 67666
// index := GetElementIndex ( hackTanks , hack ) ;
67555: LD_ADDR_VAR 0 4
67559: PUSH
67560: LD_EXP 91
67564: PPUSH
67565: LD_VAR 0 1
67569: PPUSH
67570: CALL 13779 0 2
67574: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
67575: LD_EXP 92
67579: PUSH
67580: LD_VAR 0 4
67584: ARRAY
67585: IFFALSE 67666
// begin for i in hackTanksCaptured [ index ] do
67587: LD_ADDR_VAR 0 3
67591: PUSH
67592: LD_EXP 92
67596: PUSH
67597: LD_VAR 0 4
67601: ARRAY
67602: PUSH
67603: FOR_IN
67604: IFFALSE 67630
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
67606: LD_VAR 0 3
67610: PUSH
67611: LD_INT 1
67613: ARRAY
67614: PPUSH
67615: LD_VAR 0 3
67619: PUSH
67620: LD_INT 2
67622: ARRAY
67623: PPUSH
67624: CALL_OW 235
67628: GO 67603
67630: POP
67631: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
67632: LD_ADDR_EXP 92
67636: PUSH
67637: LD_EXP 92
67641: PPUSH
67642: LD_VAR 0 4
67646: PPUSH
67647: EMPTY
67648: PPUSH
67649: CALL_OW 1
67653: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
67654: LD_VAR 0 1
67658: PPUSH
67659: LD_INT 0
67661: PPUSH
67662: CALL_OW 505
// end ; end ;
67666: LD_VAR 0 2
67670: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
67671: LD_INT 0
67673: PPUSH
67674: PPUSH
67675: PPUSH
// if not hack in hackTanks or not vehicles then
67676: LD_VAR 0 1
67680: PUSH
67681: LD_EXP 91
67685: IN
67686: NOT
67687: PUSH
67688: LD_VAR 0 2
67692: NOT
67693: OR
67694: IFFALSE 67698
// exit ;
67696: GO 67973
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
67698: LD_ADDR_VAR 0 2
67702: PUSH
67703: LD_VAR 0 1
67707: PPUSH
67708: LD_VAR 0 2
67712: PPUSH
67713: LD_INT 1
67715: PPUSH
67716: LD_INT 1
67718: PPUSH
67719: CALL 14429 0 4
67723: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
67724: LD_ADDR_VAR 0 5
67728: PUSH
67729: LD_EXP 91
67733: PPUSH
67734: LD_VAR 0 1
67738: PPUSH
67739: CALL 13779 0 2
67743: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
67744: LD_EXP 92
67748: PUSH
67749: LD_VAR 0 5
67753: ARRAY
67754: PUSH
67755: LD_EXP 93
67759: LESS
67760: IFFALSE 67949
// begin for i := 1 to vehicles do
67762: LD_ADDR_VAR 0 4
67766: PUSH
67767: DOUBLE
67768: LD_INT 1
67770: DEC
67771: ST_TO_ADDR
67772: LD_VAR 0 2
67776: PUSH
67777: FOR_TO
67778: IFFALSE 67947
// begin if hackTanksCaptured [ index ] = hackLimit then
67780: LD_EXP 92
67784: PUSH
67785: LD_VAR 0 5
67789: ARRAY
67790: PUSH
67791: LD_EXP 93
67795: EQUAL
67796: IFFALSE 67800
// break ;
67798: GO 67947
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
67800: LD_ADDR_EXP 95
67804: PUSH
67805: LD_EXP 95
67809: PPUSH
67810: LD_VAR 0 5
67814: PPUSH
67815: LD_EXP 95
67819: PUSH
67820: LD_VAR 0 5
67824: ARRAY
67825: PUSH
67826: LD_INT 1
67828: PLUS
67829: PPUSH
67830: CALL_OW 1
67834: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
67835: LD_ADDR_EXP 92
67839: PUSH
67840: LD_EXP 92
67844: PPUSH
67845: LD_VAR 0 5
67849: PUSH
67850: LD_EXP 92
67854: PUSH
67855: LD_VAR 0 5
67859: ARRAY
67860: PUSH
67861: LD_INT 1
67863: PLUS
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PPUSH
67869: LD_VAR 0 2
67873: PUSH
67874: LD_VAR 0 4
67878: ARRAY
67879: PUSH
67880: LD_VAR 0 2
67884: PUSH
67885: LD_VAR 0 4
67889: ARRAY
67890: PPUSH
67891: CALL_OW 255
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PPUSH
67900: CALL 13994 0 3
67904: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
67905: LD_VAR 0 2
67909: PUSH
67910: LD_VAR 0 4
67914: ARRAY
67915: PPUSH
67916: LD_VAR 0 1
67920: PPUSH
67921: CALL_OW 255
67925: PPUSH
67926: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
67930: LD_VAR 0 2
67934: PUSH
67935: LD_VAR 0 4
67939: ARRAY
67940: PPUSH
67941: CALL_OW 141
// end ;
67945: GO 67777
67947: POP
67948: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67949: LD_VAR 0 1
67953: PPUSH
67954: LD_EXP 92
67958: PUSH
67959: LD_VAR 0 5
67963: ARRAY
67964: PUSH
67965: LD_INT 0
67967: PLUS
67968: PPUSH
67969: CALL_OW 505
// end ;
67973: LD_VAR 0 3
67977: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
67978: LD_INT 0
67980: PPUSH
67981: PPUSH
67982: PPUSH
67983: PPUSH
// if not hack in hackTanks then
67984: LD_VAR 0 1
67988: PUSH
67989: LD_EXP 91
67993: IN
67994: NOT
67995: IFFALSE 67999
// exit ;
67997: GO 68239
// index := GetElementIndex ( hackTanks , hack ) ;
67999: LD_ADDR_VAR 0 4
68003: PUSH
68004: LD_EXP 91
68008: PPUSH
68009: LD_VAR 0 1
68013: PPUSH
68014: CALL 13779 0 2
68018: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
68019: LD_ADDR_VAR 0 3
68023: PUSH
68024: DOUBLE
68025: LD_EXP 92
68029: PUSH
68030: LD_VAR 0 4
68034: ARRAY
68035: INC
68036: ST_TO_ADDR
68037: LD_INT 1
68039: PUSH
68040: FOR_DOWNTO
68041: IFFALSE 68213
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
68043: LD_ADDR_VAR 0 5
68047: PUSH
68048: LD_EXP 92
68052: PUSH
68053: LD_VAR 0 4
68057: ARRAY
68058: PUSH
68059: LD_VAR 0 3
68063: ARRAY
68064: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
68065: LD_VAR 0 5
68069: PUSH
68070: LD_INT 1
68072: ARRAY
68073: PPUSH
68074: CALL_OW 302
68078: NOT
68079: PUSH
68080: LD_VAR 0 5
68084: PUSH
68085: LD_INT 1
68087: ARRAY
68088: PPUSH
68089: CALL_OW 255
68093: PUSH
68094: LD_VAR 0 1
68098: PPUSH
68099: CALL_OW 255
68103: NONEQUAL
68104: OR
68105: IFFALSE 68211
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
68107: LD_VAR 0 5
68111: PUSH
68112: LD_INT 1
68114: ARRAY
68115: PPUSH
68116: CALL_OW 305
68120: PUSH
68121: LD_VAR 0 5
68125: PUSH
68126: LD_INT 1
68128: ARRAY
68129: PPUSH
68130: CALL_OW 255
68134: PUSH
68135: LD_VAR 0 1
68139: PPUSH
68140: CALL_OW 255
68144: EQUAL
68145: AND
68146: IFFALSE 68170
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
68148: LD_VAR 0 5
68152: PUSH
68153: LD_INT 1
68155: ARRAY
68156: PPUSH
68157: LD_VAR 0 5
68161: PUSH
68162: LD_INT 2
68164: ARRAY
68165: PPUSH
68166: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
68170: LD_ADDR_EXP 92
68174: PUSH
68175: LD_EXP 92
68179: PPUSH
68180: LD_VAR 0 4
68184: PPUSH
68185: LD_EXP 92
68189: PUSH
68190: LD_VAR 0 4
68194: ARRAY
68195: PPUSH
68196: LD_VAR 0 3
68200: PPUSH
68201: CALL_OW 3
68205: PPUSH
68206: CALL_OW 1
68210: ST_TO_ADDR
// end ; end ;
68211: GO 68040
68213: POP
68214: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
68215: LD_VAR 0 1
68219: PPUSH
68220: LD_EXP 92
68224: PUSH
68225: LD_VAR 0 4
68229: ARRAY
68230: PUSH
68231: LD_INT 0
68233: PLUS
68234: PPUSH
68235: CALL_OW 505
// end ;
68239: LD_VAR 0 2
68243: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
68244: LD_INT 0
68246: PPUSH
68247: PPUSH
68248: PPUSH
68249: PPUSH
// if not hack in hackTanks then
68250: LD_VAR 0 1
68254: PUSH
68255: LD_EXP 91
68259: IN
68260: NOT
68261: IFFALSE 68265
// exit ;
68263: GO 68350
// index := GetElementIndex ( hackTanks , hack ) ;
68265: LD_ADDR_VAR 0 5
68269: PUSH
68270: LD_EXP 91
68274: PPUSH
68275: LD_VAR 0 1
68279: PPUSH
68280: CALL 13779 0 2
68284: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
68285: LD_ADDR_VAR 0 4
68289: PUSH
68290: DOUBLE
68291: LD_INT 1
68293: DEC
68294: ST_TO_ADDR
68295: LD_EXP 92
68299: PUSH
68300: LD_VAR 0 5
68304: ARRAY
68305: PUSH
68306: FOR_TO
68307: IFFALSE 68348
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
68309: LD_EXP 92
68313: PUSH
68314: LD_VAR 0 5
68318: ARRAY
68319: PUSH
68320: LD_VAR 0 4
68324: ARRAY
68325: PUSH
68326: LD_INT 1
68328: ARRAY
68329: PUSH
68330: LD_VAR 0 2
68334: EQUAL
68335: IFFALSE 68346
// KillUnit ( vehicle ) ;
68337: LD_VAR 0 2
68341: PPUSH
68342: CALL_OW 66
68346: GO 68306
68348: POP
68349: POP
// end ;
68350: LD_VAR 0 3
68354: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
68355: LD_EXP 96
68359: NOT
68360: IFFALSE 68395
68362: GO 68364
68364: DISABLE
// begin initMiner := true ;
68365: LD_ADDR_EXP 96
68369: PUSH
68370: LD_INT 1
68372: ST_TO_ADDR
// minersList := [ ] ;
68373: LD_ADDR_EXP 97
68377: PUSH
68378: EMPTY
68379: ST_TO_ADDR
// minerMinesList := [ ] ;
68380: LD_ADDR_EXP 98
68384: PUSH
68385: EMPTY
68386: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
68387: LD_ADDR_EXP 99
68391: PUSH
68392: LD_INT 5
68394: ST_TO_ADDR
// end ;
68395: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
68396: LD_EXP 96
68400: PUSH
68401: LD_INT 34
68403: PUSH
68404: LD_INT 81
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PPUSH
68411: CALL_OW 69
68415: AND
68416: IFFALSE 68877
68418: GO 68420
68420: DISABLE
68421: LD_INT 0
68423: PPUSH
68424: PPUSH
68425: PPUSH
68426: PPUSH
// begin enable ;
68427: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
68428: LD_ADDR_VAR 0 1
68432: PUSH
68433: LD_INT 34
68435: PUSH
68436: LD_INT 81
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PPUSH
68443: CALL_OW 69
68447: PUSH
68448: FOR_IN
68449: IFFALSE 68521
// begin if not i in minersList then
68451: LD_VAR 0 1
68455: PUSH
68456: LD_EXP 97
68460: IN
68461: NOT
68462: IFFALSE 68519
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
68464: LD_ADDR_EXP 97
68468: PUSH
68469: LD_EXP 97
68473: PPUSH
68474: LD_EXP 97
68478: PUSH
68479: LD_INT 1
68481: PLUS
68482: PPUSH
68483: LD_VAR 0 1
68487: PPUSH
68488: CALL_OW 1
68492: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
68493: LD_ADDR_EXP 98
68497: PUSH
68498: LD_EXP 98
68502: PPUSH
68503: LD_EXP 98
68507: PUSH
68508: LD_INT 1
68510: PLUS
68511: PPUSH
68512: EMPTY
68513: PPUSH
68514: CALL_OW 1
68518: ST_TO_ADDR
// end end ;
68519: GO 68448
68521: POP
68522: POP
// for i := minerMinesList downto 1 do
68523: LD_ADDR_VAR 0 1
68527: PUSH
68528: DOUBLE
68529: LD_EXP 98
68533: INC
68534: ST_TO_ADDR
68535: LD_INT 1
68537: PUSH
68538: FOR_DOWNTO
68539: IFFALSE 68875
// begin if IsLive ( minersList [ i ] ) then
68541: LD_EXP 97
68545: PUSH
68546: LD_VAR 0 1
68550: ARRAY
68551: PPUSH
68552: CALL_OW 300
68556: IFFALSE 68584
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
68558: LD_EXP 97
68562: PUSH
68563: LD_VAR 0 1
68567: ARRAY
68568: PPUSH
68569: LD_EXP 98
68573: PUSH
68574: LD_VAR 0 1
68578: ARRAY
68579: PPUSH
68580: CALL_OW 505
// if not minerMinesList [ i ] then
68584: LD_EXP 98
68588: PUSH
68589: LD_VAR 0 1
68593: ARRAY
68594: NOT
68595: IFFALSE 68599
// continue ;
68597: GO 68538
// for j := minerMinesList [ i ] downto 1 do
68599: LD_ADDR_VAR 0 2
68603: PUSH
68604: DOUBLE
68605: LD_EXP 98
68609: PUSH
68610: LD_VAR 0 1
68614: ARRAY
68615: INC
68616: ST_TO_ADDR
68617: LD_INT 1
68619: PUSH
68620: FOR_DOWNTO
68621: IFFALSE 68871
// begin side := GetSide ( minersList [ i ] ) ;
68623: LD_ADDR_VAR 0 3
68627: PUSH
68628: LD_EXP 97
68632: PUSH
68633: LD_VAR 0 1
68637: ARRAY
68638: PPUSH
68639: CALL_OW 255
68643: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
68644: LD_ADDR_VAR 0 4
68648: PUSH
68649: LD_EXP 98
68653: PUSH
68654: LD_VAR 0 1
68658: ARRAY
68659: PUSH
68660: LD_VAR 0 2
68664: ARRAY
68665: PUSH
68666: LD_INT 1
68668: ARRAY
68669: PPUSH
68670: LD_EXP 98
68674: PUSH
68675: LD_VAR 0 1
68679: ARRAY
68680: PUSH
68681: LD_VAR 0 2
68685: ARRAY
68686: PUSH
68687: LD_INT 2
68689: ARRAY
68690: PPUSH
68691: CALL_OW 428
68695: ST_TO_ADDR
// if not tmp then
68696: LD_VAR 0 4
68700: NOT
68701: IFFALSE 68705
// continue ;
68703: GO 68620
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
68705: LD_VAR 0 4
68709: PUSH
68710: LD_INT 81
68712: PUSH
68713: LD_VAR 0 3
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PPUSH
68722: CALL_OW 69
68726: IN
68727: PUSH
68728: LD_EXP 98
68732: PUSH
68733: LD_VAR 0 1
68737: ARRAY
68738: PUSH
68739: LD_VAR 0 2
68743: ARRAY
68744: PUSH
68745: LD_INT 1
68747: ARRAY
68748: PPUSH
68749: LD_EXP 98
68753: PUSH
68754: LD_VAR 0 1
68758: ARRAY
68759: PUSH
68760: LD_VAR 0 2
68764: ARRAY
68765: PUSH
68766: LD_INT 2
68768: ARRAY
68769: PPUSH
68770: CALL_OW 458
68774: AND
68775: IFFALSE 68869
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
68777: LD_EXP 98
68781: PUSH
68782: LD_VAR 0 1
68786: ARRAY
68787: PUSH
68788: LD_VAR 0 2
68792: ARRAY
68793: PUSH
68794: LD_INT 1
68796: ARRAY
68797: PPUSH
68798: LD_EXP 98
68802: PUSH
68803: LD_VAR 0 1
68807: ARRAY
68808: PUSH
68809: LD_VAR 0 2
68813: ARRAY
68814: PUSH
68815: LD_INT 2
68817: ARRAY
68818: PPUSH
68819: LD_VAR 0 3
68823: PPUSH
68824: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
68828: LD_ADDR_EXP 98
68832: PUSH
68833: LD_EXP 98
68837: PPUSH
68838: LD_VAR 0 1
68842: PPUSH
68843: LD_EXP 98
68847: PUSH
68848: LD_VAR 0 1
68852: ARRAY
68853: PPUSH
68854: LD_VAR 0 2
68858: PPUSH
68859: CALL_OW 3
68863: PPUSH
68864: CALL_OW 1
68868: ST_TO_ADDR
// end ; end ;
68869: GO 68620
68871: POP
68872: POP
// end ;
68873: GO 68538
68875: POP
68876: POP
// end ;
68877: PPOPN 4
68879: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
68880: LD_INT 0
68882: PPUSH
68883: PPUSH
// result := false ;
68884: LD_ADDR_VAR 0 4
68888: PUSH
68889: LD_INT 0
68891: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
68892: LD_VAR 0 1
68896: PPUSH
68897: CALL_OW 264
68901: PUSH
68902: LD_INT 81
68904: EQUAL
68905: NOT
68906: IFFALSE 68910
// exit ;
68908: GO 69150
// index := GetElementIndex ( minersList , unit ) ;
68910: LD_ADDR_VAR 0 5
68914: PUSH
68915: LD_EXP 97
68919: PPUSH
68920: LD_VAR 0 1
68924: PPUSH
68925: CALL 13779 0 2
68929: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
68930: LD_EXP 98
68934: PUSH
68935: LD_VAR 0 5
68939: ARRAY
68940: PUSH
68941: LD_EXP 99
68945: GREATEREQUAL
68946: IFFALSE 68950
// exit ;
68948: GO 69150
// ComMoveXY ( unit , x , y ) ;
68950: LD_VAR 0 1
68954: PPUSH
68955: LD_VAR 0 2
68959: PPUSH
68960: LD_VAR 0 3
68964: PPUSH
68965: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68969: LD_INT 35
68971: PPUSH
68972: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
68976: LD_VAR 0 1
68980: PPUSH
68981: LD_VAR 0 2
68985: PPUSH
68986: LD_VAR 0 3
68990: PPUSH
68991: CALL 45134 0 3
68995: NOT
68996: PUSH
68997: LD_VAR 0 1
69001: PPUSH
69002: CALL_OW 314
69006: AND
69007: IFFALSE 69011
// exit ;
69009: GO 69150
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
69011: LD_VAR 0 2
69015: PPUSH
69016: LD_VAR 0 3
69020: PPUSH
69021: CALL_OW 428
69025: PUSH
69026: LD_VAR 0 1
69030: EQUAL
69031: PUSH
69032: LD_VAR 0 1
69036: PPUSH
69037: CALL_OW 314
69041: NOT
69042: AND
69043: IFFALSE 68969
// PlaySoundXY ( x , y , PlantMine ) ;
69045: LD_VAR 0 2
69049: PPUSH
69050: LD_VAR 0 3
69054: PPUSH
69055: LD_STRING PlantMine
69057: PPUSH
69058: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
69062: LD_VAR 0 2
69066: PPUSH
69067: LD_VAR 0 3
69071: PPUSH
69072: LD_VAR 0 1
69076: PPUSH
69077: CALL_OW 255
69081: PPUSH
69082: LD_INT 0
69084: PPUSH
69085: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
69089: LD_ADDR_EXP 98
69093: PUSH
69094: LD_EXP 98
69098: PPUSH
69099: LD_VAR 0 5
69103: PUSH
69104: LD_EXP 98
69108: PUSH
69109: LD_VAR 0 5
69113: ARRAY
69114: PUSH
69115: LD_INT 1
69117: PLUS
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PPUSH
69123: LD_VAR 0 2
69127: PUSH
69128: LD_VAR 0 3
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PPUSH
69137: CALL 13994 0 3
69141: ST_TO_ADDR
// result := true ;
69142: LD_ADDR_VAR 0 4
69146: PUSH
69147: LD_INT 1
69149: ST_TO_ADDR
// end ;
69150: LD_VAR 0 4
69154: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
69155: LD_INT 0
69157: PPUSH
69158: PPUSH
69159: PPUSH
// if not unit in minersList then
69160: LD_VAR 0 1
69164: PUSH
69165: LD_EXP 97
69169: IN
69170: NOT
69171: IFFALSE 69175
// exit ;
69173: GO 69567
// index := GetElementIndex ( minersList , unit ) ;
69175: LD_ADDR_VAR 0 6
69179: PUSH
69180: LD_EXP 97
69184: PPUSH
69185: LD_VAR 0 1
69189: PPUSH
69190: CALL 13779 0 2
69194: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
69195: LD_ADDR_VAR 0 5
69199: PUSH
69200: DOUBLE
69201: LD_EXP 98
69205: PUSH
69206: LD_VAR 0 6
69210: ARRAY
69211: INC
69212: ST_TO_ADDR
69213: LD_INT 1
69215: PUSH
69216: FOR_DOWNTO
69217: IFFALSE 69378
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
69219: LD_EXP 98
69223: PUSH
69224: LD_VAR 0 6
69228: ARRAY
69229: PUSH
69230: LD_VAR 0 5
69234: ARRAY
69235: PUSH
69236: LD_INT 1
69238: ARRAY
69239: PUSH
69240: LD_VAR 0 2
69244: EQUAL
69245: PUSH
69246: LD_EXP 98
69250: PUSH
69251: LD_VAR 0 6
69255: ARRAY
69256: PUSH
69257: LD_VAR 0 5
69261: ARRAY
69262: PUSH
69263: LD_INT 2
69265: ARRAY
69266: PUSH
69267: LD_VAR 0 3
69271: EQUAL
69272: AND
69273: IFFALSE 69376
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69275: LD_EXP 98
69279: PUSH
69280: LD_VAR 0 6
69284: ARRAY
69285: PUSH
69286: LD_VAR 0 5
69290: ARRAY
69291: PUSH
69292: LD_INT 1
69294: ARRAY
69295: PPUSH
69296: LD_EXP 98
69300: PUSH
69301: LD_VAR 0 6
69305: ARRAY
69306: PUSH
69307: LD_VAR 0 5
69311: ARRAY
69312: PUSH
69313: LD_INT 2
69315: ARRAY
69316: PPUSH
69317: LD_VAR 0 1
69321: PPUSH
69322: CALL_OW 255
69326: PPUSH
69327: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69331: LD_ADDR_EXP 98
69335: PUSH
69336: LD_EXP 98
69340: PPUSH
69341: LD_VAR 0 6
69345: PPUSH
69346: LD_EXP 98
69350: PUSH
69351: LD_VAR 0 6
69355: ARRAY
69356: PPUSH
69357: LD_VAR 0 5
69361: PPUSH
69362: CALL_OW 3
69366: PPUSH
69367: CALL_OW 1
69371: ST_TO_ADDR
// exit ;
69372: POP
69373: POP
69374: GO 69567
// end ; end ;
69376: GO 69216
69378: POP
69379: POP
// for i := minerMinesList [ index ] downto 1 do
69380: LD_ADDR_VAR 0 5
69384: PUSH
69385: DOUBLE
69386: LD_EXP 98
69390: PUSH
69391: LD_VAR 0 6
69395: ARRAY
69396: INC
69397: ST_TO_ADDR
69398: LD_INT 1
69400: PUSH
69401: FOR_DOWNTO
69402: IFFALSE 69565
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
69404: LD_EXP 98
69408: PUSH
69409: LD_VAR 0 6
69413: ARRAY
69414: PUSH
69415: LD_VAR 0 5
69419: ARRAY
69420: PUSH
69421: LD_INT 1
69423: ARRAY
69424: PPUSH
69425: LD_EXP 98
69429: PUSH
69430: LD_VAR 0 6
69434: ARRAY
69435: PUSH
69436: LD_VAR 0 5
69440: ARRAY
69441: PUSH
69442: LD_INT 2
69444: ARRAY
69445: PPUSH
69446: LD_VAR 0 2
69450: PPUSH
69451: LD_VAR 0 3
69455: PPUSH
69456: CALL_OW 298
69460: PUSH
69461: LD_INT 6
69463: LESS
69464: IFFALSE 69563
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69466: LD_EXP 98
69470: PUSH
69471: LD_VAR 0 6
69475: ARRAY
69476: PUSH
69477: LD_VAR 0 5
69481: ARRAY
69482: PUSH
69483: LD_INT 1
69485: ARRAY
69486: PPUSH
69487: LD_EXP 98
69491: PUSH
69492: LD_VAR 0 6
69496: ARRAY
69497: PUSH
69498: LD_VAR 0 5
69502: ARRAY
69503: PUSH
69504: LD_INT 2
69506: ARRAY
69507: PPUSH
69508: LD_VAR 0 1
69512: PPUSH
69513: CALL_OW 255
69517: PPUSH
69518: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69522: LD_ADDR_EXP 98
69526: PUSH
69527: LD_EXP 98
69531: PPUSH
69532: LD_VAR 0 6
69536: PPUSH
69537: LD_EXP 98
69541: PUSH
69542: LD_VAR 0 6
69546: ARRAY
69547: PPUSH
69548: LD_VAR 0 5
69552: PPUSH
69553: CALL_OW 3
69557: PPUSH
69558: CALL_OW 1
69562: ST_TO_ADDR
// end ; end ;
69563: GO 69401
69565: POP
69566: POP
// end ;
69567: LD_VAR 0 4
69571: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
69572: LD_INT 0
69574: PPUSH
69575: PPUSH
69576: PPUSH
69577: PPUSH
69578: PPUSH
69579: PPUSH
69580: PPUSH
69581: PPUSH
69582: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
69583: LD_VAR 0 1
69587: PPUSH
69588: CALL_OW 264
69592: PUSH
69593: LD_INT 81
69595: EQUAL
69596: NOT
69597: PUSH
69598: LD_VAR 0 1
69602: PUSH
69603: LD_EXP 97
69607: IN
69608: NOT
69609: OR
69610: IFFALSE 69614
// exit ;
69612: GO 69936
// index := GetElementIndex ( minersList , unit ) ;
69614: LD_ADDR_VAR 0 6
69618: PUSH
69619: LD_EXP 97
69623: PPUSH
69624: LD_VAR 0 1
69628: PPUSH
69629: CALL 13779 0 2
69633: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
69634: LD_ADDR_VAR 0 8
69638: PUSH
69639: LD_EXP 99
69643: PUSH
69644: LD_EXP 98
69648: PUSH
69649: LD_VAR 0 6
69653: ARRAY
69654: MINUS
69655: ST_TO_ADDR
// if not minesFreeAmount then
69656: LD_VAR 0 8
69660: NOT
69661: IFFALSE 69665
// exit ;
69663: GO 69936
// tmp := [ ] ;
69665: LD_ADDR_VAR 0 7
69669: PUSH
69670: EMPTY
69671: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
69672: LD_ADDR_VAR 0 5
69676: PUSH
69677: DOUBLE
69678: LD_INT 1
69680: DEC
69681: ST_TO_ADDR
69682: LD_VAR 0 8
69686: PUSH
69687: FOR_TO
69688: IFFALSE 69883
// begin _d := rand ( 0 , 5 ) ;
69690: LD_ADDR_VAR 0 11
69694: PUSH
69695: LD_INT 0
69697: PPUSH
69698: LD_INT 5
69700: PPUSH
69701: CALL_OW 12
69705: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
69706: LD_ADDR_VAR 0 12
69710: PUSH
69711: LD_INT 2
69713: PPUSH
69714: LD_INT 6
69716: PPUSH
69717: CALL_OW 12
69721: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
69722: LD_ADDR_VAR 0 9
69726: PUSH
69727: LD_VAR 0 2
69731: PPUSH
69732: LD_VAR 0 11
69736: PPUSH
69737: LD_VAR 0 12
69741: PPUSH
69742: CALL_OW 272
69746: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
69747: LD_ADDR_VAR 0 10
69751: PUSH
69752: LD_VAR 0 3
69756: PPUSH
69757: LD_VAR 0 11
69761: PPUSH
69762: LD_VAR 0 12
69766: PPUSH
69767: CALL_OW 273
69771: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
69772: LD_VAR 0 9
69776: PPUSH
69777: LD_VAR 0 10
69781: PPUSH
69782: CALL_OW 488
69786: PUSH
69787: LD_VAR 0 9
69791: PUSH
69792: LD_VAR 0 10
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_VAR 0 7
69805: IN
69806: NOT
69807: AND
69808: PUSH
69809: LD_VAR 0 9
69813: PPUSH
69814: LD_VAR 0 10
69818: PPUSH
69819: CALL_OW 458
69823: NOT
69824: AND
69825: IFFALSE 69867
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
69827: LD_ADDR_VAR 0 7
69831: PUSH
69832: LD_VAR 0 7
69836: PPUSH
69837: LD_VAR 0 7
69841: PUSH
69842: LD_INT 1
69844: PLUS
69845: PPUSH
69846: LD_VAR 0 9
69850: PUSH
69851: LD_VAR 0 10
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PPUSH
69860: CALL_OW 1
69864: ST_TO_ADDR
69865: GO 69881
// i := i - 1 ;
69867: LD_ADDR_VAR 0 5
69871: PUSH
69872: LD_VAR 0 5
69876: PUSH
69877: LD_INT 1
69879: MINUS
69880: ST_TO_ADDR
// end ;
69881: GO 69687
69883: POP
69884: POP
// for i in tmp do
69885: LD_ADDR_VAR 0 5
69889: PUSH
69890: LD_VAR 0 7
69894: PUSH
69895: FOR_IN
69896: IFFALSE 69934
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
69898: LD_VAR 0 1
69902: PPUSH
69903: LD_VAR 0 5
69907: PUSH
69908: LD_INT 1
69910: ARRAY
69911: PPUSH
69912: LD_VAR 0 5
69916: PUSH
69917: LD_INT 2
69919: ARRAY
69920: PPUSH
69921: CALL 68880 0 3
69925: NOT
69926: IFFALSE 69932
// exit ;
69928: POP
69929: POP
69930: GO 69936
69932: GO 69895
69934: POP
69935: POP
// end ;
69936: LD_VAR 0 4
69940: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
69941: LD_INT 0
69943: PPUSH
69944: PPUSH
69945: PPUSH
69946: PPUSH
69947: PPUSH
69948: PPUSH
69949: PPUSH
// if not GetClass ( unit ) = class_sniper then
69950: LD_VAR 0 1
69954: PPUSH
69955: CALL_OW 257
69959: PUSH
69960: LD_INT 5
69962: EQUAL
69963: NOT
69964: IFFALSE 69968
// exit ;
69966: GO 70356
// dist := 8 ;
69968: LD_ADDR_VAR 0 5
69972: PUSH
69973: LD_INT 8
69975: ST_TO_ADDR
// viewRange := 12 ;
69976: LD_ADDR_VAR 0 7
69980: PUSH
69981: LD_INT 12
69983: ST_TO_ADDR
// side := GetSide ( unit ) ;
69984: LD_ADDR_VAR 0 6
69988: PUSH
69989: LD_VAR 0 1
69993: PPUSH
69994: CALL_OW 255
69998: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
69999: LD_INT 61
70001: PPUSH
70002: LD_VAR 0 6
70006: PPUSH
70007: CALL_OW 321
70011: PUSH
70012: LD_INT 2
70014: EQUAL
70015: IFFALSE 70025
// viewRange := 16 ;
70017: LD_ADDR_VAR 0 7
70021: PUSH
70022: LD_INT 16
70024: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
70025: LD_VAR 0 1
70029: PPUSH
70030: LD_VAR 0 2
70034: PPUSH
70035: LD_VAR 0 3
70039: PPUSH
70040: CALL_OW 297
70044: PUSH
70045: LD_VAR 0 5
70049: GREATER
70050: IFFALSE 70129
// begin ComMoveXY ( unit , x , y ) ;
70052: LD_VAR 0 1
70056: PPUSH
70057: LD_VAR 0 2
70061: PPUSH
70062: LD_VAR 0 3
70066: PPUSH
70067: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
70071: LD_INT 35
70073: PPUSH
70074: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
70078: LD_VAR 0 1
70082: PPUSH
70083: LD_VAR 0 2
70087: PPUSH
70088: LD_VAR 0 3
70092: PPUSH
70093: CALL 45134 0 3
70097: NOT
70098: IFFALSE 70102
// exit ;
70100: GO 70356
// until GetDistUnitXY ( unit , x , y ) < dist ;
70102: LD_VAR 0 1
70106: PPUSH
70107: LD_VAR 0 2
70111: PPUSH
70112: LD_VAR 0 3
70116: PPUSH
70117: CALL_OW 297
70121: PUSH
70122: LD_VAR 0 5
70126: LESS
70127: IFFALSE 70071
// end ; ComTurnXY ( unit , x , y ) ;
70129: LD_VAR 0 1
70133: PPUSH
70134: LD_VAR 0 2
70138: PPUSH
70139: LD_VAR 0 3
70143: PPUSH
70144: CALL_OW 118
// wait ( 5 ) ;
70148: LD_INT 5
70150: PPUSH
70151: CALL_OW 67
// _d := GetDir ( unit ) ;
70155: LD_ADDR_VAR 0 10
70159: PUSH
70160: LD_VAR 0 1
70164: PPUSH
70165: CALL_OW 254
70169: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
70170: LD_ADDR_VAR 0 8
70174: PUSH
70175: LD_VAR 0 1
70179: PPUSH
70180: CALL_OW 250
70184: PPUSH
70185: LD_VAR 0 10
70189: PPUSH
70190: LD_VAR 0 5
70194: PPUSH
70195: CALL_OW 272
70199: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
70200: LD_ADDR_VAR 0 9
70204: PUSH
70205: LD_VAR 0 1
70209: PPUSH
70210: CALL_OW 251
70214: PPUSH
70215: LD_VAR 0 10
70219: PPUSH
70220: LD_VAR 0 5
70224: PPUSH
70225: CALL_OW 273
70229: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70230: LD_VAR 0 8
70234: PPUSH
70235: LD_VAR 0 9
70239: PPUSH
70240: CALL_OW 488
70244: NOT
70245: IFFALSE 70249
// exit ;
70247: GO 70356
// ComAnimCustom ( unit , 1 ) ;
70249: LD_VAR 0 1
70253: PPUSH
70254: LD_INT 1
70256: PPUSH
70257: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
70261: LD_VAR 0 8
70265: PPUSH
70266: LD_VAR 0 9
70270: PPUSH
70271: LD_VAR 0 6
70275: PPUSH
70276: LD_VAR 0 7
70280: PPUSH
70281: CALL_OW 330
// repeat wait ( 1 ) ;
70285: LD_INT 1
70287: PPUSH
70288: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
70292: LD_VAR 0 1
70296: PPUSH
70297: CALL_OW 316
70301: PUSH
70302: LD_VAR 0 1
70306: PPUSH
70307: CALL_OW 314
70311: OR
70312: PUSH
70313: LD_VAR 0 1
70317: PPUSH
70318: CALL_OW 302
70322: NOT
70323: OR
70324: PUSH
70325: LD_VAR 0 1
70329: PPUSH
70330: CALL_OW 301
70334: OR
70335: IFFALSE 70285
// RemoveSeeing ( _x , _y , side ) ;
70337: LD_VAR 0 8
70341: PPUSH
70342: LD_VAR 0 9
70346: PPUSH
70347: LD_VAR 0 6
70351: PPUSH
70352: CALL_OW 331
// end ;
70356: LD_VAR 0 4
70360: RET
