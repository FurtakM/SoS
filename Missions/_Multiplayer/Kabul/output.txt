// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 5688 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 7031 0 1
  44: PPUSH
  45: CALL 133 0 1
// Multiplayer_Start ;
  49: CALL 8989 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 9105 0 0
// end ;
  69: END
// export debug , game , botSides , activeArabAttacks ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := 1 ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 1
  80: ST_TO_ADDR
// botSides := [ 2 ] ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: ST_TO_ADDR
// activeArabAttacks := false ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// end ;
 100: LD_VAR 0 1
 104: RET
// every 0 0$01 trigger game and not debug_strings do
 105: LD_EXP 2
 109: PUSH
 110: LD_OWVAR 48
 114: NOT
 115: AND
 116: IFFALSE 132
 118: GO 120
 120: DISABLE
// begin enable ;
 121: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 122: LD_ADDR_OWVAR 47
 126: PUSH
 127: CALL 9641 0 0
 131: ST_TO_ADDR
// end ; end_of_file
 132: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp , arRVehicles ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
 142: PPUSH
 143: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
 144: LD_ADDR_EXP 5
 148: PUSH
 149: LD_VAR 0 1
 153: PPUSH
 154: LD_INT 2
 156: PPUSH
 157: LD_INT 1
 159: PPUSH
 160: CALL 15226 0 3
 164: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
 165: LD_ADDR_EXP 6
 169: PUSH
 170: LD_INT 13
 172: PUSH
 173: LD_INT 1
 175: PUSH
 176: LD_INT 1
 178: PUSH
 179: LD_INT 27
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 13
 190: PUSH
 191: LD_INT 1
 193: PUSH
 194: LD_INT 1
 196: PUSH
 197: LD_INT 27
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: PUSH
 206: LD_INT 13
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: LD_INT 1
 214: PUSH
 215: LD_INT 28
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 13
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: LD_INT 1
 232: PUSH
 233: LD_INT 25
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 13
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 1
 250: PUSH
 251: LD_INT 27
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: ST_TO_ADDR
// arBuildings := [ ] ;
 267: LD_ADDR_EXP 7
 271: PUSH
 272: EMPTY
 273: ST_TO_ADDR
// arVehicles := [ ] ;
 274: LD_ADDR_EXP 8
 278: PUSH
 279: EMPTY
 280: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
 281: LD_ADDR_EXP 9
 285: PUSH
 286: EMPTY
 287: ST_TO_ADDR
// arRVehicles := [ ] ;
 288: LD_ADDR_EXP 16
 292: PUSH
 293: EMPTY
 294: ST_TO_ADDR
// arDrivers := [ ] ;
 295: LD_ADDR_EXP 10
 299: PUSH
 300: EMPTY
 301: ST_TO_ADDR
// arVehiclesCounter := 3 ;
 302: LD_ADDR_EXP 12
 306: PUSH
 307: LD_INT 3
 309: ST_TO_ADDR
// arMinesList := [ ] ;
 310: LD_ADDR_EXP 13
 314: PUSH
 315: EMPTY
 316: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
 317: LD_ADDR_EXP 11
 321: PUSH
 322: LD_INT 8
 324: PUSH
 325: LD_INT 11
 327: PUSH
 328: LD_INT 12
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: PUSH
 336: LD_OWVAR 67
 340: ARRAY
 341: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
 342: LD_VAR 0 1
 346: PPUSH
 347: LD_INT 3
 349: PPUSH
 350: CALL 57793 0 2
// PlaceMines ( minefieldArea , [ 24 , 36 , 48 ] [ Difficulty ] ) ;
 354: LD_INT 4
 356: PPUSH
 357: LD_INT 24
 359: PUSH
 360: LD_INT 36
 362: PUSH
 363: LD_INT 48
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_OWVAR 67
 375: ARRAY
 376: PPUSH
 377: CALL 958 0 2
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
 381: LD_ADDR_VAR 0 8
 385: PUSH
 386: LD_INT 3
 388: PUSH
 389: LD_INT 5
 391: PUSH
 392: LD_INT 7
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: LIST
 399: PUSH
 400: LD_OWVAR 67
 404: ARRAY
 405: ST_TO_ADDR
// uc_side := side ;
 406: LD_ADDR_OWVAR 20
 410: PUSH
 411: LD_VAR 0 1
 415: ST_TO_ADDR
// uc_nation := 2 ;
 416: LD_ADDR_OWVAR 21
 420: PUSH
 421: LD_INT 2
 423: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
 424: LD_ADDR_EXP 14
 428: PUSH
 429: LD_INT 2
 431: PPUSH
 432: LD_INT 1
 434: PPUSH
 435: LD_STRING 
 437: PPUSH
 438: LD_VAR 0 8
 442: PPUSH
 443: LD_INT 800
 445: PUSH
 446: LD_INT 120
 448: PUSH
 449: LD_INT 0
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: LIST
 456: PPUSH
 457: LD_INT 10
 459: PUSH
 460: LD_INT 11
 462: PUSH
 463: LD_INT 12
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: LIST
 470: PUSH
 471: LD_OWVAR 67
 475: ARRAY
 476: PUSH
 477: LD_INT 4
 479: PUSH
 480: LD_INT 6
 482: PUSH
 483: LD_INT 3
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: PPUSH
 492: CALL 23824 0 6
 496: ST_TO_ADDR
// arForceTmp := [ ] ;
 497: LD_ADDR_EXP 15
 501: PUSH
 502: EMPTY
 503: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
 504: LD_ADDR_VAR 0 3
 508: PUSH
 509: LD_INT 22
 511: PUSH
 512: LD_VAR 0 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 30
 523: PUSH
 524: LD_INT 31
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 3
 533: PUSH
 534: LD_INT 95
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: PUSH
 548: LD_INT 58
 550: PUSH
 551: EMPTY
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: PPUSH
 560: CALL_OW 69
 564: PUSH
 565: FOR_IN
 566: IFFALSE 695
// begin d := GetDir ( i ) ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: LD_VAR 0 3
 577: PPUSH
 578: CALL_OW 254
 582: ST_TO_ADDR
// if d < 3 then
 583: LD_VAR 0 4
 587: PUSH
 588: LD_INT 3
 590: LESS
 591: IFFALSE 609
// d := d + 3 else
 593: LD_ADDR_VAR 0 4
 597: PUSH
 598: LD_VAR 0 4
 602: PUSH
 603: LD_INT 3
 605: PLUS
 606: ST_TO_ADDR
 607: GO 623
// d := d - 3 ;
 609: LD_ADDR_VAR 0 4
 613: PUSH
 614: LD_VAR 0 4
 618: PUSH
 619: LD_INT 3
 621: MINUS
 622: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
 623: LD_INT 0
 625: PPUSH
 626: LD_VAR 0 8
 630: PPUSH
 631: CALL_OW 381
// un := CreateHuman ;
 635: LD_ADDR_VAR 0 6
 639: PUSH
 640: CALL_OW 44
 644: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
 645: LD_ADDR_EXP 15
 649: PUSH
 650: LD_EXP 15
 654: PPUSH
 655: LD_VAR 0 6
 659: PPUSH
 660: CALL 52854 0 2
 664: ST_TO_ADDR
// SetDir ( un , d ) ;
 665: LD_VAR 0 6
 669: PPUSH
 670: LD_VAR 0 4
 674: PPUSH
 675: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 679: LD_VAR 0 6
 683: PPUSH
 684: LD_VAR 0 3
 688: PPUSH
 689: CALL_OW 52
// end ;
 693: GO 565
 695: POP
 696: POP
// for i := 1 to 2 do
 697: LD_ADDR_VAR 0 3
 701: PUSH
 702: DOUBLE
 703: LD_INT 1
 705: DEC
 706: ST_TO_ADDR
 707: LD_INT 2
 709: PUSH
 710: FOR_TO
 711: IFFALSE 795
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_control_tower , 100 ) ;
 713: LD_INT 14
 715: PPUSH
 716: LD_INT 2
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: LD_INT 31
 724: PPUSH
 725: LD_INT 100
 727: PPUSH
 728: CALL 20003 0 5
// un := CreateVehicle ;
 732: LD_ADDR_VAR 0 6
 736: PUSH
 737: CALL_OW 45
 741: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 31 , 6 , false ) ;
 742: LD_VAR 0 6
 746: PPUSH
 747: LD_INT 102
 749: PPUSH
 750: LD_INT 31
 752: PPUSH
 753: LD_INT 6
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 50
// PrepareMechanic ( false , skill + 2 ) ;
 763: LD_INT 0
 765: PPUSH
 766: LD_VAR 0 8
 770: PUSH
 771: LD_INT 2
 773: PLUS
 774: PPUSH
 775: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
 779: CALL_OW 44
 783: PPUSH
 784: LD_VAR 0 6
 788: PPUSH
 789: CALL_OW 52
// end ;
 793: GO 710
 795: POP
 796: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
 797: LD_ADDR_VAR 0 3
 801: PUSH
 802: LD_INT 22
 804: PUSH
 805: LD_VAR 0 1
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 21
 816: PUSH
 817: LD_INT 3
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PPUSH
 828: CALL_OW 69
 832: PUSH
 833: FOR_IN
 834: IFFALSE 867
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
 836: LD_VAR 0 3
 840: PPUSH
 841: LD_INT 3
 843: PUSH
 844: LD_INT 5
 846: PUSH
 847: LD_INT 7
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: LIST
 854: PUSH
 855: LD_OWVAR 67
 859: ARRAY
 860: PPUSH
 861: CALL_OW 241
 865: GO 833
 867: POP
 868: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
 869: LD_ADDR_VAR 0 3
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: LD_INT 30
 888: PUSH
 889: LD_INT 32
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PPUSH
 900: CALL_OW 69
 904: PUSH
 905: FOR_IN
 906: IFFALSE 951
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] ) ;
 908: LD_VAR 0 3
 912: PPUSH
 913: LD_INT 27
 915: PUSH
 916: LD_INT 25
 918: PUSH
 919: LD_INT 28
 921: PUSH
 922: LD_INT 27
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_VAR 0 3
 935: PUSH
 936: LD_INT 4
 938: MOD
 939: PUSH
 940: LD_INT 1
 942: PLUS
 943: ARRAY
 944: PPUSH
 945: CALL_OW 431
 949: GO 905
 951: POP
 952: POP
// end ;
 953: LD_VAR 0 2
 957: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
 958: LD_INT 0
 960: PPUSH
 961: PPUSH
 962: PPUSH
 963: PPUSH
// tmp := AreaToList ( area , 0 ) ;
 964: LD_ADDR_VAR 0 5
 968: PUSH
 969: LD_VAR 0 1
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 517
 981: ST_TO_ADDR
// if not tmp then
 982: LD_VAR 0 5
 986: NOT
 987: IFFALSE 991
// exit ;
 989: GO 1233
// for i := 1 to n do
 991: LD_ADDR_VAR 0 4
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 2
1005: PUSH
1006: FOR_TO
1007: IFFALSE 1231
// begin r := rand ( 1 , tmp [ 1 ] ) ;
1009: LD_ADDR_VAR 0 6
1013: PUSH
1014: LD_INT 1
1016: PPUSH
1017: LD_VAR 0 5
1021: PUSH
1022: LD_INT 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 12
1030: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 1 ] , 0 ) ;
1031: LD_VAR 0 5
1035: PUSH
1036: LD_INT 1
1038: ARRAY
1039: PUSH
1040: LD_VAR 0 6
1044: ARRAY
1045: PPUSH
1046: LD_VAR 0 5
1050: PUSH
1051: LD_INT 2
1053: ARRAY
1054: PUSH
1055: LD_VAR 0 6
1059: ARRAY
1060: PPUSH
1061: LD_EXP 3
1065: PUSH
1066: LD_INT 1
1068: ARRAY
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
1077: LD_ADDR_EXP 13
1081: PUSH
1082: LD_EXP 13
1086: PPUSH
1087: LD_EXP 13
1091: PUSH
1092: LD_INT 1
1094: PLUS
1095: PPUSH
1096: LD_VAR 0 5
1100: PUSH
1101: LD_INT 1
1103: ARRAY
1104: PUSH
1105: LD_VAR 0 6
1109: ARRAY
1110: PPUSH
1111: CALL_OW 2
1115: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
1116: LD_ADDR_EXP 13
1120: PUSH
1121: LD_EXP 13
1125: PPUSH
1126: LD_EXP 13
1130: PUSH
1131: LD_INT 1
1133: PLUS
1134: PPUSH
1135: LD_VAR 0 5
1139: PUSH
1140: LD_INT 2
1142: ARRAY
1143: PUSH
1144: LD_VAR 0 6
1148: ARRAY
1149: PPUSH
1150: CALL_OW 2
1154: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
1155: LD_ADDR_VAR 0 5
1159: PUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_VAR 0 5
1172: PUSH
1173: LD_INT 1
1175: ARRAY
1176: PPUSH
1177: LD_VAR 0 6
1181: PPUSH
1182: CALL_OW 3
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
1192: LD_ADDR_VAR 0 5
1196: PUSH
1197: LD_VAR 0 5
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: LD_VAR 0 5
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_VAR 0 6
1218: PPUSH
1219: CALL_OW 3
1223: PPUSH
1224: CALL_OW 1
1228: ST_TO_ADDR
// end ;
1229: GO 1006
1231: POP
1232: POP
// end ;
1233: LD_VAR 0 3
1237: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , j , tmp , undone , ct , inside , veh , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
1238: LD_INT 0
1240: PPUSH
1241: PPUSH
1242: PPUSH
1243: PPUSH
1244: PPUSH
1245: PPUSH
1246: PPUSH
1247: PPUSH
1248: PPUSH
1249: PPUSH
1250: PPUSH
1251: PPUSH
1252: PPUSH
1253: PPUSH
1254: PPUSH
1255: PPUSH
1256: PPUSH
1257: PPUSH
1258: PPUSH
1259: PPUSH
1260: PPUSH
1261: PPUSH
1262: PPUSH
1263: PPUSH
1264: PPUSH
1265: PPUSH
1266: PPUSH
1267: PPUSH
1268: PPUSH
1269: PPUSH
1270: PPUSH
// enable ;
1271: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
1272: LD_ADDR_VAR 0 11
1276: PUSH
1277: LD_INT 81
1279: PUSH
1280: LD_VAR 0 1
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// if tmp then
1294: LD_VAR 0 11
1298: IFFALSE 1319
// enemySide := GetSide ( tmp [ 1 ] ) ;
1300: LD_ADDR_VAR 0 38
1304: PUSH
1305: LD_VAR 0 11
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 255
1318: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
1319: LD_ADDR_VAR 0 26
1323: PUSH
1324: LD_VAR 0 3
1328: PPUSH
1329: LD_INT 81
1331: PUSH
1332: LD_VAR 0 1
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PPUSH
1341: CALL_OW 70
1345: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
1346: LD_ADDR_VAR 0 27
1350: PUSH
1351: LD_VAR 0 4
1355: PPUSH
1356: LD_INT 81
1358: PUSH
1359: LD_VAR 0 1
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PPUSH
1368: CALL_OW 70
1372: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ;
1373: LD_ADDR_VAR 0 13
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_VAR 0 1
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 50
1392: PUSH
1393: EMPTY
1394: LIST
1395: PUSH
1396: LD_INT 34
1398: PUSH
1399: LD_INT 31
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: PPUSH
1411: CALL_OW 69
1415: ST_TO_ADDR
// if ct then
1416: LD_VAR 0 13
1420: IFFALSE 1511
// begin veh := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) ;
1422: LD_ADDR_VAR 0 15
1426: PUSH
1427: LD_INT 22
1429: PUSH
1430: LD_VAR 0 1
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 3
1441: PUSH
1442: LD_INT 61
1444: PUSH
1445: EMPTY
1446: LIST
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 50
1454: PUSH
1455: EMPTY
1456: LIST
1457: PUSH
1458: LD_INT 33
1460: PUSH
1461: LD_INT 2
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: PPUSH
1474: CALL_OW 69
1478: ST_TO_ADDR
// if veh then
1479: LD_VAR 0 15
1483: IFFALSE 1511
// for i in veh do
1485: LD_ADDR_VAR 0 9
1489: PUSH
1490: LD_VAR 0 15
1494: PUSH
1495: FOR_IN
1496: IFFALSE 1509
// Connect ( i ) ;
1498: LD_VAR 0 9
1502: PPUSH
1503: CALL 23471 0 1
1507: GO 1495
1509: POP
1510: POP
// end ; vehicles := arVehicles ;
1511: LD_ADDR_VAR 0 30
1515: PUSH
1516: LD_EXP 8
1520: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1521: LD_ADDR_VAR 0 36
1525: PUSH
1526: LD_VAR 0 3
1530: PPUSH
1531: LD_INT 22
1533: PUSH
1534: LD_VAR 0 1
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 30
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: LD_INT 30
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// if depot then
1580: LD_VAR 0 36
1584: IFFALSE 1600
// depot := depot [ 1 ] ;
1586: LD_ADDR_VAR 0 36
1590: PUSH
1591: LD_VAR 0 36
1595: PUSH
1596: LD_INT 1
1598: ARRAY
1599: ST_TO_ADDR
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
1600: LD_ADDR_VAR 0 22
1604: PUSH
1605: LD_VAR 0 5
1609: PPUSH
1610: LD_INT 25
1612: PUSH
1613: LD_INT 4
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 50
1622: PUSH
1623: EMPTY
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PPUSH
1630: CALL_OW 72
1634: ST_TO_ADDR
// if arTech then
1635: LD_EXP 5
1639: IFFALSE 2001
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1641: LD_ADDR_VAR 0 16
1645: PUSH
1646: LD_VAR 0 3
1650: PPUSH
1651: LD_INT 22
1653: PUSH
1654: LD_VAR 0 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PUSH
1663: LD_INT 50
1665: PUSH
1666: EMPTY
1667: LIST
1668: PUSH
1669: LD_INT 2
1671: PUSH
1672: LD_INT 30
1674: PUSH
1675: LD_INT 6
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: LD_INT 30
1684: PUSH
1685: LD_INT 7
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PUSH
1692: LD_INT 30
1694: PUSH
1695: LD_INT 8
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: PPUSH
1713: CALL_OW 70
1717: ST_TO_ADDR
// if lab then
1718: LD_VAR 0 16
1722: IFFALSE 2001
// begin for j := 1 to Count ( lab ) do
1724: LD_ADDR_VAR 0 10
1728: PUSH
1729: DOUBLE
1730: LD_INT 1
1732: DEC
1733: ST_TO_ADDR
1734: LD_VAR 0 16
1738: PPUSH
1739: CALL 17265 0 1
1743: PUSH
1744: FOR_TO
1745: IFFALSE 1999
// if BuildingStatus ( lab [ j ] ) = bs_idle then
1747: LD_VAR 0 16
1751: PUSH
1752: LD_VAR 0 10
1756: ARRAY
1757: PPUSH
1758: CALL_OW 461
1762: PUSH
1763: LD_INT 2
1765: EQUAL
1766: IFFALSE 1849
// begin for i in arTech do
1768: LD_ADDR_VAR 0 9
1772: PUSH
1773: LD_EXP 5
1777: PUSH
1778: FOR_IN
1779: IFFALSE 1845
// if CanBeResearched ( lab [ j ] , i ) and GetTech ( i , side ) = state_enabled then
1781: LD_VAR 0 16
1785: PUSH
1786: LD_VAR 0 10
1790: ARRAY
1791: PPUSH
1792: LD_VAR 0 9
1796: PPUSH
1797: CALL_OW 430
1801: PUSH
1802: LD_VAR 0 9
1806: PPUSH
1807: LD_VAR 0 1
1811: PPUSH
1812: CALL_OW 321
1816: PUSH
1817: LD_INT 1
1819: EQUAL
1820: AND
1821: IFFALSE 1843
// begin AddComResearch ( lab [ j ] , i ) ;
1823: LD_VAR 0 16
1827: PUSH
1828: LD_VAR 0 10
1832: ARRAY
1833: PPUSH
1834: LD_VAR 0 9
1838: PPUSH
1839: CALL_OW 184
// end ;
1843: GO 1778
1845: POP
1846: POP
// end else
1847: GO 1997
// if BuildingStatus ( lab [ j ] ) = bs_need_people then
1849: LD_VAR 0 16
1853: PUSH
1854: LD_VAR 0 10
1858: ARRAY
1859: PPUSH
1860: CALL_OW 461
1864: PUSH
1865: LD_INT 6
1867: EQUAL
1868: IFFALSE 1997
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
1870: LD_ADDR_VAR 0 9
1874: PUSH
1875: LD_VAR 0 22
1879: PPUSH
1880: LD_INT 3
1882: PUSH
1883: LD_INT 120
1885: PUSH
1886: LD_INT 10
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PPUSH
1897: CALL_OW 72
1901: PUSH
1902: FOR_IN
1903: IFFALSE 1995
// begin inside := IsInUnit ( i ) ;
1905: LD_ADDR_VAR 0 14
1909: PUSH
1910: LD_VAR 0 9
1914: PPUSH
1915: CALL_OW 310
1919: ST_TO_ADDR
// if not inside then
1920: LD_VAR 0 14
1924: NOT
1925: IFFALSE 1949
// ComEnterUnit ( i , lab [ j ] ) else
1927: LD_VAR 0 9
1931: PPUSH
1932: LD_VAR 0 16
1936: PUSH
1937: LD_VAR 0 10
1941: ARRAY
1942: PPUSH
1943: CALL_OW 120
1947: GO 1993
// if BuildingStatus ( inside ) = bs_idle then
1949: LD_VAR 0 14
1953: PPUSH
1954: CALL_OW 461
1958: PUSH
1959: LD_INT 2
1961: EQUAL
1962: IFFALSE 1993
// begin ComExitBuilding ( i ) ;
1964: LD_VAR 0 9
1968: PPUSH
1969: CALL_OW 122
// AddComEnterUnit ( i , lab [ j ] ) ;
1973: LD_VAR 0 9
1977: PPUSH
1978: LD_VAR 0 16
1982: PUSH
1983: LD_VAR 0 10
1987: ARRAY
1988: PPUSH
1989: CALL_OW 180
// end ; end ;
1993: GO 1902
1995: POP
1996: POP
// end ;
1997: GO 1744
1999: POP
2000: POP
// end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2001: LD_ADDR_VAR 0 33
2005: PUSH
2006: LD_VAR 0 3
2010: PPUSH
2011: LD_INT 22
2013: PUSH
2014: LD_VAR 0 1
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 30
2025: PUSH
2026: LD_INT 3
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: PUSH
2033: LD_INT 50
2035: PUSH
2036: EMPTY
2037: LIST
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 70
2048: ST_TO_ADDR
// if fac then
2049: LD_VAR 0 33
2053: IFFALSE 2388
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2055: LD_VAR 0 33
2059: PUSH
2060: LD_INT 1
2062: ARRAY
2063: PPUSH
2064: CALL_OW 461
2068: PUSH
2069: LD_INT 2
2071: EQUAL
2072: IFFALSE 2388
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2074: LD_ADDR_VAR 0 34
2078: PUSH
2079: LD_VAR 0 3
2083: PPUSH
2084: LD_INT 2
2086: PUSH
2087: LD_INT 30
2089: PUSH
2090: LD_INT 32
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 30
2099: PUSH
2100: LD_INT 33
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 35
2114: PUSH
2115: LD_INT 0
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PPUSH
2126: CALL_OW 70
2130: ST_TO_ADDR
// if emptyTowers then
2131: LD_VAR 0 34
2135: IFFALSE 2185
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
2137: LD_ADDR_VAR 0 35
2141: PUSH
2142: LD_VAR 0 34
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PPUSH
2151: LD_VAR 0 3
2155: PPUSH
2156: CALL 25510 0 2
2160: ST_TO_ADDR
// if weapon then
2161: LD_VAR 0 35
2165: IFFALSE 2185
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2167: LD_VAR 0 34
2171: PUSH
2172: LD_INT 1
2174: ARRAY
2175: PPUSH
2176: LD_VAR 0 35
2180: PPUSH
2181: CALL_OW 148
// end ; if arConstructList then
2185: LD_EXP 6
2189: IFFALSE 2388
// for i := 1 to Count ( arConstructList ) do
2191: LD_ADDR_VAR 0 9
2195: PUSH
2196: DOUBLE
2197: LD_INT 1
2199: DEC
2200: ST_TO_ADDR
2201: LD_EXP 6
2205: PPUSH
2206: CALL 17265 0 1
2210: PUSH
2211: FOR_TO
2212: IFFALSE 2386
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
2214: LD_VAR 0 33
2218: PUSH
2219: LD_INT 1
2221: ARRAY
2222: PPUSH
2223: LD_EXP 6
2227: PUSH
2228: LD_VAR 0 9
2232: ARRAY
2233: PUSH
2234: LD_INT 1
2236: ARRAY
2237: PPUSH
2238: LD_EXP 6
2242: PUSH
2243: LD_VAR 0 9
2247: ARRAY
2248: PUSH
2249: LD_INT 2
2251: ARRAY
2252: PPUSH
2253: LD_EXP 6
2257: PUSH
2258: LD_VAR 0 9
2262: ARRAY
2263: PUSH
2264: LD_INT 3
2266: ARRAY
2267: PPUSH
2268: LD_EXP 6
2272: PUSH
2273: LD_VAR 0 9
2277: ARRAY
2278: PUSH
2279: LD_INT 4
2281: ARRAY
2282: PPUSH
2283: CALL_OW 448
2287: IFFALSE 2384
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
2289: LD_VAR 0 33
2293: PUSH
2294: LD_INT 1
2296: ARRAY
2297: PPUSH
2298: LD_EXP 6
2302: PUSH
2303: LD_VAR 0 9
2307: ARRAY
2308: PUSH
2309: LD_INT 1
2311: ARRAY
2312: PPUSH
2313: LD_EXP 6
2317: PUSH
2318: LD_VAR 0 9
2322: ARRAY
2323: PUSH
2324: LD_INT 2
2326: ARRAY
2327: PPUSH
2328: LD_EXP 6
2332: PUSH
2333: LD_VAR 0 9
2337: ARRAY
2338: PUSH
2339: LD_INT 3
2341: ARRAY
2342: PPUSH
2343: LD_EXP 6
2347: PUSH
2348: LD_VAR 0 9
2352: ARRAY
2353: PUSH
2354: LD_INT 4
2356: ARRAY
2357: PPUSH
2358: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
2362: LD_ADDR_EXP 6
2366: PUSH
2367: LD_EXP 6
2371: PPUSH
2372: LD_VAR 0 9
2376: PPUSH
2377: CALL_OW 3
2381: ST_TO_ADDR
// break ;
2382: GO 2386
// end ; end ;
2384: GO 2211
2386: POP
2387: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2388: LD_ADDR_VAR 0 11
2392: PUSH
2393: LD_VAR 0 3
2397: PPUSH
2398: LD_INT 21
2400: PUSH
2401: LD_INT 3
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 3
2410: PUSH
2411: LD_INT 57
2413: PUSH
2414: EMPTY
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PUSH
2421: LD_INT 3
2423: PUSH
2424: LD_INT 24
2426: PUSH
2427: LD_INT 1000
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: LIST
2442: PPUSH
2443: CALL_OW 70
2447: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
2448: LD_ADDR_VAR 0 21
2452: PUSH
2453: LD_VAR 0 3
2457: PPUSH
2458: CALL_OW 435
2462: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
2463: LD_ADDR_VAR 0 18
2467: PUSH
2468: LD_VAR 0 5
2472: PPUSH
2473: LD_INT 25
2475: PUSH
2476: LD_INT 3
2478: PUSH
2479: EMPTY
2480: LIST
2481: LIST
2482: PUSH
2483: LD_INT 50
2485: PUSH
2486: EMPTY
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PPUSH
2493: CALL_OW 72
2497: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
2498: LD_VAR 0 18
2502: PPUSH
2503: LD_INT 3
2505: PUSH
2506: LD_INT 120
2508: PUSH
2509: LD_INT 7
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 3
2522: PUSH
2523: LD_INT 54
2525: PUSH
2526: EMPTY
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: PPUSH
2537: CALL_OW 72
2541: PUSH
2542: LD_VAR 0 33
2546: PUSH
2547: LD_INT 1
2549: ARRAY
2550: PPUSH
2551: CALL_OW 302
2555: AND
2556: IFFALSE 2615
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
2558: LD_VAR 0 18
2562: PPUSH
2563: LD_INT 3
2565: PUSH
2566: LD_INT 120
2568: PUSH
2569: LD_INT 7
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 3
2582: PUSH
2583: LD_INT 54
2585: PUSH
2586: EMPTY
2587: LIST
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: PPUSH
2597: CALL_OW 72
2601: PPUSH
2602: LD_VAR 0 33
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: CALL_OW 120
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2615: LD_ADDR_VAR 0 16
2619: PUSH
2620: LD_VAR 0 3
2624: PPUSH
2625: LD_INT 2
2627: PUSH
2628: LD_INT 30
2630: PUSH
2631: LD_INT 6
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: PUSH
2638: LD_INT 30
2640: PUSH
2641: LD_INT 7
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 30
2650: PUSH
2651: LD_INT 8
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: PPUSH
2664: CALL_OW 70
2668: ST_TO_ADDR
// if sci then
2669: LD_VAR 0 22
2673: IFFALSE 2916
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
2675: LD_ADDR_VAR 0 24
2679: PUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: LD_INT 95
2687: PUSH
2688: LD_VAR 0 3
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: LD_INT 120
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PPUSH
2711: CALL_OW 72
2715: ST_TO_ADDR
// if hurtUnits then
2716: LD_VAR 0 24
2720: IFFALSE 2815
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
2722: LD_ADDR_VAR 0 9
2726: PUSH
2727: LD_VAR 0 22
2731: PPUSH
2732: LD_INT 3
2734: PUSH
2735: LD_INT 120
2737: PUSH
2738: LD_INT 10
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PPUSH
2749: CALL_OW 72
2753: PUSH
2754: FOR_IN
2755: IFFALSE 2811
// begin SetTag ( i , tHealer ) ;
2757: LD_VAR 0 9
2761: PPUSH
2762: LD_INT 10
2764: PPUSH
2765: CALL_OW 109
// if IsInUnit ( i ) then
2769: LD_VAR 0 9
2773: PPUSH
2774: CALL_OW 310
2778: IFFALSE 2791
// ComExitBuilding ( i ) else
2780: LD_VAR 0 9
2784: PPUSH
2785: CALL_OW 122
2789: GO 2809
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2791: LD_VAR 0 9
2795: PPUSH
2796: LD_VAR 0 24
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PPUSH
2805: CALL_OW 128
// end ;
2809: GO 2754
2811: POP
2812: POP
// end else
2813: GO 2916
// if lab and UnitFilter ( sci , [ f_tag , tHealer ] ) then
2815: LD_VAR 0 16
2819: PUSH
2820: LD_VAR 0 22
2824: PPUSH
2825: LD_INT 120
2827: PUSH
2828: LD_INT 10
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 72
2839: AND
2840: IFFALSE 2916
// begin for i in UnitFilter ( sci , [ f_tag , tHealer ] ) do
2842: LD_ADDR_VAR 0 9
2846: PUSH
2847: LD_VAR 0 22
2851: PPUSH
2852: LD_INT 120
2854: PUSH
2855: LD_INT 10
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: PPUSH
2862: CALL_OW 72
2866: PUSH
2867: FOR_IN
2868: IFFALSE 2914
// begin SetTag ( i , 0 ) ;
2870: LD_VAR 0 9
2874: PPUSH
2875: LD_INT 0
2877: PPUSH
2878: CALL_OW 109
// if not IsInUnit ( i ) then
2882: LD_VAR 0 9
2886: PPUSH
2887: CALL_OW 310
2891: NOT
2892: IFFALSE 2912
// ComEnterUnit ( i , lab [ 1 ] ) ;
2894: LD_VAR 0 9
2898: PPUSH
2899: LD_VAR 0 16
2903: PUSH
2904: LD_INT 1
2906: ARRAY
2907: PPUSH
2908: CALL_OW 120
// end ;
2912: GO 2867
2914: POP
2915: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
2916: LD_ADDR_VAR 0 17
2920: PUSH
2921: LD_VAR 0 5
2925: PPUSH
2926: LD_INT 25
2928: PUSH
2929: LD_INT 2
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PPUSH
2936: CALL_OW 72
2940: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
2941: LD_ADDR_VAR 0 37
2945: PUSH
2946: LD_EXP 7
2950: ST_TO_ADDR
// if eng then
2951: LD_VAR 0 17
2955: IFFALSE 3789
// begin for i in eng do
2957: LD_ADDR_VAR 0 9
2961: PUSH
2962: LD_VAR 0 17
2966: PUSH
2967: FOR_IN
2968: IFFALSE 3787
// begin tag := GetTag ( i ) ;
2970: LD_ADDR_VAR 0 19
2974: PUSH
2975: LD_VAR 0 9
2979: PPUSH
2980: CALL_OW 110
2984: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
2985: LD_VAR 0 9
2989: PPUSH
2990: LD_VAR 0 4
2994: PPUSH
2995: CALL_OW 308
2999: IFFALSE 3030
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
3001: LD_VAR 0 9
3005: PPUSH
3006: LD_VAR 0 7
3010: PUSH
3011: LD_INT 1
3013: ARRAY
3014: PPUSH
3015: LD_VAR 0 7
3019: PUSH
3020: LD_INT 2
3022: ARRAY
3023: PPUSH
3024: CALL_OW 111
// continue ;
3028: GO 2967
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
3030: LD_VAR 0 9
3034: PPUSH
3035: CALL_OW 256
3039: PUSH
3040: LD_INT 800
3042: LESS
3043: PUSH
3044: LD_VAR 0 19
3048: PUSH
3049: LD_INT 1
3051: NONEQUAL
3052: AND
3053: IFFALSE 3103
// begin SetTag ( i , tHeal ) ;
3055: LD_VAR 0 9
3059: PPUSH
3060: LD_INT 1
3062: PPUSH
3063: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
3067: LD_VAR 0 9
3071: PPUSH
3072: LD_VAR 0 6
3076: PUSH
3077: LD_INT 1
3079: ARRAY
3080: PPUSH
3081: LD_VAR 0 6
3085: PUSH
3086: LD_INT 2
3088: ARRAY
3089: PPUSH
3090: CALL_OW 111
// AddComHold ( i ) ;
3094: LD_VAR 0 9
3098: PPUSH
3099: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
3103: LD_VAR 0 19
3107: PUSH
3108: LD_INT 1
3110: EQUAL
3111: PUSH
3112: LD_VAR 0 9
3116: PPUSH
3117: CALL_OW 256
3121: PUSH
3122: LD_INT 1000
3124: EQUAL
3125: AND
3126: IFFALSE 3140
// SetTag ( i , 0 ) ;
3128: LD_VAR 0 9
3132: PPUSH
3133: LD_INT 0
3135: PPUSH
3136: CALL_OW 109
// if not tag then
3140: LD_VAR 0 19
3144: NOT
3145: IFFALSE 3312
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3147: LD_ADDR_VAR 0 12
3151: PUSH
3152: LD_VAR 0 3
3156: PPUSH
3157: LD_INT 57
3159: PUSH
3160: EMPTY
3161: LIST
3162: PPUSH
3163: CALL_OW 70
3167: ST_TO_ADDR
// if undone then
3168: LD_VAR 0 12
3172: IFFALSE 3194
// begin ComComplete ( i , undone [ 1 ] ) ;
3174: LD_VAR 0 9
3178: PPUSH
3179: LD_VAR 0 12
3183: PUSH
3184: LD_INT 1
3186: ARRAY
3187: PPUSH
3188: CALL 23363 0 2
// continue ;
3192: GO 2967
// end ; if cr or tmp or buildingsToBuild then
3194: LD_VAR 0 21
3198: PUSH
3199: LD_VAR 0 11
3203: OR
3204: PUSH
3205: LD_VAR 0 37
3209: OR
3210: IFFALSE 3286
// begin if IsInUnit ( i ) then
3212: LD_VAR 0 9
3216: PPUSH
3217: CALL_OW 310
3221: IFFALSE 3232
// ComExitBuilding ( i ) ;
3223: LD_VAR 0 9
3227: PPUSH
3228: CALL_OW 122
// if tmp then
3232: LD_VAR 0 11
3236: IFFALSE 3252
// SetTag ( i , tRepair ) else
3238: LD_VAR 0 9
3242: PPUSH
3243: LD_INT 3
3245: PPUSH
3246: CALL_OW 109
3250: GO 3284
// if cr then
3252: LD_VAR 0 21
3256: IFFALSE 3272
// SetTag ( i , tCrates ) else
3258: LD_VAR 0 9
3262: PPUSH
3263: LD_INT 2
3265: PPUSH
3266: CALL_OW 109
3270: GO 3284
// SetTag ( i , tBuild ) ;
3272: LD_VAR 0 9
3276: PPUSH
3277: LD_INT 5
3279: PPUSH
3280: CALL_OW 109
// end else
3284: GO 3312
// if not IsInUnit ( i ) then
3286: LD_VAR 0 9
3290: PPUSH
3291: CALL_OW 310
3295: NOT
3296: IFFALSE 3312
// ComEnterUnit ( i , depot ) ;
3298: LD_VAR 0 9
3302: PPUSH
3303: LD_VAR 0 36
3307: PPUSH
3308: CALL_OW 120
// end ; if tag = tRepair then
3312: LD_VAR 0 19
3316: PUSH
3317: LD_INT 3
3319: EQUAL
3320: IFFALSE 3426
// begin if IsInUnit ( i ) then
3322: LD_VAR 0 9
3326: PPUSH
3327: CALL_OW 310
3331: IFFALSE 3344
// begin ComExitBuilding ( i ) ;
3333: LD_VAR 0 9
3337: PPUSH
3338: CALL_OW 122
// continue ;
3342: GO 2967
// end ; if not tmp then
3344: LD_VAR 0 11
3348: NOT
3349: IFFALSE 3365
// begin SetTag ( i , 0 ) ;
3351: LD_VAR 0 9
3355: PPUSH
3356: LD_INT 0
3358: PPUSH
3359: CALL_OW 109
// continue ;
3363: GO 2967
// end ; if not HasTask ( i ) then
3365: LD_VAR 0 9
3369: PPUSH
3370: CALL_OW 314
3374: NOT
3375: IFFALSE 3395
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3377: LD_VAR 0 9
3381: PPUSH
3382: LD_VAR 0 11
3386: PUSH
3387: LD_INT 1
3389: ARRAY
3390: PPUSH
3391: CALL_OW 130
// if not IsInArea ( i , area ) then
3395: LD_VAR 0 9
3399: PPUSH
3400: LD_VAR 0 3
3404: PPUSH
3405: CALL_OW 308
3409: NOT
3410: IFFALSE 3426
// ComMoveToArea ( i , area ) ;
3412: LD_VAR 0 9
3416: PPUSH
3417: LD_VAR 0 3
3421: PPUSH
3422: CALL_OW 113
// end ; if tag = tBuild then
3426: LD_VAR 0 19
3430: PUSH
3431: LD_INT 5
3433: EQUAL
3434: IFFALSE 3640
// begin if IsInUnit ( i ) then
3436: LD_VAR 0 9
3440: PPUSH
3441: CALL_OW 310
3445: IFFALSE 3458
// begin ComExitBuilding ( i ) ;
3447: LD_VAR 0 9
3451: PPUSH
3452: CALL_OW 122
// continue ;
3456: GO 2967
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
3458: LD_VAR 0 37
3462: NOT
3463: PUSH
3464: LD_VAR 0 26
3468: OR
3469: PUSH
3470: LD_VAR 0 27
3474: OR
3475: IFFALSE 3493
// begin SetTag ( i , 0 ) ;
3477: LD_VAR 0 9
3481: PPUSH
3482: LD_INT 0
3484: PPUSH
3485: CALL_OW 109
// continue ;
3489: GO 2967
// end else
3491: GO 3532
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
3493: LD_VAR 0 36
3497: PPUSH
3498: LD_VAR 0 37
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: PUSH
3507: LD_INT 1
3509: ARRAY
3510: PPUSH
3511: CALL 56777 0 2
3515: NOT
3516: IFFALSE 3532
// begin SetTag ( i , 0 ) ;
3518: LD_VAR 0 9
3522: PPUSH
3523: LD_INT 0
3525: PPUSH
3526: CALL_OW 109
// continue ;
3530: GO 2967
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3532: LD_ADDR_VAR 0 12
3536: PUSH
3537: LD_VAR 0 3
3541: PPUSH
3542: LD_INT 57
3544: PUSH
3545: EMPTY
3546: LIST
3547: PPUSH
3548: CALL_OW 70
3552: ST_TO_ADDR
// if undone then
3553: LD_VAR 0 12
3557: IFFALSE 3579
// begin ComComplete ( i , undone [ 1 ] ) ;
3559: LD_VAR 0 9
3563: PPUSH
3564: LD_VAR 0 12
3568: PUSH
3569: LD_INT 1
3571: ARRAY
3572: PPUSH
3573: CALL 23363 0 2
// continue ;
3577: GO 2967
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
3579: LD_VAR 0 9
3583: PPUSH
3584: LD_VAR 0 37
3588: PUSH
3589: LD_INT 1
3591: ARRAY
3592: PUSH
3593: LD_INT 1
3595: ARRAY
3596: PPUSH
3597: LD_VAR 0 37
3601: PUSH
3602: LD_INT 1
3604: ARRAY
3605: PUSH
3606: LD_INT 2
3608: ARRAY
3609: PPUSH
3610: LD_VAR 0 37
3614: PUSH
3615: LD_INT 1
3617: ARRAY
3618: PUSH
3619: LD_INT 3
3621: ARRAY
3622: PPUSH
3623: LD_VAR 0 37
3627: PUSH
3628: LD_INT 1
3630: ARRAY
3631: PUSH
3632: LD_INT 4
3634: ARRAY
3635: PPUSH
3636: CALL_OW 145
// end ; if tag = tCrates then
3640: LD_VAR 0 19
3644: PUSH
3645: LD_INT 2
3647: EQUAL
3648: IFFALSE 3785
// begin if IsInUnit ( i ) then
3650: LD_VAR 0 9
3654: PPUSH
3655: CALL_OW 310
3659: IFFALSE 3672
// begin ComExitBuilding ( i ) ;
3661: LD_VAR 0 9
3665: PPUSH
3666: CALL_OW 122
// continue ;
3670: GO 2967
// end ; if not cr then
3672: LD_VAR 0 21
3676: NOT
3677: IFFALSE 3693
// begin SetTag ( i , 0 ) ;
3679: LD_VAR 0 9
3683: PPUSH
3684: LD_INT 0
3686: PPUSH
3687: CALL_OW 109
// continue ;
3691: GO 2967
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3693: LD_VAR 0 9
3697: PPUSH
3698: CALL_OW 314
3702: NOT
3703: PUSH
3704: LD_INT 81
3706: PUSH
3707: LD_VAR 0 1
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: LD_INT 92
3718: PUSH
3719: LD_VAR 0 21
3723: PUSH
3724: LD_INT 1
3726: ARRAY
3727: PUSH
3728: LD_VAR 0 21
3732: PUSH
3733: LD_INT 2
3735: ARRAY
3736: PUSH
3737: LD_INT 12
3739: PUSH
3740: EMPTY
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PPUSH
3750: CALL_OW 69
3754: NOT
3755: AND
3756: IFFALSE 3785
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3758: LD_VAR 0 9
3762: PPUSH
3763: LD_VAR 0 21
3767: PUSH
3768: LD_INT 1
3770: ARRAY
3771: PPUSH
3772: LD_VAR 0 21
3776: PUSH
3777: LD_INT 2
3779: ARRAY
3780: PPUSH
3781: CALL_OW 117
// end ; end ;
3785: GO 2967
3787: POP
3788: POP
// end ; if vehicles then
3789: LD_VAR 0 30
3793: IFFALSE 4593
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
3795: LD_ADDR_VAR 0 30
3799: PUSH
3800: LD_VAR 0 30
3804: PPUSH
3805: LD_INT 3
3807: PUSH
3808: LD_INT 2
3810: PUSH
3811: LD_INT 34
3813: PUSH
3814: LD_INT 88
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: LD_INT 34
3823: PUSH
3824: LD_INT 32
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: LIST
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 50
3842: PUSH
3843: EMPTY
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PPUSH
3850: CALL_OW 72
3854: ST_TO_ADDR
// if vehicles then
3855: LD_VAR 0 30
3859: IFFALSE 4593
// begin for i in vehicles do
3861: LD_ADDR_VAR 0 9
3865: PUSH
3866: LD_VAR 0 30
3870: PUSH
3871: FOR_IN
3872: IFFALSE 4591
// begin tag := GetTag ( i ) ;
3874: LD_ADDR_VAR 0 19
3878: PUSH
3879: LD_VAR 0 9
3883: PPUSH
3884: CALL_OW 110
3888: ST_TO_ADDR
// if not tag then
3889: LD_VAR 0 19
3893: NOT
3894: IFFALSE 4040
// begin if GetControl ( i ) = control_manual then
3896: LD_VAR 0 9
3900: PPUSH
3901: CALL_OW 263
3905: PUSH
3906: LD_INT 1
3908: EQUAL
3909: IFFALSE 4026
// begin drivers := arDrivers ;
3911: LD_ADDR_VAR 0 28
3915: PUSH
3916: LD_EXP 10
3920: ST_TO_ADDR
// if not drivers then
3921: LD_VAR 0 28
3925: NOT
3926: IFFALSE 4006
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
3928: LD_ADDR_VAR 0 28
3932: PUSH
3933: LD_VAR 0 18
3937: PPUSH
3938: LD_INT 3
3940: PUSH
3941: LD_INT 120
3943: PUSH
3944: LD_INT 7
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: PPUSH
3955: CALL_OW 72
3959: ST_TO_ADDR
// if drivers then
3960: LD_VAR 0 28
3964: IFFALSE 4006
// begin SetTag ( drivers [ 1 ] , tMech ) ;
3966: LD_VAR 0 28
3970: PUSH
3971: LD_INT 1
3973: ARRAY
3974: PPUSH
3975: LD_INT 7
3977: PPUSH
3978: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
3982: LD_ADDR_EXP 10
3986: PUSH
3987: LD_EXP 10
3991: PPUSH
3992: LD_VAR 0 28
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PPUSH
4001: CALL 52854 0 2
4005: ST_TO_ADDR
// end ; end ; if drivers then
4006: LD_VAR 0 28
4010: IFFALSE 4024
// SetTag ( i , tBusy ) ;
4012: LD_VAR 0 9
4016: PPUSH
4017: LD_INT 8
4019: PPUSH
4020: CALL_OW 109
// continue ;
4024: GO 3871
// end ; SetTag ( i , tBusy ) ;
4026: LD_VAR 0 9
4030: PPUSH
4031: LD_INT 8
4033: PPUSH
4034: CALL_OW 109
// end else
4038: GO 4589
// if tag = tBusy then
4040: LD_VAR 0 19
4044: PUSH
4045: LD_INT 8
4047: EQUAL
4048: IFFALSE 4260
// begin if GetLives ( i ) = 1000 then
4050: LD_VAR 0 9
4054: PPUSH
4055: CALL_OW 256
4059: PUSH
4060: LD_INT 1000
4062: EQUAL
4063: IFFALSE 4258
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
4065: LD_VAR 0 9
4069: PPUSH
4070: CALL_OW 263
4074: PUSH
4075: LD_INT 1
4077: EQUAL
4078: PUSH
4079: LD_VAR 0 9
4083: PPUSH
4084: CALL_OW 311
4088: NOT
4089: AND
4090: IFFALSE 4246
// begin drivers := arDrivers ;
4092: LD_ADDR_VAR 0 28
4096: PUSH
4097: LD_EXP 10
4101: ST_TO_ADDR
// if not drivers then
4102: LD_VAR 0 28
4106: NOT
4107: IFFALSE 4123
// begin SetTag ( i , 0 ) ;
4109: LD_VAR 0 9
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 109
// continue ;
4121: GO 3871
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
4123: LD_VAR 0 28
4127: PUSH
4128: LD_INT 1
4130: ARRAY
4131: PPUSH
4132: CALL_OW 310
4136: PUSH
4137: LD_VAR 0 28
4141: PUSH
4142: LD_INT 1
4144: ARRAY
4145: PPUSH
4146: CALL 50458 0 1
4150: NOT
4151: AND
4152: IFFALSE 4167
// ComExitBuilding ( drivers [ 1 ] ) ;
4154: LD_VAR 0 28
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: PPUSH
4163: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
4167: LD_VAR 0 30
4171: PPUSH
4172: LD_INT 120
4174: PUSH
4175: LD_INT 3
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PPUSH
4182: CALL_OW 72
4186: PUSH
4187: LD_VAR 0 28
4191: PUSH
4192: LD_INT 1
4194: ARRAY
4195: PPUSH
4196: CALL_OW 314
4200: NOT
4201: AND
4202: PUSH
4203: LD_VAR 0 30
4207: PPUSH
4208: LD_INT 120
4210: PUSH
4211: LD_INT 3
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PPUSH
4218: CALL_OW 72
4222: NOT
4223: OR
4224: IFFALSE 4244
// ComEnterUnit ( drivers [ 1 ] , i ) ;
4226: LD_VAR 0 28
4230: PUSH
4231: LD_INT 1
4233: ARRAY
4234: PPUSH
4235: LD_VAR 0 9
4239: PPUSH
4240: CALL_OW 120
// continue ;
4244: GO 3871
// end ; SetTag ( i , tAttack ) ;
4246: LD_VAR 0 9
4250: PPUSH
4251: LD_INT 13
4253: PPUSH
4254: CALL_OW 109
// end ; end else
4258: GO 4589
// if tag = tAttack then
4260: LD_VAR 0 19
4264: PUSH
4265: LD_INT 13
4267: EQUAL
4268: IFFALSE 4448
// begin enemy := enemyInBase ;
4270: LD_ADDR_VAR 0 25
4274: PUSH
4275: LD_VAR 0 26
4279: ST_TO_ADDR
// if not enemy then
4280: LD_VAR 0 25
4284: NOT
4285: IFFALSE 4297
// enemy := enemyOuterBase ;
4287: LD_ADDR_VAR 0 25
4291: PUSH
4292: LD_VAR 0 27
4296: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4297: LD_VAR 0 25
4301: NOT
4302: PUSH
4303: LD_VAR 0 9
4307: PPUSH
4308: LD_VAR 0 7
4312: PUSH
4313: LD_INT 1
4315: ARRAY
4316: PPUSH
4317: LD_VAR 0 7
4321: PUSH
4322: LD_INT 2
4324: ARRAY
4325: PPUSH
4326: CALL_OW 297
4330: PUSH
4331: LD_INT 10
4333: GREATER
4334: AND
4335: IFFALSE 4366
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4337: LD_VAR 0 9
4341: PPUSH
4342: LD_VAR 0 7
4346: PUSH
4347: LD_INT 1
4349: ARRAY
4350: PPUSH
4351: LD_VAR 0 7
4355: PUSH
4356: LD_INT 2
4358: ARRAY
4359: PPUSH
4360: CALL_OW 111
// continue ;
4364: GO 3871
// end ; if GetLives ( i ) < 650 then
4366: LD_VAR 0 9
4370: PPUSH
4371: CALL_OW 256
4375: PUSH
4376: LD_INT 650
4378: LESS
4379: IFFALSE 4422
// begin SetTag ( i , tVehRepair ) ;
4381: LD_VAR 0 9
4385: PPUSH
4386: LD_INT 9
4388: PPUSH
4389: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4393: LD_VAR 0 9
4397: PPUSH
4398: LD_VAR 0 7
4402: PUSH
4403: LD_INT 1
4405: ARRAY
4406: PPUSH
4407: LD_VAR 0 7
4411: PUSH
4412: LD_INT 2
4414: ARRAY
4415: PPUSH
4416: CALL_OW 111
// continue ;
4420: GO 3871
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4422: LD_VAR 0 9
4426: PPUSH
4427: LD_VAR 0 25
4431: PPUSH
4432: LD_VAR 0 9
4436: PPUSH
4437: CALL_OW 74
4441: PPUSH
4442: CALL_OW 115
// end else
4446: GO 4589
// if tag = tVehRepair then
4448: LD_VAR 0 19
4452: PUSH
4453: LD_INT 9
4455: EQUAL
4456: IFFALSE 4589
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4458: LD_VAR 0 9
4462: PPUSH
4463: LD_VAR 0 7
4467: PUSH
4468: LD_INT 1
4470: ARRAY
4471: PPUSH
4472: LD_VAR 0 7
4476: PUSH
4477: LD_INT 2
4479: ARRAY
4480: PPUSH
4481: CALL_OW 297
4485: PUSH
4486: LD_INT 10
4488: GREATER
4489: IFFALSE 4520
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4491: LD_VAR 0 9
4495: PPUSH
4496: LD_VAR 0 7
4500: PUSH
4501: LD_INT 1
4503: ARRAY
4504: PPUSH
4505: LD_VAR 0 7
4509: PUSH
4510: LD_INT 2
4512: ARRAY
4513: PPUSH
4514: CALL_OW 111
// continue ;
4518: GO 3871
// end ; if GetLives ( i ) = 1000 then
4520: LD_VAR 0 9
4524: PPUSH
4525: CALL_OW 256
4529: PUSH
4530: LD_INT 1000
4532: EQUAL
4533: IFFALSE 4549
// begin SetTag ( i , tBusy ) ;
4535: LD_VAR 0 9
4539: PPUSH
4540: LD_INT 8
4542: PPUSH
4543: CALL_OW 109
// continue ;
4547: GO 3871
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
4549: LD_VAR 0 9
4553: PPUSH
4554: CALL_OW 263
4558: PUSH
4559: LD_INT 1
4561: EQUAL
4562: PUSH
4563: LD_VAR 0 9
4567: PPUSH
4568: CALL_OW 311
4572: AND
4573: IFFALSE 4589
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
4575: LD_VAR 0 9
4579: PPUSH
4580: CALL_OW 311
4584: PPUSH
4585: CALL 54554 0 1
// end ; end ;
4589: GO 3871
4591: POP
4592: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
4593: LD_ADDR_VAR 0 23
4597: PUSH
4598: LD_VAR 0 5
4602: PPUSH
4603: LD_INT 2
4605: PUSH
4606: LD_INT 25
4608: PUSH
4609: LD_INT 1
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PUSH
4616: LD_INT 25
4618: PUSH
4619: LD_INT 8
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 25
4628: PUSH
4629: LD_INT 5
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 25
4638: PUSH
4639: LD_INT 9
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: PUSH
4653: LD_INT 50
4655: PUSH
4656: EMPTY
4657: LIST
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PPUSH
4663: CALL_OW 72
4667: ST_TO_ADDR
// if sol then
4668: LD_VAR 0 23
4672: IFFALSE 5180
// begin if enemyInBase then
4674: LD_VAR 0 26
4678: IFFALSE 4857
// begin for i in sol do
4680: LD_ADDR_VAR 0 9
4684: PUSH
4685: LD_VAR 0 23
4689: PUSH
4690: FOR_IN
4691: IFFALSE 4853
// begin tw := IsInUnit ( i ) ;
4693: LD_ADDR_VAR 0 20
4697: PUSH
4698: LD_VAR 0 9
4702: PPUSH
4703: CALL_OW 310
4707: ST_TO_ADDR
// if tw then
4708: LD_VAR 0 20
4712: IFFALSE 4795
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
4714: LD_VAR 0 20
4718: PUSH
4719: LD_INT 22
4721: PUSH
4722: LD_VAR 0 1
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: LD_INT 101
4733: PUSH
4734: LD_VAR 0 38
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 2
4745: PUSH
4746: LD_INT 30
4748: PUSH
4749: LD_INT 32
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PUSH
4756: LD_INT 30
4758: PUSH
4759: LD_INT 31
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: LIST
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: PPUSH
4776: CALL_OW 69
4780: IN
4781: NOT
4782: IFFALSE 4793
// ComExitBuilding ( i ) ;
4784: LD_VAR 0 9
4788: PPUSH
4789: CALL_OW 122
// end else
4793: GO 4851
// if IsInArea ( i , area ) then
4795: LD_VAR 0 9
4799: PPUSH
4800: LD_VAR 0 3
4804: PPUSH
4805: CALL_OW 308
4809: IFFALSE 4837
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
4811: LD_VAR 0 9
4815: PPUSH
4816: LD_VAR 0 26
4820: PPUSH
4821: LD_VAR 0 9
4825: PPUSH
4826: CALL_OW 74
4830: PPUSH
4831: CALL_OW 115
4835: GO 4851
// ComMoveToArea ( i , area ) ;
4837: LD_VAR 0 9
4841: PPUSH
4842: LD_VAR 0 3
4846: PPUSH
4847: CALL_OW 113
// end ;
4851: GO 4690
4853: POP
4854: POP
// end else
4855: GO 5180
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
4857: LD_ADDR_VAR 0 32
4861: PUSH
4862: LD_VAR 0 3
4866: PPUSH
4867: LD_INT 3
4869: PUSH
4870: LD_INT 62
4872: PUSH
4873: EMPTY
4874: LIST
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: LD_INT 30
4885: PUSH
4886: LD_INT 32
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: PUSH
4893: LD_INT 30
4895: PUSH
4896: LD_INT 4
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: PUSH
4903: LD_INT 30
4905: PUSH
4906: LD_INT 5
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 30
4915: PUSH
4916: LD_INT 31
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PPUSH
4934: CALL_OW 70
4938: ST_TO_ADDR
// if empty then
4939: LD_VAR 0 32
4943: IFFALSE 4960
// empty := ReverseArray ( empty ) ;
4945: LD_ADDR_VAR 0 32
4949: PUSH
4950: LD_VAR 0 32
4954: PPUSH
4955: CALL 48141 0 1
4959: ST_TO_ADDR
// for i in sol do
4960: LD_ADDR_VAR 0 9
4964: PUSH
4965: LD_VAR 0 23
4969: PUSH
4970: FOR_IN
4971: IFFALSE 5178
// begin tag := GetTag ( i ) ;
4973: LD_ADDR_VAR 0 19
4977: PUSH
4978: LD_VAR 0 9
4982: PPUSH
4983: CALL_OW 110
4987: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
4988: LD_VAR 0 9
4992: PPUSH
4993: CALL_OW 256
4997: PUSH
4998: LD_INT 1000
5000: LESS
5001: PUSH
5002: LD_VAR 0 19
5006: PUSH
5007: LD_INT 1
5009: NONEQUAL
5010: AND
5011: IFFALSE 5063
// begin SetTag ( i , tHeal ) ;
5013: LD_VAR 0 9
5017: PPUSH
5018: LD_INT 1
5020: PPUSH
5021: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
5025: LD_VAR 0 9
5029: PPUSH
5030: LD_VAR 0 6
5034: PUSH
5035: LD_INT 1
5037: ARRAY
5038: PPUSH
5039: LD_VAR 0 6
5043: PUSH
5044: LD_INT 2
5046: ARRAY
5047: PPUSH
5048: CALL_OW 111
// AddComHold ( i ) ;
5052: LD_VAR 0 9
5056: PPUSH
5057: CALL_OW 200
// continue ;
5061: GO 4970
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5063: LD_VAR 0 9
5067: PPUSH
5068: CALL_OW 256
5072: PUSH
5073: LD_INT 1000
5075: EQUAL
5076: PUSH
5077: LD_VAR 0 19
5081: PUSH
5082: LD_INT 1
5084: EQUAL
5085: AND
5086: IFFALSE 5102
// begin SetTag ( i , 0 ) ;
5088: LD_VAR 0 9
5092: PPUSH
5093: LD_INT 0
5095: PPUSH
5096: CALL_OW 109
// continue ;
5100: GO 4970
// end ; if HasTask ( i ) then
5102: LD_VAR 0 9
5106: PPUSH
5107: CALL_OW 314
5111: IFFALSE 5115
// continue ;
5113: GO 4970
// if not IsInUnit ( i ) and not tag and empty then
5115: LD_VAR 0 9
5119: PPUSH
5120: CALL_OW 310
5124: NOT
5125: PUSH
5126: LD_VAR 0 19
5130: NOT
5131: AND
5132: PUSH
5133: LD_VAR 0 32
5137: AND
5138: IFFALSE 5176
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
5140: LD_VAR 0 9
5144: PPUSH
5145: LD_VAR 0 32
5149: PUSH
5150: LD_INT 1
5152: ARRAY
5153: PPUSH
5154: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
5158: LD_ADDR_VAR 0 32
5162: PUSH
5163: LD_VAR 0 32
5167: PPUSH
5168: LD_INT 1
5170: PPUSH
5171: CALL_OW 3
5175: ST_TO_ADDR
// end ; end ;
5176: GO 4970
5178: POP
5179: POP
// end ; end ; end ;
5180: LD_VAR 0 8
5184: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
5185: LD_EXP 14
5189: PPUSH
5190: LD_INT 50
5192: PUSH
5193: EMPTY
5194: LIST
5195: PPUSH
5196: CALL_OW 72
5200: IFFALSE 5253
5202: GO 5204
5204: DISABLE
// begin enable ;
5205: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , arBaseArea , arBaseOuterArea , arForce , [ 109 , 43 ] , [ 112 , 52 ] ) ;
5206: LD_EXP 3
5210: PUSH
5211: LD_INT 1
5213: ARRAY
5214: PPUSH
5215: LD_INT 1
5217: PPUSH
5218: LD_INT 1
5220: PPUSH
5221: LD_INT 2
5223: PPUSH
5224: LD_EXP 14
5228: PPUSH
5229: LD_INT 109
5231: PUSH
5232: LD_INT 43
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: PPUSH
5239: LD_INT 112
5241: PUSH
5242: LD_INT 52
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PPUSH
5249: CALL 1238 0 7
// end ;
5253: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp , side ;
5254: LD_EXP 13
5258: IFFALSE 5499
5260: GO 5262
5262: DISABLE
5263: LD_INT 0
5265: PPUSH
5266: PPUSH
5267: PPUSH
5268: PPUSH
// begin enable ;
5269: ENABLE
// p := 1 ;
5270: LD_ADDR_VAR 0 2
5274: PUSH
5275: LD_INT 1
5277: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
5278: LD_ADDR_VAR 0 1
5282: PUSH
5283: DOUBLE
5284: LD_INT 1
5286: DEC
5287: ST_TO_ADDR
5288: LD_EXP 13
5292: PPUSH
5293: CALL 17265 0 1
5297: PUSH
5298: LD_INT 2
5300: DIV
5301: PUSH
5302: FOR_TO
5303: IFFALSE 5497
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
5305: LD_ADDR_VAR 0 3
5309: PUSH
5310: LD_EXP 13
5314: PUSH
5315: LD_VAR 0 2
5319: ARRAY
5320: PPUSH
5321: LD_EXP 13
5325: PUSH
5326: LD_VAR 0 2
5330: PUSH
5331: LD_INT 1
5333: PLUS
5334: ARRAY
5335: PPUSH
5336: CALL_OW 428
5340: ST_TO_ADDR
// if tmp then
5341: LD_VAR 0 3
5345: IFFALSE 5481
// begin side := GetSide ( tmp ) ;
5347: LD_ADDR_VAR 0 4
5351: PUSH
5352: LD_VAR 0 3
5356: PPUSH
5357: CALL_OW 255
5361: ST_TO_ADDR
// if side <> botSides [ 1 ] and side > 0 then
5362: LD_VAR 0 4
5366: PUSH
5367: LD_EXP 3
5371: PUSH
5372: LD_INT 1
5374: ARRAY
5375: NONEQUAL
5376: PUSH
5377: LD_VAR 0 4
5381: PUSH
5382: LD_INT 0
5384: GREATER
5385: AND
5386: IFFALSE 5481
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 1 ] ) ;
5388: LD_EXP 13
5392: PUSH
5393: LD_VAR 0 2
5397: ARRAY
5398: PPUSH
5399: LD_EXP 13
5403: PUSH
5404: LD_VAR 0 2
5408: PUSH
5409: LD_INT 1
5411: PLUS
5412: ARRAY
5413: PPUSH
5414: LD_EXP 3
5418: PUSH
5419: LD_INT 1
5421: ARRAY
5422: PPUSH
5423: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
5427: LD_ADDR_EXP 13
5431: PUSH
5432: LD_EXP 13
5436: PPUSH
5437: LD_VAR 0 2
5441: PPUSH
5442: CALL_OW 3
5446: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
5447: LD_ADDR_EXP 13
5451: PUSH
5452: LD_EXP 13
5456: PPUSH
5457: LD_VAR 0 2
5461: PPUSH
5462: CALL_OW 3
5466: ST_TO_ADDR
// p := p - 2 ;
5467: LD_ADDR_VAR 0 2
5471: PUSH
5472: LD_VAR 0 2
5476: PUSH
5477: LD_INT 2
5479: MINUS
5480: ST_TO_ADDR
// end ; end ; p := p + 2 ;
5481: LD_ADDR_VAR 0 2
5485: PUSH
5486: LD_VAR 0 2
5490: PUSH
5491: LD_INT 2
5493: PLUS
5494: ST_TO_ADDR
// end ;
5495: GO 5302
5497: POP
5498: POP
// end ;
5499: PPOPN 4
5501: END
// every 8 8$00 trigger IsOk ( arDep ) do
5502: LD_INT 2
5504: PPUSH
5505: CALL_OW 302
5509: IFFALSE 5687
5511: GO 5513
5513: DISABLE
// begin enable ;
5514: ENABLE
// arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] ] ;
5515: LD_ADDR_EXP 6
5519: PUSH
5520: LD_EXP 6
5524: PUSH
5525: LD_INT 14
5527: PUSH
5528: LD_INT 1
5530: PUSH
5531: LD_INT 2
5533: PUSH
5534: LD_INT 27
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: PUSH
5543: LD_INT 14
5545: PUSH
5546: LD_INT 1
5548: PUSH
5549: LD_INT 2
5551: PUSH
5552: LD_INT 28
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: PUSH
5561: LD_INT 14
5563: PUSH
5564: LD_INT 1
5566: PUSH
5567: LD_INT 2
5569: PUSH
5570: LD_INT 28
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: LIST
5583: ADD
5584: ST_TO_ADDR
// if Difficulty > 1 and GetTech ( tech_SibImplosion , botSides [ 1 ] ) = state_researched then
5585: LD_OWVAR 67
5589: PUSH
5590: LD_INT 1
5592: GREATER
5593: PUSH
5594: LD_INT 72
5596: PPUSH
5597: LD_EXP 3
5601: PUSH
5602: LD_INT 1
5604: ARRAY
5605: PPUSH
5606: CALL_OW 321
5610: PUSH
5611: LD_INT 2
5613: EQUAL
5614: AND
5615: IFFALSE 5687
// arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ] ;
5617: LD_ADDR_EXP 6
5621: PUSH
5622: LD_EXP 6
5626: PUSH
5627: LD_INT 14
5629: PUSH
5630: LD_INT 3
5632: PUSH
5633: LD_INT 2
5635: PUSH
5636: LD_INT 29
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: PUSH
5645: LD_INT 14
5647: PUSH
5648: LD_INT 3
5650: PUSH
5651: LD_INT 2
5653: PUSH
5654: LD_INT 29
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: PUSH
5663: LD_INT 14
5665: PUSH
5666: LD_INT 3
5668: PUSH
5669: LD_INT 2
5671: PUSH
5672: LD_INT 29
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: LIST
5685: ADD
5686: ST_TO_ADDR
// end ; end_of_file
5687: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_apeman , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
5688: LD_INT 0
5690: PPUSH
5691: PPUSH
5692: PPUSH
5693: PPUSH
5694: PPUSH
// multi_settings_counter := 6 ;
5695: LD_ADDR_EXP 29
5699: PUSH
5700: LD_INT 6
5702: ST_TO_ADDR
// multi_settings := [ ] ;
5703: LD_ADDR_EXP 28
5707: PUSH
5708: EMPTY
5709: ST_TO_ADDR
// if Multiplayer then
5710: LD_OWVAR 4
5714: IFFALSE 5894
// begin your_side := mp_player_side ;
5716: LD_ADDR_OWVAR 2
5720: PUSH
5721: LD_OWVAR 7
5725: ST_TO_ADDR
// multi_gametype := mp_game_type ;
5726: LD_ADDR_EXP 17
5730: PUSH
5731: LD_OWVAR 6
5735: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
5736: LD_ADDR_EXP 18
5740: PUSH
5741: LD_OWVAR 17
5745: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
5746: LD_ADDR_EXP 19
5750: PUSH
5751: LD_OWVAR 15
5755: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
5756: LD_ADDR_EXP 20
5760: PUSH
5761: LD_OWVAR 16
5765: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
5766: LD_ADDR_EXP 21
5770: PUSH
5771: EMPTY
5772: PUSH
5773: EMPTY
5774: LIST
5775: ST_TO_ADDR
// for i in mp_teams do
5776: LD_ADDR_VAR 0 2
5780: PUSH
5781: LD_OWVAR 12
5785: PUSH
5786: FOR_IN
5787: IFFALSE 5830
// if i then
5789: LD_VAR 0 2
5793: IFFALSE 5828
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
5795: LD_ADDR_EXP 21
5799: PUSH
5800: LD_EXP 21
5804: PPUSH
5805: LD_INT 1
5807: PPUSH
5808: LD_EXP 21
5812: PUSH
5813: LD_INT 1
5815: ARRAY
5816: PUSH
5817: LD_VAR 0 2
5821: UNION
5822: PPUSH
5823: CALL_OW 1
5827: ST_TO_ADDR
5828: GO 5786
5830: POP
5831: POP
// for i := 1 to multi_settings_counter do
5832: LD_ADDR_VAR 0 2
5836: PUSH
5837: DOUBLE
5838: LD_INT 1
5840: DEC
5841: ST_TO_ADDR
5842: LD_EXP 29
5846: PUSH
5847: FOR_TO
5848: IFFALSE 5890
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
5850: LD_ADDR_EXP 28
5854: PUSH
5855: LD_EXP 28
5859: PPUSH
5860: LD_EXP 28
5864: PUSH
5865: LD_INT 1
5867: PLUS
5868: PPUSH
5869: LD_VAR 0 2
5873: PPUSH
5874: CALL_OW 426
5878: PUSH
5879: LD_INT 1
5881: PLUS
5882: PPUSH
5883: CALL_OW 1
5887: ST_TO_ADDR
5888: GO 5847
5890: POP
5891: POP
// end else
5892: GO 6080
// begin your_side := 3 ;
5894: LD_ADDR_OWVAR 2
5898: PUSH
5899: LD_INT 3
5901: ST_TO_ADDR
// multi_gametype := 1 ;
5902: LD_ADDR_EXP 17
5906: PUSH
5907: LD_INT 1
5909: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
5910: LD_ADDR_EXP 18
5914: PUSH
5915: LD_INT 0
5917: PUSH
5918: LD_INT 0
5920: PUSH
5921: LD_INT 1
5923: PUSH
5924: LD_INT 2
5926: PUSH
5927: LD_INT 3
5929: PUSH
5930: LD_INT 0
5932: PUSH
5933: LD_INT 0
5935: PUSH
5936: LD_INT 0
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
5949: LD_ADDR_EXP 19
5953: PUSH
5954: LD_INT 0
5956: PUSH
5957: LD_INT 0
5959: PUSH
5960: LD_INT 1
5962: PUSH
5963: LD_INT 1
5965: PUSH
5966: LD_INT 1
5968: PUSH
5969: LD_INT 0
5971: PUSH
5972: LD_INT 0
5974: PUSH
5975: LD_INT 0
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
5988: LD_ADDR_EXP 20
5992: PUSH
5993: LD_INT 0
5995: PUSH
5996: LD_INT 0
5998: PUSH
5999: LD_INT 3
6001: PUSH
6002: LD_INT 3
6004: PUSH
6005: LD_INT 3
6007: PUSH
6008: LD_INT 0
6010: PUSH
6011: LD_INT 0
6013: PUSH
6014: LD_INT 0
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
6027: LD_ADDR_EXP 21
6031: PUSH
6032: LD_INT 3
6034: PUSH
6035: LD_INT 4
6037: PUSH
6038: LD_INT 5
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: LIST
6045: PUSH
6046: EMPTY
6047: LIST
6048: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 2 , 3 ] ;
6049: LD_ADDR_EXP 28
6053: PUSH
6054: LD_INT 2
6056: PUSH
6057: LD_INT 4
6059: PUSH
6060: LD_INT 4
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: LD_INT 3
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6080: LD_ADDR_EXP 22
6084: PUSH
6085: LD_INT 0
6087: PUSH
6088: LD_INT 0
6090: PUSH
6091: LD_INT 0
6093: PUSH
6094: LD_INT 0
6096: PUSH
6097: LD_INT 0
6099: PUSH
6100: LD_INT 0
6102: PUSH
6103: LD_INT 0
6105: PUSH
6106: LD_INT 0
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6119: LD_ADDR_EXP 25
6123: PUSH
6124: LD_INT 0
6126: PUSH
6127: LD_INT 0
6129: PUSH
6130: LD_INT 0
6132: PUSH
6133: LD_INT 0
6135: PUSH
6136: LD_INT 0
6138: PUSH
6139: LD_INT 0
6141: PUSH
6142: LD_INT 0
6144: PUSH
6145: LD_INT 0
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6158: LD_ADDR_EXP 36
6162: PUSH
6163: LD_INT 0
6165: PUSH
6166: LD_INT 0
6168: PUSH
6169: LD_INT 0
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: LD_INT 0
6177: PUSH
6178: LD_INT 0
6180: PUSH
6181: LD_INT 0
6183: PUSH
6184: LD_INT 0
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: ST_TO_ADDR
// multi_teamgame := true ;
6197: LD_ADDR_EXP 26
6201: PUSH
6202: LD_INT 1
6204: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
6205: LD_ADDR_EXP 24
6209: PUSH
6210: LD_INT 3
6212: PUSH
6213: EMPTY
6214: LIST
6215: ST_TO_ADDR
// multi_custom_commanders := true ;
6216: LD_ADDR_EXP 27
6220: PUSH
6221: LD_INT 1
6223: ST_TO_ADDR
// multi_commanders := [ ] ;
6224: LD_ADDR_EXP 35
6228: PUSH
6229: EMPTY
6230: ST_TO_ADDR
// multi_reinforcements := [ ] ;
6231: LD_ADDR_EXP 38
6235: PUSH
6236: EMPTY
6237: ST_TO_ADDR
// multi_players_amount := 0 ;
6238: LD_ADDR_EXP 37
6242: PUSH
6243: LD_INT 0
6245: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
6246: LD_ADDR_EXP 23
6250: PUSH
6251: LD_INT 5
6253: PUSH
6254: LD_INT 6
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 7
6263: PUSH
6264: LD_INT 8
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 9
6273: PUSH
6274: LD_INT 10
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: LIST
6285: ST_TO_ADDR
// multi_buildings := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6286: LD_ADDR_EXP 40
6290: PUSH
6291: EMPTY
6292: PUSH
6293: EMPTY
6294: PUSH
6295: EMPTY
6296: PUSH
6297: EMPTY
6298: PUSH
6299: EMPTY
6300: PUSH
6301: EMPTY
6302: PUSH
6303: EMPTY
6304: PUSH
6305: EMPTY
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: ST_TO_ADDR
// for i := 1 to 8 do
6317: LD_ADDR_VAR 0 2
6321: PUSH
6322: DOUBLE
6323: LD_INT 1
6325: DEC
6326: ST_TO_ADDR
6327: LD_INT 8
6329: PUSH
6330: FOR_TO
6331: IFFALSE 6660
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
6333: LD_VAR 0 2
6337: PPUSH
6338: CALL_OW 530
6342: IFFALSE 6500
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
6344: LD_ADDR_EXP 22
6348: PUSH
6349: LD_EXP 22
6353: PPUSH
6354: LD_VAR 0 2
6358: PPUSH
6359: LD_INT 1
6361: PPUSH
6362: CALL_OW 1
6366: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
6367: LD_ADDR_EXP 20
6371: PUSH
6372: LD_EXP 20
6376: PPUSH
6377: LD_VAR 0 2
6381: PPUSH
6382: LD_INT 0
6384: PPUSH
6385: CALL_OW 1
6389: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
6390: LD_ADDR_EXP 18
6394: PUSH
6395: LD_EXP 18
6399: PPUSH
6400: LD_VAR 0 2
6404: PPUSH
6405: LD_INT 0
6407: PPUSH
6408: CALL_OW 1
6412: ST_TO_ADDR
// for j = 1 to multi_teams do
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: DOUBLE
6419: LD_INT 1
6421: DEC
6422: ST_TO_ADDR
6423: LD_EXP 21
6427: PUSH
6428: FOR_TO
6429: IFFALSE 6498
// begin if i in multi_teams [ j ] then
6431: LD_VAR 0 2
6435: PUSH
6436: LD_EXP 21
6440: PUSH
6441: LD_VAR 0 3
6445: ARRAY
6446: IN
6447: IFFALSE 6496
// begin tmp := multi_teams [ j ] diff i ;
6449: LD_ADDR_VAR 0 5
6453: PUSH
6454: LD_EXP 21
6458: PUSH
6459: LD_VAR 0 3
6463: ARRAY
6464: PUSH
6465: LD_VAR 0 2
6469: DIFF
6470: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
6471: LD_ADDR_EXP 21
6475: PUSH
6476: LD_EXP 21
6480: PPUSH
6481: LD_VAR 0 3
6485: PPUSH
6486: LD_VAR 0 5
6490: PPUSH
6491: CALL_OW 1
6495: ST_TO_ADDR
// end ; end ;
6496: GO 6428
6498: POP
6499: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
6500: LD_EXP 20
6504: PUSH
6505: LD_VAR 0 2
6509: ARRAY
6510: PUSH
6511: LD_EXP 20
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PUSH
6522: LD_EXP 24
6526: IN
6527: NOT
6528: AND
6529: IFFALSE 6570
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
6531: LD_ADDR_EXP 20
6535: PUSH
6536: LD_EXP 20
6540: PPUSH
6541: LD_VAR 0 2
6545: PPUSH
6546: LD_EXP 24
6550: PUSH
6551: LD_INT 1
6553: PPUSH
6554: LD_EXP 24
6558: PPUSH
6559: CALL_OW 12
6563: ARRAY
6564: PPUSH
6565: CALL_OW 1
6569: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
6570: LD_EXP 20
6574: PUSH
6575: LD_VAR 0 2
6579: ARRAY
6580: NOT
6581: PUSH
6582: LD_EXP 18
6586: PUSH
6587: LD_VAR 0 2
6591: ARRAY
6592: NOT
6593: AND
6594: PUSH
6595: LD_EXP 22
6599: PUSH
6600: LD_VAR 0 2
6604: ARRAY
6605: NOT
6606: AND
6607: IFFALSE 6632
// multi_bots := Replace ( multi_bots , i , 1 ) ;
6609: LD_ADDR_EXP 25
6613: PUSH
6614: LD_EXP 25
6618: PPUSH
6619: LD_VAR 0 2
6623: PPUSH
6624: LD_INT 1
6626: PPUSH
6627: CALL_OW 1
6631: ST_TO_ADDR
// if multi_sides [ i ] then
6632: LD_EXP 18
6636: PUSH
6637: LD_VAR 0 2
6641: ARRAY
6642: IFFALSE 6658
// multi_players_amount := multi_players_amount + 1 ;
6644: LD_ADDR_EXP 37
6648: PUSH
6649: LD_EXP 37
6653: PUSH
6654: LD_INT 1
6656: PLUS
6657: ST_TO_ADDR
// end ;
6658: GO 6330
6660: POP
6661: POP
// for i in multi_teams do
6662: LD_ADDR_VAR 0 2
6666: PUSH
6667: LD_EXP 21
6671: PUSH
6672: FOR_IN
6673: IFFALSE 6781
// begin for j = 2 to i do
6675: LD_ADDR_VAR 0 3
6679: PUSH
6680: DOUBLE
6681: LD_INT 2
6683: DEC
6684: ST_TO_ADDR
6685: LD_VAR 0 2
6689: PUSH
6690: FOR_TO
6691: IFFALSE 6777
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
6693: LD_VAR 0 2
6697: PUSH
6698: LD_VAR 0 3
6702: ARRAY
6703: PPUSH
6704: LD_VAR 0 2
6708: PUSH
6709: LD_INT 1
6711: ARRAY
6712: PPUSH
6713: CALL_OW 343
// for x = 1 to j - 1 do
6717: LD_ADDR_VAR 0 4
6721: PUSH
6722: DOUBLE
6723: LD_INT 1
6725: DEC
6726: ST_TO_ADDR
6727: LD_VAR 0 3
6731: PUSH
6732: LD_INT 1
6734: MINUS
6735: PUSH
6736: FOR_TO
6737: IFFALSE 6773
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
6739: LD_VAR 0 2
6743: PUSH
6744: LD_VAR 0 3
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 2
6754: PUSH
6755: LD_VAR 0 4
6759: ARRAY
6760: PPUSH
6761: LD_INT 1
6763: PPUSH
6764: LD_INT 1
6766: PPUSH
6767: CALL_OW 80
6771: GO 6736
6773: POP
6774: POP
// end ;
6775: GO 6690
6777: POP
6778: POP
// end ;
6779: GO 6672
6781: POP
6782: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
6783: LD_ADDR_OWVAR 67
6787: PUSH
6788: LD_INT 1
6790: PUSH
6791: LD_INT 2
6793: PUSH
6794: LD_INT 3
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: LIST
6801: PUSH
6802: LD_EXP 28
6806: PUSH
6807: LD_INT 1
6809: ARRAY
6810: ARRAY
6811: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
6812: LD_ADDR_EXP 30
6816: PUSH
6817: LD_INT 9
6819: PUSH
6820: LD_INT 12
6822: PUSH
6823: LD_INT 15
6825: PUSH
6826: LD_INT 18
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: PUSH
6835: LD_EXP 28
6839: PUSH
6840: LD_INT 2
6842: ARRAY
6843: ARRAY
6844: ST_TO_ADDR
// multi_skill_level := [ 1 , 2 , 3 , 5 ] [ multi_settings [ 3 ] ] ;
6845: LD_ADDR_EXP 31
6849: PUSH
6850: LD_INT 1
6852: PUSH
6853: LD_INT 2
6855: PUSH
6856: LD_INT 3
6858: PUSH
6859: LD_INT 5
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: PUSH
6868: LD_EXP 28
6872: PUSH
6873: LD_INT 3
6875: ARRAY
6876: ARRAY
6877: ST_TO_ADDR
// multi_crates_spawn := [ [ 3000 , 0 0$32 ] , [ 5000 , 0 0$22 ] , [ 6000 , 0 0$14 ] , [ 8000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
6878: LD_ADDR_EXP 32
6882: PUSH
6883: LD_INT 3000
6885: PUSH
6886: LD_INT 1120
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 5000
6895: PUSH
6896: LD_INT 770
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: LD_INT 6000
6905: PUSH
6906: LD_INT 490
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PUSH
6913: LD_INT 8000
6915: PUSH
6916: LD_INT 420
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: PUSH
6929: LD_EXP 28
6933: PUSH
6934: LD_INT 4
6936: ARRAY
6937: ARRAY
6938: ST_TO_ADDR
// multi_apeman := [ 0 , 1 , 2 , 3 ] [ multi_settings [ 5 ] ] ;
6939: LD_ADDR_EXP 33
6943: PUSH
6944: LD_INT 0
6946: PUSH
6947: LD_INT 1
6949: PUSH
6950: LD_INT 2
6952: PUSH
6953: LD_INT 3
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: PUSH
6962: LD_EXP 28
6966: PUSH
6967: LD_INT 5
6969: ARRAY
6970: ARRAY
6971: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
6972: LD_ADDR_EXP 34
6976: PUSH
6977: LD_INT 0
6979: PUSH
6980: LD_INT 1
6982: PUSH
6983: LD_INT 2
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: LIST
6990: PUSH
6991: LD_EXP 28
6995: PUSH
6996: LD_INT 6
6998: ARRAY
6999: ARRAY
7000: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
7001: LD_ADDR_EXP 39
7005: PUSH
7006: LD_INT 10500
7008: PUSH
7009: LD_INT 31500
7011: PUSH
7012: LD_INT 52500
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: PUSH
7020: LD_OWVAR 67
7024: ARRAY
7025: ST_TO_ADDR
// end ;
7026: LD_VAR 0 1
7030: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
7031: LD_INT 0
7033: PPUSH
7034: PPUSH
// if not multi_sides [ preferSide ] then
7035: LD_EXP 18
7039: PUSH
7040: LD_VAR 0 1
7044: ARRAY
7045: NOT
7046: IFFALSE 7060
// begin result := preferSide ;
7048: LD_ADDR_VAR 0 2
7052: PUSH
7053: LD_VAR 0 1
7057: ST_TO_ADDR
// exit ;
7058: GO 7107
// end ; for i := 1 to 8 do
7060: LD_ADDR_VAR 0 3
7064: PUSH
7065: DOUBLE
7066: LD_INT 1
7068: DEC
7069: ST_TO_ADDR
7070: LD_INT 8
7072: PUSH
7073: FOR_TO
7074: IFFALSE 7105
// if not multi_sides [ i ] then
7076: LD_EXP 18
7080: PUSH
7081: LD_VAR 0 3
7085: ARRAY
7086: NOT
7087: IFFALSE 7103
// begin result := i ;
7089: LD_ADDR_VAR 0 2
7093: PUSH
7094: LD_VAR 0 3
7098: ST_TO_ADDR
// exit ;
7099: POP
7100: POP
7101: GO 7107
// end ;
7103: GO 7073
7105: POP
7106: POP
// end ;
7107: LD_VAR 0 2
7111: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
7112: LD_INT 0
7114: PPUSH
// uc_side := side ;
7115: LD_ADDR_OWVAR 20
7119: PUSH
7120: LD_VAR 0 1
7124: ST_TO_ADDR
// uc_nation := nation_russian ;
7125: LD_ADDR_OWVAR 21
7129: PUSH
7130: LD_INT 3
7132: ST_TO_ADDR
// hc_importance := 100 ;
7133: LD_ADDR_OWVAR 32
7137: PUSH
7138: LD_INT 100
7140: ST_TO_ADDR
// if num = 1 then
7141: LD_VAR 0 2
7145: PUSH
7146: LD_INT 1
7148: EQUAL
7149: IFFALSE 7216
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7151: LD_INT 1
7153: PPUSH
7154: LD_EXP 31
7158: PUSH
7159: LD_INT 1
7161: PLUS
7162: PPUSH
7163: CALL_OW 381
// hc_gallery := ru ;
7167: LD_ADDR_OWVAR 33
7171: PUSH
7172: LD_STRING ru
7174: ST_TO_ADDR
// hc_face_number := 25 ;
7175: LD_ADDR_OWVAR 34
7179: PUSH
7180: LD_INT 25
7182: ST_TO_ADDR
// hc_name := Xavier ;
7183: LD_ADDR_OWVAR 26
7187: PUSH
7188: LD_STRING Xavier
7190: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7191: LD_ADDR_OWVAR 29
7195: PUSH
7196: LD_INT 12
7198: PUSH
7199: LD_INT 10
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: ST_TO_ADDR
// result := CreateHuman ;
7206: LD_ADDR_VAR 0 3
7210: PUSH
7211: CALL_OW 44
7215: ST_TO_ADDR
// end ; if num = 2 then
7216: LD_VAR 0 2
7220: PUSH
7221: LD_INT 2
7223: EQUAL
7224: IFFALSE 7291
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
7226: LD_INT 1
7228: PPUSH
7229: LD_EXP 31
7233: PUSH
7234: LD_INT 2
7236: PLUS
7237: PPUSH
7238: CALL_OW 383
// hc_gallery := ru ;
7242: LD_ADDR_OWVAR 33
7246: PUSH
7247: LD_STRING ru
7249: ST_TO_ADDR
// hc_face_number := 1 ;
7250: LD_ADDR_OWVAR 34
7254: PUSH
7255: LD_INT 1
7257: ST_TO_ADDR
// hc_name := Burlak ;
7258: LD_ADDR_OWVAR 26
7262: PUSH
7263: LD_STRING Burlak
7265: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
7266: LD_ADDR_OWVAR 29
7270: PUSH
7271: LD_INT 10
7273: PUSH
7274: LD_INT 11
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: ST_TO_ADDR
// result := CreateHuman ;
7281: LD_ADDR_VAR 0 3
7285: PUSH
7286: CALL_OW 44
7290: ST_TO_ADDR
// end ; if num = 3 then
7291: LD_VAR 0 2
7295: PUSH
7296: LD_INT 3
7298: EQUAL
7299: IFFALSE 7366
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7301: LD_INT 1
7303: PPUSH
7304: LD_EXP 31
7308: PUSH
7309: LD_INT 1
7311: PLUS
7312: PPUSH
7313: CALL_OW 381
// hc_gallery := ru ;
7317: LD_ADDR_OWVAR 33
7321: PUSH
7322: LD_STRING ru
7324: ST_TO_ADDR
// hc_face_number := 18 ;
7325: LD_ADDR_OWVAR 34
7329: PUSH
7330: LD_INT 18
7332: ST_TO_ADDR
// hc_name := Vsevolod ;
7333: LD_ADDR_OWVAR 26
7337: PUSH
7338: LD_STRING Vsevolod
7340: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
7341: LD_ADDR_OWVAR 29
7345: PUSH
7346: LD_INT 12
7348: PUSH
7349: LD_INT 11
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: ST_TO_ADDR
// result := CreateHuman ;
7356: LD_ADDR_VAR 0 3
7360: PUSH
7361: CALL_OW 44
7365: ST_TO_ADDR
// end ; end ;
7366: LD_VAR 0 3
7370: RET
// export function Multiplayer_PrepareApemans ( ) ; var i , tmp ; begin
7371: LD_INT 0
7373: PPUSH
7374: PPUSH
7375: PPUSH
// if not multi_apeman then
7376: LD_EXP 33
7380: NOT
7381: IFFALSE 7385
// exit ;
7383: GO 7463
// tmp := [ 6 , 9 , 12 ] [ multi_apeman ] ;
7385: LD_ADDR_VAR 0 3
7389: PUSH
7390: LD_INT 6
7392: PUSH
7393: LD_INT 9
7395: PUSH
7396: LD_INT 12
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: LIST
7403: PUSH
7404: LD_EXP 33
7408: ARRAY
7409: ST_TO_ADDR
// for i := 1 to tmp do
7410: LD_ADDR_VAR 0 2
7414: PUSH
7415: DOUBLE
7416: LD_INT 1
7418: DEC
7419: ST_TO_ADDR
7420: LD_VAR 0 3
7424: PUSH
7425: FOR_TO
7426: IFFALSE 7461
// begin uc_side := 0 ;
7428: LD_ADDR_OWVAR 20
7432: PUSH
7433: LD_INT 0
7435: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
7436: LD_INT 5
7438: NEG
7439: PPUSH
7440: CALL 49122 0 1
// PlaceUnitArea ( CreateHuman , apeSpawnArea , false ) ;
7444: CALL_OW 44
7448: PPUSH
7449: LD_INT 21
7451: PPUSH
7452: LD_INT 0
7454: PPUSH
7455: CALL_OW 49
// end ;
7459: GO 7425
7461: POP
7462: POP
// end ;
7463: LD_VAR 0 1
7467: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
7468: LD_INT 0
7470: PPUSH
7471: PPUSH
7472: PPUSH
7473: PPUSH
7474: PPUSH
7475: PPUSH
7476: PPUSH
7477: PPUSH
7478: PPUSH
7479: PPUSH
// for i := 1 to 8 do
7480: LD_ADDR_VAR 0 2
7484: PUSH
7485: DOUBLE
7486: LD_INT 1
7488: DEC
7489: ST_TO_ADDR
7490: LD_INT 8
7492: PUSH
7493: FOR_TO
7494: IFFALSE 8674
// begin if not multi_sides [ i ] then
7496: LD_EXP 18
7500: PUSH
7501: LD_VAR 0 2
7505: ARRAY
7506: NOT
7507: IFFALSE 7511
// continue ;
7509: GO 7493
// if multi_buildings [ multi_sides [ i ] ] then
7511: LD_EXP 40
7515: PUSH
7516: LD_EXP 18
7520: PUSH
7521: LD_VAR 0 2
7525: ARRAY
7526: ARRAY
7527: IFFALSE 7761
// begin uc_side := i ;
7529: LD_ADDR_OWVAR 20
7533: PUSH
7534: LD_VAR 0 2
7538: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7539: LD_ADDR_OWVAR 21
7543: PUSH
7544: LD_EXP 20
7548: PUSH
7549: LD_VAR 0 2
7553: ARRAY
7554: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
7555: LD_ADDR_VAR 0 3
7559: PUSH
7560: LD_EXP 40
7564: PUSH
7565: LD_EXP 18
7569: PUSH
7570: LD_VAR 0 2
7574: ARRAY
7575: ARRAY
7576: PUSH
7577: FOR_IN
7578: IFFALSE 7759
// begin bc_type := j [ 1 ] ;
7580: LD_ADDR_OWVAR 42
7584: PUSH
7585: LD_VAR 0 3
7589: PUSH
7590: LD_INT 1
7592: ARRAY
7593: ST_TO_ADDR
// bc_level := 2 ;
7594: LD_ADDR_OWVAR 43
7598: PUSH
7599: LD_INT 2
7601: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
7602: LD_ADDR_VAR 0 4
7606: PUSH
7607: LD_VAR 0 3
7611: PUSH
7612: LD_INT 2
7614: ARRAY
7615: PUSH
7616: LD_INT 1
7618: ARRAY
7619: PPUSH
7620: LD_VAR 0 3
7624: PUSH
7625: LD_INT 2
7627: ARRAY
7628: PUSH
7629: LD_INT 2
7631: ARRAY
7632: PPUSH
7633: LD_VAR 0 3
7637: PUSH
7638: LD_INT 2
7640: ARRAY
7641: PUSH
7642: LD_INT 3
7644: ARRAY
7645: PPUSH
7646: CALL_OW 47
7650: ST_TO_ADDR
// if j [ 1 ] = b_depot then
7651: LD_VAR 0 3
7655: PUSH
7656: LD_INT 1
7658: ARRAY
7659: PUSH
7660: LD_INT 0
7662: EQUAL
7663: IFFALSE 7757
// begin SetBName ( b , j [ 3 ] ) ;
7665: LD_VAR 0 4
7669: PPUSH
7670: LD_VAR 0 3
7674: PUSH
7675: LD_INT 3
7677: ARRAY
7678: PPUSH
7679: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 120 , 100 , 80 ] [ Difficulty ] ) ;
7683: LD_VAR 0 4
7687: PPUSH
7688: CALL_OW 274
7692: PPUSH
7693: LD_INT 1
7695: PPUSH
7696: LD_INT 120
7698: PUSH
7699: LD_INT 100
7701: PUSH
7702: LD_INT 80
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: LIST
7709: PUSH
7710: LD_OWVAR 67
7714: ARRAY
7715: PPUSH
7716: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 30 ] [ Difficulty ] ) ;
7720: LD_VAR 0 4
7724: PPUSH
7725: CALL_OW 274
7729: PPUSH
7730: LD_INT 2
7732: PPUSH
7733: LD_INT 90
7735: PUSH
7736: LD_INT 60
7738: PUSH
7739: LD_INT 30
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: LIST
7746: PUSH
7747: LD_OWVAR 67
7751: ARRAY
7752: PPUSH
7753: CALL_OW 277
// end ; end ;
7757: GO 7577
7759: POP
7760: POP
// end ; if multi_custom_commanders then
7761: LD_EXP 27
7765: IFFALSE 7974
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
7767: LD_ADDR_VAR 0 6
7771: PUSH
7772: LD_VAR 0 2
7776: PPUSH
7777: LD_EXP 18
7781: PUSH
7782: LD_VAR 0 2
7786: ARRAY
7787: PPUSH
7788: CALL 7112 0 2
7792: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
7793: LD_ADDR_EXP 35
7797: PUSH
7798: LD_EXP 35
7802: PPUSH
7803: LD_EXP 35
7807: PUSH
7808: LD_INT 1
7810: PLUS
7811: PPUSH
7812: LD_VAR 0 6
7816: PPUSH
7817: CALL_OW 2
7821: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
7822: LD_VAR 0 6
7826: PPUSH
7827: CALL_OW 257
7831: PUSH
7832: LD_INT 3
7834: EQUAL
7835: IFFALSE 7939
// begin PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun , 80 ) ;
7837: LD_INT 23
7839: PPUSH
7840: LD_INT 1
7842: PPUSH
7843: LD_INT 1
7845: PPUSH
7846: LD_INT 46
7848: PPUSH
7849: LD_INT 80
7851: PPUSH
7852: CALL 20003 0 5
// veh := CreateVehicle ;
7856: LD_ADDR_VAR 0 7
7860: PUSH
7861: CALL_OW 45
7865: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
7866: LD_VAR 0 7
7870: PPUSH
7871: LD_VAR 0 6
7875: PPUSH
7876: CALL_OW 255
7880: PUSH
7881: LD_INT 1
7883: NEG
7884: MUL
7885: PPUSH
7886: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
7890: LD_VAR 0 7
7894: PPUSH
7895: LD_EXP 23
7899: PUSH
7900: LD_EXP 18
7904: PUSH
7905: LD_VAR 0 2
7909: ARRAY
7910: ARRAY
7911: PUSH
7912: LD_INT 2
7914: ARRAY
7915: PPUSH
7916: LD_INT 0
7918: PPUSH
7919: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7923: LD_VAR 0 6
7927: PPUSH
7928: LD_VAR 0 7
7932: PPUSH
7933: CALL_OW 52
// end else
7937: GO 7972
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7939: LD_VAR 0 6
7943: PPUSH
7944: LD_EXP 23
7948: PUSH
7949: LD_EXP 18
7953: PUSH
7954: LD_VAR 0 2
7958: ARRAY
7959: ARRAY
7960: PUSH
7961: LD_INT 1
7963: ARRAY
7964: PPUSH
7965: LD_INT 0
7967: PPUSH
7968: CALL_OW 49
// end else
7972: GO 8185
// begin uc_side := i ;
7974: LD_ADDR_OWVAR 20
7978: PUSH
7979: LD_VAR 0 2
7983: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7984: LD_ADDR_OWVAR 21
7988: PUSH
7989: LD_EXP 20
7993: PUSH
7994: LD_VAR 0 2
7998: ARRAY
7999: ST_TO_ADDR
// hc_importance := 100 ;
8000: LD_ADDR_OWVAR 32
8004: PUSH
8005: LD_INT 100
8007: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
8008: LD_INT 0
8010: PPUSH
8011: LD_INT 1
8013: PPUSH
8014: LD_EXP 31
8018: PPUSH
8019: CALL_OW 380
// if multiplayer then
8023: LD_OWVAR 4
8027: IFFALSE 8085
// begin hc_name := mp_sides_players_names [ i ] ;
8029: LD_ADDR_OWVAR 26
8033: PUSH
8034: LD_OWVAR 19
8038: PUSH
8039: LD_VAR 0 2
8043: ARRAY
8044: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
8045: LD_ADDR_OWVAR 33
8049: PUSH
8050: LD_STRING MULTIAVATARS
8052: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
8053: LD_ADDR_OWVAR 34
8057: PUSH
8058: LD_VAR 0 2
8062: PPUSH
8063: CALL_OW 525
8067: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
8068: LD_ADDR_OWVAR 27
8072: PUSH
8073: LD_VAR 0 2
8077: PPUSH
8078: CALL_OW 526
8082: ST_TO_ADDR
// end else
8083: GO 8117
// begin hc_gallery :=  ;
8085: LD_ADDR_OWVAR 33
8089: PUSH
8090: LD_STRING 
8092: ST_TO_ADDR
// hc_name :=  ;
8093: LD_ADDR_OWVAR 26
8097: PUSH
8098: LD_STRING 
8100: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
8101: LD_ADDR_OWVAR 27
8105: PUSH
8106: LD_INT 1
8108: PPUSH
8109: LD_INT 2
8111: PPUSH
8112: CALL_OW 12
8116: ST_TO_ADDR
// end ; un := CreateHuman ;
8117: LD_ADDR_VAR 0 6
8121: PUSH
8122: CALL_OW 44
8126: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8127: LD_VAR 0 6
8131: PPUSH
8132: LD_EXP 23
8136: PUSH
8137: LD_EXP 18
8141: PUSH
8142: LD_VAR 0 2
8146: ARRAY
8147: ARRAY
8148: PUSH
8149: LD_INT 1
8151: ARRAY
8152: PPUSH
8153: LD_INT 0
8155: PPUSH
8156: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
8160: LD_ADDR_EXP 35
8164: PUSH
8165: LD_EXP 35
8169: PPUSH
8170: LD_VAR 0 2
8174: PPUSH
8175: LD_VAR 0 6
8179: PPUSH
8180: CALL_OW 1
8184: ST_TO_ADDR
// end ; InitHc ;
8185: CALL_OW 19
// InitUc ;
8189: CALL_OW 18
// uc_side := i ;
8193: LD_ADDR_OWVAR 20
8197: PUSH
8198: LD_VAR 0 2
8202: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8203: LD_ADDR_OWVAR 21
8207: PUSH
8208: LD_EXP 20
8212: PUSH
8213: LD_VAR 0 2
8217: ARRAY
8218: ST_TO_ADDR
// hc_gallery :=  ;
8219: LD_ADDR_OWVAR 33
8223: PUSH
8224: LD_STRING 
8226: ST_TO_ADDR
// hc_name :=  ;
8227: LD_ADDR_OWVAR 26
8231: PUSH
8232: LD_STRING 
8234: ST_TO_ADDR
// hc_importance := 0 ;
8235: LD_ADDR_OWVAR 32
8239: PUSH
8240: LD_INT 0
8242: ST_TO_ADDR
// cl := 1 ;
8243: LD_ADDR_VAR 0 5
8247: PUSH
8248: LD_INT 1
8250: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
8251: LD_ADDR_VAR 0 3
8255: PUSH
8256: DOUBLE
8257: LD_INT 2
8259: DEC
8260: ST_TO_ADDR
8261: LD_EXP 30
8265: PUSH
8266: FOR_TO
8267: IFFALSE 8670
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
8269: LD_VAR 0 3
8273: PUSH
8274: LD_INT 1
8276: MINUS
8277: PUSH
8278: LD_EXP 30
8282: PUSH
8283: LD_INT 1
8285: MINUS
8286: PUSH
8287: LD_INT 4
8289: DIVREAL
8290: MOD
8291: PUSH
8292: LD_INT 0
8294: EQUAL
8295: IFFALSE 8311
// cl := cl + 1 ;
8297: LD_ADDR_VAR 0 5
8301: PUSH
8302: LD_VAR 0 5
8306: PUSH
8307: LD_INT 1
8309: PLUS
8310: ST_TO_ADDR
// if cl > 4 then
8311: LD_VAR 0 5
8315: PUSH
8316: LD_INT 4
8318: GREATER
8319: IFFALSE 8329
// cl := 1 ;
8321: LD_ADDR_VAR 0 5
8325: PUSH
8326: LD_INT 1
8328: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
8329: LD_INT 0
8331: PPUSH
8332: LD_VAR 0 5
8336: PPUSH
8337: LD_EXP 31
8341: PPUSH
8342: CALL_OW 380
// un := CreateHuman ;
8346: LD_ADDR_VAR 0 6
8350: PUSH
8351: CALL_OW 44
8355: ST_TO_ADDR
// if j > copy then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_VAR 0 9
8365: GREATER
8366: IFFALSE 8395
// copy := Replace ( copy , j , un ) else
8368: LD_ADDR_VAR 0 9
8372: PUSH
8373: LD_VAR 0 9
8377: PPUSH
8378: LD_VAR 0 3
8382: PPUSH
8383: LD_VAR 0 6
8387: PPUSH
8388: CALL_OW 1
8392: ST_TO_ADDR
8393: GO 8477
// begin CopySkills ( copy [ j ] , un ) ;
8395: LD_VAR 0 9
8399: PUSH
8400: LD_VAR 0 3
8404: ARRAY
8405: PPUSH
8406: LD_VAR 0 6
8410: PPUSH
8411: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
8415: LD_VAR 0 6
8419: PPUSH
8420: LD_INT 2
8422: PPUSH
8423: LD_VAR 0 9
8427: PUSH
8428: LD_VAR 0 3
8432: ARRAY
8433: PPUSH
8434: LD_INT 2
8436: PPUSH
8437: CALL_OW 260
8441: PPUSH
8442: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
8446: LD_VAR 0 6
8450: PPUSH
8451: LD_INT 1
8453: PPUSH
8454: LD_VAR 0 9
8458: PUSH
8459: LD_VAR 0 3
8463: ARRAY
8464: PPUSH
8465: LD_INT 1
8467: PPUSH
8468: CALL_OW 260
8472: PPUSH
8473: CALL_OW 239
// end ; if multi_pos_area then
8477: LD_EXP 23
8481: IFFALSE 8668
// begin if GetClass ( un ) = 3 then
8483: LD_VAR 0 6
8487: PPUSH
8488: CALL_OW 257
8492: PUSH
8493: LD_INT 3
8495: EQUAL
8496: IFFALSE 8635
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_cargo_bay ] [ j mod 4 + 1 ] , 80 ) ;
8498: LD_INT 22
8500: PPUSH
8501: LD_INT 1
8503: PPUSH
8504: LD_INT 1
8506: PPUSH
8507: LD_INT 44
8509: PUSH
8510: LD_INT 44
8512: PUSH
8513: LD_INT 43
8515: PUSH
8516: LD_INT 51
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: PUSH
8525: LD_VAR 0 3
8529: PUSH
8530: LD_INT 4
8532: MOD
8533: PUSH
8534: LD_INT 1
8536: PLUS
8537: ARRAY
8538: PPUSH
8539: LD_INT 80
8541: PPUSH
8542: CALL 20003 0 5
// veh := CreateVehicle ;
8546: LD_ADDR_VAR 0 7
8550: PUSH
8551: CALL_OW 45
8555: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8556: LD_VAR 0 7
8560: PPUSH
8561: LD_EXP 23
8565: PUSH
8566: LD_EXP 18
8570: PUSH
8571: LD_VAR 0 2
8575: ARRAY
8576: ARRAY
8577: PUSH
8578: LD_INT 2
8580: ARRAY
8581: PPUSH
8582: LD_INT 0
8584: PPUSH
8585: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8589: LD_VAR 0 6
8593: PPUSH
8594: LD_VAR 0 7
8598: PPUSH
8599: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
8603: LD_VAR 0 7
8607: PPUSH
8608: CALL_OW 264
8612: PUSH
8613: LD_INT 51
8615: EQUAL
8616: IFFALSE 8633
// SetCargo ( veh , mat_cans , 100 ) ;
8618: LD_VAR 0 7
8622: PPUSH
8623: LD_INT 1
8625: PPUSH
8626: LD_INT 100
8628: PPUSH
8629: CALL_OW 290
// continue ;
8633: GO 8266
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8635: LD_VAR 0 6
8639: PPUSH
8640: LD_EXP 23
8644: PUSH
8645: LD_EXP 18
8649: PUSH
8650: LD_VAR 0 2
8654: ARRAY
8655: ARRAY
8656: PUSH
8657: LD_INT 1
8659: ARRAY
8660: PPUSH
8661: LD_INT 0
8663: PPUSH
8664: CALL_OW 49
// end ; end ;
8668: GO 8266
8670: POP
8671: POP
// end ;
8672: GO 7493
8674: POP
8675: POP
// end ;
8676: LD_VAR 0 1
8680: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
8681: LD_INT 0
8683: PPUSH
8684: PPUSH
8685: PPUSH
8686: PPUSH
8687: PPUSH
// if not multi_support then
8688: LD_EXP 34
8692: NOT
8693: IFFALSE 8697
// exit ;
8695: GO 8984
// result := [ ] ;
8697: LD_ADDR_VAR 0 1
8701: PUSH
8702: EMPTY
8703: ST_TO_ADDR
// for i := 1 to 8 do
8704: LD_ADDR_VAR 0 2
8708: PUSH
8709: DOUBLE
8710: LD_INT 1
8712: DEC
8713: ST_TO_ADDR
8714: LD_INT 8
8716: PUSH
8717: FOR_TO
8718: IFFALSE 8982
// begin result := Replace ( result , i , [ ] ) ;
8720: LD_ADDR_VAR 0 1
8724: PUSH
8725: LD_VAR 0 1
8729: PPUSH
8730: LD_VAR 0 2
8734: PPUSH
8735: EMPTY
8736: PPUSH
8737: CALL_OW 1
8741: ST_TO_ADDR
// if multi_sides [ i ] then
8742: LD_EXP 18
8746: PUSH
8747: LD_VAR 0 2
8751: ARRAY
8752: IFFALSE 8980
// begin tmp := [ ] ;
8754: LD_ADDR_VAR 0 5
8758: PUSH
8759: EMPTY
8760: ST_TO_ADDR
// if multi_support = 1 then
8761: LD_EXP 34
8765: PUSH
8766: LD_INT 1
8768: EQUAL
8769: IFFALSE 8858
// begin uc_side := i ;
8771: LD_ADDR_OWVAR 20
8775: PUSH
8776: LD_VAR 0 2
8780: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8781: LD_ADDR_OWVAR 21
8785: PUSH
8786: LD_EXP 20
8790: PUSH
8791: LD_VAR 0 2
8795: ARRAY
8796: ST_TO_ADDR
// for j := 1 to 2 do
8797: LD_ADDR_VAR 0 3
8801: PUSH
8802: DOUBLE
8803: LD_INT 1
8805: DEC
8806: ST_TO_ADDR
8807: LD_INT 2
8809: PUSH
8810: FOR_TO
8811: IFFALSE 8856
// begin InitHC_All ( ) ;
8813: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
8817: LD_INT 0
8819: PPUSH
8820: LD_INT 1
8822: PPUSH
8823: LD_INT 4
8825: PPUSH
8826: CALL_OW 12
8830: PPUSH
8831: LD_INT 1
8833: PPUSH
8834: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
8838: LD_ADDR_VAR 0 5
8842: PUSH
8843: LD_VAR 0 5
8847: PUSH
8848: CALL_OW 44
8852: ADD
8853: ST_TO_ADDR
// end ;
8854: GO 8810
8856: POP
8857: POP
// end ; if multi_support = 2 then
8858: LD_EXP 34
8862: PUSH
8863: LD_INT 2
8865: EQUAL
8866: IFFALSE 8955
// begin uc_side := i ;
8868: LD_ADDR_OWVAR 20
8872: PUSH
8873: LD_VAR 0 2
8877: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8878: LD_ADDR_OWVAR 21
8882: PUSH
8883: LD_EXP 20
8887: PUSH
8888: LD_VAR 0 2
8892: ARRAY
8893: ST_TO_ADDR
// for j := 1 to 4 do
8894: LD_ADDR_VAR 0 3
8898: PUSH
8899: DOUBLE
8900: LD_INT 1
8902: DEC
8903: ST_TO_ADDR
8904: LD_INT 4
8906: PUSH
8907: FOR_TO
8908: IFFALSE 8953
// begin InitHC_All ( ) ;
8910: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 2 ) ;
8914: LD_INT 0
8916: PPUSH
8917: LD_INT 1
8919: PPUSH
8920: LD_INT 4
8922: PPUSH
8923: CALL_OW 12
8927: PPUSH
8928: LD_INT 2
8930: PPUSH
8931: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
8935: LD_ADDR_VAR 0 5
8939: PUSH
8940: LD_VAR 0 5
8944: PUSH
8945: CALL_OW 44
8949: ADD
8950: ST_TO_ADDR
// end ;
8951: GO 8907
8953: POP
8954: POP
// end ; result := Replace ( result , i , tmp ) ;
8955: LD_ADDR_VAR 0 1
8959: PUSH
8960: LD_VAR 0 1
8964: PPUSH
8965: LD_VAR 0 2
8969: PPUSH
8970: LD_VAR 0 5
8974: PPUSH
8975: CALL_OW 1
8979: ST_TO_ADDR
// end ; end ;
8980: GO 8717
8982: POP
8983: POP
// end ;
8984: LD_VAR 0 1
8988: RET
// export function Multiplayer_Start ( ) ; begin
8989: LD_INT 0
8991: PPUSH
// Multiplayer_PrepareApemans ( ) ;
8992: CALL 7371 0 0
// Multiplayer_PreparePlayers ( ) ;
8996: CALL 7468 0 0
// Multiplayer_InitPointSystem ( ) ;
9000: CALL 9730 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
9004: LD_INT 20
9006: PPUSH
9007: CALL 9906 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
9011: LD_INT 150
9013: PPUSH
9014: CALL 9906 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
9018: LD_INT 5
9020: PPUSH
9021: CALL 9906 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
9025: LD_INT 40
9027: NEG
9028: PPUSH
9029: CALL 9906 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
9033: LD_INT 200
9035: PPUSH
9036: CALL 9906 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
9040: LD_INT 2
9042: PPUSH
9043: CALL 9906 0 1
// if multi_support then
9047: LD_EXP 34
9051: IFFALSE 9063
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
9053: LD_ADDR_EXP 38
9057: PUSH
9058: CALL 8681 0 0
9062: ST_TO_ADDR
// if multi_sides [ your_side ] then
9063: LD_EXP 18
9067: PUSH
9068: LD_OWVAR 2
9072: ARRAY
9073: IFFALSE 9100
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
9075: LD_INT 22
9077: PUSH
9078: LD_OWVAR 2
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: PPUSH
9087: CALL_OW 69
9091: PUSH
9092: LD_INT 1
9094: ARRAY
9095: PPUSH
9096: CALL_OW 87
// end ;
9100: LD_VAR 0 1
9104: RET
// export function Multiplayer_End ( ) ; var i , j ; begin
9105: LD_INT 0
9107: PPUSH
9108: PPUSH
9109: PPUSH
// repeat wait ( 0 0$1 ) ;
9110: LD_INT 35
9112: PPUSH
9113: CALL_OW 67
// if tick > multi_support_arrive_time and multi_support then
9117: LD_OWVAR 1
9121: PUSH
9122: LD_EXP 39
9126: GREATER
9127: PUSH
9128: LD_EXP 34
9132: AND
9133: IFFALSE 9298
// begin if tick mod 1 1$00 = 0 then
9135: LD_OWVAR 1
9139: PUSH
9140: LD_INT 2100
9142: MOD
9143: PUSH
9144: LD_INT 0
9146: EQUAL
9147: IFFALSE 9298
// begin for i := 1 to 8 do
9149: LD_ADDR_VAR 0 2
9153: PUSH
9154: DOUBLE
9155: LD_INT 1
9157: DEC
9158: ST_TO_ADDR
9159: LD_INT 8
9161: PUSH
9162: FOR_TO
9163: IFFALSE 9296
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] and Prob ( [ 80 , 60 , 40 ] [ Difficulty ] ) then
9165: LD_EXP 18
9169: PUSH
9170: LD_VAR 0 2
9174: ARRAY
9175: PUSH
9176: LD_EXP 36
9180: PUSH
9181: LD_VAR 0 2
9185: ARRAY
9186: NOT
9187: AND
9188: PUSH
9189: LD_EXP 38
9193: PUSH
9194: LD_VAR 0 2
9198: ARRAY
9199: AND
9200: PUSH
9201: LD_INT 80
9203: PUSH
9204: LD_INT 60
9206: PUSH
9207: LD_INT 40
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: LIST
9214: PUSH
9215: LD_OWVAR 67
9219: ARRAY
9220: PPUSH
9221: CALL_OW 13
9225: AND
9226: IFFALSE 9294
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
9228: LD_EXP 38
9232: PUSH
9233: LD_VAR 0 2
9237: ARRAY
9238: PUSH
9239: LD_INT 1
9241: ARRAY
9242: PPUSH
9243: LD_INT 11
9245: PPUSH
9246: LD_INT 1
9248: PPUSH
9249: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
9253: LD_ADDR_EXP 38
9257: PUSH
9258: LD_EXP 38
9262: PPUSH
9263: LD_VAR 0 2
9267: PPUSH
9268: LD_EXP 38
9272: PUSH
9273: LD_VAR 0 2
9277: ARRAY
9278: PPUSH
9279: LD_INT 1
9281: PPUSH
9282: CALL_OW 3
9286: PPUSH
9287: CALL_OW 1
9291: ST_TO_ADDR
// break ;
9292: GO 9296
// end ; end ;
9294: GO 9162
9296: POP
9297: POP
// end ; end ; if not multi_custom_commanders then
9298: LD_EXP 27
9302: NOT
9303: IFFALSE 9416
// begin for i := 1 to 8 do
9305: LD_ADDR_VAR 0 2
9309: PUSH
9310: DOUBLE
9311: LD_INT 1
9313: DEC
9314: ST_TO_ADDR
9315: LD_INT 8
9317: PUSH
9318: FOR_TO
9319: IFFALSE 9390
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
9321: LD_INT 22
9323: PUSH
9324: LD_VAR 0 2
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PPUSH
9333: CALL_OW 69
9337: PUSH
9338: LD_INT 0
9340: EQUAL
9341: PUSH
9342: LD_EXP 36
9346: PUSH
9347: LD_VAR 0 2
9351: ARRAY
9352: NOT
9353: AND
9354: IFFALSE 9388
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
9356: LD_ADDR_EXP 36
9360: PUSH
9361: LD_EXP 36
9365: PPUSH
9366: LD_VAR 0 2
9370: PPUSH
9371: LD_INT 1
9373: PPUSH
9374: CALL_OW 1
9378: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
9379: LD_VAR 0 2
9383: PPUSH
9384: CALL 9976 0 1
// end ; end ;
9388: GO 9318
9390: POP
9391: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
9392: LD_EXP 36
9396: PPUSH
9397: CALL 17265 0 1
9401: PUSH
9402: LD_EXP 18
9406: PPUSH
9407: CALL 17265 0 1
9411: EQUAL
9412: IFFALSE 9416
// break ;
9414: GO 9436
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
9416: CALL 9550 0 0
9420: NOT
9421: PUSH
9422: LD_EXP 2
9426: AND
9427: PUSH
9428: LD_EXP 35
9432: NOT
9433: OR
9434: IFFALSE 9110
// game := false ;
9436: LD_ADDR_EXP 2
9440: PUSH
9441: LD_INT 0
9443: ST_TO_ADDR
// for i := 1 to 8 do
9444: LD_ADDR_VAR 0 2
9448: PUSH
9449: DOUBLE
9450: LD_INT 1
9452: DEC
9453: ST_TO_ADDR
9454: LD_INT 8
9456: PUSH
9457: FOR_TO
9458: IFFALSE 9494
// begin if multi_sides [ i ] then
9460: LD_EXP 18
9464: PUSH
9465: LD_VAR 0 2
9469: ARRAY
9470: IFFALSE 9492
// SetMultiScore ( i , multi_points [ i ] ) ;
9472: LD_VAR 0 2
9476: PPUSH
9477: LD_EXP 41
9481: PUSH
9482: LD_VAR 0 2
9486: ARRAY
9487: PPUSH
9488: CALL_OW 506
// end ;
9492: GO 9457
9494: POP
9495: POP
// if multi_loosers [ your_side ] then
9496: LD_EXP 36
9500: PUSH
9501: LD_OWVAR 2
9505: ARRAY
9506: IFFALSE 9529
// begin if Multiplayer then
9508: LD_OWVAR 4
9512: IFFALSE 9520
// YouLostInMultiplayer else
9514: CALL_OW 107
9518: GO 9527
// YouLost (  ) ;
9520: LD_STRING 
9522: PPUSH
9523: CALL_OW 104
// end else
9527: GO 9545
// begin if Multiplayer then
9529: LD_OWVAR 4
9533: IFFALSE 9541
// YouWinInMultiplayer else
9535: CALL_OW 106
9539: GO 9545
// YouWin ;
9541: CALL_OW 103
// end ; end ;
9545: LD_VAR 0 1
9549: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
9550: LD_INT 0
9552: PPUSH
9553: PPUSH
// result := false ;
9554: LD_ADDR_VAR 0 1
9558: PUSH
9559: LD_INT 0
9561: ST_TO_ADDR
// for side in botSides do
9562: LD_ADDR_VAR 0 2
9566: PUSH
9567: LD_EXP 3
9571: PUSH
9572: FOR_IN
9573: IFFALSE 9634
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
9575: LD_ADDR_VAR 0 1
9579: PUSH
9580: LD_INT 22
9582: PUSH
9583: LD_VAR 0 2
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 50
9604: PUSH
9605: EMPTY
9606: LIST
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: PPUSH
9613: CALL_OW 69
9617: PUSH
9618: LD_INT 0
9620: GREATER
9621: ST_TO_ADDR
// if result then
9622: LD_VAR 0 1
9626: IFFALSE 9632
// exit ;
9628: POP
9629: POP
9630: GO 9636
// end ;
9632: GO 9572
9634: POP
9635: POP
// end ;
9636: LD_VAR 0 1
9640: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
9641: LD_INT 0
9643: PPUSH
9644: PPUSH
// result := [ ] ;
9645: LD_ADDR_VAR 0 1
9649: PUSH
9650: EMPTY
9651: ST_TO_ADDR
// for i := 1 to 8 do
9652: LD_ADDR_VAR 0 2
9656: PUSH
9657: DOUBLE
9658: LD_INT 1
9660: DEC
9661: ST_TO_ADDR
9662: LD_INT 8
9664: PUSH
9665: FOR_TO
9666: IFFALSE 9723
// begin if multi_sides [ i ] then
9668: LD_EXP 18
9672: PUSH
9673: LD_VAR 0 2
9677: ARRAY
9678: IFFALSE 9721
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
9680: LD_ADDR_VAR 0 1
9684: PUSH
9685: LD_VAR 0 1
9689: PUSH
9690: LD_STRING #coop-points
9692: PUSH
9693: LD_VAR 0 2
9697: PUSH
9698: LD_VAR 0 2
9702: PUSH
9703: LD_EXP 41
9707: PUSH
9708: LD_VAR 0 2
9712: ARRAY
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: ADD
9720: ST_TO_ADDR
// end ; end ;
9721: GO 9665
9723: POP
9724: POP
// end ;
9725: LD_VAR 0 1
9729: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
9730: LD_INT 0
9732: PPUSH
9733: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9734: LD_ADDR_EXP 41
9738: PUSH
9739: LD_INT 0
9741: PUSH
9742: LD_INT 0
9744: PUSH
9745: LD_INT 0
9747: PUSH
9748: LD_INT 0
9750: PUSH
9751: LD_INT 0
9753: PUSH
9754: LD_INT 0
9756: PUSH
9757: LD_INT 0
9759: PUSH
9760: LD_INT 0
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: ST_TO_ADDR
// multi_points_conditions := [ ] ;
9773: LD_ADDR_EXP 42
9777: PUSH
9778: EMPTY
9779: ST_TO_ADDR
// end ;
9780: LD_VAR 0 1
9784: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
9785: LD_INT 0
9787: PPUSH
// if not multi_points or not side or side > 8 then
9788: LD_EXP 41
9792: NOT
9793: PUSH
9794: LD_VAR 0 1
9798: NOT
9799: OR
9800: PUSH
9801: LD_VAR 0 1
9805: PUSH
9806: LD_INT 8
9808: GREATER
9809: OR
9810: IFFALSE 9814
// exit ;
9812: GO 9851
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
9814: LD_ADDR_EXP 41
9818: PUSH
9819: LD_EXP 41
9823: PPUSH
9824: LD_VAR 0 1
9828: PPUSH
9829: LD_EXP 41
9833: PUSH
9834: LD_VAR 0 1
9838: ARRAY
9839: PUSH
9840: LD_VAR 0 2
9844: PLUS
9845: PPUSH
9846: CALL_OW 1
9850: ST_TO_ADDR
// end ;
9851: LD_VAR 0 3
9855: RET
// export function Multiplayer_GetPoints ( side ) ; begin
9856: LD_INT 0
9858: PPUSH
// if not multi_points or not side or side > 8 then
9859: LD_EXP 41
9863: NOT
9864: PUSH
9865: LD_VAR 0 1
9869: NOT
9870: OR
9871: PUSH
9872: LD_VAR 0 1
9876: PUSH
9877: LD_INT 8
9879: GREATER
9880: OR
9881: IFFALSE 9885
// exit ;
9883: GO 9901
// result := multi_points [ side ] ;
9885: LD_ADDR_VAR 0 2
9889: PUSH
9890: LD_EXP 41
9894: PUSH
9895: LD_VAR 0 1
9899: ARRAY
9900: ST_TO_ADDR
// end ;
9901: LD_VAR 0 2
9905: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
9906: LD_INT 0
9908: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
9909: LD_ADDR_EXP 42
9913: PUSH
9914: LD_EXP 42
9918: PPUSH
9919: LD_EXP 42
9923: PUSH
9924: LD_INT 1
9926: PLUS
9927: PPUSH
9928: LD_VAR 0 1
9932: PPUSH
9933: CALL_OW 1
9937: ST_TO_ADDR
// end ;
9938: LD_VAR 0 2
9942: RET
// export function Multiplayer_GetCondition ( id ) ; begin
9943: LD_INT 0
9945: PPUSH
// if not id then
9946: LD_VAR 0 1
9950: NOT
9951: IFFALSE 9955
// exit ;
9953: GO 9971
// result := multi_points_conditions [ id ] ;
9955: LD_ADDR_VAR 0 2
9959: PUSH
9960: LD_EXP 42
9964: PUSH
9965: LD_VAR 0 1
9969: ARRAY
9970: ST_TO_ADDR
// end ;
9971: LD_VAR 0 2
9975: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
9976: LD_INT 0
9978: PPUSH
9979: PPUSH
9980: PPUSH
9981: PPUSH
9982: PPUSH
// players := [ ] ;
9983: LD_ADDR_VAR 0 3
9987: PUSH
9988: EMPTY
9989: ST_TO_ADDR
// for i = 1 to 8 do
9990: LD_ADDR_VAR 0 4
9994: PUSH
9995: DOUBLE
9996: LD_INT 1
9998: DEC
9999: ST_TO_ADDR
10000: LD_INT 8
10002: PUSH
10003: FOR_TO
10004: IFFALSE 10063
// begin if i = side then
10006: LD_VAR 0 4
10010: PUSH
10011: LD_VAR 0 1
10015: EQUAL
10016: IFFALSE 10020
// continue ;
10018: GO 10003
// if multi_sides [ i ] and not multi_loosers [ i ] then
10020: LD_EXP 18
10024: PUSH
10025: LD_VAR 0 4
10029: ARRAY
10030: PUSH
10031: LD_EXP 36
10035: PUSH
10036: LD_VAR 0 4
10040: ARRAY
10041: NOT
10042: AND
10043: IFFALSE 10061
// players := players ^ i ;
10045: LD_ADDR_VAR 0 3
10049: PUSH
10050: LD_VAR 0 3
10054: PUSH
10055: LD_VAR 0 4
10059: ADD
10060: ST_TO_ADDR
// end ;
10061: GO 10003
10063: POP
10064: POP
// if not players then
10065: LD_VAR 0 3
10069: NOT
10070: IFFALSE 10074
// exit ;
10072: GO 10341
// if players = 1 then
10074: LD_VAR 0 3
10078: PUSH
10079: LD_INT 1
10081: EQUAL
10082: IFFALSE 10143
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
10084: LD_ADDR_VAR 0 4
10088: PUSH
10089: LD_INT 22
10091: PUSH
10092: LD_VAR 0 1
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PUSH
10101: LD_INT 51
10103: PUSH
10104: EMPTY
10105: LIST
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: PPUSH
10111: CALL_OW 69
10115: PUSH
10116: FOR_IN
10117: IFFALSE 10139
// SetSide ( i , players [ 1 ] ) ;
10119: LD_VAR 0 4
10123: PPUSH
10124: LD_VAR 0 3
10128: PUSH
10129: LD_INT 1
10131: ARRAY
10132: PPUSH
10133: CALL_OW 235
10137: GO 10116
10139: POP
10140: POP
// end else
10141: GO 10341
// begin j := 1 ;
10143: LD_ADDR_VAR 0 5
10147: PUSH
10148: LD_INT 1
10150: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
10151: LD_ADDR_VAR 0 4
10155: PUSH
10156: LD_INT 22
10158: PUSH
10159: LD_VAR 0 1
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 2
10170: PUSH
10171: LD_INT 21
10173: PUSH
10174: LD_INT 1
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 51
10183: PUSH
10184: EMPTY
10185: LIST
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: LD_INT 21
10193: PUSH
10194: LD_INT 2
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PPUSH
10210: CALL_OW 69
10214: PUSH
10215: FOR_IN
10216: IFFALSE 10339
// begin SetSide ( i , players [ j ] ) ;
10218: LD_VAR 0 4
10222: PPUSH
10223: LD_VAR 0 3
10227: PUSH
10228: LD_VAR 0 5
10232: ARRAY
10233: PPUSH
10234: CALL_OW 235
// if IsDrivenBy ( i ) then
10238: LD_VAR 0 4
10242: PPUSH
10243: CALL_OW 311
10247: IFFALSE 10274
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
10249: LD_VAR 0 4
10253: PPUSH
10254: CALL_OW 311
10258: PPUSH
10259: LD_VAR 0 3
10263: PUSH
10264: LD_VAR 0 5
10268: ARRAY
10269: PPUSH
10270: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
10274: LD_VAR 0 4
10278: PPUSH
10279: CALL_OW 310
10283: PPUSH
10284: CALL_OW 247
10288: PUSH
10289: LD_INT 3
10291: EQUAL
10292: IFFALSE 10303
// ComExitBuilding ( i ) ;
10294: LD_VAR 0 4
10298: PPUSH
10299: CALL_OW 122
// j := j + 1 ;
10303: LD_ADDR_VAR 0 5
10307: PUSH
10308: LD_VAR 0 5
10312: PUSH
10313: LD_INT 1
10315: PLUS
10316: ST_TO_ADDR
// if j > players then
10317: LD_VAR 0 5
10321: PUSH
10322: LD_VAR 0 3
10326: GREATER
10327: IFFALSE 10337
// j := 1 ;
10329: LD_ADDR_VAR 0 5
10333: PUSH
10334: LD_INT 1
10336: ST_TO_ADDR
// end ;
10337: GO 10215
10339: POP
10340: POP
// end ; end ;
10341: LD_VAR 0 2
10345: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
10346: LD_INT 0
10348: PPUSH
10349: PPUSH
10350: PPUSH
// i := 3 ;
10351: LD_ADDR_VAR 0 2
10355: PUSH
10356: LD_INT 3
10358: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
10359: LD_ADDR_VAR 0 3
10363: PUSH
10364: LD_INT 5
10366: PUSH
10367: LD_INT 10
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 120
10376: PUSH
10377: LD_INT 2
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 101
10386: PUSH
10387: LD_INT 8
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 27
10396: PUSH
10397: LD_INT 4
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
10410: LD_INT 4
10412: PPUSH
10413: LD_INT 5
10415: PPUSH
10416: LD_VAR 0 3
10420: PUSH
10421: LD_VAR 0 2
10425: ARRAY
10426: PUSH
10427: LD_INT 1
10429: ARRAY
10430: PPUSH
10431: LD_VAR 0 3
10435: PUSH
10436: LD_VAR 0 2
10440: ARRAY
10441: PUSH
10442: LD_INT 2
10444: ARRAY
10445: PPUSH
10446: LD_INT 0
10448: PPUSH
10449: CALL_OW 58
// end ;
10453: LD_VAR 0 1
10457: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
10458: LD_INT 0
10460: PPUSH
// if not side or side > 8 then
10461: LD_VAR 0 1
10465: NOT
10466: PUSH
10467: LD_VAR 0 1
10471: PUSH
10472: LD_INT 8
10474: GREATER
10475: OR
10476: IFFALSE 10480
// exit ;
10478: GO 10497
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_INT 6
10487: PPUSH
10488: CALL 9943 0 1
10492: PPUSH
10493: CALL 9785 0 2
// end ;
10497: LD_VAR 0 2
10501: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
10502: LD_INT 0
10504: PPUSH
// if not side or side > 8 then
10505: LD_VAR 0 1
10509: NOT
10510: PUSH
10511: LD_VAR 0 1
10515: PUSH
10516: LD_INT 8
10518: GREATER
10519: OR
10520: IFFALSE 10524
// exit ;
10522: GO 10541
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
10524: LD_VAR 0 1
10528: PPUSH
10529: LD_INT 4
10531: PPUSH
10532: CALL 9943 0 1
10536: PPUSH
10537: CALL 9785 0 2
// end ;
10541: LD_VAR 0 2
10545: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
10546: LD_INT 0
10548: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
10549: LD_VAR 0 1
10553: NOT
10554: PUSH
10555: LD_VAR 0 1
10559: PUSH
10560: LD_INT 8
10562: GREATER
10563: OR
10564: PUSH
10565: LD_VAR 0 2
10569: PUSH
10570: LD_INT 2
10572: PUSH
10573: LD_INT 6
10575: PUSH
10576: LD_INT 36
10578: PUSH
10579: LD_INT 0
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: IN
10588: NOT
10589: OR
10590: IFFALSE 10594
// exit ;
10592: GO 10611
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
10594: LD_VAR 0 1
10598: PPUSH
10599: LD_INT 3
10601: PPUSH
10602: CALL 9943 0 1
10606: PPUSH
10607: CALL 9785 0 2
// end ;
10611: LD_VAR 0 3
10615: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
10616: LD_INT 0
10618: PPUSH
10619: PPUSH
// if not un then
10620: LD_VAR 0 1
10624: NOT
10625: IFFALSE 10629
// exit ;
10627: GO 10675
// if not points then
10629: LD_VAR 0 3
10633: NOT
10634: IFFALSE 10651
// gained_points := Multiplayer_GetCondition ( 1 ) else
10636: LD_ADDR_VAR 0 5
10640: PUSH
10641: LD_INT 1
10643: PPUSH
10644: CALL 9943 0 1
10648: ST_TO_ADDR
10649: GO 10661
// gained_points := points ;
10651: LD_ADDR_VAR 0 5
10655: PUSH
10656: LD_VAR 0 3
10660: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
10661: LD_VAR 0 2
10665: PPUSH
10666: LD_VAR 0 5
10670: PPUSH
10671: CALL 9785 0 2
10675: LD_VAR 0 4
10679: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
10680: LD_INT 0
10682: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
10683: LD_VAR 0 1
10687: PPUSH
10688: LD_INT 2
10690: PPUSH
10691: CALL 9943 0 1
10695: PPUSH
10696: CALL 9785 0 2
// end ; end_of_file
10700: LD_VAR 0 2
10704: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
10705: LD_VAR 0 1
10709: PPUSH
10710: CALL_OW 255
10714: PUSH
10715: LD_EXP 3
10719: IN
10720: NOT
10721: IFFALSE 10725
// exit ;
10723: GO 10742
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
10725: LD_VAR 0 1
10729: PPUSH
10730: LD_VAR 0 2
10734: PPUSH
10735: LD_INT 0
10737: PPUSH
10738: CALL 10616 0 3
// end ;
10742: PPOPN 3
10744: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
10745: LD_INT 0
10747: PPUSH
10748: PPUSH
10749: PPUSH
10750: PPUSH
10751: PPUSH
10752: PPUSH
10753: PPUSH
10754: PPUSH
10755: PPUSH
10756: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
10757: LD_VAR 0 1
10761: PPUSH
10762: CALL 73757 0 1
// side := GetSide ( un ) ;
10766: LD_ADDR_VAR 0 3
10770: PUSH
10771: LD_VAR 0 1
10775: PPUSH
10776: CALL_OW 255
10780: ST_TO_ADDR
// if multi_sides [ side ] then
10781: LD_EXP 18
10785: PUSH
10786: LD_VAR 0 3
10790: ARRAY
10791: IFFALSE 10817
// if GetType ( un ) = unit_human then
10793: LD_VAR 0 1
10797: PPUSH
10798: CALL_OW 247
10802: PUSH
10803: LD_INT 1
10805: EQUAL
10806: IFFALSE 10817
// MultiplayerEvent_HumanLost ( side ) ;
10808: LD_VAR 0 3
10812: PPUSH
10813: CALL 10502 0 1
// if side in botSides then
10817: LD_VAR 0 3
10821: PUSH
10822: LD_EXP 3
10826: IN
10827: IFFALSE 11320
// begin if side = botSides [ 1 ] then
10829: LD_VAR 0 3
10833: PUSH
10834: LD_EXP 3
10838: PUSH
10839: LD_INT 1
10841: ARRAY
10842: EQUAL
10843: IFFALSE 11320
// begin if un in arForce then
10845: LD_VAR 0 1
10849: PUSH
10850: LD_EXP 14
10854: IN
10855: IFFALSE 10873
// arForce := arForce diff un ;
10857: LD_ADDR_EXP 14
10861: PUSH
10862: LD_EXP 14
10866: PUSH
10867: LD_VAR 0 1
10871: DIFF
10872: ST_TO_ADDR
// if un in arVehicles or un in arVehiclesAtttackers then
10873: LD_VAR 0 1
10877: PUSH
10878: LD_EXP 8
10882: IN
10883: PUSH
10884: LD_VAR 0 1
10888: PUSH
10889: LD_EXP 9
10893: IN
10894: OR
10895: IFFALSE 10989
// begin arVehicles := arVehicles diff un ;
10897: LD_ADDR_EXP 8
10901: PUSH
10902: LD_EXP 8
10906: PUSH
10907: LD_VAR 0 1
10911: DIFF
10912: ST_TO_ADDR
// arVehiclesAtttackers := arVehiclesAtttackers diff un ;
10913: LD_ADDR_EXP 9
10917: PUSH
10918: LD_EXP 9
10922: PUSH
10923: LD_VAR 0 1
10927: DIFF
10928: ST_TO_ADDR
// arConstructList := arConstructList ^ [ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ] ;
10929: LD_ADDR_EXP 6
10933: PUSH
10934: LD_EXP 6
10938: PUSH
10939: LD_VAR 0 1
10943: PPUSH
10944: CALL_OW 265
10948: PUSH
10949: LD_VAR 0 1
10953: PPUSH
10954: CALL_OW 262
10958: PUSH
10959: LD_VAR 0 1
10963: PPUSH
10964: CALL_OW 263
10968: PUSH
10969: LD_VAR 0 1
10973: PPUSH
10974: CALL_OW 264
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: PUSH
10985: EMPTY
10986: LIST
10987: ADD
10988: ST_TO_ADDR
// end ; if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
10989: LD_VAR 0 1
10993: PPUSH
10994: CALL_OW 257
10998: PUSH
10999: LD_INT 3
11001: EQUAL
11002: PUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 110
11012: PUSH
11013: LD_INT 999
11015: LESS
11016: AND
11017: PUSH
11018: LD_EXP 11
11022: AND
11023: IFFALSE 11164
// begin if not IsOk ( arDep ) then
11025: LD_INT 2
11027: PPUSH
11028: CALL_OW 302
11032: NOT
11033: IFFALSE 11037
// exit ;
11035: GO 11392
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
11037: LD_ADDR_EXP 11
11041: PUSH
11042: LD_EXP 11
11046: PPUSH
11047: CALL 54237 0 1
11051: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
11052: LD_ADDR_OWVAR 20
11056: PUSH
11057: LD_EXP 3
11061: PUSH
11062: LD_INT 1
11064: ARRAY
11065: ST_TO_ADDR
// uc_nation := nation_arabian ;
11066: LD_ADDR_OWVAR 21
11070: PUSH
11071: LD_INT 2
11073: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
11074: LD_INT 0
11076: PPUSH
11077: LD_INT 1
11079: PUSH
11080: LD_INT 2
11082: PUSH
11083: LD_INT 3
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: LIST
11090: PUSH
11091: LD_OWVAR 67
11095: ARRAY
11096: PPUSH
11097: CALL_OW 383
// un := CreateHuman ;
11101: LD_ADDR_VAR 0 1
11105: PUSH
11106: CALL_OW 44
11110: ST_TO_ADDR
// PlaceUnitXY ( un , 143 , 29 , false ) ;
11111: LD_VAR 0 1
11115: PPUSH
11116: LD_INT 143
11118: PPUSH
11119: LD_INT 29
11121: PPUSH
11122: LD_INT 0
11124: PPUSH
11125: CALL_OW 48
// ComMoveXY ( un , 115 , 52 ) ;
11129: LD_VAR 0 1
11133: PPUSH
11134: LD_INT 115
11136: PPUSH
11137: LD_INT 52
11139: PPUSH
11140: CALL_OW 111
// arForce := Join ( arForce , un ) ;
11144: LD_ADDR_EXP 14
11148: PUSH
11149: LD_EXP 14
11153: PPUSH
11154: LD_VAR 0 1
11158: PPUSH
11159: CALL 52854 0 2
11163: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
11164: LD_VAR 0 1
11168: PPUSH
11169: CALL_OW 247
11173: PUSH
11174: LD_INT 3
11176: EQUAL
11177: IFFALSE 11320
// begin btype := GetBType ( un ) ;
11179: LD_ADDR_VAR 0 11
11183: PUSH
11184: LD_VAR 0 1
11188: PPUSH
11189: CALL_OW 266
11193: ST_TO_ADDR
// if btype = b_barracks then
11194: LD_VAR 0 11
11198: PUSH
11199: LD_INT 5
11201: EQUAL
11202: IFFALSE 11212
// btype := b_armoury ;
11204: LD_ADDR_VAR 0 11
11208: PUSH
11209: LD_INT 4
11211: ST_TO_ADDR
// if btype = b_factory then
11212: LD_VAR 0 11
11216: PUSH
11217: LD_INT 3
11219: EQUAL
11220: IFFALSE 11230
// btype := b_workshop ;
11222: LD_ADDR_VAR 0 11
11226: PUSH
11227: LD_INT 2
11229: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
11230: LD_VAR 0 11
11234: PUSH
11235: LD_INT 8
11237: PUSH
11238: LD_INT 7
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: IN
11245: IFFALSE 11255
// btype := b_lab ;
11247: LD_ADDR_VAR 0 11
11251: PUSH
11252: LD_INT 6
11254: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
11255: LD_ADDR_EXP 7
11259: PUSH
11260: LD_EXP 7
11264: PPUSH
11265: LD_EXP 7
11269: PUSH
11270: LD_INT 1
11272: PLUS
11273: PPUSH
11274: LD_VAR 0 11
11278: PUSH
11279: LD_VAR 0 1
11283: PPUSH
11284: CALL_OW 250
11288: PUSH
11289: LD_VAR 0 1
11293: PPUSH
11294: CALL_OW 251
11298: PUSH
11299: LD_VAR 0 1
11303: PPUSH
11304: CALL_OW 254
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: PPUSH
11315: CALL_OW 1
11319: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders then
11320: LD_EXP 35
11324: PUSH
11325: LD_EXP 27
11329: AND
11330: IFFALSE 11392
// if un in multi_commanders then
11332: LD_VAR 0 1
11336: PUSH
11337: LD_EXP 35
11341: IN
11342: IFFALSE 11392
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
11344: LD_ADDR_EXP 36
11348: PUSH
11349: LD_EXP 36
11353: PPUSH
11354: LD_VAR 0 3
11358: PPUSH
11359: LD_INT 1
11361: PPUSH
11362: CALL_OW 1
11366: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
11367: LD_ADDR_EXP 35
11371: PUSH
11372: LD_EXP 35
11376: PUSH
11377: LD_VAR 0 1
11381: DIFF
11382: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
11383: LD_VAR 0 3
11387: PPUSH
11388: CALL 9976 0 1
// end ; end ;
11392: PPOPN 11
11394: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
11395: LD_INT 0
11397: PPUSH
11398: PPUSH
11399: PPUSH
11400: PPUSH
// begin side := GetSide ( building ) ;
11401: LD_ADDR_VAR 0 4
11405: PUSH
11406: LD_VAR 0 1
11410: PPUSH
11411: CALL_OW 255
11415: ST_TO_ADDR
// if multi_sides [ side ] then
11416: LD_EXP 18
11420: PUSH
11421: LD_VAR 0 4
11425: ARRAY
11426: IFFALSE 11447
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
11428: LD_VAR 0 4
11432: PPUSH
11433: LD_VAR 0 1
11437: PPUSH
11438: CALL_OW 266
11442: PPUSH
11443: CALL 10546 0 2
// if side = botSides [ 1 ] then
11447: LD_VAR 0 4
11451: PUSH
11452: LD_EXP 3
11456: PUSH
11457: LD_INT 1
11459: ARRAY
11460: EQUAL
11461: IFFALSE 11557
// begin arBuildings := Delete ( arBuildings , 1 ) ;
11463: LD_ADDR_EXP 7
11467: PUSH
11468: LD_EXP 7
11472: PPUSH
11473: LD_INT 1
11475: PPUSH
11476: CALL_OW 3
11480: ST_TO_ADDR
// btype := GetBType ( building ) ;
11481: LD_ADDR_VAR 0 5
11485: PUSH
11486: LD_VAR 0 1
11490: PPUSH
11491: CALL_OW 266
11495: ST_TO_ADDR
// case btype of b_workshop :
11496: LD_VAR 0 5
11500: PUSH
11501: LD_INT 2
11503: DOUBLE
11504: EQUAL
11505: IFTRUE 11509
11507: GO 11521
11509: POP
// ComUpgrade ( building ) ; b_lab :
11510: LD_VAR 0 1
11514: PPUSH
11515: CALL_OW 146
11519: GO 11557
11521: LD_INT 6
11523: DOUBLE
11524: EQUAL
11525: IFTRUE 11529
11527: GO 11556
11529: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
11530: LD_VAR 0 1
11534: PPUSH
11535: LD_INT 10
11537: PPUSH
11538: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
11542: LD_VAR 0 1
11546: PPUSH
11547: LD_INT 15
11549: PPUSH
11550: CALL_OW 207
// end ; end ;
11554: GO 11557
11556: POP
// end ; end ;
11557: PPOPN 5
11559: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_control , control_remote ] ] ) then
11560: LD_VAR 0 1
11564: PUSH
11565: LD_INT 22
11567: PUSH
11568: LD_EXP 3
11572: PUSH
11573: LD_INT 1
11575: ARRAY
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 33
11583: PUSH
11584: LD_INT 2
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PPUSH
11595: CALL_OW 69
11599: IN
11600: IFFALSE 11611
// ComUnlink ( un ) ;
11602: LD_VAR 0 1
11606: PPUSH
11607: CALL_OW 136
// end ;
11611: PPOPN 1
11613: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
11614: LD_VAR 0 2
11618: PPUSH
11619: CALL_OW 255
11623: PUSH
11624: LD_EXP 3
11628: IN
11629: NOT
11630: IFFALSE 11634
// exit ;
11632: GO 11697
// if unit in arForceTmp then
11634: LD_VAR 0 2
11638: PUSH
11639: LD_EXP 15
11643: IN
11644: IFFALSE 11697
// begin arForceTmp := arForceTmp diff unit ;
11646: LD_ADDR_EXP 15
11650: PUSH
11651: LD_EXP 15
11655: PUSH
11656: LD_VAR 0 2
11660: DIFF
11661: ST_TO_ADDR
// arForce := Join ( arForce , unit ) ;
11662: LD_ADDR_EXP 14
11666: PUSH
11667: LD_EXP 14
11671: PPUSH
11672: LD_VAR 0 2
11676: PPUSH
11677: CALL 52854 0 2
11681: ST_TO_ADDR
// ComMoveXY ( unit , 103 , 54 ) ;
11682: LD_VAR 0 2
11686: PPUSH
11687: LD_INT 103
11689: PPUSH
11690: LD_INT 54
11692: PPUSH
11693: CALL_OW 111
// end ; end ;
11697: PPOPN 2
11699: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
11700: LD_INT 0
11702: PPUSH
11703: PPUSH
11704: PPUSH
11705: PPUSH
11706: PPUSH
11707: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
11708: LD_VAR 0 1
11712: PPUSH
11713: LD_VAR 0 2
11717: PPUSH
11718: CALL 73877 0 2
// side := GetSide ( vehicle ) ;
11722: LD_ADDR_VAR 0 4
11726: PUSH
11727: LD_VAR 0 1
11731: PPUSH
11732: CALL_OW 255
11736: ST_TO_ADDR
// if multi_sides [ side ] then
11737: LD_EXP 18
11741: PUSH
11742: LD_VAR 0 4
11746: ARRAY
11747: IFFALSE 11758
// MultiplayerEvent_Produced ( side ) ;
11749: LD_VAR 0 4
11753: PPUSH
11754: CALL 10458 0 1
// if side = botSides [ 1 ] then
11758: LD_VAR 0 4
11762: PUSH
11763: LD_EXP 3
11767: PUSH
11768: LD_INT 1
11770: ARRAY
11771: EQUAL
11772: IFFALSE 11968
// begin driver := IsDrivenBy ( vehicle ) ;
11774: LD_ADDR_VAR 0 8
11778: PUSH
11779: LD_VAR 0 1
11783: PPUSH
11784: CALL_OW 311
11788: ST_TO_ADDR
// if driver then
11789: LD_VAR 0 8
11793: IFFALSE 11827
// begin SetTag ( driver , tMech ) ;
11795: LD_VAR 0 8
11799: PPUSH
11800: LD_INT 7
11802: PPUSH
11803: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
11807: LD_ADDR_EXP 10
11811: PUSH
11812: LD_EXP 10
11816: PPUSH
11817: LD_VAR 0 8
11821: PPUSH
11822: CALL 52854 0 2
11826: ST_TO_ADDR
// end ; if GetControl ( vehicle ) = control_remote and not GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
11827: LD_VAR 0 1
11831: PPUSH
11832: CALL_OW 263
11836: PUSH
11837: LD_INT 2
11839: EQUAL
11840: PUSH
11841: LD_VAR 0 1
11845: PPUSH
11846: CALL_OW 264
11850: PUSH
11851: LD_INT 32
11853: PUSH
11854: LD_INT 88
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: IN
11861: NOT
11862: AND
11863: IFFALSE 11887
// begin arRVehicles := Join ( arRVehicles , vehicle ) ;
11865: LD_ADDR_EXP 16
11869: PUSH
11870: LD_EXP 16
11874: PPUSH
11875: LD_VAR 0 1
11879: PPUSH
11880: CALL 52854 0 2
11884: ST_TO_ADDR
// exit ;
11885: GO 11968
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
11887: LD_EXP 12
11891: PUSH
11892: LD_EXP 8
11896: PPUSH
11897: CALL 17265 0 1
11901: GREATER
11902: PUSH
11903: LD_VAR 0 1
11907: PPUSH
11908: CALL_OW 264
11912: PUSH
11913: LD_INT 32
11915: PUSH
11916: LD_INT 88
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: IN
11923: OR
11924: IFFALSE 11948
// arVehicles := Join ( arVehicles , vehicle ) else
11926: LD_ADDR_EXP 8
11930: PUSH
11931: LD_EXP 8
11935: PPUSH
11936: LD_VAR 0 1
11940: PPUSH
11941: CALL 52854 0 2
11945: ST_TO_ADDR
11946: GO 11968
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
11948: LD_ADDR_EXP 9
11952: PUSH
11953: LD_EXP 9
11957: PPUSH
11958: LD_VAR 0 1
11962: PPUSH
11963: CALL 52854 0 2
11967: ST_TO_ADDR
// end ; end ;
11968: PPOPN 8
11970: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
11971: LD_VAR 0 1
11975: PPUSH
11976: CALL_OW 110
11980: PUSH
11981: LD_INT 7
11983: EQUAL
11984: IFFALSE 11998
// SetTag ( driver , 0 ) ;
11986: LD_VAR 0 1
11990: PPUSH
11991: LD_INT 0
11993: PPUSH
11994: CALL_OW 109
// end ;
11998: PPOPN 4
12000: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
12001: LD_VAR 0 2
12005: PPUSH
12006: CALL_OW 255
12010: PUSH
12011: LD_EXP 3
12015: PUSH
12016: LD_INT 1
12018: ARRAY
12019: EQUAL
12020: IFFALSE 12050
// if tech in arTech then
12022: LD_VAR 0 1
12026: PUSH
12027: LD_EXP 5
12031: IN
12032: IFFALSE 12050
// arTech := arTech diff tech ;
12034: LD_ADDR_EXP 5
12038: PUSH
12039: LD_EXP 5
12043: PUSH
12044: LD_VAR 0 1
12048: DIFF
12049: ST_TO_ADDR
// end ; end_of_file
12050: PPOPN 2
12052: END
// every 15 15$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12053: LD_INT 2
12055: PPUSH
12056: CALL_OW 302
12060: PUSH
12061: LD_INT 2
12063: PPUSH
12064: CALL_OW 255
12068: PUSH
12069: LD_EXP 3
12073: PUSH
12074: LD_INT 1
12076: ARRAY
12077: EQUAL
12078: AND
12079: IFFALSE 12116
12081: GO 12083
12083: DISABLE
// begin wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
12084: LD_INT 10500
12086: PUSH
12087: LD_INT 2100
12089: PUSH
12090: LD_OWVAR 67
12094: MUL
12095: MINUS
12096: PPUSH
12097: CALL_OW 67
// activeArabAttacks := true ;
12101: LD_ADDR_EXP 4
12105: PUSH
12106: LD_INT 1
12108: ST_TO_ADDR
// ArabAttack ( 0 ) ;
12109: LD_INT 0
12111: PPUSH
12112: CALL 12290 0 1
// end ;
12116: END
// every 35 35$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12117: LD_INT 2
12119: PPUSH
12120: CALL_OW 302
12124: PUSH
12125: LD_INT 2
12127: PPUSH
12128: CALL_OW 255
12132: PUSH
12133: LD_EXP 3
12137: PUSH
12138: LD_INT 1
12140: ARRAY
12141: EQUAL
12142: AND
12143: IFFALSE 12157
12145: GO 12147
12147: DISABLE
// ArabAttack ( Difficulty ) ;
12148: LD_OWVAR 67
12152: PPUSH
12153: CALL 12290 0 1
12157: END
// every 55 55$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12158: LD_INT 2
12160: PPUSH
12161: CALL_OW 302
12165: PUSH
12166: LD_INT 2
12168: PPUSH
12169: CALL_OW 255
12173: PUSH
12174: LD_EXP 3
12178: PUSH
12179: LD_INT 1
12181: ARRAY
12182: EQUAL
12183: AND
12184: IFFALSE 12202
12186: GO 12188
12188: DISABLE
// ArabAttack ( Difficulty + 1 ) ;
12189: LD_OWVAR 67
12193: PUSH
12194: LD_INT 1
12196: PLUS
12197: PPUSH
12198: CALL 12290 0 1
12202: END
// every 105 105$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12203: LD_INT 2
12205: PPUSH
12206: CALL_OW 302
12210: PUSH
12211: LD_INT 2
12213: PPUSH
12214: CALL_OW 255
12218: PUSH
12219: LD_EXP 3
12223: PUSH
12224: LD_INT 1
12226: ARRAY
12227: EQUAL
12228: AND
12229: IFFALSE 12247
12231: GO 12233
12233: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12234: LD_OWVAR 67
12238: PUSH
12239: LD_INT 2
12241: PLUS
12242: PPUSH
12243: CALL 12290 0 1
12247: END
// every 0 0$1 trigger FilterUnitsInArea ( arBaseOuterArea , [ f_enemy , botSides [ 1 ] ] ) do
12248: LD_INT 2
12250: PPUSH
12251: LD_INT 81
12253: PUSH
12254: LD_EXP 3
12258: PUSH
12259: LD_INT 1
12261: ARRAY
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PPUSH
12267: CALL_OW 70
12271: IFFALSE 12289
12273: GO 12275
12275: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12276: LD_OWVAR 67
12280: PUSH
12281: LD_INT 2
12283: PLUS
12284: PPUSH
12285: CALL 12290 0 1
12289: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh , path , area ; begin
12290: LD_INT 0
12292: PPUSH
12293: PPUSH
12294: PPUSH
12295: PPUSH
12296: PPUSH
12297: PPUSH
12298: PPUSH
// uc_side := botSides [ 1 ] ;
12299: LD_ADDR_OWVAR 20
12303: PUSH
12304: LD_EXP 3
12308: PUSH
12309: LD_INT 1
12311: ARRAY
12312: ST_TO_ADDR
// uc_nation := nation_arabian ;
12313: LD_ADDR_OWVAR 21
12317: PUSH
12318: LD_INT 2
12320: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
12321: LD_ADDR_VAR 0 4
12325: PUSH
12326: LD_INT 3
12328: PUSH
12329: LD_INT 5
12331: PUSH
12332: LD_INT 7
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: LIST
12339: PUSH
12340: LD_OWVAR 67
12344: ARRAY
12345: ST_TO_ADDR
// arAttackersInf := [ ] ;
12346: LD_ADDR_EXP 43
12350: PUSH
12351: EMPTY
12352: ST_TO_ADDR
// arAttackersVeh := [ ] ;
12353: LD_ADDR_EXP 44
12357: PUSH
12358: EMPTY
12359: ST_TO_ADDR
// path := [ [ 48 , 52 ] , [ 135 , 48 ] ] [ v mod 2 + 1 ] ;
12360: LD_ADDR_VAR 0 7
12364: PUSH
12365: LD_INT 48
12367: PUSH
12368: LD_INT 52
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 135
12377: PUSH
12378: LD_INT 48
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PUSH
12389: LD_VAR 0 1
12393: PUSH
12394: LD_INT 2
12396: MOD
12397: PUSH
12398: LD_INT 1
12400: PLUS
12401: ARRAY
12402: ST_TO_ADDR
// area := [ [ arAttackSpawn2Area , arAttackSpawnArea ] , [ arAttackSpawnE2Area , arAttackSpawnEArea ] ] [ v mod 2 + 1 ] ;
12403: LD_ADDR_VAR 0 8
12407: PUSH
12408: LD_INT 12
12410: PUSH
12411: LD_INT 13
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 23
12420: PUSH
12421: LD_INT 22
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: LD_VAR 0 1
12436: PUSH
12437: LD_INT 2
12439: MOD
12440: PUSH
12441: LD_INT 1
12443: PLUS
12444: ARRAY
12445: ST_TO_ADDR
// InitHC_All ( ) ;
12446: CALL_OW 584
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] + v do
12450: LD_ADDR_VAR 0 3
12454: PUSH
12455: DOUBLE
12456: LD_INT 1
12458: DEC
12459: ST_TO_ADDR
12460: LD_INT 3
12462: PUSH
12463: LD_INT 4
12465: PUSH
12466: LD_INT 6
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: LIST
12473: PUSH
12474: LD_OWVAR 67
12478: ARRAY
12479: PUSH
12480: LD_VAR 0 1
12484: PLUS
12485: PUSH
12486: FOR_TO
12487: IFFALSE 12619
// begin PrepareSoldier ( false , skill ) ;
12489: LD_INT 0
12491: PPUSH
12492: LD_VAR 0 4
12496: PPUSH
12497: CALL_OW 381
// un := CreateHuman ;
12501: LD_ADDR_VAR 0 5
12505: PUSH
12506: CALL_OW 44
12510: ST_TO_ADDR
// if i mod 2 = 0 then
12511: LD_VAR 0 3
12515: PUSH
12516: LD_INT 2
12518: MOD
12519: PUSH
12520: LD_INT 0
12522: EQUAL
12523: IFFALSE 12537
// SetClass ( un , class_mortar ) ;
12525: LD_VAR 0 5
12529: PPUSH
12530: LD_INT 8
12532: PPUSH
12533: CALL_OW 336
// SetDir ( un , 1 ) ;
12537: LD_VAR 0 5
12541: PPUSH
12542: LD_INT 1
12544: PPUSH
12545: CALL_OW 233
// PlaceUnitArea ( un , area [ 1 ] , false ) ;
12549: LD_VAR 0 5
12553: PPUSH
12554: LD_VAR 0 8
12558: PUSH
12559: LD_INT 1
12561: ARRAY
12562: PPUSH
12563: LD_INT 0
12565: PPUSH
12566: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
12570: LD_ADDR_EXP 43
12574: PUSH
12575: LD_EXP 43
12579: PPUSH
12580: LD_VAR 0 5
12584: PPUSH
12585: CALL 52854 0 2
12589: ST_TO_ADDR
// ComAgressiveMove ( un , path [ 1 ] , path [ 2 ] ) ;
12590: LD_VAR 0 5
12594: PPUSH
12595: LD_VAR 0 7
12599: PUSH
12600: LD_INT 1
12602: ARRAY
12603: PPUSH
12604: LD_VAR 0 7
12608: PUSH
12609: LD_INT 2
12611: ARRAY
12612: PPUSH
12613: CALL_OW 114
// end ;
12617: GO 12486
12619: POP
12620: POP
// for i := 1 to 3 + v do
12621: LD_ADDR_VAR 0 3
12625: PUSH
12626: DOUBLE
12627: LD_INT 1
12629: DEC
12630: ST_TO_ADDR
12631: LD_INT 3
12633: PUSH
12634: LD_VAR 0 1
12638: PLUS
12639: PUSH
12640: FOR_TO
12641: IFFALSE 12838
// begin PrepareMechanic ( false , skill ) ;
12643: LD_INT 0
12645: PPUSH
12646: LD_VAR 0 4
12650: PPUSH
12651: CALL_OW 383
// un := CreateHuman ;
12655: LD_ADDR_VAR 0 5
12659: PUSH
12660: CALL_OW 44
12664: ST_TO_ADDR
// SetTag ( un , 999 ) ;
12665: LD_VAR 0 5
12669: PPUSH
12670: LD_INT 999
12672: PPUSH
12673: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 80 ) ;
12677: LD_INT 14
12679: PPUSH
12680: LD_INT 1
12682: PPUSH
12683: LD_INT 1
12685: PPUSH
12686: LD_INT 27
12688: PUSH
12689: LD_INT 25
12691: PUSH
12692: LD_INT 28
12694: PUSH
12695: LD_INT 26
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: PUSH
12704: LD_VAR 0 3
12708: PUSH
12709: LD_INT 4
12711: MOD
12712: PUSH
12713: LD_INT 1
12715: PLUS
12716: ARRAY
12717: PPUSH
12718: LD_INT 80
12720: PPUSH
12721: CALL 20003 0 5
// veh := CreateVehicle ;
12725: LD_ADDR_VAR 0 6
12729: PUSH
12730: CALL_OW 45
12734: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
12735: LD_VAR 0 6
12739: PPUSH
12740: LD_INT 1
12742: PPUSH
12743: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
12747: LD_VAR 0 6
12751: PPUSH
12752: LD_VAR 0 8
12756: PUSH
12757: LD_INT 2
12759: ARRAY
12760: PPUSH
12761: LD_INT 0
12763: PPUSH
12764: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
12768: LD_VAR 0 5
12772: PPUSH
12773: LD_VAR 0 6
12777: PPUSH
12778: CALL_OW 52
// ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
12782: LD_VAR 0 5
12786: PPUSH
12787: LD_VAR 0 7
12791: PUSH
12792: LD_INT 1
12794: ARRAY
12795: PPUSH
12796: LD_VAR 0 7
12800: PUSH
12801: LD_INT 2
12803: ARRAY
12804: PPUSH
12805: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
12809: LD_ADDR_EXP 44
12813: PUSH
12814: LD_EXP 44
12818: PPUSH
12819: LD_VAR 0 6
12823: PPUSH
12824: CALL 52854 0 2
12828: ST_TO_ADDR
// wait ( 0 0$2 ) ;
12829: LD_INT 70
12831: PPUSH
12832: CALL_OW 67
// end ;
12836: GO 12640
12838: POP
12839: POP
// wait ( 0 0$2 ) ;
12840: LD_INT 70
12842: PPUSH
12843: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
12847: LD_ADDR_VAR 0 3
12851: PUSH
12852: DOUBLE
12853: LD_INT 1
12855: DEC
12856: ST_TO_ADDR
12857: LD_INT 1
12859: PUSH
12860: LD_INT 2
12862: PUSH
12863: LD_INT 2
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: PUSH
12871: LD_OWVAR 67
12875: ARRAY
12876: PUSH
12877: FOR_TO
12878: IFFALSE 12991
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_apeman , ar_selfpropelled_bomb , 80 ) ;
12880: LD_INT 14
12882: PPUSH
12883: LD_INT 1
12885: PPUSH
12886: LD_INT 5
12888: PPUSH
12889: LD_INT 29
12891: PPUSH
12892: LD_INT 80
12894: PPUSH
12895: CALL 20003 0 5
// veh := CreateVehicle ;
12899: LD_ADDR_VAR 0 6
12903: PUSH
12904: CALL_OW 45
12908: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
12909: LD_VAR 0 6
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
12921: LD_VAR 0 6
12925: PPUSH
12926: LD_VAR 0 8
12930: PUSH
12931: LD_INT 2
12933: ARRAY
12934: PPUSH
12935: LD_INT 0
12937: PPUSH
12938: CALL_OW 49
// ; ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
12942: LD_VAR 0 5
12946: PPUSH
12947: LD_VAR 0 7
12951: PUSH
12952: LD_INT 1
12954: ARRAY
12955: PPUSH
12956: LD_VAR 0 7
12960: PUSH
12961: LD_INT 2
12963: ARRAY
12964: PPUSH
12965: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
12969: LD_ADDR_EXP 44
12973: PUSH
12974: LD_EXP 44
12978: PPUSH
12979: LD_VAR 0 6
12983: PPUSH
12984: CALL 52854 0 2
12988: ST_TO_ADDR
// end ;
12989: GO 12877
12991: POP
12992: POP
// end ;
12993: LD_VAR 0 2
12997: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
12998: LD_EXP 43
13002: IFFALSE 13493
13004: GO 13006
13006: DISABLE
13007: LD_INT 0
13009: PPUSH
13010: PPUSH
13011: PPUSH
13012: PPUSH
13013: PPUSH
// begin enable ;
13014: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
13015: LD_ADDR_VAR 0 2
13019: PUSH
13020: LD_EXP 43
13024: PPUSH
13025: LD_INT 50
13027: PUSH
13028: EMPTY
13029: LIST
13030: PPUSH
13031: CALL_OW 72
13035: ST_TO_ADDR
// arAttackersInf := [ ] ;
13036: LD_ADDR_EXP 43
13040: PUSH
13041: EMPTY
13042: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
13043: LD_ADDR_VAR 0 1
13047: PUSH
13048: LD_VAR 0 2
13052: PPUSH
13053: LD_INT 25
13055: PUSH
13056: LD_INT 1
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PPUSH
13063: CALL_OW 72
13067: PUSH
13068: FOR_IN
13069: IFFALSE 13200
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 1 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13071: LD_ADDR_VAR 0 3
13075: PUSH
13076: LD_INT 81
13078: PUSH
13079: LD_EXP 3
13083: PUSH
13084: LD_INT 1
13086: ARRAY
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: LD_INT 3
13094: PUSH
13095: LD_INT 120
13097: PUSH
13098: LD_INT 11
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 2
13111: PUSH
13112: LD_INT 21
13114: PUSH
13115: LD_INT 2
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 21
13124: PUSH
13125: LD_INT 3
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: LIST
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: LIST
13141: PPUSH
13142: CALL_OW 69
13146: PPUSH
13147: LD_VAR 0 1
13151: PPUSH
13152: CALL_OW 74
13156: ST_TO_ADDR
// if not nearest then
13157: LD_VAR 0 3
13161: NOT
13162: IFFALSE 13166
// break ;
13164: GO 13200
// SetTag ( nearest , tMined ) ;
13166: LD_VAR 0 3
13170: PPUSH
13171: LD_INT 11
13173: PPUSH
13174: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13178: LD_VAR 0 1
13182: PPUSH
13183: LD_INT 0
13185: PPUSH
13186: LD_INT 0
13188: PPUSH
13189: LD_VAR 0 3
13193: PPUSH
13194: CALL_OW 192
// end ;
13198: GO 13068
13200: POP
13201: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13202: LD_ADDR_VAR 0 2
13206: PUSH
13207: LD_VAR 0 2
13211: PPUSH
13212: LD_INT 50
13214: PUSH
13215: EMPTY
13216: LIST
13217: PPUSH
13218: CALL_OW 72
13222: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13223: LD_INT 70
13225: PPUSH
13226: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13230: LD_ADDR_VAR 0 2
13234: PUSH
13235: LD_VAR 0 2
13239: PPUSH
13240: LD_INT 50
13242: PUSH
13243: EMPTY
13244: LIST
13245: PPUSH
13246: CALL_OW 72
13250: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
13251: LD_ADDR_VAR 0 4
13255: PUSH
13256: LD_INT 81
13258: PUSH
13259: LD_EXP 3
13263: PUSH
13264: LD_INT 1
13266: ARRAY
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PPUSH
13272: CALL_OW 69
13276: ST_TO_ADDR
// for i in tmp do
13277: LD_ADDR_VAR 0 1
13281: PUSH
13282: LD_VAR 0 2
13286: PUSH
13287: FOR_IN
13288: IFFALSE 13484
// if GetClass ( i ) <> 1 then
13290: LD_VAR 0 1
13294: PPUSH
13295: CALL_OW 257
13299: PUSH
13300: LD_INT 1
13302: NONEQUAL
13303: IFFALSE 13331
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13305: LD_VAR 0 1
13309: PPUSH
13310: LD_VAR 0 4
13314: PPUSH
13315: LD_VAR 0 1
13319: PPUSH
13320: CALL_OW 74
13324: PPUSH
13325: CALL_OW 115
13329: GO 13482
// if not HasTask ( i ) then
13331: LD_VAR 0 1
13335: PPUSH
13336: CALL_OW 314
13340: NOT
13341: IFFALSE 13482
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13343: LD_ADDR_VAR 0 3
13347: PUSH
13348: LD_VAR 0 4
13352: PPUSH
13353: LD_INT 3
13355: PUSH
13356: LD_INT 120
13358: PUSH
13359: LD_INT 11
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 2
13372: PUSH
13373: LD_INT 21
13375: PUSH
13376: LD_INT 2
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 21
13385: PUSH
13386: LD_INT 3
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: LIST
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PPUSH
13402: CALL_OW 72
13406: PPUSH
13407: LD_VAR 0 1
13411: PPUSH
13412: CALL_OW 74
13416: ST_TO_ADDR
// if not nearest then
13417: LD_VAR 0 3
13421: NOT
13422: IFFALSE 13450
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13424: LD_VAR 0 1
13428: PPUSH
13429: LD_VAR 0 4
13433: PPUSH
13434: LD_VAR 0 1
13438: PPUSH
13439: CALL_OW 74
13443: PPUSH
13444: CALL_OW 115
13448: GO 13482
// begin SetTag ( nearest , tMined ) ;
13450: LD_VAR 0 3
13454: PPUSH
13455: LD_INT 11
13457: PPUSH
13458: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13462: LD_VAR 0 1
13466: PPUSH
13467: LD_INT 0
13469: PPUSH
13470: LD_INT 0
13472: PPUSH
13473: LD_VAR 0 3
13477: PPUSH
13478: CALL_OW 132
// end ; end ;
13482: GO 13287
13484: POP
13485: POP
// until not tmp ;
13486: LD_VAR 0 2
13490: NOT
13491: IFFALSE 13223
// end ;
13493: PPOPN 5
13495: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , path ;
13496: LD_EXP 44
13500: IFFALSE 13723
13502: GO 13504
13504: DISABLE
13505: LD_INT 0
13507: PPUSH
13508: PPUSH
13509: PPUSH
// begin enable ;
13510: ENABLE
// tmp := arAttackersVeh ;
13511: LD_ADDR_VAR 0 2
13515: PUSH
13516: LD_EXP 44
13520: ST_TO_ADDR
// arAttackersVeh := [ ] ;
13521: LD_ADDR_EXP 44
13525: PUSH
13526: EMPTY
13527: ST_TO_ADDR
// path := [ [ [ 139 , 55 ] , [ 155 , 92 ] ] , [ [ 53 , 61 ] , [ 74 , 98 ] ] ] ;
13528: LD_ADDR_VAR 0 3
13532: PUSH
13533: LD_INT 139
13535: PUSH
13536: LD_INT 55
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PUSH
13543: LD_INT 155
13545: PUSH
13546: LD_INT 92
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 53
13559: PUSH
13560: LD_INT 61
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 74
13569: PUSH
13570: LD_INT 98
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: ST_TO_ADDR
// if GetDistUnitXY ( tmp [ 1 ] , 139 , 55 ) < GetDistUnitXY ( tmp [ 1 ] , 53 , 61 ) then
13585: LD_VAR 0 2
13589: PUSH
13590: LD_INT 1
13592: ARRAY
13593: PPUSH
13594: LD_INT 139
13596: PPUSH
13597: LD_INT 55
13599: PPUSH
13600: CALL_OW 297
13604: PUSH
13605: LD_VAR 0 2
13609: PUSH
13610: LD_INT 1
13612: ARRAY
13613: PPUSH
13614: LD_INT 53
13616: PPUSH
13617: LD_INT 61
13619: PPUSH
13620: CALL_OW 297
13624: LESS
13625: IFFALSE 13643
// path := path [ 1 ] else
13627: LD_ADDR_VAR 0 3
13631: PUSH
13632: LD_VAR 0 3
13636: PUSH
13637: LD_INT 1
13639: ARRAY
13640: ST_TO_ADDR
13641: GO 13657
// path := path [ 2 ] ;
13643: LD_ADDR_VAR 0 3
13647: PUSH
13648: LD_VAR 0 3
13652: PUSH
13653: LD_INT 2
13655: ARRAY
13656: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13657: LD_INT 70
13659: PPUSH
13660: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13664: LD_ADDR_VAR 0 2
13668: PUSH
13669: LD_VAR 0 2
13673: PPUSH
13674: LD_INT 50
13676: PUSH
13677: EMPTY
13678: LIST
13679: PPUSH
13680: CALL_OW 72
13684: ST_TO_ADDR
// for i in tmp do
13685: LD_ADDR_VAR 0 1
13689: PUSH
13690: LD_VAR 0 2
13694: PUSH
13695: FOR_IN
13696: IFFALSE 13714
// AgressiveMove ( i , path ) until not tmp ;
13698: LD_VAR 0 1
13702: PPUSH
13703: LD_VAR 0 3
13707: PPUSH
13708: CALL 55458 0 2
13712: GO 13695
13714: POP
13715: POP
13716: LD_VAR 0 2
13720: NOT
13721: IFFALSE 13657
// end ;
13723: PPOPN 3
13725: END
// every 3 3$00 trigger Count ( arRVehicles ) >= 3 do var i , tmp ;
13726: LD_EXP 16
13730: PPUSH
13731: CALL 17265 0 1
13735: PUSH
13736: LD_INT 3
13738: GREATEREQUAL
13739: IFFALSE 13860
13741: GO 13743
13743: DISABLE
13744: LD_INT 0
13746: PPUSH
13747: PPUSH
// begin enable ;
13748: ENABLE
// tmp := UnitFilter ( arRVehicles , [ f_linked ] ) ;
13749: LD_ADDR_VAR 0 2
13753: PUSH
13754: LD_EXP 16
13758: PPUSH
13759: LD_INT 61
13761: PUSH
13762: EMPTY
13763: LIST
13764: PPUSH
13765: CALL_OW 72
13769: ST_TO_ADDR
// arRVehicles := arRVehicles diff tmp ;
13770: LD_ADDR_EXP 16
13774: PUSH
13775: LD_EXP 16
13779: PUSH
13780: LD_VAR 0 2
13784: DIFF
13785: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13786: LD_INT 70
13788: PPUSH
13789: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13793: LD_ADDR_VAR 0 2
13797: PUSH
13798: LD_VAR 0 2
13802: PPUSH
13803: LD_INT 50
13805: PUSH
13806: EMPTY
13807: LIST
13808: PPUSH
13809: CALL_OW 72
13813: ST_TO_ADDR
// for i in tmp do
13814: LD_ADDR_VAR 0 1
13818: PUSH
13819: LD_VAR 0 2
13823: PUSH
13824: FOR_IN
13825: IFFALSE 13851
// AgressiveMove ( i , [ [ 98 , 63 ] ] ) until not tmp ;
13827: LD_VAR 0 1
13831: PPUSH
13832: LD_INT 98
13834: PUSH
13835: LD_INT 63
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: EMPTY
13843: LIST
13844: PPUSH
13845: CALL 55458 0 2
13849: GO 13824
13851: POP
13852: POP
13853: LD_VAR 0 2
13857: NOT
13858: IFFALSE 13786
// end ;
13860: PPOPN 2
13862: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
13863: LD_EXP 9
13867: PUSH
13868: LD_EXP 4
13872: AND
13873: IFFALSE 14430
13875: GO 13877
13877: DISABLE
13878: LD_INT 0
13880: PPUSH
13881: PPUSH
13882: PPUSH
// begin enable ;
13883: ENABLE
// if not arVehiclesAtttackers then
13884: LD_EXP 9
13888: NOT
13889: IFFALSE 13893
// exit ;
13891: GO 14430
// for i in arVehiclesAtttackers do
13893: LD_ADDR_VAR 0 1
13897: PUSH
13898: LD_EXP 9
13902: PUSH
13903: FOR_IN
13904: IFFALSE 14428
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
13906: LD_VAR 0 1
13910: PPUSH
13911: CALL_OW 302
13915: NOT
13916: PUSH
13917: LD_VAR 0 1
13921: PPUSH
13922: CALL_OW 255
13926: PUSH
13927: LD_EXP 3
13931: PUSH
13932: LD_INT 1
13934: ARRAY
13935: NONEQUAL
13936: OR
13937: IFFALSE 13957
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
13939: LD_ADDR_EXP 9
13943: PUSH
13944: LD_EXP 9
13948: PUSH
13949: LD_VAR 0 1
13953: DIFF
13954: ST_TO_ADDR
// continue ;
13955: GO 13903
// end ; if GetTag ( i ) = 300 then
13957: LD_VAR 0 1
13961: PPUSH
13962: CALL_OW 110
13966: PUSH
13967: LD_INT 300
13969: EQUAL
13970: IFFALSE 14085
// begin if GetFuel ( i ) < 50 then
13972: LD_VAR 0 1
13976: PPUSH
13977: CALL_OW 261
13981: PUSH
13982: LD_INT 50
13984: LESS
13985: IFFALSE 14044
// begin ComMoveXY ( i , 102 , 47 ) ;
13987: LD_VAR 0 1
13991: PPUSH
13992: LD_INT 102
13994: PPUSH
13995: LD_INT 47
13997: PPUSH
13998: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14002: LD_INT 35
14004: PPUSH
14005: CALL_OW 67
// until GetDistUnitXY ( i , 102 , 47 ) < 4 ;
14009: LD_VAR 0 1
14013: PPUSH
14014: LD_INT 102
14016: PPUSH
14017: LD_INT 47
14019: PPUSH
14020: CALL_OW 297
14024: PUSH
14025: LD_INT 4
14027: LESS
14028: IFFALSE 14002
// SetFuel ( i , 100 ) ;
14030: LD_VAR 0 1
14034: PPUSH
14035: LD_INT 100
14037: PPUSH
14038: CALL_OW 240
// end else
14042: GO 14085
// if not IsInArea ( i , arParkingArea ) then
14044: LD_VAR 0 1
14048: PPUSH
14049: LD_INT 14
14051: PPUSH
14052: CALL_OW 308
14056: NOT
14057: IFFALSE 14073
// ComMoveToArea ( i , arParkingArea ) else
14059: LD_VAR 0 1
14063: PPUSH
14064: LD_INT 14
14066: PPUSH
14067: CALL_OW 113
14071: GO 14085
// SetTag ( i , 301 ) ;
14073: LD_VAR 0 1
14077: PPUSH
14078: LD_INT 301
14080: PPUSH
14081: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
14085: LD_VAR 0 1
14089: PPUSH
14090: CALL_OW 110
14094: PUSH
14095: LD_INT 301
14097: EQUAL
14098: IFFALSE 14240
// begin if GetLives ( i ) < 1000 then
14100: LD_VAR 0 1
14104: PPUSH
14105: CALL_OW 256
14109: PUSH
14110: LD_INT 1000
14112: LESS
14113: IFFALSE 14217
// begin if not IsDrivenBy ( i ) then
14115: LD_VAR 0 1
14119: PPUSH
14120: CALL_OW 311
14124: NOT
14125: IFFALSE 14129
// continue ;
14127: GO 13903
// mech := IsDrivenBy ( i ) ;
14129: LD_ADDR_VAR 0 2
14133: PUSH
14134: LD_VAR 0 1
14138: PPUSH
14139: CALL_OW 311
14143: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14144: LD_VAR 0 2
14148: PPUSH
14149: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14153: LD_VAR 0 2
14157: PPUSH
14158: LD_VAR 0 1
14162: PPUSH
14163: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
14167: LD_INT 35
14169: PPUSH
14170: CALL_OW 67
// until GetLives ( i ) = 1000 ;
14174: LD_VAR 0 1
14178: PPUSH
14179: CALL_OW 256
14183: PUSH
14184: LD_INT 1000
14186: EQUAL
14187: IFFALSE 14167
// SetLives ( mech , 1000 ) ;
14189: LD_VAR 0 2
14193: PPUSH
14194: LD_INT 1000
14196: PPUSH
14197: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
14201: LD_VAR 0 2
14205: PPUSH
14206: LD_VAR 0 1
14210: PPUSH
14211: CALL_OW 120
// end else
14215: GO 14240
// if IsDrivenBy ( i ) then
14217: LD_VAR 0 1
14221: PPUSH
14222: CALL_OW 311
14226: IFFALSE 14240
// SetTag ( i , 0 ) ;
14228: LD_VAR 0 1
14232: PPUSH
14233: LD_INT 0
14235: PPUSH
14236: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
14240: LD_VAR 0 1
14244: PPUSH
14245: CALL_OW 110
14249: PUSH
14250: LD_INT 300
14252: LESS
14253: IFFALSE 14426
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
14255: LD_ADDR_VAR 0 3
14259: PUSH
14260: LD_INT 1
14262: PPUSH
14263: LD_INT 81
14265: PUSH
14266: LD_EXP 3
14270: PUSH
14271: LD_INT 1
14273: ARRAY
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PPUSH
14279: CALL_OW 70
14283: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14284: LD_VAR 0 1
14288: PPUSH
14289: CALL_OW 256
14293: PUSH
14294: LD_INT 650
14296: LESS
14297: IFFALSE 14322
// begin ComStop ( i ) ;
14299: LD_VAR 0 1
14303: PPUSH
14304: CALL_OW 141
// SetTag ( i , 300 ) ;
14308: LD_VAR 0 1
14312: PPUSH
14313: LD_INT 300
14315: PPUSH
14316: CALL_OW 109
// continue ;
14320: GO 13903
// end ; if enemy then
14322: LD_VAR 0 3
14326: IFFALSE 14366
// begin if not HasTask ( i ) then
14328: LD_VAR 0 1
14332: PPUSH
14333: CALL_OW 314
14337: NOT
14338: IFFALSE 14364
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14340: LD_VAR 0 1
14344: PPUSH
14345: LD_VAR 0 3
14349: PPUSH
14350: LD_VAR 0 1
14354: PPUSH
14355: CALL_OW 74
14359: PPUSH
14360: CALL_OW 115
// end else
14364: GO 14426
// if arVehiclesAtttackers then
14366: LD_EXP 9
14370: IFFALSE 14426
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
14372: LD_ADDR_VAR 0 3
14376: PUSH
14377: LD_INT 81
14379: PUSH
14380: LD_EXP 3
14384: PUSH
14385: LD_INT 1
14387: ARRAY
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PPUSH
14393: CALL_OW 69
14397: ST_TO_ADDR
// if enemy then
14398: LD_VAR 0 3
14402: IFFALSE 14426
// AgressiveMove ( i , [ [ 99 , 66 ] ] ) ;
14404: LD_VAR 0 1
14408: PPUSH
14409: LD_INT 99
14411: PUSH
14412: LD_INT 66
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: EMPTY
14420: LIST
14421: PPUSH
14422: CALL 55458 0 2
// end ; end ; end ;
14426: GO 13903
14428: POP
14429: POP
// end ;
14430: PPOPN 3
14432: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
14433: LD_INT 22
14435: PUSH
14436: LD_EXP 3
14440: PUSH
14441: LD_INT 1
14443: ARRAY
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 32
14451: PUSH
14452: LD_INT 1
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PPUSH
14463: CALL_OW 69
14467: IFFALSE 14550
14469: GO 14471
14471: DISABLE
14472: LD_INT 0
14474: PPUSH
// begin enable ;
14475: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
14476: LD_ADDR_VAR 0 1
14480: PUSH
14481: LD_INT 22
14483: PUSH
14484: LD_EXP 3
14488: PUSH
14489: LD_INT 1
14491: ARRAY
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 32
14499: PUSH
14500: LD_INT 1
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PPUSH
14511: CALL_OW 69
14515: PUSH
14516: FOR_IN
14517: IFFALSE 14548
// if GetFuel ( i ) < 3 then
14519: LD_VAR 0 1
14523: PPUSH
14524: CALL_OW 261
14528: PUSH
14529: LD_INT 3
14531: LESS
14532: IFFALSE 14546
// SetFuel ( i , 3 ) ;
14534: LD_VAR 0 1
14538: PPUSH
14539: LD_INT 3
14541: PPUSH
14542: CALL_OW 240
14546: GO 14516
14548: POP
14549: POP
// end ; end_of_file
14550: PPOPN 1
14552: END
// every 0 0$20 trigger game do
14553: LD_EXP 2
14557: IFFALSE 14602
14559: GO 14561
14561: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
14562: LD_INT 15
14564: PUSH
14565: LD_INT 17
14567: PUSH
14568: LD_INT 16
14570: PUSH
14571: LD_INT 1
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: PPUSH
14580: LD_EXP 32
14584: PUSH
14585: LD_INT 2
14587: ARRAY
14588: PPUSH
14589: LD_EXP 32
14593: PUSH
14594: LD_INT 1
14596: ARRAY
14597: PPUSH
14598: CALL 14603 0 3
14602: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
14603: LD_INT 0
14605: PPUSH
14606: PPUSH
14607: PPUSH
14608: PPUSH
// if not areas then
14609: LD_VAR 0 1
14613: NOT
14614: IFFALSE 14618
// exit ;
14616: GO 14995
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
14618: LD_ADDR_VAR 0 7
14622: PUSH
14623: LD_INT 18
14625: PUSH
14626: LD_INT 19
14628: PUSH
14629: LD_INT 20
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: LIST
14636: ST_TO_ADDR
// x := 5 ;
14637: LD_ADDR_VAR 0 6
14641: PUSH
14642: LD_INT 5
14644: ST_TO_ADDR
// repeat wait ( time ) ;
14645: LD_VAR 0 2
14649: PPUSH
14650: CALL_OW 67
// if tick < [ 18 18$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
14654: LD_OWVAR 1
14658: PUSH
14659: LD_INT 37800
14661: PUSH
14662: LD_INT 31500
14664: PUSH
14665: LD_INT 25200
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: LIST
14672: PUSH
14673: LD_OWVAR 67
14677: ARRAY
14678: LESS
14679: IFFALSE 14818
// begin for i := 1 to multi_sides do
14681: LD_ADDR_VAR 0 5
14685: PUSH
14686: DOUBLE
14687: LD_INT 1
14689: DEC
14690: ST_TO_ADDR
14691: LD_EXP 18
14695: PUSH
14696: FOR_TO
14697: IFFALSE 14809
// if multi_sides [ i ] then
14699: LD_EXP 18
14703: PUSH
14704: LD_VAR 0 5
14708: ARRAY
14709: IFFALSE 14807
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
14711: LD_VAR 0 7
14715: PUSH
14716: LD_EXP 18
14720: PUSH
14721: LD_VAR 0 5
14725: ARRAY
14726: ARRAY
14727: PPUSH
14728: LD_INT 1
14730: PPUSH
14731: CALL_OW 287
14735: PUSH
14736: LD_INT 32
14738: PUSH
14739: LD_INT 25
14741: PUSH
14742: LD_INT 23
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: LIST
14749: PUSH
14750: LD_OWVAR 67
14754: ARRAY
14755: LESS
14756: IFFALSE 14807
// begin amount := amount - ( x * 10 ) ;
14758: LD_ADDR_VAR 0 3
14762: PUSH
14763: LD_VAR 0 3
14767: PUSH
14768: LD_VAR 0 6
14772: PUSH
14773: LD_INT 10
14775: MUL
14776: MINUS
14777: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
14778: LD_VAR 0 6
14782: PPUSH
14783: LD_VAR 0 7
14787: PUSH
14788: LD_EXP 18
14792: PUSH
14793: LD_VAR 0 5
14797: ARRAY
14798: ARRAY
14799: PPUSH
14800: LD_INT 1
14802: PPUSH
14803: CALL_OW 55
// end ; end ;
14807: GO 14696
14809: POP
14810: POP
// wait ( 0 0$2 ) ;
14811: LD_INT 70
14813: PPUSH
14814: CALL_OW 67
// end ; for i in areas do
14818: LD_ADDR_VAR 0 5
14822: PUSH
14823: LD_VAR 0 1
14827: PUSH
14828: FOR_IN
14829: IFFALSE 14912
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
14831: LD_VAR 0 5
14835: PPUSH
14836: LD_INT 1
14838: PPUSH
14839: CALL_OW 287
14843: PUSH
14844: LD_INT 25
14846: PUSH
14847: LD_INT 22
14849: PUSH
14850: LD_INT 20
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: LIST
14857: PUSH
14858: LD_OWVAR 67
14862: ARRAY
14863: LESS
14864: IFFALSE 14910
// begin wait ( 0 0$5 ) ;
14866: LD_INT 175
14868: PPUSH
14869: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
14873: LD_VAR 0 6
14877: PPUSH
14878: LD_VAR 0 5
14882: PPUSH
14883: LD_INT 1
14885: PPUSH
14886: CALL_OW 55
// amount := amount - ( x * 10 ) ;
14890: LD_ADDR_VAR 0 3
14894: PUSH
14895: LD_VAR 0 3
14899: PUSH
14900: LD_VAR 0 6
14904: PUSH
14905: LD_INT 10
14907: MUL
14908: MINUS
14909: ST_TO_ADDR
// end ; end ;
14910: GO 14828
14912: POP
14913: POP
// time := time + 0 0$2 ;
14914: LD_ADDR_VAR 0 2
14918: PUSH
14919: LD_VAR 0 2
14923: PUSH
14924: LD_INT 70
14926: PLUS
14927: ST_TO_ADDR
// x := x - 1 ;
14928: LD_ADDR_VAR 0 6
14932: PUSH
14933: LD_VAR 0 6
14937: PUSH
14938: LD_INT 1
14940: MINUS
14941: ST_TO_ADDR
// if x = 0 then
14942: LD_VAR 0 6
14946: PUSH
14947: LD_INT 0
14949: EQUAL
14950: IFFALSE 14960
// x := 5 ;
14952: LD_ADDR_VAR 0 6
14956: PUSH
14957: LD_INT 5
14959: ST_TO_ADDR
// if time > 2 2$00 then
14960: LD_VAR 0 2
14964: PUSH
14965: LD_INT 4200
14967: GREATER
14968: IFFALSE 14978
// time := 0 0$30 ;
14970: LD_ADDR_VAR 0 2
14974: PUSH
14975: LD_INT 1050
14977: ST_TO_ADDR
// until not game or amount <= 0 ;
14978: LD_EXP 2
14982: NOT
14983: PUSH
14984: LD_VAR 0 3
14988: PUSH
14989: LD_INT 0
14991: LESSEQUAL
14992: OR
14993: IFFALSE 14645
// end ; end_of_file
14995: LD_VAR 0 4
14999: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15000: LD_VAR 0 1
15004: PUSH
15005: LD_INT 200
15007: DOUBLE
15008: GREATEREQUAL
15009: IFFALSE 15017
15011: LD_INT 299
15013: DOUBLE
15014: LESSEQUAL
15015: IFTRUE 15019
15017: GO 15051
15019: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15020: LD_VAR 0 1
15024: PPUSH
15025: LD_VAR 0 2
15029: PPUSH
15030: LD_VAR 0 3
15034: PPUSH
15035: LD_VAR 0 4
15039: PPUSH
15040: LD_VAR 0 5
15044: PPUSH
15045: CALL 74133 0 5
15049: GO 15128
15051: LD_INT 300
15053: DOUBLE
15054: GREATEREQUAL
15055: IFFALSE 15063
15057: LD_INT 399
15059: DOUBLE
15060: LESSEQUAL
15061: IFTRUE 15065
15063: GO 15127
15065: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15066: LD_VAR 0 1
15070: PPUSH
15071: LD_VAR 0 2
15075: PPUSH
15076: LD_VAR 0 3
15080: PPUSH
15081: LD_VAR 0 4
15085: PPUSH
15086: LD_VAR 0 5
15090: PPUSH
15091: LD_VAR 0 6
15095: PPUSH
15096: LD_VAR 0 7
15100: PPUSH
15101: LD_VAR 0 8
15105: PPUSH
15106: LD_VAR 0 9
15110: PPUSH
15111: LD_VAR 0 10
15115: PPUSH
15116: LD_VAR 0 11
15120: PPUSH
15121: CALL 70458 0 11
15125: GO 15128
15127: POP
// end ;
15128: PPOPN 11
15130: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15131: LD_VAR 0 1
15135: PPUSH
15136: LD_VAR 0 2
15140: PPUSH
15141: LD_VAR 0 3
15145: PPUSH
15146: LD_VAR 0 4
15150: PPUSH
15151: LD_VAR 0 5
15155: PPUSH
15156: CALL 73869 0 5
// end ; end_of_file
15160: PPOPN 5
15162: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15163: LD_INT 0
15165: PPUSH
15166: PPUSH
// if exist_mode then
15167: LD_VAR 0 2
15171: IFFALSE 15196
// unit := CreateCharacter ( prefix & ident ) else
15173: LD_ADDR_VAR 0 5
15177: PUSH
15178: LD_VAR 0 3
15182: PUSH
15183: LD_VAR 0 1
15187: STR
15188: PPUSH
15189: CALL_OW 34
15193: ST_TO_ADDR
15194: GO 15211
// unit := NewCharacter ( ident ) ;
15196: LD_ADDR_VAR 0 5
15200: PUSH
15201: LD_VAR 0 1
15205: PPUSH
15206: CALL_OW 25
15210: ST_TO_ADDR
// result := unit ;
15211: LD_ADDR_VAR 0 4
15215: PUSH
15216: LD_VAR 0 5
15220: ST_TO_ADDR
// end ;
15221: LD_VAR 0 4
15225: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15226: LD_INT 0
15228: PPUSH
15229: PPUSH
// if not side or not nation then
15230: LD_VAR 0 1
15234: NOT
15235: PUSH
15236: LD_VAR 0 2
15240: NOT
15241: OR
15242: IFFALSE 15246
// exit ;
15244: GO 16014
// case nation of nation_american :
15246: LD_VAR 0 2
15250: PUSH
15251: LD_INT 1
15253: DOUBLE
15254: EQUAL
15255: IFTRUE 15259
15257: GO 15473
15259: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15260: LD_ADDR_VAR 0 4
15264: PUSH
15265: LD_INT 35
15267: PUSH
15268: LD_INT 45
15270: PUSH
15271: LD_INT 46
15273: PUSH
15274: LD_INT 47
15276: PUSH
15277: LD_INT 82
15279: PUSH
15280: LD_INT 83
15282: PUSH
15283: LD_INT 84
15285: PUSH
15286: LD_INT 85
15288: PUSH
15289: LD_INT 86
15291: PUSH
15292: LD_INT 1
15294: PUSH
15295: LD_INT 2
15297: PUSH
15298: LD_INT 6
15300: PUSH
15301: LD_INT 15
15303: PUSH
15304: LD_INT 16
15306: PUSH
15307: LD_INT 7
15309: PUSH
15310: LD_INT 12
15312: PUSH
15313: LD_INT 13
15315: PUSH
15316: LD_INT 10
15318: PUSH
15319: LD_INT 14
15321: PUSH
15322: LD_INT 20
15324: PUSH
15325: LD_INT 21
15327: PUSH
15328: LD_INT 22
15330: PUSH
15331: LD_INT 25
15333: PUSH
15334: LD_INT 32
15336: PUSH
15337: LD_INT 27
15339: PUSH
15340: LD_INT 36
15342: PUSH
15343: LD_INT 69
15345: PUSH
15346: LD_INT 39
15348: PUSH
15349: LD_INT 34
15351: PUSH
15352: LD_INT 40
15354: PUSH
15355: LD_INT 48
15357: PUSH
15358: LD_INT 49
15360: PUSH
15361: LD_INT 50
15363: PUSH
15364: LD_INT 51
15366: PUSH
15367: LD_INT 52
15369: PUSH
15370: LD_INT 53
15372: PUSH
15373: LD_INT 54
15375: PUSH
15376: LD_INT 55
15378: PUSH
15379: LD_INT 56
15381: PUSH
15382: LD_INT 57
15384: PUSH
15385: LD_INT 58
15387: PUSH
15388: LD_INT 59
15390: PUSH
15391: LD_INT 60
15393: PUSH
15394: LD_INT 61
15396: PUSH
15397: LD_INT 62
15399: PUSH
15400: LD_INT 80
15402: PUSH
15403: LD_INT 82
15405: PUSH
15406: LD_INT 83
15408: PUSH
15409: LD_INT 84
15411: PUSH
15412: LD_INT 85
15414: PUSH
15415: LD_INT 86
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: ST_TO_ADDR
15471: GO 15938
15473: LD_INT 2
15475: DOUBLE
15476: EQUAL
15477: IFTRUE 15481
15479: GO 15707
15481: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15482: LD_ADDR_VAR 0 4
15486: PUSH
15487: LD_INT 35
15489: PUSH
15490: LD_INT 45
15492: PUSH
15493: LD_INT 46
15495: PUSH
15496: LD_INT 47
15498: PUSH
15499: LD_INT 82
15501: PUSH
15502: LD_INT 83
15504: PUSH
15505: LD_INT 84
15507: PUSH
15508: LD_INT 85
15510: PUSH
15511: LD_INT 87
15513: PUSH
15514: LD_INT 70
15516: PUSH
15517: LD_INT 1
15519: PUSH
15520: LD_INT 11
15522: PUSH
15523: LD_INT 3
15525: PUSH
15526: LD_INT 4
15528: PUSH
15529: LD_INT 5
15531: PUSH
15532: LD_INT 6
15534: PUSH
15535: LD_INT 15
15537: PUSH
15538: LD_INT 18
15540: PUSH
15541: LD_INT 7
15543: PUSH
15544: LD_INT 17
15546: PUSH
15547: LD_INT 8
15549: PUSH
15550: LD_INT 20
15552: PUSH
15553: LD_INT 21
15555: PUSH
15556: LD_INT 22
15558: PUSH
15559: LD_INT 72
15561: PUSH
15562: LD_INT 26
15564: PUSH
15565: LD_INT 69
15567: PUSH
15568: LD_INT 39
15570: PUSH
15571: LD_INT 40
15573: PUSH
15574: LD_INT 41
15576: PUSH
15577: LD_INT 42
15579: PUSH
15580: LD_INT 43
15582: PUSH
15583: LD_INT 48
15585: PUSH
15586: LD_INT 49
15588: PUSH
15589: LD_INT 50
15591: PUSH
15592: LD_INT 51
15594: PUSH
15595: LD_INT 52
15597: PUSH
15598: LD_INT 53
15600: PUSH
15601: LD_INT 54
15603: PUSH
15604: LD_INT 55
15606: PUSH
15607: LD_INT 56
15609: PUSH
15610: LD_INT 60
15612: PUSH
15613: LD_INT 61
15615: PUSH
15616: LD_INT 62
15618: PUSH
15619: LD_INT 66
15621: PUSH
15622: LD_INT 67
15624: PUSH
15625: LD_INT 68
15627: PUSH
15628: LD_INT 81
15630: PUSH
15631: LD_INT 82
15633: PUSH
15634: LD_INT 83
15636: PUSH
15637: LD_INT 84
15639: PUSH
15640: LD_INT 85
15642: PUSH
15643: LD_INT 87
15645: PUSH
15646: LD_INT 88
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: ST_TO_ADDR
15705: GO 15938
15707: LD_INT 3
15709: DOUBLE
15710: EQUAL
15711: IFTRUE 15715
15713: GO 15937
15715: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15716: LD_ADDR_VAR 0 4
15720: PUSH
15721: LD_INT 46
15723: PUSH
15724: LD_INT 47
15726: PUSH
15727: LD_INT 1
15729: PUSH
15730: LD_INT 2
15732: PUSH
15733: LD_INT 82
15735: PUSH
15736: LD_INT 83
15738: PUSH
15739: LD_INT 84
15741: PUSH
15742: LD_INT 85
15744: PUSH
15745: LD_INT 86
15747: PUSH
15748: LD_INT 11
15750: PUSH
15751: LD_INT 9
15753: PUSH
15754: LD_INT 20
15756: PUSH
15757: LD_INT 19
15759: PUSH
15760: LD_INT 21
15762: PUSH
15763: LD_INT 24
15765: PUSH
15766: LD_INT 22
15768: PUSH
15769: LD_INT 25
15771: PUSH
15772: LD_INT 28
15774: PUSH
15775: LD_INT 29
15777: PUSH
15778: LD_INT 30
15780: PUSH
15781: LD_INT 31
15783: PUSH
15784: LD_INT 37
15786: PUSH
15787: LD_INT 38
15789: PUSH
15790: LD_INT 32
15792: PUSH
15793: LD_INT 27
15795: PUSH
15796: LD_INT 33
15798: PUSH
15799: LD_INT 69
15801: PUSH
15802: LD_INT 39
15804: PUSH
15805: LD_INT 34
15807: PUSH
15808: LD_INT 40
15810: PUSH
15811: LD_INT 71
15813: PUSH
15814: LD_INT 23
15816: PUSH
15817: LD_INT 44
15819: PUSH
15820: LD_INT 48
15822: PUSH
15823: LD_INT 49
15825: PUSH
15826: LD_INT 50
15828: PUSH
15829: LD_INT 51
15831: PUSH
15832: LD_INT 52
15834: PUSH
15835: LD_INT 53
15837: PUSH
15838: LD_INT 54
15840: PUSH
15841: LD_INT 55
15843: PUSH
15844: LD_INT 56
15846: PUSH
15847: LD_INT 57
15849: PUSH
15850: LD_INT 58
15852: PUSH
15853: LD_INT 59
15855: PUSH
15856: LD_INT 63
15858: PUSH
15859: LD_INT 64
15861: PUSH
15862: LD_INT 65
15864: PUSH
15865: LD_INT 82
15867: PUSH
15868: LD_INT 83
15870: PUSH
15871: LD_INT 84
15873: PUSH
15874: LD_INT 85
15876: PUSH
15877: LD_INT 86
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: ST_TO_ADDR
15935: GO 15938
15937: POP
// if state > - 1 and state < 3 then
15938: LD_VAR 0 3
15942: PUSH
15943: LD_INT 1
15945: NEG
15946: GREATER
15947: PUSH
15948: LD_VAR 0 3
15952: PUSH
15953: LD_INT 3
15955: LESS
15956: AND
15957: IFFALSE 16014
// for i in result do
15959: LD_ADDR_VAR 0 5
15963: PUSH
15964: LD_VAR 0 4
15968: PUSH
15969: FOR_IN
15970: IFFALSE 16012
// if GetTech ( i , side ) <> state then
15972: LD_VAR 0 5
15976: PPUSH
15977: LD_VAR 0 1
15981: PPUSH
15982: CALL_OW 321
15986: PUSH
15987: LD_VAR 0 3
15991: NONEQUAL
15992: IFFALSE 16010
// result := result diff i ;
15994: LD_ADDR_VAR 0 4
15998: PUSH
15999: LD_VAR 0 4
16003: PUSH
16004: LD_VAR 0 5
16008: DIFF
16009: ST_TO_ADDR
16010: GO 15969
16012: POP
16013: POP
// end ;
16014: LD_VAR 0 4
16018: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16019: LD_INT 0
16021: PPUSH
16022: PPUSH
16023: PPUSH
// result := true ;
16024: LD_ADDR_VAR 0 3
16028: PUSH
16029: LD_INT 1
16031: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16032: LD_ADDR_VAR 0 5
16036: PUSH
16037: LD_VAR 0 2
16041: PPUSH
16042: CALL_OW 480
16046: ST_TO_ADDR
// if not tmp then
16047: LD_VAR 0 5
16051: NOT
16052: IFFALSE 16056
// exit ;
16054: GO 16105
// for i in tmp do
16056: LD_ADDR_VAR 0 4
16060: PUSH
16061: LD_VAR 0 5
16065: PUSH
16066: FOR_IN
16067: IFFALSE 16103
// if GetTech ( i , side ) <> state_researched then
16069: LD_VAR 0 4
16073: PPUSH
16074: LD_VAR 0 1
16078: PPUSH
16079: CALL_OW 321
16083: PUSH
16084: LD_INT 2
16086: NONEQUAL
16087: IFFALSE 16101
// begin result := false ;
16089: LD_ADDR_VAR 0 3
16093: PUSH
16094: LD_INT 0
16096: ST_TO_ADDR
// exit ;
16097: POP
16098: POP
16099: GO 16105
// end ;
16101: GO 16066
16103: POP
16104: POP
// end ;
16105: LD_VAR 0 3
16109: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16110: LD_INT 0
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
16117: PPUSH
16118: PPUSH
16119: PPUSH
16120: PPUSH
16121: PPUSH
16122: PPUSH
16123: PPUSH
16124: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16125: LD_VAR 0 1
16129: NOT
16130: PUSH
16131: LD_VAR 0 1
16135: PPUSH
16136: CALL_OW 257
16140: PUSH
16141: LD_INT 9
16143: NONEQUAL
16144: OR
16145: IFFALSE 16149
// exit ;
16147: GO 16722
// side := GetSide ( unit ) ;
16149: LD_ADDR_VAR 0 9
16153: PUSH
16154: LD_VAR 0 1
16158: PPUSH
16159: CALL_OW 255
16163: ST_TO_ADDR
// tech_space := tech_spacanom ;
16164: LD_ADDR_VAR 0 12
16168: PUSH
16169: LD_INT 29
16171: ST_TO_ADDR
// tech_time := tech_taurad ;
16172: LD_ADDR_VAR 0 13
16176: PUSH
16177: LD_INT 28
16179: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16180: LD_ADDR_VAR 0 11
16184: PUSH
16185: LD_VAR 0 1
16189: PPUSH
16190: CALL_OW 310
16194: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16195: LD_VAR 0 11
16199: PPUSH
16200: CALL_OW 247
16204: PUSH
16205: LD_INT 2
16207: EQUAL
16208: IFFALSE 16212
// exit ;
16210: GO 16722
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16212: LD_ADDR_VAR 0 8
16216: PUSH
16217: LD_INT 81
16219: PUSH
16220: LD_VAR 0 9
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 3
16231: PUSH
16232: LD_INT 21
16234: PUSH
16235: LD_INT 3
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PPUSH
16250: CALL_OW 69
16254: ST_TO_ADDR
// if not tmp then
16255: LD_VAR 0 8
16259: NOT
16260: IFFALSE 16264
// exit ;
16262: GO 16722
// if in_unit then
16264: LD_VAR 0 11
16268: IFFALSE 16292
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16270: LD_ADDR_VAR 0 10
16274: PUSH
16275: LD_VAR 0 8
16279: PPUSH
16280: LD_VAR 0 11
16284: PPUSH
16285: CALL_OW 74
16289: ST_TO_ADDR
16290: GO 16312
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16292: LD_ADDR_VAR 0 10
16296: PUSH
16297: LD_VAR 0 8
16301: PPUSH
16302: LD_VAR 0 1
16306: PPUSH
16307: CALL_OW 74
16311: ST_TO_ADDR
// if not enemy then
16312: LD_VAR 0 10
16316: NOT
16317: IFFALSE 16321
// exit ;
16319: GO 16722
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16321: LD_VAR 0 11
16325: PUSH
16326: LD_VAR 0 11
16330: PPUSH
16331: LD_VAR 0 10
16335: PPUSH
16336: CALL_OW 296
16340: PUSH
16341: LD_INT 13
16343: GREATER
16344: AND
16345: PUSH
16346: LD_VAR 0 1
16350: PPUSH
16351: LD_VAR 0 10
16355: PPUSH
16356: CALL_OW 296
16360: PUSH
16361: LD_INT 12
16363: GREATER
16364: OR
16365: IFFALSE 16369
// exit ;
16367: GO 16722
// missile := [ 1 ] ;
16369: LD_ADDR_VAR 0 14
16373: PUSH
16374: LD_INT 1
16376: PUSH
16377: EMPTY
16378: LIST
16379: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16380: LD_VAR 0 9
16384: PPUSH
16385: LD_VAR 0 12
16389: PPUSH
16390: CALL_OW 325
16394: IFFALSE 16423
// missile := Replace ( missile , missile + 1 , 2 ) ;
16396: LD_ADDR_VAR 0 14
16400: PUSH
16401: LD_VAR 0 14
16405: PPUSH
16406: LD_VAR 0 14
16410: PUSH
16411: LD_INT 1
16413: PLUS
16414: PPUSH
16415: LD_INT 2
16417: PPUSH
16418: CALL_OW 1
16422: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16423: LD_VAR 0 9
16427: PPUSH
16428: LD_VAR 0 13
16432: PPUSH
16433: CALL_OW 325
16437: PUSH
16438: LD_VAR 0 10
16442: PPUSH
16443: CALL_OW 255
16447: PPUSH
16448: LD_VAR 0 13
16452: PPUSH
16453: CALL_OW 325
16457: NOT
16458: AND
16459: IFFALSE 16488
// missile := Replace ( missile , missile + 1 , 3 ) ;
16461: LD_ADDR_VAR 0 14
16465: PUSH
16466: LD_VAR 0 14
16470: PPUSH
16471: LD_VAR 0 14
16475: PUSH
16476: LD_INT 1
16478: PLUS
16479: PPUSH
16480: LD_INT 3
16482: PPUSH
16483: CALL_OW 1
16487: ST_TO_ADDR
// if missile < 2 then
16488: LD_VAR 0 14
16492: PUSH
16493: LD_INT 2
16495: LESS
16496: IFFALSE 16500
// exit ;
16498: GO 16722
// x := GetX ( enemy ) ;
16500: LD_ADDR_VAR 0 4
16504: PUSH
16505: LD_VAR 0 10
16509: PPUSH
16510: CALL_OW 250
16514: ST_TO_ADDR
// y := GetY ( enemy ) ;
16515: LD_ADDR_VAR 0 5
16519: PUSH
16520: LD_VAR 0 10
16524: PPUSH
16525: CALL_OW 251
16529: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16530: LD_ADDR_VAR 0 6
16534: PUSH
16535: LD_VAR 0 4
16539: PUSH
16540: LD_INT 1
16542: NEG
16543: PPUSH
16544: LD_INT 1
16546: PPUSH
16547: CALL_OW 12
16551: PLUS
16552: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16553: LD_ADDR_VAR 0 7
16557: PUSH
16558: LD_VAR 0 5
16562: PUSH
16563: LD_INT 1
16565: NEG
16566: PPUSH
16567: LD_INT 1
16569: PPUSH
16570: CALL_OW 12
16574: PLUS
16575: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16576: LD_VAR 0 6
16580: PPUSH
16581: LD_VAR 0 7
16585: PPUSH
16586: CALL_OW 488
16590: NOT
16591: IFFALSE 16613
// begin _x := x ;
16593: LD_ADDR_VAR 0 6
16597: PUSH
16598: LD_VAR 0 4
16602: ST_TO_ADDR
// _y := y ;
16603: LD_ADDR_VAR 0 7
16607: PUSH
16608: LD_VAR 0 5
16612: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16613: LD_ADDR_VAR 0 3
16617: PUSH
16618: LD_INT 1
16620: PPUSH
16621: LD_VAR 0 14
16625: PPUSH
16626: CALL_OW 12
16630: ST_TO_ADDR
// case i of 1 :
16631: LD_VAR 0 3
16635: PUSH
16636: LD_INT 1
16638: DOUBLE
16639: EQUAL
16640: IFTRUE 16644
16642: GO 16661
16644: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16645: LD_VAR 0 1
16649: PPUSH
16650: LD_VAR 0 10
16654: PPUSH
16655: CALL_OW 115
16659: GO 16722
16661: LD_INT 2
16663: DOUBLE
16664: EQUAL
16665: IFTRUE 16669
16667: GO 16691
16669: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16670: LD_VAR 0 1
16674: PPUSH
16675: LD_VAR 0 6
16679: PPUSH
16680: LD_VAR 0 7
16684: PPUSH
16685: CALL_OW 153
16689: GO 16722
16691: LD_INT 3
16693: DOUBLE
16694: EQUAL
16695: IFTRUE 16699
16697: GO 16721
16699: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16700: LD_VAR 0 1
16704: PPUSH
16705: LD_VAR 0 6
16709: PPUSH
16710: LD_VAR 0 7
16714: PPUSH
16715: CALL_OW 154
16719: GO 16722
16721: POP
// end ;
16722: LD_VAR 0 2
16726: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16727: LD_INT 0
16729: PPUSH
16730: PPUSH
16731: PPUSH
16732: PPUSH
16733: PPUSH
16734: PPUSH
// if not unit or not building then
16735: LD_VAR 0 1
16739: NOT
16740: PUSH
16741: LD_VAR 0 2
16745: NOT
16746: OR
16747: IFFALSE 16751
// exit ;
16749: GO 16909
// x := GetX ( building ) ;
16751: LD_ADDR_VAR 0 5
16755: PUSH
16756: LD_VAR 0 2
16760: PPUSH
16761: CALL_OW 250
16765: ST_TO_ADDR
// y := GetY ( building ) ;
16766: LD_ADDR_VAR 0 6
16770: PUSH
16771: LD_VAR 0 2
16775: PPUSH
16776: CALL_OW 251
16780: ST_TO_ADDR
// for i = 0 to 5 do
16781: LD_ADDR_VAR 0 4
16785: PUSH
16786: DOUBLE
16787: LD_INT 0
16789: DEC
16790: ST_TO_ADDR
16791: LD_INT 5
16793: PUSH
16794: FOR_TO
16795: IFFALSE 16907
// begin _x := ShiftX ( x , i , 3 ) ;
16797: LD_ADDR_VAR 0 7
16801: PUSH
16802: LD_VAR 0 5
16806: PPUSH
16807: LD_VAR 0 4
16811: PPUSH
16812: LD_INT 3
16814: PPUSH
16815: CALL_OW 272
16819: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16820: LD_ADDR_VAR 0 8
16824: PUSH
16825: LD_VAR 0 6
16829: PPUSH
16830: LD_VAR 0 4
16834: PPUSH
16835: LD_INT 3
16837: PPUSH
16838: CALL_OW 273
16842: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16843: LD_VAR 0 7
16847: PPUSH
16848: LD_VAR 0 8
16852: PPUSH
16853: CALL_OW 488
16857: NOT
16858: IFFALSE 16862
// continue ;
16860: GO 16794
// if HexInfo ( _x , _y ) = 0 then
16862: LD_VAR 0 7
16866: PPUSH
16867: LD_VAR 0 8
16871: PPUSH
16872: CALL_OW 428
16876: PUSH
16877: LD_INT 0
16879: EQUAL
16880: IFFALSE 16905
// begin ComMoveXY ( unit , _x , _y ) ;
16882: LD_VAR 0 1
16886: PPUSH
16887: LD_VAR 0 7
16891: PPUSH
16892: LD_VAR 0 8
16896: PPUSH
16897: CALL_OW 111
// exit ;
16901: POP
16902: POP
16903: GO 16909
// end ; end ;
16905: GO 16794
16907: POP
16908: POP
// end ;
16909: LD_VAR 0 3
16913: RET
// export function ScanBase ( side , base_area ) ; begin
16914: LD_INT 0
16916: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16917: LD_ADDR_VAR 0 3
16921: PUSH
16922: LD_VAR 0 2
16926: PPUSH
16927: LD_INT 81
16929: PUSH
16930: LD_VAR 0 1
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PPUSH
16939: CALL_OW 70
16943: ST_TO_ADDR
// end ;
16944: LD_VAR 0 3
16948: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16949: LD_INT 0
16951: PPUSH
16952: PPUSH
16953: PPUSH
16954: PPUSH
// result := false ;
16955: LD_ADDR_VAR 0 2
16959: PUSH
16960: LD_INT 0
16962: ST_TO_ADDR
// side := GetSide ( unit ) ;
16963: LD_ADDR_VAR 0 3
16967: PUSH
16968: LD_VAR 0 1
16972: PPUSH
16973: CALL_OW 255
16977: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16978: LD_ADDR_VAR 0 4
16982: PUSH
16983: LD_VAR 0 1
16987: PPUSH
16988: CALL_OW 248
16992: ST_TO_ADDR
// case nat of 1 :
16993: LD_VAR 0 4
16997: PUSH
16998: LD_INT 1
17000: DOUBLE
17001: EQUAL
17002: IFTRUE 17006
17004: GO 17017
17006: POP
// tech := tech_lassight ; 2 :
17007: LD_ADDR_VAR 0 5
17011: PUSH
17012: LD_INT 12
17014: ST_TO_ADDR
17015: GO 17056
17017: LD_INT 2
17019: DOUBLE
17020: EQUAL
17021: IFTRUE 17025
17023: GO 17036
17025: POP
// tech := tech_mortar ; 3 :
17026: LD_ADDR_VAR 0 5
17030: PUSH
17031: LD_INT 41
17033: ST_TO_ADDR
17034: GO 17056
17036: LD_INT 3
17038: DOUBLE
17039: EQUAL
17040: IFTRUE 17044
17042: GO 17055
17044: POP
// tech := tech_bazooka ; end ;
17045: LD_ADDR_VAR 0 5
17049: PUSH
17050: LD_INT 44
17052: ST_TO_ADDR
17053: GO 17056
17055: POP
// if Researched ( side , tech ) then
17056: LD_VAR 0 3
17060: PPUSH
17061: LD_VAR 0 5
17065: PPUSH
17066: CALL_OW 325
17070: IFFALSE 17097
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17072: LD_ADDR_VAR 0 2
17076: PUSH
17077: LD_INT 5
17079: PUSH
17080: LD_INT 8
17082: PUSH
17083: LD_INT 9
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: LIST
17090: PUSH
17091: LD_VAR 0 4
17095: ARRAY
17096: ST_TO_ADDR
// end ;
17097: LD_VAR 0 2
17101: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17102: LD_INT 0
17104: PPUSH
17105: PPUSH
17106: PPUSH
// if not mines then
17107: LD_VAR 0 2
17111: NOT
17112: IFFALSE 17116
// exit ;
17114: GO 17260
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17116: LD_ADDR_VAR 0 5
17120: PUSH
17121: LD_INT 81
17123: PUSH
17124: LD_VAR 0 1
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 3
17135: PUSH
17136: LD_INT 21
17138: PUSH
17139: LD_INT 3
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PPUSH
17154: CALL_OW 69
17158: ST_TO_ADDR
// for i in mines do
17159: LD_ADDR_VAR 0 4
17163: PUSH
17164: LD_VAR 0 2
17168: PUSH
17169: FOR_IN
17170: IFFALSE 17258
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17172: LD_VAR 0 4
17176: PUSH
17177: LD_INT 1
17179: ARRAY
17180: PPUSH
17181: LD_VAR 0 4
17185: PUSH
17186: LD_INT 2
17188: ARRAY
17189: PPUSH
17190: CALL_OW 458
17194: NOT
17195: IFFALSE 17199
// continue ;
17197: GO 17169
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17199: LD_VAR 0 4
17203: PUSH
17204: LD_INT 1
17206: ARRAY
17207: PPUSH
17208: LD_VAR 0 4
17212: PUSH
17213: LD_INT 2
17215: ARRAY
17216: PPUSH
17217: CALL_OW 428
17221: PUSH
17222: LD_VAR 0 5
17226: IN
17227: IFFALSE 17256
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17229: LD_VAR 0 4
17233: PUSH
17234: LD_INT 1
17236: ARRAY
17237: PPUSH
17238: LD_VAR 0 4
17242: PUSH
17243: LD_INT 2
17245: ARRAY
17246: PPUSH
17247: LD_VAR 0 1
17251: PPUSH
17252: CALL_OW 456
// end ;
17256: GO 17169
17258: POP
17259: POP
// end ;
17260: LD_VAR 0 3
17264: RET
// export function Count ( array ) ; begin
17265: LD_INT 0
17267: PPUSH
// result := array + 0 ;
17268: LD_ADDR_VAR 0 2
17272: PUSH
17273: LD_VAR 0 1
17277: PUSH
17278: LD_INT 0
17280: PLUS
17281: ST_TO_ADDR
// end ;
17282: LD_VAR 0 2
17286: RET
// export function IsEmpty ( building ) ; begin
17287: LD_INT 0
17289: PPUSH
// if not building then
17290: LD_VAR 0 1
17294: NOT
17295: IFFALSE 17299
// exit ;
17297: GO 17342
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17299: LD_ADDR_VAR 0 2
17303: PUSH
17304: LD_VAR 0 1
17308: PUSH
17309: LD_INT 22
17311: PUSH
17312: LD_VAR 0 1
17316: PPUSH
17317: CALL_OW 255
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 58
17328: PUSH
17329: EMPTY
17330: LIST
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PPUSH
17336: CALL_OW 69
17340: IN
17341: ST_TO_ADDR
// end ;
17342: LD_VAR 0 2
17346: RET
// export function IsNotFull ( building ) ; var places ; begin
17347: LD_INT 0
17349: PPUSH
17350: PPUSH
// if not building then
17351: LD_VAR 0 1
17355: NOT
17356: IFFALSE 17360
// exit ;
17358: GO 17388
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17360: LD_ADDR_VAR 0 2
17364: PUSH
17365: LD_VAR 0 1
17369: PPUSH
17370: LD_INT 3
17372: PUSH
17373: LD_INT 62
17375: PUSH
17376: EMPTY
17377: LIST
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PPUSH
17383: CALL_OW 72
17387: ST_TO_ADDR
// end ;
17388: LD_VAR 0 2
17392: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17393: LD_INT 0
17395: PPUSH
17396: PPUSH
17397: PPUSH
17398: PPUSH
// tmp := [ ] ;
17399: LD_ADDR_VAR 0 3
17403: PUSH
17404: EMPTY
17405: ST_TO_ADDR
// list := [ ] ;
17406: LD_ADDR_VAR 0 5
17410: PUSH
17411: EMPTY
17412: ST_TO_ADDR
// for i = 16 to 25 do
17413: LD_ADDR_VAR 0 4
17417: PUSH
17418: DOUBLE
17419: LD_INT 16
17421: DEC
17422: ST_TO_ADDR
17423: LD_INT 25
17425: PUSH
17426: FOR_TO
17427: IFFALSE 17500
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17429: LD_ADDR_VAR 0 3
17433: PUSH
17434: LD_VAR 0 3
17438: PUSH
17439: LD_INT 22
17441: PUSH
17442: LD_VAR 0 1
17446: PPUSH
17447: CALL_OW 255
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 91
17458: PUSH
17459: LD_VAR 0 1
17463: PUSH
17464: LD_INT 6
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 30
17474: PUSH
17475: LD_VAR 0 4
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: LIST
17488: PUSH
17489: EMPTY
17490: LIST
17491: PPUSH
17492: CALL_OW 69
17496: ADD
17497: ST_TO_ADDR
17498: GO 17426
17500: POP
17501: POP
// for i = 1 to tmp do
17502: LD_ADDR_VAR 0 4
17506: PUSH
17507: DOUBLE
17508: LD_INT 1
17510: DEC
17511: ST_TO_ADDR
17512: LD_VAR 0 3
17516: PUSH
17517: FOR_TO
17518: IFFALSE 17606
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17520: LD_ADDR_VAR 0 5
17524: PUSH
17525: LD_VAR 0 5
17529: PUSH
17530: LD_VAR 0 3
17534: PUSH
17535: LD_VAR 0 4
17539: ARRAY
17540: PPUSH
17541: CALL_OW 266
17545: PUSH
17546: LD_VAR 0 3
17550: PUSH
17551: LD_VAR 0 4
17555: ARRAY
17556: PPUSH
17557: CALL_OW 250
17561: PUSH
17562: LD_VAR 0 3
17566: PUSH
17567: LD_VAR 0 4
17571: ARRAY
17572: PPUSH
17573: CALL_OW 251
17577: PUSH
17578: LD_VAR 0 3
17582: PUSH
17583: LD_VAR 0 4
17587: ARRAY
17588: PPUSH
17589: CALL_OW 254
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: PUSH
17600: EMPTY
17601: LIST
17602: ADD
17603: ST_TO_ADDR
17604: GO 17517
17606: POP
17607: POP
// result := list ;
17608: LD_ADDR_VAR 0 2
17612: PUSH
17613: LD_VAR 0 5
17617: ST_TO_ADDR
// end ;
17618: LD_VAR 0 2
17622: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17623: LD_INT 0
17625: PPUSH
17626: PPUSH
17627: PPUSH
17628: PPUSH
17629: PPUSH
17630: PPUSH
17631: PPUSH
// if not factory then
17632: LD_VAR 0 1
17636: NOT
17637: IFFALSE 17641
// exit ;
17639: GO 18234
// if control = control_apeman then
17641: LD_VAR 0 4
17645: PUSH
17646: LD_INT 5
17648: EQUAL
17649: IFFALSE 17758
// begin tmp := UnitsInside ( factory ) ;
17651: LD_ADDR_VAR 0 8
17655: PUSH
17656: LD_VAR 0 1
17660: PPUSH
17661: CALL_OW 313
17665: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17666: LD_VAR 0 8
17670: PPUSH
17671: LD_INT 25
17673: PUSH
17674: LD_INT 12
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PPUSH
17681: CALL_OW 72
17685: NOT
17686: IFFALSE 17696
// control := control_manual ;
17688: LD_ADDR_VAR 0 4
17692: PUSH
17693: LD_INT 1
17695: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17696: LD_ADDR_VAR 0 8
17700: PUSH
17701: LD_VAR 0 1
17705: PPUSH
17706: CALL 17393 0 1
17710: ST_TO_ADDR
// if tmp then
17711: LD_VAR 0 8
17715: IFFALSE 17758
// begin for i in tmp do
17717: LD_ADDR_VAR 0 7
17721: PUSH
17722: LD_VAR 0 8
17726: PUSH
17727: FOR_IN
17728: IFFALSE 17756
// if i [ 1 ] = b_ext_radio then
17730: LD_VAR 0 7
17734: PUSH
17735: LD_INT 1
17737: ARRAY
17738: PUSH
17739: LD_INT 22
17741: EQUAL
17742: IFFALSE 17754
// begin control := control_remote ;
17744: LD_ADDR_VAR 0 4
17748: PUSH
17749: LD_INT 2
17751: ST_TO_ADDR
// break ;
17752: GO 17756
// end ;
17754: GO 17727
17756: POP
17757: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17758: LD_VAR 0 1
17762: PPUSH
17763: LD_VAR 0 2
17767: PPUSH
17768: LD_VAR 0 3
17772: PPUSH
17773: LD_VAR 0 4
17777: PPUSH
17778: LD_VAR 0 5
17782: PPUSH
17783: CALL_OW 448
17787: IFFALSE 17822
// begin result := [ chassis , engine , control , weapon ] ;
17789: LD_ADDR_VAR 0 6
17793: PUSH
17794: LD_VAR 0 2
17798: PUSH
17799: LD_VAR 0 3
17803: PUSH
17804: LD_VAR 0 4
17808: PUSH
17809: LD_VAR 0 5
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: ST_TO_ADDR
// exit ;
17820: GO 18234
// end ; _chassis := AvailableChassisList ( factory ) ;
17822: LD_ADDR_VAR 0 9
17826: PUSH
17827: LD_VAR 0 1
17831: PPUSH
17832: CALL_OW 475
17836: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17837: LD_ADDR_VAR 0 11
17841: PUSH
17842: LD_VAR 0 1
17846: PPUSH
17847: CALL_OW 476
17851: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17852: LD_ADDR_VAR 0 12
17856: PUSH
17857: LD_VAR 0 1
17861: PPUSH
17862: CALL_OW 477
17866: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17867: LD_ADDR_VAR 0 10
17871: PUSH
17872: LD_VAR 0 1
17876: PPUSH
17877: CALL_OW 478
17881: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17882: LD_VAR 0 9
17886: NOT
17887: PUSH
17888: LD_VAR 0 11
17892: NOT
17893: OR
17894: PUSH
17895: LD_VAR 0 12
17899: NOT
17900: OR
17901: PUSH
17902: LD_VAR 0 10
17906: NOT
17907: OR
17908: IFFALSE 17943
// begin result := [ chassis , engine , control , weapon ] ;
17910: LD_ADDR_VAR 0 6
17914: PUSH
17915: LD_VAR 0 2
17919: PUSH
17920: LD_VAR 0 3
17924: PUSH
17925: LD_VAR 0 4
17929: PUSH
17930: LD_VAR 0 5
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: ST_TO_ADDR
// exit ;
17941: GO 18234
// end ; if not chassis in _chassis then
17943: LD_VAR 0 2
17947: PUSH
17948: LD_VAR 0 9
17952: IN
17953: NOT
17954: IFFALSE 17980
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17956: LD_ADDR_VAR 0 2
17960: PUSH
17961: LD_VAR 0 9
17965: PUSH
17966: LD_INT 1
17968: PPUSH
17969: LD_VAR 0 9
17973: PPUSH
17974: CALL_OW 12
17978: ARRAY
17979: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17980: LD_VAR 0 2
17984: PPUSH
17985: LD_VAR 0 3
17989: PPUSH
17990: CALL 18239 0 2
17994: NOT
17995: IFFALSE 18054
// repeat engine := _engine [ 1 ] ;
17997: LD_ADDR_VAR 0 3
18001: PUSH
18002: LD_VAR 0 11
18006: PUSH
18007: LD_INT 1
18009: ARRAY
18010: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18011: LD_ADDR_VAR 0 11
18015: PUSH
18016: LD_VAR 0 11
18020: PPUSH
18021: LD_INT 1
18023: PPUSH
18024: CALL_OW 3
18028: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18029: LD_VAR 0 2
18033: PPUSH
18034: LD_VAR 0 3
18038: PPUSH
18039: CALL 18239 0 2
18043: PUSH
18044: LD_VAR 0 11
18048: PUSH
18049: EMPTY
18050: EQUAL
18051: OR
18052: IFFALSE 17997
// if not control in _control then
18054: LD_VAR 0 4
18058: PUSH
18059: LD_VAR 0 12
18063: IN
18064: NOT
18065: IFFALSE 18091
// control := _control [ rand ( 1 , _control ) ] ;
18067: LD_ADDR_VAR 0 4
18071: PUSH
18072: LD_VAR 0 12
18076: PUSH
18077: LD_INT 1
18079: PPUSH
18080: LD_VAR 0 12
18084: PPUSH
18085: CALL_OW 12
18089: ARRAY
18090: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18091: LD_VAR 0 2
18095: PPUSH
18096: LD_VAR 0 5
18100: PPUSH
18101: CALL 18459 0 2
18105: NOT
18106: IFFALSE 18165
// repeat weapon := _weapon [ 1 ] ;
18108: LD_ADDR_VAR 0 5
18112: PUSH
18113: LD_VAR 0 10
18117: PUSH
18118: LD_INT 1
18120: ARRAY
18121: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18122: LD_ADDR_VAR 0 10
18126: PUSH
18127: LD_VAR 0 10
18131: PPUSH
18132: LD_INT 1
18134: PPUSH
18135: CALL_OW 3
18139: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18140: LD_VAR 0 2
18144: PPUSH
18145: LD_VAR 0 5
18149: PPUSH
18150: CALL 18459 0 2
18154: PUSH
18155: LD_VAR 0 10
18159: PUSH
18160: EMPTY
18161: EQUAL
18162: OR
18163: IFFALSE 18108
// result := [ ] ;
18165: LD_ADDR_VAR 0 6
18169: PUSH
18170: EMPTY
18171: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18172: LD_VAR 0 1
18176: PPUSH
18177: LD_VAR 0 2
18181: PPUSH
18182: LD_VAR 0 3
18186: PPUSH
18187: LD_VAR 0 4
18191: PPUSH
18192: LD_VAR 0 5
18196: PPUSH
18197: CALL_OW 448
18201: IFFALSE 18234
// result := [ chassis , engine , control , weapon ] ;
18203: LD_ADDR_VAR 0 6
18207: PUSH
18208: LD_VAR 0 2
18212: PUSH
18213: LD_VAR 0 3
18217: PUSH
18218: LD_VAR 0 4
18222: PUSH
18223: LD_VAR 0 5
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: ST_TO_ADDR
// end ;
18234: LD_VAR 0 6
18238: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18239: LD_INT 0
18241: PPUSH
// if not chassis or not engine then
18242: LD_VAR 0 1
18246: NOT
18247: PUSH
18248: LD_VAR 0 2
18252: NOT
18253: OR
18254: IFFALSE 18258
// exit ;
18256: GO 18454
// case engine of engine_solar :
18258: LD_VAR 0 2
18262: PUSH
18263: LD_INT 2
18265: DOUBLE
18266: EQUAL
18267: IFTRUE 18271
18269: GO 18309
18271: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18272: LD_ADDR_VAR 0 3
18276: PUSH
18277: LD_INT 11
18279: PUSH
18280: LD_INT 12
18282: PUSH
18283: LD_INT 13
18285: PUSH
18286: LD_INT 14
18288: PUSH
18289: LD_INT 1
18291: PUSH
18292: LD_INT 2
18294: PUSH
18295: LD_INT 3
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: ST_TO_ADDR
18307: GO 18438
18309: LD_INT 1
18311: DOUBLE
18312: EQUAL
18313: IFTRUE 18317
18315: GO 18379
18317: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18318: LD_ADDR_VAR 0 3
18322: PUSH
18323: LD_INT 11
18325: PUSH
18326: LD_INT 12
18328: PUSH
18329: LD_INT 13
18331: PUSH
18332: LD_INT 14
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: LD_INT 3
18343: PUSH
18344: LD_INT 4
18346: PUSH
18347: LD_INT 5
18349: PUSH
18350: LD_INT 21
18352: PUSH
18353: LD_INT 23
18355: PUSH
18356: LD_INT 22
18358: PUSH
18359: LD_INT 24
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: ST_TO_ADDR
18377: GO 18438
18379: LD_INT 3
18381: DOUBLE
18382: EQUAL
18383: IFTRUE 18387
18385: GO 18437
18387: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18388: LD_ADDR_VAR 0 3
18392: PUSH
18393: LD_INT 13
18395: PUSH
18396: LD_INT 14
18398: PUSH
18399: LD_INT 2
18401: PUSH
18402: LD_INT 3
18404: PUSH
18405: LD_INT 4
18407: PUSH
18408: LD_INT 5
18410: PUSH
18411: LD_INT 21
18413: PUSH
18414: LD_INT 22
18416: PUSH
18417: LD_INT 23
18419: PUSH
18420: LD_INT 24
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: ST_TO_ADDR
18435: GO 18438
18437: POP
// result := ( chassis in result ) ;
18438: LD_ADDR_VAR 0 3
18442: PUSH
18443: LD_VAR 0 1
18447: PUSH
18448: LD_VAR 0 3
18452: IN
18453: ST_TO_ADDR
// end ;
18454: LD_VAR 0 3
18458: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18459: LD_INT 0
18461: PPUSH
// if not chassis or not weapon then
18462: LD_VAR 0 1
18466: NOT
18467: PUSH
18468: LD_VAR 0 2
18472: NOT
18473: OR
18474: IFFALSE 18478
// exit ;
18476: GO 19538
// case weapon of us_machine_gun :
18478: LD_VAR 0 2
18482: PUSH
18483: LD_INT 2
18485: DOUBLE
18486: EQUAL
18487: IFTRUE 18491
18489: GO 18521
18491: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18492: LD_ADDR_VAR 0 3
18496: PUSH
18497: LD_INT 1
18499: PUSH
18500: LD_INT 2
18502: PUSH
18503: LD_INT 3
18505: PUSH
18506: LD_INT 4
18508: PUSH
18509: LD_INT 5
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: ST_TO_ADDR
18519: GO 19522
18521: LD_INT 3
18523: DOUBLE
18524: EQUAL
18525: IFTRUE 18529
18527: GO 18559
18529: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18530: LD_ADDR_VAR 0 3
18534: PUSH
18535: LD_INT 1
18537: PUSH
18538: LD_INT 2
18540: PUSH
18541: LD_INT 3
18543: PUSH
18544: LD_INT 4
18546: PUSH
18547: LD_INT 5
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: ST_TO_ADDR
18557: GO 19522
18559: LD_INT 11
18561: DOUBLE
18562: EQUAL
18563: IFTRUE 18567
18565: GO 18597
18567: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18568: LD_ADDR_VAR 0 3
18572: PUSH
18573: LD_INT 1
18575: PUSH
18576: LD_INT 2
18578: PUSH
18579: LD_INT 3
18581: PUSH
18582: LD_INT 4
18584: PUSH
18585: LD_INT 5
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: ST_TO_ADDR
18595: GO 19522
18597: LD_INT 4
18599: DOUBLE
18600: EQUAL
18601: IFTRUE 18605
18603: GO 18631
18605: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18606: LD_ADDR_VAR 0 3
18610: PUSH
18611: LD_INT 2
18613: PUSH
18614: LD_INT 3
18616: PUSH
18617: LD_INT 4
18619: PUSH
18620: LD_INT 5
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: ST_TO_ADDR
18629: GO 19522
18631: LD_INT 5
18633: DOUBLE
18634: EQUAL
18635: IFTRUE 18639
18637: GO 18665
18639: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18640: LD_ADDR_VAR 0 3
18644: PUSH
18645: LD_INT 2
18647: PUSH
18648: LD_INT 3
18650: PUSH
18651: LD_INT 4
18653: PUSH
18654: LD_INT 5
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: ST_TO_ADDR
18663: GO 19522
18665: LD_INT 9
18667: DOUBLE
18668: EQUAL
18669: IFTRUE 18673
18671: GO 18699
18673: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18674: LD_ADDR_VAR 0 3
18678: PUSH
18679: LD_INT 2
18681: PUSH
18682: LD_INT 3
18684: PUSH
18685: LD_INT 4
18687: PUSH
18688: LD_INT 5
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: ST_TO_ADDR
18697: GO 19522
18699: LD_INT 7
18701: DOUBLE
18702: EQUAL
18703: IFTRUE 18707
18705: GO 18733
18707: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18708: LD_ADDR_VAR 0 3
18712: PUSH
18713: LD_INT 2
18715: PUSH
18716: LD_INT 3
18718: PUSH
18719: LD_INT 4
18721: PUSH
18722: LD_INT 5
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: ST_TO_ADDR
18731: GO 19522
18733: LD_INT 12
18735: DOUBLE
18736: EQUAL
18737: IFTRUE 18741
18739: GO 18767
18741: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18742: LD_ADDR_VAR 0 3
18746: PUSH
18747: LD_INT 2
18749: PUSH
18750: LD_INT 3
18752: PUSH
18753: LD_INT 4
18755: PUSH
18756: LD_INT 5
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: ST_TO_ADDR
18765: GO 19522
18767: LD_INT 13
18769: DOUBLE
18770: EQUAL
18771: IFTRUE 18775
18773: GO 18801
18775: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18776: LD_ADDR_VAR 0 3
18780: PUSH
18781: LD_INT 2
18783: PUSH
18784: LD_INT 3
18786: PUSH
18787: LD_INT 4
18789: PUSH
18790: LD_INT 5
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: ST_TO_ADDR
18799: GO 19522
18801: LD_INT 14
18803: DOUBLE
18804: EQUAL
18805: IFTRUE 18809
18807: GO 18827
18809: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18810: LD_ADDR_VAR 0 3
18814: PUSH
18815: LD_INT 4
18817: PUSH
18818: LD_INT 5
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: ST_TO_ADDR
18825: GO 19522
18827: LD_INT 6
18829: DOUBLE
18830: EQUAL
18831: IFTRUE 18835
18833: GO 18853
18835: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18836: LD_ADDR_VAR 0 3
18840: PUSH
18841: LD_INT 4
18843: PUSH
18844: LD_INT 5
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: ST_TO_ADDR
18851: GO 19522
18853: LD_INT 10
18855: DOUBLE
18856: EQUAL
18857: IFTRUE 18861
18859: GO 18879
18861: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18862: LD_ADDR_VAR 0 3
18866: PUSH
18867: LD_INT 4
18869: PUSH
18870: LD_INT 5
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: ST_TO_ADDR
18877: GO 19522
18879: LD_INT 22
18881: DOUBLE
18882: EQUAL
18883: IFTRUE 18887
18885: GO 18913
18887: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18888: LD_ADDR_VAR 0 3
18892: PUSH
18893: LD_INT 11
18895: PUSH
18896: LD_INT 12
18898: PUSH
18899: LD_INT 13
18901: PUSH
18902: LD_INT 14
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: ST_TO_ADDR
18911: GO 19522
18913: LD_INT 23
18915: DOUBLE
18916: EQUAL
18917: IFTRUE 18921
18919: GO 18947
18921: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18922: LD_ADDR_VAR 0 3
18926: PUSH
18927: LD_INT 11
18929: PUSH
18930: LD_INT 12
18932: PUSH
18933: LD_INT 13
18935: PUSH
18936: LD_INT 14
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: ST_TO_ADDR
18945: GO 19522
18947: LD_INT 24
18949: DOUBLE
18950: EQUAL
18951: IFTRUE 18955
18953: GO 18981
18955: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18956: LD_ADDR_VAR 0 3
18960: PUSH
18961: LD_INT 11
18963: PUSH
18964: LD_INT 12
18966: PUSH
18967: LD_INT 13
18969: PUSH
18970: LD_INT 14
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: ST_TO_ADDR
18979: GO 19522
18981: LD_INT 30
18983: DOUBLE
18984: EQUAL
18985: IFTRUE 18989
18987: GO 19015
18989: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18990: LD_ADDR_VAR 0 3
18994: PUSH
18995: LD_INT 11
18997: PUSH
18998: LD_INT 12
19000: PUSH
19001: LD_INT 13
19003: PUSH
19004: LD_INT 14
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: ST_TO_ADDR
19013: GO 19522
19015: LD_INT 25
19017: DOUBLE
19018: EQUAL
19019: IFTRUE 19023
19021: GO 19041
19023: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19024: LD_ADDR_VAR 0 3
19028: PUSH
19029: LD_INT 13
19031: PUSH
19032: LD_INT 14
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: ST_TO_ADDR
19039: GO 19522
19041: LD_INT 27
19043: DOUBLE
19044: EQUAL
19045: IFTRUE 19049
19047: GO 19067
19049: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19050: LD_ADDR_VAR 0 3
19054: PUSH
19055: LD_INT 13
19057: PUSH
19058: LD_INT 14
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: ST_TO_ADDR
19065: GO 19522
19067: LD_INT 92
19069: DOUBLE
19070: EQUAL
19071: IFTRUE 19075
19073: GO 19101
19075: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19076: LD_ADDR_VAR 0 3
19080: PUSH
19081: LD_INT 11
19083: PUSH
19084: LD_INT 12
19086: PUSH
19087: LD_INT 13
19089: PUSH
19090: LD_INT 14
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: ST_TO_ADDR
19099: GO 19522
19101: LD_INT 28
19103: DOUBLE
19104: EQUAL
19105: IFTRUE 19109
19107: GO 19127
19109: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19110: LD_ADDR_VAR 0 3
19114: PUSH
19115: LD_INT 13
19117: PUSH
19118: LD_INT 14
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: ST_TO_ADDR
19125: GO 19522
19127: LD_INT 29
19129: DOUBLE
19130: EQUAL
19131: IFTRUE 19135
19133: GO 19153
19135: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19136: LD_ADDR_VAR 0 3
19140: PUSH
19141: LD_INT 13
19143: PUSH
19144: LD_INT 14
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: ST_TO_ADDR
19151: GO 19522
19153: LD_INT 31
19155: DOUBLE
19156: EQUAL
19157: IFTRUE 19161
19159: GO 19179
19161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19162: LD_ADDR_VAR 0 3
19166: PUSH
19167: LD_INT 13
19169: PUSH
19170: LD_INT 14
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: ST_TO_ADDR
19177: GO 19522
19179: LD_INT 26
19181: DOUBLE
19182: EQUAL
19183: IFTRUE 19187
19185: GO 19205
19187: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19188: LD_ADDR_VAR 0 3
19192: PUSH
19193: LD_INT 13
19195: PUSH
19196: LD_INT 14
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: ST_TO_ADDR
19203: GO 19522
19205: LD_INT 42
19207: DOUBLE
19208: EQUAL
19209: IFTRUE 19213
19211: GO 19239
19213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19214: LD_ADDR_VAR 0 3
19218: PUSH
19219: LD_INT 21
19221: PUSH
19222: LD_INT 22
19224: PUSH
19225: LD_INT 23
19227: PUSH
19228: LD_INT 24
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: ST_TO_ADDR
19237: GO 19522
19239: LD_INT 43
19241: DOUBLE
19242: EQUAL
19243: IFTRUE 19247
19245: GO 19273
19247: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19248: LD_ADDR_VAR 0 3
19252: PUSH
19253: LD_INT 21
19255: PUSH
19256: LD_INT 22
19258: PUSH
19259: LD_INT 23
19261: PUSH
19262: LD_INT 24
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: ST_TO_ADDR
19271: GO 19522
19273: LD_INT 44
19275: DOUBLE
19276: EQUAL
19277: IFTRUE 19281
19279: GO 19307
19281: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19282: LD_ADDR_VAR 0 3
19286: PUSH
19287: LD_INT 21
19289: PUSH
19290: LD_INT 22
19292: PUSH
19293: LD_INT 23
19295: PUSH
19296: LD_INT 24
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: ST_TO_ADDR
19305: GO 19522
19307: LD_INT 45
19309: DOUBLE
19310: EQUAL
19311: IFTRUE 19315
19313: GO 19341
19315: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19316: LD_ADDR_VAR 0 3
19320: PUSH
19321: LD_INT 21
19323: PUSH
19324: LD_INT 22
19326: PUSH
19327: LD_INT 23
19329: PUSH
19330: LD_INT 24
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: ST_TO_ADDR
19339: GO 19522
19341: LD_INT 49
19343: DOUBLE
19344: EQUAL
19345: IFTRUE 19349
19347: GO 19375
19349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19350: LD_ADDR_VAR 0 3
19354: PUSH
19355: LD_INT 21
19357: PUSH
19358: LD_INT 22
19360: PUSH
19361: LD_INT 23
19363: PUSH
19364: LD_INT 24
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: ST_TO_ADDR
19373: GO 19522
19375: LD_INT 51
19377: DOUBLE
19378: EQUAL
19379: IFTRUE 19383
19381: GO 19409
19383: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19384: LD_ADDR_VAR 0 3
19388: PUSH
19389: LD_INT 21
19391: PUSH
19392: LD_INT 22
19394: PUSH
19395: LD_INT 23
19397: PUSH
19398: LD_INT 24
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: ST_TO_ADDR
19407: GO 19522
19409: LD_INT 52
19411: DOUBLE
19412: EQUAL
19413: IFTRUE 19417
19415: GO 19443
19417: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19418: LD_ADDR_VAR 0 3
19422: PUSH
19423: LD_INT 21
19425: PUSH
19426: LD_INT 22
19428: PUSH
19429: LD_INT 23
19431: PUSH
19432: LD_INT 24
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: ST_TO_ADDR
19441: GO 19522
19443: LD_INT 53
19445: DOUBLE
19446: EQUAL
19447: IFTRUE 19451
19449: GO 19469
19451: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19452: LD_ADDR_VAR 0 3
19456: PUSH
19457: LD_INT 23
19459: PUSH
19460: LD_INT 24
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: ST_TO_ADDR
19467: GO 19522
19469: LD_INT 46
19471: DOUBLE
19472: EQUAL
19473: IFTRUE 19477
19475: GO 19495
19477: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19478: LD_ADDR_VAR 0 3
19482: PUSH
19483: LD_INT 23
19485: PUSH
19486: LD_INT 24
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: ST_TO_ADDR
19493: GO 19522
19495: LD_INT 47
19497: DOUBLE
19498: EQUAL
19499: IFTRUE 19503
19501: GO 19521
19503: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19504: LD_ADDR_VAR 0 3
19508: PUSH
19509: LD_INT 23
19511: PUSH
19512: LD_INT 24
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: ST_TO_ADDR
19519: GO 19522
19521: POP
// result := ( chassis in result ) ;
19522: LD_ADDR_VAR 0 3
19526: PUSH
19527: LD_VAR 0 1
19531: PUSH
19532: LD_VAR 0 3
19536: IN
19537: ST_TO_ADDR
// end ;
19538: LD_VAR 0 3
19542: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19543: LD_INT 0
19545: PPUSH
19546: PPUSH
19547: PPUSH
19548: PPUSH
19549: PPUSH
19550: PPUSH
19551: PPUSH
// result := array ;
19552: LD_ADDR_VAR 0 5
19556: PUSH
19557: LD_VAR 0 1
19561: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19562: LD_VAR 0 1
19566: NOT
19567: PUSH
19568: LD_VAR 0 2
19572: NOT
19573: OR
19574: PUSH
19575: LD_VAR 0 3
19579: NOT
19580: OR
19581: PUSH
19582: LD_VAR 0 2
19586: PUSH
19587: LD_VAR 0 1
19591: GREATER
19592: OR
19593: PUSH
19594: LD_VAR 0 3
19598: PUSH
19599: LD_VAR 0 1
19603: GREATER
19604: OR
19605: IFFALSE 19609
// exit ;
19607: GO 19905
// if direction then
19609: LD_VAR 0 4
19613: IFFALSE 19677
// begin d := 1 ;
19615: LD_ADDR_VAR 0 9
19619: PUSH
19620: LD_INT 1
19622: ST_TO_ADDR
// if i_from > i_to then
19623: LD_VAR 0 2
19627: PUSH
19628: LD_VAR 0 3
19632: GREATER
19633: IFFALSE 19659
// length := ( array - i_from ) + i_to else
19635: LD_ADDR_VAR 0 11
19639: PUSH
19640: LD_VAR 0 1
19644: PUSH
19645: LD_VAR 0 2
19649: MINUS
19650: PUSH
19651: LD_VAR 0 3
19655: PLUS
19656: ST_TO_ADDR
19657: GO 19675
// length := i_to - i_from ;
19659: LD_ADDR_VAR 0 11
19663: PUSH
19664: LD_VAR 0 3
19668: PUSH
19669: LD_VAR 0 2
19673: MINUS
19674: ST_TO_ADDR
// end else
19675: GO 19738
// begin d := - 1 ;
19677: LD_ADDR_VAR 0 9
19681: PUSH
19682: LD_INT 1
19684: NEG
19685: ST_TO_ADDR
// if i_from > i_to then
19686: LD_VAR 0 2
19690: PUSH
19691: LD_VAR 0 3
19695: GREATER
19696: IFFALSE 19716
// length := i_from - i_to else
19698: LD_ADDR_VAR 0 11
19702: PUSH
19703: LD_VAR 0 2
19707: PUSH
19708: LD_VAR 0 3
19712: MINUS
19713: ST_TO_ADDR
19714: GO 19738
// length := ( array - i_to ) + i_from ;
19716: LD_ADDR_VAR 0 11
19720: PUSH
19721: LD_VAR 0 1
19725: PUSH
19726: LD_VAR 0 3
19730: MINUS
19731: PUSH
19732: LD_VAR 0 2
19736: PLUS
19737: ST_TO_ADDR
// end ; if not length then
19738: LD_VAR 0 11
19742: NOT
19743: IFFALSE 19747
// exit ;
19745: GO 19905
// tmp := array ;
19747: LD_ADDR_VAR 0 10
19751: PUSH
19752: LD_VAR 0 1
19756: ST_TO_ADDR
// for i = 1 to length do
19757: LD_ADDR_VAR 0 6
19761: PUSH
19762: DOUBLE
19763: LD_INT 1
19765: DEC
19766: ST_TO_ADDR
19767: LD_VAR 0 11
19771: PUSH
19772: FOR_TO
19773: IFFALSE 19893
// begin for j = 1 to array do
19775: LD_ADDR_VAR 0 7
19779: PUSH
19780: DOUBLE
19781: LD_INT 1
19783: DEC
19784: ST_TO_ADDR
19785: LD_VAR 0 1
19789: PUSH
19790: FOR_TO
19791: IFFALSE 19879
// begin k := j + d ;
19793: LD_ADDR_VAR 0 8
19797: PUSH
19798: LD_VAR 0 7
19802: PUSH
19803: LD_VAR 0 9
19807: PLUS
19808: ST_TO_ADDR
// if k > array then
19809: LD_VAR 0 8
19813: PUSH
19814: LD_VAR 0 1
19818: GREATER
19819: IFFALSE 19829
// k := 1 ;
19821: LD_ADDR_VAR 0 8
19825: PUSH
19826: LD_INT 1
19828: ST_TO_ADDR
// if not k then
19829: LD_VAR 0 8
19833: NOT
19834: IFFALSE 19846
// k := array ;
19836: LD_ADDR_VAR 0 8
19840: PUSH
19841: LD_VAR 0 1
19845: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19846: LD_ADDR_VAR 0 10
19850: PUSH
19851: LD_VAR 0 10
19855: PPUSH
19856: LD_VAR 0 8
19860: PPUSH
19861: LD_VAR 0 1
19865: PUSH
19866: LD_VAR 0 7
19870: ARRAY
19871: PPUSH
19872: CALL_OW 1
19876: ST_TO_ADDR
// end ;
19877: GO 19790
19879: POP
19880: POP
// array := tmp ;
19881: LD_ADDR_VAR 0 1
19885: PUSH
19886: LD_VAR 0 10
19890: ST_TO_ADDR
// end ;
19891: GO 19772
19893: POP
19894: POP
// result := array ;
19895: LD_ADDR_VAR 0 5
19899: PUSH
19900: LD_VAR 0 1
19904: ST_TO_ADDR
// end ;
19905: LD_VAR 0 5
19909: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19910: LD_INT 0
19912: PPUSH
19913: PPUSH
// result := 0 ;
19914: LD_ADDR_VAR 0 3
19918: PUSH
19919: LD_INT 0
19921: ST_TO_ADDR
// if not array or not value in array then
19922: LD_VAR 0 1
19926: NOT
19927: PUSH
19928: LD_VAR 0 2
19932: PUSH
19933: LD_VAR 0 1
19937: IN
19938: NOT
19939: OR
19940: IFFALSE 19944
// exit ;
19942: GO 19998
// for i = 1 to array do
19944: LD_ADDR_VAR 0 4
19948: PUSH
19949: DOUBLE
19950: LD_INT 1
19952: DEC
19953: ST_TO_ADDR
19954: LD_VAR 0 1
19958: PUSH
19959: FOR_TO
19960: IFFALSE 19996
// if value = array [ i ] then
19962: LD_VAR 0 2
19966: PUSH
19967: LD_VAR 0 1
19971: PUSH
19972: LD_VAR 0 4
19976: ARRAY
19977: EQUAL
19978: IFFALSE 19994
// begin result := i ;
19980: LD_ADDR_VAR 0 3
19984: PUSH
19985: LD_VAR 0 4
19989: ST_TO_ADDR
// exit ;
19990: POP
19991: POP
19992: GO 19998
// end ;
19994: GO 19959
19996: POP
19997: POP
// end ;
19998: LD_VAR 0 3
20002: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20003: LD_INT 0
20005: PPUSH
// vc_chassis := chassis ;
20006: LD_ADDR_OWVAR 37
20010: PUSH
20011: LD_VAR 0 1
20015: ST_TO_ADDR
// vc_engine := engine ;
20016: LD_ADDR_OWVAR 39
20020: PUSH
20021: LD_VAR 0 2
20025: ST_TO_ADDR
// vc_control := control ;
20026: LD_ADDR_OWVAR 38
20030: PUSH
20031: LD_VAR 0 3
20035: ST_TO_ADDR
// vc_weapon := weapon ;
20036: LD_ADDR_OWVAR 40
20040: PUSH
20041: LD_VAR 0 4
20045: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20046: LD_ADDR_OWVAR 41
20050: PUSH
20051: LD_VAR 0 5
20055: ST_TO_ADDR
// end ;
20056: LD_VAR 0 6
20060: RET
// export function WantPlant ( unit ) ; var task ; begin
20061: LD_INT 0
20063: PPUSH
20064: PPUSH
// result := false ;
20065: LD_ADDR_VAR 0 2
20069: PUSH
20070: LD_INT 0
20072: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20073: LD_ADDR_VAR 0 3
20077: PUSH
20078: LD_VAR 0 1
20082: PPUSH
20083: CALL_OW 437
20087: ST_TO_ADDR
// if task then
20088: LD_VAR 0 3
20092: IFFALSE 20120
// if task [ 1 ] [ 1 ] = p then
20094: LD_VAR 0 3
20098: PUSH
20099: LD_INT 1
20101: ARRAY
20102: PUSH
20103: LD_INT 1
20105: ARRAY
20106: PUSH
20107: LD_STRING p
20109: EQUAL
20110: IFFALSE 20120
// result := true ;
20112: LD_ADDR_VAR 0 2
20116: PUSH
20117: LD_INT 1
20119: ST_TO_ADDR
// end ;
20120: LD_VAR 0 2
20124: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20125: LD_INT 0
20127: PPUSH
20128: PPUSH
20129: PPUSH
20130: PPUSH
// if pos < 1 then
20131: LD_VAR 0 2
20135: PUSH
20136: LD_INT 1
20138: LESS
20139: IFFALSE 20143
// exit ;
20141: GO 20446
// if pos = 1 then
20143: LD_VAR 0 2
20147: PUSH
20148: LD_INT 1
20150: EQUAL
20151: IFFALSE 20184
// result := Replace ( arr , pos [ 1 ] , value ) else
20153: LD_ADDR_VAR 0 4
20157: PUSH
20158: LD_VAR 0 1
20162: PPUSH
20163: LD_VAR 0 2
20167: PUSH
20168: LD_INT 1
20170: ARRAY
20171: PPUSH
20172: LD_VAR 0 3
20176: PPUSH
20177: CALL_OW 1
20181: ST_TO_ADDR
20182: GO 20446
// begin tmp := arr ;
20184: LD_ADDR_VAR 0 6
20188: PUSH
20189: LD_VAR 0 1
20193: ST_TO_ADDR
// s_arr := [ tmp ] ;
20194: LD_ADDR_VAR 0 7
20198: PUSH
20199: LD_VAR 0 6
20203: PUSH
20204: EMPTY
20205: LIST
20206: ST_TO_ADDR
// for i = 1 to pos - 1 do
20207: LD_ADDR_VAR 0 5
20211: PUSH
20212: DOUBLE
20213: LD_INT 1
20215: DEC
20216: ST_TO_ADDR
20217: LD_VAR 0 2
20221: PUSH
20222: LD_INT 1
20224: MINUS
20225: PUSH
20226: FOR_TO
20227: IFFALSE 20272
// begin tmp := tmp [ pos [ i ] ] ;
20229: LD_ADDR_VAR 0 6
20233: PUSH
20234: LD_VAR 0 6
20238: PUSH
20239: LD_VAR 0 2
20243: PUSH
20244: LD_VAR 0 5
20248: ARRAY
20249: ARRAY
20250: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20251: LD_ADDR_VAR 0 7
20255: PUSH
20256: LD_VAR 0 7
20260: PUSH
20261: LD_VAR 0 6
20265: PUSH
20266: EMPTY
20267: LIST
20268: ADD
20269: ST_TO_ADDR
// end ;
20270: GO 20226
20272: POP
20273: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20274: LD_ADDR_VAR 0 6
20278: PUSH
20279: LD_VAR 0 6
20283: PPUSH
20284: LD_VAR 0 2
20288: PUSH
20289: LD_VAR 0 2
20293: ARRAY
20294: PPUSH
20295: LD_VAR 0 3
20299: PPUSH
20300: CALL_OW 1
20304: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20305: LD_ADDR_VAR 0 7
20309: PUSH
20310: LD_VAR 0 7
20314: PPUSH
20315: LD_VAR 0 7
20319: PPUSH
20320: LD_VAR 0 6
20324: PPUSH
20325: CALL_OW 1
20329: ST_TO_ADDR
// for i = s_arr downto 2 do
20330: LD_ADDR_VAR 0 5
20334: PUSH
20335: DOUBLE
20336: LD_VAR 0 7
20340: INC
20341: ST_TO_ADDR
20342: LD_INT 2
20344: PUSH
20345: FOR_DOWNTO
20346: IFFALSE 20430
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20348: LD_ADDR_VAR 0 6
20352: PUSH
20353: LD_VAR 0 7
20357: PUSH
20358: LD_VAR 0 5
20362: PUSH
20363: LD_INT 1
20365: MINUS
20366: ARRAY
20367: PPUSH
20368: LD_VAR 0 2
20372: PUSH
20373: LD_VAR 0 5
20377: PUSH
20378: LD_INT 1
20380: MINUS
20381: ARRAY
20382: PPUSH
20383: LD_VAR 0 7
20387: PUSH
20388: LD_VAR 0 5
20392: ARRAY
20393: PPUSH
20394: CALL_OW 1
20398: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20399: LD_ADDR_VAR 0 7
20403: PUSH
20404: LD_VAR 0 7
20408: PPUSH
20409: LD_VAR 0 5
20413: PUSH
20414: LD_INT 1
20416: MINUS
20417: PPUSH
20418: LD_VAR 0 6
20422: PPUSH
20423: CALL_OW 1
20427: ST_TO_ADDR
// end ;
20428: GO 20345
20430: POP
20431: POP
// result := s_arr [ 1 ] ;
20432: LD_ADDR_VAR 0 4
20436: PUSH
20437: LD_VAR 0 7
20441: PUSH
20442: LD_INT 1
20444: ARRAY
20445: ST_TO_ADDR
// end ; end ;
20446: LD_VAR 0 4
20450: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20451: LD_INT 0
20453: PPUSH
20454: PPUSH
// if not list then
20455: LD_VAR 0 1
20459: NOT
20460: IFFALSE 20464
// exit ;
20462: GO 20555
// i := list [ pos1 ] ;
20464: LD_ADDR_VAR 0 5
20468: PUSH
20469: LD_VAR 0 1
20473: PUSH
20474: LD_VAR 0 2
20478: ARRAY
20479: ST_TO_ADDR
// if not i then
20480: LD_VAR 0 5
20484: NOT
20485: IFFALSE 20489
// exit ;
20487: GO 20555
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20489: LD_ADDR_VAR 0 1
20493: PUSH
20494: LD_VAR 0 1
20498: PPUSH
20499: LD_VAR 0 2
20503: PPUSH
20504: LD_VAR 0 1
20508: PUSH
20509: LD_VAR 0 3
20513: ARRAY
20514: PPUSH
20515: CALL_OW 1
20519: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20520: LD_ADDR_VAR 0 1
20524: PUSH
20525: LD_VAR 0 1
20529: PPUSH
20530: LD_VAR 0 3
20534: PPUSH
20535: LD_VAR 0 5
20539: PPUSH
20540: CALL_OW 1
20544: ST_TO_ADDR
// result := list ;
20545: LD_ADDR_VAR 0 4
20549: PUSH
20550: LD_VAR 0 1
20554: ST_TO_ADDR
// end ;
20555: LD_VAR 0 4
20559: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20560: LD_INT 0
20562: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20563: LD_ADDR_VAR 0 5
20567: PUSH
20568: LD_VAR 0 1
20572: PPUSH
20573: CALL_OW 250
20577: PPUSH
20578: LD_VAR 0 1
20582: PPUSH
20583: CALL_OW 251
20587: PPUSH
20588: LD_VAR 0 2
20592: PPUSH
20593: LD_VAR 0 3
20597: PPUSH
20598: LD_VAR 0 4
20602: PPUSH
20603: CALL 20981 0 5
20607: ST_TO_ADDR
// end ;
20608: LD_VAR 0 5
20612: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
20613: LD_INT 0
20615: PPUSH
20616: PPUSH
20617: PPUSH
20618: PPUSH
// if not list or not unit then
20619: LD_VAR 0 2
20623: NOT
20624: PUSH
20625: LD_VAR 0 1
20629: NOT
20630: OR
20631: IFFALSE 20635
// exit ;
20633: GO 20976
// result := [ ] ;
20635: LD_ADDR_VAR 0 5
20639: PUSH
20640: EMPTY
20641: ST_TO_ADDR
// for i in list do
20642: LD_ADDR_VAR 0 6
20646: PUSH
20647: LD_VAR 0 2
20651: PUSH
20652: FOR_IN
20653: IFFALSE 20871
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
20655: LD_ADDR_VAR 0 8
20659: PUSH
20660: LD_VAR 0 1
20664: PPUSH
20665: LD_VAR 0 6
20669: PUSH
20670: LD_INT 1
20672: ARRAY
20673: PPUSH
20674: LD_VAR 0 6
20678: PUSH
20679: LD_INT 2
20681: ARRAY
20682: PPUSH
20683: CALL_OW 297
20687: ST_TO_ADDR
// if not Count ( result ) then
20688: LD_VAR 0 5
20692: PPUSH
20693: CALL 17265 0 1
20697: NOT
20698: IFFALSE 20731
// begin result := Join ( result , [ i , tmp ] ) ;
20700: LD_ADDR_VAR 0 5
20704: PUSH
20705: LD_VAR 0 5
20709: PPUSH
20710: LD_VAR 0 6
20714: PUSH
20715: LD_VAR 0 8
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PPUSH
20724: CALL 52854 0 2
20728: ST_TO_ADDR
// continue ;
20729: GO 20652
// end ; if result [ result ] [ 2 ] <= tmp then
20731: LD_VAR 0 5
20735: PUSH
20736: LD_VAR 0 5
20740: ARRAY
20741: PUSH
20742: LD_INT 2
20744: ARRAY
20745: PUSH
20746: LD_VAR 0 8
20750: LESSEQUAL
20751: IFFALSE 20784
// result := Join ( result , [ i , tmp ] ) else
20753: LD_ADDR_VAR 0 5
20757: PUSH
20758: LD_VAR 0 5
20762: PPUSH
20763: LD_VAR 0 6
20767: PUSH
20768: LD_VAR 0 8
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PPUSH
20777: CALL 52854 0 2
20781: ST_TO_ADDR
20782: GO 20869
// begin for j := 1 to Count ( result ) do
20784: LD_ADDR_VAR 0 7
20788: PUSH
20789: DOUBLE
20790: LD_INT 1
20792: DEC
20793: ST_TO_ADDR
20794: LD_VAR 0 5
20798: PPUSH
20799: CALL 17265 0 1
20803: PUSH
20804: FOR_TO
20805: IFFALSE 20867
// begin if tmp < result [ j ] [ 2 ] then
20807: LD_VAR 0 8
20811: PUSH
20812: LD_VAR 0 5
20816: PUSH
20817: LD_VAR 0 7
20821: ARRAY
20822: PUSH
20823: LD_INT 2
20825: ARRAY
20826: LESS
20827: IFFALSE 20865
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20829: LD_ADDR_VAR 0 5
20833: PUSH
20834: LD_VAR 0 5
20838: PPUSH
20839: LD_VAR 0 7
20843: PPUSH
20844: LD_VAR 0 6
20848: PUSH
20849: LD_VAR 0 8
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PPUSH
20858: CALL_OW 2
20862: ST_TO_ADDR
// break ;
20863: GO 20867
// end ; end ;
20865: GO 20804
20867: POP
20868: POP
// end ; end ;
20869: GO 20652
20871: POP
20872: POP
// if result and not asc then
20873: LD_VAR 0 5
20877: PUSH
20878: LD_VAR 0 3
20882: NOT
20883: AND
20884: IFFALSE 20901
// result := ReverseArray ( result ) ;
20886: LD_ADDR_VAR 0 5
20890: PUSH
20891: LD_VAR 0 5
20895: PPUSH
20896: CALL 48141 0 1
20900: ST_TO_ADDR
// tmp := [ ] ;
20901: LD_ADDR_VAR 0 8
20905: PUSH
20906: EMPTY
20907: ST_TO_ADDR
// if mode then
20908: LD_VAR 0 4
20912: IFFALSE 20976
// begin for i := 1 to result do
20914: LD_ADDR_VAR 0 6
20918: PUSH
20919: DOUBLE
20920: LD_INT 1
20922: DEC
20923: ST_TO_ADDR
20924: LD_VAR 0 5
20928: PUSH
20929: FOR_TO
20930: IFFALSE 20964
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
20932: LD_ADDR_VAR 0 8
20936: PUSH
20937: LD_VAR 0 8
20941: PPUSH
20942: LD_VAR 0 5
20946: PUSH
20947: LD_VAR 0 6
20951: ARRAY
20952: PUSH
20953: LD_INT 1
20955: ARRAY
20956: PPUSH
20957: CALL 52854 0 2
20961: ST_TO_ADDR
20962: GO 20929
20964: POP
20965: POP
// result := tmp ;
20966: LD_ADDR_VAR 0 5
20970: PUSH
20971: LD_VAR 0 8
20975: ST_TO_ADDR
// end ; end ;
20976: LD_VAR 0 5
20980: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20981: LD_INT 0
20983: PPUSH
20984: PPUSH
20985: PPUSH
20986: PPUSH
// if not list then
20987: LD_VAR 0 3
20991: NOT
20992: IFFALSE 20996
// exit ;
20994: GO 21384
// result := [ ] ;
20996: LD_ADDR_VAR 0 6
21000: PUSH
21001: EMPTY
21002: ST_TO_ADDR
// for i in list do
21003: LD_ADDR_VAR 0 7
21007: PUSH
21008: LD_VAR 0 3
21012: PUSH
21013: FOR_IN
21014: IFFALSE 21216
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21016: LD_ADDR_VAR 0 9
21020: PUSH
21021: LD_VAR 0 7
21025: PPUSH
21026: LD_VAR 0 1
21030: PPUSH
21031: LD_VAR 0 2
21035: PPUSH
21036: CALL_OW 297
21040: ST_TO_ADDR
// if not result then
21041: LD_VAR 0 6
21045: NOT
21046: IFFALSE 21072
// result := [ [ i , tmp ] ] else
21048: LD_ADDR_VAR 0 6
21052: PUSH
21053: LD_VAR 0 7
21057: PUSH
21058: LD_VAR 0 9
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: EMPTY
21068: LIST
21069: ST_TO_ADDR
21070: GO 21214
// begin if result [ result ] [ 2 ] < tmp then
21072: LD_VAR 0 6
21076: PUSH
21077: LD_VAR 0 6
21081: ARRAY
21082: PUSH
21083: LD_INT 2
21085: ARRAY
21086: PUSH
21087: LD_VAR 0 9
21091: LESS
21092: IFFALSE 21134
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21094: LD_ADDR_VAR 0 6
21098: PUSH
21099: LD_VAR 0 6
21103: PPUSH
21104: LD_VAR 0 6
21108: PUSH
21109: LD_INT 1
21111: PLUS
21112: PPUSH
21113: LD_VAR 0 7
21117: PUSH
21118: LD_VAR 0 9
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PPUSH
21127: CALL_OW 2
21131: ST_TO_ADDR
21132: GO 21214
// for j = 1 to result do
21134: LD_ADDR_VAR 0 8
21138: PUSH
21139: DOUBLE
21140: LD_INT 1
21142: DEC
21143: ST_TO_ADDR
21144: LD_VAR 0 6
21148: PUSH
21149: FOR_TO
21150: IFFALSE 21212
// begin if tmp < result [ j ] [ 2 ] then
21152: LD_VAR 0 9
21156: PUSH
21157: LD_VAR 0 6
21161: PUSH
21162: LD_VAR 0 8
21166: ARRAY
21167: PUSH
21168: LD_INT 2
21170: ARRAY
21171: LESS
21172: IFFALSE 21210
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21174: LD_ADDR_VAR 0 6
21178: PUSH
21179: LD_VAR 0 6
21183: PPUSH
21184: LD_VAR 0 8
21188: PPUSH
21189: LD_VAR 0 7
21193: PUSH
21194: LD_VAR 0 9
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PPUSH
21203: CALL_OW 2
21207: ST_TO_ADDR
// break ;
21208: GO 21212
// end ; end ;
21210: GO 21149
21212: POP
21213: POP
// end ; end ;
21214: GO 21013
21216: POP
21217: POP
// if result and not asc then
21218: LD_VAR 0 6
21222: PUSH
21223: LD_VAR 0 4
21227: NOT
21228: AND
21229: IFFALSE 21304
// begin tmp := result ;
21231: LD_ADDR_VAR 0 9
21235: PUSH
21236: LD_VAR 0 6
21240: ST_TO_ADDR
// for i = tmp downto 1 do
21241: LD_ADDR_VAR 0 7
21245: PUSH
21246: DOUBLE
21247: LD_VAR 0 9
21251: INC
21252: ST_TO_ADDR
21253: LD_INT 1
21255: PUSH
21256: FOR_DOWNTO
21257: IFFALSE 21302
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21259: LD_ADDR_VAR 0 6
21263: PUSH
21264: LD_VAR 0 6
21268: PPUSH
21269: LD_VAR 0 9
21273: PUSH
21274: LD_VAR 0 7
21278: MINUS
21279: PUSH
21280: LD_INT 1
21282: PLUS
21283: PPUSH
21284: LD_VAR 0 9
21288: PUSH
21289: LD_VAR 0 7
21293: ARRAY
21294: PPUSH
21295: CALL_OW 1
21299: ST_TO_ADDR
21300: GO 21256
21302: POP
21303: POP
// end ; tmp := [ ] ;
21304: LD_ADDR_VAR 0 9
21308: PUSH
21309: EMPTY
21310: ST_TO_ADDR
// if mode then
21311: LD_VAR 0 5
21315: IFFALSE 21384
// begin for i = 1 to result do
21317: LD_ADDR_VAR 0 7
21321: PUSH
21322: DOUBLE
21323: LD_INT 1
21325: DEC
21326: ST_TO_ADDR
21327: LD_VAR 0 6
21331: PUSH
21332: FOR_TO
21333: IFFALSE 21372
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21335: LD_ADDR_VAR 0 9
21339: PUSH
21340: LD_VAR 0 9
21344: PPUSH
21345: LD_VAR 0 7
21349: PPUSH
21350: LD_VAR 0 6
21354: PUSH
21355: LD_VAR 0 7
21359: ARRAY
21360: PUSH
21361: LD_INT 1
21363: ARRAY
21364: PPUSH
21365: CALL_OW 1
21369: ST_TO_ADDR
21370: GO 21332
21372: POP
21373: POP
// result := tmp ;
21374: LD_ADDR_VAR 0 6
21378: PUSH
21379: LD_VAR 0 9
21383: ST_TO_ADDR
// end ; end ;
21384: LD_VAR 0 6
21388: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21389: LD_INT 0
21391: PPUSH
21392: PPUSH
21393: PPUSH
21394: PPUSH
21395: PPUSH
21396: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21397: LD_ADDR_VAR 0 5
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: LD_INT 0
21410: PUSH
21411: EMPTY
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: ST_TO_ADDR
// if not x or not y then
21419: LD_VAR 0 2
21423: NOT
21424: PUSH
21425: LD_VAR 0 3
21429: NOT
21430: OR
21431: IFFALSE 21435
// exit ;
21433: GO 23085
// if not range then
21435: LD_VAR 0 4
21439: NOT
21440: IFFALSE 21450
// range := 10 ;
21442: LD_ADDR_VAR 0 4
21446: PUSH
21447: LD_INT 10
21449: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21450: LD_ADDR_VAR 0 8
21454: PUSH
21455: LD_INT 81
21457: PUSH
21458: LD_VAR 0 1
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 92
21469: PUSH
21470: LD_VAR 0 2
21474: PUSH
21475: LD_VAR 0 3
21479: PUSH
21480: LD_VAR 0 4
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 3
21493: PUSH
21494: LD_INT 21
21496: PUSH
21497: LD_INT 3
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: LIST
21512: PPUSH
21513: CALL_OW 69
21517: ST_TO_ADDR
// if not tmp then
21518: LD_VAR 0 8
21522: NOT
21523: IFFALSE 21527
// exit ;
21525: GO 23085
// for i in tmp do
21527: LD_ADDR_VAR 0 6
21531: PUSH
21532: LD_VAR 0 8
21536: PUSH
21537: FOR_IN
21538: IFFALSE 23060
// begin points := [ 0 , 0 , 0 ] ;
21540: LD_ADDR_VAR 0 9
21544: PUSH
21545: LD_INT 0
21547: PUSH
21548: LD_INT 0
21550: PUSH
21551: LD_INT 0
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: LIST
21558: ST_TO_ADDR
// bpoints := 1 ;
21559: LD_ADDR_VAR 0 10
21563: PUSH
21564: LD_INT 1
21566: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21567: LD_VAR 0 6
21571: PPUSH
21572: CALL_OW 247
21576: PUSH
21577: LD_INT 1
21579: DOUBLE
21580: EQUAL
21581: IFTRUE 21585
21583: GO 22163
21585: POP
// begin if GetClass ( i ) = 1 then
21586: LD_VAR 0 6
21590: PPUSH
21591: CALL_OW 257
21595: PUSH
21596: LD_INT 1
21598: EQUAL
21599: IFFALSE 21620
// points := [ 10 , 5 , 3 ] ;
21601: LD_ADDR_VAR 0 9
21605: PUSH
21606: LD_INT 10
21608: PUSH
21609: LD_INT 5
21611: PUSH
21612: LD_INT 3
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: LIST
21619: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21620: LD_VAR 0 6
21624: PPUSH
21625: CALL_OW 257
21629: PUSH
21630: LD_INT 2
21632: PUSH
21633: LD_INT 3
21635: PUSH
21636: LD_INT 4
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: LIST
21643: IN
21644: IFFALSE 21665
// points := [ 3 , 2 , 1 ] ;
21646: LD_ADDR_VAR 0 9
21650: PUSH
21651: LD_INT 3
21653: PUSH
21654: LD_INT 2
21656: PUSH
21657: LD_INT 1
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: LIST
21664: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21665: LD_VAR 0 6
21669: PPUSH
21670: CALL_OW 257
21674: PUSH
21675: LD_INT 5
21677: EQUAL
21678: IFFALSE 21699
// points := [ 130 , 5 , 2 ] ;
21680: LD_ADDR_VAR 0 9
21684: PUSH
21685: LD_INT 130
21687: PUSH
21688: LD_INT 5
21690: PUSH
21691: LD_INT 2
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: LIST
21698: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21699: LD_VAR 0 6
21703: PPUSH
21704: CALL_OW 257
21708: PUSH
21709: LD_INT 8
21711: EQUAL
21712: IFFALSE 21733
// points := [ 35 , 35 , 30 ] ;
21714: LD_ADDR_VAR 0 9
21718: PUSH
21719: LD_INT 35
21721: PUSH
21722: LD_INT 35
21724: PUSH
21725: LD_INT 30
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: LIST
21732: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21733: LD_VAR 0 6
21737: PPUSH
21738: CALL_OW 257
21742: PUSH
21743: LD_INT 9
21745: EQUAL
21746: IFFALSE 21767
// points := [ 20 , 55 , 40 ] ;
21748: LD_ADDR_VAR 0 9
21752: PUSH
21753: LD_INT 20
21755: PUSH
21756: LD_INT 55
21758: PUSH
21759: LD_INT 40
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: LIST
21766: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21767: LD_VAR 0 6
21771: PPUSH
21772: CALL_OW 257
21776: PUSH
21777: LD_INT 12
21779: PUSH
21780: LD_INT 16
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: IN
21787: IFFALSE 21808
// points := [ 5 , 3 , 2 ] ;
21789: LD_ADDR_VAR 0 9
21793: PUSH
21794: LD_INT 5
21796: PUSH
21797: LD_INT 3
21799: PUSH
21800: LD_INT 2
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: LIST
21807: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21808: LD_VAR 0 6
21812: PPUSH
21813: CALL_OW 257
21817: PUSH
21818: LD_INT 17
21820: EQUAL
21821: IFFALSE 21842
// points := [ 100 , 50 , 75 ] ;
21823: LD_ADDR_VAR 0 9
21827: PUSH
21828: LD_INT 100
21830: PUSH
21831: LD_INT 50
21833: PUSH
21834: LD_INT 75
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: LIST
21841: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21842: LD_VAR 0 6
21846: PPUSH
21847: CALL_OW 257
21851: PUSH
21852: LD_INT 15
21854: EQUAL
21855: IFFALSE 21876
// points := [ 10 , 5 , 3 ] ;
21857: LD_ADDR_VAR 0 9
21861: PUSH
21862: LD_INT 10
21864: PUSH
21865: LD_INT 5
21867: PUSH
21868: LD_INT 3
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: LIST
21875: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21876: LD_VAR 0 6
21880: PPUSH
21881: CALL_OW 257
21885: PUSH
21886: LD_INT 14
21888: EQUAL
21889: IFFALSE 21910
// points := [ 10 , 0 , 0 ] ;
21891: LD_ADDR_VAR 0 9
21895: PUSH
21896: LD_INT 10
21898: PUSH
21899: LD_INT 0
21901: PUSH
21902: LD_INT 0
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: LIST
21909: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21910: LD_VAR 0 6
21914: PPUSH
21915: CALL_OW 257
21919: PUSH
21920: LD_INT 11
21922: EQUAL
21923: IFFALSE 21944
// points := [ 30 , 10 , 5 ] ;
21925: LD_ADDR_VAR 0 9
21929: PUSH
21930: LD_INT 30
21932: PUSH
21933: LD_INT 10
21935: PUSH
21936: LD_INT 5
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: LIST
21943: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21944: LD_VAR 0 1
21948: PPUSH
21949: LD_INT 5
21951: PPUSH
21952: CALL_OW 321
21956: PUSH
21957: LD_INT 2
21959: EQUAL
21960: IFFALSE 21977
// bpoints := bpoints * 1.8 ;
21962: LD_ADDR_VAR 0 10
21966: PUSH
21967: LD_VAR 0 10
21971: PUSH
21972: LD_REAL  1.80000000000000E+0000
21975: MUL
21976: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21977: LD_VAR 0 6
21981: PPUSH
21982: CALL_OW 257
21986: PUSH
21987: LD_INT 1
21989: PUSH
21990: LD_INT 2
21992: PUSH
21993: LD_INT 3
21995: PUSH
21996: LD_INT 4
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: IN
22005: PUSH
22006: LD_VAR 0 1
22010: PPUSH
22011: LD_INT 51
22013: PPUSH
22014: CALL_OW 321
22018: PUSH
22019: LD_INT 2
22021: EQUAL
22022: AND
22023: IFFALSE 22040
// bpoints := bpoints * 1.2 ;
22025: LD_ADDR_VAR 0 10
22029: PUSH
22030: LD_VAR 0 10
22034: PUSH
22035: LD_REAL  1.20000000000000E+0000
22038: MUL
22039: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22040: LD_VAR 0 6
22044: PPUSH
22045: CALL_OW 257
22049: PUSH
22050: LD_INT 5
22052: PUSH
22053: LD_INT 7
22055: PUSH
22056: LD_INT 9
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: LIST
22063: IN
22064: PUSH
22065: LD_VAR 0 1
22069: PPUSH
22070: LD_INT 52
22072: PPUSH
22073: CALL_OW 321
22077: PUSH
22078: LD_INT 2
22080: EQUAL
22081: AND
22082: IFFALSE 22099
// bpoints := bpoints * 1.5 ;
22084: LD_ADDR_VAR 0 10
22088: PUSH
22089: LD_VAR 0 10
22093: PUSH
22094: LD_REAL  1.50000000000000E+0000
22097: MUL
22098: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22099: LD_VAR 0 1
22103: PPUSH
22104: LD_INT 66
22106: PPUSH
22107: CALL_OW 321
22111: PUSH
22112: LD_INT 2
22114: EQUAL
22115: IFFALSE 22132
// bpoints := bpoints * 1.1 ;
22117: LD_ADDR_VAR 0 10
22121: PUSH
22122: LD_VAR 0 10
22126: PUSH
22127: LD_REAL  1.10000000000000E+0000
22130: MUL
22131: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22132: LD_ADDR_VAR 0 10
22136: PUSH
22137: LD_VAR 0 10
22141: PUSH
22142: LD_VAR 0 6
22146: PPUSH
22147: LD_INT 1
22149: PPUSH
22150: CALL_OW 259
22154: PUSH
22155: LD_REAL  1.15000000000000E+0000
22158: MUL
22159: MUL
22160: ST_TO_ADDR
// end ; unit_vehicle :
22161: GO 22989
22163: LD_INT 2
22165: DOUBLE
22166: EQUAL
22167: IFTRUE 22171
22169: GO 22977
22171: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22172: LD_VAR 0 6
22176: PPUSH
22177: CALL_OW 264
22181: PUSH
22182: LD_INT 2
22184: PUSH
22185: LD_INT 42
22187: PUSH
22188: LD_INT 24
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: LIST
22195: IN
22196: IFFALSE 22217
// points := [ 25 , 5 , 3 ] ;
22198: LD_ADDR_VAR 0 9
22202: PUSH
22203: LD_INT 25
22205: PUSH
22206: LD_INT 5
22208: PUSH
22209: LD_INT 3
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: LIST
22216: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22217: LD_VAR 0 6
22221: PPUSH
22222: CALL_OW 264
22226: PUSH
22227: LD_INT 4
22229: PUSH
22230: LD_INT 43
22232: PUSH
22233: LD_INT 25
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: LIST
22240: IN
22241: IFFALSE 22262
// points := [ 40 , 15 , 5 ] ;
22243: LD_ADDR_VAR 0 9
22247: PUSH
22248: LD_INT 40
22250: PUSH
22251: LD_INT 15
22253: PUSH
22254: LD_INT 5
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: LIST
22261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22262: LD_VAR 0 6
22266: PPUSH
22267: CALL_OW 264
22271: PUSH
22272: LD_INT 3
22274: PUSH
22275: LD_INT 23
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: IN
22282: IFFALSE 22303
// points := [ 7 , 25 , 8 ] ;
22284: LD_ADDR_VAR 0 9
22288: PUSH
22289: LD_INT 7
22291: PUSH
22292: LD_INT 25
22294: PUSH
22295: LD_INT 8
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: LIST
22302: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22303: LD_VAR 0 6
22307: PPUSH
22308: CALL_OW 264
22312: PUSH
22313: LD_INT 5
22315: PUSH
22316: LD_INT 27
22318: PUSH
22319: LD_INT 44
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: IN
22327: IFFALSE 22348
// points := [ 14 , 50 , 16 ] ;
22329: LD_ADDR_VAR 0 9
22333: PUSH
22334: LD_INT 14
22336: PUSH
22337: LD_INT 50
22339: PUSH
22340: LD_INT 16
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: LIST
22347: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22348: LD_VAR 0 6
22352: PPUSH
22353: CALL_OW 264
22357: PUSH
22358: LD_INT 6
22360: PUSH
22361: LD_INT 46
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: IN
22368: IFFALSE 22389
// points := [ 32 , 120 , 70 ] ;
22370: LD_ADDR_VAR 0 9
22374: PUSH
22375: LD_INT 32
22377: PUSH
22378: LD_INT 120
22380: PUSH
22381: LD_INT 70
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22389: LD_VAR 0 6
22393: PPUSH
22394: CALL_OW 264
22398: PUSH
22399: LD_INT 7
22401: PUSH
22402: LD_INT 28
22404: PUSH
22405: LD_INT 45
22407: PUSH
22408: LD_INT 92
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: IN
22417: IFFALSE 22438
// points := [ 35 , 20 , 45 ] ;
22419: LD_ADDR_VAR 0 9
22423: PUSH
22424: LD_INT 35
22426: PUSH
22427: LD_INT 20
22429: PUSH
22430: LD_INT 45
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: LIST
22437: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22438: LD_VAR 0 6
22442: PPUSH
22443: CALL_OW 264
22447: PUSH
22448: LD_INT 47
22450: PUSH
22451: EMPTY
22452: LIST
22453: IN
22454: IFFALSE 22475
// points := [ 67 , 45 , 75 ] ;
22456: LD_ADDR_VAR 0 9
22460: PUSH
22461: LD_INT 67
22463: PUSH
22464: LD_INT 45
22466: PUSH
22467: LD_INT 75
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: LIST
22474: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22475: LD_VAR 0 6
22479: PPUSH
22480: CALL_OW 264
22484: PUSH
22485: LD_INT 26
22487: PUSH
22488: EMPTY
22489: LIST
22490: IN
22491: IFFALSE 22512
// points := [ 120 , 30 , 80 ] ;
22493: LD_ADDR_VAR 0 9
22497: PUSH
22498: LD_INT 120
22500: PUSH
22501: LD_INT 30
22503: PUSH
22504: LD_INT 80
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: LIST
22511: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22512: LD_VAR 0 6
22516: PPUSH
22517: CALL_OW 264
22521: PUSH
22522: LD_INT 22
22524: PUSH
22525: EMPTY
22526: LIST
22527: IN
22528: IFFALSE 22549
// points := [ 40 , 1 , 1 ] ;
22530: LD_ADDR_VAR 0 9
22534: PUSH
22535: LD_INT 40
22537: PUSH
22538: LD_INT 1
22540: PUSH
22541: LD_INT 1
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: LIST
22548: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22549: LD_VAR 0 6
22553: PPUSH
22554: CALL_OW 264
22558: PUSH
22559: LD_INT 29
22561: PUSH
22562: EMPTY
22563: LIST
22564: IN
22565: IFFALSE 22586
// points := [ 70 , 200 , 400 ] ;
22567: LD_ADDR_VAR 0 9
22571: PUSH
22572: LD_INT 70
22574: PUSH
22575: LD_INT 200
22577: PUSH
22578: LD_INT 400
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: LIST
22585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22586: LD_VAR 0 6
22590: PPUSH
22591: CALL_OW 264
22595: PUSH
22596: LD_INT 14
22598: PUSH
22599: LD_INT 53
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: IN
22606: IFFALSE 22627
// points := [ 40 , 10 , 20 ] ;
22608: LD_ADDR_VAR 0 9
22612: PUSH
22613: LD_INT 40
22615: PUSH
22616: LD_INT 10
22618: PUSH
22619: LD_INT 20
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: LIST
22626: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22627: LD_VAR 0 6
22631: PPUSH
22632: CALL_OW 264
22636: PUSH
22637: LD_INT 9
22639: PUSH
22640: EMPTY
22641: LIST
22642: IN
22643: IFFALSE 22664
// points := [ 5 , 70 , 20 ] ;
22645: LD_ADDR_VAR 0 9
22649: PUSH
22650: LD_INT 5
22652: PUSH
22653: LD_INT 70
22655: PUSH
22656: LD_INT 20
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: LIST
22663: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22664: LD_VAR 0 6
22668: PPUSH
22669: CALL_OW 264
22673: PUSH
22674: LD_INT 10
22676: PUSH
22677: EMPTY
22678: LIST
22679: IN
22680: IFFALSE 22701
// points := [ 35 , 110 , 70 ] ;
22682: LD_ADDR_VAR 0 9
22686: PUSH
22687: LD_INT 35
22689: PUSH
22690: LD_INT 110
22692: PUSH
22693: LD_INT 70
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: LIST
22700: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22701: LD_VAR 0 6
22705: PPUSH
22706: CALL_OW 265
22710: PUSH
22711: LD_INT 25
22713: EQUAL
22714: IFFALSE 22735
// points := [ 80 , 65 , 100 ] ;
22716: LD_ADDR_VAR 0 9
22720: PUSH
22721: LD_INT 80
22723: PUSH
22724: LD_INT 65
22726: PUSH
22727: LD_INT 100
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22735: LD_VAR 0 6
22739: PPUSH
22740: CALL_OW 263
22744: PUSH
22745: LD_INT 1
22747: EQUAL
22748: IFFALSE 22783
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22750: LD_ADDR_VAR 0 10
22754: PUSH
22755: LD_VAR 0 10
22759: PUSH
22760: LD_VAR 0 6
22764: PPUSH
22765: CALL_OW 311
22769: PPUSH
22770: LD_INT 3
22772: PPUSH
22773: CALL_OW 259
22777: PUSH
22778: LD_INT 4
22780: MUL
22781: MUL
22782: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22783: LD_VAR 0 6
22787: PPUSH
22788: CALL_OW 263
22792: PUSH
22793: LD_INT 2
22795: EQUAL
22796: IFFALSE 22847
// begin j := IsControledBy ( i ) ;
22798: LD_ADDR_VAR 0 7
22802: PUSH
22803: LD_VAR 0 6
22807: PPUSH
22808: CALL_OW 312
22812: ST_TO_ADDR
// if j then
22813: LD_VAR 0 7
22817: IFFALSE 22847
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22819: LD_ADDR_VAR 0 10
22823: PUSH
22824: LD_VAR 0 10
22828: PUSH
22829: LD_VAR 0 7
22833: PPUSH
22834: LD_INT 3
22836: PPUSH
22837: CALL_OW 259
22841: PUSH
22842: LD_INT 3
22844: MUL
22845: MUL
22846: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22847: LD_VAR 0 6
22851: PPUSH
22852: CALL_OW 264
22856: PUSH
22857: LD_INT 5
22859: PUSH
22860: LD_INT 6
22862: PUSH
22863: LD_INT 46
22865: PUSH
22866: LD_INT 44
22868: PUSH
22869: LD_INT 47
22871: PUSH
22872: LD_INT 45
22874: PUSH
22875: LD_INT 28
22877: PUSH
22878: LD_INT 7
22880: PUSH
22881: LD_INT 27
22883: PUSH
22884: LD_INT 29
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: IN
22899: PUSH
22900: LD_VAR 0 1
22904: PPUSH
22905: LD_INT 52
22907: PPUSH
22908: CALL_OW 321
22912: PUSH
22913: LD_INT 2
22915: EQUAL
22916: AND
22917: IFFALSE 22934
// bpoints := bpoints * 1.2 ;
22919: LD_ADDR_VAR 0 10
22923: PUSH
22924: LD_VAR 0 10
22928: PUSH
22929: LD_REAL  1.20000000000000E+0000
22932: MUL
22933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22934: LD_VAR 0 6
22938: PPUSH
22939: CALL_OW 264
22943: PUSH
22944: LD_INT 6
22946: PUSH
22947: LD_INT 46
22949: PUSH
22950: LD_INT 47
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: LIST
22957: IN
22958: IFFALSE 22975
// bpoints := bpoints * 1.2 ;
22960: LD_ADDR_VAR 0 10
22964: PUSH
22965: LD_VAR 0 10
22969: PUSH
22970: LD_REAL  1.20000000000000E+0000
22973: MUL
22974: ST_TO_ADDR
// end ; unit_building :
22975: GO 22989
22977: LD_INT 3
22979: DOUBLE
22980: EQUAL
22981: IFTRUE 22985
22983: GO 22988
22985: POP
// ; end ;
22986: GO 22989
22988: POP
// for j = 1 to 3 do
22989: LD_ADDR_VAR 0 7
22993: PUSH
22994: DOUBLE
22995: LD_INT 1
22997: DEC
22998: ST_TO_ADDR
22999: LD_INT 3
23001: PUSH
23002: FOR_TO
23003: IFFALSE 23056
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23005: LD_ADDR_VAR 0 5
23009: PUSH
23010: LD_VAR 0 5
23014: PPUSH
23015: LD_VAR 0 7
23019: PPUSH
23020: LD_VAR 0 5
23024: PUSH
23025: LD_VAR 0 7
23029: ARRAY
23030: PUSH
23031: LD_VAR 0 9
23035: PUSH
23036: LD_VAR 0 7
23040: ARRAY
23041: PUSH
23042: LD_VAR 0 10
23046: MUL
23047: PLUS
23048: PPUSH
23049: CALL_OW 1
23053: ST_TO_ADDR
23054: GO 23002
23056: POP
23057: POP
// end ;
23058: GO 21537
23060: POP
23061: POP
// result := Replace ( result , 4 , tmp ) ;
23062: LD_ADDR_VAR 0 5
23066: PUSH
23067: LD_VAR 0 5
23071: PPUSH
23072: LD_INT 4
23074: PPUSH
23075: LD_VAR 0 8
23079: PPUSH
23080: CALL_OW 1
23084: ST_TO_ADDR
// end ;
23085: LD_VAR 0 5
23089: RET
// export function DangerAtRange ( unit , range ) ; begin
23090: LD_INT 0
23092: PPUSH
// if not unit then
23093: LD_VAR 0 1
23097: NOT
23098: IFFALSE 23102
// exit ;
23100: GO 23147
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23102: LD_ADDR_VAR 0 3
23106: PUSH
23107: LD_VAR 0 1
23111: PPUSH
23112: CALL_OW 255
23116: PPUSH
23117: LD_VAR 0 1
23121: PPUSH
23122: CALL_OW 250
23126: PPUSH
23127: LD_VAR 0 1
23131: PPUSH
23132: CALL_OW 251
23136: PPUSH
23137: LD_VAR 0 2
23141: PPUSH
23142: CALL 21389 0 4
23146: ST_TO_ADDR
// end ;
23147: LD_VAR 0 3
23151: RET
// export function DangerInArea ( side , area ) ; begin
23152: LD_INT 0
23154: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23155: LD_ADDR_VAR 0 3
23159: PUSH
23160: LD_VAR 0 2
23164: PPUSH
23165: LD_INT 81
23167: PUSH
23168: LD_VAR 0 1
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PPUSH
23177: CALL_OW 70
23181: ST_TO_ADDR
// end ;
23182: LD_VAR 0 3
23186: RET
// export function IsExtension ( b ) ; begin
23187: LD_INT 0
23189: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23190: LD_ADDR_VAR 0 2
23194: PUSH
23195: LD_VAR 0 1
23199: PUSH
23200: LD_INT 23
23202: PUSH
23203: LD_INT 20
23205: PUSH
23206: LD_INT 22
23208: PUSH
23209: LD_INT 17
23211: PUSH
23212: LD_INT 24
23214: PUSH
23215: LD_INT 21
23217: PUSH
23218: LD_INT 19
23220: PUSH
23221: LD_INT 16
23223: PUSH
23224: LD_INT 25
23226: PUSH
23227: LD_INT 18
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: IN
23242: ST_TO_ADDR
// end ;
23243: LD_VAR 0 2
23247: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23248: LD_INT 0
23250: PPUSH
23251: PPUSH
23252: PPUSH
// result := [ ] ;
23253: LD_ADDR_VAR 0 4
23257: PUSH
23258: EMPTY
23259: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23260: LD_ADDR_VAR 0 5
23264: PUSH
23265: LD_VAR 0 2
23269: PPUSH
23270: LD_INT 21
23272: PUSH
23273: LD_INT 3
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PPUSH
23280: CALL_OW 70
23284: ST_TO_ADDR
// if not tmp then
23285: LD_VAR 0 5
23289: NOT
23290: IFFALSE 23294
// exit ;
23292: GO 23358
// if checkLink then
23294: LD_VAR 0 3
23298: IFFALSE 23348
// begin for i in tmp do
23300: LD_ADDR_VAR 0 6
23304: PUSH
23305: LD_VAR 0 5
23309: PUSH
23310: FOR_IN
23311: IFFALSE 23346
// if GetBase ( i ) <> base then
23313: LD_VAR 0 6
23317: PPUSH
23318: CALL_OW 274
23322: PUSH
23323: LD_VAR 0 1
23327: NONEQUAL
23328: IFFALSE 23344
// ComLinkToBase ( base , i ) ;
23330: LD_VAR 0 1
23334: PPUSH
23335: LD_VAR 0 6
23339: PPUSH
23340: CALL_OW 169
23344: GO 23310
23346: POP
23347: POP
// end ; result := tmp ;
23348: LD_ADDR_VAR 0 4
23352: PUSH
23353: LD_VAR 0 5
23357: ST_TO_ADDR
// end ;
23358: LD_VAR 0 4
23362: RET
// export function ComComplete ( units , b ) ; var i ; begin
23363: LD_INT 0
23365: PPUSH
23366: PPUSH
// if not units then
23367: LD_VAR 0 1
23371: NOT
23372: IFFALSE 23376
// exit ;
23374: GO 23466
// for i in units do
23376: LD_ADDR_VAR 0 4
23380: PUSH
23381: LD_VAR 0 1
23385: PUSH
23386: FOR_IN
23387: IFFALSE 23464
// if BuildingStatus ( b ) = bs_build then
23389: LD_VAR 0 2
23393: PPUSH
23394: CALL_OW 461
23398: PUSH
23399: LD_INT 1
23401: EQUAL
23402: IFFALSE 23462
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23404: LD_VAR 0 4
23408: PPUSH
23409: LD_STRING h
23411: PUSH
23412: LD_VAR 0 2
23416: PPUSH
23417: CALL_OW 250
23421: PUSH
23422: LD_VAR 0 2
23426: PPUSH
23427: CALL_OW 251
23431: PUSH
23432: LD_VAR 0 2
23436: PUSH
23437: LD_INT 0
23439: PUSH
23440: LD_INT 0
23442: PUSH
23443: LD_INT 0
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: PUSH
23455: EMPTY
23456: LIST
23457: PPUSH
23458: CALL_OW 446
23462: GO 23386
23464: POP
23465: POP
// end ;
23466: LD_VAR 0 3
23470: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23471: LD_INT 0
23473: PPUSH
23474: PPUSH
23475: PPUSH
23476: PPUSH
23477: PPUSH
23478: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23479: LD_VAR 0 1
23483: NOT
23484: PUSH
23485: LD_VAR 0 1
23489: PPUSH
23490: CALL_OW 263
23494: PUSH
23495: LD_INT 2
23497: NONEQUAL
23498: OR
23499: IFFALSE 23503
// exit ;
23501: GO 23819
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23503: LD_ADDR_VAR 0 6
23507: PUSH
23508: LD_INT 22
23510: PUSH
23511: LD_VAR 0 1
23515: PPUSH
23516: CALL_OW 255
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 2
23527: PUSH
23528: LD_INT 30
23530: PUSH
23531: LD_INT 36
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 34
23540: PUSH
23541: LD_INT 31
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: LIST
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PPUSH
23557: CALL_OW 69
23561: ST_TO_ADDR
// if not tmp then
23562: LD_VAR 0 6
23566: NOT
23567: IFFALSE 23571
// exit ;
23569: GO 23819
// result := [ ] ;
23571: LD_ADDR_VAR 0 2
23575: PUSH
23576: EMPTY
23577: ST_TO_ADDR
// for i in tmp do
23578: LD_ADDR_VAR 0 3
23582: PUSH
23583: LD_VAR 0 6
23587: PUSH
23588: FOR_IN
23589: IFFALSE 23660
// begin t := UnitsInside ( i ) ;
23591: LD_ADDR_VAR 0 4
23595: PUSH
23596: LD_VAR 0 3
23600: PPUSH
23601: CALL_OW 313
23605: ST_TO_ADDR
// if t then
23606: LD_VAR 0 4
23610: IFFALSE 23658
// for j in t do
23612: LD_ADDR_VAR 0 7
23616: PUSH
23617: LD_VAR 0 4
23621: PUSH
23622: FOR_IN
23623: IFFALSE 23656
// result := Replace ( result , result + 1 , j ) ;
23625: LD_ADDR_VAR 0 2
23629: PUSH
23630: LD_VAR 0 2
23634: PPUSH
23635: LD_VAR 0 2
23639: PUSH
23640: LD_INT 1
23642: PLUS
23643: PPUSH
23644: LD_VAR 0 7
23648: PPUSH
23649: CALL_OW 1
23653: ST_TO_ADDR
23654: GO 23622
23656: POP
23657: POP
// end ;
23658: GO 23588
23660: POP
23661: POP
// if not result then
23662: LD_VAR 0 2
23666: NOT
23667: IFFALSE 23671
// exit ;
23669: GO 23819
// mech := result [ 1 ] ;
23671: LD_ADDR_VAR 0 5
23675: PUSH
23676: LD_VAR 0 2
23680: PUSH
23681: LD_INT 1
23683: ARRAY
23684: ST_TO_ADDR
// if result > 1 then
23685: LD_VAR 0 2
23689: PUSH
23690: LD_INT 1
23692: GREATER
23693: IFFALSE 23805
// begin for i = 2 to result do
23695: LD_ADDR_VAR 0 3
23699: PUSH
23700: DOUBLE
23701: LD_INT 2
23703: DEC
23704: ST_TO_ADDR
23705: LD_VAR 0 2
23709: PUSH
23710: FOR_TO
23711: IFFALSE 23803
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23713: LD_ADDR_VAR 0 4
23717: PUSH
23718: LD_VAR 0 2
23722: PUSH
23723: LD_VAR 0 3
23727: ARRAY
23728: PPUSH
23729: LD_INT 3
23731: PPUSH
23732: CALL_OW 259
23736: PUSH
23737: LD_VAR 0 2
23741: PUSH
23742: LD_VAR 0 3
23746: ARRAY
23747: PPUSH
23748: CALL_OW 432
23752: MINUS
23753: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23754: LD_VAR 0 4
23758: PUSH
23759: LD_VAR 0 5
23763: PPUSH
23764: LD_INT 3
23766: PPUSH
23767: CALL_OW 259
23771: PUSH
23772: LD_VAR 0 5
23776: PPUSH
23777: CALL_OW 432
23781: MINUS
23782: GREATEREQUAL
23783: IFFALSE 23801
// mech := result [ i ] ;
23785: LD_ADDR_VAR 0 5
23789: PUSH
23790: LD_VAR 0 2
23794: PUSH
23795: LD_VAR 0 3
23799: ARRAY
23800: ST_TO_ADDR
// end ;
23801: GO 23710
23803: POP
23804: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23805: LD_VAR 0 1
23809: PPUSH
23810: LD_VAR 0 5
23814: PPUSH
23815: CALL_OW 135
// end ;
23819: LD_VAR 0 2
23823: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23824: LD_INT 0
23826: PPUSH
23827: PPUSH
23828: PPUSH
23829: PPUSH
23830: PPUSH
23831: PPUSH
23832: PPUSH
23833: PPUSH
23834: PPUSH
23835: PPUSH
23836: PPUSH
23837: PPUSH
23838: PPUSH
// result := [ ] ;
23839: LD_ADDR_VAR 0 7
23843: PUSH
23844: EMPTY
23845: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23846: LD_VAR 0 1
23850: PPUSH
23851: CALL_OW 266
23855: PUSH
23856: LD_INT 0
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: IN
23866: NOT
23867: IFFALSE 23871
// exit ;
23869: GO 25505
// if name then
23871: LD_VAR 0 3
23875: IFFALSE 23891
// SetBName ( base_dep , name ) ;
23877: LD_VAR 0 1
23881: PPUSH
23882: LD_VAR 0 3
23886: PPUSH
23887: CALL_OW 500
// base := GetBase ( base_dep ) ;
23891: LD_ADDR_VAR 0 15
23895: PUSH
23896: LD_VAR 0 1
23900: PPUSH
23901: CALL_OW 274
23905: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23906: LD_ADDR_VAR 0 16
23910: PUSH
23911: LD_VAR 0 1
23915: PPUSH
23916: CALL_OW 255
23920: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23921: LD_ADDR_VAR 0 17
23925: PUSH
23926: LD_VAR 0 1
23930: PPUSH
23931: CALL_OW 248
23935: ST_TO_ADDR
// if sources then
23936: LD_VAR 0 5
23940: IFFALSE 23987
// for i = 1 to 3 do
23942: LD_ADDR_VAR 0 8
23946: PUSH
23947: DOUBLE
23948: LD_INT 1
23950: DEC
23951: ST_TO_ADDR
23952: LD_INT 3
23954: PUSH
23955: FOR_TO
23956: IFFALSE 23985
// AddResourceType ( base , i , sources [ i ] ) ;
23958: LD_VAR 0 15
23962: PPUSH
23963: LD_VAR 0 8
23967: PPUSH
23968: LD_VAR 0 5
23972: PUSH
23973: LD_VAR 0 8
23977: ARRAY
23978: PPUSH
23979: CALL_OW 276
23983: GO 23955
23985: POP
23986: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23987: LD_ADDR_VAR 0 18
23991: PUSH
23992: LD_VAR 0 15
23996: PPUSH
23997: LD_VAR 0 2
24001: PPUSH
24002: LD_INT 1
24004: PPUSH
24005: CALL 23248 0 3
24009: ST_TO_ADDR
// InitHc ;
24010: CALL_OW 19
// InitUc ;
24014: CALL_OW 18
// uc_side := side ;
24018: LD_ADDR_OWVAR 20
24022: PUSH
24023: LD_VAR 0 16
24027: ST_TO_ADDR
// uc_nation := nation ;
24028: LD_ADDR_OWVAR 21
24032: PUSH
24033: LD_VAR 0 17
24037: ST_TO_ADDR
// if buildings then
24038: LD_VAR 0 18
24042: IFFALSE 25364
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24044: LD_ADDR_VAR 0 19
24048: PUSH
24049: LD_VAR 0 18
24053: PPUSH
24054: LD_INT 2
24056: PUSH
24057: LD_INT 30
24059: PUSH
24060: LD_INT 29
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 30
24069: PUSH
24070: LD_INT 30
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: LIST
24081: PPUSH
24082: CALL_OW 72
24086: ST_TO_ADDR
// if tmp then
24087: LD_VAR 0 19
24091: IFFALSE 24139
// for i in tmp do
24093: LD_ADDR_VAR 0 8
24097: PUSH
24098: LD_VAR 0 19
24102: PUSH
24103: FOR_IN
24104: IFFALSE 24137
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24106: LD_VAR 0 8
24110: PPUSH
24111: CALL_OW 250
24115: PPUSH
24116: LD_VAR 0 8
24120: PPUSH
24121: CALL_OW 251
24125: PPUSH
24126: LD_VAR 0 16
24130: PPUSH
24131: CALL_OW 441
24135: GO 24103
24137: POP
24138: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24139: LD_VAR 0 18
24143: PPUSH
24144: LD_INT 2
24146: PUSH
24147: LD_INT 30
24149: PUSH
24150: LD_INT 32
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 30
24159: PUSH
24160: LD_INT 33
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: LIST
24171: PPUSH
24172: CALL_OW 72
24176: IFFALSE 24264
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24178: LD_ADDR_VAR 0 8
24182: PUSH
24183: LD_VAR 0 18
24187: PPUSH
24188: LD_INT 2
24190: PUSH
24191: LD_INT 30
24193: PUSH
24194: LD_INT 32
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 30
24203: PUSH
24204: LD_INT 33
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: LIST
24215: PPUSH
24216: CALL_OW 72
24220: PUSH
24221: FOR_IN
24222: IFFALSE 24262
// begin if not GetBWeapon ( i ) then
24224: LD_VAR 0 8
24228: PPUSH
24229: CALL_OW 269
24233: NOT
24234: IFFALSE 24260
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24236: LD_VAR 0 8
24240: PPUSH
24241: LD_VAR 0 8
24245: PPUSH
24246: LD_VAR 0 2
24250: PPUSH
24251: CALL 25510 0 2
24255: PPUSH
24256: CALL_OW 431
// end ;
24260: GO 24221
24262: POP
24263: POP
// end ; for i = 1 to personel do
24264: LD_ADDR_VAR 0 8
24268: PUSH
24269: DOUBLE
24270: LD_INT 1
24272: DEC
24273: ST_TO_ADDR
24274: LD_VAR 0 6
24278: PUSH
24279: FOR_TO
24280: IFFALSE 25344
// begin if i > 4 then
24282: LD_VAR 0 8
24286: PUSH
24287: LD_INT 4
24289: GREATER
24290: IFFALSE 24294
// break ;
24292: GO 25344
// case i of 1 :
24294: LD_VAR 0 8
24298: PUSH
24299: LD_INT 1
24301: DOUBLE
24302: EQUAL
24303: IFTRUE 24307
24305: GO 24387
24307: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24308: LD_ADDR_VAR 0 12
24312: PUSH
24313: LD_VAR 0 18
24317: PPUSH
24318: LD_INT 22
24320: PUSH
24321: LD_VAR 0 16
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 58
24332: PUSH
24333: EMPTY
24334: LIST
24335: PUSH
24336: LD_INT 2
24338: PUSH
24339: LD_INT 30
24341: PUSH
24342: LD_INT 32
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 30
24351: PUSH
24352: LD_INT 4
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 30
24361: PUSH
24362: LD_INT 5
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: LIST
24379: PPUSH
24380: CALL_OW 72
24384: ST_TO_ADDR
24385: GO 24609
24387: LD_INT 2
24389: DOUBLE
24390: EQUAL
24391: IFTRUE 24395
24393: GO 24457
24395: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24396: LD_ADDR_VAR 0 12
24400: PUSH
24401: LD_VAR 0 18
24405: PPUSH
24406: LD_INT 22
24408: PUSH
24409: LD_VAR 0 16
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 2
24420: PUSH
24421: LD_INT 30
24423: PUSH
24424: LD_INT 0
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 30
24433: PUSH
24434: LD_INT 1
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: LIST
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PPUSH
24450: CALL_OW 72
24454: ST_TO_ADDR
24455: GO 24609
24457: LD_INT 3
24459: DOUBLE
24460: EQUAL
24461: IFTRUE 24465
24463: GO 24527
24465: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24466: LD_ADDR_VAR 0 12
24470: PUSH
24471: LD_VAR 0 18
24475: PPUSH
24476: LD_INT 22
24478: PUSH
24479: LD_VAR 0 16
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 2
24490: PUSH
24491: LD_INT 30
24493: PUSH
24494: LD_INT 2
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 30
24503: PUSH
24504: LD_INT 3
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: LIST
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PPUSH
24520: CALL_OW 72
24524: ST_TO_ADDR
24525: GO 24609
24527: LD_INT 4
24529: DOUBLE
24530: EQUAL
24531: IFTRUE 24535
24533: GO 24608
24535: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24536: LD_ADDR_VAR 0 12
24540: PUSH
24541: LD_VAR 0 18
24545: PPUSH
24546: LD_INT 22
24548: PUSH
24549: LD_VAR 0 16
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 2
24560: PUSH
24561: LD_INT 30
24563: PUSH
24564: LD_INT 6
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 30
24573: PUSH
24574: LD_INT 7
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 30
24583: PUSH
24584: LD_INT 8
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PPUSH
24601: CALL_OW 72
24605: ST_TO_ADDR
24606: GO 24609
24608: POP
// if i = 1 then
24609: LD_VAR 0 8
24613: PUSH
24614: LD_INT 1
24616: EQUAL
24617: IFFALSE 24728
// begin tmp := [ ] ;
24619: LD_ADDR_VAR 0 19
24623: PUSH
24624: EMPTY
24625: ST_TO_ADDR
// for j in f do
24626: LD_ADDR_VAR 0 9
24630: PUSH
24631: LD_VAR 0 12
24635: PUSH
24636: FOR_IN
24637: IFFALSE 24710
// if GetBType ( j ) = b_bunker then
24639: LD_VAR 0 9
24643: PPUSH
24644: CALL_OW 266
24648: PUSH
24649: LD_INT 32
24651: EQUAL
24652: IFFALSE 24679
// tmp := Insert ( tmp , 1 , j ) else
24654: LD_ADDR_VAR 0 19
24658: PUSH
24659: LD_VAR 0 19
24663: PPUSH
24664: LD_INT 1
24666: PPUSH
24667: LD_VAR 0 9
24671: PPUSH
24672: CALL_OW 2
24676: ST_TO_ADDR
24677: GO 24708
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24679: LD_ADDR_VAR 0 19
24683: PUSH
24684: LD_VAR 0 19
24688: PPUSH
24689: LD_VAR 0 19
24693: PUSH
24694: LD_INT 1
24696: PLUS
24697: PPUSH
24698: LD_VAR 0 9
24702: PPUSH
24703: CALL_OW 2
24707: ST_TO_ADDR
24708: GO 24636
24710: POP
24711: POP
// if tmp then
24712: LD_VAR 0 19
24716: IFFALSE 24728
// f := tmp ;
24718: LD_ADDR_VAR 0 12
24722: PUSH
24723: LD_VAR 0 19
24727: ST_TO_ADDR
// end ; x := personel [ i ] ;
24728: LD_ADDR_VAR 0 13
24732: PUSH
24733: LD_VAR 0 6
24737: PUSH
24738: LD_VAR 0 8
24742: ARRAY
24743: ST_TO_ADDR
// if x = - 1 then
24744: LD_VAR 0 13
24748: PUSH
24749: LD_INT 1
24751: NEG
24752: EQUAL
24753: IFFALSE 24962
// begin for j in f do
24755: LD_ADDR_VAR 0 9
24759: PUSH
24760: LD_VAR 0 12
24764: PUSH
24765: FOR_IN
24766: IFFALSE 24958
// repeat InitHc ;
24768: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24772: LD_VAR 0 9
24776: PPUSH
24777: CALL_OW 266
24781: PUSH
24782: LD_INT 5
24784: EQUAL
24785: IFFALSE 24855
// begin if UnitsInside ( j ) < 3 then
24787: LD_VAR 0 9
24791: PPUSH
24792: CALL_OW 313
24796: PUSH
24797: LD_INT 3
24799: LESS
24800: IFFALSE 24836
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24802: LD_INT 0
24804: PPUSH
24805: LD_INT 5
24807: PUSH
24808: LD_INT 8
24810: PUSH
24811: LD_INT 9
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: LIST
24818: PUSH
24819: LD_VAR 0 17
24823: ARRAY
24824: PPUSH
24825: LD_VAR 0 4
24829: PPUSH
24830: CALL_OW 380
24834: GO 24853
// PrepareHuman ( false , i , skill ) ;
24836: LD_INT 0
24838: PPUSH
24839: LD_VAR 0 8
24843: PPUSH
24844: LD_VAR 0 4
24848: PPUSH
24849: CALL_OW 380
// end else
24853: GO 24872
// PrepareHuman ( false , i , skill ) ;
24855: LD_INT 0
24857: PPUSH
24858: LD_VAR 0 8
24862: PPUSH
24863: LD_VAR 0 4
24867: PPUSH
24868: CALL_OW 380
// un := CreateHuman ;
24872: LD_ADDR_VAR 0 14
24876: PUSH
24877: CALL_OW 44
24881: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24882: LD_ADDR_VAR 0 7
24886: PUSH
24887: LD_VAR 0 7
24891: PPUSH
24892: LD_INT 1
24894: PPUSH
24895: LD_VAR 0 14
24899: PPUSH
24900: CALL_OW 2
24904: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24905: LD_VAR 0 14
24909: PPUSH
24910: LD_VAR 0 9
24914: PPUSH
24915: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24919: LD_VAR 0 9
24923: PPUSH
24924: CALL_OW 313
24928: PUSH
24929: LD_INT 6
24931: EQUAL
24932: PUSH
24933: LD_VAR 0 9
24937: PPUSH
24938: CALL_OW 266
24942: PUSH
24943: LD_INT 32
24945: PUSH
24946: LD_INT 31
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: IN
24953: OR
24954: IFFALSE 24768
24956: GO 24765
24958: POP
24959: POP
// end else
24960: GO 25342
// for j = 1 to x do
24962: LD_ADDR_VAR 0 9
24966: PUSH
24967: DOUBLE
24968: LD_INT 1
24970: DEC
24971: ST_TO_ADDR
24972: LD_VAR 0 13
24976: PUSH
24977: FOR_TO
24978: IFFALSE 25340
// begin InitHc ;
24980: CALL_OW 19
// if not f then
24984: LD_VAR 0 12
24988: NOT
24989: IFFALSE 25078
// begin PrepareHuman ( false , i , skill ) ;
24991: LD_INT 0
24993: PPUSH
24994: LD_VAR 0 8
24998: PPUSH
24999: LD_VAR 0 4
25003: PPUSH
25004: CALL_OW 380
// un := CreateHuman ;
25008: LD_ADDR_VAR 0 14
25012: PUSH
25013: CALL_OW 44
25017: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25018: LD_ADDR_VAR 0 7
25022: PUSH
25023: LD_VAR 0 7
25027: PPUSH
25028: LD_INT 1
25030: PPUSH
25031: LD_VAR 0 14
25035: PPUSH
25036: CALL_OW 2
25040: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25041: LD_VAR 0 14
25045: PPUSH
25046: LD_VAR 0 1
25050: PPUSH
25051: CALL_OW 250
25055: PPUSH
25056: LD_VAR 0 1
25060: PPUSH
25061: CALL_OW 251
25065: PPUSH
25066: LD_INT 10
25068: PPUSH
25069: LD_INT 0
25071: PPUSH
25072: CALL_OW 50
// continue ;
25076: GO 24977
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25078: LD_VAR 0 12
25082: PUSH
25083: LD_INT 1
25085: ARRAY
25086: PPUSH
25087: CALL_OW 313
25091: PUSH
25092: LD_VAR 0 12
25096: PUSH
25097: LD_INT 1
25099: ARRAY
25100: PPUSH
25101: CALL_OW 266
25105: PUSH
25106: LD_INT 32
25108: PUSH
25109: LD_INT 31
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: IN
25116: AND
25117: PUSH
25118: LD_VAR 0 12
25122: PUSH
25123: LD_INT 1
25125: ARRAY
25126: PPUSH
25127: CALL_OW 313
25131: PUSH
25132: LD_INT 6
25134: EQUAL
25135: OR
25136: IFFALSE 25156
// f := Delete ( f , 1 ) ;
25138: LD_ADDR_VAR 0 12
25142: PUSH
25143: LD_VAR 0 12
25147: PPUSH
25148: LD_INT 1
25150: PPUSH
25151: CALL_OW 3
25155: ST_TO_ADDR
// if not f then
25156: LD_VAR 0 12
25160: NOT
25161: IFFALSE 25179
// begin x := x + 2 ;
25163: LD_ADDR_VAR 0 13
25167: PUSH
25168: LD_VAR 0 13
25172: PUSH
25173: LD_INT 2
25175: PLUS
25176: ST_TO_ADDR
// continue ;
25177: GO 24977
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25179: LD_VAR 0 12
25183: PUSH
25184: LD_INT 1
25186: ARRAY
25187: PPUSH
25188: CALL_OW 266
25192: PUSH
25193: LD_INT 5
25195: EQUAL
25196: IFFALSE 25270
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25198: LD_VAR 0 12
25202: PUSH
25203: LD_INT 1
25205: ARRAY
25206: PPUSH
25207: CALL_OW 313
25211: PUSH
25212: LD_INT 3
25214: LESS
25215: IFFALSE 25251
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25217: LD_INT 0
25219: PPUSH
25220: LD_INT 5
25222: PUSH
25223: LD_INT 8
25225: PUSH
25226: LD_INT 9
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: LIST
25233: PUSH
25234: LD_VAR 0 17
25238: ARRAY
25239: PPUSH
25240: LD_VAR 0 4
25244: PPUSH
25245: CALL_OW 380
25249: GO 25268
// PrepareHuman ( false , i , skill ) ;
25251: LD_INT 0
25253: PPUSH
25254: LD_VAR 0 8
25258: PPUSH
25259: LD_VAR 0 4
25263: PPUSH
25264: CALL_OW 380
// end else
25268: GO 25287
// PrepareHuman ( false , i , skill ) ;
25270: LD_INT 0
25272: PPUSH
25273: LD_VAR 0 8
25277: PPUSH
25278: LD_VAR 0 4
25282: PPUSH
25283: CALL_OW 380
// un := CreateHuman ;
25287: LD_ADDR_VAR 0 14
25291: PUSH
25292: CALL_OW 44
25296: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25297: LD_ADDR_VAR 0 7
25301: PUSH
25302: LD_VAR 0 7
25306: PPUSH
25307: LD_INT 1
25309: PPUSH
25310: LD_VAR 0 14
25314: PPUSH
25315: CALL_OW 2
25319: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25320: LD_VAR 0 14
25324: PPUSH
25325: LD_VAR 0 12
25329: PUSH
25330: LD_INT 1
25332: ARRAY
25333: PPUSH
25334: CALL_OW 52
// end ;
25338: GO 24977
25340: POP
25341: POP
// end ;
25342: GO 24279
25344: POP
25345: POP
// result := result ^ buildings ;
25346: LD_ADDR_VAR 0 7
25350: PUSH
25351: LD_VAR 0 7
25355: PUSH
25356: LD_VAR 0 18
25360: ADD
25361: ST_TO_ADDR
// end else
25362: GO 25505
// begin for i = 1 to personel do
25364: LD_ADDR_VAR 0 8
25368: PUSH
25369: DOUBLE
25370: LD_INT 1
25372: DEC
25373: ST_TO_ADDR
25374: LD_VAR 0 6
25378: PUSH
25379: FOR_TO
25380: IFFALSE 25503
// begin if i > 4 then
25382: LD_VAR 0 8
25386: PUSH
25387: LD_INT 4
25389: GREATER
25390: IFFALSE 25394
// break ;
25392: GO 25503
// x := personel [ i ] ;
25394: LD_ADDR_VAR 0 13
25398: PUSH
25399: LD_VAR 0 6
25403: PUSH
25404: LD_VAR 0 8
25408: ARRAY
25409: ST_TO_ADDR
// if x = - 1 then
25410: LD_VAR 0 13
25414: PUSH
25415: LD_INT 1
25417: NEG
25418: EQUAL
25419: IFFALSE 25423
// continue ;
25421: GO 25379
// PrepareHuman ( false , i , skill ) ;
25423: LD_INT 0
25425: PPUSH
25426: LD_VAR 0 8
25430: PPUSH
25431: LD_VAR 0 4
25435: PPUSH
25436: CALL_OW 380
// un := CreateHuman ;
25440: LD_ADDR_VAR 0 14
25444: PUSH
25445: CALL_OW 44
25449: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25450: LD_VAR 0 14
25454: PPUSH
25455: LD_VAR 0 1
25459: PPUSH
25460: CALL_OW 250
25464: PPUSH
25465: LD_VAR 0 1
25469: PPUSH
25470: CALL_OW 251
25474: PPUSH
25475: LD_INT 10
25477: PPUSH
25478: LD_INT 0
25480: PPUSH
25481: CALL_OW 50
// result := result ^ un ;
25485: LD_ADDR_VAR 0 7
25489: PUSH
25490: LD_VAR 0 7
25494: PUSH
25495: LD_VAR 0 14
25499: ADD
25500: ST_TO_ADDR
// end ;
25501: GO 25379
25503: POP
25504: POP
// end ; end ;
25505: LD_VAR 0 7
25509: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25510: LD_INT 0
25512: PPUSH
25513: PPUSH
25514: PPUSH
25515: PPUSH
25516: PPUSH
25517: PPUSH
25518: PPUSH
25519: PPUSH
25520: PPUSH
25521: PPUSH
25522: PPUSH
25523: PPUSH
25524: PPUSH
25525: PPUSH
25526: PPUSH
25527: PPUSH
// result := false ;
25528: LD_ADDR_VAR 0 3
25532: PUSH
25533: LD_INT 0
25535: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25536: LD_VAR 0 1
25540: NOT
25541: PUSH
25542: LD_VAR 0 1
25546: PPUSH
25547: CALL_OW 266
25551: PUSH
25552: LD_INT 32
25554: PUSH
25555: LD_INT 33
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: IN
25562: NOT
25563: OR
25564: IFFALSE 25568
// exit ;
25566: GO 26677
// nat := GetNation ( tower ) ;
25568: LD_ADDR_VAR 0 12
25572: PUSH
25573: LD_VAR 0 1
25577: PPUSH
25578: CALL_OW 248
25582: ST_TO_ADDR
// side := GetSide ( tower ) ;
25583: LD_ADDR_VAR 0 16
25587: PUSH
25588: LD_VAR 0 1
25592: PPUSH
25593: CALL_OW 255
25597: ST_TO_ADDR
// x := GetX ( tower ) ;
25598: LD_ADDR_VAR 0 10
25602: PUSH
25603: LD_VAR 0 1
25607: PPUSH
25608: CALL_OW 250
25612: ST_TO_ADDR
// y := GetY ( tower ) ;
25613: LD_ADDR_VAR 0 11
25617: PUSH
25618: LD_VAR 0 1
25622: PPUSH
25623: CALL_OW 251
25627: ST_TO_ADDR
// if not x or not y then
25628: LD_VAR 0 10
25632: NOT
25633: PUSH
25634: LD_VAR 0 11
25638: NOT
25639: OR
25640: IFFALSE 25644
// exit ;
25642: GO 26677
// weapon := 0 ;
25644: LD_ADDR_VAR 0 18
25648: PUSH
25649: LD_INT 0
25651: ST_TO_ADDR
// fac_list := [ ] ;
25652: LD_ADDR_VAR 0 17
25656: PUSH
25657: EMPTY
25658: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25659: LD_ADDR_VAR 0 6
25663: PUSH
25664: LD_VAR 0 1
25668: PPUSH
25669: CALL_OW 274
25673: PPUSH
25674: LD_VAR 0 2
25678: PPUSH
25679: LD_INT 0
25681: PPUSH
25682: CALL 23248 0 3
25686: PPUSH
25687: LD_INT 30
25689: PUSH
25690: LD_INT 3
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PPUSH
25697: CALL_OW 72
25701: ST_TO_ADDR
// if not factories then
25702: LD_VAR 0 6
25706: NOT
25707: IFFALSE 25711
// exit ;
25709: GO 26677
// for i in factories do
25711: LD_ADDR_VAR 0 8
25715: PUSH
25716: LD_VAR 0 6
25720: PUSH
25721: FOR_IN
25722: IFFALSE 25747
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25724: LD_ADDR_VAR 0 17
25728: PUSH
25729: LD_VAR 0 17
25733: PUSH
25734: LD_VAR 0 8
25738: PPUSH
25739: CALL_OW 478
25743: UNION
25744: ST_TO_ADDR
25745: GO 25721
25747: POP
25748: POP
// if not fac_list then
25749: LD_VAR 0 17
25753: NOT
25754: IFFALSE 25758
// exit ;
25756: GO 26677
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25758: LD_ADDR_VAR 0 5
25762: PUSH
25763: LD_INT 4
25765: PUSH
25766: LD_INT 5
25768: PUSH
25769: LD_INT 9
25771: PUSH
25772: LD_INT 10
25774: PUSH
25775: LD_INT 6
25777: PUSH
25778: LD_INT 7
25780: PUSH
25781: LD_INT 11
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 27
25795: PUSH
25796: LD_INT 28
25798: PUSH
25799: LD_INT 26
25801: PUSH
25802: LD_INT 30
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 43
25813: PUSH
25814: LD_INT 44
25816: PUSH
25817: LD_INT 46
25819: PUSH
25820: LD_INT 45
25822: PUSH
25823: LD_INT 47
25825: PUSH
25826: LD_INT 49
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: LIST
25841: PUSH
25842: LD_VAR 0 12
25846: ARRAY
25847: ST_TO_ADDR
// list := list isect fac_list ;
25848: LD_ADDR_VAR 0 5
25852: PUSH
25853: LD_VAR 0 5
25857: PUSH
25858: LD_VAR 0 17
25862: ISECT
25863: ST_TO_ADDR
// if not list then
25864: LD_VAR 0 5
25868: NOT
25869: IFFALSE 25873
// exit ;
25871: GO 26677
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25873: LD_VAR 0 12
25877: PUSH
25878: LD_INT 3
25880: EQUAL
25881: PUSH
25882: LD_INT 49
25884: PUSH
25885: LD_VAR 0 5
25889: IN
25890: AND
25891: PUSH
25892: LD_INT 31
25894: PPUSH
25895: LD_VAR 0 16
25899: PPUSH
25900: CALL_OW 321
25904: PUSH
25905: LD_INT 2
25907: EQUAL
25908: AND
25909: IFFALSE 25969
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25911: LD_INT 22
25913: PUSH
25914: LD_VAR 0 16
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 35
25925: PUSH
25926: LD_INT 49
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 91
25935: PUSH
25936: LD_VAR 0 1
25940: PUSH
25941: LD_INT 10
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: LIST
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: LIST
25953: PPUSH
25954: CALL_OW 69
25958: NOT
25959: IFFALSE 25969
// weapon := ru_time_lapser ;
25961: LD_ADDR_VAR 0 18
25965: PUSH
25966: LD_INT 49
25968: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25969: LD_VAR 0 12
25973: PUSH
25974: LD_INT 1
25976: PUSH
25977: LD_INT 2
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: IN
25984: PUSH
25985: LD_INT 11
25987: PUSH
25988: LD_VAR 0 5
25992: IN
25993: PUSH
25994: LD_INT 30
25996: PUSH
25997: LD_VAR 0 5
26001: IN
26002: OR
26003: AND
26004: PUSH
26005: LD_INT 6
26007: PPUSH
26008: LD_VAR 0 16
26012: PPUSH
26013: CALL_OW 321
26017: PUSH
26018: LD_INT 2
26020: EQUAL
26021: AND
26022: IFFALSE 26187
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26024: LD_INT 22
26026: PUSH
26027: LD_VAR 0 16
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 2
26038: PUSH
26039: LD_INT 35
26041: PUSH
26042: LD_INT 11
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 35
26051: PUSH
26052: LD_INT 30
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 91
26066: PUSH
26067: LD_VAR 0 1
26071: PUSH
26072: LD_INT 18
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: LIST
26084: PPUSH
26085: CALL_OW 69
26089: NOT
26090: PUSH
26091: LD_INT 22
26093: PUSH
26094: LD_VAR 0 16
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 2
26105: PUSH
26106: LD_INT 30
26108: PUSH
26109: LD_INT 32
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 30
26118: PUSH
26119: LD_INT 33
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 91
26133: PUSH
26134: LD_VAR 0 1
26138: PUSH
26139: LD_INT 12
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: LIST
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: LIST
26151: PUSH
26152: EMPTY
26153: LIST
26154: PPUSH
26155: CALL_OW 69
26159: PUSH
26160: LD_INT 2
26162: GREATER
26163: AND
26164: IFFALSE 26187
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26166: LD_ADDR_VAR 0 18
26170: PUSH
26171: LD_INT 11
26173: PUSH
26174: LD_INT 30
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_VAR 0 12
26185: ARRAY
26186: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26187: LD_VAR 0 18
26191: NOT
26192: PUSH
26193: LD_INT 40
26195: PPUSH
26196: LD_VAR 0 16
26200: PPUSH
26201: CALL_OW 321
26205: PUSH
26206: LD_INT 2
26208: EQUAL
26209: AND
26210: PUSH
26211: LD_INT 7
26213: PUSH
26214: LD_VAR 0 5
26218: IN
26219: PUSH
26220: LD_INT 28
26222: PUSH
26223: LD_VAR 0 5
26227: IN
26228: OR
26229: PUSH
26230: LD_INT 45
26232: PUSH
26233: LD_VAR 0 5
26237: IN
26238: OR
26239: AND
26240: IFFALSE 26494
// begin hex := GetHexInfo ( x , y ) ;
26242: LD_ADDR_VAR 0 4
26246: PUSH
26247: LD_VAR 0 10
26251: PPUSH
26252: LD_VAR 0 11
26256: PPUSH
26257: CALL_OW 546
26261: ST_TO_ADDR
// if hex [ 1 ] then
26262: LD_VAR 0 4
26266: PUSH
26267: LD_INT 1
26269: ARRAY
26270: IFFALSE 26274
// exit ;
26272: GO 26677
// height := hex [ 2 ] ;
26274: LD_ADDR_VAR 0 15
26278: PUSH
26279: LD_VAR 0 4
26283: PUSH
26284: LD_INT 2
26286: ARRAY
26287: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26288: LD_ADDR_VAR 0 14
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: LD_INT 2
26298: PUSH
26299: LD_INT 3
26301: PUSH
26302: LD_INT 5
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: ST_TO_ADDR
// for i in tmp do
26311: LD_ADDR_VAR 0 8
26315: PUSH
26316: LD_VAR 0 14
26320: PUSH
26321: FOR_IN
26322: IFFALSE 26492
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26324: LD_ADDR_VAR 0 9
26328: PUSH
26329: LD_VAR 0 10
26333: PPUSH
26334: LD_VAR 0 8
26338: PPUSH
26339: LD_INT 5
26341: PPUSH
26342: CALL_OW 272
26346: PUSH
26347: LD_VAR 0 11
26351: PPUSH
26352: LD_VAR 0 8
26356: PPUSH
26357: LD_INT 5
26359: PPUSH
26360: CALL_OW 273
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26369: LD_VAR 0 9
26373: PUSH
26374: LD_INT 1
26376: ARRAY
26377: PPUSH
26378: LD_VAR 0 9
26382: PUSH
26383: LD_INT 2
26385: ARRAY
26386: PPUSH
26387: CALL_OW 488
26391: IFFALSE 26490
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26393: LD_ADDR_VAR 0 4
26397: PUSH
26398: LD_VAR 0 9
26402: PUSH
26403: LD_INT 1
26405: ARRAY
26406: PPUSH
26407: LD_VAR 0 9
26411: PUSH
26412: LD_INT 2
26414: ARRAY
26415: PPUSH
26416: CALL_OW 546
26420: ST_TO_ADDR
// if hex [ 1 ] then
26421: LD_VAR 0 4
26425: PUSH
26426: LD_INT 1
26428: ARRAY
26429: IFFALSE 26433
// continue ;
26431: GO 26321
// h := hex [ 2 ] ;
26433: LD_ADDR_VAR 0 13
26437: PUSH
26438: LD_VAR 0 4
26442: PUSH
26443: LD_INT 2
26445: ARRAY
26446: ST_TO_ADDR
// if h + 7 < height then
26447: LD_VAR 0 13
26451: PUSH
26452: LD_INT 7
26454: PLUS
26455: PUSH
26456: LD_VAR 0 15
26460: LESS
26461: IFFALSE 26490
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26463: LD_ADDR_VAR 0 18
26467: PUSH
26468: LD_INT 7
26470: PUSH
26471: LD_INT 28
26473: PUSH
26474: LD_INT 45
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: LIST
26481: PUSH
26482: LD_VAR 0 12
26486: ARRAY
26487: ST_TO_ADDR
// break ;
26488: GO 26492
// end ; end ; end ;
26490: GO 26321
26492: POP
26493: POP
// end ; if not weapon then
26494: LD_VAR 0 18
26498: NOT
26499: IFFALSE 26559
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26501: LD_ADDR_VAR 0 5
26505: PUSH
26506: LD_VAR 0 5
26510: PUSH
26511: LD_INT 11
26513: PUSH
26514: LD_INT 30
26516: PUSH
26517: LD_INT 49
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: LIST
26524: DIFF
26525: ST_TO_ADDR
// if not list then
26526: LD_VAR 0 5
26530: NOT
26531: IFFALSE 26535
// exit ;
26533: GO 26677
// weapon := list [ rand ( 1 , list ) ] ;
26535: LD_ADDR_VAR 0 18
26539: PUSH
26540: LD_VAR 0 5
26544: PUSH
26545: LD_INT 1
26547: PPUSH
26548: LD_VAR 0 5
26552: PPUSH
26553: CALL_OW 12
26557: ARRAY
26558: ST_TO_ADDR
// end ; if weapon then
26559: LD_VAR 0 18
26563: IFFALSE 26677
// begin tmp := CostOfWeapon ( weapon ) ;
26565: LD_ADDR_VAR 0 14
26569: PUSH
26570: LD_VAR 0 18
26574: PPUSH
26575: CALL_OW 451
26579: ST_TO_ADDR
// j := GetBase ( tower ) ;
26580: LD_ADDR_VAR 0 9
26584: PUSH
26585: LD_VAR 0 1
26589: PPUSH
26590: CALL_OW 274
26594: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26595: LD_VAR 0 9
26599: PPUSH
26600: LD_INT 1
26602: PPUSH
26603: CALL_OW 275
26607: PUSH
26608: LD_VAR 0 14
26612: PUSH
26613: LD_INT 1
26615: ARRAY
26616: GREATEREQUAL
26617: PUSH
26618: LD_VAR 0 9
26622: PPUSH
26623: LD_INT 2
26625: PPUSH
26626: CALL_OW 275
26630: PUSH
26631: LD_VAR 0 14
26635: PUSH
26636: LD_INT 2
26638: ARRAY
26639: GREATEREQUAL
26640: AND
26641: PUSH
26642: LD_VAR 0 9
26646: PPUSH
26647: LD_INT 3
26649: PPUSH
26650: CALL_OW 275
26654: PUSH
26655: LD_VAR 0 14
26659: PUSH
26660: LD_INT 3
26662: ARRAY
26663: GREATEREQUAL
26664: AND
26665: IFFALSE 26677
// result := weapon ;
26667: LD_ADDR_VAR 0 3
26671: PUSH
26672: LD_VAR 0 18
26676: ST_TO_ADDR
// end ; end ;
26677: LD_VAR 0 3
26681: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26682: LD_INT 0
26684: PPUSH
26685: PPUSH
// result := true ;
26686: LD_ADDR_VAR 0 3
26690: PUSH
26691: LD_INT 1
26693: ST_TO_ADDR
// if array1 = array2 then
26694: LD_VAR 0 1
26698: PUSH
26699: LD_VAR 0 2
26703: EQUAL
26704: IFFALSE 26764
// begin for i = 1 to array1 do
26706: LD_ADDR_VAR 0 4
26710: PUSH
26711: DOUBLE
26712: LD_INT 1
26714: DEC
26715: ST_TO_ADDR
26716: LD_VAR 0 1
26720: PUSH
26721: FOR_TO
26722: IFFALSE 26760
// if array1 [ i ] <> array2 [ i ] then
26724: LD_VAR 0 1
26728: PUSH
26729: LD_VAR 0 4
26733: ARRAY
26734: PUSH
26735: LD_VAR 0 2
26739: PUSH
26740: LD_VAR 0 4
26744: ARRAY
26745: NONEQUAL
26746: IFFALSE 26758
// begin result := false ;
26748: LD_ADDR_VAR 0 3
26752: PUSH
26753: LD_INT 0
26755: ST_TO_ADDR
// break ;
26756: GO 26760
// end ;
26758: GO 26721
26760: POP
26761: POP
// end else
26762: GO 26772
// result := false ;
26764: LD_ADDR_VAR 0 3
26768: PUSH
26769: LD_INT 0
26771: ST_TO_ADDR
// end ;
26772: LD_VAR 0 3
26776: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26777: LD_INT 0
26779: PPUSH
26780: PPUSH
// if not array1 or not array2 then
26781: LD_VAR 0 1
26785: NOT
26786: PUSH
26787: LD_VAR 0 2
26791: NOT
26792: OR
26793: IFFALSE 26797
// exit ;
26795: GO 26861
// result := true ;
26797: LD_ADDR_VAR 0 3
26801: PUSH
26802: LD_INT 1
26804: ST_TO_ADDR
// for i = 1 to array1 do
26805: LD_ADDR_VAR 0 4
26809: PUSH
26810: DOUBLE
26811: LD_INT 1
26813: DEC
26814: ST_TO_ADDR
26815: LD_VAR 0 1
26819: PUSH
26820: FOR_TO
26821: IFFALSE 26859
// if array1 [ i ] <> array2 [ i ] then
26823: LD_VAR 0 1
26827: PUSH
26828: LD_VAR 0 4
26832: ARRAY
26833: PUSH
26834: LD_VAR 0 2
26838: PUSH
26839: LD_VAR 0 4
26843: ARRAY
26844: NONEQUAL
26845: IFFALSE 26857
// begin result := false ;
26847: LD_ADDR_VAR 0 3
26851: PUSH
26852: LD_INT 0
26854: ST_TO_ADDR
// break ;
26855: GO 26859
// end ;
26857: GO 26820
26859: POP
26860: POP
// end ;
26861: LD_VAR 0 3
26865: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26866: LD_INT 0
26868: PPUSH
26869: PPUSH
26870: PPUSH
// pom := GetBase ( fac ) ;
26871: LD_ADDR_VAR 0 5
26875: PUSH
26876: LD_VAR 0 1
26880: PPUSH
26881: CALL_OW 274
26885: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26886: LD_ADDR_VAR 0 4
26890: PUSH
26891: LD_VAR 0 2
26895: PUSH
26896: LD_INT 1
26898: ARRAY
26899: PPUSH
26900: LD_VAR 0 2
26904: PUSH
26905: LD_INT 2
26907: ARRAY
26908: PPUSH
26909: LD_VAR 0 2
26913: PUSH
26914: LD_INT 3
26916: ARRAY
26917: PPUSH
26918: LD_VAR 0 2
26922: PUSH
26923: LD_INT 4
26925: ARRAY
26926: PPUSH
26927: CALL_OW 449
26931: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26932: LD_ADDR_VAR 0 3
26936: PUSH
26937: LD_VAR 0 5
26941: PPUSH
26942: LD_INT 1
26944: PPUSH
26945: CALL_OW 275
26949: PUSH
26950: LD_VAR 0 4
26954: PUSH
26955: LD_INT 1
26957: ARRAY
26958: GREATEREQUAL
26959: PUSH
26960: LD_VAR 0 5
26964: PPUSH
26965: LD_INT 2
26967: PPUSH
26968: CALL_OW 275
26972: PUSH
26973: LD_VAR 0 4
26977: PUSH
26978: LD_INT 2
26980: ARRAY
26981: GREATEREQUAL
26982: AND
26983: PUSH
26984: LD_VAR 0 5
26988: PPUSH
26989: LD_INT 3
26991: PPUSH
26992: CALL_OW 275
26996: PUSH
26997: LD_VAR 0 4
27001: PUSH
27002: LD_INT 3
27004: ARRAY
27005: GREATEREQUAL
27006: AND
27007: ST_TO_ADDR
// end ;
27008: LD_VAR 0 3
27012: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27013: LD_INT 0
27015: PPUSH
27016: PPUSH
27017: PPUSH
27018: PPUSH
// pom := GetBase ( building ) ;
27019: LD_ADDR_VAR 0 3
27023: PUSH
27024: LD_VAR 0 1
27028: PPUSH
27029: CALL_OW 274
27033: ST_TO_ADDR
// if not pom then
27034: LD_VAR 0 3
27038: NOT
27039: IFFALSE 27043
// exit ;
27041: GO 27213
// btype := GetBType ( building ) ;
27043: LD_ADDR_VAR 0 5
27047: PUSH
27048: LD_VAR 0 1
27052: PPUSH
27053: CALL_OW 266
27057: ST_TO_ADDR
// if btype = b_armoury then
27058: LD_VAR 0 5
27062: PUSH
27063: LD_INT 4
27065: EQUAL
27066: IFFALSE 27076
// btype := b_barracks ;
27068: LD_ADDR_VAR 0 5
27072: PUSH
27073: LD_INT 5
27075: ST_TO_ADDR
// if btype = b_depot then
27076: LD_VAR 0 5
27080: PUSH
27081: LD_INT 0
27083: EQUAL
27084: IFFALSE 27094
// btype := b_warehouse ;
27086: LD_ADDR_VAR 0 5
27090: PUSH
27091: LD_INT 1
27093: ST_TO_ADDR
// if btype = b_workshop then
27094: LD_VAR 0 5
27098: PUSH
27099: LD_INT 2
27101: EQUAL
27102: IFFALSE 27112
// btype := b_factory ;
27104: LD_ADDR_VAR 0 5
27108: PUSH
27109: LD_INT 3
27111: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27112: LD_ADDR_VAR 0 4
27116: PUSH
27117: LD_VAR 0 5
27121: PPUSH
27122: LD_VAR 0 1
27126: PPUSH
27127: CALL_OW 248
27131: PPUSH
27132: CALL_OW 450
27136: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27137: LD_ADDR_VAR 0 2
27141: PUSH
27142: LD_VAR 0 3
27146: PPUSH
27147: LD_INT 1
27149: PPUSH
27150: CALL_OW 275
27154: PUSH
27155: LD_VAR 0 4
27159: PUSH
27160: LD_INT 1
27162: ARRAY
27163: GREATEREQUAL
27164: PUSH
27165: LD_VAR 0 3
27169: PPUSH
27170: LD_INT 2
27172: PPUSH
27173: CALL_OW 275
27177: PUSH
27178: LD_VAR 0 4
27182: PUSH
27183: LD_INT 2
27185: ARRAY
27186: GREATEREQUAL
27187: AND
27188: PUSH
27189: LD_VAR 0 3
27193: PPUSH
27194: LD_INT 3
27196: PPUSH
27197: CALL_OW 275
27201: PUSH
27202: LD_VAR 0 4
27206: PUSH
27207: LD_INT 3
27209: ARRAY
27210: GREATEREQUAL
27211: AND
27212: ST_TO_ADDR
// end ;
27213: LD_VAR 0 2
27217: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27218: LD_INT 0
27220: PPUSH
27221: PPUSH
27222: PPUSH
// pom := GetBase ( building ) ;
27223: LD_ADDR_VAR 0 4
27227: PUSH
27228: LD_VAR 0 1
27232: PPUSH
27233: CALL_OW 274
27237: ST_TO_ADDR
// if not pom then
27238: LD_VAR 0 4
27242: NOT
27243: IFFALSE 27247
// exit ;
27245: GO 27348
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27247: LD_ADDR_VAR 0 5
27251: PUSH
27252: LD_VAR 0 2
27256: PPUSH
27257: LD_VAR 0 1
27261: PPUSH
27262: CALL_OW 248
27266: PPUSH
27267: CALL_OW 450
27271: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27272: LD_ADDR_VAR 0 3
27276: PUSH
27277: LD_VAR 0 4
27281: PPUSH
27282: LD_INT 1
27284: PPUSH
27285: CALL_OW 275
27289: PUSH
27290: LD_VAR 0 5
27294: PUSH
27295: LD_INT 1
27297: ARRAY
27298: GREATEREQUAL
27299: PUSH
27300: LD_VAR 0 4
27304: PPUSH
27305: LD_INT 2
27307: PPUSH
27308: CALL_OW 275
27312: PUSH
27313: LD_VAR 0 5
27317: PUSH
27318: LD_INT 2
27320: ARRAY
27321: GREATEREQUAL
27322: AND
27323: PUSH
27324: LD_VAR 0 4
27328: PPUSH
27329: LD_INT 3
27331: PPUSH
27332: CALL_OW 275
27336: PUSH
27337: LD_VAR 0 5
27341: PUSH
27342: LD_INT 3
27344: ARRAY
27345: GREATEREQUAL
27346: AND
27347: ST_TO_ADDR
// end ;
27348: LD_VAR 0 3
27352: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27353: LD_INT 0
27355: PPUSH
27356: PPUSH
27357: PPUSH
27358: PPUSH
27359: PPUSH
27360: PPUSH
27361: PPUSH
27362: PPUSH
27363: PPUSH
27364: PPUSH
27365: PPUSH
// result := false ;
27366: LD_ADDR_VAR 0 8
27370: PUSH
27371: LD_INT 0
27373: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27374: LD_VAR 0 5
27378: NOT
27379: PUSH
27380: LD_VAR 0 1
27384: NOT
27385: OR
27386: PUSH
27387: LD_VAR 0 2
27391: NOT
27392: OR
27393: PUSH
27394: LD_VAR 0 3
27398: NOT
27399: OR
27400: IFFALSE 27404
// exit ;
27402: GO 28218
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27404: LD_ADDR_VAR 0 14
27408: PUSH
27409: LD_VAR 0 1
27413: PPUSH
27414: LD_VAR 0 2
27418: PPUSH
27419: LD_VAR 0 3
27423: PPUSH
27424: LD_VAR 0 4
27428: PPUSH
27429: LD_VAR 0 5
27433: PUSH
27434: LD_INT 1
27436: ARRAY
27437: PPUSH
27438: CALL_OW 248
27442: PPUSH
27443: LD_INT 0
27445: PPUSH
27446: CALL 29471 0 6
27450: ST_TO_ADDR
// if not hexes then
27451: LD_VAR 0 14
27455: NOT
27456: IFFALSE 27460
// exit ;
27458: GO 28218
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27460: LD_ADDR_VAR 0 17
27464: PUSH
27465: LD_VAR 0 5
27469: PPUSH
27470: LD_INT 22
27472: PUSH
27473: LD_VAR 0 13
27477: PPUSH
27478: CALL_OW 255
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 2
27489: PUSH
27490: LD_INT 30
27492: PUSH
27493: LD_INT 0
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 30
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: LIST
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PPUSH
27519: CALL_OW 72
27523: ST_TO_ADDR
// for i = 1 to hexes do
27524: LD_ADDR_VAR 0 9
27528: PUSH
27529: DOUBLE
27530: LD_INT 1
27532: DEC
27533: ST_TO_ADDR
27534: LD_VAR 0 14
27538: PUSH
27539: FOR_TO
27540: IFFALSE 28216
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27542: LD_ADDR_VAR 0 13
27546: PUSH
27547: LD_VAR 0 14
27551: PUSH
27552: LD_VAR 0 9
27556: ARRAY
27557: PUSH
27558: LD_INT 1
27560: ARRAY
27561: PPUSH
27562: LD_VAR 0 14
27566: PUSH
27567: LD_VAR 0 9
27571: ARRAY
27572: PUSH
27573: LD_INT 2
27575: ARRAY
27576: PPUSH
27577: CALL_OW 428
27581: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27582: LD_VAR 0 14
27586: PUSH
27587: LD_VAR 0 9
27591: ARRAY
27592: PUSH
27593: LD_INT 1
27595: ARRAY
27596: PPUSH
27597: LD_VAR 0 14
27601: PUSH
27602: LD_VAR 0 9
27606: ARRAY
27607: PUSH
27608: LD_INT 2
27610: ARRAY
27611: PPUSH
27612: CALL_OW 351
27616: PUSH
27617: LD_VAR 0 14
27621: PUSH
27622: LD_VAR 0 9
27626: ARRAY
27627: PUSH
27628: LD_INT 1
27630: ARRAY
27631: PPUSH
27632: LD_VAR 0 14
27636: PUSH
27637: LD_VAR 0 9
27641: ARRAY
27642: PUSH
27643: LD_INT 2
27645: ARRAY
27646: PPUSH
27647: CALL_OW 488
27651: NOT
27652: OR
27653: PUSH
27654: LD_VAR 0 13
27658: PPUSH
27659: CALL_OW 247
27663: PUSH
27664: LD_INT 3
27666: EQUAL
27667: OR
27668: IFFALSE 27674
// exit ;
27670: POP
27671: POP
27672: GO 28218
// if not tmp then
27674: LD_VAR 0 13
27678: NOT
27679: IFFALSE 27683
// continue ;
27681: GO 27539
// result := true ;
27683: LD_ADDR_VAR 0 8
27687: PUSH
27688: LD_INT 1
27690: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27691: LD_VAR 0 6
27695: PUSH
27696: LD_VAR 0 13
27700: PPUSH
27701: CALL_OW 247
27705: PUSH
27706: LD_INT 2
27708: EQUAL
27709: AND
27710: PUSH
27711: LD_VAR 0 13
27715: PPUSH
27716: CALL_OW 263
27720: PUSH
27721: LD_INT 1
27723: EQUAL
27724: AND
27725: IFFALSE 27889
// begin if IsDrivenBy ( tmp ) then
27727: LD_VAR 0 13
27731: PPUSH
27732: CALL_OW 311
27736: IFFALSE 27740
// continue ;
27738: GO 27539
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27740: LD_VAR 0 6
27744: PPUSH
27745: LD_INT 3
27747: PUSH
27748: LD_INT 60
27750: PUSH
27751: EMPTY
27752: LIST
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 3
27760: PUSH
27761: LD_INT 55
27763: PUSH
27764: EMPTY
27765: LIST
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PPUSH
27775: CALL_OW 72
27779: IFFALSE 27887
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27781: LD_ADDR_VAR 0 18
27785: PUSH
27786: LD_VAR 0 6
27790: PPUSH
27791: LD_INT 3
27793: PUSH
27794: LD_INT 60
27796: PUSH
27797: EMPTY
27798: LIST
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 3
27806: PUSH
27807: LD_INT 55
27809: PUSH
27810: EMPTY
27811: LIST
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PPUSH
27821: CALL_OW 72
27825: PUSH
27826: LD_INT 1
27828: ARRAY
27829: ST_TO_ADDR
// if IsInUnit ( driver ) then
27830: LD_VAR 0 18
27834: PPUSH
27835: CALL_OW 310
27839: IFFALSE 27850
// ComExit ( driver ) ;
27841: LD_VAR 0 18
27845: PPUSH
27846: CALL 53252 0 1
// AddComEnterUnit ( driver , tmp ) ;
27850: LD_VAR 0 18
27854: PPUSH
27855: LD_VAR 0 13
27859: PPUSH
27860: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27864: LD_VAR 0 18
27868: PPUSH
27869: LD_VAR 0 7
27873: PPUSH
27874: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27878: LD_VAR 0 18
27882: PPUSH
27883: CALL_OW 181
// end ; continue ;
27887: GO 27539
// end ; if not cleaners or not tmp in cleaners then
27889: LD_VAR 0 6
27893: NOT
27894: PUSH
27895: LD_VAR 0 13
27899: PUSH
27900: LD_VAR 0 6
27904: IN
27905: NOT
27906: OR
27907: IFFALSE 28214
// begin if dep then
27909: LD_VAR 0 17
27913: IFFALSE 28049
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27915: LD_ADDR_VAR 0 16
27919: PUSH
27920: LD_VAR 0 17
27924: PUSH
27925: LD_INT 1
27927: ARRAY
27928: PPUSH
27929: CALL_OW 250
27933: PPUSH
27934: LD_VAR 0 17
27938: PUSH
27939: LD_INT 1
27941: ARRAY
27942: PPUSH
27943: CALL_OW 254
27947: PPUSH
27948: LD_INT 5
27950: PPUSH
27951: CALL_OW 272
27955: PUSH
27956: LD_VAR 0 17
27960: PUSH
27961: LD_INT 1
27963: ARRAY
27964: PPUSH
27965: CALL_OW 251
27969: PPUSH
27970: LD_VAR 0 17
27974: PUSH
27975: LD_INT 1
27977: ARRAY
27978: PPUSH
27979: CALL_OW 254
27983: PPUSH
27984: LD_INT 5
27986: PPUSH
27987: CALL_OW 273
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27996: LD_VAR 0 16
28000: PUSH
28001: LD_INT 1
28003: ARRAY
28004: PPUSH
28005: LD_VAR 0 16
28009: PUSH
28010: LD_INT 2
28012: ARRAY
28013: PPUSH
28014: CALL_OW 488
28018: IFFALSE 28049
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28020: LD_VAR 0 13
28024: PPUSH
28025: LD_VAR 0 16
28029: PUSH
28030: LD_INT 1
28032: ARRAY
28033: PPUSH
28034: LD_VAR 0 16
28038: PUSH
28039: LD_INT 2
28041: ARRAY
28042: PPUSH
28043: CALL_OW 111
// continue ;
28047: GO 27539
// end ; end ; r := GetDir ( tmp ) ;
28049: LD_ADDR_VAR 0 15
28053: PUSH
28054: LD_VAR 0 13
28058: PPUSH
28059: CALL_OW 254
28063: ST_TO_ADDR
// if r = 5 then
28064: LD_VAR 0 15
28068: PUSH
28069: LD_INT 5
28071: EQUAL
28072: IFFALSE 28082
// r := 0 ;
28074: LD_ADDR_VAR 0 15
28078: PUSH
28079: LD_INT 0
28081: ST_TO_ADDR
// for j = r to 5 do
28082: LD_ADDR_VAR 0 10
28086: PUSH
28087: DOUBLE
28088: LD_VAR 0 15
28092: DEC
28093: ST_TO_ADDR
28094: LD_INT 5
28096: PUSH
28097: FOR_TO
28098: IFFALSE 28212
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28100: LD_ADDR_VAR 0 11
28104: PUSH
28105: LD_VAR 0 13
28109: PPUSH
28110: CALL_OW 250
28114: PPUSH
28115: LD_VAR 0 10
28119: PPUSH
28120: LD_INT 2
28122: PPUSH
28123: CALL_OW 272
28127: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28128: LD_ADDR_VAR 0 12
28132: PUSH
28133: LD_VAR 0 13
28137: PPUSH
28138: CALL_OW 251
28142: PPUSH
28143: LD_VAR 0 10
28147: PPUSH
28148: LD_INT 2
28150: PPUSH
28151: CALL_OW 273
28155: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28156: LD_VAR 0 11
28160: PPUSH
28161: LD_VAR 0 12
28165: PPUSH
28166: CALL_OW 488
28170: PUSH
28171: LD_VAR 0 11
28175: PPUSH
28176: LD_VAR 0 12
28180: PPUSH
28181: CALL_OW 428
28185: NOT
28186: AND
28187: IFFALSE 28210
// begin ComMoveXY ( tmp , _x , _y ) ;
28189: LD_VAR 0 13
28193: PPUSH
28194: LD_VAR 0 11
28198: PPUSH
28199: LD_VAR 0 12
28203: PPUSH
28204: CALL_OW 111
// break ;
28208: GO 28212
// end ; end ;
28210: GO 28097
28212: POP
28213: POP
// end ; end ;
28214: GO 27539
28216: POP
28217: POP
// end ;
28218: LD_VAR 0 8
28222: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28223: LD_INT 0
28225: PPUSH
// result := true ;
28226: LD_ADDR_VAR 0 3
28230: PUSH
28231: LD_INT 1
28233: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28234: LD_VAR 0 2
28238: PUSH
28239: LD_INT 24
28241: DOUBLE
28242: EQUAL
28243: IFTRUE 28253
28245: LD_INT 33
28247: DOUBLE
28248: EQUAL
28249: IFTRUE 28253
28251: GO 28278
28253: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28254: LD_ADDR_VAR 0 3
28258: PUSH
28259: LD_INT 32
28261: PPUSH
28262: LD_VAR 0 1
28266: PPUSH
28267: CALL_OW 321
28271: PUSH
28272: LD_INT 2
28274: EQUAL
28275: ST_TO_ADDR
28276: GO 28594
28278: LD_INT 20
28280: DOUBLE
28281: EQUAL
28282: IFTRUE 28286
28284: GO 28311
28286: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28287: LD_ADDR_VAR 0 3
28291: PUSH
28292: LD_INT 6
28294: PPUSH
28295: LD_VAR 0 1
28299: PPUSH
28300: CALL_OW 321
28304: PUSH
28305: LD_INT 2
28307: EQUAL
28308: ST_TO_ADDR
28309: GO 28594
28311: LD_INT 22
28313: DOUBLE
28314: EQUAL
28315: IFTRUE 28325
28317: LD_INT 36
28319: DOUBLE
28320: EQUAL
28321: IFTRUE 28325
28323: GO 28350
28325: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: LD_INT 15
28333: PPUSH
28334: LD_VAR 0 1
28338: PPUSH
28339: CALL_OW 321
28343: PUSH
28344: LD_INT 2
28346: EQUAL
28347: ST_TO_ADDR
28348: GO 28594
28350: LD_INT 30
28352: DOUBLE
28353: EQUAL
28354: IFTRUE 28358
28356: GO 28383
28358: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28359: LD_ADDR_VAR 0 3
28363: PUSH
28364: LD_INT 20
28366: PPUSH
28367: LD_VAR 0 1
28371: PPUSH
28372: CALL_OW 321
28376: PUSH
28377: LD_INT 2
28379: EQUAL
28380: ST_TO_ADDR
28381: GO 28594
28383: LD_INT 28
28385: DOUBLE
28386: EQUAL
28387: IFTRUE 28397
28389: LD_INT 21
28391: DOUBLE
28392: EQUAL
28393: IFTRUE 28397
28395: GO 28422
28397: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28398: LD_ADDR_VAR 0 3
28402: PUSH
28403: LD_INT 21
28405: PPUSH
28406: LD_VAR 0 1
28410: PPUSH
28411: CALL_OW 321
28415: PUSH
28416: LD_INT 2
28418: EQUAL
28419: ST_TO_ADDR
28420: GO 28594
28422: LD_INT 16
28424: DOUBLE
28425: EQUAL
28426: IFTRUE 28430
28428: GO 28455
28430: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28431: LD_ADDR_VAR 0 3
28435: PUSH
28436: LD_INT 84
28438: PPUSH
28439: LD_VAR 0 1
28443: PPUSH
28444: CALL_OW 321
28448: PUSH
28449: LD_INT 2
28451: EQUAL
28452: ST_TO_ADDR
28453: GO 28594
28455: LD_INT 19
28457: DOUBLE
28458: EQUAL
28459: IFTRUE 28469
28461: LD_INT 23
28463: DOUBLE
28464: EQUAL
28465: IFTRUE 28469
28467: GO 28494
28469: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28470: LD_ADDR_VAR 0 3
28474: PUSH
28475: LD_INT 83
28477: PPUSH
28478: LD_VAR 0 1
28482: PPUSH
28483: CALL_OW 321
28487: PUSH
28488: LD_INT 2
28490: EQUAL
28491: ST_TO_ADDR
28492: GO 28594
28494: LD_INT 17
28496: DOUBLE
28497: EQUAL
28498: IFTRUE 28502
28500: GO 28527
28502: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28503: LD_ADDR_VAR 0 3
28507: PUSH
28508: LD_INT 39
28510: PPUSH
28511: LD_VAR 0 1
28515: PPUSH
28516: CALL_OW 321
28520: PUSH
28521: LD_INT 2
28523: EQUAL
28524: ST_TO_ADDR
28525: GO 28594
28527: LD_INT 18
28529: DOUBLE
28530: EQUAL
28531: IFTRUE 28535
28533: GO 28560
28535: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28536: LD_ADDR_VAR 0 3
28540: PUSH
28541: LD_INT 40
28543: PPUSH
28544: LD_VAR 0 1
28548: PPUSH
28549: CALL_OW 321
28553: PUSH
28554: LD_INT 2
28556: EQUAL
28557: ST_TO_ADDR
28558: GO 28594
28560: LD_INT 27
28562: DOUBLE
28563: EQUAL
28564: IFTRUE 28568
28566: GO 28593
28568: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28569: LD_ADDR_VAR 0 3
28573: PUSH
28574: LD_INT 35
28576: PPUSH
28577: LD_VAR 0 1
28581: PPUSH
28582: CALL_OW 321
28586: PUSH
28587: LD_INT 2
28589: EQUAL
28590: ST_TO_ADDR
28591: GO 28594
28593: POP
// end ;
28594: LD_VAR 0 3
28598: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28599: LD_INT 0
28601: PPUSH
28602: PPUSH
28603: PPUSH
28604: PPUSH
28605: PPUSH
28606: PPUSH
28607: PPUSH
28608: PPUSH
28609: PPUSH
28610: PPUSH
28611: PPUSH
// result := false ;
28612: LD_ADDR_VAR 0 6
28616: PUSH
28617: LD_INT 0
28619: ST_TO_ADDR
// if btype = b_depot then
28620: LD_VAR 0 2
28624: PUSH
28625: LD_INT 0
28627: EQUAL
28628: IFFALSE 28640
// begin result := true ;
28630: LD_ADDR_VAR 0 6
28634: PUSH
28635: LD_INT 1
28637: ST_TO_ADDR
// exit ;
28638: GO 29466
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28640: LD_VAR 0 1
28644: NOT
28645: PUSH
28646: LD_VAR 0 1
28650: PPUSH
28651: CALL_OW 266
28655: PUSH
28656: LD_INT 0
28658: PUSH
28659: LD_INT 1
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: IN
28666: NOT
28667: OR
28668: PUSH
28669: LD_VAR 0 2
28673: NOT
28674: OR
28675: PUSH
28676: LD_VAR 0 5
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: LD_INT 2
28689: PUSH
28690: LD_INT 3
28692: PUSH
28693: LD_INT 4
28695: PUSH
28696: LD_INT 5
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: IN
28707: NOT
28708: OR
28709: PUSH
28710: LD_VAR 0 3
28714: PPUSH
28715: LD_VAR 0 4
28719: PPUSH
28720: CALL_OW 488
28724: NOT
28725: OR
28726: IFFALSE 28730
// exit ;
28728: GO 29466
// side := GetSide ( depot ) ;
28730: LD_ADDR_VAR 0 9
28734: PUSH
28735: LD_VAR 0 1
28739: PPUSH
28740: CALL_OW 255
28744: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28745: LD_VAR 0 9
28749: PPUSH
28750: LD_VAR 0 2
28754: PPUSH
28755: CALL 28223 0 2
28759: NOT
28760: IFFALSE 28764
// exit ;
28762: GO 29466
// pom := GetBase ( depot ) ;
28764: LD_ADDR_VAR 0 10
28768: PUSH
28769: LD_VAR 0 1
28773: PPUSH
28774: CALL_OW 274
28778: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28779: LD_ADDR_VAR 0 11
28783: PUSH
28784: LD_VAR 0 2
28788: PPUSH
28789: LD_VAR 0 1
28793: PPUSH
28794: CALL_OW 248
28798: PPUSH
28799: CALL_OW 450
28803: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28804: LD_VAR 0 10
28808: PPUSH
28809: LD_INT 1
28811: PPUSH
28812: CALL_OW 275
28816: PUSH
28817: LD_VAR 0 11
28821: PUSH
28822: LD_INT 1
28824: ARRAY
28825: GREATEREQUAL
28826: PUSH
28827: LD_VAR 0 10
28831: PPUSH
28832: LD_INT 2
28834: PPUSH
28835: CALL_OW 275
28839: PUSH
28840: LD_VAR 0 11
28844: PUSH
28845: LD_INT 2
28847: ARRAY
28848: GREATEREQUAL
28849: AND
28850: PUSH
28851: LD_VAR 0 10
28855: PPUSH
28856: LD_INT 3
28858: PPUSH
28859: CALL_OW 275
28863: PUSH
28864: LD_VAR 0 11
28868: PUSH
28869: LD_INT 3
28871: ARRAY
28872: GREATEREQUAL
28873: AND
28874: NOT
28875: IFFALSE 28879
// exit ;
28877: GO 29466
// if GetBType ( depot ) = b_depot then
28879: LD_VAR 0 1
28883: PPUSH
28884: CALL_OW 266
28888: PUSH
28889: LD_INT 0
28891: EQUAL
28892: IFFALSE 28904
// dist := 28 else
28894: LD_ADDR_VAR 0 14
28898: PUSH
28899: LD_INT 28
28901: ST_TO_ADDR
28902: GO 28912
// dist := 36 ;
28904: LD_ADDR_VAR 0 14
28908: PUSH
28909: LD_INT 36
28911: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28912: LD_VAR 0 1
28916: PPUSH
28917: LD_VAR 0 3
28921: PPUSH
28922: LD_VAR 0 4
28926: PPUSH
28927: CALL_OW 297
28931: PUSH
28932: LD_VAR 0 14
28936: GREATER
28937: IFFALSE 28941
// exit ;
28939: GO 29466
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28941: LD_ADDR_VAR 0 12
28945: PUSH
28946: LD_VAR 0 2
28950: PPUSH
28951: LD_VAR 0 3
28955: PPUSH
28956: LD_VAR 0 4
28960: PPUSH
28961: LD_VAR 0 5
28965: PPUSH
28966: LD_VAR 0 1
28970: PPUSH
28971: CALL_OW 248
28975: PPUSH
28976: LD_INT 0
28978: PPUSH
28979: CALL 29471 0 6
28983: ST_TO_ADDR
// if not hexes then
28984: LD_VAR 0 12
28988: NOT
28989: IFFALSE 28993
// exit ;
28991: GO 29466
// hex := GetHexInfo ( x , y ) ;
28993: LD_ADDR_VAR 0 15
28997: PUSH
28998: LD_VAR 0 3
29002: PPUSH
29003: LD_VAR 0 4
29007: PPUSH
29008: CALL_OW 546
29012: ST_TO_ADDR
// if hex [ 1 ] then
29013: LD_VAR 0 15
29017: PUSH
29018: LD_INT 1
29020: ARRAY
29021: IFFALSE 29025
// exit ;
29023: GO 29466
// height := hex [ 2 ] ;
29025: LD_ADDR_VAR 0 13
29029: PUSH
29030: LD_VAR 0 15
29034: PUSH
29035: LD_INT 2
29037: ARRAY
29038: ST_TO_ADDR
// for i = 1 to hexes do
29039: LD_ADDR_VAR 0 7
29043: PUSH
29044: DOUBLE
29045: LD_INT 1
29047: DEC
29048: ST_TO_ADDR
29049: LD_VAR 0 12
29053: PUSH
29054: FOR_TO
29055: IFFALSE 29385
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29057: LD_VAR 0 12
29061: PUSH
29062: LD_VAR 0 7
29066: ARRAY
29067: PUSH
29068: LD_INT 1
29070: ARRAY
29071: PPUSH
29072: LD_VAR 0 12
29076: PUSH
29077: LD_VAR 0 7
29081: ARRAY
29082: PUSH
29083: LD_INT 2
29085: ARRAY
29086: PPUSH
29087: CALL_OW 488
29091: NOT
29092: PUSH
29093: LD_VAR 0 12
29097: PUSH
29098: LD_VAR 0 7
29102: ARRAY
29103: PUSH
29104: LD_INT 1
29106: ARRAY
29107: PPUSH
29108: LD_VAR 0 12
29112: PUSH
29113: LD_VAR 0 7
29117: ARRAY
29118: PUSH
29119: LD_INT 2
29121: ARRAY
29122: PPUSH
29123: CALL_OW 428
29127: PUSH
29128: LD_INT 0
29130: GREATER
29131: OR
29132: PUSH
29133: LD_VAR 0 12
29137: PUSH
29138: LD_VAR 0 7
29142: ARRAY
29143: PUSH
29144: LD_INT 1
29146: ARRAY
29147: PPUSH
29148: LD_VAR 0 12
29152: PUSH
29153: LD_VAR 0 7
29157: ARRAY
29158: PUSH
29159: LD_INT 2
29161: ARRAY
29162: PPUSH
29163: CALL_OW 351
29167: OR
29168: IFFALSE 29174
// exit ;
29170: POP
29171: POP
29172: GO 29466
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29174: LD_ADDR_VAR 0 8
29178: PUSH
29179: LD_VAR 0 12
29183: PUSH
29184: LD_VAR 0 7
29188: ARRAY
29189: PUSH
29190: LD_INT 1
29192: ARRAY
29193: PPUSH
29194: LD_VAR 0 12
29198: PUSH
29199: LD_VAR 0 7
29203: ARRAY
29204: PUSH
29205: LD_INT 2
29207: ARRAY
29208: PPUSH
29209: CALL_OW 546
29213: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29214: LD_VAR 0 8
29218: PUSH
29219: LD_INT 1
29221: ARRAY
29222: PUSH
29223: LD_VAR 0 8
29227: PUSH
29228: LD_INT 2
29230: ARRAY
29231: PUSH
29232: LD_VAR 0 13
29236: PUSH
29237: LD_INT 2
29239: PLUS
29240: GREATER
29241: OR
29242: PUSH
29243: LD_VAR 0 8
29247: PUSH
29248: LD_INT 2
29250: ARRAY
29251: PUSH
29252: LD_VAR 0 13
29256: PUSH
29257: LD_INT 2
29259: MINUS
29260: LESS
29261: OR
29262: PUSH
29263: LD_VAR 0 8
29267: PUSH
29268: LD_INT 3
29270: ARRAY
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: LD_INT 8
29277: PUSH
29278: LD_INT 9
29280: PUSH
29281: LD_INT 10
29283: PUSH
29284: LD_INT 11
29286: PUSH
29287: LD_INT 12
29289: PUSH
29290: LD_INT 13
29292: PUSH
29293: LD_INT 16
29295: PUSH
29296: LD_INT 17
29298: PUSH
29299: LD_INT 18
29301: PUSH
29302: LD_INT 19
29304: PUSH
29305: LD_INT 20
29307: PUSH
29308: LD_INT 21
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: IN
29326: NOT
29327: OR
29328: PUSH
29329: LD_VAR 0 8
29333: PUSH
29334: LD_INT 5
29336: ARRAY
29337: NOT
29338: OR
29339: PUSH
29340: LD_VAR 0 8
29344: PUSH
29345: LD_INT 6
29347: ARRAY
29348: PUSH
29349: LD_INT 1
29351: PUSH
29352: LD_INT 2
29354: PUSH
29355: LD_INT 7
29357: PUSH
29358: LD_INT 9
29360: PUSH
29361: LD_INT 10
29363: PUSH
29364: LD_INT 11
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: IN
29375: NOT
29376: OR
29377: IFFALSE 29383
// exit ;
29379: POP
29380: POP
29381: GO 29466
// end ;
29383: GO 29054
29385: POP
29386: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29387: LD_VAR 0 9
29391: PPUSH
29392: LD_VAR 0 3
29396: PPUSH
29397: LD_VAR 0 4
29401: PPUSH
29402: LD_INT 20
29404: PPUSH
29405: CALL 21389 0 4
29409: PUSH
29410: LD_INT 4
29412: ARRAY
29413: IFFALSE 29417
// exit ;
29415: GO 29466
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29417: LD_VAR 0 2
29421: PUSH
29422: LD_INT 29
29424: PUSH
29425: LD_INT 30
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: IN
29432: PUSH
29433: LD_VAR 0 3
29437: PPUSH
29438: LD_VAR 0 4
29442: PPUSH
29443: LD_VAR 0 9
29447: PPUSH
29448: CALL_OW 440
29452: NOT
29453: AND
29454: IFFALSE 29458
// exit ;
29456: GO 29466
// result := true ;
29458: LD_ADDR_VAR 0 6
29462: PUSH
29463: LD_INT 1
29465: ST_TO_ADDR
// end ;
29466: LD_VAR 0 6
29470: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29471: LD_INT 0
29473: PPUSH
29474: PPUSH
29475: PPUSH
29476: PPUSH
29477: PPUSH
29478: PPUSH
29479: PPUSH
29480: PPUSH
29481: PPUSH
29482: PPUSH
29483: PPUSH
29484: PPUSH
29485: PPUSH
29486: PPUSH
29487: PPUSH
29488: PPUSH
29489: PPUSH
29490: PPUSH
29491: PPUSH
29492: PPUSH
29493: PPUSH
29494: PPUSH
29495: PPUSH
29496: PPUSH
29497: PPUSH
29498: PPUSH
29499: PPUSH
29500: PPUSH
29501: PPUSH
29502: PPUSH
29503: PPUSH
29504: PPUSH
29505: PPUSH
29506: PPUSH
29507: PPUSH
29508: PPUSH
29509: PPUSH
29510: PPUSH
29511: PPUSH
29512: PPUSH
29513: PPUSH
29514: PPUSH
29515: PPUSH
29516: PPUSH
29517: PPUSH
29518: PPUSH
29519: PPUSH
29520: PPUSH
29521: PPUSH
29522: PPUSH
29523: PPUSH
29524: PPUSH
29525: PPUSH
29526: PPUSH
29527: PPUSH
29528: PPUSH
29529: PPUSH
29530: PPUSH
// result = [ ] ;
29531: LD_ADDR_VAR 0 7
29535: PUSH
29536: EMPTY
29537: ST_TO_ADDR
// temp_list = [ ] ;
29538: LD_ADDR_VAR 0 9
29542: PUSH
29543: EMPTY
29544: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29545: LD_VAR 0 4
29549: PUSH
29550: LD_INT 0
29552: PUSH
29553: LD_INT 1
29555: PUSH
29556: LD_INT 2
29558: PUSH
29559: LD_INT 3
29561: PUSH
29562: LD_INT 4
29564: PUSH
29565: LD_INT 5
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: IN
29576: NOT
29577: PUSH
29578: LD_VAR 0 1
29582: PUSH
29583: LD_INT 0
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: IN
29593: PUSH
29594: LD_VAR 0 5
29598: PUSH
29599: LD_INT 1
29601: PUSH
29602: LD_INT 2
29604: PUSH
29605: LD_INT 3
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: LIST
29612: IN
29613: NOT
29614: AND
29615: OR
29616: IFFALSE 29620
// exit ;
29618: GO 48011
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29620: LD_VAR 0 1
29624: PUSH
29625: LD_INT 6
29627: PUSH
29628: LD_INT 7
29630: PUSH
29631: LD_INT 8
29633: PUSH
29634: LD_INT 13
29636: PUSH
29637: LD_INT 12
29639: PUSH
29640: LD_INT 15
29642: PUSH
29643: LD_INT 11
29645: PUSH
29646: LD_INT 14
29648: PUSH
29649: LD_INT 10
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: IN
29663: IFFALSE 29673
// btype = b_lab ;
29665: LD_ADDR_VAR 0 1
29669: PUSH
29670: LD_INT 6
29672: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29673: LD_VAR 0 6
29677: PUSH
29678: LD_INT 0
29680: PUSH
29681: LD_INT 1
29683: PUSH
29684: LD_INT 2
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: IN
29692: NOT
29693: PUSH
29694: LD_VAR 0 1
29698: PUSH
29699: LD_INT 0
29701: PUSH
29702: LD_INT 1
29704: PUSH
29705: LD_INT 2
29707: PUSH
29708: LD_INT 3
29710: PUSH
29711: LD_INT 6
29713: PUSH
29714: LD_INT 36
29716: PUSH
29717: LD_INT 4
29719: PUSH
29720: LD_INT 5
29722: PUSH
29723: LD_INT 31
29725: PUSH
29726: LD_INT 32
29728: PUSH
29729: LD_INT 33
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: IN
29745: NOT
29746: PUSH
29747: LD_VAR 0 6
29751: PUSH
29752: LD_INT 1
29754: EQUAL
29755: AND
29756: OR
29757: PUSH
29758: LD_VAR 0 1
29762: PUSH
29763: LD_INT 2
29765: PUSH
29766: LD_INT 3
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: IN
29773: NOT
29774: PUSH
29775: LD_VAR 0 6
29779: PUSH
29780: LD_INT 2
29782: EQUAL
29783: AND
29784: OR
29785: IFFALSE 29795
// mode = 0 ;
29787: LD_ADDR_VAR 0 6
29791: PUSH
29792: LD_INT 0
29794: ST_TO_ADDR
// case mode of 0 :
29795: LD_VAR 0 6
29799: PUSH
29800: LD_INT 0
29802: DOUBLE
29803: EQUAL
29804: IFTRUE 29808
29806: GO 41261
29808: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29809: LD_ADDR_VAR 0 11
29813: PUSH
29814: LD_INT 0
29816: PUSH
29817: LD_INT 0
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 0
29826: PUSH
29827: LD_INT 1
29829: NEG
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 1
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: LD_INT 1
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 0
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 1
29867: NEG
29868: PUSH
29869: LD_INT 0
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 1
29878: NEG
29879: PUSH
29880: LD_INT 1
29882: NEG
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: LD_INT 2
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 0
29902: PUSH
29903: LD_INT 2
29905: NEG
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: LD_INT 1
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 1
29924: PUSH
29925: LD_INT 2
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 0
29934: PUSH
29935: LD_INT 2
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 1
29944: NEG
29945: PUSH
29946: LD_INT 1
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: LD_INT 3
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 0
29965: PUSH
29966: LD_INT 3
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: LD_INT 2
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30002: LD_ADDR_VAR 0 12
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: LD_INT 0
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 0
30019: PUSH
30020: LD_INT 1
30022: NEG
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: LD_INT 0
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 1
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 0
30050: PUSH
30051: LD_INT 1
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 1
30060: NEG
30061: PUSH
30062: LD_INT 0
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 1
30071: NEG
30072: PUSH
30073: LD_INT 1
30075: NEG
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 1
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 2
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 2
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 1
30114: NEG
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 2
30125: NEG
30126: PUSH
30127: LD_INT 0
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 2
30136: NEG
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 2
30148: NEG
30149: PUSH
30150: LD_INT 1
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 3
30159: NEG
30160: PUSH
30161: LD_INT 0
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 3
30170: NEG
30171: PUSH
30172: LD_INT 1
30174: NEG
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30198: LD_ADDR_VAR 0 13
30202: PUSH
30203: LD_INT 0
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 0
30215: PUSH
30216: LD_INT 1
30218: NEG
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 1
30226: PUSH
30227: LD_INT 0
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 1
30236: PUSH
30237: LD_INT 1
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 0
30246: PUSH
30247: LD_INT 1
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 1
30256: NEG
30257: PUSH
30258: LD_INT 0
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 1
30267: NEG
30268: PUSH
30269: LD_INT 1
30271: NEG
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 1
30279: NEG
30280: PUSH
30281: LD_INT 2
30283: NEG
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 2
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 2
30301: PUSH
30302: LD_INT 2
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: PUSH
30312: LD_INT 2
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 2
30321: NEG
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 2
30333: NEG
30334: PUSH
30335: LD_INT 2
30337: NEG
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 2
30345: NEG
30346: PUSH
30347: LD_INT 3
30349: NEG
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 3
30357: NEG
30358: PUSH
30359: LD_INT 2
30361: NEG
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 3
30369: NEG
30370: PUSH
30371: LD_INT 3
30373: NEG
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30397: LD_ADDR_VAR 0 14
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 0
30414: PUSH
30415: LD_INT 1
30417: NEG
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 1
30425: PUSH
30426: LD_INT 0
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 1
30435: PUSH
30436: LD_INT 1
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 0
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 1
30455: NEG
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 1
30466: NEG
30467: PUSH
30468: LD_INT 1
30470: NEG
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 1
30478: NEG
30479: PUSH
30480: LD_INT 2
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 0
30490: PUSH
30491: LD_INT 2
30493: NEG
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 1
30501: PUSH
30502: LD_INT 1
30504: NEG
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 1
30512: PUSH
30513: LD_INT 2
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 0
30522: PUSH
30523: LD_INT 2
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 1
30532: NEG
30533: PUSH
30534: LD_INT 1
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 1
30543: NEG
30544: PUSH
30545: LD_INT 3
30547: NEG
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 0
30555: PUSH
30556: LD_INT 3
30558: NEG
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 1
30566: PUSH
30567: LD_INT 2
30569: NEG
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30593: LD_ADDR_VAR 0 15
30597: PUSH
30598: LD_INT 0
30600: PUSH
30601: LD_INT 0
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 0
30610: PUSH
30611: LD_INT 1
30613: NEG
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 1
30621: PUSH
30622: LD_INT 0
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 1
30631: PUSH
30632: LD_INT 1
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 0
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 1
30651: NEG
30652: PUSH
30653: LD_INT 0
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 1
30662: NEG
30663: PUSH
30664: LD_INT 1
30666: NEG
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: LD_INT 1
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 2
30685: PUSH
30686: LD_INT 0
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 2
30695: PUSH
30696: LD_INT 1
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 1
30705: NEG
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 2
30716: NEG
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 2
30727: NEG
30728: PUSH
30729: LD_INT 1
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 2
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 3
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 3
30760: PUSH
30761: LD_INT 1
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30786: LD_ADDR_VAR 0 16
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: LD_INT 0
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 0
30803: PUSH
30804: LD_INT 1
30806: NEG
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 1
30814: PUSH
30815: LD_INT 0
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 1
30824: PUSH
30825: LD_INT 1
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 0
30834: PUSH
30835: LD_INT 1
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 1
30844: NEG
30845: PUSH
30846: LD_INT 0
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 1
30855: NEG
30856: PUSH
30857: LD_INT 1
30859: NEG
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: LD_INT 2
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 2
30879: PUSH
30880: LD_INT 1
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 2
30889: PUSH
30890: LD_INT 2
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: LD_INT 2
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 2
30909: NEG
30910: PUSH
30911: LD_INT 1
30913: NEG
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 2
30921: NEG
30922: PUSH
30923: LD_INT 2
30925: NEG
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 3
30933: PUSH
30934: LD_INT 2
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 3
30943: PUSH
30944: LD_INT 3
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 2
30953: PUSH
30954: LD_INT 3
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30979: LD_ADDR_VAR 0 17
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 0
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 1
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 1
31017: PUSH
31018: LD_INT 1
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 0
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 1
31037: NEG
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 1
31048: NEG
31049: PUSH
31050: LD_INT 1
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 1
31060: NEG
31061: PUSH
31062: LD_INT 2
31064: NEG
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 0
31072: PUSH
31073: LD_INT 2
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 1
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 2
31094: PUSH
31095: LD_INT 0
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 2
31114: PUSH
31115: LD_INT 2
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: LD_INT 2
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 0
31134: PUSH
31135: LD_INT 2
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: NEG
31145: PUSH
31146: LD_INT 1
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 2
31155: NEG
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 2
31166: NEG
31167: PUSH
31168: LD_INT 1
31170: NEG
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 2
31178: NEG
31179: PUSH
31180: LD_INT 2
31182: NEG
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31209: LD_ADDR_VAR 0 18
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 0
31226: PUSH
31227: LD_INT 1
31229: NEG
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 1
31237: PUSH
31238: LD_INT 0
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 1
31247: PUSH
31248: LD_INT 1
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 0
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 1
31267: NEG
31268: PUSH
31269: LD_INT 0
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 1
31278: NEG
31279: PUSH
31280: LD_INT 1
31282: NEG
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 1
31290: NEG
31291: PUSH
31292: LD_INT 2
31294: NEG
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: LD_INT 2
31305: NEG
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 1
31313: PUSH
31314: LD_INT 1
31316: NEG
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 2
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 2
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 2
31344: PUSH
31345: LD_INT 2
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: LD_INT 2
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 0
31364: PUSH
31365: LD_INT 2
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 1
31374: NEG
31375: PUSH
31376: LD_INT 1
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 2
31385: NEG
31386: PUSH
31387: LD_INT 0
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 2
31396: NEG
31397: PUSH
31398: LD_INT 1
31400: NEG
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 2
31408: NEG
31409: PUSH
31410: LD_INT 2
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31439: LD_ADDR_VAR 0 19
31443: PUSH
31444: LD_INT 0
31446: PUSH
31447: LD_INT 0
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 0
31456: PUSH
31457: LD_INT 1
31459: NEG
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 1
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 0
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 1
31497: NEG
31498: PUSH
31499: LD_INT 0
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 1
31508: NEG
31509: PUSH
31510: LD_INT 1
31512: NEG
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 1
31520: NEG
31521: PUSH
31522: LD_INT 2
31524: NEG
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 0
31532: PUSH
31533: LD_INT 2
31535: NEG
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 1
31543: PUSH
31544: LD_INT 1
31546: NEG
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 2
31554: PUSH
31555: LD_INT 0
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 2
31564: PUSH
31565: LD_INT 1
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 2
31574: PUSH
31575: LD_INT 2
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 1
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 0
31594: PUSH
31595: LD_INT 2
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 1
31604: NEG
31605: PUSH
31606: LD_INT 1
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 2
31615: NEG
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 2
31626: NEG
31627: PUSH
31628: LD_INT 1
31630: NEG
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 2
31638: NEG
31639: PUSH
31640: LD_INT 2
31642: NEG
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31669: LD_ADDR_VAR 0 20
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: LD_INT 0
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 0
31686: PUSH
31687: LD_INT 1
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 1
31697: PUSH
31698: LD_INT 0
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: LD_INT 1
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 0
31717: PUSH
31718: LD_INT 1
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 1
31727: NEG
31728: PUSH
31729: LD_INT 0
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 1
31738: NEG
31739: PUSH
31740: LD_INT 1
31742: NEG
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 1
31750: NEG
31751: PUSH
31752: LD_INT 2
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 0
31762: PUSH
31763: LD_INT 2
31765: NEG
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 1
31773: PUSH
31774: LD_INT 1
31776: NEG
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 2
31784: PUSH
31785: LD_INT 0
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 2
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 2
31804: PUSH
31805: LD_INT 2
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 1
31814: PUSH
31815: LD_INT 2
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: LD_INT 2
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 1
31834: NEG
31835: PUSH
31836: LD_INT 1
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 2
31845: NEG
31846: PUSH
31847: LD_INT 0
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 2
31856: NEG
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 2
31868: NEG
31869: PUSH
31870: LD_INT 2
31872: NEG
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31899: LD_ADDR_VAR 0 21
31903: PUSH
31904: LD_INT 0
31906: PUSH
31907: LD_INT 0
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: LD_INT 1
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 1
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 1
31937: PUSH
31938: LD_INT 1
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 0
31947: PUSH
31948: LD_INT 1
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 1
31957: NEG
31958: PUSH
31959: LD_INT 0
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 1
31968: NEG
31969: PUSH
31970: LD_INT 1
31972: NEG
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 1
31980: NEG
31981: PUSH
31982: LD_INT 2
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 0
31992: PUSH
31993: LD_INT 2
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 2
32014: PUSH
32015: LD_INT 0
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 2
32024: PUSH
32025: LD_INT 1
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 2
32034: PUSH
32035: LD_INT 2
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 1
32044: PUSH
32045: LD_INT 2
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 0
32054: PUSH
32055: LD_INT 2
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 1
32064: NEG
32065: PUSH
32066: LD_INT 1
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: NEG
32076: PUSH
32077: LD_INT 0
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 2
32086: NEG
32087: PUSH
32088: LD_INT 1
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: LD_INT 2
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32129: LD_ADDR_VAR 0 22
32133: PUSH
32134: LD_INT 0
32136: PUSH
32137: LD_INT 0
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: LD_INT 1
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 1
32167: PUSH
32168: LD_INT 1
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 0
32177: PUSH
32178: LD_INT 1
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 1
32187: NEG
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 1
32198: NEG
32199: PUSH
32200: LD_INT 1
32202: NEG
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 1
32210: NEG
32211: PUSH
32212: LD_INT 2
32214: NEG
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 0
32222: PUSH
32223: LD_INT 2
32225: NEG
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: LD_INT 1
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 2
32244: PUSH
32245: LD_INT 0
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 2
32254: PUSH
32255: LD_INT 1
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 2
32264: PUSH
32265: LD_INT 2
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: LD_INT 2
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 0
32284: PUSH
32285: LD_INT 2
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 1
32294: NEG
32295: PUSH
32296: LD_INT 1
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 2
32305: NEG
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 2
32316: NEG
32317: PUSH
32318: LD_INT 1
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 2
32328: NEG
32329: PUSH
32330: LD_INT 2
32332: NEG
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32359: LD_ADDR_VAR 0 23
32363: PUSH
32364: LD_INT 0
32366: PUSH
32367: LD_INT 0
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: LD_INT 1
32379: NEG
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 1
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 1
32397: PUSH
32398: LD_INT 1
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: LD_INT 1
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 1
32417: NEG
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 1
32428: NEG
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 1
32440: NEG
32441: PUSH
32442: LD_INT 2
32444: NEG
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: LD_INT 2
32455: NEG
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: LD_INT 1
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 2
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 2
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 2
32494: PUSH
32495: LD_INT 2
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: LD_INT 2
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 0
32514: PUSH
32515: LD_INT 2
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 1
32524: NEG
32525: PUSH
32526: LD_INT 1
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 2
32535: NEG
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 2
32546: NEG
32547: PUSH
32548: LD_INT 1
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 2
32558: NEG
32559: PUSH
32560: LD_INT 2
32562: NEG
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 2
32570: NEG
32571: PUSH
32572: LD_INT 3
32574: NEG
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 1
32582: NEG
32583: PUSH
32584: LD_INT 3
32586: NEG
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: LD_INT 2
32597: NEG
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 2
32605: PUSH
32606: LD_INT 1
32608: NEG
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32639: LD_ADDR_VAR 0 24
32643: PUSH
32644: LD_INT 0
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 0
32656: PUSH
32657: LD_INT 1
32659: NEG
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: LD_INT 0
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 1
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: LD_INT 0
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 1
32708: NEG
32709: PUSH
32710: LD_INT 1
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 1
32720: NEG
32721: PUSH
32722: LD_INT 2
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: LD_INT 2
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: LD_INT 1
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 2
32754: PUSH
32755: LD_INT 0
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 2
32764: PUSH
32765: LD_INT 1
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 1
32784: PUSH
32785: LD_INT 2
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 0
32794: PUSH
32795: LD_INT 2
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 1
32804: NEG
32805: PUSH
32806: LD_INT 1
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 2
32815: NEG
32816: PUSH
32817: LD_INT 0
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 2
32826: NEG
32827: PUSH
32828: LD_INT 1
32830: NEG
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 2
32838: NEG
32839: PUSH
32840: LD_INT 2
32842: NEG
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 1
32850: PUSH
32851: LD_INT 2
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 2
32861: PUSH
32862: LD_INT 1
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 3
32872: PUSH
32873: LD_INT 1
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 3
32882: PUSH
32883: LD_INT 2
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32915: LD_ADDR_VAR 0 25
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: LD_INT 0
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: LD_INT 1
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: LD_INT 0
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: LD_INT 1
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 0
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 1
32973: NEG
32974: PUSH
32975: LD_INT 0
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 1
32984: NEG
32985: PUSH
32986: LD_INT 1
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 1
32996: NEG
32997: PUSH
32998: LD_INT 2
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 0
33008: PUSH
33009: LD_INT 2
33011: NEG
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: LD_INT 1
33022: NEG
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 2
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 2
33050: PUSH
33051: LD_INT 2
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 1
33060: PUSH
33061: LD_INT 2
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: LD_INT 2
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: LD_INT 1
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 2
33091: NEG
33092: PUSH
33093: LD_INT 0
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 2
33102: NEG
33103: PUSH
33104: LD_INT 1
33106: NEG
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 2
33114: NEG
33115: PUSH
33116: LD_INT 2
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 3
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 3
33136: PUSH
33137: LD_INT 2
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 2
33146: PUSH
33147: LD_INT 3
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 3
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33189: LD_ADDR_VAR 0 26
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: LD_INT 0
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: LD_INT 1
33209: NEG
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: LD_INT 0
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 1
33227: PUSH
33228: LD_INT 1
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: LD_INT 1
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 1
33247: NEG
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 1
33258: NEG
33259: PUSH
33260: LD_INT 1
33262: NEG
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 1
33270: NEG
33271: PUSH
33272: LD_INT 2
33274: NEG
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: LD_INT 2
33285: NEG
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: PUSH
33294: LD_INT 1
33296: NEG
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 2
33304: PUSH
33305: LD_INT 0
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 2
33314: PUSH
33315: LD_INT 1
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 2
33324: PUSH
33325: LD_INT 2
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: LD_INT 2
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 0
33344: PUSH
33345: LD_INT 2
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 1
33354: NEG
33355: PUSH
33356: LD_INT 1
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 2
33365: NEG
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 2
33376: NEG
33377: PUSH
33378: LD_INT 1
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 2
33388: NEG
33389: PUSH
33390: LD_INT 2
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 2
33400: PUSH
33401: LD_INT 3
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: LD_INT 3
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 1
33420: NEG
33421: PUSH
33422: LD_INT 2
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 2
33431: NEG
33432: PUSH
33433: LD_INT 1
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33465: LD_ADDR_VAR 0 27
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: LD_INT 1
33485: NEG
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 1
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 1
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 0
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 1
33523: NEG
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: LD_INT 1
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 1
33546: NEG
33547: PUSH
33548: LD_INT 2
33550: NEG
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 0
33558: PUSH
33559: LD_INT 2
33561: NEG
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 1
33569: PUSH
33570: LD_INT 1
33572: NEG
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 2
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 2
33590: PUSH
33591: LD_INT 1
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 2
33600: PUSH
33601: LD_INT 2
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: LD_INT 2
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 0
33620: PUSH
33621: LD_INT 2
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 1
33630: NEG
33631: PUSH
33632: LD_INT 1
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 2
33641: NEG
33642: PUSH
33643: LD_INT 0
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 2
33664: NEG
33665: PUSH
33666: LD_INT 2
33668: NEG
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 1
33676: NEG
33677: PUSH
33678: LD_INT 2
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 2
33687: NEG
33688: PUSH
33689: LD_INT 1
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 3
33698: NEG
33699: PUSH
33700: LD_INT 1
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 3
33710: NEG
33711: PUSH
33712: LD_INT 2
33714: NEG
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33745: LD_ADDR_VAR 0 28
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: LD_INT 0
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: LD_INT 1
33765: NEG
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 1
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: LD_INT 1
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: LD_INT 1
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 1
33803: NEG
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: LD_INT 1
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: NEG
33827: PUSH
33828: LD_INT 2
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 1
33849: PUSH
33850: LD_INT 1
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: LD_INT 0
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: LD_INT 1
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 2
33880: PUSH
33881: LD_INT 2
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 1
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 0
33900: PUSH
33901: LD_INT 2
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: NEG
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 2
33921: NEG
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 2
33932: NEG
33933: PUSH
33934: LD_INT 1
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 2
33944: NEG
33945: PUSH
33946: LD_INT 2
33948: NEG
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 2
33956: NEG
33957: PUSH
33958: LD_INT 3
33960: NEG
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: LD_INT 3
33972: NEG
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 3
33980: NEG
33981: PUSH
33982: LD_INT 1
33984: NEG
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 3
33992: NEG
33993: PUSH
33994: LD_INT 2
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34027: LD_ADDR_VAR 0 29
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: LD_INT 0
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 0
34044: PUSH
34045: LD_INT 1
34047: NEG
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: LD_INT 0
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 0
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: PUSH
34087: LD_INT 0
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: NEG
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 1
34108: NEG
34109: PUSH
34110: LD_INT 2
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 0
34120: PUSH
34121: LD_INT 2
34123: NEG
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 1
34131: PUSH
34132: LD_INT 1
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 2
34142: PUSH
34143: LD_INT 0
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 2
34152: PUSH
34153: LD_INT 1
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 1
34162: PUSH
34163: LD_INT 2
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 0
34172: PUSH
34173: LD_INT 2
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: NEG
34183: PUSH
34184: LD_INT 1
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 2
34193: NEG
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 2
34205: NEG
34206: PUSH
34207: LD_INT 2
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 2
34217: NEG
34218: PUSH
34219: LD_INT 3
34221: NEG
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 2
34229: PUSH
34230: LD_INT 1
34232: NEG
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 3
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 1
34250: PUSH
34251: LD_INT 3
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 1
34260: NEG
34261: PUSH
34262: LD_INT 2
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 3
34271: NEG
34272: PUSH
34273: LD_INT 2
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34306: LD_ADDR_VAR 0 30
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 0
34323: PUSH
34324: LD_INT 1
34326: NEG
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: LD_INT 0
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: LD_INT 1
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: NEG
34365: PUSH
34366: LD_INT 0
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 1
34375: NEG
34376: PUSH
34377: LD_INT 1
34379: NEG
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 1
34387: NEG
34388: PUSH
34389: LD_INT 2
34391: NEG
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 0
34399: PUSH
34400: LD_INT 2
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: LD_INT 0
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 2
34431: PUSH
34432: LD_INT 1
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 2
34441: PUSH
34442: LD_INT 2
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: PUSH
34452: LD_INT 2
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 1
34461: NEG
34462: PUSH
34463: LD_INT 1
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 2
34472: NEG
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 2
34483: NEG
34484: PUSH
34485: LD_INT 1
34487: NEG
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 1
34495: NEG
34496: PUSH
34497: LD_INT 3
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: PUSH
34508: LD_INT 2
34510: NEG
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 3
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 2
34528: PUSH
34529: LD_INT 3
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 2
34538: NEG
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 3
34549: NEG
34550: PUSH
34551: LD_INT 1
34553: NEG
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34584: LD_ADDR_VAR 0 31
34588: PUSH
34589: LD_INT 0
34591: PUSH
34592: LD_INT 0
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: LD_INT 1
34604: NEG
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: LD_INT 0
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: LD_INT 1
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 1
34642: NEG
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 1
34653: NEG
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: NEG
34666: PUSH
34667: LD_INT 2
34669: NEG
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 1
34677: PUSH
34678: LD_INT 1
34680: NEG
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 2
34698: PUSH
34699: LD_INT 1
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 2
34708: PUSH
34709: LD_INT 2
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 1
34718: PUSH
34719: LD_INT 2
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 0
34728: PUSH
34729: LD_INT 2
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 1
34738: NEG
34739: PUSH
34740: LD_INT 1
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 2
34749: NEG
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 2
34761: NEG
34762: PUSH
34763: LD_INT 2
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 2
34773: NEG
34774: PUSH
34775: LD_INT 3
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 2
34785: PUSH
34786: LD_INT 1
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 3
34796: PUSH
34797: LD_INT 1
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 1
34806: PUSH
34807: LD_INT 3
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 1
34816: NEG
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 3
34827: NEG
34828: PUSH
34829: LD_INT 2
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34862: LD_ADDR_VAR 0 32
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: LD_INT 0
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: LD_INT 1
34882: NEG
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 1
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: LD_INT 1
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 0
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: NEG
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 1
34931: NEG
34932: PUSH
34933: LD_INT 1
34935: NEG
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 1
34943: NEG
34944: PUSH
34945: LD_INT 2
34947: NEG
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: LD_INT 2
34958: NEG
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: PUSH
34967: LD_INT 1
34969: NEG
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 2
34977: PUSH
34978: LD_INT 1
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 2
34987: PUSH
34988: LD_INT 2
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: LD_INT 2
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: LD_INT 2
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 1
35017: NEG
35018: PUSH
35019: LD_INT 1
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 2
35028: NEG
35029: PUSH
35030: LD_INT 0
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 2
35039: NEG
35040: PUSH
35041: LD_INT 1
35043: NEG
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 1
35051: NEG
35052: PUSH
35053: LD_INT 3
35055: NEG
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: LD_INT 2
35066: NEG
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 3
35074: PUSH
35075: LD_INT 2
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: LD_INT 3
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 2
35094: NEG
35095: PUSH
35096: LD_INT 1
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 3
35105: NEG
35106: PUSH
35107: LD_INT 1
35109: NEG
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35140: LD_ADDR_VAR 0 33
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: LD_INT 1
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 1
35178: PUSH
35179: LD_INT 1
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: LD_INT 1
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 1
35209: NEG
35210: PUSH
35211: LD_INT 1
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: LD_INT 2
35225: NEG
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: LD_INT 1
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 2
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 2
35254: PUSH
35255: LD_INT 1
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: PUSH
35265: LD_INT 2
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: LD_INT 2
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 1
35284: NEG
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 2
35306: NEG
35307: PUSH
35308: LD_INT 1
35310: NEG
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 2
35318: NEG
35319: PUSH
35320: LD_INT 2
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 2
35330: NEG
35331: PUSH
35332: LD_INT 3
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 2
35342: PUSH
35343: LD_INT 1
35345: NEG
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 3
35353: PUSH
35354: LD_INT 1
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 1
35363: PUSH
35364: LD_INT 3
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 1
35373: NEG
35374: PUSH
35375: LD_INT 2
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 3
35384: NEG
35385: PUSH
35386: LD_INT 2
35388: NEG
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35419: LD_ADDR_VAR 0 34
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: LD_INT 1
35439: NEG
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 1
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: LD_INT 1
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 1
35477: NEG
35478: PUSH
35479: LD_INT 0
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 1
35488: NEG
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 1
35500: NEG
35501: PUSH
35502: LD_INT 2
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 0
35512: PUSH
35513: LD_INT 2
35515: NEG
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 1
35523: PUSH
35524: LD_INT 1
35526: NEG
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 2
35534: PUSH
35535: LD_INT 1
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 2
35544: PUSH
35545: LD_INT 2
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: LD_INT 2
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 1
35564: NEG
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 2
35575: NEG
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: NEG
35587: PUSH
35588: LD_INT 1
35590: NEG
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 2
35598: NEG
35599: PUSH
35600: LD_INT 2
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 1
35610: NEG
35611: PUSH
35612: LD_INT 3
35614: NEG
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: LD_INT 2
35625: NEG
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 3
35633: PUSH
35634: LD_INT 2
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 2
35643: PUSH
35644: LD_INT 3
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 2
35653: NEG
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 3
35664: NEG
35665: PUSH
35666: LD_INT 1
35668: NEG
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35699: LD_ADDR_VAR 0 35
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: LD_INT 1
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: NEG
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 2
35790: NEG
35791: PUSH
35792: LD_INT 1
35794: NEG
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35811: LD_ADDR_VAR 0 36
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 1
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: NEG
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 1
35892: NEG
35893: PUSH
35894: LD_INT 2
35896: NEG
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 1
35904: PUSH
35905: LD_INT 2
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35923: LD_ADDR_VAR 0 37
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: LD_INT 1
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 0
35971: PUSH
35972: LD_INT 1
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 1
35981: NEG
35982: PUSH
35983: LD_INT 0
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 1
35992: NEG
35993: PUSH
35994: LD_INT 1
35996: NEG
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 1
36004: PUSH
36005: LD_INT 1
36007: NEG
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36035: LD_ADDR_VAR 0 38
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: LD_INT 0
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: LD_INT 1
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 1
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: PUSH
36074: LD_INT 1
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: LD_INT 1
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 1
36104: NEG
36105: PUSH
36106: LD_INT 1
36108: NEG
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 2
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 2
36126: NEG
36127: PUSH
36128: LD_INT 1
36130: NEG
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36147: LD_ADDR_VAR 0 39
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: LD_INT 1
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: NEG
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: NEG
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: LD_INT 2
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36259: LD_ADDR_VAR 0 40
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: NEG
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 1
36351: NEG
36352: PUSH
36353: LD_INT 1
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36371: LD_ADDR_VAR 0 41
36375: PUSH
36376: LD_INT 0
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 0
36388: PUSH
36389: LD_INT 1
36391: NEG
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 1
36409: PUSH
36410: LD_INT 1
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 0
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 1
36429: NEG
36430: PUSH
36431: LD_INT 0
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 1
36440: NEG
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 1
36452: NEG
36453: PUSH
36454: LD_INT 2
36456: NEG
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: LD_INT 1
36467: NEG
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 2
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 2
36485: PUSH
36486: LD_INT 1
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 2
36495: PUSH
36496: LD_INT 2
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: LD_INT 2
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 1
36515: NEG
36516: PUSH
36517: LD_INT 1
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 2
36526: NEG
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 2
36537: NEG
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 2
36549: NEG
36550: PUSH
36551: LD_INT 2
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 2
36561: NEG
36562: PUSH
36563: LD_INT 3
36565: NEG
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 2
36573: PUSH
36574: LD_INT 1
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 3
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 3
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 3
36604: PUSH
36605: LD_INT 2
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 3
36614: PUSH
36615: LD_INT 3
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 2
36624: PUSH
36625: LD_INT 3
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 2
36634: NEG
36635: PUSH
36636: LD_INT 1
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 3
36645: NEG
36646: PUSH
36647: LD_INT 0
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 3
36656: NEG
36657: PUSH
36658: LD_INT 1
36660: NEG
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 3
36668: NEG
36669: PUSH
36670: LD_INT 2
36672: NEG
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 3
36680: NEG
36681: PUSH
36682: LD_INT 3
36684: NEG
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36721: LD_ADDR_VAR 0 42
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: LD_INT 0
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: LD_INT 1
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: PUSH
36760: LD_INT 1
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 0
36769: PUSH
36770: LD_INT 1
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: LD_INT 1
36794: NEG
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: LD_INT 2
36806: NEG
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 0
36814: PUSH
36815: LD_INT 2
36817: NEG
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: LD_INT 1
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 2
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 2
36846: PUSH
36847: LD_INT 2
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 1
36856: PUSH
36857: LD_INT 2
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: LD_INT 1
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 2
36887: NEG
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 2
36899: NEG
36900: PUSH
36901: LD_INT 2
36903: NEG
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 2
36911: NEG
36912: PUSH
36913: LD_INT 3
36915: NEG
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 1
36923: NEG
36924: PUSH
36925: LD_INT 3
36927: NEG
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: LD_INT 3
36938: NEG
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: LD_INT 2
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 3
36957: PUSH
36958: LD_INT 2
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 3
36967: PUSH
36968: LD_INT 3
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 2
36977: PUSH
36978: LD_INT 3
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 1
36987: PUSH
36988: LD_INT 3
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: LD_INT 3
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 1
37007: NEG
37008: PUSH
37009: LD_INT 2
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 3
37018: NEG
37019: PUSH
37020: LD_INT 2
37022: NEG
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 3
37030: NEG
37031: PUSH
37032: LD_INT 3
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37071: LD_ADDR_VAR 0 43
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 1
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 1
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: LD_INT 1
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 1
37129: NEG
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: LD_INT 1
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: NEG
37153: PUSH
37154: LD_INT 2
37156: NEG
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: LD_INT 2
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 2
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 1
37206: PUSH
37207: LD_INT 2
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: LD_INT 2
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 1
37226: NEG
37227: PUSH
37228: LD_INT 1
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 2
37237: NEG
37238: PUSH
37239: LD_INT 0
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 2
37248: NEG
37249: PUSH
37250: LD_INT 1
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 1
37260: NEG
37261: PUSH
37262: LD_INT 3
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: LD_INT 3
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: LD_INT 2
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 2
37294: PUSH
37295: LD_INT 1
37297: NEG
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 3
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 3
37315: PUSH
37316: LD_INT 1
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 1
37325: PUSH
37326: LD_INT 3
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: LD_INT 3
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: LD_INT 2
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 2
37356: NEG
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 3
37367: NEG
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 3
37378: NEG
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37419: LD_ADDR_VAR 0 44
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 0
37436: PUSH
37437: LD_INT 1
37439: NEG
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 1
37457: PUSH
37458: LD_INT 1
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: LD_INT 1
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PUSH
37490: LD_INT 1
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: NEG
37501: PUSH
37502: LD_INT 2
37504: NEG
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 1
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 2
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: PUSH
37534: LD_INT 1
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 2
37543: PUSH
37544: LD_INT 2
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 1
37553: PUSH
37554: LD_INT 2
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 1
37563: NEG
37564: PUSH
37565: LD_INT 1
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 2
37574: NEG
37575: PUSH
37576: LD_INT 0
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 2
37585: NEG
37586: PUSH
37587: LD_INT 1
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 2
37597: NEG
37598: PUSH
37599: LD_INT 2
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 2
37609: NEG
37610: PUSH
37611: LD_INT 3
37613: NEG
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 2
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 3
37632: PUSH
37633: LD_INT 0
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 3
37642: PUSH
37643: LD_INT 1
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 3
37652: PUSH
37653: LD_INT 2
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 3
37662: PUSH
37663: LD_INT 3
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 3
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 2
37682: NEG
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 3
37693: NEG
37694: PUSH
37695: LD_INT 0
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 3
37704: NEG
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 3
37716: NEG
37717: PUSH
37718: LD_INT 2
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 3
37728: NEG
37729: PUSH
37730: LD_INT 3
37732: NEG
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37769: LD_ADDR_VAR 0 45
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 0
37786: PUSH
37787: LD_INT 1
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 1
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 0
37817: PUSH
37818: LD_INT 1
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 1
37827: NEG
37828: PUSH
37829: LD_INT 0
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 1
37838: NEG
37839: PUSH
37840: LD_INT 1
37842: NEG
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 1
37850: NEG
37851: PUSH
37852: LD_INT 2
37854: NEG
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 0
37862: PUSH
37863: LD_INT 2
37865: NEG
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: PUSH
37874: LD_INT 1
37876: NEG
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 2
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: LD_INT 2
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: LD_INT 2
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: LD_INT 1
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 2
37935: NEG
37936: PUSH
37937: LD_INT 1
37939: NEG
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 2
37947: NEG
37948: PUSH
37949: LD_INT 2
37951: NEG
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 2
37959: NEG
37960: PUSH
37961: LD_INT 3
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 1
37971: NEG
37972: PUSH
37973: LD_INT 3
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: LD_INT 3
37986: NEG
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 1
37994: PUSH
37995: LD_INT 2
37997: NEG
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 3
38005: PUSH
38006: LD_INT 2
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 3
38015: PUSH
38016: LD_INT 3
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 2
38025: PUSH
38026: LD_INT 3
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 1
38035: PUSH
38036: LD_INT 3
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: LD_INT 3
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: LD_INT 2
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 3
38066: NEG
38067: PUSH
38068: LD_INT 2
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 3
38078: NEG
38079: PUSH
38080: LD_INT 3
38082: NEG
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38119: LD_ADDR_VAR 0 46
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: LD_INT 1
38139: NEG
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 1
38147: PUSH
38148: LD_INT 0
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 1
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 0
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 1
38177: NEG
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 1
38188: NEG
38189: PUSH
38190: LD_INT 1
38192: NEG
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: LD_INT 2
38204: NEG
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 0
38212: PUSH
38213: LD_INT 2
38215: NEG
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 1
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 2
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 2
38244: PUSH
38245: LD_INT 1
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 1
38254: PUSH
38255: LD_INT 2
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 0
38264: PUSH
38265: LD_INT 2
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 1
38274: NEG
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 2
38285: NEG
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 2
38296: NEG
38297: PUSH
38298: LD_INT 1
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: NEG
38309: PUSH
38310: LD_INT 3
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: LD_INT 3
38323: NEG
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: LD_INT 2
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 2
38342: PUSH
38343: LD_INT 1
38345: NEG
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 3
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 3
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: LD_INT 3
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: LD_INT 3
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: LD_INT 2
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 2
38404: NEG
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 3
38415: NEG
38416: PUSH
38417: LD_INT 0
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 3
38426: NEG
38427: PUSH
38428: LD_INT 1
38430: NEG
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38467: LD_ADDR_VAR 0 47
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 1
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 0
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 1
38525: NEG
38526: PUSH
38527: LD_INT 0
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: LD_INT 1
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: LD_INT 2
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 0
38560: PUSH
38561: LD_INT 2
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 2
38582: NEG
38583: PUSH
38584: LD_INT 1
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 2
38594: NEG
38595: PUSH
38596: LD_INT 2
38598: NEG
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38618: LD_ADDR_VAR 0 48
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: LD_INT 0
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 0
38635: PUSH
38636: LD_INT 1
38638: NEG
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 1
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: LD_INT 1
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 0
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 1
38687: NEG
38688: PUSH
38689: LD_INT 1
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: LD_INT 2
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 0
38711: PUSH
38712: LD_INT 2
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: LD_INT 1
38725: NEG
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 2
38733: PUSH
38734: LD_INT 0
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 2
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38765: LD_ADDR_VAR 0 49
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 0
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 1
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: LD_INT 0
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: NEG
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 2
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 2
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: LD_INT 2
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38909: LD_ADDR_VAR 0 50
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: LD_INT 1
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 1
38967: NEG
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 1
38978: NEG
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 2
39000: PUSH
39001: LD_INT 2
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 0
39020: PUSH
39021: LD_INT 2
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 1
39030: NEG
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39053: LD_ADDR_VAR 0 51
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 0
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: PUSH
39135: LD_INT 2
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: LD_INT 2
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: NEG
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 2
39165: NEG
39166: PUSH
39167: LD_INT 0
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 2
39176: NEG
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39200: LD_ADDR_VAR 0 52
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 1
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: LD_INT 1
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 1
39258: NEG
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 1
39269: NEG
39270: PUSH
39271: LD_INT 1
39273: NEG
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 1
39281: NEG
39282: PUSH
39283: LD_INT 2
39285: NEG
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 2
39304: NEG
39305: PUSH
39306: LD_INT 0
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 2
39315: NEG
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 2
39327: NEG
39328: PUSH
39329: LD_INT 2
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39351: LD_ADDR_VAR 0 53
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: LD_INT 1
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 0
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: LD_INT 0
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: NEG
39433: PUSH
39434: LD_INT 2
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: LD_INT 2
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: LD_INT 1
39458: NEG
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: LD_INT 2
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 1
39516: NEG
39517: PUSH
39518: LD_INT 1
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 2
39527: NEG
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 2
39538: NEG
39539: PUSH
39540: LD_INT 1
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 2
39550: NEG
39551: PUSH
39552: LD_INT 2
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39581: LD_ADDR_VAR 0 54
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: LD_INT 1
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: NEG
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: NEG
39663: PUSH
39664: LD_INT 2
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 0
39674: PUSH
39675: LD_INT 2
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 2
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: LD_INT 2
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: LD_INT 2
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 2
39757: NEG
39758: PUSH
39759: LD_INT 0
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 2
39768: NEG
39769: PUSH
39770: LD_INT 1
39772: NEG
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 2
39780: NEG
39781: PUSH
39782: LD_INT 2
39784: NEG
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39811: LD_ADDR_VAR 0 55
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: LD_INT 0
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 1
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: LD_INT 2
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: LD_INT 2
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: LD_INT 0
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: LD_INT 2
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 1
39956: PUSH
39957: LD_INT 2
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 2
39987: NEG
39988: PUSH
39989: LD_INT 0
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 2
39998: NEG
39999: PUSH
40000: LD_INT 1
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 2
40010: NEG
40011: PUSH
40012: LD_INT 2
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40041: LD_ADDR_VAR 0 56
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 1
40099: NEG
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: LD_INT 1
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: LD_INT 2
40126: NEG
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: LD_INT 2
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: LD_INT 1
40148: NEG
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 2
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 2
40217: NEG
40218: PUSH
40219: LD_INT 0
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 2
40228: NEG
40229: PUSH
40230: LD_INT 1
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 2
40240: NEG
40241: PUSH
40242: LD_INT 2
40244: NEG
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40271: LD_ADDR_VAR 0 57
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: LD_INT 1
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: LD_INT 2
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: LD_INT 2
40367: NEG
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 2
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 2
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 2
40447: NEG
40448: PUSH
40449: LD_INT 0
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 2
40458: NEG
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 2
40470: NEG
40471: PUSH
40472: LD_INT 2
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40501: LD_ADDR_VAR 0 58
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: NEG
40583: PUSH
40584: LD_INT 2
40586: NEG
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: LD_INT 2
40597: NEG
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: LD_INT 1
40608: NEG
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 2
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: LD_INT 2
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: LD_INT 2
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: NEG
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 2
40688: NEG
40689: PUSH
40690: LD_INT 1
40692: NEG
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 2
40700: NEG
40701: PUSH
40702: LD_INT 2
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40731: LD_ADDR_VAR 0 59
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: LD_INT 0
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: LD_INT 1
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 1
40789: NEG
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: NEG
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40819: LD_ADDR_VAR 0 60
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: LD_INT 1
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40907: LD_ADDR_VAR 0 61
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: LD_INT 1
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: LD_INT 0
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40995: LD_ADDR_VAR 0 62
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41083: LD_ADDR_VAR 0 63
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: PUSH
41154: LD_INT 1
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41171: LD_ADDR_VAR 0 64
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 1
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: ST_TO_ADDR
// end ; 1 :
41259: GO 47156
41261: LD_INT 1
41263: DOUBLE
41264: EQUAL
41265: IFTRUE 41269
41267: GO 43892
41269: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41270: LD_ADDR_VAR 0 11
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: LD_INT 3
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 3
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: LIST
41313: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41314: LD_ADDR_VAR 0 12
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 3
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 3
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: LIST
41354: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41355: LD_ADDR_VAR 0 13
41359: PUSH
41360: LD_INT 3
41362: PUSH
41363: LD_INT 2
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 3
41372: PUSH
41373: LD_INT 3
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: LD_INT 3
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: LIST
41394: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41395: LD_ADDR_VAR 0 14
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: LD_INT 3
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: LD_INT 3
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: LD_INT 2
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: LIST
41435: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41436: LD_ADDR_VAR 0 15
41440: PUSH
41441: LD_INT 2
41443: NEG
41444: PUSH
41445: LD_INT 1
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 3
41454: NEG
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 3
41465: NEG
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: LIST
41479: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41480: LD_ADDR_VAR 0 16
41484: PUSH
41485: LD_INT 2
41487: NEG
41488: PUSH
41489: LD_INT 3
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 3
41499: NEG
41500: PUSH
41501: LD_INT 2
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 3
41511: NEG
41512: PUSH
41513: LD_INT 3
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: LIST
41525: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41526: LD_ADDR_VAR 0 17
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: LD_INT 3
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: LD_INT 3
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: LD_INT 2
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: LIST
41569: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41570: LD_ADDR_VAR 0 18
41574: PUSH
41575: LD_INT 2
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 3
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 3
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: LIST
41610: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41611: LD_ADDR_VAR 0 19
41615: PUSH
41616: LD_INT 3
41618: PUSH
41619: LD_INT 2
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 3
41628: PUSH
41629: LD_INT 3
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 2
41638: PUSH
41639: LD_INT 3
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: LIST
41650: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41651: LD_ADDR_VAR 0 20
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: LD_INT 3
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 0
41668: PUSH
41669: LD_INT 3
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: LD_INT 2
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: LIST
41691: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41692: LD_ADDR_VAR 0 21
41696: PUSH
41697: LD_INT 2
41699: NEG
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 3
41710: NEG
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 3
41721: NEG
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: LIST
41735: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41736: LD_ADDR_VAR 0 22
41740: PUSH
41741: LD_INT 2
41743: NEG
41744: PUSH
41745: LD_INT 3
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 3
41755: NEG
41756: PUSH
41757: LD_INT 2
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 3
41767: NEG
41768: PUSH
41769: LD_INT 3
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: LIST
41781: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41782: LD_ADDR_VAR 0 23
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: LD_INT 3
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: LD_INT 4
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: LD_INT 3
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: LIST
41825: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41826: LD_ADDR_VAR 0 24
41830: PUSH
41831: LD_INT 3
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 3
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 4
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: LIST
41866: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41867: LD_ADDR_VAR 0 25
41871: PUSH
41872: LD_INT 3
41874: PUSH
41875: LD_INT 3
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 4
41884: PUSH
41885: LD_INT 3
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 3
41894: PUSH
41895: LD_INT 4
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: LIST
41906: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41907: LD_ADDR_VAR 0 26
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 3
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: LD_INT 4
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: LD_INT 3
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: LIST
41947: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41948: LD_ADDR_VAR 0 27
41952: PUSH
41953: LD_INT 3
41955: NEG
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 3
41966: NEG
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 4
41977: NEG
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: LIST
41991: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41992: LD_ADDR_VAR 0 28
41996: PUSH
41997: LD_INT 3
41999: NEG
42000: PUSH
42001: LD_INT 3
42003: NEG
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 3
42011: NEG
42012: PUSH
42013: LD_INT 4
42015: NEG
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 4
42023: NEG
42024: PUSH
42025: LD_INT 3
42027: NEG
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: LIST
42037: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42038: LD_ADDR_VAR 0 29
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: LD_INT 3
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: LD_INT 3
42060: NEG
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: LD_INT 2
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: LD_INT 4
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 4
42094: NEG
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: LD_INT 3
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 1
42113: NEG
42114: PUSH
42115: LD_INT 5
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: LD_INT 5
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 1
42136: PUSH
42137: LD_INT 4
42139: NEG
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: LD_INT 6
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 6
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: LD_INT 5
42173: NEG
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42193: LD_ADDR_VAR 0 30
42197: PUSH
42198: LD_INT 2
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 3
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 3
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 3
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 4
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 4
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 4
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 5
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 5
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 5
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 6
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 6
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42336: LD_ADDR_VAR 0 31
42340: PUSH
42341: LD_INT 3
42343: PUSH
42344: LD_INT 2
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 3
42353: PUSH
42354: LD_INT 3
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 2
42363: PUSH
42364: LD_INT 3
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 4
42373: PUSH
42374: LD_INT 3
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 4
42383: PUSH
42384: LD_INT 4
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 3
42393: PUSH
42394: LD_INT 4
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 5
42403: PUSH
42404: LD_INT 4
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 5
42413: PUSH
42414: LD_INT 5
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 4
42423: PUSH
42424: LD_INT 5
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 6
42433: PUSH
42434: LD_INT 5
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 6
42443: PUSH
42444: LD_INT 6
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 5
42453: PUSH
42454: LD_INT 6
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42475: LD_ADDR_VAR 0 32
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 3
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 3
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 2
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: LD_INT 4
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 4
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: LD_INT 3
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: PUSH
42545: LD_INT 5
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 5
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: LD_INT 4
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: LD_INT 6
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: LD_INT 6
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: NEG
42596: PUSH
42597: LD_INT 5
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42618: LD_ADDR_VAR 0 33
42622: PUSH
42623: LD_INT 2
42625: NEG
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 3
42636: NEG
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 3
42647: NEG
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 3
42659: NEG
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 4
42670: NEG
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 4
42681: NEG
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 4
42693: NEG
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 5
42704: NEG
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 5
42715: NEG
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 5
42727: NEG
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 6
42738: NEG
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 6
42749: NEG
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42773: LD_ADDR_VAR 0 34
42777: PUSH
42778: LD_INT 2
42780: NEG
42781: PUSH
42782: LD_INT 3
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 3
42792: NEG
42793: PUSH
42794: LD_INT 2
42796: NEG
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 3
42804: NEG
42805: PUSH
42806: LD_INT 3
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 3
42816: NEG
42817: PUSH
42818: LD_INT 4
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 4
42828: NEG
42829: PUSH
42830: LD_INT 3
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 4
42840: NEG
42841: PUSH
42842: LD_INT 4
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 4
42852: NEG
42853: PUSH
42854: LD_INT 5
42856: NEG
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 5
42864: NEG
42865: PUSH
42866: LD_INT 4
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 5
42876: NEG
42877: PUSH
42878: LD_INT 5
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 5
42888: NEG
42889: PUSH
42890: LD_INT 6
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 6
42900: NEG
42901: PUSH
42902: LD_INT 5
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 6
42912: NEG
42913: PUSH
42914: LD_INT 6
42916: NEG
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42936: LD_ADDR_VAR 0 41
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: LD_INT 3
42958: NEG
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: LD_INT 2
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42980: LD_ADDR_VAR 0 42
42984: PUSH
42985: LD_INT 2
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 3
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: LIST
43020: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43021: LD_ADDR_VAR 0 43
43025: PUSH
43026: LD_INT 2
43028: PUSH
43029: LD_INT 2
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 3
43038: PUSH
43039: LD_INT 2
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: PUSH
43049: LD_INT 3
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: LIST
43060: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43061: LD_ADDR_VAR 0 44
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: LD_INT 3
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: LD_INT 2
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: LIST
43101: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43102: LD_ADDR_VAR 0 45
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 3
43131: NEG
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: LIST
43145: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43146: LD_ADDR_VAR 0 46
43150: PUSH
43151: LD_INT 2
43153: NEG
43154: PUSH
43155: LD_INT 2
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 2
43165: NEG
43166: PUSH
43167: LD_INT 3
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 3
43177: NEG
43178: PUSH
43179: LD_INT 2
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: LIST
43191: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43192: LD_ADDR_VAR 0 47
43196: PUSH
43197: LD_INT 2
43199: NEG
43200: PUSH
43201: LD_INT 3
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: LD_INT 3
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43225: LD_ADDR_VAR 0 48
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: LD_INT 2
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43256: LD_ADDR_VAR 0 49
43260: PUSH
43261: LD_INT 3
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 3
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43285: LD_ADDR_VAR 0 50
43289: PUSH
43290: LD_INT 2
43292: PUSH
43293: LD_INT 3
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43314: LD_ADDR_VAR 0 51
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 2
43332: NEG
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43345: LD_ADDR_VAR 0 52
43349: PUSH
43350: LD_INT 3
43352: NEG
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 3
43364: NEG
43365: PUSH
43366: LD_INT 2
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43378: LD_ADDR_VAR 0 53
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: LD_INT 3
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 3
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: LD_INT 2
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: LIST
43421: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43422: LD_ADDR_VAR 0 54
43426: PUSH
43427: LD_INT 2
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 3
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 3
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: LIST
43462: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43463: LD_ADDR_VAR 0 55
43467: PUSH
43468: LD_INT 3
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 3
43480: PUSH
43481: LD_INT 3
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 2
43490: PUSH
43491: LD_INT 3
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: LIST
43502: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43503: LD_ADDR_VAR 0 56
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: LD_INT 3
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: LD_INT 3
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: LIST
43543: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43544: LD_ADDR_VAR 0 57
43548: PUSH
43549: LD_INT 2
43551: NEG
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 3
43562: NEG
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 3
43573: NEG
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43588: LD_ADDR_VAR 0 58
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: LD_INT 3
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 3
43607: NEG
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 3
43619: NEG
43620: PUSH
43621: LD_INT 3
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: LIST
43633: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43634: LD_ADDR_VAR 0 59
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 2
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: LIST
43677: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43678: LD_ADDR_VAR 0 60
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: LIST
43718: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43719: LD_ADDR_VAR 0 61
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: LIST
43758: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43759: LD_ADDR_VAR 0 62
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: LD_INT 2
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: LD_INT 2
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 1
43786: NEG
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: LIST
43799: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43800: LD_ADDR_VAR 0 63
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 2
43818: NEG
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 2
43829: NEG
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: LIST
43843: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43844: LD_ADDR_VAR 0 64
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: LD_INT 2
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 2
43863: NEG
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: LD_INT 2
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: LIST
43889: ST_TO_ADDR
// end ; 2 :
43890: GO 47156
43892: LD_INT 2
43894: DOUBLE
43895: EQUAL
43896: IFTRUE 43900
43898: GO 47155
43900: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43901: LD_ADDR_VAR 0 29
43905: PUSH
43906: LD_INT 4
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 4
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 5
43929: PUSH
43930: LD_INT 0
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 5
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 4
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 3
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 3
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 3
43980: PUSH
43981: LD_INT 2
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 5
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 3
44001: PUSH
44002: LD_INT 3
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 3
44011: PUSH
44012: LD_INT 2
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 4
44021: PUSH
44022: LD_INT 3
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 4
44031: PUSH
44032: LD_INT 4
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 3
44041: PUSH
44042: LD_INT 4
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: LD_INT 3
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: LD_INT 2
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 4
44071: PUSH
44072: LD_INT 2
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: LD_INT 4
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: LD_INT 4
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 3
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: LD_INT 4
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: LD_INT 5
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: LD_INT 5
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: LD_INT 4
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: LD_INT 3
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 2
44163: PUSH
44164: LD_INT 5
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: LD_INT 3
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 3
44184: NEG
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 3
44195: NEG
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 2
44218: NEG
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 3
44229: NEG
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 4
44240: NEG
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 4
44251: NEG
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 4
44263: NEG
44264: PUSH
44265: LD_INT 2
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 2
44275: NEG
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 4
44286: NEG
44287: PUSH
44288: LD_INT 4
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 4
44298: NEG
44299: PUSH
44300: LD_INT 5
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 3
44310: NEG
44311: PUSH
44312: LD_INT 4
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 3
44322: NEG
44323: PUSH
44324: LD_INT 3
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 4
44334: NEG
44335: PUSH
44336: LD_INT 3
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 5
44346: NEG
44347: PUSH
44348: LD_INT 4
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 5
44358: NEG
44359: PUSH
44360: LD_INT 5
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 3
44370: NEG
44371: PUSH
44372: LD_INT 5
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 5
44382: NEG
44383: PUSH
44384: LD_INT 3
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44439: LD_ADDR_VAR 0 30
44443: PUSH
44444: LD_INT 4
44446: PUSH
44447: LD_INT 4
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 4
44456: PUSH
44457: LD_INT 3
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 5
44466: PUSH
44467: LD_INT 4
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 5
44476: PUSH
44477: LD_INT 5
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 4
44486: PUSH
44487: LD_INT 5
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 3
44496: PUSH
44497: LD_INT 4
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 3
44506: PUSH
44507: LD_INT 3
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 5
44516: PUSH
44517: LD_INT 3
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 3
44526: PUSH
44527: LD_INT 5
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: LD_INT 3
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: LD_INT 3
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: LD_INT 4
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 4
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 3
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: LD_INT 2
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: LD_INT 4
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 2
44618: NEG
44619: PUSH
44620: LD_INT 2
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 4
44629: NEG
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 4
44640: NEG
44641: PUSH
44642: LD_INT 1
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 3
44652: NEG
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 3
44663: NEG
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 4
44674: NEG
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 5
44685: NEG
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 5
44696: NEG
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 5
44708: NEG
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 3
44720: NEG
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 3
44731: NEG
44732: PUSH
44733: LD_INT 3
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 3
44743: NEG
44744: PUSH
44745: LD_INT 4
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 2
44755: NEG
44756: PUSH
44757: LD_INT 3
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 3
44779: NEG
44780: PUSH
44781: LD_INT 2
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 4
44791: NEG
44792: PUSH
44793: LD_INT 3
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 4
44803: NEG
44804: PUSH
44805: LD_INT 4
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: LD_INT 4
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 4
44827: NEG
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: LD_INT 4
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: LD_INT 5
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 4
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: LD_INT 3
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 3
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: LD_INT 4
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: LD_INT 5
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: LD_INT 3
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 2
44929: NEG
44930: PUSH
44931: LD_INT 5
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44986: LD_ADDR_VAR 0 31
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: LD_INT 4
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 3
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: LD_INT 4
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: LD_INT 5
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 5
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: LD_INT 4
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: LD_INT 3
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: LD_INT 5
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: LD_INT 3
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 3
45086: NEG
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 3
45097: NEG
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: NEG
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 2
45120: NEG
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 3
45131: NEG
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 4
45142: NEG
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 4
45153: NEG
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 4
45165: NEG
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: LD_INT 2
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 4
45188: NEG
45189: PUSH
45190: LD_INT 4
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 4
45200: NEG
45201: PUSH
45202: LD_INT 5
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 3
45212: NEG
45213: PUSH
45214: LD_INT 4
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 3
45224: NEG
45225: PUSH
45226: LD_INT 3
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 4
45236: NEG
45237: PUSH
45238: LD_INT 3
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 5
45248: NEG
45249: PUSH
45250: LD_INT 4
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 5
45260: NEG
45261: PUSH
45262: LD_INT 5
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 3
45272: NEG
45273: PUSH
45274: LD_INT 5
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 5
45284: NEG
45285: PUSH
45286: LD_INT 3
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: LD_INT 3
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 4
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: LD_INT 3
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: LD_INT 2
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: LD_INT 3
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: LD_INT 4
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 2
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 2
45386: NEG
45387: PUSH
45388: LD_INT 4
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 4
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 4
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 5
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 5
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 4
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 3
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 3
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 3
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 5
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45536: LD_ADDR_VAR 0 32
45540: PUSH
45541: LD_INT 4
45543: NEG
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 4
45554: NEG
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 3
45566: NEG
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 3
45577: NEG
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 4
45588: NEG
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 5
45599: NEG
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 5
45610: NEG
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 5
45622: NEG
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 3
45634: NEG
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 3
45645: NEG
45646: PUSH
45647: LD_INT 3
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 3
45657: NEG
45658: PUSH
45659: LD_INT 4
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 2
45669: NEG
45670: PUSH
45671: LD_INT 3
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: NEG
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 3
45693: NEG
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 4
45705: NEG
45706: PUSH
45707: LD_INT 3
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 4
45717: NEG
45718: PUSH
45719: LD_INT 4
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: LD_INT 4
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 4
45741: NEG
45742: PUSH
45743: LD_INT 2
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: LD_INT 4
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 5
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 4
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: LD_INT 3
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: LD_INT 3
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 4
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: LD_INT 5
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: PUSH
45833: LD_INT 3
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: LD_INT 5
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 3
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 3
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 4
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 4
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 3
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: LD_INT 2
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 4
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 4
45948: PUSH
45949: LD_INT 4
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 4
45958: PUSH
45959: LD_INT 3
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 5
45968: PUSH
45969: LD_INT 4
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 5
45978: PUSH
45979: LD_INT 5
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 4
45988: PUSH
45989: LD_INT 5
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 3
45998: PUSH
45999: LD_INT 4
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 3
46008: PUSH
46009: LD_INT 3
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 5
46018: PUSH
46019: LD_INT 3
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 3
46028: PUSH
46029: LD_INT 5
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46083: LD_ADDR_VAR 0 33
46087: PUSH
46088: LD_INT 4
46090: NEG
46091: PUSH
46092: LD_INT 4
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 4
46102: NEG
46103: PUSH
46104: LD_INT 5
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 3
46114: NEG
46115: PUSH
46116: LD_INT 4
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 3
46126: NEG
46127: PUSH
46128: LD_INT 3
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 4
46138: NEG
46139: PUSH
46140: LD_INT 3
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 5
46150: NEG
46151: PUSH
46152: LD_INT 4
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 5
46162: NEG
46163: PUSH
46164: LD_INT 5
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 3
46174: NEG
46175: PUSH
46176: LD_INT 5
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 5
46186: NEG
46187: PUSH
46188: LD_INT 3
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: LD_INT 3
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 4
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: LD_INT 3
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 2
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: LD_INT 2
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 3
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: LD_INT 4
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: LD_INT 2
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: LD_INT 4
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 4
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 4
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 5
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 5
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 4
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 3
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 3
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 3
46372: PUSH
46373: LD_INT 2
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 5
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 3
46393: PUSH
46394: LD_INT 3
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 3
46403: PUSH
46404: LD_INT 2
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 4
46413: PUSH
46414: LD_INT 3
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 4
46423: PUSH
46424: LD_INT 4
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 3
46433: PUSH
46434: LD_INT 4
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: LD_INT 3
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 4
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 4
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: LD_INT 4
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 3
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 4
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 5
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 5
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 4
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: LD_INT 3
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: LD_INT 5
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: LD_INT 3
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46621: LD_ADDR_VAR 0 34
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 4
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 5
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 4
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 3
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: LD_INT 3
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: LD_INT 4
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 5
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: LD_INT 3
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: LD_INT 5
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 3
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 3
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 4
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 4
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 3
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 2
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 4
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 4
46823: PUSH
46824: LD_INT 4
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 4
46833: PUSH
46834: LD_INT 3
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 5
46843: PUSH
46844: LD_INT 4
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 5
46853: PUSH
46854: LD_INT 5
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 4
46863: PUSH
46864: LD_INT 5
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 3
46873: PUSH
46874: LD_INT 4
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 3
46883: PUSH
46884: LD_INT 3
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 5
46893: PUSH
46894: LD_INT 3
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 3
46903: PUSH
46904: LD_INT 5
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: LD_INT 3
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: LD_INT 3
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 4
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 4
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: LD_INT 3
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 2
46985: PUSH
46986: LD_INT 4
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: LD_INT 2
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 4
47006: NEG
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 4
47017: NEG
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 3
47029: NEG
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 3
47040: NEG
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 4
47051: NEG
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 5
47062: NEG
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 5
47073: NEG
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 5
47085: NEG
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 3
47097: NEG
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: ST_TO_ADDR
// end ; end ;
47153: GO 47156
47155: POP
// case btype of b_depot , b_warehouse :
47156: LD_VAR 0 1
47160: PUSH
47161: LD_INT 0
47163: DOUBLE
47164: EQUAL
47165: IFTRUE 47175
47167: LD_INT 1
47169: DOUBLE
47170: EQUAL
47171: IFTRUE 47175
47173: GO 47376
47175: POP
// case nation of nation_american :
47176: LD_VAR 0 5
47180: PUSH
47181: LD_INT 1
47183: DOUBLE
47184: EQUAL
47185: IFTRUE 47189
47187: GO 47245
47189: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47190: LD_ADDR_VAR 0 9
47194: PUSH
47195: LD_VAR 0 11
47199: PUSH
47200: LD_VAR 0 12
47204: PUSH
47205: LD_VAR 0 13
47209: PUSH
47210: LD_VAR 0 14
47214: PUSH
47215: LD_VAR 0 15
47219: PUSH
47220: LD_VAR 0 16
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: PUSH
47233: LD_VAR 0 4
47237: PUSH
47238: LD_INT 1
47240: PLUS
47241: ARRAY
47242: ST_TO_ADDR
47243: GO 47374
47245: LD_INT 2
47247: DOUBLE
47248: EQUAL
47249: IFTRUE 47253
47251: GO 47309
47253: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47254: LD_ADDR_VAR 0 9
47258: PUSH
47259: LD_VAR 0 17
47263: PUSH
47264: LD_VAR 0 18
47268: PUSH
47269: LD_VAR 0 19
47273: PUSH
47274: LD_VAR 0 20
47278: PUSH
47279: LD_VAR 0 21
47283: PUSH
47284: LD_VAR 0 22
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: PUSH
47297: LD_VAR 0 4
47301: PUSH
47302: LD_INT 1
47304: PLUS
47305: ARRAY
47306: ST_TO_ADDR
47307: GO 47374
47309: LD_INT 3
47311: DOUBLE
47312: EQUAL
47313: IFTRUE 47317
47315: GO 47373
47317: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47318: LD_ADDR_VAR 0 9
47322: PUSH
47323: LD_VAR 0 23
47327: PUSH
47328: LD_VAR 0 24
47332: PUSH
47333: LD_VAR 0 25
47337: PUSH
47338: LD_VAR 0 26
47342: PUSH
47343: LD_VAR 0 27
47347: PUSH
47348: LD_VAR 0 28
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: PUSH
47361: LD_VAR 0 4
47365: PUSH
47366: LD_INT 1
47368: PLUS
47369: ARRAY
47370: ST_TO_ADDR
47371: GO 47374
47373: POP
47374: GO 47929
47376: LD_INT 2
47378: DOUBLE
47379: EQUAL
47380: IFTRUE 47390
47382: LD_INT 3
47384: DOUBLE
47385: EQUAL
47386: IFTRUE 47390
47388: GO 47446
47390: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47391: LD_ADDR_VAR 0 9
47395: PUSH
47396: LD_VAR 0 29
47400: PUSH
47401: LD_VAR 0 30
47405: PUSH
47406: LD_VAR 0 31
47410: PUSH
47411: LD_VAR 0 32
47415: PUSH
47416: LD_VAR 0 33
47420: PUSH
47421: LD_VAR 0 34
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: PUSH
47434: LD_VAR 0 4
47438: PUSH
47439: LD_INT 1
47441: PLUS
47442: ARRAY
47443: ST_TO_ADDR
47444: GO 47929
47446: LD_INT 16
47448: DOUBLE
47449: EQUAL
47450: IFTRUE 47508
47452: LD_INT 17
47454: DOUBLE
47455: EQUAL
47456: IFTRUE 47508
47458: LD_INT 18
47460: DOUBLE
47461: EQUAL
47462: IFTRUE 47508
47464: LD_INT 19
47466: DOUBLE
47467: EQUAL
47468: IFTRUE 47508
47470: LD_INT 22
47472: DOUBLE
47473: EQUAL
47474: IFTRUE 47508
47476: LD_INT 20
47478: DOUBLE
47479: EQUAL
47480: IFTRUE 47508
47482: LD_INT 21
47484: DOUBLE
47485: EQUAL
47486: IFTRUE 47508
47488: LD_INT 23
47490: DOUBLE
47491: EQUAL
47492: IFTRUE 47508
47494: LD_INT 24
47496: DOUBLE
47497: EQUAL
47498: IFTRUE 47508
47500: LD_INT 25
47502: DOUBLE
47503: EQUAL
47504: IFTRUE 47508
47506: GO 47564
47508: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47509: LD_ADDR_VAR 0 9
47513: PUSH
47514: LD_VAR 0 35
47518: PUSH
47519: LD_VAR 0 36
47523: PUSH
47524: LD_VAR 0 37
47528: PUSH
47529: LD_VAR 0 38
47533: PUSH
47534: LD_VAR 0 39
47538: PUSH
47539: LD_VAR 0 40
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: PUSH
47552: LD_VAR 0 4
47556: PUSH
47557: LD_INT 1
47559: PLUS
47560: ARRAY
47561: ST_TO_ADDR
47562: GO 47929
47564: LD_INT 6
47566: DOUBLE
47567: EQUAL
47568: IFTRUE 47620
47570: LD_INT 7
47572: DOUBLE
47573: EQUAL
47574: IFTRUE 47620
47576: LD_INT 8
47578: DOUBLE
47579: EQUAL
47580: IFTRUE 47620
47582: LD_INT 13
47584: DOUBLE
47585: EQUAL
47586: IFTRUE 47620
47588: LD_INT 12
47590: DOUBLE
47591: EQUAL
47592: IFTRUE 47620
47594: LD_INT 15
47596: DOUBLE
47597: EQUAL
47598: IFTRUE 47620
47600: LD_INT 11
47602: DOUBLE
47603: EQUAL
47604: IFTRUE 47620
47606: LD_INT 14
47608: DOUBLE
47609: EQUAL
47610: IFTRUE 47620
47612: LD_INT 10
47614: DOUBLE
47615: EQUAL
47616: IFTRUE 47620
47618: GO 47676
47620: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47621: LD_ADDR_VAR 0 9
47625: PUSH
47626: LD_VAR 0 41
47630: PUSH
47631: LD_VAR 0 42
47635: PUSH
47636: LD_VAR 0 43
47640: PUSH
47641: LD_VAR 0 44
47645: PUSH
47646: LD_VAR 0 45
47650: PUSH
47651: LD_VAR 0 46
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: PUSH
47664: LD_VAR 0 4
47668: PUSH
47669: LD_INT 1
47671: PLUS
47672: ARRAY
47673: ST_TO_ADDR
47674: GO 47929
47676: LD_INT 36
47678: DOUBLE
47679: EQUAL
47680: IFTRUE 47684
47682: GO 47740
47684: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47685: LD_ADDR_VAR 0 9
47689: PUSH
47690: LD_VAR 0 47
47694: PUSH
47695: LD_VAR 0 48
47699: PUSH
47700: LD_VAR 0 49
47704: PUSH
47705: LD_VAR 0 50
47709: PUSH
47710: LD_VAR 0 51
47714: PUSH
47715: LD_VAR 0 52
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: PUSH
47728: LD_VAR 0 4
47732: PUSH
47733: LD_INT 1
47735: PLUS
47736: ARRAY
47737: ST_TO_ADDR
47738: GO 47929
47740: LD_INT 4
47742: DOUBLE
47743: EQUAL
47744: IFTRUE 47766
47746: LD_INT 5
47748: DOUBLE
47749: EQUAL
47750: IFTRUE 47766
47752: LD_INT 34
47754: DOUBLE
47755: EQUAL
47756: IFTRUE 47766
47758: LD_INT 37
47760: DOUBLE
47761: EQUAL
47762: IFTRUE 47766
47764: GO 47822
47766: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47767: LD_ADDR_VAR 0 9
47771: PUSH
47772: LD_VAR 0 53
47776: PUSH
47777: LD_VAR 0 54
47781: PUSH
47782: LD_VAR 0 55
47786: PUSH
47787: LD_VAR 0 56
47791: PUSH
47792: LD_VAR 0 57
47796: PUSH
47797: LD_VAR 0 58
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: PUSH
47810: LD_VAR 0 4
47814: PUSH
47815: LD_INT 1
47817: PLUS
47818: ARRAY
47819: ST_TO_ADDR
47820: GO 47929
47822: LD_INT 31
47824: DOUBLE
47825: EQUAL
47826: IFTRUE 47872
47828: LD_INT 32
47830: DOUBLE
47831: EQUAL
47832: IFTRUE 47872
47834: LD_INT 33
47836: DOUBLE
47837: EQUAL
47838: IFTRUE 47872
47840: LD_INT 27
47842: DOUBLE
47843: EQUAL
47844: IFTRUE 47872
47846: LD_INT 26
47848: DOUBLE
47849: EQUAL
47850: IFTRUE 47872
47852: LD_INT 28
47854: DOUBLE
47855: EQUAL
47856: IFTRUE 47872
47858: LD_INT 29
47860: DOUBLE
47861: EQUAL
47862: IFTRUE 47872
47864: LD_INT 30
47866: DOUBLE
47867: EQUAL
47868: IFTRUE 47872
47870: GO 47928
47872: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47873: LD_ADDR_VAR 0 9
47877: PUSH
47878: LD_VAR 0 59
47882: PUSH
47883: LD_VAR 0 60
47887: PUSH
47888: LD_VAR 0 61
47892: PUSH
47893: LD_VAR 0 62
47897: PUSH
47898: LD_VAR 0 63
47902: PUSH
47903: LD_VAR 0 64
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: PUSH
47916: LD_VAR 0 4
47920: PUSH
47921: LD_INT 1
47923: PLUS
47924: ARRAY
47925: ST_TO_ADDR
47926: GO 47929
47928: POP
// temp_list2 = [ ] ;
47929: LD_ADDR_VAR 0 10
47933: PUSH
47934: EMPTY
47935: ST_TO_ADDR
// for i in temp_list do
47936: LD_ADDR_VAR 0 8
47940: PUSH
47941: LD_VAR 0 9
47945: PUSH
47946: FOR_IN
47947: IFFALSE 47999
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47949: LD_ADDR_VAR 0 10
47953: PUSH
47954: LD_VAR 0 10
47958: PUSH
47959: LD_VAR 0 8
47963: PUSH
47964: LD_INT 1
47966: ARRAY
47967: PUSH
47968: LD_VAR 0 2
47972: PLUS
47973: PUSH
47974: LD_VAR 0 8
47978: PUSH
47979: LD_INT 2
47981: ARRAY
47982: PUSH
47983: LD_VAR 0 3
47987: PLUS
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: EMPTY
47994: LIST
47995: ADD
47996: ST_TO_ADDR
47997: GO 47946
47999: POP
48000: POP
// result = temp_list2 ;
48001: LD_ADDR_VAR 0 7
48005: PUSH
48006: LD_VAR 0 10
48010: ST_TO_ADDR
// end ;
48011: LD_VAR 0 7
48015: RET
// export function EnemyInRange ( unit , dist ) ; begin
48016: LD_INT 0
48018: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48019: LD_ADDR_VAR 0 3
48023: PUSH
48024: LD_VAR 0 1
48028: PPUSH
48029: CALL_OW 255
48033: PPUSH
48034: LD_VAR 0 1
48038: PPUSH
48039: CALL_OW 250
48043: PPUSH
48044: LD_VAR 0 1
48048: PPUSH
48049: CALL_OW 251
48053: PPUSH
48054: LD_VAR 0 2
48058: PPUSH
48059: CALL 21389 0 4
48063: PUSH
48064: LD_INT 4
48066: ARRAY
48067: ST_TO_ADDR
// end ;
48068: LD_VAR 0 3
48072: RET
// export function PlayerSeeMe ( unit ) ; begin
48073: LD_INT 0
48075: PPUSH
// result := See ( your_side , unit ) ;
48076: LD_ADDR_VAR 0 2
48080: PUSH
48081: LD_OWVAR 2
48085: PPUSH
48086: LD_VAR 0 1
48090: PPUSH
48091: CALL_OW 292
48095: ST_TO_ADDR
// end ;
48096: LD_VAR 0 2
48100: RET
// export function ReverseDir ( unit ) ; begin
48101: LD_INT 0
48103: PPUSH
// if not unit then
48104: LD_VAR 0 1
48108: NOT
48109: IFFALSE 48113
// exit ;
48111: GO 48136
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48113: LD_ADDR_VAR 0 2
48117: PUSH
48118: LD_VAR 0 1
48122: PPUSH
48123: CALL_OW 254
48127: PUSH
48128: LD_INT 3
48130: PLUS
48131: PUSH
48132: LD_INT 6
48134: MOD
48135: ST_TO_ADDR
// end ;
48136: LD_VAR 0 2
48140: RET
// export function ReverseArray ( array ) ; var i ; begin
48141: LD_INT 0
48143: PPUSH
48144: PPUSH
// if not array then
48145: LD_VAR 0 1
48149: NOT
48150: IFFALSE 48154
// exit ;
48152: GO 48209
// result := [ ] ;
48154: LD_ADDR_VAR 0 2
48158: PUSH
48159: EMPTY
48160: ST_TO_ADDR
// for i := array downto 1 do
48161: LD_ADDR_VAR 0 3
48165: PUSH
48166: DOUBLE
48167: LD_VAR 0 1
48171: INC
48172: ST_TO_ADDR
48173: LD_INT 1
48175: PUSH
48176: FOR_DOWNTO
48177: IFFALSE 48207
// result := Join ( result , array [ i ] ) ;
48179: LD_ADDR_VAR 0 2
48183: PUSH
48184: LD_VAR 0 2
48188: PPUSH
48189: LD_VAR 0 1
48193: PUSH
48194: LD_VAR 0 3
48198: ARRAY
48199: PPUSH
48200: CALL 52854 0 2
48204: ST_TO_ADDR
48205: GO 48176
48207: POP
48208: POP
// end ;
48209: LD_VAR 0 2
48213: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48214: LD_INT 0
48216: PPUSH
48217: PPUSH
48218: PPUSH
48219: PPUSH
48220: PPUSH
48221: PPUSH
// if not unit or not hexes then
48222: LD_VAR 0 1
48226: NOT
48227: PUSH
48228: LD_VAR 0 2
48232: NOT
48233: OR
48234: IFFALSE 48238
// exit ;
48236: GO 48361
// dist := 9999 ;
48238: LD_ADDR_VAR 0 5
48242: PUSH
48243: LD_INT 9999
48245: ST_TO_ADDR
// for i = 1 to hexes do
48246: LD_ADDR_VAR 0 4
48250: PUSH
48251: DOUBLE
48252: LD_INT 1
48254: DEC
48255: ST_TO_ADDR
48256: LD_VAR 0 2
48260: PUSH
48261: FOR_TO
48262: IFFALSE 48349
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48264: LD_ADDR_VAR 0 6
48268: PUSH
48269: LD_VAR 0 1
48273: PPUSH
48274: LD_VAR 0 2
48278: PUSH
48279: LD_VAR 0 4
48283: ARRAY
48284: PUSH
48285: LD_INT 1
48287: ARRAY
48288: PPUSH
48289: LD_VAR 0 2
48293: PUSH
48294: LD_VAR 0 4
48298: ARRAY
48299: PUSH
48300: LD_INT 2
48302: ARRAY
48303: PPUSH
48304: CALL_OW 297
48308: ST_TO_ADDR
// if tdist < dist then
48309: LD_VAR 0 6
48313: PUSH
48314: LD_VAR 0 5
48318: LESS
48319: IFFALSE 48347
// begin hex := hexes [ i ] ;
48321: LD_ADDR_VAR 0 8
48325: PUSH
48326: LD_VAR 0 2
48330: PUSH
48331: LD_VAR 0 4
48335: ARRAY
48336: ST_TO_ADDR
// dist := tdist ;
48337: LD_ADDR_VAR 0 5
48341: PUSH
48342: LD_VAR 0 6
48346: ST_TO_ADDR
// end ; end ;
48347: GO 48261
48349: POP
48350: POP
// result := hex ;
48351: LD_ADDR_VAR 0 3
48355: PUSH
48356: LD_VAR 0 8
48360: ST_TO_ADDR
// end ;
48361: LD_VAR 0 3
48365: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48366: LD_INT 0
48368: PPUSH
48369: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48370: LD_VAR 0 1
48374: NOT
48375: PUSH
48376: LD_VAR 0 1
48380: PUSH
48381: LD_INT 21
48383: PUSH
48384: LD_INT 2
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 23
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PPUSH
48405: CALL_OW 69
48409: IN
48410: NOT
48411: OR
48412: IFFALSE 48416
// exit ;
48414: GO 48463
// for i = 1 to 3 do
48416: LD_ADDR_VAR 0 3
48420: PUSH
48421: DOUBLE
48422: LD_INT 1
48424: DEC
48425: ST_TO_ADDR
48426: LD_INT 3
48428: PUSH
48429: FOR_TO
48430: IFFALSE 48461
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48432: LD_VAR 0 1
48436: PPUSH
48437: CALL_OW 250
48441: PPUSH
48442: LD_VAR 0 1
48446: PPUSH
48447: CALL_OW 251
48451: PPUSH
48452: LD_INT 1
48454: PPUSH
48455: CALL_OW 453
48459: GO 48429
48461: POP
48462: POP
// end ;
48463: LD_VAR 0 2
48467: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48468: LD_INT 0
48470: PPUSH
48471: PPUSH
48472: PPUSH
48473: PPUSH
48474: PPUSH
48475: PPUSH
// if not unit or not enemy_unit then
48476: LD_VAR 0 1
48480: NOT
48481: PUSH
48482: LD_VAR 0 2
48486: NOT
48487: OR
48488: IFFALSE 48492
// exit ;
48490: GO 48959
// if GetLives ( i ) < 250 then
48492: LD_VAR 0 4
48496: PPUSH
48497: CALL_OW 256
48501: PUSH
48502: LD_INT 250
48504: LESS
48505: IFFALSE 48518
// begin ComAutodestruct ( i ) ;
48507: LD_VAR 0 4
48511: PPUSH
48512: CALL 48366 0 1
// exit ;
48516: GO 48959
// end ; x := GetX ( enemy_unit ) ;
48518: LD_ADDR_VAR 0 7
48522: PUSH
48523: LD_VAR 0 2
48527: PPUSH
48528: CALL_OW 250
48532: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48533: LD_ADDR_VAR 0 8
48537: PUSH
48538: LD_VAR 0 2
48542: PPUSH
48543: CALL_OW 251
48547: ST_TO_ADDR
// if not x or not y then
48548: LD_VAR 0 7
48552: NOT
48553: PUSH
48554: LD_VAR 0 8
48558: NOT
48559: OR
48560: IFFALSE 48564
// exit ;
48562: GO 48959
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48564: LD_ADDR_VAR 0 6
48568: PUSH
48569: LD_VAR 0 7
48573: PPUSH
48574: LD_INT 0
48576: PPUSH
48577: LD_INT 4
48579: PPUSH
48580: CALL_OW 272
48584: PUSH
48585: LD_VAR 0 8
48589: PPUSH
48590: LD_INT 0
48592: PPUSH
48593: LD_INT 4
48595: PPUSH
48596: CALL_OW 273
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_VAR 0 7
48609: PPUSH
48610: LD_INT 1
48612: PPUSH
48613: LD_INT 4
48615: PPUSH
48616: CALL_OW 272
48620: PUSH
48621: LD_VAR 0 8
48625: PPUSH
48626: LD_INT 1
48628: PPUSH
48629: LD_INT 4
48631: PPUSH
48632: CALL_OW 273
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_VAR 0 7
48645: PPUSH
48646: LD_INT 2
48648: PPUSH
48649: LD_INT 4
48651: PPUSH
48652: CALL_OW 272
48656: PUSH
48657: LD_VAR 0 8
48661: PPUSH
48662: LD_INT 2
48664: PPUSH
48665: LD_INT 4
48667: PPUSH
48668: CALL_OW 273
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_VAR 0 7
48681: PPUSH
48682: LD_INT 3
48684: PPUSH
48685: LD_INT 4
48687: PPUSH
48688: CALL_OW 272
48692: PUSH
48693: LD_VAR 0 8
48697: PPUSH
48698: LD_INT 3
48700: PPUSH
48701: LD_INT 4
48703: PPUSH
48704: CALL_OW 273
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_VAR 0 7
48717: PPUSH
48718: LD_INT 4
48720: PPUSH
48721: LD_INT 4
48723: PPUSH
48724: CALL_OW 272
48728: PUSH
48729: LD_VAR 0 8
48733: PPUSH
48734: LD_INT 4
48736: PPUSH
48737: LD_INT 4
48739: PPUSH
48740: CALL_OW 273
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_VAR 0 7
48753: PPUSH
48754: LD_INT 5
48756: PPUSH
48757: LD_INT 4
48759: PPUSH
48760: CALL_OW 272
48764: PUSH
48765: LD_VAR 0 8
48769: PPUSH
48770: LD_INT 5
48772: PPUSH
48773: LD_INT 4
48775: PPUSH
48776: CALL_OW 273
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: ST_TO_ADDR
// for i = tmp downto 1 do
48793: LD_ADDR_VAR 0 4
48797: PUSH
48798: DOUBLE
48799: LD_VAR 0 6
48803: INC
48804: ST_TO_ADDR
48805: LD_INT 1
48807: PUSH
48808: FOR_DOWNTO
48809: IFFALSE 48910
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48811: LD_VAR 0 6
48815: PUSH
48816: LD_VAR 0 4
48820: ARRAY
48821: PUSH
48822: LD_INT 1
48824: ARRAY
48825: PPUSH
48826: LD_VAR 0 6
48830: PUSH
48831: LD_VAR 0 4
48835: ARRAY
48836: PUSH
48837: LD_INT 2
48839: ARRAY
48840: PPUSH
48841: CALL_OW 488
48845: NOT
48846: PUSH
48847: LD_VAR 0 6
48851: PUSH
48852: LD_VAR 0 4
48856: ARRAY
48857: PUSH
48858: LD_INT 1
48860: ARRAY
48861: PPUSH
48862: LD_VAR 0 6
48866: PUSH
48867: LD_VAR 0 4
48871: ARRAY
48872: PUSH
48873: LD_INT 2
48875: ARRAY
48876: PPUSH
48877: CALL_OW 428
48881: PUSH
48882: LD_INT 0
48884: NONEQUAL
48885: OR
48886: IFFALSE 48908
// tmp := Delete ( tmp , i ) ;
48888: LD_ADDR_VAR 0 6
48892: PUSH
48893: LD_VAR 0 6
48897: PPUSH
48898: LD_VAR 0 4
48902: PPUSH
48903: CALL_OW 3
48907: ST_TO_ADDR
48908: GO 48808
48910: POP
48911: POP
// j := GetClosestHex ( unit , tmp ) ;
48912: LD_ADDR_VAR 0 5
48916: PUSH
48917: LD_VAR 0 1
48921: PPUSH
48922: LD_VAR 0 6
48926: PPUSH
48927: CALL 48214 0 2
48931: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48932: LD_VAR 0 1
48936: PPUSH
48937: LD_VAR 0 5
48941: PUSH
48942: LD_INT 1
48944: ARRAY
48945: PPUSH
48946: LD_VAR 0 5
48950: PUSH
48951: LD_INT 2
48953: ARRAY
48954: PPUSH
48955: CALL_OW 111
// end ;
48959: LD_VAR 0 3
48963: RET
// export function PrepareApemanSoldier ( ) ; begin
48964: LD_INT 0
48966: PPUSH
// uc_nation := 0 ;
48967: LD_ADDR_OWVAR 21
48971: PUSH
48972: LD_INT 0
48974: ST_TO_ADDR
// hc_sex := sex_male ;
48975: LD_ADDR_OWVAR 27
48979: PUSH
48980: LD_INT 1
48982: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
48983: LD_ADDR_OWVAR 28
48987: PUSH
48988: LD_INT 15
48990: ST_TO_ADDR
// hc_gallery :=  ;
48991: LD_ADDR_OWVAR 33
48995: PUSH
48996: LD_STRING 
48998: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48999: LD_ADDR_OWVAR 31
49003: PUSH
49004: LD_INT 0
49006: PPUSH
49007: LD_INT 3
49009: PPUSH
49010: CALL_OW 12
49014: PUSH
49015: LD_INT 0
49017: PPUSH
49018: LD_INT 3
49020: PPUSH
49021: CALL_OW 12
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: ST_TO_ADDR
// end ;
49038: LD_VAR 0 1
49042: RET
// export function PrepareApemanEngineer ( ) ; begin
49043: LD_INT 0
49045: PPUSH
// uc_nation := 0 ;
49046: LD_ADDR_OWVAR 21
49050: PUSH
49051: LD_INT 0
49053: ST_TO_ADDR
// hc_sex := sex_male ;
49054: LD_ADDR_OWVAR 27
49058: PUSH
49059: LD_INT 1
49061: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49062: LD_ADDR_OWVAR 28
49066: PUSH
49067: LD_INT 16
49069: ST_TO_ADDR
// hc_gallery :=  ;
49070: LD_ADDR_OWVAR 33
49074: PUSH
49075: LD_STRING 
49077: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49078: LD_ADDR_OWVAR 31
49082: PUSH
49083: LD_INT 0
49085: PPUSH
49086: LD_INT 3
49088: PPUSH
49089: CALL_OW 12
49093: PUSH
49094: LD_INT 0
49096: PPUSH
49097: LD_INT 3
49099: PPUSH
49100: CALL_OW 12
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: ST_TO_ADDR
// end ;
49117: LD_VAR 0 1
49121: RET
// export function PrepareApeman ( agressivity ) ; begin
49122: LD_INT 0
49124: PPUSH
// uc_side := 0 ;
49125: LD_ADDR_OWVAR 20
49129: PUSH
49130: LD_INT 0
49132: ST_TO_ADDR
// uc_nation := 0 ;
49133: LD_ADDR_OWVAR 21
49137: PUSH
49138: LD_INT 0
49140: ST_TO_ADDR
// hc_sex := sex_male ;
49141: LD_ADDR_OWVAR 27
49145: PUSH
49146: LD_INT 1
49148: ST_TO_ADDR
// hc_class := class_apeman ;
49149: LD_ADDR_OWVAR 28
49153: PUSH
49154: LD_INT 12
49156: ST_TO_ADDR
// hc_gallery :=  ;
49157: LD_ADDR_OWVAR 33
49161: PUSH
49162: LD_STRING 
49164: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49165: LD_ADDR_OWVAR 35
49169: PUSH
49170: LD_VAR 0 1
49174: NEG
49175: PPUSH
49176: LD_VAR 0 1
49180: PPUSH
49181: CALL_OW 12
49185: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49186: LD_ADDR_OWVAR 31
49190: PUSH
49191: LD_INT 0
49193: PPUSH
49194: LD_INT 3
49196: PPUSH
49197: CALL_OW 12
49201: PUSH
49202: LD_INT 0
49204: PPUSH
49205: LD_INT 3
49207: PPUSH
49208: CALL_OW 12
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: ST_TO_ADDR
// end ;
49225: LD_VAR 0 2
49229: RET
// export function PrepareTiger ( agressivity ) ; begin
49230: LD_INT 0
49232: PPUSH
// uc_side := 0 ;
49233: LD_ADDR_OWVAR 20
49237: PUSH
49238: LD_INT 0
49240: ST_TO_ADDR
// uc_nation := 0 ;
49241: LD_ADDR_OWVAR 21
49245: PUSH
49246: LD_INT 0
49248: ST_TO_ADDR
// hc_class := class_tiger ;
49249: LD_ADDR_OWVAR 28
49253: PUSH
49254: LD_INT 14
49256: ST_TO_ADDR
// hc_gallery :=  ;
49257: LD_ADDR_OWVAR 33
49261: PUSH
49262: LD_STRING 
49264: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49265: LD_ADDR_OWVAR 35
49269: PUSH
49270: LD_VAR 0 1
49274: NEG
49275: PPUSH
49276: LD_VAR 0 1
49280: PPUSH
49281: CALL_OW 12
49285: ST_TO_ADDR
// end ;
49286: LD_VAR 0 2
49290: RET
// export function PrepareEnchidna ( ) ; begin
49291: LD_INT 0
49293: PPUSH
// uc_side := 0 ;
49294: LD_ADDR_OWVAR 20
49298: PUSH
49299: LD_INT 0
49301: ST_TO_ADDR
// uc_nation := 0 ;
49302: LD_ADDR_OWVAR 21
49306: PUSH
49307: LD_INT 0
49309: ST_TO_ADDR
// hc_class := class_baggie ;
49310: LD_ADDR_OWVAR 28
49314: PUSH
49315: LD_INT 13
49317: ST_TO_ADDR
// hc_gallery :=  ;
49318: LD_ADDR_OWVAR 33
49322: PUSH
49323: LD_STRING 
49325: ST_TO_ADDR
// end ;
49326: LD_VAR 0 1
49330: RET
// export function PrepareFrog ( ) ; begin
49331: LD_INT 0
49333: PPUSH
// uc_side := 0 ;
49334: LD_ADDR_OWVAR 20
49338: PUSH
49339: LD_INT 0
49341: ST_TO_ADDR
// uc_nation := 0 ;
49342: LD_ADDR_OWVAR 21
49346: PUSH
49347: LD_INT 0
49349: ST_TO_ADDR
// hc_class := class_frog ;
49350: LD_ADDR_OWVAR 28
49354: PUSH
49355: LD_INT 19
49357: ST_TO_ADDR
// hc_gallery :=  ;
49358: LD_ADDR_OWVAR 33
49362: PUSH
49363: LD_STRING 
49365: ST_TO_ADDR
// end ;
49366: LD_VAR 0 1
49370: RET
// export function PrepareFish ( ) ; begin
49371: LD_INT 0
49373: PPUSH
// uc_side := 0 ;
49374: LD_ADDR_OWVAR 20
49378: PUSH
49379: LD_INT 0
49381: ST_TO_ADDR
// uc_nation := 0 ;
49382: LD_ADDR_OWVAR 21
49386: PUSH
49387: LD_INT 0
49389: ST_TO_ADDR
// hc_class := class_fish ;
49390: LD_ADDR_OWVAR 28
49394: PUSH
49395: LD_INT 20
49397: ST_TO_ADDR
// hc_gallery :=  ;
49398: LD_ADDR_OWVAR 33
49402: PUSH
49403: LD_STRING 
49405: ST_TO_ADDR
// end ;
49406: LD_VAR 0 1
49410: RET
// export function PrepareBird ( ) ; begin
49411: LD_INT 0
49413: PPUSH
// uc_side := 0 ;
49414: LD_ADDR_OWVAR 20
49418: PUSH
49419: LD_INT 0
49421: ST_TO_ADDR
// uc_nation := 0 ;
49422: LD_ADDR_OWVAR 21
49426: PUSH
49427: LD_INT 0
49429: ST_TO_ADDR
// hc_class := class_phororhacos ;
49430: LD_ADDR_OWVAR 28
49434: PUSH
49435: LD_INT 18
49437: ST_TO_ADDR
// hc_gallery :=  ;
49438: LD_ADDR_OWVAR 33
49442: PUSH
49443: LD_STRING 
49445: ST_TO_ADDR
// end ;
49446: LD_VAR 0 1
49450: RET
// export function PrepareHorse ( ) ; begin
49451: LD_INT 0
49453: PPUSH
// uc_side := 0 ;
49454: LD_ADDR_OWVAR 20
49458: PUSH
49459: LD_INT 0
49461: ST_TO_ADDR
// uc_nation := 0 ;
49462: LD_ADDR_OWVAR 21
49466: PUSH
49467: LD_INT 0
49469: ST_TO_ADDR
// hc_class := class_horse ;
49470: LD_ADDR_OWVAR 28
49474: PUSH
49475: LD_INT 21
49477: ST_TO_ADDR
// hc_gallery :=  ;
49478: LD_ADDR_OWVAR 33
49482: PUSH
49483: LD_STRING 
49485: ST_TO_ADDR
// end ;
49486: LD_VAR 0 1
49490: RET
// export function PrepareMastodont ( ) ; begin
49491: LD_INT 0
49493: PPUSH
// uc_side := 0 ;
49494: LD_ADDR_OWVAR 20
49498: PUSH
49499: LD_INT 0
49501: ST_TO_ADDR
// uc_nation := 0 ;
49502: LD_ADDR_OWVAR 21
49506: PUSH
49507: LD_INT 0
49509: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49510: LD_ADDR_OWVAR 37
49514: PUSH
49515: LD_INT 31
49517: ST_TO_ADDR
// vc_control := control_rider ;
49518: LD_ADDR_OWVAR 38
49522: PUSH
49523: LD_INT 4
49525: ST_TO_ADDR
// end ;
49526: LD_VAR 0 1
49530: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49531: LD_INT 0
49533: PPUSH
49534: PPUSH
49535: PPUSH
// uc_side = 0 ;
49536: LD_ADDR_OWVAR 20
49540: PUSH
49541: LD_INT 0
49543: ST_TO_ADDR
// uc_nation = 0 ;
49544: LD_ADDR_OWVAR 21
49548: PUSH
49549: LD_INT 0
49551: ST_TO_ADDR
// InitHc_All ( ) ;
49552: CALL_OW 584
// InitVc ;
49556: CALL_OW 20
// if mastodonts then
49560: LD_VAR 0 6
49564: IFFALSE 49631
// for i = 1 to mastodonts do
49566: LD_ADDR_VAR 0 11
49570: PUSH
49571: DOUBLE
49572: LD_INT 1
49574: DEC
49575: ST_TO_ADDR
49576: LD_VAR 0 6
49580: PUSH
49581: FOR_TO
49582: IFFALSE 49629
// begin vc_chassis := 31 ;
49584: LD_ADDR_OWVAR 37
49588: PUSH
49589: LD_INT 31
49591: ST_TO_ADDR
// vc_control := control_rider ;
49592: LD_ADDR_OWVAR 38
49596: PUSH
49597: LD_INT 4
49599: ST_TO_ADDR
// animal := CreateVehicle ;
49600: LD_ADDR_VAR 0 12
49604: PUSH
49605: CALL_OW 45
49609: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49610: LD_VAR 0 12
49614: PPUSH
49615: LD_VAR 0 8
49619: PPUSH
49620: LD_INT 0
49622: PPUSH
49623: CALL 51759 0 3
// end ;
49627: GO 49581
49629: POP
49630: POP
// if horses then
49631: LD_VAR 0 5
49635: IFFALSE 49702
// for i = 1 to horses do
49637: LD_ADDR_VAR 0 11
49641: PUSH
49642: DOUBLE
49643: LD_INT 1
49645: DEC
49646: ST_TO_ADDR
49647: LD_VAR 0 5
49651: PUSH
49652: FOR_TO
49653: IFFALSE 49700
// begin hc_class := 21 ;
49655: LD_ADDR_OWVAR 28
49659: PUSH
49660: LD_INT 21
49662: ST_TO_ADDR
// hc_gallery :=  ;
49663: LD_ADDR_OWVAR 33
49667: PUSH
49668: LD_STRING 
49670: ST_TO_ADDR
// animal := CreateHuman ;
49671: LD_ADDR_VAR 0 12
49675: PUSH
49676: CALL_OW 44
49680: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49681: LD_VAR 0 12
49685: PPUSH
49686: LD_VAR 0 8
49690: PPUSH
49691: LD_INT 0
49693: PPUSH
49694: CALL 51759 0 3
// end ;
49698: GO 49652
49700: POP
49701: POP
// if birds then
49702: LD_VAR 0 1
49706: IFFALSE 49773
// for i = 1 to birds do
49708: LD_ADDR_VAR 0 11
49712: PUSH
49713: DOUBLE
49714: LD_INT 1
49716: DEC
49717: ST_TO_ADDR
49718: LD_VAR 0 1
49722: PUSH
49723: FOR_TO
49724: IFFALSE 49771
// begin hc_class := 18 ;
49726: LD_ADDR_OWVAR 28
49730: PUSH
49731: LD_INT 18
49733: ST_TO_ADDR
// hc_gallery =  ;
49734: LD_ADDR_OWVAR 33
49738: PUSH
49739: LD_STRING 
49741: ST_TO_ADDR
// animal := CreateHuman ;
49742: LD_ADDR_VAR 0 12
49746: PUSH
49747: CALL_OW 44
49751: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49752: LD_VAR 0 12
49756: PPUSH
49757: LD_VAR 0 8
49761: PPUSH
49762: LD_INT 0
49764: PPUSH
49765: CALL 51759 0 3
// end ;
49769: GO 49723
49771: POP
49772: POP
// if tigers then
49773: LD_VAR 0 2
49777: IFFALSE 49861
// for i = 1 to tigers do
49779: LD_ADDR_VAR 0 11
49783: PUSH
49784: DOUBLE
49785: LD_INT 1
49787: DEC
49788: ST_TO_ADDR
49789: LD_VAR 0 2
49793: PUSH
49794: FOR_TO
49795: IFFALSE 49859
// begin hc_class = class_tiger ;
49797: LD_ADDR_OWVAR 28
49801: PUSH
49802: LD_INT 14
49804: ST_TO_ADDR
// hc_gallery =  ;
49805: LD_ADDR_OWVAR 33
49809: PUSH
49810: LD_STRING 
49812: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49813: LD_ADDR_OWVAR 35
49817: PUSH
49818: LD_INT 7
49820: NEG
49821: PPUSH
49822: LD_INT 7
49824: PPUSH
49825: CALL_OW 12
49829: ST_TO_ADDR
// animal := CreateHuman ;
49830: LD_ADDR_VAR 0 12
49834: PUSH
49835: CALL_OW 44
49839: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49840: LD_VAR 0 12
49844: PPUSH
49845: LD_VAR 0 8
49849: PPUSH
49850: LD_INT 0
49852: PPUSH
49853: CALL 51759 0 3
// end ;
49857: GO 49794
49859: POP
49860: POP
// if apemans then
49861: LD_VAR 0 3
49865: IFFALSE 49988
// for i = 1 to apemans do
49867: LD_ADDR_VAR 0 11
49871: PUSH
49872: DOUBLE
49873: LD_INT 1
49875: DEC
49876: ST_TO_ADDR
49877: LD_VAR 0 3
49881: PUSH
49882: FOR_TO
49883: IFFALSE 49986
// begin hc_class = class_apeman ;
49885: LD_ADDR_OWVAR 28
49889: PUSH
49890: LD_INT 12
49892: ST_TO_ADDR
// hc_gallery =  ;
49893: LD_ADDR_OWVAR 33
49897: PUSH
49898: LD_STRING 
49900: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49901: LD_ADDR_OWVAR 35
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PPUSH
49910: LD_INT 2
49912: PPUSH
49913: CALL_OW 12
49917: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49918: LD_ADDR_OWVAR 31
49922: PUSH
49923: LD_INT 1
49925: PPUSH
49926: LD_INT 3
49928: PPUSH
49929: CALL_OW 12
49933: PUSH
49934: LD_INT 1
49936: PPUSH
49937: LD_INT 3
49939: PPUSH
49940: CALL_OW 12
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: ST_TO_ADDR
// animal := CreateHuman ;
49957: LD_ADDR_VAR 0 12
49961: PUSH
49962: CALL_OW 44
49966: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49967: LD_VAR 0 12
49971: PPUSH
49972: LD_VAR 0 8
49976: PPUSH
49977: LD_INT 0
49979: PPUSH
49980: CALL 51759 0 3
// end ;
49984: GO 49882
49986: POP
49987: POP
// if enchidnas then
49988: LD_VAR 0 4
49992: IFFALSE 50059
// for i = 1 to enchidnas do
49994: LD_ADDR_VAR 0 11
49998: PUSH
49999: DOUBLE
50000: LD_INT 1
50002: DEC
50003: ST_TO_ADDR
50004: LD_VAR 0 4
50008: PUSH
50009: FOR_TO
50010: IFFALSE 50057
// begin hc_class = 13 ;
50012: LD_ADDR_OWVAR 28
50016: PUSH
50017: LD_INT 13
50019: ST_TO_ADDR
// hc_gallery =  ;
50020: LD_ADDR_OWVAR 33
50024: PUSH
50025: LD_STRING 
50027: ST_TO_ADDR
// animal := CreateHuman ;
50028: LD_ADDR_VAR 0 12
50032: PUSH
50033: CALL_OW 44
50037: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50038: LD_VAR 0 12
50042: PPUSH
50043: LD_VAR 0 8
50047: PPUSH
50048: LD_INT 0
50050: PPUSH
50051: CALL 51759 0 3
// end ;
50055: GO 50009
50057: POP
50058: POP
// if fishes then
50059: LD_VAR 0 7
50063: IFFALSE 50130
// for i = 1 to fishes do
50065: LD_ADDR_VAR 0 11
50069: PUSH
50070: DOUBLE
50071: LD_INT 1
50073: DEC
50074: ST_TO_ADDR
50075: LD_VAR 0 7
50079: PUSH
50080: FOR_TO
50081: IFFALSE 50128
// begin hc_class = 20 ;
50083: LD_ADDR_OWVAR 28
50087: PUSH
50088: LD_INT 20
50090: ST_TO_ADDR
// hc_gallery =  ;
50091: LD_ADDR_OWVAR 33
50095: PUSH
50096: LD_STRING 
50098: ST_TO_ADDR
// animal := CreateHuman ;
50099: LD_ADDR_VAR 0 12
50103: PUSH
50104: CALL_OW 44
50108: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50109: LD_VAR 0 12
50113: PPUSH
50114: LD_VAR 0 9
50118: PPUSH
50119: LD_INT 0
50121: PPUSH
50122: CALL 51759 0 3
// end ;
50126: GO 50080
50128: POP
50129: POP
// end ;
50130: LD_VAR 0 10
50134: RET
// export function WantHeal ( sci , unit ) ; begin
50135: LD_INT 0
50137: PPUSH
// if GetTaskList ( sci ) > 0 then
50138: LD_VAR 0 1
50142: PPUSH
50143: CALL_OW 437
50147: PUSH
50148: LD_INT 0
50150: GREATER
50151: IFFALSE 50221
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50153: LD_VAR 0 1
50157: PPUSH
50158: CALL_OW 437
50162: PUSH
50163: LD_INT 1
50165: ARRAY
50166: PUSH
50167: LD_INT 1
50169: ARRAY
50170: PUSH
50171: LD_STRING l
50173: EQUAL
50174: PUSH
50175: LD_VAR 0 1
50179: PPUSH
50180: CALL_OW 437
50184: PUSH
50185: LD_INT 1
50187: ARRAY
50188: PUSH
50189: LD_INT 4
50191: ARRAY
50192: PUSH
50193: LD_VAR 0 2
50197: EQUAL
50198: AND
50199: IFFALSE 50211
// result := true else
50201: LD_ADDR_VAR 0 3
50205: PUSH
50206: LD_INT 1
50208: ST_TO_ADDR
50209: GO 50219
// result := false ;
50211: LD_ADDR_VAR 0 3
50215: PUSH
50216: LD_INT 0
50218: ST_TO_ADDR
// end else
50219: GO 50229
// result := false ;
50221: LD_ADDR_VAR 0 3
50225: PUSH
50226: LD_INT 0
50228: ST_TO_ADDR
// end ;
50229: LD_VAR 0 3
50233: RET
// export function HealTarget ( sci ) ; begin
50234: LD_INT 0
50236: PPUSH
// if not sci then
50237: LD_VAR 0 1
50241: NOT
50242: IFFALSE 50246
// exit ;
50244: GO 50311
// result := 0 ;
50246: LD_ADDR_VAR 0 2
50250: PUSH
50251: LD_INT 0
50253: ST_TO_ADDR
// if GetTaskList ( sci ) then
50254: LD_VAR 0 1
50258: PPUSH
50259: CALL_OW 437
50263: IFFALSE 50311
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50265: LD_VAR 0 1
50269: PPUSH
50270: CALL_OW 437
50274: PUSH
50275: LD_INT 1
50277: ARRAY
50278: PUSH
50279: LD_INT 1
50281: ARRAY
50282: PUSH
50283: LD_STRING l
50285: EQUAL
50286: IFFALSE 50311
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50288: LD_ADDR_VAR 0 2
50292: PUSH
50293: LD_VAR 0 1
50297: PPUSH
50298: CALL_OW 437
50302: PUSH
50303: LD_INT 1
50305: ARRAY
50306: PUSH
50307: LD_INT 4
50309: ARRAY
50310: ST_TO_ADDR
// end ;
50311: LD_VAR 0 2
50315: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50316: LD_INT 0
50318: PPUSH
50319: PPUSH
50320: PPUSH
50321: PPUSH
// if not base_units then
50322: LD_VAR 0 1
50326: NOT
50327: IFFALSE 50331
// exit ;
50329: GO 50418
// result := false ;
50331: LD_ADDR_VAR 0 2
50335: PUSH
50336: LD_INT 0
50338: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50339: LD_ADDR_VAR 0 5
50343: PUSH
50344: LD_VAR 0 1
50348: PPUSH
50349: LD_INT 21
50351: PUSH
50352: LD_INT 3
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PPUSH
50359: CALL_OW 72
50363: ST_TO_ADDR
// if not tmp then
50364: LD_VAR 0 5
50368: NOT
50369: IFFALSE 50373
// exit ;
50371: GO 50418
// for i in tmp do
50373: LD_ADDR_VAR 0 3
50377: PUSH
50378: LD_VAR 0 5
50382: PUSH
50383: FOR_IN
50384: IFFALSE 50416
// begin result := EnemyInRange ( i , 22 ) ;
50386: LD_ADDR_VAR 0 2
50390: PUSH
50391: LD_VAR 0 3
50395: PPUSH
50396: LD_INT 22
50398: PPUSH
50399: CALL 48016 0 2
50403: ST_TO_ADDR
// if result then
50404: LD_VAR 0 2
50408: IFFALSE 50414
// exit ;
50410: POP
50411: POP
50412: GO 50418
// end ;
50414: GO 50383
50416: POP
50417: POP
// end ;
50418: LD_VAR 0 2
50422: RET
// export function FilterByTag ( units , tag ) ; begin
50423: LD_INT 0
50425: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50426: LD_ADDR_VAR 0 3
50430: PUSH
50431: LD_VAR 0 1
50435: PPUSH
50436: LD_INT 120
50438: PUSH
50439: LD_VAR 0 2
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PPUSH
50448: CALL_OW 72
50452: ST_TO_ADDR
// end ;
50453: LD_VAR 0 3
50457: RET
// export function IsDriver ( un ) ; begin
50458: LD_INT 0
50460: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50461: LD_ADDR_VAR 0 2
50465: PUSH
50466: LD_VAR 0 1
50470: PUSH
50471: LD_INT 55
50473: PUSH
50474: EMPTY
50475: LIST
50476: PPUSH
50477: CALL_OW 69
50481: IN
50482: ST_TO_ADDR
// end ;
50483: LD_VAR 0 2
50487: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50488: LD_INT 0
50490: PPUSH
50491: PPUSH
// list := [ ] ;
50492: LD_ADDR_VAR 0 5
50496: PUSH
50497: EMPTY
50498: ST_TO_ADDR
// case d of 0 :
50499: LD_VAR 0 3
50503: PUSH
50504: LD_INT 0
50506: DOUBLE
50507: EQUAL
50508: IFTRUE 50512
50510: GO 50645
50512: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50513: LD_ADDR_VAR 0 5
50517: PUSH
50518: LD_VAR 0 1
50522: PUSH
50523: LD_INT 4
50525: MINUS
50526: PUSH
50527: LD_VAR 0 2
50531: PUSH
50532: LD_INT 4
50534: MINUS
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: LIST
50543: PUSH
50544: LD_VAR 0 1
50548: PUSH
50549: LD_INT 3
50551: MINUS
50552: PUSH
50553: LD_VAR 0 2
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: LIST
50565: PUSH
50566: LD_VAR 0 1
50570: PUSH
50571: LD_INT 4
50573: PLUS
50574: PUSH
50575: LD_VAR 0 2
50579: PUSH
50580: LD_INT 4
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: LIST
50587: PUSH
50588: LD_VAR 0 1
50592: PUSH
50593: LD_INT 3
50595: PLUS
50596: PUSH
50597: LD_VAR 0 2
50601: PUSH
50602: LD_INT 3
50604: PLUS
50605: PUSH
50606: LD_INT 5
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: LIST
50613: PUSH
50614: LD_VAR 0 1
50618: PUSH
50619: LD_VAR 0 2
50623: PUSH
50624: LD_INT 4
50626: PLUS
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: LIST
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: ST_TO_ADDR
// end ; 1 :
50643: GO 51343
50645: LD_INT 1
50647: DOUBLE
50648: EQUAL
50649: IFTRUE 50653
50651: GO 50786
50653: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50654: LD_ADDR_VAR 0 5
50658: PUSH
50659: LD_VAR 0 1
50663: PUSH
50664: LD_VAR 0 2
50668: PUSH
50669: LD_INT 4
50671: MINUS
50672: PUSH
50673: LD_INT 3
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: LIST
50680: PUSH
50681: LD_VAR 0 1
50685: PUSH
50686: LD_INT 3
50688: MINUS
50689: PUSH
50690: LD_VAR 0 2
50694: PUSH
50695: LD_INT 3
50697: MINUS
50698: PUSH
50699: LD_INT 2
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: LIST
50706: PUSH
50707: LD_VAR 0 1
50711: PUSH
50712: LD_INT 4
50714: MINUS
50715: PUSH
50716: LD_VAR 0 2
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: LIST
50728: PUSH
50729: LD_VAR 0 1
50733: PUSH
50734: LD_VAR 0 2
50738: PUSH
50739: LD_INT 3
50741: PLUS
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: LIST
50750: PUSH
50751: LD_VAR 0 1
50755: PUSH
50756: LD_INT 4
50758: PLUS
50759: PUSH
50760: LD_VAR 0 2
50764: PUSH
50765: LD_INT 4
50767: PLUS
50768: PUSH
50769: LD_INT 5
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: LIST
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: ST_TO_ADDR
// end ; 2 :
50784: GO 51343
50786: LD_INT 2
50788: DOUBLE
50789: EQUAL
50790: IFTRUE 50794
50792: GO 50923
50794: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50795: LD_ADDR_VAR 0 5
50799: PUSH
50800: LD_VAR 0 1
50804: PUSH
50805: LD_VAR 0 2
50809: PUSH
50810: LD_INT 3
50812: MINUS
50813: PUSH
50814: LD_INT 3
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: LIST
50821: PUSH
50822: LD_VAR 0 1
50826: PUSH
50827: LD_INT 4
50829: PLUS
50830: PUSH
50831: LD_VAR 0 2
50835: PUSH
50836: LD_INT 4
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: LIST
50843: PUSH
50844: LD_VAR 0 1
50848: PUSH
50849: LD_VAR 0 2
50853: PUSH
50854: LD_INT 4
50856: PLUS
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: LIST
50865: PUSH
50866: LD_VAR 0 1
50870: PUSH
50871: LD_INT 3
50873: MINUS
50874: PUSH
50875: LD_VAR 0 2
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: LIST
50887: PUSH
50888: LD_VAR 0 1
50892: PUSH
50893: LD_INT 4
50895: MINUS
50896: PUSH
50897: LD_VAR 0 2
50901: PUSH
50902: LD_INT 4
50904: MINUS
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: LIST
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: ST_TO_ADDR
// end ; 3 :
50921: GO 51343
50923: LD_INT 3
50925: DOUBLE
50926: EQUAL
50927: IFTRUE 50931
50929: GO 51064
50931: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50932: LD_ADDR_VAR 0 5
50936: PUSH
50937: LD_VAR 0 1
50941: PUSH
50942: LD_INT 3
50944: PLUS
50945: PUSH
50946: LD_VAR 0 2
50950: PUSH
50951: LD_INT 4
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: LIST
50958: PUSH
50959: LD_VAR 0 1
50963: PUSH
50964: LD_INT 4
50966: PLUS
50967: PUSH
50968: LD_VAR 0 2
50972: PUSH
50973: LD_INT 4
50975: PLUS
50976: PUSH
50977: LD_INT 5
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: LIST
50984: PUSH
50985: LD_VAR 0 1
50989: PUSH
50990: LD_INT 4
50992: MINUS
50993: PUSH
50994: LD_VAR 0 2
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: LIST
51006: PUSH
51007: LD_VAR 0 1
51011: PUSH
51012: LD_VAR 0 2
51016: PUSH
51017: LD_INT 4
51019: MINUS
51020: PUSH
51021: LD_INT 3
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: LIST
51028: PUSH
51029: LD_VAR 0 1
51033: PUSH
51034: LD_INT 3
51036: MINUS
51037: PUSH
51038: LD_VAR 0 2
51042: PUSH
51043: LD_INT 3
51045: MINUS
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: LIST
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: ST_TO_ADDR
// end ; 4 :
51062: GO 51343
51064: LD_INT 4
51066: DOUBLE
51067: EQUAL
51068: IFTRUE 51072
51070: GO 51205
51072: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51073: LD_ADDR_VAR 0 5
51077: PUSH
51078: LD_VAR 0 1
51082: PUSH
51083: LD_VAR 0 2
51087: PUSH
51088: LD_INT 4
51090: PLUS
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: PUSH
51100: LD_VAR 0 1
51104: PUSH
51105: LD_INT 3
51107: PLUS
51108: PUSH
51109: LD_VAR 0 2
51113: PUSH
51114: LD_INT 3
51116: PLUS
51117: PUSH
51118: LD_INT 5
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: LIST
51125: PUSH
51126: LD_VAR 0 1
51130: PUSH
51131: LD_INT 4
51133: PLUS
51134: PUSH
51135: LD_VAR 0 2
51139: PUSH
51140: LD_INT 4
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: LIST
51147: PUSH
51148: LD_VAR 0 1
51152: PUSH
51153: LD_VAR 0 2
51157: PUSH
51158: LD_INT 3
51160: MINUS
51161: PUSH
51162: LD_INT 3
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: LIST
51169: PUSH
51170: LD_VAR 0 1
51174: PUSH
51175: LD_INT 4
51177: MINUS
51178: PUSH
51179: LD_VAR 0 2
51183: PUSH
51184: LD_INT 4
51186: MINUS
51187: PUSH
51188: LD_INT 2
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: LIST
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: ST_TO_ADDR
// end ; 5 :
51203: GO 51343
51205: LD_INT 5
51207: DOUBLE
51208: EQUAL
51209: IFTRUE 51213
51211: GO 51342
51213: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51214: LD_ADDR_VAR 0 5
51218: PUSH
51219: LD_VAR 0 1
51223: PUSH
51224: LD_INT 4
51226: MINUS
51227: PUSH
51228: LD_VAR 0 2
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: LIST
51240: PUSH
51241: LD_VAR 0 1
51245: PUSH
51246: LD_VAR 0 2
51250: PUSH
51251: LD_INT 4
51253: MINUS
51254: PUSH
51255: LD_INT 3
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: LIST
51262: PUSH
51263: LD_VAR 0 1
51267: PUSH
51268: LD_INT 4
51270: PLUS
51271: PUSH
51272: LD_VAR 0 2
51276: PUSH
51277: LD_INT 4
51279: PLUS
51280: PUSH
51281: LD_INT 5
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: LIST
51288: PUSH
51289: LD_VAR 0 1
51293: PUSH
51294: LD_INT 3
51296: PLUS
51297: PUSH
51298: LD_VAR 0 2
51302: PUSH
51303: LD_INT 4
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: LIST
51310: PUSH
51311: LD_VAR 0 1
51315: PUSH
51316: LD_VAR 0 2
51320: PUSH
51321: LD_INT 3
51323: PLUS
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: LIST
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: ST_TO_ADDR
// end ; end ;
51340: GO 51343
51342: POP
// result := list ;
51343: LD_ADDR_VAR 0 4
51347: PUSH
51348: LD_VAR 0 5
51352: ST_TO_ADDR
// end ;
51353: LD_VAR 0 4
51357: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51358: LD_INT 0
51360: PPUSH
51361: PPUSH
51362: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51363: LD_VAR 0 1
51367: NOT
51368: PUSH
51369: LD_VAR 0 2
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: LD_INT 3
51382: PUSH
51383: LD_INT 4
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: IN
51392: NOT
51393: OR
51394: IFFALSE 51398
// exit ;
51396: GO 51481
// tmp := [ ] ;
51398: LD_ADDR_VAR 0 5
51402: PUSH
51403: EMPTY
51404: ST_TO_ADDR
// for i in units do
51405: LD_ADDR_VAR 0 4
51409: PUSH
51410: LD_VAR 0 1
51414: PUSH
51415: FOR_IN
51416: IFFALSE 51450
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51418: LD_ADDR_VAR 0 5
51422: PUSH
51423: LD_VAR 0 5
51427: PPUSH
51428: LD_VAR 0 4
51432: PPUSH
51433: LD_VAR 0 2
51437: PPUSH
51438: CALL_OW 259
51442: PPUSH
51443: CALL 52854 0 2
51447: ST_TO_ADDR
51448: GO 51415
51450: POP
51451: POP
// if not tmp then
51452: LD_VAR 0 5
51456: NOT
51457: IFFALSE 51461
// exit ;
51459: GO 51481
// result := SortListByListDesc ( units , tmp ) ;
51461: LD_ADDR_VAR 0 3
51465: PUSH
51466: LD_VAR 0 1
51470: PPUSH
51471: LD_VAR 0 5
51475: PPUSH
51476: CALL_OW 77
51480: ST_TO_ADDR
// end ;
51481: LD_VAR 0 3
51485: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51486: LD_INT 0
51488: PPUSH
51489: PPUSH
51490: PPUSH
// result := false ;
51491: LD_ADDR_VAR 0 3
51495: PUSH
51496: LD_INT 0
51498: ST_TO_ADDR
// if not building then
51499: LD_VAR 0 2
51503: NOT
51504: IFFALSE 51508
// exit ;
51506: GO 51646
// x := GetX ( building ) ;
51508: LD_ADDR_VAR 0 4
51512: PUSH
51513: LD_VAR 0 2
51517: PPUSH
51518: CALL_OW 250
51522: ST_TO_ADDR
// y := GetY ( building ) ;
51523: LD_ADDR_VAR 0 5
51527: PUSH
51528: LD_VAR 0 2
51532: PPUSH
51533: CALL_OW 251
51537: ST_TO_ADDR
// if not x or not y then
51538: LD_VAR 0 4
51542: NOT
51543: PUSH
51544: LD_VAR 0 5
51548: NOT
51549: OR
51550: IFFALSE 51554
// exit ;
51552: GO 51646
// if GetTaskList ( unit ) then
51554: LD_VAR 0 1
51558: PPUSH
51559: CALL_OW 437
51563: IFFALSE 51646
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51565: LD_STRING e
51567: PUSH
51568: LD_VAR 0 1
51572: PPUSH
51573: CALL_OW 437
51577: PUSH
51578: LD_INT 1
51580: ARRAY
51581: PUSH
51582: LD_INT 1
51584: ARRAY
51585: EQUAL
51586: PUSH
51587: LD_VAR 0 4
51591: PUSH
51592: LD_VAR 0 1
51596: PPUSH
51597: CALL_OW 437
51601: PUSH
51602: LD_INT 1
51604: ARRAY
51605: PUSH
51606: LD_INT 2
51608: ARRAY
51609: EQUAL
51610: AND
51611: PUSH
51612: LD_VAR 0 5
51616: PUSH
51617: LD_VAR 0 1
51621: PPUSH
51622: CALL_OW 437
51626: PUSH
51627: LD_INT 1
51629: ARRAY
51630: PUSH
51631: LD_INT 3
51633: ARRAY
51634: EQUAL
51635: AND
51636: IFFALSE 51646
// result := true end ;
51638: LD_ADDR_VAR 0 3
51642: PUSH
51643: LD_INT 1
51645: ST_TO_ADDR
// end ;
51646: LD_VAR 0 3
51650: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51651: LD_INT 0
51653: PPUSH
// result := false ;
51654: LD_ADDR_VAR 0 4
51658: PUSH
51659: LD_INT 0
51661: ST_TO_ADDR
// if GetTaskList ( unit ) then
51662: LD_VAR 0 1
51666: PPUSH
51667: CALL_OW 437
51671: IFFALSE 51754
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51673: LD_STRING M
51675: PUSH
51676: LD_VAR 0 1
51680: PPUSH
51681: CALL_OW 437
51685: PUSH
51686: LD_INT 1
51688: ARRAY
51689: PUSH
51690: LD_INT 1
51692: ARRAY
51693: EQUAL
51694: PUSH
51695: LD_VAR 0 2
51699: PUSH
51700: LD_VAR 0 1
51704: PPUSH
51705: CALL_OW 437
51709: PUSH
51710: LD_INT 1
51712: ARRAY
51713: PUSH
51714: LD_INT 2
51716: ARRAY
51717: EQUAL
51718: AND
51719: PUSH
51720: LD_VAR 0 3
51724: PUSH
51725: LD_VAR 0 1
51729: PPUSH
51730: CALL_OW 437
51734: PUSH
51735: LD_INT 1
51737: ARRAY
51738: PUSH
51739: LD_INT 3
51741: ARRAY
51742: EQUAL
51743: AND
51744: IFFALSE 51754
// result := true ;
51746: LD_ADDR_VAR 0 4
51750: PUSH
51751: LD_INT 1
51753: ST_TO_ADDR
// end ; end ;
51754: LD_VAR 0 4
51758: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51759: LD_INT 0
51761: PPUSH
51762: PPUSH
51763: PPUSH
51764: PPUSH
// if not unit or not area then
51765: LD_VAR 0 1
51769: NOT
51770: PUSH
51771: LD_VAR 0 2
51775: NOT
51776: OR
51777: IFFALSE 51781
// exit ;
51779: GO 51957
// tmp := AreaToList ( area , i ) ;
51781: LD_ADDR_VAR 0 6
51785: PUSH
51786: LD_VAR 0 2
51790: PPUSH
51791: LD_VAR 0 5
51795: PPUSH
51796: CALL_OW 517
51800: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51801: LD_ADDR_VAR 0 5
51805: PUSH
51806: DOUBLE
51807: LD_INT 1
51809: DEC
51810: ST_TO_ADDR
51811: LD_VAR 0 6
51815: PUSH
51816: LD_INT 1
51818: ARRAY
51819: PUSH
51820: FOR_TO
51821: IFFALSE 51955
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51823: LD_ADDR_VAR 0 7
51827: PUSH
51828: LD_VAR 0 6
51832: PUSH
51833: LD_INT 1
51835: ARRAY
51836: PUSH
51837: LD_VAR 0 5
51841: ARRAY
51842: PUSH
51843: LD_VAR 0 6
51847: PUSH
51848: LD_INT 2
51850: ARRAY
51851: PUSH
51852: LD_VAR 0 5
51856: ARRAY
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
51862: LD_INT 92
51864: PUSH
51865: LD_VAR 0 7
51869: PUSH
51870: LD_INT 1
51872: ARRAY
51873: PUSH
51874: LD_VAR 0 7
51878: PUSH
51879: LD_INT 2
51881: ARRAY
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: PPUSH
51892: CALL_OW 69
51896: PUSH
51897: LD_INT 0
51899: EQUAL
51900: IFFALSE 51953
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51902: LD_VAR 0 1
51906: PPUSH
51907: LD_VAR 0 7
51911: PUSH
51912: LD_INT 1
51914: ARRAY
51915: PPUSH
51916: LD_VAR 0 7
51920: PUSH
51921: LD_INT 2
51923: ARRAY
51924: PPUSH
51925: LD_VAR 0 3
51929: PPUSH
51930: CALL_OW 48
// result := IsPlaced ( unit ) ;
51934: LD_ADDR_VAR 0 4
51938: PUSH
51939: LD_VAR 0 1
51943: PPUSH
51944: CALL_OW 305
51948: ST_TO_ADDR
// exit ;
51949: POP
51950: POP
51951: GO 51957
// end ; end ;
51953: GO 51820
51955: POP
51956: POP
// end ;
51957: LD_VAR 0 4
51961: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51962: LD_INT 0
51964: PPUSH
51965: PPUSH
51966: PPUSH
// if not side or side > 8 then
51967: LD_VAR 0 1
51971: NOT
51972: PUSH
51973: LD_VAR 0 1
51977: PUSH
51978: LD_INT 8
51980: GREATER
51981: OR
51982: IFFALSE 51986
// exit ;
51984: GO 52173
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51986: LD_ADDR_VAR 0 4
51990: PUSH
51991: LD_INT 22
51993: PUSH
51994: LD_VAR 0 1
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 21
52005: PUSH
52006: LD_INT 3
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PPUSH
52017: CALL_OW 69
52021: ST_TO_ADDR
// if not tmp then
52022: LD_VAR 0 4
52026: NOT
52027: IFFALSE 52031
// exit ;
52029: GO 52173
// enable_addtolog := true ;
52031: LD_ADDR_OWVAR 81
52035: PUSH
52036: LD_INT 1
52038: ST_TO_ADDR
// AddToLog ( [ ) ;
52039: LD_STRING [
52041: PPUSH
52042: CALL_OW 561
// for i in tmp do
52046: LD_ADDR_VAR 0 3
52050: PUSH
52051: LD_VAR 0 4
52055: PUSH
52056: FOR_IN
52057: IFFALSE 52164
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52059: LD_STRING [
52061: PUSH
52062: LD_VAR 0 3
52066: PPUSH
52067: CALL_OW 266
52071: STR
52072: PUSH
52073: LD_STRING , 
52075: STR
52076: PUSH
52077: LD_VAR 0 3
52081: PPUSH
52082: CALL_OW 250
52086: STR
52087: PUSH
52088: LD_STRING , 
52090: STR
52091: PUSH
52092: LD_VAR 0 3
52096: PPUSH
52097: CALL_OW 251
52101: STR
52102: PUSH
52103: LD_STRING , 
52105: STR
52106: PUSH
52107: LD_VAR 0 3
52111: PPUSH
52112: CALL_OW 254
52116: STR
52117: PUSH
52118: LD_STRING , 
52120: STR
52121: PUSH
52122: LD_VAR 0 3
52126: PPUSH
52127: LD_INT 1
52129: PPUSH
52130: CALL_OW 268
52134: STR
52135: PUSH
52136: LD_STRING , 
52138: STR
52139: PUSH
52140: LD_VAR 0 3
52144: PPUSH
52145: LD_INT 2
52147: PPUSH
52148: CALL_OW 268
52152: STR
52153: PUSH
52154: LD_STRING ],
52156: STR
52157: PPUSH
52158: CALL_OW 561
// end ;
52162: GO 52056
52164: POP
52165: POP
// AddToLog ( ]; ) ;
52166: LD_STRING ];
52168: PPUSH
52169: CALL_OW 561
// end ;
52173: LD_VAR 0 2
52177: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52178: LD_INT 0
52180: PPUSH
52181: PPUSH
52182: PPUSH
52183: PPUSH
52184: PPUSH
// if not area or not rate or not max then
52185: LD_VAR 0 1
52189: NOT
52190: PUSH
52191: LD_VAR 0 2
52195: NOT
52196: OR
52197: PUSH
52198: LD_VAR 0 4
52202: NOT
52203: OR
52204: IFFALSE 52208
// exit ;
52206: GO 52397
// while 1 do
52208: LD_INT 1
52210: IFFALSE 52397
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52212: LD_ADDR_VAR 0 9
52216: PUSH
52217: LD_VAR 0 1
52221: PPUSH
52222: LD_INT 1
52224: PPUSH
52225: CALL_OW 287
52229: PUSH
52230: LD_INT 10
52232: MUL
52233: ST_TO_ADDR
// r := rate / 10 ;
52234: LD_ADDR_VAR 0 7
52238: PUSH
52239: LD_VAR 0 2
52243: PUSH
52244: LD_INT 10
52246: DIVREAL
52247: ST_TO_ADDR
// time := 1 1$00 ;
52248: LD_ADDR_VAR 0 8
52252: PUSH
52253: LD_INT 2100
52255: ST_TO_ADDR
// if amount < min then
52256: LD_VAR 0 9
52260: PUSH
52261: LD_VAR 0 3
52265: LESS
52266: IFFALSE 52284
// r := r * 2 else
52268: LD_ADDR_VAR 0 7
52272: PUSH
52273: LD_VAR 0 7
52277: PUSH
52278: LD_INT 2
52280: MUL
52281: ST_TO_ADDR
52282: GO 52310
// if amount > max then
52284: LD_VAR 0 9
52288: PUSH
52289: LD_VAR 0 4
52293: GREATER
52294: IFFALSE 52310
// r := r / 2 ;
52296: LD_ADDR_VAR 0 7
52300: PUSH
52301: LD_VAR 0 7
52305: PUSH
52306: LD_INT 2
52308: DIVREAL
52309: ST_TO_ADDR
// time := time / r ;
52310: LD_ADDR_VAR 0 8
52314: PUSH
52315: LD_VAR 0 8
52319: PUSH
52320: LD_VAR 0 7
52324: DIVREAL
52325: ST_TO_ADDR
// if time < 0 then
52326: LD_VAR 0 8
52330: PUSH
52331: LD_INT 0
52333: LESS
52334: IFFALSE 52351
// time := time * - 1 ;
52336: LD_ADDR_VAR 0 8
52340: PUSH
52341: LD_VAR 0 8
52345: PUSH
52346: LD_INT 1
52348: NEG
52349: MUL
52350: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52351: LD_VAR 0 8
52355: PUSH
52356: LD_INT 35
52358: PPUSH
52359: LD_INT 875
52361: PPUSH
52362: CALL_OW 12
52366: PLUS
52367: PPUSH
52368: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52372: LD_INT 1
52374: PPUSH
52375: LD_INT 5
52377: PPUSH
52378: CALL_OW 12
52382: PPUSH
52383: LD_VAR 0 1
52387: PPUSH
52388: LD_INT 1
52390: PPUSH
52391: CALL_OW 55
// end ;
52395: GO 52208
// end ;
52397: LD_VAR 0 5
52401: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52402: LD_INT 0
52404: PPUSH
52405: PPUSH
52406: PPUSH
52407: PPUSH
52408: PPUSH
52409: PPUSH
52410: PPUSH
52411: PPUSH
// if not turrets or not factories then
52412: LD_VAR 0 1
52416: NOT
52417: PUSH
52418: LD_VAR 0 2
52422: NOT
52423: OR
52424: IFFALSE 52428
// exit ;
52426: GO 52735
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52428: LD_ADDR_VAR 0 10
52432: PUSH
52433: LD_INT 5
52435: PUSH
52436: LD_INT 6
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: LD_INT 4
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 3
52455: PUSH
52456: LD_INT 5
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 24
52470: PUSH
52471: LD_INT 25
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 23
52480: PUSH
52481: LD_INT 27
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 42
52494: PUSH
52495: LD_INT 43
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 44
52504: PUSH
52505: LD_INT 46
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 45
52514: PUSH
52515: LD_INT 47
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: LIST
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: LIST
52531: ST_TO_ADDR
// result := [ ] ;
52532: LD_ADDR_VAR 0 3
52536: PUSH
52537: EMPTY
52538: ST_TO_ADDR
// for i in turrets do
52539: LD_ADDR_VAR 0 4
52543: PUSH
52544: LD_VAR 0 1
52548: PUSH
52549: FOR_IN
52550: IFFALSE 52733
// begin nat := GetNation ( i ) ;
52552: LD_ADDR_VAR 0 7
52556: PUSH
52557: LD_VAR 0 4
52561: PPUSH
52562: CALL_OW 248
52566: ST_TO_ADDR
// weapon := 0 ;
52567: LD_ADDR_VAR 0 8
52571: PUSH
52572: LD_INT 0
52574: ST_TO_ADDR
// if not nat then
52575: LD_VAR 0 7
52579: NOT
52580: IFFALSE 52584
// continue ;
52582: GO 52549
// for j in list [ nat ] do
52584: LD_ADDR_VAR 0 5
52588: PUSH
52589: LD_VAR 0 10
52593: PUSH
52594: LD_VAR 0 7
52598: ARRAY
52599: PUSH
52600: FOR_IN
52601: IFFALSE 52642
// if GetBWeapon ( i ) = j [ 1 ] then
52603: LD_VAR 0 4
52607: PPUSH
52608: CALL_OW 269
52612: PUSH
52613: LD_VAR 0 5
52617: PUSH
52618: LD_INT 1
52620: ARRAY
52621: EQUAL
52622: IFFALSE 52640
// begin weapon := j [ 2 ] ;
52624: LD_ADDR_VAR 0 8
52628: PUSH
52629: LD_VAR 0 5
52633: PUSH
52634: LD_INT 2
52636: ARRAY
52637: ST_TO_ADDR
// break ;
52638: GO 52642
// end ;
52640: GO 52600
52642: POP
52643: POP
// if not weapon then
52644: LD_VAR 0 8
52648: NOT
52649: IFFALSE 52653
// continue ;
52651: GO 52549
// for k in factories do
52653: LD_ADDR_VAR 0 6
52657: PUSH
52658: LD_VAR 0 2
52662: PUSH
52663: FOR_IN
52664: IFFALSE 52729
// begin weapons := AvailableWeaponList ( k ) ;
52666: LD_ADDR_VAR 0 9
52670: PUSH
52671: LD_VAR 0 6
52675: PPUSH
52676: CALL_OW 478
52680: ST_TO_ADDR
// if not weapons then
52681: LD_VAR 0 9
52685: NOT
52686: IFFALSE 52690
// continue ;
52688: GO 52663
// if weapon in weapons then
52690: LD_VAR 0 8
52694: PUSH
52695: LD_VAR 0 9
52699: IN
52700: IFFALSE 52727
// begin result := [ i , weapon ] ;
52702: LD_ADDR_VAR 0 3
52706: PUSH
52707: LD_VAR 0 4
52711: PUSH
52712: LD_VAR 0 8
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: ST_TO_ADDR
// exit ;
52721: POP
52722: POP
52723: POP
52724: POP
52725: GO 52735
// end ; end ;
52727: GO 52663
52729: POP
52730: POP
// end ;
52731: GO 52549
52733: POP
52734: POP
// end ;
52735: LD_VAR 0 3
52739: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52740: LD_INT 0
52742: PPUSH
// if not side or side > 8 then
52743: LD_VAR 0 3
52747: NOT
52748: PUSH
52749: LD_VAR 0 3
52753: PUSH
52754: LD_INT 8
52756: GREATER
52757: OR
52758: IFFALSE 52762
// exit ;
52760: GO 52821
// if not range then
52762: LD_VAR 0 4
52766: NOT
52767: IFFALSE 52778
// range := - 12 ;
52769: LD_ADDR_VAR 0 4
52773: PUSH
52774: LD_INT 12
52776: NEG
52777: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52778: LD_VAR 0 1
52782: PPUSH
52783: LD_VAR 0 2
52787: PPUSH
52788: LD_VAR 0 3
52792: PPUSH
52793: LD_VAR 0 4
52797: PPUSH
52798: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52802: LD_VAR 0 1
52806: PPUSH
52807: LD_VAR 0 2
52811: PPUSH
52812: LD_VAR 0 3
52816: PPUSH
52817: CALL_OW 331
// end ;
52821: LD_VAR 0 5
52825: RET
// export function Video ( mode ) ; begin
52826: LD_INT 0
52828: PPUSH
// ingame_video = mode ;
52829: LD_ADDR_OWVAR 52
52833: PUSH
52834: LD_VAR 0 1
52838: ST_TO_ADDR
// interface_hidden = mode ;
52839: LD_ADDR_OWVAR 54
52843: PUSH
52844: LD_VAR 0 1
52848: ST_TO_ADDR
// end ;
52849: LD_VAR 0 2
52853: RET
// export function Join ( array , element ) ; begin
52854: LD_INT 0
52856: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52857: LD_ADDR_VAR 0 3
52861: PUSH
52862: LD_VAR 0 1
52866: PPUSH
52867: LD_VAR 0 1
52871: PUSH
52872: LD_INT 1
52874: PLUS
52875: PPUSH
52876: LD_VAR 0 2
52880: PPUSH
52881: CALL_OW 1
52885: ST_TO_ADDR
// end ;
52886: LD_VAR 0 3
52890: RET
// export function JoinUnion ( array , element ) ; begin
52891: LD_INT 0
52893: PPUSH
// result := array union element ;
52894: LD_ADDR_VAR 0 3
52898: PUSH
52899: LD_VAR 0 1
52903: PUSH
52904: LD_VAR 0 2
52908: UNION
52909: ST_TO_ADDR
// end ;
52910: LD_VAR 0 3
52914: RET
// export function GetBehemoths ( side ) ; begin
52915: LD_INT 0
52917: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
52918: LD_ADDR_VAR 0 2
52922: PUSH
52923: LD_INT 22
52925: PUSH
52926: LD_VAR 0 1
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 31
52937: PUSH
52938: LD_INT 25
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PPUSH
52949: CALL_OW 69
52953: ST_TO_ADDR
// end ;
52954: LD_VAR 0 2
52958: RET
// export function Shuffle ( array ) ; var i , index ; begin
52959: LD_INT 0
52961: PPUSH
52962: PPUSH
52963: PPUSH
// result := [ ] ;
52964: LD_ADDR_VAR 0 2
52968: PUSH
52969: EMPTY
52970: ST_TO_ADDR
// if not array then
52971: LD_VAR 0 1
52975: NOT
52976: IFFALSE 52980
// exit ;
52978: GO 53079
// Randomize ;
52980: CALL_OW 10
// for i = array downto 1 do
52984: LD_ADDR_VAR 0 3
52988: PUSH
52989: DOUBLE
52990: LD_VAR 0 1
52994: INC
52995: ST_TO_ADDR
52996: LD_INT 1
52998: PUSH
52999: FOR_DOWNTO
53000: IFFALSE 53077
// begin index := rand ( 1 , array ) ;
53002: LD_ADDR_VAR 0 4
53006: PUSH
53007: LD_INT 1
53009: PPUSH
53010: LD_VAR 0 1
53014: PPUSH
53015: CALL_OW 12
53019: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53020: LD_ADDR_VAR 0 2
53024: PUSH
53025: LD_VAR 0 2
53029: PPUSH
53030: LD_VAR 0 2
53034: PUSH
53035: LD_INT 1
53037: PLUS
53038: PPUSH
53039: LD_VAR 0 1
53043: PUSH
53044: LD_VAR 0 4
53048: ARRAY
53049: PPUSH
53050: CALL_OW 2
53054: ST_TO_ADDR
// array := Delete ( array , index ) ;
53055: LD_ADDR_VAR 0 1
53059: PUSH
53060: LD_VAR 0 1
53064: PPUSH
53065: LD_VAR 0 4
53069: PPUSH
53070: CALL_OW 3
53074: ST_TO_ADDR
// end ;
53075: GO 52999
53077: POP
53078: POP
// end ;
53079: LD_VAR 0 2
53083: RET
// export function GetBaseMaterials ( base ) ; begin
53084: LD_INT 0
53086: PPUSH
// result := [ 0 , 0 , 0 ] ;
53087: LD_ADDR_VAR 0 2
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: LIST
53105: ST_TO_ADDR
// if not base then
53106: LD_VAR 0 1
53110: NOT
53111: IFFALSE 53115
// exit ;
53113: GO 53164
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53115: LD_ADDR_VAR 0 2
53119: PUSH
53120: LD_VAR 0 1
53124: PPUSH
53125: LD_INT 1
53127: PPUSH
53128: CALL_OW 275
53132: PUSH
53133: LD_VAR 0 1
53137: PPUSH
53138: LD_INT 2
53140: PPUSH
53141: CALL_OW 275
53145: PUSH
53146: LD_VAR 0 1
53150: PPUSH
53151: LD_INT 3
53153: PPUSH
53154: CALL_OW 275
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: LIST
53163: ST_TO_ADDR
// end ;
53164: LD_VAR 0 2
53168: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53169: LD_INT 0
53171: PPUSH
53172: PPUSH
// result := array ;
53173: LD_ADDR_VAR 0 3
53177: PUSH
53178: LD_VAR 0 1
53182: ST_TO_ADDR
// if size >= result then
53183: LD_VAR 0 2
53187: PUSH
53188: LD_VAR 0 3
53192: GREATEREQUAL
53193: IFFALSE 53197
// exit ;
53195: GO 53247
// if size then
53197: LD_VAR 0 2
53201: IFFALSE 53247
// for i := array downto size do
53203: LD_ADDR_VAR 0 4
53207: PUSH
53208: DOUBLE
53209: LD_VAR 0 1
53213: INC
53214: ST_TO_ADDR
53215: LD_VAR 0 2
53219: PUSH
53220: FOR_DOWNTO
53221: IFFALSE 53245
// result := Delete ( result , result ) ;
53223: LD_ADDR_VAR 0 3
53227: PUSH
53228: LD_VAR 0 3
53232: PPUSH
53233: LD_VAR 0 3
53237: PPUSH
53238: CALL_OW 3
53242: ST_TO_ADDR
53243: GO 53220
53245: POP
53246: POP
// end ;
53247: LD_VAR 0 3
53251: RET
// export function ComExit ( unit ) ; var tmp ; begin
53252: LD_INT 0
53254: PPUSH
53255: PPUSH
// if not IsInUnit ( unit ) then
53256: LD_VAR 0 1
53260: PPUSH
53261: CALL_OW 310
53265: NOT
53266: IFFALSE 53270
// exit ;
53268: GO 53330
// tmp := IsInUnit ( unit ) ;
53270: LD_ADDR_VAR 0 3
53274: PUSH
53275: LD_VAR 0 1
53279: PPUSH
53280: CALL_OW 310
53284: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53285: LD_VAR 0 3
53289: PPUSH
53290: CALL_OW 247
53294: PUSH
53295: LD_INT 2
53297: EQUAL
53298: IFFALSE 53311
// ComExitVehicle ( unit ) else
53300: LD_VAR 0 1
53304: PPUSH
53305: CALL_OW 121
53309: GO 53320
// ComExitBuilding ( unit ) ;
53311: LD_VAR 0 1
53315: PPUSH
53316: CALL_OW 122
// result := tmp ;
53320: LD_ADDR_VAR 0 2
53324: PUSH
53325: LD_VAR 0 3
53329: ST_TO_ADDR
// end ;
53330: LD_VAR 0 2
53334: RET
// export function ComExitAll ( units ) ; var i ; begin
53335: LD_INT 0
53337: PPUSH
53338: PPUSH
// if not units then
53339: LD_VAR 0 1
53343: NOT
53344: IFFALSE 53348
// exit ;
53346: GO 53374
// for i in units do
53348: LD_ADDR_VAR 0 3
53352: PUSH
53353: LD_VAR 0 1
53357: PUSH
53358: FOR_IN
53359: IFFALSE 53372
// ComExit ( i ) ;
53361: LD_VAR 0 3
53365: PPUSH
53366: CALL 53252 0 1
53370: GO 53358
53372: POP
53373: POP
// end ;
53374: LD_VAR 0 2
53378: RET
// export function ResetHc ; begin
53379: LD_INT 0
53381: PPUSH
// InitHc ;
53382: CALL_OW 19
// hc_importance := 0 ;
53386: LD_ADDR_OWVAR 32
53390: PUSH
53391: LD_INT 0
53393: ST_TO_ADDR
// end ;
53394: LD_VAR 0 1
53398: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53399: LD_INT 0
53401: PPUSH
53402: PPUSH
53403: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53404: LD_ADDR_VAR 0 6
53408: PUSH
53409: LD_VAR 0 1
53413: PUSH
53414: LD_VAR 0 3
53418: PLUS
53419: PUSH
53420: LD_INT 2
53422: DIV
53423: ST_TO_ADDR
// if _x < 0 then
53424: LD_VAR 0 6
53428: PUSH
53429: LD_INT 0
53431: LESS
53432: IFFALSE 53449
// _x := _x * - 1 ;
53434: LD_ADDR_VAR 0 6
53438: PUSH
53439: LD_VAR 0 6
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: MUL
53448: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53449: LD_ADDR_VAR 0 7
53453: PUSH
53454: LD_VAR 0 2
53458: PUSH
53459: LD_VAR 0 4
53463: PLUS
53464: PUSH
53465: LD_INT 2
53467: DIV
53468: ST_TO_ADDR
// if _y < 0 then
53469: LD_VAR 0 7
53473: PUSH
53474: LD_INT 0
53476: LESS
53477: IFFALSE 53494
// _y := _y * - 1 ;
53479: LD_ADDR_VAR 0 7
53483: PUSH
53484: LD_VAR 0 7
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: MUL
53493: ST_TO_ADDR
// result := [ _x , _y ] ;
53494: LD_ADDR_VAR 0 5
53498: PUSH
53499: LD_VAR 0 6
53503: PUSH
53504: LD_VAR 0 7
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: ST_TO_ADDR
// end ;
53513: LD_VAR 0 5
53517: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53518: LD_INT 0
53520: PPUSH
53521: PPUSH
53522: PPUSH
53523: PPUSH
// task := GetTaskList ( unit ) ;
53524: LD_ADDR_VAR 0 7
53528: PUSH
53529: LD_VAR 0 1
53533: PPUSH
53534: CALL_OW 437
53538: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53539: LD_VAR 0 7
53543: NOT
53544: PUSH
53545: LD_VAR 0 1
53549: PPUSH
53550: LD_VAR 0 2
53554: PPUSH
53555: CALL_OW 308
53559: NOT
53560: AND
53561: IFFALSE 53565
// exit ;
53563: GO 53683
// if IsInArea ( unit , area ) then
53565: LD_VAR 0 1
53569: PPUSH
53570: LD_VAR 0 2
53574: PPUSH
53575: CALL_OW 308
53579: IFFALSE 53597
// begin ComMoveToArea ( unit , goAway ) ;
53581: LD_VAR 0 1
53585: PPUSH
53586: LD_VAR 0 3
53590: PPUSH
53591: CALL_OW 113
// exit ;
53595: GO 53683
// end ; if task [ 1 ] [ 1 ] <> M then
53597: LD_VAR 0 7
53601: PUSH
53602: LD_INT 1
53604: ARRAY
53605: PUSH
53606: LD_INT 1
53608: ARRAY
53609: PUSH
53610: LD_STRING M
53612: NONEQUAL
53613: IFFALSE 53617
// exit ;
53615: GO 53683
// x := task [ 1 ] [ 2 ] ;
53617: LD_ADDR_VAR 0 5
53621: PUSH
53622: LD_VAR 0 7
53626: PUSH
53627: LD_INT 1
53629: ARRAY
53630: PUSH
53631: LD_INT 2
53633: ARRAY
53634: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53635: LD_ADDR_VAR 0 6
53639: PUSH
53640: LD_VAR 0 7
53644: PUSH
53645: LD_INT 1
53647: ARRAY
53648: PUSH
53649: LD_INT 3
53651: ARRAY
53652: ST_TO_ADDR
// if InArea ( x , y , area ) then
53653: LD_VAR 0 5
53657: PPUSH
53658: LD_VAR 0 6
53662: PPUSH
53663: LD_VAR 0 2
53667: PPUSH
53668: CALL_OW 309
53672: IFFALSE 53683
// ComStop ( unit ) ;
53674: LD_VAR 0 1
53678: PPUSH
53679: CALL_OW 141
// end ;
53683: LD_VAR 0 4
53687: RET
// export function Abs ( value ) ; begin
53688: LD_INT 0
53690: PPUSH
// result := value ;
53691: LD_ADDR_VAR 0 2
53695: PUSH
53696: LD_VAR 0 1
53700: ST_TO_ADDR
// if value < 0 then
53701: LD_VAR 0 1
53705: PUSH
53706: LD_INT 0
53708: LESS
53709: IFFALSE 53726
// result := value * - 1 ;
53711: LD_ADDR_VAR 0 2
53715: PUSH
53716: LD_VAR 0 1
53720: PUSH
53721: LD_INT 1
53723: NEG
53724: MUL
53725: ST_TO_ADDR
// end ;
53726: LD_VAR 0 2
53730: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53731: LD_INT 0
53733: PPUSH
53734: PPUSH
53735: PPUSH
53736: PPUSH
53737: PPUSH
53738: PPUSH
53739: PPUSH
53740: PPUSH
// if not unit or not building then
53741: LD_VAR 0 1
53745: NOT
53746: PUSH
53747: LD_VAR 0 2
53751: NOT
53752: OR
53753: IFFALSE 53757
// exit ;
53755: GO 53983
// x := GetX ( building ) ;
53757: LD_ADDR_VAR 0 4
53761: PUSH
53762: LD_VAR 0 2
53766: PPUSH
53767: CALL_OW 250
53771: ST_TO_ADDR
// y := GetY ( building ) ;
53772: LD_ADDR_VAR 0 6
53776: PUSH
53777: LD_VAR 0 2
53781: PPUSH
53782: CALL_OW 251
53786: ST_TO_ADDR
// d := GetDir ( building ) ;
53787: LD_ADDR_VAR 0 8
53791: PUSH
53792: LD_VAR 0 2
53796: PPUSH
53797: CALL_OW 254
53801: ST_TO_ADDR
// r := 4 ;
53802: LD_ADDR_VAR 0 9
53806: PUSH
53807: LD_INT 4
53809: ST_TO_ADDR
// for i := 1 to 5 do
53810: LD_ADDR_VAR 0 10
53814: PUSH
53815: DOUBLE
53816: LD_INT 1
53818: DEC
53819: ST_TO_ADDR
53820: LD_INT 5
53822: PUSH
53823: FOR_TO
53824: IFFALSE 53981
// begin _x := ShiftX ( x , d , r + i ) ;
53826: LD_ADDR_VAR 0 5
53830: PUSH
53831: LD_VAR 0 4
53835: PPUSH
53836: LD_VAR 0 8
53840: PPUSH
53841: LD_VAR 0 9
53845: PUSH
53846: LD_VAR 0 10
53850: PLUS
53851: PPUSH
53852: CALL_OW 272
53856: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53857: LD_ADDR_VAR 0 7
53861: PUSH
53862: LD_VAR 0 6
53866: PPUSH
53867: LD_VAR 0 8
53871: PPUSH
53872: LD_VAR 0 9
53876: PUSH
53877: LD_VAR 0 10
53881: PLUS
53882: PPUSH
53883: CALL_OW 273
53887: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53888: LD_VAR 0 5
53892: PPUSH
53893: LD_VAR 0 7
53897: PPUSH
53898: CALL_OW 488
53902: PUSH
53903: LD_VAR 0 5
53907: PPUSH
53908: LD_VAR 0 7
53912: PPUSH
53913: CALL_OW 428
53917: PPUSH
53918: CALL_OW 247
53922: PUSH
53923: LD_INT 3
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: IN
53933: NOT
53934: AND
53935: IFFALSE 53979
// begin ComMoveXY ( unit , _x , _y ) ;
53937: LD_VAR 0 1
53941: PPUSH
53942: LD_VAR 0 5
53946: PPUSH
53947: LD_VAR 0 7
53951: PPUSH
53952: CALL_OW 111
// result := [ _x , _y ] ;
53956: LD_ADDR_VAR 0 3
53960: PUSH
53961: LD_VAR 0 5
53965: PUSH
53966: LD_VAR 0 7
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: ST_TO_ADDR
// exit ;
53975: POP
53976: POP
53977: GO 53983
// end ; end ;
53979: GO 53823
53981: POP
53982: POP
// end ;
53983: LD_VAR 0 3
53987: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
53988: LD_INT 0
53990: PPUSH
53991: PPUSH
53992: PPUSH
// result := 0 ;
53993: LD_ADDR_VAR 0 3
53997: PUSH
53998: LD_INT 0
54000: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54001: LD_VAR 0 1
54005: PUSH
54006: LD_INT 0
54008: LESS
54009: PUSH
54010: LD_VAR 0 1
54014: PUSH
54015: LD_INT 8
54017: GREATER
54018: OR
54019: PUSH
54020: LD_VAR 0 2
54024: PUSH
54025: LD_INT 0
54027: LESS
54028: OR
54029: PUSH
54030: LD_VAR 0 2
54034: PUSH
54035: LD_INT 8
54037: GREATER
54038: OR
54039: IFFALSE 54043
// exit ;
54041: GO 54118
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54043: LD_ADDR_VAR 0 4
54047: PUSH
54048: LD_INT 22
54050: PUSH
54051: LD_VAR 0 2
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PPUSH
54060: CALL_OW 69
54064: PUSH
54065: FOR_IN
54066: IFFALSE 54116
// begin un := UnitShoot ( i ) ;
54068: LD_ADDR_VAR 0 5
54072: PUSH
54073: LD_VAR 0 4
54077: PPUSH
54078: CALL_OW 504
54082: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54083: LD_VAR 0 5
54087: PPUSH
54088: CALL_OW 255
54092: PUSH
54093: LD_VAR 0 1
54097: EQUAL
54098: IFFALSE 54114
// begin result := un ;
54100: LD_ADDR_VAR 0 3
54104: PUSH
54105: LD_VAR 0 5
54109: ST_TO_ADDR
// exit ;
54110: POP
54111: POP
54112: GO 54118
// end ; end ;
54114: GO 54065
54116: POP
54117: POP
// end ;
54118: LD_VAR 0 3
54122: RET
// export function GetCargoBay ( units ) ; begin
54123: LD_INT 0
54125: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54126: LD_ADDR_VAR 0 2
54130: PUSH
54131: LD_VAR 0 1
54135: PPUSH
54136: LD_INT 2
54138: PUSH
54139: LD_INT 34
54141: PUSH
54142: LD_INT 12
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 34
54151: PUSH
54152: LD_INT 51
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 34
54161: PUSH
54162: LD_INT 32
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 34
54171: PUSH
54172: LD_INT 89
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: PPUSH
54186: CALL_OW 72
54190: ST_TO_ADDR
// end ;
54191: LD_VAR 0 2
54195: RET
// export function Negate ( value ) ; begin
54196: LD_INT 0
54198: PPUSH
// result := not value ;
54199: LD_ADDR_VAR 0 2
54203: PUSH
54204: LD_VAR 0 1
54208: NOT
54209: ST_TO_ADDR
// end ;
54210: LD_VAR 0 2
54214: RET
// export function Inc ( value ) ; begin
54215: LD_INT 0
54217: PPUSH
// result := value + 1 ;
54218: LD_ADDR_VAR 0 2
54222: PUSH
54223: LD_VAR 0 1
54227: PUSH
54228: LD_INT 1
54230: PLUS
54231: ST_TO_ADDR
// end ;
54232: LD_VAR 0 2
54236: RET
// export function Dec ( value ) ; begin
54237: LD_INT 0
54239: PPUSH
// result := value - 1 ;
54240: LD_ADDR_VAR 0 2
54244: PUSH
54245: LD_VAR 0 1
54249: PUSH
54250: LD_INT 1
54252: MINUS
54253: ST_TO_ADDR
// end ;
54254: LD_VAR 0 2
54258: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54259: LD_INT 0
54261: PPUSH
54262: PPUSH
54263: PPUSH
54264: PPUSH
54265: PPUSH
54266: PPUSH
54267: PPUSH
54268: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54269: LD_VAR 0 1
54273: PPUSH
54274: LD_VAR 0 2
54278: PPUSH
54279: CALL_OW 488
54283: NOT
54284: PUSH
54285: LD_VAR 0 3
54289: PPUSH
54290: LD_VAR 0 4
54294: PPUSH
54295: CALL_OW 488
54299: NOT
54300: OR
54301: IFFALSE 54314
// begin result := - 1 ;
54303: LD_ADDR_VAR 0 5
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: ST_TO_ADDR
// exit ;
54312: GO 54549
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54314: LD_ADDR_VAR 0 12
54318: PUSH
54319: LD_VAR 0 1
54323: PPUSH
54324: LD_VAR 0 2
54328: PPUSH
54329: LD_VAR 0 3
54333: PPUSH
54334: LD_VAR 0 4
54338: PPUSH
54339: CALL 53399 0 4
54343: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54344: LD_ADDR_VAR 0 11
54348: PUSH
54349: LD_VAR 0 1
54353: PPUSH
54354: LD_VAR 0 2
54358: PPUSH
54359: LD_VAR 0 12
54363: PUSH
54364: LD_INT 1
54366: ARRAY
54367: PPUSH
54368: LD_VAR 0 12
54372: PUSH
54373: LD_INT 2
54375: ARRAY
54376: PPUSH
54377: CALL_OW 298
54381: ST_TO_ADDR
// distance := 9999 ;
54382: LD_ADDR_VAR 0 10
54386: PUSH
54387: LD_INT 9999
54389: ST_TO_ADDR
// for i := 0 to 5 do
54390: LD_ADDR_VAR 0 6
54394: PUSH
54395: DOUBLE
54396: LD_INT 0
54398: DEC
54399: ST_TO_ADDR
54400: LD_INT 5
54402: PUSH
54403: FOR_TO
54404: IFFALSE 54547
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54406: LD_ADDR_VAR 0 7
54410: PUSH
54411: LD_VAR 0 1
54415: PPUSH
54416: LD_VAR 0 6
54420: PPUSH
54421: LD_VAR 0 11
54425: PPUSH
54426: CALL_OW 272
54430: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54431: LD_ADDR_VAR 0 8
54435: PUSH
54436: LD_VAR 0 2
54440: PPUSH
54441: LD_VAR 0 6
54445: PPUSH
54446: LD_VAR 0 11
54450: PPUSH
54451: CALL_OW 273
54455: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54456: LD_VAR 0 7
54460: PPUSH
54461: LD_VAR 0 8
54465: PPUSH
54466: CALL_OW 488
54470: NOT
54471: IFFALSE 54475
// continue ;
54473: GO 54403
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54475: LD_ADDR_VAR 0 9
54479: PUSH
54480: LD_VAR 0 12
54484: PUSH
54485: LD_INT 1
54487: ARRAY
54488: PPUSH
54489: LD_VAR 0 12
54493: PUSH
54494: LD_INT 2
54496: ARRAY
54497: PPUSH
54498: LD_VAR 0 7
54502: PPUSH
54503: LD_VAR 0 8
54507: PPUSH
54508: CALL_OW 298
54512: ST_TO_ADDR
// if tmp < distance then
54513: LD_VAR 0 9
54517: PUSH
54518: LD_VAR 0 10
54522: LESS
54523: IFFALSE 54545
// begin result := i ;
54525: LD_ADDR_VAR 0 5
54529: PUSH
54530: LD_VAR 0 6
54534: ST_TO_ADDR
// distance := tmp ;
54535: LD_ADDR_VAR 0 10
54539: PUSH
54540: LD_VAR 0 9
54544: ST_TO_ADDR
// end ; end ;
54545: GO 54403
54547: POP
54548: POP
// end ;
54549: LD_VAR 0 5
54553: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54554: LD_INT 0
54556: PPUSH
54557: PPUSH
// if not driver or not IsInUnit ( driver ) then
54558: LD_VAR 0 1
54562: NOT
54563: PUSH
54564: LD_VAR 0 1
54568: PPUSH
54569: CALL_OW 310
54573: NOT
54574: OR
54575: IFFALSE 54579
// exit ;
54577: GO 54669
// vehicle := IsInUnit ( driver ) ;
54579: LD_ADDR_VAR 0 3
54583: PUSH
54584: LD_VAR 0 1
54588: PPUSH
54589: CALL_OW 310
54593: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54594: LD_VAR 0 1
54598: PPUSH
54599: LD_STRING \
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: PUSH
54629: LD_STRING E
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: LD_INT 0
54637: PUSH
54638: LD_VAR 0 3
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PPUSH
54665: CALL_OW 446
// end ;
54669: LD_VAR 0 2
54673: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54674: LD_INT 0
54676: PPUSH
54677: PPUSH
// if not driver or not IsInUnit ( driver ) then
54678: LD_VAR 0 1
54682: NOT
54683: PUSH
54684: LD_VAR 0 1
54688: PPUSH
54689: CALL_OW 310
54693: NOT
54694: OR
54695: IFFALSE 54699
// exit ;
54697: GO 54789
// vehicle := IsInUnit ( driver ) ;
54699: LD_ADDR_VAR 0 3
54703: PUSH
54704: LD_VAR 0 1
54708: PPUSH
54709: CALL_OW 310
54713: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54714: LD_VAR 0 1
54718: PPUSH
54719: LD_STRING \
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: PUSH
54749: LD_STRING E
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_VAR 0 3
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PPUSH
54785: CALL_OW 447
// end ;
54789: LD_VAR 0 2
54793: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54794: LD_INT 0
54796: PPUSH
54797: PPUSH
54798: PPUSH
// tmp := [ ] ;
54799: LD_ADDR_VAR 0 5
54803: PUSH
54804: EMPTY
54805: ST_TO_ADDR
// for i in units do
54806: LD_ADDR_VAR 0 4
54810: PUSH
54811: LD_VAR 0 1
54815: PUSH
54816: FOR_IN
54817: IFFALSE 54855
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54819: LD_ADDR_VAR 0 5
54823: PUSH
54824: LD_VAR 0 5
54828: PPUSH
54829: LD_VAR 0 5
54833: PUSH
54834: LD_INT 1
54836: PLUS
54837: PPUSH
54838: LD_VAR 0 4
54842: PPUSH
54843: CALL_OW 256
54847: PPUSH
54848: CALL_OW 2
54852: ST_TO_ADDR
54853: GO 54816
54855: POP
54856: POP
// if not tmp then
54857: LD_VAR 0 5
54861: NOT
54862: IFFALSE 54866
// exit ;
54864: GO 54914
// if asc then
54866: LD_VAR 0 2
54870: IFFALSE 54894
// result := SortListByListAsc ( units , tmp ) else
54872: LD_ADDR_VAR 0 3
54876: PUSH
54877: LD_VAR 0 1
54881: PPUSH
54882: LD_VAR 0 5
54886: PPUSH
54887: CALL_OW 76
54891: ST_TO_ADDR
54892: GO 54914
// result := SortListByListDesc ( units , tmp ) ;
54894: LD_ADDR_VAR 0 3
54898: PUSH
54899: LD_VAR 0 1
54903: PPUSH
54904: LD_VAR 0 5
54908: PPUSH
54909: CALL_OW 77
54913: ST_TO_ADDR
// end ;
54914: LD_VAR 0 3
54918: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54919: LD_INT 0
54921: PPUSH
54922: PPUSH
// task := GetTaskList ( mech ) ;
54923: LD_ADDR_VAR 0 4
54927: PUSH
54928: LD_VAR 0 1
54932: PPUSH
54933: CALL_OW 437
54937: ST_TO_ADDR
// if not task then
54938: LD_VAR 0 4
54942: NOT
54943: IFFALSE 54947
// exit ;
54945: GO 54989
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
54947: LD_ADDR_VAR 0 3
54951: PUSH
54952: LD_VAR 0 4
54956: PUSH
54957: LD_INT 1
54959: ARRAY
54960: PUSH
54961: LD_INT 1
54963: ARRAY
54964: PUSH
54965: LD_STRING r
54967: EQUAL
54968: PUSH
54969: LD_VAR 0 4
54973: PUSH
54974: LD_INT 1
54976: ARRAY
54977: PUSH
54978: LD_INT 4
54980: ARRAY
54981: PUSH
54982: LD_VAR 0 2
54986: EQUAL
54987: AND
54988: ST_TO_ADDR
// end ;
54989: LD_VAR 0 3
54993: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
54994: LD_INT 0
54996: PPUSH
// SetDir ( unit , d ) ;
54997: LD_VAR 0 1
55001: PPUSH
55002: LD_VAR 0 4
55006: PPUSH
55007: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55011: LD_VAR 0 1
55015: PPUSH
55016: LD_VAR 0 2
55020: PPUSH
55021: LD_VAR 0 3
55025: PPUSH
55026: LD_VAR 0 5
55030: PPUSH
55031: CALL_OW 48
// end ;
55035: LD_VAR 0 6
55039: RET
// export function ToNaturalNumber ( number ) ; begin
55040: LD_INT 0
55042: PPUSH
// result := number div 1 ;
55043: LD_ADDR_VAR 0 2
55047: PUSH
55048: LD_VAR 0 1
55052: PUSH
55053: LD_INT 1
55055: DIV
55056: ST_TO_ADDR
// if number < 0 then
55057: LD_VAR 0 1
55061: PUSH
55062: LD_INT 0
55064: LESS
55065: IFFALSE 55075
// result := 0 ;
55067: LD_ADDR_VAR 0 2
55071: PUSH
55072: LD_INT 0
55074: ST_TO_ADDR
// end ;
55075: LD_VAR 0 2
55079: RET
// export function SortByClass ( units , class ) ; var un ; begin
55080: LD_INT 0
55082: PPUSH
55083: PPUSH
// if not units or not class then
55084: LD_VAR 0 1
55088: NOT
55089: PUSH
55090: LD_VAR 0 2
55094: NOT
55095: OR
55096: IFFALSE 55100
// exit ;
55098: GO 55195
// result := [ ] ;
55100: LD_ADDR_VAR 0 3
55104: PUSH
55105: EMPTY
55106: ST_TO_ADDR
// for un in units do
55107: LD_ADDR_VAR 0 4
55111: PUSH
55112: LD_VAR 0 1
55116: PUSH
55117: FOR_IN
55118: IFFALSE 55193
// if GetClass ( un ) = class then
55120: LD_VAR 0 4
55124: PPUSH
55125: CALL_OW 257
55129: PUSH
55130: LD_VAR 0 2
55134: EQUAL
55135: IFFALSE 55162
// result := Insert ( result , 1 , un ) else
55137: LD_ADDR_VAR 0 3
55141: PUSH
55142: LD_VAR 0 3
55146: PPUSH
55147: LD_INT 1
55149: PPUSH
55150: LD_VAR 0 4
55154: PPUSH
55155: CALL_OW 2
55159: ST_TO_ADDR
55160: GO 55191
// result := Replace ( result , result + 1 , un ) ;
55162: LD_ADDR_VAR 0 3
55166: PUSH
55167: LD_VAR 0 3
55171: PPUSH
55172: LD_VAR 0 3
55176: PUSH
55177: LD_INT 1
55179: PLUS
55180: PPUSH
55181: LD_VAR 0 4
55185: PPUSH
55186: CALL_OW 1
55190: ST_TO_ADDR
55191: GO 55117
55193: POP
55194: POP
// end ;
55195: LD_VAR 0 3
55199: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55200: LD_INT 0
55202: PPUSH
55203: PPUSH
55204: PPUSH
55205: PPUSH
55206: PPUSH
55207: PPUSH
55208: PPUSH
// result := [ ] ;
55209: LD_ADDR_VAR 0 4
55213: PUSH
55214: EMPTY
55215: ST_TO_ADDR
// if x - r < 0 then
55216: LD_VAR 0 1
55220: PUSH
55221: LD_VAR 0 3
55225: MINUS
55226: PUSH
55227: LD_INT 0
55229: LESS
55230: IFFALSE 55242
// min_x := 0 else
55232: LD_ADDR_VAR 0 8
55236: PUSH
55237: LD_INT 0
55239: ST_TO_ADDR
55240: GO 55258
// min_x := x - r ;
55242: LD_ADDR_VAR 0 8
55246: PUSH
55247: LD_VAR 0 1
55251: PUSH
55252: LD_VAR 0 3
55256: MINUS
55257: ST_TO_ADDR
// if y - r < 0 then
55258: LD_VAR 0 2
55262: PUSH
55263: LD_VAR 0 3
55267: MINUS
55268: PUSH
55269: LD_INT 0
55271: LESS
55272: IFFALSE 55284
// min_y := 0 else
55274: LD_ADDR_VAR 0 7
55278: PUSH
55279: LD_INT 0
55281: ST_TO_ADDR
55282: GO 55300
// min_y := y - r ;
55284: LD_ADDR_VAR 0 7
55288: PUSH
55289: LD_VAR 0 2
55293: PUSH
55294: LD_VAR 0 3
55298: MINUS
55299: ST_TO_ADDR
// max_x := x + r ;
55300: LD_ADDR_VAR 0 9
55304: PUSH
55305: LD_VAR 0 1
55309: PUSH
55310: LD_VAR 0 3
55314: PLUS
55315: ST_TO_ADDR
// max_y := y + r ;
55316: LD_ADDR_VAR 0 10
55320: PUSH
55321: LD_VAR 0 2
55325: PUSH
55326: LD_VAR 0 3
55330: PLUS
55331: ST_TO_ADDR
// for _x = min_x to max_x do
55332: LD_ADDR_VAR 0 5
55336: PUSH
55337: DOUBLE
55338: LD_VAR 0 8
55342: DEC
55343: ST_TO_ADDR
55344: LD_VAR 0 9
55348: PUSH
55349: FOR_TO
55350: IFFALSE 55451
// for _y = min_y to max_y do
55352: LD_ADDR_VAR 0 6
55356: PUSH
55357: DOUBLE
55358: LD_VAR 0 7
55362: DEC
55363: ST_TO_ADDR
55364: LD_VAR 0 10
55368: PUSH
55369: FOR_TO
55370: IFFALSE 55447
// begin if not ValidHex ( _x , _y ) then
55372: LD_VAR 0 5
55376: PPUSH
55377: LD_VAR 0 6
55381: PPUSH
55382: CALL_OW 488
55386: NOT
55387: IFFALSE 55391
// continue ;
55389: GO 55369
// if GetResourceTypeXY ( _x , _y ) then
55391: LD_VAR 0 5
55395: PPUSH
55396: LD_VAR 0 6
55400: PPUSH
55401: CALL_OW 283
55405: IFFALSE 55445
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55407: LD_ADDR_VAR 0 4
55411: PUSH
55412: LD_VAR 0 4
55416: PPUSH
55417: LD_VAR 0 4
55421: PUSH
55422: LD_INT 1
55424: PLUS
55425: PPUSH
55426: LD_VAR 0 5
55430: PUSH
55431: LD_VAR 0 6
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PPUSH
55440: CALL_OW 1
55444: ST_TO_ADDR
// end ;
55445: GO 55369
55447: POP
55448: POP
55449: GO 55349
55451: POP
55452: POP
// end ;
55453: LD_VAR 0 4
55457: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55458: LD_INT 0
55460: PPUSH
55461: PPUSH
55462: PPUSH
55463: PPUSH
55464: PPUSH
55465: PPUSH
55466: PPUSH
55467: PPUSH
// if not units then
55468: LD_VAR 0 1
55472: NOT
55473: IFFALSE 55477
// exit ;
55475: GO 56005
// result := UnitFilter ( units , [ f_ok ] ) ;
55477: LD_ADDR_VAR 0 3
55481: PUSH
55482: LD_VAR 0 1
55486: PPUSH
55487: LD_INT 50
55489: PUSH
55490: EMPTY
55491: LIST
55492: PPUSH
55493: CALL_OW 72
55497: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55498: LD_ADDR_VAR 0 8
55502: PUSH
55503: LD_VAR 0 1
55507: PUSH
55508: LD_INT 1
55510: ARRAY
55511: PPUSH
55512: CALL_OW 255
55516: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55517: LD_ADDR_VAR 0 10
55521: PUSH
55522: LD_INT 29
55524: PUSH
55525: LD_INT 91
55527: PUSH
55528: LD_INT 49
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: LIST
55535: ST_TO_ADDR
// if not result then
55536: LD_VAR 0 3
55540: NOT
55541: IFFALSE 55545
// exit ;
55543: GO 56005
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55545: LD_ADDR_VAR 0 5
55549: PUSH
55550: LD_INT 81
55552: PUSH
55553: LD_VAR 0 8
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PPUSH
55562: CALL_OW 69
55566: ST_TO_ADDR
// for i in result do
55567: LD_ADDR_VAR 0 4
55571: PUSH
55572: LD_VAR 0 3
55576: PUSH
55577: FOR_IN
55578: IFFALSE 56003
// begin tag := GetTag ( i ) + 1 ;
55580: LD_ADDR_VAR 0 9
55584: PUSH
55585: LD_VAR 0 4
55589: PPUSH
55590: CALL_OW 110
55594: PUSH
55595: LD_INT 1
55597: PLUS
55598: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
55599: LD_ADDR_VAR 0 7
55603: PUSH
55604: LD_VAR 0 4
55608: PPUSH
55609: CALL_OW 250
55613: PPUSH
55614: LD_VAR 0 4
55618: PPUSH
55619: CALL_OW 251
55623: PPUSH
55624: LD_INT 4
55626: PPUSH
55627: CALL 55200 0 3
55631: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
55632: LD_VAR 0 4
55636: PPUSH
55637: CALL_OW 247
55641: PUSH
55642: LD_INT 2
55644: EQUAL
55645: PUSH
55646: LD_VAR 0 7
55650: PUSH
55651: LD_INT 2
55653: GREATER
55654: AND
55655: PUSH
55656: LD_VAR 0 4
55660: PPUSH
55661: CALL_OW 264
55665: PUSH
55666: LD_VAR 0 10
55670: IN
55671: NOT
55672: AND
55673: IFFALSE 55712
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55675: LD_VAR 0 4
55679: PPUSH
55680: LD_VAR 0 7
55684: PUSH
55685: LD_INT 1
55687: ARRAY
55688: PUSH
55689: LD_INT 1
55691: ARRAY
55692: PPUSH
55693: LD_VAR 0 7
55697: PUSH
55698: LD_INT 1
55700: ARRAY
55701: PUSH
55702: LD_INT 2
55704: ARRAY
55705: PPUSH
55706: CALL_OW 116
55710: GO 56001
// if path > tag then
55712: LD_VAR 0 2
55716: PUSH
55717: LD_VAR 0 9
55721: GREATER
55722: IFFALSE 55930
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55724: LD_ADDR_VAR 0 6
55728: PUSH
55729: LD_VAR 0 5
55733: PPUSH
55734: LD_INT 91
55736: PUSH
55737: LD_VAR 0 4
55741: PUSH
55742: LD_INT 8
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: LIST
55749: PPUSH
55750: CALL_OW 72
55754: ST_TO_ADDR
// if nearEnemy then
55755: LD_VAR 0 6
55759: IFFALSE 55828
// begin if GetWeapon ( i ) = ru_time_lapser then
55761: LD_VAR 0 4
55765: PPUSH
55766: CALL_OW 264
55770: PUSH
55771: LD_INT 49
55773: EQUAL
55774: IFFALSE 55802
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55776: LD_VAR 0 4
55780: PPUSH
55781: LD_VAR 0 6
55785: PPUSH
55786: LD_VAR 0 4
55790: PPUSH
55791: CALL_OW 74
55795: PPUSH
55796: CALL_OW 112
55800: GO 55826
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55802: LD_VAR 0 4
55806: PPUSH
55807: LD_VAR 0 6
55811: PPUSH
55812: LD_VAR 0 4
55816: PPUSH
55817: CALL_OW 74
55821: PPUSH
55822: CALL 57076 0 2
// end else
55826: GO 55928
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55828: LD_VAR 0 4
55832: PPUSH
55833: LD_VAR 0 2
55837: PUSH
55838: LD_VAR 0 9
55842: ARRAY
55843: PUSH
55844: LD_INT 1
55846: ARRAY
55847: PPUSH
55848: LD_VAR 0 2
55852: PUSH
55853: LD_VAR 0 9
55857: ARRAY
55858: PUSH
55859: LD_INT 2
55861: ARRAY
55862: PPUSH
55863: CALL_OW 297
55867: PUSH
55868: LD_INT 6
55870: GREATER
55871: IFFALSE 55914
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55873: LD_VAR 0 4
55877: PPUSH
55878: LD_VAR 0 2
55882: PUSH
55883: LD_VAR 0 9
55887: ARRAY
55888: PUSH
55889: LD_INT 1
55891: ARRAY
55892: PPUSH
55893: LD_VAR 0 2
55897: PUSH
55898: LD_VAR 0 9
55902: ARRAY
55903: PUSH
55904: LD_INT 2
55906: ARRAY
55907: PPUSH
55908: CALL_OW 114
55912: GO 55928
// SetTag ( i , tag ) ;
55914: LD_VAR 0 4
55918: PPUSH
55919: LD_VAR 0 9
55923: PPUSH
55924: CALL_OW 109
// end else
55928: GO 56001
// if enemy then
55930: LD_VAR 0 5
55934: IFFALSE 56001
// begin if GetWeapon ( i ) = ru_time_lapser then
55936: LD_VAR 0 4
55940: PPUSH
55941: CALL_OW 264
55945: PUSH
55946: LD_INT 49
55948: EQUAL
55949: IFFALSE 55977
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
55951: LD_VAR 0 4
55955: PPUSH
55956: LD_VAR 0 5
55960: PPUSH
55961: LD_VAR 0 4
55965: PPUSH
55966: CALL_OW 74
55970: PPUSH
55971: CALL_OW 112
55975: GO 56001
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
55977: LD_VAR 0 4
55981: PPUSH
55982: LD_VAR 0 5
55986: PPUSH
55987: LD_VAR 0 4
55991: PPUSH
55992: CALL_OW 74
55996: PPUSH
55997: CALL 57076 0 2
// end ; end ;
56001: GO 55577
56003: POP
56004: POP
// end ;
56005: LD_VAR 0 3
56009: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56010: LD_INT 0
56012: PPUSH
56013: PPUSH
56014: PPUSH
// if not unit or IsInUnit ( unit ) then
56015: LD_VAR 0 1
56019: NOT
56020: PUSH
56021: LD_VAR 0 1
56025: PPUSH
56026: CALL_OW 310
56030: OR
56031: IFFALSE 56035
// exit ;
56033: GO 56126
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56035: LD_ADDR_VAR 0 4
56039: PUSH
56040: LD_VAR 0 1
56044: PPUSH
56045: CALL_OW 250
56049: PPUSH
56050: LD_VAR 0 2
56054: PPUSH
56055: LD_INT 1
56057: PPUSH
56058: CALL_OW 272
56062: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56063: LD_ADDR_VAR 0 5
56067: PUSH
56068: LD_VAR 0 1
56072: PPUSH
56073: CALL_OW 251
56077: PPUSH
56078: LD_VAR 0 2
56082: PPUSH
56083: LD_INT 1
56085: PPUSH
56086: CALL_OW 273
56090: ST_TO_ADDR
// if ValidHex ( x , y ) then
56091: LD_VAR 0 4
56095: PPUSH
56096: LD_VAR 0 5
56100: PPUSH
56101: CALL_OW 488
56105: IFFALSE 56126
// ComTurnXY ( unit , x , y ) ;
56107: LD_VAR 0 1
56111: PPUSH
56112: LD_VAR 0 4
56116: PPUSH
56117: LD_VAR 0 5
56121: PPUSH
56122: CALL_OW 118
// end ;
56126: LD_VAR 0 3
56130: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56131: LD_INT 0
56133: PPUSH
56134: PPUSH
// result := false ;
56135: LD_ADDR_VAR 0 3
56139: PUSH
56140: LD_INT 0
56142: ST_TO_ADDR
// if not units then
56143: LD_VAR 0 2
56147: NOT
56148: IFFALSE 56152
// exit ;
56150: GO 56197
// for i in units do
56152: LD_ADDR_VAR 0 4
56156: PUSH
56157: LD_VAR 0 2
56161: PUSH
56162: FOR_IN
56163: IFFALSE 56195
// if See ( side , i ) then
56165: LD_VAR 0 1
56169: PPUSH
56170: LD_VAR 0 4
56174: PPUSH
56175: CALL_OW 292
56179: IFFALSE 56193
// begin result := true ;
56181: LD_ADDR_VAR 0 3
56185: PUSH
56186: LD_INT 1
56188: ST_TO_ADDR
// exit ;
56189: POP
56190: POP
56191: GO 56197
// end ;
56193: GO 56162
56195: POP
56196: POP
// end ;
56197: LD_VAR 0 3
56201: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56202: LD_INT 0
56204: PPUSH
56205: PPUSH
56206: PPUSH
56207: PPUSH
// if not unit or not points then
56208: LD_VAR 0 1
56212: NOT
56213: PUSH
56214: LD_VAR 0 2
56218: NOT
56219: OR
56220: IFFALSE 56224
// exit ;
56222: GO 56314
// dist := 99999 ;
56224: LD_ADDR_VAR 0 5
56228: PUSH
56229: LD_INT 99999
56231: ST_TO_ADDR
// for i in points do
56232: LD_ADDR_VAR 0 4
56236: PUSH
56237: LD_VAR 0 2
56241: PUSH
56242: FOR_IN
56243: IFFALSE 56312
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56245: LD_ADDR_VAR 0 6
56249: PUSH
56250: LD_VAR 0 1
56254: PPUSH
56255: LD_VAR 0 4
56259: PUSH
56260: LD_INT 1
56262: ARRAY
56263: PPUSH
56264: LD_VAR 0 4
56268: PUSH
56269: LD_INT 2
56271: ARRAY
56272: PPUSH
56273: CALL_OW 297
56277: ST_TO_ADDR
// if tmpDist < dist then
56278: LD_VAR 0 6
56282: PUSH
56283: LD_VAR 0 5
56287: LESS
56288: IFFALSE 56310
// begin result := i ;
56290: LD_ADDR_VAR 0 3
56294: PUSH
56295: LD_VAR 0 4
56299: ST_TO_ADDR
// dist := tmpDist ;
56300: LD_ADDR_VAR 0 5
56304: PUSH
56305: LD_VAR 0 6
56309: ST_TO_ADDR
// end ; end ;
56310: GO 56242
56312: POP
56313: POP
// end ;
56314: LD_VAR 0 3
56318: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56319: LD_INT 0
56321: PPUSH
// uc_side := side ;
56322: LD_ADDR_OWVAR 20
56326: PUSH
56327: LD_VAR 0 1
56331: ST_TO_ADDR
// uc_nation := 3 ;
56332: LD_ADDR_OWVAR 21
56336: PUSH
56337: LD_INT 3
56339: ST_TO_ADDR
// vc_chassis := 25 ;
56340: LD_ADDR_OWVAR 37
56344: PUSH
56345: LD_INT 25
56347: ST_TO_ADDR
// vc_engine := engine_siberite ;
56348: LD_ADDR_OWVAR 39
56352: PUSH
56353: LD_INT 3
56355: ST_TO_ADDR
// vc_control := control_computer ;
56356: LD_ADDR_OWVAR 38
56360: PUSH
56361: LD_INT 3
56363: ST_TO_ADDR
// vc_weapon := 59 ;
56364: LD_ADDR_OWVAR 40
56368: PUSH
56369: LD_INT 59
56371: ST_TO_ADDR
// result := CreateVehicle ;
56372: LD_ADDR_VAR 0 5
56376: PUSH
56377: CALL_OW 45
56381: ST_TO_ADDR
// SetDir ( result , d ) ;
56382: LD_VAR 0 5
56386: PPUSH
56387: LD_VAR 0 4
56391: PPUSH
56392: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56396: LD_VAR 0 5
56400: PPUSH
56401: LD_VAR 0 2
56405: PPUSH
56406: LD_VAR 0 3
56410: PPUSH
56411: LD_INT 0
56413: PPUSH
56414: CALL_OW 48
// end ;
56418: LD_VAR 0 5
56422: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56423: LD_INT 0
56425: PPUSH
56426: PPUSH
56427: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56428: LD_ADDR_VAR 0 2
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56451: LD_VAR 0 1
56455: NOT
56456: PUSH
56457: LD_VAR 0 1
56461: PPUSH
56462: CALL_OW 264
56466: PUSH
56467: LD_INT 12
56469: PUSH
56470: LD_INT 51
56472: PUSH
56473: LD_INT 32
56475: PUSH
56476: LD_INT 89
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: IN
56485: NOT
56486: OR
56487: IFFALSE 56491
// exit ;
56489: GO 56589
// for i := 1 to 3 do
56491: LD_ADDR_VAR 0 3
56495: PUSH
56496: DOUBLE
56497: LD_INT 1
56499: DEC
56500: ST_TO_ADDR
56501: LD_INT 3
56503: PUSH
56504: FOR_TO
56505: IFFALSE 56587
// begin tmp := GetCargo ( cargo , i ) ;
56507: LD_ADDR_VAR 0 4
56511: PUSH
56512: LD_VAR 0 1
56516: PPUSH
56517: LD_VAR 0 3
56521: PPUSH
56522: CALL_OW 289
56526: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56527: LD_ADDR_VAR 0 2
56531: PUSH
56532: LD_VAR 0 2
56536: PPUSH
56537: LD_VAR 0 3
56541: PPUSH
56542: LD_VAR 0 4
56546: PPUSH
56547: CALL_OW 1
56551: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56552: LD_ADDR_VAR 0 2
56556: PUSH
56557: LD_VAR 0 2
56561: PPUSH
56562: LD_INT 4
56564: PPUSH
56565: LD_VAR 0 2
56569: PUSH
56570: LD_INT 4
56572: ARRAY
56573: PUSH
56574: LD_VAR 0 4
56578: PLUS
56579: PPUSH
56580: CALL_OW 1
56584: ST_TO_ADDR
// end ;
56585: GO 56504
56587: POP
56588: POP
// end ;
56589: LD_VAR 0 2
56593: RET
// export function Length ( array ) ; begin
56594: LD_INT 0
56596: PPUSH
// result := array + 0 ;
56597: LD_ADDR_VAR 0 2
56601: PUSH
56602: LD_VAR 0 1
56606: PUSH
56607: LD_INT 0
56609: PLUS
56610: ST_TO_ADDR
// end ;
56611: LD_VAR 0 2
56615: RET
// export function PrepareArray ( array ) ; begin
56616: LD_INT 0
56618: PPUSH
// result := array diff 0 ;
56619: LD_ADDR_VAR 0 2
56623: PUSH
56624: LD_VAR 0 1
56628: PUSH
56629: LD_INT 0
56631: DIFF
56632: ST_TO_ADDR
// if not result [ 1 ] then
56633: LD_VAR 0 2
56637: PUSH
56638: LD_INT 1
56640: ARRAY
56641: NOT
56642: IFFALSE 56662
// result := Delete ( result , 1 ) ;
56644: LD_ADDR_VAR 0 2
56648: PUSH
56649: LD_VAR 0 2
56653: PPUSH
56654: LD_INT 1
56656: PPUSH
56657: CALL_OW 3
56661: ST_TO_ADDR
// end ;
56662: LD_VAR 0 2
56666: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56667: LD_INT 0
56669: PPUSH
56670: PPUSH
56671: PPUSH
56672: PPUSH
// sibRocketRange := 25 ;
56673: LD_ADDR_VAR 0 6
56677: PUSH
56678: LD_INT 25
56680: ST_TO_ADDR
// result := false ;
56681: LD_ADDR_VAR 0 4
56685: PUSH
56686: LD_INT 0
56688: ST_TO_ADDR
// for i := 0 to 5 do
56689: LD_ADDR_VAR 0 5
56693: PUSH
56694: DOUBLE
56695: LD_INT 0
56697: DEC
56698: ST_TO_ADDR
56699: LD_INT 5
56701: PUSH
56702: FOR_TO
56703: IFFALSE 56770
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56705: LD_VAR 0 1
56709: PPUSH
56710: LD_VAR 0 5
56714: PPUSH
56715: LD_VAR 0 6
56719: PPUSH
56720: CALL_OW 272
56724: PPUSH
56725: LD_VAR 0 2
56729: PPUSH
56730: LD_VAR 0 5
56734: PPUSH
56735: LD_VAR 0 6
56739: PPUSH
56740: CALL_OW 273
56744: PPUSH
56745: LD_VAR 0 3
56749: PPUSH
56750: CALL_OW 309
56754: IFFALSE 56768
// begin result := true ;
56756: LD_ADDR_VAR 0 4
56760: PUSH
56761: LD_INT 1
56763: ST_TO_ADDR
// exit ;
56764: POP
56765: POP
56766: GO 56772
// end ;
56768: GO 56702
56770: POP
56771: POP
// end ;
56772: LD_VAR 0 4
56776: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
56777: LD_INT 0
56779: PPUSH
56780: PPUSH
56781: PPUSH
// if btype = b_depot then
56782: LD_VAR 0 2
56786: PUSH
56787: LD_INT 0
56789: EQUAL
56790: IFFALSE 56802
// begin result := true ;
56792: LD_ADDR_VAR 0 3
56796: PUSH
56797: LD_INT 1
56799: ST_TO_ADDR
// exit ;
56800: GO 56918
// end ; pom := GetBase ( depot ) ;
56802: LD_ADDR_VAR 0 4
56806: PUSH
56807: LD_VAR 0 1
56811: PPUSH
56812: CALL_OW 274
56816: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56817: LD_ADDR_VAR 0 5
56821: PUSH
56822: LD_VAR 0 2
56826: PPUSH
56827: LD_VAR 0 1
56831: PPUSH
56832: CALL_OW 248
56836: PPUSH
56837: CALL_OW 450
56841: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
56842: LD_ADDR_VAR 0 3
56846: PUSH
56847: LD_VAR 0 4
56851: PPUSH
56852: LD_INT 1
56854: PPUSH
56855: CALL_OW 275
56859: PUSH
56860: LD_VAR 0 5
56864: PUSH
56865: LD_INT 1
56867: ARRAY
56868: GREATEREQUAL
56869: PUSH
56870: LD_VAR 0 4
56874: PPUSH
56875: LD_INT 2
56877: PPUSH
56878: CALL_OW 275
56882: PUSH
56883: LD_VAR 0 5
56887: PUSH
56888: LD_INT 2
56890: ARRAY
56891: GREATEREQUAL
56892: AND
56893: PUSH
56894: LD_VAR 0 4
56898: PPUSH
56899: LD_INT 3
56901: PPUSH
56902: CALL_OW 275
56906: PUSH
56907: LD_VAR 0 5
56911: PUSH
56912: LD_INT 3
56914: ARRAY
56915: GREATEREQUAL
56916: AND
56917: ST_TO_ADDR
// end ;
56918: LD_VAR 0 3
56922: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
56923: LD_INT 0
56925: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
56926: LD_VAR 0 1
56930: PPUSH
56931: LD_VAR 0 2
56935: PPUSH
56936: LD_INT 0
56938: PPUSH
56939: LD_INT 0
56941: PPUSH
56942: LD_INT 1
56944: PPUSH
56945: LD_INT 0
56947: PPUSH
56948: CALL_OW 587
// end ;
56952: LD_VAR 0 3
56956: RET
// export function CenterOnNow ( unit ) ; begin
56957: LD_INT 0
56959: PPUSH
// result := IsInUnit ( unit ) ;
56960: LD_ADDR_VAR 0 2
56964: PUSH
56965: LD_VAR 0 1
56969: PPUSH
56970: CALL_OW 310
56974: ST_TO_ADDR
// if not result then
56975: LD_VAR 0 2
56979: NOT
56980: IFFALSE 56992
// result := unit ;
56982: LD_ADDR_VAR 0 2
56986: PUSH
56987: LD_VAR 0 1
56991: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
56992: LD_VAR 0 1
56996: PPUSH
56997: CALL_OW 87
// end ;
57001: LD_VAR 0 2
57005: RET
// export function ComMoveHex ( unit , hex ) ; begin
57006: LD_INT 0
57008: PPUSH
// if not hex then
57009: LD_VAR 0 2
57013: NOT
57014: IFFALSE 57018
// exit ;
57016: GO 57071
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57018: LD_VAR 0 2
57022: PUSH
57023: LD_INT 1
57025: ARRAY
57026: PPUSH
57027: LD_VAR 0 2
57031: PUSH
57032: LD_INT 2
57034: ARRAY
57035: PPUSH
57036: CALL_OW 428
57040: IFFALSE 57044
// exit ;
57042: GO 57071
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57044: LD_VAR 0 1
57048: PPUSH
57049: LD_VAR 0 2
57053: PUSH
57054: LD_INT 1
57056: ARRAY
57057: PPUSH
57058: LD_VAR 0 2
57062: PUSH
57063: LD_INT 2
57065: ARRAY
57066: PPUSH
57067: CALL_OW 111
// end ;
57071: LD_VAR 0 3
57075: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57076: LD_INT 0
57078: PPUSH
57079: PPUSH
57080: PPUSH
// if not unit or not enemy then
57081: LD_VAR 0 1
57085: NOT
57086: PUSH
57087: LD_VAR 0 2
57091: NOT
57092: OR
57093: IFFALSE 57097
// exit ;
57095: GO 57221
// x := GetX ( enemy ) ;
57097: LD_ADDR_VAR 0 4
57101: PUSH
57102: LD_VAR 0 2
57106: PPUSH
57107: CALL_OW 250
57111: ST_TO_ADDR
// y := GetY ( enemy ) ;
57112: LD_ADDR_VAR 0 5
57116: PUSH
57117: LD_VAR 0 2
57121: PPUSH
57122: CALL_OW 251
57126: ST_TO_ADDR
// if ValidHex ( x , y ) then
57127: LD_VAR 0 4
57131: PPUSH
57132: LD_VAR 0 5
57136: PPUSH
57137: CALL_OW 488
57141: IFFALSE 57221
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
57143: LD_VAR 0 2
57147: PPUSH
57148: CALL_OW 247
57152: PUSH
57153: LD_INT 3
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: IN
57163: PUSH
57164: LD_VAR 0 1
57168: PPUSH
57169: CALL_OW 255
57173: PPUSH
57174: LD_VAR 0 2
57178: PPUSH
57179: CALL_OW 292
57183: OR
57184: IFFALSE 57202
// ComAttackUnit ( unit , enemy ) else
57186: LD_VAR 0 1
57190: PPUSH
57191: LD_VAR 0 2
57195: PPUSH
57196: CALL_OW 115
57200: GO 57221
// ComAgressiveMove ( unit , x , y ) ;
57202: LD_VAR 0 1
57206: PPUSH
57207: LD_VAR 0 4
57211: PPUSH
57212: LD_VAR 0 5
57216: PPUSH
57217: CALL_OW 114
// end ;
57221: LD_VAR 0 3
57225: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
57226: LD_INT 0
57228: PPUSH
57229: PPUSH
57230: PPUSH
// list := AreaToList ( area , 0 ) ;
57231: LD_ADDR_VAR 0 5
57235: PUSH
57236: LD_VAR 0 1
57240: PPUSH
57241: LD_INT 0
57243: PPUSH
57244: CALL_OW 517
57248: ST_TO_ADDR
// if not list then
57249: LD_VAR 0 5
57253: NOT
57254: IFFALSE 57258
// exit ;
57256: GO 57388
// if all then
57258: LD_VAR 0 2
57262: IFFALSE 57350
// begin for i := 1 to list [ 1 ] do
57264: LD_ADDR_VAR 0 4
57268: PUSH
57269: DOUBLE
57270: LD_INT 1
57272: DEC
57273: ST_TO_ADDR
57274: LD_VAR 0 5
57278: PUSH
57279: LD_INT 1
57281: ARRAY
57282: PUSH
57283: FOR_TO
57284: IFFALSE 57346
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
57286: LD_ADDR_VAR 0 3
57290: PUSH
57291: LD_VAR 0 3
57295: PPUSH
57296: LD_VAR 0 3
57300: PUSH
57301: LD_INT 1
57303: PLUS
57304: PPUSH
57305: LD_VAR 0 5
57309: PUSH
57310: LD_INT 1
57312: ARRAY
57313: PUSH
57314: LD_VAR 0 4
57318: ARRAY
57319: PUSH
57320: LD_VAR 0 5
57324: PUSH
57325: LD_INT 2
57327: ARRAY
57328: PUSH
57329: LD_VAR 0 4
57333: ARRAY
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PPUSH
57339: CALL_OW 1
57343: ST_TO_ADDR
57344: GO 57283
57346: POP
57347: POP
// exit ;
57348: GO 57388
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
57350: LD_ADDR_VAR 0 3
57354: PUSH
57355: LD_VAR 0 5
57359: PUSH
57360: LD_INT 1
57362: ARRAY
57363: PUSH
57364: LD_INT 1
57366: ARRAY
57367: PUSH
57368: LD_VAR 0 5
57372: PUSH
57373: LD_INT 2
57375: ARRAY
57376: PUSH
57377: LD_INT 1
57379: ARRAY
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: EMPTY
57386: LIST
57387: ST_TO_ADDR
// end ;
57388: LD_VAR 0 3
57392: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
57393: LD_INT 0
57395: PPUSH
57396: PPUSH
// list := AreaToList ( area , 0 ) ;
57397: LD_ADDR_VAR 0 4
57401: PUSH
57402: LD_VAR 0 1
57406: PPUSH
57407: LD_INT 0
57409: PPUSH
57410: CALL_OW 517
57414: ST_TO_ADDR
// if not list then
57415: LD_VAR 0 4
57419: NOT
57420: IFFALSE 57424
// exit ;
57422: GO 57465
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
57424: LD_ADDR_VAR 0 3
57428: PUSH
57429: LD_VAR 0 4
57433: PUSH
57434: LD_INT 1
57436: ARRAY
57437: PUSH
57438: LD_INT 1
57440: ARRAY
57441: PUSH
57442: LD_VAR 0 4
57446: PUSH
57447: LD_INT 2
57449: ARRAY
57450: PUSH
57451: LD_INT 1
57453: ARRAY
57454: PUSH
57455: LD_VAR 0 2
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: LIST
57464: ST_TO_ADDR
// end ;
57465: LD_VAR 0 3
57469: RET
// export function First ( array ) ; begin
57470: LD_INT 0
57472: PPUSH
// if not array then
57473: LD_VAR 0 1
57477: NOT
57478: IFFALSE 57482
// exit ;
57480: GO 57496
// result := array [ 1 ] ;
57482: LD_ADDR_VAR 0 2
57486: PUSH
57487: LD_VAR 0 1
57491: PUSH
57492: LD_INT 1
57494: ARRAY
57495: ST_TO_ADDR
// end ;
57496: LD_VAR 0 2
57500: RET
// export function Last ( array ) ; begin
57501: LD_INT 0
57503: PPUSH
// if not array then
57504: LD_VAR 0 1
57508: NOT
57509: IFFALSE 57513
// exit ;
57511: GO 57529
// result := array [ array ] ;
57513: LD_ADDR_VAR 0 2
57517: PUSH
57518: LD_VAR 0 1
57522: PUSH
57523: LD_VAR 0 1
57527: ARRAY
57528: ST_TO_ADDR
// end ;
57529: LD_VAR 0 2
57533: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
57534: LD_INT 0
57536: PPUSH
57537: PPUSH
// result := [ ] ;
57538: LD_ADDR_VAR 0 5
57542: PUSH
57543: EMPTY
57544: ST_TO_ADDR
// if not array then
57545: LD_VAR 0 1
57549: NOT
57550: IFFALSE 57554
// exit ;
57552: GO 57666
// for i := 1 to array do
57554: LD_ADDR_VAR 0 6
57558: PUSH
57559: DOUBLE
57560: LD_INT 1
57562: DEC
57563: ST_TO_ADDR
57564: LD_VAR 0 1
57568: PUSH
57569: FOR_TO
57570: IFFALSE 57664
// if array [ i ] [ index ] = value then
57572: LD_VAR 0 1
57576: PUSH
57577: LD_VAR 0 6
57581: ARRAY
57582: PUSH
57583: LD_VAR 0 2
57587: ARRAY
57588: PUSH
57589: LD_VAR 0 3
57593: EQUAL
57594: IFFALSE 57662
// begin if indexColumn then
57596: LD_VAR 0 4
57600: IFFALSE 57636
// result := Join ( result , array [ i ] [ indexColumn ] ) else
57602: LD_ADDR_VAR 0 5
57606: PUSH
57607: LD_VAR 0 5
57611: PPUSH
57612: LD_VAR 0 1
57616: PUSH
57617: LD_VAR 0 6
57621: ARRAY
57622: PUSH
57623: LD_VAR 0 4
57627: ARRAY
57628: PPUSH
57629: CALL 52854 0 2
57633: ST_TO_ADDR
57634: GO 57662
// result := Join ( result , array [ i ] ) ;
57636: LD_ADDR_VAR 0 5
57640: PUSH
57641: LD_VAR 0 5
57645: PPUSH
57646: LD_VAR 0 1
57650: PUSH
57651: LD_VAR 0 6
57655: ARRAY
57656: PPUSH
57657: CALL 52854 0 2
57661: ST_TO_ADDR
// end ;
57662: GO 57569
57664: POP
57665: POP
// end ;
57666: LD_VAR 0 5
57670: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
57671: LD_INT 0
57673: PPUSH
// if not vehicles or not parkingPoint then
57674: LD_VAR 0 1
57678: NOT
57679: PUSH
57680: LD_VAR 0 2
57684: NOT
57685: OR
57686: IFFALSE 57690
// exit ;
57688: GO 57788
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
57690: LD_ADDR_VAR 0 1
57694: PUSH
57695: LD_VAR 0 1
57699: PPUSH
57700: LD_INT 50
57702: PUSH
57703: EMPTY
57704: LIST
57705: PUSH
57706: LD_INT 3
57708: PUSH
57709: LD_INT 92
57711: PUSH
57712: LD_VAR 0 2
57716: PUSH
57717: LD_INT 1
57719: ARRAY
57720: PUSH
57721: LD_VAR 0 2
57725: PUSH
57726: LD_INT 2
57728: ARRAY
57729: PUSH
57730: LD_INT 8
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PPUSH
57747: CALL_OW 72
57751: ST_TO_ADDR
// if not vehicles then
57752: LD_VAR 0 1
57756: NOT
57757: IFFALSE 57761
// exit ;
57759: GO 57788
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
57761: LD_VAR 0 1
57765: PPUSH
57766: LD_VAR 0 2
57770: PUSH
57771: LD_INT 1
57773: ARRAY
57774: PPUSH
57775: LD_VAR 0 2
57779: PUSH
57780: LD_INT 2
57782: ARRAY
57783: PPUSH
57784: CALL_OW 111
// end ;
57788: LD_VAR 0 3
57792: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
57793: LD_INT 0
57795: PPUSH
57796: PPUSH
57797: PPUSH
// if not side or not area then
57798: LD_VAR 0 1
57802: NOT
57803: PUSH
57804: LD_VAR 0 2
57808: NOT
57809: OR
57810: IFFALSE 57814
// exit ;
57812: GO 57933
// tmp := AreaToList ( area , 0 ) ;
57814: LD_ADDR_VAR 0 5
57818: PUSH
57819: LD_VAR 0 2
57823: PPUSH
57824: LD_INT 0
57826: PPUSH
57827: CALL_OW 517
57831: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57832: LD_ADDR_VAR 0 4
57836: PUSH
57837: DOUBLE
57838: LD_INT 1
57840: DEC
57841: ST_TO_ADDR
57842: LD_VAR 0 5
57846: PUSH
57847: LD_INT 1
57849: ARRAY
57850: PUSH
57851: FOR_TO
57852: IFFALSE 57931
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
57854: LD_VAR 0 5
57858: PUSH
57859: LD_INT 1
57861: ARRAY
57862: PUSH
57863: LD_VAR 0 4
57867: ARRAY
57868: PPUSH
57869: LD_VAR 0 5
57873: PUSH
57874: LD_INT 2
57876: ARRAY
57877: PUSH
57878: LD_VAR 0 4
57882: ARRAY
57883: PPUSH
57884: CALL_OW 351
57888: IFFALSE 57929
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
57890: LD_VAR 0 5
57894: PUSH
57895: LD_INT 1
57897: ARRAY
57898: PUSH
57899: LD_VAR 0 4
57903: ARRAY
57904: PPUSH
57905: LD_VAR 0 5
57909: PUSH
57910: LD_INT 2
57912: ARRAY
57913: PUSH
57914: LD_VAR 0 4
57918: ARRAY
57919: PPUSH
57920: LD_VAR 0 1
57924: PPUSH
57925: CALL_OW 244
// end ;
57929: GO 57851
57931: POP
57932: POP
// end ; end_of_file
57933: LD_VAR 0 3
57937: RET
// export globalGameSaveCounter ; every 0 0$1 do
57938: GO 57940
57940: DISABLE
// begin enable ;
57941: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
57942: LD_STRING updateTimer(
57944: PUSH
57945: LD_OWVAR 1
57949: STR
57950: PUSH
57951: LD_STRING );
57953: STR
57954: PPUSH
57955: CALL_OW 559
// end ;
57959: END
// every 0 0$1 do
57960: GO 57962
57962: DISABLE
// begin globalGameSaveCounter := 0 ;
57963: LD_ADDR_EXP 45
57967: PUSH
57968: LD_INT 0
57970: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
57971: LD_STRING setGameSaveCounter(0)
57973: PPUSH
57974: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
57978: LD_STRING initStreamRollete();
57980: PPUSH
57981: CALL_OW 559
// InitStreamMode ;
57985: CALL 59328 0 0
// DefineStreamItems ( false ) ;
57989: LD_INT 0
57991: PPUSH
57992: CALL 59792 0 1
// end ;
57996: END
// export function SOS_MapStart ( ) ; begin
57997: LD_INT 0
57999: PPUSH
// if streamModeActive then
58000: LD_EXP 46
58004: IFFALSE 58013
// DefineStreamItems ( true ) ;
58006: LD_INT 1
58008: PPUSH
58009: CALL 59792 0 1
// UpdateLuaVariables ( ) ;
58013: CALL 58030 0 0
// UpdateFactoryWaypoints ( ) ;
58017: CALL 72661 0 0
// UpdateWarehouseGatheringPoints ( ) ;
58021: CALL 72918 0 0
// end ;
58025: LD_VAR 0 1
58029: RET
// function UpdateLuaVariables ( ) ; begin
58030: LD_INT 0
58032: PPUSH
// if globalGameSaveCounter then
58033: LD_EXP 45
58037: IFFALSE 58071
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
58039: LD_ADDR_EXP 45
58043: PUSH
58044: LD_EXP 45
58048: PPUSH
58049: CALL 54215 0 1
58053: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
58054: LD_STRING setGameSaveCounter(
58056: PUSH
58057: LD_EXP 45
58061: STR
58062: PUSH
58063: LD_STRING )
58065: STR
58066: PPUSH
58067: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
58071: LD_STRING setGameDifficulty(
58073: PUSH
58074: LD_OWVAR 67
58078: STR
58079: PUSH
58080: LD_STRING )
58082: STR
58083: PPUSH
58084: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
58088: LD_STRING displayDifficulty(
58090: PUSH
58091: LD_OWVAR 67
58095: STR
58096: PUSH
58097: LD_STRING )
58099: STR
58100: PPUSH
58101: CALL_OW 559
// end ;
58105: LD_VAR 0 1
58109: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58110: LD_INT 0
58112: PPUSH
// if p2 = stream_mode then
58113: LD_VAR 0 2
58117: PUSH
58118: LD_INT 100
58120: EQUAL
58121: IFFALSE 59124
// begin if not StreamModeActive then
58123: LD_EXP 46
58127: NOT
58128: IFFALSE 58138
// StreamModeActive := true ;
58130: LD_ADDR_EXP 46
58134: PUSH
58135: LD_INT 1
58137: ST_TO_ADDR
// if p3 = 0 then
58138: LD_VAR 0 3
58142: PUSH
58143: LD_INT 0
58145: EQUAL
58146: IFFALSE 58152
// InitStreamMode ;
58148: CALL 59328 0 0
// if p3 = 1 then
58152: LD_VAR 0 3
58156: PUSH
58157: LD_INT 1
58159: EQUAL
58160: IFFALSE 58170
// sRocket := true ;
58162: LD_ADDR_EXP 51
58166: PUSH
58167: LD_INT 1
58169: ST_TO_ADDR
// if p3 = 2 then
58170: LD_VAR 0 3
58174: PUSH
58175: LD_INT 2
58177: EQUAL
58178: IFFALSE 58188
// sSpeed := true ;
58180: LD_ADDR_EXP 50
58184: PUSH
58185: LD_INT 1
58187: ST_TO_ADDR
// if p3 = 3 then
58188: LD_VAR 0 3
58192: PUSH
58193: LD_INT 3
58195: EQUAL
58196: IFFALSE 58206
// sEngine := true ;
58198: LD_ADDR_EXP 52
58202: PUSH
58203: LD_INT 1
58205: ST_TO_ADDR
// if p3 = 4 then
58206: LD_VAR 0 3
58210: PUSH
58211: LD_INT 4
58213: EQUAL
58214: IFFALSE 58224
// sSpec := true ;
58216: LD_ADDR_EXP 49
58220: PUSH
58221: LD_INT 1
58223: ST_TO_ADDR
// if p3 = 5 then
58224: LD_VAR 0 3
58228: PUSH
58229: LD_INT 5
58231: EQUAL
58232: IFFALSE 58242
// sLevel := true ;
58234: LD_ADDR_EXP 53
58238: PUSH
58239: LD_INT 1
58241: ST_TO_ADDR
// if p3 = 6 then
58242: LD_VAR 0 3
58246: PUSH
58247: LD_INT 6
58249: EQUAL
58250: IFFALSE 58260
// sArmoury := true ;
58252: LD_ADDR_EXP 54
58256: PUSH
58257: LD_INT 1
58259: ST_TO_ADDR
// if p3 = 7 then
58260: LD_VAR 0 3
58264: PUSH
58265: LD_INT 7
58267: EQUAL
58268: IFFALSE 58278
// sRadar := true ;
58270: LD_ADDR_EXP 55
58274: PUSH
58275: LD_INT 1
58277: ST_TO_ADDR
// if p3 = 8 then
58278: LD_VAR 0 3
58282: PUSH
58283: LD_INT 8
58285: EQUAL
58286: IFFALSE 58296
// sBunker := true ;
58288: LD_ADDR_EXP 56
58292: PUSH
58293: LD_INT 1
58295: ST_TO_ADDR
// if p3 = 9 then
58296: LD_VAR 0 3
58300: PUSH
58301: LD_INT 9
58303: EQUAL
58304: IFFALSE 58314
// sHack := true ;
58306: LD_ADDR_EXP 57
58310: PUSH
58311: LD_INT 1
58313: ST_TO_ADDR
// if p3 = 10 then
58314: LD_VAR 0 3
58318: PUSH
58319: LD_INT 10
58321: EQUAL
58322: IFFALSE 58332
// sFire := true ;
58324: LD_ADDR_EXP 58
58328: PUSH
58329: LD_INT 1
58331: ST_TO_ADDR
// if p3 = 11 then
58332: LD_VAR 0 3
58336: PUSH
58337: LD_INT 11
58339: EQUAL
58340: IFFALSE 58350
// sRefresh := true ;
58342: LD_ADDR_EXP 59
58346: PUSH
58347: LD_INT 1
58349: ST_TO_ADDR
// if p3 = 12 then
58350: LD_VAR 0 3
58354: PUSH
58355: LD_INT 12
58357: EQUAL
58358: IFFALSE 58368
// sExp := true ;
58360: LD_ADDR_EXP 60
58364: PUSH
58365: LD_INT 1
58367: ST_TO_ADDR
// if p3 = 13 then
58368: LD_VAR 0 3
58372: PUSH
58373: LD_INT 13
58375: EQUAL
58376: IFFALSE 58386
// sDepot := true ;
58378: LD_ADDR_EXP 61
58382: PUSH
58383: LD_INT 1
58385: ST_TO_ADDR
// if p3 = 14 then
58386: LD_VAR 0 3
58390: PUSH
58391: LD_INT 14
58393: EQUAL
58394: IFFALSE 58404
// sFlag := true ;
58396: LD_ADDR_EXP 62
58400: PUSH
58401: LD_INT 1
58403: ST_TO_ADDR
// if p3 = 15 then
58404: LD_VAR 0 3
58408: PUSH
58409: LD_INT 15
58411: EQUAL
58412: IFFALSE 58422
// sKamikadze := true ;
58414: LD_ADDR_EXP 70
58418: PUSH
58419: LD_INT 1
58421: ST_TO_ADDR
// if p3 = 16 then
58422: LD_VAR 0 3
58426: PUSH
58427: LD_INT 16
58429: EQUAL
58430: IFFALSE 58440
// sTroll := true ;
58432: LD_ADDR_EXP 71
58436: PUSH
58437: LD_INT 1
58439: ST_TO_ADDR
// if p3 = 17 then
58440: LD_VAR 0 3
58444: PUSH
58445: LD_INT 17
58447: EQUAL
58448: IFFALSE 58458
// sSlow := true ;
58450: LD_ADDR_EXP 72
58454: PUSH
58455: LD_INT 1
58457: ST_TO_ADDR
// if p3 = 18 then
58458: LD_VAR 0 3
58462: PUSH
58463: LD_INT 18
58465: EQUAL
58466: IFFALSE 58476
// sLack := true ;
58468: LD_ADDR_EXP 73
58472: PUSH
58473: LD_INT 1
58475: ST_TO_ADDR
// if p3 = 19 then
58476: LD_VAR 0 3
58480: PUSH
58481: LD_INT 19
58483: EQUAL
58484: IFFALSE 58494
// sTank := true ;
58486: LD_ADDR_EXP 75
58490: PUSH
58491: LD_INT 1
58493: ST_TO_ADDR
// if p3 = 20 then
58494: LD_VAR 0 3
58498: PUSH
58499: LD_INT 20
58501: EQUAL
58502: IFFALSE 58512
// sRemote := true ;
58504: LD_ADDR_EXP 76
58508: PUSH
58509: LD_INT 1
58511: ST_TO_ADDR
// if p3 = 21 then
58512: LD_VAR 0 3
58516: PUSH
58517: LD_INT 21
58519: EQUAL
58520: IFFALSE 58530
// sPowell := true ;
58522: LD_ADDR_EXP 77
58526: PUSH
58527: LD_INT 1
58529: ST_TO_ADDR
// if p3 = 22 then
58530: LD_VAR 0 3
58534: PUSH
58535: LD_INT 22
58537: EQUAL
58538: IFFALSE 58548
// sTeleport := true ;
58540: LD_ADDR_EXP 80
58544: PUSH
58545: LD_INT 1
58547: ST_TO_ADDR
// if p3 = 23 then
58548: LD_VAR 0 3
58552: PUSH
58553: LD_INT 23
58555: EQUAL
58556: IFFALSE 58566
// sOilTower := true ;
58558: LD_ADDR_EXP 82
58562: PUSH
58563: LD_INT 1
58565: ST_TO_ADDR
// if p3 = 24 then
58566: LD_VAR 0 3
58570: PUSH
58571: LD_INT 24
58573: EQUAL
58574: IFFALSE 58584
// sShovel := true ;
58576: LD_ADDR_EXP 83
58580: PUSH
58581: LD_INT 1
58583: ST_TO_ADDR
// if p3 = 25 then
58584: LD_VAR 0 3
58588: PUSH
58589: LD_INT 25
58591: EQUAL
58592: IFFALSE 58602
// sSheik := true ;
58594: LD_ADDR_EXP 84
58598: PUSH
58599: LD_INT 1
58601: ST_TO_ADDR
// if p3 = 26 then
58602: LD_VAR 0 3
58606: PUSH
58607: LD_INT 26
58609: EQUAL
58610: IFFALSE 58620
// sEarthquake := true ;
58612: LD_ADDR_EXP 86
58616: PUSH
58617: LD_INT 1
58619: ST_TO_ADDR
// if p3 = 27 then
58620: LD_VAR 0 3
58624: PUSH
58625: LD_INT 27
58627: EQUAL
58628: IFFALSE 58638
// sAI := true ;
58630: LD_ADDR_EXP 87
58634: PUSH
58635: LD_INT 1
58637: ST_TO_ADDR
// if p3 = 28 then
58638: LD_VAR 0 3
58642: PUSH
58643: LD_INT 28
58645: EQUAL
58646: IFFALSE 58656
// sCargo := true ;
58648: LD_ADDR_EXP 90
58652: PUSH
58653: LD_INT 1
58655: ST_TO_ADDR
// if p3 = 29 then
58656: LD_VAR 0 3
58660: PUSH
58661: LD_INT 29
58663: EQUAL
58664: IFFALSE 58674
// sDLaser := true ;
58666: LD_ADDR_EXP 91
58670: PUSH
58671: LD_INT 1
58673: ST_TO_ADDR
// if p3 = 30 then
58674: LD_VAR 0 3
58678: PUSH
58679: LD_INT 30
58681: EQUAL
58682: IFFALSE 58692
// sExchange := true ;
58684: LD_ADDR_EXP 92
58688: PUSH
58689: LD_INT 1
58691: ST_TO_ADDR
// if p3 = 31 then
58692: LD_VAR 0 3
58696: PUSH
58697: LD_INT 31
58699: EQUAL
58700: IFFALSE 58710
// sFac := true ;
58702: LD_ADDR_EXP 93
58706: PUSH
58707: LD_INT 1
58709: ST_TO_ADDR
// if p3 = 32 then
58710: LD_VAR 0 3
58714: PUSH
58715: LD_INT 32
58717: EQUAL
58718: IFFALSE 58728
// sPower := true ;
58720: LD_ADDR_EXP 94
58724: PUSH
58725: LD_INT 1
58727: ST_TO_ADDR
// if p3 = 33 then
58728: LD_VAR 0 3
58732: PUSH
58733: LD_INT 33
58735: EQUAL
58736: IFFALSE 58746
// sRandom := true ;
58738: LD_ADDR_EXP 95
58742: PUSH
58743: LD_INT 1
58745: ST_TO_ADDR
// if p3 = 34 then
58746: LD_VAR 0 3
58750: PUSH
58751: LD_INT 34
58753: EQUAL
58754: IFFALSE 58764
// sShield := true ;
58756: LD_ADDR_EXP 96
58760: PUSH
58761: LD_INT 1
58763: ST_TO_ADDR
// if p3 = 35 then
58764: LD_VAR 0 3
58768: PUSH
58769: LD_INT 35
58771: EQUAL
58772: IFFALSE 58782
// sTime := true ;
58774: LD_ADDR_EXP 97
58778: PUSH
58779: LD_INT 1
58781: ST_TO_ADDR
// if p3 = 36 then
58782: LD_VAR 0 3
58786: PUSH
58787: LD_INT 36
58789: EQUAL
58790: IFFALSE 58800
// sTools := true ;
58792: LD_ADDR_EXP 98
58796: PUSH
58797: LD_INT 1
58799: ST_TO_ADDR
// if p3 = 101 then
58800: LD_VAR 0 3
58804: PUSH
58805: LD_INT 101
58807: EQUAL
58808: IFFALSE 58818
// sSold := true ;
58810: LD_ADDR_EXP 63
58814: PUSH
58815: LD_INT 1
58817: ST_TO_ADDR
// if p3 = 102 then
58818: LD_VAR 0 3
58822: PUSH
58823: LD_INT 102
58825: EQUAL
58826: IFFALSE 58836
// sDiff := true ;
58828: LD_ADDR_EXP 64
58832: PUSH
58833: LD_INT 1
58835: ST_TO_ADDR
// if p3 = 103 then
58836: LD_VAR 0 3
58840: PUSH
58841: LD_INT 103
58843: EQUAL
58844: IFFALSE 58854
// sFog := true ;
58846: LD_ADDR_EXP 67
58850: PUSH
58851: LD_INT 1
58853: ST_TO_ADDR
// if p3 = 104 then
58854: LD_VAR 0 3
58858: PUSH
58859: LD_INT 104
58861: EQUAL
58862: IFFALSE 58872
// sReset := true ;
58864: LD_ADDR_EXP 68
58868: PUSH
58869: LD_INT 1
58871: ST_TO_ADDR
// if p3 = 105 then
58872: LD_VAR 0 3
58876: PUSH
58877: LD_INT 105
58879: EQUAL
58880: IFFALSE 58890
// sSun := true ;
58882: LD_ADDR_EXP 69
58886: PUSH
58887: LD_INT 1
58889: ST_TO_ADDR
// if p3 = 106 then
58890: LD_VAR 0 3
58894: PUSH
58895: LD_INT 106
58897: EQUAL
58898: IFFALSE 58908
// sTiger := true ;
58900: LD_ADDR_EXP 65
58904: PUSH
58905: LD_INT 1
58907: ST_TO_ADDR
// if p3 = 107 then
58908: LD_VAR 0 3
58912: PUSH
58913: LD_INT 107
58915: EQUAL
58916: IFFALSE 58926
// sBomb := true ;
58918: LD_ADDR_EXP 66
58922: PUSH
58923: LD_INT 1
58925: ST_TO_ADDR
// if p3 = 108 then
58926: LD_VAR 0 3
58930: PUSH
58931: LD_INT 108
58933: EQUAL
58934: IFFALSE 58944
// sWound := true ;
58936: LD_ADDR_EXP 74
58940: PUSH
58941: LD_INT 1
58943: ST_TO_ADDR
// if p3 = 109 then
58944: LD_VAR 0 3
58948: PUSH
58949: LD_INT 109
58951: EQUAL
58952: IFFALSE 58962
// sBetray := true ;
58954: LD_ADDR_EXP 78
58958: PUSH
58959: LD_INT 1
58961: ST_TO_ADDR
// if p3 = 110 then
58962: LD_VAR 0 3
58966: PUSH
58967: LD_INT 110
58969: EQUAL
58970: IFFALSE 58980
// sContamin := true ;
58972: LD_ADDR_EXP 79
58976: PUSH
58977: LD_INT 1
58979: ST_TO_ADDR
// if p3 = 111 then
58980: LD_VAR 0 3
58984: PUSH
58985: LD_INT 111
58987: EQUAL
58988: IFFALSE 58998
// sOil := true ;
58990: LD_ADDR_EXP 81
58994: PUSH
58995: LD_INT 1
58997: ST_TO_ADDR
// if p3 = 112 then
58998: LD_VAR 0 3
59002: PUSH
59003: LD_INT 112
59005: EQUAL
59006: IFFALSE 59016
// sStu := true ;
59008: LD_ADDR_EXP 85
59012: PUSH
59013: LD_INT 1
59015: ST_TO_ADDR
// if p3 = 113 then
59016: LD_VAR 0 3
59020: PUSH
59021: LD_INT 113
59023: EQUAL
59024: IFFALSE 59034
// sBazooka := true ;
59026: LD_ADDR_EXP 88
59030: PUSH
59031: LD_INT 1
59033: ST_TO_ADDR
// if p3 = 114 then
59034: LD_VAR 0 3
59038: PUSH
59039: LD_INT 114
59041: EQUAL
59042: IFFALSE 59052
// sMortar := true ;
59044: LD_ADDR_EXP 89
59048: PUSH
59049: LD_INT 1
59051: ST_TO_ADDR
// if p3 = 115 then
59052: LD_VAR 0 3
59056: PUSH
59057: LD_INT 115
59059: EQUAL
59060: IFFALSE 59070
// sRanger := true ;
59062: LD_ADDR_EXP 99
59066: PUSH
59067: LD_INT 1
59069: ST_TO_ADDR
// if p3 = 116 then
59070: LD_VAR 0 3
59074: PUSH
59075: LD_INT 116
59077: EQUAL
59078: IFFALSE 59088
// sComputer := true ;
59080: LD_ADDR_EXP 100
59084: PUSH
59085: LD_INT 1
59087: ST_TO_ADDR
// if p3 = 117 then
59088: LD_VAR 0 3
59092: PUSH
59093: LD_INT 117
59095: EQUAL
59096: IFFALSE 59106
// s30 := true ;
59098: LD_ADDR_EXP 101
59102: PUSH
59103: LD_INT 1
59105: ST_TO_ADDR
// if p3 = 118 then
59106: LD_VAR 0 3
59110: PUSH
59111: LD_INT 118
59113: EQUAL
59114: IFFALSE 59124
// s60 := true ;
59116: LD_ADDR_EXP 102
59120: PUSH
59121: LD_INT 1
59123: ST_TO_ADDR
// end ; if p2 = hack_mode then
59124: LD_VAR 0 2
59128: PUSH
59129: LD_INT 101
59131: EQUAL
59132: IFFALSE 59260
// begin case p3 of 1 :
59134: LD_VAR 0 3
59138: PUSH
59139: LD_INT 1
59141: DOUBLE
59142: EQUAL
59143: IFTRUE 59147
59145: GO 59154
59147: POP
// hHackUnlimitedResources ; 2 :
59148: CALL 71407 0 0
59152: GO 59260
59154: LD_INT 2
59156: DOUBLE
59157: EQUAL
59158: IFTRUE 59162
59160: GO 59169
59162: POP
// hHackSetLevel10 ; 3 :
59163: CALL 71540 0 0
59167: GO 59260
59169: LD_INT 3
59171: DOUBLE
59172: EQUAL
59173: IFTRUE 59177
59175: GO 59184
59177: POP
// hHackSetLevel10YourUnits ; 4 :
59178: CALL 71625 0 0
59182: GO 59260
59184: LD_INT 4
59186: DOUBLE
59187: EQUAL
59188: IFTRUE 59192
59190: GO 59199
59192: POP
// hHackInvincible ; 5 :
59193: CALL 72073 0 0
59197: GO 59260
59199: LD_INT 5
59201: DOUBLE
59202: EQUAL
59203: IFTRUE 59207
59205: GO 59214
59207: POP
// hHackInvisible ; 6 :
59208: CALL 72184 0 0
59212: GO 59260
59214: LD_INT 6
59216: DOUBLE
59217: EQUAL
59218: IFTRUE 59222
59220: GO 59229
59222: POP
// hHackChangeYourSide ; 7 :
59223: CALL 72241 0 0
59227: GO 59260
59229: LD_INT 7
59231: DOUBLE
59232: EQUAL
59233: IFTRUE 59237
59235: GO 59244
59237: POP
// hHackChangeUnitSide ; 8 :
59238: CALL 72283 0 0
59242: GO 59260
59244: LD_INT 8
59246: DOUBLE
59247: EQUAL
59248: IFTRUE 59252
59250: GO 59259
59252: POP
// hHackFog ; end ;
59253: CALL 72384 0 0
59257: GO 59260
59259: POP
// end ; if p2 = game_save_mode then
59260: LD_VAR 0 2
59264: PUSH
59265: LD_INT 102
59267: EQUAL
59268: IFFALSE 59323
// begin if p3 = 1 then
59270: LD_VAR 0 3
59274: PUSH
59275: LD_INT 1
59277: EQUAL
59278: IFFALSE 59290
// globalGameSaveCounter := p4 ;
59280: LD_ADDR_EXP 45
59284: PUSH
59285: LD_VAR 0 4
59289: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
59290: LD_VAR 0 3
59294: PUSH
59295: LD_INT 2
59297: EQUAL
59298: PUSH
59299: LD_EXP 45
59303: AND
59304: IFFALSE 59323
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59306: LD_STRING setGameSaveCounter(
59308: PUSH
59309: LD_EXP 45
59313: STR
59314: PUSH
59315: LD_STRING )
59317: STR
59318: PPUSH
59319: CALL_OW 559
// end ; end ;
59323: LD_VAR 0 7
59327: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
59328: LD_INT 0
59330: PPUSH
// streamModeActive := false ;
59331: LD_ADDR_EXP 46
59335: PUSH
59336: LD_INT 0
59338: ST_TO_ADDR
// normalCounter := 36 ;
59339: LD_ADDR_EXP 47
59343: PUSH
59344: LD_INT 36
59346: ST_TO_ADDR
// hardcoreCounter := 18 ;
59347: LD_ADDR_EXP 48
59351: PUSH
59352: LD_INT 18
59354: ST_TO_ADDR
// sRocket := false ;
59355: LD_ADDR_EXP 51
59359: PUSH
59360: LD_INT 0
59362: ST_TO_ADDR
// sSpeed := false ;
59363: LD_ADDR_EXP 50
59367: PUSH
59368: LD_INT 0
59370: ST_TO_ADDR
// sEngine := false ;
59371: LD_ADDR_EXP 52
59375: PUSH
59376: LD_INT 0
59378: ST_TO_ADDR
// sSpec := false ;
59379: LD_ADDR_EXP 49
59383: PUSH
59384: LD_INT 0
59386: ST_TO_ADDR
// sLevel := false ;
59387: LD_ADDR_EXP 53
59391: PUSH
59392: LD_INT 0
59394: ST_TO_ADDR
// sArmoury := false ;
59395: LD_ADDR_EXP 54
59399: PUSH
59400: LD_INT 0
59402: ST_TO_ADDR
// sRadar := false ;
59403: LD_ADDR_EXP 55
59407: PUSH
59408: LD_INT 0
59410: ST_TO_ADDR
// sBunker := false ;
59411: LD_ADDR_EXP 56
59415: PUSH
59416: LD_INT 0
59418: ST_TO_ADDR
// sHack := false ;
59419: LD_ADDR_EXP 57
59423: PUSH
59424: LD_INT 0
59426: ST_TO_ADDR
// sFire := false ;
59427: LD_ADDR_EXP 58
59431: PUSH
59432: LD_INT 0
59434: ST_TO_ADDR
// sRefresh := false ;
59435: LD_ADDR_EXP 59
59439: PUSH
59440: LD_INT 0
59442: ST_TO_ADDR
// sExp := false ;
59443: LD_ADDR_EXP 60
59447: PUSH
59448: LD_INT 0
59450: ST_TO_ADDR
// sDepot := false ;
59451: LD_ADDR_EXP 61
59455: PUSH
59456: LD_INT 0
59458: ST_TO_ADDR
// sFlag := false ;
59459: LD_ADDR_EXP 62
59463: PUSH
59464: LD_INT 0
59466: ST_TO_ADDR
// sKamikadze := false ;
59467: LD_ADDR_EXP 70
59471: PUSH
59472: LD_INT 0
59474: ST_TO_ADDR
// sTroll := false ;
59475: LD_ADDR_EXP 71
59479: PUSH
59480: LD_INT 0
59482: ST_TO_ADDR
// sSlow := false ;
59483: LD_ADDR_EXP 72
59487: PUSH
59488: LD_INT 0
59490: ST_TO_ADDR
// sLack := false ;
59491: LD_ADDR_EXP 73
59495: PUSH
59496: LD_INT 0
59498: ST_TO_ADDR
// sTank := false ;
59499: LD_ADDR_EXP 75
59503: PUSH
59504: LD_INT 0
59506: ST_TO_ADDR
// sRemote := false ;
59507: LD_ADDR_EXP 76
59511: PUSH
59512: LD_INT 0
59514: ST_TO_ADDR
// sPowell := false ;
59515: LD_ADDR_EXP 77
59519: PUSH
59520: LD_INT 0
59522: ST_TO_ADDR
// sTeleport := false ;
59523: LD_ADDR_EXP 80
59527: PUSH
59528: LD_INT 0
59530: ST_TO_ADDR
// sOilTower := false ;
59531: LD_ADDR_EXP 82
59535: PUSH
59536: LD_INT 0
59538: ST_TO_ADDR
// sShovel := false ;
59539: LD_ADDR_EXP 83
59543: PUSH
59544: LD_INT 0
59546: ST_TO_ADDR
// sSheik := false ;
59547: LD_ADDR_EXP 84
59551: PUSH
59552: LD_INT 0
59554: ST_TO_ADDR
// sEarthquake := false ;
59555: LD_ADDR_EXP 86
59559: PUSH
59560: LD_INT 0
59562: ST_TO_ADDR
// sAI := false ;
59563: LD_ADDR_EXP 87
59567: PUSH
59568: LD_INT 0
59570: ST_TO_ADDR
// sCargo := false ;
59571: LD_ADDR_EXP 90
59575: PUSH
59576: LD_INT 0
59578: ST_TO_ADDR
// sDLaser := false ;
59579: LD_ADDR_EXP 91
59583: PUSH
59584: LD_INT 0
59586: ST_TO_ADDR
// sExchange := false ;
59587: LD_ADDR_EXP 92
59591: PUSH
59592: LD_INT 0
59594: ST_TO_ADDR
// sFac := false ;
59595: LD_ADDR_EXP 93
59599: PUSH
59600: LD_INT 0
59602: ST_TO_ADDR
// sPower := false ;
59603: LD_ADDR_EXP 94
59607: PUSH
59608: LD_INT 0
59610: ST_TO_ADDR
// sRandom := false ;
59611: LD_ADDR_EXP 95
59615: PUSH
59616: LD_INT 0
59618: ST_TO_ADDR
// sShield := false ;
59619: LD_ADDR_EXP 96
59623: PUSH
59624: LD_INT 0
59626: ST_TO_ADDR
// sTime := false ;
59627: LD_ADDR_EXP 97
59631: PUSH
59632: LD_INT 0
59634: ST_TO_ADDR
// sTools := false ;
59635: LD_ADDR_EXP 98
59639: PUSH
59640: LD_INT 0
59642: ST_TO_ADDR
// sSold := false ;
59643: LD_ADDR_EXP 63
59647: PUSH
59648: LD_INT 0
59650: ST_TO_ADDR
// sDiff := false ;
59651: LD_ADDR_EXP 64
59655: PUSH
59656: LD_INT 0
59658: ST_TO_ADDR
// sFog := false ;
59659: LD_ADDR_EXP 67
59663: PUSH
59664: LD_INT 0
59666: ST_TO_ADDR
// sReset := false ;
59667: LD_ADDR_EXP 68
59671: PUSH
59672: LD_INT 0
59674: ST_TO_ADDR
// sSun := false ;
59675: LD_ADDR_EXP 69
59679: PUSH
59680: LD_INT 0
59682: ST_TO_ADDR
// sTiger := false ;
59683: LD_ADDR_EXP 65
59687: PUSH
59688: LD_INT 0
59690: ST_TO_ADDR
// sBomb := false ;
59691: LD_ADDR_EXP 66
59695: PUSH
59696: LD_INT 0
59698: ST_TO_ADDR
// sWound := false ;
59699: LD_ADDR_EXP 74
59703: PUSH
59704: LD_INT 0
59706: ST_TO_ADDR
// sBetray := false ;
59707: LD_ADDR_EXP 78
59711: PUSH
59712: LD_INT 0
59714: ST_TO_ADDR
// sContamin := false ;
59715: LD_ADDR_EXP 79
59719: PUSH
59720: LD_INT 0
59722: ST_TO_ADDR
// sOil := false ;
59723: LD_ADDR_EXP 81
59727: PUSH
59728: LD_INT 0
59730: ST_TO_ADDR
// sStu := false ;
59731: LD_ADDR_EXP 85
59735: PUSH
59736: LD_INT 0
59738: ST_TO_ADDR
// sBazooka := false ;
59739: LD_ADDR_EXP 88
59743: PUSH
59744: LD_INT 0
59746: ST_TO_ADDR
// sMortar := false ;
59747: LD_ADDR_EXP 89
59751: PUSH
59752: LD_INT 0
59754: ST_TO_ADDR
// sRanger := false ;
59755: LD_ADDR_EXP 99
59759: PUSH
59760: LD_INT 0
59762: ST_TO_ADDR
// sComputer := false ;
59763: LD_ADDR_EXP 100
59767: PUSH
59768: LD_INT 0
59770: ST_TO_ADDR
// s30 := false ;
59771: LD_ADDR_EXP 101
59775: PUSH
59776: LD_INT 0
59778: ST_TO_ADDR
// s60 := false ;
59779: LD_ADDR_EXP 102
59783: PUSH
59784: LD_INT 0
59786: ST_TO_ADDR
// end ;
59787: LD_VAR 0 1
59791: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
59792: LD_INT 0
59794: PPUSH
59795: PPUSH
59796: PPUSH
59797: PPUSH
59798: PPUSH
59799: PPUSH
59800: PPUSH
// result := [ ] ;
59801: LD_ADDR_VAR 0 2
59805: PUSH
59806: EMPTY
59807: ST_TO_ADDR
// if campaign_id = 1 then
59808: LD_OWVAR 69
59812: PUSH
59813: LD_INT 1
59815: EQUAL
59816: IFFALSE 62982
// begin case mission_number of 1 :
59818: LD_OWVAR 70
59822: PUSH
59823: LD_INT 1
59825: DOUBLE
59826: EQUAL
59827: IFTRUE 59831
59829: GO 59907
59831: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
59832: LD_ADDR_VAR 0 2
59836: PUSH
59837: LD_INT 2
59839: PUSH
59840: LD_INT 4
59842: PUSH
59843: LD_INT 11
59845: PUSH
59846: LD_INT 12
59848: PUSH
59849: LD_INT 15
59851: PUSH
59852: LD_INT 16
59854: PUSH
59855: LD_INT 22
59857: PUSH
59858: LD_INT 23
59860: PUSH
59861: LD_INT 26
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 101
59877: PUSH
59878: LD_INT 102
59880: PUSH
59881: LD_INT 106
59883: PUSH
59884: LD_INT 116
59886: PUSH
59887: LD_INT 117
59889: PUSH
59890: LD_INT 118
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: ST_TO_ADDR
59905: GO 62980
59907: LD_INT 2
59909: DOUBLE
59910: EQUAL
59911: IFTRUE 59915
59913: GO 59999
59915: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
59916: LD_ADDR_VAR 0 2
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: LD_INT 4
59926: PUSH
59927: LD_INT 11
59929: PUSH
59930: LD_INT 12
59932: PUSH
59933: LD_INT 15
59935: PUSH
59936: LD_INT 16
59938: PUSH
59939: LD_INT 22
59941: PUSH
59942: LD_INT 23
59944: PUSH
59945: LD_INT 26
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 101
59961: PUSH
59962: LD_INT 102
59964: PUSH
59965: LD_INT 105
59967: PUSH
59968: LD_INT 106
59970: PUSH
59971: LD_INT 108
59973: PUSH
59974: LD_INT 116
59976: PUSH
59977: LD_INT 117
59979: PUSH
59980: LD_INT 118
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: ST_TO_ADDR
59997: GO 62980
59999: LD_INT 3
60001: DOUBLE
60002: EQUAL
60003: IFTRUE 60007
60005: GO 60095
60007: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
60008: LD_ADDR_VAR 0 2
60012: PUSH
60013: LD_INT 2
60015: PUSH
60016: LD_INT 4
60018: PUSH
60019: LD_INT 5
60021: PUSH
60022: LD_INT 11
60024: PUSH
60025: LD_INT 12
60027: PUSH
60028: LD_INT 15
60030: PUSH
60031: LD_INT 16
60033: PUSH
60034: LD_INT 22
60036: PUSH
60037: LD_INT 26
60039: PUSH
60040: LD_INT 36
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 101
60057: PUSH
60058: LD_INT 102
60060: PUSH
60061: LD_INT 105
60063: PUSH
60064: LD_INT 106
60066: PUSH
60067: LD_INT 108
60069: PUSH
60070: LD_INT 116
60072: PUSH
60073: LD_INT 117
60075: PUSH
60076: LD_INT 118
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: ST_TO_ADDR
60093: GO 62980
60095: LD_INT 4
60097: DOUBLE
60098: EQUAL
60099: IFTRUE 60103
60101: GO 60199
60103: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
60104: LD_ADDR_VAR 0 2
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: LD_INT 4
60114: PUSH
60115: LD_INT 5
60117: PUSH
60118: LD_INT 8
60120: PUSH
60121: LD_INT 11
60123: PUSH
60124: LD_INT 12
60126: PUSH
60127: LD_INT 15
60129: PUSH
60130: LD_INT 16
60132: PUSH
60133: LD_INT 22
60135: PUSH
60136: LD_INT 23
60138: PUSH
60139: LD_INT 26
60141: PUSH
60142: LD_INT 36
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 101
60161: PUSH
60162: LD_INT 102
60164: PUSH
60165: LD_INT 105
60167: PUSH
60168: LD_INT 106
60170: PUSH
60171: LD_INT 108
60173: PUSH
60174: LD_INT 116
60176: PUSH
60177: LD_INT 117
60179: PUSH
60180: LD_INT 118
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: ST_TO_ADDR
60197: GO 62980
60199: LD_INT 5
60201: DOUBLE
60202: EQUAL
60203: IFTRUE 60207
60205: GO 60319
60207: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
60208: LD_ADDR_VAR 0 2
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: LD_INT 4
60218: PUSH
60219: LD_INT 5
60221: PUSH
60222: LD_INT 6
60224: PUSH
60225: LD_INT 8
60227: PUSH
60228: LD_INT 11
60230: PUSH
60231: LD_INT 12
60233: PUSH
60234: LD_INT 15
60236: PUSH
60237: LD_INT 16
60239: PUSH
60240: LD_INT 22
60242: PUSH
60243: LD_INT 23
60245: PUSH
60246: LD_INT 25
60248: PUSH
60249: LD_INT 26
60251: PUSH
60252: LD_INT 36
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 101
60273: PUSH
60274: LD_INT 102
60276: PUSH
60277: LD_INT 105
60279: PUSH
60280: LD_INT 106
60282: PUSH
60283: LD_INT 108
60285: PUSH
60286: LD_INT 109
60288: PUSH
60289: LD_INT 112
60291: PUSH
60292: LD_INT 116
60294: PUSH
60295: LD_INT 117
60297: PUSH
60298: LD_INT 118
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: ST_TO_ADDR
60317: GO 62980
60319: LD_INT 6
60321: DOUBLE
60322: EQUAL
60323: IFTRUE 60327
60325: GO 60459
60327: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
60328: LD_ADDR_VAR 0 2
60332: PUSH
60333: LD_INT 2
60335: PUSH
60336: LD_INT 4
60338: PUSH
60339: LD_INT 5
60341: PUSH
60342: LD_INT 6
60344: PUSH
60345: LD_INT 8
60347: PUSH
60348: LD_INT 11
60350: PUSH
60351: LD_INT 12
60353: PUSH
60354: LD_INT 15
60356: PUSH
60357: LD_INT 16
60359: PUSH
60360: LD_INT 20
60362: PUSH
60363: LD_INT 21
60365: PUSH
60366: LD_INT 22
60368: PUSH
60369: LD_INT 23
60371: PUSH
60372: LD_INT 25
60374: PUSH
60375: LD_INT 26
60377: PUSH
60378: LD_INT 30
60380: PUSH
60381: LD_INT 31
60383: PUSH
60384: LD_INT 32
60386: PUSH
60387: LD_INT 36
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 101
60413: PUSH
60414: LD_INT 102
60416: PUSH
60417: LD_INT 105
60419: PUSH
60420: LD_INT 106
60422: PUSH
60423: LD_INT 108
60425: PUSH
60426: LD_INT 109
60428: PUSH
60429: LD_INT 112
60431: PUSH
60432: LD_INT 116
60434: PUSH
60435: LD_INT 117
60437: PUSH
60438: LD_INT 118
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: ST_TO_ADDR
60457: GO 62980
60459: LD_INT 7
60461: DOUBLE
60462: EQUAL
60463: IFTRUE 60467
60465: GO 60579
60467: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
60468: LD_ADDR_VAR 0 2
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: LD_INT 4
60478: PUSH
60479: LD_INT 5
60481: PUSH
60482: LD_INT 7
60484: PUSH
60485: LD_INT 11
60487: PUSH
60488: LD_INT 12
60490: PUSH
60491: LD_INT 15
60493: PUSH
60494: LD_INT 16
60496: PUSH
60497: LD_INT 20
60499: PUSH
60500: LD_INT 21
60502: PUSH
60503: LD_INT 22
60505: PUSH
60506: LD_INT 23
60508: PUSH
60509: LD_INT 25
60511: PUSH
60512: LD_INT 26
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 101
60533: PUSH
60534: LD_INT 102
60536: PUSH
60537: LD_INT 103
60539: PUSH
60540: LD_INT 105
60542: PUSH
60543: LD_INT 106
60545: PUSH
60546: LD_INT 108
60548: PUSH
60549: LD_INT 112
60551: PUSH
60552: LD_INT 116
60554: PUSH
60555: LD_INT 117
60557: PUSH
60558: LD_INT 118
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: ST_TO_ADDR
60577: GO 62980
60579: LD_INT 8
60581: DOUBLE
60582: EQUAL
60583: IFTRUE 60587
60585: GO 60727
60587: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
60588: LD_ADDR_VAR 0 2
60592: PUSH
60593: LD_INT 2
60595: PUSH
60596: LD_INT 4
60598: PUSH
60599: LD_INT 5
60601: PUSH
60602: LD_INT 6
60604: PUSH
60605: LD_INT 7
60607: PUSH
60608: LD_INT 8
60610: PUSH
60611: LD_INT 11
60613: PUSH
60614: LD_INT 12
60616: PUSH
60617: LD_INT 15
60619: PUSH
60620: LD_INT 16
60622: PUSH
60623: LD_INT 20
60625: PUSH
60626: LD_INT 21
60628: PUSH
60629: LD_INT 22
60631: PUSH
60632: LD_INT 23
60634: PUSH
60635: LD_INT 25
60637: PUSH
60638: LD_INT 26
60640: PUSH
60641: LD_INT 30
60643: PUSH
60644: LD_INT 31
60646: PUSH
60647: LD_INT 32
60649: PUSH
60650: LD_INT 36
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 101
60677: PUSH
60678: LD_INT 102
60680: PUSH
60681: LD_INT 103
60683: PUSH
60684: LD_INT 105
60686: PUSH
60687: LD_INT 106
60689: PUSH
60690: LD_INT 108
60692: PUSH
60693: LD_INT 109
60695: PUSH
60696: LD_INT 112
60698: PUSH
60699: LD_INT 116
60701: PUSH
60702: LD_INT 117
60704: PUSH
60705: LD_INT 118
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: ST_TO_ADDR
60725: GO 62980
60727: LD_INT 9
60729: DOUBLE
60730: EQUAL
60731: IFTRUE 60735
60733: GO 60883
60735: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
60736: LD_ADDR_VAR 0 2
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: LD_INT 4
60746: PUSH
60747: LD_INT 5
60749: PUSH
60750: LD_INT 6
60752: PUSH
60753: LD_INT 7
60755: PUSH
60756: LD_INT 8
60758: PUSH
60759: LD_INT 11
60761: PUSH
60762: LD_INT 12
60764: PUSH
60765: LD_INT 15
60767: PUSH
60768: LD_INT 16
60770: PUSH
60771: LD_INT 20
60773: PUSH
60774: LD_INT 21
60776: PUSH
60777: LD_INT 22
60779: PUSH
60780: LD_INT 23
60782: PUSH
60783: LD_INT 25
60785: PUSH
60786: LD_INT 26
60788: PUSH
60789: LD_INT 28
60791: PUSH
60792: LD_INT 30
60794: PUSH
60795: LD_INT 31
60797: PUSH
60798: LD_INT 32
60800: PUSH
60801: LD_INT 36
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 101
60829: PUSH
60830: LD_INT 102
60832: PUSH
60833: LD_INT 103
60835: PUSH
60836: LD_INT 105
60838: PUSH
60839: LD_INT 106
60841: PUSH
60842: LD_INT 108
60844: PUSH
60845: LD_INT 109
60847: PUSH
60848: LD_INT 112
60850: PUSH
60851: LD_INT 114
60853: PUSH
60854: LD_INT 116
60856: PUSH
60857: LD_INT 117
60859: PUSH
60860: LD_INT 118
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: ST_TO_ADDR
60881: GO 62980
60883: LD_INT 10
60885: DOUBLE
60886: EQUAL
60887: IFTRUE 60891
60889: GO 61087
60891: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
60892: LD_ADDR_VAR 0 2
60896: PUSH
60897: LD_INT 2
60899: PUSH
60900: LD_INT 4
60902: PUSH
60903: LD_INT 5
60905: PUSH
60906: LD_INT 6
60908: PUSH
60909: LD_INT 7
60911: PUSH
60912: LD_INT 8
60914: PUSH
60915: LD_INT 9
60917: PUSH
60918: LD_INT 10
60920: PUSH
60921: LD_INT 11
60923: PUSH
60924: LD_INT 12
60926: PUSH
60927: LD_INT 13
60929: PUSH
60930: LD_INT 14
60932: PUSH
60933: LD_INT 15
60935: PUSH
60936: LD_INT 16
60938: PUSH
60939: LD_INT 17
60941: PUSH
60942: LD_INT 18
60944: PUSH
60945: LD_INT 19
60947: PUSH
60948: LD_INT 20
60950: PUSH
60951: LD_INT 21
60953: PUSH
60954: LD_INT 22
60956: PUSH
60957: LD_INT 23
60959: PUSH
60960: LD_INT 24
60962: PUSH
60963: LD_INT 25
60965: PUSH
60966: LD_INT 26
60968: PUSH
60969: LD_INT 28
60971: PUSH
60972: LD_INT 30
60974: PUSH
60975: LD_INT 31
60977: PUSH
60978: LD_INT 32
60980: PUSH
60981: LD_INT 36
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 101
61017: PUSH
61018: LD_INT 102
61020: PUSH
61021: LD_INT 103
61023: PUSH
61024: LD_INT 104
61026: PUSH
61027: LD_INT 105
61029: PUSH
61030: LD_INT 106
61032: PUSH
61033: LD_INT 107
61035: PUSH
61036: LD_INT 108
61038: PUSH
61039: LD_INT 109
61041: PUSH
61042: LD_INT 110
61044: PUSH
61045: LD_INT 111
61047: PUSH
61048: LD_INT 112
61050: PUSH
61051: LD_INT 114
61053: PUSH
61054: LD_INT 116
61056: PUSH
61057: LD_INT 117
61059: PUSH
61060: LD_INT 118
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: ST_TO_ADDR
61085: GO 62980
61087: LD_INT 11
61089: DOUBLE
61090: EQUAL
61091: IFTRUE 61095
61093: GO 61299
61095: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
61096: LD_ADDR_VAR 0 2
61100: PUSH
61101: LD_INT 2
61103: PUSH
61104: LD_INT 3
61106: PUSH
61107: LD_INT 4
61109: PUSH
61110: LD_INT 5
61112: PUSH
61113: LD_INT 6
61115: PUSH
61116: LD_INT 7
61118: PUSH
61119: LD_INT 8
61121: PUSH
61122: LD_INT 9
61124: PUSH
61125: LD_INT 10
61127: PUSH
61128: LD_INT 11
61130: PUSH
61131: LD_INT 12
61133: PUSH
61134: LD_INT 13
61136: PUSH
61137: LD_INT 14
61139: PUSH
61140: LD_INT 15
61142: PUSH
61143: LD_INT 16
61145: PUSH
61146: LD_INT 17
61148: PUSH
61149: LD_INT 18
61151: PUSH
61152: LD_INT 19
61154: PUSH
61155: LD_INT 20
61157: PUSH
61158: LD_INT 21
61160: PUSH
61161: LD_INT 22
61163: PUSH
61164: LD_INT 23
61166: PUSH
61167: LD_INT 24
61169: PUSH
61170: LD_INT 25
61172: PUSH
61173: LD_INT 26
61175: PUSH
61176: LD_INT 28
61178: PUSH
61179: LD_INT 30
61181: PUSH
61182: LD_INT 31
61184: PUSH
61185: LD_INT 32
61187: PUSH
61188: LD_INT 34
61190: PUSH
61191: LD_INT 36
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 101
61229: PUSH
61230: LD_INT 102
61232: PUSH
61233: LD_INT 103
61235: PUSH
61236: LD_INT 104
61238: PUSH
61239: LD_INT 105
61241: PUSH
61242: LD_INT 106
61244: PUSH
61245: LD_INT 107
61247: PUSH
61248: LD_INT 108
61250: PUSH
61251: LD_INT 109
61253: PUSH
61254: LD_INT 110
61256: PUSH
61257: LD_INT 111
61259: PUSH
61260: LD_INT 112
61262: PUSH
61263: LD_INT 114
61265: PUSH
61266: LD_INT 116
61268: PUSH
61269: LD_INT 117
61271: PUSH
61272: LD_INT 118
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: ST_TO_ADDR
61297: GO 62980
61299: LD_INT 12
61301: DOUBLE
61302: EQUAL
61303: IFTRUE 61307
61305: GO 61527
61307: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
61308: LD_ADDR_VAR 0 2
61312: PUSH
61313: LD_INT 1
61315: PUSH
61316: LD_INT 2
61318: PUSH
61319: LD_INT 3
61321: PUSH
61322: LD_INT 4
61324: PUSH
61325: LD_INT 5
61327: PUSH
61328: LD_INT 6
61330: PUSH
61331: LD_INT 7
61333: PUSH
61334: LD_INT 8
61336: PUSH
61337: LD_INT 9
61339: PUSH
61340: LD_INT 10
61342: PUSH
61343: LD_INT 11
61345: PUSH
61346: LD_INT 12
61348: PUSH
61349: LD_INT 13
61351: PUSH
61352: LD_INT 14
61354: PUSH
61355: LD_INT 15
61357: PUSH
61358: LD_INT 16
61360: PUSH
61361: LD_INT 17
61363: PUSH
61364: LD_INT 18
61366: PUSH
61367: LD_INT 19
61369: PUSH
61370: LD_INT 20
61372: PUSH
61373: LD_INT 21
61375: PUSH
61376: LD_INT 22
61378: PUSH
61379: LD_INT 23
61381: PUSH
61382: LD_INT 24
61384: PUSH
61385: LD_INT 25
61387: PUSH
61388: LD_INT 26
61390: PUSH
61391: LD_INT 27
61393: PUSH
61394: LD_INT 28
61396: PUSH
61397: LD_INT 30
61399: PUSH
61400: LD_INT 31
61402: PUSH
61403: LD_INT 32
61405: PUSH
61406: LD_INT 33
61408: PUSH
61409: LD_INT 34
61411: PUSH
61412: LD_INT 36
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 101
61453: PUSH
61454: LD_INT 102
61456: PUSH
61457: LD_INT 103
61459: PUSH
61460: LD_INT 104
61462: PUSH
61463: LD_INT 105
61465: PUSH
61466: LD_INT 106
61468: PUSH
61469: LD_INT 107
61471: PUSH
61472: LD_INT 108
61474: PUSH
61475: LD_INT 109
61477: PUSH
61478: LD_INT 110
61480: PUSH
61481: LD_INT 111
61483: PUSH
61484: LD_INT 112
61486: PUSH
61487: LD_INT 113
61489: PUSH
61490: LD_INT 114
61492: PUSH
61493: LD_INT 116
61495: PUSH
61496: LD_INT 117
61498: PUSH
61499: LD_INT 118
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: ST_TO_ADDR
61525: GO 62980
61527: LD_INT 13
61529: DOUBLE
61530: EQUAL
61531: IFTRUE 61535
61533: GO 61743
61535: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
61536: LD_ADDR_VAR 0 2
61540: PUSH
61541: LD_INT 1
61543: PUSH
61544: LD_INT 2
61546: PUSH
61547: LD_INT 3
61549: PUSH
61550: LD_INT 4
61552: PUSH
61553: LD_INT 5
61555: PUSH
61556: LD_INT 8
61558: PUSH
61559: LD_INT 9
61561: PUSH
61562: LD_INT 10
61564: PUSH
61565: LD_INT 11
61567: PUSH
61568: LD_INT 12
61570: PUSH
61571: LD_INT 14
61573: PUSH
61574: LD_INT 15
61576: PUSH
61577: LD_INT 16
61579: PUSH
61580: LD_INT 17
61582: PUSH
61583: LD_INT 18
61585: PUSH
61586: LD_INT 19
61588: PUSH
61589: LD_INT 20
61591: PUSH
61592: LD_INT 21
61594: PUSH
61595: LD_INT 22
61597: PUSH
61598: LD_INT 23
61600: PUSH
61601: LD_INT 24
61603: PUSH
61604: LD_INT 25
61606: PUSH
61607: LD_INT 26
61609: PUSH
61610: LD_INT 27
61612: PUSH
61613: LD_INT 28
61615: PUSH
61616: LD_INT 30
61618: PUSH
61619: LD_INT 31
61621: PUSH
61622: LD_INT 32
61624: PUSH
61625: LD_INT 33
61627: PUSH
61628: LD_INT 34
61630: PUSH
61631: LD_INT 36
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 101
61669: PUSH
61670: LD_INT 102
61672: PUSH
61673: LD_INT 103
61675: PUSH
61676: LD_INT 104
61678: PUSH
61679: LD_INT 105
61681: PUSH
61682: LD_INT 106
61684: PUSH
61685: LD_INT 107
61687: PUSH
61688: LD_INT 108
61690: PUSH
61691: LD_INT 109
61693: PUSH
61694: LD_INT 110
61696: PUSH
61697: LD_INT 111
61699: PUSH
61700: LD_INT 112
61702: PUSH
61703: LD_INT 113
61705: PUSH
61706: LD_INT 114
61708: PUSH
61709: LD_INT 116
61711: PUSH
61712: LD_INT 117
61714: PUSH
61715: LD_INT 118
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: ST_TO_ADDR
61741: GO 62980
61743: LD_INT 14
61745: DOUBLE
61746: EQUAL
61747: IFTRUE 61751
61749: GO 61975
61751: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
61752: LD_ADDR_VAR 0 2
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: LD_INT 2
61762: PUSH
61763: LD_INT 3
61765: PUSH
61766: LD_INT 4
61768: PUSH
61769: LD_INT 5
61771: PUSH
61772: LD_INT 6
61774: PUSH
61775: LD_INT 7
61777: PUSH
61778: LD_INT 8
61780: PUSH
61781: LD_INT 9
61783: PUSH
61784: LD_INT 10
61786: PUSH
61787: LD_INT 11
61789: PUSH
61790: LD_INT 12
61792: PUSH
61793: LD_INT 13
61795: PUSH
61796: LD_INT 14
61798: PUSH
61799: LD_INT 15
61801: PUSH
61802: LD_INT 16
61804: PUSH
61805: LD_INT 17
61807: PUSH
61808: LD_INT 18
61810: PUSH
61811: LD_INT 19
61813: PUSH
61814: LD_INT 20
61816: PUSH
61817: LD_INT 21
61819: PUSH
61820: LD_INT 22
61822: PUSH
61823: LD_INT 23
61825: PUSH
61826: LD_INT 24
61828: PUSH
61829: LD_INT 25
61831: PUSH
61832: LD_INT 26
61834: PUSH
61835: LD_INT 27
61837: PUSH
61838: LD_INT 28
61840: PUSH
61841: LD_INT 29
61843: PUSH
61844: LD_INT 30
61846: PUSH
61847: LD_INT 31
61849: PUSH
61850: LD_INT 32
61852: PUSH
61853: LD_INT 33
61855: PUSH
61856: LD_INT 34
61858: PUSH
61859: LD_INT 36
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 101
61901: PUSH
61902: LD_INT 102
61904: PUSH
61905: LD_INT 103
61907: PUSH
61908: LD_INT 104
61910: PUSH
61911: LD_INT 105
61913: PUSH
61914: LD_INT 106
61916: PUSH
61917: LD_INT 107
61919: PUSH
61920: LD_INT 108
61922: PUSH
61923: LD_INT 109
61925: PUSH
61926: LD_INT 110
61928: PUSH
61929: LD_INT 111
61931: PUSH
61932: LD_INT 112
61934: PUSH
61935: LD_INT 113
61937: PUSH
61938: LD_INT 114
61940: PUSH
61941: LD_INT 116
61943: PUSH
61944: LD_INT 117
61946: PUSH
61947: LD_INT 118
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: ST_TO_ADDR
61973: GO 62980
61975: LD_INT 15
61977: DOUBLE
61978: EQUAL
61979: IFTRUE 61983
61981: GO 62207
61983: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
61984: LD_ADDR_VAR 0 2
61988: PUSH
61989: LD_INT 1
61991: PUSH
61992: LD_INT 2
61994: PUSH
61995: LD_INT 3
61997: PUSH
61998: LD_INT 4
62000: PUSH
62001: LD_INT 5
62003: PUSH
62004: LD_INT 6
62006: PUSH
62007: LD_INT 7
62009: PUSH
62010: LD_INT 8
62012: PUSH
62013: LD_INT 9
62015: PUSH
62016: LD_INT 10
62018: PUSH
62019: LD_INT 11
62021: PUSH
62022: LD_INT 12
62024: PUSH
62025: LD_INT 13
62027: PUSH
62028: LD_INT 14
62030: PUSH
62031: LD_INT 15
62033: PUSH
62034: LD_INT 16
62036: PUSH
62037: LD_INT 17
62039: PUSH
62040: LD_INT 18
62042: PUSH
62043: LD_INT 19
62045: PUSH
62046: LD_INT 20
62048: PUSH
62049: LD_INT 21
62051: PUSH
62052: LD_INT 22
62054: PUSH
62055: LD_INT 23
62057: PUSH
62058: LD_INT 24
62060: PUSH
62061: LD_INT 25
62063: PUSH
62064: LD_INT 26
62066: PUSH
62067: LD_INT 27
62069: PUSH
62070: LD_INT 28
62072: PUSH
62073: LD_INT 29
62075: PUSH
62076: LD_INT 30
62078: PUSH
62079: LD_INT 31
62081: PUSH
62082: LD_INT 32
62084: PUSH
62085: LD_INT 33
62087: PUSH
62088: LD_INT 34
62090: PUSH
62091: LD_INT 36
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 101
62133: PUSH
62134: LD_INT 102
62136: PUSH
62137: LD_INT 103
62139: PUSH
62140: LD_INT 104
62142: PUSH
62143: LD_INT 105
62145: PUSH
62146: LD_INT 106
62148: PUSH
62149: LD_INT 107
62151: PUSH
62152: LD_INT 108
62154: PUSH
62155: LD_INT 109
62157: PUSH
62158: LD_INT 110
62160: PUSH
62161: LD_INT 111
62163: PUSH
62164: LD_INT 112
62166: PUSH
62167: LD_INT 113
62169: PUSH
62170: LD_INT 114
62172: PUSH
62173: LD_INT 116
62175: PUSH
62176: LD_INT 117
62178: PUSH
62179: LD_INT 118
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: ST_TO_ADDR
62205: GO 62980
62207: LD_INT 16
62209: DOUBLE
62210: EQUAL
62211: IFTRUE 62215
62213: GO 62351
62215: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
62216: LD_ADDR_VAR 0 2
62220: PUSH
62221: LD_INT 2
62223: PUSH
62224: LD_INT 4
62226: PUSH
62227: LD_INT 5
62229: PUSH
62230: LD_INT 7
62232: PUSH
62233: LD_INT 11
62235: PUSH
62236: LD_INT 12
62238: PUSH
62239: LD_INT 15
62241: PUSH
62242: LD_INT 16
62244: PUSH
62245: LD_INT 20
62247: PUSH
62248: LD_INT 21
62250: PUSH
62251: LD_INT 22
62253: PUSH
62254: LD_INT 23
62256: PUSH
62257: LD_INT 25
62259: PUSH
62260: LD_INT 26
62262: PUSH
62263: LD_INT 30
62265: PUSH
62266: LD_INT 31
62268: PUSH
62269: LD_INT 32
62271: PUSH
62272: LD_INT 33
62274: PUSH
62275: LD_INT 34
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 101
62301: PUSH
62302: LD_INT 102
62304: PUSH
62305: LD_INT 103
62307: PUSH
62308: LD_INT 106
62310: PUSH
62311: LD_INT 108
62313: PUSH
62314: LD_INT 112
62316: PUSH
62317: LD_INT 113
62319: PUSH
62320: LD_INT 114
62322: PUSH
62323: LD_INT 116
62325: PUSH
62326: LD_INT 117
62328: PUSH
62329: LD_INT 118
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: ST_TO_ADDR
62349: GO 62980
62351: LD_INT 17
62353: DOUBLE
62354: EQUAL
62355: IFTRUE 62359
62357: GO 62583
62359: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
62360: LD_ADDR_VAR 0 2
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: LD_INT 2
62370: PUSH
62371: LD_INT 3
62373: PUSH
62374: LD_INT 4
62376: PUSH
62377: LD_INT 5
62379: PUSH
62380: LD_INT 6
62382: PUSH
62383: LD_INT 7
62385: PUSH
62386: LD_INT 8
62388: PUSH
62389: LD_INT 9
62391: PUSH
62392: LD_INT 10
62394: PUSH
62395: LD_INT 11
62397: PUSH
62398: LD_INT 12
62400: PUSH
62401: LD_INT 13
62403: PUSH
62404: LD_INT 14
62406: PUSH
62407: LD_INT 15
62409: PUSH
62410: LD_INT 16
62412: PUSH
62413: LD_INT 17
62415: PUSH
62416: LD_INT 18
62418: PUSH
62419: LD_INT 19
62421: PUSH
62422: LD_INT 20
62424: PUSH
62425: LD_INT 21
62427: PUSH
62428: LD_INT 22
62430: PUSH
62431: LD_INT 23
62433: PUSH
62434: LD_INT 24
62436: PUSH
62437: LD_INT 25
62439: PUSH
62440: LD_INT 26
62442: PUSH
62443: LD_INT 27
62445: PUSH
62446: LD_INT 28
62448: PUSH
62449: LD_INT 29
62451: PUSH
62452: LD_INT 30
62454: PUSH
62455: LD_INT 31
62457: PUSH
62458: LD_INT 32
62460: PUSH
62461: LD_INT 33
62463: PUSH
62464: LD_INT 34
62466: PUSH
62467: LD_INT 36
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 101
62509: PUSH
62510: LD_INT 102
62512: PUSH
62513: LD_INT 103
62515: PUSH
62516: LD_INT 104
62518: PUSH
62519: LD_INT 105
62521: PUSH
62522: LD_INT 106
62524: PUSH
62525: LD_INT 107
62527: PUSH
62528: LD_INT 108
62530: PUSH
62531: LD_INT 109
62533: PUSH
62534: LD_INT 110
62536: PUSH
62537: LD_INT 111
62539: PUSH
62540: LD_INT 112
62542: PUSH
62543: LD_INT 113
62545: PUSH
62546: LD_INT 114
62548: PUSH
62549: LD_INT 116
62551: PUSH
62552: LD_INT 117
62554: PUSH
62555: LD_INT 118
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: ST_TO_ADDR
62581: GO 62980
62583: LD_INT 18
62585: DOUBLE
62586: EQUAL
62587: IFTRUE 62591
62589: GO 62739
62591: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
62592: LD_ADDR_VAR 0 2
62596: PUSH
62597: LD_INT 2
62599: PUSH
62600: LD_INT 4
62602: PUSH
62603: LD_INT 5
62605: PUSH
62606: LD_INT 7
62608: PUSH
62609: LD_INT 11
62611: PUSH
62612: LD_INT 12
62614: PUSH
62615: LD_INT 15
62617: PUSH
62618: LD_INT 16
62620: PUSH
62621: LD_INT 20
62623: PUSH
62624: LD_INT 21
62626: PUSH
62627: LD_INT 22
62629: PUSH
62630: LD_INT 23
62632: PUSH
62633: LD_INT 25
62635: PUSH
62636: LD_INT 26
62638: PUSH
62639: LD_INT 30
62641: PUSH
62642: LD_INT 31
62644: PUSH
62645: LD_INT 32
62647: PUSH
62648: LD_INT 33
62650: PUSH
62651: LD_INT 34
62653: PUSH
62654: LD_INT 35
62656: PUSH
62657: LD_INT 36
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 101
62685: PUSH
62686: LD_INT 102
62688: PUSH
62689: LD_INT 103
62691: PUSH
62692: LD_INT 106
62694: PUSH
62695: LD_INT 108
62697: PUSH
62698: LD_INT 112
62700: PUSH
62701: LD_INT 113
62703: PUSH
62704: LD_INT 114
62706: PUSH
62707: LD_INT 115
62709: PUSH
62710: LD_INT 116
62712: PUSH
62713: LD_INT 117
62715: PUSH
62716: LD_INT 118
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: ST_TO_ADDR
62737: GO 62980
62739: LD_INT 19
62741: DOUBLE
62742: EQUAL
62743: IFTRUE 62747
62745: GO 62979
62747: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
62748: LD_ADDR_VAR 0 2
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: LD_INT 2
62758: PUSH
62759: LD_INT 3
62761: PUSH
62762: LD_INT 4
62764: PUSH
62765: LD_INT 5
62767: PUSH
62768: LD_INT 6
62770: PUSH
62771: LD_INT 7
62773: PUSH
62774: LD_INT 8
62776: PUSH
62777: LD_INT 9
62779: PUSH
62780: LD_INT 10
62782: PUSH
62783: LD_INT 11
62785: PUSH
62786: LD_INT 12
62788: PUSH
62789: LD_INT 13
62791: PUSH
62792: LD_INT 14
62794: PUSH
62795: LD_INT 15
62797: PUSH
62798: LD_INT 16
62800: PUSH
62801: LD_INT 17
62803: PUSH
62804: LD_INT 18
62806: PUSH
62807: LD_INT 19
62809: PUSH
62810: LD_INT 20
62812: PUSH
62813: LD_INT 21
62815: PUSH
62816: LD_INT 22
62818: PUSH
62819: LD_INT 23
62821: PUSH
62822: LD_INT 24
62824: PUSH
62825: LD_INT 25
62827: PUSH
62828: LD_INT 26
62830: PUSH
62831: LD_INT 27
62833: PUSH
62834: LD_INT 28
62836: PUSH
62837: LD_INT 29
62839: PUSH
62840: LD_INT 30
62842: PUSH
62843: LD_INT 31
62845: PUSH
62846: LD_INT 32
62848: PUSH
62849: LD_INT 33
62851: PUSH
62852: LD_INT 34
62854: PUSH
62855: LD_INT 35
62857: PUSH
62858: LD_INT 36
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 101
62901: PUSH
62902: LD_INT 102
62904: PUSH
62905: LD_INT 103
62907: PUSH
62908: LD_INT 104
62910: PUSH
62911: LD_INT 105
62913: PUSH
62914: LD_INT 106
62916: PUSH
62917: LD_INT 107
62919: PUSH
62920: LD_INT 108
62922: PUSH
62923: LD_INT 109
62925: PUSH
62926: LD_INT 110
62928: PUSH
62929: LD_INT 111
62931: PUSH
62932: LD_INT 112
62934: PUSH
62935: LD_INT 113
62937: PUSH
62938: LD_INT 114
62940: PUSH
62941: LD_INT 115
62943: PUSH
62944: LD_INT 116
62946: PUSH
62947: LD_INT 117
62949: PUSH
62950: LD_INT 118
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: ST_TO_ADDR
62977: GO 62980
62979: POP
// end else
62980: GO 63211
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
62982: LD_ADDR_VAR 0 2
62986: PUSH
62987: LD_INT 1
62989: PUSH
62990: LD_INT 2
62992: PUSH
62993: LD_INT 3
62995: PUSH
62996: LD_INT 4
62998: PUSH
62999: LD_INT 5
63001: PUSH
63002: LD_INT 6
63004: PUSH
63005: LD_INT 7
63007: PUSH
63008: LD_INT 8
63010: PUSH
63011: LD_INT 9
63013: PUSH
63014: LD_INT 10
63016: PUSH
63017: LD_INT 11
63019: PUSH
63020: LD_INT 12
63022: PUSH
63023: LD_INT 13
63025: PUSH
63026: LD_INT 14
63028: PUSH
63029: LD_INT 15
63031: PUSH
63032: LD_INT 16
63034: PUSH
63035: LD_INT 17
63037: PUSH
63038: LD_INT 18
63040: PUSH
63041: LD_INT 19
63043: PUSH
63044: LD_INT 20
63046: PUSH
63047: LD_INT 21
63049: PUSH
63050: LD_INT 22
63052: PUSH
63053: LD_INT 23
63055: PUSH
63056: LD_INT 24
63058: PUSH
63059: LD_INT 25
63061: PUSH
63062: LD_INT 26
63064: PUSH
63065: LD_INT 27
63067: PUSH
63068: LD_INT 28
63070: PUSH
63071: LD_INT 29
63073: PUSH
63074: LD_INT 30
63076: PUSH
63077: LD_INT 31
63079: PUSH
63080: LD_INT 32
63082: PUSH
63083: LD_INT 33
63085: PUSH
63086: LD_INT 34
63088: PUSH
63089: LD_INT 35
63091: PUSH
63092: LD_INT 36
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 101
63135: PUSH
63136: LD_INT 102
63138: PUSH
63139: LD_INT 103
63141: PUSH
63142: LD_INT 104
63144: PUSH
63145: LD_INT 105
63147: PUSH
63148: LD_INT 106
63150: PUSH
63151: LD_INT 107
63153: PUSH
63154: LD_INT 108
63156: PUSH
63157: LD_INT 109
63159: PUSH
63160: LD_INT 110
63162: PUSH
63163: LD_INT 111
63165: PUSH
63166: LD_INT 112
63168: PUSH
63169: LD_INT 113
63171: PUSH
63172: LD_INT 114
63174: PUSH
63175: LD_INT 115
63177: PUSH
63178: LD_INT 116
63180: PUSH
63181: LD_INT 117
63183: PUSH
63184: LD_INT 118
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: ST_TO_ADDR
// if result then
63211: LD_VAR 0 2
63215: IFFALSE 64001
// begin normal :=  ;
63217: LD_ADDR_VAR 0 5
63221: PUSH
63222: LD_STRING 
63224: ST_TO_ADDR
// hardcore :=  ;
63225: LD_ADDR_VAR 0 6
63229: PUSH
63230: LD_STRING 
63232: ST_TO_ADDR
// active :=  ;
63233: LD_ADDR_VAR 0 7
63237: PUSH
63238: LD_STRING 
63240: ST_TO_ADDR
// for i = 1 to normalCounter do
63241: LD_ADDR_VAR 0 8
63245: PUSH
63246: DOUBLE
63247: LD_INT 1
63249: DEC
63250: ST_TO_ADDR
63251: LD_EXP 47
63255: PUSH
63256: FOR_TO
63257: IFFALSE 63358
// begin tmp := 0 ;
63259: LD_ADDR_VAR 0 3
63263: PUSH
63264: LD_STRING 0
63266: ST_TO_ADDR
// if result [ 1 ] then
63267: LD_VAR 0 2
63271: PUSH
63272: LD_INT 1
63274: ARRAY
63275: IFFALSE 63340
// if result [ 1 ] [ 1 ] = i then
63277: LD_VAR 0 2
63281: PUSH
63282: LD_INT 1
63284: ARRAY
63285: PUSH
63286: LD_INT 1
63288: ARRAY
63289: PUSH
63290: LD_VAR 0 8
63294: EQUAL
63295: IFFALSE 63340
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63297: LD_ADDR_VAR 0 2
63301: PUSH
63302: LD_VAR 0 2
63306: PPUSH
63307: LD_INT 1
63309: PPUSH
63310: LD_VAR 0 2
63314: PUSH
63315: LD_INT 1
63317: ARRAY
63318: PPUSH
63319: LD_INT 1
63321: PPUSH
63322: CALL_OW 3
63326: PPUSH
63327: CALL_OW 1
63331: ST_TO_ADDR
// tmp := 1 ;
63332: LD_ADDR_VAR 0 3
63336: PUSH
63337: LD_STRING 1
63339: ST_TO_ADDR
// end ; normal := normal & tmp ;
63340: LD_ADDR_VAR 0 5
63344: PUSH
63345: LD_VAR 0 5
63349: PUSH
63350: LD_VAR 0 3
63354: STR
63355: ST_TO_ADDR
// end ;
63356: GO 63256
63358: POP
63359: POP
// for i = 1 to hardcoreCounter do
63360: LD_ADDR_VAR 0 8
63364: PUSH
63365: DOUBLE
63366: LD_INT 1
63368: DEC
63369: ST_TO_ADDR
63370: LD_EXP 48
63374: PUSH
63375: FOR_TO
63376: IFFALSE 63481
// begin tmp := 0 ;
63378: LD_ADDR_VAR 0 3
63382: PUSH
63383: LD_STRING 0
63385: ST_TO_ADDR
// if result [ 2 ] then
63386: LD_VAR 0 2
63390: PUSH
63391: LD_INT 2
63393: ARRAY
63394: IFFALSE 63463
// if result [ 2 ] [ 1 ] = 100 + i then
63396: LD_VAR 0 2
63400: PUSH
63401: LD_INT 2
63403: ARRAY
63404: PUSH
63405: LD_INT 1
63407: ARRAY
63408: PUSH
63409: LD_INT 100
63411: PUSH
63412: LD_VAR 0 8
63416: PLUS
63417: EQUAL
63418: IFFALSE 63463
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63420: LD_ADDR_VAR 0 2
63424: PUSH
63425: LD_VAR 0 2
63429: PPUSH
63430: LD_INT 2
63432: PPUSH
63433: LD_VAR 0 2
63437: PUSH
63438: LD_INT 2
63440: ARRAY
63441: PPUSH
63442: LD_INT 1
63444: PPUSH
63445: CALL_OW 3
63449: PPUSH
63450: CALL_OW 1
63454: ST_TO_ADDR
// tmp := 1 ;
63455: LD_ADDR_VAR 0 3
63459: PUSH
63460: LD_STRING 1
63462: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63463: LD_ADDR_VAR 0 6
63467: PUSH
63468: LD_VAR 0 6
63472: PUSH
63473: LD_VAR 0 3
63477: STR
63478: ST_TO_ADDR
// end ;
63479: GO 63375
63481: POP
63482: POP
// if isGameLoad then
63483: LD_VAR 0 1
63487: IFFALSE 63962
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
63489: LD_ADDR_VAR 0 4
63493: PUSH
63494: LD_EXP 51
63498: PUSH
63499: LD_EXP 50
63503: PUSH
63504: LD_EXP 52
63508: PUSH
63509: LD_EXP 49
63513: PUSH
63514: LD_EXP 53
63518: PUSH
63519: LD_EXP 54
63523: PUSH
63524: LD_EXP 55
63528: PUSH
63529: LD_EXP 56
63533: PUSH
63534: LD_EXP 57
63538: PUSH
63539: LD_EXP 58
63543: PUSH
63544: LD_EXP 59
63548: PUSH
63549: LD_EXP 60
63553: PUSH
63554: LD_EXP 61
63558: PUSH
63559: LD_EXP 62
63563: PUSH
63564: LD_EXP 70
63568: PUSH
63569: LD_EXP 71
63573: PUSH
63574: LD_EXP 72
63578: PUSH
63579: LD_EXP 73
63583: PUSH
63584: LD_EXP 75
63588: PUSH
63589: LD_EXP 76
63593: PUSH
63594: LD_EXP 77
63598: PUSH
63599: LD_EXP 80
63603: PUSH
63604: LD_EXP 82
63608: PUSH
63609: LD_EXP 83
63613: PUSH
63614: LD_EXP 84
63618: PUSH
63619: LD_EXP 86
63623: PUSH
63624: LD_EXP 87
63628: PUSH
63629: LD_EXP 90
63633: PUSH
63634: LD_EXP 91
63638: PUSH
63639: LD_EXP 92
63643: PUSH
63644: LD_EXP 93
63648: PUSH
63649: LD_EXP 94
63653: PUSH
63654: LD_EXP 95
63658: PUSH
63659: LD_EXP 96
63663: PUSH
63664: LD_EXP 97
63668: PUSH
63669: LD_EXP 98
63673: PUSH
63674: LD_EXP 63
63678: PUSH
63679: LD_EXP 64
63683: PUSH
63684: LD_EXP 67
63688: PUSH
63689: LD_EXP 68
63693: PUSH
63694: LD_EXP 69
63698: PUSH
63699: LD_EXP 65
63703: PUSH
63704: LD_EXP 66
63708: PUSH
63709: LD_EXP 74
63713: PUSH
63714: LD_EXP 78
63718: PUSH
63719: LD_EXP 79
63723: PUSH
63724: LD_EXP 81
63728: PUSH
63729: LD_EXP 85
63733: PUSH
63734: LD_EXP 88
63738: PUSH
63739: LD_EXP 89
63743: PUSH
63744: LD_EXP 99
63748: PUSH
63749: LD_EXP 100
63753: PUSH
63754: LD_EXP 101
63758: PUSH
63759: LD_EXP 102
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: ST_TO_ADDR
// tmp :=  ;
63820: LD_ADDR_VAR 0 3
63824: PUSH
63825: LD_STRING 
63827: ST_TO_ADDR
// for i = 1 to normalCounter do
63828: LD_ADDR_VAR 0 8
63832: PUSH
63833: DOUBLE
63834: LD_INT 1
63836: DEC
63837: ST_TO_ADDR
63838: LD_EXP 47
63842: PUSH
63843: FOR_TO
63844: IFFALSE 63880
// begin if flags [ i ] then
63846: LD_VAR 0 4
63850: PUSH
63851: LD_VAR 0 8
63855: ARRAY
63856: IFFALSE 63878
// tmp := tmp & i & ; ;
63858: LD_ADDR_VAR 0 3
63862: PUSH
63863: LD_VAR 0 3
63867: PUSH
63868: LD_VAR 0 8
63872: STR
63873: PUSH
63874: LD_STRING ;
63876: STR
63877: ST_TO_ADDR
// end ;
63878: GO 63843
63880: POP
63881: POP
// for i = 1 to hardcoreCounter do
63882: LD_ADDR_VAR 0 8
63886: PUSH
63887: DOUBLE
63888: LD_INT 1
63890: DEC
63891: ST_TO_ADDR
63892: LD_EXP 48
63896: PUSH
63897: FOR_TO
63898: IFFALSE 63944
// begin if flags [ normalCounter + i ] then
63900: LD_VAR 0 4
63904: PUSH
63905: LD_EXP 47
63909: PUSH
63910: LD_VAR 0 8
63914: PLUS
63915: ARRAY
63916: IFFALSE 63942
// tmp := tmp & ( 100 + i ) & ; ;
63918: LD_ADDR_VAR 0 3
63922: PUSH
63923: LD_VAR 0 3
63927: PUSH
63928: LD_INT 100
63930: PUSH
63931: LD_VAR 0 8
63935: PLUS
63936: STR
63937: PUSH
63938: LD_STRING ;
63940: STR
63941: ST_TO_ADDR
// end ;
63942: GO 63897
63944: POP
63945: POP
// if tmp then
63946: LD_VAR 0 3
63950: IFFALSE 63962
// active := tmp ;
63952: LD_ADDR_VAR 0 7
63956: PUSH
63957: LD_VAR 0 3
63961: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
63962: LD_STRING getStreamItemsFromMission("
63964: PUSH
63965: LD_VAR 0 5
63969: STR
63970: PUSH
63971: LD_STRING ","
63973: STR
63974: PUSH
63975: LD_VAR 0 6
63979: STR
63980: PUSH
63981: LD_STRING ","
63983: STR
63984: PUSH
63985: LD_VAR 0 7
63989: STR
63990: PUSH
63991: LD_STRING ")
63993: STR
63994: PPUSH
63995: CALL_OW 559
// end else
63999: GO 64008
// ToLua ( getStreamItemsFromMission("","","") ) ;
64001: LD_STRING getStreamItemsFromMission("","","")
64003: PPUSH
64004: CALL_OW 559
// end ;
64008: LD_VAR 0 2
64012: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
64013: LD_EXP 46
64017: PUSH
64018: LD_EXP 51
64022: AND
64023: IFFALSE 64147
64025: GO 64027
64027: DISABLE
64028: LD_INT 0
64030: PPUSH
64031: PPUSH
// begin enable ;
64032: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
64033: LD_ADDR_VAR 0 2
64037: PUSH
64038: LD_INT 22
64040: PUSH
64041: LD_OWVAR 2
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 2
64052: PUSH
64053: LD_INT 34
64055: PUSH
64056: LD_INT 7
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 34
64065: PUSH
64066: LD_INT 45
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 34
64075: PUSH
64076: LD_INT 28
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 34
64085: PUSH
64086: LD_INT 47
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PPUSH
64104: CALL_OW 69
64108: ST_TO_ADDR
// if not tmp then
64109: LD_VAR 0 2
64113: NOT
64114: IFFALSE 64118
// exit ;
64116: GO 64147
// for i in tmp do
64118: LD_ADDR_VAR 0 1
64122: PUSH
64123: LD_VAR 0 2
64127: PUSH
64128: FOR_IN
64129: IFFALSE 64145
// begin SetLives ( i , 0 ) ;
64131: LD_VAR 0 1
64135: PPUSH
64136: LD_INT 0
64138: PPUSH
64139: CALL_OW 234
// end ;
64143: GO 64128
64145: POP
64146: POP
// end ;
64147: PPOPN 2
64149: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
64150: LD_EXP 46
64154: PUSH
64155: LD_EXP 52
64159: AND
64160: IFFALSE 64244
64162: GO 64164
64164: DISABLE
64165: LD_INT 0
64167: PPUSH
64168: PPUSH
// begin enable ;
64169: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
64170: LD_ADDR_VAR 0 2
64174: PUSH
64175: LD_INT 22
64177: PUSH
64178: LD_OWVAR 2
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 32
64189: PUSH
64190: LD_INT 3
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PPUSH
64201: CALL_OW 69
64205: ST_TO_ADDR
// if not tmp then
64206: LD_VAR 0 2
64210: NOT
64211: IFFALSE 64215
// exit ;
64213: GO 64244
// for i in tmp do
64215: LD_ADDR_VAR 0 1
64219: PUSH
64220: LD_VAR 0 2
64224: PUSH
64225: FOR_IN
64226: IFFALSE 64242
// begin SetLives ( i , 0 ) ;
64228: LD_VAR 0 1
64232: PPUSH
64233: LD_INT 0
64235: PPUSH
64236: CALL_OW 234
// end ;
64240: GO 64225
64242: POP
64243: POP
// end ;
64244: PPOPN 2
64246: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
64247: LD_EXP 46
64251: PUSH
64252: LD_EXP 49
64256: AND
64257: IFFALSE 64350
64259: GO 64261
64261: DISABLE
64262: LD_INT 0
64264: PPUSH
// begin enable ;
64265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
64266: LD_ADDR_VAR 0 1
64270: PUSH
64271: LD_INT 22
64273: PUSH
64274: LD_OWVAR 2
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 2
64285: PUSH
64286: LD_INT 25
64288: PUSH
64289: LD_INT 5
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 25
64298: PUSH
64299: LD_INT 9
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 25
64308: PUSH
64309: LD_INT 8
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PPUSH
64326: CALL_OW 69
64330: PUSH
64331: FOR_IN
64332: IFFALSE 64348
// begin SetClass ( i , 1 ) ;
64334: LD_VAR 0 1
64338: PPUSH
64339: LD_INT 1
64341: PPUSH
64342: CALL_OW 336
// end ;
64346: GO 64331
64348: POP
64349: POP
// end ;
64350: PPOPN 1
64352: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64353: LD_EXP 46
64357: PUSH
64358: LD_EXP 50
64362: AND
64363: PUSH
64364: LD_OWVAR 65
64368: PUSH
64369: LD_INT 7
64371: LESS
64372: AND
64373: IFFALSE 64387
64375: GO 64377
64377: DISABLE
// begin enable ;
64378: ENABLE
// game_speed := 7 ;
64379: LD_ADDR_OWVAR 65
64383: PUSH
64384: LD_INT 7
64386: ST_TO_ADDR
// end ;
64387: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64388: LD_EXP 46
64392: PUSH
64393: LD_EXP 53
64397: AND
64398: IFFALSE 64600
64400: GO 64402
64402: DISABLE
64403: LD_INT 0
64405: PPUSH
64406: PPUSH
64407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64408: LD_ADDR_VAR 0 3
64412: PUSH
64413: LD_INT 81
64415: PUSH
64416: LD_OWVAR 2
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 21
64427: PUSH
64428: LD_INT 1
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PPUSH
64439: CALL_OW 69
64443: ST_TO_ADDR
// if not tmp then
64444: LD_VAR 0 3
64448: NOT
64449: IFFALSE 64453
// exit ;
64451: GO 64600
// if tmp > 5 then
64453: LD_VAR 0 3
64457: PUSH
64458: LD_INT 5
64460: GREATER
64461: IFFALSE 64473
// k := 5 else
64463: LD_ADDR_VAR 0 2
64467: PUSH
64468: LD_INT 5
64470: ST_TO_ADDR
64471: GO 64483
// k := tmp ;
64473: LD_ADDR_VAR 0 2
64477: PUSH
64478: LD_VAR 0 3
64482: ST_TO_ADDR
// for i := 1 to k do
64483: LD_ADDR_VAR 0 1
64487: PUSH
64488: DOUBLE
64489: LD_INT 1
64491: DEC
64492: ST_TO_ADDR
64493: LD_VAR 0 2
64497: PUSH
64498: FOR_TO
64499: IFFALSE 64598
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64501: LD_VAR 0 3
64505: PUSH
64506: LD_VAR 0 1
64510: ARRAY
64511: PPUSH
64512: LD_VAR 0 1
64516: PUSH
64517: LD_INT 4
64519: MOD
64520: PUSH
64521: LD_INT 1
64523: PLUS
64524: PPUSH
64525: CALL_OW 259
64529: PUSH
64530: LD_INT 10
64532: LESS
64533: IFFALSE 64596
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64535: LD_VAR 0 3
64539: PUSH
64540: LD_VAR 0 1
64544: ARRAY
64545: PPUSH
64546: LD_VAR 0 1
64550: PUSH
64551: LD_INT 4
64553: MOD
64554: PUSH
64555: LD_INT 1
64557: PLUS
64558: PPUSH
64559: LD_VAR 0 3
64563: PUSH
64564: LD_VAR 0 1
64568: ARRAY
64569: PPUSH
64570: LD_VAR 0 1
64574: PUSH
64575: LD_INT 4
64577: MOD
64578: PUSH
64579: LD_INT 1
64581: PLUS
64582: PPUSH
64583: CALL_OW 259
64587: PUSH
64588: LD_INT 1
64590: PLUS
64591: PPUSH
64592: CALL_OW 237
64596: GO 64498
64598: POP
64599: POP
// end ;
64600: PPOPN 3
64602: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
64603: LD_EXP 46
64607: PUSH
64608: LD_EXP 54
64612: AND
64613: IFFALSE 64633
64615: GO 64617
64617: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64618: LD_INT 4
64620: PPUSH
64621: LD_OWVAR 2
64625: PPUSH
64626: LD_INT 0
64628: PPUSH
64629: CALL_OW 324
64633: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64634: LD_EXP 46
64638: PUSH
64639: LD_EXP 83
64643: AND
64644: IFFALSE 64664
64646: GO 64648
64648: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64649: LD_INT 19
64651: PPUSH
64652: LD_OWVAR 2
64656: PPUSH
64657: LD_INT 0
64659: PPUSH
64660: CALL_OW 324
64664: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
64665: LD_EXP 46
64669: PUSH
64670: LD_EXP 55
64674: AND
64675: IFFALSE 64777
64677: GO 64679
64679: DISABLE
64680: LD_INT 0
64682: PPUSH
64683: PPUSH
// begin enable ;
64684: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
64685: LD_ADDR_VAR 0 2
64689: PUSH
64690: LD_INT 22
64692: PUSH
64693: LD_OWVAR 2
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 2
64704: PUSH
64705: LD_INT 34
64707: PUSH
64708: LD_INT 11
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 34
64717: PUSH
64718: LD_INT 30
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: LIST
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PPUSH
64734: CALL_OW 69
64738: ST_TO_ADDR
// if not tmp then
64739: LD_VAR 0 2
64743: NOT
64744: IFFALSE 64748
// exit ;
64746: GO 64777
// for i in tmp do
64748: LD_ADDR_VAR 0 1
64752: PUSH
64753: LD_VAR 0 2
64757: PUSH
64758: FOR_IN
64759: IFFALSE 64775
// begin SetLives ( i , 0 ) ;
64761: LD_VAR 0 1
64765: PPUSH
64766: LD_INT 0
64768: PPUSH
64769: CALL_OW 234
// end ;
64773: GO 64758
64775: POP
64776: POP
// end ;
64777: PPOPN 2
64779: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64780: LD_EXP 46
64784: PUSH
64785: LD_EXP 56
64789: AND
64790: IFFALSE 64810
64792: GO 64794
64794: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64795: LD_INT 32
64797: PPUSH
64798: LD_OWVAR 2
64802: PPUSH
64803: LD_INT 0
64805: PPUSH
64806: CALL_OW 324
64810: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64811: LD_EXP 46
64815: PUSH
64816: LD_EXP 57
64820: AND
64821: IFFALSE 65002
64823: GO 64825
64825: DISABLE
64826: LD_INT 0
64828: PPUSH
64829: PPUSH
64830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64831: LD_ADDR_VAR 0 2
64835: PUSH
64836: LD_INT 22
64838: PUSH
64839: LD_OWVAR 2
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 33
64850: PUSH
64851: LD_INT 3
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PPUSH
64862: CALL_OW 69
64866: ST_TO_ADDR
// if not tmp then
64867: LD_VAR 0 2
64871: NOT
64872: IFFALSE 64876
// exit ;
64874: GO 65002
// side := 0 ;
64876: LD_ADDR_VAR 0 3
64880: PUSH
64881: LD_INT 0
64883: ST_TO_ADDR
// for i := 1 to 8 do
64884: LD_ADDR_VAR 0 1
64888: PUSH
64889: DOUBLE
64890: LD_INT 1
64892: DEC
64893: ST_TO_ADDR
64894: LD_INT 8
64896: PUSH
64897: FOR_TO
64898: IFFALSE 64946
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64900: LD_OWVAR 2
64904: PUSH
64905: LD_VAR 0 1
64909: NONEQUAL
64910: PUSH
64911: LD_OWVAR 2
64915: PPUSH
64916: LD_VAR 0 1
64920: PPUSH
64921: CALL_OW 81
64925: PUSH
64926: LD_INT 2
64928: EQUAL
64929: AND
64930: IFFALSE 64944
// begin side := i ;
64932: LD_ADDR_VAR 0 3
64936: PUSH
64937: LD_VAR 0 1
64941: ST_TO_ADDR
// break ;
64942: GO 64946
// end ;
64944: GO 64897
64946: POP
64947: POP
// if not side then
64948: LD_VAR 0 3
64952: NOT
64953: IFFALSE 64957
// exit ;
64955: GO 65002
// for i := 1 to tmp do
64957: LD_ADDR_VAR 0 1
64961: PUSH
64962: DOUBLE
64963: LD_INT 1
64965: DEC
64966: ST_TO_ADDR
64967: LD_VAR 0 2
64971: PUSH
64972: FOR_TO
64973: IFFALSE 65000
// if Prob ( 60 ) then
64975: LD_INT 60
64977: PPUSH
64978: CALL_OW 13
64982: IFFALSE 64998
// SetSide ( i , side ) ;
64984: LD_VAR 0 1
64988: PPUSH
64989: LD_VAR 0 3
64993: PPUSH
64994: CALL_OW 235
64998: GO 64972
65000: POP
65001: POP
// end ;
65002: PPOPN 3
65004: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
65005: LD_EXP 46
65009: PUSH
65010: LD_EXP 59
65014: AND
65015: IFFALSE 65134
65017: GO 65019
65019: DISABLE
65020: LD_INT 0
65022: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
65023: LD_ADDR_VAR 0 1
65027: PUSH
65028: LD_INT 22
65030: PUSH
65031: LD_OWVAR 2
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 21
65042: PUSH
65043: LD_INT 1
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 3
65052: PUSH
65053: LD_INT 23
65055: PUSH
65056: LD_INT 0
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: LIST
65071: PPUSH
65072: CALL_OW 69
65076: PUSH
65077: FOR_IN
65078: IFFALSE 65132
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
65080: LD_VAR 0 1
65084: PPUSH
65085: CALL_OW 257
65089: PUSH
65090: LD_INT 1
65092: PUSH
65093: LD_INT 2
65095: PUSH
65096: LD_INT 3
65098: PUSH
65099: LD_INT 4
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: IN
65108: IFFALSE 65130
// SetClass ( un , rand ( 1 , 4 ) ) ;
65110: LD_VAR 0 1
65114: PPUSH
65115: LD_INT 1
65117: PPUSH
65118: LD_INT 4
65120: PPUSH
65121: CALL_OW 12
65125: PPUSH
65126: CALL_OW 336
65130: GO 65077
65132: POP
65133: POP
// end ;
65134: PPOPN 1
65136: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
65137: LD_EXP 46
65141: PUSH
65142: LD_EXP 58
65146: AND
65147: IFFALSE 65226
65149: GO 65151
65151: DISABLE
65152: LD_INT 0
65154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65155: LD_ADDR_VAR 0 1
65159: PUSH
65160: LD_INT 22
65162: PUSH
65163: LD_OWVAR 2
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 21
65174: PUSH
65175: LD_INT 3
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PPUSH
65186: CALL_OW 69
65190: ST_TO_ADDR
// if not tmp then
65191: LD_VAR 0 1
65195: NOT
65196: IFFALSE 65200
// exit ;
65198: GO 65226
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
65200: LD_VAR 0 1
65204: PUSH
65205: LD_INT 1
65207: PPUSH
65208: LD_VAR 0 1
65212: PPUSH
65213: CALL_OW 12
65217: ARRAY
65218: PPUSH
65219: LD_INT 100
65221: PPUSH
65222: CALL_OW 234
// end ;
65226: PPOPN 1
65228: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
65229: LD_EXP 46
65233: PUSH
65234: LD_EXP 60
65238: AND
65239: IFFALSE 65337
65241: GO 65243
65243: DISABLE
65244: LD_INT 0
65246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65247: LD_ADDR_VAR 0 1
65251: PUSH
65252: LD_INT 22
65254: PUSH
65255: LD_OWVAR 2
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 21
65266: PUSH
65267: LD_INT 1
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PPUSH
65278: CALL_OW 69
65282: ST_TO_ADDR
// if not tmp then
65283: LD_VAR 0 1
65287: NOT
65288: IFFALSE 65292
// exit ;
65290: GO 65337
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65292: LD_VAR 0 1
65296: PUSH
65297: LD_INT 1
65299: PPUSH
65300: LD_VAR 0 1
65304: PPUSH
65305: CALL_OW 12
65309: ARRAY
65310: PPUSH
65311: LD_INT 1
65313: PPUSH
65314: LD_INT 4
65316: PPUSH
65317: CALL_OW 12
65321: PPUSH
65322: LD_INT 3000
65324: PPUSH
65325: LD_INT 9000
65327: PPUSH
65328: CALL_OW 12
65332: PPUSH
65333: CALL_OW 492
// end ;
65337: PPOPN 1
65339: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65340: LD_EXP 46
65344: PUSH
65345: LD_EXP 61
65349: AND
65350: IFFALSE 65370
65352: GO 65354
65354: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65355: LD_INT 1
65357: PPUSH
65358: LD_OWVAR 2
65362: PPUSH
65363: LD_INT 0
65365: PPUSH
65366: CALL_OW 324
65370: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65371: LD_EXP 46
65375: PUSH
65376: LD_EXP 62
65380: AND
65381: IFFALSE 65464
65383: GO 65385
65385: DISABLE
65386: LD_INT 0
65388: PPUSH
65389: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65390: LD_ADDR_VAR 0 2
65394: PUSH
65395: LD_INT 22
65397: PUSH
65398: LD_OWVAR 2
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 21
65409: PUSH
65410: LD_INT 3
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PPUSH
65421: CALL_OW 69
65425: ST_TO_ADDR
// if not tmp then
65426: LD_VAR 0 2
65430: NOT
65431: IFFALSE 65435
// exit ;
65433: GO 65464
// for i in tmp do
65435: LD_ADDR_VAR 0 1
65439: PUSH
65440: LD_VAR 0 2
65444: PUSH
65445: FOR_IN
65446: IFFALSE 65462
// SetBLevel ( i , 10 ) ;
65448: LD_VAR 0 1
65452: PPUSH
65453: LD_INT 10
65455: PPUSH
65456: CALL_OW 241
65460: GO 65445
65462: POP
65463: POP
// end ;
65464: PPOPN 2
65466: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65467: LD_EXP 46
65471: PUSH
65472: LD_EXP 63
65476: AND
65477: IFFALSE 65588
65479: GO 65481
65481: DISABLE
65482: LD_INT 0
65484: PPUSH
65485: PPUSH
65486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65487: LD_ADDR_VAR 0 3
65491: PUSH
65492: LD_INT 22
65494: PUSH
65495: LD_OWVAR 2
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 25
65506: PUSH
65507: LD_INT 1
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PPUSH
65518: CALL_OW 69
65522: ST_TO_ADDR
// if not tmp then
65523: LD_VAR 0 3
65527: NOT
65528: IFFALSE 65532
// exit ;
65530: GO 65588
// un := tmp [ rand ( 1 , tmp ) ] ;
65532: LD_ADDR_VAR 0 2
65536: PUSH
65537: LD_VAR 0 3
65541: PUSH
65542: LD_INT 1
65544: PPUSH
65545: LD_VAR 0 3
65549: PPUSH
65550: CALL_OW 12
65554: ARRAY
65555: ST_TO_ADDR
// if Crawls ( un ) then
65556: LD_VAR 0 2
65560: PPUSH
65561: CALL_OW 318
65565: IFFALSE 65576
// ComWalk ( un ) ;
65567: LD_VAR 0 2
65571: PPUSH
65572: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65576: LD_VAR 0 2
65580: PPUSH
65581: LD_INT 5
65583: PPUSH
65584: CALL_OW 336
// end ;
65588: PPOPN 3
65590: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
65591: LD_EXP 46
65595: PUSH
65596: LD_EXP 64
65600: AND
65601: PUSH
65602: LD_OWVAR 67
65606: PUSH
65607: LD_INT 4
65609: LESS
65610: AND
65611: IFFALSE 65630
65613: GO 65615
65615: DISABLE
// begin Difficulty := Difficulty + 1 ;
65616: LD_ADDR_OWVAR 67
65620: PUSH
65621: LD_OWVAR 67
65625: PUSH
65626: LD_INT 1
65628: PLUS
65629: ST_TO_ADDR
// end ;
65630: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65631: LD_EXP 46
65635: PUSH
65636: LD_EXP 65
65640: AND
65641: IFFALSE 65744
65643: GO 65645
65645: DISABLE
65646: LD_INT 0
65648: PPUSH
// begin for i := 1 to 5 do
65649: LD_ADDR_VAR 0 1
65653: PUSH
65654: DOUBLE
65655: LD_INT 1
65657: DEC
65658: ST_TO_ADDR
65659: LD_INT 5
65661: PUSH
65662: FOR_TO
65663: IFFALSE 65742
// begin uc_nation := nation_nature ;
65665: LD_ADDR_OWVAR 21
65669: PUSH
65670: LD_INT 0
65672: ST_TO_ADDR
// uc_side := 0 ;
65673: LD_ADDR_OWVAR 20
65677: PUSH
65678: LD_INT 0
65680: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65681: LD_ADDR_OWVAR 29
65685: PUSH
65686: LD_INT 12
65688: PUSH
65689: LD_INT 12
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: ST_TO_ADDR
// hc_agressivity := 20 ;
65696: LD_ADDR_OWVAR 35
65700: PUSH
65701: LD_INT 20
65703: ST_TO_ADDR
// hc_class := class_tiger ;
65704: LD_ADDR_OWVAR 28
65708: PUSH
65709: LD_INT 14
65711: ST_TO_ADDR
// hc_gallery :=  ;
65712: LD_ADDR_OWVAR 33
65716: PUSH
65717: LD_STRING 
65719: ST_TO_ADDR
// hc_name :=  ;
65720: LD_ADDR_OWVAR 26
65724: PUSH
65725: LD_STRING 
65727: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
65728: CALL_OW 44
65732: PPUSH
65733: LD_INT 0
65735: PPUSH
65736: CALL_OW 51
// end ;
65740: GO 65662
65742: POP
65743: POP
// end ;
65744: PPOPN 1
65746: END
// every 0 0$1 trigger StreamModeActive and sBomb do
65747: LD_EXP 46
65751: PUSH
65752: LD_EXP 66
65756: AND
65757: IFFALSE 65766
65759: GO 65761
65761: DISABLE
// StreamSibBomb ;
65762: CALL 65767 0 0
65766: END
// export function StreamSibBomb ; var i , x , y ; begin
65767: LD_INT 0
65769: PPUSH
65770: PPUSH
65771: PPUSH
65772: PPUSH
// result := false ;
65773: LD_ADDR_VAR 0 1
65777: PUSH
65778: LD_INT 0
65780: ST_TO_ADDR
// for i := 1 to 16 do
65781: LD_ADDR_VAR 0 2
65785: PUSH
65786: DOUBLE
65787: LD_INT 1
65789: DEC
65790: ST_TO_ADDR
65791: LD_INT 16
65793: PUSH
65794: FOR_TO
65795: IFFALSE 65994
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65797: LD_ADDR_VAR 0 3
65801: PUSH
65802: LD_INT 10
65804: PUSH
65805: LD_INT 20
65807: PUSH
65808: LD_INT 30
65810: PUSH
65811: LD_INT 40
65813: PUSH
65814: LD_INT 50
65816: PUSH
65817: LD_INT 60
65819: PUSH
65820: LD_INT 70
65822: PUSH
65823: LD_INT 80
65825: PUSH
65826: LD_INT 90
65828: PUSH
65829: LD_INT 100
65831: PUSH
65832: LD_INT 110
65834: PUSH
65835: LD_INT 120
65837: PUSH
65838: LD_INT 130
65840: PUSH
65841: LD_INT 140
65843: PUSH
65844: LD_INT 150
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 1
65866: PPUSH
65867: LD_INT 15
65869: PPUSH
65870: CALL_OW 12
65874: ARRAY
65875: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65876: LD_ADDR_VAR 0 4
65880: PUSH
65881: LD_INT 10
65883: PUSH
65884: LD_INT 20
65886: PUSH
65887: LD_INT 30
65889: PUSH
65890: LD_INT 40
65892: PUSH
65893: LD_INT 50
65895: PUSH
65896: LD_INT 60
65898: PUSH
65899: LD_INT 70
65901: PUSH
65902: LD_INT 80
65904: PUSH
65905: LD_INT 90
65907: PUSH
65908: LD_INT 100
65910: PUSH
65911: LD_INT 110
65913: PUSH
65914: LD_INT 120
65916: PUSH
65917: LD_INT 130
65919: PUSH
65920: LD_INT 140
65922: PUSH
65923: LD_INT 150
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 1
65945: PPUSH
65946: LD_INT 15
65948: PPUSH
65949: CALL_OW 12
65953: ARRAY
65954: ST_TO_ADDR
// if ValidHex ( x , y ) then
65955: LD_VAR 0 3
65959: PPUSH
65960: LD_VAR 0 4
65964: PPUSH
65965: CALL_OW 488
65969: IFFALSE 65992
// begin result := [ x , y ] ;
65971: LD_ADDR_VAR 0 1
65975: PUSH
65976: LD_VAR 0 3
65980: PUSH
65981: LD_VAR 0 4
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: ST_TO_ADDR
// break ;
65990: GO 65994
// end ; end ;
65992: GO 65794
65994: POP
65995: POP
// if result then
65996: LD_VAR 0 1
66000: IFFALSE 66060
// begin ToLua ( playSibBomb() ) ;
66002: LD_STRING playSibBomb()
66004: PPUSH
66005: CALL_OW 559
// wait ( 0 0$14 ) ;
66009: LD_INT 490
66011: PPUSH
66012: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
66016: LD_VAR 0 1
66020: PUSH
66021: LD_INT 1
66023: ARRAY
66024: PPUSH
66025: LD_VAR 0 1
66029: PUSH
66030: LD_INT 2
66032: ARRAY
66033: PPUSH
66034: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
66038: LD_VAR 0 1
66042: PUSH
66043: LD_INT 1
66045: ARRAY
66046: PPUSH
66047: LD_VAR 0 1
66051: PUSH
66052: LD_INT 2
66054: ARRAY
66055: PPUSH
66056: CALL_OW 429
// end ; end ;
66060: LD_VAR 0 1
66064: RET
// every 0 0$1 trigger StreamModeActive and sReset do
66065: LD_EXP 46
66069: PUSH
66070: LD_EXP 68
66074: AND
66075: IFFALSE 66087
66077: GO 66079
66079: DISABLE
// YouLost (  ) ;
66080: LD_STRING 
66082: PPUSH
66083: CALL_OW 104
66087: END
// every 0 0$1 trigger StreamModeActive and sFog do
66088: LD_EXP 46
66092: PUSH
66093: LD_EXP 67
66097: AND
66098: IFFALSE 66112
66100: GO 66102
66102: DISABLE
// FogOff ( your_side ) ;
66103: LD_OWVAR 2
66107: PPUSH
66108: CALL_OW 344
66112: END
// every 0 0$1 trigger StreamModeActive and sSun do
66113: LD_EXP 46
66117: PUSH
66118: LD_EXP 69
66122: AND
66123: IFFALSE 66151
66125: GO 66127
66127: DISABLE
// begin solar_recharge_percent := 0 ;
66128: LD_ADDR_OWVAR 79
66132: PUSH
66133: LD_INT 0
66135: ST_TO_ADDR
// wait ( 5 5$00 ) ;
66136: LD_INT 10500
66138: PPUSH
66139: CALL_OW 67
// solar_recharge_percent := 100 ;
66143: LD_ADDR_OWVAR 79
66147: PUSH
66148: LD_INT 100
66150: ST_TO_ADDR
// end ;
66151: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
66152: LD_EXP 46
66156: PUSH
66157: LD_EXP 70
66161: AND
66162: IFFALSE 66401
66164: GO 66166
66166: DISABLE
66167: LD_INT 0
66169: PPUSH
66170: PPUSH
66171: PPUSH
// begin tmp := [ ] ;
66172: LD_ADDR_VAR 0 3
66176: PUSH
66177: EMPTY
66178: ST_TO_ADDR
// for i := 1 to 6 do
66179: LD_ADDR_VAR 0 1
66183: PUSH
66184: DOUBLE
66185: LD_INT 1
66187: DEC
66188: ST_TO_ADDR
66189: LD_INT 6
66191: PUSH
66192: FOR_TO
66193: IFFALSE 66298
// begin uc_nation := nation_nature ;
66195: LD_ADDR_OWVAR 21
66199: PUSH
66200: LD_INT 0
66202: ST_TO_ADDR
// uc_side := 0 ;
66203: LD_ADDR_OWVAR 20
66207: PUSH
66208: LD_INT 0
66210: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66211: LD_ADDR_OWVAR 29
66215: PUSH
66216: LD_INT 12
66218: PUSH
66219: LD_INT 12
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: ST_TO_ADDR
// hc_agressivity := 20 ;
66226: LD_ADDR_OWVAR 35
66230: PUSH
66231: LD_INT 20
66233: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
66234: LD_ADDR_OWVAR 28
66238: PUSH
66239: LD_INT 17
66241: ST_TO_ADDR
// hc_gallery :=  ;
66242: LD_ADDR_OWVAR 33
66246: PUSH
66247: LD_STRING 
66249: ST_TO_ADDR
// hc_name :=  ;
66250: LD_ADDR_OWVAR 26
66254: PUSH
66255: LD_STRING 
66257: ST_TO_ADDR
// un := CreateHuman ;
66258: LD_ADDR_VAR 0 2
66262: PUSH
66263: CALL_OW 44
66267: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66268: LD_VAR 0 2
66272: PPUSH
66273: LD_INT 1
66275: PPUSH
66276: CALL_OW 51
// tmp := tmp ^ un ;
66280: LD_ADDR_VAR 0 3
66284: PUSH
66285: LD_VAR 0 3
66289: PUSH
66290: LD_VAR 0 2
66294: ADD
66295: ST_TO_ADDR
// end ;
66296: GO 66192
66298: POP
66299: POP
// repeat wait ( 0 0$1 ) ;
66300: LD_INT 35
66302: PPUSH
66303: CALL_OW 67
// for un in tmp do
66307: LD_ADDR_VAR 0 2
66311: PUSH
66312: LD_VAR 0 3
66316: PUSH
66317: FOR_IN
66318: IFFALSE 66392
// begin if IsDead ( un ) then
66320: LD_VAR 0 2
66324: PPUSH
66325: CALL_OW 301
66329: IFFALSE 66349
// begin tmp := tmp diff un ;
66331: LD_ADDR_VAR 0 3
66335: PUSH
66336: LD_VAR 0 3
66340: PUSH
66341: LD_VAR 0 2
66345: DIFF
66346: ST_TO_ADDR
// continue ;
66347: GO 66317
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66349: LD_VAR 0 2
66353: PPUSH
66354: LD_INT 3
66356: PUSH
66357: LD_INT 22
66359: PUSH
66360: LD_INT 0
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PPUSH
66371: CALL_OW 69
66375: PPUSH
66376: LD_VAR 0 2
66380: PPUSH
66381: CALL_OW 74
66385: PPUSH
66386: CALL_OW 115
// end ;
66390: GO 66317
66392: POP
66393: POP
// until not tmp ;
66394: LD_VAR 0 3
66398: NOT
66399: IFFALSE 66300
// end ;
66401: PPOPN 3
66403: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66404: LD_EXP 46
66408: PUSH
66409: LD_EXP 71
66413: AND
66414: IFFALSE 66468
66416: GO 66418
66418: DISABLE
// begin ToLua ( displayTroll(); ) ;
66419: LD_STRING displayTroll();
66421: PPUSH
66422: CALL_OW 559
// wait ( 3 3$00 ) ;
66426: LD_INT 6300
66428: PPUSH
66429: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66433: LD_STRING hideTroll();
66435: PPUSH
66436: CALL_OW 559
// wait ( 1 1$00 ) ;
66440: LD_INT 2100
66442: PPUSH
66443: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66447: LD_STRING displayTroll();
66449: PPUSH
66450: CALL_OW 559
// wait ( 1 1$00 ) ;
66454: LD_INT 2100
66456: PPUSH
66457: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66461: LD_STRING hideTroll();
66463: PPUSH
66464: CALL_OW 559
// end ;
66468: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66469: LD_EXP 46
66473: PUSH
66474: LD_EXP 72
66478: AND
66479: IFFALSE 66542
66481: GO 66483
66483: DISABLE
66484: LD_INT 0
66486: PPUSH
// begin p := 0 ;
66487: LD_ADDR_VAR 0 1
66491: PUSH
66492: LD_INT 0
66494: ST_TO_ADDR
// repeat game_speed := 1 ;
66495: LD_ADDR_OWVAR 65
66499: PUSH
66500: LD_INT 1
66502: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66503: LD_INT 35
66505: PPUSH
66506: CALL_OW 67
// p := p + 1 ;
66510: LD_ADDR_VAR 0 1
66514: PUSH
66515: LD_VAR 0 1
66519: PUSH
66520: LD_INT 1
66522: PLUS
66523: ST_TO_ADDR
// until p >= 60 ;
66524: LD_VAR 0 1
66528: PUSH
66529: LD_INT 60
66531: GREATEREQUAL
66532: IFFALSE 66495
// game_speed := 4 ;
66534: LD_ADDR_OWVAR 65
66538: PUSH
66539: LD_INT 4
66541: ST_TO_ADDR
// end ;
66542: PPOPN 1
66544: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66545: LD_EXP 46
66549: PUSH
66550: LD_EXP 73
66554: AND
66555: IFFALSE 66701
66557: GO 66559
66559: DISABLE
66560: LD_INT 0
66562: PPUSH
66563: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66564: LD_ADDR_VAR 0 1
66568: PUSH
66569: LD_INT 22
66571: PUSH
66572: LD_OWVAR 2
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 2
66583: PUSH
66584: LD_INT 30
66586: PUSH
66587: LD_INT 0
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 30
66596: PUSH
66597: LD_INT 1
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: LIST
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PPUSH
66613: CALL_OW 69
66617: ST_TO_ADDR
// if not depot then
66618: LD_VAR 0 1
66622: NOT
66623: IFFALSE 66627
// exit ;
66625: GO 66701
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66627: LD_ADDR_VAR 0 2
66631: PUSH
66632: LD_VAR 0 1
66636: PUSH
66637: LD_INT 1
66639: PPUSH
66640: LD_VAR 0 1
66644: PPUSH
66645: CALL_OW 12
66649: ARRAY
66650: PPUSH
66651: CALL_OW 274
66655: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
66656: LD_VAR 0 2
66660: PPUSH
66661: LD_INT 1
66663: PPUSH
66664: LD_INT 0
66666: PPUSH
66667: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
66671: LD_VAR 0 2
66675: PPUSH
66676: LD_INT 2
66678: PPUSH
66679: LD_INT 0
66681: PPUSH
66682: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
66686: LD_VAR 0 2
66690: PPUSH
66691: LD_INT 3
66693: PPUSH
66694: LD_INT 0
66696: PPUSH
66697: CALL_OW 277
// end ;
66701: PPOPN 2
66703: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
66704: LD_EXP 46
66708: PUSH
66709: LD_EXP 74
66713: AND
66714: IFFALSE 66811
66716: GO 66718
66718: DISABLE
66719: LD_INT 0
66721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66722: LD_ADDR_VAR 0 1
66726: PUSH
66727: LD_INT 22
66729: PUSH
66730: LD_OWVAR 2
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 21
66741: PUSH
66742: LD_INT 1
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 3
66751: PUSH
66752: LD_INT 23
66754: PUSH
66755: LD_INT 0
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: LIST
66770: PPUSH
66771: CALL_OW 69
66775: ST_TO_ADDR
// if not tmp then
66776: LD_VAR 0 1
66780: NOT
66781: IFFALSE 66785
// exit ;
66783: GO 66811
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66785: LD_VAR 0 1
66789: PUSH
66790: LD_INT 1
66792: PPUSH
66793: LD_VAR 0 1
66797: PPUSH
66798: CALL_OW 12
66802: ARRAY
66803: PPUSH
66804: LD_INT 200
66806: PPUSH
66807: CALL_OW 234
// end ;
66811: PPOPN 1
66813: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66814: LD_EXP 46
66818: PUSH
66819: LD_EXP 75
66823: AND
66824: IFFALSE 66903
66826: GO 66828
66828: DISABLE
66829: LD_INT 0
66831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66832: LD_ADDR_VAR 0 1
66836: PUSH
66837: LD_INT 22
66839: PUSH
66840: LD_OWVAR 2
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 21
66851: PUSH
66852: LD_INT 2
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PPUSH
66863: CALL_OW 69
66867: ST_TO_ADDR
// if not tmp then
66868: LD_VAR 0 1
66872: NOT
66873: IFFALSE 66877
// exit ;
66875: GO 66903
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66877: LD_VAR 0 1
66881: PUSH
66882: LD_INT 1
66884: PPUSH
66885: LD_VAR 0 1
66889: PPUSH
66890: CALL_OW 12
66894: ARRAY
66895: PPUSH
66896: LD_INT 60
66898: PPUSH
66899: CALL_OW 234
// end ;
66903: PPOPN 1
66905: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66906: LD_EXP 46
66910: PUSH
66911: LD_EXP 76
66915: AND
66916: IFFALSE 67015
66918: GO 66920
66920: DISABLE
66921: LD_INT 0
66923: PPUSH
66924: PPUSH
// begin enable ;
66925: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66926: LD_ADDR_VAR 0 1
66930: PUSH
66931: LD_INT 22
66933: PUSH
66934: LD_OWVAR 2
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 61
66945: PUSH
66946: EMPTY
66947: LIST
66948: PUSH
66949: LD_INT 33
66951: PUSH
66952: LD_INT 2
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: LIST
66963: PPUSH
66964: CALL_OW 69
66968: ST_TO_ADDR
// if not tmp then
66969: LD_VAR 0 1
66973: NOT
66974: IFFALSE 66978
// exit ;
66976: GO 67015
// for i in tmp do
66978: LD_ADDR_VAR 0 2
66982: PUSH
66983: LD_VAR 0 1
66987: PUSH
66988: FOR_IN
66989: IFFALSE 67013
// if IsControledBy ( i ) then
66991: LD_VAR 0 2
66995: PPUSH
66996: CALL_OW 312
67000: IFFALSE 67011
// ComUnlink ( i ) ;
67002: LD_VAR 0 2
67006: PPUSH
67007: CALL_OW 136
67011: GO 66988
67013: POP
67014: POP
// end ;
67015: PPOPN 2
67017: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
67018: LD_EXP 46
67022: PUSH
67023: LD_EXP 77
67027: AND
67028: IFFALSE 67168
67030: GO 67032
67032: DISABLE
67033: LD_INT 0
67035: PPUSH
67036: PPUSH
// begin ToLua ( displayPowell(); ) ;
67037: LD_STRING displayPowell();
67039: PPUSH
67040: CALL_OW 559
// uc_side := 0 ;
67044: LD_ADDR_OWVAR 20
67048: PUSH
67049: LD_INT 0
67051: ST_TO_ADDR
// uc_nation := 2 ;
67052: LD_ADDR_OWVAR 21
67056: PUSH
67057: LD_INT 2
67059: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
67060: LD_ADDR_OWVAR 37
67064: PUSH
67065: LD_INT 14
67067: ST_TO_ADDR
// vc_engine := engine_siberite ;
67068: LD_ADDR_OWVAR 39
67072: PUSH
67073: LD_INT 3
67075: ST_TO_ADDR
// vc_control := control_apeman ;
67076: LD_ADDR_OWVAR 38
67080: PUSH
67081: LD_INT 5
67083: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
67084: LD_ADDR_OWVAR 40
67088: PUSH
67089: LD_INT 29
67091: ST_TO_ADDR
// un := CreateVehicle ;
67092: LD_ADDR_VAR 0 2
67096: PUSH
67097: CALL_OW 45
67101: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67102: LD_VAR 0 2
67106: PPUSH
67107: LD_INT 1
67109: PPUSH
67110: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67114: LD_INT 35
67116: PPUSH
67117: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67121: LD_VAR 0 2
67125: PPUSH
67126: LD_INT 22
67128: PUSH
67129: LD_OWVAR 2
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PPUSH
67138: CALL_OW 69
67142: PPUSH
67143: LD_VAR 0 2
67147: PPUSH
67148: CALL_OW 74
67152: PPUSH
67153: CALL_OW 115
// until IsDead ( un ) ;
67157: LD_VAR 0 2
67161: PPUSH
67162: CALL_OW 301
67166: IFFALSE 67114
// end ;
67168: PPOPN 2
67170: END
// every 0 0$1 trigger StreamModeActive and sStu do
67171: LD_EXP 46
67175: PUSH
67176: LD_EXP 85
67180: AND
67181: IFFALSE 67197
67183: GO 67185
67185: DISABLE
// begin ToLua ( displayStucuk(); ) ;
67186: LD_STRING displayStucuk();
67188: PPUSH
67189: CALL_OW 559
// ResetFog ;
67193: CALL_OW 335
// end ;
67197: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
67198: LD_EXP 46
67202: PUSH
67203: LD_EXP 78
67207: AND
67208: IFFALSE 67349
67210: GO 67212
67212: DISABLE
67213: LD_INT 0
67215: PPUSH
67216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67217: LD_ADDR_VAR 0 2
67221: PUSH
67222: LD_INT 22
67224: PUSH
67225: LD_OWVAR 2
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 21
67236: PUSH
67237: LD_INT 1
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PPUSH
67248: CALL_OW 69
67252: ST_TO_ADDR
// if not tmp then
67253: LD_VAR 0 2
67257: NOT
67258: IFFALSE 67262
// exit ;
67260: GO 67349
// un := tmp [ rand ( 1 , tmp ) ] ;
67262: LD_ADDR_VAR 0 1
67266: PUSH
67267: LD_VAR 0 2
67271: PUSH
67272: LD_INT 1
67274: PPUSH
67275: LD_VAR 0 2
67279: PPUSH
67280: CALL_OW 12
67284: ARRAY
67285: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67286: LD_VAR 0 1
67290: PPUSH
67291: LD_INT 0
67293: PPUSH
67294: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67298: LD_VAR 0 1
67302: PPUSH
67303: LD_OWVAR 3
67307: PUSH
67308: LD_VAR 0 1
67312: DIFF
67313: PPUSH
67314: LD_VAR 0 1
67318: PPUSH
67319: CALL_OW 74
67323: PPUSH
67324: CALL_OW 115
// wait ( 0 0$20 ) ;
67328: LD_INT 700
67330: PPUSH
67331: CALL_OW 67
// SetSide ( un , your_side ) ;
67335: LD_VAR 0 1
67339: PPUSH
67340: LD_OWVAR 2
67344: PPUSH
67345: CALL_OW 235
// end ;
67349: PPOPN 2
67351: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67352: LD_EXP 46
67356: PUSH
67357: LD_EXP 79
67361: AND
67362: IFFALSE 67468
67364: GO 67366
67366: DISABLE
67367: LD_INT 0
67369: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67370: LD_ADDR_VAR 0 1
67374: PUSH
67375: LD_INT 22
67377: PUSH
67378: LD_OWVAR 2
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 2
67389: PUSH
67390: LD_INT 30
67392: PUSH
67393: LD_INT 0
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 30
67402: PUSH
67403: LD_INT 1
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: LIST
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PPUSH
67419: CALL_OW 69
67423: ST_TO_ADDR
// if not depot then
67424: LD_VAR 0 1
67428: NOT
67429: IFFALSE 67433
// exit ;
67431: GO 67468
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67433: LD_VAR 0 1
67437: PUSH
67438: LD_INT 1
67440: ARRAY
67441: PPUSH
67442: CALL_OW 250
67446: PPUSH
67447: LD_VAR 0 1
67451: PUSH
67452: LD_INT 1
67454: ARRAY
67455: PPUSH
67456: CALL_OW 251
67460: PPUSH
67461: LD_INT 70
67463: PPUSH
67464: CALL_OW 495
// end ;
67468: PPOPN 1
67470: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67471: LD_EXP 46
67475: PUSH
67476: LD_EXP 80
67480: AND
67481: IFFALSE 67692
67483: GO 67485
67485: DISABLE
67486: LD_INT 0
67488: PPUSH
67489: PPUSH
67490: PPUSH
67491: PPUSH
67492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67493: LD_ADDR_VAR 0 5
67497: PUSH
67498: LD_INT 22
67500: PUSH
67501: LD_OWVAR 2
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 21
67512: PUSH
67513: LD_INT 1
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PPUSH
67524: CALL_OW 69
67528: ST_TO_ADDR
// if not tmp then
67529: LD_VAR 0 5
67533: NOT
67534: IFFALSE 67538
// exit ;
67536: GO 67692
// for i in tmp do
67538: LD_ADDR_VAR 0 1
67542: PUSH
67543: LD_VAR 0 5
67547: PUSH
67548: FOR_IN
67549: IFFALSE 67690
// begin d := rand ( 0 , 5 ) ;
67551: LD_ADDR_VAR 0 4
67555: PUSH
67556: LD_INT 0
67558: PPUSH
67559: LD_INT 5
67561: PPUSH
67562: CALL_OW 12
67566: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67567: LD_ADDR_VAR 0 2
67571: PUSH
67572: LD_VAR 0 1
67576: PPUSH
67577: CALL_OW 250
67581: PPUSH
67582: LD_VAR 0 4
67586: PPUSH
67587: LD_INT 3
67589: PPUSH
67590: LD_INT 12
67592: PPUSH
67593: CALL_OW 12
67597: PPUSH
67598: CALL_OW 272
67602: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
67603: LD_ADDR_VAR 0 3
67607: PUSH
67608: LD_VAR 0 1
67612: PPUSH
67613: CALL_OW 251
67617: PPUSH
67618: LD_VAR 0 4
67622: PPUSH
67623: LD_INT 3
67625: PPUSH
67626: LD_INT 12
67628: PPUSH
67629: CALL_OW 12
67633: PPUSH
67634: CALL_OW 273
67638: ST_TO_ADDR
// if ValidHex ( x , y ) then
67639: LD_VAR 0 2
67643: PPUSH
67644: LD_VAR 0 3
67648: PPUSH
67649: CALL_OW 488
67653: IFFALSE 67688
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
67655: LD_VAR 0 1
67659: PPUSH
67660: LD_VAR 0 2
67664: PPUSH
67665: LD_VAR 0 3
67669: PPUSH
67670: LD_INT 3
67672: PPUSH
67673: LD_INT 6
67675: PPUSH
67676: CALL_OW 12
67680: PPUSH
67681: LD_INT 1
67683: PPUSH
67684: CALL_OW 483
// end ;
67688: GO 67548
67690: POP
67691: POP
// end ;
67692: PPOPN 5
67694: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
67695: LD_EXP 46
67699: PUSH
67700: LD_EXP 81
67704: AND
67705: IFFALSE 67799
67707: GO 67709
67709: DISABLE
67710: LD_INT 0
67712: PPUSH
67713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
67714: LD_ADDR_VAR 0 2
67718: PUSH
67719: LD_INT 22
67721: PUSH
67722: LD_OWVAR 2
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 32
67733: PUSH
67734: LD_INT 1
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 21
67743: PUSH
67744: LD_INT 2
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: LIST
67755: PPUSH
67756: CALL_OW 69
67760: ST_TO_ADDR
// if not tmp then
67761: LD_VAR 0 2
67765: NOT
67766: IFFALSE 67770
// exit ;
67768: GO 67799
// for i in tmp do
67770: LD_ADDR_VAR 0 1
67774: PUSH
67775: LD_VAR 0 2
67779: PUSH
67780: FOR_IN
67781: IFFALSE 67797
// SetFuel ( i , 0 ) ;
67783: LD_VAR 0 1
67787: PPUSH
67788: LD_INT 0
67790: PPUSH
67791: CALL_OW 240
67795: GO 67780
67797: POP
67798: POP
// end ;
67799: PPOPN 2
67801: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67802: LD_EXP 46
67806: PUSH
67807: LD_EXP 82
67811: AND
67812: IFFALSE 67878
67814: GO 67816
67816: DISABLE
67817: LD_INT 0
67819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67820: LD_ADDR_VAR 0 1
67824: PUSH
67825: LD_INT 22
67827: PUSH
67828: LD_OWVAR 2
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 30
67839: PUSH
67840: LD_INT 29
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PPUSH
67851: CALL_OW 69
67855: ST_TO_ADDR
// if not tmp then
67856: LD_VAR 0 1
67860: NOT
67861: IFFALSE 67865
// exit ;
67863: GO 67878
// DestroyUnit ( tmp [ 1 ] ) ;
67865: LD_VAR 0 1
67869: PUSH
67870: LD_INT 1
67872: ARRAY
67873: PPUSH
67874: CALL_OW 65
// end ;
67878: PPOPN 1
67880: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67881: LD_EXP 46
67885: PUSH
67886: LD_EXP 84
67890: AND
67891: IFFALSE 68020
67893: GO 67895
67895: DISABLE
67896: LD_INT 0
67898: PPUSH
// begin uc_side := 0 ;
67899: LD_ADDR_OWVAR 20
67903: PUSH
67904: LD_INT 0
67906: ST_TO_ADDR
// uc_nation := nation_arabian ;
67907: LD_ADDR_OWVAR 21
67911: PUSH
67912: LD_INT 2
67914: ST_TO_ADDR
// hc_gallery :=  ;
67915: LD_ADDR_OWVAR 33
67919: PUSH
67920: LD_STRING 
67922: ST_TO_ADDR
// hc_name :=  ;
67923: LD_ADDR_OWVAR 26
67927: PUSH
67928: LD_STRING 
67930: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67931: LD_INT 1
67933: PPUSH
67934: LD_INT 11
67936: PPUSH
67937: LD_INT 10
67939: PPUSH
67940: CALL_OW 380
// un := CreateHuman ;
67944: LD_ADDR_VAR 0 1
67948: PUSH
67949: CALL_OW 44
67953: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67954: LD_VAR 0 1
67958: PPUSH
67959: LD_INT 1
67961: PPUSH
67962: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67966: LD_INT 35
67968: PPUSH
67969: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67973: LD_VAR 0 1
67977: PPUSH
67978: LD_INT 22
67980: PUSH
67981: LD_OWVAR 2
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PPUSH
67990: CALL_OW 69
67994: PPUSH
67995: LD_VAR 0 1
67999: PPUSH
68000: CALL_OW 74
68004: PPUSH
68005: CALL_OW 115
// until IsDead ( un ) ;
68009: LD_VAR 0 1
68013: PPUSH
68014: CALL_OW 301
68018: IFFALSE 67966
// end ;
68020: PPOPN 1
68022: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
68023: LD_EXP 46
68027: PUSH
68028: LD_EXP 86
68032: AND
68033: IFFALSE 68045
68035: GO 68037
68037: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
68038: LD_STRING earthquake(getX(game), 0, 32)
68040: PPUSH
68041: CALL_OW 559
68045: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
68046: LD_EXP 46
68050: PUSH
68051: LD_EXP 87
68055: AND
68056: IFFALSE 68147
68058: GO 68060
68060: DISABLE
68061: LD_INT 0
68063: PPUSH
// begin enable ;
68064: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
68065: LD_ADDR_VAR 0 1
68069: PUSH
68070: LD_INT 22
68072: PUSH
68073: LD_OWVAR 2
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 21
68084: PUSH
68085: LD_INT 2
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 33
68094: PUSH
68095: LD_INT 3
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: LIST
68106: PPUSH
68107: CALL_OW 69
68111: ST_TO_ADDR
// if not tmp then
68112: LD_VAR 0 1
68116: NOT
68117: IFFALSE 68121
// exit ;
68119: GO 68147
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68121: LD_VAR 0 1
68125: PUSH
68126: LD_INT 1
68128: PPUSH
68129: LD_VAR 0 1
68133: PPUSH
68134: CALL_OW 12
68138: ARRAY
68139: PPUSH
68140: LD_INT 1
68142: PPUSH
68143: CALL_OW 234
// end ;
68147: PPOPN 1
68149: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
68150: LD_EXP 46
68154: PUSH
68155: LD_EXP 88
68159: AND
68160: IFFALSE 68301
68162: GO 68164
68164: DISABLE
68165: LD_INT 0
68167: PPUSH
68168: PPUSH
68169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68170: LD_ADDR_VAR 0 3
68174: PUSH
68175: LD_INT 22
68177: PUSH
68178: LD_OWVAR 2
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 25
68189: PUSH
68190: LD_INT 1
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PPUSH
68201: CALL_OW 69
68205: ST_TO_ADDR
// if not tmp then
68206: LD_VAR 0 3
68210: NOT
68211: IFFALSE 68215
// exit ;
68213: GO 68301
// un := tmp [ rand ( 1 , tmp ) ] ;
68215: LD_ADDR_VAR 0 2
68219: PUSH
68220: LD_VAR 0 3
68224: PUSH
68225: LD_INT 1
68227: PPUSH
68228: LD_VAR 0 3
68232: PPUSH
68233: CALL_OW 12
68237: ARRAY
68238: ST_TO_ADDR
// if Crawls ( un ) then
68239: LD_VAR 0 2
68243: PPUSH
68244: CALL_OW 318
68248: IFFALSE 68259
// ComWalk ( un ) ;
68250: LD_VAR 0 2
68254: PPUSH
68255: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
68259: LD_VAR 0 2
68263: PPUSH
68264: LD_INT 9
68266: PPUSH
68267: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68271: LD_INT 28
68273: PPUSH
68274: LD_OWVAR 2
68278: PPUSH
68279: LD_INT 2
68281: PPUSH
68282: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68286: LD_INT 29
68288: PPUSH
68289: LD_OWVAR 2
68293: PPUSH
68294: LD_INT 2
68296: PPUSH
68297: CALL_OW 322
// end ;
68301: PPOPN 3
68303: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68304: LD_EXP 46
68308: PUSH
68309: LD_EXP 89
68313: AND
68314: IFFALSE 68425
68316: GO 68318
68318: DISABLE
68319: LD_INT 0
68321: PPUSH
68322: PPUSH
68323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68324: LD_ADDR_VAR 0 3
68328: PUSH
68329: LD_INT 22
68331: PUSH
68332: LD_OWVAR 2
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 25
68343: PUSH
68344: LD_INT 1
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PPUSH
68355: CALL_OW 69
68359: ST_TO_ADDR
// if not tmp then
68360: LD_VAR 0 3
68364: NOT
68365: IFFALSE 68369
// exit ;
68367: GO 68425
// un := tmp [ rand ( 1 , tmp ) ] ;
68369: LD_ADDR_VAR 0 2
68373: PUSH
68374: LD_VAR 0 3
68378: PUSH
68379: LD_INT 1
68381: PPUSH
68382: LD_VAR 0 3
68386: PPUSH
68387: CALL_OW 12
68391: ARRAY
68392: ST_TO_ADDR
// if Crawls ( un ) then
68393: LD_VAR 0 2
68397: PPUSH
68398: CALL_OW 318
68402: IFFALSE 68413
// ComWalk ( un ) ;
68404: LD_VAR 0 2
68408: PPUSH
68409: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68413: LD_VAR 0 2
68417: PPUSH
68418: LD_INT 8
68420: PPUSH
68421: CALL_OW 336
// end ;
68425: PPOPN 3
68427: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68428: LD_EXP 46
68432: PUSH
68433: LD_EXP 90
68437: AND
68438: IFFALSE 68582
68440: GO 68442
68442: DISABLE
68443: LD_INT 0
68445: PPUSH
68446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68447: LD_ADDR_VAR 0 2
68451: PUSH
68452: LD_INT 22
68454: PUSH
68455: LD_OWVAR 2
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 21
68466: PUSH
68467: LD_INT 2
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 2
68476: PUSH
68477: LD_INT 34
68479: PUSH
68480: LD_INT 12
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 34
68489: PUSH
68490: LD_INT 51
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 34
68499: PUSH
68500: LD_INT 32
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: LIST
68517: PPUSH
68518: CALL_OW 69
68522: ST_TO_ADDR
// if not tmp then
68523: LD_VAR 0 2
68527: NOT
68528: IFFALSE 68532
// exit ;
68530: GO 68582
// for i in tmp do
68532: LD_ADDR_VAR 0 1
68536: PUSH
68537: LD_VAR 0 2
68541: PUSH
68542: FOR_IN
68543: IFFALSE 68580
// if GetCargo ( i , mat_artifact ) = 0 then
68545: LD_VAR 0 1
68549: PPUSH
68550: LD_INT 4
68552: PPUSH
68553: CALL_OW 289
68557: PUSH
68558: LD_INT 0
68560: EQUAL
68561: IFFALSE 68578
// SetCargo ( i , mat_siberit , 100 ) ;
68563: LD_VAR 0 1
68567: PPUSH
68568: LD_INT 3
68570: PPUSH
68571: LD_INT 100
68573: PPUSH
68574: CALL_OW 290
68578: GO 68542
68580: POP
68581: POP
// end ;
68582: PPOPN 2
68584: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68585: LD_EXP 46
68589: PUSH
68590: LD_EXP 91
68594: AND
68595: IFFALSE 68778
68597: GO 68599
68599: DISABLE
68600: LD_INT 0
68602: PPUSH
68603: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68604: LD_ADDR_VAR 0 2
68608: PUSH
68609: LD_INT 22
68611: PUSH
68612: LD_OWVAR 2
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PPUSH
68621: CALL_OW 69
68625: ST_TO_ADDR
// if not tmp then
68626: LD_VAR 0 2
68630: NOT
68631: IFFALSE 68635
// exit ;
68633: GO 68778
// for i := 1 to 2 do
68635: LD_ADDR_VAR 0 1
68639: PUSH
68640: DOUBLE
68641: LD_INT 1
68643: DEC
68644: ST_TO_ADDR
68645: LD_INT 2
68647: PUSH
68648: FOR_TO
68649: IFFALSE 68776
// begin uc_side := your_side ;
68651: LD_ADDR_OWVAR 20
68655: PUSH
68656: LD_OWVAR 2
68660: ST_TO_ADDR
// uc_nation := nation_american ;
68661: LD_ADDR_OWVAR 21
68665: PUSH
68666: LD_INT 1
68668: ST_TO_ADDR
// vc_chassis := us_morphling ;
68669: LD_ADDR_OWVAR 37
68673: PUSH
68674: LD_INT 5
68676: ST_TO_ADDR
// vc_engine := engine_siberite ;
68677: LD_ADDR_OWVAR 39
68681: PUSH
68682: LD_INT 3
68684: ST_TO_ADDR
// vc_control := control_computer ;
68685: LD_ADDR_OWVAR 38
68689: PUSH
68690: LD_INT 3
68692: ST_TO_ADDR
// vc_weapon := us_double_laser ;
68693: LD_ADDR_OWVAR 40
68697: PUSH
68698: LD_INT 10
68700: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
68701: LD_VAR 0 2
68705: PUSH
68706: LD_INT 1
68708: ARRAY
68709: PPUSH
68710: CALL_OW 310
68714: NOT
68715: IFFALSE 68762
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
68717: CALL_OW 45
68721: PPUSH
68722: LD_VAR 0 2
68726: PUSH
68727: LD_INT 1
68729: ARRAY
68730: PPUSH
68731: CALL_OW 250
68735: PPUSH
68736: LD_VAR 0 2
68740: PUSH
68741: LD_INT 1
68743: ARRAY
68744: PPUSH
68745: CALL_OW 251
68749: PPUSH
68750: LD_INT 12
68752: PPUSH
68753: LD_INT 1
68755: PPUSH
68756: CALL_OW 50
68760: GO 68774
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
68762: CALL_OW 45
68766: PPUSH
68767: LD_INT 1
68769: PPUSH
68770: CALL_OW 51
// end ;
68774: GO 68648
68776: POP
68777: POP
// end ;
68778: PPOPN 2
68780: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68781: LD_EXP 46
68785: PUSH
68786: LD_EXP 92
68790: AND
68791: IFFALSE 69013
68793: GO 68795
68795: DISABLE
68796: LD_INT 0
68798: PPUSH
68799: PPUSH
68800: PPUSH
68801: PPUSH
68802: PPUSH
68803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68804: LD_ADDR_VAR 0 6
68808: PUSH
68809: LD_INT 22
68811: PUSH
68812: LD_OWVAR 2
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 21
68823: PUSH
68824: LD_INT 1
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 3
68833: PUSH
68834: LD_INT 23
68836: PUSH
68837: LD_INT 0
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: LIST
68852: PPUSH
68853: CALL_OW 69
68857: ST_TO_ADDR
// if not tmp then
68858: LD_VAR 0 6
68862: NOT
68863: IFFALSE 68867
// exit ;
68865: GO 69013
// s1 := rand ( 1 , 4 ) ;
68867: LD_ADDR_VAR 0 2
68871: PUSH
68872: LD_INT 1
68874: PPUSH
68875: LD_INT 4
68877: PPUSH
68878: CALL_OW 12
68882: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68883: LD_ADDR_VAR 0 4
68887: PUSH
68888: LD_VAR 0 6
68892: PUSH
68893: LD_INT 1
68895: ARRAY
68896: PPUSH
68897: LD_VAR 0 2
68901: PPUSH
68902: CALL_OW 259
68906: ST_TO_ADDR
// if s1 = 1 then
68907: LD_VAR 0 2
68911: PUSH
68912: LD_INT 1
68914: EQUAL
68915: IFFALSE 68935
// s2 := rand ( 2 , 4 ) else
68917: LD_ADDR_VAR 0 3
68921: PUSH
68922: LD_INT 2
68924: PPUSH
68925: LD_INT 4
68927: PPUSH
68928: CALL_OW 12
68932: ST_TO_ADDR
68933: GO 68943
// s2 := 1 ;
68935: LD_ADDR_VAR 0 3
68939: PUSH
68940: LD_INT 1
68942: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68943: LD_ADDR_VAR 0 5
68947: PUSH
68948: LD_VAR 0 6
68952: PUSH
68953: LD_INT 1
68955: ARRAY
68956: PPUSH
68957: LD_VAR 0 3
68961: PPUSH
68962: CALL_OW 259
68966: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
68967: LD_VAR 0 6
68971: PUSH
68972: LD_INT 1
68974: ARRAY
68975: PPUSH
68976: LD_VAR 0 2
68980: PPUSH
68981: LD_VAR 0 5
68985: PPUSH
68986: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
68990: LD_VAR 0 6
68994: PUSH
68995: LD_INT 1
68997: ARRAY
68998: PPUSH
68999: LD_VAR 0 3
69003: PPUSH
69004: LD_VAR 0 4
69008: PPUSH
69009: CALL_OW 237
// end ;
69013: PPOPN 6
69015: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
69016: LD_EXP 46
69020: PUSH
69021: LD_EXP 93
69025: AND
69026: IFFALSE 69105
69028: GO 69030
69030: DISABLE
69031: LD_INT 0
69033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
69034: LD_ADDR_VAR 0 1
69038: PUSH
69039: LD_INT 22
69041: PUSH
69042: LD_OWVAR 2
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 30
69053: PUSH
69054: LD_INT 3
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PPUSH
69065: CALL_OW 69
69069: ST_TO_ADDR
// if not tmp then
69070: LD_VAR 0 1
69074: NOT
69075: IFFALSE 69079
// exit ;
69077: GO 69105
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69079: LD_VAR 0 1
69083: PUSH
69084: LD_INT 1
69086: PPUSH
69087: LD_VAR 0 1
69091: PPUSH
69092: CALL_OW 12
69096: ARRAY
69097: PPUSH
69098: LD_INT 1
69100: PPUSH
69101: CALL_OW 234
// end ;
69105: PPOPN 1
69107: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
69108: LD_EXP 46
69112: PUSH
69113: LD_EXP 94
69117: AND
69118: IFFALSE 69230
69120: GO 69122
69122: DISABLE
69123: LD_INT 0
69125: PPUSH
69126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
69127: LD_ADDR_VAR 0 2
69131: PUSH
69132: LD_INT 22
69134: PUSH
69135: LD_OWVAR 2
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 2
69146: PUSH
69147: LD_INT 30
69149: PUSH
69150: LD_INT 27
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 30
69159: PUSH
69160: LD_INT 26
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 30
69169: PUSH
69170: LD_INT 28
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PPUSH
69187: CALL_OW 69
69191: ST_TO_ADDR
// if not tmp then
69192: LD_VAR 0 2
69196: NOT
69197: IFFALSE 69201
// exit ;
69199: GO 69230
// for i in tmp do
69201: LD_ADDR_VAR 0 1
69205: PUSH
69206: LD_VAR 0 2
69210: PUSH
69211: FOR_IN
69212: IFFALSE 69228
// SetLives ( i , 1 ) ;
69214: LD_VAR 0 1
69218: PPUSH
69219: LD_INT 1
69221: PPUSH
69222: CALL_OW 234
69226: GO 69211
69228: POP
69229: POP
// end ;
69230: PPOPN 2
69232: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
69233: LD_EXP 46
69237: PUSH
69238: LD_EXP 95
69242: AND
69243: IFFALSE 69530
69245: GO 69247
69247: DISABLE
69248: LD_INT 0
69250: PPUSH
69251: PPUSH
69252: PPUSH
// begin i := rand ( 1 , 7 ) ;
69253: LD_ADDR_VAR 0 1
69257: PUSH
69258: LD_INT 1
69260: PPUSH
69261: LD_INT 7
69263: PPUSH
69264: CALL_OW 12
69268: ST_TO_ADDR
// case i of 1 :
69269: LD_VAR 0 1
69273: PUSH
69274: LD_INT 1
69276: DOUBLE
69277: EQUAL
69278: IFTRUE 69282
69280: GO 69292
69282: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69283: LD_STRING earthquake(getX(game), 0, 32)
69285: PPUSH
69286: CALL_OW 559
69290: GO 69530
69292: LD_INT 2
69294: DOUBLE
69295: EQUAL
69296: IFTRUE 69300
69298: GO 69314
69300: POP
// begin ToLua ( displayStucuk(); ) ;
69301: LD_STRING displayStucuk();
69303: PPUSH
69304: CALL_OW 559
// ResetFog ;
69308: CALL_OW 335
// end ; 3 :
69312: GO 69530
69314: LD_INT 3
69316: DOUBLE
69317: EQUAL
69318: IFTRUE 69322
69320: GO 69426
69322: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69323: LD_ADDR_VAR 0 2
69327: PUSH
69328: LD_INT 22
69330: PUSH
69331: LD_OWVAR 2
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 25
69342: PUSH
69343: LD_INT 1
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PPUSH
69354: CALL_OW 69
69358: ST_TO_ADDR
// if not tmp then
69359: LD_VAR 0 2
69363: NOT
69364: IFFALSE 69368
// exit ;
69366: GO 69530
// un := tmp [ rand ( 1 , tmp ) ] ;
69368: LD_ADDR_VAR 0 3
69372: PUSH
69373: LD_VAR 0 2
69377: PUSH
69378: LD_INT 1
69380: PPUSH
69381: LD_VAR 0 2
69385: PPUSH
69386: CALL_OW 12
69390: ARRAY
69391: ST_TO_ADDR
// if Crawls ( un ) then
69392: LD_VAR 0 3
69396: PPUSH
69397: CALL_OW 318
69401: IFFALSE 69412
// ComWalk ( un ) ;
69403: LD_VAR 0 3
69407: PPUSH
69408: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69412: LD_VAR 0 3
69416: PPUSH
69417: LD_INT 8
69419: PPUSH
69420: CALL_OW 336
// end ; 4 :
69424: GO 69530
69426: LD_INT 4
69428: DOUBLE
69429: EQUAL
69430: IFTRUE 69434
69432: GO 69508
69434: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69435: LD_ADDR_VAR 0 2
69439: PUSH
69440: LD_INT 22
69442: PUSH
69443: LD_OWVAR 2
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 30
69454: PUSH
69455: LD_INT 29
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PPUSH
69466: CALL_OW 69
69470: ST_TO_ADDR
// if not tmp then
69471: LD_VAR 0 2
69475: NOT
69476: IFFALSE 69480
// exit ;
69478: GO 69530
// CenterNowOnUnits ( tmp [ 1 ] ) ;
69480: LD_VAR 0 2
69484: PUSH
69485: LD_INT 1
69487: ARRAY
69488: PPUSH
69489: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
69493: LD_VAR 0 2
69497: PUSH
69498: LD_INT 1
69500: ARRAY
69501: PPUSH
69502: CALL_OW 65
// end ; 5 .. 7 :
69506: GO 69530
69508: LD_INT 5
69510: DOUBLE
69511: GREATEREQUAL
69512: IFFALSE 69520
69514: LD_INT 7
69516: DOUBLE
69517: LESSEQUAL
69518: IFTRUE 69522
69520: GO 69529
69522: POP
// StreamSibBomb ; end ;
69523: CALL 65767 0 0
69527: GO 69530
69529: POP
// end ;
69530: PPOPN 3
69532: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69533: LD_EXP 46
69537: PUSH
69538: LD_EXP 96
69542: AND
69543: IFFALSE 69699
69545: GO 69547
69547: DISABLE
69548: LD_INT 0
69550: PPUSH
69551: PPUSH
69552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69553: LD_ADDR_VAR 0 2
69557: PUSH
69558: LD_INT 81
69560: PUSH
69561: LD_OWVAR 2
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 2
69572: PUSH
69573: LD_INT 21
69575: PUSH
69576: LD_INT 1
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 21
69585: PUSH
69586: LD_INT 2
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: LIST
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PPUSH
69602: CALL_OW 69
69606: ST_TO_ADDR
// if not tmp then
69607: LD_VAR 0 2
69611: NOT
69612: IFFALSE 69616
// exit ;
69614: GO 69699
// p := 0 ;
69616: LD_ADDR_VAR 0 3
69620: PUSH
69621: LD_INT 0
69623: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69624: LD_INT 35
69626: PPUSH
69627: CALL_OW 67
// p := p + 1 ;
69631: LD_ADDR_VAR 0 3
69635: PUSH
69636: LD_VAR 0 3
69640: PUSH
69641: LD_INT 1
69643: PLUS
69644: ST_TO_ADDR
// for i in tmp do
69645: LD_ADDR_VAR 0 1
69649: PUSH
69650: LD_VAR 0 2
69654: PUSH
69655: FOR_IN
69656: IFFALSE 69687
// if GetLives ( i ) < 1000 then
69658: LD_VAR 0 1
69662: PPUSH
69663: CALL_OW 256
69667: PUSH
69668: LD_INT 1000
69670: LESS
69671: IFFALSE 69685
// SetLives ( i , 1000 ) ;
69673: LD_VAR 0 1
69677: PPUSH
69678: LD_INT 1000
69680: PPUSH
69681: CALL_OW 234
69685: GO 69655
69687: POP
69688: POP
// until p > 20 ;
69689: LD_VAR 0 3
69693: PUSH
69694: LD_INT 20
69696: GREATER
69697: IFFALSE 69624
// end ;
69699: PPOPN 3
69701: END
// every 0 0$1 trigger StreamModeActive and sTime do
69702: LD_EXP 46
69706: PUSH
69707: LD_EXP 97
69711: AND
69712: IFFALSE 69747
69714: GO 69716
69716: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
69717: LD_INT 28
69719: PPUSH
69720: LD_OWVAR 2
69724: PPUSH
69725: LD_INT 2
69727: PPUSH
69728: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
69732: LD_INT 30
69734: PPUSH
69735: LD_OWVAR 2
69739: PPUSH
69740: LD_INT 2
69742: PPUSH
69743: CALL_OW 322
// end ;
69747: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
69748: LD_EXP 46
69752: PUSH
69753: LD_EXP 98
69757: AND
69758: IFFALSE 69879
69760: GO 69762
69762: DISABLE
69763: LD_INT 0
69765: PPUSH
69766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69767: LD_ADDR_VAR 0 2
69771: PUSH
69772: LD_INT 22
69774: PUSH
69775: LD_OWVAR 2
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_INT 21
69786: PUSH
69787: LD_INT 1
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 3
69796: PUSH
69797: LD_INT 23
69799: PUSH
69800: LD_INT 0
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: LIST
69815: PPUSH
69816: CALL_OW 69
69820: ST_TO_ADDR
// if not tmp then
69821: LD_VAR 0 2
69825: NOT
69826: IFFALSE 69830
// exit ;
69828: GO 69879
// for i in tmp do
69830: LD_ADDR_VAR 0 1
69834: PUSH
69835: LD_VAR 0 2
69839: PUSH
69840: FOR_IN
69841: IFFALSE 69877
// begin if Crawls ( i ) then
69843: LD_VAR 0 1
69847: PPUSH
69848: CALL_OW 318
69852: IFFALSE 69863
// ComWalk ( i ) ;
69854: LD_VAR 0 1
69858: PPUSH
69859: CALL_OW 138
// SetClass ( i , 2 ) ;
69863: LD_VAR 0 1
69867: PPUSH
69868: LD_INT 2
69870: PPUSH
69871: CALL_OW 336
// end ;
69875: GO 69840
69877: POP
69878: POP
// end ;
69879: PPOPN 2
69881: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69882: LD_EXP 46
69886: PUSH
69887: LD_EXP 99
69891: AND
69892: IFFALSE 70180
69894: GO 69896
69896: DISABLE
69897: LD_INT 0
69899: PPUSH
69900: PPUSH
69901: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69902: LD_OWVAR 2
69906: PPUSH
69907: LD_INT 9
69909: PPUSH
69910: LD_INT 1
69912: PPUSH
69913: LD_INT 1
69915: PPUSH
69916: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69920: LD_INT 9
69922: PPUSH
69923: LD_OWVAR 2
69927: PPUSH
69928: CALL_OW 343
// uc_side := 9 ;
69932: LD_ADDR_OWVAR 20
69936: PUSH
69937: LD_INT 9
69939: ST_TO_ADDR
// uc_nation := 2 ;
69940: LD_ADDR_OWVAR 21
69944: PUSH
69945: LD_INT 2
69947: ST_TO_ADDR
// hc_name := Dark Warrior ;
69948: LD_ADDR_OWVAR 26
69952: PUSH
69953: LD_STRING Dark Warrior
69955: ST_TO_ADDR
// hc_gallery :=  ;
69956: LD_ADDR_OWVAR 33
69960: PUSH
69961: LD_STRING 
69963: ST_TO_ADDR
// hc_noskilllimit := true ;
69964: LD_ADDR_OWVAR 76
69968: PUSH
69969: LD_INT 1
69971: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
69972: LD_ADDR_OWVAR 31
69976: PUSH
69977: LD_INT 30
69979: PUSH
69980: LD_INT 30
69982: PUSH
69983: LD_INT 30
69985: PUSH
69986: LD_INT 30
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: ST_TO_ADDR
// un := CreateHuman ;
69995: LD_ADDR_VAR 0 3
69999: PUSH
70000: CALL_OW 44
70004: ST_TO_ADDR
// hc_noskilllimit := false ;
70005: LD_ADDR_OWVAR 76
70009: PUSH
70010: LD_INT 0
70012: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70013: LD_VAR 0 3
70017: PPUSH
70018: LD_INT 1
70020: PPUSH
70021: CALL_OW 51
// ToLua ( playRanger() ) ;
70025: LD_STRING playRanger()
70027: PPUSH
70028: CALL_OW 559
// p := 0 ;
70032: LD_ADDR_VAR 0 2
70036: PUSH
70037: LD_INT 0
70039: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70040: LD_INT 35
70042: PPUSH
70043: CALL_OW 67
// p := p + 1 ;
70047: LD_ADDR_VAR 0 2
70051: PUSH
70052: LD_VAR 0 2
70056: PUSH
70057: LD_INT 1
70059: PLUS
70060: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
70061: LD_VAR 0 3
70065: PPUSH
70066: CALL_OW 256
70070: PUSH
70071: LD_INT 1000
70073: LESS
70074: IFFALSE 70088
// SetLives ( un , 1000 ) ;
70076: LD_VAR 0 3
70080: PPUSH
70081: LD_INT 1000
70083: PPUSH
70084: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
70088: LD_VAR 0 3
70092: PPUSH
70093: LD_INT 81
70095: PUSH
70096: LD_OWVAR 2
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: LD_INT 91
70107: PUSH
70108: LD_VAR 0 3
70112: PUSH
70113: LD_INT 30
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: LIST
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PPUSH
70125: CALL_OW 69
70129: PPUSH
70130: LD_VAR 0 3
70134: PPUSH
70135: CALL_OW 74
70139: PPUSH
70140: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
70144: LD_VAR 0 2
70148: PUSH
70149: LD_INT 80
70151: GREATER
70152: PUSH
70153: LD_VAR 0 3
70157: PPUSH
70158: CALL_OW 301
70162: OR
70163: IFFALSE 70040
// if un then
70165: LD_VAR 0 3
70169: IFFALSE 70180
// RemoveUnit ( un ) ;
70171: LD_VAR 0 3
70175: PPUSH
70176: CALL_OW 64
// end ;
70180: PPOPN 3
70182: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
70183: LD_EXP 100
70187: IFFALSE 70303
70189: GO 70191
70191: DISABLE
70192: LD_INT 0
70194: PPUSH
70195: PPUSH
70196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70197: LD_ADDR_VAR 0 2
70201: PUSH
70202: LD_INT 81
70204: PUSH
70205: LD_OWVAR 2
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 21
70216: PUSH
70217: LD_INT 1
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PPUSH
70228: CALL_OW 69
70232: ST_TO_ADDR
// ToLua ( playComputer() ) ;
70233: LD_STRING playComputer()
70235: PPUSH
70236: CALL_OW 559
// if not tmp then
70240: LD_VAR 0 2
70244: NOT
70245: IFFALSE 70249
// exit ;
70247: GO 70303
// for i in tmp do
70249: LD_ADDR_VAR 0 1
70253: PUSH
70254: LD_VAR 0 2
70258: PUSH
70259: FOR_IN
70260: IFFALSE 70301
// for j := 1 to 4 do
70262: LD_ADDR_VAR 0 3
70266: PUSH
70267: DOUBLE
70268: LD_INT 1
70270: DEC
70271: ST_TO_ADDR
70272: LD_INT 4
70274: PUSH
70275: FOR_TO
70276: IFFALSE 70297
// SetSkill ( i , j , 10 ) ;
70278: LD_VAR 0 1
70282: PPUSH
70283: LD_VAR 0 3
70287: PPUSH
70288: LD_INT 10
70290: PPUSH
70291: CALL_OW 237
70295: GO 70275
70297: POP
70298: POP
70299: GO 70259
70301: POP
70302: POP
// end ;
70303: PPOPN 3
70305: END
// every 0 0$1 trigger s30 do var i , tmp ;
70306: LD_EXP 101
70310: IFFALSE 70379
70312: GO 70314
70314: DISABLE
70315: LD_INT 0
70317: PPUSH
70318: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70319: LD_ADDR_VAR 0 2
70323: PUSH
70324: LD_INT 22
70326: PUSH
70327: LD_OWVAR 2
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PPUSH
70336: CALL_OW 69
70340: ST_TO_ADDR
// if not tmp then
70341: LD_VAR 0 2
70345: NOT
70346: IFFALSE 70350
// exit ;
70348: GO 70379
// for i in tmp do
70350: LD_ADDR_VAR 0 1
70354: PUSH
70355: LD_VAR 0 2
70359: PUSH
70360: FOR_IN
70361: IFFALSE 70377
// SetLives ( i , 300 ) ;
70363: LD_VAR 0 1
70367: PPUSH
70368: LD_INT 300
70370: PPUSH
70371: CALL_OW 234
70375: GO 70360
70377: POP
70378: POP
// end ;
70379: PPOPN 2
70381: END
// every 0 0$1 trigger s60 do var i , tmp ;
70382: LD_EXP 102
70386: IFFALSE 70455
70388: GO 70390
70390: DISABLE
70391: LD_INT 0
70393: PPUSH
70394: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70395: LD_ADDR_VAR 0 2
70399: PUSH
70400: LD_INT 22
70402: PUSH
70403: LD_OWVAR 2
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PPUSH
70412: CALL_OW 69
70416: ST_TO_ADDR
// if not tmp then
70417: LD_VAR 0 2
70421: NOT
70422: IFFALSE 70426
// exit ;
70424: GO 70455
// for i in tmp do
70426: LD_ADDR_VAR 0 1
70430: PUSH
70431: LD_VAR 0 2
70435: PUSH
70436: FOR_IN
70437: IFFALSE 70453
// SetLives ( i , 600 ) ;
70439: LD_VAR 0 1
70443: PPUSH
70444: LD_INT 600
70446: PPUSH
70447: CALL_OW 234
70451: GO 70436
70453: POP
70454: POP
// end ;
70455: PPOPN 2
70457: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70458: LD_INT 0
70460: PPUSH
// case cmd of 301 :
70461: LD_VAR 0 1
70465: PUSH
70466: LD_INT 301
70468: DOUBLE
70469: EQUAL
70470: IFTRUE 70474
70472: GO 70506
70474: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70475: LD_VAR 0 6
70479: PPUSH
70480: LD_VAR 0 7
70484: PPUSH
70485: LD_VAR 0 8
70489: PPUSH
70490: LD_VAR 0 4
70494: PPUSH
70495: LD_VAR 0 5
70499: PPUSH
70500: CALL 71715 0 5
70504: GO 70627
70506: LD_INT 302
70508: DOUBLE
70509: EQUAL
70510: IFTRUE 70514
70512: GO 70551
70514: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
70515: LD_VAR 0 6
70519: PPUSH
70520: LD_VAR 0 7
70524: PPUSH
70525: LD_VAR 0 8
70529: PPUSH
70530: LD_VAR 0 9
70534: PPUSH
70535: LD_VAR 0 4
70539: PPUSH
70540: LD_VAR 0 5
70544: PPUSH
70545: CALL 71806 0 6
70549: GO 70627
70551: LD_INT 303
70553: DOUBLE
70554: EQUAL
70555: IFTRUE 70559
70557: GO 70596
70559: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70560: LD_VAR 0 6
70564: PPUSH
70565: LD_VAR 0 7
70569: PPUSH
70570: LD_VAR 0 8
70574: PPUSH
70575: LD_VAR 0 9
70579: PPUSH
70580: LD_VAR 0 4
70584: PPUSH
70585: LD_VAR 0 5
70589: PPUSH
70590: CALL 70632 0 6
70594: GO 70627
70596: LD_INT 304
70598: DOUBLE
70599: EQUAL
70600: IFTRUE 70604
70602: GO 70626
70604: POP
// hHackTeleport ( unit , x , y ) ; end ;
70605: LD_VAR 0 2
70609: PPUSH
70610: LD_VAR 0 4
70614: PPUSH
70615: LD_VAR 0 5
70619: PPUSH
70620: CALL 72399 0 3
70624: GO 70627
70626: POP
// end ;
70627: LD_VAR 0 12
70631: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
70632: LD_INT 0
70634: PPUSH
70635: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
70636: LD_VAR 0 1
70640: PUSH
70641: LD_INT 1
70643: LESS
70644: PUSH
70645: LD_VAR 0 1
70649: PUSH
70650: LD_INT 3
70652: GREATER
70653: OR
70654: PUSH
70655: LD_VAR 0 5
70659: PPUSH
70660: LD_VAR 0 6
70664: PPUSH
70665: CALL_OW 428
70669: OR
70670: IFFALSE 70674
// exit ;
70672: GO 71402
// uc_side := your_side ;
70674: LD_ADDR_OWVAR 20
70678: PUSH
70679: LD_OWVAR 2
70683: ST_TO_ADDR
// uc_nation := nation ;
70684: LD_ADDR_OWVAR 21
70688: PUSH
70689: LD_VAR 0 1
70693: ST_TO_ADDR
// bc_level = 1 ;
70694: LD_ADDR_OWVAR 43
70698: PUSH
70699: LD_INT 1
70701: ST_TO_ADDR
// case btype of 1 :
70702: LD_VAR 0 2
70706: PUSH
70707: LD_INT 1
70709: DOUBLE
70710: EQUAL
70711: IFTRUE 70715
70713: GO 70726
70715: POP
// bc_type := b_depot ; 2 :
70716: LD_ADDR_OWVAR 42
70720: PUSH
70721: LD_INT 0
70723: ST_TO_ADDR
70724: GO 71346
70726: LD_INT 2
70728: DOUBLE
70729: EQUAL
70730: IFTRUE 70734
70732: GO 70745
70734: POP
// bc_type := b_warehouse ; 3 :
70735: LD_ADDR_OWVAR 42
70739: PUSH
70740: LD_INT 1
70742: ST_TO_ADDR
70743: GO 71346
70745: LD_INT 3
70747: DOUBLE
70748: EQUAL
70749: IFTRUE 70753
70751: GO 70764
70753: POP
// bc_type := b_lab ; 4 .. 9 :
70754: LD_ADDR_OWVAR 42
70758: PUSH
70759: LD_INT 6
70761: ST_TO_ADDR
70762: GO 71346
70764: LD_INT 4
70766: DOUBLE
70767: GREATEREQUAL
70768: IFFALSE 70776
70770: LD_INT 9
70772: DOUBLE
70773: LESSEQUAL
70774: IFTRUE 70778
70776: GO 70838
70778: POP
// begin bc_type := b_lab_half ;
70779: LD_ADDR_OWVAR 42
70783: PUSH
70784: LD_INT 7
70786: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
70787: LD_ADDR_OWVAR 44
70791: PUSH
70792: LD_INT 10
70794: PUSH
70795: LD_INT 11
70797: PUSH
70798: LD_INT 12
70800: PUSH
70801: LD_INT 15
70803: PUSH
70804: LD_INT 14
70806: PUSH
70807: LD_INT 13
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: PUSH
70818: LD_VAR 0 2
70822: PUSH
70823: LD_INT 3
70825: MINUS
70826: ARRAY
70827: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
70828: LD_ADDR_OWVAR 45
70832: PUSH
70833: LD_INT 9
70835: ST_TO_ADDR
// end ; 10 .. 13 :
70836: GO 71346
70838: LD_INT 10
70840: DOUBLE
70841: GREATEREQUAL
70842: IFFALSE 70850
70844: LD_INT 13
70846: DOUBLE
70847: LESSEQUAL
70848: IFTRUE 70852
70850: GO 70929
70852: POP
// begin bc_type := b_lab_full ;
70853: LD_ADDR_OWVAR 42
70857: PUSH
70858: LD_INT 8
70860: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
70861: LD_ADDR_OWVAR 44
70865: PUSH
70866: LD_INT 10
70868: PUSH
70869: LD_INT 12
70871: PUSH
70872: LD_INT 14
70874: PUSH
70875: LD_INT 13
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: PUSH
70884: LD_VAR 0 2
70888: PUSH
70889: LD_INT 9
70891: MINUS
70892: ARRAY
70893: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
70894: LD_ADDR_OWVAR 45
70898: PUSH
70899: LD_INT 11
70901: PUSH
70902: LD_INT 15
70904: PUSH
70905: LD_INT 12
70907: PUSH
70908: LD_INT 15
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: PUSH
70917: LD_VAR 0 2
70921: PUSH
70922: LD_INT 9
70924: MINUS
70925: ARRAY
70926: ST_TO_ADDR
// end ; 14 :
70927: GO 71346
70929: LD_INT 14
70931: DOUBLE
70932: EQUAL
70933: IFTRUE 70937
70935: GO 70948
70937: POP
// bc_type := b_workshop ; 15 :
70938: LD_ADDR_OWVAR 42
70942: PUSH
70943: LD_INT 2
70945: ST_TO_ADDR
70946: GO 71346
70948: LD_INT 15
70950: DOUBLE
70951: EQUAL
70952: IFTRUE 70956
70954: GO 70967
70956: POP
// bc_type := b_factory ; 16 :
70957: LD_ADDR_OWVAR 42
70961: PUSH
70962: LD_INT 3
70964: ST_TO_ADDR
70965: GO 71346
70967: LD_INT 16
70969: DOUBLE
70970: EQUAL
70971: IFTRUE 70975
70973: GO 70986
70975: POP
// bc_type := b_ext_gun ; 17 :
70976: LD_ADDR_OWVAR 42
70980: PUSH
70981: LD_INT 17
70983: ST_TO_ADDR
70984: GO 71346
70986: LD_INT 17
70988: DOUBLE
70989: EQUAL
70990: IFTRUE 70994
70992: GO 71022
70994: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
70995: LD_ADDR_OWVAR 42
70999: PUSH
71000: LD_INT 19
71002: PUSH
71003: LD_INT 23
71005: PUSH
71006: LD_INT 19
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: LIST
71013: PUSH
71014: LD_VAR 0 1
71018: ARRAY
71019: ST_TO_ADDR
71020: GO 71346
71022: LD_INT 18
71024: DOUBLE
71025: EQUAL
71026: IFTRUE 71030
71028: GO 71041
71030: POP
// bc_type := b_ext_radar ; 19 :
71031: LD_ADDR_OWVAR 42
71035: PUSH
71036: LD_INT 20
71038: ST_TO_ADDR
71039: GO 71346
71041: LD_INT 19
71043: DOUBLE
71044: EQUAL
71045: IFTRUE 71049
71047: GO 71060
71049: POP
// bc_type := b_ext_radio ; 20 :
71050: LD_ADDR_OWVAR 42
71054: PUSH
71055: LD_INT 22
71057: ST_TO_ADDR
71058: GO 71346
71060: LD_INT 20
71062: DOUBLE
71063: EQUAL
71064: IFTRUE 71068
71066: GO 71079
71068: POP
// bc_type := b_ext_siberium ; 21 :
71069: LD_ADDR_OWVAR 42
71073: PUSH
71074: LD_INT 21
71076: ST_TO_ADDR
71077: GO 71346
71079: LD_INT 21
71081: DOUBLE
71082: EQUAL
71083: IFTRUE 71087
71085: GO 71098
71087: POP
// bc_type := b_ext_computer ; 22 :
71088: LD_ADDR_OWVAR 42
71092: PUSH
71093: LD_INT 24
71095: ST_TO_ADDR
71096: GO 71346
71098: LD_INT 22
71100: DOUBLE
71101: EQUAL
71102: IFTRUE 71106
71104: GO 71117
71106: POP
// bc_type := b_ext_track ; 23 :
71107: LD_ADDR_OWVAR 42
71111: PUSH
71112: LD_INT 16
71114: ST_TO_ADDR
71115: GO 71346
71117: LD_INT 23
71119: DOUBLE
71120: EQUAL
71121: IFTRUE 71125
71123: GO 71136
71125: POP
// bc_type := b_ext_laser ; 24 :
71126: LD_ADDR_OWVAR 42
71130: PUSH
71131: LD_INT 25
71133: ST_TO_ADDR
71134: GO 71346
71136: LD_INT 24
71138: DOUBLE
71139: EQUAL
71140: IFTRUE 71144
71142: GO 71155
71144: POP
// bc_type := b_control_tower ; 25 :
71145: LD_ADDR_OWVAR 42
71149: PUSH
71150: LD_INT 36
71152: ST_TO_ADDR
71153: GO 71346
71155: LD_INT 25
71157: DOUBLE
71158: EQUAL
71159: IFTRUE 71163
71161: GO 71174
71163: POP
// bc_type := b_breastwork ; 26 :
71164: LD_ADDR_OWVAR 42
71168: PUSH
71169: LD_INT 31
71171: ST_TO_ADDR
71172: GO 71346
71174: LD_INT 26
71176: DOUBLE
71177: EQUAL
71178: IFTRUE 71182
71180: GO 71193
71182: POP
// bc_type := b_bunker ; 27 :
71183: LD_ADDR_OWVAR 42
71187: PUSH
71188: LD_INT 32
71190: ST_TO_ADDR
71191: GO 71346
71193: LD_INT 27
71195: DOUBLE
71196: EQUAL
71197: IFTRUE 71201
71199: GO 71212
71201: POP
// bc_type := b_turret ; 28 :
71202: LD_ADDR_OWVAR 42
71206: PUSH
71207: LD_INT 33
71209: ST_TO_ADDR
71210: GO 71346
71212: LD_INT 28
71214: DOUBLE
71215: EQUAL
71216: IFTRUE 71220
71218: GO 71231
71220: POP
// bc_type := b_armoury ; 29 :
71221: LD_ADDR_OWVAR 42
71225: PUSH
71226: LD_INT 4
71228: ST_TO_ADDR
71229: GO 71346
71231: LD_INT 29
71233: DOUBLE
71234: EQUAL
71235: IFTRUE 71239
71237: GO 71250
71239: POP
// bc_type := b_barracks ; 30 :
71240: LD_ADDR_OWVAR 42
71244: PUSH
71245: LD_INT 5
71247: ST_TO_ADDR
71248: GO 71346
71250: LD_INT 30
71252: DOUBLE
71253: EQUAL
71254: IFTRUE 71258
71256: GO 71269
71258: POP
// bc_type := b_solar_power ; 31 :
71259: LD_ADDR_OWVAR 42
71263: PUSH
71264: LD_INT 27
71266: ST_TO_ADDR
71267: GO 71346
71269: LD_INT 31
71271: DOUBLE
71272: EQUAL
71273: IFTRUE 71277
71275: GO 71288
71277: POP
// bc_type := b_oil_power ; 32 :
71278: LD_ADDR_OWVAR 42
71282: PUSH
71283: LD_INT 26
71285: ST_TO_ADDR
71286: GO 71346
71288: LD_INT 32
71290: DOUBLE
71291: EQUAL
71292: IFTRUE 71296
71294: GO 71307
71296: POP
// bc_type := b_siberite_power ; 33 :
71297: LD_ADDR_OWVAR 42
71301: PUSH
71302: LD_INT 28
71304: ST_TO_ADDR
71305: GO 71346
71307: LD_INT 33
71309: DOUBLE
71310: EQUAL
71311: IFTRUE 71315
71313: GO 71326
71315: POP
// bc_type := b_oil_mine ; 34 :
71316: LD_ADDR_OWVAR 42
71320: PUSH
71321: LD_INT 29
71323: ST_TO_ADDR
71324: GO 71346
71326: LD_INT 34
71328: DOUBLE
71329: EQUAL
71330: IFTRUE 71334
71332: GO 71345
71334: POP
// bc_type := b_siberite_mine ; end ;
71335: LD_ADDR_OWVAR 42
71339: PUSH
71340: LD_INT 30
71342: ST_TO_ADDR
71343: GO 71346
71345: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
71346: LD_ADDR_VAR 0 8
71350: PUSH
71351: LD_VAR 0 5
71355: PPUSH
71356: LD_VAR 0 6
71360: PPUSH
71361: LD_VAR 0 3
71365: PPUSH
71366: CALL_OW 47
71370: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
71371: LD_OWVAR 42
71375: PUSH
71376: LD_INT 32
71378: PUSH
71379: LD_INT 33
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: IN
71386: IFFALSE 71402
// PlaceWeaponTurret ( b , weapon ) ;
71388: LD_VAR 0 8
71392: PPUSH
71393: LD_VAR 0 4
71397: PPUSH
71398: CALL_OW 431
// end ;
71402: LD_VAR 0 7
71406: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
71407: LD_INT 0
71409: PPUSH
71410: PPUSH
71411: PPUSH
71412: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71413: LD_ADDR_VAR 0 4
71417: PUSH
71418: LD_INT 22
71420: PUSH
71421: LD_OWVAR 2
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 2
71432: PUSH
71433: LD_INT 30
71435: PUSH
71436: LD_INT 0
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: LD_INT 30
71445: PUSH
71446: LD_INT 1
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: LIST
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: PPUSH
71462: CALL_OW 69
71466: ST_TO_ADDR
// if not tmp then
71467: LD_VAR 0 4
71471: NOT
71472: IFFALSE 71476
// exit ;
71474: GO 71535
// for i in tmp do
71476: LD_ADDR_VAR 0 2
71480: PUSH
71481: LD_VAR 0 4
71485: PUSH
71486: FOR_IN
71487: IFFALSE 71533
// for j = 1 to 3 do
71489: LD_ADDR_VAR 0 3
71493: PUSH
71494: DOUBLE
71495: LD_INT 1
71497: DEC
71498: ST_TO_ADDR
71499: LD_INT 3
71501: PUSH
71502: FOR_TO
71503: IFFALSE 71529
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
71505: LD_VAR 0 2
71509: PPUSH
71510: CALL_OW 274
71514: PPUSH
71515: LD_VAR 0 3
71519: PPUSH
71520: LD_INT 99999
71522: PPUSH
71523: CALL_OW 277
71527: GO 71502
71529: POP
71530: POP
71531: GO 71486
71533: POP
71534: POP
// end ;
71535: LD_VAR 0 1
71539: RET
// export function hHackSetLevel10 ; var i , j ; begin
71540: LD_INT 0
71542: PPUSH
71543: PPUSH
71544: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71545: LD_ADDR_VAR 0 2
71549: PUSH
71550: LD_INT 21
71552: PUSH
71553: LD_INT 1
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PPUSH
71560: CALL_OW 69
71564: PUSH
71565: FOR_IN
71566: IFFALSE 71618
// if IsSelected ( i ) then
71568: LD_VAR 0 2
71572: PPUSH
71573: CALL_OW 306
71577: IFFALSE 71616
// begin for j := 1 to 4 do
71579: LD_ADDR_VAR 0 3
71583: PUSH
71584: DOUBLE
71585: LD_INT 1
71587: DEC
71588: ST_TO_ADDR
71589: LD_INT 4
71591: PUSH
71592: FOR_TO
71593: IFFALSE 71614
// SetSkill ( i , j , 10 ) ;
71595: LD_VAR 0 2
71599: PPUSH
71600: LD_VAR 0 3
71604: PPUSH
71605: LD_INT 10
71607: PPUSH
71608: CALL_OW 237
71612: GO 71592
71614: POP
71615: POP
// end ;
71616: GO 71565
71618: POP
71619: POP
// end ;
71620: LD_VAR 0 1
71624: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
71625: LD_INT 0
71627: PPUSH
71628: PPUSH
71629: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
71630: LD_ADDR_VAR 0 2
71634: PUSH
71635: LD_INT 22
71637: PUSH
71638: LD_OWVAR 2
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 21
71649: PUSH
71650: LD_INT 1
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PPUSH
71661: CALL_OW 69
71665: PUSH
71666: FOR_IN
71667: IFFALSE 71708
// begin for j := 1 to 4 do
71669: LD_ADDR_VAR 0 3
71673: PUSH
71674: DOUBLE
71675: LD_INT 1
71677: DEC
71678: ST_TO_ADDR
71679: LD_INT 4
71681: PUSH
71682: FOR_TO
71683: IFFALSE 71704
// SetSkill ( i , j , 10 ) ;
71685: LD_VAR 0 2
71689: PPUSH
71690: LD_VAR 0 3
71694: PPUSH
71695: LD_INT 10
71697: PPUSH
71698: CALL_OW 237
71702: GO 71682
71704: POP
71705: POP
// end ;
71706: GO 71666
71708: POP
71709: POP
// end ;
71710: LD_VAR 0 1
71714: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
71715: LD_INT 0
71717: PPUSH
// uc_side := your_side ;
71718: LD_ADDR_OWVAR 20
71722: PUSH
71723: LD_OWVAR 2
71727: ST_TO_ADDR
// uc_nation := nation ;
71728: LD_ADDR_OWVAR 21
71732: PUSH
71733: LD_VAR 0 1
71737: ST_TO_ADDR
// InitHc ;
71738: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
71742: LD_INT 0
71744: PPUSH
71745: LD_VAR 0 2
71749: PPUSH
71750: LD_VAR 0 3
71754: PPUSH
71755: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
71759: LD_VAR 0 4
71763: PPUSH
71764: LD_VAR 0 5
71768: PPUSH
71769: CALL_OW 428
71773: PUSH
71774: LD_INT 0
71776: EQUAL
71777: IFFALSE 71801
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
71779: CALL_OW 44
71783: PPUSH
71784: LD_VAR 0 4
71788: PPUSH
71789: LD_VAR 0 5
71793: PPUSH
71794: LD_INT 1
71796: PPUSH
71797: CALL_OW 48
// end ;
71801: LD_VAR 0 6
71805: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
71806: LD_INT 0
71808: PPUSH
71809: PPUSH
// uc_side := your_side ;
71810: LD_ADDR_OWVAR 20
71814: PUSH
71815: LD_OWVAR 2
71819: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
71820: LD_VAR 0 1
71824: PUSH
71825: LD_INT 1
71827: PUSH
71828: LD_INT 2
71830: PUSH
71831: LD_INT 3
71833: PUSH
71834: LD_INT 4
71836: PUSH
71837: LD_INT 5
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: LIST
71844: LIST
71845: LIST
71846: IN
71847: IFFALSE 71859
// uc_nation := nation_american else
71849: LD_ADDR_OWVAR 21
71853: PUSH
71854: LD_INT 1
71856: ST_TO_ADDR
71857: GO 71902
// if chassis in [ 11 , 12 , 13 , 14 ] then
71859: LD_VAR 0 1
71863: PUSH
71864: LD_INT 11
71866: PUSH
71867: LD_INT 12
71869: PUSH
71870: LD_INT 13
71872: PUSH
71873: LD_INT 14
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: IN
71882: IFFALSE 71894
// uc_nation := nation_arabian else
71884: LD_ADDR_OWVAR 21
71888: PUSH
71889: LD_INT 2
71891: ST_TO_ADDR
71892: GO 71902
// uc_nation := nation_russian ;
71894: LD_ADDR_OWVAR 21
71898: PUSH
71899: LD_INT 3
71901: ST_TO_ADDR
// vc_chassis := chassis ;
71902: LD_ADDR_OWVAR 37
71906: PUSH
71907: LD_VAR 0 1
71911: ST_TO_ADDR
// vc_engine := engine ;
71912: LD_ADDR_OWVAR 39
71916: PUSH
71917: LD_VAR 0 2
71921: ST_TO_ADDR
// vc_control := control ;
71922: LD_ADDR_OWVAR 38
71926: PUSH
71927: LD_VAR 0 3
71931: ST_TO_ADDR
// vc_weapon := weapon ;
71932: LD_ADDR_OWVAR 40
71936: PUSH
71937: LD_VAR 0 4
71941: ST_TO_ADDR
// un := CreateVehicle ;
71942: LD_ADDR_VAR 0 8
71946: PUSH
71947: CALL_OW 45
71951: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
71952: LD_VAR 0 8
71956: PPUSH
71957: LD_INT 0
71959: PPUSH
71960: LD_INT 5
71962: PPUSH
71963: CALL_OW 12
71967: PPUSH
71968: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
71972: LD_VAR 0 8
71976: PPUSH
71977: LD_VAR 0 5
71981: PPUSH
71982: LD_VAR 0 6
71986: PPUSH
71987: LD_INT 1
71989: PPUSH
71990: CALL_OW 48
// end ;
71994: LD_VAR 0 7
71998: RET
// export hInvincible ; every 1 do
71999: GO 72001
72001: DISABLE
// hInvincible := [ ] ;
72002: LD_ADDR_EXP 103
72006: PUSH
72007: EMPTY
72008: ST_TO_ADDR
72009: END
// every 10 do var i ;
72010: GO 72012
72012: DISABLE
72013: LD_INT 0
72015: PPUSH
// begin enable ;
72016: ENABLE
// if not hInvincible then
72017: LD_EXP 103
72021: NOT
72022: IFFALSE 72026
// exit ;
72024: GO 72070
// for i in hInvincible do
72026: LD_ADDR_VAR 0 1
72030: PUSH
72031: LD_EXP 103
72035: PUSH
72036: FOR_IN
72037: IFFALSE 72068
// if GetLives ( i ) < 1000 then
72039: LD_VAR 0 1
72043: PPUSH
72044: CALL_OW 256
72048: PUSH
72049: LD_INT 1000
72051: LESS
72052: IFFALSE 72066
// SetLives ( i , 1000 ) ;
72054: LD_VAR 0 1
72058: PPUSH
72059: LD_INT 1000
72061: PPUSH
72062: CALL_OW 234
72066: GO 72036
72068: POP
72069: POP
// end ;
72070: PPOPN 1
72072: END
// export function hHackInvincible ; var i ; begin
72073: LD_INT 0
72075: PPUSH
72076: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
72077: LD_ADDR_VAR 0 2
72081: PUSH
72082: LD_INT 2
72084: PUSH
72085: LD_INT 21
72087: PUSH
72088: LD_INT 1
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: PUSH
72095: LD_INT 21
72097: PUSH
72098: LD_INT 2
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: LIST
72109: PPUSH
72110: CALL_OW 69
72114: PUSH
72115: FOR_IN
72116: IFFALSE 72177
// if IsSelected ( i ) then
72118: LD_VAR 0 2
72122: PPUSH
72123: CALL_OW 306
72127: IFFALSE 72175
// begin if i in hInvincible then
72129: LD_VAR 0 2
72133: PUSH
72134: LD_EXP 103
72138: IN
72139: IFFALSE 72159
// hInvincible := hInvincible diff i else
72141: LD_ADDR_EXP 103
72145: PUSH
72146: LD_EXP 103
72150: PUSH
72151: LD_VAR 0 2
72155: DIFF
72156: ST_TO_ADDR
72157: GO 72175
// hInvincible := hInvincible union i ;
72159: LD_ADDR_EXP 103
72163: PUSH
72164: LD_EXP 103
72168: PUSH
72169: LD_VAR 0 2
72173: UNION
72174: ST_TO_ADDR
// end ;
72175: GO 72115
72177: POP
72178: POP
// end ;
72179: LD_VAR 0 1
72183: RET
// export function hHackInvisible ; var i , j ; begin
72184: LD_INT 0
72186: PPUSH
72187: PPUSH
72188: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72189: LD_ADDR_VAR 0 2
72193: PUSH
72194: LD_INT 21
72196: PUSH
72197: LD_INT 1
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: PPUSH
72204: CALL_OW 69
72208: PUSH
72209: FOR_IN
72210: IFFALSE 72234
// if IsSelected ( i ) then
72212: LD_VAR 0 2
72216: PPUSH
72217: CALL_OW 306
72221: IFFALSE 72232
// ComForceInvisible ( i ) ;
72223: LD_VAR 0 2
72227: PPUSH
72228: CALL_OW 496
72232: GO 72209
72234: POP
72235: POP
// end ;
72236: LD_VAR 0 1
72240: RET
// export function hHackChangeYourSide ; begin
72241: LD_INT 0
72243: PPUSH
// if your_side = 8 then
72244: LD_OWVAR 2
72248: PUSH
72249: LD_INT 8
72251: EQUAL
72252: IFFALSE 72264
// your_side := 0 else
72254: LD_ADDR_OWVAR 2
72258: PUSH
72259: LD_INT 0
72261: ST_TO_ADDR
72262: GO 72278
// your_side := your_side + 1 ;
72264: LD_ADDR_OWVAR 2
72268: PUSH
72269: LD_OWVAR 2
72273: PUSH
72274: LD_INT 1
72276: PLUS
72277: ST_TO_ADDR
// end ;
72278: LD_VAR 0 1
72282: RET
// export function hHackChangeUnitSide ; var i , j ; begin
72283: LD_INT 0
72285: PPUSH
72286: PPUSH
72287: PPUSH
// for i in all_units do
72288: LD_ADDR_VAR 0 2
72292: PUSH
72293: LD_OWVAR 3
72297: PUSH
72298: FOR_IN
72299: IFFALSE 72377
// if IsSelected ( i ) then
72301: LD_VAR 0 2
72305: PPUSH
72306: CALL_OW 306
72310: IFFALSE 72375
// begin j := GetSide ( i ) ;
72312: LD_ADDR_VAR 0 3
72316: PUSH
72317: LD_VAR 0 2
72321: PPUSH
72322: CALL_OW 255
72326: ST_TO_ADDR
// if j = 8 then
72327: LD_VAR 0 3
72331: PUSH
72332: LD_INT 8
72334: EQUAL
72335: IFFALSE 72347
// j := 0 else
72337: LD_ADDR_VAR 0 3
72341: PUSH
72342: LD_INT 0
72344: ST_TO_ADDR
72345: GO 72361
// j := j + 1 ;
72347: LD_ADDR_VAR 0 3
72351: PUSH
72352: LD_VAR 0 3
72356: PUSH
72357: LD_INT 1
72359: PLUS
72360: ST_TO_ADDR
// SetSide ( i , j ) ;
72361: LD_VAR 0 2
72365: PPUSH
72366: LD_VAR 0 3
72370: PPUSH
72371: CALL_OW 235
// end ;
72375: GO 72298
72377: POP
72378: POP
// end ;
72379: LD_VAR 0 1
72383: RET
// export function hHackFog ; begin
72384: LD_INT 0
72386: PPUSH
// FogOff ( true ) ;
72387: LD_INT 1
72389: PPUSH
72390: CALL_OW 344
// end ;
72394: LD_VAR 0 1
72398: RET
// export function hHackTeleport ( unit , x , y ) ; begin
72399: LD_INT 0
72401: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
72402: LD_VAR 0 1
72406: PPUSH
72407: LD_VAR 0 2
72411: PPUSH
72412: LD_VAR 0 3
72416: PPUSH
72417: LD_INT 1
72419: PPUSH
72420: LD_INT 1
72422: PPUSH
72423: CALL_OW 483
// CenterOnXY ( x , y ) ;
72427: LD_VAR 0 2
72431: PPUSH
72432: LD_VAR 0 3
72436: PPUSH
72437: CALL_OW 84
// end ;
72441: LD_VAR 0 4
72445: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72446: LD_INT 0
72448: PPUSH
72449: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72450: LD_VAR 0 1
72454: NOT
72455: PUSH
72456: LD_VAR 0 2
72460: PPUSH
72461: LD_VAR 0 3
72465: PPUSH
72466: CALL_OW 488
72470: NOT
72471: OR
72472: PUSH
72473: LD_VAR 0 1
72477: PPUSH
72478: CALL_OW 266
72482: PUSH
72483: LD_INT 3
72485: NONEQUAL
72486: PUSH
72487: LD_VAR 0 1
72491: PPUSH
72492: CALL_OW 247
72496: PUSH
72497: LD_INT 1
72499: EQUAL
72500: NOT
72501: AND
72502: OR
72503: IFFALSE 72507
// exit ;
72505: GO 72656
// if GetType ( factory ) = unit_human then
72507: LD_VAR 0 1
72511: PPUSH
72512: CALL_OW 247
72516: PUSH
72517: LD_INT 1
72519: EQUAL
72520: IFFALSE 72537
// factory := IsInUnit ( factory ) ;
72522: LD_ADDR_VAR 0 1
72526: PUSH
72527: LD_VAR 0 1
72531: PPUSH
72532: CALL_OW 310
72536: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72537: LD_VAR 0 1
72541: PPUSH
72542: CALL_OW 266
72546: PUSH
72547: LD_INT 3
72549: NONEQUAL
72550: IFFALSE 72554
// exit ;
72552: GO 72656
// if HexInfo ( x , y ) = factory then
72554: LD_VAR 0 2
72558: PPUSH
72559: LD_VAR 0 3
72563: PPUSH
72564: CALL_OW 428
72568: PUSH
72569: LD_VAR 0 1
72573: EQUAL
72574: IFFALSE 72601
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72576: LD_ADDR_EXP 104
72580: PUSH
72581: LD_EXP 104
72585: PPUSH
72586: LD_VAR 0 1
72590: PPUSH
72591: LD_INT 0
72593: PPUSH
72594: CALL_OW 1
72598: ST_TO_ADDR
72599: GO 72652
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72601: LD_ADDR_EXP 104
72605: PUSH
72606: LD_EXP 104
72610: PPUSH
72611: LD_VAR 0 1
72615: PPUSH
72616: LD_VAR 0 1
72620: PPUSH
72621: CALL_OW 255
72625: PUSH
72626: LD_VAR 0 1
72630: PUSH
72631: LD_VAR 0 2
72635: PUSH
72636: LD_VAR 0 3
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: PPUSH
72647: CALL_OW 1
72651: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72652: CALL 72661 0 0
// end ;
72656: LD_VAR 0 4
72660: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
72661: LD_INT 0
72663: PPUSH
72664: PPUSH
72665: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72666: LD_STRING resetFactoryWaypoint();
72668: PPUSH
72669: CALL_OW 559
// if factoryWaypoints then
72673: LD_EXP 104
72677: IFFALSE 72803
// begin list := PrepareArray ( factoryWaypoints ) ;
72679: LD_ADDR_VAR 0 3
72683: PUSH
72684: LD_EXP 104
72688: PPUSH
72689: CALL 56616 0 1
72693: ST_TO_ADDR
// for i := 1 to list do
72694: LD_ADDR_VAR 0 2
72698: PUSH
72699: DOUBLE
72700: LD_INT 1
72702: DEC
72703: ST_TO_ADDR
72704: LD_VAR 0 3
72708: PUSH
72709: FOR_TO
72710: IFFALSE 72801
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72712: LD_STRING setFactoryWaypointXY(
72714: PUSH
72715: LD_VAR 0 3
72719: PUSH
72720: LD_VAR 0 2
72724: ARRAY
72725: PUSH
72726: LD_INT 1
72728: ARRAY
72729: STR
72730: PUSH
72731: LD_STRING ,
72733: STR
72734: PUSH
72735: LD_VAR 0 3
72739: PUSH
72740: LD_VAR 0 2
72744: ARRAY
72745: PUSH
72746: LD_INT 2
72748: ARRAY
72749: STR
72750: PUSH
72751: LD_STRING ,
72753: STR
72754: PUSH
72755: LD_VAR 0 3
72759: PUSH
72760: LD_VAR 0 2
72764: ARRAY
72765: PUSH
72766: LD_INT 3
72768: ARRAY
72769: STR
72770: PUSH
72771: LD_STRING ,
72773: STR
72774: PUSH
72775: LD_VAR 0 3
72779: PUSH
72780: LD_VAR 0 2
72784: ARRAY
72785: PUSH
72786: LD_INT 4
72788: ARRAY
72789: STR
72790: PUSH
72791: LD_STRING )
72793: STR
72794: PPUSH
72795: CALL_OW 559
72799: GO 72709
72801: POP
72802: POP
// end ; end ;
72803: LD_VAR 0 1
72807: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
72808: LD_INT 0
72810: PPUSH
// if HexInfo ( x , y ) = warehouse then
72811: LD_VAR 0 2
72815: PPUSH
72816: LD_VAR 0 3
72820: PPUSH
72821: CALL_OW 428
72825: PUSH
72826: LD_VAR 0 1
72830: EQUAL
72831: IFFALSE 72858
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
72833: LD_ADDR_EXP 105
72837: PUSH
72838: LD_EXP 105
72842: PPUSH
72843: LD_VAR 0 1
72847: PPUSH
72848: LD_INT 0
72850: PPUSH
72851: CALL_OW 1
72855: ST_TO_ADDR
72856: GO 72909
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
72858: LD_ADDR_EXP 105
72862: PUSH
72863: LD_EXP 105
72867: PPUSH
72868: LD_VAR 0 1
72872: PPUSH
72873: LD_VAR 0 1
72877: PPUSH
72878: CALL_OW 255
72882: PUSH
72883: LD_VAR 0 1
72887: PUSH
72888: LD_VAR 0 2
72892: PUSH
72893: LD_VAR 0 3
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: PPUSH
72904: CALL_OW 1
72908: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
72909: CALL 72918 0 0
// end ;
72913: LD_VAR 0 4
72917: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
72918: LD_INT 0
72920: PPUSH
72921: PPUSH
72922: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
72923: LD_STRING resetWarehouseGatheringPoints();
72925: PPUSH
72926: CALL_OW 559
// if warehouseGatheringPoints then
72930: LD_EXP 105
72934: IFFALSE 73060
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
72936: LD_ADDR_VAR 0 3
72940: PUSH
72941: LD_EXP 105
72945: PPUSH
72946: CALL 56616 0 1
72950: ST_TO_ADDR
// for i := 1 to list do
72951: LD_ADDR_VAR 0 2
72955: PUSH
72956: DOUBLE
72957: LD_INT 1
72959: DEC
72960: ST_TO_ADDR
72961: LD_VAR 0 3
72965: PUSH
72966: FOR_TO
72967: IFFALSE 73058
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72969: LD_STRING setWarehouseGatheringPointXY(
72971: PUSH
72972: LD_VAR 0 3
72976: PUSH
72977: LD_VAR 0 2
72981: ARRAY
72982: PUSH
72983: LD_INT 1
72985: ARRAY
72986: STR
72987: PUSH
72988: LD_STRING ,
72990: STR
72991: PUSH
72992: LD_VAR 0 3
72996: PUSH
72997: LD_VAR 0 2
73001: ARRAY
73002: PUSH
73003: LD_INT 2
73005: ARRAY
73006: STR
73007: PUSH
73008: LD_STRING ,
73010: STR
73011: PUSH
73012: LD_VAR 0 3
73016: PUSH
73017: LD_VAR 0 2
73021: ARRAY
73022: PUSH
73023: LD_INT 3
73025: ARRAY
73026: STR
73027: PUSH
73028: LD_STRING ,
73030: STR
73031: PUSH
73032: LD_VAR 0 3
73036: PUSH
73037: LD_VAR 0 2
73041: ARRAY
73042: PUSH
73043: LD_INT 4
73045: ARRAY
73046: STR
73047: PUSH
73048: LD_STRING )
73050: STR
73051: PPUSH
73052: CALL_OW 559
73056: GO 72966
73058: POP
73059: POP
// end ; end ;
73060: LD_VAR 0 1
73064: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
73065: LD_EXP 105
73069: IFFALSE 73754
73071: GO 73073
73073: DISABLE
73074: LD_INT 0
73076: PPUSH
73077: PPUSH
73078: PPUSH
73079: PPUSH
73080: PPUSH
73081: PPUSH
73082: PPUSH
73083: PPUSH
73084: PPUSH
// begin enable ;
73085: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
73086: LD_ADDR_VAR 0 3
73090: PUSH
73091: LD_EXP 105
73095: PPUSH
73096: CALL 56616 0 1
73100: ST_TO_ADDR
// if not list then
73101: LD_VAR 0 3
73105: NOT
73106: IFFALSE 73110
// exit ;
73108: GO 73754
// for i := 1 to list do
73110: LD_ADDR_VAR 0 1
73114: PUSH
73115: DOUBLE
73116: LD_INT 1
73118: DEC
73119: ST_TO_ADDR
73120: LD_VAR 0 3
73124: PUSH
73125: FOR_TO
73126: IFFALSE 73752
// begin depot := list [ i ] [ 2 ] ;
73128: LD_ADDR_VAR 0 8
73132: PUSH
73133: LD_VAR 0 3
73137: PUSH
73138: LD_VAR 0 1
73142: ARRAY
73143: PUSH
73144: LD_INT 2
73146: ARRAY
73147: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
73148: LD_ADDR_VAR 0 5
73152: PUSH
73153: LD_VAR 0 3
73157: PUSH
73158: LD_VAR 0 1
73162: ARRAY
73163: PUSH
73164: LD_INT 1
73166: ARRAY
73167: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
73168: LD_VAR 0 8
73172: PPUSH
73173: CALL_OW 301
73177: PUSH
73178: LD_VAR 0 5
73182: PUSH
73183: LD_VAR 0 8
73187: PPUSH
73188: CALL_OW 255
73192: NONEQUAL
73193: OR
73194: IFFALSE 73223
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
73196: LD_ADDR_EXP 105
73200: PUSH
73201: LD_EXP 105
73205: PPUSH
73206: LD_VAR 0 8
73210: PPUSH
73211: LD_INT 0
73213: PPUSH
73214: CALL_OW 1
73218: ST_TO_ADDR
// exit ;
73219: POP
73220: POP
73221: GO 73754
// end ; x := list [ i ] [ 3 ] ;
73223: LD_ADDR_VAR 0 6
73227: PUSH
73228: LD_VAR 0 3
73232: PUSH
73233: LD_VAR 0 1
73237: ARRAY
73238: PUSH
73239: LD_INT 3
73241: ARRAY
73242: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
73243: LD_ADDR_VAR 0 7
73247: PUSH
73248: LD_VAR 0 3
73252: PUSH
73253: LD_VAR 0 1
73257: ARRAY
73258: PUSH
73259: LD_INT 4
73261: ARRAY
73262: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
73263: LD_ADDR_VAR 0 9
73267: PUSH
73268: LD_VAR 0 6
73272: PPUSH
73273: LD_VAR 0 7
73277: PPUSH
73278: LD_INT 16
73280: PPUSH
73281: CALL 55200 0 3
73285: ST_TO_ADDR
// if not cratesNearbyPoint then
73286: LD_VAR 0 9
73290: NOT
73291: IFFALSE 73297
// exit ;
73293: POP
73294: POP
73295: GO 73754
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
73297: LD_ADDR_VAR 0 4
73301: PUSH
73302: LD_INT 22
73304: PUSH
73305: LD_VAR 0 5
73309: PUSH
73310: EMPTY
73311: LIST
73312: LIST
73313: PUSH
73314: LD_INT 3
73316: PUSH
73317: LD_INT 60
73319: PUSH
73320: EMPTY
73321: LIST
73322: PUSH
73323: EMPTY
73324: LIST
73325: LIST
73326: PUSH
73327: LD_INT 91
73329: PUSH
73330: LD_VAR 0 8
73334: PUSH
73335: LD_INT 6
73337: PUSH
73338: EMPTY
73339: LIST
73340: LIST
73341: LIST
73342: PUSH
73343: LD_INT 2
73345: PUSH
73346: LD_INT 25
73348: PUSH
73349: LD_INT 2
73351: PUSH
73352: EMPTY
73353: LIST
73354: LIST
73355: PUSH
73356: LD_INT 25
73358: PUSH
73359: LD_INT 16
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PUSH
73366: EMPTY
73367: LIST
73368: LIST
73369: LIST
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: LIST
73375: LIST
73376: PPUSH
73377: CALL_OW 69
73381: PUSH
73382: LD_VAR 0 8
73386: PPUSH
73387: CALL_OW 313
73391: PPUSH
73392: LD_INT 3
73394: PUSH
73395: LD_INT 60
73397: PUSH
73398: EMPTY
73399: LIST
73400: PUSH
73401: EMPTY
73402: LIST
73403: LIST
73404: PUSH
73405: LD_INT 2
73407: PUSH
73408: LD_INT 25
73410: PUSH
73411: LD_INT 2
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: PUSH
73418: LD_INT 25
73420: PUSH
73421: LD_INT 16
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: PUSH
73428: EMPTY
73429: LIST
73430: LIST
73431: LIST
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: PPUSH
73437: CALL_OW 72
73441: UNION
73442: ST_TO_ADDR
// if tmp then
73443: LD_VAR 0 4
73447: IFFALSE 73527
// begin tmp := ShrinkArray ( tmp , 3 ) ;
73449: LD_ADDR_VAR 0 4
73453: PUSH
73454: LD_VAR 0 4
73458: PPUSH
73459: LD_INT 3
73461: PPUSH
73462: CALL 53169 0 2
73466: ST_TO_ADDR
// for j in tmp do
73467: LD_ADDR_VAR 0 2
73471: PUSH
73472: LD_VAR 0 4
73476: PUSH
73477: FOR_IN
73478: IFFALSE 73521
// begin if IsInUnit ( j ) then
73480: LD_VAR 0 2
73484: PPUSH
73485: CALL_OW 310
73489: IFFALSE 73500
// ComExit ( j ) ;
73491: LD_VAR 0 2
73495: PPUSH
73496: CALL 53252 0 1
// AddComCollect ( j , x , y ) ;
73500: LD_VAR 0 2
73504: PPUSH
73505: LD_VAR 0 6
73509: PPUSH
73510: LD_VAR 0 7
73514: PPUSH
73515: CALL_OW 177
// end ;
73519: GO 73477
73521: POP
73522: POP
// exit ;
73523: POP
73524: POP
73525: GO 73754
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
73527: LD_ADDR_VAR 0 4
73531: PUSH
73532: LD_INT 22
73534: PUSH
73535: LD_VAR 0 5
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: PUSH
73544: LD_INT 91
73546: PUSH
73547: LD_VAR 0 8
73551: PUSH
73552: LD_INT 8
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: LIST
73559: PUSH
73560: LD_INT 2
73562: PUSH
73563: LD_INT 34
73565: PUSH
73566: LD_INT 12
73568: PUSH
73569: EMPTY
73570: LIST
73571: LIST
73572: PUSH
73573: LD_INT 34
73575: PUSH
73576: LD_INT 51
73578: PUSH
73579: EMPTY
73580: LIST
73581: LIST
73582: PUSH
73583: LD_INT 34
73585: PUSH
73586: LD_INT 32
73588: PUSH
73589: EMPTY
73590: LIST
73591: LIST
73592: PUSH
73593: LD_INT 34
73595: PUSH
73596: LD_INT 89
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: LIST
73607: LIST
73608: LIST
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: LIST
73614: PPUSH
73615: CALL_OW 69
73619: ST_TO_ADDR
// if tmp then
73620: LD_VAR 0 4
73624: IFFALSE 73750
// begin for j in tmp do
73626: LD_ADDR_VAR 0 2
73630: PUSH
73631: LD_VAR 0 4
73635: PUSH
73636: FOR_IN
73637: IFFALSE 73748
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
73639: LD_VAR 0 2
73643: PPUSH
73644: CALL_OW 262
73648: PUSH
73649: LD_INT 3
73651: EQUAL
73652: PUSH
73653: LD_VAR 0 2
73657: PPUSH
73658: CALL_OW 261
73662: PUSH
73663: LD_INT 20
73665: GREATER
73666: OR
73667: PUSH
73668: LD_VAR 0 2
73672: PPUSH
73673: CALL_OW 314
73677: NOT
73678: AND
73679: PUSH
73680: LD_VAR 0 2
73684: PPUSH
73685: CALL_OW 263
73689: PUSH
73690: LD_INT 1
73692: NONEQUAL
73693: PUSH
73694: LD_VAR 0 2
73698: PPUSH
73699: CALL_OW 311
73703: OR
73704: AND
73705: IFFALSE 73746
// begin ComCollect ( j , x , y ) ;
73707: LD_VAR 0 2
73711: PPUSH
73712: LD_VAR 0 6
73716: PPUSH
73717: LD_VAR 0 7
73721: PPUSH
73722: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
73726: LD_VAR 0 2
73730: PPUSH
73731: LD_VAR 0 8
73735: PPUSH
73736: CALL_OW 172
// exit ;
73740: POP
73741: POP
73742: POP
73743: POP
73744: GO 73754
// end ;
73746: GO 73636
73748: POP
73749: POP
// end ; end ;
73750: GO 73125
73752: POP
73753: POP
// end ; end_of_file
73754: PPOPN 9
73756: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
73757: LD_INT 0
73759: PPUSH
73760: PPUSH
73761: PPUSH
73762: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
73763: LD_VAR 0 1
73767: PPUSH
73768: CALL_OW 264
73772: PUSH
73773: LD_INT 91
73775: EQUAL
73776: IFFALSE 73848
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
73778: LD_INT 68
73780: PPUSH
73781: LD_VAR 0 1
73785: PPUSH
73786: CALL_OW 255
73790: PPUSH
73791: CALL_OW 321
73795: PUSH
73796: LD_INT 2
73798: EQUAL
73799: IFFALSE 73811
// eff := 70 else
73801: LD_ADDR_VAR 0 4
73805: PUSH
73806: LD_INT 70
73808: ST_TO_ADDR
73809: GO 73819
// eff := 30 ;
73811: LD_ADDR_VAR 0 4
73815: PUSH
73816: LD_INT 30
73818: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
73819: LD_VAR 0 1
73823: PPUSH
73824: CALL_OW 250
73828: PPUSH
73829: LD_VAR 0 1
73833: PPUSH
73834: CALL_OW 251
73838: PPUSH
73839: LD_VAR 0 4
73843: PPUSH
73844: CALL_OW 495
// end ; end ;
73848: LD_VAR 0 2
73852: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
73853: LD_INT 0
73855: PPUSH
// end ;
73856: LD_VAR 0 4
73860: RET
// export function SOS_Command ( cmd ) ; begin
73861: LD_INT 0
73863: PPUSH
// end ;
73864: LD_VAR 0 2
73868: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
73869: LD_INT 0
73871: PPUSH
// end ;
73872: LD_VAR 0 6
73876: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
73877: LD_INT 0
73879: PPUSH
73880: PPUSH
// if not vehicle or not factory then
73881: LD_VAR 0 1
73885: NOT
73886: PUSH
73887: LD_VAR 0 2
73891: NOT
73892: OR
73893: IFFALSE 73897
// exit ;
73895: GO 74128
// if factoryWaypoints >= factory then
73897: LD_EXP 104
73901: PUSH
73902: LD_VAR 0 2
73906: GREATEREQUAL
73907: IFFALSE 74128
// if factoryWaypoints [ factory ] then
73909: LD_EXP 104
73913: PUSH
73914: LD_VAR 0 2
73918: ARRAY
73919: IFFALSE 74128
// begin if GetControl ( vehicle ) = control_manual then
73921: LD_VAR 0 1
73925: PPUSH
73926: CALL_OW 263
73930: PUSH
73931: LD_INT 1
73933: EQUAL
73934: IFFALSE 74015
// begin driver := IsDrivenBy ( vehicle ) ;
73936: LD_ADDR_VAR 0 4
73940: PUSH
73941: LD_VAR 0 1
73945: PPUSH
73946: CALL_OW 311
73950: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73951: LD_VAR 0 4
73955: PPUSH
73956: LD_EXP 104
73960: PUSH
73961: LD_VAR 0 2
73965: ARRAY
73966: PUSH
73967: LD_INT 3
73969: ARRAY
73970: PPUSH
73971: LD_EXP 104
73975: PUSH
73976: LD_VAR 0 2
73980: ARRAY
73981: PUSH
73982: LD_INT 4
73984: ARRAY
73985: PPUSH
73986: CALL_OW 171
// AddComExitVehicle ( driver ) ;
73990: LD_VAR 0 4
73994: PPUSH
73995: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
73999: LD_VAR 0 4
74003: PPUSH
74004: LD_VAR 0 2
74008: PPUSH
74009: CALL_OW 180
// end else
74013: GO 74128
// if GetControl ( vehicle ) = control_remote then
74015: LD_VAR 0 1
74019: PPUSH
74020: CALL_OW 263
74024: PUSH
74025: LD_INT 2
74027: EQUAL
74028: IFFALSE 74089
// begin wait ( 0 0$2 ) ;
74030: LD_INT 70
74032: PPUSH
74033: CALL_OW 67
// if Connect ( vehicle ) then
74037: LD_VAR 0 1
74041: PPUSH
74042: CALL 23471 0 1
74046: IFFALSE 74087
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74048: LD_VAR 0 1
74052: PPUSH
74053: LD_EXP 104
74057: PUSH
74058: LD_VAR 0 2
74062: ARRAY
74063: PUSH
74064: LD_INT 3
74066: ARRAY
74067: PPUSH
74068: LD_EXP 104
74072: PUSH
74073: LD_VAR 0 2
74077: ARRAY
74078: PUSH
74079: LD_INT 4
74081: ARRAY
74082: PPUSH
74083: CALL_OW 171
// end else
74087: GO 74128
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74089: LD_VAR 0 1
74093: PPUSH
74094: LD_EXP 104
74098: PUSH
74099: LD_VAR 0 2
74103: ARRAY
74104: PUSH
74105: LD_INT 3
74107: ARRAY
74108: PPUSH
74109: LD_EXP 104
74113: PUSH
74114: LD_VAR 0 2
74118: ARRAY
74119: PUSH
74120: LD_INT 4
74122: ARRAY
74123: PPUSH
74124: CALL_OW 171
// end ; end ;
74128: LD_VAR 0 3
74132: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
74133: LD_INT 0
74135: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
74136: LD_VAR 0 1
74140: PUSH
74141: LD_INT 250
74143: EQUAL
74144: PUSH
74145: LD_VAR 0 2
74149: PPUSH
74150: CALL_OW 264
74154: PUSH
74155: LD_INT 81
74157: EQUAL
74158: AND
74159: IFFALSE 74180
// MinerPlaceMine ( unit , x , y ) ;
74161: LD_VAR 0 2
74165: PPUSH
74166: LD_VAR 0 4
74170: PPUSH
74171: LD_VAR 0 5
74175: PPUSH
74176: CALL 77170 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
74180: LD_VAR 0 1
74184: PUSH
74185: LD_INT 251
74187: EQUAL
74188: PUSH
74189: LD_VAR 0 2
74193: PPUSH
74194: CALL_OW 264
74198: PUSH
74199: LD_INT 81
74201: EQUAL
74202: AND
74203: IFFALSE 74224
// MinerDetonateMine ( unit , x , y ) ;
74205: LD_VAR 0 2
74209: PPUSH
74210: LD_VAR 0 4
74214: PPUSH
74215: LD_VAR 0 5
74219: PPUSH
74220: CALL 77445 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
74224: LD_VAR 0 1
74228: PUSH
74229: LD_INT 252
74231: EQUAL
74232: PUSH
74233: LD_VAR 0 2
74237: PPUSH
74238: CALL_OW 264
74242: PUSH
74243: LD_INT 81
74245: EQUAL
74246: AND
74247: IFFALSE 74268
// MinerCreateMinefield ( unit , x , y ) ;
74249: LD_VAR 0 2
74253: PPUSH
74254: LD_VAR 0 4
74258: PPUSH
74259: LD_VAR 0 5
74263: PPUSH
74264: CALL 77862 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
74268: LD_VAR 0 1
74272: PUSH
74273: LD_INT 253
74275: EQUAL
74276: PUSH
74277: LD_VAR 0 2
74281: PPUSH
74282: CALL_OW 257
74286: PUSH
74287: LD_INT 5
74289: EQUAL
74290: AND
74291: IFFALSE 74312
// ComBinocular ( unit , x , y ) ;
74293: LD_VAR 0 2
74297: PPUSH
74298: LD_VAR 0 4
74302: PPUSH
74303: LD_VAR 0 5
74307: PPUSH
74308: CALL 78231 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
74312: LD_VAR 0 1
74316: PUSH
74317: LD_INT 254
74319: EQUAL
74320: PUSH
74321: LD_VAR 0 2
74325: PPUSH
74326: CALL_OW 264
74330: PUSH
74331: LD_INT 99
74333: EQUAL
74334: AND
74335: PUSH
74336: LD_VAR 0 3
74340: PPUSH
74341: CALL_OW 263
74345: PUSH
74346: LD_INT 3
74348: EQUAL
74349: AND
74350: IFFALSE 74366
// HackDestroyVehicle ( unit , selectedUnit ) ;
74352: LD_VAR 0 2
74356: PPUSH
74357: LD_VAR 0 3
74361: PPUSH
74362: CALL 76534 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
74366: LD_VAR 0 1
74370: PUSH
74371: LD_INT 255
74373: EQUAL
74374: PUSH
74375: LD_VAR 0 2
74379: PPUSH
74380: CALL_OW 264
74384: PUSH
74385: LD_INT 14
74387: PUSH
74388: LD_INT 53
74390: PUSH
74391: EMPTY
74392: LIST
74393: LIST
74394: IN
74395: AND
74396: PUSH
74397: LD_VAR 0 4
74401: PPUSH
74402: LD_VAR 0 5
74406: PPUSH
74407: CALL_OW 488
74411: AND
74412: IFFALSE 74436
// CutTreeXYR ( unit , x , y , 12 ) ;
74414: LD_VAR 0 2
74418: PPUSH
74419: LD_VAR 0 4
74423: PPUSH
74424: LD_VAR 0 5
74428: PPUSH
74429: LD_INT 12
74431: PPUSH
74432: CALL 74531 0 4
// if cmd = 256 then
74436: LD_VAR 0 1
74440: PUSH
74441: LD_INT 256
74443: EQUAL
74444: IFFALSE 74465
// SetFactoryWaypoint ( unit , x , y ) ;
74446: LD_VAR 0 2
74450: PPUSH
74451: LD_VAR 0 4
74455: PPUSH
74456: LD_VAR 0 5
74460: PPUSH
74461: CALL 72446 0 3
// if cmd = 257 then
74465: LD_VAR 0 1
74469: PUSH
74470: LD_INT 257
74472: EQUAL
74473: IFFALSE 74494
// SetWarehouseGatheringPoint ( unit , x , y ) ;
74475: LD_VAR 0 2
74479: PPUSH
74480: LD_VAR 0 4
74484: PPUSH
74485: LD_VAR 0 5
74489: PPUSH
74490: CALL 72808 0 3
// if cmd = 258 then
74494: LD_VAR 0 1
74498: PUSH
74499: LD_INT 258
74501: EQUAL
74502: IFFALSE 74526
// BurnTreeXYR ( unit , x , y , 8 ) ;
74504: LD_VAR 0 2
74508: PPUSH
74509: LD_VAR 0 4
74513: PPUSH
74514: LD_VAR 0 5
74518: PPUSH
74519: LD_INT 8
74521: PPUSH
74522: CALL 74925 0 4
// end ;
74526: LD_VAR 0 6
74530: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
74531: LD_INT 0
74533: PPUSH
74534: PPUSH
74535: PPUSH
74536: PPUSH
74537: PPUSH
74538: PPUSH
74539: PPUSH
74540: PPUSH
74541: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
74542: LD_VAR 0 1
74546: PPUSH
74547: CALL_OW 302
74551: NOT
74552: PUSH
74553: LD_VAR 0 2
74557: PPUSH
74558: LD_VAR 0 3
74562: PPUSH
74563: CALL_OW 488
74567: NOT
74568: OR
74569: PUSH
74570: LD_VAR 0 4
74574: NOT
74575: OR
74576: IFFALSE 74580
// exit ;
74578: GO 74920
// list := [ ] ;
74580: LD_ADDR_VAR 0 13
74584: PUSH
74585: EMPTY
74586: ST_TO_ADDR
// if x - r < 0 then
74587: LD_VAR 0 2
74591: PUSH
74592: LD_VAR 0 4
74596: MINUS
74597: PUSH
74598: LD_INT 0
74600: LESS
74601: IFFALSE 74613
// min_x := 0 else
74603: LD_ADDR_VAR 0 7
74607: PUSH
74608: LD_INT 0
74610: ST_TO_ADDR
74611: GO 74629
// min_x := x - r ;
74613: LD_ADDR_VAR 0 7
74617: PUSH
74618: LD_VAR 0 2
74622: PUSH
74623: LD_VAR 0 4
74627: MINUS
74628: ST_TO_ADDR
// if y - r < 0 then
74629: LD_VAR 0 3
74633: PUSH
74634: LD_VAR 0 4
74638: MINUS
74639: PUSH
74640: LD_INT 0
74642: LESS
74643: IFFALSE 74655
// min_y := 0 else
74645: LD_ADDR_VAR 0 8
74649: PUSH
74650: LD_INT 0
74652: ST_TO_ADDR
74653: GO 74671
// min_y := y - r ;
74655: LD_ADDR_VAR 0 8
74659: PUSH
74660: LD_VAR 0 3
74664: PUSH
74665: LD_VAR 0 4
74669: MINUS
74670: ST_TO_ADDR
// max_x := x + r ;
74671: LD_ADDR_VAR 0 9
74675: PUSH
74676: LD_VAR 0 2
74680: PUSH
74681: LD_VAR 0 4
74685: PLUS
74686: ST_TO_ADDR
// max_y := y + r ;
74687: LD_ADDR_VAR 0 10
74691: PUSH
74692: LD_VAR 0 3
74696: PUSH
74697: LD_VAR 0 4
74701: PLUS
74702: ST_TO_ADDR
// for _x = min_x to max_x do
74703: LD_ADDR_VAR 0 11
74707: PUSH
74708: DOUBLE
74709: LD_VAR 0 7
74713: DEC
74714: ST_TO_ADDR
74715: LD_VAR 0 9
74719: PUSH
74720: FOR_TO
74721: IFFALSE 74838
// for _y = min_y to max_y do
74723: LD_ADDR_VAR 0 12
74727: PUSH
74728: DOUBLE
74729: LD_VAR 0 8
74733: DEC
74734: ST_TO_ADDR
74735: LD_VAR 0 10
74739: PUSH
74740: FOR_TO
74741: IFFALSE 74834
// begin if not ValidHex ( _x , _y ) then
74743: LD_VAR 0 11
74747: PPUSH
74748: LD_VAR 0 12
74752: PPUSH
74753: CALL_OW 488
74757: NOT
74758: IFFALSE 74762
// continue ;
74760: GO 74740
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
74762: LD_VAR 0 11
74766: PPUSH
74767: LD_VAR 0 12
74771: PPUSH
74772: CALL_OW 351
74776: PUSH
74777: LD_VAR 0 11
74781: PPUSH
74782: LD_VAR 0 12
74786: PPUSH
74787: CALL_OW 554
74791: AND
74792: IFFALSE 74832
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
74794: LD_ADDR_VAR 0 13
74798: PUSH
74799: LD_VAR 0 13
74803: PPUSH
74804: LD_VAR 0 13
74808: PUSH
74809: LD_INT 1
74811: PLUS
74812: PPUSH
74813: LD_VAR 0 11
74817: PUSH
74818: LD_VAR 0 12
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: PPUSH
74827: CALL_OW 2
74831: ST_TO_ADDR
// end ;
74832: GO 74740
74834: POP
74835: POP
74836: GO 74720
74838: POP
74839: POP
// if not list then
74840: LD_VAR 0 13
74844: NOT
74845: IFFALSE 74849
// exit ;
74847: GO 74920
// for i in list do
74849: LD_ADDR_VAR 0 6
74853: PUSH
74854: LD_VAR 0 13
74858: PUSH
74859: FOR_IN
74860: IFFALSE 74918
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
74862: LD_VAR 0 1
74866: PPUSH
74867: LD_STRING M
74869: PUSH
74870: LD_VAR 0 6
74874: PUSH
74875: LD_INT 1
74877: ARRAY
74878: PUSH
74879: LD_VAR 0 6
74883: PUSH
74884: LD_INT 2
74886: ARRAY
74887: PUSH
74888: LD_INT 0
74890: PUSH
74891: LD_INT 0
74893: PUSH
74894: LD_INT 0
74896: PUSH
74897: LD_INT 0
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: LIST
74904: LIST
74905: LIST
74906: LIST
74907: LIST
74908: PUSH
74909: EMPTY
74910: LIST
74911: PPUSH
74912: CALL_OW 447
74916: GO 74859
74918: POP
74919: POP
// end ;
74920: LD_VAR 0 5
74924: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
74925: LD_INT 0
74927: PPUSH
74928: PPUSH
74929: PPUSH
74930: PPUSH
74931: PPUSH
74932: PPUSH
74933: PPUSH
74934: PPUSH
74935: PPUSH
74936: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
74937: LD_VAR 0 1
74941: PPUSH
74942: CALL_OW 302
74946: NOT
74947: PUSH
74948: LD_VAR 0 2
74952: PPUSH
74953: LD_VAR 0 3
74957: PPUSH
74958: CALL_OW 488
74962: NOT
74963: OR
74964: PUSH
74965: LD_VAR 0 4
74969: NOT
74970: OR
74971: IFFALSE 74975
// exit ;
74973: GO 75488
// list := [ ] ;
74975: LD_ADDR_VAR 0 13
74979: PUSH
74980: EMPTY
74981: ST_TO_ADDR
// if x - r < 0 then
74982: LD_VAR 0 2
74986: PUSH
74987: LD_VAR 0 4
74991: MINUS
74992: PUSH
74993: LD_INT 0
74995: LESS
74996: IFFALSE 75008
// min_x := 0 else
74998: LD_ADDR_VAR 0 7
75002: PUSH
75003: LD_INT 0
75005: ST_TO_ADDR
75006: GO 75024
// min_x := x - r ;
75008: LD_ADDR_VAR 0 7
75012: PUSH
75013: LD_VAR 0 2
75017: PUSH
75018: LD_VAR 0 4
75022: MINUS
75023: ST_TO_ADDR
// if y - r < 0 then
75024: LD_VAR 0 3
75028: PUSH
75029: LD_VAR 0 4
75033: MINUS
75034: PUSH
75035: LD_INT 0
75037: LESS
75038: IFFALSE 75050
// min_y := 0 else
75040: LD_ADDR_VAR 0 8
75044: PUSH
75045: LD_INT 0
75047: ST_TO_ADDR
75048: GO 75066
// min_y := y - r ;
75050: LD_ADDR_VAR 0 8
75054: PUSH
75055: LD_VAR 0 3
75059: PUSH
75060: LD_VAR 0 4
75064: MINUS
75065: ST_TO_ADDR
// max_x := x + r ;
75066: LD_ADDR_VAR 0 9
75070: PUSH
75071: LD_VAR 0 2
75075: PUSH
75076: LD_VAR 0 4
75080: PLUS
75081: ST_TO_ADDR
// max_y := y + r ;
75082: LD_ADDR_VAR 0 10
75086: PUSH
75087: LD_VAR 0 3
75091: PUSH
75092: LD_VAR 0 4
75096: PLUS
75097: ST_TO_ADDR
// for _x = min_x to max_x do
75098: LD_ADDR_VAR 0 11
75102: PUSH
75103: DOUBLE
75104: LD_VAR 0 7
75108: DEC
75109: ST_TO_ADDR
75110: LD_VAR 0 9
75114: PUSH
75115: FOR_TO
75116: IFFALSE 75233
// for _y = min_y to max_y do
75118: LD_ADDR_VAR 0 12
75122: PUSH
75123: DOUBLE
75124: LD_VAR 0 8
75128: DEC
75129: ST_TO_ADDR
75130: LD_VAR 0 10
75134: PUSH
75135: FOR_TO
75136: IFFALSE 75229
// begin if not ValidHex ( _x , _y ) then
75138: LD_VAR 0 11
75142: PPUSH
75143: LD_VAR 0 12
75147: PPUSH
75148: CALL_OW 488
75152: NOT
75153: IFFALSE 75157
// continue ;
75155: GO 75135
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75157: LD_VAR 0 11
75161: PPUSH
75162: LD_VAR 0 12
75166: PPUSH
75167: CALL_OW 351
75171: PUSH
75172: LD_VAR 0 11
75176: PPUSH
75177: LD_VAR 0 12
75181: PPUSH
75182: CALL_OW 554
75186: AND
75187: IFFALSE 75227
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75189: LD_ADDR_VAR 0 13
75193: PUSH
75194: LD_VAR 0 13
75198: PPUSH
75199: LD_VAR 0 13
75203: PUSH
75204: LD_INT 1
75206: PLUS
75207: PPUSH
75208: LD_VAR 0 11
75212: PUSH
75213: LD_VAR 0 12
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: PPUSH
75222: CALL_OW 2
75226: ST_TO_ADDR
// end ;
75227: GO 75135
75229: POP
75230: POP
75231: GO 75115
75233: POP
75234: POP
// if not list then
75235: LD_VAR 0 13
75239: NOT
75240: IFFALSE 75244
// exit ;
75242: GO 75488
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
75244: LD_ADDR_VAR 0 13
75248: PUSH
75249: LD_VAR 0 1
75253: PPUSH
75254: LD_VAR 0 13
75258: PPUSH
75259: LD_INT 1
75261: PPUSH
75262: LD_INT 1
75264: PPUSH
75265: CALL 20613 0 4
75269: ST_TO_ADDR
// ComStop ( flame ) ;
75270: LD_VAR 0 1
75274: PPUSH
75275: CALL_OW 141
// for i in list do
75279: LD_ADDR_VAR 0 6
75283: PUSH
75284: LD_VAR 0 13
75288: PUSH
75289: FOR_IN
75290: IFFALSE 75321
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
75292: LD_VAR 0 1
75296: PPUSH
75297: LD_VAR 0 6
75301: PUSH
75302: LD_INT 1
75304: ARRAY
75305: PPUSH
75306: LD_VAR 0 6
75310: PUSH
75311: LD_INT 2
75313: ARRAY
75314: PPUSH
75315: CALL_OW 176
75319: GO 75289
75321: POP
75322: POP
// repeat wait ( 0 0$1 ) ;
75323: LD_INT 35
75325: PPUSH
75326: CALL_OW 67
// task := GetTaskList ( flame ) ;
75330: LD_ADDR_VAR 0 14
75334: PUSH
75335: LD_VAR 0 1
75339: PPUSH
75340: CALL_OW 437
75344: ST_TO_ADDR
// if not task then
75345: LD_VAR 0 14
75349: NOT
75350: IFFALSE 75354
// exit ;
75352: GO 75488
// if task [ 1 ] [ 1 ] <> | then
75354: LD_VAR 0 14
75358: PUSH
75359: LD_INT 1
75361: ARRAY
75362: PUSH
75363: LD_INT 1
75365: ARRAY
75366: PUSH
75367: LD_STRING |
75369: NONEQUAL
75370: IFFALSE 75374
// exit ;
75372: GO 75488
// _x := task [ 1 ] [ 2 ] ;
75374: LD_ADDR_VAR 0 11
75378: PUSH
75379: LD_VAR 0 14
75383: PUSH
75384: LD_INT 1
75386: ARRAY
75387: PUSH
75388: LD_INT 2
75390: ARRAY
75391: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
75392: LD_ADDR_VAR 0 12
75396: PUSH
75397: LD_VAR 0 14
75401: PUSH
75402: LD_INT 1
75404: ARRAY
75405: PUSH
75406: LD_INT 3
75408: ARRAY
75409: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
75410: LD_VAR 0 11
75414: PPUSH
75415: LD_VAR 0 12
75419: PPUSH
75420: CALL_OW 351
75424: NOT
75425: PUSH
75426: LD_VAR 0 11
75430: PPUSH
75431: LD_VAR 0 12
75435: PPUSH
75436: CALL_OW 554
75440: NOT
75441: OR
75442: IFFALSE 75476
// begin task := Delete ( task , 1 ) ;
75444: LD_ADDR_VAR 0 14
75448: PUSH
75449: LD_VAR 0 14
75453: PPUSH
75454: LD_INT 1
75456: PPUSH
75457: CALL_OW 3
75461: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
75462: LD_VAR 0 1
75466: PPUSH
75467: LD_VAR 0 14
75471: PPUSH
75472: CALL_OW 446
// end ; until not HasTask ( flame ) ;
75476: LD_VAR 0 1
75480: PPUSH
75481: CALL_OW 314
75485: NOT
75486: IFFALSE 75323
// end ;
75488: LD_VAR 0 5
75492: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
75493: LD_EXP 107
75497: NOT
75498: IFFALSE 75548
75500: GO 75502
75502: DISABLE
// begin initHack := true ;
75503: LD_ADDR_EXP 107
75507: PUSH
75508: LD_INT 1
75510: ST_TO_ADDR
// hackTanks := [ ] ;
75511: LD_ADDR_EXP 108
75515: PUSH
75516: EMPTY
75517: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
75518: LD_ADDR_EXP 109
75522: PUSH
75523: EMPTY
75524: ST_TO_ADDR
// hackLimit := 3 ;
75525: LD_ADDR_EXP 110
75529: PUSH
75530: LD_INT 3
75532: ST_TO_ADDR
// hackDist := 12 ;
75533: LD_ADDR_EXP 111
75537: PUSH
75538: LD_INT 12
75540: ST_TO_ADDR
// hackCounter := [ ] ;
75541: LD_ADDR_EXP 112
75545: PUSH
75546: EMPTY
75547: ST_TO_ADDR
// end ;
75548: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
75549: LD_EXP 107
75553: PUSH
75554: LD_INT 34
75556: PUSH
75557: LD_INT 99
75559: PUSH
75560: EMPTY
75561: LIST
75562: LIST
75563: PPUSH
75564: CALL_OW 69
75568: AND
75569: IFFALSE 75822
75571: GO 75573
75573: DISABLE
75574: LD_INT 0
75576: PPUSH
75577: PPUSH
// begin enable ;
75578: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
75579: LD_ADDR_VAR 0 1
75583: PUSH
75584: LD_INT 34
75586: PUSH
75587: LD_INT 99
75589: PUSH
75590: EMPTY
75591: LIST
75592: LIST
75593: PPUSH
75594: CALL_OW 69
75598: PUSH
75599: FOR_IN
75600: IFFALSE 75820
// begin if not i in hackTanks then
75602: LD_VAR 0 1
75606: PUSH
75607: LD_EXP 108
75611: IN
75612: NOT
75613: IFFALSE 75696
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
75615: LD_ADDR_EXP 108
75619: PUSH
75620: LD_EXP 108
75624: PPUSH
75625: LD_EXP 108
75629: PUSH
75630: LD_INT 1
75632: PLUS
75633: PPUSH
75634: LD_VAR 0 1
75638: PPUSH
75639: CALL_OW 1
75643: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
75644: LD_ADDR_EXP 109
75648: PUSH
75649: LD_EXP 109
75653: PPUSH
75654: LD_EXP 109
75658: PUSH
75659: LD_INT 1
75661: PLUS
75662: PPUSH
75663: EMPTY
75664: PPUSH
75665: CALL_OW 1
75669: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
75670: LD_ADDR_EXP 112
75674: PUSH
75675: LD_EXP 112
75679: PPUSH
75680: LD_EXP 112
75684: PUSH
75685: LD_INT 1
75687: PLUS
75688: PPUSH
75689: EMPTY
75690: PPUSH
75691: CALL_OW 1
75695: ST_TO_ADDR
// end ; if not IsOk ( i ) then
75696: LD_VAR 0 1
75700: PPUSH
75701: CALL_OW 302
75705: NOT
75706: IFFALSE 75719
// begin HackUnlinkAll ( i ) ;
75708: LD_VAR 0 1
75712: PPUSH
75713: CALL 75825 0 1
// continue ;
75717: GO 75599
// end ; HackCheckCapturedStatus ( i ) ;
75719: LD_VAR 0 1
75723: PPUSH
75724: CALL 76268 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
75728: LD_ADDR_VAR 0 2
75732: PUSH
75733: LD_INT 81
75735: PUSH
75736: LD_VAR 0 1
75740: PPUSH
75741: CALL_OW 255
75745: PUSH
75746: EMPTY
75747: LIST
75748: LIST
75749: PUSH
75750: LD_INT 33
75752: PUSH
75753: LD_INT 3
75755: PUSH
75756: EMPTY
75757: LIST
75758: LIST
75759: PUSH
75760: LD_INT 91
75762: PUSH
75763: LD_VAR 0 1
75767: PUSH
75768: LD_EXP 111
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: LIST
75777: PUSH
75778: LD_INT 50
75780: PUSH
75781: EMPTY
75782: LIST
75783: PUSH
75784: EMPTY
75785: LIST
75786: LIST
75787: LIST
75788: LIST
75789: PPUSH
75790: CALL_OW 69
75794: ST_TO_ADDR
// if not tmp then
75795: LD_VAR 0 2
75799: NOT
75800: IFFALSE 75804
// continue ;
75802: GO 75599
// HackLink ( i , tmp ) ;
75804: LD_VAR 0 1
75808: PPUSH
75809: LD_VAR 0 2
75813: PPUSH
75814: CALL 75961 0 2
// end ;
75818: GO 75599
75820: POP
75821: POP
// end ;
75822: PPOPN 2
75824: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
75825: LD_INT 0
75827: PPUSH
75828: PPUSH
75829: PPUSH
// if not hack in hackTanks then
75830: LD_VAR 0 1
75834: PUSH
75835: LD_EXP 108
75839: IN
75840: NOT
75841: IFFALSE 75845
// exit ;
75843: GO 75956
// index := GetElementIndex ( hackTanks , hack ) ;
75845: LD_ADDR_VAR 0 4
75849: PUSH
75850: LD_EXP 108
75854: PPUSH
75855: LD_VAR 0 1
75859: PPUSH
75860: CALL 19910 0 2
75864: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
75865: LD_EXP 109
75869: PUSH
75870: LD_VAR 0 4
75874: ARRAY
75875: IFFALSE 75956
// begin for i in hackTanksCaptured [ index ] do
75877: LD_ADDR_VAR 0 3
75881: PUSH
75882: LD_EXP 109
75886: PUSH
75887: LD_VAR 0 4
75891: ARRAY
75892: PUSH
75893: FOR_IN
75894: IFFALSE 75920
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
75896: LD_VAR 0 3
75900: PUSH
75901: LD_INT 1
75903: ARRAY
75904: PPUSH
75905: LD_VAR 0 3
75909: PUSH
75910: LD_INT 2
75912: ARRAY
75913: PPUSH
75914: CALL_OW 235
75918: GO 75893
75920: POP
75921: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
75922: LD_ADDR_EXP 109
75926: PUSH
75927: LD_EXP 109
75931: PPUSH
75932: LD_VAR 0 4
75936: PPUSH
75937: EMPTY
75938: PPUSH
75939: CALL_OW 1
75943: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
75944: LD_VAR 0 1
75948: PPUSH
75949: LD_INT 0
75951: PPUSH
75952: CALL_OW 505
// end ; end ;
75956: LD_VAR 0 2
75960: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
75961: LD_INT 0
75963: PPUSH
75964: PPUSH
75965: PPUSH
// if not hack in hackTanks or not vehicles then
75966: LD_VAR 0 1
75970: PUSH
75971: LD_EXP 108
75975: IN
75976: NOT
75977: PUSH
75978: LD_VAR 0 2
75982: NOT
75983: OR
75984: IFFALSE 75988
// exit ;
75986: GO 76263
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
75988: LD_ADDR_VAR 0 2
75992: PUSH
75993: LD_VAR 0 1
75997: PPUSH
75998: LD_VAR 0 2
76002: PPUSH
76003: LD_INT 1
76005: PPUSH
76006: LD_INT 1
76008: PPUSH
76009: CALL 20560 0 4
76013: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
76014: LD_ADDR_VAR 0 5
76018: PUSH
76019: LD_EXP 108
76023: PPUSH
76024: LD_VAR 0 1
76028: PPUSH
76029: CALL 19910 0 2
76033: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
76034: LD_EXP 109
76038: PUSH
76039: LD_VAR 0 5
76043: ARRAY
76044: PUSH
76045: LD_EXP 110
76049: LESS
76050: IFFALSE 76239
// begin for i := 1 to vehicles do
76052: LD_ADDR_VAR 0 4
76056: PUSH
76057: DOUBLE
76058: LD_INT 1
76060: DEC
76061: ST_TO_ADDR
76062: LD_VAR 0 2
76066: PUSH
76067: FOR_TO
76068: IFFALSE 76237
// begin if hackTanksCaptured [ index ] = hackLimit then
76070: LD_EXP 109
76074: PUSH
76075: LD_VAR 0 5
76079: ARRAY
76080: PUSH
76081: LD_EXP 110
76085: EQUAL
76086: IFFALSE 76090
// break ;
76088: GO 76237
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
76090: LD_ADDR_EXP 112
76094: PUSH
76095: LD_EXP 112
76099: PPUSH
76100: LD_VAR 0 5
76104: PPUSH
76105: LD_EXP 112
76109: PUSH
76110: LD_VAR 0 5
76114: ARRAY
76115: PUSH
76116: LD_INT 1
76118: PLUS
76119: PPUSH
76120: CALL_OW 1
76124: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
76125: LD_ADDR_EXP 109
76129: PUSH
76130: LD_EXP 109
76134: PPUSH
76135: LD_VAR 0 5
76139: PUSH
76140: LD_EXP 109
76144: PUSH
76145: LD_VAR 0 5
76149: ARRAY
76150: PUSH
76151: LD_INT 1
76153: PLUS
76154: PUSH
76155: EMPTY
76156: LIST
76157: LIST
76158: PPUSH
76159: LD_VAR 0 2
76163: PUSH
76164: LD_VAR 0 4
76168: ARRAY
76169: PUSH
76170: LD_VAR 0 2
76174: PUSH
76175: LD_VAR 0 4
76179: ARRAY
76180: PPUSH
76181: CALL_OW 255
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: PPUSH
76190: CALL 20125 0 3
76194: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
76195: LD_VAR 0 2
76199: PUSH
76200: LD_VAR 0 4
76204: ARRAY
76205: PPUSH
76206: LD_VAR 0 1
76210: PPUSH
76211: CALL_OW 255
76215: PPUSH
76216: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
76220: LD_VAR 0 2
76224: PUSH
76225: LD_VAR 0 4
76229: ARRAY
76230: PPUSH
76231: CALL_OW 141
// end ;
76235: GO 76067
76237: POP
76238: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76239: LD_VAR 0 1
76243: PPUSH
76244: LD_EXP 109
76248: PUSH
76249: LD_VAR 0 5
76253: ARRAY
76254: PUSH
76255: LD_INT 0
76257: PLUS
76258: PPUSH
76259: CALL_OW 505
// end ;
76263: LD_VAR 0 3
76267: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
76268: LD_INT 0
76270: PPUSH
76271: PPUSH
76272: PPUSH
76273: PPUSH
// if not hack in hackTanks then
76274: LD_VAR 0 1
76278: PUSH
76279: LD_EXP 108
76283: IN
76284: NOT
76285: IFFALSE 76289
// exit ;
76287: GO 76529
// index := GetElementIndex ( hackTanks , hack ) ;
76289: LD_ADDR_VAR 0 4
76293: PUSH
76294: LD_EXP 108
76298: PPUSH
76299: LD_VAR 0 1
76303: PPUSH
76304: CALL 19910 0 2
76308: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
76309: LD_ADDR_VAR 0 3
76313: PUSH
76314: DOUBLE
76315: LD_EXP 109
76319: PUSH
76320: LD_VAR 0 4
76324: ARRAY
76325: INC
76326: ST_TO_ADDR
76327: LD_INT 1
76329: PUSH
76330: FOR_DOWNTO
76331: IFFALSE 76503
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
76333: LD_ADDR_VAR 0 5
76337: PUSH
76338: LD_EXP 109
76342: PUSH
76343: LD_VAR 0 4
76347: ARRAY
76348: PUSH
76349: LD_VAR 0 3
76353: ARRAY
76354: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
76355: LD_VAR 0 5
76359: PUSH
76360: LD_INT 1
76362: ARRAY
76363: PPUSH
76364: CALL_OW 302
76368: NOT
76369: PUSH
76370: LD_VAR 0 5
76374: PUSH
76375: LD_INT 1
76377: ARRAY
76378: PPUSH
76379: CALL_OW 255
76383: PUSH
76384: LD_VAR 0 1
76388: PPUSH
76389: CALL_OW 255
76393: NONEQUAL
76394: OR
76395: IFFALSE 76501
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
76397: LD_VAR 0 5
76401: PUSH
76402: LD_INT 1
76404: ARRAY
76405: PPUSH
76406: CALL_OW 305
76410: PUSH
76411: LD_VAR 0 5
76415: PUSH
76416: LD_INT 1
76418: ARRAY
76419: PPUSH
76420: CALL_OW 255
76424: PUSH
76425: LD_VAR 0 1
76429: PPUSH
76430: CALL_OW 255
76434: EQUAL
76435: AND
76436: IFFALSE 76460
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
76438: LD_VAR 0 5
76442: PUSH
76443: LD_INT 1
76445: ARRAY
76446: PPUSH
76447: LD_VAR 0 5
76451: PUSH
76452: LD_INT 2
76454: ARRAY
76455: PPUSH
76456: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
76460: LD_ADDR_EXP 109
76464: PUSH
76465: LD_EXP 109
76469: PPUSH
76470: LD_VAR 0 4
76474: PPUSH
76475: LD_EXP 109
76479: PUSH
76480: LD_VAR 0 4
76484: ARRAY
76485: PPUSH
76486: LD_VAR 0 3
76490: PPUSH
76491: CALL_OW 3
76495: PPUSH
76496: CALL_OW 1
76500: ST_TO_ADDR
// end ; end ;
76501: GO 76330
76503: POP
76504: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76505: LD_VAR 0 1
76509: PPUSH
76510: LD_EXP 109
76514: PUSH
76515: LD_VAR 0 4
76519: ARRAY
76520: PUSH
76521: LD_INT 0
76523: PLUS
76524: PPUSH
76525: CALL_OW 505
// end ;
76529: LD_VAR 0 2
76533: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
76534: LD_INT 0
76536: PPUSH
76537: PPUSH
76538: PPUSH
76539: PPUSH
// if not hack in hackTanks then
76540: LD_VAR 0 1
76544: PUSH
76545: LD_EXP 108
76549: IN
76550: NOT
76551: IFFALSE 76555
// exit ;
76553: GO 76640
// index := GetElementIndex ( hackTanks , hack ) ;
76555: LD_ADDR_VAR 0 5
76559: PUSH
76560: LD_EXP 108
76564: PPUSH
76565: LD_VAR 0 1
76569: PPUSH
76570: CALL 19910 0 2
76574: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
76575: LD_ADDR_VAR 0 4
76579: PUSH
76580: DOUBLE
76581: LD_INT 1
76583: DEC
76584: ST_TO_ADDR
76585: LD_EXP 109
76589: PUSH
76590: LD_VAR 0 5
76594: ARRAY
76595: PUSH
76596: FOR_TO
76597: IFFALSE 76638
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
76599: LD_EXP 109
76603: PUSH
76604: LD_VAR 0 5
76608: ARRAY
76609: PUSH
76610: LD_VAR 0 4
76614: ARRAY
76615: PUSH
76616: LD_INT 1
76618: ARRAY
76619: PUSH
76620: LD_VAR 0 2
76624: EQUAL
76625: IFFALSE 76636
// KillUnit ( vehicle ) ;
76627: LD_VAR 0 2
76631: PPUSH
76632: CALL_OW 66
76636: GO 76596
76638: POP
76639: POP
// end ;
76640: LD_VAR 0 3
76644: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
76645: LD_EXP 113
76649: NOT
76650: IFFALSE 76685
76652: GO 76654
76654: DISABLE
// begin initMiner := true ;
76655: LD_ADDR_EXP 113
76659: PUSH
76660: LD_INT 1
76662: ST_TO_ADDR
// minersList := [ ] ;
76663: LD_ADDR_EXP 114
76667: PUSH
76668: EMPTY
76669: ST_TO_ADDR
// minerMinesList := [ ] ;
76670: LD_ADDR_EXP 115
76674: PUSH
76675: EMPTY
76676: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
76677: LD_ADDR_EXP 116
76681: PUSH
76682: LD_INT 5
76684: ST_TO_ADDR
// end ;
76685: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
76686: LD_EXP 113
76690: PUSH
76691: LD_INT 34
76693: PUSH
76694: LD_INT 81
76696: PUSH
76697: EMPTY
76698: LIST
76699: LIST
76700: PPUSH
76701: CALL_OW 69
76705: AND
76706: IFFALSE 77167
76708: GO 76710
76710: DISABLE
76711: LD_INT 0
76713: PPUSH
76714: PPUSH
76715: PPUSH
76716: PPUSH
// begin enable ;
76717: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
76718: LD_ADDR_VAR 0 1
76722: PUSH
76723: LD_INT 34
76725: PUSH
76726: LD_INT 81
76728: PUSH
76729: EMPTY
76730: LIST
76731: LIST
76732: PPUSH
76733: CALL_OW 69
76737: PUSH
76738: FOR_IN
76739: IFFALSE 76811
// begin if not i in minersList then
76741: LD_VAR 0 1
76745: PUSH
76746: LD_EXP 114
76750: IN
76751: NOT
76752: IFFALSE 76809
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
76754: LD_ADDR_EXP 114
76758: PUSH
76759: LD_EXP 114
76763: PPUSH
76764: LD_EXP 114
76768: PUSH
76769: LD_INT 1
76771: PLUS
76772: PPUSH
76773: LD_VAR 0 1
76777: PPUSH
76778: CALL_OW 1
76782: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
76783: LD_ADDR_EXP 115
76787: PUSH
76788: LD_EXP 115
76792: PPUSH
76793: LD_EXP 115
76797: PUSH
76798: LD_INT 1
76800: PLUS
76801: PPUSH
76802: EMPTY
76803: PPUSH
76804: CALL_OW 1
76808: ST_TO_ADDR
// end end ;
76809: GO 76738
76811: POP
76812: POP
// for i := minerMinesList downto 1 do
76813: LD_ADDR_VAR 0 1
76817: PUSH
76818: DOUBLE
76819: LD_EXP 115
76823: INC
76824: ST_TO_ADDR
76825: LD_INT 1
76827: PUSH
76828: FOR_DOWNTO
76829: IFFALSE 77165
// begin if IsLive ( minersList [ i ] ) then
76831: LD_EXP 114
76835: PUSH
76836: LD_VAR 0 1
76840: ARRAY
76841: PPUSH
76842: CALL_OW 300
76846: IFFALSE 76874
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
76848: LD_EXP 114
76852: PUSH
76853: LD_VAR 0 1
76857: ARRAY
76858: PPUSH
76859: LD_EXP 115
76863: PUSH
76864: LD_VAR 0 1
76868: ARRAY
76869: PPUSH
76870: CALL_OW 505
// if not minerMinesList [ i ] then
76874: LD_EXP 115
76878: PUSH
76879: LD_VAR 0 1
76883: ARRAY
76884: NOT
76885: IFFALSE 76889
// continue ;
76887: GO 76828
// for j := minerMinesList [ i ] downto 1 do
76889: LD_ADDR_VAR 0 2
76893: PUSH
76894: DOUBLE
76895: LD_EXP 115
76899: PUSH
76900: LD_VAR 0 1
76904: ARRAY
76905: INC
76906: ST_TO_ADDR
76907: LD_INT 1
76909: PUSH
76910: FOR_DOWNTO
76911: IFFALSE 77161
// begin side := GetSide ( minersList [ i ] ) ;
76913: LD_ADDR_VAR 0 3
76917: PUSH
76918: LD_EXP 114
76922: PUSH
76923: LD_VAR 0 1
76927: ARRAY
76928: PPUSH
76929: CALL_OW 255
76933: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
76934: LD_ADDR_VAR 0 4
76938: PUSH
76939: LD_EXP 115
76943: PUSH
76944: LD_VAR 0 1
76948: ARRAY
76949: PUSH
76950: LD_VAR 0 2
76954: ARRAY
76955: PUSH
76956: LD_INT 1
76958: ARRAY
76959: PPUSH
76960: LD_EXP 115
76964: PUSH
76965: LD_VAR 0 1
76969: ARRAY
76970: PUSH
76971: LD_VAR 0 2
76975: ARRAY
76976: PUSH
76977: LD_INT 2
76979: ARRAY
76980: PPUSH
76981: CALL_OW 428
76985: ST_TO_ADDR
// if not tmp then
76986: LD_VAR 0 4
76990: NOT
76991: IFFALSE 76995
// continue ;
76993: GO 76910
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
76995: LD_VAR 0 4
76999: PUSH
77000: LD_INT 81
77002: PUSH
77003: LD_VAR 0 3
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: PPUSH
77012: CALL_OW 69
77016: IN
77017: PUSH
77018: LD_EXP 115
77022: PUSH
77023: LD_VAR 0 1
77027: ARRAY
77028: PUSH
77029: LD_VAR 0 2
77033: ARRAY
77034: PUSH
77035: LD_INT 1
77037: ARRAY
77038: PPUSH
77039: LD_EXP 115
77043: PUSH
77044: LD_VAR 0 1
77048: ARRAY
77049: PUSH
77050: LD_VAR 0 2
77054: ARRAY
77055: PUSH
77056: LD_INT 2
77058: ARRAY
77059: PPUSH
77060: CALL_OW 458
77064: AND
77065: IFFALSE 77159
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
77067: LD_EXP 115
77071: PUSH
77072: LD_VAR 0 1
77076: ARRAY
77077: PUSH
77078: LD_VAR 0 2
77082: ARRAY
77083: PUSH
77084: LD_INT 1
77086: ARRAY
77087: PPUSH
77088: LD_EXP 115
77092: PUSH
77093: LD_VAR 0 1
77097: ARRAY
77098: PUSH
77099: LD_VAR 0 2
77103: ARRAY
77104: PUSH
77105: LD_INT 2
77107: ARRAY
77108: PPUSH
77109: LD_VAR 0 3
77113: PPUSH
77114: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
77118: LD_ADDR_EXP 115
77122: PUSH
77123: LD_EXP 115
77127: PPUSH
77128: LD_VAR 0 1
77132: PPUSH
77133: LD_EXP 115
77137: PUSH
77138: LD_VAR 0 1
77142: ARRAY
77143: PPUSH
77144: LD_VAR 0 2
77148: PPUSH
77149: CALL_OW 3
77153: PPUSH
77154: CALL_OW 1
77158: ST_TO_ADDR
// end ; end ;
77159: GO 76910
77161: POP
77162: POP
// end ;
77163: GO 76828
77165: POP
77166: POP
// end ;
77167: PPOPN 4
77169: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
77170: LD_INT 0
77172: PPUSH
77173: PPUSH
// result := false ;
77174: LD_ADDR_VAR 0 4
77178: PUSH
77179: LD_INT 0
77181: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
77182: LD_VAR 0 1
77186: PPUSH
77187: CALL_OW 264
77191: PUSH
77192: LD_INT 81
77194: EQUAL
77195: NOT
77196: IFFALSE 77200
// exit ;
77198: GO 77440
// index := GetElementIndex ( minersList , unit ) ;
77200: LD_ADDR_VAR 0 5
77204: PUSH
77205: LD_EXP 114
77209: PPUSH
77210: LD_VAR 0 1
77214: PPUSH
77215: CALL 19910 0 2
77219: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
77220: LD_EXP 115
77224: PUSH
77225: LD_VAR 0 5
77229: ARRAY
77230: PUSH
77231: LD_EXP 116
77235: GREATEREQUAL
77236: IFFALSE 77240
// exit ;
77238: GO 77440
// ComMoveXY ( unit , x , y ) ;
77240: LD_VAR 0 1
77244: PPUSH
77245: LD_VAR 0 2
77249: PPUSH
77250: LD_VAR 0 3
77254: PPUSH
77255: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77259: LD_INT 35
77261: PPUSH
77262: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
77266: LD_VAR 0 1
77270: PPUSH
77271: LD_VAR 0 2
77275: PPUSH
77276: LD_VAR 0 3
77280: PPUSH
77281: CALL 51651 0 3
77285: NOT
77286: PUSH
77287: LD_VAR 0 1
77291: PPUSH
77292: CALL_OW 314
77296: AND
77297: IFFALSE 77301
// exit ;
77299: GO 77440
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
77301: LD_VAR 0 2
77305: PPUSH
77306: LD_VAR 0 3
77310: PPUSH
77311: CALL_OW 428
77315: PUSH
77316: LD_VAR 0 1
77320: EQUAL
77321: PUSH
77322: LD_VAR 0 1
77326: PPUSH
77327: CALL_OW 314
77331: NOT
77332: AND
77333: IFFALSE 77259
// PlaySoundXY ( x , y , PlantMine ) ;
77335: LD_VAR 0 2
77339: PPUSH
77340: LD_VAR 0 3
77344: PPUSH
77345: LD_STRING PlantMine
77347: PPUSH
77348: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
77352: LD_VAR 0 2
77356: PPUSH
77357: LD_VAR 0 3
77361: PPUSH
77362: LD_VAR 0 1
77366: PPUSH
77367: CALL_OW 255
77371: PPUSH
77372: LD_INT 0
77374: PPUSH
77375: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
77379: LD_ADDR_EXP 115
77383: PUSH
77384: LD_EXP 115
77388: PPUSH
77389: LD_VAR 0 5
77393: PUSH
77394: LD_EXP 115
77398: PUSH
77399: LD_VAR 0 5
77403: ARRAY
77404: PUSH
77405: LD_INT 1
77407: PLUS
77408: PUSH
77409: EMPTY
77410: LIST
77411: LIST
77412: PPUSH
77413: LD_VAR 0 2
77417: PUSH
77418: LD_VAR 0 3
77422: PUSH
77423: EMPTY
77424: LIST
77425: LIST
77426: PPUSH
77427: CALL 20125 0 3
77431: ST_TO_ADDR
// result := true ;
77432: LD_ADDR_VAR 0 4
77436: PUSH
77437: LD_INT 1
77439: ST_TO_ADDR
// end ;
77440: LD_VAR 0 4
77444: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
77445: LD_INT 0
77447: PPUSH
77448: PPUSH
77449: PPUSH
// if not unit in minersList then
77450: LD_VAR 0 1
77454: PUSH
77455: LD_EXP 114
77459: IN
77460: NOT
77461: IFFALSE 77465
// exit ;
77463: GO 77857
// index := GetElementIndex ( minersList , unit ) ;
77465: LD_ADDR_VAR 0 6
77469: PUSH
77470: LD_EXP 114
77474: PPUSH
77475: LD_VAR 0 1
77479: PPUSH
77480: CALL 19910 0 2
77484: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
77485: LD_ADDR_VAR 0 5
77489: PUSH
77490: DOUBLE
77491: LD_EXP 115
77495: PUSH
77496: LD_VAR 0 6
77500: ARRAY
77501: INC
77502: ST_TO_ADDR
77503: LD_INT 1
77505: PUSH
77506: FOR_DOWNTO
77507: IFFALSE 77668
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
77509: LD_EXP 115
77513: PUSH
77514: LD_VAR 0 6
77518: ARRAY
77519: PUSH
77520: LD_VAR 0 5
77524: ARRAY
77525: PUSH
77526: LD_INT 1
77528: ARRAY
77529: PUSH
77530: LD_VAR 0 2
77534: EQUAL
77535: PUSH
77536: LD_EXP 115
77540: PUSH
77541: LD_VAR 0 6
77545: ARRAY
77546: PUSH
77547: LD_VAR 0 5
77551: ARRAY
77552: PUSH
77553: LD_INT 2
77555: ARRAY
77556: PUSH
77557: LD_VAR 0 3
77561: EQUAL
77562: AND
77563: IFFALSE 77666
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77565: LD_EXP 115
77569: PUSH
77570: LD_VAR 0 6
77574: ARRAY
77575: PUSH
77576: LD_VAR 0 5
77580: ARRAY
77581: PUSH
77582: LD_INT 1
77584: ARRAY
77585: PPUSH
77586: LD_EXP 115
77590: PUSH
77591: LD_VAR 0 6
77595: ARRAY
77596: PUSH
77597: LD_VAR 0 5
77601: ARRAY
77602: PUSH
77603: LD_INT 2
77605: ARRAY
77606: PPUSH
77607: LD_VAR 0 1
77611: PPUSH
77612: CALL_OW 255
77616: PPUSH
77617: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77621: LD_ADDR_EXP 115
77625: PUSH
77626: LD_EXP 115
77630: PPUSH
77631: LD_VAR 0 6
77635: PPUSH
77636: LD_EXP 115
77640: PUSH
77641: LD_VAR 0 6
77645: ARRAY
77646: PPUSH
77647: LD_VAR 0 5
77651: PPUSH
77652: CALL_OW 3
77656: PPUSH
77657: CALL_OW 1
77661: ST_TO_ADDR
// exit ;
77662: POP
77663: POP
77664: GO 77857
// end ; end ;
77666: GO 77506
77668: POP
77669: POP
// for i := minerMinesList [ index ] downto 1 do
77670: LD_ADDR_VAR 0 5
77674: PUSH
77675: DOUBLE
77676: LD_EXP 115
77680: PUSH
77681: LD_VAR 0 6
77685: ARRAY
77686: INC
77687: ST_TO_ADDR
77688: LD_INT 1
77690: PUSH
77691: FOR_DOWNTO
77692: IFFALSE 77855
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
77694: LD_EXP 115
77698: PUSH
77699: LD_VAR 0 6
77703: ARRAY
77704: PUSH
77705: LD_VAR 0 5
77709: ARRAY
77710: PUSH
77711: LD_INT 1
77713: ARRAY
77714: PPUSH
77715: LD_EXP 115
77719: PUSH
77720: LD_VAR 0 6
77724: ARRAY
77725: PUSH
77726: LD_VAR 0 5
77730: ARRAY
77731: PUSH
77732: LD_INT 2
77734: ARRAY
77735: PPUSH
77736: LD_VAR 0 2
77740: PPUSH
77741: LD_VAR 0 3
77745: PPUSH
77746: CALL_OW 298
77750: PUSH
77751: LD_INT 6
77753: LESS
77754: IFFALSE 77853
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77756: LD_EXP 115
77760: PUSH
77761: LD_VAR 0 6
77765: ARRAY
77766: PUSH
77767: LD_VAR 0 5
77771: ARRAY
77772: PUSH
77773: LD_INT 1
77775: ARRAY
77776: PPUSH
77777: LD_EXP 115
77781: PUSH
77782: LD_VAR 0 6
77786: ARRAY
77787: PUSH
77788: LD_VAR 0 5
77792: ARRAY
77793: PUSH
77794: LD_INT 2
77796: ARRAY
77797: PPUSH
77798: LD_VAR 0 1
77802: PPUSH
77803: CALL_OW 255
77807: PPUSH
77808: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77812: LD_ADDR_EXP 115
77816: PUSH
77817: LD_EXP 115
77821: PPUSH
77822: LD_VAR 0 6
77826: PPUSH
77827: LD_EXP 115
77831: PUSH
77832: LD_VAR 0 6
77836: ARRAY
77837: PPUSH
77838: LD_VAR 0 5
77842: PPUSH
77843: CALL_OW 3
77847: PPUSH
77848: CALL_OW 1
77852: ST_TO_ADDR
// end ; end ;
77853: GO 77691
77855: POP
77856: POP
// end ;
77857: LD_VAR 0 4
77861: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
77862: LD_INT 0
77864: PPUSH
77865: PPUSH
77866: PPUSH
77867: PPUSH
77868: PPUSH
77869: PPUSH
77870: PPUSH
77871: PPUSH
77872: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
77873: LD_VAR 0 1
77877: PPUSH
77878: CALL_OW 264
77882: PUSH
77883: LD_INT 81
77885: EQUAL
77886: NOT
77887: PUSH
77888: LD_VAR 0 1
77892: PUSH
77893: LD_EXP 114
77897: IN
77898: NOT
77899: OR
77900: IFFALSE 77904
// exit ;
77902: GO 78226
// index := GetElementIndex ( minersList , unit ) ;
77904: LD_ADDR_VAR 0 6
77908: PUSH
77909: LD_EXP 114
77913: PPUSH
77914: LD_VAR 0 1
77918: PPUSH
77919: CALL 19910 0 2
77923: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
77924: LD_ADDR_VAR 0 8
77928: PUSH
77929: LD_EXP 116
77933: PUSH
77934: LD_EXP 115
77938: PUSH
77939: LD_VAR 0 6
77943: ARRAY
77944: MINUS
77945: ST_TO_ADDR
// if not minesFreeAmount then
77946: LD_VAR 0 8
77950: NOT
77951: IFFALSE 77955
// exit ;
77953: GO 78226
// tmp := [ ] ;
77955: LD_ADDR_VAR 0 7
77959: PUSH
77960: EMPTY
77961: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
77962: LD_ADDR_VAR 0 5
77966: PUSH
77967: DOUBLE
77968: LD_INT 1
77970: DEC
77971: ST_TO_ADDR
77972: LD_VAR 0 8
77976: PUSH
77977: FOR_TO
77978: IFFALSE 78173
// begin _d := rand ( 0 , 5 ) ;
77980: LD_ADDR_VAR 0 11
77984: PUSH
77985: LD_INT 0
77987: PPUSH
77988: LD_INT 5
77990: PPUSH
77991: CALL_OW 12
77995: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
77996: LD_ADDR_VAR 0 12
78000: PUSH
78001: LD_INT 2
78003: PPUSH
78004: LD_INT 6
78006: PPUSH
78007: CALL_OW 12
78011: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
78012: LD_ADDR_VAR 0 9
78016: PUSH
78017: LD_VAR 0 2
78021: PPUSH
78022: LD_VAR 0 11
78026: PPUSH
78027: LD_VAR 0 12
78031: PPUSH
78032: CALL_OW 272
78036: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
78037: LD_ADDR_VAR 0 10
78041: PUSH
78042: LD_VAR 0 3
78046: PPUSH
78047: LD_VAR 0 11
78051: PPUSH
78052: LD_VAR 0 12
78056: PPUSH
78057: CALL_OW 273
78061: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
78062: LD_VAR 0 9
78066: PPUSH
78067: LD_VAR 0 10
78071: PPUSH
78072: CALL_OW 488
78076: PUSH
78077: LD_VAR 0 9
78081: PUSH
78082: LD_VAR 0 10
78086: PUSH
78087: EMPTY
78088: LIST
78089: LIST
78090: PUSH
78091: LD_VAR 0 7
78095: IN
78096: NOT
78097: AND
78098: PUSH
78099: LD_VAR 0 9
78103: PPUSH
78104: LD_VAR 0 10
78108: PPUSH
78109: CALL_OW 458
78113: NOT
78114: AND
78115: IFFALSE 78157
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
78117: LD_ADDR_VAR 0 7
78121: PUSH
78122: LD_VAR 0 7
78126: PPUSH
78127: LD_VAR 0 7
78131: PUSH
78132: LD_INT 1
78134: PLUS
78135: PPUSH
78136: LD_VAR 0 9
78140: PUSH
78141: LD_VAR 0 10
78145: PUSH
78146: EMPTY
78147: LIST
78148: LIST
78149: PPUSH
78150: CALL_OW 1
78154: ST_TO_ADDR
78155: GO 78171
// i := i - 1 ;
78157: LD_ADDR_VAR 0 5
78161: PUSH
78162: LD_VAR 0 5
78166: PUSH
78167: LD_INT 1
78169: MINUS
78170: ST_TO_ADDR
// end ;
78171: GO 77977
78173: POP
78174: POP
// for i in tmp do
78175: LD_ADDR_VAR 0 5
78179: PUSH
78180: LD_VAR 0 7
78184: PUSH
78185: FOR_IN
78186: IFFALSE 78224
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
78188: LD_VAR 0 1
78192: PPUSH
78193: LD_VAR 0 5
78197: PUSH
78198: LD_INT 1
78200: ARRAY
78201: PPUSH
78202: LD_VAR 0 5
78206: PUSH
78207: LD_INT 2
78209: ARRAY
78210: PPUSH
78211: CALL 77170 0 3
78215: NOT
78216: IFFALSE 78222
// exit ;
78218: POP
78219: POP
78220: GO 78226
78222: GO 78185
78224: POP
78225: POP
// end ;
78226: LD_VAR 0 4
78230: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
78231: LD_INT 0
78233: PPUSH
78234: PPUSH
78235: PPUSH
78236: PPUSH
78237: PPUSH
78238: PPUSH
78239: PPUSH
// if not GetClass ( unit ) = class_sniper then
78240: LD_VAR 0 1
78244: PPUSH
78245: CALL_OW 257
78249: PUSH
78250: LD_INT 5
78252: EQUAL
78253: NOT
78254: IFFALSE 78258
// exit ;
78256: GO 78646
// dist := 8 ;
78258: LD_ADDR_VAR 0 5
78262: PUSH
78263: LD_INT 8
78265: ST_TO_ADDR
// viewRange := 12 ;
78266: LD_ADDR_VAR 0 7
78270: PUSH
78271: LD_INT 12
78273: ST_TO_ADDR
// side := GetSide ( unit ) ;
78274: LD_ADDR_VAR 0 6
78278: PUSH
78279: LD_VAR 0 1
78283: PPUSH
78284: CALL_OW 255
78288: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
78289: LD_INT 61
78291: PPUSH
78292: LD_VAR 0 6
78296: PPUSH
78297: CALL_OW 321
78301: PUSH
78302: LD_INT 2
78304: EQUAL
78305: IFFALSE 78315
// viewRange := 16 ;
78307: LD_ADDR_VAR 0 7
78311: PUSH
78312: LD_INT 16
78314: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
78315: LD_VAR 0 1
78319: PPUSH
78320: LD_VAR 0 2
78324: PPUSH
78325: LD_VAR 0 3
78329: PPUSH
78330: CALL_OW 297
78334: PUSH
78335: LD_VAR 0 5
78339: GREATER
78340: IFFALSE 78419
// begin ComMoveXY ( unit , x , y ) ;
78342: LD_VAR 0 1
78346: PPUSH
78347: LD_VAR 0 2
78351: PPUSH
78352: LD_VAR 0 3
78356: PPUSH
78357: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78361: LD_INT 35
78363: PPUSH
78364: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
78368: LD_VAR 0 1
78372: PPUSH
78373: LD_VAR 0 2
78377: PPUSH
78378: LD_VAR 0 3
78382: PPUSH
78383: CALL 51651 0 3
78387: NOT
78388: IFFALSE 78392
// exit ;
78390: GO 78646
// until GetDistUnitXY ( unit , x , y ) < dist ;
78392: LD_VAR 0 1
78396: PPUSH
78397: LD_VAR 0 2
78401: PPUSH
78402: LD_VAR 0 3
78406: PPUSH
78407: CALL_OW 297
78411: PUSH
78412: LD_VAR 0 5
78416: LESS
78417: IFFALSE 78361
// end ; ComTurnXY ( unit , x , y ) ;
78419: LD_VAR 0 1
78423: PPUSH
78424: LD_VAR 0 2
78428: PPUSH
78429: LD_VAR 0 3
78433: PPUSH
78434: CALL_OW 118
// wait ( 5 ) ;
78438: LD_INT 5
78440: PPUSH
78441: CALL_OW 67
// _d := GetDir ( unit ) ;
78445: LD_ADDR_VAR 0 10
78449: PUSH
78450: LD_VAR 0 1
78454: PPUSH
78455: CALL_OW 254
78459: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
78460: LD_ADDR_VAR 0 8
78464: PUSH
78465: LD_VAR 0 1
78469: PPUSH
78470: CALL_OW 250
78474: PPUSH
78475: LD_VAR 0 10
78479: PPUSH
78480: LD_VAR 0 5
78484: PPUSH
78485: CALL_OW 272
78489: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
78490: LD_ADDR_VAR 0 9
78494: PUSH
78495: LD_VAR 0 1
78499: PPUSH
78500: CALL_OW 251
78504: PPUSH
78505: LD_VAR 0 10
78509: PPUSH
78510: LD_VAR 0 5
78514: PPUSH
78515: CALL_OW 273
78519: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78520: LD_VAR 0 8
78524: PPUSH
78525: LD_VAR 0 9
78529: PPUSH
78530: CALL_OW 488
78534: NOT
78535: IFFALSE 78539
// exit ;
78537: GO 78646
// ComAnimCustom ( unit , 1 ) ;
78539: LD_VAR 0 1
78543: PPUSH
78544: LD_INT 1
78546: PPUSH
78547: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
78551: LD_VAR 0 8
78555: PPUSH
78556: LD_VAR 0 9
78560: PPUSH
78561: LD_VAR 0 6
78565: PPUSH
78566: LD_VAR 0 7
78570: PPUSH
78571: CALL_OW 330
// repeat wait ( 1 ) ;
78575: LD_INT 1
78577: PPUSH
78578: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
78582: LD_VAR 0 1
78586: PPUSH
78587: CALL_OW 316
78591: PUSH
78592: LD_VAR 0 1
78596: PPUSH
78597: CALL_OW 314
78601: OR
78602: PUSH
78603: LD_VAR 0 1
78607: PPUSH
78608: CALL_OW 302
78612: NOT
78613: OR
78614: PUSH
78615: LD_VAR 0 1
78619: PPUSH
78620: CALL_OW 301
78624: OR
78625: IFFALSE 78575
// RemoveSeeing ( _x , _y , side ) ;
78627: LD_VAR 0 8
78631: PPUSH
78632: LD_VAR 0 9
78636: PPUSH
78637: LD_VAR 0 6
78641: PPUSH
78642: CALL_OW 331
// end ; end_of_file
78646: LD_VAR 0 4
78650: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78651: LD_VAR 0 1
78655: PPUSH
78656: LD_VAR 0 2
78660: PPUSH
78661: LD_VAR 0 3
78665: PPUSH
78666: LD_VAR 0 4
78670: PPUSH
78671: LD_VAR 0 5
78675: PPUSH
78676: LD_VAR 0 6
78680: PPUSH
78681: CALL 58110 0 6
// end ;
78685: PPOPN 6
78687: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78688: LD_INT 0
78690: PPUSH
// begin if not units then
78691: LD_VAR 0 1
78695: NOT
78696: IFFALSE 78700
// exit ;
78698: GO 78700
// end ;
78700: PPOPN 7
78702: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78703: CALL 57997 0 0
// end ; end_of_file
78707: PPOPN 1
78709: END
