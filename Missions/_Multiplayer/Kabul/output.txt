// starting begin Game_Start := false ;
   0: LD_ADDR_EXP 9
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// Randomize ;
   8: CALL_OW 10
// Init ( ) ;
  12: CALL 112 0 0
// InitBot ( ) ;
  16: CALL 3375 0 0
// Game_Start := true ;
  20: LD_ADDR_EXP 9
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// end ;
  28: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , bot_side ] ) = 0 do
  29: LD_EXP 9
  33: PUSH
  34: LD_INT 22
  36: PUSH
  37: LD_EXP 8
  41: PUSH
  42: EMPTY
  43: LIST
  44: LIST
  45: PPUSH
  46: CALL_OW 69
  50: PUSH
  51: LD_INT 0
  53: EQUAL
  54: AND
  55: IFFALSE 64
  57: GO 59
  59: DISABLE
// YouWinInMultiplayer ;
  60: CALL_OW 106
  64: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , your_side ] ) = 0 do
  65: LD_EXP 9
  69: PUSH
  70: LD_INT 22
  72: PUSH
  73: LD_OWVAR 2
  77: PUSH
  78: EMPTY
  79: LIST
  80: LIST
  81: PPUSH
  82: CALL_OW 69
  86: PUSH
  87: LD_INT 0
  89: EQUAL
  90: AND
  91: IFFALSE 111
  93: GO 95
  95: DISABLE
// begin Multiplayer_Loose_Message ;
  96: CALL_OW 521
// Wait ( 0 0$03 ) ;
 100: LD_INT 105
 102: PPUSH
 103: CALL_OW 67
// YouLostInMultiplayer ;
 107: CALL_OW 107
// end ;
 111: END
// export Game_Type , Side_Positions , Side_Teams , Side_Nations , Teams ; export Team_Game , Side_Start , Bot_Side , Game_Start ; export number_of_people , skill_level , crates_spawn , respawning_time_min , respawning_time_max , amount_of_apeman ; export definitions , mines_list , apeman_areas , patrols , attackers , to_produce , veh_counter , queue_codes , rng , target , handicap , attackers_tmp ; export function Init ( ) ; var i , j ; begin
 112: LD_INT 0
 114: PPUSH
 115: PPUSH
 116: PPUSH
// definitions := [ ] ;
 117: LD_ADDR_EXP 16
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// if Multiplayer then
 124: LD_OWVAR 4
 128: IFFALSE 306
// begin Game_Type := mp_game_type ;
 130: LD_ADDR_EXP 1
 134: PUSH
 135: LD_OWVAR 6
 139: ST_TO_ADDR
// Your_Side := mp_player_side ;
 140: LD_ADDR_OWVAR 2
 144: PUSH
 145: LD_OWVAR 7
 149: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
 150: LD_ADDR_EXP 2
 154: PUSH
 155: LD_OWVAR 17
 159: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 160: LD_ADDR_EXP 3
 164: PUSH
 165: LD_OWVAR 15
 169: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 170: LD_ADDR_EXP 4
 174: PUSH
 175: LD_OWVAR 16
 179: ST_TO_ADDR
// Teams := [ [ ] ] ;
 180: LD_ADDR_EXP 5
 184: PUSH
 185: EMPTY
 186: PUSH
 187: EMPTY
 188: LIST
 189: ST_TO_ADDR
// for i in mp_teams do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: LD_OWVAR 12
 199: PUSH
 200: FOR_IN
 201: IFFALSE 244
// if i then
 203: LD_VAR 0 2
 207: IFFALSE 242
// Teams := Replace ( Teams , 1 , Teams [ 1 ] union i ) ;
 209: LD_ADDR_EXP 5
 213: PUSH
 214: LD_EXP 5
 218: PPUSH
 219: LD_INT 1
 221: PPUSH
 222: LD_EXP 5
 226: PUSH
 227: LD_INT 1
 229: ARRAY
 230: PUSH
 231: LD_VAR 0 2
 235: UNION
 236: PPUSH
 237: CALL_OW 1
 241: ST_TO_ADDR
 242: GO 200
 244: POP
 245: POP
// for i = 0 to 6 do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 0
 254: DEC
 255: ST_TO_ADDR
 256: LD_INT 6
 258: PUSH
 259: FOR_TO
 260: IFFALSE 302
// definitions := Insert ( definitions , definitions + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 262: LD_ADDR_EXP 16
 266: PUSH
 267: LD_EXP 16
 271: PPUSH
 272: LD_EXP 16
 276: PUSH
 277: LD_INT 1
 279: PLUS
 280: PPUSH
 281: LD_VAR 0 2
 285: PPUSH
 286: CALL_OW 426
 290: PUSH
 291: LD_INT 1
 293: PLUS
 294: PPUSH
 295: CALL_OW 2
 299: ST_TO_ADDR
 300: GO 259
 302: POP
 303: POP
// end else
 304: GO 461
// begin Game_Type := 1 ;
 306: LD_ADDR_EXP 1
 310: PUSH
 311: LD_INT 1
 313: ST_TO_ADDR
// Your_Side := 2 ;
 314: LD_ADDR_OWVAR 2
 318: PUSH
 319: LD_INT 2
 321: ST_TO_ADDR
// Side_Positions := [ 1 , 0 , 0 , 0 , 2 , 0 , 3 , 0 ] ;
 322: LD_ADDR_EXP 2
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: LD_INT 0
 332: PUSH
 333: LD_INT 0
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 2
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: LD_INT 3
 347: PUSH
 348: LD_INT 0
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: ST_TO_ADDR
// Side_Teams := [ 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 ] ;
 361: LD_ADDR_EXP 3
 365: PUSH
 366: LD_INT 1
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 1
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: LD_INT 1
 386: PUSH
 387: LD_INT 0
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: ST_TO_ADDR
// Side_Nations := [ 3 , 0 , 0 , 0 , 3 , 0 , 3 , 0 ] ;
 400: LD_ADDR_EXP 4
 404: PUSH
 405: LD_INT 3
 407: PUSH
 408: LD_INT 0
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 0
 416: PUSH
 417: LD_INT 3
 419: PUSH
 420: LD_INT 0
 422: PUSH
 423: LD_INT 3
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: ST_TO_ADDR
// Teams := [ [ 1 , 5 , 7 ] ] ;
 439: LD_ADDR_EXP 5
 443: PUSH
 444: LD_INT 1
 446: PUSH
 447: LD_INT 5
 449: PUSH
 450: LD_INT 7
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: ST_TO_ADDR
// end ; Side_Start := [ [ 203 , 174 ] , [ 114 , 171 ] , [ 26 , 44 ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
 461: LD_ADDR_EXP 7
 465: PUSH
 466: LD_INT 203
 468: PUSH
 469: LD_INT 174
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 114
 478: PUSH
 479: LD_INT 171
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: LD_INT 26
 488: PUSH
 489: LD_INT 44
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: PUSH
 496: EMPTY
 497: PUSH
 498: EMPTY
 499: PUSH
 500: EMPTY
 501: PUSH
 502: EMPTY
 503: PUSH
 504: EMPTY
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: ST_TO_ADDR
// Bot_Side := 2 ;
 516: LD_ADDR_EXP 8
 520: PUSH
 521: LD_INT 2
 523: ST_TO_ADDR
// for i = 1 to 8 do
 524: LD_ADDR_VAR 0 2
 528: PUSH
 529: DOUBLE
 530: LD_INT 1
 532: DEC
 533: ST_TO_ADDR
 534: LD_INT 8
 536: PUSH
 537: FOR_TO
 538: IFFALSE 632
// begin if Multiplayer_GetPlayerIsSpec ( i ) or Multiplayer_GetPlayerIsComp ( i ) then
 540: LD_VAR 0 2
 544: PPUSH
 545: CALL_OW 530
 549: PUSH
 550: LD_VAR 0 2
 554: PPUSH
 555: CALL_OW 532
 559: OR
 560: IFFALSE 585
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 562: LD_ADDR_EXP 2
 566: PUSH
 567: LD_EXP 2
 571: PPUSH
 572: LD_VAR 0 2
 576: PPUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 1
 584: ST_TO_ADDR
// end ; if Side_Nations [ i ] and Side_Nations <> 3 then
 585: LD_EXP 4
 589: PUSH
 590: LD_VAR 0 2
 594: ARRAY
 595: PUSH
 596: LD_EXP 4
 600: PUSH
 601: LD_INT 3
 603: NONEQUAL
 604: AND
 605: IFFALSE 630
// Side_Nations := Replace ( Side_Nations , i , 3 ) ;
 607: LD_ADDR_EXP 4
 611: PUSH
 612: LD_EXP 4
 616: PPUSH
 617: LD_VAR 0 2
 621: PPUSH
 622: LD_INT 3
 624: PPUSH
 625: CALL_OW 1
 629: ST_TO_ADDR
// end ;
 630: GO 537
 632: POP
 633: POP
// if bot_side = 2 and Side_Positions [ 2 ] then
 634: LD_EXP 8
 638: PUSH
 639: LD_INT 2
 641: EQUAL
 642: PUSH
 643: LD_EXP 2
 647: PUSH
 648: LD_INT 2
 650: ARRAY
 651: AND
 652: IFFALSE 662
// bot_side := 5 ;
 654: LD_ADDR_EXP 8
 658: PUSH
 659: LD_INT 5
 661: ST_TO_ADDR
// if bot_side = 5 and Side_Positions [ 5 ] then
 662: LD_EXP 8
 666: PUSH
 667: LD_INT 5
 669: EQUAL
 670: PUSH
 671: LD_EXP 2
 675: PUSH
 676: LD_INT 5
 678: ARRAY
 679: AND
 680: IFFALSE 690
// bot_side := 8 ;
 682: LD_ADDR_EXP 8
 686: PUSH
 687: LD_INT 8
 689: ST_TO_ADDR
// Team_Game := true ;
 690: LD_ADDR_EXP 6
 694: PUSH
 695: LD_INT 1
 697: ST_TO_ADDR
// for i = 1 to 8 do
 698: LD_ADDR_VAR 0 2
 702: PUSH
 703: DOUBLE
 704: LD_INT 1
 706: DEC
 707: ST_TO_ADDR
 708: LD_INT 8
 710: PUSH
 711: FOR_TO
 712: IFFALSE 748
// if i <> bot_side then
 714: LD_VAR 0 2
 718: PUSH
 719: LD_EXP 8
 723: NONEQUAL
 724: IFFALSE 746
// SetAttitude ( i , bot_side , att_enemy , true ) ;
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_EXP 8
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: LD_INT 1
 741: PPUSH
 742: CALL_OW 80
 746: GO 711
 748: POP
 749: POP
// for i := 2 to Teams [ 1 ] do
 750: LD_ADDR_VAR 0 2
 754: PUSH
 755: DOUBLE
 756: LD_INT 2
 758: DEC
 759: ST_TO_ADDR
 760: LD_EXP 5
 764: PUSH
 765: LD_INT 1
 767: ARRAY
 768: PUSH
 769: FOR_TO
 770: IFFALSE 844
// begin ChangeSideFog ( Teams [ 1 ] [ i ] , Teams [ 1 ] [ 1 ] ) ;
 772: LD_EXP 5
 776: PUSH
 777: LD_INT 1
 779: ARRAY
 780: PUSH
 781: LD_VAR 0 2
 785: ARRAY
 786: PPUSH
 787: LD_EXP 5
 791: PUSH
 792: LD_INT 1
 794: ARRAY
 795: PUSH
 796: LD_INT 1
 798: ARRAY
 799: PPUSH
 800: CALL_OW 343
// SetAttitude ( Teams [ 1 ] [ i ] , Teams [ 1 ] [ 1 ] , att_friend , true ) ;
 804: LD_EXP 5
 808: PUSH
 809: LD_INT 1
 811: ARRAY
 812: PUSH
 813: LD_VAR 0 2
 817: ARRAY
 818: PPUSH
 819: LD_EXP 5
 823: PUSH
 824: LD_INT 1
 826: ARRAY
 827: PUSH
 828: LD_INT 1
 830: ARRAY
 831: PPUSH
 832: LD_INT 1
 834: PPUSH
 835: LD_INT 1
 837: PPUSH
 838: CALL_OW 80
// end ;
 842: GO 769
 844: POP
 845: POP
// if not Multiplayer then
 846: LD_OWVAR 4
 850: NOT
 851: IFFALSE 888
// definitions := [ 1 , 1 , 1 , 1 , 2 , 3 , 3 ] ;
 853: LD_ADDR_EXP 16
 857: PUSH
 858: LD_INT 1
 860: PUSH
 861: LD_INT 1
 863: PUSH
 864: LD_INT 1
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 2
 872: PUSH
 873: LD_INT 3
 875: PUSH
 876: LD_INT 3
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ definitions [ 1 ] ] ;
 888: LD_ADDR_EXP 10
 892: PUSH
 893: LD_INT 9
 895: PUSH
 896: LD_INT 12
 898: PUSH
 899: LD_INT 15
 901: PUSH
 902: LD_INT 24
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_EXP 16
 915: PUSH
 916: LD_INT 1
 918: ARRAY
 919: ARRAY
 920: ST_TO_ADDR
// skill_level := [ 2 , 4 , 6 , 8 ] [ definitions [ 2 ] ] ;
 921: LD_ADDR_EXP 11
 925: PUSH
 926: LD_INT 2
 928: PUSH
 929: LD_INT 4
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: LD_INT 8
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PUSH
 944: LD_EXP 16
 948: PUSH
 949: LD_INT 2
 951: ARRAY
 952: ARRAY
 953: ST_TO_ADDR
// crates_spawn := [ 0 0$20 , 0 0$15 , 0 0$10 , 0 0$07 ] [ definitions [ 3 ] ] ;
 954: LD_ADDR_EXP 12
 958: PUSH
 959: LD_INT 700
 961: PUSH
 962: LD_INT 525
 964: PUSH
 965: LD_INT 350
 967: PUSH
 968: LD_INT 245
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: PUSH
 977: LD_EXP 16
 981: PUSH
 982: LD_INT 3
 984: ARRAY
 985: ARRAY
 986: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ definitions [ 4 ] ] ;
 987: LD_ADDR_EXP 13
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 10500
 997: PUSH
 998: LD_INT 6300
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: PUSH
1006: LD_EXP 16
1010: PUSH
1011: LD_INT 4
1013: ARRAY
1014: ARRAY
1015: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ definitions [ 4 ] ] ;
1016: LD_ADDR_EXP 14
1020: PUSH
1021: LD_INT 0
1023: PUSH
1024: LD_INT 31500
1026: PUSH
1027: LD_INT 10500
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_EXP 16
1039: PUSH
1040: LD_INT 4
1042: ARRAY
1043: ARRAY
1044: ST_TO_ADDR
// amount_of_apeman := [ 0 , 3 , 5 , 7 ] [ definitions [ 5 ] ] ;
1045: LD_ADDR_EXP 15
1049: PUSH
1050: LD_INT 0
1052: PUSH
1053: LD_INT 3
1055: PUSH
1056: LD_INT 5
1058: PUSH
1059: LD_INT 7
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: PUSH
1068: LD_EXP 16
1072: PUSH
1073: LD_INT 5
1075: ARRAY
1076: ARRAY
1077: ST_TO_ADDR
// difficulty := [ 1 , 2 , 3 ] [ definitions [ 6 ] ] ;
1078: LD_ADDR_OWVAR 67
1082: PUSH
1083: LD_INT 1
1085: PUSH
1086: LD_INT 2
1088: PUSH
1089: LD_INT 3
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: LIST
1096: PUSH
1097: LD_EXP 16
1101: PUSH
1102: LD_INT 6
1104: ARRAY
1105: ARRAY
1106: ST_TO_ADDR
// handicap := [ 0 , 1 , 2 ] [ definitions [ 7 ] ] ;
1107: LD_ADDR_EXP 26
1111: PUSH
1112: LD_INT 0
1114: PUSH
1115: LD_INT 1
1117: PUSH
1118: LD_INT 2
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_EXP 16
1130: PUSH
1131: LD_INT 7
1133: ARRAY
1134: ARRAY
1135: ST_TO_ADDR
// queue_codes := [ 11353 , 12244 , 44444 , 12345 , 43413 , 14152 ] ;
1136: LD_ADDR_EXP 23
1140: PUSH
1141: LD_INT 11353
1143: PUSH
1144: LD_INT 12244
1146: PUSH
1147: LD_INT 44444
1149: PUSH
1150: LD_INT 12345
1152: PUSH
1153: LD_INT 43413
1155: PUSH
1156: LD_INT 14152
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: ST_TO_ADDR
// rng := Rand ( 1 , 6 ) ;
1167: LD_ADDR_EXP 24
1171: PUSH
1172: LD_INT 1
1174: PPUSH
1175: LD_INT 6
1177: PPUSH
1178: CALL_OW 12
1182: ST_TO_ADDR
// if bot_side <> 2 then
1183: LD_EXP 8
1187: PUSH
1188: LD_INT 2
1190: NONEQUAL
1191: IFFALSE 1234
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
1193: LD_ADDR_VAR 0 2
1197: PUSH
1198: LD_INT 22
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: PPUSH
1208: CALL_OW 69
1212: PUSH
1213: FOR_IN
1214: IFFALSE 1232
// SetSide ( i , bot_side ) ;
1216: LD_VAR 0 2
1220: PPUSH
1221: LD_EXP 8
1225: PPUSH
1226: CALL_OW 235
1230: GO 1213
1232: POP
1233: POP
// ResetFog ;
1234: CALL_OW 335
// PreparePeople ( ) ;
1238: CALL 2122 0 0
// apeman_areas := [ ape1 , ape2 , ape3 ] ;
1242: LD_ADDR_EXP 18
1246: PUSH
1247: LD_INT 14
1249: PUSH
1250: LD_INT 15
1252: PUSH
1253: LD_INT 16
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: ST_TO_ADDR
// if amount_of_apeman then
1261: LD_EXP 15
1265: IFFALSE 1315
// for j in apeman_areas do
1267: LD_ADDR_VAR 0 3
1271: PUSH
1272: LD_EXP 18
1276: PUSH
1277: FOR_IN
1278: IFFALSE 1313
// for i = 1 to amount_of_apeman do
1280: LD_ADDR_VAR 0 2
1284: PUSH
1285: DOUBLE
1286: LD_INT 1
1288: DEC
1289: ST_TO_ADDR
1290: LD_EXP 15
1294: PUSH
1295: FOR_TO
1296: IFFALSE 1309
// AddApeman ( j ) ;
1298: LD_VAR 0 3
1302: PPUSH
1303: CALL 3071 0 1
1307: GO 1295
1309: POP
1310: POP
1311: GO 1277
1313: POP
1314: POP
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
1315: LD_INT 22
1317: PUSH
1318: LD_OWVAR 2
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PPUSH
1327: CALL_OW 69
1331: PUSH
1332: LD_INT 1
1334: ARRAY
1335: PPUSH
1336: CALL_OW 87
// disable ( 17 ) ;
1340: LD_INT 17
1342: DISABLE_MARKED
// end ;
1343: LD_VAR 0 1
1347: RET
// every 2 2$40 trigger game_start do
1348: LD_EXP 9
1352: IFFALSE 1408
1354: GO 1356
1356: DISABLE
// begin CreateCratesArea ( tick mod 5 + 1 , kabul_crates , true ) ;
1357: LD_OWVAR 1
1361: PUSH
1362: LD_INT 5
1364: MOD
1365: PUSH
1366: LD_INT 1
1368: PLUS
1369: PPUSH
1370: LD_INT 13
1372: PPUSH
1373: LD_INT 1
1375: PPUSH
1376: CALL_OW 55
// Wait ( 0 0$15 ) ;
1380: LD_INT 525
1382: PPUSH
1383: CALL_OW 67
// CreateCratesAnywhere ( tick mod 5 + 1 , true ) ;
1387: LD_OWVAR 1
1391: PUSH
1392: LD_INT 5
1394: MOD
1395: PUSH
1396: LD_INT 1
1398: PLUS
1399: PPUSH
1400: LD_INT 1
1402: PPUSH
1403: CALL_OW 57
// enable ;
1407: ENABLE
// end ;
1408: END
// every 0 0$01 + 0 0$10 trigger game_start do var cr , cr_queue ;
1409: LD_EXP 9
1413: IFFALSE 2119
1415: GO 1417
1417: DISABLE
1418: LD_INT 0
1420: PPUSH
1421: PPUSH
// begin cr := 1 ;
1422: LD_ADDR_VAR 0 1
1426: PUSH
1427: LD_INT 1
1429: ST_TO_ADDR
// cr_queue := [ rand ( 1 , 3 ) , rand ( 2 , 4 ) , rand ( 3 , 5 ) , rand ( 3 , 5 ) , rand ( 2 , 5 ) , rand ( 1 , 5 ) ] ;
1430: LD_ADDR_VAR 0 2
1434: PUSH
1435: LD_INT 1
1437: PPUSH
1438: LD_INT 3
1440: PPUSH
1441: CALL_OW 12
1445: PUSH
1446: LD_INT 2
1448: PPUSH
1449: LD_INT 4
1451: PPUSH
1452: CALL_OW 12
1456: PUSH
1457: LD_INT 3
1459: PPUSH
1460: LD_INT 5
1462: PPUSH
1463: CALL_OW 12
1467: PUSH
1468: LD_INT 3
1470: PPUSH
1471: LD_INT 5
1473: PPUSH
1474: CALL_OW 12
1478: PUSH
1479: LD_INT 2
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL_OW 12
1489: PUSH
1490: LD_INT 1
1492: PPUSH
1493: LD_INT 5
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: ST_TO_ADDR
// while ( true ) do
1509: LD_INT 1
1511: IFFALSE 2119
// begin Wait ( crates_spawn ) ;
1513: LD_EXP 12
1517: PPUSH
1518: CALL_OW 67
// crates_spawn := crates_spawn + 0 0$2 ;
1522: LD_ADDR_EXP 12
1526: PUSH
1527: LD_EXP 12
1531: PUSH
1532: LD_INT 70
1534: PLUS
1535: ST_TO_ADDR
// if crates_spawn > 2 2$00 then
1536: LD_EXP 12
1540: PUSH
1541: LD_INT 4200
1543: GREATER
1544: IFFALSE 1554
// crates_spawn := 0 0$40 ;
1546: LD_ADDR_EXP 12
1550: PUSH
1551: LD_INT 1400
1553: ST_TO_ADDR
// if cr mod 3 = 0 then
1554: LD_VAR 0 1
1558: PUSH
1559: LD_INT 3
1561: MOD
1562: PUSH
1563: LD_INT 0
1565: EQUAL
1566: IFFALSE 1731
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1568: LD_VAR 0 2
1572: PUSH
1573: LD_VAR 0 1
1577: PUSH
1578: LD_VAR 0 2
1582: MOD
1583: PUSH
1584: LD_INT 1
1586: PLUS
1587: ARRAY
1588: PPUSH
1589: LD_INT 17
1591: PPUSH
1592: LD_INT 1
1594: PPUSH
1595: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1599: LD_EXP 12
1603: PUSH
1604: LD_INT 2
1606: DIV
1607: PPUSH
1608: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1612: LD_VAR 0 2
1616: PUSH
1617: LD_VAR 0 1
1621: PUSH
1622: LD_VAR 0 2
1626: MOD
1627: PUSH
1628: LD_INT 1
1630: PLUS
1631: ARRAY
1632: PPUSH
1633: LD_INT 18
1635: PPUSH
1636: LD_INT 1
1638: PPUSH
1639: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1643: LD_EXP 12
1647: PUSH
1648: LD_INT 2
1650: DIV
1651: PPUSH
1652: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1656: LD_VAR 0 2
1660: PUSH
1661: LD_VAR 0 1
1665: PUSH
1666: LD_VAR 0 2
1670: MOD
1671: PUSH
1672: LD_INT 1
1674: PLUS
1675: ARRAY
1676: PPUSH
1677: LD_INT 19
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1687: LD_EXP 12
1691: PUSH
1692: LD_INT 2
1694: DIV
1695: PPUSH
1696: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1700: LD_VAR 0 2
1704: PUSH
1705: LD_VAR 0 1
1709: PUSH
1710: LD_VAR 0 2
1714: MOD
1715: PUSH
1716: LD_INT 1
1718: PLUS
1719: ARRAY
1720: PPUSH
1721: LD_INT 17
1723: PPUSH
1724: LD_INT 1
1726: PPUSH
1727: CALL_OW 55
// end ; if cr mod 3 = 1 then
1731: LD_VAR 0 1
1735: PUSH
1736: LD_INT 3
1738: MOD
1739: PUSH
1740: LD_INT 1
1742: EQUAL
1743: IFFALSE 1908
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1745: LD_VAR 0 2
1749: PUSH
1750: LD_VAR 0 1
1754: PUSH
1755: LD_VAR 0 2
1759: MOD
1760: PUSH
1761: LD_INT 1
1763: PLUS
1764: ARRAY
1765: PPUSH
1766: LD_INT 18
1768: PPUSH
1769: LD_INT 1
1771: PPUSH
1772: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1776: LD_EXP 12
1780: PUSH
1781: LD_INT 2
1783: DIV
1784: PPUSH
1785: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1789: LD_VAR 0 2
1793: PUSH
1794: LD_VAR 0 1
1798: PUSH
1799: LD_VAR 0 2
1803: MOD
1804: PUSH
1805: LD_INT 1
1807: PLUS
1808: ARRAY
1809: PPUSH
1810: LD_INT 17
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1820: LD_EXP 12
1824: PUSH
1825: LD_INT 2
1827: DIV
1828: PPUSH
1829: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1833: LD_VAR 0 2
1837: PUSH
1838: LD_VAR 0 1
1842: PUSH
1843: LD_VAR 0 2
1847: MOD
1848: PUSH
1849: LD_INT 1
1851: PLUS
1852: ARRAY
1853: PPUSH
1854: LD_INT 19
1856: PPUSH
1857: LD_INT 1
1859: PPUSH
1860: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1864: LD_EXP 12
1868: PUSH
1869: LD_INT 2
1871: DIV
1872: PPUSH
1873: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1877: LD_VAR 0 2
1881: PUSH
1882: LD_VAR 0 1
1886: PUSH
1887: LD_VAR 0 2
1891: MOD
1892: PUSH
1893: LD_INT 1
1895: PLUS
1896: ARRAY
1897: PPUSH
1898: LD_INT 18
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 55
// end ; if cr mod 3 = 2 then
1908: LD_VAR 0 1
1912: PUSH
1913: LD_INT 3
1915: MOD
1916: PUSH
1917: LD_INT 2
1919: EQUAL
1920: IFFALSE 2085
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1922: LD_VAR 0 2
1926: PUSH
1927: LD_VAR 0 1
1931: PUSH
1932: LD_VAR 0 2
1936: MOD
1937: PUSH
1938: LD_INT 1
1940: PLUS
1941: ARRAY
1942: PPUSH
1943: LD_INT 19
1945: PPUSH
1946: LD_INT 1
1948: PPUSH
1949: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1953: LD_EXP 12
1957: PUSH
1958: LD_INT 2
1960: DIV
1961: PPUSH
1962: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1966: LD_VAR 0 2
1970: PUSH
1971: LD_VAR 0 1
1975: PUSH
1976: LD_VAR 0 2
1980: MOD
1981: PUSH
1982: LD_INT 1
1984: PLUS
1985: ARRAY
1986: PPUSH
1987: LD_INT 18
1989: PPUSH
1990: LD_INT 1
1992: PPUSH
1993: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1997: LD_EXP 12
2001: PUSH
2002: LD_INT 2
2004: DIV
2005: PPUSH
2006: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
2010: LD_VAR 0 2
2014: PUSH
2015: LD_VAR 0 1
2019: PUSH
2020: LD_VAR 0 2
2024: MOD
2025: PUSH
2026: LD_INT 1
2028: PLUS
2029: ARRAY
2030: PPUSH
2031: LD_INT 17
2033: PPUSH
2034: LD_INT 1
2036: PPUSH
2037: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
2041: LD_EXP 12
2045: PUSH
2046: LD_INT 2
2048: DIV
2049: PPUSH
2050: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
2054: LD_VAR 0 2
2058: PUSH
2059: LD_VAR 0 1
2063: PUSH
2064: LD_VAR 0 2
2068: MOD
2069: PUSH
2070: LD_INT 1
2072: PLUS
2073: ARRAY
2074: PPUSH
2075: LD_INT 19
2077: PPUSH
2078: LD_INT 1
2080: PPUSH
2081: CALL_OW 55
// end ; cr := cr + 1 ;
2085: LD_ADDR_VAR 0 1
2089: PUSH
2090: LD_VAR 0 1
2094: PUSH
2095: LD_INT 1
2097: PLUS
2098: ST_TO_ADDR
// if cr > 150 then
2099: LD_VAR 0 1
2103: PUSH
2104: LD_INT 150
2106: GREATER
2107: IFFALSE 2117
// cr := 43 ;
2109: LD_ADDR_VAR 0 1
2113: PUSH
2114: LD_INT 43
2116: ST_TO_ADDR
// end ;
2117: GO 1509
// end ; end_of_file
2119: PPOPN 2
2121: END
// export function PreparePeople ( ) ; var i , j , un , to_copy , x , y , c , d ; begin
2122: LD_INT 0
2124: PPUSH
2125: PPUSH
2126: PPUSH
2127: PPUSH
2128: PPUSH
2129: PPUSH
2130: PPUSH
2131: PPUSH
2132: PPUSH
// to_copy := [ ] ;
2133: LD_ADDR_VAR 0 5
2137: PUSH
2138: EMPTY
2139: ST_TO_ADDR
// for i = 1 to 8 do
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: DOUBLE
2146: LD_INT 1
2148: DEC
2149: ST_TO_ADDR
2150: LD_INT 8
2152: PUSH
2153: FOR_TO
2154: IFFALSE 3064
// begin if Side_Positions [ i ] then
2156: LD_EXP 2
2160: PUSH
2161: LD_VAR 0 2
2165: ARRAY
2166: IFFALSE 3062
// begin uc_side := i ;
2168: LD_ADDR_OWVAR 20
2172: PUSH
2173: LD_VAR 0 2
2177: ST_TO_ADDR
// uc_nation := Side_Nations [ i ] ;
2178: LD_ADDR_OWVAR 21
2182: PUSH
2183: LD_EXP 4
2187: PUSH
2188: LD_VAR 0 2
2192: ARRAY
2193: ST_TO_ADDR
// x := Side_Start [ Side_Positions [ i ] ] [ 1 ] ;
2194: LD_ADDR_VAR 0 6
2198: PUSH
2199: LD_EXP 7
2203: PUSH
2204: LD_EXP 2
2208: PUSH
2209: LD_VAR 0 2
2213: ARRAY
2214: ARRAY
2215: PUSH
2216: LD_INT 1
2218: ARRAY
2219: ST_TO_ADDR
// y := Side_Start [ Side_Positions [ i ] ] [ 2 ] ;
2220: LD_ADDR_VAR 0 7
2224: PUSH
2225: LD_EXP 7
2229: PUSH
2230: LD_EXP 2
2234: PUSH
2235: LD_VAR 0 2
2239: ARRAY
2240: ARRAY
2241: PUSH
2242: LD_INT 2
2244: ARRAY
2245: ST_TO_ADDR
// hc_importance := 100 ;
2246: LD_ADDR_OWVAR 32
2250: PUSH
2251: LD_INT 100
2253: ST_TO_ADDR
// if Multiplayer then
2254: LD_OWVAR 4
2258: IFFALSE 2316
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2260: LD_ADDR_OWVAR 26
2264: PUSH
2265: LD_OWVAR 19
2269: PUSH
2270: LD_OWVAR 20
2274: ARRAY
2275: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2276: LD_ADDR_OWVAR 33
2280: PUSH
2281: LD_STRING MULTIAVATARS
2283: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2284: LD_ADDR_OWVAR 34
2288: PUSH
2289: LD_OWVAR 20
2293: PPUSH
2294: CALL_OW 525
2298: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2299: LD_ADDR_OWVAR 27
2303: PUSH
2304: LD_OWVAR 20
2308: PPUSH
2309: CALL_OW 526
2313: ST_TO_ADDR
// end else
2314: GO 2348
// begin hc_name :=  ;
2316: LD_ADDR_OWVAR 26
2320: PUSH
2321: LD_STRING 
2323: ST_TO_ADDR
// hc_gallery :=  ;
2324: LD_ADDR_OWVAR 33
2328: PUSH
2329: LD_STRING 
2331: ST_TO_ADDR
// hc_sex := Rand ( 1 , 2 ) ;
2332: LD_ADDR_OWVAR 27
2336: PUSH
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 2
2342: PPUSH
2343: CALL_OW 12
2347: ST_TO_ADDR
// end ; PrepareHuman ( hc_sex , 1 , skill_level ) ;
2348: LD_OWVAR 27
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: LD_EXP 11
2360: PPUSH
2361: CALL_OW 380
// un := CreateHuman ;
2365: LD_ADDR_VAR 0 4
2369: PUSH
2370: CALL_OW 44
2374: ST_TO_ADDR
// if not to_copy then
2375: LD_VAR 0 5
2379: NOT
2380: IFFALSE 2407
// to_copy := Replace ( to_copy , 1 , un ) else
2382: LD_ADDR_VAR 0 5
2386: PUSH
2387: LD_VAR 0 5
2391: PPUSH
2392: LD_INT 1
2394: PPUSH
2395: LD_VAR 0 4
2399: PPUSH
2400: CALL_OW 1
2404: ST_TO_ADDR
2405: GO 2483
// begin CopySkills ( to_copy [ 1 ] , un ) ;
2407: LD_VAR 0 5
2411: PUSH
2412: LD_INT 1
2414: ARRAY
2415: PPUSH
2416: LD_VAR 0 4
2420: PPUSH
2421: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ 1 ] , attr_speed ) ) ;
2425: LD_VAR 0 4
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_VAR 0 5
2437: PUSH
2438: LD_INT 1
2440: ARRAY
2441: PPUSH
2442: LD_INT 2
2444: PPUSH
2445: CALL_OW 260
2449: PPUSH
2450: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ 1 ] , attr_stamina ) ) ;
2454: LD_VAR 0 4
2458: PPUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_VAR 0 5
2466: PUSH
2467: LD_INT 1
2469: ARRAY
2470: PPUSH
2471: LD_INT 1
2473: PPUSH
2474: CALL_OW 260
2478: PPUSH
2479: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2483: LD_VAR 0 4
2487: PPUSH
2488: LD_VAR 0 6
2492: PPUSH
2493: LD_VAR 0 7
2497: PPUSH
2498: LD_INT 10
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 50
// hc_importance := 0 ;
2508: LD_ADDR_OWVAR 32
2512: PUSH
2513: LD_INT 0
2515: ST_TO_ADDR
// hc_name :=  ;
2516: LD_ADDR_OWVAR 26
2520: PUSH
2521: LD_STRING 
2523: ST_TO_ADDR
// hc_gallery :=  ;
2524: LD_ADDR_OWVAR 33
2528: PUSH
2529: LD_STRING 
2531: ST_TO_ADDR
// d := ( number_of_people - 1 ) / 4 ;
2532: LD_ADDR_VAR 0 9
2536: PUSH
2537: LD_EXP 10
2541: PUSH
2542: LD_INT 1
2544: MINUS
2545: PUSH
2546: LD_INT 4
2548: DIVREAL
2549: ST_TO_ADDR
// c := 1 ;
2550: LD_ADDR_VAR 0 8
2554: PUSH
2555: LD_INT 1
2557: ST_TO_ADDR
// for j = 2 to number_of_people do
2558: LD_ADDR_VAR 0 3
2562: PUSH
2563: DOUBLE
2564: LD_INT 2
2566: DEC
2567: ST_TO_ADDR
2568: LD_EXP 10
2572: PUSH
2573: FOR_TO
2574: IFFALSE 2785
// begin PrepareHuman ( false , c , skill_level ) ;
2576: LD_INT 0
2578: PPUSH
2579: LD_VAR 0 8
2583: PPUSH
2584: LD_EXP 11
2588: PPUSH
2589: CALL_OW 380
// if ( j - 1 ) mod d = 0 then
2593: LD_VAR 0 3
2597: PUSH
2598: LD_INT 1
2600: MINUS
2601: PUSH
2602: LD_VAR 0 9
2606: MOD
2607: PUSH
2608: LD_INT 0
2610: EQUAL
2611: IFFALSE 2627
// c := c + 1 ;
2613: LD_ADDR_VAR 0 8
2617: PUSH
2618: LD_VAR 0 8
2622: PUSH
2623: LD_INT 1
2625: PLUS
2626: ST_TO_ADDR
// un := CreateHuman ;
2627: LD_ADDR_VAR 0 4
2631: PUSH
2632: CALL_OW 44
2636: ST_TO_ADDR
// if to_copy < j then
2637: LD_VAR 0 5
2641: PUSH
2642: LD_VAR 0 3
2646: LESS
2647: IFFALSE 2676
// to_copy := Replace ( to_copy , j , un ) else
2649: LD_ADDR_VAR 0 5
2653: PUSH
2654: LD_VAR 0 5
2658: PPUSH
2659: LD_VAR 0 3
2663: PPUSH
2664: LD_VAR 0 4
2668: PPUSH
2669: CALL_OW 1
2673: ST_TO_ADDR
2674: GO 2758
// begin CopySkills ( to_copy [ j ] , un ) ;
2676: LD_VAR 0 5
2680: PUSH
2681: LD_VAR 0 3
2685: ARRAY
2686: PPUSH
2687: LD_VAR 0 4
2691: PPUSH
2692: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ j ] , attr_speed ) ) ;
2696: LD_VAR 0 4
2700: PPUSH
2701: LD_INT 2
2703: PPUSH
2704: LD_VAR 0 5
2708: PUSH
2709: LD_VAR 0 3
2713: ARRAY
2714: PPUSH
2715: LD_INT 2
2717: PPUSH
2718: CALL_OW 260
2722: PPUSH
2723: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ j ] , attr_stamina ) ) ;
2727: LD_VAR 0 4
2731: PPUSH
2732: LD_INT 1
2734: PPUSH
2735: LD_VAR 0 5
2739: PUSH
2740: LD_VAR 0 3
2744: ARRAY
2745: PPUSH
2746: LD_INT 1
2748: PPUSH
2749: CALL_OW 260
2753: PPUSH
2754: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2758: LD_VAR 0 4
2762: PPUSH
2763: LD_VAR 0 6
2767: PPUSH
2768: LD_VAR 0 7
2772: PPUSH
2773: LD_INT 10
2775: PPUSH
2776: LD_INT 0
2778: PPUSH
2779: CALL_OW 50
// end ;
2783: GO 2573
2785: POP
2786: POP
// if handicap then
2787: LD_EXP 26
2791: IFFALSE 3062
// begin if handicap = 1 then
2793: LD_EXP 26
2797: PUSH
2798: LD_INT 1
2800: EQUAL
2801: IFFALSE 2880
// for j = 1 to 2 do
2803: LD_ADDR_VAR 0 3
2807: PUSH
2808: DOUBLE
2809: LD_INT 1
2811: DEC
2812: ST_TO_ADDR
2813: LD_INT 2
2815: PUSH
2816: FOR_TO
2817: IFFALSE 2878
// begin vc_chassis := ru_medium_tracked ;
2819: LD_ADDR_OWVAR 37
2823: PUSH
2824: LD_INT 22
2826: ST_TO_ADDR
// vc_engine := engine_combustion ;
2827: LD_ADDR_OWVAR 39
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// vc_control := control_manual ;
2835: LD_ADDR_OWVAR 38
2839: PUSH
2840: LD_INT 1
2842: ST_TO_ADDR
// vc_weapon := ru_gun ;
2843: LD_ADDR_OWVAR 40
2847: PUSH
2848: LD_INT 44
2850: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2851: CALL_OW 45
2855: PPUSH
2856: LD_VAR 0 6
2860: PPUSH
2861: LD_VAR 0 7
2865: PPUSH
2866: LD_INT 13
2868: PPUSH
2869: LD_INT 0
2871: PPUSH
2872: CALL_OW 50
// end ;
2876: GO 2816
2878: POP
2879: POP
// if handicap = 2 then
2880: LD_EXP 26
2884: PUSH
2885: LD_INT 2
2887: EQUAL
2888: IFFALSE 3062
// begin for j = 1 to 2 do
2890: LD_ADDR_VAR 0 3
2894: PUSH
2895: DOUBLE
2896: LD_INT 1
2898: DEC
2899: ST_TO_ADDR
2900: LD_INT 2
2902: PUSH
2903: FOR_TO
2904: IFFALSE 2978
// begin vc_chassis := ru_heavy_tracked ;
2906: LD_ADDR_OWVAR 37
2910: PUSH
2911: LD_INT 24
2913: ST_TO_ADDR
// vc_engine := engine_combustion ;
2914: LD_ADDR_OWVAR 39
2918: PUSH
2919: LD_INT 1
2921: ST_TO_ADDR
// vc_control := control_manual ;
2922: LD_ADDR_OWVAR 38
2926: PUSH
2927: LD_INT 1
2929: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_heavy_gun ] [ j ] ;
2930: LD_ADDR_OWVAR 40
2934: PUSH
2935: LD_INT 43
2937: PUSH
2938: LD_INT 46
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: PUSH
2945: LD_VAR 0 3
2949: ARRAY
2950: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2951: CALL_OW 45
2955: PPUSH
2956: LD_VAR 0 6
2960: PPUSH
2961: LD_VAR 0 7
2965: PPUSH
2966: LD_INT 13
2968: PPUSH
2969: LD_INT 0
2971: PPUSH
2972: CALL_OW 50
// end ;
2976: GO 2903
2978: POP
2979: POP
// vc_chassis := ru_medium_tracked ;
2980: LD_ADDR_OWVAR 37
2984: PUSH
2985: LD_INT 22
2987: ST_TO_ADDR
// vc_engine := engine_siberite ;
2988: LD_ADDR_OWVAR 39
2992: PUSH
2993: LD_INT 3
2995: ST_TO_ADDR
// vc_control := control_computer ;
2996: LD_ADDR_OWVAR 38
3000: PUSH
3001: LD_INT 3
3003: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
3004: LD_ADDR_OWVAR 40
3008: PUSH
3009: LD_INT 51
3011: ST_TO_ADDR
// un := CreateVehicle ;
3012: LD_ADDR_VAR 0 4
3016: PUSH
3017: CALL_OW 45
3021: ST_TO_ADDR
// PlaceUnitXYR ( un , x , y , 13 , false ) ;
3022: LD_VAR 0 4
3026: PPUSH
3027: LD_VAR 0 6
3031: PPUSH
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 13
3039: PPUSH
3040: LD_INT 0
3042: PPUSH
3043: CALL_OW 50
// SetCargo ( un , mat_cans , 100 ) ;
3047: LD_VAR 0 4
3051: PPUSH
3052: LD_INT 1
3054: PPUSH
3055: LD_INT 100
3057: PPUSH
3058: CALL_OW 290
// end ; end ; end ; end ;
3062: GO 2153
3064: POP
3065: POP
// end ;
3066: LD_VAR 0 1
3070: RET
// export function AddApeman ( area ) ; begin
3071: LD_INT 0
3073: PPUSH
// uc_nation := 0 ;
3074: LD_ADDR_OWVAR 21
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// uc_side := 0 ;
3082: LD_ADDR_OWVAR 20
3086: PUSH
3087: LD_INT 0
3089: ST_TO_ADDR
// hc_agressivity := rand ( - 10 , 15 ) ;
3090: LD_ADDR_OWVAR 35
3094: PUSH
3095: LD_INT 10
3097: NEG
3098: PPUSH
3099: LD_INT 15
3101: PPUSH
3102: CALL_OW 12
3106: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
3107: LD_INT 0
3109: PPUSH
3110: LD_INT 12
3112: PPUSH
3113: LD_INT 0
3115: PPUSH
3116: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
3120: LD_ADDR_OWVAR 29
3124: PUSH
3125: LD_INT 10
3127: PUSH
3128: LD_INT 12
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , area , false ) ;
3135: CALL_OW 44
3139: PPUSH
3140: LD_VAR 0 1
3144: PPUSH
3145: LD_INT 0
3147: PPUSH
3148: CALL_OW 49
// end ;
3152: LD_VAR 0 2
3156: RET
// export function PlaceMines ( area , n ) ; var i , tmp ; begin
3157: LD_INT 0
3159: PPUSH
3160: PPUSH
3161: PPUSH
// tmp := AreaToList ( area , 0 ) ;
3162: LD_ADDR_VAR 0 5
3166: PUSH
3167: LD_VAR 0 1
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: CALL_OW 517
3179: ST_TO_ADDR
// if not tmp then
3180: LD_VAR 0 5
3184: NOT
3185: IFFALSE 3189
// exit ;
3187: GO 3189
// end ;
3189: LD_VAR 0 3
3193: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
3194: LD_INT 0
3196: PPUSH
3197: PPUSH
3198: PPUSH
// if not GetControl ( veh ) = control_manual then
3199: LD_VAR 0 1
3203: PPUSH
3204: CALL_OW 263
3208: PUSH
3209: LD_INT 1
3211: EQUAL
3212: NOT
3213: IFFALSE 3225
// result := false else
3215: LD_ADDR_VAR 0 2
3219: PUSH
3220: LD_INT 0
3222: ST_TO_ADDR
3223: GO 3370
// if veh in FilterAllUnits ( [ f_empty ] ) then
3225: LD_VAR 0 1
3229: PUSH
3230: LD_INT 58
3232: PUSH
3233: EMPTY
3234: LIST
3235: PPUSH
3236: CALL_OW 69
3240: IN
3241: IFFALSE 3253
// result := false else
3243: LD_ADDR_VAR 0 2
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
3251: GO 3370
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
3253: LD_ADDR_VAR 0 4
3257: PUSH
3258: LD_INT 22
3260: PUSH
3261: LD_VAR 0 1
3265: PPUSH
3266: CALL_OW 255
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 55
3277: PUSH
3278: EMPTY
3279: LIST
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PPUSH
3285: CALL_OW 69
3289: ST_TO_ADDR
// if not filter then
3290: LD_VAR 0 4
3294: NOT
3295: IFFALSE 3307
// result := false else
3297: LD_ADDR_VAR 0 2
3301: PUSH
3302: LD_INT 0
3304: ST_TO_ADDR
3305: GO 3370
// for i = 1 to filter do
3307: LD_ADDR_VAR 0 3
3311: PUSH
3312: DOUBLE
3313: LD_INT 1
3315: DEC
3316: ST_TO_ADDR
3317: LD_VAR 0 4
3321: PUSH
3322: FOR_TO
3323: IFFALSE 3368
// if IsDriver ( filter [ i ] ) = veh then
3325: LD_VAR 0 4
3329: PUSH
3330: LD_VAR 0 3
3334: ARRAY
3335: PPUSH
3336: CALL 43442 0 1
3340: PUSH
3341: LD_VAR 0 1
3345: EQUAL
3346: IFFALSE 3366
// begin result := filter [ i ] ;
3348: LD_ADDR_VAR 0 2
3352: PUSH
3353: LD_VAR 0 4
3357: PUSH
3358: LD_VAR 0 3
3362: ARRAY
3363: ST_TO_ADDR
// break ;
3364: GO 3368
// end ;
3366: GO 3322
3368: POP
3369: POP
// end ; end ; end_of_file
3370: LD_VAR 0 2
3374: RET
// export function InitBot ; var i , ct , hex , side , un , veh , weapons , skill ; begin
3375: LD_INT 0
3377: PPUSH
3378: PPUSH
3379: PPUSH
3380: PPUSH
3381: PPUSH
3382: PPUSH
3383: PPUSH
3384: PPUSH
3385: PPUSH
// side := Bot_Side ;
3386: LD_ADDR_VAR 0 5
3390: PUSH
3391: LD_EXP 8
3395: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
3396: LD_ADDR_VAR 0 9
3400: PUSH
3401: LD_INT 4
3403: PUSH
3404: LD_INT 6
3406: PUSH
3407: LD_INT 8
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: LIST
3414: PUSH
3415: LD_OWVAR 67
3419: ARRAY
3420: ST_TO_ADDR
// weapons := [ ar_gun , ar_rocket_launcher , ar_gatling_gun , ar_flame_thrower ] ;
3421: LD_ADDR_VAR 0 8
3425: PUSH
3426: LD_INT 27
3428: PUSH
3429: LD_INT 28
3431: PUSH
3432: LD_INT 25
3434: PUSH
3435: LD_INT 26
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: ST_TO_ADDR
// veh_counter := [ 4 , 5 , 6 ] [ Difficulty ] ;
3444: LD_ADDR_EXP 22
3448: PUSH
3449: LD_INT 4
3451: PUSH
3452: LD_INT 5
3454: PUSH
3455: LD_INT 6
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: LIST
3462: PUSH
3463: LD_OWVAR 67
3467: ARRAY
3468: ST_TO_ADDR
// ct := [ ] ;
3469: LD_ADDR_VAR 0 3
3473: PUSH
3474: EMPTY
3475: ST_TO_ADDR
// patrols := [ ] ;
3476: LD_ADDR_EXP 19
3480: PUSH
3481: EMPTY
3482: ST_TO_ADDR
// attackers := [ ] ;
3483: LD_ADDR_EXP 20
3487: PUSH
3488: EMPTY
3489: ST_TO_ADDR
// attackers_tmp := [ ] ;
3490: LD_ADDR_EXP 27
3494: PUSH
3495: EMPTY
3496: ST_TO_ADDR
// to_produce := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , ] ;
3497: LD_ADDR_EXP 21
3501: PUSH
3502: LD_INT 14
3504: PUSH
3505: LD_INT 1
3507: PUSH
3508: LD_INT 2
3510: PUSH
3511: LD_INT 27
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: PUSH
3520: LD_INT 14
3522: PUSH
3523: LD_INT 1
3525: PUSH
3526: LD_INT 2
3528: PUSH
3529: LD_INT 25
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: PUSH
3538: LD_INT 14
3540: PUSH
3541: LD_INT 1
3543: PUSH
3544: LD_INT 2
3546: PUSH
3547: LD_INT 28
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: PUSH
3556: LD_INT 14
3558: PUSH
3559: LD_INT 1
3561: PUSH
3562: LD_INT 2
3564: PUSH
3565: LD_INT 29
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: ST_TO_ADDR
// if Difficulty > 2 then
3580: LD_OWVAR 67
3584: PUSH
3585: LD_INT 2
3587: GREATER
3588: IFFALSE 3656
// begin to_produce := Join ( to_produce , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ) ;
3590: LD_ADDR_EXP 21
3594: PUSH
3595: LD_EXP 21
3599: PPUSH
3600: LD_INT 14
3602: PUSH
3603: LD_INT 1
3605: PUSH
3606: LD_INT 2
3608: PUSH
3609: LD_INT 27
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: PPUSH
3618: CALL 45825 0 2
3622: ST_TO_ADDR
// to_produce := Join ( to_produce , [ ar_medium_trike , engine_siberite , control_remote , ar_selfpropelled_bomb ] ) ;
3623: LD_ADDR_EXP 21
3627: PUSH
3628: LD_EXP 21
3632: PPUSH
3633: LD_INT 13
3635: PUSH
3636: LD_INT 3
3638: PUSH
3639: LD_INT 2
3641: PUSH
3642: LD_INT 29
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: PPUSH
3651: CALL 45825 0 2
3655: ST_TO_ADDR
// end ; SetBName ( ar_dep , newkabul ) ;
3656: LD_INT 2
3658: PPUSH
3659: LD_STRING newkabul
3661: PPUSH
3662: CALL_OW 500
// SetResourceType ( GetBase ( ar_dep ) , mat_cans , 90000 ) ;
3666: LD_INT 2
3668: PPUSH
3669: CALL_OW 274
3673: PPUSH
3674: LD_INT 1
3676: PPUSH
3677: LD_INT 90000
3679: PPUSH
3680: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_oil , 9000 ) ;
3684: LD_INT 2
3686: PPUSH
3687: CALL_OW 274
3691: PPUSH
3692: LD_INT 2
3694: PPUSH
3695: LD_INT 9000
3697: PPUSH
3698: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_siberit , 3000 ) ;
3702: LD_INT 2
3704: PPUSH
3705: CALL_OW 274
3709: PPUSH
3710: LD_INT 3
3712: PPUSH
3713: LD_INT 3000
3715: PPUSH
3716: CALL_OW 277
// if Difficulty > 1 then
3720: LD_OWVAR 67
3724: PUSH
3725: LD_INT 1
3727: GREATER
3728: IFFALSE 3745
// SetTech ( 5 , side , state_researched ) ;
3730: LD_INT 5
3732: PPUSH
3733: LD_VAR 0 5
3737: PPUSH
3738: LD_INT 2
3740: PPUSH
3741: CALL_OW 322
// SetTech ( tech_mortar , side , state_researched ) ;
3745: LD_INT 41
3747: PPUSH
3748: LD_VAR 0 5
3752: PPUSH
3753: LD_INT 2
3755: PPUSH
3756: CALL_OW 322
// SetTech ( tech_weap1 , side , state_researched ) ;
3760: LD_INT 51
3762: PPUSH
3763: LD_VAR 0 5
3767: PPUSH
3768: LD_INT 2
3770: PPUSH
3771: CALL_OW 322
// SetTech ( tech_weap2 , side , state_researched ) ;
3775: LD_INT 52
3777: PPUSH
3778: LD_VAR 0 5
3782: PPUSH
3783: LD_INT 2
3785: PPUSH
3786: CALL_OW 322
// SetTech ( tech_weap3 , side , state_researched ) ;
3790: LD_INT 53
3792: PPUSH
3793: LD_VAR 0 5
3797: PPUSH
3798: LD_INT 2
3800: PPUSH
3801: CALL_OW 322
// SetTech ( tech_opto1 , side , state_researched ) ;
3805: LD_INT 60
3807: PPUSH
3808: LD_VAR 0 5
3812: PPUSH
3813: LD_INT 2
3815: PPUSH
3816: CALL_OW 322
// SetTech ( tech_opto2 , side , state_researched ) ;
3820: LD_INT 61
3822: PPUSH
3823: LD_VAR 0 5
3827: PPUSH
3828: LD_INT 2
3830: PPUSH
3831: CALL_OW 322
// SetTech ( tech_opto3 , side , state_researched ) ;
3835: LD_INT 62
3837: PPUSH
3838: LD_VAR 0 5
3842: PPUSH
3843: LD_INT 2
3845: PPUSH
3846: CALL_OW 322
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
3850: LD_ADDR_VAR 0 2
3854: PUSH
3855: LD_INT 22
3857: PUSH
3858: LD_VAR 0 5
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: PUSH
3867: LD_INT 21
3869: PUSH
3870: LD_INT 3
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: PPUSH
3881: CALL_OW 69
3885: PUSH
3886: FOR_IN
3887: IFFALSE 3920
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
3889: LD_VAR 0 2
3893: PPUSH
3894: LD_INT 6
3896: PUSH
3897: LD_INT 8
3899: PUSH
3900: LD_INT 10
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: LD_OWVAR 67
3912: ARRAY
3913: PPUSH
3914: CALL_OW 241
3918: GO 3886
3920: POP
3921: POP
// if Difficulty > 1 then
3922: LD_OWVAR 67
3926: PUSH
3927: LD_INT 1
3929: GREATER
3930: IFFALSE 3939
// RemoveEnvironmentArea ( forest_road ) ;
3932: LD_INT 11
3934: PPUSH
3935: CALL_OW 355
// PlaceMines ( mine_west_zone , [ 10 , 12 , 25 ] [ Difficulty ] ) ;
3939: LD_INT 4
3941: PPUSH
3942: LD_INT 10
3944: PUSH
3945: LD_INT 12
3947: PUSH
3948: LD_INT 25
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PUSH
3956: LD_OWVAR 67
3960: ARRAY
3961: PPUSH
3962: CALL 3157 0 2
// PlaceMines ( mine_east_zone , [ 7 , 12 , 15 ] [ Difficulty ] ) ;
3966: LD_INT 5
3968: PPUSH
3969: LD_INT 7
3971: PUSH
3972: LD_INT 12
3974: PUSH
3975: LD_INT 15
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: PUSH
3983: LD_OWVAR 67
3987: ARRAY
3988: PPUSH
3989: CALL 3157 0 2
// PlaceMines ( mine_south_zone , [ 5 , 8 , 12 ] [ Difficulty ] ) ;
3993: LD_INT 7
3995: PPUSH
3996: LD_INT 5
3998: PUSH
3999: LD_INT 8
4001: PUSH
4002: LD_INT 12
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: LD_OWVAR 67
4014: ARRAY
4015: PPUSH
4016: CALL 3157 0 2
// PlaceMines ( mine_high_zone , [ 0 , 3 , 5 ] [ Difficulty ] ) ;
4020: LD_INT 6
4022: PPUSH
4023: LD_INT 0
4025: PUSH
4026: LD_INT 3
4028: PUSH
4029: LD_INT 5
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: LIST
4036: PUSH
4037: LD_OWVAR 67
4041: ARRAY
4042: PPUSH
4043: CALL 3157 0 2
// PlaceMines ( mine_road_zone , [ 2 , 5 , 8 ] [ Difficulty ] ) ;
4047: LD_INT 8
4049: PPUSH
4050: LD_INT 2
4052: PUSH
4053: LD_INT 5
4055: PUSH
4056: LD_INT 8
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: LIST
4063: PUSH
4064: LD_OWVAR 67
4068: ARRAY
4069: PPUSH
4070: CALL 3157 0 2
// PlaceMines ( mine_southpass_zone , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
4074: LD_INT 9
4076: PPUSH
4077: LD_INT 0
4079: PUSH
4080: LD_INT 2
4082: PUSH
4083: LD_INT 4
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: LIST
4090: PUSH
4091: LD_OWVAR 67
4095: ARRAY
4096: PPUSH
4097: CALL 3157 0 2
// PlaceMines ( mine_oileast_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4101: LD_INT 10
4103: PPUSH
4104: LD_INT 0
4106: PUSH
4107: LD_INT 1
4109: PUSH
4110: LD_INT 1
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_OWVAR 67
4122: ARRAY
4123: PPUSH
4124: CALL 3157 0 2
// PlaceMines ( mine_oilwest_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4128: LD_INT 12
4130: PPUSH
4131: LD_INT 0
4133: PUSH
4134: LD_INT 1
4136: PUSH
4137: LD_INT 1
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: LIST
4144: PUSH
4145: LD_OWVAR 67
4149: ARRAY
4150: PPUSH
4151: CALL 3157 0 2
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4155: LD_ADDR_VAR 0 2
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_VAR 0 5
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_INT 30
4174: PUSH
4175: LD_INT 32
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PPUSH
4186: CALL_OW 69
4190: PUSH
4191: FOR_IN
4192: IFFALSE 4224
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
4194: LD_VAR 0 2
4198: PPUSH
4199: LD_VAR 0 8
4203: PUSH
4204: LD_INT 1
4206: PPUSH
4207: LD_VAR 0 8
4211: PPUSH
4212: CALL_OW 12
4216: ARRAY
4217: PPUSH
4218: CALL_OW 431
4222: GO 4191
4224: POP
4225: POP
// uc_side := side ;
4226: LD_ADDR_OWVAR 20
4230: PUSH
4231: LD_VAR 0 5
4235: ST_TO_ADDR
// uc_nation := 2 ;
4236: LD_ADDR_OWVAR 21
4240: PUSH
4241: LD_INT 2
4243: ST_TO_ADDR
// for i = 1 to 1 + Difficulty do
4244: LD_ADDR_VAR 0 2
4248: PUSH
4249: DOUBLE
4250: LD_INT 1
4252: DEC
4253: ST_TO_ADDR
4254: LD_INT 1
4256: PUSH
4257: LD_OWVAR 67
4261: PLUS
4262: PUSH
4263: FOR_TO
4264: IFFALSE 4354
// begin vc_chassis := ar_half_tracked ;
4266: LD_ADDR_OWVAR 37
4270: PUSH
4271: LD_INT 14
4273: ST_TO_ADDR
// vc_engine := engine_combustion ;
4274: LD_ADDR_OWVAR 39
4278: PUSH
4279: LD_INT 1
4281: ST_TO_ADDR
// vc_control := control_manual ;
4282: LD_ADDR_OWVAR 38
4286: PUSH
4287: LD_INT 1
4289: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4290: LD_ADDR_OWVAR 40
4294: PUSH
4295: LD_INT 31
4297: ST_TO_ADDR
// veh := CreateVehicle ;
4298: LD_ADDR_VAR 0 7
4302: PUSH
4303: CALL_OW 45
4307: ST_TO_ADDR
// PlaceUnitArea ( veh , ct_area , false ) ;
4308: LD_VAR 0 7
4312: PPUSH
4313: LD_INT 3
4315: PPUSH
4316: LD_INT 0
4318: PPUSH
4319: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
4323: LD_INT 0
4325: PPUSH
4326: LD_INT 3
4328: PPUSH
4329: LD_VAR 0 9
4333: PPUSH
4334: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4338: CALL_OW 44
4342: PPUSH
4343: LD_VAR 0 7
4347: PPUSH
4348: CALL_OW 52
// end ;
4352: GO 4263
4354: POP
4355: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: LD_INT 22
4363: PUSH
4364: LD_VAR 0 5
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: LD_INT 30
4375: PUSH
4376: LD_INT 32
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PPUSH
4387: CALL_OW 69
4391: PUSH
4392: FOR_IN
4393: IFFALSE 4426
// begin PrepareHuman ( false , 1 , skill ) ;
4395: LD_INT 0
4397: PPUSH
4398: LD_INT 1
4400: PPUSH
4401: LD_VAR 0 9
4405: PPUSH
4406: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4410: CALL_OW 44
4414: PPUSH
4415: LD_VAR 0 2
4419: PPUSH
4420: CALL_OW 52
// end ;
4424: GO 4392
4426: POP
4427: POP
// for i = 1 to 4 do
4428: LD_ADDR_VAR 0 2
4432: PUSH
4433: DOUBLE
4434: LD_INT 1
4436: DEC
4437: ST_TO_ADDR
4438: LD_INT 4
4440: PUSH
4441: FOR_TO
4442: IFFALSE 4473
// begin PrepareHuman ( false , 2 , skill ) ;
4444: LD_INT 0
4446: PPUSH
4447: LD_INT 2
4449: PPUSH
4450: LD_VAR 0 9
4454: PPUSH
4455: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_dep ) ;
4459: CALL_OW 44
4463: PPUSH
4464: LD_INT 2
4466: PPUSH
4467: CALL_OW 52
// end ;
4471: GO 4441
4473: POP
4474: POP
// for i = 1 to 6 do
4475: LD_ADDR_VAR 0 2
4479: PUSH
4480: DOUBLE
4481: LD_INT 1
4483: DEC
4484: ST_TO_ADDR
4485: LD_INT 6
4487: PUSH
4488: FOR_TO
4489: IFFALSE 4520
// begin PrepareHuman ( false , 3 , skill ) ;
4491: LD_INT 0
4493: PPUSH
4494: LD_INT 3
4496: PPUSH
4497: LD_VAR 0 9
4501: PPUSH
4502: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_fac ) ;
4506: CALL_OW 44
4510: PPUSH
4511: LD_INT 12
4513: PPUSH
4514: CALL_OW 52
// end ;
4518: GO 4488
4520: POP
4521: POP
// for i = 1 to 4 do
4522: LD_ADDR_VAR 0 2
4526: PUSH
4527: DOUBLE
4528: LD_INT 1
4530: DEC
4531: ST_TO_ADDR
4532: LD_INT 4
4534: PUSH
4535: FOR_TO
4536: IFFALSE 4593
// begin PrepareHuman ( false , 4 , skill ) ;
4538: LD_INT 0
4540: PPUSH
4541: LD_INT 4
4543: PPUSH
4544: LD_VAR 0 9
4548: PPUSH
4549: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ f_btype , b_lab_full ] ) [ ( i mod 2 ) + 1 ] ) ;
4553: CALL_OW 44
4557: PPUSH
4558: LD_INT 30
4560: PUSH
4561: LD_INT 8
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PPUSH
4568: CALL_OW 69
4572: PUSH
4573: LD_VAR 0 2
4577: PUSH
4578: LD_INT 2
4580: MOD
4581: PUSH
4582: LD_INT 1
4584: PLUS
4585: ARRAY
4586: PPUSH
4587: CALL_OW 52
// end ;
4591: GO 4535
4593: POP
4594: POP
// PrepareHuman ( false , class_mortar , skill ) ;
4595: LD_INT 0
4597: PPUSH
4598: LD_INT 8
4600: PPUSH
4601: LD_VAR 0 9
4605: PPUSH
4606: CALL_OW 380
// un := CreateHuman ;
4610: LD_ADDR_VAR 0 6
4614: PUSH
4615: CALL_OW 44
4619: ST_TO_ADDR
// SetDir ( un , 2 ) ;
4620: LD_VAR 0 6
4624: PPUSH
4625: LD_INT 2
4627: PPUSH
4628: CALL_OW 233
// PlaceHumanInUnit ( un , bun1 ) ;
4632: LD_VAR 0 6
4636: PPUSH
4637: LD_INT 31
4639: PPUSH
4640: CALL_OW 52
// for i = 1 to 4 do
4644: LD_ADDR_VAR 0 2
4648: PUSH
4649: DOUBLE
4650: LD_INT 1
4652: DEC
4653: ST_TO_ADDR
4654: LD_INT 4
4656: PUSH
4657: FOR_TO
4658: IFFALSE 4714
// begin uc_nation := 0 ;
4660: LD_ADDR_OWVAR 21
4664: PUSH
4665: LD_INT 0
4667: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 1 ) ;
4668: LD_INT 0
4670: PPUSH
4671: LD_INT 16
4673: PPUSH
4674: LD_INT 1
4676: PPUSH
4677: CALL_OW 380
// un := CreateHuman ;
4681: LD_ADDR_VAR 0 6
4685: PUSH
4686: CALL_OW 44
4690: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 46 , 8 , false ) ;
4691: LD_VAR 0 6
4695: PPUSH
4696: LD_INT 106
4698: PPUSH
4699: LD_INT 46
4701: PPUSH
4702: LD_INT 8
4704: PPUSH
4705: LD_INT 0
4707: PPUSH
4708: CALL_OW 50
// end ;
4712: GO 4657
4714: POP
4715: POP
// for i = 1 to 2 * Difficulty do
4716: LD_ADDR_VAR 0 2
4720: PUSH
4721: DOUBLE
4722: LD_INT 1
4724: DEC
4725: ST_TO_ADDR
4726: LD_INT 2
4728: PUSH
4729: LD_OWVAR 67
4733: MUL
4734: PUSH
4735: FOR_TO
4736: IFFALSE 4776
// begin uc_nation := 0 ;
4738: LD_ADDR_OWVAR 21
4742: PUSH
4743: LD_INT 0
4745: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_soldier , 3 ) ;
4746: LD_INT 0
4748: PPUSH
4749: LD_INT 15
4751: PPUSH
4752: LD_INT 3
4754: PPUSH
4755: CALL_OW 380
// PlaceUnitArea ( CreateHuman , ap1 , false ) ;
4759: CALL_OW 44
4763: PPUSH
4764: LD_INT 20
4766: PPUSH
4767: LD_INT 0
4769: PPUSH
4770: CALL_OW 49
// end ;
4774: GO 4735
4776: POP
4777: POP
// for i = 1 to 4 * Difficulty do
4778: LD_ADDR_VAR 0 2
4782: PUSH
4783: DOUBLE
4784: LD_INT 1
4786: DEC
4787: ST_TO_ADDR
4788: LD_INT 4
4790: PUSH
4791: LD_OWVAR 67
4795: MUL
4796: PUSH
4797: FOR_TO
4798: IFFALSE 4872
// begin uc_nation := 0 ;
4800: LD_ADDR_OWVAR 21
4804: PUSH
4805: LD_INT 0
4807: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_kamikaze , 3 ) ;
4808: LD_INT 0
4810: PPUSH
4811: LD_INT 17
4813: PPUSH
4814: LD_INT 3
4816: PPUSH
4817: CALL_OW 380
// hc_attr := [ 11 , 13 ] ;
4821: LD_ADDR_OWVAR 29
4825: PUSH
4826: LD_INT 11
4828: PUSH
4829: LD_INT 13
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: ST_TO_ADDR
// un := CreateHuman ;
4836: LD_ADDR_VAR 0 6
4840: PUSH
4841: CALL_OW 44
4845: ST_TO_ADDR
// PlaceUnitArea ( un , ap2 , false ) ;
4846: LD_VAR 0 6
4850: PPUSH
4851: LD_INT 21
4853: PPUSH
4854: LD_INT 0
4856: PPUSH
4857: CALL_OW 49
// ComHold ( un ) ;
4861: LD_VAR 0 6
4865: PPUSH
4866: CALL_OW 140
// end ;
4870: GO 4797
4872: POP
4873: POP
// end ;
4874: LD_VAR 0 1
4878: RET
// every 12 12$00 + 2 2$00 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) do var i , tmp , p ;
4879: LD_INT 22
4881: PUSH
4882: LD_EXP 8
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 30
4893: PUSH
4894: LD_INT 3
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PPUSH
4905: CALL_OW 69
4909: IFFALSE 5216
4911: GO 4913
4913: DISABLE
4914: LD_INT 0
4916: PPUSH
4917: PPUSH
4918: PPUSH
// begin enable ;
4919: ENABLE
// if Difficulty < 3 then
4920: LD_OWVAR 67
4924: PUSH
4925: LD_INT 3
4927: LESS
4928: IFFALSE 4937
// wait ( 1 1$00 ) ;
4930: LD_INT 2100
4932: PPUSH
4933: CALL_OW 67
// tmp := queue_codes [ rng ] ;
4937: LD_ADDR_VAR 0 2
4941: PUSH
4942: LD_EXP 23
4946: PUSH
4947: LD_EXP 24
4951: ARRAY
4952: ST_TO_ADDR
// p := 1 ;
4953: LD_ADDR_VAR 0 3
4957: PUSH
4958: LD_INT 1
4960: ST_TO_ADDR
// for i = 1 to veh_counter + [ - 1 , 0 , 1 ] [ Difficulty ] do
4961: LD_ADDR_VAR 0 1
4965: PUSH
4966: DOUBLE
4967: LD_INT 1
4969: DEC
4970: ST_TO_ADDR
4971: LD_EXP 22
4975: PUSH
4976: LD_INT 1
4978: NEG
4979: PUSH
4980: LD_INT 0
4982: PUSH
4983: LD_INT 1
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: PUSH
4991: LD_OWVAR 67
4995: ARRAY
4996: PLUS
4997: PUSH
4998: FOR_TO
4999: IFFALSE 5180
// begin AddComConstruct ( FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) [ 1 ] , to_produce [ tmp mod 10 ] [ 1 ] , to_produce [ tmp mod 10 ] [ 2 ] , to_produce [ tmp mod 10 ] [ 3 ] , to_produce [ tmp mod 10 ] [ 4 ] ) ;
5001: LD_INT 22
5003: PUSH
5004: LD_EXP 8
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: LD_INT 30
5015: PUSH
5016: LD_INT 3
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PPUSH
5027: CALL_OW 69
5031: PUSH
5032: LD_INT 1
5034: ARRAY
5035: PPUSH
5036: LD_EXP 21
5040: PUSH
5041: LD_VAR 0 2
5045: PUSH
5046: LD_INT 10
5048: MOD
5049: ARRAY
5050: PUSH
5051: LD_INT 1
5053: ARRAY
5054: PPUSH
5055: LD_EXP 21
5059: PUSH
5060: LD_VAR 0 2
5064: PUSH
5065: LD_INT 10
5067: MOD
5068: ARRAY
5069: PUSH
5070: LD_INT 2
5072: ARRAY
5073: PPUSH
5074: LD_EXP 21
5078: PUSH
5079: LD_VAR 0 2
5083: PUSH
5084: LD_INT 10
5086: MOD
5087: ARRAY
5088: PUSH
5089: LD_INT 3
5091: ARRAY
5092: PPUSH
5093: LD_EXP 21
5097: PUSH
5098: LD_VAR 0 2
5102: PUSH
5103: LD_INT 10
5105: MOD
5106: ARRAY
5107: PUSH
5108: LD_INT 4
5110: ARRAY
5111: PPUSH
5112: CALL_OW 185
// tmp := tmp / 10 ;
5116: LD_ADDR_VAR 0 2
5120: PUSH
5121: LD_VAR 0 2
5125: PUSH
5126: LD_INT 10
5128: DIVREAL
5129: ST_TO_ADDR
// p := p + 1 ;
5130: LD_ADDR_VAR 0 3
5134: PUSH
5135: LD_VAR 0 3
5139: PUSH
5140: LD_INT 1
5142: PLUS
5143: ST_TO_ADDR
// if p > 5 then
5144: LD_VAR 0 3
5148: PUSH
5149: LD_INT 5
5151: GREATER
5152: IFFALSE 5178
// begin p := 1 ;
5154: LD_ADDR_VAR 0 3
5158: PUSH
5159: LD_INT 1
5161: ST_TO_ADDR
// tmp := queue_codes [ rng ] ;
5162: LD_ADDR_VAR 0 2
5166: PUSH
5167: LD_EXP 23
5171: PUSH
5172: LD_EXP 24
5176: ARRAY
5177: ST_TO_ADDR
// end ; end ;
5178: GO 4998
5180: POP
5181: POP
// rng := rng + 1 ;
5182: LD_ADDR_EXP 24
5186: PUSH
5187: LD_EXP 24
5191: PUSH
5192: LD_INT 1
5194: PLUS
5195: ST_TO_ADDR
// if rng > queue_codes then
5196: LD_EXP 24
5200: PUSH
5201: LD_EXP 23
5205: GREATER
5206: IFFALSE 5216
// rng := 1 ;
5208: LD_ADDR_EXP 24
5212: PUSH
5213: LD_INT 1
5215: ST_TO_ADDR
// end ;
5216: PPOPN 3
5218: END
// every 0 0$01 trigger FilterAllUnits ( [ f_class , 17 ] ) do var i , un ;
5219: LD_INT 25
5221: PUSH
5222: LD_INT 17
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: PPUSH
5229: CALL_OW 69
5233: IFFALSE 5336
5235: GO 5237
5237: DISABLE
5238: LD_INT 0
5240: PPUSH
5241: PPUSH
// begin enable ;
5242: ENABLE
// for i in FilterAllUnits ( [ f_class , 17 ] ) do
5243: LD_ADDR_VAR 0 1
5247: PUSH
5248: LD_INT 25
5250: PUSH
5251: LD_INT 17
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PPUSH
5258: CALL_OW 69
5262: PUSH
5263: FOR_IN
5264: IFFALSE 5334
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , bot_side ] ) , i ) ;
5266: LD_ADDR_VAR 0 2
5270: PUSH
5271: LD_INT 81
5273: PUSH
5274: LD_EXP 8
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PPUSH
5283: CALL_OW 69
5287: PPUSH
5288: LD_VAR 0 1
5292: PPUSH
5293: CALL_OW 74
5297: ST_TO_ADDR
// if GetDistUnits ( i , un ) < 15 then
5298: LD_VAR 0 1
5302: PPUSH
5303: LD_VAR 0 2
5307: PPUSH
5308: CALL_OW 296
5312: PUSH
5313: LD_INT 15
5315: LESS
5316: IFFALSE 5332
// ComAttackUnit ( i , un ) ;
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_VAR 0 2
5327: PPUSH
5328: CALL_OW 115
// end ;
5332: GO 5263
5334: POP
5335: POP
// end ;
5336: PPOPN 2
5338: END
// every 0 0$01 trigger attackers marked 17 do var i ;
5339: LD_EXP 20
5343: IFFALSE 5410
5345: GO 5347
5347: DISABLE
5348: LD_INT 0
5350: PPUSH
// begin enable ;
5351: ENABLE
// for i in attackers do
5352: LD_ADDR_VAR 0 1
5356: PUSH
5357: LD_EXP 20
5361: PUSH
5362: FOR_IN
5363: IFFALSE 5408
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
5365: LD_VAR 0 1
5369: PPUSH
5370: LD_INT 81
5372: PUSH
5373: LD_VAR 0 1
5377: PPUSH
5378: CALL_OW 255
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PPUSH
5387: CALL_OW 69
5391: PPUSH
5392: LD_VAR 0 1
5396: PPUSH
5397: CALL_OW 74
5401: PPUSH
5402: CALL_OW 115
5406: GO 5362
5408: POP
5409: POP
// end ;
5410: PPOPN 1
5412: END
// every 0 0$01 trigger not attackers marked 17 do
5413: LD_EXP 20
5417: NOT
5418: IFFALSE 5427
5420: GO 5422
5422: DISABLE
// begin enable ;
5423: ENABLE
// disable ( 17 ) ;
5424: LD_INT 17
5426: DISABLE_MARKED
// end ;
5427: END
// every 1 1$00 trigger veh_counter <= attackers do var max , i ;
5428: LD_EXP 22
5432: PUSH
5433: LD_EXP 20
5437: LESSEQUAL
5438: IFFALSE 5451
5440: GO 5442
5442: DISABLE
5443: LD_INT 0
5445: PPUSH
5446: PPUSH
// begin enable ;
5447: ENABLE
// enable ( 17 ) ;
5448: LD_INT 17
5450: ENABLE_MARKED
// end ;
5451: PPOPN 2
5453: END
// every 0 0$01 trigger game_start and tick >= 50 50$00 do
5454: LD_EXP 9
5458: PUSH
5459: LD_OWVAR 1
5463: PUSH
5464: LD_INT 105000
5466: GREATEREQUAL
5467: AND
5468: IFFALSE 5487
5470: GO 5472
5472: DISABLE
// veh_counter := veh_counter + 2 ;
5473: LD_ADDR_EXP 22
5477: PUSH
5478: LD_EXP 22
5482: PUSH
5483: LD_INT 2
5485: PLUS
5486: ST_TO_ADDR
5487: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
5488: LD_INT 22
5490: PUSH
5491: LD_EXP 8
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: PUSH
5500: LD_INT 33
5502: PUSH
5503: LD_INT 2
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PPUSH
5514: CALL_OW 69
5518: IFFALSE 5734
5520: GO 5522
5522: DISABLE
5523: LD_INT 0
5525: PPUSH
5526: PPUSH
5527: PPUSH
5528: PPUSH
5529: PPUSH
5530: PPUSH
5531: PPUSH
// begin enable ;
5532: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
5533: LD_ADDR_VAR 0 4
5537: PUSH
5538: LD_INT 22
5540: PUSH
5541: LD_EXP 8
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: PUSH
5550: LD_INT 33
5552: PUSH
5553: LD_INT 2
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: PUSH
5560: LD_INT 3
5562: PUSH
5563: LD_INT 61
5565: PUSH
5566: EMPTY
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: PPUSH
5578: CALL_OW 69
5582: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_weapon , ar_control_tower ] ] ) ;
5583: LD_ADDR_VAR 0 3
5587: PUSH
5588: LD_INT 22
5590: PUSH
5591: LD_EXP 8
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: PUSH
5600: LD_INT 34
5602: PUSH
5603: LD_INT 31
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PPUSH
5614: CALL_OW 69
5618: ST_TO_ADDR
// best := 10 ;
5619: LD_ADDR_VAR 0 5
5623: PUSH
5624: LD_INT 10
5626: ST_TO_ADDR
// best_mechanic := - 1 ;
5627: LD_ADDR_VAR 0 6
5631: PUSH
5632: LD_INT 1
5634: NEG
5635: ST_TO_ADDR
// if vehs then
5636: LD_VAR 0 4
5640: IFFALSE 5734
// begin for j in cts do
5642: LD_ADDR_VAR 0 2
5646: PUSH
5647: LD_VAR 0 3
5651: PUSH
5652: FOR_IN
5653: IFFALSE 5714
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
5655: LD_ADDR_VAR 0 7
5659: PUSH
5660: LD_VAR 0 2
5664: PPUSH
5665: CALL 3194 0 1
5669: PPUSH
5670: CALL_OW 432
5674: ST_TO_ADDR
// if p < best then
5675: LD_VAR 0 7
5679: PUSH
5680: LD_VAR 0 5
5684: LESS
5685: IFFALSE 5712
// begin best := p ;
5687: LD_ADDR_VAR 0 5
5691: PUSH
5692: LD_VAR 0 7
5696: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
5697: LD_ADDR_VAR 0 6
5701: PUSH
5702: LD_VAR 0 2
5706: PPUSH
5707: CALL 3194 0 1
5711: ST_TO_ADDR
// end ; end ;
5712: GO 5652
5714: POP
5715: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
5716: LD_VAR 0 4
5720: PUSH
5721: LD_INT 1
5723: ARRAY
5724: PPUSH
5725: LD_VAR 0 6
5729: PPUSH
5730: CALL_OW 135
// end ; end ;
5734: PPOPN 7
5736: END
// every 0 0$01 do var i , j , h , sci , eng , b , p ;
5737: GO 5739
5739: DISABLE
5740: LD_INT 0
5742: PPUSH
5743: PPUSH
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
// begin enable ;
5749: ENABLE
// b := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5750: LD_ADDR_VAR 0 6
5754: PUSH
5755: LD_INT 22
5757: PUSH
5758: LD_EXP 8
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 21
5769: PUSH
5770: LD_INT 3
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: LD_INT 3
5779: PUSH
5780: LD_INT 24
5782: PUSH
5783: LD_INT 1000
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: LIST
5798: PPUSH
5799: CALL_OW 69
5803: ST_TO_ADDR
// h := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5804: LD_ADDR_VAR 0 3
5808: PUSH
5809: LD_INT 22
5811: PUSH
5812: LD_EXP 8
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PUSH
5821: LD_INT 2
5823: PUSH
5824: LD_INT 25
5826: PUSH
5827: LD_INT 1
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: LD_INT 25
5836: PUSH
5837: LD_INT 2
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: PUSH
5844: LD_INT 25
5846: PUSH
5847: LD_INT 3
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 3
5862: PUSH
5863: LD_INT 24
5865: PUSH
5866: LD_INT 750
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: EMPTY
5874: LIST
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: PPUSH
5882: CALL_OW 69
5886: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) ;
5887: LD_ADDR_VAR 0 4
5891: PUSH
5892: LD_INT 22
5894: PUSH
5895: LD_EXP 8
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PUSH
5904: LD_INT 25
5906: PUSH
5907: LD_INT 4
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: PPUSH
5918: CALL_OW 69
5922: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 2 ] ] ) ;
5923: LD_ADDR_VAR 0 5
5927: PUSH
5928: LD_INT 22
5930: PUSH
5931: LD_EXP 8
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: PUSH
5940: LD_INT 25
5942: PUSH
5943: LD_INT 2
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: PPUSH
5954: CALL_OW 69
5958: ST_TO_ADDR
// if not h and not b then
5959: LD_VAR 0 3
5963: NOT
5964: PUSH
5965: LD_VAR 0 6
5969: NOT
5970: AND
5971: IFFALSE 6255
// begin if sci then
5973: LD_VAR 0 4
5977: IFFALSE 6114
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) then
5979: LD_VAR 0 4
5983: PPUSH
5984: LD_INT 3
5986: PUSH
5987: LD_INT 54
5989: PUSH
5990: EMPTY
5991: LIST
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PPUSH
5997: CALL_OW 72
6001: PUSH
6002: LD_INT 22
6004: PUSH
6005: LD_EXP 8
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: LD_INT 30
6016: PUSH
6017: LD_INT 8
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PPUSH
6028: CALL_OW 69
6032: AND
6033: IFFALSE 6114
// for j in UnitFilter ( sci , [ f_not , [ f_inside ] ] ) do
6035: LD_ADDR_VAR 0 2
6039: PUSH
6040: LD_VAR 0 4
6044: PPUSH
6045: LD_INT 3
6047: PUSH
6048: LD_INT 54
6050: PUSH
6051: EMPTY
6052: LIST
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: PPUSH
6058: CALL_OW 72
6062: PUSH
6063: FOR_IN
6064: IFFALSE 6112
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
6066: LD_VAR 0 2
6070: PPUSH
6071: LD_INT 22
6073: PUSH
6074: LD_EXP 8
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 30
6085: PUSH
6086: LD_INT 8
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: PPUSH
6097: CALL_OW 69
6101: PUSH
6102: LD_INT 1
6104: ARRAY
6105: PPUSH
6106: CALL_OW 120
6110: GO 6063
6112: POP
6113: POP
// if eng then
6114: LD_VAR 0 5
6118: IFFALSE 6255
// if UnitFilter ( eng , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) then
6120: LD_VAR 0 5
6124: PPUSH
6125: LD_INT 3
6127: PUSH
6128: LD_INT 54
6130: PUSH
6131: EMPTY
6132: LIST
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PPUSH
6138: CALL_OW 72
6142: PUSH
6143: LD_INT 22
6145: PUSH
6146: LD_EXP 8
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 30
6157: PUSH
6158: LD_INT 1
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PPUSH
6169: CALL_OW 69
6173: AND
6174: IFFALSE 6255
// for j in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6176: LD_ADDR_VAR 0 2
6180: PUSH
6181: LD_VAR 0 5
6185: PPUSH
6186: LD_INT 3
6188: PUSH
6189: LD_INT 54
6191: PUSH
6192: EMPTY
6193: LIST
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PPUSH
6199: CALL_OW 72
6203: PUSH
6204: FOR_IN
6205: IFFALSE 6253
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
6207: LD_VAR 0 2
6211: PPUSH
6212: LD_INT 22
6214: PUSH
6215: LD_EXP 8
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 30
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PPUSH
6238: CALL_OW 69
6242: PUSH
6243: LD_INT 1
6245: ARRAY
6246: PPUSH
6247: CALL_OW 120
6251: GO 6204
6253: POP
6254: POP
// end ; p := 1 ;
6255: LD_ADDR_VAR 0 7
6259: PUSH
6260: LD_INT 1
6262: ST_TO_ADDR
// if b and eng then
6263: LD_VAR 0 6
6267: PUSH
6268: LD_VAR 0 5
6272: AND
6273: IFFALSE 6407
// for j in eng do
6275: LD_ADDR_VAR 0 2
6279: PUSH
6280: LD_VAR 0 5
6284: PUSH
6285: FOR_IN
6286: IFFALSE 6405
// begin if IsInUnit ( j ) then
6288: LD_VAR 0 2
6292: PPUSH
6293: CALL_OW 310
6297: IFFALSE 6310
// ComExitBuilding ( j ) else
6299: LD_VAR 0 2
6303: PPUSH
6304: CALL_OW 122
6308: GO 6403
// if not HasTask ( j ) and GetLives ( j ) > 750 then
6310: LD_VAR 0 2
6314: PPUSH
6315: CALL_OW 314
6319: NOT
6320: PUSH
6321: LD_VAR 0 2
6325: PPUSH
6326: CALL_OW 256
6330: PUSH
6331: LD_INT 750
6333: GREATER
6334: AND
6335: IFFALSE 6403
// begin if b > p then
6337: LD_VAR 0 6
6341: PUSH
6342: LD_VAR 0 7
6346: GREATER
6347: IFFALSE 6385
// begin ComRepairBuilding ( j , b [ p ] ) ;
6349: LD_VAR 0 2
6353: PPUSH
6354: LD_VAR 0 6
6358: PUSH
6359: LD_VAR 0 7
6363: ARRAY
6364: PPUSH
6365: CALL_OW 130
// p := p + 1 ;
6369: LD_ADDR_VAR 0 7
6373: PUSH
6374: LD_VAR 0 7
6378: PUSH
6379: LD_INT 1
6381: PLUS
6382: ST_TO_ADDR
// end else
6383: GO 6403
// ComRepairBuilding ( j , b [ 1 ] ) ;
6385: LD_VAR 0 2
6389: PPUSH
6390: LD_VAR 0 6
6394: PUSH
6395: LD_INT 1
6397: ARRAY
6398: PPUSH
6399: CALL_OW 130
// end ; end ;
6403: GO 6285
6405: POP
6406: POP
// if h and sci then
6407: LD_VAR 0 3
6411: PUSH
6412: LD_VAR 0 4
6416: AND
6417: IFFALSE 6556
// for i in h do
6419: LD_ADDR_VAR 0 1
6423: PUSH
6424: LD_VAR 0 3
6428: PUSH
6429: FOR_IN
6430: IFFALSE 6554
// if GetDistUnitXY ( i , 108 , 42 ) > 10 then
6432: LD_VAR 0 1
6436: PPUSH
6437: LD_INT 108
6439: PPUSH
6440: LD_INT 42
6442: PPUSH
6443: CALL_OW 297
6447: PUSH
6448: LD_INT 10
6450: GREATER
6451: IFFALSE 6470
// ComMoveXY ( i , 108 , 42 ) else
6453: LD_VAR 0 1
6457: PPUSH
6458: LD_INT 108
6460: PPUSH
6461: LD_INT 42
6463: PPUSH
6464: CALL_OW 111
6468: GO 6552
// begin for j in sci do
6470: LD_ADDR_VAR 0 2
6474: PUSH
6475: LD_VAR 0 4
6479: PUSH
6480: FOR_IN
6481: IFFALSE 6550
// begin if GetTag ( j ) > 0 then
6483: LD_VAR 0 2
6487: PPUSH
6488: CALL_OW 110
6492: PUSH
6493: LD_INT 0
6495: GREATER
6496: IFFALSE 6500
// continue ;
6498: GO 6480
// if IsInUnit ( j ) then
6500: LD_VAR 0 2
6504: PPUSH
6505: CALL_OW 310
6509: IFFALSE 6522
// ComExitBuilding ( j ) else
6511: LD_VAR 0 2
6515: PPUSH
6516: CALL_OW 122
6520: GO 6548
// if not HasTask ( j ) then
6522: LD_VAR 0 2
6526: PPUSH
6527: CALL_OW 314
6531: NOT
6532: IFFALSE 6548
// ComHeal ( j , h ) ;
6534: LD_VAR 0 2
6538: PPUSH
6539: LD_VAR 0 3
6543: PPUSH
6544: CALL_OW 128
// end ;
6548: GO 6480
6550: POP
6551: POP
// end ;
6552: GO 6429
6554: POP
6555: POP
// end ;
6556: PPOPN 7
6558: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 155 , 88 ) and GetBType ( HexInfo ( 155 , 88 ) = b_siberite_mine ) do var sci , p ;
6559: LD_INT 155
6561: PPUSH
6562: LD_INT 88
6564: PPUSH
6565: CALL_OW 428
6569: PUSH
6570: LD_INT 155
6572: PPUSH
6573: LD_INT 88
6575: PPUSH
6576: CALL_OW 428
6580: PUSH
6581: LD_INT 30
6583: EQUAL
6584: PPUSH
6585: CALL_OW 266
6589: AND
6590: IFFALSE 6839
6592: GO 6594
6594: DISABLE
6595: LD_INT 0
6597: PPUSH
6598: PPUSH
// begin p := GetSide ( HexInfo ( 155 , 88 ) ) ;
6599: LD_ADDR_VAR 0 2
6603: PUSH
6604: LD_INT 155
6606: PPUSH
6607: LD_INT 88
6609: PPUSH
6610: CALL_OW 428
6614: PPUSH
6615: CALL_OW 255
6619: ST_TO_ADDR
// Wait ( [ 5 5$30 , 6 6$33 , 6 6$21 , 8 8$44 , 9 9$31 , 4 4$33 , 9 9$01 , 5 5$01 ] [ p ] ) ;
6620: LD_INT 11550
6622: PUSH
6623: LD_INT 13755
6625: PUSH
6626: LD_INT 13335
6628: PUSH
6629: LD_INT 18340
6631: PUSH
6632: LD_INT 19985
6634: PUSH
6635: LD_INT 9555
6637: PUSH
6638: LD_INT 18935
6640: PUSH
6641: LD_INT 10535
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: PUSH
6654: LD_VAR 0 2
6658: ARRAY
6659: PPUSH
6660: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
6664: LD_INT 22
6666: PUSH
6667: LD_EXP 8
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: LD_INT 25
6678: PUSH
6679: LD_INT 4
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PPUSH
6690: CALL_OW 69
6694: PUSH
6695: LD_INT 0
6697: EQUAL
6698: IFFALSE 6702
// exit ;
6700: GO 6839
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ 1 ] ;
6702: LD_ADDR_VAR 0 1
6706: PUSH
6707: LD_INT 22
6709: PUSH
6710: LD_EXP 8
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: PUSH
6719: LD_INT 25
6721: PUSH
6722: LD_INT 4
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PPUSH
6733: CALL_OW 69
6737: PUSH
6738: LD_INT 1
6740: ARRAY
6741: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
6742: LD_VAR 0 1
6746: PPUSH
6747: LD_INT 1
6749: PPUSH
6750: CALL_OW 109
// ComExitBuilding ( sci ) ;
6754: LD_VAR 0 1
6758: PPUSH
6759: CALL_OW 122
// AddComMoveXY ( sci , 126 , 59 ) ;
6763: LD_VAR 0 1
6767: PPUSH
6768: LD_INT 126
6770: PPUSH
6771: LD_INT 59
6773: PPUSH
6774: CALL_OW 171
// if p mod 2 = 0 then
6778: LD_VAR 0 2
6782: PUSH
6783: LD_INT 2
6785: MOD
6786: PUSH
6787: LD_INT 0
6789: EQUAL
6790: IFFALSE 6809
// AddComMoveXY ( sci , 148 , 66 ) else
6792: LD_VAR 0 1
6796: PPUSH
6797: LD_INT 148
6799: PPUSH
6800: LD_INT 66
6802: PPUSH
6803: CALL_OW 171
6807: GO 6824
// AddComMoveXY ( sci , 135 , 84 ) ;
6809: LD_VAR 0 1
6813: PPUSH
6814: LD_INT 135
6816: PPUSH
6817: LD_INT 84
6819: PPUSH
6820: CALL_OW 171
// AddComContaminate ( sci , 155 , 88 ) ;
6824: LD_VAR 0 1
6828: PPUSH
6829: LD_INT 155
6831: PPUSH
6832: LD_INT 88
6834: PPUSH
6835: CALL_OW 218
// end ;
6839: PPOPN 2
6841: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 33 , 10 ) and GetBType ( HexInfo ( 33 , 10 ) = b_siberite_mine ) do var sci , p ;
6842: LD_INT 33
6844: PPUSH
6845: LD_INT 10
6847: PPUSH
6848: CALL_OW 428
6852: PUSH
6853: LD_INT 33
6855: PPUSH
6856: LD_INT 10
6858: PPUSH
6859: CALL_OW 428
6863: PUSH
6864: LD_INT 30
6866: EQUAL
6867: PPUSH
6868: CALL_OW 266
6872: AND
6873: IFFALSE 7124
6875: GO 6877
6877: DISABLE
6878: LD_INT 0
6880: PPUSH
6881: PPUSH
// begin p := GetSide ( HexInfo ( 33 , 10 ) ) ;
6882: LD_ADDR_VAR 0 2
6886: PUSH
6887: LD_INT 33
6889: PPUSH
6890: LD_INT 10
6892: PPUSH
6893: CALL_OW 428
6897: PPUSH
6898: CALL_OW 255
6902: ST_TO_ADDR
// Wait ( [ 4 4$30 , 5 5$33 , 3 3$21 , 4 4$44 , 3 3$31 , 5 5$33 , 3 3$01 , 8 8$01 ] [ p ] ) ;
6903: LD_INT 9450
6905: PUSH
6906: LD_INT 11655
6908: PUSH
6909: LD_INT 7035
6911: PUSH
6912: LD_INT 9940
6914: PUSH
6915: LD_INT 7385
6917: PUSH
6918: LD_INT 11655
6920: PUSH
6921: LD_INT 6335
6923: PUSH
6924: LD_INT 16835
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: PUSH
6937: LD_VAR 0 2
6941: ARRAY
6942: PPUSH
6943: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
6947: LD_INT 22
6949: PUSH
6950: LD_EXP 8
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: LD_INT 25
6961: PUSH
6962: LD_INT 4
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PPUSH
6973: CALL_OW 69
6977: PUSH
6978: LD_INT 0
6980: EQUAL
6981: IFFALSE 6985
// exit ;
6983: GO 7124
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ sci ] ;
6985: LD_ADDR_VAR 0 1
6989: PUSH
6990: LD_INT 22
6992: PUSH
6993: LD_EXP 8
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: LD_INT 25
7004: PUSH
7005: LD_INT 4
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PPUSH
7016: CALL_OW 69
7020: PUSH
7021: LD_VAR 0 1
7025: ARRAY
7026: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
7027: LD_VAR 0 1
7031: PPUSH
7032: LD_INT 1
7034: PPUSH
7035: CALL_OW 109
// ComExitBuilding ( sci ) ;
7039: LD_VAR 0 1
7043: PPUSH
7044: CALL_OW 122
// AddComMoveXY ( sci , 67 , 13 ) ;
7048: LD_VAR 0 1
7052: PPUSH
7053: LD_INT 67
7055: PPUSH
7056: LD_INT 13
7058: PPUSH
7059: CALL_OW 171
// if p mod 2 = 0 then
7063: LD_VAR 0 2
7067: PUSH
7068: LD_INT 2
7070: MOD
7071: PUSH
7072: LD_INT 0
7074: EQUAL
7075: IFFALSE 7094
// AddComMoveXY ( sci , 37 , 3 ) else
7077: LD_VAR 0 1
7081: PPUSH
7082: LD_INT 37
7084: PPUSH
7085: LD_INT 3
7087: PPUSH
7088: CALL_OW 171
7092: GO 7109
// AddComMoveXY ( sci , 45 , 20 ) ;
7094: LD_VAR 0 1
7098: PPUSH
7099: LD_INT 45
7101: PPUSH
7102: LD_INT 20
7104: PPUSH
7105: CALL_OW 171
// AddComContaminate ( sci , 33 , 10 ) ;
7109: LD_VAR 0 1
7113: PPUSH
7114: LD_INT 33
7116: PPUSH
7117: LD_INT 10
7119: PPUSH
7120: CALL_OW 218
// end ;
7124: PPOPN 2
7126: END
// every 0 0$01 trigger mines_list do var i , p ;
7127: LD_EXP 17
7131: IFFALSE 7357
7133: GO 7135
7135: DISABLE
7136: LD_INT 0
7138: PPUSH
7139: PPUSH
// begin enable ;
7140: ENABLE
// p := 1 ;
7141: LD_ADDR_VAR 0 2
7145: PUSH
7146: LD_INT 1
7148: ST_TO_ADDR
// for i = 1 to mines_list / 2 do
7149: LD_ADDR_VAR 0 1
7153: PUSH
7154: DOUBLE
7155: LD_INT 1
7157: DEC
7158: ST_TO_ADDR
7159: LD_EXP 17
7163: PUSH
7164: LD_INT 2
7166: DIVREAL
7167: PUSH
7168: FOR_TO
7169: IFFALSE 7355
// begin if HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) > 0 then
7171: LD_EXP 17
7175: PUSH
7176: LD_VAR 0 2
7180: ARRAY
7181: PPUSH
7182: LD_EXP 17
7186: PUSH
7187: LD_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: PLUS
7195: ARRAY
7196: PPUSH
7197: CALL_OW 428
7201: PUSH
7202: LD_INT 0
7204: GREATER
7205: IFFALSE 7339
// if GetSide ( HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) ) <> bot_side then
7207: LD_EXP 17
7211: PUSH
7212: LD_VAR 0 2
7216: ARRAY
7217: PPUSH
7218: LD_EXP 17
7222: PUSH
7223: LD_VAR 0 2
7227: PUSH
7228: LD_INT 1
7230: PLUS
7231: ARRAY
7232: PPUSH
7233: CALL_OW 428
7237: PPUSH
7238: CALL_OW 255
7242: PUSH
7243: LD_EXP 8
7247: NONEQUAL
7248: IFFALSE 7339
// begin LaunchMineAtPos ( mines_list [ p ] , mines_list [ p + 1 ] , bot_side ) ;
7250: LD_EXP 17
7254: PUSH
7255: LD_VAR 0 2
7259: ARRAY
7260: PPUSH
7261: LD_EXP 17
7265: PUSH
7266: LD_VAR 0 2
7270: PUSH
7271: LD_INT 1
7273: PLUS
7274: ARRAY
7275: PPUSH
7276: LD_EXP 8
7280: PPUSH
7281: CALL_OW 456
// mines_list := Delete ( mines_list , p ) ;
7285: LD_ADDR_EXP 17
7289: PUSH
7290: LD_EXP 17
7294: PPUSH
7295: LD_VAR 0 2
7299: PPUSH
7300: CALL_OW 3
7304: ST_TO_ADDR
// mines_list := Delete ( mines_list , p ) ;
7305: LD_ADDR_EXP 17
7309: PUSH
7310: LD_EXP 17
7314: PPUSH
7315: LD_VAR 0 2
7319: PPUSH
7320: CALL_OW 3
7324: ST_TO_ADDR
// p := p - 2 ;
7325: LD_ADDR_VAR 0 2
7329: PUSH
7330: LD_VAR 0 2
7334: PUSH
7335: LD_INT 2
7337: MINUS
7338: ST_TO_ADDR
// end ; p := p + 2 ;
7339: LD_ADDR_VAR 0 2
7343: PUSH
7344: LD_VAR 0 2
7348: PUSH
7349: LD_INT 2
7351: PLUS
7352: ST_TO_ADDR
// end ;
7353: GO 7168
7355: POP
7356: POP
// end ;
7357: PPOPN 2
7359: END
// every 0 0$03 do var i , p , skr , filter , dep ;
7360: GO 7362
7362: DISABLE
7363: LD_INT 0
7365: PPUSH
7366: PPUSH
7367: PPUSH
7368: PPUSH
7369: PPUSH
// begin enable ;
7370: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , bot_side ] , [ f_class , class_apeman_engineer ] ] ) ;
7371: LD_ADDR_VAR 0 4
7375: PUSH
7376: LD_INT 50
7378: PUSH
7379: EMPTY
7380: LIST
7381: PUSH
7382: LD_INT 22
7384: PUSH
7385: LD_EXP 8
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: PUSH
7394: LD_INT 25
7396: PUSH
7397: LD_INT 16
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: LIST
7408: PPUSH
7409: CALL_OW 69
7413: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7414: LD_ADDR_VAR 0 5
7418: PUSH
7419: LD_INT 22
7421: PUSH
7422: LD_EXP 8
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: LD_INT 2
7433: PUSH
7434: LD_INT 30
7436: PUSH
7437: LD_INT 0
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PUSH
7444: LD_INT 30
7446: PUSH
7447: LD_INT 1
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PPUSH
7463: CALL_OW 69
7467: ST_TO_ADDR
// skr := GetListOfCratesInArea ( kabul_crates ) ;
7468: LD_ADDR_VAR 0 3
7472: PUSH
7473: LD_INT 13
7475: PPUSH
7476: CALL_OW 435
7480: ST_TO_ADDR
// if filter and skr then
7481: LD_VAR 0 4
7485: PUSH
7486: LD_VAR 0 3
7490: AND
7491: IFFALSE 7566
// for i = 1 to filter do
7493: LD_ADDR_VAR 0 1
7497: PUSH
7498: DOUBLE
7499: LD_INT 1
7501: DEC
7502: ST_TO_ADDR
7503: LD_VAR 0 4
7507: PUSH
7508: FOR_TO
7509: IFFALSE 7564
// if not HasTask ( filter [ i ] ) then
7511: LD_VAR 0 4
7515: PUSH
7516: LD_VAR 0 1
7520: ARRAY
7521: PPUSH
7522: CALL_OW 314
7526: NOT
7527: IFFALSE 7562
// ComCollect ( filter [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
7529: LD_VAR 0 4
7533: PUSH
7534: LD_VAR 0 1
7538: ARRAY
7539: PPUSH
7540: LD_VAR 0 3
7544: PUSH
7545: LD_INT 1
7547: ARRAY
7548: PPUSH
7549: LD_VAR 0 3
7553: PUSH
7554: LD_INT 2
7556: ARRAY
7557: PPUSH
7558: CALL_OW 117
7562: GO 7508
7564: POP
7565: POP
// end ; end_of_file
7566: PPOPN 5
7568: END
// on UnitDestroyed ( un ) do var shooter , cl , s , n ;
7569: LD_INT 0
7571: PPUSH
7572: PPUSH
7573: PPUSH
7574: PPUSH
// begin if un in attackers then
7575: LD_VAR 0 1
7579: PUSH
7580: LD_EXP 20
7584: IN
7585: IFFALSE 7603
// attackers := attackers diff un ;
7587: LD_ADDR_EXP 20
7591: PUSH
7592: LD_EXP 20
7596: PUSH
7597: LD_VAR 0 1
7601: DIFF
7602: ST_TO_ADDR
// if GetSide ( un ) <> bot_side and GetSide ( un ) > 0 and un in FilterAllUnits ( [ f_type , unit_human ] ) then
7603: LD_VAR 0 1
7607: PPUSH
7608: CALL_OW 255
7612: PUSH
7613: LD_EXP 8
7617: NONEQUAL
7618: PUSH
7619: LD_VAR 0 1
7623: PPUSH
7624: CALL_OW 255
7628: PUSH
7629: LD_INT 0
7631: GREATER
7632: AND
7633: PUSH
7634: LD_VAR 0 1
7638: PUSH
7639: LD_INT 21
7641: PUSH
7642: LD_INT 1
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PPUSH
7649: CALL_OW 69
7653: IN
7654: AND
7655: IFFALSE 7839
// begin if respawning_time_min > 0 0$00 then
7657: LD_EXP 13
7661: PUSH
7662: LD_INT 0
7664: GREATER
7665: IFFALSE 7839
// begin s := GetSide ( un ) ;
7667: LD_ADDR_VAR 0 4
7671: PUSH
7672: LD_VAR 0 1
7676: PPUSH
7677: CALL_OW 255
7681: ST_TO_ADDR
// n := GetNation ( un ) ;
7682: LD_ADDR_VAR 0 5
7686: PUSH
7687: LD_VAR 0 1
7691: PPUSH
7692: CALL_OW 248
7696: ST_TO_ADDR
// cl := GetClass ( un ) ;
7697: LD_ADDR_VAR 0 3
7701: PUSH
7702: LD_VAR 0 1
7706: PPUSH
7707: CALL_OW 257
7711: ST_TO_ADDR
// wait ( respawning_time_min ) ;
7712: LD_EXP 13
7716: PPUSH
7717: CALL_OW 67
// wait ( respawning_time_max - ( 0 0$10 * tick mod 10 + 1 ) * cl ) ;
7721: LD_EXP 14
7725: PUSH
7726: LD_INT 350
7728: PUSH
7729: LD_OWVAR 1
7733: MUL
7734: PUSH
7735: LD_INT 10
7737: MOD
7738: PUSH
7739: LD_INT 1
7741: PLUS
7742: PUSH
7743: LD_VAR 0 3
7747: MUL
7748: MINUS
7749: PPUSH
7750: CALL_OW 67
// uc_side := s ;
7754: LD_ADDR_OWVAR 20
7758: PUSH
7759: LD_VAR 0 4
7763: ST_TO_ADDR
// uc_nation := n ;
7764: LD_ADDR_OWVAR 21
7768: PUSH
7769: LD_VAR 0 5
7773: ST_TO_ADDR
// PrepareHuman ( false , cl , skill_level - 2 ) ;
7774: LD_INT 0
7776: PPUSH
7777: LD_VAR 0 3
7781: PPUSH
7782: LD_EXP 11
7786: PUSH
7787: LD_INT 2
7789: MINUS
7790: PPUSH
7791: CALL_OW 380
// PlaceUnitArea ( CreateHuman , [ cr1 , cr3 , cr2 , cr3 ] [ ( cl mod 4 ) + 1 ] , true ) ;
7795: CALL_OW 44
7799: PPUSH
7800: LD_INT 17
7802: PUSH
7803: LD_INT 19
7805: PUSH
7806: LD_INT 18
7808: PUSH
7809: LD_INT 19
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: PUSH
7818: LD_VAR 0 3
7822: PUSH
7823: LD_INT 4
7825: MOD
7826: PUSH
7827: LD_INT 1
7829: PLUS
7830: ARRAY
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: CALL_OW 49
// end ; end ; end ;
7839: PPOPN 5
7841: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = bot_side and un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_type , unit_vehicle ] ] ) then
7842: LD_VAR 0 1
7846: PPUSH
7847: CALL_OW 255
7851: PUSH
7852: LD_EXP 8
7856: EQUAL
7857: PUSH
7858: LD_VAR 0 1
7862: PUSH
7863: LD_INT 33
7865: PUSH
7866: LD_INT 2
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PUSH
7873: LD_INT 21
7875: PUSH
7876: LD_INT 2
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PPUSH
7887: CALL_OW 69
7891: IN
7892: AND
7893: IFFALSE 8016
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> bot_side then
7895: LD_OWVAR 3
7899: PUSH
7900: LD_VAR 0 1
7904: DIFF
7905: PPUSH
7906: LD_VAR 0 1
7910: PPUSH
7911: CALL_OW 74
7915: PPUSH
7916: CALL_OW 255
7920: PUSH
7921: LD_EXP 8
7925: NONEQUAL
7926: IFFALSE 8016
// begin Wait ( 0 0$1.3 ) ;
7928: LD_INT 46
7930: PPUSH
7931: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
7935: LD_VAR 0 1
7939: PPUSH
7940: CALL_OW 250
7944: PPUSH
7945: LD_VAR 0 1
7949: PPUSH
7950: CALL_OW 251
7954: PPUSH
7955: LD_INT 1
7957: PPUSH
7958: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
7962: LD_VAR 0 1
7966: PPUSH
7967: CALL_OW 250
7971: PPUSH
7972: LD_VAR 0 1
7976: PPUSH
7977: CALL_OW 251
7981: PPUSH
7982: LD_INT 1
7984: PPUSH
7985: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
7989: LD_VAR 0 1
7993: PPUSH
7994: CALL_OW 250
7998: PPUSH
7999: LD_VAR 0 1
8003: PPUSH
8004: CALL_OW 251
8008: PPUSH
8009: LD_INT 1
8011: PPUSH
8012: CALL_OW 453
// end ; if GetControl ( un ) = control_remote then
8016: LD_VAR 0 1
8020: PPUSH
8021: CALL_OW 263
8025: PUSH
8026: LD_INT 2
8028: EQUAL
8029: IFFALSE 8040
// ComUnlink ( un ) ;
8031: LD_VAR 0 1
8035: PPUSH
8036: CALL_OW 136
// end ;
8040: PPOPN 1
8042: END
// on VehicleConstructed ( veh , b ) do begin if GetSide ( veh ) = bot_side then
8043: LD_VAR 0 1
8047: PPUSH
8048: CALL_OW 255
8052: PUSH
8053: LD_EXP 8
8057: EQUAL
8058: IFFALSE 8089
// attackers := Insert ( attackers , attackers + 1 , veh ) ;
8060: LD_ADDR_EXP 20
8064: PUSH
8065: LD_EXP 20
8069: PPUSH
8070: LD_EXP 20
8074: PUSH
8075: LD_INT 1
8077: PLUS
8078: PPUSH
8079: LD_VAR 0 1
8083: PPUSH
8084: CALL_OW 2
8088: ST_TO_ADDR
// end ;
8089: PPOPN 2
8091: END
// on LeaveBuilding ( b , un ) do var i , arm ;
8092: LD_INT 0
8094: PPUSH
8095: PPUSH
// begin if GetSide ( b ) = bot_side and GetBType ( b ) = b_bunker then
8096: LD_VAR 0 1
8100: PPUSH
8101: CALL_OW 255
8105: PUSH
8106: LD_EXP 8
8110: EQUAL
8111: PUSH
8112: LD_VAR 0 1
8116: PPUSH
8117: CALL_OW 266
8121: PUSH
8122: LD_INT 32
8124: EQUAL
8125: AND
8126: IFFALSE 8224
// begin arm := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_barracks ] ] ) ;
8128: LD_ADDR_VAR 0 4
8132: PUSH
8133: LD_INT 22
8135: PUSH
8136: LD_EXP 8
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 30
8147: PUSH
8148: LD_INT 5
8150: PUSH
8151: EMPTY
8152: LIST
8153: LIST
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: PPUSH
8159: CALL_OW 69
8163: ST_TO_ADDR
// for i in arm do
8164: LD_ADDR_VAR 0 3
8168: PUSH
8169: LD_VAR 0 4
8173: PUSH
8174: FOR_IN
8175: IFFALSE 8222
// if UnitsInside ( i ) < 6 then
8177: LD_VAR 0 3
8181: PPUSH
8182: CALL_OW 313
8186: PUSH
8187: LD_INT 6
8189: LESS
8190: IFFALSE 8220
// begin ComEnterUnit ( un , i ) ;
8192: LD_VAR 0 2
8196: PPUSH
8197: LD_VAR 0 3
8201: PPUSH
8202: CALL_OW 120
// AddComChangeProfession ( un , class_mortar ) ;
8206: LD_VAR 0 2
8210: PPUSH
8211: LD_INT 8
8213: PPUSH
8214: CALL_OW 183
// break ;
8218: GO 8222
// end ;
8220: GO 8174
8222: POP
8223: POP
// end ; end ; end_of_file
8224: PPOPN 4
8226: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
8227: LD_VAR 0 1
8231: PUSH
8232: LD_INT 200
8234: DOUBLE
8235: GREATEREQUAL
8236: IFFALSE 8244
8238: LD_INT 299
8240: DOUBLE
8241: LESSEQUAL
8242: IFTRUE 8246
8244: GO 8278
8246: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
8247: LD_VAR 0 1
8251: PPUSH
8252: LD_VAR 0 2
8256: PPUSH
8257: LD_VAR 0 3
8261: PPUSH
8262: LD_VAR 0 4
8266: PPUSH
8267: LD_VAR 0 5
8271: PPUSH
8272: CALL 65997 0 5
8276: GO 8355
8278: LD_INT 300
8280: DOUBLE
8281: GREATEREQUAL
8282: IFFALSE 8290
8284: LD_INT 399
8286: DOUBLE
8287: LESSEQUAL
8288: IFTRUE 8292
8290: GO 8354
8292: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
8293: LD_VAR 0 1
8297: PPUSH
8298: LD_VAR 0 2
8302: PPUSH
8303: LD_VAR 0 3
8307: PPUSH
8308: LD_VAR 0 4
8312: PPUSH
8313: LD_VAR 0 5
8317: PPUSH
8318: LD_VAR 0 6
8322: PPUSH
8323: LD_VAR 0 7
8327: PPUSH
8328: LD_VAR 0 8
8332: PPUSH
8333: LD_VAR 0 9
8337: PPUSH
8338: LD_VAR 0 10
8342: PPUSH
8343: LD_VAR 0 11
8347: PPUSH
8348: CALL 62330 0 11
8352: GO 8355
8354: POP
// end ;
8355: PPOPN 11
8357: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
8358: LD_VAR 0 1
8362: PPUSH
8363: LD_VAR 0 2
8367: PPUSH
8368: LD_VAR 0 3
8372: PPUSH
8373: LD_VAR 0 4
8377: PPUSH
8378: LD_VAR 0 5
8382: PPUSH
8383: CALL 65733 0 5
// end ; end_of_file
8387: PPOPN 5
8389: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8390: LD_INT 0
8392: PPUSH
8393: PPUSH
// if exist_mode then
8394: LD_VAR 0 2
8398: IFFALSE 8423
// unit := CreateCharacter ( prefix & ident ) else
8400: LD_ADDR_VAR 0 5
8404: PUSH
8405: LD_VAR 0 3
8409: PUSH
8410: LD_VAR 0 1
8414: STR
8415: PPUSH
8416: CALL_OW 34
8420: ST_TO_ADDR
8421: GO 8438
// unit := NewCharacter ( ident ) ;
8423: LD_ADDR_VAR 0 5
8427: PUSH
8428: LD_VAR 0 1
8432: PPUSH
8433: CALL_OW 25
8437: ST_TO_ADDR
// result := unit ;
8438: LD_ADDR_VAR 0 4
8442: PUSH
8443: LD_VAR 0 5
8447: ST_TO_ADDR
// end ;
8448: LD_VAR 0 4
8452: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8453: LD_INT 0
8455: PPUSH
8456: PPUSH
// if not side or not nation then
8457: LD_VAR 0 1
8461: NOT
8462: PUSH
8463: LD_VAR 0 2
8467: NOT
8468: OR
8469: IFFALSE 8473
// exit ;
8471: GO 9241
// case nation of nation_american :
8473: LD_VAR 0 2
8477: PUSH
8478: LD_INT 1
8480: DOUBLE
8481: EQUAL
8482: IFTRUE 8486
8484: GO 8700
8486: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8487: LD_ADDR_VAR 0 4
8491: PUSH
8492: LD_INT 35
8494: PUSH
8495: LD_INT 45
8497: PUSH
8498: LD_INT 46
8500: PUSH
8501: LD_INT 47
8503: PUSH
8504: LD_INT 82
8506: PUSH
8507: LD_INT 83
8509: PUSH
8510: LD_INT 84
8512: PUSH
8513: LD_INT 85
8515: PUSH
8516: LD_INT 86
8518: PUSH
8519: LD_INT 1
8521: PUSH
8522: LD_INT 2
8524: PUSH
8525: LD_INT 6
8527: PUSH
8528: LD_INT 15
8530: PUSH
8531: LD_INT 16
8533: PUSH
8534: LD_INT 7
8536: PUSH
8537: LD_INT 12
8539: PUSH
8540: LD_INT 13
8542: PUSH
8543: LD_INT 10
8545: PUSH
8546: LD_INT 14
8548: PUSH
8549: LD_INT 20
8551: PUSH
8552: LD_INT 21
8554: PUSH
8555: LD_INT 22
8557: PUSH
8558: LD_INT 25
8560: PUSH
8561: LD_INT 32
8563: PUSH
8564: LD_INT 27
8566: PUSH
8567: LD_INT 36
8569: PUSH
8570: LD_INT 69
8572: PUSH
8573: LD_INT 39
8575: PUSH
8576: LD_INT 34
8578: PUSH
8579: LD_INT 40
8581: PUSH
8582: LD_INT 48
8584: PUSH
8585: LD_INT 49
8587: PUSH
8588: LD_INT 50
8590: PUSH
8591: LD_INT 51
8593: PUSH
8594: LD_INT 52
8596: PUSH
8597: LD_INT 53
8599: PUSH
8600: LD_INT 54
8602: PUSH
8603: LD_INT 55
8605: PUSH
8606: LD_INT 56
8608: PUSH
8609: LD_INT 57
8611: PUSH
8612: LD_INT 58
8614: PUSH
8615: LD_INT 59
8617: PUSH
8618: LD_INT 60
8620: PUSH
8621: LD_INT 61
8623: PUSH
8624: LD_INT 62
8626: PUSH
8627: LD_INT 80
8629: PUSH
8630: LD_INT 82
8632: PUSH
8633: LD_INT 83
8635: PUSH
8636: LD_INT 84
8638: PUSH
8639: LD_INT 85
8641: PUSH
8642: LD_INT 86
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: ST_TO_ADDR
8698: GO 9165
8700: LD_INT 2
8702: DOUBLE
8703: EQUAL
8704: IFTRUE 8708
8706: GO 8934
8708: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
8709: LD_ADDR_VAR 0 4
8713: PUSH
8714: LD_INT 35
8716: PUSH
8717: LD_INT 45
8719: PUSH
8720: LD_INT 46
8722: PUSH
8723: LD_INT 47
8725: PUSH
8726: LD_INT 82
8728: PUSH
8729: LD_INT 83
8731: PUSH
8732: LD_INT 84
8734: PUSH
8735: LD_INT 85
8737: PUSH
8738: LD_INT 87
8740: PUSH
8741: LD_INT 70
8743: PUSH
8744: LD_INT 1
8746: PUSH
8747: LD_INT 11
8749: PUSH
8750: LD_INT 3
8752: PUSH
8753: LD_INT 4
8755: PUSH
8756: LD_INT 5
8758: PUSH
8759: LD_INT 6
8761: PUSH
8762: LD_INT 15
8764: PUSH
8765: LD_INT 18
8767: PUSH
8768: LD_INT 7
8770: PUSH
8771: LD_INT 17
8773: PUSH
8774: LD_INT 8
8776: PUSH
8777: LD_INT 20
8779: PUSH
8780: LD_INT 21
8782: PUSH
8783: LD_INT 22
8785: PUSH
8786: LD_INT 72
8788: PUSH
8789: LD_INT 26
8791: PUSH
8792: LD_INT 69
8794: PUSH
8795: LD_INT 39
8797: PUSH
8798: LD_INT 40
8800: PUSH
8801: LD_INT 41
8803: PUSH
8804: LD_INT 42
8806: PUSH
8807: LD_INT 43
8809: PUSH
8810: LD_INT 48
8812: PUSH
8813: LD_INT 49
8815: PUSH
8816: LD_INT 50
8818: PUSH
8819: LD_INT 51
8821: PUSH
8822: LD_INT 52
8824: PUSH
8825: LD_INT 53
8827: PUSH
8828: LD_INT 54
8830: PUSH
8831: LD_INT 55
8833: PUSH
8834: LD_INT 56
8836: PUSH
8837: LD_INT 60
8839: PUSH
8840: LD_INT 61
8842: PUSH
8843: LD_INT 62
8845: PUSH
8846: LD_INT 66
8848: PUSH
8849: LD_INT 67
8851: PUSH
8852: LD_INT 68
8854: PUSH
8855: LD_INT 81
8857: PUSH
8858: LD_INT 82
8860: PUSH
8861: LD_INT 83
8863: PUSH
8864: LD_INT 84
8866: PUSH
8867: LD_INT 85
8869: PUSH
8870: LD_INT 87
8872: PUSH
8873: LD_INT 88
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: ST_TO_ADDR
8932: GO 9165
8934: LD_INT 3
8936: DOUBLE
8937: EQUAL
8938: IFTRUE 8942
8940: GO 9164
8942: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
8943: LD_ADDR_VAR 0 4
8947: PUSH
8948: LD_INT 46
8950: PUSH
8951: LD_INT 47
8953: PUSH
8954: LD_INT 1
8956: PUSH
8957: LD_INT 2
8959: PUSH
8960: LD_INT 82
8962: PUSH
8963: LD_INT 83
8965: PUSH
8966: LD_INT 84
8968: PUSH
8969: LD_INT 85
8971: PUSH
8972: LD_INT 86
8974: PUSH
8975: LD_INT 11
8977: PUSH
8978: LD_INT 9
8980: PUSH
8981: LD_INT 20
8983: PUSH
8984: LD_INT 19
8986: PUSH
8987: LD_INT 21
8989: PUSH
8990: LD_INT 24
8992: PUSH
8993: LD_INT 22
8995: PUSH
8996: LD_INT 25
8998: PUSH
8999: LD_INT 28
9001: PUSH
9002: LD_INT 29
9004: PUSH
9005: LD_INT 30
9007: PUSH
9008: LD_INT 31
9010: PUSH
9011: LD_INT 37
9013: PUSH
9014: LD_INT 38
9016: PUSH
9017: LD_INT 32
9019: PUSH
9020: LD_INT 27
9022: PUSH
9023: LD_INT 33
9025: PUSH
9026: LD_INT 69
9028: PUSH
9029: LD_INT 39
9031: PUSH
9032: LD_INT 34
9034: PUSH
9035: LD_INT 40
9037: PUSH
9038: LD_INT 71
9040: PUSH
9041: LD_INT 23
9043: PUSH
9044: LD_INT 44
9046: PUSH
9047: LD_INT 48
9049: PUSH
9050: LD_INT 49
9052: PUSH
9053: LD_INT 50
9055: PUSH
9056: LD_INT 51
9058: PUSH
9059: LD_INT 52
9061: PUSH
9062: LD_INT 53
9064: PUSH
9065: LD_INT 54
9067: PUSH
9068: LD_INT 55
9070: PUSH
9071: LD_INT 56
9073: PUSH
9074: LD_INT 57
9076: PUSH
9077: LD_INT 58
9079: PUSH
9080: LD_INT 59
9082: PUSH
9083: LD_INT 63
9085: PUSH
9086: LD_INT 64
9088: PUSH
9089: LD_INT 65
9091: PUSH
9092: LD_INT 82
9094: PUSH
9095: LD_INT 83
9097: PUSH
9098: LD_INT 84
9100: PUSH
9101: LD_INT 85
9103: PUSH
9104: LD_INT 86
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: ST_TO_ADDR
9162: GO 9165
9164: POP
// if state > - 1 and state < 3 then
9165: LD_VAR 0 3
9169: PUSH
9170: LD_INT 1
9172: NEG
9173: GREATER
9174: PUSH
9175: LD_VAR 0 3
9179: PUSH
9180: LD_INT 3
9182: LESS
9183: AND
9184: IFFALSE 9241
// for i in result do
9186: LD_ADDR_VAR 0 5
9190: PUSH
9191: LD_VAR 0 4
9195: PUSH
9196: FOR_IN
9197: IFFALSE 9239
// if GetTech ( i , side ) <> state then
9199: LD_VAR 0 5
9203: PPUSH
9204: LD_VAR 0 1
9208: PPUSH
9209: CALL_OW 321
9213: PUSH
9214: LD_VAR 0 3
9218: NONEQUAL
9219: IFFALSE 9237
// result := result diff i ;
9221: LD_ADDR_VAR 0 4
9225: PUSH
9226: LD_VAR 0 4
9230: PUSH
9231: LD_VAR 0 5
9235: DIFF
9236: ST_TO_ADDR
9237: GO 9196
9239: POP
9240: POP
// end ;
9241: LD_VAR 0 4
9245: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9246: LD_INT 0
9248: PPUSH
9249: PPUSH
9250: PPUSH
// result := true ;
9251: LD_ADDR_VAR 0 3
9255: PUSH
9256: LD_INT 1
9258: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9259: LD_ADDR_VAR 0 5
9263: PUSH
9264: LD_VAR 0 2
9268: PPUSH
9269: CALL_OW 480
9273: ST_TO_ADDR
// if not tmp then
9274: LD_VAR 0 5
9278: NOT
9279: IFFALSE 9283
// exit ;
9281: GO 9332
// for i in tmp do
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 5
9292: PUSH
9293: FOR_IN
9294: IFFALSE 9330
// if GetTech ( i , side ) <> state_researched then
9296: LD_VAR 0 4
9300: PPUSH
9301: LD_VAR 0 1
9305: PPUSH
9306: CALL_OW 321
9310: PUSH
9311: LD_INT 2
9313: NONEQUAL
9314: IFFALSE 9328
// begin result := false ;
9316: LD_ADDR_VAR 0 3
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// exit ;
9324: POP
9325: POP
9326: GO 9332
// end ;
9328: GO 9293
9330: POP
9331: POP
// end ;
9332: LD_VAR 0 3
9336: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9337: LD_INT 0
9339: PPUSH
9340: PPUSH
9341: PPUSH
9342: PPUSH
9343: PPUSH
9344: PPUSH
9345: PPUSH
9346: PPUSH
9347: PPUSH
9348: PPUSH
9349: PPUSH
9350: PPUSH
9351: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9352: LD_VAR 0 1
9356: NOT
9357: PUSH
9358: LD_VAR 0 1
9362: PPUSH
9363: CALL_OW 257
9367: PUSH
9368: LD_INT 9
9370: NONEQUAL
9371: OR
9372: IFFALSE 9376
// exit ;
9374: GO 9949
// side := GetSide ( unit ) ;
9376: LD_ADDR_VAR 0 9
9380: PUSH
9381: LD_VAR 0 1
9385: PPUSH
9386: CALL_OW 255
9390: ST_TO_ADDR
// tech_space := tech_spacanom ;
9391: LD_ADDR_VAR 0 12
9395: PUSH
9396: LD_INT 29
9398: ST_TO_ADDR
// tech_time := tech_taurad ;
9399: LD_ADDR_VAR 0 13
9403: PUSH
9404: LD_INT 28
9406: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9407: LD_ADDR_VAR 0 11
9411: PUSH
9412: LD_VAR 0 1
9416: PPUSH
9417: CALL_OW 310
9421: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9422: LD_VAR 0 11
9426: PPUSH
9427: CALL_OW 247
9431: PUSH
9432: LD_INT 2
9434: EQUAL
9435: IFFALSE 9439
// exit ;
9437: GO 9949
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9439: LD_ADDR_VAR 0 8
9443: PUSH
9444: LD_INT 81
9446: PUSH
9447: LD_VAR 0 9
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: LD_INT 3
9458: PUSH
9459: LD_INT 21
9461: PUSH
9462: LD_INT 3
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PPUSH
9477: CALL_OW 69
9481: ST_TO_ADDR
// if not tmp then
9482: LD_VAR 0 8
9486: NOT
9487: IFFALSE 9491
// exit ;
9489: GO 9949
// if in_unit then
9491: LD_VAR 0 11
9495: IFFALSE 9519
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9497: LD_ADDR_VAR 0 10
9501: PUSH
9502: LD_VAR 0 8
9506: PPUSH
9507: LD_VAR 0 11
9511: PPUSH
9512: CALL_OW 74
9516: ST_TO_ADDR
9517: GO 9539
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9519: LD_ADDR_VAR 0 10
9523: PUSH
9524: LD_VAR 0 8
9528: PPUSH
9529: LD_VAR 0 1
9533: PPUSH
9534: CALL_OW 74
9538: ST_TO_ADDR
// if not enemy then
9539: LD_VAR 0 10
9543: NOT
9544: IFFALSE 9548
// exit ;
9546: GO 9949
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9548: LD_VAR 0 11
9552: PUSH
9553: LD_VAR 0 11
9557: PPUSH
9558: LD_VAR 0 10
9562: PPUSH
9563: CALL_OW 296
9567: PUSH
9568: LD_INT 13
9570: GREATER
9571: AND
9572: PUSH
9573: LD_VAR 0 1
9577: PPUSH
9578: LD_VAR 0 10
9582: PPUSH
9583: CALL_OW 296
9587: PUSH
9588: LD_INT 12
9590: GREATER
9591: OR
9592: IFFALSE 9596
// exit ;
9594: GO 9949
// missile := [ 1 ] ;
9596: LD_ADDR_VAR 0 14
9600: PUSH
9601: LD_INT 1
9603: PUSH
9604: EMPTY
9605: LIST
9606: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9607: LD_VAR 0 9
9611: PPUSH
9612: LD_VAR 0 12
9616: PPUSH
9617: CALL_OW 325
9621: IFFALSE 9650
// missile := Replace ( missile , missile + 1 , 2 ) ;
9623: LD_ADDR_VAR 0 14
9627: PUSH
9628: LD_VAR 0 14
9632: PPUSH
9633: LD_VAR 0 14
9637: PUSH
9638: LD_INT 1
9640: PLUS
9641: PPUSH
9642: LD_INT 2
9644: PPUSH
9645: CALL_OW 1
9649: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9650: LD_VAR 0 9
9654: PPUSH
9655: LD_VAR 0 13
9659: PPUSH
9660: CALL_OW 325
9664: PUSH
9665: LD_VAR 0 10
9669: PPUSH
9670: CALL_OW 255
9674: PPUSH
9675: LD_VAR 0 13
9679: PPUSH
9680: CALL_OW 325
9684: NOT
9685: AND
9686: IFFALSE 9715
// missile := Replace ( missile , missile + 1 , 3 ) ;
9688: LD_ADDR_VAR 0 14
9692: PUSH
9693: LD_VAR 0 14
9697: PPUSH
9698: LD_VAR 0 14
9702: PUSH
9703: LD_INT 1
9705: PLUS
9706: PPUSH
9707: LD_INT 3
9709: PPUSH
9710: CALL_OW 1
9714: ST_TO_ADDR
// if missile < 2 then
9715: LD_VAR 0 14
9719: PUSH
9720: LD_INT 2
9722: LESS
9723: IFFALSE 9727
// exit ;
9725: GO 9949
// x := GetX ( enemy ) ;
9727: LD_ADDR_VAR 0 4
9731: PUSH
9732: LD_VAR 0 10
9736: PPUSH
9737: CALL_OW 250
9741: ST_TO_ADDR
// y := GetY ( enemy ) ;
9742: LD_ADDR_VAR 0 5
9746: PUSH
9747: LD_VAR 0 10
9751: PPUSH
9752: CALL_OW 251
9756: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9757: LD_ADDR_VAR 0 6
9761: PUSH
9762: LD_VAR 0 4
9766: PUSH
9767: LD_INT 1
9769: NEG
9770: PPUSH
9771: LD_INT 1
9773: PPUSH
9774: CALL_OW 12
9778: PLUS
9779: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
9780: LD_ADDR_VAR 0 7
9784: PUSH
9785: LD_VAR 0 5
9789: PUSH
9790: LD_INT 1
9792: NEG
9793: PPUSH
9794: LD_INT 1
9796: PPUSH
9797: CALL_OW 12
9801: PLUS
9802: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9803: LD_VAR 0 6
9807: PPUSH
9808: LD_VAR 0 7
9812: PPUSH
9813: CALL_OW 488
9817: NOT
9818: IFFALSE 9840
// begin _x := x ;
9820: LD_ADDR_VAR 0 6
9824: PUSH
9825: LD_VAR 0 4
9829: ST_TO_ADDR
// _y := y ;
9830: LD_ADDR_VAR 0 7
9834: PUSH
9835: LD_VAR 0 5
9839: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
9840: LD_ADDR_VAR 0 3
9844: PUSH
9845: LD_INT 1
9847: PPUSH
9848: LD_VAR 0 14
9852: PPUSH
9853: CALL_OW 12
9857: ST_TO_ADDR
// case i of 1 :
9858: LD_VAR 0 3
9862: PUSH
9863: LD_INT 1
9865: DOUBLE
9866: EQUAL
9867: IFTRUE 9871
9869: GO 9888
9871: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
9872: LD_VAR 0 1
9876: PPUSH
9877: LD_VAR 0 10
9881: PPUSH
9882: CALL_OW 115
9886: GO 9949
9888: LD_INT 2
9890: DOUBLE
9891: EQUAL
9892: IFTRUE 9896
9894: GO 9918
9896: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
9897: LD_VAR 0 1
9901: PPUSH
9902: LD_VAR 0 6
9906: PPUSH
9907: LD_VAR 0 7
9911: PPUSH
9912: CALL_OW 153
9916: GO 9949
9918: LD_INT 3
9920: DOUBLE
9921: EQUAL
9922: IFTRUE 9926
9924: GO 9948
9926: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
9927: LD_VAR 0 1
9931: PPUSH
9932: LD_VAR 0 6
9936: PPUSH
9937: LD_VAR 0 7
9941: PPUSH
9942: CALL_OW 154
9946: GO 9949
9948: POP
// end ;
9949: LD_VAR 0 2
9953: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
9954: LD_INT 0
9956: PPUSH
9957: PPUSH
9958: PPUSH
9959: PPUSH
9960: PPUSH
9961: PPUSH
// if not unit or not building then
9962: LD_VAR 0 1
9966: NOT
9967: PUSH
9968: LD_VAR 0 2
9972: NOT
9973: OR
9974: IFFALSE 9978
// exit ;
9976: GO 10136
// x := GetX ( building ) ;
9978: LD_ADDR_VAR 0 5
9982: PUSH
9983: LD_VAR 0 2
9987: PPUSH
9988: CALL_OW 250
9992: ST_TO_ADDR
// y := GetY ( building ) ;
9993: LD_ADDR_VAR 0 6
9997: PUSH
9998: LD_VAR 0 2
10002: PPUSH
10003: CALL_OW 251
10007: ST_TO_ADDR
// for i = 0 to 5 do
10008: LD_ADDR_VAR 0 4
10012: PUSH
10013: DOUBLE
10014: LD_INT 0
10016: DEC
10017: ST_TO_ADDR
10018: LD_INT 5
10020: PUSH
10021: FOR_TO
10022: IFFALSE 10134
// begin _x := ShiftX ( x , i , 3 ) ;
10024: LD_ADDR_VAR 0 7
10028: PUSH
10029: LD_VAR 0 5
10033: PPUSH
10034: LD_VAR 0 4
10038: PPUSH
10039: LD_INT 3
10041: PPUSH
10042: CALL_OW 272
10046: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10047: LD_ADDR_VAR 0 8
10051: PUSH
10052: LD_VAR 0 6
10056: PPUSH
10057: LD_VAR 0 4
10061: PPUSH
10062: LD_INT 3
10064: PPUSH
10065: CALL_OW 273
10069: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10070: LD_VAR 0 7
10074: PPUSH
10075: LD_VAR 0 8
10079: PPUSH
10080: CALL_OW 488
10084: NOT
10085: IFFALSE 10089
// continue ;
10087: GO 10021
// if HexInfo ( _x , _y ) = 0 then
10089: LD_VAR 0 7
10093: PPUSH
10094: LD_VAR 0 8
10098: PPUSH
10099: CALL_OW 428
10103: PUSH
10104: LD_INT 0
10106: EQUAL
10107: IFFALSE 10132
// begin ComMoveXY ( unit , _x , _y ) ;
10109: LD_VAR 0 1
10113: PPUSH
10114: LD_VAR 0 7
10118: PPUSH
10119: LD_VAR 0 8
10123: PPUSH
10124: CALL_OW 111
// exit ;
10128: POP
10129: POP
10130: GO 10136
// end ; end ;
10132: GO 10021
10134: POP
10135: POP
// end ;
10136: LD_VAR 0 3
10140: RET
// export function ScanBase ( side , base_area ) ; begin
10141: LD_INT 0
10143: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10144: LD_ADDR_VAR 0 3
10148: PUSH
10149: LD_VAR 0 2
10153: PPUSH
10154: LD_INT 81
10156: PUSH
10157: LD_VAR 0 1
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PPUSH
10166: CALL_OW 70
10170: ST_TO_ADDR
// end ;
10171: LD_VAR 0 3
10175: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10176: LD_INT 0
10178: PPUSH
10179: PPUSH
10180: PPUSH
10181: PPUSH
// result := false ;
10182: LD_ADDR_VAR 0 2
10186: PUSH
10187: LD_INT 0
10189: ST_TO_ADDR
// side := GetSide ( unit ) ;
10190: LD_ADDR_VAR 0 3
10194: PUSH
10195: LD_VAR 0 1
10199: PPUSH
10200: CALL_OW 255
10204: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10205: LD_ADDR_VAR 0 4
10209: PUSH
10210: LD_VAR 0 1
10214: PPUSH
10215: CALL_OW 248
10219: ST_TO_ADDR
// case nat of 1 :
10220: LD_VAR 0 4
10224: PUSH
10225: LD_INT 1
10227: DOUBLE
10228: EQUAL
10229: IFTRUE 10233
10231: GO 10244
10233: POP
// tech := tech_lassight ; 2 :
10234: LD_ADDR_VAR 0 5
10238: PUSH
10239: LD_INT 12
10241: ST_TO_ADDR
10242: GO 10283
10244: LD_INT 2
10246: DOUBLE
10247: EQUAL
10248: IFTRUE 10252
10250: GO 10263
10252: POP
// tech := tech_mortar ; 3 :
10253: LD_ADDR_VAR 0 5
10257: PUSH
10258: LD_INT 41
10260: ST_TO_ADDR
10261: GO 10283
10263: LD_INT 3
10265: DOUBLE
10266: EQUAL
10267: IFTRUE 10271
10269: GO 10282
10271: POP
// tech := tech_bazooka ; end ;
10272: LD_ADDR_VAR 0 5
10276: PUSH
10277: LD_INT 44
10279: ST_TO_ADDR
10280: GO 10283
10282: POP
// if Researched ( side , tech ) then
10283: LD_VAR 0 3
10287: PPUSH
10288: LD_VAR 0 5
10292: PPUSH
10293: CALL_OW 325
10297: IFFALSE 10324
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10299: LD_ADDR_VAR 0 2
10303: PUSH
10304: LD_INT 5
10306: PUSH
10307: LD_INT 8
10309: PUSH
10310: LD_INT 9
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: LIST
10317: PUSH
10318: LD_VAR 0 4
10322: ARRAY
10323: ST_TO_ADDR
// end ;
10324: LD_VAR 0 2
10328: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10329: LD_INT 0
10331: PPUSH
10332: PPUSH
10333: PPUSH
// if not mines then
10334: LD_VAR 0 2
10338: NOT
10339: IFFALSE 10343
// exit ;
10341: GO 10487
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10343: LD_ADDR_VAR 0 5
10347: PUSH
10348: LD_INT 81
10350: PUSH
10351: LD_VAR 0 1
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 3
10362: PUSH
10363: LD_INT 21
10365: PUSH
10366: LD_INT 3
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 69
10385: ST_TO_ADDR
// for i in mines do
10386: LD_ADDR_VAR 0 4
10390: PUSH
10391: LD_VAR 0 2
10395: PUSH
10396: FOR_IN
10397: IFFALSE 10485
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10399: LD_VAR 0 4
10403: PUSH
10404: LD_INT 1
10406: ARRAY
10407: PPUSH
10408: LD_VAR 0 4
10412: PUSH
10413: LD_INT 2
10415: ARRAY
10416: PPUSH
10417: CALL_OW 458
10421: NOT
10422: IFFALSE 10426
// continue ;
10424: GO 10396
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10426: LD_VAR 0 4
10430: PUSH
10431: LD_INT 1
10433: ARRAY
10434: PPUSH
10435: LD_VAR 0 4
10439: PUSH
10440: LD_INT 2
10442: ARRAY
10443: PPUSH
10444: CALL_OW 428
10448: PUSH
10449: LD_VAR 0 5
10453: IN
10454: IFFALSE 10483
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10456: LD_VAR 0 4
10460: PUSH
10461: LD_INT 1
10463: ARRAY
10464: PPUSH
10465: LD_VAR 0 4
10469: PUSH
10470: LD_INT 2
10472: ARRAY
10473: PPUSH
10474: LD_VAR 0 1
10478: PPUSH
10479: CALL_OW 456
// end ;
10483: GO 10396
10485: POP
10486: POP
// end ;
10487: LD_VAR 0 3
10491: RET
// export function Count ( array ) ; begin
10492: LD_INT 0
10494: PPUSH
// result := array + 0 ;
10495: LD_ADDR_VAR 0 2
10499: PUSH
10500: LD_VAR 0 1
10504: PUSH
10505: LD_INT 0
10507: PLUS
10508: ST_TO_ADDR
// end ;
10509: LD_VAR 0 2
10513: RET
// export function IsEmpty ( building ) ; begin
10514: LD_INT 0
10516: PPUSH
// if not building then
10517: LD_VAR 0 1
10521: NOT
10522: IFFALSE 10526
// exit ;
10524: GO 10569
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10526: LD_ADDR_VAR 0 2
10530: PUSH
10531: LD_VAR 0 1
10535: PUSH
10536: LD_INT 22
10538: PUSH
10539: LD_VAR 0 1
10543: PPUSH
10544: CALL_OW 255
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 58
10555: PUSH
10556: EMPTY
10557: LIST
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: IN
10568: ST_TO_ADDR
// end ;
10569: LD_VAR 0 2
10573: RET
// export function IsNotFull ( building ) ; var places ; begin
10574: LD_INT 0
10576: PPUSH
10577: PPUSH
// if not building then
10578: LD_VAR 0 1
10582: NOT
10583: IFFALSE 10587
// exit ;
10585: GO 10758
// result := false ;
10587: LD_ADDR_VAR 0 2
10591: PUSH
10592: LD_INT 0
10594: ST_TO_ADDR
// places := 0 ;
10595: LD_ADDR_VAR 0 3
10599: PUSH
10600: LD_INT 0
10602: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
10603: LD_VAR 0 1
10607: PPUSH
10608: CALL_OW 266
10612: PUSH
10613: LD_INT 0
10615: DOUBLE
10616: EQUAL
10617: IFTRUE 10675
10619: LD_INT 1
10621: DOUBLE
10622: EQUAL
10623: IFTRUE 10675
10625: LD_INT 6
10627: DOUBLE
10628: EQUAL
10629: IFTRUE 10675
10631: LD_INT 7
10633: DOUBLE
10634: EQUAL
10635: IFTRUE 10675
10637: LD_INT 8
10639: DOUBLE
10640: EQUAL
10641: IFTRUE 10675
10643: LD_INT 4
10645: DOUBLE
10646: EQUAL
10647: IFTRUE 10675
10649: LD_INT 5
10651: DOUBLE
10652: EQUAL
10653: IFTRUE 10675
10655: LD_INT 2
10657: DOUBLE
10658: EQUAL
10659: IFTRUE 10675
10661: LD_INT 3
10663: DOUBLE
10664: EQUAL
10665: IFTRUE 10675
10667: LD_INT 35
10669: DOUBLE
10670: EQUAL
10671: IFTRUE 10675
10673: GO 10686
10675: POP
// places := 6 ; b_bunker , b_breastwork :
10676: LD_ADDR_VAR 0 3
10680: PUSH
10681: LD_INT 6
10683: ST_TO_ADDR
10684: GO 10731
10686: LD_INT 32
10688: DOUBLE
10689: EQUAL
10690: IFTRUE 10700
10692: LD_INT 31
10694: DOUBLE
10695: EQUAL
10696: IFTRUE 10700
10698: GO 10711
10700: POP
// places := 1 ; b_control_tower :
10701: LD_ADDR_VAR 0 3
10705: PUSH
10706: LD_INT 1
10708: ST_TO_ADDR
10709: GO 10731
10711: LD_INT 36
10713: DOUBLE
10714: EQUAL
10715: IFTRUE 10719
10717: GO 10730
10719: POP
// places := 3 ; end ;
10720: LD_ADDR_VAR 0 3
10724: PUSH
10725: LD_INT 3
10727: ST_TO_ADDR
10728: GO 10731
10730: POP
// if places then
10731: LD_VAR 0 3
10735: IFFALSE 10758
// result := UnitsInside ( building ) < places ;
10737: LD_ADDR_VAR 0 2
10741: PUSH
10742: LD_VAR 0 1
10746: PPUSH
10747: CALL_OW 313
10751: PUSH
10752: LD_VAR 0 3
10756: LESS
10757: ST_TO_ADDR
// end ;
10758: LD_VAR 0 2
10762: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10763: LD_INT 0
10765: PPUSH
10766: PPUSH
10767: PPUSH
10768: PPUSH
// tmp := [ ] ;
10769: LD_ADDR_VAR 0 3
10773: PUSH
10774: EMPTY
10775: ST_TO_ADDR
// list := [ ] ;
10776: LD_ADDR_VAR 0 5
10780: PUSH
10781: EMPTY
10782: ST_TO_ADDR
// for i = 16 to 25 do
10783: LD_ADDR_VAR 0 4
10787: PUSH
10788: DOUBLE
10789: LD_INT 16
10791: DEC
10792: ST_TO_ADDR
10793: LD_INT 25
10795: PUSH
10796: FOR_TO
10797: IFFALSE 10870
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10799: LD_ADDR_VAR 0 3
10803: PUSH
10804: LD_VAR 0 3
10808: PUSH
10809: LD_INT 22
10811: PUSH
10812: LD_VAR 0 1
10816: PPUSH
10817: CALL_OW 255
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: LD_INT 91
10828: PUSH
10829: LD_VAR 0 1
10833: PUSH
10834: LD_INT 6
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 30
10844: PUSH
10845: LD_VAR 0 4
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: LIST
10858: PUSH
10859: EMPTY
10860: LIST
10861: PPUSH
10862: CALL_OW 69
10866: ADD
10867: ST_TO_ADDR
10868: GO 10796
10870: POP
10871: POP
// for i = 1 to tmp do
10872: LD_ADDR_VAR 0 4
10876: PUSH
10877: DOUBLE
10878: LD_INT 1
10880: DEC
10881: ST_TO_ADDR
10882: LD_VAR 0 3
10886: PUSH
10887: FOR_TO
10888: IFFALSE 10976
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10890: LD_ADDR_VAR 0 5
10894: PUSH
10895: LD_VAR 0 5
10899: PUSH
10900: LD_VAR 0 3
10904: PUSH
10905: LD_VAR 0 4
10909: ARRAY
10910: PPUSH
10911: CALL_OW 266
10915: PUSH
10916: LD_VAR 0 3
10920: PUSH
10921: LD_VAR 0 4
10925: ARRAY
10926: PPUSH
10927: CALL_OW 250
10931: PUSH
10932: LD_VAR 0 3
10936: PUSH
10937: LD_VAR 0 4
10941: ARRAY
10942: PPUSH
10943: CALL_OW 251
10947: PUSH
10948: LD_VAR 0 3
10952: PUSH
10953: LD_VAR 0 4
10957: ARRAY
10958: PPUSH
10959: CALL_OW 254
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: PUSH
10970: EMPTY
10971: LIST
10972: ADD
10973: ST_TO_ADDR
10974: GO 10887
10976: POP
10977: POP
// result := list ;
10978: LD_ADDR_VAR 0 2
10982: PUSH
10983: LD_VAR 0 5
10987: ST_TO_ADDR
// end ;
10988: LD_VAR 0 2
10992: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
10993: LD_INT 0
10995: PPUSH
10996: PPUSH
10997: PPUSH
10998: PPUSH
10999: PPUSH
11000: PPUSH
11001: PPUSH
// if not factory then
11002: LD_VAR 0 1
11006: NOT
11007: IFFALSE 11011
// exit ;
11009: GO 11604
// if control = control_apeman then
11011: LD_VAR 0 4
11015: PUSH
11016: LD_INT 5
11018: EQUAL
11019: IFFALSE 11128
// begin tmp := UnitsInside ( factory ) ;
11021: LD_ADDR_VAR 0 8
11025: PUSH
11026: LD_VAR 0 1
11030: PPUSH
11031: CALL_OW 313
11035: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11036: LD_VAR 0 8
11040: PPUSH
11041: LD_INT 25
11043: PUSH
11044: LD_INT 12
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PPUSH
11051: CALL_OW 72
11055: NOT
11056: IFFALSE 11066
// control := control_manual ;
11058: LD_ADDR_VAR 0 4
11062: PUSH
11063: LD_INT 1
11065: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11066: LD_ADDR_VAR 0 8
11070: PUSH
11071: LD_VAR 0 1
11075: PPUSH
11076: CALL 10763 0 1
11080: ST_TO_ADDR
// if tmp then
11081: LD_VAR 0 8
11085: IFFALSE 11128
// begin for i in tmp do
11087: LD_ADDR_VAR 0 7
11091: PUSH
11092: LD_VAR 0 8
11096: PUSH
11097: FOR_IN
11098: IFFALSE 11126
// if i [ 1 ] = b_ext_radio then
11100: LD_VAR 0 7
11104: PUSH
11105: LD_INT 1
11107: ARRAY
11108: PUSH
11109: LD_INT 22
11111: EQUAL
11112: IFFALSE 11124
// begin control := control_remote ;
11114: LD_ADDR_VAR 0 4
11118: PUSH
11119: LD_INT 2
11121: ST_TO_ADDR
// break ;
11122: GO 11126
// end ;
11124: GO 11097
11126: POP
11127: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11128: LD_VAR 0 1
11132: PPUSH
11133: LD_VAR 0 2
11137: PPUSH
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_VAR 0 4
11147: PPUSH
11148: LD_VAR 0 5
11152: PPUSH
11153: CALL_OW 448
11157: IFFALSE 11192
// begin result := [ chassis , engine , control , weapon ] ;
11159: LD_ADDR_VAR 0 6
11163: PUSH
11164: LD_VAR 0 2
11168: PUSH
11169: LD_VAR 0 3
11173: PUSH
11174: LD_VAR 0 4
11178: PUSH
11179: LD_VAR 0 5
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: ST_TO_ADDR
// exit ;
11190: GO 11604
// end ; _chassis := AvailableChassisList ( factory ) ;
11192: LD_ADDR_VAR 0 9
11196: PUSH
11197: LD_VAR 0 1
11201: PPUSH
11202: CALL_OW 475
11206: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11207: LD_ADDR_VAR 0 11
11211: PUSH
11212: LD_VAR 0 1
11216: PPUSH
11217: CALL_OW 476
11221: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11222: LD_ADDR_VAR 0 12
11226: PUSH
11227: LD_VAR 0 1
11231: PPUSH
11232: CALL_OW 477
11236: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11237: LD_ADDR_VAR 0 10
11241: PUSH
11242: LD_VAR 0 1
11246: PPUSH
11247: CALL_OW 478
11251: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11252: LD_VAR 0 9
11256: NOT
11257: PUSH
11258: LD_VAR 0 11
11262: NOT
11263: OR
11264: PUSH
11265: LD_VAR 0 12
11269: NOT
11270: OR
11271: PUSH
11272: LD_VAR 0 10
11276: NOT
11277: OR
11278: IFFALSE 11313
// begin result := [ chassis , engine , control , weapon ] ;
11280: LD_ADDR_VAR 0 6
11284: PUSH
11285: LD_VAR 0 2
11289: PUSH
11290: LD_VAR 0 3
11294: PUSH
11295: LD_VAR 0 4
11299: PUSH
11300: LD_VAR 0 5
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: ST_TO_ADDR
// exit ;
11311: GO 11604
// end ; if not chassis in _chassis then
11313: LD_VAR 0 2
11317: PUSH
11318: LD_VAR 0 9
11322: IN
11323: NOT
11324: IFFALSE 11350
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11326: LD_ADDR_VAR 0 2
11330: PUSH
11331: LD_VAR 0 9
11335: PUSH
11336: LD_INT 1
11338: PPUSH
11339: LD_VAR 0 9
11343: PPUSH
11344: CALL_OW 12
11348: ARRAY
11349: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11350: LD_VAR 0 2
11354: PPUSH
11355: LD_VAR 0 3
11359: PPUSH
11360: CALL 11609 0 2
11364: NOT
11365: IFFALSE 11424
// repeat engine := _engine [ 1 ] ;
11367: LD_ADDR_VAR 0 3
11371: PUSH
11372: LD_VAR 0 11
11376: PUSH
11377: LD_INT 1
11379: ARRAY
11380: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11381: LD_ADDR_VAR 0 11
11385: PUSH
11386: LD_VAR 0 11
11390: PPUSH
11391: LD_INT 1
11393: PPUSH
11394: CALL_OW 3
11398: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11399: LD_VAR 0 2
11403: PPUSH
11404: LD_VAR 0 3
11408: PPUSH
11409: CALL 11609 0 2
11413: PUSH
11414: LD_VAR 0 11
11418: PUSH
11419: EMPTY
11420: EQUAL
11421: OR
11422: IFFALSE 11367
// if not control in _control then
11424: LD_VAR 0 4
11428: PUSH
11429: LD_VAR 0 12
11433: IN
11434: NOT
11435: IFFALSE 11461
// control := _control [ rand ( 1 , _control ) ] ;
11437: LD_ADDR_VAR 0 4
11441: PUSH
11442: LD_VAR 0 12
11446: PUSH
11447: LD_INT 1
11449: PPUSH
11450: LD_VAR 0 12
11454: PPUSH
11455: CALL_OW 12
11459: ARRAY
11460: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11461: LD_VAR 0 2
11465: PPUSH
11466: LD_VAR 0 5
11470: PPUSH
11471: CALL 11829 0 2
11475: NOT
11476: IFFALSE 11535
// repeat weapon := _weapon [ 1 ] ;
11478: LD_ADDR_VAR 0 5
11482: PUSH
11483: LD_VAR 0 10
11487: PUSH
11488: LD_INT 1
11490: ARRAY
11491: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11492: LD_ADDR_VAR 0 10
11496: PUSH
11497: LD_VAR 0 10
11501: PPUSH
11502: LD_INT 1
11504: PPUSH
11505: CALL_OW 3
11509: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11510: LD_VAR 0 2
11514: PPUSH
11515: LD_VAR 0 5
11519: PPUSH
11520: CALL 11829 0 2
11524: PUSH
11525: LD_VAR 0 10
11529: PUSH
11530: EMPTY
11531: EQUAL
11532: OR
11533: IFFALSE 11478
// result := [ ] ;
11535: LD_ADDR_VAR 0 6
11539: PUSH
11540: EMPTY
11541: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11542: LD_VAR 0 1
11546: PPUSH
11547: LD_VAR 0 2
11551: PPUSH
11552: LD_VAR 0 3
11556: PPUSH
11557: LD_VAR 0 4
11561: PPUSH
11562: LD_VAR 0 5
11566: PPUSH
11567: CALL_OW 448
11571: IFFALSE 11604
// result := [ chassis , engine , control , weapon ] ;
11573: LD_ADDR_VAR 0 6
11577: PUSH
11578: LD_VAR 0 2
11582: PUSH
11583: LD_VAR 0 3
11587: PUSH
11588: LD_VAR 0 4
11592: PUSH
11593: LD_VAR 0 5
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: ST_TO_ADDR
// end ;
11604: LD_VAR 0 6
11608: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11609: LD_INT 0
11611: PPUSH
// if not chassis or not engine then
11612: LD_VAR 0 1
11616: NOT
11617: PUSH
11618: LD_VAR 0 2
11622: NOT
11623: OR
11624: IFFALSE 11628
// exit ;
11626: GO 11824
// case engine of engine_solar :
11628: LD_VAR 0 2
11632: PUSH
11633: LD_INT 2
11635: DOUBLE
11636: EQUAL
11637: IFTRUE 11641
11639: GO 11679
11641: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11642: LD_ADDR_VAR 0 3
11646: PUSH
11647: LD_INT 11
11649: PUSH
11650: LD_INT 12
11652: PUSH
11653: LD_INT 13
11655: PUSH
11656: LD_INT 14
11658: PUSH
11659: LD_INT 1
11661: PUSH
11662: LD_INT 2
11664: PUSH
11665: LD_INT 3
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: ST_TO_ADDR
11677: GO 11808
11679: LD_INT 1
11681: DOUBLE
11682: EQUAL
11683: IFTRUE 11687
11685: GO 11749
11687: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11688: LD_ADDR_VAR 0 3
11692: PUSH
11693: LD_INT 11
11695: PUSH
11696: LD_INT 12
11698: PUSH
11699: LD_INT 13
11701: PUSH
11702: LD_INT 14
11704: PUSH
11705: LD_INT 1
11707: PUSH
11708: LD_INT 2
11710: PUSH
11711: LD_INT 3
11713: PUSH
11714: LD_INT 4
11716: PUSH
11717: LD_INT 5
11719: PUSH
11720: LD_INT 21
11722: PUSH
11723: LD_INT 23
11725: PUSH
11726: LD_INT 22
11728: PUSH
11729: LD_INT 24
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: ST_TO_ADDR
11747: GO 11808
11749: LD_INT 3
11751: DOUBLE
11752: EQUAL
11753: IFTRUE 11757
11755: GO 11807
11757: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11758: LD_ADDR_VAR 0 3
11762: PUSH
11763: LD_INT 13
11765: PUSH
11766: LD_INT 14
11768: PUSH
11769: LD_INT 2
11771: PUSH
11772: LD_INT 3
11774: PUSH
11775: LD_INT 4
11777: PUSH
11778: LD_INT 5
11780: PUSH
11781: LD_INT 21
11783: PUSH
11784: LD_INT 22
11786: PUSH
11787: LD_INT 23
11789: PUSH
11790: LD_INT 24
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: ST_TO_ADDR
11805: GO 11808
11807: POP
// result := ( chassis in result ) ;
11808: LD_ADDR_VAR 0 3
11812: PUSH
11813: LD_VAR 0 1
11817: PUSH
11818: LD_VAR 0 3
11822: IN
11823: ST_TO_ADDR
// end ;
11824: LD_VAR 0 3
11828: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11829: LD_INT 0
11831: PPUSH
// if not chassis or not weapon then
11832: LD_VAR 0 1
11836: NOT
11837: PUSH
11838: LD_VAR 0 2
11842: NOT
11843: OR
11844: IFFALSE 11848
// exit ;
11846: GO 12908
// case weapon of us_machine_gun :
11848: LD_VAR 0 2
11852: PUSH
11853: LD_INT 2
11855: DOUBLE
11856: EQUAL
11857: IFTRUE 11861
11859: GO 11891
11861: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11862: LD_ADDR_VAR 0 3
11866: PUSH
11867: LD_INT 1
11869: PUSH
11870: LD_INT 2
11872: PUSH
11873: LD_INT 3
11875: PUSH
11876: LD_INT 4
11878: PUSH
11879: LD_INT 5
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: ST_TO_ADDR
11889: GO 12892
11891: LD_INT 3
11893: DOUBLE
11894: EQUAL
11895: IFTRUE 11899
11897: GO 11929
11899: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11900: LD_ADDR_VAR 0 3
11904: PUSH
11905: LD_INT 1
11907: PUSH
11908: LD_INT 2
11910: PUSH
11911: LD_INT 3
11913: PUSH
11914: LD_INT 4
11916: PUSH
11917: LD_INT 5
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: ST_TO_ADDR
11927: GO 12892
11929: LD_INT 11
11931: DOUBLE
11932: EQUAL
11933: IFTRUE 11937
11935: GO 11967
11937: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
11938: LD_ADDR_VAR 0 3
11942: PUSH
11943: LD_INT 1
11945: PUSH
11946: LD_INT 2
11948: PUSH
11949: LD_INT 3
11951: PUSH
11952: LD_INT 4
11954: PUSH
11955: LD_INT 5
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: ST_TO_ADDR
11965: GO 12892
11967: LD_INT 4
11969: DOUBLE
11970: EQUAL
11971: IFTRUE 11975
11973: GO 12001
11975: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
11976: LD_ADDR_VAR 0 3
11980: PUSH
11981: LD_INT 2
11983: PUSH
11984: LD_INT 3
11986: PUSH
11987: LD_INT 4
11989: PUSH
11990: LD_INT 5
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: ST_TO_ADDR
11999: GO 12892
12001: LD_INT 5
12003: DOUBLE
12004: EQUAL
12005: IFTRUE 12009
12007: GO 12035
12009: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12010: LD_ADDR_VAR 0 3
12014: PUSH
12015: LD_INT 2
12017: PUSH
12018: LD_INT 3
12020: PUSH
12021: LD_INT 4
12023: PUSH
12024: LD_INT 5
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: ST_TO_ADDR
12033: GO 12892
12035: LD_INT 9
12037: DOUBLE
12038: EQUAL
12039: IFTRUE 12043
12041: GO 12069
12043: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12044: LD_ADDR_VAR 0 3
12048: PUSH
12049: LD_INT 2
12051: PUSH
12052: LD_INT 3
12054: PUSH
12055: LD_INT 4
12057: PUSH
12058: LD_INT 5
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: ST_TO_ADDR
12067: GO 12892
12069: LD_INT 7
12071: DOUBLE
12072: EQUAL
12073: IFTRUE 12077
12075: GO 12103
12077: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12078: LD_ADDR_VAR 0 3
12082: PUSH
12083: LD_INT 2
12085: PUSH
12086: LD_INT 3
12088: PUSH
12089: LD_INT 4
12091: PUSH
12092: LD_INT 5
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: ST_TO_ADDR
12101: GO 12892
12103: LD_INT 12
12105: DOUBLE
12106: EQUAL
12107: IFTRUE 12111
12109: GO 12137
12111: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12112: LD_ADDR_VAR 0 3
12116: PUSH
12117: LD_INT 2
12119: PUSH
12120: LD_INT 3
12122: PUSH
12123: LD_INT 4
12125: PUSH
12126: LD_INT 5
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: ST_TO_ADDR
12135: GO 12892
12137: LD_INT 13
12139: DOUBLE
12140: EQUAL
12141: IFTRUE 12145
12143: GO 12171
12145: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12146: LD_ADDR_VAR 0 3
12150: PUSH
12151: LD_INT 2
12153: PUSH
12154: LD_INT 3
12156: PUSH
12157: LD_INT 4
12159: PUSH
12160: LD_INT 5
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: ST_TO_ADDR
12169: GO 12892
12171: LD_INT 14
12173: DOUBLE
12174: EQUAL
12175: IFTRUE 12179
12177: GO 12197
12179: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12180: LD_ADDR_VAR 0 3
12184: PUSH
12185: LD_INT 4
12187: PUSH
12188: LD_INT 5
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: ST_TO_ADDR
12195: GO 12892
12197: LD_INT 6
12199: DOUBLE
12200: EQUAL
12201: IFTRUE 12205
12203: GO 12223
12205: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12206: LD_ADDR_VAR 0 3
12210: PUSH
12211: LD_INT 4
12213: PUSH
12214: LD_INT 5
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: ST_TO_ADDR
12221: GO 12892
12223: LD_INT 10
12225: DOUBLE
12226: EQUAL
12227: IFTRUE 12231
12229: GO 12249
12231: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12232: LD_ADDR_VAR 0 3
12236: PUSH
12237: LD_INT 4
12239: PUSH
12240: LD_INT 5
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: ST_TO_ADDR
12247: GO 12892
12249: LD_INT 22
12251: DOUBLE
12252: EQUAL
12253: IFTRUE 12257
12255: GO 12283
12257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12258: LD_ADDR_VAR 0 3
12262: PUSH
12263: LD_INT 11
12265: PUSH
12266: LD_INT 12
12268: PUSH
12269: LD_INT 13
12271: PUSH
12272: LD_INT 14
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: ST_TO_ADDR
12281: GO 12892
12283: LD_INT 23
12285: DOUBLE
12286: EQUAL
12287: IFTRUE 12291
12289: GO 12317
12291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12292: LD_ADDR_VAR 0 3
12296: PUSH
12297: LD_INT 11
12299: PUSH
12300: LD_INT 12
12302: PUSH
12303: LD_INT 13
12305: PUSH
12306: LD_INT 14
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: ST_TO_ADDR
12315: GO 12892
12317: LD_INT 24
12319: DOUBLE
12320: EQUAL
12321: IFTRUE 12325
12323: GO 12351
12325: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12326: LD_ADDR_VAR 0 3
12330: PUSH
12331: LD_INT 11
12333: PUSH
12334: LD_INT 12
12336: PUSH
12337: LD_INT 13
12339: PUSH
12340: LD_INT 14
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: ST_TO_ADDR
12349: GO 12892
12351: LD_INT 30
12353: DOUBLE
12354: EQUAL
12355: IFTRUE 12359
12357: GO 12385
12359: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12360: LD_ADDR_VAR 0 3
12364: PUSH
12365: LD_INT 11
12367: PUSH
12368: LD_INT 12
12370: PUSH
12371: LD_INT 13
12373: PUSH
12374: LD_INT 14
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: ST_TO_ADDR
12383: GO 12892
12385: LD_INT 25
12387: DOUBLE
12388: EQUAL
12389: IFTRUE 12393
12391: GO 12411
12393: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12394: LD_ADDR_VAR 0 3
12398: PUSH
12399: LD_INT 13
12401: PUSH
12402: LD_INT 14
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: ST_TO_ADDR
12409: GO 12892
12411: LD_INT 27
12413: DOUBLE
12414: EQUAL
12415: IFTRUE 12419
12417: GO 12437
12419: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12420: LD_ADDR_VAR 0 3
12424: PUSH
12425: LD_INT 13
12427: PUSH
12428: LD_INT 14
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: ST_TO_ADDR
12435: GO 12892
12437: LD_INT 92
12439: DOUBLE
12440: EQUAL
12441: IFTRUE 12445
12443: GO 12471
12445: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12446: LD_ADDR_VAR 0 3
12450: PUSH
12451: LD_INT 11
12453: PUSH
12454: LD_INT 12
12456: PUSH
12457: LD_INT 13
12459: PUSH
12460: LD_INT 14
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: ST_TO_ADDR
12469: GO 12892
12471: LD_INT 28
12473: DOUBLE
12474: EQUAL
12475: IFTRUE 12479
12477: GO 12497
12479: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12480: LD_ADDR_VAR 0 3
12484: PUSH
12485: LD_INT 13
12487: PUSH
12488: LD_INT 14
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: ST_TO_ADDR
12495: GO 12892
12497: LD_INT 29
12499: DOUBLE
12500: EQUAL
12501: IFTRUE 12505
12503: GO 12523
12505: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12506: LD_ADDR_VAR 0 3
12510: PUSH
12511: LD_INT 13
12513: PUSH
12514: LD_INT 14
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: ST_TO_ADDR
12521: GO 12892
12523: LD_INT 31
12525: DOUBLE
12526: EQUAL
12527: IFTRUE 12531
12529: GO 12549
12531: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12532: LD_ADDR_VAR 0 3
12536: PUSH
12537: LD_INT 13
12539: PUSH
12540: LD_INT 14
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: ST_TO_ADDR
12547: GO 12892
12549: LD_INT 26
12551: DOUBLE
12552: EQUAL
12553: IFTRUE 12557
12555: GO 12575
12557: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12558: LD_ADDR_VAR 0 3
12562: PUSH
12563: LD_INT 13
12565: PUSH
12566: LD_INT 14
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: ST_TO_ADDR
12573: GO 12892
12575: LD_INT 42
12577: DOUBLE
12578: EQUAL
12579: IFTRUE 12583
12581: GO 12609
12583: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12584: LD_ADDR_VAR 0 3
12588: PUSH
12589: LD_INT 21
12591: PUSH
12592: LD_INT 22
12594: PUSH
12595: LD_INT 23
12597: PUSH
12598: LD_INT 24
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: ST_TO_ADDR
12607: GO 12892
12609: LD_INT 43
12611: DOUBLE
12612: EQUAL
12613: IFTRUE 12617
12615: GO 12643
12617: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12618: LD_ADDR_VAR 0 3
12622: PUSH
12623: LD_INT 21
12625: PUSH
12626: LD_INT 22
12628: PUSH
12629: LD_INT 23
12631: PUSH
12632: LD_INT 24
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: ST_TO_ADDR
12641: GO 12892
12643: LD_INT 44
12645: DOUBLE
12646: EQUAL
12647: IFTRUE 12651
12649: GO 12677
12651: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12652: LD_ADDR_VAR 0 3
12656: PUSH
12657: LD_INT 21
12659: PUSH
12660: LD_INT 22
12662: PUSH
12663: LD_INT 23
12665: PUSH
12666: LD_INT 24
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: ST_TO_ADDR
12675: GO 12892
12677: LD_INT 45
12679: DOUBLE
12680: EQUAL
12681: IFTRUE 12685
12683: GO 12711
12685: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12686: LD_ADDR_VAR 0 3
12690: PUSH
12691: LD_INT 21
12693: PUSH
12694: LD_INT 22
12696: PUSH
12697: LD_INT 23
12699: PUSH
12700: LD_INT 24
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: ST_TO_ADDR
12709: GO 12892
12711: LD_INT 49
12713: DOUBLE
12714: EQUAL
12715: IFTRUE 12719
12717: GO 12745
12719: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12720: LD_ADDR_VAR 0 3
12724: PUSH
12725: LD_INT 21
12727: PUSH
12728: LD_INT 22
12730: PUSH
12731: LD_INT 23
12733: PUSH
12734: LD_INT 24
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: ST_TO_ADDR
12743: GO 12892
12745: LD_INT 51
12747: DOUBLE
12748: EQUAL
12749: IFTRUE 12753
12751: GO 12779
12753: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12754: LD_ADDR_VAR 0 3
12758: PUSH
12759: LD_INT 21
12761: PUSH
12762: LD_INT 22
12764: PUSH
12765: LD_INT 23
12767: PUSH
12768: LD_INT 24
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: ST_TO_ADDR
12777: GO 12892
12779: LD_INT 52
12781: DOUBLE
12782: EQUAL
12783: IFTRUE 12787
12785: GO 12813
12787: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12788: LD_ADDR_VAR 0 3
12792: PUSH
12793: LD_INT 21
12795: PUSH
12796: LD_INT 22
12798: PUSH
12799: LD_INT 23
12801: PUSH
12802: LD_INT 24
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: ST_TO_ADDR
12811: GO 12892
12813: LD_INT 53
12815: DOUBLE
12816: EQUAL
12817: IFTRUE 12821
12819: GO 12839
12821: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12822: LD_ADDR_VAR 0 3
12826: PUSH
12827: LD_INT 23
12829: PUSH
12830: LD_INT 24
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: ST_TO_ADDR
12837: GO 12892
12839: LD_INT 46
12841: DOUBLE
12842: EQUAL
12843: IFTRUE 12847
12845: GO 12865
12847: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12848: LD_ADDR_VAR 0 3
12852: PUSH
12853: LD_INT 23
12855: PUSH
12856: LD_INT 24
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: ST_TO_ADDR
12863: GO 12892
12865: LD_INT 47
12867: DOUBLE
12868: EQUAL
12869: IFTRUE 12873
12871: GO 12891
12873: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12874: LD_ADDR_VAR 0 3
12878: PUSH
12879: LD_INT 23
12881: PUSH
12882: LD_INT 24
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: ST_TO_ADDR
12889: GO 12892
12891: POP
// result := ( chassis in result ) ;
12892: LD_ADDR_VAR 0 3
12896: PUSH
12897: LD_VAR 0 1
12901: PUSH
12902: LD_VAR 0 3
12906: IN
12907: ST_TO_ADDR
// end ;
12908: LD_VAR 0 3
12912: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
12913: LD_INT 0
12915: PPUSH
12916: PPUSH
12917: PPUSH
12918: PPUSH
12919: PPUSH
12920: PPUSH
12921: PPUSH
// result := array ;
12922: LD_ADDR_VAR 0 5
12926: PUSH
12927: LD_VAR 0 1
12931: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
12932: LD_VAR 0 1
12936: NOT
12937: PUSH
12938: LD_VAR 0 2
12942: NOT
12943: OR
12944: PUSH
12945: LD_VAR 0 3
12949: NOT
12950: OR
12951: PUSH
12952: LD_VAR 0 2
12956: PUSH
12957: LD_VAR 0 1
12961: GREATER
12962: OR
12963: PUSH
12964: LD_VAR 0 3
12968: PUSH
12969: LD_VAR 0 1
12973: GREATER
12974: OR
12975: IFFALSE 12979
// exit ;
12977: GO 13275
// if direction then
12979: LD_VAR 0 4
12983: IFFALSE 13047
// begin d := 1 ;
12985: LD_ADDR_VAR 0 9
12989: PUSH
12990: LD_INT 1
12992: ST_TO_ADDR
// if i_from > i_to then
12993: LD_VAR 0 2
12997: PUSH
12998: LD_VAR 0 3
13002: GREATER
13003: IFFALSE 13029
// length := ( array - i_from ) + i_to else
13005: LD_ADDR_VAR 0 11
13009: PUSH
13010: LD_VAR 0 1
13014: PUSH
13015: LD_VAR 0 2
13019: MINUS
13020: PUSH
13021: LD_VAR 0 3
13025: PLUS
13026: ST_TO_ADDR
13027: GO 13045
// length := i_to - i_from ;
13029: LD_ADDR_VAR 0 11
13033: PUSH
13034: LD_VAR 0 3
13038: PUSH
13039: LD_VAR 0 2
13043: MINUS
13044: ST_TO_ADDR
// end else
13045: GO 13108
// begin d := - 1 ;
13047: LD_ADDR_VAR 0 9
13051: PUSH
13052: LD_INT 1
13054: NEG
13055: ST_TO_ADDR
// if i_from > i_to then
13056: LD_VAR 0 2
13060: PUSH
13061: LD_VAR 0 3
13065: GREATER
13066: IFFALSE 13086
// length := i_from - i_to else
13068: LD_ADDR_VAR 0 11
13072: PUSH
13073: LD_VAR 0 2
13077: PUSH
13078: LD_VAR 0 3
13082: MINUS
13083: ST_TO_ADDR
13084: GO 13108
// length := ( array - i_to ) + i_from ;
13086: LD_ADDR_VAR 0 11
13090: PUSH
13091: LD_VAR 0 1
13095: PUSH
13096: LD_VAR 0 3
13100: MINUS
13101: PUSH
13102: LD_VAR 0 2
13106: PLUS
13107: ST_TO_ADDR
// end ; if not length then
13108: LD_VAR 0 11
13112: NOT
13113: IFFALSE 13117
// exit ;
13115: GO 13275
// tmp := array ;
13117: LD_ADDR_VAR 0 10
13121: PUSH
13122: LD_VAR 0 1
13126: ST_TO_ADDR
// for i = 1 to length do
13127: LD_ADDR_VAR 0 6
13131: PUSH
13132: DOUBLE
13133: LD_INT 1
13135: DEC
13136: ST_TO_ADDR
13137: LD_VAR 0 11
13141: PUSH
13142: FOR_TO
13143: IFFALSE 13263
// begin for j = 1 to array do
13145: LD_ADDR_VAR 0 7
13149: PUSH
13150: DOUBLE
13151: LD_INT 1
13153: DEC
13154: ST_TO_ADDR
13155: LD_VAR 0 1
13159: PUSH
13160: FOR_TO
13161: IFFALSE 13249
// begin k := j + d ;
13163: LD_ADDR_VAR 0 8
13167: PUSH
13168: LD_VAR 0 7
13172: PUSH
13173: LD_VAR 0 9
13177: PLUS
13178: ST_TO_ADDR
// if k > array then
13179: LD_VAR 0 8
13183: PUSH
13184: LD_VAR 0 1
13188: GREATER
13189: IFFALSE 13199
// k := 1 ;
13191: LD_ADDR_VAR 0 8
13195: PUSH
13196: LD_INT 1
13198: ST_TO_ADDR
// if not k then
13199: LD_VAR 0 8
13203: NOT
13204: IFFALSE 13216
// k := array ;
13206: LD_ADDR_VAR 0 8
13210: PUSH
13211: LD_VAR 0 1
13215: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13216: LD_ADDR_VAR 0 10
13220: PUSH
13221: LD_VAR 0 10
13225: PPUSH
13226: LD_VAR 0 8
13230: PPUSH
13231: LD_VAR 0 1
13235: PUSH
13236: LD_VAR 0 7
13240: ARRAY
13241: PPUSH
13242: CALL_OW 1
13246: ST_TO_ADDR
// end ;
13247: GO 13160
13249: POP
13250: POP
// array := tmp ;
13251: LD_ADDR_VAR 0 1
13255: PUSH
13256: LD_VAR 0 10
13260: ST_TO_ADDR
// end ;
13261: GO 13142
13263: POP
13264: POP
// result := array ;
13265: LD_ADDR_VAR 0 5
13269: PUSH
13270: LD_VAR 0 1
13274: ST_TO_ADDR
// end ;
13275: LD_VAR 0 5
13279: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13280: LD_INT 0
13282: PPUSH
13283: PPUSH
// result := 0 ;
13284: LD_ADDR_VAR 0 3
13288: PUSH
13289: LD_INT 0
13291: ST_TO_ADDR
// if not array or not value in array then
13292: LD_VAR 0 1
13296: NOT
13297: PUSH
13298: LD_VAR 0 2
13302: PUSH
13303: LD_VAR 0 1
13307: IN
13308: NOT
13309: OR
13310: IFFALSE 13314
// exit ;
13312: GO 13368
// for i = 1 to array do
13314: LD_ADDR_VAR 0 4
13318: PUSH
13319: DOUBLE
13320: LD_INT 1
13322: DEC
13323: ST_TO_ADDR
13324: LD_VAR 0 1
13328: PUSH
13329: FOR_TO
13330: IFFALSE 13366
// if value = array [ i ] then
13332: LD_VAR 0 2
13336: PUSH
13337: LD_VAR 0 1
13341: PUSH
13342: LD_VAR 0 4
13346: ARRAY
13347: EQUAL
13348: IFFALSE 13364
// begin result := i ;
13350: LD_ADDR_VAR 0 3
13354: PUSH
13355: LD_VAR 0 4
13359: ST_TO_ADDR
// exit ;
13360: POP
13361: POP
13362: GO 13368
// end ;
13364: GO 13329
13366: POP
13367: POP
// end ;
13368: LD_VAR 0 3
13372: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13373: LD_INT 0
13375: PPUSH
// vc_chassis := chassis ;
13376: LD_ADDR_OWVAR 37
13380: PUSH
13381: LD_VAR 0 1
13385: ST_TO_ADDR
// vc_engine := engine ;
13386: LD_ADDR_OWVAR 39
13390: PUSH
13391: LD_VAR 0 2
13395: ST_TO_ADDR
// vc_control := control ;
13396: LD_ADDR_OWVAR 38
13400: PUSH
13401: LD_VAR 0 3
13405: ST_TO_ADDR
// vc_weapon := weapon ;
13406: LD_ADDR_OWVAR 40
13410: PUSH
13411: LD_VAR 0 4
13415: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13416: LD_ADDR_OWVAR 41
13420: PUSH
13421: LD_VAR 0 5
13425: ST_TO_ADDR
// end ;
13426: LD_VAR 0 6
13430: RET
// export function WantPlant ( unit ) ; var task ; begin
13431: LD_INT 0
13433: PPUSH
13434: PPUSH
// result := false ;
13435: LD_ADDR_VAR 0 2
13439: PUSH
13440: LD_INT 0
13442: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13443: LD_ADDR_VAR 0 3
13447: PUSH
13448: LD_VAR 0 1
13452: PPUSH
13453: CALL_OW 437
13457: ST_TO_ADDR
// if task then
13458: LD_VAR 0 3
13462: IFFALSE 13490
// if task [ 1 ] [ 1 ] = p then
13464: LD_VAR 0 3
13468: PUSH
13469: LD_INT 1
13471: ARRAY
13472: PUSH
13473: LD_INT 1
13475: ARRAY
13476: PUSH
13477: LD_STRING p
13479: EQUAL
13480: IFFALSE 13490
// result := true ;
13482: LD_ADDR_VAR 0 2
13486: PUSH
13487: LD_INT 1
13489: ST_TO_ADDR
// end ;
13490: LD_VAR 0 2
13494: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13495: LD_INT 0
13497: PPUSH
13498: PPUSH
13499: PPUSH
13500: PPUSH
// if pos < 1 then
13501: LD_VAR 0 2
13505: PUSH
13506: LD_INT 1
13508: LESS
13509: IFFALSE 13513
// exit ;
13511: GO 13816
// if pos = 1 then
13513: LD_VAR 0 2
13517: PUSH
13518: LD_INT 1
13520: EQUAL
13521: IFFALSE 13554
// result := Replace ( arr , pos [ 1 ] , value ) else
13523: LD_ADDR_VAR 0 4
13527: PUSH
13528: LD_VAR 0 1
13532: PPUSH
13533: LD_VAR 0 2
13537: PUSH
13538: LD_INT 1
13540: ARRAY
13541: PPUSH
13542: LD_VAR 0 3
13546: PPUSH
13547: CALL_OW 1
13551: ST_TO_ADDR
13552: GO 13816
// begin tmp := arr ;
13554: LD_ADDR_VAR 0 6
13558: PUSH
13559: LD_VAR 0 1
13563: ST_TO_ADDR
// s_arr := [ tmp ] ;
13564: LD_ADDR_VAR 0 7
13568: PUSH
13569: LD_VAR 0 6
13573: PUSH
13574: EMPTY
13575: LIST
13576: ST_TO_ADDR
// for i = 1 to pos - 1 do
13577: LD_ADDR_VAR 0 5
13581: PUSH
13582: DOUBLE
13583: LD_INT 1
13585: DEC
13586: ST_TO_ADDR
13587: LD_VAR 0 2
13591: PUSH
13592: LD_INT 1
13594: MINUS
13595: PUSH
13596: FOR_TO
13597: IFFALSE 13642
// begin tmp := tmp [ pos [ i ] ] ;
13599: LD_ADDR_VAR 0 6
13603: PUSH
13604: LD_VAR 0 6
13608: PUSH
13609: LD_VAR 0 2
13613: PUSH
13614: LD_VAR 0 5
13618: ARRAY
13619: ARRAY
13620: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13621: LD_ADDR_VAR 0 7
13625: PUSH
13626: LD_VAR 0 7
13630: PUSH
13631: LD_VAR 0 6
13635: PUSH
13636: EMPTY
13637: LIST
13638: ADD
13639: ST_TO_ADDR
// end ;
13640: GO 13596
13642: POP
13643: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13644: LD_ADDR_VAR 0 6
13648: PUSH
13649: LD_VAR 0 6
13653: PPUSH
13654: LD_VAR 0 2
13658: PUSH
13659: LD_VAR 0 2
13663: ARRAY
13664: PPUSH
13665: LD_VAR 0 3
13669: PPUSH
13670: CALL_OW 1
13674: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13675: LD_ADDR_VAR 0 7
13679: PUSH
13680: LD_VAR 0 7
13684: PPUSH
13685: LD_VAR 0 7
13689: PPUSH
13690: LD_VAR 0 6
13694: PPUSH
13695: CALL_OW 1
13699: ST_TO_ADDR
// for i = s_arr downto 2 do
13700: LD_ADDR_VAR 0 5
13704: PUSH
13705: DOUBLE
13706: LD_VAR 0 7
13710: INC
13711: ST_TO_ADDR
13712: LD_INT 2
13714: PUSH
13715: FOR_DOWNTO
13716: IFFALSE 13800
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13718: LD_ADDR_VAR 0 6
13722: PUSH
13723: LD_VAR 0 7
13727: PUSH
13728: LD_VAR 0 5
13732: PUSH
13733: LD_INT 1
13735: MINUS
13736: ARRAY
13737: PPUSH
13738: LD_VAR 0 2
13742: PUSH
13743: LD_VAR 0 5
13747: PUSH
13748: LD_INT 1
13750: MINUS
13751: ARRAY
13752: PPUSH
13753: LD_VAR 0 7
13757: PUSH
13758: LD_VAR 0 5
13762: ARRAY
13763: PPUSH
13764: CALL_OW 1
13768: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13769: LD_ADDR_VAR 0 7
13773: PUSH
13774: LD_VAR 0 7
13778: PPUSH
13779: LD_VAR 0 5
13783: PUSH
13784: LD_INT 1
13786: MINUS
13787: PPUSH
13788: LD_VAR 0 6
13792: PPUSH
13793: CALL_OW 1
13797: ST_TO_ADDR
// end ;
13798: GO 13715
13800: POP
13801: POP
// result := s_arr [ 1 ] ;
13802: LD_ADDR_VAR 0 4
13806: PUSH
13807: LD_VAR 0 7
13811: PUSH
13812: LD_INT 1
13814: ARRAY
13815: ST_TO_ADDR
// end ; end ;
13816: LD_VAR 0 4
13820: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13821: LD_INT 0
13823: PPUSH
13824: PPUSH
// if not list then
13825: LD_VAR 0 1
13829: NOT
13830: IFFALSE 13834
// exit ;
13832: GO 13925
// i := list [ pos1 ] ;
13834: LD_ADDR_VAR 0 5
13838: PUSH
13839: LD_VAR 0 1
13843: PUSH
13844: LD_VAR 0 2
13848: ARRAY
13849: ST_TO_ADDR
// if not i then
13850: LD_VAR 0 5
13854: NOT
13855: IFFALSE 13859
// exit ;
13857: GO 13925
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13859: LD_ADDR_VAR 0 1
13863: PUSH
13864: LD_VAR 0 1
13868: PPUSH
13869: LD_VAR 0 2
13873: PPUSH
13874: LD_VAR 0 1
13878: PUSH
13879: LD_VAR 0 3
13883: ARRAY
13884: PPUSH
13885: CALL_OW 1
13889: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13890: LD_ADDR_VAR 0 1
13894: PUSH
13895: LD_VAR 0 1
13899: PPUSH
13900: LD_VAR 0 3
13904: PPUSH
13905: LD_VAR 0 5
13909: PPUSH
13910: CALL_OW 1
13914: ST_TO_ADDR
// result := list ;
13915: LD_ADDR_VAR 0 4
13919: PUSH
13920: LD_VAR 0 1
13924: ST_TO_ADDR
// end ;
13925: LD_VAR 0 4
13929: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
13930: LD_INT 0
13932: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
13933: LD_ADDR_VAR 0 5
13937: PUSH
13938: LD_VAR 0 1
13942: PPUSH
13943: CALL_OW 250
13947: PPUSH
13948: LD_VAR 0 1
13952: PPUSH
13953: CALL_OW 251
13957: PPUSH
13958: LD_VAR 0 2
13962: PPUSH
13963: LD_VAR 0 3
13967: PPUSH
13968: LD_VAR 0 4
13972: PPUSH
13973: CALL 13983 0 5
13977: ST_TO_ADDR
// end ;
13978: LD_VAR 0 5
13982: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
13983: LD_INT 0
13985: PPUSH
13986: PPUSH
13987: PPUSH
13988: PPUSH
// if not list then
13989: LD_VAR 0 3
13993: NOT
13994: IFFALSE 13998
// exit ;
13996: GO 14386
// result := [ ] ;
13998: LD_ADDR_VAR 0 6
14002: PUSH
14003: EMPTY
14004: ST_TO_ADDR
// for i in list do
14005: LD_ADDR_VAR 0 7
14009: PUSH
14010: LD_VAR 0 3
14014: PUSH
14015: FOR_IN
14016: IFFALSE 14218
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14018: LD_ADDR_VAR 0 9
14022: PUSH
14023: LD_VAR 0 7
14027: PPUSH
14028: LD_VAR 0 1
14032: PPUSH
14033: LD_VAR 0 2
14037: PPUSH
14038: CALL_OW 297
14042: ST_TO_ADDR
// if not result then
14043: LD_VAR 0 6
14047: NOT
14048: IFFALSE 14074
// result := [ [ i , tmp ] ] else
14050: LD_ADDR_VAR 0 6
14054: PUSH
14055: LD_VAR 0 7
14059: PUSH
14060: LD_VAR 0 9
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: EMPTY
14070: LIST
14071: ST_TO_ADDR
14072: GO 14216
// begin if result [ result ] [ 2 ] < tmp then
14074: LD_VAR 0 6
14078: PUSH
14079: LD_VAR 0 6
14083: ARRAY
14084: PUSH
14085: LD_INT 2
14087: ARRAY
14088: PUSH
14089: LD_VAR 0 9
14093: LESS
14094: IFFALSE 14136
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14096: LD_ADDR_VAR 0 6
14100: PUSH
14101: LD_VAR 0 6
14105: PPUSH
14106: LD_VAR 0 6
14110: PUSH
14111: LD_INT 1
14113: PLUS
14114: PPUSH
14115: LD_VAR 0 7
14119: PUSH
14120: LD_VAR 0 9
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PPUSH
14129: CALL_OW 2
14133: ST_TO_ADDR
14134: GO 14216
// for j = 1 to result do
14136: LD_ADDR_VAR 0 8
14140: PUSH
14141: DOUBLE
14142: LD_INT 1
14144: DEC
14145: ST_TO_ADDR
14146: LD_VAR 0 6
14150: PUSH
14151: FOR_TO
14152: IFFALSE 14214
// begin if tmp < result [ j ] [ 2 ] then
14154: LD_VAR 0 9
14158: PUSH
14159: LD_VAR 0 6
14163: PUSH
14164: LD_VAR 0 8
14168: ARRAY
14169: PUSH
14170: LD_INT 2
14172: ARRAY
14173: LESS
14174: IFFALSE 14212
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14176: LD_ADDR_VAR 0 6
14180: PUSH
14181: LD_VAR 0 6
14185: PPUSH
14186: LD_VAR 0 8
14190: PPUSH
14191: LD_VAR 0 7
14195: PUSH
14196: LD_VAR 0 9
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PPUSH
14205: CALL_OW 2
14209: ST_TO_ADDR
// break ;
14210: GO 14214
// end ; end ;
14212: GO 14151
14214: POP
14215: POP
// end ; end ;
14216: GO 14015
14218: POP
14219: POP
// if result and not asc then
14220: LD_VAR 0 6
14224: PUSH
14225: LD_VAR 0 4
14229: NOT
14230: AND
14231: IFFALSE 14306
// begin tmp := result ;
14233: LD_ADDR_VAR 0 9
14237: PUSH
14238: LD_VAR 0 6
14242: ST_TO_ADDR
// for i = tmp downto 1 do
14243: LD_ADDR_VAR 0 7
14247: PUSH
14248: DOUBLE
14249: LD_VAR 0 9
14253: INC
14254: ST_TO_ADDR
14255: LD_INT 1
14257: PUSH
14258: FOR_DOWNTO
14259: IFFALSE 14304
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14261: LD_ADDR_VAR 0 6
14265: PUSH
14266: LD_VAR 0 6
14270: PPUSH
14271: LD_VAR 0 9
14275: PUSH
14276: LD_VAR 0 7
14280: MINUS
14281: PUSH
14282: LD_INT 1
14284: PLUS
14285: PPUSH
14286: LD_VAR 0 9
14290: PUSH
14291: LD_VAR 0 7
14295: ARRAY
14296: PPUSH
14297: CALL_OW 1
14301: ST_TO_ADDR
14302: GO 14258
14304: POP
14305: POP
// end ; tmp := [ ] ;
14306: LD_ADDR_VAR 0 9
14310: PUSH
14311: EMPTY
14312: ST_TO_ADDR
// if mode then
14313: LD_VAR 0 5
14317: IFFALSE 14386
// begin for i = 1 to result do
14319: LD_ADDR_VAR 0 7
14323: PUSH
14324: DOUBLE
14325: LD_INT 1
14327: DEC
14328: ST_TO_ADDR
14329: LD_VAR 0 6
14333: PUSH
14334: FOR_TO
14335: IFFALSE 14374
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
14337: LD_ADDR_VAR 0 9
14341: PUSH
14342: LD_VAR 0 9
14346: PPUSH
14347: LD_VAR 0 7
14351: PPUSH
14352: LD_VAR 0 6
14356: PUSH
14357: LD_VAR 0 7
14361: ARRAY
14362: PUSH
14363: LD_INT 1
14365: ARRAY
14366: PPUSH
14367: CALL_OW 1
14371: ST_TO_ADDR
14372: GO 14334
14374: POP
14375: POP
// result := tmp ;
14376: LD_ADDR_VAR 0 6
14380: PUSH
14381: LD_VAR 0 9
14385: ST_TO_ADDR
// end ; end ;
14386: LD_VAR 0 6
14390: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
14391: LD_INT 0
14393: PPUSH
14394: PPUSH
14395: PPUSH
14396: PPUSH
14397: PPUSH
14398: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
14399: LD_ADDR_VAR 0 5
14403: PUSH
14404: LD_INT 0
14406: PUSH
14407: LD_INT 0
14409: PUSH
14410: LD_INT 0
14412: PUSH
14413: EMPTY
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: ST_TO_ADDR
// if not x or not y then
14421: LD_VAR 0 2
14425: NOT
14426: PUSH
14427: LD_VAR 0 3
14431: NOT
14432: OR
14433: IFFALSE 14437
// exit ;
14435: GO 16087
// if not range then
14437: LD_VAR 0 4
14441: NOT
14442: IFFALSE 14452
// range := 10 ;
14444: LD_ADDR_VAR 0 4
14448: PUSH
14449: LD_INT 10
14451: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14452: LD_ADDR_VAR 0 8
14456: PUSH
14457: LD_INT 81
14459: PUSH
14460: LD_VAR 0 1
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PUSH
14469: LD_INT 92
14471: PUSH
14472: LD_VAR 0 2
14476: PUSH
14477: LD_VAR 0 3
14481: PUSH
14482: LD_VAR 0 4
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 3
14495: PUSH
14496: LD_INT 21
14498: PUSH
14499: LD_INT 3
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: LIST
14514: PPUSH
14515: CALL_OW 69
14519: ST_TO_ADDR
// if not tmp then
14520: LD_VAR 0 8
14524: NOT
14525: IFFALSE 14529
// exit ;
14527: GO 16087
// for i in tmp do
14529: LD_ADDR_VAR 0 6
14533: PUSH
14534: LD_VAR 0 8
14538: PUSH
14539: FOR_IN
14540: IFFALSE 16062
// begin points := [ 0 , 0 , 0 ] ;
14542: LD_ADDR_VAR 0 9
14546: PUSH
14547: LD_INT 0
14549: PUSH
14550: LD_INT 0
14552: PUSH
14553: LD_INT 0
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: LIST
14560: ST_TO_ADDR
// bpoints := 1 ;
14561: LD_ADDR_VAR 0 10
14565: PUSH
14566: LD_INT 1
14568: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14569: LD_VAR 0 6
14573: PPUSH
14574: CALL_OW 247
14578: PUSH
14579: LD_INT 1
14581: DOUBLE
14582: EQUAL
14583: IFTRUE 14587
14585: GO 15165
14587: POP
// begin if GetClass ( i ) = 1 then
14588: LD_VAR 0 6
14592: PPUSH
14593: CALL_OW 257
14597: PUSH
14598: LD_INT 1
14600: EQUAL
14601: IFFALSE 14622
// points := [ 10 , 5 , 3 ] ;
14603: LD_ADDR_VAR 0 9
14607: PUSH
14608: LD_INT 10
14610: PUSH
14611: LD_INT 5
14613: PUSH
14614: LD_INT 3
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: LIST
14621: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14622: LD_VAR 0 6
14626: PPUSH
14627: CALL_OW 257
14631: PUSH
14632: LD_INT 2
14634: PUSH
14635: LD_INT 3
14637: PUSH
14638: LD_INT 4
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: IN
14646: IFFALSE 14667
// points := [ 3 , 2 , 1 ] ;
14648: LD_ADDR_VAR 0 9
14652: PUSH
14653: LD_INT 3
14655: PUSH
14656: LD_INT 2
14658: PUSH
14659: LD_INT 1
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: LIST
14666: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14667: LD_VAR 0 6
14671: PPUSH
14672: CALL_OW 257
14676: PUSH
14677: LD_INT 5
14679: EQUAL
14680: IFFALSE 14701
// points := [ 130 , 5 , 2 ] ;
14682: LD_ADDR_VAR 0 9
14686: PUSH
14687: LD_INT 130
14689: PUSH
14690: LD_INT 5
14692: PUSH
14693: LD_INT 2
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: LIST
14700: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14701: LD_VAR 0 6
14705: PPUSH
14706: CALL_OW 257
14710: PUSH
14711: LD_INT 8
14713: EQUAL
14714: IFFALSE 14735
// points := [ 35 , 35 , 30 ] ;
14716: LD_ADDR_VAR 0 9
14720: PUSH
14721: LD_INT 35
14723: PUSH
14724: LD_INT 35
14726: PUSH
14727: LD_INT 30
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14735: LD_VAR 0 6
14739: PPUSH
14740: CALL_OW 257
14744: PUSH
14745: LD_INT 9
14747: EQUAL
14748: IFFALSE 14769
// points := [ 20 , 55 , 40 ] ;
14750: LD_ADDR_VAR 0 9
14754: PUSH
14755: LD_INT 20
14757: PUSH
14758: LD_INT 55
14760: PUSH
14761: LD_INT 40
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14769: LD_VAR 0 6
14773: PPUSH
14774: CALL_OW 257
14778: PUSH
14779: LD_INT 12
14781: PUSH
14782: LD_INT 16
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: IN
14789: IFFALSE 14810
// points := [ 5 , 3 , 2 ] ;
14791: LD_ADDR_VAR 0 9
14795: PUSH
14796: LD_INT 5
14798: PUSH
14799: LD_INT 3
14801: PUSH
14802: LD_INT 2
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: LIST
14809: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14810: LD_VAR 0 6
14814: PPUSH
14815: CALL_OW 257
14819: PUSH
14820: LD_INT 17
14822: EQUAL
14823: IFFALSE 14844
// points := [ 100 , 50 , 75 ] ;
14825: LD_ADDR_VAR 0 9
14829: PUSH
14830: LD_INT 100
14832: PUSH
14833: LD_INT 50
14835: PUSH
14836: LD_INT 75
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: LIST
14843: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14844: LD_VAR 0 6
14848: PPUSH
14849: CALL_OW 257
14853: PUSH
14854: LD_INT 15
14856: EQUAL
14857: IFFALSE 14878
// points := [ 10 , 5 , 3 ] ;
14859: LD_ADDR_VAR 0 9
14863: PUSH
14864: LD_INT 10
14866: PUSH
14867: LD_INT 5
14869: PUSH
14870: LD_INT 3
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: LIST
14877: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14878: LD_VAR 0 6
14882: PPUSH
14883: CALL_OW 257
14887: PUSH
14888: LD_INT 14
14890: EQUAL
14891: IFFALSE 14912
// points := [ 10 , 0 , 0 ] ;
14893: LD_ADDR_VAR 0 9
14897: PUSH
14898: LD_INT 10
14900: PUSH
14901: LD_INT 0
14903: PUSH
14904: LD_INT 0
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: LIST
14911: ST_TO_ADDR
// if GetClass ( i ) = 11 then
14912: LD_VAR 0 6
14916: PPUSH
14917: CALL_OW 257
14921: PUSH
14922: LD_INT 11
14924: EQUAL
14925: IFFALSE 14946
// points := [ 30 , 10 , 5 ] ;
14927: LD_ADDR_VAR 0 9
14931: PUSH
14932: LD_INT 30
14934: PUSH
14935: LD_INT 10
14937: PUSH
14938: LD_INT 5
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: LIST
14945: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
14946: LD_VAR 0 1
14950: PPUSH
14951: LD_INT 5
14953: PPUSH
14954: CALL_OW 321
14958: PUSH
14959: LD_INT 2
14961: EQUAL
14962: IFFALSE 14979
// bpoints := bpoints * 1.8 ;
14964: LD_ADDR_VAR 0 10
14968: PUSH
14969: LD_VAR 0 10
14973: PUSH
14974: LD_REAL  1.80000000000000E+0000
14977: MUL
14978: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
14979: LD_VAR 0 6
14983: PPUSH
14984: CALL_OW 257
14988: PUSH
14989: LD_INT 1
14991: PUSH
14992: LD_INT 2
14994: PUSH
14995: LD_INT 3
14997: PUSH
14998: LD_INT 4
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: IN
15007: PUSH
15008: LD_VAR 0 1
15012: PPUSH
15013: LD_INT 51
15015: PPUSH
15016: CALL_OW 321
15020: PUSH
15021: LD_INT 2
15023: EQUAL
15024: AND
15025: IFFALSE 15042
// bpoints := bpoints * 1.2 ;
15027: LD_ADDR_VAR 0 10
15031: PUSH
15032: LD_VAR 0 10
15036: PUSH
15037: LD_REAL  1.20000000000000E+0000
15040: MUL
15041: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15042: LD_VAR 0 6
15046: PPUSH
15047: CALL_OW 257
15051: PUSH
15052: LD_INT 5
15054: PUSH
15055: LD_INT 7
15057: PUSH
15058: LD_INT 9
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: LIST
15065: IN
15066: PUSH
15067: LD_VAR 0 1
15071: PPUSH
15072: LD_INT 52
15074: PPUSH
15075: CALL_OW 321
15079: PUSH
15080: LD_INT 2
15082: EQUAL
15083: AND
15084: IFFALSE 15101
// bpoints := bpoints * 1.5 ;
15086: LD_ADDR_VAR 0 10
15090: PUSH
15091: LD_VAR 0 10
15095: PUSH
15096: LD_REAL  1.50000000000000E+0000
15099: MUL
15100: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15101: LD_VAR 0 1
15105: PPUSH
15106: LD_INT 66
15108: PPUSH
15109: CALL_OW 321
15113: PUSH
15114: LD_INT 2
15116: EQUAL
15117: IFFALSE 15134
// bpoints := bpoints * 1.1 ;
15119: LD_ADDR_VAR 0 10
15123: PUSH
15124: LD_VAR 0 10
15128: PUSH
15129: LD_REAL  1.10000000000000E+0000
15132: MUL
15133: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15134: LD_ADDR_VAR 0 10
15138: PUSH
15139: LD_VAR 0 10
15143: PUSH
15144: LD_VAR 0 6
15148: PPUSH
15149: LD_INT 1
15151: PPUSH
15152: CALL_OW 259
15156: PUSH
15157: LD_REAL  1.15000000000000E+0000
15160: MUL
15161: MUL
15162: ST_TO_ADDR
// end ; unit_vehicle :
15163: GO 15991
15165: LD_INT 2
15167: DOUBLE
15168: EQUAL
15169: IFTRUE 15173
15171: GO 15979
15173: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15174: LD_VAR 0 6
15178: PPUSH
15179: CALL_OW 264
15183: PUSH
15184: LD_INT 2
15186: PUSH
15187: LD_INT 42
15189: PUSH
15190: LD_INT 24
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: LIST
15197: IN
15198: IFFALSE 15219
// points := [ 25 , 5 , 3 ] ;
15200: LD_ADDR_VAR 0 9
15204: PUSH
15205: LD_INT 25
15207: PUSH
15208: LD_INT 5
15210: PUSH
15211: LD_INT 3
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15219: LD_VAR 0 6
15223: PPUSH
15224: CALL_OW 264
15228: PUSH
15229: LD_INT 4
15231: PUSH
15232: LD_INT 43
15234: PUSH
15235: LD_INT 25
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: LIST
15242: IN
15243: IFFALSE 15264
// points := [ 40 , 15 , 5 ] ;
15245: LD_ADDR_VAR 0 9
15249: PUSH
15250: LD_INT 40
15252: PUSH
15253: LD_INT 15
15255: PUSH
15256: LD_INT 5
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: LIST
15263: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15264: LD_VAR 0 6
15268: PPUSH
15269: CALL_OW 264
15273: PUSH
15274: LD_INT 3
15276: PUSH
15277: LD_INT 23
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: IN
15284: IFFALSE 15305
// points := [ 7 , 25 , 8 ] ;
15286: LD_ADDR_VAR 0 9
15290: PUSH
15291: LD_INT 7
15293: PUSH
15294: LD_INT 25
15296: PUSH
15297: LD_INT 8
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: LIST
15304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
15305: LD_VAR 0 6
15309: PPUSH
15310: CALL_OW 264
15314: PUSH
15315: LD_INT 5
15317: PUSH
15318: LD_INT 27
15320: PUSH
15321: LD_INT 44
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: LIST
15328: IN
15329: IFFALSE 15350
// points := [ 14 , 50 , 16 ] ;
15331: LD_ADDR_VAR 0 9
15335: PUSH
15336: LD_INT 14
15338: PUSH
15339: LD_INT 50
15341: PUSH
15342: LD_INT 16
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: LIST
15349: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
15350: LD_VAR 0 6
15354: PPUSH
15355: CALL_OW 264
15359: PUSH
15360: LD_INT 6
15362: PUSH
15363: LD_INT 46
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: IN
15370: IFFALSE 15391
// points := [ 32 , 120 , 70 ] ;
15372: LD_ADDR_VAR 0 9
15376: PUSH
15377: LD_INT 32
15379: PUSH
15380: LD_INT 120
15382: PUSH
15383: LD_INT 70
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: LIST
15390: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
15391: LD_VAR 0 6
15395: PPUSH
15396: CALL_OW 264
15400: PUSH
15401: LD_INT 7
15403: PUSH
15404: LD_INT 28
15406: PUSH
15407: LD_INT 45
15409: PUSH
15410: LD_INT 92
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: IN
15419: IFFALSE 15440
// points := [ 35 , 20 , 45 ] ;
15421: LD_ADDR_VAR 0 9
15425: PUSH
15426: LD_INT 35
15428: PUSH
15429: LD_INT 20
15431: PUSH
15432: LD_INT 45
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
15440: LD_VAR 0 6
15444: PPUSH
15445: CALL_OW 264
15449: PUSH
15450: LD_INT 47
15452: PUSH
15453: EMPTY
15454: LIST
15455: IN
15456: IFFALSE 15477
// points := [ 67 , 45 , 75 ] ;
15458: LD_ADDR_VAR 0 9
15462: PUSH
15463: LD_INT 67
15465: PUSH
15466: LD_INT 45
15468: PUSH
15469: LD_INT 75
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: LIST
15476: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
15477: LD_VAR 0 6
15481: PPUSH
15482: CALL_OW 264
15486: PUSH
15487: LD_INT 26
15489: PUSH
15490: EMPTY
15491: LIST
15492: IN
15493: IFFALSE 15514
// points := [ 120 , 30 , 80 ] ;
15495: LD_ADDR_VAR 0 9
15499: PUSH
15500: LD_INT 120
15502: PUSH
15503: LD_INT 30
15505: PUSH
15506: LD_INT 80
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: LIST
15513: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15514: LD_VAR 0 6
15518: PPUSH
15519: CALL_OW 264
15523: PUSH
15524: LD_INT 22
15526: PUSH
15527: EMPTY
15528: LIST
15529: IN
15530: IFFALSE 15551
// points := [ 40 , 1 , 1 ] ;
15532: LD_ADDR_VAR 0 9
15536: PUSH
15537: LD_INT 40
15539: PUSH
15540: LD_INT 1
15542: PUSH
15543: LD_INT 1
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: LIST
15550: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15551: LD_VAR 0 6
15555: PPUSH
15556: CALL_OW 264
15560: PUSH
15561: LD_INT 29
15563: PUSH
15564: EMPTY
15565: LIST
15566: IN
15567: IFFALSE 15588
// points := [ 70 , 200 , 400 ] ;
15569: LD_ADDR_VAR 0 9
15573: PUSH
15574: LD_INT 70
15576: PUSH
15577: LD_INT 200
15579: PUSH
15580: LD_INT 400
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: LIST
15587: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15588: LD_VAR 0 6
15592: PPUSH
15593: CALL_OW 264
15597: PUSH
15598: LD_INT 14
15600: PUSH
15601: LD_INT 53
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: IN
15608: IFFALSE 15629
// points := [ 40 , 10 , 20 ] ;
15610: LD_ADDR_VAR 0 9
15614: PUSH
15615: LD_INT 40
15617: PUSH
15618: LD_INT 10
15620: PUSH
15621: LD_INT 20
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: LIST
15628: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15629: LD_VAR 0 6
15633: PPUSH
15634: CALL_OW 264
15638: PUSH
15639: LD_INT 9
15641: PUSH
15642: EMPTY
15643: LIST
15644: IN
15645: IFFALSE 15666
// points := [ 5 , 70 , 20 ] ;
15647: LD_ADDR_VAR 0 9
15651: PUSH
15652: LD_INT 5
15654: PUSH
15655: LD_INT 70
15657: PUSH
15658: LD_INT 20
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: LIST
15665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15666: LD_VAR 0 6
15670: PPUSH
15671: CALL_OW 264
15675: PUSH
15676: LD_INT 10
15678: PUSH
15679: EMPTY
15680: LIST
15681: IN
15682: IFFALSE 15703
// points := [ 35 , 110 , 70 ] ;
15684: LD_ADDR_VAR 0 9
15688: PUSH
15689: LD_INT 35
15691: PUSH
15692: LD_INT 110
15694: PUSH
15695: LD_INT 70
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: LIST
15702: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15703: LD_VAR 0 6
15707: PPUSH
15708: CALL_OW 265
15712: PUSH
15713: LD_INT 25
15715: EQUAL
15716: IFFALSE 15737
// points := [ 80 , 65 , 100 ] ;
15718: LD_ADDR_VAR 0 9
15722: PUSH
15723: LD_INT 80
15725: PUSH
15726: LD_INT 65
15728: PUSH
15729: LD_INT 100
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15737: LD_VAR 0 6
15741: PPUSH
15742: CALL_OW 263
15746: PUSH
15747: LD_INT 1
15749: EQUAL
15750: IFFALSE 15785
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15752: LD_ADDR_VAR 0 10
15756: PUSH
15757: LD_VAR 0 10
15761: PUSH
15762: LD_VAR 0 6
15766: PPUSH
15767: CALL_OW 311
15771: PPUSH
15772: LD_INT 3
15774: PPUSH
15775: CALL_OW 259
15779: PUSH
15780: LD_INT 4
15782: MUL
15783: MUL
15784: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15785: LD_VAR 0 6
15789: PPUSH
15790: CALL_OW 263
15794: PUSH
15795: LD_INT 2
15797: EQUAL
15798: IFFALSE 15849
// begin j := IsControledBy ( i ) ;
15800: LD_ADDR_VAR 0 7
15804: PUSH
15805: LD_VAR 0 6
15809: PPUSH
15810: CALL_OW 312
15814: ST_TO_ADDR
// if j then
15815: LD_VAR 0 7
15819: IFFALSE 15849
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15821: LD_ADDR_VAR 0 10
15825: PUSH
15826: LD_VAR 0 10
15830: PUSH
15831: LD_VAR 0 7
15835: PPUSH
15836: LD_INT 3
15838: PPUSH
15839: CALL_OW 259
15843: PUSH
15844: LD_INT 3
15846: MUL
15847: MUL
15848: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15849: LD_VAR 0 6
15853: PPUSH
15854: CALL_OW 264
15858: PUSH
15859: LD_INT 5
15861: PUSH
15862: LD_INT 6
15864: PUSH
15865: LD_INT 46
15867: PUSH
15868: LD_INT 44
15870: PUSH
15871: LD_INT 47
15873: PUSH
15874: LD_INT 45
15876: PUSH
15877: LD_INT 28
15879: PUSH
15880: LD_INT 7
15882: PUSH
15883: LD_INT 27
15885: PUSH
15886: LD_INT 29
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: IN
15901: PUSH
15902: LD_VAR 0 1
15906: PPUSH
15907: LD_INT 52
15909: PPUSH
15910: CALL_OW 321
15914: PUSH
15915: LD_INT 2
15917: EQUAL
15918: AND
15919: IFFALSE 15936
// bpoints := bpoints * 1.2 ;
15921: LD_ADDR_VAR 0 10
15925: PUSH
15926: LD_VAR 0 10
15930: PUSH
15931: LD_REAL  1.20000000000000E+0000
15934: MUL
15935: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
15936: LD_VAR 0 6
15940: PPUSH
15941: CALL_OW 264
15945: PUSH
15946: LD_INT 6
15948: PUSH
15949: LD_INT 46
15951: PUSH
15952: LD_INT 47
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: LIST
15959: IN
15960: IFFALSE 15977
// bpoints := bpoints * 1.2 ;
15962: LD_ADDR_VAR 0 10
15966: PUSH
15967: LD_VAR 0 10
15971: PUSH
15972: LD_REAL  1.20000000000000E+0000
15975: MUL
15976: ST_TO_ADDR
// end ; unit_building :
15977: GO 15991
15979: LD_INT 3
15981: DOUBLE
15982: EQUAL
15983: IFTRUE 15987
15985: GO 15990
15987: POP
// ; end ;
15988: GO 15991
15990: POP
// for j = 1 to 3 do
15991: LD_ADDR_VAR 0 7
15995: PUSH
15996: DOUBLE
15997: LD_INT 1
15999: DEC
16000: ST_TO_ADDR
16001: LD_INT 3
16003: PUSH
16004: FOR_TO
16005: IFFALSE 16058
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16007: LD_ADDR_VAR 0 5
16011: PUSH
16012: LD_VAR 0 5
16016: PPUSH
16017: LD_VAR 0 7
16021: PPUSH
16022: LD_VAR 0 5
16026: PUSH
16027: LD_VAR 0 7
16031: ARRAY
16032: PUSH
16033: LD_VAR 0 9
16037: PUSH
16038: LD_VAR 0 7
16042: ARRAY
16043: PUSH
16044: LD_VAR 0 10
16048: MUL
16049: PLUS
16050: PPUSH
16051: CALL_OW 1
16055: ST_TO_ADDR
16056: GO 16004
16058: POP
16059: POP
// end ;
16060: GO 14539
16062: POP
16063: POP
// result := Replace ( result , 4 , tmp ) ;
16064: LD_ADDR_VAR 0 5
16068: PUSH
16069: LD_VAR 0 5
16073: PPUSH
16074: LD_INT 4
16076: PPUSH
16077: LD_VAR 0 8
16081: PPUSH
16082: CALL_OW 1
16086: ST_TO_ADDR
// end ;
16087: LD_VAR 0 5
16091: RET
// export function DangerAtRange ( unit , range ) ; begin
16092: LD_INT 0
16094: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16095: LD_ADDR_VAR 0 3
16099: PUSH
16100: LD_VAR 0 1
16104: PPUSH
16105: CALL_OW 255
16109: PPUSH
16110: LD_VAR 0 1
16114: PPUSH
16115: CALL_OW 250
16119: PPUSH
16120: LD_VAR 0 1
16124: PPUSH
16125: CALL_OW 251
16129: PPUSH
16130: LD_VAR 0 2
16134: PPUSH
16135: CALL 14391 0 4
16139: ST_TO_ADDR
// end ;
16140: LD_VAR 0 3
16144: RET
// export function DangerInArea ( side , area ) ; begin
16145: LD_INT 0
16147: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16148: LD_ADDR_VAR 0 3
16152: PUSH
16153: LD_VAR 0 2
16157: PPUSH
16158: LD_INT 81
16160: PUSH
16161: LD_VAR 0 1
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PPUSH
16170: CALL_OW 70
16174: ST_TO_ADDR
// end ;
16175: LD_VAR 0 3
16179: RET
// export function IsExtension ( b ) ; begin
16180: LD_INT 0
16182: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16183: LD_ADDR_VAR 0 2
16187: PUSH
16188: LD_VAR 0 1
16192: PUSH
16193: LD_INT 23
16195: PUSH
16196: LD_INT 20
16198: PUSH
16199: LD_INT 22
16201: PUSH
16202: LD_INT 17
16204: PUSH
16205: LD_INT 24
16207: PUSH
16208: LD_INT 21
16210: PUSH
16211: LD_INT 19
16213: PUSH
16214: LD_INT 16
16216: PUSH
16217: LD_INT 25
16219: PUSH
16220: LD_INT 18
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: IN
16235: ST_TO_ADDR
// end ;
16236: LD_VAR 0 2
16240: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
16241: LD_INT 0
16243: PPUSH
16244: PPUSH
16245: PPUSH
// result := [ ] ;
16246: LD_ADDR_VAR 0 4
16250: PUSH
16251: EMPTY
16252: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16253: LD_ADDR_VAR 0 5
16257: PUSH
16258: LD_VAR 0 2
16262: PPUSH
16263: LD_INT 21
16265: PUSH
16266: LD_INT 3
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PPUSH
16273: CALL_OW 70
16277: ST_TO_ADDR
// if not tmp then
16278: LD_VAR 0 5
16282: NOT
16283: IFFALSE 16287
// exit ;
16285: GO 16351
// if checkLink then
16287: LD_VAR 0 3
16291: IFFALSE 16341
// begin for i in tmp do
16293: LD_ADDR_VAR 0 6
16297: PUSH
16298: LD_VAR 0 5
16302: PUSH
16303: FOR_IN
16304: IFFALSE 16339
// if GetBase ( i ) <> base then
16306: LD_VAR 0 6
16310: PPUSH
16311: CALL_OW 274
16315: PUSH
16316: LD_VAR 0 1
16320: NONEQUAL
16321: IFFALSE 16337
// ComLinkToBase ( base , i ) ;
16323: LD_VAR 0 1
16327: PPUSH
16328: LD_VAR 0 6
16332: PPUSH
16333: CALL_OW 169
16337: GO 16303
16339: POP
16340: POP
// end ; result := tmp ;
16341: LD_ADDR_VAR 0 4
16345: PUSH
16346: LD_VAR 0 5
16350: ST_TO_ADDR
// end ;
16351: LD_VAR 0 4
16355: RET
// export function ComComplete ( units , b ) ; var i ; begin
16356: LD_INT 0
16358: PPUSH
16359: PPUSH
// if not units then
16360: LD_VAR 0 1
16364: NOT
16365: IFFALSE 16369
// exit ;
16367: GO 16459
// for i in units do
16369: LD_ADDR_VAR 0 4
16373: PUSH
16374: LD_VAR 0 1
16378: PUSH
16379: FOR_IN
16380: IFFALSE 16457
// if BuildingStatus ( b ) = bs_build then
16382: LD_VAR 0 2
16386: PPUSH
16387: CALL_OW 461
16391: PUSH
16392: LD_INT 1
16394: EQUAL
16395: IFFALSE 16455
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
16397: LD_VAR 0 4
16401: PPUSH
16402: LD_STRING h
16404: PUSH
16405: LD_VAR 0 2
16409: PPUSH
16410: CALL_OW 250
16414: PUSH
16415: LD_VAR 0 2
16419: PPUSH
16420: CALL_OW 251
16424: PUSH
16425: LD_VAR 0 2
16429: PUSH
16430: LD_INT 0
16432: PUSH
16433: LD_INT 0
16435: PUSH
16436: LD_INT 0
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: PUSH
16448: EMPTY
16449: LIST
16450: PPUSH
16451: CALL_OW 446
16455: GO 16379
16457: POP
16458: POP
// end ;
16459: LD_VAR 0 3
16463: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
16464: LD_INT 0
16466: PPUSH
16467: PPUSH
16468: PPUSH
16469: PPUSH
16470: PPUSH
16471: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
16472: LD_VAR 0 1
16476: NOT
16477: PUSH
16478: LD_VAR 0 1
16482: PPUSH
16483: CALL_OW 263
16487: PUSH
16488: LD_INT 2
16490: NONEQUAL
16491: OR
16492: IFFALSE 16496
// exit ;
16494: GO 16812
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16496: LD_ADDR_VAR 0 6
16500: PUSH
16501: LD_INT 22
16503: PUSH
16504: LD_VAR 0 1
16508: PPUSH
16509: CALL_OW 255
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 2
16520: PUSH
16521: LD_INT 30
16523: PUSH
16524: LD_INT 36
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 34
16533: PUSH
16534: LD_INT 31
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PPUSH
16550: CALL_OW 69
16554: ST_TO_ADDR
// if not tmp then
16555: LD_VAR 0 6
16559: NOT
16560: IFFALSE 16564
// exit ;
16562: GO 16812
// result := [ ] ;
16564: LD_ADDR_VAR 0 2
16568: PUSH
16569: EMPTY
16570: ST_TO_ADDR
// for i in tmp do
16571: LD_ADDR_VAR 0 3
16575: PUSH
16576: LD_VAR 0 6
16580: PUSH
16581: FOR_IN
16582: IFFALSE 16653
// begin t := UnitsInside ( i ) ;
16584: LD_ADDR_VAR 0 4
16588: PUSH
16589: LD_VAR 0 3
16593: PPUSH
16594: CALL_OW 313
16598: ST_TO_ADDR
// if t then
16599: LD_VAR 0 4
16603: IFFALSE 16651
// for j in t do
16605: LD_ADDR_VAR 0 7
16609: PUSH
16610: LD_VAR 0 4
16614: PUSH
16615: FOR_IN
16616: IFFALSE 16649
// result := Replace ( result , result + 1 , j ) ;
16618: LD_ADDR_VAR 0 2
16622: PUSH
16623: LD_VAR 0 2
16627: PPUSH
16628: LD_VAR 0 2
16632: PUSH
16633: LD_INT 1
16635: PLUS
16636: PPUSH
16637: LD_VAR 0 7
16641: PPUSH
16642: CALL_OW 1
16646: ST_TO_ADDR
16647: GO 16615
16649: POP
16650: POP
// end ;
16651: GO 16581
16653: POP
16654: POP
// if not result then
16655: LD_VAR 0 2
16659: NOT
16660: IFFALSE 16664
// exit ;
16662: GO 16812
// mech := result [ 1 ] ;
16664: LD_ADDR_VAR 0 5
16668: PUSH
16669: LD_VAR 0 2
16673: PUSH
16674: LD_INT 1
16676: ARRAY
16677: ST_TO_ADDR
// if result > 1 then
16678: LD_VAR 0 2
16682: PUSH
16683: LD_INT 1
16685: GREATER
16686: IFFALSE 16798
// begin for i = 2 to result do
16688: LD_ADDR_VAR 0 3
16692: PUSH
16693: DOUBLE
16694: LD_INT 2
16696: DEC
16697: ST_TO_ADDR
16698: LD_VAR 0 2
16702: PUSH
16703: FOR_TO
16704: IFFALSE 16796
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16706: LD_ADDR_VAR 0 4
16710: PUSH
16711: LD_VAR 0 2
16715: PUSH
16716: LD_VAR 0 3
16720: ARRAY
16721: PPUSH
16722: LD_INT 3
16724: PPUSH
16725: CALL_OW 259
16729: PUSH
16730: LD_VAR 0 2
16734: PUSH
16735: LD_VAR 0 3
16739: ARRAY
16740: PPUSH
16741: CALL_OW 432
16745: MINUS
16746: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16747: LD_VAR 0 4
16751: PUSH
16752: LD_VAR 0 5
16756: PPUSH
16757: LD_INT 3
16759: PPUSH
16760: CALL_OW 259
16764: PUSH
16765: LD_VAR 0 5
16769: PPUSH
16770: CALL_OW 432
16774: MINUS
16775: GREATEREQUAL
16776: IFFALSE 16794
// mech := result [ i ] ;
16778: LD_ADDR_VAR 0 5
16782: PUSH
16783: LD_VAR 0 2
16787: PUSH
16788: LD_VAR 0 3
16792: ARRAY
16793: ST_TO_ADDR
// end ;
16794: GO 16703
16796: POP
16797: POP
// end ; ComLinkTo ( vehicle , mech ) ;
16798: LD_VAR 0 1
16802: PPUSH
16803: LD_VAR 0 5
16807: PPUSH
16808: CALL_OW 135
// end ;
16812: LD_VAR 0 2
16816: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16817: LD_INT 0
16819: PPUSH
16820: PPUSH
16821: PPUSH
16822: PPUSH
16823: PPUSH
16824: PPUSH
16825: PPUSH
16826: PPUSH
16827: PPUSH
16828: PPUSH
16829: PPUSH
16830: PPUSH
16831: PPUSH
// result := [ ] ;
16832: LD_ADDR_VAR 0 7
16836: PUSH
16837: EMPTY
16838: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16839: LD_VAR 0 1
16843: PPUSH
16844: CALL_OW 266
16848: PUSH
16849: LD_INT 0
16851: PUSH
16852: LD_INT 1
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: IN
16859: NOT
16860: IFFALSE 16864
// exit ;
16862: GO 18498
// if name then
16864: LD_VAR 0 3
16868: IFFALSE 16884
// SetBName ( base_dep , name ) ;
16870: LD_VAR 0 1
16874: PPUSH
16875: LD_VAR 0 3
16879: PPUSH
16880: CALL_OW 500
// base := GetBase ( base_dep ) ;
16884: LD_ADDR_VAR 0 15
16888: PUSH
16889: LD_VAR 0 1
16893: PPUSH
16894: CALL_OW 274
16898: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16899: LD_ADDR_VAR 0 16
16903: PUSH
16904: LD_VAR 0 1
16908: PPUSH
16909: CALL_OW 255
16913: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
16914: LD_ADDR_VAR 0 17
16918: PUSH
16919: LD_VAR 0 1
16923: PPUSH
16924: CALL_OW 248
16928: ST_TO_ADDR
// if sources then
16929: LD_VAR 0 5
16933: IFFALSE 16980
// for i = 1 to 3 do
16935: LD_ADDR_VAR 0 8
16939: PUSH
16940: DOUBLE
16941: LD_INT 1
16943: DEC
16944: ST_TO_ADDR
16945: LD_INT 3
16947: PUSH
16948: FOR_TO
16949: IFFALSE 16978
// AddResourceType ( base , i , sources [ i ] ) ;
16951: LD_VAR 0 15
16955: PPUSH
16956: LD_VAR 0 8
16960: PPUSH
16961: LD_VAR 0 5
16965: PUSH
16966: LD_VAR 0 8
16970: ARRAY
16971: PPUSH
16972: CALL_OW 276
16976: GO 16948
16978: POP
16979: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
16980: LD_ADDR_VAR 0 18
16984: PUSH
16985: LD_VAR 0 15
16989: PPUSH
16990: LD_VAR 0 2
16994: PPUSH
16995: LD_INT 1
16997: PPUSH
16998: CALL 16241 0 3
17002: ST_TO_ADDR
// InitHc ;
17003: CALL_OW 19
// InitUc ;
17007: CALL_OW 18
// uc_side := side ;
17011: LD_ADDR_OWVAR 20
17015: PUSH
17016: LD_VAR 0 16
17020: ST_TO_ADDR
// uc_nation := nation ;
17021: LD_ADDR_OWVAR 21
17025: PUSH
17026: LD_VAR 0 17
17030: ST_TO_ADDR
// if buildings then
17031: LD_VAR 0 18
17035: IFFALSE 18357
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17037: LD_ADDR_VAR 0 19
17041: PUSH
17042: LD_VAR 0 18
17046: PPUSH
17047: LD_INT 2
17049: PUSH
17050: LD_INT 30
17052: PUSH
17053: LD_INT 29
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 30
17062: PUSH
17063: LD_INT 30
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: LIST
17074: PPUSH
17075: CALL_OW 72
17079: ST_TO_ADDR
// if tmp then
17080: LD_VAR 0 19
17084: IFFALSE 17132
// for i in tmp do
17086: LD_ADDR_VAR 0 8
17090: PUSH
17091: LD_VAR 0 19
17095: PUSH
17096: FOR_IN
17097: IFFALSE 17130
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17099: LD_VAR 0 8
17103: PPUSH
17104: CALL_OW 250
17108: PPUSH
17109: LD_VAR 0 8
17113: PPUSH
17114: CALL_OW 251
17118: PPUSH
17119: LD_VAR 0 16
17123: PPUSH
17124: CALL_OW 441
17128: GO 17096
17130: POP
17131: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17132: LD_VAR 0 18
17136: PPUSH
17137: LD_INT 2
17139: PUSH
17140: LD_INT 30
17142: PUSH
17143: LD_INT 32
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 30
17152: PUSH
17153: LD_INT 33
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: PPUSH
17165: CALL_OW 72
17169: IFFALSE 17257
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17171: LD_ADDR_VAR 0 8
17175: PUSH
17176: LD_VAR 0 18
17180: PPUSH
17181: LD_INT 2
17183: PUSH
17184: LD_INT 30
17186: PUSH
17187: LD_INT 32
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 30
17196: PUSH
17197: LD_INT 33
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: LIST
17208: PPUSH
17209: CALL_OW 72
17213: PUSH
17214: FOR_IN
17215: IFFALSE 17255
// begin if not GetBWeapon ( i ) then
17217: LD_VAR 0 8
17221: PPUSH
17222: CALL_OW 269
17226: NOT
17227: IFFALSE 17253
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17229: LD_VAR 0 8
17233: PPUSH
17234: LD_VAR 0 8
17238: PPUSH
17239: LD_VAR 0 2
17243: PPUSH
17244: CALL 18503 0 2
17248: PPUSH
17249: CALL_OW 431
// end ;
17253: GO 17214
17255: POP
17256: POP
// end ; for i = 1 to personel do
17257: LD_ADDR_VAR 0 8
17261: PUSH
17262: DOUBLE
17263: LD_INT 1
17265: DEC
17266: ST_TO_ADDR
17267: LD_VAR 0 6
17271: PUSH
17272: FOR_TO
17273: IFFALSE 18337
// begin if i > 4 then
17275: LD_VAR 0 8
17279: PUSH
17280: LD_INT 4
17282: GREATER
17283: IFFALSE 17287
// break ;
17285: GO 18337
// case i of 1 :
17287: LD_VAR 0 8
17291: PUSH
17292: LD_INT 1
17294: DOUBLE
17295: EQUAL
17296: IFTRUE 17300
17298: GO 17380
17300: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
17301: LD_ADDR_VAR 0 12
17305: PUSH
17306: LD_VAR 0 18
17310: PPUSH
17311: LD_INT 22
17313: PUSH
17314: LD_VAR 0 16
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 58
17325: PUSH
17326: EMPTY
17327: LIST
17328: PUSH
17329: LD_INT 2
17331: PUSH
17332: LD_INT 30
17334: PUSH
17335: LD_INT 32
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 30
17344: PUSH
17345: LD_INT 4
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 30
17354: PUSH
17355: LD_INT 5
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: LIST
17372: PPUSH
17373: CALL_OW 72
17377: ST_TO_ADDR
17378: GO 17602
17380: LD_INT 2
17382: DOUBLE
17383: EQUAL
17384: IFTRUE 17388
17386: GO 17450
17388: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
17389: LD_ADDR_VAR 0 12
17393: PUSH
17394: LD_VAR 0 18
17398: PPUSH
17399: LD_INT 22
17401: PUSH
17402: LD_VAR 0 16
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: LD_INT 2
17413: PUSH
17414: LD_INT 30
17416: PUSH
17417: LD_INT 0
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 30
17426: PUSH
17427: LD_INT 1
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PPUSH
17443: CALL_OW 72
17447: ST_TO_ADDR
17448: GO 17602
17450: LD_INT 3
17452: DOUBLE
17453: EQUAL
17454: IFTRUE 17458
17456: GO 17520
17458: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
17459: LD_ADDR_VAR 0 12
17463: PUSH
17464: LD_VAR 0 18
17468: PPUSH
17469: LD_INT 22
17471: PUSH
17472: LD_VAR 0 16
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 2
17483: PUSH
17484: LD_INT 30
17486: PUSH
17487: LD_INT 2
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 30
17496: PUSH
17497: LD_INT 3
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: LIST
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PPUSH
17513: CALL_OW 72
17517: ST_TO_ADDR
17518: GO 17602
17520: LD_INT 4
17522: DOUBLE
17523: EQUAL
17524: IFTRUE 17528
17526: GO 17601
17528: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
17529: LD_ADDR_VAR 0 12
17533: PUSH
17534: LD_VAR 0 18
17538: PPUSH
17539: LD_INT 22
17541: PUSH
17542: LD_VAR 0 16
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 2
17553: PUSH
17554: LD_INT 30
17556: PUSH
17557: LD_INT 6
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 30
17566: PUSH
17567: LD_INT 7
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 30
17576: PUSH
17577: LD_INT 8
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PPUSH
17594: CALL_OW 72
17598: ST_TO_ADDR
17599: GO 17602
17601: POP
// if i = 1 then
17602: LD_VAR 0 8
17606: PUSH
17607: LD_INT 1
17609: EQUAL
17610: IFFALSE 17721
// begin tmp := [ ] ;
17612: LD_ADDR_VAR 0 19
17616: PUSH
17617: EMPTY
17618: ST_TO_ADDR
// for j in f do
17619: LD_ADDR_VAR 0 9
17623: PUSH
17624: LD_VAR 0 12
17628: PUSH
17629: FOR_IN
17630: IFFALSE 17703
// if GetBType ( j ) = b_bunker then
17632: LD_VAR 0 9
17636: PPUSH
17637: CALL_OW 266
17641: PUSH
17642: LD_INT 32
17644: EQUAL
17645: IFFALSE 17672
// tmp := Insert ( tmp , 1 , j ) else
17647: LD_ADDR_VAR 0 19
17651: PUSH
17652: LD_VAR 0 19
17656: PPUSH
17657: LD_INT 1
17659: PPUSH
17660: LD_VAR 0 9
17664: PPUSH
17665: CALL_OW 2
17669: ST_TO_ADDR
17670: GO 17701
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17672: LD_ADDR_VAR 0 19
17676: PUSH
17677: LD_VAR 0 19
17681: PPUSH
17682: LD_VAR 0 19
17686: PUSH
17687: LD_INT 1
17689: PLUS
17690: PPUSH
17691: LD_VAR 0 9
17695: PPUSH
17696: CALL_OW 2
17700: ST_TO_ADDR
17701: GO 17629
17703: POP
17704: POP
// if tmp then
17705: LD_VAR 0 19
17709: IFFALSE 17721
// f := tmp ;
17711: LD_ADDR_VAR 0 12
17715: PUSH
17716: LD_VAR 0 19
17720: ST_TO_ADDR
// end ; x := personel [ i ] ;
17721: LD_ADDR_VAR 0 13
17725: PUSH
17726: LD_VAR 0 6
17730: PUSH
17731: LD_VAR 0 8
17735: ARRAY
17736: ST_TO_ADDR
// if x = - 1 then
17737: LD_VAR 0 13
17741: PUSH
17742: LD_INT 1
17744: NEG
17745: EQUAL
17746: IFFALSE 17955
// begin for j in f do
17748: LD_ADDR_VAR 0 9
17752: PUSH
17753: LD_VAR 0 12
17757: PUSH
17758: FOR_IN
17759: IFFALSE 17951
// repeat InitHc ;
17761: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17765: LD_VAR 0 9
17769: PPUSH
17770: CALL_OW 266
17774: PUSH
17775: LD_INT 5
17777: EQUAL
17778: IFFALSE 17848
// begin if UnitsInside ( j ) < 3 then
17780: LD_VAR 0 9
17784: PPUSH
17785: CALL_OW 313
17789: PUSH
17790: LD_INT 3
17792: LESS
17793: IFFALSE 17829
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17795: LD_INT 0
17797: PPUSH
17798: LD_INT 5
17800: PUSH
17801: LD_INT 8
17803: PUSH
17804: LD_INT 9
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: PUSH
17812: LD_VAR 0 17
17816: ARRAY
17817: PPUSH
17818: LD_VAR 0 4
17822: PPUSH
17823: CALL_OW 380
17827: GO 17846
// PrepareHuman ( false , i , skill ) ;
17829: LD_INT 0
17831: PPUSH
17832: LD_VAR 0 8
17836: PPUSH
17837: LD_VAR 0 4
17841: PPUSH
17842: CALL_OW 380
// end else
17846: GO 17865
// PrepareHuman ( false , i , skill ) ;
17848: LD_INT 0
17850: PPUSH
17851: LD_VAR 0 8
17855: PPUSH
17856: LD_VAR 0 4
17860: PPUSH
17861: CALL_OW 380
// un := CreateHuman ;
17865: LD_ADDR_VAR 0 14
17869: PUSH
17870: CALL_OW 44
17874: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17875: LD_ADDR_VAR 0 7
17879: PUSH
17880: LD_VAR 0 7
17884: PPUSH
17885: LD_INT 1
17887: PPUSH
17888: LD_VAR 0 14
17892: PPUSH
17893: CALL_OW 2
17897: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17898: LD_VAR 0 14
17902: PPUSH
17903: LD_VAR 0 9
17907: PPUSH
17908: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
17912: LD_VAR 0 9
17916: PPUSH
17917: CALL_OW 313
17921: PUSH
17922: LD_INT 6
17924: EQUAL
17925: PUSH
17926: LD_VAR 0 9
17930: PPUSH
17931: CALL_OW 266
17935: PUSH
17936: LD_INT 32
17938: PUSH
17939: LD_INT 31
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: IN
17946: OR
17947: IFFALSE 17761
17949: GO 17758
17951: POP
17952: POP
// end else
17953: GO 18335
// for j = 1 to x do
17955: LD_ADDR_VAR 0 9
17959: PUSH
17960: DOUBLE
17961: LD_INT 1
17963: DEC
17964: ST_TO_ADDR
17965: LD_VAR 0 13
17969: PUSH
17970: FOR_TO
17971: IFFALSE 18333
// begin InitHc ;
17973: CALL_OW 19
// if not f then
17977: LD_VAR 0 12
17981: NOT
17982: IFFALSE 18071
// begin PrepareHuman ( false , i , skill ) ;
17984: LD_INT 0
17986: PPUSH
17987: LD_VAR 0 8
17991: PPUSH
17992: LD_VAR 0 4
17996: PPUSH
17997: CALL_OW 380
// un := CreateHuman ;
18001: LD_ADDR_VAR 0 14
18005: PUSH
18006: CALL_OW 44
18010: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18011: LD_ADDR_VAR 0 7
18015: PUSH
18016: LD_VAR 0 7
18020: PPUSH
18021: LD_INT 1
18023: PPUSH
18024: LD_VAR 0 14
18028: PPUSH
18029: CALL_OW 2
18033: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18034: LD_VAR 0 14
18038: PPUSH
18039: LD_VAR 0 1
18043: PPUSH
18044: CALL_OW 250
18048: PPUSH
18049: LD_VAR 0 1
18053: PPUSH
18054: CALL_OW 251
18058: PPUSH
18059: LD_INT 10
18061: PPUSH
18062: LD_INT 0
18064: PPUSH
18065: CALL_OW 50
// continue ;
18069: GO 17970
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18071: LD_VAR 0 12
18075: PUSH
18076: LD_INT 1
18078: ARRAY
18079: PPUSH
18080: CALL_OW 313
18084: PUSH
18085: LD_VAR 0 12
18089: PUSH
18090: LD_INT 1
18092: ARRAY
18093: PPUSH
18094: CALL_OW 266
18098: PUSH
18099: LD_INT 32
18101: PUSH
18102: LD_INT 31
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: IN
18109: AND
18110: PUSH
18111: LD_VAR 0 12
18115: PUSH
18116: LD_INT 1
18118: ARRAY
18119: PPUSH
18120: CALL_OW 313
18124: PUSH
18125: LD_INT 6
18127: EQUAL
18128: OR
18129: IFFALSE 18149
// f := Delete ( f , 1 ) ;
18131: LD_ADDR_VAR 0 12
18135: PUSH
18136: LD_VAR 0 12
18140: PPUSH
18141: LD_INT 1
18143: PPUSH
18144: CALL_OW 3
18148: ST_TO_ADDR
// if not f then
18149: LD_VAR 0 12
18153: NOT
18154: IFFALSE 18172
// begin x := x + 2 ;
18156: LD_ADDR_VAR 0 13
18160: PUSH
18161: LD_VAR 0 13
18165: PUSH
18166: LD_INT 2
18168: PLUS
18169: ST_TO_ADDR
// continue ;
18170: GO 17970
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18172: LD_VAR 0 12
18176: PUSH
18177: LD_INT 1
18179: ARRAY
18180: PPUSH
18181: CALL_OW 266
18185: PUSH
18186: LD_INT 5
18188: EQUAL
18189: IFFALSE 18263
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18191: LD_VAR 0 12
18195: PUSH
18196: LD_INT 1
18198: ARRAY
18199: PPUSH
18200: CALL_OW 313
18204: PUSH
18205: LD_INT 3
18207: LESS
18208: IFFALSE 18244
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18210: LD_INT 0
18212: PPUSH
18213: LD_INT 5
18215: PUSH
18216: LD_INT 8
18218: PUSH
18219: LD_INT 9
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: LIST
18226: PUSH
18227: LD_VAR 0 17
18231: ARRAY
18232: PPUSH
18233: LD_VAR 0 4
18237: PPUSH
18238: CALL_OW 380
18242: GO 18261
// PrepareHuman ( false , i , skill ) ;
18244: LD_INT 0
18246: PPUSH
18247: LD_VAR 0 8
18251: PPUSH
18252: LD_VAR 0 4
18256: PPUSH
18257: CALL_OW 380
// end else
18261: GO 18280
// PrepareHuman ( false , i , skill ) ;
18263: LD_INT 0
18265: PPUSH
18266: LD_VAR 0 8
18270: PPUSH
18271: LD_VAR 0 4
18275: PPUSH
18276: CALL_OW 380
// un := CreateHuman ;
18280: LD_ADDR_VAR 0 14
18284: PUSH
18285: CALL_OW 44
18289: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18290: LD_ADDR_VAR 0 7
18294: PUSH
18295: LD_VAR 0 7
18299: PPUSH
18300: LD_INT 1
18302: PPUSH
18303: LD_VAR 0 14
18307: PPUSH
18308: CALL_OW 2
18312: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
18313: LD_VAR 0 14
18317: PPUSH
18318: LD_VAR 0 12
18322: PUSH
18323: LD_INT 1
18325: ARRAY
18326: PPUSH
18327: CALL_OW 52
// end ;
18331: GO 17970
18333: POP
18334: POP
// end ;
18335: GO 17272
18337: POP
18338: POP
// result := result ^ buildings ;
18339: LD_ADDR_VAR 0 7
18343: PUSH
18344: LD_VAR 0 7
18348: PUSH
18349: LD_VAR 0 18
18353: ADD
18354: ST_TO_ADDR
// end else
18355: GO 18498
// begin for i = 1 to personel do
18357: LD_ADDR_VAR 0 8
18361: PUSH
18362: DOUBLE
18363: LD_INT 1
18365: DEC
18366: ST_TO_ADDR
18367: LD_VAR 0 6
18371: PUSH
18372: FOR_TO
18373: IFFALSE 18496
// begin if i > 4 then
18375: LD_VAR 0 8
18379: PUSH
18380: LD_INT 4
18382: GREATER
18383: IFFALSE 18387
// break ;
18385: GO 18496
// x := personel [ i ] ;
18387: LD_ADDR_VAR 0 13
18391: PUSH
18392: LD_VAR 0 6
18396: PUSH
18397: LD_VAR 0 8
18401: ARRAY
18402: ST_TO_ADDR
// if x = - 1 then
18403: LD_VAR 0 13
18407: PUSH
18408: LD_INT 1
18410: NEG
18411: EQUAL
18412: IFFALSE 18416
// continue ;
18414: GO 18372
// PrepareHuman ( false , i , skill ) ;
18416: LD_INT 0
18418: PPUSH
18419: LD_VAR 0 8
18423: PPUSH
18424: LD_VAR 0 4
18428: PPUSH
18429: CALL_OW 380
// un := CreateHuman ;
18433: LD_ADDR_VAR 0 14
18437: PUSH
18438: CALL_OW 44
18442: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18443: LD_VAR 0 14
18447: PPUSH
18448: LD_VAR 0 1
18452: PPUSH
18453: CALL_OW 250
18457: PPUSH
18458: LD_VAR 0 1
18462: PPUSH
18463: CALL_OW 251
18467: PPUSH
18468: LD_INT 10
18470: PPUSH
18471: LD_INT 0
18473: PPUSH
18474: CALL_OW 50
// result := result ^ un ;
18478: LD_ADDR_VAR 0 7
18482: PUSH
18483: LD_VAR 0 7
18487: PUSH
18488: LD_VAR 0 14
18492: ADD
18493: ST_TO_ADDR
// end ;
18494: GO 18372
18496: POP
18497: POP
// end ; end ;
18498: LD_VAR 0 7
18502: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18503: LD_INT 0
18505: PPUSH
18506: PPUSH
18507: PPUSH
18508: PPUSH
18509: PPUSH
18510: PPUSH
18511: PPUSH
18512: PPUSH
18513: PPUSH
18514: PPUSH
18515: PPUSH
18516: PPUSH
18517: PPUSH
18518: PPUSH
18519: PPUSH
18520: PPUSH
// result := false ;
18521: LD_ADDR_VAR 0 3
18525: PUSH
18526: LD_INT 0
18528: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
18529: LD_VAR 0 1
18533: NOT
18534: PUSH
18535: LD_VAR 0 1
18539: PPUSH
18540: CALL_OW 266
18544: PUSH
18545: LD_INT 32
18547: PUSH
18548: LD_INT 33
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: IN
18555: NOT
18556: OR
18557: IFFALSE 18561
// exit ;
18559: GO 19670
// nat := GetNation ( tower ) ;
18561: LD_ADDR_VAR 0 12
18565: PUSH
18566: LD_VAR 0 1
18570: PPUSH
18571: CALL_OW 248
18575: ST_TO_ADDR
// side := GetSide ( tower ) ;
18576: LD_ADDR_VAR 0 16
18580: PUSH
18581: LD_VAR 0 1
18585: PPUSH
18586: CALL_OW 255
18590: ST_TO_ADDR
// x := GetX ( tower ) ;
18591: LD_ADDR_VAR 0 10
18595: PUSH
18596: LD_VAR 0 1
18600: PPUSH
18601: CALL_OW 250
18605: ST_TO_ADDR
// y := GetY ( tower ) ;
18606: LD_ADDR_VAR 0 11
18610: PUSH
18611: LD_VAR 0 1
18615: PPUSH
18616: CALL_OW 251
18620: ST_TO_ADDR
// if not x or not y then
18621: LD_VAR 0 10
18625: NOT
18626: PUSH
18627: LD_VAR 0 11
18631: NOT
18632: OR
18633: IFFALSE 18637
// exit ;
18635: GO 19670
// weapon := 0 ;
18637: LD_ADDR_VAR 0 18
18641: PUSH
18642: LD_INT 0
18644: ST_TO_ADDR
// fac_list := [ ] ;
18645: LD_ADDR_VAR 0 17
18649: PUSH
18650: EMPTY
18651: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18652: LD_ADDR_VAR 0 6
18656: PUSH
18657: LD_VAR 0 1
18661: PPUSH
18662: CALL_OW 274
18666: PPUSH
18667: LD_VAR 0 2
18671: PPUSH
18672: LD_INT 0
18674: PPUSH
18675: CALL 16241 0 3
18679: PPUSH
18680: LD_INT 30
18682: PUSH
18683: LD_INT 3
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PPUSH
18690: CALL_OW 72
18694: ST_TO_ADDR
// if not factories then
18695: LD_VAR 0 6
18699: NOT
18700: IFFALSE 18704
// exit ;
18702: GO 19670
// for i in factories do
18704: LD_ADDR_VAR 0 8
18708: PUSH
18709: LD_VAR 0 6
18713: PUSH
18714: FOR_IN
18715: IFFALSE 18740
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18717: LD_ADDR_VAR 0 17
18721: PUSH
18722: LD_VAR 0 17
18726: PUSH
18727: LD_VAR 0 8
18731: PPUSH
18732: CALL_OW 478
18736: UNION
18737: ST_TO_ADDR
18738: GO 18714
18740: POP
18741: POP
// if not fac_list then
18742: LD_VAR 0 17
18746: NOT
18747: IFFALSE 18751
// exit ;
18749: GO 19670
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18751: LD_ADDR_VAR 0 5
18755: PUSH
18756: LD_INT 4
18758: PUSH
18759: LD_INT 5
18761: PUSH
18762: LD_INT 9
18764: PUSH
18765: LD_INT 10
18767: PUSH
18768: LD_INT 6
18770: PUSH
18771: LD_INT 7
18773: PUSH
18774: LD_INT 11
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 27
18788: PUSH
18789: LD_INT 28
18791: PUSH
18792: LD_INT 26
18794: PUSH
18795: LD_INT 30
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 43
18806: PUSH
18807: LD_INT 44
18809: PUSH
18810: LD_INT 46
18812: PUSH
18813: LD_INT 45
18815: PUSH
18816: LD_INT 47
18818: PUSH
18819: LD_INT 49
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: LIST
18834: PUSH
18835: LD_VAR 0 12
18839: ARRAY
18840: ST_TO_ADDR
// list := list isect fac_list ;
18841: LD_ADDR_VAR 0 5
18845: PUSH
18846: LD_VAR 0 5
18850: PUSH
18851: LD_VAR 0 17
18855: ISECT
18856: ST_TO_ADDR
// if not list then
18857: LD_VAR 0 5
18861: NOT
18862: IFFALSE 18866
// exit ;
18864: GO 19670
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18866: LD_VAR 0 12
18870: PUSH
18871: LD_INT 3
18873: EQUAL
18874: PUSH
18875: LD_INT 49
18877: PUSH
18878: LD_VAR 0 5
18882: IN
18883: AND
18884: PUSH
18885: LD_INT 31
18887: PPUSH
18888: LD_VAR 0 16
18892: PPUSH
18893: CALL_OW 321
18897: PUSH
18898: LD_INT 2
18900: EQUAL
18901: AND
18902: IFFALSE 18962
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
18904: LD_INT 22
18906: PUSH
18907: LD_VAR 0 16
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 35
18918: PUSH
18919: LD_INT 49
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 91
18928: PUSH
18929: LD_VAR 0 1
18933: PUSH
18934: LD_INT 10
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: LIST
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: LIST
18946: PPUSH
18947: CALL_OW 69
18951: NOT
18952: IFFALSE 18962
// weapon := ru_time_lapser ;
18954: LD_ADDR_VAR 0 18
18958: PUSH
18959: LD_INT 49
18961: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
18962: LD_VAR 0 12
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: LD_INT 2
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: IN
18977: PUSH
18978: LD_INT 11
18980: PUSH
18981: LD_VAR 0 5
18985: IN
18986: PUSH
18987: LD_INT 30
18989: PUSH
18990: LD_VAR 0 5
18994: IN
18995: OR
18996: AND
18997: PUSH
18998: LD_INT 6
19000: PPUSH
19001: LD_VAR 0 16
19005: PPUSH
19006: CALL_OW 321
19010: PUSH
19011: LD_INT 2
19013: EQUAL
19014: AND
19015: IFFALSE 19180
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19017: LD_INT 22
19019: PUSH
19020: LD_VAR 0 16
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 2
19031: PUSH
19032: LD_INT 35
19034: PUSH
19035: LD_INT 11
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 35
19044: PUSH
19045: LD_INT 30
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 91
19059: PUSH
19060: LD_VAR 0 1
19064: PUSH
19065: LD_INT 18
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: LIST
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: LIST
19077: PPUSH
19078: CALL_OW 69
19082: NOT
19083: PUSH
19084: LD_INT 22
19086: PUSH
19087: LD_VAR 0 16
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: LD_INT 2
19098: PUSH
19099: LD_INT 30
19101: PUSH
19102: LD_INT 32
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 30
19111: PUSH
19112: LD_INT 33
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 91
19126: PUSH
19127: LD_VAR 0 1
19131: PUSH
19132: LD_INT 12
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: LIST
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: LIST
19144: PUSH
19145: EMPTY
19146: LIST
19147: PPUSH
19148: CALL_OW 69
19152: PUSH
19153: LD_INT 2
19155: GREATER
19156: AND
19157: IFFALSE 19180
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19159: LD_ADDR_VAR 0 18
19163: PUSH
19164: LD_INT 11
19166: PUSH
19167: LD_INT 30
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_VAR 0 12
19178: ARRAY
19179: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19180: LD_VAR 0 18
19184: NOT
19185: PUSH
19186: LD_INT 40
19188: PPUSH
19189: LD_VAR 0 16
19193: PPUSH
19194: CALL_OW 321
19198: PUSH
19199: LD_INT 2
19201: EQUAL
19202: AND
19203: PUSH
19204: LD_INT 7
19206: PUSH
19207: LD_VAR 0 5
19211: IN
19212: PUSH
19213: LD_INT 28
19215: PUSH
19216: LD_VAR 0 5
19220: IN
19221: OR
19222: PUSH
19223: LD_INT 45
19225: PUSH
19226: LD_VAR 0 5
19230: IN
19231: OR
19232: AND
19233: IFFALSE 19487
// begin hex := GetHexInfo ( x , y ) ;
19235: LD_ADDR_VAR 0 4
19239: PUSH
19240: LD_VAR 0 10
19244: PPUSH
19245: LD_VAR 0 11
19249: PPUSH
19250: CALL_OW 546
19254: ST_TO_ADDR
// if hex [ 1 ] then
19255: LD_VAR 0 4
19259: PUSH
19260: LD_INT 1
19262: ARRAY
19263: IFFALSE 19267
// exit ;
19265: GO 19670
// height := hex [ 2 ] ;
19267: LD_ADDR_VAR 0 15
19271: PUSH
19272: LD_VAR 0 4
19276: PUSH
19277: LD_INT 2
19279: ARRAY
19280: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
19281: LD_ADDR_VAR 0 14
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: LD_INT 2
19291: PUSH
19292: LD_INT 3
19294: PUSH
19295: LD_INT 5
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: ST_TO_ADDR
// for i in tmp do
19304: LD_ADDR_VAR 0 8
19308: PUSH
19309: LD_VAR 0 14
19313: PUSH
19314: FOR_IN
19315: IFFALSE 19485
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
19317: LD_ADDR_VAR 0 9
19321: PUSH
19322: LD_VAR 0 10
19326: PPUSH
19327: LD_VAR 0 8
19331: PPUSH
19332: LD_INT 5
19334: PPUSH
19335: CALL_OW 272
19339: PUSH
19340: LD_VAR 0 11
19344: PPUSH
19345: LD_VAR 0 8
19349: PPUSH
19350: LD_INT 5
19352: PPUSH
19353: CALL_OW 273
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
19362: LD_VAR 0 9
19366: PUSH
19367: LD_INT 1
19369: ARRAY
19370: PPUSH
19371: LD_VAR 0 9
19375: PUSH
19376: LD_INT 2
19378: ARRAY
19379: PPUSH
19380: CALL_OW 488
19384: IFFALSE 19483
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
19386: LD_ADDR_VAR 0 4
19390: PUSH
19391: LD_VAR 0 9
19395: PUSH
19396: LD_INT 1
19398: ARRAY
19399: PPUSH
19400: LD_VAR 0 9
19404: PUSH
19405: LD_INT 2
19407: ARRAY
19408: PPUSH
19409: CALL_OW 546
19413: ST_TO_ADDR
// if hex [ 1 ] then
19414: LD_VAR 0 4
19418: PUSH
19419: LD_INT 1
19421: ARRAY
19422: IFFALSE 19426
// continue ;
19424: GO 19314
// h := hex [ 2 ] ;
19426: LD_ADDR_VAR 0 13
19430: PUSH
19431: LD_VAR 0 4
19435: PUSH
19436: LD_INT 2
19438: ARRAY
19439: ST_TO_ADDR
// if h + 7 < height then
19440: LD_VAR 0 13
19444: PUSH
19445: LD_INT 7
19447: PLUS
19448: PUSH
19449: LD_VAR 0 15
19453: LESS
19454: IFFALSE 19483
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19456: LD_ADDR_VAR 0 18
19460: PUSH
19461: LD_INT 7
19463: PUSH
19464: LD_INT 28
19466: PUSH
19467: LD_INT 45
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: LIST
19474: PUSH
19475: LD_VAR 0 12
19479: ARRAY
19480: ST_TO_ADDR
// break ;
19481: GO 19485
// end ; end ; end ;
19483: GO 19314
19485: POP
19486: POP
// end ; if not weapon then
19487: LD_VAR 0 18
19491: NOT
19492: IFFALSE 19552
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19494: LD_ADDR_VAR 0 5
19498: PUSH
19499: LD_VAR 0 5
19503: PUSH
19504: LD_INT 11
19506: PUSH
19507: LD_INT 30
19509: PUSH
19510: LD_INT 49
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: LIST
19517: DIFF
19518: ST_TO_ADDR
// if not list then
19519: LD_VAR 0 5
19523: NOT
19524: IFFALSE 19528
// exit ;
19526: GO 19670
// weapon := list [ rand ( 1 , list ) ] ;
19528: LD_ADDR_VAR 0 18
19532: PUSH
19533: LD_VAR 0 5
19537: PUSH
19538: LD_INT 1
19540: PPUSH
19541: LD_VAR 0 5
19545: PPUSH
19546: CALL_OW 12
19550: ARRAY
19551: ST_TO_ADDR
// end ; if weapon then
19552: LD_VAR 0 18
19556: IFFALSE 19670
// begin tmp := CostOfWeapon ( weapon ) ;
19558: LD_ADDR_VAR 0 14
19562: PUSH
19563: LD_VAR 0 18
19567: PPUSH
19568: CALL_OW 451
19572: ST_TO_ADDR
// j := GetBase ( tower ) ;
19573: LD_ADDR_VAR 0 9
19577: PUSH
19578: LD_VAR 0 1
19582: PPUSH
19583: CALL_OW 274
19587: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19588: LD_VAR 0 9
19592: PPUSH
19593: LD_INT 1
19595: PPUSH
19596: CALL_OW 275
19600: PUSH
19601: LD_VAR 0 14
19605: PUSH
19606: LD_INT 1
19608: ARRAY
19609: GREATEREQUAL
19610: PUSH
19611: LD_VAR 0 9
19615: PPUSH
19616: LD_INT 2
19618: PPUSH
19619: CALL_OW 275
19623: PUSH
19624: LD_VAR 0 14
19628: PUSH
19629: LD_INT 2
19631: ARRAY
19632: GREATEREQUAL
19633: AND
19634: PUSH
19635: LD_VAR 0 9
19639: PPUSH
19640: LD_INT 3
19642: PPUSH
19643: CALL_OW 275
19647: PUSH
19648: LD_VAR 0 14
19652: PUSH
19653: LD_INT 3
19655: ARRAY
19656: GREATEREQUAL
19657: AND
19658: IFFALSE 19670
// result := weapon ;
19660: LD_ADDR_VAR 0 3
19664: PUSH
19665: LD_VAR 0 18
19669: ST_TO_ADDR
// end ; end ;
19670: LD_VAR 0 3
19674: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19675: LD_INT 0
19677: PPUSH
19678: PPUSH
// result := true ;
19679: LD_ADDR_VAR 0 3
19683: PUSH
19684: LD_INT 1
19686: ST_TO_ADDR
// if array1 = array2 then
19687: LD_VAR 0 1
19691: PUSH
19692: LD_VAR 0 2
19696: EQUAL
19697: IFFALSE 19757
// begin for i = 1 to array1 do
19699: LD_ADDR_VAR 0 4
19703: PUSH
19704: DOUBLE
19705: LD_INT 1
19707: DEC
19708: ST_TO_ADDR
19709: LD_VAR 0 1
19713: PUSH
19714: FOR_TO
19715: IFFALSE 19753
// if array1 [ i ] <> array2 [ i ] then
19717: LD_VAR 0 1
19721: PUSH
19722: LD_VAR 0 4
19726: ARRAY
19727: PUSH
19728: LD_VAR 0 2
19732: PUSH
19733: LD_VAR 0 4
19737: ARRAY
19738: NONEQUAL
19739: IFFALSE 19751
// begin result := false ;
19741: LD_ADDR_VAR 0 3
19745: PUSH
19746: LD_INT 0
19748: ST_TO_ADDR
// break ;
19749: GO 19753
// end ;
19751: GO 19714
19753: POP
19754: POP
// end else
19755: GO 19765
// result := false ;
19757: LD_ADDR_VAR 0 3
19761: PUSH
19762: LD_INT 0
19764: ST_TO_ADDR
// end ;
19765: LD_VAR 0 3
19769: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19770: LD_INT 0
19772: PPUSH
19773: PPUSH
// if not array1 or not array2 then
19774: LD_VAR 0 1
19778: NOT
19779: PUSH
19780: LD_VAR 0 2
19784: NOT
19785: OR
19786: IFFALSE 19790
// exit ;
19788: GO 19854
// result := true ;
19790: LD_ADDR_VAR 0 3
19794: PUSH
19795: LD_INT 1
19797: ST_TO_ADDR
// for i = 1 to array1 do
19798: LD_ADDR_VAR 0 4
19802: PUSH
19803: DOUBLE
19804: LD_INT 1
19806: DEC
19807: ST_TO_ADDR
19808: LD_VAR 0 1
19812: PUSH
19813: FOR_TO
19814: IFFALSE 19852
// if array1 [ i ] <> array2 [ i ] then
19816: LD_VAR 0 1
19820: PUSH
19821: LD_VAR 0 4
19825: ARRAY
19826: PUSH
19827: LD_VAR 0 2
19831: PUSH
19832: LD_VAR 0 4
19836: ARRAY
19837: NONEQUAL
19838: IFFALSE 19850
// begin result := false ;
19840: LD_ADDR_VAR 0 3
19844: PUSH
19845: LD_INT 0
19847: ST_TO_ADDR
// break ;
19848: GO 19852
// end ;
19850: GO 19813
19852: POP
19853: POP
// end ;
19854: LD_VAR 0 3
19858: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19859: LD_INT 0
19861: PPUSH
19862: PPUSH
19863: PPUSH
// pom := GetBase ( fac ) ;
19864: LD_ADDR_VAR 0 5
19868: PUSH
19869: LD_VAR 0 1
19873: PPUSH
19874: CALL_OW 274
19878: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19879: LD_ADDR_VAR 0 4
19883: PUSH
19884: LD_VAR 0 2
19888: PUSH
19889: LD_INT 1
19891: ARRAY
19892: PPUSH
19893: LD_VAR 0 2
19897: PUSH
19898: LD_INT 2
19900: ARRAY
19901: PPUSH
19902: LD_VAR 0 2
19906: PUSH
19907: LD_INT 3
19909: ARRAY
19910: PPUSH
19911: LD_VAR 0 2
19915: PUSH
19916: LD_INT 4
19918: ARRAY
19919: PPUSH
19920: CALL_OW 449
19924: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19925: LD_ADDR_VAR 0 3
19929: PUSH
19930: LD_VAR 0 5
19934: PPUSH
19935: LD_INT 1
19937: PPUSH
19938: CALL_OW 275
19942: PUSH
19943: LD_VAR 0 4
19947: PUSH
19948: LD_INT 1
19950: ARRAY
19951: GREATEREQUAL
19952: PUSH
19953: LD_VAR 0 5
19957: PPUSH
19958: LD_INT 2
19960: PPUSH
19961: CALL_OW 275
19965: PUSH
19966: LD_VAR 0 4
19970: PUSH
19971: LD_INT 2
19973: ARRAY
19974: GREATEREQUAL
19975: AND
19976: PUSH
19977: LD_VAR 0 5
19981: PPUSH
19982: LD_INT 3
19984: PPUSH
19985: CALL_OW 275
19989: PUSH
19990: LD_VAR 0 4
19994: PUSH
19995: LD_INT 3
19997: ARRAY
19998: GREATEREQUAL
19999: AND
20000: ST_TO_ADDR
// end ;
20001: LD_VAR 0 3
20005: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20006: LD_INT 0
20008: PPUSH
20009: PPUSH
20010: PPUSH
20011: PPUSH
// pom := GetBase ( building ) ;
20012: LD_ADDR_VAR 0 3
20016: PUSH
20017: LD_VAR 0 1
20021: PPUSH
20022: CALL_OW 274
20026: ST_TO_ADDR
// if not pom then
20027: LD_VAR 0 3
20031: NOT
20032: IFFALSE 20036
// exit ;
20034: GO 20206
// btype := GetBType ( building ) ;
20036: LD_ADDR_VAR 0 5
20040: PUSH
20041: LD_VAR 0 1
20045: PPUSH
20046: CALL_OW 266
20050: ST_TO_ADDR
// if btype = b_armoury then
20051: LD_VAR 0 5
20055: PUSH
20056: LD_INT 4
20058: EQUAL
20059: IFFALSE 20069
// btype := b_barracks ;
20061: LD_ADDR_VAR 0 5
20065: PUSH
20066: LD_INT 5
20068: ST_TO_ADDR
// if btype = b_depot then
20069: LD_VAR 0 5
20073: PUSH
20074: LD_INT 0
20076: EQUAL
20077: IFFALSE 20087
// btype := b_warehouse ;
20079: LD_ADDR_VAR 0 5
20083: PUSH
20084: LD_INT 1
20086: ST_TO_ADDR
// if btype = b_workshop then
20087: LD_VAR 0 5
20091: PUSH
20092: LD_INT 2
20094: EQUAL
20095: IFFALSE 20105
// btype := b_factory ;
20097: LD_ADDR_VAR 0 5
20101: PUSH
20102: LD_INT 3
20104: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20105: LD_ADDR_VAR 0 4
20109: PUSH
20110: LD_VAR 0 5
20114: PPUSH
20115: LD_VAR 0 1
20119: PPUSH
20120: CALL_OW 248
20124: PPUSH
20125: CALL_OW 450
20129: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20130: LD_ADDR_VAR 0 2
20134: PUSH
20135: LD_VAR 0 3
20139: PPUSH
20140: LD_INT 1
20142: PPUSH
20143: CALL_OW 275
20147: PUSH
20148: LD_VAR 0 4
20152: PUSH
20153: LD_INT 1
20155: ARRAY
20156: GREATEREQUAL
20157: PUSH
20158: LD_VAR 0 3
20162: PPUSH
20163: LD_INT 2
20165: PPUSH
20166: CALL_OW 275
20170: PUSH
20171: LD_VAR 0 4
20175: PUSH
20176: LD_INT 2
20178: ARRAY
20179: GREATEREQUAL
20180: AND
20181: PUSH
20182: LD_VAR 0 3
20186: PPUSH
20187: LD_INT 3
20189: PPUSH
20190: CALL_OW 275
20194: PUSH
20195: LD_VAR 0 4
20199: PUSH
20200: LD_INT 3
20202: ARRAY
20203: GREATEREQUAL
20204: AND
20205: ST_TO_ADDR
// end ;
20206: LD_VAR 0 2
20210: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20211: LD_INT 0
20213: PPUSH
20214: PPUSH
20215: PPUSH
// pom := GetBase ( building ) ;
20216: LD_ADDR_VAR 0 4
20220: PUSH
20221: LD_VAR 0 1
20225: PPUSH
20226: CALL_OW 274
20230: ST_TO_ADDR
// if not pom then
20231: LD_VAR 0 4
20235: NOT
20236: IFFALSE 20240
// exit ;
20238: GO 20341
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20240: LD_ADDR_VAR 0 5
20244: PUSH
20245: LD_VAR 0 2
20249: PPUSH
20250: LD_VAR 0 1
20254: PPUSH
20255: CALL_OW 248
20259: PPUSH
20260: CALL_OW 450
20264: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20265: LD_ADDR_VAR 0 3
20269: PUSH
20270: LD_VAR 0 4
20274: PPUSH
20275: LD_INT 1
20277: PPUSH
20278: CALL_OW 275
20282: PUSH
20283: LD_VAR 0 5
20287: PUSH
20288: LD_INT 1
20290: ARRAY
20291: GREATEREQUAL
20292: PUSH
20293: LD_VAR 0 4
20297: PPUSH
20298: LD_INT 2
20300: PPUSH
20301: CALL_OW 275
20305: PUSH
20306: LD_VAR 0 5
20310: PUSH
20311: LD_INT 2
20313: ARRAY
20314: GREATEREQUAL
20315: AND
20316: PUSH
20317: LD_VAR 0 4
20321: PPUSH
20322: LD_INT 3
20324: PPUSH
20325: CALL_OW 275
20329: PUSH
20330: LD_VAR 0 5
20334: PUSH
20335: LD_INT 3
20337: ARRAY
20338: GREATEREQUAL
20339: AND
20340: ST_TO_ADDR
// end ;
20341: LD_VAR 0 3
20345: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
20346: LD_INT 0
20348: PPUSH
20349: PPUSH
20350: PPUSH
20351: PPUSH
20352: PPUSH
20353: PPUSH
20354: PPUSH
20355: PPUSH
20356: PPUSH
20357: PPUSH
20358: PPUSH
// result := false ;
20359: LD_ADDR_VAR 0 8
20363: PUSH
20364: LD_INT 0
20366: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
20367: LD_VAR 0 5
20371: NOT
20372: PUSH
20373: LD_VAR 0 1
20377: NOT
20378: OR
20379: PUSH
20380: LD_VAR 0 2
20384: NOT
20385: OR
20386: PUSH
20387: LD_VAR 0 3
20391: NOT
20392: OR
20393: IFFALSE 20397
// exit ;
20395: GO 21211
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
20397: LD_ADDR_VAR 0 14
20401: PUSH
20402: LD_VAR 0 1
20406: PPUSH
20407: LD_VAR 0 2
20411: PPUSH
20412: LD_VAR 0 3
20416: PPUSH
20417: LD_VAR 0 4
20421: PPUSH
20422: LD_VAR 0 5
20426: PUSH
20427: LD_INT 1
20429: ARRAY
20430: PPUSH
20431: CALL_OW 248
20435: PPUSH
20436: LD_INT 0
20438: PPUSH
20439: CALL 22444 0 6
20443: ST_TO_ADDR
// if not hexes then
20444: LD_VAR 0 14
20448: NOT
20449: IFFALSE 20453
// exit ;
20451: GO 21211
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20453: LD_ADDR_VAR 0 17
20457: PUSH
20458: LD_VAR 0 5
20462: PPUSH
20463: LD_INT 22
20465: PUSH
20466: LD_VAR 0 13
20470: PPUSH
20471: CALL_OW 255
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 2
20482: PUSH
20483: LD_INT 30
20485: PUSH
20486: LD_INT 0
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 30
20495: PUSH
20496: LD_INT 1
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: LIST
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PPUSH
20512: CALL_OW 72
20516: ST_TO_ADDR
// for i = 1 to hexes do
20517: LD_ADDR_VAR 0 9
20521: PUSH
20522: DOUBLE
20523: LD_INT 1
20525: DEC
20526: ST_TO_ADDR
20527: LD_VAR 0 14
20531: PUSH
20532: FOR_TO
20533: IFFALSE 21209
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20535: LD_ADDR_VAR 0 13
20539: PUSH
20540: LD_VAR 0 14
20544: PUSH
20545: LD_VAR 0 9
20549: ARRAY
20550: PUSH
20551: LD_INT 1
20553: ARRAY
20554: PPUSH
20555: LD_VAR 0 14
20559: PUSH
20560: LD_VAR 0 9
20564: ARRAY
20565: PUSH
20566: LD_INT 2
20568: ARRAY
20569: PPUSH
20570: CALL_OW 428
20574: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20575: LD_VAR 0 14
20579: PUSH
20580: LD_VAR 0 9
20584: ARRAY
20585: PUSH
20586: LD_INT 1
20588: ARRAY
20589: PPUSH
20590: LD_VAR 0 14
20594: PUSH
20595: LD_VAR 0 9
20599: ARRAY
20600: PUSH
20601: LD_INT 2
20603: ARRAY
20604: PPUSH
20605: CALL_OW 351
20609: PUSH
20610: LD_VAR 0 14
20614: PUSH
20615: LD_VAR 0 9
20619: ARRAY
20620: PUSH
20621: LD_INT 1
20623: ARRAY
20624: PPUSH
20625: LD_VAR 0 14
20629: PUSH
20630: LD_VAR 0 9
20634: ARRAY
20635: PUSH
20636: LD_INT 2
20638: ARRAY
20639: PPUSH
20640: CALL_OW 488
20644: NOT
20645: OR
20646: PUSH
20647: LD_VAR 0 13
20651: PPUSH
20652: CALL_OW 247
20656: PUSH
20657: LD_INT 3
20659: EQUAL
20660: OR
20661: IFFALSE 20667
// exit ;
20663: POP
20664: POP
20665: GO 21211
// if not tmp then
20667: LD_VAR 0 13
20671: NOT
20672: IFFALSE 20676
// continue ;
20674: GO 20532
// result := true ;
20676: LD_ADDR_VAR 0 8
20680: PUSH
20681: LD_INT 1
20683: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20684: LD_VAR 0 6
20688: PUSH
20689: LD_VAR 0 13
20693: PPUSH
20694: CALL_OW 247
20698: PUSH
20699: LD_INT 2
20701: EQUAL
20702: AND
20703: PUSH
20704: LD_VAR 0 13
20708: PPUSH
20709: CALL_OW 263
20713: PUSH
20714: LD_INT 1
20716: EQUAL
20717: AND
20718: IFFALSE 20882
// begin if IsDrivenBy ( tmp ) then
20720: LD_VAR 0 13
20724: PPUSH
20725: CALL_OW 311
20729: IFFALSE 20733
// continue ;
20731: GO 20532
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20733: LD_VAR 0 6
20737: PPUSH
20738: LD_INT 3
20740: PUSH
20741: LD_INT 60
20743: PUSH
20744: EMPTY
20745: LIST
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 3
20753: PUSH
20754: LD_INT 55
20756: PUSH
20757: EMPTY
20758: LIST
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PPUSH
20768: CALL_OW 72
20772: IFFALSE 20880
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20774: LD_ADDR_VAR 0 18
20778: PUSH
20779: LD_VAR 0 6
20783: PPUSH
20784: LD_INT 3
20786: PUSH
20787: LD_INT 60
20789: PUSH
20790: EMPTY
20791: LIST
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 3
20799: PUSH
20800: LD_INT 55
20802: PUSH
20803: EMPTY
20804: LIST
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PPUSH
20814: CALL_OW 72
20818: PUSH
20819: LD_INT 1
20821: ARRAY
20822: ST_TO_ADDR
// if IsInUnit ( driver ) then
20823: LD_VAR 0 18
20827: PPUSH
20828: CALL_OW 310
20832: IFFALSE 20843
// ComExit ( driver ) ;
20834: LD_VAR 0 18
20838: PPUSH
20839: CALL 46223 0 1
// AddComEnterUnit ( driver , tmp ) ;
20843: LD_VAR 0 18
20847: PPUSH
20848: LD_VAR 0 13
20852: PPUSH
20853: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20857: LD_VAR 0 18
20861: PPUSH
20862: LD_VAR 0 7
20866: PPUSH
20867: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20871: LD_VAR 0 18
20875: PPUSH
20876: CALL_OW 181
// end ; continue ;
20880: GO 20532
// end ; if not cleaners or not tmp in cleaners then
20882: LD_VAR 0 6
20886: NOT
20887: PUSH
20888: LD_VAR 0 13
20892: PUSH
20893: LD_VAR 0 6
20897: IN
20898: NOT
20899: OR
20900: IFFALSE 21207
// begin if dep then
20902: LD_VAR 0 17
20906: IFFALSE 21042
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20908: LD_ADDR_VAR 0 16
20912: PUSH
20913: LD_VAR 0 17
20917: PUSH
20918: LD_INT 1
20920: ARRAY
20921: PPUSH
20922: CALL_OW 250
20926: PPUSH
20927: LD_VAR 0 17
20931: PUSH
20932: LD_INT 1
20934: ARRAY
20935: PPUSH
20936: CALL_OW 254
20940: PPUSH
20941: LD_INT 5
20943: PPUSH
20944: CALL_OW 272
20948: PUSH
20949: LD_VAR 0 17
20953: PUSH
20954: LD_INT 1
20956: ARRAY
20957: PPUSH
20958: CALL_OW 251
20962: PPUSH
20963: LD_VAR 0 17
20967: PUSH
20968: LD_INT 1
20970: ARRAY
20971: PPUSH
20972: CALL_OW 254
20976: PPUSH
20977: LD_INT 5
20979: PPUSH
20980: CALL_OW 273
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
20989: LD_VAR 0 16
20993: PUSH
20994: LD_INT 1
20996: ARRAY
20997: PPUSH
20998: LD_VAR 0 16
21002: PUSH
21003: LD_INT 2
21005: ARRAY
21006: PPUSH
21007: CALL_OW 488
21011: IFFALSE 21042
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21013: LD_VAR 0 13
21017: PPUSH
21018: LD_VAR 0 16
21022: PUSH
21023: LD_INT 1
21025: ARRAY
21026: PPUSH
21027: LD_VAR 0 16
21031: PUSH
21032: LD_INT 2
21034: ARRAY
21035: PPUSH
21036: CALL_OW 111
// continue ;
21040: GO 20532
// end ; end ; r := GetDir ( tmp ) ;
21042: LD_ADDR_VAR 0 15
21046: PUSH
21047: LD_VAR 0 13
21051: PPUSH
21052: CALL_OW 254
21056: ST_TO_ADDR
// if r = 5 then
21057: LD_VAR 0 15
21061: PUSH
21062: LD_INT 5
21064: EQUAL
21065: IFFALSE 21075
// r := 0 ;
21067: LD_ADDR_VAR 0 15
21071: PUSH
21072: LD_INT 0
21074: ST_TO_ADDR
// for j = r to 5 do
21075: LD_ADDR_VAR 0 10
21079: PUSH
21080: DOUBLE
21081: LD_VAR 0 15
21085: DEC
21086: ST_TO_ADDR
21087: LD_INT 5
21089: PUSH
21090: FOR_TO
21091: IFFALSE 21205
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21093: LD_ADDR_VAR 0 11
21097: PUSH
21098: LD_VAR 0 13
21102: PPUSH
21103: CALL_OW 250
21107: PPUSH
21108: LD_VAR 0 10
21112: PPUSH
21113: LD_INT 2
21115: PPUSH
21116: CALL_OW 272
21120: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21121: LD_ADDR_VAR 0 12
21125: PUSH
21126: LD_VAR 0 13
21130: PPUSH
21131: CALL_OW 251
21135: PPUSH
21136: LD_VAR 0 10
21140: PPUSH
21141: LD_INT 2
21143: PPUSH
21144: CALL_OW 273
21148: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21149: LD_VAR 0 11
21153: PPUSH
21154: LD_VAR 0 12
21158: PPUSH
21159: CALL_OW 488
21163: PUSH
21164: LD_VAR 0 11
21168: PPUSH
21169: LD_VAR 0 12
21173: PPUSH
21174: CALL_OW 428
21178: NOT
21179: AND
21180: IFFALSE 21203
// begin ComMoveXY ( tmp , _x , _y ) ;
21182: LD_VAR 0 13
21186: PPUSH
21187: LD_VAR 0 11
21191: PPUSH
21192: LD_VAR 0 12
21196: PPUSH
21197: CALL_OW 111
// break ;
21201: GO 21205
// end ; end ;
21203: GO 21090
21205: POP
21206: POP
// end ; end ;
21207: GO 20532
21209: POP
21210: POP
// end ;
21211: LD_VAR 0 8
21215: RET
// export function BuildingTechInvented ( side , btype ) ; begin
21216: LD_INT 0
21218: PPUSH
// result := true ;
21219: LD_ADDR_VAR 0 3
21223: PUSH
21224: LD_INT 1
21226: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
21227: LD_VAR 0 2
21231: PUSH
21232: LD_INT 24
21234: DOUBLE
21235: EQUAL
21236: IFTRUE 21246
21238: LD_INT 33
21240: DOUBLE
21241: EQUAL
21242: IFTRUE 21246
21244: GO 21271
21246: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
21247: LD_ADDR_VAR 0 3
21251: PUSH
21252: LD_INT 32
21254: PPUSH
21255: LD_VAR 0 1
21259: PPUSH
21260: CALL_OW 321
21264: PUSH
21265: LD_INT 2
21267: EQUAL
21268: ST_TO_ADDR
21269: GO 21587
21271: LD_INT 20
21273: DOUBLE
21274: EQUAL
21275: IFTRUE 21279
21277: GO 21304
21279: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
21280: LD_ADDR_VAR 0 3
21284: PUSH
21285: LD_INT 6
21287: PPUSH
21288: LD_VAR 0 1
21292: PPUSH
21293: CALL_OW 321
21297: PUSH
21298: LD_INT 2
21300: EQUAL
21301: ST_TO_ADDR
21302: GO 21587
21304: LD_INT 22
21306: DOUBLE
21307: EQUAL
21308: IFTRUE 21318
21310: LD_INT 36
21312: DOUBLE
21313: EQUAL
21314: IFTRUE 21318
21316: GO 21343
21318: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
21319: LD_ADDR_VAR 0 3
21323: PUSH
21324: LD_INT 15
21326: PPUSH
21327: LD_VAR 0 1
21331: PPUSH
21332: CALL_OW 321
21336: PUSH
21337: LD_INT 2
21339: EQUAL
21340: ST_TO_ADDR
21341: GO 21587
21343: LD_INT 30
21345: DOUBLE
21346: EQUAL
21347: IFTRUE 21351
21349: GO 21376
21351: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
21352: LD_ADDR_VAR 0 3
21356: PUSH
21357: LD_INT 20
21359: PPUSH
21360: LD_VAR 0 1
21364: PPUSH
21365: CALL_OW 321
21369: PUSH
21370: LD_INT 2
21372: EQUAL
21373: ST_TO_ADDR
21374: GO 21587
21376: LD_INT 28
21378: DOUBLE
21379: EQUAL
21380: IFTRUE 21390
21382: LD_INT 21
21384: DOUBLE
21385: EQUAL
21386: IFTRUE 21390
21388: GO 21415
21390: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
21391: LD_ADDR_VAR 0 3
21395: PUSH
21396: LD_INT 21
21398: PPUSH
21399: LD_VAR 0 1
21403: PPUSH
21404: CALL_OW 321
21408: PUSH
21409: LD_INT 2
21411: EQUAL
21412: ST_TO_ADDR
21413: GO 21587
21415: LD_INT 16
21417: DOUBLE
21418: EQUAL
21419: IFTRUE 21423
21421: GO 21448
21423: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
21424: LD_ADDR_VAR 0 3
21428: PUSH
21429: LD_INT 84
21431: PPUSH
21432: LD_VAR 0 1
21436: PPUSH
21437: CALL_OW 321
21441: PUSH
21442: LD_INT 2
21444: EQUAL
21445: ST_TO_ADDR
21446: GO 21587
21448: LD_INT 19
21450: DOUBLE
21451: EQUAL
21452: IFTRUE 21462
21454: LD_INT 23
21456: DOUBLE
21457: EQUAL
21458: IFTRUE 21462
21460: GO 21487
21462: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
21463: LD_ADDR_VAR 0 3
21467: PUSH
21468: LD_INT 83
21470: PPUSH
21471: LD_VAR 0 1
21475: PPUSH
21476: CALL_OW 321
21480: PUSH
21481: LD_INT 2
21483: EQUAL
21484: ST_TO_ADDR
21485: GO 21587
21487: LD_INT 17
21489: DOUBLE
21490: EQUAL
21491: IFTRUE 21495
21493: GO 21520
21495: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
21496: LD_ADDR_VAR 0 3
21500: PUSH
21501: LD_INT 39
21503: PPUSH
21504: LD_VAR 0 1
21508: PPUSH
21509: CALL_OW 321
21513: PUSH
21514: LD_INT 2
21516: EQUAL
21517: ST_TO_ADDR
21518: GO 21587
21520: LD_INT 18
21522: DOUBLE
21523: EQUAL
21524: IFTRUE 21528
21526: GO 21553
21528: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
21529: LD_ADDR_VAR 0 3
21533: PUSH
21534: LD_INT 40
21536: PPUSH
21537: LD_VAR 0 1
21541: PPUSH
21542: CALL_OW 321
21546: PUSH
21547: LD_INT 2
21549: EQUAL
21550: ST_TO_ADDR
21551: GO 21587
21553: LD_INT 27
21555: DOUBLE
21556: EQUAL
21557: IFTRUE 21561
21559: GO 21586
21561: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
21562: LD_ADDR_VAR 0 3
21566: PUSH
21567: LD_INT 35
21569: PPUSH
21570: LD_VAR 0 1
21574: PPUSH
21575: CALL_OW 321
21579: PUSH
21580: LD_INT 2
21582: EQUAL
21583: ST_TO_ADDR
21584: GO 21587
21586: POP
// end ;
21587: LD_VAR 0 3
21591: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
21592: LD_INT 0
21594: PPUSH
21595: PPUSH
21596: PPUSH
21597: PPUSH
21598: PPUSH
21599: PPUSH
21600: PPUSH
21601: PPUSH
21602: PPUSH
21603: PPUSH
21604: PPUSH
// result := false ;
21605: LD_ADDR_VAR 0 6
21609: PUSH
21610: LD_INT 0
21612: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21613: LD_VAR 0 1
21617: NOT
21618: PUSH
21619: LD_VAR 0 1
21623: PPUSH
21624: CALL_OW 266
21628: PUSH
21629: LD_INT 0
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: IN
21639: NOT
21640: OR
21641: PUSH
21642: LD_VAR 0 2
21646: NOT
21647: OR
21648: PUSH
21649: LD_VAR 0 5
21653: PUSH
21654: LD_INT 0
21656: PUSH
21657: LD_INT 1
21659: PUSH
21660: LD_INT 2
21662: PUSH
21663: LD_INT 3
21665: PUSH
21666: LD_INT 4
21668: PUSH
21669: LD_INT 5
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: IN
21680: NOT
21681: OR
21682: PUSH
21683: LD_VAR 0 3
21687: PPUSH
21688: LD_VAR 0 4
21692: PPUSH
21693: CALL_OW 488
21697: NOT
21698: OR
21699: IFFALSE 21703
// exit ;
21701: GO 22439
// side := GetSide ( depot ) ;
21703: LD_ADDR_VAR 0 9
21707: PUSH
21708: LD_VAR 0 1
21712: PPUSH
21713: CALL_OW 255
21717: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
21718: LD_VAR 0 9
21722: PPUSH
21723: LD_VAR 0 2
21727: PPUSH
21728: CALL 21216 0 2
21732: NOT
21733: IFFALSE 21737
// exit ;
21735: GO 22439
// pom := GetBase ( depot ) ;
21737: LD_ADDR_VAR 0 10
21741: PUSH
21742: LD_VAR 0 1
21746: PPUSH
21747: CALL_OW 274
21751: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
21752: LD_ADDR_VAR 0 11
21756: PUSH
21757: LD_VAR 0 2
21761: PPUSH
21762: LD_VAR 0 1
21766: PPUSH
21767: CALL_OW 248
21771: PPUSH
21772: CALL_OW 450
21776: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21777: LD_VAR 0 10
21781: PPUSH
21782: LD_INT 1
21784: PPUSH
21785: CALL_OW 275
21789: PUSH
21790: LD_VAR 0 11
21794: PUSH
21795: LD_INT 1
21797: ARRAY
21798: GREATEREQUAL
21799: PUSH
21800: LD_VAR 0 10
21804: PPUSH
21805: LD_INT 2
21807: PPUSH
21808: CALL_OW 275
21812: PUSH
21813: LD_VAR 0 11
21817: PUSH
21818: LD_INT 2
21820: ARRAY
21821: GREATEREQUAL
21822: AND
21823: PUSH
21824: LD_VAR 0 10
21828: PPUSH
21829: LD_INT 3
21831: PPUSH
21832: CALL_OW 275
21836: PUSH
21837: LD_VAR 0 11
21841: PUSH
21842: LD_INT 3
21844: ARRAY
21845: GREATEREQUAL
21846: AND
21847: NOT
21848: IFFALSE 21852
// exit ;
21850: GO 22439
// if GetBType ( depot ) = b_depot then
21852: LD_VAR 0 1
21856: PPUSH
21857: CALL_OW 266
21861: PUSH
21862: LD_INT 0
21864: EQUAL
21865: IFFALSE 21877
// dist := 28 else
21867: LD_ADDR_VAR 0 14
21871: PUSH
21872: LD_INT 28
21874: ST_TO_ADDR
21875: GO 21885
// dist := 36 ;
21877: LD_ADDR_VAR 0 14
21881: PUSH
21882: LD_INT 36
21884: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21885: LD_VAR 0 1
21889: PPUSH
21890: LD_VAR 0 3
21894: PPUSH
21895: LD_VAR 0 4
21899: PPUSH
21900: CALL_OW 297
21904: PUSH
21905: LD_VAR 0 14
21909: GREATER
21910: IFFALSE 21914
// exit ;
21912: GO 22439
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21914: LD_ADDR_VAR 0 12
21918: PUSH
21919: LD_VAR 0 2
21923: PPUSH
21924: LD_VAR 0 3
21928: PPUSH
21929: LD_VAR 0 4
21933: PPUSH
21934: LD_VAR 0 5
21938: PPUSH
21939: LD_VAR 0 1
21943: PPUSH
21944: CALL_OW 248
21948: PPUSH
21949: LD_INT 0
21951: PPUSH
21952: CALL 22444 0 6
21956: ST_TO_ADDR
// if not hexes then
21957: LD_VAR 0 12
21961: NOT
21962: IFFALSE 21966
// exit ;
21964: GO 22439
// hex := GetHexInfo ( x , y ) ;
21966: LD_ADDR_VAR 0 15
21970: PUSH
21971: LD_VAR 0 3
21975: PPUSH
21976: LD_VAR 0 4
21980: PPUSH
21981: CALL_OW 546
21985: ST_TO_ADDR
// if hex [ 1 ] then
21986: LD_VAR 0 15
21990: PUSH
21991: LD_INT 1
21993: ARRAY
21994: IFFALSE 21998
// exit ;
21996: GO 22439
// height := hex [ 2 ] ;
21998: LD_ADDR_VAR 0 13
22002: PUSH
22003: LD_VAR 0 15
22007: PUSH
22008: LD_INT 2
22010: ARRAY
22011: ST_TO_ADDR
// for i = 1 to hexes do
22012: LD_ADDR_VAR 0 7
22016: PUSH
22017: DOUBLE
22018: LD_INT 1
22020: DEC
22021: ST_TO_ADDR
22022: LD_VAR 0 12
22026: PUSH
22027: FOR_TO
22028: IFFALSE 22358
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22030: LD_VAR 0 12
22034: PUSH
22035: LD_VAR 0 7
22039: ARRAY
22040: PUSH
22041: LD_INT 1
22043: ARRAY
22044: PPUSH
22045: LD_VAR 0 12
22049: PUSH
22050: LD_VAR 0 7
22054: ARRAY
22055: PUSH
22056: LD_INT 2
22058: ARRAY
22059: PPUSH
22060: CALL_OW 488
22064: NOT
22065: PUSH
22066: LD_VAR 0 12
22070: PUSH
22071: LD_VAR 0 7
22075: ARRAY
22076: PUSH
22077: LD_INT 1
22079: ARRAY
22080: PPUSH
22081: LD_VAR 0 12
22085: PUSH
22086: LD_VAR 0 7
22090: ARRAY
22091: PUSH
22092: LD_INT 2
22094: ARRAY
22095: PPUSH
22096: CALL_OW 428
22100: PUSH
22101: LD_INT 0
22103: GREATER
22104: OR
22105: PUSH
22106: LD_VAR 0 12
22110: PUSH
22111: LD_VAR 0 7
22115: ARRAY
22116: PUSH
22117: LD_INT 1
22119: ARRAY
22120: PPUSH
22121: LD_VAR 0 12
22125: PUSH
22126: LD_VAR 0 7
22130: ARRAY
22131: PUSH
22132: LD_INT 2
22134: ARRAY
22135: PPUSH
22136: CALL_OW 351
22140: OR
22141: IFFALSE 22147
// exit ;
22143: POP
22144: POP
22145: GO 22439
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22147: LD_ADDR_VAR 0 8
22151: PUSH
22152: LD_VAR 0 12
22156: PUSH
22157: LD_VAR 0 7
22161: ARRAY
22162: PUSH
22163: LD_INT 1
22165: ARRAY
22166: PPUSH
22167: LD_VAR 0 12
22171: PUSH
22172: LD_VAR 0 7
22176: ARRAY
22177: PUSH
22178: LD_INT 2
22180: ARRAY
22181: PPUSH
22182: CALL_OW 546
22186: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22187: LD_VAR 0 8
22191: PUSH
22192: LD_INT 1
22194: ARRAY
22195: PUSH
22196: LD_VAR 0 8
22200: PUSH
22201: LD_INT 2
22203: ARRAY
22204: PUSH
22205: LD_VAR 0 13
22209: PUSH
22210: LD_INT 2
22212: PLUS
22213: GREATER
22214: OR
22215: PUSH
22216: LD_VAR 0 8
22220: PUSH
22221: LD_INT 2
22223: ARRAY
22224: PUSH
22225: LD_VAR 0 13
22229: PUSH
22230: LD_INT 2
22232: MINUS
22233: LESS
22234: OR
22235: PUSH
22236: LD_VAR 0 8
22240: PUSH
22241: LD_INT 3
22243: ARRAY
22244: PUSH
22245: LD_INT 0
22247: PUSH
22248: LD_INT 8
22250: PUSH
22251: LD_INT 9
22253: PUSH
22254: LD_INT 10
22256: PUSH
22257: LD_INT 11
22259: PUSH
22260: LD_INT 12
22262: PUSH
22263: LD_INT 13
22265: PUSH
22266: LD_INT 16
22268: PUSH
22269: LD_INT 17
22271: PUSH
22272: LD_INT 18
22274: PUSH
22275: LD_INT 19
22277: PUSH
22278: LD_INT 20
22280: PUSH
22281: LD_INT 21
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: IN
22299: NOT
22300: OR
22301: PUSH
22302: LD_VAR 0 8
22306: PUSH
22307: LD_INT 5
22309: ARRAY
22310: NOT
22311: OR
22312: PUSH
22313: LD_VAR 0 8
22317: PUSH
22318: LD_INT 6
22320: ARRAY
22321: PUSH
22322: LD_INT 1
22324: PUSH
22325: LD_INT 2
22327: PUSH
22328: LD_INT 7
22330: PUSH
22331: LD_INT 9
22333: PUSH
22334: LD_INT 10
22336: PUSH
22337: LD_INT 11
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: IN
22348: NOT
22349: OR
22350: IFFALSE 22356
// exit ;
22352: POP
22353: POP
22354: GO 22439
// end ;
22356: GO 22027
22358: POP
22359: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
22360: LD_VAR 0 9
22364: PPUSH
22365: LD_VAR 0 3
22369: PPUSH
22370: LD_VAR 0 4
22374: PPUSH
22375: LD_INT 20
22377: PPUSH
22378: CALL 14391 0 4
22382: PUSH
22383: LD_INT 4
22385: ARRAY
22386: IFFALSE 22390
// exit ;
22388: GO 22439
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
22390: LD_VAR 0 2
22394: PUSH
22395: LD_INT 29
22397: PUSH
22398: LD_INT 30
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: IN
22405: PUSH
22406: LD_VAR 0 3
22410: PPUSH
22411: LD_VAR 0 4
22415: PPUSH
22416: LD_VAR 0 9
22420: PPUSH
22421: CALL_OW 440
22425: NOT
22426: AND
22427: IFFALSE 22431
// exit ;
22429: GO 22439
// result := true ;
22431: LD_ADDR_VAR 0 6
22435: PUSH
22436: LD_INT 1
22438: ST_TO_ADDR
// end ;
22439: LD_VAR 0 6
22443: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
22444: LD_INT 0
22446: PPUSH
22447: PPUSH
22448: PPUSH
22449: PPUSH
22450: PPUSH
22451: PPUSH
22452: PPUSH
22453: PPUSH
22454: PPUSH
22455: PPUSH
22456: PPUSH
22457: PPUSH
22458: PPUSH
22459: PPUSH
22460: PPUSH
22461: PPUSH
22462: PPUSH
22463: PPUSH
22464: PPUSH
22465: PPUSH
22466: PPUSH
22467: PPUSH
22468: PPUSH
22469: PPUSH
22470: PPUSH
22471: PPUSH
22472: PPUSH
22473: PPUSH
22474: PPUSH
22475: PPUSH
22476: PPUSH
22477: PPUSH
22478: PPUSH
22479: PPUSH
22480: PPUSH
22481: PPUSH
22482: PPUSH
22483: PPUSH
22484: PPUSH
22485: PPUSH
22486: PPUSH
22487: PPUSH
22488: PPUSH
22489: PPUSH
22490: PPUSH
22491: PPUSH
22492: PPUSH
22493: PPUSH
22494: PPUSH
22495: PPUSH
22496: PPUSH
22497: PPUSH
22498: PPUSH
22499: PPUSH
22500: PPUSH
22501: PPUSH
22502: PPUSH
22503: PPUSH
// result = [ ] ;
22504: LD_ADDR_VAR 0 7
22508: PUSH
22509: EMPTY
22510: ST_TO_ADDR
// temp_list = [ ] ;
22511: LD_ADDR_VAR 0 9
22515: PUSH
22516: EMPTY
22517: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
22518: LD_VAR 0 4
22522: PUSH
22523: LD_INT 0
22525: PUSH
22526: LD_INT 1
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: LD_INT 3
22534: PUSH
22535: LD_INT 4
22537: PUSH
22538: LD_INT 5
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: IN
22549: NOT
22550: PUSH
22551: LD_VAR 0 1
22555: PUSH
22556: LD_INT 0
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: IN
22566: PUSH
22567: LD_VAR 0 5
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: LD_INT 2
22577: PUSH
22578: LD_INT 3
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: LIST
22585: IN
22586: NOT
22587: AND
22588: OR
22589: IFFALSE 22593
// exit ;
22591: GO 40984
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22593: LD_VAR 0 1
22597: PUSH
22598: LD_INT 6
22600: PUSH
22601: LD_INT 7
22603: PUSH
22604: LD_INT 8
22606: PUSH
22607: LD_INT 13
22609: PUSH
22610: LD_INT 12
22612: PUSH
22613: LD_INT 15
22615: PUSH
22616: LD_INT 11
22618: PUSH
22619: LD_INT 14
22621: PUSH
22622: LD_INT 10
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: IN
22636: IFFALSE 22646
// btype = b_lab ;
22638: LD_ADDR_VAR 0 1
22642: PUSH
22643: LD_INT 6
22645: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22646: LD_VAR 0 6
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: LD_INT 1
22656: PUSH
22657: LD_INT 2
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: LIST
22664: IN
22665: NOT
22666: PUSH
22667: LD_VAR 0 1
22671: PUSH
22672: LD_INT 0
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: LD_INT 2
22680: PUSH
22681: LD_INT 3
22683: PUSH
22684: LD_INT 6
22686: PUSH
22687: LD_INT 36
22689: PUSH
22690: LD_INT 4
22692: PUSH
22693: LD_INT 5
22695: PUSH
22696: LD_INT 31
22698: PUSH
22699: LD_INT 32
22701: PUSH
22702: LD_INT 33
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: IN
22718: NOT
22719: PUSH
22720: LD_VAR 0 6
22724: PUSH
22725: LD_INT 1
22727: EQUAL
22728: AND
22729: OR
22730: PUSH
22731: LD_VAR 0 1
22735: PUSH
22736: LD_INT 2
22738: PUSH
22739: LD_INT 3
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: IN
22746: NOT
22747: PUSH
22748: LD_VAR 0 6
22752: PUSH
22753: LD_INT 2
22755: EQUAL
22756: AND
22757: OR
22758: IFFALSE 22768
// mode = 0 ;
22760: LD_ADDR_VAR 0 6
22764: PUSH
22765: LD_INT 0
22767: ST_TO_ADDR
// case mode of 0 :
22768: LD_VAR 0 6
22772: PUSH
22773: LD_INT 0
22775: DOUBLE
22776: EQUAL
22777: IFTRUE 22781
22779: GO 34234
22781: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22782: LD_ADDR_VAR 0 11
22786: PUSH
22787: LD_INT 0
22789: PUSH
22790: LD_INT 0
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 0
22799: PUSH
22800: LD_INT 1
22802: NEG
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 1
22810: PUSH
22811: LD_INT 0
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 1
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 0
22830: PUSH
22831: LD_INT 1
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 1
22840: NEG
22841: PUSH
22842: LD_INT 0
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 1
22851: NEG
22852: PUSH
22853: LD_INT 1
22855: NEG
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 1
22863: NEG
22864: PUSH
22865: LD_INT 2
22867: NEG
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 0
22875: PUSH
22876: LD_INT 2
22878: NEG
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 1
22886: PUSH
22887: LD_INT 1
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 1
22897: PUSH
22898: LD_INT 2
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 0
22907: PUSH
22908: LD_INT 2
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 1
22917: NEG
22918: PUSH
22919: LD_INT 1
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 1
22928: PUSH
22929: LD_INT 3
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 0
22938: PUSH
22939: LD_INT 3
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 1
22948: NEG
22949: PUSH
22950: LD_INT 2
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22975: LD_ADDR_VAR 0 12
22979: PUSH
22980: LD_INT 0
22982: PUSH
22983: LD_INT 0
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 0
22992: PUSH
22993: LD_INT 1
22995: NEG
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 1
23003: PUSH
23004: LD_INT 0
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 1
23013: PUSH
23014: LD_INT 1
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 0
23023: PUSH
23024: LD_INT 1
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 1
23033: NEG
23034: PUSH
23035: LD_INT 0
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 1
23044: NEG
23045: PUSH
23046: LD_INT 1
23048: NEG
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 1
23056: PUSH
23057: LD_INT 1
23059: NEG
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 2
23067: PUSH
23068: LD_INT 0
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 2
23077: PUSH
23078: LD_INT 1
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 1
23087: NEG
23088: PUSH
23089: LD_INT 1
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 2
23098: NEG
23099: PUSH
23100: LD_INT 0
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 2
23109: NEG
23110: PUSH
23111: LD_INT 1
23113: NEG
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 2
23121: NEG
23122: PUSH
23123: LD_INT 1
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 3
23132: NEG
23133: PUSH
23134: LD_INT 0
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 3
23143: NEG
23144: PUSH
23145: LD_INT 1
23147: NEG
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23171: LD_ADDR_VAR 0 13
23175: PUSH
23176: LD_INT 0
23178: PUSH
23179: LD_INT 0
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 0
23188: PUSH
23189: LD_INT 1
23191: NEG
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: LD_INT 0
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 1
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 0
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 1
23229: NEG
23230: PUSH
23231: LD_INT 0
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 1
23240: NEG
23241: PUSH
23242: LD_INT 1
23244: NEG
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 1
23252: NEG
23253: PUSH
23254: LD_INT 2
23256: NEG
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 2
23264: PUSH
23265: LD_INT 1
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 2
23274: PUSH
23275: LD_INT 2
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 1
23284: PUSH
23285: LD_INT 2
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 2
23294: NEG
23295: PUSH
23296: LD_INT 1
23298: NEG
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 2
23306: NEG
23307: PUSH
23308: LD_INT 2
23310: NEG
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 2
23318: NEG
23319: PUSH
23320: LD_INT 3
23322: NEG
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 3
23330: NEG
23331: PUSH
23332: LD_INT 2
23334: NEG
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 3
23342: NEG
23343: PUSH
23344: LD_INT 3
23346: NEG
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23370: LD_ADDR_VAR 0 14
23374: PUSH
23375: LD_INT 0
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 0
23387: PUSH
23388: LD_INT 1
23390: NEG
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 1
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 0
23418: PUSH
23419: LD_INT 1
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 1
23428: NEG
23429: PUSH
23430: LD_INT 0
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 1
23439: NEG
23440: PUSH
23441: LD_INT 1
23443: NEG
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 1
23451: NEG
23452: PUSH
23453: LD_INT 2
23455: NEG
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 0
23463: PUSH
23464: LD_INT 2
23466: NEG
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 1
23474: PUSH
23475: LD_INT 1
23477: NEG
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 1
23485: PUSH
23486: LD_INT 2
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 0
23495: PUSH
23496: LD_INT 2
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 1
23505: NEG
23506: PUSH
23507: LD_INT 1
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 1
23516: NEG
23517: PUSH
23518: LD_INT 3
23520: NEG
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 0
23528: PUSH
23529: LD_INT 3
23531: NEG
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 1
23539: PUSH
23540: LD_INT 2
23542: NEG
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23566: LD_ADDR_VAR 0 15
23570: PUSH
23571: LD_INT 0
23573: PUSH
23574: LD_INT 0
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 0
23583: PUSH
23584: LD_INT 1
23586: NEG
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 1
23594: PUSH
23595: LD_INT 0
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: LD_INT 1
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 0
23614: PUSH
23615: LD_INT 1
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 1
23624: NEG
23625: PUSH
23626: LD_INT 0
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 1
23635: NEG
23636: PUSH
23637: LD_INT 1
23639: NEG
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 1
23647: PUSH
23648: LD_INT 1
23650: NEG
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 2
23658: PUSH
23659: LD_INT 0
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 2
23668: PUSH
23669: LD_INT 1
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 1
23678: NEG
23679: PUSH
23680: LD_INT 1
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 2
23689: NEG
23690: PUSH
23691: LD_INT 0
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 2
23700: NEG
23701: PUSH
23702: LD_INT 1
23704: NEG
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 2
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 3
23723: PUSH
23724: LD_INT 0
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 3
23733: PUSH
23734: LD_INT 1
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23759: LD_ADDR_VAR 0 16
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: LD_INT 0
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: LD_INT 0
23776: PUSH
23777: LD_INT 1
23779: NEG
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 1
23787: PUSH
23788: LD_INT 0
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: LD_INT 1
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 0
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 1
23817: NEG
23818: PUSH
23819: LD_INT 0
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 1
23828: NEG
23829: PUSH
23830: LD_INT 1
23832: NEG
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 1
23840: NEG
23841: PUSH
23842: LD_INT 2
23844: NEG
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 2
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 2
23862: PUSH
23863: LD_INT 2
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 1
23872: PUSH
23873: LD_INT 2
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 2
23882: NEG
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 2
23894: NEG
23895: PUSH
23896: LD_INT 2
23898: NEG
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 3
23906: PUSH
23907: LD_INT 2
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 3
23916: PUSH
23917: LD_INT 3
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 2
23926: PUSH
23927: LD_INT 3
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23952: LD_ADDR_VAR 0 17
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 0
23969: PUSH
23970: LD_INT 1
23972: NEG
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 1
23980: PUSH
23981: LD_INT 0
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 1
23990: PUSH
23991: LD_INT 1
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 1
24010: NEG
24011: PUSH
24012: LD_INT 0
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: NEG
24022: PUSH
24023: LD_INT 1
24025: NEG
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 1
24033: NEG
24034: PUSH
24035: LD_INT 2
24037: NEG
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: LD_INT 2
24048: NEG
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 1
24056: PUSH
24057: LD_INT 1
24059: NEG
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 2
24067: PUSH
24068: LD_INT 0
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 2
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: LD_INT 2
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: PUSH
24098: LD_INT 2
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 2
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 1
24117: NEG
24118: PUSH
24119: LD_INT 1
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 2
24128: NEG
24129: PUSH
24130: LD_INT 0
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 2
24139: NEG
24140: PUSH
24141: LD_INT 1
24143: NEG
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 2
24151: NEG
24152: PUSH
24153: LD_INT 2
24155: NEG
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24182: LD_ADDR_VAR 0 18
24186: PUSH
24187: LD_INT 0
24189: PUSH
24190: LD_INT 0
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 0
24199: PUSH
24200: LD_INT 1
24202: NEG
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 1
24210: PUSH
24211: LD_INT 0
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 1
24220: PUSH
24221: LD_INT 1
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 0
24230: PUSH
24231: LD_INT 1
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 1
24240: NEG
24241: PUSH
24242: LD_INT 0
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 1
24251: NEG
24252: PUSH
24253: LD_INT 1
24255: NEG
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 1
24263: NEG
24264: PUSH
24265: LD_INT 2
24267: NEG
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: LD_INT 2
24278: NEG
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: LD_INT 1
24289: NEG
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 2
24297: PUSH
24298: LD_INT 0
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 2
24307: PUSH
24308: LD_INT 1
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 2
24317: PUSH
24318: LD_INT 2
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 1
24327: PUSH
24328: LD_INT 2
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 0
24337: PUSH
24338: LD_INT 2
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 1
24347: NEG
24348: PUSH
24349: LD_INT 1
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 2
24358: NEG
24359: PUSH
24360: LD_INT 0
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 2
24369: NEG
24370: PUSH
24371: LD_INT 1
24373: NEG
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 2
24381: NEG
24382: PUSH
24383: LD_INT 2
24385: NEG
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24412: LD_ADDR_VAR 0 19
24416: PUSH
24417: LD_INT 0
24419: PUSH
24420: LD_INT 0
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 0
24429: PUSH
24430: LD_INT 1
24432: NEG
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 1
24440: PUSH
24441: LD_INT 0
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: LD_INT 1
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: LD_INT 1
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 1
24470: NEG
24471: PUSH
24472: LD_INT 0
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 1
24481: NEG
24482: PUSH
24483: LD_INT 1
24485: NEG
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 1
24493: NEG
24494: PUSH
24495: LD_INT 2
24497: NEG
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 0
24505: PUSH
24506: LD_INT 2
24508: NEG
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 1
24516: PUSH
24517: LD_INT 1
24519: NEG
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 2
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 2
24537: PUSH
24538: LD_INT 1
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: LD_INT 2
24547: PUSH
24548: LD_INT 2
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 1
24557: PUSH
24558: LD_INT 2
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 0
24567: PUSH
24568: LD_INT 2
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 1
24577: NEG
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 2
24588: NEG
24589: PUSH
24590: LD_INT 0
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 2
24599: NEG
24600: PUSH
24601: LD_INT 1
24603: NEG
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 2
24611: NEG
24612: PUSH
24613: LD_INT 2
24615: NEG
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24642: LD_ADDR_VAR 0 20
24646: PUSH
24647: LD_INT 0
24649: PUSH
24650: LD_INT 0
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 0
24659: PUSH
24660: LD_INT 1
24662: NEG
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 1
24670: PUSH
24671: LD_INT 0
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 1
24680: PUSH
24681: LD_INT 1
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 0
24690: PUSH
24691: LD_INT 1
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 1
24700: NEG
24701: PUSH
24702: LD_INT 0
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 1
24711: NEG
24712: PUSH
24713: LD_INT 1
24715: NEG
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 1
24723: NEG
24724: PUSH
24725: LD_INT 2
24727: NEG
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: LD_INT 2
24738: NEG
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 1
24746: PUSH
24747: LD_INT 1
24749: NEG
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 2
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 2
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 2
24777: PUSH
24778: LD_INT 2
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: LD_INT 2
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: LD_INT 2
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 1
24807: NEG
24808: PUSH
24809: LD_INT 1
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 2
24818: NEG
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 2
24829: NEG
24830: PUSH
24831: LD_INT 1
24833: NEG
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 2
24841: NEG
24842: PUSH
24843: LD_INT 2
24845: NEG
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24872: LD_ADDR_VAR 0 21
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: LD_INT 0
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 0
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 1
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 0
24920: PUSH
24921: LD_INT 1
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 1
24930: NEG
24931: PUSH
24932: LD_INT 0
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 1
24941: NEG
24942: PUSH
24943: LD_INT 1
24945: NEG
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 1
24953: NEG
24954: PUSH
24955: LD_INT 2
24957: NEG
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: LD_INT 2
24968: NEG
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 1
24976: PUSH
24977: LD_INT 1
24979: NEG
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 2
24987: PUSH
24988: LD_INT 0
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 2
24997: PUSH
24998: LD_INT 1
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 2
25007: PUSH
25008: LD_INT 2
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 1
25017: PUSH
25018: LD_INT 2
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: LD_INT 2
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 1
25037: NEG
25038: PUSH
25039: LD_INT 1
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 2
25048: NEG
25049: PUSH
25050: LD_INT 0
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: NEG
25060: PUSH
25061: LD_INT 1
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 2
25071: NEG
25072: PUSH
25073: LD_INT 2
25075: NEG
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25102: LD_ADDR_VAR 0 22
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 1
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: LD_INT 1
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 1
25160: NEG
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 1
25171: NEG
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 1
25183: NEG
25184: PUSH
25185: LD_INT 2
25187: NEG
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 0
25195: PUSH
25196: LD_INT 2
25198: NEG
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 1
25206: PUSH
25207: LD_INT 1
25209: NEG
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 2
25217: PUSH
25218: LD_INT 0
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 2
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 2
25237: PUSH
25238: LD_INT 2
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: LD_INT 2
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 0
25257: PUSH
25258: LD_INT 2
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: LD_INT 1
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 2
25278: NEG
25279: PUSH
25280: LD_INT 0
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 2
25289: NEG
25290: PUSH
25291: LD_INT 1
25293: NEG
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 2
25301: NEG
25302: PUSH
25303: LD_INT 2
25305: NEG
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
25332: LD_ADDR_VAR 0 23
25336: PUSH
25337: LD_INT 0
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 0
25349: PUSH
25350: LD_INT 1
25352: NEG
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: LD_INT 0
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 1
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: LD_INT 1
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 1
25390: NEG
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 1
25401: NEG
25402: PUSH
25403: LD_INT 1
25405: NEG
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 1
25413: NEG
25414: PUSH
25415: LD_INT 2
25417: NEG
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 0
25425: PUSH
25426: LD_INT 2
25428: NEG
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 1
25436: PUSH
25437: LD_INT 1
25439: NEG
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 2
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 2
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 2
25467: PUSH
25468: LD_INT 2
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 1
25477: PUSH
25478: LD_INT 2
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 0
25487: PUSH
25488: LD_INT 2
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 1
25497: NEG
25498: PUSH
25499: LD_INT 1
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 2
25508: NEG
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 2
25519: NEG
25520: PUSH
25521: LD_INT 1
25523: NEG
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 2
25531: NEG
25532: PUSH
25533: LD_INT 2
25535: NEG
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 2
25543: NEG
25544: PUSH
25545: LD_INT 3
25547: NEG
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 1
25555: NEG
25556: PUSH
25557: LD_INT 3
25559: NEG
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: LD_INT 2
25570: NEG
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 2
25578: PUSH
25579: LD_INT 1
25581: NEG
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25612: LD_ADDR_VAR 0 24
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 0
25629: PUSH
25630: LD_INT 1
25632: NEG
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 1
25640: PUSH
25641: LD_INT 0
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: LD_INT 1
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 0
25660: PUSH
25661: LD_INT 1
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 1
25670: NEG
25671: PUSH
25672: LD_INT 0
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 1
25681: NEG
25682: PUSH
25683: LD_INT 1
25685: NEG
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: NEG
25694: PUSH
25695: LD_INT 2
25697: NEG
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 0
25705: PUSH
25706: LD_INT 2
25708: NEG
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 1
25716: PUSH
25717: LD_INT 1
25719: NEG
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 2
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 2
25737: PUSH
25738: LD_INT 1
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 2
25747: PUSH
25748: LD_INT 2
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: LD_INT 2
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 0
25767: PUSH
25768: LD_INT 2
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 1
25777: NEG
25778: PUSH
25779: LD_INT 1
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 2
25788: NEG
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 2
25799: NEG
25800: PUSH
25801: LD_INT 1
25803: NEG
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 2
25811: NEG
25812: PUSH
25813: LD_INT 2
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 1
25823: PUSH
25824: LD_INT 2
25826: NEG
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 2
25834: PUSH
25835: LD_INT 1
25837: NEG
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 3
25845: PUSH
25846: LD_INT 1
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 3
25855: PUSH
25856: LD_INT 2
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25888: LD_ADDR_VAR 0 25
25892: PUSH
25893: LD_INT 0
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 0
25905: PUSH
25906: LD_INT 1
25908: NEG
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: PUSH
25927: LD_INT 1
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 0
25936: PUSH
25937: LD_INT 1
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 1
25946: NEG
25947: PUSH
25948: LD_INT 0
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 1
25969: NEG
25970: PUSH
25971: LD_INT 2
25973: NEG
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 0
25981: PUSH
25982: LD_INT 2
25984: NEG
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 1
25992: PUSH
25993: LD_INT 1
25995: NEG
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 2
26003: PUSH
26004: LD_INT 0
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 2
26013: PUSH
26014: LD_INT 1
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 2
26023: PUSH
26024: LD_INT 2
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 1
26033: PUSH
26034: LD_INT 2
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: LD_INT 2
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 1
26053: NEG
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 2
26064: NEG
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 2
26075: NEG
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 2
26087: NEG
26088: PUSH
26089: LD_INT 2
26091: NEG
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 3
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 3
26109: PUSH
26110: LD_INT 2
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 2
26119: PUSH
26120: LD_INT 3
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: LD_INT 3
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26162: LD_ADDR_VAR 0 26
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 0
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: PUSH
26201: LD_INT 1
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: LD_INT 1
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: LD_INT 1
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 1
26243: NEG
26244: PUSH
26245: LD_INT 2
26247: NEG
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: LD_INT 2
26258: NEG
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 1
26266: PUSH
26267: LD_INT 1
26269: NEG
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 2
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 2
26287: PUSH
26288: LD_INT 1
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 2
26297: PUSH
26298: LD_INT 2
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: LD_INT 2
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: LD_INT 2
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: PUSH
26329: LD_INT 1
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 2
26338: NEG
26339: PUSH
26340: LD_INT 0
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 2
26349: NEG
26350: PUSH
26351: LD_INT 1
26353: NEG
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 2
26361: NEG
26362: PUSH
26363: LD_INT 2
26365: NEG
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 2
26373: PUSH
26374: LD_INT 3
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 1
26383: PUSH
26384: LD_INT 3
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: LD_INT 2
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 2
26404: NEG
26405: PUSH
26406: LD_INT 1
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26438: LD_ADDR_VAR 0 27
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: LD_INT 0
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: LD_INT 1
26458: NEG
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 1
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 0
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 1
26496: NEG
26497: PUSH
26498: LD_INT 0
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 1
26507: NEG
26508: PUSH
26509: LD_INT 1
26511: NEG
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: LD_INT 2
26523: NEG
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 0
26531: PUSH
26532: LD_INT 2
26534: NEG
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 1
26542: PUSH
26543: LD_INT 1
26545: NEG
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 2
26553: PUSH
26554: LD_INT 0
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 2
26563: PUSH
26564: LD_INT 1
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 2
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 1
26583: PUSH
26584: LD_INT 2
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: LD_INT 2
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: LD_INT 1
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 2
26614: NEG
26615: PUSH
26616: LD_INT 0
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 2
26625: NEG
26626: PUSH
26627: LD_INT 1
26629: NEG
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 2
26637: NEG
26638: PUSH
26639: LD_INT 2
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 1
26649: NEG
26650: PUSH
26651: LD_INT 2
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 2
26660: NEG
26661: PUSH
26662: LD_INT 1
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 3
26671: NEG
26672: PUSH
26673: LD_INT 1
26675: NEG
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 3
26683: NEG
26684: PUSH
26685: LD_INT 2
26687: NEG
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26718: LD_ADDR_VAR 0 28
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: LD_INT 0
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: LD_INT 1
26738: NEG
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 1
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 1
26756: PUSH
26757: LD_INT 1
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 1
26776: NEG
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: LD_INT 1
26791: NEG
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 1
26799: NEG
26800: PUSH
26801: LD_INT 2
26803: NEG
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: LD_INT 2
26814: NEG
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 1
26822: PUSH
26823: LD_INT 1
26825: NEG
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 2
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 2
26843: PUSH
26844: LD_INT 1
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 2
26853: PUSH
26854: LD_INT 2
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 1
26863: PUSH
26864: LD_INT 2
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 0
26873: PUSH
26874: LD_INT 2
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 1
26883: NEG
26884: PUSH
26885: LD_INT 1
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 2
26894: NEG
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: NEG
26906: PUSH
26907: LD_INT 1
26909: NEG
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 2
26917: NEG
26918: PUSH
26919: LD_INT 2
26921: NEG
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 2
26929: NEG
26930: PUSH
26931: LD_INT 3
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 1
26941: NEG
26942: PUSH
26943: LD_INT 3
26945: NEG
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 3
26953: NEG
26954: PUSH
26955: LD_INT 1
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 3
26965: NEG
26966: PUSH
26967: LD_INT 2
26969: NEG
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27000: LD_ADDR_VAR 0 29
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: LD_INT 1
27020: NEG
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 1
27058: NEG
27059: PUSH
27060: LD_INT 0
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 1
27081: NEG
27082: PUSH
27083: LD_INT 2
27085: NEG
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 0
27093: PUSH
27094: LD_INT 2
27096: NEG
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: LD_INT 1
27107: NEG
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 2
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 2
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 1
27135: PUSH
27136: LD_INT 2
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 0
27145: PUSH
27146: LD_INT 2
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 1
27155: NEG
27156: PUSH
27157: LD_INT 1
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 2
27166: NEG
27167: PUSH
27168: LD_INT 1
27170: NEG
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 2
27178: NEG
27179: PUSH
27180: LD_INT 2
27182: NEG
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 2
27190: NEG
27191: PUSH
27192: LD_INT 3
27194: NEG
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 2
27202: PUSH
27203: LD_INT 1
27205: NEG
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 3
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: LD_INT 3
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 1
27233: NEG
27234: PUSH
27235: LD_INT 2
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 3
27244: NEG
27245: PUSH
27246: LD_INT 2
27248: NEG
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27279: LD_ADDR_VAR 0 30
27283: PUSH
27284: LD_INT 0
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 0
27296: PUSH
27297: LD_INT 1
27299: NEG
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 1
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 1
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 0
27327: PUSH
27328: LD_INT 1
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 1
27337: NEG
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 1
27348: NEG
27349: PUSH
27350: LD_INT 1
27352: NEG
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 1
27360: NEG
27361: PUSH
27362: LD_INT 2
27364: NEG
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 2
27375: NEG
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 1
27383: PUSH
27384: LD_INT 1
27386: NEG
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 2
27394: PUSH
27395: LD_INT 0
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 2
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 2
27414: PUSH
27415: LD_INT 2
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: LD_INT 2
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 1
27434: NEG
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 2
27445: NEG
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 2
27456: NEG
27457: PUSH
27458: LD_INT 1
27460: NEG
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 1
27468: NEG
27469: PUSH
27470: LD_INT 3
27472: NEG
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 1
27480: PUSH
27481: LD_INT 2
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 3
27491: PUSH
27492: LD_INT 2
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 2
27501: PUSH
27502: LD_INT 3
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 2
27511: NEG
27512: PUSH
27513: LD_INT 1
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 3
27522: NEG
27523: PUSH
27524: LD_INT 1
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27557: LD_ADDR_VAR 0 31
27561: PUSH
27562: LD_INT 0
27564: PUSH
27565: LD_INT 0
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 1
27585: PUSH
27586: LD_INT 0
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 1
27595: PUSH
27596: LD_INT 1
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 1
27626: NEG
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 1
27638: NEG
27639: PUSH
27640: LD_INT 2
27642: NEG
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 1
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 2
27661: PUSH
27662: LD_INT 0
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 2
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 2
27681: PUSH
27682: LD_INT 2
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 1
27691: PUSH
27692: LD_INT 2
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 0
27701: PUSH
27702: LD_INT 2
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 1
27711: NEG
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 2
27722: NEG
27723: PUSH
27724: LD_INT 1
27726: NEG
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 2
27734: NEG
27735: PUSH
27736: LD_INT 2
27738: NEG
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 2
27746: NEG
27747: PUSH
27748: LD_INT 3
27750: NEG
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 2
27758: PUSH
27759: LD_INT 1
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 3
27769: PUSH
27770: LD_INT 1
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: LD_INT 3
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: LD_INT 2
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 3
27800: NEG
27801: PUSH
27802: LD_INT 2
27804: NEG
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27835: LD_ADDR_VAR 0 32
27839: PUSH
27840: LD_INT 0
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 0
27852: PUSH
27853: LD_INT 1
27855: NEG
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 1
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 0
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: LD_INT 0
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 1
27904: NEG
27905: PUSH
27906: LD_INT 1
27908: NEG
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 1
27916: NEG
27917: PUSH
27918: LD_INT 2
27920: NEG
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 0
27928: PUSH
27929: LD_INT 2
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 1
27939: PUSH
27940: LD_INT 1
27942: NEG
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 2
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 2
27960: PUSH
27961: LD_INT 2
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 1
27970: PUSH
27971: LD_INT 2
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: LD_INT 2
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: NEG
27991: PUSH
27992: LD_INT 1
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 2
28001: NEG
28002: PUSH
28003: LD_INT 0
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 2
28012: NEG
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 1
28024: NEG
28025: PUSH
28026: LD_INT 3
28028: NEG
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 1
28036: PUSH
28037: LD_INT 2
28039: NEG
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 3
28047: PUSH
28048: LD_INT 2
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 2
28057: PUSH
28058: LD_INT 3
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 2
28067: NEG
28068: PUSH
28069: LD_INT 1
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 3
28078: NEG
28079: PUSH
28080: LD_INT 1
28082: NEG
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28113: LD_ADDR_VAR 0 33
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: LD_INT 0
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: LD_INT 1
28133: NEG
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 1
28141: PUSH
28142: LD_INT 0
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: PUSH
28152: LD_INT 1
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: LD_INT 1
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 1
28171: NEG
28172: PUSH
28173: LD_INT 0
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 1
28182: NEG
28183: PUSH
28184: LD_INT 1
28186: NEG
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 1
28194: NEG
28195: PUSH
28196: LD_INT 2
28198: NEG
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 1
28206: PUSH
28207: LD_INT 1
28209: NEG
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 2
28217: PUSH
28218: LD_INT 0
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 2
28227: PUSH
28228: LD_INT 1
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: LD_INT 2
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: LD_INT 2
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 1
28257: NEG
28258: PUSH
28259: LD_INT 1
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 2
28268: NEG
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 2
28279: NEG
28280: PUSH
28281: LD_INT 1
28283: NEG
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 2
28291: NEG
28292: PUSH
28293: LD_INT 2
28295: NEG
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 2
28303: NEG
28304: PUSH
28305: LD_INT 3
28307: NEG
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 2
28315: PUSH
28316: LD_INT 1
28318: NEG
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 3
28326: PUSH
28327: LD_INT 1
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 1
28336: PUSH
28337: LD_INT 3
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 1
28346: NEG
28347: PUSH
28348: LD_INT 2
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 3
28357: NEG
28358: PUSH
28359: LD_INT 2
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28392: LD_ADDR_VAR 0 34
28396: PUSH
28397: LD_INT 0
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 0
28409: PUSH
28410: LD_INT 1
28412: NEG
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 1
28420: PUSH
28421: LD_INT 0
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 0
28440: PUSH
28441: LD_INT 1
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: NEG
28451: PUSH
28452: LD_INT 0
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 1
28461: NEG
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 1
28473: NEG
28474: PUSH
28475: LD_INT 2
28477: NEG
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: LD_INT 2
28488: NEG
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 1
28496: PUSH
28497: LD_INT 1
28499: NEG
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 2
28507: PUSH
28508: LD_INT 1
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 2
28517: PUSH
28518: LD_INT 2
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: LD_INT 2
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: LD_INT 1
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 2
28548: NEG
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 2
28559: NEG
28560: PUSH
28561: LD_INT 1
28563: NEG
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 2
28571: NEG
28572: PUSH
28573: LD_INT 2
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: LD_INT 3
28587: NEG
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 1
28595: PUSH
28596: LD_INT 2
28598: NEG
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 3
28606: PUSH
28607: LD_INT 2
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 2
28616: PUSH
28617: LD_INT 3
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 2
28626: NEG
28627: PUSH
28628: LD_INT 1
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 3
28637: NEG
28638: PUSH
28639: LD_INT 1
28641: NEG
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28672: LD_ADDR_VAR 0 35
28676: PUSH
28677: LD_INT 0
28679: PUSH
28680: LD_INT 0
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 0
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 1
28700: PUSH
28701: LD_INT 0
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 1
28710: PUSH
28711: LD_INT 1
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: LD_INT 1
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: LD_INT 0
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 1
28741: NEG
28742: PUSH
28743: LD_INT 1
28745: NEG
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 2
28753: PUSH
28754: LD_INT 1
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 2
28763: NEG
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28784: LD_ADDR_VAR 0 36
28788: PUSH
28789: LD_INT 0
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 0
28801: PUSH
28802: LD_INT 1
28804: NEG
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 1
28812: PUSH
28813: LD_INT 0
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 1
28822: PUSH
28823: LD_INT 1
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 0
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 1
28842: NEG
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 1
28853: NEG
28854: PUSH
28855: LD_INT 1
28857: NEG
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 1
28865: NEG
28866: PUSH
28867: LD_INT 2
28869: NEG
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 1
28877: PUSH
28878: LD_INT 2
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28896: LD_ADDR_VAR 0 37
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: LD_INT 1
28916: NEG
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 1
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 1
28954: NEG
28955: PUSH
28956: LD_INT 0
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: LD_INT 1
28969: NEG
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 1
28977: PUSH
28978: LD_INT 1
28980: NEG
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: NEG
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29008: LD_ADDR_VAR 0 38
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 0
29025: PUSH
29026: LD_INT 1
29028: NEG
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 1
29036: PUSH
29037: LD_INT 0
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 1
29046: PUSH
29047: LD_INT 1
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 0
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 1
29066: NEG
29067: PUSH
29068: LD_INT 0
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 1
29077: NEG
29078: PUSH
29079: LD_INT 1
29081: NEG
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 2
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 2
29099: NEG
29100: PUSH
29101: LD_INT 1
29103: NEG
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29120: LD_ADDR_VAR 0 39
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: LD_INT 0
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 0
29137: PUSH
29138: LD_INT 1
29140: NEG
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 1
29148: PUSH
29149: LD_INT 0
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 1
29158: PUSH
29159: LD_INT 1
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 0
29168: PUSH
29169: LD_INT 1
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 1
29178: NEG
29179: PUSH
29180: LD_INT 0
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 1
29189: NEG
29190: PUSH
29191: LD_INT 1
29193: NEG
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: LD_INT 2
29205: NEG
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 1
29213: PUSH
29214: LD_INT 2
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29232: LD_ADDR_VAR 0 40
29236: PUSH
29237: LD_INT 0
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 0
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 1
29260: PUSH
29261: LD_INT 0
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 1
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 0
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 1
29290: NEG
29291: PUSH
29292: LD_INT 0
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 1
29301: NEG
29302: PUSH
29303: LD_INT 1
29305: NEG
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 1
29313: PUSH
29314: LD_INT 1
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 1
29324: NEG
29325: PUSH
29326: LD_INT 1
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29344: LD_ADDR_VAR 0 41
29348: PUSH
29349: LD_INT 0
29351: PUSH
29352: LD_INT 0
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 0
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 1
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: LD_INT 1
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 1
29402: NEG
29403: PUSH
29404: LD_INT 0
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 1
29413: NEG
29414: PUSH
29415: LD_INT 1
29417: NEG
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 1
29425: NEG
29426: PUSH
29427: LD_INT 2
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 1
29437: PUSH
29438: LD_INT 1
29440: NEG
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 2
29448: PUSH
29449: LD_INT 0
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 2
29458: PUSH
29459: LD_INT 1
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 2
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: LD_INT 2
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 1
29488: NEG
29489: PUSH
29490: LD_INT 1
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 2
29499: NEG
29500: PUSH
29501: LD_INT 0
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 2
29510: NEG
29511: PUSH
29512: LD_INT 1
29514: NEG
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 2
29522: NEG
29523: PUSH
29524: LD_INT 2
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 2
29534: NEG
29535: PUSH
29536: LD_INT 3
29538: NEG
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 2
29546: PUSH
29547: LD_INT 1
29549: NEG
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 3
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 3
29567: PUSH
29568: LD_INT 1
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 3
29577: PUSH
29578: LD_INT 2
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 3
29587: PUSH
29588: LD_INT 3
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 2
29597: PUSH
29598: LD_INT 3
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 2
29607: NEG
29608: PUSH
29609: LD_INT 1
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 3
29618: NEG
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 3
29629: NEG
29630: PUSH
29631: LD_INT 1
29633: NEG
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 3
29641: NEG
29642: PUSH
29643: LD_INT 2
29645: NEG
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 3
29653: NEG
29654: PUSH
29655: LD_INT 3
29657: NEG
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29694: LD_ADDR_VAR 0 42
29698: PUSH
29699: LD_INT 0
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 0
29711: PUSH
29712: LD_INT 1
29714: NEG
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 1
29722: PUSH
29723: LD_INT 0
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 0
29742: PUSH
29743: LD_INT 1
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 1
29752: NEG
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 1
29763: NEG
29764: PUSH
29765: LD_INT 1
29767: NEG
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 1
29775: NEG
29776: PUSH
29777: LD_INT 2
29779: NEG
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: LD_INT 2
29790: NEG
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 1
29798: PUSH
29799: LD_INT 1
29801: NEG
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 2
29809: PUSH
29810: LD_INT 1
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: LD_INT 2
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 1
29829: PUSH
29830: LD_INT 2
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 0
29839: PUSH
29840: LD_INT 2
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 1
29849: NEG
29850: PUSH
29851: LD_INT 1
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 2
29860: NEG
29861: PUSH
29862: LD_INT 1
29864: NEG
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 2
29872: NEG
29873: PUSH
29874: LD_INT 2
29876: NEG
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 2
29884: NEG
29885: PUSH
29886: LD_INT 3
29888: NEG
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: NEG
29897: PUSH
29898: LD_INT 3
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: LD_INT 3
29911: NEG
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: LD_INT 2
29922: NEG
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 3
29930: PUSH
29931: LD_INT 2
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 3
29940: PUSH
29941: LD_INT 3
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 2
29950: PUSH
29951: LD_INT 3
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: LD_INT 3
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 0
29970: PUSH
29971: LD_INT 3
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 1
29980: NEG
29981: PUSH
29982: LD_INT 2
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 3
29991: NEG
29992: PUSH
29993: LD_INT 2
29995: NEG
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 3
30003: NEG
30004: PUSH
30005: LD_INT 3
30007: NEG
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30044: LD_ADDR_VAR 0 43
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 0
30061: PUSH
30062: LD_INT 1
30064: NEG
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: LD_INT 0
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 0
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 1
30102: NEG
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 1
30113: NEG
30114: PUSH
30115: LD_INT 1
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 1
30125: NEG
30126: PUSH
30127: LD_INT 2
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: LD_INT 2
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 1
30148: PUSH
30149: LD_INT 1
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 2
30159: PUSH
30160: LD_INT 0
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 2
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: LD_INT 2
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 0
30189: PUSH
30190: LD_INT 2
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 1
30199: NEG
30200: PUSH
30201: LD_INT 1
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 2
30210: NEG
30211: PUSH
30212: LD_INT 0
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 2
30221: NEG
30222: PUSH
30223: LD_INT 1
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 1
30233: NEG
30234: PUSH
30235: LD_INT 3
30237: NEG
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 0
30245: PUSH
30246: LD_INT 3
30248: NEG
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: LD_INT 2
30259: NEG
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 2
30267: PUSH
30268: LD_INT 1
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 3
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 3
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 1
30298: PUSH
30299: LD_INT 3
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 0
30308: PUSH
30309: LD_INT 3
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 1
30318: NEG
30319: PUSH
30320: LD_INT 2
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 2
30329: NEG
30330: PUSH
30331: LD_INT 1
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 3
30340: NEG
30341: PUSH
30342: LD_INT 0
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 3
30351: NEG
30352: PUSH
30353: LD_INT 1
30355: NEG
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30392: LD_ADDR_VAR 0 44
30396: PUSH
30397: LD_INT 0
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 0
30409: PUSH
30410: LD_INT 1
30412: NEG
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 1
30420: PUSH
30421: LD_INT 0
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 1
30430: PUSH
30431: LD_INT 1
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 0
30440: PUSH
30441: LD_INT 1
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 1
30450: NEG
30451: PUSH
30452: LD_INT 0
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 1
30461: NEG
30462: PUSH
30463: LD_INT 1
30465: NEG
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 1
30473: NEG
30474: PUSH
30475: LD_INT 2
30477: NEG
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 1
30485: PUSH
30486: LD_INT 1
30488: NEG
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 2
30496: PUSH
30497: LD_INT 0
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 2
30506: PUSH
30507: LD_INT 1
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 2
30516: PUSH
30517: LD_INT 2
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 1
30526: PUSH
30527: LD_INT 2
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 1
30536: NEG
30537: PUSH
30538: LD_INT 1
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 2
30547: NEG
30548: PUSH
30549: LD_INT 0
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 2
30558: NEG
30559: PUSH
30560: LD_INT 1
30562: NEG
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 2
30570: NEG
30571: PUSH
30572: LD_INT 2
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 2
30582: NEG
30583: PUSH
30584: LD_INT 3
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 2
30594: PUSH
30595: LD_INT 1
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 3
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: LD_INT 2
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 3
30635: PUSH
30636: LD_INT 3
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 2
30645: PUSH
30646: LD_INT 3
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 2
30655: NEG
30656: PUSH
30657: LD_INT 1
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 3
30666: NEG
30667: PUSH
30668: LD_INT 0
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 3
30677: NEG
30678: PUSH
30679: LD_INT 1
30681: NEG
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 3
30689: NEG
30690: PUSH
30691: LD_INT 2
30693: NEG
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 3
30701: NEG
30702: PUSH
30703: LD_INT 3
30705: NEG
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30742: LD_ADDR_VAR 0 45
30746: PUSH
30747: LD_INT 0
30749: PUSH
30750: LD_INT 0
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 0
30759: PUSH
30760: LD_INT 1
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 1
30770: PUSH
30771: LD_INT 0
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 1
30780: PUSH
30781: LD_INT 1
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 1
30800: NEG
30801: PUSH
30802: LD_INT 0
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 1
30811: NEG
30812: PUSH
30813: LD_INT 1
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 1
30823: NEG
30824: PUSH
30825: LD_INT 2
30827: NEG
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: LD_INT 2
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 1
30846: PUSH
30847: LD_INT 1
30849: NEG
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 2
30857: PUSH
30858: LD_INT 1
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 2
30867: PUSH
30868: LD_INT 2
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 1
30877: PUSH
30878: LD_INT 2
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 0
30887: PUSH
30888: LD_INT 2
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 1
30897: NEG
30898: PUSH
30899: LD_INT 1
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 2
30908: NEG
30909: PUSH
30910: LD_INT 1
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 2
30920: NEG
30921: PUSH
30922: LD_INT 2
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 2
30932: NEG
30933: PUSH
30934: LD_INT 3
30936: NEG
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 1
30944: NEG
30945: PUSH
30946: LD_INT 3
30948: NEG
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: LD_INT 3
30959: NEG
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: LD_INT 2
30970: NEG
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 3
30978: PUSH
30979: LD_INT 2
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 3
30988: PUSH
30989: LD_INT 3
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 2
30998: PUSH
30999: LD_INT 3
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 1
31008: PUSH
31009: LD_INT 3
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 0
31018: PUSH
31019: LD_INT 3
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 1
31028: NEG
31029: PUSH
31030: LD_INT 2
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 3
31039: NEG
31040: PUSH
31041: LD_INT 2
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 3
31051: NEG
31052: PUSH
31053: LD_INT 3
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31092: LD_ADDR_VAR 0 46
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 0
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 1
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 0
31140: PUSH
31141: LD_INT 1
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 1
31150: NEG
31151: PUSH
31152: LD_INT 0
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 1
31161: NEG
31162: PUSH
31163: LD_INT 1
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 1
31173: NEG
31174: PUSH
31175: LD_INT 2
31177: NEG
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: LD_INT 2
31188: NEG
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: LD_INT 1
31199: NEG
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 2
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: LD_INT 2
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 0
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 1
31247: NEG
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 2
31258: NEG
31259: PUSH
31260: LD_INT 0
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 2
31269: NEG
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 1
31281: NEG
31282: PUSH
31283: LD_INT 3
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 0
31293: PUSH
31294: LD_INT 3
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: PUSH
31305: LD_INT 2
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 2
31315: PUSH
31316: LD_INT 1
31318: NEG
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 3
31326: PUSH
31327: LD_INT 0
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 3
31336: PUSH
31337: LD_INT 1
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 1
31346: PUSH
31347: LD_INT 3
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 0
31356: PUSH
31357: LD_INT 3
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 1
31366: NEG
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 2
31377: NEG
31378: PUSH
31379: LD_INT 1
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 3
31388: NEG
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 3
31399: NEG
31400: PUSH
31401: LD_INT 1
31403: NEG
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31440: LD_ADDR_VAR 0 47
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: LD_INT 0
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 0
31457: PUSH
31458: LD_INT 1
31460: NEG
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: LD_INT 0
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 1
31478: PUSH
31479: LD_INT 1
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: LD_INT 1
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 1
31498: NEG
31499: PUSH
31500: LD_INT 0
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 1
31509: NEG
31510: PUSH
31511: LD_INT 1
31513: NEG
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 1
31521: NEG
31522: PUSH
31523: LD_INT 2
31525: NEG
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 0
31533: PUSH
31534: LD_INT 2
31536: NEG
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 1
31544: PUSH
31545: LD_INT 1
31547: NEG
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 2
31555: NEG
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 2
31567: NEG
31568: PUSH
31569: LD_INT 2
31571: NEG
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31591: LD_ADDR_VAR 0 48
31595: PUSH
31596: LD_INT 0
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: LD_INT 1
31611: NEG
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: LD_INT 1
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 1
31649: NEG
31650: PUSH
31651: LD_INT 0
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 1
31660: NEG
31661: PUSH
31662: LD_INT 1
31664: NEG
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: LD_INT 2
31676: NEG
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 0
31684: PUSH
31685: LD_INT 2
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 2
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: LD_INT 1
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31738: LD_ADDR_VAR 0 49
31742: PUSH
31743: LD_INT 0
31745: PUSH
31746: LD_INT 0
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: LD_INT 1
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 1
31766: PUSH
31767: LD_INT 0
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: LD_INT 1
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 1
31796: NEG
31797: PUSH
31798: LD_INT 0
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 2
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: LD_INT 1
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: LD_INT 2
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: LD_INT 2
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31882: LD_ADDR_VAR 0 50
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: LD_INT 0
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 0
31899: PUSH
31900: LD_INT 1
31902: NEG
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 1
31910: PUSH
31911: LD_INT 0
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 1
31920: PUSH
31921: LD_INT 1
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: LD_INT 1
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 1
31940: NEG
31941: PUSH
31942: LD_INT 0
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: NEG
31952: PUSH
31953: LD_INT 1
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 2
31973: PUSH
31974: LD_INT 2
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 1
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 0
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: NEG
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32026: LD_ADDR_VAR 0 51
32030: PUSH
32031: LD_INT 0
32033: PUSH
32034: LD_INT 0
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 0
32043: PUSH
32044: LD_INT 1
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 1
32054: PUSH
32055: LD_INT 0
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 1
32064: PUSH
32065: LD_INT 1
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: LD_INT 1
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 1
32084: NEG
32085: PUSH
32086: LD_INT 0
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 1
32095: NEG
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 1
32107: PUSH
32108: LD_INT 2
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 0
32117: PUSH
32118: LD_INT 2
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 1
32127: NEG
32128: PUSH
32129: LD_INT 1
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 2
32138: NEG
32139: PUSH
32140: LD_INT 0
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 2
32149: NEG
32150: PUSH
32151: LD_INT 1
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32173: LD_ADDR_VAR 0 52
32177: PUSH
32178: LD_INT 0
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 0
32190: PUSH
32191: LD_INT 1
32193: NEG
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 1
32201: PUSH
32202: LD_INT 0
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: LD_INT 0
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 1
32242: NEG
32243: PUSH
32244: LD_INT 1
32246: NEG
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 1
32254: NEG
32255: PUSH
32256: LD_INT 2
32258: NEG
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 1
32266: NEG
32267: PUSH
32268: LD_INT 1
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 2
32277: NEG
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 2
32288: NEG
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 2
32300: NEG
32301: PUSH
32302: LD_INT 2
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32324: LD_ADDR_VAR 0 53
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: LD_INT 0
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 0
32341: PUSH
32342: LD_INT 1
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: LD_INT 0
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 1
32362: PUSH
32363: LD_INT 1
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 0
32372: PUSH
32373: LD_INT 1
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 1
32382: NEG
32383: PUSH
32384: LD_INT 0
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 1
32393: NEG
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: LD_INT 2
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 0
32417: PUSH
32418: LD_INT 2
32420: NEG
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 1
32428: PUSH
32429: LD_INT 1
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 2
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 2
32449: PUSH
32450: LD_INT 1
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 2
32459: PUSH
32460: LD_INT 2
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 1
32469: PUSH
32470: LD_INT 2
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: LD_INT 2
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: NEG
32490: PUSH
32491: LD_INT 1
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 2
32500: NEG
32501: PUSH
32502: LD_INT 0
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 2
32511: NEG
32512: PUSH
32513: LD_INT 1
32515: NEG
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 2
32523: NEG
32524: PUSH
32525: LD_INT 2
32527: NEG
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32554: LD_ADDR_VAR 0 54
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: LD_INT 0
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 0
32571: PUSH
32572: LD_INT 1
32574: NEG
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: LD_INT 0
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 1
32592: PUSH
32593: LD_INT 1
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: LD_INT 1
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 1
32623: NEG
32624: PUSH
32625: LD_INT 1
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 1
32635: NEG
32636: PUSH
32637: LD_INT 2
32639: NEG
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 0
32647: PUSH
32648: LD_INT 2
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 1
32658: PUSH
32659: LD_INT 1
32661: NEG
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 2
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 2
32679: PUSH
32680: LD_INT 1
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 2
32689: PUSH
32690: LD_INT 2
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 1
32699: PUSH
32700: LD_INT 2
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: LD_INT 2
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: LD_INT 1
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 2
32730: NEG
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 2
32741: NEG
32742: PUSH
32743: LD_INT 1
32745: NEG
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 2
32753: NEG
32754: PUSH
32755: LD_INT 2
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32784: LD_ADDR_VAR 0 55
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: LD_INT 0
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 0
32801: PUSH
32802: LD_INT 1
32804: NEG
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 1
32812: PUSH
32813: LD_INT 0
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 1
32822: PUSH
32823: LD_INT 1
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 0
32832: PUSH
32833: LD_INT 1
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 1
32842: NEG
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 1
32853: NEG
32854: PUSH
32855: LD_INT 1
32857: NEG
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: LD_INT 2
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: LD_INT 2
32880: NEG
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 1
32888: PUSH
32889: LD_INT 1
32891: NEG
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 2
32899: PUSH
32900: LD_INT 0
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 2
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 2
32919: PUSH
32920: LD_INT 2
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 1
32929: PUSH
32930: LD_INT 2
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 0
32939: PUSH
32940: LD_INT 2
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 1
32949: NEG
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 2
32960: NEG
32961: PUSH
32962: LD_INT 0
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 2
32971: NEG
32972: PUSH
32973: LD_INT 1
32975: NEG
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 2
32983: NEG
32984: PUSH
32985: LD_INT 2
32987: NEG
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33014: LD_ADDR_VAR 0 56
33018: PUSH
33019: LD_INT 0
33021: PUSH
33022: LD_INT 0
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 0
33031: PUSH
33032: LD_INT 1
33034: NEG
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 1
33042: PUSH
33043: LD_INT 0
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 1
33052: PUSH
33053: LD_INT 1
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: LD_INT 1
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 1
33072: NEG
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 1
33083: NEG
33084: PUSH
33085: LD_INT 1
33087: NEG
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 1
33095: NEG
33096: PUSH
33097: LD_INT 2
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: LD_INT 2
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: PUSH
33119: LD_INT 1
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 2
33129: PUSH
33130: LD_INT 0
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 2
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 2
33149: PUSH
33150: LD_INT 2
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: LD_INT 2
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: LD_INT 2
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 1
33179: NEG
33180: PUSH
33181: LD_INT 1
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 2
33190: NEG
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 2
33201: NEG
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 2
33213: NEG
33214: PUSH
33215: LD_INT 2
33217: NEG
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33244: LD_ADDR_VAR 0 57
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 0
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: LD_INT 0
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 1
33282: PUSH
33283: LD_INT 1
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: LD_INT 1
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: LD_INT 1
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: LD_INT 2
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: LD_INT 2
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 1
33348: PUSH
33349: LD_INT 1
33351: NEG
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 2
33359: PUSH
33360: LD_INT 0
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 2
33369: PUSH
33370: LD_INT 1
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 2
33379: PUSH
33380: LD_INT 2
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 1
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: LD_INT 2
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 1
33409: NEG
33410: PUSH
33411: LD_INT 1
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: NEG
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 2
33431: NEG
33432: PUSH
33433: LD_INT 1
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 2
33443: NEG
33444: PUSH
33445: LD_INT 2
33447: NEG
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33474: LD_ADDR_VAR 0 58
33478: PUSH
33479: LD_INT 0
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: LD_INT 1
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 1
33532: NEG
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 1
33543: NEG
33544: PUSH
33545: LD_INT 1
33547: NEG
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 1
33555: NEG
33556: PUSH
33557: LD_INT 2
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: LD_INT 2
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 1
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 2
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 2
33599: PUSH
33600: LD_INT 1
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 2
33609: PUSH
33610: LD_INT 2
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: LD_INT 2
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: LD_INT 1
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 2
33650: NEG
33651: PUSH
33652: LD_INT 0
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 2
33661: NEG
33662: PUSH
33663: LD_INT 1
33665: NEG
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 2
33673: NEG
33674: PUSH
33675: LD_INT 2
33677: NEG
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33704: LD_ADDR_VAR 0 59
33708: PUSH
33709: LD_INT 0
33711: PUSH
33712: LD_INT 0
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 0
33721: PUSH
33722: LD_INT 1
33724: NEG
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: LD_INT 0
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 1
33742: PUSH
33743: LD_INT 1
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: LD_INT 1
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 1
33762: NEG
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 1
33773: NEG
33774: PUSH
33775: LD_INT 1
33777: NEG
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33792: LD_ADDR_VAR 0 60
33796: PUSH
33797: LD_INT 0
33799: PUSH
33800: LD_INT 0
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 0
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 1
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 1
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 0
33840: PUSH
33841: LD_INT 1
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 1
33850: NEG
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 1
33861: NEG
33862: PUSH
33863: LD_INT 1
33865: NEG
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33880: LD_ADDR_VAR 0 61
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 0
33897: PUSH
33898: LD_INT 1
33900: NEG
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 1
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 1
33918: PUSH
33919: LD_INT 1
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 0
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 1
33938: NEG
33939: PUSH
33940: LD_INT 0
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 1
33949: NEG
33950: PUSH
33951: LD_INT 1
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33968: LD_ADDR_VAR 0 62
33972: PUSH
33973: LD_INT 0
33975: PUSH
33976: LD_INT 0
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: LD_INT 1
33988: NEG
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 1
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 1
34006: PUSH
34007: LD_INT 1
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: LD_INT 1
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 1
34026: NEG
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 1
34037: NEG
34038: PUSH
34039: LD_INT 1
34041: NEG
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34056: LD_ADDR_VAR 0 63
34060: PUSH
34061: LD_INT 0
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 1
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: LD_INT 1
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 1
34114: NEG
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 1
34125: NEG
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34144: LD_ADDR_VAR 0 64
34148: PUSH
34149: LD_INT 0
34151: PUSH
34152: LD_INT 0
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: LD_INT 1
34164: NEG
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 1
34172: PUSH
34173: LD_INT 0
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: LD_INT 1
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: LD_INT 1
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 1
34202: NEG
34203: PUSH
34204: LD_INT 0
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 1
34213: NEG
34214: PUSH
34215: LD_INT 1
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: ST_TO_ADDR
// end ; 1 :
34232: GO 40129
34234: LD_INT 1
34236: DOUBLE
34237: EQUAL
34238: IFTRUE 34242
34240: GO 36865
34242: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34243: LD_ADDR_VAR 0 11
34247: PUSH
34248: LD_INT 1
34250: NEG
34251: PUSH
34252: LD_INT 3
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: LD_INT 3
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: LD_INT 2
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: LIST
34286: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34287: LD_ADDR_VAR 0 12
34291: PUSH
34292: LD_INT 2
34294: PUSH
34295: LD_INT 1
34297: NEG
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 3
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 3
34315: PUSH
34316: LD_INT 1
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: LIST
34327: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34328: LD_ADDR_VAR 0 13
34332: PUSH
34333: LD_INT 3
34335: PUSH
34336: LD_INT 2
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 3
34345: PUSH
34346: LD_INT 3
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 2
34355: PUSH
34356: LD_INT 3
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: LIST
34367: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34368: LD_ADDR_VAR 0 14
34372: PUSH
34373: LD_INT 1
34375: PUSH
34376: LD_INT 3
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 0
34385: PUSH
34386: LD_INT 3
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 1
34395: NEG
34396: PUSH
34397: LD_INT 2
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: LIST
34408: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34409: LD_ADDR_VAR 0 15
34413: PUSH
34414: LD_INT 2
34416: NEG
34417: PUSH
34418: LD_INT 1
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 3
34427: NEG
34428: PUSH
34429: LD_INT 0
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 3
34438: NEG
34439: PUSH
34440: LD_INT 1
34442: NEG
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: LIST
34452: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34453: LD_ADDR_VAR 0 16
34457: PUSH
34458: LD_INT 2
34460: NEG
34461: PUSH
34462: LD_INT 3
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 3
34472: NEG
34473: PUSH
34474: LD_INT 2
34476: NEG
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 3
34484: NEG
34485: PUSH
34486: LD_INT 3
34488: NEG
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: LIST
34498: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34499: LD_ADDR_VAR 0 17
34503: PUSH
34504: LD_INT 1
34506: NEG
34507: PUSH
34508: LD_INT 3
34510: NEG
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 0
34518: PUSH
34519: LD_INT 3
34521: NEG
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 1
34529: PUSH
34530: LD_INT 2
34532: NEG
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: LIST
34542: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34543: LD_ADDR_VAR 0 18
34547: PUSH
34548: LD_INT 2
34550: PUSH
34551: LD_INT 1
34553: NEG
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 3
34561: PUSH
34562: LD_INT 0
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 3
34571: PUSH
34572: LD_INT 1
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: LIST
34583: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34584: LD_ADDR_VAR 0 19
34588: PUSH
34589: LD_INT 3
34591: PUSH
34592: LD_INT 2
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 3
34601: PUSH
34602: LD_INT 3
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 2
34611: PUSH
34612: LD_INT 3
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: LIST
34623: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34624: LD_ADDR_VAR 0 20
34628: PUSH
34629: LD_INT 1
34631: PUSH
34632: LD_INT 3
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: LD_INT 3
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: LD_INT 2
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: LIST
34664: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34665: LD_ADDR_VAR 0 21
34669: PUSH
34670: LD_INT 2
34672: NEG
34673: PUSH
34674: LD_INT 1
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 3
34683: NEG
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 3
34694: NEG
34695: PUSH
34696: LD_INT 1
34698: NEG
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: LIST
34708: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34709: LD_ADDR_VAR 0 22
34713: PUSH
34714: LD_INT 2
34716: NEG
34717: PUSH
34718: LD_INT 3
34720: NEG
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 3
34728: NEG
34729: PUSH
34730: LD_INT 2
34732: NEG
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 3
34740: NEG
34741: PUSH
34742: LD_INT 3
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: LIST
34754: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
34755: LD_ADDR_VAR 0 23
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: LD_INT 3
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: LD_INT 4
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: PUSH
34786: LD_INT 3
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: LIST
34798: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
34799: LD_ADDR_VAR 0 24
34803: PUSH
34804: LD_INT 3
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 3
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 4
34827: PUSH
34828: LD_INT 1
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: LIST
34839: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34840: LD_ADDR_VAR 0 25
34844: PUSH
34845: LD_INT 3
34847: PUSH
34848: LD_INT 3
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 4
34857: PUSH
34858: LD_INT 3
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 3
34867: PUSH
34868: LD_INT 4
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: LIST
34879: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34880: LD_ADDR_VAR 0 26
34884: PUSH
34885: LD_INT 0
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 1
34897: PUSH
34898: LD_INT 4
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 1
34907: NEG
34908: PUSH
34909: LD_INT 3
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: LIST
34920: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34921: LD_ADDR_VAR 0 27
34925: PUSH
34926: LD_INT 3
34928: NEG
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 3
34939: NEG
34940: PUSH
34941: LD_INT 1
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 4
34950: NEG
34951: PUSH
34952: LD_INT 1
34954: NEG
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34965: LD_ADDR_VAR 0 28
34969: PUSH
34970: LD_INT 3
34972: NEG
34973: PUSH
34974: LD_INT 3
34976: NEG
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 3
34984: NEG
34985: PUSH
34986: LD_INT 4
34988: NEG
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 4
34996: NEG
34997: PUSH
34998: LD_INT 3
35000: NEG
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: LIST
35010: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35011: LD_ADDR_VAR 0 29
35015: PUSH
35016: LD_INT 1
35018: NEG
35019: PUSH
35020: LD_INT 3
35022: NEG
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 0
35030: PUSH
35031: LD_INT 3
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 1
35041: PUSH
35042: LD_INT 2
35044: NEG
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: LD_INT 4
35056: NEG
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: LD_INT 4
35067: NEG
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: LD_INT 3
35078: NEG
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 1
35086: NEG
35087: PUSH
35088: LD_INT 5
35090: NEG
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: LD_INT 5
35101: NEG
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 1
35109: PUSH
35110: LD_INT 4
35112: NEG
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 1
35120: NEG
35121: PUSH
35122: LD_INT 6
35124: NEG
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 0
35132: PUSH
35133: LD_INT 6
35135: NEG
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 1
35143: PUSH
35144: LD_INT 5
35146: NEG
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35166: LD_ADDR_VAR 0 30
35170: PUSH
35171: LD_INT 2
35173: PUSH
35174: LD_INT 1
35176: NEG
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 3
35184: PUSH
35185: LD_INT 0
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 3
35194: PUSH
35195: LD_INT 1
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 3
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 4
35215: PUSH
35216: LD_INT 0
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 4
35225: PUSH
35226: LD_INT 1
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 4
35235: PUSH
35236: LD_INT 1
35238: NEG
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 5
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 5
35256: PUSH
35257: LD_INT 1
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 5
35266: PUSH
35267: LD_INT 1
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 6
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 6
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
35309: LD_ADDR_VAR 0 31
35313: PUSH
35314: LD_INT 3
35316: PUSH
35317: LD_INT 2
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 3
35326: PUSH
35327: LD_INT 3
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 2
35336: PUSH
35337: LD_INT 3
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 4
35346: PUSH
35347: LD_INT 3
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 4
35356: PUSH
35357: LD_INT 4
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 3
35366: PUSH
35367: LD_INT 4
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 5
35376: PUSH
35377: LD_INT 4
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 5
35386: PUSH
35387: LD_INT 5
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 4
35396: PUSH
35397: LD_INT 5
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 6
35406: PUSH
35407: LD_INT 5
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 6
35416: PUSH
35417: LD_INT 6
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 5
35426: PUSH
35427: LD_INT 6
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
35448: LD_ADDR_VAR 0 32
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: LD_INT 3
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 0
35465: PUSH
35466: LD_INT 3
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 1
35475: NEG
35476: PUSH
35477: LD_INT 2
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 1
35486: PUSH
35487: LD_INT 4
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 0
35496: PUSH
35497: LD_INT 4
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 1
35506: NEG
35507: PUSH
35508: LD_INT 3
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: LD_INT 5
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 0
35527: PUSH
35528: LD_INT 5
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 1
35537: NEG
35538: PUSH
35539: LD_INT 4
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: LD_INT 6
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: LD_INT 6
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: NEG
35569: PUSH
35570: LD_INT 5
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35591: LD_ADDR_VAR 0 33
35595: PUSH
35596: LD_INT 2
35598: NEG
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 3
35609: NEG
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 3
35620: NEG
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 3
35632: NEG
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 4
35643: NEG
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 4
35654: NEG
35655: PUSH
35656: LD_INT 1
35658: NEG
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 4
35666: NEG
35667: PUSH
35668: LD_INT 1
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 5
35677: NEG
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 5
35688: NEG
35689: PUSH
35690: LD_INT 1
35692: NEG
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 5
35700: NEG
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 6
35711: NEG
35712: PUSH
35713: LD_INT 0
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 6
35722: NEG
35723: PUSH
35724: LD_INT 1
35726: NEG
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
35746: LD_ADDR_VAR 0 34
35750: PUSH
35751: LD_INT 2
35753: NEG
35754: PUSH
35755: LD_INT 3
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 3
35765: NEG
35766: PUSH
35767: LD_INT 2
35769: NEG
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 3
35777: NEG
35778: PUSH
35779: LD_INT 3
35781: NEG
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 3
35789: NEG
35790: PUSH
35791: LD_INT 4
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 4
35801: NEG
35802: PUSH
35803: LD_INT 3
35805: NEG
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 4
35813: NEG
35814: PUSH
35815: LD_INT 4
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 4
35825: NEG
35826: PUSH
35827: LD_INT 5
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 5
35837: NEG
35838: PUSH
35839: LD_INT 4
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 5
35849: NEG
35850: PUSH
35851: LD_INT 5
35853: NEG
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 5
35861: NEG
35862: PUSH
35863: LD_INT 6
35865: NEG
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 6
35873: NEG
35874: PUSH
35875: LD_INT 5
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 6
35885: NEG
35886: PUSH
35887: LD_INT 6
35889: NEG
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35909: LD_ADDR_VAR 0 41
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: LD_INT 2
35919: NEG
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: PUSH
35929: LD_INT 3
35931: NEG
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: LD_INT 2
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: LIST
35952: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35953: LD_ADDR_VAR 0 42
35957: PUSH
35958: LD_INT 2
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 2
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 3
35981: PUSH
35982: LD_INT 1
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35994: LD_ADDR_VAR 0 43
35998: PUSH
35999: LD_INT 2
36001: PUSH
36002: LD_INT 2
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 3
36011: PUSH
36012: LD_INT 2
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 2
36021: PUSH
36022: LD_INT 3
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36034: LD_ADDR_VAR 0 44
36038: PUSH
36039: LD_INT 0
36041: PUSH
36042: LD_INT 2
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: LD_INT 3
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: LD_INT 2
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: LIST
36074: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36075: LD_ADDR_VAR 0 45
36079: PUSH
36080: LD_INT 2
36082: NEG
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 2
36093: NEG
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 3
36104: NEG
36105: PUSH
36106: LD_INT 1
36108: NEG
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: LIST
36118: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36119: LD_ADDR_VAR 0 46
36123: PUSH
36124: LD_INT 2
36126: NEG
36127: PUSH
36128: LD_INT 2
36130: NEG
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 2
36138: NEG
36139: PUSH
36140: LD_INT 3
36142: NEG
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 3
36150: NEG
36151: PUSH
36152: LD_INT 2
36154: NEG
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: LIST
36164: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36165: LD_ADDR_VAR 0 47
36169: PUSH
36170: LD_INT 2
36172: NEG
36173: PUSH
36174: LD_INT 3
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 1
36184: NEG
36185: PUSH
36186: LD_INT 3
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36198: LD_ADDR_VAR 0 48
36202: PUSH
36203: LD_INT 1
36205: PUSH
36206: LD_INT 2
36208: NEG
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 2
36216: PUSH
36217: LD_INT 1
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36229: LD_ADDR_VAR 0 49
36233: PUSH
36234: LD_INT 3
36236: PUSH
36237: LD_INT 1
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 3
36246: PUSH
36247: LD_INT 2
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
36258: LD_ADDR_VAR 0 50
36262: PUSH
36263: LD_INT 2
36265: PUSH
36266: LD_INT 3
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: LD_INT 3
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36287: LD_ADDR_VAR 0 51
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: LD_INT 2
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 2
36305: NEG
36306: PUSH
36307: LD_INT 1
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36318: LD_ADDR_VAR 0 52
36322: PUSH
36323: LD_INT 3
36325: NEG
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 3
36337: NEG
36338: PUSH
36339: LD_INT 2
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36351: LD_ADDR_VAR 0 53
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: LD_INT 3
36362: NEG
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: LD_INT 3
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 1
36381: PUSH
36382: LD_INT 2
36384: NEG
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: LIST
36394: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36395: LD_ADDR_VAR 0 54
36399: PUSH
36400: LD_INT 2
36402: PUSH
36403: LD_INT 1
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 3
36413: PUSH
36414: LD_INT 0
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 3
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: LIST
36435: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36436: LD_ADDR_VAR 0 55
36440: PUSH
36441: LD_INT 3
36443: PUSH
36444: LD_INT 2
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 3
36453: PUSH
36454: LD_INT 3
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 2
36463: PUSH
36464: LD_INT 3
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: LIST
36475: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36476: LD_ADDR_VAR 0 56
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: LD_INT 3
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: LD_INT 3
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: LD_INT 2
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36517: LD_ADDR_VAR 0 57
36521: PUSH
36522: LD_INT 2
36524: NEG
36525: PUSH
36526: LD_INT 1
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 3
36535: NEG
36536: PUSH
36537: LD_INT 0
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 3
36546: NEG
36547: PUSH
36548: LD_INT 1
36550: NEG
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: LIST
36560: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36561: LD_ADDR_VAR 0 58
36565: PUSH
36566: LD_INT 2
36568: NEG
36569: PUSH
36570: LD_INT 3
36572: NEG
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 3
36580: NEG
36581: PUSH
36582: LD_INT 2
36584: NEG
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 3
36592: NEG
36593: PUSH
36594: LD_INT 3
36596: NEG
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: LIST
36606: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36607: LD_ADDR_VAR 0 59
36611: PUSH
36612: LD_INT 1
36614: NEG
36615: PUSH
36616: LD_INT 2
36618: NEG
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 0
36626: PUSH
36627: LD_INT 2
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: PUSH
36638: LD_INT 1
36640: NEG
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: LIST
36650: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36651: LD_ADDR_VAR 0 60
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 2
36669: PUSH
36670: LD_INT 0
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 2
36679: PUSH
36680: LD_INT 1
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: LIST
36691: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36692: LD_ADDR_VAR 0 61
36696: PUSH
36697: LD_INT 2
36699: PUSH
36700: LD_INT 1
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 2
36709: PUSH
36710: LD_INT 2
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: LD_INT 2
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: LIST
36731: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36732: LD_ADDR_VAR 0 62
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: LD_INT 2
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: LD_INT 2
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: LD_INT 1
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36773: LD_ADDR_VAR 0 63
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 2
36791: NEG
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 2
36802: NEG
36803: PUSH
36804: LD_INT 1
36806: NEG
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36817: LD_ADDR_VAR 0 64
36821: PUSH
36822: LD_INT 1
36824: NEG
36825: PUSH
36826: LD_INT 2
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 2
36836: NEG
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 2
36848: NEG
36849: PUSH
36850: LD_INT 2
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: LIST
36862: ST_TO_ADDR
// end ; 2 :
36863: GO 40129
36865: LD_INT 2
36867: DOUBLE
36868: EQUAL
36869: IFTRUE 36873
36871: GO 40128
36873: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36874: LD_ADDR_VAR 0 29
36878: PUSH
36879: LD_INT 4
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 4
36891: PUSH
36892: LD_INT 1
36894: NEG
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 5
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 5
36912: PUSH
36913: LD_INT 1
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 4
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 3
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 3
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 3
36953: PUSH
36954: LD_INT 2
36956: NEG
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 5
36964: PUSH
36965: LD_INT 2
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 3
36974: PUSH
36975: LD_INT 3
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 3
36984: PUSH
36985: LD_INT 2
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 4
36994: PUSH
36995: LD_INT 3
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 4
37004: PUSH
37005: LD_INT 4
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 3
37014: PUSH
37015: LD_INT 4
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 2
37024: PUSH
37025: LD_INT 3
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 2
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 4
37044: PUSH
37045: LD_INT 2
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 2
37054: PUSH
37055: LD_INT 4
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: LD_INT 4
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: LD_INT 3
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 1
37084: PUSH
37085: LD_INT 4
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: LD_INT 5
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: LD_INT 5
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 1
37114: NEG
37115: PUSH
37116: LD_INT 4
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 1
37125: NEG
37126: PUSH
37127: LD_INT 3
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: LD_INT 5
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 2
37146: NEG
37147: PUSH
37148: LD_INT 3
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 3
37157: NEG
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 3
37168: NEG
37169: PUSH
37170: LD_INT 1
37172: NEG
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 2
37180: NEG
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 2
37191: NEG
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 3
37202: NEG
37203: PUSH
37204: LD_INT 1
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 4
37213: NEG
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 4
37224: NEG
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 4
37236: NEG
37237: PUSH
37238: LD_INT 2
37240: NEG
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 2
37248: NEG
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 4
37259: NEG
37260: PUSH
37261: LD_INT 4
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 4
37271: NEG
37272: PUSH
37273: LD_INT 5
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 3
37283: NEG
37284: PUSH
37285: LD_INT 4
37287: NEG
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 3
37295: NEG
37296: PUSH
37297: LD_INT 3
37299: NEG
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 4
37307: NEG
37308: PUSH
37309: LD_INT 3
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 5
37319: NEG
37320: PUSH
37321: LD_INT 4
37323: NEG
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 5
37331: NEG
37332: PUSH
37333: LD_INT 5
37335: NEG
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 3
37343: NEG
37344: PUSH
37345: LD_INT 5
37347: NEG
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 5
37355: NEG
37356: PUSH
37357: LD_INT 3
37359: NEG
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37412: LD_ADDR_VAR 0 30
37416: PUSH
37417: LD_INT 4
37419: PUSH
37420: LD_INT 4
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 4
37429: PUSH
37430: LD_INT 3
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 5
37439: PUSH
37440: LD_INT 4
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 5
37449: PUSH
37450: LD_INT 5
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 4
37459: PUSH
37460: LD_INT 5
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 3
37469: PUSH
37470: LD_INT 4
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 3
37479: PUSH
37480: LD_INT 3
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 5
37489: PUSH
37490: LD_INT 3
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 3
37499: PUSH
37500: LD_INT 5
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 0
37509: PUSH
37510: LD_INT 3
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: LD_INT 2
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: LD_INT 3
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: LD_INT 4
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: LD_INT 4
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: PUSH
37561: LD_INT 3
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: NEG
37571: PUSH
37572: LD_INT 2
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 2
37581: PUSH
37582: LD_INT 4
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 2
37591: NEG
37592: PUSH
37593: LD_INT 2
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 4
37602: NEG
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 4
37613: NEG
37614: PUSH
37615: LD_INT 1
37617: NEG
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 3
37625: NEG
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 3
37636: NEG
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 4
37647: NEG
37648: PUSH
37649: LD_INT 1
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 5
37658: NEG
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 5
37669: NEG
37670: PUSH
37671: LD_INT 1
37673: NEG
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 5
37681: NEG
37682: PUSH
37683: LD_INT 2
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 3
37693: NEG
37694: PUSH
37695: LD_INT 2
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 3
37704: NEG
37705: PUSH
37706: LD_INT 3
37708: NEG
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 3
37716: NEG
37717: PUSH
37718: LD_INT 4
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 2
37728: NEG
37729: PUSH
37730: LD_INT 3
37732: NEG
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 2
37740: NEG
37741: PUSH
37742: LD_INT 2
37744: NEG
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 3
37752: NEG
37753: PUSH
37754: LD_INT 2
37756: NEG
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 4
37764: NEG
37765: PUSH
37766: LD_INT 3
37768: NEG
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 4
37776: NEG
37777: PUSH
37778: LD_INT 4
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: LD_INT 4
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 4
37800: NEG
37801: PUSH
37802: LD_INT 2
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: LD_INT 4
37815: NEG
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 0
37823: PUSH
37824: LD_INT 5
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: LD_INT 4
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: LD_INT 3
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: LD_INT 3
37859: NEG
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 1
37867: NEG
37868: PUSH
37869: LD_INT 4
37871: NEG
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: NEG
37880: PUSH
37881: LD_INT 5
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 2
37891: PUSH
37892: LD_INT 3
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 2
37902: NEG
37903: PUSH
37904: LD_INT 5
37906: NEG
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37959: LD_ADDR_VAR 0 31
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: LD_INT 4
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: LD_INT 3
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: LD_INT 4
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 1
37996: PUSH
37997: LD_INT 5
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: LD_INT 5
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: LD_INT 4
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 1
38027: NEG
38028: PUSH
38029: LD_INT 3
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: LD_INT 5
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 2
38048: NEG
38049: PUSH
38050: LD_INT 3
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 3
38059: NEG
38060: PUSH
38061: LD_INT 0
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 3
38070: NEG
38071: PUSH
38072: LD_INT 1
38074: NEG
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 2
38082: NEG
38083: PUSH
38084: LD_INT 0
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 2
38093: NEG
38094: PUSH
38095: LD_INT 1
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 3
38104: NEG
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 4
38115: NEG
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 4
38126: NEG
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 4
38138: NEG
38139: PUSH
38140: LD_INT 2
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 2
38150: NEG
38151: PUSH
38152: LD_INT 2
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 4
38161: NEG
38162: PUSH
38163: LD_INT 4
38165: NEG
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 4
38173: NEG
38174: PUSH
38175: LD_INT 5
38177: NEG
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 3
38185: NEG
38186: PUSH
38187: LD_INT 4
38189: NEG
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 3
38197: NEG
38198: PUSH
38199: LD_INT 3
38201: NEG
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 4
38209: NEG
38210: PUSH
38211: LD_INT 3
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 5
38221: NEG
38222: PUSH
38223: LD_INT 4
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 5
38233: NEG
38234: PUSH
38235: LD_INT 5
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 3
38245: NEG
38246: PUSH
38247: LD_INT 5
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 5
38257: NEG
38258: PUSH
38259: LD_INT 3
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: LD_INT 3
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: LD_INT 4
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: PUSH
38292: LD_INT 3
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 1
38302: PUSH
38303: LD_INT 2
38305: NEG
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 0
38313: PUSH
38314: LD_INT 2
38316: NEG
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: NEG
38325: PUSH
38326: LD_INT 3
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: LD_INT 4
38340: NEG
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 2
38348: PUSH
38349: LD_INT 2
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 2
38359: NEG
38360: PUSH
38361: LD_INT 4
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 4
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 4
38381: PUSH
38382: LD_INT 1
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 5
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 5
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 4
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 3
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 3
38432: PUSH
38433: LD_INT 1
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 3
38443: PUSH
38444: LD_INT 2
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 5
38454: PUSH
38455: LD_INT 2
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
38509: LD_ADDR_VAR 0 32
38513: PUSH
38514: LD_INT 4
38516: NEG
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 4
38527: NEG
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 3
38539: NEG
38540: PUSH
38541: LD_INT 0
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 3
38550: NEG
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 4
38561: NEG
38562: PUSH
38563: LD_INT 1
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 5
38572: NEG
38573: PUSH
38574: LD_INT 0
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 5
38583: NEG
38584: PUSH
38585: LD_INT 1
38587: NEG
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 5
38595: NEG
38596: PUSH
38597: LD_INT 2
38599: NEG
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 3
38607: NEG
38608: PUSH
38609: LD_INT 2
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 3
38618: NEG
38619: PUSH
38620: LD_INT 3
38622: NEG
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 3
38630: NEG
38631: PUSH
38632: LD_INT 4
38634: NEG
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 2
38642: NEG
38643: PUSH
38644: LD_INT 3
38646: NEG
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 2
38654: NEG
38655: PUSH
38656: LD_INT 2
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 3
38666: NEG
38667: PUSH
38668: LD_INT 2
38670: NEG
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 4
38678: NEG
38679: PUSH
38680: LD_INT 3
38682: NEG
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 4
38690: NEG
38691: PUSH
38692: LD_INT 4
38694: NEG
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 2
38702: NEG
38703: PUSH
38704: LD_INT 4
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 4
38714: NEG
38715: PUSH
38716: LD_INT 2
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: LD_INT 4
38729: NEG
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: LD_INT 5
38740: NEG
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: LD_INT 4
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: PUSH
38760: LD_INT 3
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: LD_INT 3
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: LD_INT 4
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: LD_INT 5
38797: NEG
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 2
38805: PUSH
38806: LD_INT 3
38808: NEG
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 2
38816: NEG
38817: PUSH
38818: LD_INT 5
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 3
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 3
38838: PUSH
38839: LD_INT 1
38841: NEG
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 4
38849: PUSH
38850: LD_INT 0
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 4
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 3
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 2
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 2
38900: PUSH
38901: LD_INT 2
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 4
38911: PUSH
38912: LD_INT 2
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 4
38921: PUSH
38922: LD_INT 4
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 4
38931: PUSH
38932: LD_INT 3
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 5
38941: PUSH
38942: LD_INT 4
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 5
38951: PUSH
38952: LD_INT 5
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 4
38961: PUSH
38962: LD_INT 5
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 3
38971: PUSH
38972: LD_INT 4
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 3
38981: PUSH
38982: LD_INT 3
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 5
38991: PUSH
38992: LD_INT 3
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 3
39001: PUSH
39002: LD_INT 5
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39056: LD_ADDR_VAR 0 33
39060: PUSH
39061: LD_INT 4
39063: NEG
39064: PUSH
39065: LD_INT 4
39067: NEG
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 4
39075: NEG
39076: PUSH
39077: LD_INT 5
39079: NEG
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 3
39087: NEG
39088: PUSH
39089: LD_INT 4
39091: NEG
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 3
39099: NEG
39100: PUSH
39101: LD_INT 3
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 4
39111: NEG
39112: PUSH
39113: LD_INT 3
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 5
39123: NEG
39124: PUSH
39125: LD_INT 4
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 5
39135: NEG
39136: PUSH
39137: LD_INT 5
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 3
39147: NEG
39148: PUSH
39149: LD_INT 5
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 5
39159: NEG
39160: PUSH
39161: LD_INT 3
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: LD_INT 3
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: LD_INT 4
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 1
39193: PUSH
39194: LD_INT 3
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 1
39204: PUSH
39205: LD_INT 2
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: LD_INT 2
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: NEG
39227: PUSH
39228: LD_INT 3
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 1
39238: NEG
39239: PUSH
39240: LD_INT 4
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 2
39250: PUSH
39251: LD_INT 2
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 2
39261: NEG
39262: PUSH
39263: LD_INT 4
39265: NEG
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 4
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 4
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 5
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 5
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 4
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 3
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 3
39334: PUSH
39335: LD_INT 1
39337: NEG
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 3
39345: PUSH
39346: LD_INT 2
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 5
39356: PUSH
39357: LD_INT 2
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 3
39366: PUSH
39367: LD_INT 3
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 3
39376: PUSH
39377: LD_INT 2
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 4
39386: PUSH
39387: LD_INT 3
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 4
39396: PUSH
39397: LD_INT 4
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 3
39406: PUSH
39407: LD_INT 4
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: PUSH
39417: LD_INT 3
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: LD_INT 2
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 4
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 2
39446: PUSH
39447: LD_INT 4
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: LD_INT 4
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: LD_INT 3
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 1
39476: PUSH
39477: LD_INT 4
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: PUSH
39487: LD_INT 5
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: LD_INT 5
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: LD_INT 4
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: NEG
39518: PUSH
39519: LD_INT 3
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 2
39528: PUSH
39529: LD_INT 5
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 2
39538: NEG
39539: PUSH
39540: LD_INT 3
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39594: LD_ADDR_VAR 0 34
39598: PUSH
39599: LD_INT 0
39601: PUSH
39602: LD_INT 4
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: LD_INT 5
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: PUSH
39624: LD_INT 4
39626: NEG
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: LD_INT 3
39637: NEG
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: LD_INT 3
39648: NEG
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 1
39656: NEG
39657: PUSH
39658: LD_INT 4
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: PUSH
39670: LD_INT 5
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 2
39680: PUSH
39681: LD_INT 3
39683: NEG
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 2
39691: NEG
39692: PUSH
39693: LD_INT 5
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 3
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 3
39713: PUSH
39714: LD_INT 1
39716: NEG
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 4
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 4
39734: PUSH
39735: LD_INT 1
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 3
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 2
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 2
39775: PUSH
39776: LD_INT 2
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 4
39786: PUSH
39787: LD_INT 2
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 4
39796: PUSH
39797: LD_INT 4
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 4
39806: PUSH
39807: LD_INT 3
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 5
39816: PUSH
39817: LD_INT 4
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 5
39826: PUSH
39827: LD_INT 5
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 4
39836: PUSH
39837: LD_INT 5
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 3
39846: PUSH
39847: LD_INT 4
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 3
39856: PUSH
39857: LD_INT 3
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 5
39866: PUSH
39867: LD_INT 3
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 3
39876: PUSH
39877: LD_INT 5
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: LD_INT 3
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: LD_INT 2
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: PUSH
39907: LD_INT 3
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: LD_INT 4
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: LD_INT 4
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: LD_INT 3
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 2
39958: PUSH
39959: LD_INT 4
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 2
39968: NEG
39969: PUSH
39970: LD_INT 2
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 4
39979: NEG
39980: PUSH
39981: LD_INT 0
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 4
39990: NEG
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 3
40002: NEG
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 3
40013: NEG
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 4
40024: NEG
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 5
40035: NEG
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 5
40046: NEG
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 5
40058: NEG
40059: PUSH
40060: LD_INT 2
40062: NEG
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 3
40070: NEG
40071: PUSH
40072: LD_INT 2
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: ST_TO_ADDR
// end ; end ;
40126: GO 40129
40128: POP
// case btype of b_depot , b_warehouse :
40129: LD_VAR 0 1
40133: PUSH
40134: LD_INT 0
40136: DOUBLE
40137: EQUAL
40138: IFTRUE 40148
40140: LD_INT 1
40142: DOUBLE
40143: EQUAL
40144: IFTRUE 40148
40146: GO 40349
40148: POP
// case nation of nation_american :
40149: LD_VAR 0 5
40153: PUSH
40154: LD_INT 1
40156: DOUBLE
40157: EQUAL
40158: IFTRUE 40162
40160: GO 40218
40162: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40163: LD_ADDR_VAR 0 9
40167: PUSH
40168: LD_VAR 0 11
40172: PUSH
40173: LD_VAR 0 12
40177: PUSH
40178: LD_VAR 0 13
40182: PUSH
40183: LD_VAR 0 14
40187: PUSH
40188: LD_VAR 0 15
40192: PUSH
40193: LD_VAR 0 16
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: PUSH
40206: LD_VAR 0 4
40210: PUSH
40211: LD_INT 1
40213: PLUS
40214: ARRAY
40215: ST_TO_ADDR
40216: GO 40347
40218: LD_INT 2
40220: DOUBLE
40221: EQUAL
40222: IFTRUE 40226
40224: GO 40282
40226: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
40227: LD_ADDR_VAR 0 9
40231: PUSH
40232: LD_VAR 0 17
40236: PUSH
40237: LD_VAR 0 18
40241: PUSH
40242: LD_VAR 0 19
40246: PUSH
40247: LD_VAR 0 20
40251: PUSH
40252: LD_VAR 0 21
40256: PUSH
40257: LD_VAR 0 22
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: PUSH
40270: LD_VAR 0 4
40274: PUSH
40275: LD_INT 1
40277: PLUS
40278: ARRAY
40279: ST_TO_ADDR
40280: GO 40347
40282: LD_INT 3
40284: DOUBLE
40285: EQUAL
40286: IFTRUE 40290
40288: GO 40346
40290: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
40291: LD_ADDR_VAR 0 9
40295: PUSH
40296: LD_VAR 0 23
40300: PUSH
40301: LD_VAR 0 24
40305: PUSH
40306: LD_VAR 0 25
40310: PUSH
40311: LD_VAR 0 26
40315: PUSH
40316: LD_VAR 0 27
40320: PUSH
40321: LD_VAR 0 28
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: PUSH
40334: LD_VAR 0 4
40338: PUSH
40339: LD_INT 1
40341: PLUS
40342: ARRAY
40343: ST_TO_ADDR
40344: GO 40347
40346: POP
40347: GO 40902
40349: LD_INT 2
40351: DOUBLE
40352: EQUAL
40353: IFTRUE 40363
40355: LD_INT 3
40357: DOUBLE
40358: EQUAL
40359: IFTRUE 40363
40361: GO 40419
40363: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
40364: LD_ADDR_VAR 0 9
40368: PUSH
40369: LD_VAR 0 29
40373: PUSH
40374: LD_VAR 0 30
40378: PUSH
40379: LD_VAR 0 31
40383: PUSH
40384: LD_VAR 0 32
40388: PUSH
40389: LD_VAR 0 33
40393: PUSH
40394: LD_VAR 0 34
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: PUSH
40407: LD_VAR 0 4
40411: PUSH
40412: LD_INT 1
40414: PLUS
40415: ARRAY
40416: ST_TO_ADDR
40417: GO 40902
40419: LD_INT 16
40421: DOUBLE
40422: EQUAL
40423: IFTRUE 40481
40425: LD_INT 17
40427: DOUBLE
40428: EQUAL
40429: IFTRUE 40481
40431: LD_INT 18
40433: DOUBLE
40434: EQUAL
40435: IFTRUE 40481
40437: LD_INT 19
40439: DOUBLE
40440: EQUAL
40441: IFTRUE 40481
40443: LD_INT 22
40445: DOUBLE
40446: EQUAL
40447: IFTRUE 40481
40449: LD_INT 20
40451: DOUBLE
40452: EQUAL
40453: IFTRUE 40481
40455: LD_INT 21
40457: DOUBLE
40458: EQUAL
40459: IFTRUE 40481
40461: LD_INT 23
40463: DOUBLE
40464: EQUAL
40465: IFTRUE 40481
40467: LD_INT 24
40469: DOUBLE
40470: EQUAL
40471: IFTRUE 40481
40473: LD_INT 25
40475: DOUBLE
40476: EQUAL
40477: IFTRUE 40481
40479: GO 40537
40481: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
40482: LD_ADDR_VAR 0 9
40486: PUSH
40487: LD_VAR 0 35
40491: PUSH
40492: LD_VAR 0 36
40496: PUSH
40497: LD_VAR 0 37
40501: PUSH
40502: LD_VAR 0 38
40506: PUSH
40507: LD_VAR 0 39
40511: PUSH
40512: LD_VAR 0 40
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: PUSH
40525: LD_VAR 0 4
40529: PUSH
40530: LD_INT 1
40532: PLUS
40533: ARRAY
40534: ST_TO_ADDR
40535: GO 40902
40537: LD_INT 6
40539: DOUBLE
40540: EQUAL
40541: IFTRUE 40593
40543: LD_INT 7
40545: DOUBLE
40546: EQUAL
40547: IFTRUE 40593
40549: LD_INT 8
40551: DOUBLE
40552: EQUAL
40553: IFTRUE 40593
40555: LD_INT 13
40557: DOUBLE
40558: EQUAL
40559: IFTRUE 40593
40561: LD_INT 12
40563: DOUBLE
40564: EQUAL
40565: IFTRUE 40593
40567: LD_INT 15
40569: DOUBLE
40570: EQUAL
40571: IFTRUE 40593
40573: LD_INT 11
40575: DOUBLE
40576: EQUAL
40577: IFTRUE 40593
40579: LD_INT 14
40581: DOUBLE
40582: EQUAL
40583: IFTRUE 40593
40585: LD_INT 10
40587: DOUBLE
40588: EQUAL
40589: IFTRUE 40593
40591: GO 40649
40593: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40594: LD_ADDR_VAR 0 9
40598: PUSH
40599: LD_VAR 0 41
40603: PUSH
40604: LD_VAR 0 42
40608: PUSH
40609: LD_VAR 0 43
40613: PUSH
40614: LD_VAR 0 44
40618: PUSH
40619: LD_VAR 0 45
40623: PUSH
40624: LD_VAR 0 46
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: PUSH
40637: LD_VAR 0 4
40641: PUSH
40642: LD_INT 1
40644: PLUS
40645: ARRAY
40646: ST_TO_ADDR
40647: GO 40902
40649: LD_INT 36
40651: DOUBLE
40652: EQUAL
40653: IFTRUE 40657
40655: GO 40713
40657: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40658: LD_ADDR_VAR 0 9
40662: PUSH
40663: LD_VAR 0 47
40667: PUSH
40668: LD_VAR 0 48
40672: PUSH
40673: LD_VAR 0 49
40677: PUSH
40678: LD_VAR 0 50
40682: PUSH
40683: LD_VAR 0 51
40687: PUSH
40688: LD_VAR 0 52
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: PUSH
40701: LD_VAR 0 4
40705: PUSH
40706: LD_INT 1
40708: PLUS
40709: ARRAY
40710: ST_TO_ADDR
40711: GO 40902
40713: LD_INT 4
40715: DOUBLE
40716: EQUAL
40717: IFTRUE 40739
40719: LD_INT 5
40721: DOUBLE
40722: EQUAL
40723: IFTRUE 40739
40725: LD_INT 34
40727: DOUBLE
40728: EQUAL
40729: IFTRUE 40739
40731: LD_INT 37
40733: DOUBLE
40734: EQUAL
40735: IFTRUE 40739
40737: GO 40795
40739: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
40740: LD_ADDR_VAR 0 9
40744: PUSH
40745: LD_VAR 0 53
40749: PUSH
40750: LD_VAR 0 54
40754: PUSH
40755: LD_VAR 0 55
40759: PUSH
40760: LD_VAR 0 56
40764: PUSH
40765: LD_VAR 0 57
40769: PUSH
40770: LD_VAR 0 58
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: PUSH
40783: LD_VAR 0 4
40787: PUSH
40788: LD_INT 1
40790: PLUS
40791: ARRAY
40792: ST_TO_ADDR
40793: GO 40902
40795: LD_INT 31
40797: DOUBLE
40798: EQUAL
40799: IFTRUE 40845
40801: LD_INT 32
40803: DOUBLE
40804: EQUAL
40805: IFTRUE 40845
40807: LD_INT 33
40809: DOUBLE
40810: EQUAL
40811: IFTRUE 40845
40813: LD_INT 27
40815: DOUBLE
40816: EQUAL
40817: IFTRUE 40845
40819: LD_INT 26
40821: DOUBLE
40822: EQUAL
40823: IFTRUE 40845
40825: LD_INT 28
40827: DOUBLE
40828: EQUAL
40829: IFTRUE 40845
40831: LD_INT 29
40833: DOUBLE
40834: EQUAL
40835: IFTRUE 40845
40837: LD_INT 30
40839: DOUBLE
40840: EQUAL
40841: IFTRUE 40845
40843: GO 40901
40845: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40846: LD_ADDR_VAR 0 9
40850: PUSH
40851: LD_VAR 0 59
40855: PUSH
40856: LD_VAR 0 60
40860: PUSH
40861: LD_VAR 0 61
40865: PUSH
40866: LD_VAR 0 62
40870: PUSH
40871: LD_VAR 0 63
40875: PUSH
40876: LD_VAR 0 64
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: PUSH
40889: LD_VAR 0 4
40893: PUSH
40894: LD_INT 1
40896: PLUS
40897: ARRAY
40898: ST_TO_ADDR
40899: GO 40902
40901: POP
// temp_list2 = [ ] ;
40902: LD_ADDR_VAR 0 10
40906: PUSH
40907: EMPTY
40908: ST_TO_ADDR
// for i in temp_list do
40909: LD_ADDR_VAR 0 8
40913: PUSH
40914: LD_VAR 0 9
40918: PUSH
40919: FOR_IN
40920: IFFALSE 40972
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40922: LD_ADDR_VAR 0 10
40926: PUSH
40927: LD_VAR 0 10
40931: PUSH
40932: LD_VAR 0 8
40936: PUSH
40937: LD_INT 1
40939: ARRAY
40940: PUSH
40941: LD_VAR 0 2
40945: PLUS
40946: PUSH
40947: LD_VAR 0 8
40951: PUSH
40952: LD_INT 2
40954: ARRAY
40955: PUSH
40956: LD_VAR 0 3
40960: PLUS
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: EMPTY
40967: LIST
40968: ADD
40969: ST_TO_ADDR
40970: GO 40919
40972: POP
40973: POP
// result = temp_list2 ;
40974: LD_ADDR_VAR 0 7
40978: PUSH
40979: LD_VAR 0 10
40983: ST_TO_ADDR
// end ;
40984: LD_VAR 0 7
40988: RET
// export function EnemyInRange ( unit , dist ) ; begin
40989: LD_INT 0
40991: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40992: LD_ADDR_VAR 0 3
40996: PUSH
40997: LD_VAR 0 1
41001: PPUSH
41002: CALL_OW 255
41006: PPUSH
41007: LD_VAR 0 1
41011: PPUSH
41012: CALL_OW 250
41016: PPUSH
41017: LD_VAR 0 1
41021: PPUSH
41022: CALL_OW 251
41026: PPUSH
41027: LD_VAR 0 2
41031: PPUSH
41032: CALL 14391 0 4
41036: PUSH
41037: LD_INT 4
41039: ARRAY
41040: ST_TO_ADDR
// end ;
41041: LD_VAR 0 3
41045: RET
// export function PlayerSeeMe ( unit ) ; begin
41046: LD_INT 0
41048: PPUSH
// result := See ( your_side , unit ) ;
41049: LD_ADDR_VAR 0 2
41053: PUSH
41054: LD_OWVAR 2
41058: PPUSH
41059: LD_VAR 0 1
41063: PPUSH
41064: CALL_OW 292
41068: ST_TO_ADDR
// end ;
41069: LD_VAR 0 2
41073: RET
// export function ReverseDir ( unit ) ; begin
41074: LD_INT 0
41076: PPUSH
// if not unit then
41077: LD_VAR 0 1
41081: NOT
41082: IFFALSE 41086
// exit ;
41084: GO 41109
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41086: LD_ADDR_VAR 0 2
41090: PUSH
41091: LD_VAR 0 1
41095: PPUSH
41096: CALL_OW 254
41100: PUSH
41101: LD_INT 3
41103: PLUS
41104: PUSH
41105: LD_INT 6
41107: MOD
41108: ST_TO_ADDR
// end ;
41109: LD_VAR 0 2
41113: RET
// export function ReverseArray ( array ) ; var i ; begin
41114: LD_INT 0
41116: PPUSH
41117: PPUSH
// if not array then
41118: LD_VAR 0 1
41122: NOT
41123: IFFALSE 41127
// exit ;
41125: GO 41182
// result := [ ] ;
41127: LD_ADDR_VAR 0 2
41131: PUSH
41132: EMPTY
41133: ST_TO_ADDR
// for i := array downto 1 do
41134: LD_ADDR_VAR 0 3
41138: PUSH
41139: DOUBLE
41140: LD_VAR 0 1
41144: INC
41145: ST_TO_ADDR
41146: LD_INT 1
41148: PUSH
41149: FOR_DOWNTO
41150: IFFALSE 41180
// result := Join ( result , array [ i ] ) ;
41152: LD_ADDR_VAR 0 2
41156: PUSH
41157: LD_VAR 0 2
41161: PPUSH
41162: LD_VAR 0 1
41166: PUSH
41167: LD_VAR 0 3
41171: ARRAY
41172: PPUSH
41173: CALL 45825 0 2
41177: ST_TO_ADDR
41178: GO 41149
41180: POP
41181: POP
// end ;
41182: LD_VAR 0 2
41186: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
41187: LD_INT 0
41189: PPUSH
41190: PPUSH
41191: PPUSH
41192: PPUSH
41193: PPUSH
41194: PPUSH
// if not unit or not hexes then
41195: LD_VAR 0 1
41199: NOT
41200: PUSH
41201: LD_VAR 0 2
41205: NOT
41206: OR
41207: IFFALSE 41211
// exit ;
41209: GO 41334
// dist := 9999 ;
41211: LD_ADDR_VAR 0 5
41215: PUSH
41216: LD_INT 9999
41218: ST_TO_ADDR
// for i = 1 to hexes do
41219: LD_ADDR_VAR 0 4
41223: PUSH
41224: DOUBLE
41225: LD_INT 1
41227: DEC
41228: ST_TO_ADDR
41229: LD_VAR 0 2
41233: PUSH
41234: FOR_TO
41235: IFFALSE 41322
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41237: LD_ADDR_VAR 0 6
41241: PUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: LD_VAR 0 2
41251: PUSH
41252: LD_VAR 0 4
41256: ARRAY
41257: PUSH
41258: LD_INT 1
41260: ARRAY
41261: PPUSH
41262: LD_VAR 0 2
41266: PUSH
41267: LD_VAR 0 4
41271: ARRAY
41272: PUSH
41273: LD_INT 2
41275: ARRAY
41276: PPUSH
41277: CALL_OW 297
41281: ST_TO_ADDR
// if tdist < dist then
41282: LD_VAR 0 6
41286: PUSH
41287: LD_VAR 0 5
41291: LESS
41292: IFFALSE 41320
// begin hex := hexes [ i ] ;
41294: LD_ADDR_VAR 0 8
41298: PUSH
41299: LD_VAR 0 2
41303: PUSH
41304: LD_VAR 0 4
41308: ARRAY
41309: ST_TO_ADDR
// dist := tdist ;
41310: LD_ADDR_VAR 0 5
41314: PUSH
41315: LD_VAR 0 6
41319: ST_TO_ADDR
// end ; end ;
41320: GO 41234
41322: POP
41323: POP
// result := hex ;
41324: LD_ADDR_VAR 0 3
41328: PUSH
41329: LD_VAR 0 8
41333: ST_TO_ADDR
// end ;
41334: LD_VAR 0 3
41338: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
41339: LD_INT 0
41341: PPUSH
41342: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
41343: LD_VAR 0 1
41347: NOT
41348: PUSH
41349: LD_VAR 0 1
41353: PUSH
41354: LD_INT 21
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 23
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PPUSH
41378: CALL_OW 69
41382: IN
41383: NOT
41384: OR
41385: IFFALSE 41389
// exit ;
41387: GO 41436
// for i = 1 to 3 do
41389: LD_ADDR_VAR 0 3
41393: PUSH
41394: DOUBLE
41395: LD_INT 1
41397: DEC
41398: ST_TO_ADDR
41399: LD_INT 3
41401: PUSH
41402: FOR_TO
41403: IFFALSE 41434
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
41405: LD_VAR 0 1
41409: PPUSH
41410: CALL_OW 250
41414: PPUSH
41415: LD_VAR 0 1
41419: PPUSH
41420: CALL_OW 251
41424: PPUSH
41425: LD_INT 1
41427: PPUSH
41428: CALL_OW 453
41432: GO 41402
41434: POP
41435: POP
// end ;
41436: LD_VAR 0 2
41440: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
41441: LD_INT 0
41443: PPUSH
41444: PPUSH
41445: PPUSH
41446: PPUSH
41447: PPUSH
41448: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
41449: LD_VAR 0 1
41453: NOT
41454: PUSH
41455: LD_VAR 0 2
41459: NOT
41460: OR
41461: PUSH
41462: LD_VAR 0 1
41466: PPUSH
41467: CALL_OW 314
41471: OR
41472: IFFALSE 41476
// exit ;
41474: GO 41943
// if GetLives ( i ) < 250 then
41476: LD_VAR 0 4
41480: PPUSH
41481: CALL_OW 256
41485: PUSH
41486: LD_INT 250
41488: LESS
41489: IFFALSE 41502
// begin ComAutodestruct ( i ) ;
41491: LD_VAR 0 4
41495: PPUSH
41496: CALL 41339 0 1
// exit ;
41500: GO 41943
// end ; x := GetX ( enemy_unit ) ;
41502: LD_ADDR_VAR 0 7
41506: PUSH
41507: LD_VAR 0 2
41511: PPUSH
41512: CALL_OW 250
41516: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
41517: LD_ADDR_VAR 0 8
41521: PUSH
41522: LD_VAR 0 2
41526: PPUSH
41527: CALL_OW 251
41531: ST_TO_ADDR
// if not x or not y then
41532: LD_VAR 0 7
41536: NOT
41537: PUSH
41538: LD_VAR 0 8
41542: NOT
41543: OR
41544: IFFALSE 41548
// exit ;
41546: GO 41943
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
41548: LD_ADDR_VAR 0 6
41552: PUSH
41553: LD_VAR 0 7
41557: PPUSH
41558: LD_INT 0
41560: PPUSH
41561: LD_INT 4
41563: PPUSH
41564: CALL_OW 272
41568: PUSH
41569: LD_VAR 0 8
41573: PPUSH
41574: LD_INT 0
41576: PPUSH
41577: LD_INT 4
41579: PPUSH
41580: CALL_OW 273
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_VAR 0 7
41593: PPUSH
41594: LD_INT 1
41596: PPUSH
41597: LD_INT 4
41599: PPUSH
41600: CALL_OW 272
41604: PUSH
41605: LD_VAR 0 8
41609: PPUSH
41610: LD_INT 1
41612: PPUSH
41613: LD_INT 4
41615: PPUSH
41616: CALL_OW 273
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_VAR 0 7
41629: PPUSH
41630: LD_INT 2
41632: PPUSH
41633: LD_INT 4
41635: PPUSH
41636: CALL_OW 272
41640: PUSH
41641: LD_VAR 0 8
41645: PPUSH
41646: LD_INT 2
41648: PPUSH
41649: LD_INT 4
41651: PPUSH
41652: CALL_OW 273
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_VAR 0 7
41665: PPUSH
41666: LD_INT 3
41668: PPUSH
41669: LD_INT 4
41671: PPUSH
41672: CALL_OW 272
41676: PUSH
41677: LD_VAR 0 8
41681: PPUSH
41682: LD_INT 3
41684: PPUSH
41685: LD_INT 4
41687: PPUSH
41688: CALL_OW 273
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_VAR 0 7
41701: PPUSH
41702: LD_INT 4
41704: PPUSH
41705: LD_INT 4
41707: PPUSH
41708: CALL_OW 272
41712: PUSH
41713: LD_VAR 0 8
41717: PPUSH
41718: LD_INT 4
41720: PPUSH
41721: LD_INT 4
41723: PPUSH
41724: CALL_OW 273
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_VAR 0 7
41737: PPUSH
41738: LD_INT 5
41740: PPUSH
41741: LD_INT 4
41743: PPUSH
41744: CALL_OW 272
41748: PUSH
41749: LD_VAR 0 8
41753: PPUSH
41754: LD_INT 5
41756: PPUSH
41757: LD_INT 4
41759: PPUSH
41760: CALL_OW 273
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: ST_TO_ADDR
// for i = tmp downto 1 do
41777: LD_ADDR_VAR 0 4
41781: PUSH
41782: DOUBLE
41783: LD_VAR 0 6
41787: INC
41788: ST_TO_ADDR
41789: LD_INT 1
41791: PUSH
41792: FOR_DOWNTO
41793: IFFALSE 41894
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41795: LD_VAR 0 6
41799: PUSH
41800: LD_VAR 0 4
41804: ARRAY
41805: PUSH
41806: LD_INT 1
41808: ARRAY
41809: PPUSH
41810: LD_VAR 0 6
41814: PUSH
41815: LD_VAR 0 4
41819: ARRAY
41820: PUSH
41821: LD_INT 2
41823: ARRAY
41824: PPUSH
41825: CALL_OW 488
41829: NOT
41830: PUSH
41831: LD_VAR 0 6
41835: PUSH
41836: LD_VAR 0 4
41840: ARRAY
41841: PUSH
41842: LD_INT 1
41844: ARRAY
41845: PPUSH
41846: LD_VAR 0 6
41850: PUSH
41851: LD_VAR 0 4
41855: ARRAY
41856: PUSH
41857: LD_INT 2
41859: ARRAY
41860: PPUSH
41861: CALL_OW 428
41865: PUSH
41866: LD_INT 0
41868: NONEQUAL
41869: OR
41870: IFFALSE 41892
// tmp := Delete ( tmp , i ) ;
41872: LD_ADDR_VAR 0 6
41876: PUSH
41877: LD_VAR 0 6
41881: PPUSH
41882: LD_VAR 0 4
41886: PPUSH
41887: CALL_OW 3
41891: ST_TO_ADDR
41892: GO 41792
41894: POP
41895: POP
// j := GetClosestHex ( unit , tmp ) ;
41896: LD_ADDR_VAR 0 5
41900: PUSH
41901: LD_VAR 0 1
41905: PPUSH
41906: LD_VAR 0 6
41910: PPUSH
41911: CALL 41187 0 2
41915: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
41916: LD_VAR 0 1
41920: PPUSH
41921: LD_VAR 0 5
41925: PUSH
41926: LD_INT 1
41928: ARRAY
41929: PPUSH
41930: LD_VAR 0 5
41934: PUSH
41935: LD_INT 2
41937: ARRAY
41938: PPUSH
41939: CALL_OW 111
// end ;
41943: LD_VAR 0 3
41947: RET
// export function PrepareApemanSoldier ( ) ; begin
41948: LD_INT 0
41950: PPUSH
// uc_nation := 0 ;
41951: LD_ADDR_OWVAR 21
41955: PUSH
41956: LD_INT 0
41958: ST_TO_ADDR
// hc_sex := sex_male ;
41959: LD_ADDR_OWVAR 27
41963: PUSH
41964: LD_INT 1
41966: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
41967: LD_ADDR_OWVAR 28
41971: PUSH
41972: LD_INT 15
41974: ST_TO_ADDR
// hc_gallery :=  ;
41975: LD_ADDR_OWVAR 33
41979: PUSH
41980: LD_STRING 
41982: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
41983: LD_ADDR_OWVAR 31
41987: PUSH
41988: LD_INT 0
41990: PPUSH
41991: LD_INT 3
41993: PPUSH
41994: CALL_OW 12
41998: PUSH
41999: LD_INT 0
42001: PPUSH
42002: LD_INT 3
42004: PPUSH
42005: CALL_OW 12
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: ST_TO_ADDR
// end ;
42022: LD_VAR 0 1
42026: RET
// export function PrepareApemanEngineer ( ) ; begin
42027: LD_INT 0
42029: PPUSH
// uc_nation := 0 ;
42030: LD_ADDR_OWVAR 21
42034: PUSH
42035: LD_INT 0
42037: ST_TO_ADDR
// hc_sex := sex_male ;
42038: LD_ADDR_OWVAR 27
42042: PUSH
42043: LD_INT 1
42045: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
42046: LD_ADDR_OWVAR 28
42050: PUSH
42051: LD_INT 16
42053: ST_TO_ADDR
// hc_gallery :=  ;
42054: LD_ADDR_OWVAR 33
42058: PUSH
42059: LD_STRING 
42061: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42062: LD_ADDR_OWVAR 31
42066: PUSH
42067: LD_INT 0
42069: PPUSH
42070: LD_INT 3
42072: PPUSH
42073: CALL_OW 12
42077: PUSH
42078: LD_INT 0
42080: PPUSH
42081: LD_INT 3
42083: PPUSH
42084: CALL_OW 12
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: ST_TO_ADDR
// end ;
42101: LD_VAR 0 1
42105: RET
// export function PrepareApeman ( agressivity ) ; begin
42106: LD_INT 0
42108: PPUSH
// uc_side := 0 ;
42109: LD_ADDR_OWVAR 20
42113: PUSH
42114: LD_INT 0
42116: ST_TO_ADDR
// uc_nation := 0 ;
42117: LD_ADDR_OWVAR 21
42121: PUSH
42122: LD_INT 0
42124: ST_TO_ADDR
// hc_sex := sex_male ;
42125: LD_ADDR_OWVAR 27
42129: PUSH
42130: LD_INT 1
42132: ST_TO_ADDR
// hc_class := class_apeman ;
42133: LD_ADDR_OWVAR 28
42137: PUSH
42138: LD_INT 12
42140: ST_TO_ADDR
// hc_gallery :=  ;
42141: LD_ADDR_OWVAR 33
42145: PUSH
42146: LD_STRING 
42148: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42149: LD_ADDR_OWVAR 35
42153: PUSH
42154: LD_VAR 0 1
42158: NEG
42159: PPUSH
42160: LD_VAR 0 1
42164: PPUSH
42165: CALL_OW 12
42169: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42170: LD_ADDR_OWVAR 31
42174: PUSH
42175: LD_INT 0
42177: PPUSH
42178: LD_INT 3
42180: PPUSH
42181: CALL_OW 12
42185: PUSH
42186: LD_INT 0
42188: PPUSH
42189: LD_INT 3
42191: PPUSH
42192: CALL_OW 12
42196: PUSH
42197: LD_INT 0
42199: PUSH
42200: LD_INT 0
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: ST_TO_ADDR
// end ;
42209: LD_VAR 0 2
42213: RET
// export function PrepareTiger ( agressivity ) ; begin
42214: LD_INT 0
42216: PPUSH
// uc_side := 0 ;
42217: LD_ADDR_OWVAR 20
42221: PUSH
42222: LD_INT 0
42224: ST_TO_ADDR
// uc_nation := 0 ;
42225: LD_ADDR_OWVAR 21
42229: PUSH
42230: LD_INT 0
42232: ST_TO_ADDR
// hc_class := class_tiger ;
42233: LD_ADDR_OWVAR 28
42237: PUSH
42238: LD_INT 14
42240: ST_TO_ADDR
// hc_gallery :=  ;
42241: LD_ADDR_OWVAR 33
42245: PUSH
42246: LD_STRING 
42248: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42249: LD_ADDR_OWVAR 35
42253: PUSH
42254: LD_VAR 0 1
42258: NEG
42259: PPUSH
42260: LD_VAR 0 1
42264: PPUSH
42265: CALL_OW 12
42269: ST_TO_ADDR
// end ;
42270: LD_VAR 0 2
42274: RET
// export function PrepareEnchidna ( ) ; begin
42275: LD_INT 0
42277: PPUSH
// uc_side := 0 ;
42278: LD_ADDR_OWVAR 20
42282: PUSH
42283: LD_INT 0
42285: ST_TO_ADDR
// uc_nation := 0 ;
42286: LD_ADDR_OWVAR 21
42290: PUSH
42291: LD_INT 0
42293: ST_TO_ADDR
// hc_class := class_baggie ;
42294: LD_ADDR_OWVAR 28
42298: PUSH
42299: LD_INT 13
42301: ST_TO_ADDR
// hc_gallery :=  ;
42302: LD_ADDR_OWVAR 33
42306: PUSH
42307: LD_STRING 
42309: ST_TO_ADDR
// end ;
42310: LD_VAR 0 1
42314: RET
// export function PrepareFrog ( ) ; begin
42315: LD_INT 0
42317: PPUSH
// uc_side := 0 ;
42318: LD_ADDR_OWVAR 20
42322: PUSH
42323: LD_INT 0
42325: ST_TO_ADDR
// uc_nation := 0 ;
42326: LD_ADDR_OWVAR 21
42330: PUSH
42331: LD_INT 0
42333: ST_TO_ADDR
// hc_class := class_frog ;
42334: LD_ADDR_OWVAR 28
42338: PUSH
42339: LD_INT 19
42341: ST_TO_ADDR
// hc_gallery :=  ;
42342: LD_ADDR_OWVAR 33
42346: PUSH
42347: LD_STRING 
42349: ST_TO_ADDR
// end ;
42350: LD_VAR 0 1
42354: RET
// export function PrepareFish ( ) ; begin
42355: LD_INT 0
42357: PPUSH
// uc_side := 0 ;
42358: LD_ADDR_OWVAR 20
42362: PUSH
42363: LD_INT 0
42365: ST_TO_ADDR
// uc_nation := 0 ;
42366: LD_ADDR_OWVAR 21
42370: PUSH
42371: LD_INT 0
42373: ST_TO_ADDR
// hc_class := class_fish ;
42374: LD_ADDR_OWVAR 28
42378: PUSH
42379: LD_INT 20
42381: ST_TO_ADDR
// hc_gallery :=  ;
42382: LD_ADDR_OWVAR 33
42386: PUSH
42387: LD_STRING 
42389: ST_TO_ADDR
// end ;
42390: LD_VAR 0 1
42394: RET
// export function PrepareBird ( ) ; begin
42395: LD_INT 0
42397: PPUSH
// uc_side := 0 ;
42398: LD_ADDR_OWVAR 20
42402: PUSH
42403: LD_INT 0
42405: ST_TO_ADDR
// uc_nation := 0 ;
42406: LD_ADDR_OWVAR 21
42410: PUSH
42411: LD_INT 0
42413: ST_TO_ADDR
// hc_class := class_phororhacos ;
42414: LD_ADDR_OWVAR 28
42418: PUSH
42419: LD_INT 18
42421: ST_TO_ADDR
// hc_gallery :=  ;
42422: LD_ADDR_OWVAR 33
42426: PUSH
42427: LD_STRING 
42429: ST_TO_ADDR
// end ;
42430: LD_VAR 0 1
42434: RET
// export function PrepareHorse ( ) ; begin
42435: LD_INT 0
42437: PPUSH
// uc_side := 0 ;
42438: LD_ADDR_OWVAR 20
42442: PUSH
42443: LD_INT 0
42445: ST_TO_ADDR
// uc_nation := 0 ;
42446: LD_ADDR_OWVAR 21
42450: PUSH
42451: LD_INT 0
42453: ST_TO_ADDR
// hc_class := class_horse ;
42454: LD_ADDR_OWVAR 28
42458: PUSH
42459: LD_INT 21
42461: ST_TO_ADDR
// hc_gallery :=  ;
42462: LD_ADDR_OWVAR 33
42466: PUSH
42467: LD_STRING 
42469: ST_TO_ADDR
// end ;
42470: LD_VAR 0 1
42474: RET
// export function PrepareMastodont ( ) ; begin
42475: LD_INT 0
42477: PPUSH
// uc_side := 0 ;
42478: LD_ADDR_OWVAR 20
42482: PUSH
42483: LD_INT 0
42485: ST_TO_ADDR
// uc_nation := 0 ;
42486: LD_ADDR_OWVAR 21
42490: PUSH
42491: LD_INT 0
42493: ST_TO_ADDR
// vc_chassis := class_mastodont ;
42494: LD_ADDR_OWVAR 37
42498: PUSH
42499: LD_INT 31
42501: ST_TO_ADDR
// vc_control := control_rider ;
42502: LD_ADDR_OWVAR 38
42506: PUSH
42507: LD_INT 4
42509: ST_TO_ADDR
// end ;
42510: LD_VAR 0 1
42514: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
42515: LD_INT 0
42517: PPUSH
42518: PPUSH
42519: PPUSH
// uc_side = 0 ;
42520: LD_ADDR_OWVAR 20
42524: PUSH
42525: LD_INT 0
42527: ST_TO_ADDR
// uc_nation = 0 ;
42528: LD_ADDR_OWVAR 21
42532: PUSH
42533: LD_INT 0
42535: ST_TO_ADDR
// InitHc_All ( ) ;
42536: CALL_OW 584
// InitVc ;
42540: CALL_OW 20
// if mastodonts then
42544: LD_VAR 0 6
42548: IFFALSE 42615
// for i = 1 to mastodonts do
42550: LD_ADDR_VAR 0 11
42554: PUSH
42555: DOUBLE
42556: LD_INT 1
42558: DEC
42559: ST_TO_ADDR
42560: LD_VAR 0 6
42564: PUSH
42565: FOR_TO
42566: IFFALSE 42613
// begin vc_chassis := 31 ;
42568: LD_ADDR_OWVAR 37
42572: PUSH
42573: LD_INT 31
42575: ST_TO_ADDR
// vc_control := control_rider ;
42576: LD_ADDR_OWVAR 38
42580: PUSH
42581: LD_INT 4
42583: ST_TO_ADDR
// animal := CreateVehicle ;
42584: LD_ADDR_VAR 0 12
42588: PUSH
42589: CALL_OW 45
42593: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42594: LD_VAR 0 12
42598: PPUSH
42599: LD_VAR 0 8
42603: PPUSH
42604: LD_INT 0
42606: PPUSH
42607: CALL 44743 0 3
// end ;
42611: GO 42565
42613: POP
42614: POP
// if horses then
42615: LD_VAR 0 5
42619: IFFALSE 42686
// for i = 1 to horses do
42621: LD_ADDR_VAR 0 11
42625: PUSH
42626: DOUBLE
42627: LD_INT 1
42629: DEC
42630: ST_TO_ADDR
42631: LD_VAR 0 5
42635: PUSH
42636: FOR_TO
42637: IFFALSE 42684
// begin hc_class := 21 ;
42639: LD_ADDR_OWVAR 28
42643: PUSH
42644: LD_INT 21
42646: ST_TO_ADDR
// hc_gallery :=  ;
42647: LD_ADDR_OWVAR 33
42651: PUSH
42652: LD_STRING 
42654: ST_TO_ADDR
// animal := CreateHuman ;
42655: LD_ADDR_VAR 0 12
42659: PUSH
42660: CALL_OW 44
42664: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42665: LD_VAR 0 12
42669: PPUSH
42670: LD_VAR 0 8
42674: PPUSH
42675: LD_INT 0
42677: PPUSH
42678: CALL 44743 0 3
// end ;
42682: GO 42636
42684: POP
42685: POP
// if birds then
42686: LD_VAR 0 1
42690: IFFALSE 42757
// for i = 1 to birds do
42692: LD_ADDR_VAR 0 11
42696: PUSH
42697: DOUBLE
42698: LD_INT 1
42700: DEC
42701: ST_TO_ADDR
42702: LD_VAR 0 1
42706: PUSH
42707: FOR_TO
42708: IFFALSE 42755
// begin hc_class = 18 ;
42710: LD_ADDR_OWVAR 28
42714: PUSH
42715: LD_INT 18
42717: ST_TO_ADDR
// hc_gallery =  ;
42718: LD_ADDR_OWVAR 33
42722: PUSH
42723: LD_STRING 
42725: ST_TO_ADDR
// animal := CreateHuman ;
42726: LD_ADDR_VAR 0 12
42730: PUSH
42731: CALL_OW 44
42735: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42736: LD_VAR 0 12
42740: PPUSH
42741: LD_VAR 0 8
42745: PPUSH
42746: LD_INT 0
42748: PPUSH
42749: CALL 44743 0 3
// end ;
42753: GO 42707
42755: POP
42756: POP
// if tigers then
42757: LD_VAR 0 2
42761: IFFALSE 42845
// for i = 1 to tigers do
42763: LD_ADDR_VAR 0 11
42767: PUSH
42768: DOUBLE
42769: LD_INT 1
42771: DEC
42772: ST_TO_ADDR
42773: LD_VAR 0 2
42777: PUSH
42778: FOR_TO
42779: IFFALSE 42843
// begin hc_class = class_tiger ;
42781: LD_ADDR_OWVAR 28
42785: PUSH
42786: LD_INT 14
42788: ST_TO_ADDR
// hc_gallery =  ;
42789: LD_ADDR_OWVAR 33
42793: PUSH
42794: LD_STRING 
42796: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
42797: LD_ADDR_OWVAR 35
42801: PUSH
42802: LD_INT 7
42804: NEG
42805: PPUSH
42806: LD_INT 7
42808: PPUSH
42809: CALL_OW 12
42813: ST_TO_ADDR
// animal := CreateHuman ;
42814: LD_ADDR_VAR 0 12
42818: PUSH
42819: CALL_OW 44
42823: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42824: LD_VAR 0 12
42828: PPUSH
42829: LD_VAR 0 8
42833: PPUSH
42834: LD_INT 0
42836: PPUSH
42837: CALL 44743 0 3
// end ;
42841: GO 42778
42843: POP
42844: POP
// if apemans then
42845: LD_VAR 0 3
42849: IFFALSE 42972
// for i = 1 to apemans do
42851: LD_ADDR_VAR 0 11
42855: PUSH
42856: DOUBLE
42857: LD_INT 1
42859: DEC
42860: ST_TO_ADDR
42861: LD_VAR 0 3
42865: PUSH
42866: FOR_TO
42867: IFFALSE 42970
// begin hc_class = class_apeman ;
42869: LD_ADDR_OWVAR 28
42873: PUSH
42874: LD_INT 12
42876: ST_TO_ADDR
// hc_gallery =  ;
42877: LD_ADDR_OWVAR 33
42881: PUSH
42882: LD_STRING 
42884: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
42885: LD_ADDR_OWVAR 35
42889: PUSH
42890: LD_INT 2
42892: NEG
42893: PPUSH
42894: LD_INT 2
42896: PPUSH
42897: CALL_OW 12
42901: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
42902: LD_ADDR_OWVAR 31
42906: PUSH
42907: LD_INT 1
42909: PPUSH
42910: LD_INT 3
42912: PPUSH
42913: CALL_OW 12
42917: PUSH
42918: LD_INT 1
42920: PPUSH
42921: LD_INT 3
42923: PPUSH
42924: CALL_OW 12
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: ST_TO_ADDR
// animal := CreateHuman ;
42941: LD_ADDR_VAR 0 12
42945: PUSH
42946: CALL_OW 44
42950: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42951: LD_VAR 0 12
42955: PPUSH
42956: LD_VAR 0 8
42960: PPUSH
42961: LD_INT 0
42963: PPUSH
42964: CALL 44743 0 3
// end ;
42968: GO 42866
42970: POP
42971: POP
// if enchidnas then
42972: LD_VAR 0 4
42976: IFFALSE 43043
// for i = 1 to enchidnas do
42978: LD_ADDR_VAR 0 11
42982: PUSH
42983: DOUBLE
42984: LD_INT 1
42986: DEC
42987: ST_TO_ADDR
42988: LD_VAR 0 4
42992: PUSH
42993: FOR_TO
42994: IFFALSE 43041
// begin hc_class = 13 ;
42996: LD_ADDR_OWVAR 28
43000: PUSH
43001: LD_INT 13
43003: ST_TO_ADDR
// hc_gallery =  ;
43004: LD_ADDR_OWVAR 33
43008: PUSH
43009: LD_STRING 
43011: ST_TO_ADDR
// animal := CreateHuman ;
43012: LD_ADDR_VAR 0 12
43016: PUSH
43017: CALL_OW 44
43021: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43022: LD_VAR 0 12
43026: PPUSH
43027: LD_VAR 0 8
43031: PPUSH
43032: LD_INT 0
43034: PPUSH
43035: CALL 44743 0 3
// end ;
43039: GO 42993
43041: POP
43042: POP
// if fishes then
43043: LD_VAR 0 7
43047: IFFALSE 43114
// for i = 1 to fishes do
43049: LD_ADDR_VAR 0 11
43053: PUSH
43054: DOUBLE
43055: LD_INT 1
43057: DEC
43058: ST_TO_ADDR
43059: LD_VAR 0 7
43063: PUSH
43064: FOR_TO
43065: IFFALSE 43112
// begin hc_class = 20 ;
43067: LD_ADDR_OWVAR 28
43071: PUSH
43072: LD_INT 20
43074: ST_TO_ADDR
// hc_gallery =  ;
43075: LD_ADDR_OWVAR 33
43079: PUSH
43080: LD_STRING 
43082: ST_TO_ADDR
// animal := CreateHuman ;
43083: LD_ADDR_VAR 0 12
43087: PUSH
43088: CALL_OW 44
43092: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43093: LD_VAR 0 12
43097: PPUSH
43098: LD_VAR 0 9
43102: PPUSH
43103: LD_INT 0
43105: PPUSH
43106: CALL 44743 0 3
// end ;
43110: GO 43064
43112: POP
43113: POP
// end ;
43114: LD_VAR 0 10
43118: RET
// export function WantHeal ( sci , unit ) ; begin
43119: LD_INT 0
43121: PPUSH
// if GetTaskList ( sci ) > 0 then
43122: LD_VAR 0 1
43126: PPUSH
43127: CALL_OW 437
43131: PUSH
43132: LD_INT 0
43134: GREATER
43135: IFFALSE 43205
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43137: LD_VAR 0 1
43141: PPUSH
43142: CALL_OW 437
43146: PUSH
43147: LD_INT 1
43149: ARRAY
43150: PUSH
43151: LD_INT 1
43153: ARRAY
43154: PUSH
43155: LD_STRING l
43157: EQUAL
43158: PUSH
43159: LD_VAR 0 1
43163: PPUSH
43164: CALL_OW 437
43168: PUSH
43169: LD_INT 1
43171: ARRAY
43172: PUSH
43173: LD_INT 4
43175: ARRAY
43176: PUSH
43177: LD_VAR 0 2
43181: EQUAL
43182: AND
43183: IFFALSE 43195
// result := true else
43185: LD_ADDR_VAR 0 3
43189: PUSH
43190: LD_INT 1
43192: ST_TO_ADDR
43193: GO 43203
// result := false ;
43195: LD_ADDR_VAR 0 3
43199: PUSH
43200: LD_INT 0
43202: ST_TO_ADDR
// end else
43203: GO 43213
// result := false ;
43205: LD_ADDR_VAR 0 3
43209: PUSH
43210: LD_INT 0
43212: ST_TO_ADDR
// end ;
43213: LD_VAR 0 3
43217: RET
// export function HealTarget ( sci ) ; begin
43218: LD_INT 0
43220: PPUSH
// if not sci then
43221: LD_VAR 0 1
43225: NOT
43226: IFFALSE 43230
// exit ;
43228: GO 43295
// result := 0 ;
43230: LD_ADDR_VAR 0 2
43234: PUSH
43235: LD_INT 0
43237: ST_TO_ADDR
// if GetTaskList ( sci ) then
43238: LD_VAR 0 1
43242: PPUSH
43243: CALL_OW 437
43247: IFFALSE 43295
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
43249: LD_VAR 0 1
43253: PPUSH
43254: CALL_OW 437
43258: PUSH
43259: LD_INT 1
43261: ARRAY
43262: PUSH
43263: LD_INT 1
43265: ARRAY
43266: PUSH
43267: LD_STRING l
43269: EQUAL
43270: IFFALSE 43295
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
43272: LD_ADDR_VAR 0 2
43276: PUSH
43277: LD_VAR 0 1
43281: PPUSH
43282: CALL_OW 437
43286: PUSH
43287: LD_INT 1
43289: ARRAY
43290: PUSH
43291: LD_INT 4
43293: ARRAY
43294: ST_TO_ADDR
// end ;
43295: LD_VAR 0 2
43299: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
43300: LD_INT 0
43302: PPUSH
43303: PPUSH
43304: PPUSH
43305: PPUSH
// if not base_units then
43306: LD_VAR 0 1
43310: NOT
43311: IFFALSE 43315
// exit ;
43313: GO 43402
// result := false ;
43315: LD_ADDR_VAR 0 2
43319: PUSH
43320: LD_INT 0
43322: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
43323: LD_ADDR_VAR 0 5
43327: PUSH
43328: LD_VAR 0 1
43332: PPUSH
43333: LD_INT 21
43335: PUSH
43336: LD_INT 3
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PPUSH
43343: CALL_OW 72
43347: ST_TO_ADDR
// if not tmp then
43348: LD_VAR 0 5
43352: NOT
43353: IFFALSE 43357
// exit ;
43355: GO 43402
// for i in tmp do
43357: LD_ADDR_VAR 0 3
43361: PUSH
43362: LD_VAR 0 5
43366: PUSH
43367: FOR_IN
43368: IFFALSE 43400
// begin result := EnemyInRange ( i , 22 ) ;
43370: LD_ADDR_VAR 0 2
43374: PUSH
43375: LD_VAR 0 3
43379: PPUSH
43380: LD_INT 22
43382: PPUSH
43383: CALL 40989 0 2
43387: ST_TO_ADDR
// if result then
43388: LD_VAR 0 2
43392: IFFALSE 43398
// exit ;
43394: POP
43395: POP
43396: GO 43402
// end ;
43398: GO 43367
43400: POP
43401: POP
// end ;
43402: LD_VAR 0 2
43406: RET
// export function FilterByTag ( units , tag ) ; begin
43407: LD_INT 0
43409: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
43410: LD_ADDR_VAR 0 3
43414: PUSH
43415: LD_VAR 0 1
43419: PPUSH
43420: LD_INT 120
43422: PUSH
43423: LD_VAR 0 2
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PPUSH
43432: CALL_OW 72
43436: ST_TO_ADDR
// end ;
43437: LD_VAR 0 3
43441: RET
// export function IsDriver ( un ) ; begin
43442: LD_INT 0
43444: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
43445: LD_ADDR_VAR 0 2
43449: PUSH
43450: LD_VAR 0 1
43454: PUSH
43455: LD_INT 55
43457: PUSH
43458: EMPTY
43459: LIST
43460: PPUSH
43461: CALL_OW 69
43465: IN
43466: ST_TO_ADDR
// end ;
43467: LD_VAR 0 2
43471: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
43472: LD_INT 0
43474: PPUSH
43475: PPUSH
// list := [ ] ;
43476: LD_ADDR_VAR 0 5
43480: PUSH
43481: EMPTY
43482: ST_TO_ADDR
// case d of 0 :
43483: LD_VAR 0 3
43487: PUSH
43488: LD_INT 0
43490: DOUBLE
43491: EQUAL
43492: IFTRUE 43496
43494: GO 43629
43496: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
43497: LD_ADDR_VAR 0 5
43501: PUSH
43502: LD_VAR 0 1
43506: PUSH
43507: LD_INT 4
43509: MINUS
43510: PUSH
43511: LD_VAR 0 2
43515: PUSH
43516: LD_INT 4
43518: MINUS
43519: PUSH
43520: LD_INT 2
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: LIST
43527: PUSH
43528: LD_VAR 0 1
43532: PUSH
43533: LD_INT 3
43535: MINUS
43536: PUSH
43537: LD_VAR 0 2
43541: PUSH
43542: LD_INT 1
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: LIST
43549: PUSH
43550: LD_VAR 0 1
43554: PUSH
43555: LD_INT 4
43557: PLUS
43558: PUSH
43559: LD_VAR 0 2
43563: PUSH
43564: LD_INT 4
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: LIST
43571: PUSH
43572: LD_VAR 0 1
43576: PUSH
43577: LD_INT 3
43579: PLUS
43580: PUSH
43581: LD_VAR 0 2
43585: PUSH
43586: LD_INT 3
43588: PLUS
43589: PUSH
43590: LD_INT 5
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: LIST
43597: PUSH
43598: LD_VAR 0 1
43602: PUSH
43603: LD_VAR 0 2
43607: PUSH
43608: LD_INT 4
43610: PLUS
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: LIST
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: ST_TO_ADDR
// end ; 1 :
43627: GO 44327
43629: LD_INT 1
43631: DOUBLE
43632: EQUAL
43633: IFTRUE 43637
43635: GO 43770
43637: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
43638: LD_ADDR_VAR 0 5
43642: PUSH
43643: LD_VAR 0 1
43647: PUSH
43648: LD_VAR 0 2
43652: PUSH
43653: LD_INT 4
43655: MINUS
43656: PUSH
43657: LD_INT 3
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: LIST
43664: PUSH
43665: LD_VAR 0 1
43669: PUSH
43670: LD_INT 3
43672: MINUS
43673: PUSH
43674: LD_VAR 0 2
43678: PUSH
43679: LD_INT 3
43681: MINUS
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: LIST
43690: PUSH
43691: LD_VAR 0 1
43695: PUSH
43696: LD_INT 4
43698: MINUS
43699: PUSH
43700: LD_VAR 0 2
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: LIST
43712: PUSH
43713: LD_VAR 0 1
43717: PUSH
43718: LD_VAR 0 2
43722: PUSH
43723: LD_INT 3
43725: PLUS
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: LIST
43734: PUSH
43735: LD_VAR 0 1
43739: PUSH
43740: LD_INT 4
43742: PLUS
43743: PUSH
43744: LD_VAR 0 2
43748: PUSH
43749: LD_INT 4
43751: PLUS
43752: PUSH
43753: LD_INT 5
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: LIST
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: ST_TO_ADDR
// end ; 2 :
43768: GO 44327
43770: LD_INT 2
43772: DOUBLE
43773: EQUAL
43774: IFTRUE 43778
43776: GO 43907
43778: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
43779: LD_ADDR_VAR 0 5
43783: PUSH
43784: LD_VAR 0 1
43788: PUSH
43789: LD_VAR 0 2
43793: PUSH
43794: LD_INT 3
43796: MINUS
43797: PUSH
43798: LD_INT 3
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: LIST
43805: PUSH
43806: LD_VAR 0 1
43810: PUSH
43811: LD_INT 4
43813: PLUS
43814: PUSH
43815: LD_VAR 0 2
43819: PUSH
43820: LD_INT 4
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: LIST
43827: PUSH
43828: LD_VAR 0 1
43832: PUSH
43833: LD_VAR 0 2
43837: PUSH
43838: LD_INT 4
43840: PLUS
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: LIST
43849: PUSH
43850: LD_VAR 0 1
43854: PUSH
43855: LD_INT 3
43857: MINUS
43858: PUSH
43859: LD_VAR 0 2
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: LIST
43871: PUSH
43872: LD_VAR 0 1
43876: PUSH
43877: LD_INT 4
43879: MINUS
43880: PUSH
43881: LD_VAR 0 2
43885: PUSH
43886: LD_INT 4
43888: MINUS
43889: PUSH
43890: LD_INT 2
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: LIST
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: ST_TO_ADDR
// end ; 3 :
43905: GO 44327
43907: LD_INT 3
43909: DOUBLE
43910: EQUAL
43911: IFTRUE 43915
43913: GO 44048
43915: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
43916: LD_ADDR_VAR 0 5
43920: PUSH
43921: LD_VAR 0 1
43925: PUSH
43926: LD_INT 3
43928: PLUS
43929: PUSH
43930: LD_VAR 0 2
43934: PUSH
43935: LD_INT 4
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: LIST
43942: PUSH
43943: LD_VAR 0 1
43947: PUSH
43948: LD_INT 4
43950: PLUS
43951: PUSH
43952: LD_VAR 0 2
43956: PUSH
43957: LD_INT 4
43959: PLUS
43960: PUSH
43961: LD_INT 5
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: LIST
43968: PUSH
43969: LD_VAR 0 1
43973: PUSH
43974: LD_INT 4
43976: MINUS
43977: PUSH
43978: LD_VAR 0 2
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: LIST
43990: PUSH
43991: LD_VAR 0 1
43995: PUSH
43996: LD_VAR 0 2
44000: PUSH
44001: LD_INT 4
44003: MINUS
44004: PUSH
44005: LD_INT 3
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: LIST
44012: PUSH
44013: LD_VAR 0 1
44017: PUSH
44018: LD_INT 3
44020: MINUS
44021: PUSH
44022: LD_VAR 0 2
44026: PUSH
44027: LD_INT 3
44029: MINUS
44030: PUSH
44031: LD_INT 2
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: LIST
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: ST_TO_ADDR
// end ; 4 :
44046: GO 44327
44048: LD_INT 4
44050: DOUBLE
44051: EQUAL
44052: IFTRUE 44056
44054: GO 44189
44056: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44057: LD_ADDR_VAR 0 5
44061: PUSH
44062: LD_VAR 0 1
44066: PUSH
44067: LD_VAR 0 2
44071: PUSH
44072: LD_INT 4
44074: PLUS
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: LIST
44083: PUSH
44084: LD_VAR 0 1
44088: PUSH
44089: LD_INT 3
44091: PLUS
44092: PUSH
44093: LD_VAR 0 2
44097: PUSH
44098: LD_INT 3
44100: PLUS
44101: PUSH
44102: LD_INT 5
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: LIST
44109: PUSH
44110: LD_VAR 0 1
44114: PUSH
44115: LD_INT 4
44117: PLUS
44118: PUSH
44119: LD_VAR 0 2
44123: PUSH
44124: LD_INT 4
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: LIST
44131: PUSH
44132: LD_VAR 0 1
44136: PUSH
44137: LD_VAR 0 2
44141: PUSH
44142: LD_INT 3
44144: MINUS
44145: PUSH
44146: LD_INT 3
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: LIST
44153: PUSH
44154: LD_VAR 0 1
44158: PUSH
44159: LD_INT 4
44161: MINUS
44162: PUSH
44163: LD_VAR 0 2
44167: PUSH
44168: LD_INT 4
44170: MINUS
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: LIST
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: ST_TO_ADDR
// end ; 5 :
44187: GO 44327
44189: LD_INT 5
44191: DOUBLE
44192: EQUAL
44193: IFTRUE 44197
44195: GO 44326
44197: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44198: LD_ADDR_VAR 0 5
44202: PUSH
44203: LD_VAR 0 1
44207: PUSH
44208: LD_INT 4
44210: MINUS
44211: PUSH
44212: LD_VAR 0 2
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: LIST
44224: PUSH
44225: LD_VAR 0 1
44229: PUSH
44230: LD_VAR 0 2
44234: PUSH
44235: LD_INT 4
44237: MINUS
44238: PUSH
44239: LD_INT 3
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: LIST
44246: PUSH
44247: LD_VAR 0 1
44251: PUSH
44252: LD_INT 4
44254: PLUS
44255: PUSH
44256: LD_VAR 0 2
44260: PUSH
44261: LD_INT 4
44263: PLUS
44264: PUSH
44265: LD_INT 5
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: LIST
44272: PUSH
44273: LD_VAR 0 1
44277: PUSH
44278: LD_INT 3
44280: PLUS
44281: PUSH
44282: LD_VAR 0 2
44286: PUSH
44287: LD_INT 4
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: LIST
44294: PUSH
44295: LD_VAR 0 1
44299: PUSH
44300: LD_VAR 0 2
44304: PUSH
44305: LD_INT 3
44307: PLUS
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: LIST
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: ST_TO_ADDR
// end ; end ;
44324: GO 44327
44326: POP
// result := list ;
44327: LD_ADDR_VAR 0 4
44331: PUSH
44332: LD_VAR 0 5
44336: ST_TO_ADDR
// end ;
44337: LD_VAR 0 4
44341: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
44342: LD_INT 0
44344: PPUSH
44345: PPUSH
44346: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
44347: LD_VAR 0 1
44351: NOT
44352: PUSH
44353: LD_VAR 0 2
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: LD_INT 3
44366: PUSH
44367: LD_INT 4
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: IN
44376: NOT
44377: OR
44378: IFFALSE 44382
// exit ;
44380: GO 44465
// tmp := [ ] ;
44382: LD_ADDR_VAR 0 5
44386: PUSH
44387: EMPTY
44388: ST_TO_ADDR
// for i in units do
44389: LD_ADDR_VAR 0 4
44393: PUSH
44394: LD_VAR 0 1
44398: PUSH
44399: FOR_IN
44400: IFFALSE 44434
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
44402: LD_ADDR_VAR 0 5
44406: PUSH
44407: LD_VAR 0 5
44411: PPUSH
44412: LD_VAR 0 4
44416: PPUSH
44417: LD_VAR 0 2
44421: PPUSH
44422: CALL_OW 259
44426: PPUSH
44427: CALL 45825 0 2
44431: ST_TO_ADDR
44432: GO 44399
44434: POP
44435: POP
// if not tmp then
44436: LD_VAR 0 5
44440: NOT
44441: IFFALSE 44445
// exit ;
44443: GO 44465
// result := SortListByListDesc ( units , tmp ) ;
44445: LD_ADDR_VAR 0 3
44449: PUSH
44450: LD_VAR 0 1
44454: PPUSH
44455: LD_VAR 0 5
44459: PPUSH
44460: CALL_OW 77
44464: ST_TO_ADDR
// end ;
44465: LD_VAR 0 3
44469: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
44470: LD_INT 0
44472: PPUSH
44473: PPUSH
44474: PPUSH
// result := false ;
44475: LD_ADDR_VAR 0 3
44479: PUSH
44480: LD_INT 0
44482: ST_TO_ADDR
// if not building then
44483: LD_VAR 0 2
44487: NOT
44488: IFFALSE 44492
// exit ;
44490: GO 44630
// x := GetX ( building ) ;
44492: LD_ADDR_VAR 0 4
44496: PUSH
44497: LD_VAR 0 2
44501: PPUSH
44502: CALL_OW 250
44506: ST_TO_ADDR
// y := GetY ( building ) ;
44507: LD_ADDR_VAR 0 5
44511: PUSH
44512: LD_VAR 0 2
44516: PPUSH
44517: CALL_OW 251
44521: ST_TO_ADDR
// if not x or not y then
44522: LD_VAR 0 4
44526: NOT
44527: PUSH
44528: LD_VAR 0 5
44532: NOT
44533: OR
44534: IFFALSE 44538
// exit ;
44536: GO 44630
// if GetTaskList ( unit ) then
44538: LD_VAR 0 1
44542: PPUSH
44543: CALL_OW 437
44547: IFFALSE 44630
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44549: LD_STRING e
44551: PUSH
44552: LD_VAR 0 1
44556: PPUSH
44557: CALL_OW 437
44561: PUSH
44562: LD_INT 1
44564: ARRAY
44565: PUSH
44566: LD_INT 1
44568: ARRAY
44569: EQUAL
44570: PUSH
44571: LD_VAR 0 4
44575: PUSH
44576: LD_VAR 0 1
44580: PPUSH
44581: CALL_OW 437
44585: PUSH
44586: LD_INT 1
44588: ARRAY
44589: PUSH
44590: LD_INT 2
44592: ARRAY
44593: EQUAL
44594: AND
44595: PUSH
44596: LD_VAR 0 5
44600: PUSH
44601: LD_VAR 0 1
44605: PPUSH
44606: CALL_OW 437
44610: PUSH
44611: LD_INT 1
44613: ARRAY
44614: PUSH
44615: LD_INT 3
44617: ARRAY
44618: EQUAL
44619: AND
44620: IFFALSE 44630
// result := true end ;
44622: LD_ADDR_VAR 0 3
44626: PUSH
44627: LD_INT 1
44629: ST_TO_ADDR
// end ;
44630: LD_VAR 0 3
44634: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
44635: LD_INT 0
44637: PPUSH
// result := false ;
44638: LD_ADDR_VAR 0 4
44642: PUSH
44643: LD_INT 0
44645: ST_TO_ADDR
// if GetTaskList ( unit ) then
44646: LD_VAR 0 1
44650: PPUSH
44651: CALL_OW 437
44655: IFFALSE 44738
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44657: LD_STRING M
44659: PUSH
44660: LD_VAR 0 1
44664: PPUSH
44665: CALL_OW 437
44669: PUSH
44670: LD_INT 1
44672: ARRAY
44673: PUSH
44674: LD_INT 1
44676: ARRAY
44677: EQUAL
44678: PUSH
44679: LD_VAR 0 2
44683: PUSH
44684: LD_VAR 0 1
44688: PPUSH
44689: CALL_OW 437
44693: PUSH
44694: LD_INT 1
44696: ARRAY
44697: PUSH
44698: LD_INT 2
44700: ARRAY
44701: EQUAL
44702: AND
44703: PUSH
44704: LD_VAR 0 3
44708: PUSH
44709: LD_VAR 0 1
44713: PPUSH
44714: CALL_OW 437
44718: PUSH
44719: LD_INT 1
44721: ARRAY
44722: PUSH
44723: LD_INT 3
44725: ARRAY
44726: EQUAL
44727: AND
44728: IFFALSE 44738
// result := true ;
44730: LD_ADDR_VAR 0 4
44734: PUSH
44735: LD_INT 1
44737: ST_TO_ADDR
// end ; end ;
44738: LD_VAR 0 4
44742: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
44743: LD_INT 0
44745: PPUSH
44746: PPUSH
44747: PPUSH
44748: PPUSH
// if not unit or not area then
44749: LD_VAR 0 1
44753: NOT
44754: PUSH
44755: LD_VAR 0 2
44759: NOT
44760: OR
44761: IFFALSE 44765
// exit ;
44763: GO 44928
// tmp := AreaToList ( area , i ) ;
44765: LD_ADDR_VAR 0 6
44769: PUSH
44770: LD_VAR 0 2
44774: PPUSH
44775: LD_VAR 0 5
44779: PPUSH
44780: CALL_OW 517
44784: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
44785: LD_ADDR_VAR 0 5
44789: PUSH
44790: DOUBLE
44791: LD_INT 1
44793: DEC
44794: ST_TO_ADDR
44795: LD_VAR 0 6
44799: PUSH
44800: LD_INT 1
44802: ARRAY
44803: PUSH
44804: FOR_TO
44805: IFFALSE 44926
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
44807: LD_ADDR_VAR 0 7
44811: PUSH
44812: LD_VAR 0 6
44816: PUSH
44817: LD_INT 1
44819: ARRAY
44820: PUSH
44821: LD_VAR 0 5
44825: ARRAY
44826: PUSH
44827: LD_VAR 0 6
44831: PUSH
44832: LD_INT 2
44834: ARRAY
44835: PUSH
44836: LD_VAR 0 5
44840: ARRAY
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
44846: LD_INT 92
44848: PUSH
44849: LD_VAR 0 7
44853: PUSH
44854: LD_INT 1
44856: ARRAY
44857: PUSH
44858: LD_VAR 0 7
44862: PUSH
44863: LD_INT 2
44865: ARRAY
44866: PUSH
44867: LD_INT 3
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: PPUSH
44876: CALL_OW 69
44880: PUSH
44881: LD_INT 0
44883: EQUAL
44884: IFFALSE 44924
// begin PlaceUnitArea ( unit , area , mode ) ;
44886: LD_VAR 0 1
44890: PPUSH
44891: LD_VAR 0 2
44895: PPUSH
44896: LD_VAR 0 3
44900: PPUSH
44901: CALL_OW 49
// result := IsPlaced ( unit ) ;
44905: LD_ADDR_VAR 0 4
44909: PUSH
44910: LD_VAR 0 1
44914: PPUSH
44915: CALL_OW 305
44919: ST_TO_ADDR
// exit ;
44920: POP
44921: POP
44922: GO 44928
// end ; end ;
44924: GO 44804
44926: POP
44927: POP
// end ;
44928: LD_VAR 0 4
44932: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
44933: LD_INT 0
44935: PPUSH
44936: PPUSH
44937: PPUSH
// if not side or side > 8 then
44938: LD_VAR 0 1
44942: NOT
44943: PUSH
44944: LD_VAR 0 1
44948: PUSH
44949: LD_INT 8
44951: GREATER
44952: OR
44953: IFFALSE 44957
// exit ;
44955: GO 45144
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
44957: LD_ADDR_VAR 0 4
44961: PUSH
44962: LD_INT 22
44964: PUSH
44965: LD_VAR 0 1
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 21
44976: PUSH
44977: LD_INT 3
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PPUSH
44988: CALL_OW 69
44992: ST_TO_ADDR
// if not tmp then
44993: LD_VAR 0 4
44997: NOT
44998: IFFALSE 45002
// exit ;
45000: GO 45144
// enable_addtolog := true ;
45002: LD_ADDR_OWVAR 81
45006: PUSH
45007: LD_INT 1
45009: ST_TO_ADDR
// AddToLog ( [ ) ;
45010: LD_STRING [
45012: PPUSH
45013: CALL_OW 561
// for i in tmp do
45017: LD_ADDR_VAR 0 3
45021: PUSH
45022: LD_VAR 0 4
45026: PUSH
45027: FOR_IN
45028: IFFALSE 45135
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45030: LD_STRING [
45032: PUSH
45033: LD_VAR 0 3
45037: PPUSH
45038: CALL_OW 266
45042: STR
45043: PUSH
45044: LD_STRING , 
45046: STR
45047: PUSH
45048: LD_VAR 0 3
45052: PPUSH
45053: CALL_OW 250
45057: STR
45058: PUSH
45059: LD_STRING , 
45061: STR
45062: PUSH
45063: LD_VAR 0 3
45067: PPUSH
45068: CALL_OW 251
45072: STR
45073: PUSH
45074: LD_STRING , 
45076: STR
45077: PUSH
45078: LD_VAR 0 3
45082: PPUSH
45083: CALL_OW 254
45087: STR
45088: PUSH
45089: LD_STRING , 
45091: STR
45092: PUSH
45093: LD_VAR 0 3
45097: PPUSH
45098: LD_INT 1
45100: PPUSH
45101: CALL_OW 268
45105: STR
45106: PUSH
45107: LD_STRING , 
45109: STR
45110: PUSH
45111: LD_VAR 0 3
45115: PPUSH
45116: LD_INT 2
45118: PPUSH
45119: CALL_OW 268
45123: STR
45124: PUSH
45125: LD_STRING ],
45127: STR
45128: PPUSH
45129: CALL_OW 561
// end ;
45133: GO 45027
45135: POP
45136: POP
// AddToLog ( ]; ) ;
45137: LD_STRING ];
45139: PPUSH
45140: CALL_OW 561
// end ;
45144: LD_VAR 0 2
45148: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45149: LD_INT 0
45151: PPUSH
45152: PPUSH
45153: PPUSH
45154: PPUSH
45155: PPUSH
// if not area or not rate or not max then
45156: LD_VAR 0 1
45160: NOT
45161: PUSH
45162: LD_VAR 0 2
45166: NOT
45167: OR
45168: PUSH
45169: LD_VAR 0 4
45173: NOT
45174: OR
45175: IFFALSE 45179
// exit ;
45177: GO 45368
// while 1 do
45179: LD_INT 1
45181: IFFALSE 45368
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45183: LD_ADDR_VAR 0 9
45187: PUSH
45188: LD_VAR 0 1
45192: PPUSH
45193: LD_INT 1
45195: PPUSH
45196: CALL_OW 287
45200: PUSH
45201: LD_INT 10
45203: MUL
45204: ST_TO_ADDR
// r := rate / 10 ;
45205: LD_ADDR_VAR 0 7
45209: PUSH
45210: LD_VAR 0 2
45214: PUSH
45215: LD_INT 10
45217: DIVREAL
45218: ST_TO_ADDR
// time := 1 1$00 ;
45219: LD_ADDR_VAR 0 8
45223: PUSH
45224: LD_INT 2100
45226: ST_TO_ADDR
// if amount < min then
45227: LD_VAR 0 9
45231: PUSH
45232: LD_VAR 0 3
45236: LESS
45237: IFFALSE 45255
// r := r * 2 else
45239: LD_ADDR_VAR 0 7
45243: PUSH
45244: LD_VAR 0 7
45248: PUSH
45249: LD_INT 2
45251: MUL
45252: ST_TO_ADDR
45253: GO 45281
// if amount > max then
45255: LD_VAR 0 9
45259: PUSH
45260: LD_VAR 0 4
45264: GREATER
45265: IFFALSE 45281
// r := r / 2 ;
45267: LD_ADDR_VAR 0 7
45271: PUSH
45272: LD_VAR 0 7
45276: PUSH
45277: LD_INT 2
45279: DIVREAL
45280: ST_TO_ADDR
// time := time / r ;
45281: LD_ADDR_VAR 0 8
45285: PUSH
45286: LD_VAR 0 8
45290: PUSH
45291: LD_VAR 0 7
45295: DIVREAL
45296: ST_TO_ADDR
// if time < 0 then
45297: LD_VAR 0 8
45301: PUSH
45302: LD_INT 0
45304: LESS
45305: IFFALSE 45322
// time := time * - 1 ;
45307: LD_ADDR_VAR 0 8
45311: PUSH
45312: LD_VAR 0 8
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: MUL
45321: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
45322: LD_VAR 0 8
45326: PUSH
45327: LD_INT 35
45329: PPUSH
45330: LD_INT 875
45332: PPUSH
45333: CALL_OW 12
45337: PLUS
45338: PPUSH
45339: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
45343: LD_INT 1
45345: PPUSH
45346: LD_INT 5
45348: PPUSH
45349: CALL_OW 12
45353: PPUSH
45354: LD_VAR 0 1
45358: PPUSH
45359: LD_INT 1
45361: PPUSH
45362: CALL_OW 55
// end ;
45366: GO 45179
// end ;
45368: LD_VAR 0 5
45372: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
45373: LD_INT 0
45375: PPUSH
45376: PPUSH
45377: PPUSH
45378: PPUSH
45379: PPUSH
45380: PPUSH
45381: PPUSH
45382: PPUSH
// if not turrets or not factories then
45383: LD_VAR 0 1
45387: NOT
45388: PUSH
45389: LD_VAR 0 2
45393: NOT
45394: OR
45395: IFFALSE 45399
// exit ;
45397: GO 45706
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
45399: LD_ADDR_VAR 0 10
45403: PUSH
45404: LD_INT 5
45406: PUSH
45407: LD_INT 6
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: LD_INT 4
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 3
45426: PUSH
45427: LD_INT 5
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 24
45441: PUSH
45442: LD_INT 25
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 23
45451: PUSH
45452: LD_INT 27
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 42
45465: PUSH
45466: LD_INT 43
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 44
45475: PUSH
45476: LD_INT 46
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 45
45485: PUSH
45486: LD_INT 47
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: LIST
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: LIST
45502: ST_TO_ADDR
// result := [ ] ;
45503: LD_ADDR_VAR 0 3
45507: PUSH
45508: EMPTY
45509: ST_TO_ADDR
// for i in turrets do
45510: LD_ADDR_VAR 0 4
45514: PUSH
45515: LD_VAR 0 1
45519: PUSH
45520: FOR_IN
45521: IFFALSE 45704
// begin nat := GetNation ( i ) ;
45523: LD_ADDR_VAR 0 7
45527: PUSH
45528: LD_VAR 0 4
45532: PPUSH
45533: CALL_OW 248
45537: ST_TO_ADDR
// weapon := 0 ;
45538: LD_ADDR_VAR 0 8
45542: PUSH
45543: LD_INT 0
45545: ST_TO_ADDR
// if not nat then
45546: LD_VAR 0 7
45550: NOT
45551: IFFALSE 45555
// continue ;
45553: GO 45520
// for j in list [ nat ] do
45555: LD_ADDR_VAR 0 5
45559: PUSH
45560: LD_VAR 0 10
45564: PUSH
45565: LD_VAR 0 7
45569: ARRAY
45570: PUSH
45571: FOR_IN
45572: IFFALSE 45613
// if GetBWeapon ( i ) = j [ 1 ] then
45574: LD_VAR 0 4
45578: PPUSH
45579: CALL_OW 269
45583: PUSH
45584: LD_VAR 0 5
45588: PUSH
45589: LD_INT 1
45591: ARRAY
45592: EQUAL
45593: IFFALSE 45611
// begin weapon := j [ 2 ] ;
45595: LD_ADDR_VAR 0 8
45599: PUSH
45600: LD_VAR 0 5
45604: PUSH
45605: LD_INT 2
45607: ARRAY
45608: ST_TO_ADDR
// break ;
45609: GO 45613
// end ;
45611: GO 45571
45613: POP
45614: POP
// if not weapon then
45615: LD_VAR 0 8
45619: NOT
45620: IFFALSE 45624
// continue ;
45622: GO 45520
// for k in factories do
45624: LD_ADDR_VAR 0 6
45628: PUSH
45629: LD_VAR 0 2
45633: PUSH
45634: FOR_IN
45635: IFFALSE 45700
// begin weapons := AvailableWeaponList ( k ) ;
45637: LD_ADDR_VAR 0 9
45641: PUSH
45642: LD_VAR 0 6
45646: PPUSH
45647: CALL_OW 478
45651: ST_TO_ADDR
// if not weapons then
45652: LD_VAR 0 9
45656: NOT
45657: IFFALSE 45661
// continue ;
45659: GO 45634
// if weapon in weapons then
45661: LD_VAR 0 8
45665: PUSH
45666: LD_VAR 0 9
45670: IN
45671: IFFALSE 45698
// begin result := [ i , weapon ] ;
45673: LD_ADDR_VAR 0 3
45677: PUSH
45678: LD_VAR 0 4
45682: PUSH
45683: LD_VAR 0 8
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: ST_TO_ADDR
// exit ;
45692: POP
45693: POP
45694: POP
45695: POP
45696: GO 45706
// end ; end ;
45698: GO 45634
45700: POP
45701: POP
// end ;
45702: GO 45520
45704: POP
45705: POP
// end ;
45706: LD_VAR 0 3
45710: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
45711: LD_INT 0
45713: PPUSH
// if not side or side > 8 then
45714: LD_VAR 0 3
45718: NOT
45719: PUSH
45720: LD_VAR 0 3
45724: PUSH
45725: LD_INT 8
45727: GREATER
45728: OR
45729: IFFALSE 45733
// exit ;
45731: GO 45792
// if not range then
45733: LD_VAR 0 4
45737: NOT
45738: IFFALSE 45749
// range := - 12 ;
45740: LD_ADDR_VAR 0 4
45744: PUSH
45745: LD_INT 12
45747: NEG
45748: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
45749: LD_VAR 0 1
45753: PPUSH
45754: LD_VAR 0 2
45758: PPUSH
45759: LD_VAR 0 3
45763: PPUSH
45764: LD_VAR 0 4
45768: PPUSH
45769: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
45773: LD_VAR 0 1
45777: PPUSH
45778: LD_VAR 0 2
45782: PPUSH
45783: LD_VAR 0 3
45787: PPUSH
45788: CALL_OW 331
// end ;
45792: LD_VAR 0 5
45796: RET
// export function Video ( mode ) ; begin
45797: LD_INT 0
45799: PPUSH
// ingame_video = mode ;
45800: LD_ADDR_OWVAR 52
45804: PUSH
45805: LD_VAR 0 1
45809: ST_TO_ADDR
// interface_hidden = mode ;
45810: LD_ADDR_OWVAR 54
45814: PUSH
45815: LD_VAR 0 1
45819: ST_TO_ADDR
// end ;
45820: LD_VAR 0 2
45824: RET
// export function Join ( array , element ) ; begin
45825: LD_INT 0
45827: PPUSH
// result := Replace ( array , array + 1 , element ) ;
45828: LD_ADDR_VAR 0 3
45832: PUSH
45833: LD_VAR 0 1
45837: PPUSH
45838: LD_VAR 0 1
45842: PUSH
45843: LD_INT 1
45845: PLUS
45846: PPUSH
45847: LD_VAR 0 2
45851: PPUSH
45852: CALL_OW 1
45856: ST_TO_ADDR
// end ;
45857: LD_VAR 0 3
45861: RET
// export function JoinUnion ( array , element ) ; begin
45862: LD_INT 0
45864: PPUSH
// result := array union element ;
45865: LD_ADDR_VAR 0 3
45869: PUSH
45870: LD_VAR 0 1
45874: PUSH
45875: LD_VAR 0 2
45879: UNION
45880: ST_TO_ADDR
// end ;
45881: LD_VAR 0 3
45885: RET
// export function GetBehemoths ( side ) ; begin
45886: LD_INT 0
45888: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
45889: LD_ADDR_VAR 0 2
45893: PUSH
45894: LD_INT 22
45896: PUSH
45897: LD_VAR 0 1
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 31
45908: PUSH
45909: LD_INT 25
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PPUSH
45920: CALL_OW 69
45924: ST_TO_ADDR
// end ;
45925: LD_VAR 0 2
45929: RET
// export function Shuffle ( array ) ; var i , index ; begin
45930: LD_INT 0
45932: PPUSH
45933: PPUSH
45934: PPUSH
// result := [ ] ;
45935: LD_ADDR_VAR 0 2
45939: PUSH
45940: EMPTY
45941: ST_TO_ADDR
// if not array then
45942: LD_VAR 0 1
45946: NOT
45947: IFFALSE 45951
// exit ;
45949: GO 46050
// Randomize ;
45951: CALL_OW 10
// for i = array downto 1 do
45955: LD_ADDR_VAR 0 3
45959: PUSH
45960: DOUBLE
45961: LD_VAR 0 1
45965: INC
45966: ST_TO_ADDR
45967: LD_INT 1
45969: PUSH
45970: FOR_DOWNTO
45971: IFFALSE 46048
// begin index := rand ( 1 , array ) ;
45973: LD_ADDR_VAR 0 4
45977: PUSH
45978: LD_INT 1
45980: PPUSH
45981: LD_VAR 0 1
45985: PPUSH
45986: CALL_OW 12
45990: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
45991: LD_ADDR_VAR 0 2
45995: PUSH
45996: LD_VAR 0 2
46000: PPUSH
46001: LD_VAR 0 2
46005: PUSH
46006: LD_INT 1
46008: PLUS
46009: PPUSH
46010: LD_VAR 0 1
46014: PUSH
46015: LD_VAR 0 4
46019: ARRAY
46020: PPUSH
46021: CALL_OW 2
46025: ST_TO_ADDR
// array := Delete ( array , index ) ;
46026: LD_ADDR_VAR 0 1
46030: PUSH
46031: LD_VAR 0 1
46035: PPUSH
46036: LD_VAR 0 4
46040: PPUSH
46041: CALL_OW 3
46045: ST_TO_ADDR
// end ;
46046: GO 45970
46048: POP
46049: POP
// end ;
46050: LD_VAR 0 2
46054: RET
// export function GetBaseMaterials ( base ) ; begin
46055: LD_INT 0
46057: PPUSH
// result := [ 0 , 0 , 0 ] ;
46058: LD_ADDR_VAR 0 2
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: LIST
46076: ST_TO_ADDR
// if not base then
46077: LD_VAR 0 1
46081: NOT
46082: IFFALSE 46086
// exit ;
46084: GO 46135
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46086: LD_ADDR_VAR 0 2
46090: PUSH
46091: LD_VAR 0 1
46095: PPUSH
46096: LD_INT 1
46098: PPUSH
46099: CALL_OW 275
46103: PUSH
46104: LD_VAR 0 1
46108: PPUSH
46109: LD_INT 2
46111: PPUSH
46112: CALL_OW 275
46116: PUSH
46117: LD_VAR 0 1
46121: PPUSH
46122: LD_INT 3
46124: PPUSH
46125: CALL_OW 275
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: LIST
46134: ST_TO_ADDR
// end ;
46135: LD_VAR 0 2
46139: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46140: LD_INT 0
46142: PPUSH
46143: PPUSH
// result := array ;
46144: LD_ADDR_VAR 0 3
46148: PUSH
46149: LD_VAR 0 1
46153: ST_TO_ADDR
// if size >= result then
46154: LD_VAR 0 2
46158: PUSH
46159: LD_VAR 0 3
46163: GREATEREQUAL
46164: IFFALSE 46168
// exit ;
46166: GO 46218
// if size then
46168: LD_VAR 0 2
46172: IFFALSE 46218
// for i := array downto size do
46174: LD_ADDR_VAR 0 4
46178: PUSH
46179: DOUBLE
46180: LD_VAR 0 1
46184: INC
46185: ST_TO_ADDR
46186: LD_VAR 0 2
46190: PUSH
46191: FOR_DOWNTO
46192: IFFALSE 46216
// result := Delete ( result , result ) ;
46194: LD_ADDR_VAR 0 3
46198: PUSH
46199: LD_VAR 0 3
46203: PPUSH
46204: LD_VAR 0 3
46208: PPUSH
46209: CALL_OW 3
46213: ST_TO_ADDR
46214: GO 46191
46216: POP
46217: POP
// end ;
46218: LD_VAR 0 3
46222: RET
// export function ComExit ( unit ) ; var tmp ; begin
46223: LD_INT 0
46225: PPUSH
46226: PPUSH
// if not IsInUnit ( unit ) then
46227: LD_VAR 0 1
46231: PPUSH
46232: CALL_OW 310
46236: NOT
46237: IFFALSE 46241
// exit ;
46239: GO 46301
// tmp := IsInUnit ( unit ) ;
46241: LD_ADDR_VAR 0 3
46245: PUSH
46246: LD_VAR 0 1
46250: PPUSH
46251: CALL_OW 310
46255: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
46256: LD_VAR 0 3
46260: PPUSH
46261: CALL_OW 247
46265: PUSH
46266: LD_INT 2
46268: EQUAL
46269: IFFALSE 46282
// ComExitVehicle ( unit ) else
46271: LD_VAR 0 1
46275: PPUSH
46276: CALL_OW 121
46280: GO 46291
// ComExitBuilding ( unit ) ;
46282: LD_VAR 0 1
46286: PPUSH
46287: CALL_OW 122
// result := tmp ;
46291: LD_ADDR_VAR 0 2
46295: PUSH
46296: LD_VAR 0 3
46300: ST_TO_ADDR
// end ;
46301: LD_VAR 0 2
46305: RET
// export function ComExitAll ( units ) ; var i ; begin
46306: LD_INT 0
46308: PPUSH
46309: PPUSH
// if not units then
46310: LD_VAR 0 1
46314: NOT
46315: IFFALSE 46319
// exit ;
46317: GO 46345
// for i in units do
46319: LD_ADDR_VAR 0 3
46323: PUSH
46324: LD_VAR 0 1
46328: PUSH
46329: FOR_IN
46330: IFFALSE 46343
// ComExit ( i ) ;
46332: LD_VAR 0 3
46336: PPUSH
46337: CALL 46223 0 1
46341: GO 46329
46343: POP
46344: POP
// end ;
46345: LD_VAR 0 2
46349: RET
// export function ResetHc ; begin
46350: LD_INT 0
46352: PPUSH
// InitHc ;
46353: CALL_OW 19
// hc_importance := 0 ;
46357: LD_ADDR_OWVAR 32
46361: PUSH
46362: LD_INT 0
46364: ST_TO_ADDR
// end ;
46365: LD_VAR 0 1
46369: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
46370: LD_INT 0
46372: PPUSH
46373: PPUSH
46374: PPUSH
// _x := ( x1 + x2 ) div 2 ;
46375: LD_ADDR_VAR 0 6
46379: PUSH
46380: LD_VAR 0 1
46384: PUSH
46385: LD_VAR 0 3
46389: PLUS
46390: PUSH
46391: LD_INT 2
46393: DIV
46394: ST_TO_ADDR
// if _x < 0 then
46395: LD_VAR 0 6
46399: PUSH
46400: LD_INT 0
46402: LESS
46403: IFFALSE 46420
// _x := _x * - 1 ;
46405: LD_ADDR_VAR 0 6
46409: PUSH
46410: LD_VAR 0 6
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: MUL
46419: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
46420: LD_ADDR_VAR 0 7
46424: PUSH
46425: LD_VAR 0 2
46429: PUSH
46430: LD_VAR 0 4
46434: PLUS
46435: PUSH
46436: LD_INT 2
46438: DIV
46439: ST_TO_ADDR
// if _y < 0 then
46440: LD_VAR 0 7
46444: PUSH
46445: LD_INT 0
46447: LESS
46448: IFFALSE 46465
// _y := _y * - 1 ;
46450: LD_ADDR_VAR 0 7
46454: PUSH
46455: LD_VAR 0 7
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: MUL
46464: ST_TO_ADDR
// result := [ _x , _y ] ;
46465: LD_ADDR_VAR 0 5
46469: PUSH
46470: LD_VAR 0 6
46474: PUSH
46475: LD_VAR 0 7
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: ST_TO_ADDR
// end ;
46484: LD_VAR 0 5
46488: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
46489: LD_INT 0
46491: PPUSH
46492: PPUSH
46493: PPUSH
46494: PPUSH
// task := GetTaskList ( unit ) ;
46495: LD_ADDR_VAR 0 7
46499: PUSH
46500: LD_VAR 0 1
46504: PPUSH
46505: CALL_OW 437
46509: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
46510: LD_VAR 0 7
46514: NOT
46515: PUSH
46516: LD_VAR 0 1
46520: PPUSH
46521: LD_VAR 0 2
46525: PPUSH
46526: CALL_OW 308
46530: NOT
46531: AND
46532: IFFALSE 46536
// exit ;
46534: GO 46654
// if IsInArea ( unit , area ) then
46536: LD_VAR 0 1
46540: PPUSH
46541: LD_VAR 0 2
46545: PPUSH
46546: CALL_OW 308
46550: IFFALSE 46568
// begin ComMoveToArea ( unit , goAway ) ;
46552: LD_VAR 0 1
46556: PPUSH
46557: LD_VAR 0 3
46561: PPUSH
46562: CALL_OW 113
// exit ;
46566: GO 46654
// end ; if task [ 1 ] [ 1 ] <> M then
46568: LD_VAR 0 7
46572: PUSH
46573: LD_INT 1
46575: ARRAY
46576: PUSH
46577: LD_INT 1
46579: ARRAY
46580: PUSH
46581: LD_STRING M
46583: NONEQUAL
46584: IFFALSE 46588
// exit ;
46586: GO 46654
// x := task [ 1 ] [ 2 ] ;
46588: LD_ADDR_VAR 0 5
46592: PUSH
46593: LD_VAR 0 7
46597: PUSH
46598: LD_INT 1
46600: ARRAY
46601: PUSH
46602: LD_INT 2
46604: ARRAY
46605: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
46606: LD_ADDR_VAR 0 6
46610: PUSH
46611: LD_VAR 0 7
46615: PUSH
46616: LD_INT 1
46618: ARRAY
46619: PUSH
46620: LD_INT 3
46622: ARRAY
46623: ST_TO_ADDR
// if InArea ( x , y , area ) then
46624: LD_VAR 0 5
46628: PPUSH
46629: LD_VAR 0 6
46633: PPUSH
46634: LD_VAR 0 2
46638: PPUSH
46639: CALL_OW 309
46643: IFFALSE 46654
// ComStop ( unit ) ;
46645: LD_VAR 0 1
46649: PPUSH
46650: CALL_OW 141
// end ;
46654: LD_VAR 0 4
46658: RET
// export function Abs ( value ) ; begin
46659: LD_INT 0
46661: PPUSH
// result := value ;
46662: LD_ADDR_VAR 0 2
46666: PUSH
46667: LD_VAR 0 1
46671: ST_TO_ADDR
// if value < 0 then
46672: LD_VAR 0 1
46676: PUSH
46677: LD_INT 0
46679: LESS
46680: IFFALSE 46697
// result := value * - 1 ;
46682: LD_ADDR_VAR 0 2
46686: PUSH
46687: LD_VAR 0 1
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: MUL
46696: ST_TO_ADDR
// end ;
46697: LD_VAR 0 2
46701: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
46702: LD_INT 0
46704: PPUSH
46705: PPUSH
46706: PPUSH
46707: PPUSH
46708: PPUSH
46709: PPUSH
46710: PPUSH
46711: PPUSH
// if not unit or not building then
46712: LD_VAR 0 1
46716: NOT
46717: PUSH
46718: LD_VAR 0 2
46722: NOT
46723: OR
46724: IFFALSE 46728
// exit ;
46726: GO 46954
// x := GetX ( building ) ;
46728: LD_ADDR_VAR 0 4
46732: PUSH
46733: LD_VAR 0 2
46737: PPUSH
46738: CALL_OW 250
46742: ST_TO_ADDR
// y := GetY ( building ) ;
46743: LD_ADDR_VAR 0 6
46747: PUSH
46748: LD_VAR 0 2
46752: PPUSH
46753: CALL_OW 251
46757: ST_TO_ADDR
// d := GetDir ( building ) ;
46758: LD_ADDR_VAR 0 8
46762: PUSH
46763: LD_VAR 0 2
46767: PPUSH
46768: CALL_OW 254
46772: ST_TO_ADDR
// r := 4 ;
46773: LD_ADDR_VAR 0 9
46777: PUSH
46778: LD_INT 4
46780: ST_TO_ADDR
// for i := 1 to 5 do
46781: LD_ADDR_VAR 0 10
46785: PUSH
46786: DOUBLE
46787: LD_INT 1
46789: DEC
46790: ST_TO_ADDR
46791: LD_INT 5
46793: PUSH
46794: FOR_TO
46795: IFFALSE 46952
// begin _x := ShiftX ( x , d , r + i ) ;
46797: LD_ADDR_VAR 0 5
46801: PUSH
46802: LD_VAR 0 4
46806: PPUSH
46807: LD_VAR 0 8
46811: PPUSH
46812: LD_VAR 0 9
46816: PUSH
46817: LD_VAR 0 10
46821: PLUS
46822: PPUSH
46823: CALL_OW 272
46827: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
46828: LD_ADDR_VAR 0 7
46832: PUSH
46833: LD_VAR 0 6
46837: PPUSH
46838: LD_VAR 0 8
46842: PPUSH
46843: LD_VAR 0 9
46847: PUSH
46848: LD_VAR 0 10
46852: PLUS
46853: PPUSH
46854: CALL_OW 273
46858: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
46859: LD_VAR 0 5
46863: PPUSH
46864: LD_VAR 0 7
46868: PPUSH
46869: CALL_OW 488
46873: PUSH
46874: LD_VAR 0 5
46878: PPUSH
46879: LD_VAR 0 7
46883: PPUSH
46884: CALL_OW 428
46888: PPUSH
46889: CALL_OW 247
46893: PUSH
46894: LD_INT 3
46896: PUSH
46897: LD_INT 2
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: IN
46904: NOT
46905: AND
46906: IFFALSE 46950
// begin ComMoveXY ( unit , _x , _y ) ;
46908: LD_VAR 0 1
46912: PPUSH
46913: LD_VAR 0 5
46917: PPUSH
46918: LD_VAR 0 7
46922: PPUSH
46923: CALL_OW 111
// result := [ _x , _y ] ;
46927: LD_ADDR_VAR 0 3
46931: PUSH
46932: LD_VAR 0 5
46936: PUSH
46937: LD_VAR 0 7
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: ST_TO_ADDR
// exit ;
46946: POP
46947: POP
46948: GO 46954
// end ; end ;
46950: GO 46794
46952: POP
46953: POP
// end ;
46954: LD_VAR 0 3
46958: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
46959: LD_INT 0
46961: PPUSH
46962: PPUSH
46963: PPUSH
// result := 0 ;
46964: LD_ADDR_VAR 0 3
46968: PUSH
46969: LD_INT 0
46971: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
46972: LD_VAR 0 1
46976: PUSH
46977: LD_INT 0
46979: LESS
46980: PUSH
46981: LD_VAR 0 1
46985: PUSH
46986: LD_INT 8
46988: GREATER
46989: OR
46990: PUSH
46991: LD_VAR 0 2
46995: PUSH
46996: LD_INT 0
46998: LESS
46999: OR
47000: PUSH
47001: LD_VAR 0 2
47005: PUSH
47006: LD_INT 8
47008: GREATER
47009: OR
47010: IFFALSE 47014
// exit ;
47012: GO 47089
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47014: LD_ADDR_VAR 0 4
47018: PUSH
47019: LD_INT 22
47021: PUSH
47022: LD_VAR 0 2
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PPUSH
47031: CALL_OW 69
47035: PUSH
47036: FOR_IN
47037: IFFALSE 47087
// begin un := UnitShoot ( i ) ;
47039: LD_ADDR_VAR 0 5
47043: PUSH
47044: LD_VAR 0 4
47048: PPUSH
47049: CALL_OW 504
47053: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47054: LD_VAR 0 5
47058: PPUSH
47059: CALL_OW 255
47063: PUSH
47064: LD_VAR 0 1
47068: EQUAL
47069: IFFALSE 47085
// begin result := un ;
47071: LD_ADDR_VAR 0 3
47075: PUSH
47076: LD_VAR 0 5
47080: ST_TO_ADDR
// exit ;
47081: POP
47082: POP
47083: GO 47089
// end ; end ;
47085: GO 47036
47087: POP
47088: POP
// end ;
47089: LD_VAR 0 3
47093: RET
// export function GetCargoBay ( units ) ; begin
47094: LD_INT 0
47096: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47097: LD_ADDR_VAR 0 2
47101: PUSH
47102: LD_VAR 0 1
47106: PPUSH
47107: LD_INT 2
47109: PUSH
47110: LD_INT 34
47112: PUSH
47113: LD_INT 12
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 34
47122: PUSH
47123: LD_INT 51
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 34
47132: PUSH
47133: LD_INT 32
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 34
47142: PUSH
47143: LD_INT 89
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: PPUSH
47157: CALL_OW 72
47161: ST_TO_ADDR
// end ;
47162: LD_VAR 0 2
47166: RET
// export function Negate ( value ) ; begin
47167: LD_INT 0
47169: PPUSH
// result := not value ;
47170: LD_ADDR_VAR 0 2
47174: PUSH
47175: LD_VAR 0 1
47179: NOT
47180: ST_TO_ADDR
// end ;
47181: LD_VAR 0 2
47185: RET
// export function Inc ( value ) ; begin
47186: LD_INT 0
47188: PPUSH
// result := value + 1 ;
47189: LD_ADDR_VAR 0 2
47193: PUSH
47194: LD_VAR 0 1
47198: PUSH
47199: LD_INT 1
47201: PLUS
47202: ST_TO_ADDR
// end ;
47203: LD_VAR 0 2
47207: RET
// export function Dec ( value ) ; begin
47208: LD_INT 0
47210: PPUSH
// result := value - 1 ;
47211: LD_ADDR_VAR 0 2
47215: PUSH
47216: LD_VAR 0 1
47220: PUSH
47221: LD_INT 1
47223: MINUS
47224: ST_TO_ADDR
// end ;
47225: LD_VAR 0 2
47229: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
47230: LD_INT 0
47232: PPUSH
47233: PPUSH
47234: PPUSH
47235: PPUSH
47236: PPUSH
47237: PPUSH
47238: PPUSH
47239: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
47240: LD_VAR 0 1
47244: PPUSH
47245: LD_VAR 0 2
47249: PPUSH
47250: CALL_OW 488
47254: NOT
47255: PUSH
47256: LD_VAR 0 3
47260: PPUSH
47261: LD_VAR 0 4
47265: PPUSH
47266: CALL_OW 488
47270: NOT
47271: OR
47272: IFFALSE 47285
// begin result := - 1 ;
47274: LD_ADDR_VAR 0 5
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: ST_TO_ADDR
// exit ;
47283: GO 47520
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
47285: LD_ADDR_VAR 0 12
47289: PUSH
47290: LD_VAR 0 1
47294: PPUSH
47295: LD_VAR 0 2
47299: PPUSH
47300: LD_VAR 0 3
47304: PPUSH
47305: LD_VAR 0 4
47309: PPUSH
47310: CALL 46370 0 4
47314: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
47315: LD_ADDR_VAR 0 11
47319: PUSH
47320: LD_VAR 0 1
47324: PPUSH
47325: LD_VAR 0 2
47329: PPUSH
47330: LD_VAR 0 12
47334: PUSH
47335: LD_INT 1
47337: ARRAY
47338: PPUSH
47339: LD_VAR 0 12
47343: PUSH
47344: LD_INT 2
47346: ARRAY
47347: PPUSH
47348: CALL_OW 298
47352: ST_TO_ADDR
// distance := 9999 ;
47353: LD_ADDR_VAR 0 10
47357: PUSH
47358: LD_INT 9999
47360: ST_TO_ADDR
// for i := 0 to 5 do
47361: LD_ADDR_VAR 0 6
47365: PUSH
47366: DOUBLE
47367: LD_INT 0
47369: DEC
47370: ST_TO_ADDR
47371: LD_INT 5
47373: PUSH
47374: FOR_TO
47375: IFFALSE 47518
// begin _x := ShiftX ( x1 , i , centerDist ) ;
47377: LD_ADDR_VAR 0 7
47381: PUSH
47382: LD_VAR 0 1
47386: PPUSH
47387: LD_VAR 0 6
47391: PPUSH
47392: LD_VAR 0 11
47396: PPUSH
47397: CALL_OW 272
47401: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
47402: LD_ADDR_VAR 0 8
47406: PUSH
47407: LD_VAR 0 2
47411: PPUSH
47412: LD_VAR 0 6
47416: PPUSH
47417: LD_VAR 0 11
47421: PPUSH
47422: CALL_OW 273
47426: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47427: LD_VAR 0 7
47431: PPUSH
47432: LD_VAR 0 8
47436: PPUSH
47437: CALL_OW 488
47441: NOT
47442: IFFALSE 47446
// continue ;
47444: GO 47374
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
47446: LD_ADDR_VAR 0 9
47450: PUSH
47451: LD_VAR 0 12
47455: PUSH
47456: LD_INT 1
47458: ARRAY
47459: PPUSH
47460: LD_VAR 0 12
47464: PUSH
47465: LD_INT 2
47467: ARRAY
47468: PPUSH
47469: LD_VAR 0 7
47473: PPUSH
47474: LD_VAR 0 8
47478: PPUSH
47479: CALL_OW 298
47483: ST_TO_ADDR
// if tmp < distance then
47484: LD_VAR 0 9
47488: PUSH
47489: LD_VAR 0 10
47493: LESS
47494: IFFALSE 47516
// begin result := i ;
47496: LD_ADDR_VAR 0 5
47500: PUSH
47501: LD_VAR 0 6
47505: ST_TO_ADDR
// distance := tmp ;
47506: LD_ADDR_VAR 0 10
47510: PUSH
47511: LD_VAR 0 9
47515: ST_TO_ADDR
// end ; end ;
47516: GO 47374
47518: POP
47519: POP
// end ;
47520: LD_VAR 0 5
47524: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47525: LD_INT 0
47527: PPUSH
47528: PPUSH
// if not driver or not IsInUnit ( driver ) then
47529: LD_VAR 0 1
47533: NOT
47534: PUSH
47535: LD_VAR 0 1
47539: PPUSH
47540: CALL_OW 310
47544: NOT
47545: OR
47546: IFFALSE 47550
// exit ;
47548: GO 47640
// vehicle := IsInUnit ( driver ) ;
47550: LD_ADDR_VAR 0 3
47554: PUSH
47555: LD_VAR 0 1
47559: PPUSH
47560: CALL_OW 310
47564: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47565: LD_VAR 0 1
47569: PPUSH
47570: LD_STRING \
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: PUSH
47600: LD_STRING E
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: LD_VAR 0 3
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PPUSH
47636: CALL_OW 446
// end ;
47640: LD_VAR 0 2
47644: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47645: LD_INT 0
47647: PPUSH
47648: PPUSH
// if not driver or not IsInUnit ( driver ) then
47649: LD_VAR 0 1
47653: NOT
47654: PUSH
47655: LD_VAR 0 1
47659: PPUSH
47660: CALL_OW 310
47664: NOT
47665: OR
47666: IFFALSE 47670
// exit ;
47668: GO 47760
// vehicle := IsInUnit ( driver ) ;
47670: LD_ADDR_VAR 0 3
47674: PUSH
47675: LD_VAR 0 1
47679: PPUSH
47680: CALL_OW 310
47684: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47685: LD_VAR 0 1
47689: PPUSH
47690: LD_STRING \
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: PUSH
47720: LD_STRING E
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: LD_VAR 0 3
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PPUSH
47756: CALL_OW 447
// end ;
47760: LD_VAR 0 2
47764: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
47765: LD_INT 0
47767: PPUSH
47768: PPUSH
47769: PPUSH
// tmp := [ ] ;
47770: LD_ADDR_VAR 0 5
47774: PUSH
47775: EMPTY
47776: ST_TO_ADDR
// for i in units do
47777: LD_ADDR_VAR 0 4
47781: PUSH
47782: LD_VAR 0 1
47786: PUSH
47787: FOR_IN
47788: IFFALSE 47826
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
47790: LD_ADDR_VAR 0 5
47794: PUSH
47795: LD_VAR 0 5
47799: PPUSH
47800: LD_VAR 0 5
47804: PUSH
47805: LD_INT 1
47807: PLUS
47808: PPUSH
47809: LD_VAR 0 4
47813: PPUSH
47814: CALL_OW 256
47818: PPUSH
47819: CALL_OW 2
47823: ST_TO_ADDR
47824: GO 47787
47826: POP
47827: POP
// if not tmp then
47828: LD_VAR 0 5
47832: NOT
47833: IFFALSE 47837
// exit ;
47835: GO 47885
// if asc then
47837: LD_VAR 0 2
47841: IFFALSE 47865
// result := SortListByListAsc ( units , tmp ) else
47843: LD_ADDR_VAR 0 3
47847: PUSH
47848: LD_VAR 0 1
47852: PPUSH
47853: LD_VAR 0 5
47857: PPUSH
47858: CALL_OW 76
47862: ST_TO_ADDR
47863: GO 47885
// result := SortListByListDesc ( units , tmp ) ;
47865: LD_ADDR_VAR 0 3
47869: PUSH
47870: LD_VAR 0 1
47874: PPUSH
47875: LD_VAR 0 5
47879: PPUSH
47880: CALL_OW 77
47884: ST_TO_ADDR
// end ;
47885: LD_VAR 0 3
47889: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
47890: LD_INT 0
47892: PPUSH
47893: PPUSH
// task := GetTaskList ( mech ) ;
47894: LD_ADDR_VAR 0 4
47898: PUSH
47899: LD_VAR 0 1
47903: PPUSH
47904: CALL_OW 437
47908: ST_TO_ADDR
// if not task then
47909: LD_VAR 0 4
47913: NOT
47914: IFFALSE 47918
// exit ;
47916: GO 47960
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
47918: LD_ADDR_VAR 0 3
47922: PUSH
47923: LD_VAR 0 4
47927: PUSH
47928: LD_INT 1
47930: ARRAY
47931: PUSH
47932: LD_INT 1
47934: ARRAY
47935: PUSH
47936: LD_STRING r
47938: EQUAL
47939: PUSH
47940: LD_VAR 0 4
47944: PUSH
47945: LD_INT 1
47947: ARRAY
47948: PUSH
47949: LD_INT 4
47951: ARRAY
47952: PUSH
47953: LD_VAR 0 2
47957: EQUAL
47958: AND
47959: ST_TO_ADDR
// end ;
47960: LD_VAR 0 3
47964: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
47965: LD_INT 0
47967: PPUSH
// SetDir ( unit , d ) ;
47968: LD_VAR 0 1
47972: PPUSH
47973: LD_VAR 0 4
47977: PPUSH
47978: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
47982: LD_VAR 0 1
47986: PPUSH
47987: LD_VAR 0 2
47991: PPUSH
47992: LD_VAR 0 3
47996: PPUSH
47997: LD_VAR 0 5
48001: PPUSH
48002: CALL_OW 48
// end ;
48006: LD_VAR 0 6
48010: RET
// export function ToNaturalNumber ( number ) ; begin
48011: LD_INT 0
48013: PPUSH
// result := number div 1 ;
48014: LD_ADDR_VAR 0 2
48018: PUSH
48019: LD_VAR 0 1
48023: PUSH
48024: LD_INT 1
48026: DIV
48027: ST_TO_ADDR
// if number < 0 then
48028: LD_VAR 0 1
48032: PUSH
48033: LD_INT 0
48035: LESS
48036: IFFALSE 48046
// result := 0 ;
48038: LD_ADDR_VAR 0 2
48042: PUSH
48043: LD_INT 0
48045: ST_TO_ADDR
// end ;
48046: LD_VAR 0 2
48050: RET
// export function SortByClass ( units , class ) ; var un ; begin
48051: LD_INT 0
48053: PPUSH
48054: PPUSH
// if not units or not class then
48055: LD_VAR 0 1
48059: NOT
48060: PUSH
48061: LD_VAR 0 2
48065: NOT
48066: OR
48067: IFFALSE 48071
// exit ;
48069: GO 48166
// result := [ ] ;
48071: LD_ADDR_VAR 0 3
48075: PUSH
48076: EMPTY
48077: ST_TO_ADDR
// for un in units do
48078: LD_ADDR_VAR 0 4
48082: PUSH
48083: LD_VAR 0 1
48087: PUSH
48088: FOR_IN
48089: IFFALSE 48164
// if GetClass ( un ) = class then
48091: LD_VAR 0 4
48095: PPUSH
48096: CALL_OW 257
48100: PUSH
48101: LD_VAR 0 2
48105: EQUAL
48106: IFFALSE 48133
// result := Insert ( result , 1 , un ) else
48108: LD_ADDR_VAR 0 3
48112: PUSH
48113: LD_VAR 0 3
48117: PPUSH
48118: LD_INT 1
48120: PPUSH
48121: LD_VAR 0 4
48125: PPUSH
48126: CALL_OW 2
48130: ST_TO_ADDR
48131: GO 48162
// result := Replace ( result , result + 1 , un ) ;
48133: LD_ADDR_VAR 0 3
48137: PUSH
48138: LD_VAR 0 3
48142: PPUSH
48143: LD_VAR 0 3
48147: PUSH
48148: LD_INT 1
48150: PLUS
48151: PPUSH
48152: LD_VAR 0 4
48156: PPUSH
48157: CALL_OW 1
48161: ST_TO_ADDR
48162: GO 48088
48164: POP
48165: POP
// end ;
48166: LD_VAR 0 3
48170: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
48171: LD_INT 0
48173: PPUSH
48174: PPUSH
48175: PPUSH
48176: PPUSH
48177: PPUSH
48178: PPUSH
48179: PPUSH
// result := [ ] ;
48180: LD_ADDR_VAR 0 4
48184: PUSH
48185: EMPTY
48186: ST_TO_ADDR
// if x - r < 0 then
48187: LD_VAR 0 1
48191: PUSH
48192: LD_VAR 0 3
48196: MINUS
48197: PUSH
48198: LD_INT 0
48200: LESS
48201: IFFALSE 48213
// min_x := 0 else
48203: LD_ADDR_VAR 0 8
48207: PUSH
48208: LD_INT 0
48210: ST_TO_ADDR
48211: GO 48229
// min_x := x - r ;
48213: LD_ADDR_VAR 0 8
48217: PUSH
48218: LD_VAR 0 1
48222: PUSH
48223: LD_VAR 0 3
48227: MINUS
48228: ST_TO_ADDR
// if y - r < 0 then
48229: LD_VAR 0 2
48233: PUSH
48234: LD_VAR 0 3
48238: MINUS
48239: PUSH
48240: LD_INT 0
48242: LESS
48243: IFFALSE 48255
// min_y := 0 else
48245: LD_ADDR_VAR 0 7
48249: PUSH
48250: LD_INT 0
48252: ST_TO_ADDR
48253: GO 48271
// min_y := y - r ;
48255: LD_ADDR_VAR 0 7
48259: PUSH
48260: LD_VAR 0 2
48264: PUSH
48265: LD_VAR 0 3
48269: MINUS
48270: ST_TO_ADDR
// max_x := x + r ;
48271: LD_ADDR_VAR 0 9
48275: PUSH
48276: LD_VAR 0 1
48280: PUSH
48281: LD_VAR 0 3
48285: PLUS
48286: ST_TO_ADDR
// max_y := y + r ;
48287: LD_ADDR_VAR 0 10
48291: PUSH
48292: LD_VAR 0 2
48296: PUSH
48297: LD_VAR 0 3
48301: PLUS
48302: ST_TO_ADDR
// for _x = min_x to max_x do
48303: LD_ADDR_VAR 0 5
48307: PUSH
48308: DOUBLE
48309: LD_VAR 0 8
48313: DEC
48314: ST_TO_ADDR
48315: LD_VAR 0 9
48319: PUSH
48320: FOR_TO
48321: IFFALSE 48422
// for _y = min_y to max_y do
48323: LD_ADDR_VAR 0 6
48327: PUSH
48328: DOUBLE
48329: LD_VAR 0 7
48333: DEC
48334: ST_TO_ADDR
48335: LD_VAR 0 10
48339: PUSH
48340: FOR_TO
48341: IFFALSE 48418
// begin if not ValidHex ( _x , _y ) then
48343: LD_VAR 0 5
48347: PPUSH
48348: LD_VAR 0 6
48352: PPUSH
48353: CALL_OW 488
48357: NOT
48358: IFFALSE 48362
// continue ;
48360: GO 48340
// if GetResourceTypeXY ( _x , _y ) then
48362: LD_VAR 0 5
48366: PPUSH
48367: LD_VAR 0 6
48371: PPUSH
48372: CALL_OW 283
48376: IFFALSE 48416
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
48378: LD_ADDR_VAR 0 4
48382: PUSH
48383: LD_VAR 0 4
48387: PPUSH
48388: LD_VAR 0 4
48392: PUSH
48393: LD_INT 1
48395: PLUS
48396: PPUSH
48397: LD_VAR 0 5
48401: PUSH
48402: LD_VAR 0 6
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PPUSH
48411: CALL_OW 1
48415: ST_TO_ADDR
// end ;
48416: GO 48340
48418: POP
48419: POP
48420: GO 48320
48422: POP
48423: POP
// end ;
48424: LD_VAR 0 4
48428: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
48429: LD_INT 0
48431: PPUSH
48432: PPUSH
48433: PPUSH
48434: PPUSH
48435: PPUSH
48436: PPUSH
48437: PPUSH
48438: PPUSH
// if not units then
48439: LD_VAR 0 1
48443: NOT
48444: IFFALSE 48448
// exit ;
48446: GO 48972
// result := UnitFilter ( units , [ f_ok ] ) ;
48448: LD_ADDR_VAR 0 3
48452: PUSH
48453: LD_VAR 0 1
48457: PPUSH
48458: LD_INT 50
48460: PUSH
48461: EMPTY
48462: LIST
48463: PPUSH
48464: CALL_OW 72
48468: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
48469: LD_ADDR_VAR 0 8
48473: PUSH
48474: LD_VAR 0 1
48478: PUSH
48479: LD_INT 1
48481: ARRAY
48482: PPUSH
48483: CALL_OW 255
48487: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
48488: LD_ADDR_VAR 0 10
48492: PUSH
48493: LD_INT 29
48495: PUSH
48496: LD_INT 91
48498: PUSH
48499: LD_INT 49
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: LIST
48506: ST_TO_ADDR
// if not result then
48507: LD_VAR 0 3
48511: NOT
48512: IFFALSE 48516
// exit ;
48514: GO 48972
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
48516: LD_ADDR_VAR 0 5
48520: PUSH
48521: LD_INT 81
48523: PUSH
48524: LD_VAR 0 8
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PPUSH
48533: CALL_OW 69
48537: ST_TO_ADDR
// for i in result do
48538: LD_ADDR_VAR 0 4
48542: PUSH
48543: LD_VAR 0 3
48547: PUSH
48548: FOR_IN
48549: IFFALSE 48970
// begin tag := GetTag ( i ) + 1 ;
48551: LD_ADDR_VAR 0 9
48555: PUSH
48556: LD_VAR 0 4
48560: PPUSH
48561: CALL_OW 110
48565: PUSH
48566: LD_INT 1
48568: PLUS
48569: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
48570: LD_ADDR_VAR 0 7
48574: PUSH
48575: LD_VAR 0 4
48579: PPUSH
48580: CALL_OW 250
48584: PPUSH
48585: LD_VAR 0 4
48589: PPUSH
48590: CALL_OW 251
48594: PPUSH
48595: LD_INT 6
48597: PPUSH
48598: CALL 48171 0 3
48602: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
48603: LD_VAR 0 4
48607: PPUSH
48608: CALL_OW 247
48612: PUSH
48613: LD_INT 2
48615: EQUAL
48616: PUSH
48617: LD_VAR 0 7
48621: AND
48622: PUSH
48623: LD_VAR 0 4
48627: PPUSH
48628: CALL_OW 264
48632: PUSH
48633: LD_VAR 0 10
48637: IN
48638: NOT
48639: AND
48640: IFFALSE 48679
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
48642: LD_VAR 0 4
48646: PPUSH
48647: LD_VAR 0 7
48651: PUSH
48652: LD_INT 1
48654: ARRAY
48655: PUSH
48656: LD_INT 1
48658: ARRAY
48659: PPUSH
48660: LD_VAR 0 7
48664: PUSH
48665: LD_INT 1
48667: ARRAY
48668: PUSH
48669: LD_INT 2
48671: ARRAY
48672: PPUSH
48673: CALL_OW 116
48677: GO 48968
// if path > tag then
48679: LD_VAR 0 2
48683: PUSH
48684: LD_VAR 0 9
48688: GREATER
48689: IFFALSE 48897
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
48691: LD_ADDR_VAR 0 6
48695: PUSH
48696: LD_VAR 0 5
48700: PPUSH
48701: LD_INT 91
48703: PUSH
48704: LD_VAR 0 4
48708: PUSH
48709: LD_INT 8
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: LIST
48716: PPUSH
48717: CALL_OW 72
48721: ST_TO_ADDR
// if nearEnemy then
48722: LD_VAR 0 6
48726: IFFALSE 48795
// begin if GetWeapon ( i ) = ru_time_lapser then
48728: LD_VAR 0 4
48732: PPUSH
48733: CALL_OW 264
48737: PUSH
48738: LD_INT 49
48740: EQUAL
48741: IFFALSE 48769
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
48743: LD_VAR 0 4
48747: PPUSH
48748: LD_VAR 0 6
48752: PPUSH
48753: LD_VAR 0 4
48757: PPUSH
48758: CALL_OW 74
48762: PPUSH
48763: CALL_OW 112
48767: GO 48793
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
48769: LD_VAR 0 4
48773: PPUSH
48774: LD_VAR 0 6
48778: PPUSH
48779: LD_VAR 0 4
48783: PPUSH
48784: CALL_OW 74
48788: PPUSH
48789: CALL_OW 115
// end else
48793: GO 48895
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
48795: LD_VAR 0 4
48799: PPUSH
48800: LD_VAR 0 2
48804: PUSH
48805: LD_VAR 0 9
48809: ARRAY
48810: PUSH
48811: LD_INT 1
48813: ARRAY
48814: PPUSH
48815: LD_VAR 0 2
48819: PUSH
48820: LD_VAR 0 9
48824: ARRAY
48825: PUSH
48826: LD_INT 2
48828: ARRAY
48829: PPUSH
48830: CALL_OW 297
48834: PUSH
48835: LD_INT 6
48837: GREATER
48838: IFFALSE 48881
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
48840: LD_VAR 0 4
48844: PPUSH
48845: LD_VAR 0 2
48849: PUSH
48850: LD_VAR 0 9
48854: ARRAY
48855: PUSH
48856: LD_INT 1
48858: ARRAY
48859: PPUSH
48860: LD_VAR 0 2
48864: PUSH
48865: LD_VAR 0 9
48869: ARRAY
48870: PUSH
48871: LD_INT 2
48873: ARRAY
48874: PPUSH
48875: CALL_OW 114
48879: GO 48895
// SetTag ( i , tag ) ;
48881: LD_VAR 0 4
48885: PPUSH
48886: LD_VAR 0 9
48890: PPUSH
48891: CALL_OW 109
// end else
48895: GO 48968
// if enemy then
48897: LD_VAR 0 5
48901: IFFALSE 48968
// begin if GetWeapon ( i ) = ru_time_lapser then
48903: LD_VAR 0 4
48907: PPUSH
48908: CALL_OW 264
48912: PUSH
48913: LD_INT 49
48915: EQUAL
48916: IFFALSE 48944
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
48918: LD_VAR 0 4
48922: PPUSH
48923: LD_VAR 0 5
48927: PPUSH
48928: LD_VAR 0 4
48932: PPUSH
48933: CALL_OW 74
48937: PPUSH
48938: CALL_OW 112
48942: GO 48968
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
48944: LD_VAR 0 4
48948: PPUSH
48949: LD_VAR 0 5
48953: PPUSH
48954: LD_VAR 0 4
48958: PPUSH
48959: CALL_OW 74
48963: PPUSH
48964: CALL_OW 115
// end ; end ;
48968: GO 48548
48970: POP
48971: POP
// end ;
48972: LD_VAR 0 3
48976: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
48977: LD_INT 0
48979: PPUSH
48980: PPUSH
48981: PPUSH
// if not unit or IsInUnit ( unit ) then
48982: LD_VAR 0 1
48986: NOT
48987: PUSH
48988: LD_VAR 0 1
48992: PPUSH
48993: CALL_OW 310
48997: OR
48998: IFFALSE 49002
// exit ;
49000: GO 49093
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49002: LD_ADDR_VAR 0 4
49006: PUSH
49007: LD_VAR 0 1
49011: PPUSH
49012: CALL_OW 250
49016: PPUSH
49017: LD_VAR 0 2
49021: PPUSH
49022: LD_INT 1
49024: PPUSH
49025: CALL_OW 272
49029: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49030: LD_ADDR_VAR 0 5
49034: PUSH
49035: LD_VAR 0 1
49039: PPUSH
49040: CALL_OW 251
49044: PPUSH
49045: LD_VAR 0 2
49049: PPUSH
49050: LD_INT 1
49052: PPUSH
49053: CALL_OW 273
49057: ST_TO_ADDR
// if ValidHex ( x , y ) then
49058: LD_VAR 0 4
49062: PPUSH
49063: LD_VAR 0 5
49067: PPUSH
49068: CALL_OW 488
49072: IFFALSE 49093
// ComTurnXY ( unit , x , y ) ;
49074: LD_VAR 0 1
49078: PPUSH
49079: LD_VAR 0 4
49083: PPUSH
49084: LD_VAR 0 5
49088: PPUSH
49089: CALL_OW 118
// end ;
49093: LD_VAR 0 3
49097: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49098: LD_INT 0
49100: PPUSH
49101: PPUSH
// result := false ;
49102: LD_ADDR_VAR 0 3
49106: PUSH
49107: LD_INT 0
49109: ST_TO_ADDR
// if not units then
49110: LD_VAR 0 2
49114: NOT
49115: IFFALSE 49119
// exit ;
49117: GO 49164
// for i in units do
49119: LD_ADDR_VAR 0 4
49123: PUSH
49124: LD_VAR 0 2
49128: PUSH
49129: FOR_IN
49130: IFFALSE 49162
// if See ( side , i ) then
49132: LD_VAR 0 1
49136: PPUSH
49137: LD_VAR 0 4
49141: PPUSH
49142: CALL_OW 292
49146: IFFALSE 49160
// begin result := true ;
49148: LD_ADDR_VAR 0 3
49152: PUSH
49153: LD_INT 1
49155: ST_TO_ADDR
// exit ;
49156: POP
49157: POP
49158: GO 49164
// end ;
49160: GO 49129
49162: POP
49163: POP
// end ;
49164: LD_VAR 0 3
49168: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49169: LD_INT 0
49171: PPUSH
49172: PPUSH
49173: PPUSH
49174: PPUSH
// if not unit or not points then
49175: LD_VAR 0 1
49179: NOT
49180: PUSH
49181: LD_VAR 0 2
49185: NOT
49186: OR
49187: IFFALSE 49191
// exit ;
49189: GO 49281
// dist := 99999 ;
49191: LD_ADDR_VAR 0 5
49195: PUSH
49196: LD_INT 99999
49198: ST_TO_ADDR
// for i in points do
49199: LD_ADDR_VAR 0 4
49203: PUSH
49204: LD_VAR 0 2
49208: PUSH
49209: FOR_IN
49210: IFFALSE 49279
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49212: LD_ADDR_VAR 0 6
49216: PUSH
49217: LD_VAR 0 1
49221: PPUSH
49222: LD_VAR 0 4
49226: PUSH
49227: LD_INT 1
49229: ARRAY
49230: PPUSH
49231: LD_VAR 0 4
49235: PUSH
49236: LD_INT 2
49238: ARRAY
49239: PPUSH
49240: CALL_OW 297
49244: ST_TO_ADDR
// if tmpDist < dist then
49245: LD_VAR 0 6
49249: PUSH
49250: LD_VAR 0 5
49254: LESS
49255: IFFALSE 49277
// begin result := i ;
49257: LD_ADDR_VAR 0 3
49261: PUSH
49262: LD_VAR 0 4
49266: ST_TO_ADDR
// dist := tmpDist ;
49267: LD_ADDR_VAR 0 5
49271: PUSH
49272: LD_VAR 0 6
49276: ST_TO_ADDR
// end ; end ;
49277: GO 49209
49279: POP
49280: POP
// end ;
49281: LD_VAR 0 3
49285: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
49286: LD_INT 0
49288: PPUSH
// uc_side := side ;
49289: LD_ADDR_OWVAR 20
49293: PUSH
49294: LD_VAR 0 1
49298: ST_TO_ADDR
// uc_nation := 3 ;
49299: LD_ADDR_OWVAR 21
49303: PUSH
49304: LD_INT 3
49306: ST_TO_ADDR
// vc_chassis := 25 ;
49307: LD_ADDR_OWVAR 37
49311: PUSH
49312: LD_INT 25
49314: ST_TO_ADDR
// vc_engine := engine_siberite ;
49315: LD_ADDR_OWVAR 39
49319: PUSH
49320: LD_INT 3
49322: ST_TO_ADDR
// vc_control := control_computer ;
49323: LD_ADDR_OWVAR 38
49327: PUSH
49328: LD_INT 3
49330: ST_TO_ADDR
// vc_weapon := 59 ;
49331: LD_ADDR_OWVAR 40
49335: PUSH
49336: LD_INT 59
49338: ST_TO_ADDR
// result := CreateVehicle ;
49339: LD_ADDR_VAR 0 5
49343: PUSH
49344: CALL_OW 45
49348: ST_TO_ADDR
// SetDir ( result , d ) ;
49349: LD_VAR 0 5
49353: PPUSH
49354: LD_VAR 0 4
49358: PPUSH
49359: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
49363: LD_VAR 0 5
49367: PPUSH
49368: LD_VAR 0 2
49372: PPUSH
49373: LD_VAR 0 3
49377: PPUSH
49378: LD_INT 0
49380: PPUSH
49381: CALL_OW 48
// end ;
49385: LD_VAR 0 5
49389: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
49390: LD_INT 0
49392: PPUSH
49393: PPUSH
49394: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
49395: LD_ADDR_VAR 0 2
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
49418: LD_VAR 0 1
49422: NOT
49423: PUSH
49424: LD_VAR 0 1
49428: PPUSH
49429: CALL_OW 264
49433: PUSH
49434: LD_INT 12
49436: PUSH
49437: LD_INT 51
49439: PUSH
49440: LD_INT 32
49442: PUSH
49443: LD_INT 89
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: IN
49452: NOT
49453: OR
49454: IFFALSE 49458
// exit ;
49456: GO 49556
// for i := 1 to 3 do
49458: LD_ADDR_VAR 0 3
49462: PUSH
49463: DOUBLE
49464: LD_INT 1
49466: DEC
49467: ST_TO_ADDR
49468: LD_INT 3
49470: PUSH
49471: FOR_TO
49472: IFFALSE 49554
// begin tmp := GetCargo ( cargo , i ) ;
49474: LD_ADDR_VAR 0 4
49478: PUSH
49479: LD_VAR 0 1
49483: PPUSH
49484: LD_VAR 0 3
49488: PPUSH
49489: CALL_OW 289
49493: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
49494: LD_ADDR_VAR 0 2
49498: PUSH
49499: LD_VAR 0 2
49503: PPUSH
49504: LD_VAR 0 3
49508: PPUSH
49509: LD_VAR 0 4
49513: PPUSH
49514: CALL_OW 1
49518: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
49519: LD_ADDR_VAR 0 2
49523: PUSH
49524: LD_VAR 0 2
49528: PPUSH
49529: LD_INT 4
49531: PPUSH
49532: LD_VAR 0 2
49536: PUSH
49537: LD_INT 4
49539: ARRAY
49540: PUSH
49541: LD_VAR 0 4
49545: PLUS
49546: PPUSH
49547: CALL_OW 1
49551: ST_TO_ADDR
// end ;
49552: GO 49471
49554: POP
49555: POP
// end ;
49556: LD_VAR 0 2
49560: RET
// export function Length ( array ) ; begin
49561: LD_INT 0
49563: PPUSH
// result := array + 0 ;
49564: LD_ADDR_VAR 0 2
49568: PUSH
49569: LD_VAR 0 1
49573: PUSH
49574: LD_INT 0
49576: PLUS
49577: ST_TO_ADDR
// end ;
49578: LD_VAR 0 2
49582: RET
// export function PrepareArray ( array ) ; begin
49583: LD_INT 0
49585: PPUSH
// result := array diff 0 ;
49586: LD_ADDR_VAR 0 2
49590: PUSH
49591: LD_VAR 0 1
49595: PUSH
49596: LD_INT 0
49598: DIFF
49599: ST_TO_ADDR
// if not result [ 1 ] then
49600: LD_VAR 0 2
49604: PUSH
49605: LD_INT 1
49607: ARRAY
49608: NOT
49609: IFFALSE 49629
// result := Delete ( result , 1 ) ;
49611: LD_ADDR_VAR 0 2
49615: PUSH
49616: LD_VAR 0 2
49620: PPUSH
49621: LD_INT 1
49623: PPUSH
49624: CALL_OW 3
49628: ST_TO_ADDR
// end ;
49629: LD_VAR 0 2
49633: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
49634: LD_INT 0
49636: PPUSH
49637: PPUSH
49638: PPUSH
49639: PPUSH
// sibRocketRange := 25 ;
49640: LD_ADDR_VAR 0 6
49644: PUSH
49645: LD_INT 25
49647: ST_TO_ADDR
// result := false ;
49648: LD_ADDR_VAR 0 4
49652: PUSH
49653: LD_INT 0
49655: ST_TO_ADDR
// for i := 0 to 5 do
49656: LD_ADDR_VAR 0 5
49660: PUSH
49661: DOUBLE
49662: LD_INT 0
49664: DEC
49665: ST_TO_ADDR
49666: LD_INT 5
49668: PUSH
49669: FOR_TO
49670: IFFALSE 49737
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
49672: LD_VAR 0 1
49676: PPUSH
49677: LD_VAR 0 5
49681: PPUSH
49682: LD_VAR 0 6
49686: PPUSH
49687: CALL_OW 272
49691: PPUSH
49692: LD_VAR 0 2
49696: PPUSH
49697: LD_VAR 0 5
49701: PPUSH
49702: LD_VAR 0 6
49706: PPUSH
49707: CALL_OW 273
49711: PPUSH
49712: LD_VAR 0 3
49716: PPUSH
49717: CALL_OW 309
49721: IFFALSE 49735
// begin result := true ;
49723: LD_ADDR_VAR 0 4
49727: PUSH
49728: LD_INT 1
49730: ST_TO_ADDR
// exit ;
49731: POP
49732: POP
49733: GO 49739
// end ;
49735: GO 49669
49737: POP
49738: POP
// end ;
49739: LD_VAR 0 4
49743: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
49744: LD_INT 0
49746: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
49747: LD_VAR 0 1
49751: PPUSH
49752: LD_VAR 0 2
49756: PPUSH
49757: LD_INT 0
49759: PPUSH
49760: LD_INT 0
49762: PPUSH
49763: LD_INT 1
49765: PPUSH
49766: LD_INT 0
49768: PPUSH
49769: CALL_OW 587
// end ;
49773: LD_VAR 0 3
49777: RET
// export function CenterOnNow ( unit ) ; begin
49778: LD_INT 0
49780: PPUSH
// result := IsInUnit ( unit ) ;
49781: LD_ADDR_VAR 0 2
49785: PUSH
49786: LD_VAR 0 1
49790: PPUSH
49791: CALL_OW 310
49795: ST_TO_ADDR
// if not result then
49796: LD_VAR 0 2
49800: NOT
49801: IFFALSE 49813
// result := unit ;
49803: LD_ADDR_VAR 0 2
49807: PUSH
49808: LD_VAR 0 1
49812: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
49813: LD_VAR 0 1
49817: PPUSH
49818: CALL_OW 87
// end ; end_of_file
49822: LD_VAR 0 2
49826: RET
// export globalGameSaveCounter ; every 0 0$1 do
49827: GO 49829
49829: DISABLE
// begin enable ;
49830: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
49831: LD_STRING updateTimer(
49833: PUSH
49834: LD_OWVAR 1
49838: STR
49839: PUSH
49840: LD_STRING );
49842: STR
49843: PPUSH
49844: CALL_OW 559
// end ;
49848: END
// every 0 0$1 do
49849: GO 49851
49851: DISABLE
// begin globalGameSaveCounter := 0 ;
49852: LD_ADDR_EXP 28
49856: PUSH
49857: LD_INT 0
49859: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
49860: LD_STRING setGameSaveCounter(0)
49862: PPUSH
49863: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
49867: LD_STRING initStreamRollete();
49869: PPUSH
49870: CALL_OW 559
// InitStreamMode ;
49874: CALL 51200 0 0
// DefineStreamItems ( false ) ;
49878: LD_INT 0
49880: PPUSH
49881: CALL 51664 0 1
// end ;
49885: END
// export function SOS_MapStart ( ) ; begin
49886: LD_INT 0
49888: PPUSH
// if streamModeActive then
49889: LD_EXP 29
49893: IFFALSE 49902
// DefineStreamItems ( true ) ;
49895: LD_INT 1
49897: PPUSH
49898: CALL 51664 0 1
// UpdateLuaVariables ( ) ;
49902: CALL 49919 0 0
// UpdateFactoryWaypoints ( ) ;
49906: CALL 64525 0 0
// UpdateWarehouseGatheringPoints ( ) ;
49910: CALL 64782 0 0
// end ;
49914: LD_VAR 0 1
49918: RET
// function UpdateLuaVariables ( ) ; begin
49919: LD_INT 0
49921: PPUSH
// if globalGameSaveCounter then
49922: LD_EXP 28
49926: IFFALSE 49960
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
49928: LD_ADDR_EXP 28
49932: PUSH
49933: LD_EXP 28
49937: PPUSH
49938: CALL 47186 0 1
49942: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
49943: LD_STRING setGameSaveCounter(
49945: PUSH
49946: LD_EXP 28
49950: STR
49951: PUSH
49952: LD_STRING )
49954: STR
49955: PPUSH
49956: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
49960: LD_STRING setGameDifficulty(
49962: PUSH
49963: LD_OWVAR 67
49967: STR
49968: PUSH
49969: LD_STRING )
49971: STR
49972: PPUSH
49973: CALL_OW 559
// end ;
49977: LD_VAR 0 1
49981: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
49982: LD_INT 0
49984: PPUSH
// if p2 = stream_mode then
49985: LD_VAR 0 2
49989: PUSH
49990: LD_INT 100
49992: EQUAL
49993: IFFALSE 50996
// begin if not StreamModeActive then
49995: LD_EXP 29
49999: NOT
50000: IFFALSE 50010
// StreamModeActive := true ;
50002: LD_ADDR_EXP 29
50006: PUSH
50007: LD_INT 1
50009: ST_TO_ADDR
// if p3 = 0 then
50010: LD_VAR 0 3
50014: PUSH
50015: LD_INT 0
50017: EQUAL
50018: IFFALSE 50024
// InitStreamMode ;
50020: CALL 51200 0 0
// if p3 = 1 then
50024: LD_VAR 0 3
50028: PUSH
50029: LD_INT 1
50031: EQUAL
50032: IFFALSE 50042
// sRocket := true ;
50034: LD_ADDR_EXP 34
50038: PUSH
50039: LD_INT 1
50041: ST_TO_ADDR
// if p3 = 2 then
50042: LD_VAR 0 3
50046: PUSH
50047: LD_INT 2
50049: EQUAL
50050: IFFALSE 50060
// sSpeed := true ;
50052: LD_ADDR_EXP 33
50056: PUSH
50057: LD_INT 1
50059: ST_TO_ADDR
// if p3 = 3 then
50060: LD_VAR 0 3
50064: PUSH
50065: LD_INT 3
50067: EQUAL
50068: IFFALSE 50078
// sEngine := true ;
50070: LD_ADDR_EXP 35
50074: PUSH
50075: LD_INT 1
50077: ST_TO_ADDR
// if p3 = 4 then
50078: LD_VAR 0 3
50082: PUSH
50083: LD_INT 4
50085: EQUAL
50086: IFFALSE 50096
// sSpec := true ;
50088: LD_ADDR_EXP 32
50092: PUSH
50093: LD_INT 1
50095: ST_TO_ADDR
// if p3 = 5 then
50096: LD_VAR 0 3
50100: PUSH
50101: LD_INT 5
50103: EQUAL
50104: IFFALSE 50114
// sLevel := true ;
50106: LD_ADDR_EXP 36
50110: PUSH
50111: LD_INT 1
50113: ST_TO_ADDR
// if p3 = 6 then
50114: LD_VAR 0 3
50118: PUSH
50119: LD_INT 6
50121: EQUAL
50122: IFFALSE 50132
// sArmoury := true ;
50124: LD_ADDR_EXP 37
50128: PUSH
50129: LD_INT 1
50131: ST_TO_ADDR
// if p3 = 7 then
50132: LD_VAR 0 3
50136: PUSH
50137: LD_INT 7
50139: EQUAL
50140: IFFALSE 50150
// sRadar := true ;
50142: LD_ADDR_EXP 38
50146: PUSH
50147: LD_INT 1
50149: ST_TO_ADDR
// if p3 = 8 then
50150: LD_VAR 0 3
50154: PUSH
50155: LD_INT 8
50157: EQUAL
50158: IFFALSE 50168
// sBunker := true ;
50160: LD_ADDR_EXP 39
50164: PUSH
50165: LD_INT 1
50167: ST_TO_ADDR
// if p3 = 9 then
50168: LD_VAR 0 3
50172: PUSH
50173: LD_INT 9
50175: EQUAL
50176: IFFALSE 50186
// sHack := true ;
50178: LD_ADDR_EXP 40
50182: PUSH
50183: LD_INT 1
50185: ST_TO_ADDR
// if p3 = 10 then
50186: LD_VAR 0 3
50190: PUSH
50191: LD_INT 10
50193: EQUAL
50194: IFFALSE 50204
// sFire := true ;
50196: LD_ADDR_EXP 41
50200: PUSH
50201: LD_INT 1
50203: ST_TO_ADDR
// if p3 = 11 then
50204: LD_VAR 0 3
50208: PUSH
50209: LD_INT 11
50211: EQUAL
50212: IFFALSE 50222
// sRefresh := true ;
50214: LD_ADDR_EXP 42
50218: PUSH
50219: LD_INT 1
50221: ST_TO_ADDR
// if p3 = 12 then
50222: LD_VAR 0 3
50226: PUSH
50227: LD_INT 12
50229: EQUAL
50230: IFFALSE 50240
// sExp := true ;
50232: LD_ADDR_EXP 43
50236: PUSH
50237: LD_INT 1
50239: ST_TO_ADDR
// if p3 = 13 then
50240: LD_VAR 0 3
50244: PUSH
50245: LD_INT 13
50247: EQUAL
50248: IFFALSE 50258
// sDepot := true ;
50250: LD_ADDR_EXP 44
50254: PUSH
50255: LD_INT 1
50257: ST_TO_ADDR
// if p3 = 14 then
50258: LD_VAR 0 3
50262: PUSH
50263: LD_INT 14
50265: EQUAL
50266: IFFALSE 50276
// sFlag := true ;
50268: LD_ADDR_EXP 45
50272: PUSH
50273: LD_INT 1
50275: ST_TO_ADDR
// if p3 = 15 then
50276: LD_VAR 0 3
50280: PUSH
50281: LD_INT 15
50283: EQUAL
50284: IFFALSE 50294
// sKamikadze := true ;
50286: LD_ADDR_EXP 53
50290: PUSH
50291: LD_INT 1
50293: ST_TO_ADDR
// if p3 = 16 then
50294: LD_VAR 0 3
50298: PUSH
50299: LD_INT 16
50301: EQUAL
50302: IFFALSE 50312
// sTroll := true ;
50304: LD_ADDR_EXP 54
50308: PUSH
50309: LD_INT 1
50311: ST_TO_ADDR
// if p3 = 17 then
50312: LD_VAR 0 3
50316: PUSH
50317: LD_INT 17
50319: EQUAL
50320: IFFALSE 50330
// sSlow := true ;
50322: LD_ADDR_EXP 55
50326: PUSH
50327: LD_INT 1
50329: ST_TO_ADDR
// if p3 = 18 then
50330: LD_VAR 0 3
50334: PUSH
50335: LD_INT 18
50337: EQUAL
50338: IFFALSE 50348
// sLack := true ;
50340: LD_ADDR_EXP 56
50344: PUSH
50345: LD_INT 1
50347: ST_TO_ADDR
// if p3 = 19 then
50348: LD_VAR 0 3
50352: PUSH
50353: LD_INT 19
50355: EQUAL
50356: IFFALSE 50366
// sTank := true ;
50358: LD_ADDR_EXP 58
50362: PUSH
50363: LD_INT 1
50365: ST_TO_ADDR
// if p3 = 20 then
50366: LD_VAR 0 3
50370: PUSH
50371: LD_INT 20
50373: EQUAL
50374: IFFALSE 50384
// sRemote := true ;
50376: LD_ADDR_EXP 59
50380: PUSH
50381: LD_INT 1
50383: ST_TO_ADDR
// if p3 = 21 then
50384: LD_VAR 0 3
50388: PUSH
50389: LD_INT 21
50391: EQUAL
50392: IFFALSE 50402
// sPowell := true ;
50394: LD_ADDR_EXP 60
50398: PUSH
50399: LD_INT 1
50401: ST_TO_ADDR
// if p3 = 22 then
50402: LD_VAR 0 3
50406: PUSH
50407: LD_INT 22
50409: EQUAL
50410: IFFALSE 50420
// sTeleport := true ;
50412: LD_ADDR_EXP 63
50416: PUSH
50417: LD_INT 1
50419: ST_TO_ADDR
// if p3 = 23 then
50420: LD_VAR 0 3
50424: PUSH
50425: LD_INT 23
50427: EQUAL
50428: IFFALSE 50438
// sOilTower := true ;
50430: LD_ADDR_EXP 65
50434: PUSH
50435: LD_INT 1
50437: ST_TO_ADDR
// if p3 = 24 then
50438: LD_VAR 0 3
50442: PUSH
50443: LD_INT 24
50445: EQUAL
50446: IFFALSE 50456
// sShovel := true ;
50448: LD_ADDR_EXP 66
50452: PUSH
50453: LD_INT 1
50455: ST_TO_ADDR
// if p3 = 25 then
50456: LD_VAR 0 3
50460: PUSH
50461: LD_INT 25
50463: EQUAL
50464: IFFALSE 50474
// sSheik := true ;
50466: LD_ADDR_EXP 67
50470: PUSH
50471: LD_INT 1
50473: ST_TO_ADDR
// if p3 = 26 then
50474: LD_VAR 0 3
50478: PUSH
50479: LD_INT 26
50481: EQUAL
50482: IFFALSE 50492
// sEarthquake := true ;
50484: LD_ADDR_EXP 69
50488: PUSH
50489: LD_INT 1
50491: ST_TO_ADDR
// if p3 = 27 then
50492: LD_VAR 0 3
50496: PUSH
50497: LD_INT 27
50499: EQUAL
50500: IFFALSE 50510
// sAI := true ;
50502: LD_ADDR_EXP 70
50506: PUSH
50507: LD_INT 1
50509: ST_TO_ADDR
// if p3 = 28 then
50510: LD_VAR 0 3
50514: PUSH
50515: LD_INT 28
50517: EQUAL
50518: IFFALSE 50528
// sCargo := true ;
50520: LD_ADDR_EXP 73
50524: PUSH
50525: LD_INT 1
50527: ST_TO_ADDR
// if p3 = 29 then
50528: LD_VAR 0 3
50532: PUSH
50533: LD_INT 29
50535: EQUAL
50536: IFFALSE 50546
// sDLaser := true ;
50538: LD_ADDR_EXP 74
50542: PUSH
50543: LD_INT 1
50545: ST_TO_ADDR
// if p3 = 30 then
50546: LD_VAR 0 3
50550: PUSH
50551: LD_INT 30
50553: EQUAL
50554: IFFALSE 50564
// sExchange := true ;
50556: LD_ADDR_EXP 75
50560: PUSH
50561: LD_INT 1
50563: ST_TO_ADDR
// if p3 = 31 then
50564: LD_VAR 0 3
50568: PUSH
50569: LD_INT 31
50571: EQUAL
50572: IFFALSE 50582
// sFac := true ;
50574: LD_ADDR_EXP 76
50578: PUSH
50579: LD_INT 1
50581: ST_TO_ADDR
// if p3 = 32 then
50582: LD_VAR 0 3
50586: PUSH
50587: LD_INT 32
50589: EQUAL
50590: IFFALSE 50600
// sPower := true ;
50592: LD_ADDR_EXP 77
50596: PUSH
50597: LD_INT 1
50599: ST_TO_ADDR
// if p3 = 33 then
50600: LD_VAR 0 3
50604: PUSH
50605: LD_INT 33
50607: EQUAL
50608: IFFALSE 50618
// sRandom := true ;
50610: LD_ADDR_EXP 78
50614: PUSH
50615: LD_INT 1
50617: ST_TO_ADDR
// if p3 = 34 then
50618: LD_VAR 0 3
50622: PUSH
50623: LD_INT 34
50625: EQUAL
50626: IFFALSE 50636
// sShield := true ;
50628: LD_ADDR_EXP 79
50632: PUSH
50633: LD_INT 1
50635: ST_TO_ADDR
// if p3 = 35 then
50636: LD_VAR 0 3
50640: PUSH
50641: LD_INT 35
50643: EQUAL
50644: IFFALSE 50654
// sTime := true ;
50646: LD_ADDR_EXP 80
50650: PUSH
50651: LD_INT 1
50653: ST_TO_ADDR
// if p3 = 36 then
50654: LD_VAR 0 3
50658: PUSH
50659: LD_INT 36
50661: EQUAL
50662: IFFALSE 50672
// sTools := true ;
50664: LD_ADDR_EXP 81
50668: PUSH
50669: LD_INT 1
50671: ST_TO_ADDR
// if p3 = 101 then
50672: LD_VAR 0 3
50676: PUSH
50677: LD_INT 101
50679: EQUAL
50680: IFFALSE 50690
// sSold := true ;
50682: LD_ADDR_EXP 46
50686: PUSH
50687: LD_INT 1
50689: ST_TO_ADDR
// if p3 = 102 then
50690: LD_VAR 0 3
50694: PUSH
50695: LD_INT 102
50697: EQUAL
50698: IFFALSE 50708
// sDiff := true ;
50700: LD_ADDR_EXP 47
50704: PUSH
50705: LD_INT 1
50707: ST_TO_ADDR
// if p3 = 103 then
50708: LD_VAR 0 3
50712: PUSH
50713: LD_INT 103
50715: EQUAL
50716: IFFALSE 50726
// sFog := true ;
50718: LD_ADDR_EXP 50
50722: PUSH
50723: LD_INT 1
50725: ST_TO_ADDR
// if p3 = 104 then
50726: LD_VAR 0 3
50730: PUSH
50731: LD_INT 104
50733: EQUAL
50734: IFFALSE 50744
// sReset := true ;
50736: LD_ADDR_EXP 51
50740: PUSH
50741: LD_INT 1
50743: ST_TO_ADDR
// if p3 = 105 then
50744: LD_VAR 0 3
50748: PUSH
50749: LD_INT 105
50751: EQUAL
50752: IFFALSE 50762
// sSun := true ;
50754: LD_ADDR_EXP 52
50758: PUSH
50759: LD_INT 1
50761: ST_TO_ADDR
// if p3 = 106 then
50762: LD_VAR 0 3
50766: PUSH
50767: LD_INT 106
50769: EQUAL
50770: IFFALSE 50780
// sTiger := true ;
50772: LD_ADDR_EXP 48
50776: PUSH
50777: LD_INT 1
50779: ST_TO_ADDR
// if p3 = 107 then
50780: LD_VAR 0 3
50784: PUSH
50785: LD_INT 107
50787: EQUAL
50788: IFFALSE 50798
// sBomb := true ;
50790: LD_ADDR_EXP 49
50794: PUSH
50795: LD_INT 1
50797: ST_TO_ADDR
// if p3 = 108 then
50798: LD_VAR 0 3
50802: PUSH
50803: LD_INT 108
50805: EQUAL
50806: IFFALSE 50816
// sWound := true ;
50808: LD_ADDR_EXP 57
50812: PUSH
50813: LD_INT 1
50815: ST_TO_ADDR
// if p3 = 109 then
50816: LD_VAR 0 3
50820: PUSH
50821: LD_INT 109
50823: EQUAL
50824: IFFALSE 50834
// sBetray := true ;
50826: LD_ADDR_EXP 61
50830: PUSH
50831: LD_INT 1
50833: ST_TO_ADDR
// if p3 = 110 then
50834: LD_VAR 0 3
50838: PUSH
50839: LD_INT 110
50841: EQUAL
50842: IFFALSE 50852
// sContamin := true ;
50844: LD_ADDR_EXP 62
50848: PUSH
50849: LD_INT 1
50851: ST_TO_ADDR
// if p3 = 111 then
50852: LD_VAR 0 3
50856: PUSH
50857: LD_INT 111
50859: EQUAL
50860: IFFALSE 50870
// sOil := true ;
50862: LD_ADDR_EXP 64
50866: PUSH
50867: LD_INT 1
50869: ST_TO_ADDR
// if p3 = 112 then
50870: LD_VAR 0 3
50874: PUSH
50875: LD_INT 112
50877: EQUAL
50878: IFFALSE 50888
// sStu := true ;
50880: LD_ADDR_EXP 68
50884: PUSH
50885: LD_INT 1
50887: ST_TO_ADDR
// if p3 = 113 then
50888: LD_VAR 0 3
50892: PUSH
50893: LD_INT 113
50895: EQUAL
50896: IFFALSE 50906
// sBazooka := true ;
50898: LD_ADDR_EXP 71
50902: PUSH
50903: LD_INT 1
50905: ST_TO_ADDR
// if p3 = 114 then
50906: LD_VAR 0 3
50910: PUSH
50911: LD_INT 114
50913: EQUAL
50914: IFFALSE 50924
// sMortar := true ;
50916: LD_ADDR_EXP 72
50920: PUSH
50921: LD_INT 1
50923: ST_TO_ADDR
// if p3 = 115 then
50924: LD_VAR 0 3
50928: PUSH
50929: LD_INT 115
50931: EQUAL
50932: IFFALSE 50942
// sRanger := true ;
50934: LD_ADDR_EXP 82
50938: PUSH
50939: LD_INT 1
50941: ST_TO_ADDR
// if p3 = 116 then
50942: LD_VAR 0 3
50946: PUSH
50947: LD_INT 116
50949: EQUAL
50950: IFFALSE 50960
// sComputer := true ;
50952: LD_ADDR_EXP 83
50956: PUSH
50957: LD_INT 1
50959: ST_TO_ADDR
// if p3 = 117 then
50960: LD_VAR 0 3
50964: PUSH
50965: LD_INT 117
50967: EQUAL
50968: IFFALSE 50978
// s30 := true ;
50970: LD_ADDR_EXP 84
50974: PUSH
50975: LD_INT 1
50977: ST_TO_ADDR
// if p3 = 118 then
50978: LD_VAR 0 3
50982: PUSH
50983: LD_INT 118
50985: EQUAL
50986: IFFALSE 50996
// s60 := true ;
50988: LD_ADDR_EXP 85
50992: PUSH
50993: LD_INT 1
50995: ST_TO_ADDR
// end ; if p2 = hack_mode then
50996: LD_VAR 0 2
51000: PUSH
51001: LD_INT 101
51003: EQUAL
51004: IFFALSE 51132
// begin case p3 of 1 :
51006: LD_VAR 0 3
51010: PUSH
51011: LD_INT 1
51013: DOUBLE
51014: EQUAL
51015: IFTRUE 51019
51017: GO 51026
51019: POP
// hHackUnlimitedResources ; 2 :
51020: CALL 63271 0 0
51024: GO 51132
51026: LD_INT 2
51028: DOUBLE
51029: EQUAL
51030: IFTRUE 51034
51032: GO 51041
51034: POP
// hHackSetLevel10 ; 3 :
51035: CALL 63404 0 0
51039: GO 51132
51041: LD_INT 3
51043: DOUBLE
51044: EQUAL
51045: IFTRUE 51049
51047: GO 51056
51049: POP
// hHackSetLevel10YourUnits ; 4 :
51050: CALL 63489 0 0
51054: GO 51132
51056: LD_INT 4
51058: DOUBLE
51059: EQUAL
51060: IFTRUE 51064
51062: GO 51071
51064: POP
// hHackInvincible ; 5 :
51065: CALL 63937 0 0
51069: GO 51132
51071: LD_INT 5
51073: DOUBLE
51074: EQUAL
51075: IFTRUE 51079
51077: GO 51086
51079: POP
// hHackInvisible ; 6 :
51080: CALL 64048 0 0
51084: GO 51132
51086: LD_INT 6
51088: DOUBLE
51089: EQUAL
51090: IFTRUE 51094
51092: GO 51101
51094: POP
// hHackChangeYourSide ; 7 :
51095: CALL 64105 0 0
51099: GO 51132
51101: LD_INT 7
51103: DOUBLE
51104: EQUAL
51105: IFTRUE 51109
51107: GO 51116
51109: POP
// hHackChangeUnitSide ; 8 :
51110: CALL 64147 0 0
51114: GO 51132
51116: LD_INT 8
51118: DOUBLE
51119: EQUAL
51120: IFTRUE 51124
51122: GO 51131
51124: POP
// hHackFog ; end ;
51125: CALL 64248 0 0
51129: GO 51132
51131: POP
// end ; if p2 = game_save_mode then
51132: LD_VAR 0 2
51136: PUSH
51137: LD_INT 102
51139: EQUAL
51140: IFFALSE 51195
// begin if p3 = 1 then
51142: LD_VAR 0 3
51146: PUSH
51147: LD_INT 1
51149: EQUAL
51150: IFFALSE 51162
// globalGameSaveCounter := p4 ;
51152: LD_ADDR_EXP 28
51156: PUSH
51157: LD_VAR 0 4
51161: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
51162: LD_VAR 0 3
51166: PUSH
51167: LD_INT 2
51169: EQUAL
51170: PUSH
51171: LD_EXP 28
51175: AND
51176: IFFALSE 51195
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51178: LD_STRING setGameSaveCounter(
51180: PUSH
51181: LD_EXP 28
51185: STR
51186: PUSH
51187: LD_STRING )
51189: STR
51190: PPUSH
51191: CALL_OW 559
// end ; end ;
51195: LD_VAR 0 7
51199: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
51200: LD_INT 0
51202: PPUSH
// streamModeActive := false ;
51203: LD_ADDR_EXP 29
51207: PUSH
51208: LD_INT 0
51210: ST_TO_ADDR
// normalCounter := 36 ;
51211: LD_ADDR_EXP 30
51215: PUSH
51216: LD_INT 36
51218: ST_TO_ADDR
// hardcoreCounter := 18 ;
51219: LD_ADDR_EXP 31
51223: PUSH
51224: LD_INT 18
51226: ST_TO_ADDR
// sRocket := false ;
51227: LD_ADDR_EXP 34
51231: PUSH
51232: LD_INT 0
51234: ST_TO_ADDR
// sSpeed := false ;
51235: LD_ADDR_EXP 33
51239: PUSH
51240: LD_INT 0
51242: ST_TO_ADDR
// sEngine := false ;
51243: LD_ADDR_EXP 35
51247: PUSH
51248: LD_INT 0
51250: ST_TO_ADDR
// sSpec := false ;
51251: LD_ADDR_EXP 32
51255: PUSH
51256: LD_INT 0
51258: ST_TO_ADDR
// sLevel := false ;
51259: LD_ADDR_EXP 36
51263: PUSH
51264: LD_INT 0
51266: ST_TO_ADDR
// sArmoury := false ;
51267: LD_ADDR_EXP 37
51271: PUSH
51272: LD_INT 0
51274: ST_TO_ADDR
// sRadar := false ;
51275: LD_ADDR_EXP 38
51279: PUSH
51280: LD_INT 0
51282: ST_TO_ADDR
// sBunker := false ;
51283: LD_ADDR_EXP 39
51287: PUSH
51288: LD_INT 0
51290: ST_TO_ADDR
// sHack := false ;
51291: LD_ADDR_EXP 40
51295: PUSH
51296: LD_INT 0
51298: ST_TO_ADDR
// sFire := false ;
51299: LD_ADDR_EXP 41
51303: PUSH
51304: LD_INT 0
51306: ST_TO_ADDR
// sRefresh := false ;
51307: LD_ADDR_EXP 42
51311: PUSH
51312: LD_INT 0
51314: ST_TO_ADDR
// sExp := false ;
51315: LD_ADDR_EXP 43
51319: PUSH
51320: LD_INT 0
51322: ST_TO_ADDR
// sDepot := false ;
51323: LD_ADDR_EXP 44
51327: PUSH
51328: LD_INT 0
51330: ST_TO_ADDR
// sFlag := false ;
51331: LD_ADDR_EXP 45
51335: PUSH
51336: LD_INT 0
51338: ST_TO_ADDR
// sKamikadze := false ;
51339: LD_ADDR_EXP 53
51343: PUSH
51344: LD_INT 0
51346: ST_TO_ADDR
// sTroll := false ;
51347: LD_ADDR_EXP 54
51351: PUSH
51352: LD_INT 0
51354: ST_TO_ADDR
// sSlow := false ;
51355: LD_ADDR_EXP 55
51359: PUSH
51360: LD_INT 0
51362: ST_TO_ADDR
// sLack := false ;
51363: LD_ADDR_EXP 56
51367: PUSH
51368: LD_INT 0
51370: ST_TO_ADDR
// sTank := false ;
51371: LD_ADDR_EXP 58
51375: PUSH
51376: LD_INT 0
51378: ST_TO_ADDR
// sRemote := false ;
51379: LD_ADDR_EXP 59
51383: PUSH
51384: LD_INT 0
51386: ST_TO_ADDR
// sPowell := false ;
51387: LD_ADDR_EXP 60
51391: PUSH
51392: LD_INT 0
51394: ST_TO_ADDR
// sTeleport := false ;
51395: LD_ADDR_EXP 63
51399: PUSH
51400: LD_INT 0
51402: ST_TO_ADDR
// sOilTower := false ;
51403: LD_ADDR_EXP 65
51407: PUSH
51408: LD_INT 0
51410: ST_TO_ADDR
// sShovel := false ;
51411: LD_ADDR_EXP 66
51415: PUSH
51416: LD_INT 0
51418: ST_TO_ADDR
// sSheik := false ;
51419: LD_ADDR_EXP 67
51423: PUSH
51424: LD_INT 0
51426: ST_TO_ADDR
// sEarthquake := false ;
51427: LD_ADDR_EXP 69
51431: PUSH
51432: LD_INT 0
51434: ST_TO_ADDR
// sAI := false ;
51435: LD_ADDR_EXP 70
51439: PUSH
51440: LD_INT 0
51442: ST_TO_ADDR
// sCargo := false ;
51443: LD_ADDR_EXP 73
51447: PUSH
51448: LD_INT 0
51450: ST_TO_ADDR
// sDLaser := false ;
51451: LD_ADDR_EXP 74
51455: PUSH
51456: LD_INT 0
51458: ST_TO_ADDR
// sExchange := false ;
51459: LD_ADDR_EXP 75
51463: PUSH
51464: LD_INT 0
51466: ST_TO_ADDR
// sFac := false ;
51467: LD_ADDR_EXP 76
51471: PUSH
51472: LD_INT 0
51474: ST_TO_ADDR
// sPower := false ;
51475: LD_ADDR_EXP 77
51479: PUSH
51480: LD_INT 0
51482: ST_TO_ADDR
// sRandom := false ;
51483: LD_ADDR_EXP 78
51487: PUSH
51488: LD_INT 0
51490: ST_TO_ADDR
// sShield := false ;
51491: LD_ADDR_EXP 79
51495: PUSH
51496: LD_INT 0
51498: ST_TO_ADDR
// sTime := false ;
51499: LD_ADDR_EXP 80
51503: PUSH
51504: LD_INT 0
51506: ST_TO_ADDR
// sTools := false ;
51507: LD_ADDR_EXP 81
51511: PUSH
51512: LD_INT 0
51514: ST_TO_ADDR
// sSold := false ;
51515: LD_ADDR_EXP 46
51519: PUSH
51520: LD_INT 0
51522: ST_TO_ADDR
// sDiff := false ;
51523: LD_ADDR_EXP 47
51527: PUSH
51528: LD_INT 0
51530: ST_TO_ADDR
// sFog := false ;
51531: LD_ADDR_EXP 50
51535: PUSH
51536: LD_INT 0
51538: ST_TO_ADDR
// sReset := false ;
51539: LD_ADDR_EXP 51
51543: PUSH
51544: LD_INT 0
51546: ST_TO_ADDR
// sSun := false ;
51547: LD_ADDR_EXP 52
51551: PUSH
51552: LD_INT 0
51554: ST_TO_ADDR
// sTiger := false ;
51555: LD_ADDR_EXP 48
51559: PUSH
51560: LD_INT 0
51562: ST_TO_ADDR
// sBomb := false ;
51563: LD_ADDR_EXP 49
51567: PUSH
51568: LD_INT 0
51570: ST_TO_ADDR
// sWound := false ;
51571: LD_ADDR_EXP 57
51575: PUSH
51576: LD_INT 0
51578: ST_TO_ADDR
// sBetray := false ;
51579: LD_ADDR_EXP 61
51583: PUSH
51584: LD_INT 0
51586: ST_TO_ADDR
// sContamin := false ;
51587: LD_ADDR_EXP 62
51591: PUSH
51592: LD_INT 0
51594: ST_TO_ADDR
// sOil := false ;
51595: LD_ADDR_EXP 64
51599: PUSH
51600: LD_INT 0
51602: ST_TO_ADDR
// sStu := false ;
51603: LD_ADDR_EXP 68
51607: PUSH
51608: LD_INT 0
51610: ST_TO_ADDR
// sBazooka := false ;
51611: LD_ADDR_EXP 71
51615: PUSH
51616: LD_INT 0
51618: ST_TO_ADDR
// sMortar := false ;
51619: LD_ADDR_EXP 72
51623: PUSH
51624: LD_INT 0
51626: ST_TO_ADDR
// sRanger := false ;
51627: LD_ADDR_EXP 82
51631: PUSH
51632: LD_INT 0
51634: ST_TO_ADDR
// sComputer := false ;
51635: LD_ADDR_EXP 83
51639: PUSH
51640: LD_INT 0
51642: ST_TO_ADDR
// s30 := false ;
51643: LD_ADDR_EXP 84
51647: PUSH
51648: LD_INT 0
51650: ST_TO_ADDR
// s60 := false ;
51651: LD_ADDR_EXP 85
51655: PUSH
51656: LD_INT 0
51658: ST_TO_ADDR
// end ;
51659: LD_VAR 0 1
51663: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
51664: LD_INT 0
51666: PPUSH
51667: PPUSH
51668: PPUSH
51669: PPUSH
51670: PPUSH
51671: PPUSH
51672: PPUSH
// result := [ ] ;
51673: LD_ADDR_VAR 0 2
51677: PUSH
51678: EMPTY
51679: ST_TO_ADDR
// if campaign_id = 1 then
51680: LD_OWVAR 69
51684: PUSH
51685: LD_INT 1
51687: EQUAL
51688: IFFALSE 54854
// begin case mission_number of 1 :
51690: LD_OWVAR 70
51694: PUSH
51695: LD_INT 1
51697: DOUBLE
51698: EQUAL
51699: IFTRUE 51703
51701: GO 51779
51703: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
51704: LD_ADDR_VAR 0 2
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: LD_INT 4
51714: PUSH
51715: LD_INT 11
51717: PUSH
51718: LD_INT 12
51720: PUSH
51721: LD_INT 15
51723: PUSH
51724: LD_INT 16
51726: PUSH
51727: LD_INT 22
51729: PUSH
51730: LD_INT 23
51732: PUSH
51733: LD_INT 26
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 101
51749: PUSH
51750: LD_INT 102
51752: PUSH
51753: LD_INT 106
51755: PUSH
51756: LD_INT 116
51758: PUSH
51759: LD_INT 117
51761: PUSH
51762: LD_INT 118
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: ST_TO_ADDR
51777: GO 54852
51779: LD_INT 2
51781: DOUBLE
51782: EQUAL
51783: IFTRUE 51787
51785: GO 51871
51787: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
51788: LD_ADDR_VAR 0 2
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: LD_INT 4
51798: PUSH
51799: LD_INT 11
51801: PUSH
51802: LD_INT 12
51804: PUSH
51805: LD_INT 15
51807: PUSH
51808: LD_INT 16
51810: PUSH
51811: LD_INT 22
51813: PUSH
51814: LD_INT 23
51816: PUSH
51817: LD_INT 26
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 101
51833: PUSH
51834: LD_INT 102
51836: PUSH
51837: LD_INT 105
51839: PUSH
51840: LD_INT 106
51842: PUSH
51843: LD_INT 108
51845: PUSH
51846: LD_INT 116
51848: PUSH
51849: LD_INT 117
51851: PUSH
51852: LD_INT 118
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: ST_TO_ADDR
51869: GO 54852
51871: LD_INT 3
51873: DOUBLE
51874: EQUAL
51875: IFTRUE 51879
51877: GO 51967
51879: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
51880: LD_ADDR_VAR 0 2
51884: PUSH
51885: LD_INT 2
51887: PUSH
51888: LD_INT 4
51890: PUSH
51891: LD_INT 5
51893: PUSH
51894: LD_INT 11
51896: PUSH
51897: LD_INT 12
51899: PUSH
51900: LD_INT 15
51902: PUSH
51903: LD_INT 16
51905: PUSH
51906: LD_INT 22
51908: PUSH
51909: LD_INT 26
51911: PUSH
51912: LD_INT 36
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 101
51929: PUSH
51930: LD_INT 102
51932: PUSH
51933: LD_INT 105
51935: PUSH
51936: LD_INT 106
51938: PUSH
51939: LD_INT 108
51941: PUSH
51942: LD_INT 116
51944: PUSH
51945: LD_INT 117
51947: PUSH
51948: LD_INT 118
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: ST_TO_ADDR
51965: GO 54852
51967: LD_INT 4
51969: DOUBLE
51970: EQUAL
51971: IFTRUE 51975
51973: GO 52071
51975: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
51976: LD_ADDR_VAR 0 2
51980: PUSH
51981: LD_INT 2
51983: PUSH
51984: LD_INT 4
51986: PUSH
51987: LD_INT 5
51989: PUSH
51990: LD_INT 8
51992: PUSH
51993: LD_INT 11
51995: PUSH
51996: LD_INT 12
51998: PUSH
51999: LD_INT 15
52001: PUSH
52002: LD_INT 16
52004: PUSH
52005: LD_INT 22
52007: PUSH
52008: LD_INT 23
52010: PUSH
52011: LD_INT 26
52013: PUSH
52014: LD_INT 36
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 101
52033: PUSH
52034: LD_INT 102
52036: PUSH
52037: LD_INT 105
52039: PUSH
52040: LD_INT 106
52042: PUSH
52043: LD_INT 108
52045: PUSH
52046: LD_INT 116
52048: PUSH
52049: LD_INT 117
52051: PUSH
52052: LD_INT 118
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: ST_TO_ADDR
52069: GO 54852
52071: LD_INT 5
52073: DOUBLE
52074: EQUAL
52075: IFTRUE 52079
52077: GO 52191
52079: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
52080: LD_ADDR_VAR 0 2
52084: PUSH
52085: LD_INT 2
52087: PUSH
52088: LD_INT 4
52090: PUSH
52091: LD_INT 5
52093: PUSH
52094: LD_INT 6
52096: PUSH
52097: LD_INT 8
52099: PUSH
52100: LD_INT 11
52102: PUSH
52103: LD_INT 12
52105: PUSH
52106: LD_INT 15
52108: PUSH
52109: LD_INT 16
52111: PUSH
52112: LD_INT 22
52114: PUSH
52115: LD_INT 23
52117: PUSH
52118: LD_INT 25
52120: PUSH
52121: LD_INT 26
52123: PUSH
52124: LD_INT 36
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 101
52145: PUSH
52146: LD_INT 102
52148: PUSH
52149: LD_INT 105
52151: PUSH
52152: LD_INT 106
52154: PUSH
52155: LD_INT 108
52157: PUSH
52158: LD_INT 109
52160: PUSH
52161: LD_INT 112
52163: PUSH
52164: LD_INT 116
52166: PUSH
52167: LD_INT 117
52169: PUSH
52170: LD_INT 118
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: ST_TO_ADDR
52189: GO 54852
52191: LD_INT 6
52193: DOUBLE
52194: EQUAL
52195: IFTRUE 52199
52197: GO 52331
52199: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
52200: LD_ADDR_VAR 0 2
52204: PUSH
52205: LD_INT 2
52207: PUSH
52208: LD_INT 4
52210: PUSH
52211: LD_INT 5
52213: PUSH
52214: LD_INT 6
52216: PUSH
52217: LD_INT 8
52219: PUSH
52220: LD_INT 11
52222: PUSH
52223: LD_INT 12
52225: PUSH
52226: LD_INT 15
52228: PUSH
52229: LD_INT 16
52231: PUSH
52232: LD_INT 20
52234: PUSH
52235: LD_INT 21
52237: PUSH
52238: LD_INT 22
52240: PUSH
52241: LD_INT 23
52243: PUSH
52244: LD_INT 25
52246: PUSH
52247: LD_INT 26
52249: PUSH
52250: LD_INT 30
52252: PUSH
52253: LD_INT 31
52255: PUSH
52256: LD_INT 32
52258: PUSH
52259: LD_INT 36
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 101
52285: PUSH
52286: LD_INT 102
52288: PUSH
52289: LD_INT 105
52291: PUSH
52292: LD_INT 106
52294: PUSH
52295: LD_INT 108
52297: PUSH
52298: LD_INT 109
52300: PUSH
52301: LD_INT 112
52303: PUSH
52304: LD_INT 116
52306: PUSH
52307: LD_INT 117
52309: PUSH
52310: LD_INT 118
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: ST_TO_ADDR
52329: GO 54852
52331: LD_INT 7
52333: DOUBLE
52334: EQUAL
52335: IFTRUE 52339
52337: GO 52451
52339: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
52340: LD_ADDR_VAR 0 2
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: LD_INT 4
52350: PUSH
52351: LD_INT 5
52353: PUSH
52354: LD_INT 7
52356: PUSH
52357: LD_INT 11
52359: PUSH
52360: LD_INT 12
52362: PUSH
52363: LD_INT 15
52365: PUSH
52366: LD_INT 16
52368: PUSH
52369: LD_INT 20
52371: PUSH
52372: LD_INT 21
52374: PUSH
52375: LD_INT 22
52377: PUSH
52378: LD_INT 23
52380: PUSH
52381: LD_INT 25
52383: PUSH
52384: LD_INT 26
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 101
52405: PUSH
52406: LD_INT 102
52408: PUSH
52409: LD_INT 103
52411: PUSH
52412: LD_INT 105
52414: PUSH
52415: LD_INT 106
52417: PUSH
52418: LD_INT 108
52420: PUSH
52421: LD_INT 112
52423: PUSH
52424: LD_INT 116
52426: PUSH
52427: LD_INT 117
52429: PUSH
52430: LD_INT 118
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: ST_TO_ADDR
52449: GO 54852
52451: LD_INT 8
52453: DOUBLE
52454: EQUAL
52455: IFTRUE 52459
52457: GO 52599
52459: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
52460: LD_ADDR_VAR 0 2
52464: PUSH
52465: LD_INT 2
52467: PUSH
52468: LD_INT 4
52470: PUSH
52471: LD_INT 5
52473: PUSH
52474: LD_INT 6
52476: PUSH
52477: LD_INT 7
52479: PUSH
52480: LD_INT 8
52482: PUSH
52483: LD_INT 11
52485: PUSH
52486: LD_INT 12
52488: PUSH
52489: LD_INT 15
52491: PUSH
52492: LD_INT 16
52494: PUSH
52495: LD_INT 20
52497: PUSH
52498: LD_INT 21
52500: PUSH
52501: LD_INT 22
52503: PUSH
52504: LD_INT 23
52506: PUSH
52507: LD_INT 25
52509: PUSH
52510: LD_INT 26
52512: PUSH
52513: LD_INT 30
52515: PUSH
52516: LD_INT 31
52518: PUSH
52519: LD_INT 32
52521: PUSH
52522: LD_INT 36
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 101
52549: PUSH
52550: LD_INT 102
52552: PUSH
52553: LD_INT 103
52555: PUSH
52556: LD_INT 105
52558: PUSH
52559: LD_INT 106
52561: PUSH
52562: LD_INT 108
52564: PUSH
52565: LD_INT 109
52567: PUSH
52568: LD_INT 112
52570: PUSH
52571: LD_INT 116
52573: PUSH
52574: LD_INT 117
52576: PUSH
52577: LD_INT 118
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: ST_TO_ADDR
52597: GO 54852
52599: LD_INT 9
52601: DOUBLE
52602: EQUAL
52603: IFTRUE 52607
52605: GO 52755
52607: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
52608: LD_ADDR_VAR 0 2
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: LD_INT 4
52618: PUSH
52619: LD_INT 5
52621: PUSH
52622: LD_INT 6
52624: PUSH
52625: LD_INT 7
52627: PUSH
52628: LD_INT 8
52630: PUSH
52631: LD_INT 11
52633: PUSH
52634: LD_INT 12
52636: PUSH
52637: LD_INT 15
52639: PUSH
52640: LD_INT 16
52642: PUSH
52643: LD_INT 20
52645: PUSH
52646: LD_INT 21
52648: PUSH
52649: LD_INT 22
52651: PUSH
52652: LD_INT 23
52654: PUSH
52655: LD_INT 25
52657: PUSH
52658: LD_INT 26
52660: PUSH
52661: LD_INT 28
52663: PUSH
52664: LD_INT 30
52666: PUSH
52667: LD_INT 31
52669: PUSH
52670: LD_INT 32
52672: PUSH
52673: LD_INT 36
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 101
52701: PUSH
52702: LD_INT 102
52704: PUSH
52705: LD_INT 103
52707: PUSH
52708: LD_INT 105
52710: PUSH
52711: LD_INT 106
52713: PUSH
52714: LD_INT 108
52716: PUSH
52717: LD_INT 109
52719: PUSH
52720: LD_INT 112
52722: PUSH
52723: LD_INT 114
52725: PUSH
52726: LD_INT 116
52728: PUSH
52729: LD_INT 117
52731: PUSH
52732: LD_INT 118
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: ST_TO_ADDR
52753: GO 54852
52755: LD_INT 10
52757: DOUBLE
52758: EQUAL
52759: IFTRUE 52763
52761: GO 52959
52763: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
52764: LD_ADDR_VAR 0 2
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: LD_INT 4
52774: PUSH
52775: LD_INT 5
52777: PUSH
52778: LD_INT 6
52780: PUSH
52781: LD_INT 7
52783: PUSH
52784: LD_INT 8
52786: PUSH
52787: LD_INT 9
52789: PUSH
52790: LD_INT 10
52792: PUSH
52793: LD_INT 11
52795: PUSH
52796: LD_INT 12
52798: PUSH
52799: LD_INT 13
52801: PUSH
52802: LD_INT 14
52804: PUSH
52805: LD_INT 15
52807: PUSH
52808: LD_INT 16
52810: PUSH
52811: LD_INT 17
52813: PUSH
52814: LD_INT 18
52816: PUSH
52817: LD_INT 19
52819: PUSH
52820: LD_INT 20
52822: PUSH
52823: LD_INT 21
52825: PUSH
52826: LD_INT 22
52828: PUSH
52829: LD_INT 23
52831: PUSH
52832: LD_INT 24
52834: PUSH
52835: LD_INT 25
52837: PUSH
52838: LD_INT 26
52840: PUSH
52841: LD_INT 28
52843: PUSH
52844: LD_INT 30
52846: PUSH
52847: LD_INT 31
52849: PUSH
52850: LD_INT 32
52852: PUSH
52853: LD_INT 36
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 101
52889: PUSH
52890: LD_INT 102
52892: PUSH
52893: LD_INT 103
52895: PUSH
52896: LD_INT 104
52898: PUSH
52899: LD_INT 105
52901: PUSH
52902: LD_INT 106
52904: PUSH
52905: LD_INT 107
52907: PUSH
52908: LD_INT 108
52910: PUSH
52911: LD_INT 109
52913: PUSH
52914: LD_INT 110
52916: PUSH
52917: LD_INT 111
52919: PUSH
52920: LD_INT 112
52922: PUSH
52923: LD_INT 114
52925: PUSH
52926: LD_INT 116
52928: PUSH
52929: LD_INT 117
52931: PUSH
52932: LD_INT 118
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: ST_TO_ADDR
52957: GO 54852
52959: LD_INT 11
52961: DOUBLE
52962: EQUAL
52963: IFTRUE 52967
52965: GO 53171
52967: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
52968: LD_ADDR_VAR 0 2
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: LD_INT 3
52978: PUSH
52979: LD_INT 4
52981: PUSH
52982: LD_INT 5
52984: PUSH
52985: LD_INT 6
52987: PUSH
52988: LD_INT 7
52990: PUSH
52991: LD_INT 8
52993: PUSH
52994: LD_INT 9
52996: PUSH
52997: LD_INT 10
52999: PUSH
53000: LD_INT 11
53002: PUSH
53003: LD_INT 12
53005: PUSH
53006: LD_INT 13
53008: PUSH
53009: LD_INT 14
53011: PUSH
53012: LD_INT 15
53014: PUSH
53015: LD_INT 16
53017: PUSH
53018: LD_INT 17
53020: PUSH
53021: LD_INT 18
53023: PUSH
53024: LD_INT 19
53026: PUSH
53027: LD_INT 20
53029: PUSH
53030: LD_INT 21
53032: PUSH
53033: LD_INT 22
53035: PUSH
53036: LD_INT 23
53038: PUSH
53039: LD_INT 24
53041: PUSH
53042: LD_INT 25
53044: PUSH
53045: LD_INT 26
53047: PUSH
53048: LD_INT 28
53050: PUSH
53051: LD_INT 30
53053: PUSH
53054: LD_INT 31
53056: PUSH
53057: LD_INT 32
53059: PUSH
53060: LD_INT 34
53062: PUSH
53063: LD_INT 36
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 101
53101: PUSH
53102: LD_INT 102
53104: PUSH
53105: LD_INT 103
53107: PUSH
53108: LD_INT 104
53110: PUSH
53111: LD_INT 105
53113: PUSH
53114: LD_INT 106
53116: PUSH
53117: LD_INT 107
53119: PUSH
53120: LD_INT 108
53122: PUSH
53123: LD_INT 109
53125: PUSH
53126: LD_INT 110
53128: PUSH
53129: LD_INT 111
53131: PUSH
53132: LD_INT 112
53134: PUSH
53135: LD_INT 114
53137: PUSH
53138: LD_INT 116
53140: PUSH
53141: LD_INT 117
53143: PUSH
53144: LD_INT 118
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: ST_TO_ADDR
53169: GO 54852
53171: LD_INT 12
53173: DOUBLE
53174: EQUAL
53175: IFTRUE 53179
53177: GO 53399
53179: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
53180: LD_ADDR_VAR 0 2
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: LD_INT 3
53193: PUSH
53194: LD_INT 4
53196: PUSH
53197: LD_INT 5
53199: PUSH
53200: LD_INT 6
53202: PUSH
53203: LD_INT 7
53205: PUSH
53206: LD_INT 8
53208: PUSH
53209: LD_INT 9
53211: PUSH
53212: LD_INT 10
53214: PUSH
53215: LD_INT 11
53217: PUSH
53218: LD_INT 12
53220: PUSH
53221: LD_INT 13
53223: PUSH
53224: LD_INT 14
53226: PUSH
53227: LD_INT 15
53229: PUSH
53230: LD_INT 16
53232: PUSH
53233: LD_INT 17
53235: PUSH
53236: LD_INT 18
53238: PUSH
53239: LD_INT 19
53241: PUSH
53242: LD_INT 20
53244: PUSH
53245: LD_INT 21
53247: PUSH
53248: LD_INT 22
53250: PUSH
53251: LD_INT 23
53253: PUSH
53254: LD_INT 24
53256: PUSH
53257: LD_INT 25
53259: PUSH
53260: LD_INT 26
53262: PUSH
53263: LD_INT 27
53265: PUSH
53266: LD_INT 28
53268: PUSH
53269: LD_INT 30
53271: PUSH
53272: LD_INT 31
53274: PUSH
53275: LD_INT 32
53277: PUSH
53278: LD_INT 33
53280: PUSH
53281: LD_INT 34
53283: PUSH
53284: LD_INT 36
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 101
53325: PUSH
53326: LD_INT 102
53328: PUSH
53329: LD_INT 103
53331: PUSH
53332: LD_INT 104
53334: PUSH
53335: LD_INT 105
53337: PUSH
53338: LD_INT 106
53340: PUSH
53341: LD_INT 107
53343: PUSH
53344: LD_INT 108
53346: PUSH
53347: LD_INT 109
53349: PUSH
53350: LD_INT 110
53352: PUSH
53353: LD_INT 111
53355: PUSH
53356: LD_INT 112
53358: PUSH
53359: LD_INT 113
53361: PUSH
53362: LD_INT 114
53364: PUSH
53365: LD_INT 116
53367: PUSH
53368: LD_INT 117
53370: PUSH
53371: LD_INT 118
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: ST_TO_ADDR
53397: GO 54852
53399: LD_INT 13
53401: DOUBLE
53402: EQUAL
53403: IFTRUE 53407
53405: GO 53615
53407: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
53408: LD_ADDR_VAR 0 2
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: LD_INT 3
53421: PUSH
53422: LD_INT 4
53424: PUSH
53425: LD_INT 5
53427: PUSH
53428: LD_INT 8
53430: PUSH
53431: LD_INT 9
53433: PUSH
53434: LD_INT 10
53436: PUSH
53437: LD_INT 11
53439: PUSH
53440: LD_INT 12
53442: PUSH
53443: LD_INT 14
53445: PUSH
53446: LD_INT 15
53448: PUSH
53449: LD_INT 16
53451: PUSH
53452: LD_INT 17
53454: PUSH
53455: LD_INT 18
53457: PUSH
53458: LD_INT 19
53460: PUSH
53461: LD_INT 20
53463: PUSH
53464: LD_INT 21
53466: PUSH
53467: LD_INT 22
53469: PUSH
53470: LD_INT 23
53472: PUSH
53473: LD_INT 24
53475: PUSH
53476: LD_INT 25
53478: PUSH
53479: LD_INT 26
53481: PUSH
53482: LD_INT 27
53484: PUSH
53485: LD_INT 28
53487: PUSH
53488: LD_INT 30
53490: PUSH
53491: LD_INT 31
53493: PUSH
53494: LD_INT 32
53496: PUSH
53497: LD_INT 33
53499: PUSH
53500: LD_INT 34
53502: PUSH
53503: LD_INT 36
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 101
53541: PUSH
53542: LD_INT 102
53544: PUSH
53545: LD_INT 103
53547: PUSH
53548: LD_INT 104
53550: PUSH
53551: LD_INT 105
53553: PUSH
53554: LD_INT 106
53556: PUSH
53557: LD_INT 107
53559: PUSH
53560: LD_INT 108
53562: PUSH
53563: LD_INT 109
53565: PUSH
53566: LD_INT 110
53568: PUSH
53569: LD_INT 111
53571: PUSH
53572: LD_INT 112
53574: PUSH
53575: LD_INT 113
53577: PUSH
53578: LD_INT 114
53580: PUSH
53581: LD_INT 116
53583: PUSH
53584: LD_INT 117
53586: PUSH
53587: LD_INT 118
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: ST_TO_ADDR
53613: GO 54852
53615: LD_INT 14
53617: DOUBLE
53618: EQUAL
53619: IFTRUE 53623
53621: GO 53847
53623: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
53624: LD_ADDR_VAR 0 2
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: LD_INT 3
53637: PUSH
53638: LD_INT 4
53640: PUSH
53641: LD_INT 5
53643: PUSH
53644: LD_INT 6
53646: PUSH
53647: LD_INT 7
53649: PUSH
53650: LD_INT 8
53652: PUSH
53653: LD_INT 9
53655: PUSH
53656: LD_INT 10
53658: PUSH
53659: LD_INT 11
53661: PUSH
53662: LD_INT 12
53664: PUSH
53665: LD_INT 13
53667: PUSH
53668: LD_INT 14
53670: PUSH
53671: LD_INT 15
53673: PUSH
53674: LD_INT 16
53676: PUSH
53677: LD_INT 17
53679: PUSH
53680: LD_INT 18
53682: PUSH
53683: LD_INT 19
53685: PUSH
53686: LD_INT 20
53688: PUSH
53689: LD_INT 21
53691: PUSH
53692: LD_INT 22
53694: PUSH
53695: LD_INT 23
53697: PUSH
53698: LD_INT 24
53700: PUSH
53701: LD_INT 25
53703: PUSH
53704: LD_INT 26
53706: PUSH
53707: LD_INT 27
53709: PUSH
53710: LD_INT 28
53712: PUSH
53713: LD_INT 29
53715: PUSH
53716: LD_INT 30
53718: PUSH
53719: LD_INT 31
53721: PUSH
53722: LD_INT 32
53724: PUSH
53725: LD_INT 33
53727: PUSH
53728: LD_INT 34
53730: PUSH
53731: LD_INT 36
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 101
53773: PUSH
53774: LD_INT 102
53776: PUSH
53777: LD_INT 103
53779: PUSH
53780: LD_INT 104
53782: PUSH
53783: LD_INT 105
53785: PUSH
53786: LD_INT 106
53788: PUSH
53789: LD_INT 107
53791: PUSH
53792: LD_INT 108
53794: PUSH
53795: LD_INT 109
53797: PUSH
53798: LD_INT 110
53800: PUSH
53801: LD_INT 111
53803: PUSH
53804: LD_INT 112
53806: PUSH
53807: LD_INT 113
53809: PUSH
53810: LD_INT 114
53812: PUSH
53813: LD_INT 116
53815: PUSH
53816: LD_INT 117
53818: PUSH
53819: LD_INT 118
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: ST_TO_ADDR
53845: GO 54852
53847: LD_INT 15
53849: DOUBLE
53850: EQUAL
53851: IFTRUE 53855
53853: GO 54079
53855: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
53856: LD_ADDR_VAR 0 2
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: LD_INT 2
53866: PUSH
53867: LD_INT 3
53869: PUSH
53870: LD_INT 4
53872: PUSH
53873: LD_INT 5
53875: PUSH
53876: LD_INT 6
53878: PUSH
53879: LD_INT 7
53881: PUSH
53882: LD_INT 8
53884: PUSH
53885: LD_INT 9
53887: PUSH
53888: LD_INT 10
53890: PUSH
53891: LD_INT 11
53893: PUSH
53894: LD_INT 12
53896: PUSH
53897: LD_INT 13
53899: PUSH
53900: LD_INT 14
53902: PUSH
53903: LD_INT 15
53905: PUSH
53906: LD_INT 16
53908: PUSH
53909: LD_INT 17
53911: PUSH
53912: LD_INT 18
53914: PUSH
53915: LD_INT 19
53917: PUSH
53918: LD_INT 20
53920: PUSH
53921: LD_INT 21
53923: PUSH
53924: LD_INT 22
53926: PUSH
53927: LD_INT 23
53929: PUSH
53930: LD_INT 24
53932: PUSH
53933: LD_INT 25
53935: PUSH
53936: LD_INT 26
53938: PUSH
53939: LD_INT 27
53941: PUSH
53942: LD_INT 28
53944: PUSH
53945: LD_INT 29
53947: PUSH
53948: LD_INT 30
53950: PUSH
53951: LD_INT 31
53953: PUSH
53954: LD_INT 32
53956: PUSH
53957: LD_INT 33
53959: PUSH
53960: LD_INT 34
53962: PUSH
53963: LD_INT 36
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 101
54005: PUSH
54006: LD_INT 102
54008: PUSH
54009: LD_INT 103
54011: PUSH
54012: LD_INT 104
54014: PUSH
54015: LD_INT 105
54017: PUSH
54018: LD_INT 106
54020: PUSH
54021: LD_INT 107
54023: PUSH
54024: LD_INT 108
54026: PUSH
54027: LD_INT 109
54029: PUSH
54030: LD_INT 110
54032: PUSH
54033: LD_INT 111
54035: PUSH
54036: LD_INT 112
54038: PUSH
54039: LD_INT 113
54041: PUSH
54042: LD_INT 114
54044: PUSH
54045: LD_INT 116
54047: PUSH
54048: LD_INT 117
54050: PUSH
54051: LD_INT 118
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: ST_TO_ADDR
54077: GO 54852
54079: LD_INT 16
54081: DOUBLE
54082: EQUAL
54083: IFTRUE 54087
54085: GO 54223
54087: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
54088: LD_ADDR_VAR 0 2
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: LD_INT 4
54098: PUSH
54099: LD_INT 5
54101: PUSH
54102: LD_INT 7
54104: PUSH
54105: LD_INT 11
54107: PUSH
54108: LD_INT 12
54110: PUSH
54111: LD_INT 15
54113: PUSH
54114: LD_INT 16
54116: PUSH
54117: LD_INT 20
54119: PUSH
54120: LD_INT 21
54122: PUSH
54123: LD_INT 22
54125: PUSH
54126: LD_INT 23
54128: PUSH
54129: LD_INT 25
54131: PUSH
54132: LD_INT 26
54134: PUSH
54135: LD_INT 30
54137: PUSH
54138: LD_INT 31
54140: PUSH
54141: LD_INT 32
54143: PUSH
54144: LD_INT 33
54146: PUSH
54147: LD_INT 34
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 101
54173: PUSH
54174: LD_INT 102
54176: PUSH
54177: LD_INT 103
54179: PUSH
54180: LD_INT 106
54182: PUSH
54183: LD_INT 108
54185: PUSH
54186: LD_INT 112
54188: PUSH
54189: LD_INT 113
54191: PUSH
54192: LD_INT 114
54194: PUSH
54195: LD_INT 116
54197: PUSH
54198: LD_INT 117
54200: PUSH
54201: LD_INT 118
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: ST_TO_ADDR
54221: GO 54852
54223: LD_INT 17
54225: DOUBLE
54226: EQUAL
54227: IFTRUE 54231
54229: GO 54455
54231: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
54232: LD_ADDR_VAR 0 2
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: LD_INT 3
54245: PUSH
54246: LD_INT 4
54248: PUSH
54249: LD_INT 5
54251: PUSH
54252: LD_INT 6
54254: PUSH
54255: LD_INT 7
54257: PUSH
54258: LD_INT 8
54260: PUSH
54261: LD_INT 9
54263: PUSH
54264: LD_INT 10
54266: PUSH
54267: LD_INT 11
54269: PUSH
54270: LD_INT 12
54272: PUSH
54273: LD_INT 13
54275: PUSH
54276: LD_INT 14
54278: PUSH
54279: LD_INT 15
54281: PUSH
54282: LD_INT 16
54284: PUSH
54285: LD_INT 17
54287: PUSH
54288: LD_INT 18
54290: PUSH
54291: LD_INT 19
54293: PUSH
54294: LD_INT 20
54296: PUSH
54297: LD_INT 21
54299: PUSH
54300: LD_INT 22
54302: PUSH
54303: LD_INT 23
54305: PUSH
54306: LD_INT 24
54308: PUSH
54309: LD_INT 25
54311: PUSH
54312: LD_INT 26
54314: PUSH
54315: LD_INT 27
54317: PUSH
54318: LD_INT 28
54320: PUSH
54321: LD_INT 29
54323: PUSH
54324: LD_INT 30
54326: PUSH
54327: LD_INT 31
54329: PUSH
54330: LD_INT 32
54332: PUSH
54333: LD_INT 33
54335: PUSH
54336: LD_INT 34
54338: PUSH
54339: LD_INT 36
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 101
54381: PUSH
54382: LD_INT 102
54384: PUSH
54385: LD_INT 103
54387: PUSH
54388: LD_INT 104
54390: PUSH
54391: LD_INT 105
54393: PUSH
54394: LD_INT 106
54396: PUSH
54397: LD_INT 107
54399: PUSH
54400: LD_INT 108
54402: PUSH
54403: LD_INT 109
54405: PUSH
54406: LD_INT 110
54408: PUSH
54409: LD_INT 111
54411: PUSH
54412: LD_INT 112
54414: PUSH
54415: LD_INT 113
54417: PUSH
54418: LD_INT 114
54420: PUSH
54421: LD_INT 116
54423: PUSH
54424: LD_INT 117
54426: PUSH
54427: LD_INT 118
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: ST_TO_ADDR
54453: GO 54852
54455: LD_INT 18
54457: DOUBLE
54458: EQUAL
54459: IFTRUE 54463
54461: GO 54611
54463: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
54464: LD_ADDR_VAR 0 2
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: LD_INT 4
54474: PUSH
54475: LD_INT 5
54477: PUSH
54478: LD_INT 7
54480: PUSH
54481: LD_INT 11
54483: PUSH
54484: LD_INT 12
54486: PUSH
54487: LD_INT 15
54489: PUSH
54490: LD_INT 16
54492: PUSH
54493: LD_INT 20
54495: PUSH
54496: LD_INT 21
54498: PUSH
54499: LD_INT 22
54501: PUSH
54502: LD_INT 23
54504: PUSH
54505: LD_INT 25
54507: PUSH
54508: LD_INT 26
54510: PUSH
54511: LD_INT 30
54513: PUSH
54514: LD_INT 31
54516: PUSH
54517: LD_INT 32
54519: PUSH
54520: LD_INT 33
54522: PUSH
54523: LD_INT 34
54525: PUSH
54526: LD_INT 35
54528: PUSH
54529: LD_INT 36
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 101
54557: PUSH
54558: LD_INT 102
54560: PUSH
54561: LD_INT 103
54563: PUSH
54564: LD_INT 106
54566: PUSH
54567: LD_INT 108
54569: PUSH
54570: LD_INT 112
54572: PUSH
54573: LD_INT 113
54575: PUSH
54576: LD_INT 114
54578: PUSH
54579: LD_INT 115
54581: PUSH
54582: LD_INT 116
54584: PUSH
54585: LD_INT 117
54587: PUSH
54588: LD_INT 118
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: ST_TO_ADDR
54609: GO 54852
54611: LD_INT 19
54613: DOUBLE
54614: EQUAL
54615: IFTRUE 54619
54617: GO 54851
54619: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
54620: LD_ADDR_VAR 0 2
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: LD_INT 2
54630: PUSH
54631: LD_INT 3
54633: PUSH
54634: LD_INT 4
54636: PUSH
54637: LD_INT 5
54639: PUSH
54640: LD_INT 6
54642: PUSH
54643: LD_INT 7
54645: PUSH
54646: LD_INT 8
54648: PUSH
54649: LD_INT 9
54651: PUSH
54652: LD_INT 10
54654: PUSH
54655: LD_INT 11
54657: PUSH
54658: LD_INT 12
54660: PUSH
54661: LD_INT 13
54663: PUSH
54664: LD_INT 14
54666: PUSH
54667: LD_INT 15
54669: PUSH
54670: LD_INT 16
54672: PUSH
54673: LD_INT 17
54675: PUSH
54676: LD_INT 18
54678: PUSH
54679: LD_INT 19
54681: PUSH
54682: LD_INT 20
54684: PUSH
54685: LD_INT 21
54687: PUSH
54688: LD_INT 22
54690: PUSH
54691: LD_INT 23
54693: PUSH
54694: LD_INT 24
54696: PUSH
54697: LD_INT 25
54699: PUSH
54700: LD_INT 26
54702: PUSH
54703: LD_INT 27
54705: PUSH
54706: LD_INT 28
54708: PUSH
54709: LD_INT 29
54711: PUSH
54712: LD_INT 30
54714: PUSH
54715: LD_INT 31
54717: PUSH
54718: LD_INT 32
54720: PUSH
54721: LD_INT 33
54723: PUSH
54724: LD_INT 34
54726: PUSH
54727: LD_INT 35
54729: PUSH
54730: LD_INT 36
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 101
54773: PUSH
54774: LD_INT 102
54776: PUSH
54777: LD_INT 103
54779: PUSH
54780: LD_INT 104
54782: PUSH
54783: LD_INT 105
54785: PUSH
54786: LD_INT 106
54788: PUSH
54789: LD_INT 107
54791: PUSH
54792: LD_INT 108
54794: PUSH
54795: LD_INT 109
54797: PUSH
54798: LD_INT 110
54800: PUSH
54801: LD_INT 111
54803: PUSH
54804: LD_INT 112
54806: PUSH
54807: LD_INT 113
54809: PUSH
54810: LD_INT 114
54812: PUSH
54813: LD_INT 115
54815: PUSH
54816: LD_INT 116
54818: PUSH
54819: LD_INT 117
54821: PUSH
54822: LD_INT 118
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: ST_TO_ADDR
54849: GO 54852
54851: POP
// end else
54852: GO 55083
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
54854: LD_ADDR_VAR 0 2
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: LD_INT 2
54864: PUSH
54865: LD_INT 3
54867: PUSH
54868: LD_INT 4
54870: PUSH
54871: LD_INT 5
54873: PUSH
54874: LD_INT 6
54876: PUSH
54877: LD_INT 7
54879: PUSH
54880: LD_INT 8
54882: PUSH
54883: LD_INT 9
54885: PUSH
54886: LD_INT 10
54888: PUSH
54889: LD_INT 11
54891: PUSH
54892: LD_INT 12
54894: PUSH
54895: LD_INT 13
54897: PUSH
54898: LD_INT 14
54900: PUSH
54901: LD_INT 15
54903: PUSH
54904: LD_INT 16
54906: PUSH
54907: LD_INT 17
54909: PUSH
54910: LD_INT 18
54912: PUSH
54913: LD_INT 19
54915: PUSH
54916: LD_INT 20
54918: PUSH
54919: LD_INT 21
54921: PUSH
54922: LD_INT 22
54924: PUSH
54925: LD_INT 23
54927: PUSH
54928: LD_INT 24
54930: PUSH
54931: LD_INT 25
54933: PUSH
54934: LD_INT 26
54936: PUSH
54937: LD_INT 27
54939: PUSH
54940: LD_INT 28
54942: PUSH
54943: LD_INT 29
54945: PUSH
54946: LD_INT 30
54948: PUSH
54949: LD_INT 31
54951: PUSH
54952: LD_INT 32
54954: PUSH
54955: LD_INT 33
54957: PUSH
54958: LD_INT 34
54960: PUSH
54961: LD_INT 35
54963: PUSH
54964: LD_INT 36
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 101
55007: PUSH
55008: LD_INT 102
55010: PUSH
55011: LD_INT 103
55013: PUSH
55014: LD_INT 104
55016: PUSH
55017: LD_INT 105
55019: PUSH
55020: LD_INT 106
55022: PUSH
55023: LD_INT 107
55025: PUSH
55026: LD_INT 108
55028: PUSH
55029: LD_INT 109
55031: PUSH
55032: LD_INT 110
55034: PUSH
55035: LD_INT 111
55037: PUSH
55038: LD_INT 112
55040: PUSH
55041: LD_INT 113
55043: PUSH
55044: LD_INT 114
55046: PUSH
55047: LD_INT 115
55049: PUSH
55050: LD_INT 116
55052: PUSH
55053: LD_INT 117
55055: PUSH
55056: LD_INT 118
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: ST_TO_ADDR
// if result then
55083: LD_VAR 0 2
55087: IFFALSE 55873
// begin normal :=  ;
55089: LD_ADDR_VAR 0 5
55093: PUSH
55094: LD_STRING 
55096: ST_TO_ADDR
// hardcore :=  ;
55097: LD_ADDR_VAR 0 6
55101: PUSH
55102: LD_STRING 
55104: ST_TO_ADDR
// active :=  ;
55105: LD_ADDR_VAR 0 7
55109: PUSH
55110: LD_STRING 
55112: ST_TO_ADDR
// for i = 1 to normalCounter do
55113: LD_ADDR_VAR 0 8
55117: PUSH
55118: DOUBLE
55119: LD_INT 1
55121: DEC
55122: ST_TO_ADDR
55123: LD_EXP 30
55127: PUSH
55128: FOR_TO
55129: IFFALSE 55230
// begin tmp := 0 ;
55131: LD_ADDR_VAR 0 3
55135: PUSH
55136: LD_STRING 0
55138: ST_TO_ADDR
// if result [ 1 ] then
55139: LD_VAR 0 2
55143: PUSH
55144: LD_INT 1
55146: ARRAY
55147: IFFALSE 55212
// if result [ 1 ] [ 1 ] = i then
55149: LD_VAR 0 2
55153: PUSH
55154: LD_INT 1
55156: ARRAY
55157: PUSH
55158: LD_INT 1
55160: ARRAY
55161: PUSH
55162: LD_VAR 0 8
55166: EQUAL
55167: IFFALSE 55212
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
55169: LD_ADDR_VAR 0 2
55173: PUSH
55174: LD_VAR 0 2
55178: PPUSH
55179: LD_INT 1
55181: PPUSH
55182: LD_VAR 0 2
55186: PUSH
55187: LD_INT 1
55189: ARRAY
55190: PPUSH
55191: LD_INT 1
55193: PPUSH
55194: CALL_OW 3
55198: PPUSH
55199: CALL_OW 1
55203: ST_TO_ADDR
// tmp := 1 ;
55204: LD_ADDR_VAR 0 3
55208: PUSH
55209: LD_STRING 1
55211: ST_TO_ADDR
// end ; normal := normal & tmp ;
55212: LD_ADDR_VAR 0 5
55216: PUSH
55217: LD_VAR 0 5
55221: PUSH
55222: LD_VAR 0 3
55226: STR
55227: ST_TO_ADDR
// end ;
55228: GO 55128
55230: POP
55231: POP
// for i = 1 to hardcoreCounter do
55232: LD_ADDR_VAR 0 8
55236: PUSH
55237: DOUBLE
55238: LD_INT 1
55240: DEC
55241: ST_TO_ADDR
55242: LD_EXP 31
55246: PUSH
55247: FOR_TO
55248: IFFALSE 55353
// begin tmp := 0 ;
55250: LD_ADDR_VAR 0 3
55254: PUSH
55255: LD_STRING 0
55257: ST_TO_ADDR
// if result [ 2 ] then
55258: LD_VAR 0 2
55262: PUSH
55263: LD_INT 2
55265: ARRAY
55266: IFFALSE 55335
// if result [ 2 ] [ 1 ] = 100 + i then
55268: LD_VAR 0 2
55272: PUSH
55273: LD_INT 2
55275: ARRAY
55276: PUSH
55277: LD_INT 1
55279: ARRAY
55280: PUSH
55281: LD_INT 100
55283: PUSH
55284: LD_VAR 0 8
55288: PLUS
55289: EQUAL
55290: IFFALSE 55335
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
55292: LD_ADDR_VAR 0 2
55296: PUSH
55297: LD_VAR 0 2
55301: PPUSH
55302: LD_INT 2
55304: PPUSH
55305: LD_VAR 0 2
55309: PUSH
55310: LD_INT 2
55312: ARRAY
55313: PPUSH
55314: LD_INT 1
55316: PPUSH
55317: CALL_OW 3
55321: PPUSH
55322: CALL_OW 1
55326: ST_TO_ADDR
// tmp := 1 ;
55327: LD_ADDR_VAR 0 3
55331: PUSH
55332: LD_STRING 1
55334: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
55335: LD_ADDR_VAR 0 6
55339: PUSH
55340: LD_VAR 0 6
55344: PUSH
55345: LD_VAR 0 3
55349: STR
55350: ST_TO_ADDR
// end ;
55351: GO 55247
55353: POP
55354: POP
// if isGameLoad then
55355: LD_VAR 0 1
55359: IFFALSE 55834
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
55361: LD_ADDR_VAR 0 4
55365: PUSH
55366: LD_EXP 34
55370: PUSH
55371: LD_EXP 33
55375: PUSH
55376: LD_EXP 35
55380: PUSH
55381: LD_EXP 32
55385: PUSH
55386: LD_EXP 36
55390: PUSH
55391: LD_EXP 37
55395: PUSH
55396: LD_EXP 38
55400: PUSH
55401: LD_EXP 39
55405: PUSH
55406: LD_EXP 40
55410: PUSH
55411: LD_EXP 41
55415: PUSH
55416: LD_EXP 42
55420: PUSH
55421: LD_EXP 43
55425: PUSH
55426: LD_EXP 44
55430: PUSH
55431: LD_EXP 45
55435: PUSH
55436: LD_EXP 53
55440: PUSH
55441: LD_EXP 54
55445: PUSH
55446: LD_EXP 55
55450: PUSH
55451: LD_EXP 56
55455: PUSH
55456: LD_EXP 58
55460: PUSH
55461: LD_EXP 59
55465: PUSH
55466: LD_EXP 60
55470: PUSH
55471: LD_EXP 63
55475: PUSH
55476: LD_EXP 65
55480: PUSH
55481: LD_EXP 66
55485: PUSH
55486: LD_EXP 67
55490: PUSH
55491: LD_EXP 69
55495: PUSH
55496: LD_EXP 70
55500: PUSH
55501: LD_EXP 73
55505: PUSH
55506: LD_EXP 74
55510: PUSH
55511: LD_EXP 75
55515: PUSH
55516: LD_EXP 76
55520: PUSH
55521: LD_EXP 77
55525: PUSH
55526: LD_EXP 78
55530: PUSH
55531: LD_EXP 79
55535: PUSH
55536: LD_EXP 80
55540: PUSH
55541: LD_EXP 81
55545: PUSH
55546: LD_EXP 46
55550: PUSH
55551: LD_EXP 47
55555: PUSH
55556: LD_EXP 50
55560: PUSH
55561: LD_EXP 51
55565: PUSH
55566: LD_EXP 52
55570: PUSH
55571: LD_EXP 48
55575: PUSH
55576: LD_EXP 49
55580: PUSH
55581: LD_EXP 57
55585: PUSH
55586: LD_EXP 61
55590: PUSH
55591: LD_EXP 62
55595: PUSH
55596: LD_EXP 64
55600: PUSH
55601: LD_EXP 68
55605: PUSH
55606: LD_EXP 71
55610: PUSH
55611: LD_EXP 72
55615: PUSH
55616: LD_EXP 82
55620: PUSH
55621: LD_EXP 83
55625: PUSH
55626: LD_EXP 84
55630: PUSH
55631: LD_EXP 85
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: ST_TO_ADDR
// tmp :=  ;
55692: LD_ADDR_VAR 0 3
55696: PUSH
55697: LD_STRING 
55699: ST_TO_ADDR
// for i = 1 to normalCounter do
55700: LD_ADDR_VAR 0 8
55704: PUSH
55705: DOUBLE
55706: LD_INT 1
55708: DEC
55709: ST_TO_ADDR
55710: LD_EXP 30
55714: PUSH
55715: FOR_TO
55716: IFFALSE 55752
// begin if flags [ i ] then
55718: LD_VAR 0 4
55722: PUSH
55723: LD_VAR 0 8
55727: ARRAY
55728: IFFALSE 55750
// tmp := tmp & i & ; ;
55730: LD_ADDR_VAR 0 3
55734: PUSH
55735: LD_VAR 0 3
55739: PUSH
55740: LD_VAR 0 8
55744: STR
55745: PUSH
55746: LD_STRING ;
55748: STR
55749: ST_TO_ADDR
// end ;
55750: GO 55715
55752: POP
55753: POP
// for i = 1 to hardcoreCounter do
55754: LD_ADDR_VAR 0 8
55758: PUSH
55759: DOUBLE
55760: LD_INT 1
55762: DEC
55763: ST_TO_ADDR
55764: LD_EXP 31
55768: PUSH
55769: FOR_TO
55770: IFFALSE 55816
// begin if flags [ normalCounter + i ] then
55772: LD_VAR 0 4
55776: PUSH
55777: LD_EXP 30
55781: PUSH
55782: LD_VAR 0 8
55786: PLUS
55787: ARRAY
55788: IFFALSE 55814
// tmp := tmp & ( 100 + i ) & ; ;
55790: LD_ADDR_VAR 0 3
55794: PUSH
55795: LD_VAR 0 3
55799: PUSH
55800: LD_INT 100
55802: PUSH
55803: LD_VAR 0 8
55807: PLUS
55808: STR
55809: PUSH
55810: LD_STRING ;
55812: STR
55813: ST_TO_ADDR
// end ;
55814: GO 55769
55816: POP
55817: POP
// if tmp then
55818: LD_VAR 0 3
55822: IFFALSE 55834
// active := tmp ;
55824: LD_ADDR_VAR 0 7
55828: PUSH
55829: LD_VAR 0 3
55833: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
55834: LD_STRING getStreamItemsFromMission("
55836: PUSH
55837: LD_VAR 0 5
55841: STR
55842: PUSH
55843: LD_STRING ","
55845: STR
55846: PUSH
55847: LD_VAR 0 6
55851: STR
55852: PUSH
55853: LD_STRING ","
55855: STR
55856: PUSH
55857: LD_VAR 0 7
55861: STR
55862: PUSH
55863: LD_STRING ")
55865: STR
55866: PPUSH
55867: CALL_OW 559
// end else
55871: GO 55880
// ToLua ( getStreamItemsFromMission("","","") ) ;
55873: LD_STRING getStreamItemsFromMission("","","")
55875: PPUSH
55876: CALL_OW 559
// end ;
55880: LD_VAR 0 2
55884: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
55885: LD_EXP 29
55889: PUSH
55890: LD_EXP 34
55894: AND
55895: IFFALSE 56019
55897: GO 55899
55899: DISABLE
55900: LD_INT 0
55902: PPUSH
55903: PPUSH
// begin enable ;
55904: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
55905: LD_ADDR_VAR 0 2
55909: PUSH
55910: LD_INT 22
55912: PUSH
55913: LD_OWVAR 2
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: LD_INT 34
55927: PUSH
55928: LD_INT 7
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 34
55937: PUSH
55938: LD_INT 45
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 34
55947: PUSH
55948: LD_INT 28
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 34
55957: PUSH
55958: LD_INT 47
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PPUSH
55976: CALL_OW 69
55980: ST_TO_ADDR
// if not tmp then
55981: LD_VAR 0 2
55985: NOT
55986: IFFALSE 55990
// exit ;
55988: GO 56019
// for i in tmp do
55990: LD_ADDR_VAR 0 1
55994: PUSH
55995: LD_VAR 0 2
55999: PUSH
56000: FOR_IN
56001: IFFALSE 56017
// begin SetLives ( i , 0 ) ;
56003: LD_VAR 0 1
56007: PPUSH
56008: LD_INT 0
56010: PPUSH
56011: CALL_OW 234
// end ;
56015: GO 56000
56017: POP
56018: POP
// end ;
56019: PPOPN 2
56021: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
56022: LD_EXP 29
56026: PUSH
56027: LD_EXP 35
56031: AND
56032: IFFALSE 56116
56034: GO 56036
56036: DISABLE
56037: LD_INT 0
56039: PPUSH
56040: PPUSH
// begin enable ;
56041: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
56042: LD_ADDR_VAR 0 2
56046: PUSH
56047: LD_INT 22
56049: PUSH
56050: LD_OWVAR 2
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 32
56061: PUSH
56062: LD_INT 3
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PPUSH
56073: CALL_OW 69
56077: ST_TO_ADDR
// if not tmp then
56078: LD_VAR 0 2
56082: NOT
56083: IFFALSE 56087
// exit ;
56085: GO 56116
// for i in tmp do
56087: LD_ADDR_VAR 0 1
56091: PUSH
56092: LD_VAR 0 2
56096: PUSH
56097: FOR_IN
56098: IFFALSE 56114
// begin SetLives ( i , 0 ) ;
56100: LD_VAR 0 1
56104: PPUSH
56105: LD_INT 0
56107: PPUSH
56108: CALL_OW 234
// end ;
56112: GO 56097
56114: POP
56115: POP
// end ;
56116: PPOPN 2
56118: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
56119: LD_EXP 29
56123: PUSH
56124: LD_EXP 32
56128: AND
56129: IFFALSE 56222
56131: GO 56133
56133: DISABLE
56134: LD_INT 0
56136: PPUSH
// begin enable ;
56137: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
56138: LD_ADDR_VAR 0 1
56142: PUSH
56143: LD_INT 22
56145: PUSH
56146: LD_OWVAR 2
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: LD_INT 25
56160: PUSH
56161: LD_INT 5
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 25
56170: PUSH
56171: LD_INT 9
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 25
56180: PUSH
56181: LD_INT 8
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PPUSH
56198: CALL_OW 69
56202: PUSH
56203: FOR_IN
56204: IFFALSE 56220
// begin SetClass ( i , 1 ) ;
56206: LD_VAR 0 1
56210: PPUSH
56211: LD_INT 1
56213: PPUSH
56214: CALL_OW 336
// end ;
56218: GO 56203
56220: POP
56221: POP
// end ;
56222: PPOPN 1
56224: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
56225: LD_EXP 29
56229: PUSH
56230: LD_EXP 33
56234: AND
56235: PUSH
56236: LD_OWVAR 65
56240: PUSH
56241: LD_INT 7
56243: LESS
56244: AND
56245: IFFALSE 56259
56247: GO 56249
56249: DISABLE
// begin enable ;
56250: ENABLE
// game_speed := 7 ;
56251: LD_ADDR_OWVAR 65
56255: PUSH
56256: LD_INT 7
56258: ST_TO_ADDR
// end ;
56259: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
56260: LD_EXP 29
56264: PUSH
56265: LD_EXP 36
56269: AND
56270: IFFALSE 56472
56272: GO 56274
56274: DISABLE
56275: LD_INT 0
56277: PPUSH
56278: PPUSH
56279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56280: LD_ADDR_VAR 0 3
56284: PUSH
56285: LD_INT 81
56287: PUSH
56288: LD_OWVAR 2
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 21
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PPUSH
56311: CALL_OW 69
56315: ST_TO_ADDR
// if not tmp then
56316: LD_VAR 0 3
56320: NOT
56321: IFFALSE 56325
// exit ;
56323: GO 56472
// if tmp > 5 then
56325: LD_VAR 0 3
56329: PUSH
56330: LD_INT 5
56332: GREATER
56333: IFFALSE 56345
// k := 5 else
56335: LD_ADDR_VAR 0 2
56339: PUSH
56340: LD_INT 5
56342: ST_TO_ADDR
56343: GO 56355
// k := tmp ;
56345: LD_ADDR_VAR 0 2
56349: PUSH
56350: LD_VAR 0 3
56354: ST_TO_ADDR
// for i := 1 to k do
56355: LD_ADDR_VAR 0 1
56359: PUSH
56360: DOUBLE
56361: LD_INT 1
56363: DEC
56364: ST_TO_ADDR
56365: LD_VAR 0 2
56369: PUSH
56370: FOR_TO
56371: IFFALSE 56470
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
56373: LD_VAR 0 3
56377: PUSH
56378: LD_VAR 0 1
56382: ARRAY
56383: PPUSH
56384: LD_VAR 0 1
56388: PUSH
56389: LD_INT 4
56391: MOD
56392: PUSH
56393: LD_INT 1
56395: PLUS
56396: PPUSH
56397: CALL_OW 259
56401: PUSH
56402: LD_INT 10
56404: LESS
56405: IFFALSE 56468
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
56407: LD_VAR 0 3
56411: PUSH
56412: LD_VAR 0 1
56416: ARRAY
56417: PPUSH
56418: LD_VAR 0 1
56422: PUSH
56423: LD_INT 4
56425: MOD
56426: PUSH
56427: LD_INT 1
56429: PLUS
56430: PPUSH
56431: LD_VAR 0 3
56435: PUSH
56436: LD_VAR 0 1
56440: ARRAY
56441: PPUSH
56442: LD_VAR 0 1
56446: PUSH
56447: LD_INT 4
56449: MOD
56450: PUSH
56451: LD_INT 1
56453: PLUS
56454: PPUSH
56455: CALL_OW 259
56459: PUSH
56460: LD_INT 1
56462: PLUS
56463: PPUSH
56464: CALL_OW 237
56468: GO 56370
56470: POP
56471: POP
// end ;
56472: PPOPN 3
56474: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
56475: LD_EXP 29
56479: PUSH
56480: LD_EXP 37
56484: AND
56485: IFFALSE 56505
56487: GO 56489
56489: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
56490: LD_INT 4
56492: PPUSH
56493: LD_OWVAR 2
56497: PPUSH
56498: LD_INT 0
56500: PPUSH
56501: CALL_OW 324
56505: END
// every 0 0$1 trigger StreamModeActive and sShovel do
56506: LD_EXP 29
56510: PUSH
56511: LD_EXP 66
56515: AND
56516: IFFALSE 56536
56518: GO 56520
56520: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
56521: LD_INT 19
56523: PPUSH
56524: LD_OWVAR 2
56528: PPUSH
56529: LD_INT 0
56531: PPUSH
56532: CALL_OW 324
56536: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
56537: LD_EXP 29
56541: PUSH
56542: LD_EXP 38
56546: AND
56547: IFFALSE 56649
56549: GO 56551
56551: DISABLE
56552: LD_INT 0
56554: PPUSH
56555: PPUSH
// begin enable ;
56556: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
56557: LD_ADDR_VAR 0 2
56561: PUSH
56562: LD_INT 22
56564: PUSH
56565: LD_OWVAR 2
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: LD_INT 34
56579: PUSH
56580: LD_INT 11
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 34
56589: PUSH
56590: LD_INT 30
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: LIST
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PPUSH
56606: CALL_OW 69
56610: ST_TO_ADDR
// if not tmp then
56611: LD_VAR 0 2
56615: NOT
56616: IFFALSE 56620
// exit ;
56618: GO 56649
// for i in tmp do
56620: LD_ADDR_VAR 0 1
56624: PUSH
56625: LD_VAR 0 2
56629: PUSH
56630: FOR_IN
56631: IFFALSE 56647
// begin SetLives ( i , 0 ) ;
56633: LD_VAR 0 1
56637: PPUSH
56638: LD_INT 0
56640: PPUSH
56641: CALL_OW 234
// end ;
56645: GO 56630
56647: POP
56648: POP
// end ;
56649: PPOPN 2
56651: END
// every 0 0$1 trigger StreamModeActive and sBunker do
56652: LD_EXP 29
56656: PUSH
56657: LD_EXP 39
56661: AND
56662: IFFALSE 56682
56664: GO 56666
56666: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
56667: LD_INT 32
56669: PPUSH
56670: LD_OWVAR 2
56674: PPUSH
56675: LD_INT 0
56677: PPUSH
56678: CALL_OW 324
56682: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
56683: LD_EXP 29
56687: PUSH
56688: LD_EXP 40
56692: AND
56693: IFFALSE 56874
56695: GO 56697
56697: DISABLE
56698: LD_INT 0
56700: PPUSH
56701: PPUSH
56702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
56703: LD_ADDR_VAR 0 2
56707: PUSH
56708: LD_INT 22
56710: PUSH
56711: LD_OWVAR 2
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 33
56722: PUSH
56723: LD_INT 3
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PPUSH
56734: CALL_OW 69
56738: ST_TO_ADDR
// if not tmp then
56739: LD_VAR 0 2
56743: NOT
56744: IFFALSE 56748
// exit ;
56746: GO 56874
// side := 0 ;
56748: LD_ADDR_VAR 0 3
56752: PUSH
56753: LD_INT 0
56755: ST_TO_ADDR
// for i := 1 to 8 do
56756: LD_ADDR_VAR 0 1
56760: PUSH
56761: DOUBLE
56762: LD_INT 1
56764: DEC
56765: ST_TO_ADDR
56766: LD_INT 8
56768: PUSH
56769: FOR_TO
56770: IFFALSE 56818
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
56772: LD_OWVAR 2
56776: PUSH
56777: LD_VAR 0 1
56781: NONEQUAL
56782: PUSH
56783: LD_OWVAR 2
56787: PPUSH
56788: LD_VAR 0 1
56792: PPUSH
56793: CALL_OW 81
56797: PUSH
56798: LD_INT 2
56800: EQUAL
56801: AND
56802: IFFALSE 56816
// begin side := i ;
56804: LD_ADDR_VAR 0 3
56808: PUSH
56809: LD_VAR 0 1
56813: ST_TO_ADDR
// break ;
56814: GO 56818
// end ;
56816: GO 56769
56818: POP
56819: POP
// if not side then
56820: LD_VAR 0 3
56824: NOT
56825: IFFALSE 56829
// exit ;
56827: GO 56874
// for i := 1 to tmp do
56829: LD_ADDR_VAR 0 1
56833: PUSH
56834: DOUBLE
56835: LD_INT 1
56837: DEC
56838: ST_TO_ADDR
56839: LD_VAR 0 2
56843: PUSH
56844: FOR_TO
56845: IFFALSE 56872
// if Prob ( 60 ) then
56847: LD_INT 60
56849: PPUSH
56850: CALL_OW 13
56854: IFFALSE 56870
// SetSide ( i , side ) ;
56856: LD_VAR 0 1
56860: PPUSH
56861: LD_VAR 0 3
56865: PPUSH
56866: CALL_OW 235
56870: GO 56844
56872: POP
56873: POP
// end ;
56874: PPOPN 3
56876: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
56877: LD_EXP 29
56881: PUSH
56882: LD_EXP 42
56886: AND
56887: IFFALSE 57006
56889: GO 56891
56891: DISABLE
56892: LD_INT 0
56894: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
56895: LD_ADDR_VAR 0 1
56899: PUSH
56900: LD_INT 22
56902: PUSH
56903: LD_OWVAR 2
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 21
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 3
56924: PUSH
56925: LD_INT 23
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: LIST
56943: PPUSH
56944: CALL_OW 69
56948: PUSH
56949: FOR_IN
56950: IFFALSE 57004
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
56952: LD_VAR 0 1
56956: PPUSH
56957: CALL_OW 257
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: LD_INT 2
56967: PUSH
56968: LD_INT 3
56970: PUSH
56971: LD_INT 4
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: IN
56980: IFFALSE 57002
// SetClass ( un , rand ( 1 , 4 ) ) ;
56982: LD_VAR 0 1
56986: PPUSH
56987: LD_INT 1
56989: PPUSH
56990: LD_INT 4
56992: PPUSH
56993: CALL_OW 12
56997: PPUSH
56998: CALL_OW 336
57002: GO 56949
57004: POP
57005: POP
// end ;
57006: PPOPN 1
57008: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
57009: LD_EXP 29
57013: PUSH
57014: LD_EXP 41
57018: AND
57019: IFFALSE 57098
57021: GO 57023
57023: DISABLE
57024: LD_INT 0
57026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57027: LD_ADDR_VAR 0 1
57031: PUSH
57032: LD_INT 22
57034: PUSH
57035: LD_OWVAR 2
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 21
57046: PUSH
57047: LD_INT 3
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PPUSH
57058: CALL_OW 69
57062: ST_TO_ADDR
// if not tmp then
57063: LD_VAR 0 1
57067: NOT
57068: IFFALSE 57072
// exit ;
57070: GO 57098
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
57072: LD_VAR 0 1
57076: PUSH
57077: LD_INT 1
57079: PPUSH
57080: LD_VAR 0 1
57084: PPUSH
57085: CALL_OW 12
57089: ARRAY
57090: PPUSH
57091: LD_INT 100
57093: PPUSH
57094: CALL_OW 234
// end ;
57098: PPOPN 1
57100: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
57101: LD_EXP 29
57105: PUSH
57106: LD_EXP 43
57110: AND
57111: IFFALSE 57209
57113: GO 57115
57115: DISABLE
57116: LD_INT 0
57118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57119: LD_ADDR_VAR 0 1
57123: PUSH
57124: LD_INT 22
57126: PUSH
57127: LD_OWVAR 2
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 21
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PPUSH
57150: CALL_OW 69
57154: ST_TO_ADDR
// if not tmp then
57155: LD_VAR 0 1
57159: NOT
57160: IFFALSE 57164
// exit ;
57162: GO 57209
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
57164: LD_VAR 0 1
57168: PUSH
57169: LD_INT 1
57171: PPUSH
57172: LD_VAR 0 1
57176: PPUSH
57177: CALL_OW 12
57181: ARRAY
57182: PPUSH
57183: LD_INT 1
57185: PPUSH
57186: LD_INT 4
57188: PPUSH
57189: CALL_OW 12
57193: PPUSH
57194: LD_INT 3000
57196: PPUSH
57197: LD_INT 9000
57199: PPUSH
57200: CALL_OW 12
57204: PPUSH
57205: CALL_OW 492
// end ;
57209: PPOPN 1
57211: END
// every 0 0$1 trigger StreamModeActive and sDepot do
57212: LD_EXP 29
57216: PUSH
57217: LD_EXP 44
57221: AND
57222: IFFALSE 57242
57224: GO 57226
57226: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
57227: LD_INT 1
57229: PPUSH
57230: LD_OWVAR 2
57234: PPUSH
57235: LD_INT 0
57237: PPUSH
57238: CALL_OW 324
57242: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
57243: LD_EXP 29
57247: PUSH
57248: LD_EXP 45
57252: AND
57253: IFFALSE 57336
57255: GO 57257
57257: DISABLE
57258: LD_INT 0
57260: PPUSH
57261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57262: LD_ADDR_VAR 0 2
57266: PUSH
57267: LD_INT 22
57269: PUSH
57270: LD_OWVAR 2
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 21
57281: PUSH
57282: LD_INT 3
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PPUSH
57293: CALL_OW 69
57297: ST_TO_ADDR
// if not tmp then
57298: LD_VAR 0 2
57302: NOT
57303: IFFALSE 57307
// exit ;
57305: GO 57336
// for i in tmp do
57307: LD_ADDR_VAR 0 1
57311: PUSH
57312: LD_VAR 0 2
57316: PUSH
57317: FOR_IN
57318: IFFALSE 57334
// SetBLevel ( i , 10 ) ;
57320: LD_VAR 0 1
57324: PPUSH
57325: LD_INT 10
57327: PPUSH
57328: CALL_OW 241
57332: GO 57317
57334: POP
57335: POP
// end ;
57336: PPOPN 2
57338: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
57339: LD_EXP 29
57343: PUSH
57344: LD_EXP 46
57348: AND
57349: IFFALSE 57460
57351: GO 57353
57353: DISABLE
57354: LD_INT 0
57356: PPUSH
57357: PPUSH
57358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57359: LD_ADDR_VAR 0 3
57363: PUSH
57364: LD_INT 22
57366: PUSH
57367: LD_OWVAR 2
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 25
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PPUSH
57390: CALL_OW 69
57394: ST_TO_ADDR
// if not tmp then
57395: LD_VAR 0 3
57399: NOT
57400: IFFALSE 57404
// exit ;
57402: GO 57460
// un := tmp [ rand ( 1 , tmp ) ] ;
57404: LD_ADDR_VAR 0 2
57408: PUSH
57409: LD_VAR 0 3
57413: PUSH
57414: LD_INT 1
57416: PPUSH
57417: LD_VAR 0 3
57421: PPUSH
57422: CALL_OW 12
57426: ARRAY
57427: ST_TO_ADDR
// if Crawls ( un ) then
57428: LD_VAR 0 2
57432: PPUSH
57433: CALL_OW 318
57437: IFFALSE 57448
// ComWalk ( un ) ;
57439: LD_VAR 0 2
57443: PPUSH
57444: CALL_OW 138
// SetClass ( un , class_sniper ) ;
57448: LD_VAR 0 2
57452: PPUSH
57453: LD_INT 5
57455: PPUSH
57456: CALL_OW 336
// end ;
57460: PPOPN 3
57462: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
57463: LD_EXP 29
57467: PUSH
57468: LD_EXP 47
57472: AND
57473: PUSH
57474: LD_OWVAR 67
57478: PUSH
57479: LD_INT 4
57481: LESS
57482: AND
57483: IFFALSE 57502
57485: GO 57487
57487: DISABLE
// begin Difficulty := Difficulty + 1 ;
57488: LD_ADDR_OWVAR 67
57492: PUSH
57493: LD_OWVAR 67
57497: PUSH
57498: LD_INT 1
57500: PLUS
57501: ST_TO_ADDR
// end ;
57502: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
57503: LD_EXP 29
57507: PUSH
57508: LD_EXP 48
57512: AND
57513: IFFALSE 57616
57515: GO 57517
57517: DISABLE
57518: LD_INT 0
57520: PPUSH
// begin for i := 1 to 5 do
57521: LD_ADDR_VAR 0 1
57525: PUSH
57526: DOUBLE
57527: LD_INT 1
57529: DEC
57530: ST_TO_ADDR
57531: LD_INT 5
57533: PUSH
57534: FOR_TO
57535: IFFALSE 57614
// begin uc_nation := nation_nature ;
57537: LD_ADDR_OWVAR 21
57541: PUSH
57542: LD_INT 0
57544: ST_TO_ADDR
// uc_side := 0 ;
57545: LD_ADDR_OWVAR 20
57549: PUSH
57550: LD_INT 0
57552: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57553: LD_ADDR_OWVAR 29
57557: PUSH
57558: LD_INT 12
57560: PUSH
57561: LD_INT 12
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: ST_TO_ADDR
// hc_agressivity := 20 ;
57568: LD_ADDR_OWVAR 35
57572: PUSH
57573: LD_INT 20
57575: ST_TO_ADDR
// hc_class := class_tiger ;
57576: LD_ADDR_OWVAR 28
57580: PUSH
57581: LD_INT 14
57583: ST_TO_ADDR
// hc_gallery :=  ;
57584: LD_ADDR_OWVAR 33
57588: PUSH
57589: LD_STRING 
57591: ST_TO_ADDR
// hc_name :=  ;
57592: LD_ADDR_OWVAR 26
57596: PUSH
57597: LD_STRING 
57599: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
57600: CALL_OW 44
57604: PPUSH
57605: LD_INT 0
57607: PPUSH
57608: CALL_OW 51
// end ;
57612: GO 57534
57614: POP
57615: POP
// end ;
57616: PPOPN 1
57618: END
// every 0 0$1 trigger StreamModeActive and sBomb do
57619: LD_EXP 29
57623: PUSH
57624: LD_EXP 49
57628: AND
57629: IFFALSE 57638
57631: GO 57633
57633: DISABLE
// StreamSibBomb ;
57634: CALL 57639 0 0
57638: END
// export function StreamSibBomb ; var i , x , y ; begin
57639: LD_INT 0
57641: PPUSH
57642: PPUSH
57643: PPUSH
57644: PPUSH
// result := false ;
57645: LD_ADDR_VAR 0 1
57649: PUSH
57650: LD_INT 0
57652: ST_TO_ADDR
// for i := 1 to 16 do
57653: LD_ADDR_VAR 0 2
57657: PUSH
57658: DOUBLE
57659: LD_INT 1
57661: DEC
57662: ST_TO_ADDR
57663: LD_INT 16
57665: PUSH
57666: FOR_TO
57667: IFFALSE 57866
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57669: LD_ADDR_VAR 0 3
57673: PUSH
57674: LD_INT 10
57676: PUSH
57677: LD_INT 20
57679: PUSH
57680: LD_INT 30
57682: PUSH
57683: LD_INT 40
57685: PUSH
57686: LD_INT 50
57688: PUSH
57689: LD_INT 60
57691: PUSH
57692: LD_INT 70
57694: PUSH
57695: LD_INT 80
57697: PUSH
57698: LD_INT 90
57700: PUSH
57701: LD_INT 100
57703: PUSH
57704: LD_INT 110
57706: PUSH
57707: LD_INT 120
57709: PUSH
57710: LD_INT 130
57712: PUSH
57713: LD_INT 140
57715: PUSH
57716: LD_INT 150
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: PPUSH
57739: LD_INT 15
57741: PPUSH
57742: CALL_OW 12
57746: ARRAY
57747: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57748: LD_ADDR_VAR 0 4
57752: PUSH
57753: LD_INT 10
57755: PUSH
57756: LD_INT 20
57758: PUSH
57759: LD_INT 30
57761: PUSH
57762: LD_INT 40
57764: PUSH
57765: LD_INT 50
57767: PUSH
57768: LD_INT 60
57770: PUSH
57771: LD_INT 70
57773: PUSH
57774: LD_INT 80
57776: PUSH
57777: LD_INT 90
57779: PUSH
57780: LD_INT 100
57782: PUSH
57783: LD_INT 110
57785: PUSH
57786: LD_INT 120
57788: PUSH
57789: LD_INT 130
57791: PUSH
57792: LD_INT 140
57794: PUSH
57795: LD_INT 150
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: PPUSH
57818: LD_INT 15
57820: PPUSH
57821: CALL_OW 12
57825: ARRAY
57826: ST_TO_ADDR
// if ValidHex ( x , y ) then
57827: LD_VAR 0 3
57831: PPUSH
57832: LD_VAR 0 4
57836: PPUSH
57837: CALL_OW 488
57841: IFFALSE 57864
// begin result := [ x , y ] ;
57843: LD_ADDR_VAR 0 1
57847: PUSH
57848: LD_VAR 0 3
57852: PUSH
57853: LD_VAR 0 4
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: ST_TO_ADDR
// break ;
57862: GO 57866
// end ; end ;
57864: GO 57666
57866: POP
57867: POP
// if result then
57868: LD_VAR 0 1
57872: IFFALSE 57932
// begin ToLua ( playSibBomb() ) ;
57874: LD_STRING playSibBomb()
57876: PPUSH
57877: CALL_OW 559
// wait ( 0 0$14 ) ;
57881: LD_INT 490
57883: PPUSH
57884: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
57888: LD_VAR 0 1
57892: PUSH
57893: LD_INT 1
57895: ARRAY
57896: PPUSH
57897: LD_VAR 0 1
57901: PUSH
57902: LD_INT 2
57904: ARRAY
57905: PPUSH
57906: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
57910: LD_VAR 0 1
57914: PUSH
57915: LD_INT 1
57917: ARRAY
57918: PPUSH
57919: LD_VAR 0 1
57923: PUSH
57924: LD_INT 2
57926: ARRAY
57927: PPUSH
57928: CALL_OW 429
// end ; end ;
57932: LD_VAR 0 1
57936: RET
// every 0 0$1 trigger StreamModeActive and sReset do
57937: LD_EXP 29
57941: PUSH
57942: LD_EXP 51
57946: AND
57947: IFFALSE 57959
57949: GO 57951
57951: DISABLE
// YouLost (  ) ;
57952: LD_STRING 
57954: PPUSH
57955: CALL_OW 104
57959: END
// every 0 0$1 trigger StreamModeActive and sFog do
57960: LD_EXP 29
57964: PUSH
57965: LD_EXP 50
57969: AND
57970: IFFALSE 57984
57972: GO 57974
57974: DISABLE
// FogOff ( your_side ) ;
57975: LD_OWVAR 2
57979: PPUSH
57980: CALL_OW 344
57984: END
// every 0 0$1 trigger StreamModeActive and sSun do
57985: LD_EXP 29
57989: PUSH
57990: LD_EXP 52
57994: AND
57995: IFFALSE 58023
57997: GO 57999
57999: DISABLE
// begin solar_recharge_percent := 0 ;
58000: LD_ADDR_OWVAR 79
58004: PUSH
58005: LD_INT 0
58007: ST_TO_ADDR
// wait ( 5 5$00 ) ;
58008: LD_INT 10500
58010: PPUSH
58011: CALL_OW 67
// solar_recharge_percent := 100 ;
58015: LD_ADDR_OWVAR 79
58019: PUSH
58020: LD_INT 100
58022: ST_TO_ADDR
// end ;
58023: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
58024: LD_EXP 29
58028: PUSH
58029: LD_EXP 53
58033: AND
58034: IFFALSE 58273
58036: GO 58038
58038: DISABLE
58039: LD_INT 0
58041: PPUSH
58042: PPUSH
58043: PPUSH
// begin tmp := [ ] ;
58044: LD_ADDR_VAR 0 3
58048: PUSH
58049: EMPTY
58050: ST_TO_ADDR
// for i := 1 to 6 do
58051: LD_ADDR_VAR 0 1
58055: PUSH
58056: DOUBLE
58057: LD_INT 1
58059: DEC
58060: ST_TO_ADDR
58061: LD_INT 6
58063: PUSH
58064: FOR_TO
58065: IFFALSE 58170
// begin uc_nation := nation_nature ;
58067: LD_ADDR_OWVAR 21
58071: PUSH
58072: LD_INT 0
58074: ST_TO_ADDR
// uc_side := 0 ;
58075: LD_ADDR_OWVAR 20
58079: PUSH
58080: LD_INT 0
58082: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58083: LD_ADDR_OWVAR 29
58087: PUSH
58088: LD_INT 12
58090: PUSH
58091: LD_INT 12
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: ST_TO_ADDR
// hc_agressivity := 20 ;
58098: LD_ADDR_OWVAR 35
58102: PUSH
58103: LD_INT 20
58105: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
58106: LD_ADDR_OWVAR 28
58110: PUSH
58111: LD_INT 17
58113: ST_TO_ADDR
// hc_gallery :=  ;
58114: LD_ADDR_OWVAR 33
58118: PUSH
58119: LD_STRING 
58121: ST_TO_ADDR
// hc_name :=  ;
58122: LD_ADDR_OWVAR 26
58126: PUSH
58127: LD_STRING 
58129: ST_TO_ADDR
// un := CreateHuman ;
58130: LD_ADDR_VAR 0 2
58134: PUSH
58135: CALL_OW 44
58139: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
58140: LD_VAR 0 2
58144: PPUSH
58145: LD_INT 1
58147: PPUSH
58148: CALL_OW 51
// tmp := tmp ^ un ;
58152: LD_ADDR_VAR 0 3
58156: PUSH
58157: LD_VAR 0 3
58161: PUSH
58162: LD_VAR 0 2
58166: ADD
58167: ST_TO_ADDR
// end ;
58168: GO 58064
58170: POP
58171: POP
// repeat wait ( 0 0$1 ) ;
58172: LD_INT 35
58174: PPUSH
58175: CALL_OW 67
// for un in tmp do
58179: LD_ADDR_VAR 0 2
58183: PUSH
58184: LD_VAR 0 3
58188: PUSH
58189: FOR_IN
58190: IFFALSE 58264
// begin if IsDead ( un ) then
58192: LD_VAR 0 2
58196: PPUSH
58197: CALL_OW 301
58201: IFFALSE 58221
// begin tmp := tmp diff un ;
58203: LD_ADDR_VAR 0 3
58207: PUSH
58208: LD_VAR 0 3
58212: PUSH
58213: LD_VAR 0 2
58217: DIFF
58218: ST_TO_ADDR
// continue ;
58219: GO 58189
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
58221: LD_VAR 0 2
58225: PPUSH
58226: LD_INT 3
58228: PUSH
58229: LD_INT 22
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PPUSH
58243: CALL_OW 69
58247: PPUSH
58248: LD_VAR 0 2
58252: PPUSH
58253: CALL_OW 74
58257: PPUSH
58258: CALL_OW 115
// end ;
58262: GO 58189
58264: POP
58265: POP
// until not tmp ;
58266: LD_VAR 0 3
58270: NOT
58271: IFFALSE 58172
// end ;
58273: PPOPN 3
58275: END
// every 0 0$1 trigger StreamModeActive and sTroll do
58276: LD_EXP 29
58280: PUSH
58281: LD_EXP 54
58285: AND
58286: IFFALSE 58340
58288: GO 58290
58290: DISABLE
// begin ToLua ( displayTroll(); ) ;
58291: LD_STRING displayTroll();
58293: PPUSH
58294: CALL_OW 559
// wait ( 3 3$00 ) ;
58298: LD_INT 6300
58300: PPUSH
58301: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58305: LD_STRING hideTroll();
58307: PPUSH
58308: CALL_OW 559
// wait ( 1 1$00 ) ;
58312: LD_INT 2100
58314: PPUSH
58315: CALL_OW 67
// ToLua ( displayTroll(); ) ;
58319: LD_STRING displayTroll();
58321: PPUSH
58322: CALL_OW 559
// wait ( 1 1$00 ) ;
58326: LD_INT 2100
58328: PPUSH
58329: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58333: LD_STRING hideTroll();
58335: PPUSH
58336: CALL_OW 559
// end ;
58340: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
58341: LD_EXP 29
58345: PUSH
58346: LD_EXP 55
58350: AND
58351: IFFALSE 58414
58353: GO 58355
58355: DISABLE
58356: LD_INT 0
58358: PPUSH
// begin p := 0 ;
58359: LD_ADDR_VAR 0 1
58363: PUSH
58364: LD_INT 0
58366: ST_TO_ADDR
// repeat game_speed := 1 ;
58367: LD_ADDR_OWVAR 65
58371: PUSH
58372: LD_INT 1
58374: ST_TO_ADDR
// wait ( 0 0$1 ) ;
58375: LD_INT 35
58377: PPUSH
58378: CALL_OW 67
// p := p + 1 ;
58382: LD_ADDR_VAR 0 1
58386: PUSH
58387: LD_VAR 0 1
58391: PUSH
58392: LD_INT 1
58394: PLUS
58395: ST_TO_ADDR
// until p >= 60 ;
58396: LD_VAR 0 1
58400: PUSH
58401: LD_INT 60
58403: GREATEREQUAL
58404: IFFALSE 58367
// game_speed := 4 ;
58406: LD_ADDR_OWVAR 65
58410: PUSH
58411: LD_INT 4
58413: ST_TO_ADDR
// end ;
58414: PPOPN 1
58416: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
58417: LD_EXP 29
58421: PUSH
58422: LD_EXP 56
58426: AND
58427: IFFALSE 58573
58429: GO 58431
58431: DISABLE
58432: LD_INT 0
58434: PPUSH
58435: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58436: LD_ADDR_VAR 0 1
58440: PUSH
58441: LD_INT 22
58443: PUSH
58444: LD_OWVAR 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: LD_INT 30
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 30
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: LIST
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PPUSH
58485: CALL_OW 69
58489: ST_TO_ADDR
// if not depot then
58490: LD_VAR 0 1
58494: NOT
58495: IFFALSE 58499
// exit ;
58497: GO 58573
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
58499: LD_ADDR_VAR 0 2
58503: PUSH
58504: LD_VAR 0 1
58508: PUSH
58509: LD_INT 1
58511: PPUSH
58512: LD_VAR 0 1
58516: PPUSH
58517: CALL_OW 12
58521: ARRAY
58522: PPUSH
58523: CALL_OW 274
58527: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
58528: LD_VAR 0 2
58532: PPUSH
58533: LD_INT 1
58535: PPUSH
58536: LD_INT 0
58538: PPUSH
58539: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
58543: LD_VAR 0 2
58547: PPUSH
58548: LD_INT 2
58550: PPUSH
58551: LD_INT 0
58553: PPUSH
58554: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
58558: LD_VAR 0 2
58562: PPUSH
58563: LD_INT 3
58565: PPUSH
58566: LD_INT 0
58568: PPUSH
58569: CALL_OW 277
// end ;
58573: PPOPN 2
58575: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
58576: LD_EXP 29
58580: PUSH
58581: LD_EXP 57
58585: AND
58586: IFFALSE 58683
58588: GO 58590
58590: DISABLE
58591: LD_INT 0
58593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58594: LD_ADDR_VAR 0 1
58598: PUSH
58599: LD_INT 22
58601: PUSH
58602: LD_OWVAR 2
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 21
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 3
58623: PUSH
58624: LD_INT 23
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: LIST
58642: PPUSH
58643: CALL_OW 69
58647: ST_TO_ADDR
// if not tmp then
58648: LD_VAR 0 1
58652: NOT
58653: IFFALSE 58657
// exit ;
58655: GO 58683
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
58657: LD_VAR 0 1
58661: PUSH
58662: LD_INT 1
58664: PPUSH
58665: LD_VAR 0 1
58669: PPUSH
58670: CALL_OW 12
58674: ARRAY
58675: PPUSH
58676: LD_INT 200
58678: PPUSH
58679: CALL_OW 234
// end ;
58683: PPOPN 1
58685: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
58686: LD_EXP 29
58690: PUSH
58691: LD_EXP 58
58695: AND
58696: IFFALSE 58775
58698: GO 58700
58700: DISABLE
58701: LD_INT 0
58703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
58704: LD_ADDR_VAR 0 1
58708: PUSH
58709: LD_INT 22
58711: PUSH
58712: LD_OWVAR 2
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 21
58723: PUSH
58724: LD_INT 2
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PPUSH
58735: CALL_OW 69
58739: ST_TO_ADDR
// if not tmp then
58740: LD_VAR 0 1
58744: NOT
58745: IFFALSE 58749
// exit ;
58747: GO 58775
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
58749: LD_VAR 0 1
58753: PUSH
58754: LD_INT 1
58756: PPUSH
58757: LD_VAR 0 1
58761: PPUSH
58762: CALL_OW 12
58766: ARRAY
58767: PPUSH
58768: LD_INT 60
58770: PPUSH
58771: CALL_OW 234
// end ;
58775: PPOPN 1
58777: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
58778: LD_EXP 29
58782: PUSH
58783: LD_EXP 59
58787: AND
58788: IFFALSE 58887
58790: GO 58792
58792: DISABLE
58793: LD_INT 0
58795: PPUSH
58796: PPUSH
// begin enable ;
58797: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
58798: LD_ADDR_VAR 0 1
58802: PUSH
58803: LD_INT 22
58805: PUSH
58806: LD_OWVAR 2
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 61
58817: PUSH
58818: EMPTY
58819: LIST
58820: PUSH
58821: LD_INT 33
58823: PUSH
58824: LD_INT 2
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: LIST
58835: PPUSH
58836: CALL_OW 69
58840: ST_TO_ADDR
// if not tmp then
58841: LD_VAR 0 1
58845: NOT
58846: IFFALSE 58850
// exit ;
58848: GO 58887
// for i in tmp do
58850: LD_ADDR_VAR 0 2
58854: PUSH
58855: LD_VAR 0 1
58859: PUSH
58860: FOR_IN
58861: IFFALSE 58885
// if IsControledBy ( i ) then
58863: LD_VAR 0 2
58867: PPUSH
58868: CALL_OW 312
58872: IFFALSE 58883
// ComUnlink ( i ) ;
58874: LD_VAR 0 2
58878: PPUSH
58879: CALL_OW 136
58883: GO 58860
58885: POP
58886: POP
// end ;
58887: PPOPN 2
58889: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
58890: LD_EXP 29
58894: PUSH
58895: LD_EXP 60
58899: AND
58900: IFFALSE 59040
58902: GO 58904
58904: DISABLE
58905: LD_INT 0
58907: PPUSH
58908: PPUSH
// begin ToLua ( displayPowell(); ) ;
58909: LD_STRING displayPowell();
58911: PPUSH
58912: CALL_OW 559
// uc_side := 0 ;
58916: LD_ADDR_OWVAR 20
58920: PUSH
58921: LD_INT 0
58923: ST_TO_ADDR
// uc_nation := 2 ;
58924: LD_ADDR_OWVAR 21
58928: PUSH
58929: LD_INT 2
58931: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
58932: LD_ADDR_OWVAR 37
58936: PUSH
58937: LD_INT 14
58939: ST_TO_ADDR
// vc_engine := engine_siberite ;
58940: LD_ADDR_OWVAR 39
58944: PUSH
58945: LD_INT 3
58947: ST_TO_ADDR
// vc_control := control_apeman ;
58948: LD_ADDR_OWVAR 38
58952: PUSH
58953: LD_INT 5
58955: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
58956: LD_ADDR_OWVAR 40
58960: PUSH
58961: LD_INT 29
58963: ST_TO_ADDR
// un := CreateVehicle ;
58964: LD_ADDR_VAR 0 2
58968: PUSH
58969: CALL_OW 45
58973: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58974: LD_VAR 0 2
58978: PPUSH
58979: LD_INT 1
58981: PPUSH
58982: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58986: LD_INT 35
58988: PPUSH
58989: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58993: LD_VAR 0 2
58997: PPUSH
58998: LD_INT 22
59000: PUSH
59001: LD_OWVAR 2
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PPUSH
59010: CALL_OW 69
59014: PPUSH
59015: LD_VAR 0 2
59019: PPUSH
59020: CALL_OW 74
59024: PPUSH
59025: CALL_OW 115
// until IsDead ( un ) ;
59029: LD_VAR 0 2
59033: PPUSH
59034: CALL_OW 301
59038: IFFALSE 58986
// end ;
59040: PPOPN 2
59042: END
// every 0 0$1 trigger StreamModeActive and sStu do
59043: LD_EXP 29
59047: PUSH
59048: LD_EXP 68
59052: AND
59053: IFFALSE 59069
59055: GO 59057
59057: DISABLE
// begin ToLua ( displayStucuk(); ) ;
59058: LD_STRING displayStucuk();
59060: PPUSH
59061: CALL_OW 559
// ResetFog ;
59065: CALL_OW 335
// end ;
59069: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
59070: LD_EXP 29
59074: PUSH
59075: LD_EXP 61
59079: AND
59080: IFFALSE 59221
59082: GO 59084
59084: DISABLE
59085: LD_INT 0
59087: PPUSH
59088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59089: LD_ADDR_VAR 0 2
59093: PUSH
59094: LD_INT 22
59096: PUSH
59097: LD_OWVAR 2
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 21
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PPUSH
59120: CALL_OW 69
59124: ST_TO_ADDR
// if not tmp then
59125: LD_VAR 0 2
59129: NOT
59130: IFFALSE 59134
// exit ;
59132: GO 59221
// un := tmp [ rand ( 1 , tmp ) ] ;
59134: LD_ADDR_VAR 0 1
59138: PUSH
59139: LD_VAR 0 2
59143: PUSH
59144: LD_INT 1
59146: PPUSH
59147: LD_VAR 0 2
59151: PPUSH
59152: CALL_OW 12
59156: ARRAY
59157: ST_TO_ADDR
// SetSide ( un , 0 ) ;
59158: LD_VAR 0 1
59162: PPUSH
59163: LD_INT 0
59165: PPUSH
59166: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
59170: LD_VAR 0 1
59174: PPUSH
59175: LD_OWVAR 3
59179: PUSH
59180: LD_VAR 0 1
59184: DIFF
59185: PPUSH
59186: LD_VAR 0 1
59190: PPUSH
59191: CALL_OW 74
59195: PPUSH
59196: CALL_OW 115
// wait ( 0 0$20 ) ;
59200: LD_INT 700
59202: PPUSH
59203: CALL_OW 67
// SetSide ( un , your_side ) ;
59207: LD_VAR 0 1
59211: PPUSH
59212: LD_OWVAR 2
59216: PPUSH
59217: CALL_OW 235
// end ;
59221: PPOPN 2
59223: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
59224: LD_EXP 29
59228: PUSH
59229: LD_EXP 62
59233: AND
59234: IFFALSE 59340
59236: GO 59238
59238: DISABLE
59239: LD_INT 0
59241: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59242: LD_ADDR_VAR 0 1
59246: PUSH
59247: LD_INT 22
59249: PUSH
59250: LD_OWVAR 2
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 2
59261: PUSH
59262: LD_INT 30
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 30
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: LIST
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PPUSH
59291: CALL_OW 69
59295: ST_TO_ADDR
// if not depot then
59296: LD_VAR 0 1
59300: NOT
59301: IFFALSE 59305
// exit ;
59303: GO 59340
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
59305: LD_VAR 0 1
59309: PUSH
59310: LD_INT 1
59312: ARRAY
59313: PPUSH
59314: CALL_OW 250
59318: PPUSH
59319: LD_VAR 0 1
59323: PUSH
59324: LD_INT 1
59326: ARRAY
59327: PPUSH
59328: CALL_OW 251
59332: PPUSH
59333: LD_INT 70
59335: PPUSH
59336: CALL_OW 495
// end ;
59340: PPOPN 1
59342: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
59343: LD_EXP 29
59347: PUSH
59348: LD_EXP 63
59352: AND
59353: IFFALSE 59564
59355: GO 59357
59357: DISABLE
59358: LD_INT 0
59360: PPUSH
59361: PPUSH
59362: PPUSH
59363: PPUSH
59364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59365: LD_ADDR_VAR 0 5
59369: PUSH
59370: LD_INT 22
59372: PUSH
59373: LD_OWVAR 2
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 21
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PPUSH
59396: CALL_OW 69
59400: ST_TO_ADDR
// if not tmp then
59401: LD_VAR 0 5
59405: NOT
59406: IFFALSE 59410
// exit ;
59408: GO 59564
// for i in tmp do
59410: LD_ADDR_VAR 0 1
59414: PUSH
59415: LD_VAR 0 5
59419: PUSH
59420: FOR_IN
59421: IFFALSE 59562
// begin d := rand ( 0 , 5 ) ;
59423: LD_ADDR_VAR 0 4
59427: PUSH
59428: LD_INT 0
59430: PPUSH
59431: LD_INT 5
59433: PPUSH
59434: CALL_OW 12
59438: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
59439: LD_ADDR_VAR 0 2
59443: PUSH
59444: LD_VAR 0 1
59448: PPUSH
59449: CALL_OW 250
59453: PPUSH
59454: LD_VAR 0 4
59458: PPUSH
59459: LD_INT 3
59461: PPUSH
59462: LD_INT 12
59464: PPUSH
59465: CALL_OW 12
59469: PPUSH
59470: CALL_OW 272
59474: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
59475: LD_ADDR_VAR 0 3
59479: PUSH
59480: LD_VAR 0 1
59484: PPUSH
59485: CALL_OW 251
59489: PPUSH
59490: LD_VAR 0 4
59494: PPUSH
59495: LD_INT 3
59497: PPUSH
59498: LD_INT 12
59500: PPUSH
59501: CALL_OW 12
59505: PPUSH
59506: CALL_OW 273
59510: ST_TO_ADDR
// if ValidHex ( x , y ) then
59511: LD_VAR 0 2
59515: PPUSH
59516: LD_VAR 0 3
59520: PPUSH
59521: CALL_OW 488
59525: IFFALSE 59560
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
59527: LD_VAR 0 1
59531: PPUSH
59532: LD_VAR 0 2
59536: PPUSH
59537: LD_VAR 0 3
59541: PPUSH
59542: LD_INT 3
59544: PPUSH
59545: LD_INT 6
59547: PPUSH
59548: CALL_OW 12
59552: PPUSH
59553: LD_INT 1
59555: PPUSH
59556: CALL_OW 483
// end ;
59560: GO 59420
59562: POP
59563: POP
// end ;
59564: PPOPN 5
59566: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
59567: LD_EXP 29
59571: PUSH
59572: LD_EXP 64
59576: AND
59577: IFFALSE 59671
59579: GO 59581
59581: DISABLE
59582: LD_INT 0
59584: PPUSH
59585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
59586: LD_ADDR_VAR 0 2
59590: PUSH
59591: LD_INT 22
59593: PUSH
59594: LD_OWVAR 2
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 32
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 21
59615: PUSH
59616: LD_INT 2
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: LIST
59627: PPUSH
59628: CALL_OW 69
59632: ST_TO_ADDR
// if not tmp then
59633: LD_VAR 0 2
59637: NOT
59638: IFFALSE 59642
// exit ;
59640: GO 59671
// for i in tmp do
59642: LD_ADDR_VAR 0 1
59646: PUSH
59647: LD_VAR 0 2
59651: PUSH
59652: FOR_IN
59653: IFFALSE 59669
// SetFuel ( i , 0 ) ;
59655: LD_VAR 0 1
59659: PPUSH
59660: LD_INT 0
59662: PPUSH
59663: CALL_OW 240
59667: GO 59652
59669: POP
59670: POP
// end ;
59671: PPOPN 2
59673: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
59674: LD_EXP 29
59678: PUSH
59679: LD_EXP 65
59683: AND
59684: IFFALSE 59750
59686: GO 59688
59688: DISABLE
59689: LD_INT 0
59691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59692: LD_ADDR_VAR 0 1
59696: PUSH
59697: LD_INT 22
59699: PUSH
59700: LD_OWVAR 2
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 30
59711: PUSH
59712: LD_INT 29
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PPUSH
59723: CALL_OW 69
59727: ST_TO_ADDR
// if not tmp then
59728: LD_VAR 0 1
59732: NOT
59733: IFFALSE 59737
// exit ;
59735: GO 59750
// DestroyUnit ( tmp [ 1 ] ) ;
59737: LD_VAR 0 1
59741: PUSH
59742: LD_INT 1
59744: ARRAY
59745: PPUSH
59746: CALL_OW 65
// end ;
59750: PPOPN 1
59752: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
59753: LD_EXP 29
59757: PUSH
59758: LD_EXP 67
59762: AND
59763: IFFALSE 59892
59765: GO 59767
59767: DISABLE
59768: LD_INT 0
59770: PPUSH
// begin uc_side := 0 ;
59771: LD_ADDR_OWVAR 20
59775: PUSH
59776: LD_INT 0
59778: ST_TO_ADDR
// uc_nation := nation_arabian ;
59779: LD_ADDR_OWVAR 21
59783: PUSH
59784: LD_INT 2
59786: ST_TO_ADDR
// hc_gallery :=  ;
59787: LD_ADDR_OWVAR 33
59791: PUSH
59792: LD_STRING 
59794: ST_TO_ADDR
// hc_name :=  ;
59795: LD_ADDR_OWVAR 26
59799: PUSH
59800: LD_STRING 
59802: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
59803: LD_INT 1
59805: PPUSH
59806: LD_INT 11
59808: PPUSH
59809: LD_INT 10
59811: PPUSH
59812: CALL_OW 380
// un := CreateHuman ;
59816: LD_ADDR_VAR 0 1
59820: PUSH
59821: CALL_OW 44
59825: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59826: LD_VAR 0 1
59830: PPUSH
59831: LD_INT 1
59833: PPUSH
59834: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59838: LD_INT 35
59840: PPUSH
59841: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59845: LD_VAR 0 1
59849: PPUSH
59850: LD_INT 22
59852: PUSH
59853: LD_OWVAR 2
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PPUSH
59862: CALL_OW 69
59866: PPUSH
59867: LD_VAR 0 1
59871: PPUSH
59872: CALL_OW 74
59876: PPUSH
59877: CALL_OW 115
// until IsDead ( un ) ;
59881: LD_VAR 0 1
59885: PPUSH
59886: CALL_OW 301
59890: IFFALSE 59838
// end ;
59892: PPOPN 1
59894: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
59895: LD_EXP 29
59899: PUSH
59900: LD_EXP 69
59904: AND
59905: IFFALSE 59917
59907: GO 59909
59909: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
59910: LD_STRING earthquake(getX(game), 0, 32)
59912: PPUSH
59913: CALL_OW 559
59917: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
59918: LD_EXP 29
59922: PUSH
59923: LD_EXP 70
59927: AND
59928: IFFALSE 60019
59930: GO 59932
59932: DISABLE
59933: LD_INT 0
59935: PPUSH
// begin enable ;
59936: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
59937: LD_ADDR_VAR 0 1
59941: PUSH
59942: LD_INT 22
59944: PUSH
59945: LD_OWVAR 2
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 21
59956: PUSH
59957: LD_INT 2
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 33
59966: PUSH
59967: LD_INT 3
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: LIST
59978: PPUSH
59979: CALL_OW 69
59983: ST_TO_ADDR
// if not tmp then
59984: LD_VAR 0 1
59988: NOT
59989: IFFALSE 59993
// exit ;
59991: GO 60019
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59993: LD_VAR 0 1
59997: PUSH
59998: LD_INT 1
60000: PPUSH
60001: LD_VAR 0 1
60005: PPUSH
60006: CALL_OW 12
60010: ARRAY
60011: PPUSH
60012: LD_INT 1
60014: PPUSH
60015: CALL_OW 234
// end ;
60019: PPOPN 1
60021: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
60022: LD_EXP 29
60026: PUSH
60027: LD_EXP 71
60031: AND
60032: IFFALSE 60173
60034: GO 60036
60036: DISABLE
60037: LD_INT 0
60039: PPUSH
60040: PPUSH
60041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60042: LD_ADDR_VAR 0 3
60046: PUSH
60047: LD_INT 22
60049: PUSH
60050: LD_OWVAR 2
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 25
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PPUSH
60073: CALL_OW 69
60077: ST_TO_ADDR
// if not tmp then
60078: LD_VAR 0 3
60082: NOT
60083: IFFALSE 60087
// exit ;
60085: GO 60173
// un := tmp [ rand ( 1 , tmp ) ] ;
60087: LD_ADDR_VAR 0 2
60091: PUSH
60092: LD_VAR 0 3
60096: PUSH
60097: LD_INT 1
60099: PPUSH
60100: LD_VAR 0 3
60104: PPUSH
60105: CALL_OW 12
60109: ARRAY
60110: ST_TO_ADDR
// if Crawls ( un ) then
60111: LD_VAR 0 2
60115: PPUSH
60116: CALL_OW 318
60120: IFFALSE 60131
// ComWalk ( un ) ;
60122: LD_VAR 0 2
60126: PPUSH
60127: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
60131: LD_VAR 0 2
60135: PPUSH
60136: LD_INT 9
60138: PPUSH
60139: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
60143: LD_INT 28
60145: PPUSH
60146: LD_OWVAR 2
60150: PPUSH
60151: LD_INT 2
60153: PPUSH
60154: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
60158: LD_INT 29
60160: PPUSH
60161: LD_OWVAR 2
60165: PPUSH
60166: LD_INT 2
60168: PPUSH
60169: CALL_OW 322
// end ;
60173: PPOPN 3
60175: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
60176: LD_EXP 29
60180: PUSH
60181: LD_EXP 72
60185: AND
60186: IFFALSE 60297
60188: GO 60190
60190: DISABLE
60191: LD_INT 0
60193: PPUSH
60194: PPUSH
60195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60196: LD_ADDR_VAR 0 3
60200: PUSH
60201: LD_INT 22
60203: PUSH
60204: LD_OWVAR 2
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 25
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PPUSH
60227: CALL_OW 69
60231: ST_TO_ADDR
// if not tmp then
60232: LD_VAR 0 3
60236: NOT
60237: IFFALSE 60241
// exit ;
60239: GO 60297
// un := tmp [ rand ( 1 , tmp ) ] ;
60241: LD_ADDR_VAR 0 2
60245: PUSH
60246: LD_VAR 0 3
60250: PUSH
60251: LD_INT 1
60253: PPUSH
60254: LD_VAR 0 3
60258: PPUSH
60259: CALL_OW 12
60263: ARRAY
60264: ST_TO_ADDR
// if Crawls ( un ) then
60265: LD_VAR 0 2
60269: PPUSH
60270: CALL_OW 318
60274: IFFALSE 60285
// ComWalk ( un ) ;
60276: LD_VAR 0 2
60280: PPUSH
60281: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60285: LD_VAR 0 2
60289: PPUSH
60290: LD_INT 8
60292: PPUSH
60293: CALL_OW 336
// end ;
60297: PPOPN 3
60299: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
60300: LD_EXP 29
60304: PUSH
60305: LD_EXP 73
60309: AND
60310: IFFALSE 60454
60312: GO 60314
60314: DISABLE
60315: LD_INT 0
60317: PPUSH
60318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
60319: LD_ADDR_VAR 0 2
60323: PUSH
60324: LD_INT 22
60326: PUSH
60327: LD_OWVAR 2
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 21
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 2
60348: PUSH
60349: LD_INT 34
60351: PUSH
60352: LD_INT 12
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 34
60361: PUSH
60362: LD_INT 51
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 34
60371: PUSH
60372: LD_INT 32
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: LIST
60389: PPUSH
60390: CALL_OW 69
60394: ST_TO_ADDR
// if not tmp then
60395: LD_VAR 0 2
60399: NOT
60400: IFFALSE 60404
// exit ;
60402: GO 60454
// for i in tmp do
60404: LD_ADDR_VAR 0 1
60408: PUSH
60409: LD_VAR 0 2
60413: PUSH
60414: FOR_IN
60415: IFFALSE 60452
// if GetCargo ( i , mat_artifact ) = 0 then
60417: LD_VAR 0 1
60421: PPUSH
60422: LD_INT 4
60424: PPUSH
60425: CALL_OW 289
60429: PUSH
60430: LD_INT 0
60432: EQUAL
60433: IFFALSE 60450
// SetCargo ( i , mat_siberit , 100 ) ;
60435: LD_VAR 0 1
60439: PPUSH
60440: LD_INT 3
60442: PPUSH
60443: LD_INT 100
60445: PPUSH
60446: CALL_OW 290
60450: GO 60414
60452: POP
60453: POP
// end ;
60454: PPOPN 2
60456: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
60457: LD_EXP 29
60461: PUSH
60462: LD_EXP 74
60466: AND
60467: IFFALSE 60650
60469: GO 60471
60471: DISABLE
60472: LD_INT 0
60474: PPUSH
60475: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60476: LD_ADDR_VAR 0 2
60480: PUSH
60481: LD_INT 22
60483: PUSH
60484: LD_OWVAR 2
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PPUSH
60493: CALL_OW 69
60497: ST_TO_ADDR
// if not tmp then
60498: LD_VAR 0 2
60502: NOT
60503: IFFALSE 60507
// exit ;
60505: GO 60650
// for i := 1 to 2 do
60507: LD_ADDR_VAR 0 1
60511: PUSH
60512: DOUBLE
60513: LD_INT 1
60515: DEC
60516: ST_TO_ADDR
60517: LD_INT 2
60519: PUSH
60520: FOR_TO
60521: IFFALSE 60648
// begin uc_side := your_side ;
60523: LD_ADDR_OWVAR 20
60527: PUSH
60528: LD_OWVAR 2
60532: ST_TO_ADDR
// uc_nation := nation_american ;
60533: LD_ADDR_OWVAR 21
60537: PUSH
60538: LD_INT 1
60540: ST_TO_ADDR
// vc_chassis := us_morphling ;
60541: LD_ADDR_OWVAR 37
60545: PUSH
60546: LD_INT 5
60548: ST_TO_ADDR
// vc_engine := engine_siberite ;
60549: LD_ADDR_OWVAR 39
60553: PUSH
60554: LD_INT 3
60556: ST_TO_ADDR
// vc_control := control_computer ;
60557: LD_ADDR_OWVAR 38
60561: PUSH
60562: LD_INT 3
60564: ST_TO_ADDR
// vc_weapon := us_double_laser ;
60565: LD_ADDR_OWVAR 40
60569: PUSH
60570: LD_INT 10
60572: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
60573: LD_VAR 0 2
60577: PUSH
60578: LD_INT 1
60580: ARRAY
60581: PPUSH
60582: CALL_OW 310
60586: NOT
60587: IFFALSE 60634
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
60589: CALL_OW 45
60593: PPUSH
60594: LD_VAR 0 2
60598: PUSH
60599: LD_INT 1
60601: ARRAY
60602: PPUSH
60603: CALL_OW 250
60607: PPUSH
60608: LD_VAR 0 2
60612: PUSH
60613: LD_INT 1
60615: ARRAY
60616: PPUSH
60617: CALL_OW 251
60621: PPUSH
60622: LD_INT 12
60624: PPUSH
60625: LD_INT 1
60627: PPUSH
60628: CALL_OW 50
60632: GO 60646
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
60634: CALL_OW 45
60638: PPUSH
60639: LD_INT 1
60641: PPUSH
60642: CALL_OW 51
// end ;
60646: GO 60520
60648: POP
60649: POP
// end ;
60650: PPOPN 2
60652: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
60653: LD_EXP 29
60657: PUSH
60658: LD_EXP 75
60662: AND
60663: IFFALSE 60885
60665: GO 60667
60667: DISABLE
60668: LD_INT 0
60670: PPUSH
60671: PPUSH
60672: PPUSH
60673: PPUSH
60674: PPUSH
60675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60676: LD_ADDR_VAR 0 6
60680: PUSH
60681: LD_INT 22
60683: PUSH
60684: LD_OWVAR 2
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 21
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 3
60705: PUSH
60706: LD_INT 23
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: LIST
60724: PPUSH
60725: CALL_OW 69
60729: ST_TO_ADDR
// if not tmp then
60730: LD_VAR 0 6
60734: NOT
60735: IFFALSE 60739
// exit ;
60737: GO 60885
// s1 := rand ( 1 , 4 ) ;
60739: LD_ADDR_VAR 0 2
60743: PUSH
60744: LD_INT 1
60746: PPUSH
60747: LD_INT 4
60749: PPUSH
60750: CALL_OW 12
60754: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
60755: LD_ADDR_VAR 0 4
60759: PUSH
60760: LD_VAR 0 6
60764: PUSH
60765: LD_INT 1
60767: ARRAY
60768: PPUSH
60769: LD_VAR 0 2
60773: PPUSH
60774: CALL_OW 259
60778: ST_TO_ADDR
// if s1 = 1 then
60779: LD_VAR 0 2
60783: PUSH
60784: LD_INT 1
60786: EQUAL
60787: IFFALSE 60807
// s2 := rand ( 2 , 4 ) else
60789: LD_ADDR_VAR 0 3
60793: PUSH
60794: LD_INT 2
60796: PPUSH
60797: LD_INT 4
60799: PPUSH
60800: CALL_OW 12
60804: ST_TO_ADDR
60805: GO 60815
// s2 := 1 ;
60807: LD_ADDR_VAR 0 3
60811: PUSH
60812: LD_INT 1
60814: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
60815: LD_ADDR_VAR 0 5
60819: PUSH
60820: LD_VAR 0 6
60824: PUSH
60825: LD_INT 1
60827: ARRAY
60828: PPUSH
60829: LD_VAR 0 3
60833: PPUSH
60834: CALL_OW 259
60838: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
60839: LD_VAR 0 6
60843: PUSH
60844: LD_INT 1
60846: ARRAY
60847: PPUSH
60848: LD_VAR 0 2
60852: PPUSH
60853: LD_VAR 0 5
60857: PPUSH
60858: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
60862: LD_VAR 0 6
60866: PUSH
60867: LD_INT 1
60869: ARRAY
60870: PPUSH
60871: LD_VAR 0 3
60875: PPUSH
60876: LD_VAR 0 4
60880: PPUSH
60881: CALL_OW 237
// end ;
60885: PPOPN 6
60887: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
60888: LD_EXP 29
60892: PUSH
60893: LD_EXP 76
60897: AND
60898: IFFALSE 60977
60900: GO 60902
60902: DISABLE
60903: LD_INT 0
60905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
60906: LD_ADDR_VAR 0 1
60910: PUSH
60911: LD_INT 22
60913: PUSH
60914: LD_OWVAR 2
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 30
60925: PUSH
60926: LD_INT 3
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PPUSH
60937: CALL_OW 69
60941: ST_TO_ADDR
// if not tmp then
60942: LD_VAR 0 1
60946: NOT
60947: IFFALSE 60951
// exit ;
60949: GO 60977
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60951: LD_VAR 0 1
60955: PUSH
60956: LD_INT 1
60958: PPUSH
60959: LD_VAR 0 1
60963: PPUSH
60964: CALL_OW 12
60968: ARRAY
60969: PPUSH
60970: LD_INT 1
60972: PPUSH
60973: CALL_OW 234
// end ;
60977: PPOPN 1
60979: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
60980: LD_EXP 29
60984: PUSH
60985: LD_EXP 77
60989: AND
60990: IFFALSE 61102
60992: GO 60994
60994: DISABLE
60995: LD_INT 0
60997: PPUSH
60998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
60999: LD_ADDR_VAR 0 2
61003: PUSH
61004: LD_INT 22
61006: PUSH
61007: LD_OWVAR 2
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 2
61018: PUSH
61019: LD_INT 30
61021: PUSH
61022: LD_INT 27
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 30
61031: PUSH
61032: LD_INT 26
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 30
61041: PUSH
61042: LD_INT 28
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PPUSH
61059: CALL_OW 69
61063: ST_TO_ADDR
// if not tmp then
61064: LD_VAR 0 2
61068: NOT
61069: IFFALSE 61073
// exit ;
61071: GO 61102
// for i in tmp do
61073: LD_ADDR_VAR 0 1
61077: PUSH
61078: LD_VAR 0 2
61082: PUSH
61083: FOR_IN
61084: IFFALSE 61100
// SetLives ( i , 1 ) ;
61086: LD_VAR 0 1
61090: PPUSH
61091: LD_INT 1
61093: PPUSH
61094: CALL_OW 234
61098: GO 61083
61100: POP
61101: POP
// end ;
61102: PPOPN 2
61104: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
61105: LD_EXP 29
61109: PUSH
61110: LD_EXP 78
61114: AND
61115: IFFALSE 61402
61117: GO 61119
61119: DISABLE
61120: LD_INT 0
61122: PPUSH
61123: PPUSH
61124: PPUSH
// begin i := rand ( 1 , 7 ) ;
61125: LD_ADDR_VAR 0 1
61129: PUSH
61130: LD_INT 1
61132: PPUSH
61133: LD_INT 7
61135: PPUSH
61136: CALL_OW 12
61140: ST_TO_ADDR
// case i of 1 :
61141: LD_VAR 0 1
61145: PUSH
61146: LD_INT 1
61148: DOUBLE
61149: EQUAL
61150: IFTRUE 61154
61152: GO 61164
61154: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
61155: LD_STRING earthquake(getX(game), 0, 32)
61157: PPUSH
61158: CALL_OW 559
61162: GO 61402
61164: LD_INT 2
61166: DOUBLE
61167: EQUAL
61168: IFTRUE 61172
61170: GO 61186
61172: POP
// begin ToLua ( displayStucuk(); ) ;
61173: LD_STRING displayStucuk();
61175: PPUSH
61176: CALL_OW 559
// ResetFog ;
61180: CALL_OW 335
// end ; 3 :
61184: GO 61402
61186: LD_INT 3
61188: DOUBLE
61189: EQUAL
61190: IFTRUE 61194
61192: GO 61298
61194: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61195: LD_ADDR_VAR 0 2
61199: PUSH
61200: LD_INT 22
61202: PUSH
61203: LD_OWVAR 2
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 25
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PPUSH
61226: CALL_OW 69
61230: ST_TO_ADDR
// if not tmp then
61231: LD_VAR 0 2
61235: NOT
61236: IFFALSE 61240
// exit ;
61238: GO 61402
// un := tmp [ rand ( 1 , tmp ) ] ;
61240: LD_ADDR_VAR 0 3
61244: PUSH
61245: LD_VAR 0 2
61249: PUSH
61250: LD_INT 1
61252: PPUSH
61253: LD_VAR 0 2
61257: PPUSH
61258: CALL_OW 12
61262: ARRAY
61263: ST_TO_ADDR
// if Crawls ( un ) then
61264: LD_VAR 0 3
61268: PPUSH
61269: CALL_OW 318
61273: IFFALSE 61284
// ComWalk ( un ) ;
61275: LD_VAR 0 3
61279: PPUSH
61280: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61284: LD_VAR 0 3
61288: PPUSH
61289: LD_INT 8
61291: PPUSH
61292: CALL_OW 336
// end ; 4 :
61296: GO 61402
61298: LD_INT 4
61300: DOUBLE
61301: EQUAL
61302: IFTRUE 61306
61304: GO 61380
61306: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61307: LD_ADDR_VAR 0 2
61311: PUSH
61312: LD_INT 22
61314: PUSH
61315: LD_OWVAR 2
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 30
61326: PUSH
61327: LD_INT 29
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PPUSH
61338: CALL_OW 69
61342: ST_TO_ADDR
// if not tmp then
61343: LD_VAR 0 2
61347: NOT
61348: IFFALSE 61352
// exit ;
61350: GO 61402
// CenterNowOnUnits ( tmp [ 1 ] ) ;
61352: LD_VAR 0 2
61356: PUSH
61357: LD_INT 1
61359: ARRAY
61360: PPUSH
61361: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
61365: LD_VAR 0 2
61369: PUSH
61370: LD_INT 1
61372: ARRAY
61373: PPUSH
61374: CALL_OW 65
// end ; 5 .. 7 :
61378: GO 61402
61380: LD_INT 5
61382: DOUBLE
61383: GREATEREQUAL
61384: IFFALSE 61392
61386: LD_INT 7
61388: DOUBLE
61389: LESSEQUAL
61390: IFTRUE 61394
61392: GO 61401
61394: POP
// StreamSibBomb ; end ;
61395: CALL 57639 0 0
61399: GO 61402
61401: POP
// end ;
61402: PPOPN 3
61404: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
61405: LD_EXP 29
61409: PUSH
61410: LD_EXP 79
61414: AND
61415: IFFALSE 61571
61417: GO 61419
61419: DISABLE
61420: LD_INT 0
61422: PPUSH
61423: PPUSH
61424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
61425: LD_ADDR_VAR 0 2
61429: PUSH
61430: LD_INT 81
61432: PUSH
61433: LD_OWVAR 2
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 2
61444: PUSH
61445: LD_INT 21
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 21
61457: PUSH
61458: LD_INT 2
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: LIST
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PPUSH
61474: CALL_OW 69
61478: ST_TO_ADDR
// if not tmp then
61479: LD_VAR 0 2
61483: NOT
61484: IFFALSE 61488
// exit ;
61486: GO 61571
// p := 0 ;
61488: LD_ADDR_VAR 0 3
61492: PUSH
61493: LD_INT 0
61495: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61496: LD_INT 35
61498: PPUSH
61499: CALL_OW 67
// p := p + 1 ;
61503: LD_ADDR_VAR 0 3
61507: PUSH
61508: LD_VAR 0 3
61512: PUSH
61513: LD_INT 1
61515: PLUS
61516: ST_TO_ADDR
// for i in tmp do
61517: LD_ADDR_VAR 0 1
61521: PUSH
61522: LD_VAR 0 2
61526: PUSH
61527: FOR_IN
61528: IFFALSE 61559
// if GetLives ( i ) < 1000 then
61530: LD_VAR 0 1
61534: PPUSH
61535: CALL_OW 256
61539: PUSH
61540: LD_INT 1000
61542: LESS
61543: IFFALSE 61557
// SetLives ( i , 1000 ) ;
61545: LD_VAR 0 1
61549: PPUSH
61550: LD_INT 1000
61552: PPUSH
61553: CALL_OW 234
61557: GO 61527
61559: POP
61560: POP
// until p > 20 ;
61561: LD_VAR 0 3
61565: PUSH
61566: LD_INT 20
61568: GREATER
61569: IFFALSE 61496
// end ;
61571: PPOPN 3
61573: END
// every 0 0$1 trigger StreamModeActive and sTime do
61574: LD_EXP 29
61578: PUSH
61579: LD_EXP 80
61583: AND
61584: IFFALSE 61619
61586: GO 61588
61588: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
61589: LD_INT 28
61591: PPUSH
61592: LD_OWVAR 2
61596: PPUSH
61597: LD_INT 2
61599: PPUSH
61600: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
61604: LD_INT 30
61606: PPUSH
61607: LD_OWVAR 2
61611: PPUSH
61612: LD_INT 2
61614: PPUSH
61615: CALL_OW 322
// end ;
61619: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
61620: LD_EXP 29
61624: PUSH
61625: LD_EXP 81
61629: AND
61630: IFFALSE 61751
61632: GO 61634
61634: DISABLE
61635: LD_INT 0
61637: PPUSH
61638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61639: LD_ADDR_VAR 0 2
61643: PUSH
61644: LD_INT 22
61646: PUSH
61647: LD_OWVAR 2
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 21
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 3
61668: PUSH
61669: LD_INT 23
61671: PUSH
61672: LD_INT 0
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: LIST
61687: PPUSH
61688: CALL_OW 69
61692: ST_TO_ADDR
// if not tmp then
61693: LD_VAR 0 2
61697: NOT
61698: IFFALSE 61702
// exit ;
61700: GO 61751
// for i in tmp do
61702: LD_ADDR_VAR 0 1
61706: PUSH
61707: LD_VAR 0 2
61711: PUSH
61712: FOR_IN
61713: IFFALSE 61749
// begin if Crawls ( i ) then
61715: LD_VAR 0 1
61719: PPUSH
61720: CALL_OW 318
61724: IFFALSE 61735
// ComWalk ( i ) ;
61726: LD_VAR 0 1
61730: PPUSH
61731: CALL_OW 138
// SetClass ( i , 2 ) ;
61735: LD_VAR 0 1
61739: PPUSH
61740: LD_INT 2
61742: PPUSH
61743: CALL_OW 336
// end ;
61747: GO 61712
61749: POP
61750: POP
// end ;
61751: PPOPN 2
61753: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
61754: LD_EXP 29
61758: PUSH
61759: LD_EXP 82
61763: AND
61764: IFFALSE 62052
61766: GO 61768
61768: DISABLE
61769: LD_INT 0
61771: PPUSH
61772: PPUSH
61773: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
61774: LD_OWVAR 2
61778: PPUSH
61779: LD_INT 9
61781: PPUSH
61782: LD_INT 1
61784: PPUSH
61785: LD_INT 1
61787: PPUSH
61788: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
61792: LD_INT 9
61794: PPUSH
61795: LD_OWVAR 2
61799: PPUSH
61800: CALL_OW 343
// uc_side := 9 ;
61804: LD_ADDR_OWVAR 20
61808: PUSH
61809: LD_INT 9
61811: ST_TO_ADDR
// uc_nation := 2 ;
61812: LD_ADDR_OWVAR 21
61816: PUSH
61817: LD_INT 2
61819: ST_TO_ADDR
// hc_name := Dark Warrior ;
61820: LD_ADDR_OWVAR 26
61824: PUSH
61825: LD_STRING Dark Warrior
61827: ST_TO_ADDR
// hc_gallery :=  ;
61828: LD_ADDR_OWVAR 33
61832: PUSH
61833: LD_STRING 
61835: ST_TO_ADDR
// hc_noskilllimit := true ;
61836: LD_ADDR_OWVAR 76
61840: PUSH
61841: LD_INT 1
61843: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
61844: LD_ADDR_OWVAR 31
61848: PUSH
61849: LD_INT 30
61851: PUSH
61852: LD_INT 30
61854: PUSH
61855: LD_INT 30
61857: PUSH
61858: LD_INT 30
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: ST_TO_ADDR
// un := CreateHuman ;
61867: LD_ADDR_VAR 0 3
61871: PUSH
61872: CALL_OW 44
61876: ST_TO_ADDR
// hc_noskilllimit := false ;
61877: LD_ADDR_OWVAR 76
61881: PUSH
61882: LD_INT 0
61884: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61885: LD_VAR 0 3
61889: PPUSH
61890: LD_INT 1
61892: PPUSH
61893: CALL_OW 51
// ToLua ( playRanger() ) ;
61897: LD_STRING playRanger()
61899: PPUSH
61900: CALL_OW 559
// p := 0 ;
61904: LD_ADDR_VAR 0 2
61908: PUSH
61909: LD_INT 0
61911: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61912: LD_INT 35
61914: PPUSH
61915: CALL_OW 67
// p := p + 1 ;
61919: LD_ADDR_VAR 0 2
61923: PUSH
61924: LD_VAR 0 2
61928: PUSH
61929: LD_INT 1
61931: PLUS
61932: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
61933: LD_VAR 0 3
61937: PPUSH
61938: CALL_OW 256
61942: PUSH
61943: LD_INT 1000
61945: LESS
61946: IFFALSE 61960
// SetLives ( un , 1000 ) ;
61948: LD_VAR 0 3
61952: PPUSH
61953: LD_INT 1000
61955: PPUSH
61956: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
61960: LD_VAR 0 3
61964: PPUSH
61965: LD_INT 81
61967: PUSH
61968: LD_OWVAR 2
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 91
61979: PUSH
61980: LD_VAR 0 3
61984: PUSH
61985: LD_INT 30
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: LIST
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PPUSH
61997: CALL_OW 69
62001: PPUSH
62002: LD_VAR 0 3
62006: PPUSH
62007: CALL_OW 74
62011: PPUSH
62012: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
62016: LD_VAR 0 2
62020: PUSH
62021: LD_INT 80
62023: GREATER
62024: PUSH
62025: LD_VAR 0 3
62029: PPUSH
62030: CALL_OW 301
62034: OR
62035: IFFALSE 61912
// if un then
62037: LD_VAR 0 3
62041: IFFALSE 62052
// RemoveUnit ( un ) ;
62043: LD_VAR 0 3
62047: PPUSH
62048: CALL_OW 64
// end ;
62052: PPOPN 3
62054: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
62055: LD_EXP 83
62059: IFFALSE 62175
62061: GO 62063
62063: DISABLE
62064: LD_INT 0
62066: PPUSH
62067: PPUSH
62068: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62069: LD_ADDR_VAR 0 2
62073: PUSH
62074: LD_INT 81
62076: PUSH
62077: LD_OWVAR 2
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 21
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PPUSH
62100: CALL_OW 69
62104: ST_TO_ADDR
// ToLua ( playComputer() ) ;
62105: LD_STRING playComputer()
62107: PPUSH
62108: CALL_OW 559
// if not tmp then
62112: LD_VAR 0 2
62116: NOT
62117: IFFALSE 62121
// exit ;
62119: GO 62175
// for i in tmp do
62121: LD_ADDR_VAR 0 1
62125: PUSH
62126: LD_VAR 0 2
62130: PUSH
62131: FOR_IN
62132: IFFALSE 62173
// for j := 1 to 4 do
62134: LD_ADDR_VAR 0 3
62138: PUSH
62139: DOUBLE
62140: LD_INT 1
62142: DEC
62143: ST_TO_ADDR
62144: LD_INT 4
62146: PUSH
62147: FOR_TO
62148: IFFALSE 62169
// SetSkill ( i , j , 10 ) ;
62150: LD_VAR 0 1
62154: PPUSH
62155: LD_VAR 0 3
62159: PPUSH
62160: LD_INT 10
62162: PPUSH
62163: CALL_OW 237
62167: GO 62147
62169: POP
62170: POP
62171: GO 62131
62173: POP
62174: POP
// end ;
62175: PPOPN 3
62177: END
// every 0 0$1 trigger s30 do var i , tmp ;
62178: LD_EXP 84
62182: IFFALSE 62251
62184: GO 62186
62186: DISABLE
62187: LD_INT 0
62189: PPUSH
62190: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62191: LD_ADDR_VAR 0 2
62195: PUSH
62196: LD_INT 22
62198: PUSH
62199: LD_OWVAR 2
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PPUSH
62208: CALL_OW 69
62212: ST_TO_ADDR
// if not tmp then
62213: LD_VAR 0 2
62217: NOT
62218: IFFALSE 62222
// exit ;
62220: GO 62251
// for i in tmp do
62222: LD_ADDR_VAR 0 1
62226: PUSH
62227: LD_VAR 0 2
62231: PUSH
62232: FOR_IN
62233: IFFALSE 62249
// SetLives ( i , 300 ) ;
62235: LD_VAR 0 1
62239: PPUSH
62240: LD_INT 300
62242: PPUSH
62243: CALL_OW 234
62247: GO 62232
62249: POP
62250: POP
// end ;
62251: PPOPN 2
62253: END
// every 0 0$1 trigger s60 do var i , tmp ;
62254: LD_EXP 85
62258: IFFALSE 62327
62260: GO 62262
62262: DISABLE
62263: LD_INT 0
62265: PPUSH
62266: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62267: LD_ADDR_VAR 0 2
62271: PUSH
62272: LD_INT 22
62274: PUSH
62275: LD_OWVAR 2
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PPUSH
62284: CALL_OW 69
62288: ST_TO_ADDR
// if not tmp then
62289: LD_VAR 0 2
62293: NOT
62294: IFFALSE 62298
// exit ;
62296: GO 62327
// for i in tmp do
62298: LD_ADDR_VAR 0 1
62302: PUSH
62303: LD_VAR 0 2
62307: PUSH
62308: FOR_IN
62309: IFFALSE 62325
// SetLives ( i , 600 ) ;
62311: LD_VAR 0 1
62315: PPUSH
62316: LD_INT 600
62318: PPUSH
62319: CALL_OW 234
62323: GO 62308
62325: POP
62326: POP
// end ;
62327: PPOPN 2
62329: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62330: LD_INT 0
62332: PPUSH
// case cmd of 301 :
62333: LD_VAR 0 1
62337: PUSH
62338: LD_INT 301
62340: DOUBLE
62341: EQUAL
62342: IFTRUE 62346
62344: GO 62378
62346: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
62347: LD_VAR 0 6
62351: PPUSH
62352: LD_VAR 0 7
62356: PPUSH
62357: LD_VAR 0 8
62361: PPUSH
62362: LD_VAR 0 4
62366: PPUSH
62367: LD_VAR 0 5
62371: PPUSH
62372: CALL 63579 0 5
62376: GO 62499
62378: LD_INT 302
62380: DOUBLE
62381: EQUAL
62382: IFTRUE 62386
62384: GO 62423
62386: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
62387: LD_VAR 0 6
62391: PPUSH
62392: LD_VAR 0 7
62396: PPUSH
62397: LD_VAR 0 8
62401: PPUSH
62402: LD_VAR 0 9
62406: PPUSH
62407: LD_VAR 0 4
62411: PPUSH
62412: LD_VAR 0 5
62416: PPUSH
62417: CALL 63670 0 6
62421: GO 62499
62423: LD_INT 303
62425: DOUBLE
62426: EQUAL
62427: IFTRUE 62431
62429: GO 62468
62431: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
62432: LD_VAR 0 6
62436: PPUSH
62437: LD_VAR 0 7
62441: PPUSH
62442: LD_VAR 0 8
62446: PPUSH
62447: LD_VAR 0 9
62451: PPUSH
62452: LD_VAR 0 4
62456: PPUSH
62457: LD_VAR 0 5
62461: PPUSH
62462: CALL 62504 0 6
62466: GO 62499
62468: LD_INT 304
62470: DOUBLE
62471: EQUAL
62472: IFTRUE 62476
62474: GO 62498
62476: POP
// hHackTeleport ( unit , x , y ) ; end ;
62477: LD_VAR 0 2
62481: PPUSH
62482: LD_VAR 0 4
62486: PPUSH
62487: LD_VAR 0 5
62491: PPUSH
62492: CALL 64263 0 3
62496: GO 62499
62498: POP
// end ;
62499: LD_VAR 0 12
62503: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
62504: LD_INT 0
62506: PPUSH
62507: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
62508: LD_VAR 0 1
62512: PUSH
62513: LD_INT 1
62515: LESS
62516: PUSH
62517: LD_VAR 0 1
62521: PUSH
62522: LD_INT 3
62524: GREATER
62525: OR
62526: PUSH
62527: LD_VAR 0 5
62531: PPUSH
62532: LD_VAR 0 6
62536: PPUSH
62537: CALL_OW 428
62541: OR
62542: IFFALSE 62546
// exit ;
62544: GO 63266
// uc_side := your_side ;
62546: LD_ADDR_OWVAR 20
62550: PUSH
62551: LD_OWVAR 2
62555: ST_TO_ADDR
// uc_nation := nation ;
62556: LD_ADDR_OWVAR 21
62560: PUSH
62561: LD_VAR 0 1
62565: ST_TO_ADDR
// bc_level = 1 ;
62566: LD_ADDR_OWVAR 43
62570: PUSH
62571: LD_INT 1
62573: ST_TO_ADDR
// case btype of 1 :
62574: LD_VAR 0 2
62578: PUSH
62579: LD_INT 1
62581: DOUBLE
62582: EQUAL
62583: IFTRUE 62587
62585: GO 62598
62587: POP
// bc_type := b_depot ; 2 :
62588: LD_ADDR_OWVAR 42
62592: PUSH
62593: LD_INT 0
62595: ST_TO_ADDR
62596: GO 63210
62598: LD_INT 2
62600: DOUBLE
62601: EQUAL
62602: IFTRUE 62606
62604: GO 62617
62606: POP
// bc_type := b_warehouse ; 3 :
62607: LD_ADDR_OWVAR 42
62611: PUSH
62612: LD_INT 1
62614: ST_TO_ADDR
62615: GO 63210
62617: LD_INT 3
62619: DOUBLE
62620: EQUAL
62621: IFTRUE 62625
62623: GO 62636
62625: POP
// bc_type := b_lab ; 4 .. 9 :
62626: LD_ADDR_OWVAR 42
62630: PUSH
62631: LD_INT 6
62633: ST_TO_ADDR
62634: GO 63210
62636: LD_INT 4
62638: DOUBLE
62639: GREATEREQUAL
62640: IFFALSE 62648
62642: LD_INT 9
62644: DOUBLE
62645: LESSEQUAL
62646: IFTRUE 62650
62648: GO 62702
62650: POP
// begin bc_type := b_lab_half ;
62651: LD_ADDR_OWVAR 42
62655: PUSH
62656: LD_INT 7
62658: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
62659: LD_ADDR_OWVAR 44
62663: PUSH
62664: LD_INT 10
62666: PUSH
62667: LD_INT 11
62669: PUSH
62670: LD_INT 12
62672: PUSH
62673: LD_INT 15
62675: PUSH
62676: LD_INT 14
62678: PUSH
62679: LD_INT 13
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: PUSH
62690: LD_VAR 0 2
62694: PUSH
62695: LD_INT 3
62697: MINUS
62698: ARRAY
62699: ST_TO_ADDR
// end ; 10 .. 13 :
62700: GO 63210
62702: LD_INT 10
62704: DOUBLE
62705: GREATEREQUAL
62706: IFFALSE 62714
62708: LD_INT 13
62710: DOUBLE
62711: LESSEQUAL
62712: IFTRUE 62716
62714: GO 62793
62716: POP
// begin bc_type := b_lab_full ;
62717: LD_ADDR_OWVAR 42
62721: PUSH
62722: LD_INT 8
62724: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
62725: LD_ADDR_OWVAR 44
62729: PUSH
62730: LD_INT 10
62732: PUSH
62733: LD_INT 12
62735: PUSH
62736: LD_INT 14
62738: PUSH
62739: LD_INT 13
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: PUSH
62748: LD_VAR 0 2
62752: PUSH
62753: LD_INT 9
62755: MINUS
62756: ARRAY
62757: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
62758: LD_ADDR_OWVAR 45
62762: PUSH
62763: LD_INT 11
62765: PUSH
62766: LD_INT 15
62768: PUSH
62769: LD_INT 12
62771: PUSH
62772: LD_INT 15
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: PUSH
62781: LD_VAR 0 2
62785: PUSH
62786: LD_INT 9
62788: MINUS
62789: ARRAY
62790: ST_TO_ADDR
// end ; 14 :
62791: GO 63210
62793: LD_INT 14
62795: DOUBLE
62796: EQUAL
62797: IFTRUE 62801
62799: GO 62812
62801: POP
// bc_type := b_workshop ; 15 :
62802: LD_ADDR_OWVAR 42
62806: PUSH
62807: LD_INT 2
62809: ST_TO_ADDR
62810: GO 63210
62812: LD_INT 15
62814: DOUBLE
62815: EQUAL
62816: IFTRUE 62820
62818: GO 62831
62820: POP
// bc_type := b_factory ; 16 :
62821: LD_ADDR_OWVAR 42
62825: PUSH
62826: LD_INT 3
62828: ST_TO_ADDR
62829: GO 63210
62831: LD_INT 16
62833: DOUBLE
62834: EQUAL
62835: IFTRUE 62839
62837: GO 62850
62839: POP
// bc_type := b_ext_gun ; 17 :
62840: LD_ADDR_OWVAR 42
62844: PUSH
62845: LD_INT 17
62847: ST_TO_ADDR
62848: GO 63210
62850: LD_INT 17
62852: DOUBLE
62853: EQUAL
62854: IFTRUE 62858
62856: GO 62886
62858: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
62859: LD_ADDR_OWVAR 42
62863: PUSH
62864: LD_INT 19
62866: PUSH
62867: LD_INT 23
62869: PUSH
62870: LD_INT 19
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: LIST
62877: PUSH
62878: LD_VAR 0 1
62882: ARRAY
62883: ST_TO_ADDR
62884: GO 63210
62886: LD_INT 18
62888: DOUBLE
62889: EQUAL
62890: IFTRUE 62894
62892: GO 62905
62894: POP
// bc_type := b_ext_radar ; 19 :
62895: LD_ADDR_OWVAR 42
62899: PUSH
62900: LD_INT 20
62902: ST_TO_ADDR
62903: GO 63210
62905: LD_INT 19
62907: DOUBLE
62908: EQUAL
62909: IFTRUE 62913
62911: GO 62924
62913: POP
// bc_type := b_ext_radio ; 20 :
62914: LD_ADDR_OWVAR 42
62918: PUSH
62919: LD_INT 22
62921: ST_TO_ADDR
62922: GO 63210
62924: LD_INT 20
62926: DOUBLE
62927: EQUAL
62928: IFTRUE 62932
62930: GO 62943
62932: POP
// bc_type := b_ext_siberium ; 21 :
62933: LD_ADDR_OWVAR 42
62937: PUSH
62938: LD_INT 21
62940: ST_TO_ADDR
62941: GO 63210
62943: LD_INT 21
62945: DOUBLE
62946: EQUAL
62947: IFTRUE 62951
62949: GO 62962
62951: POP
// bc_type := b_ext_computer ; 22 :
62952: LD_ADDR_OWVAR 42
62956: PUSH
62957: LD_INT 24
62959: ST_TO_ADDR
62960: GO 63210
62962: LD_INT 22
62964: DOUBLE
62965: EQUAL
62966: IFTRUE 62970
62968: GO 62981
62970: POP
// bc_type := b_ext_track ; 23 :
62971: LD_ADDR_OWVAR 42
62975: PUSH
62976: LD_INT 16
62978: ST_TO_ADDR
62979: GO 63210
62981: LD_INT 23
62983: DOUBLE
62984: EQUAL
62985: IFTRUE 62989
62987: GO 63000
62989: POP
// bc_type := b_ext_laser ; 24 :
62990: LD_ADDR_OWVAR 42
62994: PUSH
62995: LD_INT 25
62997: ST_TO_ADDR
62998: GO 63210
63000: LD_INT 24
63002: DOUBLE
63003: EQUAL
63004: IFTRUE 63008
63006: GO 63019
63008: POP
// bc_type := b_control_tower ; 25 :
63009: LD_ADDR_OWVAR 42
63013: PUSH
63014: LD_INT 36
63016: ST_TO_ADDR
63017: GO 63210
63019: LD_INT 25
63021: DOUBLE
63022: EQUAL
63023: IFTRUE 63027
63025: GO 63038
63027: POP
// bc_type := b_breastwork ; 26 :
63028: LD_ADDR_OWVAR 42
63032: PUSH
63033: LD_INT 31
63035: ST_TO_ADDR
63036: GO 63210
63038: LD_INT 26
63040: DOUBLE
63041: EQUAL
63042: IFTRUE 63046
63044: GO 63057
63046: POP
// bc_type := b_bunker ; 27 :
63047: LD_ADDR_OWVAR 42
63051: PUSH
63052: LD_INT 32
63054: ST_TO_ADDR
63055: GO 63210
63057: LD_INT 27
63059: DOUBLE
63060: EQUAL
63061: IFTRUE 63065
63063: GO 63076
63065: POP
// bc_type := b_turret ; 28 :
63066: LD_ADDR_OWVAR 42
63070: PUSH
63071: LD_INT 33
63073: ST_TO_ADDR
63074: GO 63210
63076: LD_INT 28
63078: DOUBLE
63079: EQUAL
63080: IFTRUE 63084
63082: GO 63095
63084: POP
// bc_type := b_armoury ; 29 :
63085: LD_ADDR_OWVAR 42
63089: PUSH
63090: LD_INT 4
63092: ST_TO_ADDR
63093: GO 63210
63095: LD_INT 29
63097: DOUBLE
63098: EQUAL
63099: IFTRUE 63103
63101: GO 63114
63103: POP
// bc_type := b_barracks ; 30 :
63104: LD_ADDR_OWVAR 42
63108: PUSH
63109: LD_INT 5
63111: ST_TO_ADDR
63112: GO 63210
63114: LD_INT 30
63116: DOUBLE
63117: EQUAL
63118: IFTRUE 63122
63120: GO 63133
63122: POP
// bc_type := b_solar_power ; 31 :
63123: LD_ADDR_OWVAR 42
63127: PUSH
63128: LD_INT 27
63130: ST_TO_ADDR
63131: GO 63210
63133: LD_INT 31
63135: DOUBLE
63136: EQUAL
63137: IFTRUE 63141
63139: GO 63152
63141: POP
// bc_type := b_oil_power ; 32 :
63142: LD_ADDR_OWVAR 42
63146: PUSH
63147: LD_INT 26
63149: ST_TO_ADDR
63150: GO 63210
63152: LD_INT 32
63154: DOUBLE
63155: EQUAL
63156: IFTRUE 63160
63158: GO 63171
63160: POP
// bc_type := b_siberite_power ; 33 :
63161: LD_ADDR_OWVAR 42
63165: PUSH
63166: LD_INT 28
63168: ST_TO_ADDR
63169: GO 63210
63171: LD_INT 33
63173: DOUBLE
63174: EQUAL
63175: IFTRUE 63179
63177: GO 63190
63179: POP
// bc_type := b_oil_mine ; 34 :
63180: LD_ADDR_OWVAR 42
63184: PUSH
63185: LD_INT 29
63187: ST_TO_ADDR
63188: GO 63210
63190: LD_INT 34
63192: DOUBLE
63193: EQUAL
63194: IFTRUE 63198
63196: GO 63209
63198: POP
// bc_type := b_siberite_mine ; end ;
63199: LD_ADDR_OWVAR 42
63203: PUSH
63204: LD_INT 30
63206: ST_TO_ADDR
63207: GO 63210
63209: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
63210: LD_ADDR_VAR 0 8
63214: PUSH
63215: LD_VAR 0 5
63219: PPUSH
63220: LD_VAR 0 6
63224: PPUSH
63225: LD_VAR 0 3
63229: PPUSH
63230: CALL_OW 47
63234: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
63235: LD_OWVAR 42
63239: PUSH
63240: LD_INT 32
63242: PUSH
63243: LD_INT 33
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: IN
63250: IFFALSE 63266
// PlaceWeaponTurret ( b , weapon ) ;
63252: LD_VAR 0 8
63256: PPUSH
63257: LD_VAR 0 4
63261: PPUSH
63262: CALL_OW 431
// end ;
63266: LD_VAR 0 7
63270: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
63271: LD_INT 0
63273: PPUSH
63274: PPUSH
63275: PPUSH
63276: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63277: LD_ADDR_VAR 0 4
63281: PUSH
63282: LD_INT 22
63284: PUSH
63285: LD_OWVAR 2
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 2
63296: PUSH
63297: LD_INT 30
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 30
63309: PUSH
63310: LD_INT 1
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: LIST
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PPUSH
63326: CALL_OW 69
63330: ST_TO_ADDR
// if not tmp then
63331: LD_VAR 0 4
63335: NOT
63336: IFFALSE 63340
// exit ;
63338: GO 63399
// for i in tmp do
63340: LD_ADDR_VAR 0 2
63344: PUSH
63345: LD_VAR 0 4
63349: PUSH
63350: FOR_IN
63351: IFFALSE 63397
// for j = 1 to 3 do
63353: LD_ADDR_VAR 0 3
63357: PUSH
63358: DOUBLE
63359: LD_INT 1
63361: DEC
63362: ST_TO_ADDR
63363: LD_INT 3
63365: PUSH
63366: FOR_TO
63367: IFFALSE 63393
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
63369: LD_VAR 0 2
63373: PPUSH
63374: CALL_OW 274
63378: PPUSH
63379: LD_VAR 0 3
63383: PPUSH
63384: LD_INT 99999
63386: PPUSH
63387: CALL_OW 277
63391: GO 63366
63393: POP
63394: POP
63395: GO 63350
63397: POP
63398: POP
// end ;
63399: LD_VAR 0 1
63403: RET
// export function hHackSetLevel10 ; var i , j ; begin
63404: LD_INT 0
63406: PPUSH
63407: PPUSH
63408: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63409: LD_ADDR_VAR 0 2
63413: PUSH
63414: LD_INT 21
63416: PUSH
63417: LD_INT 1
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PPUSH
63424: CALL_OW 69
63428: PUSH
63429: FOR_IN
63430: IFFALSE 63482
// if IsSelected ( i ) then
63432: LD_VAR 0 2
63436: PPUSH
63437: CALL_OW 306
63441: IFFALSE 63480
// begin for j := 1 to 4 do
63443: LD_ADDR_VAR 0 3
63447: PUSH
63448: DOUBLE
63449: LD_INT 1
63451: DEC
63452: ST_TO_ADDR
63453: LD_INT 4
63455: PUSH
63456: FOR_TO
63457: IFFALSE 63478
// SetSkill ( i , j , 10 ) ;
63459: LD_VAR 0 2
63463: PPUSH
63464: LD_VAR 0 3
63468: PPUSH
63469: LD_INT 10
63471: PPUSH
63472: CALL_OW 237
63476: GO 63456
63478: POP
63479: POP
// end ;
63480: GO 63429
63482: POP
63483: POP
// end ;
63484: LD_VAR 0 1
63488: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
63489: LD_INT 0
63491: PPUSH
63492: PPUSH
63493: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
63494: LD_ADDR_VAR 0 2
63498: PUSH
63499: LD_INT 22
63501: PUSH
63502: LD_OWVAR 2
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 21
63513: PUSH
63514: LD_INT 1
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PPUSH
63525: CALL_OW 69
63529: PUSH
63530: FOR_IN
63531: IFFALSE 63572
// begin for j := 1 to 4 do
63533: LD_ADDR_VAR 0 3
63537: PUSH
63538: DOUBLE
63539: LD_INT 1
63541: DEC
63542: ST_TO_ADDR
63543: LD_INT 4
63545: PUSH
63546: FOR_TO
63547: IFFALSE 63568
// SetSkill ( i , j , 10 ) ;
63549: LD_VAR 0 2
63553: PPUSH
63554: LD_VAR 0 3
63558: PPUSH
63559: LD_INT 10
63561: PPUSH
63562: CALL_OW 237
63566: GO 63546
63568: POP
63569: POP
// end ;
63570: GO 63530
63572: POP
63573: POP
// end ;
63574: LD_VAR 0 1
63578: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
63579: LD_INT 0
63581: PPUSH
// uc_side := your_side ;
63582: LD_ADDR_OWVAR 20
63586: PUSH
63587: LD_OWVAR 2
63591: ST_TO_ADDR
// uc_nation := nation ;
63592: LD_ADDR_OWVAR 21
63596: PUSH
63597: LD_VAR 0 1
63601: ST_TO_ADDR
// InitHc ;
63602: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
63606: LD_INT 0
63608: PPUSH
63609: LD_VAR 0 2
63613: PPUSH
63614: LD_VAR 0 3
63618: PPUSH
63619: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
63623: LD_VAR 0 4
63627: PPUSH
63628: LD_VAR 0 5
63632: PPUSH
63633: CALL_OW 428
63637: PUSH
63638: LD_INT 0
63640: EQUAL
63641: IFFALSE 63665
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
63643: CALL_OW 44
63647: PPUSH
63648: LD_VAR 0 4
63652: PPUSH
63653: LD_VAR 0 5
63657: PPUSH
63658: LD_INT 1
63660: PPUSH
63661: CALL_OW 48
// end ;
63665: LD_VAR 0 6
63669: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
63670: LD_INT 0
63672: PPUSH
63673: PPUSH
// uc_side := your_side ;
63674: LD_ADDR_OWVAR 20
63678: PUSH
63679: LD_OWVAR 2
63683: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
63684: LD_VAR 0 1
63688: PUSH
63689: LD_INT 1
63691: PUSH
63692: LD_INT 2
63694: PUSH
63695: LD_INT 3
63697: PUSH
63698: LD_INT 4
63700: PUSH
63701: LD_INT 5
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: IN
63711: IFFALSE 63723
// uc_nation := nation_american else
63713: LD_ADDR_OWVAR 21
63717: PUSH
63718: LD_INT 1
63720: ST_TO_ADDR
63721: GO 63766
// if chassis in [ 11 , 12 , 13 , 14 ] then
63723: LD_VAR 0 1
63727: PUSH
63728: LD_INT 11
63730: PUSH
63731: LD_INT 12
63733: PUSH
63734: LD_INT 13
63736: PUSH
63737: LD_INT 14
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: IN
63746: IFFALSE 63758
// uc_nation := nation_arabian else
63748: LD_ADDR_OWVAR 21
63752: PUSH
63753: LD_INT 2
63755: ST_TO_ADDR
63756: GO 63766
// uc_nation := nation_russian ;
63758: LD_ADDR_OWVAR 21
63762: PUSH
63763: LD_INT 3
63765: ST_TO_ADDR
// vc_chassis := chassis ;
63766: LD_ADDR_OWVAR 37
63770: PUSH
63771: LD_VAR 0 1
63775: ST_TO_ADDR
// vc_engine := engine ;
63776: LD_ADDR_OWVAR 39
63780: PUSH
63781: LD_VAR 0 2
63785: ST_TO_ADDR
// vc_control := control ;
63786: LD_ADDR_OWVAR 38
63790: PUSH
63791: LD_VAR 0 3
63795: ST_TO_ADDR
// vc_weapon := weapon ;
63796: LD_ADDR_OWVAR 40
63800: PUSH
63801: LD_VAR 0 4
63805: ST_TO_ADDR
// un := CreateVehicle ;
63806: LD_ADDR_VAR 0 8
63810: PUSH
63811: CALL_OW 45
63815: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
63816: LD_VAR 0 8
63820: PPUSH
63821: LD_INT 0
63823: PPUSH
63824: LD_INT 5
63826: PPUSH
63827: CALL_OW 12
63831: PPUSH
63832: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
63836: LD_VAR 0 8
63840: PPUSH
63841: LD_VAR 0 5
63845: PPUSH
63846: LD_VAR 0 6
63850: PPUSH
63851: LD_INT 1
63853: PPUSH
63854: CALL_OW 48
// end ;
63858: LD_VAR 0 7
63862: RET
// export hInvincible ; every 1 do
63863: GO 63865
63865: DISABLE
// hInvincible := [ ] ;
63866: LD_ADDR_EXP 86
63870: PUSH
63871: EMPTY
63872: ST_TO_ADDR
63873: END
// every 10 do var i ;
63874: GO 63876
63876: DISABLE
63877: LD_INT 0
63879: PPUSH
// begin enable ;
63880: ENABLE
// if not hInvincible then
63881: LD_EXP 86
63885: NOT
63886: IFFALSE 63890
// exit ;
63888: GO 63934
// for i in hInvincible do
63890: LD_ADDR_VAR 0 1
63894: PUSH
63895: LD_EXP 86
63899: PUSH
63900: FOR_IN
63901: IFFALSE 63932
// if GetLives ( i ) < 1000 then
63903: LD_VAR 0 1
63907: PPUSH
63908: CALL_OW 256
63912: PUSH
63913: LD_INT 1000
63915: LESS
63916: IFFALSE 63930
// SetLives ( i , 1000 ) ;
63918: LD_VAR 0 1
63922: PPUSH
63923: LD_INT 1000
63925: PPUSH
63926: CALL_OW 234
63930: GO 63900
63932: POP
63933: POP
// end ;
63934: PPOPN 1
63936: END
// export function hHackInvincible ; var i ; begin
63937: LD_INT 0
63939: PPUSH
63940: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
63941: LD_ADDR_VAR 0 2
63945: PUSH
63946: LD_INT 2
63948: PUSH
63949: LD_INT 21
63951: PUSH
63952: LD_INT 1
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 21
63961: PUSH
63962: LD_INT 2
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: LIST
63973: PPUSH
63974: CALL_OW 69
63978: PUSH
63979: FOR_IN
63980: IFFALSE 64041
// if IsSelected ( i ) then
63982: LD_VAR 0 2
63986: PPUSH
63987: CALL_OW 306
63991: IFFALSE 64039
// begin if i in hInvincible then
63993: LD_VAR 0 2
63997: PUSH
63998: LD_EXP 86
64002: IN
64003: IFFALSE 64023
// hInvincible := hInvincible diff i else
64005: LD_ADDR_EXP 86
64009: PUSH
64010: LD_EXP 86
64014: PUSH
64015: LD_VAR 0 2
64019: DIFF
64020: ST_TO_ADDR
64021: GO 64039
// hInvincible := hInvincible union i ;
64023: LD_ADDR_EXP 86
64027: PUSH
64028: LD_EXP 86
64032: PUSH
64033: LD_VAR 0 2
64037: UNION
64038: ST_TO_ADDR
// end ;
64039: GO 63979
64041: POP
64042: POP
// end ;
64043: LD_VAR 0 1
64047: RET
// export function hHackInvisible ; var i , j ; begin
64048: LD_INT 0
64050: PPUSH
64051: PPUSH
64052: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64053: LD_ADDR_VAR 0 2
64057: PUSH
64058: LD_INT 21
64060: PUSH
64061: LD_INT 1
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PPUSH
64068: CALL_OW 69
64072: PUSH
64073: FOR_IN
64074: IFFALSE 64098
// if IsSelected ( i ) then
64076: LD_VAR 0 2
64080: PPUSH
64081: CALL_OW 306
64085: IFFALSE 64096
// ComForceInvisible ( i ) ;
64087: LD_VAR 0 2
64091: PPUSH
64092: CALL_OW 496
64096: GO 64073
64098: POP
64099: POP
// end ;
64100: LD_VAR 0 1
64104: RET
// export function hHackChangeYourSide ; begin
64105: LD_INT 0
64107: PPUSH
// if your_side = 8 then
64108: LD_OWVAR 2
64112: PUSH
64113: LD_INT 8
64115: EQUAL
64116: IFFALSE 64128
// your_side := 0 else
64118: LD_ADDR_OWVAR 2
64122: PUSH
64123: LD_INT 0
64125: ST_TO_ADDR
64126: GO 64142
// your_side := your_side + 1 ;
64128: LD_ADDR_OWVAR 2
64132: PUSH
64133: LD_OWVAR 2
64137: PUSH
64138: LD_INT 1
64140: PLUS
64141: ST_TO_ADDR
// end ;
64142: LD_VAR 0 1
64146: RET
// export function hHackChangeUnitSide ; var i , j ; begin
64147: LD_INT 0
64149: PPUSH
64150: PPUSH
64151: PPUSH
// for i in all_units do
64152: LD_ADDR_VAR 0 2
64156: PUSH
64157: LD_OWVAR 3
64161: PUSH
64162: FOR_IN
64163: IFFALSE 64241
// if IsSelected ( i ) then
64165: LD_VAR 0 2
64169: PPUSH
64170: CALL_OW 306
64174: IFFALSE 64239
// begin j := GetSide ( i ) ;
64176: LD_ADDR_VAR 0 3
64180: PUSH
64181: LD_VAR 0 2
64185: PPUSH
64186: CALL_OW 255
64190: ST_TO_ADDR
// if j = 8 then
64191: LD_VAR 0 3
64195: PUSH
64196: LD_INT 8
64198: EQUAL
64199: IFFALSE 64211
// j := 0 else
64201: LD_ADDR_VAR 0 3
64205: PUSH
64206: LD_INT 0
64208: ST_TO_ADDR
64209: GO 64225
// j := j + 1 ;
64211: LD_ADDR_VAR 0 3
64215: PUSH
64216: LD_VAR 0 3
64220: PUSH
64221: LD_INT 1
64223: PLUS
64224: ST_TO_ADDR
// SetSide ( i , j ) ;
64225: LD_VAR 0 2
64229: PPUSH
64230: LD_VAR 0 3
64234: PPUSH
64235: CALL_OW 235
// end ;
64239: GO 64162
64241: POP
64242: POP
// end ;
64243: LD_VAR 0 1
64247: RET
// export function hHackFog ; begin
64248: LD_INT 0
64250: PPUSH
// FogOff ( true ) ;
64251: LD_INT 1
64253: PPUSH
64254: CALL_OW 344
// end ;
64258: LD_VAR 0 1
64262: RET
// export function hHackTeleport ( unit , x , y ) ; begin
64263: LD_INT 0
64265: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
64266: LD_VAR 0 1
64270: PPUSH
64271: LD_VAR 0 2
64275: PPUSH
64276: LD_VAR 0 3
64280: PPUSH
64281: LD_INT 1
64283: PPUSH
64284: LD_INT 1
64286: PPUSH
64287: CALL_OW 483
// CenterOnXY ( x , y ) ;
64291: LD_VAR 0 2
64295: PPUSH
64296: LD_VAR 0 3
64300: PPUSH
64301: CALL_OW 84
// end ;
64305: LD_VAR 0 4
64309: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64310: LD_INT 0
64312: PPUSH
64313: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64314: LD_VAR 0 1
64318: NOT
64319: PUSH
64320: LD_VAR 0 2
64324: PPUSH
64325: LD_VAR 0 3
64329: PPUSH
64330: CALL_OW 488
64334: NOT
64335: OR
64336: PUSH
64337: LD_VAR 0 1
64341: PPUSH
64342: CALL_OW 266
64346: PUSH
64347: LD_INT 3
64349: NONEQUAL
64350: PUSH
64351: LD_VAR 0 1
64355: PPUSH
64356: CALL_OW 247
64360: PUSH
64361: LD_INT 1
64363: EQUAL
64364: NOT
64365: AND
64366: OR
64367: IFFALSE 64371
// exit ;
64369: GO 64520
// if GetType ( factory ) = unit_human then
64371: LD_VAR 0 1
64375: PPUSH
64376: CALL_OW 247
64380: PUSH
64381: LD_INT 1
64383: EQUAL
64384: IFFALSE 64401
// factory := IsInUnit ( factory ) ;
64386: LD_ADDR_VAR 0 1
64390: PUSH
64391: LD_VAR 0 1
64395: PPUSH
64396: CALL_OW 310
64400: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64401: LD_VAR 0 1
64405: PPUSH
64406: CALL_OW 266
64410: PUSH
64411: LD_INT 3
64413: NONEQUAL
64414: IFFALSE 64418
// exit ;
64416: GO 64520
// if HexInfo ( x , y ) = factory then
64418: LD_VAR 0 2
64422: PPUSH
64423: LD_VAR 0 3
64427: PPUSH
64428: CALL_OW 428
64432: PUSH
64433: LD_VAR 0 1
64437: EQUAL
64438: IFFALSE 64465
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
64440: LD_ADDR_EXP 87
64444: PUSH
64445: LD_EXP 87
64449: PPUSH
64450: LD_VAR 0 1
64454: PPUSH
64455: LD_INT 0
64457: PPUSH
64458: CALL_OW 1
64462: ST_TO_ADDR
64463: GO 64516
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
64465: LD_ADDR_EXP 87
64469: PUSH
64470: LD_EXP 87
64474: PPUSH
64475: LD_VAR 0 1
64479: PPUSH
64480: LD_VAR 0 1
64484: PPUSH
64485: CALL_OW 255
64489: PUSH
64490: LD_VAR 0 1
64494: PUSH
64495: LD_VAR 0 2
64499: PUSH
64500: LD_VAR 0 3
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: PPUSH
64511: CALL_OW 1
64515: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64516: CALL 64525 0 0
// end ;
64520: LD_VAR 0 4
64524: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64525: LD_INT 0
64527: PPUSH
64528: PPUSH
64529: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64530: LD_STRING resetFactoryWaypoint();
64532: PPUSH
64533: CALL_OW 559
// if factoryWaypoints then
64537: LD_EXP 87
64541: IFFALSE 64667
// begin list := PrepareArray ( factoryWaypoints ) ;
64543: LD_ADDR_VAR 0 3
64547: PUSH
64548: LD_EXP 87
64552: PPUSH
64553: CALL 49583 0 1
64557: ST_TO_ADDR
// for i := 1 to list do
64558: LD_ADDR_VAR 0 2
64562: PUSH
64563: DOUBLE
64564: LD_INT 1
64566: DEC
64567: ST_TO_ADDR
64568: LD_VAR 0 3
64572: PUSH
64573: FOR_TO
64574: IFFALSE 64665
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64576: LD_STRING setFactoryWaypointXY(
64578: PUSH
64579: LD_VAR 0 3
64583: PUSH
64584: LD_VAR 0 2
64588: ARRAY
64589: PUSH
64590: LD_INT 1
64592: ARRAY
64593: STR
64594: PUSH
64595: LD_STRING ,
64597: STR
64598: PUSH
64599: LD_VAR 0 3
64603: PUSH
64604: LD_VAR 0 2
64608: ARRAY
64609: PUSH
64610: LD_INT 2
64612: ARRAY
64613: STR
64614: PUSH
64615: LD_STRING ,
64617: STR
64618: PUSH
64619: LD_VAR 0 3
64623: PUSH
64624: LD_VAR 0 2
64628: ARRAY
64629: PUSH
64630: LD_INT 3
64632: ARRAY
64633: STR
64634: PUSH
64635: LD_STRING ,
64637: STR
64638: PUSH
64639: LD_VAR 0 3
64643: PUSH
64644: LD_VAR 0 2
64648: ARRAY
64649: PUSH
64650: LD_INT 4
64652: ARRAY
64653: STR
64654: PUSH
64655: LD_STRING )
64657: STR
64658: PPUSH
64659: CALL_OW 559
64663: GO 64573
64665: POP
64666: POP
// end ; end ;
64667: LD_VAR 0 1
64671: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64672: LD_INT 0
64674: PPUSH
// if HexInfo ( x , y ) = warehouse then
64675: LD_VAR 0 2
64679: PPUSH
64680: LD_VAR 0 3
64684: PPUSH
64685: CALL_OW 428
64689: PUSH
64690: LD_VAR 0 1
64694: EQUAL
64695: IFFALSE 64722
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64697: LD_ADDR_EXP 88
64701: PUSH
64702: LD_EXP 88
64706: PPUSH
64707: LD_VAR 0 1
64711: PPUSH
64712: LD_INT 0
64714: PPUSH
64715: CALL_OW 1
64719: ST_TO_ADDR
64720: GO 64773
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64722: LD_ADDR_EXP 88
64726: PUSH
64727: LD_EXP 88
64731: PPUSH
64732: LD_VAR 0 1
64736: PPUSH
64737: LD_VAR 0 1
64741: PPUSH
64742: CALL_OW 255
64746: PUSH
64747: LD_VAR 0 1
64751: PUSH
64752: LD_VAR 0 2
64756: PUSH
64757: LD_VAR 0 3
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: PPUSH
64768: CALL_OW 1
64772: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64773: CALL 64782 0 0
// end ;
64777: LD_VAR 0 4
64781: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64782: LD_INT 0
64784: PPUSH
64785: PPUSH
64786: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64787: LD_STRING resetWarehouseGatheringPoints();
64789: PPUSH
64790: CALL_OW 559
// if warehouseGatheringPoints then
64794: LD_EXP 88
64798: IFFALSE 64924
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64800: LD_ADDR_VAR 0 3
64804: PUSH
64805: LD_EXP 88
64809: PPUSH
64810: CALL 49583 0 1
64814: ST_TO_ADDR
// for i := 1 to list do
64815: LD_ADDR_VAR 0 2
64819: PUSH
64820: DOUBLE
64821: LD_INT 1
64823: DEC
64824: ST_TO_ADDR
64825: LD_VAR 0 3
64829: PUSH
64830: FOR_TO
64831: IFFALSE 64922
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64833: LD_STRING setWarehouseGatheringPointXY(
64835: PUSH
64836: LD_VAR 0 3
64840: PUSH
64841: LD_VAR 0 2
64845: ARRAY
64846: PUSH
64847: LD_INT 1
64849: ARRAY
64850: STR
64851: PUSH
64852: LD_STRING ,
64854: STR
64855: PUSH
64856: LD_VAR 0 3
64860: PUSH
64861: LD_VAR 0 2
64865: ARRAY
64866: PUSH
64867: LD_INT 2
64869: ARRAY
64870: STR
64871: PUSH
64872: LD_STRING ,
64874: STR
64875: PUSH
64876: LD_VAR 0 3
64880: PUSH
64881: LD_VAR 0 2
64885: ARRAY
64886: PUSH
64887: LD_INT 3
64889: ARRAY
64890: STR
64891: PUSH
64892: LD_STRING ,
64894: STR
64895: PUSH
64896: LD_VAR 0 3
64900: PUSH
64901: LD_VAR 0 2
64905: ARRAY
64906: PUSH
64907: LD_INT 4
64909: ARRAY
64910: STR
64911: PUSH
64912: LD_STRING )
64914: STR
64915: PPUSH
64916: CALL_OW 559
64920: GO 64830
64922: POP
64923: POP
// end ; end ;
64924: LD_VAR 0 1
64928: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
64929: LD_EXP 88
64933: IFFALSE 65618
64935: GO 64937
64937: DISABLE
64938: LD_INT 0
64940: PPUSH
64941: PPUSH
64942: PPUSH
64943: PPUSH
64944: PPUSH
64945: PPUSH
64946: PPUSH
64947: PPUSH
64948: PPUSH
// begin enable ;
64949: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
64950: LD_ADDR_VAR 0 3
64954: PUSH
64955: LD_EXP 88
64959: PPUSH
64960: CALL 49583 0 1
64964: ST_TO_ADDR
// if not list then
64965: LD_VAR 0 3
64969: NOT
64970: IFFALSE 64974
// exit ;
64972: GO 65618
// for i := 1 to list do
64974: LD_ADDR_VAR 0 1
64978: PUSH
64979: DOUBLE
64980: LD_INT 1
64982: DEC
64983: ST_TO_ADDR
64984: LD_VAR 0 3
64988: PUSH
64989: FOR_TO
64990: IFFALSE 65616
// begin depot := list [ i ] [ 2 ] ;
64992: LD_ADDR_VAR 0 8
64996: PUSH
64997: LD_VAR 0 3
65001: PUSH
65002: LD_VAR 0 1
65006: ARRAY
65007: PUSH
65008: LD_INT 2
65010: ARRAY
65011: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
65012: LD_ADDR_VAR 0 5
65016: PUSH
65017: LD_VAR 0 3
65021: PUSH
65022: LD_VAR 0 1
65026: ARRAY
65027: PUSH
65028: LD_INT 1
65030: ARRAY
65031: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
65032: LD_VAR 0 8
65036: PPUSH
65037: CALL_OW 301
65041: PUSH
65042: LD_VAR 0 5
65046: PUSH
65047: LD_VAR 0 8
65051: PPUSH
65052: CALL_OW 255
65056: NONEQUAL
65057: OR
65058: IFFALSE 65087
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
65060: LD_ADDR_EXP 88
65064: PUSH
65065: LD_EXP 88
65069: PPUSH
65070: LD_VAR 0 8
65074: PPUSH
65075: LD_INT 0
65077: PPUSH
65078: CALL_OW 1
65082: ST_TO_ADDR
// exit ;
65083: POP
65084: POP
65085: GO 65618
// end ; x := list [ i ] [ 3 ] ;
65087: LD_ADDR_VAR 0 6
65091: PUSH
65092: LD_VAR 0 3
65096: PUSH
65097: LD_VAR 0 1
65101: ARRAY
65102: PUSH
65103: LD_INT 3
65105: ARRAY
65106: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
65107: LD_ADDR_VAR 0 7
65111: PUSH
65112: LD_VAR 0 3
65116: PUSH
65117: LD_VAR 0 1
65121: ARRAY
65122: PUSH
65123: LD_INT 4
65125: ARRAY
65126: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
65127: LD_ADDR_VAR 0 9
65131: PUSH
65132: LD_VAR 0 6
65136: PPUSH
65137: LD_VAR 0 7
65141: PPUSH
65142: LD_INT 16
65144: PPUSH
65145: CALL 48171 0 3
65149: ST_TO_ADDR
// if not cratesNearbyPoint then
65150: LD_VAR 0 9
65154: NOT
65155: IFFALSE 65161
// exit ;
65157: POP
65158: POP
65159: GO 65618
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
65161: LD_ADDR_VAR 0 4
65165: PUSH
65166: LD_INT 22
65168: PUSH
65169: LD_VAR 0 5
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 3
65180: PUSH
65181: LD_INT 60
65183: PUSH
65184: EMPTY
65185: LIST
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 91
65193: PUSH
65194: LD_VAR 0 8
65198: PUSH
65199: LD_INT 6
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 2
65209: PUSH
65210: LD_INT 25
65212: PUSH
65213: LD_INT 2
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 25
65222: PUSH
65223: LD_INT 16
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: LIST
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: PPUSH
65241: CALL_OW 69
65245: PUSH
65246: LD_VAR 0 8
65250: PPUSH
65251: CALL_OW 313
65255: PPUSH
65256: LD_INT 3
65258: PUSH
65259: LD_INT 60
65261: PUSH
65262: EMPTY
65263: LIST
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 2
65271: PUSH
65272: LD_INT 25
65274: PUSH
65275: LD_INT 2
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 25
65284: PUSH
65285: LD_INT 16
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: LIST
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PPUSH
65301: CALL_OW 72
65305: UNION
65306: ST_TO_ADDR
// if tmp then
65307: LD_VAR 0 4
65311: IFFALSE 65391
// begin tmp := ShrinkArray ( tmp , 3 ) ;
65313: LD_ADDR_VAR 0 4
65317: PUSH
65318: LD_VAR 0 4
65322: PPUSH
65323: LD_INT 3
65325: PPUSH
65326: CALL 46140 0 2
65330: ST_TO_ADDR
// for j in tmp do
65331: LD_ADDR_VAR 0 2
65335: PUSH
65336: LD_VAR 0 4
65340: PUSH
65341: FOR_IN
65342: IFFALSE 65385
// begin if IsInUnit ( j ) then
65344: LD_VAR 0 2
65348: PPUSH
65349: CALL_OW 310
65353: IFFALSE 65364
// ComExit ( j ) ;
65355: LD_VAR 0 2
65359: PPUSH
65360: CALL 46223 0 1
// AddComCollect ( j , x , y ) ;
65364: LD_VAR 0 2
65368: PPUSH
65369: LD_VAR 0 6
65373: PPUSH
65374: LD_VAR 0 7
65378: PPUSH
65379: CALL_OW 177
// end ;
65383: GO 65341
65385: POP
65386: POP
// exit ;
65387: POP
65388: POP
65389: GO 65618
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
65391: LD_ADDR_VAR 0 4
65395: PUSH
65396: LD_INT 22
65398: PUSH
65399: LD_VAR 0 5
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 91
65410: PUSH
65411: LD_VAR 0 8
65415: PUSH
65416: LD_INT 8
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 2
65426: PUSH
65427: LD_INT 34
65429: PUSH
65430: LD_INT 12
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 34
65439: PUSH
65440: LD_INT 51
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 34
65449: PUSH
65450: LD_INT 32
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 34
65459: PUSH
65460: LD_INT 89
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: LIST
65478: PPUSH
65479: CALL_OW 69
65483: ST_TO_ADDR
// if tmp then
65484: LD_VAR 0 4
65488: IFFALSE 65614
// begin for j in tmp do
65490: LD_ADDR_VAR 0 2
65494: PUSH
65495: LD_VAR 0 4
65499: PUSH
65500: FOR_IN
65501: IFFALSE 65612
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
65503: LD_VAR 0 2
65507: PPUSH
65508: CALL_OW 262
65512: PUSH
65513: LD_INT 3
65515: EQUAL
65516: PUSH
65517: LD_VAR 0 2
65521: PPUSH
65522: CALL_OW 261
65526: PUSH
65527: LD_INT 20
65529: GREATER
65530: OR
65531: PUSH
65532: LD_VAR 0 2
65536: PPUSH
65537: CALL_OW 314
65541: NOT
65542: AND
65543: PUSH
65544: LD_VAR 0 2
65548: PPUSH
65549: CALL_OW 263
65553: PUSH
65554: LD_INT 1
65556: NONEQUAL
65557: PUSH
65558: LD_VAR 0 2
65562: PPUSH
65563: CALL_OW 311
65567: OR
65568: AND
65569: IFFALSE 65610
// begin ComCollect ( j , x , y ) ;
65571: LD_VAR 0 2
65575: PPUSH
65576: LD_VAR 0 6
65580: PPUSH
65581: LD_VAR 0 7
65585: PPUSH
65586: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
65590: LD_VAR 0 2
65594: PPUSH
65595: LD_VAR 0 8
65599: PPUSH
65600: CALL_OW 172
// exit ;
65604: POP
65605: POP
65606: POP
65607: POP
65608: GO 65618
// end ;
65610: GO 65500
65612: POP
65613: POP
// end ; end ;
65614: GO 64989
65616: POP
65617: POP
// end ; end_of_file
65618: PPOPN 9
65620: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
65621: LD_INT 0
65623: PPUSH
65624: PPUSH
65625: PPUSH
65626: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
65627: LD_VAR 0 1
65631: PPUSH
65632: CALL_OW 264
65636: PUSH
65637: LD_INT 91
65639: EQUAL
65640: IFFALSE 65712
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
65642: LD_INT 68
65644: PPUSH
65645: LD_VAR 0 1
65649: PPUSH
65650: CALL_OW 255
65654: PPUSH
65655: CALL_OW 321
65659: PUSH
65660: LD_INT 2
65662: EQUAL
65663: IFFALSE 65675
// eff := 70 else
65665: LD_ADDR_VAR 0 4
65669: PUSH
65670: LD_INT 70
65672: ST_TO_ADDR
65673: GO 65683
// eff := 30 ;
65675: LD_ADDR_VAR 0 4
65679: PUSH
65680: LD_INT 30
65682: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
65683: LD_VAR 0 1
65687: PPUSH
65688: CALL_OW 250
65692: PPUSH
65693: LD_VAR 0 1
65697: PPUSH
65698: CALL_OW 251
65702: PPUSH
65703: LD_VAR 0 4
65707: PPUSH
65708: CALL_OW 495
// end ; end ;
65712: LD_VAR 0 2
65716: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
65717: LD_INT 0
65719: PPUSH
// end ;
65720: LD_VAR 0 4
65724: RET
// export function SOS_Command ( cmd ) ; begin
65725: LD_INT 0
65727: PPUSH
// end ;
65728: LD_VAR 0 2
65732: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
65733: LD_INT 0
65735: PPUSH
// end ;
65736: LD_VAR 0 6
65740: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
65741: LD_INT 0
65743: PPUSH
65744: PPUSH
// if not vehicle or not factory then
65745: LD_VAR 0 1
65749: NOT
65750: PUSH
65751: LD_VAR 0 2
65755: NOT
65756: OR
65757: IFFALSE 65761
// exit ;
65759: GO 65992
// if factoryWaypoints >= factory then
65761: LD_EXP 87
65765: PUSH
65766: LD_VAR 0 2
65770: GREATEREQUAL
65771: IFFALSE 65992
// if factoryWaypoints [ factory ] then
65773: LD_EXP 87
65777: PUSH
65778: LD_VAR 0 2
65782: ARRAY
65783: IFFALSE 65992
// begin if GetControl ( vehicle ) = control_manual then
65785: LD_VAR 0 1
65789: PPUSH
65790: CALL_OW 263
65794: PUSH
65795: LD_INT 1
65797: EQUAL
65798: IFFALSE 65879
// begin driver := IsDrivenBy ( vehicle ) ;
65800: LD_ADDR_VAR 0 4
65804: PUSH
65805: LD_VAR 0 1
65809: PPUSH
65810: CALL_OW 311
65814: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65815: LD_VAR 0 4
65819: PPUSH
65820: LD_EXP 87
65824: PUSH
65825: LD_VAR 0 2
65829: ARRAY
65830: PUSH
65831: LD_INT 3
65833: ARRAY
65834: PPUSH
65835: LD_EXP 87
65839: PUSH
65840: LD_VAR 0 2
65844: ARRAY
65845: PUSH
65846: LD_INT 4
65848: ARRAY
65849: PPUSH
65850: CALL_OW 171
// AddComExitVehicle ( driver ) ;
65854: LD_VAR 0 4
65858: PPUSH
65859: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
65863: LD_VAR 0 4
65867: PPUSH
65868: LD_VAR 0 2
65872: PPUSH
65873: CALL_OW 180
// end else
65877: GO 65992
// if GetControl ( vehicle ) = control_remote then
65879: LD_VAR 0 1
65883: PPUSH
65884: CALL_OW 263
65888: PUSH
65889: LD_INT 2
65891: EQUAL
65892: IFFALSE 65953
// begin wait ( 0 0$2 ) ;
65894: LD_INT 70
65896: PPUSH
65897: CALL_OW 67
// if Connect ( vehicle ) then
65901: LD_VAR 0 1
65905: PPUSH
65906: CALL 16464 0 1
65910: IFFALSE 65951
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65912: LD_VAR 0 1
65916: PPUSH
65917: LD_EXP 87
65921: PUSH
65922: LD_VAR 0 2
65926: ARRAY
65927: PUSH
65928: LD_INT 3
65930: ARRAY
65931: PPUSH
65932: LD_EXP 87
65936: PUSH
65937: LD_VAR 0 2
65941: ARRAY
65942: PUSH
65943: LD_INT 4
65945: ARRAY
65946: PPUSH
65947: CALL_OW 171
// end else
65951: GO 65992
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65953: LD_VAR 0 1
65957: PPUSH
65958: LD_EXP 87
65962: PUSH
65963: LD_VAR 0 2
65967: ARRAY
65968: PUSH
65969: LD_INT 3
65971: ARRAY
65972: PPUSH
65973: LD_EXP 87
65977: PUSH
65978: LD_VAR 0 2
65982: ARRAY
65983: PUSH
65984: LD_INT 4
65986: ARRAY
65987: PPUSH
65988: CALL_OW 171
// end ; end ;
65992: LD_VAR 0 3
65996: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
65997: LD_INT 0
65999: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
66000: LD_VAR 0 1
66004: PUSH
66005: LD_INT 250
66007: EQUAL
66008: PUSH
66009: LD_VAR 0 2
66013: PPUSH
66014: CALL_OW 264
66018: PUSH
66019: LD_INT 81
66021: EQUAL
66022: AND
66023: IFFALSE 66044
// MinerPlaceMine ( unit , x , y ) ;
66025: LD_VAR 0 2
66029: PPUSH
66030: LD_VAR 0 4
66034: PPUSH
66035: LD_VAR 0 5
66039: PPUSH
66040: CALL 68429 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
66044: LD_VAR 0 1
66048: PUSH
66049: LD_INT 251
66051: EQUAL
66052: PUSH
66053: LD_VAR 0 2
66057: PPUSH
66058: CALL_OW 264
66062: PUSH
66063: LD_INT 81
66065: EQUAL
66066: AND
66067: IFFALSE 66088
// MinerDetonateMine ( unit , x , y ) ;
66069: LD_VAR 0 2
66073: PPUSH
66074: LD_VAR 0 4
66078: PPUSH
66079: LD_VAR 0 5
66083: PPUSH
66084: CALL 68704 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
66088: LD_VAR 0 1
66092: PUSH
66093: LD_INT 252
66095: EQUAL
66096: PUSH
66097: LD_VAR 0 2
66101: PPUSH
66102: CALL_OW 264
66106: PUSH
66107: LD_INT 81
66109: EQUAL
66110: AND
66111: IFFALSE 66132
// MinerCreateMinefield ( unit , x , y ) ;
66113: LD_VAR 0 2
66117: PPUSH
66118: LD_VAR 0 4
66122: PPUSH
66123: LD_VAR 0 5
66127: PPUSH
66128: CALL 69121 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
66132: LD_VAR 0 1
66136: PUSH
66137: LD_INT 253
66139: EQUAL
66140: PUSH
66141: LD_VAR 0 2
66145: PPUSH
66146: CALL_OW 257
66150: PUSH
66151: LD_INT 5
66153: EQUAL
66154: AND
66155: IFFALSE 66176
// ComBinocular ( unit , x , y ) ;
66157: LD_VAR 0 2
66161: PPUSH
66162: LD_VAR 0 4
66166: PPUSH
66167: LD_VAR 0 5
66171: PPUSH
66172: CALL 69490 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
66176: LD_VAR 0 1
66180: PUSH
66181: LD_INT 254
66183: EQUAL
66184: PUSH
66185: LD_VAR 0 2
66189: PPUSH
66190: CALL_OW 264
66194: PUSH
66195: LD_INT 99
66197: EQUAL
66198: AND
66199: PUSH
66200: LD_VAR 0 3
66204: PPUSH
66205: CALL_OW 263
66209: PUSH
66210: LD_INT 3
66212: EQUAL
66213: AND
66214: IFFALSE 66230
// HackDestroyVehicle ( unit , selectedUnit ) ;
66216: LD_VAR 0 2
66220: PPUSH
66221: LD_VAR 0 3
66225: PPUSH
66226: CALL 67793 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
66230: LD_VAR 0 1
66234: PUSH
66235: LD_INT 255
66237: EQUAL
66238: PUSH
66239: LD_VAR 0 2
66243: PPUSH
66244: CALL_OW 264
66248: PUSH
66249: LD_INT 14
66251: PUSH
66252: LD_INT 53
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: IN
66259: AND
66260: PUSH
66261: LD_VAR 0 4
66265: PPUSH
66266: LD_VAR 0 5
66270: PPUSH
66271: CALL_OW 488
66275: AND
66276: IFFALSE 66300
// CutTreeXYR ( unit , x , y , 12 ) ;
66278: LD_VAR 0 2
66282: PPUSH
66283: LD_VAR 0 4
66287: PPUSH
66288: LD_VAR 0 5
66292: PPUSH
66293: LD_INT 12
66295: PPUSH
66296: CALL 66363 0 4
// if cmd = 256 then
66300: LD_VAR 0 1
66304: PUSH
66305: LD_INT 256
66307: EQUAL
66308: IFFALSE 66329
// SetFactoryWaypoint ( unit , x , y ) ;
66310: LD_VAR 0 2
66314: PPUSH
66315: LD_VAR 0 4
66319: PPUSH
66320: LD_VAR 0 5
66324: PPUSH
66325: CALL 64310 0 3
// if cmd = 257 then
66329: LD_VAR 0 1
66333: PUSH
66334: LD_INT 257
66336: EQUAL
66337: IFFALSE 66358
// SetWarehouseGatheringPoint ( unit , x , y ) ;
66339: LD_VAR 0 2
66343: PPUSH
66344: LD_VAR 0 4
66348: PPUSH
66349: LD_VAR 0 5
66353: PPUSH
66354: CALL 64672 0 3
// end ;
66358: LD_VAR 0 6
66362: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
66363: LD_INT 0
66365: PPUSH
66366: PPUSH
66367: PPUSH
66368: PPUSH
66369: PPUSH
66370: PPUSH
66371: PPUSH
66372: PPUSH
66373: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
66374: LD_VAR 0 1
66378: NOT
66379: PUSH
66380: LD_VAR 0 2
66384: PPUSH
66385: LD_VAR 0 3
66389: PPUSH
66390: CALL_OW 488
66394: NOT
66395: OR
66396: PUSH
66397: LD_VAR 0 4
66401: NOT
66402: OR
66403: IFFALSE 66407
// exit ;
66405: GO 66747
// list := [ ] ;
66407: LD_ADDR_VAR 0 13
66411: PUSH
66412: EMPTY
66413: ST_TO_ADDR
// if x - r < 0 then
66414: LD_VAR 0 2
66418: PUSH
66419: LD_VAR 0 4
66423: MINUS
66424: PUSH
66425: LD_INT 0
66427: LESS
66428: IFFALSE 66440
// min_x := 0 else
66430: LD_ADDR_VAR 0 7
66434: PUSH
66435: LD_INT 0
66437: ST_TO_ADDR
66438: GO 66456
// min_x := x - r ;
66440: LD_ADDR_VAR 0 7
66444: PUSH
66445: LD_VAR 0 2
66449: PUSH
66450: LD_VAR 0 4
66454: MINUS
66455: ST_TO_ADDR
// if y - r < 0 then
66456: LD_VAR 0 3
66460: PUSH
66461: LD_VAR 0 4
66465: MINUS
66466: PUSH
66467: LD_INT 0
66469: LESS
66470: IFFALSE 66482
// min_y := 0 else
66472: LD_ADDR_VAR 0 8
66476: PUSH
66477: LD_INT 0
66479: ST_TO_ADDR
66480: GO 66498
// min_y := y - r ;
66482: LD_ADDR_VAR 0 8
66486: PUSH
66487: LD_VAR 0 3
66491: PUSH
66492: LD_VAR 0 4
66496: MINUS
66497: ST_TO_ADDR
// max_x := x + r ;
66498: LD_ADDR_VAR 0 9
66502: PUSH
66503: LD_VAR 0 2
66507: PUSH
66508: LD_VAR 0 4
66512: PLUS
66513: ST_TO_ADDR
// max_y := y + r ;
66514: LD_ADDR_VAR 0 10
66518: PUSH
66519: LD_VAR 0 3
66523: PUSH
66524: LD_VAR 0 4
66528: PLUS
66529: ST_TO_ADDR
// for _x = min_x to max_x do
66530: LD_ADDR_VAR 0 11
66534: PUSH
66535: DOUBLE
66536: LD_VAR 0 7
66540: DEC
66541: ST_TO_ADDR
66542: LD_VAR 0 9
66546: PUSH
66547: FOR_TO
66548: IFFALSE 66665
// for _y = min_y to max_y do
66550: LD_ADDR_VAR 0 12
66554: PUSH
66555: DOUBLE
66556: LD_VAR 0 8
66560: DEC
66561: ST_TO_ADDR
66562: LD_VAR 0 10
66566: PUSH
66567: FOR_TO
66568: IFFALSE 66661
// begin if not ValidHex ( _x , _y ) then
66570: LD_VAR 0 11
66574: PPUSH
66575: LD_VAR 0 12
66579: PPUSH
66580: CALL_OW 488
66584: NOT
66585: IFFALSE 66589
// continue ;
66587: GO 66567
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
66589: LD_VAR 0 11
66593: PPUSH
66594: LD_VAR 0 12
66598: PPUSH
66599: CALL_OW 351
66603: PUSH
66604: LD_VAR 0 11
66608: PPUSH
66609: LD_VAR 0 12
66613: PPUSH
66614: CALL_OW 554
66618: AND
66619: IFFALSE 66659
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
66621: LD_ADDR_VAR 0 13
66625: PUSH
66626: LD_VAR 0 13
66630: PPUSH
66631: LD_VAR 0 13
66635: PUSH
66636: LD_INT 1
66638: PLUS
66639: PPUSH
66640: LD_VAR 0 11
66644: PUSH
66645: LD_VAR 0 12
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PPUSH
66654: CALL_OW 2
66658: ST_TO_ADDR
// end ;
66659: GO 66567
66661: POP
66662: POP
66663: GO 66547
66665: POP
66666: POP
// if not list then
66667: LD_VAR 0 13
66671: NOT
66672: IFFALSE 66676
// exit ;
66674: GO 66747
// for i in list do
66676: LD_ADDR_VAR 0 6
66680: PUSH
66681: LD_VAR 0 13
66685: PUSH
66686: FOR_IN
66687: IFFALSE 66745
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
66689: LD_VAR 0 1
66693: PPUSH
66694: LD_STRING M
66696: PUSH
66697: LD_VAR 0 6
66701: PUSH
66702: LD_INT 1
66704: ARRAY
66705: PUSH
66706: LD_VAR 0 6
66710: PUSH
66711: LD_INT 2
66713: ARRAY
66714: PUSH
66715: LD_INT 0
66717: PUSH
66718: LD_INT 0
66720: PUSH
66721: LD_INT 0
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: PUSH
66736: EMPTY
66737: LIST
66738: PPUSH
66739: CALL_OW 447
66743: GO 66686
66745: POP
66746: POP
// end ;
66747: LD_VAR 0 5
66751: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
66752: LD_EXP 90
66756: NOT
66757: IFFALSE 66807
66759: GO 66761
66761: DISABLE
// begin initHack := true ;
66762: LD_ADDR_EXP 90
66766: PUSH
66767: LD_INT 1
66769: ST_TO_ADDR
// hackTanks := [ ] ;
66770: LD_ADDR_EXP 91
66774: PUSH
66775: EMPTY
66776: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
66777: LD_ADDR_EXP 92
66781: PUSH
66782: EMPTY
66783: ST_TO_ADDR
// hackLimit := 3 ;
66784: LD_ADDR_EXP 93
66788: PUSH
66789: LD_INT 3
66791: ST_TO_ADDR
// hackDist := 12 ;
66792: LD_ADDR_EXP 94
66796: PUSH
66797: LD_INT 12
66799: ST_TO_ADDR
// hackCounter := [ ] ;
66800: LD_ADDR_EXP 95
66804: PUSH
66805: EMPTY
66806: ST_TO_ADDR
// end ;
66807: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
66808: LD_EXP 90
66812: PUSH
66813: LD_INT 34
66815: PUSH
66816: LD_INT 99
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PPUSH
66823: CALL_OW 69
66827: AND
66828: IFFALSE 67081
66830: GO 66832
66832: DISABLE
66833: LD_INT 0
66835: PPUSH
66836: PPUSH
// begin enable ;
66837: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
66838: LD_ADDR_VAR 0 1
66842: PUSH
66843: LD_INT 34
66845: PUSH
66846: LD_INT 99
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PPUSH
66853: CALL_OW 69
66857: PUSH
66858: FOR_IN
66859: IFFALSE 67079
// begin if not i in hackTanks then
66861: LD_VAR 0 1
66865: PUSH
66866: LD_EXP 91
66870: IN
66871: NOT
66872: IFFALSE 66955
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
66874: LD_ADDR_EXP 91
66878: PUSH
66879: LD_EXP 91
66883: PPUSH
66884: LD_EXP 91
66888: PUSH
66889: LD_INT 1
66891: PLUS
66892: PPUSH
66893: LD_VAR 0 1
66897: PPUSH
66898: CALL_OW 1
66902: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
66903: LD_ADDR_EXP 92
66907: PUSH
66908: LD_EXP 92
66912: PPUSH
66913: LD_EXP 92
66917: PUSH
66918: LD_INT 1
66920: PLUS
66921: PPUSH
66922: EMPTY
66923: PPUSH
66924: CALL_OW 1
66928: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
66929: LD_ADDR_EXP 95
66933: PUSH
66934: LD_EXP 95
66938: PPUSH
66939: LD_EXP 95
66943: PUSH
66944: LD_INT 1
66946: PLUS
66947: PPUSH
66948: EMPTY
66949: PPUSH
66950: CALL_OW 1
66954: ST_TO_ADDR
// end ; if not IsOk ( i ) then
66955: LD_VAR 0 1
66959: PPUSH
66960: CALL_OW 302
66964: NOT
66965: IFFALSE 66978
// begin HackUnlinkAll ( i ) ;
66967: LD_VAR 0 1
66971: PPUSH
66972: CALL 67084 0 1
// continue ;
66976: GO 66858
// end ; HackCheckCapturedStatus ( i ) ;
66978: LD_VAR 0 1
66982: PPUSH
66983: CALL 67527 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
66987: LD_ADDR_VAR 0 2
66991: PUSH
66992: LD_INT 81
66994: PUSH
66995: LD_VAR 0 1
66999: PPUSH
67000: CALL_OW 255
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 33
67011: PUSH
67012: LD_INT 3
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 91
67021: PUSH
67022: LD_VAR 0 1
67026: PUSH
67027: LD_EXP 94
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 50
67039: PUSH
67040: EMPTY
67041: LIST
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: PPUSH
67049: CALL_OW 69
67053: ST_TO_ADDR
// if not tmp then
67054: LD_VAR 0 2
67058: NOT
67059: IFFALSE 67063
// continue ;
67061: GO 66858
// HackLink ( i , tmp ) ;
67063: LD_VAR 0 1
67067: PPUSH
67068: LD_VAR 0 2
67072: PPUSH
67073: CALL 67220 0 2
// end ;
67077: GO 66858
67079: POP
67080: POP
// end ;
67081: PPOPN 2
67083: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
67084: LD_INT 0
67086: PPUSH
67087: PPUSH
67088: PPUSH
// if not hack in hackTanks then
67089: LD_VAR 0 1
67093: PUSH
67094: LD_EXP 91
67098: IN
67099: NOT
67100: IFFALSE 67104
// exit ;
67102: GO 67215
// index := GetElementIndex ( hackTanks , hack ) ;
67104: LD_ADDR_VAR 0 4
67108: PUSH
67109: LD_EXP 91
67113: PPUSH
67114: LD_VAR 0 1
67118: PPUSH
67119: CALL 13280 0 2
67123: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
67124: LD_EXP 92
67128: PUSH
67129: LD_VAR 0 4
67133: ARRAY
67134: IFFALSE 67215
// begin for i in hackTanksCaptured [ index ] do
67136: LD_ADDR_VAR 0 3
67140: PUSH
67141: LD_EXP 92
67145: PUSH
67146: LD_VAR 0 4
67150: ARRAY
67151: PUSH
67152: FOR_IN
67153: IFFALSE 67179
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
67155: LD_VAR 0 3
67159: PUSH
67160: LD_INT 1
67162: ARRAY
67163: PPUSH
67164: LD_VAR 0 3
67168: PUSH
67169: LD_INT 2
67171: ARRAY
67172: PPUSH
67173: CALL_OW 235
67177: GO 67152
67179: POP
67180: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
67181: LD_ADDR_EXP 92
67185: PUSH
67186: LD_EXP 92
67190: PPUSH
67191: LD_VAR 0 4
67195: PPUSH
67196: EMPTY
67197: PPUSH
67198: CALL_OW 1
67202: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
67203: LD_VAR 0 1
67207: PPUSH
67208: LD_INT 0
67210: PPUSH
67211: CALL_OW 505
// end ; end ;
67215: LD_VAR 0 2
67219: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
67220: LD_INT 0
67222: PPUSH
67223: PPUSH
67224: PPUSH
// if not hack in hackTanks or not vehicles then
67225: LD_VAR 0 1
67229: PUSH
67230: LD_EXP 91
67234: IN
67235: NOT
67236: PUSH
67237: LD_VAR 0 2
67241: NOT
67242: OR
67243: IFFALSE 67247
// exit ;
67245: GO 67522
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
67247: LD_ADDR_VAR 0 2
67251: PUSH
67252: LD_VAR 0 1
67256: PPUSH
67257: LD_VAR 0 2
67261: PPUSH
67262: LD_INT 1
67264: PPUSH
67265: LD_INT 1
67267: PPUSH
67268: CALL 13930 0 4
67272: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
67273: LD_ADDR_VAR 0 5
67277: PUSH
67278: LD_EXP 91
67282: PPUSH
67283: LD_VAR 0 1
67287: PPUSH
67288: CALL 13280 0 2
67292: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
67293: LD_EXP 92
67297: PUSH
67298: LD_VAR 0 5
67302: ARRAY
67303: PUSH
67304: LD_EXP 93
67308: LESS
67309: IFFALSE 67498
// begin for i := 1 to vehicles do
67311: LD_ADDR_VAR 0 4
67315: PUSH
67316: DOUBLE
67317: LD_INT 1
67319: DEC
67320: ST_TO_ADDR
67321: LD_VAR 0 2
67325: PUSH
67326: FOR_TO
67327: IFFALSE 67496
// begin if hackTanksCaptured [ index ] = hackLimit then
67329: LD_EXP 92
67333: PUSH
67334: LD_VAR 0 5
67338: ARRAY
67339: PUSH
67340: LD_EXP 93
67344: EQUAL
67345: IFFALSE 67349
// break ;
67347: GO 67496
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
67349: LD_ADDR_EXP 95
67353: PUSH
67354: LD_EXP 95
67358: PPUSH
67359: LD_VAR 0 5
67363: PPUSH
67364: LD_EXP 95
67368: PUSH
67369: LD_VAR 0 5
67373: ARRAY
67374: PUSH
67375: LD_INT 1
67377: PLUS
67378: PPUSH
67379: CALL_OW 1
67383: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
67384: LD_ADDR_EXP 92
67388: PUSH
67389: LD_EXP 92
67393: PPUSH
67394: LD_VAR 0 5
67398: PUSH
67399: LD_EXP 92
67403: PUSH
67404: LD_VAR 0 5
67408: ARRAY
67409: PUSH
67410: LD_INT 1
67412: PLUS
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PPUSH
67418: LD_VAR 0 2
67422: PUSH
67423: LD_VAR 0 4
67427: ARRAY
67428: PUSH
67429: LD_VAR 0 2
67433: PUSH
67434: LD_VAR 0 4
67438: ARRAY
67439: PPUSH
67440: CALL_OW 255
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PPUSH
67449: CALL 13495 0 3
67453: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
67454: LD_VAR 0 2
67458: PUSH
67459: LD_VAR 0 4
67463: ARRAY
67464: PPUSH
67465: LD_VAR 0 1
67469: PPUSH
67470: CALL_OW 255
67474: PPUSH
67475: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
67479: LD_VAR 0 2
67483: PUSH
67484: LD_VAR 0 4
67488: ARRAY
67489: PPUSH
67490: CALL_OW 141
// end ;
67494: GO 67326
67496: POP
67497: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67498: LD_VAR 0 1
67502: PPUSH
67503: LD_EXP 92
67507: PUSH
67508: LD_VAR 0 5
67512: ARRAY
67513: PUSH
67514: LD_INT 0
67516: PLUS
67517: PPUSH
67518: CALL_OW 505
// end ;
67522: LD_VAR 0 3
67526: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
67527: LD_INT 0
67529: PPUSH
67530: PPUSH
67531: PPUSH
67532: PPUSH
// if not hack in hackTanks then
67533: LD_VAR 0 1
67537: PUSH
67538: LD_EXP 91
67542: IN
67543: NOT
67544: IFFALSE 67548
// exit ;
67546: GO 67788
// index := GetElementIndex ( hackTanks , hack ) ;
67548: LD_ADDR_VAR 0 4
67552: PUSH
67553: LD_EXP 91
67557: PPUSH
67558: LD_VAR 0 1
67562: PPUSH
67563: CALL 13280 0 2
67567: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
67568: LD_ADDR_VAR 0 3
67572: PUSH
67573: DOUBLE
67574: LD_EXP 92
67578: PUSH
67579: LD_VAR 0 4
67583: ARRAY
67584: INC
67585: ST_TO_ADDR
67586: LD_INT 1
67588: PUSH
67589: FOR_DOWNTO
67590: IFFALSE 67762
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
67592: LD_ADDR_VAR 0 5
67596: PUSH
67597: LD_EXP 92
67601: PUSH
67602: LD_VAR 0 4
67606: ARRAY
67607: PUSH
67608: LD_VAR 0 3
67612: ARRAY
67613: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
67614: LD_VAR 0 5
67618: PUSH
67619: LD_INT 1
67621: ARRAY
67622: PPUSH
67623: CALL_OW 302
67627: NOT
67628: PUSH
67629: LD_VAR 0 5
67633: PUSH
67634: LD_INT 1
67636: ARRAY
67637: PPUSH
67638: CALL_OW 255
67642: PUSH
67643: LD_VAR 0 1
67647: PPUSH
67648: CALL_OW 255
67652: NONEQUAL
67653: OR
67654: IFFALSE 67760
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
67656: LD_VAR 0 5
67660: PUSH
67661: LD_INT 1
67663: ARRAY
67664: PPUSH
67665: CALL_OW 305
67669: PUSH
67670: LD_VAR 0 5
67674: PUSH
67675: LD_INT 1
67677: ARRAY
67678: PPUSH
67679: CALL_OW 255
67683: PUSH
67684: LD_VAR 0 1
67688: PPUSH
67689: CALL_OW 255
67693: EQUAL
67694: AND
67695: IFFALSE 67719
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
67697: LD_VAR 0 5
67701: PUSH
67702: LD_INT 1
67704: ARRAY
67705: PPUSH
67706: LD_VAR 0 5
67710: PUSH
67711: LD_INT 2
67713: ARRAY
67714: PPUSH
67715: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
67719: LD_ADDR_EXP 92
67723: PUSH
67724: LD_EXP 92
67728: PPUSH
67729: LD_VAR 0 4
67733: PPUSH
67734: LD_EXP 92
67738: PUSH
67739: LD_VAR 0 4
67743: ARRAY
67744: PPUSH
67745: LD_VAR 0 3
67749: PPUSH
67750: CALL_OW 3
67754: PPUSH
67755: CALL_OW 1
67759: ST_TO_ADDR
// end ; end ;
67760: GO 67589
67762: POP
67763: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67764: LD_VAR 0 1
67768: PPUSH
67769: LD_EXP 92
67773: PUSH
67774: LD_VAR 0 4
67778: ARRAY
67779: PUSH
67780: LD_INT 0
67782: PLUS
67783: PPUSH
67784: CALL_OW 505
// end ;
67788: LD_VAR 0 2
67792: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
67793: LD_INT 0
67795: PPUSH
67796: PPUSH
67797: PPUSH
67798: PPUSH
// if not hack in hackTanks then
67799: LD_VAR 0 1
67803: PUSH
67804: LD_EXP 91
67808: IN
67809: NOT
67810: IFFALSE 67814
// exit ;
67812: GO 67899
// index := GetElementIndex ( hackTanks , hack ) ;
67814: LD_ADDR_VAR 0 5
67818: PUSH
67819: LD_EXP 91
67823: PPUSH
67824: LD_VAR 0 1
67828: PPUSH
67829: CALL 13280 0 2
67833: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
67834: LD_ADDR_VAR 0 4
67838: PUSH
67839: DOUBLE
67840: LD_INT 1
67842: DEC
67843: ST_TO_ADDR
67844: LD_EXP 92
67848: PUSH
67849: LD_VAR 0 5
67853: ARRAY
67854: PUSH
67855: FOR_TO
67856: IFFALSE 67897
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
67858: LD_EXP 92
67862: PUSH
67863: LD_VAR 0 5
67867: ARRAY
67868: PUSH
67869: LD_VAR 0 4
67873: ARRAY
67874: PUSH
67875: LD_INT 1
67877: ARRAY
67878: PUSH
67879: LD_VAR 0 2
67883: EQUAL
67884: IFFALSE 67895
// KillUnit ( vehicle ) ;
67886: LD_VAR 0 2
67890: PPUSH
67891: CALL_OW 66
67895: GO 67855
67897: POP
67898: POP
// end ;
67899: LD_VAR 0 3
67903: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
67904: LD_EXP 96
67908: NOT
67909: IFFALSE 67944
67911: GO 67913
67913: DISABLE
// begin initMiner := true ;
67914: LD_ADDR_EXP 96
67918: PUSH
67919: LD_INT 1
67921: ST_TO_ADDR
// minersList := [ ] ;
67922: LD_ADDR_EXP 97
67926: PUSH
67927: EMPTY
67928: ST_TO_ADDR
// minerMinesList := [ ] ;
67929: LD_ADDR_EXP 98
67933: PUSH
67934: EMPTY
67935: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
67936: LD_ADDR_EXP 99
67940: PUSH
67941: LD_INT 5
67943: ST_TO_ADDR
// end ;
67944: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
67945: LD_EXP 96
67949: PUSH
67950: LD_INT 34
67952: PUSH
67953: LD_INT 81
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PPUSH
67960: CALL_OW 69
67964: AND
67965: IFFALSE 68426
67967: GO 67969
67969: DISABLE
67970: LD_INT 0
67972: PPUSH
67973: PPUSH
67974: PPUSH
67975: PPUSH
// begin enable ;
67976: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
67977: LD_ADDR_VAR 0 1
67981: PUSH
67982: LD_INT 34
67984: PUSH
67985: LD_INT 81
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PPUSH
67992: CALL_OW 69
67996: PUSH
67997: FOR_IN
67998: IFFALSE 68070
// begin if not i in minersList then
68000: LD_VAR 0 1
68004: PUSH
68005: LD_EXP 97
68009: IN
68010: NOT
68011: IFFALSE 68068
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
68013: LD_ADDR_EXP 97
68017: PUSH
68018: LD_EXP 97
68022: PPUSH
68023: LD_EXP 97
68027: PUSH
68028: LD_INT 1
68030: PLUS
68031: PPUSH
68032: LD_VAR 0 1
68036: PPUSH
68037: CALL_OW 1
68041: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
68042: LD_ADDR_EXP 98
68046: PUSH
68047: LD_EXP 98
68051: PPUSH
68052: LD_EXP 98
68056: PUSH
68057: LD_INT 1
68059: PLUS
68060: PPUSH
68061: EMPTY
68062: PPUSH
68063: CALL_OW 1
68067: ST_TO_ADDR
// end end ;
68068: GO 67997
68070: POP
68071: POP
// for i := minerMinesList downto 1 do
68072: LD_ADDR_VAR 0 1
68076: PUSH
68077: DOUBLE
68078: LD_EXP 98
68082: INC
68083: ST_TO_ADDR
68084: LD_INT 1
68086: PUSH
68087: FOR_DOWNTO
68088: IFFALSE 68424
// begin if IsLive ( minersList [ i ] ) then
68090: LD_EXP 97
68094: PUSH
68095: LD_VAR 0 1
68099: ARRAY
68100: PPUSH
68101: CALL_OW 300
68105: IFFALSE 68133
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
68107: LD_EXP 97
68111: PUSH
68112: LD_VAR 0 1
68116: ARRAY
68117: PPUSH
68118: LD_EXP 98
68122: PUSH
68123: LD_VAR 0 1
68127: ARRAY
68128: PPUSH
68129: CALL_OW 505
// if not minerMinesList [ i ] then
68133: LD_EXP 98
68137: PUSH
68138: LD_VAR 0 1
68142: ARRAY
68143: NOT
68144: IFFALSE 68148
// continue ;
68146: GO 68087
// for j := minerMinesList [ i ] downto 1 do
68148: LD_ADDR_VAR 0 2
68152: PUSH
68153: DOUBLE
68154: LD_EXP 98
68158: PUSH
68159: LD_VAR 0 1
68163: ARRAY
68164: INC
68165: ST_TO_ADDR
68166: LD_INT 1
68168: PUSH
68169: FOR_DOWNTO
68170: IFFALSE 68420
// begin side := GetSide ( minersList [ i ] ) ;
68172: LD_ADDR_VAR 0 3
68176: PUSH
68177: LD_EXP 97
68181: PUSH
68182: LD_VAR 0 1
68186: ARRAY
68187: PPUSH
68188: CALL_OW 255
68192: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
68193: LD_ADDR_VAR 0 4
68197: PUSH
68198: LD_EXP 98
68202: PUSH
68203: LD_VAR 0 1
68207: ARRAY
68208: PUSH
68209: LD_VAR 0 2
68213: ARRAY
68214: PUSH
68215: LD_INT 1
68217: ARRAY
68218: PPUSH
68219: LD_EXP 98
68223: PUSH
68224: LD_VAR 0 1
68228: ARRAY
68229: PUSH
68230: LD_VAR 0 2
68234: ARRAY
68235: PUSH
68236: LD_INT 2
68238: ARRAY
68239: PPUSH
68240: CALL_OW 428
68244: ST_TO_ADDR
// if not tmp then
68245: LD_VAR 0 4
68249: NOT
68250: IFFALSE 68254
// continue ;
68252: GO 68169
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
68254: LD_VAR 0 4
68258: PUSH
68259: LD_INT 81
68261: PUSH
68262: LD_VAR 0 3
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PPUSH
68271: CALL_OW 69
68275: IN
68276: PUSH
68277: LD_EXP 98
68281: PUSH
68282: LD_VAR 0 1
68286: ARRAY
68287: PUSH
68288: LD_VAR 0 2
68292: ARRAY
68293: PUSH
68294: LD_INT 1
68296: ARRAY
68297: PPUSH
68298: LD_EXP 98
68302: PUSH
68303: LD_VAR 0 1
68307: ARRAY
68308: PUSH
68309: LD_VAR 0 2
68313: ARRAY
68314: PUSH
68315: LD_INT 2
68317: ARRAY
68318: PPUSH
68319: CALL_OW 458
68323: AND
68324: IFFALSE 68418
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
68326: LD_EXP 98
68330: PUSH
68331: LD_VAR 0 1
68335: ARRAY
68336: PUSH
68337: LD_VAR 0 2
68341: ARRAY
68342: PUSH
68343: LD_INT 1
68345: ARRAY
68346: PPUSH
68347: LD_EXP 98
68351: PUSH
68352: LD_VAR 0 1
68356: ARRAY
68357: PUSH
68358: LD_VAR 0 2
68362: ARRAY
68363: PUSH
68364: LD_INT 2
68366: ARRAY
68367: PPUSH
68368: LD_VAR 0 3
68372: PPUSH
68373: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
68377: LD_ADDR_EXP 98
68381: PUSH
68382: LD_EXP 98
68386: PPUSH
68387: LD_VAR 0 1
68391: PPUSH
68392: LD_EXP 98
68396: PUSH
68397: LD_VAR 0 1
68401: ARRAY
68402: PPUSH
68403: LD_VAR 0 2
68407: PPUSH
68408: CALL_OW 3
68412: PPUSH
68413: CALL_OW 1
68417: ST_TO_ADDR
// end ; end ;
68418: GO 68169
68420: POP
68421: POP
// end ;
68422: GO 68087
68424: POP
68425: POP
// end ;
68426: PPOPN 4
68428: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
68429: LD_INT 0
68431: PPUSH
68432: PPUSH
// result := false ;
68433: LD_ADDR_VAR 0 4
68437: PUSH
68438: LD_INT 0
68440: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
68441: LD_VAR 0 1
68445: PPUSH
68446: CALL_OW 264
68450: PUSH
68451: LD_INT 81
68453: EQUAL
68454: NOT
68455: IFFALSE 68459
// exit ;
68457: GO 68699
// index := GetElementIndex ( minersList , unit ) ;
68459: LD_ADDR_VAR 0 5
68463: PUSH
68464: LD_EXP 97
68468: PPUSH
68469: LD_VAR 0 1
68473: PPUSH
68474: CALL 13280 0 2
68478: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
68479: LD_EXP 98
68483: PUSH
68484: LD_VAR 0 5
68488: ARRAY
68489: PUSH
68490: LD_EXP 99
68494: GREATEREQUAL
68495: IFFALSE 68499
// exit ;
68497: GO 68699
// ComMoveXY ( unit , x , y ) ;
68499: LD_VAR 0 1
68503: PPUSH
68504: LD_VAR 0 2
68508: PPUSH
68509: LD_VAR 0 3
68513: PPUSH
68514: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68518: LD_INT 35
68520: PPUSH
68521: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
68525: LD_VAR 0 1
68529: PPUSH
68530: LD_VAR 0 2
68534: PPUSH
68535: LD_VAR 0 3
68539: PPUSH
68540: CALL 44635 0 3
68544: NOT
68545: PUSH
68546: LD_VAR 0 1
68550: PPUSH
68551: CALL_OW 314
68555: AND
68556: IFFALSE 68560
// exit ;
68558: GO 68699
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
68560: LD_VAR 0 2
68564: PPUSH
68565: LD_VAR 0 3
68569: PPUSH
68570: CALL_OW 428
68574: PUSH
68575: LD_VAR 0 1
68579: EQUAL
68580: PUSH
68581: LD_VAR 0 1
68585: PPUSH
68586: CALL_OW 314
68590: NOT
68591: AND
68592: IFFALSE 68518
// PlaySoundXY ( x , y , PlantMine ) ;
68594: LD_VAR 0 2
68598: PPUSH
68599: LD_VAR 0 3
68603: PPUSH
68604: LD_STRING PlantMine
68606: PPUSH
68607: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
68611: LD_VAR 0 2
68615: PPUSH
68616: LD_VAR 0 3
68620: PPUSH
68621: LD_VAR 0 1
68625: PPUSH
68626: CALL_OW 255
68630: PPUSH
68631: LD_INT 0
68633: PPUSH
68634: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
68638: LD_ADDR_EXP 98
68642: PUSH
68643: LD_EXP 98
68647: PPUSH
68648: LD_VAR 0 5
68652: PUSH
68653: LD_EXP 98
68657: PUSH
68658: LD_VAR 0 5
68662: ARRAY
68663: PUSH
68664: LD_INT 1
68666: PLUS
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PPUSH
68672: LD_VAR 0 2
68676: PUSH
68677: LD_VAR 0 3
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PPUSH
68686: CALL 13495 0 3
68690: ST_TO_ADDR
// result := true ;
68691: LD_ADDR_VAR 0 4
68695: PUSH
68696: LD_INT 1
68698: ST_TO_ADDR
// end ;
68699: LD_VAR 0 4
68703: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
68704: LD_INT 0
68706: PPUSH
68707: PPUSH
68708: PPUSH
// if not unit in minersList then
68709: LD_VAR 0 1
68713: PUSH
68714: LD_EXP 97
68718: IN
68719: NOT
68720: IFFALSE 68724
// exit ;
68722: GO 69116
// index := GetElementIndex ( minersList , unit ) ;
68724: LD_ADDR_VAR 0 6
68728: PUSH
68729: LD_EXP 97
68733: PPUSH
68734: LD_VAR 0 1
68738: PPUSH
68739: CALL 13280 0 2
68743: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
68744: LD_ADDR_VAR 0 5
68748: PUSH
68749: DOUBLE
68750: LD_EXP 98
68754: PUSH
68755: LD_VAR 0 6
68759: ARRAY
68760: INC
68761: ST_TO_ADDR
68762: LD_INT 1
68764: PUSH
68765: FOR_DOWNTO
68766: IFFALSE 68927
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
68768: LD_EXP 98
68772: PUSH
68773: LD_VAR 0 6
68777: ARRAY
68778: PUSH
68779: LD_VAR 0 5
68783: ARRAY
68784: PUSH
68785: LD_INT 1
68787: ARRAY
68788: PUSH
68789: LD_VAR 0 2
68793: EQUAL
68794: PUSH
68795: LD_EXP 98
68799: PUSH
68800: LD_VAR 0 6
68804: ARRAY
68805: PUSH
68806: LD_VAR 0 5
68810: ARRAY
68811: PUSH
68812: LD_INT 2
68814: ARRAY
68815: PUSH
68816: LD_VAR 0 3
68820: EQUAL
68821: AND
68822: IFFALSE 68925
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68824: LD_EXP 98
68828: PUSH
68829: LD_VAR 0 6
68833: ARRAY
68834: PUSH
68835: LD_VAR 0 5
68839: ARRAY
68840: PUSH
68841: LD_INT 1
68843: ARRAY
68844: PPUSH
68845: LD_EXP 98
68849: PUSH
68850: LD_VAR 0 6
68854: ARRAY
68855: PUSH
68856: LD_VAR 0 5
68860: ARRAY
68861: PUSH
68862: LD_INT 2
68864: ARRAY
68865: PPUSH
68866: LD_VAR 0 1
68870: PPUSH
68871: CALL_OW 255
68875: PPUSH
68876: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68880: LD_ADDR_EXP 98
68884: PUSH
68885: LD_EXP 98
68889: PPUSH
68890: LD_VAR 0 6
68894: PPUSH
68895: LD_EXP 98
68899: PUSH
68900: LD_VAR 0 6
68904: ARRAY
68905: PPUSH
68906: LD_VAR 0 5
68910: PPUSH
68911: CALL_OW 3
68915: PPUSH
68916: CALL_OW 1
68920: ST_TO_ADDR
// exit ;
68921: POP
68922: POP
68923: GO 69116
// end ; end ;
68925: GO 68765
68927: POP
68928: POP
// for i := minerMinesList [ index ] downto 1 do
68929: LD_ADDR_VAR 0 5
68933: PUSH
68934: DOUBLE
68935: LD_EXP 98
68939: PUSH
68940: LD_VAR 0 6
68944: ARRAY
68945: INC
68946: ST_TO_ADDR
68947: LD_INT 1
68949: PUSH
68950: FOR_DOWNTO
68951: IFFALSE 69114
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
68953: LD_EXP 98
68957: PUSH
68958: LD_VAR 0 6
68962: ARRAY
68963: PUSH
68964: LD_VAR 0 5
68968: ARRAY
68969: PUSH
68970: LD_INT 1
68972: ARRAY
68973: PPUSH
68974: LD_EXP 98
68978: PUSH
68979: LD_VAR 0 6
68983: ARRAY
68984: PUSH
68985: LD_VAR 0 5
68989: ARRAY
68990: PUSH
68991: LD_INT 2
68993: ARRAY
68994: PPUSH
68995: LD_VAR 0 2
68999: PPUSH
69000: LD_VAR 0 3
69004: PPUSH
69005: CALL_OW 298
69009: PUSH
69010: LD_INT 6
69012: LESS
69013: IFFALSE 69112
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69015: LD_EXP 98
69019: PUSH
69020: LD_VAR 0 6
69024: ARRAY
69025: PUSH
69026: LD_VAR 0 5
69030: ARRAY
69031: PUSH
69032: LD_INT 1
69034: ARRAY
69035: PPUSH
69036: LD_EXP 98
69040: PUSH
69041: LD_VAR 0 6
69045: ARRAY
69046: PUSH
69047: LD_VAR 0 5
69051: ARRAY
69052: PUSH
69053: LD_INT 2
69055: ARRAY
69056: PPUSH
69057: LD_VAR 0 1
69061: PPUSH
69062: CALL_OW 255
69066: PPUSH
69067: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69071: LD_ADDR_EXP 98
69075: PUSH
69076: LD_EXP 98
69080: PPUSH
69081: LD_VAR 0 6
69085: PPUSH
69086: LD_EXP 98
69090: PUSH
69091: LD_VAR 0 6
69095: ARRAY
69096: PPUSH
69097: LD_VAR 0 5
69101: PPUSH
69102: CALL_OW 3
69106: PPUSH
69107: CALL_OW 1
69111: ST_TO_ADDR
// end ; end ;
69112: GO 68950
69114: POP
69115: POP
// end ;
69116: LD_VAR 0 4
69120: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
69121: LD_INT 0
69123: PPUSH
69124: PPUSH
69125: PPUSH
69126: PPUSH
69127: PPUSH
69128: PPUSH
69129: PPUSH
69130: PPUSH
69131: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
69132: LD_VAR 0 1
69136: PPUSH
69137: CALL_OW 264
69141: PUSH
69142: LD_INT 81
69144: EQUAL
69145: NOT
69146: PUSH
69147: LD_VAR 0 1
69151: PUSH
69152: LD_EXP 97
69156: IN
69157: NOT
69158: OR
69159: IFFALSE 69163
// exit ;
69161: GO 69485
// index := GetElementIndex ( minersList , unit ) ;
69163: LD_ADDR_VAR 0 6
69167: PUSH
69168: LD_EXP 97
69172: PPUSH
69173: LD_VAR 0 1
69177: PPUSH
69178: CALL 13280 0 2
69182: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
69183: LD_ADDR_VAR 0 8
69187: PUSH
69188: LD_EXP 99
69192: PUSH
69193: LD_EXP 98
69197: PUSH
69198: LD_VAR 0 6
69202: ARRAY
69203: MINUS
69204: ST_TO_ADDR
// if not minesFreeAmount then
69205: LD_VAR 0 8
69209: NOT
69210: IFFALSE 69214
// exit ;
69212: GO 69485
// tmp := [ ] ;
69214: LD_ADDR_VAR 0 7
69218: PUSH
69219: EMPTY
69220: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
69221: LD_ADDR_VAR 0 5
69225: PUSH
69226: DOUBLE
69227: LD_INT 1
69229: DEC
69230: ST_TO_ADDR
69231: LD_VAR 0 8
69235: PUSH
69236: FOR_TO
69237: IFFALSE 69432
// begin _d := rand ( 0 , 5 ) ;
69239: LD_ADDR_VAR 0 11
69243: PUSH
69244: LD_INT 0
69246: PPUSH
69247: LD_INT 5
69249: PPUSH
69250: CALL_OW 12
69254: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
69255: LD_ADDR_VAR 0 12
69259: PUSH
69260: LD_INT 2
69262: PPUSH
69263: LD_INT 6
69265: PPUSH
69266: CALL_OW 12
69270: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
69271: LD_ADDR_VAR 0 9
69275: PUSH
69276: LD_VAR 0 2
69280: PPUSH
69281: LD_VAR 0 11
69285: PPUSH
69286: LD_VAR 0 12
69290: PPUSH
69291: CALL_OW 272
69295: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
69296: LD_ADDR_VAR 0 10
69300: PUSH
69301: LD_VAR 0 3
69305: PPUSH
69306: LD_VAR 0 11
69310: PPUSH
69311: LD_VAR 0 12
69315: PPUSH
69316: CALL_OW 273
69320: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
69321: LD_VAR 0 9
69325: PPUSH
69326: LD_VAR 0 10
69330: PPUSH
69331: CALL_OW 488
69335: PUSH
69336: LD_VAR 0 9
69340: PUSH
69341: LD_VAR 0 10
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_VAR 0 7
69354: IN
69355: NOT
69356: AND
69357: PUSH
69358: LD_VAR 0 9
69362: PPUSH
69363: LD_VAR 0 10
69367: PPUSH
69368: CALL_OW 458
69372: NOT
69373: AND
69374: IFFALSE 69416
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
69376: LD_ADDR_VAR 0 7
69380: PUSH
69381: LD_VAR 0 7
69385: PPUSH
69386: LD_VAR 0 7
69390: PUSH
69391: LD_INT 1
69393: PLUS
69394: PPUSH
69395: LD_VAR 0 9
69399: PUSH
69400: LD_VAR 0 10
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PPUSH
69409: CALL_OW 1
69413: ST_TO_ADDR
69414: GO 69430
// i := i - 1 ;
69416: LD_ADDR_VAR 0 5
69420: PUSH
69421: LD_VAR 0 5
69425: PUSH
69426: LD_INT 1
69428: MINUS
69429: ST_TO_ADDR
// end ;
69430: GO 69236
69432: POP
69433: POP
// for i in tmp do
69434: LD_ADDR_VAR 0 5
69438: PUSH
69439: LD_VAR 0 7
69443: PUSH
69444: FOR_IN
69445: IFFALSE 69483
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
69447: LD_VAR 0 1
69451: PPUSH
69452: LD_VAR 0 5
69456: PUSH
69457: LD_INT 1
69459: ARRAY
69460: PPUSH
69461: LD_VAR 0 5
69465: PUSH
69466: LD_INT 2
69468: ARRAY
69469: PPUSH
69470: CALL 68429 0 3
69474: NOT
69475: IFFALSE 69481
// exit ;
69477: POP
69478: POP
69479: GO 69485
69481: GO 69444
69483: POP
69484: POP
// end ;
69485: LD_VAR 0 4
69489: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
69490: LD_INT 0
69492: PPUSH
69493: PPUSH
69494: PPUSH
69495: PPUSH
69496: PPUSH
69497: PPUSH
69498: PPUSH
// if not GetClass ( unit ) = class_sniper then
69499: LD_VAR 0 1
69503: PPUSH
69504: CALL_OW 257
69508: PUSH
69509: LD_INT 5
69511: EQUAL
69512: NOT
69513: IFFALSE 69517
// exit ;
69515: GO 69905
// dist := 8 ;
69517: LD_ADDR_VAR 0 5
69521: PUSH
69522: LD_INT 8
69524: ST_TO_ADDR
// viewRange := 12 ;
69525: LD_ADDR_VAR 0 7
69529: PUSH
69530: LD_INT 12
69532: ST_TO_ADDR
// side := GetSide ( unit ) ;
69533: LD_ADDR_VAR 0 6
69537: PUSH
69538: LD_VAR 0 1
69542: PPUSH
69543: CALL_OW 255
69547: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
69548: LD_INT 61
69550: PPUSH
69551: LD_VAR 0 6
69555: PPUSH
69556: CALL_OW 321
69560: PUSH
69561: LD_INT 2
69563: EQUAL
69564: IFFALSE 69574
// viewRange := 16 ;
69566: LD_ADDR_VAR 0 7
69570: PUSH
69571: LD_INT 16
69573: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
69574: LD_VAR 0 1
69578: PPUSH
69579: LD_VAR 0 2
69583: PPUSH
69584: LD_VAR 0 3
69588: PPUSH
69589: CALL_OW 297
69593: PUSH
69594: LD_VAR 0 5
69598: GREATER
69599: IFFALSE 69678
// begin ComMoveXY ( unit , x , y ) ;
69601: LD_VAR 0 1
69605: PPUSH
69606: LD_VAR 0 2
69610: PPUSH
69611: LD_VAR 0 3
69615: PPUSH
69616: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69620: LD_INT 35
69622: PPUSH
69623: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
69627: LD_VAR 0 1
69631: PPUSH
69632: LD_VAR 0 2
69636: PPUSH
69637: LD_VAR 0 3
69641: PPUSH
69642: CALL 44635 0 3
69646: NOT
69647: IFFALSE 69651
// exit ;
69649: GO 69905
// until GetDistUnitXY ( unit , x , y ) < dist ;
69651: LD_VAR 0 1
69655: PPUSH
69656: LD_VAR 0 2
69660: PPUSH
69661: LD_VAR 0 3
69665: PPUSH
69666: CALL_OW 297
69670: PUSH
69671: LD_VAR 0 5
69675: LESS
69676: IFFALSE 69620
// end ; ComTurnXY ( unit , x , y ) ;
69678: LD_VAR 0 1
69682: PPUSH
69683: LD_VAR 0 2
69687: PPUSH
69688: LD_VAR 0 3
69692: PPUSH
69693: CALL_OW 118
// wait ( 5 ) ;
69697: LD_INT 5
69699: PPUSH
69700: CALL_OW 67
// _d := GetDir ( unit ) ;
69704: LD_ADDR_VAR 0 10
69708: PUSH
69709: LD_VAR 0 1
69713: PPUSH
69714: CALL_OW 254
69718: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
69719: LD_ADDR_VAR 0 8
69723: PUSH
69724: LD_VAR 0 1
69728: PPUSH
69729: CALL_OW 250
69733: PPUSH
69734: LD_VAR 0 10
69738: PPUSH
69739: LD_VAR 0 5
69743: PPUSH
69744: CALL_OW 272
69748: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
69749: LD_ADDR_VAR 0 9
69753: PUSH
69754: LD_VAR 0 1
69758: PPUSH
69759: CALL_OW 251
69763: PPUSH
69764: LD_VAR 0 10
69768: PPUSH
69769: LD_VAR 0 5
69773: PPUSH
69774: CALL_OW 273
69778: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69779: LD_VAR 0 8
69783: PPUSH
69784: LD_VAR 0 9
69788: PPUSH
69789: CALL_OW 488
69793: NOT
69794: IFFALSE 69798
// exit ;
69796: GO 69905
// ComAnimCustom ( unit , 1 ) ;
69798: LD_VAR 0 1
69802: PPUSH
69803: LD_INT 1
69805: PPUSH
69806: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
69810: LD_VAR 0 8
69814: PPUSH
69815: LD_VAR 0 9
69819: PPUSH
69820: LD_VAR 0 6
69824: PPUSH
69825: LD_VAR 0 7
69829: PPUSH
69830: CALL_OW 330
// repeat wait ( 1 ) ;
69834: LD_INT 1
69836: PPUSH
69837: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
69841: LD_VAR 0 1
69845: PPUSH
69846: CALL_OW 316
69850: PUSH
69851: LD_VAR 0 1
69855: PPUSH
69856: CALL_OW 314
69860: OR
69861: PUSH
69862: LD_VAR 0 1
69866: PPUSH
69867: CALL_OW 302
69871: NOT
69872: OR
69873: PUSH
69874: LD_VAR 0 1
69878: PPUSH
69879: CALL_OW 301
69883: OR
69884: IFFALSE 69834
// RemoveSeeing ( _x , _y , side ) ;
69886: LD_VAR 0 8
69890: PPUSH
69891: LD_VAR 0 9
69895: PPUSH
69896: LD_VAR 0 6
69900: PPUSH
69901: CALL_OW 331
// end ;
69905: LD_VAR 0 4
69909: RET
