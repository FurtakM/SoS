// starting begin Game_Start := false ;
   0: LD_ADDR_EXP 9
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// Randomize ;
   8: CALL_OW 10
// Init ( ) ;
  12: CALL 112 0 0
// InitBot ( ) ;
  16: CALL 3614 0 0
// Game_Start := true ;
  20: LD_ADDR_EXP 9
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// end ;
  28: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , bot_side ] ) = 0 do
  29: LD_EXP 9
  33: PUSH
  34: LD_INT 22
  36: PUSH
  37: LD_EXP 8
  41: PUSH
  42: EMPTY
  43: LIST
  44: LIST
  45: PPUSH
  46: CALL_OW 69
  50: PUSH
  51: LD_INT 0
  53: EQUAL
  54: AND
  55: IFFALSE 64
  57: GO 59
  59: DISABLE
// YouWinInMultiplayer ;
  60: CALL_OW 106
  64: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , your_side ] ) = 0 do
  65: LD_EXP 9
  69: PUSH
  70: LD_INT 22
  72: PUSH
  73: LD_OWVAR 2
  77: PUSH
  78: EMPTY
  79: LIST
  80: LIST
  81: PPUSH
  82: CALL_OW 69
  86: PUSH
  87: LD_INT 0
  89: EQUAL
  90: AND
  91: IFFALSE 111
  93: GO 95
  95: DISABLE
// begin Multiplayer_Loose_Message ;
  96: CALL_OW 521
// Wait ( 0 0$03 ) ;
 100: LD_INT 105
 102: PPUSH
 103: CALL_OW 67
// YouLostInMultiplayer ;
 107: CALL_OW 107
// end ;
 111: END
// export Game_Type , Side_Positions , Side_Teams , Side_Nations , Teams ; export Team_Game , Side_Start , Bot_Side , Game_Start ; export number_of_people , skill_level , crates_spawn , respawning_time_min , respawning_time_max , amount_of_apeman ; export definitions , mines_list , apeman_areas , patrols , attackers , to_produce , veh_counter , queue_codes , rng , target , handicap , attackers_tmp ; export function Init ( ) ; var i , j ; begin
 112: LD_INT 0
 114: PPUSH
 115: PPUSH
 116: PPUSH
// definitions := [ ] ;
 117: LD_ADDR_EXP 16
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// if Multiplayer then
 124: LD_OWVAR 4
 128: IFFALSE 306
// begin Game_Type := mp_game_type ;
 130: LD_ADDR_EXP 1
 134: PUSH
 135: LD_OWVAR 6
 139: ST_TO_ADDR
// Your_Side := mp_player_side ;
 140: LD_ADDR_OWVAR 2
 144: PUSH
 145: LD_OWVAR 7
 149: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
 150: LD_ADDR_EXP 2
 154: PUSH
 155: LD_OWVAR 17
 159: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 160: LD_ADDR_EXP 3
 164: PUSH
 165: LD_OWVAR 15
 169: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 170: LD_ADDR_EXP 4
 174: PUSH
 175: LD_OWVAR 16
 179: ST_TO_ADDR
// Teams := [ [ ] ] ;
 180: LD_ADDR_EXP 5
 184: PUSH
 185: EMPTY
 186: PUSH
 187: EMPTY
 188: LIST
 189: ST_TO_ADDR
// for i in mp_teams do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: LD_OWVAR 12
 199: PUSH
 200: FOR_IN
 201: IFFALSE 244
// if i then
 203: LD_VAR 0 2
 207: IFFALSE 242
// Teams := Replace ( Teams , 1 , Teams [ 1 ] union i ) ;
 209: LD_ADDR_EXP 5
 213: PUSH
 214: LD_EXP 5
 218: PPUSH
 219: LD_INT 1
 221: PPUSH
 222: LD_EXP 5
 226: PUSH
 227: LD_INT 1
 229: ARRAY
 230: PUSH
 231: LD_VAR 0 2
 235: UNION
 236: PPUSH
 237: CALL_OW 1
 241: ST_TO_ADDR
 242: GO 200
 244: POP
 245: POP
// for i = 0 to 6 do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 0
 254: DEC
 255: ST_TO_ADDR
 256: LD_INT 6
 258: PUSH
 259: FOR_TO
 260: IFFALSE 302
// definitions := Insert ( definitions , definitions + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 262: LD_ADDR_EXP 16
 266: PUSH
 267: LD_EXP 16
 271: PPUSH
 272: LD_EXP 16
 276: PUSH
 277: LD_INT 1
 279: PLUS
 280: PPUSH
 281: LD_VAR 0 2
 285: PPUSH
 286: CALL_OW 426
 290: PUSH
 291: LD_INT 1
 293: PLUS
 294: PPUSH
 295: CALL_OW 2
 299: ST_TO_ADDR
 300: GO 259
 302: POP
 303: POP
// end else
 304: GO 461
// begin Game_Type := 1 ;
 306: LD_ADDR_EXP 1
 310: PUSH
 311: LD_INT 1
 313: ST_TO_ADDR
// Your_Side := 2 ;
 314: LD_ADDR_OWVAR 2
 318: PUSH
 319: LD_INT 2
 321: ST_TO_ADDR
// Side_Positions := [ 1 , 0 , 0 , 0 , 2 , 0 , 3 , 0 ] ;
 322: LD_ADDR_EXP 2
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: LD_INT 0
 332: PUSH
 333: LD_INT 0
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 2
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: LD_INT 3
 347: PUSH
 348: LD_INT 0
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: ST_TO_ADDR
// Side_Teams := [ 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 ] ;
 361: LD_ADDR_EXP 3
 365: PUSH
 366: LD_INT 1
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 1
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: LD_INT 1
 386: PUSH
 387: LD_INT 0
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: ST_TO_ADDR
// Side_Nations := [ 3 , 0 , 0 , 0 , 3 , 0 , 3 , 0 ] ;
 400: LD_ADDR_EXP 4
 404: PUSH
 405: LD_INT 3
 407: PUSH
 408: LD_INT 0
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 0
 416: PUSH
 417: LD_INT 3
 419: PUSH
 420: LD_INT 0
 422: PUSH
 423: LD_INT 3
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: ST_TO_ADDR
// Teams := [ [ 1 , 5 , 7 ] ] ;
 439: LD_ADDR_EXP 5
 443: PUSH
 444: LD_INT 1
 446: PUSH
 447: LD_INT 5
 449: PUSH
 450: LD_INT 7
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: ST_TO_ADDR
// end ; Side_Start := [ [ 203 , 174 ] , [ 114 , 171 ] , [ 26 , 44 ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
 461: LD_ADDR_EXP 7
 465: PUSH
 466: LD_INT 203
 468: PUSH
 469: LD_INT 174
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 114
 478: PUSH
 479: LD_INT 171
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: LD_INT 26
 488: PUSH
 489: LD_INT 44
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: PUSH
 496: EMPTY
 497: PUSH
 498: EMPTY
 499: PUSH
 500: EMPTY
 501: PUSH
 502: EMPTY
 503: PUSH
 504: EMPTY
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: ST_TO_ADDR
// Bot_Side := 2 ;
 516: LD_ADDR_EXP 8
 520: PUSH
 521: LD_INT 2
 523: ST_TO_ADDR
// for i = 1 to 8 do
 524: LD_ADDR_VAR 0 2
 528: PUSH
 529: DOUBLE
 530: LD_INT 1
 532: DEC
 533: ST_TO_ADDR
 534: LD_INT 8
 536: PUSH
 537: FOR_TO
 538: IFFALSE 632
// begin if Multiplayer_GetPlayerIsSpec ( i ) or Multiplayer_GetPlayerIsComp ( i ) then
 540: LD_VAR 0 2
 544: PPUSH
 545: CALL_OW 530
 549: PUSH
 550: LD_VAR 0 2
 554: PPUSH
 555: CALL_OW 532
 559: OR
 560: IFFALSE 585
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 562: LD_ADDR_EXP 2
 566: PUSH
 567: LD_EXP 2
 571: PPUSH
 572: LD_VAR 0 2
 576: PPUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 1
 584: ST_TO_ADDR
// end ; if Side_Nations [ i ] and Side_Nations <> 3 then
 585: LD_EXP 4
 589: PUSH
 590: LD_VAR 0 2
 594: ARRAY
 595: PUSH
 596: LD_EXP 4
 600: PUSH
 601: LD_INT 3
 603: NONEQUAL
 604: AND
 605: IFFALSE 630
// Side_Nations := Replace ( Side_Nations , i , 3 ) ;
 607: LD_ADDR_EXP 4
 611: PUSH
 612: LD_EXP 4
 616: PPUSH
 617: LD_VAR 0 2
 621: PPUSH
 622: LD_INT 3
 624: PPUSH
 625: CALL_OW 1
 629: ST_TO_ADDR
// end ;
 630: GO 537
 632: POP
 633: POP
// if bot_side = 2 and Side_Positions [ 2 ] then
 634: LD_EXP 8
 638: PUSH
 639: LD_INT 2
 641: EQUAL
 642: PUSH
 643: LD_EXP 2
 647: PUSH
 648: LD_INT 2
 650: ARRAY
 651: AND
 652: IFFALSE 662
// bot_side := 5 ;
 654: LD_ADDR_EXP 8
 658: PUSH
 659: LD_INT 5
 661: ST_TO_ADDR
// if bot_side = 5 and Side_Positions [ 5 ] then
 662: LD_EXP 8
 666: PUSH
 667: LD_INT 5
 669: EQUAL
 670: PUSH
 671: LD_EXP 2
 675: PUSH
 676: LD_INT 5
 678: ARRAY
 679: AND
 680: IFFALSE 690
// bot_side := 8 ;
 682: LD_ADDR_EXP 8
 686: PUSH
 687: LD_INT 8
 689: ST_TO_ADDR
// Team_Game := true ;
 690: LD_ADDR_EXP 6
 694: PUSH
 695: LD_INT 1
 697: ST_TO_ADDR
// for i = 1 to 8 do
 698: LD_ADDR_VAR 0 2
 702: PUSH
 703: DOUBLE
 704: LD_INT 1
 706: DEC
 707: ST_TO_ADDR
 708: LD_INT 8
 710: PUSH
 711: FOR_TO
 712: IFFALSE 748
// if i <> bot_side then
 714: LD_VAR 0 2
 718: PUSH
 719: LD_EXP 8
 723: NONEQUAL
 724: IFFALSE 746
// SetAttitude ( i , bot_side , att_enemy , true ) ;
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_EXP 8
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: LD_INT 1
 741: PPUSH
 742: CALL_OW 80
 746: GO 711
 748: POP
 749: POP
// for i := 2 to Teams [ 1 ] do
 750: LD_ADDR_VAR 0 2
 754: PUSH
 755: DOUBLE
 756: LD_INT 2
 758: DEC
 759: ST_TO_ADDR
 760: LD_EXP 5
 764: PUSH
 765: LD_INT 1
 767: ARRAY
 768: PUSH
 769: FOR_TO
 770: IFFALSE 844
// begin ChangeSideFog ( Teams [ 1 ] [ i ] , Teams [ 1 ] [ 1 ] ) ;
 772: LD_EXP 5
 776: PUSH
 777: LD_INT 1
 779: ARRAY
 780: PUSH
 781: LD_VAR 0 2
 785: ARRAY
 786: PPUSH
 787: LD_EXP 5
 791: PUSH
 792: LD_INT 1
 794: ARRAY
 795: PUSH
 796: LD_INT 1
 798: ARRAY
 799: PPUSH
 800: CALL_OW 343
// SetAttitude ( Teams [ 1 ] [ i ] , Teams [ 1 ] [ 1 ] , att_friend , true ) ;
 804: LD_EXP 5
 808: PUSH
 809: LD_INT 1
 811: ARRAY
 812: PUSH
 813: LD_VAR 0 2
 817: ARRAY
 818: PPUSH
 819: LD_EXP 5
 823: PUSH
 824: LD_INT 1
 826: ARRAY
 827: PUSH
 828: LD_INT 1
 830: ARRAY
 831: PPUSH
 832: LD_INT 1
 834: PPUSH
 835: LD_INT 1
 837: PPUSH
 838: CALL_OW 80
// end ;
 842: GO 769
 844: POP
 845: POP
// if not Multiplayer then
 846: LD_OWVAR 4
 850: NOT
 851: IFFALSE 888
// definitions := [ 1 , 1 , 1 , 1 , 2 , 3 , 3 ] ;
 853: LD_ADDR_EXP 16
 857: PUSH
 858: LD_INT 1
 860: PUSH
 861: LD_INT 1
 863: PUSH
 864: LD_INT 1
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 2
 872: PUSH
 873: LD_INT 3
 875: PUSH
 876: LD_INT 3
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ definitions [ 1 ] ] ;
 888: LD_ADDR_EXP 10
 892: PUSH
 893: LD_INT 9
 895: PUSH
 896: LD_INT 12
 898: PUSH
 899: LD_INT 15
 901: PUSH
 902: LD_INT 24
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_EXP 16
 915: PUSH
 916: LD_INT 1
 918: ARRAY
 919: ARRAY
 920: ST_TO_ADDR
// skill_level := [ 2 , 4 , 6 , 8 ] [ definitions [ 2 ] ] ;
 921: LD_ADDR_EXP 11
 925: PUSH
 926: LD_INT 2
 928: PUSH
 929: LD_INT 4
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: LD_INT 8
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PUSH
 944: LD_EXP 16
 948: PUSH
 949: LD_INT 2
 951: ARRAY
 952: ARRAY
 953: ST_TO_ADDR
// crates_spawn := [ 0 0$20 , 0 0$15 , 0 0$10 , 0 0$07 ] [ definitions [ 3 ] ] ;
 954: LD_ADDR_EXP 12
 958: PUSH
 959: LD_INT 700
 961: PUSH
 962: LD_INT 525
 964: PUSH
 965: LD_INT 350
 967: PUSH
 968: LD_INT 245
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: PUSH
 977: LD_EXP 16
 981: PUSH
 982: LD_INT 3
 984: ARRAY
 985: ARRAY
 986: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ definitions [ 4 ] ] ;
 987: LD_ADDR_EXP 13
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 10500
 997: PUSH
 998: LD_INT 6300
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: PUSH
1006: LD_EXP 16
1010: PUSH
1011: LD_INT 4
1013: ARRAY
1014: ARRAY
1015: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ definitions [ 4 ] ] ;
1016: LD_ADDR_EXP 14
1020: PUSH
1021: LD_INT 0
1023: PUSH
1024: LD_INT 31500
1026: PUSH
1027: LD_INT 10500
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_EXP 16
1039: PUSH
1040: LD_INT 4
1042: ARRAY
1043: ARRAY
1044: ST_TO_ADDR
// amount_of_apeman := [ 0 , 3 , 5 , 7 ] [ definitions [ 5 ] ] ;
1045: LD_ADDR_EXP 15
1049: PUSH
1050: LD_INT 0
1052: PUSH
1053: LD_INT 3
1055: PUSH
1056: LD_INT 5
1058: PUSH
1059: LD_INT 7
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: PUSH
1068: LD_EXP 16
1072: PUSH
1073: LD_INT 5
1075: ARRAY
1076: ARRAY
1077: ST_TO_ADDR
// difficulty := [ 1 , 2 , 3 ] [ definitions [ 6 ] ] ;
1078: LD_ADDR_OWVAR 67
1082: PUSH
1083: LD_INT 1
1085: PUSH
1086: LD_INT 2
1088: PUSH
1089: LD_INT 3
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: LIST
1096: PUSH
1097: LD_EXP 16
1101: PUSH
1102: LD_INT 6
1104: ARRAY
1105: ARRAY
1106: ST_TO_ADDR
// handicap := [ 0 , 1 , 2 ] [ definitions [ 7 ] ] ;
1107: LD_ADDR_EXP 26
1111: PUSH
1112: LD_INT 0
1114: PUSH
1115: LD_INT 1
1117: PUSH
1118: LD_INT 2
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_EXP 16
1130: PUSH
1131: LD_INT 7
1133: ARRAY
1134: ARRAY
1135: ST_TO_ADDR
// queue_codes := [ 11353 , 12244 , 44444 , 12345 , 43413 , 14152 ] ;
1136: LD_ADDR_EXP 23
1140: PUSH
1141: LD_INT 11353
1143: PUSH
1144: LD_INT 12244
1146: PUSH
1147: LD_INT 44444
1149: PUSH
1150: LD_INT 12345
1152: PUSH
1153: LD_INT 43413
1155: PUSH
1156: LD_INT 14152
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: ST_TO_ADDR
// rng := Rand ( 1 , 6 ) ;
1167: LD_ADDR_EXP 24
1171: PUSH
1172: LD_INT 1
1174: PPUSH
1175: LD_INT 6
1177: PPUSH
1178: CALL_OW 12
1182: ST_TO_ADDR
// if bot_side <> 2 then
1183: LD_EXP 8
1187: PUSH
1188: LD_INT 2
1190: NONEQUAL
1191: IFFALSE 1234
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
1193: LD_ADDR_VAR 0 2
1197: PUSH
1198: LD_INT 22
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: PPUSH
1208: CALL_OW 69
1212: PUSH
1213: FOR_IN
1214: IFFALSE 1232
// SetSide ( i , bot_side ) ;
1216: LD_VAR 0 2
1220: PPUSH
1221: LD_EXP 8
1225: PPUSH
1226: CALL_OW 235
1230: GO 1213
1232: POP
1233: POP
// ResetFog ;
1234: CALL_OW 335
// PreparePeople ( ) ;
1238: CALL 2122 0 0
// apeman_areas := [ ape1 , ape2 , ape3 ] ;
1242: LD_ADDR_EXP 18
1246: PUSH
1247: LD_INT 14
1249: PUSH
1250: LD_INT 15
1252: PUSH
1253: LD_INT 16
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: ST_TO_ADDR
// if amount_of_apeman then
1261: LD_EXP 15
1265: IFFALSE 1315
// for j in apeman_areas do
1267: LD_ADDR_VAR 0 3
1271: PUSH
1272: LD_EXP 18
1276: PUSH
1277: FOR_IN
1278: IFFALSE 1313
// for i = 1 to amount_of_apeman do
1280: LD_ADDR_VAR 0 2
1284: PUSH
1285: DOUBLE
1286: LD_INT 1
1288: DEC
1289: ST_TO_ADDR
1290: LD_EXP 15
1294: PUSH
1295: FOR_TO
1296: IFFALSE 1309
// AddApeman ( j ) ;
1298: LD_VAR 0 3
1302: PPUSH
1303: CALL 3071 0 1
1307: GO 1295
1309: POP
1310: POP
1311: GO 1277
1313: POP
1314: POP
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
1315: LD_INT 22
1317: PUSH
1318: LD_OWVAR 2
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PPUSH
1327: CALL_OW 69
1331: PUSH
1332: LD_INT 1
1334: ARRAY
1335: PPUSH
1336: CALL_OW 87
// disable ( 17 ) ;
1340: LD_INT 17
1342: DISABLE_MARKED
// end ;
1343: LD_VAR 0 1
1347: RET
// every 2 2$40 trigger game_start do
1348: LD_EXP 9
1352: IFFALSE 1408
1354: GO 1356
1356: DISABLE
// begin CreateCratesArea ( tick mod 5 + 1 , kabul_crates , true ) ;
1357: LD_OWVAR 1
1361: PUSH
1362: LD_INT 5
1364: MOD
1365: PUSH
1366: LD_INT 1
1368: PLUS
1369: PPUSH
1370: LD_INT 13
1372: PPUSH
1373: LD_INT 1
1375: PPUSH
1376: CALL_OW 55
// wait ( 0 0$15 ) ;
1380: LD_INT 525
1382: PPUSH
1383: CALL_OW 67
// CreateCratesAnywhere ( tick mod 5 + 1 , true ) ;
1387: LD_OWVAR 1
1391: PUSH
1392: LD_INT 5
1394: MOD
1395: PUSH
1396: LD_INT 1
1398: PLUS
1399: PPUSH
1400: LD_INT 1
1402: PPUSH
1403: CALL_OW 57
// enable ;
1407: ENABLE
// end ;
1408: END
// every 0 0$01 + 0 0$10 trigger game_start do var cr , cr_queue ;
1409: LD_EXP 9
1413: IFFALSE 2119
1415: GO 1417
1417: DISABLE
1418: LD_INT 0
1420: PPUSH
1421: PPUSH
// begin cr := 1 ;
1422: LD_ADDR_VAR 0 1
1426: PUSH
1427: LD_INT 1
1429: ST_TO_ADDR
// cr_queue := [ rand ( 1 , 3 ) , rand ( 2 , 4 ) , rand ( 3 , 5 ) , rand ( 3 , 5 ) , rand ( 2 , 5 ) , rand ( 1 , 5 ) ] ;
1430: LD_ADDR_VAR 0 2
1434: PUSH
1435: LD_INT 1
1437: PPUSH
1438: LD_INT 3
1440: PPUSH
1441: CALL_OW 12
1445: PUSH
1446: LD_INT 2
1448: PPUSH
1449: LD_INT 4
1451: PPUSH
1452: CALL_OW 12
1456: PUSH
1457: LD_INT 3
1459: PPUSH
1460: LD_INT 5
1462: PPUSH
1463: CALL_OW 12
1467: PUSH
1468: LD_INT 3
1470: PPUSH
1471: LD_INT 5
1473: PPUSH
1474: CALL_OW 12
1478: PUSH
1479: LD_INT 2
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL_OW 12
1489: PUSH
1490: LD_INT 1
1492: PPUSH
1493: LD_INT 5
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: ST_TO_ADDR
// while ( true ) do
1509: LD_INT 1
1511: IFFALSE 2119
// begin wait ( crates_spawn ) ;
1513: LD_EXP 12
1517: PPUSH
1518: CALL_OW 67
// crates_spawn := crates_spawn + 0 0$1 ;
1522: LD_ADDR_EXP 12
1526: PUSH
1527: LD_EXP 12
1531: PUSH
1532: LD_INT 35
1534: PLUS
1535: ST_TO_ADDR
// if crates_spawn > 1 1$20 then
1536: LD_EXP 12
1540: PUSH
1541: LD_INT 2800
1543: GREATER
1544: IFFALSE 1554
// crates_spawn := 0 0$20 ;
1546: LD_ADDR_EXP 12
1550: PUSH
1551: LD_INT 700
1553: ST_TO_ADDR
// if cr mod 3 = 0 then
1554: LD_VAR 0 1
1558: PUSH
1559: LD_INT 3
1561: MOD
1562: PUSH
1563: LD_INT 0
1565: EQUAL
1566: IFFALSE 1731
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1568: LD_VAR 0 2
1572: PUSH
1573: LD_VAR 0 1
1577: PUSH
1578: LD_VAR 0 2
1582: MOD
1583: PUSH
1584: LD_INT 1
1586: PLUS
1587: ARRAY
1588: PPUSH
1589: LD_INT 17
1591: PPUSH
1592: LD_INT 1
1594: PPUSH
1595: CALL_OW 55
// wait ( crates_spawn div 3 ) ;
1599: LD_EXP 12
1603: PUSH
1604: LD_INT 3
1606: DIV
1607: PPUSH
1608: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1612: LD_VAR 0 2
1616: PUSH
1617: LD_VAR 0 1
1621: PUSH
1622: LD_VAR 0 2
1626: MOD
1627: PUSH
1628: LD_INT 1
1630: PLUS
1631: ARRAY
1632: PPUSH
1633: LD_INT 18
1635: PPUSH
1636: LD_INT 1
1638: PPUSH
1639: CALL_OW 55
// wait ( crates_spawn div 3 ) ;
1643: LD_EXP 12
1647: PUSH
1648: LD_INT 3
1650: DIV
1651: PPUSH
1652: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1656: LD_VAR 0 2
1660: PUSH
1661: LD_VAR 0 1
1665: PUSH
1666: LD_VAR 0 2
1670: MOD
1671: PUSH
1672: LD_INT 1
1674: PLUS
1675: ARRAY
1676: PPUSH
1677: LD_INT 19
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: CALL_OW 55
// wait ( crates_spawn div 2 ) ;
1687: LD_EXP 12
1691: PUSH
1692: LD_INT 2
1694: DIV
1695: PPUSH
1696: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1700: LD_VAR 0 2
1704: PUSH
1705: LD_VAR 0 1
1709: PUSH
1710: LD_VAR 0 2
1714: MOD
1715: PUSH
1716: LD_INT 1
1718: PLUS
1719: ARRAY
1720: PPUSH
1721: LD_INT 17
1723: PPUSH
1724: LD_INT 1
1726: PPUSH
1727: CALL_OW 55
// end ; if cr mod 3 = 1 then
1731: LD_VAR 0 1
1735: PUSH
1736: LD_INT 3
1738: MOD
1739: PUSH
1740: LD_INT 1
1742: EQUAL
1743: IFFALSE 1908
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1745: LD_VAR 0 2
1749: PUSH
1750: LD_VAR 0 1
1754: PUSH
1755: LD_VAR 0 2
1759: MOD
1760: PUSH
1761: LD_INT 1
1763: PLUS
1764: ARRAY
1765: PPUSH
1766: LD_INT 18
1768: PPUSH
1769: LD_INT 1
1771: PPUSH
1772: CALL_OW 55
// wait ( crates_spawn div 3 ) ;
1776: LD_EXP 12
1780: PUSH
1781: LD_INT 3
1783: DIV
1784: PPUSH
1785: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1789: LD_VAR 0 2
1793: PUSH
1794: LD_VAR 0 1
1798: PUSH
1799: LD_VAR 0 2
1803: MOD
1804: PUSH
1805: LD_INT 1
1807: PLUS
1808: ARRAY
1809: PPUSH
1810: LD_INT 17
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: CALL_OW 55
// wait ( crates_spawn div 3 ) ;
1820: LD_EXP 12
1824: PUSH
1825: LD_INT 3
1827: DIV
1828: PPUSH
1829: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1833: LD_VAR 0 2
1837: PUSH
1838: LD_VAR 0 1
1842: PUSH
1843: LD_VAR 0 2
1847: MOD
1848: PUSH
1849: LD_INT 1
1851: PLUS
1852: ARRAY
1853: PPUSH
1854: LD_INT 19
1856: PPUSH
1857: LD_INT 1
1859: PPUSH
1860: CALL_OW 55
// wait ( crates_spawn div 2 ) ;
1864: LD_EXP 12
1868: PUSH
1869: LD_INT 2
1871: DIV
1872: PPUSH
1873: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1877: LD_VAR 0 2
1881: PUSH
1882: LD_VAR 0 1
1886: PUSH
1887: LD_VAR 0 2
1891: MOD
1892: PUSH
1893: LD_INT 1
1895: PLUS
1896: ARRAY
1897: PPUSH
1898: LD_INT 18
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 55
// end ; if cr mod 3 = 2 then
1908: LD_VAR 0 1
1912: PUSH
1913: LD_INT 3
1915: MOD
1916: PUSH
1917: LD_INT 2
1919: EQUAL
1920: IFFALSE 2085
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1922: LD_VAR 0 2
1926: PUSH
1927: LD_VAR 0 1
1931: PUSH
1932: LD_VAR 0 2
1936: MOD
1937: PUSH
1938: LD_INT 1
1940: PLUS
1941: ARRAY
1942: PPUSH
1943: LD_INT 19
1945: PPUSH
1946: LD_INT 1
1948: PPUSH
1949: CALL_OW 55
// wait ( crates_spawn div 3 ) ;
1953: LD_EXP 12
1957: PUSH
1958: LD_INT 3
1960: DIV
1961: PPUSH
1962: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1966: LD_VAR 0 2
1970: PUSH
1971: LD_VAR 0 1
1975: PUSH
1976: LD_VAR 0 2
1980: MOD
1981: PUSH
1982: LD_INT 1
1984: PLUS
1985: ARRAY
1986: PPUSH
1987: LD_INT 18
1989: PPUSH
1990: LD_INT 1
1992: PPUSH
1993: CALL_OW 55
// wait ( crates_spawn div 3 ) ;
1997: LD_EXP 12
2001: PUSH
2002: LD_INT 3
2004: DIV
2005: PPUSH
2006: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
2010: LD_VAR 0 2
2014: PUSH
2015: LD_VAR 0 1
2019: PUSH
2020: LD_VAR 0 2
2024: MOD
2025: PUSH
2026: LD_INT 1
2028: PLUS
2029: ARRAY
2030: PPUSH
2031: LD_INT 17
2033: PPUSH
2034: LD_INT 1
2036: PPUSH
2037: CALL_OW 55
// wait ( crates_spawn div 2 ) ;
2041: LD_EXP 12
2045: PUSH
2046: LD_INT 2
2048: DIV
2049: PPUSH
2050: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
2054: LD_VAR 0 2
2058: PUSH
2059: LD_VAR 0 1
2063: PUSH
2064: LD_VAR 0 2
2068: MOD
2069: PUSH
2070: LD_INT 1
2072: PLUS
2073: ARRAY
2074: PPUSH
2075: LD_INT 19
2077: PPUSH
2078: LD_INT 1
2080: PPUSH
2081: CALL_OW 55
// end ; cr := cr + 1 ;
2085: LD_ADDR_VAR 0 1
2089: PUSH
2090: LD_VAR 0 1
2094: PUSH
2095: LD_INT 1
2097: PLUS
2098: ST_TO_ADDR
// if cr > 150 then
2099: LD_VAR 0 1
2103: PUSH
2104: LD_INT 150
2106: GREATER
2107: IFFALSE 2117
// cr := 43 ;
2109: LD_ADDR_VAR 0 1
2113: PUSH
2114: LD_INT 43
2116: ST_TO_ADDR
// end ;
2117: GO 1509
// end ; end_of_file
2119: PPOPN 2
2121: END
// export function PreparePeople ( ) ; var i , j , un , to_copy , x , y , c , d ; begin
2122: LD_INT 0
2124: PPUSH
2125: PPUSH
2126: PPUSH
2127: PPUSH
2128: PPUSH
2129: PPUSH
2130: PPUSH
2131: PPUSH
2132: PPUSH
// to_copy := [ ] ;
2133: LD_ADDR_VAR 0 5
2137: PUSH
2138: EMPTY
2139: ST_TO_ADDR
// for i = 1 to 8 do
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: DOUBLE
2146: LD_INT 1
2148: DEC
2149: ST_TO_ADDR
2150: LD_INT 8
2152: PUSH
2153: FOR_TO
2154: IFFALSE 3064
// begin if Side_Positions [ i ] then
2156: LD_EXP 2
2160: PUSH
2161: LD_VAR 0 2
2165: ARRAY
2166: IFFALSE 3062
// begin uc_side := i ;
2168: LD_ADDR_OWVAR 20
2172: PUSH
2173: LD_VAR 0 2
2177: ST_TO_ADDR
// uc_nation := Side_Nations [ i ] ;
2178: LD_ADDR_OWVAR 21
2182: PUSH
2183: LD_EXP 4
2187: PUSH
2188: LD_VAR 0 2
2192: ARRAY
2193: ST_TO_ADDR
// x := Side_Start [ Side_Positions [ i ] ] [ 1 ] ;
2194: LD_ADDR_VAR 0 6
2198: PUSH
2199: LD_EXP 7
2203: PUSH
2204: LD_EXP 2
2208: PUSH
2209: LD_VAR 0 2
2213: ARRAY
2214: ARRAY
2215: PUSH
2216: LD_INT 1
2218: ARRAY
2219: ST_TO_ADDR
// y := Side_Start [ Side_Positions [ i ] ] [ 2 ] ;
2220: LD_ADDR_VAR 0 7
2224: PUSH
2225: LD_EXP 7
2229: PUSH
2230: LD_EXP 2
2234: PUSH
2235: LD_VAR 0 2
2239: ARRAY
2240: ARRAY
2241: PUSH
2242: LD_INT 2
2244: ARRAY
2245: ST_TO_ADDR
// hc_importance := 100 ;
2246: LD_ADDR_OWVAR 32
2250: PUSH
2251: LD_INT 100
2253: ST_TO_ADDR
// if Multiplayer then
2254: LD_OWVAR 4
2258: IFFALSE 2316
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2260: LD_ADDR_OWVAR 26
2264: PUSH
2265: LD_OWVAR 19
2269: PUSH
2270: LD_OWVAR 20
2274: ARRAY
2275: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2276: LD_ADDR_OWVAR 33
2280: PUSH
2281: LD_STRING MULTIAVATARS
2283: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2284: LD_ADDR_OWVAR 34
2288: PUSH
2289: LD_OWVAR 20
2293: PPUSH
2294: CALL_OW 525
2298: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2299: LD_ADDR_OWVAR 27
2303: PUSH
2304: LD_OWVAR 20
2308: PPUSH
2309: CALL_OW 526
2313: ST_TO_ADDR
// end else
2314: GO 2348
// begin hc_name :=  ;
2316: LD_ADDR_OWVAR 26
2320: PUSH
2321: LD_STRING 
2323: ST_TO_ADDR
// hc_gallery :=  ;
2324: LD_ADDR_OWVAR 33
2328: PUSH
2329: LD_STRING 
2331: ST_TO_ADDR
// hc_sex := Rand ( 1 , 2 ) ;
2332: LD_ADDR_OWVAR 27
2336: PUSH
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 2
2342: PPUSH
2343: CALL_OW 12
2347: ST_TO_ADDR
// end ; PrepareHuman ( hc_sex , 1 , skill_level ) ;
2348: LD_OWVAR 27
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: LD_EXP 11
2360: PPUSH
2361: CALL_OW 380
// un := CreateHuman ;
2365: LD_ADDR_VAR 0 4
2369: PUSH
2370: CALL_OW 44
2374: ST_TO_ADDR
// if not to_copy then
2375: LD_VAR 0 5
2379: NOT
2380: IFFALSE 2407
// to_copy := Replace ( to_copy , 1 , un ) else
2382: LD_ADDR_VAR 0 5
2386: PUSH
2387: LD_VAR 0 5
2391: PPUSH
2392: LD_INT 1
2394: PPUSH
2395: LD_VAR 0 4
2399: PPUSH
2400: CALL_OW 1
2404: ST_TO_ADDR
2405: GO 2483
// begin CopySkills ( to_copy [ 1 ] , un ) ;
2407: LD_VAR 0 5
2411: PUSH
2412: LD_INT 1
2414: ARRAY
2415: PPUSH
2416: LD_VAR 0 4
2420: PPUSH
2421: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ 1 ] , attr_speed ) ) ;
2425: LD_VAR 0 4
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_VAR 0 5
2437: PUSH
2438: LD_INT 1
2440: ARRAY
2441: PPUSH
2442: LD_INT 2
2444: PPUSH
2445: CALL_OW 260
2449: PPUSH
2450: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ 1 ] , attr_stamina ) ) ;
2454: LD_VAR 0 4
2458: PPUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_VAR 0 5
2466: PUSH
2467: LD_INT 1
2469: ARRAY
2470: PPUSH
2471: LD_INT 1
2473: PPUSH
2474: CALL_OW 260
2478: PPUSH
2479: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2483: LD_VAR 0 4
2487: PPUSH
2488: LD_VAR 0 6
2492: PPUSH
2493: LD_VAR 0 7
2497: PPUSH
2498: LD_INT 10
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 50
// hc_importance := 0 ;
2508: LD_ADDR_OWVAR 32
2512: PUSH
2513: LD_INT 0
2515: ST_TO_ADDR
// hc_name :=  ;
2516: LD_ADDR_OWVAR 26
2520: PUSH
2521: LD_STRING 
2523: ST_TO_ADDR
// hc_gallery :=  ;
2524: LD_ADDR_OWVAR 33
2528: PUSH
2529: LD_STRING 
2531: ST_TO_ADDR
// d := ( number_of_people - 1 ) / 4 ;
2532: LD_ADDR_VAR 0 9
2536: PUSH
2537: LD_EXP 10
2541: PUSH
2542: LD_INT 1
2544: MINUS
2545: PUSH
2546: LD_INT 4
2548: DIVREAL
2549: ST_TO_ADDR
// c := 1 ;
2550: LD_ADDR_VAR 0 8
2554: PUSH
2555: LD_INT 1
2557: ST_TO_ADDR
// for j = 2 to number_of_people do
2558: LD_ADDR_VAR 0 3
2562: PUSH
2563: DOUBLE
2564: LD_INT 2
2566: DEC
2567: ST_TO_ADDR
2568: LD_EXP 10
2572: PUSH
2573: FOR_TO
2574: IFFALSE 2785
// begin PrepareHuman ( false , c , skill_level ) ;
2576: LD_INT 0
2578: PPUSH
2579: LD_VAR 0 8
2583: PPUSH
2584: LD_EXP 11
2588: PPUSH
2589: CALL_OW 380
// if ( j - 1 ) mod d = 0 then
2593: LD_VAR 0 3
2597: PUSH
2598: LD_INT 1
2600: MINUS
2601: PUSH
2602: LD_VAR 0 9
2606: MOD
2607: PUSH
2608: LD_INT 0
2610: EQUAL
2611: IFFALSE 2627
// c := c + 1 ;
2613: LD_ADDR_VAR 0 8
2617: PUSH
2618: LD_VAR 0 8
2622: PUSH
2623: LD_INT 1
2625: PLUS
2626: ST_TO_ADDR
// un := CreateHuman ;
2627: LD_ADDR_VAR 0 4
2631: PUSH
2632: CALL_OW 44
2636: ST_TO_ADDR
// if to_copy < j then
2637: LD_VAR 0 5
2641: PUSH
2642: LD_VAR 0 3
2646: LESS
2647: IFFALSE 2676
// to_copy := Replace ( to_copy , j , un ) else
2649: LD_ADDR_VAR 0 5
2653: PUSH
2654: LD_VAR 0 5
2658: PPUSH
2659: LD_VAR 0 3
2663: PPUSH
2664: LD_VAR 0 4
2668: PPUSH
2669: CALL_OW 1
2673: ST_TO_ADDR
2674: GO 2758
// begin CopySkills ( to_copy [ j ] , un ) ;
2676: LD_VAR 0 5
2680: PUSH
2681: LD_VAR 0 3
2685: ARRAY
2686: PPUSH
2687: LD_VAR 0 4
2691: PPUSH
2692: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ j ] , attr_speed ) ) ;
2696: LD_VAR 0 4
2700: PPUSH
2701: LD_INT 2
2703: PPUSH
2704: LD_VAR 0 5
2708: PUSH
2709: LD_VAR 0 3
2713: ARRAY
2714: PPUSH
2715: LD_INT 2
2717: PPUSH
2718: CALL_OW 260
2722: PPUSH
2723: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ j ] , attr_stamina ) ) ;
2727: LD_VAR 0 4
2731: PPUSH
2732: LD_INT 1
2734: PPUSH
2735: LD_VAR 0 5
2739: PUSH
2740: LD_VAR 0 3
2744: ARRAY
2745: PPUSH
2746: LD_INT 1
2748: PPUSH
2749: CALL_OW 260
2753: PPUSH
2754: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2758: LD_VAR 0 4
2762: PPUSH
2763: LD_VAR 0 6
2767: PPUSH
2768: LD_VAR 0 7
2772: PPUSH
2773: LD_INT 10
2775: PPUSH
2776: LD_INT 0
2778: PPUSH
2779: CALL_OW 50
// end ;
2783: GO 2573
2785: POP
2786: POP
// if handicap then
2787: LD_EXP 26
2791: IFFALSE 3062
// begin if handicap = 1 then
2793: LD_EXP 26
2797: PUSH
2798: LD_INT 1
2800: EQUAL
2801: IFFALSE 2880
// for j = 1 to 2 do
2803: LD_ADDR_VAR 0 3
2807: PUSH
2808: DOUBLE
2809: LD_INT 1
2811: DEC
2812: ST_TO_ADDR
2813: LD_INT 2
2815: PUSH
2816: FOR_TO
2817: IFFALSE 2878
// begin vc_chassis := ru_medium_tracked ;
2819: LD_ADDR_OWVAR 37
2823: PUSH
2824: LD_INT 22
2826: ST_TO_ADDR
// vc_engine := engine_combustion ;
2827: LD_ADDR_OWVAR 39
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// vc_control := control_manual ;
2835: LD_ADDR_OWVAR 38
2839: PUSH
2840: LD_INT 1
2842: ST_TO_ADDR
// vc_weapon := ru_gun ;
2843: LD_ADDR_OWVAR 40
2847: PUSH
2848: LD_INT 44
2850: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2851: CALL_OW 45
2855: PPUSH
2856: LD_VAR 0 6
2860: PPUSH
2861: LD_VAR 0 7
2865: PPUSH
2866: LD_INT 13
2868: PPUSH
2869: LD_INT 0
2871: PPUSH
2872: CALL_OW 50
// end ;
2876: GO 2816
2878: POP
2879: POP
// if handicap = 2 then
2880: LD_EXP 26
2884: PUSH
2885: LD_INT 2
2887: EQUAL
2888: IFFALSE 3062
// begin for j = 1 to 2 do
2890: LD_ADDR_VAR 0 3
2894: PUSH
2895: DOUBLE
2896: LD_INT 1
2898: DEC
2899: ST_TO_ADDR
2900: LD_INT 2
2902: PUSH
2903: FOR_TO
2904: IFFALSE 2978
// begin vc_chassis := ru_heavy_tracked ;
2906: LD_ADDR_OWVAR 37
2910: PUSH
2911: LD_INT 24
2913: ST_TO_ADDR
// vc_engine := engine_combustion ;
2914: LD_ADDR_OWVAR 39
2918: PUSH
2919: LD_INT 1
2921: ST_TO_ADDR
// vc_control := control_manual ;
2922: LD_ADDR_OWVAR 38
2926: PUSH
2927: LD_INT 1
2929: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_heavy_gun ] [ j ] ;
2930: LD_ADDR_OWVAR 40
2934: PUSH
2935: LD_INT 43
2937: PUSH
2938: LD_INT 46
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: PUSH
2945: LD_VAR 0 3
2949: ARRAY
2950: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2951: CALL_OW 45
2955: PPUSH
2956: LD_VAR 0 6
2960: PPUSH
2961: LD_VAR 0 7
2965: PPUSH
2966: LD_INT 13
2968: PPUSH
2969: LD_INT 0
2971: PPUSH
2972: CALL_OW 50
// end ;
2976: GO 2903
2978: POP
2979: POP
// vc_chassis := ru_medium_tracked ;
2980: LD_ADDR_OWVAR 37
2984: PUSH
2985: LD_INT 22
2987: ST_TO_ADDR
// vc_engine := engine_siberite ;
2988: LD_ADDR_OWVAR 39
2992: PUSH
2993: LD_INT 3
2995: ST_TO_ADDR
// vc_control := control_computer ;
2996: LD_ADDR_OWVAR 38
3000: PUSH
3001: LD_INT 3
3003: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
3004: LD_ADDR_OWVAR 40
3008: PUSH
3009: LD_INT 51
3011: ST_TO_ADDR
// un := CreateVehicle ;
3012: LD_ADDR_VAR 0 4
3016: PUSH
3017: CALL_OW 45
3021: ST_TO_ADDR
// PlaceUnitXYR ( un , x , y , 13 , false ) ;
3022: LD_VAR 0 4
3026: PPUSH
3027: LD_VAR 0 6
3031: PPUSH
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 13
3039: PPUSH
3040: LD_INT 0
3042: PPUSH
3043: CALL_OW 50
// SetCargo ( un , mat_cans , 100 ) ;
3047: LD_VAR 0 4
3051: PPUSH
3052: LD_INT 1
3054: PPUSH
3055: LD_INT 100
3057: PPUSH
3058: CALL_OW 290
// end ; end ; end ; end ;
3062: GO 2153
3064: POP
3065: POP
// end ;
3066: LD_VAR 0 1
3070: RET
// export function AddApeman ( area ) ; begin
3071: LD_INT 0
3073: PPUSH
// uc_nation := 0 ;
3074: LD_ADDR_OWVAR 21
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// uc_side := 0 ;
3082: LD_ADDR_OWVAR 20
3086: PUSH
3087: LD_INT 0
3089: ST_TO_ADDR
// hc_agressivity := rand ( - 10 , 15 ) ;
3090: LD_ADDR_OWVAR 35
3094: PUSH
3095: LD_INT 10
3097: NEG
3098: PPUSH
3099: LD_INT 15
3101: PPUSH
3102: CALL_OW 12
3106: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
3107: LD_INT 0
3109: PPUSH
3110: LD_INT 12
3112: PPUSH
3113: LD_INT 0
3115: PPUSH
3116: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
3120: LD_ADDR_OWVAR 29
3124: PUSH
3125: LD_INT 10
3127: PUSH
3128: LD_INT 12
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , area , false ) ;
3135: CALL_OW 44
3139: PPUSH
3140: LD_VAR 0 1
3144: PPUSH
3145: LD_INT 0
3147: PPUSH
3148: CALL_OW 49
// end ;
3152: LD_VAR 0 2
3156: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
3157: LD_INT 0
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
// tmp := AreaToList ( area , 0 ) ;
3163: LD_ADDR_VAR 0 5
3167: PUSH
3168: LD_VAR 0 1
3172: PPUSH
3173: LD_INT 0
3175: PPUSH
3176: CALL_OW 517
3180: ST_TO_ADDR
// if not tmp then
3181: LD_VAR 0 5
3185: NOT
3186: IFFALSE 3190
// exit ;
3188: GO 3428
// for i := 1 to n do
3190: LD_ADDR_VAR 0 4
3194: PUSH
3195: DOUBLE
3196: LD_INT 1
3198: DEC
3199: ST_TO_ADDR
3200: LD_VAR 0 2
3204: PUSH
3205: FOR_TO
3206: IFFALSE 3426
// begin r := rand ( 1 , tmp [ 1 ] ) ;
3208: LD_ADDR_VAR 0 6
3212: PUSH
3213: LD_INT 1
3215: PPUSH
3216: LD_VAR 0 5
3220: PUSH
3221: LD_INT 1
3223: ARRAY
3224: PPUSH
3225: CALL_OW 12
3229: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , bot_side , 0 ) ;
3230: LD_VAR 0 5
3234: PUSH
3235: LD_INT 1
3237: ARRAY
3238: PUSH
3239: LD_VAR 0 6
3243: ARRAY
3244: PPUSH
3245: LD_VAR 0 5
3249: PUSH
3250: LD_INT 2
3252: ARRAY
3253: PUSH
3254: LD_VAR 0 6
3258: ARRAY
3259: PPUSH
3260: LD_EXP 8
3264: PPUSH
3265: LD_INT 0
3267: PPUSH
3268: CALL_OW 454
// mines_list := Insert ( mines_list , mines_list + 1 , tmp [ 1 ] [ r ] ) ;
3272: LD_ADDR_EXP 17
3276: PUSH
3277: LD_EXP 17
3281: PPUSH
3282: LD_EXP 17
3286: PUSH
3287: LD_INT 1
3289: PLUS
3290: PPUSH
3291: LD_VAR 0 5
3295: PUSH
3296: LD_INT 1
3298: ARRAY
3299: PUSH
3300: LD_VAR 0 6
3304: ARRAY
3305: PPUSH
3306: CALL_OW 2
3310: ST_TO_ADDR
// mines_list := Insert ( mines_list , mines_list + 1 , tmp [ 2 ] [ r ] ) ;
3311: LD_ADDR_EXP 17
3315: PUSH
3316: LD_EXP 17
3320: PPUSH
3321: LD_EXP 17
3325: PUSH
3326: LD_INT 1
3328: PLUS
3329: PPUSH
3330: LD_VAR 0 5
3334: PUSH
3335: LD_INT 2
3337: ARRAY
3338: PUSH
3339: LD_VAR 0 6
3343: ARRAY
3344: PPUSH
3345: CALL_OW 2
3349: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
3350: LD_ADDR_VAR 0 5
3354: PUSH
3355: LD_VAR 0 5
3359: PPUSH
3360: LD_INT 1
3362: PPUSH
3363: LD_VAR 0 5
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PPUSH
3372: LD_VAR 0 6
3376: PPUSH
3377: CALL_OW 3
3381: PPUSH
3382: CALL_OW 1
3386: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
3387: LD_ADDR_VAR 0 5
3391: PUSH
3392: LD_VAR 0 5
3396: PPUSH
3397: LD_INT 2
3399: PPUSH
3400: LD_VAR 0 5
3404: PUSH
3405: LD_INT 2
3407: ARRAY
3408: PPUSH
3409: LD_VAR 0 6
3413: PPUSH
3414: CALL_OW 3
3418: PPUSH
3419: CALL_OW 1
3423: ST_TO_ADDR
// end ;
3424: GO 3205
3426: POP
3427: POP
// end ;
3428: LD_VAR 0 3
3432: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
3433: LD_INT 0
3435: PPUSH
3436: PPUSH
3437: PPUSH
// if not GetControl ( veh ) = control_manual then
3438: LD_VAR 0 1
3442: PPUSH
3443: CALL_OW 263
3447: PUSH
3448: LD_INT 1
3450: EQUAL
3451: NOT
3452: IFFALSE 3464
// result := false else
3454: LD_ADDR_VAR 0 2
3458: PUSH
3459: LD_INT 0
3461: ST_TO_ADDR
3462: GO 3609
// if veh in FilterAllUnits ( [ f_empty ] ) then
3464: LD_VAR 0 1
3468: PUSH
3469: LD_INT 58
3471: PUSH
3472: EMPTY
3473: LIST
3474: PPUSH
3475: CALL_OW 69
3479: IN
3480: IFFALSE 3492
// result := false else
3482: LD_ADDR_VAR 0 2
3486: PUSH
3487: LD_INT 0
3489: ST_TO_ADDR
3490: GO 3609
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
3492: LD_ADDR_VAR 0 4
3496: PUSH
3497: LD_INT 22
3499: PUSH
3500: LD_VAR 0 1
3504: PPUSH
3505: CALL_OW 255
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PUSH
3514: LD_INT 55
3516: PUSH
3517: EMPTY
3518: LIST
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PPUSH
3524: CALL_OW 69
3528: ST_TO_ADDR
// if not filter then
3529: LD_VAR 0 4
3533: NOT
3534: IFFALSE 3546
// result := false else
3536: LD_ADDR_VAR 0 2
3540: PUSH
3541: LD_INT 0
3543: ST_TO_ADDR
3544: GO 3609
// for i = 1 to filter do
3546: LD_ADDR_VAR 0 3
3550: PUSH
3551: DOUBLE
3552: LD_INT 1
3554: DEC
3555: ST_TO_ADDR
3556: LD_VAR 0 4
3560: PUSH
3561: FOR_TO
3562: IFFALSE 3607
// if IsDriver ( filter [ i ] ) = veh then
3564: LD_VAR 0 4
3568: PUSH
3569: LD_VAR 0 3
3573: ARRAY
3574: PPUSH
3575: CALL 43924 0 1
3579: PUSH
3580: LD_VAR 0 1
3584: EQUAL
3585: IFFALSE 3605
// begin result := filter [ i ] ;
3587: LD_ADDR_VAR 0 2
3591: PUSH
3592: LD_VAR 0 4
3596: PUSH
3597: LD_VAR 0 3
3601: ARRAY
3602: ST_TO_ADDR
// break ;
3603: GO 3607
// end ;
3605: GO 3561
3607: POP
3608: POP
// end ; end ; end_of_file
3609: LD_VAR 0 2
3613: RET
// export function InitBot ; var i , ct , hex , side , un , veh , weapons , skill ; begin
3614: LD_INT 0
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
3620: PPUSH
3621: PPUSH
3622: PPUSH
3623: PPUSH
3624: PPUSH
// side := Bot_Side ;
3625: LD_ADDR_VAR 0 5
3629: PUSH
3630: LD_EXP 8
3634: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
3635: LD_ADDR_VAR 0 9
3639: PUSH
3640: LD_INT 4
3642: PUSH
3643: LD_INT 6
3645: PUSH
3646: LD_INT 8
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: LIST
3653: PUSH
3654: LD_OWVAR 67
3658: ARRAY
3659: ST_TO_ADDR
// weapons := [ ar_gun , ar_rocket_launcher , ar_gatling_gun , ar_flame_thrower ] ;
3660: LD_ADDR_VAR 0 8
3664: PUSH
3665: LD_INT 27
3667: PUSH
3668: LD_INT 28
3670: PUSH
3671: LD_INT 25
3673: PUSH
3674: LD_INT 26
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: ST_TO_ADDR
// veh_counter := [ 4 , 5 , 6 ] [ Difficulty ] ;
3683: LD_ADDR_EXP 22
3687: PUSH
3688: LD_INT 4
3690: PUSH
3691: LD_INT 5
3693: PUSH
3694: LD_INT 6
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: LIST
3701: PUSH
3702: LD_OWVAR 67
3706: ARRAY
3707: ST_TO_ADDR
// ct := [ ] ;
3708: LD_ADDR_VAR 0 3
3712: PUSH
3713: EMPTY
3714: ST_TO_ADDR
// patrols := [ ] ;
3715: LD_ADDR_EXP 19
3719: PUSH
3720: EMPTY
3721: ST_TO_ADDR
// attackers := [ ] ;
3722: LD_ADDR_EXP 20
3726: PUSH
3727: EMPTY
3728: ST_TO_ADDR
// attackers_tmp := [ ] ;
3729: LD_ADDR_EXP 27
3733: PUSH
3734: EMPTY
3735: ST_TO_ADDR
// to_produce := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , ] ;
3736: LD_ADDR_EXP 21
3740: PUSH
3741: LD_INT 14
3743: PUSH
3744: LD_INT 1
3746: PUSH
3747: LD_INT 2
3749: PUSH
3750: LD_INT 27
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: PUSH
3759: LD_INT 14
3761: PUSH
3762: LD_INT 1
3764: PUSH
3765: LD_INT 2
3767: PUSH
3768: LD_INT 25
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: PUSH
3777: LD_INT 14
3779: PUSH
3780: LD_INT 1
3782: PUSH
3783: LD_INT 2
3785: PUSH
3786: LD_INT 28
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 14
3797: PUSH
3798: LD_INT 1
3800: PUSH
3801: LD_INT 2
3803: PUSH
3804: LD_INT 29
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: ST_TO_ADDR
// if Difficulty > 2 then
3819: LD_OWVAR 67
3823: PUSH
3824: LD_INT 2
3826: GREATER
3827: IFFALSE 3895
// begin to_produce := Join ( to_produce , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ) ;
3829: LD_ADDR_EXP 21
3833: PUSH
3834: LD_EXP 21
3838: PPUSH
3839: LD_INT 14
3841: PUSH
3842: LD_INT 1
3844: PUSH
3845: LD_INT 2
3847: PUSH
3848: LD_INT 27
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL 46320 0 2
3861: ST_TO_ADDR
// to_produce := Join ( to_produce , [ ar_medium_trike , engine_siberite , control_remote , ar_selfpropelled_bomb ] ) ;
3862: LD_ADDR_EXP 21
3866: PUSH
3867: LD_EXP 21
3871: PPUSH
3872: LD_INT 13
3874: PUSH
3875: LD_INT 3
3877: PUSH
3878: LD_INT 2
3880: PUSH
3881: LD_INT 29
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: PPUSH
3890: CALL 46320 0 2
3894: ST_TO_ADDR
// end ; SetBName ( ar_dep , newkabul ) ;
3895: LD_INT 2
3897: PPUSH
3898: LD_STRING newkabul
3900: PPUSH
3901: CALL_OW 500
// SetResourceType ( GetBase ( ar_dep ) , mat_cans , 90000 ) ;
3905: LD_INT 2
3907: PPUSH
3908: CALL_OW 274
3912: PPUSH
3913: LD_INT 1
3915: PPUSH
3916: LD_INT 90000
3918: PPUSH
3919: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_oil , 9000 ) ;
3923: LD_INT 2
3925: PPUSH
3926: CALL_OW 274
3930: PPUSH
3931: LD_INT 2
3933: PPUSH
3934: LD_INT 9000
3936: PPUSH
3937: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_siberit , 3000 ) ;
3941: LD_INT 2
3943: PPUSH
3944: CALL_OW 274
3948: PPUSH
3949: LD_INT 3
3951: PPUSH
3952: LD_INT 3000
3954: PPUSH
3955: CALL_OW 277
// if Difficulty > 1 then
3959: LD_OWVAR 67
3963: PUSH
3964: LD_INT 1
3966: GREATER
3967: IFFALSE 3984
// SetTech ( 5 , side , state_researched ) ;
3969: LD_INT 5
3971: PPUSH
3972: LD_VAR 0 5
3976: PPUSH
3977: LD_INT 2
3979: PPUSH
3980: CALL_OW 322
// SetTech ( tech_mortar , side , state_researched ) ;
3984: LD_INT 41
3986: PPUSH
3987: LD_VAR 0 5
3991: PPUSH
3992: LD_INT 2
3994: PPUSH
3995: CALL_OW 322
// SetTech ( tech_weap1 , side , state_researched ) ;
3999: LD_INT 51
4001: PPUSH
4002: LD_VAR 0 5
4006: PPUSH
4007: LD_INT 2
4009: PPUSH
4010: CALL_OW 322
// SetTech ( tech_weap2 , side , state_researched ) ;
4014: LD_INT 52
4016: PPUSH
4017: LD_VAR 0 5
4021: PPUSH
4022: LD_INT 2
4024: PPUSH
4025: CALL_OW 322
// SetTech ( tech_weap3 , side , state_researched ) ;
4029: LD_INT 53
4031: PPUSH
4032: LD_VAR 0 5
4036: PPUSH
4037: LD_INT 2
4039: PPUSH
4040: CALL_OW 322
// SetTech ( tech_opto1 , side , state_researched ) ;
4044: LD_INT 60
4046: PPUSH
4047: LD_VAR 0 5
4051: PPUSH
4052: LD_INT 2
4054: PPUSH
4055: CALL_OW 322
// SetTech ( tech_opto2 , side , state_researched ) ;
4059: LD_INT 61
4061: PPUSH
4062: LD_VAR 0 5
4066: PPUSH
4067: LD_INT 2
4069: PPUSH
4070: CALL_OW 322
// SetTech ( tech_opto3 , side , state_researched ) ;
4074: LD_INT 62
4076: PPUSH
4077: LD_VAR 0 5
4081: PPUSH
4082: LD_INT 2
4084: PPUSH
4085: CALL_OW 322
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
4089: LD_ADDR_VAR 0 2
4093: PUSH
4094: LD_INT 22
4096: PUSH
4097: LD_VAR 0 5
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 21
4108: PUSH
4109: LD_INT 3
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: PPUSH
4120: CALL_OW 69
4124: PUSH
4125: FOR_IN
4126: IFFALSE 4159
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
4128: LD_VAR 0 2
4132: PPUSH
4133: LD_INT 6
4135: PUSH
4136: LD_INT 8
4138: PUSH
4139: LD_INT 10
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: LIST
4146: PUSH
4147: LD_OWVAR 67
4151: ARRAY
4152: PPUSH
4153: CALL_OW 241
4157: GO 4125
4159: POP
4160: POP
// if Difficulty > 1 then
4161: LD_OWVAR 67
4165: PUSH
4166: LD_INT 1
4168: GREATER
4169: IFFALSE 4178
// RemoveEnvironmentArea ( forest_road ) ;
4171: LD_INT 11
4173: PPUSH
4174: CALL_OW 355
// PlaceMines ( mine_west_zone , [ 10 , 12 , 18 ] [ Difficulty ] ) ;
4178: LD_INT 4
4180: PPUSH
4181: LD_INT 10
4183: PUSH
4184: LD_INT 12
4186: PUSH
4187: LD_INT 18
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: LIST
4194: PUSH
4195: LD_OWVAR 67
4199: ARRAY
4200: PPUSH
4201: CALL 3157 0 2
// PlaceMines ( mine_east_zone , [ 7 , 12 , 15 ] [ Difficulty ] ) ;
4205: LD_INT 5
4207: PPUSH
4208: LD_INT 7
4210: PUSH
4211: LD_INT 12
4213: PUSH
4214: LD_INT 15
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: LIST
4221: PUSH
4222: LD_OWVAR 67
4226: ARRAY
4227: PPUSH
4228: CALL 3157 0 2
// PlaceMines ( mine_south_zone , [ 5 , 8 , 12 ] [ Difficulty ] ) ;
4232: LD_INT 7
4234: PPUSH
4235: LD_INT 5
4237: PUSH
4238: LD_INT 8
4240: PUSH
4241: LD_INT 12
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: PUSH
4249: LD_OWVAR 67
4253: ARRAY
4254: PPUSH
4255: CALL 3157 0 2
// PlaceMines ( mine_high_zone , [ 0 , 3 , 5 ] [ Difficulty ] ) ;
4259: LD_INT 6
4261: PPUSH
4262: LD_INT 0
4264: PUSH
4265: LD_INT 3
4267: PUSH
4268: LD_INT 5
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: LIST
4275: PUSH
4276: LD_OWVAR 67
4280: ARRAY
4281: PPUSH
4282: CALL 3157 0 2
// PlaceMines ( mine_road_zone , [ 2 , 5 , 8 ] [ Difficulty ] ) ;
4286: LD_INT 8
4288: PPUSH
4289: LD_INT 2
4291: PUSH
4292: LD_INT 5
4294: PUSH
4295: LD_INT 8
4297: PUSH
4298: EMPTY
4299: LIST
4300: LIST
4301: LIST
4302: PUSH
4303: LD_OWVAR 67
4307: ARRAY
4308: PPUSH
4309: CALL 3157 0 2
// PlaceMines ( mine_southpass_zone , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
4313: LD_INT 9
4315: PPUSH
4316: LD_INT 0
4318: PUSH
4319: LD_INT 2
4321: PUSH
4322: LD_INT 4
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: LIST
4329: PUSH
4330: LD_OWVAR 67
4334: ARRAY
4335: PPUSH
4336: CALL 3157 0 2
// PlaceMines ( mine_oileast_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4340: LD_INT 10
4342: PPUSH
4343: LD_INT 0
4345: PUSH
4346: LD_INT 1
4348: PUSH
4349: LD_INT 1
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: PUSH
4357: LD_OWVAR 67
4361: ARRAY
4362: PPUSH
4363: CALL 3157 0 2
// PlaceMines ( mine_oilwest_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4367: LD_INT 12
4369: PPUSH
4370: LD_INT 0
4372: PUSH
4373: LD_INT 1
4375: PUSH
4376: LD_INT 1
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: LIST
4383: PUSH
4384: LD_OWVAR 67
4388: ARRAY
4389: PPUSH
4390: CALL 3157 0 2
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4394: LD_ADDR_VAR 0 2
4398: PUSH
4399: LD_INT 22
4401: PUSH
4402: LD_VAR 0 5
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: PUSH
4411: LD_INT 30
4413: PUSH
4414: LD_INT 32
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PPUSH
4425: CALL_OW 69
4429: PUSH
4430: FOR_IN
4431: IFFALSE 4463
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
4433: LD_VAR 0 2
4437: PPUSH
4438: LD_VAR 0 8
4442: PUSH
4443: LD_INT 1
4445: PPUSH
4446: LD_VAR 0 8
4450: PPUSH
4451: CALL_OW 12
4455: ARRAY
4456: PPUSH
4457: CALL_OW 431
4461: GO 4430
4463: POP
4464: POP
// uc_side := side ;
4465: LD_ADDR_OWVAR 20
4469: PUSH
4470: LD_VAR 0 5
4474: ST_TO_ADDR
// uc_nation := 2 ;
4475: LD_ADDR_OWVAR 21
4479: PUSH
4480: LD_INT 2
4482: ST_TO_ADDR
// for i = 1 to 1 + Difficulty do
4483: LD_ADDR_VAR 0 2
4487: PUSH
4488: DOUBLE
4489: LD_INT 1
4491: DEC
4492: ST_TO_ADDR
4493: LD_INT 1
4495: PUSH
4496: LD_OWVAR 67
4500: PLUS
4501: PUSH
4502: FOR_TO
4503: IFFALSE 4593
// begin vc_chassis := ar_half_tracked ;
4505: LD_ADDR_OWVAR 37
4509: PUSH
4510: LD_INT 14
4512: ST_TO_ADDR
// vc_engine := engine_combustion ;
4513: LD_ADDR_OWVAR 39
4517: PUSH
4518: LD_INT 1
4520: ST_TO_ADDR
// vc_control := control_manual ;
4521: LD_ADDR_OWVAR 38
4525: PUSH
4526: LD_INT 1
4528: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4529: LD_ADDR_OWVAR 40
4533: PUSH
4534: LD_INT 31
4536: ST_TO_ADDR
// veh := CreateVehicle ;
4537: LD_ADDR_VAR 0 7
4541: PUSH
4542: CALL_OW 45
4546: ST_TO_ADDR
// PlaceUnitArea ( veh , ct_area , false ) ;
4547: LD_VAR 0 7
4551: PPUSH
4552: LD_INT 3
4554: PPUSH
4555: LD_INT 0
4557: PPUSH
4558: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
4562: LD_INT 0
4564: PPUSH
4565: LD_INT 3
4567: PPUSH
4568: LD_VAR 0 9
4572: PPUSH
4573: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4577: CALL_OW 44
4581: PPUSH
4582: LD_VAR 0 7
4586: PPUSH
4587: CALL_OW 52
// end ;
4591: GO 4502
4593: POP
4594: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4595: LD_ADDR_VAR 0 2
4599: PUSH
4600: LD_INT 22
4602: PUSH
4603: LD_VAR 0 5
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: LD_INT 30
4614: PUSH
4615: LD_INT 32
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PPUSH
4626: CALL_OW 69
4630: PUSH
4631: FOR_IN
4632: IFFALSE 4665
// begin PrepareHuman ( false , 1 , skill ) ;
4634: LD_INT 0
4636: PPUSH
4637: LD_INT 1
4639: PPUSH
4640: LD_VAR 0 9
4644: PPUSH
4645: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4649: CALL_OW 44
4653: PPUSH
4654: LD_VAR 0 2
4658: PPUSH
4659: CALL_OW 52
// end ;
4663: GO 4631
4665: POP
4666: POP
// for i = 1 to 4 do
4667: LD_ADDR_VAR 0 2
4671: PUSH
4672: DOUBLE
4673: LD_INT 1
4675: DEC
4676: ST_TO_ADDR
4677: LD_INT 4
4679: PUSH
4680: FOR_TO
4681: IFFALSE 4712
// begin PrepareHuman ( false , 2 , skill ) ;
4683: LD_INT 0
4685: PPUSH
4686: LD_INT 2
4688: PPUSH
4689: LD_VAR 0 9
4693: PPUSH
4694: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_dep ) ;
4698: CALL_OW 44
4702: PPUSH
4703: LD_INT 2
4705: PPUSH
4706: CALL_OW 52
// end ;
4710: GO 4680
4712: POP
4713: POP
// for i = 1 to 6 do
4714: LD_ADDR_VAR 0 2
4718: PUSH
4719: DOUBLE
4720: LD_INT 1
4722: DEC
4723: ST_TO_ADDR
4724: LD_INT 6
4726: PUSH
4727: FOR_TO
4728: IFFALSE 4759
// begin PrepareHuman ( false , 3 , skill ) ;
4730: LD_INT 0
4732: PPUSH
4733: LD_INT 3
4735: PPUSH
4736: LD_VAR 0 9
4740: PPUSH
4741: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_fac ) ;
4745: CALL_OW 44
4749: PPUSH
4750: LD_INT 12
4752: PPUSH
4753: CALL_OW 52
// end ;
4757: GO 4727
4759: POP
4760: POP
// for i = 1 to 4 do
4761: LD_ADDR_VAR 0 2
4765: PUSH
4766: DOUBLE
4767: LD_INT 1
4769: DEC
4770: ST_TO_ADDR
4771: LD_INT 4
4773: PUSH
4774: FOR_TO
4775: IFFALSE 4832
// begin PrepareHuman ( false , 4 , skill ) ;
4777: LD_INT 0
4779: PPUSH
4780: LD_INT 4
4782: PPUSH
4783: LD_VAR 0 9
4787: PPUSH
4788: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ f_btype , b_lab_full ] ) [ ( i mod 2 ) + 1 ] ) ;
4792: CALL_OW 44
4796: PPUSH
4797: LD_INT 30
4799: PUSH
4800: LD_INT 8
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: PPUSH
4807: CALL_OW 69
4811: PUSH
4812: LD_VAR 0 2
4816: PUSH
4817: LD_INT 2
4819: MOD
4820: PUSH
4821: LD_INT 1
4823: PLUS
4824: ARRAY
4825: PPUSH
4826: CALL_OW 52
// end ;
4830: GO 4774
4832: POP
4833: POP
// PrepareHuman ( false , class_mortar , skill ) ;
4834: LD_INT 0
4836: PPUSH
4837: LD_INT 8
4839: PPUSH
4840: LD_VAR 0 9
4844: PPUSH
4845: CALL_OW 380
// un := CreateHuman ;
4849: LD_ADDR_VAR 0 6
4853: PUSH
4854: CALL_OW 44
4858: ST_TO_ADDR
// SetDir ( un , 2 ) ;
4859: LD_VAR 0 6
4863: PPUSH
4864: LD_INT 2
4866: PPUSH
4867: CALL_OW 233
// PlaceHumanInUnit ( un , bun1 ) ;
4871: LD_VAR 0 6
4875: PPUSH
4876: LD_INT 31
4878: PPUSH
4879: CALL_OW 52
// for i = 1 to 4 do
4883: LD_ADDR_VAR 0 2
4887: PUSH
4888: DOUBLE
4889: LD_INT 1
4891: DEC
4892: ST_TO_ADDR
4893: LD_INT 4
4895: PUSH
4896: FOR_TO
4897: IFFALSE 4953
// begin uc_nation := 0 ;
4899: LD_ADDR_OWVAR 21
4903: PUSH
4904: LD_INT 0
4906: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 1 ) ;
4907: LD_INT 0
4909: PPUSH
4910: LD_INT 16
4912: PPUSH
4913: LD_INT 1
4915: PPUSH
4916: CALL_OW 380
// un := CreateHuman ;
4920: LD_ADDR_VAR 0 6
4924: PUSH
4925: CALL_OW 44
4929: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 46 , 8 , false ) ;
4930: LD_VAR 0 6
4934: PPUSH
4935: LD_INT 106
4937: PPUSH
4938: LD_INT 46
4940: PPUSH
4941: LD_INT 8
4943: PPUSH
4944: LD_INT 0
4946: PPUSH
4947: CALL_OW 50
// end ;
4951: GO 4896
4953: POP
4954: POP
// for i = 1 to 2 * Difficulty do
4955: LD_ADDR_VAR 0 2
4959: PUSH
4960: DOUBLE
4961: LD_INT 1
4963: DEC
4964: ST_TO_ADDR
4965: LD_INT 2
4967: PUSH
4968: LD_OWVAR 67
4972: MUL
4973: PUSH
4974: FOR_TO
4975: IFFALSE 5015
// begin uc_nation := 0 ;
4977: LD_ADDR_OWVAR 21
4981: PUSH
4982: LD_INT 0
4984: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_soldier , 3 ) ;
4985: LD_INT 0
4987: PPUSH
4988: LD_INT 15
4990: PPUSH
4991: LD_INT 3
4993: PPUSH
4994: CALL_OW 380
// PlaceUnitArea ( CreateHuman , ap1 , false ) ;
4998: CALL_OW 44
5002: PPUSH
5003: LD_INT 20
5005: PPUSH
5006: LD_INT 0
5008: PPUSH
5009: CALL_OW 49
// end ;
5013: GO 4974
5015: POP
5016: POP
// for i = 1 to 4 * Difficulty do
5017: LD_ADDR_VAR 0 2
5021: PUSH
5022: DOUBLE
5023: LD_INT 1
5025: DEC
5026: ST_TO_ADDR
5027: LD_INT 4
5029: PUSH
5030: LD_OWVAR 67
5034: MUL
5035: PUSH
5036: FOR_TO
5037: IFFALSE 5111
// begin uc_nation := 0 ;
5039: LD_ADDR_OWVAR 21
5043: PUSH
5044: LD_INT 0
5046: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_kamikaze , 3 ) ;
5047: LD_INT 0
5049: PPUSH
5050: LD_INT 17
5052: PPUSH
5053: LD_INT 3
5055: PPUSH
5056: CALL_OW 380
// hc_attr := [ 11 , 13 ] ;
5060: LD_ADDR_OWVAR 29
5064: PUSH
5065: LD_INT 11
5067: PUSH
5068: LD_INT 13
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: ST_TO_ADDR
// un := CreateHuman ;
5075: LD_ADDR_VAR 0 6
5079: PUSH
5080: CALL_OW 44
5084: ST_TO_ADDR
// PlaceUnitArea ( un , ap2 , false ) ;
5085: LD_VAR 0 6
5089: PPUSH
5090: LD_INT 21
5092: PPUSH
5093: LD_INT 0
5095: PPUSH
5096: CALL_OW 49
// ComHold ( un ) ;
5100: LD_VAR 0 6
5104: PPUSH
5105: CALL_OW 140
// end ;
5109: GO 5036
5111: POP
5112: POP
// end ;
5113: LD_VAR 0 1
5117: RET
// every 12 12$00 + 2 2$00 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) do var i , tmp , p ;
5118: LD_INT 22
5120: PUSH
5121: LD_EXP 8
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: LD_INT 30
5132: PUSH
5133: LD_INT 3
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PPUSH
5144: CALL_OW 69
5148: IFFALSE 5455
5150: GO 5152
5152: DISABLE
5153: LD_INT 0
5155: PPUSH
5156: PPUSH
5157: PPUSH
// begin enable ;
5158: ENABLE
// if Difficulty < 3 then
5159: LD_OWVAR 67
5163: PUSH
5164: LD_INT 3
5166: LESS
5167: IFFALSE 5176
// wait ( 1 1$00 ) ;
5169: LD_INT 2100
5171: PPUSH
5172: CALL_OW 67
// tmp := queue_codes [ rng ] ;
5176: LD_ADDR_VAR 0 2
5180: PUSH
5181: LD_EXP 23
5185: PUSH
5186: LD_EXP 24
5190: ARRAY
5191: ST_TO_ADDR
// p := 1 ;
5192: LD_ADDR_VAR 0 3
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// for i = 1 to veh_counter + [ - 1 , 0 , 1 ] [ Difficulty ] do
5200: LD_ADDR_VAR 0 1
5204: PUSH
5205: DOUBLE
5206: LD_INT 1
5208: DEC
5209: ST_TO_ADDR
5210: LD_EXP 22
5214: PUSH
5215: LD_INT 1
5217: NEG
5218: PUSH
5219: LD_INT 0
5221: PUSH
5222: LD_INT 1
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: LIST
5229: PUSH
5230: LD_OWVAR 67
5234: ARRAY
5235: PLUS
5236: PUSH
5237: FOR_TO
5238: IFFALSE 5419
// begin AddComConstruct ( FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) [ 1 ] , to_produce [ tmp mod 10 ] [ 1 ] , to_produce [ tmp mod 10 ] [ 2 ] , to_produce [ tmp mod 10 ] [ 3 ] , to_produce [ tmp mod 10 ] [ 4 ] ) ;
5240: LD_INT 22
5242: PUSH
5243: LD_EXP 8
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: LD_INT 30
5254: PUSH
5255: LD_INT 3
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PUSH
5271: LD_INT 1
5273: ARRAY
5274: PPUSH
5275: LD_EXP 21
5279: PUSH
5280: LD_VAR 0 2
5284: PUSH
5285: LD_INT 10
5287: MOD
5288: ARRAY
5289: PUSH
5290: LD_INT 1
5292: ARRAY
5293: PPUSH
5294: LD_EXP 21
5298: PUSH
5299: LD_VAR 0 2
5303: PUSH
5304: LD_INT 10
5306: MOD
5307: ARRAY
5308: PUSH
5309: LD_INT 2
5311: ARRAY
5312: PPUSH
5313: LD_EXP 21
5317: PUSH
5318: LD_VAR 0 2
5322: PUSH
5323: LD_INT 10
5325: MOD
5326: ARRAY
5327: PUSH
5328: LD_INT 3
5330: ARRAY
5331: PPUSH
5332: LD_EXP 21
5336: PUSH
5337: LD_VAR 0 2
5341: PUSH
5342: LD_INT 10
5344: MOD
5345: ARRAY
5346: PUSH
5347: LD_INT 4
5349: ARRAY
5350: PPUSH
5351: CALL_OW 185
// tmp := tmp / 10 ;
5355: LD_ADDR_VAR 0 2
5359: PUSH
5360: LD_VAR 0 2
5364: PUSH
5365: LD_INT 10
5367: DIVREAL
5368: ST_TO_ADDR
// p := p + 1 ;
5369: LD_ADDR_VAR 0 3
5373: PUSH
5374: LD_VAR 0 3
5378: PUSH
5379: LD_INT 1
5381: PLUS
5382: ST_TO_ADDR
// if p > 5 then
5383: LD_VAR 0 3
5387: PUSH
5388: LD_INT 5
5390: GREATER
5391: IFFALSE 5417
// begin p := 1 ;
5393: LD_ADDR_VAR 0 3
5397: PUSH
5398: LD_INT 1
5400: ST_TO_ADDR
// tmp := queue_codes [ rng ] ;
5401: LD_ADDR_VAR 0 2
5405: PUSH
5406: LD_EXP 23
5410: PUSH
5411: LD_EXP 24
5415: ARRAY
5416: ST_TO_ADDR
// end ; end ;
5417: GO 5237
5419: POP
5420: POP
// rng := rng + 1 ;
5421: LD_ADDR_EXP 24
5425: PUSH
5426: LD_EXP 24
5430: PUSH
5431: LD_INT 1
5433: PLUS
5434: ST_TO_ADDR
// if rng > queue_codes then
5435: LD_EXP 24
5439: PUSH
5440: LD_EXP 23
5444: GREATER
5445: IFFALSE 5455
// rng := 1 ;
5447: LD_ADDR_EXP 24
5451: PUSH
5452: LD_INT 1
5454: ST_TO_ADDR
// end ;
5455: PPOPN 3
5457: END
// every 0 0$01 trigger FilterAllUnits ( [ f_class , 17 ] ) do var i , un ;
5458: LD_INT 25
5460: PUSH
5461: LD_INT 17
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: PPUSH
5468: CALL_OW 69
5472: IFFALSE 5575
5474: GO 5476
5476: DISABLE
5477: LD_INT 0
5479: PPUSH
5480: PPUSH
// begin enable ;
5481: ENABLE
// for i in FilterAllUnits ( [ f_class , 17 ] ) do
5482: LD_ADDR_VAR 0 1
5486: PUSH
5487: LD_INT 25
5489: PUSH
5490: LD_INT 17
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PPUSH
5497: CALL_OW 69
5501: PUSH
5502: FOR_IN
5503: IFFALSE 5573
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , bot_side ] ) , i ) ;
5505: LD_ADDR_VAR 0 2
5509: PUSH
5510: LD_INT 81
5512: PUSH
5513: LD_EXP 8
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PPUSH
5522: CALL_OW 69
5526: PPUSH
5527: LD_VAR 0 1
5531: PPUSH
5532: CALL_OW 74
5536: ST_TO_ADDR
// if GetDistUnits ( i , un ) < 15 then
5537: LD_VAR 0 1
5541: PPUSH
5542: LD_VAR 0 2
5546: PPUSH
5547: CALL_OW 296
5551: PUSH
5552: LD_INT 15
5554: LESS
5555: IFFALSE 5571
// ComAttackUnit ( i , un ) ;
5557: LD_VAR 0 1
5561: PPUSH
5562: LD_VAR 0 2
5566: PPUSH
5567: CALL_OW 115
// end ;
5571: GO 5502
5573: POP
5574: POP
// end ;
5575: PPOPN 2
5577: END
// every 0 0$01 trigger attackers marked 17 do var i ;
5578: LD_EXP 20
5582: IFFALSE 5649
5584: GO 5586
5586: DISABLE
5587: LD_INT 0
5589: PPUSH
// begin enable ;
5590: ENABLE
// for i in attackers do
5591: LD_ADDR_VAR 0 1
5595: PUSH
5596: LD_EXP 20
5600: PUSH
5601: FOR_IN
5602: IFFALSE 5647
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
5604: LD_VAR 0 1
5608: PPUSH
5609: LD_INT 81
5611: PUSH
5612: LD_VAR 0 1
5616: PPUSH
5617: CALL_OW 255
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PPUSH
5626: CALL_OW 69
5630: PPUSH
5631: LD_VAR 0 1
5635: PPUSH
5636: CALL_OW 74
5640: PPUSH
5641: CALL_OW 115
5645: GO 5601
5647: POP
5648: POP
// end ;
5649: PPOPN 1
5651: END
// every 0 0$01 trigger not attackers marked 17 do
5652: LD_EXP 20
5656: NOT
5657: IFFALSE 5666
5659: GO 5661
5661: DISABLE
// begin enable ;
5662: ENABLE
// disable ( 17 ) ;
5663: LD_INT 17
5665: DISABLE_MARKED
// end ;
5666: END
// every 1 1$00 trigger veh_counter <= attackers do var max , i ;
5667: LD_EXP 22
5671: PUSH
5672: LD_EXP 20
5676: LESSEQUAL
5677: IFFALSE 5690
5679: GO 5681
5681: DISABLE
5682: LD_INT 0
5684: PPUSH
5685: PPUSH
// begin enable ;
5686: ENABLE
// enable ( 17 ) ;
5687: LD_INT 17
5689: ENABLE_MARKED
// end ;
5690: PPOPN 2
5692: END
// every 0 0$01 trigger game_start and tick >= 50 50$00 do
5693: LD_EXP 9
5697: PUSH
5698: LD_OWVAR 1
5702: PUSH
5703: LD_INT 105000
5705: GREATEREQUAL
5706: AND
5707: IFFALSE 5726
5709: GO 5711
5711: DISABLE
// veh_counter := veh_counter + 2 ;
5712: LD_ADDR_EXP 22
5716: PUSH
5717: LD_EXP 22
5721: PUSH
5722: LD_INT 2
5724: PLUS
5725: ST_TO_ADDR
5726: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
5727: LD_INT 22
5729: PUSH
5730: LD_EXP 8
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: LD_INT 33
5741: PUSH
5742: LD_INT 2
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: PPUSH
5753: CALL_OW 69
5757: IFFALSE 5973
5759: GO 5761
5761: DISABLE
5762: LD_INT 0
5764: PPUSH
5765: PPUSH
5766: PPUSH
5767: PPUSH
5768: PPUSH
5769: PPUSH
5770: PPUSH
// begin enable ;
5771: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
5772: LD_ADDR_VAR 0 4
5776: PUSH
5777: LD_INT 22
5779: PUSH
5780: LD_EXP 8
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 33
5791: PUSH
5792: LD_INT 2
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 3
5801: PUSH
5802: LD_INT 61
5804: PUSH
5805: EMPTY
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: LIST
5816: PPUSH
5817: CALL_OW 69
5821: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_weapon , ar_control_tower ] ] ) ;
5822: LD_ADDR_VAR 0 3
5826: PUSH
5827: LD_INT 22
5829: PUSH
5830: LD_EXP 8
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PUSH
5839: LD_INT 34
5841: PUSH
5842: LD_INT 31
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: PPUSH
5853: CALL_OW 69
5857: ST_TO_ADDR
// best := 10 ;
5858: LD_ADDR_VAR 0 5
5862: PUSH
5863: LD_INT 10
5865: ST_TO_ADDR
// best_mechanic := - 1 ;
5866: LD_ADDR_VAR 0 6
5870: PUSH
5871: LD_INT 1
5873: NEG
5874: ST_TO_ADDR
// if vehs then
5875: LD_VAR 0 4
5879: IFFALSE 5973
// begin for j in cts do
5881: LD_ADDR_VAR 0 2
5885: PUSH
5886: LD_VAR 0 3
5890: PUSH
5891: FOR_IN
5892: IFFALSE 5953
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
5894: LD_ADDR_VAR 0 7
5898: PUSH
5899: LD_VAR 0 2
5903: PPUSH
5904: CALL 3433 0 1
5908: PPUSH
5909: CALL_OW 432
5913: ST_TO_ADDR
// if p < best then
5914: LD_VAR 0 7
5918: PUSH
5919: LD_VAR 0 5
5923: LESS
5924: IFFALSE 5951
// begin best := p ;
5926: LD_ADDR_VAR 0 5
5930: PUSH
5931: LD_VAR 0 7
5935: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
5936: LD_ADDR_VAR 0 6
5940: PUSH
5941: LD_VAR 0 2
5945: PPUSH
5946: CALL 3433 0 1
5950: ST_TO_ADDR
// end ; end ;
5951: GO 5891
5953: POP
5954: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
5955: LD_VAR 0 4
5959: PUSH
5960: LD_INT 1
5962: ARRAY
5963: PPUSH
5964: LD_VAR 0 6
5968: PPUSH
5969: CALL_OW 135
// end ; end ;
5973: PPOPN 7
5975: END
// every 0 0$01 do var i , j , h , sci , eng , b , p ;
5976: GO 5978
5978: DISABLE
5979: LD_INT 0
5981: PPUSH
5982: PPUSH
5983: PPUSH
5984: PPUSH
5985: PPUSH
5986: PPUSH
5987: PPUSH
// begin enable ;
5988: ENABLE
// b := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5989: LD_ADDR_VAR 0 6
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_EXP 8
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PUSH
6006: LD_INT 21
6008: PUSH
6009: LD_INT 3
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PUSH
6016: LD_INT 3
6018: PUSH
6019: LD_INT 24
6021: PUSH
6022: LD_INT 1000
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: LIST
6037: PPUSH
6038: CALL_OW 69
6042: ST_TO_ADDR
// h := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6043: LD_ADDR_VAR 0 3
6047: PUSH
6048: LD_INT 22
6050: PUSH
6051: LD_EXP 8
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: PUSH
6060: LD_INT 2
6062: PUSH
6063: LD_INT 25
6065: PUSH
6066: LD_INT 1
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 25
6075: PUSH
6076: LD_INT 2
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 25
6085: PUSH
6086: LD_INT 3
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 3
6101: PUSH
6102: LD_INT 24
6104: PUSH
6105: LD_INT 750
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 69
6125: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) ;
6126: LD_ADDR_VAR 0 4
6130: PUSH
6131: LD_INT 22
6133: PUSH
6134: LD_EXP 8
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PUSH
6143: LD_INT 25
6145: PUSH
6146: LD_INT 4
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PPUSH
6157: CALL_OW 69
6161: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 2 ] ] ) ;
6162: LD_ADDR_VAR 0 5
6166: PUSH
6167: LD_INT 22
6169: PUSH
6170: LD_EXP 8
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 25
6181: PUSH
6182: LD_INT 2
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PPUSH
6193: CALL_OW 69
6197: ST_TO_ADDR
// if not h and not b then
6198: LD_VAR 0 3
6202: NOT
6203: PUSH
6204: LD_VAR 0 6
6208: NOT
6209: AND
6210: IFFALSE 6494
// begin if sci then
6212: LD_VAR 0 4
6216: IFFALSE 6353
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) then
6218: LD_VAR 0 4
6222: PPUSH
6223: LD_INT 3
6225: PUSH
6226: LD_INT 54
6228: PUSH
6229: EMPTY
6230: LIST
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PPUSH
6236: CALL_OW 72
6240: PUSH
6241: LD_INT 22
6243: PUSH
6244: LD_EXP 8
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 30
6255: PUSH
6256: LD_INT 8
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PPUSH
6267: CALL_OW 69
6271: AND
6272: IFFALSE 6353
// for j in UnitFilter ( sci , [ f_not , [ f_inside ] ] ) do
6274: LD_ADDR_VAR 0 2
6278: PUSH
6279: LD_VAR 0 4
6283: PPUSH
6284: LD_INT 3
6286: PUSH
6287: LD_INT 54
6289: PUSH
6290: EMPTY
6291: LIST
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PPUSH
6297: CALL_OW 72
6301: PUSH
6302: FOR_IN
6303: IFFALSE 6351
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
6305: LD_VAR 0 2
6309: PPUSH
6310: LD_INT 22
6312: PUSH
6313: LD_EXP 8
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PUSH
6322: LD_INT 30
6324: PUSH
6325: LD_INT 8
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PPUSH
6336: CALL_OW 69
6340: PUSH
6341: LD_INT 1
6343: ARRAY
6344: PPUSH
6345: CALL_OW 120
6349: GO 6302
6351: POP
6352: POP
// if eng then
6353: LD_VAR 0 5
6357: IFFALSE 6494
// if UnitFilter ( eng , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) then
6359: LD_VAR 0 5
6363: PPUSH
6364: LD_INT 3
6366: PUSH
6367: LD_INT 54
6369: PUSH
6370: EMPTY
6371: LIST
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PPUSH
6377: CALL_OW 72
6381: PUSH
6382: LD_INT 22
6384: PUSH
6385: LD_EXP 8
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 30
6396: PUSH
6397: LD_INT 1
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PPUSH
6408: CALL_OW 69
6412: AND
6413: IFFALSE 6494
// for j in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6415: LD_ADDR_VAR 0 2
6419: PUSH
6420: LD_VAR 0 5
6424: PPUSH
6425: LD_INT 3
6427: PUSH
6428: LD_INT 54
6430: PUSH
6431: EMPTY
6432: LIST
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PPUSH
6438: CALL_OW 72
6442: PUSH
6443: FOR_IN
6444: IFFALSE 6492
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
6446: LD_VAR 0 2
6450: PPUSH
6451: LD_INT 22
6453: PUSH
6454: LD_EXP 8
6458: PUSH
6459: EMPTY
6460: LIST
6461: LIST
6462: PUSH
6463: LD_INT 30
6465: PUSH
6466: LD_INT 1
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PPUSH
6477: CALL_OW 69
6481: PUSH
6482: LD_INT 1
6484: ARRAY
6485: PPUSH
6486: CALL_OW 120
6490: GO 6443
6492: POP
6493: POP
// end ; p := 1 ;
6494: LD_ADDR_VAR 0 7
6498: PUSH
6499: LD_INT 1
6501: ST_TO_ADDR
// if b and eng then
6502: LD_VAR 0 6
6506: PUSH
6507: LD_VAR 0 5
6511: AND
6512: IFFALSE 6646
// for j in eng do
6514: LD_ADDR_VAR 0 2
6518: PUSH
6519: LD_VAR 0 5
6523: PUSH
6524: FOR_IN
6525: IFFALSE 6644
// begin if IsInUnit ( j ) then
6527: LD_VAR 0 2
6531: PPUSH
6532: CALL_OW 310
6536: IFFALSE 6549
// ComExitBuilding ( j ) else
6538: LD_VAR 0 2
6542: PPUSH
6543: CALL_OW 122
6547: GO 6642
// if not HasTask ( j ) and GetLives ( j ) > 750 then
6549: LD_VAR 0 2
6553: PPUSH
6554: CALL_OW 314
6558: NOT
6559: PUSH
6560: LD_VAR 0 2
6564: PPUSH
6565: CALL_OW 256
6569: PUSH
6570: LD_INT 750
6572: GREATER
6573: AND
6574: IFFALSE 6642
// begin if b > p then
6576: LD_VAR 0 6
6580: PUSH
6581: LD_VAR 0 7
6585: GREATER
6586: IFFALSE 6624
// begin ComRepairBuilding ( j , b [ p ] ) ;
6588: LD_VAR 0 2
6592: PPUSH
6593: LD_VAR 0 6
6597: PUSH
6598: LD_VAR 0 7
6602: ARRAY
6603: PPUSH
6604: CALL_OW 130
// p := p + 1 ;
6608: LD_ADDR_VAR 0 7
6612: PUSH
6613: LD_VAR 0 7
6617: PUSH
6618: LD_INT 1
6620: PLUS
6621: ST_TO_ADDR
// end else
6622: GO 6642
// ComRepairBuilding ( j , b [ 1 ] ) ;
6624: LD_VAR 0 2
6628: PPUSH
6629: LD_VAR 0 6
6633: PUSH
6634: LD_INT 1
6636: ARRAY
6637: PPUSH
6638: CALL_OW 130
// end ; end ;
6642: GO 6524
6644: POP
6645: POP
// if h and sci then
6646: LD_VAR 0 3
6650: PUSH
6651: LD_VAR 0 4
6655: AND
6656: IFFALSE 6795
// for i in h do
6658: LD_ADDR_VAR 0 1
6662: PUSH
6663: LD_VAR 0 3
6667: PUSH
6668: FOR_IN
6669: IFFALSE 6793
// if GetDistUnitXY ( i , 108 , 42 ) > 10 then
6671: LD_VAR 0 1
6675: PPUSH
6676: LD_INT 108
6678: PPUSH
6679: LD_INT 42
6681: PPUSH
6682: CALL_OW 297
6686: PUSH
6687: LD_INT 10
6689: GREATER
6690: IFFALSE 6709
// ComMoveXY ( i , 108 , 42 ) else
6692: LD_VAR 0 1
6696: PPUSH
6697: LD_INT 108
6699: PPUSH
6700: LD_INT 42
6702: PPUSH
6703: CALL_OW 111
6707: GO 6791
// begin for j in sci do
6709: LD_ADDR_VAR 0 2
6713: PUSH
6714: LD_VAR 0 4
6718: PUSH
6719: FOR_IN
6720: IFFALSE 6789
// begin if GetTag ( j ) > 0 then
6722: LD_VAR 0 2
6726: PPUSH
6727: CALL_OW 110
6731: PUSH
6732: LD_INT 0
6734: GREATER
6735: IFFALSE 6739
// continue ;
6737: GO 6719
// if IsInUnit ( j ) then
6739: LD_VAR 0 2
6743: PPUSH
6744: CALL_OW 310
6748: IFFALSE 6761
// ComExitBuilding ( j ) else
6750: LD_VAR 0 2
6754: PPUSH
6755: CALL_OW 122
6759: GO 6787
// if not HasTask ( j ) then
6761: LD_VAR 0 2
6765: PPUSH
6766: CALL_OW 314
6770: NOT
6771: IFFALSE 6787
// ComHeal ( j , h ) ;
6773: LD_VAR 0 2
6777: PPUSH
6778: LD_VAR 0 3
6782: PPUSH
6783: CALL_OW 128
// end ;
6787: GO 6719
6789: POP
6790: POP
// end ;
6791: GO 6668
6793: POP
6794: POP
// end ;
6795: PPOPN 7
6797: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 155 , 88 ) and GetBType ( HexInfo ( 155 , 88 ) = b_siberite_mine ) do var sci , p ;
6798: LD_INT 155
6800: PPUSH
6801: LD_INT 88
6803: PPUSH
6804: CALL_OW 428
6808: PUSH
6809: LD_INT 155
6811: PPUSH
6812: LD_INT 88
6814: PPUSH
6815: CALL_OW 428
6819: PUSH
6820: LD_INT 30
6822: EQUAL
6823: PPUSH
6824: CALL_OW 266
6828: AND
6829: IFFALSE 7078
6831: GO 6833
6833: DISABLE
6834: LD_INT 0
6836: PPUSH
6837: PPUSH
// begin p := GetSide ( HexInfo ( 155 , 88 ) ) ;
6838: LD_ADDR_VAR 0 2
6842: PUSH
6843: LD_INT 155
6845: PPUSH
6846: LD_INT 88
6848: PPUSH
6849: CALL_OW 428
6853: PPUSH
6854: CALL_OW 255
6858: ST_TO_ADDR
// Wait ( [ 5 5$30 , 6 6$33 , 6 6$21 , 8 8$44 , 9 9$31 , 4 4$33 , 9 9$01 , 5 5$01 ] [ p ] ) ;
6859: LD_INT 11550
6861: PUSH
6862: LD_INT 13755
6864: PUSH
6865: LD_INT 13335
6867: PUSH
6868: LD_INT 18340
6870: PUSH
6871: LD_INT 19985
6873: PUSH
6874: LD_INT 9555
6876: PUSH
6877: LD_INT 18935
6879: PUSH
6880: LD_INT 10535
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: PUSH
6893: LD_VAR 0 2
6897: ARRAY
6898: PPUSH
6899: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
6903: LD_INT 22
6905: PUSH
6906: LD_EXP 8
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 25
6917: PUSH
6918: LD_INT 4
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PPUSH
6929: CALL_OW 69
6933: PUSH
6934: LD_INT 0
6936: EQUAL
6937: IFFALSE 6941
// exit ;
6939: GO 7078
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ 1 ] ;
6941: LD_ADDR_VAR 0 1
6945: PUSH
6946: LD_INT 22
6948: PUSH
6949: LD_EXP 8
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 25
6960: PUSH
6961: LD_INT 4
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PPUSH
6972: CALL_OW 69
6976: PUSH
6977: LD_INT 1
6979: ARRAY
6980: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
6981: LD_VAR 0 1
6985: PPUSH
6986: LD_INT 1
6988: PPUSH
6989: CALL_OW 109
// ComExitBuilding ( sci ) ;
6993: LD_VAR 0 1
6997: PPUSH
6998: CALL_OW 122
// AddComMoveXY ( sci , 126 , 59 ) ;
7002: LD_VAR 0 1
7006: PPUSH
7007: LD_INT 126
7009: PPUSH
7010: LD_INT 59
7012: PPUSH
7013: CALL_OW 171
// if p mod 2 = 0 then
7017: LD_VAR 0 2
7021: PUSH
7022: LD_INT 2
7024: MOD
7025: PUSH
7026: LD_INT 0
7028: EQUAL
7029: IFFALSE 7048
// AddComMoveXY ( sci , 148 , 66 ) else
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 148
7038: PPUSH
7039: LD_INT 66
7041: PPUSH
7042: CALL_OW 171
7046: GO 7063
// AddComMoveXY ( sci , 135 , 84 ) ;
7048: LD_VAR 0 1
7052: PPUSH
7053: LD_INT 135
7055: PPUSH
7056: LD_INT 84
7058: PPUSH
7059: CALL_OW 171
// AddComContaminate ( sci , 155 , 88 ) ;
7063: LD_VAR 0 1
7067: PPUSH
7068: LD_INT 155
7070: PPUSH
7071: LD_INT 88
7073: PPUSH
7074: CALL_OW 218
// end ;
7078: PPOPN 2
7080: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 33 , 10 ) and GetBType ( HexInfo ( 33 , 10 ) = b_siberite_mine ) do var sci , p ;
7081: LD_INT 33
7083: PPUSH
7084: LD_INT 10
7086: PPUSH
7087: CALL_OW 428
7091: PUSH
7092: LD_INT 33
7094: PPUSH
7095: LD_INT 10
7097: PPUSH
7098: CALL_OW 428
7102: PUSH
7103: LD_INT 30
7105: EQUAL
7106: PPUSH
7107: CALL_OW 266
7111: AND
7112: IFFALSE 7363
7114: GO 7116
7116: DISABLE
7117: LD_INT 0
7119: PPUSH
7120: PPUSH
// begin p := GetSide ( HexInfo ( 33 , 10 ) ) ;
7121: LD_ADDR_VAR 0 2
7125: PUSH
7126: LD_INT 33
7128: PPUSH
7129: LD_INT 10
7131: PPUSH
7132: CALL_OW 428
7136: PPUSH
7137: CALL_OW 255
7141: ST_TO_ADDR
// Wait ( [ 4 4$30 , 5 5$33 , 3 3$21 , 4 4$44 , 3 3$31 , 5 5$33 , 3 3$01 , 8 8$01 ] [ p ] ) ;
7142: LD_INT 9450
7144: PUSH
7145: LD_INT 11655
7147: PUSH
7148: LD_INT 7035
7150: PUSH
7151: LD_INT 9940
7153: PUSH
7154: LD_INT 7385
7156: PUSH
7157: LD_INT 11655
7159: PUSH
7160: LD_INT 6335
7162: PUSH
7163: LD_INT 16835
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: LD_VAR 0 2
7180: ARRAY
7181: PPUSH
7182: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
7186: LD_INT 22
7188: PUSH
7189: LD_EXP 8
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 25
7200: PUSH
7201: LD_INT 4
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PPUSH
7212: CALL_OW 69
7216: PUSH
7217: LD_INT 0
7219: EQUAL
7220: IFFALSE 7224
// exit ;
7222: GO 7363
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ sci ] ;
7224: LD_ADDR_VAR 0 1
7228: PUSH
7229: LD_INT 22
7231: PUSH
7232: LD_EXP 8
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 25
7243: PUSH
7244: LD_INT 4
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PPUSH
7255: CALL_OW 69
7259: PUSH
7260: LD_VAR 0 1
7264: ARRAY
7265: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
7266: LD_VAR 0 1
7270: PPUSH
7271: LD_INT 1
7273: PPUSH
7274: CALL_OW 109
// ComExitBuilding ( sci ) ;
7278: LD_VAR 0 1
7282: PPUSH
7283: CALL_OW 122
// AddComMoveXY ( sci , 67 , 13 ) ;
7287: LD_VAR 0 1
7291: PPUSH
7292: LD_INT 67
7294: PPUSH
7295: LD_INT 13
7297: PPUSH
7298: CALL_OW 171
// if p mod 2 = 0 then
7302: LD_VAR 0 2
7306: PUSH
7307: LD_INT 2
7309: MOD
7310: PUSH
7311: LD_INT 0
7313: EQUAL
7314: IFFALSE 7333
// AddComMoveXY ( sci , 37 , 3 ) else
7316: LD_VAR 0 1
7320: PPUSH
7321: LD_INT 37
7323: PPUSH
7324: LD_INT 3
7326: PPUSH
7327: CALL_OW 171
7331: GO 7348
// AddComMoveXY ( sci , 45 , 20 ) ;
7333: LD_VAR 0 1
7337: PPUSH
7338: LD_INT 45
7340: PPUSH
7341: LD_INT 20
7343: PPUSH
7344: CALL_OW 171
// AddComContaminate ( sci , 33 , 10 ) ;
7348: LD_VAR 0 1
7352: PPUSH
7353: LD_INT 33
7355: PPUSH
7356: LD_INT 10
7358: PPUSH
7359: CALL_OW 218
// end ;
7363: PPOPN 2
7365: END
// every 0 0$01 trigger mines_list do var i , p ;
7366: LD_EXP 17
7370: IFFALSE 7596
7372: GO 7374
7374: DISABLE
7375: LD_INT 0
7377: PPUSH
7378: PPUSH
// begin enable ;
7379: ENABLE
// p := 1 ;
7380: LD_ADDR_VAR 0 2
7384: PUSH
7385: LD_INT 1
7387: ST_TO_ADDR
// for i = 1 to mines_list / 2 do
7388: LD_ADDR_VAR 0 1
7392: PUSH
7393: DOUBLE
7394: LD_INT 1
7396: DEC
7397: ST_TO_ADDR
7398: LD_EXP 17
7402: PUSH
7403: LD_INT 2
7405: DIVREAL
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7594
// begin if HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) > 0 then
7410: LD_EXP 17
7414: PUSH
7415: LD_VAR 0 2
7419: ARRAY
7420: PPUSH
7421: LD_EXP 17
7425: PUSH
7426: LD_VAR 0 2
7430: PUSH
7431: LD_INT 1
7433: PLUS
7434: ARRAY
7435: PPUSH
7436: CALL_OW 428
7440: PUSH
7441: LD_INT 0
7443: GREATER
7444: IFFALSE 7578
// if GetSide ( HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) ) <> bot_side then
7446: LD_EXP 17
7450: PUSH
7451: LD_VAR 0 2
7455: ARRAY
7456: PPUSH
7457: LD_EXP 17
7461: PUSH
7462: LD_VAR 0 2
7466: PUSH
7467: LD_INT 1
7469: PLUS
7470: ARRAY
7471: PPUSH
7472: CALL_OW 428
7476: PPUSH
7477: CALL_OW 255
7481: PUSH
7482: LD_EXP 8
7486: NONEQUAL
7487: IFFALSE 7578
// begin LaunchMineAtPos ( mines_list [ p ] , mines_list [ p + 1 ] , bot_side ) ;
7489: LD_EXP 17
7493: PUSH
7494: LD_VAR 0 2
7498: ARRAY
7499: PPUSH
7500: LD_EXP 17
7504: PUSH
7505: LD_VAR 0 2
7509: PUSH
7510: LD_INT 1
7512: PLUS
7513: ARRAY
7514: PPUSH
7515: LD_EXP 8
7519: PPUSH
7520: CALL_OW 456
// mines_list := Delete ( mines_list , p ) ;
7524: LD_ADDR_EXP 17
7528: PUSH
7529: LD_EXP 17
7533: PPUSH
7534: LD_VAR 0 2
7538: PPUSH
7539: CALL_OW 3
7543: ST_TO_ADDR
// mines_list := Delete ( mines_list , p ) ;
7544: LD_ADDR_EXP 17
7548: PUSH
7549: LD_EXP 17
7553: PPUSH
7554: LD_VAR 0 2
7558: PPUSH
7559: CALL_OW 3
7563: ST_TO_ADDR
// p := p - 2 ;
7564: LD_ADDR_VAR 0 2
7568: PUSH
7569: LD_VAR 0 2
7573: PUSH
7574: LD_INT 2
7576: MINUS
7577: ST_TO_ADDR
// end ; p := p + 2 ;
7578: LD_ADDR_VAR 0 2
7582: PUSH
7583: LD_VAR 0 2
7587: PUSH
7588: LD_INT 2
7590: PLUS
7591: ST_TO_ADDR
// end ;
7592: GO 7407
7594: POP
7595: POP
// end ;
7596: PPOPN 2
7598: END
// every 0 0$03 do var i , p , skr , filter , dep ;
7599: GO 7601
7601: DISABLE
7602: LD_INT 0
7604: PPUSH
7605: PPUSH
7606: PPUSH
7607: PPUSH
7608: PPUSH
// begin enable ;
7609: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , bot_side ] , [ f_class , class_apeman_engineer ] ] ) ;
7610: LD_ADDR_VAR 0 4
7614: PUSH
7615: LD_INT 50
7617: PUSH
7618: EMPTY
7619: LIST
7620: PUSH
7621: LD_INT 22
7623: PUSH
7624: LD_EXP 8
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: LD_INT 25
7635: PUSH
7636: LD_INT 16
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: LIST
7647: PPUSH
7648: CALL_OW 69
7652: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7653: LD_ADDR_VAR 0 5
7657: PUSH
7658: LD_INT 22
7660: PUSH
7661: LD_EXP 8
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PUSH
7670: LD_INT 2
7672: PUSH
7673: LD_INT 30
7675: PUSH
7676: LD_INT 0
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 30
7685: PUSH
7686: LD_INT 1
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 69
7706: ST_TO_ADDR
// skr := GetListOfCratesInArea ( kabul_crates ) ;
7707: LD_ADDR_VAR 0 3
7711: PUSH
7712: LD_INT 13
7714: PPUSH
7715: CALL_OW 435
7719: ST_TO_ADDR
// if filter and skr then
7720: LD_VAR 0 4
7724: PUSH
7725: LD_VAR 0 3
7729: AND
7730: IFFALSE 7805
// for i = 1 to filter do
7732: LD_ADDR_VAR 0 1
7736: PUSH
7737: DOUBLE
7738: LD_INT 1
7740: DEC
7741: ST_TO_ADDR
7742: LD_VAR 0 4
7746: PUSH
7747: FOR_TO
7748: IFFALSE 7803
// if not HasTask ( filter [ i ] ) then
7750: LD_VAR 0 4
7754: PUSH
7755: LD_VAR 0 1
7759: ARRAY
7760: PPUSH
7761: CALL_OW 314
7765: NOT
7766: IFFALSE 7801
// ComCollect ( filter [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
7768: LD_VAR 0 4
7772: PUSH
7773: LD_VAR 0 1
7777: ARRAY
7778: PPUSH
7779: LD_VAR 0 3
7783: PUSH
7784: LD_INT 1
7786: ARRAY
7787: PPUSH
7788: LD_VAR 0 3
7792: PUSH
7793: LD_INT 2
7795: ARRAY
7796: PPUSH
7797: CALL_OW 117
7801: GO 7747
7803: POP
7804: POP
// end ; end_of_file
7805: PPOPN 5
7807: END
// on UnitDestroyed ( un ) do var shooter , cl , s , n ;
7808: LD_INT 0
7810: PPUSH
7811: PPUSH
7812: PPUSH
7813: PPUSH
// begin if un in attackers then
7814: LD_VAR 0 1
7818: PUSH
7819: LD_EXP 20
7823: IN
7824: IFFALSE 7842
// attackers := attackers diff un ;
7826: LD_ADDR_EXP 20
7830: PUSH
7831: LD_EXP 20
7835: PUSH
7836: LD_VAR 0 1
7840: DIFF
7841: ST_TO_ADDR
// if GetSide ( un ) <> bot_side and GetSide ( un ) > 0 and un in FilterAllUnits ( [ f_type , unit_human ] ) then
7842: LD_VAR 0 1
7846: PPUSH
7847: CALL_OW 255
7851: PUSH
7852: LD_EXP 8
7856: NONEQUAL
7857: PUSH
7858: LD_VAR 0 1
7862: PPUSH
7863: CALL_OW 255
7867: PUSH
7868: LD_INT 0
7870: GREATER
7871: AND
7872: PUSH
7873: LD_VAR 0 1
7877: PUSH
7878: LD_INT 21
7880: PUSH
7881: LD_INT 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PPUSH
7888: CALL_OW 69
7892: IN
7893: AND
7894: IFFALSE 8078
// begin if respawning_time_min > 0 0$00 then
7896: LD_EXP 13
7900: PUSH
7901: LD_INT 0
7903: GREATER
7904: IFFALSE 8078
// begin s := GetSide ( un ) ;
7906: LD_ADDR_VAR 0 4
7910: PUSH
7911: LD_VAR 0 1
7915: PPUSH
7916: CALL_OW 255
7920: ST_TO_ADDR
// n := GetNation ( un ) ;
7921: LD_ADDR_VAR 0 5
7925: PUSH
7926: LD_VAR 0 1
7930: PPUSH
7931: CALL_OW 248
7935: ST_TO_ADDR
// cl := GetClass ( un ) ;
7936: LD_ADDR_VAR 0 3
7940: PUSH
7941: LD_VAR 0 1
7945: PPUSH
7946: CALL_OW 257
7950: ST_TO_ADDR
// wait ( respawning_time_min ) ;
7951: LD_EXP 13
7955: PPUSH
7956: CALL_OW 67
// wait ( respawning_time_max - ( 0 0$10 * tick mod 10 + 1 ) * cl ) ;
7960: LD_EXP 14
7964: PUSH
7965: LD_INT 350
7967: PUSH
7968: LD_OWVAR 1
7972: MUL
7973: PUSH
7974: LD_INT 10
7976: MOD
7977: PUSH
7978: LD_INT 1
7980: PLUS
7981: PUSH
7982: LD_VAR 0 3
7986: MUL
7987: MINUS
7988: PPUSH
7989: CALL_OW 67
// uc_side := s ;
7993: LD_ADDR_OWVAR 20
7997: PUSH
7998: LD_VAR 0 4
8002: ST_TO_ADDR
// uc_nation := n ;
8003: LD_ADDR_OWVAR 21
8007: PUSH
8008: LD_VAR 0 5
8012: ST_TO_ADDR
// PrepareHuman ( false , cl , skill_level - 2 ) ;
8013: LD_INT 0
8015: PPUSH
8016: LD_VAR 0 3
8020: PPUSH
8021: LD_EXP 11
8025: PUSH
8026: LD_INT 2
8028: MINUS
8029: PPUSH
8030: CALL_OW 380
// PlaceUnitArea ( CreateHuman , [ cr1 , cr3 , cr2 , cr3 ] [ ( cl mod 4 ) + 1 ] , true ) ;
8034: CALL_OW 44
8038: PPUSH
8039: LD_INT 17
8041: PUSH
8042: LD_INT 19
8044: PUSH
8045: LD_INT 18
8047: PUSH
8048: LD_INT 19
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: LD_VAR 0 3
8061: PUSH
8062: LD_INT 4
8064: MOD
8065: PUSH
8066: LD_INT 1
8068: PLUS
8069: ARRAY
8070: PPUSH
8071: LD_INT 1
8073: PPUSH
8074: CALL_OW 49
// end ; end ; end ;
8078: PPOPN 5
8080: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = bot_side and un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_type , unit_vehicle ] ] ) then
8081: LD_VAR 0 1
8085: PPUSH
8086: CALL_OW 255
8090: PUSH
8091: LD_EXP 8
8095: EQUAL
8096: PUSH
8097: LD_VAR 0 1
8101: PUSH
8102: LD_INT 33
8104: PUSH
8105: LD_INT 2
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 21
8114: PUSH
8115: LD_INT 2
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PPUSH
8126: CALL_OW 69
8130: IN
8131: AND
8132: IFFALSE 8255
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> bot_side then
8134: LD_OWVAR 3
8138: PUSH
8139: LD_VAR 0 1
8143: DIFF
8144: PPUSH
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 74
8154: PPUSH
8155: CALL_OW 255
8159: PUSH
8160: LD_EXP 8
8164: NONEQUAL
8165: IFFALSE 8255
// begin Wait ( 0 0$1.3 ) ;
8167: LD_INT 46
8169: PPUSH
8170: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 250
8183: PPUSH
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 251
8193: PPUSH
8194: LD_INT 1
8196: PPUSH
8197: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8201: LD_VAR 0 1
8205: PPUSH
8206: CALL_OW 250
8210: PPUSH
8211: LD_VAR 0 1
8215: PPUSH
8216: CALL_OW 251
8220: PPUSH
8221: LD_INT 1
8223: PPUSH
8224: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8228: LD_VAR 0 1
8232: PPUSH
8233: CALL_OW 250
8237: PPUSH
8238: LD_VAR 0 1
8242: PPUSH
8243: CALL_OW 251
8247: PPUSH
8248: LD_INT 1
8250: PPUSH
8251: CALL_OW 453
// end ; if GetControl ( un ) = control_remote then
8255: LD_VAR 0 1
8259: PPUSH
8260: CALL_OW 263
8264: PUSH
8265: LD_INT 2
8267: EQUAL
8268: IFFALSE 8279
// ComUnlink ( un ) ;
8270: LD_VAR 0 1
8274: PPUSH
8275: CALL_OW 136
// end ;
8279: PPOPN 1
8281: END
// on VehicleConstructed ( veh , b ) do begin if GetSide ( veh ) = bot_side then
8282: LD_VAR 0 1
8286: PPUSH
8287: CALL_OW 255
8291: PUSH
8292: LD_EXP 8
8296: EQUAL
8297: IFFALSE 8328
// attackers := Insert ( attackers , attackers + 1 , veh ) ;
8299: LD_ADDR_EXP 20
8303: PUSH
8304: LD_EXP 20
8308: PPUSH
8309: LD_EXP 20
8313: PUSH
8314: LD_INT 1
8316: PLUS
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL_OW 2
8327: ST_TO_ADDR
// end ;
8328: PPOPN 2
8330: END
// on LeaveBuilding ( b , un ) do var i , arm ;
8331: LD_INT 0
8333: PPUSH
8334: PPUSH
// begin if GetSide ( b ) = bot_side and GetBType ( b ) = b_bunker then
8335: LD_VAR 0 1
8339: PPUSH
8340: CALL_OW 255
8344: PUSH
8345: LD_EXP 8
8349: EQUAL
8350: PUSH
8351: LD_VAR 0 1
8355: PPUSH
8356: CALL_OW 266
8360: PUSH
8361: LD_INT 32
8363: EQUAL
8364: AND
8365: IFFALSE 8463
// begin arm := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_barracks ] ] ) ;
8367: LD_ADDR_VAR 0 4
8371: PUSH
8372: LD_INT 22
8374: PUSH
8375: LD_EXP 8
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PUSH
8384: LD_INT 30
8386: PUSH
8387: LD_INT 5
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PPUSH
8398: CALL_OW 69
8402: ST_TO_ADDR
// for i in arm do
8403: LD_ADDR_VAR 0 3
8407: PUSH
8408: LD_VAR 0 4
8412: PUSH
8413: FOR_IN
8414: IFFALSE 8461
// if UnitsInside ( i ) < 6 then
8416: LD_VAR 0 3
8420: PPUSH
8421: CALL_OW 313
8425: PUSH
8426: LD_INT 6
8428: LESS
8429: IFFALSE 8459
// begin ComEnterUnit ( un , i ) ;
8431: LD_VAR 0 2
8435: PPUSH
8436: LD_VAR 0 3
8440: PPUSH
8441: CALL_OW 120
// AddComChangeProfession ( un , class_mortar ) ;
8445: LD_VAR 0 2
8449: PPUSH
8450: LD_INT 8
8452: PPUSH
8453: CALL_OW 183
// break ;
8457: GO 8461
// end ;
8459: GO 8413
8461: POP
8462: POP
// end ; end ; end_of_file
8463: PPOPN 4
8465: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
8466: LD_VAR 0 1
8470: PUSH
8471: LD_INT 200
8473: DOUBLE
8474: GREATEREQUAL
8475: IFFALSE 8483
8477: LD_INT 299
8479: DOUBLE
8480: LESSEQUAL
8481: IFTRUE 8485
8483: GO 8517
8485: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
8486: LD_VAR 0 1
8490: PPUSH
8491: LD_VAR 0 2
8495: PPUSH
8496: LD_VAR 0 3
8500: PPUSH
8501: LD_VAR 0 4
8505: PPUSH
8506: LD_VAR 0 5
8510: PPUSH
8511: CALL 67433 0 5
8515: GO 8594
8517: LD_INT 300
8519: DOUBLE
8520: GREATEREQUAL
8521: IFFALSE 8529
8523: LD_INT 399
8525: DOUBLE
8526: LESSEQUAL
8527: IFTRUE 8531
8529: GO 8593
8531: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
8532: LD_VAR 0 1
8536: PPUSH
8537: LD_VAR 0 2
8541: PPUSH
8542: LD_VAR 0 3
8546: PPUSH
8547: LD_VAR 0 4
8551: PPUSH
8552: LD_VAR 0 5
8556: PPUSH
8557: LD_VAR 0 6
8561: PPUSH
8562: LD_VAR 0 7
8566: PPUSH
8567: LD_VAR 0 8
8571: PPUSH
8572: LD_VAR 0 9
8576: PPUSH
8577: LD_VAR 0 10
8581: PPUSH
8582: LD_VAR 0 11
8586: PPUSH
8587: CALL 63758 0 11
8591: GO 8594
8593: POP
// end ;
8594: PPOPN 11
8596: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
8597: LD_VAR 0 1
8601: PPUSH
8602: LD_VAR 0 2
8606: PPUSH
8607: LD_VAR 0 3
8611: PPUSH
8612: LD_VAR 0 4
8616: PPUSH
8617: LD_VAR 0 5
8621: PPUSH
8622: CALL 67169 0 5
// end ; end_of_file
8626: PPOPN 5
8628: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8629: LD_INT 0
8631: PPUSH
8632: PPUSH
// if exist_mode then
8633: LD_VAR 0 2
8637: IFFALSE 8662
// unit := CreateCharacter ( prefix & ident ) else
8639: LD_ADDR_VAR 0 5
8643: PUSH
8644: LD_VAR 0 3
8648: PUSH
8649: LD_VAR 0 1
8653: STR
8654: PPUSH
8655: CALL_OW 34
8659: ST_TO_ADDR
8660: GO 8677
// unit := NewCharacter ( ident ) ;
8662: LD_ADDR_VAR 0 5
8666: PUSH
8667: LD_VAR 0 1
8671: PPUSH
8672: CALL_OW 25
8676: ST_TO_ADDR
// result := unit ;
8677: LD_ADDR_VAR 0 4
8681: PUSH
8682: LD_VAR 0 5
8686: ST_TO_ADDR
// end ;
8687: LD_VAR 0 4
8691: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8692: LD_INT 0
8694: PPUSH
8695: PPUSH
// if not side or not nation then
8696: LD_VAR 0 1
8700: NOT
8701: PUSH
8702: LD_VAR 0 2
8706: NOT
8707: OR
8708: IFFALSE 8712
// exit ;
8710: GO 9480
// case nation of nation_american :
8712: LD_VAR 0 2
8716: PUSH
8717: LD_INT 1
8719: DOUBLE
8720: EQUAL
8721: IFTRUE 8725
8723: GO 8939
8725: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8726: LD_ADDR_VAR 0 4
8730: PUSH
8731: LD_INT 35
8733: PUSH
8734: LD_INT 45
8736: PUSH
8737: LD_INT 46
8739: PUSH
8740: LD_INT 47
8742: PUSH
8743: LD_INT 82
8745: PUSH
8746: LD_INT 83
8748: PUSH
8749: LD_INT 84
8751: PUSH
8752: LD_INT 85
8754: PUSH
8755: LD_INT 86
8757: PUSH
8758: LD_INT 1
8760: PUSH
8761: LD_INT 2
8763: PUSH
8764: LD_INT 6
8766: PUSH
8767: LD_INT 15
8769: PUSH
8770: LD_INT 16
8772: PUSH
8773: LD_INT 7
8775: PUSH
8776: LD_INT 12
8778: PUSH
8779: LD_INT 13
8781: PUSH
8782: LD_INT 10
8784: PUSH
8785: LD_INT 14
8787: PUSH
8788: LD_INT 20
8790: PUSH
8791: LD_INT 21
8793: PUSH
8794: LD_INT 22
8796: PUSH
8797: LD_INT 25
8799: PUSH
8800: LD_INT 32
8802: PUSH
8803: LD_INT 27
8805: PUSH
8806: LD_INT 36
8808: PUSH
8809: LD_INT 69
8811: PUSH
8812: LD_INT 39
8814: PUSH
8815: LD_INT 34
8817: PUSH
8818: LD_INT 40
8820: PUSH
8821: LD_INT 48
8823: PUSH
8824: LD_INT 49
8826: PUSH
8827: LD_INT 50
8829: PUSH
8830: LD_INT 51
8832: PUSH
8833: LD_INT 52
8835: PUSH
8836: LD_INT 53
8838: PUSH
8839: LD_INT 54
8841: PUSH
8842: LD_INT 55
8844: PUSH
8845: LD_INT 56
8847: PUSH
8848: LD_INT 57
8850: PUSH
8851: LD_INT 58
8853: PUSH
8854: LD_INT 59
8856: PUSH
8857: LD_INT 60
8859: PUSH
8860: LD_INT 61
8862: PUSH
8863: LD_INT 62
8865: PUSH
8866: LD_INT 80
8868: PUSH
8869: LD_INT 82
8871: PUSH
8872: LD_INT 83
8874: PUSH
8875: LD_INT 84
8877: PUSH
8878: LD_INT 85
8880: PUSH
8881: LD_INT 86
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: ST_TO_ADDR
8937: GO 9404
8939: LD_INT 2
8941: DOUBLE
8942: EQUAL
8943: IFTRUE 8947
8945: GO 9173
8947: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
8948: LD_ADDR_VAR 0 4
8952: PUSH
8953: LD_INT 35
8955: PUSH
8956: LD_INT 45
8958: PUSH
8959: LD_INT 46
8961: PUSH
8962: LD_INT 47
8964: PUSH
8965: LD_INT 82
8967: PUSH
8968: LD_INT 83
8970: PUSH
8971: LD_INT 84
8973: PUSH
8974: LD_INT 85
8976: PUSH
8977: LD_INT 87
8979: PUSH
8980: LD_INT 70
8982: PUSH
8983: LD_INT 1
8985: PUSH
8986: LD_INT 11
8988: PUSH
8989: LD_INT 3
8991: PUSH
8992: LD_INT 4
8994: PUSH
8995: LD_INT 5
8997: PUSH
8998: LD_INT 6
9000: PUSH
9001: LD_INT 15
9003: PUSH
9004: LD_INT 18
9006: PUSH
9007: LD_INT 7
9009: PUSH
9010: LD_INT 17
9012: PUSH
9013: LD_INT 8
9015: PUSH
9016: LD_INT 20
9018: PUSH
9019: LD_INT 21
9021: PUSH
9022: LD_INT 22
9024: PUSH
9025: LD_INT 72
9027: PUSH
9028: LD_INT 26
9030: PUSH
9031: LD_INT 69
9033: PUSH
9034: LD_INT 39
9036: PUSH
9037: LD_INT 40
9039: PUSH
9040: LD_INT 41
9042: PUSH
9043: LD_INT 42
9045: PUSH
9046: LD_INT 43
9048: PUSH
9049: LD_INT 48
9051: PUSH
9052: LD_INT 49
9054: PUSH
9055: LD_INT 50
9057: PUSH
9058: LD_INT 51
9060: PUSH
9061: LD_INT 52
9063: PUSH
9064: LD_INT 53
9066: PUSH
9067: LD_INT 54
9069: PUSH
9070: LD_INT 55
9072: PUSH
9073: LD_INT 56
9075: PUSH
9076: LD_INT 60
9078: PUSH
9079: LD_INT 61
9081: PUSH
9082: LD_INT 62
9084: PUSH
9085: LD_INT 66
9087: PUSH
9088: LD_INT 67
9090: PUSH
9091: LD_INT 68
9093: PUSH
9094: LD_INT 81
9096: PUSH
9097: LD_INT 82
9099: PUSH
9100: LD_INT 83
9102: PUSH
9103: LD_INT 84
9105: PUSH
9106: LD_INT 85
9108: PUSH
9109: LD_INT 87
9111: PUSH
9112: LD_INT 88
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: ST_TO_ADDR
9171: GO 9404
9173: LD_INT 3
9175: DOUBLE
9176: EQUAL
9177: IFTRUE 9181
9179: GO 9403
9181: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9182: LD_ADDR_VAR 0 4
9186: PUSH
9187: LD_INT 46
9189: PUSH
9190: LD_INT 47
9192: PUSH
9193: LD_INT 1
9195: PUSH
9196: LD_INT 2
9198: PUSH
9199: LD_INT 82
9201: PUSH
9202: LD_INT 83
9204: PUSH
9205: LD_INT 84
9207: PUSH
9208: LD_INT 85
9210: PUSH
9211: LD_INT 86
9213: PUSH
9214: LD_INT 11
9216: PUSH
9217: LD_INT 9
9219: PUSH
9220: LD_INT 20
9222: PUSH
9223: LD_INT 19
9225: PUSH
9226: LD_INT 21
9228: PUSH
9229: LD_INT 24
9231: PUSH
9232: LD_INT 22
9234: PUSH
9235: LD_INT 25
9237: PUSH
9238: LD_INT 28
9240: PUSH
9241: LD_INT 29
9243: PUSH
9244: LD_INT 30
9246: PUSH
9247: LD_INT 31
9249: PUSH
9250: LD_INT 37
9252: PUSH
9253: LD_INT 38
9255: PUSH
9256: LD_INT 32
9258: PUSH
9259: LD_INT 27
9261: PUSH
9262: LD_INT 33
9264: PUSH
9265: LD_INT 69
9267: PUSH
9268: LD_INT 39
9270: PUSH
9271: LD_INT 34
9273: PUSH
9274: LD_INT 40
9276: PUSH
9277: LD_INT 71
9279: PUSH
9280: LD_INT 23
9282: PUSH
9283: LD_INT 44
9285: PUSH
9286: LD_INT 48
9288: PUSH
9289: LD_INT 49
9291: PUSH
9292: LD_INT 50
9294: PUSH
9295: LD_INT 51
9297: PUSH
9298: LD_INT 52
9300: PUSH
9301: LD_INT 53
9303: PUSH
9304: LD_INT 54
9306: PUSH
9307: LD_INT 55
9309: PUSH
9310: LD_INT 56
9312: PUSH
9313: LD_INT 57
9315: PUSH
9316: LD_INT 58
9318: PUSH
9319: LD_INT 59
9321: PUSH
9322: LD_INT 63
9324: PUSH
9325: LD_INT 64
9327: PUSH
9328: LD_INT 65
9330: PUSH
9331: LD_INT 82
9333: PUSH
9334: LD_INT 83
9336: PUSH
9337: LD_INT 84
9339: PUSH
9340: LD_INT 85
9342: PUSH
9343: LD_INT 86
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: ST_TO_ADDR
9401: GO 9404
9403: POP
// if state > - 1 and state < 3 then
9404: LD_VAR 0 3
9408: PUSH
9409: LD_INT 1
9411: NEG
9412: GREATER
9413: PUSH
9414: LD_VAR 0 3
9418: PUSH
9419: LD_INT 3
9421: LESS
9422: AND
9423: IFFALSE 9480
// for i in result do
9425: LD_ADDR_VAR 0 5
9429: PUSH
9430: LD_VAR 0 4
9434: PUSH
9435: FOR_IN
9436: IFFALSE 9478
// if GetTech ( i , side ) <> state then
9438: LD_VAR 0 5
9442: PPUSH
9443: LD_VAR 0 1
9447: PPUSH
9448: CALL_OW 321
9452: PUSH
9453: LD_VAR 0 3
9457: NONEQUAL
9458: IFFALSE 9476
// result := result diff i ;
9460: LD_ADDR_VAR 0 4
9464: PUSH
9465: LD_VAR 0 4
9469: PUSH
9470: LD_VAR 0 5
9474: DIFF
9475: ST_TO_ADDR
9476: GO 9435
9478: POP
9479: POP
// end ;
9480: LD_VAR 0 4
9484: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9485: LD_INT 0
9487: PPUSH
9488: PPUSH
9489: PPUSH
// result := true ;
9490: LD_ADDR_VAR 0 3
9494: PUSH
9495: LD_INT 1
9497: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9498: LD_ADDR_VAR 0 5
9502: PUSH
9503: LD_VAR 0 2
9507: PPUSH
9508: CALL_OW 480
9512: ST_TO_ADDR
// if not tmp then
9513: LD_VAR 0 5
9517: NOT
9518: IFFALSE 9522
// exit ;
9520: GO 9571
// for i in tmp do
9522: LD_ADDR_VAR 0 4
9526: PUSH
9527: LD_VAR 0 5
9531: PUSH
9532: FOR_IN
9533: IFFALSE 9569
// if GetTech ( i , side ) <> state_researched then
9535: LD_VAR 0 4
9539: PPUSH
9540: LD_VAR 0 1
9544: PPUSH
9545: CALL_OW 321
9549: PUSH
9550: LD_INT 2
9552: NONEQUAL
9553: IFFALSE 9567
// begin result := false ;
9555: LD_ADDR_VAR 0 3
9559: PUSH
9560: LD_INT 0
9562: ST_TO_ADDR
// exit ;
9563: POP
9564: POP
9565: GO 9571
// end ;
9567: GO 9532
9569: POP
9570: POP
// end ;
9571: LD_VAR 0 3
9575: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9576: LD_INT 0
9578: PPUSH
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
9583: PPUSH
9584: PPUSH
9585: PPUSH
9586: PPUSH
9587: PPUSH
9588: PPUSH
9589: PPUSH
9590: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9591: LD_VAR 0 1
9595: NOT
9596: PUSH
9597: LD_VAR 0 1
9601: PPUSH
9602: CALL_OW 257
9606: PUSH
9607: LD_INT 9
9609: NONEQUAL
9610: OR
9611: IFFALSE 9615
// exit ;
9613: GO 10188
// side := GetSide ( unit ) ;
9615: LD_ADDR_VAR 0 9
9619: PUSH
9620: LD_VAR 0 1
9624: PPUSH
9625: CALL_OW 255
9629: ST_TO_ADDR
// tech_space := tech_spacanom ;
9630: LD_ADDR_VAR 0 12
9634: PUSH
9635: LD_INT 29
9637: ST_TO_ADDR
// tech_time := tech_taurad ;
9638: LD_ADDR_VAR 0 13
9642: PUSH
9643: LD_INT 28
9645: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9646: LD_ADDR_VAR 0 11
9650: PUSH
9651: LD_VAR 0 1
9655: PPUSH
9656: CALL_OW 310
9660: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9661: LD_VAR 0 11
9665: PPUSH
9666: CALL_OW 247
9670: PUSH
9671: LD_INT 2
9673: EQUAL
9674: IFFALSE 9678
// exit ;
9676: GO 10188
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9678: LD_ADDR_VAR 0 8
9682: PUSH
9683: LD_INT 81
9685: PUSH
9686: LD_VAR 0 9
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: PUSH
9695: LD_INT 3
9697: PUSH
9698: LD_INT 21
9700: PUSH
9701: LD_INT 3
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PPUSH
9716: CALL_OW 69
9720: ST_TO_ADDR
// if not tmp then
9721: LD_VAR 0 8
9725: NOT
9726: IFFALSE 9730
// exit ;
9728: GO 10188
// if in_unit then
9730: LD_VAR 0 11
9734: IFFALSE 9758
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9736: LD_ADDR_VAR 0 10
9740: PUSH
9741: LD_VAR 0 8
9745: PPUSH
9746: LD_VAR 0 11
9750: PPUSH
9751: CALL_OW 74
9755: ST_TO_ADDR
9756: GO 9778
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9758: LD_ADDR_VAR 0 10
9762: PUSH
9763: LD_VAR 0 8
9767: PPUSH
9768: LD_VAR 0 1
9772: PPUSH
9773: CALL_OW 74
9777: ST_TO_ADDR
// if not enemy then
9778: LD_VAR 0 10
9782: NOT
9783: IFFALSE 9787
// exit ;
9785: GO 10188
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9787: LD_VAR 0 11
9791: PUSH
9792: LD_VAR 0 11
9796: PPUSH
9797: LD_VAR 0 10
9801: PPUSH
9802: CALL_OW 296
9806: PUSH
9807: LD_INT 13
9809: GREATER
9810: AND
9811: PUSH
9812: LD_VAR 0 1
9816: PPUSH
9817: LD_VAR 0 10
9821: PPUSH
9822: CALL_OW 296
9826: PUSH
9827: LD_INT 12
9829: GREATER
9830: OR
9831: IFFALSE 9835
// exit ;
9833: GO 10188
// missile := [ 1 ] ;
9835: LD_ADDR_VAR 0 14
9839: PUSH
9840: LD_INT 1
9842: PUSH
9843: EMPTY
9844: LIST
9845: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9846: LD_VAR 0 9
9850: PPUSH
9851: LD_VAR 0 12
9855: PPUSH
9856: CALL_OW 325
9860: IFFALSE 9889
// missile := Replace ( missile , missile + 1 , 2 ) ;
9862: LD_ADDR_VAR 0 14
9866: PUSH
9867: LD_VAR 0 14
9871: PPUSH
9872: LD_VAR 0 14
9876: PUSH
9877: LD_INT 1
9879: PLUS
9880: PPUSH
9881: LD_INT 2
9883: PPUSH
9884: CALL_OW 1
9888: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9889: LD_VAR 0 9
9893: PPUSH
9894: LD_VAR 0 13
9898: PPUSH
9899: CALL_OW 325
9903: PUSH
9904: LD_VAR 0 10
9908: PPUSH
9909: CALL_OW 255
9913: PPUSH
9914: LD_VAR 0 13
9918: PPUSH
9919: CALL_OW 325
9923: NOT
9924: AND
9925: IFFALSE 9954
// missile := Replace ( missile , missile + 1 , 3 ) ;
9927: LD_ADDR_VAR 0 14
9931: PUSH
9932: LD_VAR 0 14
9936: PPUSH
9937: LD_VAR 0 14
9941: PUSH
9942: LD_INT 1
9944: PLUS
9945: PPUSH
9946: LD_INT 3
9948: PPUSH
9949: CALL_OW 1
9953: ST_TO_ADDR
// if missile < 2 then
9954: LD_VAR 0 14
9958: PUSH
9959: LD_INT 2
9961: LESS
9962: IFFALSE 9966
// exit ;
9964: GO 10188
// x := GetX ( enemy ) ;
9966: LD_ADDR_VAR 0 4
9970: PUSH
9971: LD_VAR 0 10
9975: PPUSH
9976: CALL_OW 250
9980: ST_TO_ADDR
// y := GetY ( enemy ) ;
9981: LD_ADDR_VAR 0 5
9985: PUSH
9986: LD_VAR 0 10
9990: PPUSH
9991: CALL_OW 251
9995: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9996: LD_ADDR_VAR 0 6
10000: PUSH
10001: LD_VAR 0 4
10005: PUSH
10006: LD_INT 1
10008: NEG
10009: PPUSH
10010: LD_INT 1
10012: PPUSH
10013: CALL_OW 12
10017: PLUS
10018: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10019: LD_ADDR_VAR 0 7
10023: PUSH
10024: LD_VAR 0 5
10028: PUSH
10029: LD_INT 1
10031: NEG
10032: PPUSH
10033: LD_INT 1
10035: PPUSH
10036: CALL_OW 12
10040: PLUS
10041: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10042: LD_VAR 0 6
10046: PPUSH
10047: LD_VAR 0 7
10051: PPUSH
10052: CALL_OW 488
10056: NOT
10057: IFFALSE 10079
// begin _x := x ;
10059: LD_ADDR_VAR 0 6
10063: PUSH
10064: LD_VAR 0 4
10068: ST_TO_ADDR
// _y := y ;
10069: LD_ADDR_VAR 0 7
10073: PUSH
10074: LD_VAR 0 5
10078: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10079: LD_ADDR_VAR 0 3
10083: PUSH
10084: LD_INT 1
10086: PPUSH
10087: LD_VAR 0 14
10091: PPUSH
10092: CALL_OW 12
10096: ST_TO_ADDR
// case i of 1 :
10097: LD_VAR 0 3
10101: PUSH
10102: LD_INT 1
10104: DOUBLE
10105: EQUAL
10106: IFTRUE 10110
10108: GO 10127
10110: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10111: LD_VAR 0 1
10115: PPUSH
10116: LD_VAR 0 10
10120: PPUSH
10121: CALL_OW 115
10125: GO 10188
10127: LD_INT 2
10129: DOUBLE
10130: EQUAL
10131: IFTRUE 10135
10133: GO 10157
10135: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10136: LD_VAR 0 1
10140: PPUSH
10141: LD_VAR 0 6
10145: PPUSH
10146: LD_VAR 0 7
10150: PPUSH
10151: CALL_OW 153
10155: GO 10188
10157: LD_INT 3
10159: DOUBLE
10160: EQUAL
10161: IFTRUE 10165
10163: GO 10187
10165: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10166: LD_VAR 0 1
10170: PPUSH
10171: LD_VAR 0 6
10175: PPUSH
10176: LD_VAR 0 7
10180: PPUSH
10181: CALL_OW 154
10185: GO 10188
10187: POP
// end ;
10188: LD_VAR 0 2
10192: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10193: LD_INT 0
10195: PPUSH
10196: PPUSH
10197: PPUSH
10198: PPUSH
10199: PPUSH
10200: PPUSH
// if not unit or not building then
10201: LD_VAR 0 1
10205: NOT
10206: PUSH
10207: LD_VAR 0 2
10211: NOT
10212: OR
10213: IFFALSE 10217
// exit ;
10215: GO 10375
// x := GetX ( building ) ;
10217: LD_ADDR_VAR 0 5
10221: PUSH
10222: LD_VAR 0 2
10226: PPUSH
10227: CALL_OW 250
10231: ST_TO_ADDR
// y := GetY ( building ) ;
10232: LD_ADDR_VAR 0 6
10236: PUSH
10237: LD_VAR 0 2
10241: PPUSH
10242: CALL_OW 251
10246: ST_TO_ADDR
// for i = 0 to 5 do
10247: LD_ADDR_VAR 0 4
10251: PUSH
10252: DOUBLE
10253: LD_INT 0
10255: DEC
10256: ST_TO_ADDR
10257: LD_INT 5
10259: PUSH
10260: FOR_TO
10261: IFFALSE 10373
// begin _x := ShiftX ( x , i , 3 ) ;
10263: LD_ADDR_VAR 0 7
10267: PUSH
10268: LD_VAR 0 5
10272: PPUSH
10273: LD_VAR 0 4
10277: PPUSH
10278: LD_INT 3
10280: PPUSH
10281: CALL_OW 272
10285: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10286: LD_ADDR_VAR 0 8
10290: PUSH
10291: LD_VAR 0 6
10295: PPUSH
10296: LD_VAR 0 4
10300: PPUSH
10301: LD_INT 3
10303: PPUSH
10304: CALL_OW 273
10308: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10309: LD_VAR 0 7
10313: PPUSH
10314: LD_VAR 0 8
10318: PPUSH
10319: CALL_OW 488
10323: NOT
10324: IFFALSE 10328
// continue ;
10326: GO 10260
// if HexInfo ( _x , _y ) = 0 then
10328: LD_VAR 0 7
10332: PPUSH
10333: LD_VAR 0 8
10337: PPUSH
10338: CALL_OW 428
10342: PUSH
10343: LD_INT 0
10345: EQUAL
10346: IFFALSE 10371
// begin ComMoveXY ( unit , _x , _y ) ;
10348: LD_VAR 0 1
10352: PPUSH
10353: LD_VAR 0 7
10357: PPUSH
10358: LD_VAR 0 8
10362: PPUSH
10363: CALL_OW 111
// exit ;
10367: POP
10368: POP
10369: GO 10375
// end ; end ;
10371: GO 10260
10373: POP
10374: POP
// end ;
10375: LD_VAR 0 3
10379: RET
// export function ScanBase ( side , base_area ) ; begin
10380: LD_INT 0
10382: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10383: LD_ADDR_VAR 0 3
10387: PUSH
10388: LD_VAR 0 2
10392: PPUSH
10393: LD_INT 81
10395: PUSH
10396: LD_VAR 0 1
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PPUSH
10405: CALL_OW 70
10409: ST_TO_ADDR
// end ;
10410: LD_VAR 0 3
10414: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10415: LD_INT 0
10417: PPUSH
10418: PPUSH
10419: PPUSH
10420: PPUSH
// result := false ;
10421: LD_ADDR_VAR 0 2
10425: PUSH
10426: LD_INT 0
10428: ST_TO_ADDR
// side := GetSide ( unit ) ;
10429: LD_ADDR_VAR 0 3
10433: PUSH
10434: LD_VAR 0 1
10438: PPUSH
10439: CALL_OW 255
10443: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10444: LD_ADDR_VAR 0 4
10448: PUSH
10449: LD_VAR 0 1
10453: PPUSH
10454: CALL_OW 248
10458: ST_TO_ADDR
// case nat of 1 :
10459: LD_VAR 0 4
10463: PUSH
10464: LD_INT 1
10466: DOUBLE
10467: EQUAL
10468: IFTRUE 10472
10470: GO 10483
10472: POP
// tech := tech_lassight ; 2 :
10473: LD_ADDR_VAR 0 5
10477: PUSH
10478: LD_INT 12
10480: ST_TO_ADDR
10481: GO 10522
10483: LD_INT 2
10485: DOUBLE
10486: EQUAL
10487: IFTRUE 10491
10489: GO 10502
10491: POP
// tech := tech_mortar ; 3 :
10492: LD_ADDR_VAR 0 5
10496: PUSH
10497: LD_INT 41
10499: ST_TO_ADDR
10500: GO 10522
10502: LD_INT 3
10504: DOUBLE
10505: EQUAL
10506: IFTRUE 10510
10508: GO 10521
10510: POP
// tech := tech_bazooka ; end ;
10511: LD_ADDR_VAR 0 5
10515: PUSH
10516: LD_INT 44
10518: ST_TO_ADDR
10519: GO 10522
10521: POP
// if Researched ( side , tech ) then
10522: LD_VAR 0 3
10526: PPUSH
10527: LD_VAR 0 5
10531: PPUSH
10532: CALL_OW 325
10536: IFFALSE 10563
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10538: LD_ADDR_VAR 0 2
10542: PUSH
10543: LD_INT 5
10545: PUSH
10546: LD_INT 8
10548: PUSH
10549: LD_INT 9
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: LD_VAR 0 4
10561: ARRAY
10562: ST_TO_ADDR
// end ;
10563: LD_VAR 0 2
10567: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10568: LD_INT 0
10570: PPUSH
10571: PPUSH
10572: PPUSH
// if not mines then
10573: LD_VAR 0 2
10577: NOT
10578: IFFALSE 10582
// exit ;
10580: GO 10726
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10582: LD_ADDR_VAR 0 5
10586: PUSH
10587: LD_INT 81
10589: PUSH
10590: LD_VAR 0 1
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 3
10601: PUSH
10602: LD_INT 21
10604: PUSH
10605: LD_INT 3
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PPUSH
10620: CALL_OW 69
10624: ST_TO_ADDR
// for i in mines do
10625: LD_ADDR_VAR 0 4
10629: PUSH
10630: LD_VAR 0 2
10634: PUSH
10635: FOR_IN
10636: IFFALSE 10724
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10638: LD_VAR 0 4
10642: PUSH
10643: LD_INT 1
10645: ARRAY
10646: PPUSH
10647: LD_VAR 0 4
10651: PUSH
10652: LD_INT 2
10654: ARRAY
10655: PPUSH
10656: CALL_OW 458
10660: NOT
10661: IFFALSE 10665
// continue ;
10663: GO 10635
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10665: LD_VAR 0 4
10669: PUSH
10670: LD_INT 1
10672: ARRAY
10673: PPUSH
10674: LD_VAR 0 4
10678: PUSH
10679: LD_INT 2
10681: ARRAY
10682: PPUSH
10683: CALL_OW 428
10687: PUSH
10688: LD_VAR 0 5
10692: IN
10693: IFFALSE 10722
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10695: LD_VAR 0 4
10699: PUSH
10700: LD_INT 1
10702: ARRAY
10703: PPUSH
10704: LD_VAR 0 4
10708: PUSH
10709: LD_INT 2
10711: ARRAY
10712: PPUSH
10713: LD_VAR 0 1
10717: PPUSH
10718: CALL_OW 456
// end ;
10722: GO 10635
10724: POP
10725: POP
// end ;
10726: LD_VAR 0 3
10730: RET
// export function Count ( array ) ; begin
10731: LD_INT 0
10733: PPUSH
// result := array + 0 ;
10734: LD_ADDR_VAR 0 2
10738: PUSH
10739: LD_VAR 0 1
10743: PUSH
10744: LD_INT 0
10746: PLUS
10747: ST_TO_ADDR
// end ;
10748: LD_VAR 0 2
10752: RET
// export function IsEmpty ( building ) ; begin
10753: LD_INT 0
10755: PPUSH
// if not building then
10756: LD_VAR 0 1
10760: NOT
10761: IFFALSE 10765
// exit ;
10763: GO 10808
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10765: LD_ADDR_VAR 0 2
10769: PUSH
10770: LD_VAR 0 1
10774: PUSH
10775: LD_INT 22
10777: PUSH
10778: LD_VAR 0 1
10782: PPUSH
10783: CALL_OW 255
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 58
10794: PUSH
10795: EMPTY
10796: LIST
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PPUSH
10802: CALL_OW 69
10806: IN
10807: ST_TO_ADDR
// end ;
10808: LD_VAR 0 2
10812: RET
// export function IsNotFull ( building ) ; var places ; begin
10813: LD_INT 0
10815: PPUSH
10816: PPUSH
// if not building then
10817: LD_VAR 0 1
10821: NOT
10822: IFFALSE 10826
// exit ;
10824: GO 10854
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
10826: LD_ADDR_VAR 0 2
10830: PUSH
10831: LD_VAR 0 1
10835: PPUSH
10836: LD_INT 3
10838: PUSH
10839: LD_INT 62
10841: PUSH
10842: EMPTY
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 72
10853: ST_TO_ADDR
// end ;
10854: LD_VAR 0 2
10858: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10859: LD_INT 0
10861: PPUSH
10862: PPUSH
10863: PPUSH
10864: PPUSH
// tmp := [ ] ;
10865: LD_ADDR_VAR 0 3
10869: PUSH
10870: EMPTY
10871: ST_TO_ADDR
// list := [ ] ;
10872: LD_ADDR_VAR 0 5
10876: PUSH
10877: EMPTY
10878: ST_TO_ADDR
// for i = 16 to 25 do
10879: LD_ADDR_VAR 0 4
10883: PUSH
10884: DOUBLE
10885: LD_INT 16
10887: DEC
10888: ST_TO_ADDR
10889: LD_INT 25
10891: PUSH
10892: FOR_TO
10893: IFFALSE 10966
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10895: LD_ADDR_VAR 0 3
10899: PUSH
10900: LD_VAR 0 3
10904: PUSH
10905: LD_INT 22
10907: PUSH
10908: LD_VAR 0 1
10912: PPUSH
10913: CALL_OW 255
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 91
10924: PUSH
10925: LD_VAR 0 1
10929: PUSH
10930: LD_INT 6
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 30
10940: PUSH
10941: LD_VAR 0 4
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: LIST
10954: PUSH
10955: EMPTY
10956: LIST
10957: PPUSH
10958: CALL_OW 69
10962: ADD
10963: ST_TO_ADDR
10964: GO 10892
10966: POP
10967: POP
// for i = 1 to tmp do
10968: LD_ADDR_VAR 0 4
10972: PUSH
10973: DOUBLE
10974: LD_INT 1
10976: DEC
10977: ST_TO_ADDR
10978: LD_VAR 0 3
10982: PUSH
10983: FOR_TO
10984: IFFALSE 11072
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10986: LD_ADDR_VAR 0 5
10990: PUSH
10991: LD_VAR 0 5
10995: PUSH
10996: LD_VAR 0 3
11000: PUSH
11001: LD_VAR 0 4
11005: ARRAY
11006: PPUSH
11007: CALL_OW 266
11011: PUSH
11012: LD_VAR 0 3
11016: PUSH
11017: LD_VAR 0 4
11021: ARRAY
11022: PPUSH
11023: CALL_OW 250
11027: PUSH
11028: LD_VAR 0 3
11032: PUSH
11033: LD_VAR 0 4
11037: ARRAY
11038: PPUSH
11039: CALL_OW 251
11043: PUSH
11044: LD_VAR 0 3
11048: PUSH
11049: LD_VAR 0 4
11053: ARRAY
11054: PPUSH
11055: CALL_OW 254
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: PUSH
11066: EMPTY
11067: LIST
11068: ADD
11069: ST_TO_ADDR
11070: GO 10983
11072: POP
11073: POP
// result := list ;
11074: LD_ADDR_VAR 0 2
11078: PUSH
11079: LD_VAR 0 5
11083: ST_TO_ADDR
// end ;
11084: LD_VAR 0 2
11088: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11089: LD_INT 0
11091: PPUSH
11092: PPUSH
11093: PPUSH
11094: PPUSH
11095: PPUSH
11096: PPUSH
11097: PPUSH
// if not factory then
11098: LD_VAR 0 1
11102: NOT
11103: IFFALSE 11107
// exit ;
11105: GO 11700
// if control = control_apeman then
11107: LD_VAR 0 4
11111: PUSH
11112: LD_INT 5
11114: EQUAL
11115: IFFALSE 11224
// begin tmp := UnitsInside ( factory ) ;
11117: LD_ADDR_VAR 0 8
11121: PUSH
11122: LD_VAR 0 1
11126: PPUSH
11127: CALL_OW 313
11131: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11132: LD_VAR 0 8
11136: PPUSH
11137: LD_INT 25
11139: PUSH
11140: LD_INT 12
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PPUSH
11147: CALL_OW 72
11151: NOT
11152: IFFALSE 11162
// control := control_manual ;
11154: LD_ADDR_VAR 0 4
11158: PUSH
11159: LD_INT 1
11161: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11162: LD_ADDR_VAR 0 8
11166: PUSH
11167: LD_VAR 0 1
11171: PPUSH
11172: CALL 10859 0 1
11176: ST_TO_ADDR
// if tmp then
11177: LD_VAR 0 8
11181: IFFALSE 11224
// begin for i in tmp do
11183: LD_ADDR_VAR 0 7
11187: PUSH
11188: LD_VAR 0 8
11192: PUSH
11193: FOR_IN
11194: IFFALSE 11222
// if i [ 1 ] = b_ext_radio then
11196: LD_VAR 0 7
11200: PUSH
11201: LD_INT 1
11203: ARRAY
11204: PUSH
11205: LD_INT 22
11207: EQUAL
11208: IFFALSE 11220
// begin control := control_remote ;
11210: LD_ADDR_VAR 0 4
11214: PUSH
11215: LD_INT 2
11217: ST_TO_ADDR
// break ;
11218: GO 11222
// end ;
11220: GO 11193
11222: POP
11223: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11224: LD_VAR 0 1
11228: PPUSH
11229: LD_VAR 0 2
11233: PPUSH
11234: LD_VAR 0 3
11238: PPUSH
11239: LD_VAR 0 4
11243: PPUSH
11244: LD_VAR 0 5
11248: PPUSH
11249: CALL_OW 448
11253: IFFALSE 11288
// begin result := [ chassis , engine , control , weapon ] ;
11255: LD_ADDR_VAR 0 6
11259: PUSH
11260: LD_VAR 0 2
11264: PUSH
11265: LD_VAR 0 3
11269: PUSH
11270: LD_VAR 0 4
11274: PUSH
11275: LD_VAR 0 5
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: ST_TO_ADDR
// exit ;
11286: GO 11700
// end ; _chassis := AvailableChassisList ( factory ) ;
11288: LD_ADDR_VAR 0 9
11292: PUSH
11293: LD_VAR 0 1
11297: PPUSH
11298: CALL_OW 475
11302: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11303: LD_ADDR_VAR 0 11
11307: PUSH
11308: LD_VAR 0 1
11312: PPUSH
11313: CALL_OW 476
11317: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11318: LD_ADDR_VAR 0 12
11322: PUSH
11323: LD_VAR 0 1
11327: PPUSH
11328: CALL_OW 477
11332: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11333: LD_ADDR_VAR 0 10
11337: PUSH
11338: LD_VAR 0 1
11342: PPUSH
11343: CALL_OW 478
11347: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11348: LD_VAR 0 9
11352: NOT
11353: PUSH
11354: LD_VAR 0 11
11358: NOT
11359: OR
11360: PUSH
11361: LD_VAR 0 12
11365: NOT
11366: OR
11367: PUSH
11368: LD_VAR 0 10
11372: NOT
11373: OR
11374: IFFALSE 11409
// begin result := [ chassis , engine , control , weapon ] ;
11376: LD_ADDR_VAR 0 6
11380: PUSH
11381: LD_VAR 0 2
11385: PUSH
11386: LD_VAR 0 3
11390: PUSH
11391: LD_VAR 0 4
11395: PUSH
11396: LD_VAR 0 5
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: ST_TO_ADDR
// exit ;
11407: GO 11700
// end ; if not chassis in _chassis then
11409: LD_VAR 0 2
11413: PUSH
11414: LD_VAR 0 9
11418: IN
11419: NOT
11420: IFFALSE 11446
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11422: LD_ADDR_VAR 0 2
11426: PUSH
11427: LD_VAR 0 9
11431: PUSH
11432: LD_INT 1
11434: PPUSH
11435: LD_VAR 0 9
11439: PPUSH
11440: CALL_OW 12
11444: ARRAY
11445: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11446: LD_VAR 0 2
11450: PPUSH
11451: LD_VAR 0 3
11455: PPUSH
11456: CALL 11705 0 2
11460: NOT
11461: IFFALSE 11520
// repeat engine := _engine [ 1 ] ;
11463: LD_ADDR_VAR 0 3
11467: PUSH
11468: LD_VAR 0 11
11472: PUSH
11473: LD_INT 1
11475: ARRAY
11476: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11477: LD_ADDR_VAR 0 11
11481: PUSH
11482: LD_VAR 0 11
11486: PPUSH
11487: LD_INT 1
11489: PPUSH
11490: CALL_OW 3
11494: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11495: LD_VAR 0 2
11499: PPUSH
11500: LD_VAR 0 3
11504: PPUSH
11505: CALL 11705 0 2
11509: PUSH
11510: LD_VAR 0 11
11514: PUSH
11515: EMPTY
11516: EQUAL
11517: OR
11518: IFFALSE 11463
// if not control in _control then
11520: LD_VAR 0 4
11524: PUSH
11525: LD_VAR 0 12
11529: IN
11530: NOT
11531: IFFALSE 11557
// control := _control [ rand ( 1 , _control ) ] ;
11533: LD_ADDR_VAR 0 4
11537: PUSH
11538: LD_VAR 0 12
11542: PUSH
11543: LD_INT 1
11545: PPUSH
11546: LD_VAR 0 12
11550: PPUSH
11551: CALL_OW 12
11555: ARRAY
11556: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11557: LD_VAR 0 2
11561: PPUSH
11562: LD_VAR 0 5
11566: PPUSH
11567: CALL 11925 0 2
11571: NOT
11572: IFFALSE 11631
// repeat weapon := _weapon [ 1 ] ;
11574: LD_ADDR_VAR 0 5
11578: PUSH
11579: LD_VAR 0 10
11583: PUSH
11584: LD_INT 1
11586: ARRAY
11587: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11588: LD_ADDR_VAR 0 10
11592: PUSH
11593: LD_VAR 0 10
11597: PPUSH
11598: LD_INT 1
11600: PPUSH
11601: CALL_OW 3
11605: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11606: LD_VAR 0 2
11610: PPUSH
11611: LD_VAR 0 5
11615: PPUSH
11616: CALL 11925 0 2
11620: PUSH
11621: LD_VAR 0 10
11625: PUSH
11626: EMPTY
11627: EQUAL
11628: OR
11629: IFFALSE 11574
// result := [ ] ;
11631: LD_ADDR_VAR 0 6
11635: PUSH
11636: EMPTY
11637: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11638: LD_VAR 0 1
11642: PPUSH
11643: LD_VAR 0 2
11647: PPUSH
11648: LD_VAR 0 3
11652: PPUSH
11653: LD_VAR 0 4
11657: PPUSH
11658: LD_VAR 0 5
11662: PPUSH
11663: CALL_OW 448
11667: IFFALSE 11700
// result := [ chassis , engine , control , weapon ] ;
11669: LD_ADDR_VAR 0 6
11673: PUSH
11674: LD_VAR 0 2
11678: PUSH
11679: LD_VAR 0 3
11683: PUSH
11684: LD_VAR 0 4
11688: PUSH
11689: LD_VAR 0 5
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: ST_TO_ADDR
// end ;
11700: LD_VAR 0 6
11704: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11705: LD_INT 0
11707: PPUSH
// if not chassis or not engine then
11708: LD_VAR 0 1
11712: NOT
11713: PUSH
11714: LD_VAR 0 2
11718: NOT
11719: OR
11720: IFFALSE 11724
// exit ;
11722: GO 11920
// case engine of engine_solar :
11724: LD_VAR 0 2
11728: PUSH
11729: LD_INT 2
11731: DOUBLE
11732: EQUAL
11733: IFTRUE 11737
11735: GO 11775
11737: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11738: LD_ADDR_VAR 0 3
11742: PUSH
11743: LD_INT 11
11745: PUSH
11746: LD_INT 12
11748: PUSH
11749: LD_INT 13
11751: PUSH
11752: LD_INT 14
11754: PUSH
11755: LD_INT 1
11757: PUSH
11758: LD_INT 2
11760: PUSH
11761: LD_INT 3
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: ST_TO_ADDR
11773: GO 11904
11775: LD_INT 1
11777: DOUBLE
11778: EQUAL
11779: IFTRUE 11783
11781: GO 11845
11783: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11784: LD_ADDR_VAR 0 3
11788: PUSH
11789: LD_INT 11
11791: PUSH
11792: LD_INT 12
11794: PUSH
11795: LD_INT 13
11797: PUSH
11798: LD_INT 14
11800: PUSH
11801: LD_INT 1
11803: PUSH
11804: LD_INT 2
11806: PUSH
11807: LD_INT 3
11809: PUSH
11810: LD_INT 4
11812: PUSH
11813: LD_INT 5
11815: PUSH
11816: LD_INT 21
11818: PUSH
11819: LD_INT 23
11821: PUSH
11822: LD_INT 22
11824: PUSH
11825: LD_INT 24
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: ST_TO_ADDR
11843: GO 11904
11845: LD_INT 3
11847: DOUBLE
11848: EQUAL
11849: IFTRUE 11853
11851: GO 11903
11853: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11854: LD_ADDR_VAR 0 3
11858: PUSH
11859: LD_INT 13
11861: PUSH
11862: LD_INT 14
11864: PUSH
11865: LD_INT 2
11867: PUSH
11868: LD_INT 3
11870: PUSH
11871: LD_INT 4
11873: PUSH
11874: LD_INT 5
11876: PUSH
11877: LD_INT 21
11879: PUSH
11880: LD_INT 22
11882: PUSH
11883: LD_INT 23
11885: PUSH
11886: LD_INT 24
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: ST_TO_ADDR
11901: GO 11904
11903: POP
// result := ( chassis in result ) ;
11904: LD_ADDR_VAR 0 3
11908: PUSH
11909: LD_VAR 0 1
11913: PUSH
11914: LD_VAR 0 3
11918: IN
11919: ST_TO_ADDR
// end ;
11920: LD_VAR 0 3
11924: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11925: LD_INT 0
11927: PPUSH
// if not chassis or not weapon then
11928: LD_VAR 0 1
11932: NOT
11933: PUSH
11934: LD_VAR 0 2
11938: NOT
11939: OR
11940: IFFALSE 11944
// exit ;
11942: GO 13004
// case weapon of us_machine_gun :
11944: LD_VAR 0 2
11948: PUSH
11949: LD_INT 2
11951: DOUBLE
11952: EQUAL
11953: IFTRUE 11957
11955: GO 11987
11957: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11958: LD_ADDR_VAR 0 3
11962: PUSH
11963: LD_INT 1
11965: PUSH
11966: LD_INT 2
11968: PUSH
11969: LD_INT 3
11971: PUSH
11972: LD_INT 4
11974: PUSH
11975: LD_INT 5
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: ST_TO_ADDR
11985: GO 12988
11987: LD_INT 3
11989: DOUBLE
11990: EQUAL
11991: IFTRUE 11995
11993: GO 12025
11995: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11996: LD_ADDR_VAR 0 3
12000: PUSH
12001: LD_INT 1
12003: PUSH
12004: LD_INT 2
12006: PUSH
12007: LD_INT 3
12009: PUSH
12010: LD_INT 4
12012: PUSH
12013: LD_INT 5
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: ST_TO_ADDR
12023: GO 12988
12025: LD_INT 11
12027: DOUBLE
12028: EQUAL
12029: IFTRUE 12033
12031: GO 12063
12033: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12034: LD_ADDR_VAR 0 3
12038: PUSH
12039: LD_INT 1
12041: PUSH
12042: LD_INT 2
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: LD_INT 4
12050: PUSH
12051: LD_INT 5
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: ST_TO_ADDR
12061: GO 12988
12063: LD_INT 4
12065: DOUBLE
12066: EQUAL
12067: IFTRUE 12071
12069: GO 12097
12071: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12072: LD_ADDR_VAR 0 3
12076: PUSH
12077: LD_INT 2
12079: PUSH
12080: LD_INT 3
12082: PUSH
12083: LD_INT 4
12085: PUSH
12086: LD_INT 5
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: ST_TO_ADDR
12095: GO 12988
12097: LD_INT 5
12099: DOUBLE
12100: EQUAL
12101: IFTRUE 12105
12103: GO 12131
12105: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12106: LD_ADDR_VAR 0 3
12110: PUSH
12111: LD_INT 2
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: LD_INT 4
12119: PUSH
12120: LD_INT 5
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: ST_TO_ADDR
12129: GO 12988
12131: LD_INT 9
12133: DOUBLE
12134: EQUAL
12135: IFTRUE 12139
12137: GO 12165
12139: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12140: LD_ADDR_VAR 0 3
12144: PUSH
12145: LD_INT 2
12147: PUSH
12148: LD_INT 3
12150: PUSH
12151: LD_INT 4
12153: PUSH
12154: LD_INT 5
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: ST_TO_ADDR
12163: GO 12988
12165: LD_INT 7
12167: DOUBLE
12168: EQUAL
12169: IFTRUE 12173
12171: GO 12199
12173: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12174: LD_ADDR_VAR 0 3
12178: PUSH
12179: LD_INT 2
12181: PUSH
12182: LD_INT 3
12184: PUSH
12185: LD_INT 4
12187: PUSH
12188: LD_INT 5
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: ST_TO_ADDR
12197: GO 12988
12199: LD_INT 12
12201: DOUBLE
12202: EQUAL
12203: IFTRUE 12207
12205: GO 12233
12207: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12208: LD_ADDR_VAR 0 3
12212: PUSH
12213: LD_INT 2
12215: PUSH
12216: LD_INT 3
12218: PUSH
12219: LD_INT 4
12221: PUSH
12222: LD_INT 5
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: ST_TO_ADDR
12231: GO 12988
12233: LD_INT 13
12235: DOUBLE
12236: EQUAL
12237: IFTRUE 12241
12239: GO 12267
12241: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12242: LD_ADDR_VAR 0 3
12246: PUSH
12247: LD_INT 2
12249: PUSH
12250: LD_INT 3
12252: PUSH
12253: LD_INT 4
12255: PUSH
12256: LD_INT 5
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: ST_TO_ADDR
12265: GO 12988
12267: LD_INT 14
12269: DOUBLE
12270: EQUAL
12271: IFTRUE 12275
12273: GO 12293
12275: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12276: LD_ADDR_VAR 0 3
12280: PUSH
12281: LD_INT 4
12283: PUSH
12284: LD_INT 5
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: ST_TO_ADDR
12291: GO 12988
12293: LD_INT 6
12295: DOUBLE
12296: EQUAL
12297: IFTRUE 12301
12299: GO 12319
12301: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12302: LD_ADDR_VAR 0 3
12306: PUSH
12307: LD_INT 4
12309: PUSH
12310: LD_INT 5
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: ST_TO_ADDR
12317: GO 12988
12319: LD_INT 10
12321: DOUBLE
12322: EQUAL
12323: IFTRUE 12327
12325: GO 12345
12327: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12328: LD_ADDR_VAR 0 3
12332: PUSH
12333: LD_INT 4
12335: PUSH
12336: LD_INT 5
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: ST_TO_ADDR
12343: GO 12988
12345: LD_INT 22
12347: DOUBLE
12348: EQUAL
12349: IFTRUE 12353
12351: GO 12379
12353: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12354: LD_ADDR_VAR 0 3
12358: PUSH
12359: LD_INT 11
12361: PUSH
12362: LD_INT 12
12364: PUSH
12365: LD_INT 13
12367: PUSH
12368: LD_INT 14
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: ST_TO_ADDR
12377: GO 12988
12379: LD_INT 23
12381: DOUBLE
12382: EQUAL
12383: IFTRUE 12387
12385: GO 12413
12387: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12388: LD_ADDR_VAR 0 3
12392: PUSH
12393: LD_INT 11
12395: PUSH
12396: LD_INT 12
12398: PUSH
12399: LD_INT 13
12401: PUSH
12402: LD_INT 14
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: ST_TO_ADDR
12411: GO 12988
12413: LD_INT 24
12415: DOUBLE
12416: EQUAL
12417: IFTRUE 12421
12419: GO 12447
12421: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12422: LD_ADDR_VAR 0 3
12426: PUSH
12427: LD_INT 11
12429: PUSH
12430: LD_INT 12
12432: PUSH
12433: LD_INT 13
12435: PUSH
12436: LD_INT 14
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: ST_TO_ADDR
12445: GO 12988
12447: LD_INT 30
12449: DOUBLE
12450: EQUAL
12451: IFTRUE 12455
12453: GO 12481
12455: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12456: LD_ADDR_VAR 0 3
12460: PUSH
12461: LD_INT 11
12463: PUSH
12464: LD_INT 12
12466: PUSH
12467: LD_INT 13
12469: PUSH
12470: LD_INT 14
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: ST_TO_ADDR
12479: GO 12988
12481: LD_INT 25
12483: DOUBLE
12484: EQUAL
12485: IFTRUE 12489
12487: GO 12507
12489: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12490: LD_ADDR_VAR 0 3
12494: PUSH
12495: LD_INT 13
12497: PUSH
12498: LD_INT 14
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: ST_TO_ADDR
12505: GO 12988
12507: LD_INT 27
12509: DOUBLE
12510: EQUAL
12511: IFTRUE 12515
12513: GO 12533
12515: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12516: LD_ADDR_VAR 0 3
12520: PUSH
12521: LD_INT 13
12523: PUSH
12524: LD_INT 14
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: ST_TO_ADDR
12531: GO 12988
12533: LD_INT 92
12535: DOUBLE
12536: EQUAL
12537: IFTRUE 12541
12539: GO 12567
12541: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12542: LD_ADDR_VAR 0 3
12546: PUSH
12547: LD_INT 11
12549: PUSH
12550: LD_INT 12
12552: PUSH
12553: LD_INT 13
12555: PUSH
12556: LD_INT 14
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: ST_TO_ADDR
12565: GO 12988
12567: LD_INT 28
12569: DOUBLE
12570: EQUAL
12571: IFTRUE 12575
12573: GO 12593
12575: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12576: LD_ADDR_VAR 0 3
12580: PUSH
12581: LD_INT 13
12583: PUSH
12584: LD_INT 14
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: ST_TO_ADDR
12591: GO 12988
12593: LD_INT 29
12595: DOUBLE
12596: EQUAL
12597: IFTRUE 12601
12599: GO 12619
12601: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12602: LD_ADDR_VAR 0 3
12606: PUSH
12607: LD_INT 13
12609: PUSH
12610: LD_INT 14
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: ST_TO_ADDR
12617: GO 12988
12619: LD_INT 31
12621: DOUBLE
12622: EQUAL
12623: IFTRUE 12627
12625: GO 12645
12627: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12628: LD_ADDR_VAR 0 3
12632: PUSH
12633: LD_INT 13
12635: PUSH
12636: LD_INT 14
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: ST_TO_ADDR
12643: GO 12988
12645: LD_INT 26
12647: DOUBLE
12648: EQUAL
12649: IFTRUE 12653
12651: GO 12671
12653: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12654: LD_ADDR_VAR 0 3
12658: PUSH
12659: LD_INT 13
12661: PUSH
12662: LD_INT 14
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: ST_TO_ADDR
12669: GO 12988
12671: LD_INT 42
12673: DOUBLE
12674: EQUAL
12675: IFTRUE 12679
12677: GO 12705
12679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12680: LD_ADDR_VAR 0 3
12684: PUSH
12685: LD_INT 21
12687: PUSH
12688: LD_INT 22
12690: PUSH
12691: LD_INT 23
12693: PUSH
12694: LD_INT 24
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: ST_TO_ADDR
12703: GO 12988
12705: LD_INT 43
12707: DOUBLE
12708: EQUAL
12709: IFTRUE 12713
12711: GO 12739
12713: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12714: LD_ADDR_VAR 0 3
12718: PUSH
12719: LD_INT 21
12721: PUSH
12722: LD_INT 22
12724: PUSH
12725: LD_INT 23
12727: PUSH
12728: LD_INT 24
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: ST_TO_ADDR
12737: GO 12988
12739: LD_INT 44
12741: DOUBLE
12742: EQUAL
12743: IFTRUE 12747
12745: GO 12773
12747: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12748: LD_ADDR_VAR 0 3
12752: PUSH
12753: LD_INT 21
12755: PUSH
12756: LD_INT 22
12758: PUSH
12759: LD_INT 23
12761: PUSH
12762: LD_INT 24
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: ST_TO_ADDR
12771: GO 12988
12773: LD_INT 45
12775: DOUBLE
12776: EQUAL
12777: IFTRUE 12781
12779: GO 12807
12781: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12782: LD_ADDR_VAR 0 3
12786: PUSH
12787: LD_INT 21
12789: PUSH
12790: LD_INT 22
12792: PUSH
12793: LD_INT 23
12795: PUSH
12796: LD_INT 24
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: ST_TO_ADDR
12805: GO 12988
12807: LD_INT 49
12809: DOUBLE
12810: EQUAL
12811: IFTRUE 12815
12813: GO 12841
12815: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12816: LD_ADDR_VAR 0 3
12820: PUSH
12821: LD_INT 21
12823: PUSH
12824: LD_INT 22
12826: PUSH
12827: LD_INT 23
12829: PUSH
12830: LD_INT 24
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: ST_TO_ADDR
12839: GO 12988
12841: LD_INT 51
12843: DOUBLE
12844: EQUAL
12845: IFTRUE 12849
12847: GO 12875
12849: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12850: LD_ADDR_VAR 0 3
12854: PUSH
12855: LD_INT 21
12857: PUSH
12858: LD_INT 22
12860: PUSH
12861: LD_INT 23
12863: PUSH
12864: LD_INT 24
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: ST_TO_ADDR
12873: GO 12988
12875: LD_INT 52
12877: DOUBLE
12878: EQUAL
12879: IFTRUE 12883
12881: GO 12909
12883: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12884: LD_ADDR_VAR 0 3
12888: PUSH
12889: LD_INT 21
12891: PUSH
12892: LD_INT 22
12894: PUSH
12895: LD_INT 23
12897: PUSH
12898: LD_INT 24
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: ST_TO_ADDR
12907: GO 12988
12909: LD_INT 53
12911: DOUBLE
12912: EQUAL
12913: IFTRUE 12917
12915: GO 12935
12917: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: LD_INT 23
12925: PUSH
12926: LD_INT 24
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: ST_TO_ADDR
12933: GO 12988
12935: LD_INT 46
12937: DOUBLE
12938: EQUAL
12939: IFTRUE 12943
12941: GO 12961
12943: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12944: LD_ADDR_VAR 0 3
12948: PUSH
12949: LD_INT 23
12951: PUSH
12952: LD_INT 24
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: ST_TO_ADDR
12959: GO 12988
12961: LD_INT 47
12963: DOUBLE
12964: EQUAL
12965: IFTRUE 12969
12967: GO 12987
12969: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12970: LD_ADDR_VAR 0 3
12974: PUSH
12975: LD_INT 23
12977: PUSH
12978: LD_INT 24
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: ST_TO_ADDR
12985: GO 12988
12987: POP
// result := ( chassis in result ) ;
12988: LD_ADDR_VAR 0 3
12992: PUSH
12993: LD_VAR 0 1
12997: PUSH
12998: LD_VAR 0 3
13002: IN
13003: ST_TO_ADDR
// end ;
13004: LD_VAR 0 3
13008: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13009: LD_INT 0
13011: PPUSH
13012: PPUSH
13013: PPUSH
13014: PPUSH
13015: PPUSH
13016: PPUSH
13017: PPUSH
// result := array ;
13018: LD_ADDR_VAR 0 5
13022: PUSH
13023: LD_VAR 0 1
13027: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13028: LD_VAR 0 1
13032: NOT
13033: PUSH
13034: LD_VAR 0 2
13038: NOT
13039: OR
13040: PUSH
13041: LD_VAR 0 3
13045: NOT
13046: OR
13047: PUSH
13048: LD_VAR 0 2
13052: PUSH
13053: LD_VAR 0 1
13057: GREATER
13058: OR
13059: PUSH
13060: LD_VAR 0 3
13064: PUSH
13065: LD_VAR 0 1
13069: GREATER
13070: OR
13071: IFFALSE 13075
// exit ;
13073: GO 13371
// if direction then
13075: LD_VAR 0 4
13079: IFFALSE 13143
// begin d := 1 ;
13081: LD_ADDR_VAR 0 9
13085: PUSH
13086: LD_INT 1
13088: ST_TO_ADDR
// if i_from > i_to then
13089: LD_VAR 0 2
13093: PUSH
13094: LD_VAR 0 3
13098: GREATER
13099: IFFALSE 13125
// length := ( array - i_from ) + i_to else
13101: LD_ADDR_VAR 0 11
13105: PUSH
13106: LD_VAR 0 1
13110: PUSH
13111: LD_VAR 0 2
13115: MINUS
13116: PUSH
13117: LD_VAR 0 3
13121: PLUS
13122: ST_TO_ADDR
13123: GO 13141
// length := i_to - i_from ;
13125: LD_ADDR_VAR 0 11
13129: PUSH
13130: LD_VAR 0 3
13134: PUSH
13135: LD_VAR 0 2
13139: MINUS
13140: ST_TO_ADDR
// end else
13141: GO 13204
// begin d := - 1 ;
13143: LD_ADDR_VAR 0 9
13147: PUSH
13148: LD_INT 1
13150: NEG
13151: ST_TO_ADDR
// if i_from > i_to then
13152: LD_VAR 0 2
13156: PUSH
13157: LD_VAR 0 3
13161: GREATER
13162: IFFALSE 13182
// length := i_from - i_to else
13164: LD_ADDR_VAR 0 11
13168: PUSH
13169: LD_VAR 0 2
13173: PUSH
13174: LD_VAR 0 3
13178: MINUS
13179: ST_TO_ADDR
13180: GO 13204
// length := ( array - i_to ) + i_from ;
13182: LD_ADDR_VAR 0 11
13186: PUSH
13187: LD_VAR 0 1
13191: PUSH
13192: LD_VAR 0 3
13196: MINUS
13197: PUSH
13198: LD_VAR 0 2
13202: PLUS
13203: ST_TO_ADDR
// end ; if not length then
13204: LD_VAR 0 11
13208: NOT
13209: IFFALSE 13213
// exit ;
13211: GO 13371
// tmp := array ;
13213: LD_ADDR_VAR 0 10
13217: PUSH
13218: LD_VAR 0 1
13222: ST_TO_ADDR
// for i = 1 to length do
13223: LD_ADDR_VAR 0 6
13227: PUSH
13228: DOUBLE
13229: LD_INT 1
13231: DEC
13232: ST_TO_ADDR
13233: LD_VAR 0 11
13237: PUSH
13238: FOR_TO
13239: IFFALSE 13359
// begin for j = 1 to array do
13241: LD_ADDR_VAR 0 7
13245: PUSH
13246: DOUBLE
13247: LD_INT 1
13249: DEC
13250: ST_TO_ADDR
13251: LD_VAR 0 1
13255: PUSH
13256: FOR_TO
13257: IFFALSE 13345
// begin k := j + d ;
13259: LD_ADDR_VAR 0 8
13263: PUSH
13264: LD_VAR 0 7
13268: PUSH
13269: LD_VAR 0 9
13273: PLUS
13274: ST_TO_ADDR
// if k > array then
13275: LD_VAR 0 8
13279: PUSH
13280: LD_VAR 0 1
13284: GREATER
13285: IFFALSE 13295
// k := 1 ;
13287: LD_ADDR_VAR 0 8
13291: PUSH
13292: LD_INT 1
13294: ST_TO_ADDR
// if not k then
13295: LD_VAR 0 8
13299: NOT
13300: IFFALSE 13312
// k := array ;
13302: LD_ADDR_VAR 0 8
13306: PUSH
13307: LD_VAR 0 1
13311: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13312: LD_ADDR_VAR 0 10
13316: PUSH
13317: LD_VAR 0 10
13321: PPUSH
13322: LD_VAR 0 8
13326: PPUSH
13327: LD_VAR 0 1
13331: PUSH
13332: LD_VAR 0 7
13336: ARRAY
13337: PPUSH
13338: CALL_OW 1
13342: ST_TO_ADDR
// end ;
13343: GO 13256
13345: POP
13346: POP
// array := tmp ;
13347: LD_ADDR_VAR 0 1
13351: PUSH
13352: LD_VAR 0 10
13356: ST_TO_ADDR
// end ;
13357: GO 13238
13359: POP
13360: POP
// result := array ;
13361: LD_ADDR_VAR 0 5
13365: PUSH
13366: LD_VAR 0 1
13370: ST_TO_ADDR
// end ;
13371: LD_VAR 0 5
13375: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13376: LD_INT 0
13378: PPUSH
13379: PPUSH
// result := 0 ;
13380: LD_ADDR_VAR 0 3
13384: PUSH
13385: LD_INT 0
13387: ST_TO_ADDR
// if not array or not value in array then
13388: LD_VAR 0 1
13392: NOT
13393: PUSH
13394: LD_VAR 0 2
13398: PUSH
13399: LD_VAR 0 1
13403: IN
13404: NOT
13405: OR
13406: IFFALSE 13410
// exit ;
13408: GO 13464
// for i = 1 to array do
13410: LD_ADDR_VAR 0 4
13414: PUSH
13415: DOUBLE
13416: LD_INT 1
13418: DEC
13419: ST_TO_ADDR
13420: LD_VAR 0 1
13424: PUSH
13425: FOR_TO
13426: IFFALSE 13462
// if value = array [ i ] then
13428: LD_VAR 0 2
13432: PUSH
13433: LD_VAR 0 1
13437: PUSH
13438: LD_VAR 0 4
13442: ARRAY
13443: EQUAL
13444: IFFALSE 13460
// begin result := i ;
13446: LD_ADDR_VAR 0 3
13450: PUSH
13451: LD_VAR 0 4
13455: ST_TO_ADDR
// exit ;
13456: POP
13457: POP
13458: GO 13464
// end ;
13460: GO 13425
13462: POP
13463: POP
// end ;
13464: LD_VAR 0 3
13468: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13469: LD_INT 0
13471: PPUSH
// vc_chassis := chassis ;
13472: LD_ADDR_OWVAR 37
13476: PUSH
13477: LD_VAR 0 1
13481: ST_TO_ADDR
// vc_engine := engine ;
13482: LD_ADDR_OWVAR 39
13486: PUSH
13487: LD_VAR 0 2
13491: ST_TO_ADDR
// vc_control := control ;
13492: LD_ADDR_OWVAR 38
13496: PUSH
13497: LD_VAR 0 3
13501: ST_TO_ADDR
// vc_weapon := weapon ;
13502: LD_ADDR_OWVAR 40
13506: PUSH
13507: LD_VAR 0 4
13511: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13512: LD_ADDR_OWVAR 41
13516: PUSH
13517: LD_VAR 0 5
13521: ST_TO_ADDR
// end ;
13522: LD_VAR 0 6
13526: RET
// export function WantPlant ( unit ) ; var task ; begin
13527: LD_INT 0
13529: PPUSH
13530: PPUSH
// result := false ;
13531: LD_ADDR_VAR 0 2
13535: PUSH
13536: LD_INT 0
13538: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13539: LD_ADDR_VAR 0 3
13543: PUSH
13544: LD_VAR 0 1
13548: PPUSH
13549: CALL_OW 437
13553: ST_TO_ADDR
// if task then
13554: LD_VAR 0 3
13558: IFFALSE 13586
// if task [ 1 ] [ 1 ] = p then
13560: LD_VAR 0 3
13564: PUSH
13565: LD_INT 1
13567: ARRAY
13568: PUSH
13569: LD_INT 1
13571: ARRAY
13572: PUSH
13573: LD_STRING p
13575: EQUAL
13576: IFFALSE 13586
// result := true ;
13578: LD_ADDR_VAR 0 2
13582: PUSH
13583: LD_INT 1
13585: ST_TO_ADDR
// end ;
13586: LD_VAR 0 2
13590: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13591: LD_INT 0
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
// if pos < 1 then
13597: LD_VAR 0 2
13601: PUSH
13602: LD_INT 1
13604: LESS
13605: IFFALSE 13609
// exit ;
13607: GO 13912
// if pos = 1 then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_INT 1
13616: EQUAL
13617: IFFALSE 13650
// result := Replace ( arr , pos [ 1 ] , value ) else
13619: LD_ADDR_VAR 0 4
13623: PUSH
13624: LD_VAR 0 1
13628: PPUSH
13629: LD_VAR 0 2
13633: PUSH
13634: LD_INT 1
13636: ARRAY
13637: PPUSH
13638: LD_VAR 0 3
13642: PPUSH
13643: CALL_OW 1
13647: ST_TO_ADDR
13648: GO 13912
// begin tmp := arr ;
13650: LD_ADDR_VAR 0 6
13654: PUSH
13655: LD_VAR 0 1
13659: ST_TO_ADDR
// s_arr := [ tmp ] ;
13660: LD_ADDR_VAR 0 7
13664: PUSH
13665: LD_VAR 0 6
13669: PUSH
13670: EMPTY
13671: LIST
13672: ST_TO_ADDR
// for i = 1 to pos - 1 do
13673: LD_ADDR_VAR 0 5
13677: PUSH
13678: DOUBLE
13679: LD_INT 1
13681: DEC
13682: ST_TO_ADDR
13683: LD_VAR 0 2
13687: PUSH
13688: LD_INT 1
13690: MINUS
13691: PUSH
13692: FOR_TO
13693: IFFALSE 13738
// begin tmp := tmp [ pos [ i ] ] ;
13695: LD_ADDR_VAR 0 6
13699: PUSH
13700: LD_VAR 0 6
13704: PUSH
13705: LD_VAR 0 2
13709: PUSH
13710: LD_VAR 0 5
13714: ARRAY
13715: ARRAY
13716: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13717: LD_ADDR_VAR 0 7
13721: PUSH
13722: LD_VAR 0 7
13726: PUSH
13727: LD_VAR 0 6
13731: PUSH
13732: EMPTY
13733: LIST
13734: ADD
13735: ST_TO_ADDR
// end ;
13736: GO 13692
13738: POP
13739: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13740: LD_ADDR_VAR 0 6
13744: PUSH
13745: LD_VAR 0 6
13749: PPUSH
13750: LD_VAR 0 2
13754: PUSH
13755: LD_VAR 0 2
13759: ARRAY
13760: PPUSH
13761: LD_VAR 0 3
13765: PPUSH
13766: CALL_OW 1
13770: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13771: LD_ADDR_VAR 0 7
13775: PUSH
13776: LD_VAR 0 7
13780: PPUSH
13781: LD_VAR 0 7
13785: PPUSH
13786: LD_VAR 0 6
13790: PPUSH
13791: CALL_OW 1
13795: ST_TO_ADDR
// for i = s_arr downto 2 do
13796: LD_ADDR_VAR 0 5
13800: PUSH
13801: DOUBLE
13802: LD_VAR 0 7
13806: INC
13807: ST_TO_ADDR
13808: LD_INT 2
13810: PUSH
13811: FOR_DOWNTO
13812: IFFALSE 13896
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13814: LD_ADDR_VAR 0 6
13818: PUSH
13819: LD_VAR 0 7
13823: PUSH
13824: LD_VAR 0 5
13828: PUSH
13829: LD_INT 1
13831: MINUS
13832: ARRAY
13833: PPUSH
13834: LD_VAR 0 2
13838: PUSH
13839: LD_VAR 0 5
13843: PUSH
13844: LD_INT 1
13846: MINUS
13847: ARRAY
13848: PPUSH
13849: LD_VAR 0 7
13853: PUSH
13854: LD_VAR 0 5
13858: ARRAY
13859: PPUSH
13860: CALL_OW 1
13864: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13865: LD_ADDR_VAR 0 7
13869: PUSH
13870: LD_VAR 0 7
13874: PPUSH
13875: LD_VAR 0 5
13879: PUSH
13880: LD_INT 1
13882: MINUS
13883: PPUSH
13884: LD_VAR 0 6
13888: PPUSH
13889: CALL_OW 1
13893: ST_TO_ADDR
// end ;
13894: GO 13811
13896: POP
13897: POP
// result := s_arr [ 1 ] ;
13898: LD_ADDR_VAR 0 4
13902: PUSH
13903: LD_VAR 0 7
13907: PUSH
13908: LD_INT 1
13910: ARRAY
13911: ST_TO_ADDR
// end ; end ;
13912: LD_VAR 0 4
13916: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13917: LD_INT 0
13919: PPUSH
13920: PPUSH
// if not list then
13921: LD_VAR 0 1
13925: NOT
13926: IFFALSE 13930
// exit ;
13928: GO 14021
// i := list [ pos1 ] ;
13930: LD_ADDR_VAR 0 5
13934: PUSH
13935: LD_VAR 0 1
13939: PUSH
13940: LD_VAR 0 2
13944: ARRAY
13945: ST_TO_ADDR
// if not i then
13946: LD_VAR 0 5
13950: NOT
13951: IFFALSE 13955
// exit ;
13953: GO 14021
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13955: LD_ADDR_VAR 0 1
13959: PUSH
13960: LD_VAR 0 1
13964: PPUSH
13965: LD_VAR 0 2
13969: PPUSH
13970: LD_VAR 0 1
13974: PUSH
13975: LD_VAR 0 3
13979: ARRAY
13980: PPUSH
13981: CALL_OW 1
13985: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13986: LD_ADDR_VAR 0 1
13990: PUSH
13991: LD_VAR 0 1
13995: PPUSH
13996: LD_VAR 0 3
14000: PPUSH
14001: LD_VAR 0 5
14005: PPUSH
14006: CALL_OW 1
14010: ST_TO_ADDR
// result := list ;
14011: LD_ADDR_VAR 0 4
14015: PUSH
14016: LD_VAR 0 1
14020: ST_TO_ADDR
// end ;
14021: LD_VAR 0 4
14025: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14026: LD_INT 0
14028: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14029: LD_ADDR_VAR 0 5
14033: PUSH
14034: LD_VAR 0 1
14038: PPUSH
14039: CALL_OW 250
14043: PPUSH
14044: LD_VAR 0 1
14048: PPUSH
14049: CALL_OW 251
14053: PPUSH
14054: LD_VAR 0 2
14058: PPUSH
14059: LD_VAR 0 3
14063: PPUSH
14064: LD_VAR 0 4
14068: PPUSH
14069: CALL 14447 0 5
14073: ST_TO_ADDR
// end ;
14074: LD_VAR 0 5
14078: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14079: LD_INT 0
14081: PPUSH
14082: PPUSH
14083: PPUSH
14084: PPUSH
// if not list or not unit then
14085: LD_VAR 0 2
14089: NOT
14090: PUSH
14091: LD_VAR 0 1
14095: NOT
14096: OR
14097: IFFALSE 14101
// exit ;
14099: GO 14442
// result := [ ] ;
14101: LD_ADDR_VAR 0 5
14105: PUSH
14106: EMPTY
14107: ST_TO_ADDR
// for i in list do
14108: LD_ADDR_VAR 0 6
14112: PUSH
14113: LD_VAR 0 2
14117: PUSH
14118: FOR_IN
14119: IFFALSE 14337
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14121: LD_ADDR_VAR 0 8
14125: PUSH
14126: LD_VAR 0 1
14130: PPUSH
14131: LD_VAR 0 6
14135: PUSH
14136: LD_INT 1
14138: ARRAY
14139: PPUSH
14140: LD_VAR 0 6
14144: PUSH
14145: LD_INT 2
14147: ARRAY
14148: PPUSH
14149: CALL_OW 297
14153: ST_TO_ADDR
// if not Count ( result ) then
14154: LD_VAR 0 5
14158: PPUSH
14159: CALL 10731 0 1
14163: NOT
14164: IFFALSE 14197
// begin result := Join ( result , [ i , tmp ] ) ;
14166: LD_ADDR_VAR 0 5
14170: PUSH
14171: LD_VAR 0 5
14175: PPUSH
14176: LD_VAR 0 6
14180: PUSH
14181: LD_VAR 0 8
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PPUSH
14190: CALL 46320 0 2
14194: ST_TO_ADDR
// continue ;
14195: GO 14118
// end ; if result [ result ] [ 2 ] <= tmp then
14197: LD_VAR 0 5
14201: PUSH
14202: LD_VAR 0 5
14206: ARRAY
14207: PUSH
14208: LD_INT 2
14210: ARRAY
14211: PUSH
14212: LD_VAR 0 8
14216: LESSEQUAL
14217: IFFALSE 14250
// result := Join ( result , [ i , tmp ] ) else
14219: LD_ADDR_VAR 0 5
14223: PUSH
14224: LD_VAR 0 5
14228: PPUSH
14229: LD_VAR 0 6
14233: PUSH
14234: LD_VAR 0 8
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PPUSH
14243: CALL 46320 0 2
14247: ST_TO_ADDR
14248: GO 14335
// begin for j := 1 to Count ( result ) do
14250: LD_ADDR_VAR 0 7
14254: PUSH
14255: DOUBLE
14256: LD_INT 1
14258: DEC
14259: ST_TO_ADDR
14260: LD_VAR 0 5
14264: PPUSH
14265: CALL 10731 0 1
14269: PUSH
14270: FOR_TO
14271: IFFALSE 14333
// begin if tmp < result [ j ] [ 2 ] then
14273: LD_VAR 0 8
14277: PUSH
14278: LD_VAR 0 5
14282: PUSH
14283: LD_VAR 0 7
14287: ARRAY
14288: PUSH
14289: LD_INT 2
14291: ARRAY
14292: LESS
14293: IFFALSE 14331
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14295: LD_ADDR_VAR 0 5
14299: PUSH
14300: LD_VAR 0 5
14304: PPUSH
14305: LD_VAR 0 7
14309: PPUSH
14310: LD_VAR 0 6
14314: PUSH
14315: LD_VAR 0 8
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PPUSH
14324: CALL_OW 2
14328: ST_TO_ADDR
// break ;
14329: GO 14333
// end ; end ;
14331: GO 14270
14333: POP
14334: POP
// end ; end ;
14335: GO 14118
14337: POP
14338: POP
// if result and not asc then
14339: LD_VAR 0 5
14343: PUSH
14344: LD_VAR 0 3
14348: NOT
14349: AND
14350: IFFALSE 14367
// result := ReverseArray ( result ) ;
14352: LD_ADDR_VAR 0 5
14356: PUSH
14357: LD_VAR 0 5
14361: PPUSH
14362: CALL 41607 0 1
14366: ST_TO_ADDR
// tmp := [ ] ;
14367: LD_ADDR_VAR 0 8
14371: PUSH
14372: EMPTY
14373: ST_TO_ADDR
// if mode then
14374: LD_VAR 0 4
14378: IFFALSE 14442
// begin for i := 1 to result do
14380: LD_ADDR_VAR 0 6
14384: PUSH
14385: DOUBLE
14386: LD_INT 1
14388: DEC
14389: ST_TO_ADDR
14390: LD_VAR 0 5
14394: PUSH
14395: FOR_TO
14396: IFFALSE 14430
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
14398: LD_ADDR_VAR 0 8
14402: PUSH
14403: LD_VAR 0 8
14407: PPUSH
14408: LD_VAR 0 5
14412: PUSH
14413: LD_VAR 0 6
14417: ARRAY
14418: PUSH
14419: LD_INT 1
14421: ARRAY
14422: PPUSH
14423: CALL 46320 0 2
14427: ST_TO_ADDR
14428: GO 14395
14430: POP
14431: POP
// result := tmp ;
14432: LD_ADDR_VAR 0 5
14436: PUSH
14437: LD_VAR 0 8
14441: ST_TO_ADDR
// end ; end ;
14442: LD_VAR 0 5
14446: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14447: LD_INT 0
14449: PPUSH
14450: PPUSH
14451: PPUSH
14452: PPUSH
// if not list then
14453: LD_VAR 0 3
14457: NOT
14458: IFFALSE 14462
// exit ;
14460: GO 14850
// result := [ ] ;
14462: LD_ADDR_VAR 0 6
14466: PUSH
14467: EMPTY
14468: ST_TO_ADDR
// for i in list do
14469: LD_ADDR_VAR 0 7
14473: PUSH
14474: LD_VAR 0 3
14478: PUSH
14479: FOR_IN
14480: IFFALSE 14682
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14482: LD_ADDR_VAR 0 9
14486: PUSH
14487: LD_VAR 0 7
14491: PPUSH
14492: LD_VAR 0 1
14496: PPUSH
14497: LD_VAR 0 2
14501: PPUSH
14502: CALL_OW 297
14506: ST_TO_ADDR
// if not result then
14507: LD_VAR 0 6
14511: NOT
14512: IFFALSE 14538
// result := [ [ i , tmp ] ] else
14514: LD_ADDR_VAR 0 6
14518: PUSH
14519: LD_VAR 0 7
14523: PUSH
14524: LD_VAR 0 9
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: EMPTY
14534: LIST
14535: ST_TO_ADDR
14536: GO 14680
// begin if result [ result ] [ 2 ] < tmp then
14538: LD_VAR 0 6
14542: PUSH
14543: LD_VAR 0 6
14547: ARRAY
14548: PUSH
14549: LD_INT 2
14551: ARRAY
14552: PUSH
14553: LD_VAR 0 9
14557: LESS
14558: IFFALSE 14600
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14560: LD_ADDR_VAR 0 6
14564: PUSH
14565: LD_VAR 0 6
14569: PPUSH
14570: LD_VAR 0 6
14574: PUSH
14575: LD_INT 1
14577: PLUS
14578: PPUSH
14579: LD_VAR 0 7
14583: PUSH
14584: LD_VAR 0 9
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: PPUSH
14593: CALL_OW 2
14597: ST_TO_ADDR
14598: GO 14680
// for j = 1 to result do
14600: LD_ADDR_VAR 0 8
14604: PUSH
14605: DOUBLE
14606: LD_INT 1
14608: DEC
14609: ST_TO_ADDR
14610: LD_VAR 0 6
14614: PUSH
14615: FOR_TO
14616: IFFALSE 14678
// begin if tmp < result [ j ] [ 2 ] then
14618: LD_VAR 0 9
14622: PUSH
14623: LD_VAR 0 6
14627: PUSH
14628: LD_VAR 0 8
14632: ARRAY
14633: PUSH
14634: LD_INT 2
14636: ARRAY
14637: LESS
14638: IFFALSE 14676
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14640: LD_ADDR_VAR 0 6
14644: PUSH
14645: LD_VAR 0 6
14649: PPUSH
14650: LD_VAR 0 8
14654: PPUSH
14655: LD_VAR 0 7
14659: PUSH
14660: LD_VAR 0 9
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PPUSH
14669: CALL_OW 2
14673: ST_TO_ADDR
// break ;
14674: GO 14678
// end ; end ;
14676: GO 14615
14678: POP
14679: POP
// end ; end ;
14680: GO 14479
14682: POP
14683: POP
// if result and not asc then
14684: LD_VAR 0 6
14688: PUSH
14689: LD_VAR 0 4
14693: NOT
14694: AND
14695: IFFALSE 14770
// begin tmp := result ;
14697: LD_ADDR_VAR 0 9
14701: PUSH
14702: LD_VAR 0 6
14706: ST_TO_ADDR
// for i = tmp downto 1 do
14707: LD_ADDR_VAR 0 7
14711: PUSH
14712: DOUBLE
14713: LD_VAR 0 9
14717: INC
14718: ST_TO_ADDR
14719: LD_INT 1
14721: PUSH
14722: FOR_DOWNTO
14723: IFFALSE 14768
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14725: LD_ADDR_VAR 0 6
14729: PUSH
14730: LD_VAR 0 6
14734: PPUSH
14735: LD_VAR 0 9
14739: PUSH
14740: LD_VAR 0 7
14744: MINUS
14745: PUSH
14746: LD_INT 1
14748: PLUS
14749: PPUSH
14750: LD_VAR 0 9
14754: PUSH
14755: LD_VAR 0 7
14759: ARRAY
14760: PPUSH
14761: CALL_OW 1
14765: ST_TO_ADDR
14766: GO 14722
14768: POP
14769: POP
// end ; tmp := [ ] ;
14770: LD_ADDR_VAR 0 9
14774: PUSH
14775: EMPTY
14776: ST_TO_ADDR
// if mode then
14777: LD_VAR 0 5
14781: IFFALSE 14850
// begin for i = 1 to result do
14783: LD_ADDR_VAR 0 7
14787: PUSH
14788: DOUBLE
14789: LD_INT 1
14791: DEC
14792: ST_TO_ADDR
14793: LD_VAR 0 6
14797: PUSH
14798: FOR_TO
14799: IFFALSE 14838
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
14801: LD_ADDR_VAR 0 9
14805: PUSH
14806: LD_VAR 0 9
14810: PPUSH
14811: LD_VAR 0 7
14815: PPUSH
14816: LD_VAR 0 6
14820: PUSH
14821: LD_VAR 0 7
14825: ARRAY
14826: PUSH
14827: LD_INT 1
14829: ARRAY
14830: PPUSH
14831: CALL_OW 1
14835: ST_TO_ADDR
14836: GO 14798
14838: POP
14839: POP
// result := tmp ;
14840: LD_ADDR_VAR 0 6
14844: PUSH
14845: LD_VAR 0 9
14849: ST_TO_ADDR
// end ; end ;
14850: LD_VAR 0 6
14854: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
14855: LD_INT 0
14857: PPUSH
14858: PPUSH
14859: PPUSH
14860: PPUSH
14861: PPUSH
14862: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
14863: LD_ADDR_VAR 0 5
14867: PUSH
14868: LD_INT 0
14870: PUSH
14871: LD_INT 0
14873: PUSH
14874: LD_INT 0
14876: PUSH
14877: EMPTY
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: ST_TO_ADDR
// if not x or not y then
14885: LD_VAR 0 2
14889: NOT
14890: PUSH
14891: LD_VAR 0 3
14895: NOT
14896: OR
14897: IFFALSE 14901
// exit ;
14899: GO 16551
// if not range then
14901: LD_VAR 0 4
14905: NOT
14906: IFFALSE 14916
// range := 10 ;
14908: LD_ADDR_VAR 0 4
14912: PUSH
14913: LD_INT 10
14915: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14916: LD_ADDR_VAR 0 8
14920: PUSH
14921: LD_INT 81
14923: PUSH
14924: LD_VAR 0 1
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 92
14935: PUSH
14936: LD_VAR 0 2
14940: PUSH
14941: LD_VAR 0 3
14945: PUSH
14946: LD_VAR 0 4
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 3
14959: PUSH
14960: LD_INT 21
14962: PUSH
14963: LD_INT 3
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: PPUSH
14979: CALL_OW 69
14983: ST_TO_ADDR
// if not tmp then
14984: LD_VAR 0 8
14988: NOT
14989: IFFALSE 14993
// exit ;
14991: GO 16551
// for i in tmp do
14993: LD_ADDR_VAR 0 6
14997: PUSH
14998: LD_VAR 0 8
15002: PUSH
15003: FOR_IN
15004: IFFALSE 16526
// begin points := [ 0 , 0 , 0 ] ;
15006: LD_ADDR_VAR 0 9
15010: PUSH
15011: LD_INT 0
15013: PUSH
15014: LD_INT 0
15016: PUSH
15017: LD_INT 0
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: LIST
15024: ST_TO_ADDR
// bpoints := 1 ;
15025: LD_ADDR_VAR 0 10
15029: PUSH
15030: LD_INT 1
15032: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15033: LD_VAR 0 6
15037: PPUSH
15038: CALL_OW 247
15042: PUSH
15043: LD_INT 1
15045: DOUBLE
15046: EQUAL
15047: IFTRUE 15051
15049: GO 15629
15051: POP
// begin if GetClass ( i ) = 1 then
15052: LD_VAR 0 6
15056: PPUSH
15057: CALL_OW 257
15061: PUSH
15062: LD_INT 1
15064: EQUAL
15065: IFFALSE 15086
// points := [ 10 , 5 , 3 ] ;
15067: LD_ADDR_VAR 0 9
15071: PUSH
15072: LD_INT 10
15074: PUSH
15075: LD_INT 5
15077: PUSH
15078: LD_INT 3
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: LIST
15085: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15086: LD_VAR 0 6
15090: PPUSH
15091: CALL_OW 257
15095: PUSH
15096: LD_INT 2
15098: PUSH
15099: LD_INT 3
15101: PUSH
15102: LD_INT 4
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: LIST
15109: IN
15110: IFFALSE 15131
// points := [ 3 , 2 , 1 ] ;
15112: LD_ADDR_VAR 0 9
15116: PUSH
15117: LD_INT 3
15119: PUSH
15120: LD_INT 2
15122: PUSH
15123: LD_INT 1
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: LIST
15130: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15131: LD_VAR 0 6
15135: PPUSH
15136: CALL_OW 257
15140: PUSH
15141: LD_INT 5
15143: EQUAL
15144: IFFALSE 15165
// points := [ 130 , 5 , 2 ] ;
15146: LD_ADDR_VAR 0 9
15150: PUSH
15151: LD_INT 130
15153: PUSH
15154: LD_INT 5
15156: PUSH
15157: LD_INT 2
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: LIST
15164: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15165: LD_VAR 0 6
15169: PPUSH
15170: CALL_OW 257
15174: PUSH
15175: LD_INT 8
15177: EQUAL
15178: IFFALSE 15199
// points := [ 35 , 35 , 30 ] ;
15180: LD_ADDR_VAR 0 9
15184: PUSH
15185: LD_INT 35
15187: PUSH
15188: LD_INT 35
15190: PUSH
15191: LD_INT 30
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: LIST
15198: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15199: LD_VAR 0 6
15203: PPUSH
15204: CALL_OW 257
15208: PUSH
15209: LD_INT 9
15211: EQUAL
15212: IFFALSE 15233
// points := [ 20 , 55 , 40 ] ;
15214: LD_ADDR_VAR 0 9
15218: PUSH
15219: LD_INT 20
15221: PUSH
15222: LD_INT 55
15224: PUSH
15225: LD_INT 40
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: LIST
15232: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15233: LD_VAR 0 6
15237: PPUSH
15238: CALL_OW 257
15242: PUSH
15243: LD_INT 12
15245: PUSH
15246: LD_INT 16
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: IN
15253: IFFALSE 15274
// points := [ 5 , 3 , 2 ] ;
15255: LD_ADDR_VAR 0 9
15259: PUSH
15260: LD_INT 5
15262: PUSH
15263: LD_INT 3
15265: PUSH
15266: LD_INT 2
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: LIST
15273: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15274: LD_VAR 0 6
15278: PPUSH
15279: CALL_OW 257
15283: PUSH
15284: LD_INT 17
15286: EQUAL
15287: IFFALSE 15308
// points := [ 100 , 50 , 75 ] ;
15289: LD_ADDR_VAR 0 9
15293: PUSH
15294: LD_INT 100
15296: PUSH
15297: LD_INT 50
15299: PUSH
15300: LD_INT 75
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: LIST
15307: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15308: LD_VAR 0 6
15312: PPUSH
15313: CALL_OW 257
15317: PUSH
15318: LD_INT 15
15320: EQUAL
15321: IFFALSE 15342
// points := [ 10 , 5 , 3 ] ;
15323: LD_ADDR_VAR 0 9
15327: PUSH
15328: LD_INT 10
15330: PUSH
15331: LD_INT 5
15333: PUSH
15334: LD_INT 3
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: LIST
15341: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15342: LD_VAR 0 6
15346: PPUSH
15347: CALL_OW 257
15351: PUSH
15352: LD_INT 14
15354: EQUAL
15355: IFFALSE 15376
// points := [ 10 , 0 , 0 ] ;
15357: LD_ADDR_VAR 0 9
15361: PUSH
15362: LD_INT 10
15364: PUSH
15365: LD_INT 0
15367: PUSH
15368: LD_INT 0
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: LIST
15375: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15376: LD_VAR 0 6
15380: PPUSH
15381: CALL_OW 257
15385: PUSH
15386: LD_INT 11
15388: EQUAL
15389: IFFALSE 15410
// points := [ 30 , 10 , 5 ] ;
15391: LD_ADDR_VAR 0 9
15395: PUSH
15396: LD_INT 30
15398: PUSH
15399: LD_INT 10
15401: PUSH
15402: LD_INT 5
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: LIST
15409: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15410: LD_VAR 0 1
15414: PPUSH
15415: LD_INT 5
15417: PPUSH
15418: CALL_OW 321
15422: PUSH
15423: LD_INT 2
15425: EQUAL
15426: IFFALSE 15443
// bpoints := bpoints * 1.8 ;
15428: LD_ADDR_VAR 0 10
15432: PUSH
15433: LD_VAR 0 10
15437: PUSH
15438: LD_REAL  1.80000000000000E+0000
15441: MUL
15442: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15443: LD_VAR 0 6
15447: PPUSH
15448: CALL_OW 257
15452: PUSH
15453: LD_INT 1
15455: PUSH
15456: LD_INT 2
15458: PUSH
15459: LD_INT 3
15461: PUSH
15462: LD_INT 4
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: IN
15471: PUSH
15472: LD_VAR 0 1
15476: PPUSH
15477: LD_INT 51
15479: PPUSH
15480: CALL_OW 321
15484: PUSH
15485: LD_INT 2
15487: EQUAL
15488: AND
15489: IFFALSE 15506
// bpoints := bpoints * 1.2 ;
15491: LD_ADDR_VAR 0 10
15495: PUSH
15496: LD_VAR 0 10
15500: PUSH
15501: LD_REAL  1.20000000000000E+0000
15504: MUL
15505: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15506: LD_VAR 0 6
15510: PPUSH
15511: CALL_OW 257
15515: PUSH
15516: LD_INT 5
15518: PUSH
15519: LD_INT 7
15521: PUSH
15522: LD_INT 9
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: LIST
15529: IN
15530: PUSH
15531: LD_VAR 0 1
15535: PPUSH
15536: LD_INT 52
15538: PPUSH
15539: CALL_OW 321
15543: PUSH
15544: LD_INT 2
15546: EQUAL
15547: AND
15548: IFFALSE 15565
// bpoints := bpoints * 1.5 ;
15550: LD_ADDR_VAR 0 10
15554: PUSH
15555: LD_VAR 0 10
15559: PUSH
15560: LD_REAL  1.50000000000000E+0000
15563: MUL
15564: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15565: LD_VAR 0 1
15569: PPUSH
15570: LD_INT 66
15572: PPUSH
15573: CALL_OW 321
15577: PUSH
15578: LD_INT 2
15580: EQUAL
15581: IFFALSE 15598
// bpoints := bpoints * 1.1 ;
15583: LD_ADDR_VAR 0 10
15587: PUSH
15588: LD_VAR 0 10
15592: PUSH
15593: LD_REAL  1.10000000000000E+0000
15596: MUL
15597: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15598: LD_ADDR_VAR 0 10
15602: PUSH
15603: LD_VAR 0 10
15607: PUSH
15608: LD_VAR 0 6
15612: PPUSH
15613: LD_INT 1
15615: PPUSH
15616: CALL_OW 259
15620: PUSH
15621: LD_REAL  1.15000000000000E+0000
15624: MUL
15625: MUL
15626: ST_TO_ADDR
// end ; unit_vehicle :
15627: GO 16455
15629: LD_INT 2
15631: DOUBLE
15632: EQUAL
15633: IFTRUE 15637
15635: GO 16443
15637: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15638: LD_VAR 0 6
15642: PPUSH
15643: CALL_OW 264
15647: PUSH
15648: LD_INT 2
15650: PUSH
15651: LD_INT 42
15653: PUSH
15654: LD_INT 24
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: LIST
15661: IN
15662: IFFALSE 15683
// points := [ 25 , 5 , 3 ] ;
15664: LD_ADDR_VAR 0 9
15668: PUSH
15669: LD_INT 25
15671: PUSH
15672: LD_INT 5
15674: PUSH
15675: LD_INT 3
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: LIST
15682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15683: LD_VAR 0 6
15687: PPUSH
15688: CALL_OW 264
15692: PUSH
15693: LD_INT 4
15695: PUSH
15696: LD_INT 43
15698: PUSH
15699: LD_INT 25
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: IN
15707: IFFALSE 15728
// points := [ 40 , 15 , 5 ] ;
15709: LD_ADDR_VAR 0 9
15713: PUSH
15714: LD_INT 40
15716: PUSH
15717: LD_INT 15
15719: PUSH
15720: LD_INT 5
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15728: LD_VAR 0 6
15732: PPUSH
15733: CALL_OW 264
15737: PUSH
15738: LD_INT 3
15740: PUSH
15741: LD_INT 23
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: IN
15748: IFFALSE 15769
// points := [ 7 , 25 , 8 ] ;
15750: LD_ADDR_VAR 0 9
15754: PUSH
15755: LD_INT 7
15757: PUSH
15758: LD_INT 25
15760: PUSH
15761: LD_INT 8
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: LIST
15768: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
15769: LD_VAR 0 6
15773: PPUSH
15774: CALL_OW 264
15778: PUSH
15779: LD_INT 5
15781: PUSH
15782: LD_INT 27
15784: PUSH
15785: LD_INT 44
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: LIST
15792: IN
15793: IFFALSE 15814
// points := [ 14 , 50 , 16 ] ;
15795: LD_ADDR_VAR 0 9
15799: PUSH
15800: LD_INT 14
15802: PUSH
15803: LD_INT 50
15805: PUSH
15806: LD_INT 16
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: LIST
15813: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
15814: LD_VAR 0 6
15818: PPUSH
15819: CALL_OW 264
15823: PUSH
15824: LD_INT 6
15826: PUSH
15827: LD_INT 46
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: IN
15834: IFFALSE 15855
// points := [ 32 , 120 , 70 ] ;
15836: LD_ADDR_VAR 0 9
15840: PUSH
15841: LD_INT 32
15843: PUSH
15844: LD_INT 120
15846: PUSH
15847: LD_INT 70
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: LIST
15854: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
15855: LD_VAR 0 6
15859: PPUSH
15860: CALL_OW 264
15864: PUSH
15865: LD_INT 7
15867: PUSH
15868: LD_INT 28
15870: PUSH
15871: LD_INT 45
15873: PUSH
15874: LD_INT 92
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: IN
15883: IFFALSE 15904
// points := [ 35 , 20 , 45 ] ;
15885: LD_ADDR_VAR 0 9
15889: PUSH
15890: LD_INT 35
15892: PUSH
15893: LD_INT 20
15895: PUSH
15896: LD_INT 45
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: LIST
15903: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
15904: LD_VAR 0 6
15908: PPUSH
15909: CALL_OW 264
15913: PUSH
15914: LD_INT 47
15916: PUSH
15917: EMPTY
15918: LIST
15919: IN
15920: IFFALSE 15941
// points := [ 67 , 45 , 75 ] ;
15922: LD_ADDR_VAR 0 9
15926: PUSH
15927: LD_INT 67
15929: PUSH
15930: LD_INT 45
15932: PUSH
15933: LD_INT 75
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: LIST
15940: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
15941: LD_VAR 0 6
15945: PPUSH
15946: CALL_OW 264
15950: PUSH
15951: LD_INT 26
15953: PUSH
15954: EMPTY
15955: LIST
15956: IN
15957: IFFALSE 15978
// points := [ 120 , 30 , 80 ] ;
15959: LD_ADDR_VAR 0 9
15963: PUSH
15964: LD_INT 120
15966: PUSH
15967: LD_INT 30
15969: PUSH
15970: LD_INT 80
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: LIST
15977: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15978: LD_VAR 0 6
15982: PPUSH
15983: CALL_OW 264
15987: PUSH
15988: LD_INT 22
15990: PUSH
15991: EMPTY
15992: LIST
15993: IN
15994: IFFALSE 16015
// points := [ 40 , 1 , 1 ] ;
15996: LD_ADDR_VAR 0 9
16000: PUSH
16001: LD_INT 40
16003: PUSH
16004: LD_INT 1
16006: PUSH
16007: LD_INT 1
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: LIST
16014: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16015: LD_VAR 0 6
16019: PPUSH
16020: CALL_OW 264
16024: PUSH
16025: LD_INT 29
16027: PUSH
16028: EMPTY
16029: LIST
16030: IN
16031: IFFALSE 16052
// points := [ 70 , 200 , 400 ] ;
16033: LD_ADDR_VAR 0 9
16037: PUSH
16038: LD_INT 70
16040: PUSH
16041: LD_INT 200
16043: PUSH
16044: LD_INT 400
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: LIST
16051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16052: LD_VAR 0 6
16056: PPUSH
16057: CALL_OW 264
16061: PUSH
16062: LD_INT 14
16064: PUSH
16065: LD_INT 53
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: IN
16072: IFFALSE 16093
// points := [ 40 , 10 , 20 ] ;
16074: LD_ADDR_VAR 0 9
16078: PUSH
16079: LD_INT 40
16081: PUSH
16082: LD_INT 10
16084: PUSH
16085: LD_INT 20
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16093: LD_VAR 0 6
16097: PPUSH
16098: CALL_OW 264
16102: PUSH
16103: LD_INT 9
16105: PUSH
16106: EMPTY
16107: LIST
16108: IN
16109: IFFALSE 16130
// points := [ 5 , 70 , 20 ] ;
16111: LD_ADDR_VAR 0 9
16115: PUSH
16116: LD_INT 5
16118: PUSH
16119: LD_INT 70
16121: PUSH
16122: LD_INT 20
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: LIST
16129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16130: LD_VAR 0 6
16134: PPUSH
16135: CALL_OW 264
16139: PUSH
16140: LD_INT 10
16142: PUSH
16143: EMPTY
16144: LIST
16145: IN
16146: IFFALSE 16167
// points := [ 35 , 110 , 70 ] ;
16148: LD_ADDR_VAR 0 9
16152: PUSH
16153: LD_INT 35
16155: PUSH
16156: LD_INT 110
16158: PUSH
16159: LD_INT 70
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16167: LD_VAR 0 6
16171: PPUSH
16172: CALL_OW 265
16176: PUSH
16177: LD_INT 25
16179: EQUAL
16180: IFFALSE 16201
// points := [ 80 , 65 , 100 ] ;
16182: LD_ADDR_VAR 0 9
16186: PUSH
16187: LD_INT 80
16189: PUSH
16190: LD_INT 65
16192: PUSH
16193: LD_INT 100
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: LIST
16200: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16201: LD_VAR 0 6
16205: PPUSH
16206: CALL_OW 263
16210: PUSH
16211: LD_INT 1
16213: EQUAL
16214: IFFALSE 16249
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16216: LD_ADDR_VAR 0 10
16220: PUSH
16221: LD_VAR 0 10
16225: PUSH
16226: LD_VAR 0 6
16230: PPUSH
16231: CALL_OW 311
16235: PPUSH
16236: LD_INT 3
16238: PPUSH
16239: CALL_OW 259
16243: PUSH
16244: LD_INT 4
16246: MUL
16247: MUL
16248: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16249: LD_VAR 0 6
16253: PPUSH
16254: CALL_OW 263
16258: PUSH
16259: LD_INT 2
16261: EQUAL
16262: IFFALSE 16313
// begin j := IsControledBy ( i ) ;
16264: LD_ADDR_VAR 0 7
16268: PUSH
16269: LD_VAR 0 6
16273: PPUSH
16274: CALL_OW 312
16278: ST_TO_ADDR
// if j then
16279: LD_VAR 0 7
16283: IFFALSE 16313
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16285: LD_ADDR_VAR 0 10
16289: PUSH
16290: LD_VAR 0 10
16294: PUSH
16295: LD_VAR 0 7
16299: PPUSH
16300: LD_INT 3
16302: PPUSH
16303: CALL_OW 259
16307: PUSH
16308: LD_INT 3
16310: MUL
16311: MUL
16312: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16313: LD_VAR 0 6
16317: PPUSH
16318: CALL_OW 264
16322: PUSH
16323: LD_INT 5
16325: PUSH
16326: LD_INT 6
16328: PUSH
16329: LD_INT 46
16331: PUSH
16332: LD_INT 44
16334: PUSH
16335: LD_INT 47
16337: PUSH
16338: LD_INT 45
16340: PUSH
16341: LD_INT 28
16343: PUSH
16344: LD_INT 7
16346: PUSH
16347: LD_INT 27
16349: PUSH
16350: LD_INT 29
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: IN
16365: PUSH
16366: LD_VAR 0 1
16370: PPUSH
16371: LD_INT 52
16373: PPUSH
16374: CALL_OW 321
16378: PUSH
16379: LD_INT 2
16381: EQUAL
16382: AND
16383: IFFALSE 16400
// bpoints := bpoints * 1.2 ;
16385: LD_ADDR_VAR 0 10
16389: PUSH
16390: LD_VAR 0 10
16394: PUSH
16395: LD_REAL  1.20000000000000E+0000
16398: MUL
16399: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16400: LD_VAR 0 6
16404: PPUSH
16405: CALL_OW 264
16409: PUSH
16410: LD_INT 6
16412: PUSH
16413: LD_INT 46
16415: PUSH
16416: LD_INT 47
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: LIST
16423: IN
16424: IFFALSE 16441
// bpoints := bpoints * 1.2 ;
16426: LD_ADDR_VAR 0 10
16430: PUSH
16431: LD_VAR 0 10
16435: PUSH
16436: LD_REAL  1.20000000000000E+0000
16439: MUL
16440: ST_TO_ADDR
// end ; unit_building :
16441: GO 16455
16443: LD_INT 3
16445: DOUBLE
16446: EQUAL
16447: IFTRUE 16451
16449: GO 16454
16451: POP
// ; end ;
16452: GO 16455
16454: POP
// for j = 1 to 3 do
16455: LD_ADDR_VAR 0 7
16459: PUSH
16460: DOUBLE
16461: LD_INT 1
16463: DEC
16464: ST_TO_ADDR
16465: LD_INT 3
16467: PUSH
16468: FOR_TO
16469: IFFALSE 16522
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16471: LD_ADDR_VAR 0 5
16475: PUSH
16476: LD_VAR 0 5
16480: PPUSH
16481: LD_VAR 0 7
16485: PPUSH
16486: LD_VAR 0 5
16490: PUSH
16491: LD_VAR 0 7
16495: ARRAY
16496: PUSH
16497: LD_VAR 0 9
16501: PUSH
16502: LD_VAR 0 7
16506: ARRAY
16507: PUSH
16508: LD_VAR 0 10
16512: MUL
16513: PLUS
16514: PPUSH
16515: CALL_OW 1
16519: ST_TO_ADDR
16520: GO 16468
16522: POP
16523: POP
// end ;
16524: GO 15003
16526: POP
16527: POP
// result := Replace ( result , 4 , tmp ) ;
16528: LD_ADDR_VAR 0 5
16532: PUSH
16533: LD_VAR 0 5
16537: PPUSH
16538: LD_INT 4
16540: PPUSH
16541: LD_VAR 0 8
16545: PPUSH
16546: CALL_OW 1
16550: ST_TO_ADDR
// end ;
16551: LD_VAR 0 5
16555: RET
// export function DangerAtRange ( unit , range ) ; begin
16556: LD_INT 0
16558: PPUSH
// if not unit then
16559: LD_VAR 0 1
16563: NOT
16564: IFFALSE 16568
// exit ;
16566: GO 16613
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16568: LD_ADDR_VAR 0 3
16572: PUSH
16573: LD_VAR 0 1
16577: PPUSH
16578: CALL_OW 255
16582: PPUSH
16583: LD_VAR 0 1
16587: PPUSH
16588: CALL_OW 250
16592: PPUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 251
16602: PPUSH
16603: LD_VAR 0 2
16607: PPUSH
16608: CALL 14855 0 4
16612: ST_TO_ADDR
// end ;
16613: LD_VAR 0 3
16617: RET
// export function DangerInArea ( side , area ) ; begin
16618: LD_INT 0
16620: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16621: LD_ADDR_VAR 0 3
16625: PUSH
16626: LD_VAR 0 2
16630: PPUSH
16631: LD_INT 81
16633: PUSH
16634: LD_VAR 0 1
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PPUSH
16643: CALL_OW 70
16647: ST_TO_ADDR
// end ;
16648: LD_VAR 0 3
16652: RET
// export function IsExtension ( b ) ; begin
16653: LD_INT 0
16655: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16656: LD_ADDR_VAR 0 2
16660: PUSH
16661: LD_VAR 0 1
16665: PUSH
16666: LD_INT 23
16668: PUSH
16669: LD_INT 20
16671: PUSH
16672: LD_INT 22
16674: PUSH
16675: LD_INT 17
16677: PUSH
16678: LD_INT 24
16680: PUSH
16681: LD_INT 21
16683: PUSH
16684: LD_INT 19
16686: PUSH
16687: LD_INT 16
16689: PUSH
16690: LD_INT 25
16692: PUSH
16693: LD_INT 18
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: IN
16708: ST_TO_ADDR
// end ;
16709: LD_VAR 0 2
16713: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
16714: LD_INT 0
16716: PPUSH
16717: PPUSH
16718: PPUSH
// result := [ ] ;
16719: LD_ADDR_VAR 0 4
16723: PUSH
16724: EMPTY
16725: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16726: LD_ADDR_VAR 0 5
16730: PUSH
16731: LD_VAR 0 2
16735: PPUSH
16736: LD_INT 21
16738: PUSH
16739: LD_INT 3
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PPUSH
16746: CALL_OW 70
16750: ST_TO_ADDR
// if not tmp then
16751: LD_VAR 0 5
16755: NOT
16756: IFFALSE 16760
// exit ;
16758: GO 16824
// if checkLink then
16760: LD_VAR 0 3
16764: IFFALSE 16814
// begin for i in tmp do
16766: LD_ADDR_VAR 0 6
16770: PUSH
16771: LD_VAR 0 5
16775: PUSH
16776: FOR_IN
16777: IFFALSE 16812
// if GetBase ( i ) <> base then
16779: LD_VAR 0 6
16783: PPUSH
16784: CALL_OW 274
16788: PUSH
16789: LD_VAR 0 1
16793: NONEQUAL
16794: IFFALSE 16810
// ComLinkToBase ( base , i ) ;
16796: LD_VAR 0 1
16800: PPUSH
16801: LD_VAR 0 6
16805: PPUSH
16806: CALL_OW 169
16810: GO 16776
16812: POP
16813: POP
// end ; result := tmp ;
16814: LD_ADDR_VAR 0 4
16818: PUSH
16819: LD_VAR 0 5
16823: ST_TO_ADDR
// end ;
16824: LD_VAR 0 4
16828: RET
// export function ComComplete ( units , b ) ; var i ; begin
16829: LD_INT 0
16831: PPUSH
16832: PPUSH
// if not units then
16833: LD_VAR 0 1
16837: NOT
16838: IFFALSE 16842
// exit ;
16840: GO 16932
// for i in units do
16842: LD_ADDR_VAR 0 4
16846: PUSH
16847: LD_VAR 0 1
16851: PUSH
16852: FOR_IN
16853: IFFALSE 16930
// if BuildingStatus ( b ) = bs_build then
16855: LD_VAR 0 2
16859: PPUSH
16860: CALL_OW 461
16864: PUSH
16865: LD_INT 1
16867: EQUAL
16868: IFFALSE 16928
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
16870: LD_VAR 0 4
16874: PPUSH
16875: LD_STRING h
16877: PUSH
16878: LD_VAR 0 2
16882: PPUSH
16883: CALL_OW 250
16887: PUSH
16888: LD_VAR 0 2
16892: PPUSH
16893: CALL_OW 251
16897: PUSH
16898: LD_VAR 0 2
16902: PUSH
16903: LD_INT 0
16905: PUSH
16906: LD_INT 0
16908: PUSH
16909: LD_INT 0
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: PUSH
16921: EMPTY
16922: LIST
16923: PPUSH
16924: CALL_OW 446
16928: GO 16852
16930: POP
16931: POP
// end ;
16932: LD_VAR 0 3
16936: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
16937: LD_INT 0
16939: PPUSH
16940: PPUSH
16941: PPUSH
16942: PPUSH
16943: PPUSH
16944: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
16945: LD_VAR 0 1
16949: NOT
16950: PUSH
16951: LD_VAR 0 1
16955: PPUSH
16956: CALL_OW 263
16960: PUSH
16961: LD_INT 2
16963: NONEQUAL
16964: OR
16965: IFFALSE 16969
// exit ;
16967: GO 17285
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16969: LD_ADDR_VAR 0 6
16973: PUSH
16974: LD_INT 22
16976: PUSH
16977: LD_VAR 0 1
16981: PPUSH
16982: CALL_OW 255
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: LD_INT 2
16993: PUSH
16994: LD_INT 30
16996: PUSH
16997: LD_INT 36
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 34
17006: PUSH
17007: LD_INT 31
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: LIST
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PPUSH
17023: CALL_OW 69
17027: ST_TO_ADDR
// if not tmp then
17028: LD_VAR 0 6
17032: NOT
17033: IFFALSE 17037
// exit ;
17035: GO 17285
// result := [ ] ;
17037: LD_ADDR_VAR 0 2
17041: PUSH
17042: EMPTY
17043: ST_TO_ADDR
// for i in tmp do
17044: LD_ADDR_VAR 0 3
17048: PUSH
17049: LD_VAR 0 6
17053: PUSH
17054: FOR_IN
17055: IFFALSE 17126
// begin t := UnitsInside ( i ) ;
17057: LD_ADDR_VAR 0 4
17061: PUSH
17062: LD_VAR 0 3
17066: PPUSH
17067: CALL_OW 313
17071: ST_TO_ADDR
// if t then
17072: LD_VAR 0 4
17076: IFFALSE 17124
// for j in t do
17078: LD_ADDR_VAR 0 7
17082: PUSH
17083: LD_VAR 0 4
17087: PUSH
17088: FOR_IN
17089: IFFALSE 17122
// result := Replace ( result , result + 1 , j ) ;
17091: LD_ADDR_VAR 0 2
17095: PUSH
17096: LD_VAR 0 2
17100: PPUSH
17101: LD_VAR 0 2
17105: PUSH
17106: LD_INT 1
17108: PLUS
17109: PPUSH
17110: LD_VAR 0 7
17114: PPUSH
17115: CALL_OW 1
17119: ST_TO_ADDR
17120: GO 17088
17122: POP
17123: POP
// end ;
17124: GO 17054
17126: POP
17127: POP
// if not result then
17128: LD_VAR 0 2
17132: NOT
17133: IFFALSE 17137
// exit ;
17135: GO 17285
// mech := result [ 1 ] ;
17137: LD_ADDR_VAR 0 5
17141: PUSH
17142: LD_VAR 0 2
17146: PUSH
17147: LD_INT 1
17149: ARRAY
17150: ST_TO_ADDR
// if result > 1 then
17151: LD_VAR 0 2
17155: PUSH
17156: LD_INT 1
17158: GREATER
17159: IFFALSE 17271
// begin for i = 2 to result do
17161: LD_ADDR_VAR 0 3
17165: PUSH
17166: DOUBLE
17167: LD_INT 2
17169: DEC
17170: ST_TO_ADDR
17171: LD_VAR 0 2
17175: PUSH
17176: FOR_TO
17177: IFFALSE 17269
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17179: LD_ADDR_VAR 0 4
17183: PUSH
17184: LD_VAR 0 2
17188: PUSH
17189: LD_VAR 0 3
17193: ARRAY
17194: PPUSH
17195: LD_INT 3
17197: PPUSH
17198: CALL_OW 259
17202: PUSH
17203: LD_VAR 0 2
17207: PUSH
17208: LD_VAR 0 3
17212: ARRAY
17213: PPUSH
17214: CALL_OW 432
17218: MINUS
17219: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17220: LD_VAR 0 4
17224: PUSH
17225: LD_VAR 0 5
17229: PPUSH
17230: LD_INT 3
17232: PPUSH
17233: CALL_OW 259
17237: PUSH
17238: LD_VAR 0 5
17242: PPUSH
17243: CALL_OW 432
17247: MINUS
17248: GREATEREQUAL
17249: IFFALSE 17267
// mech := result [ i ] ;
17251: LD_ADDR_VAR 0 5
17255: PUSH
17256: LD_VAR 0 2
17260: PUSH
17261: LD_VAR 0 3
17265: ARRAY
17266: ST_TO_ADDR
// end ;
17267: GO 17176
17269: POP
17270: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17271: LD_VAR 0 1
17275: PPUSH
17276: LD_VAR 0 5
17280: PPUSH
17281: CALL_OW 135
// end ;
17285: LD_VAR 0 2
17289: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17290: LD_INT 0
17292: PPUSH
17293: PPUSH
17294: PPUSH
17295: PPUSH
17296: PPUSH
17297: PPUSH
17298: PPUSH
17299: PPUSH
17300: PPUSH
17301: PPUSH
17302: PPUSH
17303: PPUSH
17304: PPUSH
// result := [ ] ;
17305: LD_ADDR_VAR 0 7
17309: PUSH
17310: EMPTY
17311: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17312: LD_VAR 0 1
17316: PPUSH
17317: CALL_OW 266
17321: PUSH
17322: LD_INT 0
17324: PUSH
17325: LD_INT 1
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: IN
17332: NOT
17333: IFFALSE 17337
// exit ;
17335: GO 18971
// if name then
17337: LD_VAR 0 3
17341: IFFALSE 17357
// SetBName ( base_dep , name ) ;
17343: LD_VAR 0 1
17347: PPUSH
17348: LD_VAR 0 3
17352: PPUSH
17353: CALL_OW 500
// base := GetBase ( base_dep ) ;
17357: LD_ADDR_VAR 0 15
17361: PUSH
17362: LD_VAR 0 1
17366: PPUSH
17367: CALL_OW 274
17371: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17372: LD_ADDR_VAR 0 16
17376: PUSH
17377: LD_VAR 0 1
17381: PPUSH
17382: CALL_OW 255
17386: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17387: LD_ADDR_VAR 0 17
17391: PUSH
17392: LD_VAR 0 1
17396: PPUSH
17397: CALL_OW 248
17401: ST_TO_ADDR
// if sources then
17402: LD_VAR 0 5
17406: IFFALSE 17453
// for i = 1 to 3 do
17408: LD_ADDR_VAR 0 8
17412: PUSH
17413: DOUBLE
17414: LD_INT 1
17416: DEC
17417: ST_TO_ADDR
17418: LD_INT 3
17420: PUSH
17421: FOR_TO
17422: IFFALSE 17451
// AddResourceType ( base , i , sources [ i ] ) ;
17424: LD_VAR 0 15
17428: PPUSH
17429: LD_VAR 0 8
17433: PPUSH
17434: LD_VAR 0 5
17438: PUSH
17439: LD_VAR 0 8
17443: ARRAY
17444: PPUSH
17445: CALL_OW 276
17449: GO 17421
17451: POP
17452: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17453: LD_ADDR_VAR 0 18
17457: PUSH
17458: LD_VAR 0 15
17462: PPUSH
17463: LD_VAR 0 2
17467: PPUSH
17468: LD_INT 1
17470: PPUSH
17471: CALL 16714 0 3
17475: ST_TO_ADDR
// InitHc ;
17476: CALL_OW 19
// InitUc ;
17480: CALL_OW 18
// uc_side := side ;
17484: LD_ADDR_OWVAR 20
17488: PUSH
17489: LD_VAR 0 16
17493: ST_TO_ADDR
// uc_nation := nation ;
17494: LD_ADDR_OWVAR 21
17498: PUSH
17499: LD_VAR 0 17
17503: ST_TO_ADDR
// if buildings then
17504: LD_VAR 0 18
17508: IFFALSE 18830
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17510: LD_ADDR_VAR 0 19
17514: PUSH
17515: LD_VAR 0 18
17519: PPUSH
17520: LD_INT 2
17522: PUSH
17523: LD_INT 30
17525: PUSH
17526: LD_INT 29
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 30
17535: PUSH
17536: LD_INT 30
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: PPUSH
17548: CALL_OW 72
17552: ST_TO_ADDR
// if tmp then
17553: LD_VAR 0 19
17557: IFFALSE 17605
// for i in tmp do
17559: LD_ADDR_VAR 0 8
17563: PUSH
17564: LD_VAR 0 19
17568: PUSH
17569: FOR_IN
17570: IFFALSE 17603
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17572: LD_VAR 0 8
17576: PPUSH
17577: CALL_OW 250
17581: PPUSH
17582: LD_VAR 0 8
17586: PPUSH
17587: CALL_OW 251
17591: PPUSH
17592: LD_VAR 0 16
17596: PPUSH
17597: CALL_OW 441
17601: GO 17569
17603: POP
17604: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17605: LD_VAR 0 18
17609: PPUSH
17610: LD_INT 2
17612: PUSH
17613: LD_INT 30
17615: PUSH
17616: LD_INT 32
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 30
17625: PUSH
17626: LD_INT 33
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: PPUSH
17638: CALL_OW 72
17642: IFFALSE 17730
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17644: LD_ADDR_VAR 0 8
17648: PUSH
17649: LD_VAR 0 18
17653: PPUSH
17654: LD_INT 2
17656: PUSH
17657: LD_INT 30
17659: PUSH
17660: LD_INT 32
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 30
17669: PUSH
17670: LD_INT 33
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: LIST
17681: PPUSH
17682: CALL_OW 72
17686: PUSH
17687: FOR_IN
17688: IFFALSE 17728
// begin if not GetBWeapon ( i ) then
17690: LD_VAR 0 8
17694: PPUSH
17695: CALL_OW 269
17699: NOT
17700: IFFALSE 17726
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17702: LD_VAR 0 8
17706: PPUSH
17707: LD_VAR 0 8
17711: PPUSH
17712: LD_VAR 0 2
17716: PPUSH
17717: CALL 18976 0 2
17721: PPUSH
17722: CALL_OW 431
// end ;
17726: GO 17687
17728: POP
17729: POP
// end ; for i = 1 to personel do
17730: LD_ADDR_VAR 0 8
17734: PUSH
17735: DOUBLE
17736: LD_INT 1
17738: DEC
17739: ST_TO_ADDR
17740: LD_VAR 0 6
17744: PUSH
17745: FOR_TO
17746: IFFALSE 18810
// begin if i > 4 then
17748: LD_VAR 0 8
17752: PUSH
17753: LD_INT 4
17755: GREATER
17756: IFFALSE 17760
// break ;
17758: GO 18810
// case i of 1 :
17760: LD_VAR 0 8
17764: PUSH
17765: LD_INT 1
17767: DOUBLE
17768: EQUAL
17769: IFTRUE 17773
17771: GO 17853
17773: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
17774: LD_ADDR_VAR 0 12
17778: PUSH
17779: LD_VAR 0 18
17783: PPUSH
17784: LD_INT 22
17786: PUSH
17787: LD_VAR 0 16
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 58
17798: PUSH
17799: EMPTY
17800: LIST
17801: PUSH
17802: LD_INT 2
17804: PUSH
17805: LD_INT 30
17807: PUSH
17808: LD_INT 32
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 30
17817: PUSH
17818: LD_INT 4
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 30
17827: PUSH
17828: LD_INT 5
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: LIST
17845: PPUSH
17846: CALL_OW 72
17850: ST_TO_ADDR
17851: GO 18075
17853: LD_INT 2
17855: DOUBLE
17856: EQUAL
17857: IFTRUE 17861
17859: GO 17923
17861: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
17862: LD_ADDR_VAR 0 12
17866: PUSH
17867: LD_VAR 0 18
17871: PPUSH
17872: LD_INT 22
17874: PUSH
17875: LD_VAR 0 16
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 2
17886: PUSH
17887: LD_INT 30
17889: PUSH
17890: LD_INT 0
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 30
17899: PUSH
17900: LD_INT 1
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: LIST
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PPUSH
17916: CALL_OW 72
17920: ST_TO_ADDR
17921: GO 18075
17923: LD_INT 3
17925: DOUBLE
17926: EQUAL
17927: IFTRUE 17931
17929: GO 17993
17931: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
17932: LD_ADDR_VAR 0 12
17936: PUSH
17937: LD_VAR 0 18
17941: PPUSH
17942: LD_INT 22
17944: PUSH
17945: LD_VAR 0 16
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 2
17956: PUSH
17957: LD_INT 30
17959: PUSH
17960: LD_INT 2
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 30
17969: PUSH
17970: LD_INT 3
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: LIST
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PPUSH
17986: CALL_OW 72
17990: ST_TO_ADDR
17991: GO 18075
17993: LD_INT 4
17995: DOUBLE
17996: EQUAL
17997: IFTRUE 18001
17999: GO 18074
18001: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18002: LD_ADDR_VAR 0 12
18006: PUSH
18007: LD_VAR 0 18
18011: PPUSH
18012: LD_INT 22
18014: PUSH
18015: LD_VAR 0 16
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 2
18026: PUSH
18027: LD_INT 30
18029: PUSH
18030: LD_INT 6
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 30
18039: PUSH
18040: LD_INT 7
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 30
18049: PUSH
18050: LD_INT 8
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PPUSH
18067: CALL_OW 72
18071: ST_TO_ADDR
18072: GO 18075
18074: POP
// if i = 1 then
18075: LD_VAR 0 8
18079: PUSH
18080: LD_INT 1
18082: EQUAL
18083: IFFALSE 18194
// begin tmp := [ ] ;
18085: LD_ADDR_VAR 0 19
18089: PUSH
18090: EMPTY
18091: ST_TO_ADDR
// for j in f do
18092: LD_ADDR_VAR 0 9
18096: PUSH
18097: LD_VAR 0 12
18101: PUSH
18102: FOR_IN
18103: IFFALSE 18176
// if GetBType ( j ) = b_bunker then
18105: LD_VAR 0 9
18109: PPUSH
18110: CALL_OW 266
18114: PUSH
18115: LD_INT 32
18117: EQUAL
18118: IFFALSE 18145
// tmp := Insert ( tmp , 1 , j ) else
18120: LD_ADDR_VAR 0 19
18124: PUSH
18125: LD_VAR 0 19
18129: PPUSH
18130: LD_INT 1
18132: PPUSH
18133: LD_VAR 0 9
18137: PPUSH
18138: CALL_OW 2
18142: ST_TO_ADDR
18143: GO 18174
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18145: LD_ADDR_VAR 0 19
18149: PUSH
18150: LD_VAR 0 19
18154: PPUSH
18155: LD_VAR 0 19
18159: PUSH
18160: LD_INT 1
18162: PLUS
18163: PPUSH
18164: LD_VAR 0 9
18168: PPUSH
18169: CALL_OW 2
18173: ST_TO_ADDR
18174: GO 18102
18176: POP
18177: POP
// if tmp then
18178: LD_VAR 0 19
18182: IFFALSE 18194
// f := tmp ;
18184: LD_ADDR_VAR 0 12
18188: PUSH
18189: LD_VAR 0 19
18193: ST_TO_ADDR
// end ; x := personel [ i ] ;
18194: LD_ADDR_VAR 0 13
18198: PUSH
18199: LD_VAR 0 6
18203: PUSH
18204: LD_VAR 0 8
18208: ARRAY
18209: ST_TO_ADDR
// if x = - 1 then
18210: LD_VAR 0 13
18214: PUSH
18215: LD_INT 1
18217: NEG
18218: EQUAL
18219: IFFALSE 18428
// begin for j in f do
18221: LD_ADDR_VAR 0 9
18225: PUSH
18226: LD_VAR 0 12
18230: PUSH
18231: FOR_IN
18232: IFFALSE 18424
// repeat InitHc ;
18234: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18238: LD_VAR 0 9
18242: PPUSH
18243: CALL_OW 266
18247: PUSH
18248: LD_INT 5
18250: EQUAL
18251: IFFALSE 18321
// begin if UnitsInside ( j ) < 3 then
18253: LD_VAR 0 9
18257: PPUSH
18258: CALL_OW 313
18262: PUSH
18263: LD_INT 3
18265: LESS
18266: IFFALSE 18302
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18268: LD_INT 0
18270: PPUSH
18271: LD_INT 5
18273: PUSH
18274: LD_INT 8
18276: PUSH
18277: LD_INT 9
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: LIST
18284: PUSH
18285: LD_VAR 0 17
18289: ARRAY
18290: PPUSH
18291: LD_VAR 0 4
18295: PPUSH
18296: CALL_OW 380
18300: GO 18319
// PrepareHuman ( false , i , skill ) ;
18302: LD_INT 0
18304: PPUSH
18305: LD_VAR 0 8
18309: PPUSH
18310: LD_VAR 0 4
18314: PPUSH
18315: CALL_OW 380
// end else
18319: GO 18338
// PrepareHuman ( false , i , skill ) ;
18321: LD_INT 0
18323: PPUSH
18324: LD_VAR 0 8
18328: PPUSH
18329: LD_VAR 0 4
18333: PPUSH
18334: CALL_OW 380
// un := CreateHuman ;
18338: LD_ADDR_VAR 0 14
18342: PUSH
18343: CALL_OW 44
18347: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18348: LD_ADDR_VAR 0 7
18352: PUSH
18353: LD_VAR 0 7
18357: PPUSH
18358: LD_INT 1
18360: PPUSH
18361: LD_VAR 0 14
18365: PPUSH
18366: CALL_OW 2
18370: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18371: LD_VAR 0 14
18375: PPUSH
18376: LD_VAR 0 9
18380: PPUSH
18381: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18385: LD_VAR 0 9
18389: PPUSH
18390: CALL_OW 313
18394: PUSH
18395: LD_INT 6
18397: EQUAL
18398: PUSH
18399: LD_VAR 0 9
18403: PPUSH
18404: CALL_OW 266
18408: PUSH
18409: LD_INT 32
18411: PUSH
18412: LD_INT 31
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: IN
18419: OR
18420: IFFALSE 18234
18422: GO 18231
18424: POP
18425: POP
// end else
18426: GO 18808
// for j = 1 to x do
18428: LD_ADDR_VAR 0 9
18432: PUSH
18433: DOUBLE
18434: LD_INT 1
18436: DEC
18437: ST_TO_ADDR
18438: LD_VAR 0 13
18442: PUSH
18443: FOR_TO
18444: IFFALSE 18806
// begin InitHc ;
18446: CALL_OW 19
// if not f then
18450: LD_VAR 0 12
18454: NOT
18455: IFFALSE 18544
// begin PrepareHuman ( false , i , skill ) ;
18457: LD_INT 0
18459: PPUSH
18460: LD_VAR 0 8
18464: PPUSH
18465: LD_VAR 0 4
18469: PPUSH
18470: CALL_OW 380
// un := CreateHuman ;
18474: LD_ADDR_VAR 0 14
18478: PUSH
18479: CALL_OW 44
18483: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18484: LD_ADDR_VAR 0 7
18488: PUSH
18489: LD_VAR 0 7
18493: PPUSH
18494: LD_INT 1
18496: PPUSH
18497: LD_VAR 0 14
18501: PPUSH
18502: CALL_OW 2
18506: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18507: LD_VAR 0 14
18511: PPUSH
18512: LD_VAR 0 1
18516: PPUSH
18517: CALL_OW 250
18521: PPUSH
18522: LD_VAR 0 1
18526: PPUSH
18527: CALL_OW 251
18531: PPUSH
18532: LD_INT 10
18534: PPUSH
18535: LD_INT 0
18537: PPUSH
18538: CALL_OW 50
// continue ;
18542: GO 18443
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18544: LD_VAR 0 12
18548: PUSH
18549: LD_INT 1
18551: ARRAY
18552: PPUSH
18553: CALL_OW 313
18557: PUSH
18558: LD_VAR 0 12
18562: PUSH
18563: LD_INT 1
18565: ARRAY
18566: PPUSH
18567: CALL_OW 266
18571: PUSH
18572: LD_INT 32
18574: PUSH
18575: LD_INT 31
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: IN
18582: AND
18583: PUSH
18584: LD_VAR 0 12
18588: PUSH
18589: LD_INT 1
18591: ARRAY
18592: PPUSH
18593: CALL_OW 313
18597: PUSH
18598: LD_INT 6
18600: EQUAL
18601: OR
18602: IFFALSE 18622
// f := Delete ( f , 1 ) ;
18604: LD_ADDR_VAR 0 12
18608: PUSH
18609: LD_VAR 0 12
18613: PPUSH
18614: LD_INT 1
18616: PPUSH
18617: CALL_OW 3
18621: ST_TO_ADDR
// if not f then
18622: LD_VAR 0 12
18626: NOT
18627: IFFALSE 18645
// begin x := x + 2 ;
18629: LD_ADDR_VAR 0 13
18633: PUSH
18634: LD_VAR 0 13
18638: PUSH
18639: LD_INT 2
18641: PLUS
18642: ST_TO_ADDR
// continue ;
18643: GO 18443
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18645: LD_VAR 0 12
18649: PUSH
18650: LD_INT 1
18652: ARRAY
18653: PPUSH
18654: CALL_OW 266
18658: PUSH
18659: LD_INT 5
18661: EQUAL
18662: IFFALSE 18736
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18664: LD_VAR 0 12
18668: PUSH
18669: LD_INT 1
18671: ARRAY
18672: PPUSH
18673: CALL_OW 313
18677: PUSH
18678: LD_INT 3
18680: LESS
18681: IFFALSE 18717
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18683: LD_INT 0
18685: PPUSH
18686: LD_INT 5
18688: PUSH
18689: LD_INT 8
18691: PUSH
18692: LD_INT 9
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: LIST
18699: PUSH
18700: LD_VAR 0 17
18704: ARRAY
18705: PPUSH
18706: LD_VAR 0 4
18710: PPUSH
18711: CALL_OW 380
18715: GO 18734
// PrepareHuman ( false , i , skill ) ;
18717: LD_INT 0
18719: PPUSH
18720: LD_VAR 0 8
18724: PPUSH
18725: LD_VAR 0 4
18729: PPUSH
18730: CALL_OW 380
// end else
18734: GO 18753
// PrepareHuman ( false , i , skill ) ;
18736: LD_INT 0
18738: PPUSH
18739: LD_VAR 0 8
18743: PPUSH
18744: LD_VAR 0 4
18748: PPUSH
18749: CALL_OW 380
// un := CreateHuman ;
18753: LD_ADDR_VAR 0 14
18757: PUSH
18758: CALL_OW 44
18762: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18763: LD_ADDR_VAR 0 7
18767: PUSH
18768: LD_VAR 0 7
18772: PPUSH
18773: LD_INT 1
18775: PPUSH
18776: LD_VAR 0 14
18780: PPUSH
18781: CALL_OW 2
18785: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
18786: LD_VAR 0 14
18790: PPUSH
18791: LD_VAR 0 12
18795: PUSH
18796: LD_INT 1
18798: ARRAY
18799: PPUSH
18800: CALL_OW 52
// end ;
18804: GO 18443
18806: POP
18807: POP
// end ;
18808: GO 17745
18810: POP
18811: POP
// result := result ^ buildings ;
18812: LD_ADDR_VAR 0 7
18816: PUSH
18817: LD_VAR 0 7
18821: PUSH
18822: LD_VAR 0 18
18826: ADD
18827: ST_TO_ADDR
// end else
18828: GO 18971
// begin for i = 1 to personel do
18830: LD_ADDR_VAR 0 8
18834: PUSH
18835: DOUBLE
18836: LD_INT 1
18838: DEC
18839: ST_TO_ADDR
18840: LD_VAR 0 6
18844: PUSH
18845: FOR_TO
18846: IFFALSE 18969
// begin if i > 4 then
18848: LD_VAR 0 8
18852: PUSH
18853: LD_INT 4
18855: GREATER
18856: IFFALSE 18860
// break ;
18858: GO 18969
// x := personel [ i ] ;
18860: LD_ADDR_VAR 0 13
18864: PUSH
18865: LD_VAR 0 6
18869: PUSH
18870: LD_VAR 0 8
18874: ARRAY
18875: ST_TO_ADDR
// if x = - 1 then
18876: LD_VAR 0 13
18880: PUSH
18881: LD_INT 1
18883: NEG
18884: EQUAL
18885: IFFALSE 18889
// continue ;
18887: GO 18845
// PrepareHuman ( false , i , skill ) ;
18889: LD_INT 0
18891: PPUSH
18892: LD_VAR 0 8
18896: PPUSH
18897: LD_VAR 0 4
18901: PPUSH
18902: CALL_OW 380
// un := CreateHuman ;
18906: LD_ADDR_VAR 0 14
18910: PUSH
18911: CALL_OW 44
18915: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18916: LD_VAR 0 14
18920: PPUSH
18921: LD_VAR 0 1
18925: PPUSH
18926: CALL_OW 250
18930: PPUSH
18931: LD_VAR 0 1
18935: PPUSH
18936: CALL_OW 251
18940: PPUSH
18941: LD_INT 10
18943: PPUSH
18944: LD_INT 0
18946: PPUSH
18947: CALL_OW 50
// result := result ^ un ;
18951: LD_ADDR_VAR 0 7
18955: PUSH
18956: LD_VAR 0 7
18960: PUSH
18961: LD_VAR 0 14
18965: ADD
18966: ST_TO_ADDR
// end ;
18967: GO 18845
18969: POP
18970: POP
// end ; end ;
18971: LD_VAR 0 7
18975: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18976: LD_INT 0
18978: PPUSH
18979: PPUSH
18980: PPUSH
18981: PPUSH
18982: PPUSH
18983: PPUSH
18984: PPUSH
18985: PPUSH
18986: PPUSH
18987: PPUSH
18988: PPUSH
18989: PPUSH
18990: PPUSH
18991: PPUSH
18992: PPUSH
18993: PPUSH
// result := false ;
18994: LD_ADDR_VAR 0 3
18998: PUSH
18999: LD_INT 0
19001: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19002: LD_VAR 0 1
19006: NOT
19007: PUSH
19008: LD_VAR 0 1
19012: PPUSH
19013: CALL_OW 266
19017: PUSH
19018: LD_INT 32
19020: PUSH
19021: LD_INT 33
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: IN
19028: NOT
19029: OR
19030: IFFALSE 19034
// exit ;
19032: GO 20143
// nat := GetNation ( tower ) ;
19034: LD_ADDR_VAR 0 12
19038: PUSH
19039: LD_VAR 0 1
19043: PPUSH
19044: CALL_OW 248
19048: ST_TO_ADDR
// side := GetSide ( tower ) ;
19049: LD_ADDR_VAR 0 16
19053: PUSH
19054: LD_VAR 0 1
19058: PPUSH
19059: CALL_OW 255
19063: ST_TO_ADDR
// x := GetX ( tower ) ;
19064: LD_ADDR_VAR 0 10
19068: PUSH
19069: LD_VAR 0 1
19073: PPUSH
19074: CALL_OW 250
19078: ST_TO_ADDR
// y := GetY ( tower ) ;
19079: LD_ADDR_VAR 0 11
19083: PUSH
19084: LD_VAR 0 1
19088: PPUSH
19089: CALL_OW 251
19093: ST_TO_ADDR
// if not x or not y then
19094: LD_VAR 0 10
19098: NOT
19099: PUSH
19100: LD_VAR 0 11
19104: NOT
19105: OR
19106: IFFALSE 19110
// exit ;
19108: GO 20143
// weapon := 0 ;
19110: LD_ADDR_VAR 0 18
19114: PUSH
19115: LD_INT 0
19117: ST_TO_ADDR
// fac_list := [ ] ;
19118: LD_ADDR_VAR 0 17
19122: PUSH
19123: EMPTY
19124: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19125: LD_ADDR_VAR 0 6
19129: PUSH
19130: LD_VAR 0 1
19134: PPUSH
19135: CALL_OW 274
19139: PPUSH
19140: LD_VAR 0 2
19144: PPUSH
19145: LD_INT 0
19147: PPUSH
19148: CALL 16714 0 3
19152: PPUSH
19153: LD_INT 30
19155: PUSH
19156: LD_INT 3
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PPUSH
19163: CALL_OW 72
19167: ST_TO_ADDR
// if not factories then
19168: LD_VAR 0 6
19172: NOT
19173: IFFALSE 19177
// exit ;
19175: GO 20143
// for i in factories do
19177: LD_ADDR_VAR 0 8
19181: PUSH
19182: LD_VAR 0 6
19186: PUSH
19187: FOR_IN
19188: IFFALSE 19213
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19190: LD_ADDR_VAR 0 17
19194: PUSH
19195: LD_VAR 0 17
19199: PUSH
19200: LD_VAR 0 8
19204: PPUSH
19205: CALL_OW 478
19209: UNION
19210: ST_TO_ADDR
19211: GO 19187
19213: POP
19214: POP
// if not fac_list then
19215: LD_VAR 0 17
19219: NOT
19220: IFFALSE 19224
// exit ;
19222: GO 20143
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19224: LD_ADDR_VAR 0 5
19228: PUSH
19229: LD_INT 4
19231: PUSH
19232: LD_INT 5
19234: PUSH
19235: LD_INT 9
19237: PUSH
19238: LD_INT 10
19240: PUSH
19241: LD_INT 6
19243: PUSH
19244: LD_INT 7
19246: PUSH
19247: LD_INT 11
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 27
19261: PUSH
19262: LD_INT 28
19264: PUSH
19265: LD_INT 26
19267: PUSH
19268: LD_INT 30
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 43
19279: PUSH
19280: LD_INT 44
19282: PUSH
19283: LD_INT 46
19285: PUSH
19286: LD_INT 45
19288: PUSH
19289: LD_INT 47
19291: PUSH
19292: LD_INT 49
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: LIST
19307: PUSH
19308: LD_VAR 0 12
19312: ARRAY
19313: ST_TO_ADDR
// list := list isect fac_list ;
19314: LD_ADDR_VAR 0 5
19318: PUSH
19319: LD_VAR 0 5
19323: PUSH
19324: LD_VAR 0 17
19328: ISECT
19329: ST_TO_ADDR
// if not list then
19330: LD_VAR 0 5
19334: NOT
19335: IFFALSE 19339
// exit ;
19337: GO 20143
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19339: LD_VAR 0 12
19343: PUSH
19344: LD_INT 3
19346: EQUAL
19347: PUSH
19348: LD_INT 49
19350: PUSH
19351: LD_VAR 0 5
19355: IN
19356: AND
19357: PUSH
19358: LD_INT 31
19360: PPUSH
19361: LD_VAR 0 16
19365: PPUSH
19366: CALL_OW 321
19370: PUSH
19371: LD_INT 2
19373: EQUAL
19374: AND
19375: IFFALSE 19435
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19377: LD_INT 22
19379: PUSH
19380: LD_VAR 0 16
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 35
19391: PUSH
19392: LD_INT 49
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 91
19401: PUSH
19402: LD_VAR 0 1
19406: PUSH
19407: LD_INT 10
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: LIST
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: LIST
19419: PPUSH
19420: CALL_OW 69
19424: NOT
19425: IFFALSE 19435
// weapon := ru_time_lapser ;
19427: LD_ADDR_VAR 0 18
19431: PUSH
19432: LD_INT 49
19434: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19435: LD_VAR 0 12
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: LD_INT 2
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: IN
19450: PUSH
19451: LD_INT 11
19453: PUSH
19454: LD_VAR 0 5
19458: IN
19459: PUSH
19460: LD_INT 30
19462: PUSH
19463: LD_VAR 0 5
19467: IN
19468: OR
19469: AND
19470: PUSH
19471: LD_INT 6
19473: PPUSH
19474: LD_VAR 0 16
19478: PPUSH
19479: CALL_OW 321
19483: PUSH
19484: LD_INT 2
19486: EQUAL
19487: AND
19488: IFFALSE 19653
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19490: LD_INT 22
19492: PUSH
19493: LD_VAR 0 16
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 2
19504: PUSH
19505: LD_INT 35
19507: PUSH
19508: LD_INT 11
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 35
19517: PUSH
19518: LD_INT 30
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 91
19532: PUSH
19533: LD_VAR 0 1
19537: PUSH
19538: LD_INT 18
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: LIST
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: LIST
19550: PPUSH
19551: CALL_OW 69
19555: NOT
19556: PUSH
19557: LD_INT 22
19559: PUSH
19560: LD_VAR 0 16
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 2
19571: PUSH
19572: LD_INT 30
19574: PUSH
19575: LD_INT 32
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 30
19584: PUSH
19585: LD_INT 33
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 91
19599: PUSH
19600: LD_VAR 0 1
19604: PUSH
19605: LD_INT 12
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: LIST
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: LIST
19617: PUSH
19618: EMPTY
19619: LIST
19620: PPUSH
19621: CALL_OW 69
19625: PUSH
19626: LD_INT 2
19628: GREATER
19629: AND
19630: IFFALSE 19653
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19632: LD_ADDR_VAR 0 18
19636: PUSH
19637: LD_INT 11
19639: PUSH
19640: LD_INT 30
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_VAR 0 12
19651: ARRAY
19652: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19653: LD_VAR 0 18
19657: NOT
19658: PUSH
19659: LD_INT 40
19661: PPUSH
19662: LD_VAR 0 16
19666: PPUSH
19667: CALL_OW 321
19671: PUSH
19672: LD_INT 2
19674: EQUAL
19675: AND
19676: PUSH
19677: LD_INT 7
19679: PUSH
19680: LD_VAR 0 5
19684: IN
19685: PUSH
19686: LD_INT 28
19688: PUSH
19689: LD_VAR 0 5
19693: IN
19694: OR
19695: PUSH
19696: LD_INT 45
19698: PUSH
19699: LD_VAR 0 5
19703: IN
19704: OR
19705: AND
19706: IFFALSE 19960
// begin hex := GetHexInfo ( x , y ) ;
19708: LD_ADDR_VAR 0 4
19712: PUSH
19713: LD_VAR 0 10
19717: PPUSH
19718: LD_VAR 0 11
19722: PPUSH
19723: CALL_OW 546
19727: ST_TO_ADDR
// if hex [ 1 ] then
19728: LD_VAR 0 4
19732: PUSH
19733: LD_INT 1
19735: ARRAY
19736: IFFALSE 19740
// exit ;
19738: GO 20143
// height := hex [ 2 ] ;
19740: LD_ADDR_VAR 0 15
19744: PUSH
19745: LD_VAR 0 4
19749: PUSH
19750: LD_INT 2
19752: ARRAY
19753: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
19754: LD_ADDR_VAR 0 14
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: LD_INT 2
19764: PUSH
19765: LD_INT 3
19767: PUSH
19768: LD_INT 5
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: ST_TO_ADDR
// for i in tmp do
19777: LD_ADDR_VAR 0 8
19781: PUSH
19782: LD_VAR 0 14
19786: PUSH
19787: FOR_IN
19788: IFFALSE 19958
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
19790: LD_ADDR_VAR 0 9
19794: PUSH
19795: LD_VAR 0 10
19799: PPUSH
19800: LD_VAR 0 8
19804: PPUSH
19805: LD_INT 5
19807: PPUSH
19808: CALL_OW 272
19812: PUSH
19813: LD_VAR 0 11
19817: PPUSH
19818: LD_VAR 0 8
19822: PPUSH
19823: LD_INT 5
19825: PPUSH
19826: CALL_OW 273
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
19835: LD_VAR 0 9
19839: PUSH
19840: LD_INT 1
19842: ARRAY
19843: PPUSH
19844: LD_VAR 0 9
19848: PUSH
19849: LD_INT 2
19851: ARRAY
19852: PPUSH
19853: CALL_OW 488
19857: IFFALSE 19956
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
19859: LD_ADDR_VAR 0 4
19863: PUSH
19864: LD_VAR 0 9
19868: PUSH
19869: LD_INT 1
19871: ARRAY
19872: PPUSH
19873: LD_VAR 0 9
19877: PUSH
19878: LD_INT 2
19880: ARRAY
19881: PPUSH
19882: CALL_OW 546
19886: ST_TO_ADDR
// if hex [ 1 ] then
19887: LD_VAR 0 4
19891: PUSH
19892: LD_INT 1
19894: ARRAY
19895: IFFALSE 19899
// continue ;
19897: GO 19787
// h := hex [ 2 ] ;
19899: LD_ADDR_VAR 0 13
19903: PUSH
19904: LD_VAR 0 4
19908: PUSH
19909: LD_INT 2
19911: ARRAY
19912: ST_TO_ADDR
// if h + 7 < height then
19913: LD_VAR 0 13
19917: PUSH
19918: LD_INT 7
19920: PLUS
19921: PUSH
19922: LD_VAR 0 15
19926: LESS
19927: IFFALSE 19956
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19929: LD_ADDR_VAR 0 18
19933: PUSH
19934: LD_INT 7
19936: PUSH
19937: LD_INT 28
19939: PUSH
19940: LD_INT 45
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: LIST
19947: PUSH
19948: LD_VAR 0 12
19952: ARRAY
19953: ST_TO_ADDR
// break ;
19954: GO 19958
// end ; end ; end ;
19956: GO 19787
19958: POP
19959: POP
// end ; if not weapon then
19960: LD_VAR 0 18
19964: NOT
19965: IFFALSE 20025
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19967: LD_ADDR_VAR 0 5
19971: PUSH
19972: LD_VAR 0 5
19976: PUSH
19977: LD_INT 11
19979: PUSH
19980: LD_INT 30
19982: PUSH
19983: LD_INT 49
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: LIST
19990: DIFF
19991: ST_TO_ADDR
// if not list then
19992: LD_VAR 0 5
19996: NOT
19997: IFFALSE 20001
// exit ;
19999: GO 20143
// weapon := list [ rand ( 1 , list ) ] ;
20001: LD_ADDR_VAR 0 18
20005: PUSH
20006: LD_VAR 0 5
20010: PUSH
20011: LD_INT 1
20013: PPUSH
20014: LD_VAR 0 5
20018: PPUSH
20019: CALL_OW 12
20023: ARRAY
20024: ST_TO_ADDR
// end ; if weapon then
20025: LD_VAR 0 18
20029: IFFALSE 20143
// begin tmp := CostOfWeapon ( weapon ) ;
20031: LD_ADDR_VAR 0 14
20035: PUSH
20036: LD_VAR 0 18
20040: PPUSH
20041: CALL_OW 451
20045: ST_TO_ADDR
// j := GetBase ( tower ) ;
20046: LD_ADDR_VAR 0 9
20050: PUSH
20051: LD_VAR 0 1
20055: PPUSH
20056: CALL_OW 274
20060: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20061: LD_VAR 0 9
20065: PPUSH
20066: LD_INT 1
20068: PPUSH
20069: CALL_OW 275
20073: PUSH
20074: LD_VAR 0 14
20078: PUSH
20079: LD_INT 1
20081: ARRAY
20082: GREATEREQUAL
20083: PUSH
20084: LD_VAR 0 9
20088: PPUSH
20089: LD_INT 2
20091: PPUSH
20092: CALL_OW 275
20096: PUSH
20097: LD_VAR 0 14
20101: PUSH
20102: LD_INT 2
20104: ARRAY
20105: GREATEREQUAL
20106: AND
20107: PUSH
20108: LD_VAR 0 9
20112: PPUSH
20113: LD_INT 3
20115: PPUSH
20116: CALL_OW 275
20120: PUSH
20121: LD_VAR 0 14
20125: PUSH
20126: LD_INT 3
20128: ARRAY
20129: GREATEREQUAL
20130: AND
20131: IFFALSE 20143
// result := weapon ;
20133: LD_ADDR_VAR 0 3
20137: PUSH
20138: LD_VAR 0 18
20142: ST_TO_ADDR
// end ; end ;
20143: LD_VAR 0 3
20147: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20148: LD_INT 0
20150: PPUSH
20151: PPUSH
// result := true ;
20152: LD_ADDR_VAR 0 3
20156: PUSH
20157: LD_INT 1
20159: ST_TO_ADDR
// if array1 = array2 then
20160: LD_VAR 0 1
20164: PUSH
20165: LD_VAR 0 2
20169: EQUAL
20170: IFFALSE 20230
// begin for i = 1 to array1 do
20172: LD_ADDR_VAR 0 4
20176: PUSH
20177: DOUBLE
20178: LD_INT 1
20180: DEC
20181: ST_TO_ADDR
20182: LD_VAR 0 1
20186: PUSH
20187: FOR_TO
20188: IFFALSE 20226
// if array1 [ i ] <> array2 [ i ] then
20190: LD_VAR 0 1
20194: PUSH
20195: LD_VAR 0 4
20199: ARRAY
20200: PUSH
20201: LD_VAR 0 2
20205: PUSH
20206: LD_VAR 0 4
20210: ARRAY
20211: NONEQUAL
20212: IFFALSE 20224
// begin result := false ;
20214: LD_ADDR_VAR 0 3
20218: PUSH
20219: LD_INT 0
20221: ST_TO_ADDR
// break ;
20222: GO 20226
// end ;
20224: GO 20187
20226: POP
20227: POP
// end else
20228: GO 20238
// result := false ;
20230: LD_ADDR_VAR 0 3
20234: PUSH
20235: LD_INT 0
20237: ST_TO_ADDR
// end ;
20238: LD_VAR 0 3
20242: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20243: LD_INT 0
20245: PPUSH
20246: PPUSH
// if not array1 or not array2 then
20247: LD_VAR 0 1
20251: NOT
20252: PUSH
20253: LD_VAR 0 2
20257: NOT
20258: OR
20259: IFFALSE 20263
// exit ;
20261: GO 20327
// result := true ;
20263: LD_ADDR_VAR 0 3
20267: PUSH
20268: LD_INT 1
20270: ST_TO_ADDR
// for i = 1 to array1 do
20271: LD_ADDR_VAR 0 4
20275: PUSH
20276: DOUBLE
20277: LD_INT 1
20279: DEC
20280: ST_TO_ADDR
20281: LD_VAR 0 1
20285: PUSH
20286: FOR_TO
20287: IFFALSE 20325
// if array1 [ i ] <> array2 [ i ] then
20289: LD_VAR 0 1
20293: PUSH
20294: LD_VAR 0 4
20298: ARRAY
20299: PUSH
20300: LD_VAR 0 2
20304: PUSH
20305: LD_VAR 0 4
20309: ARRAY
20310: NONEQUAL
20311: IFFALSE 20323
// begin result := false ;
20313: LD_ADDR_VAR 0 3
20317: PUSH
20318: LD_INT 0
20320: ST_TO_ADDR
// break ;
20321: GO 20325
// end ;
20323: GO 20286
20325: POP
20326: POP
// end ;
20327: LD_VAR 0 3
20331: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20332: LD_INT 0
20334: PPUSH
20335: PPUSH
20336: PPUSH
// pom := GetBase ( fac ) ;
20337: LD_ADDR_VAR 0 5
20341: PUSH
20342: LD_VAR 0 1
20346: PPUSH
20347: CALL_OW 274
20351: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20352: LD_ADDR_VAR 0 4
20356: PUSH
20357: LD_VAR 0 2
20361: PUSH
20362: LD_INT 1
20364: ARRAY
20365: PPUSH
20366: LD_VAR 0 2
20370: PUSH
20371: LD_INT 2
20373: ARRAY
20374: PPUSH
20375: LD_VAR 0 2
20379: PUSH
20380: LD_INT 3
20382: ARRAY
20383: PPUSH
20384: LD_VAR 0 2
20388: PUSH
20389: LD_INT 4
20391: ARRAY
20392: PPUSH
20393: CALL_OW 449
20397: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20398: LD_ADDR_VAR 0 3
20402: PUSH
20403: LD_VAR 0 5
20407: PPUSH
20408: LD_INT 1
20410: PPUSH
20411: CALL_OW 275
20415: PUSH
20416: LD_VAR 0 4
20420: PUSH
20421: LD_INT 1
20423: ARRAY
20424: GREATEREQUAL
20425: PUSH
20426: LD_VAR 0 5
20430: PPUSH
20431: LD_INT 2
20433: PPUSH
20434: CALL_OW 275
20438: PUSH
20439: LD_VAR 0 4
20443: PUSH
20444: LD_INT 2
20446: ARRAY
20447: GREATEREQUAL
20448: AND
20449: PUSH
20450: LD_VAR 0 5
20454: PPUSH
20455: LD_INT 3
20457: PPUSH
20458: CALL_OW 275
20462: PUSH
20463: LD_VAR 0 4
20467: PUSH
20468: LD_INT 3
20470: ARRAY
20471: GREATEREQUAL
20472: AND
20473: ST_TO_ADDR
// end ;
20474: LD_VAR 0 3
20478: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20479: LD_INT 0
20481: PPUSH
20482: PPUSH
20483: PPUSH
20484: PPUSH
// pom := GetBase ( building ) ;
20485: LD_ADDR_VAR 0 3
20489: PUSH
20490: LD_VAR 0 1
20494: PPUSH
20495: CALL_OW 274
20499: ST_TO_ADDR
// if not pom then
20500: LD_VAR 0 3
20504: NOT
20505: IFFALSE 20509
// exit ;
20507: GO 20679
// btype := GetBType ( building ) ;
20509: LD_ADDR_VAR 0 5
20513: PUSH
20514: LD_VAR 0 1
20518: PPUSH
20519: CALL_OW 266
20523: ST_TO_ADDR
// if btype = b_armoury then
20524: LD_VAR 0 5
20528: PUSH
20529: LD_INT 4
20531: EQUAL
20532: IFFALSE 20542
// btype := b_barracks ;
20534: LD_ADDR_VAR 0 5
20538: PUSH
20539: LD_INT 5
20541: ST_TO_ADDR
// if btype = b_depot then
20542: LD_VAR 0 5
20546: PUSH
20547: LD_INT 0
20549: EQUAL
20550: IFFALSE 20560
// btype := b_warehouse ;
20552: LD_ADDR_VAR 0 5
20556: PUSH
20557: LD_INT 1
20559: ST_TO_ADDR
// if btype = b_workshop then
20560: LD_VAR 0 5
20564: PUSH
20565: LD_INT 2
20567: EQUAL
20568: IFFALSE 20578
// btype := b_factory ;
20570: LD_ADDR_VAR 0 5
20574: PUSH
20575: LD_INT 3
20577: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20578: LD_ADDR_VAR 0 4
20582: PUSH
20583: LD_VAR 0 5
20587: PPUSH
20588: LD_VAR 0 1
20592: PPUSH
20593: CALL_OW 248
20597: PPUSH
20598: CALL_OW 450
20602: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20603: LD_ADDR_VAR 0 2
20607: PUSH
20608: LD_VAR 0 3
20612: PPUSH
20613: LD_INT 1
20615: PPUSH
20616: CALL_OW 275
20620: PUSH
20621: LD_VAR 0 4
20625: PUSH
20626: LD_INT 1
20628: ARRAY
20629: GREATEREQUAL
20630: PUSH
20631: LD_VAR 0 3
20635: PPUSH
20636: LD_INT 2
20638: PPUSH
20639: CALL_OW 275
20643: PUSH
20644: LD_VAR 0 4
20648: PUSH
20649: LD_INT 2
20651: ARRAY
20652: GREATEREQUAL
20653: AND
20654: PUSH
20655: LD_VAR 0 3
20659: PPUSH
20660: LD_INT 3
20662: PPUSH
20663: CALL_OW 275
20667: PUSH
20668: LD_VAR 0 4
20672: PUSH
20673: LD_INT 3
20675: ARRAY
20676: GREATEREQUAL
20677: AND
20678: ST_TO_ADDR
// end ;
20679: LD_VAR 0 2
20683: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20684: LD_INT 0
20686: PPUSH
20687: PPUSH
20688: PPUSH
// pom := GetBase ( building ) ;
20689: LD_ADDR_VAR 0 4
20693: PUSH
20694: LD_VAR 0 1
20698: PPUSH
20699: CALL_OW 274
20703: ST_TO_ADDR
// if not pom then
20704: LD_VAR 0 4
20708: NOT
20709: IFFALSE 20713
// exit ;
20711: GO 20814
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20713: LD_ADDR_VAR 0 5
20717: PUSH
20718: LD_VAR 0 2
20722: PPUSH
20723: LD_VAR 0 1
20727: PPUSH
20728: CALL_OW 248
20732: PPUSH
20733: CALL_OW 450
20737: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20738: LD_ADDR_VAR 0 3
20742: PUSH
20743: LD_VAR 0 4
20747: PPUSH
20748: LD_INT 1
20750: PPUSH
20751: CALL_OW 275
20755: PUSH
20756: LD_VAR 0 5
20760: PUSH
20761: LD_INT 1
20763: ARRAY
20764: GREATEREQUAL
20765: PUSH
20766: LD_VAR 0 4
20770: PPUSH
20771: LD_INT 2
20773: PPUSH
20774: CALL_OW 275
20778: PUSH
20779: LD_VAR 0 5
20783: PUSH
20784: LD_INT 2
20786: ARRAY
20787: GREATEREQUAL
20788: AND
20789: PUSH
20790: LD_VAR 0 4
20794: PPUSH
20795: LD_INT 3
20797: PPUSH
20798: CALL_OW 275
20802: PUSH
20803: LD_VAR 0 5
20807: PUSH
20808: LD_INT 3
20810: ARRAY
20811: GREATEREQUAL
20812: AND
20813: ST_TO_ADDR
// end ;
20814: LD_VAR 0 3
20818: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
20819: LD_INT 0
20821: PPUSH
20822: PPUSH
20823: PPUSH
20824: PPUSH
20825: PPUSH
20826: PPUSH
20827: PPUSH
20828: PPUSH
20829: PPUSH
20830: PPUSH
20831: PPUSH
// result := false ;
20832: LD_ADDR_VAR 0 8
20836: PUSH
20837: LD_INT 0
20839: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
20840: LD_VAR 0 5
20844: NOT
20845: PUSH
20846: LD_VAR 0 1
20850: NOT
20851: OR
20852: PUSH
20853: LD_VAR 0 2
20857: NOT
20858: OR
20859: PUSH
20860: LD_VAR 0 3
20864: NOT
20865: OR
20866: IFFALSE 20870
// exit ;
20868: GO 21684
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
20870: LD_ADDR_VAR 0 14
20874: PUSH
20875: LD_VAR 0 1
20879: PPUSH
20880: LD_VAR 0 2
20884: PPUSH
20885: LD_VAR 0 3
20889: PPUSH
20890: LD_VAR 0 4
20894: PPUSH
20895: LD_VAR 0 5
20899: PUSH
20900: LD_INT 1
20902: ARRAY
20903: PPUSH
20904: CALL_OW 248
20908: PPUSH
20909: LD_INT 0
20911: PPUSH
20912: CALL 22937 0 6
20916: ST_TO_ADDR
// if not hexes then
20917: LD_VAR 0 14
20921: NOT
20922: IFFALSE 20926
// exit ;
20924: GO 21684
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20926: LD_ADDR_VAR 0 17
20930: PUSH
20931: LD_VAR 0 5
20935: PPUSH
20936: LD_INT 22
20938: PUSH
20939: LD_VAR 0 13
20943: PPUSH
20944: CALL_OW 255
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 2
20955: PUSH
20956: LD_INT 30
20958: PUSH
20959: LD_INT 0
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 30
20968: PUSH
20969: LD_INT 1
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: LIST
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PPUSH
20985: CALL_OW 72
20989: ST_TO_ADDR
// for i = 1 to hexes do
20990: LD_ADDR_VAR 0 9
20994: PUSH
20995: DOUBLE
20996: LD_INT 1
20998: DEC
20999: ST_TO_ADDR
21000: LD_VAR 0 14
21004: PUSH
21005: FOR_TO
21006: IFFALSE 21682
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21008: LD_ADDR_VAR 0 13
21012: PUSH
21013: LD_VAR 0 14
21017: PUSH
21018: LD_VAR 0 9
21022: ARRAY
21023: PUSH
21024: LD_INT 1
21026: ARRAY
21027: PPUSH
21028: LD_VAR 0 14
21032: PUSH
21033: LD_VAR 0 9
21037: ARRAY
21038: PUSH
21039: LD_INT 2
21041: ARRAY
21042: PPUSH
21043: CALL_OW 428
21047: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21048: LD_VAR 0 14
21052: PUSH
21053: LD_VAR 0 9
21057: ARRAY
21058: PUSH
21059: LD_INT 1
21061: ARRAY
21062: PPUSH
21063: LD_VAR 0 14
21067: PUSH
21068: LD_VAR 0 9
21072: ARRAY
21073: PUSH
21074: LD_INT 2
21076: ARRAY
21077: PPUSH
21078: CALL_OW 351
21082: PUSH
21083: LD_VAR 0 14
21087: PUSH
21088: LD_VAR 0 9
21092: ARRAY
21093: PUSH
21094: LD_INT 1
21096: ARRAY
21097: PPUSH
21098: LD_VAR 0 14
21102: PUSH
21103: LD_VAR 0 9
21107: ARRAY
21108: PUSH
21109: LD_INT 2
21111: ARRAY
21112: PPUSH
21113: CALL_OW 488
21117: NOT
21118: OR
21119: PUSH
21120: LD_VAR 0 13
21124: PPUSH
21125: CALL_OW 247
21129: PUSH
21130: LD_INT 3
21132: EQUAL
21133: OR
21134: IFFALSE 21140
// exit ;
21136: POP
21137: POP
21138: GO 21684
// if not tmp then
21140: LD_VAR 0 13
21144: NOT
21145: IFFALSE 21149
// continue ;
21147: GO 21005
// result := true ;
21149: LD_ADDR_VAR 0 8
21153: PUSH
21154: LD_INT 1
21156: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21157: LD_VAR 0 6
21161: PUSH
21162: LD_VAR 0 13
21166: PPUSH
21167: CALL_OW 247
21171: PUSH
21172: LD_INT 2
21174: EQUAL
21175: AND
21176: PUSH
21177: LD_VAR 0 13
21181: PPUSH
21182: CALL_OW 263
21186: PUSH
21187: LD_INT 1
21189: EQUAL
21190: AND
21191: IFFALSE 21355
// begin if IsDrivenBy ( tmp ) then
21193: LD_VAR 0 13
21197: PPUSH
21198: CALL_OW 311
21202: IFFALSE 21206
// continue ;
21204: GO 21005
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21206: LD_VAR 0 6
21210: PPUSH
21211: LD_INT 3
21213: PUSH
21214: LD_INT 60
21216: PUSH
21217: EMPTY
21218: LIST
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 3
21226: PUSH
21227: LD_INT 55
21229: PUSH
21230: EMPTY
21231: LIST
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PPUSH
21241: CALL_OW 72
21245: IFFALSE 21353
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21247: LD_ADDR_VAR 0 18
21251: PUSH
21252: LD_VAR 0 6
21256: PPUSH
21257: LD_INT 3
21259: PUSH
21260: LD_INT 60
21262: PUSH
21263: EMPTY
21264: LIST
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 3
21272: PUSH
21273: LD_INT 55
21275: PUSH
21276: EMPTY
21277: LIST
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PPUSH
21287: CALL_OW 72
21291: PUSH
21292: LD_INT 1
21294: ARRAY
21295: ST_TO_ADDR
// if IsInUnit ( driver ) then
21296: LD_VAR 0 18
21300: PPUSH
21301: CALL_OW 310
21305: IFFALSE 21316
// ComExit ( driver ) ;
21307: LD_VAR 0 18
21311: PPUSH
21312: CALL 46718 0 1
// AddComEnterUnit ( driver , tmp ) ;
21316: LD_VAR 0 18
21320: PPUSH
21321: LD_VAR 0 13
21325: PPUSH
21326: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21330: LD_VAR 0 18
21334: PPUSH
21335: LD_VAR 0 7
21339: PPUSH
21340: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21344: LD_VAR 0 18
21348: PPUSH
21349: CALL_OW 181
// end ; continue ;
21353: GO 21005
// end ; if not cleaners or not tmp in cleaners then
21355: LD_VAR 0 6
21359: NOT
21360: PUSH
21361: LD_VAR 0 13
21365: PUSH
21366: LD_VAR 0 6
21370: IN
21371: NOT
21372: OR
21373: IFFALSE 21680
// begin if dep then
21375: LD_VAR 0 17
21379: IFFALSE 21515
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21381: LD_ADDR_VAR 0 16
21385: PUSH
21386: LD_VAR 0 17
21390: PUSH
21391: LD_INT 1
21393: ARRAY
21394: PPUSH
21395: CALL_OW 250
21399: PPUSH
21400: LD_VAR 0 17
21404: PUSH
21405: LD_INT 1
21407: ARRAY
21408: PPUSH
21409: CALL_OW 254
21413: PPUSH
21414: LD_INT 5
21416: PPUSH
21417: CALL_OW 272
21421: PUSH
21422: LD_VAR 0 17
21426: PUSH
21427: LD_INT 1
21429: ARRAY
21430: PPUSH
21431: CALL_OW 251
21435: PPUSH
21436: LD_VAR 0 17
21440: PUSH
21441: LD_INT 1
21443: ARRAY
21444: PPUSH
21445: CALL_OW 254
21449: PPUSH
21450: LD_INT 5
21452: PPUSH
21453: CALL_OW 273
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21462: LD_VAR 0 16
21466: PUSH
21467: LD_INT 1
21469: ARRAY
21470: PPUSH
21471: LD_VAR 0 16
21475: PUSH
21476: LD_INT 2
21478: ARRAY
21479: PPUSH
21480: CALL_OW 488
21484: IFFALSE 21515
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21486: LD_VAR 0 13
21490: PPUSH
21491: LD_VAR 0 16
21495: PUSH
21496: LD_INT 1
21498: ARRAY
21499: PPUSH
21500: LD_VAR 0 16
21504: PUSH
21505: LD_INT 2
21507: ARRAY
21508: PPUSH
21509: CALL_OW 111
// continue ;
21513: GO 21005
// end ; end ; r := GetDir ( tmp ) ;
21515: LD_ADDR_VAR 0 15
21519: PUSH
21520: LD_VAR 0 13
21524: PPUSH
21525: CALL_OW 254
21529: ST_TO_ADDR
// if r = 5 then
21530: LD_VAR 0 15
21534: PUSH
21535: LD_INT 5
21537: EQUAL
21538: IFFALSE 21548
// r := 0 ;
21540: LD_ADDR_VAR 0 15
21544: PUSH
21545: LD_INT 0
21547: ST_TO_ADDR
// for j = r to 5 do
21548: LD_ADDR_VAR 0 10
21552: PUSH
21553: DOUBLE
21554: LD_VAR 0 15
21558: DEC
21559: ST_TO_ADDR
21560: LD_INT 5
21562: PUSH
21563: FOR_TO
21564: IFFALSE 21678
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21566: LD_ADDR_VAR 0 11
21570: PUSH
21571: LD_VAR 0 13
21575: PPUSH
21576: CALL_OW 250
21580: PPUSH
21581: LD_VAR 0 10
21585: PPUSH
21586: LD_INT 2
21588: PPUSH
21589: CALL_OW 272
21593: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21594: LD_ADDR_VAR 0 12
21598: PUSH
21599: LD_VAR 0 13
21603: PPUSH
21604: CALL_OW 251
21608: PPUSH
21609: LD_VAR 0 10
21613: PPUSH
21614: LD_INT 2
21616: PPUSH
21617: CALL_OW 273
21621: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21622: LD_VAR 0 11
21626: PPUSH
21627: LD_VAR 0 12
21631: PPUSH
21632: CALL_OW 488
21636: PUSH
21637: LD_VAR 0 11
21641: PPUSH
21642: LD_VAR 0 12
21646: PPUSH
21647: CALL_OW 428
21651: NOT
21652: AND
21653: IFFALSE 21676
// begin ComMoveXY ( tmp , _x , _y ) ;
21655: LD_VAR 0 13
21659: PPUSH
21660: LD_VAR 0 11
21664: PPUSH
21665: LD_VAR 0 12
21669: PPUSH
21670: CALL_OW 111
// break ;
21674: GO 21678
// end ; end ;
21676: GO 21563
21678: POP
21679: POP
// end ; end ;
21680: GO 21005
21682: POP
21683: POP
// end ;
21684: LD_VAR 0 8
21688: RET
// export function BuildingTechInvented ( side , btype ) ; begin
21689: LD_INT 0
21691: PPUSH
// result := true ;
21692: LD_ADDR_VAR 0 3
21696: PUSH
21697: LD_INT 1
21699: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
21700: LD_VAR 0 2
21704: PUSH
21705: LD_INT 24
21707: DOUBLE
21708: EQUAL
21709: IFTRUE 21719
21711: LD_INT 33
21713: DOUBLE
21714: EQUAL
21715: IFTRUE 21719
21717: GO 21744
21719: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
21720: LD_ADDR_VAR 0 3
21724: PUSH
21725: LD_INT 32
21727: PPUSH
21728: LD_VAR 0 1
21732: PPUSH
21733: CALL_OW 321
21737: PUSH
21738: LD_INT 2
21740: EQUAL
21741: ST_TO_ADDR
21742: GO 22060
21744: LD_INT 20
21746: DOUBLE
21747: EQUAL
21748: IFTRUE 21752
21750: GO 21777
21752: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
21753: LD_ADDR_VAR 0 3
21757: PUSH
21758: LD_INT 6
21760: PPUSH
21761: LD_VAR 0 1
21765: PPUSH
21766: CALL_OW 321
21770: PUSH
21771: LD_INT 2
21773: EQUAL
21774: ST_TO_ADDR
21775: GO 22060
21777: LD_INT 22
21779: DOUBLE
21780: EQUAL
21781: IFTRUE 21791
21783: LD_INT 36
21785: DOUBLE
21786: EQUAL
21787: IFTRUE 21791
21789: GO 21816
21791: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
21792: LD_ADDR_VAR 0 3
21796: PUSH
21797: LD_INT 15
21799: PPUSH
21800: LD_VAR 0 1
21804: PPUSH
21805: CALL_OW 321
21809: PUSH
21810: LD_INT 2
21812: EQUAL
21813: ST_TO_ADDR
21814: GO 22060
21816: LD_INT 30
21818: DOUBLE
21819: EQUAL
21820: IFTRUE 21824
21822: GO 21849
21824: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
21825: LD_ADDR_VAR 0 3
21829: PUSH
21830: LD_INT 20
21832: PPUSH
21833: LD_VAR 0 1
21837: PPUSH
21838: CALL_OW 321
21842: PUSH
21843: LD_INT 2
21845: EQUAL
21846: ST_TO_ADDR
21847: GO 22060
21849: LD_INT 28
21851: DOUBLE
21852: EQUAL
21853: IFTRUE 21863
21855: LD_INT 21
21857: DOUBLE
21858: EQUAL
21859: IFTRUE 21863
21861: GO 21888
21863: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
21864: LD_ADDR_VAR 0 3
21868: PUSH
21869: LD_INT 21
21871: PPUSH
21872: LD_VAR 0 1
21876: PPUSH
21877: CALL_OW 321
21881: PUSH
21882: LD_INT 2
21884: EQUAL
21885: ST_TO_ADDR
21886: GO 22060
21888: LD_INT 16
21890: DOUBLE
21891: EQUAL
21892: IFTRUE 21896
21894: GO 21921
21896: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
21897: LD_ADDR_VAR 0 3
21901: PUSH
21902: LD_INT 84
21904: PPUSH
21905: LD_VAR 0 1
21909: PPUSH
21910: CALL_OW 321
21914: PUSH
21915: LD_INT 2
21917: EQUAL
21918: ST_TO_ADDR
21919: GO 22060
21921: LD_INT 19
21923: DOUBLE
21924: EQUAL
21925: IFTRUE 21935
21927: LD_INT 23
21929: DOUBLE
21930: EQUAL
21931: IFTRUE 21935
21933: GO 21960
21935: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
21936: LD_ADDR_VAR 0 3
21940: PUSH
21941: LD_INT 83
21943: PPUSH
21944: LD_VAR 0 1
21948: PPUSH
21949: CALL_OW 321
21953: PUSH
21954: LD_INT 2
21956: EQUAL
21957: ST_TO_ADDR
21958: GO 22060
21960: LD_INT 17
21962: DOUBLE
21963: EQUAL
21964: IFTRUE 21968
21966: GO 21993
21968: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
21969: LD_ADDR_VAR 0 3
21973: PUSH
21974: LD_INT 39
21976: PPUSH
21977: LD_VAR 0 1
21981: PPUSH
21982: CALL_OW 321
21986: PUSH
21987: LD_INT 2
21989: EQUAL
21990: ST_TO_ADDR
21991: GO 22060
21993: LD_INT 18
21995: DOUBLE
21996: EQUAL
21997: IFTRUE 22001
21999: GO 22026
22001: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22002: LD_ADDR_VAR 0 3
22006: PUSH
22007: LD_INT 40
22009: PPUSH
22010: LD_VAR 0 1
22014: PPUSH
22015: CALL_OW 321
22019: PUSH
22020: LD_INT 2
22022: EQUAL
22023: ST_TO_ADDR
22024: GO 22060
22026: LD_INT 27
22028: DOUBLE
22029: EQUAL
22030: IFTRUE 22034
22032: GO 22059
22034: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22035: LD_ADDR_VAR 0 3
22039: PUSH
22040: LD_INT 35
22042: PPUSH
22043: LD_VAR 0 1
22047: PPUSH
22048: CALL_OW 321
22052: PUSH
22053: LD_INT 2
22055: EQUAL
22056: ST_TO_ADDR
22057: GO 22060
22059: POP
// end ;
22060: LD_VAR 0 3
22064: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22065: LD_INT 0
22067: PPUSH
22068: PPUSH
22069: PPUSH
22070: PPUSH
22071: PPUSH
22072: PPUSH
22073: PPUSH
22074: PPUSH
22075: PPUSH
22076: PPUSH
22077: PPUSH
// result := false ;
22078: LD_ADDR_VAR 0 6
22082: PUSH
22083: LD_INT 0
22085: ST_TO_ADDR
// if btype = b_depot then
22086: LD_VAR 0 2
22090: PUSH
22091: LD_INT 0
22093: EQUAL
22094: IFFALSE 22106
// begin result := true ;
22096: LD_ADDR_VAR 0 6
22100: PUSH
22101: LD_INT 1
22103: ST_TO_ADDR
// exit ;
22104: GO 22932
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22106: LD_VAR 0 1
22110: NOT
22111: PUSH
22112: LD_VAR 0 1
22116: PPUSH
22117: CALL_OW 266
22121: PUSH
22122: LD_INT 0
22124: PUSH
22125: LD_INT 1
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: IN
22132: NOT
22133: OR
22134: PUSH
22135: LD_VAR 0 2
22139: NOT
22140: OR
22141: PUSH
22142: LD_VAR 0 5
22146: PUSH
22147: LD_INT 0
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: LD_INT 2
22155: PUSH
22156: LD_INT 3
22158: PUSH
22159: LD_INT 4
22161: PUSH
22162: LD_INT 5
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: IN
22173: NOT
22174: OR
22175: PUSH
22176: LD_VAR 0 3
22180: PPUSH
22181: LD_VAR 0 4
22185: PPUSH
22186: CALL_OW 488
22190: NOT
22191: OR
22192: IFFALSE 22196
// exit ;
22194: GO 22932
// side := GetSide ( depot ) ;
22196: LD_ADDR_VAR 0 9
22200: PUSH
22201: LD_VAR 0 1
22205: PPUSH
22206: CALL_OW 255
22210: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22211: LD_VAR 0 9
22215: PPUSH
22216: LD_VAR 0 2
22220: PPUSH
22221: CALL 21689 0 2
22225: NOT
22226: IFFALSE 22230
// exit ;
22228: GO 22932
// pom := GetBase ( depot ) ;
22230: LD_ADDR_VAR 0 10
22234: PUSH
22235: LD_VAR 0 1
22239: PPUSH
22240: CALL_OW 274
22244: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22245: LD_ADDR_VAR 0 11
22249: PUSH
22250: LD_VAR 0 2
22254: PPUSH
22255: LD_VAR 0 1
22259: PPUSH
22260: CALL_OW 248
22264: PPUSH
22265: CALL_OW 450
22269: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22270: LD_VAR 0 10
22274: PPUSH
22275: LD_INT 1
22277: PPUSH
22278: CALL_OW 275
22282: PUSH
22283: LD_VAR 0 11
22287: PUSH
22288: LD_INT 1
22290: ARRAY
22291: GREATEREQUAL
22292: PUSH
22293: LD_VAR 0 10
22297: PPUSH
22298: LD_INT 2
22300: PPUSH
22301: CALL_OW 275
22305: PUSH
22306: LD_VAR 0 11
22310: PUSH
22311: LD_INT 2
22313: ARRAY
22314: GREATEREQUAL
22315: AND
22316: PUSH
22317: LD_VAR 0 10
22321: PPUSH
22322: LD_INT 3
22324: PPUSH
22325: CALL_OW 275
22329: PUSH
22330: LD_VAR 0 11
22334: PUSH
22335: LD_INT 3
22337: ARRAY
22338: GREATEREQUAL
22339: AND
22340: NOT
22341: IFFALSE 22345
// exit ;
22343: GO 22932
// if GetBType ( depot ) = b_depot then
22345: LD_VAR 0 1
22349: PPUSH
22350: CALL_OW 266
22354: PUSH
22355: LD_INT 0
22357: EQUAL
22358: IFFALSE 22370
// dist := 28 else
22360: LD_ADDR_VAR 0 14
22364: PUSH
22365: LD_INT 28
22367: ST_TO_ADDR
22368: GO 22378
// dist := 36 ;
22370: LD_ADDR_VAR 0 14
22374: PUSH
22375: LD_INT 36
22377: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22378: LD_VAR 0 1
22382: PPUSH
22383: LD_VAR 0 3
22387: PPUSH
22388: LD_VAR 0 4
22392: PPUSH
22393: CALL_OW 297
22397: PUSH
22398: LD_VAR 0 14
22402: GREATER
22403: IFFALSE 22407
// exit ;
22405: GO 22932
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22407: LD_ADDR_VAR 0 12
22411: PUSH
22412: LD_VAR 0 2
22416: PPUSH
22417: LD_VAR 0 3
22421: PPUSH
22422: LD_VAR 0 4
22426: PPUSH
22427: LD_VAR 0 5
22431: PPUSH
22432: LD_VAR 0 1
22436: PPUSH
22437: CALL_OW 248
22441: PPUSH
22442: LD_INT 0
22444: PPUSH
22445: CALL 22937 0 6
22449: ST_TO_ADDR
// if not hexes then
22450: LD_VAR 0 12
22454: NOT
22455: IFFALSE 22459
// exit ;
22457: GO 22932
// hex := GetHexInfo ( x , y ) ;
22459: LD_ADDR_VAR 0 15
22463: PUSH
22464: LD_VAR 0 3
22468: PPUSH
22469: LD_VAR 0 4
22473: PPUSH
22474: CALL_OW 546
22478: ST_TO_ADDR
// if hex [ 1 ] then
22479: LD_VAR 0 15
22483: PUSH
22484: LD_INT 1
22486: ARRAY
22487: IFFALSE 22491
// exit ;
22489: GO 22932
// height := hex [ 2 ] ;
22491: LD_ADDR_VAR 0 13
22495: PUSH
22496: LD_VAR 0 15
22500: PUSH
22501: LD_INT 2
22503: ARRAY
22504: ST_TO_ADDR
// for i = 1 to hexes do
22505: LD_ADDR_VAR 0 7
22509: PUSH
22510: DOUBLE
22511: LD_INT 1
22513: DEC
22514: ST_TO_ADDR
22515: LD_VAR 0 12
22519: PUSH
22520: FOR_TO
22521: IFFALSE 22851
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22523: LD_VAR 0 12
22527: PUSH
22528: LD_VAR 0 7
22532: ARRAY
22533: PUSH
22534: LD_INT 1
22536: ARRAY
22537: PPUSH
22538: LD_VAR 0 12
22542: PUSH
22543: LD_VAR 0 7
22547: ARRAY
22548: PUSH
22549: LD_INT 2
22551: ARRAY
22552: PPUSH
22553: CALL_OW 488
22557: NOT
22558: PUSH
22559: LD_VAR 0 12
22563: PUSH
22564: LD_VAR 0 7
22568: ARRAY
22569: PUSH
22570: LD_INT 1
22572: ARRAY
22573: PPUSH
22574: LD_VAR 0 12
22578: PUSH
22579: LD_VAR 0 7
22583: ARRAY
22584: PUSH
22585: LD_INT 2
22587: ARRAY
22588: PPUSH
22589: CALL_OW 428
22593: PUSH
22594: LD_INT 0
22596: GREATER
22597: OR
22598: PUSH
22599: LD_VAR 0 12
22603: PUSH
22604: LD_VAR 0 7
22608: ARRAY
22609: PUSH
22610: LD_INT 1
22612: ARRAY
22613: PPUSH
22614: LD_VAR 0 12
22618: PUSH
22619: LD_VAR 0 7
22623: ARRAY
22624: PUSH
22625: LD_INT 2
22627: ARRAY
22628: PPUSH
22629: CALL_OW 351
22633: OR
22634: IFFALSE 22640
// exit ;
22636: POP
22637: POP
22638: GO 22932
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22640: LD_ADDR_VAR 0 8
22644: PUSH
22645: LD_VAR 0 12
22649: PUSH
22650: LD_VAR 0 7
22654: ARRAY
22655: PUSH
22656: LD_INT 1
22658: ARRAY
22659: PPUSH
22660: LD_VAR 0 12
22664: PUSH
22665: LD_VAR 0 7
22669: ARRAY
22670: PUSH
22671: LD_INT 2
22673: ARRAY
22674: PPUSH
22675: CALL_OW 546
22679: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22680: LD_VAR 0 8
22684: PUSH
22685: LD_INT 1
22687: ARRAY
22688: PUSH
22689: LD_VAR 0 8
22693: PUSH
22694: LD_INT 2
22696: ARRAY
22697: PUSH
22698: LD_VAR 0 13
22702: PUSH
22703: LD_INT 2
22705: PLUS
22706: GREATER
22707: OR
22708: PUSH
22709: LD_VAR 0 8
22713: PUSH
22714: LD_INT 2
22716: ARRAY
22717: PUSH
22718: LD_VAR 0 13
22722: PUSH
22723: LD_INT 2
22725: MINUS
22726: LESS
22727: OR
22728: PUSH
22729: LD_VAR 0 8
22733: PUSH
22734: LD_INT 3
22736: ARRAY
22737: PUSH
22738: LD_INT 0
22740: PUSH
22741: LD_INT 8
22743: PUSH
22744: LD_INT 9
22746: PUSH
22747: LD_INT 10
22749: PUSH
22750: LD_INT 11
22752: PUSH
22753: LD_INT 12
22755: PUSH
22756: LD_INT 13
22758: PUSH
22759: LD_INT 16
22761: PUSH
22762: LD_INT 17
22764: PUSH
22765: LD_INT 18
22767: PUSH
22768: LD_INT 19
22770: PUSH
22771: LD_INT 20
22773: PUSH
22774: LD_INT 21
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: IN
22792: NOT
22793: OR
22794: PUSH
22795: LD_VAR 0 8
22799: PUSH
22800: LD_INT 5
22802: ARRAY
22803: NOT
22804: OR
22805: PUSH
22806: LD_VAR 0 8
22810: PUSH
22811: LD_INT 6
22813: ARRAY
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: LD_INT 2
22820: PUSH
22821: LD_INT 7
22823: PUSH
22824: LD_INT 9
22826: PUSH
22827: LD_INT 10
22829: PUSH
22830: LD_INT 11
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: IN
22841: NOT
22842: OR
22843: IFFALSE 22849
// exit ;
22845: POP
22846: POP
22847: GO 22932
// end ;
22849: GO 22520
22851: POP
22852: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
22853: LD_VAR 0 9
22857: PPUSH
22858: LD_VAR 0 3
22862: PPUSH
22863: LD_VAR 0 4
22867: PPUSH
22868: LD_INT 20
22870: PPUSH
22871: CALL 14855 0 4
22875: PUSH
22876: LD_INT 4
22878: ARRAY
22879: IFFALSE 22883
// exit ;
22881: GO 22932
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
22883: LD_VAR 0 2
22887: PUSH
22888: LD_INT 29
22890: PUSH
22891: LD_INT 30
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: IN
22898: PUSH
22899: LD_VAR 0 3
22903: PPUSH
22904: LD_VAR 0 4
22908: PPUSH
22909: LD_VAR 0 9
22913: PPUSH
22914: CALL_OW 440
22918: NOT
22919: AND
22920: IFFALSE 22924
// exit ;
22922: GO 22932
// result := true ;
22924: LD_ADDR_VAR 0 6
22928: PUSH
22929: LD_INT 1
22931: ST_TO_ADDR
// end ;
22932: LD_VAR 0 6
22936: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
22937: LD_INT 0
22939: PPUSH
22940: PPUSH
22941: PPUSH
22942: PPUSH
22943: PPUSH
22944: PPUSH
22945: PPUSH
22946: PPUSH
22947: PPUSH
22948: PPUSH
22949: PPUSH
22950: PPUSH
22951: PPUSH
22952: PPUSH
22953: PPUSH
22954: PPUSH
22955: PPUSH
22956: PPUSH
22957: PPUSH
22958: PPUSH
22959: PPUSH
22960: PPUSH
22961: PPUSH
22962: PPUSH
22963: PPUSH
22964: PPUSH
22965: PPUSH
22966: PPUSH
22967: PPUSH
22968: PPUSH
22969: PPUSH
22970: PPUSH
22971: PPUSH
22972: PPUSH
22973: PPUSH
22974: PPUSH
22975: PPUSH
22976: PPUSH
22977: PPUSH
22978: PPUSH
22979: PPUSH
22980: PPUSH
22981: PPUSH
22982: PPUSH
22983: PPUSH
22984: PPUSH
22985: PPUSH
22986: PPUSH
22987: PPUSH
22988: PPUSH
22989: PPUSH
22990: PPUSH
22991: PPUSH
22992: PPUSH
22993: PPUSH
22994: PPUSH
22995: PPUSH
22996: PPUSH
// result = [ ] ;
22997: LD_ADDR_VAR 0 7
23001: PUSH
23002: EMPTY
23003: ST_TO_ADDR
// temp_list = [ ] ;
23004: LD_ADDR_VAR 0 9
23008: PUSH
23009: EMPTY
23010: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23011: LD_VAR 0 4
23015: PUSH
23016: LD_INT 0
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: LD_INT 2
23024: PUSH
23025: LD_INT 3
23027: PUSH
23028: LD_INT 4
23030: PUSH
23031: LD_INT 5
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: IN
23042: NOT
23043: PUSH
23044: LD_VAR 0 1
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: LD_INT 1
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: IN
23059: PUSH
23060: LD_VAR 0 5
23064: PUSH
23065: LD_INT 1
23067: PUSH
23068: LD_INT 2
23070: PUSH
23071: LD_INT 3
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: LIST
23078: IN
23079: NOT
23080: AND
23081: OR
23082: IFFALSE 23086
// exit ;
23084: GO 41477
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23086: LD_VAR 0 1
23090: PUSH
23091: LD_INT 6
23093: PUSH
23094: LD_INT 7
23096: PUSH
23097: LD_INT 8
23099: PUSH
23100: LD_INT 13
23102: PUSH
23103: LD_INT 12
23105: PUSH
23106: LD_INT 15
23108: PUSH
23109: LD_INT 11
23111: PUSH
23112: LD_INT 14
23114: PUSH
23115: LD_INT 10
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: IN
23129: IFFALSE 23139
// btype = b_lab ;
23131: LD_ADDR_VAR 0 1
23135: PUSH
23136: LD_INT 6
23138: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23139: LD_VAR 0 6
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: LD_INT 1
23149: PUSH
23150: LD_INT 2
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: LIST
23157: IN
23158: NOT
23159: PUSH
23160: LD_VAR 0 1
23164: PUSH
23165: LD_INT 0
23167: PUSH
23168: LD_INT 1
23170: PUSH
23171: LD_INT 2
23173: PUSH
23174: LD_INT 3
23176: PUSH
23177: LD_INT 6
23179: PUSH
23180: LD_INT 36
23182: PUSH
23183: LD_INT 4
23185: PUSH
23186: LD_INT 5
23188: PUSH
23189: LD_INT 31
23191: PUSH
23192: LD_INT 32
23194: PUSH
23195: LD_INT 33
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: IN
23211: NOT
23212: PUSH
23213: LD_VAR 0 6
23217: PUSH
23218: LD_INT 1
23220: EQUAL
23221: AND
23222: OR
23223: PUSH
23224: LD_VAR 0 1
23228: PUSH
23229: LD_INT 2
23231: PUSH
23232: LD_INT 3
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: IN
23239: NOT
23240: PUSH
23241: LD_VAR 0 6
23245: PUSH
23246: LD_INT 2
23248: EQUAL
23249: AND
23250: OR
23251: IFFALSE 23261
// mode = 0 ;
23253: LD_ADDR_VAR 0 6
23257: PUSH
23258: LD_INT 0
23260: ST_TO_ADDR
// case mode of 0 :
23261: LD_VAR 0 6
23265: PUSH
23266: LD_INT 0
23268: DOUBLE
23269: EQUAL
23270: IFTRUE 23274
23272: GO 34727
23274: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23275: LD_ADDR_VAR 0 11
23279: PUSH
23280: LD_INT 0
23282: PUSH
23283: LD_INT 0
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 0
23292: PUSH
23293: LD_INT 1
23295: NEG
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: LD_INT 0
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 1
23313: PUSH
23314: LD_INT 1
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 0
23323: PUSH
23324: LD_INT 1
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 1
23333: NEG
23334: PUSH
23335: LD_INT 0
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 1
23344: NEG
23345: PUSH
23346: LD_INT 1
23348: NEG
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 1
23356: NEG
23357: PUSH
23358: LD_INT 2
23360: NEG
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 0
23368: PUSH
23369: LD_INT 2
23371: NEG
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 1
23379: PUSH
23380: LD_INT 1
23382: NEG
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: LD_INT 2
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 0
23400: PUSH
23401: LD_INT 2
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 1
23410: NEG
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: PUSH
23422: LD_INT 3
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 0
23431: PUSH
23432: LD_INT 3
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 1
23441: NEG
23442: PUSH
23443: LD_INT 2
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23468: LD_ADDR_VAR 0 12
23472: PUSH
23473: LD_INT 0
23475: PUSH
23476: LD_INT 0
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 0
23485: PUSH
23486: LD_INT 1
23488: NEG
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: LD_INT 1
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 0
23516: PUSH
23517: LD_INT 1
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 1
23526: NEG
23527: PUSH
23528: LD_INT 0
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 1
23537: NEG
23538: PUSH
23539: LD_INT 1
23541: NEG
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 1
23549: PUSH
23550: LD_INT 1
23552: NEG
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 2
23560: PUSH
23561: LD_INT 0
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 2
23570: PUSH
23571: LD_INT 1
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 1
23580: NEG
23581: PUSH
23582: LD_INT 1
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 2
23591: NEG
23592: PUSH
23593: LD_INT 0
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 2
23602: NEG
23603: PUSH
23604: LD_INT 1
23606: NEG
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 2
23614: NEG
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 3
23625: NEG
23626: PUSH
23627: LD_INT 0
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 3
23636: NEG
23637: PUSH
23638: LD_INT 1
23640: NEG
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23664: LD_ADDR_VAR 0 13
23668: PUSH
23669: LD_INT 0
23671: PUSH
23672: LD_INT 0
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: LD_INT 1
23684: NEG
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 1
23692: PUSH
23693: LD_INT 0
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: PUSH
23703: LD_INT 1
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 1
23722: NEG
23723: PUSH
23724: LD_INT 0
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 1
23733: NEG
23734: PUSH
23735: LD_INT 1
23737: NEG
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 1
23745: NEG
23746: PUSH
23747: LD_INT 2
23749: NEG
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 2
23757: PUSH
23758: LD_INT 1
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 2
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 1
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 2
23787: NEG
23788: PUSH
23789: LD_INT 1
23791: NEG
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 2
23799: NEG
23800: PUSH
23801: LD_INT 2
23803: NEG
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 2
23811: NEG
23812: PUSH
23813: LD_INT 3
23815: NEG
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 3
23823: NEG
23824: PUSH
23825: LD_INT 2
23827: NEG
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 3
23835: NEG
23836: PUSH
23837: LD_INT 3
23839: NEG
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23863: LD_ADDR_VAR 0 14
23867: PUSH
23868: LD_INT 0
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 0
23880: PUSH
23881: LD_INT 1
23883: NEG
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 1
23891: PUSH
23892: LD_INT 0
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 1
23901: PUSH
23902: LD_INT 1
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: LD_INT 1
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 1
23921: NEG
23922: PUSH
23923: LD_INT 0
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 1
23932: NEG
23933: PUSH
23934: LD_INT 1
23936: NEG
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 1
23944: NEG
23945: PUSH
23946: LD_INT 2
23948: NEG
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: LD_INT 2
23959: NEG
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 1
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: LD_INT 2
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: LD_INT 2
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 1
23998: NEG
23999: PUSH
24000: LD_INT 1
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 1
24009: NEG
24010: PUSH
24011: LD_INT 3
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 0
24021: PUSH
24022: LD_INT 3
24024: NEG
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 1
24032: PUSH
24033: LD_INT 2
24035: NEG
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24059: LD_ADDR_VAR 0 15
24063: PUSH
24064: LD_INT 0
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 0
24076: PUSH
24077: LD_INT 1
24079: NEG
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 1
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: PUSH
24098: LD_INT 1
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 1
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 1
24117: NEG
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: NEG
24129: PUSH
24130: LD_INT 1
24132: NEG
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 1
24140: PUSH
24141: LD_INT 1
24143: NEG
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 2
24151: PUSH
24152: LD_INT 0
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 2
24161: PUSH
24162: LD_INT 1
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: NEG
24172: PUSH
24173: LD_INT 1
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 2
24182: NEG
24183: PUSH
24184: LD_INT 0
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 2
24193: NEG
24194: PUSH
24195: LD_INT 1
24197: NEG
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 2
24205: PUSH
24206: LD_INT 1
24208: NEG
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 3
24216: PUSH
24217: LD_INT 0
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 3
24226: PUSH
24227: LD_INT 1
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24252: LD_ADDR_VAR 0 16
24256: PUSH
24257: LD_INT 0
24259: PUSH
24260: LD_INT 0
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: LD_INT 1
24272: NEG
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: LD_INT 0
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 1
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 0
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 1
24310: NEG
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 1
24321: NEG
24322: PUSH
24323: LD_INT 1
24325: NEG
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: LD_INT 2
24337: NEG
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 2
24345: PUSH
24346: LD_INT 1
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 2
24355: PUSH
24356: LD_INT 2
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: LD_INT 2
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 2
24375: NEG
24376: PUSH
24377: LD_INT 1
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 2
24387: NEG
24388: PUSH
24389: LD_INT 2
24391: NEG
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 3
24399: PUSH
24400: LD_INT 2
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 3
24409: PUSH
24410: LD_INT 3
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 2
24419: PUSH
24420: LD_INT 3
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24445: LD_ADDR_VAR 0 17
24449: PUSH
24450: LD_INT 0
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 0
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 1
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 1
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 0
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 1
24503: NEG
24504: PUSH
24505: LD_INT 0
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: LD_INT 1
24518: NEG
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 1
24526: NEG
24527: PUSH
24528: LD_INT 2
24530: NEG
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 0
24538: PUSH
24539: LD_INT 2
24541: NEG
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: LD_INT 1
24552: NEG
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 2
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 2
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 2
24580: PUSH
24581: LD_INT 2
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: LD_INT 2
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 0
24600: PUSH
24601: LD_INT 2
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 1
24610: NEG
24611: PUSH
24612: LD_INT 1
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 2
24621: NEG
24622: PUSH
24623: LD_INT 0
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 2
24632: NEG
24633: PUSH
24634: LD_INT 1
24636: NEG
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 2
24644: NEG
24645: PUSH
24646: LD_INT 2
24648: NEG
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24675: LD_ADDR_VAR 0 18
24679: PUSH
24680: LD_INT 0
24682: PUSH
24683: LD_INT 0
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 0
24692: PUSH
24693: LD_INT 1
24695: NEG
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 1
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 1
24733: NEG
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 1
24744: NEG
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 1
24756: NEG
24757: PUSH
24758: LD_INT 2
24760: NEG
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: LD_INT 2
24771: NEG
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: LD_INT 1
24782: NEG
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 2
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 2
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 2
24810: PUSH
24811: LD_INT 2
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: LD_INT 2
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 0
24830: PUSH
24831: LD_INT 2
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 1
24840: NEG
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 2
24851: NEG
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 2
24862: NEG
24863: PUSH
24864: LD_INT 1
24866: NEG
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 2
24874: NEG
24875: PUSH
24876: LD_INT 2
24878: NEG
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24905: LD_ADDR_VAR 0 19
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: LD_INT 0
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: LD_INT 1
24925: NEG
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 1
24933: PUSH
24934: LD_INT 0
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 1
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: LD_INT 1
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 1
24963: NEG
24964: PUSH
24965: LD_INT 0
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 1
24974: NEG
24975: PUSH
24976: LD_INT 1
24978: NEG
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 1
24986: NEG
24987: PUSH
24988: LD_INT 2
24990: NEG
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 0
24998: PUSH
24999: LD_INT 2
25001: NEG
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: LD_INT 1
25012: NEG
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: LD_INT 2
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 2
25030: PUSH
25031: LD_INT 1
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 2
25040: PUSH
25041: LD_INT 2
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 1
25050: PUSH
25051: LD_INT 2
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 0
25060: PUSH
25061: LD_INT 2
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 1
25070: NEG
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 2
25081: NEG
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 2
25092: NEG
25093: PUSH
25094: LD_INT 1
25096: NEG
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 2
25104: NEG
25105: PUSH
25106: LD_INT 2
25108: NEG
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25135: LD_ADDR_VAR 0 20
25139: PUSH
25140: LD_INT 0
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 0
25152: PUSH
25153: LD_INT 1
25155: NEG
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 1
25163: PUSH
25164: LD_INT 0
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 1
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 0
25183: PUSH
25184: LD_INT 1
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 1
25193: NEG
25194: PUSH
25195: LD_INT 0
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 1
25204: NEG
25205: PUSH
25206: LD_INT 1
25208: NEG
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 1
25216: NEG
25217: PUSH
25218: LD_INT 2
25220: NEG
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 0
25228: PUSH
25229: LD_INT 2
25231: NEG
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: LD_INT 1
25242: NEG
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 2
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 2
25260: PUSH
25261: LD_INT 1
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 2
25270: PUSH
25271: LD_INT 2
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 1
25280: PUSH
25281: LD_INT 2
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 0
25290: PUSH
25291: LD_INT 2
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 1
25300: NEG
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 2
25311: NEG
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 2
25322: NEG
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 2
25334: NEG
25335: PUSH
25336: LD_INT 2
25338: NEG
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25365: LD_ADDR_VAR 0 21
25369: PUSH
25370: LD_INT 0
25372: PUSH
25373: LD_INT 0
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 0
25382: PUSH
25383: LD_INT 1
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: LD_INT 1
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 0
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 1
25423: NEG
25424: PUSH
25425: LD_INT 0
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: LD_INT 1
25438: NEG
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: LD_INT 2
25450: NEG
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 0
25458: PUSH
25459: LD_INT 2
25461: NEG
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 1
25469: PUSH
25470: LD_INT 1
25472: NEG
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 2
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 2
25490: PUSH
25491: LD_INT 1
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 2
25500: PUSH
25501: LD_INT 2
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 1
25510: PUSH
25511: LD_INT 2
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: LD_INT 2
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 2
25541: NEG
25542: PUSH
25543: LD_INT 0
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 2
25552: NEG
25553: PUSH
25554: LD_INT 1
25556: NEG
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 2
25564: NEG
25565: PUSH
25566: LD_INT 2
25568: NEG
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25595: LD_ADDR_VAR 0 22
25599: PUSH
25600: LD_INT 0
25602: PUSH
25603: LD_INT 0
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 0
25612: PUSH
25613: LD_INT 1
25615: NEG
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 1
25623: PUSH
25624: LD_INT 0
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 1
25633: PUSH
25634: LD_INT 1
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 0
25643: PUSH
25644: LD_INT 1
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: LD_INT 0
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 1
25664: NEG
25665: PUSH
25666: LD_INT 1
25668: NEG
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: LD_INT 2
25680: NEG
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 0
25688: PUSH
25689: LD_INT 2
25691: NEG
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 1
25699: PUSH
25700: LD_INT 1
25702: NEG
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 2
25710: PUSH
25711: LD_INT 0
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 2
25720: PUSH
25721: LD_INT 1
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 2
25730: PUSH
25731: LD_INT 2
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 1
25740: PUSH
25741: LD_INT 2
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 0
25750: PUSH
25751: LD_INT 2
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 1
25760: NEG
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 2
25771: NEG
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 2
25782: NEG
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 2
25794: NEG
25795: PUSH
25796: LD_INT 2
25798: NEG
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
25825: LD_ADDR_VAR 0 23
25829: PUSH
25830: LD_INT 0
25832: PUSH
25833: LD_INT 0
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 0
25842: PUSH
25843: LD_INT 1
25845: NEG
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 1
25853: PUSH
25854: LD_INT 0
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: LD_INT 1
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: NEG
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 1
25894: NEG
25895: PUSH
25896: LD_INT 1
25898: NEG
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 1
25906: NEG
25907: PUSH
25908: LD_INT 2
25910: NEG
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 0
25918: PUSH
25919: LD_INT 2
25921: NEG
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 1
25929: PUSH
25930: LD_INT 1
25932: NEG
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 2
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 2
25950: PUSH
25951: LD_INT 1
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 2
25960: PUSH
25961: LD_INT 2
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 1
25970: PUSH
25971: LD_INT 2
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: LD_INT 1
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 2
26001: NEG
26002: PUSH
26003: LD_INT 0
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 2
26012: NEG
26013: PUSH
26014: LD_INT 1
26016: NEG
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 2
26024: NEG
26025: PUSH
26026: LD_INT 2
26028: NEG
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 2
26036: NEG
26037: PUSH
26038: LD_INT 3
26040: NEG
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: NEG
26049: PUSH
26050: LD_INT 3
26052: NEG
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 1
26060: PUSH
26061: LD_INT 2
26063: NEG
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 2
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26105: LD_ADDR_VAR 0 24
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: LD_INT 1
26125: NEG
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: LD_INT 1
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 1
26163: NEG
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 1
26174: NEG
26175: PUSH
26176: LD_INT 1
26178: NEG
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: LD_INT 2
26190: NEG
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: LD_INT 2
26201: NEG
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 1
26209: PUSH
26210: LD_INT 1
26212: NEG
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 2
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 2
26230: PUSH
26231: LD_INT 1
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 2
26240: PUSH
26241: LD_INT 2
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 1
26250: PUSH
26251: LD_INT 2
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: LD_INT 2
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 1
26270: NEG
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 2
26281: NEG
26282: PUSH
26283: LD_INT 0
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 2
26292: NEG
26293: PUSH
26294: LD_INT 1
26296: NEG
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 2
26304: NEG
26305: PUSH
26306: LD_INT 2
26308: NEG
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 1
26316: PUSH
26317: LD_INT 2
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 2
26327: PUSH
26328: LD_INT 1
26330: NEG
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 3
26338: PUSH
26339: LD_INT 1
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 3
26348: PUSH
26349: LD_INT 2
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26381: LD_ADDR_VAR 0 25
26385: PUSH
26386: LD_INT 0
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: LD_INT 1
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: NEG
26451: PUSH
26452: LD_INT 1
26454: NEG
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 1
26462: NEG
26463: PUSH
26464: LD_INT 2
26466: NEG
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 0
26474: PUSH
26475: LD_INT 2
26477: NEG
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 1
26485: PUSH
26486: LD_INT 1
26488: NEG
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 2
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 2
26516: PUSH
26517: LD_INT 2
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: LD_INT 2
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 0
26536: PUSH
26537: LD_INT 2
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 1
26546: NEG
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 2
26568: NEG
26569: PUSH
26570: LD_INT 1
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 2
26580: NEG
26581: PUSH
26582: LD_INT 2
26584: NEG
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 3
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 3
26602: PUSH
26603: LD_INT 2
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 2
26612: PUSH
26613: LD_INT 3
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 1
26622: PUSH
26623: LD_INT 3
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26655: LD_ADDR_VAR 0 26
26659: PUSH
26660: LD_INT 0
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 0
26672: PUSH
26673: LD_INT 1
26675: NEG
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 1
26683: PUSH
26684: LD_INT 0
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 1
26693: PUSH
26694: LD_INT 1
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 0
26703: PUSH
26704: LD_INT 1
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 1
26713: NEG
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 1
26724: NEG
26725: PUSH
26726: LD_INT 1
26728: NEG
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: NEG
26737: PUSH
26738: LD_INT 2
26740: NEG
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 0
26748: PUSH
26749: LD_INT 2
26751: NEG
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 1
26759: PUSH
26760: LD_INT 1
26762: NEG
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 2
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 2
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 2
26790: PUSH
26791: LD_INT 2
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: LD_INT 2
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: LD_INT 2
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 1
26820: NEG
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 2
26831: NEG
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 2
26842: NEG
26843: PUSH
26844: LD_INT 1
26846: NEG
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 2
26854: NEG
26855: PUSH
26856: LD_INT 2
26858: NEG
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 2
26866: PUSH
26867: LD_INT 3
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: LD_INT 3
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 1
26886: NEG
26887: PUSH
26888: LD_INT 2
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 2
26897: NEG
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26931: LD_ADDR_VAR 0 27
26935: PUSH
26936: LD_INT 0
26938: PUSH
26939: LD_INT 0
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: LD_INT 1
26951: NEG
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 1
26969: PUSH
26970: LD_INT 1
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: LD_INT 1
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: LD_INT 0
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 1
27000: NEG
27001: PUSH
27002: LD_INT 1
27004: NEG
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 1
27012: NEG
27013: PUSH
27014: LD_INT 2
27016: NEG
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 0
27024: PUSH
27025: LD_INT 2
27027: NEG
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 2
27046: PUSH
27047: LD_INT 0
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 2
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 2
27066: PUSH
27067: LD_INT 2
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: LD_INT 2
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 0
27086: PUSH
27087: LD_INT 2
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 1
27096: NEG
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 2
27107: NEG
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 2
27118: NEG
27119: PUSH
27120: LD_INT 1
27122: NEG
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 2
27130: NEG
27131: PUSH
27132: LD_INT 2
27134: NEG
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: NEG
27143: PUSH
27144: LD_INT 2
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 2
27153: NEG
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 3
27164: NEG
27165: PUSH
27166: LD_INT 1
27168: NEG
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 3
27176: NEG
27177: PUSH
27178: LD_INT 2
27180: NEG
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27211: LD_ADDR_VAR 0 28
27215: PUSH
27216: LD_INT 0
27218: PUSH
27219: LD_INT 0
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: LD_INT 1
27231: NEG
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 1
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: LD_INT 1
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 1
27269: NEG
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: LD_INT 1
27284: NEG
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 1
27292: NEG
27293: PUSH
27294: LD_INT 2
27296: NEG
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: LD_INT 2
27307: NEG
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: LD_INT 1
27318: NEG
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 2
27326: PUSH
27327: LD_INT 0
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 2
27336: PUSH
27337: LD_INT 1
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: LD_INT 2
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 1
27356: PUSH
27357: LD_INT 2
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 0
27366: PUSH
27367: LD_INT 2
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 1
27376: NEG
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 2
27387: NEG
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 2
27398: NEG
27399: PUSH
27400: LD_INT 1
27402: NEG
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 2
27410: NEG
27411: PUSH
27412: LD_INT 2
27414: NEG
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 2
27422: NEG
27423: PUSH
27424: LD_INT 3
27426: NEG
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 1
27434: NEG
27435: PUSH
27436: LD_INT 3
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 3
27446: NEG
27447: PUSH
27448: LD_INT 1
27450: NEG
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 3
27458: NEG
27459: PUSH
27460: LD_INT 2
27462: NEG
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27493: LD_ADDR_VAR 0 29
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: LD_INT 0
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 0
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 1
27521: PUSH
27522: LD_INT 0
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 0
27541: PUSH
27542: LD_INT 1
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: LD_INT 0
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 1
27562: NEG
27563: PUSH
27564: LD_INT 1
27566: NEG
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 1
27574: NEG
27575: PUSH
27576: LD_INT 2
27578: NEG
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 0
27586: PUSH
27587: LD_INT 2
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: LD_INT 1
27600: NEG
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 2
27608: PUSH
27609: LD_INT 0
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 2
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: LD_INT 2
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 0
27638: PUSH
27639: LD_INT 2
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 1
27648: NEG
27649: PUSH
27650: LD_INT 1
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 2
27659: NEG
27660: PUSH
27661: LD_INT 1
27663: NEG
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 2
27671: NEG
27672: PUSH
27673: LD_INT 2
27675: NEG
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 2
27683: NEG
27684: PUSH
27685: LD_INT 3
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 2
27695: PUSH
27696: LD_INT 1
27698: NEG
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 3
27706: PUSH
27707: LD_INT 1
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 1
27716: PUSH
27717: LD_INT 3
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 1
27726: NEG
27727: PUSH
27728: LD_INT 2
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 3
27737: NEG
27738: PUSH
27739: LD_INT 2
27741: NEG
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27772: LD_ADDR_VAR 0 30
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 0
27789: PUSH
27790: LD_INT 1
27792: NEG
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: LD_INT 1
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 1
27830: NEG
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 1
27841: NEG
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 1
27853: NEG
27854: PUSH
27855: LD_INT 2
27857: NEG
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: LD_INT 2
27868: NEG
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 2
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 2
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 2
27907: PUSH
27908: LD_INT 2
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: PUSH
27918: LD_INT 2
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: PUSH
27929: LD_INT 1
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 2
27938: NEG
27939: PUSH
27940: LD_INT 0
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 2
27949: NEG
27950: PUSH
27951: LD_INT 1
27953: NEG
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 1
27961: NEG
27962: PUSH
27963: LD_INT 3
27965: NEG
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 1
27973: PUSH
27974: LD_INT 2
27976: NEG
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 3
27984: PUSH
27985: LD_INT 2
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 2
27994: PUSH
27995: LD_INT 3
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 2
28004: NEG
28005: PUSH
28006: LD_INT 1
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 3
28015: NEG
28016: PUSH
28017: LD_INT 1
28019: NEG
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28050: LD_ADDR_VAR 0 31
28054: PUSH
28055: LD_INT 0
28057: PUSH
28058: LD_INT 0
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 0
28067: PUSH
28068: LD_INT 1
28070: NEG
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 1
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 1
28088: PUSH
28089: LD_INT 1
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 1
28119: NEG
28120: PUSH
28121: LD_INT 1
28123: NEG
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: LD_INT 2
28135: NEG
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 1
28143: PUSH
28144: LD_INT 1
28146: NEG
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 2
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 2
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: LD_INT 2
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: PUSH
28185: LD_INT 2
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: LD_INT 2
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 1
28204: NEG
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 2
28215: NEG
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 2
28227: NEG
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 2
28239: NEG
28240: PUSH
28241: LD_INT 3
28243: NEG
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 3
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: LD_INT 3
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 1
28282: NEG
28283: PUSH
28284: LD_INT 2
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 3
28293: NEG
28294: PUSH
28295: LD_INT 2
28297: NEG
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28328: LD_ADDR_VAR 0 32
28332: PUSH
28333: LD_INT 0
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: LD_INT 1
28348: NEG
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 1
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 0
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: NEG
28387: PUSH
28388: LD_INT 0
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 1
28397: NEG
28398: PUSH
28399: LD_INT 1
28401: NEG
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 1
28409: NEG
28410: PUSH
28411: LD_INT 2
28413: NEG
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: LD_INT 2
28424: NEG
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: LD_INT 1
28435: NEG
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 2
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: LD_INT 2
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 0
28473: PUSH
28474: LD_INT 2
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 1
28483: NEG
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 2
28494: NEG
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 2
28505: NEG
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 1
28517: NEG
28518: PUSH
28519: LD_INT 3
28521: NEG
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 1
28529: PUSH
28530: LD_INT 2
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 3
28540: PUSH
28541: LD_INT 2
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 2
28550: PUSH
28551: LD_INT 3
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 2
28560: NEG
28561: PUSH
28562: LD_INT 1
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 3
28571: NEG
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28606: LD_ADDR_VAR 0 33
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: LD_INT 0
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: LD_INT 1
28626: NEG
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: LD_INT 1
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: LD_INT 1
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: NEG
28665: PUSH
28666: LD_INT 0
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 1
28675: NEG
28676: PUSH
28677: LD_INT 1
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: LD_INT 2
28691: NEG
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 1
28699: PUSH
28700: LD_INT 1
28702: NEG
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: LD_INT 0
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 2
28720: PUSH
28721: LD_INT 1
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 1
28730: PUSH
28731: LD_INT 2
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 0
28740: PUSH
28741: LD_INT 2
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: PUSH
28752: LD_INT 1
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 2
28761: NEG
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 2
28772: NEG
28773: PUSH
28774: LD_INT 1
28776: NEG
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 2
28784: NEG
28785: PUSH
28786: LD_INT 2
28788: NEG
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 2
28796: NEG
28797: PUSH
28798: LD_INT 3
28800: NEG
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: LD_INT 1
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 3
28819: PUSH
28820: LD_INT 1
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: LD_INT 3
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 1
28839: NEG
28840: PUSH
28841: LD_INT 2
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 3
28850: NEG
28851: PUSH
28852: LD_INT 2
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28885: LD_ADDR_VAR 0 34
28889: PUSH
28890: LD_INT 0
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 0
28902: PUSH
28903: LD_INT 1
28905: NEG
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 1
28913: PUSH
28914: LD_INT 0
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 1
28923: PUSH
28924: LD_INT 1
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 0
28933: PUSH
28934: LD_INT 1
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: LD_INT 0
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 1
28954: NEG
28955: PUSH
28956: LD_INT 1
28958: NEG
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 1
28966: NEG
28967: PUSH
28968: LD_INT 2
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 0
28978: PUSH
28979: LD_INT 2
28981: NEG
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: LD_INT 1
28992: NEG
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 2
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 2
29010: PUSH
29011: LD_INT 2
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: LD_INT 2
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 1
29030: NEG
29031: PUSH
29032: LD_INT 1
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 2
29041: NEG
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 2
29052: NEG
29053: PUSH
29054: LD_INT 1
29056: NEG
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 2
29064: NEG
29065: PUSH
29066: LD_INT 2
29068: NEG
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 1
29076: NEG
29077: PUSH
29078: LD_INT 3
29080: NEG
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: LD_INT 2
29091: NEG
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 3
29099: PUSH
29100: LD_INT 2
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 2
29109: PUSH
29110: LD_INT 3
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 2
29119: NEG
29120: PUSH
29121: LD_INT 1
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 3
29130: NEG
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29165: LD_ADDR_VAR 0 35
29169: PUSH
29170: LD_INT 0
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 0
29182: PUSH
29183: LD_INT 1
29185: NEG
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 1
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 1
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 0
29213: PUSH
29214: LD_INT 1
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 1
29223: NEG
29224: PUSH
29225: LD_INT 0
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 1
29234: NEG
29235: PUSH
29236: LD_INT 1
29238: NEG
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 2
29246: PUSH
29247: LD_INT 1
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 2
29256: NEG
29257: PUSH
29258: LD_INT 1
29260: NEG
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29277: LD_ADDR_VAR 0 36
29281: PUSH
29282: LD_INT 0
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 0
29294: PUSH
29295: LD_INT 1
29297: NEG
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: LD_INT 0
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 1
29315: PUSH
29316: LD_INT 1
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 0
29325: PUSH
29326: LD_INT 1
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 1
29335: NEG
29336: PUSH
29337: LD_INT 0
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 1
29346: NEG
29347: PUSH
29348: LD_INT 1
29350: NEG
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 1
29358: NEG
29359: PUSH
29360: LD_INT 2
29362: NEG
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: LD_INT 2
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29389: LD_ADDR_VAR 0 37
29393: PUSH
29394: LD_INT 0
29396: PUSH
29397: LD_INT 0
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 0
29406: PUSH
29407: LD_INT 1
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 1
29417: PUSH
29418: LD_INT 0
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 1
29427: PUSH
29428: LD_INT 1
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 0
29437: PUSH
29438: LD_INT 1
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 1
29447: NEG
29448: PUSH
29449: LD_INT 0
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 1
29458: NEG
29459: PUSH
29460: LD_INT 1
29462: NEG
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 1
29470: PUSH
29471: LD_INT 1
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29501: LD_ADDR_VAR 0 38
29505: PUSH
29506: LD_INT 0
29508: PUSH
29509: LD_INT 0
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 0
29518: PUSH
29519: LD_INT 1
29521: NEG
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: LD_INT 1
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 0
29549: PUSH
29550: LD_INT 1
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 1
29559: NEG
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: LD_INT 1
29574: NEG
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 2
29582: PUSH
29583: LD_INT 1
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 2
29592: NEG
29593: PUSH
29594: LD_INT 1
29596: NEG
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29613: LD_ADDR_VAR 0 39
29617: PUSH
29618: LD_INT 0
29620: PUSH
29621: LD_INT 0
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 0
29630: PUSH
29631: LD_INT 1
29633: NEG
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 1
29641: PUSH
29642: LD_INT 0
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 1
29651: PUSH
29652: LD_INT 1
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 0
29661: PUSH
29662: LD_INT 1
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 1
29671: NEG
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 1
29682: NEG
29683: PUSH
29684: LD_INT 1
29686: NEG
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 1
29694: NEG
29695: PUSH
29696: LD_INT 2
29698: NEG
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: LD_INT 2
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29725: LD_ADDR_VAR 0 40
29729: PUSH
29730: LD_INT 0
29732: PUSH
29733: LD_INT 0
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 0
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 1
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 1
29763: PUSH
29764: LD_INT 1
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 0
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 1
29783: NEG
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: NEG
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: LD_INT 1
29809: NEG
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 1
29817: NEG
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29837: LD_ADDR_VAR 0 41
29841: PUSH
29842: LD_INT 0
29844: PUSH
29845: LD_INT 0
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: LD_INT 1
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 1
29865: PUSH
29866: LD_INT 0
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: LD_INT 1
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 1
29895: NEG
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 1
29906: NEG
29907: PUSH
29908: LD_INT 1
29910: NEG
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: LD_INT 2
29922: NEG
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: LD_INT 1
29933: NEG
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 2
29941: PUSH
29942: LD_INT 0
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 2
29951: PUSH
29952: LD_INT 1
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 2
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: LD_INT 2
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 1
29981: NEG
29982: PUSH
29983: LD_INT 1
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 2
29992: NEG
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 2
30003: NEG
30004: PUSH
30005: LD_INT 1
30007: NEG
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 2
30015: NEG
30016: PUSH
30017: LD_INT 2
30019: NEG
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 2
30027: NEG
30028: PUSH
30029: LD_INT 3
30031: NEG
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 2
30039: PUSH
30040: LD_INT 1
30042: NEG
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 3
30050: PUSH
30051: LD_INT 0
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 3
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 3
30070: PUSH
30071: LD_INT 2
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 3
30080: PUSH
30081: LD_INT 3
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 2
30090: PUSH
30091: LD_INT 3
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 2
30100: NEG
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 3
30111: NEG
30112: PUSH
30113: LD_INT 0
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 3
30122: NEG
30123: PUSH
30124: LD_INT 1
30126: NEG
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 3
30134: NEG
30135: PUSH
30136: LD_INT 2
30138: NEG
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 3
30146: NEG
30147: PUSH
30148: LD_INT 3
30150: NEG
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30187: LD_ADDR_VAR 0 42
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: LD_INT 0
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 0
30204: PUSH
30205: LD_INT 1
30207: NEG
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 1
30215: PUSH
30216: LD_INT 0
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: LD_INT 1
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 0
30235: PUSH
30236: LD_INT 1
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 1
30245: NEG
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 1
30256: NEG
30257: PUSH
30258: LD_INT 1
30260: NEG
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 1
30268: NEG
30269: PUSH
30270: LD_INT 2
30272: NEG
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: LD_INT 2
30283: NEG
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: LD_INT 1
30294: NEG
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 2
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 2
30312: PUSH
30313: LD_INT 2
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 1
30322: PUSH
30323: LD_INT 2
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: LD_INT 2
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: PUSH
30344: LD_INT 1
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 2
30353: NEG
30354: PUSH
30355: LD_INT 1
30357: NEG
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 2
30365: NEG
30366: PUSH
30367: LD_INT 2
30369: NEG
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 2
30377: NEG
30378: PUSH
30379: LD_INT 3
30381: NEG
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 1
30389: NEG
30390: PUSH
30391: LD_INT 3
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: LD_INT 3
30404: NEG
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 1
30412: PUSH
30413: LD_INT 2
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 3
30423: PUSH
30424: LD_INT 2
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 3
30433: PUSH
30434: LD_INT 3
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: LD_INT 3
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: LD_INT 3
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 0
30463: PUSH
30464: LD_INT 3
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 1
30473: NEG
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 3
30484: NEG
30485: PUSH
30486: LD_INT 2
30488: NEG
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 3
30496: NEG
30497: PUSH
30498: LD_INT 3
30500: NEG
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30537: LD_ADDR_VAR 0 43
30541: PUSH
30542: LD_INT 0
30544: PUSH
30545: LD_INT 0
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 0
30554: PUSH
30555: LD_INT 1
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 1
30565: PUSH
30566: LD_INT 0
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 1
30575: PUSH
30576: LD_INT 1
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 0
30585: PUSH
30586: LD_INT 1
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 1
30595: NEG
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: NEG
30607: PUSH
30608: LD_INT 1
30610: NEG
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 1
30618: NEG
30619: PUSH
30620: LD_INT 2
30622: NEG
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 0
30630: PUSH
30631: LD_INT 2
30633: NEG
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 1
30641: PUSH
30642: LD_INT 1
30644: NEG
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 2
30652: PUSH
30653: LD_INT 0
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 2
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 1
30672: PUSH
30673: LD_INT 2
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: LD_INT 2
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 2
30703: NEG
30704: PUSH
30705: LD_INT 0
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 2
30714: NEG
30715: PUSH
30716: LD_INT 1
30718: NEG
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: LD_INT 3
30730: NEG
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 0
30738: PUSH
30739: LD_INT 3
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: LD_INT 2
30752: NEG
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 2
30760: PUSH
30761: LD_INT 1
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 3
30771: PUSH
30772: LD_INT 0
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 3
30781: PUSH
30782: LD_INT 1
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 1
30791: PUSH
30792: LD_INT 3
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 0
30801: PUSH
30802: LD_INT 3
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 1
30811: NEG
30812: PUSH
30813: LD_INT 2
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 2
30822: NEG
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 3
30833: NEG
30834: PUSH
30835: LD_INT 0
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 3
30844: NEG
30845: PUSH
30846: LD_INT 1
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30885: LD_ADDR_VAR 0 44
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: LD_INT 0
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: LD_INT 1
30905: NEG
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: LD_INT 1
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 0
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 1
30943: NEG
30944: PUSH
30945: LD_INT 0
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 1
30954: NEG
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 1
30966: NEG
30967: PUSH
30968: LD_INT 2
30970: NEG
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 1
30978: PUSH
30979: LD_INT 1
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 2
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 2
30999: PUSH
31000: LD_INT 1
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 2
31009: PUSH
31010: LD_INT 2
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 1
31019: PUSH
31020: LD_INT 2
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 1
31029: NEG
31030: PUSH
31031: LD_INT 1
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 2
31040: NEG
31041: PUSH
31042: LD_INT 0
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 2
31051: NEG
31052: PUSH
31053: LD_INT 1
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 2
31063: NEG
31064: PUSH
31065: LD_INT 2
31067: NEG
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 2
31075: NEG
31076: PUSH
31077: LD_INT 3
31079: NEG
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: LD_INT 1
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 3
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 3
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 3
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 3
31128: PUSH
31129: LD_INT 3
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: LD_INT 3
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 2
31148: NEG
31149: PUSH
31150: LD_INT 1
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 3
31159: NEG
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 3
31170: NEG
31171: PUSH
31172: LD_INT 1
31174: NEG
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 3
31182: NEG
31183: PUSH
31184: LD_INT 2
31186: NEG
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 3
31194: NEG
31195: PUSH
31196: LD_INT 3
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31235: LD_ADDR_VAR 0 45
31239: PUSH
31240: LD_INT 0
31242: PUSH
31243: LD_INT 0
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: LD_INT 0
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 1
31293: NEG
31294: PUSH
31295: LD_INT 0
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: NEG
31305: PUSH
31306: LD_INT 1
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: NEG
31317: PUSH
31318: LD_INT 2
31320: NEG
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 0
31328: PUSH
31329: LD_INT 2
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 1
31339: PUSH
31340: LD_INT 1
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 2
31350: PUSH
31351: LD_INT 1
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 2
31360: PUSH
31361: LD_INT 2
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 1
31370: PUSH
31371: LD_INT 2
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 0
31380: PUSH
31381: LD_INT 2
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 1
31390: NEG
31391: PUSH
31392: LD_INT 1
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 2
31401: NEG
31402: PUSH
31403: LD_INT 1
31405: NEG
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 2
31413: NEG
31414: PUSH
31415: LD_INT 2
31417: NEG
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 2
31425: NEG
31426: PUSH
31427: LD_INT 3
31429: NEG
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: LD_INT 3
31441: NEG
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 0
31449: PUSH
31450: LD_INT 3
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 1
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 3
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 3
31481: PUSH
31482: LD_INT 3
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: LD_INT 3
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 1
31501: PUSH
31502: LD_INT 3
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: LD_INT 3
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 1
31521: NEG
31522: PUSH
31523: LD_INT 2
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 3
31532: NEG
31533: PUSH
31534: LD_INT 2
31536: NEG
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 3
31544: NEG
31545: PUSH
31546: LD_INT 3
31548: NEG
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31585: LD_ADDR_VAR 0 46
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: LD_INT 1
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 1
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: PUSH
31624: LD_INT 1
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: LD_INT 1
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: LD_INT 2
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 0
31678: PUSH
31679: LD_INT 2
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 1
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 2
31700: PUSH
31701: LD_INT 0
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 1
31720: PUSH
31721: LD_INT 2
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 0
31730: PUSH
31731: LD_INT 2
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 1
31740: NEG
31741: PUSH
31742: LD_INT 1
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 2
31751: NEG
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 2
31762: NEG
31763: PUSH
31764: LD_INT 1
31766: NEG
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: LD_INT 3
31778: NEG
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: LD_INT 3
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: LD_INT 2
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 2
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 3
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 3
31829: PUSH
31830: LD_INT 1
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: LD_INT 3
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 0
31849: PUSH
31850: LD_INT 3
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 1
31859: NEG
31860: PUSH
31861: LD_INT 2
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 2
31870: NEG
31871: PUSH
31872: LD_INT 1
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 3
31881: NEG
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 3
31892: NEG
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31933: LD_ADDR_VAR 0 47
31937: PUSH
31938: LD_INT 0
31940: PUSH
31941: LD_INT 0
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 0
31950: PUSH
31951: LD_INT 1
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 1
31971: PUSH
31972: LD_INT 1
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: LD_INT 1
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 1
31991: NEG
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 1
32014: NEG
32015: PUSH
32016: LD_INT 2
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 0
32026: PUSH
32027: LD_INT 2
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 1
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 2
32048: NEG
32049: PUSH
32050: LD_INT 1
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 2
32060: NEG
32061: PUSH
32062: LD_INT 2
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32084: LD_ADDR_VAR 0 48
32088: PUSH
32089: LD_INT 0
32091: PUSH
32092: LD_INT 0
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: LD_INT 1
32104: NEG
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 1
32112: PUSH
32113: LD_INT 0
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 1
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 0
32132: PUSH
32133: LD_INT 1
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 1
32142: NEG
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 1
32153: NEG
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 1
32165: NEG
32166: PUSH
32167: LD_INT 2
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 0
32177: PUSH
32178: LD_INT 2
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 1
32188: PUSH
32189: LD_INT 1
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 2
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 2
32209: PUSH
32210: LD_INT 1
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32231: LD_ADDR_VAR 0 49
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: LD_INT 1
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: LD_INT 1
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: LD_INT 0
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 1
32300: NEG
32301: PUSH
32302: LD_INT 1
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 2
32323: PUSH
32324: LD_INT 0
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 2
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 2
32343: PUSH
32344: LD_INT 2
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 1
32353: PUSH
32354: LD_INT 2
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32375: LD_ADDR_VAR 0 50
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: LD_INT 1
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: PUSH
32404: LD_INT 0
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 0
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 1
32433: NEG
32434: PUSH
32435: LD_INT 0
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 1
32444: NEG
32445: PUSH
32446: LD_INT 1
32448: NEG
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 2
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 2
32466: PUSH
32467: LD_INT 2
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: LD_INT 2
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 0
32486: PUSH
32487: LD_INT 2
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 1
32496: NEG
32497: PUSH
32498: LD_INT 1
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32519: LD_ADDR_VAR 0 51
32523: PUSH
32524: LD_INT 0
32526: PUSH
32527: LD_INT 0
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 0
32536: PUSH
32537: LD_INT 1
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 1
32547: PUSH
32548: LD_INT 0
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 1
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 1
32577: NEG
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 1
32588: NEG
32589: PUSH
32590: LD_INT 1
32592: NEG
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: PUSH
32601: LD_INT 2
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 0
32610: PUSH
32611: LD_INT 2
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: NEG
32621: PUSH
32622: LD_INT 1
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 2
32631: NEG
32632: PUSH
32633: LD_INT 0
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 2
32642: NEG
32643: PUSH
32644: LD_INT 1
32646: NEG
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32666: LD_ADDR_VAR 0 52
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: LD_INT 1
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: LD_INT 0
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 0
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: LD_INT 1
32739: NEG
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: LD_INT 2
32751: NEG
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 1
32759: NEG
32760: PUSH
32761: LD_INT 1
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 2
32770: NEG
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 2
32781: NEG
32782: PUSH
32783: LD_INT 1
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 2
32793: NEG
32794: PUSH
32795: LD_INT 2
32797: NEG
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32817: LD_ADDR_VAR 0 53
32821: PUSH
32822: LD_INT 0
32824: PUSH
32825: LD_INT 0
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: LD_INT 1
32837: NEG
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 1
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 1
32855: PUSH
32856: LD_INT 1
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 0
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 1
32886: NEG
32887: PUSH
32888: LD_INT 1
32890: NEG
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 1
32898: NEG
32899: PUSH
32900: LD_INT 2
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: LD_INT 2
32913: NEG
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: LD_INT 1
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 2
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 2
32942: PUSH
32943: LD_INT 1
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 2
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 1
32962: PUSH
32963: LD_INT 2
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: LD_INT 2
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 1
32982: NEG
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 2
32993: NEG
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 2
33004: NEG
33005: PUSH
33006: LD_INT 1
33008: NEG
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 2
33016: NEG
33017: PUSH
33018: LD_INT 2
33020: NEG
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33047: LD_ADDR_VAR 0 54
33051: PUSH
33052: LD_INT 0
33054: PUSH
33055: LD_INT 0
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 0
33064: PUSH
33065: LD_INT 1
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 1
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 1
33085: PUSH
33086: LD_INT 1
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 0
33095: PUSH
33096: LD_INT 1
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 1
33105: NEG
33106: PUSH
33107: LD_INT 0
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 1
33116: NEG
33117: PUSH
33118: LD_INT 1
33120: NEG
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 1
33128: NEG
33129: PUSH
33130: LD_INT 2
33132: NEG
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: LD_INT 2
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 1
33151: PUSH
33152: LD_INT 1
33154: NEG
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 2
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 2
33172: PUSH
33173: LD_INT 1
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 2
33182: PUSH
33183: LD_INT 2
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 1
33192: PUSH
33193: LD_INT 2
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: LD_INT 2
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 1
33212: NEG
33213: PUSH
33214: LD_INT 1
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 2
33223: NEG
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 2
33234: NEG
33235: PUSH
33236: LD_INT 1
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 2
33246: NEG
33247: PUSH
33248: LD_INT 2
33250: NEG
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33277: LD_ADDR_VAR 0 55
33281: PUSH
33282: LD_INT 0
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: LD_INT 1
33297: NEG
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 1
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: LD_INT 1
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 0
33325: PUSH
33326: LD_INT 1
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 1
33335: NEG
33336: PUSH
33337: LD_INT 0
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 1
33346: NEG
33347: PUSH
33348: LD_INT 1
33350: NEG
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 1
33358: NEG
33359: PUSH
33360: LD_INT 2
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 0
33370: PUSH
33371: LD_INT 2
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 1
33381: PUSH
33382: LD_INT 1
33384: NEG
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 2
33402: PUSH
33403: LD_INT 1
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 2
33412: PUSH
33413: LD_INT 2
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 1
33422: PUSH
33423: LD_INT 2
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: LD_INT 2
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 1
33442: NEG
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 2
33453: NEG
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 2
33464: NEG
33465: PUSH
33466: LD_INT 1
33468: NEG
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 2
33476: NEG
33477: PUSH
33478: LD_INT 2
33480: NEG
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33507: LD_ADDR_VAR 0 56
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 1
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 0
33555: PUSH
33556: LD_INT 1
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: NEG
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: LD_INT 1
33580: NEG
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 1
33588: NEG
33589: PUSH
33590: LD_INT 2
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: LD_INT 2
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: LD_INT 1
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 2
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: LD_INT 1
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 2
33642: PUSH
33643: LD_INT 2
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: LD_INT 2
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 0
33662: PUSH
33663: LD_INT 2
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 1
33672: NEG
33673: PUSH
33674: LD_INT 1
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 2
33683: NEG
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 2
33694: NEG
33695: PUSH
33696: LD_INT 1
33698: NEG
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 2
33706: NEG
33707: PUSH
33708: LD_INT 2
33710: NEG
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33737: LD_ADDR_VAR 0 57
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: LD_INT 0
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: LD_INT 1
33757: NEG
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 1
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 1
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 0
33785: PUSH
33786: LD_INT 1
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 1
33795: NEG
33796: PUSH
33797: LD_INT 0
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 1
33806: NEG
33807: PUSH
33808: LD_INT 1
33810: NEG
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 1
33818: NEG
33819: PUSH
33820: LD_INT 2
33822: NEG
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 0
33830: PUSH
33831: LD_INT 2
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: LD_INT 1
33844: NEG
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 2
33852: PUSH
33853: LD_INT 0
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 2
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 2
33872: PUSH
33873: LD_INT 2
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 1
33882: PUSH
33883: LD_INT 2
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 0
33892: PUSH
33893: LD_INT 2
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 1
33902: NEG
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 2
33913: NEG
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 2
33924: NEG
33925: PUSH
33926: LD_INT 1
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 2
33936: NEG
33937: PUSH
33938: LD_INT 2
33940: NEG
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33967: LD_ADDR_VAR 0 58
33971: PUSH
33972: LD_INT 0
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: LD_INT 1
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 0
34015: PUSH
34016: LD_INT 1
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 1
34025: NEG
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 1
34036: NEG
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 1
34048: NEG
34049: PUSH
34050: LD_INT 2
34052: NEG
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 0
34060: PUSH
34061: LD_INT 2
34063: NEG
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 1
34071: PUSH
34072: LD_INT 1
34074: NEG
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 2
34082: PUSH
34083: LD_INT 0
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 2
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 2
34102: PUSH
34103: LD_INT 2
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 1
34112: PUSH
34113: LD_INT 2
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: LD_INT 2
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 1
34132: NEG
34133: PUSH
34134: LD_INT 1
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 2
34143: NEG
34144: PUSH
34145: LD_INT 0
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 2
34154: NEG
34155: PUSH
34156: LD_INT 1
34158: NEG
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 2
34166: NEG
34167: PUSH
34168: LD_INT 2
34170: NEG
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34197: LD_ADDR_VAR 0 59
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: LD_INT 0
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 0
34214: PUSH
34215: LD_INT 1
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: LD_INT 1
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: LD_INT 1
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: NEG
34256: PUSH
34257: LD_INT 0
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 1
34266: NEG
34267: PUSH
34268: LD_INT 1
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34285: LD_ADDR_VAR 0 60
34289: PUSH
34290: LD_INT 0
34292: PUSH
34293: LD_INT 0
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 1
34305: NEG
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: LD_INT 1
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: LD_INT 1
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34373: LD_ADDR_VAR 0 61
34377: PUSH
34378: LD_INT 0
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 0
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 1
34431: NEG
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 1
34442: NEG
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34461: LD_ADDR_VAR 0 62
34465: PUSH
34466: LD_INT 0
34468: PUSH
34469: LD_INT 0
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 0
34478: PUSH
34479: LD_INT 1
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 1
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 1
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: LD_INT 1
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 1
34519: NEG
34520: PUSH
34521: LD_INT 0
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 1
34530: NEG
34531: PUSH
34532: LD_INT 1
34534: NEG
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34549: LD_ADDR_VAR 0 63
34553: PUSH
34554: LD_INT 0
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 0
34566: PUSH
34567: LD_INT 1
34569: NEG
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: LD_INT 1
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 0
34597: PUSH
34598: LD_INT 1
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: LD_INT 0
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 1
34618: NEG
34619: PUSH
34620: LD_INT 1
34622: NEG
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34637: LD_ADDR_VAR 0 64
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 0
34685: PUSH
34686: LD_INT 1
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: NEG
34707: PUSH
34708: LD_INT 1
34710: NEG
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: ST_TO_ADDR
// end ; 1 :
34725: GO 40622
34727: LD_INT 1
34729: DOUBLE
34730: EQUAL
34731: IFTRUE 34735
34733: GO 37358
34735: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34736: LD_ADDR_VAR 0 11
34740: PUSH
34741: LD_INT 1
34743: NEG
34744: PUSH
34745: LD_INT 3
34747: NEG
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 0
34755: PUSH
34756: LD_INT 3
34758: NEG
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 1
34766: PUSH
34767: LD_INT 2
34769: NEG
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: LIST
34779: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34780: LD_ADDR_VAR 0 12
34784: PUSH
34785: LD_INT 2
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 3
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 3
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: LIST
34820: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34821: LD_ADDR_VAR 0 13
34825: PUSH
34826: LD_INT 3
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 3
34838: PUSH
34839: LD_INT 3
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 2
34848: PUSH
34849: LD_INT 3
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: LIST
34860: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34861: LD_ADDR_VAR 0 14
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: LD_INT 3
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: LD_INT 3
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 1
34888: NEG
34889: PUSH
34890: LD_INT 2
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: LIST
34901: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34902: LD_ADDR_VAR 0 15
34906: PUSH
34907: LD_INT 2
34909: NEG
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 3
34920: NEG
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 3
34931: NEG
34932: PUSH
34933: LD_INT 1
34935: NEG
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: LIST
34945: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34946: LD_ADDR_VAR 0 16
34950: PUSH
34951: LD_INT 2
34953: NEG
34954: PUSH
34955: LD_INT 3
34957: NEG
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 3
34965: NEG
34966: PUSH
34967: LD_INT 2
34969: NEG
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 3
34977: NEG
34978: PUSH
34979: LD_INT 3
34981: NEG
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: LIST
34991: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34992: LD_ADDR_VAR 0 17
34996: PUSH
34997: LD_INT 1
34999: NEG
35000: PUSH
35001: LD_INT 3
35003: NEG
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 0
35011: PUSH
35012: LD_INT 3
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 1
35022: PUSH
35023: LD_INT 2
35025: NEG
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: LIST
35035: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35036: LD_ADDR_VAR 0 18
35040: PUSH
35041: LD_INT 2
35043: PUSH
35044: LD_INT 1
35046: NEG
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 3
35054: PUSH
35055: LD_INT 0
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 3
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35077: LD_ADDR_VAR 0 19
35081: PUSH
35082: LD_INT 3
35084: PUSH
35085: LD_INT 2
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 3
35094: PUSH
35095: LD_INT 3
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 2
35104: PUSH
35105: LD_INT 3
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: LIST
35116: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35117: LD_ADDR_VAR 0 20
35121: PUSH
35122: LD_INT 1
35124: PUSH
35125: LD_INT 3
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: LD_INT 3
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 1
35144: NEG
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35158: LD_ADDR_VAR 0 21
35162: PUSH
35163: LD_INT 2
35165: NEG
35166: PUSH
35167: LD_INT 1
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 3
35176: NEG
35177: PUSH
35178: LD_INT 0
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 3
35187: NEG
35188: PUSH
35189: LD_INT 1
35191: NEG
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: LIST
35201: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35202: LD_ADDR_VAR 0 22
35206: PUSH
35207: LD_INT 2
35209: NEG
35210: PUSH
35211: LD_INT 3
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 3
35221: NEG
35222: PUSH
35223: LD_INT 2
35225: NEG
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 3
35233: NEG
35234: PUSH
35235: LD_INT 3
35237: NEG
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35248: LD_ADDR_VAR 0 23
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: LD_INT 3
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: LD_INT 4
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 1
35278: PUSH
35279: LD_INT 3
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: LIST
35291: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35292: LD_ADDR_VAR 0 24
35296: PUSH
35297: LD_INT 3
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 3
35309: PUSH
35310: LD_INT 1
35312: NEG
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 4
35320: PUSH
35321: LD_INT 1
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: LIST
35332: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35333: LD_ADDR_VAR 0 25
35337: PUSH
35338: LD_INT 3
35340: PUSH
35341: LD_INT 3
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 4
35350: PUSH
35351: LD_INT 3
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 3
35360: PUSH
35361: LD_INT 4
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: LIST
35372: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35373: LD_ADDR_VAR 0 26
35377: PUSH
35378: LD_INT 0
35380: PUSH
35381: LD_INT 3
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 1
35390: PUSH
35391: LD_INT 4
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 1
35400: NEG
35401: PUSH
35402: LD_INT 3
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: LIST
35413: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35414: LD_ADDR_VAR 0 27
35418: PUSH
35419: LD_INT 3
35421: NEG
35422: PUSH
35423: LD_INT 0
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 3
35432: NEG
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 4
35443: NEG
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: LIST
35457: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35458: LD_ADDR_VAR 0 28
35462: PUSH
35463: LD_INT 3
35465: NEG
35466: PUSH
35467: LD_INT 3
35469: NEG
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 3
35477: NEG
35478: PUSH
35479: LD_INT 4
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 4
35489: NEG
35490: PUSH
35491: LD_INT 3
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: LIST
35503: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35504: LD_ADDR_VAR 0 29
35508: PUSH
35509: LD_INT 1
35511: NEG
35512: PUSH
35513: LD_INT 3
35515: NEG
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: LD_INT 3
35526: NEG
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: LD_INT 2
35537: NEG
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 1
35545: NEG
35546: PUSH
35547: LD_INT 4
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 0
35557: PUSH
35558: LD_INT 4
35560: NEG
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: LD_INT 3
35571: NEG
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 1
35579: NEG
35580: PUSH
35581: LD_INT 5
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: LD_INT 5
35594: NEG
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: LD_INT 4
35605: NEG
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: LD_INT 6
35617: NEG
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 0
35625: PUSH
35626: LD_INT 6
35628: NEG
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: LD_INT 5
35639: NEG
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35659: LD_ADDR_VAR 0 30
35663: PUSH
35664: LD_INT 2
35666: PUSH
35667: LD_INT 1
35669: NEG
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 3
35677: PUSH
35678: LD_INT 0
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 3
35687: PUSH
35688: LD_INT 1
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 3
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 4
35708: PUSH
35709: LD_INT 0
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 4
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 4
35728: PUSH
35729: LD_INT 1
35731: NEG
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 5
35739: PUSH
35740: LD_INT 0
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 5
35749: PUSH
35750: LD_INT 1
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 5
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 6
35770: PUSH
35771: LD_INT 0
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 6
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
35802: LD_ADDR_VAR 0 31
35806: PUSH
35807: LD_INT 3
35809: PUSH
35810: LD_INT 2
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 3
35819: PUSH
35820: LD_INT 3
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 2
35829: PUSH
35830: LD_INT 3
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 4
35839: PUSH
35840: LD_INT 3
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 4
35849: PUSH
35850: LD_INT 4
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 3
35859: PUSH
35860: LD_INT 4
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 5
35869: PUSH
35870: LD_INT 4
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 5
35879: PUSH
35880: LD_INT 5
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 4
35889: PUSH
35890: LD_INT 5
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 6
35899: PUSH
35900: LD_INT 5
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 6
35909: PUSH
35910: LD_INT 6
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 5
35919: PUSH
35920: LD_INT 6
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
35941: LD_ADDR_VAR 0 32
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: LD_INT 3
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 0
35958: PUSH
35959: LD_INT 3
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: NEG
35969: PUSH
35970: LD_INT 2
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 1
35979: PUSH
35980: LD_INT 4
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 0
35989: PUSH
35990: LD_INT 4
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 1
35999: NEG
36000: PUSH
36001: LD_INT 3
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 1
36010: PUSH
36011: LD_INT 5
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: LD_INT 5
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: NEG
36031: PUSH
36032: LD_INT 4
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: LD_INT 6
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: LD_INT 6
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: LD_INT 5
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36084: LD_ADDR_VAR 0 33
36088: PUSH
36089: LD_INT 2
36091: NEG
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 3
36102: NEG
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 3
36113: NEG
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 3
36125: NEG
36126: PUSH
36127: LD_INT 1
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 4
36136: NEG
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 4
36147: NEG
36148: PUSH
36149: LD_INT 1
36151: NEG
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 4
36159: NEG
36160: PUSH
36161: LD_INT 1
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 5
36170: NEG
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 5
36181: NEG
36182: PUSH
36183: LD_INT 1
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 5
36193: NEG
36194: PUSH
36195: LD_INT 1
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 6
36204: NEG
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 6
36215: NEG
36216: PUSH
36217: LD_INT 1
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36239: LD_ADDR_VAR 0 34
36243: PUSH
36244: LD_INT 2
36246: NEG
36247: PUSH
36248: LD_INT 3
36250: NEG
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 3
36258: NEG
36259: PUSH
36260: LD_INT 2
36262: NEG
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 3
36270: NEG
36271: PUSH
36272: LD_INT 3
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 3
36282: NEG
36283: PUSH
36284: LD_INT 4
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 4
36294: NEG
36295: PUSH
36296: LD_INT 3
36298: NEG
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 4
36306: NEG
36307: PUSH
36308: LD_INT 4
36310: NEG
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 4
36318: NEG
36319: PUSH
36320: LD_INT 5
36322: NEG
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 5
36330: NEG
36331: PUSH
36332: LD_INT 4
36334: NEG
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 5
36342: NEG
36343: PUSH
36344: LD_INT 5
36346: NEG
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 5
36354: NEG
36355: PUSH
36356: LD_INT 6
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 6
36366: NEG
36367: PUSH
36368: LD_INT 5
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 6
36378: NEG
36379: PUSH
36380: LD_INT 6
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36402: LD_ADDR_VAR 0 41
36406: PUSH
36407: LD_INT 0
36409: PUSH
36410: LD_INT 2
36412: NEG
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 1
36420: NEG
36421: PUSH
36422: LD_INT 3
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 1
36432: PUSH
36433: LD_INT 2
36435: NEG
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: LIST
36445: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36446: LD_ADDR_VAR 0 42
36450: PUSH
36451: LD_INT 2
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 2
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 3
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: LIST
36486: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36487: LD_ADDR_VAR 0 43
36491: PUSH
36492: LD_INT 2
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 3
36504: PUSH
36505: LD_INT 2
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 2
36514: PUSH
36515: LD_INT 3
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: LIST
36526: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36527: LD_ADDR_VAR 0 44
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: LD_INT 2
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: LD_INT 3
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: NEG
36555: PUSH
36556: LD_INT 2
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: LIST
36567: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36568: LD_ADDR_VAR 0 45
36572: PUSH
36573: LD_INT 2
36575: NEG
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 2
36586: NEG
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 3
36597: NEG
36598: PUSH
36599: LD_INT 1
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: LIST
36611: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36612: LD_ADDR_VAR 0 46
36616: PUSH
36617: LD_INT 2
36619: NEG
36620: PUSH
36621: LD_INT 2
36623: NEG
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: LD_INT 3
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 3
36643: NEG
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: LIST
36657: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36658: LD_ADDR_VAR 0 47
36662: PUSH
36663: LD_INT 2
36665: NEG
36666: PUSH
36667: LD_INT 3
36669: NEG
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 1
36677: NEG
36678: PUSH
36679: LD_INT 3
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36691: LD_ADDR_VAR 0 48
36695: PUSH
36696: LD_INT 1
36698: PUSH
36699: LD_INT 2
36701: NEG
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 2
36709: PUSH
36710: LD_INT 1
36712: NEG
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36722: LD_ADDR_VAR 0 49
36726: PUSH
36727: LD_INT 3
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 3
36739: PUSH
36740: LD_INT 2
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
36751: LD_ADDR_VAR 0 50
36755: PUSH
36756: LD_INT 2
36758: PUSH
36759: LD_INT 3
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 1
36768: PUSH
36769: LD_INT 3
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36780: LD_ADDR_VAR 0 51
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: LD_INT 2
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 2
36798: NEG
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36811: LD_ADDR_VAR 0 52
36815: PUSH
36816: LD_INT 3
36818: NEG
36819: PUSH
36820: LD_INT 1
36822: NEG
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 3
36830: NEG
36831: PUSH
36832: LD_INT 2
36834: NEG
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36844: LD_ADDR_VAR 0 53
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: LD_INT 3
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: LD_INT 3
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: LD_INT 2
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: LIST
36887: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36888: LD_ADDR_VAR 0 54
36892: PUSH
36893: LD_INT 2
36895: PUSH
36896: LD_INT 1
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 3
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 3
36916: PUSH
36917: LD_INT 1
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: LIST
36928: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36929: LD_ADDR_VAR 0 55
36933: PUSH
36934: LD_INT 3
36936: PUSH
36937: LD_INT 2
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 3
36946: PUSH
36947: LD_INT 3
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 2
36956: PUSH
36957: LD_INT 3
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36969: LD_ADDR_VAR 0 56
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: LD_INT 3
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: LD_INT 3
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: PUSH
36998: LD_INT 2
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: LIST
37009: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37010: LD_ADDR_VAR 0 57
37014: PUSH
37015: LD_INT 2
37017: NEG
37018: PUSH
37019: LD_INT 1
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 3
37028: NEG
37029: PUSH
37030: LD_INT 0
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 3
37039: NEG
37040: PUSH
37041: LD_INT 1
37043: NEG
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37054: LD_ADDR_VAR 0 58
37058: PUSH
37059: LD_INT 2
37061: NEG
37062: PUSH
37063: LD_INT 3
37065: NEG
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 3
37073: NEG
37074: PUSH
37075: LD_INT 2
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 3
37085: NEG
37086: PUSH
37087: LD_INT 3
37089: NEG
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: LIST
37099: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37100: LD_ADDR_VAR 0 59
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: LD_INT 2
37111: NEG
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: LD_INT 2
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 1
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: LIST
37143: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37144: LD_ADDR_VAR 0 60
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 2
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: LIST
37184: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37185: LD_ADDR_VAR 0 61
37189: PUSH
37190: LD_INT 2
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 2
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: LD_INT 2
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: LIST
37224: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37225: LD_ADDR_VAR 0 62
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: LD_INT 2
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 1
37252: NEG
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37266: LD_ADDR_VAR 0 63
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 2
37284: NEG
37285: PUSH
37286: LD_INT 0
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 2
37295: NEG
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: LIST
37309: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37310: LD_ADDR_VAR 0 64
37314: PUSH
37315: LD_INT 1
37317: NEG
37318: PUSH
37319: LD_INT 2
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 2
37329: NEG
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 2
37341: NEG
37342: PUSH
37343: LD_INT 2
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: LIST
37355: ST_TO_ADDR
// end ; 2 :
37356: GO 40622
37358: LD_INT 2
37360: DOUBLE
37361: EQUAL
37362: IFTRUE 37366
37364: GO 40621
37366: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37367: LD_ADDR_VAR 0 29
37371: PUSH
37372: LD_INT 4
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 4
37384: PUSH
37385: LD_INT 1
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 5
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 5
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 4
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 3
37425: PUSH
37426: LD_INT 0
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 3
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 3
37446: PUSH
37447: LD_INT 2
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 5
37457: PUSH
37458: LD_INT 2
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 3
37467: PUSH
37468: LD_INT 3
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 3
37477: PUSH
37478: LD_INT 2
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 4
37487: PUSH
37488: LD_INT 3
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 4
37497: PUSH
37498: LD_INT 4
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 3
37507: PUSH
37508: LD_INT 4
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 2
37517: PUSH
37518: LD_INT 3
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 2
37527: PUSH
37528: LD_INT 2
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 4
37537: PUSH
37538: LD_INT 2
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 2
37547: PUSH
37548: LD_INT 4
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: LD_INT 4
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: LD_INT 3
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: LD_INT 4
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: LD_INT 5
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 5
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 1
37607: NEG
37608: PUSH
37609: LD_INT 4
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: NEG
37619: PUSH
37620: LD_INT 3
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 2
37629: PUSH
37630: LD_INT 5
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 2
37639: NEG
37640: PUSH
37641: LD_INT 3
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 3
37650: NEG
37651: PUSH
37652: LD_INT 0
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 3
37661: NEG
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 2
37673: NEG
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 2
37684: NEG
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 3
37695: NEG
37696: PUSH
37697: LD_INT 1
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 4
37706: NEG
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 4
37717: NEG
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 4
37729: NEG
37730: PUSH
37731: LD_INT 2
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 2
37741: NEG
37742: PUSH
37743: LD_INT 2
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 4
37752: NEG
37753: PUSH
37754: LD_INT 4
37756: NEG
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 4
37764: NEG
37765: PUSH
37766: LD_INT 5
37768: NEG
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 3
37776: NEG
37777: PUSH
37778: LD_INT 4
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 3
37788: NEG
37789: PUSH
37790: LD_INT 3
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 4
37800: NEG
37801: PUSH
37802: LD_INT 3
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 5
37812: NEG
37813: PUSH
37814: LD_INT 4
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 5
37824: NEG
37825: PUSH
37826: LD_INT 5
37828: NEG
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 3
37836: NEG
37837: PUSH
37838: LD_INT 5
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 5
37848: NEG
37849: PUSH
37850: LD_INT 3
37852: NEG
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37905: LD_ADDR_VAR 0 30
37909: PUSH
37910: LD_INT 4
37912: PUSH
37913: LD_INT 4
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 4
37922: PUSH
37923: LD_INT 3
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 5
37932: PUSH
37933: LD_INT 4
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 5
37942: PUSH
37943: LD_INT 5
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 4
37952: PUSH
37953: LD_INT 5
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 3
37962: PUSH
37963: LD_INT 4
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 3
37972: PUSH
37973: LD_INT 3
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 5
37982: PUSH
37983: LD_INT 3
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 3
37992: PUSH
37993: LD_INT 5
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: LD_INT 3
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 0
38012: PUSH
38013: LD_INT 2
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 1
38022: PUSH
38023: LD_INT 3
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: LD_INT 4
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: LD_INT 4
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 1
38052: NEG
38053: PUSH
38054: LD_INT 3
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 1
38063: NEG
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 2
38074: PUSH
38075: LD_INT 4
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 2
38084: NEG
38085: PUSH
38086: LD_INT 2
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 4
38095: NEG
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 4
38106: NEG
38107: PUSH
38108: LD_INT 1
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 3
38118: NEG
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 3
38129: NEG
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 4
38140: NEG
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 5
38151: NEG
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 5
38162: NEG
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 5
38174: NEG
38175: PUSH
38176: LD_INT 2
38178: NEG
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 3
38186: NEG
38187: PUSH
38188: LD_INT 2
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 3
38197: NEG
38198: PUSH
38199: LD_INT 3
38201: NEG
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 3
38209: NEG
38210: PUSH
38211: LD_INT 4
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 2
38221: NEG
38222: PUSH
38223: LD_INT 3
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 2
38233: NEG
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 3
38245: NEG
38246: PUSH
38247: LD_INT 2
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 4
38257: NEG
38258: PUSH
38259: LD_INT 3
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 4
38269: NEG
38270: PUSH
38271: LD_INT 4
38273: NEG
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 2
38281: NEG
38282: PUSH
38283: LD_INT 4
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 4
38293: NEG
38294: PUSH
38295: LD_INT 2
38297: NEG
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 0
38305: PUSH
38306: LD_INT 4
38308: NEG
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: LD_INT 5
38319: NEG
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: LD_INT 4
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: LD_INT 3
38341: NEG
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 0
38349: PUSH
38350: LD_INT 3
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 1
38360: NEG
38361: PUSH
38362: LD_INT 4
38364: NEG
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: LD_INT 5
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 2
38384: PUSH
38385: LD_INT 3
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: LD_INT 5
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38452: LD_ADDR_VAR 0 31
38456: PUSH
38457: LD_INT 0
38459: PUSH
38460: LD_INT 4
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 3
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: LD_INT 4
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: LD_INT 5
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 5
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: LD_INT 4
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 3
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 2
38531: PUSH
38532: LD_INT 5
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 2
38541: NEG
38542: PUSH
38543: LD_INT 3
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 3
38552: NEG
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 3
38563: NEG
38564: PUSH
38565: LD_INT 1
38567: NEG
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 2
38575: NEG
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 2
38586: NEG
38587: PUSH
38588: LD_INT 1
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 3
38597: NEG
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 4
38608: NEG
38609: PUSH
38610: LD_INT 0
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 4
38619: NEG
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 4
38631: NEG
38632: PUSH
38633: LD_INT 2
38635: NEG
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 2
38643: NEG
38644: PUSH
38645: LD_INT 2
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 4
38654: NEG
38655: PUSH
38656: LD_INT 4
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 4
38666: NEG
38667: PUSH
38668: LD_INT 5
38670: NEG
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 3
38678: NEG
38679: PUSH
38680: LD_INT 4
38682: NEG
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 3
38690: NEG
38691: PUSH
38692: LD_INT 3
38694: NEG
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 4
38702: NEG
38703: PUSH
38704: LD_INT 3
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 5
38714: NEG
38715: PUSH
38716: LD_INT 4
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 5
38726: NEG
38727: PUSH
38728: LD_INT 5
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 3
38738: NEG
38739: PUSH
38740: LD_INT 5
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 5
38750: NEG
38751: PUSH
38752: LD_INT 3
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: LD_INT 3
38765: NEG
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: LD_INT 4
38776: NEG
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: LD_INT 3
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: LD_INT 2
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: LD_INT 2
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: LD_INT 3
38821: NEG
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: LD_INT 4
38833: NEG
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 2
38841: PUSH
38842: LD_INT 2
38844: NEG
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 2
38852: NEG
38853: PUSH
38854: LD_INT 4
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 4
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 4
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 5
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 5
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 4
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 3
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 3
38925: PUSH
38926: LD_INT 1
38928: NEG
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 3
38936: PUSH
38937: LD_INT 2
38939: NEG
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 5
38947: PUSH
38948: LD_INT 2
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39002: LD_ADDR_VAR 0 32
39006: PUSH
39007: LD_INT 4
39009: NEG
39010: PUSH
39011: LD_INT 0
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 4
39020: NEG
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 3
39032: NEG
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 3
39043: NEG
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 4
39054: NEG
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 5
39065: NEG
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 5
39076: NEG
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 5
39088: NEG
39089: PUSH
39090: LD_INT 2
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 3
39100: NEG
39101: PUSH
39102: LD_INT 2
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 3
39111: NEG
39112: PUSH
39113: LD_INT 3
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 3
39123: NEG
39124: PUSH
39125: LD_INT 4
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 2
39135: NEG
39136: PUSH
39137: LD_INT 3
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 2
39147: NEG
39148: PUSH
39149: LD_INT 2
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 3
39159: NEG
39160: PUSH
39161: LD_INT 2
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 4
39171: NEG
39172: PUSH
39173: LD_INT 3
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 4
39183: NEG
39184: PUSH
39185: LD_INT 4
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 2
39195: NEG
39196: PUSH
39197: LD_INT 4
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 4
39207: NEG
39208: PUSH
39209: LD_INT 2
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: LD_INT 4
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: LD_INT 5
39233: NEG
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: LD_INT 4
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: LD_INT 3
39255: NEG
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: LD_INT 3
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: LD_INT 4
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: LD_INT 5
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 2
39298: PUSH
39299: LD_INT 3
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 2
39309: NEG
39310: PUSH
39311: LD_INT 5
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 3
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 3
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 4
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 4
39352: PUSH
39353: LD_INT 1
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 3
39362: PUSH
39363: LD_INT 1
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 2
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: LD_INT 2
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 4
39404: PUSH
39405: LD_INT 2
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 4
39414: PUSH
39415: LD_INT 4
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 4
39424: PUSH
39425: LD_INT 3
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 5
39434: PUSH
39435: LD_INT 4
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 5
39444: PUSH
39445: LD_INT 5
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 4
39454: PUSH
39455: LD_INT 5
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 3
39464: PUSH
39465: LD_INT 4
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 3
39474: PUSH
39475: LD_INT 3
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 5
39484: PUSH
39485: LD_INT 3
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 3
39494: PUSH
39495: LD_INT 5
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39549: LD_ADDR_VAR 0 33
39553: PUSH
39554: LD_INT 4
39556: NEG
39557: PUSH
39558: LD_INT 4
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 4
39568: NEG
39569: PUSH
39570: LD_INT 5
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 3
39580: NEG
39581: PUSH
39582: LD_INT 4
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 3
39592: NEG
39593: PUSH
39594: LD_INT 3
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 4
39604: NEG
39605: PUSH
39606: LD_INT 3
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 5
39616: NEG
39617: PUSH
39618: LD_INT 4
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 5
39628: NEG
39629: PUSH
39630: LD_INT 5
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 3
39640: NEG
39641: PUSH
39642: LD_INT 5
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 5
39652: NEG
39653: PUSH
39654: LD_INT 3
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: LD_INT 3
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: LD_INT 4
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: LD_INT 3
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: LD_INT 2
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: LD_INT 2
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: LD_INT 3
39723: NEG
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: LD_INT 4
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: NEG
39755: PUSH
39756: LD_INT 4
39758: NEG
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 4
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 4
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 5
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 5
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 4
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 3
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 3
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 3
39838: PUSH
39839: LD_INT 2
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 5
39849: PUSH
39850: LD_INT 2
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 3
39859: PUSH
39860: LD_INT 3
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 3
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 4
39879: PUSH
39880: LD_INT 3
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 4
39889: PUSH
39890: LD_INT 4
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 3
39899: PUSH
39900: LD_INT 4
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 2
39909: PUSH
39910: LD_INT 3
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 2
39919: PUSH
39920: LD_INT 2
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 4
39929: PUSH
39930: LD_INT 2
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 2
39939: PUSH
39940: LD_INT 4
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 4
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: LD_INT 3
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: LD_INT 4
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: LD_INT 5
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: LD_INT 5
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: NEG
40000: PUSH
40001: LD_INT 4
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 1
40010: NEG
40011: PUSH
40012: LD_INT 3
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: LD_INT 5
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 2
40031: NEG
40032: PUSH
40033: LD_INT 3
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40087: LD_ADDR_VAR 0 34
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: LD_INT 4
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: LD_INT 5
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 1
40116: PUSH
40117: LD_INT 4
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: LD_INT 3
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: LD_INT 3
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: LD_INT 4
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: LD_INT 5
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 2
40173: PUSH
40174: LD_INT 3
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 2
40184: NEG
40185: PUSH
40186: LD_INT 5
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 3
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 3
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 4
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 4
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 3
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 2
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 4
40279: PUSH
40280: LD_INT 2
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 4
40289: PUSH
40290: LD_INT 4
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 4
40299: PUSH
40300: LD_INT 3
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 5
40309: PUSH
40310: LD_INT 4
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 5
40319: PUSH
40320: LD_INT 5
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 4
40329: PUSH
40330: LD_INT 5
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 3
40339: PUSH
40340: LD_INT 4
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 3
40349: PUSH
40350: LD_INT 3
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 5
40359: PUSH
40360: LD_INT 3
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 3
40369: PUSH
40370: LD_INT 5
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: LD_INT 3
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: LD_INT 2
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: LD_INT 3
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: LD_INT 4
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_INT 4
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: LD_INT 3
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 2
40451: PUSH
40452: LD_INT 4
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 2
40461: NEG
40462: PUSH
40463: LD_INT 2
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 4
40472: NEG
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 4
40483: NEG
40484: PUSH
40485: LD_INT 1
40487: NEG
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 3
40495: NEG
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 3
40506: NEG
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 4
40517: NEG
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 5
40528: NEG
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 5
40539: NEG
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 5
40551: NEG
40552: PUSH
40553: LD_INT 2
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 3
40563: NEG
40564: PUSH
40565: LD_INT 2
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: ST_TO_ADDR
// end ; end ;
40619: GO 40622
40621: POP
// case btype of b_depot , b_warehouse :
40622: LD_VAR 0 1
40626: PUSH
40627: LD_INT 0
40629: DOUBLE
40630: EQUAL
40631: IFTRUE 40641
40633: LD_INT 1
40635: DOUBLE
40636: EQUAL
40637: IFTRUE 40641
40639: GO 40842
40641: POP
// case nation of nation_american :
40642: LD_VAR 0 5
40646: PUSH
40647: LD_INT 1
40649: DOUBLE
40650: EQUAL
40651: IFTRUE 40655
40653: GO 40711
40655: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40656: LD_ADDR_VAR 0 9
40660: PUSH
40661: LD_VAR 0 11
40665: PUSH
40666: LD_VAR 0 12
40670: PUSH
40671: LD_VAR 0 13
40675: PUSH
40676: LD_VAR 0 14
40680: PUSH
40681: LD_VAR 0 15
40685: PUSH
40686: LD_VAR 0 16
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: PUSH
40699: LD_VAR 0 4
40703: PUSH
40704: LD_INT 1
40706: PLUS
40707: ARRAY
40708: ST_TO_ADDR
40709: GO 40840
40711: LD_INT 2
40713: DOUBLE
40714: EQUAL
40715: IFTRUE 40719
40717: GO 40775
40719: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
40720: LD_ADDR_VAR 0 9
40724: PUSH
40725: LD_VAR 0 17
40729: PUSH
40730: LD_VAR 0 18
40734: PUSH
40735: LD_VAR 0 19
40739: PUSH
40740: LD_VAR 0 20
40744: PUSH
40745: LD_VAR 0 21
40749: PUSH
40750: LD_VAR 0 22
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: PUSH
40763: LD_VAR 0 4
40767: PUSH
40768: LD_INT 1
40770: PLUS
40771: ARRAY
40772: ST_TO_ADDR
40773: GO 40840
40775: LD_INT 3
40777: DOUBLE
40778: EQUAL
40779: IFTRUE 40783
40781: GO 40839
40783: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
40784: LD_ADDR_VAR 0 9
40788: PUSH
40789: LD_VAR 0 23
40793: PUSH
40794: LD_VAR 0 24
40798: PUSH
40799: LD_VAR 0 25
40803: PUSH
40804: LD_VAR 0 26
40808: PUSH
40809: LD_VAR 0 27
40813: PUSH
40814: LD_VAR 0 28
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: PUSH
40827: LD_VAR 0 4
40831: PUSH
40832: LD_INT 1
40834: PLUS
40835: ARRAY
40836: ST_TO_ADDR
40837: GO 40840
40839: POP
40840: GO 41395
40842: LD_INT 2
40844: DOUBLE
40845: EQUAL
40846: IFTRUE 40856
40848: LD_INT 3
40850: DOUBLE
40851: EQUAL
40852: IFTRUE 40856
40854: GO 40912
40856: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
40857: LD_ADDR_VAR 0 9
40861: PUSH
40862: LD_VAR 0 29
40866: PUSH
40867: LD_VAR 0 30
40871: PUSH
40872: LD_VAR 0 31
40876: PUSH
40877: LD_VAR 0 32
40881: PUSH
40882: LD_VAR 0 33
40886: PUSH
40887: LD_VAR 0 34
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: PUSH
40900: LD_VAR 0 4
40904: PUSH
40905: LD_INT 1
40907: PLUS
40908: ARRAY
40909: ST_TO_ADDR
40910: GO 41395
40912: LD_INT 16
40914: DOUBLE
40915: EQUAL
40916: IFTRUE 40974
40918: LD_INT 17
40920: DOUBLE
40921: EQUAL
40922: IFTRUE 40974
40924: LD_INT 18
40926: DOUBLE
40927: EQUAL
40928: IFTRUE 40974
40930: LD_INT 19
40932: DOUBLE
40933: EQUAL
40934: IFTRUE 40974
40936: LD_INT 22
40938: DOUBLE
40939: EQUAL
40940: IFTRUE 40974
40942: LD_INT 20
40944: DOUBLE
40945: EQUAL
40946: IFTRUE 40974
40948: LD_INT 21
40950: DOUBLE
40951: EQUAL
40952: IFTRUE 40974
40954: LD_INT 23
40956: DOUBLE
40957: EQUAL
40958: IFTRUE 40974
40960: LD_INT 24
40962: DOUBLE
40963: EQUAL
40964: IFTRUE 40974
40966: LD_INT 25
40968: DOUBLE
40969: EQUAL
40970: IFTRUE 40974
40972: GO 41030
40974: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
40975: LD_ADDR_VAR 0 9
40979: PUSH
40980: LD_VAR 0 35
40984: PUSH
40985: LD_VAR 0 36
40989: PUSH
40990: LD_VAR 0 37
40994: PUSH
40995: LD_VAR 0 38
40999: PUSH
41000: LD_VAR 0 39
41004: PUSH
41005: LD_VAR 0 40
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: PUSH
41018: LD_VAR 0 4
41022: PUSH
41023: LD_INT 1
41025: PLUS
41026: ARRAY
41027: ST_TO_ADDR
41028: GO 41395
41030: LD_INT 6
41032: DOUBLE
41033: EQUAL
41034: IFTRUE 41086
41036: LD_INT 7
41038: DOUBLE
41039: EQUAL
41040: IFTRUE 41086
41042: LD_INT 8
41044: DOUBLE
41045: EQUAL
41046: IFTRUE 41086
41048: LD_INT 13
41050: DOUBLE
41051: EQUAL
41052: IFTRUE 41086
41054: LD_INT 12
41056: DOUBLE
41057: EQUAL
41058: IFTRUE 41086
41060: LD_INT 15
41062: DOUBLE
41063: EQUAL
41064: IFTRUE 41086
41066: LD_INT 11
41068: DOUBLE
41069: EQUAL
41070: IFTRUE 41086
41072: LD_INT 14
41074: DOUBLE
41075: EQUAL
41076: IFTRUE 41086
41078: LD_INT 10
41080: DOUBLE
41081: EQUAL
41082: IFTRUE 41086
41084: GO 41142
41086: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41087: LD_ADDR_VAR 0 9
41091: PUSH
41092: LD_VAR 0 41
41096: PUSH
41097: LD_VAR 0 42
41101: PUSH
41102: LD_VAR 0 43
41106: PUSH
41107: LD_VAR 0 44
41111: PUSH
41112: LD_VAR 0 45
41116: PUSH
41117: LD_VAR 0 46
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: PUSH
41130: LD_VAR 0 4
41134: PUSH
41135: LD_INT 1
41137: PLUS
41138: ARRAY
41139: ST_TO_ADDR
41140: GO 41395
41142: LD_INT 36
41144: DOUBLE
41145: EQUAL
41146: IFTRUE 41150
41148: GO 41206
41150: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41151: LD_ADDR_VAR 0 9
41155: PUSH
41156: LD_VAR 0 47
41160: PUSH
41161: LD_VAR 0 48
41165: PUSH
41166: LD_VAR 0 49
41170: PUSH
41171: LD_VAR 0 50
41175: PUSH
41176: LD_VAR 0 51
41180: PUSH
41181: LD_VAR 0 52
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: PUSH
41194: LD_VAR 0 4
41198: PUSH
41199: LD_INT 1
41201: PLUS
41202: ARRAY
41203: ST_TO_ADDR
41204: GO 41395
41206: LD_INT 4
41208: DOUBLE
41209: EQUAL
41210: IFTRUE 41232
41212: LD_INT 5
41214: DOUBLE
41215: EQUAL
41216: IFTRUE 41232
41218: LD_INT 34
41220: DOUBLE
41221: EQUAL
41222: IFTRUE 41232
41224: LD_INT 37
41226: DOUBLE
41227: EQUAL
41228: IFTRUE 41232
41230: GO 41288
41232: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41233: LD_ADDR_VAR 0 9
41237: PUSH
41238: LD_VAR 0 53
41242: PUSH
41243: LD_VAR 0 54
41247: PUSH
41248: LD_VAR 0 55
41252: PUSH
41253: LD_VAR 0 56
41257: PUSH
41258: LD_VAR 0 57
41262: PUSH
41263: LD_VAR 0 58
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: PUSH
41276: LD_VAR 0 4
41280: PUSH
41281: LD_INT 1
41283: PLUS
41284: ARRAY
41285: ST_TO_ADDR
41286: GO 41395
41288: LD_INT 31
41290: DOUBLE
41291: EQUAL
41292: IFTRUE 41338
41294: LD_INT 32
41296: DOUBLE
41297: EQUAL
41298: IFTRUE 41338
41300: LD_INT 33
41302: DOUBLE
41303: EQUAL
41304: IFTRUE 41338
41306: LD_INT 27
41308: DOUBLE
41309: EQUAL
41310: IFTRUE 41338
41312: LD_INT 26
41314: DOUBLE
41315: EQUAL
41316: IFTRUE 41338
41318: LD_INT 28
41320: DOUBLE
41321: EQUAL
41322: IFTRUE 41338
41324: LD_INT 29
41326: DOUBLE
41327: EQUAL
41328: IFTRUE 41338
41330: LD_INT 30
41332: DOUBLE
41333: EQUAL
41334: IFTRUE 41338
41336: GO 41394
41338: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41339: LD_ADDR_VAR 0 9
41343: PUSH
41344: LD_VAR 0 59
41348: PUSH
41349: LD_VAR 0 60
41353: PUSH
41354: LD_VAR 0 61
41358: PUSH
41359: LD_VAR 0 62
41363: PUSH
41364: LD_VAR 0 63
41368: PUSH
41369: LD_VAR 0 64
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: PUSH
41382: LD_VAR 0 4
41386: PUSH
41387: LD_INT 1
41389: PLUS
41390: ARRAY
41391: ST_TO_ADDR
41392: GO 41395
41394: POP
// temp_list2 = [ ] ;
41395: LD_ADDR_VAR 0 10
41399: PUSH
41400: EMPTY
41401: ST_TO_ADDR
// for i in temp_list do
41402: LD_ADDR_VAR 0 8
41406: PUSH
41407: LD_VAR 0 9
41411: PUSH
41412: FOR_IN
41413: IFFALSE 41465
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41415: LD_ADDR_VAR 0 10
41419: PUSH
41420: LD_VAR 0 10
41424: PUSH
41425: LD_VAR 0 8
41429: PUSH
41430: LD_INT 1
41432: ARRAY
41433: PUSH
41434: LD_VAR 0 2
41438: PLUS
41439: PUSH
41440: LD_VAR 0 8
41444: PUSH
41445: LD_INT 2
41447: ARRAY
41448: PUSH
41449: LD_VAR 0 3
41453: PLUS
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: EMPTY
41460: LIST
41461: ADD
41462: ST_TO_ADDR
41463: GO 41412
41465: POP
41466: POP
// result = temp_list2 ;
41467: LD_ADDR_VAR 0 7
41471: PUSH
41472: LD_VAR 0 10
41476: ST_TO_ADDR
// end ;
41477: LD_VAR 0 7
41481: RET
// export function EnemyInRange ( unit , dist ) ; begin
41482: LD_INT 0
41484: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41485: LD_ADDR_VAR 0 3
41489: PUSH
41490: LD_VAR 0 1
41494: PPUSH
41495: CALL_OW 255
41499: PPUSH
41500: LD_VAR 0 1
41504: PPUSH
41505: CALL_OW 250
41509: PPUSH
41510: LD_VAR 0 1
41514: PPUSH
41515: CALL_OW 251
41519: PPUSH
41520: LD_VAR 0 2
41524: PPUSH
41525: CALL 14855 0 4
41529: PUSH
41530: LD_INT 4
41532: ARRAY
41533: ST_TO_ADDR
// end ;
41534: LD_VAR 0 3
41538: RET
// export function PlayerSeeMe ( unit ) ; begin
41539: LD_INT 0
41541: PPUSH
// result := See ( your_side , unit ) ;
41542: LD_ADDR_VAR 0 2
41546: PUSH
41547: LD_OWVAR 2
41551: PPUSH
41552: LD_VAR 0 1
41556: PPUSH
41557: CALL_OW 292
41561: ST_TO_ADDR
// end ;
41562: LD_VAR 0 2
41566: RET
// export function ReverseDir ( unit ) ; begin
41567: LD_INT 0
41569: PPUSH
// if not unit then
41570: LD_VAR 0 1
41574: NOT
41575: IFFALSE 41579
// exit ;
41577: GO 41602
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41579: LD_ADDR_VAR 0 2
41583: PUSH
41584: LD_VAR 0 1
41588: PPUSH
41589: CALL_OW 254
41593: PUSH
41594: LD_INT 3
41596: PLUS
41597: PUSH
41598: LD_INT 6
41600: MOD
41601: ST_TO_ADDR
// end ;
41602: LD_VAR 0 2
41606: RET
// export function ReverseArray ( array ) ; var i ; begin
41607: LD_INT 0
41609: PPUSH
41610: PPUSH
// if not array then
41611: LD_VAR 0 1
41615: NOT
41616: IFFALSE 41620
// exit ;
41618: GO 41675
// result := [ ] ;
41620: LD_ADDR_VAR 0 2
41624: PUSH
41625: EMPTY
41626: ST_TO_ADDR
// for i := array downto 1 do
41627: LD_ADDR_VAR 0 3
41631: PUSH
41632: DOUBLE
41633: LD_VAR 0 1
41637: INC
41638: ST_TO_ADDR
41639: LD_INT 1
41641: PUSH
41642: FOR_DOWNTO
41643: IFFALSE 41673
// result := Join ( result , array [ i ] ) ;
41645: LD_ADDR_VAR 0 2
41649: PUSH
41650: LD_VAR 0 2
41654: PPUSH
41655: LD_VAR 0 1
41659: PUSH
41660: LD_VAR 0 3
41664: ARRAY
41665: PPUSH
41666: CALL 46320 0 2
41670: ST_TO_ADDR
41671: GO 41642
41673: POP
41674: POP
// end ;
41675: LD_VAR 0 2
41679: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
41680: LD_INT 0
41682: PPUSH
41683: PPUSH
41684: PPUSH
41685: PPUSH
41686: PPUSH
41687: PPUSH
// if not unit or not hexes then
41688: LD_VAR 0 1
41692: NOT
41693: PUSH
41694: LD_VAR 0 2
41698: NOT
41699: OR
41700: IFFALSE 41704
// exit ;
41702: GO 41827
// dist := 9999 ;
41704: LD_ADDR_VAR 0 5
41708: PUSH
41709: LD_INT 9999
41711: ST_TO_ADDR
// for i = 1 to hexes do
41712: LD_ADDR_VAR 0 4
41716: PUSH
41717: DOUBLE
41718: LD_INT 1
41720: DEC
41721: ST_TO_ADDR
41722: LD_VAR 0 2
41726: PUSH
41727: FOR_TO
41728: IFFALSE 41815
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41730: LD_ADDR_VAR 0 6
41734: PUSH
41735: LD_VAR 0 1
41739: PPUSH
41740: LD_VAR 0 2
41744: PUSH
41745: LD_VAR 0 4
41749: ARRAY
41750: PUSH
41751: LD_INT 1
41753: ARRAY
41754: PPUSH
41755: LD_VAR 0 2
41759: PUSH
41760: LD_VAR 0 4
41764: ARRAY
41765: PUSH
41766: LD_INT 2
41768: ARRAY
41769: PPUSH
41770: CALL_OW 297
41774: ST_TO_ADDR
// if tdist < dist then
41775: LD_VAR 0 6
41779: PUSH
41780: LD_VAR 0 5
41784: LESS
41785: IFFALSE 41813
// begin hex := hexes [ i ] ;
41787: LD_ADDR_VAR 0 8
41791: PUSH
41792: LD_VAR 0 2
41796: PUSH
41797: LD_VAR 0 4
41801: ARRAY
41802: ST_TO_ADDR
// dist := tdist ;
41803: LD_ADDR_VAR 0 5
41807: PUSH
41808: LD_VAR 0 6
41812: ST_TO_ADDR
// end ; end ;
41813: GO 41727
41815: POP
41816: POP
// result := hex ;
41817: LD_ADDR_VAR 0 3
41821: PUSH
41822: LD_VAR 0 8
41826: ST_TO_ADDR
// end ;
41827: LD_VAR 0 3
41831: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
41832: LD_INT 0
41834: PPUSH
41835: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
41836: LD_VAR 0 1
41840: NOT
41841: PUSH
41842: LD_VAR 0 1
41846: PUSH
41847: LD_INT 21
41849: PUSH
41850: LD_INT 2
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 23
41859: PUSH
41860: LD_INT 2
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PPUSH
41871: CALL_OW 69
41875: IN
41876: NOT
41877: OR
41878: IFFALSE 41882
// exit ;
41880: GO 41929
// for i = 1 to 3 do
41882: LD_ADDR_VAR 0 3
41886: PUSH
41887: DOUBLE
41888: LD_INT 1
41890: DEC
41891: ST_TO_ADDR
41892: LD_INT 3
41894: PUSH
41895: FOR_TO
41896: IFFALSE 41927
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
41898: LD_VAR 0 1
41902: PPUSH
41903: CALL_OW 250
41907: PPUSH
41908: LD_VAR 0 1
41912: PPUSH
41913: CALL_OW 251
41917: PPUSH
41918: LD_INT 1
41920: PPUSH
41921: CALL_OW 453
41925: GO 41895
41927: POP
41928: POP
// end ;
41929: LD_VAR 0 2
41933: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
41934: LD_INT 0
41936: PPUSH
41937: PPUSH
41938: PPUSH
41939: PPUSH
41940: PPUSH
41941: PPUSH
// if not unit or not enemy_unit then
41942: LD_VAR 0 1
41946: NOT
41947: PUSH
41948: LD_VAR 0 2
41952: NOT
41953: OR
41954: IFFALSE 41958
// exit ;
41956: GO 42425
// if GetLives ( i ) < 250 then
41958: LD_VAR 0 4
41962: PPUSH
41963: CALL_OW 256
41967: PUSH
41968: LD_INT 250
41970: LESS
41971: IFFALSE 41984
// begin ComAutodestruct ( i ) ;
41973: LD_VAR 0 4
41977: PPUSH
41978: CALL 41832 0 1
// exit ;
41982: GO 42425
// end ; x := GetX ( enemy_unit ) ;
41984: LD_ADDR_VAR 0 7
41988: PUSH
41989: LD_VAR 0 2
41993: PPUSH
41994: CALL_OW 250
41998: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
41999: LD_ADDR_VAR 0 8
42003: PUSH
42004: LD_VAR 0 2
42008: PPUSH
42009: CALL_OW 251
42013: ST_TO_ADDR
// if not x or not y then
42014: LD_VAR 0 7
42018: NOT
42019: PUSH
42020: LD_VAR 0 8
42024: NOT
42025: OR
42026: IFFALSE 42030
// exit ;
42028: GO 42425
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42030: LD_ADDR_VAR 0 6
42034: PUSH
42035: LD_VAR 0 7
42039: PPUSH
42040: LD_INT 0
42042: PPUSH
42043: LD_INT 4
42045: PPUSH
42046: CALL_OW 272
42050: PUSH
42051: LD_VAR 0 8
42055: PPUSH
42056: LD_INT 0
42058: PPUSH
42059: LD_INT 4
42061: PPUSH
42062: CALL_OW 273
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_VAR 0 7
42075: PPUSH
42076: LD_INT 1
42078: PPUSH
42079: LD_INT 4
42081: PPUSH
42082: CALL_OW 272
42086: PUSH
42087: LD_VAR 0 8
42091: PPUSH
42092: LD_INT 1
42094: PPUSH
42095: LD_INT 4
42097: PPUSH
42098: CALL_OW 273
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_VAR 0 7
42111: PPUSH
42112: LD_INT 2
42114: PPUSH
42115: LD_INT 4
42117: PPUSH
42118: CALL_OW 272
42122: PUSH
42123: LD_VAR 0 8
42127: PPUSH
42128: LD_INT 2
42130: PPUSH
42131: LD_INT 4
42133: PPUSH
42134: CALL_OW 273
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_VAR 0 7
42147: PPUSH
42148: LD_INT 3
42150: PPUSH
42151: LD_INT 4
42153: PPUSH
42154: CALL_OW 272
42158: PUSH
42159: LD_VAR 0 8
42163: PPUSH
42164: LD_INT 3
42166: PPUSH
42167: LD_INT 4
42169: PPUSH
42170: CALL_OW 273
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_VAR 0 7
42183: PPUSH
42184: LD_INT 4
42186: PPUSH
42187: LD_INT 4
42189: PPUSH
42190: CALL_OW 272
42194: PUSH
42195: LD_VAR 0 8
42199: PPUSH
42200: LD_INT 4
42202: PPUSH
42203: LD_INT 4
42205: PPUSH
42206: CALL_OW 273
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_VAR 0 7
42219: PPUSH
42220: LD_INT 5
42222: PPUSH
42223: LD_INT 4
42225: PPUSH
42226: CALL_OW 272
42230: PUSH
42231: LD_VAR 0 8
42235: PPUSH
42236: LD_INT 5
42238: PPUSH
42239: LD_INT 4
42241: PPUSH
42242: CALL_OW 273
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: ST_TO_ADDR
// for i = tmp downto 1 do
42259: LD_ADDR_VAR 0 4
42263: PUSH
42264: DOUBLE
42265: LD_VAR 0 6
42269: INC
42270: ST_TO_ADDR
42271: LD_INT 1
42273: PUSH
42274: FOR_DOWNTO
42275: IFFALSE 42376
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42277: LD_VAR 0 6
42281: PUSH
42282: LD_VAR 0 4
42286: ARRAY
42287: PUSH
42288: LD_INT 1
42290: ARRAY
42291: PPUSH
42292: LD_VAR 0 6
42296: PUSH
42297: LD_VAR 0 4
42301: ARRAY
42302: PUSH
42303: LD_INT 2
42305: ARRAY
42306: PPUSH
42307: CALL_OW 488
42311: NOT
42312: PUSH
42313: LD_VAR 0 6
42317: PUSH
42318: LD_VAR 0 4
42322: ARRAY
42323: PUSH
42324: LD_INT 1
42326: ARRAY
42327: PPUSH
42328: LD_VAR 0 6
42332: PUSH
42333: LD_VAR 0 4
42337: ARRAY
42338: PUSH
42339: LD_INT 2
42341: ARRAY
42342: PPUSH
42343: CALL_OW 428
42347: PUSH
42348: LD_INT 0
42350: NONEQUAL
42351: OR
42352: IFFALSE 42374
// tmp := Delete ( tmp , i ) ;
42354: LD_ADDR_VAR 0 6
42358: PUSH
42359: LD_VAR 0 6
42363: PPUSH
42364: LD_VAR 0 4
42368: PPUSH
42369: CALL_OW 3
42373: ST_TO_ADDR
42374: GO 42274
42376: POP
42377: POP
// j := GetClosestHex ( unit , tmp ) ;
42378: LD_ADDR_VAR 0 5
42382: PUSH
42383: LD_VAR 0 1
42387: PPUSH
42388: LD_VAR 0 6
42392: PPUSH
42393: CALL 41680 0 2
42397: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42398: LD_VAR 0 1
42402: PPUSH
42403: LD_VAR 0 5
42407: PUSH
42408: LD_INT 1
42410: ARRAY
42411: PPUSH
42412: LD_VAR 0 5
42416: PUSH
42417: LD_INT 2
42419: ARRAY
42420: PPUSH
42421: CALL_OW 111
// end ;
42425: LD_VAR 0 3
42429: RET
// export function PrepareApemanSoldier ( ) ; begin
42430: LD_INT 0
42432: PPUSH
// uc_nation := 0 ;
42433: LD_ADDR_OWVAR 21
42437: PUSH
42438: LD_INT 0
42440: ST_TO_ADDR
// hc_sex := sex_male ;
42441: LD_ADDR_OWVAR 27
42445: PUSH
42446: LD_INT 1
42448: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42449: LD_ADDR_OWVAR 28
42453: PUSH
42454: LD_INT 15
42456: ST_TO_ADDR
// hc_gallery :=  ;
42457: LD_ADDR_OWVAR 33
42461: PUSH
42462: LD_STRING 
42464: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42465: LD_ADDR_OWVAR 31
42469: PUSH
42470: LD_INT 0
42472: PPUSH
42473: LD_INT 3
42475: PPUSH
42476: CALL_OW 12
42480: PUSH
42481: LD_INT 0
42483: PPUSH
42484: LD_INT 3
42486: PPUSH
42487: CALL_OW 12
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: ST_TO_ADDR
// end ;
42504: LD_VAR 0 1
42508: RET
// export function PrepareApemanEngineer ( ) ; begin
42509: LD_INT 0
42511: PPUSH
// uc_nation := 0 ;
42512: LD_ADDR_OWVAR 21
42516: PUSH
42517: LD_INT 0
42519: ST_TO_ADDR
// hc_sex := sex_male ;
42520: LD_ADDR_OWVAR 27
42524: PUSH
42525: LD_INT 1
42527: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
42528: LD_ADDR_OWVAR 28
42532: PUSH
42533: LD_INT 16
42535: ST_TO_ADDR
// hc_gallery :=  ;
42536: LD_ADDR_OWVAR 33
42540: PUSH
42541: LD_STRING 
42543: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42544: LD_ADDR_OWVAR 31
42548: PUSH
42549: LD_INT 0
42551: PPUSH
42552: LD_INT 3
42554: PPUSH
42555: CALL_OW 12
42559: PUSH
42560: LD_INT 0
42562: PPUSH
42563: LD_INT 3
42565: PPUSH
42566: CALL_OW 12
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: ST_TO_ADDR
// end ;
42583: LD_VAR 0 1
42587: RET
// export function PrepareApeman ( agressivity ) ; begin
42588: LD_INT 0
42590: PPUSH
// uc_side := 0 ;
42591: LD_ADDR_OWVAR 20
42595: PUSH
42596: LD_INT 0
42598: ST_TO_ADDR
// uc_nation := 0 ;
42599: LD_ADDR_OWVAR 21
42603: PUSH
42604: LD_INT 0
42606: ST_TO_ADDR
// hc_sex := sex_male ;
42607: LD_ADDR_OWVAR 27
42611: PUSH
42612: LD_INT 1
42614: ST_TO_ADDR
// hc_class := class_apeman ;
42615: LD_ADDR_OWVAR 28
42619: PUSH
42620: LD_INT 12
42622: ST_TO_ADDR
// hc_gallery :=  ;
42623: LD_ADDR_OWVAR 33
42627: PUSH
42628: LD_STRING 
42630: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42631: LD_ADDR_OWVAR 35
42635: PUSH
42636: LD_VAR 0 1
42640: NEG
42641: PPUSH
42642: LD_VAR 0 1
42646: PPUSH
42647: CALL_OW 12
42651: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42652: LD_ADDR_OWVAR 31
42656: PUSH
42657: LD_INT 0
42659: PPUSH
42660: LD_INT 3
42662: PPUSH
42663: CALL_OW 12
42667: PUSH
42668: LD_INT 0
42670: PPUSH
42671: LD_INT 3
42673: PPUSH
42674: CALL_OW 12
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: ST_TO_ADDR
// end ;
42691: LD_VAR 0 2
42695: RET
// export function PrepareTiger ( agressivity ) ; begin
42696: LD_INT 0
42698: PPUSH
// uc_side := 0 ;
42699: LD_ADDR_OWVAR 20
42703: PUSH
42704: LD_INT 0
42706: ST_TO_ADDR
// uc_nation := 0 ;
42707: LD_ADDR_OWVAR 21
42711: PUSH
42712: LD_INT 0
42714: ST_TO_ADDR
// hc_class := class_tiger ;
42715: LD_ADDR_OWVAR 28
42719: PUSH
42720: LD_INT 14
42722: ST_TO_ADDR
// hc_gallery :=  ;
42723: LD_ADDR_OWVAR 33
42727: PUSH
42728: LD_STRING 
42730: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42731: LD_ADDR_OWVAR 35
42735: PUSH
42736: LD_VAR 0 1
42740: NEG
42741: PPUSH
42742: LD_VAR 0 1
42746: PPUSH
42747: CALL_OW 12
42751: ST_TO_ADDR
// end ;
42752: LD_VAR 0 2
42756: RET
// export function PrepareEnchidna ( ) ; begin
42757: LD_INT 0
42759: PPUSH
// uc_side := 0 ;
42760: LD_ADDR_OWVAR 20
42764: PUSH
42765: LD_INT 0
42767: ST_TO_ADDR
// uc_nation := 0 ;
42768: LD_ADDR_OWVAR 21
42772: PUSH
42773: LD_INT 0
42775: ST_TO_ADDR
// hc_class := class_baggie ;
42776: LD_ADDR_OWVAR 28
42780: PUSH
42781: LD_INT 13
42783: ST_TO_ADDR
// hc_gallery :=  ;
42784: LD_ADDR_OWVAR 33
42788: PUSH
42789: LD_STRING 
42791: ST_TO_ADDR
// end ;
42792: LD_VAR 0 1
42796: RET
// export function PrepareFrog ( ) ; begin
42797: LD_INT 0
42799: PPUSH
// uc_side := 0 ;
42800: LD_ADDR_OWVAR 20
42804: PUSH
42805: LD_INT 0
42807: ST_TO_ADDR
// uc_nation := 0 ;
42808: LD_ADDR_OWVAR 21
42812: PUSH
42813: LD_INT 0
42815: ST_TO_ADDR
// hc_class := class_frog ;
42816: LD_ADDR_OWVAR 28
42820: PUSH
42821: LD_INT 19
42823: ST_TO_ADDR
// hc_gallery :=  ;
42824: LD_ADDR_OWVAR 33
42828: PUSH
42829: LD_STRING 
42831: ST_TO_ADDR
// end ;
42832: LD_VAR 0 1
42836: RET
// export function PrepareFish ( ) ; begin
42837: LD_INT 0
42839: PPUSH
// uc_side := 0 ;
42840: LD_ADDR_OWVAR 20
42844: PUSH
42845: LD_INT 0
42847: ST_TO_ADDR
// uc_nation := 0 ;
42848: LD_ADDR_OWVAR 21
42852: PUSH
42853: LD_INT 0
42855: ST_TO_ADDR
// hc_class := class_fish ;
42856: LD_ADDR_OWVAR 28
42860: PUSH
42861: LD_INT 20
42863: ST_TO_ADDR
// hc_gallery :=  ;
42864: LD_ADDR_OWVAR 33
42868: PUSH
42869: LD_STRING 
42871: ST_TO_ADDR
// end ;
42872: LD_VAR 0 1
42876: RET
// export function PrepareBird ( ) ; begin
42877: LD_INT 0
42879: PPUSH
// uc_side := 0 ;
42880: LD_ADDR_OWVAR 20
42884: PUSH
42885: LD_INT 0
42887: ST_TO_ADDR
// uc_nation := 0 ;
42888: LD_ADDR_OWVAR 21
42892: PUSH
42893: LD_INT 0
42895: ST_TO_ADDR
// hc_class := class_phororhacos ;
42896: LD_ADDR_OWVAR 28
42900: PUSH
42901: LD_INT 18
42903: ST_TO_ADDR
// hc_gallery :=  ;
42904: LD_ADDR_OWVAR 33
42908: PUSH
42909: LD_STRING 
42911: ST_TO_ADDR
// end ;
42912: LD_VAR 0 1
42916: RET
// export function PrepareHorse ( ) ; begin
42917: LD_INT 0
42919: PPUSH
// uc_side := 0 ;
42920: LD_ADDR_OWVAR 20
42924: PUSH
42925: LD_INT 0
42927: ST_TO_ADDR
// uc_nation := 0 ;
42928: LD_ADDR_OWVAR 21
42932: PUSH
42933: LD_INT 0
42935: ST_TO_ADDR
// hc_class := class_horse ;
42936: LD_ADDR_OWVAR 28
42940: PUSH
42941: LD_INT 21
42943: ST_TO_ADDR
// hc_gallery :=  ;
42944: LD_ADDR_OWVAR 33
42948: PUSH
42949: LD_STRING 
42951: ST_TO_ADDR
// end ;
42952: LD_VAR 0 1
42956: RET
// export function PrepareMastodont ( ) ; begin
42957: LD_INT 0
42959: PPUSH
// uc_side := 0 ;
42960: LD_ADDR_OWVAR 20
42964: PUSH
42965: LD_INT 0
42967: ST_TO_ADDR
// uc_nation := 0 ;
42968: LD_ADDR_OWVAR 21
42972: PUSH
42973: LD_INT 0
42975: ST_TO_ADDR
// vc_chassis := class_mastodont ;
42976: LD_ADDR_OWVAR 37
42980: PUSH
42981: LD_INT 31
42983: ST_TO_ADDR
// vc_control := control_rider ;
42984: LD_ADDR_OWVAR 38
42988: PUSH
42989: LD_INT 4
42991: ST_TO_ADDR
// end ;
42992: LD_VAR 0 1
42996: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
42997: LD_INT 0
42999: PPUSH
43000: PPUSH
43001: PPUSH
// uc_side = 0 ;
43002: LD_ADDR_OWVAR 20
43006: PUSH
43007: LD_INT 0
43009: ST_TO_ADDR
// uc_nation = 0 ;
43010: LD_ADDR_OWVAR 21
43014: PUSH
43015: LD_INT 0
43017: ST_TO_ADDR
// InitHc_All ( ) ;
43018: CALL_OW 584
// InitVc ;
43022: CALL_OW 20
// if mastodonts then
43026: LD_VAR 0 6
43030: IFFALSE 43097
// for i = 1 to mastodonts do
43032: LD_ADDR_VAR 0 11
43036: PUSH
43037: DOUBLE
43038: LD_INT 1
43040: DEC
43041: ST_TO_ADDR
43042: LD_VAR 0 6
43046: PUSH
43047: FOR_TO
43048: IFFALSE 43095
// begin vc_chassis := 31 ;
43050: LD_ADDR_OWVAR 37
43054: PUSH
43055: LD_INT 31
43057: ST_TO_ADDR
// vc_control := control_rider ;
43058: LD_ADDR_OWVAR 38
43062: PUSH
43063: LD_INT 4
43065: ST_TO_ADDR
// animal := CreateVehicle ;
43066: LD_ADDR_VAR 0 12
43070: PUSH
43071: CALL_OW 45
43075: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43076: LD_VAR 0 12
43080: PPUSH
43081: LD_VAR 0 8
43085: PPUSH
43086: LD_INT 0
43088: PPUSH
43089: CALL 45225 0 3
// end ;
43093: GO 43047
43095: POP
43096: POP
// if horses then
43097: LD_VAR 0 5
43101: IFFALSE 43168
// for i = 1 to horses do
43103: LD_ADDR_VAR 0 11
43107: PUSH
43108: DOUBLE
43109: LD_INT 1
43111: DEC
43112: ST_TO_ADDR
43113: LD_VAR 0 5
43117: PUSH
43118: FOR_TO
43119: IFFALSE 43166
// begin hc_class := 21 ;
43121: LD_ADDR_OWVAR 28
43125: PUSH
43126: LD_INT 21
43128: ST_TO_ADDR
// hc_gallery :=  ;
43129: LD_ADDR_OWVAR 33
43133: PUSH
43134: LD_STRING 
43136: ST_TO_ADDR
// animal := CreateHuman ;
43137: LD_ADDR_VAR 0 12
43141: PUSH
43142: CALL_OW 44
43146: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43147: LD_VAR 0 12
43151: PPUSH
43152: LD_VAR 0 8
43156: PPUSH
43157: LD_INT 0
43159: PPUSH
43160: CALL 45225 0 3
// end ;
43164: GO 43118
43166: POP
43167: POP
// if birds then
43168: LD_VAR 0 1
43172: IFFALSE 43239
// for i = 1 to birds do
43174: LD_ADDR_VAR 0 11
43178: PUSH
43179: DOUBLE
43180: LD_INT 1
43182: DEC
43183: ST_TO_ADDR
43184: LD_VAR 0 1
43188: PUSH
43189: FOR_TO
43190: IFFALSE 43237
// begin hc_class := 18 ;
43192: LD_ADDR_OWVAR 28
43196: PUSH
43197: LD_INT 18
43199: ST_TO_ADDR
// hc_gallery =  ;
43200: LD_ADDR_OWVAR 33
43204: PUSH
43205: LD_STRING 
43207: ST_TO_ADDR
// animal := CreateHuman ;
43208: LD_ADDR_VAR 0 12
43212: PUSH
43213: CALL_OW 44
43217: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43218: LD_VAR 0 12
43222: PPUSH
43223: LD_VAR 0 8
43227: PPUSH
43228: LD_INT 0
43230: PPUSH
43231: CALL 45225 0 3
// end ;
43235: GO 43189
43237: POP
43238: POP
// if tigers then
43239: LD_VAR 0 2
43243: IFFALSE 43327
// for i = 1 to tigers do
43245: LD_ADDR_VAR 0 11
43249: PUSH
43250: DOUBLE
43251: LD_INT 1
43253: DEC
43254: ST_TO_ADDR
43255: LD_VAR 0 2
43259: PUSH
43260: FOR_TO
43261: IFFALSE 43325
// begin hc_class = class_tiger ;
43263: LD_ADDR_OWVAR 28
43267: PUSH
43268: LD_INT 14
43270: ST_TO_ADDR
// hc_gallery =  ;
43271: LD_ADDR_OWVAR 33
43275: PUSH
43276: LD_STRING 
43278: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43279: LD_ADDR_OWVAR 35
43283: PUSH
43284: LD_INT 7
43286: NEG
43287: PPUSH
43288: LD_INT 7
43290: PPUSH
43291: CALL_OW 12
43295: ST_TO_ADDR
// animal := CreateHuman ;
43296: LD_ADDR_VAR 0 12
43300: PUSH
43301: CALL_OW 44
43305: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43306: LD_VAR 0 12
43310: PPUSH
43311: LD_VAR 0 8
43315: PPUSH
43316: LD_INT 0
43318: PPUSH
43319: CALL 45225 0 3
// end ;
43323: GO 43260
43325: POP
43326: POP
// if apemans then
43327: LD_VAR 0 3
43331: IFFALSE 43454
// for i = 1 to apemans do
43333: LD_ADDR_VAR 0 11
43337: PUSH
43338: DOUBLE
43339: LD_INT 1
43341: DEC
43342: ST_TO_ADDR
43343: LD_VAR 0 3
43347: PUSH
43348: FOR_TO
43349: IFFALSE 43452
// begin hc_class = class_apeman ;
43351: LD_ADDR_OWVAR 28
43355: PUSH
43356: LD_INT 12
43358: ST_TO_ADDR
// hc_gallery =  ;
43359: LD_ADDR_OWVAR 33
43363: PUSH
43364: LD_STRING 
43366: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43367: LD_ADDR_OWVAR 35
43371: PUSH
43372: LD_INT 2
43374: NEG
43375: PPUSH
43376: LD_INT 2
43378: PPUSH
43379: CALL_OW 12
43383: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43384: LD_ADDR_OWVAR 31
43388: PUSH
43389: LD_INT 1
43391: PPUSH
43392: LD_INT 3
43394: PPUSH
43395: CALL_OW 12
43399: PUSH
43400: LD_INT 1
43402: PPUSH
43403: LD_INT 3
43405: PPUSH
43406: CALL_OW 12
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: ST_TO_ADDR
// animal := CreateHuman ;
43423: LD_ADDR_VAR 0 12
43427: PUSH
43428: CALL_OW 44
43432: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43433: LD_VAR 0 12
43437: PPUSH
43438: LD_VAR 0 8
43442: PPUSH
43443: LD_INT 0
43445: PPUSH
43446: CALL 45225 0 3
// end ;
43450: GO 43348
43452: POP
43453: POP
// if enchidnas then
43454: LD_VAR 0 4
43458: IFFALSE 43525
// for i = 1 to enchidnas do
43460: LD_ADDR_VAR 0 11
43464: PUSH
43465: DOUBLE
43466: LD_INT 1
43468: DEC
43469: ST_TO_ADDR
43470: LD_VAR 0 4
43474: PUSH
43475: FOR_TO
43476: IFFALSE 43523
// begin hc_class = 13 ;
43478: LD_ADDR_OWVAR 28
43482: PUSH
43483: LD_INT 13
43485: ST_TO_ADDR
// hc_gallery =  ;
43486: LD_ADDR_OWVAR 33
43490: PUSH
43491: LD_STRING 
43493: ST_TO_ADDR
// animal := CreateHuman ;
43494: LD_ADDR_VAR 0 12
43498: PUSH
43499: CALL_OW 44
43503: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43504: LD_VAR 0 12
43508: PPUSH
43509: LD_VAR 0 8
43513: PPUSH
43514: LD_INT 0
43516: PPUSH
43517: CALL 45225 0 3
// end ;
43521: GO 43475
43523: POP
43524: POP
// if fishes then
43525: LD_VAR 0 7
43529: IFFALSE 43596
// for i = 1 to fishes do
43531: LD_ADDR_VAR 0 11
43535: PUSH
43536: DOUBLE
43537: LD_INT 1
43539: DEC
43540: ST_TO_ADDR
43541: LD_VAR 0 7
43545: PUSH
43546: FOR_TO
43547: IFFALSE 43594
// begin hc_class = 20 ;
43549: LD_ADDR_OWVAR 28
43553: PUSH
43554: LD_INT 20
43556: ST_TO_ADDR
// hc_gallery =  ;
43557: LD_ADDR_OWVAR 33
43561: PUSH
43562: LD_STRING 
43564: ST_TO_ADDR
// animal := CreateHuman ;
43565: LD_ADDR_VAR 0 12
43569: PUSH
43570: CALL_OW 44
43574: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43575: LD_VAR 0 12
43579: PPUSH
43580: LD_VAR 0 9
43584: PPUSH
43585: LD_INT 0
43587: PPUSH
43588: CALL 45225 0 3
// end ;
43592: GO 43546
43594: POP
43595: POP
// end ;
43596: LD_VAR 0 10
43600: RET
// export function WantHeal ( sci , unit ) ; begin
43601: LD_INT 0
43603: PPUSH
// if GetTaskList ( sci ) > 0 then
43604: LD_VAR 0 1
43608: PPUSH
43609: CALL_OW 437
43613: PUSH
43614: LD_INT 0
43616: GREATER
43617: IFFALSE 43687
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43619: LD_VAR 0 1
43623: PPUSH
43624: CALL_OW 437
43628: PUSH
43629: LD_INT 1
43631: ARRAY
43632: PUSH
43633: LD_INT 1
43635: ARRAY
43636: PUSH
43637: LD_STRING l
43639: EQUAL
43640: PUSH
43641: LD_VAR 0 1
43645: PPUSH
43646: CALL_OW 437
43650: PUSH
43651: LD_INT 1
43653: ARRAY
43654: PUSH
43655: LD_INT 4
43657: ARRAY
43658: PUSH
43659: LD_VAR 0 2
43663: EQUAL
43664: AND
43665: IFFALSE 43677
// result := true else
43667: LD_ADDR_VAR 0 3
43671: PUSH
43672: LD_INT 1
43674: ST_TO_ADDR
43675: GO 43685
// result := false ;
43677: LD_ADDR_VAR 0 3
43681: PUSH
43682: LD_INT 0
43684: ST_TO_ADDR
// end else
43685: GO 43695
// result := false ;
43687: LD_ADDR_VAR 0 3
43691: PUSH
43692: LD_INT 0
43694: ST_TO_ADDR
// end ;
43695: LD_VAR 0 3
43699: RET
// export function HealTarget ( sci ) ; begin
43700: LD_INT 0
43702: PPUSH
// if not sci then
43703: LD_VAR 0 1
43707: NOT
43708: IFFALSE 43712
// exit ;
43710: GO 43777
// result := 0 ;
43712: LD_ADDR_VAR 0 2
43716: PUSH
43717: LD_INT 0
43719: ST_TO_ADDR
// if GetTaskList ( sci ) then
43720: LD_VAR 0 1
43724: PPUSH
43725: CALL_OW 437
43729: IFFALSE 43777
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
43731: LD_VAR 0 1
43735: PPUSH
43736: CALL_OW 437
43740: PUSH
43741: LD_INT 1
43743: ARRAY
43744: PUSH
43745: LD_INT 1
43747: ARRAY
43748: PUSH
43749: LD_STRING l
43751: EQUAL
43752: IFFALSE 43777
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
43754: LD_ADDR_VAR 0 2
43758: PUSH
43759: LD_VAR 0 1
43763: PPUSH
43764: CALL_OW 437
43768: PUSH
43769: LD_INT 1
43771: ARRAY
43772: PUSH
43773: LD_INT 4
43775: ARRAY
43776: ST_TO_ADDR
// end ;
43777: LD_VAR 0 2
43781: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
43782: LD_INT 0
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
// if not base_units then
43788: LD_VAR 0 1
43792: NOT
43793: IFFALSE 43797
// exit ;
43795: GO 43884
// result := false ;
43797: LD_ADDR_VAR 0 2
43801: PUSH
43802: LD_INT 0
43804: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
43805: LD_ADDR_VAR 0 5
43809: PUSH
43810: LD_VAR 0 1
43814: PPUSH
43815: LD_INT 21
43817: PUSH
43818: LD_INT 3
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PPUSH
43825: CALL_OW 72
43829: ST_TO_ADDR
// if not tmp then
43830: LD_VAR 0 5
43834: NOT
43835: IFFALSE 43839
// exit ;
43837: GO 43884
// for i in tmp do
43839: LD_ADDR_VAR 0 3
43843: PUSH
43844: LD_VAR 0 5
43848: PUSH
43849: FOR_IN
43850: IFFALSE 43882
// begin result := EnemyInRange ( i , 22 ) ;
43852: LD_ADDR_VAR 0 2
43856: PUSH
43857: LD_VAR 0 3
43861: PPUSH
43862: LD_INT 22
43864: PPUSH
43865: CALL 41482 0 2
43869: ST_TO_ADDR
// if result then
43870: LD_VAR 0 2
43874: IFFALSE 43880
// exit ;
43876: POP
43877: POP
43878: GO 43884
// end ;
43880: GO 43849
43882: POP
43883: POP
// end ;
43884: LD_VAR 0 2
43888: RET
// export function FilterByTag ( units , tag ) ; begin
43889: LD_INT 0
43891: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
43892: LD_ADDR_VAR 0 3
43896: PUSH
43897: LD_VAR 0 1
43901: PPUSH
43902: LD_INT 120
43904: PUSH
43905: LD_VAR 0 2
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PPUSH
43914: CALL_OW 72
43918: ST_TO_ADDR
// end ;
43919: LD_VAR 0 3
43923: RET
// export function IsDriver ( un ) ; begin
43924: LD_INT 0
43926: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
43927: LD_ADDR_VAR 0 2
43931: PUSH
43932: LD_VAR 0 1
43936: PUSH
43937: LD_INT 55
43939: PUSH
43940: EMPTY
43941: LIST
43942: PPUSH
43943: CALL_OW 69
43947: IN
43948: ST_TO_ADDR
// end ;
43949: LD_VAR 0 2
43953: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
43954: LD_INT 0
43956: PPUSH
43957: PPUSH
// list := [ ] ;
43958: LD_ADDR_VAR 0 5
43962: PUSH
43963: EMPTY
43964: ST_TO_ADDR
// case d of 0 :
43965: LD_VAR 0 3
43969: PUSH
43970: LD_INT 0
43972: DOUBLE
43973: EQUAL
43974: IFTRUE 43978
43976: GO 44111
43978: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
43979: LD_ADDR_VAR 0 5
43983: PUSH
43984: LD_VAR 0 1
43988: PUSH
43989: LD_INT 4
43991: MINUS
43992: PUSH
43993: LD_VAR 0 2
43997: PUSH
43998: LD_INT 4
44000: MINUS
44001: PUSH
44002: LD_INT 2
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: LIST
44009: PUSH
44010: LD_VAR 0 1
44014: PUSH
44015: LD_INT 3
44017: MINUS
44018: PUSH
44019: LD_VAR 0 2
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: LIST
44031: PUSH
44032: LD_VAR 0 1
44036: PUSH
44037: LD_INT 4
44039: PLUS
44040: PUSH
44041: LD_VAR 0 2
44045: PUSH
44046: LD_INT 4
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: LIST
44053: PUSH
44054: LD_VAR 0 1
44058: PUSH
44059: LD_INT 3
44061: PLUS
44062: PUSH
44063: LD_VAR 0 2
44067: PUSH
44068: LD_INT 3
44070: PLUS
44071: PUSH
44072: LD_INT 5
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: LIST
44079: PUSH
44080: LD_VAR 0 1
44084: PUSH
44085: LD_VAR 0 2
44089: PUSH
44090: LD_INT 4
44092: PLUS
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: LIST
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: ST_TO_ADDR
// end ; 1 :
44109: GO 44809
44111: LD_INT 1
44113: DOUBLE
44114: EQUAL
44115: IFTRUE 44119
44117: GO 44252
44119: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44120: LD_ADDR_VAR 0 5
44124: PUSH
44125: LD_VAR 0 1
44129: PUSH
44130: LD_VAR 0 2
44134: PUSH
44135: LD_INT 4
44137: MINUS
44138: PUSH
44139: LD_INT 3
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: LIST
44146: PUSH
44147: LD_VAR 0 1
44151: PUSH
44152: LD_INT 3
44154: MINUS
44155: PUSH
44156: LD_VAR 0 2
44160: PUSH
44161: LD_INT 3
44163: MINUS
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: LIST
44172: PUSH
44173: LD_VAR 0 1
44177: PUSH
44178: LD_INT 4
44180: MINUS
44181: PUSH
44182: LD_VAR 0 2
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: LIST
44194: PUSH
44195: LD_VAR 0 1
44199: PUSH
44200: LD_VAR 0 2
44204: PUSH
44205: LD_INT 3
44207: PLUS
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: LIST
44216: PUSH
44217: LD_VAR 0 1
44221: PUSH
44222: LD_INT 4
44224: PLUS
44225: PUSH
44226: LD_VAR 0 2
44230: PUSH
44231: LD_INT 4
44233: PLUS
44234: PUSH
44235: LD_INT 5
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: LIST
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: ST_TO_ADDR
// end ; 2 :
44250: GO 44809
44252: LD_INT 2
44254: DOUBLE
44255: EQUAL
44256: IFTRUE 44260
44258: GO 44389
44260: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44261: LD_ADDR_VAR 0 5
44265: PUSH
44266: LD_VAR 0 1
44270: PUSH
44271: LD_VAR 0 2
44275: PUSH
44276: LD_INT 3
44278: MINUS
44279: PUSH
44280: LD_INT 3
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: LIST
44287: PUSH
44288: LD_VAR 0 1
44292: PUSH
44293: LD_INT 4
44295: PLUS
44296: PUSH
44297: LD_VAR 0 2
44301: PUSH
44302: LD_INT 4
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: LIST
44309: PUSH
44310: LD_VAR 0 1
44314: PUSH
44315: LD_VAR 0 2
44319: PUSH
44320: LD_INT 4
44322: PLUS
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: LIST
44331: PUSH
44332: LD_VAR 0 1
44336: PUSH
44337: LD_INT 3
44339: MINUS
44340: PUSH
44341: LD_VAR 0 2
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: LIST
44353: PUSH
44354: LD_VAR 0 1
44358: PUSH
44359: LD_INT 4
44361: MINUS
44362: PUSH
44363: LD_VAR 0 2
44367: PUSH
44368: LD_INT 4
44370: MINUS
44371: PUSH
44372: LD_INT 2
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: LIST
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: ST_TO_ADDR
// end ; 3 :
44387: GO 44809
44389: LD_INT 3
44391: DOUBLE
44392: EQUAL
44393: IFTRUE 44397
44395: GO 44530
44397: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44398: LD_ADDR_VAR 0 5
44402: PUSH
44403: LD_VAR 0 1
44407: PUSH
44408: LD_INT 3
44410: PLUS
44411: PUSH
44412: LD_VAR 0 2
44416: PUSH
44417: LD_INT 4
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: LIST
44424: PUSH
44425: LD_VAR 0 1
44429: PUSH
44430: LD_INT 4
44432: PLUS
44433: PUSH
44434: LD_VAR 0 2
44438: PUSH
44439: LD_INT 4
44441: PLUS
44442: PUSH
44443: LD_INT 5
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: LIST
44450: PUSH
44451: LD_VAR 0 1
44455: PUSH
44456: LD_INT 4
44458: MINUS
44459: PUSH
44460: LD_VAR 0 2
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: LIST
44472: PUSH
44473: LD_VAR 0 1
44477: PUSH
44478: LD_VAR 0 2
44482: PUSH
44483: LD_INT 4
44485: MINUS
44486: PUSH
44487: LD_INT 3
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: LIST
44494: PUSH
44495: LD_VAR 0 1
44499: PUSH
44500: LD_INT 3
44502: MINUS
44503: PUSH
44504: LD_VAR 0 2
44508: PUSH
44509: LD_INT 3
44511: MINUS
44512: PUSH
44513: LD_INT 2
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: LIST
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: ST_TO_ADDR
// end ; 4 :
44528: GO 44809
44530: LD_INT 4
44532: DOUBLE
44533: EQUAL
44534: IFTRUE 44538
44536: GO 44671
44538: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44539: LD_ADDR_VAR 0 5
44543: PUSH
44544: LD_VAR 0 1
44548: PUSH
44549: LD_VAR 0 2
44553: PUSH
44554: LD_INT 4
44556: PLUS
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: LIST
44565: PUSH
44566: LD_VAR 0 1
44570: PUSH
44571: LD_INT 3
44573: PLUS
44574: PUSH
44575: LD_VAR 0 2
44579: PUSH
44580: LD_INT 3
44582: PLUS
44583: PUSH
44584: LD_INT 5
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: LIST
44591: PUSH
44592: LD_VAR 0 1
44596: PUSH
44597: LD_INT 4
44599: PLUS
44600: PUSH
44601: LD_VAR 0 2
44605: PUSH
44606: LD_INT 4
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: LIST
44613: PUSH
44614: LD_VAR 0 1
44618: PUSH
44619: LD_VAR 0 2
44623: PUSH
44624: LD_INT 3
44626: MINUS
44627: PUSH
44628: LD_INT 3
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: LIST
44635: PUSH
44636: LD_VAR 0 1
44640: PUSH
44641: LD_INT 4
44643: MINUS
44644: PUSH
44645: LD_VAR 0 2
44649: PUSH
44650: LD_INT 4
44652: MINUS
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: LIST
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: ST_TO_ADDR
// end ; 5 :
44669: GO 44809
44671: LD_INT 5
44673: DOUBLE
44674: EQUAL
44675: IFTRUE 44679
44677: GO 44808
44679: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44680: LD_ADDR_VAR 0 5
44684: PUSH
44685: LD_VAR 0 1
44689: PUSH
44690: LD_INT 4
44692: MINUS
44693: PUSH
44694: LD_VAR 0 2
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: LIST
44706: PUSH
44707: LD_VAR 0 1
44711: PUSH
44712: LD_VAR 0 2
44716: PUSH
44717: LD_INT 4
44719: MINUS
44720: PUSH
44721: LD_INT 3
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: LIST
44728: PUSH
44729: LD_VAR 0 1
44733: PUSH
44734: LD_INT 4
44736: PLUS
44737: PUSH
44738: LD_VAR 0 2
44742: PUSH
44743: LD_INT 4
44745: PLUS
44746: PUSH
44747: LD_INT 5
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: LIST
44754: PUSH
44755: LD_VAR 0 1
44759: PUSH
44760: LD_INT 3
44762: PLUS
44763: PUSH
44764: LD_VAR 0 2
44768: PUSH
44769: LD_INT 4
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: LIST
44776: PUSH
44777: LD_VAR 0 1
44781: PUSH
44782: LD_VAR 0 2
44786: PUSH
44787: LD_INT 3
44789: PLUS
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: ST_TO_ADDR
// end ; end ;
44806: GO 44809
44808: POP
// result := list ;
44809: LD_ADDR_VAR 0 4
44813: PUSH
44814: LD_VAR 0 5
44818: ST_TO_ADDR
// end ;
44819: LD_VAR 0 4
44823: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
44824: LD_INT 0
44826: PPUSH
44827: PPUSH
44828: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
44829: LD_VAR 0 1
44833: NOT
44834: PUSH
44835: LD_VAR 0 2
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: LD_INT 3
44848: PUSH
44849: LD_INT 4
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: IN
44858: NOT
44859: OR
44860: IFFALSE 44864
// exit ;
44862: GO 44947
// tmp := [ ] ;
44864: LD_ADDR_VAR 0 5
44868: PUSH
44869: EMPTY
44870: ST_TO_ADDR
// for i in units do
44871: LD_ADDR_VAR 0 4
44875: PUSH
44876: LD_VAR 0 1
44880: PUSH
44881: FOR_IN
44882: IFFALSE 44916
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
44884: LD_ADDR_VAR 0 5
44888: PUSH
44889: LD_VAR 0 5
44893: PPUSH
44894: LD_VAR 0 4
44898: PPUSH
44899: LD_VAR 0 2
44903: PPUSH
44904: CALL_OW 259
44908: PPUSH
44909: CALL 46320 0 2
44913: ST_TO_ADDR
44914: GO 44881
44916: POP
44917: POP
// if not tmp then
44918: LD_VAR 0 5
44922: NOT
44923: IFFALSE 44927
// exit ;
44925: GO 44947
// result := SortListByListDesc ( units , tmp ) ;
44927: LD_ADDR_VAR 0 3
44931: PUSH
44932: LD_VAR 0 1
44936: PPUSH
44937: LD_VAR 0 5
44941: PPUSH
44942: CALL_OW 77
44946: ST_TO_ADDR
// end ;
44947: LD_VAR 0 3
44951: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
44952: LD_INT 0
44954: PPUSH
44955: PPUSH
44956: PPUSH
// result := false ;
44957: LD_ADDR_VAR 0 3
44961: PUSH
44962: LD_INT 0
44964: ST_TO_ADDR
// if not building then
44965: LD_VAR 0 2
44969: NOT
44970: IFFALSE 44974
// exit ;
44972: GO 45112
// x := GetX ( building ) ;
44974: LD_ADDR_VAR 0 4
44978: PUSH
44979: LD_VAR 0 2
44983: PPUSH
44984: CALL_OW 250
44988: ST_TO_ADDR
// y := GetY ( building ) ;
44989: LD_ADDR_VAR 0 5
44993: PUSH
44994: LD_VAR 0 2
44998: PPUSH
44999: CALL_OW 251
45003: ST_TO_ADDR
// if not x or not y then
45004: LD_VAR 0 4
45008: NOT
45009: PUSH
45010: LD_VAR 0 5
45014: NOT
45015: OR
45016: IFFALSE 45020
// exit ;
45018: GO 45112
// if GetTaskList ( unit ) then
45020: LD_VAR 0 1
45024: PPUSH
45025: CALL_OW 437
45029: IFFALSE 45112
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45031: LD_STRING e
45033: PUSH
45034: LD_VAR 0 1
45038: PPUSH
45039: CALL_OW 437
45043: PUSH
45044: LD_INT 1
45046: ARRAY
45047: PUSH
45048: LD_INT 1
45050: ARRAY
45051: EQUAL
45052: PUSH
45053: LD_VAR 0 4
45057: PUSH
45058: LD_VAR 0 1
45062: PPUSH
45063: CALL_OW 437
45067: PUSH
45068: LD_INT 1
45070: ARRAY
45071: PUSH
45072: LD_INT 2
45074: ARRAY
45075: EQUAL
45076: AND
45077: PUSH
45078: LD_VAR 0 5
45082: PUSH
45083: LD_VAR 0 1
45087: PPUSH
45088: CALL_OW 437
45092: PUSH
45093: LD_INT 1
45095: ARRAY
45096: PUSH
45097: LD_INT 3
45099: ARRAY
45100: EQUAL
45101: AND
45102: IFFALSE 45112
// result := true end ;
45104: LD_ADDR_VAR 0 3
45108: PUSH
45109: LD_INT 1
45111: ST_TO_ADDR
// end ;
45112: LD_VAR 0 3
45116: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45117: LD_INT 0
45119: PPUSH
// result := false ;
45120: LD_ADDR_VAR 0 4
45124: PUSH
45125: LD_INT 0
45127: ST_TO_ADDR
// if GetTaskList ( unit ) then
45128: LD_VAR 0 1
45132: PPUSH
45133: CALL_OW 437
45137: IFFALSE 45220
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45139: LD_STRING M
45141: PUSH
45142: LD_VAR 0 1
45146: PPUSH
45147: CALL_OW 437
45151: PUSH
45152: LD_INT 1
45154: ARRAY
45155: PUSH
45156: LD_INT 1
45158: ARRAY
45159: EQUAL
45160: PUSH
45161: LD_VAR 0 2
45165: PUSH
45166: LD_VAR 0 1
45170: PPUSH
45171: CALL_OW 437
45175: PUSH
45176: LD_INT 1
45178: ARRAY
45179: PUSH
45180: LD_INT 2
45182: ARRAY
45183: EQUAL
45184: AND
45185: PUSH
45186: LD_VAR 0 3
45190: PUSH
45191: LD_VAR 0 1
45195: PPUSH
45196: CALL_OW 437
45200: PUSH
45201: LD_INT 1
45203: ARRAY
45204: PUSH
45205: LD_INT 3
45207: ARRAY
45208: EQUAL
45209: AND
45210: IFFALSE 45220
// result := true ;
45212: LD_ADDR_VAR 0 4
45216: PUSH
45217: LD_INT 1
45219: ST_TO_ADDR
// end ; end ;
45220: LD_VAR 0 4
45224: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45225: LD_INT 0
45227: PPUSH
45228: PPUSH
45229: PPUSH
45230: PPUSH
// if not unit or not area then
45231: LD_VAR 0 1
45235: NOT
45236: PUSH
45237: LD_VAR 0 2
45241: NOT
45242: OR
45243: IFFALSE 45247
// exit ;
45245: GO 45423
// tmp := AreaToList ( area , i ) ;
45247: LD_ADDR_VAR 0 6
45251: PUSH
45252: LD_VAR 0 2
45256: PPUSH
45257: LD_VAR 0 5
45261: PPUSH
45262: CALL_OW 517
45266: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45267: LD_ADDR_VAR 0 5
45271: PUSH
45272: DOUBLE
45273: LD_INT 1
45275: DEC
45276: ST_TO_ADDR
45277: LD_VAR 0 6
45281: PUSH
45282: LD_INT 1
45284: ARRAY
45285: PUSH
45286: FOR_TO
45287: IFFALSE 45421
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45289: LD_ADDR_VAR 0 7
45293: PUSH
45294: LD_VAR 0 6
45298: PUSH
45299: LD_INT 1
45301: ARRAY
45302: PUSH
45303: LD_VAR 0 5
45307: ARRAY
45308: PUSH
45309: LD_VAR 0 6
45313: PUSH
45314: LD_INT 2
45316: ARRAY
45317: PUSH
45318: LD_VAR 0 5
45322: ARRAY
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
45328: LD_INT 92
45330: PUSH
45331: LD_VAR 0 7
45335: PUSH
45336: LD_INT 1
45338: ARRAY
45339: PUSH
45340: LD_VAR 0 7
45344: PUSH
45345: LD_INT 2
45347: ARRAY
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: PPUSH
45358: CALL_OW 69
45362: PUSH
45363: LD_INT 0
45365: EQUAL
45366: IFFALSE 45419
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45368: LD_VAR 0 1
45372: PPUSH
45373: LD_VAR 0 7
45377: PUSH
45378: LD_INT 1
45380: ARRAY
45381: PPUSH
45382: LD_VAR 0 7
45386: PUSH
45387: LD_INT 2
45389: ARRAY
45390: PPUSH
45391: LD_VAR 0 3
45395: PPUSH
45396: CALL_OW 48
// result := IsPlaced ( unit ) ;
45400: LD_ADDR_VAR 0 4
45404: PUSH
45405: LD_VAR 0 1
45409: PPUSH
45410: CALL_OW 305
45414: ST_TO_ADDR
// exit ;
45415: POP
45416: POP
45417: GO 45423
// end ; end ;
45419: GO 45286
45421: POP
45422: POP
// end ;
45423: LD_VAR 0 4
45427: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45428: LD_INT 0
45430: PPUSH
45431: PPUSH
45432: PPUSH
// if not side or side > 8 then
45433: LD_VAR 0 1
45437: NOT
45438: PUSH
45439: LD_VAR 0 1
45443: PUSH
45444: LD_INT 8
45446: GREATER
45447: OR
45448: IFFALSE 45452
// exit ;
45450: GO 45639
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45452: LD_ADDR_VAR 0 4
45456: PUSH
45457: LD_INT 22
45459: PUSH
45460: LD_VAR 0 1
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 21
45471: PUSH
45472: LD_INT 3
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PPUSH
45483: CALL_OW 69
45487: ST_TO_ADDR
// if not tmp then
45488: LD_VAR 0 4
45492: NOT
45493: IFFALSE 45497
// exit ;
45495: GO 45639
// enable_addtolog := true ;
45497: LD_ADDR_OWVAR 81
45501: PUSH
45502: LD_INT 1
45504: ST_TO_ADDR
// AddToLog ( [ ) ;
45505: LD_STRING [
45507: PPUSH
45508: CALL_OW 561
// for i in tmp do
45512: LD_ADDR_VAR 0 3
45516: PUSH
45517: LD_VAR 0 4
45521: PUSH
45522: FOR_IN
45523: IFFALSE 45630
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45525: LD_STRING [
45527: PUSH
45528: LD_VAR 0 3
45532: PPUSH
45533: CALL_OW 266
45537: STR
45538: PUSH
45539: LD_STRING , 
45541: STR
45542: PUSH
45543: LD_VAR 0 3
45547: PPUSH
45548: CALL_OW 250
45552: STR
45553: PUSH
45554: LD_STRING , 
45556: STR
45557: PUSH
45558: LD_VAR 0 3
45562: PPUSH
45563: CALL_OW 251
45567: STR
45568: PUSH
45569: LD_STRING , 
45571: STR
45572: PUSH
45573: LD_VAR 0 3
45577: PPUSH
45578: CALL_OW 254
45582: STR
45583: PUSH
45584: LD_STRING , 
45586: STR
45587: PUSH
45588: LD_VAR 0 3
45592: PPUSH
45593: LD_INT 1
45595: PPUSH
45596: CALL_OW 268
45600: STR
45601: PUSH
45602: LD_STRING , 
45604: STR
45605: PUSH
45606: LD_VAR 0 3
45610: PPUSH
45611: LD_INT 2
45613: PPUSH
45614: CALL_OW 268
45618: STR
45619: PUSH
45620: LD_STRING ],
45622: STR
45623: PPUSH
45624: CALL_OW 561
// end ;
45628: GO 45522
45630: POP
45631: POP
// AddToLog ( ]; ) ;
45632: LD_STRING ];
45634: PPUSH
45635: CALL_OW 561
// end ;
45639: LD_VAR 0 2
45643: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45644: LD_INT 0
45646: PPUSH
45647: PPUSH
45648: PPUSH
45649: PPUSH
45650: PPUSH
// if not area or not rate or not max then
45651: LD_VAR 0 1
45655: NOT
45656: PUSH
45657: LD_VAR 0 2
45661: NOT
45662: OR
45663: PUSH
45664: LD_VAR 0 4
45668: NOT
45669: OR
45670: IFFALSE 45674
// exit ;
45672: GO 45863
// while 1 do
45674: LD_INT 1
45676: IFFALSE 45863
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45678: LD_ADDR_VAR 0 9
45682: PUSH
45683: LD_VAR 0 1
45687: PPUSH
45688: LD_INT 1
45690: PPUSH
45691: CALL_OW 287
45695: PUSH
45696: LD_INT 10
45698: MUL
45699: ST_TO_ADDR
// r := rate / 10 ;
45700: LD_ADDR_VAR 0 7
45704: PUSH
45705: LD_VAR 0 2
45709: PUSH
45710: LD_INT 10
45712: DIVREAL
45713: ST_TO_ADDR
// time := 1 1$00 ;
45714: LD_ADDR_VAR 0 8
45718: PUSH
45719: LD_INT 2100
45721: ST_TO_ADDR
// if amount < min then
45722: LD_VAR 0 9
45726: PUSH
45727: LD_VAR 0 3
45731: LESS
45732: IFFALSE 45750
// r := r * 2 else
45734: LD_ADDR_VAR 0 7
45738: PUSH
45739: LD_VAR 0 7
45743: PUSH
45744: LD_INT 2
45746: MUL
45747: ST_TO_ADDR
45748: GO 45776
// if amount > max then
45750: LD_VAR 0 9
45754: PUSH
45755: LD_VAR 0 4
45759: GREATER
45760: IFFALSE 45776
// r := r / 2 ;
45762: LD_ADDR_VAR 0 7
45766: PUSH
45767: LD_VAR 0 7
45771: PUSH
45772: LD_INT 2
45774: DIVREAL
45775: ST_TO_ADDR
// time := time / r ;
45776: LD_ADDR_VAR 0 8
45780: PUSH
45781: LD_VAR 0 8
45785: PUSH
45786: LD_VAR 0 7
45790: DIVREAL
45791: ST_TO_ADDR
// if time < 0 then
45792: LD_VAR 0 8
45796: PUSH
45797: LD_INT 0
45799: LESS
45800: IFFALSE 45817
// time := time * - 1 ;
45802: LD_ADDR_VAR 0 8
45806: PUSH
45807: LD_VAR 0 8
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: MUL
45816: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
45817: LD_VAR 0 8
45821: PUSH
45822: LD_INT 35
45824: PPUSH
45825: LD_INT 875
45827: PPUSH
45828: CALL_OW 12
45832: PLUS
45833: PPUSH
45834: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
45838: LD_INT 1
45840: PPUSH
45841: LD_INT 5
45843: PPUSH
45844: CALL_OW 12
45848: PPUSH
45849: LD_VAR 0 1
45853: PPUSH
45854: LD_INT 1
45856: PPUSH
45857: CALL_OW 55
// end ;
45861: GO 45674
// end ;
45863: LD_VAR 0 5
45867: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
45868: LD_INT 0
45870: PPUSH
45871: PPUSH
45872: PPUSH
45873: PPUSH
45874: PPUSH
45875: PPUSH
45876: PPUSH
45877: PPUSH
// if not turrets or not factories then
45878: LD_VAR 0 1
45882: NOT
45883: PUSH
45884: LD_VAR 0 2
45888: NOT
45889: OR
45890: IFFALSE 45894
// exit ;
45892: GO 46201
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
45894: LD_ADDR_VAR 0 10
45898: PUSH
45899: LD_INT 5
45901: PUSH
45902: LD_INT 6
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: LD_INT 4
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 3
45921: PUSH
45922: LD_INT 5
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 24
45936: PUSH
45937: LD_INT 25
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 23
45946: PUSH
45947: LD_INT 27
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 42
45960: PUSH
45961: LD_INT 43
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 44
45970: PUSH
45971: LD_INT 46
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 45
45980: PUSH
45981: LD_INT 47
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: LIST
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: LIST
45997: ST_TO_ADDR
// result := [ ] ;
45998: LD_ADDR_VAR 0 3
46002: PUSH
46003: EMPTY
46004: ST_TO_ADDR
// for i in turrets do
46005: LD_ADDR_VAR 0 4
46009: PUSH
46010: LD_VAR 0 1
46014: PUSH
46015: FOR_IN
46016: IFFALSE 46199
// begin nat := GetNation ( i ) ;
46018: LD_ADDR_VAR 0 7
46022: PUSH
46023: LD_VAR 0 4
46027: PPUSH
46028: CALL_OW 248
46032: ST_TO_ADDR
// weapon := 0 ;
46033: LD_ADDR_VAR 0 8
46037: PUSH
46038: LD_INT 0
46040: ST_TO_ADDR
// if not nat then
46041: LD_VAR 0 7
46045: NOT
46046: IFFALSE 46050
// continue ;
46048: GO 46015
// for j in list [ nat ] do
46050: LD_ADDR_VAR 0 5
46054: PUSH
46055: LD_VAR 0 10
46059: PUSH
46060: LD_VAR 0 7
46064: ARRAY
46065: PUSH
46066: FOR_IN
46067: IFFALSE 46108
// if GetBWeapon ( i ) = j [ 1 ] then
46069: LD_VAR 0 4
46073: PPUSH
46074: CALL_OW 269
46078: PUSH
46079: LD_VAR 0 5
46083: PUSH
46084: LD_INT 1
46086: ARRAY
46087: EQUAL
46088: IFFALSE 46106
// begin weapon := j [ 2 ] ;
46090: LD_ADDR_VAR 0 8
46094: PUSH
46095: LD_VAR 0 5
46099: PUSH
46100: LD_INT 2
46102: ARRAY
46103: ST_TO_ADDR
// break ;
46104: GO 46108
// end ;
46106: GO 46066
46108: POP
46109: POP
// if not weapon then
46110: LD_VAR 0 8
46114: NOT
46115: IFFALSE 46119
// continue ;
46117: GO 46015
// for k in factories do
46119: LD_ADDR_VAR 0 6
46123: PUSH
46124: LD_VAR 0 2
46128: PUSH
46129: FOR_IN
46130: IFFALSE 46195
// begin weapons := AvailableWeaponList ( k ) ;
46132: LD_ADDR_VAR 0 9
46136: PUSH
46137: LD_VAR 0 6
46141: PPUSH
46142: CALL_OW 478
46146: ST_TO_ADDR
// if not weapons then
46147: LD_VAR 0 9
46151: NOT
46152: IFFALSE 46156
// continue ;
46154: GO 46129
// if weapon in weapons then
46156: LD_VAR 0 8
46160: PUSH
46161: LD_VAR 0 9
46165: IN
46166: IFFALSE 46193
// begin result := [ i , weapon ] ;
46168: LD_ADDR_VAR 0 3
46172: PUSH
46173: LD_VAR 0 4
46177: PUSH
46178: LD_VAR 0 8
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: ST_TO_ADDR
// exit ;
46187: POP
46188: POP
46189: POP
46190: POP
46191: GO 46201
// end ; end ;
46193: GO 46129
46195: POP
46196: POP
// end ;
46197: GO 46015
46199: POP
46200: POP
// end ;
46201: LD_VAR 0 3
46205: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46206: LD_INT 0
46208: PPUSH
// if not side or side > 8 then
46209: LD_VAR 0 3
46213: NOT
46214: PUSH
46215: LD_VAR 0 3
46219: PUSH
46220: LD_INT 8
46222: GREATER
46223: OR
46224: IFFALSE 46228
// exit ;
46226: GO 46287
// if not range then
46228: LD_VAR 0 4
46232: NOT
46233: IFFALSE 46244
// range := - 12 ;
46235: LD_ADDR_VAR 0 4
46239: PUSH
46240: LD_INT 12
46242: NEG
46243: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46244: LD_VAR 0 1
46248: PPUSH
46249: LD_VAR 0 2
46253: PPUSH
46254: LD_VAR 0 3
46258: PPUSH
46259: LD_VAR 0 4
46263: PPUSH
46264: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46268: LD_VAR 0 1
46272: PPUSH
46273: LD_VAR 0 2
46277: PPUSH
46278: LD_VAR 0 3
46282: PPUSH
46283: CALL_OW 331
// end ;
46287: LD_VAR 0 5
46291: RET
// export function Video ( mode ) ; begin
46292: LD_INT 0
46294: PPUSH
// ingame_video = mode ;
46295: LD_ADDR_OWVAR 52
46299: PUSH
46300: LD_VAR 0 1
46304: ST_TO_ADDR
// interface_hidden = mode ;
46305: LD_ADDR_OWVAR 54
46309: PUSH
46310: LD_VAR 0 1
46314: ST_TO_ADDR
// end ;
46315: LD_VAR 0 2
46319: RET
// export function Join ( array , element ) ; begin
46320: LD_INT 0
46322: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46323: LD_ADDR_VAR 0 3
46327: PUSH
46328: LD_VAR 0 1
46332: PPUSH
46333: LD_VAR 0 1
46337: PUSH
46338: LD_INT 1
46340: PLUS
46341: PPUSH
46342: LD_VAR 0 2
46346: PPUSH
46347: CALL_OW 1
46351: ST_TO_ADDR
// end ;
46352: LD_VAR 0 3
46356: RET
// export function JoinUnion ( array , element ) ; begin
46357: LD_INT 0
46359: PPUSH
// result := array union element ;
46360: LD_ADDR_VAR 0 3
46364: PUSH
46365: LD_VAR 0 1
46369: PUSH
46370: LD_VAR 0 2
46374: UNION
46375: ST_TO_ADDR
// end ;
46376: LD_VAR 0 3
46380: RET
// export function GetBehemoths ( side ) ; begin
46381: LD_INT 0
46383: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
46384: LD_ADDR_VAR 0 2
46388: PUSH
46389: LD_INT 22
46391: PUSH
46392: LD_VAR 0 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 31
46403: PUSH
46404: LD_INT 25
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PPUSH
46415: CALL_OW 69
46419: ST_TO_ADDR
// end ;
46420: LD_VAR 0 2
46424: RET
// export function Shuffle ( array ) ; var i , index ; begin
46425: LD_INT 0
46427: PPUSH
46428: PPUSH
46429: PPUSH
// result := [ ] ;
46430: LD_ADDR_VAR 0 2
46434: PUSH
46435: EMPTY
46436: ST_TO_ADDR
// if not array then
46437: LD_VAR 0 1
46441: NOT
46442: IFFALSE 46446
// exit ;
46444: GO 46545
// Randomize ;
46446: CALL_OW 10
// for i = array downto 1 do
46450: LD_ADDR_VAR 0 3
46454: PUSH
46455: DOUBLE
46456: LD_VAR 0 1
46460: INC
46461: ST_TO_ADDR
46462: LD_INT 1
46464: PUSH
46465: FOR_DOWNTO
46466: IFFALSE 46543
// begin index := rand ( 1 , array ) ;
46468: LD_ADDR_VAR 0 4
46472: PUSH
46473: LD_INT 1
46475: PPUSH
46476: LD_VAR 0 1
46480: PPUSH
46481: CALL_OW 12
46485: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46486: LD_ADDR_VAR 0 2
46490: PUSH
46491: LD_VAR 0 2
46495: PPUSH
46496: LD_VAR 0 2
46500: PUSH
46501: LD_INT 1
46503: PLUS
46504: PPUSH
46505: LD_VAR 0 1
46509: PUSH
46510: LD_VAR 0 4
46514: ARRAY
46515: PPUSH
46516: CALL_OW 2
46520: ST_TO_ADDR
// array := Delete ( array , index ) ;
46521: LD_ADDR_VAR 0 1
46525: PUSH
46526: LD_VAR 0 1
46530: PPUSH
46531: LD_VAR 0 4
46535: PPUSH
46536: CALL_OW 3
46540: ST_TO_ADDR
// end ;
46541: GO 46465
46543: POP
46544: POP
// end ;
46545: LD_VAR 0 2
46549: RET
// export function GetBaseMaterials ( base ) ; begin
46550: LD_INT 0
46552: PPUSH
// result := [ 0 , 0 , 0 ] ;
46553: LD_ADDR_VAR 0 2
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: LIST
46571: ST_TO_ADDR
// if not base then
46572: LD_VAR 0 1
46576: NOT
46577: IFFALSE 46581
// exit ;
46579: GO 46630
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46581: LD_ADDR_VAR 0 2
46585: PUSH
46586: LD_VAR 0 1
46590: PPUSH
46591: LD_INT 1
46593: PPUSH
46594: CALL_OW 275
46598: PUSH
46599: LD_VAR 0 1
46603: PPUSH
46604: LD_INT 2
46606: PPUSH
46607: CALL_OW 275
46611: PUSH
46612: LD_VAR 0 1
46616: PPUSH
46617: LD_INT 3
46619: PPUSH
46620: CALL_OW 275
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: LIST
46629: ST_TO_ADDR
// end ;
46630: LD_VAR 0 2
46634: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46635: LD_INT 0
46637: PPUSH
46638: PPUSH
// result := array ;
46639: LD_ADDR_VAR 0 3
46643: PUSH
46644: LD_VAR 0 1
46648: ST_TO_ADDR
// if size >= result then
46649: LD_VAR 0 2
46653: PUSH
46654: LD_VAR 0 3
46658: GREATEREQUAL
46659: IFFALSE 46663
// exit ;
46661: GO 46713
// if size then
46663: LD_VAR 0 2
46667: IFFALSE 46713
// for i := array downto size do
46669: LD_ADDR_VAR 0 4
46673: PUSH
46674: DOUBLE
46675: LD_VAR 0 1
46679: INC
46680: ST_TO_ADDR
46681: LD_VAR 0 2
46685: PUSH
46686: FOR_DOWNTO
46687: IFFALSE 46711
// result := Delete ( result , result ) ;
46689: LD_ADDR_VAR 0 3
46693: PUSH
46694: LD_VAR 0 3
46698: PPUSH
46699: LD_VAR 0 3
46703: PPUSH
46704: CALL_OW 3
46708: ST_TO_ADDR
46709: GO 46686
46711: POP
46712: POP
// end ;
46713: LD_VAR 0 3
46717: RET
// export function ComExit ( unit ) ; var tmp ; begin
46718: LD_INT 0
46720: PPUSH
46721: PPUSH
// if not IsInUnit ( unit ) then
46722: LD_VAR 0 1
46726: PPUSH
46727: CALL_OW 310
46731: NOT
46732: IFFALSE 46736
// exit ;
46734: GO 46796
// tmp := IsInUnit ( unit ) ;
46736: LD_ADDR_VAR 0 3
46740: PUSH
46741: LD_VAR 0 1
46745: PPUSH
46746: CALL_OW 310
46750: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
46751: LD_VAR 0 3
46755: PPUSH
46756: CALL_OW 247
46760: PUSH
46761: LD_INT 2
46763: EQUAL
46764: IFFALSE 46777
// ComExitVehicle ( unit ) else
46766: LD_VAR 0 1
46770: PPUSH
46771: CALL_OW 121
46775: GO 46786
// ComExitBuilding ( unit ) ;
46777: LD_VAR 0 1
46781: PPUSH
46782: CALL_OW 122
// result := tmp ;
46786: LD_ADDR_VAR 0 2
46790: PUSH
46791: LD_VAR 0 3
46795: ST_TO_ADDR
// end ;
46796: LD_VAR 0 2
46800: RET
// export function ComExitAll ( units ) ; var i ; begin
46801: LD_INT 0
46803: PPUSH
46804: PPUSH
// if not units then
46805: LD_VAR 0 1
46809: NOT
46810: IFFALSE 46814
// exit ;
46812: GO 46840
// for i in units do
46814: LD_ADDR_VAR 0 3
46818: PUSH
46819: LD_VAR 0 1
46823: PUSH
46824: FOR_IN
46825: IFFALSE 46838
// ComExit ( i ) ;
46827: LD_VAR 0 3
46831: PPUSH
46832: CALL 46718 0 1
46836: GO 46824
46838: POP
46839: POP
// end ;
46840: LD_VAR 0 2
46844: RET
// export function ResetHc ; begin
46845: LD_INT 0
46847: PPUSH
// InitHc ;
46848: CALL_OW 19
// hc_importance := 0 ;
46852: LD_ADDR_OWVAR 32
46856: PUSH
46857: LD_INT 0
46859: ST_TO_ADDR
// end ;
46860: LD_VAR 0 1
46864: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
46865: LD_INT 0
46867: PPUSH
46868: PPUSH
46869: PPUSH
// _x := ( x1 + x2 ) div 2 ;
46870: LD_ADDR_VAR 0 6
46874: PUSH
46875: LD_VAR 0 1
46879: PUSH
46880: LD_VAR 0 3
46884: PLUS
46885: PUSH
46886: LD_INT 2
46888: DIV
46889: ST_TO_ADDR
// if _x < 0 then
46890: LD_VAR 0 6
46894: PUSH
46895: LD_INT 0
46897: LESS
46898: IFFALSE 46915
// _x := _x * - 1 ;
46900: LD_ADDR_VAR 0 6
46904: PUSH
46905: LD_VAR 0 6
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: MUL
46914: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
46915: LD_ADDR_VAR 0 7
46919: PUSH
46920: LD_VAR 0 2
46924: PUSH
46925: LD_VAR 0 4
46929: PLUS
46930: PUSH
46931: LD_INT 2
46933: DIV
46934: ST_TO_ADDR
// if _y < 0 then
46935: LD_VAR 0 7
46939: PUSH
46940: LD_INT 0
46942: LESS
46943: IFFALSE 46960
// _y := _y * - 1 ;
46945: LD_ADDR_VAR 0 7
46949: PUSH
46950: LD_VAR 0 7
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: MUL
46959: ST_TO_ADDR
// result := [ _x , _y ] ;
46960: LD_ADDR_VAR 0 5
46964: PUSH
46965: LD_VAR 0 6
46969: PUSH
46970: LD_VAR 0 7
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: ST_TO_ADDR
// end ;
46979: LD_VAR 0 5
46983: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
46984: LD_INT 0
46986: PPUSH
46987: PPUSH
46988: PPUSH
46989: PPUSH
// task := GetTaskList ( unit ) ;
46990: LD_ADDR_VAR 0 7
46994: PUSH
46995: LD_VAR 0 1
46999: PPUSH
47000: CALL_OW 437
47004: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47005: LD_VAR 0 7
47009: NOT
47010: PUSH
47011: LD_VAR 0 1
47015: PPUSH
47016: LD_VAR 0 2
47020: PPUSH
47021: CALL_OW 308
47025: NOT
47026: AND
47027: IFFALSE 47031
// exit ;
47029: GO 47149
// if IsInArea ( unit , area ) then
47031: LD_VAR 0 1
47035: PPUSH
47036: LD_VAR 0 2
47040: PPUSH
47041: CALL_OW 308
47045: IFFALSE 47063
// begin ComMoveToArea ( unit , goAway ) ;
47047: LD_VAR 0 1
47051: PPUSH
47052: LD_VAR 0 3
47056: PPUSH
47057: CALL_OW 113
// exit ;
47061: GO 47149
// end ; if task [ 1 ] [ 1 ] <> M then
47063: LD_VAR 0 7
47067: PUSH
47068: LD_INT 1
47070: ARRAY
47071: PUSH
47072: LD_INT 1
47074: ARRAY
47075: PUSH
47076: LD_STRING M
47078: NONEQUAL
47079: IFFALSE 47083
// exit ;
47081: GO 47149
// x := task [ 1 ] [ 2 ] ;
47083: LD_ADDR_VAR 0 5
47087: PUSH
47088: LD_VAR 0 7
47092: PUSH
47093: LD_INT 1
47095: ARRAY
47096: PUSH
47097: LD_INT 2
47099: ARRAY
47100: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47101: LD_ADDR_VAR 0 6
47105: PUSH
47106: LD_VAR 0 7
47110: PUSH
47111: LD_INT 1
47113: ARRAY
47114: PUSH
47115: LD_INT 3
47117: ARRAY
47118: ST_TO_ADDR
// if InArea ( x , y , area ) then
47119: LD_VAR 0 5
47123: PPUSH
47124: LD_VAR 0 6
47128: PPUSH
47129: LD_VAR 0 2
47133: PPUSH
47134: CALL_OW 309
47138: IFFALSE 47149
// ComStop ( unit ) ;
47140: LD_VAR 0 1
47144: PPUSH
47145: CALL_OW 141
// end ;
47149: LD_VAR 0 4
47153: RET
// export function Abs ( value ) ; begin
47154: LD_INT 0
47156: PPUSH
// result := value ;
47157: LD_ADDR_VAR 0 2
47161: PUSH
47162: LD_VAR 0 1
47166: ST_TO_ADDR
// if value < 0 then
47167: LD_VAR 0 1
47171: PUSH
47172: LD_INT 0
47174: LESS
47175: IFFALSE 47192
// result := value * - 1 ;
47177: LD_ADDR_VAR 0 2
47181: PUSH
47182: LD_VAR 0 1
47186: PUSH
47187: LD_INT 1
47189: NEG
47190: MUL
47191: ST_TO_ADDR
// end ;
47192: LD_VAR 0 2
47196: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47197: LD_INT 0
47199: PPUSH
47200: PPUSH
47201: PPUSH
47202: PPUSH
47203: PPUSH
47204: PPUSH
47205: PPUSH
47206: PPUSH
// if not unit or not building then
47207: LD_VAR 0 1
47211: NOT
47212: PUSH
47213: LD_VAR 0 2
47217: NOT
47218: OR
47219: IFFALSE 47223
// exit ;
47221: GO 47449
// x := GetX ( building ) ;
47223: LD_ADDR_VAR 0 4
47227: PUSH
47228: LD_VAR 0 2
47232: PPUSH
47233: CALL_OW 250
47237: ST_TO_ADDR
// y := GetY ( building ) ;
47238: LD_ADDR_VAR 0 6
47242: PUSH
47243: LD_VAR 0 2
47247: PPUSH
47248: CALL_OW 251
47252: ST_TO_ADDR
// d := GetDir ( building ) ;
47253: LD_ADDR_VAR 0 8
47257: PUSH
47258: LD_VAR 0 2
47262: PPUSH
47263: CALL_OW 254
47267: ST_TO_ADDR
// r := 4 ;
47268: LD_ADDR_VAR 0 9
47272: PUSH
47273: LD_INT 4
47275: ST_TO_ADDR
// for i := 1 to 5 do
47276: LD_ADDR_VAR 0 10
47280: PUSH
47281: DOUBLE
47282: LD_INT 1
47284: DEC
47285: ST_TO_ADDR
47286: LD_INT 5
47288: PUSH
47289: FOR_TO
47290: IFFALSE 47447
// begin _x := ShiftX ( x , d , r + i ) ;
47292: LD_ADDR_VAR 0 5
47296: PUSH
47297: LD_VAR 0 4
47301: PPUSH
47302: LD_VAR 0 8
47306: PPUSH
47307: LD_VAR 0 9
47311: PUSH
47312: LD_VAR 0 10
47316: PLUS
47317: PPUSH
47318: CALL_OW 272
47322: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47323: LD_ADDR_VAR 0 7
47327: PUSH
47328: LD_VAR 0 6
47332: PPUSH
47333: LD_VAR 0 8
47337: PPUSH
47338: LD_VAR 0 9
47342: PUSH
47343: LD_VAR 0 10
47347: PLUS
47348: PPUSH
47349: CALL_OW 273
47353: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47354: LD_VAR 0 5
47358: PPUSH
47359: LD_VAR 0 7
47363: PPUSH
47364: CALL_OW 488
47368: PUSH
47369: LD_VAR 0 5
47373: PPUSH
47374: LD_VAR 0 7
47378: PPUSH
47379: CALL_OW 428
47383: PPUSH
47384: CALL_OW 247
47388: PUSH
47389: LD_INT 3
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: IN
47399: NOT
47400: AND
47401: IFFALSE 47445
// begin ComMoveXY ( unit , _x , _y ) ;
47403: LD_VAR 0 1
47407: PPUSH
47408: LD_VAR 0 5
47412: PPUSH
47413: LD_VAR 0 7
47417: PPUSH
47418: CALL_OW 111
// result := [ _x , _y ] ;
47422: LD_ADDR_VAR 0 3
47426: PUSH
47427: LD_VAR 0 5
47431: PUSH
47432: LD_VAR 0 7
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: ST_TO_ADDR
// exit ;
47441: POP
47442: POP
47443: GO 47449
// end ; end ;
47445: GO 47289
47447: POP
47448: POP
// end ;
47449: LD_VAR 0 3
47453: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47454: LD_INT 0
47456: PPUSH
47457: PPUSH
47458: PPUSH
// result := 0 ;
47459: LD_ADDR_VAR 0 3
47463: PUSH
47464: LD_INT 0
47466: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47467: LD_VAR 0 1
47471: PUSH
47472: LD_INT 0
47474: LESS
47475: PUSH
47476: LD_VAR 0 1
47480: PUSH
47481: LD_INT 8
47483: GREATER
47484: OR
47485: PUSH
47486: LD_VAR 0 2
47490: PUSH
47491: LD_INT 0
47493: LESS
47494: OR
47495: PUSH
47496: LD_VAR 0 2
47500: PUSH
47501: LD_INT 8
47503: GREATER
47504: OR
47505: IFFALSE 47509
// exit ;
47507: GO 47584
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47509: LD_ADDR_VAR 0 4
47513: PUSH
47514: LD_INT 22
47516: PUSH
47517: LD_VAR 0 2
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PPUSH
47526: CALL_OW 69
47530: PUSH
47531: FOR_IN
47532: IFFALSE 47582
// begin un := UnitShoot ( i ) ;
47534: LD_ADDR_VAR 0 5
47538: PUSH
47539: LD_VAR 0 4
47543: PPUSH
47544: CALL_OW 504
47548: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47549: LD_VAR 0 5
47553: PPUSH
47554: CALL_OW 255
47558: PUSH
47559: LD_VAR 0 1
47563: EQUAL
47564: IFFALSE 47580
// begin result := un ;
47566: LD_ADDR_VAR 0 3
47570: PUSH
47571: LD_VAR 0 5
47575: ST_TO_ADDR
// exit ;
47576: POP
47577: POP
47578: GO 47584
// end ; end ;
47580: GO 47531
47582: POP
47583: POP
// end ;
47584: LD_VAR 0 3
47588: RET
// export function GetCargoBay ( units ) ; begin
47589: LD_INT 0
47591: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47592: LD_ADDR_VAR 0 2
47596: PUSH
47597: LD_VAR 0 1
47601: PPUSH
47602: LD_INT 2
47604: PUSH
47605: LD_INT 34
47607: PUSH
47608: LD_INT 12
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 34
47617: PUSH
47618: LD_INT 51
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 34
47627: PUSH
47628: LD_INT 32
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 34
47637: PUSH
47638: LD_INT 89
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: PPUSH
47652: CALL_OW 72
47656: ST_TO_ADDR
// end ;
47657: LD_VAR 0 2
47661: RET
// export function Negate ( value ) ; begin
47662: LD_INT 0
47664: PPUSH
// result := not value ;
47665: LD_ADDR_VAR 0 2
47669: PUSH
47670: LD_VAR 0 1
47674: NOT
47675: ST_TO_ADDR
// end ;
47676: LD_VAR 0 2
47680: RET
// export function Inc ( value ) ; begin
47681: LD_INT 0
47683: PPUSH
// result := value + 1 ;
47684: LD_ADDR_VAR 0 2
47688: PUSH
47689: LD_VAR 0 1
47693: PUSH
47694: LD_INT 1
47696: PLUS
47697: ST_TO_ADDR
// end ;
47698: LD_VAR 0 2
47702: RET
// export function Dec ( value ) ; begin
47703: LD_INT 0
47705: PPUSH
// result := value - 1 ;
47706: LD_ADDR_VAR 0 2
47710: PUSH
47711: LD_VAR 0 1
47715: PUSH
47716: LD_INT 1
47718: MINUS
47719: ST_TO_ADDR
// end ;
47720: LD_VAR 0 2
47724: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
47725: LD_INT 0
47727: PPUSH
47728: PPUSH
47729: PPUSH
47730: PPUSH
47731: PPUSH
47732: PPUSH
47733: PPUSH
47734: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
47735: LD_VAR 0 1
47739: PPUSH
47740: LD_VAR 0 2
47744: PPUSH
47745: CALL_OW 488
47749: NOT
47750: PUSH
47751: LD_VAR 0 3
47755: PPUSH
47756: LD_VAR 0 4
47760: PPUSH
47761: CALL_OW 488
47765: NOT
47766: OR
47767: IFFALSE 47780
// begin result := - 1 ;
47769: LD_ADDR_VAR 0 5
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: ST_TO_ADDR
// exit ;
47778: GO 48015
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
47780: LD_ADDR_VAR 0 12
47784: PUSH
47785: LD_VAR 0 1
47789: PPUSH
47790: LD_VAR 0 2
47794: PPUSH
47795: LD_VAR 0 3
47799: PPUSH
47800: LD_VAR 0 4
47804: PPUSH
47805: CALL 46865 0 4
47809: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
47810: LD_ADDR_VAR 0 11
47814: PUSH
47815: LD_VAR 0 1
47819: PPUSH
47820: LD_VAR 0 2
47824: PPUSH
47825: LD_VAR 0 12
47829: PUSH
47830: LD_INT 1
47832: ARRAY
47833: PPUSH
47834: LD_VAR 0 12
47838: PUSH
47839: LD_INT 2
47841: ARRAY
47842: PPUSH
47843: CALL_OW 298
47847: ST_TO_ADDR
// distance := 9999 ;
47848: LD_ADDR_VAR 0 10
47852: PUSH
47853: LD_INT 9999
47855: ST_TO_ADDR
// for i := 0 to 5 do
47856: LD_ADDR_VAR 0 6
47860: PUSH
47861: DOUBLE
47862: LD_INT 0
47864: DEC
47865: ST_TO_ADDR
47866: LD_INT 5
47868: PUSH
47869: FOR_TO
47870: IFFALSE 48013
// begin _x := ShiftX ( x1 , i , centerDist ) ;
47872: LD_ADDR_VAR 0 7
47876: PUSH
47877: LD_VAR 0 1
47881: PPUSH
47882: LD_VAR 0 6
47886: PPUSH
47887: LD_VAR 0 11
47891: PPUSH
47892: CALL_OW 272
47896: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
47897: LD_ADDR_VAR 0 8
47901: PUSH
47902: LD_VAR 0 2
47906: PPUSH
47907: LD_VAR 0 6
47911: PPUSH
47912: LD_VAR 0 11
47916: PPUSH
47917: CALL_OW 273
47921: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47922: LD_VAR 0 7
47926: PPUSH
47927: LD_VAR 0 8
47931: PPUSH
47932: CALL_OW 488
47936: NOT
47937: IFFALSE 47941
// continue ;
47939: GO 47869
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
47941: LD_ADDR_VAR 0 9
47945: PUSH
47946: LD_VAR 0 12
47950: PUSH
47951: LD_INT 1
47953: ARRAY
47954: PPUSH
47955: LD_VAR 0 12
47959: PUSH
47960: LD_INT 2
47962: ARRAY
47963: PPUSH
47964: LD_VAR 0 7
47968: PPUSH
47969: LD_VAR 0 8
47973: PPUSH
47974: CALL_OW 298
47978: ST_TO_ADDR
// if tmp < distance then
47979: LD_VAR 0 9
47983: PUSH
47984: LD_VAR 0 10
47988: LESS
47989: IFFALSE 48011
// begin result := i ;
47991: LD_ADDR_VAR 0 5
47995: PUSH
47996: LD_VAR 0 6
48000: ST_TO_ADDR
// distance := tmp ;
48001: LD_ADDR_VAR 0 10
48005: PUSH
48006: LD_VAR 0 9
48010: ST_TO_ADDR
// end ; end ;
48011: GO 47869
48013: POP
48014: POP
// end ;
48015: LD_VAR 0 5
48019: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48020: LD_INT 0
48022: PPUSH
48023: PPUSH
// if not driver or not IsInUnit ( driver ) then
48024: LD_VAR 0 1
48028: NOT
48029: PUSH
48030: LD_VAR 0 1
48034: PPUSH
48035: CALL_OW 310
48039: NOT
48040: OR
48041: IFFALSE 48045
// exit ;
48043: GO 48135
// vehicle := IsInUnit ( driver ) ;
48045: LD_ADDR_VAR 0 3
48049: PUSH
48050: LD_VAR 0 1
48054: PPUSH
48055: CALL_OW 310
48059: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48060: LD_VAR 0 1
48064: PPUSH
48065: LD_STRING \
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: PUSH
48095: LD_STRING E
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_VAR 0 3
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PPUSH
48131: CALL_OW 446
// end ;
48135: LD_VAR 0 2
48139: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48140: LD_INT 0
48142: PPUSH
48143: PPUSH
// if not driver or not IsInUnit ( driver ) then
48144: LD_VAR 0 1
48148: NOT
48149: PUSH
48150: LD_VAR 0 1
48154: PPUSH
48155: CALL_OW 310
48159: NOT
48160: OR
48161: IFFALSE 48165
// exit ;
48163: GO 48255
// vehicle := IsInUnit ( driver ) ;
48165: LD_ADDR_VAR 0 3
48169: PUSH
48170: LD_VAR 0 1
48174: PPUSH
48175: CALL_OW 310
48179: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48180: LD_VAR 0 1
48184: PPUSH
48185: LD_STRING \
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: PUSH
48215: LD_STRING E
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_VAR 0 3
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PPUSH
48251: CALL_OW 447
// end ;
48255: LD_VAR 0 2
48259: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48260: LD_INT 0
48262: PPUSH
48263: PPUSH
48264: PPUSH
// tmp := [ ] ;
48265: LD_ADDR_VAR 0 5
48269: PUSH
48270: EMPTY
48271: ST_TO_ADDR
// for i in units do
48272: LD_ADDR_VAR 0 4
48276: PUSH
48277: LD_VAR 0 1
48281: PUSH
48282: FOR_IN
48283: IFFALSE 48321
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48285: LD_ADDR_VAR 0 5
48289: PUSH
48290: LD_VAR 0 5
48294: PPUSH
48295: LD_VAR 0 5
48299: PUSH
48300: LD_INT 1
48302: PLUS
48303: PPUSH
48304: LD_VAR 0 4
48308: PPUSH
48309: CALL_OW 256
48313: PPUSH
48314: CALL_OW 2
48318: ST_TO_ADDR
48319: GO 48282
48321: POP
48322: POP
// if not tmp then
48323: LD_VAR 0 5
48327: NOT
48328: IFFALSE 48332
// exit ;
48330: GO 48380
// if asc then
48332: LD_VAR 0 2
48336: IFFALSE 48360
// result := SortListByListAsc ( units , tmp ) else
48338: LD_ADDR_VAR 0 3
48342: PUSH
48343: LD_VAR 0 1
48347: PPUSH
48348: LD_VAR 0 5
48352: PPUSH
48353: CALL_OW 76
48357: ST_TO_ADDR
48358: GO 48380
// result := SortListByListDesc ( units , tmp ) ;
48360: LD_ADDR_VAR 0 3
48364: PUSH
48365: LD_VAR 0 1
48369: PPUSH
48370: LD_VAR 0 5
48374: PPUSH
48375: CALL_OW 77
48379: ST_TO_ADDR
// end ;
48380: LD_VAR 0 3
48384: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48385: LD_INT 0
48387: PPUSH
48388: PPUSH
// task := GetTaskList ( mech ) ;
48389: LD_ADDR_VAR 0 4
48393: PUSH
48394: LD_VAR 0 1
48398: PPUSH
48399: CALL_OW 437
48403: ST_TO_ADDR
// if not task then
48404: LD_VAR 0 4
48408: NOT
48409: IFFALSE 48413
// exit ;
48411: GO 48455
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48413: LD_ADDR_VAR 0 3
48417: PUSH
48418: LD_VAR 0 4
48422: PUSH
48423: LD_INT 1
48425: ARRAY
48426: PUSH
48427: LD_INT 1
48429: ARRAY
48430: PUSH
48431: LD_STRING r
48433: EQUAL
48434: PUSH
48435: LD_VAR 0 4
48439: PUSH
48440: LD_INT 1
48442: ARRAY
48443: PUSH
48444: LD_INT 4
48446: ARRAY
48447: PUSH
48448: LD_VAR 0 2
48452: EQUAL
48453: AND
48454: ST_TO_ADDR
// end ;
48455: LD_VAR 0 3
48459: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48460: LD_INT 0
48462: PPUSH
// SetDir ( unit , d ) ;
48463: LD_VAR 0 1
48467: PPUSH
48468: LD_VAR 0 4
48472: PPUSH
48473: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48477: LD_VAR 0 1
48481: PPUSH
48482: LD_VAR 0 2
48486: PPUSH
48487: LD_VAR 0 3
48491: PPUSH
48492: LD_VAR 0 5
48496: PPUSH
48497: CALL_OW 48
// end ;
48501: LD_VAR 0 6
48505: RET
// export function ToNaturalNumber ( number ) ; begin
48506: LD_INT 0
48508: PPUSH
// result := number div 1 ;
48509: LD_ADDR_VAR 0 2
48513: PUSH
48514: LD_VAR 0 1
48518: PUSH
48519: LD_INT 1
48521: DIV
48522: ST_TO_ADDR
// if number < 0 then
48523: LD_VAR 0 1
48527: PUSH
48528: LD_INT 0
48530: LESS
48531: IFFALSE 48541
// result := 0 ;
48533: LD_ADDR_VAR 0 2
48537: PUSH
48538: LD_INT 0
48540: ST_TO_ADDR
// end ;
48541: LD_VAR 0 2
48545: RET
// export function SortByClass ( units , class ) ; var un ; begin
48546: LD_INT 0
48548: PPUSH
48549: PPUSH
// if not units or not class then
48550: LD_VAR 0 1
48554: NOT
48555: PUSH
48556: LD_VAR 0 2
48560: NOT
48561: OR
48562: IFFALSE 48566
// exit ;
48564: GO 48661
// result := [ ] ;
48566: LD_ADDR_VAR 0 3
48570: PUSH
48571: EMPTY
48572: ST_TO_ADDR
// for un in units do
48573: LD_ADDR_VAR 0 4
48577: PUSH
48578: LD_VAR 0 1
48582: PUSH
48583: FOR_IN
48584: IFFALSE 48659
// if GetClass ( un ) = class then
48586: LD_VAR 0 4
48590: PPUSH
48591: CALL_OW 257
48595: PUSH
48596: LD_VAR 0 2
48600: EQUAL
48601: IFFALSE 48628
// result := Insert ( result , 1 , un ) else
48603: LD_ADDR_VAR 0 3
48607: PUSH
48608: LD_VAR 0 3
48612: PPUSH
48613: LD_INT 1
48615: PPUSH
48616: LD_VAR 0 4
48620: PPUSH
48621: CALL_OW 2
48625: ST_TO_ADDR
48626: GO 48657
// result := Replace ( result , result + 1 , un ) ;
48628: LD_ADDR_VAR 0 3
48632: PUSH
48633: LD_VAR 0 3
48637: PPUSH
48638: LD_VAR 0 3
48642: PUSH
48643: LD_INT 1
48645: PLUS
48646: PPUSH
48647: LD_VAR 0 4
48651: PPUSH
48652: CALL_OW 1
48656: ST_TO_ADDR
48657: GO 48583
48659: POP
48660: POP
// end ;
48661: LD_VAR 0 3
48665: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
48666: LD_INT 0
48668: PPUSH
48669: PPUSH
48670: PPUSH
48671: PPUSH
48672: PPUSH
48673: PPUSH
48674: PPUSH
// result := [ ] ;
48675: LD_ADDR_VAR 0 4
48679: PUSH
48680: EMPTY
48681: ST_TO_ADDR
// if x - r < 0 then
48682: LD_VAR 0 1
48686: PUSH
48687: LD_VAR 0 3
48691: MINUS
48692: PUSH
48693: LD_INT 0
48695: LESS
48696: IFFALSE 48708
// min_x := 0 else
48698: LD_ADDR_VAR 0 8
48702: PUSH
48703: LD_INT 0
48705: ST_TO_ADDR
48706: GO 48724
// min_x := x - r ;
48708: LD_ADDR_VAR 0 8
48712: PUSH
48713: LD_VAR 0 1
48717: PUSH
48718: LD_VAR 0 3
48722: MINUS
48723: ST_TO_ADDR
// if y - r < 0 then
48724: LD_VAR 0 2
48728: PUSH
48729: LD_VAR 0 3
48733: MINUS
48734: PUSH
48735: LD_INT 0
48737: LESS
48738: IFFALSE 48750
// min_y := 0 else
48740: LD_ADDR_VAR 0 7
48744: PUSH
48745: LD_INT 0
48747: ST_TO_ADDR
48748: GO 48766
// min_y := y - r ;
48750: LD_ADDR_VAR 0 7
48754: PUSH
48755: LD_VAR 0 2
48759: PUSH
48760: LD_VAR 0 3
48764: MINUS
48765: ST_TO_ADDR
// max_x := x + r ;
48766: LD_ADDR_VAR 0 9
48770: PUSH
48771: LD_VAR 0 1
48775: PUSH
48776: LD_VAR 0 3
48780: PLUS
48781: ST_TO_ADDR
// max_y := y + r ;
48782: LD_ADDR_VAR 0 10
48786: PUSH
48787: LD_VAR 0 2
48791: PUSH
48792: LD_VAR 0 3
48796: PLUS
48797: ST_TO_ADDR
// for _x = min_x to max_x do
48798: LD_ADDR_VAR 0 5
48802: PUSH
48803: DOUBLE
48804: LD_VAR 0 8
48808: DEC
48809: ST_TO_ADDR
48810: LD_VAR 0 9
48814: PUSH
48815: FOR_TO
48816: IFFALSE 48917
// for _y = min_y to max_y do
48818: LD_ADDR_VAR 0 6
48822: PUSH
48823: DOUBLE
48824: LD_VAR 0 7
48828: DEC
48829: ST_TO_ADDR
48830: LD_VAR 0 10
48834: PUSH
48835: FOR_TO
48836: IFFALSE 48913
// begin if not ValidHex ( _x , _y ) then
48838: LD_VAR 0 5
48842: PPUSH
48843: LD_VAR 0 6
48847: PPUSH
48848: CALL_OW 488
48852: NOT
48853: IFFALSE 48857
// continue ;
48855: GO 48835
// if GetResourceTypeXY ( _x , _y ) then
48857: LD_VAR 0 5
48861: PPUSH
48862: LD_VAR 0 6
48866: PPUSH
48867: CALL_OW 283
48871: IFFALSE 48911
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
48873: LD_ADDR_VAR 0 4
48877: PUSH
48878: LD_VAR 0 4
48882: PPUSH
48883: LD_VAR 0 4
48887: PUSH
48888: LD_INT 1
48890: PLUS
48891: PPUSH
48892: LD_VAR 0 5
48896: PUSH
48897: LD_VAR 0 6
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PPUSH
48906: CALL_OW 1
48910: ST_TO_ADDR
// end ;
48911: GO 48835
48913: POP
48914: POP
48915: GO 48815
48917: POP
48918: POP
// end ;
48919: LD_VAR 0 4
48923: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
48924: LD_INT 0
48926: PPUSH
48927: PPUSH
48928: PPUSH
48929: PPUSH
48930: PPUSH
48931: PPUSH
48932: PPUSH
48933: PPUSH
// if not units then
48934: LD_VAR 0 1
48938: NOT
48939: IFFALSE 48943
// exit ;
48941: GO 49467
// result := UnitFilter ( units , [ f_ok ] ) ;
48943: LD_ADDR_VAR 0 3
48947: PUSH
48948: LD_VAR 0 1
48952: PPUSH
48953: LD_INT 50
48955: PUSH
48956: EMPTY
48957: LIST
48958: PPUSH
48959: CALL_OW 72
48963: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
48964: LD_ADDR_VAR 0 8
48968: PUSH
48969: LD_VAR 0 1
48973: PUSH
48974: LD_INT 1
48976: ARRAY
48977: PPUSH
48978: CALL_OW 255
48982: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
48983: LD_ADDR_VAR 0 10
48987: PUSH
48988: LD_INT 29
48990: PUSH
48991: LD_INT 91
48993: PUSH
48994: LD_INT 49
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: LIST
49001: ST_TO_ADDR
// if not result then
49002: LD_VAR 0 3
49006: NOT
49007: IFFALSE 49011
// exit ;
49009: GO 49467
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49011: LD_ADDR_VAR 0 5
49015: PUSH
49016: LD_INT 81
49018: PUSH
49019: LD_VAR 0 8
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PPUSH
49028: CALL_OW 69
49032: ST_TO_ADDR
// for i in result do
49033: LD_ADDR_VAR 0 4
49037: PUSH
49038: LD_VAR 0 3
49042: PUSH
49043: FOR_IN
49044: IFFALSE 49465
// begin tag := GetTag ( i ) + 1 ;
49046: LD_ADDR_VAR 0 9
49050: PUSH
49051: LD_VAR 0 4
49055: PPUSH
49056: CALL_OW 110
49060: PUSH
49061: LD_INT 1
49063: PLUS
49064: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
49065: LD_ADDR_VAR 0 7
49069: PUSH
49070: LD_VAR 0 4
49074: PPUSH
49075: CALL_OW 250
49079: PPUSH
49080: LD_VAR 0 4
49084: PPUSH
49085: CALL_OW 251
49089: PPUSH
49090: LD_INT 6
49092: PPUSH
49093: CALL 48666 0 3
49097: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
49098: LD_VAR 0 4
49102: PPUSH
49103: CALL_OW 247
49107: PUSH
49108: LD_INT 2
49110: EQUAL
49111: PUSH
49112: LD_VAR 0 7
49116: AND
49117: PUSH
49118: LD_VAR 0 4
49122: PPUSH
49123: CALL_OW 264
49127: PUSH
49128: LD_VAR 0 10
49132: IN
49133: NOT
49134: AND
49135: IFFALSE 49174
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49137: LD_VAR 0 4
49141: PPUSH
49142: LD_VAR 0 7
49146: PUSH
49147: LD_INT 1
49149: ARRAY
49150: PUSH
49151: LD_INT 1
49153: ARRAY
49154: PPUSH
49155: LD_VAR 0 7
49159: PUSH
49160: LD_INT 1
49162: ARRAY
49163: PUSH
49164: LD_INT 2
49166: ARRAY
49167: PPUSH
49168: CALL_OW 116
49172: GO 49463
// if path > tag then
49174: LD_VAR 0 2
49178: PUSH
49179: LD_VAR 0 9
49183: GREATER
49184: IFFALSE 49392
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49186: LD_ADDR_VAR 0 6
49190: PUSH
49191: LD_VAR 0 5
49195: PPUSH
49196: LD_INT 91
49198: PUSH
49199: LD_VAR 0 4
49203: PUSH
49204: LD_INT 8
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: LIST
49211: PPUSH
49212: CALL_OW 72
49216: ST_TO_ADDR
// if nearEnemy then
49217: LD_VAR 0 6
49221: IFFALSE 49290
// begin if GetWeapon ( i ) = ru_time_lapser then
49223: LD_VAR 0 4
49227: PPUSH
49228: CALL_OW 264
49232: PUSH
49233: LD_INT 49
49235: EQUAL
49236: IFFALSE 49264
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49238: LD_VAR 0 4
49242: PPUSH
49243: LD_VAR 0 6
49247: PPUSH
49248: LD_VAR 0 4
49252: PPUSH
49253: CALL_OW 74
49257: PPUSH
49258: CALL_OW 112
49262: GO 49288
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49264: LD_VAR 0 4
49268: PPUSH
49269: LD_VAR 0 6
49273: PPUSH
49274: LD_VAR 0 4
49278: PPUSH
49279: CALL_OW 74
49283: PPUSH
49284: CALL 50392 0 2
// end else
49288: GO 49390
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49290: LD_VAR 0 4
49294: PPUSH
49295: LD_VAR 0 2
49299: PUSH
49300: LD_VAR 0 9
49304: ARRAY
49305: PUSH
49306: LD_INT 1
49308: ARRAY
49309: PPUSH
49310: LD_VAR 0 2
49314: PUSH
49315: LD_VAR 0 9
49319: ARRAY
49320: PUSH
49321: LD_INT 2
49323: ARRAY
49324: PPUSH
49325: CALL_OW 297
49329: PUSH
49330: LD_INT 6
49332: GREATER
49333: IFFALSE 49376
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49335: LD_VAR 0 4
49339: PPUSH
49340: LD_VAR 0 2
49344: PUSH
49345: LD_VAR 0 9
49349: ARRAY
49350: PUSH
49351: LD_INT 1
49353: ARRAY
49354: PPUSH
49355: LD_VAR 0 2
49359: PUSH
49360: LD_VAR 0 9
49364: ARRAY
49365: PUSH
49366: LD_INT 2
49368: ARRAY
49369: PPUSH
49370: CALL_OW 114
49374: GO 49390
// SetTag ( i , tag ) ;
49376: LD_VAR 0 4
49380: PPUSH
49381: LD_VAR 0 9
49385: PPUSH
49386: CALL_OW 109
// end else
49390: GO 49463
// if enemy then
49392: LD_VAR 0 5
49396: IFFALSE 49463
// begin if GetWeapon ( i ) = ru_time_lapser then
49398: LD_VAR 0 4
49402: PPUSH
49403: CALL_OW 264
49407: PUSH
49408: LD_INT 49
49410: EQUAL
49411: IFFALSE 49439
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49413: LD_VAR 0 4
49417: PPUSH
49418: LD_VAR 0 5
49422: PPUSH
49423: LD_VAR 0 4
49427: PPUSH
49428: CALL_OW 74
49432: PPUSH
49433: CALL_OW 112
49437: GO 49463
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49439: LD_VAR 0 4
49443: PPUSH
49444: LD_VAR 0 5
49448: PPUSH
49449: LD_VAR 0 4
49453: PPUSH
49454: CALL_OW 74
49458: PPUSH
49459: CALL 50392 0 2
// end ; end ;
49463: GO 49043
49465: POP
49466: POP
// end ;
49467: LD_VAR 0 3
49471: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49472: LD_INT 0
49474: PPUSH
49475: PPUSH
49476: PPUSH
// if not unit or IsInUnit ( unit ) then
49477: LD_VAR 0 1
49481: NOT
49482: PUSH
49483: LD_VAR 0 1
49487: PPUSH
49488: CALL_OW 310
49492: OR
49493: IFFALSE 49497
// exit ;
49495: GO 49588
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49497: LD_ADDR_VAR 0 4
49501: PUSH
49502: LD_VAR 0 1
49506: PPUSH
49507: CALL_OW 250
49511: PPUSH
49512: LD_VAR 0 2
49516: PPUSH
49517: LD_INT 1
49519: PPUSH
49520: CALL_OW 272
49524: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49525: LD_ADDR_VAR 0 5
49529: PUSH
49530: LD_VAR 0 1
49534: PPUSH
49535: CALL_OW 251
49539: PPUSH
49540: LD_VAR 0 2
49544: PPUSH
49545: LD_INT 1
49547: PPUSH
49548: CALL_OW 273
49552: ST_TO_ADDR
// if ValidHex ( x , y ) then
49553: LD_VAR 0 4
49557: PPUSH
49558: LD_VAR 0 5
49562: PPUSH
49563: CALL_OW 488
49567: IFFALSE 49588
// ComTurnXY ( unit , x , y ) ;
49569: LD_VAR 0 1
49573: PPUSH
49574: LD_VAR 0 4
49578: PPUSH
49579: LD_VAR 0 5
49583: PPUSH
49584: CALL_OW 118
// end ;
49588: LD_VAR 0 3
49592: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49593: LD_INT 0
49595: PPUSH
49596: PPUSH
// result := false ;
49597: LD_ADDR_VAR 0 3
49601: PUSH
49602: LD_INT 0
49604: ST_TO_ADDR
// if not units then
49605: LD_VAR 0 2
49609: NOT
49610: IFFALSE 49614
// exit ;
49612: GO 49659
// for i in units do
49614: LD_ADDR_VAR 0 4
49618: PUSH
49619: LD_VAR 0 2
49623: PUSH
49624: FOR_IN
49625: IFFALSE 49657
// if See ( side , i ) then
49627: LD_VAR 0 1
49631: PPUSH
49632: LD_VAR 0 4
49636: PPUSH
49637: CALL_OW 292
49641: IFFALSE 49655
// begin result := true ;
49643: LD_ADDR_VAR 0 3
49647: PUSH
49648: LD_INT 1
49650: ST_TO_ADDR
// exit ;
49651: POP
49652: POP
49653: GO 49659
// end ;
49655: GO 49624
49657: POP
49658: POP
// end ;
49659: LD_VAR 0 3
49663: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49664: LD_INT 0
49666: PPUSH
49667: PPUSH
49668: PPUSH
49669: PPUSH
// if not unit or not points then
49670: LD_VAR 0 1
49674: NOT
49675: PUSH
49676: LD_VAR 0 2
49680: NOT
49681: OR
49682: IFFALSE 49686
// exit ;
49684: GO 49776
// dist := 99999 ;
49686: LD_ADDR_VAR 0 5
49690: PUSH
49691: LD_INT 99999
49693: ST_TO_ADDR
// for i in points do
49694: LD_ADDR_VAR 0 4
49698: PUSH
49699: LD_VAR 0 2
49703: PUSH
49704: FOR_IN
49705: IFFALSE 49774
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49707: LD_ADDR_VAR 0 6
49711: PUSH
49712: LD_VAR 0 1
49716: PPUSH
49717: LD_VAR 0 4
49721: PUSH
49722: LD_INT 1
49724: ARRAY
49725: PPUSH
49726: LD_VAR 0 4
49730: PUSH
49731: LD_INT 2
49733: ARRAY
49734: PPUSH
49735: CALL_OW 297
49739: ST_TO_ADDR
// if tmpDist < dist then
49740: LD_VAR 0 6
49744: PUSH
49745: LD_VAR 0 5
49749: LESS
49750: IFFALSE 49772
// begin result := i ;
49752: LD_ADDR_VAR 0 3
49756: PUSH
49757: LD_VAR 0 4
49761: ST_TO_ADDR
// dist := tmpDist ;
49762: LD_ADDR_VAR 0 5
49766: PUSH
49767: LD_VAR 0 6
49771: ST_TO_ADDR
// end ; end ;
49772: GO 49704
49774: POP
49775: POP
// end ;
49776: LD_VAR 0 3
49780: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
49781: LD_INT 0
49783: PPUSH
// uc_side := side ;
49784: LD_ADDR_OWVAR 20
49788: PUSH
49789: LD_VAR 0 1
49793: ST_TO_ADDR
// uc_nation := 3 ;
49794: LD_ADDR_OWVAR 21
49798: PUSH
49799: LD_INT 3
49801: ST_TO_ADDR
// vc_chassis := 25 ;
49802: LD_ADDR_OWVAR 37
49806: PUSH
49807: LD_INT 25
49809: ST_TO_ADDR
// vc_engine := engine_siberite ;
49810: LD_ADDR_OWVAR 39
49814: PUSH
49815: LD_INT 3
49817: ST_TO_ADDR
// vc_control := control_computer ;
49818: LD_ADDR_OWVAR 38
49822: PUSH
49823: LD_INT 3
49825: ST_TO_ADDR
// vc_weapon := 59 ;
49826: LD_ADDR_OWVAR 40
49830: PUSH
49831: LD_INT 59
49833: ST_TO_ADDR
// result := CreateVehicle ;
49834: LD_ADDR_VAR 0 5
49838: PUSH
49839: CALL_OW 45
49843: ST_TO_ADDR
// SetDir ( result , d ) ;
49844: LD_VAR 0 5
49848: PPUSH
49849: LD_VAR 0 4
49853: PPUSH
49854: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
49858: LD_VAR 0 5
49862: PPUSH
49863: LD_VAR 0 2
49867: PPUSH
49868: LD_VAR 0 3
49872: PPUSH
49873: LD_INT 0
49875: PPUSH
49876: CALL_OW 48
// end ;
49880: LD_VAR 0 5
49884: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
49885: LD_INT 0
49887: PPUSH
49888: PPUSH
49889: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
49890: LD_ADDR_VAR 0 2
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
49913: LD_VAR 0 1
49917: NOT
49918: PUSH
49919: LD_VAR 0 1
49923: PPUSH
49924: CALL_OW 264
49928: PUSH
49929: LD_INT 12
49931: PUSH
49932: LD_INT 51
49934: PUSH
49935: LD_INT 32
49937: PUSH
49938: LD_INT 89
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: IN
49947: NOT
49948: OR
49949: IFFALSE 49953
// exit ;
49951: GO 50051
// for i := 1 to 3 do
49953: LD_ADDR_VAR 0 3
49957: PUSH
49958: DOUBLE
49959: LD_INT 1
49961: DEC
49962: ST_TO_ADDR
49963: LD_INT 3
49965: PUSH
49966: FOR_TO
49967: IFFALSE 50049
// begin tmp := GetCargo ( cargo , i ) ;
49969: LD_ADDR_VAR 0 4
49973: PUSH
49974: LD_VAR 0 1
49978: PPUSH
49979: LD_VAR 0 3
49983: PPUSH
49984: CALL_OW 289
49988: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
49989: LD_ADDR_VAR 0 2
49993: PUSH
49994: LD_VAR 0 2
49998: PPUSH
49999: LD_VAR 0 3
50003: PPUSH
50004: LD_VAR 0 4
50008: PPUSH
50009: CALL_OW 1
50013: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50014: LD_ADDR_VAR 0 2
50018: PUSH
50019: LD_VAR 0 2
50023: PPUSH
50024: LD_INT 4
50026: PPUSH
50027: LD_VAR 0 2
50031: PUSH
50032: LD_INT 4
50034: ARRAY
50035: PUSH
50036: LD_VAR 0 4
50040: PLUS
50041: PPUSH
50042: CALL_OW 1
50046: ST_TO_ADDR
// end ;
50047: GO 49966
50049: POP
50050: POP
// end ;
50051: LD_VAR 0 2
50055: RET
// export function Length ( array ) ; begin
50056: LD_INT 0
50058: PPUSH
// result := array + 0 ;
50059: LD_ADDR_VAR 0 2
50063: PUSH
50064: LD_VAR 0 1
50068: PUSH
50069: LD_INT 0
50071: PLUS
50072: ST_TO_ADDR
// end ;
50073: LD_VAR 0 2
50077: RET
// export function PrepareArray ( array ) ; begin
50078: LD_INT 0
50080: PPUSH
// result := array diff 0 ;
50081: LD_ADDR_VAR 0 2
50085: PUSH
50086: LD_VAR 0 1
50090: PUSH
50091: LD_INT 0
50093: DIFF
50094: ST_TO_ADDR
// if not result [ 1 ] then
50095: LD_VAR 0 2
50099: PUSH
50100: LD_INT 1
50102: ARRAY
50103: NOT
50104: IFFALSE 50124
// result := Delete ( result , 1 ) ;
50106: LD_ADDR_VAR 0 2
50110: PUSH
50111: LD_VAR 0 2
50115: PPUSH
50116: LD_INT 1
50118: PPUSH
50119: CALL_OW 3
50123: ST_TO_ADDR
// end ;
50124: LD_VAR 0 2
50128: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50129: LD_INT 0
50131: PPUSH
50132: PPUSH
50133: PPUSH
50134: PPUSH
// sibRocketRange := 25 ;
50135: LD_ADDR_VAR 0 6
50139: PUSH
50140: LD_INT 25
50142: ST_TO_ADDR
// result := false ;
50143: LD_ADDR_VAR 0 4
50147: PUSH
50148: LD_INT 0
50150: ST_TO_ADDR
// for i := 0 to 5 do
50151: LD_ADDR_VAR 0 5
50155: PUSH
50156: DOUBLE
50157: LD_INT 0
50159: DEC
50160: ST_TO_ADDR
50161: LD_INT 5
50163: PUSH
50164: FOR_TO
50165: IFFALSE 50232
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50167: LD_VAR 0 1
50171: PPUSH
50172: LD_VAR 0 5
50176: PPUSH
50177: LD_VAR 0 6
50181: PPUSH
50182: CALL_OW 272
50186: PPUSH
50187: LD_VAR 0 2
50191: PPUSH
50192: LD_VAR 0 5
50196: PPUSH
50197: LD_VAR 0 6
50201: PPUSH
50202: CALL_OW 273
50206: PPUSH
50207: LD_VAR 0 3
50211: PPUSH
50212: CALL_OW 309
50216: IFFALSE 50230
// begin result := true ;
50218: LD_ADDR_VAR 0 4
50222: PUSH
50223: LD_INT 1
50225: ST_TO_ADDR
// exit ;
50226: POP
50227: POP
50228: GO 50234
// end ;
50230: GO 50164
50232: POP
50233: POP
// end ;
50234: LD_VAR 0 4
50238: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
50239: LD_INT 0
50241: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
50242: LD_VAR 0 1
50246: PPUSH
50247: LD_VAR 0 2
50251: PPUSH
50252: LD_INT 0
50254: PPUSH
50255: LD_INT 0
50257: PPUSH
50258: LD_INT 1
50260: PPUSH
50261: LD_INT 0
50263: PPUSH
50264: CALL_OW 587
// end ;
50268: LD_VAR 0 3
50272: RET
// export function CenterOnNow ( unit ) ; begin
50273: LD_INT 0
50275: PPUSH
// result := IsInUnit ( unit ) ;
50276: LD_ADDR_VAR 0 2
50280: PUSH
50281: LD_VAR 0 1
50285: PPUSH
50286: CALL_OW 310
50290: ST_TO_ADDR
// if not result then
50291: LD_VAR 0 2
50295: NOT
50296: IFFALSE 50308
// result := unit ;
50298: LD_ADDR_VAR 0 2
50302: PUSH
50303: LD_VAR 0 1
50307: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
50308: LD_VAR 0 1
50312: PPUSH
50313: CALL_OW 87
// end ;
50317: LD_VAR 0 2
50321: RET
// export function ComMoveHex ( unit , hex ) ; begin
50322: LD_INT 0
50324: PPUSH
// if not hex then
50325: LD_VAR 0 2
50329: NOT
50330: IFFALSE 50334
// exit ;
50332: GO 50387
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
50334: LD_VAR 0 2
50338: PUSH
50339: LD_INT 1
50341: ARRAY
50342: PPUSH
50343: LD_VAR 0 2
50347: PUSH
50348: LD_INT 2
50350: ARRAY
50351: PPUSH
50352: CALL_OW 428
50356: IFFALSE 50360
// exit ;
50358: GO 50387
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
50360: LD_VAR 0 1
50364: PPUSH
50365: LD_VAR 0 2
50369: PUSH
50370: LD_INT 1
50372: ARRAY
50373: PPUSH
50374: LD_VAR 0 2
50378: PUSH
50379: LD_INT 2
50381: ARRAY
50382: PPUSH
50383: CALL_OW 111
// end ;
50387: LD_VAR 0 3
50391: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
50392: LD_INT 0
50394: PPUSH
50395: PPUSH
50396: PPUSH
// if not unit or not enemy then
50397: LD_VAR 0 1
50401: NOT
50402: PUSH
50403: LD_VAR 0 2
50407: NOT
50408: OR
50409: IFFALSE 50413
// exit ;
50411: GO 50537
// x := GetX ( enemy ) ;
50413: LD_ADDR_VAR 0 4
50417: PUSH
50418: LD_VAR 0 2
50422: PPUSH
50423: CALL_OW 250
50427: ST_TO_ADDR
// y := GetY ( enemy ) ;
50428: LD_ADDR_VAR 0 5
50432: PUSH
50433: LD_VAR 0 2
50437: PPUSH
50438: CALL_OW 251
50442: ST_TO_ADDR
// if ValidHex ( x , y ) then
50443: LD_VAR 0 4
50447: PPUSH
50448: LD_VAR 0 5
50452: PPUSH
50453: CALL_OW 488
50457: IFFALSE 50537
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
50459: LD_VAR 0 2
50463: PPUSH
50464: CALL_OW 247
50468: PUSH
50469: LD_INT 3
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: IN
50479: PUSH
50480: LD_VAR 0 1
50484: PPUSH
50485: CALL_OW 255
50489: PPUSH
50490: LD_VAR 0 2
50494: PPUSH
50495: CALL_OW 292
50499: AND
50500: IFFALSE 50518
// ComAttackUnit ( unit , enemy ) else
50502: LD_VAR 0 1
50506: PPUSH
50507: LD_VAR 0 2
50511: PPUSH
50512: CALL_OW 115
50516: GO 50537
// ComAgressiveMove ( unit , x , y ) ;
50518: LD_VAR 0 1
50522: PPUSH
50523: LD_VAR 0 4
50527: PPUSH
50528: LD_VAR 0 5
50532: PPUSH
50533: CALL_OW 114
// end ;
50537: LD_VAR 0 3
50541: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
50542: LD_INT 0
50544: PPUSH
50545: PPUSH
50546: PPUSH
// list := AreaToList ( area , 0 ) ;
50547: LD_ADDR_VAR 0 5
50551: PUSH
50552: LD_VAR 0 1
50556: PPUSH
50557: LD_INT 0
50559: PPUSH
50560: CALL_OW 517
50564: ST_TO_ADDR
// if not list then
50565: LD_VAR 0 5
50569: NOT
50570: IFFALSE 50574
// exit ;
50572: GO 50704
// if all then
50574: LD_VAR 0 2
50578: IFFALSE 50666
// begin for i := 1 to list [ 1 ] do
50580: LD_ADDR_VAR 0 4
50584: PUSH
50585: DOUBLE
50586: LD_INT 1
50588: DEC
50589: ST_TO_ADDR
50590: LD_VAR 0 5
50594: PUSH
50595: LD_INT 1
50597: ARRAY
50598: PUSH
50599: FOR_TO
50600: IFFALSE 50662
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
50602: LD_ADDR_VAR 0 3
50606: PUSH
50607: LD_VAR 0 3
50611: PPUSH
50612: LD_VAR 0 3
50616: PUSH
50617: LD_INT 1
50619: PLUS
50620: PPUSH
50621: LD_VAR 0 5
50625: PUSH
50626: LD_INT 1
50628: ARRAY
50629: PUSH
50630: LD_VAR 0 4
50634: ARRAY
50635: PUSH
50636: LD_VAR 0 5
50640: PUSH
50641: LD_INT 2
50643: ARRAY
50644: PUSH
50645: LD_VAR 0 4
50649: ARRAY
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PPUSH
50655: CALL_OW 1
50659: ST_TO_ADDR
50660: GO 50599
50662: POP
50663: POP
// exit ;
50664: GO 50704
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
50666: LD_ADDR_VAR 0 3
50670: PUSH
50671: LD_VAR 0 5
50675: PUSH
50676: LD_INT 1
50678: ARRAY
50679: PUSH
50680: LD_INT 1
50682: ARRAY
50683: PUSH
50684: LD_VAR 0 5
50688: PUSH
50689: LD_INT 2
50691: ARRAY
50692: PUSH
50693: LD_INT 1
50695: ARRAY
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: EMPTY
50702: LIST
50703: ST_TO_ADDR
// end ;
50704: LD_VAR 0 3
50708: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
50709: LD_INT 0
50711: PPUSH
50712: PPUSH
// list := AreaToList ( area , 0 ) ;
50713: LD_ADDR_VAR 0 4
50717: PUSH
50718: LD_VAR 0 1
50722: PPUSH
50723: LD_INT 0
50725: PPUSH
50726: CALL_OW 517
50730: ST_TO_ADDR
// if not list then
50731: LD_VAR 0 4
50735: NOT
50736: IFFALSE 50740
// exit ;
50738: GO 50781
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
50740: LD_ADDR_VAR 0 3
50744: PUSH
50745: LD_VAR 0 4
50749: PUSH
50750: LD_INT 1
50752: ARRAY
50753: PUSH
50754: LD_INT 1
50756: ARRAY
50757: PUSH
50758: LD_VAR 0 4
50762: PUSH
50763: LD_INT 2
50765: ARRAY
50766: PUSH
50767: LD_INT 1
50769: ARRAY
50770: PUSH
50771: LD_VAR 0 2
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: LIST
50780: ST_TO_ADDR
// end ;
50781: LD_VAR 0 3
50785: RET
// export function First ( array ) ; begin
50786: LD_INT 0
50788: PPUSH
// if not array then
50789: LD_VAR 0 1
50793: NOT
50794: IFFALSE 50798
// exit ;
50796: GO 50812
// result := array [ 1 ] ;
50798: LD_ADDR_VAR 0 2
50802: PUSH
50803: LD_VAR 0 1
50807: PUSH
50808: LD_INT 1
50810: ARRAY
50811: ST_TO_ADDR
// end ;
50812: LD_VAR 0 2
50816: RET
// export function Last ( array ) ; begin
50817: LD_INT 0
50819: PPUSH
// if not array then
50820: LD_VAR 0 1
50824: NOT
50825: IFFALSE 50829
// exit ;
50827: GO 50845
// result := array [ array ] ;
50829: LD_ADDR_VAR 0 2
50833: PUSH
50834: LD_VAR 0 1
50838: PUSH
50839: LD_VAR 0 1
50843: ARRAY
50844: ST_TO_ADDR
// end ;
50845: LD_VAR 0 2
50849: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
50850: LD_INT 0
50852: PPUSH
50853: PPUSH
// result := [ ] ;
50854: LD_ADDR_VAR 0 5
50858: PUSH
50859: EMPTY
50860: ST_TO_ADDR
// if not array then
50861: LD_VAR 0 1
50865: NOT
50866: IFFALSE 50870
// exit ;
50868: GO 50982
// for i := 1 to array do
50870: LD_ADDR_VAR 0 6
50874: PUSH
50875: DOUBLE
50876: LD_INT 1
50878: DEC
50879: ST_TO_ADDR
50880: LD_VAR 0 1
50884: PUSH
50885: FOR_TO
50886: IFFALSE 50980
// if array [ i ] [ index ] = value then
50888: LD_VAR 0 1
50892: PUSH
50893: LD_VAR 0 6
50897: ARRAY
50898: PUSH
50899: LD_VAR 0 2
50903: ARRAY
50904: PUSH
50905: LD_VAR 0 3
50909: EQUAL
50910: IFFALSE 50978
// begin if indexColumn then
50912: LD_VAR 0 4
50916: IFFALSE 50952
// result := Join ( result , array [ i ] [ indexColumn ] ) else
50918: LD_ADDR_VAR 0 5
50922: PUSH
50923: LD_VAR 0 5
50927: PPUSH
50928: LD_VAR 0 1
50932: PUSH
50933: LD_VAR 0 6
50937: ARRAY
50938: PUSH
50939: LD_VAR 0 4
50943: ARRAY
50944: PPUSH
50945: CALL 46320 0 2
50949: ST_TO_ADDR
50950: GO 50978
// result := Join ( result , array [ i ] ) ;
50952: LD_ADDR_VAR 0 5
50956: PUSH
50957: LD_VAR 0 5
50961: PPUSH
50962: LD_VAR 0 1
50966: PUSH
50967: LD_VAR 0 6
50971: ARRAY
50972: PPUSH
50973: CALL 46320 0 2
50977: ST_TO_ADDR
// end ;
50978: GO 50885
50980: POP
50981: POP
// end ;
50982: LD_VAR 0 5
50986: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
50987: LD_INT 0
50989: PPUSH
50990: PPUSH
50991: PPUSH
// if btype = b_depot then
50992: LD_VAR 0 2
50996: PUSH
50997: LD_INT 0
50999: EQUAL
51000: IFFALSE 51012
// begin result := true ;
51002: LD_ADDR_VAR 0 3
51006: PUSH
51007: LD_INT 1
51009: ST_TO_ADDR
// exit ;
51010: GO 51128
// end ; pom := GetBase ( depot ) ;
51012: LD_ADDR_VAR 0 4
51016: PUSH
51017: LD_VAR 0 1
51021: PPUSH
51022: CALL_OW 274
51026: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51027: LD_ADDR_VAR 0 5
51031: PUSH
51032: LD_VAR 0 2
51036: PPUSH
51037: LD_VAR 0 1
51041: PPUSH
51042: CALL_OW 248
51046: PPUSH
51047: CALL_OW 450
51051: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
51052: LD_ADDR_VAR 0 3
51056: PUSH
51057: LD_VAR 0 4
51061: PPUSH
51062: LD_INT 1
51064: PPUSH
51065: CALL_OW 275
51069: PUSH
51070: LD_VAR 0 5
51074: PUSH
51075: LD_INT 1
51077: ARRAY
51078: GREATEREQUAL
51079: PUSH
51080: LD_VAR 0 4
51084: PPUSH
51085: LD_INT 2
51087: PPUSH
51088: CALL_OW 275
51092: PUSH
51093: LD_VAR 0 5
51097: PUSH
51098: LD_INT 2
51100: ARRAY
51101: GREATEREQUAL
51102: AND
51103: PUSH
51104: LD_VAR 0 4
51108: PPUSH
51109: LD_INT 3
51111: PPUSH
51112: CALL_OW 275
51116: PUSH
51117: LD_VAR 0 5
51121: PUSH
51122: LD_INT 3
51124: ARRAY
51125: GREATEREQUAL
51126: AND
51127: ST_TO_ADDR
// end ;
51128: LD_VAR 0 3
51132: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
51133: LD_INT 0
51135: PPUSH
// if not vehicles or not parkingPoint then
51136: LD_VAR 0 1
51140: NOT
51141: PUSH
51142: LD_VAR 0 2
51146: NOT
51147: OR
51148: IFFALSE 51152
// exit ;
51150: GO 51250
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
51152: LD_ADDR_VAR 0 1
51156: PUSH
51157: LD_VAR 0 1
51161: PPUSH
51162: LD_INT 50
51164: PUSH
51165: EMPTY
51166: LIST
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: LD_INT 92
51173: PUSH
51174: LD_VAR 0 2
51178: PUSH
51179: LD_INT 1
51181: ARRAY
51182: PUSH
51183: LD_VAR 0 2
51187: PUSH
51188: LD_INT 2
51190: ARRAY
51191: PUSH
51192: LD_INT 8
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PPUSH
51209: CALL_OW 72
51213: ST_TO_ADDR
// if not vehicles then
51214: LD_VAR 0 1
51218: NOT
51219: IFFALSE 51223
// exit ;
51221: GO 51250
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
51223: LD_VAR 0 1
51227: PPUSH
51228: LD_VAR 0 2
51232: PUSH
51233: LD_INT 1
51235: ARRAY
51236: PPUSH
51237: LD_VAR 0 2
51241: PUSH
51242: LD_INT 2
51244: ARRAY
51245: PPUSH
51246: CALL_OW 111
// end ; end_of_file
51250: LD_VAR 0 3
51254: RET
// export globalGameSaveCounter ; every 0 0$1 do
51255: GO 51257
51257: DISABLE
// begin enable ;
51258: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
51259: LD_STRING updateTimer(
51261: PUSH
51262: LD_OWVAR 1
51266: STR
51267: PUSH
51268: LD_STRING );
51270: STR
51271: PPUSH
51272: CALL_OW 559
// end ;
51276: END
// every 0 0$1 do
51277: GO 51279
51279: DISABLE
// begin globalGameSaveCounter := 0 ;
51280: LD_ADDR_EXP 28
51284: PUSH
51285: LD_INT 0
51287: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
51288: LD_STRING setGameSaveCounter(0)
51290: PPUSH
51291: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
51295: LD_STRING initStreamRollete();
51297: PPUSH
51298: CALL_OW 559
// InitStreamMode ;
51302: CALL 52628 0 0
// DefineStreamItems ( false ) ;
51306: LD_INT 0
51308: PPUSH
51309: CALL 53092 0 1
// end ;
51313: END
// export function SOS_MapStart ( ) ; begin
51314: LD_INT 0
51316: PPUSH
// if streamModeActive then
51317: LD_EXP 29
51321: IFFALSE 51330
// DefineStreamItems ( true ) ;
51323: LD_INT 1
51325: PPUSH
51326: CALL 53092 0 1
// UpdateLuaVariables ( ) ;
51330: CALL 51347 0 0
// UpdateFactoryWaypoints ( ) ;
51334: CALL 65961 0 0
// UpdateWarehouseGatheringPoints ( ) ;
51338: CALL 66218 0 0
// end ;
51342: LD_VAR 0 1
51346: RET
// function UpdateLuaVariables ( ) ; begin
51347: LD_INT 0
51349: PPUSH
// if globalGameSaveCounter then
51350: LD_EXP 28
51354: IFFALSE 51388
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
51356: LD_ADDR_EXP 28
51360: PUSH
51361: LD_EXP 28
51365: PPUSH
51366: CALL 47681 0 1
51370: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51371: LD_STRING setGameSaveCounter(
51373: PUSH
51374: LD_EXP 28
51378: STR
51379: PUSH
51380: LD_STRING )
51382: STR
51383: PPUSH
51384: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
51388: LD_STRING setGameDifficulty(
51390: PUSH
51391: LD_OWVAR 67
51395: STR
51396: PUSH
51397: LD_STRING )
51399: STR
51400: PPUSH
51401: CALL_OW 559
// end ;
51405: LD_VAR 0 1
51409: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
51410: LD_INT 0
51412: PPUSH
// if p2 = stream_mode then
51413: LD_VAR 0 2
51417: PUSH
51418: LD_INT 100
51420: EQUAL
51421: IFFALSE 52424
// begin if not StreamModeActive then
51423: LD_EXP 29
51427: NOT
51428: IFFALSE 51438
// StreamModeActive := true ;
51430: LD_ADDR_EXP 29
51434: PUSH
51435: LD_INT 1
51437: ST_TO_ADDR
// if p3 = 0 then
51438: LD_VAR 0 3
51442: PUSH
51443: LD_INT 0
51445: EQUAL
51446: IFFALSE 51452
// InitStreamMode ;
51448: CALL 52628 0 0
// if p3 = 1 then
51452: LD_VAR 0 3
51456: PUSH
51457: LD_INT 1
51459: EQUAL
51460: IFFALSE 51470
// sRocket := true ;
51462: LD_ADDR_EXP 34
51466: PUSH
51467: LD_INT 1
51469: ST_TO_ADDR
// if p3 = 2 then
51470: LD_VAR 0 3
51474: PUSH
51475: LD_INT 2
51477: EQUAL
51478: IFFALSE 51488
// sSpeed := true ;
51480: LD_ADDR_EXP 33
51484: PUSH
51485: LD_INT 1
51487: ST_TO_ADDR
// if p3 = 3 then
51488: LD_VAR 0 3
51492: PUSH
51493: LD_INT 3
51495: EQUAL
51496: IFFALSE 51506
// sEngine := true ;
51498: LD_ADDR_EXP 35
51502: PUSH
51503: LD_INT 1
51505: ST_TO_ADDR
// if p3 = 4 then
51506: LD_VAR 0 3
51510: PUSH
51511: LD_INT 4
51513: EQUAL
51514: IFFALSE 51524
// sSpec := true ;
51516: LD_ADDR_EXP 32
51520: PUSH
51521: LD_INT 1
51523: ST_TO_ADDR
// if p3 = 5 then
51524: LD_VAR 0 3
51528: PUSH
51529: LD_INT 5
51531: EQUAL
51532: IFFALSE 51542
// sLevel := true ;
51534: LD_ADDR_EXP 36
51538: PUSH
51539: LD_INT 1
51541: ST_TO_ADDR
// if p3 = 6 then
51542: LD_VAR 0 3
51546: PUSH
51547: LD_INT 6
51549: EQUAL
51550: IFFALSE 51560
// sArmoury := true ;
51552: LD_ADDR_EXP 37
51556: PUSH
51557: LD_INT 1
51559: ST_TO_ADDR
// if p3 = 7 then
51560: LD_VAR 0 3
51564: PUSH
51565: LD_INT 7
51567: EQUAL
51568: IFFALSE 51578
// sRadar := true ;
51570: LD_ADDR_EXP 38
51574: PUSH
51575: LD_INT 1
51577: ST_TO_ADDR
// if p3 = 8 then
51578: LD_VAR 0 3
51582: PUSH
51583: LD_INT 8
51585: EQUAL
51586: IFFALSE 51596
// sBunker := true ;
51588: LD_ADDR_EXP 39
51592: PUSH
51593: LD_INT 1
51595: ST_TO_ADDR
// if p3 = 9 then
51596: LD_VAR 0 3
51600: PUSH
51601: LD_INT 9
51603: EQUAL
51604: IFFALSE 51614
// sHack := true ;
51606: LD_ADDR_EXP 40
51610: PUSH
51611: LD_INT 1
51613: ST_TO_ADDR
// if p3 = 10 then
51614: LD_VAR 0 3
51618: PUSH
51619: LD_INT 10
51621: EQUAL
51622: IFFALSE 51632
// sFire := true ;
51624: LD_ADDR_EXP 41
51628: PUSH
51629: LD_INT 1
51631: ST_TO_ADDR
// if p3 = 11 then
51632: LD_VAR 0 3
51636: PUSH
51637: LD_INT 11
51639: EQUAL
51640: IFFALSE 51650
// sRefresh := true ;
51642: LD_ADDR_EXP 42
51646: PUSH
51647: LD_INT 1
51649: ST_TO_ADDR
// if p3 = 12 then
51650: LD_VAR 0 3
51654: PUSH
51655: LD_INT 12
51657: EQUAL
51658: IFFALSE 51668
// sExp := true ;
51660: LD_ADDR_EXP 43
51664: PUSH
51665: LD_INT 1
51667: ST_TO_ADDR
// if p3 = 13 then
51668: LD_VAR 0 3
51672: PUSH
51673: LD_INT 13
51675: EQUAL
51676: IFFALSE 51686
// sDepot := true ;
51678: LD_ADDR_EXP 44
51682: PUSH
51683: LD_INT 1
51685: ST_TO_ADDR
// if p3 = 14 then
51686: LD_VAR 0 3
51690: PUSH
51691: LD_INT 14
51693: EQUAL
51694: IFFALSE 51704
// sFlag := true ;
51696: LD_ADDR_EXP 45
51700: PUSH
51701: LD_INT 1
51703: ST_TO_ADDR
// if p3 = 15 then
51704: LD_VAR 0 3
51708: PUSH
51709: LD_INT 15
51711: EQUAL
51712: IFFALSE 51722
// sKamikadze := true ;
51714: LD_ADDR_EXP 53
51718: PUSH
51719: LD_INT 1
51721: ST_TO_ADDR
// if p3 = 16 then
51722: LD_VAR 0 3
51726: PUSH
51727: LD_INT 16
51729: EQUAL
51730: IFFALSE 51740
// sTroll := true ;
51732: LD_ADDR_EXP 54
51736: PUSH
51737: LD_INT 1
51739: ST_TO_ADDR
// if p3 = 17 then
51740: LD_VAR 0 3
51744: PUSH
51745: LD_INT 17
51747: EQUAL
51748: IFFALSE 51758
// sSlow := true ;
51750: LD_ADDR_EXP 55
51754: PUSH
51755: LD_INT 1
51757: ST_TO_ADDR
// if p3 = 18 then
51758: LD_VAR 0 3
51762: PUSH
51763: LD_INT 18
51765: EQUAL
51766: IFFALSE 51776
// sLack := true ;
51768: LD_ADDR_EXP 56
51772: PUSH
51773: LD_INT 1
51775: ST_TO_ADDR
// if p3 = 19 then
51776: LD_VAR 0 3
51780: PUSH
51781: LD_INT 19
51783: EQUAL
51784: IFFALSE 51794
// sTank := true ;
51786: LD_ADDR_EXP 58
51790: PUSH
51791: LD_INT 1
51793: ST_TO_ADDR
// if p3 = 20 then
51794: LD_VAR 0 3
51798: PUSH
51799: LD_INT 20
51801: EQUAL
51802: IFFALSE 51812
// sRemote := true ;
51804: LD_ADDR_EXP 59
51808: PUSH
51809: LD_INT 1
51811: ST_TO_ADDR
// if p3 = 21 then
51812: LD_VAR 0 3
51816: PUSH
51817: LD_INT 21
51819: EQUAL
51820: IFFALSE 51830
// sPowell := true ;
51822: LD_ADDR_EXP 60
51826: PUSH
51827: LD_INT 1
51829: ST_TO_ADDR
// if p3 = 22 then
51830: LD_VAR 0 3
51834: PUSH
51835: LD_INT 22
51837: EQUAL
51838: IFFALSE 51848
// sTeleport := true ;
51840: LD_ADDR_EXP 63
51844: PUSH
51845: LD_INT 1
51847: ST_TO_ADDR
// if p3 = 23 then
51848: LD_VAR 0 3
51852: PUSH
51853: LD_INT 23
51855: EQUAL
51856: IFFALSE 51866
// sOilTower := true ;
51858: LD_ADDR_EXP 65
51862: PUSH
51863: LD_INT 1
51865: ST_TO_ADDR
// if p3 = 24 then
51866: LD_VAR 0 3
51870: PUSH
51871: LD_INT 24
51873: EQUAL
51874: IFFALSE 51884
// sShovel := true ;
51876: LD_ADDR_EXP 66
51880: PUSH
51881: LD_INT 1
51883: ST_TO_ADDR
// if p3 = 25 then
51884: LD_VAR 0 3
51888: PUSH
51889: LD_INT 25
51891: EQUAL
51892: IFFALSE 51902
// sSheik := true ;
51894: LD_ADDR_EXP 67
51898: PUSH
51899: LD_INT 1
51901: ST_TO_ADDR
// if p3 = 26 then
51902: LD_VAR 0 3
51906: PUSH
51907: LD_INT 26
51909: EQUAL
51910: IFFALSE 51920
// sEarthquake := true ;
51912: LD_ADDR_EXP 69
51916: PUSH
51917: LD_INT 1
51919: ST_TO_ADDR
// if p3 = 27 then
51920: LD_VAR 0 3
51924: PUSH
51925: LD_INT 27
51927: EQUAL
51928: IFFALSE 51938
// sAI := true ;
51930: LD_ADDR_EXP 70
51934: PUSH
51935: LD_INT 1
51937: ST_TO_ADDR
// if p3 = 28 then
51938: LD_VAR 0 3
51942: PUSH
51943: LD_INT 28
51945: EQUAL
51946: IFFALSE 51956
// sCargo := true ;
51948: LD_ADDR_EXP 73
51952: PUSH
51953: LD_INT 1
51955: ST_TO_ADDR
// if p3 = 29 then
51956: LD_VAR 0 3
51960: PUSH
51961: LD_INT 29
51963: EQUAL
51964: IFFALSE 51974
// sDLaser := true ;
51966: LD_ADDR_EXP 74
51970: PUSH
51971: LD_INT 1
51973: ST_TO_ADDR
// if p3 = 30 then
51974: LD_VAR 0 3
51978: PUSH
51979: LD_INT 30
51981: EQUAL
51982: IFFALSE 51992
// sExchange := true ;
51984: LD_ADDR_EXP 75
51988: PUSH
51989: LD_INT 1
51991: ST_TO_ADDR
// if p3 = 31 then
51992: LD_VAR 0 3
51996: PUSH
51997: LD_INT 31
51999: EQUAL
52000: IFFALSE 52010
// sFac := true ;
52002: LD_ADDR_EXP 76
52006: PUSH
52007: LD_INT 1
52009: ST_TO_ADDR
// if p3 = 32 then
52010: LD_VAR 0 3
52014: PUSH
52015: LD_INT 32
52017: EQUAL
52018: IFFALSE 52028
// sPower := true ;
52020: LD_ADDR_EXP 77
52024: PUSH
52025: LD_INT 1
52027: ST_TO_ADDR
// if p3 = 33 then
52028: LD_VAR 0 3
52032: PUSH
52033: LD_INT 33
52035: EQUAL
52036: IFFALSE 52046
// sRandom := true ;
52038: LD_ADDR_EXP 78
52042: PUSH
52043: LD_INT 1
52045: ST_TO_ADDR
// if p3 = 34 then
52046: LD_VAR 0 3
52050: PUSH
52051: LD_INT 34
52053: EQUAL
52054: IFFALSE 52064
// sShield := true ;
52056: LD_ADDR_EXP 79
52060: PUSH
52061: LD_INT 1
52063: ST_TO_ADDR
// if p3 = 35 then
52064: LD_VAR 0 3
52068: PUSH
52069: LD_INT 35
52071: EQUAL
52072: IFFALSE 52082
// sTime := true ;
52074: LD_ADDR_EXP 80
52078: PUSH
52079: LD_INT 1
52081: ST_TO_ADDR
// if p3 = 36 then
52082: LD_VAR 0 3
52086: PUSH
52087: LD_INT 36
52089: EQUAL
52090: IFFALSE 52100
// sTools := true ;
52092: LD_ADDR_EXP 81
52096: PUSH
52097: LD_INT 1
52099: ST_TO_ADDR
// if p3 = 101 then
52100: LD_VAR 0 3
52104: PUSH
52105: LD_INT 101
52107: EQUAL
52108: IFFALSE 52118
// sSold := true ;
52110: LD_ADDR_EXP 46
52114: PUSH
52115: LD_INT 1
52117: ST_TO_ADDR
// if p3 = 102 then
52118: LD_VAR 0 3
52122: PUSH
52123: LD_INT 102
52125: EQUAL
52126: IFFALSE 52136
// sDiff := true ;
52128: LD_ADDR_EXP 47
52132: PUSH
52133: LD_INT 1
52135: ST_TO_ADDR
// if p3 = 103 then
52136: LD_VAR 0 3
52140: PUSH
52141: LD_INT 103
52143: EQUAL
52144: IFFALSE 52154
// sFog := true ;
52146: LD_ADDR_EXP 50
52150: PUSH
52151: LD_INT 1
52153: ST_TO_ADDR
// if p3 = 104 then
52154: LD_VAR 0 3
52158: PUSH
52159: LD_INT 104
52161: EQUAL
52162: IFFALSE 52172
// sReset := true ;
52164: LD_ADDR_EXP 51
52168: PUSH
52169: LD_INT 1
52171: ST_TO_ADDR
// if p3 = 105 then
52172: LD_VAR 0 3
52176: PUSH
52177: LD_INT 105
52179: EQUAL
52180: IFFALSE 52190
// sSun := true ;
52182: LD_ADDR_EXP 52
52186: PUSH
52187: LD_INT 1
52189: ST_TO_ADDR
// if p3 = 106 then
52190: LD_VAR 0 3
52194: PUSH
52195: LD_INT 106
52197: EQUAL
52198: IFFALSE 52208
// sTiger := true ;
52200: LD_ADDR_EXP 48
52204: PUSH
52205: LD_INT 1
52207: ST_TO_ADDR
// if p3 = 107 then
52208: LD_VAR 0 3
52212: PUSH
52213: LD_INT 107
52215: EQUAL
52216: IFFALSE 52226
// sBomb := true ;
52218: LD_ADDR_EXP 49
52222: PUSH
52223: LD_INT 1
52225: ST_TO_ADDR
// if p3 = 108 then
52226: LD_VAR 0 3
52230: PUSH
52231: LD_INT 108
52233: EQUAL
52234: IFFALSE 52244
// sWound := true ;
52236: LD_ADDR_EXP 57
52240: PUSH
52241: LD_INT 1
52243: ST_TO_ADDR
// if p3 = 109 then
52244: LD_VAR 0 3
52248: PUSH
52249: LD_INT 109
52251: EQUAL
52252: IFFALSE 52262
// sBetray := true ;
52254: LD_ADDR_EXP 61
52258: PUSH
52259: LD_INT 1
52261: ST_TO_ADDR
// if p3 = 110 then
52262: LD_VAR 0 3
52266: PUSH
52267: LD_INT 110
52269: EQUAL
52270: IFFALSE 52280
// sContamin := true ;
52272: LD_ADDR_EXP 62
52276: PUSH
52277: LD_INT 1
52279: ST_TO_ADDR
// if p3 = 111 then
52280: LD_VAR 0 3
52284: PUSH
52285: LD_INT 111
52287: EQUAL
52288: IFFALSE 52298
// sOil := true ;
52290: LD_ADDR_EXP 64
52294: PUSH
52295: LD_INT 1
52297: ST_TO_ADDR
// if p3 = 112 then
52298: LD_VAR 0 3
52302: PUSH
52303: LD_INT 112
52305: EQUAL
52306: IFFALSE 52316
// sStu := true ;
52308: LD_ADDR_EXP 68
52312: PUSH
52313: LD_INT 1
52315: ST_TO_ADDR
// if p3 = 113 then
52316: LD_VAR 0 3
52320: PUSH
52321: LD_INT 113
52323: EQUAL
52324: IFFALSE 52334
// sBazooka := true ;
52326: LD_ADDR_EXP 71
52330: PUSH
52331: LD_INT 1
52333: ST_TO_ADDR
// if p3 = 114 then
52334: LD_VAR 0 3
52338: PUSH
52339: LD_INT 114
52341: EQUAL
52342: IFFALSE 52352
// sMortar := true ;
52344: LD_ADDR_EXP 72
52348: PUSH
52349: LD_INT 1
52351: ST_TO_ADDR
// if p3 = 115 then
52352: LD_VAR 0 3
52356: PUSH
52357: LD_INT 115
52359: EQUAL
52360: IFFALSE 52370
// sRanger := true ;
52362: LD_ADDR_EXP 82
52366: PUSH
52367: LD_INT 1
52369: ST_TO_ADDR
// if p3 = 116 then
52370: LD_VAR 0 3
52374: PUSH
52375: LD_INT 116
52377: EQUAL
52378: IFFALSE 52388
// sComputer := true ;
52380: LD_ADDR_EXP 83
52384: PUSH
52385: LD_INT 1
52387: ST_TO_ADDR
// if p3 = 117 then
52388: LD_VAR 0 3
52392: PUSH
52393: LD_INT 117
52395: EQUAL
52396: IFFALSE 52406
// s30 := true ;
52398: LD_ADDR_EXP 84
52402: PUSH
52403: LD_INT 1
52405: ST_TO_ADDR
// if p3 = 118 then
52406: LD_VAR 0 3
52410: PUSH
52411: LD_INT 118
52413: EQUAL
52414: IFFALSE 52424
// s60 := true ;
52416: LD_ADDR_EXP 85
52420: PUSH
52421: LD_INT 1
52423: ST_TO_ADDR
// end ; if p2 = hack_mode then
52424: LD_VAR 0 2
52428: PUSH
52429: LD_INT 101
52431: EQUAL
52432: IFFALSE 52560
// begin case p3 of 1 :
52434: LD_VAR 0 3
52438: PUSH
52439: LD_INT 1
52441: DOUBLE
52442: EQUAL
52443: IFTRUE 52447
52445: GO 52454
52447: POP
// hHackUnlimitedResources ; 2 :
52448: CALL 64707 0 0
52452: GO 52560
52454: LD_INT 2
52456: DOUBLE
52457: EQUAL
52458: IFTRUE 52462
52460: GO 52469
52462: POP
// hHackSetLevel10 ; 3 :
52463: CALL 64840 0 0
52467: GO 52560
52469: LD_INT 3
52471: DOUBLE
52472: EQUAL
52473: IFTRUE 52477
52475: GO 52484
52477: POP
// hHackSetLevel10YourUnits ; 4 :
52478: CALL 64925 0 0
52482: GO 52560
52484: LD_INT 4
52486: DOUBLE
52487: EQUAL
52488: IFTRUE 52492
52490: GO 52499
52492: POP
// hHackInvincible ; 5 :
52493: CALL 65373 0 0
52497: GO 52560
52499: LD_INT 5
52501: DOUBLE
52502: EQUAL
52503: IFTRUE 52507
52505: GO 52514
52507: POP
// hHackInvisible ; 6 :
52508: CALL 65484 0 0
52512: GO 52560
52514: LD_INT 6
52516: DOUBLE
52517: EQUAL
52518: IFTRUE 52522
52520: GO 52529
52522: POP
// hHackChangeYourSide ; 7 :
52523: CALL 65541 0 0
52527: GO 52560
52529: LD_INT 7
52531: DOUBLE
52532: EQUAL
52533: IFTRUE 52537
52535: GO 52544
52537: POP
// hHackChangeUnitSide ; 8 :
52538: CALL 65583 0 0
52542: GO 52560
52544: LD_INT 8
52546: DOUBLE
52547: EQUAL
52548: IFTRUE 52552
52550: GO 52559
52552: POP
// hHackFog ; end ;
52553: CALL 65684 0 0
52557: GO 52560
52559: POP
// end ; if p2 = game_save_mode then
52560: LD_VAR 0 2
52564: PUSH
52565: LD_INT 102
52567: EQUAL
52568: IFFALSE 52623
// begin if p3 = 1 then
52570: LD_VAR 0 3
52574: PUSH
52575: LD_INT 1
52577: EQUAL
52578: IFFALSE 52590
// globalGameSaveCounter := p4 ;
52580: LD_ADDR_EXP 28
52584: PUSH
52585: LD_VAR 0 4
52589: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
52590: LD_VAR 0 3
52594: PUSH
52595: LD_INT 2
52597: EQUAL
52598: PUSH
52599: LD_EXP 28
52603: AND
52604: IFFALSE 52623
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
52606: LD_STRING setGameSaveCounter(
52608: PUSH
52609: LD_EXP 28
52613: STR
52614: PUSH
52615: LD_STRING )
52617: STR
52618: PPUSH
52619: CALL_OW 559
// end ; end ;
52623: LD_VAR 0 7
52627: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
52628: LD_INT 0
52630: PPUSH
// streamModeActive := false ;
52631: LD_ADDR_EXP 29
52635: PUSH
52636: LD_INT 0
52638: ST_TO_ADDR
// normalCounter := 36 ;
52639: LD_ADDR_EXP 30
52643: PUSH
52644: LD_INT 36
52646: ST_TO_ADDR
// hardcoreCounter := 18 ;
52647: LD_ADDR_EXP 31
52651: PUSH
52652: LD_INT 18
52654: ST_TO_ADDR
// sRocket := false ;
52655: LD_ADDR_EXP 34
52659: PUSH
52660: LD_INT 0
52662: ST_TO_ADDR
// sSpeed := false ;
52663: LD_ADDR_EXP 33
52667: PUSH
52668: LD_INT 0
52670: ST_TO_ADDR
// sEngine := false ;
52671: LD_ADDR_EXP 35
52675: PUSH
52676: LD_INT 0
52678: ST_TO_ADDR
// sSpec := false ;
52679: LD_ADDR_EXP 32
52683: PUSH
52684: LD_INT 0
52686: ST_TO_ADDR
// sLevel := false ;
52687: LD_ADDR_EXP 36
52691: PUSH
52692: LD_INT 0
52694: ST_TO_ADDR
// sArmoury := false ;
52695: LD_ADDR_EXP 37
52699: PUSH
52700: LD_INT 0
52702: ST_TO_ADDR
// sRadar := false ;
52703: LD_ADDR_EXP 38
52707: PUSH
52708: LD_INT 0
52710: ST_TO_ADDR
// sBunker := false ;
52711: LD_ADDR_EXP 39
52715: PUSH
52716: LD_INT 0
52718: ST_TO_ADDR
// sHack := false ;
52719: LD_ADDR_EXP 40
52723: PUSH
52724: LD_INT 0
52726: ST_TO_ADDR
// sFire := false ;
52727: LD_ADDR_EXP 41
52731: PUSH
52732: LD_INT 0
52734: ST_TO_ADDR
// sRefresh := false ;
52735: LD_ADDR_EXP 42
52739: PUSH
52740: LD_INT 0
52742: ST_TO_ADDR
// sExp := false ;
52743: LD_ADDR_EXP 43
52747: PUSH
52748: LD_INT 0
52750: ST_TO_ADDR
// sDepot := false ;
52751: LD_ADDR_EXP 44
52755: PUSH
52756: LD_INT 0
52758: ST_TO_ADDR
// sFlag := false ;
52759: LD_ADDR_EXP 45
52763: PUSH
52764: LD_INT 0
52766: ST_TO_ADDR
// sKamikadze := false ;
52767: LD_ADDR_EXP 53
52771: PUSH
52772: LD_INT 0
52774: ST_TO_ADDR
// sTroll := false ;
52775: LD_ADDR_EXP 54
52779: PUSH
52780: LD_INT 0
52782: ST_TO_ADDR
// sSlow := false ;
52783: LD_ADDR_EXP 55
52787: PUSH
52788: LD_INT 0
52790: ST_TO_ADDR
// sLack := false ;
52791: LD_ADDR_EXP 56
52795: PUSH
52796: LD_INT 0
52798: ST_TO_ADDR
// sTank := false ;
52799: LD_ADDR_EXP 58
52803: PUSH
52804: LD_INT 0
52806: ST_TO_ADDR
// sRemote := false ;
52807: LD_ADDR_EXP 59
52811: PUSH
52812: LD_INT 0
52814: ST_TO_ADDR
// sPowell := false ;
52815: LD_ADDR_EXP 60
52819: PUSH
52820: LD_INT 0
52822: ST_TO_ADDR
// sTeleport := false ;
52823: LD_ADDR_EXP 63
52827: PUSH
52828: LD_INT 0
52830: ST_TO_ADDR
// sOilTower := false ;
52831: LD_ADDR_EXP 65
52835: PUSH
52836: LD_INT 0
52838: ST_TO_ADDR
// sShovel := false ;
52839: LD_ADDR_EXP 66
52843: PUSH
52844: LD_INT 0
52846: ST_TO_ADDR
// sSheik := false ;
52847: LD_ADDR_EXP 67
52851: PUSH
52852: LD_INT 0
52854: ST_TO_ADDR
// sEarthquake := false ;
52855: LD_ADDR_EXP 69
52859: PUSH
52860: LD_INT 0
52862: ST_TO_ADDR
// sAI := false ;
52863: LD_ADDR_EXP 70
52867: PUSH
52868: LD_INT 0
52870: ST_TO_ADDR
// sCargo := false ;
52871: LD_ADDR_EXP 73
52875: PUSH
52876: LD_INT 0
52878: ST_TO_ADDR
// sDLaser := false ;
52879: LD_ADDR_EXP 74
52883: PUSH
52884: LD_INT 0
52886: ST_TO_ADDR
// sExchange := false ;
52887: LD_ADDR_EXP 75
52891: PUSH
52892: LD_INT 0
52894: ST_TO_ADDR
// sFac := false ;
52895: LD_ADDR_EXP 76
52899: PUSH
52900: LD_INT 0
52902: ST_TO_ADDR
// sPower := false ;
52903: LD_ADDR_EXP 77
52907: PUSH
52908: LD_INT 0
52910: ST_TO_ADDR
// sRandom := false ;
52911: LD_ADDR_EXP 78
52915: PUSH
52916: LD_INT 0
52918: ST_TO_ADDR
// sShield := false ;
52919: LD_ADDR_EXP 79
52923: PUSH
52924: LD_INT 0
52926: ST_TO_ADDR
// sTime := false ;
52927: LD_ADDR_EXP 80
52931: PUSH
52932: LD_INT 0
52934: ST_TO_ADDR
// sTools := false ;
52935: LD_ADDR_EXP 81
52939: PUSH
52940: LD_INT 0
52942: ST_TO_ADDR
// sSold := false ;
52943: LD_ADDR_EXP 46
52947: PUSH
52948: LD_INT 0
52950: ST_TO_ADDR
// sDiff := false ;
52951: LD_ADDR_EXP 47
52955: PUSH
52956: LD_INT 0
52958: ST_TO_ADDR
// sFog := false ;
52959: LD_ADDR_EXP 50
52963: PUSH
52964: LD_INT 0
52966: ST_TO_ADDR
// sReset := false ;
52967: LD_ADDR_EXP 51
52971: PUSH
52972: LD_INT 0
52974: ST_TO_ADDR
// sSun := false ;
52975: LD_ADDR_EXP 52
52979: PUSH
52980: LD_INT 0
52982: ST_TO_ADDR
// sTiger := false ;
52983: LD_ADDR_EXP 48
52987: PUSH
52988: LD_INT 0
52990: ST_TO_ADDR
// sBomb := false ;
52991: LD_ADDR_EXP 49
52995: PUSH
52996: LD_INT 0
52998: ST_TO_ADDR
// sWound := false ;
52999: LD_ADDR_EXP 57
53003: PUSH
53004: LD_INT 0
53006: ST_TO_ADDR
// sBetray := false ;
53007: LD_ADDR_EXP 61
53011: PUSH
53012: LD_INT 0
53014: ST_TO_ADDR
// sContamin := false ;
53015: LD_ADDR_EXP 62
53019: PUSH
53020: LD_INT 0
53022: ST_TO_ADDR
// sOil := false ;
53023: LD_ADDR_EXP 64
53027: PUSH
53028: LD_INT 0
53030: ST_TO_ADDR
// sStu := false ;
53031: LD_ADDR_EXP 68
53035: PUSH
53036: LD_INT 0
53038: ST_TO_ADDR
// sBazooka := false ;
53039: LD_ADDR_EXP 71
53043: PUSH
53044: LD_INT 0
53046: ST_TO_ADDR
// sMortar := false ;
53047: LD_ADDR_EXP 72
53051: PUSH
53052: LD_INT 0
53054: ST_TO_ADDR
// sRanger := false ;
53055: LD_ADDR_EXP 82
53059: PUSH
53060: LD_INT 0
53062: ST_TO_ADDR
// sComputer := false ;
53063: LD_ADDR_EXP 83
53067: PUSH
53068: LD_INT 0
53070: ST_TO_ADDR
// s30 := false ;
53071: LD_ADDR_EXP 84
53075: PUSH
53076: LD_INT 0
53078: ST_TO_ADDR
// s60 := false ;
53079: LD_ADDR_EXP 85
53083: PUSH
53084: LD_INT 0
53086: ST_TO_ADDR
// end ;
53087: LD_VAR 0 1
53091: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
53092: LD_INT 0
53094: PPUSH
53095: PPUSH
53096: PPUSH
53097: PPUSH
53098: PPUSH
53099: PPUSH
53100: PPUSH
// result := [ ] ;
53101: LD_ADDR_VAR 0 2
53105: PUSH
53106: EMPTY
53107: ST_TO_ADDR
// if campaign_id = 1 then
53108: LD_OWVAR 69
53112: PUSH
53113: LD_INT 1
53115: EQUAL
53116: IFFALSE 56282
// begin case mission_number of 1 :
53118: LD_OWVAR 70
53122: PUSH
53123: LD_INT 1
53125: DOUBLE
53126: EQUAL
53127: IFTRUE 53131
53129: GO 53207
53131: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
53132: LD_ADDR_VAR 0 2
53136: PUSH
53137: LD_INT 2
53139: PUSH
53140: LD_INT 4
53142: PUSH
53143: LD_INT 11
53145: PUSH
53146: LD_INT 12
53148: PUSH
53149: LD_INT 15
53151: PUSH
53152: LD_INT 16
53154: PUSH
53155: LD_INT 22
53157: PUSH
53158: LD_INT 23
53160: PUSH
53161: LD_INT 26
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 101
53177: PUSH
53178: LD_INT 102
53180: PUSH
53181: LD_INT 106
53183: PUSH
53184: LD_INT 116
53186: PUSH
53187: LD_INT 117
53189: PUSH
53190: LD_INT 118
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: ST_TO_ADDR
53205: GO 56280
53207: LD_INT 2
53209: DOUBLE
53210: EQUAL
53211: IFTRUE 53215
53213: GO 53299
53215: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
53216: LD_ADDR_VAR 0 2
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: LD_INT 4
53226: PUSH
53227: LD_INT 11
53229: PUSH
53230: LD_INT 12
53232: PUSH
53233: LD_INT 15
53235: PUSH
53236: LD_INT 16
53238: PUSH
53239: LD_INT 22
53241: PUSH
53242: LD_INT 23
53244: PUSH
53245: LD_INT 26
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 101
53261: PUSH
53262: LD_INT 102
53264: PUSH
53265: LD_INT 105
53267: PUSH
53268: LD_INT 106
53270: PUSH
53271: LD_INT 108
53273: PUSH
53274: LD_INT 116
53276: PUSH
53277: LD_INT 117
53279: PUSH
53280: LD_INT 118
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: ST_TO_ADDR
53297: GO 56280
53299: LD_INT 3
53301: DOUBLE
53302: EQUAL
53303: IFTRUE 53307
53305: GO 53395
53307: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
53308: LD_ADDR_VAR 0 2
53312: PUSH
53313: LD_INT 2
53315: PUSH
53316: LD_INT 4
53318: PUSH
53319: LD_INT 5
53321: PUSH
53322: LD_INT 11
53324: PUSH
53325: LD_INT 12
53327: PUSH
53328: LD_INT 15
53330: PUSH
53331: LD_INT 16
53333: PUSH
53334: LD_INT 22
53336: PUSH
53337: LD_INT 26
53339: PUSH
53340: LD_INT 36
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 101
53357: PUSH
53358: LD_INT 102
53360: PUSH
53361: LD_INT 105
53363: PUSH
53364: LD_INT 106
53366: PUSH
53367: LD_INT 108
53369: PUSH
53370: LD_INT 116
53372: PUSH
53373: LD_INT 117
53375: PUSH
53376: LD_INT 118
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: ST_TO_ADDR
53393: GO 56280
53395: LD_INT 4
53397: DOUBLE
53398: EQUAL
53399: IFTRUE 53403
53401: GO 53499
53403: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
53404: LD_ADDR_VAR 0 2
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: LD_INT 4
53414: PUSH
53415: LD_INT 5
53417: PUSH
53418: LD_INT 8
53420: PUSH
53421: LD_INT 11
53423: PUSH
53424: LD_INT 12
53426: PUSH
53427: LD_INT 15
53429: PUSH
53430: LD_INT 16
53432: PUSH
53433: LD_INT 22
53435: PUSH
53436: LD_INT 23
53438: PUSH
53439: LD_INT 26
53441: PUSH
53442: LD_INT 36
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 101
53461: PUSH
53462: LD_INT 102
53464: PUSH
53465: LD_INT 105
53467: PUSH
53468: LD_INT 106
53470: PUSH
53471: LD_INT 108
53473: PUSH
53474: LD_INT 116
53476: PUSH
53477: LD_INT 117
53479: PUSH
53480: LD_INT 118
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: ST_TO_ADDR
53497: GO 56280
53499: LD_INT 5
53501: DOUBLE
53502: EQUAL
53503: IFTRUE 53507
53505: GO 53619
53507: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
53508: LD_ADDR_VAR 0 2
53512: PUSH
53513: LD_INT 2
53515: PUSH
53516: LD_INT 4
53518: PUSH
53519: LD_INT 5
53521: PUSH
53522: LD_INT 6
53524: PUSH
53525: LD_INT 8
53527: PUSH
53528: LD_INT 11
53530: PUSH
53531: LD_INT 12
53533: PUSH
53534: LD_INT 15
53536: PUSH
53537: LD_INT 16
53539: PUSH
53540: LD_INT 22
53542: PUSH
53543: LD_INT 23
53545: PUSH
53546: LD_INT 25
53548: PUSH
53549: LD_INT 26
53551: PUSH
53552: LD_INT 36
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 101
53573: PUSH
53574: LD_INT 102
53576: PUSH
53577: LD_INT 105
53579: PUSH
53580: LD_INT 106
53582: PUSH
53583: LD_INT 108
53585: PUSH
53586: LD_INT 109
53588: PUSH
53589: LD_INT 112
53591: PUSH
53592: LD_INT 116
53594: PUSH
53595: LD_INT 117
53597: PUSH
53598: LD_INT 118
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: ST_TO_ADDR
53617: GO 56280
53619: LD_INT 6
53621: DOUBLE
53622: EQUAL
53623: IFTRUE 53627
53625: GO 53759
53627: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
53628: LD_ADDR_VAR 0 2
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: LD_INT 4
53638: PUSH
53639: LD_INT 5
53641: PUSH
53642: LD_INT 6
53644: PUSH
53645: LD_INT 8
53647: PUSH
53648: LD_INT 11
53650: PUSH
53651: LD_INT 12
53653: PUSH
53654: LD_INT 15
53656: PUSH
53657: LD_INT 16
53659: PUSH
53660: LD_INT 20
53662: PUSH
53663: LD_INT 21
53665: PUSH
53666: LD_INT 22
53668: PUSH
53669: LD_INT 23
53671: PUSH
53672: LD_INT 25
53674: PUSH
53675: LD_INT 26
53677: PUSH
53678: LD_INT 30
53680: PUSH
53681: LD_INT 31
53683: PUSH
53684: LD_INT 32
53686: PUSH
53687: LD_INT 36
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 101
53713: PUSH
53714: LD_INT 102
53716: PUSH
53717: LD_INT 105
53719: PUSH
53720: LD_INT 106
53722: PUSH
53723: LD_INT 108
53725: PUSH
53726: LD_INT 109
53728: PUSH
53729: LD_INT 112
53731: PUSH
53732: LD_INT 116
53734: PUSH
53735: LD_INT 117
53737: PUSH
53738: LD_INT 118
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: ST_TO_ADDR
53757: GO 56280
53759: LD_INT 7
53761: DOUBLE
53762: EQUAL
53763: IFTRUE 53767
53765: GO 53879
53767: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
53768: LD_ADDR_VAR 0 2
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: LD_INT 4
53778: PUSH
53779: LD_INT 5
53781: PUSH
53782: LD_INT 7
53784: PUSH
53785: LD_INT 11
53787: PUSH
53788: LD_INT 12
53790: PUSH
53791: LD_INT 15
53793: PUSH
53794: LD_INT 16
53796: PUSH
53797: LD_INT 20
53799: PUSH
53800: LD_INT 21
53802: PUSH
53803: LD_INT 22
53805: PUSH
53806: LD_INT 23
53808: PUSH
53809: LD_INT 25
53811: PUSH
53812: LD_INT 26
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 101
53833: PUSH
53834: LD_INT 102
53836: PUSH
53837: LD_INT 103
53839: PUSH
53840: LD_INT 105
53842: PUSH
53843: LD_INT 106
53845: PUSH
53846: LD_INT 108
53848: PUSH
53849: LD_INT 112
53851: PUSH
53852: LD_INT 116
53854: PUSH
53855: LD_INT 117
53857: PUSH
53858: LD_INT 118
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: ST_TO_ADDR
53877: GO 56280
53879: LD_INT 8
53881: DOUBLE
53882: EQUAL
53883: IFTRUE 53887
53885: GO 54027
53887: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
53888: LD_ADDR_VAR 0 2
53892: PUSH
53893: LD_INT 2
53895: PUSH
53896: LD_INT 4
53898: PUSH
53899: LD_INT 5
53901: PUSH
53902: LD_INT 6
53904: PUSH
53905: LD_INT 7
53907: PUSH
53908: LD_INT 8
53910: PUSH
53911: LD_INT 11
53913: PUSH
53914: LD_INT 12
53916: PUSH
53917: LD_INT 15
53919: PUSH
53920: LD_INT 16
53922: PUSH
53923: LD_INT 20
53925: PUSH
53926: LD_INT 21
53928: PUSH
53929: LD_INT 22
53931: PUSH
53932: LD_INT 23
53934: PUSH
53935: LD_INT 25
53937: PUSH
53938: LD_INT 26
53940: PUSH
53941: LD_INT 30
53943: PUSH
53944: LD_INT 31
53946: PUSH
53947: LD_INT 32
53949: PUSH
53950: LD_INT 36
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 101
53977: PUSH
53978: LD_INT 102
53980: PUSH
53981: LD_INT 103
53983: PUSH
53984: LD_INT 105
53986: PUSH
53987: LD_INT 106
53989: PUSH
53990: LD_INT 108
53992: PUSH
53993: LD_INT 109
53995: PUSH
53996: LD_INT 112
53998: PUSH
53999: LD_INT 116
54001: PUSH
54002: LD_INT 117
54004: PUSH
54005: LD_INT 118
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: ST_TO_ADDR
54025: GO 56280
54027: LD_INT 9
54029: DOUBLE
54030: EQUAL
54031: IFTRUE 54035
54033: GO 54183
54035: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
54036: LD_ADDR_VAR 0 2
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: LD_INT 4
54046: PUSH
54047: LD_INT 5
54049: PUSH
54050: LD_INT 6
54052: PUSH
54053: LD_INT 7
54055: PUSH
54056: LD_INT 8
54058: PUSH
54059: LD_INT 11
54061: PUSH
54062: LD_INT 12
54064: PUSH
54065: LD_INT 15
54067: PUSH
54068: LD_INT 16
54070: PUSH
54071: LD_INT 20
54073: PUSH
54074: LD_INT 21
54076: PUSH
54077: LD_INT 22
54079: PUSH
54080: LD_INT 23
54082: PUSH
54083: LD_INT 25
54085: PUSH
54086: LD_INT 26
54088: PUSH
54089: LD_INT 28
54091: PUSH
54092: LD_INT 30
54094: PUSH
54095: LD_INT 31
54097: PUSH
54098: LD_INT 32
54100: PUSH
54101: LD_INT 36
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 101
54129: PUSH
54130: LD_INT 102
54132: PUSH
54133: LD_INT 103
54135: PUSH
54136: LD_INT 105
54138: PUSH
54139: LD_INT 106
54141: PUSH
54142: LD_INT 108
54144: PUSH
54145: LD_INT 109
54147: PUSH
54148: LD_INT 112
54150: PUSH
54151: LD_INT 114
54153: PUSH
54154: LD_INT 116
54156: PUSH
54157: LD_INT 117
54159: PUSH
54160: LD_INT 118
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: ST_TO_ADDR
54181: GO 56280
54183: LD_INT 10
54185: DOUBLE
54186: EQUAL
54187: IFTRUE 54191
54189: GO 54387
54191: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
54192: LD_ADDR_VAR 0 2
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: LD_INT 4
54202: PUSH
54203: LD_INT 5
54205: PUSH
54206: LD_INT 6
54208: PUSH
54209: LD_INT 7
54211: PUSH
54212: LD_INT 8
54214: PUSH
54215: LD_INT 9
54217: PUSH
54218: LD_INT 10
54220: PUSH
54221: LD_INT 11
54223: PUSH
54224: LD_INT 12
54226: PUSH
54227: LD_INT 13
54229: PUSH
54230: LD_INT 14
54232: PUSH
54233: LD_INT 15
54235: PUSH
54236: LD_INT 16
54238: PUSH
54239: LD_INT 17
54241: PUSH
54242: LD_INT 18
54244: PUSH
54245: LD_INT 19
54247: PUSH
54248: LD_INT 20
54250: PUSH
54251: LD_INT 21
54253: PUSH
54254: LD_INT 22
54256: PUSH
54257: LD_INT 23
54259: PUSH
54260: LD_INT 24
54262: PUSH
54263: LD_INT 25
54265: PUSH
54266: LD_INT 26
54268: PUSH
54269: LD_INT 28
54271: PUSH
54272: LD_INT 30
54274: PUSH
54275: LD_INT 31
54277: PUSH
54278: LD_INT 32
54280: PUSH
54281: LD_INT 36
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 101
54317: PUSH
54318: LD_INT 102
54320: PUSH
54321: LD_INT 103
54323: PUSH
54324: LD_INT 104
54326: PUSH
54327: LD_INT 105
54329: PUSH
54330: LD_INT 106
54332: PUSH
54333: LD_INT 107
54335: PUSH
54336: LD_INT 108
54338: PUSH
54339: LD_INT 109
54341: PUSH
54342: LD_INT 110
54344: PUSH
54345: LD_INT 111
54347: PUSH
54348: LD_INT 112
54350: PUSH
54351: LD_INT 114
54353: PUSH
54354: LD_INT 116
54356: PUSH
54357: LD_INT 117
54359: PUSH
54360: LD_INT 118
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: ST_TO_ADDR
54385: GO 56280
54387: LD_INT 11
54389: DOUBLE
54390: EQUAL
54391: IFTRUE 54395
54393: GO 54599
54395: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
54396: LD_ADDR_VAR 0 2
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: LD_INT 3
54406: PUSH
54407: LD_INT 4
54409: PUSH
54410: LD_INT 5
54412: PUSH
54413: LD_INT 6
54415: PUSH
54416: LD_INT 7
54418: PUSH
54419: LD_INT 8
54421: PUSH
54422: LD_INT 9
54424: PUSH
54425: LD_INT 10
54427: PUSH
54428: LD_INT 11
54430: PUSH
54431: LD_INT 12
54433: PUSH
54434: LD_INT 13
54436: PUSH
54437: LD_INT 14
54439: PUSH
54440: LD_INT 15
54442: PUSH
54443: LD_INT 16
54445: PUSH
54446: LD_INT 17
54448: PUSH
54449: LD_INT 18
54451: PUSH
54452: LD_INT 19
54454: PUSH
54455: LD_INT 20
54457: PUSH
54458: LD_INT 21
54460: PUSH
54461: LD_INT 22
54463: PUSH
54464: LD_INT 23
54466: PUSH
54467: LD_INT 24
54469: PUSH
54470: LD_INT 25
54472: PUSH
54473: LD_INT 26
54475: PUSH
54476: LD_INT 28
54478: PUSH
54479: LD_INT 30
54481: PUSH
54482: LD_INT 31
54484: PUSH
54485: LD_INT 32
54487: PUSH
54488: LD_INT 34
54490: PUSH
54491: LD_INT 36
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 101
54529: PUSH
54530: LD_INT 102
54532: PUSH
54533: LD_INT 103
54535: PUSH
54536: LD_INT 104
54538: PUSH
54539: LD_INT 105
54541: PUSH
54542: LD_INT 106
54544: PUSH
54545: LD_INT 107
54547: PUSH
54548: LD_INT 108
54550: PUSH
54551: LD_INT 109
54553: PUSH
54554: LD_INT 110
54556: PUSH
54557: LD_INT 111
54559: PUSH
54560: LD_INT 112
54562: PUSH
54563: LD_INT 114
54565: PUSH
54566: LD_INT 116
54568: PUSH
54569: LD_INT 117
54571: PUSH
54572: LD_INT 118
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: ST_TO_ADDR
54597: GO 56280
54599: LD_INT 12
54601: DOUBLE
54602: EQUAL
54603: IFTRUE 54607
54605: GO 54827
54607: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
54608: LD_ADDR_VAR 0 2
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: LD_INT 3
54621: PUSH
54622: LD_INT 4
54624: PUSH
54625: LD_INT 5
54627: PUSH
54628: LD_INT 6
54630: PUSH
54631: LD_INT 7
54633: PUSH
54634: LD_INT 8
54636: PUSH
54637: LD_INT 9
54639: PUSH
54640: LD_INT 10
54642: PUSH
54643: LD_INT 11
54645: PUSH
54646: LD_INT 12
54648: PUSH
54649: LD_INT 13
54651: PUSH
54652: LD_INT 14
54654: PUSH
54655: LD_INT 15
54657: PUSH
54658: LD_INT 16
54660: PUSH
54661: LD_INT 17
54663: PUSH
54664: LD_INT 18
54666: PUSH
54667: LD_INT 19
54669: PUSH
54670: LD_INT 20
54672: PUSH
54673: LD_INT 21
54675: PUSH
54676: LD_INT 22
54678: PUSH
54679: LD_INT 23
54681: PUSH
54682: LD_INT 24
54684: PUSH
54685: LD_INT 25
54687: PUSH
54688: LD_INT 26
54690: PUSH
54691: LD_INT 27
54693: PUSH
54694: LD_INT 28
54696: PUSH
54697: LD_INT 30
54699: PUSH
54700: LD_INT 31
54702: PUSH
54703: LD_INT 32
54705: PUSH
54706: LD_INT 33
54708: PUSH
54709: LD_INT 34
54711: PUSH
54712: LD_INT 36
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 101
54753: PUSH
54754: LD_INT 102
54756: PUSH
54757: LD_INT 103
54759: PUSH
54760: LD_INT 104
54762: PUSH
54763: LD_INT 105
54765: PUSH
54766: LD_INT 106
54768: PUSH
54769: LD_INT 107
54771: PUSH
54772: LD_INT 108
54774: PUSH
54775: LD_INT 109
54777: PUSH
54778: LD_INT 110
54780: PUSH
54781: LD_INT 111
54783: PUSH
54784: LD_INT 112
54786: PUSH
54787: LD_INT 113
54789: PUSH
54790: LD_INT 114
54792: PUSH
54793: LD_INT 116
54795: PUSH
54796: LD_INT 117
54798: PUSH
54799: LD_INT 118
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: ST_TO_ADDR
54825: GO 56280
54827: LD_INT 13
54829: DOUBLE
54830: EQUAL
54831: IFTRUE 54835
54833: GO 55043
54835: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
54836: LD_ADDR_VAR 0 2
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: LD_INT 3
54849: PUSH
54850: LD_INT 4
54852: PUSH
54853: LD_INT 5
54855: PUSH
54856: LD_INT 8
54858: PUSH
54859: LD_INT 9
54861: PUSH
54862: LD_INT 10
54864: PUSH
54865: LD_INT 11
54867: PUSH
54868: LD_INT 12
54870: PUSH
54871: LD_INT 14
54873: PUSH
54874: LD_INT 15
54876: PUSH
54877: LD_INT 16
54879: PUSH
54880: LD_INT 17
54882: PUSH
54883: LD_INT 18
54885: PUSH
54886: LD_INT 19
54888: PUSH
54889: LD_INT 20
54891: PUSH
54892: LD_INT 21
54894: PUSH
54895: LD_INT 22
54897: PUSH
54898: LD_INT 23
54900: PUSH
54901: LD_INT 24
54903: PUSH
54904: LD_INT 25
54906: PUSH
54907: LD_INT 26
54909: PUSH
54910: LD_INT 27
54912: PUSH
54913: LD_INT 28
54915: PUSH
54916: LD_INT 30
54918: PUSH
54919: LD_INT 31
54921: PUSH
54922: LD_INT 32
54924: PUSH
54925: LD_INT 33
54927: PUSH
54928: LD_INT 34
54930: PUSH
54931: LD_INT 36
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 101
54969: PUSH
54970: LD_INT 102
54972: PUSH
54973: LD_INT 103
54975: PUSH
54976: LD_INT 104
54978: PUSH
54979: LD_INT 105
54981: PUSH
54982: LD_INT 106
54984: PUSH
54985: LD_INT 107
54987: PUSH
54988: LD_INT 108
54990: PUSH
54991: LD_INT 109
54993: PUSH
54994: LD_INT 110
54996: PUSH
54997: LD_INT 111
54999: PUSH
55000: LD_INT 112
55002: PUSH
55003: LD_INT 113
55005: PUSH
55006: LD_INT 114
55008: PUSH
55009: LD_INT 116
55011: PUSH
55012: LD_INT 117
55014: PUSH
55015: LD_INT 118
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: ST_TO_ADDR
55041: GO 56280
55043: LD_INT 14
55045: DOUBLE
55046: EQUAL
55047: IFTRUE 55051
55049: GO 55275
55051: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
55052: LD_ADDR_VAR 0 2
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: LD_INT 3
55065: PUSH
55066: LD_INT 4
55068: PUSH
55069: LD_INT 5
55071: PUSH
55072: LD_INT 6
55074: PUSH
55075: LD_INT 7
55077: PUSH
55078: LD_INT 8
55080: PUSH
55081: LD_INT 9
55083: PUSH
55084: LD_INT 10
55086: PUSH
55087: LD_INT 11
55089: PUSH
55090: LD_INT 12
55092: PUSH
55093: LD_INT 13
55095: PUSH
55096: LD_INT 14
55098: PUSH
55099: LD_INT 15
55101: PUSH
55102: LD_INT 16
55104: PUSH
55105: LD_INT 17
55107: PUSH
55108: LD_INT 18
55110: PUSH
55111: LD_INT 19
55113: PUSH
55114: LD_INT 20
55116: PUSH
55117: LD_INT 21
55119: PUSH
55120: LD_INT 22
55122: PUSH
55123: LD_INT 23
55125: PUSH
55126: LD_INT 24
55128: PUSH
55129: LD_INT 25
55131: PUSH
55132: LD_INT 26
55134: PUSH
55135: LD_INT 27
55137: PUSH
55138: LD_INT 28
55140: PUSH
55141: LD_INT 29
55143: PUSH
55144: LD_INT 30
55146: PUSH
55147: LD_INT 31
55149: PUSH
55150: LD_INT 32
55152: PUSH
55153: LD_INT 33
55155: PUSH
55156: LD_INT 34
55158: PUSH
55159: LD_INT 36
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 101
55201: PUSH
55202: LD_INT 102
55204: PUSH
55205: LD_INT 103
55207: PUSH
55208: LD_INT 104
55210: PUSH
55211: LD_INT 105
55213: PUSH
55214: LD_INT 106
55216: PUSH
55217: LD_INT 107
55219: PUSH
55220: LD_INT 108
55222: PUSH
55223: LD_INT 109
55225: PUSH
55226: LD_INT 110
55228: PUSH
55229: LD_INT 111
55231: PUSH
55232: LD_INT 112
55234: PUSH
55235: LD_INT 113
55237: PUSH
55238: LD_INT 114
55240: PUSH
55241: LD_INT 116
55243: PUSH
55244: LD_INT 117
55246: PUSH
55247: LD_INT 118
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: ST_TO_ADDR
55273: GO 56280
55275: LD_INT 15
55277: DOUBLE
55278: EQUAL
55279: IFTRUE 55283
55281: GO 55507
55283: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
55284: LD_ADDR_VAR 0 2
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: LD_INT 2
55294: PUSH
55295: LD_INT 3
55297: PUSH
55298: LD_INT 4
55300: PUSH
55301: LD_INT 5
55303: PUSH
55304: LD_INT 6
55306: PUSH
55307: LD_INT 7
55309: PUSH
55310: LD_INT 8
55312: PUSH
55313: LD_INT 9
55315: PUSH
55316: LD_INT 10
55318: PUSH
55319: LD_INT 11
55321: PUSH
55322: LD_INT 12
55324: PUSH
55325: LD_INT 13
55327: PUSH
55328: LD_INT 14
55330: PUSH
55331: LD_INT 15
55333: PUSH
55334: LD_INT 16
55336: PUSH
55337: LD_INT 17
55339: PUSH
55340: LD_INT 18
55342: PUSH
55343: LD_INT 19
55345: PUSH
55346: LD_INT 20
55348: PUSH
55349: LD_INT 21
55351: PUSH
55352: LD_INT 22
55354: PUSH
55355: LD_INT 23
55357: PUSH
55358: LD_INT 24
55360: PUSH
55361: LD_INT 25
55363: PUSH
55364: LD_INT 26
55366: PUSH
55367: LD_INT 27
55369: PUSH
55370: LD_INT 28
55372: PUSH
55373: LD_INT 29
55375: PUSH
55376: LD_INT 30
55378: PUSH
55379: LD_INT 31
55381: PUSH
55382: LD_INT 32
55384: PUSH
55385: LD_INT 33
55387: PUSH
55388: LD_INT 34
55390: PUSH
55391: LD_INT 36
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 101
55433: PUSH
55434: LD_INT 102
55436: PUSH
55437: LD_INT 103
55439: PUSH
55440: LD_INT 104
55442: PUSH
55443: LD_INT 105
55445: PUSH
55446: LD_INT 106
55448: PUSH
55449: LD_INT 107
55451: PUSH
55452: LD_INT 108
55454: PUSH
55455: LD_INT 109
55457: PUSH
55458: LD_INT 110
55460: PUSH
55461: LD_INT 111
55463: PUSH
55464: LD_INT 112
55466: PUSH
55467: LD_INT 113
55469: PUSH
55470: LD_INT 114
55472: PUSH
55473: LD_INT 116
55475: PUSH
55476: LD_INT 117
55478: PUSH
55479: LD_INT 118
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: ST_TO_ADDR
55505: GO 56280
55507: LD_INT 16
55509: DOUBLE
55510: EQUAL
55511: IFTRUE 55515
55513: GO 55651
55515: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
55516: LD_ADDR_VAR 0 2
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: LD_INT 4
55526: PUSH
55527: LD_INT 5
55529: PUSH
55530: LD_INT 7
55532: PUSH
55533: LD_INT 11
55535: PUSH
55536: LD_INT 12
55538: PUSH
55539: LD_INT 15
55541: PUSH
55542: LD_INT 16
55544: PUSH
55545: LD_INT 20
55547: PUSH
55548: LD_INT 21
55550: PUSH
55551: LD_INT 22
55553: PUSH
55554: LD_INT 23
55556: PUSH
55557: LD_INT 25
55559: PUSH
55560: LD_INT 26
55562: PUSH
55563: LD_INT 30
55565: PUSH
55566: LD_INT 31
55568: PUSH
55569: LD_INT 32
55571: PUSH
55572: LD_INT 33
55574: PUSH
55575: LD_INT 34
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 101
55601: PUSH
55602: LD_INT 102
55604: PUSH
55605: LD_INT 103
55607: PUSH
55608: LD_INT 106
55610: PUSH
55611: LD_INT 108
55613: PUSH
55614: LD_INT 112
55616: PUSH
55617: LD_INT 113
55619: PUSH
55620: LD_INT 114
55622: PUSH
55623: LD_INT 116
55625: PUSH
55626: LD_INT 117
55628: PUSH
55629: LD_INT 118
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: ST_TO_ADDR
55649: GO 56280
55651: LD_INT 17
55653: DOUBLE
55654: EQUAL
55655: IFTRUE 55659
55657: GO 55883
55659: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
55660: LD_ADDR_VAR 0 2
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: LD_INT 2
55670: PUSH
55671: LD_INT 3
55673: PUSH
55674: LD_INT 4
55676: PUSH
55677: LD_INT 5
55679: PUSH
55680: LD_INT 6
55682: PUSH
55683: LD_INT 7
55685: PUSH
55686: LD_INT 8
55688: PUSH
55689: LD_INT 9
55691: PUSH
55692: LD_INT 10
55694: PUSH
55695: LD_INT 11
55697: PUSH
55698: LD_INT 12
55700: PUSH
55701: LD_INT 13
55703: PUSH
55704: LD_INT 14
55706: PUSH
55707: LD_INT 15
55709: PUSH
55710: LD_INT 16
55712: PUSH
55713: LD_INT 17
55715: PUSH
55716: LD_INT 18
55718: PUSH
55719: LD_INT 19
55721: PUSH
55722: LD_INT 20
55724: PUSH
55725: LD_INT 21
55727: PUSH
55728: LD_INT 22
55730: PUSH
55731: LD_INT 23
55733: PUSH
55734: LD_INT 24
55736: PUSH
55737: LD_INT 25
55739: PUSH
55740: LD_INT 26
55742: PUSH
55743: LD_INT 27
55745: PUSH
55746: LD_INT 28
55748: PUSH
55749: LD_INT 29
55751: PUSH
55752: LD_INT 30
55754: PUSH
55755: LD_INT 31
55757: PUSH
55758: LD_INT 32
55760: PUSH
55761: LD_INT 33
55763: PUSH
55764: LD_INT 34
55766: PUSH
55767: LD_INT 36
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 101
55809: PUSH
55810: LD_INT 102
55812: PUSH
55813: LD_INT 103
55815: PUSH
55816: LD_INT 104
55818: PUSH
55819: LD_INT 105
55821: PUSH
55822: LD_INT 106
55824: PUSH
55825: LD_INT 107
55827: PUSH
55828: LD_INT 108
55830: PUSH
55831: LD_INT 109
55833: PUSH
55834: LD_INT 110
55836: PUSH
55837: LD_INT 111
55839: PUSH
55840: LD_INT 112
55842: PUSH
55843: LD_INT 113
55845: PUSH
55846: LD_INT 114
55848: PUSH
55849: LD_INT 116
55851: PUSH
55852: LD_INT 117
55854: PUSH
55855: LD_INT 118
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: ST_TO_ADDR
55881: GO 56280
55883: LD_INT 18
55885: DOUBLE
55886: EQUAL
55887: IFTRUE 55891
55889: GO 56039
55891: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
55892: LD_ADDR_VAR 0 2
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: LD_INT 4
55902: PUSH
55903: LD_INT 5
55905: PUSH
55906: LD_INT 7
55908: PUSH
55909: LD_INT 11
55911: PUSH
55912: LD_INT 12
55914: PUSH
55915: LD_INT 15
55917: PUSH
55918: LD_INT 16
55920: PUSH
55921: LD_INT 20
55923: PUSH
55924: LD_INT 21
55926: PUSH
55927: LD_INT 22
55929: PUSH
55930: LD_INT 23
55932: PUSH
55933: LD_INT 25
55935: PUSH
55936: LD_INT 26
55938: PUSH
55939: LD_INT 30
55941: PUSH
55942: LD_INT 31
55944: PUSH
55945: LD_INT 32
55947: PUSH
55948: LD_INT 33
55950: PUSH
55951: LD_INT 34
55953: PUSH
55954: LD_INT 35
55956: PUSH
55957: LD_INT 36
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 101
55985: PUSH
55986: LD_INT 102
55988: PUSH
55989: LD_INT 103
55991: PUSH
55992: LD_INT 106
55994: PUSH
55995: LD_INT 108
55997: PUSH
55998: LD_INT 112
56000: PUSH
56001: LD_INT 113
56003: PUSH
56004: LD_INT 114
56006: PUSH
56007: LD_INT 115
56009: PUSH
56010: LD_INT 116
56012: PUSH
56013: LD_INT 117
56015: PUSH
56016: LD_INT 118
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: ST_TO_ADDR
56037: GO 56280
56039: LD_INT 19
56041: DOUBLE
56042: EQUAL
56043: IFTRUE 56047
56045: GO 56279
56047: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
56048: LD_ADDR_VAR 0 2
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: LD_INT 3
56061: PUSH
56062: LD_INT 4
56064: PUSH
56065: LD_INT 5
56067: PUSH
56068: LD_INT 6
56070: PUSH
56071: LD_INT 7
56073: PUSH
56074: LD_INT 8
56076: PUSH
56077: LD_INT 9
56079: PUSH
56080: LD_INT 10
56082: PUSH
56083: LD_INT 11
56085: PUSH
56086: LD_INT 12
56088: PUSH
56089: LD_INT 13
56091: PUSH
56092: LD_INT 14
56094: PUSH
56095: LD_INT 15
56097: PUSH
56098: LD_INT 16
56100: PUSH
56101: LD_INT 17
56103: PUSH
56104: LD_INT 18
56106: PUSH
56107: LD_INT 19
56109: PUSH
56110: LD_INT 20
56112: PUSH
56113: LD_INT 21
56115: PUSH
56116: LD_INT 22
56118: PUSH
56119: LD_INT 23
56121: PUSH
56122: LD_INT 24
56124: PUSH
56125: LD_INT 25
56127: PUSH
56128: LD_INT 26
56130: PUSH
56131: LD_INT 27
56133: PUSH
56134: LD_INT 28
56136: PUSH
56137: LD_INT 29
56139: PUSH
56140: LD_INT 30
56142: PUSH
56143: LD_INT 31
56145: PUSH
56146: LD_INT 32
56148: PUSH
56149: LD_INT 33
56151: PUSH
56152: LD_INT 34
56154: PUSH
56155: LD_INT 35
56157: PUSH
56158: LD_INT 36
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 101
56201: PUSH
56202: LD_INT 102
56204: PUSH
56205: LD_INT 103
56207: PUSH
56208: LD_INT 104
56210: PUSH
56211: LD_INT 105
56213: PUSH
56214: LD_INT 106
56216: PUSH
56217: LD_INT 107
56219: PUSH
56220: LD_INT 108
56222: PUSH
56223: LD_INT 109
56225: PUSH
56226: LD_INT 110
56228: PUSH
56229: LD_INT 111
56231: PUSH
56232: LD_INT 112
56234: PUSH
56235: LD_INT 113
56237: PUSH
56238: LD_INT 114
56240: PUSH
56241: LD_INT 115
56243: PUSH
56244: LD_INT 116
56246: PUSH
56247: LD_INT 117
56249: PUSH
56250: LD_INT 118
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: ST_TO_ADDR
56277: GO 56280
56279: POP
// end else
56280: GO 56511
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
56282: LD_ADDR_VAR 0 2
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: LD_INT 3
56295: PUSH
56296: LD_INT 4
56298: PUSH
56299: LD_INT 5
56301: PUSH
56302: LD_INT 6
56304: PUSH
56305: LD_INT 7
56307: PUSH
56308: LD_INT 8
56310: PUSH
56311: LD_INT 9
56313: PUSH
56314: LD_INT 10
56316: PUSH
56317: LD_INT 11
56319: PUSH
56320: LD_INT 12
56322: PUSH
56323: LD_INT 13
56325: PUSH
56326: LD_INT 14
56328: PUSH
56329: LD_INT 15
56331: PUSH
56332: LD_INT 16
56334: PUSH
56335: LD_INT 17
56337: PUSH
56338: LD_INT 18
56340: PUSH
56341: LD_INT 19
56343: PUSH
56344: LD_INT 20
56346: PUSH
56347: LD_INT 21
56349: PUSH
56350: LD_INT 22
56352: PUSH
56353: LD_INT 23
56355: PUSH
56356: LD_INT 24
56358: PUSH
56359: LD_INT 25
56361: PUSH
56362: LD_INT 26
56364: PUSH
56365: LD_INT 27
56367: PUSH
56368: LD_INT 28
56370: PUSH
56371: LD_INT 29
56373: PUSH
56374: LD_INT 30
56376: PUSH
56377: LD_INT 31
56379: PUSH
56380: LD_INT 32
56382: PUSH
56383: LD_INT 33
56385: PUSH
56386: LD_INT 34
56388: PUSH
56389: LD_INT 35
56391: PUSH
56392: LD_INT 36
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 101
56435: PUSH
56436: LD_INT 102
56438: PUSH
56439: LD_INT 103
56441: PUSH
56442: LD_INT 104
56444: PUSH
56445: LD_INT 105
56447: PUSH
56448: LD_INT 106
56450: PUSH
56451: LD_INT 107
56453: PUSH
56454: LD_INT 108
56456: PUSH
56457: LD_INT 109
56459: PUSH
56460: LD_INT 110
56462: PUSH
56463: LD_INT 111
56465: PUSH
56466: LD_INT 112
56468: PUSH
56469: LD_INT 113
56471: PUSH
56472: LD_INT 114
56474: PUSH
56475: LD_INT 115
56477: PUSH
56478: LD_INT 116
56480: PUSH
56481: LD_INT 117
56483: PUSH
56484: LD_INT 118
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: ST_TO_ADDR
// if result then
56511: LD_VAR 0 2
56515: IFFALSE 57301
// begin normal :=  ;
56517: LD_ADDR_VAR 0 5
56521: PUSH
56522: LD_STRING 
56524: ST_TO_ADDR
// hardcore :=  ;
56525: LD_ADDR_VAR 0 6
56529: PUSH
56530: LD_STRING 
56532: ST_TO_ADDR
// active :=  ;
56533: LD_ADDR_VAR 0 7
56537: PUSH
56538: LD_STRING 
56540: ST_TO_ADDR
// for i = 1 to normalCounter do
56541: LD_ADDR_VAR 0 8
56545: PUSH
56546: DOUBLE
56547: LD_INT 1
56549: DEC
56550: ST_TO_ADDR
56551: LD_EXP 30
56555: PUSH
56556: FOR_TO
56557: IFFALSE 56658
// begin tmp := 0 ;
56559: LD_ADDR_VAR 0 3
56563: PUSH
56564: LD_STRING 0
56566: ST_TO_ADDR
// if result [ 1 ] then
56567: LD_VAR 0 2
56571: PUSH
56572: LD_INT 1
56574: ARRAY
56575: IFFALSE 56640
// if result [ 1 ] [ 1 ] = i then
56577: LD_VAR 0 2
56581: PUSH
56582: LD_INT 1
56584: ARRAY
56585: PUSH
56586: LD_INT 1
56588: ARRAY
56589: PUSH
56590: LD_VAR 0 8
56594: EQUAL
56595: IFFALSE 56640
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
56597: LD_ADDR_VAR 0 2
56601: PUSH
56602: LD_VAR 0 2
56606: PPUSH
56607: LD_INT 1
56609: PPUSH
56610: LD_VAR 0 2
56614: PUSH
56615: LD_INT 1
56617: ARRAY
56618: PPUSH
56619: LD_INT 1
56621: PPUSH
56622: CALL_OW 3
56626: PPUSH
56627: CALL_OW 1
56631: ST_TO_ADDR
// tmp := 1 ;
56632: LD_ADDR_VAR 0 3
56636: PUSH
56637: LD_STRING 1
56639: ST_TO_ADDR
// end ; normal := normal & tmp ;
56640: LD_ADDR_VAR 0 5
56644: PUSH
56645: LD_VAR 0 5
56649: PUSH
56650: LD_VAR 0 3
56654: STR
56655: ST_TO_ADDR
// end ;
56656: GO 56556
56658: POP
56659: POP
// for i = 1 to hardcoreCounter do
56660: LD_ADDR_VAR 0 8
56664: PUSH
56665: DOUBLE
56666: LD_INT 1
56668: DEC
56669: ST_TO_ADDR
56670: LD_EXP 31
56674: PUSH
56675: FOR_TO
56676: IFFALSE 56781
// begin tmp := 0 ;
56678: LD_ADDR_VAR 0 3
56682: PUSH
56683: LD_STRING 0
56685: ST_TO_ADDR
// if result [ 2 ] then
56686: LD_VAR 0 2
56690: PUSH
56691: LD_INT 2
56693: ARRAY
56694: IFFALSE 56763
// if result [ 2 ] [ 1 ] = 100 + i then
56696: LD_VAR 0 2
56700: PUSH
56701: LD_INT 2
56703: ARRAY
56704: PUSH
56705: LD_INT 1
56707: ARRAY
56708: PUSH
56709: LD_INT 100
56711: PUSH
56712: LD_VAR 0 8
56716: PLUS
56717: EQUAL
56718: IFFALSE 56763
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
56720: LD_ADDR_VAR 0 2
56724: PUSH
56725: LD_VAR 0 2
56729: PPUSH
56730: LD_INT 2
56732: PPUSH
56733: LD_VAR 0 2
56737: PUSH
56738: LD_INT 2
56740: ARRAY
56741: PPUSH
56742: LD_INT 1
56744: PPUSH
56745: CALL_OW 3
56749: PPUSH
56750: CALL_OW 1
56754: ST_TO_ADDR
// tmp := 1 ;
56755: LD_ADDR_VAR 0 3
56759: PUSH
56760: LD_STRING 1
56762: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
56763: LD_ADDR_VAR 0 6
56767: PUSH
56768: LD_VAR 0 6
56772: PUSH
56773: LD_VAR 0 3
56777: STR
56778: ST_TO_ADDR
// end ;
56779: GO 56675
56781: POP
56782: POP
// if isGameLoad then
56783: LD_VAR 0 1
56787: IFFALSE 57262
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
56789: LD_ADDR_VAR 0 4
56793: PUSH
56794: LD_EXP 34
56798: PUSH
56799: LD_EXP 33
56803: PUSH
56804: LD_EXP 35
56808: PUSH
56809: LD_EXP 32
56813: PUSH
56814: LD_EXP 36
56818: PUSH
56819: LD_EXP 37
56823: PUSH
56824: LD_EXP 38
56828: PUSH
56829: LD_EXP 39
56833: PUSH
56834: LD_EXP 40
56838: PUSH
56839: LD_EXP 41
56843: PUSH
56844: LD_EXP 42
56848: PUSH
56849: LD_EXP 43
56853: PUSH
56854: LD_EXP 44
56858: PUSH
56859: LD_EXP 45
56863: PUSH
56864: LD_EXP 53
56868: PUSH
56869: LD_EXP 54
56873: PUSH
56874: LD_EXP 55
56878: PUSH
56879: LD_EXP 56
56883: PUSH
56884: LD_EXP 58
56888: PUSH
56889: LD_EXP 59
56893: PUSH
56894: LD_EXP 60
56898: PUSH
56899: LD_EXP 63
56903: PUSH
56904: LD_EXP 65
56908: PUSH
56909: LD_EXP 66
56913: PUSH
56914: LD_EXP 67
56918: PUSH
56919: LD_EXP 69
56923: PUSH
56924: LD_EXP 70
56928: PUSH
56929: LD_EXP 73
56933: PUSH
56934: LD_EXP 74
56938: PUSH
56939: LD_EXP 75
56943: PUSH
56944: LD_EXP 76
56948: PUSH
56949: LD_EXP 77
56953: PUSH
56954: LD_EXP 78
56958: PUSH
56959: LD_EXP 79
56963: PUSH
56964: LD_EXP 80
56968: PUSH
56969: LD_EXP 81
56973: PUSH
56974: LD_EXP 46
56978: PUSH
56979: LD_EXP 47
56983: PUSH
56984: LD_EXP 50
56988: PUSH
56989: LD_EXP 51
56993: PUSH
56994: LD_EXP 52
56998: PUSH
56999: LD_EXP 48
57003: PUSH
57004: LD_EXP 49
57008: PUSH
57009: LD_EXP 57
57013: PUSH
57014: LD_EXP 61
57018: PUSH
57019: LD_EXP 62
57023: PUSH
57024: LD_EXP 64
57028: PUSH
57029: LD_EXP 68
57033: PUSH
57034: LD_EXP 71
57038: PUSH
57039: LD_EXP 72
57043: PUSH
57044: LD_EXP 82
57048: PUSH
57049: LD_EXP 83
57053: PUSH
57054: LD_EXP 84
57058: PUSH
57059: LD_EXP 85
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: ST_TO_ADDR
// tmp :=  ;
57120: LD_ADDR_VAR 0 3
57124: PUSH
57125: LD_STRING 
57127: ST_TO_ADDR
// for i = 1 to normalCounter do
57128: LD_ADDR_VAR 0 8
57132: PUSH
57133: DOUBLE
57134: LD_INT 1
57136: DEC
57137: ST_TO_ADDR
57138: LD_EXP 30
57142: PUSH
57143: FOR_TO
57144: IFFALSE 57180
// begin if flags [ i ] then
57146: LD_VAR 0 4
57150: PUSH
57151: LD_VAR 0 8
57155: ARRAY
57156: IFFALSE 57178
// tmp := tmp & i & ; ;
57158: LD_ADDR_VAR 0 3
57162: PUSH
57163: LD_VAR 0 3
57167: PUSH
57168: LD_VAR 0 8
57172: STR
57173: PUSH
57174: LD_STRING ;
57176: STR
57177: ST_TO_ADDR
// end ;
57178: GO 57143
57180: POP
57181: POP
// for i = 1 to hardcoreCounter do
57182: LD_ADDR_VAR 0 8
57186: PUSH
57187: DOUBLE
57188: LD_INT 1
57190: DEC
57191: ST_TO_ADDR
57192: LD_EXP 31
57196: PUSH
57197: FOR_TO
57198: IFFALSE 57244
// begin if flags [ normalCounter + i ] then
57200: LD_VAR 0 4
57204: PUSH
57205: LD_EXP 30
57209: PUSH
57210: LD_VAR 0 8
57214: PLUS
57215: ARRAY
57216: IFFALSE 57242
// tmp := tmp & ( 100 + i ) & ; ;
57218: LD_ADDR_VAR 0 3
57222: PUSH
57223: LD_VAR 0 3
57227: PUSH
57228: LD_INT 100
57230: PUSH
57231: LD_VAR 0 8
57235: PLUS
57236: STR
57237: PUSH
57238: LD_STRING ;
57240: STR
57241: ST_TO_ADDR
// end ;
57242: GO 57197
57244: POP
57245: POP
// if tmp then
57246: LD_VAR 0 3
57250: IFFALSE 57262
// active := tmp ;
57252: LD_ADDR_VAR 0 7
57256: PUSH
57257: LD_VAR 0 3
57261: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
57262: LD_STRING getStreamItemsFromMission("
57264: PUSH
57265: LD_VAR 0 5
57269: STR
57270: PUSH
57271: LD_STRING ","
57273: STR
57274: PUSH
57275: LD_VAR 0 6
57279: STR
57280: PUSH
57281: LD_STRING ","
57283: STR
57284: PUSH
57285: LD_VAR 0 7
57289: STR
57290: PUSH
57291: LD_STRING ")
57293: STR
57294: PPUSH
57295: CALL_OW 559
// end else
57299: GO 57308
// ToLua ( getStreamItemsFromMission("","","") ) ;
57301: LD_STRING getStreamItemsFromMission("","","")
57303: PPUSH
57304: CALL_OW 559
// end ;
57308: LD_VAR 0 2
57312: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
57313: LD_EXP 29
57317: PUSH
57318: LD_EXP 34
57322: AND
57323: IFFALSE 57447
57325: GO 57327
57327: DISABLE
57328: LD_INT 0
57330: PPUSH
57331: PPUSH
// begin enable ;
57332: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
57333: LD_ADDR_VAR 0 2
57337: PUSH
57338: LD_INT 22
57340: PUSH
57341: LD_OWVAR 2
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: LD_INT 34
57355: PUSH
57356: LD_INT 7
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 34
57365: PUSH
57366: LD_INT 45
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 34
57375: PUSH
57376: LD_INT 28
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 34
57385: PUSH
57386: LD_INT 47
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PPUSH
57404: CALL_OW 69
57408: ST_TO_ADDR
// if not tmp then
57409: LD_VAR 0 2
57413: NOT
57414: IFFALSE 57418
// exit ;
57416: GO 57447
// for i in tmp do
57418: LD_ADDR_VAR 0 1
57422: PUSH
57423: LD_VAR 0 2
57427: PUSH
57428: FOR_IN
57429: IFFALSE 57445
// begin SetLives ( i , 0 ) ;
57431: LD_VAR 0 1
57435: PPUSH
57436: LD_INT 0
57438: PPUSH
57439: CALL_OW 234
// end ;
57443: GO 57428
57445: POP
57446: POP
// end ;
57447: PPOPN 2
57449: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
57450: LD_EXP 29
57454: PUSH
57455: LD_EXP 35
57459: AND
57460: IFFALSE 57544
57462: GO 57464
57464: DISABLE
57465: LD_INT 0
57467: PPUSH
57468: PPUSH
// begin enable ;
57469: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
57470: LD_ADDR_VAR 0 2
57474: PUSH
57475: LD_INT 22
57477: PUSH
57478: LD_OWVAR 2
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 32
57489: PUSH
57490: LD_INT 3
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PPUSH
57501: CALL_OW 69
57505: ST_TO_ADDR
// if not tmp then
57506: LD_VAR 0 2
57510: NOT
57511: IFFALSE 57515
// exit ;
57513: GO 57544
// for i in tmp do
57515: LD_ADDR_VAR 0 1
57519: PUSH
57520: LD_VAR 0 2
57524: PUSH
57525: FOR_IN
57526: IFFALSE 57542
// begin SetLives ( i , 0 ) ;
57528: LD_VAR 0 1
57532: PPUSH
57533: LD_INT 0
57535: PPUSH
57536: CALL_OW 234
// end ;
57540: GO 57525
57542: POP
57543: POP
// end ;
57544: PPOPN 2
57546: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
57547: LD_EXP 29
57551: PUSH
57552: LD_EXP 32
57556: AND
57557: IFFALSE 57650
57559: GO 57561
57561: DISABLE
57562: LD_INT 0
57564: PPUSH
// begin enable ;
57565: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
57566: LD_ADDR_VAR 0 1
57570: PUSH
57571: LD_INT 22
57573: PUSH
57574: LD_OWVAR 2
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: LD_INT 25
57588: PUSH
57589: LD_INT 5
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 25
57598: PUSH
57599: LD_INT 9
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 25
57608: PUSH
57609: LD_INT 8
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PPUSH
57626: CALL_OW 69
57630: PUSH
57631: FOR_IN
57632: IFFALSE 57648
// begin SetClass ( i , 1 ) ;
57634: LD_VAR 0 1
57638: PPUSH
57639: LD_INT 1
57641: PPUSH
57642: CALL_OW 336
// end ;
57646: GO 57631
57648: POP
57649: POP
// end ;
57650: PPOPN 1
57652: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
57653: LD_EXP 29
57657: PUSH
57658: LD_EXP 33
57662: AND
57663: PUSH
57664: LD_OWVAR 65
57668: PUSH
57669: LD_INT 7
57671: LESS
57672: AND
57673: IFFALSE 57687
57675: GO 57677
57677: DISABLE
// begin enable ;
57678: ENABLE
// game_speed := 7 ;
57679: LD_ADDR_OWVAR 65
57683: PUSH
57684: LD_INT 7
57686: ST_TO_ADDR
// end ;
57687: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
57688: LD_EXP 29
57692: PUSH
57693: LD_EXP 36
57697: AND
57698: IFFALSE 57900
57700: GO 57702
57702: DISABLE
57703: LD_INT 0
57705: PPUSH
57706: PPUSH
57707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57708: LD_ADDR_VAR 0 3
57712: PUSH
57713: LD_INT 81
57715: PUSH
57716: LD_OWVAR 2
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 21
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PPUSH
57739: CALL_OW 69
57743: ST_TO_ADDR
// if not tmp then
57744: LD_VAR 0 3
57748: NOT
57749: IFFALSE 57753
// exit ;
57751: GO 57900
// if tmp > 5 then
57753: LD_VAR 0 3
57757: PUSH
57758: LD_INT 5
57760: GREATER
57761: IFFALSE 57773
// k := 5 else
57763: LD_ADDR_VAR 0 2
57767: PUSH
57768: LD_INT 5
57770: ST_TO_ADDR
57771: GO 57783
// k := tmp ;
57773: LD_ADDR_VAR 0 2
57777: PUSH
57778: LD_VAR 0 3
57782: ST_TO_ADDR
// for i := 1 to k do
57783: LD_ADDR_VAR 0 1
57787: PUSH
57788: DOUBLE
57789: LD_INT 1
57791: DEC
57792: ST_TO_ADDR
57793: LD_VAR 0 2
57797: PUSH
57798: FOR_TO
57799: IFFALSE 57898
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
57801: LD_VAR 0 3
57805: PUSH
57806: LD_VAR 0 1
57810: ARRAY
57811: PPUSH
57812: LD_VAR 0 1
57816: PUSH
57817: LD_INT 4
57819: MOD
57820: PUSH
57821: LD_INT 1
57823: PLUS
57824: PPUSH
57825: CALL_OW 259
57829: PUSH
57830: LD_INT 10
57832: LESS
57833: IFFALSE 57896
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
57835: LD_VAR 0 3
57839: PUSH
57840: LD_VAR 0 1
57844: ARRAY
57845: PPUSH
57846: LD_VAR 0 1
57850: PUSH
57851: LD_INT 4
57853: MOD
57854: PUSH
57855: LD_INT 1
57857: PLUS
57858: PPUSH
57859: LD_VAR 0 3
57863: PUSH
57864: LD_VAR 0 1
57868: ARRAY
57869: PPUSH
57870: LD_VAR 0 1
57874: PUSH
57875: LD_INT 4
57877: MOD
57878: PUSH
57879: LD_INT 1
57881: PLUS
57882: PPUSH
57883: CALL_OW 259
57887: PUSH
57888: LD_INT 1
57890: PLUS
57891: PPUSH
57892: CALL_OW 237
57896: GO 57798
57898: POP
57899: POP
// end ;
57900: PPOPN 3
57902: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
57903: LD_EXP 29
57907: PUSH
57908: LD_EXP 37
57912: AND
57913: IFFALSE 57933
57915: GO 57917
57917: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
57918: LD_INT 4
57920: PPUSH
57921: LD_OWVAR 2
57925: PPUSH
57926: LD_INT 0
57928: PPUSH
57929: CALL_OW 324
57933: END
// every 0 0$1 trigger StreamModeActive and sShovel do
57934: LD_EXP 29
57938: PUSH
57939: LD_EXP 66
57943: AND
57944: IFFALSE 57964
57946: GO 57948
57948: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
57949: LD_INT 19
57951: PPUSH
57952: LD_OWVAR 2
57956: PPUSH
57957: LD_INT 0
57959: PPUSH
57960: CALL_OW 324
57964: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
57965: LD_EXP 29
57969: PUSH
57970: LD_EXP 38
57974: AND
57975: IFFALSE 58077
57977: GO 57979
57979: DISABLE
57980: LD_INT 0
57982: PPUSH
57983: PPUSH
// begin enable ;
57984: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
57985: LD_ADDR_VAR 0 2
57989: PUSH
57990: LD_INT 22
57992: PUSH
57993: LD_OWVAR 2
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: LD_INT 34
58007: PUSH
58008: LD_INT 11
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 34
58017: PUSH
58018: LD_INT 30
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: LIST
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PPUSH
58034: CALL_OW 69
58038: ST_TO_ADDR
// if not tmp then
58039: LD_VAR 0 2
58043: NOT
58044: IFFALSE 58048
// exit ;
58046: GO 58077
// for i in tmp do
58048: LD_ADDR_VAR 0 1
58052: PUSH
58053: LD_VAR 0 2
58057: PUSH
58058: FOR_IN
58059: IFFALSE 58075
// begin SetLives ( i , 0 ) ;
58061: LD_VAR 0 1
58065: PPUSH
58066: LD_INT 0
58068: PPUSH
58069: CALL_OW 234
// end ;
58073: GO 58058
58075: POP
58076: POP
// end ;
58077: PPOPN 2
58079: END
// every 0 0$1 trigger StreamModeActive and sBunker do
58080: LD_EXP 29
58084: PUSH
58085: LD_EXP 39
58089: AND
58090: IFFALSE 58110
58092: GO 58094
58094: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
58095: LD_INT 32
58097: PPUSH
58098: LD_OWVAR 2
58102: PPUSH
58103: LD_INT 0
58105: PPUSH
58106: CALL_OW 324
58110: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
58111: LD_EXP 29
58115: PUSH
58116: LD_EXP 40
58120: AND
58121: IFFALSE 58302
58123: GO 58125
58125: DISABLE
58126: LD_INT 0
58128: PPUSH
58129: PPUSH
58130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
58131: LD_ADDR_VAR 0 2
58135: PUSH
58136: LD_INT 22
58138: PUSH
58139: LD_OWVAR 2
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 33
58150: PUSH
58151: LD_INT 3
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PPUSH
58162: CALL_OW 69
58166: ST_TO_ADDR
// if not tmp then
58167: LD_VAR 0 2
58171: NOT
58172: IFFALSE 58176
// exit ;
58174: GO 58302
// side := 0 ;
58176: LD_ADDR_VAR 0 3
58180: PUSH
58181: LD_INT 0
58183: ST_TO_ADDR
// for i := 1 to 8 do
58184: LD_ADDR_VAR 0 1
58188: PUSH
58189: DOUBLE
58190: LD_INT 1
58192: DEC
58193: ST_TO_ADDR
58194: LD_INT 8
58196: PUSH
58197: FOR_TO
58198: IFFALSE 58246
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
58200: LD_OWVAR 2
58204: PUSH
58205: LD_VAR 0 1
58209: NONEQUAL
58210: PUSH
58211: LD_OWVAR 2
58215: PPUSH
58216: LD_VAR 0 1
58220: PPUSH
58221: CALL_OW 81
58225: PUSH
58226: LD_INT 2
58228: EQUAL
58229: AND
58230: IFFALSE 58244
// begin side := i ;
58232: LD_ADDR_VAR 0 3
58236: PUSH
58237: LD_VAR 0 1
58241: ST_TO_ADDR
// break ;
58242: GO 58246
// end ;
58244: GO 58197
58246: POP
58247: POP
// if not side then
58248: LD_VAR 0 3
58252: NOT
58253: IFFALSE 58257
// exit ;
58255: GO 58302
// for i := 1 to tmp do
58257: LD_ADDR_VAR 0 1
58261: PUSH
58262: DOUBLE
58263: LD_INT 1
58265: DEC
58266: ST_TO_ADDR
58267: LD_VAR 0 2
58271: PUSH
58272: FOR_TO
58273: IFFALSE 58300
// if Prob ( 60 ) then
58275: LD_INT 60
58277: PPUSH
58278: CALL_OW 13
58282: IFFALSE 58298
// SetSide ( i , side ) ;
58284: LD_VAR 0 1
58288: PPUSH
58289: LD_VAR 0 3
58293: PPUSH
58294: CALL_OW 235
58298: GO 58272
58300: POP
58301: POP
// end ;
58302: PPOPN 3
58304: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
58305: LD_EXP 29
58309: PUSH
58310: LD_EXP 42
58314: AND
58315: IFFALSE 58434
58317: GO 58319
58319: DISABLE
58320: LD_INT 0
58322: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
58323: LD_ADDR_VAR 0 1
58327: PUSH
58328: LD_INT 22
58330: PUSH
58331: LD_OWVAR 2
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 21
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 3
58352: PUSH
58353: LD_INT 23
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: LIST
58371: PPUSH
58372: CALL_OW 69
58376: PUSH
58377: FOR_IN
58378: IFFALSE 58432
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
58380: LD_VAR 0 1
58384: PPUSH
58385: CALL_OW 257
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: LD_INT 2
58395: PUSH
58396: LD_INT 3
58398: PUSH
58399: LD_INT 4
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: IN
58408: IFFALSE 58430
// SetClass ( un , rand ( 1 , 4 ) ) ;
58410: LD_VAR 0 1
58414: PPUSH
58415: LD_INT 1
58417: PPUSH
58418: LD_INT 4
58420: PPUSH
58421: CALL_OW 12
58425: PPUSH
58426: CALL_OW 336
58430: GO 58377
58432: POP
58433: POP
// end ;
58434: PPOPN 1
58436: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
58437: LD_EXP 29
58441: PUSH
58442: LD_EXP 41
58446: AND
58447: IFFALSE 58526
58449: GO 58451
58451: DISABLE
58452: LD_INT 0
58454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58455: LD_ADDR_VAR 0 1
58459: PUSH
58460: LD_INT 22
58462: PUSH
58463: LD_OWVAR 2
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 21
58474: PUSH
58475: LD_INT 3
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PPUSH
58486: CALL_OW 69
58490: ST_TO_ADDR
// if not tmp then
58491: LD_VAR 0 1
58495: NOT
58496: IFFALSE 58500
// exit ;
58498: GO 58526
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
58500: LD_VAR 0 1
58504: PUSH
58505: LD_INT 1
58507: PPUSH
58508: LD_VAR 0 1
58512: PPUSH
58513: CALL_OW 12
58517: ARRAY
58518: PPUSH
58519: LD_INT 100
58521: PPUSH
58522: CALL_OW 234
// end ;
58526: PPOPN 1
58528: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
58529: LD_EXP 29
58533: PUSH
58534: LD_EXP 43
58538: AND
58539: IFFALSE 58637
58541: GO 58543
58543: DISABLE
58544: LD_INT 0
58546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58547: LD_ADDR_VAR 0 1
58551: PUSH
58552: LD_INT 22
58554: PUSH
58555: LD_OWVAR 2
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 21
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PPUSH
58578: CALL_OW 69
58582: ST_TO_ADDR
// if not tmp then
58583: LD_VAR 0 1
58587: NOT
58588: IFFALSE 58592
// exit ;
58590: GO 58637
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
58592: LD_VAR 0 1
58596: PUSH
58597: LD_INT 1
58599: PPUSH
58600: LD_VAR 0 1
58604: PPUSH
58605: CALL_OW 12
58609: ARRAY
58610: PPUSH
58611: LD_INT 1
58613: PPUSH
58614: LD_INT 4
58616: PPUSH
58617: CALL_OW 12
58621: PPUSH
58622: LD_INT 3000
58624: PPUSH
58625: LD_INT 9000
58627: PPUSH
58628: CALL_OW 12
58632: PPUSH
58633: CALL_OW 492
// end ;
58637: PPOPN 1
58639: END
// every 0 0$1 trigger StreamModeActive and sDepot do
58640: LD_EXP 29
58644: PUSH
58645: LD_EXP 44
58649: AND
58650: IFFALSE 58670
58652: GO 58654
58654: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
58655: LD_INT 1
58657: PPUSH
58658: LD_OWVAR 2
58662: PPUSH
58663: LD_INT 0
58665: PPUSH
58666: CALL_OW 324
58670: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
58671: LD_EXP 29
58675: PUSH
58676: LD_EXP 45
58680: AND
58681: IFFALSE 58764
58683: GO 58685
58685: DISABLE
58686: LD_INT 0
58688: PPUSH
58689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58690: LD_ADDR_VAR 0 2
58694: PUSH
58695: LD_INT 22
58697: PUSH
58698: LD_OWVAR 2
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 21
58709: PUSH
58710: LD_INT 3
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PPUSH
58721: CALL_OW 69
58725: ST_TO_ADDR
// if not tmp then
58726: LD_VAR 0 2
58730: NOT
58731: IFFALSE 58735
// exit ;
58733: GO 58764
// for i in tmp do
58735: LD_ADDR_VAR 0 1
58739: PUSH
58740: LD_VAR 0 2
58744: PUSH
58745: FOR_IN
58746: IFFALSE 58762
// SetBLevel ( i , 10 ) ;
58748: LD_VAR 0 1
58752: PPUSH
58753: LD_INT 10
58755: PPUSH
58756: CALL_OW 241
58760: GO 58745
58762: POP
58763: POP
// end ;
58764: PPOPN 2
58766: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
58767: LD_EXP 29
58771: PUSH
58772: LD_EXP 46
58776: AND
58777: IFFALSE 58888
58779: GO 58781
58781: DISABLE
58782: LD_INT 0
58784: PPUSH
58785: PPUSH
58786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58787: LD_ADDR_VAR 0 3
58791: PUSH
58792: LD_INT 22
58794: PUSH
58795: LD_OWVAR 2
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 25
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PPUSH
58818: CALL_OW 69
58822: ST_TO_ADDR
// if not tmp then
58823: LD_VAR 0 3
58827: NOT
58828: IFFALSE 58832
// exit ;
58830: GO 58888
// un := tmp [ rand ( 1 , tmp ) ] ;
58832: LD_ADDR_VAR 0 2
58836: PUSH
58837: LD_VAR 0 3
58841: PUSH
58842: LD_INT 1
58844: PPUSH
58845: LD_VAR 0 3
58849: PPUSH
58850: CALL_OW 12
58854: ARRAY
58855: ST_TO_ADDR
// if Crawls ( un ) then
58856: LD_VAR 0 2
58860: PPUSH
58861: CALL_OW 318
58865: IFFALSE 58876
// ComWalk ( un ) ;
58867: LD_VAR 0 2
58871: PPUSH
58872: CALL_OW 138
// SetClass ( un , class_sniper ) ;
58876: LD_VAR 0 2
58880: PPUSH
58881: LD_INT 5
58883: PPUSH
58884: CALL_OW 336
// end ;
58888: PPOPN 3
58890: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
58891: LD_EXP 29
58895: PUSH
58896: LD_EXP 47
58900: AND
58901: PUSH
58902: LD_OWVAR 67
58906: PUSH
58907: LD_INT 4
58909: LESS
58910: AND
58911: IFFALSE 58930
58913: GO 58915
58915: DISABLE
// begin Difficulty := Difficulty + 1 ;
58916: LD_ADDR_OWVAR 67
58920: PUSH
58921: LD_OWVAR 67
58925: PUSH
58926: LD_INT 1
58928: PLUS
58929: ST_TO_ADDR
// end ;
58930: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
58931: LD_EXP 29
58935: PUSH
58936: LD_EXP 48
58940: AND
58941: IFFALSE 59044
58943: GO 58945
58945: DISABLE
58946: LD_INT 0
58948: PPUSH
// begin for i := 1 to 5 do
58949: LD_ADDR_VAR 0 1
58953: PUSH
58954: DOUBLE
58955: LD_INT 1
58957: DEC
58958: ST_TO_ADDR
58959: LD_INT 5
58961: PUSH
58962: FOR_TO
58963: IFFALSE 59042
// begin uc_nation := nation_nature ;
58965: LD_ADDR_OWVAR 21
58969: PUSH
58970: LD_INT 0
58972: ST_TO_ADDR
// uc_side := 0 ;
58973: LD_ADDR_OWVAR 20
58977: PUSH
58978: LD_INT 0
58980: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58981: LD_ADDR_OWVAR 29
58985: PUSH
58986: LD_INT 12
58988: PUSH
58989: LD_INT 12
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: ST_TO_ADDR
// hc_agressivity := 20 ;
58996: LD_ADDR_OWVAR 35
59000: PUSH
59001: LD_INT 20
59003: ST_TO_ADDR
// hc_class := class_tiger ;
59004: LD_ADDR_OWVAR 28
59008: PUSH
59009: LD_INT 14
59011: ST_TO_ADDR
// hc_gallery :=  ;
59012: LD_ADDR_OWVAR 33
59016: PUSH
59017: LD_STRING 
59019: ST_TO_ADDR
// hc_name :=  ;
59020: LD_ADDR_OWVAR 26
59024: PUSH
59025: LD_STRING 
59027: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
59028: CALL_OW 44
59032: PPUSH
59033: LD_INT 0
59035: PPUSH
59036: CALL_OW 51
// end ;
59040: GO 58962
59042: POP
59043: POP
// end ;
59044: PPOPN 1
59046: END
// every 0 0$1 trigger StreamModeActive and sBomb do
59047: LD_EXP 29
59051: PUSH
59052: LD_EXP 49
59056: AND
59057: IFFALSE 59066
59059: GO 59061
59061: DISABLE
// StreamSibBomb ;
59062: CALL 59067 0 0
59066: END
// export function StreamSibBomb ; var i , x , y ; begin
59067: LD_INT 0
59069: PPUSH
59070: PPUSH
59071: PPUSH
59072: PPUSH
// result := false ;
59073: LD_ADDR_VAR 0 1
59077: PUSH
59078: LD_INT 0
59080: ST_TO_ADDR
// for i := 1 to 16 do
59081: LD_ADDR_VAR 0 2
59085: PUSH
59086: DOUBLE
59087: LD_INT 1
59089: DEC
59090: ST_TO_ADDR
59091: LD_INT 16
59093: PUSH
59094: FOR_TO
59095: IFFALSE 59294
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59097: LD_ADDR_VAR 0 3
59101: PUSH
59102: LD_INT 10
59104: PUSH
59105: LD_INT 20
59107: PUSH
59108: LD_INT 30
59110: PUSH
59111: LD_INT 40
59113: PUSH
59114: LD_INT 50
59116: PUSH
59117: LD_INT 60
59119: PUSH
59120: LD_INT 70
59122: PUSH
59123: LD_INT 80
59125: PUSH
59126: LD_INT 90
59128: PUSH
59129: LD_INT 100
59131: PUSH
59132: LD_INT 110
59134: PUSH
59135: LD_INT 120
59137: PUSH
59138: LD_INT 130
59140: PUSH
59141: LD_INT 140
59143: PUSH
59144: LD_INT 150
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 1
59166: PPUSH
59167: LD_INT 15
59169: PPUSH
59170: CALL_OW 12
59174: ARRAY
59175: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59176: LD_ADDR_VAR 0 4
59180: PUSH
59181: LD_INT 10
59183: PUSH
59184: LD_INT 20
59186: PUSH
59187: LD_INT 30
59189: PUSH
59190: LD_INT 40
59192: PUSH
59193: LD_INT 50
59195: PUSH
59196: LD_INT 60
59198: PUSH
59199: LD_INT 70
59201: PUSH
59202: LD_INT 80
59204: PUSH
59205: LD_INT 90
59207: PUSH
59208: LD_INT 100
59210: PUSH
59211: LD_INT 110
59213: PUSH
59214: LD_INT 120
59216: PUSH
59217: LD_INT 130
59219: PUSH
59220: LD_INT 140
59222: PUSH
59223: LD_INT 150
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 1
59245: PPUSH
59246: LD_INT 15
59248: PPUSH
59249: CALL_OW 12
59253: ARRAY
59254: ST_TO_ADDR
// if ValidHex ( x , y ) then
59255: LD_VAR 0 3
59259: PPUSH
59260: LD_VAR 0 4
59264: PPUSH
59265: CALL_OW 488
59269: IFFALSE 59292
// begin result := [ x , y ] ;
59271: LD_ADDR_VAR 0 1
59275: PUSH
59276: LD_VAR 0 3
59280: PUSH
59281: LD_VAR 0 4
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: ST_TO_ADDR
// break ;
59290: GO 59294
// end ; end ;
59292: GO 59094
59294: POP
59295: POP
// if result then
59296: LD_VAR 0 1
59300: IFFALSE 59360
// begin ToLua ( playSibBomb() ) ;
59302: LD_STRING playSibBomb()
59304: PPUSH
59305: CALL_OW 559
// wait ( 0 0$14 ) ;
59309: LD_INT 490
59311: PPUSH
59312: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
59316: LD_VAR 0 1
59320: PUSH
59321: LD_INT 1
59323: ARRAY
59324: PPUSH
59325: LD_VAR 0 1
59329: PUSH
59330: LD_INT 2
59332: ARRAY
59333: PPUSH
59334: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
59338: LD_VAR 0 1
59342: PUSH
59343: LD_INT 1
59345: ARRAY
59346: PPUSH
59347: LD_VAR 0 1
59351: PUSH
59352: LD_INT 2
59354: ARRAY
59355: PPUSH
59356: CALL_OW 429
// end ; end ;
59360: LD_VAR 0 1
59364: RET
// every 0 0$1 trigger StreamModeActive and sReset do
59365: LD_EXP 29
59369: PUSH
59370: LD_EXP 51
59374: AND
59375: IFFALSE 59387
59377: GO 59379
59379: DISABLE
// YouLost (  ) ;
59380: LD_STRING 
59382: PPUSH
59383: CALL_OW 104
59387: END
// every 0 0$1 trigger StreamModeActive and sFog do
59388: LD_EXP 29
59392: PUSH
59393: LD_EXP 50
59397: AND
59398: IFFALSE 59412
59400: GO 59402
59402: DISABLE
// FogOff ( your_side ) ;
59403: LD_OWVAR 2
59407: PPUSH
59408: CALL_OW 344
59412: END
// every 0 0$1 trigger StreamModeActive and sSun do
59413: LD_EXP 29
59417: PUSH
59418: LD_EXP 52
59422: AND
59423: IFFALSE 59451
59425: GO 59427
59427: DISABLE
// begin solar_recharge_percent := 0 ;
59428: LD_ADDR_OWVAR 79
59432: PUSH
59433: LD_INT 0
59435: ST_TO_ADDR
// wait ( 5 5$00 ) ;
59436: LD_INT 10500
59438: PPUSH
59439: CALL_OW 67
// solar_recharge_percent := 100 ;
59443: LD_ADDR_OWVAR 79
59447: PUSH
59448: LD_INT 100
59450: ST_TO_ADDR
// end ;
59451: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
59452: LD_EXP 29
59456: PUSH
59457: LD_EXP 53
59461: AND
59462: IFFALSE 59701
59464: GO 59466
59466: DISABLE
59467: LD_INT 0
59469: PPUSH
59470: PPUSH
59471: PPUSH
// begin tmp := [ ] ;
59472: LD_ADDR_VAR 0 3
59476: PUSH
59477: EMPTY
59478: ST_TO_ADDR
// for i := 1 to 6 do
59479: LD_ADDR_VAR 0 1
59483: PUSH
59484: DOUBLE
59485: LD_INT 1
59487: DEC
59488: ST_TO_ADDR
59489: LD_INT 6
59491: PUSH
59492: FOR_TO
59493: IFFALSE 59598
// begin uc_nation := nation_nature ;
59495: LD_ADDR_OWVAR 21
59499: PUSH
59500: LD_INT 0
59502: ST_TO_ADDR
// uc_side := 0 ;
59503: LD_ADDR_OWVAR 20
59507: PUSH
59508: LD_INT 0
59510: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59511: LD_ADDR_OWVAR 29
59515: PUSH
59516: LD_INT 12
59518: PUSH
59519: LD_INT 12
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: ST_TO_ADDR
// hc_agressivity := 20 ;
59526: LD_ADDR_OWVAR 35
59530: PUSH
59531: LD_INT 20
59533: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
59534: LD_ADDR_OWVAR 28
59538: PUSH
59539: LD_INT 17
59541: ST_TO_ADDR
// hc_gallery :=  ;
59542: LD_ADDR_OWVAR 33
59546: PUSH
59547: LD_STRING 
59549: ST_TO_ADDR
// hc_name :=  ;
59550: LD_ADDR_OWVAR 26
59554: PUSH
59555: LD_STRING 
59557: ST_TO_ADDR
// un := CreateHuman ;
59558: LD_ADDR_VAR 0 2
59562: PUSH
59563: CALL_OW 44
59567: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
59568: LD_VAR 0 2
59572: PPUSH
59573: LD_INT 1
59575: PPUSH
59576: CALL_OW 51
// tmp := tmp ^ un ;
59580: LD_ADDR_VAR 0 3
59584: PUSH
59585: LD_VAR 0 3
59589: PUSH
59590: LD_VAR 0 2
59594: ADD
59595: ST_TO_ADDR
// end ;
59596: GO 59492
59598: POP
59599: POP
// repeat wait ( 0 0$1 ) ;
59600: LD_INT 35
59602: PPUSH
59603: CALL_OW 67
// for un in tmp do
59607: LD_ADDR_VAR 0 2
59611: PUSH
59612: LD_VAR 0 3
59616: PUSH
59617: FOR_IN
59618: IFFALSE 59692
// begin if IsDead ( un ) then
59620: LD_VAR 0 2
59624: PPUSH
59625: CALL_OW 301
59629: IFFALSE 59649
// begin tmp := tmp diff un ;
59631: LD_ADDR_VAR 0 3
59635: PUSH
59636: LD_VAR 0 3
59640: PUSH
59641: LD_VAR 0 2
59645: DIFF
59646: ST_TO_ADDR
// continue ;
59647: GO 59617
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
59649: LD_VAR 0 2
59653: PPUSH
59654: LD_INT 3
59656: PUSH
59657: LD_INT 22
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PPUSH
59671: CALL_OW 69
59675: PPUSH
59676: LD_VAR 0 2
59680: PPUSH
59681: CALL_OW 74
59685: PPUSH
59686: CALL_OW 115
// end ;
59690: GO 59617
59692: POP
59693: POP
// until not tmp ;
59694: LD_VAR 0 3
59698: NOT
59699: IFFALSE 59600
// end ;
59701: PPOPN 3
59703: END
// every 0 0$1 trigger StreamModeActive and sTroll do
59704: LD_EXP 29
59708: PUSH
59709: LD_EXP 54
59713: AND
59714: IFFALSE 59768
59716: GO 59718
59718: DISABLE
// begin ToLua ( displayTroll(); ) ;
59719: LD_STRING displayTroll();
59721: PPUSH
59722: CALL_OW 559
// wait ( 3 3$00 ) ;
59726: LD_INT 6300
59728: PPUSH
59729: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59733: LD_STRING hideTroll();
59735: PPUSH
59736: CALL_OW 559
// wait ( 1 1$00 ) ;
59740: LD_INT 2100
59742: PPUSH
59743: CALL_OW 67
// ToLua ( displayTroll(); ) ;
59747: LD_STRING displayTroll();
59749: PPUSH
59750: CALL_OW 559
// wait ( 1 1$00 ) ;
59754: LD_INT 2100
59756: PPUSH
59757: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59761: LD_STRING hideTroll();
59763: PPUSH
59764: CALL_OW 559
// end ;
59768: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
59769: LD_EXP 29
59773: PUSH
59774: LD_EXP 55
59778: AND
59779: IFFALSE 59842
59781: GO 59783
59783: DISABLE
59784: LD_INT 0
59786: PPUSH
// begin p := 0 ;
59787: LD_ADDR_VAR 0 1
59791: PUSH
59792: LD_INT 0
59794: ST_TO_ADDR
// repeat game_speed := 1 ;
59795: LD_ADDR_OWVAR 65
59799: PUSH
59800: LD_INT 1
59802: ST_TO_ADDR
// wait ( 0 0$1 ) ;
59803: LD_INT 35
59805: PPUSH
59806: CALL_OW 67
// p := p + 1 ;
59810: LD_ADDR_VAR 0 1
59814: PUSH
59815: LD_VAR 0 1
59819: PUSH
59820: LD_INT 1
59822: PLUS
59823: ST_TO_ADDR
// until p >= 60 ;
59824: LD_VAR 0 1
59828: PUSH
59829: LD_INT 60
59831: GREATEREQUAL
59832: IFFALSE 59795
// game_speed := 4 ;
59834: LD_ADDR_OWVAR 65
59838: PUSH
59839: LD_INT 4
59841: ST_TO_ADDR
// end ;
59842: PPOPN 1
59844: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
59845: LD_EXP 29
59849: PUSH
59850: LD_EXP 56
59854: AND
59855: IFFALSE 60001
59857: GO 59859
59859: DISABLE
59860: LD_INT 0
59862: PPUSH
59863: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59864: LD_ADDR_VAR 0 1
59868: PUSH
59869: LD_INT 22
59871: PUSH
59872: LD_OWVAR 2
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 2
59883: PUSH
59884: LD_INT 30
59886: PUSH
59887: LD_INT 0
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 30
59896: PUSH
59897: LD_INT 1
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: LIST
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PPUSH
59913: CALL_OW 69
59917: ST_TO_ADDR
// if not depot then
59918: LD_VAR 0 1
59922: NOT
59923: IFFALSE 59927
// exit ;
59925: GO 60001
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
59927: LD_ADDR_VAR 0 2
59931: PUSH
59932: LD_VAR 0 1
59936: PUSH
59937: LD_INT 1
59939: PPUSH
59940: LD_VAR 0 1
59944: PPUSH
59945: CALL_OW 12
59949: ARRAY
59950: PPUSH
59951: CALL_OW 274
59955: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
59956: LD_VAR 0 2
59960: PPUSH
59961: LD_INT 1
59963: PPUSH
59964: LD_INT 0
59966: PPUSH
59967: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
59971: LD_VAR 0 2
59975: PPUSH
59976: LD_INT 2
59978: PPUSH
59979: LD_INT 0
59981: PPUSH
59982: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
59986: LD_VAR 0 2
59990: PPUSH
59991: LD_INT 3
59993: PPUSH
59994: LD_INT 0
59996: PPUSH
59997: CALL_OW 277
// end ;
60001: PPOPN 2
60003: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
60004: LD_EXP 29
60008: PUSH
60009: LD_EXP 57
60013: AND
60014: IFFALSE 60111
60016: GO 60018
60018: DISABLE
60019: LD_INT 0
60021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60022: LD_ADDR_VAR 0 1
60026: PUSH
60027: LD_INT 22
60029: PUSH
60030: LD_OWVAR 2
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 21
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 3
60051: PUSH
60052: LD_INT 23
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: LIST
60070: PPUSH
60071: CALL_OW 69
60075: ST_TO_ADDR
// if not tmp then
60076: LD_VAR 0 1
60080: NOT
60081: IFFALSE 60085
// exit ;
60083: GO 60111
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
60085: LD_VAR 0 1
60089: PUSH
60090: LD_INT 1
60092: PPUSH
60093: LD_VAR 0 1
60097: PPUSH
60098: CALL_OW 12
60102: ARRAY
60103: PPUSH
60104: LD_INT 200
60106: PPUSH
60107: CALL_OW 234
// end ;
60111: PPOPN 1
60113: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
60114: LD_EXP 29
60118: PUSH
60119: LD_EXP 58
60123: AND
60124: IFFALSE 60203
60126: GO 60128
60128: DISABLE
60129: LD_INT 0
60131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
60132: LD_ADDR_VAR 0 1
60136: PUSH
60137: LD_INT 22
60139: PUSH
60140: LD_OWVAR 2
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 21
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PPUSH
60163: CALL_OW 69
60167: ST_TO_ADDR
// if not tmp then
60168: LD_VAR 0 1
60172: NOT
60173: IFFALSE 60177
// exit ;
60175: GO 60203
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
60177: LD_VAR 0 1
60181: PUSH
60182: LD_INT 1
60184: PPUSH
60185: LD_VAR 0 1
60189: PPUSH
60190: CALL_OW 12
60194: ARRAY
60195: PPUSH
60196: LD_INT 60
60198: PPUSH
60199: CALL_OW 234
// end ;
60203: PPOPN 1
60205: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
60206: LD_EXP 29
60210: PUSH
60211: LD_EXP 59
60215: AND
60216: IFFALSE 60315
60218: GO 60220
60220: DISABLE
60221: LD_INT 0
60223: PPUSH
60224: PPUSH
// begin enable ;
60225: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
60226: LD_ADDR_VAR 0 1
60230: PUSH
60231: LD_INT 22
60233: PUSH
60234: LD_OWVAR 2
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 61
60245: PUSH
60246: EMPTY
60247: LIST
60248: PUSH
60249: LD_INT 33
60251: PUSH
60252: LD_INT 2
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: LIST
60263: PPUSH
60264: CALL_OW 69
60268: ST_TO_ADDR
// if not tmp then
60269: LD_VAR 0 1
60273: NOT
60274: IFFALSE 60278
// exit ;
60276: GO 60315
// for i in tmp do
60278: LD_ADDR_VAR 0 2
60282: PUSH
60283: LD_VAR 0 1
60287: PUSH
60288: FOR_IN
60289: IFFALSE 60313
// if IsControledBy ( i ) then
60291: LD_VAR 0 2
60295: PPUSH
60296: CALL_OW 312
60300: IFFALSE 60311
// ComUnlink ( i ) ;
60302: LD_VAR 0 2
60306: PPUSH
60307: CALL_OW 136
60311: GO 60288
60313: POP
60314: POP
// end ;
60315: PPOPN 2
60317: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
60318: LD_EXP 29
60322: PUSH
60323: LD_EXP 60
60327: AND
60328: IFFALSE 60468
60330: GO 60332
60332: DISABLE
60333: LD_INT 0
60335: PPUSH
60336: PPUSH
// begin ToLua ( displayPowell(); ) ;
60337: LD_STRING displayPowell();
60339: PPUSH
60340: CALL_OW 559
// uc_side := 0 ;
60344: LD_ADDR_OWVAR 20
60348: PUSH
60349: LD_INT 0
60351: ST_TO_ADDR
// uc_nation := 2 ;
60352: LD_ADDR_OWVAR 21
60356: PUSH
60357: LD_INT 2
60359: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
60360: LD_ADDR_OWVAR 37
60364: PUSH
60365: LD_INT 14
60367: ST_TO_ADDR
// vc_engine := engine_siberite ;
60368: LD_ADDR_OWVAR 39
60372: PUSH
60373: LD_INT 3
60375: ST_TO_ADDR
// vc_control := control_apeman ;
60376: LD_ADDR_OWVAR 38
60380: PUSH
60381: LD_INT 5
60383: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
60384: LD_ADDR_OWVAR 40
60388: PUSH
60389: LD_INT 29
60391: ST_TO_ADDR
// un := CreateVehicle ;
60392: LD_ADDR_VAR 0 2
60396: PUSH
60397: CALL_OW 45
60401: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60402: LD_VAR 0 2
60406: PPUSH
60407: LD_INT 1
60409: PPUSH
60410: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60414: LD_INT 35
60416: PPUSH
60417: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60421: LD_VAR 0 2
60425: PPUSH
60426: LD_INT 22
60428: PUSH
60429: LD_OWVAR 2
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PPUSH
60438: CALL_OW 69
60442: PPUSH
60443: LD_VAR 0 2
60447: PPUSH
60448: CALL_OW 74
60452: PPUSH
60453: CALL_OW 115
// until IsDead ( un ) ;
60457: LD_VAR 0 2
60461: PPUSH
60462: CALL_OW 301
60466: IFFALSE 60414
// end ;
60468: PPOPN 2
60470: END
// every 0 0$1 trigger StreamModeActive and sStu do
60471: LD_EXP 29
60475: PUSH
60476: LD_EXP 68
60480: AND
60481: IFFALSE 60497
60483: GO 60485
60485: DISABLE
// begin ToLua ( displayStucuk(); ) ;
60486: LD_STRING displayStucuk();
60488: PPUSH
60489: CALL_OW 559
// ResetFog ;
60493: CALL_OW 335
// end ;
60497: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
60498: LD_EXP 29
60502: PUSH
60503: LD_EXP 61
60507: AND
60508: IFFALSE 60649
60510: GO 60512
60512: DISABLE
60513: LD_INT 0
60515: PPUSH
60516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60517: LD_ADDR_VAR 0 2
60521: PUSH
60522: LD_INT 22
60524: PUSH
60525: LD_OWVAR 2
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 21
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PPUSH
60548: CALL_OW 69
60552: ST_TO_ADDR
// if not tmp then
60553: LD_VAR 0 2
60557: NOT
60558: IFFALSE 60562
// exit ;
60560: GO 60649
// un := tmp [ rand ( 1 , tmp ) ] ;
60562: LD_ADDR_VAR 0 1
60566: PUSH
60567: LD_VAR 0 2
60571: PUSH
60572: LD_INT 1
60574: PPUSH
60575: LD_VAR 0 2
60579: PPUSH
60580: CALL_OW 12
60584: ARRAY
60585: ST_TO_ADDR
// SetSide ( un , 0 ) ;
60586: LD_VAR 0 1
60590: PPUSH
60591: LD_INT 0
60593: PPUSH
60594: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
60598: LD_VAR 0 1
60602: PPUSH
60603: LD_OWVAR 3
60607: PUSH
60608: LD_VAR 0 1
60612: DIFF
60613: PPUSH
60614: LD_VAR 0 1
60618: PPUSH
60619: CALL_OW 74
60623: PPUSH
60624: CALL_OW 115
// wait ( 0 0$20 ) ;
60628: LD_INT 700
60630: PPUSH
60631: CALL_OW 67
// SetSide ( un , your_side ) ;
60635: LD_VAR 0 1
60639: PPUSH
60640: LD_OWVAR 2
60644: PPUSH
60645: CALL_OW 235
// end ;
60649: PPOPN 2
60651: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
60652: LD_EXP 29
60656: PUSH
60657: LD_EXP 62
60661: AND
60662: IFFALSE 60768
60664: GO 60666
60666: DISABLE
60667: LD_INT 0
60669: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60670: LD_ADDR_VAR 0 1
60674: PUSH
60675: LD_INT 22
60677: PUSH
60678: LD_OWVAR 2
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 2
60689: PUSH
60690: LD_INT 30
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 30
60702: PUSH
60703: LD_INT 1
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: LIST
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PPUSH
60719: CALL_OW 69
60723: ST_TO_ADDR
// if not depot then
60724: LD_VAR 0 1
60728: NOT
60729: IFFALSE 60733
// exit ;
60731: GO 60768
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
60733: LD_VAR 0 1
60737: PUSH
60738: LD_INT 1
60740: ARRAY
60741: PPUSH
60742: CALL_OW 250
60746: PPUSH
60747: LD_VAR 0 1
60751: PUSH
60752: LD_INT 1
60754: ARRAY
60755: PPUSH
60756: CALL_OW 251
60760: PPUSH
60761: LD_INT 70
60763: PPUSH
60764: CALL_OW 495
// end ;
60768: PPOPN 1
60770: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
60771: LD_EXP 29
60775: PUSH
60776: LD_EXP 63
60780: AND
60781: IFFALSE 60992
60783: GO 60785
60785: DISABLE
60786: LD_INT 0
60788: PPUSH
60789: PPUSH
60790: PPUSH
60791: PPUSH
60792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60793: LD_ADDR_VAR 0 5
60797: PUSH
60798: LD_INT 22
60800: PUSH
60801: LD_OWVAR 2
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 21
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PPUSH
60824: CALL_OW 69
60828: ST_TO_ADDR
// if not tmp then
60829: LD_VAR 0 5
60833: NOT
60834: IFFALSE 60838
// exit ;
60836: GO 60992
// for i in tmp do
60838: LD_ADDR_VAR 0 1
60842: PUSH
60843: LD_VAR 0 5
60847: PUSH
60848: FOR_IN
60849: IFFALSE 60990
// begin d := rand ( 0 , 5 ) ;
60851: LD_ADDR_VAR 0 4
60855: PUSH
60856: LD_INT 0
60858: PPUSH
60859: LD_INT 5
60861: PPUSH
60862: CALL_OW 12
60866: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
60867: LD_ADDR_VAR 0 2
60871: PUSH
60872: LD_VAR 0 1
60876: PPUSH
60877: CALL_OW 250
60881: PPUSH
60882: LD_VAR 0 4
60886: PPUSH
60887: LD_INT 3
60889: PPUSH
60890: LD_INT 12
60892: PPUSH
60893: CALL_OW 12
60897: PPUSH
60898: CALL_OW 272
60902: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
60903: LD_ADDR_VAR 0 3
60907: PUSH
60908: LD_VAR 0 1
60912: PPUSH
60913: CALL_OW 251
60917: PPUSH
60918: LD_VAR 0 4
60922: PPUSH
60923: LD_INT 3
60925: PPUSH
60926: LD_INT 12
60928: PPUSH
60929: CALL_OW 12
60933: PPUSH
60934: CALL_OW 273
60938: ST_TO_ADDR
// if ValidHex ( x , y ) then
60939: LD_VAR 0 2
60943: PPUSH
60944: LD_VAR 0 3
60948: PPUSH
60949: CALL_OW 488
60953: IFFALSE 60988
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
60955: LD_VAR 0 1
60959: PPUSH
60960: LD_VAR 0 2
60964: PPUSH
60965: LD_VAR 0 3
60969: PPUSH
60970: LD_INT 3
60972: PPUSH
60973: LD_INT 6
60975: PPUSH
60976: CALL_OW 12
60980: PPUSH
60981: LD_INT 1
60983: PPUSH
60984: CALL_OW 483
// end ;
60988: GO 60848
60990: POP
60991: POP
// end ;
60992: PPOPN 5
60994: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
60995: LD_EXP 29
60999: PUSH
61000: LD_EXP 64
61004: AND
61005: IFFALSE 61099
61007: GO 61009
61009: DISABLE
61010: LD_INT 0
61012: PPUSH
61013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
61014: LD_ADDR_VAR 0 2
61018: PUSH
61019: LD_INT 22
61021: PUSH
61022: LD_OWVAR 2
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 32
61033: PUSH
61034: LD_INT 1
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 21
61043: PUSH
61044: LD_INT 2
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: LIST
61055: PPUSH
61056: CALL_OW 69
61060: ST_TO_ADDR
// if not tmp then
61061: LD_VAR 0 2
61065: NOT
61066: IFFALSE 61070
// exit ;
61068: GO 61099
// for i in tmp do
61070: LD_ADDR_VAR 0 1
61074: PUSH
61075: LD_VAR 0 2
61079: PUSH
61080: FOR_IN
61081: IFFALSE 61097
// SetFuel ( i , 0 ) ;
61083: LD_VAR 0 1
61087: PPUSH
61088: LD_INT 0
61090: PPUSH
61091: CALL_OW 240
61095: GO 61080
61097: POP
61098: POP
// end ;
61099: PPOPN 2
61101: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
61102: LD_EXP 29
61106: PUSH
61107: LD_EXP 65
61111: AND
61112: IFFALSE 61178
61114: GO 61116
61116: DISABLE
61117: LD_INT 0
61119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61120: LD_ADDR_VAR 0 1
61124: PUSH
61125: LD_INT 22
61127: PUSH
61128: LD_OWVAR 2
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 30
61139: PUSH
61140: LD_INT 29
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PPUSH
61151: CALL_OW 69
61155: ST_TO_ADDR
// if not tmp then
61156: LD_VAR 0 1
61160: NOT
61161: IFFALSE 61165
// exit ;
61163: GO 61178
// DestroyUnit ( tmp [ 1 ] ) ;
61165: LD_VAR 0 1
61169: PUSH
61170: LD_INT 1
61172: ARRAY
61173: PPUSH
61174: CALL_OW 65
// end ;
61178: PPOPN 1
61180: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
61181: LD_EXP 29
61185: PUSH
61186: LD_EXP 67
61190: AND
61191: IFFALSE 61320
61193: GO 61195
61195: DISABLE
61196: LD_INT 0
61198: PPUSH
// begin uc_side := 0 ;
61199: LD_ADDR_OWVAR 20
61203: PUSH
61204: LD_INT 0
61206: ST_TO_ADDR
// uc_nation := nation_arabian ;
61207: LD_ADDR_OWVAR 21
61211: PUSH
61212: LD_INT 2
61214: ST_TO_ADDR
// hc_gallery :=  ;
61215: LD_ADDR_OWVAR 33
61219: PUSH
61220: LD_STRING 
61222: ST_TO_ADDR
// hc_name :=  ;
61223: LD_ADDR_OWVAR 26
61227: PUSH
61228: LD_STRING 
61230: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
61231: LD_INT 1
61233: PPUSH
61234: LD_INT 11
61236: PPUSH
61237: LD_INT 10
61239: PPUSH
61240: CALL_OW 380
// un := CreateHuman ;
61244: LD_ADDR_VAR 0 1
61248: PUSH
61249: CALL_OW 44
61253: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61254: LD_VAR 0 1
61258: PPUSH
61259: LD_INT 1
61261: PPUSH
61262: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
61266: LD_INT 35
61268: PPUSH
61269: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
61273: LD_VAR 0 1
61277: PPUSH
61278: LD_INT 22
61280: PUSH
61281: LD_OWVAR 2
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PPUSH
61290: CALL_OW 69
61294: PPUSH
61295: LD_VAR 0 1
61299: PPUSH
61300: CALL_OW 74
61304: PPUSH
61305: CALL_OW 115
// until IsDead ( un ) ;
61309: LD_VAR 0 1
61313: PPUSH
61314: CALL_OW 301
61318: IFFALSE 61266
// end ;
61320: PPOPN 1
61322: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
61323: LD_EXP 29
61327: PUSH
61328: LD_EXP 69
61332: AND
61333: IFFALSE 61345
61335: GO 61337
61337: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
61338: LD_STRING earthquake(getX(game), 0, 32)
61340: PPUSH
61341: CALL_OW 559
61345: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
61346: LD_EXP 29
61350: PUSH
61351: LD_EXP 70
61355: AND
61356: IFFALSE 61447
61358: GO 61360
61360: DISABLE
61361: LD_INT 0
61363: PPUSH
// begin enable ;
61364: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
61365: LD_ADDR_VAR 0 1
61369: PUSH
61370: LD_INT 22
61372: PUSH
61373: LD_OWVAR 2
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 21
61384: PUSH
61385: LD_INT 2
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 33
61394: PUSH
61395: LD_INT 3
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: LIST
61406: PPUSH
61407: CALL_OW 69
61411: ST_TO_ADDR
// if not tmp then
61412: LD_VAR 0 1
61416: NOT
61417: IFFALSE 61421
// exit ;
61419: GO 61447
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61421: LD_VAR 0 1
61425: PUSH
61426: LD_INT 1
61428: PPUSH
61429: LD_VAR 0 1
61433: PPUSH
61434: CALL_OW 12
61438: ARRAY
61439: PPUSH
61440: LD_INT 1
61442: PPUSH
61443: CALL_OW 234
// end ;
61447: PPOPN 1
61449: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
61450: LD_EXP 29
61454: PUSH
61455: LD_EXP 71
61459: AND
61460: IFFALSE 61601
61462: GO 61464
61464: DISABLE
61465: LD_INT 0
61467: PPUSH
61468: PPUSH
61469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61470: LD_ADDR_VAR 0 3
61474: PUSH
61475: LD_INT 22
61477: PUSH
61478: LD_OWVAR 2
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 25
61489: PUSH
61490: LD_INT 1
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PPUSH
61501: CALL_OW 69
61505: ST_TO_ADDR
// if not tmp then
61506: LD_VAR 0 3
61510: NOT
61511: IFFALSE 61515
// exit ;
61513: GO 61601
// un := tmp [ rand ( 1 , tmp ) ] ;
61515: LD_ADDR_VAR 0 2
61519: PUSH
61520: LD_VAR 0 3
61524: PUSH
61525: LD_INT 1
61527: PPUSH
61528: LD_VAR 0 3
61532: PPUSH
61533: CALL_OW 12
61537: ARRAY
61538: ST_TO_ADDR
// if Crawls ( un ) then
61539: LD_VAR 0 2
61543: PPUSH
61544: CALL_OW 318
61548: IFFALSE 61559
// ComWalk ( un ) ;
61550: LD_VAR 0 2
61554: PPUSH
61555: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
61559: LD_VAR 0 2
61563: PPUSH
61564: LD_INT 9
61566: PPUSH
61567: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
61571: LD_INT 28
61573: PPUSH
61574: LD_OWVAR 2
61578: PPUSH
61579: LD_INT 2
61581: PPUSH
61582: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
61586: LD_INT 29
61588: PPUSH
61589: LD_OWVAR 2
61593: PPUSH
61594: LD_INT 2
61596: PPUSH
61597: CALL_OW 322
// end ;
61601: PPOPN 3
61603: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
61604: LD_EXP 29
61608: PUSH
61609: LD_EXP 72
61613: AND
61614: IFFALSE 61725
61616: GO 61618
61618: DISABLE
61619: LD_INT 0
61621: PPUSH
61622: PPUSH
61623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61624: LD_ADDR_VAR 0 3
61628: PUSH
61629: LD_INT 22
61631: PUSH
61632: LD_OWVAR 2
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 25
61643: PUSH
61644: LD_INT 1
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PPUSH
61655: CALL_OW 69
61659: ST_TO_ADDR
// if not tmp then
61660: LD_VAR 0 3
61664: NOT
61665: IFFALSE 61669
// exit ;
61667: GO 61725
// un := tmp [ rand ( 1 , tmp ) ] ;
61669: LD_ADDR_VAR 0 2
61673: PUSH
61674: LD_VAR 0 3
61678: PUSH
61679: LD_INT 1
61681: PPUSH
61682: LD_VAR 0 3
61686: PPUSH
61687: CALL_OW 12
61691: ARRAY
61692: ST_TO_ADDR
// if Crawls ( un ) then
61693: LD_VAR 0 2
61697: PPUSH
61698: CALL_OW 318
61702: IFFALSE 61713
// ComWalk ( un ) ;
61704: LD_VAR 0 2
61708: PPUSH
61709: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61713: LD_VAR 0 2
61717: PPUSH
61718: LD_INT 8
61720: PPUSH
61721: CALL_OW 336
// end ;
61725: PPOPN 3
61727: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
61728: LD_EXP 29
61732: PUSH
61733: LD_EXP 73
61737: AND
61738: IFFALSE 61882
61740: GO 61742
61742: DISABLE
61743: LD_INT 0
61745: PPUSH
61746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
61747: LD_ADDR_VAR 0 2
61751: PUSH
61752: LD_INT 22
61754: PUSH
61755: LD_OWVAR 2
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 21
61766: PUSH
61767: LD_INT 2
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 2
61776: PUSH
61777: LD_INT 34
61779: PUSH
61780: LD_INT 12
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 34
61789: PUSH
61790: LD_INT 51
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 34
61799: PUSH
61800: LD_INT 32
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: LIST
61817: PPUSH
61818: CALL_OW 69
61822: ST_TO_ADDR
// if not tmp then
61823: LD_VAR 0 2
61827: NOT
61828: IFFALSE 61832
// exit ;
61830: GO 61882
// for i in tmp do
61832: LD_ADDR_VAR 0 1
61836: PUSH
61837: LD_VAR 0 2
61841: PUSH
61842: FOR_IN
61843: IFFALSE 61880
// if GetCargo ( i , mat_artifact ) = 0 then
61845: LD_VAR 0 1
61849: PPUSH
61850: LD_INT 4
61852: PPUSH
61853: CALL_OW 289
61857: PUSH
61858: LD_INT 0
61860: EQUAL
61861: IFFALSE 61878
// SetCargo ( i , mat_siberit , 100 ) ;
61863: LD_VAR 0 1
61867: PPUSH
61868: LD_INT 3
61870: PPUSH
61871: LD_INT 100
61873: PPUSH
61874: CALL_OW 290
61878: GO 61842
61880: POP
61881: POP
// end ;
61882: PPOPN 2
61884: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
61885: LD_EXP 29
61889: PUSH
61890: LD_EXP 74
61894: AND
61895: IFFALSE 62078
61897: GO 61899
61899: DISABLE
61900: LD_INT 0
61902: PPUSH
61903: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61904: LD_ADDR_VAR 0 2
61908: PUSH
61909: LD_INT 22
61911: PUSH
61912: LD_OWVAR 2
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PPUSH
61921: CALL_OW 69
61925: ST_TO_ADDR
// if not tmp then
61926: LD_VAR 0 2
61930: NOT
61931: IFFALSE 61935
// exit ;
61933: GO 62078
// for i := 1 to 2 do
61935: LD_ADDR_VAR 0 1
61939: PUSH
61940: DOUBLE
61941: LD_INT 1
61943: DEC
61944: ST_TO_ADDR
61945: LD_INT 2
61947: PUSH
61948: FOR_TO
61949: IFFALSE 62076
// begin uc_side := your_side ;
61951: LD_ADDR_OWVAR 20
61955: PUSH
61956: LD_OWVAR 2
61960: ST_TO_ADDR
// uc_nation := nation_american ;
61961: LD_ADDR_OWVAR 21
61965: PUSH
61966: LD_INT 1
61968: ST_TO_ADDR
// vc_chassis := us_morphling ;
61969: LD_ADDR_OWVAR 37
61973: PUSH
61974: LD_INT 5
61976: ST_TO_ADDR
// vc_engine := engine_siberite ;
61977: LD_ADDR_OWVAR 39
61981: PUSH
61982: LD_INT 3
61984: ST_TO_ADDR
// vc_control := control_computer ;
61985: LD_ADDR_OWVAR 38
61989: PUSH
61990: LD_INT 3
61992: ST_TO_ADDR
// vc_weapon := us_double_laser ;
61993: LD_ADDR_OWVAR 40
61997: PUSH
61998: LD_INT 10
62000: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
62001: LD_VAR 0 2
62005: PUSH
62006: LD_INT 1
62008: ARRAY
62009: PPUSH
62010: CALL_OW 310
62014: NOT
62015: IFFALSE 62062
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
62017: CALL_OW 45
62021: PPUSH
62022: LD_VAR 0 2
62026: PUSH
62027: LD_INT 1
62029: ARRAY
62030: PPUSH
62031: CALL_OW 250
62035: PPUSH
62036: LD_VAR 0 2
62040: PUSH
62041: LD_INT 1
62043: ARRAY
62044: PPUSH
62045: CALL_OW 251
62049: PPUSH
62050: LD_INT 12
62052: PPUSH
62053: LD_INT 1
62055: PPUSH
62056: CALL_OW 50
62060: GO 62074
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
62062: CALL_OW 45
62066: PPUSH
62067: LD_INT 1
62069: PPUSH
62070: CALL_OW 51
// end ;
62074: GO 61948
62076: POP
62077: POP
// end ;
62078: PPOPN 2
62080: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
62081: LD_EXP 29
62085: PUSH
62086: LD_EXP 75
62090: AND
62091: IFFALSE 62313
62093: GO 62095
62095: DISABLE
62096: LD_INT 0
62098: PPUSH
62099: PPUSH
62100: PPUSH
62101: PPUSH
62102: PPUSH
62103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62104: LD_ADDR_VAR 0 6
62108: PUSH
62109: LD_INT 22
62111: PUSH
62112: LD_OWVAR 2
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 21
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 3
62133: PUSH
62134: LD_INT 23
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: LIST
62152: PPUSH
62153: CALL_OW 69
62157: ST_TO_ADDR
// if not tmp then
62158: LD_VAR 0 6
62162: NOT
62163: IFFALSE 62167
// exit ;
62165: GO 62313
// s1 := rand ( 1 , 4 ) ;
62167: LD_ADDR_VAR 0 2
62171: PUSH
62172: LD_INT 1
62174: PPUSH
62175: LD_INT 4
62177: PPUSH
62178: CALL_OW 12
62182: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
62183: LD_ADDR_VAR 0 4
62187: PUSH
62188: LD_VAR 0 6
62192: PUSH
62193: LD_INT 1
62195: ARRAY
62196: PPUSH
62197: LD_VAR 0 2
62201: PPUSH
62202: CALL_OW 259
62206: ST_TO_ADDR
// if s1 = 1 then
62207: LD_VAR 0 2
62211: PUSH
62212: LD_INT 1
62214: EQUAL
62215: IFFALSE 62235
// s2 := rand ( 2 , 4 ) else
62217: LD_ADDR_VAR 0 3
62221: PUSH
62222: LD_INT 2
62224: PPUSH
62225: LD_INT 4
62227: PPUSH
62228: CALL_OW 12
62232: ST_TO_ADDR
62233: GO 62243
// s2 := 1 ;
62235: LD_ADDR_VAR 0 3
62239: PUSH
62240: LD_INT 1
62242: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
62243: LD_ADDR_VAR 0 5
62247: PUSH
62248: LD_VAR 0 6
62252: PUSH
62253: LD_INT 1
62255: ARRAY
62256: PPUSH
62257: LD_VAR 0 3
62261: PPUSH
62262: CALL_OW 259
62266: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
62267: LD_VAR 0 6
62271: PUSH
62272: LD_INT 1
62274: ARRAY
62275: PPUSH
62276: LD_VAR 0 2
62280: PPUSH
62281: LD_VAR 0 5
62285: PPUSH
62286: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
62290: LD_VAR 0 6
62294: PUSH
62295: LD_INT 1
62297: ARRAY
62298: PPUSH
62299: LD_VAR 0 3
62303: PPUSH
62304: LD_VAR 0 4
62308: PPUSH
62309: CALL_OW 237
// end ;
62313: PPOPN 6
62315: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
62316: LD_EXP 29
62320: PUSH
62321: LD_EXP 76
62325: AND
62326: IFFALSE 62405
62328: GO 62330
62330: DISABLE
62331: LD_INT 0
62333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
62334: LD_ADDR_VAR 0 1
62338: PUSH
62339: LD_INT 22
62341: PUSH
62342: LD_OWVAR 2
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 30
62353: PUSH
62354: LD_INT 3
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PPUSH
62365: CALL_OW 69
62369: ST_TO_ADDR
// if not tmp then
62370: LD_VAR 0 1
62374: NOT
62375: IFFALSE 62379
// exit ;
62377: GO 62405
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
62379: LD_VAR 0 1
62383: PUSH
62384: LD_INT 1
62386: PPUSH
62387: LD_VAR 0 1
62391: PPUSH
62392: CALL_OW 12
62396: ARRAY
62397: PPUSH
62398: LD_INT 1
62400: PPUSH
62401: CALL_OW 234
// end ;
62405: PPOPN 1
62407: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
62408: LD_EXP 29
62412: PUSH
62413: LD_EXP 77
62417: AND
62418: IFFALSE 62530
62420: GO 62422
62422: DISABLE
62423: LD_INT 0
62425: PPUSH
62426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
62427: LD_ADDR_VAR 0 2
62431: PUSH
62432: LD_INT 22
62434: PUSH
62435: LD_OWVAR 2
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: PUSH
62447: LD_INT 30
62449: PUSH
62450: LD_INT 27
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 30
62459: PUSH
62460: LD_INT 26
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 30
62469: PUSH
62470: LD_INT 28
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PPUSH
62487: CALL_OW 69
62491: ST_TO_ADDR
// if not tmp then
62492: LD_VAR 0 2
62496: NOT
62497: IFFALSE 62501
// exit ;
62499: GO 62530
// for i in tmp do
62501: LD_ADDR_VAR 0 1
62505: PUSH
62506: LD_VAR 0 2
62510: PUSH
62511: FOR_IN
62512: IFFALSE 62528
// SetLives ( i , 1 ) ;
62514: LD_VAR 0 1
62518: PPUSH
62519: LD_INT 1
62521: PPUSH
62522: CALL_OW 234
62526: GO 62511
62528: POP
62529: POP
// end ;
62530: PPOPN 2
62532: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
62533: LD_EXP 29
62537: PUSH
62538: LD_EXP 78
62542: AND
62543: IFFALSE 62830
62545: GO 62547
62547: DISABLE
62548: LD_INT 0
62550: PPUSH
62551: PPUSH
62552: PPUSH
// begin i := rand ( 1 , 7 ) ;
62553: LD_ADDR_VAR 0 1
62557: PUSH
62558: LD_INT 1
62560: PPUSH
62561: LD_INT 7
62563: PPUSH
62564: CALL_OW 12
62568: ST_TO_ADDR
// case i of 1 :
62569: LD_VAR 0 1
62573: PUSH
62574: LD_INT 1
62576: DOUBLE
62577: EQUAL
62578: IFTRUE 62582
62580: GO 62592
62582: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
62583: LD_STRING earthquake(getX(game), 0, 32)
62585: PPUSH
62586: CALL_OW 559
62590: GO 62830
62592: LD_INT 2
62594: DOUBLE
62595: EQUAL
62596: IFTRUE 62600
62598: GO 62614
62600: POP
// begin ToLua ( displayStucuk(); ) ;
62601: LD_STRING displayStucuk();
62603: PPUSH
62604: CALL_OW 559
// ResetFog ;
62608: CALL_OW 335
// end ; 3 :
62612: GO 62830
62614: LD_INT 3
62616: DOUBLE
62617: EQUAL
62618: IFTRUE 62622
62620: GO 62726
62622: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62623: LD_ADDR_VAR 0 2
62627: PUSH
62628: LD_INT 22
62630: PUSH
62631: LD_OWVAR 2
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 25
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PPUSH
62654: CALL_OW 69
62658: ST_TO_ADDR
// if not tmp then
62659: LD_VAR 0 2
62663: NOT
62664: IFFALSE 62668
// exit ;
62666: GO 62830
// un := tmp [ rand ( 1 , tmp ) ] ;
62668: LD_ADDR_VAR 0 3
62672: PUSH
62673: LD_VAR 0 2
62677: PUSH
62678: LD_INT 1
62680: PPUSH
62681: LD_VAR 0 2
62685: PPUSH
62686: CALL_OW 12
62690: ARRAY
62691: ST_TO_ADDR
// if Crawls ( un ) then
62692: LD_VAR 0 3
62696: PPUSH
62697: CALL_OW 318
62701: IFFALSE 62712
// ComWalk ( un ) ;
62703: LD_VAR 0 3
62707: PPUSH
62708: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62712: LD_VAR 0 3
62716: PPUSH
62717: LD_INT 8
62719: PPUSH
62720: CALL_OW 336
// end ; 4 :
62724: GO 62830
62726: LD_INT 4
62728: DOUBLE
62729: EQUAL
62730: IFTRUE 62734
62732: GO 62808
62734: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
62735: LD_ADDR_VAR 0 2
62739: PUSH
62740: LD_INT 22
62742: PUSH
62743: LD_OWVAR 2
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 30
62754: PUSH
62755: LD_INT 29
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PPUSH
62766: CALL_OW 69
62770: ST_TO_ADDR
// if not tmp then
62771: LD_VAR 0 2
62775: NOT
62776: IFFALSE 62780
// exit ;
62778: GO 62830
// CenterNowOnUnits ( tmp [ 1 ] ) ;
62780: LD_VAR 0 2
62784: PUSH
62785: LD_INT 1
62787: ARRAY
62788: PPUSH
62789: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
62793: LD_VAR 0 2
62797: PUSH
62798: LD_INT 1
62800: ARRAY
62801: PPUSH
62802: CALL_OW 65
// end ; 5 .. 7 :
62806: GO 62830
62808: LD_INT 5
62810: DOUBLE
62811: GREATEREQUAL
62812: IFFALSE 62820
62814: LD_INT 7
62816: DOUBLE
62817: LESSEQUAL
62818: IFTRUE 62822
62820: GO 62829
62822: POP
// StreamSibBomb ; end ;
62823: CALL 59067 0 0
62827: GO 62830
62829: POP
// end ;
62830: PPOPN 3
62832: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
62833: LD_EXP 29
62837: PUSH
62838: LD_EXP 79
62842: AND
62843: IFFALSE 62999
62845: GO 62847
62847: DISABLE
62848: LD_INT 0
62850: PPUSH
62851: PPUSH
62852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
62853: LD_ADDR_VAR 0 2
62857: PUSH
62858: LD_INT 81
62860: PUSH
62861: LD_OWVAR 2
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 2
62872: PUSH
62873: LD_INT 21
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 21
62885: PUSH
62886: LD_INT 2
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: LIST
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PPUSH
62902: CALL_OW 69
62906: ST_TO_ADDR
// if not tmp then
62907: LD_VAR 0 2
62911: NOT
62912: IFFALSE 62916
// exit ;
62914: GO 62999
// p := 0 ;
62916: LD_ADDR_VAR 0 3
62920: PUSH
62921: LD_INT 0
62923: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62924: LD_INT 35
62926: PPUSH
62927: CALL_OW 67
// p := p + 1 ;
62931: LD_ADDR_VAR 0 3
62935: PUSH
62936: LD_VAR 0 3
62940: PUSH
62941: LD_INT 1
62943: PLUS
62944: ST_TO_ADDR
// for i in tmp do
62945: LD_ADDR_VAR 0 1
62949: PUSH
62950: LD_VAR 0 2
62954: PUSH
62955: FOR_IN
62956: IFFALSE 62987
// if GetLives ( i ) < 1000 then
62958: LD_VAR 0 1
62962: PPUSH
62963: CALL_OW 256
62967: PUSH
62968: LD_INT 1000
62970: LESS
62971: IFFALSE 62985
// SetLives ( i , 1000 ) ;
62973: LD_VAR 0 1
62977: PPUSH
62978: LD_INT 1000
62980: PPUSH
62981: CALL_OW 234
62985: GO 62955
62987: POP
62988: POP
// until p > 20 ;
62989: LD_VAR 0 3
62993: PUSH
62994: LD_INT 20
62996: GREATER
62997: IFFALSE 62924
// end ;
62999: PPOPN 3
63001: END
// every 0 0$1 trigger StreamModeActive and sTime do
63002: LD_EXP 29
63006: PUSH
63007: LD_EXP 80
63011: AND
63012: IFFALSE 63047
63014: GO 63016
63016: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
63017: LD_INT 28
63019: PPUSH
63020: LD_OWVAR 2
63024: PPUSH
63025: LD_INT 2
63027: PPUSH
63028: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
63032: LD_INT 30
63034: PPUSH
63035: LD_OWVAR 2
63039: PPUSH
63040: LD_INT 2
63042: PPUSH
63043: CALL_OW 322
// end ;
63047: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
63048: LD_EXP 29
63052: PUSH
63053: LD_EXP 81
63057: AND
63058: IFFALSE 63179
63060: GO 63062
63062: DISABLE
63063: LD_INT 0
63065: PPUSH
63066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63067: LD_ADDR_VAR 0 2
63071: PUSH
63072: LD_INT 22
63074: PUSH
63075: LD_OWVAR 2
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 21
63086: PUSH
63087: LD_INT 1
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 3
63096: PUSH
63097: LD_INT 23
63099: PUSH
63100: LD_INT 0
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: LIST
63115: PPUSH
63116: CALL_OW 69
63120: ST_TO_ADDR
// if not tmp then
63121: LD_VAR 0 2
63125: NOT
63126: IFFALSE 63130
// exit ;
63128: GO 63179
// for i in tmp do
63130: LD_ADDR_VAR 0 1
63134: PUSH
63135: LD_VAR 0 2
63139: PUSH
63140: FOR_IN
63141: IFFALSE 63177
// begin if Crawls ( i ) then
63143: LD_VAR 0 1
63147: PPUSH
63148: CALL_OW 318
63152: IFFALSE 63163
// ComWalk ( i ) ;
63154: LD_VAR 0 1
63158: PPUSH
63159: CALL_OW 138
// SetClass ( i , 2 ) ;
63163: LD_VAR 0 1
63167: PPUSH
63168: LD_INT 2
63170: PPUSH
63171: CALL_OW 336
// end ;
63175: GO 63140
63177: POP
63178: POP
// end ;
63179: PPOPN 2
63181: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
63182: LD_EXP 29
63186: PUSH
63187: LD_EXP 82
63191: AND
63192: IFFALSE 63480
63194: GO 63196
63196: DISABLE
63197: LD_INT 0
63199: PPUSH
63200: PPUSH
63201: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
63202: LD_OWVAR 2
63206: PPUSH
63207: LD_INT 9
63209: PPUSH
63210: LD_INT 1
63212: PPUSH
63213: LD_INT 1
63215: PPUSH
63216: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
63220: LD_INT 9
63222: PPUSH
63223: LD_OWVAR 2
63227: PPUSH
63228: CALL_OW 343
// uc_side := 9 ;
63232: LD_ADDR_OWVAR 20
63236: PUSH
63237: LD_INT 9
63239: ST_TO_ADDR
// uc_nation := 2 ;
63240: LD_ADDR_OWVAR 21
63244: PUSH
63245: LD_INT 2
63247: ST_TO_ADDR
// hc_name := Dark Warrior ;
63248: LD_ADDR_OWVAR 26
63252: PUSH
63253: LD_STRING Dark Warrior
63255: ST_TO_ADDR
// hc_gallery :=  ;
63256: LD_ADDR_OWVAR 33
63260: PUSH
63261: LD_STRING 
63263: ST_TO_ADDR
// hc_noskilllimit := true ;
63264: LD_ADDR_OWVAR 76
63268: PUSH
63269: LD_INT 1
63271: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
63272: LD_ADDR_OWVAR 31
63276: PUSH
63277: LD_INT 30
63279: PUSH
63280: LD_INT 30
63282: PUSH
63283: LD_INT 30
63285: PUSH
63286: LD_INT 30
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: ST_TO_ADDR
// un := CreateHuman ;
63295: LD_ADDR_VAR 0 3
63299: PUSH
63300: CALL_OW 44
63304: ST_TO_ADDR
// hc_noskilllimit := false ;
63305: LD_ADDR_OWVAR 76
63309: PUSH
63310: LD_INT 0
63312: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63313: LD_VAR 0 3
63317: PPUSH
63318: LD_INT 1
63320: PPUSH
63321: CALL_OW 51
// ToLua ( playRanger() ) ;
63325: LD_STRING playRanger()
63327: PPUSH
63328: CALL_OW 559
// p := 0 ;
63332: LD_ADDR_VAR 0 2
63336: PUSH
63337: LD_INT 0
63339: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63340: LD_INT 35
63342: PPUSH
63343: CALL_OW 67
// p := p + 1 ;
63347: LD_ADDR_VAR 0 2
63351: PUSH
63352: LD_VAR 0 2
63356: PUSH
63357: LD_INT 1
63359: PLUS
63360: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
63361: LD_VAR 0 3
63365: PPUSH
63366: CALL_OW 256
63370: PUSH
63371: LD_INT 1000
63373: LESS
63374: IFFALSE 63388
// SetLives ( un , 1000 ) ;
63376: LD_VAR 0 3
63380: PPUSH
63381: LD_INT 1000
63383: PPUSH
63384: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
63388: LD_VAR 0 3
63392: PPUSH
63393: LD_INT 81
63395: PUSH
63396: LD_OWVAR 2
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 91
63407: PUSH
63408: LD_VAR 0 3
63412: PUSH
63413: LD_INT 30
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: LIST
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PPUSH
63425: CALL_OW 69
63429: PPUSH
63430: LD_VAR 0 3
63434: PPUSH
63435: CALL_OW 74
63439: PPUSH
63440: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
63444: LD_VAR 0 2
63448: PUSH
63449: LD_INT 80
63451: GREATER
63452: PUSH
63453: LD_VAR 0 3
63457: PPUSH
63458: CALL_OW 301
63462: OR
63463: IFFALSE 63340
// if un then
63465: LD_VAR 0 3
63469: IFFALSE 63480
// RemoveUnit ( un ) ;
63471: LD_VAR 0 3
63475: PPUSH
63476: CALL_OW 64
// end ;
63480: PPOPN 3
63482: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
63483: LD_EXP 83
63487: IFFALSE 63603
63489: GO 63491
63491: DISABLE
63492: LD_INT 0
63494: PPUSH
63495: PPUSH
63496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63497: LD_ADDR_VAR 0 2
63501: PUSH
63502: LD_INT 81
63504: PUSH
63505: LD_OWVAR 2
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 21
63516: PUSH
63517: LD_INT 1
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PPUSH
63528: CALL_OW 69
63532: ST_TO_ADDR
// ToLua ( playComputer() ) ;
63533: LD_STRING playComputer()
63535: PPUSH
63536: CALL_OW 559
// if not tmp then
63540: LD_VAR 0 2
63544: NOT
63545: IFFALSE 63549
// exit ;
63547: GO 63603
// for i in tmp do
63549: LD_ADDR_VAR 0 1
63553: PUSH
63554: LD_VAR 0 2
63558: PUSH
63559: FOR_IN
63560: IFFALSE 63601
// for j := 1 to 4 do
63562: LD_ADDR_VAR 0 3
63566: PUSH
63567: DOUBLE
63568: LD_INT 1
63570: DEC
63571: ST_TO_ADDR
63572: LD_INT 4
63574: PUSH
63575: FOR_TO
63576: IFFALSE 63597
// SetSkill ( i , j , 10 ) ;
63578: LD_VAR 0 1
63582: PPUSH
63583: LD_VAR 0 3
63587: PPUSH
63588: LD_INT 10
63590: PPUSH
63591: CALL_OW 237
63595: GO 63575
63597: POP
63598: POP
63599: GO 63559
63601: POP
63602: POP
// end ;
63603: PPOPN 3
63605: END
// every 0 0$1 trigger s30 do var i , tmp ;
63606: LD_EXP 84
63610: IFFALSE 63679
63612: GO 63614
63614: DISABLE
63615: LD_INT 0
63617: PPUSH
63618: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63619: LD_ADDR_VAR 0 2
63623: PUSH
63624: LD_INT 22
63626: PUSH
63627: LD_OWVAR 2
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PPUSH
63636: CALL_OW 69
63640: ST_TO_ADDR
// if not tmp then
63641: LD_VAR 0 2
63645: NOT
63646: IFFALSE 63650
// exit ;
63648: GO 63679
// for i in tmp do
63650: LD_ADDR_VAR 0 1
63654: PUSH
63655: LD_VAR 0 2
63659: PUSH
63660: FOR_IN
63661: IFFALSE 63677
// SetLives ( i , 300 ) ;
63663: LD_VAR 0 1
63667: PPUSH
63668: LD_INT 300
63670: PPUSH
63671: CALL_OW 234
63675: GO 63660
63677: POP
63678: POP
// end ;
63679: PPOPN 2
63681: END
// every 0 0$1 trigger s60 do var i , tmp ;
63682: LD_EXP 85
63686: IFFALSE 63755
63688: GO 63690
63690: DISABLE
63691: LD_INT 0
63693: PPUSH
63694: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63695: LD_ADDR_VAR 0 2
63699: PUSH
63700: LD_INT 22
63702: PUSH
63703: LD_OWVAR 2
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PPUSH
63712: CALL_OW 69
63716: ST_TO_ADDR
// if not tmp then
63717: LD_VAR 0 2
63721: NOT
63722: IFFALSE 63726
// exit ;
63724: GO 63755
// for i in tmp do
63726: LD_ADDR_VAR 0 1
63730: PUSH
63731: LD_VAR 0 2
63735: PUSH
63736: FOR_IN
63737: IFFALSE 63753
// SetLives ( i , 600 ) ;
63739: LD_VAR 0 1
63743: PPUSH
63744: LD_INT 600
63746: PPUSH
63747: CALL_OW 234
63751: GO 63736
63753: POP
63754: POP
// end ;
63755: PPOPN 2
63757: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63758: LD_INT 0
63760: PPUSH
// case cmd of 301 :
63761: LD_VAR 0 1
63765: PUSH
63766: LD_INT 301
63768: DOUBLE
63769: EQUAL
63770: IFTRUE 63774
63772: GO 63806
63774: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
63775: LD_VAR 0 6
63779: PPUSH
63780: LD_VAR 0 7
63784: PPUSH
63785: LD_VAR 0 8
63789: PPUSH
63790: LD_VAR 0 4
63794: PPUSH
63795: LD_VAR 0 5
63799: PPUSH
63800: CALL 65015 0 5
63804: GO 63927
63806: LD_INT 302
63808: DOUBLE
63809: EQUAL
63810: IFTRUE 63814
63812: GO 63851
63814: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
63815: LD_VAR 0 6
63819: PPUSH
63820: LD_VAR 0 7
63824: PPUSH
63825: LD_VAR 0 8
63829: PPUSH
63830: LD_VAR 0 9
63834: PPUSH
63835: LD_VAR 0 4
63839: PPUSH
63840: LD_VAR 0 5
63844: PPUSH
63845: CALL 65106 0 6
63849: GO 63927
63851: LD_INT 303
63853: DOUBLE
63854: EQUAL
63855: IFTRUE 63859
63857: GO 63896
63859: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
63860: LD_VAR 0 6
63864: PPUSH
63865: LD_VAR 0 7
63869: PPUSH
63870: LD_VAR 0 8
63874: PPUSH
63875: LD_VAR 0 9
63879: PPUSH
63880: LD_VAR 0 4
63884: PPUSH
63885: LD_VAR 0 5
63889: PPUSH
63890: CALL 63932 0 6
63894: GO 63927
63896: LD_INT 304
63898: DOUBLE
63899: EQUAL
63900: IFTRUE 63904
63902: GO 63926
63904: POP
// hHackTeleport ( unit , x , y ) ; end ;
63905: LD_VAR 0 2
63909: PPUSH
63910: LD_VAR 0 4
63914: PPUSH
63915: LD_VAR 0 5
63919: PPUSH
63920: CALL 65699 0 3
63924: GO 63927
63926: POP
// end ;
63927: LD_VAR 0 12
63931: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
63932: LD_INT 0
63934: PPUSH
63935: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
63936: LD_VAR 0 1
63940: PUSH
63941: LD_INT 1
63943: LESS
63944: PUSH
63945: LD_VAR 0 1
63949: PUSH
63950: LD_INT 3
63952: GREATER
63953: OR
63954: PUSH
63955: LD_VAR 0 5
63959: PPUSH
63960: LD_VAR 0 6
63964: PPUSH
63965: CALL_OW 428
63969: OR
63970: IFFALSE 63974
// exit ;
63972: GO 64702
// uc_side := your_side ;
63974: LD_ADDR_OWVAR 20
63978: PUSH
63979: LD_OWVAR 2
63983: ST_TO_ADDR
// uc_nation := nation ;
63984: LD_ADDR_OWVAR 21
63988: PUSH
63989: LD_VAR 0 1
63993: ST_TO_ADDR
// bc_level = 1 ;
63994: LD_ADDR_OWVAR 43
63998: PUSH
63999: LD_INT 1
64001: ST_TO_ADDR
// case btype of 1 :
64002: LD_VAR 0 2
64006: PUSH
64007: LD_INT 1
64009: DOUBLE
64010: EQUAL
64011: IFTRUE 64015
64013: GO 64026
64015: POP
// bc_type := b_depot ; 2 :
64016: LD_ADDR_OWVAR 42
64020: PUSH
64021: LD_INT 0
64023: ST_TO_ADDR
64024: GO 64646
64026: LD_INT 2
64028: DOUBLE
64029: EQUAL
64030: IFTRUE 64034
64032: GO 64045
64034: POP
// bc_type := b_warehouse ; 3 :
64035: LD_ADDR_OWVAR 42
64039: PUSH
64040: LD_INT 1
64042: ST_TO_ADDR
64043: GO 64646
64045: LD_INT 3
64047: DOUBLE
64048: EQUAL
64049: IFTRUE 64053
64051: GO 64064
64053: POP
// bc_type := b_lab ; 4 .. 9 :
64054: LD_ADDR_OWVAR 42
64058: PUSH
64059: LD_INT 6
64061: ST_TO_ADDR
64062: GO 64646
64064: LD_INT 4
64066: DOUBLE
64067: GREATEREQUAL
64068: IFFALSE 64076
64070: LD_INT 9
64072: DOUBLE
64073: LESSEQUAL
64074: IFTRUE 64078
64076: GO 64138
64078: POP
// begin bc_type := b_lab_half ;
64079: LD_ADDR_OWVAR 42
64083: PUSH
64084: LD_INT 7
64086: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
64087: LD_ADDR_OWVAR 44
64091: PUSH
64092: LD_INT 10
64094: PUSH
64095: LD_INT 11
64097: PUSH
64098: LD_INT 12
64100: PUSH
64101: LD_INT 15
64103: PUSH
64104: LD_INT 14
64106: PUSH
64107: LD_INT 13
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: PUSH
64118: LD_VAR 0 2
64122: PUSH
64123: LD_INT 3
64125: MINUS
64126: ARRAY
64127: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
64128: LD_ADDR_OWVAR 45
64132: PUSH
64133: LD_INT 9
64135: ST_TO_ADDR
// end ; 10 .. 13 :
64136: GO 64646
64138: LD_INT 10
64140: DOUBLE
64141: GREATEREQUAL
64142: IFFALSE 64150
64144: LD_INT 13
64146: DOUBLE
64147: LESSEQUAL
64148: IFTRUE 64152
64150: GO 64229
64152: POP
// begin bc_type := b_lab_full ;
64153: LD_ADDR_OWVAR 42
64157: PUSH
64158: LD_INT 8
64160: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
64161: LD_ADDR_OWVAR 44
64165: PUSH
64166: LD_INT 10
64168: PUSH
64169: LD_INT 12
64171: PUSH
64172: LD_INT 14
64174: PUSH
64175: LD_INT 13
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: PUSH
64184: LD_VAR 0 2
64188: PUSH
64189: LD_INT 9
64191: MINUS
64192: ARRAY
64193: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
64194: LD_ADDR_OWVAR 45
64198: PUSH
64199: LD_INT 11
64201: PUSH
64202: LD_INT 15
64204: PUSH
64205: LD_INT 12
64207: PUSH
64208: LD_INT 15
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: PUSH
64217: LD_VAR 0 2
64221: PUSH
64222: LD_INT 9
64224: MINUS
64225: ARRAY
64226: ST_TO_ADDR
// end ; 14 :
64227: GO 64646
64229: LD_INT 14
64231: DOUBLE
64232: EQUAL
64233: IFTRUE 64237
64235: GO 64248
64237: POP
// bc_type := b_workshop ; 15 :
64238: LD_ADDR_OWVAR 42
64242: PUSH
64243: LD_INT 2
64245: ST_TO_ADDR
64246: GO 64646
64248: LD_INT 15
64250: DOUBLE
64251: EQUAL
64252: IFTRUE 64256
64254: GO 64267
64256: POP
// bc_type := b_factory ; 16 :
64257: LD_ADDR_OWVAR 42
64261: PUSH
64262: LD_INT 3
64264: ST_TO_ADDR
64265: GO 64646
64267: LD_INT 16
64269: DOUBLE
64270: EQUAL
64271: IFTRUE 64275
64273: GO 64286
64275: POP
// bc_type := b_ext_gun ; 17 :
64276: LD_ADDR_OWVAR 42
64280: PUSH
64281: LD_INT 17
64283: ST_TO_ADDR
64284: GO 64646
64286: LD_INT 17
64288: DOUBLE
64289: EQUAL
64290: IFTRUE 64294
64292: GO 64322
64294: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
64295: LD_ADDR_OWVAR 42
64299: PUSH
64300: LD_INT 19
64302: PUSH
64303: LD_INT 23
64305: PUSH
64306: LD_INT 19
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: LIST
64313: PUSH
64314: LD_VAR 0 1
64318: ARRAY
64319: ST_TO_ADDR
64320: GO 64646
64322: LD_INT 18
64324: DOUBLE
64325: EQUAL
64326: IFTRUE 64330
64328: GO 64341
64330: POP
// bc_type := b_ext_radar ; 19 :
64331: LD_ADDR_OWVAR 42
64335: PUSH
64336: LD_INT 20
64338: ST_TO_ADDR
64339: GO 64646
64341: LD_INT 19
64343: DOUBLE
64344: EQUAL
64345: IFTRUE 64349
64347: GO 64360
64349: POP
// bc_type := b_ext_radio ; 20 :
64350: LD_ADDR_OWVAR 42
64354: PUSH
64355: LD_INT 22
64357: ST_TO_ADDR
64358: GO 64646
64360: LD_INT 20
64362: DOUBLE
64363: EQUAL
64364: IFTRUE 64368
64366: GO 64379
64368: POP
// bc_type := b_ext_siberium ; 21 :
64369: LD_ADDR_OWVAR 42
64373: PUSH
64374: LD_INT 21
64376: ST_TO_ADDR
64377: GO 64646
64379: LD_INT 21
64381: DOUBLE
64382: EQUAL
64383: IFTRUE 64387
64385: GO 64398
64387: POP
// bc_type := b_ext_computer ; 22 :
64388: LD_ADDR_OWVAR 42
64392: PUSH
64393: LD_INT 24
64395: ST_TO_ADDR
64396: GO 64646
64398: LD_INT 22
64400: DOUBLE
64401: EQUAL
64402: IFTRUE 64406
64404: GO 64417
64406: POP
// bc_type := b_ext_track ; 23 :
64407: LD_ADDR_OWVAR 42
64411: PUSH
64412: LD_INT 16
64414: ST_TO_ADDR
64415: GO 64646
64417: LD_INT 23
64419: DOUBLE
64420: EQUAL
64421: IFTRUE 64425
64423: GO 64436
64425: POP
// bc_type := b_ext_laser ; 24 :
64426: LD_ADDR_OWVAR 42
64430: PUSH
64431: LD_INT 25
64433: ST_TO_ADDR
64434: GO 64646
64436: LD_INT 24
64438: DOUBLE
64439: EQUAL
64440: IFTRUE 64444
64442: GO 64455
64444: POP
// bc_type := b_control_tower ; 25 :
64445: LD_ADDR_OWVAR 42
64449: PUSH
64450: LD_INT 36
64452: ST_TO_ADDR
64453: GO 64646
64455: LD_INT 25
64457: DOUBLE
64458: EQUAL
64459: IFTRUE 64463
64461: GO 64474
64463: POP
// bc_type := b_breastwork ; 26 :
64464: LD_ADDR_OWVAR 42
64468: PUSH
64469: LD_INT 31
64471: ST_TO_ADDR
64472: GO 64646
64474: LD_INT 26
64476: DOUBLE
64477: EQUAL
64478: IFTRUE 64482
64480: GO 64493
64482: POP
// bc_type := b_bunker ; 27 :
64483: LD_ADDR_OWVAR 42
64487: PUSH
64488: LD_INT 32
64490: ST_TO_ADDR
64491: GO 64646
64493: LD_INT 27
64495: DOUBLE
64496: EQUAL
64497: IFTRUE 64501
64499: GO 64512
64501: POP
// bc_type := b_turret ; 28 :
64502: LD_ADDR_OWVAR 42
64506: PUSH
64507: LD_INT 33
64509: ST_TO_ADDR
64510: GO 64646
64512: LD_INT 28
64514: DOUBLE
64515: EQUAL
64516: IFTRUE 64520
64518: GO 64531
64520: POP
// bc_type := b_armoury ; 29 :
64521: LD_ADDR_OWVAR 42
64525: PUSH
64526: LD_INT 4
64528: ST_TO_ADDR
64529: GO 64646
64531: LD_INT 29
64533: DOUBLE
64534: EQUAL
64535: IFTRUE 64539
64537: GO 64550
64539: POP
// bc_type := b_barracks ; 30 :
64540: LD_ADDR_OWVAR 42
64544: PUSH
64545: LD_INT 5
64547: ST_TO_ADDR
64548: GO 64646
64550: LD_INT 30
64552: DOUBLE
64553: EQUAL
64554: IFTRUE 64558
64556: GO 64569
64558: POP
// bc_type := b_solar_power ; 31 :
64559: LD_ADDR_OWVAR 42
64563: PUSH
64564: LD_INT 27
64566: ST_TO_ADDR
64567: GO 64646
64569: LD_INT 31
64571: DOUBLE
64572: EQUAL
64573: IFTRUE 64577
64575: GO 64588
64577: POP
// bc_type := b_oil_power ; 32 :
64578: LD_ADDR_OWVAR 42
64582: PUSH
64583: LD_INT 26
64585: ST_TO_ADDR
64586: GO 64646
64588: LD_INT 32
64590: DOUBLE
64591: EQUAL
64592: IFTRUE 64596
64594: GO 64607
64596: POP
// bc_type := b_siberite_power ; 33 :
64597: LD_ADDR_OWVAR 42
64601: PUSH
64602: LD_INT 28
64604: ST_TO_ADDR
64605: GO 64646
64607: LD_INT 33
64609: DOUBLE
64610: EQUAL
64611: IFTRUE 64615
64613: GO 64626
64615: POP
// bc_type := b_oil_mine ; 34 :
64616: LD_ADDR_OWVAR 42
64620: PUSH
64621: LD_INT 29
64623: ST_TO_ADDR
64624: GO 64646
64626: LD_INT 34
64628: DOUBLE
64629: EQUAL
64630: IFTRUE 64634
64632: GO 64645
64634: POP
// bc_type := b_siberite_mine ; end ;
64635: LD_ADDR_OWVAR 42
64639: PUSH
64640: LD_INT 30
64642: ST_TO_ADDR
64643: GO 64646
64645: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
64646: LD_ADDR_VAR 0 8
64650: PUSH
64651: LD_VAR 0 5
64655: PPUSH
64656: LD_VAR 0 6
64660: PPUSH
64661: LD_VAR 0 3
64665: PPUSH
64666: CALL_OW 47
64670: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
64671: LD_OWVAR 42
64675: PUSH
64676: LD_INT 32
64678: PUSH
64679: LD_INT 33
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: IN
64686: IFFALSE 64702
// PlaceWeaponTurret ( b , weapon ) ;
64688: LD_VAR 0 8
64692: PPUSH
64693: LD_VAR 0 4
64697: PPUSH
64698: CALL_OW 431
// end ;
64702: LD_VAR 0 7
64706: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
64707: LD_INT 0
64709: PPUSH
64710: PPUSH
64711: PPUSH
64712: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64713: LD_ADDR_VAR 0 4
64717: PUSH
64718: LD_INT 22
64720: PUSH
64721: LD_OWVAR 2
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 2
64732: PUSH
64733: LD_INT 30
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 30
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: LIST
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PPUSH
64762: CALL_OW 69
64766: ST_TO_ADDR
// if not tmp then
64767: LD_VAR 0 4
64771: NOT
64772: IFFALSE 64776
// exit ;
64774: GO 64835
// for i in tmp do
64776: LD_ADDR_VAR 0 2
64780: PUSH
64781: LD_VAR 0 4
64785: PUSH
64786: FOR_IN
64787: IFFALSE 64833
// for j = 1 to 3 do
64789: LD_ADDR_VAR 0 3
64793: PUSH
64794: DOUBLE
64795: LD_INT 1
64797: DEC
64798: ST_TO_ADDR
64799: LD_INT 3
64801: PUSH
64802: FOR_TO
64803: IFFALSE 64829
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
64805: LD_VAR 0 2
64809: PPUSH
64810: CALL_OW 274
64814: PPUSH
64815: LD_VAR 0 3
64819: PPUSH
64820: LD_INT 99999
64822: PPUSH
64823: CALL_OW 277
64827: GO 64802
64829: POP
64830: POP
64831: GO 64786
64833: POP
64834: POP
// end ;
64835: LD_VAR 0 1
64839: RET
// export function hHackSetLevel10 ; var i , j ; begin
64840: LD_INT 0
64842: PPUSH
64843: PPUSH
64844: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64845: LD_ADDR_VAR 0 2
64849: PUSH
64850: LD_INT 21
64852: PUSH
64853: LD_INT 1
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PPUSH
64860: CALL_OW 69
64864: PUSH
64865: FOR_IN
64866: IFFALSE 64918
// if IsSelected ( i ) then
64868: LD_VAR 0 2
64872: PPUSH
64873: CALL_OW 306
64877: IFFALSE 64916
// begin for j := 1 to 4 do
64879: LD_ADDR_VAR 0 3
64883: PUSH
64884: DOUBLE
64885: LD_INT 1
64887: DEC
64888: ST_TO_ADDR
64889: LD_INT 4
64891: PUSH
64892: FOR_TO
64893: IFFALSE 64914
// SetSkill ( i , j , 10 ) ;
64895: LD_VAR 0 2
64899: PPUSH
64900: LD_VAR 0 3
64904: PPUSH
64905: LD_INT 10
64907: PPUSH
64908: CALL_OW 237
64912: GO 64892
64914: POP
64915: POP
// end ;
64916: GO 64865
64918: POP
64919: POP
// end ;
64920: LD_VAR 0 1
64924: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
64925: LD_INT 0
64927: PPUSH
64928: PPUSH
64929: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
64930: LD_ADDR_VAR 0 2
64934: PUSH
64935: LD_INT 22
64937: PUSH
64938: LD_OWVAR 2
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 21
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PPUSH
64961: CALL_OW 69
64965: PUSH
64966: FOR_IN
64967: IFFALSE 65008
// begin for j := 1 to 4 do
64969: LD_ADDR_VAR 0 3
64973: PUSH
64974: DOUBLE
64975: LD_INT 1
64977: DEC
64978: ST_TO_ADDR
64979: LD_INT 4
64981: PUSH
64982: FOR_TO
64983: IFFALSE 65004
// SetSkill ( i , j , 10 ) ;
64985: LD_VAR 0 2
64989: PPUSH
64990: LD_VAR 0 3
64994: PPUSH
64995: LD_INT 10
64997: PPUSH
64998: CALL_OW 237
65002: GO 64982
65004: POP
65005: POP
// end ;
65006: GO 64966
65008: POP
65009: POP
// end ;
65010: LD_VAR 0 1
65014: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
65015: LD_INT 0
65017: PPUSH
// uc_side := your_side ;
65018: LD_ADDR_OWVAR 20
65022: PUSH
65023: LD_OWVAR 2
65027: ST_TO_ADDR
// uc_nation := nation ;
65028: LD_ADDR_OWVAR 21
65032: PUSH
65033: LD_VAR 0 1
65037: ST_TO_ADDR
// InitHc ;
65038: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
65042: LD_INT 0
65044: PPUSH
65045: LD_VAR 0 2
65049: PPUSH
65050: LD_VAR 0 3
65054: PPUSH
65055: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
65059: LD_VAR 0 4
65063: PPUSH
65064: LD_VAR 0 5
65068: PPUSH
65069: CALL_OW 428
65073: PUSH
65074: LD_INT 0
65076: EQUAL
65077: IFFALSE 65101
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
65079: CALL_OW 44
65083: PPUSH
65084: LD_VAR 0 4
65088: PPUSH
65089: LD_VAR 0 5
65093: PPUSH
65094: LD_INT 1
65096: PPUSH
65097: CALL_OW 48
// end ;
65101: LD_VAR 0 6
65105: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
65106: LD_INT 0
65108: PPUSH
65109: PPUSH
// uc_side := your_side ;
65110: LD_ADDR_OWVAR 20
65114: PUSH
65115: LD_OWVAR 2
65119: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
65120: LD_VAR 0 1
65124: PUSH
65125: LD_INT 1
65127: PUSH
65128: LD_INT 2
65130: PUSH
65131: LD_INT 3
65133: PUSH
65134: LD_INT 4
65136: PUSH
65137: LD_INT 5
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: IN
65147: IFFALSE 65159
// uc_nation := nation_american else
65149: LD_ADDR_OWVAR 21
65153: PUSH
65154: LD_INT 1
65156: ST_TO_ADDR
65157: GO 65202
// if chassis in [ 11 , 12 , 13 , 14 ] then
65159: LD_VAR 0 1
65163: PUSH
65164: LD_INT 11
65166: PUSH
65167: LD_INT 12
65169: PUSH
65170: LD_INT 13
65172: PUSH
65173: LD_INT 14
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: IN
65182: IFFALSE 65194
// uc_nation := nation_arabian else
65184: LD_ADDR_OWVAR 21
65188: PUSH
65189: LD_INT 2
65191: ST_TO_ADDR
65192: GO 65202
// uc_nation := nation_russian ;
65194: LD_ADDR_OWVAR 21
65198: PUSH
65199: LD_INT 3
65201: ST_TO_ADDR
// vc_chassis := chassis ;
65202: LD_ADDR_OWVAR 37
65206: PUSH
65207: LD_VAR 0 1
65211: ST_TO_ADDR
// vc_engine := engine ;
65212: LD_ADDR_OWVAR 39
65216: PUSH
65217: LD_VAR 0 2
65221: ST_TO_ADDR
// vc_control := control ;
65222: LD_ADDR_OWVAR 38
65226: PUSH
65227: LD_VAR 0 3
65231: ST_TO_ADDR
// vc_weapon := weapon ;
65232: LD_ADDR_OWVAR 40
65236: PUSH
65237: LD_VAR 0 4
65241: ST_TO_ADDR
// un := CreateVehicle ;
65242: LD_ADDR_VAR 0 8
65246: PUSH
65247: CALL_OW 45
65251: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
65252: LD_VAR 0 8
65256: PPUSH
65257: LD_INT 0
65259: PPUSH
65260: LD_INT 5
65262: PPUSH
65263: CALL_OW 12
65267: PPUSH
65268: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
65272: LD_VAR 0 8
65276: PPUSH
65277: LD_VAR 0 5
65281: PPUSH
65282: LD_VAR 0 6
65286: PPUSH
65287: LD_INT 1
65289: PPUSH
65290: CALL_OW 48
// end ;
65294: LD_VAR 0 7
65298: RET
// export hInvincible ; every 1 do
65299: GO 65301
65301: DISABLE
// hInvincible := [ ] ;
65302: LD_ADDR_EXP 86
65306: PUSH
65307: EMPTY
65308: ST_TO_ADDR
65309: END
// every 10 do var i ;
65310: GO 65312
65312: DISABLE
65313: LD_INT 0
65315: PPUSH
// begin enable ;
65316: ENABLE
// if not hInvincible then
65317: LD_EXP 86
65321: NOT
65322: IFFALSE 65326
// exit ;
65324: GO 65370
// for i in hInvincible do
65326: LD_ADDR_VAR 0 1
65330: PUSH
65331: LD_EXP 86
65335: PUSH
65336: FOR_IN
65337: IFFALSE 65368
// if GetLives ( i ) < 1000 then
65339: LD_VAR 0 1
65343: PPUSH
65344: CALL_OW 256
65348: PUSH
65349: LD_INT 1000
65351: LESS
65352: IFFALSE 65366
// SetLives ( i , 1000 ) ;
65354: LD_VAR 0 1
65358: PPUSH
65359: LD_INT 1000
65361: PPUSH
65362: CALL_OW 234
65366: GO 65336
65368: POP
65369: POP
// end ;
65370: PPOPN 1
65372: END
// export function hHackInvincible ; var i ; begin
65373: LD_INT 0
65375: PPUSH
65376: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
65377: LD_ADDR_VAR 0 2
65381: PUSH
65382: LD_INT 2
65384: PUSH
65385: LD_INT 21
65387: PUSH
65388: LD_INT 1
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 21
65397: PUSH
65398: LD_INT 2
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: LIST
65409: PPUSH
65410: CALL_OW 69
65414: PUSH
65415: FOR_IN
65416: IFFALSE 65477
// if IsSelected ( i ) then
65418: LD_VAR 0 2
65422: PPUSH
65423: CALL_OW 306
65427: IFFALSE 65475
// begin if i in hInvincible then
65429: LD_VAR 0 2
65433: PUSH
65434: LD_EXP 86
65438: IN
65439: IFFALSE 65459
// hInvincible := hInvincible diff i else
65441: LD_ADDR_EXP 86
65445: PUSH
65446: LD_EXP 86
65450: PUSH
65451: LD_VAR 0 2
65455: DIFF
65456: ST_TO_ADDR
65457: GO 65475
// hInvincible := hInvincible union i ;
65459: LD_ADDR_EXP 86
65463: PUSH
65464: LD_EXP 86
65468: PUSH
65469: LD_VAR 0 2
65473: UNION
65474: ST_TO_ADDR
// end ;
65475: GO 65415
65477: POP
65478: POP
// end ;
65479: LD_VAR 0 1
65483: RET
// export function hHackInvisible ; var i , j ; begin
65484: LD_INT 0
65486: PPUSH
65487: PPUSH
65488: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65489: LD_ADDR_VAR 0 2
65493: PUSH
65494: LD_INT 21
65496: PUSH
65497: LD_INT 1
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PPUSH
65504: CALL_OW 69
65508: PUSH
65509: FOR_IN
65510: IFFALSE 65534
// if IsSelected ( i ) then
65512: LD_VAR 0 2
65516: PPUSH
65517: CALL_OW 306
65521: IFFALSE 65532
// ComForceInvisible ( i ) ;
65523: LD_VAR 0 2
65527: PPUSH
65528: CALL_OW 496
65532: GO 65509
65534: POP
65535: POP
// end ;
65536: LD_VAR 0 1
65540: RET
// export function hHackChangeYourSide ; begin
65541: LD_INT 0
65543: PPUSH
// if your_side = 8 then
65544: LD_OWVAR 2
65548: PUSH
65549: LD_INT 8
65551: EQUAL
65552: IFFALSE 65564
// your_side := 0 else
65554: LD_ADDR_OWVAR 2
65558: PUSH
65559: LD_INT 0
65561: ST_TO_ADDR
65562: GO 65578
// your_side := your_side + 1 ;
65564: LD_ADDR_OWVAR 2
65568: PUSH
65569: LD_OWVAR 2
65573: PUSH
65574: LD_INT 1
65576: PLUS
65577: ST_TO_ADDR
// end ;
65578: LD_VAR 0 1
65582: RET
// export function hHackChangeUnitSide ; var i , j ; begin
65583: LD_INT 0
65585: PPUSH
65586: PPUSH
65587: PPUSH
// for i in all_units do
65588: LD_ADDR_VAR 0 2
65592: PUSH
65593: LD_OWVAR 3
65597: PUSH
65598: FOR_IN
65599: IFFALSE 65677
// if IsSelected ( i ) then
65601: LD_VAR 0 2
65605: PPUSH
65606: CALL_OW 306
65610: IFFALSE 65675
// begin j := GetSide ( i ) ;
65612: LD_ADDR_VAR 0 3
65616: PUSH
65617: LD_VAR 0 2
65621: PPUSH
65622: CALL_OW 255
65626: ST_TO_ADDR
// if j = 8 then
65627: LD_VAR 0 3
65631: PUSH
65632: LD_INT 8
65634: EQUAL
65635: IFFALSE 65647
// j := 0 else
65637: LD_ADDR_VAR 0 3
65641: PUSH
65642: LD_INT 0
65644: ST_TO_ADDR
65645: GO 65661
// j := j + 1 ;
65647: LD_ADDR_VAR 0 3
65651: PUSH
65652: LD_VAR 0 3
65656: PUSH
65657: LD_INT 1
65659: PLUS
65660: ST_TO_ADDR
// SetSide ( i , j ) ;
65661: LD_VAR 0 2
65665: PPUSH
65666: LD_VAR 0 3
65670: PPUSH
65671: CALL_OW 235
// end ;
65675: GO 65598
65677: POP
65678: POP
// end ;
65679: LD_VAR 0 1
65683: RET
// export function hHackFog ; begin
65684: LD_INT 0
65686: PPUSH
// FogOff ( true ) ;
65687: LD_INT 1
65689: PPUSH
65690: CALL_OW 344
// end ;
65694: LD_VAR 0 1
65698: RET
// export function hHackTeleport ( unit , x , y ) ; begin
65699: LD_INT 0
65701: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
65702: LD_VAR 0 1
65706: PPUSH
65707: LD_VAR 0 2
65711: PPUSH
65712: LD_VAR 0 3
65716: PPUSH
65717: LD_INT 1
65719: PPUSH
65720: LD_INT 1
65722: PPUSH
65723: CALL_OW 483
// CenterOnXY ( x , y ) ;
65727: LD_VAR 0 2
65731: PPUSH
65732: LD_VAR 0 3
65736: PPUSH
65737: CALL_OW 84
// end ;
65741: LD_VAR 0 4
65745: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
65746: LD_INT 0
65748: PPUSH
65749: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
65750: LD_VAR 0 1
65754: NOT
65755: PUSH
65756: LD_VAR 0 2
65760: PPUSH
65761: LD_VAR 0 3
65765: PPUSH
65766: CALL_OW 488
65770: NOT
65771: OR
65772: PUSH
65773: LD_VAR 0 1
65777: PPUSH
65778: CALL_OW 266
65782: PUSH
65783: LD_INT 3
65785: NONEQUAL
65786: PUSH
65787: LD_VAR 0 1
65791: PPUSH
65792: CALL_OW 247
65796: PUSH
65797: LD_INT 1
65799: EQUAL
65800: NOT
65801: AND
65802: OR
65803: IFFALSE 65807
// exit ;
65805: GO 65956
// if GetType ( factory ) = unit_human then
65807: LD_VAR 0 1
65811: PPUSH
65812: CALL_OW 247
65816: PUSH
65817: LD_INT 1
65819: EQUAL
65820: IFFALSE 65837
// factory := IsInUnit ( factory ) ;
65822: LD_ADDR_VAR 0 1
65826: PUSH
65827: LD_VAR 0 1
65831: PPUSH
65832: CALL_OW 310
65836: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65837: LD_VAR 0 1
65841: PPUSH
65842: CALL_OW 266
65846: PUSH
65847: LD_INT 3
65849: NONEQUAL
65850: IFFALSE 65854
// exit ;
65852: GO 65956
// if HexInfo ( x , y ) = factory then
65854: LD_VAR 0 2
65858: PPUSH
65859: LD_VAR 0 3
65863: PPUSH
65864: CALL_OW 428
65868: PUSH
65869: LD_VAR 0 1
65873: EQUAL
65874: IFFALSE 65901
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
65876: LD_ADDR_EXP 87
65880: PUSH
65881: LD_EXP 87
65885: PPUSH
65886: LD_VAR 0 1
65890: PPUSH
65891: LD_INT 0
65893: PPUSH
65894: CALL_OW 1
65898: ST_TO_ADDR
65899: GO 65952
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
65901: LD_ADDR_EXP 87
65905: PUSH
65906: LD_EXP 87
65910: PPUSH
65911: LD_VAR 0 1
65915: PPUSH
65916: LD_VAR 0 1
65920: PPUSH
65921: CALL_OW 255
65925: PUSH
65926: LD_VAR 0 1
65930: PUSH
65931: LD_VAR 0 2
65935: PUSH
65936: LD_VAR 0 3
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: PPUSH
65947: CALL_OW 1
65951: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65952: CALL 65961 0 0
// end ;
65956: LD_VAR 0 4
65960: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65961: LD_INT 0
65963: PPUSH
65964: PPUSH
65965: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65966: LD_STRING resetFactoryWaypoint();
65968: PPUSH
65969: CALL_OW 559
// if factoryWaypoints then
65973: LD_EXP 87
65977: IFFALSE 66103
// begin list := PrepareArray ( factoryWaypoints ) ;
65979: LD_ADDR_VAR 0 3
65983: PUSH
65984: LD_EXP 87
65988: PPUSH
65989: CALL 50078 0 1
65993: ST_TO_ADDR
// for i := 1 to list do
65994: LD_ADDR_VAR 0 2
65998: PUSH
65999: DOUBLE
66000: LD_INT 1
66002: DEC
66003: ST_TO_ADDR
66004: LD_VAR 0 3
66008: PUSH
66009: FOR_TO
66010: IFFALSE 66101
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66012: LD_STRING setFactoryWaypointXY(
66014: PUSH
66015: LD_VAR 0 3
66019: PUSH
66020: LD_VAR 0 2
66024: ARRAY
66025: PUSH
66026: LD_INT 1
66028: ARRAY
66029: STR
66030: PUSH
66031: LD_STRING ,
66033: STR
66034: PUSH
66035: LD_VAR 0 3
66039: PUSH
66040: LD_VAR 0 2
66044: ARRAY
66045: PUSH
66046: LD_INT 2
66048: ARRAY
66049: STR
66050: PUSH
66051: LD_STRING ,
66053: STR
66054: PUSH
66055: LD_VAR 0 3
66059: PUSH
66060: LD_VAR 0 2
66064: ARRAY
66065: PUSH
66066: LD_INT 3
66068: ARRAY
66069: STR
66070: PUSH
66071: LD_STRING ,
66073: STR
66074: PUSH
66075: LD_VAR 0 3
66079: PUSH
66080: LD_VAR 0 2
66084: ARRAY
66085: PUSH
66086: LD_INT 4
66088: ARRAY
66089: STR
66090: PUSH
66091: LD_STRING )
66093: STR
66094: PPUSH
66095: CALL_OW 559
66099: GO 66009
66101: POP
66102: POP
// end ; end ;
66103: LD_VAR 0 1
66107: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
66108: LD_INT 0
66110: PPUSH
// if HexInfo ( x , y ) = warehouse then
66111: LD_VAR 0 2
66115: PPUSH
66116: LD_VAR 0 3
66120: PPUSH
66121: CALL_OW 428
66125: PUSH
66126: LD_VAR 0 1
66130: EQUAL
66131: IFFALSE 66158
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
66133: LD_ADDR_EXP 88
66137: PUSH
66138: LD_EXP 88
66142: PPUSH
66143: LD_VAR 0 1
66147: PPUSH
66148: LD_INT 0
66150: PPUSH
66151: CALL_OW 1
66155: ST_TO_ADDR
66156: GO 66209
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
66158: LD_ADDR_EXP 88
66162: PUSH
66163: LD_EXP 88
66167: PPUSH
66168: LD_VAR 0 1
66172: PPUSH
66173: LD_VAR 0 1
66177: PPUSH
66178: CALL_OW 255
66182: PUSH
66183: LD_VAR 0 1
66187: PUSH
66188: LD_VAR 0 2
66192: PUSH
66193: LD_VAR 0 3
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: PPUSH
66204: CALL_OW 1
66208: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
66209: CALL 66218 0 0
// end ;
66213: LD_VAR 0 4
66217: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
66218: LD_INT 0
66220: PPUSH
66221: PPUSH
66222: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
66223: LD_STRING resetWarehouseGatheringPoints();
66225: PPUSH
66226: CALL_OW 559
// if warehouseGatheringPoints then
66230: LD_EXP 88
66234: IFFALSE 66360
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
66236: LD_ADDR_VAR 0 3
66240: PUSH
66241: LD_EXP 88
66245: PPUSH
66246: CALL 50078 0 1
66250: ST_TO_ADDR
// for i := 1 to list do
66251: LD_ADDR_VAR 0 2
66255: PUSH
66256: DOUBLE
66257: LD_INT 1
66259: DEC
66260: ST_TO_ADDR
66261: LD_VAR 0 3
66265: PUSH
66266: FOR_TO
66267: IFFALSE 66358
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66269: LD_STRING setWarehouseGatheringPointXY(
66271: PUSH
66272: LD_VAR 0 3
66276: PUSH
66277: LD_VAR 0 2
66281: ARRAY
66282: PUSH
66283: LD_INT 1
66285: ARRAY
66286: STR
66287: PUSH
66288: LD_STRING ,
66290: STR
66291: PUSH
66292: LD_VAR 0 3
66296: PUSH
66297: LD_VAR 0 2
66301: ARRAY
66302: PUSH
66303: LD_INT 2
66305: ARRAY
66306: STR
66307: PUSH
66308: LD_STRING ,
66310: STR
66311: PUSH
66312: LD_VAR 0 3
66316: PUSH
66317: LD_VAR 0 2
66321: ARRAY
66322: PUSH
66323: LD_INT 3
66325: ARRAY
66326: STR
66327: PUSH
66328: LD_STRING ,
66330: STR
66331: PUSH
66332: LD_VAR 0 3
66336: PUSH
66337: LD_VAR 0 2
66341: ARRAY
66342: PUSH
66343: LD_INT 4
66345: ARRAY
66346: STR
66347: PUSH
66348: LD_STRING )
66350: STR
66351: PPUSH
66352: CALL_OW 559
66356: GO 66266
66358: POP
66359: POP
// end ; end ;
66360: LD_VAR 0 1
66364: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
66365: LD_EXP 88
66369: IFFALSE 67054
66371: GO 66373
66373: DISABLE
66374: LD_INT 0
66376: PPUSH
66377: PPUSH
66378: PPUSH
66379: PPUSH
66380: PPUSH
66381: PPUSH
66382: PPUSH
66383: PPUSH
66384: PPUSH
// begin enable ;
66385: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
66386: LD_ADDR_VAR 0 3
66390: PUSH
66391: LD_EXP 88
66395: PPUSH
66396: CALL 50078 0 1
66400: ST_TO_ADDR
// if not list then
66401: LD_VAR 0 3
66405: NOT
66406: IFFALSE 66410
// exit ;
66408: GO 67054
// for i := 1 to list do
66410: LD_ADDR_VAR 0 1
66414: PUSH
66415: DOUBLE
66416: LD_INT 1
66418: DEC
66419: ST_TO_ADDR
66420: LD_VAR 0 3
66424: PUSH
66425: FOR_TO
66426: IFFALSE 67052
// begin depot := list [ i ] [ 2 ] ;
66428: LD_ADDR_VAR 0 8
66432: PUSH
66433: LD_VAR 0 3
66437: PUSH
66438: LD_VAR 0 1
66442: ARRAY
66443: PUSH
66444: LD_INT 2
66446: ARRAY
66447: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
66448: LD_ADDR_VAR 0 5
66452: PUSH
66453: LD_VAR 0 3
66457: PUSH
66458: LD_VAR 0 1
66462: ARRAY
66463: PUSH
66464: LD_INT 1
66466: ARRAY
66467: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
66468: LD_VAR 0 8
66472: PPUSH
66473: CALL_OW 301
66477: PUSH
66478: LD_VAR 0 5
66482: PUSH
66483: LD_VAR 0 8
66487: PPUSH
66488: CALL_OW 255
66492: NONEQUAL
66493: OR
66494: IFFALSE 66523
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
66496: LD_ADDR_EXP 88
66500: PUSH
66501: LD_EXP 88
66505: PPUSH
66506: LD_VAR 0 8
66510: PPUSH
66511: LD_INT 0
66513: PPUSH
66514: CALL_OW 1
66518: ST_TO_ADDR
// exit ;
66519: POP
66520: POP
66521: GO 67054
// end ; x := list [ i ] [ 3 ] ;
66523: LD_ADDR_VAR 0 6
66527: PUSH
66528: LD_VAR 0 3
66532: PUSH
66533: LD_VAR 0 1
66537: ARRAY
66538: PUSH
66539: LD_INT 3
66541: ARRAY
66542: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
66543: LD_ADDR_VAR 0 7
66547: PUSH
66548: LD_VAR 0 3
66552: PUSH
66553: LD_VAR 0 1
66557: ARRAY
66558: PUSH
66559: LD_INT 4
66561: ARRAY
66562: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
66563: LD_ADDR_VAR 0 9
66567: PUSH
66568: LD_VAR 0 6
66572: PPUSH
66573: LD_VAR 0 7
66577: PPUSH
66578: LD_INT 16
66580: PPUSH
66581: CALL 48666 0 3
66585: ST_TO_ADDR
// if not cratesNearbyPoint then
66586: LD_VAR 0 9
66590: NOT
66591: IFFALSE 66597
// exit ;
66593: POP
66594: POP
66595: GO 67054
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
66597: LD_ADDR_VAR 0 4
66601: PUSH
66602: LD_INT 22
66604: PUSH
66605: LD_VAR 0 5
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 3
66616: PUSH
66617: LD_INT 60
66619: PUSH
66620: EMPTY
66621: LIST
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 91
66629: PUSH
66630: LD_VAR 0 8
66634: PUSH
66635: LD_INT 6
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 2
66645: PUSH
66646: LD_INT 25
66648: PUSH
66649: LD_INT 2
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 25
66658: PUSH
66659: LD_INT 16
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: LIST
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: PPUSH
66677: CALL_OW 69
66681: PUSH
66682: LD_VAR 0 8
66686: PPUSH
66687: CALL_OW 313
66691: PPUSH
66692: LD_INT 3
66694: PUSH
66695: LD_INT 60
66697: PUSH
66698: EMPTY
66699: LIST
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 2
66707: PUSH
66708: LD_INT 25
66710: PUSH
66711: LD_INT 2
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 25
66720: PUSH
66721: LD_INT 16
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: LIST
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PPUSH
66737: CALL_OW 72
66741: UNION
66742: ST_TO_ADDR
// if tmp then
66743: LD_VAR 0 4
66747: IFFALSE 66827
// begin tmp := ShrinkArray ( tmp , 3 ) ;
66749: LD_ADDR_VAR 0 4
66753: PUSH
66754: LD_VAR 0 4
66758: PPUSH
66759: LD_INT 3
66761: PPUSH
66762: CALL 46635 0 2
66766: ST_TO_ADDR
// for j in tmp do
66767: LD_ADDR_VAR 0 2
66771: PUSH
66772: LD_VAR 0 4
66776: PUSH
66777: FOR_IN
66778: IFFALSE 66821
// begin if IsInUnit ( j ) then
66780: LD_VAR 0 2
66784: PPUSH
66785: CALL_OW 310
66789: IFFALSE 66800
// ComExit ( j ) ;
66791: LD_VAR 0 2
66795: PPUSH
66796: CALL 46718 0 1
// AddComCollect ( j , x , y ) ;
66800: LD_VAR 0 2
66804: PPUSH
66805: LD_VAR 0 6
66809: PPUSH
66810: LD_VAR 0 7
66814: PPUSH
66815: CALL_OW 177
// end ;
66819: GO 66777
66821: POP
66822: POP
// exit ;
66823: POP
66824: POP
66825: GO 67054
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
66827: LD_ADDR_VAR 0 4
66831: PUSH
66832: LD_INT 22
66834: PUSH
66835: LD_VAR 0 5
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 91
66846: PUSH
66847: LD_VAR 0 8
66851: PUSH
66852: LD_INT 8
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 2
66862: PUSH
66863: LD_INT 34
66865: PUSH
66866: LD_INT 12
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 34
66875: PUSH
66876: LD_INT 51
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 34
66885: PUSH
66886: LD_INT 32
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 34
66895: PUSH
66896: LD_INT 89
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: LIST
66914: PPUSH
66915: CALL_OW 69
66919: ST_TO_ADDR
// if tmp then
66920: LD_VAR 0 4
66924: IFFALSE 67050
// begin for j in tmp do
66926: LD_ADDR_VAR 0 2
66930: PUSH
66931: LD_VAR 0 4
66935: PUSH
66936: FOR_IN
66937: IFFALSE 67048
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
66939: LD_VAR 0 2
66943: PPUSH
66944: CALL_OW 262
66948: PUSH
66949: LD_INT 3
66951: EQUAL
66952: PUSH
66953: LD_VAR 0 2
66957: PPUSH
66958: CALL_OW 261
66962: PUSH
66963: LD_INT 20
66965: GREATER
66966: OR
66967: PUSH
66968: LD_VAR 0 2
66972: PPUSH
66973: CALL_OW 314
66977: NOT
66978: AND
66979: PUSH
66980: LD_VAR 0 2
66984: PPUSH
66985: CALL_OW 263
66989: PUSH
66990: LD_INT 1
66992: NONEQUAL
66993: PUSH
66994: LD_VAR 0 2
66998: PPUSH
66999: CALL_OW 311
67003: OR
67004: AND
67005: IFFALSE 67046
// begin ComCollect ( j , x , y ) ;
67007: LD_VAR 0 2
67011: PPUSH
67012: LD_VAR 0 6
67016: PPUSH
67017: LD_VAR 0 7
67021: PPUSH
67022: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
67026: LD_VAR 0 2
67030: PPUSH
67031: LD_VAR 0 8
67035: PPUSH
67036: CALL_OW 172
// exit ;
67040: POP
67041: POP
67042: POP
67043: POP
67044: GO 67054
// end ;
67046: GO 66936
67048: POP
67049: POP
// end ; end ;
67050: GO 66425
67052: POP
67053: POP
// end ; end_of_file
67054: PPOPN 9
67056: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
67057: LD_INT 0
67059: PPUSH
67060: PPUSH
67061: PPUSH
67062: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
67063: LD_VAR 0 1
67067: PPUSH
67068: CALL_OW 264
67072: PUSH
67073: LD_INT 91
67075: EQUAL
67076: IFFALSE 67148
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
67078: LD_INT 68
67080: PPUSH
67081: LD_VAR 0 1
67085: PPUSH
67086: CALL_OW 255
67090: PPUSH
67091: CALL_OW 321
67095: PUSH
67096: LD_INT 2
67098: EQUAL
67099: IFFALSE 67111
// eff := 70 else
67101: LD_ADDR_VAR 0 4
67105: PUSH
67106: LD_INT 70
67108: ST_TO_ADDR
67109: GO 67119
// eff := 30 ;
67111: LD_ADDR_VAR 0 4
67115: PUSH
67116: LD_INT 30
67118: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
67119: LD_VAR 0 1
67123: PPUSH
67124: CALL_OW 250
67128: PPUSH
67129: LD_VAR 0 1
67133: PPUSH
67134: CALL_OW 251
67138: PPUSH
67139: LD_VAR 0 4
67143: PPUSH
67144: CALL_OW 495
// end ; end ;
67148: LD_VAR 0 2
67152: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
67153: LD_INT 0
67155: PPUSH
// end ;
67156: LD_VAR 0 4
67160: RET
// export function SOS_Command ( cmd ) ; begin
67161: LD_INT 0
67163: PPUSH
// end ;
67164: LD_VAR 0 2
67168: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
67169: LD_INT 0
67171: PPUSH
// end ;
67172: LD_VAR 0 6
67176: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
67177: LD_INT 0
67179: PPUSH
67180: PPUSH
// if not vehicle or not factory then
67181: LD_VAR 0 1
67185: NOT
67186: PUSH
67187: LD_VAR 0 2
67191: NOT
67192: OR
67193: IFFALSE 67197
// exit ;
67195: GO 67428
// if factoryWaypoints >= factory then
67197: LD_EXP 87
67201: PUSH
67202: LD_VAR 0 2
67206: GREATEREQUAL
67207: IFFALSE 67428
// if factoryWaypoints [ factory ] then
67209: LD_EXP 87
67213: PUSH
67214: LD_VAR 0 2
67218: ARRAY
67219: IFFALSE 67428
// begin if GetControl ( vehicle ) = control_manual then
67221: LD_VAR 0 1
67225: PPUSH
67226: CALL_OW 263
67230: PUSH
67231: LD_INT 1
67233: EQUAL
67234: IFFALSE 67315
// begin driver := IsDrivenBy ( vehicle ) ;
67236: LD_ADDR_VAR 0 4
67240: PUSH
67241: LD_VAR 0 1
67245: PPUSH
67246: CALL_OW 311
67250: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67251: LD_VAR 0 4
67255: PPUSH
67256: LD_EXP 87
67260: PUSH
67261: LD_VAR 0 2
67265: ARRAY
67266: PUSH
67267: LD_INT 3
67269: ARRAY
67270: PPUSH
67271: LD_EXP 87
67275: PUSH
67276: LD_VAR 0 2
67280: ARRAY
67281: PUSH
67282: LD_INT 4
67284: ARRAY
67285: PPUSH
67286: CALL_OW 171
// AddComExitVehicle ( driver ) ;
67290: LD_VAR 0 4
67294: PPUSH
67295: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
67299: LD_VAR 0 4
67303: PPUSH
67304: LD_VAR 0 2
67308: PPUSH
67309: CALL_OW 180
// end else
67313: GO 67428
// if GetControl ( vehicle ) = control_remote then
67315: LD_VAR 0 1
67319: PPUSH
67320: CALL_OW 263
67324: PUSH
67325: LD_INT 2
67327: EQUAL
67328: IFFALSE 67389
// begin wait ( 0 0$2 ) ;
67330: LD_INT 70
67332: PPUSH
67333: CALL_OW 67
// if Connect ( vehicle ) then
67337: LD_VAR 0 1
67341: PPUSH
67342: CALL 16937 0 1
67346: IFFALSE 67387
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67348: LD_VAR 0 1
67352: PPUSH
67353: LD_EXP 87
67357: PUSH
67358: LD_VAR 0 2
67362: ARRAY
67363: PUSH
67364: LD_INT 3
67366: ARRAY
67367: PPUSH
67368: LD_EXP 87
67372: PUSH
67373: LD_VAR 0 2
67377: ARRAY
67378: PUSH
67379: LD_INT 4
67381: ARRAY
67382: PPUSH
67383: CALL_OW 171
// end else
67387: GO 67428
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67389: LD_VAR 0 1
67393: PPUSH
67394: LD_EXP 87
67398: PUSH
67399: LD_VAR 0 2
67403: ARRAY
67404: PUSH
67405: LD_INT 3
67407: ARRAY
67408: PPUSH
67409: LD_EXP 87
67413: PUSH
67414: LD_VAR 0 2
67418: ARRAY
67419: PUSH
67420: LD_INT 4
67422: ARRAY
67423: PPUSH
67424: CALL_OW 171
// end ; end ;
67428: LD_VAR 0 3
67432: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
67433: LD_INT 0
67435: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
67436: LD_VAR 0 1
67440: PUSH
67441: LD_INT 250
67443: EQUAL
67444: PUSH
67445: LD_VAR 0 2
67449: PPUSH
67450: CALL_OW 264
67454: PUSH
67455: LD_INT 81
67457: EQUAL
67458: AND
67459: IFFALSE 67480
// MinerPlaceMine ( unit , x , y ) ;
67461: LD_VAR 0 2
67465: PPUSH
67466: LD_VAR 0 4
67470: PPUSH
67471: LD_VAR 0 5
67475: PPUSH
67476: CALL 70470 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
67480: LD_VAR 0 1
67484: PUSH
67485: LD_INT 251
67487: EQUAL
67488: PUSH
67489: LD_VAR 0 2
67493: PPUSH
67494: CALL_OW 264
67498: PUSH
67499: LD_INT 81
67501: EQUAL
67502: AND
67503: IFFALSE 67524
// MinerDetonateMine ( unit , x , y ) ;
67505: LD_VAR 0 2
67509: PPUSH
67510: LD_VAR 0 4
67514: PPUSH
67515: LD_VAR 0 5
67519: PPUSH
67520: CALL 70745 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
67524: LD_VAR 0 1
67528: PUSH
67529: LD_INT 252
67531: EQUAL
67532: PUSH
67533: LD_VAR 0 2
67537: PPUSH
67538: CALL_OW 264
67542: PUSH
67543: LD_INT 81
67545: EQUAL
67546: AND
67547: IFFALSE 67568
// MinerCreateMinefield ( unit , x , y ) ;
67549: LD_VAR 0 2
67553: PPUSH
67554: LD_VAR 0 4
67558: PPUSH
67559: LD_VAR 0 5
67563: PPUSH
67564: CALL 71162 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
67568: LD_VAR 0 1
67572: PUSH
67573: LD_INT 253
67575: EQUAL
67576: PUSH
67577: LD_VAR 0 2
67581: PPUSH
67582: CALL_OW 257
67586: PUSH
67587: LD_INT 5
67589: EQUAL
67590: AND
67591: IFFALSE 67612
// ComBinocular ( unit , x , y ) ;
67593: LD_VAR 0 2
67597: PPUSH
67598: LD_VAR 0 4
67602: PPUSH
67603: LD_VAR 0 5
67607: PPUSH
67608: CALL 71531 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
67612: LD_VAR 0 1
67616: PUSH
67617: LD_INT 254
67619: EQUAL
67620: PUSH
67621: LD_VAR 0 2
67625: PPUSH
67626: CALL_OW 264
67630: PUSH
67631: LD_INT 99
67633: EQUAL
67634: AND
67635: PUSH
67636: LD_VAR 0 3
67640: PPUSH
67641: CALL_OW 263
67645: PUSH
67646: LD_INT 3
67648: EQUAL
67649: AND
67650: IFFALSE 67666
// HackDestroyVehicle ( unit , selectedUnit ) ;
67652: LD_VAR 0 2
67656: PPUSH
67657: LD_VAR 0 3
67661: PPUSH
67662: CALL 69834 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
67666: LD_VAR 0 1
67670: PUSH
67671: LD_INT 255
67673: EQUAL
67674: PUSH
67675: LD_VAR 0 2
67679: PPUSH
67680: CALL_OW 264
67684: PUSH
67685: LD_INT 14
67687: PUSH
67688: LD_INT 53
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: IN
67695: AND
67696: PUSH
67697: LD_VAR 0 4
67701: PPUSH
67702: LD_VAR 0 5
67706: PPUSH
67707: CALL_OW 488
67711: AND
67712: IFFALSE 67736
// CutTreeXYR ( unit , x , y , 12 ) ;
67714: LD_VAR 0 2
67718: PPUSH
67719: LD_VAR 0 4
67723: PPUSH
67724: LD_VAR 0 5
67728: PPUSH
67729: LD_INT 12
67731: PPUSH
67732: CALL 67831 0 4
// if cmd = 256 then
67736: LD_VAR 0 1
67740: PUSH
67741: LD_INT 256
67743: EQUAL
67744: IFFALSE 67765
// SetFactoryWaypoint ( unit , x , y ) ;
67746: LD_VAR 0 2
67750: PPUSH
67751: LD_VAR 0 4
67755: PPUSH
67756: LD_VAR 0 5
67760: PPUSH
67761: CALL 65746 0 3
// if cmd = 257 then
67765: LD_VAR 0 1
67769: PUSH
67770: LD_INT 257
67772: EQUAL
67773: IFFALSE 67794
// SetWarehouseGatheringPoint ( unit , x , y ) ;
67775: LD_VAR 0 2
67779: PPUSH
67780: LD_VAR 0 4
67784: PPUSH
67785: LD_VAR 0 5
67789: PPUSH
67790: CALL 66108 0 3
// if cmd = 258 then
67794: LD_VAR 0 1
67798: PUSH
67799: LD_INT 258
67801: EQUAL
67802: IFFALSE 67826
// BurnTreeXYR ( unit , x , y , 8 ) ;
67804: LD_VAR 0 2
67808: PPUSH
67809: LD_VAR 0 4
67813: PPUSH
67814: LD_VAR 0 5
67818: PPUSH
67819: LD_INT 8
67821: PPUSH
67822: CALL 68225 0 4
// end ;
67826: LD_VAR 0 6
67830: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
67831: LD_INT 0
67833: PPUSH
67834: PPUSH
67835: PPUSH
67836: PPUSH
67837: PPUSH
67838: PPUSH
67839: PPUSH
67840: PPUSH
67841: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
67842: LD_VAR 0 1
67846: PPUSH
67847: CALL_OW 302
67851: NOT
67852: PUSH
67853: LD_VAR 0 2
67857: PPUSH
67858: LD_VAR 0 3
67862: PPUSH
67863: CALL_OW 488
67867: NOT
67868: OR
67869: PUSH
67870: LD_VAR 0 4
67874: NOT
67875: OR
67876: IFFALSE 67880
// exit ;
67878: GO 68220
// list := [ ] ;
67880: LD_ADDR_VAR 0 13
67884: PUSH
67885: EMPTY
67886: ST_TO_ADDR
// if x - r < 0 then
67887: LD_VAR 0 2
67891: PUSH
67892: LD_VAR 0 4
67896: MINUS
67897: PUSH
67898: LD_INT 0
67900: LESS
67901: IFFALSE 67913
// min_x := 0 else
67903: LD_ADDR_VAR 0 7
67907: PUSH
67908: LD_INT 0
67910: ST_TO_ADDR
67911: GO 67929
// min_x := x - r ;
67913: LD_ADDR_VAR 0 7
67917: PUSH
67918: LD_VAR 0 2
67922: PUSH
67923: LD_VAR 0 4
67927: MINUS
67928: ST_TO_ADDR
// if y - r < 0 then
67929: LD_VAR 0 3
67933: PUSH
67934: LD_VAR 0 4
67938: MINUS
67939: PUSH
67940: LD_INT 0
67942: LESS
67943: IFFALSE 67955
// min_y := 0 else
67945: LD_ADDR_VAR 0 8
67949: PUSH
67950: LD_INT 0
67952: ST_TO_ADDR
67953: GO 67971
// min_y := y - r ;
67955: LD_ADDR_VAR 0 8
67959: PUSH
67960: LD_VAR 0 3
67964: PUSH
67965: LD_VAR 0 4
67969: MINUS
67970: ST_TO_ADDR
// max_x := x + r ;
67971: LD_ADDR_VAR 0 9
67975: PUSH
67976: LD_VAR 0 2
67980: PUSH
67981: LD_VAR 0 4
67985: PLUS
67986: ST_TO_ADDR
// max_y := y + r ;
67987: LD_ADDR_VAR 0 10
67991: PUSH
67992: LD_VAR 0 3
67996: PUSH
67997: LD_VAR 0 4
68001: PLUS
68002: ST_TO_ADDR
// for _x = min_x to max_x do
68003: LD_ADDR_VAR 0 11
68007: PUSH
68008: DOUBLE
68009: LD_VAR 0 7
68013: DEC
68014: ST_TO_ADDR
68015: LD_VAR 0 9
68019: PUSH
68020: FOR_TO
68021: IFFALSE 68138
// for _y = min_y to max_y do
68023: LD_ADDR_VAR 0 12
68027: PUSH
68028: DOUBLE
68029: LD_VAR 0 8
68033: DEC
68034: ST_TO_ADDR
68035: LD_VAR 0 10
68039: PUSH
68040: FOR_TO
68041: IFFALSE 68134
// begin if not ValidHex ( _x , _y ) then
68043: LD_VAR 0 11
68047: PPUSH
68048: LD_VAR 0 12
68052: PPUSH
68053: CALL_OW 488
68057: NOT
68058: IFFALSE 68062
// continue ;
68060: GO 68040
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
68062: LD_VAR 0 11
68066: PPUSH
68067: LD_VAR 0 12
68071: PPUSH
68072: CALL_OW 351
68076: PUSH
68077: LD_VAR 0 11
68081: PPUSH
68082: LD_VAR 0 12
68086: PPUSH
68087: CALL_OW 554
68091: AND
68092: IFFALSE 68132
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
68094: LD_ADDR_VAR 0 13
68098: PUSH
68099: LD_VAR 0 13
68103: PPUSH
68104: LD_VAR 0 13
68108: PUSH
68109: LD_INT 1
68111: PLUS
68112: PPUSH
68113: LD_VAR 0 11
68117: PUSH
68118: LD_VAR 0 12
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PPUSH
68127: CALL_OW 2
68131: ST_TO_ADDR
// end ;
68132: GO 68040
68134: POP
68135: POP
68136: GO 68020
68138: POP
68139: POP
// if not list then
68140: LD_VAR 0 13
68144: NOT
68145: IFFALSE 68149
// exit ;
68147: GO 68220
// for i in list do
68149: LD_ADDR_VAR 0 6
68153: PUSH
68154: LD_VAR 0 13
68158: PUSH
68159: FOR_IN
68160: IFFALSE 68218
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
68162: LD_VAR 0 1
68166: PPUSH
68167: LD_STRING M
68169: PUSH
68170: LD_VAR 0 6
68174: PUSH
68175: LD_INT 1
68177: ARRAY
68178: PUSH
68179: LD_VAR 0 6
68183: PUSH
68184: LD_INT 2
68186: ARRAY
68187: PUSH
68188: LD_INT 0
68190: PUSH
68191: LD_INT 0
68193: PUSH
68194: LD_INT 0
68196: PUSH
68197: LD_INT 0
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: PUSH
68209: EMPTY
68210: LIST
68211: PPUSH
68212: CALL_OW 447
68216: GO 68159
68218: POP
68219: POP
// end ;
68220: LD_VAR 0 5
68224: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
68225: LD_INT 0
68227: PPUSH
68228: PPUSH
68229: PPUSH
68230: PPUSH
68231: PPUSH
68232: PPUSH
68233: PPUSH
68234: PPUSH
68235: PPUSH
68236: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
68237: LD_VAR 0 1
68241: PPUSH
68242: CALL_OW 302
68246: NOT
68247: PUSH
68248: LD_VAR 0 2
68252: PPUSH
68253: LD_VAR 0 3
68257: PPUSH
68258: CALL_OW 488
68262: NOT
68263: OR
68264: PUSH
68265: LD_VAR 0 4
68269: NOT
68270: OR
68271: IFFALSE 68275
// exit ;
68273: GO 68788
// list := [ ] ;
68275: LD_ADDR_VAR 0 13
68279: PUSH
68280: EMPTY
68281: ST_TO_ADDR
// if x - r < 0 then
68282: LD_VAR 0 2
68286: PUSH
68287: LD_VAR 0 4
68291: MINUS
68292: PUSH
68293: LD_INT 0
68295: LESS
68296: IFFALSE 68308
// min_x := 0 else
68298: LD_ADDR_VAR 0 7
68302: PUSH
68303: LD_INT 0
68305: ST_TO_ADDR
68306: GO 68324
// min_x := x - r ;
68308: LD_ADDR_VAR 0 7
68312: PUSH
68313: LD_VAR 0 2
68317: PUSH
68318: LD_VAR 0 4
68322: MINUS
68323: ST_TO_ADDR
// if y - r < 0 then
68324: LD_VAR 0 3
68328: PUSH
68329: LD_VAR 0 4
68333: MINUS
68334: PUSH
68335: LD_INT 0
68337: LESS
68338: IFFALSE 68350
// min_y := 0 else
68340: LD_ADDR_VAR 0 8
68344: PUSH
68345: LD_INT 0
68347: ST_TO_ADDR
68348: GO 68366
// min_y := y - r ;
68350: LD_ADDR_VAR 0 8
68354: PUSH
68355: LD_VAR 0 3
68359: PUSH
68360: LD_VAR 0 4
68364: MINUS
68365: ST_TO_ADDR
// max_x := x + r ;
68366: LD_ADDR_VAR 0 9
68370: PUSH
68371: LD_VAR 0 2
68375: PUSH
68376: LD_VAR 0 4
68380: PLUS
68381: ST_TO_ADDR
// max_y := y + r ;
68382: LD_ADDR_VAR 0 10
68386: PUSH
68387: LD_VAR 0 3
68391: PUSH
68392: LD_VAR 0 4
68396: PLUS
68397: ST_TO_ADDR
// for _x = min_x to max_x do
68398: LD_ADDR_VAR 0 11
68402: PUSH
68403: DOUBLE
68404: LD_VAR 0 7
68408: DEC
68409: ST_TO_ADDR
68410: LD_VAR 0 9
68414: PUSH
68415: FOR_TO
68416: IFFALSE 68533
// for _y = min_y to max_y do
68418: LD_ADDR_VAR 0 12
68422: PUSH
68423: DOUBLE
68424: LD_VAR 0 8
68428: DEC
68429: ST_TO_ADDR
68430: LD_VAR 0 10
68434: PUSH
68435: FOR_TO
68436: IFFALSE 68529
// begin if not ValidHex ( _x , _y ) then
68438: LD_VAR 0 11
68442: PPUSH
68443: LD_VAR 0 12
68447: PPUSH
68448: CALL_OW 488
68452: NOT
68453: IFFALSE 68457
// continue ;
68455: GO 68435
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
68457: LD_VAR 0 11
68461: PPUSH
68462: LD_VAR 0 12
68466: PPUSH
68467: CALL_OW 351
68471: PUSH
68472: LD_VAR 0 11
68476: PPUSH
68477: LD_VAR 0 12
68481: PPUSH
68482: CALL_OW 554
68486: AND
68487: IFFALSE 68527
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
68489: LD_ADDR_VAR 0 13
68493: PUSH
68494: LD_VAR 0 13
68498: PPUSH
68499: LD_VAR 0 13
68503: PUSH
68504: LD_INT 1
68506: PLUS
68507: PPUSH
68508: LD_VAR 0 11
68512: PUSH
68513: LD_VAR 0 12
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PPUSH
68522: CALL_OW 2
68526: ST_TO_ADDR
// end ;
68527: GO 68435
68529: POP
68530: POP
68531: GO 68415
68533: POP
68534: POP
// if not list then
68535: LD_VAR 0 13
68539: NOT
68540: IFFALSE 68544
// exit ;
68542: GO 68788
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
68544: LD_ADDR_VAR 0 13
68548: PUSH
68549: LD_VAR 0 1
68553: PPUSH
68554: LD_VAR 0 13
68558: PPUSH
68559: LD_INT 1
68561: PPUSH
68562: LD_INT 1
68564: PPUSH
68565: CALL 14079 0 4
68569: ST_TO_ADDR
// ComStop ( flame ) ;
68570: LD_VAR 0 1
68574: PPUSH
68575: CALL_OW 141
// for i in list do
68579: LD_ADDR_VAR 0 6
68583: PUSH
68584: LD_VAR 0 13
68588: PUSH
68589: FOR_IN
68590: IFFALSE 68621
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
68592: LD_VAR 0 1
68596: PPUSH
68597: LD_VAR 0 6
68601: PUSH
68602: LD_INT 1
68604: ARRAY
68605: PPUSH
68606: LD_VAR 0 6
68610: PUSH
68611: LD_INT 2
68613: ARRAY
68614: PPUSH
68615: CALL_OW 176
68619: GO 68589
68621: POP
68622: POP
// repeat wait ( 0 0$1 ) ;
68623: LD_INT 35
68625: PPUSH
68626: CALL_OW 67
// task := GetTaskList ( flame ) ;
68630: LD_ADDR_VAR 0 14
68634: PUSH
68635: LD_VAR 0 1
68639: PPUSH
68640: CALL_OW 437
68644: ST_TO_ADDR
// if not task then
68645: LD_VAR 0 14
68649: NOT
68650: IFFALSE 68654
// exit ;
68652: GO 68788
// if task [ 1 ] [ 1 ] <> | then
68654: LD_VAR 0 14
68658: PUSH
68659: LD_INT 1
68661: ARRAY
68662: PUSH
68663: LD_INT 1
68665: ARRAY
68666: PUSH
68667: LD_STRING |
68669: NONEQUAL
68670: IFFALSE 68674
// exit ;
68672: GO 68788
// _x := task [ 1 ] [ 2 ] ;
68674: LD_ADDR_VAR 0 11
68678: PUSH
68679: LD_VAR 0 14
68683: PUSH
68684: LD_INT 1
68686: ARRAY
68687: PUSH
68688: LD_INT 2
68690: ARRAY
68691: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
68692: LD_ADDR_VAR 0 12
68696: PUSH
68697: LD_VAR 0 14
68701: PUSH
68702: LD_INT 1
68704: ARRAY
68705: PUSH
68706: LD_INT 3
68708: ARRAY
68709: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
68710: LD_VAR 0 11
68714: PPUSH
68715: LD_VAR 0 12
68719: PPUSH
68720: CALL_OW 351
68724: NOT
68725: PUSH
68726: LD_VAR 0 11
68730: PPUSH
68731: LD_VAR 0 12
68735: PPUSH
68736: CALL_OW 554
68740: NOT
68741: OR
68742: IFFALSE 68776
// begin task := Delete ( task , 1 ) ;
68744: LD_ADDR_VAR 0 14
68748: PUSH
68749: LD_VAR 0 14
68753: PPUSH
68754: LD_INT 1
68756: PPUSH
68757: CALL_OW 3
68761: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
68762: LD_VAR 0 1
68766: PPUSH
68767: LD_VAR 0 14
68771: PPUSH
68772: CALL_OW 446
// end ; until not HasTask ( flame ) ;
68776: LD_VAR 0 1
68780: PPUSH
68781: CALL_OW 314
68785: NOT
68786: IFFALSE 68623
// end ;
68788: LD_VAR 0 5
68792: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
68793: LD_EXP 90
68797: NOT
68798: IFFALSE 68848
68800: GO 68802
68802: DISABLE
// begin initHack := true ;
68803: LD_ADDR_EXP 90
68807: PUSH
68808: LD_INT 1
68810: ST_TO_ADDR
// hackTanks := [ ] ;
68811: LD_ADDR_EXP 91
68815: PUSH
68816: EMPTY
68817: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
68818: LD_ADDR_EXP 92
68822: PUSH
68823: EMPTY
68824: ST_TO_ADDR
// hackLimit := 3 ;
68825: LD_ADDR_EXP 93
68829: PUSH
68830: LD_INT 3
68832: ST_TO_ADDR
// hackDist := 12 ;
68833: LD_ADDR_EXP 94
68837: PUSH
68838: LD_INT 12
68840: ST_TO_ADDR
// hackCounter := [ ] ;
68841: LD_ADDR_EXP 95
68845: PUSH
68846: EMPTY
68847: ST_TO_ADDR
// end ;
68848: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
68849: LD_EXP 90
68853: PUSH
68854: LD_INT 34
68856: PUSH
68857: LD_INT 99
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PPUSH
68864: CALL_OW 69
68868: AND
68869: IFFALSE 69122
68871: GO 68873
68873: DISABLE
68874: LD_INT 0
68876: PPUSH
68877: PPUSH
// begin enable ;
68878: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
68879: LD_ADDR_VAR 0 1
68883: PUSH
68884: LD_INT 34
68886: PUSH
68887: LD_INT 99
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PPUSH
68894: CALL_OW 69
68898: PUSH
68899: FOR_IN
68900: IFFALSE 69120
// begin if not i in hackTanks then
68902: LD_VAR 0 1
68906: PUSH
68907: LD_EXP 91
68911: IN
68912: NOT
68913: IFFALSE 68996
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
68915: LD_ADDR_EXP 91
68919: PUSH
68920: LD_EXP 91
68924: PPUSH
68925: LD_EXP 91
68929: PUSH
68930: LD_INT 1
68932: PLUS
68933: PPUSH
68934: LD_VAR 0 1
68938: PPUSH
68939: CALL_OW 1
68943: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
68944: LD_ADDR_EXP 92
68948: PUSH
68949: LD_EXP 92
68953: PPUSH
68954: LD_EXP 92
68958: PUSH
68959: LD_INT 1
68961: PLUS
68962: PPUSH
68963: EMPTY
68964: PPUSH
68965: CALL_OW 1
68969: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
68970: LD_ADDR_EXP 95
68974: PUSH
68975: LD_EXP 95
68979: PPUSH
68980: LD_EXP 95
68984: PUSH
68985: LD_INT 1
68987: PLUS
68988: PPUSH
68989: EMPTY
68990: PPUSH
68991: CALL_OW 1
68995: ST_TO_ADDR
// end ; if not IsOk ( i ) then
68996: LD_VAR 0 1
69000: PPUSH
69001: CALL_OW 302
69005: NOT
69006: IFFALSE 69019
// begin HackUnlinkAll ( i ) ;
69008: LD_VAR 0 1
69012: PPUSH
69013: CALL 69125 0 1
// continue ;
69017: GO 68899
// end ; HackCheckCapturedStatus ( i ) ;
69019: LD_VAR 0 1
69023: PPUSH
69024: CALL 69568 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
69028: LD_ADDR_VAR 0 2
69032: PUSH
69033: LD_INT 81
69035: PUSH
69036: LD_VAR 0 1
69040: PPUSH
69041: CALL_OW 255
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 33
69052: PUSH
69053: LD_INT 3
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 91
69062: PUSH
69063: LD_VAR 0 1
69067: PUSH
69068: LD_EXP 94
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 50
69080: PUSH
69081: EMPTY
69082: LIST
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: PPUSH
69090: CALL_OW 69
69094: ST_TO_ADDR
// if not tmp then
69095: LD_VAR 0 2
69099: NOT
69100: IFFALSE 69104
// continue ;
69102: GO 68899
// HackLink ( i , tmp ) ;
69104: LD_VAR 0 1
69108: PPUSH
69109: LD_VAR 0 2
69113: PPUSH
69114: CALL 69261 0 2
// end ;
69118: GO 68899
69120: POP
69121: POP
// end ;
69122: PPOPN 2
69124: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
69125: LD_INT 0
69127: PPUSH
69128: PPUSH
69129: PPUSH
// if not hack in hackTanks then
69130: LD_VAR 0 1
69134: PUSH
69135: LD_EXP 91
69139: IN
69140: NOT
69141: IFFALSE 69145
// exit ;
69143: GO 69256
// index := GetElementIndex ( hackTanks , hack ) ;
69145: LD_ADDR_VAR 0 4
69149: PUSH
69150: LD_EXP 91
69154: PPUSH
69155: LD_VAR 0 1
69159: PPUSH
69160: CALL 13376 0 2
69164: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
69165: LD_EXP 92
69169: PUSH
69170: LD_VAR 0 4
69174: ARRAY
69175: IFFALSE 69256
// begin for i in hackTanksCaptured [ index ] do
69177: LD_ADDR_VAR 0 3
69181: PUSH
69182: LD_EXP 92
69186: PUSH
69187: LD_VAR 0 4
69191: ARRAY
69192: PUSH
69193: FOR_IN
69194: IFFALSE 69220
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
69196: LD_VAR 0 3
69200: PUSH
69201: LD_INT 1
69203: ARRAY
69204: PPUSH
69205: LD_VAR 0 3
69209: PUSH
69210: LD_INT 2
69212: ARRAY
69213: PPUSH
69214: CALL_OW 235
69218: GO 69193
69220: POP
69221: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
69222: LD_ADDR_EXP 92
69226: PUSH
69227: LD_EXP 92
69231: PPUSH
69232: LD_VAR 0 4
69236: PPUSH
69237: EMPTY
69238: PPUSH
69239: CALL_OW 1
69243: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
69244: LD_VAR 0 1
69248: PPUSH
69249: LD_INT 0
69251: PPUSH
69252: CALL_OW 505
// end ; end ;
69256: LD_VAR 0 2
69260: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
69261: LD_INT 0
69263: PPUSH
69264: PPUSH
69265: PPUSH
// if not hack in hackTanks or not vehicles then
69266: LD_VAR 0 1
69270: PUSH
69271: LD_EXP 91
69275: IN
69276: NOT
69277: PUSH
69278: LD_VAR 0 2
69282: NOT
69283: OR
69284: IFFALSE 69288
// exit ;
69286: GO 69563
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
69288: LD_ADDR_VAR 0 2
69292: PUSH
69293: LD_VAR 0 1
69297: PPUSH
69298: LD_VAR 0 2
69302: PPUSH
69303: LD_INT 1
69305: PPUSH
69306: LD_INT 1
69308: PPUSH
69309: CALL 14026 0 4
69313: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
69314: LD_ADDR_VAR 0 5
69318: PUSH
69319: LD_EXP 91
69323: PPUSH
69324: LD_VAR 0 1
69328: PPUSH
69329: CALL 13376 0 2
69333: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
69334: LD_EXP 92
69338: PUSH
69339: LD_VAR 0 5
69343: ARRAY
69344: PUSH
69345: LD_EXP 93
69349: LESS
69350: IFFALSE 69539
// begin for i := 1 to vehicles do
69352: LD_ADDR_VAR 0 4
69356: PUSH
69357: DOUBLE
69358: LD_INT 1
69360: DEC
69361: ST_TO_ADDR
69362: LD_VAR 0 2
69366: PUSH
69367: FOR_TO
69368: IFFALSE 69537
// begin if hackTanksCaptured [ index ] = hackLimit then
69370: LD_EXP 92
69374: PUSH
69375: LD_VAR 0 5
69379: ARRAY
69380: PUSH
69381: LD_EXP 93
69385: EQUAL
69386: IFFALSE 69390
// break ;
69388: GO 69537
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
69390: LD_ADDR_EXP 95
69394: PUSH
69395: LD_EXP 95
69399: PPUSH
69400: LD_VAR 0 5
69404: PPUSH
69405: LD_EXP 95
69409: PUSH
69410: LD_VAR 0 5
69414: ARRAY
69415: PUSH
69416: LD_INT 1
69418: PLUS
69419: PPUSH
69420: CALL_OW 1
69424: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
69425: LD_ADDR_EXP 92
69429: PUSH
69430: LD_EXP 92
69434: PPUSH
69435: LD_VAR 0 5
69439: PUSH
69440: LD_EXP 92
69444: PUSH
69445: LD_VAR 0 5
69449: ARRAY
69450: PUSH
69451: LD_INT 1
69453: PLUS
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PPUSH
69459: LD_VAR 0 2
69463: PUSH
69464: LD_VAR 0 4
69468: ARRAY
69469: PUSH
69470: LD_VAR 0 2
69474: PUSH
69475: LD_VAR 0 4
69479: ARRAY
69480: PPUSH
69481: CALL_OW 255
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PPUSH
69490: CALL 13591 0 3
69494: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
69495: LD_VAR 0 2
69499: PUSH
69500: LD_VAR 0 4
69504: ARRAY
69505: PPUSH
69506: LD_VAR 0 1
69510: PPUSH
69511: CALL_OW 255
69515: PPUSH
69516: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
69520: LD_VAR 0 2
69524: PUSH
69525: LD_VAR 0 4
69529: ARRAY
69530: PPUSH
69531: CALL_OW 141
// end ;
69535: GO 69367
69537: POP
69538: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
69539: LD_VAR 0 1
69543: PPUSH
69544: LD_EXP 92
69548: PUSH
69549: LD_VAR 0 5
69553: ARRAY
69554: PUSH
69555: LD_INT 0
69557: PLUS
69558: PPUSH
69559: CALL_OW 505
// end ;
69563: LD_VAR 0 3
69567: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
69568: LD_INT 0
69570: PPUSH
69571: PPUSH
69572: PPUSH
69573: PPUSH
// if not hack in hackTanks then
69574: LD_VAR 0 1
69578: PUSH
69579: LD_EXP 91
69583: IN
69584: NOT
69585: IFFALSE 69589
// exit ;
69587: GO 69829
// index := GetElementIndex ( hackTanks , hack ) ;
69589: LD_ADDR_VAR 0 4
69593: PUSH
69594: LD_EXP 91
69598: PPUSH
69599: LD_VAR 0 1
69603: PPUSH
69604: CALL 13376 0 2
69608: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
69609: LD_ADDR_VAR 0 3
69613: PUSH
69614: DOUBLE
69615: LD_EXP 92
69619: PUSH
69620: LD_VAR 0 4
69624: ARRAY
69625: INC
69626: ST_TO_ADDR
69627: LD_INT 1
69629: PUSH
69630: FOR_DOWNTO
69631: IFFALSE 69803
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
69633: LD_ADDR_VAR 0 5
69637: PUSH
69638: LD_EXP 92
69642: PUSH
69643: LD_VAR 0 4
69647: ARRAY
69648: PUSH
69649: LD_VAR 0 3
69653: ARRAY
69654: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
69655: LD_VAR 0 5
69659: PUSH
69660: LD_INT 1
69662: ARRAY
69663: PPUSH
69664: CALL_OW 302
69668: NOT
69669: PUSH
69670: LD_VAR 0 5
69674: PUSH
69675: LD_INT 1
69677: ARRAY
69678: PPUSH
69679: CALL_OW 255
69683: PUSH
69684: LD_VAR 0 1
69688: PPUSH
69689: CALL_OW 255
69693: NONEQUAL
69694: OR
69695: IFFALSE 69801
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
69697: LD_VAR 0 5
69701: PUSH
69702: LD_INT 1
69704: ARRAY
69705: PPUSH
69706: CALL_OW 305
69710: PUSH
69711: LD_VAR 0 5
69715: PUSH
69716: LD_INT 1
69718: ARRAY
69719: PPUSH
69720: CALL_OW 255
69724: PUSH
69725: LD_VAR 0 1
69729: PPUSH
69730: CALL_OW 255
69734: EQUAL
69735: AND
69736: IFFALSE 69760
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
69738: LD_VAR 0 5
69742: PUSH
69743: LD_INT 1
69745: ARRAY
69746: PPUSH
69747: LD_VAR 0 5
69751: PUSH
69752: LD_INT 2
69754: ARRAY
69755: PPUSH
69756: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
69760: LD_ADDR_EXP 92
69764: PUSH
69765: LD_EXP 92
69769: PPUSH
69770: LD_VAR 0 4
69774: PPUSH
69775: LD_EXP 92
69779: PUSH
69780: LD_VAR 0 4
69784: ARRAY
69785: PPUSH
69786: LD_VAR 0 3
69790: PPUSH
69791: CALL_OW 3
69795: PPUSH
69796: CALL_OW 1
69800: ST_TO_ADDR
// end ; end ;
69801: GO 69630
69803: POP
69804: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
69805: LD_VAR 0 1
69809: PPUSH
69810: LD_EXP 92
69814: PUSH
69815: LD_VAR 0 4
69819: ARRAY
69820: PUSH
69821: LD_INT 0
69823: PLUS
69824: PPUSH
69825: CALL_OW 505
// end ;
69829: LD_VAR 0 2
69833: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
69834: LD_INT 0
69836: PPUSH
69837: PPUSH
69838: PPUSH
69839: PPUSH
// if not hack in hackTanks then
69840: LD_VAR 0 1
69844: PUSH
69845: LD_EXP 91
69849: IN
69850: NOT
69851: IFFALSE 69855
// exit ;
69853: GO 69940
// index := GetElementIndex ( hackTanks , hack ) ;
69855: LD_ADDR_VAR 0 5
69859: PUSH
69860: LD_EXP 91
69864: PPUSH
69865: LD_VAR 0 1
69869: PPUSH
69870: CALL 13376 0 2
69874: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
69875: LD_ADDR_VAR 0 4
69879: PUSH
69880: DOUBLE
69881: LD_INT 1
69883: DEC
69884: ST_TO_ADDR
69885: LD_EXP 92
69889: PUSH
69890: LD_VAR 0 5
69894: ARRAY
69895: PUSH
69896: FOR_TO
69897: IFFALSE 69938
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
69899: LD_EXP 92
69903: PUSH
69904: LD_VAR 0 5
69908: ARRAY
69909: PUSH
69910: LD_VAR 0 4
69914: ARRAY
69915: PUSH
69916: LD_INT 1
69918: ARRAY
69919: PUSH
69920: LD_VAR 0 2
69924: EQUAL
69925: IFFALSE 69936
// KillUnit ( vehicle ) ;
69927: LD_VAR 0 2
69931: PPUSH
69932: CALL_OW 66
69936: GO 69896
69938: POP
69939: POP
// end ;
69940: LD_VAR 0 3
69944: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
69945: LD_EXP 96
69949: NOT
69950: IFFALSE 69985
69952: GO 69954
69954: DISABLE
// begin initMiner := true ;
69955: LD_ADDR_EXP 96
69959: PUSH
69960: LD_INT 1
69962: ST_TO_ADDR
// minersList := [ ] ;
69963: LD_ADDR_EXP 97
69967: PUSH
69968: EMPTY
69969: ST_TO_ADDR
// minerMinesList := [ ] ;
69970: LD_ADDR_EXP 98
69974: PUSH
69975: EMPTY
69976: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
69977: LD_ADDR_EXP 99
69981: PUSH
69982: LD_INT 5
69984: ST_TO_ADDR
// end ;
69985: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
69986: LD_EXP 96
69990: PUSH
69991: LD_INT 34
69993: PUSH
69994: LD_INT 81
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PPUSH
70001: CALL_OW 69
70005: AND
70006: IFFALSE 70467
70008: GO 70010
70010: DISABLE
70011: LD_INT 0
70013: PPUSH
70014: PPUSH
70015: PPUSH
70016: PPUSH
// begin enable ;
70017: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
70018: LD_ADDR_VAR 0 1
70022: PUSH
70023: LD_INT 34
70025: PUSH
70026: LD_INT 81
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PPUSH
70033: CALL_OW 69
70037: PUSH
70038: FOR_IN
70039: IFFALSE 70111
// begin if not i in minersList then
70041: LD_VAR 0 1
70045: PUSH
70046: LD_EXP 97
70050: IN
70051: NOT
70052: IFFALSE 70109
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
70054: LD_ADDR_EXP 97
70058: PUSH
70059: LD_EXP 97
70063: PPUSH
70064: LD_EXP 97
70068: PUSH
70069: LD_INT 1
70071: PLUS
70072: PPUSH
70073: LD_VAR 0 1
70077: PPUSH
70078: CALL_OW 1
70082: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
70083: LD_ADDR_EXP 98
70087: PUSH
70088: LD_EXP 98
70092: PPUSH
70093: LD_EXP 98
70097: PUSH
70098: LD_INT 1
70100: PLUS
70101: PPUSH
70102: EMPTY
70103: PPUSH
70104: CALL_OW 1
70108: ST_TO_ADDR
// end end ;
70109: GO 70038
70111: POP
70112: POP
// for i := minerMinesList downto 1 do
70113: LD_ADDR_VAR 0 1
70117: PUSH
70118: DOUBLE
70119: LD_EXP 98
70123: INC
70124: ST_TO_ADDR
70125: LD_INT 1
70127: PUSH
70128: FOR_DOWNTO
70129: IFFALSE 70465
// begin if IsLive ( minersList [ i ] ) then
70131: LD_EXP 97
70135: PUSH
70136: LD_VAR 0 1
70140: ARRAY
70141: PPUSH
70142: CALL_OW 300
70146: IFFALSE 70174
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
70148: LD_EXP 97
70152: PUSH
70153: LD_VAR 0 1
70157: ARRAY
70158: PPUSH
70159: LD_EXP 98
70163: PUSH
70164: LD_VAR 0 1
70168: ARRAY
70169: PPUSH
70170: CALL_OW 505
// if not minerMinesList [ i ] then
70174: LD_EXP 98
70178: PUSH
70179: LD_VAR 0 1
70183: ARRAY
70184: NOT
70185: IFFALSE 70189
// continue ;
70187: GO 70128
// for j := minerMinesList [ i ] downto 1 do
70189: LD_ADDR_VAR 0 2
70193: PUSH
70194: DOUBLE
70195: LD_EXP 98
70199: PUSH
70200: LD_VAR 0 1
70204: ARRAY
70205: INC
70206: ST_TO_ADDR
70207: LD_INT 1
70209: PUSH
70210: FOR_DOWNTO
70211: IFFALSE 70461
// begin side := GetSide ( minersList [ i ] ) ;
70213: LD_ADDR_VAR 0 3
70217: PUSH
70218: LD_EXP 97
70222: PUSH
70223: LD_VAR 0 1
70227: ARRAY
70228: PPUSH
70229: CALL_OW 255
70233: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
70234: LD_ADDR_VAR 0 4
70238: PUSH
70239: LD_EXP 98
70243: PUSH
70244: LD_VAR 0 1
70248: ARRAY
70249: PUSH
70250: LD_VAR 0 2
70254: ARRAY
70255: PUSH
70256: LD_INT 1
70258: ARRAY
70259: PPUSH
70260: LD_EXP 98
70264: PUSH
70265: LD_VAR 0 1
70269: ARRAY
70270: PUSH
70271: LD_VAR 0 2
70275: ARRAY
70276: PUSH
70277: LD_INT 2
70279: ARRAY
70280: PPUSH
70281: CALL_OW 428
70285: ST_TO_ADDR
// if not tmp then
70286: LD_VAR 0 4
70290: NOT
70291: IFFALSE 70295
// continue ;
70293: GO 70210
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
70295: LD_VAR 0 4
70299: PUSH
70300: LD_INT 81
70302: PUSH
70303: LD_VAR 0 3
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PPUSH
70312: CALL_OW 69
70316: IN
70317: PUSH
70318: LD_EXP 98
70322: PUSH
70323: LD_VAR 0 1
70327: ARRAY
70328: PUSH
70329: LD_VAR 0 2
70333: ARRAY
70334: PUSH
70335: LD_INT 1
70337: ARRAY
70338: PPUSH
70339: LD_EXP 98
70343: PUSH
70344: LD_VAR 0 1
70348: ARRAY
70349: PUSH
70350: LD_VAR 0 2
70354: ARRAY
70355: PUSH
70356: LD_INT 2
70358: ARRAY
70359: PPUSH
70360: CALL_OW 458
70364: AND
70365: IFFALSE 70459
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
70367: LD_EXP 98
70371: PUSH
70372: LD_VAR 0 1
70376: ARRAY
70377: PUSH
70378: LD_VAR 0 2
70382: ARRAY
70383: PUSH
70384: LD_INT 1
70386: ARRAY
70387: PPUSH
70388: LD_EXP 98
70392: PUSH
70393: LD_VAR 0 1
70397: ARRAY
70398: PUSH
70399: LD_VAR 0 2
70403: ARRAY
70404: PUSH
70405: LD_INT 2
70407: ARRAY
70408: PPUSH
70409: LD_VAR 0 3
70413: PPUSH
70414: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
70418: LD_ADDR_EXP 98
70422: PUSH
70423: LD_EXP 98
70427: PPUSH
70428: LD_VAR 0 1
70432: PPUSH
70433: LD_EXP 98
70437: PUSH
70438: LD_VAR 0 1
70442: ARRAY
70443: PPUSH
70444: LD_VAR 0 2
70448: PPUSH
70449: CALL_OW 3
70453: PPUSH
70454: CALL_OW 1
70458: ST_TO_ADDR
// end ; end ;
70459: GO 70210
70461: POP
70462: POP
// end ;
70463: GO 70128
70465: POP
70466: POP
// end ;
70467: PPOPN 4
70469: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
70470: LD_INT 0
70472: PPUSH
70473: PPUSH
// result := false ;
70474: LD_ADDR_VAR 0 4
70478: PUSH
70479: LD_INT 0
70481: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
70482: LD_VAR 0 1
70486: PPUSH
70487: CALL_OW 264
70491: PUSH
70492: LD_INT 81
70494: EQUAL
70495: NOT
70496: IFFALSE 70500
// exit ;
70498: GO 70740
// index := GetElementIndex ( minersList , unit ) ;
70500: LD_ADDR_VAR 0 5
70504: PUSH
70505: LD_EXP 97
70509: PPUSH
70510: LD_VAR 0 1
70514: PPUSH
70515: CALL 13376 0 2
70519: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
70520: LD_EXP 98
70524: PUSH
70525: LD_VAR 0 5
70529: ARRAY
70530: PUSH
70531: LD_EXP 99
70535: GREATEREQUAL
70536: IFFALSE 70540
// exit ;
70538: GO 70740
// ComMoveXY ( unit , x , y ) ;
70540: LD_VAR 0 1
70544: PPUSH
70545: LD_VAR 0 2
70549: PPUSH
70550: LD_VAR 0 3
70554: PPUSH
70555: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
70559: LD_INT 35
70561: PPUSH
70562: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
70566: LD_VAR 0 1
70570: PPUSH
70571: LD_VAR 0 2
70575: PPUSH
70576: LD_VAR 0 3
70580: PPUSH
70581: CALL 45117 0 3
70585: NOT
70586: PUSH
70587: LD_VAR 0 1
70591: PPUSH
70592: CALL_OW 314
70596: AND
70597: IFFALSE 70601
// exit ;
70599: GO 70740
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
70601: LD_VAR 0 2
70605: PPUSH
70606: LD_VAR 0 3
70610: PPUSH
70611: CALL_OW 428
70615: PUSH
70616: LD_VAR 0 1
70620: EQUAL
70621: PUSH
70622: LD_VAR 0 1
70626: PPUSH
70627: CALL_OW 314
70631: NOT
70632: AND
70633: IFFALSE 70559
// PlaySoundXY ( x , y , PlantMine ) ;
70635: LD_VAR 0 2
70639: PPUSH
70640: LD_VAR 0 3
70644: PPUSH
70645: LD_STRING PlantMine
70647: PPUSH
70648: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
70652: LD_VAR 0 2
70656: PPUSH
70657: LD_VAR 0 3
70661: PPUSH
70662: LD_VAR 0 1
70666: PPUSH
70667: CALL_OW 255
70671: PPUSH
70672: LD_INT 0
70674: PPUSH
70675: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
70679: LD_ADDR_EXP 98
70683: PUSH
70684: LD_EXP 98
70688: PPUSH
70689: LD_VAR 0 5
70693: PUSH
70694: LD_EXP 98
70698: PUSH
70699: LD_VAR 0 5
70703: ARRAY
70704: PUSH
70705: LD_INT 1
70707: PLUS
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PPUSH
70713: LD_VAR 0 2
70717: PUSH
70718: LD_VAR 0 3
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PPUSH
70727: CALL 13591 0 3
70731: ST_TO_ADDR
// result := true ;
70732: LD_ADDR_VAR 0 4
70736: PUSH
70737: LD_INT 1
70739: ST_TO_ADDR
// end ;
70740: LD_VAR 0 4
70744: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
70745: LD_INT 0
70747: PPUSH
70748: PPUSH
70749: PPUSH
// if not unit in minersList then
70750: LD_VAR 0 1
70754: PUSH
70755: LD_EXP 97
70759: IN
70760: NOT
70761: IFFALSE 70765
// exit ;
70763: GO 71157
// index := GetElementIndex ( minersList , unit ) ;
70765: LD_ADDR_VAR 0 6
70769: PUSH
70770: LD_EXP 97
70774: PPUSH
70775: LD_VAR 0 1
70779: PPUSH
70780: CALL 13376 0 2
70784: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
70785: LD_ADDR_VAR 0 5
70789: PUSH
70790: DOUBLE
70791: LD_EXP 98
70795: PUSH
70796: LD_VAR 0 6
70800: ARRAY
70801: INC
70802: ST_TO_ADDR
70803: LD_INT 1
70805: PUSH
70806: FOR_DOWNTO
70807: IFFALSE 70968
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
70809: LD_EXP 98
70813: PUSH
70814: LD_VAR 0 6
70818: ARRAY
70819: PUSH
70820: LD_VAR 0 5
70824: ARRAY
70825: PUSH
70826: LD_INT 1
70828: ARRAY
70829: PUSH
70830: LD_VAR 0 2
70834: EQUAL
70835: PUSH
70836: LD_EXP 98
70840: PUSH
70841: LD_VAR 0 6
70845: ARRAY
70846: PUSH
70847: LD_VAR 0 5
70851: ARRAY
70852: PUSH
70853: LD_INT 2
70855: ARRAY
70856: PUSH
70857: LD_VAR 0 3
70861: EQUAL
70862: AND
70863: IFFALSE 70966
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
70865: LD_EXP 98
70869: PUSH
70870: LD_VAR 0 6
70874: ARRAY
70875: PUSH
70876: LD_VAR 0 5
70880: ARRAY
70881: PUSH
70882: LD_INT 1
70884: ARRAY
70885: PPUSH
70886: LD_EXP 98
70890: PUSH
70891: LD_VAR 0 6
70895: ARRAY
70896: PUSH
70897: LD_VAR 0 5
70901: ARRAY
70902: PUSH
70903: LD_INT 2
70905: ARRAY
70906: PPUSH
70907: LD_VAR 0 1
70911: PPUSH
70912: CALL_OW 255
70916: PPUSH
70917: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
70921: LD_ADDR_EXP 98
70925: PUSH
70926: LD_EXP 98
70930: PPUSH
70931: LD_VAR 0 6
70935: PPUSH
70936: LD_EXP 98
70940: PUSH
70941: LD_VAR 0 6
70945: ARRAY
70946: PPUSH
70947: LD_VAR 0 5
70951: PPUSH
70952: CALL_OW 3
70956: PPUSH
70957: CALL_OW 1
70961: ST_TO_ADDR
// exit ;
70962: POP
70963: POP
70964: GO 71157
// end ; end ;
70966: GO 70806
70968: POP
70969: POP
// for i := minerMinesList [ index ] downto 1 do
70970: LD_ADDR_VAR 0 5
70974: PUSH
70975: DOUBLE
70976: LD_EXP 98
70980: PUSH
70981: LD_VAR 0 6
70985: ARRAY
70986: INC
70987: ST_TO_ADDR
70988: LD_INT 1
70990: PUSH
70991: FOR_DOWNTO
70992: IFFALSE 71155
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
70994: LD_EXP 98
70998: PUSH
70999: LD_VAR 0 6
71003: ARRAY
71004: PUSH
71005: LD_VAR 0 5
71009: ARRAY
71010: PUSH
71011: LD_INT 1
71013: ARRAY
71014: PPUSH
71015: LD_EXP 98
71019: PUSH
71020: LD_VAR 0 6
71024: ARRAY
71025: PUSH
71026: LD_VAR 0 5
71030: ARRAY
71031: PUSH
71032: LD_INT 2
71034: ARRAY
71035: PPUSH
71036: LD_VAR 0 2
71040: PPUSH
71041: LD_VAR 0 3
71045: PPUSH
71046: CALL_OW 298
71050: PUSH
71051: LD_INT 6
71053: LESS
71054: IFFALSE 71153
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71056: LD_EXP 98
71060: PUSH
71061: LD_VAR 0 6
71065: ARRAY
71066: PUSH
71067: LD_VAR 0 5
71071: ARRAY
71072: PUSH
71073: LD_INT 1
71075: ARRAY
71076: PPUSH
71077: LD_EXP 98
71081: PUSH
71082: LD_VAR 0 6
71086: ARRAY
71087: PUSH
71088: LD_VAR 0 5
71092: ARRAY
71093: PUSH
71094: LD_INT 2
71096: ARRAY
71097: PPUSH
71098: LD_VAR 0 1
71102: PPUSH
71103: CALL_OW 255
71107: PPUSH
71108: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71112: LD_ADDR_EXP 98
71116: PUSH
71117: LD_EXP 98
71121: PPUSH
71122: LD_VAR 0 6
71126: PPUSH
71127: LD_EXP 98
71131: PUSH
71132: LD_VAR 0 6
71136: ARRAY
71137: PPUSH
71138: LD_VAR 0 5
71142: PPUSH
71143: CALL_OW 3
71147: PPUSH
71148: CALL_OW 1
71152: ST_TO_ADDR
// end ; end ;
71153: GO 70991
71155: POP
71156: POP
// end ;
71157: LD_VAR 0 4
71161: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
71162: LD_INT 0
71164: PPUSH
71165: PPUSH
71166: PPUSH
71167: PPUSH
71168: PPUSH
71169: PPUSH
71170: PPUSH
71171: PPUSH
71172: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
71173: LD_VAR 0 1
71177: PPUSH
71178: CALL_OW 264
71182: PUSH
71183: LD_INT 81
71185: EQUAL
71186: NOT
71187: PUSH
71188: LD_VAR 0 1
71192: PUSH
71193: LD_EXP 97
71197: IN
71198: NOT
71199: OR
71200: IFFALSE 71204
// exit ;
71202: GO 71526
// index := GetElementIndex ( minersList , unit ) ;
71204: LD_ADDR_VAR 0 6
71208: PUSH
71209: LD_EXP 97
71213: PPUSH
71214: LD_VAR 0 1
71218: PPUSH
71219: CALL 13376 0 2
71223: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
71224: LD_ADDR_VAR 0 8
71228: PUSH
71229: LD_EXP 99
71233: PUSH
71234: LD_EXP 98
71238: PUSH
71239: LD_VAR 0 6
71243: ARRAY
71244: MINUS
71245: ST_TO_ADDR
// if not minesFreeAmount then
71246: LD_VAR 0 8
71250: NOT
71251: IFFALSE 71255
// exit ;
71253: GO 71526
// tmp := [ ] ;
71255: LD_ADDR_VAR 0 7
71259: PUSH
71260: EMPTY
71261: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
71262: LD_ADDR_VAR 0 5
71266: PUSH
71267: DOUBLE
71268: LD_INT 1
71270: DEC
71271: ST_TO_ADDR
71272: LD_VAR 0 8
71276: PUSH
71277: FOR_TO
71278: IFFALSE 71473
// begin _d := rand ( 0 , 5 ) ;
71280: LD_ADDR_VAR 0 11
71284: PUSH
71285: LD_INT 0
71287: PPUSH
71288: LD_INT 5
71290: PPUSH
71291: CALL_OW 12
71295: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
71296: LD_ADDR_VAR 0 12
71300: PUSH
71301: LD_INT 2
71303: PPUSH
71304: LD_INT 6
71306: PPUSH
71307: CALL_OW 12
71311: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
71312: LD_ADDR_VAR 0 9
71316: PUSH
71317: LD_VAR 0 2
71321: PPUSH
71322: LD_VAR 0 11
71326: PPUSH
71327: LD_VAR 0 12
71331: PPUSH
71332: CALL_OW 272
71336: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
71337: LD_ADDR_VAR 0 10
71341: PUSH
71342: LD_VAR 0 3
71346: PPUSH
71347: LD_VAR 0 11
71351: PPUSH
71352: LD_VAR 0 12
71356: PPUSH
71357: CALL_OW 273
71361: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
71362: LD_VAR 0 9
71366: PPUSH
71367: LD_VAR 0 10
71371: PPUSH
71372: CALL_OW 488
71376: PUSH
71377: LD_VAR 0 9
71381: PUSH
71382: LD_VAR 0 10
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: PUSH
71391: LD_VAR 0 7
71395: IN
71396: NOT
71397: AND
71398: PUSH
71399: LD_VAR 0 9
71403: PPUSH
71404: LD_VAR 0 10
71408: PPUSH
71409: CALL_OW 458
71413: NOT
71414: AND
71415: IFFALSE 71457
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
71417: LD_ADDR_VAR 0 7
71421: PUSH
71422: LD_VAR 0 7
71426: PPUSH
71427: LD_VAR 0 7
71431: PUSH
71432: LD_INT 1
71434: PLUS
71435: PPUSH
71436: LD_VAR 0 9
71440: PUSH
71441: LD_VAR 0 10
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: PPUSH
71450: CALL_OW 1
71454: ST_TO_ADDR
71455: GO 71471
// i := i - 1 ;
71457: LD_ADDR_VAR 0 5
71461: PUSH
71462: LD_VAR 0 5
71466: PUSH
71467: LD_INT 1
71469: MINUS
71470: ST_TO_ADDR
// end ;
71471: GO 71277
71473: POP
71474: POP
// for i in tmp do
71475: LD_ADDR_VAR 0 5
71479: PUSH
71480: LD_VAR 0 7
71484: PUSH
71485: FOR_IN
71486: IFFALSE 71524
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
71488: LD_VAR 0 1
71492: PPUSH
71493: LD_VAR 0 5
71497: PUSH
71498: LD_INT 1
71500: ARRAY
71501: PPUSH
71502: LD_VAR 0 5
71506: PUSH
71507: LD_INT 2
71509: ARRAY
71510: PPUSH
71511: CALL 70470 0 3
71515: NOT
71516: IFFALSE 71522
// exit ;
71518: POP
71519: POP
71520: GO 71526
71522: GO 71485
71524: POP
71525: POP
// end ;
71526: LD_VAR 0 4
71530: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
71531: LD_INT 0
71533: PPUSH
71534: PPUSH
71535: PPUSH
71536: PPUSH
71537: PPUSH
71538: PPUSH
71539: PPUSH
// if not GetClass ( unit ) = class_sniper then
71540: LD_VAR 0 1
71544: PPUSH
71545: CALL_OW 257
71549: PUSH
71550: LD_INT 5
71552: EQUAL
71553: NOT
71554: IFFALSE 71558
// exit ;
71556: GO 71946
// dist := 8 ;
71558: LD_ADDR_VAR 0 5
71562: PUSH
71563: LD_INT 8
71565: ST_TO_ADDR
// viewRange := 12 ;
71566: LD_ADDR_VAR 0 7
71570: PUSH
71571: LD_INT 12
71573: ST_TO_ADDR
// side := GetSide ( unit ) ;
71574: LD_ADDR_VAR 0 6
71578: PUSH
71579: LD_VAR 0 1
71583: PPUSH
71584: CALL_OW 255
71588: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
71589: LD_INT 61
71591: PPUSH
71592: LD_VAR 0 6
71596: PPUSH
71597: CALL_OW 321
71601: PUSH
71602: LD_INT 2
71604: EQUAL
71605: IFFALSE 71615
// viewRange := 16 ;
71607: LD_ADDR_VAR 0 7
71611: PUSH
71612: LD_INT 16
71614: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
71615: LD_VAR 0 1
71619: PPUSH
71620: LD_VAR 0 2
71624: PPUSH
71625: LD_VAR 0 3
71629: PPUSH
71630: CALL_OW 297
71634: PUSH
71635: LD_VAR 0 5
71639: GREATER
71640: IFFALSE 71719
// begin ComMoveXY ( unit , x , y ) ;
71642: LD_VAR 0 1
71646: PPUSH
71647: LD_VAR 0 2
71651: PPUSH
71652: LD_VAR 0 3
71656: PPUSH
71657: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71661: LD_INT 35
71663: PPUSH
71664: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
71668: LD_VAR 0 1
71672: PPUSH
71673: LD_VAR 0 2
71677: PPUSH
71678: LD_VAR 0 3
71682: PPUSH
71683: CALL 45117 0 3
71687: NOT
71688: IFFALSE 71692
// exit ;
71690: GO 71946
// until GetDistUnitXY ( unit , x , y ) < dist ;
71692: LD_VAR 0 1
71696: PPUSH
71697: LD_VAR 0 2
71701: PPUSH
71702: LD_VAR 0 3
71706: PPUSH
71707: CALL_OW 297
71711: PUSH
71712: LD_VAR 0 5
71716: LESS
71717: IFFALSE 71661
// end ; ComTurnXY ( unit , x , y ) ;
71719: LD_VAR 0 1
71723: PPUSH
71724: LD_VAR 0 2
71728: PPUSH
71729: LD_VAR 0 3
71733: PPUSH
71734: CALL_OW 118
// wait ( 5 ) ;
71738: LD_INT 5
71740: PPUSH
71741: CALL_OW 67
// _d := GetDir ( unit ) ;
71745: LD_ADDR_VAR 0 10
71749: PUSH
71750: LD_VAR 0 1
71754: PPUSH
71755: CALL_OW 254
71759: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
71760: LD_ADDR_VAR 0 8
71764: PUSH
71765: LD_VAR 0 1
71769: PPUSH
71770: CALL_OW 250
71774: PPUSH
71775: LD_VAR 0 10
71779: PPUSH
71780: LD_VAR 0 5
71784: PPUSH
71785: CALL_OW 272
71789: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
71790: LD_ADDR_VAR 0 9
71794: PUSH
71795: LD_VAR 0 1
71799: PPUSH
71800: CALL_OW 251
71804: PPUSH
71805: LD_VAR 0 10
71809: PPUSH
71810: LD_VAR 0 5
71814: PPUSH
71815: CALL_OW 273
71819: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71820: LD_VAR 0 8
71824: PPUSH
71825: LD_VAR 0 9
71829: PPUSH
71830: CALL_OW 488
71834: NOT
71835: IFFALSE 71839
// exit ;
71837: GO 71946
// ComAnimCustom ( unit , 1 ) ;
71839: LD_VAR 0 1
71843: PPUSH
71844: LD_INT 1
71846: PPUSH
71847: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
71851: LD_VAR 0 8
71855: PPUSH
71856: LD_VAR 0 9
71860: PPUSH
71861: LD_VAR 0 6
71865: PPUSH
71866: LD_VAR 0 7
71870: PPUSH
71871: CALL_OW 330
// repeat wait ( 1 ) ;
71875: LD_INT 1
71877: PPUSH
71878: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
71882: LD_VAR 0 1
71886: PPUSH
71887: CALL_OW 316
71891: PUSH
71892: LD_VAR 0 1
71896: PPUSH
71897: CALL_OW 314
71901: OR
71902: PUSH
71903: LD_VAR 0 1
71907: PPUSH
71908: CALL_OW 302
71912: NOT
71913: OR
71914: PUSH
71915: LD_VAR 0 1
71919: PPUSH
71920: CALL_OW 301
71924: OR
71925: IFFALSE 71875
// RemoveSeeing ( _x , _y , side ) ;
71927: LD_VAR 0 8
71931: PPUSH
71932: LD_VAR 0 9
71936: PPUSH
71937: LD_VAR 0 6
71941: PPUSH
71942: CALL_OW 331
// end ; end_of_file
71946: LD_VAR 0 4
71950: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71951: LD_VAR 0 1
71955: PPUSH
71956: LD_VAR 0 2
71960: PPUSH
71961: LD_VAR 0 3
71965: PPUSH
71966: LD_VAR 0 4
71970: PPUSH
71971: LD_VAR 0 5
71975: PPUSH
71976: LD_VAR 0 6
71980: PPUSH
71981: CALL 51410 0 6
// end ;
71985: PPOPN 6
71987: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71988: LD_INT 0
71990: PPUSH
// begin if not units then
71991: LD_VAR 0 1
71995: NOT
71996: IFFALSE 72000
// exit ;
71998: GO 72000
// end ;
72000: PPOPN 7
72002: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72003: CALL 51314 0 0
// end ;
72007: PPOPN 1
72009: END
