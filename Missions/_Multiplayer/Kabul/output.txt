// starting begin Game_Start := false ;
   0: LD_ADDR_EXP 9
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// Randomize ;
   8: CALL_OW 10
// Init ( ) ;
  12: CALL 112 0 0
// InitBot ( ) ;
  16: CALL 3614 0 0
// Game_Start := true ;
  20: LD_ADDR_EXP 9
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// end ;
  28: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , bot_side ] ) = 0 do
  29: LD_EXP 9
  33: PUSH
  34: LD_INT 22
  36: PUSH
  37: LD_EXP 8
  41: PUSH
  42: EMPTY
  43: LIST
  44: LIST
  45: PPUSH
  46: CALL_OW 69
  50: PUSH
  51: LD_INT 0
  53: EQUAL
  54: AND
  55: IFFALSE 64
  57: GO 59
  59: DISABLE
// YouWinInMultiplayer ;
  60: CALL_OW 106
  64: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , your_side ] ) = 0 do
  65: LD_EXP 9
  69: PUSH
  70: LD_INT 22
  72: PUSH
  73: LD_OWVAR 2
  77: PUSH
  78: EMPTY
  79: LIST
  80: LIST
  81: PPUSH
  82: CALL_OW 69
  86: PUSH
  87: LD_INT 0
  89: EQUAL
  90: AND
  91: IFFALSE 111
  93: GO 95
  95: DISABLE
// begin Multiplayer_Loose_Message ;
  96: CALL_OW 521
// Wait ( 0 0$03 ) ;
 100: LD_INT 105
 102: PPUSH
 103: CALL_OW 67
// YouLostInMultiplayer ;
 107: CALL_OW 107
// end ;
 111: END
// export Game_Type , Side_Positions , Side_Teams , Side_Nations , Teams ; export Team_Game , Side_Start , Bot_Side , Game_Start ; export number_of_people , skill_level , crates_spawn , respawning_time_min , respawning_time_max , amount_of_apeman ; export definitions , mines_list , apeman_areas , patrols , attackers , to_produce , veh_counter , queue_codes , rng , target , handicap , attackers_tmp ; export function Init ( ) ; var i , j ; begin
 112: LD_INT 0
 114: PPUSH
 115: PPUSH
 116: PPUSH
// definitions := [ ] ;
 117: LD_ADDR_EXP 16
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// if Multiplayer then
 124: LD_OWVAR 4
 128: IFFALSE 306
// begin Game_Type := mp_game_type ;
 130: LD_ADDR_EXP 1
 134: PUSH
 135: LD_OWVAR 6
 139: ST_TO_ADDR
// Your_Side := mp_player_side ;
 140: LD_ADDR_OWVAR 2
 144: PUSH
 145: LD_OWVAR 7
 149: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
 150: LD_ADDR_EXP 2
 154: PUSH
 155: LD_OWVAR 17
 159: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 160: LD_ADDR_EXP 3
 164: PUSH
 165: LD_OWVAR 15
 169: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 170: LD_ADDR_EXP 4
 174: PUSH
 175: LD_OWVAR 16
 179: ST_TO_ADDR
// Teams := [ [ ] ] ;
 180: LD_ADDR_EXP 5
 184: PUSH
 185: EMPTY
 186: PUSH
 187: EMPTY
 188: LIST
 189: ST_TO_ADDR
// for i in mp_teams do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: LD_OWVAR 12
 199: PUSH
 200: FOR_IN
 201: IFFALSE 244
// if i then
 203: LD_VAR 0 2
 207: IFFALSE 242
// Teams := Replace ( Teams , 1 , Teams [ 1 ] union i ) ;
 209: LD_ADDR_EXP 5
 213: PUSH
 214: LD_EXP 5
 218: PPUSH
 219: LD_INT 1
 221: PPUSH
 222: LD_EXP 5
 226: PUSH
 227: LD_INT 1
 229: ARRAY
 230: PUSH
 231: LD_VAR 0 2
 235: UNION
 236: PPUSH
 237: CALL_OW 1
 241: ST_TO_ADDR
 242: GO 200
 244: POP
 245: POP
// for i = 0 to 6 do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 0
 254: DEC
 255: ST_TO_ADDR
 256: LD_INT 6
 258: PUSH
 259: FOR_TO
 260: IFFALSE 302
// definitions := Insert ( definitions , definitions + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 262: LD_ADDR_EXP 16
 266: PUSH
 267: LD_EXP 16
 271: PPUSH
 272: LD_EXP 16
 276: PUSH
 277: LD_INT 1
 279: PLUS
 280: PPUSH
 281: LD_VAR 0 2
 285: PPUSH
 286: CALL_OW 426
 290: PUSH
 291: LD_INT 1
 293: PLUS
 294: PPUSH
 295: CALL_OW 2
 299: ST_TO_ADDR
 300: GO 259
 302: POP
 303: POP
// end else
 304: GO 461
// begin Game_Type := 1 ;
 306: LD_ADDR_EXP 1
 310: PUSH
 311: LD_INT 1
 313: ST_TO_ADDR
// Your_Side := 2 ;
 314: LD_ADDR_OWVAR 2
 318: PUSH
 319: LD_INT 2
 321: ST_TO_ADDR
// Side_Positions := [ 1 , 0 , 0 , 0 , 2 , 0 , 3 , 0 ] ;
 322: LD_ADDR_EXP 2
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: LD_INT 0
 332: PUSH
 333: LD_INT 0
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 2
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: LD_INT 3
 347: PUSH
 348: LD_INT 0
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: ST_TO_ADDR
// Side_Teams := [ 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 ] ;
 361: LD_ADDR_EXP 3
 365: PUSH
 366: LD_INT 1
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 1
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: LD_INT 1
 386: PUSH
 387: LD_INT 0
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: ST_TO_ADDR
// Side_Nations := [ 3 , 0 , 0 , 0 , 3 , 0 , 3 , 0 ] ;
 400: LD_ADDR_EXP 4
 404: PUSH
 405: LD_INT 3
 407: PUSH
 408: LD_INT 0
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 0
 416: PUSH
 417: LD_INT 3
 419: PUSH
 420: LD_INT 0
 422: PUSH
 423: LD_INT 3
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: ST_TO_ADDR
// Teams := [ [ 1 , 5 , 7 ] ] ;
 439: LD_ADDR_EXP 5
 443: PUSH
 444: LD_INT 1
 446: PUSH
 447: LD_INT 5
 449: PUSH
 450: LD_INT 7
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: ST_TO_ADDR
// end ; Side_Start := [ [ 203 , 174 ] , [ 114 , 171 ] , [ 26 , 44 ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
 461: LD_ADDR_EXP 7
 465: PUSH
 466: LD_INT 203
 468: PUSH
 469: LD_INT 174
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 114
 478: PUSH
 479: LD_INT 171
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: LD_INT 26
 488: PUSH
 489: LD_INT 44
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: PUSH
 496: EMPTY
 497: PUSH
 498: EMPTY
 499: PUSH
 500: EMPTY
 501: PUSH
 502: EMPTY
 503: PUSH
 504: EMPTY
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: ST_TO_ADDR
// Bot_Side := 2 ;
 516: LD_ADDR_EXP 8
 520: PUSH
 521: LD_INT 2
 523: ST_TO_ADDR
// for i = 1 to 8 do
 524: LD_ADDR_VAR 0 2
 528: PUSH
 529: DOUBLE
 530: LD_INT 1
 532: DEC
 533: ST_TO_ADDR
 534: LD_INT 8
 536: PUSH
 537: FOR_TO
 538: IFFALSE 632
// begin if Multiplayer_GetPlayerIsSpec ( i ) or Multiplayer_GetPlayerIsComp ( i ) then
 540: LD_VAR 0 2
 544: PPUSH
 545: CALL_OW 530
 549: PUSH
 550: LD_VAR 0 2
 554: PPUSH
 555: CALL_OW 532
 559: OR
 560: IFFALSE 585
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 562: LD_ADDR_EXP 2
 566: PUSH
 567: LD_EXP 2
 571: PPUSH
 572: LD_VAR 0 2
 576: PPUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 1
 584: ST_TO_ADDR
// end ; if Side_Nations [ i ] and Side_Nations <> 3 then
 585: LD_EXP 4
 589: PUSH
 590: LD_VAR 0 2
 594: ARRAY
 595: PUSH
 596: LD_EXP 4
 600: PUSH
 601: LD_INT 3
 603: NONEQUAL
 604: AND
 605: IFFALSE 630
// Side_Nations := Replace ( Side_Nations , i , 3 ) ;
 607: LD_ADDR_EXP 4
 611: PUSH
 612: LD_EXP 4
 616: PPUSH
 617: LD_VAR 0 2
 621: PPUSH
 622: LD_INT 3
 624: PPUSH
 625: CALL_OW 1
 629: ST_TO_ADDR
// end ;
 630: GO 537
 632: POP
 633: POP
// if bot_side = 2 and Side_Positions [ 2 ] then
 634: LD_EXP 8
 638: PUSH
 639: LD_INT 2
 641: EQUAL
 642: PUSH
 643: LD_EXP 2
 647: PUSH
 648: LD_INT 2
 650: ARRAY
 651: AND
 652: IFFALSE 662
// bot_side := 5 ;
 654: LD_ADDR_EXP 8
 658: PUSH
 659: LD_INT 5
 661: ST_TO_ADDR
// if bot_side = 5 and Side_Positions [ 5 ] then
 662: LD_EXP 8
 666: PUSH
 667: LD_INT 5
 669: EQUAL
 670: PUSH
 671: LD_EXP 2
 675: PUSH
 676: LD_INT 5
 678: ARRAY
 679: AND
 680: IFFALSE 690
// bot_side := 8 ;
 682: LD_ADDR_EXP 8
 686: PUSH
 687: LD_INT 8
 689: ST_TO_ADDR
// Team_Game := true ;
 690: LD_ADDR_EXP 6
 694: PUSH
 695: LD_INT 1
 697: ST_TO_ADDR
// for i = 1 to 8 do
 698: LD_ADDR_VAR 0 2
 702: PUSH
 703: DOUBLE
 704: LD_INT 1
 706: DEC
 707: ST_TO_ADDR
 708: LD_INT 8
 710: PUSH
 711: FOR_TO
 712: IFFALSE 748
// if i <> bot_side then
 714: LD_VAR 0 2
 718: PUSH
 719: LD_EXP 8
 723: NONEQUAL
 724: IFFALSE 746
// SetAttitude ( i , bot_side , att_enemy , true ) ;
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_EXP 8
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: LD_INT 1
 741: PPUSH
 742: CALL_OW 80
 746: GO 711
 748: POP
 749: POP
// for i := 2 to Teams [ 1 ] do
 750: LD_ADDR_VAR 0 2
 754: PUSH
 755: DOUBLE
 756: LD_INT 2
 758: DEC
 759: ST_TO_ADDR
 760: LD_EXP 5
 764: PUSH
 765: LD_INT 1
 767: ARRAY
 768: PUSH
 769: FOR_TO
 770: IFFALSE 844
// begin ChangeSideFog ( Teams [ 1 ] [ i ] , Teams [ 1 ] [ 1 ] ) ;
 772: LD_EXP 5
 776: PUSH
 777: LD_INT 1
 779: ARRAY
 780: PUSH
 781: LD_VAR 0 2
 785: ARRAY
 786: PPUSH
 787: LD_EXP 5
 791: PUSH
 792: LD_INT 1
 794: ARRAY
 795: PUSH
 796: LD_INT 1
 798: ARRAY
 799: PPUSH
 800: CALL_OW 343
// SetAttitude ( Teams [ 1 ] [ i ] , Teams [ 1 ] [ 1 ] , att_friend , true ) ;
 804: LD_EXP 5
 808: PUSH
 809: LD_INT 1
 811: ARRAY
 812: PUSH
 813: LD_VAR 0 2
 817: ARRAY
 818: PPUSH
 819: LD_EXP 5
 823: PUSH
 824: LD_INT 1
 826: ARRAY
 827: PUSH
 828: LD_INT 1
 830: ARRAY
 831: PPUSH
 832: LD_INT 1
 834: PPUSH
 835: LD_INT 1
 837: PPUSH
 838: CALL_OW 80
// end ;
 842: GO 769
 844: POP
 845: POP
// if not Multiplayer then
 846: LD_OWVAR 4
 850: NOT
 851: IFFALSE 888
// definitions := [ 1 , 1 , 1 , 1 , 2 , 3 , 3 ] ;
 853: LD_ADDR_EXP 16
 857: PUSH
 858: LD_INT 1
 860: PUSH
 861: LD_INT 1
 863: PUSH
 864: LD_INT 1
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 2
 872: PUSH
 873: LD_INT 3
 875: PUSH
 876: LD_INT 3
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ definitions [ 1 ] ] ;
 888: LD_ADDR_EXP 10
 892: PUSH
 893: LD_INT 9
 895: PUSH
 896: LD_INT 12
 898: PUSH
 899: LD_INT 15
 901: PUSH
 902: LD_INT 24
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_EXP 16
 915: PUSH
 916: LD_INT 1
 918: ARRAY
 919: ARRAY
 920: ST_TO_ADDR
// skill_level := [ 2 , 4 , 6 , 8 ] [ definitions [ 2 ] ] ;
 921: LD_ADDR_EXP 11
 925: PUSH
 926: LD_INT 2
 928: PUSH
 929: LD_INT 4
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: LD_INT 8
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PUSH
 944: LD_EXP 16
 948: PUSH
 949: LD_INT 2
 951: ARRAY
 952: ARRAY
 953: ST_TO_ADDR
// crates_spawn := [ 0 0$20 , 0 0$15 , 0 0$10 , 0 0$07 ] [ definitions [ 3 ] ] ;
 954: LD_ADDR_EXP 12
 958: PUSH
 959: LD_INT 700
 961: PUSH
 962: LD_INT 525
 964: PUSH
 965: LD_INT 350
 967: PUSH
 968: LD_INT 245
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: PUSH
 977: LD_EXP 16
 981: PUSH
 982: LD_INT 3
 984: ARRAY
 985: ARRAY
 986: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ definitions [ 4 ] ] ;
 987: LD_ADDR_EXP 13
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 10500
 997: PUSH
 998: LD_INT 6300
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: PUSH
1006: LD_EXP 16
1010: PUSH
1011: LD_INT 4
1013: ARRAY
1014: ARRAY
1015: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ definitions [ 4 ] ] ;
1016: LD_ADDR_EXP 14
1020: PUSH
1021: LD_INT 0
1023: PUSH
1024: LD_INT 31500
1026: PUSH
1027: LD_INT 10500
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_EXP 16
1039: PUSH
1040: LD_INT 4
1042: ARRAY
1043: ARRAY
1044: ST_TO_ADDR
// amount_of_apeman := [ 0 , 3 , 5 , 7 ] [ definitions [ 5 ] ] ;
1045: LD_ADDR_EXP 15
1049: PUSH
1050: LD_INT 0
1052: PUSH
1053: LD_INT 3
1055: PUSH
1056: LD_INT 5
1058: PUSH
1059: LD_INT 7
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: PUSH
1068: LD_EXP 16
1072: PUSH
1073: LD_INT 5
1075: ARRAY
1076: ARRAY
1077: ST_TO_ADDR
// difficulty := [ 1 , 2 , 3 ] [ definitions [ 6 ] ] ;
1078: LD_ADDR_OWVAR 67
1082: PUSH
1083: LD_INT 1
1085: PUSH
1086: LD_INT 2
1088: PUSH
1089: LD_INT 3
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: LIST
1096: PUSH
1097: LD_EXP 16
1101: PUSH
1102: LD_INT 6
1104: ARRAY
1105: ARRAY
1106: ST_TO_ADDR
// handicap := [ 0 , 1 , 2 ] [ definitions [ 7 ] ] ;
1107: LD_ADDR_EXP 26
1111: PUSH
1112: LD_INT 0
1114: PUSH
1115: LD_INT 1
1117: PUSH
1118: LD_INT 2
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_EXP 16
1130: PUSH
1131: LD_INT 7
1133: ARRAY
1134: ARRAY
1135: ST_TO_ADDR
// queue_codes := [ 11353 , 12244 , 44444 , 12345 , 43413 , 14152 ] ;
1136: LD_ADDR_EXP 23
1140: PUSH
1141: LD_INT 11353
1143: PUSH
1144: LD_INT 12244
1146: PUSH
1147: LD_INT 44444
1149: PUSH
1150: LD_INT 12345
1152: PUSH
1153: LD_INT 43413
1155: PUSH
1156: LD_INT 14152
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: ST_TO_ADDR
// rng := Rand ( 1 , 6 ) ;
1167: LD_ADDR_EXP 24
1171: PUSH
1172: LD_INT 1
1174: PPUSH
1175: LD_INT 6
1177: PPUSH
1178: CALL_OW 12
1182: ST_TO_ADDR
// if bot_side <> 2 then
1183: LD_EXP 8
1187: PUSH
1188: LD_INT 2
1190: NONEQUAL
1191: IFFALSE 1234
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
1193: LD_ADDR_VAR 0 2
1197: PUSH
1198: LD_INT 22
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: PPUSH
1208: CALL_OW 69
1212: PUSH
1213: FOR_IN
1214: IFFALSE 1232
// SetSide ( i , bot_side ) ;
1216: LD_VAR 0 2
1220: PPUSH
1221: LD_EXP 8
1225: PPUSH
1226: CALL_OW 235
1230: GO 1213
1232: POP
1233: POP
// ResetFog ;
1234: CALL_OW 335
// PreparePeople ( ) ;
1238: CALL 2122 0 0
// apeman_areas := [ ape1 , ape2 , ape3 ] ;
1242: LD_ADDR_EXP 18
1246: PUSH
1247: LD_INT 14
1249: PUSH
1250: LD_INT 15
1252: PUSH
1253: LD_INT 16
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: ST_TO_ADDR
// if amount_of_apeman then
1261: LD_EXP 15
1265: IFFALSE 1315
// for j in apeman_areas do
1267: LD_ADDR_VAR 0 3
1271: PUSH
1272: LD_EXP 18
1276: PUSH
1277: FOR_IN
1278: IFFALSE 1313
// for i = 1 to amount_of_apeman do
1280: LD_ADDR_VAR 0 2
1284: PUSH
1285: DOUBLE
1286: LD_INT 1
1288: DEC
1289: ST_TO_ADDR
1290: LD_EXP 15
1294: PUSH
1295: FOR_TO
1296: IFFALSE 1309
// AddApeman ( j ) ;
1298: LD_VAR 0 3
1302: PPUSH
1303: CALL 3071 0 1
1307: GO 1295
1309: POP
1310: POP
1311: GO 1277
1313: POP
1314: POP
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
1315: LD_INT 22
1317: PUSH
1318: LD_OWVAR 2
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PPUSH
1327: CALL_OW 69
1331: PUSH
1332: LD_INT 1
1334: ARRAY
1335: PPUSH
1336: CALL_OW 87
// disable ( 17 ) ;
1340: LD_INT 17
1342: DISABLE_MARKED
// end ;
1343: LD_VAR 0 1
1347: RET
// every 2 2$40 trigger game_start do
1348: LD_EXP 9
1352: IFFALSE 1408
1354: GO 1356
1356: DISABLE
// begin CreateCratesArea ( tick mod 5 + 1 , kabul_crates , true ) ;
1357: LD_OWVAR 1
1361: PUSH
1362: LD_INT 5
1364: MOD
1365: PUSH
1366: LD_INT 1
1368: PLUS
1369: PPUSH
1370: LD_INT 13
1372: PPUSH
1373: LD_INT 1
1375: PPUSH
1376: CALL_OW 55
// Wait ( 0 0$15 ) ;
1380: LD_INT 525
1382: PPUSH
1383: CALL_OW 67
// CreateCratesAnywhere ( tick mod 5 + 1 , true ) ;
1387: LD_OWVAR 1
1391: PUSH
1392: LD_INT 5
1394: MOD
1395: PUSH
1396: LD_INT 1
1398: PLUS
1399: PPUSH
1400: LD_INT 1
1402: PPUSH
1403: CALL_OW 57
// enable ;
1407: ENABLE
// end ;
1408: END
// every 0 0$01 + 0 0$10 trigger game_start do var cr , cr_queue ;
1409: LD_EXP 9
1413: IFFALSE 2119
1415: GO 1417
1417: DISABLE
1418: LD_INT 0
1420: PPUSH
1421: PPUSH
// begin cr := 1 ;
1422: LD_ADDR_VAR 0 1
1426: PUSH
1427: LD_INT 1
1429: ST_TO_ADDR
// cr_queue := [ rand ( 1 , 3 ) , rand ( 2 , 4 ) , rand ( 3 , 5 ) , rand ( 3 , 5 ) , rand ( 2 , 5 ) , rand ( 1 , 5 ) ] ;
1430: LD_ADDR_VAR 0 2
1434: PUSH
1435: LD_INT 1
1437: PPUSH
1438: LD_INT 3
1440: PPUSH
1441: CALL_OW 12
1445: PUSH
1446: LD_INT 2
1448: PPUSH
1449: LD_INT 4
1451: PPUSH
1452: CALL_OW 12
1456: PUSH
1457: LD_INT 3
1459: PPUSH
1460: LD_INT 5
1462: PPUSH
1463: CALL_OW 12
1467: PUSH
1468: LD_INT 3
1470: PPUSH
1471: LD_INT 5
1473: PPUSH
1474: CALL_OW 12
1478: PUSH
1479: LD_INT 2
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL_OW 12
1489: PUSH
1490: LD_INT 1
1492: PPUSH
1493: LD_INT 5
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: ST_TO_ADDR
// while ( true ) do
1509: LD_INT 1
1511: IFFALSE 2119
// begin Wait ( crates_spawn ) ;
1513: LD_EXP 12
1517: PPUSH
1518: CALL_OW 67
// crates_spawn := crates_spawn + 0 0$2 ;
1522: LD_ADDR_EXP 12
1526: PUSH
1527: LD_EXP 12
1531: PUSH
1532: LD_INT 70
1534: PLUS
1535: ST_TO_ADDR
// if crates_spawn > 2 2$00 then
1536: LD_EXP 12
1540: PUSH
1541: LD_INT 4200
1543: GREATER
1544: IFFALSE 1554
// crates_spawn := 0 0$40 ;
1546: LD_ADDR_EXP 12
1550: PUSH
1551: LD_INT 1400
1553: ST_TO_ADDR
// if cr mod 3 = 0 then
1554: LD_VAR 0 1
1558: PUSH
1559: LD_INT 3
1561: MOD
1562: PUSH
1563: LD_INT 0
1565: EQUAL
1566: IFFALSE 1731
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1568: LD_VAR 0 2
1572: PUSH
1573: LD_VAR 0 1
1577: PUSH
1578: LD_VAR 0 2
1582: MOD
1583: PUSH
1584: LD_INT 1
1586: PLUS
1587: ARRAY
1588: PPUSH
1589: LD_INT 17
1591: PPUSH
1592: LD_INT 1
1594: PPUSH
1595: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1599: LD_EXP 12
1603: PUSH
1604: LD_INT 2
1606: DIV
1607: PPUSH
1608: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1612: LD_VAR 0 2
1616: PUSH
1617: LD_VAR 0 1
1621: PUSH
1622: LD_VAR 0 2
1626: MOD
1627: PUSH
1628: LD_INT 1
1630: PLUS
1631: ARRAY
1632: PPUSH
1633: LD_INT 18
1635: PPUSH
1636: LD_INT 1
1638: PPUSH
1639: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1643: LD_EXP 12
1647: PUSH
1648: LD_INT 2
1650: DIV
1651: PPUSH
1652: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1656: LD_VAR 0 2
1660: PUSH
1661: LD_VAR 0 1
1665: PUSH
1666: LD_VAR 0 2
1670: MOD
1671: PUSH
1672: LD_INT 1
1674: PLUS
1675: ARRAY
1676: PPUSH
1677: LD_INT 19
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1687: LD_EXP 12
1691: PUSH
1692: LD_INT 2
1694: DIV
1695: PPUSH
1696: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1700: LD_VAR 0 2
1704: PUSH
1705: LD_VAR 0 1
1709: PUSH
1710: LD_VAR 0 2
1714: MOD
1715: PUSH
1716: LD_INT 1
1718: PLUS
1719: ARRAY
1720: PPUSH
1721: LD_INT 17
1723: PPUSH
1724: LD_INT 1
1726: PPUSH
1727: CALL_OW 55
// end ; if cr mod 3 = 1 then
1731: LD_VAR 0 1
1735: PUSH
1736: LD_INT 3
1738: MOD
1739: PUSH
1740: LD_INT 1
1742: EQUAL
1743: IFFALSE 1908
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1745: LD_VAR 0 2
1749: PUSH
1750: LD_VAR 0 1
1754: PUSH
1755: LD_VAR 0 2
1759: MOD
1760: PUSH
1761: LD_INT 1
1763: PLUS
1764: ARRAY
1765: PPUSH
1766: LD_INT 18
1768: PPUSH
1769: LD_INT 1
1771: PPUSH
1772: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1776: LD_EXP 12
1780: PUSH
1781: LD_INT 2
1783: DIV
1784: PPUSH
1785: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1789: LD_VAR 0 2
1793: PUSH
1794: LD_VAR 0 1
1798: PUSH
1799: LD_VAR 0 2
1803: MOD
1804: PUSH
1805: LD_INT 1
1807: PLUS
1808: ARRAY
1809: PPUSH
1810: LD_INT 17
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1820: LD_EXP 12
1824: PUSH
1825: LD_INT 2
1827: DIV
1828: PPUSH
1829: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1833: LD_VAR 0 2
1837: PUSH
1838: LD_VAR 0 1
1842: PUSH
1843: LD_VAR 0 2
1847: MOD
1848: PUSH
1849: LD_INT 1
1851: PLUS
1852: ARRAY
1853: PPUSH
1854: LD_INT 19
1856: PPUSH
1857: LD_INT 1
1859: PPUSH
1860: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1864: LD_EXP 12
1868: PUSH
1869: LD_INT 2
1871: DIV
1872: PPUSH
1873: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1877: LD_VAR 0 2
1881: PUSH
1882: LD_VAR 0 1
1886: PUSH
1887: LD_VAR 0 2
1891: MOD
1892: PUSH
1893: LD_INT 1
1895: PLUS
1896: ARRAY
1897: PPUSH
1898: LD_INT 18
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 55
// end ; if cr mod 3 = 2 then
1908: LD_VAR 0 1
1912: PUSH
1913: LD_INT 3
1915: MOD
1916: PUSH
1917: LD_INT 2
1919: EQUAL
1920: IFFALSE 2085
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1922: LD_VAR 0 2
1926: PUSH
1927: LD_VAR 0 1
1931: PUSH
1932: LD_VAR 0 2
1936: MOD
1937: PUSH
1938: LD_INT 1
1940: PLUS
1941: ARRAY
1942: PPUSH
1943: LD_INT 19
1945: PPUSH
1946: LD_INT 1
1948: PPUSH
1949: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1953: LD_EXP 12
1957: PUSH
1958: LD_INT 2
1960: DIV
1961: PPUSH
1962: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1966: LD_VAR 0 2
1970: PUSH
1971: LD_VAR 0 1
1975: PUSH
1976: LD_VAR 0 2
1980: MOD
1981: PUSH
1982: LD_INT 1
1984: PLUS
1985: ARRAY
1986: PPUSH
1987: LD_INT 18
1989: PPUSH
1990: LD_INT 1
1992: PPUSH
1993: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1997: LD_EXP 12
2001: PUSH
2002: LD_INT 2
2004: DIV
2005: PPUSH
2006: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
2010: LD_VAR 0 2
2014: PUSH
2015: LD_VAR 0 1
2019: PUSH
2020: LD_VAR 0 2
2024: MOD
2025: PUSH
2026: LD_INT 1
2028: PLUS
2029: ARRAY
2030: PPUSH
2031: LD_INT 17
2033: PPUSH
2034: LD_INT 1
2036: PPUSH
2037: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
2041: LD_EXP 12
2045: PUSH
2046: LD_INT 2
2048: DIV
2049: PPUSH
2050: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
2054: LD_VAR 0 2
2058: PUSH
2059: LD_VAR 0 1
2063: PUSH
2064: LD_VAR 0 2
2068: MOD
2069: PUSH
2070: LD_INT 1
2072: PLUS
2073: ARRAY
2074: PPUSH
2075: LD_INT 19
2077: PPUSH
2078: LD_INT 1
2080: PPUSH
2081: CALL_OW 55
// end ; cr := cr + 1 ;
2085: LD_ADDR_VAR 0 1
2089: PUSH
2090: LD_VAR 0 1
2094: PUSH
2095: LD_INT 1
2097: PLUS
2098: ST_TO_ADDR
// if cr > 150 then
2099: LD_VAR 0 1
2103: PUSH
2104: LD_INT 150
2106: GREATER
2107: IFFALSE 2117
// cr := 43 ;
2109: LD_ADDR_VAR 0 1
2113: PUSH
2114: LD_INT 43
2116: ST_TO_ADDR
// end ;
2117: GO 1509
// end ; end_of_file
2119: PPOPN 2
2121: END
// export function PreparePeople ( ) ; var i , j , un , to_copy , x , y , c , d ; begin
2122: LD_INT 0
2124: PPUSH
2125: PPUSH
2126: PPUSH
2127: PPUSH
2128: PPUSH
2129: PPUSH
2130: PPUSH
2131: PPUSH
2132: PPUSH
// to_copy := [ ] ;
2133: LD_ADDR_VAR 0 5
2137: PUSH
2138: EMPTY
2139: ST_TO_ADDR
// for i = 1 to 8 do
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: DOUBLE
2146: LD_INT 1
2148: DEC
2149: ST_TO_ADDR
2150: LD_INT 8
2152: PUSH
2153: FOR_TO
2154: IFFALSE 3064
// begin if Side_Positions [ i ] then
2156: LD_EXP 2
2160: PUSH
2161: LD_VAR 0 2
2165: ARRAY
2166: IFFALSE 3062
// begin uc_side := i ;
2168: LD_ADDR_OWVAR 20
2172: PUSH
2173: LD_VAR 0 2
2177: ST_TO_ADDR
// uc_nation := Side_Nations [ i ] ;
2178: LD_ADDR_OWVAR 21
2182: PUSH
2183: LD_EXP 4
2187: PUSH
2188: LD_VAR 0 2
2192: ARRAY
2193: ST_TO_ADDR
// x := Side_Start [ Side_Positions [ i ] ] [ 1 ] ;
2194: LD_ADDR_VAR 0 6
2198: PUSH
2199: LD_EXP 7
2203: PUSH
2204: LD_EXP 2
2208: PUSH
2209: LD_VAR 0 2
2213: ARRAY
2214: ARRAY
2215: PUSH
2216: LD_INT 1
2218: ARRAY
2219: ST_TO_ADDR
// y := Side_Start [ Side_Positions [ i ] ] [ 2 ] ;
2220: LD_ADDR_VAR 0 7
2224: PUSH
2225: LD_EXP 7
2229: PUSH
2230: LD_EXP 2
2234: PUSH
2235: LD_VAR 0 2
2239: ARRAY
2240: ARRAY
2241: PUSH
2242: LD_INT 2
2244: ARRAY
2245: ST_TO_ADDR
// hc_importance := 100 ;
2246: LD_ADDR_OWVAR 32
2250: PUSH
2251: LD_INT 100
2253: ST_TO_ADDR
// if Multiplayer then
2254: LD_OWVAR 4
2258: IFFALSE 2316
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2260: LD_ADDR_OWVAR 26
2264: PUSH
2265: LD_OWVAR 19
2269: PUSH
2270: LD_OWVAR 20
2274: ARRAY
2275: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2276: LD_ADDR_OWVAR 33
2280: PUSH
2281: LD_STRING MULTIAVATARS
2283: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2284: LD_ADDR_OWVAR 34
2288: PUSH
2289: LD_OWVAR 20
2293: PPUSH
2294: CALL_OW 525
2298: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2299: LD_ADDR_OWVAR 27
2303: PUSH
2304: LD_OWVAR 20
2308: PPUSH
2309: CALL_OW 526
2313: ST_TO_ADDR
// end else
2314: GO 2348
// begin hc_name :=  ;
2316: LD_ADDR_OWVAR 26
2320: PUSH
2321: LD_STRING 
2323: ST_TO_ADDR
// hc_gallery :=  ;
2324: LD_ADDR_OWVAR 33
2328: PUSH
2329: LD_STRING 
2331: ST_TO_ADDR
// hc_sex := Rand ( 1 , 2 ) ;
2332: LD_ADDR_OWVAR 27
2336: PUSH
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 2
2342: PPUSH
2343: CALL_OW 12
2347: ST_TO_ADDR
// end ; PrepareHuman ( hc_sex , 1 , skill_level ) ;
2348: LD_OWVAR 27
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: LD_EXP 11
2360: PPUSH
2361: CALL_OW 380
// un := CreateHuman ;
2365: LD_ADDR_VAR 0 4
2369: PUSH
2370: CALL_OW 44
2374: ST_TO_ADDR
// if not to_copy then
2375: LD_VAR 0 5
2379: NOT
2380: IFFALSE 2407
// to_copy := Replace ( to_copy , 1 , un ) else
2382: LD_ADDR_VAR 0 5
2386: PUSH
2387: LD_VAR 0 5
2391: PPUSH
2392: LD_INT 1
2394: PPUSH
2395: LD_VAR 0 4
2399: PPUSH
2400: CALL_OW 1
2404: ST_TO_ADDR
2405: GO 2483
// begin CopySkills ( to_copy [ 1 ] , un ) ;
2407: LD_VAR 0 5
2411: PUSH
2412: LD_INT 1
2414: ARRAY
2415: PPUSH
2416: LD_VAR 0 4
2420: PPUSH
2421: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ 1 ] , attr_speed ) ) ;
2425: LD_VAR 0 4
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_VAR 0 5
2437: PUSH
2438: LD_INT 1
2440: ARRAY
2441: PPUSH
2442: LD_INT 2
2444: PPUSH
2445: CALL_OW 260
2449: PPUSH
2450: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ 1 ] , attr_stamina ) ) ;
2454: LD_VAR 0 4
2458: PPUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_VAR 0 5
2466: PUSH
2467: LD_INT 1
2469: ARRAY
2470: PPUSH
2471: LD_INT 1
2473: PPUSH
2474: CALL_OW 260
2478: PPUSH
2479: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2483: LD_VAR 0 4
2487: PPUSH
2488: LD_VAR 0 6
2492: PPUSH
2493: LD_VAR 0 7
2497: PPUSH
2498: LD_INT 10
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 50
// hc_importance := 0 ;
2508: LD_ADDR_OWVAR 32
2512: PUSH
2513: LD_INT 0
2515: ST_TO_ADDR
// hc_name :=  ;
2516: LD_ADDR_OWVAR 26
2520: PUSH
2521: LD_STRING 
2523: ST_TO_ADDR
// hc_gallery :=  ;
2524: LD_ADDR_OWVAR 33
2528: PUSH
2529: LD_STRING 
2531: ST_TO_ADDR
// d := ( number_of_people - 1 ) / 4 ;
2532: LD_ADDR_VAR 0 9
2536: PUSH
2537: LD_EXP 10
2541: PUSH
2542: LD_INT 1
2544: MINUS
2545: PUSH
2546: LD_INT 4
2548: DIVREAL
2549: ST_TO_ADDR
// c := 1 ;
2550: LD_ADDR_VAR 0 8
2554: PUSH
2555: LD_INT 1
2557: ST_TO_ADDR
// for j = 2 to number_of_people do
2558: LD_ADDR_VAR 0 3
2562: PUSH
2563: DOUBLE
2564: LD_INT 2
2566: DEC
2567: ST_TO_ADDR
2568: LD_EXP 10
2572: PUSH
2573: FOR_TO
2574: IFFALSE 2785
// begin PrepareHuman ( false , c , skill_level ) ;
2576: LD_INT 0
2578: PPUSH
2579: LD_VAR 0 8
2583: PPUSH
2584: LD_EXP 11
2588: PPUSH
2589: CALL_OW 380
// if ( j - 1 ) mod d = 0 then
2593: LD_VAR 0 3
2597: PUSH
2598: LD_INT 1
2600: MINUS
2601: PUSH
2602: LD_VAR 0 9
2606: MOD
2607: PUSH
2608: LD_INT 0
2610: EQUAL
2611: IFFALSE 2627
// c := c + 1 ;
2613: LD_ADDR_VAR 0 8
2617: PUSH
2618: LD_VAR 0 8
2622: PUSH
2623: LD_INT 1
2625: PLUS
2626: ST_TO_ADDR
// un := CreateHuman ;
2627: LD_ADDR_VAR 0 4
2631: PUSH
2632: CALL_OW 44
2636: ST_TO_ADDR
// if to_copy < j then
2637: LD_VAR 0 5
2641: PUSH
2642: LD_VAR 0 3
2646: LESS
2647: IFFALSE 2676
// to_copy := Replace ( to_copy , j , un ) else
2649: LD_ADDR_VAR 0 5
2653: PUSH
2654: LD_VAR 0 5
2658: PPUSH
2659: LD_VAR 0 3
2663: PPUSH
2664: LD_VAR 0 4
2668: PPUSH
2669: CALL_OW 1
2673: ST_TO_ADDR
2674: GO 2758
// begin CopySkills ( to_copy [ j ] , un ) ;
2676: LD_VAR 0 5
2680: PUSH
2681: LD_VAR 0 3
2685: ARRAY
2686: PPUSH
2687: LD_VAR 0 4
2691: PPUSH
2692: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ j ] , attr_speed ) ) ;
2696: LD_VAR 0 4
2700: PPUSH
2701: LD_INT 2
2703: PPUSH
2704: LD_VAR 0 5
2708: PUSH
2709: LD_VAR 0 3
2713: ARRAY
2714: PPUSH
2715: LD_INT 2
2717: PPUSH
2718: CALL_OW 260
2722: PPUSH
2723: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ j ] , attr_stamina ) ) ;
2727: LD_VAR 0 4
2731: PPUSH
2732: LD_INT 1
2734: PPUSH
2735: LD_VAR 0 5
2739: PUSH
2740: LD_VAR 0 3
2744: ARRAY
2745: PPUSH
2746: LD_INT 1
2748: PPUSH
2749: CALL_OW 260
2753: PPUSH
2754: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2758: LD_VAR 0 4
2762: PPUSH
2763: LD_VAR 0 6
2767: PPUSH
2768: LD_VAR 0 7
2772: PPUSH
2773: LD_INT 10
2775: PPUSH
2776: LD_INT 0
2778: PPUSH
2779: CALL_OW 50
// end ;
2783: GO 2573
2785: POP
2786: POP
// if handicap then
2787: LD_EXP 26
2791: IFFALSE 3062
// begin if handicap = 1 then
2793: LD_EXP 26
2797: PUSH
2798: LD_INT 1
2800: EQUAL
2801: IFFALSE 2880
// for j = 1 to 2 do
2803: LD_ADDR_VAR 0 3
2807: PUSH
2808: DOUBLE
2809: LD_INT 1
2811: DEC
2812: ST_TO_ADDR
2813: LD_INT 2
2815: PUSH
2816: FOR_TO
2817: IFFALSE 2878
// begin vc_chassis := ru_medium_tracked ;
2819: LD_ADDR_OWVAR 37
2823: PUSH
2824: LD_INT 22
2826: ST_TO_ADDR
// vc_engine := engine_combustion ;
2827: LD_ADDR_OWVAR 39
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// vc_control := control_manual ;
2835: LD_ADDR_OWVAR 38
2839: PUSH
2840: LD_INT 1
2842: ST_TO_ADDR
// vc_weapon := ru_gun ;
2843: LD_ADDR_OWVAR 40
2847: PUSH
2848: LD_INT 44
2850: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2851: CALL_OW 45
2855: PPUSH
2856: LD_VAR 0 6
2860: PPUSH
2861: LD_VAR 0 7
2865: PPUSH
2866: LD_INT 13
2868: PPUSH
2869: LD_INT 0
2871: PPUSH
2872: CALL_OW 50
// end ;
2876: GO 2816
2878: POP
2879: POP
// if handicap = 2 then
2880: LD_EXP 26
2884: PUSH
2885: LD_INT 2
2887: EQUAL
2888: IFFALSE 3062
// begin for j = 1 to 2 do
2890: LD_ADDR_VAR 0 3
2894: PUSH
2895: DOUBLE
2896: LD_INT 1
2898: DEC
2899: ST_TO_ADDR
2900: LD_INT 2
2902: PUSH
2903: FOR_TO
2904: IFFALSE 2978
// begin vc_chassis := ru_heavy_tracked ;
2906: LD_ADDR_OWVAR 37
2910: PUSH
2911: LD_INT 24
2913: ST_TO_ADDR
// vc_engine := engine_combustion ;
2914: LD_ADDR_OWVAR 39
2918: PUSH
2919: LD_INT 1
2921: ST_TO_ADDR
// vc_control := control_manual ;
2922: LD_ADDR_OWVAR 38
2926: PUSH
2927: LD_INT 1
2929: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_heavy_gun ] [ j ] ;
2930: LD_ADDR_OWVAR 40
2934: PUSH
2935: LD_INT 43
2937: PUSH
2938: LD_INT 46
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: PUSH
2945: LD_VAR 0 3
2949: ARRAY
2950: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2951: CALL_OW 45
2955: PPUSH
2956: LD_VAR 0 6
2960: PPUSH
2961: LD_VAR 0 7
2965: PPUSH
2966: LD_INT 13
2968: PPUSH
2969: LD_INT 0
2971: PPUSH
2972: CALL_OW 50
// end ;
2976: GO 2903
2978: POP
2979: POP
// vc_chassis := ru_medium_tracked ;
2980: LD_ADDR_OWVAR 37
2984: PUSH
2985: LD_INT 22
2987: ST_TO_ADDR
// vc_engine := engine_siberite ;
2988: LD_ADDR_OWVAR 39
2992: PUSH
2993: LD_INT 3
2995: ST_TO_ADDR
// vc_control := control_computer ;
2996: LD_ADDR_OWVAR 38
3000: PUSH
3001: LD_INT 3
3003: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
3004: LD_ADDR_OWVAR 40
3008: PUSH
3009: LD_INT 51
3011: ST_TO_ADDR
// un := CreateVehicle ;
3012: LD_ADDR_VAR 0 4
3016: PUSH
3017: CALL_OW 45
3021: ST_TO_ADDR
// PlaceUnitXYR ( un , x , y , 13 , false ) ;
3022: LD_VAR 0 4
3026: PPUSH
3027: LD_VAR 0 6
3031: PPUSH
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 13
3039: PPUSH
3040: LD_INT 0
3042: PPUSH
3043: CALL_OW 50
// SetCargo ( un , mat_cans , 100 ) ;
3047: LD_VAR 0 4
3051: PPUSH
3052: LD_INT 1
3054: PPUSH
3055: LD_INT 100
3057: PPUSH
3058: CALL_OW 290
// end ; end ; end ; end ;
3062: GO 2153
3064: POP
3065: POP
// end ;
3066: LD_VAR 0 1
3070: RET
// export function AddApeman ( area ) ; begin
3071: LD_INT 0
3073: PPUSH
// uc_nation := 0 ;
3074: LD_ADDR_OWVAR 21
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// uc_side := 0 ;
3082: LD_ADDR_OWVAR 20
3086: PUSH
3087: LD_INT 0
3089: ST_TO_ADDR
// hc_agressivity := rand ( - 10 , 15 ) ;
3090: LD_ADDR_OWVAR 35
3094: PUSH
3095: LD_INT 10
3097: NEG
3098: PPUSH
3099: LD_INT 15
3101: PPUSH
3102: CALL_OW 12
3106: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
3107: LD_INT 0
3109: PPUSH
3110: LD_INT 12
3112: PPUSH
3113: LD_INT 0
3115: PPUSH
3116: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
3120: LD_ADDR_OWVAR 29
3124: PUSH
3125: LD_INT 10
3127: PUSH
3128: LD_INT 12
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , area , false ) ;
3135: CALL_OW 44
3139: PPUSH
3140: LD_VAR 0 1
3144: PPUSH
3145: LD_INT 0
3147: PPUSH
3148: CALL_OW 49
// end ;
3152: LD_VAR 0 2
3156: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
3157: LD_INT 0
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
// tmp := AreaToList ( area , 0 ) ;
3163: LD_ADDR_VAR 0 5
3167: PUSH
3168: LD_VAR 0 1
3172: PPUSH
3173: LD_INT 0
3175: PPUSH
3176: CALL_OW 517
3180: ST_TO_ADDR
// if not tmp then
3181: LD_VAR 0 5
3185: NOT
3186: IFFALSE 3190
// exit ;
3188: GO 3428
// for i := 1 to n do
3190: LD_ADDR_VAR 0 4
3194: PUSH
3195: DOUBLE
3196: LD_INT 1
3198: DEC
3199: ST_TO_ADDR
3200: LD_VAR 0 2
3204: PUSH
3205: FOR_TO
3206: IFFALSE 3426
// begin r := rand ( 1 , tmp [ 1 ] ) ;
3208: LD_ADDR_VAR 0 6
3212: PUSH
3213: LD_INT 1
3215: PPUSH
3216: LD_VAR 0 5
3220: PUSH
3221: LD_INT 1
3223: ARRAY
3224: PPUSH
3225: CALL_OW 12
3229: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , bot_side , 0 ) ;
3230: LD_VAR 0 5
3234: PUSH
3235: LD_INT 1
3237: ARRAY
3238: PUSH
3239: LD_VAR 0 6
3243: ARRAY
3244: PPUSH
3245: LD_VAR 0 5
3249: PUSH
3250: LD_INT 2
3252: ARRAY
3253: PUSH
3254: LD_VAR 0 6
3258: ARRAY
3259: PPUSH
3260: LD_EXP 8
3264: PPUSH
3265: LD_INT 0
3267: PPUSH
3268: CALL_OW 454
// mines_list := Insert ( mines_list , mines_list + 1 , tmp [ 1 ] [ r ] ) ;
3272: LD_ADDR_EXP 17
3276: PUSH
3277: LD_EXP 17
3281: PPUSH
3282: LD_EXP 17
3286: PUSH
3287: LD_INT 1
3289: PLUS
3290: PPUSH
3291: LD_VAR 0 5
3295: PUSH
3296: LD_INT 1
3298: ARRAY
3299: PUSH
3300: LD_VAR 0 6
3304: ARRAY
3305: PPUSH
3306: CALL_OW 2
3310: ST_TO_ADDR
// mines_list := Insert ( mines_list , mines_list + 1 , tmp [ 2 ] [ r ] ) ;
3311: LD_ADDR_EXP 17
3315: PUSH
3316: LD_EXP 17
3320: PPUSH
3321: LD_EXP 17
3325: PUSH
3326: LD_INT 1
3328: PLUS
3329: PPUSH
3330: LD_VAR 0 5
3334: PUSH
3335: LD_INT 2
3337: ARRAY
3338: PUSH
3339: LD_VAR 0 6
3343: ARRAY
3344: PPUSH
3345: CALL_OW 2
3349: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
3350: LD_ADDR_VAR 0 5
3354: PUSH
3355: LD_VAR 0 5
3359: PPUSH
3360: LD_INT 1
3362: PPUSH
3363: LD_VAR 0 5
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PPUSH
3372: LD_VAR 0 6
3376: PPUSH
3377: CALL_OW 3
3381: PPUSH
3382: CALL_OW 1
3386: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
3387: LD_ADDR_VAR 0 5
3391: PUSH
3392: LD_VAR 0 5
3396: PPUSH
3397: LD_INT 2
3399: PPUSH
3400: LD_VAR 0 5
3404: PUSH
3405: LD_INT 2
3407: ARRAY
3408: PPUSH
3409: LD_VAR 0 6
3413: PPUSH
3414: CALL_OW 3
3418: PPUSH
3419: CALL_OW 1
3423: ST_TO_ADDR
// end ;
3424: GO 3205
3426: POP
3427: POP
// end ;
3428: LD_VAR 0 3
3432: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
3433: LD_INT 0
3435: PPUSH
3436: PPUSH
3437: PPUSH
// if not GetControl ( veh ) = control_manual then
3438: LD_VAR 0 1
3442: PPUSH
3443: CALL_OW 263
3447: PUSH
3448: LD_INT 1
3450: EQUAL
3451: NOT
3452: IFFALSE 3464
// result := false else
3454: LD_ADDR_VAR 0 2
3458: PUSH
3459: LD_INT 0
3461: ST_TO_ADDR
3462: GO 3609
// if veh in FilterAllUnits ( [ f_empty ] ) then
3464: LD_VAR 0 1
3468: PUSH
3469: LD_INT 58
3471: PUSH
3472: EMPTY
3473: LIST
3474: PPUSH
3475: CALL_OW 69
3479: IN
3480: IFFALSE 3492
// result := false else
3482: LD_ADDR_VAR 0 2
3486: PUSH
3487: LD_INT 0
3489: ST_TO_ADDR
3490: GO 3609
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
3492: LD_ADDR_VAR 0 4
3496: PUSH
3497: LD_INT 22
3499: PUSH
3500: LD_VAR 0 1
3504: PPUSH
3505: CALL_OW 255
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PUSH
3514: LD_INT 55
3516: PUSH
3517: EMPTY
3518: LIST
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PPUSH
3524: CALL_OW 69
3528: ST_TO_ADDR
// if not filter then
3529: LD_VAR 0 4
3533: NOT
3534: IFFALSE 3546
// result := false else
3536: LD_ADDR_VAR 0 2
3540: PUSH
3541: LD_INT 0
3543: ST_TO_ADDR
3544: GO 3609
// for i = 1 to filter do
3546: LD_ADDR_VAR 0 3
3550: PUSH
3551: DOUBLE
3552: LD_INT 1
3554: DEC
3555: ST_TO_ADDR
3556: LD_VAR 0 4
3560: PUSH
3561: FOR_TO
3562: IFFALSE 3607
// if IsDriver ( filter [ i ] ) = veh then
3564: LD_VAR 0 4
3568: PUSH
3569: LD_VAR 0 3
3573: ARRAY
3574: PPUSH
3575: CALL 43935 0 1
3579: PUSH
3580: LD_VAR 0 1
3584: EQUAL
3585: IFFALSE 3605
// begin result := filter [ i ] ;
3587: LD_ADDR_VAR 0 2
3591: PUSH
3592: LD_VAR 0 4
3596: PUSH
3597: LD_VAR 0 3
3601: ARRAY
3602: ST_TO_ADDR
// break ;
3603: GO 3607
// end ;
3605: GO 3561
3607: POP
3608: POP
// end ; end ; end_of_file
3609: LD_VAR 0 2
3613: RET
// export function InitBot ; var i , ct , hex , side , un , veh , weapons , skill ; begin
3614: LD_INT 0
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
3620: PPUSH
3621: PPUSH
3622: PPUSH
3623: PPUSH
3624: PPUSH
// side := Bot_Side ;
3625: LD_ADDR_VAR 0 5
3629: PUSH
3630: LD_EXP 8
3634: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
3635: LD_ADDR_VAR 0 9
3639: PUSH
3640: LD_INT 4
3642: PUSH
3643: LD_INT 6
3645: PUSH
3646: LD_INT 8
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: LIST
3653: PUSH
3654: LD_OWVAR 67
3658: ARRAY
3659: ST_TO_ADDR
// weapons := [ ar_gun , ar_rocket_launcher , ar_gatling_gun , ar_flame_thrower ] ;
3660: LD_ADDR_VAR 0 8
3664: PUSH
3665: LD_INT 27
3667: PUSH
3668: LD_INT 28
3670: PUSH
3671: LD_INT 25
3673: PUSH
3674: LD_INT 26
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: ST_TO_ADDR
// veh_counter := [ 4 , 5 , 6 ] [ Difficulty ] ;
3683: LD_ADDR_EXP 22
3687: PUSH
3688: LD_INT 4
3690: PUSH
3691: LD_INT 5
3693: PUSH
3694: LD_INT 6
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: LIST
3701: PUSH
3702: LD_OWVAR 67
3706: ARRAY
3707: ST_TO_ADDR
// ct := [ ] ;
3708: LD_ADDR_VAR 0 3
3712: PUSH
3713: EMPTY
3714: ST_TO_ADDR
// patrols := [ ] ;
3715: LD_ADDR_EXP 19
3719: PUSH
3720: EMPTY
3721: ST_TO_ADDR
// attackers := [ ] ;
3722: LD_ADDR_EXP 20
3726: PUSH
3727: EMPTY
3728: ST_TO_ADDR
// attackers_tmp := [ ] ;
3729: LD_ADDR_EXP 27
3733: PUSH
3734: EMPTY
3735: ST_TO_ADDR
// to_produce := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , ] ;
3736: LD_ADDR_EXP 21
3740: PUSH
3741: LD_INT 14
3743: PUSH
3744: LD_INT 1
3746: PUSH
3747: LD_INT 2
3749: PUSH
3750: LD_INT 27
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: PUSH
3759: LD_INT 14
3761: PUSH
3762: LD_INT 1
3764: PUSH
3765: LD_INT 2
3767: PUSH
3768: LD_INT 25
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: PUSH
3777: LD_INT 14
3779: PUSH
3780: LD_INT 1
3782: PUSH
3783: LD_INT 2
3785: PUSH
3786: LD_INT 28
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 14
3797: PUSH
3798: LD_INT 1
3800: PUSH
3801: LD_INT 2
3803: PUSH
3804: LD_INT 29
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: ST_TO_ADDR
// if Difficulty > 2 then
3819: LD_OWVAR 67
3823: PUSH
3824: LD_INT 2
3826: GREATER
3827: IFFALSE 3895
// begin to_produce := Join ( to_produce , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ) ;
3829: LD_ADDR_EXP 21
3833: PUSH
3834: LD_EXP 21
3838: PPUSH
3839: LD_INT 14
3841: PUSH
3842: LD_INT 1
3844: PUSH
3845: LD_INT 2
3847: PUSH
3848: LD_INT 27
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL 46331 0 2
3861: ST_TO_ADDR
// to_produce := Join ( to_produce , [ ar_medium_trike , engine_siberite , control_remote , ar_selfpropelled_bomb ] ) ;
3862: LD_ADDR_EXP 21
3866: PUSH
3867: LD_EXP 21
3871: PPUSH
3872: LD_INT 13
3874: PUSH
3875: LD_INT 3
3877: PUSH
3878: LD_INT 2
3880: PUSH
3881: LD_INT 29
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: PPUSH
3890: CALL 46331 0 2
3894: ST_TO_ADDR
// end ; SetBName ( ar_dep , newkabul ) ;
3895: LD_INT 2
3897: PPUSH
3898: LD_STRING newkabul
3900: PPUSH
3901: CALL_OW 500
// SetResourceType ( GetBase ( ar_dep ) , mat_cans , 90000 ) ;
3905: LD_INT 2
3907: PPUSH
3908: CALL_OW 274
3912: PPUSH
3913: LD_INT 1
3915: PPUSH
3916: LD_INT 90000
3918: PPUSH
3919: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_oil , 9000 ) ;
3923: LD_INT 2
3925: PPUSH
3926: CALL_OW 274
3930: PPUSH
3931: LD_INT 2
3933: PPUSH
3934: LD_INT 9000
3936: PPUSH
3937: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_siberit , 3000 ) ;
3941: LD_INT 2
3943: PPUSH
3944: CALL_OW 274
3948: PPUSH
3949: LD_INT 3
3951: PPUSH
3952: LD_INT 3000
3954: PPUSH
3955: CALL_OW 277
// if Difficulty > 1 then
3959: LD_OWVAR 67
3963: PUSH
3964: LD_INT 1
3966: GREATER
3967: IFFALSE 3984
// SetTech ( 5 , side , state_researched ) ;
3969: LD_INT 5
3971: PPUSH
3972: LD_VAR 0 5
3976: PPUSH
3977: LD_INT 2
3979: PPUSH
3980: CALL_OW 322
// SetTech ( tech_mortar , side , state_researched ) ;
3984: LD_INT 41
3986: PPUSH
3987: LD_VAR 0 5
3991: PPUSH
3992: LD_INT 2
3994: PPUSH
3995: CALL_OW 322
// SetTech ( tech_weap1 , side , state_researched ) ;
3999: LD_INT 51
4001: PPUSH
4002: LD_VAR 0 5
4006: PPUSH
4007: LD_INT 2
4009: PPUSH
4010: CALL_OW 322
// SetTech ( tech_weap2 , side , state_researched ) ;
4014: LD_INT 52
4016: PPUSH
4017: LD_VAR 0 5
4021: PPUSH
4022: LD_INT 2
4024: PPUSH
4025: CALL_OW 322
// SetTech ( tech_weap3 , side , state_researched ) ;
4029: LD_INT 53
4031: PPUSH
4032: LD_VAR 0 5
4036: PPUSH
4037: LD_INT 2
4039: PPUSH
4040: CALL_OW 322
// SetTech ( tech_opto1 , side , state_researched ) ;
4044: LD_INT 60
4046: PPUSH
4047: LD_VAR 0 5
4051: PPUSH
4052: LD_INT 2
4054: PPUSH
4055: CALL_OW 322
// SetTech ( tech_opto2 , side , state_researched ) ;
4059: LD_INT 61
4061: PPUSH
4062: LD_VAR 0 5
4066: PPUSH
4067: LD_INT 2
4069: PPUSH
4070: CALL_OW 322
// SetTech ( tech_opto3 , side , state_researched ) ;
4074: LD_INT 62
4076: PPUSH
4077: LD_VAR 0 5
4081: PPUSH
4082: LD_INT 2
4084: PPUSH
4085: CALL_OW 322
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
4089: LD_ADDR_VAR 0 2
4093: PUSH
4094: LD_INT 22
4096: PUSH
4097: LD_VAR 0 5
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 21
4108: PUSH
4109: LD_INT 3
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: PPUSH
4120: CALL_OW 69
4124: PUSH
4125: FOR_IN
4126: IFFALSE 4159
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
4128: LD_VAR 0 2
4132: PPUSH
4133: LD_INT 6
4135: PUSH
4136: LD_INT 8
4138: PUSH
4139: LD_INT 10
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: LIST
4146: PUSH
4147: LD_OWVAR 67
4151: ARRAY
4152: PPUSH
4153: CALL_OW 241
4157: GO 4125
4159: POP
4160: POP
// if Difficulty > 1 then
4161: LD_OWVAR 67
4165: PUSH
4166: LD_INT 1
4168: GREATER
4169: IFFALSE 4178
// RemoveEnvironmentArea ( forest_road ) ;
4171: LD_INT 11
4173: PPUSH
4174: CALL_OW 355
// PlaceMines ( mine_west_zone , [ 10 , 12 , 18 ] [ Difficulty ] ) ;
4178: LD_INT 4
4180: PPUSH
4181: LD_INT 10
4183: PUSH
4184: LD_INT 12
4186: PUSH
4187: LD_INT 18
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: LIST
4194: PUSH
4195: LD_OWVAR 67
4199: ARRAY
4200: PPUSH
4201: CALL 3157 0 2
// PlaceMines ( mine_east_zone , [ 7 , 12 , 15 ] [ Difficulty ] ) ;
4205: LD_INT 5
4207: PPUSH
4208: LD_INT 7
4210: PUSH
4211: LD_INT 12
4213: PUSH
4214: LD_INT 15
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: LIST
4221: PUSH
4222: LD_OWVAR 67
4226: ARRAY
4227: PPUSH
4228: CALL 3157 0 2
// PlaceMines ( mine_south_zone , [ 5 , 8 , 12 ] [ Difficulty ] ) ;
4232: LD_INT 7
4234: PPUSH
4235: LD_INT 5
4237: PUSH
4238: LD_INT 8
4240: PUSH
4241: LD_INT 12
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: PUSH
4249: LD_OWVAR 67
4253: ARRAY
4254: PPUSH
4255: CALL 3157 0 2
// PlaceMines ( mine_high_zone , [ 0 , 3 , 5 ] [ Difficulty ] ) ;
4259: LD_INT 6
4261: PPUSH
4262: LD_INT 0
4264: PUSH
4265: LD_INT 3
4267: PUSH
4268: LD_INT 5
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: LIST
4275: PUSH
4276: LD_OWVAR 67
4280: ARRAY
4281: PPUSH
4282: CALL 3157 0 2
// PlaceMines ( mine_road_zone , [ 2 , 5 , 8 ] [ Difficulty ] ) ;
4286: LD_INT 8
4288: PPUSH
4289: LD_INT 2
4291: PUSH
4292: LD_INT 5
4294: PUSH
4295: LD_INT 8
4297: PUSH
4298: EMPTY
4299: LIST
4300: LIST
4301: LIST
4302: PUSH
4303: LD_OWVAR 67
4307: ARRAY
4308: PPUSH
4309: CALL 3157 0 2
// PlaceMines ( mine_southpass_zone , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
4313: LD_INT 9
4315: PPUSH
4316: LD_INT 0
4318: PUSH
4319: LD_INT 2
4321: PUSH
4322: LD_INT 4
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: LIST
4329: PUSH
4330: LD_OWVAR 67
4334: ARRAY
4335: PPUSH
4336: CALL 3157 0 2
// PlaceMines ( mine_oileast_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4340: LD_INT 10
4342: PPUSH
4343: LD_INT 0
4345: PUSH
4346: LD_INT 1
4348: PUSH
4349: LD_INT 1
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: PUSH
4357: LD_OWVAR 67
4361: ARRAY
4362: PPUSH
4363: CALL 3157 0 2
// PlaceMines ( mine_oilwest_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4367: LD_INT 12
4369: PPUSH
4370: LD_INT 0
4372: PUSH
4373: LD_INT 1
4375: PUSH
4376: LD_INT 1
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: LIST
4383: PUSH
4384: LD_OWVAR 67
4388: ARRAY
4389: PPUSH
4390: CALL 3157 0 2
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4394: LD_ADDR_VAR 0 2
4398: PUSH
4399: LD_INT 22
4401: PUSH
4402: LD_VAR 0 5
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: PUSH
4411: LD_INT 30
4413: PUSH
4414: LD_INT 32
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PPUSH
4425: CALL_OW 69
4429: PUSH
4430: FOR_IN
4431: IFFALSE 4463
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
4433: LD_VAR 0 2
4437: PPUSH
4438: LD_VAR 0 8
4442: PUSH
4443: LD_INT 1
4445: PPUSH
4446: LD_VAR 0 8
4450: PPUSH
4451: CALL_OW 12
4455: ARRAY
4456: PPUSH
4457: CALL_OW 431
4461: GO 4430
4463: POP
4464: POP
// uc_side := side ;
4465: LD_ADDR_OWVAR 20
4469: PUSH
4470: LD_VAR 0 5
4474: ST_TO_ADDR
// uc_nation := 2 ;
4475: LD_ADDR_OWVAR 21
4479: PUSH
4480: LD_INT 2
4482: ST_TO_ADDR
// for i = 1 to 1 + Difficulty do
4483: LD_ADDR_VAR 0 2
4487: PUSH
4488: DOUBLE
4489: LD_INT 1
4491: DEC
4492: ST_TO_ADDR
4493: LD_INT 1
4495: PUSH
4496: LD_OWVAR 67
4500: PLUS
4501: PUSH
4502: FOR_TO
4503: IFFALSE 4593
// begin vc_chassis := ar_half_tracked ;
4505: LD_ADDR_OWVAR 37
4509: PUSH
4510: LD_INT 14
4512: ST_TO_ADDR
// vc_engine := engine_combustion ;
4513: LD_ADDR_OWVAR 39
4517: PUSH
4518: LD_INT 1
4520: ST_TO_ADDR
// vc_control := control_manual ;
4521: LD_ADDR_OWVAR 38
4525: PUSH
4526: LD_INT 1
4528: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4529: LD_ADDR_OWVAR 40
4533: PUSH
4534: LD_INT 31
4536: ST_TO_ADDR
// veh := CreateVehicle ;
4537: LD_ADDR_VAR 0 7
4541: PUSH
4542: CALL_OW 45
4546: ST_TO_ADDR
// PlaceUnitArea ( veh , ct_area , false ) ;
4547: LD_VAR 0 7
4551: PPUSH
4552: LD_INT 3
4554: PPUSH
4555: LD_INT 0
4557: PPUSH
4558: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
4562: LD_INT 0
4564: PPUSH
4565: LD_INT 3
4567: PPUSH
4568: LD_VAR 0 9
4572: PPUSH
4573: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4577: CALL_OW 44
4581: PPUSH
4582: LD_VAR 0 7
4586: PPUSH
4587: CALL_OW 52
// end ;
4591: GO 4502
4593: POP
4594: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4595: LD_ADDR_VAR 0 2
4599: PUSH
4600: LD_INT 22
4602: PUSH
4603: LD_VAR 0 5
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: LD_INT 30
4614: PUSH
4615: LD_INT 32
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PPUSH
4626: CALL_OW 69
4630: PUSH
4631: FOR_IN
4632: IFFALSE 4665
// begin PrepareHuman ( false , 1 , skill ) ;
4634: LD_INT 0
4636: PPUSH
4637: LD_INT 1
4639: PPUSH
4640: LD_VAR 0 9
4644: PPUSH
4645: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4649: CALL_OW 44
4653: PPUSH
4654: LD_VAR 0 2
4658: PPUSH
4659: CALL_OW 52
// end ;
4663: GO 4631
4665: POP
4666: POP
// for i = 1 to 4 do
4667: LD_ADDR_VAR 0 2
4671: PUSH
4672: DOUBLE
4673: LD_INT 1
4675: DEC
4676: ST_TO_ADDR
4677: LD_INT 4
4679: PUSH
4680: FOR_TO
4681: IFFALSE 4712
// begin PrepareHuman ( false , 2 , skill ) ;
4683: LD_INT 0
4685: PPUSH
4686: LD_INT 2
4688: PPUSH
4689: LD_VAR 0 9
4693: PPUSH
4694: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_dep ) ;
4698: CALL_OW 44
4702: PPUSH
4703: LD_INT 2
4705: PPUSH
4706: CALL_OW 52
// end ;
4710: GO 4680
4712: POP
4713: POP
// for i = 1 to 6 do
4714: LD_ADDR_VAR 0 2
4718: PUSH
4719: DOUBLE
4720: LD_INT 1
4722: DEC
4723: ST_TO_ADDR
4724: LD_INT 6
4726: PUSH
4727: FOR_TO
4728: IFFALSE 4759
// begin PrepareHuman ( false , 3 , skill ) ;
4730: LD_INT 0
4732: PPUSH
4733: LD_INT 3
4735: PPUSH
4736: LD_VAR 0 9
4740: PPUSH
4741: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_fac ) ;
4745: CALL_OW 44
4749: PPUSH
4750: LD_INT 12
4752: PPUSH
4753: CALL_OW 52
// end ;
4757: GO 4727
4759: POP
4760: POP
// for i = 1 to 4 do
4761: LD_ADDR_VAR 0 2
4765: PUSH
4766: DOUBLE
4767: LD_INT 1
4769: DEC
4770: ST_TO_ADDR
4771: LD_INT 4
4773: PUSH
4774: FOR_TO
4775: IFFALSE 4832
// begin PrepareHuman ( false , 4 , skill ) ;
4777: LD_INT 0
4779: PPUSH
4780: LD_INT 4
4782: PPUSH
4783: LD_VAR 0 9
4787: PPUSH
4788: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ f_btype , b_lab_full ] ) [ ( i mod 2 ) + 1 ] ) ;
4792: CALL_OW 44
4796: PPUSH
4797: LD_INT 30
4799: PUSH
4800: LD_INT 8
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: PPUSH
4807: CALL_OW 69
4811: PUSH
4812: LD_VAR 0 2
4816: PUSH
4817: LD_INT 2
4819: MOD
4820: PUSH
4821: LD_INT 1
4823: PLUS
4824: ARRAY
4825: PPUSH
4826: CALL_OW 52
// end ;
4830: GO 4774
4832: POP
4833: POP
// PrepareHuman ( false , class_mortar , skill ) ;
4834: LD_INT 0
4836: PPUSH
4837: LD_INT 8
4839: PPUSH
4840: LD_VAR 0 9
4844: PPUSH
4845: CALL_OW 380
// un := CreateHuman ;
4849: LD_ADDR_VAR 0 6
4853: PUSH
4854: CALL_OW 44
4858: ST_TO_ADDR
// SetDir ( un , 2 ) ;
4859: LD_VAR 0 6
4863: PPUSH
4864: LD_INT 2
4866: PPUSH
4867: CALL_OW 233
// PlaceHumanInUnit ( un , bun1 ) ;
4871: LD_VAR 0 6
4875: PPUSH
4876: LD_INT 31
4878: PPUSH
4879: CALL_OW 52
// for i = 1 to 4 do
4883: LD_ADDR_VAR 0 2
4887: PUSH
4888: DOUBLE
4889: LD_INT 1
4891: DEC
4892: ST_TO_ADDR
4893: LD_INT 4
4895: PUSH
4896: FOR_TO
4897: IFFALSE 4953
// begin uc_nation := 0 ;
4899: LD_ADDR_OWVAR 21
4903: PUSH
4904: LD_INT 0
4906: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 1 ) ;
4907: LD_INT 0
4909: PPUSH
4910: LD_INT 16
4912: PPUSH
4913: LD_INT 1
4915: PPUSH
4916: CALL_OW 380
// un := CreateHuman ;
4920: LD_ADDR_VAR 0 6
4924: PUSH
4925: CALL_OW 44
4929: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 46 , 8 , false ) ;
4930: LD_VAR 0 6
4934: PPUSH
4935: LD_INT 106
4937: PPUSH
4938: LD_INT 46
4940: PPUSH
4941: LD_INT 8
4943: PPUSH
4944: LD_INT 0
4946: PPUSH
4947: CALL_OW 50
// end ;
4951: GO 4896
4953: POP
4954: POP
// for i = 1 to 2 * Difficulty do
4955: LD_ADDR_VAR 0 2
4959: PUSH
4960: DOUBLE
4961: LD_INT 1
4963: DEC
4964: ST_TO_ADDR
4965: LD_INT 2
4967: PUSH
4968: LD_OWVAR 67
4972: MUL
4973: PUSH
4974: FOR_TO
4975: IFFALSE 5015
// begin uc_nation := 0 ;
4977: LD_ADDR_OWVAR 21
4981: PUSH
4982: LD_INT 0
4984: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_soldier , 3 ) ;
4985: LD_INT 0
4987: PPUSH
4988: LD_INT 15
4990: PPUSH
4991: LD_INT 3
4993: PPUSH
4994: CALL_OW 380
// PlaceUnitArea ( CreateHuman , ap1 , false ) ;
4998: CALL_OW 44
5002: PPUSH
5003: LD_INT 20
5005: PPUSH
5006: LD_INT 0
5008: PPUSH
5009: CALL_OW 49
// end ;
5013: GO 4974
5015: POP
5016: POP
// for i = 1 to 4 * Difficulty do
5017: LD_ADDR_VAR 0 2
5021: PUSH
5022: DOUBLE
5023: LD_INT 1
5025: DEC
5026: ST_TO_ADDR
5027: LD_INT 4
5029: PUSH
5030: LD_OWVAR 67
5034: MUL
5035: PUSH
5036: FOR_TO
5037: IFFALSE 5111
// begin uc_nation := 0 ;
5039: LD_ADDR_OWVAR 21
5043: PUSH
5044: LD_INT 0
5046: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_kamikaze , 3 ) ;
5047: LD_INT 0
5049: PPUSH
5050: LD_INT 17
5052: PPUSH
5053: LD_INT 3
5055: PPUSH
5056: CALL_OW 380
// hc_attr := [ 11 , 13 ] ;
5060: LD_ADDR_OWVAR 29
5064: PUSH
5065: LD_INT 11
5067: PUSH
5068: LD_INT 13
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: ST_TO_ADDR
// un := CreateHuman ;
5075: LD_ADDR_VAR 0 6
5079: PUSH
5080: CALL_OW 44
5084: ST_TO_ADDR
// PlaceUnitArea ( un , ap2 , false ) ;
5085: LD_VAR 0 6
5089: PPUSH
5090: LD_INT 21
5092: PPUSH
5093: LD_INT 0
5095: PPUSH
5096: CALL_OW 49
// ComHold ( un ) ;
5100: LD_VAR 0 6
5104: PPUSH
5105: CALL_OW 140
// end ;
5109: GO 5036
5111: POP
5112: POP
// end ;
5113: LD_VAR 0 1
5117: RET
// every 12 12$00 + 2 2$00 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) do var i , tmp , p ;
5118: LD_INT 22
5120: PUSH
5121: LD_EXP 8
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: LD_INT 30
5132: PUSH
5133: LD_INT 3
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PPUSH
5144: CALL_OW 69
5148: IFFALSE 5455
5150: GO 5152
5152: DISABLE
5153: LD_INT 0
5155: PPUSH
5156: PPUSH
5157: PPUSH
// begin enable ;
5158: ENABLE
// if Difficulty < 3 then
5159: LD_OWVAR 67
5163: PUSH
5164: LD_INT 3
5166: LESS
5167: IFFALSE 5176
// wait ( 1 1$00 ) ;
5169: LD_INT 2100
5171: PPUSH
5172: CALL_OW 67
// tmp := queue_codes [ rng ] ;
5176: LD_ADDR_VAR 0 2
5180: PUSH
5181: LD_EXP 23
5185: PUSH
5186: LD_EXP 24
5190: ARRAY
5191: ST_TO_ADDR
// p := 1 ;
5192: LD_ADDR_VAR 0 3
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// for i = 1 to veh_counter + [ - 1 , 0 , 1 ] [ Difficulty ] do
5200: LD_ADDR_VAR 0 1
5204: PUSH
5205: DOUBLE
5206: LD_INT 1
5208: DEC
5209: ST_TO_ADDR
5210: LD_EXP 22
5214: PUSH
5215: LD_INT 1
5217: NEG
5218: PUSH
5219: LD_INT 0
5221: PUSH
5222: LD_INT 1
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: LIST
5229: PUSH
5230: LD_OWVAR 67
5234: ARRAY
5235: PLUS
5236: PUSH
5237: FOR_TO
5238: IFFALSE 5419
// begin AddComConstruct ( FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) [ 1 ] , to_produce [ tmp mod 10 ] [ 1 ] , to_produce [ tmp mod 10 ] [ 2 ] , to_produce [ tmp mod 10 ] [ 3 ] , to_produce [ tmp mod 10 ] [ 4 ] ) ;
5240: LD_INT 22
5242: PUSH
5243: LD_EXP 8
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: LD_INT 30
5254: PUSH
5255: LD_INT 3
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PUSH
5271: LD_INT 1
5273: ARRAY
5274: PPUSH
5275: LD_EXP 21
5279: PUSH
5280: LD_VAR 0 2
5284: PUSH
5285: LD_INT 10
5287: MOD
5288: ARRAY
5289: PUSH
5290: LD_INT 1
5292: ARRAY
5293: PPUSH
5294: LD_EXP 21
5298: PUSH
5299: LD_VAR 0 2
5303: PUSH
5304: LD_INT 10
5306: MOD
5307: ARRAY
5308: PUSH
5309: LD_INT 2
5311: ARRAY
5312: PPUSH
5313: LD_EXP 21
5317: PUSH
5318: LD_VAR 0 2
5322: PUSH
5323: LD_INT 10
5325: MOD
5326: ARRAY
5327: PUSH
5328: LD_INT 3
5330: ARRAY
5331: PPUSH
5332: LD_EXP 21
5336: PUSH
5337: LD_VAR 0 2
5341: PUSH
5342: LD_INT 10
5344: MOD
5345: ARRAY
5346: PUSH
5347: LD_INT 4
5349: ARRAY
5350: PPUSH
5351: CALL_OW 185
// tmp := tmp / 10 ;
5355: LD_ADDR_VAR 0 2
5359: PUSH
5360: LD_VAR 0 2
5364: PUSH
5365: LD_INT 10
5367: DIVREAL
5368: ST_TO_ADDR
// p := p + 1 ;
5369: LD_ADDR_VAR 0 3
5373: PUSH
5374: LD_VAR 0 3
5378: PUSH
5379: LD_INT 1
5381: PLUS
5382: ST_TO_ADDR
// if p > 5 then
5383: LD_VAR 0 3
5387: PUSH
5388: LD_INT 5
5390: GREATER
5391: IFFALSE 5417
// begin p := 1 ;
5393: LD_ADDR_VAR 0 3
5397: PUSH
5398: LD_INT 1
5400: ST_TO_ADDR
// tmp := queue_codes [ rng ] ;
5401: LD_ADDR_VAR 0 2
5405: PUSH
5406: LD_EXP 23
5410: PUSH
5411: LD_EXP 24
5415: ARRAY
5416: ST_TO_ADDR
// end ; end ;
5417: GO 5237
5419: POP
5420: POP
// rng := rng + 1 ;
5421: LD_ADDR_EXP 24
5425: PUSH
5426: LD_EXP 24
5430: PUSH
5431: LD_INT 1
5433: PLUS
5434: ST_TO_ADDR
// if rng > queue_codes then
5435: LD_EXP 24
5439: PUSH
5440: LD_EXP 23
5444: GREATER
5445: IFFALSE 5455
// rng := 1 ;
5447: LD_ADDR_EXP 24
5451: PUSH
5452: LD_INT 1
5454: ST_TO_ADDR
// end ;
5455: PPOPN 3
5457: END
// every 0 0$01 trigger FilterAllUnits ( [ f_class , 17 ] ) do var i , un ;
5458: LD_INT 25
5460: PUSH
5461: LD_INT 17
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: PPUSH
5468: CALL_OW 69
5472: IFFALSE 5575
5474: GO 5476
5476: DISABLE
5477: LD_INT 0
5479: PPUSH
5480: PPUSH
// begin enable ;
5481: ENABLE
// for i in FilterAllUnits ( [ f_class , 17 ] ) do
5482: LD_ADDR_VAR 0 1
5486: PUSH
5487: LD_INT 25
5489: PUSH
5490: LD_INT 17
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PPUSH
5497: CALL_OW 69
5501: PUSH
5502: FOR_IN
5503: IFFALSE 5573
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , bot_side ] ) , i ) ;
5505: LD_ADDR_VAR 0 2
5509: PUSH
5510: LD_INT 81
5512: PUSH
5513: LD_EXP 8
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PPUSH
5522: CALL_OW 69
5526: PPUSH
5527: LD_VAR 0 1
5531: PPUSH
5532: CALL_OW 74
5536: ST_TO_ADDR
// if GetDistUnits ( i , un ) < 15 then
5537: LD_VAR 0 1
5541: PPUSH
5542: LD_VAR 0 2
5546: PPUSH
5547: CALL_OW 296
5551: PUSH
5552: LD_INT 15
5554: LESS
5555: IFFALSE 5571
// ComAttackUnit ( i , un ) ;
5557: LD_VAR 0 1
5561: PPUSH
5562: LD_VAR 0 2
5566: PPUSH
5567: CALL_OW 115
// end ;
5571: GO 5502
5573: POP
5574: POP
// end ;
5575: PPOPN 2
5577: END
// every 0 0$01 trigger attackers marked 17 do var i ;
5578: LD_EXP 20
5582: IFFALSE 5649
5584: GO 5586
5586: DISABLE
5587: LD_INT 0
5589: PPUSH
// begin enable ;
5590: ENABLE
// for i in attackers do
5591: LD_ADDR_VAR 0 1
5595: PUSH
5596: LD_EXP 20
5600: PUSH
5601: FOR_IN
5602: IFFALSE 5647
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
5604: LD_VAR 0 1
5608: PPUSH
5609: LD_INT 81
5611: PUSH
5612: LD_VAR 0 1
5616: PPUSH
5617: CALL_OW 255
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PPUSH
5626: CALL_OW 69
5630: PPUSH
5631: LD_VAR 0 1
5635: PPUSH
5636: CALL_OW 74
5640: PPUSH
5641: CALL_OW 115
5645: GO 5601
5647: POP
5648: POP
// end ;
5649: PPOPN 1
5651: END
// every 0 0$01 trigger not attackers marked 17 do
5652: LD_EXP 20
5656: NOT
5657: IFFALSE 5666
5659: GO 5661
5661: DISABLE
// begin enable ;
5662: ENABLE
// disable ( 17 ) ;
5663: LD_INT 17
5665: DISABLE_MARKED
// end ;
5666: END
// every 1 1$00 trigger veh_counter <= attackers do var max , i ;
5667: LD_EXP 22
5671: PUSH
5672: LD_EXP 20
5676: LESSEQUAL
5677: IFFALSE 5690
5679: GO 5681
5681: DISABLE
5682: LD_INT 0
5684: PPUSH
5685: PPUSH
// begin enable ;
5686: ENABLE
// enable ( 17 ) ;
5687: LD_INT 17
5689: ENABLE_MARKED
// end ;
5690: PPOPN 2
5692: END
// every 0 0$01 trigger game_start and tick >= 50 50$00 do
5693: LD_EXP 9
5697: PUSH
5698: LD_OWVAR 1
5702: PUSH
5703: LD_INT 105000
5705: GREATEREQUAL
5706: AND
5707: IFFALSE 5726
5709: GO 5711
5711: DISABLE
// veh_counter := veh_counter + 2 ;
5712: LD_ADDR_EXP 22
5716: PUSH
5717: LD_EXP 22
5721: PUSH
5722: LD_INT 2
5724: PLUS
5725: ST_TO_ADDR
5726: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
5727: LD_INT 22
5729: PUSH
5730: LD_EXP 8
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: LD_INT 33
5741: PUSH
5742: LD_INT 2
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: PPUSH
5753: CALL_OW 69
5757: IFFALSE 5973
5759: GO 5761
5761: DISABLE
5762: LD_INT 0
5764: PPUSH
5765: PPUSH
5766: PPUSH
5767: PPUSH
5768: PPUSH
5769: PPUSH
5770: PPUSH
// begin enable ;
5771: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
5772: LD_ADDR_VAR 0 4
5776: PUSH
5777: LD_INT 22
5779: PUSH
5780: LD_EXP 8
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 33
5791: PUSH
5792: LD_INT 2
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 3
5801: PUSH
5802: LD_INT 61
5804: PUSH
5805: EMPTY
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: LIST
5816: PPUSH
5817: CALL_OW 69
5821: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_weapon , ar_control_tower ] ] ) ;
5822: LD_ADDR_VAR 0 3
5826: PUSH
5827: LD_INT 22
5829: PUSH
5830: LD_EXP 8
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PUSH
5839: LD_INT 34
5841: PUSH
5842: LD_INT 31
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: PPUSH
5853: CALL_OW 69
5857: ST_TO_ADDR
// best := 10 ;
5858: LD_ADDR_VAR 0 5
5862: PUSH
5863: LD_INT 10
5865: ST_TO_ADDR
// best_mechanic := - 1 ;
5866: LD_ADDR_VAR 0 6
5870: PUSH
5871: LD_INT 1
5873: NEG
5874: ST_TO_ADDR
// if vehs then
5875: LD_VAR 0 4
5879: IFFALSE 5973
// begin for j in cts do
5881: LD_ADDR_VAR 0 2
5885: PUSH
5886: LD_VAR 0 3
5890: PUSH
5891: FOR_IN
5892: IFFALSE 5953
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
5894: LD_ADDR_VAR 0 7
5898: PUSH
5899: LD_VAR 0 2
5903: PPUSH
5904: CALL 3433 0 1
5908: PPUSH
5909: CALL_OW 432
5913: ST_TO_ADDR
// if p < best then
5914: LD_VAR 0 7
5918: PUSH
5919: LD_VAR 0 5
5923: LESS
5924: IFFALSE 5951
// begin best := p ;
5926: LD_ADDR_VAR 0 5
5930: PUSH
5931: LD_VAR 0 7
5935: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
5936: LD_ADDR_VAR 0 6
5940: PUSH
5941: LD_VAR 0 2
5945: PPUSH
5946: CALL 3433 0 1
5950: ST_TO_ADDR
// end ; end ;
5951: GO 5891
5953: POP
5954: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
5955: LD_VAR 0 4
5959: PUSH
5960: LD_INT 1
5962: ARRAY
5963: PPUSH
5964: LD_VAR 0 6
5968: PPUSH
5969: CALL_OW 135
// end ; end ;
5973: PPOPN 7
5975: END
// every 0 0$01 do var i , j , h , sci , eng , b , p ;
5976: GO 5978
5978: DISABLE
5979: LD_INT 0
5981: PPUSH
5982: PPUSH
5983: PPUSH
5984: PPUSH
5985: PPUSH
5986: PPUSH
5987: PPUSH
// begin enable ;
5988: ENABLE
// b := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5989: LD_ADDR_VAR 0 6
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_EXP 8
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PUSH
6006: LD_INT 21
6008: PUSH
6009: LD_INT 3
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PUSH
6016: LD_INT 3
6018: PUSH
6019: LD_INT 24
6021: PUSH
6022: LD_INT 1000
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: LIST
6037: PPUSH
6038: CALL_OW 69
6042: ST_TO_ADDR
// h := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6043: LD_ADDR_VAR 0 3
6047: PUSH
6048: LD_INT 22
6050: PUSH
6051: LD_EXP 8
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: PUSH
6060: LD_INT 2
6062: PUSH
6063: LD_INT 25
6065: PUSH
6066: LD_INT 1
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 25
6075: PUSH
6076: LD_INT 2
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 25
6085: PUSH
6086: LD_INT 3
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 3
6101: PUSH
6102: LD_INT 24
6104: PUSH
6105: LD_INT 750
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 69
6125: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) ;
6126: LD_ADDR_VAR 0 4
6130: PUSH
6131: LD_INT 22
6133: PUSH
6134: LD_EXP 8
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PUSH
6143: LD_INT 25
6145: PUSH
6146: LD_INT 4
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PPUSH
6157: CALL_OW 69
6161: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 2 ] ] ) ;
6162: LD_ADDR_VAR 0 5
6166: PUSH
6167: LD_INT 22
6169: PUSH
6170: LD_EXP 8
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 25
6181: PUSH
6182: LD_INT 2
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PPUSH
6193: CALL_OW 69
6197: ST_TO_ADDR
// if not h and not b then
6198: LD_VAR 0 3
6202: NOT
6203: PUSH
6204: LD_VAR 0 6
6208: NOT
6209: AND
6210: IFFALSE 6494
// begin if sci then
6212: LD_VAR 0 4
6216: IFFALSE 6353
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) then
6218: LD_VAR 0 4
6222: PPUSH
6223: LD_INT 3
6225: PUSH
6226: LD_INT 54
6228: PUSH
6229: EMPTY
6230: LIST
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PPUSH
6236: CALL_OW 72
6240: PUSH
6241: LD_INT 22
6243: PUSH
6244: LD_EXP 8
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 30
6255: PUSH
6256: LD_INT 8
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PPUSH
6267: CALL_OW 69
6271: AND
6272: IFFALSE 6353
// for j in UnitFilter ( sci , [ f_not , [ f_inside ] ] ) do
6274: LD_ADDR_VAR 0 2
6278: PUSH
6279: LD_VAR 0 4
6283: PPUSH
6284: LD_INT 3
6286: PUSH
6287: LD_INT 54
6289: PUSH
6290: EMPTY
6291: LIST
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PPUSH
6297: CALL_OW 72
6301: PUSH
6302: FOR_IN
6303: IFFALSE 6351
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
6305: LD_VAR 0 2
6309: PPUSH
6310: LD_INT 22
6312: PUSH
6313: LD_EXP 8
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PUSH
6322: LD_INT 30
6324: PUSH
6325: LD_INT 8
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PPUSH
6336: CALL_OW 69
6340: PUSH
6341: LD_INT 1
6343: ARRAY
6344: PPUSH
6345: CALL_OW 120
6349: GO 6302
6351: POP
6352: POP
// if eng then
6353: LD_VAR 0 5
6357: IFFALSE 6494
// if UnitFilter ( eng , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) then
6359: LD_VAR 0 5
6363: PPUSH
6364: LD_INT 3
6366: PUSH
6367: LD_INT 54
6369: PUSH
6370: EMPTY
6371: LIST
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PPUSH
6377: CALL_OW 72
6381: PUSH
6382: LD_INT 22
6384: PUSH
6385: LD_EXP 8
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 30
6396: PUSH
6397: LD_INT 1
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PPUSH
6408: CALL_OW 69
6412: AND
6413: IFFALSE 6494
// for j in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6415: LD_ADDR_VAR 0 2
6419: PUSH
6420: LD_VAR 0 5
6424: PPUSH
6425: LD_INT 3
6427: PUSH
6428: LD_INT 54
6430: PUSH
6431: EMPTY
6432: LIST
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PPUSH
6438: CALL_OW 72
6442: PUSH
6443: FOR_IN
6444: IFFALSE 6492
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
6446: LD_VAR 0 2
6450: PPUSH
6451: LD_INT 22
6453: PUSH
6454: LD_EXP 8
6458: PUSH
6459: EMPTY
6460: LIST
6461: LIST
6462: PUSH
6463: LD_INT 30
6465: PUSH
6466: LD_INT 1
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PPUSH
6477: CALL_OW 69
6481: PUSH
6482: LD_INT 1
6484: ARRAY
6485: PPUSH
6486: CALL_OW 120
6490: GO 6443
6492: POP
6493: POP
// end ; p := 1 ;
6494: LD_ADDR_VAR 0 7
6498: PUSH
6499: LD_INT 1
6501: ST_TO_ADDR
// if b and eng then
6502: LD_VAR 0 6
6506: PUSH
6507: LD_VAR 0 5
6511: AND
6512: IFFALSE 6646
// for j in eng do
6514: LD_ADDR_VAR 0 2
6518: PUSH
6519: LD_VAR 0 5
6523: PUSH
6524: FOR_IN
6525: IFFALSE 6644
// begin if IsInUnit ( j ) then
6527: LD_VAR 0 2
6531: PPUSH
6532: CALL_OW 310
6536: IFFALSE 6549
// ComExitBuilding ( j ) else
6538: LD_VAR 0 2
6542: PPUSH
6543: CALL_OW 122
6547: GO 6642
// if not HasTask ( j ) and GetLives ( j ) > 750 then
6549: LD_VAR 0 2
6553: PPUSH
6554: CALL_OW 314
6558: NOT
6559: PUSH
6560: LD_VAR 0 2
6564: PPUSH
6565: CALL_OW 256
6569: PUSH
6570: LD_INT 750
6572: GREATER
6573: AND
6574: IFFALSE 6642
// begin if b > p then
6576: LD_VAR 0 6
6580: PUSH
6581: LD_VAR 0 7
6585: GREATER
6586: IFFALSE 6624
// begin ComRepairBuilding ( j , b [ p ] ) ;
6588: LD_VAR 0 2
6592: PPUSH
6593: LD_VAR 0 6
6597: PUSH
6598: LD_VAR 0 7
6602: ARRAY
6603: PPUSH
6604: CALL_OW 130
// p := p + 1 ;
6608: LD_ADDR_VAR 0 7
6612: PUSH
6613: LD_VAR 0 7
6617: PUSH
6618: LD_INT 1
6620: PLUS
6621: ST_TO_ADDR
// end else
6622: GO 6642
// ComRepairBuilding ( j , b [ 1 ] ) ;
6624: LD_VAR 0 2
6628: PPUSH
6629: LD_VAR 0 6
6633: PUSH
6634: LD_INT 1
6636: ARRAY
6637: PPUSH
6638: CALL_OW 130
// end ; end ;
6642: GO 6524
6644: POP
6645: POP
// if h and sci then
6646: LD_VAR 0 3
6650: PUSH
6651: LD_VAR 0 4
6655: AND
6656: IFFALSE 6795
// for i in h do
6658: LD_ADDR_VAR 0 1
6662: PUSH
6663: LD_VAR 0 3
6667: PUSH
6668: FOR_IN
6669: IFFALSE 6793
// if GetDistUnitXY ( i , 108 , 42 ) > 10 then
6671: LD_VAR 0 1
6675: PPUSH
6676: LD_INT 108
6678: PPUSH
6679: LD_INT 42
6681: PPUSH
6682: CALL_OW 297
6686: PUSH
6687: LD_INT 10
6689: GREATER
6690: IFFALSE 6709
// ComMoveXY ( i , 108 , 42 ) else
6692: LD_VAR 0 1
6696: PPUSH
6697: LD_INT 108
6699: PPUSH
6700: LD_INT 42
6702: PPUSH
6703: CALL_OW 111
6707: GO 6791
// begin for j in sci do
6709: LD_ADDR_VAR 0 2
6713: PUSH
6714: LD_VAR 0 4
6718: PUSH
6719: FOR_IN
6720: IFFALSE 6789
// begin if GetTag ( j ) > 0 then
6722: LD_VAR 0 2
6726: PPUSH
6727: CALL_OW 110
6731: PUSH
6732: LD_INT 0
6734: GREATER
6735: IFFALSE 6739
// continue ;
6737: GO 6719
// if IsInUnit ( j ) then
6739: LD_VAR 0 2
6743: PPUSH
6744: CALL_OW 310
6748: IFFALSE 6761
// ComExitBuilding ( j ) else
6750: LD_VAR 0 2
6754: PPUSH
6755: CALL_OW 122
6759: GO 6787
// if not HasTask ( j ) then
6761: LD_VAR 0 2
6765: PPUSH
6766: CALL_OW 314
6770: NOT
6771: IFFALSE 6787
// ComHeal ( j , h ) ;
6773: LD_VAR 0 2
6777: PPUSH
6778: LD_VAR 0 3
6782: PPUSH
6783: CALL_OW 128
// end ;
6787: GO 6719
6789: POP
6790: POP
// end ;
6791: GO 6668
6793: POP
6794: POP
// end ;
6795: PPOPN 7
6797: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 155 , 88 ) and GetBType ( HexInfo ( 155 , 88 ) = b_siberite_mine ) do var sci , p ;
6798: LD_INT 155
6800: PPUSH
6801: LD_INT 88
6803: PPUSH
6804: CALL_OW 428
6808: PUSH
6809: LD_INT 155
6811: PPUSH
6812: LD_INT 88
6814: PPUSH
6815: CALL_OW 428
6819: PUSH
6820: LD_INT 30
6822: EQUAL
6823: PPUSH
6824: CALL_OW 266
6828: AND
6829: IFFALSE 7078
6831: GO 6833
6833: DISABLE
6834: LD_INT 0
6836: PPUSH
6837: PPUSH
// begin p := GetSide ( HexInfo ( 155 , 88 ) ) ;
6838: LD_ADDR_VAR 0 2
6842: PUSH
6843: LD_INT 155
6845: PPUSH
6846: LD_INT 88
6848: PPUSH
6849: CALL_OW 428
6853: PPUSH
6854: CALL_OW 255
6858: ST_TO_ADDR
// Wait ( [ 5 5$30 , 6 6$33 , 6 6$21 , 8 8$44 , 9 9$31 , 4 4$33 , 9 9$01 , 5 5$01 ] [ p ] ) ;
6859: LD_INT 11550
6861: PUSH
6862: LD_INT 13755
6864: PUSH
6865: LD_INT 13335
6867: PUSH
6868: LD_INT 18340
6870: PUSH
6871: LD_INT 19985
6873: PUSH
6874: LD_INT 9555
6876: PUSH
6877: LD_INT 18935
6879: PUSH
6880: LD_INT 10535
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: PUSH
6893: LD_VAR 0 2
6897: ARRAY
6898: PPUSH
6899: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
6903: LD_INT 22
6905: PUSH
6906: LD_EXP 8
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 25
6917: PUSH
6918: LD_INT 4
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PPUSH
6929: CALL_OW 69
6933: PUSH
6934: LD_INT 0
6936: EQUAL
6937: IFFALSE 6941
// exit ;
6939: GO 7078
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ 1 ] ;
6941: LD_ADDR_VAR 0 1
6945: PUSH
6946: LD_INT 22
6948: PUSH
6949: LD_EXP 8
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 25
6960: PUSH
6961: LD_INT 4
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PPUSH
6972: CALL_OW 69
6976: PUSH
6977: LD_INT 1
6979: ARRAY
6980: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
6981: LD_VAR 0 1
6985: PPUSH
6986: LD_INT 1
6988: PPUSH
6989: CALL_OW 109
// ComExitBuilding ( sci ) ;
6993: LD_VAR 0 1
6997: PPUSH
6998: CALL_OW 122
// AddComMoveXY ( sci , 126 , 59 ) ;
7002: LD_VAR 0 1
7006: PPUSH
7007: LD_INT 126
7009: PPUSH
7010: LD_INT 59
7012: PPUSH
7013: CALL_OW 171
// if p mod 2 = 0 then
7017: LD_VAR 0 2
7021: PUSH
7022: LD_INT 2
7024: MOD
7025: PUSH
7026: LD_INT 0
7028: EQUAL
7029: IFFALSE 7048
// AddComMoveXY ( sci , 148 , 66 ) else
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 148
7038: PPUSH
7039: LD_INT 66
7041: PPUSH
7042: CALL_OW 171
7046: GO 7063
// AddComMoveXY ( sci , 135 , 84 ) ;
7048: LD_VAR 0 1
7052: PPUSH
7053: LD_INT 135
7055: PPUSH
7056: LD_INT 84
7058: PPUSH
7059: CALL_OW 171
// AddComContaminate ( sci , 155 , 88 ) ;
7063: LD_VAR 0 1
7067: PPUSH
7068: LD_INT 155
7070: PPUSH
7071: LD_INT 88
7073: PPUSH
7074: CALL_OW 218
// end ;
7078: PPOPN 2
7080: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 33 , 10 ) and GetBType ( HexInfo ( 33 , 10 ) = b_siberite_mine ) do var sci , p ;
7081: LD_INT 33
7083: PPUSH
7084: LD_INT 10
7086: PPUSH
7087: CALL_OW 428
7091: PUSH
7092: LD_INT 33
7094: PPUSH
7095: LD_INT 10
7097: PPUSH
7098: CALL_OW 428
7102: PUSH
7103: LD_INT 30
7105: EQUAL
7106: PPUSH
7107: CALL_OW 266
7111: AND
7112: IFFALSE 7363
7114: GO 7116
7116: DISABLE
7117: LD_INT 0
7119: PPUSH
7120: PPUSH
// begin p := GetSide ( HexInfo ( 33 , 10 ) ) ;
7121: LD_ADDR_VAR 0 2
7125: PUSH
7126: LD_INT 33
7128: PPUSH
7129: LD_INT 10
7131: PPUSH
7132: CALL_OW 428
7136: PPUSH
7137: CALL_OW 255
7141: ST_TO_ADDR
// Wait ( [ 4 4$30 , 5 5$33 , 3 3$21 , 4 4$44 , 3 3$31 , 5 5$33 , 3 3$01 , 8 8$01 ] [ p ] ) ;
7142: LD_INT 9450
7144: PUSH
7145: LD_INT 11655
7147: PUSH
7148: LD_INT 7035
7150: PUSH
7151: LD_INT 9940
7153: PUSH
7154: LD_INT 7385
7156: PUSH
7157: LD_INT 11655
7159: PUSH
7160: LD_INT 6335
7162: PUSH
7163: LD_INT 16835
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: LD_VAR 0 2
7180: ARRAY
7181: PPUSH
7182: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
7186: LD_INT 22
7188: PUSH
7189: LD_EXP 8
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 25
7200: PUSH
7201: LD_INT 4
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PPUSH
7212: CALL_OW 69
7216: PUSH
7217: LD_INT 0
7219: EQUAL
7220: IFFALSE 7224
// exit ;
7222: GO 7363
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ sci ] ;
7224: LD_ADDR_VAR 0 1
7228: PUSH
7229: LD_INT 22
7231: PUSH
7232: LD_EXP 8
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 25
7243: PUSH
7244: LD_INT 4
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PPUSH
7255: CALL_OW 69
7259: PUSH
7260: LD_VAR 0 1
7264: ARRAY
7265: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
7266: LD_VAR 0 1
7270: PPUSH
7271: LD_INT 1
7273: PPUSH
7274: CALL_OW 109
// ComExitBuilding ( sci ) ;
7278: LD_VAR 0 1
7282: PPUSH
7283: CALL_OW 122
// AddComMoveXY ( sci , 67 , 13 ) ;
7287: LD_VAR 0 1
7291: PPUSH
7292: LD_INT 67
7294: PPUSH
7295: LD_INT 13
7297: PPUSH
7298: CALL_OW 171
// if p mod 2 = 0 then
7302: LD_VAR 0 2
7306: PUSH
7307: LD_INT 2
7309: MOD
7310: PUSH
7311: LD_INT 0
7313: EQUAL
7314: IFFALSE 7333
// AddComMoveXY ( sci , 37 , 3 ) else
7316: LD_VAR 0 1
7320: PPUSH
7321: LD_INT 37
7323: PPUSH
7324: LD_INT 3
7326: PPUSH
7327: CALL_OW 171
7331: GO 7348
// AddComMoveXY ( sci , 45 , 20 ) ;
7333: LD_VAR 0 1
7337: PPUSH
7338: LD_INT 45
7340: PPUSH
7341: LD_INT 20
7343: PPUSH
7344: CALL_OW 171
// AddComContaminate ( sci , 33 , 10 ) ;
7348: LD_VAR 0 1
7352: PPUSH
7353: LD_INT 33
7355: PPUSH
7356: LD_INT 10
7358: PPUSH
7359: CALL_OW 218
// end ;
7363: PPOPN 2
7365: END
// every 0 0$01 trigger mines_list do var i , p ;
7366: LD_EXP 17
7370: IFFALSE 7596
7372: GO 7374
7374: DISABLE
7375: LD_INT 0
7377: PPUSH
7378: PPUSH
// begin enable ;
7379: ENABLE
// p := 1 ;
7380: LD_ADDR_VAR 0 2
7384: PUSH
7385: LD_INT 1
7387: ST_TO_ADDR
// for i = 1 to mines_list / 2 do
7388: LD_ADDR_VAR 0 1
7392: PUSH
7393: DOUBLE
7394: LD_INT 1
7396: DEC
7397: ST_TO_ADDR
7398: LD_EXP 17
7402: PUSH
7403: LD_INT 2
7405: DIVREAL
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7594
// begin if HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) > 0 then
7410: LD_EXP 17
7414: PUSH
7415: LD_VAR 0 2
7419: ARRAY
7420: PPUSH
7421: LD_EXP 17
7425: PUSH
7426: LD_VAR 0 2
7430: PUSH
7431: LD_INT 1
7433: PLUS
7434: ARRAY
7435: PPUSH
7436: CALL_OW 428
7440: PUSH
7441: LD_INT 0
7443: GREATER
7444: IFFALSE 7578
// if GetSide ( HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) ) <> bot_side then
7446: LD_EXP 17
7450: PUSH
7451: LD_VAR 0 2
7455: ARRAY
7456: PPUSH
7457: LD_EXP 17
7461: PUSH
7462: LD_VAR 0 2
7466: PUSH
7467: LD_INT 1
7469: PLUS
7470: ARRAY
7471: PPUSH
7472: CALL_OW 428
7476: PPUSH
7477: CALL_OW 255
7481: PUSH
7482: LD_EXP 8
7486: NONEQUAL
7487: IFFALSE 7578
// begin LaunchMineAtPos ( mines_list [ p ] , mines_list [ p + 1 ] , bot_side ) ;
7489: LD_EXP 17
7493: PUSH
7494: LD_VAR 0 2
7498: ARRAY
7499: PPUSH
7500: LD_EXP 17
7504: PUSH
7505: LD_VAR 0 2
7509: PUSH
7510: LD_INT 1
7512: PLUS
7513: ARRAY
7514: PPUSH
7515: LD_EXP 8
7519: PPUSH
7520: CALL_OW 456
// mines_list := Delete ( mines_list , p ) ;
7524: LD_ADDR_EXP 17
7528: PUSH
7529: LD_EXP 17
7533: PPUSH
7534: LD_VAR 0 2
7538: PPUSH
7539: CALL_OW 3
7543: ST_TO_ADDR
// mines_list := Delete ( mines_list , p ) ;
7544: LD_ADDR_EXP 17
7548: PUSH
7549: LD_EXP 17
7553: PPUSH
7554: LD_VAR 0 2
7558: PPUSH
7559: CALL_OW 3
7563: ST_TO_ADDR
// p := p - 2 ;
7564: LD_ADDR_VAR 0 2
7568: PUSH
7569: LD_VAR 0 2
7573: PUSH
7574: LD_INT 2
7576: MINUS
7577: ST_TO_ADDR
// end ; p := p + 2 ;
7578: LD_ADDR_VAR 0 2
7582: PUSH
7583: LD_VAR 0 2
7587: PUSH
7588: LD_INT 2
7590: PLUS
7591: ST_TO_ADDR
// end ;
7592: GO 7407
7594: POP
7595: POP
// end ;
7596: PPOPN 2
7598: END
// every 0 0$03 do var i , p , skr , filter , dep ;
7599: GO 7601
7601: DISABLE
7602: LD_INT 0
7604: PPUSH
7605: PPUSH
7606: PPUSH
7607: PPUSH
7608: PPUSH
// begin enable ;
7609: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , bot_side ] , [ f_class , class_apeman_engineer ] ] ) ;
7610: LD_ADDR_VAR 0 4
7614: PUSH
7615: LD_INT 50
7617: PUSH
7618: EMPTY
7619: LIST
7620: PUSH
7621: LD_INT 22
7623: PUSH
7624: LD_EXP 8
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: LD_INT 25
7635: PUSH
7636: LD_INT 16
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: LIST
7647: PPUSH
7648: CALL_OW 69
7652: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7653: LD_ADDR_VAR 0 5
7657: PUSH
7658: LD_INT 22
7660: PUSH
7661: LD_EXP 8
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PUSH
7670: LD_INT 2
7672: PUSH
7673: LD_INT 30
7675: PUSH
7676: LD_INT 0
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 30
7685: PUSH
7686: LD_INT 1
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 69
7706: ST_TO_ADDR
// skr := GetListOfCratesInArea ( kabul_crates ) ;
7707: LD_ADDR_VAR 0 3
7711: PUSH
7712: LD_INT 13
7714: PPUSH
7715: CALL_OW 435
7719: ST_TO_ADDR
// if filter and skr then
7720: LD_VAR 0 4
7724: PUSH
7725: LD_VAR 0 3
7729: AND
7730: IFFALSE 7805
// for i = 1 to filter do
7732: LD_ADDR_VAR 0 1
7736: PUSH
7737: DOUBLE
7738: LD_INT 1
7740: DEC
7741: ST_TO_ADDR
7742: LD_VAR 0 4
7746: PUSH
7747: FOR_TO
7748: IFFALSE 7803
// if not HasTask ( filter [ i ] ) then
7750: LD_VAR 0 4
7754: PUSH
7755: LD_VAR 0 1
7759: ARRAY
7760: PPUSH
7761: CALL_OW 314
7765: NOT
7766: IFFALSE 7801
// ComCollect ( filter [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
7768: LD_VAR 0 4
7772: PUSH
7773: LD_VAR 0 1
7777: ARRAY
7778: PPUSH
7779: LD_VAR 0 3
7783: PUSH
7784: LD_INT 1
7786: ARRAY
7787: PPUSH
7788: LD_VAR 0 3
7792: PUSH
7793: LD_INT 2
7795: ARRAY
7796: PPUSH
7797: CALL_OW 117
7801: GO 7747
7803: POP
7804: POP
// end ; end_of_file
7805: PPOPN 5
7807: END
// on UnitDestroyed ( un ) do var shooter , cl , s , n ;
7808: LD_INT 0
7810: PPUSH
7811: PPUSH
7812: PPUSH
7813: PPUSH
// begin if un in attackers then
7814: LD_VAR 0 1
7818: PUSH
7819: LD_EXP 20
7823: IN
7824: IFFALSE 7842
// attackers := attackers diff un ;
7826: LD_ADDR_EXP 20
7830: PUSH
7831: LD_EXP 20
7835: PUSH
7836: LD_VAR 0 1
7840: DIFF
7841: ST_TO_ADDR
// if GetSide ( un ) <> bot_side and GetSide ( un ) > 0 and un in FilterAllUnits ( [ f_type , unit_human ] ) then
7842: LD_VAR 0 1
7846: PPUSH
7847: CALL_OW 255
7851: PUSH
7852: LD_EXP 8
7856: NONEQUAL
7857: PUSH
7858: LD_VAR 0 1
7862: PPUSH
7863: CALL_OW 255
7867: PUSH
7868: LD_INT 0
7870: GREATER
7871: AND
7872: PUSH
7873: LD_VAR 0 1
7877: PUSH
7878: LD_INT 21
7880: PUSH
7881: LD_INT 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PPUSH
7888: CALL_OW 69
7892: IN
7893: AND
7894: IFFALSE 8078
// begin if respawning_time_min > 0 0$00 then
7896: LD_EXP 13
7900: PUSH
7901: LD_INT 0
7903: GREATER
7904: IFFALSE 8078
// begin s := GetSide ( un ) ;
7906: LD_ADDR_VAR 0 4
7910: PUSH
7911: LD_VAR 0 1
7915: PPUSH
7916: CALL_OW 255
7920: ST_TO_ADDR
// n := GetNation ( un ) ;
7921: LD_ADDR_VAR 0 5
7925: PUSH
7926: LD_VAR 0 1
7930: PPUSH
7931: CALL_OW 248
7935: ST_TO_ADDR
// cl := GetClass ( un ) ;
7936: LD_ADDR_VAR 0 3
7940: PUSH
7941: LD_VAR 0 1
7945: PPUSH
7946: CALL_OW 257
7950: ST_TO_ADDR
// wait ( respawning_time_min ) ;
7951: LD_EXP 13
7955: PPUSH
7956: CALL_OW 67
// wait ( respawning_time_max - ( 0 0$10 * tick mod 10 + 1 ) * cl ) ;
7960: LD_EXP 14
7964: PUSH
7965: LD_INT 350
7967: PUSH
7968: LD_OWVAR 1
7972: MUL
7973: PUSH
7974: LD_INT 10
7976: MOD
7977: PUSH
7978: LD_INT 1
7980: PLUS
7981: PUSH
7982: LD_VAR 0 3
7986: MUL
7987: MINUS
7988: PPUSH
7989: CALL_OW 67
// uc_side := s ;
7993: LD_ADDR_OWVAR 20
7997: PUSH
7998: LD_VAR 0 4
8002: ST_TO_ADDR
// uc_nation := n ;
8003: LD_ADDR_OWVAR 21
8007: PUSH
8008: LD_VAR 0 5
8012: ST_TO_ADDR
// PrepareHuman ( false , cl , skill_level - 2 ) ;
8013: LD_INT 0
8015: PPUSH
8016: LD_VAR 0 3
8020: PPUSH
8021: LD_EXP 11
8025: PUSH
8026: LD_INT 2
8028: MINUS
8029: PPUSH
8030: CALL_OW 380
// PlaceUnitArea ( CreateHuman , [ cr1 , cr3 , cr2 , cr3 ] [ ( cl mod 4 ) + 1 ] , true ) ;
8034: CALL_OW 44
8038: PPUSH
8039: LD_INT 17
8041: PUSH
8042: LD_INT 19
8044: PUSH
8045: LD_INT 18
8047: PUSH
8048: LD_INT 19
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: LD_VAR 0 3
8061: PUSH
8062: LD_INT 4
8064: MOD
8065: PUSH
8066: LD_INT 1
8068: PLUS
8069: ARRAY
8070: PPUSH
8071: LD_INT 1
8073: PPUSH
8074: CALL_OW 49
// end ; end ; end ;
8078: PPOPN 5
8080: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = bot_side and un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_type , unit_vehicle ] ] ) then
8081: LD_VAR 0 1
8085: PPUSH
8086: CALL_OW 255
8090: PUSH
8091: LD_EXP 8
8095: EQUAL
8096: PUSH
8097: LD_VAR 0 1
8101: PUSH
8102: LD_INT 33
8104: PUSH
8105: LD_INT 2
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 21
8114: PUSH
8115: LD_INT 2
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PPUSH
8126: CALL_OW 69
8130: IN
8131: AND
8132: IFFALSE 8255
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> bot_side then
8134: LD_OWVAR 3
8138: PUSH
8139: LD_VAR 0 1
8143: DIFF
8144: PPUSH
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 74
8154: PPUSH
8155: CALL_OW 255
8159: PUSH
8160: LD_EXP 8
8164: NONEQUAL
8165: IFFALSE 8255
// begin Wait ( 0 0$1.3 ) ;
8167: LD_INT 46
8169: PPUSH
8170: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 250
8183: PPUSH
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 251
8193: PPUSH
8194: LD_INT 1
8196: PPUSH
8197: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8201: LD_VAR 0 1
8205: PPUSH
8206: CALL_OW 250
8210: PPUSH
8211: LD_VAR 0 1
8215: PPUSH
8216: CALL_OW 251
8220: PPUSH
8221: LD_INT 1
8223: PPUSH
8224: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8228: LD_VAR 0 1
8232: PPUSH
8233: CALL_OW 250
8237: PPUSH
8238: LD_VAR 0 1
8242: PPUSH
8243: CALL_OW 251
8247: PPUSH
8248: LD_INT 1
8250: PPUSH
8251: CALL_OW 453
// end ; if GetControl ( un ) = control_remote then
8255: LD_VAR 0 1
8259: PPUSH
8260: CALL_OW 263
8264: PUSH
8265: LD_INT 2
8267: EQUAL
8268: IFFALSE 8279
// ComUnlink ( un ) ;
8270: LD_VAR 0 1
8274: PPUSH
8275: CALL_OW 136
// end ;
8279: PPOPN 1
8281: END
// on VehicleConstructed ( veh , b ) do begin if GetSide ( veh ) = bot_side then
8282: LD_VAR 0 1
8286: PPUSH
8287: CALL_OW 255
8291: PUSH
8292: LD_EXP 8
8296: EQUAL
8297: IFFALSE 8328
// attackers := Insert ( attackers , attackers + 1 , veh ) ;
8299: LD_ADDR_EXP 20
8303: PUSH
8304: LD_EXP 20
8308: PPUSH
8309: LD_EXP 20
8313: PUSH
8314: LD_INT 1
8316: PLUS
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL_OW 2
8327: ST_TO_ADDR
// end ;
8328: PPOPN 2
8330: END
// on LeaveBuilding ( b , un ) do var i , arm ;
8331: LD_INT 0
8333: PPUSH
8334: PPUSH
// begin if GetSide ( b ) = bot_side and GetBType ( b ) = b_bunker then
8335: LD_VAR 0 1
8339: PPUSH
8340: CALL_OW 255
8344: PUSH
8345: LD_EXP 8
8349: EQUAL
8350: PUSH
8351: LD_VAR 0 1
8355: PPUSH
8356: CALL_OW 266
8360: PUSH
8361: LD_INT 32
8363: EQUAL
8364: AND
8365: IFFALSE 8463
// begin arm := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_barracks ] ] ) ;
8367: LD_ADDR_VAR 0 4
8371: PUSH
8372: LD_INT 22
8374: PUSH
8375: LD_EXP 8
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PUSH
8384: LD_INT 30
8386: PUSH
8387: LD_INT 5
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PPUSH
8398: CALL_OW 69
8402: ST_TO_ADDR
// for i in arm do
8403: LD_ADDR_VAR 0 3
8407: PUSH
8408: LD_VAR 0 4
8412: PUSH
8413: FOR_IN
8414: IFFALSE 8461
// if UnitsInside ( i ) < 6 then
8416: LD_VAR 0 3
8420: PPUSH
8421: CALL_OW 313
8425: PUSH
8426: LD_INT 6
8428: LESS
8429: IFFALSE 8459
// begin ComEnterUnit ( un , i ) ;
8431: LD_VAR 0 2
8435: PPUSH
8436: LD_VAR 0 3
8440: PPUSH
8441: CALL_OW 120
// AddComChangeProfession ( un , class_mortar ) ;
8445: LD_VAR 0 2
8449: PPUSH
8450: LD_INT 8
8452: PPUSH
8453: CALL_OW 183
// break ;
8457: GO 8461
// end ;
8459: GO 8413
8461: POP
8462: POP
// end ; end ; end_of_file
8463: PPOPN 4
8465: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
8466: LD_VAR 0 1
8470: PUSH
8471: LD_INT 200
8473: DOUBLE
8474: GREATEREQUAL
8475: IFFALSE 8483
8477: LD_INT 299
8479: DOUBLE
8480: LESSEQUAL
8481: IFTRUE 8485
8483: GO 8517
8485: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
8486: LD_VAR 0 1
8490: PPUSH
8491: LD_VAR 0 2
8495: PPUSH
8496: LD_VAR 0 3
8500: PPUSH
8501: LD_VAR 0 4
8505: PPUSH
8506: LD_VAR 0 5
8510: PPUSH
8511: CALL 66731 0 5
8515: GO 8594
8517: LD_INT 300
8519: DOUBLE
8520: GREATEREQUAL
8521: IFFALSE 8529
8523: LD_INT 399
8525: DOUBLE
8526: LESSEQUAL
8527: IFTRUE 8531
8529: GO 8593
8531: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
8532: LD_VAR 0 1
8536: PPUSH
8537: LD_VAR 0 2
8541: PPUSH
8542: LD_VAR 0 3
8546: PPUSH
8547: LD_VAR 0 4
8551: PPUSH
8552: LD_VAR 0 5
8556: PPUSH
8557: LD_VAR 0 6
8561: PPUSH
8562: LD_VAR 0 7
8566: PPUSH
8567: LD_VAR 0 8
8571: PPUSH
8572: LD_VAR 0 9
8576: PPUSH
8577: LD_VAR 0 10
8581: PPUSH
8582: LD_VAR 0 11
8586: PPUSH
8587: CALL 63056 0 11
8591: GO 8594
8593: POP
// end ;
8594: PPOPN 11
8596: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
8597: LD_VAR 0 1
8601: PPUSH
8602: LD_VAR 0 2
8606: PPUSH
8607: LD_VAR 0 3
8611: PPUSH
8612: LD_VAR 0 4
8616: PPUSH
8617: LD_VAR 0 5
8621: PPUSH
8622: CALL 66467 0 5
// end ; end_of_file
8626: PPOPN 5
8628: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8629: LD_INT 0
8631: PPUSH
8632: PPUSH
// if exist_mode then
8633: LD_VAR 0 2
8637: IFFALSE 8662
// unit := CreateCharacter ( prefix & ident ) else
8639: LD_ADDR_VAR 0 5
8643: PUSH
8644: LD_VAR 0 3
8648: PUSH
8649: LD_VAR 0 1
8653: STR
8654: PPUSH
8655: CALL_OW 34
8659: ST_TO_ADDR
8660: GO 8677
// unit := NewCharacter ( ident ) ;
8662: LD_ADDR_VAR 0 5
8666: PUSH
8667: LD_VAR 0 1
8671: PPUSH
8672: CALL_OW 25
8676: ST_TO_ADDR
// result := unit ;
8677: LD_ADDR_VAR 0 4
8681: PUSH
8682: LD_VAR 0 5
8686: ST_TO_ADDR
// end ;
8687: LD_VAR 0 4
8691: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8692: LD_INT 0
8694: PPUSH
8695: PPUSH
// if not side or not nation then
8696: LD_VAR 0 1
8700: NOT
8701: PUSH
8702: LD_VAR 0 2
8706: NOT
8707: OR
8708: IFFALSE 8712
// exit ;
8710: GO 9480
// case nation of nation_american :
8712: LD_VAR 0 2
8716: PUSH
8717: LD_INT 1
8719: DOUBLE
8720: EQUAL
8721: IFTRUE 8725
8723: GO 8939
8725: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8726: LD_ADDR_VAR 0 4
8730: PUSH
8731: LD_INT 35
8733: PUSH
8734: LD_INT 45
8736: PUSH
8737: LD_INT 46
8739: PUSH
8740: LD_INT 47
8742: PUSH
8743: LD_INT 82
8745: PUSH
8746: LD_INT 83
8748: PUSH
8749: LD_INT 84
8751: PUSH
8752: LD_INT 85
8754: PUSH
8755: LD_INT 86
8757: PUSH
8758: LD_INT 1
8760: PUSH
8761: LD_INT 2
8763: PUSH
8764: LD_INT 6
8766: PUSH
8767: LD_INT 15
8769: PUSH
8770: LD_INT 16
8772: PUSH
8773: LD_INT 7
8775: PUSH
8776: LD_INT 12
8778: PUSH
8779: LD_INT 13
8781: PUSH
8782: LD_INT 10
8784: PUSH
8785: LD_INT 14
8787: PUSH
8788: LD_INT 20
8790: PUSH
8791: LD_INT 21
8793: PUSH
8794: LD_INT 22
8796: PUSH
8797: LD_INT 25
8799: PUSH
8800: LD_INT 32
8802: PUSH
8803: LD_INT 27
8805: PUSH
8806: LD_INT 36
8808: PUSH
8809: LD_INT 69
8811: PUSH
8812: LD_INT 39
8814: PUSH
8815: LD_INT 34
8817: PUSH
8818: LD_INT 40
8820: PUSH
8821: LD_INT 48
8823: PUSH
8824: LD_INT 49
8826: PUSH
8827: LD_INT 50
8829: PUSH
8830: LD_INT 51
8832: PUSH
8833: LD_INT 52
8835: PUSH
8836: LD_INT 53
8838: PUSH
8839: LD_INT 54
8841: PUSH
8842: LD_INT 55
8844: PUSH
8845: LD_INT 56
8847: PUSH
8848: LD_INT 57
8850: PUSH
8851: LD_INT 58
8853: PUSH
8854: LD_INT 59
8856: PUSH
8857: LD_INT 60
8859: PUSH
8860: LD_INT 61
8862: PUSH
8863: LD_INT 62
8865: PUSH
8866: LD_INT 80
8868: PUSH
8869: LD_INT 82
8871: PUSH
8872: LD_INT 83
8874: PUSH
8875: LD_INT 84
8877: PUSH
8878: LD_INT 85
8880: PUSH
8881: LD_INT 86
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: ST_TO_ADDR
8937: GO 9404
8939: LD_INT 2
8941: DOUBLE
8942: EQUAL
8943: IFTRUE 8947
8945: GO 9173
8947: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
8948: LD_ADDR_VAR 0 4
8952: PUSH
8953: LD_INT 35
8955: PUSH
8956: LD_INT 45
8958: PUSH
8959: LD_INT 46
8961: PUSH
8962: LD_INT 47
8964: PUSH
8965: LD_INT 82
8967: PUSH
8968: LD_INT 83
8970: PUSH
8971: LD_INT 84
8973: PUSH
8974: LD_INT 85
8976: PUSH
8977: LD_INT 87
8979: PUSH
8980: LD_INT 70
8982: PUSH
8983: LD_INT 1
8985: PUSH
8986: LD_INT 11
8988: PUSH
8989: LD_INT 3
8991: PUSH
8992: LD_INT 4
8994: PUSH
8995: LD_INT 5
8997: PUSH
8998: LD_INT 6
9000: PUSH
9001: LD_INT 15
9003: PUSH
9004: LD_INT 18
9006: PUSH
9007: LD_INT 7
9009: PUSH
9010: LD_INT 17
9012: PUSH
9013: LD_INT 8
9015: PUSH
9016: LD_INT 20
9018: PUSH
9019: LD_INT 21
9021: PUSH
9022: LD_INT 22
9024: PUSH
9025: LD_INT 72
9027: PUSH
9028: LD_INT 26
9030: PUSH
9031: LD_INT 69
9033: PUSH
9034: LD_INT 39
9036: PUSH
9037: LD_INT 40
9039: PUSH
9040: LD_INT 41
9042: PUSH
9043: LD_INT 42
9045: PUSH
9046: LD_INT 43
9048: PUSH
9049: LD_INT 48
9051: PUSH
9052: LD_INT 49
9054: PUSH
9055: LD_INT 50
9057: PUSH
9058: LD_INT 51
9060: PUSH
9061: LD_INT 52
9063: PUSH
9064: LD_INT 53
9066: PUSH
9067: LD_INT 54
9069: PUSH
9070: LD_INT 55
9072: PUSH
9073: LD_INT 56
9075: PUSH
9076: LD_INT 60
9078: PUSH
9079: LD_INT 61
9081: PUSH
9082: LD_INT 62
9084: PUSH
9085: LD_INT 66
9087: PUSH
9088: LD_INT 67
9090: PUSH
9091: LD_INT 68
9093: PUSH
9094: LD_INT 81
9096: PUSH
9097: LD_INT 82
9099: PUSH
9100: LD_INT 83
9102: PUSH
9103: LD_INT 84
9105: PUSH
9106: LD_INT 85
9108: PUSH
9109: LD_INT 87
9111: PUSH
9112: LD_INT 88
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: ST_TO_ADDR
9171: GO 9404
9173: LD_INT 3
9175: DOUBLE
9176: EQUAL
9177: IFTRUE 9181
9179: GO 9403
9181: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9182: LD_ADDR_VAR 0 4
9186: PUSH
9187: LD_INT 46
9189: PUSH
9190: LD_INT 47
9192: PUSH
9193: LD_INT 1
9195: PUSH
9196: LD_INT 2
9198: PUSH
9199: LD_INT 82
9201: PUSH
9202: LD_INT 83
9204: PUSH
9205: LD_INT 84
9207: PUSH
9208: LD_INT 85
9210: PUSH
9211: LD_INT 86
9213: PUSH
9214: LD_INT 11
9216: PUSH
9217: LD_INT 9
9219: PUSH
9220: LD_INT 20
9222: PUSH
9223: LD_INT 19
9225: PUSH
9226: LD_INT 21
9228: PUSH
9229: LD_INT 24
9231: PUSH
9232: LD_INT 22
9234: PUSH
9235: LD_INT 25
9237: PUSH
9238: LD_INT 28
9240: PUSH
9241: LD_INT 29
9243: PUSH
9244: LD_INT 30
9246: PUSH
9247: LD_INT 31
9249: PUSH
9250: LD_INT 37
9252: PUSH
9253: LD_INT 38
9255: PUSH
9256: LD_INT 32
9258: PUSH
9259: LD_INT 27
9261: PUSH
9262: LD_INT 33
9264: PUSH
9265: LD_INT 69
9267: PUSH
9268: LD_INT 39
9270: PUSH
9271: LD_INT 34
9273: PUSH
9274: LD_INT 40
9276: PUSH
9277: LD_INT 71
9279: PUSH
9280: LD_INT 23
9282: PUSH
9283: LD_INT 44
9285: PUSH
9286: LD_INT 48
9288: PUSH
9289: LD_INT 49
9291: PUSH
9292: LD_INT 50
9294: PUSH
9295: LD_INT 51
9297: PUSH
9298: LD_INT 52
9300: PUSH
9301: LD_INT 53
9303: PUSH
9304: LD_INT 54
9306: PUSH
9307: LD_INT 55
9309: PUSH
9310: LD_INT 56
9312: PUSH
9313: LD_INT 57
9315: PUSH
9316: LD_INT 58
9318: PUSH
9319: LD_INT 59
9321: PUSH
9322: LD_INT 63
9324: PUSH
9325: LD_INT 64
9327: PUSH
9328: LD_INT 65
9330: PUSH
9331: LD_INT 82
9333: PUSH
9334: LD_INT 83
9336: PUSH
9337: LD_INT 84
9339: PUSH
9340: LD_INT 85
9342: PUSH
9343: LD_INT 86
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: ST_TO_ADDR
9401: GO 9404
9403: POP
// if state > - 1 and state < 3 then
9404: LD_VAR 0 3
9408: PUSH
9409: LD_INT 1
9411: NEG
9412: GREATER
9413: PUSH
9414: LD_VAR 0 3
9418: PUSH
9419: LD_INT 3
9421: LESS
9422: AND
9423: IFFALSE 9480
// for i in result do
9425: LD_ADDR_VAR 0 5
9429: PUSH
9430: LD_VAR 0 4
9434: PUSH
9435: FOR_IN
9436: IFFALSE 9478
// if GetTech ( i , side ) <> state then
9438: LD_VAR 0 5
9442: PPUSH
9443: LD_VAR 0 1
9447: PPUSH
9448: CALL_OW 321
9452: PUSH
9453: LD_VAR 0 3
9457: NONEQUAL
9458: IFFALSE 9476
// result := result diff i ;
9460: LD_ADDR_VAR 0 4
9464: PUSH
9465: LD_VAR 0 4
9469: PUSH
9470: LD_VAR 0 5
9474: DIFF
9475: ST_TO_ADDR
9476: GO 9435
9478: POP
9479: POP
// end ;
9480: LD_VAR 0 4
9484: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9485: LD_INT 0
9487: PPUSH
9488: PPUSH
9489: PPUSH
// result := true ;
9490: LD_ADDR_VAR 0 3
9494: PUSH
9495: LD_INT 1
9497: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9498: LD_ADDR_VAR 0 5
9502: PUSH
9503: LD_VAR 0 2
9507: PPUSH
9508: CALL_OW 480
9512: ST_TO_ADDR
// if not tmp then
9513: LD_VAR 0 5
9517: NOT
9518: IFFALSE 9522
// exit ;
9520: GO 9571
// for i in tmp do
9522: LD_ADDR_VAR 0 4
9526: PUSH
9527: LD_VAR 0 5
9531: PUSH
9532: FOR_IN
9533: IFFALSE 9569
// if GetTech ( i , side ) <> state_researched then
9535: LD_VAR 0 4
9539: PPUSH
9540: LD_VAR 0 1
9544: PPUSH
9545: CALL_OW 321
9549: PUSH
9550: LD_INT 2
9552: NONEQUAL
9553: IFFALSE 9567
// begin result := false ;
9555: LD_ADDR_VAR 0 3
9559: PUSH
9560: LD_INT 0
9562: ST_TO_ADDR
// exit ;
9563: POP
9564: POP
9565: GO 9571
// end ;
9567: GO 9532
9569: POP
9570: POP
// end ;
9571: LD_VAR 0 3
9575: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9576: LD_INT 0
9578: PPUSH
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
9583: PPUSH
9584: PPUSH
9585: PPUSH
9586: PPUSH
9587: PPUSH
9588: PPUSH
9589: PPUSH
9590: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9591: LD_VAR 0 1
9595: NOT
9596: PUSH
9597: LD_VAR 0 1
9601: PPUSH
9602: CALL_OW 257
9606: PUSH
9607: LD_INT 9
9609: NONEQUAL
9610: OR
9611: IFFALSE 9615
// exit ;
9613: GO 10188
// side := GetSide ( unit ) ;
9615: LD_ADDR_VAR 0 9
9619: PUSH
9620: LD_VAR 0 1
9624: PPUSH
9625: CALL_OW 255
9629: ST_TO_ADDR
// tech_space := tech_spacanom ;
9630: LD_ADDR_VAR 0 12
9634: PUSH
9635: LD_INT 29
9637: ST_TO_ADDR
// tech_time := tech_taurad ;
9638: LD_ADDR_VAR 0 13
9642: PUSH
9643: LD_INT 28
9645: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9646: LD_ADDR_VAR 0 11
9650: PUSH
9651: LD_VAR 0 1
9655: PPUSH
9656: CALL_OW 310
9660: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9661: LD_VAR 0 11
9665: PPUSH
9666: CALL_OW 247
9670: PUSH
9671: LD_INT 2
9673: EQUAL
9674: IFFALSE 9678
// exit ;
9676: GO 10188
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9678: LD_ADDR_VAR 0 8
9682: PUSH
9683: LD_INT 81
9685: PUSH
9686: LD_VAR 0 9
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: PUSH
9695: LD_INT 3
9697: PUSH
9698: LD_INT 21
9700: PUSH
9701: LD_INT 3
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PPUSH
9716: CALL_OW 69
9720: ST_TO_ADDR
// if not tmp then
9721: LD_VAR 0 8
9725: NOT
9726: IFFALSE 9730
// exit ;
9728: GO 10188
// if in_unit then
9730: LD_VAR 0 11
9734: IFFALSE 9758
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9736: LD_ADDR_VAR 0 10
9740: PUSH
9741: LD_VAR 0 8
9745: PPUSH
9746: LD_VAR 0 11
9750: PPUSH
9751: CALL_OW 74
9755: ST_TO_ADDR
9756: GO 9778
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9758: LD_ADDR_VAR 0 10
9762: PUSH
9763: LD_VAR 0 8
9767: PPUSH
9768: LD_VAR 0 1
9772: PPUSH
9773: CALL_OW 74
9777: ST_TO_ADDR
// if not enemy then
9778: LD_VAR 0 10
9782: NOT
9783: IFFALSE 9787
// exit ;
9785: GO 10188
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9787: LD_VAR 0 11
9791: PUSH
9792: LD_VAR 0 11
9796: PPUSH
9797: LD_VAR 0 10
9801: PPUSH
9802: CALL_OW 296
9806: PUSH
9807: LD_INT 13
9809: GREATER
9810: AND
9811: PUSH
9812: LD_VAR 0 1
9816: PPUSH
9817: LD_VAR 0 10
9821: PPUSH
9822: CALL_OW 296
9826: PUSH
9827: LD_INT 12
9829: GREATER
9830: OR
9831: IFFALSE 9835
// exit ;
9833: GO 10188
// missile := [ 1 ] ;
9835: LD_ADDR_VAR 0 14
9839: PUSH
9840: LD_INT 1
9842: PUSH
9843: EMPTY
9844: LIST
9845: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9846: LD_VAR 0 9
9850: PPUSH
9851: LD_VAR 0 12
9855: PPUSH
9856: CALL_OW 325
9860: IFFALSE 9889
// missile := Replace ( missile , missile + 1 , 2 ) ;
9862: LD_ADDR_VAR 0 14
9866: PUSH
9867: LD_VAR 0 14
9871: PPUSH
9872: LD_VAR 0 14
9876: PUSH
9877: LD_INT 1
9879: PLUS
9880: PPUSH
9881: LD_INT 2
9883: PPUSH
9884: CALL_OW 1
9888: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9889: LD_VAR 0 9
9893: PPUSH
9894: LD_VAR 0 13
9898: PPUSH
9899: CALL_OW 325
9903: PUSH
9904: LD_VAR 0 10
9908: PPUSH
9909: CALL_OW 255
9913: PPUSH
9914: LD_VAR 0 13
9918: PPUSH
9919: CALL_OW 325
9923: NOT
9924: AND
9925: IFFALSE 9954
// missile := Replace ( missile , missile + 1 , 3 ) ;
9927: LD_ADDR_VAR 0 14
9931: PUSH
9932: LD_VAR 0 14
9936: PPUSH
9937: LD_VAR 0 14
9941: PUSH
9942: LD_INT 1
9944: PLUS
9945: PPUSH
9946: LD_INT 3
9948: PPUSH
9949: CALL_OW 1
9953: ST_TO_ADDR
// if missile < 2 then
9954: LD_VAR 0 14
9958: PUSH
9959: LD_INT 2
9961: LESS
9962: IFFALSE 9966
// exit ;
9964: GO 10188
// x := GetX ( enemy ) ;
9966: LD_ADDR_VAR 0 4
9970: PUSH
9971: LD_VAR 0 10
9975: PPUSH
9976: CALL_OW 250
9980: ST_TO_ADDR
// y := GetY ( enemy ) ;
9981: LD_ADDR_VAR 0 5
9985: PUSH
9986: LD_VAR 0 10
9990: PPUSH
9991: CALL_OW 251
9995: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9996: LD_ADDR_VAR 0 6
10000: PUSH
10001: LD_VAR 0 4
10005: PUSH
10006: LD_INT 1
10008: NEG
10009: PPUSH
10010: LD_INT 1
10012: PPUSH
10013: CALL_OW 12
10017: PLUS
10018: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10019: LD_ADDR_VAR 0 7
10023: PUSH
10024: LD_VAR 0 5
10028: PUSH
10029: LD_INT 1
10031: NEG
10032: PPUSH
10033: LD_INT 1
10035: PPUSH
10036: CALL_OW 12
10040: PLUS
10041: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10042: LD_VAR 0 6
10046: PPUSH
10047: LD_VAR 0 7
10051: PPUSH
10052: CALL_OW 488
10056: NOT
10057: IFFALSE 10079
// begin _x := x ;
10059: LD_ADDR_VAR 0 6
10063: PUSH
10064: LD_VAR 0 4
10068: ST_TO_ADDR
// _y := y ;
10069: LD_ADDR_VAR 0 7
10073: PUSH
10074: LD_VAR 0 5
10078: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10079: LD_ADDR_VAR 0 3
10083: PUSH
10084: LD_INT 1
10086: PPUSH
10087: LD_VAR 0 14
10091: PPUSH
10092: CALL_OW 12
10096: ST_TO_ADDR
// case i of 1 :
10097: LD_VAR 0 3
10101: PUSH
10102: LD_INT 1
10104: DOUBLE
10105: EQUAL
10106: IFTRUE 10110
10108: GO 10127
10110: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10111: LD_VAR 0 1
10115: PPUSH
10116: LD_VAR 0 10
10120: PPUSH
10121: CALL_OW 115
10125: GO 10188
10127: LD_INT 2
10129: DOUBLE
10130: EQUAL
10131: IFTRUE 10135
10133: GO 10157
10135: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10136: LD_VAR 0 1
10140: PPUSH
10141: LD_VAR 0 6
10145: PPUSH
10146: LD_VAR 0 7
10150: PPUSH
10151: CALL_OW 153
10155: GO 10188
10157: LD_INT 3
10159: DOUBLE
10160: EQUAL
10161: IFTRUE 10165
10163: GO 10187
10165: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10166: LD_VAR 0 1
10170: PPUSH
10171: LD_VAR 0 6
10175: PPUSH
10176: LD_VAR 0 7
10180: PPUSH
10181: CALL_OW 154
10185: GO 10188
10187: POP
// end ;
10188: LD_VAR 0 2
10192: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10193: LD_INT 0
10195: PPUSH
10196: PPUSH
10197: PPUSH
10198: PPUSH
10199: PPUSH
10200: PPUSH
// if not unit or not building then
10201: LD_VAR 0 1
10205: NOT
10206: PUSH
10207: LD_VAR 0 2
10211: NOT
10212: OR
10213: IFFALSE 10217
// exit ;
10215: GO 10375
// x := GetX ( building ) ;
10217: LD_ADDR_VAR 0 5
10221: PUSH
10222: LD_VAR 0 2
10226: PPUSH
10227: CALL_OW 250
10231: ST_TO_ADDR
// y := GetY ( building ) ;
10232: LD_ADDR_VAR 0 6
10236: PUSH
10237: LD_VAR 0 2
10241: PPUSH
10242: CALL_OW 251
10246: ST_TO_ADDR
// for i = 0 to 5 do
10247: LD_ADDR_VAR 0 4
10251: PUSH
10252: DOUBLE
10253: LD_INT 0
10255: DEC
10256: ST_TO_ADDR
10257: LD_INT 5
10259: PUSH
10260: FOR_TO
10261: IFFALSE 10373
// begin _x := ShiftX ( x , i , 3 ) ;
10263: LD_ADDR_VAR 0 7
10267: PUSH
10268: LD_VAR 0 5
10272: PPUSH
10273: LD_VAR 0 4
10277: PPUSH
10278: LD_INT 3
10280: PPUSH
10281: CALL_OW 272
10285: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10286: LD_ADDR_VAR 0 8
10290: PUSH
10291: LD_VAR 0 6
10295: PPUSH
10296: LD_VAR 0 4
10300: PPUSH
10301: LD_INT 3
10303: PPUSH
10304: CALL_OW 273
10308: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10309: LD_VAR 0 7
10313: PPUSH
10314: LD_VAR 0 8
10318: PPUSH
10319: CALL_OW 488
10323: NOT
10324: IFFALSE 10328
// continue ;
10326: GO 10260
// if HexInfo ( _x , _y ) = 0 then
10328: LD_VAR 0 7
10332: PPUSH
10333: LD_VAR 0 8
10337: PPUSH
10338: CALL_OW 428
10342: PUSH
10343: LD_INT 0
10345: EQUAL
10346: IFFALSE 10371
// begin ComMoveXY ( unit , _x , _y ) ;
10348: LD_VAR 0 1
10352: PPUSH
10353: LD_VAR 0 7
10357: PPUSH
10358: LD_VAR 0 8
10362: PPUSH
10363: CALL_OW 111
// exit ;
10367: POP
10368: POP
10369: GO 10375
// end ; end ;
10371: GO 10260
10373: POP
10374: POP
// end ;
10375: LD_VAR 0 3
10379: RET
// export function ScanBase ( side , base_area ) ; begin
10380: LD_INT 0
10382: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10383: LD_ADDR_VAR 0 3
10387: PUSH
10388: LD_VAR 0 2
10392: PPUSH
10393: LD_INT 81
10395: PUSH
10396: LD_VAR 0 1
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PPUSH
10405: CALL_OW 70
10409: ST_TO_ADDR
// end ;
10410: LD_VAR 0 3
10414: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10415: LD_INT 0
10417: PPUSH
10418: PPUSH
10419: PPUSH
10420: PPUSH
// result := false ;
10421: LD_ADDR_VAR 0 2
10425: PUSH
10426: LD_INT 0
10428: ST_TO_ADDR
// side := GetSide ( unit ) ;
10429: LD_ADDR_VAR 0 3
10433: PUSH
10434: LD_VAR 0 1
10438: PPUSH
10439: CALL_OW 255
10443: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10444: LD_ADDR_VAR 0 4
10448: PUSH
10449: LD_VAR 0 1
10453: PPUSH
10454: CALL_OW 248
10458: ST_TO_ADDR
// case nat of 1 :
10459: LD_VAR 0 4
10463: PUSH
10464: LD_INT 1
10466: DOUBLE
10467: EQUAL
10468: IFTRUE 10472
10470: GO 10483
10472: POP
// tech := tech_lassight ; 2 :
10473: LD_ADDR_VAR 0 5
10477: PUSH
10478: LD_INT 12
10480: ST_TO_ADDR
10481: GO 10522
10483: LD_INT 2
10485: DOUBLE
10486: EQUAL
10487: IFTRUE 10491
10489: GO 10502
10491: POP
// tech := tech_mortar ; 3 :
10492: LD_ADDR_VAR 0 5
10496: PUSH
10497: LD_INT 41
10499: ST_TO_ADDR
10500: GO 10522
10502: LD_INT 3
10504: DOUBLE
10505: EQUAL
10506: IFTRUE 10510
10508: GO 10521
10510: POP
// tech := tech_bazooka ; end ;
10511: LD_ADDR_VAR 0 5
10515: PUSH
10516: LD_INT 44
10518: ST_TO_ADDR
10519: GO 10522
10521: POP
// if Researched ( side , tech ) then
10522: LD_VAR 0 3
10526: PPUSH
10527: LD_VAR 0 5
10531: PPUSH
10532: CALL_OW 325
10536: IFFALSE 10563
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10538: LD_ADDR_VAR 0 2
10542: PUSH
10543: LD_INT 5
10545: PUSH
10546: LD_INT 8
10548: PUSH
10549: LD_INT 9
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: LD_VAR 0 4
10561: ARRAY
10562: ST_TO_ADDR
// end ;
10563: LD_VAR 0 2
10567: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10568: LD_INT 0
10570: PPUSH
10571: PPUSH
10572: PPUSH
// if not mines then
10573: LD_VAR 0 2
10577: NOT
10578: IFFALSE 10582
// exit ;
10580: GO 10726
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10582: LD_ADDR_VAR 0 5
10586: PUSH
10587: LD_INT 81
10589: PUSH
10590: LD_VAR 0 1
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 3
10601: PUSH
10602: LD_INT 21
10604: PUSH
10605: LD_INT 3
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PPUSH
10620: CALL_OW 69
10624: ST_TO_ADDR
// for i in mines do
10625: LD_ADDR_VAR 0 4
10629: PUSH
10630: LD_VAR 0 2
10634: PUSH
10635: FOR_IN
10636: IFFALSE 10724
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10638: LD_VAR 0 4
10642: PUSH
10643: LD_INT 1
10645: ARRAY
10646: PPUSH
10647: LD_VAR 0 4
10651: PUSH
10652: LD_INT 2
10654: ARRAY
10655: PPUSH
10656: CALL_OW 458
10660: NOT
10661: IFFALSE 10665
// continue ;
10663: GO 10635
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10665: LD_VAR 0 4
10669: PUSH
10670: LD_INT 1
10672: ARRAY
10673: PPUSH
10674: LD_VAR 0 4
10678: PUSH
10679: LD_INT 2
10681: ARRAY
10682: PPUSH
10683: CALL_OW 428
10687: PUSH
10688: LD_VAR 0 5
10692: IN
10693: IFFALSE 10722
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10695: LD_VAR 0 4
10699: PUSH
10700: LD_INT 1
10702: ARRAY
10703: PPUSH
10704: LD_VAR 0 4
10708: PUSH
10709: LD_INT 2
10711: ARRAY
10712: PPUSH
10713: LD_VAR 0 1
10717: PPUSH
10718: CALL_OW 456
// end ;
10722: GO 10635
10724: POP
10725: POP
// end ;
10726: LD_VAR 0 3
10730: RET
// export function Count ( array ) ; begin
10731: LD_INT 0
10733: PPUSH
// result := array + 0 ;
10734: LD_ADDR_VAR 0 2
10738: PUSH
10739: LD_VAR 0 1
10743: PUSH
10744: LD_INT 0
10746: PLUS
10747: ST_TO_ADDR
// end ;
10748: LD_VAR 0 2
10752: RET
// export function IsEmpty ( building ) ; begin
10753: LD_INT 0
10755: PPUSH
// if not building then
10756: LD_VAR 0 1
10760: NOT
10761: IFFALSE 10765
// exit ;
10763: GO 10808
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10765: LD_ADDR_VAR 0 2
10769: PUSH
10770: LD_VAR 0 1
10774: PUSH
10775: LD_INT 22
10777: PUSH
10778: LD_VAR 0 1
10782: PPUSH
10783: CALL_OW 255
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 58
10794: PUSH
10795: EMPTY
10796: LIST
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PPUSH
10802: CALL_OW 69
10806: IN
10807: ST_TO_ADDR
// end ;
10808: LD_VAR 0 2
10812: RET
// export function IsNotFull ( building ) ; var places ; begin
10813: LD_INT 0
10815: PPUSH
10816: PPUSH
// if not building then
10817: LD_VAR 0 1
10821: NOT
10822: IFFALSE 10826
// exit ;
10824: GO 10854
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
10826: LD_ADDR_VAR 0 2
10830: PUSH
10831: LD_VAR 0 1
10835: PPUSH
10836: LD_INT 3
10838: PUSH
10839: LD_INT 62
10841: PUSH
10842: EMPTY
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 72
10853: ST_TO_ADDR
// end ;
10854: LD_VAR 0 2
10858: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10859: LD_INT 0
10861: PPUSH
10862: PPUSH
10863: PPUSH
10864: PPUSH
// tmp := [ ] ;
10865: LD_ADDR_VAR 0 3
10869: PUSH
10870: EMPTY
10871: ST_TO_ADDR
// list := [ ] ;
10872: LD_ADDR_VAR 0 5
10876: PUSH
10877: EMPTY
10878: ST_TO_ADDR
// for i = 16 to 25 do
10879: LD_ADDR_VAR 0 4
10883: PUSH
10884: DOUBLE
10885: LD_INT 16
10887: DEC
10888: ST_TO_ADDR
10889: LD_INT 25
10891: PUSH
10892: FOR_TO
10893: IFFALSE 10966
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10895: LD_ADDR_VAR 0 3
10899: PUSH
10900: LD_VAR 0 3
10904: PUSH
10905: LD_INT 22
10907: PUSH
10908: LD_VAR 0 1
10912: PPUSH
10913: CALL_OW 255
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 91
10924: PUSH
10925: LD_VAR 0 1
10929: PUSH
10930: LD_INT 6
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 30
10940: PUSH
10941: LD_VAR 0 4
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: LIST
10954: PUSH
10955: EMPTY
10956: LIST
10957: PPUSH
10958: CALL_OW 69
10962: ADD
10963: ST_TO_ADDR
10964: GO 10892
10966: POP
10967: POP
// for i = 1 to tmp do
10968: LD_ADDR_VAR 0 4
10972: PUSH
10973: DOUBLE
10974: LD_INT 1
10976: DEC
10977: ST_TO_ADDR
10978: LD_VAR 0 3
10982: PUSH
10983: FOR_TO
10984: IFFALSE 11072
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10986: LD_ADDR_VAR 0 5
10990: PUSH
10991: LD_VAR 0 5
10995: PUSH
10996: LD_VAR 0 3
11000: PUSH
11001: LD_VAR 0 4
11005: ARRAY
11006: PPUSH
11007: CALL_OW 266
11011: PUSH
11012: LD_VAR 0 3
11016: PUSH
11017: LD_VAR 0 4
11021: ARRAY
11022: PPUSH
11023: CALL_OW 250
11027: PUSH
11028: LD_VAR 0 3
11032: PUSH
11033: LD_VAR 0 4
11037: ARRAY
11038: PPUSH
11039: CALL_OW 251
11043: PUSH
11044: LD_VAR 0 3
11048: PUSH
11049: LD_VAR 0 4
11053: ARRAY
11054: PPUSH
11055: CALL_OW 254
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: PUSH
11066: EMPTY
11067: LIST
11068: ADD
11069: ST_TO_ADDR
11070: GO 10983
11072: POP
11073: POP
// result := list ;
11074: LD_ADDR_VAR 0 2
11078: PUSH
11079: LD_VAR 0 5
11083: ST_TO_ADDR
// end ;
11084: LD_VAR 0 2
11088: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11089: LD_INT 0
11091: PPUSH
11092: PPUSH
11093: PPUSH
11094: PPUSH
11095: PPUSH
11096: PPUSH
11097: PPUSH
// if not factory then
11098: LD_VAR 0 1
11102: NOT
11103: IFFALSE 11107
// exit ;
11105: GO 11700
// if control = control_apeman then
11107: LD_VAR 0 4
11111: PUSH
11112: LD_INT 5
11114: EQUAL
11115: IFFALSE 11224
// begin tmp := UnitsInside ( factory ) ;
11117: LD_ADDR_VAR 0 8
11121: PUSH
11122: LD_VAR 0 1
11126: PPUSH
11127: CALL_OW 313
11131: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11132: LD_VAR 0 8
11136: PPUSH
11137: LD_INT 25
11139: PUSH
11140: LD_INT 12
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PPUSH
11147: CALL_OW 72
11151: NOT
11152: IFFALSE 11162
// control := control_manual ;
11154: LD_ADDR_VAR 0 4
11158: PUSH
11159: LD_INT 1
11161: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11162: LD_ADDR_VAR 0 8
11166: PUSH
11167: LD_VAR 0 1
11171: PPUSH
11172: CALL 10859 0 1
11176: ST_TO_ADDR
// if tmp then
11177: LD_VAR 0 8
11181: IFFALSE 11224
// begin for i in tmp do
11183: LD_ADDR_VAR 0 7
11187: PUSH
11188: LD_VAR 0 8
11192: PUSH
11193: FOR_IN
11194: IFFALSE 11222
// if i [ 1 ] = b_ext_radio then
11196: LD_VAR 0 7
11200: PUSH
11201: LD_INT 1
11203: ARRAY
11204: PUSH
11205: LD_INT 22
11207: EQUAL
11208: IFFALSE 11220
// begin control := control_remote ;
11210: LD_ADDR_VAR 0 4
11214: PUSH
11215: LD_INT 2
11217: ST_TO_ADDR
// break ;
11218: GO 11222
// end ;
11220: GO 11193
11222: POP
11223: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11224: LD_VAR 0 1
11228: PPUSH
11229: LD_VAR 0 2
11233: PPUSH
11234: LD_VAR 0 3
11238: PPUSH
11239: LD_VAR 0 4
11243: PPUSH
11244: LD_VAR 0 5
11248: PPUSH
11249: CALL_OW 448
11253: IFFALSE 11288
// begin result := [ chassis , engine , control , weapon ] ;
11255: LD_ADDR_VAR 0 6
11259: PUSH
11260: LD_VAR 0 2
11264: PUSH
11265: LD_VAR 0 3
11269: PUSH
11270: LD_VAR 0 4
11274: PUSH
11275: LD_VAR 0 5
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: ST_TO_ADDR
// exit ;
11286: GO 11700
// end ; _chassis := AvailableChassisList ( factory ) ;
11288: LD_ADDR_VAR 0 9
11292: PUSH
11293: LD_VAR 0 1
11297: PPUSH
11298: CALL_OW 475
11302: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11303: LD_ADDR_VAR 0 11
11307: PUSH
11308: LD_VAR 0 1
11312: PPUSH
11313: CALL_OW 476
11317: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11318: LD_ADDR_VAR 0 12
11322: PUSH
11323: LD_VAR 0 1
11327: PPUSH
11328: CALL_OW 477
11332: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11333: LD_ADDR_VAR 0 10
11337: PUSH
11338: LD_VAR 0 1
11342: PPUSH
11343: CALL_OW 478
11347: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11348: LD_VAR 0 9
11352: NOT
11353: PUSH
11354: LD_VAR 0 11
11358: NOT
11359: OR
11360: PUSH
11361: LD_VAR 0 12
11365: NOT
11366: OR
11367: PUSH
11368: LD_VAR 0 10
11372: NOT
11373: OR
11374: IFFALSE 11409
// begin result := [ chassis , engine , control , weapon ] ;
11376: LD_ADDR_VAR 0 6
11380: PUSH
11381: LD_VAR 0 2
11385: PUSH
11386: LD_VAR 0 3
11390: PUSH
11391: LD_VAR 0 4
11395: PUSH
11396: LD_VAR 0 5
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: ST_TO_ADDR
// exit ;
11407: GO 11700
// end ; if not chassis in _chassis then
11409: LD_VAR 0 2
11413: PUSH
11414: LD_VAR 0 9
11418: IN
11419: NOT
11420: IFFALSE 11446
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11422: LD_ADDR_VAR 0 2
11426: PUSH
11427: LD_VAR 0 9
11431: PUSH
11432: LD_INT 1
11434: PPUSH
11435: LD_VAR 0 9
11439: PPUSH
11440: CALL_OW 12
11444: ARRAY
11445: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11446: LD_VAR 0 2
11450: PPUSH
11451: LD_VAR 0 3
11455: PPUSH
11456: CALL 11705 0 2
11460: NOT
11461: IFFALSE 11520
// repeat engine := _engine [ 1 ] ;
11463: LD_ADDR_VAR 0 3
11467: PUSH
11468: LD_VAR 0 11
11472: PUSH
11473: LD_INT 1
11475: ARRAY
11476: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11477: LD_ADDR_VAR 0 11
11481: PUSH
11482: LD_VAR 0 11
11486: PPUSH
11487: LD_INT 1
11489: PPUSH
11490: CALL_OW 3
11494: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11495: LD_VAR 0 2
11499: PPUSH
11500: LD_VAR 0 3
11504: PPUSH
11505: CALL 11705 0 2
11509: PUSH
11510: LD_VAR 0 11
11514: PUSH
11515: EMPTY
11516: EQUAL
11517: OR
11518: IFFALSE 11463
// if not control in _control then
11520: LD_VAR 0 4
11524: PUSH
11525: LD_VAR 0 12
11529: IN
11530: NOT
11531: IFFALSE 11557
// control := _control [ rand ( 1 , _control ) ] ;
11533: LD_ADDR_VAR 0 4
11537: PUSH
11538: LD_VAR 0 12
11542: PUSH
11543: LD_INT 1
11545: PPUSH
11546: LD_VAR 0 12
11550: PPUSH
11551: CALL_OW 12
11555: ARRAY
11556: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11557: LD_VAR 0 2
11561: PPUSH
11562: LD_VAR 0 5
11566: PPUSH
11567: CALL 11925 0 2
11571: NOT
11572: IFFALSE 11631
// repeat weapon := _weapon [ 1 ] ;
11574: LD_ADDR_VAR 0 5
11578: PUSH
11579: LD_VAR 0 10
11583: PUSH
11584: LD_INT 1
11586: ARRAY
11587: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11588: LD_ADDR_VAR 0 10
11592: PUSH
11593: LD_VAR 0 10
11597: PPUSH
11598: LD_INT 1
11600: PPUSH
11601: CALL_OW 3
11605: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11606: LD_VAR 0 2
11610: PPUSH
11611: LD_VAR 0 5
11615: PPUSH
11616: CALL 11925 0 2
11620: PUSH
11621: LD_VAR 0 10
11625: PUSH
11626: EMPTY
11627: EQUAL
11628: OR
11629: IFFALSE 11574
// result := [ ] ;
11631: LD_ADDR_VAR 0 6
11635: PUSH
11636: EMPTY
11637: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11638: LD_VAR 0 1
11642: PPUSH
11643: LD_VAR 0 2
11647: PPUSH
11648: LD_VAR 0 3
11652: PPUSH
11653: LD_VAR 0 4
11657: PPUSH
11658: LD_VAR 0 5
11662: PPUSH
11663: CALL_OW 448
11667: IFFALSE 11700
// result := [ chassis , engine , control , weapon ] ;
11669: LD_ADDR_VAR 0 6
11673: PUSH
11674: LD_VAR 0 2
11678: PUSH
11679: LD_VAR 0 3
11683: PUSH
11684: LD_VAR 0 4
11688: PUSH
11689: LD_VAR 0 5
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: ST_TO_ADDR
// end ;
11700: LD_VAR 0 6
11704: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11705: LD_INT 0
11707: PPUSH
// if not chassis or not engine then
11708: LD_VAR 0 1
11712: NOT
11713: PUSH
11714: LD_VAR 0 2
11718: NOT
11719: OR
11720: IFFALSE 11724
// exit ;
11722: GO 11920
// case engine of engine_solar :
11724: LD_VAR 0 2
11728: PUSH
11729: LD_INT 2
11731: DOUBLE
11732: EQUAL
11733: IFTRUE 11737
11735: GO 11775
11737: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11738: LD_ADDR_VAR 0 3
11742: PUSH
11743: LD_INT 11
11745: PUSH
11746: LD_INT 12
11748: PUSH
11749: LD_INT 13
11751: PUSH
11752: LD_INT 14
11754: PUSH
11755: LD_INT 1
11757: PUSH
11758: LD_INT 2
11760: PUSH
11761: LD_INT 3
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: ST_TO_ADDR
11773: GO 11904
11775: LD_INT 1
11777: DOUBLE
11778: EQUAL
11779: IFTRUE 11783
11781: GO 11845
11783: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11784: LD_ADDR_VAR 0 3
11788: PUSH
11789: LD_INT 11
11791: PUSH
11792: LD_INT 12
11794: PUSH
11795: LD_INT 13
11797: PUSH
11798: LD_INT 14
11800: PUSH
11801: LD_INT 1
11803: PUSH
11804: LD_INT 2
11806: PUSH
11807: LD_INT 3
11809: PUSH
11810: LD_INT 4
11812: PUSH
11813: LD_INT 5
11815: PUSH
11816: LD_INT 21
11818: PUSH
11819: LD_INT 23
11821: PUSH
11822: LD_INT 22
11824: PUSH
11825: LD_INT 24
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: ST_TO_ADDR
11843: GO 11904
11845: LD_INT 3
11847: DOUBLE
11848: EQUAL
11849: IFTRUE 11853
11851: GO 11903
11853: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11854: LD_ADDR_VAR 0 3
11858: PUSH
11859: LD_INT 13
11861: PUSH
11862: LD_INT 14
11864: PUSH
11865: LD_INT 2
11867: PUSH
11868: LD_INT 3
11870: PUSH
11871: LD_INT 4
11873: PUSH
11874: LD_INT 5
11876: PUSH
11877: LD_INT 21
11879: PUSH
11880: LD_INT 22
11882: PUSH
11883: LD_INT 23
11885: PUSH
11886: LD_INT 24
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: ST_TO_ADDR
11901: GO 11904
11903: POP
// result := ( chassis in result ) ;
11904: LD_ADDR_VAR 0 3
11908: PUSH
11909: LD_VAR 0 1
11913: PUSH
11914: LD_VAR 0 3
11918: IN
11919: ST_TO_ADDR
// end ;
11920: LD_VAR 0 3
11924: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11925: LD_INT 0
11927: PPUSH
// if not chassis or not weapon then
11928: LD_VAR 0 1
11932: NOT
11933: PUSH
11934: LD_VAR 0 2
11938: NOT
11939: OR
11940: IFFALSE 11944
// exit ;
11942: GO 13004
// case weapon of us_machine_gun :
11944: LD_VAR 0 2
11948: PUSH
11949: LD_INT 2
11951: DOUBLE
11952: EQUAL
11953: IFTRUE 11957
11955: GO 11987
11957: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11958: LD_ADDR_VAR 0 3
11962: PUSH
11963: LD_INT 1
11965: PUSH
11966: LD_INT 2
11968: PUSH
11969: LD_INT 3
11971: PUSH
11972: LD_INT 4
11974: PUSH
11975: LD_INT 5
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: ST_TO_ADDR
11985: GO 12988
11987: LD_INT 3
11989: DOUBLE
11990: EQUAL
11991: IFTRUE 11995
11993: GO 12025
11995: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11996: LD_ADDR_VAR 0 3
12000: PUSH
12001: LD_INT 1
12003: PUSH
12004: LD_INT 2
12006: PUSH
12007: LD_INT 3
12009: PUSH
12010: LD_INT 4
12012: PUSH
12013: LD_INT 5
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: ST_TO_ADDR
12023: GO 12988
12025: LD_INT 11
12027: DOUBLE
12028: EQUAL
12029: IFTRUE 12033
12031: GO 12063
12033: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12034: LD_ADDR_VAR 0 3
12038: PUSH
12039: LD_INT 1
12041: PUSH
12042: LD_INT 2
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: LD_INT 4
12050: PUSH
12051: LD_INT 5
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: ST_TO_ADDR
12061: GO 12988
12063: LD_INT 4
12065: DOUBLE
12066: EQUAL
12067: IFTRUE 12071
12069: GO 12097
12071: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12072: LD_ADDR_VAR 0 3
12076: PUSH
12077: LD_INT 2
12079: PUSH
12080: LD_INT 3
12082: PUSH
12083: LD_INT 4
12085: PUSH
12086: LD_INT 5
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: ST_TO_ADDR
12095: GO 12988
12097: LD_INT 5
12099: DOUBLE
12100: EQUAL
12101: IFTRUE 12105
12103: GO 12131
12105: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12106: LD_ADDR_VAR 0 3
12110: PUSH
12111: LD_INT 2
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: LD_INT 4
12119: PUSH
12120: LD_INT 5
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: ST_TO_ADDR
12129: GO 12988
12131: LD_INT 9
12133: DOUBLE
12134: EQUAL
12135: IFTRUE 12139
12137: GO 12165
12139: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12140: LD_ADDR_VAR 0 3
12144: PUSH
12145: LD_INT 2
12147: PUSH
12148: LD_INT 3
12150: PUSH
12151: LD_INT 4
12153: PUSH
12154: LD_INT 5
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: ST_TO_ADDR
12163: GO 12988
12165: LD_INT 7
12167: DOUBLE
12168: EQUAL
12169: IFTRUE 12173
12171: GO 12199
12173: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12174: LD_ADDR_VAR 0 3
12178: PUSH
12179: LD_INT 2
12181: PUSH
12182: LD_INT 3
12184: PUSH
12185: LD_INT 4
12187: PUSH
12188: LD_INT 5
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: ST_TO_ADDR
12197: GO 12988
12199: LD_INT 12
12201: DOUBLE
12202: EQUAL
12203: IFTRUE 12207
12205: GO 12233
12207: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12208: LD_ADDR_VAR 0 3
12212: PUSH
12213: LD_INT 2
12215: PUSH
12216: LD_INT 3
12218: PUSH
12219: LD_INT 4
12221: PUSH
12222: LD_INT 5
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: ST_TO_ADDR
12231: GO 12988
12233: LD_INT 13
12235: DOUBLE
12236: EQUAL
12237: IFTRUE 12241
12239: GO 12267
12241: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12242: LD_ADDR_VAR 0 3
12246: PUSH
12247: LD_INT 2
12249: PUSH
12250: LD_INT 3
12252: PUSH
12253: LD_INT 4
12255: PUSH
12256: LD_INT 5
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: ST_TO_ADDR
12265: GO 12988
12267: LD_INT 14
12269: DOUBLE
12270: EQUAL
12271: IFTRUE 12275
12273: GO 12293
12275: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12276: LD_ADDR_VAR 0 3
12280: PUSH
12281: LD_INT 4
12283: PUSH
12284: LD_INT 5
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: ST_TO_ADDR
12291: GO 12988
12293: LD_INT 6
12295: DOUBLE
12296: EQUAL
12297: IFTRUE 12301
12299: GO 12319
12301: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12302: LD_ADDR_VAR 0 3
12306: PUSH
12307: LD_INT 4
12309: PUSH
12310: LD_INT 5
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: ST_TO_ADDR
12317: GO 12988
12319: LD_INT 10
12321: DOUBLE
12322: EQUAL
12323: IFTRUE 12327
12325: GO 12345
12327: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12328: LD_ADDR_VAR 0 3
12332: PUSH
12333: LD_INT 4
12335: PUSH
12336: LD_INT 5
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: ST_TO_ADDR
12343: GO 12988
12345: LD_INT 22
12347: DOUBLE
12348: EQUAL
12349: IFTRUE 12353
12351: GO 12379
12353: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12354: LD_ADDR_VAR 0 3
12358: PUSH
12359: LD_INT 11
12361: PUSH
12362: LD_INT 12
12364: PUSH
12365: LD_INT 13
12367: PUSH
12368: LD_INT 14
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: ST_TO_ADDR
12377: GO 12988
12379: LD_INT 23
12381: DOUBLE
12382: EQUAL
12383: IFTRUE 12387
12385: GO 12413
12387: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12388: LD_ADDR_VAR 0 3
12392: PUSH
12393: LD_INT 11
12395: PUSH
12396: LD_INT 12
12398: PUSH
12399: LD_INT 13
12401: PUSH
12402: LD_INT 14
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: ST_TO_ADDR
12411: GO 12988
12413: LD_INT 24
12415: DOUBLE
12416: EQUAL
12417: IFTRUE 12421
12419: GO 12447
12421: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12422: LD_ADDR_VAR 0 3
12426: PUSH
12427: LD_INT 11
12429: PUSH
12430: LD_INT 12
12432: PUSH
12433: LD_INT 13
12435: PUSH
12436: LD_INT 14
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: ST_TO_ADDR
12445: GO 12988
12447: LD_INT 30
12449: DOUBLE
12450: EQUAL
12451: IFTRUE 12455
12453: GO 12481
12455: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12456: LD_ADDR_VAR 0 3
12460: PUSH
12461: LD_INT 11
12463: PUSH
12464: LD_INT 12
12466: PUSH
12467: LD_INT 13
12469: PUSH
12470: LD_INT 14
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: ST_TO_ADDR
12479: GO 12988
12481: LD_INT 25
12483: DOUBLE
12484: EQUAL
12485: IFTRUE 12489
12487: GO 12507
12489: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12490: LD_ADDR_VAR 0 3
12494: PUSH
12495: LD_INT 13
12497: PUSH
12498: LD_INT 14
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: ST_TO_ADDR
12505: GO 12988
12507: LD_INT 27
12509: DOUBLE
12510: EQUAL
12511: IFTRUE 12515
12513: GO 12533
12515: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12516: LD_ADDR_VAR 0 3
12520: PUSH
12521: LD_INT 13
12523: PUSH
12524: LD_INT 14
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: ST_TO_ADDR
12531: GO 12988
12533: LD_INT 92
12535: DOUBLE
12536: EQUAL
12537: IFTRUE 12541
12539: GO 12567
12541: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12542: LD_ADDR_VAR 0 3
12546: PUSH
12547: LD_INT 11
12549: PUSH
12550: LD_INT 12
12552: PUSH
12553: LD_INT 13
12555: PUSH
12556: LD_INT 14
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: ST_TO_ADDR
12565: GO 12988
12567: LD_INT 28
12569: DOUBLE
12570: EQUAL
12571: IFTRUE 12575
12573: GO 12593
12575: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12576: LD_ADDR_VAR 0 3
12580: PUSH
12581: LD_INT 13
12583: PUSH
12584: LD_INT 14
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: ST_TO_ADDR
12591: GO 12988
12593: LD_INT 29
12595: DOUBLE
12596: EQUAL
12597: IFTRUE 12601
12599: GO 12619
12601: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12602: LD_ADDR_VAR 0 3
12606: PUSH
12607: LD_INT 13
12609: PUSH
12610: LD_INT 14
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: ST_TO_ADDR
12617: GO 12988
12619: LD_INT 31
12621: DOUBLE
12622: EQUAL
12623: IFTRUE 12627
12625: GO 12645
12627: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12628: LD_ADDR_VAR 0 3
12632: PUSH
12633: LD_INT 13
12635: PUSH
12636: LD_INT 14
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: ST_TO_ADDR
12643: GO 12988
12645: LD_INT 26
12647: DOUBLE
12648: EQUAL
12649: IFTRUE 12653
12651: GO 12671
12653: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12654: LD_ADDR_VAR 0 3
12658: PUSH
12659: LD_INT 13
12661: PUSH
12662: LD_INT 14
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: ST_TO_ADDR
12669: GO 12988
12671: LD_INT 42
12673: DOUBLE
12674: EQUAL
12675: IFTRUE 12679
12677: GO 12705
12679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12680: LD_ADDR_VAR 0 3
12684: PUSH
12685: LD_INT 21
12687: PUSH
12688: LD_INT 22
12690: PUSH
12691: LD_INT 23
12693: PUSH
12694: LD_INT 24
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: ST_TO_ADDR
12703: GO 12988
12705: LD_INT 43
12707: DOUBLE
12708: EQUAL
12709: IFTRUE 12713
12711: GO 12739
12713: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12714: LD_ADDR_VAR 0 3
12718: PUSH
12719: LD_INT 21
12721: PUSH
12722: LD_INT 22
12724: PUSH
12725: LD_INT 23
12727: PUSH
12728: LD_INT 24
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: ST_TO_ADDR
12737: GO 12988
12739: LD_INT 44
12741: DOUBLE
12742: EQUAL
12743: IFTRUE 12747
12745: GO 12773
12747: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12748: LD_ADDR_VAR 0 3
12752: PUSH
12753: LD_INT 21
12755: PUSH
12756: LD_INT 22
12758: PUSH
12759: LD_INT 23
12761: PUSH
12762: LD_INT 24
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: ST_TO_ADDR
12771: GO 12988
12773: LD_INT 45
12775: DOUBLE
12776: EQUAL
12777: IFTRUE 12781
12779: GO 12807
12781: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12782: LD_ADDR_VAR 0 3
12786: PUSH
12787: LD_INT 21
12789: PUSH
12790: LD_INT 22
12792: PUSH
12793: LD_INT 23
12795: PUSH
12796: LD_INT 24
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: ST_TO_ADDR
12805: GO 12988
12807: LD_INT 49
12809: DOUBLE
12810: EQUAL
12811: IFTRUE 12815
12813: GO 12841
12815: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12816: LD_ADDR_VAR 0 3
12820: PUSH
12821: LD_INT 21
12823: PUSH
12824: LD_INT 22
12826: PUSH
12827: LD_INT 23
12829: PUSH
12830: LD_INT 24
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: ST_TO_ADDR
12839: GO 12988
12841: LD_INT 51
12843: DOUBLE
12844: EQUAL
12845: IFTRUE 12849
12847: GO 12875
12849: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12850: LD_ADDR_VAR 0 3
12854: PUSH
12855: LD_INT 21
12857: PUSH
12858: LD_INT 22
12860: PUSH
12861: LD_INT 23
12863: PUSH
12864: LD_INT 24
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: ST_TO_ADDR
12873: GO 12988
12875: LD_INT 52
12877: DOUBLE
12878: EQUAL
12879: IFTRUE 12883
12881: GO 12909
12883: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12884: LD_ADDR_VAR 0 3
12888: PUSH
12889: LD_INT 21
12891: PUSH
12892: LD_INT 22
12894: PUSH
12895: LD_INT 23
12897: PUSH
12898: LD_INT 24
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: ST_TO_ADDR
12907: GO 12988
12909: LD_INT 53
12911: DOUBLE
12912: EQUAL
12913: IFTRUE 12917
12915: GO 12935
12917: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: LD_INT 23
12925: PUSH
12926: LD_INT 24
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: ST_TO_ADDR
12933: GO 12988
12935: LD_INT 46
12937: DOUBLE
12938: EQUAL
12939: IFTRUE 12943
12941: GO 12961
12943: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12944: LD_ADDR_VAR 0 3
12948: PUSH
12949: LD_INT 23
12951: PUSH
12952: LD_INT 24
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: ST_TO_ADDR
12959: GO 12988
12961: LD_INT 47
12963: DOUBLE
12964: EQUAL
12965: IFTRUE 12969
12967: GO 12987
12969: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12970: LD_ADDR_VAR 0 3
12974: PUSH
12975: LD_INT 23
12977: PUSH
12978: LD_INT 24
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: ST_TO_ADDR
12985: GO 12988
12987: POP
// result := ( chassis in result ) ;
12988: LD_ADDR_VAR 0 3
12992: PUSH
12993: LD_VAR 0 1
12997: PUSH
12998: LD_VAR 0 3
13002: IN
13003: ST_TO_ADDR
// end ;
13004: LD_VAR 0 3
13008: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13009: LD_INT 0
13011: PPUSH
13012: PPUSH
13013: PPUSH
13014: PPUSH
13015: PPUSH
13016: PPUSH
13017: PPUSH
// result := array ;
13018: LD_ADDR_VAR 0 5
13022: PUSH
13023: LD_VAR 0 1
13027: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13028: LD_VAR 0 1
13032: NOT
13033: PUSH
13034: LD_VAR 0 2
13038: NOT
13039: OR
13040: PUSH
13041: LD_VAR 0 3
13045: NOT
13046: OR
13047: PUSH
13048: LD_VAR 0 2
13052: PUSH
13053: LD_VAR 0 1
13057: GREATER
13058: OR
13059: PUSH
13060: LD_VAR 0 3
13064: PUSH
13065: LD_VAR 0 1
13069: GREATER
13070: OR
13071: IFFALSE 13075
// exit ;
13073: GO 13371
// if direction then
13075: LD_VAR 0 4
13079: IFFALSE 13143
// begin d := 1 ;
13081: LD_ADDR_VAR 0 9
13085: PUSH
13086: LD_INT 1
13088: ST_TO_ADDR
// if i_from > i_to then
13089: LD_VAR 0 2
13093: PUSH
13094: LD_VAR 0 3
13098: GREATER
13099: IFFALSE 13125
// length := ( array - i_from ) + i_to else
13101: LD_ADDR_VAR 0 11
13105: PUSH
13106: LD_VAR 0 1
13110: PUSH
13111: LD_VAR 0 2
13115: MINUS
13116: PUSH
13117: LD_VAR 0 3
13121: PLUS
13122: ST_TO_ADDR
13123: GO 13141
// length := i_to - i_from ;
13125: LD_ADDR_VAR 0 11
13129: PUSH
13130: LD_VAR 0 3
13134: PUSH
13135: LD_VAR 0 2
13139: MINUS
13140: ST_TO_ADDR
// end else
13141: GO 13204
// begin d := - 1 ;
13143: LD_ADDR_VAR 0 9
13147: PUSH
13148: LD_INT 1
13150: NEG
13151: ST_TO_ADDR
// if i_from > i_to then
13152: LD_VAR 0 2
13156: PUSH
13157: LD_VAR 0 3
13161: GREATER
13162: IFFALSE 13182
// length := i_from - i_to else
13164: LD_ADDR_VAR 0 11
13168: PUSH
13169: LD_VAR 0 2
13173: PUSH
13174: LD_VAR 0 3
13178: MINUS
13179: ST_TO_ADDR
13180: GO 13204
// length := ( array - i_to ) + i_from ;
13182: LD_ADDR_VAR 0 11
13186: PUSH
13187: LD_VAR 0 1
13191: PUSH
13192: LD_VAR 0 3
13196: MINUS
13197: PUSH
13198: LD_VAR 0 2
13202: PLUS
13203: ST_TO_ADDR
// end ; if not length then
13204: LD_VAR 0 11
13208: NOT
13209: IFFALSE 13213
// exit ;
13211: GO 13371
// tmp := array ;
13213: LD_ADDR_VAR 0 10
13217: PUSH
13218: LD_VAR 0 1
13222: ST_TO_ADDR
// for i = 1 to length do
13223: LD_ADDR_VAR 0 6
13227: PUSH
13228: DOUBLE
13229: LD_INT 1
13231: DEC
13232: ST_TO_ADDR
13233: LD_VAR 0 11
13237: PUSH
13238: FOR_TO
13239: IFFALSE 13359
// begin for j = 1 to array do
13241: LD_ADDR_VAR 0 7
13245: PUSH
13246: DOUBLE
13247: LD_INT 1
13249: DEC
13250: ST_TO_ADDR
13251: LD_VAR 0 1
13255: PUSH
13256: FOR_TO
13257: IFFALSE 13345
// begin k := j + d ;
13259: LD_ADDR_VAR 0 8
13263: PUSH
13264: LD_VAR 0 7
13268: PUSH
13269: LD_VAR 0 9
13273: PLUS
13274: ST_TO_ADDR
// if k > array then
13275: LD_VAR 0 8
13279: PUSH
13280: LD_VAR 0 1
13284: GREATER
13285: IFFALSE 13295
// k := 1 ;
13287: LD_ADDR_VAR 0 8
13291: PUSH
13292: LD_INT 1
13294: ST_TO_ADDR
// if not k then
13295: LD_VAR 0 8
13299: NOT
13300: IFFALSE 13312
// k := array ;
13302: LD_ADDR_VAR 0 8
13306: PUSH
13307: LD_VAR 0 1
13311: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13312: LD_ADDR_VAR 0 10
13316: PUSH
13317: LD_VAR 0 10
13321: PPUSH
13322: LD_VAR 0 8
13326: PPUSH
13327: LD_VAR 0 1
13331: PUSH
13332: LD_VAR 0 7
13336: ARRAY
13337: PPUSH
13338: CALL_OW 1
13342: ST_TO_ADDR
// end ;
13343: GO 13256
13345: POP
13346: POP
// array := tmp ;
13347: LD_ADDR_VAR 0 1
13351: PUSH
13352: LD_VAR 0 10
13356: ST_TO_ADDR
// end ;
13357: GO 13238
13359: POP
13360: POP
// result := array ;
13361: LD_ADDR_VAR 0 5
13365: PUSH
13366: LD_VAR 0 1
13370: ST_TO_ADDR
// end ;
13371: LD_VAR 0 5
13375: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13376: LD_INT 0
13378: PPUSH
13379: PPUSH
// result := 0 ;
13380: LD_ADDR_VAR 0 3
13384: PUSH
13385: LD_INT 0
13387: ST_TO_ADDR
// if not array or not value in array then
13388: LD_VAR 0 1
13392: NOT
13393: PUSH
13394: LD_VAR 0 2
13398: PUSH
13399: LD_VAR 0 1
13403: IN
13404: NOT
13405: OR
13406: IFFALSE 13410
// exit ;
13408: GO 13464
// for i = 1 to array do
13410: LD_ADDR_VAR 0 4
13414: PUSH
13415: DOUBLE
13416: LD_INT 1
13418: DEC
13419: ST_TO_ADDR
13420: LD_VAR 0 1
13424: PUSH
13425: FOR_TO
13426: IFFALSE 13462
// if value = array [ i ] then
13428: LD_VAR 0 2
13432: PUSH
13433: LD_VAR 0 1
13437: PUSH
13438: LD_VAR 0 4
13442: ARRAY
13443: EQUAL
13444: IFFALSE 13460
// begin result := i ;
13446: LD_ADDR_VAR 0 3
13450: PUSH
13451: LD_VAR 0 4
13455: ST_TO_ADDR
// exit ;
13456: POP
13457: POP
13458: GO 13464
// end ;
13460: GO 13425
13462: POP
13463: POP
// end ;
13464: LD_VAR 0 3
13468: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13469: LD_INT 0
13471: PPUSH
// vc_chassis := chassis ;
13472: LD_ADDR_OWVAR 37
13476: PUSH
13477: LD_VAR 0 1
13481: ST_TO_ADDR
// vc_engine := engine ;
13482: LD_ADDR_OWVAR 39
13486: PUSH
13487: LD_VAR 0 2
13491: ST_TO_ADDR
// vc_control := control ;
13492: LD_ADDR_OWVAR 38
13496: PUSH
13497: LD_VAR 0 3
13501: ST_TO_ADDR
// vc_weapon := weapon ;
13502: LD_ADDR_OWVAR 40
13506: PUSH
13507: LD_VAR 0 4
13511: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13512: LD_ADDR_OWVAR 41
13516: PUSH
13517: LD_VAR 0 5
13521: ST_TO_ADDR
// end ;
13522: LD_VAR 0 6
13526: RET
// export function WantPlant ( unit ) ; var task ; begin
13527: LD_INT 0
13529: PPUSH
13530: PPUSH
// result := false ;
13531: LD_ADDR_VAR 0 2
13535: PUSH
13536: LD_INT 0
13538: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13539: LD_ADDR_VAR 0 3
13543: PUSH
13544: LD_VAR 0 1
13548: PPUSH
13549: CALL_OW 437
13553: ST_TO_ADDR
// if task then
13554: LD_VAR 0 3
13558: IFFALSE 13586
// if task [ 1 ] [ 1 ] = p then
13560: LD_VAR 0 3
13564: PUSH
13565: LD_INT 1
13567: ARRAY
13568: PUSH
13569: LD_INT 1
13571: ARRAY
13572: PUSH
13573: LD_STRING p
13575: EQUAL
13576: IFFALSE 13586
// result := true ;
13578: LD_ADDR_VAR 0 2
13582: PUSH
13583: LD_INT 1
13585: ST_TO_ADDR
// end ;
13586: LD_VAR 0 2
13590: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13591: LD_INT 0
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
// if pos < 1 then
13597: LD_VAR 0 2
13601: PUSH
13602: LD_INT 1
13604: LESS
13605: IFFALSE 13609
// exit ;
13607: GO 13912
// if pos = 1 then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_INT 1
13616: EQUAL
13617: IFFALSE 13650
// result := Replace ( arr , pos [ 1 ] , value ) else
13619: LD_ADDR_VAR 0 4
13623: PUSH
13624: LD_VAR 0 1
13628: PPUSH
13629: LD_VAR 0 2
13633: PUSH
13634: LD_INT 1
13636: ARRAY
13637: PPUSH
13638: LD_VAR 0 3
13642: PPUSH
13643: CALL_OW 1
13647: ST_TO_ADDR
13648: GO 13912
// begin tmp := arr ;
13650: LD_ADDR_VAR 0 6
13654: PUSH
13655: LD_VAR 0 1
13659: ST_TO_ADDR
// s_arr := [ tmp ] ;
13660: LD_ADDR_VAR 0 7
13664: PUSH
13665: LD_VAR 0 6
13669: PUSH
13670: EMPTY
13671: LIST
13672: ST_TO_ADDR
// for i = 1 to pos - 1 do
13673: LD_ADDR_VAR 0 5
13677: PUSH
13678: DOUBLE
13679: LD_INT 1
13681: DEC
13682: ST_TO_ADDR
13683: LD_VAR 0 2
13687: PUSH
13688: LD_INT 1
13690: MINUS
13691: PUSH
13692: FOR_TO
13693: IFFALSE 13738
// begin tmp := tmp [ pos [ i ] ] ;
13695: LD_ADDR_VAR 0 6
13699: PUSH
13700: LD_VAR 0 6
13704: PUSH
13705: LD_VAR 0 2
13709: PUSH
13710: LD_VAR 0 5
13714: ARRAY
13715: ARRAY
13716: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13717: LD_ADDR_VAR 0 7
13721: PUSH
13722: LD_VAR 0 7
13726: PUSH
13727: LD_VAR 0 6
13731: PUSH
13732: EMPTY
13733: LIST
13734: ADD
13735: ST_TO_ADDR
// end ;
13736: GO 13692
13738: POP
13739: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13740: LD_ADDR_VAR 0 6
13744: PUSH
13745: LD_VAR 0 6
13749: PPUSH
13750: LD_VAR 0 2
13754: PUSH
13755: LD_VAR 0 2
13759: ARRAY
13760: PPUSH
13761: LD_VAR 0 3
13765: PPUSH
13766: CALL_OW 1
13770: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13771: LD_ADDR_VAR 0 7
13775: PUSH
13776: LD_VAR 0 7
13780: PPUSH
13781: LD_VAR 0 7
13785: PPUSH
13786: LD_VAR 0 6
13790: PPUSH
13791: CALL_OW 1
13795: ST_TO_ADDR
// for i = s_arr downto 2 do
13796: LD_ADDR_VAR 0 5
13800: PUSH
13801: DOUBLE
13802: LD_VAR 0 7
13806: INC
13807: ST_TO_ADDR
13808: LD_INT 2
13810: PUSH
13811: FOR_DOWNTO
13812: IFFALSE 13896
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13814: LD_ADDR_VAR 0 6
13818: PUSH
13819: LD_VAR 0 7
13823: PUSH
13824: LD_VAR 0 5
13828: PUSH
13829: LD_INT 1
13831: MINUS
13832: ARRAY
13833: PPUSH
13834: LD_VAR 0 2
13838: PUSH
13839: LD_VAR 0 5
13843: PUSH
13844: LD_INT 1
13846: MINUS
13847: ARRAY
13848: PPUSH
13849: LD_VAR 0 7
13853: PUSH
13854: LD_VAR 0 5
13858: ARRAY
13859: PPUSH
13860: CALL_OW 1
13864: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13865: LD_ADDR_VAR 0 7
13869: PUSH
13870: LD_VAR 0 7
13874: PPUSH
13875: LD_VAR 0 5
13879: PUSH
13880: LD_INT 1
13882: MINUS
13883: PPUSH
13884: LD_VAR 0 6
13888: PPUSH
13889: CALL_OW 1
13893: ST_TO_ADDR
// end ;
13894: GO 13811
13896: POP
13897: POP
// result := s_arr [ 1 ] ;
13898: LD_ADDR_VAR 0 4
13902: PUSH
13903: LD_VAR 0 7
13907: PUSH
13908: LD_INT 1
13910: ARRAY
13911: ST_TO_ADDR
// end ; end ;
13912: LD_VAR 0 4
13916: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13917: LD_INT 0
13919: PPUSH
13920: PPUSH
// if not list then
13921: LD_VAR 0 1
13925: NOT
13926: IFFALSE 13930
// exit ;
13928: GO 14021
// i := list [ pos1 ] ;
13930: LD_ADDR_VAR 0 5
13934: PUSH
13935: LD_VAR 0 1
13939: PUSH
13940: LD_VAR 0 2
13944: ARRAY
13945: ST_TO_ADDR
// if not i then
13946: LD_VAR 0 5
13950: NOT
13951: IFFALSE 13955
// exit ;
13953: GO 14021
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13955: LD_ADDR_VAR 0 1
13959: PUSH
13960: LD_VAR 0 1
13964: PPUSH
13965: LD_VAR 0 2
13969: PPUSH
13970: LD_VAR 0 1
13974: PUSH
13975: LD_VAR 0 3
13979: ARRAY
13980: PPUSH
13981: CALL_OW 1
13985: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13986: LD_ADDR_VAR 0 1
13990: PUSH
13991: LD_VAR 0 1
13995: PPUSH
13996: LD_VAR 0 3
14000: PPUSH
14001: LD_VAR 0 5
14005: PPUSH
14006: CALL_OW 1
14010: ST_TO_ADDR
// result := list ;
14011: LD_ADDR_VAR 0 4
14015: PUSH
14016: LD_VAR 0 1
14020: ST_TO_ADDR
// end ;
14021: LD_VAR 0 4
14025: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14026: LD_INT 0
14028: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14029: LD_ADDR_VAR 0 5
14033: PUSH
14034: LD_VAR 0 1
14038: PPUSH
14039: CALL_OW 250
14043: PPUSH
14044: LD_VAR 0 1
14048: PPUSH
14049: CALL_OW 251
14053: PPUSH
14054: LD_VAR 0 2
14058: PPUSH
14059: LD_VAR 0 3
14063: PPUSH
14064: LD_VAR 0 4
14068: PPUSH
14069: CALL 14447 0 5
14073: ST_TO_ADDR
// end ;
14074: LD_VAR 0 5
14078: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14079: LD_INT 0
14081: PPUSH
14082: PPUSH
14083: PPUSH
14084: PPUSH
// if not list or not unit then
14085: LD_VAR 0 2
14089: NOT
14090: PUSH
14091: LD_VAR 0 1
14095: NOT
14096: OR
14097: IFFALSE 14101
// exit ;
14099: GO 14442
// result := [ ] ;
14101: LD_ADDR_VAR 0 5
14105: PUSH
14106: EMPTY
14107: ST_TO_ADDR
// for i in list do
14108: LD_ADDR_VAR 0 6
14112: PUSH
14113: LD_VAR 0 2
14117: PUSH
14118: FOR_IN
14119: IFFALSE 14337
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14121: LD_ADDR_VAR 0 8
14125: PUSH
14126: LD_VAR 0 1
14130: PPUSH
14131: LD_VAR 0 6
14135: PUSH
14136: LD_INT 1
14138: ARRAY
14139: PPUSH
14140: LD_VAR 0 6
14144: PUSH
14145: LD_INT 2
14147: ARRAY
14148: PPUSH
14149: CALL_OW 297
14153: ST_TO_ADDR
// if not Count ( result ) then
14154: LD_VAR 0 5
14158: PPUSH
14159: CALL 10731 0 1
14163: NOT
14164: IFFALSE 14197
// begin result := Join ( result , [ i , tmp ] ) ;
14166: LD_ADDR_VAR 0 5
14170: PUSH
14171: LD_VAR 0 5
14175: PPUSH
14176: LD_VAR 0 6
14180: PUSH
14181: LD_VAR 0 8
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PPUSH
14190: CALL 46331 0 2
14194: ST_TO_ADDR
// continue ;
14195: GO 14118
// end ; if result [ result ] [ 2 ] <= tmp then
14197: LD_VAR 0 5
14201: PUSH
14202: LD_VAR 0 5
14206: ARRAY
14207: PUSH
14208: LD_INT 2
14210: ARRAY
14211: PUSH
14212: LD_VAR 0 8
14216: LESSEQUAL
14217: IFFALSE 14250
// result := Join ( result , [ i , tmp ] ) else
14219: LD_ADDR_VAR 0 5
14223: PUSH
14224: LD_VAR 0 5
14228: PPUSH
14229: LD_VAR 0 6
14233: PUSH
14234: LD_VAR 0 8
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PPUSH
14243: CALL 46331 0 2
14247: ST_TO_ADDR
14248: GO 14335
// begin for j := 1 to Count ( result ) do
14250: LD_ADDR_VAR 0 7
14254: PUSH
14255: DOUBLE
14256: LD_INT 1
14258: DEC
14259: ST_TO_ADDR
14260: LD_VAR 0 5
14264: PPUSH
14265: CALL 10731 0 1
14269: PUSH
14270: FOR_TO
14271: IFFALSE 14333
// begin if tmp < result [ j ] [ 2 ] then
14273: LD_VAR 0 8
14277: PUSH
14278: LD_VAR 0 5
14282: PUSH
14283: LD_VAR 0 7
14287: ARRAY
14288: PUSH
14289: LD_INT 2
14291: ARRAY
14292: LESS
14293: IFFALSE 14331
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14295: LD_ADDR_VAR 0 5
14299: PUSH
14300: LD_VAR 0 5
14304: PPUSH
14305: LD_VAR 0 7
14309: PPUSH
14310: LD_VAR 0 6
14314: PUSH
14315: LD_VAR 0 8
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PPUSH
14324: CALL_OW 2
14328: ST_TO_ADDR
// break ;
14329: GO 14333
// end ; end ;
14331: GO 14270
14333: POP
14334: POP
// end ; end ;
14335: GO 14118
14337: POP
14338: POP
// if result and not asc then
14339: LD_VAR 0 5
14343: PUSH
14344: LD_VAR 0 3
14348: NOT
14349: AND
14350: IFFALSE 14367
// result := ReverseArray ( result ) ;
14352: LD_ADDR_VAR 0 5
14356: PUSH
14357: LD_VAR 0 5
14361: PPUSH
14362: CALL 41607 0 1
14366: ST_TO_ADDR
// tmp := [ ] ;
14367: LD_ADDR_VAR 0 8
14371: PUSH
14372: EMPTY
14373: ST_TO_ADDR
// if mode then
14374: LD_VAR 0 4
14378: IFFALSE 14442
// begin for i := 1 to result do
14380: LD_ADDR_VAR 0 6
14384: PUSH
14385: DOUBLE
14386: LD_INT 1
14388: DEC
14389: ST_TO_ADDR
14390: LD_VAR 0 5
14394: PUSH
14395: FOR_TO
14396: IFFALSE 14430
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
14398: LD_ADDR_VAR 0 8
14402: PUSH
14403: LD_VAR 0 8
14407: PPUSH
14408: LD_VAR 0 5
14412: PUSH
14413: LD_VAR 0 6
14417: ARRAY
14418: PUSH
14419: LD_INT 1
14421: ARRAY
14422: PPUSH
14423: CALL 46331 0 2
14427: ST_TO_ADDR
14428: GO 14395
14430: POP
14431: POP
// result := tmp ;
14432: LD_ADDR_VAR 0 5
14436: PUSH
14437: LD_VAR 0 8
14441: ST_TO_ADDR
// end ; end ;
14442: LD_VAR 0 5
14446: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14447: LD_INT 0
14449: PPUSH
14450: PPUSH
14451: PPUSH
14452: PPUSH
// if not list then
14453: LD_VAR 0 3
14457: NOT
14458: IFFALSE 14462
// exit ;
14460: GO 14850
// result := [ ] ;
14462: LD_ADDR_VAR 0 6
14466: PUSH
14467: EMPTY
14468: ST_TO_ADDR
// for i in list do
14469: LD_ADDR_VAR 0 7
14473: PUSH
14474: LD_VAR 0 3
14478: PUSH
14479: FOR_IN
14480: IFFALSE 14682
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14482: LD_ADDR_VAR 0 9
14486: PUSH
14487: LD_VAR 0 7
14491: PPUSH
14492: LD_VAR 0 1
14496: PPUSH
14497: LD_VAR 0 2
14501: PPUSH
14502: CALL_OW 297
14506: ST_TO_ADDR
// if not result then
14507: LD_VAR 0 6
14511: NOT
14512: IFFALSE 14538
// result := [ [ i , tmp ] ] else
14514: LD_ADDR_VAR 0 6
14518: PUSH
14519: LD_VAR 0 7
14523: PUSH
14524: LD_VAR 0 9
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: EMPTY
14534: LIST
14535: ST_TO_ADDR
14536: GO 14680
// begin if result [ result ] [ 2 ] < tmp then
14538: LD_VAR 0 6
14542: PUSH
14543: LD_VAR 0 6
14547: ARRAY
14548: PUSH
14549: LD_INT 2
14551: ARRAY
14552: PUSH
14553: LD_VAR 0 9
14557: LESS
14558: IFFALSE 14600
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14560: LD_ADDR_VAR 0 6
14564: PUSH
14565: LD_VAR 0 6
14569: PPUSH
14570: LD_VAR 0 6
14574: PUSH
14575: LD_INT 1
14577: PLUS
14578: PPUSH
14579: LD_VAR 0 7
14583: PUSH
14584: LD_VAR 0 9
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: PPUSH
14593: CALL_OW 2
14597: ST_TO_ADDR
14598: GO 14680
// for j = 1 to result do
14600: LD_ADDR_VAR 0 8
14604: PUSH
14605: DOUBLE
14606: LD_INT 1
14608: DEC
14609: ST_TO_ADDR
14610: LD_VAR 0 6
14614: PUSH
14615: FOR_TO
14616: IFFALSE 14678
// begin if tmp < result [ j ] [ 2 ] then
14618: LD_VAR 0 9
14622: PUSH
14623: LD_VAR 0 6
14627: PUSH
14628: LD_VAR 0 8
14632: ARRAY
14633: PUSH
14634: LD_INT 2
14636: ARRAY
14637: LESS
14638: IFFALSE 14676
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14640: LD_ADDR_VAR 0 6
14644: PUSH
14645: LD_VAR 0 6
14649: PPUSH
14650: LD_VAR 0 8
14654: PPUSH
14655: LD_VAR 0 7
14659: PUSH
14660: LD_VAR 0 9
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PPUSH
14669: CALL_OW 2
14673: ST_TO_ADDR
// break ;
14674: GO 14678
// end ; end ;
14676: GO 14615
14678: POP
14679: POP
// end ; end ;
14680: GO 14479
14682: POP
14683: POP
// if result and not asc then
14684: LD_VAR 0 6
14688: PUSH
14689: LD_VAR 0 4
14693: NOT
14694: AND
14695: IFFALSE 14770
// begin tmp := result ;
14697: LD_ADDR_VAR 0 9
14701: PUSH
14702: LD_VAR 0 6
14706: ST_TO_ADDR
// for i = tmp downto 1 do
14707: LD_ADDR_VAR 0 7
14711: PUSH
14712: DOUBLE
14713: LD_VAR 0 9
14717: INC
14718: ST_TO_ADDR
14719: LD_INT 1
14721: PUSH
14722: FOR_DOWNTO
14723: IFFALSE 14768
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14725: LD_ADDR_VAR 0 6
14729: PUSH
14730: LD_VAR 0 6
14734: PPUSH
14735: LD_VAR 0 9
14739: PUSH
14740: LD_VAR 0 7
14744: MINUS
14745: PUSH
14746: LD_INT 1
14748: PLUS
14749: PPUSH
14750: LD_VAR 0 9
14754: PUSH
14755: LD_VAR 0 7
14759: ARRAY
14760: PPUSH
14761: CALL_OW 1
14765: ST_TO_ADDR
14766: GO 14722
14768: POP
14769: POP
// end ; tmp := [ ] ;
14770: LD_ADDR_VAR 0 9
14774: PUSH
14775: EMPTY
14776: ST_TO_ADDR
// if mode then
14777: LD_VAR 0 5
14781: IFFALSE 14850
// begin for i = 1 to result do
14783: LD_ADDR_VAR 0 7
14787: PUSH
14788: DOUBLE
14789: LD_INT 1
14791: DEC
14792: ST_TO_ADDR
14793: LD_VAR 0 6
14797: PUSH
14798: FOR_TO
14799: IFFALSE 14838
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
14801: LD_ADDR_VAR 0 9
14805: PUSH
14806: LD_VAR 0 9
14810: PPUSH
14811: LD_VAR 0 7
14815: PPUSH
14816: LD_VAR 0 6
14820: PUSH
14821: LD_VAR 0 7
14825: ARRAY
14826: PUSH
14827: LD_INT 1
14829: ARRAY
14830: PPUSH
14831: CALL_OW 1
14835: ST_TO_ADDR
14836: GO 14798
14838: POP
14839: POP
// result := tmp ;
14840: LD_ADDR_VAR 0 6
14844: PUSH
14845: LD_VAR 0 9
14849: ST_TO_ADDR
// end ; end ;
14850: LD_VAR 0 6
14854: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
14855: LD_INT 0
14857: PPUSH
14858: PPUSH
14859: PPUSH
14860: PPUSH
14861: PPUSH
14862: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
14863: LD_ADDR_VAR 0 5
14867: PUSH
14868: LD_INT 0
14870: PUSH
14871: LD_INT 0
14873: PUSH
14874: LD_INT 0
14876: PUSH
14877: EMPTY
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: ST_TO_ADDR
// if not x or not y then
14885: LD_VAR 0 2
14889: NOT
14890: PUSH
14891: LD_VAR 0 3
14895: NOT
14896: OR
14897: IFFALSE 14901
// exit ;
14899: GO 16551
// if not range then
14901: LD_VAR 0 4
14905: NOT
14906: IFFALSE 14916
// range := 10 ;
14908: LD_ADDR_VAR 0 4
14912: PUSH
14913: LD_INT 10
14915: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14916: LD_ADDR_VAR 0 8
14920: PUSH
14921: LD_INT 81
14923: PUSH
14924: LD_VAR 0 1
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 92
14935: PUSH
14936: LD_VAR 0 2
14940: PUSH
14941: LD_VAR 0 3
14945: PUSH
14946: LD_VAR 0 4
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 3
14959: PUSH
14960: LD_INT 21
14962: PUSH
14963: LD_INT 3
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: PPUSH
14979: CALL_OW 69
14983: ST_TO_ADDR
// if not tmp then
14984: LD_VAR 0 8
14988: NOT
14989: IFFALSE 14993
// exit ;
14991: GO 16551
// for i in tmp do
14993: LD_ADDR_VAR 0 6
14997: PUSH
14998: LD_VAR 0 8
15002: PUSH
15003: FOR_IN
15004: IFFALSE 16526
// begin points := [ 0 , 0 , 0 ] ;
15006: LD_ADDR_VAR 0 9
15010: PUSH
15011: LD_INT 0
15013: PUSH
15014: LD_INT 0
15016: PUSH
15017: LD_INT 0
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: LIST
15024: ST_TO_ADDR
// bpoints := 1 ;
15025: LD_ADDR_VAR 0 10
15029: PUSH
15030: LD_INT 1
15032: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15033: LD_VAR 0 6
15037: PPUSH
15038: CALL_OW 247
15042: PUSH
15043: LD_INT 1
15045: DOUBLE
15046: EQUAL
15047: IFTRUE 15051
15049: GO 15629
15051: POP
// begin if GetClass ( i ) = 1 then
15052: LD_VAR 0 6
15056: PPUSH
15057: CALL_OW 257
15061: PUSH
15062: LD_INT 1
15064: EQUAL
15065: IFFALSE 15086
// points := [ 10 , 5 , 3 ] ;
15067: LD_ADDR_VAR 0 9
15071: PUSH
15072: LD_INT 10
15074: PUSH
15075: LD_INT 5
15077: PUSH
15078: LD_INT 3
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: LIST
15085: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15086: LD_VAR 0 6
15090: PPUSH
15091: CALL_OW 257
15095: PUSH
15096: LD_INT 2
15098: PUSH
15099: LD_INT 3
15101: PUSH
15102: LD_INT 4
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: LIST
15109: IN
15110: IFFALSE 15131
// points := [ 3 , 2 , 1 ] ;
15112: LD_ADDR_VAR 0 9
15116: PUSH
15117: LD_INT 3
15119: PUSH
15120: LD_INT 2
15122: PUSH
15123: LD_INT 1
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: LIST
15130: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15131: LD_VAR 0 6
15135: PPUSH
15136: CALL_OW 257
15140: PUSH
15141: LD_INT 5
15143: EQUAL
15144: IFFALSE 15165
// points := [ 130 , 5 , 2 ] ;
15146: LD_ADDR_VAR 0 9
15150: PUSH
15151: LD_INT 130
15153: PUSH
15154: LD_INT 5
15156: PUSH
15157: LD_INT 2
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: LIST
15164: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15165: LD_VAR 0 6
15169: PPUSH
15170: CALL_OW 257
15174: PUSH
15175: LD_INT 8
15177: EQUAL
15178: IFFALSE 15199
// points := [ 35 , 35 , 30 ] ;
15180: LD_ADDR_VAR 0 9
15184: PUSH
15185: LD_INT 35
15187: PUSH
15188: LD_INT 35
15190: PUSH
15191: LD_INT 30
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: LIST
15198: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15199: LD_VAR 0 6
15203: PPUSH
15204: CALL_OW 257
15208: PUSH
15209: LD_INT 9
15211: EQUAL
15212: IFFALSE 15233
// points := [ 20 , 55 , 40 ] ;
15214: LD_ADDR_VAR 0 9
15218: PUSH
15219: LD_INT 20
15221: PUSH
15222: LD_INT 55
15224: PUSH
15225: LD_INT 40
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: LIST
15232: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15233: LD_VAR 0 6
15237: PPUSH
15238: CALL_OW 257
15242: PUSH
15243: LD_INT 12
15245: PUSH
15246: LD_INT 16
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: IN
15253: IFFALSE 15274
// points := [ 5 , 3 , 2 ] ;
15255: LD_ADDR_VAR 0 9
15259: PUSH
15260: LD_INT 5
15262: PUSH
15263: LD_INT 3
15265: PUSH
15266: LD_INT 2
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: LIST
15273: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15274: LD_VAR 0 6
15278: PPUSH
15279: CALL_OW 257
15283: PUSH
15284: LD_INT 17
15286: EQUAL
15287: IFFALSE 15308
// points := [ 100 , 50 , 75 ] ;
15289: LD_ADDR_VAR 0 9
15293: PUSH
15294: LD_INT 100
15296: PUSH
15297: LD_INT 50
15299: PUSH
15300: LD_INT 75
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: LIST
15307: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15308: LD_VAR 0 6
15312: PPUSH
15313: CALL_OW 257
15317: PUSH
15318: LD_INT 15
15320: EQUAL
15321: IFFALSE 15342
// points := [ 10 , 5 , 3 ] ;
15323: LD_ADDR_VAR 0 9
15327: PUSH
15328: LD_INT 10
15330: PUSH
15331: LD_INT 5
15333: PUSH
15334: LD_INT 3
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: LIST
15341: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15342: LD_VAR 0 6
15346: PPUSH
15347: CALL_OW 257
15351: PUSH
15352: LD_INT 14
15354: EQUAL
15355: IFFALSE 15376
// points := [ 10 , 0 , 0 ] ;
15357: LD_ADDR_VAR 0 9
15361: PUSH
15362: LD_INT 10
15364: PUSH
15365: LD_INT 0
15367: PUSH
15368: LD_INT 0
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: LIST
15375: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15376: LD_VAR 0 6
15380: PPUSH
15381: CALL_OW 257
15385: PUSH
15386: LD_INT 11
15388: EQUAL
15389: IFFALSE 15410
// points := [ 30 , 10 , 5 ] ;
15391: LD_ADDR_VAR 0 9
15395: PUSH
15396: LD_INT 30
15398: PUSH
15399: LD_INT 10
15401: PUSH
15402: LD_INT 5
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: LIST
15409: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15410: LD_VAR 0 1
15414: PPUSH
15415: LD_INT 5
15417: PPUSH
15418: CALL_OW 321
15422: PUSH
15423: LD_INT 2
15425: EQUAL
15426: IFFALSE 15443
// bpoints := bpoints * 1.8 ;
15428: LD_ADDR_VAR 0 10
15432: PUSH
15433: LD_VAR 0 10
15437: PUSH
15438: LD_REAL  1.80000000000000E+0000
15441: MUL
15442: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15443: LD_VAR 0 6
15447: PPUSH
15448: CALL_OW 257
15452: PUSH
15453: LD_INT 1
15455: PUSH
15456: LD_INT 2
15458: PUSH
15459: LD_INT 3
15461: PUSH
15462: LD_INT 4
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: IN
15471: PUSH
15472: LD_VAR 0 1
15476: PPUSH
15477: LD_INT 51
15479: PPUSH
15480: CALL_OW 321
15484: PUSH
15485: LD_INT 2
15487: EQUAL
15488: AND
15489: IFFALSE 15506
// bpoints := bpoints * 1.2 ;
15491: LD_ADDR_VAR 0 10
15495: PUSH
15496: LD_VAR 0 10
15500: PUSH
15501: LD_REAL  1.20000000000000E+0000
15504: MUL
15505: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15506: LD_VAR 0 6
15510: PPUSH
15511: CALL_OW 257
15515: PUSH
15516: LD_INT 5
15518: PUSH
15519: LD_INT 7
15521: PUSH
15522: LD_INT 9
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: LIST
15529: IN
15530: PUSH
15531: LD_VAR 0 1
15535: PPUSH
15536: LD_INT 52
15538: PPUSH
15539: CALL_OW 321
15543: PUSH
15544: LD_INT 2
15546: EQUAL
15547: AND
15548: IFFALSE 15565
// bpoints := bpoints * 1.5 ;
15550: LD_ADDR_VAR 0 10
15554: PUSH
15555: LD_VAR 0 10
15559: PUSH
15560: LD_REAL  1.50000000000000E+0000
15563: MUL
15564: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15565: LD_VAR 0 1
15569: PPUSH
15570: LD_INT 66
15572: PPUSH
15573: CALL_OW 321
15577: PUSH
15578: LD_INT 2
15580: EQUAL
15581: IFFALSE 15598
// bpoints := bpoints * 1.1 ;
15583: LD_ADDR_VAR 0 10
15587: PUSH
15588: LD_VAR 0 10
15592: PUSH
15593: LD_REAL  1.10000000000000E+0000
15596: MUL
15597: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15598: LD_ADDR_VAR 0 10
15602: PUSH
15603: LD_VAR 0 10
15607: PUSH
15608: LD_VAR 0 6
15612: PPUSH
15613: LD_INT 1
15615: PPUSH
15616: CALL_OW 259
15620: PUSH
15621: LD_REAL  1.15000000000000E+0000
15624: MUL
15625: MUL
15626: ST_TO_ADDR
// end ; unit_vehicle :
15627: GO 16455
15629: LD_INT 2
15631: DOUBLE
15632: EQUAL
15633: IFTRUE 15637
15635: GO 16443
15637: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15638: LD_VAR 0 6
15642: PPUSH
15643: CALL_OW 264
15647: PUSH
15648: LD_INT 2
15650: PUSH
15651: LD_INT 42
15653: PUSH
15654: LD_INT 24
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: LIST
15661: IN
15662: IFFALSE 15683
// points := [ 25 , 5 , 3 ] ;
15664: LD_ADDR_VAR 0 9
15668: PUSH
15669: LD_INT 25
15671: PUSH
15672: LD_INT 5
15674: PUSH
15675: LD_INT 3
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: LIST
15682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15683: LD_VAR 0 6
15687: PPUSH
15688: CALL_OW 264
15692: PUSH
15693: LD_INT 4
15695: PUSH
15696: LD_INT 43
15698: PUSH
15699: LD_INT 25
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: IN
15707: IFFALSE 15728
// points := [ 40 , 15 , 5 ] ;
15709: LD_ADDR_VAR 0 9
15713: PUSH
15714: LD_INT 40
15716: PUSH
15717: LD_INT 15
15719: PUSH
15720: LD_INT 5
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15728: LD_VAR 0 6
15732: PPUSH
15733: CALL_OW 264
15737: PUSH
15738: LD_INT 3
15740: PUSH
15741: LD_INT 23
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: IN
15748: IFFALSE 15769
// points := [ 7 , 25 , 8 ] ;
15750: LD_ADDR_VAR 0 9
15754: PUSH
15755: LD_INT 7
15757: PUSH
15758: LD_INT 25
15760: PUSH
15761: LD_INT 8
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: LIST
15768: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
15769: LD_VAR 0 6
15773: PPUSH
15774: CALL_OW 264
15778: PUSH
15779: LD_INT 5
15781: PUSH
15782: LD_INT 27
15784: PUSH
15785: LD_INT 44
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: LIST
15792: IN
15793: IFFALSE 15814
// points := [ 14 , 50 , 16 ] ;
15795: LD_ADDR_VAR 0 9
15799: PUSH
15800: LD_INT 14
15802: PUSH
15803: LD_INT 50
15805: PUSH
15806: LD_INT 16
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: LIST
15813: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
15814: LD_VAR 0 6
15818: PPUSH
15819: CALL_OW 264
15823: PUSH
15824: LD_INT 6
15826: PUSH
15827: LD_INT 46
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: IN
15834: IFFALSE 15855
// points := [ 32 , 120 , 70 ] ;
15836: LD_ADDR_VAR 0 9
15840: PUSH
15841: LD_INT 32
15843: PUSH
15844: LD_INT 120
15846: PUSH
15847: LD_INT 70
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: LIST
15854: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
15855: LD_VAR 0 6
15859: PPUSH
15860: CALL_OW 264
15864: PUSH
15865: LD_INT 7
15867: PUSH
15868: LD_INT 28
15870: PUSH
15871: LD_INT 45
15873: PUSH
15874: LD_INT 92
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: IN
15883: IFFALSE 15904
// points := [ 35 , 20 , 45 ] ;
15885: LD_ADDR_VAR 0 9
15889: PUSH
15890: LD_INT 35
15892: PUSH
15893: LD_INT 20
15895: PUSH
15896: LD_INT 45
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: LIST
15903: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
15904: LD_VAR 0 6
15908: PPUSH
15909: CALL_OW 264
15913: PUSH
15914: LD_INT 47
15916: PUSH
15917: EMPTY
15918: LIST
15919: IN
15920: IFFALSE 15941
// points := [ 67 , 45 , 75 ] ;
15922: LD_ADDR_VAR 0 9
15926: PUSH
15927: LD_INT 67
15929: PUSH
15930: LD_INT 45
15932: PUSH
15933: LD_INT 75
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: LIST
15940: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
15941: LD_VAR 0 6
15945: PPUSH
15946: CALL_OW 264
15950: PUSH
15951: LD_INT 26
15953: PUSH
15954: EMPTY
15955: LIST
15956: IN
15957: IFFALSE 15978
// points := [ 120 , 30 , 80 ] ;
15959: LD_ADDR_VAR 0 9
15963: PUSH
15964: LD_INT 120
15966: PUSH
15967: LD_INT 30
15969: PUSH
15970: LD_INT 80
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: LIST
15977: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15978: LD_VAR 0 6
15982: PPUSH
15983: CALL_OW 264
15987: PUSH
15988: LD_INT 22
15990: PUSH
15991: EMPTY
15992: LIST
15993: IN
15994: IFFALSE 16015
// points := [ 40 , 1 , 1 ] ;
15996: LD_ADDR_VAR 0 9
16000: PUSH
16001: LD_INT 40
16003: PUSH
16004: LD_INT 1
16006: PUSH
16007: LD_INT 1
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: LIST
16014: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16015: LD_VAR 0 6
16019: PPUSH
16020: CALL_OW 264
16024: PUSH
16025: LD_INT 29
16027: PUSH
16028: EMPTY
16029: LIST
16030: IN
16031: IFFALSE 16052
// points := [ 70 , 200 , 400 ] ;
16033: LD_ADDR_VAR 0 9
16037: PUSH
16038: LD_INT 70
16040: PUSH
16041: LD_INT 200
16043: PUSH
16044: LD_INT 400
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: LIST
16051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16052: LD_VAR 0 6
16056: PPUSH
16057: CALL_OW 264
16061: PUSH
16062: LD_INT 14
16064: PUSH
16065: LD_INT 53
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: IN
16072: IFFALSE 16093
// points := [ 40 , 10 , 20 ] ;
16074: LD_ADDR_VAR 0 9
16078: PUSH
16079: LD_INT 40
16081: PUSH
16082: LD_INT 10
16084: PUSH
16085: LD_INT 20
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16093: LD_VAR 0 6
16097: PPUSH
16098: CALL_OW 264
16102: PUSH
16103: LD_INT 9
16105: PUSH
16106: EMPTY
16107: LIST
16108: IN
16109: IFFALSE 16130
// points := [ 5 , 70 , 20 ] ;
16111: LD_ADDR_VAR 0 9
16115: PUSH
16116: LD_INT 5
16118: PUSH
16119: LD_INT 70
16121: PUSH
16122: LD_INT 20
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: LIST
16129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16130: LD_VAR 0 6
16134: PPUSH
16135: CALL_OW 264
16139: PUSH
16140: LD_INT 10
16142: PUSH
16143: EMPTY
16144: LIST
16145: IN
16146: IFFALSE 16167
// points := [ 35 , 110 , 70 ] ;
16148: LD_ADDR_VAR 0 9
16152: PUSH
16153: LD_INT 35
16155: PUSH
16156: LD_INT 110
16158: PUSH
16159: LD_INT 70
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16167: LD_VAR 0 6
16171: PPUSH
16172: CALL_OW 265
16176: PUSH
16177: LD_INT 25
16179: EQUAL
16180: IFFALSE 16201
// points := [ 80 , 65 , 100 ] ;
16182: LD_ADDR_VAR 0 9
16186: PUSH
16187: LD_INT 80
16189: PUSH
16190: LD_INT 65
16192: PUSH
16193: LD_INT 100
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: LIST
16200: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16201: LD_VAR 0 6
16205: PPUSH
16206: CALL_OW 263
16210: PUSH
16211: LD_INT 1
16213: EQUAL
16214: IFFALSE 16249
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16216: LD_ADDR_VAR 0 10
16220: PUSH
16221: LD_VAR 0 10
16225: PUSH
16226: LD_VAR 0 6
16230: PPUSH
16231: CALL_OW 311
16235: PPUSH
16236: LD_INT 3
16238: PPUSH
16239: CALL_OW 259
16243: PUSH
16244: LD_INT 4
16246: MUL
16247: MUL
16248: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16249: LD_VAR 0 6
16253: PPUSH
16254: CALL_OW 263
16258: PUSH
16259: LD_INT 2
16261: EQUAL
16262: IFFALSE 16313
// begin j := IsControledBy ( i ) ;
16264: LD_ADDR_VAR 0 7
16268: PUSH
16269: LD_VAR 0 6
16273: PPUSH
16274: CALL_OW 312
16278: ST_TO_ADDR
// if j then
16279: LD_VAR 0 7
16283: IFFALSE 16313
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16285: LD_ADDR_VAR 0 10
16289: PUSH
16290: LD_VAR 0 10
16294: PUSH
16295: LD_VAR 0 7
16299: PPUSH
16300: LD_INT 3
16302: PPUSH
16303: CALL_OW 259
16307: PUSH
16308: LD_INT 3
16310: MUL
16311: MUL
16312: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16313: LD_VAR 0 6
16317: PPUSH
16318: CALL_OW 264
16322: PUSH
16323: LD_INT 5
16325: PUSH
16326: LD_INT 6
16328: PUSH
16329: LD_INT 46
16331: PUSH
16332: LD_INT 44
16334: PUSH
16335: LD_INT 47
16337: PUSH
16338: LD_INT 45
16340: PUSH
16341: LD_INT 28
16343: PUSH
16344: LD_INT 7
16346: PUSH
16347: LD_INT 27
16349: PUSH
16350: LD_INT 29
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: IN
16365: PUSH
16366: LD_VAR 0 1
16370: PPUSH
16371: LD_INT 52
16373: PPUSH
16374: CALL_OW 321
16378: PUSH
16379: LD_INT 2
16381: EQUAL
16382: AND
16383: IFFALSE 16400
// bpoints := bpoints * 1.2 ;
16385: LD_ADDR_VAR 0 10
16389: PUSH
16390: LD_VAR 0 10
16394: PUSH
16395: LD_REAL  1.20000000000000E+0000
16398: MUL
16399: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16400: LD_VAR 0 6
16404: PPUSH
16405: CALL_OW 264
16409: PUSH
16410: LD_INT 6
16412: PUSH
16413: LD_INT 46
16415: PUSH
16416: LD_INT 47
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: LIST
16423: IN
16424: IFFALSE 16441
// bpoints := bpoints * 1.2 ;
16426: LD_ADDR_VAR 0 10
16430: PUSH
16431: LD_VAR 0 10
16435: PUSH
16436: LD_REAL  1.20000000000000E+0000
16439: MUL
16440: ST_TO_ADDR
// end ; unit_building :
16441: GO 16455
16443: LD_INT 3
16445: DOUBLE
16446: EQUAL
16447: IFTRUE 16451
16449: GO 16454
16451: POP
// ; end ;
16452: GO 16455
16454: POP
// for j = 1 to 3 do
16455: LD_ADDR_VAR 0 7
16459: PUSH
16460: DOUBLE
16461: LD_INT 1
16463: DEC
16464: ST_TO_ADDR
16465: LD_INT 3
16467: PUSH
16468: FOR_TO
16469: IFFALSE 16522
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16471: LD_ADDR_VAR 0 5
16475: PUSH
16476: LD_VAR 0 5
16480: PPUSH
16481: LD_VAR 0 7
16485: PPUSH
16486: LD_VAR 0 5
16490: PUSH
16491: LD_VAR 0 7
16495: ARRAY
16496: PUSH
16497: LD_VAR 0 9
16501: PUSH
16502: LD_VAR 0 7
16506: ARRAY
16507: PUSH
16508: LD_VAR 0 10
16512: MUL
16513: PLUS
16514: PPUSH
16515: CALL_OW 1
16519: ST_TO_ADDR
16520: GO 16468
16522: POP
16523: POP
// end ;
16524: GO 15003
16526: POP
16527: POP
// result := Replace ( result , 4 , tmp ) ;
16528: LD_ADDR_VAR 0 5
16532: PUSH
16533: LD_VAR 0 5
16537: PPUSH
16538: LD_INT 4
16540: PPUSH
16541: LD_VAR 0 8
16545: PPUSH
16546: CALL_OW 1
16550: ST_TO_ADDR
// end ;
16551: LD_VAR 0 5
16555: RET
// export function DangerAtRange ( unit , range ) ; begin
16556: LD_INT 0
16558: PPUSH
// if not unit then
16559: LD_VAR 0 1
16563: NOT
16564: IFFALSE 16568
// exit ;
16566: GO 16613
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16568: LD_ADDR_VAR 0 3
16572: PUSH
16573: LD_VAR 0 1
16577: PPUSH
16578: CALL_OW 255
16582: PPUSH
16583: LD_VAR 0 1
16587: PPUSH
16588: CALL_OW 250
16592: PPUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 251
16602: PPUSH
16603: LD_VAR 0 2
16607: PPUSH
16608: CALL 14855 0 4
16612: ST_TO_ADDR
// end ;
16613: LD_VAR 0 3
16617: RET
// export function DangerInArea ( side , area ) ; begin
16618: LD_INT 0
16620: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16621: LD_ADDR_VAR 0 3
16625: PUSH
16626: LD_VAR 0 2
16630: PPUSH
16631: LD_INT 81
16633: PUSH
16634: LD_VAR 0 1
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PPUSH
16643: CALL_OW 70
16647: ST_TO_ADDR
// end ;
16648: LD_VAR 0 3
16652: RET
// export function IsExtension ( b ) ; begin
16653: LD_INT 0
16655: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16656: LD_ADDR_VAR 0 2
16660: PUSH
16661: LD_VAR 0 1
16665: PUSH
16666: LD_INT 23
16668: PUSH
16669: LD_INT 20
16671: PUSH
16672: LD_INT 22
16674: PUSH
16675: LD_INT 17
16677: PUSH
16678: LD_INT 24
16680: PUSH
16681: LD_INT 21
16683: PUSH
16684: LD_INT 19
16686: PUSH
16687: LD_INT 16
16689: PUSH
16690: LD_INT 25
16692: PUSH
16693: LD_INT 18
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: IN
16708: ST_TO_ADDR
// end ;
16709: LD_VAR 0 2
16713: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
16714: LD_INT 0
16716: PPUSH
16717: PPUSH
16718: PPUSH
// result := [ ] ;
16719: LD_ADDR_VAR 0 4
16723: PUSH
16724: EMPTY
16725: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16726: LD_ADDR_VAR 0 5
16730: PUSH
16731: LD_VAR 0 2
16735: PPUSH
16736: LD_INT 21
16738: PUSH
16739: LD_INT 3
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PPUSH
16746: CALL_OW 70
16750: ST_TO_ADDR
// if not tmp then
16751: LD_VAR 0 5
16755: NOT
16756: IFFALSE 16760
// exit ;
16758: GO 16824
// if checkLink then
16760: LD_VAR 0 3
16764: IFFALSE 16814
// begin for i in tmp do
16766: LD_ADDR_VAR 0 6
16770: PUSH
16771: LD_VAR 0 5
16775: PUSH
16776: FOR_IN
16777: IFFALSE 16812
// if GetBase ( i ) <> base then
16779: LD_VAR 0 6
16783: PPUSH
16784: CALL_OW 274
16788: PUSH
16789: LD_VAR 0 1
16793: NONEQUAL
16794: IFFALSE 16810
// ComLinkToBase ( base , i ) ;
16796: LD_VAR 0 1
16800: PPUSH
16801: LD_VAR 0 6
16805: PPUSH
16806: CALL_OW 169
16810: GO 16776
16812: POP
16813: POP
// end ; result := tmp ;
16814: LD_ADDR_VAR 0 4
16818: PUSH
16819: LD_VAR 0 5
16823: ST_TO_ADDR
// end ;
16824: LD_VAR 0 4
16828: RET
// export function ComComplete ( units , b ) ; var i ; begin
16829: LD_INT 0
16831: PPUSH
16832: PPUSH
// if not units then
16833: LD_VAR 0 1
16837: NOT
16838: IFFALSE 16842
// exit ;
16840: GO 16932
// for i in units do
16842: LD_ADDR_VAR 0 4
16846: PUSH
16847: LD_VAR 0 1
16851: PUSH
16852: FOR_IN
16853: IFFALSE 16930
// if BuildingStatus ( b ) = bs_build then
16855: LD_VAR 0 2
16859: PPUSH
16860: CALL_OW 461
16864: PUSH
16865: LD_INT 1
16867: EQUAL
16868: IFFALSE 16928
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
16870: LD_VAR 0 4
16874: PPUSH
16875: LD_STRING h
16877: PUSH
16878: LD_VAR 0 2
16882: PPUSH
16883: CALL_OW 250
16887: PUSH
16888: LD_VAR 0 2
16892: PPUSH
16893: CALL_OW 251
16897: PUSH
16898: LD_VAR 0 2
16902: PUSH
16903: LD_INT 0
16905: PUSH
16906: LD_INT 0
16908: PUSH
16909: LD_INT 0
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: PUSH
16921: EMPTY
16922: LIST
16923: PPUSH
16924: CALL_OW 446
16928: GO 16852
16930: POP
16931: POP
// end ;
16932: LD_VAR 0 3
16936: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
16937: LD_INT 0
16939: PPUSH
16940: PPUSH
16941: PPUSH
16942: PPUSH
16943: PPUSH
16944: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
16945: LD_VAR 0 1
16949: NOT
16950: PUSH
16951: LD_VAR 0 1
16955: PPUSH
16956: CALL_OW 263
16960: PUSH
16961: LD_INT 2
16963: NONEQUAL
16964: OR
16965: IFFALSE 16969
// exit ;
16967: GO 17285
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16969: LD_ADDR_VAR 0 6
16973: PUSH
16974: LD_INT 22
16976: PUSH
16977: LD_VAR 0 1
16981: PPUSH
16982: CALL_OW 255
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: LD_INT 2
16993: PUSH
16994: LD_INT 30
16996: PUSH
16997: LD_INT 36
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 34
17006: PUSH
17007: LD_INT 31
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: LIST
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PPUSH
17023: CALL_OW 69
17027: ST_TO_ADDR
// if not tmp then
17028: LD_VAR 0 6
17032: NOT
17033: IFFALSE 17037
// exit ;
17035: GO 17285
// result := [ ] ;
17037: LD_ADDR_VAR 0 2
17041: PUSH
17042: EMPTY
17043: ST_TO_ADDR
// for i in tmp do
17044: LD_ADDR_VAR 0 3
17048: PUSH
17049: LD_VAR 0 6
17053: PUSH
17054: FOR_IN
17055: IFFALSE 17126
// begin t := UnitsInside ( i ) ;
17057: LD_ADDR_VAR 0 4
17061: PUSH
17062: LD_VAR 0 3
17066: PPUSH
17067: CALL_OW 313
17071: ST_TO_ADDR
// if t then
17072: LD_VAR 0 4
17076: IFFALSE 17124
// for j in t do
17078: LD_ADDR_VAR 0 7
17082: PUSH
17083: LD_VAR 0 4
17087: PUSH
17088: FOR_IN
17089: IFFALSE 17122
// result := Replace ( result , result + 1 , j ) ;
17091: LD_ADDR_VAR 0 2
17095: PUSH
17096: LD_VAR 0 2
17100: PPUSH
17101: LD_VAR 0 2
17105: PUSH
17106: LD_INT 1
17108: PLUS
17109: PPUSH
17110: LD_VAR 0 7
17114: PPUSH
17115: CALL_OW 1
17119: ST_TO_ADDR
17120: GO 17088
17122: POP
17123: POP
// end ;
17124: GO 17054
17126: POP
17127: POP
// if not result then
17128: LD_VAR 0 2
17132: NOT
17133: IFFALSE 17137
// exit ;
17135: GO 17285
// mech := result [ 1 ] ;
17137: LD_ADDR_VAR 0 5
17141: PUSH
17142: LD_VAR 0 2
17146: PUSH
17147: LD_INT 1
17149: ARRAY
17150: ST_TO_ADDR
// if result > 1 then
17151: LD_VAR 0 2
17155: PUSH
17156: LD_INT 1
17158: GREATER
17159: IFFALSE 17271
// begin for i = 2 to result do
17161: LD_ADDR_VAR 0 3
17165: PUSH
17166: DOUBLE
17167: LD_INT 2
17169: DEC
17170: ST_TO_ADDR
17171: LD_VAR 0 2
17175: PUSH
17176: FOR_TO
17177: IFFALSE 17269
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17179: LD_ADDR_VAR 0 4
17183: PUSH
17184: LD_VAR 0 2
17188: PUSH
17189: LD_VAR 0 3
17193: ARRAY
17194: PPUSH
17195: LD_INT 3
17197: PPUSH
17198: CALL_OW 259
17202: PUSH
17203: LD_VAR 0 2
17207: PUSH
17208: LD_VAR 0 3
17212: ARRAY
17213: PPUSH
17214: CALL_OW 432
17218: MINUS
17219: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17220: LD_VAR 0 4
17224: PUSH
17225: LD_VAR 0 5
17229: PPUSH
17230: LD_INT 3
17232: PPUSH
17233: CALL_OW 259
17237: PUSH
17238: LD_VAR 0 5
17242: PPUSH
17243: CALL_OW 432
17247: MINUS
17248: GREATEREQUAL
17249: IFFALSE 17267
// mech := result [ i ] ;
17251: LD_ADDR_VAR 0 5
17255: PUSH
17256: LD_VAR 0 2
17260: PUSH
17261: LD_VAR 0 3
17265: ARRAY
17266: ST_TO_ADDR
// end ;
17267: GO 17176
17269: POP
17270: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17271: LD_VAR 0 1
17275: PPUSH
17276: LD_VAR 0 5
17280: PPUSH
17281: CALL_OW 135
// end ;
17285: LD_VAR 0 2
17289: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17290: LD_INT 0
17292: PPUSH
17293: PPUSH
17294: PPUSH
17295: PPUSH
17296: PPUSH
17297: PPUSH
17298: PPUSH
17299: PPUSH
17300: PPUSH
17301: PPUSH
17302: PPUSH
17303: PPUSH
17304: PPUSH
// result := [ ] ;
17305: LD_ADDR_VAR 0 7
17309: PUSH
17310: EMPTY
17311: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17312: LD_VAR 0 1
17316: PPUSH
17317: CALL_OW 266
17321: PUSH
17322: LD_INT 0
17324: PUSH
17325: LD_INT 1
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: IN
17332: NOT
17333: IFFALSE 17337
// exit ;
17335: GO 18971
// if name then
17337: LD_VAR 0 3
17341: IFFALSE 17357
// SetBName ( base_dep , name ) ;
17343: LD_VAR 0 1
17347: PPUSH
17348: LD_VAR 0 3
17352: PPUSH
17353: CALL_OW 500
// base := GetBase ( base_dep ) ;
17357: LD_ADDR_VAR 0 15
17361: PUSH
17362: LD_VAR 0 1
17366: PPUSH
17367: CALL_OW 274
17371: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17372: LD_ADDR_VAR 0 16
17376: PUSH
17377: LD_VAR 0 1
17381: PPUSH
17382: CALL_OW 255
17386: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17387: LD_ADDR_VAR 0 17
17391: PUSH
17392: LD_VAR 0 1
17396: PPUSH
17397: CALL_OW 248
17401: ST_TO_ADDR
// if sources then
17402: LD_VAR 0 5
17406: IFFALSE 17453
// for i = 1 to 3 do
17408: LD_ADDR_VAR 0 8
17412: PUSH
17413: DOUBLE
17414: LD_INT 1
17416: DEC
17417: ST_TO_ADDR
17418: LD_INT 3
17420: PUSH
17421: FOR_TO
17422: IFFALSE 17451
// AddResourceType ( base , i , sources [ i ] ) ;
17424: LD_VAR 0 15
17428: PPUSH
17429: LD_VAR 0 8
17433: PPUSH
17434: LD_VAR 0 5
17438: PUSH
17439: LD_VAR 0 8
17443: ARRAY
17444: PPUSH
17445: CALL_OW 276
17449: GO 17421
17451: POP
17452: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17453: LD_ADDR_VAR 0 18
17457: PUSH
17458: LD_VAR 0 15
17462: PPUSH
17463: LD_VAR 0 2
17467: PPUSH
17468: LD_INT 1
17470: PPUSH
17471: CALL 16714 0 3
17475: ST_TO_ADDR
// InitHc ;
17476: CALL_OW 19
// InitUc ;
17480: CALL_OW 18
// uc_side := side ;
17484: LD_ADDR_OWVAR 20
17488: PUSH
17489: LD_VAR 0 16
17493: ST_TO_ADDR
// uc_nation := nation ;
17494: LD_ADDR_OWVAR 21
17498: PUSH
17499: LD_VAR 0 17
17503: ST_TO_ADDR
// if buildings then
17504: LD_VAR 0 18
17508: IFFALSE 18830
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17510: LD_ADDR_VAR 0 19
17514: PUSH
17515: LD_VAR 0 18
17519: PPUSH
17520: LD_INT 2
17522: PUSH
17523: LD_INT 30
17525: PUSH
17526: LD_INT 29
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 30
17535: PUSH
17536: LD_INT 30
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: PPUSH
17548: CALL_OW 72
17552: ST_TO_ADDR
// if tmp then
17553: LD_VAR 0 19
17557: IFFALSE 17605
// for i in tmp do
17559: LD_ADDR_VAR 0 8
17563: PUSH
17564: LD_VAR 0 19
17568: PUSH
17569: FOR_IN
17570: IFFALSE 17603
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17572: LD_VAR 0 8
17576: PPUSH
17577: CALL_OW 250
17581: PPUSH
17582: LD_VAR 0 8
17586: PPUSH
17587: CALL_OW 251
17591: PPUSH
17592: LD_VAR 0 16
17596: PPUSH
17597: CALL_OW 441
17601: GO 17569
17603: POP
17604: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17605: LD_VAR 0 18
17609: PPUSH
17610: LD_INT 2
17612: PUSH
17613: LD_INT 30
17615: PUSH
17616: LD_INT 32
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 30
17625: PUSH
17626: LD_INT 33
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: PPUSH
17638: CALL_OW 72
17642: IFFALSE 17730
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17644: LD_ADDR_VAR 0 8
17648: PUSH
17649: LD_VAR 0 18
17653: PPUSH
17654: LD_INT 2
17656: PUSH
17657: LD_INT 30
17659: PUSH
17660: LD_INT 32
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 30
17669: PUSH
17670: LD_INT 33
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: LIST
17681: PPUSH
17682: CALL_OW 72
17686: PUSH
17687: FOR_IN
17688: IFFALSE 17728
// begin if not GetBWeapon ( i ) then
17690: LD_VAR 0 8
17694: PPUSH
17695: CALL_OW 269
17699: NOT
17700: IFFALSE 17726
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17702: LD_VAR 0 8
17706: PPUSH
17707: LD_VAR 0 8
17711: PPUSH
17712: LD_VAR 0 2
17716: PPUSH
17717: CALL 18976 0 2
17721: PPUSH
17722: CALL_OW 431
// end ;
17726: GO 17687
17728: POP
17729: POP
// end ; for i = 1 to personel do
17730: LD_ADDR_VAR 0 8
17734: PUSH
17735: DOUBLE
17736: LD_INT 1
17738: DEC
17739: ST_TO_ADDR
17740: LD_VAR 0 6
17744: PUSH
17745: FOR_TO
17746: IFFALSE 18810
// begin if i > 4 then
17748: LD_VAR 0 8
17752: PUSH
17753: LD_INT 4
17755: GREATER
17756: IFFALSE 17760
// break ;
17758: GO 18810
// case i of 1 :
17760: LD_VAR 0 8
17764: PUSH
17765: LD_INT 1
17767: DOUBLE
17768: EQUAL
17769: IFTRUE 17773
17771: GO 17853
17773: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
17774: LD_ADDR_VAR 0 12
17778: PUSH
17779: LD_VAR 0 18
17783: PPUSH
17784: LD_INT 22
17786: PUSH
17787: LD_VAR 0 16
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 58
17798: PUSH
17799: EMPTY
17800: LIST
17801: PUSH
17802: LD_INT 2
17804: PUSH
17805: LD_INT 30
17807: PUSH
17808: LD_INT 32
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 30
17817: PUSH
17818: LD_INT 4
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 30
17827: PUSH
17828: LD_INT 5
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: LIST
17845: PPUSH
17846: CALL_OW 72
17850: ST_TO_ADDR
17851: GO 18075
17853: LD_INT 2
17855: DOUBLE
17856: EQUAL
17857: IFTRUE 17861
17859: GO 17923
17861: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
17862: LD_ADDR_VAR 0 12
17866: PUSH
17867: LD_VAR 0 18
17871: PPUSH
17872: LD_INT 22
17874: PUSH
17875: LD_VAR 0 16
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 2
17886: PUSH
17887: LD_INT 30
17889: PUSH
17890: LD_INT 0
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 30
17899: PUSH
17900: LD_INT 1
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: LIST
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PPUSH
17916: CALL_OW 72
17920: ST_TO_ADDR
17921: GO 18075
17923: LD_INT 3
17925: DOUBLE
17926: EQUAL
17927: IFTRUE 17931
17929: GO 17993
17931: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
17932: LD_ADDR_VAR 0 12
17936: PUSH
17937: LD_VAR 0 18
17941: PPUSH
17942: LD_INT 22
17944: PUSH
17945: LD_VAR 0 16
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 2
17956: PUSH
17957: LD_INT 30
17959: PUSH
17960: LD_INT 2
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 30
17969: PUSH
17970: LD_INT 3
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: LIST
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PPUSH
17986: CALL_OW 72
17990: ST_TO_ADDR
17991: GO 18075
17993: LD_INT 4
17995: DOUBLE
17996: EQUAL
17997: IFTRUE 18001
17999: GO 18074
18001: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18002: LD_ADDR_VAR 0 12
18006: PUSH
18007: LD_VAR 0 18
18011: PPUSH
18012: LD_INT 22
18014: PUSH
18015: LD_VAR 0 16
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 2
18026: PUSH
18027: LD_INT 30
18029: PUSH
18030: LD_INT 6
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 30
18039: PUSH
18040: LD_INT 7
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 30
18049: PUSH
18050: LD_INT 8
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PPUSH
18067: CALL_OW 72
18071: ST_TO_ADDR
18072: GO 18075
18074: POP
// if i = 1 then
18075: LD_VAR 0 8
18079: PUSH
18080: LD_INT 1
18082: EQUAL
18083: IFFALSE 18194
// begin tmp := [ ] ;
18085: LD_ADDR_VAR 0 19
18089: PUSH
18090: EMPTY
18091: ST_TO_ADDR
// for j in f do
18092: LD_ADDR_VAR 0 9
18096: PUSH
18097: LD_VAR 0 12
18101: PUSH
18102: FOR_IN
18103: IFFALSE 18176
// if GetBType ( j ) = b_bunker then
18105: LD_VAR 0 9
18109: PPUSH
18110: CALL_OW 266
18114: PUSH
18115: LD_INT 32
18117: EQUAL
18118: IFFALSE 18145
// tmp := Insert ( tmp , 1 , j ) else
18120: LD_ADDR_VAR 0 19
18124: PUSH
18125: LD_VAR 0 19
18129: PPUSH
18130: LD_INT 1
18132: PPUSH
18133: LD_VAR 0 9
18137: PPUSH
18138: CALL_OW 2
18142: ST_TO_ADDR
18143: GO 18174
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18145: LD_ADDR_VAR 0 19
18149: PUSH
18150: LD_VAR 0 19
18154: PPUSH
18155: LD_VAR 0 19
18159: PUSH
18160: LD_INT 1
18162: PLUS
18163: PPUSH
18164: LD_VAR 0 9
18168: PPUSH
18169: CALL_OW 2
18173: ST_TO_ADDR
18174: GO 18102
18176: POP
18177: POP
// if tmp then
18178: LD_VAR 0 19
18182: IFFALSE 18194
// f := tmp ;
18184: LD_ADDR_VAR 0 12
18188: PUSH
18189: LD_VAR 0 19
18193: ST_TO_ADDR
// end ; x := personel [ i ] ;
18194: LD_ADDR_VAR 0 13
18198: PUSH
18199: LD_VAR 0 6
18203: PUSH
18204: LD_VAR 0 8
18208: ARRAY
18209: ST_TO_ADDR
// if x = - 1 then
18210: LD_VAR 0 13
18214: PUSH
18215: LD_INT 1
18217: NEG
18218: EQUAL
18219: IFFALSE 18428
// begin for j in f do
18221: LD_ADDR_VAR 0 9
18225: PUSH
18226: LD_VAR 0 12
18230: PUSH
18231: FOR_IN
18232: IFFALSE 18424
// repeat InitHc ;
18234: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18238: LD_VAR 0 9
18242: PPUSH
18243: CALL_OW 266
18247: PUSH
18248: LD_INT 5
18250: EQUAL
18251: IFFALSE 18321
// begin if UnitsInside ( j ) < 3 then
18253: LD_VAR 0 9
18257: PPUSH
18258: CALL_OW 313
18262: PUSH
18263: LD_INT 3
18265: LESS
18266: IFFALSE 18302
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18268: LD_INT 0
18270: PPUSH
18271: LD_INT 5
18273: PUSH
18274: LD_INT 8
18276: PUSH
18277: LD_INT 9
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: LIST
18284: PUSH
18285: LD_VAR 0 17
18289: ARRAY
18290: PPUSH
18291: LD_VAR 0 4
18295: PPUSH
18296: CALL_OW 380
18300: GO 18319
// PrepareHuman ( false , i , skill ) ;
18302: LD_INT 0
18304: PPUSH
18305: LD_VAR 0 8
18309: PPUSH
18310: LD_VAR 0 4
18314: PPUSH
18315: CALL_OW 380
// end else
18319: GO 18338
// PrepareHuman ( false , i , skill ) ;
18321: LD_INT 0
18323: PPUSH
18324: LD_VAR 0 8
18328: PPUSH
18329: LD_VAR 0 4
18333: PPUSH
18334: CALL_OW 380
// un := CreateHuman ;
18338: LD_ADDR_VAR 0 14
18342: PUSH
18343: CALL_OW 44
18347: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18348: LD_ADDR_VAR 0 7
18352: PUSH
18353: LD_VAR 0 7
18357: PPUSH
18358: LD_INT 1
18360: PPUSH
18361: LD_VAR 0 14
18365: PPUSH
18366: CALL_OW 2
18370: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18371: LD_VAR 0 14
18375: PPUSH
18376: LD_VAR 0 9
18380: PPUSH
18381: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18385: LD_VAR 0 9
18389: PPUSH
18390: CALL_OW 313
18394: PUSH
18395: LD_INT 6
18397: EQUAL
18398: PUSH
18399: LD_VAR 0 9
18403: PPUSH
18404: CALL_OW 266
18408: PUSH
18409: LD_INT 32
18411: PUSH
18412: LD_INT 31
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: IN
18419: OR
18420: IFFALSE 18234
18422: GO 18231
18424: POP
18425: POP
// end else
18426: GO 18808
// for j = 1 to x do
18428: LD_ADDR_VAR 0 9
18432: PUSH
18433: DOUBLE
18434: LD_INT 1
18436: DEC
18437: ST_TO_ADDR
18438: LD_VAR 0 13
18442: PUSH
18443: FOR_TO
18444: IFFALSE 18806
// begin InitHc ;
18446: CALL_OW 19
// if not f then
18450: LD_VAR 0 12
18454: NOT
18455: IFFALSE 18544
// begin PrepareHuman ( false , i , skill ) ;
18457: LD_INT 0
18459: PPUSH
18460: LD_VAR 0 8
18464: PPUSH
18465: LD_VAR 0 4
18469: PPUSH
18470: CALL_OW 380
// un := CreateHuman ;
18474: LD_ADDR_VAR 0 14
18478: PUSH
18479: CALL_OW 44
18483: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18484: LD_ADDR_VAR 0 7
18488: PUSH
18489: LD_VAR 0 7
18493: PPUSH
18494: LD_INT 1
18496: PPUSH
18497: LD_VAR 0 14
18501: PPUSH
18502: CALL_OW 2
18506: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18507: LD_VAR 0 14
18511: PPUSH
18512: LD_VAR 0 1
18516: PPUSH
18517: CALL_OW 250
18521: PPUSH
18522: LD_VAR 0 1
18526: PPUSH
18527: CALL_OW 251
18531: PPUSH
18532: LD_INT 10
18534: PPUSH
18535: LD_INT 0
18537: PPUSH
18538: CALL_OW 50
// continue ;
18542: GO 18443
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18544: LD_VAR 0 12
18548: PUSH
18549: LD_INT 1
18551: ARRAY
18552: PPUSH
18553: CALL_OW 313
18557: PUSH
18558: LD_VAR 0 12
18562: PUSH
18563: LD_INT 1
18565: ARRAY
18566: PPUSH
18567: CALL_OW 266
18571: PUSH
18572: LD_INT 32
18574: PUSH
18575: LD_INT 31
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: IN
18582: AND
18583: PUSH
18584: LD_VAR 0 12
18588: PUSH
18589: LD_INT 1
18591: ARRAY
18592: PPUSH
18593: CALL_OW 313
18597: PUSH
18598: LD_INT 6
18600: EQUAL
18601: OR
18602: IFFALSE 18622
// f := Delete ( f , 1 ) ;
18604: LD_ADDR_VAR 0 12
18608: PUSH
18609: LD_VAR 0 12
18613: PPUSH
18614: LD_INT 1
18616: PPUSH
18617: CALL_OW 3
18621: ST_TO_ADDR
// if not f then
18622: LD_VAR 0 12
18626: NOT
18627: IFFALSE 18645
// begin x := x + 2 ;
18629: LD_ADDR_VAR 0 13
18633: PUSH
18634: LD_VAR 0 13
18638: PUSH
18639: LD_INT 2
18641: PLUS
18642: ST_TO_ADDR
// continue ;
18643: GO 18443
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18645: LD_VAR 0 12
18649: PUSH
18650: LD_INT 1
18652: ARRAY
18653: PPUSH
18654: CALL_OW 266
18658: PUSH
18659: LD_INT 5
18661: EQUAL
18662: IFFALSE 18736
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18664: LD_VAR 0 12
18668: PUSH
18669: LD_INT 1
18671: ARRAY
18672: PPUSH
18673: CALL_OW 313
18677: PUSH
18678: LD_INT 3
18680: LESS
18681: IFFALSE 18717
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18683: LD_INT 0
18685: PPUSH
18686: LD_INT 5
18688: PUSH
18689: LD_INT 8
18691: PUSH
18692: LD_INT 9
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: LIST
18699: PUSH
18700: LD_VAR 0 17
18704: ARRAY
18705: PPUSH
18706: LD_VAR 0 4
18710: PPUSH
18711: CALL_OW 380
18715: GO 18734
// PrepareHuman ( false , i , skill ) ;
18717: LD_INT 0
18719: PPUSH
18720: LD_VAR 0 8
18724: PPUSH
18725: LD_VAR 0 4
18729: PPUSH
18730: CALL_OW 380
// end else
18734: GO 18753
// PrepareHuman ( false , i , skill ) ;
18736: LD_INT 0
18738: PPUSH
18739: LD_VAR 0 8
18743: PPUSH
18744: LD_VAR 0 4
18748: PPUSH
18749: CALL_OW 380
// un := CreateHuman ;
18753: LD_ADDR_VAR 0 14
18757: PUSH
18758: CALL_OW 44
18762: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18763: LD_ADDR_VAR 0 7
18767: PUSH
18768: LD_VAR 0 7
18772: PPUSH
18773: LD_INT 1
18775: PPUSH
18776: LD_VAR 0 14
18780: PPUSH
18781: CALL_OW 2
18785: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
18786: LD_VAR 0 14
18790: PPUSH
18791: LD_VAR 0 12
18795: PUSH
18796: LD_INT 1
18798: ARRAY
18799: PPUSH
18800: CALL_OW 52
// end ;
18804: GO 18443
18806: POP
18807: POP
// end ;
18808: GO 17745
18810: POP
18811: POP
// result := result ^ buildings ;
18812: LD_ADDR_VAR 0 7
18816: PUSH
18817: LD_VAR 0 7
18821: PUSH
18822: LD_VAR 0 18
18826: ADD
18827: ST_TO_ADDR
// end else
18828: GO 18971
// begin for i = 1 to personel do
18830: LD_ADDR_VAR 0 8
18834: PUSH
18835: DOUBLE
18836: LD_INT 1
18838: DEC
18839: ST_TO_ADDR
18840: LD_VAR 0 6
18844: PUSH
18845: FOR_TO
18846: IFFALSE 18969
// begin if i > 4 then
18848: LD_VAR 0 8
18852: PUSH
18853: LD_INT 4
18855: GREATER
18856: IFFALSE 18860
// break ;
18858: GO 18969
// x := personel [ i ] ;
18860: LD_ADDR_VAR 0 13
18864: PUSH
18865: LD_VAR 0 6
18869: PUSH
18870: LD_VAR 0 8
18874: ARRAY
18875: ST_TO_ADDR
// if x = - 1 then
18876: LD_VAR 0 13
18880: PUSH
18881: LD_INT 1
18883: NEG
18884: EQUAL
18885: IFFALSE 18889
// continue ;
18887: GO 18845
// PrepareHuman ( false , i , skill ) ;
18889: LD_INT 0
18891: PPUSH
18892: LD_VAR 0 8
18896: PPUSH
18897: LD_VAR 0 4
18901: PPUSH
18902: CALL_OW 380
// un := CreateHuman ;
18906: LD_ADDR_VAR 0 14
18910: PUSH
18911: CALL_OW 44
18915: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18916: LD_VAR 0 14
18920: PPUSH
18921: LD_VAR 0 1
18925: PPUSH
18926: CALL_OW 250
18930: PPUSH
18931: LD_VAR 0 1
18935: PPUSH
18936: CALL_OW 251
18940: PPUSH
18941: LD_INT 10
18943: PPUSH
18944: LD_INT 0
18946: PPUSH
18947: CALL_OW 50
// result := result ^ un ;
18951: LD_ADDR_VAR 0 7
18955: PUSH
18956: LD_VAR 0 7
18960: PUSH
18961: LD_VAR 0 14
18965: ADD
18966: ST_TO_ADDR
// end ;
18967: GO 18845
18969: POP
18970: POP
// end ; end ;
18971: LD_VAR 0 7
18975: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18976: LD_INT 0
18978: PPUSH
18979: PPUSH
18980: PPUSH
18981: PPUSH
18982: PPUSH
18983: PPUSH
18984: PPUSH
18985: PPUSH
18986: PPUSH
18987: PPUSH
18988: PPUSH
18989: PPUSH
18990: PPUSH
18991: PPUSH
18992: PPUSH
18993: PPUSH
// result := false ;
18994: LD_ADDR_VAR 0 3
18998: PUSH
18999: LD_INT 0
19001: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19002: LD_VAR 0 1
19006: NOT
19007: PUSH
19008: LD_VAR 0 1
19012: PPUSH
19013: CALL_OW 266
19017: PUSH
19018: LD_INT 32
19020: PUSH
19021: LD_INT 33
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: IN
19028: NOT
19029: OR
19030: IFFALSE 19034
// exit ;
19032: GO 20143
// nat := GetNation ( tower ) ;
19034: LD_ADDR_VAR 0 12
19038: PUSH
19039: LD_VAR 0 1
19043: PPUSH
19044: CALL_OW 248
19048: ST_TO_ADDR
// side := GetSide ( tower ) ;
19049: LD_ADDR_VAR 0 16
19053: PUSH
19054: LD_VAR 0 1
19058: PPUSH
19059: CALL_OW 255
19063: ST_TO_ADDR
// x := GetX ( tower ) ;
19064: LD_ADDR_VAR 0 10
19068: PUSH
19069: LD_VAR 0 1
19073: PPUSH
19074: CALL_OW 250
19078: ST_TO_ADDR
// y := GetY ( tower ) ;
19079: LD_ADDR_VAR 0 11
19083: PUSH
19084: LD_VAR 0 1
19088: PPUSH
19089: CALL_OW 251
19093: ST_TO_ADDR
// if not x or not y then
19094: LD_VAR 0 10
19098: NOT
19099: PUSH
19100: LD_VAR 0 11
19104: NOT
19105: OR
19106: IFFALSE 19110
// exit ;
19108: GO 20143
// weapon := 0 ;
19110: LD_ADDR_VAR 0 18
19114: PUSH
19115: LD_INT 0
19117: ST_TO_ADDR
// fac_list := [ ] ;
19118: LD_ADDR_VAR 0 17
19122: PUSH
19123: EMPTY
19124: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19125: LD_ADDR_VAR 0 6
19129: PUSH
19130: LD_VAR 0 1
19134: PPUSH
19135: CALL_OW 274
19139: PPUSH
19140: LD_VAR 0 2
19144: PPUSH
19145: LD_INT 0
19147: PPUSH
19148: CALL 16714 0 3
19152: PPUSH
19153: LD_INT 30
19155: PUSH
19156: LD_INT 3
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PPUSH
19163: CALL_OW 72
19167: ST_TO_ADDR
// if not factories then
19168: LD_VAR 0 6
19172: NOT
19173: IFFALSE 19177
// exit ;
19175: GO 20143
// for i in factories do
19177: LD_ADDR_VAR 0 8
19181: PUSH
19182: LD_VAR 0 6
19186: PUSH
19187: FOR_IN
19188: IFFALSE 19213
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19190: LD_ADDR_VAR 0 17
19194: PUSH
19195: LD_VAR 0 17
19199: PUSH
19200: LD_VAR 0 8
19204: PPUSH
19205: CALL_OW 478
19209: UNION
19210: ST_TO_ADDR
19211: GO 19187
19213: POP
19214: POP
// if not fac_list then
19215: LD_VAR 0 17
19219: NOT
19220: IFFALSE 19224
// exit ;
19222: GO 20143
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19224: LD_ADDR_VAR 0 5
19228: PUSH
19229: LD_INT 4
19231: PUSH
19232: LD_INT 5
19234: PUSH
19235: LD_INT 9
19237: PUSH
19238: LD_INT 10
19240: PUSH
19241: LD_INT 6
19243: PUSH
19244: LD_INT 7
19246: PUSH
19247: LD_INT 11
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 27
19261: PUSH
19262: LD_INT 28
19264: PUSH
19265: LD_INT 26
19267: PUSH
19268: LD_INT 30
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 43
19279: PUSH
19280: LD_INT 44
19282: PUSH
19283: LD_INT 46
19285: PUSH
19286: LD_INT 45
19288: PUSH
19289: LD_INT 47
19291: PUSH
19292: LD_INT 49
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: LIST
19307: PUSH
19308: LD_VAR 0 12
19312: ARRAY
19313: ST_TO_ADDR
// list := list isect fac_list ;
19314: LD_ADDR_VAR 0 5
19318: PUSH
19319: LD_VAR 0 5
19323: PUSH
19324: LD_VAR 0 17
19328: ISECT
19329: ST_TO_ADDR
// if not list then
19330: LD_VAR 0 5
19334: NOT
19335: IFFALSE 19339
// exit ;
19337: GO 20143
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19339: LD_VAR 0 12
19343: PUSH
19344: LD_INT 3
19346: EQUAL
19347: PUSH
19348: LD_INT 49
19350: PUSH
19351: LD_VAR 0 5
19355: IN
19356: AND
19357: PUSH
19358: LD_INT 31
19360: PPUSH
19361: LD_VAR 0 16
19365: PPUSH
19366: CALL_OW 321
19370: PUSH
19371: LD_INT 2
19373: EQUAL
19374: AND
19375: IFFALSE 19435
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19377: LD_INT 22
19379: PUSH
19380: LD_VAR 0 16
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 35
19391: PUSH
19392: LD_INT 49
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 91
19401: PUSH
19402: LD_VAR 0 1
19406: PUSH
19407: LD_INT 10
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: LIST
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: LIST
19419: PPUSH
19420: CALL_OW 69
19424: NOT
19425: IFFALSE 19435
// weapon := ru_time_lapser ;
19427: LD_ADDR_VAR 0 18
19431: PUSH
19432: LD_INT 49
19434: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19435: LD_VAR 0 12
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: LD_INT 2
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: IN
19450: PUSH
19451: LD_INT 11
19453: PUSH
19454: LD_VAR 0 5
19458: IN
19459: PUSH
19460: LD_INT 30
19462: PUSH
19463: LD_VAR 0 5
19467: IN
19468: OR
19469: AND
19470: PUSH
19471: LD_INT 6
19473: PPUSH
19474: LD_VAR 0 16
19478: PPUSH
19479: CALL_OW 321
19483: PUSH
19484: LD_INT 2
19486: EQUAL
19487: AND
19488: IFFALSE 19653
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19490: LD_INT 22
19492: PUSH
19493: LD_VAR 0 16
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 2
19504: PUSH
19505: LD_INT 35
19507: PUSH
19508: LD_INT 11
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 35
19517: PUSH
19518: LD_INT 30
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 91
19532: PUSH
19533: LD_VAR 0 1
19537: PUSH
19538: LD_INT 18
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: LIST
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: LIST
19550: PPUSH
19551: CALL_OW 69
19555: NOT
19556: PUSH
19557: LD_INT 22
19559: PUSH
19560: LD_VAR 0 16
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 2
19571: PUSH
19572: LD_INT 30
19574: PUSH
19575: LD_INT 32
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 30
19584: PUSH
19585: LD_INT 33
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 91
19599: PUSH
19600: LD_VAR 0 1
19604: PUSH
19605: LD_INT 12
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: LIST
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: LIST
19617: PUSH
19618: EMPTY
19619: LIST
19620: PPUSH
19621: CALL_OW 69
19625: PUSH
19626: LD_INT 2
19628: GREATER
19629: AND
19630: IFFALSE 19653
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19632: LD_ADDR_VAR 0 18
19636: PUSH
19637: LD_INT 11
19639: PUSH
19640: LD_INT 30
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_VAR 0 12
19651: ARRAY
19652: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19653: LD_VAR 0 18
19657: NOT
19658: PUSH
19659: LD_INT 40
19661: PPUSH
19662: LD_VAR 0 16
19666: PPUSH
19667: CALL_OW 321
19671: PUSH
19672: LD_INT 2
19674: EQUAL
19675: AND
19676: PUSH
19677: LD_INT 7
19679: PUSH
19680: LD_VAR 0 5
19684: IN
19685: PUSH
19686: LD_INT 28
19688: PUSH
19689: LD_VAR 0 5
19693: IN
19694: OR
19695: PUSH
19696: LD_INT 45
19698: PUSH
19699: LD_VAR 0 5
19703: IN
19704: OR
19705: AND
19706: IFFALSE 19960
// begin hex := GetHexInfo ( x , y ) ;
19708: LD_ADDR_VAR 0 4
19712: PUSH
19713: LD_VAR 0 10
19717: PPUSH
19718: LD_VAR 0 11
19722: PPUSH
19723: CALL_OW 546
19727: ST_TO_ADDR
// if hex [ 1 ] then
19728: LD_VAR 0 4
19732: PUSH
19733: LD_INT 1
19735: ARRAY
19736: IFFALSE 19740
// exit ;
19738: GO 20143
// height := hex [ 2 ] ;
19740: LD_ADDR_VAR 0 15
19744: PUSH
19745: LD_VAR 0 4
19749: PUSH
19750: LD_INT 2
19752: ARRAY
19753: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
19754: LD_ADDR_VAR 0 14
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: LD_INT 2
19764: PUSH
19765: LD_INT 3
19767: PUSH
19768: LD_INT 5
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: ST_TO_ADDR
// for i in tmp do
19777: LD_ADDR_VAR 0 8
19781: PUSH
19782: LD_VAR 0 14
19786: PUSH
19787: FOR_IN
19788: IFFALSE 19958
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
19790: LD_ADDR_VAR 0 9
19794: PUSH
19795: LD_VAR 0 10
19799: PPUSH
19800: LD_VAR 0 8
19804: PPUSH
19805: LD_INT 5
19807: PPUSH
19808: CALL_OW 272
19812: PUSH
19813: LD_VAR 0 11
19817: PPUSH
19818: LD_VAR 0 8
19822: PPUSH
19823: LD_INT 5
19825: PPUSH
19826: CALL_OW 273
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
19835: LD_VAR 0 9
19839: PUSH
19840: LD_INT 1
19842: ARRAY
19843: PPUSH
19844: LD_VAR 0 9
19848: PUSH
19849: LD_INT 2
19851: ARRAY
19852: PPUSH
19853: CALL_OW 488
19857: IFFALSE 19956
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
19859: LD_ADDR_VAR 0 4
19863: PUSH
19864: LD_VAR 0 9
19868: PUSH
19869: LD_INT 1
19871: ARRAY
19872: PPUSH
19873: LD_VAR 0 9
19877: PUSH
19878: LD_INT 2
19880: ARRAY
19881: PPUSH
19882: CALL_OW 546
19886: ST_TO_ADDR
// if hex [ 1 ] then
19887: LD_VAR 0 4
19891: PUSH
19892: LD_INT 1
19894: ARRAY
19895: IFFALSE 19899
// continue ;
19897: GO 19787
// h := hex [ 2 ] ;
19899: LD_ADDR_VAR 0 13
19903: PUSH
19904: LD_VAR 0 4
19908: PUSH
19909: LD_INT 2
19911: ARRAY
19912: ST_TO_ADDR
// if h + 7 < height then
19913: LD_VAR 0 13
19917: PUSH
19918: LD_INT 7
19920: PLUS
19921: PUSH
19922: LD_VAR 0 15
19926: LESS
19927: IFFALSE 19956
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19929: LD_ADDR_VAR 0 18
19933: PUSH
19934: LD_INT 7
19936: PUSH
19937: LD_INT 28
19939: PUSH
19940: LD_INT 45
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: LIST
19947: PUSH
19948: LD_VAR 0 12
19952: ARRAY
19953: ST_TO_ADDR
// break ;
19954: GO 19958
// end ; end ; end ;
19956: GO 19787
19958: POP
19959: POP
// end ; if not weapon then
19960: LD_VAR 0 18
19964: NOT
19965: IFFALSE 20025
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19967: LD_ADDR_VAR 0 5
19971: PUSH
19972: LD_VAR 0 5
19976: PUSH
19977: LD_INT 11
19979: PUSH
19980: LD_INT 30
19982: PUSH
19983: LD_INT 49
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: LIST
19990: DIFF
19991: ST_TO_ADDR
// if not list then
19992: LD_VAR 0 5
19996: NOT
19997: IFFALSE 20001
// exit ;
19999: GO 20143
// weapon := list [ rand ( 1 , list ) ] ;
20001: LD_ADDR_VAR 0 18
20005: PUSH
20006: LD_VAR 0 5
20010: PUSH
20011: LD_INT 1
20013: PPUSH
20014: LD_VAR 0 5
20018: PPUSH
20019: CALL_OW 12
20023: ARRAY
20024: ST_TO_ADDR
// end ; if weapon then
20025: LD_VAR 0 18
20029: IFFALSE 20143
// begin tmp := CostOfWeapon ( weapon ) ;
20031: LD_ADDR_VAR 0 14
20035: PUSH
20036: LD_VAR 0 18
20040: PPUSH
20041: CALL_OW 451
20045: ST_TO_ADDR
// j := GetBase ( tower ) ;
20046: LD_ADDR_VAR 0 9
20050: PUSH
20051: LD_VAR 0 1
20055: PPUSH
20056: CALL_OW 274
20060: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20061: LD_VAR 0 9
20065: PPUSH
20066: LD_INT 1
20068: PPUSH
20069: CALL_OW 275
20073: PUSH
20074: LD_VAR 0 14
20078: PUSH
20079: LD_INT 1
20081: ARRAY
20082: GREATEREQUAL
20083: PUSH
20084: LD_VAR 0 9
20088: PPUSH
20089: LD_INT 2
20091: PPUSH
20092: CALL_OW 275
20096: PUSH
20097: LD_VAR 0 14
20101: PUSH
20102: LD_INT 2
20104: ARRAY
20105: GREATEREQUAL
20106: AND
20107: PUSH
20108: LD_VAR 0 9
20112: PPUSH
20113: LD_INT 3
20115: PPUSH
20116: CALL_OW 275
20120: PUSH
20121: LD_VAR 0 14
20125: PUSH
20126: LD_INT 3
20128: ARRAY
20129: GREATEREQUAL
20130: AND
20131: IFFALSE 20143
// result := weapon ;
20133: LD_ADDR_VAR 0 3
20137: PUSH
20138: LD_VAR 0 18
20142: ST_TO_ADDR
// end ; end ;
20143: LD_VAR 0 3
20147: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20148: LD_INT 0
20150: PPUSH
20151: PPUSH
// result := true ;
20152: LD_ADDR_VAR 0 3
20156: PUSH
20157: LD_INT 1
20159: ST_TO_ADDR
// if array1 = array2 then
20160: LD_VAR 0 1
20164: PUSH
20165: LD_VAR 0 2
20169: EQUAL
20170: IFFALSE 20230
// begin for i = 1 to array1 do
20172: LD_ADDR_VAR 0 4
20176: PUSH
20177: DOUBLE
20178: LD_INT 1
20180: DEC
20181: ST_TO_ADDR
20182: LD_VAR 0 1
20186: PUSH
20187: FOR_TO
20188: IFFALSE 20226
// if array1 [ i ] <> array2 [ i ] then
20190: LD_VAR 0 1
20194: PUSH
20195: LD_VAR 0 4
20199: ARRAY
20200: PUSH
20201: LD_VAR 0 2
20205: PUSH
20206: LD_VAR 0 4
20210: ARRAY
20211: NONEQUAL
20212: IFFALSE 20224
// begin result := false ;
20214: LD_ADDR_VAR 0 3
20218: PUSH
20219: LD_INT 0
20221: ST_TO_ADDR
// break ;
20222: GO 20226
// end ;
20224: GO 20187
20226: POP
20227: POP
// end else
20228: GO 20238
// result := false ;
20230: LD_ADDR_VAR 0 3
20234: PUSH
20235: LD_INT 0
20237: ST_TO_ADDR
// end ;
20238: LD_VAR 0 3
20242: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20243: LD_INT 0
20245: PPUSH
20246: PPUSH
// if not array1 or not array2 then
20247: LD_VAR 0 1
20251: NOT
20252: PUSH
20253: LD_VAR 0 2
20257: NOT
20258: OR
20259: IFFALSE 20263
// exit ;
20261: GO 20327
// result := true ;
20263: LD_ADDR_VAR 0 3
20267: PUSH
20268: LD_INT 1
20270: ST_TO_ADDR
// for i = 1 to array1 do
20271: LD_ADDR_VAR 0 4
20275: PUSH
20276: DOUBLE
20277: LD_INT 1
20279: DEC
20280: ST_TO_ADDR
20281: LD_VAR 0 1
20285: PUSH
20286: FOR_TO
20287: IFFALSE 20325
// if array1 [ i ] <> array2 [ i ] then
20289: LD_VAR 0 1
20293: PUSH
20294: LD_VAR 0 4
20298: ARRAY
20299: PUSH
20300: LD_VAR 0 2
20304: PUSH
20305: LD_VAR 0 4
20309: ARRAY
20310: NONEQUAL
20311: IFFALSE 20323
// begin result := false ;
20313: LD_ADDR_VAR 0 3
20317: PUSH
20318: LD_INT 0
20320: ST_TO_ADDR
// break ;
20321: GO 20325
// end ;
20323: GO 20286
20325: POP
20326: POP
// end ;
20327: LD_VAR 0 3
20331: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20332: LD_INT 0
20334: PPUSH
20335: PPUSH
20336: PPUSH
// pom := GetBase ( fac ) ;
20337: LD_ADDR_VAR 0 5
20341: PUSH
20342: LD_VAR 0 1
20346: PPUSH
20347: CALL_OW 274
20351: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20352: LD_ADDR_VAR 0 4
20356: PUSH
20357: LD_VAR 0 2
20361: PUSH
20362: LD_INT 1
20364: ARRAY
20365: PPUSH
20366: LD_VAR 0 2
20370: PUSH
20371: LD_INT 2
20373: ARRAY
20374: PPUSH
20375: LD_VAR 0 2
20379: PUSH
20380: LD_INT 3
20382: ARRAY
20383: PPUSH
20384: LD_VAR 0 2
20388: PUSH
20389: LD_INT 4
20391: ARRAY
20392: PPUSH
20393: CALL_OW 449
20397: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20398: LD_ADDR_VAR 0 3
20402: PUSH
20403: LD_VAR 0 5
20407: PPUSH
20408: LD_INT 1
20410: PPUSH
20411: CALL_OW 275
20415: PUSH
20416: LD_VAR 0 4
20420: PUSH
20421: LD_INT 1
20423: ARRAY
20424: GREATEREQUAL
20425: PUSH
20426: LD_VAR 0 5
20430: PPUSH
20431: LD_INT 2
20433: PPUSH
20434: CALL_OW 275
20438: PUSH
20439: LD_VAR 0 4
20443: PUSH
20444: LD_INT 2
20446: ARRAY
20447: GREATEREQUAL
20448: AND
20449: PUSH
20450: LD_VAR 0 5
20454: PPUSH
20455: LD_INT 3
20457: PPUSH
20458: CALL_OW 275
20462: PUSH
20463: LD_VAR 0 4
20467: PUSH
20468: LD_INT 3
20470: ARRAY
20471: GREATEREQUAL
20472: AND
20473: ST_TO_ADDR
// end ;
20474: LD_VAR 0 3
20478: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20479: LD_INT 0
20481: PPUSH
20482: PPUSH
20483: PPUSH
20484: PPUSH
// pom := GetBase ( building ) ;
20485: LD_ADDR_VAR 0 3
20489: PUSH
20490: LD_VAR 0 1
20494: PPUSH
20495: CALL_OW 274
20499: ST_TO_ADDR
// if not pom then
20500: LD_VAR 0 3
20504: NOT
20505: IFFALSE 20509
// exit ;
20507: GO 20679
// btype := GetBType ( building ) ;
20509: LD_ADDR_VAR 0 5
20513: PUSH
20514: LD_VAR 0 1
20518: PPUSH
20519: CALL_OW 266
20523: ST_TO_ADDR
// if btype = b_armoury then
20524: LD_VAR 0 5
20528: PUSH
20529: LD_INT 4
20531: EQUAL
20532: IFFALSE 20542
// btype := b_barracks ;
20534: LD_ADDR_VAR 0 5
20538: PUSH
20539: LD_INT 5
20541: ST_TO_ADDR
// if btype = b_depot then
20542: LD_VAR 0 5
20546: PUSH
20547: LD_INT 0
20549: EQUAL
20550: IFFALSE 20560
// btype := b_warehouse ;
20552: LD_ADDR_VAR 0 5
20556: PUSH
20557: LD_INT 1
20559: ST_TO_ADDR
// if btype = b_workshop then
20560: LD_VAR 0 5
20564: PUSH
20565: LD_INT 2
20567: EQUAL
20568: IFFALSE 20578
// btype := b_factory ;
20570: LD_ADDR_VAR 0 5
20574: PUSH
20575: LD_INT 3
20577: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20578: LD_ADDR_VAR 0 4
20582: PUSH
20583: LD_VAR 0 5
20587: PPUSH
20588: LD_VAR 0 1
20592: PPUSH
20593: CALL_OW 248
20597: PPUSH
20598: CALL_OW 450
20602: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20603: LD_ADDR_VAR 0 2
20607: PUSH
20608: LD_VAR 0 3
20612: PPUSH
20613: LD_INT 1
20615: PPUSH
20616: CALL_OW 275
20620: PUSH
20621: LD_VAR 0 4
20625: PUSH
20626: LD_INT 1
20628: ARRAY
20629: GREATEREQUAL
20630: PUSH
20631: LD_VAR 0 3
20635: PPUSH
20636: LD_INT 2
20638: PPUSH
20639: CALL_OW 275
20643: PUSH
20644: LD_VAR 0 4
20648: PUSH
20649: LD_INT 2
20651: ARRAY
20652: GREATEREQUAL
20653: AND
20654: PUSH
20655: LD_VAR 0 3
20659: PPUSH
20660: LD_INT 3
20662: PPUSH
20663: CALL_OW 275
20667: PUSH
20668: LD_VAR 0 4
20672: PUSH
20673: LD_INT 3
20675: ARRAY
20676: GREATEREQUAL
20677: AND
20678: ST_TO_ADDR
// end ;
20679: LD_VAR 0 2
20683: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20684: LD_INT 0
20686: PPUSH
20687: PPUSH
20688: PPUSH
// pom := GetBase ( building ) ;
20689: LD_ADDR_VAR 0 4
20693: PUSH
20694: LD_VAR 0 1
20698: PPUSH
20699: CALL_OW 274
20703: ST_TO_ADDR
// if not pom then
20704: LD_VAR 0 4
20708: NOT
20709: IFFALSE 20713
// exit ;
20711: GO 20814
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20713: LD_ADDR_VAR 0 5
20717: PUSH
20718: LD_VAR 0 2
20722: PPUSH
20723: LD_VAR 0 1
20727: PPUSH
20728: CALL_OW 248
20732: PPUSH
20733: CALL_OW 450
20737: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20738: LD_ADDR_VAR 0 3
20742: PUSH
20743: LD_VAR 0 4
20747: PPUSH
20748: LD_INT 1
20750: PPUSH
20751: CALL_OW 275
20755: PUSH
20756: LD_VAR 0 5
20760: PUSH
20761: LD_INT 1
20763: ARRAY
20764: GREATEREQUAL
20765: PUSH
20766: LD_VAR 0 4
20770: PPUSH
20771: LD_INT 2
20773: PPUSH
20774: CALL_OW 275
20778: PUSH
20779: LD_VAR 0 5
20783: PUSH
20784: LD_INT 2
20786: ARRAY
20787: GREATEREQUAL
20788: AND
20789: PUSH
20790: LD_VAR 0 4
20794: PPUSH
20795: LD_INT 3
20797: PPUSH
20798: CALL_OW 275
20802: PUSH
20803: LD_VAR 0 5
20807: PUSH
20808: LD_INT 3
20810: ARRAY
20811: GREATEREQUAL
20812: AND
20813: ST_TO_ADDR
// end ;
20814: LD_VAR 0 3
20818: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
20819: LD_INT 0
20821: PPUSH
20822: PPUSH
20823: PPUSH
20824: PPUSH
20825: PPUSH
20826: PPUSH
20827: PPUSH
20828: PPUSH
20829: PPUSH
20830: PPUSH
20831: PPUSH
// result := false ;
20832: LD_ADDR_VAR 0 8
20836: PUSH
20837: LD_INT 0
20839: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
20840: LD_VAR 0 5
20844: NOT
20845: PUSH
20846: LD_VAR 0 1
20850: NOT
20851: OR
20852: PUSH
20853: LD_VAR 0 2
20857: NOT
20858: OR
20859: PUSH
20860: LD_VAR 0 3
20864: NOT
20865: OR
20866: IFFALSE 20870
// exit ;
20868: GO 21684
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
20870: LD_ADDR_VAR 0 14
20874: PUSH
20875: LD_VAR 0 1
20879: PPUSH
20880: LD_VAR 0 2
20884: PPUSH
20885: LD_VAR 0 3
20889: PPUSH
20890: LD_VAR 0 4
20894: PPUSH
20895: LD_VAR 0 5
20899: PUSH
20900: LD_INT 1
20902: ARRAY
20903: PPUSH
20904: CALL_OW 248
20908: PPUSH
20909: LD_INT 0
20911: PPUSH
20912: CALL 22937 0 6
20916: ST_TO_ADDR
// if not hexes then
20917: LD_VAR 0 14
20921: NOT
20922: IFFALSE 20926
// exit ;
20924: GO 21684
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20926: LD_ADDR_VAR 0 17
20930: PUSH
20931: LD_VAR 0 5
20935: PPUSH
20936: LD_INT 22
20938: PUSH
20939: LD_VAR 0 13
20943: PPUSH
20944: CALL_OW 255
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 2
20955: PUSH
20956: LD_INT 30
20958: PUSH
20959: LD_INT 0
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 30
20968: PUSH
20969: LD_INT 1
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: LIST
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PPUSH
20985: CALL_OW 72
20989: ST_TO_ADDR
// for i = 1 to hexes do
20990: LD_ADDR_VAR 0 9
20994: PUSH
20995: DOUBLE
20996: LD_INT 1
20998: DEC
20999: ST_TO_ADDR
21000: LD_VAR 0 14
21004: PUSH
21005: FOR_TO
21006: IFFALSE 21682
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21008: LD_ADDR_VAR 0 13
21012: PUSH
21013: LD_VAR 0 14
21017: PUSH
21018: LD_VAR 0 9
21022: ARRAY
21023: PUSH
21024: LD_INT 1
21026: ARRAY
21027: PPUSH
21028: LD_VAR 0 14
21032: PUSH
21033: LD_VAR 0 9
21037: ARRAY
21038: PUSH
21039: LD_INT 2
21041: ARRAY
21042: PPUSH
21043: CALL_OW 428
21047: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21048: LD_VAR 0 14
21052: PUSH
21053: LD_VAR 0 9
21057: ARRAY
21058: PUSH
21059: LD_INT 1
21061: ARRAY
21062: PPUSH
21063: LD_VAR 0 14
21067: PUSH
21068: LD_VAR 0 9
21072: ARRAY
21073: PUSH
21074: LD_INT 2
21076: ARRAY
21077: PPUSH
21078: CALL_OW 351
21082: PUSH
21083: LD_VAR 0 14
21087: PUSH
21088: LD_VAR 0 9
21092: ARRAY
21093: PUSH
21094: LD_INT 1
21096: ARRAY
21097: PPUSH
21098: LD_VAR 0 14
21102: PUSH
21103: LD_VAR 0 9
21107: ARRAY
21108: PUSH
21109: LD_INT 2
21111: ARRAY
21112: PPUSH
21113: CALL_OW 488
21117: NOT
21118: OR
21119: PUSH
21120: LD_VAR 0 13
21124: PPUSH
21125: CALL_OW 247
21129: PUSH
21130: LD_INT 3
21132: EQUAL
21133: OR
21134: IFFALSE 21140
// exit ;
21136: POP
21137: POP
21138: GO 21684
// if not tmp then
21140: LD_VAR 0 13
21144: NOT
21145: IFFALSE 21149
// continue ;
21147: GO 21005
// result := true ;
21149: LD_ADDR_VAR 0 8
21153: PUSH
21154: LD_INT 1
21156: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21157: LD_VAR 0 6
21161: PUSH
21162: LD_VAR 0 13
21166: PPUSH
21167: CALL_OW 247
21171: PUSH
21172: LD_INT 2
21174: EQUAL
21175: AND
21176: PUSH
21177: LD_VAR 0 13
21181: PPUSH
21182: CALL_OW 263
21186: PUSH
21187: LD_INT 1
21189: EQUAL
21190: AND
21191: IFFALSE 21355
// begin if IsDrivenBy ( tmp ) then
21193: LD_VAR 0 13
21197: PPUSH
21198: CALL_OW 311
21202: IFFALSE 21206
// continue ;
21204: GO 21005
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21206: LD_VAR 0 6
21210: PPUSH
21211: LD_INT 3
21213: PUSH
21214: LD_INT 60
21216: PUSH
21217: EMPTY
21218: LIST
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 3
21226: PUSH
21227: LD_INT 55
21229: PUSH
21230: EMPTY
21231: LIST
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PPUSH
21241: CALL_OW 72
21245: IFFALSE 21353
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21247: LD_ADDR_VAR 0 18
21251: PUSH
21252: LD_VAR 0 6
21256: PPUSH
21257: LD_INT 3
21259: PUSH
21260: LD_INT 60
21262: PUSH
21263: EMPTY
21264: LIST
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 3
21272: PUSH
21273: LD_INT 55
21275: PUSH
21276: EMPTY
21277: LIST
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PPUSH
21287: CALL_OW 72
21291: PUSH
21292: LD_INT 1
21294: ARRAY
21295: ST_TO_ADDR
// if IsInUnit ( driver ) then
21296: LD_VAR 0 18
21300: PPUSH
21301: CALL_OW 310
21305: IFFALSE 21316
// ComExit ( driver ) ;
21307: LD_VAR 0 18
21311: PPUSH
21312: CALL 46729 0 1
// AddComEnterUnit ( driver , tmp ) ;
21316: LD_VAR 0 18
21320: PPUSH
21321: LD_VAR 0 13
21325: PPUSH
21326: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21330: LD_VAR 0 18
21334: PPUSH
21335: LD_VAR 0 7
21339: PPUSH
21340: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21344: LD_VAR 0 18
21348: PPUSH
21349: CALL_OW 181
// end ; continue ;
21353: GO 21005
// end ; if not cleaners or not tmp in cleaners then
21355: LD_VAR 0 6
21359: NOT
21360: PUSH
21361: LD_VAR 0 13
21365: PUSH
21366: LD_VAR 0 6
21370: IN
21371: NOT
21372: OR
21373: IFFALSE 21680
// begin if dep then
21375: LD_VAR 0 17
21379: IFFALSE 21515
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21381: LD_ADDR_VAR 0 16
21385: PUSH
21386: LD_VAR 0 17
21390: PUSH
21391: LD_INT 1
21393: ARRAY
21394: PPUSH
21395: CALL_OW 250
21399: PPUSH
21400: LD_VAR 0 17
21404: PUSH
21405: LD_INT 1
21407: ARRAY
21408: PPUSH
21409: CALL_OW 254
21413: PPUSH
21414: LD_INT 5
21416: PPUSH
21417: CALL_OW 272
21421: PUSH
21422: LD_VAR 0 17
21426: PUSH
21427: LD_INT 1
21429: ARRAY
21430: PPUSH
21431: CALL_OW 251
21435: PPUSH
21436: LD_VAR 0 17
21440: PUSH
21441: LD_INT 1
21443: ARRAY
21444: PPUSH
21445: CALL_OW 254
21449: PPUSH
21450: LD_INT 5
21452: PPUSH
21453: CALL_OW 273
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21462: LD_VAR 0 16
21466: PUSH
21467: LD_INT 1
21469: ARRAY
21470: PPUSH
21471: LD_VAR 0 16
21475: PUSH
21476: LD_INT 2
21478: ARRAY
21479: PPUSH
21480: CALL_OW 488
21484: IFFALSE 21515
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21486: LD_VAR 0 13
21490: PPUSH
21491: LD_VAR 0 16
21495: PUSH
21496: LD_INT 1
21498: ARRAY
21499: PPUSH
21500: LD_VAR 0 16
21504: PUSH
21505: LD_INT 2
21507: ARRAY
21508: PPUSH
21509: CALL_OW 111
// continue ;
21513: GO 21005
// end ; end ; r := GetDir ( tmp ) ;
21515: LD_ADDR_VAR 0 15
21519: PUSH
21520: LD_VAR 0 13
21524: PPUSH
21525: CALL_OW 254
21529: ST_TO_ADDR
// if r = 5 then
21530: LD_VAR 0 15
21534: PUSH
21535: LD_INT 5
21537: EQUAL
21538: IFFALSE 21548
// r := 0 ;
21540: LD_ADDR_VAR 0 15
21544: PUSH
21545: LD_INT 0
21547: ST_TO_ADDR
// for j = r to 5 do
21548: LD_ADDR_VAR 0 10
21552: PUSH
21553: DOUBLE
21554: LD_VAR 0 15
21558: DEC
21559: ST_TO_ADDR
21560: LD_INT 5
21562: PUSH
21563: FOR_TO
21564: IFFALSE 21678
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21566: LD_ADDR_VAR 0 11
21570: PUSH
21571: LD_VAR 0 13
21575: PPUSH
21576: CALL_OW 250
21580: PPUSH
21581: LD_VAR 0 10
21585: PPUSH
21586: LD_INT 2
21588: PPUSH
21589: CALL_OW 272
21593: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21594: LD_ADDR_VAR 0 12
21598: PUSH
21599: LD_VAR 0 13
21603: PPUSH
21604: CALL_OW 251
21608: PPUSH
21609: LD_VAR 0 10
21613: PPUSH
21614: LD_INT 2
21616: PPUSH
21617: CALL_OW 273
21621: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21622: LD_VAR 0 11
21626: PPUSH
21627: LD_VAR 0 12
21631: PPUSH
21632: CALL_OW 488
21636: PUSH
21637: LD_VAR 0 11
21641: PPUSH
21642: LD_VAR 0 12
21646: PPUSH
21647: CALL_OW 428
21651: NOT
21652: AND
21653: IFFALSE 21676
// begin ComMoveXY ( tmp , _x , _y ) ;
21655: LD_VAR 0 13
21659: PPUSH
21660: LD_VAR 0 11
21664: PPUSH
21665: LD_VAR 0 12
21669: PPUSH
21670: CALL_OW 111
// break ;
21674: GO 21678
// end ; end ;
21676: GO 21563
21678: POP
21679: POP
// end ; end ;
21680: GO 21005
21682: POP
21683: POP
// end ;
21684: LD_VAR 0 8
21688: RET
// export function BuildingTechInvented ( side , btype ) ; begin
21689: LD_INT 0
21691: PPUSH
// result := true ;
21692: LD_ADDR_VAR 0 3
21696: PUSH
21697: LD_INT 1
21699: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
21700: LD_VAR 0 2
21704: PUSH
21705: LD_INT 24
21707: DOUBLE
21708: EQUAL
21709: IFTRUE 21719
21711: LD_INT 33
21713: DOUBLE
21714: EQUAL
21715: IFTRUE 21719
21717: GO 21744
21719: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
21720: LD_ADDR_VAR 0 3
21724: PUSH
21725: LD_INT 32
21727: PPUSH
21728: LD_VAR 0 1
21732: PPUSH
21733: CALL_OW 321
21737: PUSH
21738: LD_INT 2
21740: EQUAL
21741: ST_TO_ADDR
21742: GO 22060
21744: LD_INT 20
21746: DOUBLE
21747: EQUAL
21748: IFTRUE 21752
21750: GO 21777
21752: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
21753: LD_ADDR_VAR 0 3
21757: PUSH
21758: LD_INT 6
21760: PPUSH
21761: LD_VAR 0 1
21765: PPUSH
21766: CALL_OW 321
21770: PUSH
21771: LD_INT 2
21773: EQUAL
21774: ST_TO_ADDR
21775: GO 22060
21777: LD_INT 22
21779: DOUBLE
21780: EQUAL
21781: IFTRUE 21791
21783: LD_INT 36
21785: DOUBLE
21786: EQUAL
21787: IFTRUE 21791
21789: GO 21816
21791: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
21792: LD_ADDR_VAR 0 3
21796: PUSH
21797: LD_INT 15
21799: PPUSH
21800: LD_VAR 0 1
21804: PPUSH
21805: CALL_OW 321
21809: PUSH
21810: LD_INT 2
21812: EQUAL
21813: ST_TO_ADDR
21814: GO 22060
21816: LD_INT 30
21818: DOUBLE
21819: EQUAL
21820: IFTRUE 21824
21822: GO 21849
21824: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
21825: LD_ADDR_VAR 0 3
21829: PUSH
21830: LD_INT 20
21832: PPUSH
21833: LD_VAR 0 1
21837: PPUSH
21838: CALL_OW 321
21842: PUSH
21843: LD_INT 2
21845: EQUAL
21846: ST_TO_ADDR
21847: GO 22060
21849: LD_INT 28
21851: DOUBLE
21852: EQUAL
21853: IFTRUE 21863
21855: LD_INT 21
21857: DOUBLE
21858: EQUAL
21859: IFTRUE 21863
21861: GO 21888
21863: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
21864: LD_ADDR_VAR 0 3
21868: PUSH
21869: LD_INT 21
21871: PPUSH
21872: LD_VAR 0 1
21876: PPUSH
21877: CALL_OW 321
21881: PUSH
21882: LD_INT 2
21884: EQUAL
21885: ST_TO_ADDR
21886: GO 22060
21888: LD_INT 16
21890: DOUBLE
21891: EQUAL
21892: IFTRUE 21896
21894: GO 21921
21896: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
21897: LD_ADDR_VAR 0 3
21901: PUSH
21902: LD_INT 84
21904: PPUSH
21905: LD_VAR 0 1
21909: PPUSH
21910: CALL_OW 321
21914: PUSH
21915: LD_INT 2
21917: EQUAL
21918: ST_TO_ADDR
21919: GO 22060
21921: LD_INT 19
21923: DOUBLE
21924: EQUAL
21925: IFTRUE 21935
21927: LD_INT 23
21929: DOUBLE
21930: EQUAL
21931: IFTRUE 21935
21933: GO 21960
21935: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
21936: LD_ADDR_VAR 0 3
21940: PUSH
21941: LD_INT 83
21943: PPUSH
21944: LD_VAR 0 1
21948: PPUSH
21949: CALL_OW 321
21953: PUSH
21954: LD_INT 2
21956: EQUAL
21957: ST_TO_ADDR
21958: GO 22060
21960: LD_INT 17
21962: DOUBLE
21963: EQUAL
21964: IFTRUE 21968
21966: GO 21993
21968: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
21969: LD_ADDR_VAR 0 3
21973: PUSH
21974: LD_INT 39
21976: PPUSH
21977: LD_VAR 0 1
21981: PPUSH
21982: CALL_OW 321
21986: PUSH
21987: LD_INT 2
21989: EQUAL
21990: ST_TO_ADDR
21991: GO 22060
21993: LD_INT 18
21995: DOUBLE
21996: EQUAL
21997: IFTRUE 22001
21999: GO 22026
22001: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22002: LD_ADDR_VAR 0 3
22006: PUSH
22007: LD_INT 40
22009: PPUSH
22010: LD_VAR 0 1
22014: PPUSH
22015: CALL_OW 321
22019: PUSH
22020: LD_INT 2
22022: EQUAL
22023: ST_TO_ADDR
22024: GO 22060
22026: LD_INT 27
22028: DOUBLE
22029: EQUAL
22030: IFTRUE 22034
22032: GO 22059
22034: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22035: LD_ADDR_VAR 0 3
22039: PUSH
22040: LD_INT 35
22042: PPUSH
22043: LD_VAR 0 1
22047: PPUSH
22048: CALL_OW 321
22052: PUSH
22053: LD_INT 2
22055: EQUAL
22056: ST_TO_ADDR
22057: GO 22060
22059: POP
// end ;
22060: LD_VAR 0 3
22064: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22065: LD_INT 0
22067: PPUSH
22068: PPUSH
22069: PPUSH
22070: PPUSH
22071: PPUSH
22072: PPUSH
22073: PPUSH
22074: PPUSH
22075: PPUSH
22076: PPUSH
22077: PPUSH
// result := false ;
22078: LD_ADDR_VAR 0 6
22082: PUSH
22083: LD_INT 0
22085: ST_TO_ADDR
// if btype = b_depot then
22086: LD_VAR 0 2
22090: PUSH
22091: LD_INT 0
22093: EQUAL
22094: IFFALSE 22106
// begin result := true ;
22096: LD_ADDR_VAR 0 6
22100: PUSH
22101: LD_INT 1
22103: ST_TO_ADDR
// exit ;
22104: GO 22932
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22106: LD_VAR 0 1
22110: NOT
22111: PUSH
22112: LD_VAR 0 1
22116: PPUSH
22117: CALL_OW 266
22121: PUSH
22122: LD_INT 0
22124: PUSH
22125: LD_INT 1
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: IN
22132: NOT
22133: OR
22134: PUSH
22135: LD_VAR 0 2
22139: NOT
22140: OR
22141: PUSH
22142: LD_VAR 0 5
22146: PUSH
22147: LD_INT 0
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: LD_INT 2
22155: PUSH
22156: LD_INT 3
22158: PUSH
22159: LD_INT 4
22161: PUSH
22162: LD_INT 5
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: IN
22173: NOT
22174: OR
22175: PUSH
22176: LD_VAR 0 3
22180: PPUSH
22181: LD_VAR 0 4
22185: PPUSH
22186: CALL_OW 488
22190: NOT
22191: OR
22192: IFFALSE 22196
// exit ;
22194: GO 22932
// side := GetSide ( depot ) ;
22196: LD_ADDR_VAR 0 9
22200: PUSH
22201: LD_VAR 0 1
22205: PPUSH
22206: CALL_OW 255
22210: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22211: LD_VAR 0 9
22215: PPUSH
22216: LD_VAR 0 2
22220: PPUSH
22221: CALL 21689 0 2
22225: NOT
22226: IFFALSE 22230
// exit ;
22228: GO 22932
// pom := GetBase ( depot ) ;
22230: LD_ADDR_VAR 0 10
22234: PUSH
22235: LD_VAR 0 1
22239: PPUSH
22240: CALL_OW 274
22244: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22245: LD_ADDR_VAR 0 11
22249: PUSH
22250: LD_VAR 0 2
22254: PPUSH
22255: LD_VAR 0 1
22259: PPUSH
22260: CALL_OW 248
22264: PPUSH
22265: CALL_OW 450
22269: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22270: LD_VAR 0 10
22274: PPUSH
22275: LD_INT 1
22277: PPUSH
22278: CALL_OW 275
22282: PUSH
22283: LD_VAR 0 11
22287: PUSH
22288: LD_INT 1
22290: ARRAY
22291: GREATEREQUAL
22292: PUSH
22293: LD_VAR 0 10
22297: PPUSH
22298: LD_INT 2
22300: PPUSH
22301: CALL_OW 275
22305: PUSH
22306: LD_VAR 0 11
22310: PUSH
22311: LD_INT 2
22313: ARRAY
22314: GREATEREQUAL
22315: AND
22316: PUSH
22317: LD_VAR 0 10
22321: PPUSH
22322: LD_INT 3
22324: PPUSH
22325: CALL_OW 275
22329: PUSH
22330: LD_VAR 0 11
22334: PUSH
22335: LD_INT 3
22337: ARRAY
22338: GREATEREQUAL
22339: AND
22340: NOT
22341: IFFALSE 22345
// exit ;
22343: GO 22932
// if GetBType ( depot ) = b_depot then
22345: LD_VAR 0 1
22349: PPUSH
22350: CALL_OW 266
22354: PUSH
22355: LD_INT 0
22357: EQUAL
22358: IFFALSE 22370
// dist := 28 else
22360: LD_ADDR_VAR 0 14
22364: PUSH
22365: LD_INT 28
22367: ST_TO_ADDR
22368: GO 22378
// dist := 36 ;
22370: LD_ADDR_VAR 0 14
22374: PUSH
22375: LD_INT 36
22377: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22378: LD_VAR 0 1
22382: PPUSH
22383: LD_VAR 0 3
22387: PPUSH
22388: LD_VAR 0 4
22392: PPUSH
22393: CALL_OW 297
22397: PUSH
22398: LD_VAR 0 14
22402: GREATER
22403: IFFALSE 22407
// exit ;
22405: GO 22932
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22407: LD_ADDR_VAR 0 12
22411: PUSH
22412: LD_VAR 0 2
22416: PPUSH
22417: LD_VAR 0 3
22421: PPUSH
22422: LD_VAR 0 4
22426: PPUSH
22427: LD_VAR 0 5
22431: PPUSH
22432: LD_VAR 0 1
22436: PPUSH
22437: CALL_OW 248
22441: PPUSH
22442: LD_INT 0
22444: PPUSH
22445: CALL 22937 0 6
22449: ST_TO_ADDR
// if not hexes then
22450: LD_VAR 0 12
22454: NOT
22455: IFFALSE 22459
// exit ;
22457: GO 22932
// hex := GetHexInfo ( x , y ) ;
22459: LD_ADDR_VAR 0 15
22463: PUSH
22464: LD_VAR 0 3
22468: PPUSH
22469: LD_VAR 0 4
22473: PPUSH
22474: CALL_OW 546
22478: ST_TO_ADDR
// if hex [ 1 ] then
22479: LD_VAR 0 15
22483: PUSH
22484: LD_INT 1
22486: ARRAY
22487: IFFALSE 22491
// exit ;
22489: GO 22932
// height := hex [ 2 ] ;
22491: LD_ADDR_VAR 0 13
22495: PUSH
22496: LD_VAR 0 15
22500: PUSH
22501: LD_INT 2
22503: ARRAY
22504: ST_TO_ADDR
// for i = 1 to hexes do
22505: LD_ADDR_VAR 0 7
22509: PUSH
22510: DOUBLE
22511: LD_INT 1
22513: DEC
22514: ST_TO_ADDR
22515: LD_VAR 0 12
22519: PUSH
22520: FOR_TO
22521: IFFALSE 22851
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22523: LD_VAR 0 12
22527: PUSH
22528: LD_VAR 0 7
22532: ARRAY
22533: PUSH
22534: LD_INT 1
22536: ARRAY
22537: PPUSH
22538: LD_VAR 0 12
22542: PUSH
22543: LD_VAR 0 7
22547: ARRAY
22548: PUSH
22549: LD_INT 2
22551: ARRAY
22552: PPUSH
22553: CALL_OW 488
22557: NOT
22558: PUSH
22559: LD_VAR 0 12
22563: PUSH
22564: LD_VAR 0 7
22568: ARRAY
22569: PUSH
22570: LD_INT 1
22572: ARRAY
22573: PPUSH
22574: LD_VAR 0 12
22578: PUSH
22579: LD_VAR 0 7
22583: ARRAY
22584: PUSH
22585: LD_INT 2
22587: ARRAY
22588: PPUSH
22589: CALL_OW 428
22593: PUSH
22594: LD_INT 0
22596: GREATER
22597: OR
22598: PUSH
22599: LD_VAR 0 12
22603: PUSH
22604: LD_VAR 0 7
22608: ARRAY
22609: PUSH
22610: LD_INT 1
22612: ARRAY
22613: PPUSH
22614: LD_VAR 0 12
22618: PUSH
22619: LD_VAR 0 7
22623: ARRAY
22624: PUSH
22625: LD_INT 2
22627: ARRAY
22628: PPUSH
22629: CALL_OW 351
22633: OR
22634: IFFALSE 22640
// exit ;
22636: POP
22637: POP
22638: GO 22932
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22640: LD_ADDR_VAR 0 8
22644: PUSH
22645: LD_VAR 0 12
22649: PUSH
22650: LD_VAR 0 7
22654: ARRAY
22655: PUSH
22656: LD_INT 1
22658: ARRAY
22659: PPUSH
22660: LD_VAR 0 12
22664: PUSH
22665: LD_VAR 0 7
22669: ARRAY
22670: PUSH
22671: LD_INT 2
22673: ARRAY
22674: PPUSH
22675: CALL_OW 546
22679: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22680: LD_VAR 0 8
22684: PUSH
22685: LD_INT 1
22687: ARRAY
22688: PUSH
22689: LD_VAR 0 8
22693: PUSH
22694: LD_INT 2
22696: ARRAY
22697: PUSH
22698: LD_VAR 0 13
22702: PUSH
22703: LD_INT 2
22705: PLUS
22706: GREATER
22707: OR
22708: PUSH
22709: LD_VAR 0 8
22713: PUSH
22714: LD_INT 2
22716: ARRAY
22717: PUSH
22718: LD_VAR 0 13
22722: PUSH
22723: LD_INT 2
22725: MINUS
22726: LESS
22727: OR
22728: PUSH
22729: LD_VAR 0 8
22733: PUSH
22734: LD_INT 3
22736: ARRAY
22737: PUSH
22738: LD_INT 0
22740: PUSH
22741: LD_INT 8
22743: PUSH
22744: LD_INT 9
22746: PUSH
22747: LD_INT 10
22749: PUSH
22750: LD_INT 11
22752: PUSH
22753: LD_INT 12
22755: PUSH
22756: LD_INT 13
22758: PUSH
22759: LD_INT 16
22761: PUSH
22762: LD_INT 17
22764: PUSH
22765: LD_INT 18
22767: PUSH
22768: LD_INT 19
22770: PUSH
22771: LD_INT 20
22773: PUSH
22774: LD_INT 21
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: IN
22792: NOT
22793: OR
22794: PUSH
22795: LD_VAR 0 8
22799: PUSH
22800: LD_INT 5
22802: ARRAY
22803: NOT
22804: OR
22805: PUSH
22806: LD_VAR 0 8
22810: PUSH
22811: LD_INT 6
22813: ARRAY
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: LD_INT 2
22820: PUSH
22821: LD_INT 7
22823: PUSH
22824: LD_INT 9
22826: PUSH
22827: LD_INT 10
22829: PUSH
22830: LD_INT 11
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: IN
22841: NOT
22842: OR
22843: IFFALSE 22849
// exit ;
22845: POP
22846: POP
22847: GO 22932
// end ;
22849: GO 22520
22851: POP
22852: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
22853: LD_VAR 0 9
22857: PPUSH
22858: LD_VAR 0 3
22862: PPUSH
22863: LD_VAR 0 4
22867: PPUSH
22868: LD_INT 20
22870: PPUSH
22871: CALL 14855 0 4
22875: PUSH
22876: LD_INT 4
22878: ARRAY
22879: IFFALSE 22883
// exit ;
22881: GO 22932
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
22883: LD_VAR 0 2
22887: PUSH
22888: LD_INT 29
22890: PUSH
22891: LD_INT 30
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: IN
22898: PUSH
22899: LD_VAR 0 3
22903: PPUSH
22904: LD_VAR 0 4
22908: PPUSH
22909: LD_VAR 0 9
22913: PPUSH
22914: CALL_OW 440
22918: NOT
22919: AND
22920: IFFALSE 22924
// exit ;
22922: GO 22932
// result := true ;
22924: LD_ADDR_VAR 0 6
22928: PUSH
22929: LD_INT 1
22931: ST_TO_ADDR
// end ;
22932: LD_VAR 0 6
22936: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
22937: LD_INT 0
22939: PPUSH
22940: PPUSH
22941: PPUSH
22942: PPUSH
22943: PPUSH
22944: PPUSH
22945: PPUSH
22946: PPUSH
22947: PPUSH
22948: PPUSH
22949: PPUSH
22950: PPUSH
22951: PPUSH
22952: PPUSH
22953: PPUSH
22954: PPUSH
22955: PPUSH
22956: PPUSH
22957: PPUSH
22958: PPUSH
22959: PPUSH
22960: PPUSH
22961: PPUSH
22962: PPUSH
22963: PPUSH
22964: PPUSH
22965: PPUSH
22966: PPUSH
22967: PPUSH
22968: PPUSH
22969: PPUSH
22970: PPUSH
22971: PPUSH
22972: PPUSH
22973: PPUSH
22974: PPUSH
22975: PPUSH
22976: PPUSH
22977: PPUSH
22978: PPUSH
22979: PPUSH
22980: PPUSH
22981: PPUSH
22982: PPUSH
22983: PPUSH
22984: PPUSH
22985: PPUSH
22986: PPUSH
22987: PPUSH
22988: PPUSH
22989: PPUSH
22990: PPUSH
22991: PPUSH
22992: PPUSH
22993: PPUSH
22994: PPUSH
22995: PPUSH
22996: PPUSH
// result = [ ] ;
22997: LD_ADDR_VAR 0 7
23001: PUSH
23002: EMPTY
23003: ST_TO_ADDR
// temp_list = [ ] ;
23004: LD_ADDR_VAR 0 9
23008: PUSH
23009: EMPTY
23010: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23011: LD_VAR 0 4
23015: PUSH
23016: LD_INT 0
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: LD_INT 2
23024: PUSH
23025: LD_INT 3
23027: PUSH
23028: LD_INT 4
23030: PUSH
23031: LD_INT 5
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: IN
23042: NOT
23043: PUSH
23044: LD_VAR 0 1
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: LD_INT 1
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: IN
23059: PUSH
23060: LD_VAR 0 5
23064: PUSH
23065: LD_INT 1
23067: PUSH
23068: LD_INT 2
23070: PUSH
23071: LD_INT 3
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: LIST
23078: IN
23079: NOT
23080: AND
23081: OR
23082: IFFALSE 23086
// exit ;
23084: GO 41477
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23086: LD_VAR 0 1
23090: PUSH
23091: LD_INT 6
23093: PUSH
23094: LD_INT 7
23096: PUSH
23097: LD_INT 8
23099: PUSH
23100: LD_INT 13
23102: PUSH
23103: LD_INT 12
23105: PUSH
23106: LD_INT 15
23108: PUSH
23109: LD_INT 11
23111: PUSH
23112: LD_INT 14
23114: PUSH
23115: LD_INT 10
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: IN
23129: IFFALSE 23139
// btype = b_lab ;
23131: LD_ADDR_VAR 0 1
23135: PUSH
23136: LD_INT 6
23138: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23139: LD_VAR 0 6
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: LD_INT 1
23149: PUSH
23150: LD_INT 2
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: LIST
23157: IN
23158: NOT
23159: PUSH
23160: LD_VAR 0 1
23164: PUSH
23165: LD_INT 0
23167: PUSH
23168: LD_INT 1
23170: PUSH
23171: LD_INT 2
23173: PUSH
23174: LD_INT 3
23176: PUSH
23177: LD_INT 6
23179: PUSH
23180: LD_INT 36
23182: PUSH
23183: LD_INT 4
23185: PUSH
23186: LD_INT 5
23188: PUSH
23189: LD_INT 31
23191: PUSH
23192: LD_INT 32
23194: PUSH
23195: LD_INT 33
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: IN
23211: NOT
23212: PUSH
23213: LD_VAR 0 6
23217: PUSH
23218: LD_INT 1
23220: EQUAL
23221: AND
23222: OR
23223: PUSH
23224: LD_VAR 0 1
23228: PUSH
23229: LD_INT 2
23231: PUSH
23232: LD_INT 3
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: IN
23239: NOT
23240: PUSH
23241: LD_VAR 0 6
23245: PUSH
23246: LD_INT 2
23248: EQUAL
23249: AND
23250: OR
23251: IFFALSE 23261
// mode = 0 ;
23253: LD_ADDR_VAR 0 6
23257: PUSH
23258: LD_INT 0
23260: ST_TO_ADDR
// case mode of 0 :
23261: LD_VAR 0 6
23265: PUSH
23266: LD_INT 0
23268: DOUBLE
23269: EQUAL
23270: IFTRUE 23274
23272: GO 34727
23274: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23275: LD_ADDR_VAR 0 11
23279: PUSH
23280: LD_INT 0
23282: PUSH
23283: LD_INT 0
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 0
23292: PUSH
23293: LD_INT 1
23295: NEG
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: LD_INT 0
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 1
23313: PUSH
23314: LD_INT 1
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 0
23323: PUSH
23324: LD_INT 1
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 1
23333: NEG
23334: PUSH
23335: LD_INT 0
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 1
23344: NEG
23345: PUSH
23346: LD_INT 1
23348: NEG
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 1
23356: NEG
23357: PUSH
23358: LD_INT 2
23360: NEG
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 0
23368: PUSH
23369: LD_INT 2
23371: NEG
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 1
23379: PUSH
23380: LD_INT 1
23382: NEG
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: LD_INT 2
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 0
23400: PUSH
23401: LD_INT 2
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 1
23410: NEG
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: PUSH
23422: LD_INT 3
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 0
23431: PUSH
23432: LD_INT 3
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 1
23441: NEG
23442: PUSH
23443: LD_INT 2
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23468: LD_ADDR_VAR 0 12
23472: PUSH
23473: LD_INT 0
23475: PUSH
23476: LD_INT 0
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 0
23485: PUSH
23486: LD_INT 1
23488: NEG
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: LD_INT 1
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 0
23516: PUSH
23517: LD_INT 1
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 1
23526: NEG
23527: PUSH
23528: LD_INT 0
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 1
23537: NEG
23538: PUSH
23539: LD_INT 1
23541: NEG
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 1
23549: PUSH
23550: LD_INT 1
23552: NEG
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 2
23560: PUSH
23561: LD_INT 0
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 2
23570: PUSH
23571: LD_INT 1
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 1
23580: NEG
23581: PUSH
23582: LD_INT 1
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 2
23591: NEG
23592: PUSH
23593: LD_INT 0
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 2
23602: NEG
23603: PUSH
23604: LD_INT 1
23606: NEG
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 2
23614: NEG
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 3
23625: NEG
23626: PUSH
23627: LD_INT 0
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 3
23636: NEG
23637: PUSH
23638: LD_INT 1
23640: NEG
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23664: LD_ADDR_VAR 0 13
23668: PUSH
23669: LD_INT 0
23671: PUSH
23672: LD_INT 0
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: LD_INT 1
23684: NEG
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 1
23692: PUSH
23693: LD_INT 0
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: PUSH
23703: LD_INT 1
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 1
23722: NEG
23723: PUSH
23724: LD_INT 0
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 1
23733: NEG
23734: PUSH
23735: LD_INT 1
23737: NEG
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 1
23745: NEG
23746: PUSH
23747: LD_INT 2
23749: NEG
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 2
23757: PUSH
23758: LD_INT 1
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 2
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 1
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 2
23787: NEG
23788: PUSH
23789: LD_INT 1
23791: NEG
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 2
23799: NEG
23800: PUSH
23801: LD_INT 2
23803: NEG
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 2
23811: NEG
23812: PUSH
23813: LD_INT 3
23815: NEG
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 3
23823: NEG
23824: PUSH
23825: LD_INT 2
23827: NEG
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 3
23835: NEG
23836: PUSH
23837: LD_INT 3
23839: NEG
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23863: LD_ADDR_VAR 0 14
23867: PUSH
23868: LD_INT 0
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 0
23880: PUSH
23881: LD_INT 1
23883: NEG
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 1
23891: PUSH
23892: LD_INT 0
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 1
23901: PUSH
23902: LD_INT 1
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: LD_INT 1
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 1
23921: NEG
23922: PUSH
23923: LD_INT 0
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 1
23932: NEG
23933: PUSH
23934: LD_INT 1
23936: NEG
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 1
23944: NEG
23945: PUSH
23946: LD_INT 2
23948: NEG
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: LD_INT 2
23959: NEG
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 1
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: LD_INT 2
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: LD_INT 2
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 1
23998: NEG
23999: PUSH
24000: LD_INT 1
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 1
24009: NEG
24010: PUSH
24011: LD_INT 3
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 0
24021: PUSH
24022: LD_INT 3
24024: NEG
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 1
24032: PUSH
24033: LD_INT 2
24035: NEG
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24059: LD_ADDR_VAR 0 15
24063: PUSH
24064: LD_INT 0
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 0
24076: PUSH
24077: LD_INT 1
24079: NEG
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 1
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: PUSH
24098: LD_INT 1
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 1
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 1
24117: NEG
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: NEG
24129: PUSH
24130: LD_INT 1
24132: NEG
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 1
24140: PUSH
24141: LD_INT 1
24143: NEG
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 2
24151: PUSH
24152: LD_INT 0
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 2
24161: PUSH
24162: LD_INT 1
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: NEG
24172: PUSH
24173: LD_INT 1
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 2
24182: NEG
24183: PUSH
24184: LD_INT 0
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 2
24193: NEG
24194: PUSH
24195: LD_INT 1
24197: NEG
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 2
24205: PUSH
24206: LD_INT 1
24208: NEG
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 3
24216: PUSH
24217: LD_INT 0
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 3
24226: PUSH
24227: LD_INT 1
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24252: LD_ADDR_VAR 0 16
24256: PUSH
24257: LD_INT 0
24259: PUSH
24260: LD_INT 0
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: LD_INT 1
24272: NEG
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: LD_INT 0
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 1
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 0
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 1
24310: NEG
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 1
24321: NEG
24322: PUSH
24323: LD_INT 1
24325: NEG
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: LD_INT 2
24337: NEG
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 2
24345: PUSH
24346: LD_INT 1
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 2
24355: PUSH
24356: LD_INT 2
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: LD_INT 2
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 2
24375: NEG
24376: PUSH
24377: LD_INT 1
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 2
24387: NEG
24388: PUSH
24389: LD_INT 2
24391: NEG
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 3
24399: PUSH
24400: LD_INT 2
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 3
24409: PUSH
24410: LD_INT 3
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 2
24419: PUSH
24420: LD_INT 3
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24445: LD_ADDR_VAR 0 17
24449: PUSH
24450: LD_INT 0
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 0
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 1
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 1
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 0
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 1
24503: NEG
24504: PUSH
24505: LD_INT 0
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: LD_INT 1
24518: NEG
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 1
24526: NEG
24527: PUSH
24528: LD_INT 2
24530: NEG
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 0
24538: PUSH
24539: LD_INT 2
24541: NEG
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: LD_INT 1
24552: NEG
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 2
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 2
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 2
24580: PUSH
24581: LD_INT 2
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: LD_INT 2
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 0
24600: PUSH
24601: LD_INT 2
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 1
24610: NEG
24611: PUSH
24612: LD_INT 1
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 2
24621: NEG
24622: PUSH
24623: LD_INT 0
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 2
24632: NEG
24633: PUSH
24634: LD_INT 1
24636: NEG
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 2
24644: NEG
24645: PUSH
24646: LD_INT 2
24648: NEG
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24675: LD_ADDR_VAR 0 18
24679: PUSH
24680: LD_INT 0
24682: PUSH
24683: LD_INT 0
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 0
24692: PUSH
24693: LD_INT 1
24695: NEG
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 1
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 1
24733: NEG
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 1
24744: NEG
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 1
24756: NEG
24757: PUSH
24758: LD_INT 2
24760: NEG
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: LD_INT 2
24771: NEG
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: LD_INT 1
24782: NEG
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 2
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 2
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 2
24810: PUSH
24811: LD_INT 2
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: LD_INT 2
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 0
24830: PUSH
24831: LD_INT 2
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 1
24840: NEG
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 2
24851: NEG
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 2
24862: NEG
24863: PUSH
24864: LD_INT 1
24866: NEG
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 2
24874: NEG
24875: PUSH
24876: LD_INT 2
24878: NEG
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24905: LD_ADDR_VAR 0 19
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: LD_INT 0
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: LD_INT 1
24925: NEG
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 1
24933: PUSH
24934: LD_INT 0
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 1
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: LD_INT 1
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 1
24963: NEG
24964: PUSH
24965: LD_INT 0
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 1
24974: NEG
24975: PUSH
24976: LD_INT 1
24978: NEG
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 1
24986: NEG
24987: PUSH
24988: LD_INT 2
24990: NEG
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 0
24998: PUSH
24999: LD_INT 2
25001: NEG
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: LD_INT 1
25012: NEG
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: LD_INT 2
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 2
25030: PUSH
25031: LD_INT 1
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 2
25040: PUSH
25041: LD_INT 2
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 1
25050: PUSH
25051: LD_INT 2
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 0
25060: PUSH
25061: LD_INT 2
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 1
25070: NEG
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 2
25081: NEG
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 2
25092: NEG
25093: PUSH
25094: LD_INT 1
25096: NEG
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 2
25104: NEG
25105: PUSH
25106: LD_INT 2
25108: NEG
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25135: LD_ADDR_VAR 0 20
25139: PUSH
25140: LD_INT 0
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 0
25152: PUSH
25153: LD_INT 1
25155: NEG
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 1
25163: PUSH
25164: LD_INT 0
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 1
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 0
25183: PUSH
25184: LD_INT 1
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 1
25193: NEG
25194: PUSH
25195: LD_INT 0
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 1
25204: NEG
25205: PUSH
25206: LD_INT 1
25208: NEG
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 1
25216: NEG
25217: PUSH
25218: LD_INT 2
25220: NEG
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 0
25228: PUSH
25229: LD_INT 2
25231: NEG
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: LD_INT 1
25242: NEG
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 2
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 2
25260: PUSH
25261: LD_INT 1
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 2
25270: PUSH
25271: LD_INT 2
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 1
25280: PUSH
25281: LD_INT 2
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 0
25290: PUSH
25291: LD_INT 2
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 1
25300: NEG
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 2
25311: NEG
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 2
25322: NEG
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 2
25334: NEG
25335: PUSH
25336: LD_INT 2
25338: NEG
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25365: LD_ADDR_VAR 0 21
25369: PUSH
25370: LD_INT 0
25372: PUSH
25373: LD_INT 0
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 0
25382: PUSH
25383: LD_INT 1
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: LD_INT 1
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 0
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 1
25423: NEG
25424: PUSH
25425: LD_INT 0
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: LD_INT 1
25438: NEG
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: LD_INT 2
25450: NEG
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 0
25458: PUSH
25459: LD_INT 2
25461: NEG
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 1
25469: PUSH
25470: LD_INT 1
25472: NEG
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 2
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 2
25490: PUSH
25491: LD_INT 1
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 2
25500: PUSH
25501: LD_INT 2
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 1
25510: PUSH
25511: LD_INT 2
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: LD_INT 2
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 2
25541: NEG
25542: PUSH
25543: LD_INT 0
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 2
25552: NEG
25553: PUSH
25554: LD_INT 1
25556: NEG
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 2
25564: NEG
25565: PUSH
25566: LD_INT 2
25568: NEG
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25595: LD_ADDR_VAR 0 22
25599: PUSH
25600: LD_INT 0
25602: PUSH
25603: LD_INT 0
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 0
25612: PUSH
25613: LD_INT 1
25615: NEG
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 1
25623: PUSH
25624: LD_INT 0
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 1
25633: PUSH
25634: LD_INT 1
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 0
25643: PUSH
25644: LD_INT 1
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: LD_INT 0
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 1
25664: NEG
25665: PUSH
25666: LD_INT 1
25668: NEG
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: LD_INT 2
25680: NEG
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 0
25688: PUSH
25689: LD_INT 2
25691: NEG
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 1
25699: PUSH
25700: LD_INT 1
25702: NEG
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 2
25710: PUSH
25711: LD_INT 0
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 2
25720: PUSH
25721: LD_INT 1
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 2
25730: PUSH
25731: LD_INT 2
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 1
25740: PUSH
25741: LD_INT 2
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 0
25750: PUSH
25751: LD_INT 2
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 1
25760: NEG
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 2
25771: NEG
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 2
25782: NEG
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 2
25794: NEG
25795: PUSH
25796: LD_INT 2
25798: NEG
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
25825: LD_ADDR_VAR 0 23
25829: PUSH
25830: LD_INT 0
25832: PUSH
25833: LD_INT 0
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 0
25842: PUSH
25843: LD_INT 1
25845: NEG
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 1
25853: PUSH
25854: LD_INT 0
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: LD_INT 1
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: NEG
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 1
25894: NEG
25895: PUSH
25896: LD_INT 1
25898: NEG
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 1
25906: NEG
25907: PUSH
25908: LD_INT 2
25910: NEG
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 0
25918: PUSH
25919: LD_INT 2
25921: NEG
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 1
25929: PUSH
25930: LD_INT 1
25932: NEG
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 2
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 2
25950: PUSH
25951: LD_INT 1
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 2
25960: PUSH
25961: LD_INT 2
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 1
25970: PUSH
25971: LD_INT 2
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: LD_INT 1
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 2
26001: NEG
26002: PUSH
26003: LD_INT 0
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 2
26012: NEG
26013: PUSH
26014: LD_INT 1
26016: NEG
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 2
26024: NEG
26025: PUSH
26026: LD_INT 2
26028: NEG
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 2
26036: NEG
26037: PUSH
26038: LD_INT 3
26040: NEG
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: NEG
26049: PUSH
26050: LD_INT 3
26052: NEG
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 1
26060: PUSH
26061: LD_INT 2
26063: NEG
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 2
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26105: LD_ADDR_VAR 0 24
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: LD_INT 1
26125: NEG
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: LD_INT 1
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 1
26163: NEG
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 1
26174: NEG
26175: PUSH
26176: LD_INT 1
26178: NEG
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: LD_INT 2
26190: NEG
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: LD_INT 2
26201: NEG
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 1
26209: PUSH
26210: LD_INT 1
26212: NEG
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 2
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 2
26230: PUSH
26231: LD_INT 1
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 2
26240: PUSH
26241: LD_INT 2
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 1
26250: PUSH
26251: LD_INT 2
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: LD_INT 2
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 1
26270: NEG
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 2
26281: NEG
26282: PUSH
26283: LD_INT 0
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 2
26292: NEG
26293: PUSH
26294: LD_INT 1
26296: NEG
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 2
26304: NEG
26305: PUSH
26306: LD_INT 2
26308: NEG
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 1
26316: PUSH
26317: LD_INT 2
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 2
26327: PUSH
26328: LD_INT 1
26330: NEG
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 3
26338: PUSH
26339: LD_INT 1
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 3
26348: PUSH
26349: LD_INT 2
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26381: LD_ADDR_VAR 0 25
26385: PUSH
26386: LD_INT 0
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: LD_INT 1
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: NEG
26451: PUSH
26452: LD_INT 1
26454: NEG
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 1
26462: NEG
26463: PUSH
26464: LD_INT 2
26466: NEG
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 0
26474: PUSH
26475: LD_INT 2
26477: NEG
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 1
26485: PUSH
26486: LD_INT 1
26488: NEG
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 2
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 2
26516: PUSH
26517: LD_INT 2
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: LD_INT 2
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 0
26536: PUSH
26537: LD_INT 2
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 1
26546: NEG
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 2
26568: NEG
26569: PUSH
26570: LD_INT 1
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 2
26580: NEG
26581: PUSH
26582: LD_INT 2
26584: NEG
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 3
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 3
26602: PUSH
26603: LD_INT 2
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 2
26612: PUSH
26613: LD_INT 3
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 1
26622: PUSH
26623: LD_INT 3
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26655: LD_ADDR_VAR 0 26
26659: PUSH
26660: LD_INT 0
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 0
26672: PUSH
26673: LD_INT 1
26675: NEG
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 1
26683: PUSH
26684: LD_INT 0
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 1
26693: PUSH
26694: LD_INT 1
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 0
26703: PUSH
26704: LD_INT 1
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 1
26713: NEG
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 1
26724: NEG
26725: PUSH
26726: LD_INT 1
26728: NEG
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: NEG
26737: PUSH
26738: LD_INT 2
26740: NEG
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 0
26748: PUSH
26749: LD_INT 2
26751: NEG
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 1
26759: PUSH
26760: LD_INT 1
26762: NEG
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 2
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 2
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 2
26790: PUSH
26791: LD_INT 2
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: LD_INT 2
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: LD_INT 2
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 1
26820: NEG
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 2
26831: NEG
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 2
26842: NEG
26843: PUSH
26844: LD_INT 1
26846: NEG
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 2
26854: NEG
26855: PUSH
26856: LD_INT 2
26858: NEG
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 2
26866: PUSH
26867: LD_INT 3
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: LD_INT 3
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 1
26886: NEG
26887: PUSH
26888: LD_INT 2
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 2
26897: NEG
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26931: LD_ADDR_VAR 0 27
26935: PUSH
26936: LD_INT 0
26938: PUSH
26939: LD_INT 0
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: LD_INT 1
26951: NEG
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 1
26969: PUSH
26970: LD_INT 1
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: LD_INT 1
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: LD_INT 0
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 1
27000: NEG
27001: PUSH
27002: LD_INT 1
27004: NEG
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 1
27012: NEG
27013: PUSH
27014: LD_INT 2
27016: NEG
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 0
27024: PUSH
27025: LD_INT 2
27027: NEG
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 2
27046: PUSH
27047: LD_INT 0
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 2
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 2
27066: PUSH
27067: LD_INT 2
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: LD_INT 2
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 0
27086: PUSH
27087: LD_INT 2
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 1
27096: NEG
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 2
27107: NEG
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 2
27118: NEG
27119: PUSH
27120: LD_INT 1
27122: NEG
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 2
27130: NEG
27131: PUSH
27132: LD_INT 2
27134: NEG
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: NEG
27143: PUSH
27144: LD_INT 2
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 2
27153: NEG
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 3
27164: NEG
27165: PUSH
27166: LD_INT 1
27168: NEG
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 3
27176: NEG
27177: PUSH
27178: LD_INT 2
27180: NEG
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27211: LD_ADDR_VAR 0 28
27215: PUSH
27216: LD_INT 0
27218: PUSH
27219: LD_INT 0
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: LD_INT 1
27231: NEG
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 1
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: LD_INT 1
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 1
27269: NEG
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: LD_INT 1
27284: NEG
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 1
27292: NEG
27293: PUSH
27294: LD_INT 2
27296: NEG
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: LD_INT 2
27307: NEG
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: LD_INT 1
27318: NEG
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 2
27326: PUSH
27327: LD_INT 0
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 2
27336: PUSH
27337: LD_INT 1
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: LD_INT 2
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 1
27356: PUSH
27357: LD_INT 2
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 0
27366: PUSH
27367: LD_INT 2
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 1
27376: NEG
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 2
27387: NEG
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 2
27398: NEG
27399: PUSH
27400: LD_INT 1
27402: NEG
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 2
27410: NEG
27411: PUSH
27412: LD_INT 2
27414: NEG
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 2
27422: NEG
27423: PUSH
27424: LD_INT 3
27426: NEG
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 1
27434: NEG
27435: PUSH
27436: LD_INT 3
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 3
27446: NEG
27447: PUSH
27448: LD_INT 1
27450: NEG
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 3
27458: NEG
27459: PUSH
27460: LD_INT 2
27462: NEG
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27493: LD_ADDR_VAR 0 29
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: LD_INT 0
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 0
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 1
27521: PUSH
27522: LD_INT 0
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 0
27541: PUSH
27542: LD_INT 1
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: LD_INT 0
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 1
27562: NEG
27563: PUSH
27564: LD_INT 1
27566: NEG
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 1
27574: NEG
27575: PUSH
27576: LD_INT 2
27578: NEG
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 0
27586: PUSH
27587: LD_INT 2
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: LD_INT 1
27600: NEG
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 2
27608: PUSH
27609: LD_INT 0
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 2
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: LD_INT 2
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 0
27638: PUSH
27639: LD_INT 2
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 1
27648: NEG
27649: PUSH
27650: LD_INT 1
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 2
27659: NEG
27660: PUSH
27661: LD_INT 1
27663: NEG
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 2
27671: NEG
27672: PUSH
27673: LD_INT 2
27675: NEG
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 2
27683: NEG
27684: PUSH
27685: LD_INT 3
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 2
27695: PUSH
27696: LD_INT 1
27698: NEG
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 3
27706: PUSH
27707: LD_INT 1
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 1
27716: PUSH
27717: LD_INT 3
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 1
27726: NEG
27727: PUSH
27728: LD_INT 2
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 3
27737: NEG
27738: PUSH
27739: LD_INT 2
27741: NEG
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27772: LD_ADDR_VAR 0 30
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 0
27789: PUSH
27790: LD_INT 1
27792: NEG
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: LD_INT 1
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 1
27830: NEG
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 1
27841: NEG
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 1
27853: NEG
27854: PUSH
27855: LD_INT 2
27857: NEG
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: LD_INT 2
27868: NEG
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 2
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 2
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 2
27907: PUSH
27908: LD_INT 2
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: PUSH
27918: LD_INT 2
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: PUSH
27929: LD_INT 1
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 2
27938: NEG
27939: PUSH
27940: LD_INT 0
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 2
27949: NEG
27950: PUSH
27951: LD_INT 1
27953: NEG
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 1
27961: NEG
27962: PUSH
27963: LD_INT 3
27965: NEG
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 1
27973: PUSH
27974: LD_INT 2
27976: NEG
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 3
27984: PUSH
27985: LD_INT 2
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 2
27994: PUSH
27995: LD_INT 3
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 2
28004: NEG
28005: PUSH
28006: LD_INT 1
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 3
28015: NEG
28016: PUSH
28017: LD_INT 1
28019: NEG
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28050: LD_ADDR_VAR 0 31
28054: PUSH
28055: LD_INT 0
28057: PUSH
28058: LD_INT 0
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 0
28067: PUSH
28068: LD_INT 1
28070: NEG
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 1
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 1
28088: PUSH
28089: LD_INT 1
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 1
28119: NEG
28120: PUSH
28121: LD_INT 1
28123: NEG
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: LD_INT 2
28135: NEG
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 1
28143: PUSH
28144: LD_INT 1
28146: NEG
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 2
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 2
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: LD_INT 2
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: PUSH
28185: LD_INT 2
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: LD_INT 2
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 1
28204: NEG
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 2
28215: NEG
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 2
28227: NEG
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 2
28239: NEG
28240: PUSH
28241: LD_INT 3
28243: NEG
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 3
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: LD_INT 3
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 1
28282: NEG
28283: PUSH
28284: LD_INT 2
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 3
28293: NEG
28294: PUSH
28295: LD_INT 2
28297: NEG
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28328: LD_ADDR_VAR 0 32
28332: PUSH
28333: LD_INT 0
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: LD_INT 1
28348: NEG
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 1
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 0
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: NEG
28387: PUSH
28388: LD_INT 0
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 1
28397: NEG
28398: PUSH
28399: LD_INT 1
28401: NEG
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 1
28409: NEG
28410: PUSH
28411: LD_INT 2
28413: NEG
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: LD_INT 2
28424: NEG
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: LD_INT 1
28435: NEG
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 2
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: LD_INT 2
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 0
28473: PUSH
28474: LD_INT 2
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 1
28483: NEG
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 2
28494: NEG
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 2
28505: NEG
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 1
28517: NEG
28518: PUSH
28519: LD_INT 3
28521: NEG
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 1
28529: PUSH
28530: LD_INT 2
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 3
28540: PUSH
28541: LD_INT 2
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 2
28550: PUSH
28551: LD_INT 3
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 2
28560: NEG
28561: PUSH
28562: LD_INT 1
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 3
28571: NEG
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28606: LD_ADDR_VAR 0 33
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: LD_INT 0
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: LD_INT 1
28626: NEG
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: LD_INT 1
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: LD_INT 1
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: NEG
28665: PUSH
28666: LD_INT 0
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 1
28675: NEG
28676: PUSH
28677: LD_INT 1
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: LD_INT 2
28691: NEG
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 1
28699: PUSH
28700: LD_INT 1
28702: NEG
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: LD_INT 0
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 2
28720: PUSH
28721: LD_INT 1
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 1
28730: PUSH
28731: LD_INT 2
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 0
28740: PUSH
28741: LD_INT 2
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: PUSH
28752: LD_INT 1
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 2
28761: NEG
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 2
28772: NEG
28773: PUSH
28774: LD_INT 1
28776: NEG
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 2
28784: NEG
28785: PUSH
28786: LD_INT 2
28788: NEG
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 2
28796: NEG
28797: PUSH
28798: LD_INT 3
28800: NEG
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: LD_INT 1
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 3
28819: PUSH
28820: LD_INT 1
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: LD_INT 3
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 1
28839: NEG
28840: PUSH
28841: LD_INT 2
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 3
28850: NEG
28851: PUSH
28852: LD_INT 2
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28885: LD_ADDR_VAR 0 34
28889: PUSH
28890: LD_INT 0
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 0
28902: PUSH
28903: LD_INT 1
28905: NEG
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 1
28913: PUSH
28914: LD_INT 0
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 1
28923: PUSH
28924: LD_INT 1
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 0
28933: PUSH
28934: LD_INT 1
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: LD_INT 0
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 1
28954: NEG
28955: PUSH
28956: LD_INT 1
28958: NEG
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 1
28966: NEG
28967: PUSH
28968: LD_INT 2
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 0
28978: PUSH
28979: LD_INT 2
28981: NEG
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: LD_INT 1
28992: NEG
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 2
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 2
29010: PUSH
29011: LD_INT 2
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: LD_INT 2
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 1
29030: NEG
29031: PUSH
29032: LD_INT 1
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 2
29041: NEG
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 2
29052: NEG
29053: PUSH
29054: LD_INT 1
29056: NEG
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 2
29064: NEG
29065: PUSH
29066: LD_INT 2
29068: NEG
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 1
29076: NEG
29077: PUSH
29078: LD_INT 3
29080: NEG
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: LD_INT 2
29091: NEG
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 3
29099: PUSH
29100: LD_INT 2
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 2
29109: PUSH
29110: LD_INT 3
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 2
29119: NEG
29120: PUSH
29121: LD_INT 1
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 3
29130: NEG
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29165: LD_ADDR_VAR 0 35
29169: PUSH
29170: LD_INT 0
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 0
29182: PUSH
29183: LD_INT 1
29185: NEG
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 1
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 1
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 0
29213: PUSH
29214: LD_INT 1
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 1
29223: NEG
29224: PUSH
29225: LD_INT 0
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 1
29234: NEG
29235: PUSH
29236: LD_INT 1
29238: NEG
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 2
29246: PUSH
29247: LD_INT 1
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 2
29256: NEG
29257: PUSH
29258: LD_INT 1
29260: NEG
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29277: LD_ADDR_VAR 0 36
29281: PUSH
29282: LD_INT 0
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 0
29294: PUSH
29295: LD_INT 1
29297: NEG
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: LD_INT 0
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 1
29315: PUSH
29316: LD_INT 1
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 0
29325: PUSH
29326: LD_INT 1
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 1
29335: NEG
29336: PUSH
29337: LD_INT 0
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 1
29346: NEG
29347: PUSH
29348: LD_INT 1
29350: NEG
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 1
29358: NEG
29359: PUSH
29360: LD_INT 2
29362: NEG
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: LD_INT 2
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29389: LD_ADDR_VAR 0 37
29393: PUSH
29394: LD_INT 0
29396: PUSH
29397: LD_INT 0
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 0
29406: PUSH
29407: LD_INT 1
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 1
29417: PUSH
29418: LD_INT 0
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 1
29427: PUSH
29428: LD_INT 1
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 0
29437: PUSH
29438: LD_INT 1
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 1
29447: NEG
29448: PUSH
29449: LD_INT 0
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 1
29458: NEG
29459: PUSH
29460: LD_INT 1
29462: NEG
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 1
29470: PUSH
29471: LD_INT 1
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29501: LD_ADDR_VAR 0 38
29505: PUSH
29506: LD_INT 0
29508: PUSH
29509: LD_INT 0
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 0
29518: PUSH
29519: LD_INT 1
29521: NEG
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: LD_INT 1
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 0
29549: PUSH
29550: LD_INT 1
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 1
29559: NEG
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: LD_INT 1
29574: NEG
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 2
29582: PUSH
29583: LD_INT 1
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 2
29592: NEG
29593: PUSH
29594: LD_INT 1
29596: NEG
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29613: LD_ADDR_VAR 0 39
29617: PUSH
29618: LD_INT 0
29620: PUSH
29621: LD_INT 0
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 0
29630: PUSH
29631: LD_INT 1
29633: NEG
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 1
29641: PUSH
29642: LD_INT 0
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 1
29651: PUSH
29652: LD_INT 1
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 0
29661: PUSH
29662: LD_INT 1
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 1
29671: NEG
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 1
29682: NEG
29683: PUSH
29684: LD_INT 1
29686: NEG
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 1
29694: NEG
29695: PUSH
29696: LD_INT 2
29698: NEG
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: LD_INT 2
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29725: LD_ADDR_VAR 0 40
29729: PUSH
29730: LD_INT 0
29732: PUSH
29733: LD_INT 0
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 0
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 1
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 1
29763: PUSH
29764: LD_INT 1
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 0
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 1
29783: NEG
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: NEG
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: LD_INT 1
29809: NEG
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 1
29817: NEG
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29837: LD_ADDR_VAR 0 41
29841: PUSH
29842: LD_INT 0
29844: PUSH
29845: LD_INT 0
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: LD_INT 1
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 1
29865: PUSH
29866: LD_INT 0
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: LD_INT 1
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 1
29895: NEG
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 1
29906: NEG
29907: PUSH
29908: LD_INT 1
29910: NEG
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: LD_INT 2
29922: NEG
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: LD_INT 1
29933: NEG
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 2
29941: PUSH
29942: LD_INT 0
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 2
29951: PUSH
29952: LD_INT 1
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 2
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: LD_INT 2
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 1
29981: NEG
29982: PUSH
29983: LD_INT 1
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 2
29992: NEG
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 2
30003: NEG
30004: PUSH
30005: LD_INT 1
30007: NEG
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 2
30015: NEG
30016: PUSH
30017: LD_INT 2
30019: NEG
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 2
30027: NEG
30028: PUSH
30029: LD_INT 3
30031: NEG
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 2
30039: PUSH
30040: LD_INT 1
30042: NEG
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 3
30050: PUSH
30051: LD_INT 0
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 3
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 3
30070: PUSH
30071: LD_INT 2
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 3
30080: PUSH
30081: LD_INT 3
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 2
30090: PUSH
30091: LD_INT 3
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 2
30100: NEG
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 3
30111: NEG
30112: PUSH
30113: LD_INT 0
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 3
30122: NEG
30123: PUSH
30124: LD_INT 1
30126: NEG
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 3
30134: NEG
30135: PUSH
30136: LD_INT 2
30138: NEG
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 3
30146: NEG
30147: PUSH
30148: LD_INT 3
30150: NEG
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30187: LD_ADDR_VAR 0 42
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: LD_INT 0
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 0
30204: PUSH
30205: LD_INT 1
30207: NEG
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 1
30215: PUSH
30216: LD_INT 0
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: LD_INT 1
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 0
30235: PUSH
30236: LD_INT 1
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 1
30245: NEG
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 1
30256: NEG
30257: PUSH
30258: LD_INT 1
30260: NEG
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 1
30268: NEG
30269: PUSH
30270: LD_INT 2
30272: NEG
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: LD_INT 2
30283: NEG
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: LD_INT 1
30294: NEG
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 2
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 2
30312: PUSH
30313: LD_INT 2
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 1
30322: PUSH
30323: LD_INT 2
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: LD_INT 2
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: PUSH
30344: LD_INT 1
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 2
30353: NEG
30354: PUSH
30355: LD_INT 1
30357: NEG
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 2
30365: NEG
30366: PUSH
30367: LD_INT 2
30369: NEG
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 2
30377: NEG
30378: PUSH
30379: LD_INT 3
30381: NEG
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 1
30389: NEG
30390: PUSH
30391: LD_INT 3
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: LD_INT 3
30404: NEG
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 1
30412: PUSH
30413: LD_INT 2
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 3
30423: PUSH
30424: LD_INT 2
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 3
30433: PUSH
30434: LD_INT 3
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: LD_INT 3
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: LD_INT 3
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 0
30463: PUSH
30464: LD_INT 3
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 1
30473: NEG
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 3
30484: NEG
30485: PUSH
30486: LD_INT 2
30488: NEG
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 3
30496: NEG
30497: PUSH
30498: LD_INT 3
30500: NEG
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30537: LD_ADDR_VAR 0 43
30541: PUSH
30542: LD_INT 0
30544: PUSH
30545: LD_INT 0
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 0
30554: PUSH
30555: LD_INT 1
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 1
30565: PUSH
30566: LD_INT 0
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 1
30575: PUSH
30576: LD_INT 1
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 0
30585: PUSH
30586: LD_INT 1
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 1
30595: NEG
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: NEG
30607: PUSH
30608: LD_INT 1
30610: NEG
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 1
30618: NEG
30619: PUSH
30620: LD_INT 2
30622: NEG
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 0
30630: PUSH
30631: LD_INT 2
30633: NEG
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 1
30641: PUSH
30642: LD_INT 1
30644: NEG
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 2
30652: PUSH
30653: LD_INT 0
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 2
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 1
30672: PUSH
30673: LD_INT 2
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: LD_INT 2
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 2
30703: NEG
30704: PUSH
30705: LD_INT 0
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 2
30714: NEG
30715: PUSH
30716: LD_INT 1
30718: NEG
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: LD_INT 3
30730: NEG
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 0
30738: PUSH
30739: LD_INT 3
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: LD_INT 2
30752: NEG
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 2
30760: PUSH
30761: LD_INT 1
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 3
30771: PUSH
30772: LD_INT 0
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 3
30781: PUSH
30782: LD_INT 1
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 1
30791: PUSH
30792: LD_INT 3
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 0
30801: PUSH
30802: LD_INT 3
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 1
30811: NEG
30812: PUSH
30813: LD_INT 2
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 2
30822: NEG
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 3
30833: NEG
30834: PUSH
30835: LD_INT 0
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 3
30844: NEG
30845: PUSH
30846: LD_INT 1
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30885: LD_ADDR_VAR 0 44
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: LD_INT 0
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: LD_INT 1
30905: NEG
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: LD_INT 1
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 0
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 1
30943: NEG
30944: PUSH
30945: LD_INT 0
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 1
30954: NEG
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 1
30966: NEG
30967: PUSH
30968: LD_INT 2
30970: NEG
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 1
30978: PUSH
30979: LD_INT 1
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 2
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 2
30999: PUSH
31000: LD_INT 1
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 2
31009: PUSH
31010: LD_INT 2
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 1
31019: PUSH
31020: LD_INT 2
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 1
31029: NEG
31030: PUSH
31031: LD_INT 1
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 2
31040: NEG
31041: PUSH
31042: LD_INT 0
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 2
31051: NEG
31052: PUSH
31053: LD_INT 1
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 2
31063: NEG
31064: PUSH
31065: LD_INT 2
31067: NEG
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 2
31075: NEG
31076: PUSH
31077: LD_INT 3
31079: NEG
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: LD_INT 1
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 3
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 3
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 3
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 3
31128: PUSH
31129: LD_INT 3
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: LD_INT 3
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 2
31148: NEG
31149: PUSH
31150: LD_INT 1
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 3
31159: NEG
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 3
31170: NEG
31171: PUSH
31172: LD_INT 1
31174: NEG
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 3
31182: NEG
31183: PUSH
31184: LD_INT 2
31186: NEG
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 3
31194: NEG
31195: PUSH
31196: LD_INT 3
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31235: LD_ADDR_VAR 0 45
31239: PUSH
31240: LD_INT 0
31242: PUSH
31243: LD_INT 0
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: LD_INT 0
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 1
31293: NEG
31294: PUSH
31295: LD_INT 0
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: NEG
31305: PUSH
31306: LD_INT 1
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: NEG
31317: PUSH
31318: LD_INT 2
31320: NEG
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 0
31328: PUSH
31329: LD_INT 2
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 1
31339: PUSH
31340: LD_INT 1
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 2
31350: PUSH
31351: LD_INT 1
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 2
31360: PUSH
31361: LD_INT 2
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 1
31370: PUSH
31371: LD_INT 2
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 0
31380: PUSH
31381: LD_INT 2
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 1
31390: NEG
31391: PUSH
31392: LD_INT 1
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 2
31401: NEG
31402: PUSH
31403: LD_INT 1
31405: NEG
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 2
31413: NEG
31414: PUSH
31415: LD_INT 2
31417: NEG
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 2
31425: NEG
31426: PUSH
31427: LD_INT 3
31429: NEG
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: LD_INT 3
31441: NEG
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 0
31449: PUSH
31450: LD_INT 3
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 1
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 3
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 3
31481: PUSH
31482: LD_INT 3
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: LD_INT 3
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 1
31501: PUSH
31502: LD_INT 3
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: LD_INT 3
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 1
31521: NEG
31522: PUSH
31523: LD_INT 2
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 3
31532: NEG
31533: PUSH
31534: LD_INT 2
31536: NEG
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 3
31544: NEG
31545: PUSH
31546: LD_INT 3
31548: NEG
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31585: LD_ADDR_VAR 0 46
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: LD_INT 1
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 1
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: PUSH
31624: LD_INT 1
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: LD_INT 1
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: LD_INT 2
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 0
31678: PUSH
31679: LD_INT 2
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 1
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 2
31700: PUSH
31701: LD_INT 0
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 1
31720: PUSH
31721: LD_INT 2
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 0
31730: PUSH
31731: LD_INT 2
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 1
31740: NEG
31741: PUSH
31742: LD_INT 1
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 2
31751: NEG
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 2
31762: NEG
31763: PUSH
31764: LD_INT 1
31766: NEG
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: LD_INT 3
31778: NEG
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: LD_INT 3
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: LD_INT 2
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 2
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 3
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 3
31829: PUSH
31830: LD_INT 1
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: LD_INT 3
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 0
31849: PUSH
31850: LD_INT 3
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 1
31859: NEG
31860: PUSH
31861: LD_INT 2
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 2
31870: NEG
31871: PUSH
31872: LD_INT 1
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 3
31881: NEG
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 3
31892: NEG
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31933: LD_ADDR_VAR 0 47
31937: PUSH
31938: LD_INT 0
31940: PUSH
31941: LD_INT 0
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 0
31950: PUSH
31951: LD_INT 1
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 1
31971: PUSH
31972: LD_INT 1
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: LD_INT 1
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 1
31991: NEG
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 1
32014: NEG
32015: PUSH
32016: LD_INT 2
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 0
32026: PUSH
32027: LD_INT 2
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 1
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 2
32048: NEG
32049: PUSH
32050: LD_INT 1
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 2
32060: NEG
32061: PUSH
32062: LD_INT 2
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32084: LD_ADDR_VAR 0 48
32088: PUSH
32089: LD_INT 0
32091: PUSH
32092: LD_INT 0
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: LD_INT 1
32104: NEG
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 1
32112: PUSH
32113: LD_INT 0
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 1
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 0
32132: PUSH
32133: LD_INT 1
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 1
32142: NEG
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 1
32153: NEG
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 1
32165: NEG
32166: PUSH
32167: LD_INT 2
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 0
32177: PUSH
32178: LD_INT 2
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 1
32188: PUSH
32189: LD_INT 1
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 2
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 2
32209: PUSH
32210: LD_INT 1
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32231: LD_ADDR_VAR 0 49
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: LD_INT 1
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: LD_INT 1
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: LD_INT 0
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 1
32300: NEG
32301: PUSH
32302: LD_INT 1
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 2
32323: PUSH
32324: LD_INT 0
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 2
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 2
32343: PUSH
32344: LD_INT 2
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 1
32353: PUSH
32354: LD_INT 2
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32375: LD_ADDR_VAR 0 50
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: LD_INT 1
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: PUSH
32404: LD_INT 0
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 0
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 1
32433: NEG
32434: PUSH
32435: LD_INT 0
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 1
32444: NEG
32445: PUSH
32446: LD_INT 1
32448: NEG
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 2
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 2
32466: PUSH
32467: LD_INT 2
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: LD_INT 2
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 0
32486: PUSH
32487: LD_INT 2
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 1
32496: NEG
32497: PUSH
32498: LD_INT 1
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32519: LD_ADDR_VAR 0 51
32523: PUSH
32524: LD_INT 0
32526: PUSH
32527: LD_INT 0
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 0
32536: PUSH
32537: LD_INT 1
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 1
32547: PUSH
32548: LD_INT 0
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 1
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 1
32577: NEG
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 1
32588: NEG
32589: PUSH
32590: LD_INT 1
32592: NEG
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: PUSH
32601: LD_INT 2
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 0
32610: PUSH
32611: LD_INT 2
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: NEG
32621: PUSH
32622: LD_INT 1
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 2
32631: NEG
32632: PUSH
32633: LD_INT 0
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 2
32642: NEG
32643: PUSH
32644: LD_INT 1
32646: NEG
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32666: LD_ADDR_VAR 0 52
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: LD_INT 1
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: LD_INT 0
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 0
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: LD_INT 1
32739: NEG
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: LD_INT 2
32751: NEG
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 1
32759: NEG
32760: PUSH
32761: LD_INT 1
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 2
32770: NEG
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 2
32781: NEG
32782: PUSH
32783: LD_INT 1
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 2
32793: NEG
32794: PUSH
32795: LD_INT 2
32797: NEG
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32817: LD_ADDR_VAR 0 53
32821: PUSH
32822: LD_INT 0
32824: PUSH
32825: LD_INT 0
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: LD_INT 1
32837: NEG
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 1
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 1
32855: PUSH
32856: LD_INT 1
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 0
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 1
32886: NEG
32887: PUSH
32888: LD_INT 1
32890: NEG
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 1
32898: NEG
32899: PUSH
32900: LD_INT 2
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: LD_INT 2
32913: NEG
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: LD_INT 1
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 2
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 2
32942: PUSH
32943: LD_INT 1
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 2
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 1
32962: PUSH
32963: LD_INT 2
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: LD_INT 2
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 1
32982: NEG
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 2
32993: NEG
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 2
33004: NEG
33005: PUSH
33006: LD_INT 1
33008: NEG
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 2
33016: NEG
33017: PUSH
33018: LD_INT 2
33020: NEG
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33047: LD_ADDR_VAR 0 54
33051: PUSH
33052: LD_INT 0
33054: PUSH
33055: LD_INT 0
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 0
33064: PUSH
33065: LD_INT 1
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 1
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 1
33085: PUSH
33086: LD_INT 1
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 0
33095: PUSH
33096: LD_INT 1
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 1
33105: NEG
33106: PUSH
33107: LD_INT 0
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 1
33116: NEG
33117: PUSH
33118: LD_INT 1
33120: NEG
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 1
33128: NEG
33129: PUSH
33130: LD_INT 2
33132: NEG
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: LD_INT 2
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 1
33151: PUSH
33152: LD_INT 1
33154: NEG
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 2
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 2
33172: PUSH
33173: LD_INT 1
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 2
33182: PUSH
33183: LD_INT 2
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 1
33192: PUSH
33193: LD_INT 2
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: LD_INT 2
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 1
33212: NEG
33213: PUSH
33214: LD_INT 1
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 2
33223: NEG
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 2
33234: NEG
33235: PUSH
33236: LD_INT 1
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 2
33246: NEG
33247: PUSH
33248: LD_INT 2
33250: NEG
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33277: LD_ADDR_VAR 0 55
33281: PUSH
33282: LD_INT 0
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: LD_INT 1
33297: NEG
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 1
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: LD_INT 1
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 0
33325: PUSH
33326: LD_INT 1
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 1
33335: NEG
33336: PUSH
33337: LD_INT 0
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 1
33346: NEG
33347: PUSH
33348: LD_INT 1
33350: NEG
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 1
33358: NEG
33359: PUSH
33360: LD_INT 2
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 0
33370: PUSH
33371: LD_INT 2
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 1
33381: PUSH
33382: LD_INT 1
33384: NEG
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 2
33402: PUSH
33403: LD_INT 1
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 2
33412: PUSH
33413: LD_INT 2
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 1
33422: PUSH
33423: LD_INT 2
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: LD_INT 2
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 1
33442: NEG
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 2
33453: NEG
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 2
33464: NEG
33465: PUSH
33466: LD_INT 1
33468: NEG
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 2
33476: NEG
33477: PUSH
33478: LD_INT 2
33480: NEG
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33507: LD_ADDR_VAR 0 56
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 1
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 0
33555: PUSH
33556: LD_INT 1
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: NEG
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: LD_INT 1
33580: NEG
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 1
33588: NEG
33589: PUSH
33590: LD_INT 2
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: LD_INT 2
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: LD_INT 1
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 2
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: LD_INT 1
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 2
33642: PUSH
33643: LD_INT 2
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: LD_INT 2
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 0
33662: PUSH
33663: LD_INT 2
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 1
33672: NEG
33673: PUSH
33674: LD_INT 1
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 2
33683: NEG
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 2
33694: NEG
33695: PUSH
33696: LD_INT 1
33698: NEG
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 2
33706: NEG
33707: PUSH
33708: LD_INT 2
33710: NEG
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33737: LD_ADDR_VAR 0 57
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: LD_INT 0
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: LD_INT 1
33757: NEG
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 1
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 1
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 0
33785: PUSH
33786: LD_INT 1
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 1
33795: NEG
33796: PUSH
33797: LD_INT 0
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 1
33806: NEG
33807: PUSH
33808: LD_INT 1
33810: NEG
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 1
33818: NEG
33819: PUSH
33820: LD_INT 2
33822: NEG
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 0
33830: PUSH
33831: LD_INT 2
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: LD_INT 1
33844: NEG
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 2
33852: PUSH
33853: LD_INT 0
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 2
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 2
33872: PUSH
33873: LD_INT 2
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 1
33882: PUSH
33883: LD_INT 2
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 0
33892: PUSH
33893: LD_INT 2
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 1
33902: NEG
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 2
33913: NEG
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 2
33924: NEG
33925: PUSH
33926: LD_INT 1
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 2
33936: NEG
33937: PUSH
33938: LD_INT 2
33940: NEG
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33967: LD_ADDR_VAR 0 58
33971: PUSH
33972: LD_INT 0
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: LD_INT 1
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 0
34015: PUSH
34016: LD_INT 1
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 1
34025: NEG
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 1
34036: NEG
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 1
34048: NEG
34049: PUSH
34050: LD_INT 2
34052: NEG
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 0
34060: PUSH
34061: LD_INT 2
34063: NEG
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 1
34071: PUSH
34072: LD_INT 1
34074: NEG
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 2
34082: PUSH
34083: LD_INT 0
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 2
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 2
34102: PUSH
34103: LD_INT 2
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 1
34112: PUSH
34113: LD_INT 2
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: LD_INT 2
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 1
34132: NEG
34133: PUSH
34134: LD_INT 1
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 2
34143: NEG
34144: PUSH
34145: LD_INT 0
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 2
34154: NEG
34155: PUSH
34156: LD_INT 1
34158: NEG
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 2
34166: NEG
34167: PUSH
34168: LD_INT 2
34170: NEG
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34197: LD_ADDR_VAR 0 59
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: LD_INT 0
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 0
34214: PUSH
34215: LD_INT 1
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: LD_INT 1
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: LD_INT 1
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: NEG
34256: PUSH
34257: LD_INT 0
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 1
34266: NEG
34267: PUSH
34268: LD_INT 1
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34285: LD_ADDR_VAR 0 60
34289: PUSH
34290: LD_INT 0
34292: PUSH
34293: LD_INT 0
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 1
34305: NEG
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: LD_INT 1
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: LD_INT 1
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34373: LD_ADDR_VAR 0 61
34377: PUSH
34378: LD_INT 0
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 0
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 1
34431: NEG
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 1
34442: NEG
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34461: LD_ADDR_VAR 0 62
34465: PUSH
34466: LD_INT 0
34468: PUSH
34469: LD_INT 0
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 0
34478: PUSH
34479: LD_INT 1
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 1
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 1
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: LD_INT 1
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 1
34519: NEG
34520: PUSH
34521: LD_INT 0
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 1
34530: NEG
34531: PUSH
34532: LD_INT 1
34534: NEG
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34549: LD_ADDR_VAR 0 63
34553: PUSH
34554: LD_INT 0
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 0
34566: PUSH
34567: LD_INT 1
34569: NEG
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: LD_INT 1
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 0
34597: PUSH
34598: LD_INT 1
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: LD_INT 0
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 1
34618: NEG
34619: PUSH
34620: LD_INT 1
34622: NEG
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34637: LD_ADDR_VAR 0 64
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 0
34685: PUSH
34686: LD_INT 1
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: NEG
34707: PUSH
34708: LD_INT 1
34710: NEG
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: ST_TO_ADDR
// end ; 1 :
34725: GO 40622
34727: LD_INT 1
34729: DOUBLE
34730: EQUAL
34731: IFTRUE 34735
34733: GO 37358
34735: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34736: LD_ADDR_VAR 0 11
34740: PUSH
34741: LD_INT 1
34743: NEG
34744: PUSH
34745: LD_INT 3
34747: NEG
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 0
34755: PUSH
34756: LD_INT 3
34758: NEG
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 1
34766: PUSH
34767: LD_INT 2
34769: NEG
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: LIST
34779: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34780: LD_ADDR_VAR 0 12
34784: PUSH
34785: LD_INT 2
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 3
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 3
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: LIST
34820: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34821: LD_ADDR_VAR 0 13
34825: PUSH
34826: LD_INT 3
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 3
34838: PUSH
34839: LD_INT 3
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 2
34848: PUSH
34849: LD_INT 3
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: LIST
34860: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34861: LD_ADDR_VAR 0 14
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: LD_INT 3
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: LD_INT 3
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 1
34888: NEG
34889: PUSH
34890: LD_INT 2
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: LIST
34901: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34902: LD_ADDR_VAR 0 15
34906: PUSH
34907: LD_INT 2
34909: NEG
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 3
34920: NEG
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 3
34931: NEG
34932: PUSH
34933: LD_INT 1
34935: NEG
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: LIST
34945: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34946: LD_ADDR_VAR 0 16
34950: PUSH
34951: LD_INT 2
34953: NEG
34954: PUSH
34955: LD_INT 3
34957: NEG
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 3
34965: NEG
34966: PUSH
34967: LD_INT 2
34969: NEG
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 3
34977: NEG
34978: PUSH
34979: LD_INT 3
34981: NEG
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: LIST
34991: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34992: LD_ADDR_VAR 0 17
34996: PUSH
34997: LD_INT 1
34999: NEG
35000: PUSH
35001: LD_INT 3
35003: NEG
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 0
35011: PUSH
35012: LD_INT 3
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 1
35022: PUSH
35023: LD_INT 2
35025: NEG
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: LIST
35035: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35036: LD_ADDR_VAR 0 18
35040: PUSH
35041: LD_INT 2
35043: PUSH
35044: LD_INT 1
35046: NEG
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 3
35054: PUSH
35055: LD_INT 0
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 3
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35077: LD_ADDR_VAR 0 19
35081: PUSH
35082: LD_INT 3
35084: PUSH
35085: LD_INT 2
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 3
35094: PUSH
35095: LD_INT 3
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 2
35104: PUSH
35105: LD_INT 3
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: LIST
35116: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35117: LD_ADDR_VAR 0 20
35121: PUSH
35122: LD_INT 1
35124: PUSH
35125: LD_INT 3
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: LD_INT 3
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 1
35144: NEG
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35158: LD_ADDR_VAR 0 21
35162: PUSH
35163: LD_INT 2
35165: NEG
35166: PUSH
35167: LD_INT 1
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 3
35176: NEG
35177: PUSH
35178: LD_INT 0
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 3
35187: NEG
35188: PUSH
35189: LD_INT 1
35191: NEG
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: LIST
35201: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35202: LD_ADDR_VAR 0 22
35206: PUSH
35207: LD_INT 2
35209: NEG
35210: PUSH
35211: LD_INT 3
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 3
35221: NEG
35222: PUSH
35223: LD_INT 2
35225: NEG
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 3
35233: NEG
35234: PUSH
35235: LD_INT 3
35237: NEG
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35248: LD_ADDR_VAR 0 23
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: LD_INT 3
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: LD_INT 4
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 1
35278: PUSH
35279: LD_INT 3
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: LIST
35291: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35292: LD_ADDR_VAR 0 24
35296: PUSH
35297: LD_INT 3
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 3
35309: PUSH
35310: LD_INT 1
35312: NEG
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 4
35320: PUSH
35321: LD_INT 1
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: LIST
35332: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35333: LD_ADDR_VAR 0 25
35337: PUSH
35338: LD_INT 3
35340: PUSH
35341: LD_INT 3
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 4
35350: PUSH
35351: LD_INT 3
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 3
35360: PUSH
35361: LD_INT 4
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: LIST
35372: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35373: LD_ADDR_VAR 0 26
35377: PUSH
35378: LD_INT 0
35380: PUSH
35381: LD_INT 3
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 1
35390: PUSH
35391: LD_INT 4
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 1
35400: NEG
35401: PUSH
35402: LD_INT 3
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: LIST
35413: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35414: LD_ADDR_VAR 0 27
35418: PUSH
35419: LD_INT 3
35421: NEG
35422: PUSH
35423: LD_INT 0
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 3
35432: NEG
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 4
35443: NEG
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: LIST
35457: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35458: LD_ADDR_VAR 0 28
35462: PUSH
35463: LD_INT 3
35465: NEG
35466: PUSH
35467: LD_INT 3
35469: NEG
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 3
35477: NEG
35478: PUSH
35479: LD_INT 4
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 4
35489: NEG
35490: PUSH
35491: LD_INT 3
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: LIST
35503: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35504: LD_ADDR_VAR 0 29
35508: PUSH
35509: LD_INT 1
35511: NEG
35512: PUSH
35513: LD_INT 3
35515: NEG
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: LD_INT 3
35526: NEG
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: LD_INT 2
35537: NEG
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 1
35545: NEG
35546: PUSH
35547: LD_INT 4
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 0
35557: PUSH
35558: LD_INT 4
35560: NEG
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: LD_INT 3
35571: NEG
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 1
35579: NEG
35580: PUSH
35581: LD_INT 5
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: LD_INT 5
35594: NEG
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: LD_INT 4
35605: NEG
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: LD_INT 6
35617: NEG
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 0
35625: PUSH
35626: LD_INT 6
35628: NEG
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: LD_INT 5
35639: NEG
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35659: LD_ADDR_VAR 0 30
35663: PUSH
35664: LD_INT 2
35666: PUSH
35667: LD_INT 1
35669: NEG
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 3
35677: PUSH
35678: LD_INT 0
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 3
35687: PUSH
35688: LD_INT 1
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 3
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 4
35708: PUSH
35709: LD_INT 0
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 4
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 4
35728: PUSH
35729: LD_INT 1
35731: NEG
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 5
35739: PUSH
35740: LD_INT 0
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 5
35749: PUSH
35750: LD_INT 1
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 5
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 6
35770: PUSH
35771: LD_INT 0
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 6
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
35802: LD_ADDR_VAR 0 31
35806: PUSH
35807: LD_INT 3
35809: PUSH
35810: LD_INT 2
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 3
35819: PUSH
35820: LD_INT 3
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 2
35829: PUSH
35830: LD_INT 3
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 4
35839: PUSH
35840: LD_INT 3
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 4
35849: PUSH
35850: LD_INT 4
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 3
35859: PUSH
35860: LD_INT 4
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 5
35869: PUSH
35870: LD_INT 4
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 5
35879: PUSH
35880: LD_INT 5
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 4
35889: PUSH
35890: LD_INT 5
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 6
35899: PUSH
35900: LD_INT 5
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 6
35909: PUSH
35910: LD_INT 6
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 5
35919: PUSH
35920: LD_INT 6
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
35941: LD_ADDR_VAR 0 32
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: LD_INT 3
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 0
35958: PUSH
35959: LD_INT 3
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: NEG
35969: PUSH
35970: LD_INT 2
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 1
35979: PUSH
35980: LD_INT 4
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 0
35989: PUSH
35990: LD_INT 4
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 1
35999: NEG
36000: PUSH
36001: LD_INT 3
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 1
36010: PUSH
36011: LD_INT 5
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: LD_INT 5
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: NEG
36031: PUSH
36032: LD_INT 4
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: LD_INT 6
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: LD_INT 6
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: LD_INT 5
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36084: LD_ADDR_VAR 0 33
36088: PUSH
36089: LD_INT 2
36091: NEG
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 3
36102: NEG
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 3
36113: NEG
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 3
36125: NEG
36126: PUSH
36127: LD_INT 1
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 4
36136: NEG
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 4
36147: NEG
36148: PUSH
36149: LD_INT 1
36151: NEG
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 4
36159: NEG
36160: PUSH
36161: LD_INT 1
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 5
36170: NEG
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 5
36181: NEG
36182: PUSH
36183: LD_INT 1
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 5
36193: NEG
36194: PUSH
36195: LD_INT 1
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 6
36204: NEG
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 6
36215: NEG
36216: PUSH
36217: LD_INT 1
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36239: LD_ADDR_VAR 0 34
36243: PUSH
36244: LD_INT 2
36246: NEG
36247: PUSH
36248: LD_INT 3
36250: NEG
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 3
36258: NEG
36259: PUSH
36260: LD_INT 2
36262: NEG
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 3
36270: NEG
36271: PUSH
36272: LD_INT 3
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 3
36282: NEG
36283: PUSH
36284: LD_INT 4
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 4
36294: NEG
36295: PUSH
36296: LD_INT 3
36298: NEG
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 4
36306: NEG
36307: PUSH
36308: LD_INT 4
36310: NEG
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 4
36318: NEG
36319: PUSH
36320: LD_INT 5
36322: NEG
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 5
36330: NEG
36331: PUSH
36332: LD_INT 4
36334: NEG
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 5
36342: NEG
36343: PUSH
36344: LD_INT 5
36346: NEG
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 5
36354: NEG
36355: PUSH
36356: LD_INT 6
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 6
36366: NEG
36367: PUSH
36368: LD_INT 5
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 6
36378: NEG
36379: PUSH
36380: LD_INT 6
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36402: LD_ADDR_VAR 0 41
36406: PUSH
36407: LD_INT 0
36409: PUSH
36410: LD_INT 2
36412: NEG
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 1
36420: NEG
36421: PUSH
36422: LD_INT 3
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 1
36432: PUSH
36433: LD_INT 2
36435: NEG
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: LIST
36445: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36446: LD_ADDR_VAR 0 42
36450: PUSH
36451: LD_INT 2
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 2
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 3
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: LIST
36486: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36487: LD_ADDR_VAR 0 43
36491: PUSH
36492: LD_INT 2
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 3
36504: PUSH
36505: LD_INT 2
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 2
36514: PUSH
36515: LD_INT 3
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: LIST
36526: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36527: LD_ADDR_VAR 0 44
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: LD_INT 2
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: LD_INT 3
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: NEG
36555: PUSH
36556: LD_INT 2
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: LIST
36567: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36568: LD_ADDR_VAR 0 45
36572: PUSH
36573: LD_INT 2
36575: NEG
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 2
36586: NEG
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 3
36597: NEG
36598: PUSH
36599: LD_INT 1
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: LIST
36611: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36612: LD_ADDR_VAR 0 46
36616: PUSH
36617: LD_INT 2
36619: NEG
36620: PUSH
36621: LD_INT 2
36623: NEG
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: LD_INT 3
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 3
36643: NEG
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: LIST
36657: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36658: LD_ADDR_VAR 0 47
36662: PUSH
36663: LD_INT 2
36665: NEG
36666: PUSH
36667: LD_INT 3
36669: NEG
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 1
36677: NEG
36678: PUSH
36679: LD_INT 3
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36691: LD_ADDR_VAR 0 48
36695: PUSH
36696: LD_INT 1
36698: PUSH
36699: LD_INT 2
36701: NEG
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 2
36709: PUSH
36710: LD_INT 1
36712: NEG
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36722: LD_ADDR_VAR 0 49
36726: PUSH
36727: LD_INT 3
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 3
36739: PUSH
36740: LD_INT 2
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
36751: LD_ADDR_VAR 0 50
36755: PUSH
36756: LD_INT 2
36758: PUSH
36759: LD_INT 3
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 1
36768: PUSH
36769: LD_INT 3
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36780: LD_ADDR_VAR 0 51
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: LD_INT 2
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 2
36798: NEG
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36811: LD_ADDR_VAR 0 52
36815: PUSH
36816: LD_INT 3
36818: NEG
36819: PUSH
36820: LD_INT 1
36822: NEG
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 3
36830: NEG
36831: PUSH
36832: LD_INT 2
36834: NEG
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36844: LD_ADDR_VAR 0 53
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: LD_INT 3
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: LD_INT 3
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: LD_INT 2
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: LIST
36887: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36888: LD_ADDR_VAR 0 54
36892: PUSH
36893: LD_INT 2
36895: PUSH
36896: LD_INT 1
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 3
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 3
36916: PUSH
36917: LD_INT 1
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: LIST
36928: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36929: LD_ADDR_VAR 0 55
36933: PUSH
36934: LD_INT 3
36936: PUSH
36937: LD_INT 2
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 3
36946: PUSH
36947: LD_INT 3
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 2
36956: PUSH
36957: LD_INT 3
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36969: LD_ADDR_VAR 0 56
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: LD_INT 3
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: LD_INT 3
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: PUSH
36998: LD_INT 2
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: LIST
37009: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37010: LD_ADDR_VAR 0 57
37014: PUSH
37015: LD_INT 2
37017: NEG
37018: PUSH
37019: LD_INT 1
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 3
37028: NEG
37029: PUSH
37030: LD_INT 0
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 3
37039: NEG
37040: PUSH
37041: LD_INT 1
37043: NEG
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37054: LD_ADDR_VAR 0 58
37058: PUSH
37059: LD_INT 2
37061: NEG
37062: PUSH
37063: LD_INT 3
37065: NEG
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 3
37073: NEG
37074: PUSH
37075: LD_INT 2
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 3
37085: NEG
37086: PUSH
37087: LD_INT 3
37089: NEG
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: LIST
37099: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37100: LD_ADDR_VAR 0 59
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: LD_INT 2
37111: NEG
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: LD_INT 2
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 1
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: LIST
37143: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37144: LD_ADDR_VAR 0 60
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 2
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: LIST
37184: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37185: LD_ADDR_VAR 0 61
37189: PUSH
37190: LD_INT 2
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 2
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: LD_INT 2
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: LIST
37224: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37225: LD_ADDR_VAR 0 62
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: LD_INT 2
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 1
37252: NEG
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37266: LD_ADDR_VAR 0 63
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 2
37284: NEG
37285: PUSH
37286: LD_INT 0
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 2
37295: NEG
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: LIST
37309: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37310: LD_ADDR_VAR 0 64
37314: PUSH
37315: LD_INT 1
37317: NEG
37318: PUSH
37319: LD_INT 2
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 2
37329: NEG
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 2
37341: NEG
37342: PUSH
37343: LD_INT 2
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: LIST
37355: ST_TO_ADDR
// end ; 2 :
37356: GO 40622
37358: LD_INT 2
37360: DOUBLE
37361: EQUAL
37362: IFTRUE 37366
37364: GO 40621
37366: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37367: LD_ADDR_VAR 0 29
37371: PUSH
37372: LD_INT 4
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 4
37384: PUSH
37385: LD_INT 1
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 5
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 5
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 4
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 3
37425: PUSH
37426: LD_INT 0
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 3
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 3
37446: PUSH
37447: LD_INT 2
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 5
37457: PUSH
37458: LD_INT 2
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 3
37467: PUSH
37468: LD_INT 3
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 3
37477: PUSH
37478: LD_INT 2
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 4
37487: PUSH
37488: LD_INT 3
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 4
37497: PUSH
37498: LD_INT 4
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 3
37507: PUSH
37508: LD_INT 4
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 2
37517: PUSH
37518: LD_INT 3
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 2
37527: PUSH
37528: LD_INT 2
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 4
37537: PUSH
37538: LD_INT 2
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 2
37547: PUSH
37548: LD_INT 4
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: LD_INT 4
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: LD_INT 3
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: LD_INT 4
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: LD_INT 5
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 5
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 1
37607: NEG
37608: PUSH
37609: LD_INT 4
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: NEG
37619: PUSH
37620: LD_INT 3
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 2
37629: PUSH
37630: LD_INT 5
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 2
37639: NEG
37640: PUSH
37641: LD_INT 3
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 3
37650: NEG
37651: PUSH
37652: LD_INT 0
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 3
37661: NEG
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 2
37673: NEG
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 2
37684: NEG
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 3
37695: NEG
37696: PUSH
37697: LD_INT 1
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 4
37706: NEG
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 4
37717: NEG
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 4
37729: NEG
37730: PUSH
37731: LD_INT 2
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 2
37741: NEG
37742: PUSH
37743: LD_INT 2
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 4
37752: NEG
37753: PUSH
37754: LD_INT 4
37756: NEG
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 4
37764: NEG
37765: PUSH
37766: LD_INT 5
37768: NEG
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 3
37776: NEG
37777: PUSH
37778: LD_INT 4
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 3
37788: NEG
37789: PUSH
37790: LD_INT 3
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 4
37800: NEG
37801: PUSH
37802: LD_INT 3
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 5
37812: NEG
37813: PUSH
37814: LD_INT 4
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 5
37824: NEG
37825: PUSH
37826: LD_INT 5
37828: NEG
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 3
37836: NEG
37837: PUSH
37838: LD_INT 5
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 5
37848: NEG
37849: PUSH
37850: LD_INT 3
37852: NEG
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37905: LD_ADDR_VAR 0 30
37909: PUSH
37910: LD_INT 4
37912: PUSH
37913: LD_INT 4
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 4
37922: PUSH
37923: LD_INT 3
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 5
37932: PUSH
37933: LD_INT 4
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 5
37942: PUSH
37943: LD_INT 5
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 4
37952: PUSH
37953: LD_INT 5
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 3
37962: PUSH
37963: LD_INT 4
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 3
37972: PUSH
37973: LD_INT 3
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 5
37982: PUSH
37983: LD_INT 3
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 3
37992: PUSH
37993: LD_INT 5
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: LD_INT 3
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 0
38012: PUSH
38013: LD_INT 2
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 1
38022: PUSH
38023: LD_INT 3
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: LD_INT 4
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: LD_INT 4
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 1
38052: NEG
38053: PUSH
38054: LD_INT 3
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 1
38063: NEG
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 2
38074: PUSH
38075: LD_INT 4
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 2
38084: NEG
38085: PUSH
38086: LD_INT 2
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 4
38095: NEG
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 4
38106: NEG
38107: PUSH
38108: LD_INT 1
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 3
38118: NEG
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 3
38129: NEG
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 4
38140: NEG
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 5
38151: NEG
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 5
38162: NEG
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 5
38174: NEG
38175: PUSH
38176: LD_INT 2
38178: NEG
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 3
38186: NEG
38187: PUSH
38188: LD_INT 2
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 3
38197: NEG
38198: PUSH
38199: LD_INT 3
38201: NEG
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 3
38209: NEG
38210: PUSH
38211: LD_INT 4
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 2
38221: NEG
38222: PUSH
38223: LD_INT 3
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 2
38233: NEG
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 3
38245: NEG
38246: PUSH
38247: LD_INT 2
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 4
38257: NEG
38258: PUSH
38259: LD_INT 3
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 4
38269: NEG
38270: PUSH
38271: LD_INT 4
38273: NEG
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 2
38281: NEG
38282: PUSH
38283: LD_INT 4
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 4
38293: NEG
38294: PUSH
38295: LD_INT 2
38297: NEG
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 0
38305: PUSH
38306: LD_INT 4
38308: NEG
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: LD_INT 5
38319: NEG
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: LD_INT 4
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: LD_INT 3
38341: NEG
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 0
38349: PUSH
38350: LD_INT 3
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 1
38360: NEG
38361: PUSH
38362: LD_INT 4
38364: NEG
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: LD_INT 5
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 2
38384: PUSH
38385: LD_INT 3
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: LD_INT 5
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38452: LD_ADDR_VAR 0 31
38456: PUSH
38457: LD_INT 0
38459: PUSH
38460: LD_INT 4
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 3
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: LD_INT 4
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: LD_INT 5
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 5
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: LD_INT 4
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 3
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 2
38531: PUSH
38532: LD_INT 5
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 2
38541: NEG
38542: PUSH
38543: LD_INT 3
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 3
38552: NEG
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 3
38563: NEG
38564: PUSH
38565: LD_INT 1
38567: NEG
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 2
38575: NEG
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 2
38586: NEG
38587: PUSH
38588: LD_INT 1
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 3
38597: NEG
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 4
38608: NEG
38609: PUSH
38610: LD_INT 0
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 4
38619: NEG
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 4
38631: NEG
38632: PUSH
38633: LD_INT 2
38635: NEG
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 2
38643: NEG
38644: PUSH
38645: LD_INT 2
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 4
38654: NEG
38655: PUSH
38656: LD_INT 4
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 4
38666: NEG
38667: PUSH
38668: LD_INT 5
38670: NEG
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 3
38678: NEG
38679: PUSH
38680: LD_INT 4
38682: NEG
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 3
38690: NEG
38691: PUSH
38692: LD_INT 3
38694: NEG
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 4
38702: NEG
38703: PUSH
38704: LD_INT 3
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 5
38714: NEG
38715: PUSH
38716: LD_INT 4
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 5
38726: NEG
38727: PUSH
38728: LD_INT 5
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 3
38738: NEG
38739: PUSH
38740: LD_INT 5
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 5
38750: NEG
38751: PUSH
38752: LD_INT 3
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: LD_INT 3
38765: NEG
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: LD_INT 4
38776: NEG
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: LD_INT 3
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: LD_INT 2
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: LD_INT 2
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: LD_INT 3
38821: NEG
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: LD_INT 4
38833: NEG
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 2
38841: PUSH
38842: LD_INT 2
38844: NEG
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 2
38852: NEG
38853: PUSH
38854: LD_INT 4
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 4
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 4
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 5
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 5
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 4
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 3
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 3
38925: PUSH
38926: LD_INT 1
38928: NEG
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 3
38936: PUSH
38937: LD_INT 2
38939: NEG
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 5
38947: PUSH
38948: LD_INT 2
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39002: LD_ADDR_VAR 0 32
39006: PUSH
39007: LD_INT 4
39009: NEG
39010: PUSH
39011: LD_INT 0
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 4
39020: NEG
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 3
39032: NEG
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 3
39043: NEG
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 4
39054: NEG
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 5
39065: NEG
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 5
39076: NEG
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 5
39088: NEG
39089: PUSH
39090: LD_INT 2
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 3
39100: NEG
39101: PUSH
39102: LD_INT 2
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 3
39111: NEG
39112: PUSH
39113: LD_INT 3
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 3
39123: NEG
39124: PUSH
39125: LD_INT 4
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 2
39135: NEG
39136: PUSH
39137: LD_INT 3
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 2
39147: NEG
39148: PUSH
39149: LD_INT 2
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 3
39159: NEG
39160: PUSH
39161: LD_INT 2
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 4
39171: NEG
39172: PUSH
39173: LD_INT 3
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 4
39183: NEG
39184: PUSH
39185: LD_INT 4
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 2
39195: NEG
39196: PUSH
39197: LD_INT 4
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 4
39207: NEG
39208: PUSH
39209: LD_INT 2
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: LD_INT 4
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: LD_INT 5
39233: NEG
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: LD_INT 4
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: LD_INT 3
39255: NEG
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: LD_INT 3
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: LD_INT 4
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: LD_INT 5
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 2
39298: PUSH
39299: LD_INT 3
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 2
39309: NEG
39310: PUSH
39311: LD_INT 5
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 3
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 3
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 4
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 4
39352: PUSH
39353: LD_INT 1
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 3
39362: PUSH
39363: LD_INT 1
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 2
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: LD_INT 2
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 4
39404: PUSH
39405: LD_INT 2
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 4
39414: PUSH
39415: LD_INT 4
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 4
39424: PUSH
39425: LD_INT 3
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 5
39434: PUSH
39435: LD_INT 4
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 5
39444: PUSH
39445: LD_INT 5
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 4
39454: PUSH
39455: LD_INT 5
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 3
39464: PUSH
39465: LD_INT 4
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 3
39474: PUSH
39475: LD_INT 3
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 5
39484: PUSH
39485: LD_INT 3
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 3
39494: PUSH
39495: LD_INT 5
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39549: LD_ADDR_VAR 0 33
39553: PUSH
39554: LD_INT 4
39556: NEG
39557: PUSH
39558: LD_INT 4
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 4
39568: NEG
39569: PUSH
39570: LD_INT 5
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 3
39580: NEG
39581: PUSH
39582: LD_INT 4
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 3
39592: NEG
39593: PUSH
39594: LD_INT 3
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 4
39604: NEG
39605: PUSH
39606: LD_INT 3
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 5
39616: NEG
39617: PUSH
39618: LD_INT 4
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 5
39628: NEG
39629: PUSH
39630: LD_INT 5
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 3
39640: NEG
39641: PUSH
39642: LD_INT 5
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 5
39652: NEG
39653: PUSH
39654: LD_INT 3
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: LD_INT 3
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: LD_INT 4
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: LD_INT 3
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: LD_INT 2
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: LD_INT 2
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: LD_INT 3
39723: NEG
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: LD_INT 4
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: NEG
39755: PUSH
39756: LD_INT 4
39758: NEG
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 4
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 4
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 5
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 5
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 4
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 3
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 3
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 3
39838: PUSH
39839: LD_INT 2
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 5
39849: PUSH
39850: LD_INT 2
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 3
39859: PUSH
39860: LD_INT 3
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 3
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 4
39879: PUSH
39880: LD_INT 3
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 4
39889: PUSH
39890: LD_INT 4
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 3
39899: PUSH
39900: LD_INT 4
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 2
39909: PUSH
39910: LD_INT 3
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 2
39919: PUSH
39920: LD_INT 2
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 4
39929: PUSH
39930: LD_INT 2
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 2
39939: PUSH
39940: LD_INT 4
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 4
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: LD_INT 3
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: LD_INT 4
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: LD_INT 5
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: LD_INT 5
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: NEG
40000: PUSH
40001: LD_INT 4
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 1
40010: NEG
40011: PUSH
40012: LD_INT 3
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: LD_INT 5
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 2
40031: NEG
40032: PUSH
40033: LD_INT 3
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40087: LD_ADDR_VAR 0 34
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: LD_INT 4
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: LD_INT 5
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 1
40116: PUSH
40117: LD_INT 4
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: LD_INT 3
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: LD_INT 3
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: LD_INT 4
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: LD_INT 5
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 2
40173: PUSH
40174: LD_INT 3
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 2
40184: NEG
40185: PUSH
40186: LD_INT 5
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 3
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 3
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 4
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 4
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 3
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 2
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 4
40279: PUSH
40280: LD_INT 2
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 4
40289: PUSH
40290: LD_INT 4
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 4
40299: PUSH
40300: LD_INT 3
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 5
40309: PUSH
40310: LD_INT 4
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 5
40319: PUSH
40320: LD_INT 5
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 4
40329: PUSH
40330: LD_INT 5
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 3
40339: PUSH
40340: LD_INT 4
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 3
40349: PUSH
40350: LD_INT 3
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 5
40359: PUSH
40360: LD_INT 3
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 3
40369: PUSH
40370: LD_INT 5
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: LD_INT 3
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: LD_INT 2
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: LD_INT 3
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: LD_INT 4
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_INT 4
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: LD_INT 3
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 2
40451: PUSH
40452: LD_INT 4
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 2
40461: NEG
40462: PUSH
40463: LD_INT 2
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 4
40472: NEG
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 4
40483: NEG
40484: PUSH
40485: LD_INT 1
40487: NEG
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 3
40495: NEG
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 3
40506: NEG
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 4
40517: NEG
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 5
40528: NEG
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 5
40539: NEG
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 5
40551: NEG
40552: PUSH
40553: LD_INT 2
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 3
40563: NEG
40564: PUSH
40565: LD_INT 2
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: ST_TO_ADDR
// end ; end ;
40619: GO 40622
40621: POP
// case btype of b_depot , b_warehouse :
40622: LD_VAR 0 1
40626: PUSH
40627: LD_INT 0
40629: DOUBLE
40630: EQUAL
40631: IFTRUE 40641
40633: LD_INT 1
40635: DOUBLE
40636: EQUAL
40637: IFTRUE 40641
40639: GO 40842
40641: POP
// case nation of nation_american :
40642: LD_VAR 0 5
40646: PUSH
40647: LD_INT 1
40649: DOUBLE
40650: EQUAL
40651: IFTRUE 40655
40653: GO 40711
40655: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40656: LD_ADDR_VAR 0 9
40660: PUSH
40661: LD_VAR 0 11
40665: PUSH
40666: LD_VAR 0 12
40670: PUSH
40671: LD_VAR 0 13
40675: PUSH
40676: LD_VAR 0 14
40680: PUSH
40681: LD_VAR 0 15
40685: PUSH
40686: LD_VAR 0 16
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: PUSH
40699: LD_VAR 0 4
40703: PUSH
40704: LD_INT 1
40706: PLUS
40707: ARRAY
40708: ST_TO_ADDR
40709: GO 40840
40711: LD_INT 2
40713: DOUBLE
40714: EQUAL
40715: IFTRUE 40719
40717: GO 40775
40719: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
40720: LD_ADDR_VAR 0 9
40724: PUSH
40725: LD_VAR 0 17
40729: PUSH
40730: LD_VAR 0 18
40734: PUSH
40735: LD_VAR 0 19
40739: PUSH
40740: LD_VAR 0 20
40744: PUSH
40745: LD_VAR 0 21
40749: PUSH
40750: LD_VAR 0 22
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: PUSH
40763: LD_VAR 0 4
40767: PUSH
40768: LD_INT 1
40770: PLUS
40771: ARRAY
40772: ST_TO_ADDR
40773: GO 40840
40775: LD_INT 3
40777: DOUBLE
40778: EQUAL
40779: IFTRUE 40783
40781: GO 40839
40783: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
40784: LD_ADDR_VAR 0 9
40788: PUSH
40789: LD_VAR 0 23
40793: PUSH
40794: LD_VAR 0 24
40798: PUSH
40799: LD_VAR 0 25
40803: PUSH
40804: LD_VAR 0 26
40808: PUSH
40809: LD_VAR 0 27
40813: PUSH
40814: LD_VAR 0 28
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: PUSH
40827: LD_VAR 0 4
40831: PUSH
40832: LD_INT 1
40834: PLUS
40835: ARRAY
40836: ST_TO_ADDR
40837: GO 40840
40839: POP
40840: GO 41395
40842: LD_INT 2
40844: DOUBLE
40845: EQUAL
40846: IFTRUE 40856
40848: LD_INT 3
40850: DOUBLE
40851: EQUAL
40852: IFTRUE 40856
40854: GO 40912
40856: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
40857: LD_ADDR_VAR 0 9
40861: PUSH
40862: LD_VAR 0 29
40866: PUSH
40867: LD_VAR 0 30
40871: PUSH
40872: LD_VAR 0 31
40876: PUSH
40877: LD_VAR 0 32
40881: PUSH
40882: LD_VAR 0 33
40886: PUSH
40887: LD_VAR 0 34
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: PUSH
40900: LD_VAR 0 4
40904: PUSH
40905: LD_INT 1
40907: PLUS
40908: ARRAY
40909: ST_TO_ADDR
40910: GO 41395
40912: LD_INT 16
40914: DOUBLE
40915: EQUAL
40916: IFTRUE 40974
40918: LD_INT 17
40920: DOUBLE
40921: EQUAL
40922: IFTRUE 40974
40924: LD_INT 18
40926: DOUBLE
40927: EQUAL
40928: IFTRUE 40974
40930: LD_INT 19
40932: DOUBLE
40933: EQUAL
40934: IFTRUE 40974
40936: LD_INT 22
40938: DOUBLE
40939: EQUAL
40940: IFTRUE 40974
40942: LD_INT 20
40944: DOUBLE
40945: EQUAL
40946: IFTRUE 40974
40948: LD_INT 21
40950: DOUBLE
40951: EQUAL
40952: IFTRUE 40974
40954: LD_INT 23
40956: DOUBLE
40957: EQUAL
40958: IFTRUE 40974
40960: LD_INT 24
40962: DOUBLE
40963: EQUAL
40964: IFTRUE 40974
40966: LD_INT 25
40968: DOUBLE
40969: EQUAL
40970: IFTRUE 40974
40972: GO 41030
40974: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
40975: LD_ADDR_VAR 0 9
40979: PUSH
40980: LD_VAR 0 35
40984: PUSH
40985: LD_VAR 0 36
40989: PUSH
40990: LD_VAR 0 37
40994: PUSH
40995: LD_VAR 0 38
40999: PUSH
41000: LD_VAR 0 39
41004: PUSH
41005: LD_VAR 0 40
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: PUSH
41018: LD_VAR 0 4
41022: PUSH
41023: LD_INT 1
41025: PLUS
41026: ARRAY
41027: ST_TO_ADDR
41028: GO 41395
41030: LD_INT 6
41032: DOUBLE
41033: EQUAL
41034: IFTRUE 41086
41036: LD_INT 7
41038: DOUBLE
41039: EQUAL
41040: IFTRUE 41086
41042: LD_INT 8
41044: DOUBLE
41045: EQUAL
41046: IFTRUE 41086
41048: LD_INT 13
41050: DOUBLE
41051: EQUAL
41052: IFTRUE 41086
41054: LD_INT 12
41056: DOUBLE
41057: EQUAL
41058: IFTRUE 41086
41060: LD_INT 15
41062: DOUBLE
41063: EQUAL
41064: IFTRUE 41086
41066: LD_INT 11
41068: DOUBLE
41069: EQUAL
41070: IFTRUE 41086
41072: LD_INT 14
41074: DOUBLE
41075: EQUAL
41076: IFTRUE 41086
41078: LD_INT 10
41080: DOUBLE
41081: EQUAL
41082: IFTRUE 41086
41084: GO 41142
41086: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41087: LD_ADDR_VAR 0 9
41091: PUSH
41092: LD_VAR 0 41
41096: PUSH
41097: LD_VAR 0 42
41101: PUSH
41102: LD_VAR 0 43
41106: PUSH
41107: LD_VAR 0 44
41111: PUSH
41112: LD_VAR 0 45
41116: PUSH
41117: LD_VAR 0 46
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: PUSH
41130: LD_VAR 0 4
41134: PUSH
41135: LD_INT 1
41137: PLUS
41138: ARRAY
41139: ST_TO_ADDR
41140: GO 41395
41142: LD_INT 36
41144: DOUBLE
41145: EQUAL
41146: IFTRUE 41150
41148: GO 41206
41150: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41151: LD_ADDR_VAR 0 9
41155: PUSH
41156: LD_VAR 0 47
41160: PUSH
41161: LD_VAR 0 48
41165: PUSH
41166: LD_VAR 0 49
41170: PUSH
41171: LD_VAR 0 50
41175: PUSH
41176: LD_VAR 0 51
41180: PUSH
41181: LD_VAR 0 52
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: PUSH
41194: LD_VAR 0 4
41198: PUSH
41199: LD_INT 1
41201: PLUS
41202: ARRAY
41203: ST_TO_ADDR
41204: GO 41395
41206: LD_INT 4
41208: DOUBLE
41209: EQUAL
41210: IFTRUE 41232
41212: LD_INT 5
41214: DOUBLE
41215: EQUAL
41216: IFTRUE 41232
41218: LD_INT 34
41220: DOUBLE
41221: EQUAL
41222: IFTRUE 41232
41224: LD_INT 37
41226: DOUBLE
41227: EQUAL
41228: IFTRUE 41232
41230: GO 41288
41232: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41233: LD_ADDR_VAR 0 9
41237: PUSH
41238: LD_VAR 0 53
41242: PUSH
41243: LD_VAR 0 54
41247: PUSH
41248: LD_VAR 0 55
41252: PUSH
41253: LD_VAR 0 56
41257: PUSH
41258: LD_VAR 0 57
41262: PUSH
41263: LD_VAR 0 58
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: PUSH
41276: LD_VAR 0 4
41280: PUSH
41281: LD_INT 1
41283: PLUS
41284: ARRAY
41285: ST_TO_ADDR
41286: GO 41395
41288: LD_INT 31
41290: DOUBLE
41291: EQUAL
41292: IFTRUE 41338
41294: LD_INT 32
41296: DOUBLE
41297: EQUAL
41298: IFTRUE 41338
41300: LD_INT 33
41302: DOUBLE
41303: EQUAL
41304: IFTRUE 41338
41306: LD_INT 27
41308: DOUBLE
41309: EQUAL
41310: IFTRUE 41338
41312: LD_INT 26
41314: DOUBLE
41315: EQUAL
41316: IFTRUE 41338
41318: LD_INT 28
41320: DOUBLE
41321: EQUAL
41322: IFTRUE 41338
41324: LD_INT 29
41326: DOUBLE
41327: EQUAL
41328: IFTRUE 41338
41330: LD_INT 30
41332: DOUBLE
41333: EQUAL
41334: IFTRUE 41338
41336: GO 41394
41338: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41339: LD_ADDR_VAR 0 9
41343: PUSH
41344: LD_VAR 0 59
41348: PUSH
41349: LD_VAR 0 60
41353: PUSH
41354: LD_VAR 0 61
41358: PUSH
41359: LD_VAR 0 62
41363: PUSH
41364: LD_VAR 0 63
41368: PUSH
41369: LD_VAR 0 64
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: PUSH
41382: LD_VAR 0 4
41386: PUSH
41387: LD_INT 1
41389: PLUS
41390: ARRAY
41391: ST_TO_ADDR
41392: GO 41395
41394: POP
// temp_list2 = [ ] ;
41395: LD_ADDR_VAR 0 10
41399: PUSH
41400: EMPTY
41401: ST_TO_ADDR
// for i in temp_list do
41402: LD_ADDR_VAR 0 8
41406: PUSH
41407: LD_VAR 0 9
41411: PUSH
41412: FOR_IN
41413: IFFALSE 41465
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41415: LD_ADDR_VAR 0 10
41419: PUSH
41420: LD_VAR 0 10
41424: PUSH
41425: LD_VAR 0 8
41429: PUSH
41430: LD_INT 1
41432: ARRAY
41433: PUSH
41434: LD_VAR 0 2
41438: PLUS
41439: PUSH
41440: LD_VAR 0 8
41444: PUSH
41445: LD_INT 2
41447: ARRAY
41448: PUSH
41449: LD_VAR 0 3
41453: PLUS
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: EMPTY
41460: LIST
41461: ADD
41462: ST_TO_ADDR
41463: GO 41412
41465: POP
41466: POP
// result = temp_list2 ;
41467: LD_ADDR_VAR 0 7
41471: PUSH
41472: LD_VAR 0 10
41476: ST_TO_ADDR
// end ;
41477: LD_VAR 0 7
41481: RET
// export function EnemyInRange ( unit , dist ) ; begin
41482: LD_INT 0
41484: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41485: LD_ADDR_VAR 0 3
41489: PUSH
41490: LD_VAR 0 1
41494: PPUSH
41495: CALL_OW 255
41499: PPUSH
41500: LD_VAR 0 1
41504: PPUSH
41505: CALL_OW 250
41509: PPUSH
41510: LD_VAR 0 1
41514: PPUSH
41515: CALL_OW 251
41519: PPUSH
41520: LD_VAR 0 2
41524: PPUSH
41525: CALL 14855 0 4
41529: PUSH
41530: LD_INT 4
41532: ARRAY
41533: ST_TO_ADDR
// end ;
41534: LD_VAR 0 3
41538: RET
// export function PlayerSeeMe ( unit ) ; begin
41539: LD_INT 0
41541: PPUSH
// result := See ( your_side , unit ) ;
41542: LD_ADDR_VAR 0 2
41546: PUSH
41547: LD_OWVAR 2
41551: PPUSH
41552: LD_VAR 0 1
41556: PPUSH
41557: CALL_OW 292
41561: ST_TO_ADDR
// end ;
41562: LD_VAR 0 2
41566: RET
// export function ReverseDir ( unit ) ; begin
41567: LD_INT 0
41569: PPUSH
// if not unit then
41570: LD_VAR 0 1
41574: NOT
41575: IFFALSE 41579
// exit ;
41577: GO 41602
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41579: LD_ADDR_VAR 0 2
41583: PUSH
41584: LD_VAR 0 1
41588: PPUSH
41589: CALL_OW 254
41593: PUSH
41594: LD_INT 3
41596: PLUS
41597: PUSH
41598: LD_INT 6
41600: MOD
41601: ST_TO_ADDR
// end ;
41602: LD_VAR 0 2
41606: RET
// export function ReverseArray ( array ) ; var i ; begin
41607: LD_INT 0
41609: PPUSH
41610: PPUSH
// if not array then
41611: LD_VAR 0 1
41615: NOT
41616: IFFALSE 41620
// exit ;
41618: GO 41675
// result := [ ] ;
41620: LD_ADDR_VAR 0 2
41624: PUSH
41625: EMPTY
41626: ST_TO_ADDR
// for i := array downto 1 do
41627: LD_ADDR_VAR 0 3
41631: PUSH
41632: DOUBLE
41633: LD_VAR 0 1
41637: INC
41638: ST_TO_ADDR
41639: LD_INT 1
41641: PUSH
41642: FOR_DOWNTO
41643: IFFALSE 41673
// result := Join ( result , array [ i ] ) ;
41645: LD_ADDR_VAR 0 2
41649: PUSH
41650: LD_VAR 0 2
41654: PPUSH
41655: LD_VAR 0 1
41659: PUSH
41660: LD_VAR 0 3
41664: ARRAY
41665: PPUSH
41666: CALL 46331 0 2
41670: ST_TO_ADDR
41671: GO 41642
41673: POP
41674: POP
// end ;
41675: LD_VAR 0 2
41679: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
41680: LD_INT 0
41682: PPUSH
41683: PPUSH
41684: PPUSH
41685: PPUSH
41686: PPUSH
41687: PPUSH
// if not unit or not hexes then
41688: LD_VAR 0 1
41692: NOT
41693: PUSH
41694: LD_VAR 0 2
41698: NOT
41699: OR
41700: IFFALSE 41704
// exit ;
41702: GO 41827
// dist := 9999 ;
41704: LD_ADDR_VAR 0 5
41708: PUSH
41709: LD_INT 9999
41711: ST_TO_ADDR
// for i = 1 to hexes do
41712: LD_ADDR_VAR 0 4
41716: PUSH
41717: DOUBLE
41718: LD_INT 1
41720: DEC
41721: ST_TO_ADDR
41722: LD_VAR 0 2
41726: PUSH
41727: FOR_TO
41728: IFFALSE 41815
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41730: LD_ADDR_VAR 0 6
41734: PUSH
41735: LD_VAR 0 1
41739: PPUSH
41740: LD_VAR 0 2
41744: PUSH
41745: LD_VAR 0 4
41749: ARRAY
41750: PUSH
41751: LD_INT 1
41753: ARRAY
41754: PPUSH
41755: LD_VAR 0 2
41759: PUSH
41760: LD_VAR 0 4
41764: ARRAY
41765: PUSH
41766: LD_INT 2
41768: ARRAY
41769: PPUSH
41770: CALL_OW 297
41774: ST_TO_ADDR
// if tdist < dist then
41775: LD_VAR 0 6
41779: PUSH
41780: LD_VAR 0 5
41784: LESS
41785: IFFALSE 41813
// begin hex := hexes [ i ] ;
41787: LD_ADDR_VAR 0 8
41791: PUSH
41792: LD_VAR 0 2
41796: PUSH
41797: LD_VAR 0 4
41801: ARRAY
41802: ST_TO_ADDR
// dist := tdist ;
41803: LD_ADDR_VAR 0 5
41807: PUSH
41808: LD_VAR 0 6
41812: ST_TO_ADDR
// end ; end ;
41813: GO 41727
41815: POP
41816: POP
// result := hex ;
41817: LD_ADDR_VAR 0 3
41821: PUSH
41822: LD_VAR 0 8
41826: ST_TO_ADDR
// end ;
41827: LD_VAR 0 3
41831: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
41832: LD_INT 0
41834: PPUSH
41835: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
41836: LD_VAR 0 1
41840: NOT
41841: PUSH
41842: LD_VAR 0 1
41846: PUSH
41847: LD_INT 21
41849: PUSH
41850: LD_INT 2
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 23
41859: PUSH
41860: LD_INT 2
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PPUSH
41871: CALL_OW 69
41875: IN
41876: NOT
41877: OR
41878: IFFALSE 41882
// exit ;
41880: GO 41929
// for i = 1 to 3 do
41882: LD_ADDR_VAR 0 3
41886: PUSH
41887: DOUBLE
41888: LD_INT 1
41890: DEC
41891: ST_TO_ADDR
41892: LD_INT 3
41894: PUSH
41895: FOR_TO
41896: IFFALSE 41927
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
41898: LD_VAR 0 1
41902: PPUSH
41903: CALL_OW 250
41907: PPUSH
41908: LD_VAR 0 1
41912: PPUSH
41913: CALL_OW 251
41917: PPUSH
41918: LD_INT 1
41920: PPUSH
41921: CALL_OW 453
41925: GO 41895
41927: POP
41928: POP
// end ;
41929: LD_VAR 0 2
41933: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
41934: LD_INT 0
41936: PPUSH
41937: PPUSH
41938: PPUSH
41939: PPUSH
41940: PPUSH
41941: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
41942: LD_VAR 0 1
41946: NOT
41947: PUSH
41948: LD_VAR 0 2
41952: NOT
41953: OR
41954: PUSH
41955: LD_VAR 0 1
41959: PPUSH
41960: CALL_OW 314
41964: OR
41965: IFFALSE 41969
// exit ;
41967: GO 42436
// if GetLives ( i ) < 250 then
41969: LD_VAR 0 4
41973: PPUSH
41974: CALL_OW 256
41978: PUSH
41979: LD_INT 250
41981: LESS
41982: IFFALSE 41995
// begin ComAutodestruct ( i ) ;
41984: LD_VAR 0 4
41988: PPUSH
41989: CALL 41832 0 1
// exit ;
41993: GO 42436
// end ; x := GetX ( enemy_unit ) ;
41995: LD_ADDR_VAR 0 7
41999: PUSH
42000: LD_VAR 0 2
42004: PPUSH
42005: CALL_OW 250
42009: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42010: LD_ADDR_VAR 0 8
42014: PUSH
42015: LD_VAR 0 2
42019: PPUSH
42020: CALL_OW 251
42024: ST_TO_ADDR
// if not x or not y then
42025: LD_VAR 0 7
42029: NOT
42030: PUSH
42031: LD_VAR 0 8
42035: NOT
42036: OR
42037: IFFALSE 42041
// exit ;
42039: GO 42436
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42041: LD_ADDR_VAR 0 6
42045: PUSH
42046: LD_VAR 0 7
42050: PPUSH
42051: LD_INT 0
42053: PPUSH
42054: LD_INT 4
42056: PPUSH
42057: CALL_OW 272
42061: PUSH
42062: LD_VAR 0 8
42066: PPUSH
42067: LD_INT 0
42069: PPUSH
42070: LD_INT 4
42072: PPUSH
42073: CALL_OW 273
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_VAR 0 7
42086: PPUSH
42087: LD_INT 1
42089: PPUSH
42090: LD_INT 4
42092: PPUSH
42093: CALL_OW 272
42097: PUSH
42098: LD_VAR 0 8
42102: PPUSH
42103: LD_INT 1
42105: PPUSH
42106: LD_INT 4
42108: PPUSH
42109: CALL_OW 273
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_VAR 0 7
42122: PPUSH
42123: LD_INT 2
42125: PPUSH
42126: LD_INT 4
42128: PPUSH
42129: CALL_OW 272
42133: PUSH
42134: LD_VAR 0 8
42138: PPUSH
42139: LD_INT 2
42141: PPUSH
42142: LD_INT 4
42144: PPUSH
42145: CALL_OW 273
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_VAR 0 7
42158: PPUSH
42159: LD_INT 3
42161: PPUSH
42162: LD_INT 4
42164: PPUSH
42165: CALL_OW 272
42169: PUSH
42170: LD_VAR 0 8
42174: PPUSH
42175: LD_INT 3
42177: PPUSH
42178: LD_INT 4
42180: PPUSH
42181: CALL_OW 273
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_VAR 0 7
42194: PPUSH
42195: LD_INT 4
42197: PPUSH
42198: LD_INT 4
42200: PPUSH
42201: CALL_OW 272
42205: PUSH
42206: LD_VAR 0 8
42210: PPUSH
42211: LD_INT 4
42213: PPUSH
42214: LD_INT 4
42216: PPUSH
42217: CALL_OW 273
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_VAR 0 7
42230: PPUSH
42231: LD_INT 5
42233: PPUSH
42234: LD_INT 4
42236: PPUSH
42237: CALL_OW 272
42241: PUSH
42242: LD_VAR 0 8
42246: PPUSH
42247: LD_INT 5
42249: PPUSH
42250: LD_INT 4
42252: PPUSH
42253: CALL_OW 273
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: ST_TO_ADDR
// for i = tmp downto 1 do
42270: LD_ADDR_VAR 0 4
42274: PUSH
42275: DOUBLE
42276: LD_VAR 0 6
42280: INC
42281: ST_TO_ADDR
42282: LD_INT 1
42284: PUSH
42285: FOR_DOWNTO
42286: IFFALSE 42387
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42288: LD_VAR 0 6
42292: PUSH
42293: LD_VAR 0 4
42297: ARRAY
42298: PUSH
42299: LD_INT 1
42301: ARRAY
42302: PPUSH
42303: LD_VAR 0 6
42307: PUSH
42308: LD_VAR 0 4
42312: ARRAY
42313: PUSH
42314: LD_INT 2
42316: ARRAY
42317: PPUSH
42318: CALL_OW 488
42322: NOT
42323: PUSH
42324: LD_VAR 0 6
42328: PUSH
42329: LD_VAR 0 4
42333: ARRAY
42334: PUSH
42335: LD_INT 1
42337: ARRAY
42338: PPUSH
42339: LD_VAR 0 6
42343: PUSH
42344: LD_VAR 0 4
42348: ARRAY
42349: PUSH
42350: LD_INT 2
42352: ARRAY
42353: PPUSH
42354: CALL_OW 428
42358: PUSH
42359: LD_INT 0
42361: NONEQUAL
42362: OR
42363: IFFALSE 42385
// tmp := Delete ( tmp , i ) ;
42365: LD_ADDR_VAR 0 6
42369: PUSH
42370: LD_VAR 0 6
42374: PPUSH
42375: LD_VAR 0 4
42379: PPUSH
42380: CALL_OW 3
42384: ST_TO_ADDR
42385: GO 42285
42387: POP
42388: POP
// j := GetClosestHex ( unit , tmp ) ;
42389: LD_ADDR_VAR 0 5
42393: PUSH
42394: LD_VAR 0 1
42398: PPUSH
42399: LD_VAR 0 6
42403: PPUSH
42404: CALL 41680 0 2
42408: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42409: LD_VAR 0 1
42413: PPUSH
42414: LD_VAR 0 5
42418: PUSH
42419: LD_INT 1
42421: ARRAY
42422: PPUSH
42423: LD_VAR 0 5
42427: PUSH
42428: LD_INT 2
42430: ARRAY
42431: PPUSH
42432: CALL_OW 111
// end ;
42436: LD_VAR 0 3
42440: RET
// export function PrepareApemanSoldier ( ) ; begin
42441: LD_INT 0
42443: PPUSH
// uc_nation := 0 ;
42444: LD_ADDR_OWVAR 21
42448: PUSH
42449: LD_INT 0
42451: ST_TO_ADDR
// hc_sex := sex_male ;
42452: LD_ADDR_OWVAR 27
42456: PUSH
42457: LD_INT 1
42459: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42460: LD_ADDR_OWVAR 28
42464: PUSH
42465: LD_INT 15
42467: ST_TO_ADDR
// hc_gallery :=  ;
42468: LD_ADDR_OWVAR 33
42472: PUSH
42473: LD_STRING 
42475: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42476: LD_ADDR_OWVAR 31
42480: PUSH
42481: LD_INT 0
42483: PPUSH
42484: LD_INT 3
42486: PPUSH
42487: CALL_OW 12
42491: PUSH
42492: LD_INT 0
42494: PPUSH
42495: LD_INT 3
42497: PPUSH
42498: CALL_OW 12
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: ST_TO_ADDR
// end ;
42515: LD_VAR 0 1
42519: RET
// export function PrepareApemanEngineer ( ) ; begin
42520: LD_INT 0
42522: PPUSH
// uc_nation := 0 ;
42523: LD_ADDR_OWVAR 21
42527: PUSH
42528: LD_INT 0
42530: ST_TO_ADDR
// hc_sex := sex_male ;
42531: LD_ADDR_OWVAR 27
42535: PUSH
42536: LD_INT 1
42538: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
42539: LD_ADDR_OWVAR 28
42543: PUSH
42544: LD_INT 16
42546: ST_TO_ADDR
// hc_gallery :=  ;
42547: LD_ADDR_OWVAR 33
42551: PUSH
42552: LD_STRING 
42554: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42555: LD_ADDR_OWVAR 31
42559: PUSH
42560: LD_INT 0
42562: PPUSH
42563: LD_INT 3
42565: PPUSH
42566: CALL_OW 12
42570: PUSH
42571: LD_INT 0
42573: PPUSH
42574: LD_INT 3
42576: PPUSH
42577: CALL_OW 12
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: ST_TO_ADDR
// end ;
42594: LD_VAR 0 1
42598: RET
// export function PrepareApeman ( agressivity ) ; begin
42599: LD_INT 0
42601: PPUSH
// uc_side := 0 ;
42602: LD_ADDR_OWVAR 20
42606: PUSH
42607: LD_INT 0
42609: ST_TO_ADDR
// uc_nation := 0 ;
42610: LD_ADDR_OWVAR 21
42614: PUSH
42615: LD_INT 0
42617: ST_TO_ADDR
// hc_sex := sex_male ;
42618: LD_ADDR_OWVAR 27
42622: PUSH
42623: LD_INT 1
42625: ST_TO_ADDR
// hc_class := class_apeman ;
42626: LD_ADDR_OWVAR 28
42630: PUSH
42631: LD_INT 12
42633: ST_TO_ADDR
// hc_gallery :=  ;
42634: LD_ADDR_OWVAR 33
42638: PUSH
42639: LD_STRING 
42641: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42642: LD_ADDR_OWVAR 35
42646: PUSH
42647: LD_VAR 0 1
42651: NEG
42652: PPUSH
42653: LD_VAR 0 1
42657: PPUSH
42658: CALL_OW 12
42662: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42663: LD_ADDR_OWVAR 31
42667: PUSH
42668: LD_INT 0
42670: PPUSH
42671: LD_INT 3
42673: PPUSH
42674: CALL_OW 12
42678: PUSH
42679: LD_INT 0
42681: PPUSH
42682: LD_INT 3
42684: PPUSH
42685: CALL_OW 12
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: ST_TO_ADDR
// end ;
42702: LD_VAR 0 2
42706: RET
// export function PrepareTiger ( agressivity ) ; begin
42707: LD_INT 0
42709: PPUSH
// uc_side := 0 ;
42710: LD_ADDR_OWVAR 20
42714: PUSH
42715: LD_INT 0
42717: ST_TO_ADDR
// uc_nation := 0 ;
42718: LD_ADDR_OWVAR 21
42722: PUSH
42723: LD_INT 0
42725: ST_TO_ADDR
// hc_class := class_tiger ;
42726: LD_ADDR_OWVAR 28
42730: PUSH
42731: LD_INT 14
42733: ST_TO_ADDR
// hc_gallery :=  ;
42734: LD_ADDR_OWVAR 33
42738: PUSH
42739: LD_STRING 
42741: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42742: LD_ADDR_OWVAR 35
42746: PUSH
42747: LD_VAR 0 1
42751: NEG
42752: PPUSH
42753: LD_VAR 0 1
42757: PPUSH
42758: CALL_OW 12
42762: ST_TO_ADDR
// end ;
42763: LD_VAR 0 2
42767: RET
// export function PrepareEnchidna ( ) ; begin
42768: LD_INT 0
42770: PPUSH
// uc_side := 0 ;
42771: LD_ADDR_OWVAR 20
42775: PUSH
42776: LD_INT 0
42778: ST_TO_ADDR
// uc_nation := 0 ;
42779: LD_ADDR_OWVAR 21
42783: PUSH
42784: LD_INT 0
42786: ST_TO_ADDR
// hc_class := class_baggie ;
42787: LD_ADDR_OWVAR 28
42791: PUSH
42792: LD_INT 13
42794: ST_TO_ADDR
// hc_gallery :=  ;
42795: LD_ADDR_OWVAR 33
42799: PUSH
42800: LD_STRING 
42802: ST_TO_ADDR
// end ;
42803: LD_VAR 0 1
42807: RET
// export function PrepareFrog ( ) ; begin
42808: LD_INT 0
42810: PPUSH
// uc_side := 0 ;
42811: LD_ADDR_OWVAR 20
42815: PUSH
42816: LD_INT 0
42818: ST_TO_ADDR
// uc_nation := 0 ;
42819: LD_ADDR_OWVAR 21
42823: PUSH
42824: LD_INT 0
42826: ST_TO_ADDR
// hc_class := class_frog ;
42827: LD_ADDR_OWVAR 28
42831: PUSH
42832: LD_INT 19
42834: ST_TO_ADDR
// hc_gallery :=  ;
42835: LD_ADDR_OWVAR 33
42839: PUSH
42840: LD_STRING 
42842: ST_TO_ADDR
// end ;
42843: LD_VAR 0 1
42847: RET
// export function PrepareFish ( ) ; begin
42848: LD_INT 0
42850: PPUSH
// uc_side := 0 ;
42851: LD_ADDR_OWVAR 20
42855: PUSH
42856: LD_INT 0
42858: ST_TO_ADDR
// uc_nation := 0 ;
42859: LD_ADDR_OWVAR 21
42863: PUSH
42864: LD_INT 0
42866: ST_TO_ADDR
// hc_class := class_fish ;
42867: LD_ADDR_OWVAR 28
42871: PUSH
42872: LD_INT 20
42874: ST_TO_ADDR
// hc_gallery :=  ;
42875: LD_ADDR_OWVAR 33
42879: PUSH
42880: LD_STRING 
42882: ST_TO_ADDR
// end ;
42883: LD_VAR 0 1
42887: RET
// export function PrepareBird ( ) ; begin
42888: LD_INT 0
42890: PPUSH
// uc_side := 0 ;
42891: LD_ADDR_OWVAR 20
42895: PUSH
42896: LD_INT 0
42898: ST_TO_ADDR
// uc_nation := 0 ;
42899: LD_ADDR_OWVAR 21
42903: PUSH
42904: LD_INT 0
42906: ST_TO_ADDR
// hc_class := class_phororhacos ;
42907: LD_ADDR_OWVAR 28
42911: PUSH
42912: LD_INT 18
42914: ST_TO_ADDR
// hc_gallery :=  ;
42915: LD_ADDR_OWVAR 33
42919: PUSH
42920: LD_STRING 
42922: ST_TO_ADDR
// end ;
42923: LD_VAR 0 1
42927: RET
// export function PrepareHorse ( ) ; begin
42928: LD_INT 0
42930: PPUSH
// uc_side := 0 ;
42931: LD_ADDR_OWVAR 20
42935: PUSH
42936: LD_INT 0
42938: ST_TO_ADDR
// uc_nation := 0 ;
42939: LD_ADDR_OWVAR 21
42943: PUSH
42944: LD_INT 0
42946: ST_TO_ADDR
// hc_class := class_horse ;
42947: LD_ADDR_OWVAR 28
42951: PUSH
42952: LD_INT 21
42954: ST_TO_ADDR
// hc_gallery :=  ;
42955: LD_ADDR_OWVAR 33
42959: PUSH
42960: LD_STRING 
42962: ST_TO_ADDR
// end ;
42963: LD_VAR 0 1
42967: RET
// export function PrepareMastodont ( ) ; begin
42968: LD_INT 0
42970: PPUSH
// uc_side := 0 ;
42971: LD_ADDR_OWVAR 20
42975: PUSH
42976: LD_INT 0
42978: ST_TO_ADDR
// uc_nation := 0 ;
42979: LD_ADDR_OWVAR 21
42983: PUSH
42984: LD_INT 0
42986: ST_TO_ADDR
// vc_chassis := class_mastodont ;
42987: LD_ADDR_OWVAR 37
42991: PUSH
42992: LD_INT 31
42994: ST_TO_ADDR
// vc_control := control_rider ;
42995: LD_ADDR_OWVAR 38
42999: PUSH
43000: LD_INT 4
43002: ST_TO_ADDR
// end ;
43003: LD_VAR 0 1
43007: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43008: LD_INT 0
43010: PPUSH
43011: PPUSH
43012: PPUSH
// uc_side = 0 ;
43013: LD_ADDR_OWVAR 20
43017: PUSH
43018: LD_INT 0
43020: ST_TO_ADDR
// uc_nation = 0 ;
43021: LD_ADDR_OWVAR 21
43025: PUSH
43026: LD_INT 0
43028: ST_TO_ADDR
// InitHc_All ( ) ;
43029: CALL_OW 584
// InitVc ;
43033: CALL_OW 20
// if mastodonts then
43037: LD_VAR 0 6
43041: IFFALSE 43108
// for i = 1 to mastodonts do
43043: LD_ADDR_VAR 0 11
43047: PUSH
43048: DOUBLE
43049: LD_INT 1
43051: DEC
43052: ST_TO_ADDR
43053: LD_VAR 0 6
43057: PUSH
43058: FOR_TO
43059: IFFALSE 43106
// begin vc_chassis := 31 ;
43061: LD_ADDR_OWVAR 37
43065: PUSH
43066: LD_INT 31
43068: ST_TO_ADDR
// vc_control := control_rider ;
43069: LD_ADDR_OWVAR 38
43073: PUSH
43074: LD_INT 4
43076: ST_TO_ADDR
// animal := CreateVehicle ;
43077: LD_ADDR_VAR 0 12
43081: PUSH
43082: CALL_OW 45
43086: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43087: LD_VAR 0 12
43091: PPUSH
43092: LD_VAR 0 8
43096: PPUSH
43097: LD_INT 0
43099: PPUSH
43100: CALL 45236 0 3
// end ;
43104: GO 43058
43106: POP
43107: POP
// if horses then
43108: LD_VAR 0 5
43112: IFFALSE 43179
// for i = 1 to horses do
43114: LD_ADDR_VAR 0 11
43118: PUSH
43119: DOUBLE
43120: LD_INT 1
43122: DEC
43123: ST_TO_ADDR
43124: LD_VAR 0 5
43128: PUSH
43129: FOR_TO
43130: IFFALSE 43177
// begin hc_class := 21 ;
43132: LD_ADDR_OWVAR 28
43136: PUSH
43137: LD_INT 21
43139: ST_TO_ADDR
// hc_gallery :=  ;
43140: LD_ADDR_OWVAR 33
43144: PUSH
43145: LD_STRING 
43147: ST_TO_ADDR
// animal := CreateHuman ;
43148: LD_ADDR_VAR 0 12
43152: PUSH
43153: CALL_OW 44
43157: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43158: LD_VAR 0 12
43162: PPUSH
43163: LD_VAR 0 8
43167: PPUSH
43168: LD_INT 0
43170: PPUSH
43171: CALL 45236 0 3
// end ;
43175: GO 43129
43177: POP
43178: POP
// if birds then
43179: LD_VAR 0 1
43183: IFFALSE 43250
// for i = 1 to birds do
43185: LD_ADDR_VAR 0 11
43189: PUSH
43190: DOUBLE
43191: LD_INT 1
43193: DEC
43194: ST_TO_ADDR
43195: LD_VAR 0 1
43199: PUSH
43200: FOR_TO
43201: IFFALSE 43248
// begin hc_class := 18 ;
43203: LD_ADDR_OWVAR 28
43207: PUSH
43208: LD_INT 18
43210: ST_TO_ADDR
// hc_gallery =  ;
43211: LD_ADDR_OWVAR 33
43215: PUSH
43216: LD_STRING 
43218: ST_TO_ADDR
// animal := CreateHuman ;
43219: LD_ADDR_VAR 0 12
43223: PUSH
43224: CALL_OW 44
43228: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43229: LD_VAR 0 12
43233: PPUSH
43234: LD_VAR 0 8
43238: PPUSH
43239: LD_INT 0
43241: PPUSH
43242: CALL 45236 0 3
// end ;
43246: GO 43200
43248: POP
43249: POP
// if tigers then
43250: LD_VAR 0 2
43254: IFFALSE 43338
// for i = 1 to tigers do
43256: LD_ADDR_VAR 0 11
43260: PUSH
43261: DOUBLE
43262: LD_INT 1
43264: DEC
43265: ST_TO_ADDR
43266: LD_VAR 0 2
43270: PUSH
43271: FOR_TO
43272: IFFALSE 43336
// begin hc_class = class_tiger ;
43274: LD_ADDR_OWVAR 28
43278: PUSH
43279: LD_INT 14
43281: ST_TO_ADDR
// hc_gallery =  ;
43282: LD_ADDR_OWVAR 33
43286: PUSH
43287: LD_STRING 
43289: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43290: LD_ADDR_OWVAR 35
43294: PUSH
43295: LD_INT 7
43297: NEG
43298: PPUSH
43299: LD_INT 7
43301: PPUSH
43302: CALL_OW 12
43306: ST_TO_ADDR
// animal := CreateHuman ;
43307: LD_ADDR_VAR 0 12
43311: PUSH
43312: CALL_OW 44
43316: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43317: LD_VAR 0 12
43321: PPUSH
43322: LD_VAR 0 8
43326: PPUSH
43327: LD_INT 0
43329: PPUSH
43330: CALL 45236 0 3
// end ;
43334: GO 43271
43336: POP
43337: POP
// if apemans then
43338: LD_VAR 0 3
43342: IFFALSE 43465
// for i = 1 to apemans do
43344: LD_ADDR_VAR 0 11
43348: PUSH
43349: DOUBLE
43350: LD_INT 1
43352: DEC
43353: ST_TO_ADDR
43354: LD_VAR 0 3
43358: PUSH
43359: FOR_TO
43360: IFFALSE 43463
// begin hc_class = class_apeman ;
43362: LD_ADDR_OWVAR 28
43366: PUSH
43367: LD_INT 12
43369: ST_TO_ADDR
// hc_gallery =  ;
43370: LD_ADDR_OWVAR 33
43374: PUSH
43375: LD_STRING 
43377: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43378: LD_ADDR_OWVAR 35
43382: PUSH
43383: LD_INT 2
43385: NEG
43386: PPUSH
43387: LD_INT 2
43389: PPUSH
43390: CALL_OW 12
43394: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43395: LD_ADDR_OWVAR 31
43399: PUSH
43400: LD_INT 1
43402: PPUSH
43403: LD_INT 3
43405: PPUSH
43406: CALL_OW 12
43410: PUSH
43411: LD_INT 1
43413: PPUSH
43414: LD_INT 3
43416: PPUSH
43417: CALL_OW 12
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: ST_TO_ADDR
// animal := CreateHuman ;
43434: LD_ADDR_VAR 0 12
43438: PUSH
43439: CALL_OW 44
43443: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43444: LD_VAR 0 12
43448: PPUSH
43449: LD_VAR 0 8
43453: PPUSH
43454: LD_INT 0
43456: PPUSH
43457: CALL 45236 0 3
// end ;
43461: GO 43359
43463: POP
43464: POP
// if enchidnas then
43465: LD_VAR 0 4
43469: IFFALSE 43536
// for i = 1 to enchidnas do
43471: LD_ADDR_VAR 0 11
43475: PUSH
43476: DOUBLE
43477: LD_INT 1
43479: DEC
43480: ST_TO_ADDR
43481: LD_VAR 0 4
43485: PUSH
43486: FOR_TO
43487: IFFALSE 43534
// begin hc_class = 13 ;
43489: LD_ADDR_OWVAR 28
43493: PUSH
43494: LD_INT 13
43496: ST_TO_ADDR
// hc_gallery =  ;
43497: LD_ADDR_OWVAR 33
43501: PUSH
43502: LD_STRING 
43504: ST_TO_ADDR
// animal := CreateHuman ;
43505: LD_ADDR_VAR 0 12
43509: PUSH
43510: CALL_OW 44
43514: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43515: LD_VAR 0 12
43519: PPUSH
43520: LD_VAR 0 8
43524: PPUSH
43525: LD_INT 0
43527: PPUSH
43528: CALL 45236 0 3
// end ;
43532: GO 43486
43534: POP
43535: POP
// if fishes then
43536: LD_VAR 0 7
43540: IFFALSE 43607
// for i = 1 to fishes do
43542: LD_ADDR_VAR 0 11
43546: PUSH
43547: DOUBLE
43548: LD_INT 1
43550: DEC
43551: ST_TO_ADDR
43552: LD_VAR 0 7
43556: PUSH
43557: FOR_TO
43558: IFFALSE 43605
// begin hc_class = 20 ;
43560: LD_ADDR_OWVAR 28
43564: PUSH
43565: LD_INT 20
43567: ST_TO_ADDR
// hc_gallery =  ;
43568: LD_ADDR_OWVAR 33
43572: PUSH
43573: LD_STRING 
43575: ST_TO_ADDR
// animal := CreateHuman ;
43576: LD_ADDR_VAR 0 12
43580: PUSH
43581: CALL_OW 44
43585: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43586: LD_VAR 0 12
43590: PPUSH
43591: LD_VAR 0 9
43595: PPUSH
43596: LD_INT 0
43598: PPUSH
43599: CALL 45236 0 3
// end ;
43603: GO 43557
43605: POP
43606: POP
// end ;
43607: LD_VAR 0 10
43611: RET
// export function WantHeal ( sci , unit ) ; begin
43612: LD_INT 0
43614: PPUSH
// if GetTaskList ( sci ) > 0 then
43615: LD_VAR 0 1
43619: PPUSH
43620: CALL_OW 437
43624: PUSH
43625: LD_INT 0
43627: GREATER
43628: IFFALSE 43698
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43630: LD_VAR 0 1
43634: PPUSH
43635: CALL_OW 437
43639: PUSH
43640: LD_INT 1
43642: ARRAY
43643: PUSH
43644: LD_INT 1
43646: ARRAY
43647: PUSH
43648: LD_STRING l
43650: EQUAL
43651: PUSH
43652: LD_VAR 0 1
43656: PPUSH
43657: CALL_OW 437
43661: PUSH
43662: LD_INT 1
43664: ARRAY
43665: PUSH
43666: LD_INT 4
43668: ARRAY
43669: PUSH
43670: LD_VAR 0 2
43674: EQUAL
43675: AND
43676: IFFALSE 43688
// result := true else
43678: LD_ADDR_VAR 0 3
43682: PUSH
43683: LD_INT 1
43685: ST_TO_ADDR
43686: GO 43696
// result := false ;
43688: LD_ADDR_VAR 0 3
43692: PUSH
43693: LD_INT 0
43695: ST_TO_ADDR
// end else
43696: GO 43706
// result := false ;
43698: LD_ADDR_VAR 0 3
43702: PUSH
43703: LD_INT 0
43705: ST_TO_ADDR
// end ;
43706: LD_VAR 0 3
43710: RET
// export function HealTarget ( sci ) ; begin
43711: LD_INT 0
43713: PPUSH
// if not sci then
43714: LD_VAR 0 1
43718: NOT
43719: IFFALSE 43723
// exit ;
43721: GO 43788
// result := 0 ;
43723: LD_ADDR_VAR 0 2
43727: PUSH
43728: LD_INT 0
43730: ST_TO_ADDR
// if GetTaskList ( sci ) then
43731: LD_VAR 0 1
43735: PPUSH
43736: CALL_OW 437
43740: IFFALSE 43788
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
43742: LD_VAR 0 1
43746: PPUSH
43747: CALL_OW 437
43751: PUSH
43752: LD_INT 1
43754: ARRAY
43755: PUSH
43756: LD_INT 1
43758: ARRAY
43759: PUSH
43760: LD_STRING l
43762: EQUAL
43763: IFFALSE 43788
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
43765: LD_ADDR_VAR 0 2
43769: PUSH
43770: LD_VAR 0 1
43774: PPUSH
43775: CALL_OW 437
43779: PUSH
43780: LD_INT 1
43782: ARRAY
43783: PUSH
43784: LD_INT 4
43786: ARRAY
43787: ST_TO_ADDR
// end ;
43788: LD_VAR 0 2
43792: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
43793: LD_INT 0
43795: PPUSH
43796: PPUSH
43797: PPUSH
43798: PPUSH
// if not base_units then
43799: LD_VAR 0 1
43803: NOT
43804: IFFALSE 43808
// exit ;
43806: GO 43895
// result := false ;
43808: LD_ADDR_VAR 0 2
43812: PUSH
43813: LD_INT 0
43815: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
43816: LD_ADDR_VAR 0 5
43820: PUSH
43821: LD_VAR 0 1
43825: PPUSH
43826: LD_INT 21
43828: PUSH
43829: LD_INT 3
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PPUSH
43836: CALL_OW 72
43840: ST_TO_ADDR
// if not tmp then
43841: LD_VAR 0 5
43845: NOT
43846: IFFALSE 43850
// exit ;
43848: GO 43895
// for i in tmp do
43850: LD_ADDR_VAR 0 3
43854: PUSH
43855: LD_VAR 0 5
43859: PUSH
43860: FOR_IN
43861: IFFALSE 43893
// begin result := EnemyInRange ( i , 22 ) ;
43863: LD_ADDR_VAR 0 2
43867: PUSH
43868: LD_VAR 0 3
43872: PPUSH
43873: LD_INT 22
43875: PPUSH
43876: CALL 41482 0 2
43880: ST_TO_ADDR
// if result then
43881: LD_VAR 0 2
43885: IFFALSE 43891
// exit ;
43887: POP
43888: POP
43889: GO 43895
// end ;
43891: GO 43860
43893: POP
43894: POP
// end ;
43895: LD_VAR 0 2
43899: RET
// export function FilterByTag ( units , tag ) ; begin
43900: LD_INT 0
43902: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
43903: LD_ADDR_VAR 0 3
43907: PUSH
43908: LD_VAR 0 1
43912: PPUSH
43913: LD_INT 120
43915: PUSH
43916: LD_VAR 0 2
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PPUSH
43925: CALL_OW 72
43929: ST_TO_ADDR
// end ;
43930: LD_VAR 0 3
43934: RET
// export function IsDriver ( un ) ; begin
43935: LD_INT 0
43937: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
43938: LD_ADDR_VAR 0 2
43942: PUSH
43943: LD_VAR 0 1
43947: PUSH
43948: LD_INT 55
43950: PUSH
43951: EMPTY
43952: LIST
43953: PPUSH
43954: CALL_OW 69
43958: IN
43959: ST_TO_ADDR
// end ;
43960: LD_VAR 0 2
43964: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
43965: LD_INT 0
43967: PPUSH
43968: PPUSH
// list := [ ] ;
43969: LD_ADDR_VAR 0 5
43973: PUSH
43974: EMPTY
43975: ST_TO_ADDR
// case d of 0 :
43976: LD_VAR 0 3
43980: PUSH
43981: LD_INT 0
43983: DOUBLE
43984: EQUAL
43985: IFTRUE 43989
43987: GO 44122
43989: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
43990: LD_ADDR_VAR 0 5
43994: PUSH
43995: LD_VAR 0 1
43999: PUSH
44000: LD_INT 4
44002: MINUS
44003: PUSH
44004: LD_VAR 0 2
44008: PUSH
44009: LD_INT 4
44011: MINUS
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: LIST
44020: PUSH
44021: LD_VAR 0 1
44025: PUSH
44026: LD_INT 3
44028: MINUS
44029: PUSH
44030: LD_VAR 0 2
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: LIST
44042: PUSH
44043: LD_VAR 0 1
44047: PUSH
44048: LD_INT 4
44050: PLUS
44051: PUSH
44052: LD_VAR 0 2
44056: PUSH
44057: LD_INT 4
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: LIST
44064: PUSH
44065: LD_VAR 0 1
44069: PUSH
44070: LD_INT 3
44072: PLUS
44073: PUSH
44074: LD_VAR 0 2
44078: PUSH
44079: LD_INT 3
44081: PLUS
44082: PUSH
44083: LD_INT 5
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: LIST
44090: PUSH
44091: LD_VAR 0 1
44095: PUSH
44096: LD_VAR 0 2
44100: PUSH
44101: LD_INT 4
44103: PLUS
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: LIST
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: ST_TO_ADDR
// end ; 1 :
44120: GO 44820
44122: LD_INT 1
44124: DOUBLE
44125: EQUAL
44126: IFTRUE 44130
44128: GO 44263
44130: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44131: LD_ADDR_VAR 0 5
44135: PUSH
44136: LD_VAR 0 1
44140: PUSH
44141: LD_VAR 0 2
44145: PUSH
44146: LD_INT 4
44148: MINUS
44149: PUSH
44150: LD_INT 3
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: LIST
44157: PUSH
44158: LD_VAR 0 1
44162: PUSH
44163: LD_INT 3
44165: MINUS
44166: PUSH
44167: LD_VAR 0 2
44171: PUSH
44172: LD_INT 3
44174: MINUS
44175: PUSH
44176: LD_INT 2
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: LIST
44183: PUSH
44184: LD_VAR 0 1
44188: PUSH
44189: LD_INT 4
44191: MINUS
44192: PUSH
44193: LD_VAR 0 2
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: LIST
44205: PUSH
44206: LD_VAR 0 1
44210: PUSH
44211: LD_VAR 0 2
44215: PUSH
44216: LD_INT 3
44218: PLUS
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: LIST
44227: PUSH
44228: LD_VAR 0 1
44232: PUSH
44233: LD_INT 4
44235: PLUS
44236: PUSH
44237: LD_VAR 0 2
44241: PUSH
44242: LD_INT 4
44244: PLUS
44245: PUSH
44246: LD_INT 5
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: LIST
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: ST_TO_ADDR
// end ; 2 :
44261: GO 44820
44263: LD_INT 2
44265: DOUBLE
44266: EQUAL
44267: IFTRUE 44271
44269: GO 44400
44271: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44272: LD_ADDR_VAR 0 5
44276: PUSH
44277: LD_VAR 0 1
44281: PUSH
44282: LD_VAR 0 2
44286: PUSH
44287: LD_INT 3
44289: MINUS
44290: PUSH
44291: LD_INT 3
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: LIST
44298: PUSH
44299: LD_VAR 0 1
44303: PUSH
44304: LD_INT 4
44306: PLUS
44307: PUSH
44308: LD_VAR 0 2
44312: PUSH
44313: LD_INT 4
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: LIST
44320: PUSH
44321: LD_VAR 0 1
44325: PUSH
44326: LD_VAR 0 2
44330: PUSH
44331: LD_INT 4
44333: PLUS
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: LIST
44342: PUSH
44343: LD_VAR 0 1
44347: PUSH
44348: LD_INT 3
44350: MINUS
44351: PUSH
44352: LD_VAR 0 2
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: LIST
44364: PUSH
44365: LD_VAR 0 1
44369: PUSH
44370: LD_INT 4
44372: MINUS
44373: PUSH
44374: LD_VAR 0 2
44378: PUSH
44379: LD_INT 4
44381: MINUS
44382: PUSH
44383: LD_INT 2
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: LIST
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: ST_TO_ADDR
// end ; 3 :
44398: GO 44820
44400: LD_INT 3
44402: DOUBLE
44403: EQUAL
44404: IFTRUE 44408
44406: GO 44541
44408: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44409: LD_ADDR_VAR 0 5
44413: PUSH
44414: LD_VAR 0 1
44418: PUSH
44419: LD_INT 3
44421: PLUS
44422: PUSH
44423: LD_VAR 0 2
44427: PUSH
44428: LD_INT 4
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: LIST
44435: PUSH
44436: LD_VAR 0 1
44440: PUSH
44441: LD_INT 4
44443: PLUS
44444: PUSH
44445: LD_VAR 0 2
44449: PUSH
44450: LD_INT 4
44452: PLUS
44453: PUSH
44454: LD_INT 5
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: LIST
44461: PUSH
44462: LD_VAR 0 1
44466: PUSH
44467: LD_INT 4
44469: MINUS
44470: PUSH
44471: LD_VAR 0 2
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: LIST
44483: PUSH
44484: LD_VAR 0 1
44488: PUSH
44489: LD_VAR 0 2
44493: PUSH
44494: LD_INT 4
44496: MINUS
44497: PUSH
44498: LD_INT 3
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: LIST
44505: PUSH
44506: LD_VAR 0 1
44510: PUSH
44511: LD_INT 3
44513: MINUS
44514: PUSH
44515: LD_VAR 0 2
44519: PUSH
44520: LD_INT 3
44522: MINUS
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: LIST
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: ST_TO_ADDR
// end ; 4 :
44539: GO 44820
44541: LD_INT 4
44543: DOUBLE
44544: EQUAL
44545: IFTRUE 44549
44547: GO 44682
44549: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44550: LD_ADDR_VAR 0 5
44554: PUSH
44555: LD_VAR 0 1
44559: PUSH
44560: LD_VAR 0 2
44564: PUSH
44565: LD_INT 4
44567: PLUS
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: LIST
44576: PUSH
44577: LD_VAR 0 1
44581: PUSH
44582: LD_INT 3
44584: PLUS
44585: PUSH
44586: LD_VAR 0 2
44590: PUSH
44591: LD_INT 3
44593: PLUS
44594: PUSH
44595: LD_INT 5
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: PUSH
44603: LD_VAR 0 1
44607: PUSH
44608: LD_INT 4
44610: PLUS
44611: PUSH
44612: LD_VAR 0 2
44616: PUSH
44617: LD_INT 4
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: LIST
44624: PUSH
44625: LD_VAR 0 1
44629: PUSH
44630: LD_VAR 0 2
44634: PUSH
44635: LD_INT 3
44637: MINUS
44638: PUSH
44639: LD_INT 3
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: LIST
44646: PUSH
44647: LD_VAR 0 1
44651: PUSH
44652: LD_INT 4
44654: MINUS
44655: PUSH
44656: LD_VAR 0 2
44660: PUSH
44661: LD_INT 4
44663: MINUS
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: LIST
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: ST_TO_ADDR
// end ; 5 :
44680: GO 44820
44682: LD_INT 5
44684: DOUBLE
44685: EQUAL
44686: IFTRUE 44690
44688: GO 44819
44690: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44691: LD_ADDR_VAR 0 5
44695: PUSH
44696: LD_VAR 0 1
44700: PUSH
44701: LD_INT 4
44703: MINUS
44704: PUSH
44705: LD_VAR 0 2
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: LIST
44717: PUSH
44718: LD_VAR 0 1
44722: PUSH
44723: LD_VAR 0 2
44727: PUSH
44728: LD_INT 4
44730: MINUS
44731: PUSH
44732: LD_INT 3
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: LIST
44739: PUSH
44740: LD_VAR 0 1
44744: PUSH
44745: LD_INT 4
44747: PLUS
44748: PUSH
44749: LD_VAR 0 2
44753: PUSH
44754: LD_INT 4
44756: PLUS
44757: PUSH
44758: LD_INT 5
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: LIST
44765: PUSH
44766: LD_VAR 0 1
44770: PUSH
44771: LD_INT 3
44773: PLUS
44774: PUSH
44775: LD_VAR 0 2
44779: PUSH
44780: LD_INT 4
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: LIST
44787: PUSH
44788: LD_VAR 0 1
44792: PUSH
44793: LD_VAR 0 2
44797: PUSH
44798: LD_INT 3
44800: PLUS
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: LIST
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: ST_TO_ADDR
// end ; end ;
44817: GO 44820
44819: POP
// result := list ;
44820: LD_ADDR_VAR 0 4
44824: PUSH
44825: LD_VAR 0 5
44829: ST_TO_ADDR
// end ;
44830: LD_VAR 0 4
44834: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
44835: LD_INT 0
44837: PPUSH
44838: PPUSH
44839: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
44840: LD_VAR 0 1
44844: NOT
44845: PUSH
44846: LD_VAR 0 2
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: LD_INT 2
44856: PUSH
44857: LD_INT 3
44859: PUSH
44860: LD_INT 4
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: IN
44869: NOT
44870: OR
44871: IFFALSE 44875
// exit ;
44873: GO 44958
// tmp := [ ] ;
44875: LD_ADDR_VAR 0 5
44879: PUSH
44880: EMPTY
44881: ST_TO_ADDR
// for i in units do
44882: LD_ADDR_VAR 0 4
44886: PUSH
44887: LD_VAR 0 1
44891: PUSH
44892: FOR_IN
44893: IFFALSE 44927
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
44895: LD_ADDR_VAR 0 5
44899: PUSH
44900: LD_VAR 0 5
44904: PPUSH
44905: LD_VAR 0 4
44909: PPUSH
44910: LD_VAR 0 2
44914: PPUSH
44915: CALL_OW 259
44919: PPUSH
44920: CALL 46331 0 2
44924: ST_TO_ADDR
44925: GO 44892
44927: POP
44928: POP
// if not tmp then
44929: LD_VAR 0 5
44933: NOT
44934: IFFALSE 44938
// exit ;
44936: GO 44958
// result := SortListByListDesc ( units , tmp ) ;
44938: LD_ADDR_VAR 0 3
44942: PUSH
44943: LD_VAR 0 1
44947: PPUSH
44948: LD_VAR 0 5
44952: PPUSH
44953: CALL_OW 77
44957: ST_TO_ADDR
// end ;
44958: LD_VAR 0 3
44962: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
44963: LD_INT 0
44965: PPUSH
44966: PPUSH
44967: PPUSH
// result := false ;
44968: LD_ADDR_VAR 0 3
44972: PUSH
44973: LD_INT 0
44975: ST_TO_ADDR
// if not building then
44976: LD_VAR 0 2
44980: NOT
44981: IFFALSE 44985
// exit ;
44983: GO 45123
// x := GetX ( building ) ;
44985: LD_ADDR_VAR 0 4
44989: PUSH
44990: LD_VAR 0 2
44994: PPUSH
44995: CALL_OW 250
44999: ST_TO_ADDR
// y := GetY ( building ) ;
45000: LD_ADDR_VAR 0 5
45004: PUSH
45005: LD_VAR 0 2
45009: PPUSH
45010: CALL_OW 251
45014: ST_TO_ADDR
// if not x or not y then
45015: LD_VAR 0 4
45019: NOT
45020: PUSH
45021: LD_VAR 0 5
45025: NOT
45026: OR
45027: IFFALSE 45031
// exit ;
45029: GO 45123
// if GetTaskList ( unit ) then
45031: LD_VAR 0 1
45035: PPUSH
45036: CALL_OW 437
45040: IFFALSE 45123
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45042: LD_STRING e
45044: PUSH
45045: LD_VAR 0 1
45049: PPUSH
45050: CALL_OW 437
45054: PUSH
45055: LD_INT 1
45057: ARRAY
45058: PUSH
45059: LD_INT 1
45061: ARRAY
45062: EQUAL
45063: PUSH
45064: LD_VAR 0 4
45068: PUSH
45069: LD_VAR 0 1
45073: PPUSH
45074: CALL_OW 437
45078: PUSH
45079: LD_INT 1
45081: ARRAY
45082: PUSH
45083: LD_INT 2
45085: ARRAY
45086: EQUAL
45087: AND
45088: PUSH
45089: LD_VAR 0 5
45093: PUSH
45094: LD_VAR 0 1
45098: PPUSH
45099: CALL_OW 437
45103: PUSH
45104: LD_INT 1
45106: ARRAY
45107: PUSH
45108: LD_INT 3
45110: ARRAY
45111: EQUAL
45112: AND
45113: IFFALSE 45123
// result := true end ;
45115: LD_ADDR_VAR 0 3
45119: PUSH
45120: LD_INT 1
45122: ST_TO_ADDR
// end ;
45123: LD_VAR 0 3
45127: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45128: LD_INT 0
45130: PPUSH
// result := false ;
45131: LD_ADDR_VAR 0 4
45135: PUSH
45136: LD_INT 0
45138: ST_TO_ADDR
// if GetTaskList ( unit ) then
45139: LD_VAR 0 1
45143: PPUSH
45144: CALL_OW 437
45148: IFFALSE 45231
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45150: LD_STRING M
45152: PUSH
45153: LD_VAR 0 1
45157: PPUSH
45158: CALL_OW 437
45162: PUSH
45163: LD_INT 1
45165: ARRAY
45166: PUSH
45167: LD_INT 1
45169: ARRAY
45170: EQUAL
45171: PUSH
45172: LD_VAR 0 2
45176: PUSH
45177: LD_VAR 0 1
45181: PPUSH
45182: CALL_OW 437
45186: PUSH
45187: LD_INT 1
45189: ARRAY
45190: PUSH
45191: LD_INT 2
45193: ARRAY
45194: EQUAL
45195: AND
45196: PUSH
45197: LD_VAR 0 3
45201: PUSH
45202: LD_VAR 0 1
45206: PPUSH
45207: CALL_OW 437
45211: PUSH
45212: LD_INT 1
45214: ARRAY
45215: PUSH
45216: LD_INT 3
45218: ARRAY
45219: EQUAL
45220: AND
45221: IFFALSE 45231
// result := true ;
45223: LD_ADDR_VAR 0 4
45227: PUSH
45228: LD_INT 1
45230: ST_TO_ADDR
// end ; end ;
45231: LD_VAR 0 4
45235: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45236: LD_INT 0
45238: PPUSH
45239: PPUSH
45240: PPUSH
45241: PPUSH
// if not unit or not area then
45242: LD_VAR 0 1
45246: NOT
45247: PUSH
45248: LD_VAR 0 2
45252: NOT
45253: OR
45254: IFFALSE 45258
// exit ;
45256: GO 45434
// tmp := AreaToList ( area , i ) ;
45258: LD_ADDR_VAR 0 6
45262: PUSH
45263: LD_VAR 0 2
45267: PPUSH
45268: LD_VAR 0 5
45272: PPUSH
45273: CALL_OW 517
45277: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45278: LD_ADDR_VAR 0 5
45282: PUSH
45283: DOUBLE
45284: LD_INT 1
45286: DEC
45287: ST_TO_ADDR
45288: LD_VAR 0 6
45292: PUSH
45293: LD_INT 1
45295: ARRAY
45296: PUSH
45297: FOR_TO
45298: IFFALSE 45432
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45300: LD_ADDR_VAR 0 7
45304: PUSH
45305: LD_VAR 0 6
45309: PUSH
45310: LD_INT 1
45312: ARRAY
45313: PUSH
45314: LD_VAR 0 5
45318: ARRAY
45319: PUSH
45320: LD_VAR 0 6
45324: PUSH
45325: LD_INT 2
45327: ARRAY
45328: PUSH
45329: LD_VAR 0 5
45333: ARRAY
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
45339: LD_INT 92
45341: PUSH
45342: LD_VAR 0 7
45346: PUSH
45347: LD_INT 1
45349: ARRAY
45350: PUSH
45351: LD_VAR 0 7
45355: PUSH
45356: LD_INT 2
45358: ARRAY
45359: PUSH
45360: LD_INT 2
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: PPUSH
45369: CALL_OW 69
45373: PUSH
45374: LD_INT 0
45376: EQUAL
45377: IFFALSE 45430
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45379: LD_VAR 0 1
45383: PPUSH
45384: LD_VAR 0 7
45388: PUSH
45389: LD_INT 1
45391: ARRAY
45392: PPUSH
45393: LD_VAR 0 7
45397: PUSH
45398: LD_INT 2
45400: ARRAY
45401: PPUSH
45402: LD_VAR 0 3
45406: PPUSH
45407: CALL_OW 48
// result := IsPlaced ( unit ) ;
45411: LD_ADDR_VAR 0 4
45415: PUSH
45416: LD_VAR 0 1
45420: PPUSH
45421: CALL_OW 305
45425: ST_TO_ADDR
// exit ;
45426: POP
45427: POP
45428: GO 45434
// end ; end ;
45430: GO 45297
45432: POP
45433: POP
// end ;
45434: LD_VAR 0 4
45438: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45439: LD_INT 0
45441: PPUSH
45442: PPUSH
45443: PPUSH
// if not side or side > 8 then
45444: LD_VAR 0 1
45448: NOT
45449: PUSH
45450: LD_VAR 0 1
45454: PUSH
45455: LD_INT 8
45457: GREATER
45458: OR
45459: IFFALSE 45463
// exit ;
45461: GO 45650
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45463: LD_ADDR_VAR 0 4
45467: PUSH
45468: LD_INT 22
45470: PUSH
45471: LD_VAR 0 1
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 21
45482: PUSH
45483: LD_INT 3
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PPUSH
45494: CALL_OW 69
45498: ST_TO_ADDR
// if not tmp then
45499: LD_VAR 0 4
45503: NOT
45504: IFFALSE 45508
// exit ;
45506: GO 45650
// enable_addtolog := true ;
45508: LD_ADDR_OWVAR 81
45512: PUSH
45513: LD_INT 1
45515: ST_TO_ADDR
// AddToLog ( [ ) ;
45516: LD_STRING [
45518: PPUSH
45519: CALL_OW 561
// for i in tmp do
45523: LD_ADDR_VAR 0 3
45527: PUSH
45528: LD_VAR 0 4
45532: PUSH
45533: FOR_IN
45534: IFFALSE 45641
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45536: LD_STRING [
45538: PUSH
45539: LD_VAR 0 3
45543: PPUSH
45544: CALL_OW 266
45548: STR
45549: PUSH
45550: LD_STRING , 
45552: STR
45553: PUSH
45554: LD_VAR 0 3
45558: PPUSH
45559: CALL_OW 250
45563: STR
45564: PUSH
45565: LD_STRING , 
45567: STR
45568: PUSH
45569: LD_VAR 0 3
45573: PPUSH
45574: CALL_OW 251
45578: STR
45579: PUSH
45580: LD_STRING , 
45582: STR
45583: PUSH
45584: LD_VAR 0 3
45588: PPUSH
45589: CALL_OW 254
45593: STR
45594: PUSH
45595: LD_STRING , 
45597: STR
45598: PUSH
45599: LD_VAR 0 3
45603: PPUSH
45604: LD_INT 1
45606: PPUSH
45607: CALL_OW 268
45611: STR
45612: PUSH
45613: LD_STRING , 
45615: STR
45616: PUSH
45617: LD_VAR 0 3
45621: PPUSH
45622: LD_INT 2
45624: PPUSH
45625: CALL_OW 268
45629: STR
45630: PUSH
45631: LD_STRING ],
45633: STR
45634: PPUSH
45635: CALL_OW 561
// end ;
45639: GO 45533
45641: POP
45642: POP
// AddToLog ( ]; ) ;
45643: LD_STRING ];
45645: PPUSH
45646: CALL_OW 561
// end ;
45650: LD_VAR 0 2
45654: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45655: LD_INT 0
45657: PPUSH
45658: PPUSH
45659: PPUSH
45660: PPUSH
45661: PPUSH
// if not area or not rate or not max then
45662: LD_VAR 0 1
45666: NOT
45667: PUSH
45668: LD_VAR 0 2
45672: NOT
45673: OR
45674: PUSH
45675: LD_VAR 0 4
45679: NOT
45680: OR
45681: IFFALSE 45685
// exit ;
45683: GO 45874
// while 1 do
45685: LD_INT 1
45687: IFFALSE 45874
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45689: LD_ADDR_VAR 0 9
45693: PUSH
45694: LD_VAR 0 1
45698: PPUSH
45699: LD_INT 1
45701: PPUSH
45702: CALL_OW 287
45706: PUSH
45707: LD_INT 10
45709: MUL
45710: ST_TO_ADDR
// r := rate / 10 ;
45711: LD_ADDR_VAR 0 7
45715: PUSH
45716: LD_VAR 0 2
45720: PUSH
45721: LD_INT 10
45723: DIVREAL
45724: ST_TO_ADDR
// time := 1 1$00 ;
45725: LD_ADDR_VAR 0 8
45729: PUSH
45730: LD_INT 2100
45732: ST_TO_ADDR
// if amount < min then
45733: LD_VAR 0 9
45737: PUSH
45738: LD_VAR 0 3
45742: LESS
45743: IFFALSE 45761
// r := r * 2 else
45745: LD_ADDR_VAR 0 7
45749: PUSH
45750: LD_VAR 0 7
45754: PUSH
45755: LD_INT 2
45757: MUL
45758: ST_TO_ADDR
45759: GO 45787
// if amount > max then
45761: LD_VAR 0 9
45765: PUSH
45766: LD_VAR 0 4
45770: GREATER
45771: IFFALSE 45787
// r := r / 2 ;
45773: LD_ADDR_VAR 0 7
45777: PUSH
45778: LD_VAR 0 7
45782: PUSH
45783: LD_INT 2
45785: DIVREAL
45786: ST_TO_ADDR
// time := time / r ;
45787: LD_ADDR_VAR 0 8
45791: PUSH
45792: LD_VAR 0 8
45796: PUSH
45797: LD_VAR 0 7
45801: DIVREAL
45802: ST_TO_ADDR
// if time < 0 then
45803: LD_VAR 0 8
45807: PUSH
45808: LD_INT 0
45810: LESS
45811: IFFALSE 45828
// time := time * - 1 ;
45813: LD_ADDR_VAR 0 8
45817: PUSH
45818: LD_VAR 0 8
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: MUL
45827: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
45828: LD_VAR 0 8
45832: PUSH
45833: LD_INT 35
45835: PPUSH
45836: LD_INT 875
45838: PPUSH
45839: CALL_OW 12
45843: PLUS
45844: PPUSH
45845: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
45849: LD_INT 1
45851: PPUSH
45852: LD_INT 5
45854: PPUSH
45855: CALL_OW 12
45859: PPUSH
45860: LD_VAR 0 1
45864: PPUSH
45865: LD_INT 1
45867: PPUSH
45868: CALL_OW 55
// end ;
45872: GO 45685
// end ;
45874: LD_VAR 0 5
45878: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
45879: LD_INT 0
45881: PPUSH
45882: PPUSH
45883: PPUSH
45884: PPUSH
45885: PPUSH
45886: PPUSH
45887: PPUSH
45888: PPUSH
// if not turrets or not factories then
45889: LD_VAR 0 1
45893: NOT
45894: PUSH
45895: LD_VAR 0 2
45899: NOT
45900: OR
45901: IFFALSE 45905
// exit ;
45903: GO 46212
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
45905: LD_ADDR_VAR 0 10
45909: PUSH
45910: LD_INT 5
45912: PUSH
45913: LD_INT 6
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: LD_INT 4
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 3
45932: PUSH
45933: LD_INT 5
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 24
45947: PUSH
45948: LD_INT 25
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 23
45957: PUSH
45958: LD_INT 27
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 42
45971: PUSH
45972: LD_INT 43
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 44
45981: PUSH
45982: LD_INT 46
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 45
45991: PUSH
45992: LD_INT 47
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: LIST
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: LIST
46008: ST_TO_ADDR
// result := [ ] ;
46009: LD_ADDR_VAR 0 3
46013: PUSH
46014: EMPTY
46015: ST_TO_ADDR
// for i in turrets do
46016: LD_ADDR_VAR 0 4
46020: PUSH
46021: LD_VAR 0 1
46025: PUSH
46026: FOR_IN
46027: IFFALSE 46210
// begin nat := GetNation ( i ) ;
46029: LD_ADDR_VAR 0 7
46033: PUSH
46034: LD_VAR 0 4
46038: PPUSH
46039: CALL_OW 248
46043: ST_TO_ADDR
// weapon := 0 ;
46044: LD_ADDR_VAR 0 8
46048: PUSH
46049: LD_INT 0
46051: ST_TO_ADDR
// if not nat then
46052: LD_VAR 0 7
46056: NOT
46057: IFFALSE 46061
// continue ;
46059: GO 46026
// for j in list [ nat ] do
46061: LD_ADDR_VAR 0 5
46065: PUSH
46066: LD_VAR 0 10
46070: PUSH
46071: LD_VAR 0 7
46075: ARRAY
46076: PUSH
46077: FOR_IN
46078: IFFALSE 46119
// if GetBWeapon ( i ) = j [ 1 ] then
46080: LD_VAR 0 4
46084: PPUSH
46085: CALL_OW 269
46089: PUSH
46090: LD_VAR 0 5
46094: PUSH
46095: LD_INT 1
46097: ARRAY
46098: EQUAL
46099: IFFALSE 46117
// begin weapon := j [ 2 ] ;
46101: LD_ADDR_VAR 0 8
46105: PUSH
46106: LD_VAR 0 5
46110: PUSH
46111: LD_INT 2
46113: ARRAY
46114: ST_TO_ADDR
// break ;
46115: GO 46119
// end ;
46117: GO 46077
46119: POP
46120: POP
// if not weapon then
46121: LD_VAR 0 8
46125: NOT
46126: IFFALSE 46130
// continue ;
46128: GO 46026
// for k in factories do
46130: LD_ADDR_VAR 0 6
46134: PUSH
46135: LD_VAR 0 2
46139: PUSH
46140: FOR_IN
46141: IFFALSE 46206
// begin weapons := AvailableWeaponList ( k ) ;
46143: LD_ADDR_VAR 0 9
46147: PUSH
46148: LD_VAR 0 6
46152: PPUSH
46153: CALL_OW 478
46157: ST_TO_ADDR
// if not weapons then
46158: LD_VAR 0 9
46162: NOT
46163: IFFALSE 46167
// continue ;
46165: GO 46140
// if weapon in weapons then
46167: LD_VAR 0 8
46171: PUSH
46172: LD_VAR 0 9
46176: IN
46177: IFFALSE 46204
// begin result := [ i , weapon ] ;
46179: LD_ADDR_VAR 0 3
46183: PUSH
46184: LD_VAR 0 4
46188: PUSH
46189: LD_VAR 0 8
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: ST_TO_ADDR
// exit ;
46198: POP
46199: POP
46200: POP
46201: POP
46202: GO 46212
// end ; end ;
46204: GO 46140
46206: POP
46207: POP
// end ;
46208: GO 46026
46210: POP
46211: POP
// end ;
46212: LD_VAR 0 3
46216: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46217: LD_INT 0
46219: PPUSH
// if not side or side > 8 then
46220: LD_VAR 0 3
46224: NOT
46225: PUSH
46226: LD_VAR 0 3
46230: PUSH
46231: LD_INT 8
46233: GREATER
46234: OR
46235: IFFALSE 46239
// exit ;
46237: GO 46298
// if not range then
46239: LD_VAR 0 4
46243: NOT
46244: IFFALSE 46255
// range := - 12 ;
46246: LD_ADDR_VAR 0 4
46250: PUSH
46251: LD_INT 12
46253: NEG
46254: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46255: LD_VAR 0 1
46259: PPUSH
46260: LD_VAR 0 2
46264: PPUSH
46265: LD_VAR 0 3
46269: PPUSH
46270: LD_VAR 0 4
46274: PPUSH
46275: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46279: LD_VAR 0 1
46283: PPUSH
46284: LD_VAR 0 2
46288: PPUSH
46289: LD_VAR 0 3
46293: PPUSH
46294: CALL_OW 331
// end ;
46298: LD_VAR 0 5
46302: RET
// export function Video ( mode ) ; begin
46303: LD_INT 0
46305: PPUSH
// ingame_video = mode ;
46306: LD_ADDR_OWVAR 52
46310: PUSH
46311: LD_VAR 0 1
46315: ST_TO_ADDR
// interface_hidden = mode ;
46316: LD_ADDR_OWVAR 54
46320: PUSH
46321: LD_VAR 0 1
46325: ST_TO_ADDR
// end ;
46326: LD_VAR 0 2
46330: RET
// export function Join ( array , element ) ; begin
46331: LD_INT 0
46333: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46334: LD_ADDR_VAR 0 3
46338: PUSH
46339: LD_VAR 0 1
46343: PPUSH
46344: LD_VAR 0 1
46348: PUSH
46349: LD_INT 1
46351: PLUS
46352: PPUSH
46353: LD_VAR 0 2
46357: PPUSH
46358: CALL_OW 1
46362: ST_TO_ADDR
// end ;
46363: LD_VAR 0 3
46367: RET
// export function JoinUnion ( array , element ) ; begin
46368: LD_INT 0
46370: PPUSH
// result := array union element ;
46371: LD_ADDR_VAR 0 3
46375: PUSH
46376: LD_VAR 0 1
46380: PUSH
46381: LD_VAR 0 2
46385: UNION
46386: ST_TO_ADDR
// end ;
46387: LD_VAR 0 3
46391: RET
// export function GetBehemoths ( side ) ; begin
46392: LD_INT 0
46394: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
46395: LD_ADDR_VAR 0 2
46399: PUSH
46400: LD_INT 22
46402: PUSH
46403: LD_VAR 0 1
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 31
46414: PUSH
46415: LD_INT 25
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PPUSH
46426: CALL_OW 69
46430: ST_TO_ADDR
// end ;
46431: LD_VAR 0 2
46435: RET
// export function Shuffle ( array ) ; var i , index ; begin
46436: LD_INT 0
46438: PPUSH
46439: PPUSH
46440: PPUSH
// result := [ ] ;
46441: LD_ADDR_VAR 0 2
46445: PUSH
46446: EMPTY
46447: ST_TO_ADDR
// if not array then
46448: LD_VAR 0 1
46452: NOT
46453: IFFALSE 46457
// exit ;
46455: GO 46556
// Randomize ;
46457: CALL_OW 10
// for i = array downto 1 do
46461: LD_ADDR_VAR 0 3
46465: PUSH
46466: DOUBLE
46467: LD_VAR 0 1
46471: INC
46472: ST_TO_ADDR
46473: LD_INT 1
46475: PUSH
46476: FOR_DOWNTO
46477: IFFALSE 46554
// begin index := rand ( 1 , array ) ;
46479: LD_ADDR_VAR 0 4
46483: PUSH
46484: LD_INT 1
46486: PPUSH
46487: LD_VAR 0 1
46491: PPUSH
46492: CALL_OW 12
46496: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46497: LD_ADDR_VAR 0 2
46501: PUSH
46502: LD_VAR 0 2
46506: PPUSH
46507: LD_VAR 0 2
46511: PUSH
46512: LD_INT 1
46514: PLUS
46515: PPUSH
46516: LD_VAR 0 1
46520: PUSH
46521: LD_VAR 0 4
46525: ARRAY
46526: PPUSH
46527: CALL_OW 2
46531: ST_TO_ADDR
// array := Delete ( array , index ) ;
46532: LD_ADDR_VAR 0 1
46536: PUSH
46537: LD_VAR 0 1
46541: PPUSH
46542: LD_VAR 0 4
46546: PPUSH
46547: CALL_OW 3
46551: ST_TO_ADDR
// end ;
46552: GO 46476
46554: POP
46555: POP
// end ;
46556: LD_VAR 0 2
46560: RET
// export function GetBaseMaterials ( base ) ; begin
46561: LD_INT 0
46563: PPUSH
// result := [ 0 , 0 , 0 ] ;
46564: LD_ADDR_VAR 0 2
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: LIST
46582: ST_TO_ADDR
// if not base then
46583: LD_VAR 0 1
46587: NOT
46588: IFFALSE 46592
// exit ;
46590: GO 46641
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46592: LD_ADDR_VAR 0 2
46596: PUSH
46597: LD_VAR 0 1
46601: PPUSH
46602: LD_INT 1
46604: PPUSH
46605: CALL_OW 275
46609: PUSH
46610: LD_VAR 0 1
46614: PPUSH
46615: LD_INT 2
46617: PPUSH
46618: CALL_OW 275
46622: PUSH
46623: LD_VAR 0 1
46627: PPUSH
46628: LD_INT 3
46630: PPUSH
46631: CALL_OW 275
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: LIST
46640: ST_TO_ADDR
// end ;
46641: LD_VAR 0 2
46645: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46646: LD_INT 0
46648: PPUSH
46649: PPUSH
// result := array ;
46650: LD_ADDR_VAR 0 3
46654: PUSH
46655: LD_VAR 0 1
46659: ST_TO_ADDR
// if size >= result then
46660: LD_VAR 0 2
46664: PUSH
46665: LD_VAR 0 3
46669: GREATEREQUAL
46670: IFFALSE 46674
// exit ;
46672: GO 46724
// if size then
46674: LD_VAR 0 2
46678: IFFALSE 46724
// for i := array downto size do
46680: LD_ADDR_VAR 0 4
46684: PUSH
46685: DOUBLE
46686: LD_VAR 0 1
46690: INC
46691: ST_TO_ADDR
46692: LD_VAR 0 2
46696: PUSH
46697: FOR_DOWNTO
46698: IFFALSE 46722
// result := Delete ( result , result ) ;
46700: LD_ADDR_VAR 0 3
46704: PUSH
46705: LD_VAR 0 3
46709: PPUSH
46710: LD_VAR 0 3
46714: PPUSH
46715: CALL_OW 3
46719: ST_TO_ADDR
46720: GO 46697
46722: POP
46723: POP
// end ;
46724: LD_VAR 0 3
46728: RET
// export function ComExit ( unit ) ; var tmp ; begin
46729: LD_INT 0
46731: PPUSH
46732: PPUSH
// if not IsInUnit ( unit ) then
46733: LD_VAR 0 1
46737: PPUSH
46738: CALL_OW 310
46742: NOT
46743: IFFALSE 46747
// exit ;
46745: GO 46807
// tmp := IsInUnit ( unit ) ;
46747: LD_ADDR_VAR 0 3
46751: PUSH
46752: LD_VAR 0 1
46756: PPUSH
46757: CALL_OW 310
46761: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
46762: LD_VAR 0 3
46766: PPUSH
46767: CALL_OW 247
46771: PUSH
46772: LD_INT 2
46774: EQUAL
46775: IFFALSE 46788
// ComExitVehicle ( unit ) else
46777: LD_VAR 0 1
46781: PPUSH
46782: CALL_OW 121
46786: GO 46797
// ComExitBuilding ( unit ) ;
46788: LD_VAR 0 1
46792: PPUSH
46793: CALL_OW 122
// result := tmp ;
46797: LD_ADDR_VAR 0 2
46801: PUSH
46802: LD_VAR 0 3
46806: ST_TO_ADDR
// end ;
46807: LD_VAR 0 2
46811: RET
// export function ComExitAll ( units ) ; var i ; begin
46812: LD_INT 0
46814: PPUSH
46815: PPUSH
// if not units then
46816: LD_VAR 0 1
46820: NOT
46821: IFFALSE 46825
// exit ;
46823: GO 46851
// for i in units do
46825: LD_ADDR_VAR 0 3
46829: PUSH
46830: LD_VAR 0 1
46834: PUSH
46835: FOR_IN
46836: IFFALSE 46849
// ComExit ( i ) ;
46838: LD_VAR 0 3
46842: PPUSH
46843: CALL 46729 0 1
46847: GO 46835
46849: POP
46850: POP
// end ;
46851: LD_VAR 0 2
46855: RET
// export function ResetHc ; begin
46856: LD_INT 0
46858: PPUSH
// InitHc ;
46859: CALL_OW 19
// hc_importance := 0 ;
46863: LD_ADDR_OWVAR 32
46867: PUSH
46868: LD_INT 0
46870: ST_TO_ADDR
// end ;
46871: LD_VAR 0 1
46875: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
46876: LD_INT 0
46878: PPUSH
46879: PPUSH
46880: PPUSH
// _x := ( x1 + x2 ) div 2 ;
46881: LD_ADDR_VAR 0 6
46885: PUSH
46886: LD_VAR 0 1
46890: PUSH
46891: LD_VAR 0 3
46895: PLUS
46896: PUSH
46897: LD_INT 2
46899: DIV
46900: ST_TO_ADDR
// if _x < 0 then
46901: LD_VAR 0 6
46905: PUSH
46906: LD_INT 0
46908: LESS
46909: IFFALSE 46926
// _x := _x * - 1 ;
46911: LD_ADDR_VAR 0 6
46915: PUSH
46916: LD_VAR 0 6
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: MUL
46925: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
46926: LD_ADDR_VAR 0 7
46930: PUSH
46931: LD_VAR 0 2
46935: PUSH
46936: LD_VAR 0 4
46940: PLUS
46941: PUSH
46942: LD_INT 2
46944: DIV
46945: ST_TO_ADDR
// if _y < 0 then
46946: LD_VAR 0 7
46950: PUSH
46951: LD_INT 0
46953: LESS
46954: IFFALSE 46971
// _y := _y * - 1 ;
46956: LD_ADDR_VAR 0 7
46960: PUSH
46961: LD_VAR 0 7
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: MUL
46970: ST_TO_ADDR
// result := [ _x , _y ] ;
46971: LD_ADDR_VAR 0 5
46975: PUSH
46976: LD_VAR 0 6
46980: PUSH
46981: LD_VAR 0 7
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: ST_TO_ADDR
// end ;
46990: LD_VAR 0 5
46994: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
46995: LD_INT 0
46997: PPUSH
46998: PPUSH
46999: PPUSH
47000: PPUSH
// task := GetTaskList ( unit ) ;
47001: LD_ADDR_VAR 0 7
47005: PUSH
47006: LD_VAR 0 1
47010: PPUSH
47011: CALL_OW 437
47015: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47016: LD_VAR 0 7
47020: NOT
47021: PUSH
47022: LD_VAR 0 1
47026: PPUSH
47027: LD_VAR 0 2
47031: PPUSH
47032: CALL_OW 308
47036: NOT
47037: AND
47038: IFFALSE 47042
// exit ;
47040: GO 47160
// if IsInArea ( unit , area ) then
47042: LD_VAR 0 1
47046: PPUSH
47047: LD_VAR 0 2
47051: PPUSH
47052: CALL_OW 308
47056: IFFALSE 47074
// begin ComMoveToArea ( unit , goAway ) ;
47058: LD_VAR 0 1
47062: PPUSH
47063: LD_VAR 0 3
47067: PPUSH
47068: CALL_OW 113
// exit ;
47072: GO 47160
// end ; if task [ 1 ] [ 1 ] <> M then
47074: LD_VAR 0 7
47078: PUSH
47079: LD_INT 1
47081: ARRAY
47082: PUSH
47083: LD_INT 1
47085: ARRAY
47086: PUSH
47087: LD_STRING M
47089: NONEQUAL
47090: IFFALSE 47094
// exit ;
47092: GO 47160
// x := task [ 1 ] [ 2 ] ;
47094: LD_ADDR_VAR 0 5
47098: PUSH
47099: LD_VAR 0 7
47103: PUSH
47104: LD_INT 1
47106: ARRAY
47107: PUSH
47108: LD_INT 2
47110: ARRAY
47111: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47112: LD_ADDR_VAR 0 6
47116: PUSH
47117: LD_VAR 0 7
47121: PUSH
47122: LD_INT 1
47124: ARRAY
47125: PUSH
47126: LD_INT 3
47128: ARRAY
47129: ST_TO_ADDR
// if InArea ( x , y , area ) then
47130: LD_VAR 0 5
47134: PPUSH
47135: LD_VAR 0 6
47139: PPUSH
47140: LD_VAR 0 2
47144: PPUSH
47145: CALL_OW 309
47149: IFFALSE 47160
// ComStop ( unit ) ;
47151: LD_VAR 0 1
47155: PPUSH
47156: CALL_OW 141
// end ;
47160: LD_VAR 0 4
47164: RET
// export function Abs ( value ) ; begin
47165: LD_INT 0
47167: PPUSH
// result := value ;
47168: LD_ADDR_VAR 0 2
47172: PUSH
47173: LD_VAR 0 1
47177: ST_TO_ADDR
// if value < 0 then
47178: LD_VAR 0 1
47182: PUSH
47183: LD_INT 0
47185: LESS
47186: IFFALSE 47203
// result := value * - 1 ;
47188: LD_ADDR_VAR 0 2
47192: PUSH
47193: LD_VAR 0 1
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: MUL
47202: ST_TO_ADDR
// end ;
47203: LD_VAR 0 2
47207: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47208: LD_INT 0
47210: PPUSH
47211: PPUSH
47212: PPUSH
47213: PPUSH
47214: PPUSH
47215: PPUSH
47216: PPUSH
47217: PPUSH
// if not unit or not building then
47218: LD_VAR 0 1
47222: NOT
47223: PUSH
47224: LD_VAR 0 2
47228: NOT
47229: OR
47230: IFFALSE 47234
// exit ;
47232: GO 47460
// x := GetX ( building ) ;
47234: LD_ADDR_VAR 0 4
47238: PUSH
47239: LD_VAR 0 2
47243: PPUSH
47244: CALL_OW 250
47248: ST_TO_ADDR
// y := GetY ( building ) ;
47249: LD_ADDR_VAR 0 6
47253: PUSH
47254: LD_VAR 0 2
47258: PPUSH
47259: CALL_OW 251
47263: ST_TO_ADDR
// d := GetDir ( building ) ;
47264: LD_ADDR_VAR 0 8
47268: PUSH
47269: LD_VAR 0 2
47273: PPUSH
47274: CALL_OW 254
47278: ST_TO_ADDR
// r := 4 ;
47279: LD_ADDR_VAR 0 9
47283: PUSH
47284: LD_INT 4
47286: ST_TO_ADDR
// for i := 1 to 5 do
47287: LD_ADDR_VAR 0 10
47291: PUSH
47292: DOUBLE
47293: LD_INT 1
47295: DEC
47296: ST_TO_ADDR
47297: LD_INT 5
47299: PUSH
47300: FOR_TO
47301: IFFALSE 47458
// begin _x := ShiftX ( x , d , r + i ) ;
47303: LD_ADDR_VAR 0 5
47307: PUSH
47308: LD_VAR 0 4
47312: PPUSH
47313: LD_VAR 0 8
47317: PPUSH
47318: LD_VAR 0 9
47322: PUSH
47323: LD_VAR 0 10
47327: PLUS
47328: PPUSH
47329: CALL_OW 272
47333: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47334: LD_ADDR_VAR 0 7
47338: PUSH
47339: LD_VAR 0 6
47343: PPUSH
47344: LD_VAR 0 8
47348: PPUSH
47349: LD_VAR 0 9
47353: PUSH
47354: LD_VAR 0 10
47358: PLUS
47359: PPUSH
47360: CALL_OW 273
47364: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47365: LD_VAR 0 5
47369: PPUSH
47370: LD_VAR 0 7
47374: PPUSH
47375: CALL_OW 488
47379: PUSH
47380: LD_VAR 0 5
47384: PPUSH
47385: LD_VAR 0 7
47389: PPUSH
47390: CALL_OW 428
47394: PPUSH
47395: CALL_OW 247
47399: PUSH
47400: LD_INT 3
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: IN
47410: NOT
47411: AND
47412: IFFALSE 47456
// begin ComMoveXY ( unit , _x , _y ) ;
47414: LD_VAR 0 1
47418: PPUSH
47419: LD_VAR 0 5
47423: PPUSH
47424: LD_VAR 0 7
47428: PPUSH
47429: CALL_OW 111
// result := [ _x , _y ] ;
47433: LD_ADDR_VAR 0 3
47437: PUSH
47438: LD_VAR 0 5
47442: PUSH
47443: LD_VAR 0 7
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: ST_TO_ADDR
// exit ;
47452: POP
47453: POP
47454: GO 47460
// end ; end ;
47456: GO 47300
47458: POP
47459: POP
// end ;
47460: LD_VAR 0 3
47464: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47465: LD_INT 0
47467: PPUSH
47468: PPUSH
47469: PPUSH
// result := 0 ;
47470: LD_ADDR_VAR 0 3
47474: PUSH
47475: LD_INT 0
47477: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47478: LD_VAR 0 1
47482: PUSH
47483: LD_INT 0
47485: LESS
47486: PUSH
47487: LD_VAR 0 1
47491: PUSH
47492: LD_INT 8
47494: GREATER
47495: OR
47496: PUSH
47497: LD_VAR 0 2
47501: PUSH
47502: LD_INT 0
47504: LESS
47505: OR
47506: PUSH
47507: LD_VAR 0 2
47511: PUSH
47512: LD_INT 8
47514: GREATER
47515: OR
47516: IFFALSE 47520
// exit ;
47518: GO 47595
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47520: LD_ADDR_VAR 0 4
47524: PUSH
47525: LD_INT 22
47527: PUSH
47528: LD_VAR 0 2
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PPUSH
47537: CALL_OW 69
47541: PUSH
47542: FOR_IN
47543: IFFALSE 47593
// begin un := UnitShoot ( i ) ;
47545: LD_ADDR_VAR 0 5
47549: PUSH
47550: LD_VAR 0 4
47554: PPUSH
47555: CALL_OW 504
47559: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47560: LD_VAR 0 5
47564: PPUSH
47565: CALL_OW 255
47569: PUSH
47570: LD_VAR 0 1
47574: EQUAL
47575: IFFALSE 47591
// begin result := un ;
47577: LD_ADDR_VAR 0 3
47581: PUSH
47582: LD_VAR 0 5
47586: ST_TO_ADDR
// exit ;
47587: POP
47588: POP
47589: GO 47595
// end ; end ;
47591: GO 47542
47593: POP
47594: POP
// end ;
47595: LD_VAR 0 3
47599: RET
// export function GetCargoBay ( units ) ; begin
47600: LD_INT 0
47602: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47603: LD_ADDR_VAR 0 2
47607: PUSH
47608: LD_VAR 0 1
47612: PPUSH
47613: LD_INT 2
47615: PUSH
47616: LD_INT 34
47618: PUSH
47619: LD_INT 12
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 34
47628: PUSH
47629: LD_INT 51
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 34
47638: PUSH
47639: LD_INT 32
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 34
47648: PUSH
47649: LD_INT 89
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: PPUSH
47663: CALL_OW 72
47667: ST_TO_ADDR
// end ;
47668: LD_VAR 0 2
47672: RET
// export function Negate ( value ) ; begin
47673: LD_INT 0
47675: PPUSH
// result := not value ;
47676: LD_ADDR_VAR 0 2
47680: PUSH
47681: LD_VAR 0 1
47685: NOT
47686: ST_TO_ADDR
// end ;
47687: LD_VAR 0 2
47691: RET
// export function Inc ( value ) ; begin
47692: LD_INT 0
47694: PPUSH
// result := value + 1 ;
47695: LD_ADDR_VAR 0 2
47699: PUSH
47700: LD_VAR 0 1
47704: PUSH
47705: LD_INT 1
47707: PLUS
47708: ST_TO_ADDR
// end ;
47709: LD_VAR 0 2
47713: RET
// export function Dec ( value ) ; begin
47714: LD_INT 0
47716: PPUSH
// result := value - 1 ;
47717: LD_ADDR_VAR 0 2
47721: PUSH
47722: LD_VAR 0 1
47726: PUSH
47727: LD_INT 1
47729: MINUS
47730: ST_TO_ADDR
// end ;
47731: LD_VAR 0 2
47735: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
47736: LD_INT 0
47738: PPUSH
47739: PPUSH
47740: PPUSH
47741: PPUSH
47742: PPUSH
47743: PPUSH
47744: PPUSH
47745: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
47746: LD_VAR 0 1
47750: PPUSH
47751: LD_VAR 0 2
47755: PPUSH
47756: CALL_OW 488
47760: NOT
47761: PUSH
47762: LD_VAR 0 3
47766: PPUSH
47767: LD_VAR 0 4
47771: PPUSH
47772: CALL_OW 488
47776: NOT
47777: OR
47778: IFFALSE 47791
// begin result := - 1 ;
47780: LD_ADDR_VAR 0 5
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: ST_TO_ADDR
// exit ;
47789: GO 48026
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
47791: LD_ADDR_VAR 0 12
47795: PUSH
47796: LD_VAR 0 1
47800: PPUSH
47801: LD_VAR 0 2
47805: PPUSH
47806: LD_VAR 0 3
47810: PPUSH
47811: LD_VAR 0 4
47815: PPUSH
47816: CALL 46876 0 4
47820: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
47821: LD_ADDR_VAR 0 11
47825: PUSH
47826: LD_VAR 0 1
47830: PPUSH
47831: LD_VAR 0 2
47835: PPUSH
47836: LD_VAR 0 12
47840: PUSH
47841: LD_INT 1
47843: ARRAY
47844: PPUSH
47845: LD_VAR 0 12
47849: PUSH
47850: LD_INT 2
47852: ARRAY
47853: PPUSH
47854: CALL_OW 298
47858: ST_TO_ADDR
// distance := 9999 ;
47859: LD_ADDR_VAR 0 10
47863: PUSH
47864: LD_INT 9999
47866: ST_TO_ADDR
// for i := 0 to 5 do
47867: LD_ADDR_VAR 0 6
47871: PUSH
47872: DOUBLE
47873: LD_INT 0
47875: DEC
47876: ST_TO_ADDR
47877: LD_INT 5
47879: PUSH
47880: FOR_TO
47881: IFFALSE 48024
// begin _x := ShiftX ( x1 , i , centerDist ) ;
47883: LD_ADDR_VAR 0 7
47887: PUSH
47888: LD_VAR 0 1
47892: PPUSH
47893: LD_VAR 0 6
47897: PPUSH
47898: LD_VAR 0 11
47902: PPUSH
47903: CALL_OW 272
47907: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
47908: LD_ADDR_VAR 0 8
47912: PUSH
47913: LD_VAR 0 2
47917: PPUSH
47918: LD_VAR 0 6
47922: PPUSH
47923: LD_VAR 0 11
47927: PPUSH
47928: CALL_OW 273
47932: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47933: LD_VAR 0 7
47937: PPUSH
47938: LD_VAR 0 8
47942: PPUSH
47943: CALL_OW 488
47947: NOT
47948: IFFALSE 47952
// continue ;
47950: GO 47880
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
47952: LD_ADDR_VAR 0 9
47956: PUSH
47957: LD_VAR 0 12
47961: PUSH
47962: LD_INT 1
47964: ARRAY
47965: PPUSH
47966: LD_VAR 0 12
47970: PUSH
47971: LD_INT 2
47973: ARRAY
47974: PPUSH
47975: LD_VAR 0 7
47979: PPUSH
47980: LD_VAR 0 8
47984: PPUSH
47985: CALL_OW 298
47989: ST_TO_ADDR
// if tmp < distance then
47990: LD_VAR 0 9
47994: PUSH
47995: LD_VAR 0 10
47999: LESS
48000: IFFALSE 48022
// begin result := i ;
48002: LD_ADDR_VAR 0 5
48006: PUSH
48007: LD_VAR 0 6
48011: ST_TO_ADDR
// distance := tmp ;
48012: LD_ADDR_VAR 0 10
48016: PUSH
48017: LD_VAR 0 9
48021: ST_TO_ADDR
// end ; end ;
48022: GO 47880
48024: POP
48025: POP
// end ;
48026: LD_VAR 0 5
48030: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48031: LD_INT 0
48033: PPUSH
48034: PPUSH
// if not driver or not IsInUnit ( driver ) then
48035: LD_VAR 0 1
48039: NOT
48040: PUSH
48041: LD_VAR 0 1
48045: PPUSH
48046: CALL_OW 310
48050: NOT
48051: OR
48052: IFFALSE 48056
// exit ;
48054: GO 48146
// vehicle := IsInUnit ( driver ) ;
48056: LD_ADDR_VAR 0 3
48060: PUSH
48061: LD_VAR 0 1
48065: PPUSH
48066: CALL_OW 310
48070: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48071: LD_VAR 0 1
48075: PPUSH
48076: LD_STRING \
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: PUSH
48106: LD_STRING E
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_VAR 0 3
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PPUSH
48142: CALL_OW 446
// end ;
48146: LD_VAR 0 2
48150: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48151: LD_INT 0
48153: PPUSH
48154: PPUSH
// if not driver or not IsInUnit ( driver ) then
48155: LD_VAR 0 1
48159: NOT
48160: PUSH
48161: LD_VAR 0 1
48165: PPUSH
48166: CALL_OW 310
48170: NOT
48171: OR
48172: IFFALSE 48176
// exit ;
48174: GO 48266
// vehicle := IsInUnit ( driver ) ;
48176: LD_ADDR_VAR 0 3
48180: PUSH
48181: LD_VAR 0 1
48185: PPUSH
48186: CALL_OW 310
48190: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48191: LD_VAR 0 1
48195: PPUSH
48196: LD_STRING \
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: PUSH
48226: LD_STRING E
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_VAR 0 3
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PPUSH
48262: CALL_OW 447
// end ;
48266: LD_VAR 0 2
48270: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48271: LD_INT 0
48273: PPUSH
48274: PPUSH
48275: PPUSH
// tmp := [ ] ;
48276: LD_ADDR_VAR 0 5
48280: PUSH
48281: EMPTY
48282: ST_TO_ADDR
// for i in units do
48283: LD_ADDR_VAR 0 4
48287: PUSH
48288: LD_VAR 0 1
48292: PUSH
48293: FOR_IN
48294: IFFALSE 48332
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48296: LD_ADDR_VAR 0 5
48300: PUSH
48301: LD_VAR 0 5
48305: PPUSH
48306: LD_VAR 0 5
48310: PUSH
48311: LD_INT 1
48313: PLUS
48314: PPUSH
48315: LD_VAR 0 4
48319: PPUSH
48320: CALL_OW 256
48324: PPUSH
48325: CALL_OW 2
48329: ST_TO_ADDR
48330: GO 48293
48332: POP
48333: POP
// if not tmp then
48334: LD_VAR 0 5
48338: NOT
48339: IFFALSE 48343
// exit ;
48341: GO 48391
// if asc then
48343: LD_VAR 0 2
48347: IFFALSE 48371
// result := SortListByListAsc ( units , tmp ) else
48349: LD_ADDR_VAR 0 3
48353: PUSH
48354: LD_VAR 0 1
48358: PPUSH
48359: LD_VAR 0 5
48363: PPUSH
48364: CALL_OW 76
48368: ST_TO_ADDR
48369: GO 48391
// result := SortListByListDesc ( units , tmp ) ;
48371: LD_ADDR_VAR 0 3
48375: PUSH
48376: LD_VAR 0 1
48380: PPUSH
48381: LD_VAR 0 5
48385: PPUSH
48386: CALL_OW 77
48390: ST_TO_ADDR
// end ;
48391: LD_VAR 0 3
48395: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48396: LD_INT 0
48398: PPUSH
48399: PPUSH
// task := GetTaskList ( mech ) ;
48400: LD_ADDR_VAR 0 4
48404: PUSH
48405: LD_VAR 0 1
48409: PPUSH
48410: CALL_OW 437
48414: ST_TO_ADDR
// if not task then
48415: LD_VAR 0 4
48419: NOT
48420: IFFALSE 48424
// exit ;
48422: GO 48466
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48424: LD_ADDR_VAR 0 3
48428: PUSH
48429: LD_VAR 0 4
48433: PUSH
48434: LD_INT 1
48436: ARRAY
48437: PUSH
48438: LD_INT 1
48440: ARRAY
48441: PUSH
48442: LD_STRING r
48444: EQUAL
48445: PUSH
48446: LD_VAR 0 4
48450: PUSH
48451: LD_INT 1
48453: ARRAY
48454: PUSH
48455: LD_INT 4
48457: ARRAY
48458: PUSH
48459: LD_VAR 0 2
48463: EQUAL
48464: AND
48465: ST_TO_ADDR
// end ;
48466: LD_VAR 0 3
48470: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48471: LD_INT 0
48473: PPUSH
// SetDir ( unit , d ) ;
48474: LD_VAR 0 1
48478: PPUSH
48479: LD_VAR 0 4
48483: PPUSH
48484: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48488: LD_VAR 0 1
48492: PPUSH
48493: LD_VAR 0 2
48497: PPUSH
48498: LD_VAR 0 3
48502: PPUSH
48503: LD_VAR 0 5
48507: PPUSH
48508: CALL_OW 48
// end ;
48512: LD_VAR 0 6
48516: RET
// export function ToNaturalNumber ( number ) ; begin
48517: LD_INT 0
48519: PPUSH
// result := number div 1 ;
48520: LD_ADDR_VAR 0 2
48524: PUSH
48525: LD_VAR 0 1
48529: PUSH
48530: LD_INT 1
48532: DIV
48533: ST_TO_ADDR
// if number < 0 then
48534: LD_VAR 0 1
48538: PUSH
48539: LD_INT 0
48541: LESS
48542: IFFALSE 48552
// result := 0 ;
48544: LD_ADDR_VAR 0 2
48548: PUSH
48549: LD_INT 0
48551: ST_TO_ADDR
// end ;
48552: LD_VAR 0 2
48556: RET
// export function SortByClass ( units , class ) ; var un ; begin
48557: LD_INT 0
48559: PPUSH
48560: PPUSH
// if not units or not class then
48561: LD_VAR 0 1
48565: NOT
48566: PUSH
48567: LD_VAR 0 2
48571: NOT
48572: OR
48573: IFFALSE 48577
// exit ;
48575: GO 48672
// result := [ ] ;
48577: LD_ADDR_VAR 0 3
48581: PUSH
48582: EMPTY
48583: ST_TO_ADDR
// for un in units do
48584: LD_ADDR_VAR 0 4
48588: PUSH
48589: LD_VAR 0 1
48593: PUSH
48594: FOR_IN
48595: IFFALSE 48670
// if GetClass ( un ) = class then
48597: LD_VAR 0 4
48601: PPUSH
48602: CALL_OW 257
48606: PUSH
48607: LD_VAR 0 2
48611: EQUAL
48612: IFFALSE 48639
// result := Insert ( result , 1 , un ) else
48614: LD_ADDR_VAR 0 3
48618: PUSH
48619: LD_VAR 0 3
48623: PPUSH
48624: LD_INT 1
48626: PPUSH
48627: LD_VAR 0 4
48631: PPUSH
48632: CALL_OW 2
48636: ST_TO_ADDR
48637: GO 48668
// result := Replace ( result , result + 1 , un ) ;
48639: LD_ADDR_VAR 0 3
48643: PUSH
48644: LD_VAR 0 3
48648: PPUSH
48649: LD_VAR 0 3
48653: PUSH
48654: LD_INT 1
48656: PLUS
48657: PPUSH
48658: LD_VAR 0 4
48662: PPUSH
48663: CALL_OW 1
48667: ST_TO_ADDR
48668: GO 48594
48670: POP
48671: POP
// end ;
48672: LD_VAR 0 3
48676: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
48677: LD_INT 0
48679: PPUSH
48680: PPUSH
48681: PPUSH
48682: PPUSH
48683: PPUSH
48684: PPUSH
48685: PPUSH
// result := [ ] ;
48686: LD_ADDR_VAR 0 4
48690: PUSH
48691: EMPTY
48692: ST_TO_ADDR
// if x - r < 0 then
48693: LD_VAR 0 1
48697: PUSH
48698: LD_VAR 0 3
48702: MINUS
48703: PUSH
48704: LD_INT 0
48706: LESS
48707: IFFALSE 48719
// min_x := 0 else
48709: LD_ADDR_VAR 0 8
48713: PUSH
48714: LD_INT 0
48716: ST_TO_ADDR
48717: GO 48735
// min_x := x - r ;
48719: LD_ADDR_VAR 0 8
48723: PUSH
48724: LD_VAR 0 1
48728: PUSH
48729: LD_VAR 0 3
48733: MINUS
48734: ST_TO_ADDR
// if y - r < 0 then
48735: LD_VAR 0 2
48739: PUSH
48740: LD_VAR 0 3
48744: MINUS
48745: PUSH
48746: LD_INT 0
48748: LESS
48749: IFFALSE 48761
// min_y := 0 else
48751: LD_ADDR_VAR 0 7
48755: PUSH
48756: LD_INT 0
48758: ST_TO_ADDR
48759: GO 48777
// min_y := y - r ;
48761: LD_ADDR_VAR 0 7
48765: PUSH
48766: LD_VAR 0 2
48770: PUSH
48771: LD_VAR 0 3
48775: MINUS
48776: ST_TO_ADDR
// max_x := x + r ;
48777: LD_ADDR_VAR 0 9
48781: PUSH
48782: LD_VAR 0 1
48786: PUSH
48787: LD_VAR 0 3
48791: PLUS
48792: ST_TO_ADDR
// max_y := y + r ;
48793: LD_ADDR_VAR 0 10
48797: PUSH
48798: LD_VAR 0 2
48802: PUSH
48803: LD_VAR 0 3
48807: PLUS
48808: ST_TO_ADDR
// for _x = min_x to max_x do
48809: LD_ADDR_VAR 0 5
48813: PUSH
48814: DOUBLE
48815: LD_VAR 0 8
48819: DEC
48820: ST_TO_ADDR
48821: LD_VAR 0 9
48825: PUSH
48826: FOR_TO
48827: IFFALSE 48928
// for _y = min_y to max_y do
48829: LD_ADDR_VAR 0 6
48833: PUSH
48834: DOUBLE
48835: LD_VAR 0 7
48839: DEC
48840: ST_TO_ADDR
48841: LD_VAR 0 10
48845: PUSH
48846: FOR_TO
48847: IFFALSE 48924
// begin if not ValidHex ( _x , _y ) then
48849: LD_VAR 0 5
48853: PPUSH
48854: LD_VAR 0 6
48858: PPUSH
48859: CALL_OW 488
48863: NOT
48864: IFFALSE 48868
// continue ;
48866: GO 48846
// if GetResourceTypeXY ( _x , _y ) then
48868: LD_VAR 0 5
48872: PPUSH
48873: LD_VAR 0 6
48877: PPUSH
48878: CALL_OW 283
48882: IFFALSE 48922
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
48884: LD_ADDR_VAR 0 4
48888: PUSH
48889: LD_VAR 0 4
48893: PPUSH
48894: LD_VAR 0 4
48898: PUSH
48899: LD_INT 1
48901: PLUS
48902: PPUSH
48903: LD_VAR 0 5
48907: PUSH
48908: LD_VAR 0 6
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PPUSH
48917: CALL_OW 1
48921: ST_TO_ADDR
// end ;
48922: GO 48846
48924: POP
48925: POP
48926: GO 48826
48928: POP
48929: POP
// end ;
48930: LD_VAR 0 4
48934: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
48935: LD_INT 0
48937: PPUSH
48938: PPUSH
48939: PPUSH
48940: PPUSH
48941: PPUSH
48942: PPUSH
48943: PPUSH
48944: PPUSH
// if not units then
48945: LD_VAR 0 1
48949: NOT
48950: IFFALSE 48954
// exit ;
48952: GO 49478
// result := UnitFilter ( units , [ f_ok ] ) ;
48954: LD_ADDR_VAR 0 3
48958: PUSH
48959: LD_VAR 0 1
48963: PPUSH
48964: LD_INT 50
48966: PUSH
48967: EMPTY
48968: LIST
48969: PPUSH
48970: CALL_OW 72
48974: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
48975: LD_ADDR_VAR 0 8
48979: PUSH
48980: LD_VAR 0 1
48984: PUSH
48985: LD_INT 1
48987: ARRAY
48988: PPUSH
48989: CALL_OW 255
48993: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
48994: LD_ADDR_VAR 0 10
48998: PUSH
48999: LD_INT 29
49001: PUSH
49002: LD_INT 91
49004: PUSH
49005: LD_INT 49
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: LIST
49012: ST_TO_ADDR
// if not result then
49013: LD_VAR 0 3
49017: NOT
49018: IFFALSE 49022
// exit ;
49020: GO 49478
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49022: LD_ADDR_VAR 0 5
49026: PUSH
49027: LD_INT 81
49029: PUSH
49030: LD_VAR 0 8
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PPUSH
49039: CALL_OW 69
49043: ST_TO_ADDR
// for i in result do
49044: LD_ADDR_VAR 0 4
49048: PUSH
49049: LD_VAR 0 3
49053: PUSH
49054: FOR_IN
49055: IFFALSE 49476
// begin tag := GetTag ( i ) + 1 ;
49057: LD_ADDR_VAR 0 9
49061: PUSH
49062: LD_VAR 0 4
49066: PPUSH
49067: CALL_OW 110
49071: PUSH
49072: LD_INT 1
49074: PLUS
49075: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
49076: LD_ADDR_VAR 0 7
49080: PUSH
49081: LD_VAR 0 4
49085: PPUSH
49086: CALL_OW 250
49090: PPUSH
49091: LD_VAR 0 4
49095: PPUSH
49096: CALL_OW 251
49100: PPUSH
49101: LD_INT 6
49103: PPUSH
49104: CALL 48677 0 3
49108: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
49109: LD_VAR 0 4
49113: PPUSH
49114: CALL_OW 247
49118: PUSH
49119: LD_INT 2
49121: EQUAL
49122: PUSH
49123: LD_VAR 0 7
49127: AND
49128: PUSH
49129: LD_VAR 0 4
49133: PPUSH
49134: CALL_OW 264
49138: PUSH
49139: LD_VAR 0 10
49143: IN
49144: NOT
49145: AND
49146: IFFALSE 49185
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49148: LD_VAR 0 4
49152: PPUSH
49153: LD_VAR 0 7
49157: PUSH
49158: LD_INT 1
49160: ARRAY
49161: PUSH
49162: LD_INT 1
49164: ARRAY
49165: PPUSH
49166: LD_VAR 0 7
49170: PUSH
49171: LD_INT 1
49173: ARRAY
49174: PUSH
49175: LD_INT 2
49177: ARRAY
49178: PPUSH
49179: CALL_OW 116
49183: GO 49474
// if path > tag then
49185: LD_VAR 0 2
49189: PUSH
49190: LD_VAR 0 9
49194: GREATER
49195: IFFALSE 49403
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49197: LD_ADDR_VAR 0 6
49201: PUSH
49202: LD_VAR 0 5
49206: PPUSH
49207: LD_INT 91
49209: PUSH
49210: LD_VAR 0 4
49214: PUSH
49215: LD_INT 8
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: LIST
49222: PPUSH
49223: CALL_OW 72
49227: ST_TO_ADDR
// if nearEnemy then
49228: LD_VAR 0 6
49232: IFFALSE 49301
// begin if GetWeapon ( i ) = ru_time_lapser then
49234: LD_VAR 0 4
49238: PPUSH
49239: CALL_OW 264
49243: PUSH
49244: LD_INT 49
49246: EQUAL
49247: IFFALSE 49275
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49249: LD_VAR 0 4
49253: PPUSH
49254: LD_VAR 0 6
49258: PPUSH
49259: LD_VAR 0 4
49263: PPUSH
49264: CALL_OW 74
49268: PPUSH
49269: CALL_OW 112
49273: GO 49299
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49275: LD_VAR 0 4
49279: PPUSH
49280: LD_VAR 0 6
49284: PPUSH
49285: LD_VAR 0 4
49289: PPUSH
49290: CALL_OW 74
49294: PPUSH
49295: CALL 50403 0 2
// end else
49299: GO 49401
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49301: LD_VAR 0 4
49305: PPUSH
49306: LD_VAR 0 2
49310: PUSH
49311: LD_VAR 0 9
49315: ARRAY
49316: PUSH
49317: LD_INT 1
49319: ARRAY
49320: PPUSH
49321: LD_VAR 0 2
49325: PUSH
49326: LD_VAR 0 9
49330: ARRAY
49331: PUSH
49332: LD_INT 2
49334: ARRAY
49335: PPUSH
49336: CALL_OW 297
49340: PUSH
49341: LD_INT 6
49343: GREATER
49344: IFFALSE 49387
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49346: LD_VAR 0 4
49350: PPUSH
49351: LD_VAR 0 2
49355: PUSH
49356: LD_VAR 0 9
49360: ARRAY
49361: PUSH
49362: LD_INT 1
49364: ARRAY
49365: PPUSH
49366: LD_VAR 0 2
49370: PUSH
49371: LD_VAR 0 9
49375: ARRAY
49376: PUSH
49377: LD_INT 2
49379: ARRAY
49380: PPUSH
49381: CALL_OW 114
49385: GO 49401
// SetTag ( i , tag ) ;
49387: LD_VAR 0 4
49391: PPUSH
49392: LD_VAR 0 9
49396: PPUSH
49397: CALL_OW 109
// end else
49401: GO 49474
// if enemy then
49403: LD_VAR 0 5
49407: IFFALSE 49474
// begin if GetWeapon ( i ) = ru_time_lapser then
49409: LD_VAR 0 4
49413: PPUSH
49414: CALL_OW 264
49418: PUSH
49419: LD_INT 49
49421: EQUAL
49422: IFFALSE 49450
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49424: LD_VAR 0 4
49428: PPUSH
49429: LD_VAR 0 5
49433: PPUSH
49434: LD_VAR 0 4
49438: PPUSH
49439: CALL_OW 74
49443: PPUSH
49444: CALL_OW 112
49448: GO 49474
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49450: LD_VAR 0 4
49454: PPUSH
49455: LD_VAR 0 5
49459: PPUSH
49460: LD_VAR 0 4
49464: PPUSH
49465: CALL_OW 74
49469: PPUSH
49470: CALL 50403 0 2
// end ; end ;
49474: GO 49054
49476: POP
49477: POP
// end ;
49478: LD_VAR 0 3
49482: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49483: LD_INT 0
49485: PPUSH
49486: PPUSH
49487: PPUSH
// if not unit or IsInUnit ( unit ) then
49488: LD_VAR 0 1
49492: NOT
49493: PUSH
49494: LD_VAR 0 1
49498: PPUSH
49499: CALL_OW 310
49503: OR
49504: IFFALSE 49508
// exit ;
49506: GO 49599
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49508: LD_ADDR_VAR 0 4
49512: PUSH
49513: LD_VAR 0 1
49517: PPUSH
49518: CALL_OW 250
49522: PPUSH
49523: LD_VAR 0 2
49527: PPUSH
49528: LD_INT 1
49530: PPUSH
49531: CALL_OW 272
49535: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49536: LD_ADDR_VAR 0 5
49540: PUSH
49541: LD_VAR 0 1
49545: PPUSH
49546: CALL_OW 251
49550: PPUSH
49551: LD_VAR 0 2
49555: PPUSH
49556: LD_INT 1
49558: PPUSH
49559: CALL_OW 273
49563: ST_TO_ADDR
// if ValidHex ( x , y ) then
49564: LD_VAR 0 4
49568: PPUSH
49569: LD_VAR 0 5
49573: PPUSH
49574: CALL_OW 488
49578: IFFALSE 49599
// ComTurnXY ( unit , x , y ) ;
49580: LD_VAR 0 1
49584: PPUSH
49585: LD_VAR 0 4
49589: PPUSH
49590: LD_VAR 0 5
49594: PPUSH
49595: CALL_OW 118
// end ;
49599: LD_VAR 0 3
49603: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49604: LD_INT 0
49606: PPUSH
49607: PPUSH
// result := false ;
49608: LD_ADDR_VAR 0 3
49612: PUSH
49613: LD_INT 0
49615: ST_TO_ADDR
// if not units then
49616: LD_VAR 0 2
49620: NOT
49621: IFFALSE 49625
// exit ;
49623: GO 49670
// for i in units do
49625: LD_ADDR_VAR 0 4
49629: PUSH
49630: LD_VAR 0 2
49634: PUSH
49635: FOR_IN
49636: IFFALSE 49668
// if See ( side , i ) then
49638: LD_VAR 0 1
49642: PPUSH
49643: LD_VAR 0 4
49647: PPUSH
49648: CALL_OW 292
49652: IFFALSE 49666
// begin result := true ;
49654: LD_ADDR_VAR 0 3
49658: PUSH
49659: LD_INT 1
49661: ST_TO_ADDR
// exit ;
49662: POP
49663: POP
49664: GO 49670
// end ;
49666: GO 49635
49668: POP
49669: POP
// end ;
49670: LD_VAR 0 3
49674: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49675: LD_INT 0
49677: PPUSH
49678: PPUSH
49679: PPUSH
49680: PPUSH
// if not unit or not points then
49681: LD_VAR 0 1
49685: NOT
49686: PUSH
49687: LD_VAR 0 2
49691: NOT
49692: OR
49693: IFFALSE 49697
// exit ;
49695: GO 49787
// dist := 99999 ;
49697: LD_ADDR_VAR 0 5
49701: PUSH
49702: LD_INT 99999
49704: ST_TO_ADDR
// for i in points do
49705: LD_ADDR_VAR 0 4
49709: PUSH
49710: LD_VAR 0 2
49714: PUSH
49715: FOR_IN
49716: IFFALSE 49785
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49718: LD_ADDR_VAR 0 6
49722: PUSH
49723: LD_VAR 0 1
49727: PPUSH
49728: LD_VAR 0 4
49732: PUSH
49733: LD_INT 1
49735: ARRAY
49736: PPUSH
49737: LD_VAR 0 4
49741: PUSH
49742: LD_INT 2
49744: ARRAY
49745: PPUSH
49746: CALL_OW 297
49750: ST_TO_ADDR
// if tmpDist < dist then
49751: LD_VAR 0 6
49755: PUSH
49756: LD_VAR 0 5
49760: LESS
49761: IFFALSE 49783
// begin result := i ;
49763: LD_ADDR_VAR 0 3
49767: PUSH
49768: LD_VAR 0 4
49772: ST_TO_ADDR
// dist := tmpDist ;
49773: LD_ADDR_VAR 0 5
49777: PUSH
49778: LD_VAR 0 6
49782: ST_TO_ADDR
// end ; end ;
49783: GO 49715
49785: POP
49786: POP
// end ;
49787: LD_VAR 0 3
49791: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
49792: LD_INT 0
49794: PPUSH
// uc_side := side ;
49795: LD_ADDR_OWVAR 20
49799: PUSH
49800: LD_VAR 0 1
49804: ST_TO_ADDR
// uc_nation := 3 ;
49805: LD_ADDR_OWVAR 21
49809: PUSH
49810: LD_INT 3
49812: ST_TO_ADDR
// vc_chassis := 25 ;
49813: LD_ADDR_OWVAR 37
49817: PUSH
49818: LD_INT 25
49820: ST_TO_ADDR
// vc_engine := engine_siberite ;
49821: LD_ADDR_OWVAR 39
49825: PUSH
49826: LD_INT 3
49828: ST_TO_ADDR
// vc_control := control_computer ;
49829: LD_ADDR_OWVAR 38
49833: PUSH
49834: LD_INT 3
49836: ST_TO_ADDR
// vc_weapon := 59 ;
49837: LD_ADDR_OWVAR 40
49841: PUSH
49842: LD_INT 59
49844: ST_TO_ADDR
// result := CreateVehicle ;
49845: LD_ADDR_VAR 0 5
49849: PUSH
49850: CALL_OW 45
49854: ST_TO_ADDR
// SetDir ( result , d ) ;
49855: LD_VAR 0 5
49859: PPUSH
49860: LD_VAR 0 4
49864: PPUSH
49865: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
49869: LD_VAR 0 5
49873: PPUSH
49874: LD_VAR 0 2
49878: PPUSH
49879: LD_VAR 0 3
49883: PPUSH
49884: LD_INT 0
49886: PPUSH
49887: CALL_OW 48
// end ;
49891: LD_VAR 0 5
49895: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
49896: LD_INT 0
49898: PPUSH
49899: PPUSH
49900: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
49901: LD_ADDR_VAR 0 2
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
49924: LD_VAR 0 1
49928: NOT
49929: PUSH
49930: LD_VAR 0 1
49934: PPUSH
49935: CALL_OW 264
49939: PUSH
49940: LD_INT 12
49942: PUSH
49943: LD_INT 51
49945: PUSH
49946: LD_INT 32
49948: PUSH
49949: LD_INT 89
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: IN
49958: NOT
49959: OR
49960: IFFALSE 49964
// exit ;
49962: GO 50062
// for i := 1 to 3 do
49964: LD_ADDR_VAR 0 3
49968: PUSH
49969: DOUBLE
49970: LD_INT 1
49972: DEC
49973: ST_TO_ADDR
49974: LD_INT 3
49976: PUSH
49977: FOR_TO
49978: IFFALSE 50060
// begin tmp := GetCargo ( cargo , i ) ;
49980: LD_ADDR_VAR 0 4
49984: PUSH
49985: LD_VAR 0 1
49989: PPUSH
49990: LD_VAR 0 3
49994: PPUSH
49995: CALL_OW 289
49999: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50000: LD_ADDR_VAR 0 2
50004: PUSH
50005: LD_VAR 0 2
50009: PPUSH
50010: LD_VAR 0 3
50014: PPUSH
50015: LD_VAR 0 4
50019: PPUSH
50020: CALL_OW 1
50024: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50025: LD_ADDR_VAR 0 2
50029: PUSH
50030: LD_VAR 0 2
50034: PPUSH
50035: LD_INT 4
50037: PPUSH
50038: LD_VAR 0 2
50042: PUSH
50043: LD_INT 4
50045: ARRAY
50046: PUSH
50047: LD_VAR 0 4
50051: PLUS
50052: PPUSH
50053: CALL_OW 1
50057: ST_TO_ADDR
// end ;
50058: GO 49977
50060: POP
50061: POP
// end ;
50062: LD_VAR 0 2
50066: RET
// export function Length ( array ) ; begin
50067: LD_INT 0
50069: PPUSH
// result := array + 0 ;
50070: LD_ADDR_VAR 0 2
50074: PUSH
50075: LD_VAR 0 1
50079: PUSH
50080: LD_INT 0
50082: PLUS
50083: ST_TO_ADDR
// end ;
50084: LD_VAR 0 2
50088: RET
// export function PrepareArray ( array ) ; begin
50089: LD_INT 0
50091: PPUSH
// result := array diff 0 ;
50092: LD_ADDR_VAR 0 2
50096: PUSH
50097: LD_VAR 0 1
50101: PUSH
50102: LD_INT 0
50104: DIFF
50105: ST_TO_ADDR
// if not result [ 1 ] then
50106: LD_VAR 0 2
50110: PUSH
50111: LD_INT 1
50113: ARRAY
50114: NOT
50115: IFFALSE 50135
// result := Delete ( result , 1 ) ;
50117: LD_ADDR_VAR 0 2
50121: PUSH
50122: LD_VAR 0 2
50126: PPUSH
50127: LD_INT 1
50129: PPUSH
50130: CALL_OW 3
50134: ST_TO_ADDR
// end ;
50135: LD_VAR 0 2
50139: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50140: LD_INT 0
50142: PPUSH
50143: PPUSH
50144: PPUSH
50145: PPUSH
// sibRocketRange := 25 ;
50146: LD_ADDR_VAR 0 6
50150: PUSH
50151: LD_INT 25
50153: ST_TO_ADDR
// result := false ;
50154: LD_ADDR_VAR 0 4
50158: PUSH
50159: LD_INT 0
50161: ST_TO_ADDR
// for i := 0 to 5 do
50162: LD_ADDR_VAR 0 5
50166: PUSH
50167: DOUBLE
50168: LD_INT 0
50170: DEC
50171: ST_TO_ADDR
50172: LD_INT 5
50174: PUSH
50175: FOR_TO
50176: IFFALSE 50243
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50178: LD_VAR 0 1
50182: PPUSH
50183: LD_VAR 0 5
50187: PPUSH
50188: LD_VAR 0 6
50192: PPUSH
50193: CALL_OW 272
50197: PPUSH
50198: LD_VAR 0 2
50202: PPUSH
50203: LD_VAR 0 5
50207: PPUSH
50208: LD_VAR 0 6
50212: PPUSH
50213: CALL_OW 273
50217: PPUSH
50218: LD_VAR 0 3
50222: PPUSH
50223: CALL_OW 309
50227: IFFALSE 50241
// begin result := true ;
50229: LD_ADDR_VAR 0 4
50233: PUSH
50234: LD_INT 1
50236: ST_TO_ADDR
// exit ;
50237: POP
50238: POP
50239: GO 50245
// end ;
50241: GO 50175
50243: POP
50244: POP
// end ;
50245: LD_VAR 0 4
50249: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
50250: LD_INT 0
50252: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
50253: LD_VAR 0 1
50257: PPUSH
50258: LD_VAR 0 2
50262: PPUSH
50263: LD_INT 0
50265: PPUSH
50266: LD_INT 0
50268: PPUSH
50269: LD_INT 1
50271: PPUSH
50272: LD_INT 0
50274: PPUSH
50275: CALL_OW 587
// end ;
50279: LD_VAR 0 3
50283: RET
// export function CenterOnNow ( unit ) ; begin
50284: LD_INT 0
50286: PPUSH
// result := IsInUnit ( unit ) ;
50287: LD_ADDR_VAR 0 2
50291: PUSH
50292: LD_VAR 0 1
50296: PPUSH
50297: CALL_OW 310
50301: ST_TO_ADDR
// if not result then
50302: LD_VAR 0 2
50306: NOT
50307: IFFALSE 50319
// result := unit ;
50309: LD_ADDR_VAR 0 2
50313: PUSH
50314: LD_VAR 0 1
50318: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
50319: LD_VAR 0 1
50323: PPUSH
50324: CALL_OW 87
// end ;
50328: LD_VAR 0 2
50332: RET
// export function ComMoveHex ( unit , hex ) ; begin
50333: LD_INT 0
50335: PPUSH
// if not hex then
50336: LD_VAR 0 2
50340: NOT
50341: IFFALSE 50345
// exit ;
50343: GO 50398
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
50345: LD_VAR 0 2
50349: PUSH
50350: LD_INT 1
50352: ARRAY
50353: PPUSH
50354: LD_VAR 0 2
50358: PUSH
50359: LD_INT 2
50361: ARRAY
50362: PPUSH
50363: CALL_OW 428
50367: IFFALSE 50371
// exit ;
50369: GO 50398
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
50371: LD_VAR 0 1
50375: PPUSH
50376: LD_VAR 0 2
50380: PUSH
50381: LD_INT 1
50383: ARRAY
50384: PPUSH
50385: LD_VAR 0 2
50389: PUSH
50390: LD_INT 2
50392: ARRAY
50393: PPUSH
50394: CALL_OW 111
// end ;
50398: LD_VAR 0 3
50402: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
50403: LD_INT 0
50405: PPUSH
50406: PPUSH
50407: PPUSH
// if not unit or not enemy then
50408: LD_VAR 0 1
50412: NOT
50413: PUSH
50414: LD_VAR 0 2
50418: NOT
50419: OR
50420: IFFALSE 50424
// exit ;
50422: GO 50548
// x := GetX ( enemy ) ;
50424: LD_ADDR_VAR 0 4
50428: PUSH
50429: LD_VAR 0 2
50433: PPUSH
50434: CALL_OW 250
50438: ST_TO_ADDR
// y := GetY ( enemy ) ;
50439: LD_ADDR_VAR 0 5
50443: PUSH
50444: LD_VAR 0 2
50448: PPUSH
50449: CALL_OW 251
50453: ST_TO_ADDR
// if ValidHex ( x , y ) then
50454: LD_VAR 0 4
50458: PPUSH
50459: LD_VAR 0 5
50463: PPUSH
50464: CALL_OW 488
50468: IFFALSE 50548
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
50470: LD_VAR 0 2
50474: PPUSH
50475: CALL_OW 247
50479: PUSH
50480: LD_INT 3
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: IN
50490: PUSH
50491: LD_VAR 0 1
50495: PPUSH
50496: CALL_OW 255
50500: PPUSH
50501: LD_VAR 0 2
50505: PPUSH
50506: CALL_OW 292
50510: AND
50511: IFFALSE 50529
// ComAttackUnit ( unit , enemy ) else
50513: LD_VAR 0 1
50517: PPUSH
50518: LD_VAR 0 2
50522: PPUSH
50523: CALL_OW 115
50527: GO 50548
// ComAgressiveMove ( unit , x , y ) ;
50529: LD_VAR 0 1
50533: PPUSH
50534: LD_VAR 0 4
50538: PPUSH
50539: LD_VAR 0 5
50543: PPUSH
50544: CALL_OW 114
// end ; end_of_file
50548: LD_VAR 0 3
50552: RET
// export globalGameSaveCounter ; every 0 0$1 do
50553: GO 50555
50555: DISABLE
// begin enable ;
50556: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
50557: LD_STRING updateTimer(
50559: PUSH
50560: LD_OWVAR 1
50564: STR
50565: PUSH
50566: LD_STRING );
50568: STR
50569: PPUSH
50570: CALL_OW 559
// end ;
50574: END
// every 0 0$1 do
50575: GO 50577
50577: DISABLE
// begin globalGameSaveCounter := 0 ;
50578: LD_ADDR_EXP 28
50582: PUSH
50583: LD_INT 0
50585: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
50586: LD_STRING setGameSaveCounter(0)
50588: PPUSH
50589: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
50593: LD_STRING initStreamRollete();
50595: PPUSH
50596: CALL_OW 559
// InitStreamMode ;
50600: CALL 51926 0 0
// DefineStreamItems ( false ) ;
50604: LD_INT 0
50606: PPUSH
50607: CALL 52390 0 1
// end ;
50611: END
// export function SOS_MapStart ( ) ; begin
50612: LD_INT 0
50614: PPUSH
// if streamModeActive then
50615: LD_EXP 29
50619: IFFALSE 50628
// DefineStreamItems ( true ) ;
50621: LD_INT 1
50623: PPUSH
50624: CALL 52390 0 1
// UpdateLuaVariables ( ) ;
50628: CALL 50645 0 0
// UpdateFactoryWaypoints ( ) ;
50632: CALL 65259 0 0
// UpdateWarehouseGatheringPoints ( ) ;
50636: CALL 65516 0 0
// end ;
50640: LD_VAR 0 1
50644: RET
// function UpdateLuaVariables ( ) ; begin
50645: LD_INT 0
50647: PPUSH
// if globalGameSaveCounter then
50648: LD_EXP 28
50652: IFFALSE 50686
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
50654: LD_ADDR_EXP 28
50658: PUSH
50659: LD_EXP 28
50663: PPUSH
50664: CALL 47692 0 1
50668: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50669: LD_STRING setGameSaveCounter(
50671: PUSH
50672: LD_EXP 28
50676: STR
50677: PUSH
50678: LD_STRING )
50680: STR
50681: PPUSH
50682: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
50686: LD_STRING setGameDifficulty(
50688: PUSH
50689: LD_OWVAR 67
50693: STR
50694: PUSH
50695: LD_STRING )
50697: STR
50698: PPUSH
50699: CALL_OW 559
// end ;
50703: LD_VAR 0 1
50707: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
50708: LD_INT 0
50710: PPUSH
// if p2 = stream_mode then
50711: LD_VAR 0 2
50715: PUSH
50716: LD_INT 100
50718: EQUAL
50719: IFFALSE 51722
// begin if not StreamModeActive then
50721: LD_EXP 29
50725: NOT
50726: IFFALSE 50736
// StreamModeActive := true ;
50728: LD_ADDR_EXP 29
50732: PUSH
50733: LD_INT 1
50735: ST_TO_ADDR
// if p3 = 0 then
50736: LD_VAR 0 3
50740: PUSH
50741: LD_INT 0
50743: EQUAL
50744: IFFALSE 50750
// InitStreamMode ;
50746: CALL 51926 0 0
// if p3 = 1 then
50750: LD_VAR 0 3
50754: PUSH
50755: LD_INT 1
50757: EQUAL
50758: IFFALSE 50768
// sRocket := true ;
50760: LD_ADDR_EXP 34
50764: PUSH
50765: LD_INT 1
50767: ST_TO_ADDR
// if p3 = 2 then
50768: LD_VAR 0 3
50772: PUSH
50773: LD_INT 2
50775: EQUAL
50776: IFFALSE 50786
// sSpeed := true ;
50778: LD_ADDR_EXP 33
50782: PUSH
50783: LD_INT 1
50785: ST_TO_ADDR
// if p3 = 3 then
50786: LD_VAR 0 3
50790: PUSH
50791: LD_INT 3
50793: EQUAL
50794: IFFALSE 50804
// sEngine := true ;
50796: LD_ADDR_EXP 35
50800: PUSH
50801: LD_INT 1
50803: ST_TO_ADDR
// if p3 = 4 then
50804: LD_VAR 0 3
50808: PUSH
50809: LD_INT 4
50811: EQUAL
50812: IFFALSE 50822
// sSpec := true ;
50814: LD_ADDR_EXP 32
50818: PUSH
50819: LD_INT 1
50821: ST_TO_ADDR
// if p3 = 5 then
50822: LD_VAR 0 3
50826: PUSH
50827: LD_INT 5
50829: EQUAL
50830: IFFALSE 50840
// sLevel := true ;
50832: LD_ADDR_EXP 36
50836: PUSH
50837: LD_INT 1
50839: ST_TO_ADDR
// if p3 = 6 then
50840: LD_VAR 0 3
50844: PUSH
50845: LD_INT 6
50847: EQUAL
50848: IFFALSE 50858
// sArmoury := true ;
50850: LD_ADDR_EXP 37
50854: PUSH
50855: LD_INT 1
50857: ST_TO_ADDR
// if p3 = 7 then
50858: LD_VAR 0 3
50862: PUSH
50863: LD_INT 7
50865: EQUAL
50866: IFFALSE 50876
// sRadar := true ;
50868: LD_ADDR_EXP 38
50872: PUSH
50873: LD_INT 1
50875: ST_TO_ADDR
// if p3 = 8 then
50876: LD_VAR 0 3
50880: PUSH
50881: LD_INT 8
50883: EQUAL
50884: IFFALSE 50894
// sBunker := true ;
50886: LD_ADDR_EXP 39
50890: PUSH
50891: LD_INT 1
50893: ST_TO_ADDR
// if p3 = 9 then
50894: LD_VAR 0 3
50898: PUSH
50899: LD_INT 9
50901: EQUAL
50902: IFFALSE 50912
// sHack := true ;
50904: LD_ADDR_EXP 40
50908: PUSH
50909: LD_INT 1
50911: ST_TO_ADDR
// if p3 = 10 then
50912: LD_VAR 0 3
50916: PUSH
50917: LD_INT 10
50919: EQUAL
50920: IFFALSE 50930
// sFire := true ;
50922: LD_ADDR_EXP 41
50926: PUSH
50927: LD_INT 1
50929: ST_TO_ADDR
// if p3 = 11 then
50930: LD_VAR 0 3
50934: PUSH
50935: LD_INT 11
50937: EQUAL
50938: IFFALSE 50948
// sRefresh := true ;
50940: LD_ADDR_EXP 42
50944: PUSH
50945: LD_INT 1
50947: ST_TO_ADDR
// if p3 = 12 then
50948: LD_VAR 0 3
50952: PUSH
50953: LD_INT 12
50955: EQUAL
50956: IFFALSE 50966
// sExp := true ;
50958: LD_ADDR_EXP 43
50962: PUSH
50963: LD_INT 1
50965: ST_TO_ADDR
// if p3 = 13 then
50966: LD_VAR 0 3
50970: PUSH
50971: LD_INT 13
50973: EQUAL
50974: IFFALSE 50984
// sDepot := true ;
50976: LD_ADDR_EXP 44
50980: PUSH
50981: LD_INT 1
50983: ST_TO_ADDR
// if p3 = 14 then
50984: LD_VAR 0 3
50988: PUSH
50989: LD_INT 14
50991: EQUAL
50992: IFFALSE 51002
// sFlag := true ;
50994: LD_ADDR_EXP 45
50998: PUSH
50999: LD_INT 1
51001: ST_TO_ADDR
// if p3 = 15 then
51002: LD_VAR 0 3
51006: PUSH
51007: LD_INT 15
51009: EQUAL
51010: IFFALSE 51020
// sKamikadze := true ;
51012: LD_ADDR_EXP 53
51016: PUSH
51017: LD_INT 1
51019: ST_TO_ADDR
// if p3 = 16 then
51020: LD_VAR 0 3
51024: PUSH
51025: LD_INT 16
51027: EQUAL
51028: IFFALSE 51038
// sTroll := true ;
51030: LD_ADDR_EXP 54
51034: PUSH
51035: LD_INT 1
51037: ST_TO_ADDR
// if p3 = 17 then
51038: LD_VAR 0 3
51042: PUSH
51043: LD_INT 17
51045: EQUAL
51046: IFFALSE 51056
// sSlow := true ;
51048: LD_ADDR_EXP 55
51052: PUSH
51053: LD_INT 1
51055: ST_TO_ADDR
// if p3 = 18 then
51056: LD_VAR 0 3
51060: PUSH
51061: LD_INT 18
51063: EQUAL
51064: IFFALSE 51074
// sLack := true ;
51066: LD_ADDR_EXP 56
51070: PUSH
51071: LD_INT 1
51073: ST_TO_ADDR
// if p3 = 19 then
51074: LD_VAR 0 3
51078: PUSH
51079: LD_INT 19
51081: EQUAL
51082: IFFALSE 51092
// sTank := true ;
51084: LD_ADDR_EXP 58
51088: PUSH
51089: LD_INT 1
51091: ST_TO_ADDR
// if p3 = 20 then
51092: LD_VAR 0 3
51096: PUSH
51097: LD_INT 20
51099: EQUAL
51100: IFFALSE 51110
// sRemote := true ;
51102: LD_ADDR_EXP 59
51106: PUSH
51107: LD_INT 1
51109: ST_TO_ADDR
// if p3 = 21 then
51110: LD_VAR 0 3
51114: PUSH
51115: LD_INT 21
51117: EQUAL
51118: IFFALSE 51128
// sPowell := true ;
51120: LD_ADDR_EXP 60
51124: PUSH
51125: LD_INT 1
51127: ST_TO_ADDR
// if p3 = 22 then
51128: LD_VAR 0 3
51132: PUSH
51133: LD_INT 22
51135: EQUAL
51136: IFFALSE 51146
// sTeleport := true ;
51138: LD_ADDR_EXP 63
51142: PUSH
51143: LD_INT 1
51145: ST_TO_ADDR
// if p3 = 23 then
51146: LD_VAR 0 3
51150: PUSH
51151: LD_INT 23
51153: EQUAL
51154: IFFALSE 51164
// sOilTower := true ;
51156: LD_ADDR_EXP 65
51160: PUSH
51161: LD_INT 1
51163: ST_TO_ADDR
// if p3 = 24 then
51164: LD_VAR 0 3
51168: PUSH
51169: LD_INT 24
51171: EQUAL
51172: IFFALSE 51182
// sShovel := true ;
51174: LD_ADDR_EXP 66
51178: PUSH
51179: LD_INT 1
51181: ST_TO_ADDR
// if p3 = 25 then
51182: LD_VAR 0 3
51186: PUSH
51187: LD_INT 25
51189: EQUAL
51190: IFFALSE 51200
// sSheik := true ;
51192: LD_ADDR_EXP 67
51196: PUSH
51197: LD_INT 1
51199: ST_TO_ADDR
// if p3 = 26 then
51200: LD_VAR 0 3
51204: PUSH
51205: LD_INT 26
51207: EQUAL
51208: IFFALSE 51218
// sEarthquake := true ;
51210: LD_ADDR_EXP 69
51214: PUSH
51215: LD_INT 1
51217: ST_TO_ADDR
// if p3 = 27 then
51218: LD_VAR 0 3
51222: PUSH
51223: LD_INT 27
51225: EQUAL
51226: IFFALSE 51236
// sAI := true ;
51228: LD_ADDR_EXP 70
51232: PUSH
51233: LD_INT 1
51235: ST_TO_ADDR
// if p3 = 28 then
51236: LD_VAR 0 3
51240: PUSH
51241: LD_INT 28
51243: EQUAL
51244: IFFALSE 51254
// sCargo := true ;
51246: LD_ADDR_EXP 73
51250: PUSH
51251: LD_INT 1
51253: ST_TO_ADDR
// if p3 = 29 then
51254: LD_VAR 0 3
51258: PUSH
51259: LD_INT 29
51261: EQUAL
51262: IFFALSE 51272
// sDLaser := true ;
51264: LD_ADDR_EXP 74
51268: PUSH
51269: LD_INT 1
51271: ST_TO_ADDR
// if p3 = 30 then
51272: LD_VAR 0 3
51276: PUSH
51277: LD_INT 30
51279: EQUAL
51280: IFFALSE 51290
// sExchange := true ;
51282: LD_ADDR_EXP 75
51286: PUSH
51287: LD_INT 1
51289: ST_TO_ADDR
// if p3 = 31 then
51290: LD_VAR 0 3
51294: PUSH
51295: LD_INT 31
51297: EQUAL
51298: IFFALSE 51308
// sFac := true ;
51300: LD_ADDR_EXP 76
51304: PUSH
51305: LD_INT 1
51307: ST_TO_ADDR
// if p3 = 32 then
51308: LD_VAR 0 3
51312: PUSH
51313: LD_INT 32
51315: EQUAL
51316: IFFALSE 51326
// sPower := true ;
51318: LD_ADDR_EXP 77
51322: PUSH
51323: LD_INT 1
51325: ST_TO_ADDR
// if p3 = 33 then
51326: LD_VAR 0 3
51330: PUSH
51331: LD_INT 33
51333: EQUAL
51334: IFFALSE 51344
// sRandom := true ;
51336: LD_ADDR_EXP 78
51340: PUSH
51341: LD_INT 1
51343: ST_TO_ADDR
// if p3 = 34 then
51344: LD_VAR 0 3
51348: PUSH
51349: LD_INT 34
51351: EQUAL
51352: IFFALSE 51362
// sShield := true ;
51354: LD_ADDR_EXP 79
51358: PUSH
51359: LD_INT 1
51361: ST_TO_ADDR
// if p3 = 35 then
51362: LD_VAR 0 3
51366: PUSH
51367: LD_INT 35
51369: EQUAL
51370: IFFALSE 51380
// sTime := true ;
51372: LD_ADDR_EXP 80
51376: PUSH
51377: LD_INT 1
51379: ST_TO_ADDR
// if p3 = 36 then
51380: LD_VAR 0 3
51384: PUSH
51385: LD_INT 36
51387: EQUAL
51388: IFFALSE 51398
// sTools := true ;
51390: LD_ADDR_EXP 81
51394: PUSH
51395: LD_INT 1
51397: ST_TO_ADDR
// if p3 = 101 then
51398: LD_VAR 0 3
51402: PUSH
51403: LD_INT 101
51405: EQUAL
51406: IFFALSE 51416
// sSold := true ;
51408: LD_ADDR_EXP 46
51412: PUSH
51413: LD_INT 1
51415: ST_TO_ADDR
// if p3 = 102 then
51416: LD_VAR 0 3
51420: PUSH
51421: LD_INT 102
51423: EQUAL
51424: IFFALSE 51434
// sDiff := true ;
51426: LD_ADDR_EXP 47
51430: PUSH
51431: LD_INT 1
51433: ST_TO_ADDR
// if p3 = 103 then
51434: LD_VAR 0 3
51438: PUSH
51439: LD_INT 103
51441: EQUAL
51442: IFFALSE 51452
// sFog := true ;
51444: LD_ADDR_EXP 50
51448: PUSH
51449: LD_INT 1
51451: ST_TO_ADDR
// if p3 = 104 then
51452: LD_VAR 0 3
51456: PUSH
51457: LD_INT 104
51459: EQUAL
51460: IFFALSE 51470
// sReset := true ;
51462: LD_ADDR_EXP 51
51466: PUSH
51467: LD_INT 1
51469: ST_TO_ADDR
// if p3 = 105 then
51470: LD_VAR 0 3
51474: PUSH
51475: LD_INT 105
51477: EQUAL
51478: IFFALSE 51488
// sSun := true ;
51480: LD_ADDR_EXP 52
51484: PUSH
51485: LD_INT 1
51487: ST_TO_ADDR
// if p3 = 106 then
51488: LD_VAR 0 3
51492: PUSH
51493: LD_INT 106
51495: EQUAL
51496: IFFALSE 51506
// sTiger := true ;
51498: LD_ADDR_EXP 48
51502: PUSH
51503: LD_INT 1
51505: ST_TO_ADDR
// if p3 = 107 then
51506: LD_VAR 0 3
51510: PUSH
51511: LD_INT 107
51513: EQUAL
51514: IFFALSE 51524
// sBomb := true ;
51516: LD_ADDR_EXP 49
51520: PUSH
51521: LD_INT 1
51523: ST_TO_ADDR
// if p3 = 108 then
51524: LD_VAR 0 3
51528: PUSH
51529: LD_INT 108
51531: EQUAL
51532: IFFALSE 51542
// sWound := true ;
51534: LD_ADDR_EXP 57
51538: PUSH
51539: LD_INT 1
51541: ST_TO_ADDR
// if p3 = 109 then
51542: LD_VAR 0 3
51546: PUSH
51547: LD_INT 109
51549: EQUAL
51550: IFFALSE 51560
// sBetray := true ;
51552: LD_ADDR_EXP 61
51556: PUSH
51557: LD_INT 1
51559: ST_TO_ADDR
// if p3 = 110 then
51560: LD_VAR 0 3
51564: PUSH
51565: LD_INT 110
51567: EQUAL
51568: IFFALSE 51578
// sContamin := true ;
51570: LD_ADDR_EXP 62
51574: PUSH
51575: LD_INT 1
51577: ST_TO_ADDR
// if p3 = 111 then
51578: LD_VAR 0 3
51582: PUSH
51583: LD_INT 111
51585: EQUAL
51586: IFFALSE 51596
// sOil := true ;
51588: LD_ADDR_EXP 64
51592: PUSH
51593: LD_INT 1
51595: ST_TO_ADDR
// if p3 = 112 then
51596: LD_VAR 0 3
51600: PUSH
51601: LD_INT 112
51603: EQUAL
51604: IFFALSE 51614
// sStu := true ;
51606: LD_ADDR_EXP 68
51610: PUSH
51611: LD_INT 1
51613: ST_TO_ADDR
// if p3 = 113 then
51614: LD_VAR 0 3
51618: PUSH
51619: LD_INT 113
51621: EQUAL
51622: IFFALSE 51632
// sBazooka := true ;
51624: LD_ADDR_EXP 71
51628: PUSH
51629: LD_INT 1
51631: ST_TO_ADDR
// if p3 = 114 then
51632: LD_VAR 0 3
51636: PUSH
51637: LD_INT 114
51639: EQUAL
51640: IFFALSE 51650
// sMortar := true ;
51642: LD_ADDR_EXP 72
51646: PUSH
51647: LD_INT 1
51649: ST_TO_ADDR
// if p3 = 115 then
51650: LD_VAR 0 3
51654: PUSH
51655: LD_INT 115
51657: EQUAL
51658: IFFALSE 51668
// sRanger := true ;
51660: LD_ADDR_EXP 82
51664: PUSH
51665: LD_INT 1
51667: ST_TO_ADDR
// if p3 = 116 then
51668: LD_VAR 0 3
51672: PUSH
51673: LD_INT 116
51675: EQUAL
51676: IFFALSE 51686
// sComputer := true ;
51678: LD_ADDR_EXP 83
51682: PUSH
51683: LD_INT 1
51685: ST_TO_ADDR
// if p3 = 117 then
51686: LD_VAR 0 3
51690: PUSH
51691: LD_INT 117
51693: EQUAL
51694: IFFALSE 51704
// s30 := true ;
51696: LD_ADDR_EXP 84
51700: PUSH
51701: LD_INT 1
51703: ST_TO_ADDR
// if p3 = 118 then
51704: LD_VAR 0 3
51708: PUSH
51709: LD_INT 118
51711: EQUAL
51712: IFFALSE 51722
// s60 := true ;
51714: LD_ADDR_EXP 85
51718: PUSH
51719: LD_INT 1
51721: ST_TO_ADDR
// end ; if p2 = hack_mode then
51722: LD_VAR 0 2
51726: PUSH
51727: LD_INT 101
51729: EQUAL
51730: IFFALSE 51858
// begin case p3 of 1 :
51732: LD_VAR 0 3
51736: PUSH
51737: LD_INT 1
51739: DOUBLE
51740: EQUAL
51741: IFTRUE 51745
51743: GO 51752
51745: POP
// hHackUnlimitedResources ; 2 :
51746: CALL 64005 0 0
51750: GO 51858
51752: LD_INT 2
51754: DOUBLE
51755: EQUAL
51756: IFTRUE 51760
51758: GO 51767
51760: POP
// hHackSetLevel10 ; 3 :
51761: CALL 64138 0 0
51765: GO 51858
51767: LD_INT 3
51769: DOUBLE
51770: EQUAL
51771: IFTRUE 51775
51773: GO 51782
51775: POP
// hHackSetLevel10YourUnits ; 4 :
51776: CALL 64223 0 0
51780: GO 51858
51782: LD_INT 4
51784: DOUBLE
51785: EQUAL
51786: IFTRUE 51790
51788: GO 51797
51790: POP
// hHackInvincible ; 5 :
51791: CALL 64671 0 0
51795: GO 51858
51797: LD_INT 5
51799: DOUBLE
51800: EQUAL
51801: IFTRUE 51805
51803: GO 51812
51805: POP
// hHackInvisible ; 6 :
51806: CALL 64782 0 0
51810: GO 51858
51812: LD_INT 6
51814: DOUBLE
51815: EQUAL
51816: IFTRUE 51820
51818: GO 51827
51820: POP
// hHackChangeYourSide ; 7 :
51821: CALL 64839 0 0
51825: GO 51858
51827: LD_INT 7
51829: DOUBLE
51830: EQUAL
51831: IFTRUE 51835
51833: GO 51842
51835: POP
// hHackChangeUnitSide ; 8 :
51836: CALL 64881 0 0
51840: GO 51858
51842: LD_INT 8
51844: DOUBLE
51845: EQUAL
51846: IFTRUE 51850
51848: GO 51857
51850: POP
// hHackFog ; end ;
51851: CALL 64982 0 0
51855: GO 51858
51857: POP
// end ; if p2 = game_save_mode then
51858: LD_VAR 0 2
51862: PUSH
51863: LD_INT 102
51865: EQUAL
51866: IFFALSE 51921
// begin if p3 = 1 then
51868: LD_VAR 0 3
51872: PUSH
51873: LD_INT 1
51875: EQUAL
51876: IFFALSE 51888
// globalGameSaveCounter := p4 ;
51878: LD_ADDR_EXP 28
51882: PUSH
51883: LD_VAR 0 4
51887: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
51888: LD_VAR 0 3
51892: PUSH
51893: LD_INT 2
51895: EQUAL
51896: PUSH
51897: LD_EXP 28
51901: AND
51902: IFFALSE 51921
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51904: LD_STRING setGameSaveCounter(
51906: PUSH
51907: LD_EXP 28
51911: STR
51912: PUSH
51913: LD_STRING )
51915: STR
51916: PPUSH
51917: CALL_OW 559
// end ; end ;
51921: LD_VAR 0 7
51925: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
51926: LD_INT 0
51928: PPUSH
// streamModeActive := false ;
51929: LD_ADDR_EXP 29
51933: PUSH
51934: LD_INT 0
51936: ST_TO_ADDR
// normalCounter := 36 ;
51937: LD_ADDR_EXP 30
51941: PUSH
51942: LD_INT 36
51944: ST_TO_ADDR
// hardcoreCounter := 18 ;
51945: LD_ADDR_EXP 31
51949: PUSH
51950: LD_INT 18
51952: ST_TO_ADDR
// sRocket := false ;
51953: LD_ADDR_EXP 34
51957: PUSH
51958: LD_INT 0
51960: ST_TO_ADDR
// sSpeed := false ;
51961: LD_ADDR_EXP 33
51965: PUSH
51966: LD_INT 0
51968: ST_TO_ADDR
// sEngine := false ;
51969: LD_ADDR_EXP 35
51973: PUSH
51974: LD_INT 0
51976: ST_TO_ADDR
// sSpec := false ;
51977: LD_ADDR_EXP 32
51981: PUSH
51982: LD_INT 0
51984: ST_TO_ADDR
// sLevel := false ;
51985: LD_ADDR_EXP 36
51989: PUSH
51990: LD_INT 0
51992: ST_TO_ADDR
// sArmoury := false ;
51993: LD_ADDR_EXP 37
51997: PUSH
51998: LD_INT 0
52000: ST_TO_ADDR
// sRadar := false ;
52001: LD_ADDR_EXP 38
52005: PUSH
52006: LD_INT 0
52008: ST_TO_ADDR
// sBunker := false ;
52009: LD_ADDR_EXP 39
52013: PUSH
52014: LD_INT 0
52016: ST_TO_ADDR
// sHack := false ;
52017: LD_ADDR_EXP 40
52021: PUSH
52022: LD_INT 0
52024: ST_TO_ADDR
// sFire := false ;
52025: LD_ADDR_EXP 41
52029: PUSH
52030: LD_INT 0
52032: ST_TO_ADDR
// sRefresh := false ;
52033: LD_ADDR_EXP 42
52037: PUSH
52038: LD_INT 0
52040: ST_TO_ADDR
// sExp := false ;
52041: LD_ADDR_EXP 43
52045: PUSH
52046: LD_INT 0
52048: ST_TO_ADDR
// sDepot := false ;
52049: LD_ADDR_EXP 44
52053: PUSH
52054: LD_INT 0
52056: ST_TO_ADDR
// sFlag := false ;
52057: LD_ADDR_EXP 45
52061: PUSH
52062: LD_INT 0
52064: ST_TO_ADDR
// sKamikadze := false ;
52065: LD_ADDR_EXP 53
52069: PUSH
52070: LD_INT 0
52072: ST_TO_ADDR
// sTroll := false ;
52073: LD_ADDR_EXP 54
52077: PUSH
52078: LD_INT 0
52080: ST_TO_ADDR
// sSlow := false ;
52081: LD_ADDR_EXP 55
52085: PUSH
52086: LD_INT 0
52088: ST_TO_ADDR
// sLack := false ;
52089: LD_ADDR_EXP 56
52093: PUSH
52094: LD_INT 0
52096: ST_TO_ADDR
// sTank := false ;
52097: LD_ADDR_EXP 58
52101: PUSH
52102: LD_INT 0
52104: ST_TO_ADDR
// sRemote := false ;
52105: LD_ADDR_EXP 59
52109: PUSH
52110: LD_INT 0
52112: ST_TO_ADDR
// sPowell := false ;
52113: LD_ADDR_EXP 60
52117: PUSH
52118: LD_INT 0
52120: ST_TO_ADDR
// sTeleport := false ;
52121: LD_ADDR_EXP 63
52125: PUSH
52126: LD_INT 0
52128: ST_TO_ADDR
// sOilTower := false ;
52129: LD_ADDR_EXP 65
52133: PUSH
52134: LD_INT 0
52136: ST_TO_ADDR
// sShovel := false ;
52137: LD_ADDR_EXP 66
52141: PUSH
52142: LD_INT 0
52144: ST_TO_ADDR
// sSheik := false ;
52145: LD_ADDR_EXP 67
52149: PUSH
52150: LD_INT 0
52152: ST_TO_ADDR
// sEarthquake := false ;
52153: LD_ADDR_EXP 69
52157: PUSH
52158: LD_INT 0
52160: ST_TO_ADDR
// sAI := false ;
52161: LD_ADDR_EXP 70
52165: PUSH
52166: LD_INT 0
52168: ST_TO_ADDR
// sCargo := false ;
52169: LD_ADDR_EXP 73
52173: PUSH
52174: LD_INT 0
52176: ST_TO_ADDR
// sDLaser := false ;
52177: LD_ADDR_EXP 74
52181: PUSH
52182: LD_INT 0
52184: ST_TO_ADDR
// sExchange := false ;
52185: LD_ADDR_EXP 75
52189: PUSH
52190: LD_INT 0
52192: ST_TO_ADDR
// sFac := false ;
52193: LD_ADDR_EXP 76
52197: PUSH
52198: LD_INT 0
52200: ST_TO_ADDR
// sPower := false ;
52201: LD_ADDR_EXP 77
52205: PUSH
52206: LD_INT 0
52208: ST_TO_ADDR
// sRandom := false ;
52209: LD_ADDR_EXP 78
52213: PUSH
52214: LD_INT 0
52216: ST_TO_ADDR
// sShield := false ;
52217: LD_ADDR_EXP 79
52221: PUSH
52222: LD_INT 0
52224: ST_TO_ADDR
// sTime := false ;
52225: LD_ADDR_EXP 80
52229: PUSH
52230: LD_INT 0
52232: ST_TO_ADDR
// sTools := false ;
52233: LD_ADDR_EXP 81
52237: PUSH
52238: LD_INT 0
52240: ST_TO_ADDR
// sSold := false ;
52241: LD_ADDR_EXP 46
52245: PUSH
52246: LD_INT 0
52248: ST_TO_ADDR
// sDiff := false ;
52249: LD_ADDR_EXP 47
52253: PUSH
52254: LD_INT 0
52256: ST_TO_ADDR
// sFog := false ;
52257: LD_ADDR_EXP 50
52261: PUSH
52262: LD_INT 0
52264: ST_TO_ADDR
// sReset := false ;
52265: LD_ADDR_EXP 51
52269: PUSH
52270: LD_INT 0
52272: ST_TO_ADDR
// sSun := false ;
52273: LD_ADDR_EXP 52
52277: PUSH
52278: LD_INT 0
52280: ST_TO_ADDR
// sTiger := false ;
52281: LD_ADDR_EXP 48
52285: PUSH
52286: LD_INT 0
52288: ST_TO_ADDR
// sBomb := false ;
52289: LD_ADDR_EXP 49
52293: PUSH
52294: LD_INT 0
52296: ST_TO_ADDR
// sWound := false ;
52297: LD_ADDR_EXP 57
52301: PUSH
52302: LD_INT 0
52304: ST_TO_ADDR
// sBetray := false ;
52305: LD_ADDR_EXP 61
52309: PUSH
52310: LD_INT 0
52312: ST_TO_ADDR
// sContamin := false ;
52313: LD_ADDR_EXP 62
52317: PUSH
52318: LD_INT 0
52320: ST_TO_ADDR
// sOil := false ;
52321: LD_ADDR_EXP 64
52325: PUSH
52326: LD_INT 0
52328: ST_TO_ADDR
// sStu := false ;
52329: LD_ADDR_EXP 68
52333: PUSH
52334: LD_INT 0
52336: ST_TO_ADDR
// sBazooka := false ;
52337: LD_ADDR_EXP 71
52341: PUSH
52342: LD_INT 0
52344: ST_TO_ADDR
// sMortar := false ;
52345: LD_ADDR_EXP 72
52349: PUSH
52350: LD_INT 0
52352: ST_TO_ADDR
// sRanger := false ;
52353: LD_ADDR_EXP 82
52357: PUSH
52358: LD_INT 0
52360: ST_TO_ADDR
// sComputer := false ;
52361: LD_ADDR_EXP 83
52365: PUSH
52366: LD_INT 0
52368: ST_TO_ADDR
// s30 := false ;
52369: LD_ADDR_EXP 84
52373: PUSH
52374: LD_INT 0
52376: ST_TO_ADDR
// s60 := false ;
52377: LD_ADDR_EXP 85
52381: PUSH
52382: LD_INT 0
52384: ST_TO_ADDR
// end ;
52385: LD_VAR 0 1
52389: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
52390: LD_INT 0
52392: PPUSH
52393: PPUSH
52394: PPUSH
52395: PPUSH
52396: PPUSH
52397: PPUSH
52398: PPUSH
// result := [ ] ;
52399: LD_ADDR_VAR 0 2
52403: PUSH
52404: EMPTY
52405: ST_TO_ADDR
// if campaign_id = 1 then
52406: LD_OWVAR 69
52410: PUSH
52411: LD_INT 1
52413: EQUAL
52414: IFFALSE 55580
// begin case mission_number of 1 :
52416: LD_OWVAR 70
52420: PUSH
52421: LD_INT 1
52423: DOUBLE
52424: EQUAL
52425: IFTRUE 52429
52427: GO 52505
52429: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
52430: LD_ADDR_VAR 0 2
52434: PUSH
52435: LD_INT 2
52437: PUSH
52438: LD_INT 4
52440: PUSH
52441: LD_INT 11
52443: PUSH
52444: LD_INT 12
52446: PUSH
52447: LD_INT 15
52449: PUSH
52450: LD_INT 16
52452: PUSH
52453: LD_INT 22
52455: PUSH
52456: LD_INT 23
52458: PUSH
52459: LD_INT 26
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 101
52475: PUSH
52476: LD_INT 102
52478: PUSH
52479: LD_INT 106
52481: PUSH
52482: LD_INT 116
52484: PUSH
52485: LD_INT 117
52487: PUSH
52488: LD_INT 118
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: ST_TO_ADDR
52503: GO 55578
52505: LD_INT 2
52507: DOUBLE
52508: EQUAL
52509: IFTRUE 52513
52511: GO 52597
52513: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
52514: LD_ADDR_VAR 0 2
52518: PUSH
52519: LD_INT 2
52521: PUSH
52522: LD_INT 4
52524: PUSH
52525: LD_INT 11
52527: PUSH
52528: LD_INT 12
52530: PUSH
52531: LD_INT 15
52533: PUSH
52534: LD_INT 16
52536: PUSH
52537: LD_INT 22
52539: PUSH
52540: LD_INT 23
52542: PUSH
52543: LD_INT 26
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 101
52559: PUSH
52560: LD_INT 102
52562: PUSH
52563: LD_INT 105
52565: PUSH
52566: LD_INT 106
52568: PUSH
52569: LD_INT 108
52571: PUSH
52572: LD_INT 116
52574: PUSH
52575: LD_INT 117
52577: PUSH
52578: LD_INT 118
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: ST_TO_ADDR
52595: GO 55578
52597: LD_INT 3
52599: DOUBLE
52600: EQUAL
52601: IFTRUE 52605
52603: GO 52693
52605: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
52606: LD_ADDR_VAR 0 2
52610: PUSH
52611: LD_INT 2
52613: PUSH
52614: LD_INT 4
52616: PUSH
52617: LD_INT 5
52619: PUSH
52620: LD_INT 11
52622: PUSH
52623: LD_INT 12
52625: PUSH
52626: LD_INT 15
52628: PUSH
52629: LD_INT 16
52631: PUSH
52632: LD_INT 22
52634: PUSH
52635: LD_INT 26
52637: PUSH
52638: LD_INT 36
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 101
52655: PUSH
52656: LD_INT 102
52658: PUSH
52659: LD_INT 105
52661: PUSH
52662: LD_INT 106
52664: PUSH
52665: LD_INT 108
52667: PUSH
52668: LD_INT 116
52670: PUSH
52671: LD_INT 117
52673: PUSH
52674: LD_INT 118
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: ST_TO_ADDR
52691: GO 55578
52693: LD_INT 4
52695: DOUBLE
52696: EQUAL
52697: IFTRUE 52701
52699: GO 52797
52701: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
52702: LD_ADDR_VAR 0 2
52706: PUSH
52707: LD_INT 2
52709: PUSH
52710: LD_INT 4
52712: PUSH
52713: LD_INT 5
52715: PUSH
52716: LD_INT 8
52718: PUSH
52719: LD_INT 11
52721: PUSH
52722: LD_INT 12
52724: PUSH
52725: LD_INT 15
52727: PUSH
52728: LD_INT 16
52730: PUSH
52731: LD_INT 22
52733: PUSH
52734: LD_INT 23
52736: PUSH
52737: LD_INT 26
52739: PUSH
52740: LD_INT 36
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 101
52759: PUSH
52760: LD_INT 102
52762: PUSH
52763: LD_INT 105
52765: PUSH
52766: LD_INT 106
52768: PUSH
52769: LD_INT 108
52771: PUSH
52772: LD_INT 116
52774: PUSH
52775: LD_INT 117
52777: PUSH
52778: LD_INT 118
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: ST_TO_ADDR
52795: GO 55578
52797: LD_INT 5
52799: DOUBLE
52800: EQUAL
52801: IFTRUE 52805
52803: GO 52917
52805: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
52806: LD_ADDR_VAR 0 2
52810: PUSH
52811: LD_INT 2
52813: PUSH
52814: LD_INT 4
52816: PUSH
52817: LD_INT 5
52819: PUSH
52820: LD_INT 6
52822: PUSH
52823: LD_INT 8
52825: PUSH
52826: LD_INT 11
52828: PUSH
52829: LD_INT 12
52831: PUSH
52832: LD_INT 15
52834: PUSH
52835: LD_INT 16
52837: PUSH
52838: LD_INT 22
52840: PUSH
52841: LD_INT 23
52843: PUSH
52844: LD_INT 25
52846: PUSH
52847: LD_INT 26
52849: PUSH
52850: LD_INT 36
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 101
52871: PUSH
52872: LD_INT 102
52874: PUSH
52875: LD_INT 105
52877: PUSH
52878: LD_INT 106
52880: PUSH
52881: LD_INT 108
52883: PUSH
52884: LD_INT 109
52886: PUSH
52887: LD_INT 112
52889: PUSH
52890: LD_INT 116
52892: PUSH
52893: LD_INT 117
52895: PUSH
52896: LD_INT 118
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: ST_TO_ADDR
52915: GO 55578
52917: LD_INT 6
52919: DOUBLE
52920: EQUAL
52921: IFTRUE 52925
52923: GO 53057
52925: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
52926: LD_ADDR_VAR 0 2
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: LD_INT 4
52936: PUSH
52937: LD_INT 5
52939: PUSH
52940: LD_INT 6
52942: PUSH
52943: LD_INT 8
52945: PUSH
52946: LD_INT 11
52948: PUSH
52949: LD_INT 12
52951: PUSH
52952: LD_INT 15
52954: PUSH
52955: LD_INT 16
52957: PUSH
52958: LD_INT 20
52960: PUSH
52961: LD_INT 21
52963: PUSH
52964: LD_INT 22
52966: PUSH
52967: LD_INT 23
52969: PUSH
52970: LD_INT 25
52972: PUSH
52973: LD_INT 26
52975: PUSH
52976: LD_INT 30
52978: PUSH
52979: LD_INT 31
52981: PUSH
52982: LD_INT 32
52984: PUSH
52985: LD_INT 36
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 101
53011: PUSH
53012: LD_INT 102
53014: PUSH
53015: LD_INT 105
53017: PUSH
53018: LD_INT 106
53020: PUSH
53021: LD_INT 108
53023: PUSH
53024: LD_INT 109
53026: PUSH
53027: LD_INT 112
53029: PUSH
53030: LD_INT 116
53032: PUSH
53033: LD_INT 117
53035: PUSH
53036: LD_INT 118
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: ST_TO_ADDR
53055: GO 55578
53057: LD_INT 7
53059: DOUBLE
53060: EQUAL
53061: IFTRUE 53065
53063: GO 53177
53065: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
53066: LD_ADDR_VAR 0 2
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: LD_INT 4
53076: PUSH
53077: LD_INT 5
53079: PUSH
53080: LD_INT 7
53082: PUSH
53083: LD_INT 11
53085: PUSH
53086: LD_INT 12
53088: PUSH
53089: LD_INT 15
53091: PUSH
53092: LD_INT 16
53094: PUSH
53095: LD_INT 20
53097: PUSH
53098: LD_INT 21
53100: PUSH
53101: LD_INT 22
53103: PUSH
53104: LD_INT 23
53106: PUSH
53107: LD_INT 25
53109: PUSH
53110: LD_INT 26
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 101
53131: PUSH
53132: LD_INT 102
53134: PUSH
53135: LD_INT 103
53137: PUSH
53138: LD_INT 105
53140: PUSH
53141: LD_INT 106
53143: PUSH
53144: LD_INT 108
53146: PUSH
53147: LD_INT 112
53149: PUSH
53150: LD_INT 116
53152: PUSH
53153: LD_INT 117
53155: PUSH
53156: LD_INT 118
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: ST_TO_ADDR
53175: GO 55578
53177: LD_INT 8
53179: DOUBLE
53180: EQUAL
53181: IFTRUE 53185
53183: GO 53325
53185: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
53186: LD_ADDR_VAR 0 2
53190: PUSH
53191: LD_INT 2
53193: PUSH
53194: LD_INT 4
53196: PUSH
53197: LD_INT 5
53199: PUSH
53200: LD_INT 6
53202: PUSH
53203: LD_INT 7
53205: PUSH
53206: LD_INT 8
53208: PUSH
53209: LD_INT 11
53211: PUSH
53212: LD_INT 12
53214: PUSH
53215: LD_INT 15
53217: PUSH
53218: LD_INT 16
53220: PUSH
53221: LD_INT 20
53223: PUSH
53224: LD_INT 21
53226: PUSH
53227: LD_INT 22
53229: PUSH
53230: LD_INT 23
53232: PUSH
53233: LD_INT 25
53235: PUSH
53236: LD_INT 26
53238: PUSH
53239: LD_INT 30
53241: PUSH
53242: LD_INT 31
53244: PUSH
53245: LD_INT 32
53247: PUSH
53248: LD_INT 36
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 101
53275: PUSH
53276: LD_INT 102
53278: PUSH
53279: LD_INT 103
53281: PUSH
53282: LD_INT 105
53284: PUSH
53285: LD_INT 106
53287: PUSH
53288: LD_INT 108
53290: PUSH
53291: LD_INT 109
53293: PUSH
53294: LD_INT 112
53296: PUSH
53297: LD_INT 116
53299: PUSH
53300: LD_INT 117
53302: PUSH
53303: LD_INT 118
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: ST_TO_ADDR
53323: GO 55578
53325: LD_INT 9
53327: DOUBLE
53328: EQUAL
53329: IFTRUE 53333
53331: GO 53481
53333: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
53334: LD_ADDR_VAR 0 2
53338: PUSH
53339: LD_INT 2
53341: PUSH
53342: LD_INT 4
53344: PUSH
53345: LD_INT 5
53347: PUSH
53348: LD_INT 6
53350: PUSH
53351: LD_INT 7
53353: PUSH
53354: LD_INT 8
53356: PUSH
53357: LD_INT 11
53359: PUSH
53360: LD_INT 12
53362: PUSH
53363: LD_INT 15
53365: PUSH
53366: LD_INT 16
53368: PUSH
53369: LD_INT 20
53371: PUSH
53372: LD_INT 21
53374: PUSH
53375: LD_INT 22
53377: PUSH
53378: LD_INT 23
53380: PUSH
53381: LD_INT 25
53383: PUSH
53384: LD_INT 26
53386: PUSH
53387: LD_INT 28
53389: PUSH
53390: LD_INT 30
53392: PUSH
53393: LD_INT 31
53395: PUSH
53396: LD_INT 32
53398: PUSH
53399: LD_INT 36
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 101
53427: PUSH
53428: LD_INT 102
53430: PUSH
53431: LD_INT 103
53433: PUSH
53434: LD_INT 105
53436: PUSH
53437: LD_INT 106
53439: PUSH
53440: LD_INT 108
53442: PUSH
53443: LD_INT 109
53445: PUSH
53446: LD_INT 112
53448: PUSH
53449: LD_INT 114
53451: PUSH
53452: LD_INT 116
53454: PUSH
53455: LD_INT 117
53457: PUSH
53458: LD_INT 118
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: ST_TO_ADDR
53479: GO 55578
53481: LD_INT 10
53483: DOUBLE
53484: EQUAL
53485: IFTRUE 53489
53487: GO 53685
53489: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
53490: LD_ADDR_VAR 0 2
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: LD_INT 4
53500: PUSH
53501: LD_INT 5
53503: PUSH
53504: LD_INT 6
53506: PUSH
53507: LD_INT 7
53509: PUSH
53510: LD_INT 8
53512: PUSH
53513: LD_INT 9
53515: PUSH
53516: LD_INT 10
53518: PUSH
53519: LD_INT 11
53521: PUSH
53522: LD_INT 12
53524: PUSH
53525: LD_INT 13
53527: PUSH
53528: LD_INT 14
53530: PUSH
53531: LD_INT 15
53533: PUSH
53534: LD_INT 16
53536: PUSH
53537: LD_INT 17
53539: PUSH
53540: LD_INT 18
53542: PUSH
53543: LD_INT 19
53545: PUSH
53546: LD_INT 20
53548: PUSH
53549: LD_INT 21
53551: PUSH
53552: LD_INT 22
53554: PUSH
53555: LD_INT 23
53557: PUSH
53558: LD_INT 24
53560: PUSH
53561: LD_INT 25
53563: PUSH
53564: LD_INT 26
53566: PUSH
53567: LD_INT 28
53569: PUSH
53570: LD_INT 30
53572: PUSH
53573: LD_INT 31
53575: PUSH
53576: LD_INT 32
53578: PUSH
53579: LD_INT 36
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 101
53615: PUSH
53616: LD_INT 102
53618: PUSH
53619: LD_INT 103
53621: PUSH
53622: LD_INT 104
53624: PUSH
53625: LD_INT 105
53627: PUSH
53628: LD_INT 106
53630: PUSH
53631: LD_INT 107
53633: PUSH
53634: LD_INT 108
53636: PUSH
53637: LD_INT 109
53639: PUSH
53640: LD_INT 110
53642: PUSH
53643: LD_INT 111
53645: PUSH
53646: LD_INT 112
53648: PUSH
53649: LD_INT 114
53651: PUSH
53652: LD_INT 116
53654: PUSH
53655: LD_INT 117
53657: PUSH
53658: LD_INT 118
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: ST_TO_ADDR
53683: GO 55578
53685: LD_INT 11
53687: DOUBLE
53688: EQUAL
53689: IFTRUE 53693
53691: GO 53897
53693: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
53694: LD_ADDR_VAR 0 2
53698: PUSH
53699: LD_INT 2
53701: PUSH
53702: LD_INT 3
53704: PUSH
53705: LD_INT 4
53707: PUSH
53708: LD_INT 5
53710: PUSH
53711: LD_INT 6
53713: PUSH
53714: LD_INT 7
53716: PUSH
53717: LD_INT 8
53719: PUSH
53720: LD_INT 9
53722: PUSH
53723: LD_INT 10
53725: PUSH
53726: LD_INT 11
53728: PUSH
53729: LD_INT 12
53731: PUSH
53732: LD_INT 13
53734: PUSH
53735: LD_INT 14
53737: PUSH
53738: LD_INT 15
53740: PUSH
53741: LD_INT 16
53743: PUSH
53744: LD_INT 17
53746: PUSH
53747: LD_INT 18
53749: PUSH
53750: LD_INT 19
53752: PUSH
53753: LD_INT 20
53755: PUSH
53756: LD_INT 21
53758: PUSH
53759: LD_INT 22
53761: PUSH
53762: LD_INT 23
53764: PUSH
53765: LD_INT 24
53767: PUSH
53768: LD_INT 25
53770: PUSH
53771: LD_INT 26
53773: PUSH
53774: LD_INT 28
53776: PUSH
53777: LD_INT 30
53779: PUSH
53780: LD_INT 31
53782: PUSH
53783: LD_INT 32
53785: PUSH
53786: LD_INT 34
53788: PUSH
53789: LD_INT 36
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 101
53827: PUSH
53828: LD_INT 102
53830: PUSH
53831: LD_INT 103
53833: PUSH
53834: LD_INT 104
53836: PUSH
53837: LD_INT 105
53839: PUSH
53840: LD_INT 106
53842: PUSH
53843: LD_INT 107
53845: PUSH
53846: LD_INT 108
53848: PUSH
53849: LD_INT 109
53851: PUSH
53852: LD_INT 110
53854: PUSH
53855: LD_INT 111
53857: PUSH
53858: LD_INT 112
53860: PUSH
53861: LD_INT 114
53863: PUSH
53864: LD_INT 116
53866: PUSH
53867: LD_INT 117
53869: PUSH
53870: LD_INT 118
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: ST_TO_ADDR
53895: GO 55578
53897: LD_INT 12
53899: DOUBLE
53900: EQUAL
53901: IFTRUE 53905
53903: GO 54125
53905: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
53906: LD_ADDR_VAR 0 2
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: LD_INT 3
53919: PUSH
53920: LD_INT 4
53922: PUSH
53923: LD_INT 5
53925: PUSH
53926: LD_INT 6
53928: PUSH
53929: LD_INT 7
53931: PUSH
53932: LD_INT 8
53934: PUSH
53935: LD_INT 9
53937: PUSH
53938: LD_INT 10
53940: PUSH
53941: LD_INT 11
53943: PUSH
53944: LD_INT 12
53946: PUSH
53947: LD_INT 13
53949: PUSH
53950: LD_INT 14
53952: PUSH
53953: LD_INT 15
53955: PUSH
53956: LD_INT 16
53958: PUSH
53959: LD_INT 17
53961: PUSH
53962: LD_INT 18
53964: PUSH
53965: LD_INT 19
53967: PUSH
53968: LD_INT 20
53970: PUSH
53971: LD_INT 21
53973: PUSH
53974: LD_INT 22
53976: PUSH
53977: LD_INT 23
53979: PUSH
53980: LD_INT 24
53982: PUSH
53983: LD_INT 25
53985: PUSH
53986: LD_INT 26
53988: PUSH
53989: LD_INT 27
53991: PUSH
53992: LD_INT 28
53994: PUSH
53995: LD_INT 30
53997: PUSH
53998: LD_INT 31
54000: PUSH
54001: LD_INT 32
54003: PUSH
54004: LD_INT 33
54006: PUSH
54007: LD_INT 34
54009: PUSH
54010: LD_INT 36
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 101
54051: PUSH
54052: LD_INT 102
54054: PUSH
54055: LD_INT 103
54057: PUSH
54058: LD_INT 104
54060: PUSH
54061: LD_INT 105
54063: PUSH
54064: LD_INT 106
54066: PUSH
54067: LD_INT 107
54069: PUSH
54070: LD_INT 108
54072: PUSH
54073: LD_INT 109
54075: PUSH
54076: LD_INT 110
54078: PUSH
54079: LD_INT 111
54081: PUSH
54082: LD_INT 112
54084: PUSH
54085: LD_INT 113
54087: PUSH
54088: LD_INT 114
54090: PUSH
54091: LD_INT 116
54093: PUSH
54094: LD_INT 117
54096: PUSH
54097: LD_INT 118
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: ST_TO_ADDR
54123: GO 55578
54125: LD_INT 13
54127: DOUBLE
54128: EQUAL
54129: IFTRUE 54133
54131: GO 54341
54133: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
54134: LD_ADDR_VAR 0 2
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: LD_INT 2
54144: PUSH
54145: LD_INT 3
54147: PUSH
54148: LD_INT 4
54150: PUSH
54151: LD_INT 5
54153: PUSH
54154: LD_INT 8
54156: PUSH
54157: LD_INT 9
54159: PUSH
54160: LD_INT 10
54162: PUSH
54163: LD_INT 11
54165: PUSH
54166: LD_INT 12
54168: PUSH
54169: LD_INT 14
54171: PUSH
54172: LD_INT 15
54174: PUSH
54175: LD_INT 16
54177: PUSH
54178: LD_INT 17
54180: PUSH
54181: LD_INT 18
54183: PUSH
54184: LD_INT 19
54186: PUSH
54187: LD_INT 20
54189: PUSH
54190: LD_INT 21
54192: PUSH
54193: LD_INT 22
54195: PUSH
54196: LD_INT 23
54198: PUSH
54199: LD_INT 24
54201: PUSH
54202: LD_INT 25
54204: PUSH
54205: LD_INT 26
54207: PUSH
54208: LD_INT 27
54210: PUSH
54211: LD_INT 28
54213: PUSH
54214: LD_INT 30
54216: PUSH
54217: LD_INT 31
54219: PUSH
54220: LD_INT 32
54222: PUSH
54223: LD_INT 33
54225: PUSH
54226: LD_INT 34
54228: PUSH
54229: LD_INT 36
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 101
54267: PUSH
54268: LD_INT 102
54270: PUSH
54271: LD_INT 103
54273: PUSH
54274: LD_INT 104
54276: PUSH
54277: LD_INT 105
54279: PUSH
54280: LD_INT 106
54282: PUSH
54283: LD_INT 107
54285: PUSH
54286: LD_INT 108
54288: PUSH
54289: LD_INT 109
54291: PUSH
54292: LD_INT 110
54294: PUSH
54295: LD_INT 111
54297: PUSH
54298: LD_INT 112
54300: PUSH
54301: LD_INT 113
54303: PUSH
54304: LD_INT 114
54306: PUSH
54307: LD_INT 116
54309: PUSH
54310: LD_INT 117
54312: PUSH
54313: LD_INT 118
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: ST_TO_ADDR
54339: GO 55578
54341: LD_INT 14
54343: DOUBLE
54344: EQUAL
54345: IFTRUE 54349
54347: GO 54573
54349: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
54350: LD_ADDR_VAR 0 2
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: LD_INT 2
54360: PUSH
54361: LD_INT 3
54363: PUSH
54364: LD_INT 4
54366: PUSH
54367: LD_INT 5
54369: PUSH
54370: LD_INT 6
54372: PUSH
54373: LD_INT 7
54375: PUSH
54376: LD_INT 8
54378: PUSH
54379: LD_INT 9
54381: PUSH
54382: LD_INT 10
54384: PUSH
54385: LD_INT 11
54387: PUSH
54388: LD_INT 12
54390: PUSH
54391: LD_INT 13
54393: PUSH
54394: LD_INT 14
54396: PUSH
54397: LD_INT 15
54399: PUSH
54400: LD_INT 16
54402: PUSH
54403: LD_INT 17
54405: PUSH
54406: LD_INT 18
54408: PUSH
54409: LD_INT 19
54411: PUSH
54412: LD_INT 20
54414: PUSH
54415: LD_INT 21
54417: PUSH
54418: LD_INT 22
54420: PUSH
54421: LD_INT 23
54423: PUSH
54424: LD_INT 24
54426: PUSH
54427: LD_INT 25
54429: PUSH
54430: LD_INT 26
54432: PUSH
54433: LD_INT 27
54435: PUSH
54436: LD_INT 28
54438: PUSH
54439: LD_INT 29
54441: PUSH
54442: LD_INT 30
54444: PUSH
54445: LD_INT 31
54447: PUSH
54448: LD_INT 32
54450: PUSH
54451: LD_INT 33
54453: PUSH
54454: LD_INT 34
54456: PUSH
54457: LD_INT 36
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 101
54499: PUSH
54500: LD_INT 102
54502: PUSH
54503: LD_INT 103
54505: PUSH
54506: LD_INT 104
54508: PUSH
54509: LD_INT 105
54511: PUSH
54512: LD_INT 106
54514: PUSH
54515: LD_INT 107
54517: PUSH
54518: LD_INT 108
54520: PUSH
54521: LD_INT 109
54523: PUSH
54524: LD_INT 110
54526: PUSH
54527: LD_INT 111
54529: PUSH
54530: LD_INT 112
54532: PUSH
54533: LD_INT 113
54535: PUSH
54536: LD_INT 114
54538: PUSH
54539: LD_INT 116
54541: PUSH
54542: LD_INT 117
54544: PUSH
54545: LD_INT 118
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: ST_TO_ADDR
54571: GO 55578
54573: LD_INT 15
54575: DOUBLE
54576: EQUAL
54577: IFTRUE 54581
54579: GO 54805
54581: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
54582: LD_ADDR_VAR 0 2
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: LD_INT 3
54595: PUSH
54596: LD_INT 4
54598: PUSH
54599: LD_INT 5
54601: PUSH
54602: LD_INT 6
54604: PUSH
54605: LD_INT 7
54607: PUSH
54608: LD_INT 8
54610: PUSH
54611: LD_INT 9
54613: PUSH
54614: LD_INT 10
54616: PUSH
54617: LD_INT 11
54619: PUSH
54620: LD_INT 12
54622: PUSH
54623: LD_INT 13
54625: PUSH
54626: LD_INT 14
54628: PUSH
54629: LD_INT 15
54631: PUSH
54632: LD_INT 16
54634: PUSH
54635: LD_INT 17
54637: PUSH
54638: LD_INT 18
54640: PUSH
54641: LD_INT 19
54643: PUSH
54644: LD_INT 20
54646: PUSH
54647: LD_INT 21
54649: PUSH
54650: LD_INT 22
54652: PUSH
54653: LD_INT 23
54655: PUSH
54656: LD_INT 24
54658: PUSH
54659: LD_INT 25
54661: PUSH
54662: LD_INT 26
54664: PUSH
54665: LD_INT 27
54667: PUSH
54668: LD_INT 28
54670: PUSH
54671: LD_INT 29
54673: PUSH
54674: LD_INT 30
54676: PUSH
54677: LD_INT 31
54679: PUSH
54680: LD_INT 32
54682: PUSH
54683: LD_INT 33
54685: PUSH
54686: LD_INT 34
54688: PUSH
54689: LD_INT 36
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 101
54731: PUSH
54732: LD_INT 102
54734: PUSH
54735: LD_INT 103
54737: PUSH
54738: LD_INT 104
54740: PUSH
54741: LD_INT 105
54743: PUSH
54744: LD_INT 106
54746: PUSH
54747: LD_INT 107
54749: PUSH
54750: LD_INT 108
54752: PUSH
54753: LD_INT 109
54755: PUSH
54756: LD_INT 110
54758: PUSH
54759: LD_INT 111
54761: PUSH
54762: LD_INT 112
54764: PUSH
54765: LD_INT 113
54767: PUSH
54768: LD_INT 114
54770: PUSH
54771: LD_INT 116
54773: PUSH
54774: LD_INT 117
54776: PUSH
54777: LD_INT 118
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: ST_TO_ADDR
54803: GO 55578
54805: LD_INT 16
54807: DOUBLE
54808: EQUAL
54809: IFTRUE 54813
54811: GO 54949
54813: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
54814: LD_ADDR_VAR 0 2
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: LD_INT 4
54824: PUSH
54825: LD_INT 5
54827: PUSH
54828: LD_INT 7
54830: PUSH
54831: LD_INT 11
54833: PUSH
54834: LD_INT 12
54836: PUSH
54837: LD_INT 15
54839: PUSH
54840: LD_INT 16
54842: PUSH
54843: LD_INT 20
54845: PUSH
54846: LD_INT 21
54848: PUSH
54849: LD_INT 22
54851: PUSH
54852: LD_INT 23
54854: PUSH
54855: LD_INT 25
54857: PUSH
54858: LD_INT 26
54860: PUSH
54861: LD_INT 30
54863: PUSH
54864: LD_INT 31
54866: PUSH
54867: LD_INT 32
54869: PUSH
54870: LD_INT 33
54872: PUSH
54873: LD_INT 34
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 101
54899: PUSH
54900: LD_INT 102
54902: PUSH
54903: LD_INT 103
54905: PUSH
54906: LD_INT 106
54908: PUSH
54909: LD_INT 108
54911: PUSH
54912: LD_INT 112
54914: PUSH
54915: LD_INT 113
54917: PUSH
54918: LD_INT 114
54920: PUSH
54921: LD_INT 116
54923: PUSH
54924: LD_INT 117
54926: PUSH
54927: LD_INT 118
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: ST_TO_ADDR
54947: GO 55578
54949: LD_INT 17
54951: DOUBLE
54952: EQUAL
54953: IFTRUE 54957
54955: GO 55181
54957: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
54958: LD_ADDR_VAR 0 2
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: LD_INT 3
54971: PUSH
54972: LD_INT 4
54974: PUSH
54975: LD_INT 5
54977: PUSH
54978: LD_INT 6
54980: PUSH
54981: LD_INT 7
54983: PUSH
54984: LD_INT 8
54986: PUSH
54987: LD_INT 9
54989: PUSH
54990: LD_INT 10
54992: PUSH
54993: LD_INT 11
54995: PUSH
54996: LD_INT 12
54998: PUSH
54999: LD_INT 13
55001: PUSH
55002: LD_INT 14
55004: PUSH
55005: LD_INT 15
55007: PUSH
55008: LD_INT 16
55010: PUSH
55011: LD_INT 17
55013: PUSH
55014: LD_INT 18
55016: PUSH
55017: LD_INT 19
55019: PUSH
55020: LD_INT 20
55022: PUSH
55023: LD_INT 21
55025: PUSH
55026: LD_INT 22
55028: PUSH
55029: LD_INT 23
55031: PUSH
55032: LD_INT 24
55034: PUSH
55035: LD_INT 25
55037: PUSH
55038: LD_INT 26
55040: PUSH
55041: LD_INT 27
55043: PUSH
55044: LD_INT 28
55046: PUSH
55047: LD_INT 29
55049: PUSH
55050: LD_INT 30
55052: PUSH
55053: LD_INT 31
55055: PUSH
55056: LD_INT 32
55058: PUSH
55059: LD_INT 33
55061: PUSH
55062: LD_INT 34
55064: PUSH
55065: LD_INT 36
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 101
55107: PUSH
55108: LD_INT 102
55110: PUSH
55111: LD_INT 103
55113: PUSH
55114: LD_INT 104
55116: PUSH
55117: LD_INT 105
55119: PUSH
55120: LD_INT 106
55122: PUSH
55123: LD_INT 107
55125: PUSH
55126: LD_INT 108
55128: PUSH
55129: LD_INT 109
55131: PUSH
55132: LD_INT 110
55134: PUSH
55135: LD_INT 111
55137: PUSH
55138: LD_INT 112
55140: PUSH
55141: LD_INT 113
55143: PUSH
55144: LD_INT 114
55146: PUSH
55147: LD_INT 116
55149: PUSH
55150: LD_INT 117
55152: PUSH
55153: LD_INT 118
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: ST_TO_ADDR
55179: GO 55578
55181: LD_INT 18
55183: DOUBLE
55184: EQUAL
55185: IFTRUE 55189
55187: GO 55337
55189: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
55190: LD_ADDR_VAR 0 2
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: LD_INT 4
55200: PUSH
55201: LD_INT 5
55203: PUSH
55204: LD_INT 7
55206: PUSH
55207: LD_INT 11
55209: PUSH
55210: LD_INT 12
55212: PUSH
55213: LD_INT 15
55215: PUSH
55216: LD_INT 16
55218: PUSH
55219: LD_INT 20
55221: PUSH
55222: LD_INT 21
55224: PUSH
55225: LD_INT 22
55227: PUSH
55228: LD_INT 23
55230: PUSH
55231: LD_INT 25
55233: PUSH
55234: LD_INT 26
55236: PUSH
55237: LD_INT 30
55239: PUSH
55240: LD_INT 31
55242: PUSH
55243: LD_INT 32
55245: PUSH
55246: LD_INT 33
55248: PUSH
55249: LD_INT 34
55251: PUSH
55252: LD_INT 35
55254: PUSH
55255: LD_INT 36
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 101
55283: PUSH
55284: LD_INT 102
55286: PUSH
55287: LD_INT 103
55289: PUSH
55290: LD_INT 106
55292: PUSH
55293: LD_INT 108
55295: PUSH
55296: LD_INT 112
55298: PUSH
55299: LD_INT 113
55301: PUSH
55302: LD_INT 114
55304: PUSH
55305: LD_INT 115
55307: PUSH
55308: LD_INT 116
55310: PUSH
55311: LD_INT 117
55313: PUSH
55314: LD_INT 118
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: ST_TO_ADDR
55335: GO 55578
55337: LD_INT 19
55339: DOUBLE
55340: EQUAL
55341: IFTRUE 55345
55343: GO 55577
55345: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
55346: LD_ADDR_VAR 0 2
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: LD_INT 2
55356: PUSH
55357: LD_INT 3
55359: PUSH
55360: LD_INT 4
55362: PUSH
55363: LD_INT 5
55365: PUSH
55366: LD_INT 6
55368: PUSH
55369: LD_INT 7
55371: PUSH
55372: LD_INT 8
55374: PUSH
55375: LD_INT 9
55377: PUSH
55378: LD_INT 10
55380: PUSH
55381: LD_INT 11
55383: PUSH
55384: LD_INT 12
55386: PUSH
55387: LD_INT 13
55389: PUSH
55390: LD_INT 14
55392: PUSH
55393: LD_INT 15
55395: PUSH
55396: LD_INT 16
55398: PUSH
55399: LD_INT 17
55401: PUSH
55402: LD_INT 18
55404: PUSH
55405: LD_INT 19
55407: PUSH
55408: LD_INT 20
55410: PUSH
55411: LD_INT 21
55413: PUSH
55414: LD_INT 22
55416: PUSH
55417: LD_INT 23
55419: PUSH
55420: LD_INT 24
55422: PUSH
55423: LD_INT 25
55425: PUSH
55426: LD_INT 26
55428: PUSH
55429: LD_INT 27
55431: PUSH
55432: LD_INT 28
55434: PUSH
55435: LD_INT 29
55437: PUSH
55438: LD_INT 30
55440: PUSH
55441: LD_INT 31
55443: PUSH
55444: LD_INT 32
55446: PUSH
55447: LD_INT 33
55449: PUSH
55450: LD_INT 34
55452: PUSH
55453: LD_INT 35
55455: PUSH
55456: LD_INT 36
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 101
55499: PUSH
55500: LD_INT 102
55502: PUSH
55503: LD_INT 103
55505: PUSH
55506: LD_INT 104
55508: PUSH
55509: LD_INT 105
55511: PUSH
55512: LD_INT 106
55514: PUSH
55515: LD_INT 107
55517: PUSH
55518: LD_INT 108
55520: PUSH
55521: LD_INT 109
55523: PUSH
55524: LD_INT 110
55526: PUSH
55527: LD_INT 111
55529: PUSH
55530: LD_INT 112
55532: PUSH
55533: LD_INT 113
55535: PUSH
55536: LD_INT 114
55538: PUSH
55539: LD_INT 115
55541: PUSH
55542: LD_INT 116
55544: PUSH
55545: LD_INT 117
55547: PUSH
55548: LD_INT 118
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: ST_TO_ADDR
55575: GO 55578
55577: POP
// end else
55578: GO 55809
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
55580: LD_ADDR_VAR 0 2
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: LD_INT 2
55590: PUSH
55591: LD_INT 3
55593: PUSH
55594: LD_INT 4
55596: PUSH
55597: LD_INT 5
55599: PUSH
55600: LD_INT 6
55602: PUSH
55603: LD_INT 7
55605: PUSH
55606: LD_INT 8
55608: PUSH
55609: LD_INT 9
55611: PUSH
55612: LD_INT 10
55614: PUSH
55615: LD_INT 11
55617: PUSH
55618: LD_INT 12
55620: PUSH
55621: LD_INT 13
55623: PUSH
55624: LD_INT 14
55626: PUSH
55627: LD_INT 15
55629: PUSH
55630: LD_INT 16
55632: PUSH
55633: LD_INT 17
55635: PUSH
55636: LD_INT 18
55638: PUSH
55639: LD_INT 19
55641: PUSH
55642: LD_INT 20
55644: PUSH
55645: LD_INT 21
55647: PUSH
55648: LD_INT 22
55650: PUSH
55651: LD_INT 23
55653: PUSH
55654: LD_INT 24
55656: PUSH
55657: LD_INT 25
55659: PUSH
55660: LD_INT 26
55662: PUSH
55663: LD_INT 27
55665: PUSH
55666: LD_INT 28
55668: PUSH
55669: LD_INT 29
55671: PUSH
55672: LD_INT 30
55674: PUSH
55675: LD_INT 31
55677: PUSH
55678: LD_INT 32
55680: PUSH
55681: LD_INT 33
55683: PUSH
55684: LD_INT 34
55686: PUSH
55687: LD_INT 35
55689: PUSH
55690: LD_INT 36
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 101
55733: PUSH
55734: LD_INT 102
55736: PUSH
55737: LD_INT 103
55739: PUSH
55740: LD_INT 104
55742: PUSH
55743: LD_INT 105
55745: PUSH
55746: LD_INT 106
55748: PUSH
55749: LD_INT 107
55751: PUSH
55752: LD_INT 108
55754: PUSH
55755: LD_INT 109
55757: PUSH
55758: LD_INT 110
55760: PUSH
55761: LD_INT 111
55763: PUSH
55764: LD_INT 112
55766: PUSH
55767: LD_INT 113
55769: PUSH
55770: LD_INT 114
55772: PUSH
55773: LD_INT 115
55775: PUSH
55776: LD_INT 116
55778: PUSH
55779: LD_INT 117
55781: PUSH
55782: LD_INT 118
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: ST_TO_ADDR
// if result then
55809: LD_VAR 0 2
55813: IFFALSE 56599
// begin normal :=  ;
55815: LD_ADDR_VAR 0 5
55819: PUSH
55820: LD_STRING 
55822: ST_TO_ADDR
// hardcore :=  ;
55823: LD_ADDR_VAR 0 6
55827: PUSH
55828: LD_STRING 
55830: ST_TO_ADDR
// active :=  ;
55831: LD_ADDR_VAR 0 7
55835: PUSH
55836: LD_STRING 
55838: ST_TO_ADDR
// for i = 1 to normalCounter do
55839: LD_ADDR_VAR 0 8
55843: PUSH
55844: DOUBLE
55845: LD_INT 1
55847: DEC
55848: ST_TO_ADDR
55849: LD_EXP 30
55853: PUSH
55854: FOR_TO
55855: IFFALSE 55956
// begin tmp := 0 ;
55857: LD_ADDR_VAR 0 3
55861: PUSH
55862: LD_STRING 0
55864: ST_TO_ADDR
// if result [ 1 ] then
55865: LD_VAR 0 2
55869: PUSH
55870: LD_INT 1
55872: ARRAY
55873: IFFALSE 55938
// if result [ 1 ] [ 1 ] = i then
55875: LD_VAR 0 2
55879: PUSH
55880: LD_INT 1
55882: ARRAY
55883: PUSH
55884: LD_INT 1
55886: ARRAY
55887: PUSH
55888: LD_VAR 0 8
55892: EQUAL
55893: IFFALSE 55938
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
55895: LD_ADDR_VAR 0 2
55899: PUSH
55900: LD_VAR 0 2
55904: PPUSH
55905: LD_INT 1
55907: PPUSH
55908: LD_VAR 0 2
55912: PUSH
55913: LD_INT 1
55915: ARRAY
55916: PPUSH
55917: LD_INT 1
55919: PPUSH
55920: CALL_OW 3
55924: PPUSH
55925: CALL_OW 1
55929: ST_TO_ADDR
// tmp := 1 ;
55930: LD_ADDR_VAR 0 3
55934: PUSH
55935: LD_STRING 1
55937: ST_TO_ADDR
// end ; normal := normal & tmp ;
55938: LD_ADDR_VAR 0 5
55942: PUSH
55943: LD_VAR 0 5
55947: PUSH
55948: LD_VAR 0 3
55952: STR
55953: ST_TO_ADDR
// end ;
55954: GO 55854
55956: POP
55957: POP
// for i = 1 to hardcoreCounter do
55958: LD_ADDR_VAR 0 8
55962: PUSH
55963: DOUBLE
55964: LD_INT 1
55966: DEC
55967: ST_TO_ADDR
55968: LD_EXP 31
55972: PUSH
55973: FOR_TO
55974: IFFALSE 56079
// begin tmp := 0 ;
55976: LD_ADDR_VAR 0 3
55980: PUSH
55981: LD_STRING 0
55983: ST_TO_ADDR
// if result [ 2 ] then
55984: LD_VAR 0 2
55988: PUSH
55989: LD_INT 2
55991: ARRAY
55992: IFFALSE 56061
// if result [ 2 ] [ 1 ] = 100 + i then
55994: LD_VAR 0 2
55998: PUSH
55999: LD_INT 2
56001: ARRAY
56002: PUSH
56003: LD_INT 1
56005: ARRAY
56006: PUSH
56007: LD_INT 100
56009: PUSH
56010: LD_VAR 0 8
56014: PLUS
56015: EQUAL
56016: IFFALSE 56061
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
56018: LD_ADDR_VAR 0 2
56022: PUSH
56023: LD_VAR 0 2
56027: PPUSH
56028: LD_INT 2
56030: PPUSH
56031: LD_VAR 0 2
56035: PUSH
56036: LD_INT 2
56038: ARRAY
56039: PPUSH
56040: LD_INT 1
56042: PPUSH
56043: CALL_OW 3
56047: PPUSH
56048: CALL_OW 1
56052: ST_TO_ADDR
// tmp := 1 ;
56053: LD_ADDR_VAR 0 3
56057: PUSH
56058: LD_STRING 1
56060: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
56061: LD_ADDR_VAR 0 6
56065: PUSH
56066: LD_VAR 0 6
56070: PUSH
56071: LD_VAR 0 3
56075: STR
56076: ST_TO_ADDR
// end ;
56077: GO 55973
56079: POP
56080: POP
// if isGameLoad then
56081: LD_VAR 0 1
56085: IFFALSE 56560
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
56087: LD_ADDR_VAR 0 4
56091: PUSH
56092: LD_EXP 34
56096: PUSH
56097: LD_EXP 33
56101: PUSH
56102: LD_EXP 35
56106: PUSH
56107: LD_EXP 32
56111: PUSH
56112: LD_EXP 36
56116: PUSH
56117: LD_EXP 37
56121: PUSH
56122: LD_EXP 38
56126: PUSH
56127: LD_EXP 39
56131: PUSH
56132: LD_EXP 40
56136: PUSH
56137: LD_EXP 41
56141: PUSH
56142: LD_EXP 42
56146: PUSH
56147: LD_EXP 43
56151: PUSH
56152: LD_EXP 44
56156: PUSH
56157: LD_EXP 45
56161: PUSH
56162: LD_EXP 53
56166: PUSH
56167: LD_EXP 54
56171: PUSH
56172: LD_EXP 55
56176: PUSH
56177: LD_EXP 56
56181: PUSH
56182: LD_EXP 58
56186: PUSH
56187: LD_EXP 59
56191: PUSH
56192: LD_EXP 60
56196: PUSH
56197: LD_EXP 63
56201: PUSH
56202: LD_EXP 65
56206: PUSH
56207: LD_EXP 66
56211: PUSH
56212: LD_EXP 67
56216: PUSH
56217: LD_EXP 69
56221: PUSH
56222: LD_EXP 70
56226: PUSH
56227: LD_EXP 73
56231: PUSH
56232: LD_EXP 74
56236: PUSH
56237: LD_EXP 75
56241: PUSH
56242: LD_EXP 76
56246: PUSH
56247: LD_EXP 77
56251: PUSH
56252: LD_EXP 78
56256: PUSH
56257: LD_EXP 79
56261: PUSH
56262: LD_EXP 80
56266: PUSH
56267: LD_EXP 81
56271: PUSH
56272: LD_EXP 46
56276: PUSH
56277: LD_EXP 47
56281: PUSH
56282: LD_EXP 50
56286: PUSH
56287: LD_EXP 51
56291: PUSH
56292: LD_EXP 52
56296: PUSH
56297: LD_EXP 48
56301: PUSH
56302: LD_EXP 49
56306: PUSH
56307: LD_EXP 57
56311: PUSH
56312: LD_EXP 61
56316: PUSH
56317: LD_EXP 62
56321: PUSH
56322: LD_EXP 64
56326: PUSH
56327: LD_EXP 68
56331: PUSH
56332: LD_EXP 71
56336: PUSH
56337: LD_EXP 72
56341: PUSH
56342: LD_EXP 82
56346: PUSH
56347: LD_EXP 83
56351: PUSH
56352: LD_EXP 84
56356: PUSH
56357: LD_EXP 85
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: ST_TO_ADDR
// tmp :=  ;
56418: LD_ADDR_VAR 0 3
56422: PUSH
56423: LD_STRING 
56425: ST_TO_ADDR
// for i = 1 to normalCounter do
56426: LD_ADDR_VAR 0 8
56430: PUSH
56431: DOUBLE
56432: LD_INT 1
56434: DEC
56435: ST_TO_ADDR
56436: LD_EXP 30
56440: PUSH
56441: FOR_TO
56442: IFFALSE 56478
// begin if flags [ i ] then
56444: LD_VAR 0 4
56448: PUSH
56449: LD_VAR 0 8
56453: ARRAY
56454: IFFALSE 56476
// tmp := tmp & i & ; ;
56456: LD_ADDR_VAR 0 3
56460: PUSH
56461: LD_VAR 0 3
56465: PUSH
56466: LD_VAR 0 8
56470: STR
56471: PUSH
56472: LD_STRING ;
56474: STR
56475: ST_TO_ADDR
// end ;
56476: GO 56441
56478: POP
56479: POP
// for i = 1 to hardcoreCounter do
56480: LD_ADDR_VAR 0 8
56484: PUSH
56485: DOUBLE
56486: LD_INT 1
56488: DEC
56489: ST_TO_ADDR
56490: LD_EXP 31
56494: PUSH
56495: FOR_TO
56496: IFFALSE 56542
// begin if flags [ normalCounter + i ] then
56498: LD_VAR 0 4
56502: PUSH
56503: LD_EXP 30
56507: PUSH
56508: LD_VAR 0 8
56512: PLUS
56513: ARRAY
56514: IFFALSE 56540
// tmp := tmp & ( 100 + i ) & ; ;
56516: LD_ADDR_VAR 0 3
56520: PUSH
56521: LD_VAR 0 3
56525: PUSH
56526: LD_INT 100
56528: PUSH
56529: LD_VAR 0 8
56533: PLUS
56534: STR
56535: PUSH
56536: LD_STRING ;
56538: STR
56539: ST_TO_ADDR
// end ;
56540: GO 56495
56542: POP
56543: POP
// if tmp then
56544: LD_VAR 0 3
56548: IFFALSE 56560
// active := tmp ;
56550: LD_ADDR_VAR 0 7
56554: PUSH
56555: LD_VAR 0 3
56559: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56560: LD_STRING getStreamItemsFromMission("
56562: PUSH
56563: LD_VAR 0 5
56567: STR
56568: PUSH
56569: LD_STRING ","
56571: STR
56572: PUSH
56573: LD_VAR 0 6
56577: STR
56578: PUSH
56579: LD_STRING ","
56581: STR
56582: PUSH
56583: LD_VAR 0 7
56587: STR
56588: PUSH
56589: LD_STRING ")
56591: STR
56592: PPUSH
56593: CALL_OW 559
// end else
56597: GO 56606
// ToLua ( getStreamItemsFromMission("","","") ) ;
56599: LD_STRING getStreamItemsFromMission("","","")
56601: PPUSH
56602: CALL_OW 559
// end ;
56606: LD_VAR 0 2
56610: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
56611: LD_EXP 29
56615: PUSH
56616: LD_EXP 34
56620: AND
56621: IFFALSE 56745
56623: GO 56625
56625: DISABLE
56626: LD_INT 0
56628: PPUSH
56629: PPUSH
// begin enable ;
56630: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
56631: LD_ADDR_VAR 0 2
56635: PUSH
56636: LD_INT 22
56638: PUSH
56639: LD_OWVAR 2
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: LD_INT 34
56653: PUSH
56654: LD_INT 7
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 34
56663: PUSH
56664: LD_INT 45
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 34
56673: PUSH
56674: LD_INT 28
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 34
56683: PUSH
56684: LD_INT 47
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PPUSH
56702: CALL_OW 69
56706: ST_TO_ADDR
// if not tmp then
56707: LD_VAR 0 2
56711: NOT
56712: IFFALSE 56716
// exit ;
56714: GO 56745
// for i in tmp do
56716: LD_ADDR_VAR 0 1
56720: PUSH
56721: LD_VAR 0 2
56725: PUSH
56726: FOR_IN
56727: IFFALSE 56743
// begin SetLives ( i , 0 ) ;
56729: LD_VAR 0 1
56733: PPUSH
56734: LD_INT 0
56736: PPUSH
56737: CALL_OW 234
// end ;
56741: GO 56726
56743: POP
56744: POP
// end ;
56745: PPOPN 2
56747: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
56748: LD_EXP 29
56752: PUSH
56753: LD_EXP 35
56757: AND
56758: IFFALSE 56842
56760: GO 56762
56762: DISABLE
56763: LD_INT 0
56765: PPUSH
56766: PPUSH
// begin enable ;
56767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
56768: LD_ADDR_VAR 0 2
56772: PUSH
56773: LD_INT 22
56775: PUSH
56776: LD_OWVAR 2
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 32
56787: PUSH
56788: LD_INT 3
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PPUSH
56799: CALL_OW 69
56803: ST_TO_ADDR
// if not tmp then
56804: LD_VAR 0 2
56808: NOT
56809: IFFALSE 56813
// exit ;
56811: GO 56842
// for i in tmp do
56813: LD_ADDR_VAR 0 1
56817: PUSH
56818: LD_VAR 0 2
56822: PUSH
56823: FOR_IN
56824: IFFALSE 56840
// begin SetLives ( i , 0 ) ;
56826: LD_VAR 0 1
56830: PPUSH
56831: LD_INT 0
56833: PPUSH
56834: CALL_OW 234
// end ;
56838: GO 56823
56840: POP
56841: POP
// end ;
56842: PPOPN 2
56844: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
56845: LD_EXP 29
56849: PUSH
56850: LD_EXP 32
56854: AND
56855: IFFALSE 56948
56857: GO 56859
56859: DISABLE
56860: LD_INT 0
56862: PPUSH
// begin enable ;
56863: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
56864: LD_ADDR_VAR 0 1
56868: PUSH
56869: LD_INT 22
56871: PUSH
56872: LD_OWVAR 2
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: LD_INT 25
56886: PUSH
56887: LD_INT 5
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 25
56896: PUSH
56897: LD_INT 9
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 25
56906: PUSH
56907: LD_INT 8
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PPUSH
56924: CALL_OW 69
56928: PUSH
56929: FOR_IN
56930: IFFALSE 56946
// begin SetClass ( i , 1 ) ;
56932: LD_VAR 0 1
56936: PPUSH
56937: LD_INT 1
56939: PPUSH
56940: CALL_OW 336
// end ;
56944: GO 56929
56946: POP
56947: POP
// end ;
56948: PPOPN 1
56950: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
56951: LD_EXP 29
56955: PUSH
56956: LD_EXP 33
56960: AND
56961: PUSH
56962: LD_OWVAR 65
56966: PUSH
56967: LD_INT 7
56969: LESS
56970: AND
56971: IFFALSE 56985
56973: GO 56975
56975: DISABLE
// begin enable ;
56976: ENABLE
// game_speed := 7 ;
56977: LD_ADDR_OWVAR 65
56981: PUSH
56982: LD_INT 7
56984: ST_TO_ADDR
// end ;
56985: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
56986: LD_EXP 29
56990: PUSH
56991: LD_EXP 36
56995: AND
56996: IFFALSE 57198
56998: GO 57000
57000: DISABLE
57001: LD_INT 0
57003: PPUSH
57004: PPUSH
57005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57006: LD_ADDR_VAR 0 3
57010: PUSH
57011: LD_INT 81
57013: PUSH
57014: LD_OWVAR 2
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 21
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PPUSH
57037: CALL_OW 69
57041: ST_TO_ADDR
// if not tmp then
57042: LD_VAR 0 3
57046: NOT
57047: IFFALSE 57051
// exit ;
57049: GO 57198
// if tmp > 5 then
57051: LD_VAR 0 3
57055: PUSH
57056: LD_INT 5
57058: GREATER
57059: IFFALSE 57071
// k := 5 else
57061: LD_ADDR_VAR 0 2
57065: PUSH
57066: LD_INT 5
57068: ST_TO_ADDR
57069: GO 57081
// k := tmp ;
57071: LD_ADDR_VAR 0 2
57075: PUSH
57076: LD_VAR 0 3
57080: ST_TO_ADDR
// for i := 1 to k do
57081: LD_ADDR_VAR 0 1
57085: PUSH
57086: DOUBLE
57087: LD_INT 1
57089: DEC
57090: ST_TO_ADDR
57091: LD_VAR 0 2
57095: PUSH
57096: FOR_TO
57097: IFFALSE 57196
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
57099: LD_VAR 0 3
57103: PUSH
57104: LD_VAR 0 1
57108: ARRAY
57109: PPUSH
57110: LD_VAR 0 1
57114: PUSH
57115: LD_INT 4
57117: MOD
57118: PUSH
57119: LD_INT 1
57121: PLUS
57122: PPUSH
57123: CALL_OW 259
57127: PUSH
57128: LD_INT 10
57130: LESS
57131: IFFALSE 57194
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
57133: LD_VAR 0 3
57137: PUSH
57138: LD_VAR 0 1
57142: ARRAY
57143: PPUSH
57144: LD_VAR 0 1
57148: PUSH
57149: LD_INT 4
57151: MOD
57152: PUSH
57153: LD_INT 1
57155: PLUS
57156: PPUSH
57157: LD_VAR 0 3
57161: PUSH
57162: LD_VAR 0 1
57166: ARRAY
57167: PPUSH
57168: LD_VAR 0 1
57172: PUSH
57173: LD_INT 4
57175: MOD
57176: PUSH
57177: LD_INT 1
57179: PLUS
57180: PPUSH
57181: CALL_OW 259
57185: PUSH
57186: LD_INT 1
57188: PLUS
57189: PPUSH
57190: CALL_OW 237
57194: GO 57096
57196: POP
57197: POP
// end ;
57198: PPOPN 3
57200: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
57201: LD_EXP 29
57205: PUSH
57206: LD_EXP 37
57210: AND
57211: IFFALSE 57231
57213: GO 57215
57215: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
57216: LD_INT 4
57218: PPUSH
57219: LD_OWVAR 2
57223: PPUSH
57224: LD_INT 0
57226: PPUSH
57227: CALL_OW 324
57231: END
// every 0 0$1 trigger StreamModeActive and sShovel do
57232: LD_EXP 29
57236: PUSH
57237: LD_EXP 66
57241: AND
57242: IFFALSE 57262
57244: GO 57246
57246: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
57247: LD_INT 19
57249: PPUSH
57250: LD_OWVAR 2
57254: PPUSH
57255: LD_INT 0
57257: PPUSH
57258: CALL_OW 324
57262: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
57263: LD_EXP 29
57267: PUSH
57268: LD_EXP 38
57272: AND
57273: IFFALSE 57375
57275: GO 57277
57277: DISABLE
57278: LD_INT 0
57280: PPUSH
57281: PPUSH
// begin enable ;
57282: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
57283: LD_ADDR_VAR 0 2
57287: PUSH
57288: LD_INT 22
57290: PUSH
57291: LD_OWVAR 2
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: LD_INT 34
57305: PUSH
57306: LD_INT 11
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 34
57315: PUSH
57316: LD_INT 30
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: LIST
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PPUSH
57332: CALL_OW 69
57336: ST_TO_ADDR
// if not tmp then
57337: LD_VAR 0 2
57341: NOT
57342: IFFALSE 57346
// exit ;
57344: GO 57375
// for i in tmp do
57346: LD_ADDR_VAR 0 1
57350: PUSH
57351: LD_VAR 0 2
57355: PUSH
57356: FOR_IN
57357: IFFALSE 57373
// begin SetLives ( i , 0 ) ;
57359: LD_VAR 0 1
57363: PPUSH
57364: LD_INT 0
57366: PPUSH
57367: CALL_OW 234
// end ;
57371: GO 57356
57373: POP
57374: POP
// end ;
57375: PPOPN 2
57377: END
// every 0 0$1 trigger StreamModeActive and sBunker do
57378: LD_EXP 29
57382: PUSH
57383: LD_EXP 39
57387: AND
57388: IFFALSE 57408
57390: GO 57392
57392: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
57393: LD_INT 32
57395: PPUSH
57396: LD_OWVAR 2
57400: PPUSH
57401: LD_INT 0
57403: PPUSH
57404: CALL_OW 324
57408: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
57409: LD_EXP 29
57413: PUSH
57414: LD_EXP 40
57418: AND
57419: IFFALSE 57600
57421: GO 57423
57423: DISABLE
57424: LD_INT 0
57426: PPUSH
57427: PPUSH
57428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
57429: LD_ADDR_VAR 0 2
57433: PUSH
57434: LD_INT 22
57436: PUSH
57437: LD_OWVAR 2
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 33
57448: PUSH
57449: LD_INT 3
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PPUSH
57460: CALL_OW 69
57464: ST_TO_ADDR
// if not tmp then
57465: LD_VAR 0 2
57469: NOT
57470: IFFALSE 57474
// exit ;
57472: GO 57600
// side := 0 ;
57474: LD_ADDR_VAR 0 3
57478: PUSH
57479: LD_INT 0
57481: ST_TO_ADDR
// for i := 1 to 8 do
57482: LD_ADDR_VAR 0 1
57486: PUSH
57487: DOUBLE
57488: LD_INT 1
57490: DEC
57491: ST_TO_ADDR
57492: LD_INT 8
57494: PUSH
57495: FOR_TO
57496: IFFALSE 57544
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
57498: LD_OWVAR 2
57502: PUSH
57503: LD_VAR 0 1
57507: NONEQUAL
57508: PUSH
57509: LD_OWVAR 2
57513: PPUSH
57514: LD_VAR 0 1
57518: PPUSH
57519: CALL_OW 81
57523: PUSH
57524: LD_INT 2
57526: EQUAL
57527: AND
57528: IFFALSE 57542
// begin side := i ;
57530: LD_ADDR_VAR 0 3
57534: PUSH
57535: LD_VAR 0 1
57539: ST_TO_ADDR
// break ;
57540: GO 57544
// end ;
57542: GO 57495
57544: POP
57545: POP
// if not side then
57546: LD_VAR 0 3
57550: NOT
57551: IFFALSE 57555
// exit ;
57553: GO 57600
// for i := 1 to tmp do
57555: LD_ADDR_VAR 0 1
57559: PUSH
57560: DOUBLE
57561: LD_INT 1
57563: DEC
57564: ST_TO_ADDR
57565: LD_VAR 0 2
57569: PUSH
57570: FOR_TO
57571: IFFALSE 57598
// if Prob ( 60 ) then
57573: LD_INT 60
57575: PPUSH
57576: CALL_OW 13
57580: IFFALSE 57596
// SetSide ( i , side ) ;
57582: LD_VAR 0 1
57586: PPUSH
57587: LD_VAR 0 3
57591: PPUSH
57592: CALL_OW 235
57596: GO 57570
57598: POP
57599: POP
// end ;
57600: PPOPN 3
57602: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
57603: LD_EXP 29
57607: PUSH
57608: LD_EXP 42
57612: AND
57613: IFFALSE 57732
57615: GO 57617
57617: DISABLE
57618: LD_INT 0
57620: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
57621: LD_ADDR_VAR 0 1
57625: PUSH
57626: LD_INT 22
57628: PUSH
57629: LD_OWVAR 2
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 21
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 3
57650: PUSH
57651: LD_INT 23
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: LIST
57669: PPUSH
57670: CALL_OW 69
57674: PUSH
57675: FOR_IN
57676: IFFALSE 57730
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
57678: LD_VAR 0 1
57682: PPUSH
57683: CALL_OW 257
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: LD_INT 2
57693: PUSH
57694: LD_INT 3
57696: PUSH
57697: LD_INT 4
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: IN
57706: IFFALSE 57728
// SetClass ( un , rand ( 1 , 4 ) ) ;
57708: LD_VAR 0 1
57712: PPUSH
57713: LD_INT 1
57715: PPUSH
57716: LD_INT 4
57718: PPUSH
57719: CALL_OW 12
57723: PPUSH
57724: CALL_OW 336
57728: GO 57675
57730: POP
57731: POP
// end ;
57732: PPOPN 1
57734: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
57735: LD_EXP 29
57739: PUSH
57740: LD_EXP 41
57744: AND
57745: IFFALSE 57824
57747: GO 57749
57749: DISABLE
57750: LD_INT 0
57752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57753: LD_ADDR_VAR 0 1
57757: PUSH
57758: LD_INT 22
57760: PUSH
57761: LD_OWVAR 2
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 21
57772: PUSH
57773: LD_INT 3
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PPUSH
57784: CALL_OW 69
57788: ST_TO_ADDR
// if not tmp then
57789: LD_VAR 0 1
57793: NOT
57794: IFFALSE 57798
// exit ;
57796: GO 57824
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
57798: LD_VAR 0 1
57802: PUSH
57803: LD_INT 1
57805: PPUSH
57806: LD_VAR 0 1
57810: PPUSH
57811: CALL_OW 12
57815: ARRAY
57816: PPUSH
57817: LD_INT 100
57819: PPUSH
57820: CALL_OW 234
// end ;
57824: PPOPN 1
57826: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
57827: LD_EXP 29
57831: PUSH
57832: LD_EXP 43
57836: AND
57837: IFFALSE 57935
57839: GO 57841
57841: DISABLE
57842: LD_INT 0
57844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57845: LD_ADDR_VAR 0 1
57849: PUSH
57850: LD_INT 22
57852: PUSH
57853: LD_OWVAR 2
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 21
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PPUSH
57876: CALL_OW 69
57880: ST_TO_ADDR
// if not tmp then
57881: LD_VAR 0 1
57885: NOT
57886: IFFALSE 57890
// exit ;
57888: GO 57935
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
57890: LD_VAR 0 1
57894: PUSH
57895: LD_INT 1
57897: PPUSH
57898: LD_VAR 0 1
57902: PPUSH
57903: CALL_OW 12
57907: ARRAY
57908: PPUSH
57909: LD_INT 1
57911: PPUSH
57912: LD_INT 4
57914: PPUSH
57915: CALL_OW 12
57919: PPUSH
57920: LD_INT 3000
57922: PPUSH
57923: LD_INT 9000
57925: PPUSH
57926: CALL_OW 12
57930: PPUSH
57931: CALL_OW 492
// end ;
57935: PPOPN 1
57937: END
// every 0 0$1 trigger StreamModeActive and sDepot do
57938: LD_EXP 29
57942: PUSH
57943: LD_EXP 44
57947: AND
57948: IFFALSE 57968
57950: GO 57952
57952: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
57953: LD_INT 1
57955: PPUSH
57956: LD_OWVAR 2
57960: PPUSH
57961: LD_INT 0
57963: PPUSH
57964: CALL_OW 324
57968: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
57969: LD_EXP 29
57973: PUSH
57974: LD_EXP 45
57978: AND
57979: IFFALSE 58062
57981: GO 57983
57983: DISABLE
57984: LD_INT 0
57986: PPUSH
57987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57988: LD_ADDR_VAR 0 2
57992: PUSH
57993: LD_INT 22
57995: PUSH
57996: LD_OWVAR 2
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 21
58007: PUSH
58008: LD_INT 3
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PPUSH
58019: CALL_OW 69
58023: ST_TO_ADDR
// if not tmp then
58024: LD_VAR 0 2
58028: NOT
58029: IFFALSE 58033
// exit ;
58031: GO 58062
// for i in tmp do
58033: LD_ADDR_VAR 0 1
58037: PUSH
58038: LD_VAR 0 2
58042: PUSH
58043: FOR_IN
58044: IFFALSE 58060
// SetBLevel ( i , 10 ) ;
58046: LD_VAR 0 1
58050: PPUSH
58051: LD_INT 10
58053: PPUSH
58054: CALL_OW 241
58058: GO 58043
58060: POP
58061: POP
// end ;
58062: PPOPN 2
58064: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
58065: LD_EXP 29
58069: PUSH
58070: LD_EXP 46
58074: AND
58075: IFFALSE 58186
58077: GO 58079
58079: DISABLE
58080: LD_INT 0
58082: PPUSH
58083: PPUSH
58084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58085: LD_ADDR_VAR 0 3
58089: PUSH
58090: LD_INT 22
58092: PUSH
58093: LD_OWVAR 2
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 25
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PPUSH
58116: CALL_OW 69
58120: ST_TO_ADDR
// if not tmp then
58121: LD_VAR 0 3
58125: NOT
58126: IFFALSE 58130
// exit ;
58128: GO 58186
// un := tmp [ rand ( 1 , tmp ) ] ;
58130: LD_ADDR_VAR 0 2
58134: PUSH
58135: LD_VAR 0 3
58139: PUSH
58140: LD_INT 1
58142: PPUSH
58143: LD_VAR 0 3
58147: PPUSH
58148: CALL_OW 12
58152: ARRAY
58153: ST_TO_ADDR
// if Crawls ( un ) then
58154: LD_VAR 0 2
58158: PPUSH
58159: CALL_OW 318
58163: IFFALSE 58174
// ComWalk ( un ) ;
58165: LD_VAR 0 2
58169: PPUSH
58170: CALL_OW 138
// SetClass ( un , class_sniper ) ;
58174: LD_VAR 0 2
58178: PPUSH
58179: LD_INT 5
58181: PPUSH
58182: CALL_OW 336
// end ;
58186: PPOPN 3
58188: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
58189: LD_EXP 29
58193: PUSH
58194: LD_EXP 47
58198: AND
58199: PUSH
58200: LD_OWVAR 67
58204: PUSH
58205: LD_INT 4
58207: LESS
58208: AND
58209: IFFALSE 58228
58211: GO 58213
58213: DISABLE
// begin Difficulty := Difficulty + 1 ;
58214: LD_ADDR_OWVAR 67
58218: PUSH
58219: LD_OWVAR 67
58223: PUSH
58224: LD_INT 1
58226: PLUS
58227: ST_TO_ADDR
// end ;
58228: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
58229: LD_EXP 29
58233: PUSH
58234: LD_EXP 48
58238: AND
58239: IFFALSE 58342
58241: GO 58243
58243: DISABLE
58244: LD_INT 0
58246: PPUSH
// begin for i := 1 to 5 do
58247: LD_ADDR_VAR 0 1
58251: PUSH
58252: DOUBLE
58253: LD_INT 1
58255: DEC
58256: ST_TO_ADDR
58257: LD_INT 5
58259: PUSH
58260: FOR_TO
58261: IFFALSE 58340
// begin uc_nation := nation_nature ;
58263: LD_ADDR_OWVAR 21
58267: PUSH
58268: LD_INT 0
58270: ST_TO_ADDR
// uc_side := 0 ;
58271: LD_ADDR_OWVAR 20
58275: PUSH
58276: LD_INT 0
58278: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58279: LD_ADDR_OWVAR 29
58283: PUSH
58284: LD_INT 12
58286: PUSH
58287: LD_INT 12
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: ST_TO_ADDR
// hc_agressivity := 20 ;
58294: LD_ADDR_OWVAR 35
58298: PUSH
58299: LD_INT 20
58301: ST_TO_ADDR
// hc_class := class_tiger ;
58302: LD_ADDR_OWVAR 28
58306: PUSH
58307: LD_INT 14
58309: ST_TO_ADDR
// hc_gallery :=  ;
58310: LD_ADDR_OWVAR 33
58314: PUSH
58315: LD_STRING 
58317: ST_TO_ADDR
// hc_name :=  ;
58318: LD_ADDR_OWVAR 26
58322: PUSH
58323: LD_STRING 
58325: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
58326: CALL_OW 44
58330: PPUSH
58331: LD_INT 0
58333: PPUSH
58334: CALL_OW 51
// end ;
58338: GO 58260
58340: POP
58341: POP
// end ;
58342: PPOPN 1
58344: END
// every 0 0$1 trigger StreamModeActive and sBomb do
58345: LD_EXP 29
58349: PUSH
58350: LD_EXP 49
58354: AND
58355: IFFALSE 58364
58357: GO 58359
58359: DISABLE
// StreamSibBomb ;
58360: CALL 58365 0 0
58364: END
// export function StreamSibBomb ; var i , x , y ; begin
58365: LD_INT 0
58367: PPUSH
58368: PPUSH
58369: PPUSH
58370: PPUSH
// result := false ;
58371: LD_ADDR_VAR 0 1
58375: PUSH
58376: LD_INT 0
58378: ST_TO_ADDR
// for i := 1 to 16 do
58379: LD_ADDR_VAR 0 2
58383: PUSH
58384: DOUBLE
58385: LD_INT 1
58387: DEC
58388: ST_TO_ADDR
58389: LD_INT 16
58391: PUSH
58392: FOR_TO
58393: IFFALSE 58592
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58395: LD_ADDR_VAR 0 3
58399: PUSH
58400: LD_INT 10
58402: PUSH
58403: LD_INT 20
58405: PUSH
58406: LD_INT 30
58408: PUSH
58409: LD_INT 40
58411: PUSH
58412: LD_INT 50
58414: PUSH
58415: LD_INT 60
58417: PUSH
58418: LD_INT 70
58420: PUSH
58421: LD_INT 80
58423: PUSH
58424: LD_INT 90
58426: PUSH
58427: LD_INT 100
58429: PUSH
58430: LD_INT 110
58432: PUSH
58433: LD_INT 120
58435: PUSH
58436: LD_INT 130
58438: PUSH
58439: LD_INT 140
58441: PUSH
58442: LD_INT 150
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: PPUSH
58465: LD_INT 15
58467: PPUSH
58468: CALL_OW 12
58472: ARRAY
58473: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58474: LD_ADDR_VAR 0 4
58478: PUSH
58479: LD_INT 10
58481: PUSH
58482: LD_INT 20
58484: PUSH
58485: LD_INT 30
58487: PUSH
58488: LD_INT 40
58490: PUSH
58491: LD_INT 50
58493: PUSH
58494: LD_INT 60
58496: PUSH
58497: LD_INT 70
58499: PUSH
58500: LD_INT 80
58502: PUSH
58503: LD_INT 90
58505: PUSH
58506: LD_INT 100
58508: PUSH
58509: LD_INT 110
58511: PUSH
58512: LD_INT 120
58514: PUSH
58515: LD_INT 130
58517: PUSH
58518: LD_INT 140
58520: PUSH
58521: LD_INT 150
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: PPUSH
58544: LD_INT 15
58546: PPUSH
58547: CALL_OW 12
58551: ARRAY
58552: ST_TO_ADDR
// if ValidHex ( x , y ) then
58553: LD_VAR 0 3
58557: PPUSH
58558: LD_VAR 0 4
58562: PPUSH
58563: CALL_OW 488
58567: IFFALSE 58590
// begin result := [ x , y ] ;
58569: LD_ADDR_VAR 0 1
58573: PUSH
58574: LD_VAR 0 3
58578: PUSH
58579: LD_VAR 0 4
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: ST_TO_ADDR
// break ;
58588: GO 58592
// end ; end ;
58590: GO 58392
58592: POP
58593: POP
// if result then
58594: LD_VAR 0 1
58598: IFFALSE 58658
// begin ToLua ( playSibBomb() ) ;
58600: LD_STRING playSibBomb()
58602: PPUSH
58603: CALL_OW 559
// wait ( 0 0$14 ) ;
58607: LD_INT 490
58609: PPUSH
58610: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
58614: LD_VAR 0 1
58618: PUSH
58619: LD_INT 1
58621: ARRAY
58622: PPUSH
58623: LD_VAR 0 1
58627: PUSH
58628: LD_INT 2
58630: ARRAY
58631: PPUSH
58632: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
58636: LD_VAR 0 1
58640: PUSH
58641: LD_INT 1
58643: ARRAY
58644: PPUSH
58645: LD_VAR 0 1
58649: PUSH
58650: LD_INT 2
58652: ARRAY
58653: PPUSH
58654: CALL_OW 429
// end ; end ;
58658: LD_VAR 0 1
58662: RET
// every 0 0$1 trigger StreamModeActive and sReset do
58663: LD_EXP 29
58667: PUSH
58668: LD_EXP 51
58672: AND
58673: IFFALSE 58685
58675: GO 58677
58677: DISABLE
// YouLost (  ) ;
58678: LD_STRING 
58680: PPUSH
58681: CALL_OW 104
58685: END
// every 0 0$1 trigger StreamModeActive and sFog do
58686: LD_EXP 29
58690: PUSH
58691: LD_EXP 50
58695: AND
58696: IFFALSE 58710
58698: GO 58700
58700: DISABLE
// FogOff ( your_side ) ;
58701: LD_OWVAR 2
58705: PPUSH
58706: CALL_OW 344
58710: END
// every 0 0$1 trigger StreamModeActive and sSun do
58711: LD_EXP 29
58715: PUSH
58716: LD_EXP 52
58720: AND
58721: IFFALSE 58749
58723: GO 58725
58725: DISABLE
// begin solar_recharge_percent := 0 ;
58726: LD_ADDR_OWVAR 79
58730: PUSH
58731: LD_INT 0
58733: ST_TO_ADDR
// wait ( 5 5$00 ) ;
58734: LD_INT 10500
58736: PPUSH
58737: CALL_OW 67
// solar_recharge_percent := 100 ;
58741: LD_ADDR_OWVAR 79
58745: PUSH
58746: LD_INT 100
58748: ST_TO_ADDR
// end ;
58749: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
58750: LD_EXP 29
58754: PUSH
58755: LD_EXP 53
58759: AND
58760: IFFALSE 58999
58762: GO 58764
58764: DISABLE
58765: LD_INT 0
58767: PPUSH
58768: PPUSH
58769: PPUSH
// begin tmp := [ ] ;
58770: LD_ADDR_VAR 0 3
58774: PUSH
58775: EMPTY
58776: ST_TO_ADDR
// for i := 1 to 6 do
58777: LD_ADDR_VAR 0 1
58781: PUSH
58782: DOUBLE
58783: LD_INT 1
58785: DEC
58786: ST_TO_ADDR
58787: LD_INT 6
58789: PUSH
58790: FOR_TO
58791: IFFALSE 58896
// begin uc_nation := nation_nature ;
58793: LD_ADDR_OWVAR 21
58797: PUSH
58798: LD_INT 0
58800: ST_TO_ADDR
// uc_side := 0 ;
58801: LD_ADDR_OWVAR 20
58805: PUSH
58806: LD_INT 0
58808: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58809: LD_ADDR_OWVAR 29
58813: PUSH
58814: LD_INT 12
58816: PUSH
58817: LD_INT 12
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: ST_TO_ADDR
// hc_agressivity := 20 ;
58824: LD_ADDR_OWVAR 35
58828: PUSH
58829: LD_INT 20
58831: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
58832: LD_ADDR_OWVAR 28
58836: PUSH
58837: LD_INT 17
58839: ST_TO_ADDR
// hc_gallery :=  ;
58840: LD_ADDR_OWVAR 33
58844: PUSH
58845: LD_STRING 
58847: ST_TO_ADDR
// hc_name :=  ;
58848: LD_ADDR_OWVAR 26
58852: PUSH
58853: LD_STRING 
58855: ST_TO_ADDR
// un := CreateHuman ;
58856: LD_ADDR_VAR 0 2
58860: PUSH
58861: CALL_OW 44
58865: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
58866: LD_VAR 0 2
58870: PPUSH
58871: LD_INT 1
58873: PPUSH
58874: CALL_OW 51
// tmp := tmp ^ un ;
58878: LD_ADDR_VAR 0 3
58882: PUSH
58883: LD_VAR 0 3
58887: PUSH
58888: LD_VAR 0 2
58892: ADD
58893: ST_TO_ADDR
// end ;
58894: GO 58790
58896: POP
58897: POP
// repeat wait ( 0 0$1 ) ;
58898: LD_INT 35
58900: PPUSH
58901: CALL_OW 67
// for un in tmp do
58905: LD_ADDR_VAR 0 2
58909: PUSH
58910: LD_VAR 0 3
58914: PUSH
58915: FOR_IN
58916: IFFALSE 58990
// begin if IsDead ( un ) then
58918: LD_VAR 0 2
58922: PPUSH
58923: CALL_OW 301
58927: IFFALSE 58947
// begin tmp := tmp diff un ;
58929: LD_ADDR_VAR 0 3
58933: PUSH
58934: LD_VAR 0 3
58938: PUSH
58939: LD_VAR 0 2
58943: DIFF
58944: ST_TO_ADDR
// continue ;
58945: GO 58915
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
58947: LD_VAR 0 2
58951: PPUSH
58952: LD_INT 3
58954: PUSH
58955: LD_INT 22
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PPUSH
58969: CALL_OW 69
58973: PPUSH
58974: LD_VAR 0 2
58978: PPUSH
58979: CALL_OW 74
58983: PPUSH
58984: CALL_OW 115
// end ;
58988: GO 58915
58990: POP
58991: POP
// until not tmp ;
58992: LD_VAR 0 3
58996: NOT
58997: IFFALSE 58898
// end ;
58999: PPOPN 3
59001: END
// every 0 0$1 trigger StreamModeActive and sTroll do
59002: LD_EXP 29
59006: PUSH
59007: LD_EXP 54
59011: AND
59012: IFFALSE 59066
59014: GO 59016
59016: DISABLE
// begin ToLua ( displayTroll(); ) ;
59017: LD_STRING displayTroll();
59019: PPUSH
59020: CALL_OW 559
// wait ( 3 3$00 ) ;
59024: LD_INT 6300
59026: PPUSH
59027: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59031: LD_STRING hideTroll();
59033: PPUSH
59034: CALL_OW 559
// wait ( 1 1$00 ) ;
59038: LD_INT 2100
59040: PPUSH
59041: CALL_OW 67
// ToLua ( displayTroll(); ) ;
59045: LD_STRING displayTroll();
59047: PPUSH
59048: CALL_OW 559
// wait ( 1 1$00 ) ;
59052: LD_INT 2100
59054: PPUSH
59055: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59059: LD_STRING hideTroll();
59061: PPUSH
59062: CALL_OW 559
// end ;
59066: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
59067: LD_EXP 29
59071: PUSH
59072: LD_EXP 55
59076: AND
59077: IFFALSE 59140
59079: GO 59081
59081: DISABLE
59082: LD_INT 0
59084: PPUSH
// begin p := 0 ;
59085: LD_ADDR_VAR 0 1
59089: PUSH
59090: LD_INT 0
59092: ST_TO_ADDR
// repeat game_speed := 1 ;
59093: LD_ADDR_OWVAR 65
59097: PUSH
59098: LD_INT 1
59100: ST_TO_ADDR
// wait ( 0 0$1 ) ;
59101: LD_INT 35
59103: PPUSH
59104: CALL_OW 67
// p := p + 1 ;
59108: LD_ADDR_VAR 0 1
59112: PUSH
59113: LD_VAR 0 1
59117: PUSH
59118: LD_INT 1
59120: PLUS
59121: ST_TO_ADDR
// until p >= 60 ;
59122: LD_VAR 0 1
59126: PUSH
59127: LD_INT 60
59129: GREATEREQUAL
59130: IFFALSE 59093
// game_speed := 4 ;
59132: LD_ADDR_OWVAR 65
59136: PUSH
59137: LD_INT 4
59139: ST_TO_ADDR
// end ;
59140: PPOPN 1
59142: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
59143: LD_EXP 29
59147: PUSH
59148: LD_EXP 56
59152: AND
59153: IFFALSE 59299
59155: GO 59157
59157: DISABLE
59158: LD_INT 0
59160: PPUSH
59161: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59162: LD_ADDR_VAR 0 1
59166: PUSH
59167: LD_INT 22
59169: PUSH
59170: LD_OWVAR 2
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 2
59181: PUSH
59182: LD_INT 30
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 30
59194: PUSH
59195: LD_INT 1
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: LIST
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PPUSH
59211: CALL_OW 69
59215: ST_TO_ADDR
// if not depot then
59216: LD_VAR 0 1
59220: NOT
59221: IFFALSE 59225
// exit ;
59223: GO 59299
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
59225: LD_ADDR_VAR 0 2
59229: PUSH
59230: LD_VAR 0 1
59234: PUSH
59235: LD_INT 1
59237: PPUSH
59238: LD_VAR 0 1
59242: PPUSH
59243: CALL_OW 12
59247: ARRAY
59248: PPUSH
59249: CALL_OW 274
59253: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
59254: LD_VAR 0 2
59258: PPUSH
59259: LD_INT 1
59261: PPUSH
59262: LD_INT 0
59264: PPUSH
59265: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
59269: LD_VAR 0 2
59273: PPUSH
59274: LD_INT 2
59276: PPUSH
59277: LD_INT 0
59279: PPUSH
59280: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
59284: LD_VAR 0 2
59288: PPUSH
59289: LD_INT 3
59291: PPUSH
59292: LD_INT 0
59294: PPUSH
59295: CALL_OW 277
// end ;
59299: PPOPN 2
59301: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
59302: LD_EXP 29
59306: PUSH
59307: LD_EXP 57
59311: AND
59312: IFFALSE 59409
59314: GO 59316
59316: DISABLE
59317: LD_INT 0
59319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59320: LD_ADDR_VAR 0 1
59324: PUSH
59325: LD_INT 22
59327: PUSH
59328: LD_OWVAR 2
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 21
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 3
59349: PUSH
59350: LD_INT 23
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: LIST
59368: PPUSH
59369: CALL_OW 69
59373: ST_TO_ADDR
// if not tmp then
59374: LD_VAR 0 1
59378: NOT
59379: IFFALSE 59383
// exit ;
59381: GO 59409
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
59383: LD_VAR 0 1
59387: PUSH
59388: LD_INT 1
59390: PPUSH
59391: LD_VAR 0 1
59395: PPUSH
59396: CALL_OW 12
59400: ARRAY
59401: PPUSH
59402: LD_INT 200
59404: PPUSH
59405: CALL_OW 234
// end ;
59409: PPOPN 1
59411: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
59412: LD_EXP 29
59416: PUSH
59417: LD_EXP 58
59421: AND
59422: IFFALSE 59501
59424: GO 59426
59426: DISABLE
59427: LD_INT 0
59429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
59430: LD_ADDR_VAR 0 1
59434: PUSH
59435: LD_INT 22
59437: PUSH
59438: LD_OWVAR 2
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 21
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PPUSH
59461: CALL_OW 69
59465: ST_TO_ADDR
// if not tmp then
59466: LD_VAR 0 1
59470: NOT
59471: IFFALSE 59475
// exit ;
59473: GO 59501
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
59475: LD_VAR 0 1
59479: PUSH
59480: LD_INT 1
59482: PPUSH
59483: LD_VAR 0 1
59487: PPUSH
59488: CALL_OW 12
59492: ARRAY
59493: PPUSH
59494: LD_INT 60
59496: PPUSH
59497: CALL_OW 234
// end ;
59501: PPOPN 1
59503: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
59504: LD_EXP 29
59508: PUSH
59509: LD_EXP 59
59513: AND
59514: IFFALSE 59613
59516: GO 59518
59518: DISABLE
59519: LD_INT 0
59521: PPUSH
59522: PPUSH
// begin enable ;
59523: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
59524: LD_ADDR_VAR 0 1
59528: PUSH
59529: LD_INT 22
59531: PUSH
59532: LD_OWVAR 2
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 61
59543: PUSH
59544: EMPTY
59545: LIST
59546: PUSH
59547: LD_INT 33
59549: PUSH
59550: LD_INT 2
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: LIST
59561: PPUSH
59562: CALL_OW 69
59566: ST_TO_ADDR
// if not tmp then
59567: LD_VAR 0 1
59571: NOT
59572: IFFALSE 59576
// exit ;
59574: GO 59613
// for i in tmp do
59576: LD_ADDR_VAR 0 2
59580: PUSH
59581: LD_VAR 0 1
59585: PUSH
59586: FOR_IN
59587: IFFALSE 59611
// if IsControledBy ( i ) then
59589: LD_VAR 0 2
59593: PPUSH
59594: CALL_OW 312
59598: IFFALSE 59609
// ComUnlink ( i ) ;
59600: LD_VAR 0 2
59604: PPUSH
59605: CALL_OW 136
59609: GO 59586
59611: POP
59612: POP
// end ;
59613: PPOPN 2
59615: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
59616: LD_EXP 29
59620: PUSH
59621: LD_EXP 60
59625: AND
59626: IFFALSE 59766
59628: GO 59630
59630: DISABLE
59631: LD_INT 0
59633: PPUSH
59634: PPUSH
// begin ToLua ( displayPowell(); ) ;
59635: LD_STRING displayPowell();
59637: PPUSH
59638: CALL_OW 559
// uc_side := 0 ;
59642: LD_ADDR_OWVAR 20
59646: PUSH
59647: LD_INT 0
59649: ST_TO_ADDR
// uc_nation := 2 ;
59650: LD_ADDR_OWVAR 21
59654: PUSH
59655: LD_INT 2
59657: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
59658: LD_ADDR_OWVAR 37
59662: PUSH
59663: LD_INT 14
59665: ST_TO_ADDR
// vc_engine := engine_siberite ;
59666: LD_ADDR_OWVAR 39
59670: PUSH
59671: LD_INT 3
59673: ST_TO_ADDR
// vc_control := control_apeman ;
59674: LD_ADDR_OWVAR 38
59678: PUSH
59679: LD_INT 5
59681: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
59682: LD_ADDR_OWVAR 40
59686: PUSH
59687: LD_INT 29
59689: ST_TO_ADDR
// un := CreateVehicle ;
59690: LD_ADDR_VAR 0 2
59694: PUSH
59695: CALL_OW 45
59699: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59700: LD_VAR 0 2
59704: PPUSH
59705: LD_INT 1
59707: PPUSH
59708: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59712: LD_INT 35
59714: PPUSH
59715: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59719: LD_VAR 0 2
59723: PPUSH
59724: LD_INT 22
59726: PUSH
59727: LD_OWVAR 2
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PPUSH
59736: CALL_OW 69
59740: PPUSH
59741: LD_VAR 0 2
59745: PPUSH
59746: CALL_OW 74
59750: PPUSH
59751: CALL_OW 115
// until IsDead ( un ) ;
59755: LD_VAR 0 2
59759: PPUSH
59760: CALL_OW 301
59764: IFFALSE 59712
// end ;
59766: PPOPN 2
59768: END
// every 0 0$1 trigger StreamModeActive and sStu do
59769: LD_EXP 29
59773: PUSH
59774: LD_EXP 68
59778: AND
59779: IFFALSE 59795
59781: GO 59783
59783: DISABLE
// begin ToLua ( displayStucuk(); ) ;
59784: LD_STRING displayStucuk();
59786: PPUSH
59787: CALL_OW 559
// ResetFog ;
59791: CALL_OW 335
// end ;
59795: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
59796: LD_EXP 29
59800: PUSH
59801: LD_EXP 61
59805: AND
59806: IFFALSE 59947
59808: GO 59810
59810: DISABLE
59811: LD_INT 0
59813: PPUSH
59814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59815: LD_ADDR_VAR 0 2
59819: PUSH
59820: LD_INT 22
59822: PUSH
59823: LD_OWVAR 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 21
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PPUSH
59846: CALL_OW 69
59850: ST_TO_ADDR
// if not tmp then
59851: LD_VAR 0 2
59855: NOT
59856: IFFALSE 59860
// exit ;
59858: GO 59947
// un := tmp [ rand ( 1 , tmp ) ] ;
59860: LD_ADDR_VAR 0 1
59864: PUSH
59865: LD_VAR 0 2
59869: PUSH
59870: LD_INT 1
59872: PPUSH
59873: LD_VAR 0 2
59877: PPUSH
59878: CALL_OW 12
59882: ARRAY
59883: ST_TO_ADDR
// SetSide ( un , 0 ) ;
59884: LD_VAR 0 1
59888: PPUSH
59889: LD_INT 0
59891: PPUSH
59892: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
59896: LD_VAR 0 1
59900: PPUSH
59901: LD_OWVAR 3
59905: PUSH
59906: LD_VAR 0 1
59910: DIFF
59911: PPUSH
59912: LD_VAR 0 1
59916: PPUSH
59917: CALL_OW 74
59921: PPUSH
59922: CALL_OW 115
// wait ( 0 0$20 ) ;
59926: LD_INT 700
59928: PPUSH
59929: CALL_OW 67
// SetSide ( un , your_side ) ;
59933: LD_VAR 0 1
59937: PPUSH
59938: LD_OWVAR 2
59942: PPUSH
59943: CALL_OW 235
// end ;
59947: PPOPN 2
59949: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
59950: LD_EXP 29
59954: PUSH
59955: LD_EXP 62
59959: AND
59960: IFFALSE 60066
59962: GO 59964
59964: DISABLE
59965: LD_INT 0
59967: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59968: LD_ADDR_VAR 0 1
59972: PUSH
59973: LD_INT 22
59975: PUSH
59976: LD_OWVAR 2
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: LD_INT 30
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 30
60000: PUSH
60001: LD_INT 1
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: LIST
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PPUSH
60017: CALL_OW 69
60021: ST_TO_ADDR
// if not depot then
60022: LD_VAR 0 1
60026: NOT
60027: IFFALSE 60031
// exit ;
60029: GO 60066
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
60031: LD_VAR 0 1
60035: PUSH
60036: LD_INT 1
60038: ARRAY
60039: PPUSH
60040: CALL_OW 250
60044: PPUSH
60045: LD_VAR 0 1
60049: PUSH
60050: LD_INT 1
60052: ARRAY
60053: PPUSH
60054: CALL_OW 251
60058: PPUSH
60059: LD_INT 70
60061: PPUSH
60062: CALL_OW 495
// end ;
60066: PPOPN 1
60068: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
60069: LD_EXP 29
60073: PUSH
60074: LD_EXP 63
60078: AND
60079: IFFALSE 60290
60081: GO 60083
60083: DISABLE
60084: LD_INT 0
60086: PPUSH
60087: PPUSH
60088: PPUSH
60089: PPUSH
60090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60091: LD_ADDR_VAR 0 5
60095: PUSH
60096: LD_INT 22
60098: PUSH
60099: LD_OWVAR 2
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 21
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PPUSH
60122: CALL_OW 69
60126: ST_TO_ADDR
// if not tmp then
60127: LD_VAR 0 5
60131: NOT
60132: IFFALSE 60136
// exit ;
60134: GO 60290
// for i in tmp do
60136: LD_ADDR_VAR 0 1
60140: PUSH
60141: LD_VAR 0 5
60145: PUSH
60146: FOR_IN
60147: IFFALSE 60288
// begin d := rand ( 0 , 5 ) ;
60149: LD_ADDR_VAR 0 4
60153: PUSH
60154: LD_INT 0
60156: PPUSH
60157: LD_INT 5
60159: PPUSH
60160: CALL_OW 12
60164: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
60165: LD_ADDR_VAR 0 2
60169: PUSH
60170: LD_VAR 0 1
60174: PPUSH
60175: CALL_OW 250
60179: PPUSH
60180: LD_VAR 0 4
60184: PPUSH
60185: LD_INT 3
60187: PPUSH
60188: LD_INT 12
60190: PPUSH
60191: CALL_OW 12
60195: PPUSH
60196: CALL_OW 272
60200: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
60201: LD_ADDR_VAR 0 3
60205: PUSH
60206: LD_VAR 0 1
60210: PPUSH
60211: CALL_OW 251
60215: PPUSH
60216: LD_VAR 0 4
60220: PPUSH
60221: LD_INT 3
60223: PPUSH
60224: LD_INT 12
60226: PPUSH
60227: CALL_OW 12
60231: PPUSH
60232: CALL_OW 273
60236: ST_TO_ADDR
// if ValidHex ( x , y ) then
60237: LD_VAR 0 2
60241: PPUSH
60242: LD_VAR 0 3
60246: PPUSH
60247: CALL_OW 488
60251: IFFALSE 60286
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
60253: LD_VAR 0 1
60257: PPUSH
60258: LD_VAR 0 2
60262: PPUSH
60263: LD_VAR 0 3
60267: PPUSH
60268: LD_INT 3
60270: PPUSH
60271: LD_INT 6
60273: PPUSH
60274: CALL_OW 12
60278: PPUSH
60279: LD_INT 1
60281: PPUSH
60282: CALL_OW 483
// end ;
60286: GO 60146
60288: POP
60289: POP
// end ;
60290: PPOPN 5
60292: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
60293: LD_EXP 29
60297: PUSH
60298: LD_EXP 64
60302: AND
60303: IFFALSE 60397
60305: GO 60307
60307: DISABLE
60308: LD_INT 0
60310: PPUSH
60311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
60312: LD_ADDR_VAR 0 2
60316: PUSH
60317: LD_INT 22
60319: PUSH
60320: LD_OWVAR 2
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 32
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 21
60341: PUSH
60342: LD_INT 2
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: LIST
60353: PPUSH
60354: CALL_OW 69
60358: ST_TO_ADDR
// if not tmp then
60359: LD_VAR 0 2
60363: NOT
60364: IFFALSE 60368
// exit ;
60366: GO 60397
// for i in tmp do
60368: LD_ADDR_VAR 0 1
60372: PUSH
60373: LD_VAR 0 2
60377: PUSH
60378: FOR_IN
60379: IFFALSE 60395
// SetFuel ( i , 0 ) ;
60381: LD_VAR 0 1
60385: PPUSH
60386: LD_INT 0
60388: PPUSH
60389: CALL_OW 240
60393: GO 60378
60395: POP
60396: POP
// end ;
60397: PPOPN 2
60399: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
60400: LD_EXP 29
60404: PUSH
60405: LD_EXP 65
60409: AND
60410: IFFALSE 60476
60412: GO 60414
60414: DISABLE
60415: LD_INT 0
60417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60418: LD_ADDR_VAR 0 1
60422: PUSH
60423: LD_INT 22
60425: PUSH
60426: LD_OWVAR 2
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 30
60437: PUSH
60438: LD_INT 29
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PPUSH
60449: CALL_OW 69
60453: ST_TO_ADDR
// if not tmp then
60454: LD_VAR 0 1
60458: NOT
60459: IFFALSE 60463
// exit ;
60461: GO 60476
// DestroyUnit ( tmp [ 1 ] ) ;
60463: LD_VAR 0 1
60467: PUSH
60468: LD_INT 1
60470: ARRAY
60471: PPUSH
60472: CALL_OW 65
// end ;
60476: PPOPN 1
60478: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
60479: LD_EXP 29
60483: PUSH
60484: LD_EXP 67
60488: AND
60489: IFFALSE 60618
60491: GO 60493
60493: DISABLE
60494: LD_INT 0
60496: PPUSH
// begin uc_side := 0 ;
60497: LD_ADDR_OWVAR 20
60501: PUSH
60502: LD_INT 0
60504: ST_TO_ADDR
// uc_nation := nation_arabian ;
60505: LD_ADDR_OWVAR 21
60509: PUSH
60510: LD_INT 2
60512: ST_TO_ADDR
// hc_gallery :=  ;
60513: LD_ADDR_OWVAR 33
60517: PUSH
60518: LD_STRING 
60520: ST_TO_ADDR
// hc_name :=  ;
60521: LD_ADDR_OWVAR 26
60525: PUSH
60526: LD_STRING 
60528: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
60529: LD_INT 1
60531: PPUSH
60532: LD_INT 11
60534: PPUSH
60535: LD_INT 10
60537: PPUSH
60538: CALL_OW 380
// un := CreateHuman ;
60542: LD_ADDR_VAR 0 1
60546: PUSH
60547: CALL_OW 44
60551: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60552: LD_VAR 0 1
60556: PPUSH
60557: LD_INT 1
60559: PPUSH
60560: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60564: LD_INT 35
60566: PPUSH
60567: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60571: LD_VAR 0 1
60575: PPUSH
60576: LD_INT 22
60578: PUSH
60579: LD_OWVAR 2
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PPUSH
60588: CALL_OW 69
60592: PPUSH
60593: LD_VAR 0 1
60597: PPUSH
60598: CALL_OW 74
60602: PPUSH
60603: CALL_OW 115
// until IsDead ( un ) ;
60607: LD_VAR 0 1
60611: PPUSH
60612: CALL_OW 301
60616: IFFALSE 60564
// end ;
60618: PPOPN 1
60620: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
60621: LD_EXP 29
60625: PUSH
60626: LD_EXP 69
60630: AND
60631: IFFALSE 60643
60633: GO 60635
60635: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
60636: LD_STRING earthquake(getX(game), 0, 32)
60638: PPUSH
60639: CALL_OW 559
60643: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
60644: LD_EXP 29
60648: PUSH
60649: LD_EXP 70
60653: AND
60654: IFFALSE 60745
60656: GO 60658
60658: DISABLE
60659: LD_INT 0
60661: PPUSH
// begin enable ;
60662: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
60663: LD_ADDR_VAR 0 1
60667: PUSH
60668: LD_INT 22
60670: PUSH
60671: LD_OWVAR 2
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 21
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 33
60692: PUSH
60693: LD_INT 3
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: LIST
60704: PPUSH
60705: CALL_OW 69
60709: ST_TO_ADDR
// if not tmp then
60710: LD_VAR 0 1
60714: NOT
60715: IFFALSE 60719
// exit ;
60717: GO 60745
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60719: LD_VAR 0 1
60723: PUSH
60724: LD_INT 1
60726: PPUSH
60727: LD_VAR 0 1
60731: PPUSH
60732: CALL_OW 12
60736: ARRAY
60737: PPUSH
60738: LD_INT 1
60740: PPUSH
60741: CALL_OW 234
// end ;
60745: PPOPN 1
60747: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
60748: LD_EXP 29
60752: PUSH
60753: LD_EXP 71
60757: AND
60758: IFFALSE 60899
60760: GO 60762
60762: DISABLE
60763: LD_INT 0
60765: PPUSH
60766: PPUSH
60767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60768: LD_ADDR_VAR 0 3
60772: PUSH
60773: LD_INT 22
60775: PUSH
60776: LD_OWVAR 2
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 25
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PPUSH
60799: CALL_OW 69
60803: ST_TO_ADDR
// if not tmp then
60804: LD_VAR 0 3
60808: NOT
60809: IFFALSE 60813
// exit ;
60811: GO 60899
// un := tmp [ rand ( 1 , tmp ) ] ;
60813: LD_ADDR_VAR 0 2
60817: PUSH
60818: LD_VAR 0 3
60822: PUSH
60823: LD_INT 1
60825: PPUSH
60826: LD_VAR 0 3
60830: PPUSH
60831: CALL_OW 12
60835: ARRAY
60836: ST_TO_ADDR
// if Crawls ( un ) then
60837: LD_VAR 0 2
60841: PPUSH
60842: CALL_OW 318
60846: IFFALSE 60857
// ComWalk ( un ) ;
60848: LD_VAR 0 2
60852: PPUSH
60853: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
60857: LD_VAR 0 2
60861: PPUSH
60862: LD_INT 9
60864: PPUSH
60865: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
60869: LD_INT 28
60871: PPUSH
60872: LD_OWVAR 2
60876: PPUSH
60877: LD_INT 2
60879: PPUSH
60880: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
60884: LD_INT 29
60886: PPUSH
60887: LD_OWVAR 2
60891: PPUSH
60892: LD_INT 2
60894: PPUSH
60895: CALL_OW 322
// end ;
60899: PPOPN 3
60901: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
60902: LD_EXP 29
60906: PUSH
60907: LD_EXP 72
60911: AND
60912: IFFALSE 61023
60914: GO 60916
60916: DISABLE
60917: LD_INT 0
60919: PPUSH
60920: PPUSH
60921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60922: LD_ADDR_VAR 0 3
60926: PUSH
60927: LD_INT 22
60929: PUSH
60930: LD_OWVAR 2
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 25
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PPUSH
60953: CALL_OW 69
60957: ST_TO_ADDR
// if not tmp then
60958: LD_VAR 0 3
60962: NOT
60963: IFFALSE 60967
// exit ;
60965: GO 61023
// un := tmp [ rand ( 1 , tmp ) ] ;
60967: LD_ADDR_VAR 0 2
60971: PUSH
60972: LD_VAR 0 3
60976: PUSH
60977: LD_INT 1
60979: PPUSH
60980: LD_VAR 0 3
60984: PPUSH
60985: CALL_OW 12
60989: ARRAY
60990: ST_TO_ADDR
// if Crawls ( un ) then
60991: LD_VAR 0 2
60995: PPUSH
60996: CALL_OW 318
61000: IFFALSE 61011
// ComWalk ( un ) ;
61002: LD_VAR 0 2
61006: PPUSH
61007: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61011: LD_VAR 0 2
61015: PPUSH
61016: LD_INT 8
61018: PPUSH
61019: CALL_OW 336
// end ;
61023: PPOPN 3
61025: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
61026: LD_EXP 29
61030: PUSH
61031: LD_EXP 73
61035: AND
61036: IFFALSE 61180
61038: GO 61040
61040: DISABLE
61041: LD_INT 0
61043: PPUSH
61044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
61045: LD_ADDR_VAR 0 2
61049: PUSH
61050: LD_INT 22
61052: PUSH
61053: LD_OWVAR 2
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 21
61064: PUSH
61065: LD_INT 2
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: LD_INT 34
61077: PUSH
61078: LD_INT 12
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 34
61087: PUSH
61088: LD_INT 51
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 34
61097: PUSH
61098: LD_INT 32
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: LIST
61115: PPUSH
61116: CALL_OW 69
61120: ST_TO_ADDR
// if not tmp then
61121: LD_VAR 0 2
61125: NOT
61126: IFFALSE 61130
// exit ;
61128: GO 61180
// for i in tmp do
61130: LD_ADDR_VAR 0 1
61134: PUSH
61135: LD_VAR 0 2
61139: PUSH
61140: FOR_IN
61141: IFFALSE 61178
// if GetCargo ( i , mat_artifact ) = 0 then
61143: LD_VAR 0 1
61147: PPUSH
61148: LD_INT 4
61150: PPUSH
61151: CALL_OW 289
61155: PUSH
61156: LD_INT 0
61158: EQUAL
61159: IFFALSE 61176
// SetCargo ( i , mat_siberit , 100 ) ;
61161: LD_VAR 0 1
61165: PPUSH
61166: LD_INT 3
61168: PPUSH
61169: LD_INT 100
61171: PPUSH
61172: CALL_OW 290
61176: GO 61140
61178: POP
61179: POP
// end ;
61180: PPOPN 2
61182: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
61183: LD_EXP 29
61187: PUSH
61188: LD_EXP 74
61192: AND
61193: IFFALSE 61376
61195: GO 61197
61197: DISABLE
61198: LD_INT 0
61200: PPUSH
61201: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61202: LD_ADDR_VAR 0 2
61206: PUSH
61207: LD_INT 22
61209: PUSH
61210: LD_OWVAR 2
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PPUSH
61219: CALL_OW 69
61223: ST_TO_ADDR
// if not tmp then
61224: LD_VAR 0 2
61228: NOT
61229: IFFALSE 61233
// exit ;
61231: GO 61376
// for i := 1 to 2 do
61233: LD_ADDR_VAR 0 1
61237: PUSH
61238: DOUBLE
61239: LD_INT 1
61241: DEC
61242: ST_TO_ADDR
61243: LD_INT 2
61245: PUSH
61246: FOR_TO
61247: IFFALSE 61374
// begin uc_side := your_side ;
61249: LD_ADDR_OWVAR 20
61253: PUSH
61254: LD_OWVAR 2
61258: ST_TO_ADDR
// uc_nation := nation_american ;
61259: LD_ADDR_OWVAR 21
61263: PUSH
61264: LD_INT 1
61266: ST_TO_ADDR
// vc_chassis := us_morphling ;
61267: LD_ADDR_OWVAR 37
61271: PUSH
61272: LD_INT 5
61274: ST_TO_ADDR
// vc_engine := engine_siberite ;
61275: LD_ADDR_OWVAR 39
61279: PUSH
61280: LD_INT 3
61282: ST_TO_ADDR
// vc_control := control_computer ;
61283: LD_ADDR_OWVAR 38
61287: PUSH
61288: LD_INT 3
61290: ST_TO_ADDR
// vc_weapon := us_double_laser ;
61291: LD_ADDR_OWVAR 40
61295: PUSH
61296: LD_INT 10
61298: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
61299: LD_VAR 0 2
61303: PUSH
61304: LD_INT 1
61306: ARRAY
61307: PPUSH
61308: CALL_OW 310
61312: NOT
61313: IFFALSE 61360
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
61315: CALL_OW 45
61319: PPUSH
61320: LD_VAR 0 2
61324: PUSH
61325: LD_INT 1
61327: ARRAY
61328: PPUSH
61329: CALL_OW 250
61333: PPUSH
61334: LD_VAR 0 2
61338: PUSH
61339: LD_INT 1
61341: ARRAY
61342: PPUSH
61343: CALL_OW 251
61347: PPUSH
61348: LD_INT 12
61350: PPUSH
61351: LD_INT 1
61353: PPUSH
61354: CALL_OW 50
61358: GO 61372
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
61360: CALL_OW 45
61364: PPUSH
61365: LD_INT 1
61367: PPUSH
61368: CALL_OW 51
// end ;
61372: GO 61246
61374: POP
61375: POP
// end ;
61376: PPOPN 2
61378: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
61379: LD_EXP 29
61383: PUSH
61384: LD_EXP 75
61388: AND
61389: IFFALSE 61611
61391: GO 61393
61393: DISABLE
61394: LD_INT 0
61396: PPUSH
61397: PPUSH
61398: PPUSH
61399: PPUSH
61400: PPUSH
61401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61402: LD_ADDR_VAR 0 6
61406: PUSH
61407: LD_INT 22
61409: PUSH
61410: LD_OWVAR 2
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 21
61421: PUSH
61422: LD_INT 1
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 3
61431: PUSH
61432: LD_INT 23
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: LIST
61450: PPUSH
61451: CALL_OW 69
61455: ST_TO_ADDR
// if not tmp then
61456: LD_VAR 0 6
61460: NOT
61461: IFFALSE 61465
// exit ;
61463: GO 61611
// s1 := rand ( 1 , 4 ) ;
61465: LD_ADDR_VAR 0 2
61469: PUSH
61470: LD_INT 1
61472: PPUSH
61473: LD_INT 4
61475: PPUSH
61476: CALL_OW 12
61480: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
61481: LD_ADDR_VAR 0 4
61485: PUSH
61486: LD_VAR 0 6
61490: PUSH
61491: LD_INT 1
61493: ARRAY
61494: PPUSH
61495: LD_VAR 0 2
61499: PPUSH
61500: CALL_OW 259
61504: ST_TO_ADDR
// if s1 = 1 then
61505: LD_VAR 0 2
61509: PUSH
61510: LD_INT 1
61512: EQUAL
61513: IFFALSE 61533
// s2 := rand ( 2 , 4 ) else
61515: LD_ADDR_VAR 0 3
61519: PUSH
61520: LD_INT 2
61522: PPUSH
61523: LD_INT 4
61525: PPUSH
61526: CALL_OW 12
61530: ST_TO_ADDR
61531: GO 61541
// s2 := 1 ;
61533: LD_ADDR_VAR 0 3
61537: PUSH
61538: LD_INT 1
61540: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
61541: LD_ADDR_VAR 0 5
61545: PUSH
61546: LD_VAR 0 6
61550: PUSH
61551: LD_INT 1
61553: ARRAY
61554: PPUSH
61555: LD_VAR 0 3
61559: PPUSH
61560: CALL_OW 259
61564: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61565: LD_VAR 0 6
61569: PUSH
61570: LD_INT 1
61572: ARRAY
61573: PPUSH
61574: LD_VAR 0 2
61578: PPUSH
61579: LD_VAR 0 5
61583: PPUSH
61584: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
61588: LD_VAR 0 6
61592: PUSH
61593: LD_INT 1
61595: ARRAY
61596: PPUSH
61597: LD_VAR 0 3
61601: PPUSH
61602: LD_VAR 0 4
61606: PPUSH
61607: CALL_OW 237
// end ;
61611: PPOPN 6
61613: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
61614: LD_EXP 29
61618: PUSH
61619: LD_EXP 76
61623: AND
61624: IFFALSE 61703
61626: GO 61628
61628: DISABLE
61629: LD_INT 0
61631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
61632: LD_ADDR_VAR 0 1
61636: PUSH
61637: LD_INT 22
61639: PUSH
61640: LD_OWVAR 2
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 30
61651: PUSH
61652: LD_INT 3
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PPUSH
61663: CALL_OW 69
61667: ST_TO_ADDR
// if not tmp then
61668: LD_VAR 0 1
61672: NOT
61673: IFFALSE 61677
// exit ;
61675: GO 61703
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61677: LD_VAR 0 1
61681: PUSH
61682: LD_INT 1
61684: PPUSH
61685: LD_VAR 0 1
61689: PPUSH
61690: CALL_OW 12
61694: ARRAY
61695: PPUSH
61696: LD_INT 1
61698: PPUSH
61699: CALL_OW 234
// end ;
61703: PPOPN 1
61705: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
61706: LD_EXP 29
61710: PUSH
61711: LD_EXP 77
61715: AND
61716: IFFALSE 61828
61718: GO 61720
61720: DISABLE
61721: LD_INT 0
61723: PPUSH
61724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
61725: LD_ADDR_VAR 0 2
61729: PUSH
61730: LD_INT 22
61732: PUSH
61733: LD_OWVAR 2
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 2
61744: PUSH
61745: LD_INT 30
61747: PUSH
61748: LD_INT 27
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 30
61757: PUSH
61758: LD_INT 26
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 30
61767: PUSH
61768: LD_INT 28
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PPUSH
61785: CALL_OW 69
61789: ST_TO_ADDR
// if not tmp then
61790: LD_VAR 0 2
61794: NOT
61795: IFFALSE 61799
// exit ;
61797: GO 61828
// for i in tmp do
61799: LD_ADDR_VAR 0 1
61803: PUSH
61804: LD_VAR 0 2
61808: PUSH
61809: FOR_IN
61810: IFFALSE 61826
// SetLives ( i , 1 ) ;
61812: LD_VAR 0 1
61816: PPUSH
61817: LD_INT 1
61819: PPUSH
61820: CALL_OW 234
61824: GO 61809
61826: POP
61827: POP
// end ;
61828: PPOPN 2
61830: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
61831: LD_EXP 29
61835: PUSH
61836: LD_EXP 78
61840: AND
61841: IFFALSE 62128
61843: GO 61845
61845: DISABLE
61846: LD_INT 0
61848: PPUSH
61849: PPUSH
61850: PPUSH
// begin i := rand ( 1 , 7 ) ;
61851: LD_ADDR_VAR 0 1
61855: PUSH
61856: LD_INT 1
61858: PPUSH
61859: LD_INT 7
61861: PPUSH
61862: CALL_OW 12
61866: ST_TO_ADDR
// case i of 1 :
61867: LD_VAR 0 1
61871: PUSH
61872: LD_INT 1
61874: DOUBLE
61875: EQUAL
61876: IFTRUE 61880
61878: GO 61890
61880: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
61881: LD_STRING earthquake(getX(game), 0, 32)
61883: PPUSH
61884: CALL_OW 559
61888: GO 62128
61890: LD_INT 2
61892: DOUBLE
61893: EQUAL
61894: IFTRUE 61898
61896: GO 61912
61898: POP
// begin ToLua ( displayStucuk(); ) ;
61899: LD_STRING displayStucuk();
61901: PPUSH
61902: CALL_OW 559
// ResetFog ;
61906: CALL_OW 335
// end ; 3 :
61910: GO 62128
61912: LD_INT 3
61914: DOUBLE
61915: EQUAL
61916: IFTRUE 61920
61918: GO 62024
61920: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61921: LD_ADDR_VAR 0 2
61925: PUSH
61926: LD_INT 22
61928: PUSH
61929: LD_OWVAR 2
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 25
61940: PUSH
61941: LD_INT 1
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PPUSH
61952: CALL_OW 69
61956: ST_TO_ADDR
// if not tmp then
61957: LD_VAR 0 2
61961: NOT
61962: IFFALSE 61966
// exit ;
61964: GO 62128
// un := tmp [ rand ( 1 , tmp ) ] ;
61966: LD_ADDR_VAR 0 3
61970: PUSH
61971: LD_VAR 0 2
61975: PUSH
61976: LD_INT 1
61978: PPUSH
61979: LD_VAR 0 2
61983: PPUSH
61984: CALL_OW 12
61988: ARRAY
61989: ST_TO_ADDR
// if Crawls ( un ) then
61990: LD_VAR 0 3
61994: PPUSH
61995: CALL_OW 318
61999: IFFALSE 62010
// ComWalk ( un ) ;
62001: LD_VAR 0 3
62005: PPUSH
62006: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62010: LD_VAR 0 3
62014: PPUSH
62015: LD_INT 8
62017: PPUSH
62018: CALL_OW 336
// end ; 4 :
62022: GO 62128
62024: LD_INT 4
62026: DOUBLE
62027: EQUAL
62028: IFTRUE 62032
62030: GO 62106
62032: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
62033: LD_ADDR_VAR 0 2
62037: PUSH
62038: LD_INT 22
62040: PUSH
62041: LD_OWVAR 2
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 30
62052: PUSH
62053: LD_INT 29
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PPUSH
62064: CALL_OW 69
62068: ST_TO_ADDR
// if not tmp then
62069: LD_VAR 0 2
62073: NOT
62074: IFFALSE 62078
// exit ;
62076: GO 62128
// CenterNowOnUnits ( tmp [ 1 ] ) ;
62078: LD_VAR 0 2
62082: PUSH
62083: LD_INT 1
62085: ARRAY
62086: PPUSH
62087: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
62091: LD_VAR 0 2
62095: PUSH
62096: LD_INT 1
62098: ARRAY
62099: PPUSH
62100: CALL_OW 65
// end ; 5 .. 7 :
62104: GO 62128
62106: LD_INT 5
62108: DOUBLE
62109: GREATEREQUAL
62110: IFFALSE 62118
62112: LD_INT 7
62114: DOUBLE
62115: LESSEQUAL
62116: IFTRUE 62120
62118: GO 62127
62120: POP
// StreamSibBomb ; end ;
62121: CALL 58365 0 0
62125: GO 62128
62127: POP
// end ;
62128: PPOPN 3
62130: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
62131: LD_EXP 29
62135: PUSH
62136: LD_EXP 79
62140: AND
62141: IFFALSE 62297
62143: GO 62145
62145: DISABLE
62146: LD_INT 0
62148: PPUSH
62149: PPUSH
62150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
62151: LD_ADDR_VAR 0 2
62155: PUSH
62156: LD_INT 81
62158: PUSH
62159: LD_OWVAR 2
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 2
62170: PUSH
62171: LD_INT 21
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 21
62183: PUSH
62184: LD_INT 2
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: LIST
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PPUSH
62200: CALL_OW 69
62204: ST_TO_ADDR
// if not tmp then
62205: LD_VAR 0 2
62209: NOT
62210: IFFALSE 62214
// exit ;
62212: GO 62297
// p := 0 ;
62214: LD_ADDR_VAR 0 3
62218: PUSH
62219: LD_INT 0
62221: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62222: LD_INT 35
62224: PPUSH
62225: CALL_OW 67
// p := p + 1 ;
62229: LD_ADDR_VAR 0 3
62233: PUSH
62234: LD_VAR 0 3
62238: PUSH
62239: LD_INT 1
62241: PLUS
62242: ST_TO_ADDR
// for i in tmp do
62243: LD_ADDR_VAR 0 1
62247: PUSH
62248: LD_VAR 0 2
62252: PUSH
62253: FOR_IN
62254: IFFALSE 62285
// if GetLives ( i ) < 1000 then
62256: LD_VAR 0 1
62260: PPUSH
62261: CALL_OW 256
62265: PUSH
62266: LD_INT 1000
62268: LESS
62269: IFFALSE 62283
// SetLives ( i , 1000 ) ;
62271: LD_VAR 0 1
62275: PPUSH
62276: LD_INT 1000
62278: PPUSH
62279: CALL_OW 234
62283: GO 62253
62285: POP
62286: POP
// until p > 20 ;
62287: LD_VAR 0 3
62291: PUSH
62292: LD_INT 20
62294: GREATER
62295: IFFALSE 62222
// end ;
62297: PPOPN 3
62299: END
// every 0 0$1 trigger StreamModeActive and sTime do
62300: LD_EXP 29
62304: PUSH
62305: LD_EXP 80
62309: AND
62310: IFFALSE 62345
62312: GO 62314
62314: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
62315: LD_INT 28
62317: PPUSH
62318: LD_OWVAR 2
62322: PPUSH
62323: LD_INT 2
62325: PPUSH
62326: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
62330: LD_INT 30
62332: PPUSH
62333: LD_OWVAR 2
62337: PPUSH
62338: LD_INT 2
62340: PPUSH
62341: CALL_OW 322
// end ;
62345: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
62346: LD_EXP 29
62350: PUSH
62351: LD_EXP 81
62355: AND
62356: IFFALSE 62477
62358: GO 62360
62360: DISABLE
62361: LD_INT 0
62363: PPUSH
62364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62365: LD_ADDR_VAR 0 2
62369: PUSH
62370: LD_INT 22
62372: PUSH
62373: LD_OWVAR 2
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 21
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 3
62394: PUSH
62395: LD_INT 23
62397: PUSH
62398: LD_INT 0
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: LIST
62413: PPUSH
62414: CALL_OW 69
62418: ST_TO_ADDR
// if not tmp then
62419: LD_VAR 0 2
62423: NOT
62424: IFFALSE 62428
// exit ;
62426: GO 62477
// for i in tmp do
62428: LD_ADDR_VAR 0 1
62432: PUSH
62433: LD_VAR 0 2
62437: PUSH
62438: FOR_IN
62439: IFFALSE 62475
// begin if Crawls ( i ) then
62441: LD_VAR 0 1
62445: PPUSH
62446: CALL_OW 318
62450: IFFALSE 62461
// ComWalk ( i ) ;
62452: LD_VAR 0 1
62456: PPUSH
62457: CALL_OW 138
// SetClass ( i , 2 ) ;
62461: LD_VAR 0 1
62465: PPUSH
62466: LD_INT 2
62468: PPUSH
62469: CALL_OW 336
// end ;
62473: GO 62438
62475: POP
62476: POP
// end ;
62477: PPOPN 2
62479: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
62480: LD_EXP 29
62484: PUSH
62485: LD_EXP 82
62489: AND
62490: IFFALSE 62778
62492: GO 62494
62494: DISABLE
62495: LD_INT 0
62497: PPUSH
62498: PPUSH
62499: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
62500: LD_OWVAR 2
62504: PPUSH
62505: LD_INT 9
62507: PPUSH
62508: LD_INT 1
62510: PPUSH
62511: LD_INT 1
62513: PPUSH
62514: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
62518: LD_INT 9
62520: PPUSH
62521: LD_OWVAR 2
62525: PPUSH
62526: CALL_OW 343
// uc_side := 9 ;
62530: LD_ADDR_OWVAR 20
62534: PUSH
62535: LD_INT 9
62537: ST_TO_ADDR
// uc_nation := 2 ;
62538: LD_ADDR_OWVAR 21
62542: PUSH
62543: LD_INT 2
62545: ST_TO_ADDR
// hc_name := Dark Warrior ;
62546: LD_ADDR_OWVAR 26
62550: PUSH
62551: LD_STRING Dark Warrior
62553: ST_TO_ADDR
// hc_gallery :=  ;
62554: LD_ADDR_OWVAR 33
62558: PUSH
62559: LD_STRING 
62561: ST_TO_ADDR
// hc_noskilllimit := true ;
62562: LD_ADDR_OWVAR 76
62566: PUSH
62567: LD_INT 1
62569: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
62570: LD_ADDR_OWVAR 31
62574: PUSH
62575: LD_INT 30
62577: PUSH
62578: LD_INT 30
62580: PUSH
62581: LD_INT 30
62583: PUSH
62584: LD_INT 30
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: ST_TO_ADDR
// un := CreateHuman ;
62593: LD_ADDR_VAR 0 3
62597: PUSH
62598: CALL_OW 44
62602: ST_TO_ADDR
// hc_noskilllimit := false ;
62603: LD_ADDR_OWVAR 76
62607: PUSH
62608: LD_INT 0
62610: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62611: LD_VAR 0 3
62615: PPUSH
62616: LD_INT 1
62618: PPUSH
62619: CALL_OW 51
// ToLua ( playRanger() ) ;
62623: LD_STRING playRanger()
62625: PPUSH
62626: CALL_OW 559
// p := 0 ;
62630: LD_ADDR_VAR 0 2
62634: PUSH
62635: LD_INT 0
62637: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62638: LD_INT 35
62640: PPUSH
62641: CALL_OW 67
// p := p + 1 ;
62645: LD_ADDR_VAR 0 2
62649: PUSH
62650: LD_VAR 0 2
62654: PUSH
62655: LD_INT 1
62657: PLUS
62658: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
62659: LD_VAR 0 3
62663: PPUSH
62664: CALL_OW 256
62668: PUSH
62669: LD_INT 1000
62671: LESS
62672: IFFALSE 62686
// SetLives ( un , 1000 ) ;
62674: LD_VAR 0 3
62678: PPUSH
62679: LD_INT 1000
62681: PPUSH
62682: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
62686: LD_VAR 0 3
62690: PPUSH
62691: LD_INT 81
62693: PUSH
62694: LD_OWVAR 2
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 91
62705: PUSH
62706: LD_VAR 0 3
62710: PUSH
62711: LD_INT 30
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: LIST
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PPUSH
62723: CALL_OW 69
62727: PPUSH
62728: LD_VAR 0 3
62732: PPUSH
62733: CALL_OW 74
62737: PPUSH
62738: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
62742: LD_VAR 0 2
62746: PUSH
62747: LD_INT 80
62749: GREATER
62750: PUSH
62751: LD_VAR 0 3
62755: PPUSH
62756: CALL_OW 301
62760: OR
62761: IFFALSE 62638
// if un then
62763: LD_VAR 0 3
62767: IFFALSE 62778
// RemoveUnit ( un ) ;
62769: LD_VAR 0 3
62773: PPUSH
62774: CALL_OW 64
// end ;
62778: PPOPN 3
62780: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
62781: LD_EXP 83
62785: IFFALSE 62901
62787: GO 62789
62789: DISABLE
62790: LD_INT 0
62792: PPUSH
62793: PPUSH
62794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62795: LD_ADDR_VAR 0 2
62799: PUSH
62800: LD_INT 81
62802: PUSH
62803: LD_OWVAR 2
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 21
62814: PUSH
62815: LD_INT 1
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PPUSH
62826: CALL_OW 69
62830: ST_TO_ADDR
// ToLua ( playComputer() ) ;
62831: LD_STRING playComputer()
62833: PPUSH
62834: CALL_OW 559
// if not tmp then
62838: LD_VAR 0 2
62842: NOT
62843: IFFALSE 62847
// exit ;
62845: GO 62901
// for i in tmp do
62847: LD_ADDR_VAR 0 1
62851: PUSH
62852: LD_VAR 0 2
62856: PUSH
62857: FOR_IN
62858: IFFALSE 62899
// for j := 1 to 4 do
62860: LD_ADDR_VAR 0 3
62864: PUSH
62865: DOUBLE
62866: LD_INT 1
62868: DEC
62869: ST_TO_ADDR
62870: LD_INT 4
62872: PUSH
62873: FOR_TO
62874: IFFALSE 62895
// SetSkill ( i , j , 10 ) ;
62876: LD_VAR 0 1
62880: PPUSH
62881: LD_VAR 0 3
62885: PPUSH
62886: LD_INT 10
62888: PPUSH
62889: CALL_OW 237
62893: GO 62873
62895: POP
62896: POP
62897: GO 62857
62899: POP
62900: POP
// end ;
62901: PPOPN 3
62903: END
// every 0 0$1 trigger s30 do var i , tmp ;
62904: LD_EXP 84
62908: IFFALSE 62977
62910: GO 62912
62912: DISABLE
62913: LD_INT 0
62915: PPUSH
62916: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62917: LD_ADDR_VAR 0 2
62921: PUSH
62922: LD_INT 22
62924: PUSH
62925: LD_OWVAR 2
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PPUSH
62934: CALL_OW 69
62938: ST_TO_ADDR
// if not tmp then
62939: LD_VAR 0 2
62943: NOT
62944: IFFALSE 62948
// exit ;
62946: GO 62977
// for i in tmp do
62948: LD_ADDR_VAR 0 1
62952: PUSH
62953: LD_VAR 0 2
62957: PUSH
62958: FOR_IN
62959: IFFALSE 62975
// SetLives ( i , 300 ) ;
62961: LD_VAR 0 1
62965: PPUSH
62966: LD_INT 300
62968: PPUSH
62969: CALL_OW 234
62973: GO 62958
62975: POP
62976: POP
// end ;
62977: PPOPN 2
62979: END
// every 0 0$1 trigger s60 do var i , tmp ;
62980: LD_EXP 85
62984: IFFALSE 63053
62986: GO 62988
62988: DISABLE
62989: LD_INT 0
62991: PPUSH
62992: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62993: LD_ADDR_VAR 0 2
62997: PUSH
62998: LD_INT 22
63000: PUSH
63001: LD_OWVAR 2
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PPUSH
63010: CALL_OW 69
63014: ST_TO_ADDR
// if not tmp then
63015: LD_VAR 0 2
63019: NOT
63020: IFFALSE 63024
// exit ;
63022: GO 63053
// for i in tmp do
63024: LD_ADDR_VAR 0 1
63028: PUSH
63029: LD_VAR 0 2
63033: PUSH
63034: FOR_IN
63035: IFFALSE 63051
// SetLives ( i , 600 ) ;
63037: LD_VAR 0 1
63041: PPUSH
63042: LD_INT 600
63044: PPUSH
63045: CALL_OW 234
63049: GO 63034
63051: POP
63052: POP
// end ;
63053: PPOPN 2
63055: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63056: LD_INT 0
63058: PPUSH
// case cmd of 301 :
63059: LD_VAR 0 1
63063: PUSH
63064: LD_INT 301
63066: DOUBLE
63067: EQUAL
63068: IFTRUE 63072
63070: GO 63104
63072: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
63073: LD_VAR 0 6
63077: PPUSH
63078: LD_VAR 0 7
63082: PPUSH
63083: LD_VAR 0 8
63087: PPUSH
63088: LD_VAR 0 4
63092: PPUSH
63093: LD_VAR 0 5
63097: PPUSH
63098: CALL 64313 0 5
63102: GO 63225
63104: LD_INT 302
63106: DOUBLE
63107: EQUAL
63108: IFTRUE 63112
63110: GO 63149
63112: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
63113: LD_VAR 0 6
63117: PPUSH
63118: LD_VAR 0 7
63122: PPUSH
63123: LD_VAR 0 8
63127: PPUSH
63128: LD_VAR 0 9
63132: PPUSH
63133: LD_VAR 0 4
63137: PPUSH
63138: LD_VAR 0 5
63142: PPUSH
63143: CALL 64404 0 6
63147: GO 63225
63149: LD_INT 303
63151: DOUBLE
63152: EQUAL
63153: IFTRUE 63157
63155: GO 63194
63157: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
63158: LD_VAR 0 6
63162: PPUSH
63163: LD_VAR 0 7
63167: PPUSH
63168: LD_VAR 0 8
63172: PPUSH
63173: LD_VAR 0 9
63177: PPUSH
63178: LD_VAR 0 4
63182: PPUSH
63183: LD_VAR 0 5
63187: PPUSH
63188: CALL 63230 0 6
63192: GO 63225
63194: LD_INT 304
63196: DOUBLE
63197: EQUAL
63198: IFTRUE 63202
63200: GO 63224
63202: POP
// hHackTeleport ( unit , x , y ) ; end ;
63203: LD_VAR 0 2
63207: PPUSH
63208: LD_VAR 0 4
63212: PPUSH
63213: LD_VAR 0 5
63217: PPUSH
63218: CALL 64997 0 3
63222: GO 63225
63224: POP
// end ;
63225: LD_VAR 0 12
63229: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
63230: LD_INT 0
63232: PPUSH
63233: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
63234: LD_VAR 0 1
63238: PUSH
63239: LD_INT 1
63241: LESS
63242: PUSH
63243: LD_VAR 0 1
63247: PUSH
63248: LD_INT 3
63250: GREATER
63251: OR
63252: PUSH
63253: LD_VAR 0 5
63257: PPUSH
63258: LD_VAR 0 6
63262: PPUSH
63263: CALL_OW 428
63267: OR
63268: IFFALSE 63272
// exit ;
63270: GO 64000
// uc_side := your_side ;
63272: LD_ADDR_OWVAR 20
63276: PUSH
63277: LD_OWVAR 2
63281: ST_TO_ADDR
// uc_nation := nation ;
63282: LD_ADDR_OWVAR 21
63286: PUSH
63287: LD_VAR 0 1
63291: ST_TO_ADDR
// bc_level = 1 ;
63292: LD_ADDR_OWVAR 43
63296: PUSH
63297: LD_INT 1
63299: ST_TO_ADDR
// case btype of 1 :
63300: LD_VAR 0 2
63304: PUSH
63305: LD_INT 1
63307: DOUBLE
63308: EQUAL
63309: IFTRUE 63313
63311: GO 63324
63313: POP
// bc_type := b_depot ; 2 :
63314: LD_ADDR_OWVAR 42
63318: PUSH
63319: LD_INT 0
63321: ST_TO_ADDR
63322: GO 63944
63324: LD_INT 2
63326: DOUBLE
63327: EQUAL
63328: IFTRUE 63332
63330: GO 63343
63332: POP
// bc_type := b_warehouse ; 3 :
63333: LD_ADDR_OWVAR 42
63337: PUSH
63338: LD_INT 1
63340: ST_TO_ADDR
63341: GO 63944
63343: LD_INT 3
63345: DOUBLE
63346: EQUAL
63347: IFTRUE 63351
63349: GO 63362
63351: POP
// bc_type := b_lab ; 4 .. 9 :
63352: LD_ADDR_OWVAR 42
63356: PUSH
63357: LD_INT 6
63359: ST_TO_ADDR
63360: GO 63944
63362: LD_INT 4
63364: DOUBLE
63365: GREATEREQUAL
63366: IFFALSE 63374
63368: LD_INT 9
63370: DOUBLE
63371: LESSEQUAL
63372: IFTRUE 63376
63374: GO 63436
63376: POP
// begin bc_type := b_lab_half ;
63377: LD_ADDR_OWVAR 42
63381: PUSH
63382: LD_INT 7
63384: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
63385: LD_ADDR_OWVAR 44
63389: PUSH
63390: LD_INT 10
63392: PUSH
63393: LD_INT 11
63395: PUSH
63396: LD_INT 12
63398: PUSH
63399: LD_INT 15
63401: PUSH
63402: LD_INT 14
63404: PUSH
63405: LD_INT 13
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: PUSH
63416: LD_VAR 0 2
63420: PUSH
63421: LD_INT 3
63423: MINUS
63424: ARRAY
63425: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
63426: LD_ADDR_OWVAR 45
63430: PUSH
63431: LD_INT 9
63433: ST_TO_ADDR
// end ; 10 .. 13 :
63434: GO 63944
63436: LD_INT 10
63438: DOUBLE
63439: GREATEREQUAL
63440: IFFALSE 63448
63442: LD_INT 13
63444: DOUBLE
63445: LESSEQUAL
63446: IFTRUE 63450
63448: GO 63527
63450: POP
// begin bc_type := b_lab_full ;
63451: LD_ADDR_OWVAR 42
63455: PUSH
63456: LD_INT 8
63458: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
63459: LD_ADDR_OWVAR 44
63463: PUSH
63464: LD_INT 10
63466: PUSH
63467: LD_INT 12
63469: PUSH
63470: LD_INT 14
63472: PUSH
63473: LD_INT 13
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: PUSH
63482: LD_VAR 0 2
63486: PUSH
63487: LD_INT 9
63489: MINUS
63490: ARRAY
63491: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
63492: LD_ADDR_OWVAR 45
63496: PUSH
63497: LD_INT 11
63499: PUSH
63500: LD_INT 15
63502: PUSH
63503: LD_INT 12
63505: PUSH
63506: LD_INT 15
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: PUSH
63515: LD_VAR 0 2
63519: PUSH
63520: LD_INT 9
63522: MINUS
63523: ARRAY
63524: ST_TO_ADDR
// end ; 14 :
63525: GO 63944
63527: LD_INT 14
63529: DOUBLE
63530: EQUAL
63531: IFTRUE 63535
63533: GO 63546
63535: POP
// bc_type := b_workshop ; 15 :
63536: LD_ADDR_OWVAR 42
63540: PUSH
63541: LD_INT 2
63543: ST_TO_ADDR
63544: GO 63944
63546: LD_INT 15
63548: DOUBLE
63549: EQUAL
63550: IFTRUE 63554
63552: GO 63565
63554: POP
// bc_type := b_factory ; 16 :
63555: LD_ADDR_OWVAR 42
63559: PUSH
63560: LD_INT 3
63562: ST_TO_ADDR
63563: GO 63944
63565: LD_INT 16
63567: DOUBLE
63568: EQUAL
63569: IFTRUE 63573
63571: GO 63584
63573: POP
// bc_type := b_ext_gun ; 17 :
63574: LD_ADDR_OWVAR 42
63578: PUSH
63579: LD_INT 17
63581: ST_TO_ADDR
63582: GO 63944
63584: LD_INT 17
63586: DOUBLE
63587: EQUAL
63588: IFTRUE 63592
63590: GO 63620
63592: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
63593: LD_ADDR_OWVAR 42
63597: PUSH
63598: LD_INT 19
63600: PUSH
63601: LD_INT 23
63603: PUSH
63604: LD_INT 19
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: LIST
63611: PUSH
63612: LD_VAR 0 1
63616: ARRAY
63617: ST_TO_ADDR
63618: GO 63944
63620: LD_INT 18
63622: DOUBLE
63623: EQUAL
63624: IFTRUE 63628
63626: GO 63639
63628: POP
// bc_type := b_ext_radar ; 19 :
63629: LD_ADDR_OWVAR 42
63633: PUSH
63634: LD_INT 20
63636: ST_TO_ADDR
63637: GO 63944
63639: LD_INT 19
63641: DOUBLE
63642: EQUAL
63643: IFTRUE 63647
63645: GO 63658
63647: POP
// bc_type := b_ext_radio ; 20 :
63648: LD_ADDR_OWVAR 42
63652: PUSH
63653: LD_INT 22
63655: ST_TO_ADDR
63656: GO 63944
63658: LD_INT 20
63660: DOUBLE
63661: EQUAL
63662: IFTRUE 63666
63664: GO 63677
63666: POP
// bc_type := b_ext_siberium ; 21 :
63667: LD_ADDR_OWVAR 42
63671: PUSH
63672: LD_INT 21
63674: ST_TO_ADDR
63675: GO 63944
63677: LD_INT 21
63679: DOUBLE
63680: EQUAL
63681: IFTRUE 63685
63683: GO 63696
63685: POP
// bc_type := b_ext_computer ; 22 :
63686: LD_ADDR_OWVAR 42
63690: PUSH
63691: LD_INT 24
63693: ST_TO_ADDR
63694: GO 63944
63696: LD_INT 22
63698: DOUBLE
63699: EQUAL
63700: IFTRUE 63704
63702: GO 63715
63704: POP
// bc_type := b_ext_track ; 23 :
63705: LD_ADDR_OWVAR 42
63709: PUSH
63710: LD_INT 16
63712: ST_TO_ADDR
63713: GO 63944
63715: LD_INT 23
63717: DOUBLE
63718: EQUAL
63719: IFTRUE 63723
63721: GO 63734
63723: POP
// bc_type := b_ext_laser ; 24 :
63724: LD_ADDR_OWVAR 42
63728: PUSH
63729: LD_INT 25
63731: ST_TO_ADDR
63732: GO 63944
63734: LD_INT 24
63736: DOUBLE
63737: EQUAL
63738: IFTRUE 63742
63740: GO 63753
63742: POP
// bc_type := b_control_tower ; 25 :
63743: LD_ADDR_OWVAR 42
63747: PUSH
63748: LD_INT 36
63750: ST_TO_ADDR
63751: GO 63944
63753: LD_INT 25
63755: DOUBLE
63756: EQUAL
63757: IFTRUE 63761
63759: GO 63772
63761: POP
// bc_type := b_breastwork ; 26 :
63762: LD_ADDR_OWVAR 42
63766: PUSH
63767: LD_INT 31
63769: ST_TO_ADDR
63770: GO 63944
63772: LD_INT 26
63774: DOUBLE
63775: EQUAL
63776: IFTRUE 63780
63778: GO 63791
63780: POP
// bc_type := b_bunker ; 27 :
63781: LD_ADDR_OWVAR 42
63785: PUSH
63786: LD_INT 32
63788: ST_TO_ADDR
63789: GO 63944
63791: LD_INT 27
63793: DOUBLE
63794: EQUAL
63795: IFTRUE 63799
63797: GO 63810
63799: POP
// bc_type := b_turret ; 28 :
63800: LD_ADDR_OWVAR 42
63804: PUSH
63805: LD_INT 33
63807: ST_TO_ADDR
63808: GO 63944
63810: LD_INT 28
63812: DOUBLE
63813: EQUAL
63814: IFTRUE 63818
63816: GO 63829
63818: POP
// bc_type := b_armoury ; 29 :
63819: LD_ADDR_OWVAR 42
63823: PUSH
63824: LD_INT 4
63826: ST_TO_ADDR
63827: GO 63944
63829: LD_INT 29
63831: DOUBLE
63832: EQUAL
63833: IFTRUE 63837
63835: GO 63848
63837: POP
// bc_type := b_barracks ; 30 :
63838: LD_ADDR_OWVAR 42
63842: PUSH
63843: LD_INT 5
63845: ST_TO_ADDR
63846: GO 63944
63848: LD_INT 30
63850: DOUBLE
63851: EQUAL
63852: IFTRUE 63856
63854: GO 63867
63856: POP
// bc_type := b_solar_power ; 31 :
63857: LD_ADDR_OWVAR 42
63861: PUSH
63862: LD_INT 27
63864: ST_TO_ADDR
63865: GO 63944
63867: LD_INT 31
63869: DOUBLE
63870: EQUAL
63871: IFTRUE 63875
63873: GO 63886
63875: POP
// bc_type := b_oil_power ; 32 :
63876: LD_ADDR_OWVAR 42
63880: PUSH
63881: LD_INT 26
63883: ST_TO_ADDR
63884: GO 63944
63886: LD_INT 32
63888: DOUBLE
63889: EQUAL
63890: IFTRUE 63894
63892: GO 63905
63894: POP
// bc_type := b_siberite_power ; 33 :
63895: LD_ADDR_OWVAR 42
63899: PUSH
63900: LD_INT 28
63902: ST_TO_ADDR
63903: GO 63944
63905: LD_INT 33
63907: DOUBLE
63908: EQUAL
63909: IFTRUE 63913
63911: GO 63924
63913: POP
// bc_type := b_oil_mine ; 34 :
63914: LD_ADDR_OWVAR 42
63918: PUSH
63919: LD_INT 29
63921: ST_TO_ADDR
63922: GO 63944
63924: LD_INT 34
63926: DOUBLE
63927: EQUAL
63928: IFTRUE 63932
63930: GO 63943
63932: POP
// bc_type := b_siberite_mine ; end ;
63933: LD_ADDR_OWVAR 42
63937: PUSH
63938: LD_INT 30
63940: ST_TO_ADDR
63941: GO 63944
63943: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
63944: LD_ADDR_VAR 0 8
63948: PUSH
63949: LD_VAR 0 5
63953: PPUSH
63954: LD_VAR 0 6
63958: PPUSH
63959: LD_VAR 0 3
63963: PPUSH
63964: CALL_OW 47
63968: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
63969: LD_OWVAR 42
63973: PUSH
63974: LD_INT 32
63976: PUSH
63977: LD_INT 33
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: IN
63984: IFFALSE 64000
// PlaceWeaponTurret ( b , weapon ) ;
63986: LD_VAR 0 8
63990: PPUSH
63991: LD_VAR 0 4
63995: PPUSH
63996: CALL_OW 431
// end ;
64000: LD_VAR 0 7
64004: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
64005: LD_INT 0
64007: PPUSH
64008: PPUSH
64009: PPUSH
64010: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64011: LD_ADDR_VAR 0 4
64015: PUSH
64016: LD_INT 22
64018: PUSH
64019: LD_OWVAR 2
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 2
64030: PUSH
64031: LD_INT 30
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 30
64043: PUSH
64044: LD_INT 1
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: LIST
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PPUSH
64060: CALL_OW 69
64064: ST_TO_ADDR
// if not tmp then
64065: LD_VAR 0 4
64069: NOT
64070: IFFALSE 64074
// exit ;
64072: GO 64133
// for i in tmp do
64074: LD_ADDR_VAR 0 2
64078: PUSH
64079: LD_VAR 0 4
64083: PUSH
64084: FOR_IN
64085: IFFALSE 64131
// for j = 1 to 3 do
64087: LD_ADDR_VAR 0 3
64091: PUSH
64092: DOUBLE
64093: LD_INT 1
64095: DEC
64096: ST_TO_ADDR
64097: LD_INT 3
64099: PUSH
64100: FOR_TO
64101: IFFALSE 64127
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
64103: LD_VAR 0 2
64107: PPUSH
64108: CALL_OW 274
64112: PPUSH
64113: LD_VAR 0 3
64117: PPUSH
64118: LD_INT 99999
64120: PPUSH
64121: CALL_OW 277
64125: GO 64100
64127: POP
64128: POP
64129: GO 64084
64131: POP
64132: POP
// end ;
64133: LD_VAR 0 1
64137: RET
// export function hHackSetLevel10 ; var i , j ; begin
64138: LD_INT 0
64140: PPUSH
64141: PPUSH
64142: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64143: LD_ADDR_VAR 0 2
64147: PUSH
64148: LD_INT 21
64150: PUSH
64151: LD_INT 1
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PPUSH
64158: CALL_OW 69
64162: PUSH
64163: FOR_IN
64164: IFFALSE 64216
// if IsSelected ( i ) then
64166: LD_VAR 0 2
64170: PPUSH
64171: CALL_OW 306
64175: IFFALSE 64214
// begin for j := 1 to 4 do
64177: LD_ADDR_VAR 0 3
64181: PUSH
64182: DOUBLE
64183: LD_INT 1
64185: DEC
64186: ST_TO_ADDR
64187: LD_INT 4
64189: PUSH
64190: FOR_TO
64191: IFFALSE 64212
// SetSkill ( i , j , 10 ) ;
64193: LD_VAR 0 2
64197: PPUSH
64198: LD_VAR 0 3
64202: PPUSH
64203: LD_INT 10
64205: PPUSH
64206: CALL_OW 237
64210: GO 64190
64212: POP
64213: POP
// end ;
64214: GO 64163
64216: POP
64217: POP
// end ;
64218: LD_VAR 0 1
64222: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
64223: LD_INT 0
64225: PPUSH
64226: PPUSH
64227: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
64228: LD_ADDR_VAR 0 2
64232: PUSH
64233: LD_INT 22
64235: PUSH
64236: LD_OWVAR 2
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 21
64247: PUSH
64248: LD_INT 1
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PPUSH
64259: CALL_OW 69
64263: PUSH
64264: FOR_IN
64265: IFFALSE 64306
// begin for j := 1 to 4 do
64267: LD_ADDR_VAR 0 3
64271: PUSH
64272: DOUBLE
64273: LD_INT 1
64275: DEC
64276: ST_TO_ADDR
64277: LD_INT 4
64279: PUSH
64280: FOR_TO
64281: IFFALSE 64302
// SetSkill ( i , j , 10 ) ;
64283: LD_VAR 0 2
64287: PPUSH
64288: LD_VAR 0 3
64292: PPUSH
64293: LD_INT 10
64295: PPUSH
64296: CALL_OW 237
64300: GO 64280
64302: POP
64303: POP
// end ;
64304: GO 64264
64306: POP
64307: POP
// end ;
64308: LD_VAR 0 1
64312: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
64313: LD_INT 0
64315: PPUSH
// uc_side := your_side ;
64316: LD_ADDR_OWVAR 20
64320: PUSH
64321: LD_OWVAR 2
64325: ST_TO_ADDR
// uc_nation := nation ;
64326: LD_ADDR_OWVAR 21
64330: PUSH
64331: LD_VAR 0 1
64335: ST_TO_ADDR
// InitHc ;
64336: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
64340: LD_INT 0
64342: PPUSH
64343: LD_VAR 0 2
64347: PPUSH
64348: LD_VAR 0 3
64352: PPUSH
64353: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
64357: LD_VAR 0 4
64361: PPUSH
64362: LD_VAR 0 5
64366: PPUSH
64367: CALL_OW 428
64371: PUSH
64372: LD_INT 0
64374: EQUAL
64375: IFFALSE 64399
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
64377: CALL_OW 44
64381: PPUSH
64382: LD_VAR 0 4
64386: PPUSH
64387: LD_VAR 0 5
64391: PPUSH
64392: LD_INT 1
64394: PPUSH
64395: CALL_OW 48
// end ;
64399: LD_VAR 0 6
64403: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
64404: LD_INT 0
64406: PPUSH
64407: PPUSH
// uc_side := your_side ;
64408: LD_ADDR_OWVAR 20
64412: PUSH
64413: LD_OWVAR 2
64417: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
64418: LD_VAR 0 1
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: LD_INT 2
64428: PUSH
64429: LD_INT 3
64431: PUSH
64432: LD_INT 4
64434: PUSH
64435: LD_INT 5
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: IN
64445: IFFALSE 64457
// uc_nation := nation_american else
64447: LD_ADDR_OWVAR 21
64451: PUSH
64452: LD_INT 1
64454: ST_TO_ADDR
64455: GO 64500
// if chassis in [ 11 , 12 , 13 , 14 ] then
64457: LD_VAR 0 1
64461: PUSH
64462: LD_INT 11
64464: PUSH
64465: LD_INT 12
64467: PUSH
64468: LD_INT 13
64470: PUSH
64471: LD_INT 14
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: IN
64480: IFFALSE 64492
// uc_nation := nation_arabian else
64482: LD_ADDR_OWVAR 21
64486: PUSH
64487: LD_INT 2
64489: ST_TO_ADDR
64490: GO 64500
// uc_nation := nation_russian ;
64492: LD_ADDR_OWVAR 21
64496: PUSH
64497: LD_INT 3
64499: ST_TO_ADDR
// vc_chassis := chassis ;
64500: LD_ADDR_OWVAR 37
64504: PUSH
64505: LD_VAR 0 1
64509: ST_TO_ADDR
// vc_engine := engine ;
64510: LD_ADDR_OWVAR 39
64514: PUSH
64515: LD_VAR 0 2
64519: ST_TO_ADDR
// vc_control := control ;
64520: LD_ADDR_OWVAR 38
64524: PUSH
64525: LD_VAR 0 3
64529: ST_TO_ADDR
// vc_weapon := weapon ;
64530: LD_ADDR_OWVAR 40
64534: PUSH
64535: LD_VAR 0 4
64539: ST_TO_ADDR
// un := CreateVehicle ;
64540: LD_ADDR_VAR 0 8
64544: PUSH
64545: CALL_OW 45
64549: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
64550: LD_VAR 0 8
64554: PPUSH
64555: LD_INT 0
64557: PPUSH
64558: LD_INT 5
64560: PPUSH
64561: CALL_OW 12
64565: PPUSH
64566: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
64570: LD_VAR 0 8
64574: PPUSH
64575: LD_VAR 0 5
64579: PPUSH
64580: LD_VAR 0 6
64584: PPUSH
64585: LD_INT 1
64587: PPUSH
64588: CALL_OW 48
// end ;
64592: LD_VAR 0 7
64596: RET
// export hInvincible ; every 1 do
64597: GO 64599
64599: DISABLE
// hInvincible := [ ] ;
64600: LD_ADDR_EXP 86
64604: PUSH
64605: EMPTY
64606: ST_TO_ADDR
64607: END
// every 10 do var i ;
64608: GO 64610
64610: DISABLE
64611: LD_INT 0
64613: PPUSH
// begin enable ;
64614: ENABLE
// if not hInvincible then
64615: LD_EXP 86
64619: NOT
64620: IFFALSE 64624
// exit ;
64622: GO 64668
// for i in hInvincible do
64624: LD_ADDR_VAR 0 1
64628: PUSH
64629: LD_EXP 86
64633: PUSH
64634: FOR_IN
64635: IFFALSE 64666
// if GetLives ( i ) < 1000 then
64637: LD_VAR 0 1
64641: PPUSH
64642: CALL_OW 256
64646: PUSH
64647: LD_INT 1000
64649: LESS
64650: IFFALSE 64664
// SetLives ( i , 1000 ) ;
64652: LD_VAR 0 1
64656: PPUSH
64657: LD_INT 1000
64659: PPUSH
64660: CALL_OW 234
64664: GO 64634
64666: POP
64667: POP
// end ;
64668: PPOPN 1
64670: END
// export function hHackInvincible ; var i ; begin
64671: LD_INT 0
64673: PPUSH
64674: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
64675: LD_ADDR_VAR 0 2
64679: PUSH
64680: LD_INT 2
64682: PUSH
64683: LD_INT 21
64685: PUSH
64686: LD_INT 1
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 21
64695: PUSH
64696: LD_INT 2
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: LIST
64707: PPUSH
64708: CALL_OW 69
64712: PUSH
64713: FOR_IN
64714: IFFALSE 64775
// if IsSelected ( i ) then
64716: LD_VAR 0 2
64720: PPUSH
64721: CALL_OW 306
64725: IFFALSE 64773
// begin if i in hInvincible then
64727: LD_VAR 0 2
64731: PUSH
64732: LD_EXP 86
64736: IN
64737: IFFALSE 64757
// hInvincible := hInvincible diff i else
64739: LD_ADDR_EXP 86
64743: PUSH
64744: LD_EXP 86
64748: PUSH
64749: LD_VAR 0 2
64753: DIFF
64754: ST_TO_ADDR
64755: GO 64773
// hInvincible := hInvincible union i ;
64757: LD_ADDR_EXP 86
64761: PUSH
64762: LD_EXP 86
64766: PUSH
64767: LD_VAR 0 2
64771: UNION
64772: ST_TO_ADDR
// end ;
64773: GO 64713
64775: POP
64776: POP
// end ;
64777: LD_VAR 0 1
64781: RET
// export function hHackInvisible ; var i , j ; begin
64782: LD_INT 0
64784: PPUSH
64785: PPUSH
64786: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64787: LD_ADDR_VAR 0 2
64791: PUSH
64792: LD_INT 21
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PPUSH
64802: CALL_OW 69
64806: PUSH
64807: FOR_IN
64808: IFFALSE 64832
// if IsSelected ( i ) then
64810: LD_VAR 0 2
64814: PPUSH
64815: CALL_OW 306
64819: IFFALSE 64830
// ComForceInvisible ( i ) ;
64821: LD_VAR 0 2
64825: PPUSH
64826: CALL_OW 496
64830: GO 64807
64832: POP
64833: POP
// end ;
64834: LD_VAR 0 1
64838: RET
// export function hHackChangeYourSide ; begin
64839: LD_INT 0
64841: PPUSH
// if your_side = 8 then
64842: LD_OWVAR 2
64846: PUSH
64847: LD_INT 8
64849: EQUAL
64850: IFFALSE 64862
// your_side := 0 else
64852: LD_ADDR_OWVAR 2
64856: PUSH
64857: LD_INT 0
64859: ST_TO_ADDR
64860: GO 64876
// your_side := your_side + 1 ;
64862: LD_ADDR_OWVAR 2
64866: PUSH
64867: LD_OWVAR 2
64871: PUSH
64872: LD_INT 1
64874: PLUS
64875: ST_TO_ADDR
// end ;
64876: LD_VAR 0 1
64880: RET
// export function hHackChangeUnitSide ; var i , j ; begin
64881: LD_INT 0
64883: PPUSH
64884: PPUSH
64885: PPUSH
// for i in all_units do
64886: LD_ADDR_VAR 0 2
64890: PUSH
64891: LD_OWVAR 3
64895: PUSH
64896: FOR_IN
64897: IFFALSE 64975
// if IsSelected ( i ) then
64899: LD_VAR 0 2
64903: PPUSH
64904: CALL_OW 306
64908: IFFALSE 64973
// begin j := GetSide ( i ) ;
64910: LD_ADDR_VAR 0 3
64914: PUSH
64915: LD_VAR 0 2
64919: PPUSH
64920: CALL_OW 255
64924: ST_TO_ADDR
// if j = 8 then
64925: LD_VAR 0 3
64929: PUSH
64930: LD_INT 8
64932: EQUAL
64933: IFFALSE 64945
// j := 0 else
64935: LD_ADDR_VAR 0 3
64939: PUSH
64940: LD_INT 0
64942: ST_TO_ADDR
64943: GO 64959
// j := j + 1 ;
64945: LD_ADDR_VAR 0 3
64949: PUSH
64950: LD_VAR 0 3
64954: PUSH
64955: LD_INT 1
64957: PLUS
64958: ST_TO_ADDR
// SetSide ( i , j ) ;
64959: LD_VAR 0 2
64963: PPUSH
64964: LD_VAR 0 3
64968: PPUSH
64969: CALL_OW 235
// end ;
64973: GO 64896
64975: POP
64976: POP
// end ;
64977: LD_VAR 0 1
64981: RET
// export function hHackFog ; begin
64982: LD_INT 0
64984: PPUSH
// FogOff ( true ) ;
64985: LD_INT 1
64987: PPUSH
64988: CALL_OW 344
// end ;
64992: LD_VAR 0 1
64996: RET
// export function hHackTeleport ( unit , x , y ) ; begin
64997: LD_INT 0
64999: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
65000: LD_VAR 0 1
65004: PPUSH
65005: LD_VAR 0 2
65009: PPUSH
65010: LD_VAR 0 3
65014: PPUSH
65015: LD_INT 1
65017: PPUSH
65018: LD_INT 1
65020: PPUSH
65021: CALL_OW 483
// CenterOnXY ( x , y ) ;
65025: LD_VAR 0 2
65029: PPUSH
65030: LD_VAR 0 3
65034: PPUSH
65035: CALL_OW 84
// end ;
65039: LD_VAR 0 4
65043: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
65044: LD_INT 0
65046: PPUSH
65047: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
65048: LD_VAR 0 1
65052: NOT
65053: PUSH
65054: LD_VAR 0 2
65058: PPUSH
65059: LD_VAR 0 3
65063: PPUSH
65064: CALL_OW 488
65068: NOT
65069: OR
65070: PUSH
65071: LD_VAR 0 1
65075: PPUSH
65076: CALL_OW 266
65080: PUSH
65081: LD_INT 3
65083: NONEQUAL
65084: PUSH
65085: LD_VAR 0 1
65089: PPUSH
65090: CALL_OW 247
65094: PUSH
65095: LD_INT 1
65097: EQUAL
65098: NOT
65099: AND
65100: OR
65101: IFFALSE 65105
// exit ;
65103: GO 65254
// if GetType ( factory ) = unit_human then
65105: LD_VAR 0 1
65109: PPUSH
65110: CALL_OW 247
65114: PUSH
65115: LD_INT 1
65117: EQUAL
65118: IFFALSE 65135
// factory := IsInUnit ( factory ) ;
65120: LD_ADDR_VAR 0 1
65124: PUSH
65125: LD_VAR 0 1
65129: PPUSH
65130: CALL_OW 310
65134: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65135: LD_VAR 0 1
65139: PPUSH
65140: CALL_OW 266
65144: PUSH
65145: LD_INT 3
65147: NONEQUAL
65148: IFFALSE 65152
// exit ;
65150: GO 65254
// if HexInfo ( x , y ) = factory then
65152: LD_VAR 0 2
65156: PPUSH
65157: LD_VAR 0 3
65161: PPUSH
65162: CALL_OW 428
65166: PUSH
65167: LD_VAR 0 1
65171: EQUAL
65172: IFFALSE 65199
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
65174: LD_ADDR_EXP 87
65178: PUSH
65179: LD_EXP 87
65183: PPUSH
65184: LD_VAR 0 1
65188: PPUSH
65189: LD_INT 0
65191: PPUSH
65192: CALL_OW 1
65196: ST_TO_ADDR
65197: GO 65250
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
65199: LD_ADDR_EXP 87
65203: PUSH
65204: LD_EXP 87
65208: PPUSH
65209: LD_VAR 0 1
65213: PPUSH
65214: LD_VAR 0 1
65218: PPUSH
65219: CALL_OW 255
65223: PUSH
65224: LD_VAR 0 1
65228: PUSH
65229: LD_VAR 0 2
65233: PUSH
65234: LD_VAR 0 3
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: PPUSH
65245: CALL_OW 1
65249: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65250: CALL 65259 0 0
// end ;
65254: LD_VAR 0 4
65258: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65259: LD_INT 0
65261: PPUSH
65262: PPUSH
65263: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65264: LD_STRING resetFactoryWaypoint();
65266: PPUSH
65267: CALL_OW 559
// if factoryWaypoints then
65271: LD_EXP 87
65275: IFFALSE 65401
// begin list := PrepareArray ( factoryWaypoints ) ;
65277: LD_ADDR_VAR 0 3
65281: PUSH
65282: LD_EXP 87
65286: PPUSH
65287: CALL 50089 0 1
65291: ST_TO_ADDR
// for i := 1 to list do
65292: LD_ADDR_VAR 0 2
65296: PUSH
65297: DOUBLE
65298: LD_INT 1
65300: DEC
65301: ST_TO_ADDR
65302: LD_VAR 0 3
65306: PUSH
65307: FOR_TO
65308: IFFALSE 65399
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65310: LD_STRING setFactoryWaypointXY(
65312: PUSH
65313: LD_VAR 0 3
65317: PUSH
65318: LD_VAR 0 2
65322: ARRAY
65323: PUSH
65324: LD_INT 1
65326: ARRAY
65327: STR
65328: PUSH
65329: LD_STRING ,
65331: STR
65332: PUSH
65333: LD_VAR 0 3
65337: PUSH
65338: LD_VAR 0 2
65342: ARRAY
65343: PUSH
65344: LD_INT 2
65346: ARRAY
65347: STR
65348: PUSH
65349: LD_STRING ,
65351: STR
65352: PUSH
65353: LD_VAR 0 3
65357: PUSH
65358: LD_VAR 0 2
65362: ARRAY
65363: PUSH
65364: LD_INT 3
65366: ARRAY
65367: STR
65368: PUSH
65369: LD_STRING ,
65371: STR
65372: PUSH
65373: LD_VAR 0 3
65377: PUSH
65378: LD_VAR 0 2
65382: ARRAY
65383: PUSH
65384: LD_INT 4
65386: ARRAY
65387: STR
65388: PUSH
65389: LD_STRING )
65391: STR
65392: PPUSH
65393: CALL_OW 559
65397: GO 65307
65399: POP
65400: POP
// end ; end ;
65401: LD_VAR 0 1
65405: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65406: LD_INT 0
65408: PPUSH
// if HexInfo ( x , y ) = warehouse then
65409: LD_VAR 0 2
65413: PPUSH
65414: LD_VAR 0 3
65418: PPUSH
65419: CALL_OW 428
65423: PUSH
65424: LD_VAR 0 1
65428: EQUAL
65429: IFFALSE 65456
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65431: LD_ADDR_EXP 88
65435: PUSH
65436: LD_EXP 88
65440: PPUSH
65441: LD_VAR 0 1
65445: PPUSH
65446: LD_INT 0
65448: PPUSH
65449: CALL_OW 1
65453: ST_TO_ADDR
65454: GO 65507
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65456: LD_ADDR_EXP 88
65460: PUSH
65461: LD_EXP 88
65465: PPUSH
65466: LD_VAR 0 1
65470: PPUSH
65471: LD_VAR 0 1
65475: PPUSH
65476: CALL_OW 255
65480: PUSH
65481: LD_VAR 0 1
65485: PUSH
65486: LD_VAR 0 2
65490: PUSH
65491: LD_VAR 0 3
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: PPUSH
65502: CALL_OW 1
65506: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65507: CALL 65516 0 0
// end ;
65511: LD_VAR 0 4
65515: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65516: LD_INT 0
65518: PPUSH
65519: PPUSH
65520: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65521: LD_STRING resetWarehouseGatheringPoints();
65523: PPUSH
65524: CALL_OW 559
// if warehouseGatheringPoints then
65528: LD_EXP 88
65532: IFFALSE 65658
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65534: LD_ADDR_VAR 0 3
65538: PUSH
65539: LD_EXP 88
65543: PPUSH
65544: CALL 50089 0 1
65548: ST_TO_ADDR
// for i := 1 to list do
65549: LD_ADDR_VAR 0 2
65553: PUSH
65554: DOUBLE
65555: LD_INT 1
65557: DEC
65558: ST_TO_ADDR
65559: LD_VAR 0 3
65563: PUSH
65564: FOR_TO
65565: IFFALSE 65656
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65567: LD_STRING setWarehouseGatheringPointXY(
65569: PUSH
65570: LD_VAR 0 3
65574: PUSH
65575: LD_VAR 0 2
65579: ARRAY
65580: PUSH
65581: LD_INT 1
65583: ARRAY
65584: STR
65585: PUSH
65586: LD_STRING ,
65588: STR
65589: PUSH
65590: LD_VAR 0 3
65594: PUSH
65595: LD_VAR 0 2
65599: ARRAY
65600: PUSH
65601: LD_INT 2
65603: ARRAY
65604: STR
65605: PUSH
65606: LD_STRING ,
65608: STR
65609: PUSH
65610: LD_VAR 0 3
65614: PUSH
65615: LD_VAR 0 2
65619: ARRAY
65620: PUSH
65621: LD_INT 3
65623: ARRAY
65624: STR
65625: PUSH
65626: LD_STRING ,
65628: STR
65629: PUSH
65630: LD_VAR 0 3
65634: PUSH
65635: LD_VAR 0 2
65639: ARRAY
65640: PUSH
65641: LD_INT 4
65643: ARRAY
65644: STR
65645: PUSH
65646: LD_STRING )
65648: STR
65649: PPUSH
65650: CALL_OW 559
65654: GO 65564
65656: POP
65657: POP
// end ; end ;
65658: LD_VAR 0 1
65662: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
65663: LD_EXP 88
65667: IFFALSE 66352
65669: GO 65671
65671: DISABLE
65672: LD_INT 0
65674: PPUSH
65675: PPUSH
65676: PPUSH
65677: PPUSH
65678: PPUSH
65679: PPUSH
65680: PPUSH
65681: PPUSH
65682: PPUSH
// begin enable ;
65683: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
65684: LD_ADDR_VAR 0 3
65688: PUSH
65689: LD_EXP 88
65693: PPUSH
65694: CALL 50089 0 1
65698: ST_TO_ADDR
// if not list then
65699: LD_VAR 0 3
65703: NOT
65704: IFFALSE 65708
// exit ;
65706: GO 66352
// for i := 1 to list do
65708: LD_ADDR_VAR 0 1
65712: PUSH
65713: DOUBLE
65714: LD_INT 1
65716: DEC
65717: ST_TO_ADDR
65718: LD_VAR 0 3
65722: PUSH
65723: FOR_TO
65724: IFFALSE 66350
// begin depot := list [ i ] [ 2 ] ;
65726: LD_ADDR_VAR 0 8
65730: PUSH
65731: LD_VAR 0 3
65735: PUSH
65736: LD_VAR 0 1
65740: ARRAY
65741: PUSH
65742: LD_INT 2
65744: ARRAY
65745: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
65746: LD_ADDR_VAR 0 5
65750: PUSH
65751: LD_VAR 0 3
65755: PUSH
65756: LD_VAR 0 1
65760: ARRAY
65761: PUSH
65762: LD_INT 1
65764: ARRAY
65765: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
65766: LD_VAR 0 8
65770: PPUSH
65771: CALL_OW 301
65775: PUSH
65776: LD_VAR 0 5
65780: PUSH
65781: LD_VAR 0 8
65785: PPUSH
65786: CALL_OW 255
65790: NONEQUAL
65791: OR
65792: IFFALSE 65821
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
65794: LD_ADDR_EXP 88
65798: PUSH
65799: LD_EXP 88
65803: PPUSH
65804: LD_VAR 0 8
65808: PPUSH
65809: LD_INT 0
65811: PPUSH
65812: CALL_OW 1
65816: ST_TO_ADDR
// exit ;
65817: POP
65818: POP
65819: GO 66352
// end ; x := list [ i ] [ 3 ] ;
65821: LD_ADDR_VAR 0 6
65825: PUSH
65826: LD_VAR 0 3
65830: PUSH
65831: LD_VAR 0 1
65835: ARRAY
65836: PUSH
65837: LD_INT 3
65839: ARRAY
65840: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
65841: LD_ADDR_VAR 0 7
65845: PUSH
65846: LD_VAR 0 3
65850: PUSH
65851: LD_VAR 0 1
65855: ARRAY
65856: PUSH
65857: LD_INT 4
65859: ARRAY
65860: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
65861: LD_ADDR_VAR 0 9
65865: PUSH
65866: LD_VAR 0 6
65870: PPUSH
65871: LD_VAR 0 7
65875: PPUSH
65876: LD_INT 16
65878: PPUSH
65879: CALL 48677 0 3
65883: ST_TO_ADDR
// if not cratesNearbyPoint then
65884: LD_VAR 0 9
65888: NOT
65889: IFFALSE 65895
// exit ;
65891: POP
65892: POP
65893: GO 66352
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
65895: LD_ADDR_VAR 0 4
65899: PUSH
65900: LD_INT 22
65902: PUSH
65903: LD_VAR 0 5
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 3
65914: PUSH
65915: LD_INT 60
65917: PUSH
65918: EMPTY
65919: LIST
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 91
65927: PUSH
65928: LD_VAR 0 8
65932: PUSH
65933: LD_INT 6
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 2
65943: PUSH
65944: LD_INT 25
65946: PUSH
65947: LD_INT 2
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 25
65956: PUSH
65957: LD_INT 16
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: LIST
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: PPUSH
65975: CALL_OW 69
65979: PUSH
65980: LD_VAR 0 8
65984: PPUSH
65985: CALL_OW 313
65989: PPUSH
65990: LD_INT 3
65992: PUSH
65993: LD_INT 60
65995: PUSH
65996: EMPTY
65997: LIST
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 2
66005: PUSH
66006: LD_INT 25
66008: PUSH
66009: LD_INT 2
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 25
66018: PUSH
66019: LD_INT 16
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: LIST
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PPUSH
66035: CALL_OW 72
66039: UNION
66040: ST_TO_ADDR
// if tmp then
66041: LD_VAR 0 4
66045: IFFALSE 66125
// begin tmp := ShrinkArray ( tmp , 3 ) ;
66047: LD_ADDR_VAR 0 4
66051: PUSH
66052: LD_VAR 0 4
66056: PPUSH
66057: LD_INT 3
66059: PPUSH
66060: CALL 46646 0 2
66064: ST_TO_ADDR
// for j in tmp do
66065: LD_ADDR_VAR 0 2
66069: PUSH
66070: LD_VAR 0 4
66074: PUSH
66075: FOR_IN
66076: IFFALSE 66119
// begin if IsInUnit ( j ) then
66078: LD_VAR 0 2
66082: PPUSH
66083: CALL_OW 310
66087: IFFALSE 66098
// ComExit ( j ) ;
66089: LD_VAR 0 2
66093: PPUSH
66094: CALL 46729 0 1
// AddComCollect ( j , x , y ) ;
66098: LD_VAR 0 2
66102: PPUSH
66103: LD_VAR 0 6
66107: PPUSH
66108: LD_VAR 0 7
66112: PPUSH
66113: CALL_OW 177
// end ;
66117: GO 66075
66119: POP
66120: POP
// exit ;
66121: POP
66122: POP
66123: GO 66352
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
66125: LD_ADDR_VAR 0 4
66129: PUSH
66130: LD_INT 22
66132: PUSH
66133: LD_VAR 0 5
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 91
66144: PUSH
66145: LD_VAR 0 8
66149: PUSH
66150: LD_INT 8
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 2
66160: PUSH
66161: LD_INT 34
66163: PUSH
66164: LD_INT 12
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 34
66173: PUSH
66174: LD_INT 51
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 34
66183: PUSH
66184: LD_INT 32
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 34
66193: PUSH
66194: LD_INT 89
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: LIST
66212: PPUSH
66213: CALL_OW 69
66217: ST_TO_ADDR
// if tmp then
66218: LD_VAR 0 4
66222: IFFALSE 66348
// begin for j in tmp do
66224: LD_ADDR_VAR 0 2
66228: PUSH
66229: LD_VAR 0 4
66233: PUSH
66234: FOR_IN
66235: IFFALSE 66346
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
66237: LD_VAR 0 2
66241: PPUSH
66242: CALL_OW 262
66246: PUSH
66247: LD_INT 3
66249: EQUAL
66250: PUSH
66251: LD_VAR 0 2
66255: PPUSH
66256: CALL_OW 261
66260: PUSH
66261: LD_INT 20
66263: GREATER
66264: OR
66265: PUSH
66266: LD_VAR 0 2
66270: PPUSH
66271: CALL_OW 314
66275: NOT
66276: AND
66277: PUSH
66278: LD_VAR 0 2
66282: PPUSH
66283: CALL_OW 263
66287: PUSH
66288: LD_INT 1
66290: NONEQUAL
66291: PUSH
66292: LD_VAR 0 2
66296: PPUSH
66297: CALL_OW 311
66301: OR
66302: AND
66303: IFFALSE 66344
// begin ComCollect ( j , x , y ) ;
66305: LD_VAR 0 2
66309: PPUSH
66310: LD_VAR 0 6
66314: PPUSH
66315: LD_VAR 0 7
66319: PPUSH
66320: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
66324: LD_VAR 0 2
66328: PPUSH
66329: LD_VAR 0 8
66333: PPUSH
66334: CALL_OW 172
// exit ;
66338: POP
66339: POP
66340: POP
66341: POP
66342: GO 66352
// end ;
66344: GO 66234
66346: POP
66347: POP
// end ; end ;
66348: GO 65723
66350: POP
66351: POP
// end ; end_of_file
66352: PPOPN 9
66354: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
66355: LD_INT 0
66357: PPUSH
66358: PPUSH
66359: PPUSH
66360: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
66361: LD_VAR 0 1
66365: PPUSH
66366: CALL_OW 264
66370: PUSH
66371: LD_INT 91
66373: EQUAL
66374: IFFALSE 66446
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
66376: LD_INT 68
66378: PPUSH
66379: LD_VAR 0 1
66383: PPUSH
66384: CALL_OW 255
66388: PPUSH
66389: CALL_OW 321
66393: PUSH
66394: LD_INT 2
66396: EQUAL
66397: IFFALSE 66409
// eff := 70 else
66399: LD_ADDR_VAR 0 4
66403: PUSH
66404: LD_INT 70
66406: ST_TO_ADDR
66407: GO 66417
// eff := 30 ;
66409: LD_ADDR_VAR 0 4
66413: PUSH
66414: LD_INT 30
66416: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
66417: LD_VAR 0 1
66421: PPUSH
66422: CALL_OW 250
66426: PPUSH
66427: LD_VAR 0 1
66431: PPUSH
66432: CALL_OW 251
66436: PPUSH
66437: LD_VAR 0 4
66441: PPUSH
66442: CALL_OW 495
// end ; end ;
66446: LD_VAR 0 2
66450: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
66451: LD_INT 0
66453: PPUSH
// end ;
66454: LD_VAR 0 4
66458: RET
// export function SOS_Command ( cmd ) ; begin
66459: LD_INT 0
66461: PPUSH
// end ;
66462: LD_VAR 0 2
66466: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
66467: LD_INT 0
66469: PPUSH
// end ;
66470: LD_VAR 0 6
66474: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
66475: LD_INT 0
66477: PPUSH
66478: PPUSH
// if not vehicle or not factory then
66479: LD_VAR 0 1
66483: NOT
66484: PUSH
66485: LD_VAR 0 2
66489: NOT
66490: OR
66491: IFFALSE 66495
// exit ;
66493: GO 66726
// if factoryWaypoints >= factory then
66495: LD_EXP 87
66499: PUSH
66500: LD_VAR 0 2
66504: GREATEREQUAL
66505: IFFALSE 66726
// if factoryWaypoints [ factory ] then
66507: LD_EXP 87
66511: PUSH
66512: LD_VAR 0 2
66516: ARRAY
66517: IFFALSE 66726
// begin if GetControl ( vehicle ) = control_manual then
66519: LD_VAR 0 1
66523: PPUSH
66524: CALL_OW 263
66528: PUSH
66529: LD_INT 1
66531: EQUAL
66532: IFFALSE 66613
// begin driver := IsDrivenBy ( vehicle ) ;
66534: LD_ADDR_VAR 0 4
66538: PUSH
66539: LD_VAR 0 1
66543: PPUSH
66544: CALL_OW 311
66548: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66549: LD_VAR 0 4
66553: PPUSH
66554: LD_EXP 87
66558: PUSH
66559: LD_VAR 0 2
66563: ARRAY
66564: PUSH
66565: LD_INT 3
66567: ARRAY
66568: PPUSH
66569: LD_EXP 87
66573: PUSH
66574: LD_VAR 0 2
66578: ARRAY
66579: PUSH
66580: LD_INT 4
66582: ARRAY
66583: PPUSH
66584: CALL_OW 171
// AddComExitVehicle ( driver ) ;
66588: LD_VAR 0 4
66592: PPUSH
66593: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
66597: LD_VAR 0 4
66601: PPUSH
66602: LD_VAR 0 2
66606: PPUSH
66607: CALL_OW 180
// end else
66611: GO 66726
// if GetControl ( vehicle ) = control_remote then
66613: LD_VAR 0 1
66617: PPUSH
66618: CALL_OW 263
66622: PUSH
66623: LD_INT 2
66625: EQUAL
66626: IFFALSE 66687
// begin wait ( 0 0$2 ) ;
66628: LD_INT 70
66630: PPUSH
66631: CALL_OW 67
// if Connect ( vehicle ) then
66635: LD_VAR 0 1
66639: PPUSH
66640: CALL 16937 0 1
66644: IFFALSE 66685
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66646: LD_VAR 0 1
66650: PPUSH
66651: LD_EXP 87
66655: PUSH
66656: LD_VAR 0 2
66660: ARRAY
66661: PUSH
66662: LD_INT 3
66664: ARRAY
66665: PPUSH
66666: LD_EXP 87
66670: PUSH
66671: LD_VAR 0 2
66675: ARRAY
66676: PUSH
66677: LD_INT 4
66679: ARRAY
66680: PPUSH
66681: CALL_OW 171
// end else
66685: GO 66726
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66687: LD_VAR 0 1
66691: PPUSH
66692: LD_EXP 87
66696: PUSH
66697: LD_VAR 0 2
66701: ARRAY
66702: PUSH
66703: LD_INT 3
66705: ARRAY
66706: PPUSH
66707: LD_EXP 87
66711: PUSH
66712: LD_VAR 0 2
66716: ARRAY
66717: PUSH
66718: LD_INT 4
66720: ARRAY
66721: PPUSH
66722: CALL_OW 171
// end ; end ;
66726: LD_VAR 0 3
66730: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
66731: LD_INT 0
66733: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
66734: LD_VAR 0 1
66738: PUSH
66739: LD_INT 250
66741: EQUAL
66742: PUSH
66743: LD_VAR 0 2
66747: PPUSH
66748: CALL_OW 264
66752: PUSH
66753: LD_INT 81
66755: EQUAL
66756: AND
66757: IFFALSE 66778
// MinerPlaceMine ( unit , x , y ) ;
66759: LD_VAR 0 2
66763: PPUSH
66764: LD_VAR 0 4
66768: PPUSH
66769: LD_VAR 0 5
66773: PPUSH
66774: CALL 69602 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
66778: LD_VAR 0 1
66782: PUSH
66783: LD_INT 251
66785: EQUAL
66786: PUSH
66787: LD_VAR 0 2
66791: PPUSH
66792: CALL_OW 264
66796: PUSH
66797: LD_INT 81
66799: EQUAL
66800: AND
66801: IFFALSE 66822
// MinerDetonateMine ( unit , x , y ) ;
66803: LD_VAR 0 2
66807: PPUSH
66808: LD_VAR 0 4
66812: PPUSH
66813: LD_VAR 0 5
66817: PPUSH
66818: CALL 69877 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
66822: LD_VAR 0 1
66826: PUSH
66827: LD_INT 252
66829: EQUAL
66830: PUSH
66831: LD_VAR 0 2
66835: PPUSH
66836: CALL_OW 264
66840: PUSH
66841: LD_INT 81
66843: EQUAL
66844: AND
66845: IFFALSE 66866
// MinerCreateMinefield ( unit , x , y ) ;
66847: LD_VAR 0 2
66851: PPUSH
66852: LD_VAR 0 4
66856: PPUSH
66857: LD_VAR 0 5
66861: PPUSH
66862: CALL 70294 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
66866: LD_VAR 0 1
66870: PUSH
66871: LD_INT 253
66873: EQUAL
66874: PUSH
66875: LD_VAR 0 2
66879: PPUSH
66880: CALL_OW 257
66884: PUSH
66885: LD_INT 5
66887: EQUAL
66888: AND
66889: IFFALSE 66910
// ComBinocular ( unit , x , y ) ;
66891: LD_VAR 0 2
66895: PPUSH
66896: LD_VAR 0 4
66900: PPUSH
66901: LD_VAR 0 5
66905: PPUSH
66906: CALL 70663 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
66910: LD_VAR 0 1
66914: PUSH
66915: LD_INT 254
66917: EQUAL
66918: PUSH
66919: LD_VAR 0 2
66923: PPUSH
66924: CALL_OW 264
66928: PUSH
66929: LD_INT 99
66931: EQUAL
66932: AND
66933: PUSH
66934: LD_VAR 0 3
66938: PPUSH
66939: CALL_OW 263
66943: PUSH
66944: LD_INT 3
66946: EQUAL
66947: AND
66948: IFFALSE 66964
// HackDestroyVehicle ( unit , selectedUnit ) ;
66950: LD_VAR 0 2
66954: PPUSH
66955: LD_VAR 0 3
66959: PPUSH
66960: CALL 68966 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
66964: LD_VAR 0 1
66968: PUSH
66969: LD_INT 255
66971: EQUAL
66972: PUSH
66973: LD_VAR 0 2
66977: PPUSH
66978: CALL_OW 264
66982: PUSH
66983: LD_INT 14
66985: PUSH
66986: LD_INT 53
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: IN
66993: AND
66994: PUSH
66995: LD_VAR 0 4
66999: PPUSH
67000: LD_VAR 0 5
67004: PPUSH
67005: CALL_OW 488
67009: AND
67010: IFFALSE 67034
// CutTreeXYR ( unit , x , y , 12 ) ;
67012: LD_VAR 0 2
67016: PPUSH
67017: LD_VAR 0 4
67021: PPUSH
67022: LD_VAR 0 5
67026: PPUSH
67027: LD_INT 12
67029: PPUSH
67030: CALL 67129 0 4
// if cmd = 256 then
67034: LD_VAR 0 1
67038: PUSH
67039: LD_INT 256
67041: EQUAL
67042: IFFALSE 67063
// SetFactoryWaypoint ( unit , x , y ) ;
67044: LD_VAR 0 2
67048: PPUSH
67049: LD_VAR 0 4
67053: PPUSH
67054: LD_VAR 0 5
67058: PPUSH
67059: CALL 65044 0 3
// if cmd = 257 then
67063: LD_VAR 0 1
67067: PUSH
67068: LD_INT 257
67070: EQUAL
67071: IFFALSE 67092
// SetWarehouseGatheringPoint ( unit , x , y ) ;
67073: LD_VAR 0 2
67077: PPUSH
67078: LD_VAR 0 4
67082: PPUSH
67083: LD_VAR 0 5
67087: PPUSH
67088: CALL 65406 0 3
// if cmd = 258 then
67092: LD_VAR 0 1
67096: PUSH
67097: LD_INT 258
67099: EQUAL
67100: IFFALSE 67124
// BurnTreeXYR ( unit , x , y , 8 ) ;
67102: LD_VAR 0 2
67106: PPUSH
67107: LD_VAR 0 4
67111: PPUSH
67112: LD_VAR 0 5
67116: PPUSH
67117: LD_INT 8
67119: PPUSH
67120: CALL 67523 0 4
// end ;
67124: LD_VAR 0 6
67128: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
67129: LD_INT 0
67131: PPUSH
67132: PPUSH
67133: PPUSH
67134: PPUSH
67135: PPUSH
67136: PPUSH
67137: PPUSH
67138: PPUSH
67139: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
67140: LD_VAR 0 1
67144: PPUSH
67145: CALL_OW 302
67149: NOT
67150: PUSH
67151: LD_VAR 0 2
67155: PPUSH
67156: LD_VAR 0 3
67160: PPUSH
67161: CALL_OW 488
67165: NOT
67166: OR
67167: PUSH
67168: LD_VAR 0 4
67172: NOT
67173: OR
67174: IFFALSE 67178
// exit ;
67176: GO 67518
// list := [ ] ;
67178: LD_ADDR_VAR 0 13
67182: PUSH
67183: EMPTY
67184: ST_TO_ADDR
// if x - r < 0 then
67185: LD_VAR 0 2
67189: PUSH
67190: LD_VAR 0 4
67194: MINUS
67195: PUSH
67196: LD_INT 0
67198: LESS
67199: IFFALSE 67211
// min_x := 0 else
67201: LD_ADDR_VAR 0 7
67205: PUSH
67206: LD_INT 0
67208: ST_TO_ADDR
67209: GO 67227
// min_x := x - r ;
67211: LD_ADDR_VAR 0 7
67215: PUSH
67216: LD_VAR 0 2
67220: PUSH
67221: LD_VAR 0 4
67225: MINUS
67226: ST_TO_ADDR
// if y - r < 0 then
67227: LD_VAR 0 3
67231: PUSH
67232: LD_VAR 0 4
67236: MINUS
67237: PUSH
67238: LD_INT 0
67240: LESS
67241: IFFALSE 67253
// min_y := 0 else
67243: LD_ADDR_VAR 0 8
67247: PUSH
67248: LD_INT 0
67250: ST_TO_ADDR
67251: GO 67269
// min_y := y - r ;
67253: LD_ADDR_VAR 0 8
67257: PUSH
67258: LD_VAR 0 3
67262: PUSH
67263: LD_VAR 0 4
67267: MINUS
67268: ST_TO_ADDR
// max_x := x + r ;
67269: LD_ADDR_VAR 0 9
67273: PUSH
67274: LD_VAR 0 2
67278: PUSH
67279: LD_VAR 0 4
67283: PLUS
67284: ST_TO_ADDR
// max_y := y + r ;
67285: LD_ADDR_VAR 0 10
67289: PUSH
67290: LD_VAR 0 3
67294: PUSH
67295: LD_VAR 0 4
67299: PLUS
67300: ST_TO_ADDR
// for _x = min_x to max_x do
67301: LD_ADDR_VAR 0 11
67305: PUSH
67306: DOUBLE
67307: LD_VAR 0 7
67311: DEC
67312: ST_TO_ADDR
67313: LD_VAR 0 9
67317: PUSH
67318: FOR_TO
67319: IFFALSE 67436
// for _y = min_y to max_y do
67321: LD_ADDR_VAR 0 12
67325: PUSH
67326: DOUBLE
67327: LD_VAR 0 8
67331: DEC
67332: ST_TO_ADDR
67333: LD_VAR 0 10
67337: PUSH
67338: FOR_TO
67339: IFFALSE 67432
// begin if not ValidHex ( _x , _y ) then
67341: LD_VAR 0 11
67345: PPUSH
67346: LD_VAR 0 12
67350: PPUSH
67351: CALL_OW 488
67355: NOT
67356: IFFALSE 67360
// continue ;
67358: GO 67338
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
67360: LD_VAR 0 11
67364: PPUSH
67365: LD_VAR 0 12
67369: PPUSH
67370: CALL_OW 351
67374: PUSH
67375: LD_VAR 0 11
67379: PPUSH
67380: LD_VAR 0 12
67384: PPUSH
67385: CALL_OW 554
67389: AND
67390: IFFALSE 67430
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
67392: LD_ADDR_VAR 0 13
67396: PUSH
67397: LD_VAR 0 13
67401: PPUSH
67402: LD_VAR 0 13
67406: PUSH
67407: LD_INT 1
67409: PLUS
67410: PPUSH
67411: LD_VAR 0 11
67415: PUSH
67416: LD_VAR 0 12
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PPUSH
67425: CALL_OW 2
67429: ST_TO_ADDR
// end ;
67430: GO 67338
67432: POP
67433: POP
67434: GO 67318
67436: POP
67437: POP
// if not list then
67438: LD_VAR 0 13
67442: NOT
67443: IFFALSE 67447
// exit ;
67445: GO 67518
// for i in list do
67447: LD_ADDR_VAR 0 6
67451: PUSH
67452: LD_VAR 0 13
67456: PUSH
67457: FOR_IN
67458: IFFALSE 67516
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
67460: LD_VAR 0 1
67464: PPUSH
67465: LD_STRING M
67467: PUSH
67468: LD_VAR 0 6
67472: PUSH
67473: LD_INT 1
67475: ARRAY
67476: PUSH
67477: LD_VAR 0 6
67481: PUSH
67482: LD_INT 2
67484: ARRAY
67485: PUSH
67486: LD_INT 0
67488: PUSH
67489: LD_INT 0
67491: PUSH
67492: LD_INT 0
67494: PUSH
67495: LD_INT 0
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: PUSH
67507: EMPTY
67508: LIST
67509: PPUSH
67510: CALL_OW 447
67514: GO 67457
67516: POP
67517: POP
// end ;
67518: LD_VAR 0 5
67522: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
67523: LD_INT 0
67525: PPUSH
67526: PPUSH
67527: PPUSH
67528: PPUSH
67529: PPUSH
67530: PPUSH
67531: PPUSH
67532: PPUSH
67533: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
67534: LD_VAR 0 1
67538: PPUSH
67539: CALL_OW 302
67543: NOT
67544: PUSH
67545: LD_VAR 0 2
67549: PPUSH
67550: LD_VAR 0 3
67554: PPUSH
67555: CALL_OW 488
67559: NOT
67560: OR
67561: PUSH
67562: LD_VAR 0 4
67566: NOT
67567: OR
67568: IFFALSE 67572
// exit ;
67570: GO 67920
// list := [ ] ;
67572: LD_ADDR_VAR 0 13
67576: PUSH
67577: EMPTY
67578: ST_TO_ADDR
// if x - r < 0 then
67579: LD_VAR 0 2
67583: PUSH
67584: LD_VAR 0 4
67588: MINUS
67589: PUSH
67590: LD_INT 0
67592: LESS
67593: IFFALSE 67605
// min_x := 0 else
67595: LD_ADDR_VAR 0 7
67599: PUSH
67600: LD_INT 0
67602: ST_TO_ADDR
67603: GO 67621
// min_x := x - r ;
67605: LD_ADDR_VAR 0 7
67609: PUSH
67610: LD_VAR 0 2
67614: PUSH
67615: LD_VAR 0 4
67619: MINUS
67620: ST_TO_ADDR
// if y - r < 0 then
67621: LD_VAR 0 3
67625: PUSH
67626: LD_VAR 0 4
67630: MINUS
67631: PUSH
67632: LD_INT 0
67634: LESS
67635: IFFALSE 67647
// min_y := 0 else
67637: LD_ADDR_VAR 0 8
67641: PUSH
67642: LD_INT 0
67644: ST_TO_ADDR
67645: GO 67663
// min_y := y - r ;
67647: LD_ADDR_VAR 0 8
67651: PUSH
67652: LD_VAR 0 3
67656: PUSH
67657: LD_VAR 0 4
67661: MINUS
67662: ST_TO_ADDR
// max_x := x + r ;
67663: LD_ADDR_VAR 0 9
67667: PUSH
67668: LD_VAR 0 2
67672: PUSH
67673: LD_VAR 0 4
67677: PLUS
67678: ST_TO_ADDR
// max_y := y + r ;
67679: LD_ADDR_VAR 0 10
67683: PUSH
67684: LD_VAR 0 3
67688: PUSH
67689: LD_VAR 0 4
67693: PLUS
67694: ST_TO_ADDR
// for _x = min_x to max_x do
67695: LD_ADDR_VAR 0 11
67699: PUSH
67700: DOUBLE
67701: LD_VAR 0 7
67705: DEC
67706: ST_TO_ADDR
67707: LD_VAR 0 9
67711: PUSH
67712: FOR_TO
67713: IFFALSE 67830
// for _y = min_y to max_y do
67715: LD_ADDR_VAR 0 12
67719: PUSH
67720: DOUBLE
67721: LD_VAR 0 8
67725: DEC
67726: ST_TO_ADDR
67727: LD_VAR 0 10
67731: PUSH
67732: FOR_TO
67733: IFFALSE 67826
// begin if not ValidHex ( _x , _y ) then
67735: LD_VAR 0 11
67739: PPUSH
67740: LD_VAR 0 12
67744: PPUSH
67745: CALL_OW 488
67749: NOT
67750: IFFALSE 67754
// continue ;
67752: GO 67732
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
67754: LD_VAR 0 11
67758: PPUSH
67759: LD_VAR 0 12
67763: PPUSH
67764: CALL_OW 351
67768: PUSH
67769: LD_VAR 0 11
67773: PPUSH
67774: LD_VAR 0 12
67778: PPUSH
67779: CALL_OW 554
67783: AND
67784: IFFALSE 67824
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
67786: LD_ADDR_VAR 0 13
67790: PUSH
67791: LD_VAR 0 13
67795: PPUSH
67796: LD_VAR 0 13
67800: PUSH
67801: LD_INT 1
67803: PLUS
67804: PPUSH
67805: LD_VAR 0 11
67809: PUSH
67810: LD_VAR 0 12
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PPUSH
67819: CALL_OW 2
67823: ST_TO_ADDR
// end ;
67824: GO 67732
67826: POP
67827: POP
67828: GO 67712
67830: POP
67831: POP
// if not list then
67832: LD_VAR 0 13
67836: NOT
67837: IFFALSE 67841
// exit ;
67839: GO 67920
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
67841: LD_ADDR_VAR 0 13
67845: PUSH
67846: LD_VAR 0 1
67850: PPUSH
67851: LD_VAR 0 13
67855: PPUSH
67856: LD_INT 1
67858: PPUSH
67859: LD_INT 1
67861: PPUSH
67862: CALL 14079 0 4
67866: ST_TO_ADDR
// ComStop ( flame ) ;
67867: LD_VAR 0 1
67871: PPUSH
67872: CALL_OW 141
// for i in list do
67876: LD_ADDR_VAR 0 6
67880: PUSH
67881: LD_VAR 0 13
67885: PUSH
67886: FOR_IN
67887: IFFALSE 67918
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
67889: LD_VAR 0 1
67893: PPUSH
67894: LD_VAR 0 6
67898: PUSH
67899: LD_INT 1
67901: ARRAY
67902: PPUSH
67903: LD_VAR 0 6
67907: PUSH
67908: LD_INT 2
67910: ARRAY
67911: PPUSH
67912: CALL_OW 176
67916: GO 67886
67918: POP
67919: POP
// end ;
67920: LD_VAR 0 5
67924: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
67925: LD_EXP 90
67929: NOT
67930: IFFALSE 67980
67932: GO 67934
67934: DISABLE
// begin initHack := true ;
67935: LD_ADDR_EXP 90
67939: PUSH
67940: LD_INT 1
67942: ST_TO_ADDR
// hackTanks := [ ] ;
67943: LD_ADDR_EXP 91
67947: PUSH
67948: EMPTY
67949: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
67950: LD_ADDR_EXP 92
67954: PUSH
67955: EMPTY
67956: ST_TO_ADDR
// hackLimit := 3 ;
67957: LD_ADDR_EXP 93
67961: PUSH
67962: LD_INT 3
67964: ST_TO_ADDR
// hackDist := 12 ;
67965: LD_ADDR_EXP 94
67969: PUSH
67970: LD_INT 12
67972: ST_TO_ADDR
// hackCounter := [ ] ;
67973: LD_ADDR_EXP 95
67977: PUSH
67978: EMPTY
67979: ST_TO_ADDR
// end ;
67980: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
67981: LD_EXP 90
67985: PUSH
67986: LD_INT 34
67988: PUSH
67989: LD_INT 99
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PPUSH
67996: CALL_OW 69
68000: AND
68001: IFFALSE 68254
68003: GO 68005
68005: DISABLE
68006: LD_INT 0
68008: PPUSH
68009: PPUSH
// begin enable ;
68010: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
68011: LD_ADDR_VAR 0 1
68015: PUSH
68016: LD_INT 34
68018: PUSH
68019: LD_INT 99
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PPUSH
68026: CALL_OW 69
68030: PUSH
68031: FOR_IN
68032: IFFALSE 68252
// begin if not i in hackTanks then
68034: LD_VAR 0 1
68038: PUSH
68039: LD_EXP 91
68043: IN
68044: NOT
68045: IFFALSE 68128
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
68047: LD_ADDR_EXP 91
68051: PUSH
68052: LD_EXP 91
68056: PPUSH
68057: LD_EXP 91
68061: PUSH
68062: LD_INT 1
68064: PLUS
68065: PPUSH
68066: LD_VAR 0 1
68070: PPUSH
68071: CALL_OW 1
68075: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
68076: LD_ADDR_EXP 92
68080: PUSH
68081: LD_EXP 92
68085: PPUSH
68086: LD_EXP 92
68090: PUSH
68091: LD_INT 1
68093: PLUS
68094: PPUSH
68095: EMPTY
68096: PPUSH
68097: CALL_OW 1
68101: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
68102: LD_ADDR_EXP 95
68106: PUSH
68107: LD_EXP 95
68111: PPUSH
68112: LD_EXP 95
68116: PUSH
68117: LD_INT 1
68119: PLUS
68120: PPUSH
68121: EMPTY
68122: PPUSH
68123: CALL_OW 1
68127: ST_TO_ADDR
// end ; if not IsOk ( i ) then
68128: LD_VAR 0 1
68132: PPUSH
68133: CALL_OW 302
68137: NOT
68138: IFFALSE 68151
// begin HackUnlinkAll ( i ) ;
68140: LD_VAR 0 1
68144: PPUSH
68145: CALL 68257 0 1
// continue ;
68149: GO 68031
// end ; HackCheckCapturedStatus ( i ) ;
68151: LD_VAR 0 1
68155: PPUSH
68156: CALL 68700 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
68160: LD_ADDR_VAR 0 2
68164: PUSH
68165: LD_INT 81
68167: PUSH
68168: LD_VAR 0 1
68172: PPUSH
68173: CALL_OW 255
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 33
68184: PUSH
68185: LD_INT 3
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 91
68194: PUSH
68195: LD_VAR 0 1
68199: PUSH
68200: LD_EXP 94
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 50
68212: PUSH
68213: EMPTY
68214: LIST
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: PPUSH
68222: CALL_OW 69
68226: ST_TO_ADDR
// if not tmp then
68227: LD_VAR 0 2
68231: NOT
68232: IFFALSE 68236
// continue ;
68234: GO 68031
// HackLink ( i , tmp ) ;
68236: LD_VAR 0 1
68240: PPUSH
68241: LD_VAR 0 2
68245: PPUSH
68246: CALL 68393 0 2
// end ;
68250: GO 68031
68252: POP
68253: POP
// end ;
68254: PPOPN 2
68256: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
68257: LD_INT 0
68259: PPUSH
68260: PPUSH
68261: PPUSH
// if not hack in hackTanks then
68262: LD_VAR 0 1
68266: PUSH
68267: LD_EXP 91
68271: IN
68272: NOT
68273: IFFALSE 68277
// exit ;
68275: GO 68388
// index := GetElementIndex ( hackTanks , hack ) ;
68277: LD_ADDR_VAR 0 4
68281: PUSH
68282: LD_EXP 91
68286: PPUSH
68287: LD_VAR 0 1
68291: PPUSH
68292: CALL 13376 0 2
68296: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
68297: LD_EXP 92
68301: PUSH
68302: LD_VAR 0 4
68306: ARRAY
68307: IFFALSE 68388
// begin for i in hackTanksCaptured [ index ] do
68309: LD_ADDR_VAR 0 3
68313: PUSH
68314: LD_EXP 92
68318: PUSH
68319: LD_VAR 0 4
68323: ARRAY
68324: PUSH
68325: FOR_IN
68326: IFFALSE 68352
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
68328: LD_VAR 0 3
68332: PUSH
68333: LD_INT 1
68335: ARRAY
68336: PPUSH
68337: LD_VAR 0 3
68341: PUSH
68342: LD_INT 2
68344: ARRAY
68345: PPUSH
68346: CALL_OW 235
68350: GO 68325
68352: POP
68353: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
68354: LD_ADDR_EXP 92
68358: PUSH
68359: LD_EXP 92
68363: PPUSH
68364: LD_VAR 0 4
68368: PPUSH
68369: EMPTY
68370: PPUSH
68371: CALL_OW 1
68375: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
68376: LD_VAR 0 1
68380: PPUSH
68381: LD_INT 0
68383: PPUSH
68384: CALL_OW 505
// end ; end ;
68388: LD_VAR 0 2
68392: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
68393: LD_INT 0
68395: PPUSH
68396: PPUSH
68397: PPUSH
// if not hack in hackTanks or not vehicles then
68398: LD_VAR 0 1
68402: PUSH
68403: LD_EXP 91
68407: IN
68408: NOT
68409: PUSH
68410: LD_VAR 0 2
68414: NOT
68415: OR
68416: IFFALSE 68420
// exit ;
68418: GO 68695
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
68420: LD_ADDR_VAR 0 2
68424: PUSH
68425: LD_VAR 0 1
68429: PPUSH
68430: LD_VAR 0 2
68434: PPUSH
68435: LD_INT 1
68437: PPUSH
68438: LD_INT 1
68440: PPUSH
68441: CALL 14026 0 4
68445: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
68446: LD_ADDR_VAR 0 5
68450: PUSH
68451: LD_EXP 91
68455: PPUSH
68456: LD_VAR 0 1
68460: PPUSH
68461: CALL 13376 0 2
68465: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
68466: LD_EXP 92
68470: PUSH
68471: LD_VAR 0 5
68475: ARRAY
68476: PUSH
68477: LD_EXP 93
68481: LESS
68482: IFFALSE 68671
// begin for i := 1 to vehicles do
68484: LD_ADDR_VAR 0 4
68488: PUSH
68489: DOUBLE
68490: LD_INT 1
68492: DEC
68493: ST_TO_ADDR
68494: LD_VAR 0 2
68498: PUSH
68499: FOR_TO
68500: IFFALSE 68669
// begin if hackTanksCaptured [ index ] = hackLimit then
68502: LD_EXP 92
68506: PUSH
68507: LD_VAR 0 5
68511: ARRAY
68512: PUSH
68513: LD_EXP 93
68517: EQUAL
68518: IFFALSE 68522
// break ;
68520: GO 68669
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
68522: LD_ADDR_EXP 95
68526: PUSH
68527: LD_EXP 95
68531: PPUSH
68532: LD_VAR 0 5
68536: PPUSH
68537: LD_EXP 95
68541: PUSH
68542: LD_VAR 0 5
68546: ARRAY
68547: PUSH
68548: LD_INT 1
68550: PLUS
68551: PPUSH
68552: CALL_OW 1
68556: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
68557: LD_ADDR_EXP 92
68561: PUSH
68562: LD_EXP 92
68566: PPUSH
68567: LD_VAR 0 5
68571: PUSH
68572: LD_EXP 92
68576: PUSH
68577: LD_VAR 0 5
68581: ARRAY
68582: PUSH
68583: LD_INT 1
68585: PLUS
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PPUSH
68591: LD_VAR 0 2
68595: PUSH
68596: LD_VAR 0 4
68600: ARRAY
68601: PUSH
68602: LD_VAR 0 2
68606: PUSH
68607: LD_VAR 0 4
68611: ARRAY
68612: PPUSH
68613: CALL_OW 255
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PPUSH
68622: CALL 13591 0 3
68626: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
68627: LD_VAR 0 2
68631: PUSH
68632: LD_VAR 0 4
68636: ARRAY
68637: PPUSH
68638: LD_VAR 0 1
68642: PPUSH
68643: CALL_OW 255
68647: PPUSH
68648: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
68652: LD_VAR 0 2
68656: PUSH
68657: LD_VAR 0 4
68661: ARRAY
68662: PPUSH
68663: CALL_OW 141
// end ;
68667: GO 68499
68669: POP
68670: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
68671: LD_VAR 0 1
68675: PPUSH
68676: LD_EXP 92
68680: PUSH
68681: LD_VAR 0 5
68685: ARRAY
68686: PUSH
68687: LD_INT 0
68689: PLUS
68690: PPUSH
68691: CALL_OW 505
// end ;
68695: LD_VAR 0 3
68699: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
68700: LD_INT 0
68702: PPUSH
68703: PPUSH
68704: PPUSH
68705: PPUSH
// if not hack in hackTanks then
68706: LD_VAR 0 1
68710: PUSH
68711: LD_EXP 91
68715: IN
68716: NOT
68717: IFFALSE 68721
// exit ;
68719: GO 68961
// index := GetElementIndex ( hackTanks , hack ) ;
68721: LD_ADDR_VAR 0 4
68725: PUSH
68726: LD_EXP 91
68730: PPUSH
68731: LD_VAR 0 1
68735: PPUSH
68736: CALL 13376 0 2
68740: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
68741: LD_ADDR_VAR 0 3
68745: PUSH
68746: DOUBLE
68747: LD_EXP 92
68751: PUSH
68752: LD_VAR 0 4
68756: ARRAY
68757: INC
68758: ST_TO_ADDR
68759: LD_INT 1
68761: PUSH
68762: FOR_DOWNTO
68763: IFFALSE 68935
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
68765: LD_ADDR_VAR 0 5
68769: PUSH
68770: LD_EXP 92
68774: PUSH
68775: LD_VAR 0 4
68779: ARRAY
68780: PUSH
68781: LD_VAR 0 3
68785: ARRAY
68786: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
68787: LD_VAR 0 5
68791: PUSH
68792: LD_INT 1
68794: ARRAY
68795: PPUSH
68796: CALL_OW 302
68800: NOT
68801: PUSH
68802: LD_VAR 0 5
68806: PUSH
68807: LD_INT 1
68809: ARRAY
68810: PPUSH
68811: CALL_OW 255
68815: PUSH
68816: LD_VAR 0 1
68820: PPUSH
68821: CALL_OW 255
68825: NONEQUAL
68826: OR
68827: IFFALSE 68933
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
68829: LD_VAR 0 5
68833: PUSH
68834: LD_INT 1
68836: ARRAY
68837: PPUSH
68838: CALL_OW 305
68842: PUSH
68843: LD_VAR 0 5
68847: PUSH
68848: LD_INT 1
68850: ARRAY
68851: PPUSH
68852: CALL_OW 255
68856: PUSH
68857: LD_VAR 0 1
68861: PPUSH
68862: CALL_OW 255
68866: EQUAL
68867: AND
68868: IFFALSE 68892
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
68870: LD_VAR 0 5
68874: PUSH
68875: LD_INT 1
68877: ARRAY
68878: PPUSH
68879: LD_VAR 0 5
68883: PUSH
68884: LD_INT 2
68886: ARRAY
68887: PPUSH
68888: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
68892: LD_ADDR_EXP 92
68896: PUSH
68897: LD_EXP 92
68901: PPUSH
68902: LD_VAR 0 4
68906: PPUSH
68907: LD_EXP 92
68911: PUSH
68912: LD_VAR 0 4
68916: ARRAY
68917: PPUSH
68918: LD_VAR 0 3
68922: PPUSH
68923: CALL_OW 3
68927: PPUSH
68928: CALL_OW 1
68932: ST_TO_ADDR
// end ; end ;
68933: GO 68762
68935: POP
68936: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
68937: LD_VAR 0 1
68941: PPUSH
68942: LD_EXP 92
68946: PUSH
68947: LD_VAR 0 4
68951: ARRAY
68952: PUSH
68953: LD_INT 0
68955: PLUS
68956: PPUSH
68957: CALL_OW 505
// end ;
68961: LD_VAR 0 2
68965: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
68966: LD_INT 0
68968: PPUSH
68969: PPUSH
68970: PPUSH
68971: PPUSH
// if not hack in hackTanks then
68972: LD_VAR 0 1
68976: PUSH
68977: LD_EXP 91
68981: IN
68982: NOT
68983: IFFALSE 68987
// exit ;
68985: GO 69072
// index := GetElementIndex ( hackTanks , hack ) ;
68987: LD_ADDR_VAR 0 5
68991: PUSH
68992: LD_EXP 91
68996: PPUSH
68997: LD_VAR 0 1
69001: PPUSH
69002: CALL 13376 0 2
69006: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
69007: LD_ADDR_VAR 0 4
69011: PUSH
69012: DOUBLE
69013: LD_INT 1
69015: DEC
69016: ST_TO_ADDR
69017: LD_EXP 92
69021: PUSH
69022: LD_VAR 0 5
69026: ARRAY
69027: PUSH
69028: FOR_TO
69029: IFFALSE 69070
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
69031: LD_EXP 92
69035: PUSH
69036: LD_VAR 0 5
69040: ARRAY
69041: PUSH
69042: LD_VAR 0 4
69046: ARRAY
69047: PUSH
69048: LD_INT 1
69050: ARRAY
69051: PUSH
69052: LD_VAR 0 2
69056: EQUAL
69057: IFFALSE 69068
// KillUnit ( vehicle ) ;
69059: LD_VAR 0 2
69063: PPUSH
69064: CALL_OW 66
69068: GO 69028
69070: POP
69071: POP
// end ;
69072: LD_VAR 0 3
69076: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
69077: LD_EXP 96
69081: NOT
69082: IFFALSE 69117
69084: GO 69086
69086: DISABLE
// begin initMiner := true ;
69087: LD_ADDR_EXP 96
69091: PUSH
69092: LD_INT 1
69094: ST_TO_ADDR
// minersList := [ ] ;
69095: LD_ADDR_EXP 97
69099: PUSH
69100: EMPTY
69101: ST_TO_ADDR
// minerMinesList := [ ] ;
69102: LD_ADDR_EXP 98
69106: PUSH
69107: EMPTY
69108: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
69109: LD_ADDR_EXP 99
69113: PUSH
69114: LD_INT 5
69116: ST_TO_ADDR
// end ;
69117: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
69118: LD_EXP 96
69122: PUSH
69123: LD_INT 34
69125: PUSH
69126: LD_INT 81
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PPUSH
69133: CALL_OW 69
69137: AND
69138: IFFALSE 69599
69140: GO 69142
69142: DISABLE
69143: LD_INT 0
69145: PPUSH
69146: PPUSH
69147: PPUSH
69148: PPUSH
// begin enable ;
69149: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
69150: LD_ADDR_VAR 0 1
69154: PUSH
69155: LD_INT 34
69157: PUSH
69158: LD_INT 81
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PPUSH
69165: CALL_OW 69
69169: PUSH
69170: FOR_IN
69171: IFFALSE 69243
// begin if not i in minersList then
69173: LD_VAR 0 1
69177: PUSH
69178: LD_EXP 97
69182: IN
69183: NOT
69184: IFFALSE 69241
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
69186: LD_ADDR_EXP 97
69190: PUSH
69191: LD_EXP 97
69195: PPUSH
69196: LD_EXP 97
69200: PUSH
69201: LD_INT 1
69203: PLUS
69204: PPUSH
69205: LD_VAR 0 1
69209: PPUSH
69210: CALL_OW 1
69214: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
69215: LD_ADDR_EXP 98
69219: PUSH
69220: LD_EXP 98
69224: PPUSH
69225: LD_EXP 98
69229: PUSH
69230: LD_INT 1
69232: PLUS
69233: PPUSH
69234: EMPTY
69235: PPUSH
69236: CALL_OW 1
69240: ST_TO_ADDR
// end end ;
69241: GO 69170
69243: POP
69244: POP
// for i := minerMinesList downto 1 do
69245: LD_ADDR_VAR 0 1
69249: PUSH
69250: DOUBLE
69251: LD_EXP 98
69255: INC
69256: ST_TO_ADDR
69257: LD_INT 1
69259: PUSH
69260: FOR_DOWNTO
69261: IFFALSE 69597
// begin if IsLive ( minersList [ i ] ) then
69263: LD_EXP 97
69267: PUSH
69268: LD_VAR 0 1
69272: ARRAY
69273: PPUSH
69274: CALL_OW 300
69278: IFFALSE 69306
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
69280: LD_EXP 97
69284: PUSH
69285: LD_VAR 0 1
69289: ARRAY
69290: PPUSH
69291: LD_EXP 98
69295: PUSH
69296: LD_VAR 0 1
69300: ARRAY
69301: PPUSH
69302: CALL_OW 505
// if not minerMinesList [ i ] then
69306: LD_EXP 98
69310: PUSH
69311: LD_VAR 0 1
69315: ARRAY
69316: NOT
69317: IFFALSE 69321
// continue ;
69319: GO 69260
// for j := minerMinesList [ i ] downto 1 do
69321: LD_ADDR_VAR 0 2
69325: PUSH
69326: DOUBLE
69327: LD_EXP 98
69331: PUSH
69332: LD_VAR 0 1
69336: ARRAY
69337: INC
69338: ST_TO_ADDR
69339: LD_INT 1
69341: PUSH
69342: FOR_DOWNTO
69343: IFFALSE 69593
// begin side := GetSide ( minersList [ i ] ) ;
69345: LD_ADDR_VAR 0 3
69349: PUSH
69350: LD_EXP 97
69354: PUSH
69355: LD_VAR 0 1
69359: ARRAY
69360: PPUSH
69361: CALL_OW 255
69365: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
69366: LD_ADDR_VAR 0 4
69370: PUSH
69371: LD_EXP 98
69375: PUSH
69376: LD_VAR 0 1
69380: ARRAY
69381: PUSH
69382: LD_VAR 0 2
69386: ARRAY
69387: PUSH
69388: LD_INT 1
69390: ARRAY
69391: PPUSH
69392: LD_EXP 98
69396: PUSH
69397: LD_VAR 0 1
69401: ARRAY
69402: PUSH
69403: LD_VAR 0 2
69407: ARRAY
69408: PUSH
69409: LD_INT 2
69411: ARRAY
69412: PPUSH
69413: CALL_OW 428
69417: ST_TO_ADDR
// if not tmp then
69418: LD_VAR 0 4
69422: NOT
69423: IFFALSE 69427
// continue ;
69425: GO 69342
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
69427: LD_VAR 0 4
69431: PUSH
69432: LD_INT 81
69434: PUSH
69435: LD_VAR 0 3
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PPUSH
69444: CALL_OW 69
69448: IN
69449: PUSH
69450: LD_EXP 98
69454: PUSH
69455: LD_VAR 0 1
69459: ARRAY
69460: PUSH
69461: LD_VAR 0 2
69465: ARRAY
69466: PUSH
69467: LD_INT 1
69469: ARRAY
69470: PPUSH
69471: LD_EXP 98
69475: PUSH
69476: LD_VAR 0 1
69480: ARRAY
69481: PUSH
69482: LD_VAR 0 2
69486: ARRAY
69487: PUSH
69488: LD_INT 2
69490: ARRAY
69491: PPUSH
69492: CALL_OW 458
69496: AND
69497: IFFALSE 69591
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
69499: LD_EXP 98
69503: PUSH
69504: LD_VAR 0 1
69508: ARRAY
69509: PUSH
69510: LD_VAR 0 2
69514: ARRAY
69515: PUSH
69516: LD_INT 1
69518: ARRAY
69519: PPUSH
69520: LD_EXP 98
69524: PUSH
69525: LD_VAR 0 1
69529: ARRAY
69530: PUSH
69531: LD_VAR 0 2
69535: ARRAY
69536: PUSH
69537: LD_INT 2
69539: ARRAY
69540: PPUSH
69541: LD_VAR 0 3
69545: PPUSH
69546: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
69550: LD_ADDR_EXP 98
69554: PUSH
69555: LD_EXP 98
69559: PPUSH
69560: LD_VAR 0 1
69564: PPUSH
69565: LD_EXP 98
69569: PUSH
69570: LD_VAR 0 1
69574: ARRAY
69575: PPUSH
69576: LD_VAR 0 2
69580: PPUSH
69581: CALL_OW 3
69585: PPUSH
69586: CALL_OW 1
69590: ST_TO_ADDR
// end ; end ;
69591: GO 69342
69593: POP
69594: POP
// end ;
69595: GO 69260
69597: POP
69598: POP
// end ;
69599: PPOPN 4
69601: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
69602: LD_INT 0
69604: PPUSH
69605: PPUSH
// result := false ;
69606: LD_ADDR_VAR 0 4
69610: PUSH
69611: LD_INT 0
69613: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
69614: LD_VAR 0 1
69618: PPUSH
69619: CALL_OW 264
69623: PUSH
69624: LD_INT 81
69626: EQUAL
69627: NOT
69628: IFFALSE 69632
// exit ;
69630: GO 69872
// index := GetElementIndex ( minersList , unit ) ;
69632: LD_ADDR_VAR 0 5
69636: PUSH
69637: LD_EXP 97
69641: PPUSH
69642: LD_VAR 0 1
69646: PPUSH
69647: CALL 13376 0 2
69651: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
69652: LD_EXP 98
69656: PUSH
69657: LD_VAR 0 5
69661: ARRAY
69662: PUSH
69663: LD_EXP 99
69667: GREATEREQUAL
69668: IFFALSE 69672
// exit ;
69670: GO 69872
// ComMoveXY ( unit , x , y ) ;
69672: LD_VAR 0 1
69676: PPUSH
69677: LD_VAR 0 2
69681: PPUSH
69682: LD_VAR 0 3
69686: PPUSH
69687: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69691: LD_INT 35
69693: PPUSH
69694: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
69698: LD_VAR 0 1
69702: PPUSH
69703: LD_VAR 0 2
69707: PPUSH
69708: LD_VAR 0 3
69712: PPUSH
69713: CALL 45128 0 3
69717: NOT
69718: PUSH
69719: LD_VAR 0 1
69723: PPUSH
69724: CALL_OW 314
69728: AND
69729: IFFALSE 69733
// exit ;
69731: GO 69872
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
69733: LD_VAR 0 2
69737: PPUSH
69738: LD_VAR 0 3
69742: PPUSH
69743: CALL_OW 428
69747: PUSH
69748: LD_VAR 0 1
69752: EQUAL
69753: PUSH
69754: LD_VAR 0 1
69758: PPUSH
69759: CALL_OW 314
69763: NOT
69764: AND
69765: IFFALSE 69691
// PlaySoundXY ( x , y , PlantMine ) ;
69767: LD_VAR 0 2
69771: PPUSH
69772: LD_VAR 0 3
69776: PPUSH
69777: LD_STRING PlantMine
69779: PPUSH
69780: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
69784: LD_VAR 0 2
69788: PPUSH
69789: LD_VAR 0 3
69793: PPUSH
69794: LD_VAR 0 1
69798: PPUSH
69799: CALL_OW 255
69803: PPUSH
69804: LD_INT 0
69806: PPUSH
69807: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
69811: LD_ADDR_EXP 98
69815: PUSH
69816: LD_EXP 98
69820: PPUSH
69821: LD_VAR 0 5
69825: PUSH
69826: LD_EXP 98
69830: PUSH
69831: LD_VAR 0 5
69835: ARRAY
69836: PUSH
69837: LD_INT 1
69839: PLUS
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PPUSH
69845: LD_VAR 0 2
69849: PUSH
69850: LD_VAR 0 3
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PPUSH
69859: CALL 13591 0 3
69863: ST_TO_ADDR
// result := true ;
69864: LD_ADDR_VAR 0 4
69868: PUSH
69869: LD_INT 1
69871: ST_TO_ADDR
// end ;
69872: LD_VAR 0 4
69876: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
69877: LD_INT 0
69879: PPUSH
69880: PPUSH
69881: PPUSH
// if not unit in minersList then
69882: LD_VAR 0 1
69886: PUSH
69887: LD_EXP 97
69891: IN
69892: NOT
69893: IFFALSE 69897
// exit ;
69895: GO 70289
// index := GetElementIndex ( minersList , unit ) ;
69897: LD_ADDR_VAR 0 6
69901: PUSH
69902: LD_EXP 97
69906: PPUSH
69907: LD_VAR 0 1
69911: PPUSH
69912: CALL 13376 0 2
69916: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
69917: LD_ADDR_VAR 0 5
69921: PUSH
69922: DOUBLE
69923: LD_EXP 98
69927: PUSH
69928: LD_VAR 0 6
69932: ARRAY
69933: INC
69934: ST_TO_ADDR
69935: LD_INT 1
69937: PUSH
69938: FOR_DOWNTO
69939: IFFALSE 70100
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
69941: LD_EXP 98
69945: PUSH
69946: LD_VAR 0 6
69950: ARRAY
69951: PUSH
69952: LD_VAR 0 5
69956: ARRAY
69957: PUSH
69958: LD_INT 1
69960: ARRAY
69961: PUSH
69962: LD_VAR 0 2
69966: EQUAL
69967: PUSH
69968: LD_EXP 98
69972: PUSH
69973: LD_VAR 0 6
69977: ARRAY
69978: PUSH
69979: LD_VAR 0 5
69983: ARRAY
69984: PUSH
69985: LD_INT 2
69987: ARRAY
69988: PUSH
69989: LD_VAR 0 3
69993: EQUAL
69994: AND
69995: IFFALSE 70098
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69997: LD_EXP 98
70001: PUSH
70002: LD_VAR 0 6
70006: ARRAY
70007: PUSH
70008: LD_VAR 0 5
70012: ARRAY
70013: PUSH
70014: LD_INT 1
70016: ARRAY
70017: PPUSH
70018: LD_EXP 98
70022: PUSH
70023: LD_VAR 0 6
70027: ARRAY
70028: PUSH
70029: LD_VAR 0 5
70033: ARRAY
70034: PUSH
70035: LD_INT 2
70037: ARRAY
70038: PPUSH
70039: LD_VAR 0 1
70043: PPUSH
70044: CALL_OW 255
70048: PPUSH
70049: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
70053: LD_ADDR_EXP 98
70057: PUSH
70058: LD_EXP 98
70062: PPUSH
70063: LD_VAR 0 6
70067: PPUSH
70068: LD_EXP 98
70072: PUSH
70073: LD_VAR 0 6
70077: ARRAY
70078: PPUSH
70079: LD_VAR 0 5
70083: PPUSH
70084: CALL_OW 3
70088: PPUSH
70089: CALL_OW 1
70093: ST_TO_ADDR
// exit ;
70094: POP
70095: POP
70096: GO 70289
// end ; end ;
70098: GO 69938
70100: POP
70101: POP
// for i := minerMinesList [ index ] downto 1 do
70102: LD_ADDR_VAR 0 5
70106: PUSH
70107: DOUBLE
70108: LD_EXP 98
70112: PUSH
70113: LD_VAR 0 6
70117: ARRAY
70118: INC
70119: ST_TO_ADDR
70120: LD_INT 1
70122: PUSH
70123: FOR_DOWNTO
70124: IFFALSE 70287
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
70126: LD_EXP 98
70130: PUSH
70131: LD_VAR 0 6
70135: ARRAY
70136: PUSH
70137: LD_VAR 0 5
70141: ARRAY
70142: PUSH
70143: LD_INT 1
70145: ARRAY
70146: PPUSH
70147: LD_EXP 98
70151: PUSH
70152: LD_VAR 0 6
70156: ARRAY
70157: PUSH
70158: LD_VAR 0 5
70162: ARRAY
70163: PUSH
70164: LD_INT 2
70166: ARRAY
70167: PPUSH
70168: LD_VAR 0 2
70172: PPUSH
70173: LD_VAR 0 3
70177: PPUSH
70178: CALL_OW 298
70182: PUSH
70183: LD_INT 6
70185: LESS
70186: IFFALSE 70285
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
70188: LD_EXP 98
70192: PUSH
70193: LD_VAR 0 6
70197: ARRAY
70198: PUSH
70199: LD_VAR 0 5
70203: ARRAY
70204: PUSH
70205: LD_INT 1
70207: ARRAY
70208: PPUSH
70209: LD_EXP 98
70213: PUSH
70214: LD_VAR 0 6
70218: ARRAY
70219: PUSH
70220: LD_VAR 0 5
70224: ARRAY
70225: PUSH
70226: LD_INT 2
70228: ARRAY
70229: PPUSH
70230: LD_VAR 0 1
70234: PPUSH
70235: CALL_OW 255
70239: PPUSH
70240: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
70244: LD_ADDR_EXP 98
70248: PUSH
70249: LD_EXP 98
70253: PPUSH
70254: LD_VAR 0 6
70258: PPUSH
70259: LD_EXP 98
70263: PUSH
70264: LD_VAR 0 6
70268: ARRAY
70269: PPUSH
70270: LD_VAR 0 5
70274: PPUSH
70275: CALL_OW 3
70279: PPUSH
70280: CALL_OW 1
70284: ST_TO_ADDR
// end ; end ;
70285: GO 70123
70287: POP
70288: POP
// end ;
70289: LD_VAR 0 4
70293: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
70294: LD_INT 0
70296: PPUSH
70297: PPUSH
70298: PPUSH
70299: PPUSH
70300: PPUSH
70301: PPUSH
70302: PPUSH
70303: PPUSH
70304: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
70305: LD_VAR 0 1
70309: PPUSH
70310: CALL_OW 264
70314: PUSH
70315: LD_INT 81
70317: EQUAL
70318: NOT
70319: PUSH
70320: LD_VAR 0 1
70324: PUSH
70325: LD_EXP 97
70329: IN
70330: NOT
70331: OR
70332: IFFALSE 70336
// exit ;
70334: GO 70658
// index := GetElementIndex ( minersList , unit ) ;
70336: LD_ADDR_VAR 0 6
70340: PUSH
70341: LD_EXP 97
70345: PPUSH
70346: LD_VAR 0 1
70350: PPUSH
70351: CALL 13376 0 2
70355: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
70356: LD_ADDR_VAR 0 8
70360: PUSH
70361: LD_EXP 99
70365: PUSH
70366: LD_EXP 98
70370: PUSH
70371: LD_VAR 0 6
70375: ARRAY
70376: MINUS
70377: ST_TO_ADDR
// if not minesFreeAmount then
70378: LD_VAR 0 8
70382: NOT
70383: IFFALSE 70387
// exit ;
70385: GO 70658
// tmp := [ ] ;
70387: LD_ADDR_VAR 0 7
70391: PUSH
70392: EMPTY
70393: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
70394: LD_ADDR_VAR 0 5
70398: PUSH
70399: DOUBLE
70400: LD_INT 1
70402: DEC
70403: ST_TO_ADDR
70404: LD_VAR 0 8
70408: PUSH
70409: FOR_TO
70410: IFFALSE 70605
// begin _d := rand ( 0 , 5 ) ;
70412: LD_ADDR_VAR 0 11
70416: PUSH
70417: LD_INT 0
70419: PPUSH
70420: LD_INT 5
70422: PPUSH
70423: CALL_OW 12
70427: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
70428: LD_ADDR_VAR 0 12
70432: PUSH
70433: LD_INT 2
70435: PPUSH
70436: LD_INT 6
70438: PPUSH
70439: CALL_OW 12
70443: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
70444: LD_ADDR_VAR 0 9
70448: PUSH
70449: LD_VAR 0 2
70453: PPUSH
70454: LD_VAR 0 11
70458: PPUSH
70459: LD_VAR 0 12
70463: PPUSH
70464: CALL_OW 272
70468: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
70469: LD_ADDR_VAR 0 10
70473: PUSH
70474: LD_VAR 0 3
70478: PPUSH
70479: LD_VAR 0 11
70483: PPUSH
70484: LD_VAR 0 12
70488: PPUSH
70489: CALL_OW 273
70493: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
70494: LD_VAR 0 9
70498: PPUSH
70499: LD_VAR 0 10
70503: PPUSH
70504: CALL_OW 488
70508: PUSH
70509: LD_VAR 0 9
70513: PUSH
70514: LD_VAR 0 10
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_VAR 0 7
70527: IN
70528: NOT
70529: AND
70530: PUSH
70531: LD_VAR 0 9
70535: PPUSH
70536: LD_VAR 0 10
70540: PPUSH
70541: CALL_OW 458
70545: NOT
70546: AND
70547: IFFALSE 70589
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
70549: LD_ADDR_VAR 0 7
70553: PUSH
70554: LD_VAR 0 7
70558: PPUSH
70559: LD_VAR 0 7
70563: PUSH
70564: LD_INT 1
70566: PLUS
70567: PPUSH
70568: LD_VAR 0 9
70572: PUSH
70573: LD_VAR 0 10
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PPUSH
70582: CALL_OW 1
70586: ST_TO_ADDR
70587: GO 70603
// i := i - 1 ;
70589: LD_ADDR_VAR 0 5
70593: PUSH
70594: LD_VAR 0 5
70598: PUSH
70599: LD_INT 1
70601: MINUS
70602: ST_TO_ADDR
// end ;
70603: GO 70409
70605: POP
70606: POP
// for i in tmp do
70607: LD_ADDR_VAR 0 5
70611: PUSH
70612: LD_VAR 0 7
70616: PUSH
70617: FOR_IN
70618: IFFALSE 70656
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
70620: LD_VAR 0 1
70624: PPUSH
70625: LD_VAR 0 5
70629: PUSH
70630: LD_INT 1
70632: ARRAY
70633: PPUSH
70634: LD_VAR 0 5
70638: PUSH
70639: LD_INT 2
70641: ARRAY
70642: PPUSH
70643: CALL 69602 0 3
70647: NOT
70648: IFFALSE 70654
// exit ;
70650: POP
70651: POP
70652: GO 70658
70654: GO 70617
70656: POP
70657: POP
// end ;
70658: LD_VAR 0 4
70662: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
70663: LD_INT 0
70665: PPUSH
70666: PPUSH
70667: PPUSH
70668: PPUSH
70669: PPUSH
70670: PPUSH
70671: PPUSH
// if not GetClass ( unit ) = class_sniper then
70672: LD_VAR 0 1
70676: PPUSH
70677: CALL_OW 257
70681: PUSH
70682: LD_INT 5
70684: EQUAL
70685: NOT
70686: IFFALSE 70690
// exit ;
70688: GO 71078
// dist := 8 ;
70690: LD_ADDR_VAR 0 5
70694: PUSH
70695: LD_INT 8
70697: ST_TO_ADDR
// viewRange := 12 ;
70698: LD_ADDR_VAR 0 7
70702: PUSH
70703: LD_INT 12
70705: ST_TO_ADDR
// side := GetSide ( unit ) ;
70706: LD_ADDR_VAR 0 6
70710: PUSH
70711: LD_VAR 0 1
70715: PPUSH
70716: CALL_OW 255
70720: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
70721: LD_INT 61
70723: PPUSH
70724: LD_VAR 0 6
70728: PPUSH
70729: CALL_OW 321
70733: PUSH
70734: LD_INT 2
70736: EQUAL
70737: IFFALSE 70747
// viewRange := 16 ;
70739: LD_ADDR_VAR 0 7
70743: PUSH
70744: LD_INT 16
70746: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
70747: LD_VAR 0 1
70751: PPUSH
70752: LD_VAR 0 2
70756: PPUSH
70757: LD_VAR 0 3
70761: PPUSH
70762: CALL_OW 297
70766: PUSH
70767: LD_VAR 0 5
70771: GREATER
70772: IFFALSE 70851
// begin ComMoveXY ( unit , x , y ) ;
70774: LD_VAR 0 1
70778: PPUSH
70779: LD_VAR 0 2
70783: PPUSH
70784: LD_VAR 0 3
70788: PPUSH
70789: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
70793: LD_INT 35
70795: PPUSH
70796: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
70800: LD_VAR 0 1
70804: PPUSH
70805: LD_VAR 0 2
70809: PPUSH
70810: LD_VAR 0 3
70814: PPUSH
70815: CALL 45128 0 3
70819: NOT
70820: IFFALSE 70824
// exit ;
70822: GO 71078
// until GetDistUnitXY ( unit , x , y ) < dist ;
70824: LD_VAR 0 1
70828: PPUSH
70829: LD_VAR 0 2
70833: PPUSH
70834: LD_VAR 0 3
70838: PPUSH
70839: CALL_OW 297
70843: PUSH
70844: LD_VAR 0 5
70848: LESS
70849: IFFALSE 70793
// end ; ComTurnXY ( unit , x , y ) ;
70851: LD_VAR 0 1
70855: PPUSH
70856: LD_VAR 0 2
70860: PPUSH
70861: LD_VAR 0 3
70865: PPUSH
70866: CALL_OW 118
// wait ( 5 ) ;
70870: LD_INT 5
70872: PPUSH
70873: CALL_OW 67
// _d := GetDir ( unit ) ;
70877: LD_ADDR_VAR 0 10
70881: PUSH
70882: LD_VAR 0 1
70886: PPUSH
70887: CALL_OW 254
70891: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
70892: LD_ADDR_VAR 0 8
70896: PUSH
70897: LD_VAR 0 1
70901: PPUSH
70902: CALL_OW 250
70906: PPUSH
70907: LD_VAR 0 10
70911: PPUSH
70912: LD_VAR 0 5
70916: PPUSH
70917: CALL_OW 272
70921: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
70922: LD_ADDR_VAR 0 9
70926: PUSH
70927: LD_VAR 0 1
70931: PPUSH
70932: CALL_OW 251
70936: PPUSH
70937: LD_VAR 0 10
70941: PPUSH
70942: LD_VAR 0 5
70946: PPUSH
70947: CALL_OW 273
70951: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70952: LD_VAR 0 8
70956: PPUSH
70957: LD_VAR 0 9
70961: PPUSH
70962: CALL_OW 488
70966: NOT
70967: IFFALSE 70971
// exit ;
70969: GO 71078
// ComAnimCustom ( unit , 1 ) ;
70971: LD_VAR 0 1
70975: PPUSH
70976: LD_INT 1
70978: PPUSH
70979: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
70983: LD_VAR 0 8
70987: PPUSH
70988: LD_VAR 0 9
70992: PPUSH
70993: LD_VAR 0 6
70997: PPUSH
70998: LD_VAR 0 7
71002: PPUSH
71003: CALL_OW 330
// repeat wait ( 1 ) ;
71007: LD_INT 1
71009: PPUSH
71010: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
71014: LD_VAR 0 1
71018: PPUSH
71019: CALL_OW 316
71023: PUSH
71024: LD_VAR 0 1
71028: PPUSH
71029: CALL_OW 314
71033: OR
71034: PUSH
71035: LD_VAR 0 1
71039: PPUSH
71040: CALL_OW 302
71044: NOT
71045: OR
71046: PUSH
71047: LD_VAR 0 1
71051: PPUSH
71052: CALL_OW 301
71056: OR
71057: IFFALSE 71007
// RemoveSeeing ( _x , _y , side ) ;
71059: LD_VAR 0 8
71063: PPUSH
71064: LD_VAR 0 9
71068: PPUSH
71069: LD_VAR 0 6
71073: PPUSH
71074: CALL_OW 331
// end ;
71078: LD_VAR 0 4
71082: RET
