// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 5668 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 7011 0 1
  44: PPUSH
  45: CALL 133 0 1
// Multiplayer_Start ;
  49: CALL 8871 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 8987 0 0
// end ;
  69: END
// export debug , game , botSides , activeArabAttacks ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// botSides := [ 2 ] ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: ST_TO_ADDR
// activeArabAttacks := false ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// end ;
 100: LD_VAR 0 1
 104: RET
// every 0 0$01 trigger game and not debug_strings do
 105: LD_EXP 2
 109: PUSH
 110: LD_OWVAR 48
 114: NOT
 115: AND
 116: IFFALSE 132
 118: GO 120
 120: DISABLE
// begin enable ;
 121: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 122: LD_ADDR_OWVAR 47
 126: PUSH
 127: CALL 9523 0 0
 131: ST_TO_ADDR
// end ; end_of_file
 132: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp , arRVehicles ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
 142: PPUSH
 143: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
 144: LD_ADDR_EXP 5
 148: PUSH
 149: LD_VAR 0 1
 153: PPUSH
 154: LD_INT 2
 156: PPUSH
 157: LD_INT 1
 159: PPUSH
 160: CALL 14792 0 3
 164: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
 165: LD_ADDR_EXP 6
 169: PUSH
 170: LD_INT 13
 172: PUSH
 173: LD_INT 1
 175: PUSH
 176: LD_INT 1
 178: PUSH
 179: LD_INT 27
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 13
 190: PUSH
 191: LD_INT 1
 193: PUSH
 194: LD_INT 1
 196: PUSH
 197: LD_INT 27
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: PUSH
 206: LD_INT 13
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: LD_INT 1
 214: PUSH
 215: LD_INT 28
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 13
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: LD_INT 1
 232: PUSH
 233: LD_INT 25
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 13
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 1
 250: PUSH
 251: LD_INT 27
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: ST_TO_ADDR
// arBuildings := [ ] ;
 267: LD_ADDR_EXP 7
 271: PUSH
 272: EMPTY
 273: ST_TO_ADDR
// arVehicles := [ ] ;
 274: LD_ADDR_EXP 8
 278: PUSH
 279: EMPTY
 280: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
 281: LD_ADDR_EXP 9
 285: PUSH
 286: EMPTY
 287: ST_TO_ADDR
// arRVehicles := [ ] ;
 288: LD_ADDR_EXP 16
 292: PUSH
 293: EMPTY
 294: ST_TO_ADDR
// arDrivers := [ ] ;
 295: LD_ADDR_EXP 10
 299: PUSH
 300: EMPTY
 301: ST_TO_ADDR
// arVehiclesCounter := 3 ;
 302: LD_ADDR_EXP 12
 306: PUSH
 307: LD_INT 3
 309: ST_TO_ADDR
// arMinesList := [ ] ;
 310: LD_ADDR_EXP 13
 314: PUSH
 315: EMPTY
 316: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
 317: LD_ADDR_EXP 11
 321: PUSH
 322: LD_INT 8
 324: PUSH
 325: LD_INT 11
 327: PUSH
 328: LD_INT 12
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: PUSH
 336: LD_OWVAR 67
 340: ARRAY
 341: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
 342: LD_VAR 0 1
 346: PPUSH
 347: LD_INT 3
 349: PPUSH
 350: CALL 57355 0 2
// PlaceMines ( minefieldArea , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
 354: LD_INT 4
 356: PPUSH
 357: LD_INT 7
 359: PUSH
 360: LD_INT 9
 362: PUSH
 363: LD_INT 11
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_OWVAR 67
 375: ARRAY
 376: PPUSH
 377: CALL 958 0 2
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
 381: LD_ADDR_VAR 0 8
 385: PUSH
 386: LD_INT 3
 388: PUSH
 389: LD_INT 5
 391: PUSH
 392: LD_INT 7
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: LIST
 399: PUSH
 400: LD_OWVAR 67
 404: ARRAY
 405: ST_TO_ADDR
// uc_side := side ;
 406: LD_ADDR_OWVAR 20
 410: PUSH
 411: LD_VAR 0 1
 415: ST_TO_ADDR
// uc_nation := 2 ;
 416: LD_ADDR_OWVAR 21
 420: PUSH
 421: LD_INT 2
 423: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
 424: LD_ADDR_EXP 14
 428: PUSH
 429: LD_INT 2
 431: PPUSH
 432: LD_INT 1
 434: PPUSH
 435: LD_STRING 
 437: PPUSH
 438: LD_VAR 0 8
 442: PPUSH
 443: LD_INT 800
 445: PUSH
 446: LD_INT 120
 448: PUSH
 449: LD_INT 0
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: LIST
 456: PPUSH
 457: LD_INT 10
 459: PUSH
 460: LD_INT 11
 462: PUSH
 463: LD_INT 12
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: LIST
 470: PUSH
 471: LD_OWVAR 67
 475: ARRAY
 476: PUSH
 477: LD_INT 4
 479: PUSH
 480: LD_INT 6
 482: PUSH
 483: LD_INT 3
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: PPUSH
 492: CALL 23390 0 6
 496: ST_TO_ADDR
// arForceTmp := [ ] ;
 497: LD_ADDR_EXP 15
 501: PUSH
 502: EMPTY
 503: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
 504: LD_ADDR_VAR 0 3
 508: PUSH
 509: LD_INT 22
 511: PUSH
 512: LD_VAR 0 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 30
 523: PUSH
 524: LD_INT 31
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 3
 533: PUSH
 534: LD_INT 95
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: PUSH
 548: LD_INT 58
 550: PUSH
 551: EMPTY
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: PPUSH
 560: CALL_OW 69
 564: PUSH
 565: FOR_IN
 566: IFFALSE 695
// begin d := GetDir ( i ) ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: LD_VAR 0 3
 577: PPUSH
 578: CALL_OW 254
 582: ST_TO_ADDR
// if d < 3 then
 583: LD_VAR 0 4
 587: PUSH
 588: LD_INT 3
 590: LESS
 591: IFFALSE 609
// d := d + 3 else
 593: LD_ADDR_VAR 0 4
 597: PUSH
 598: LD_VAR 0 4
 602: PUSH
 603: LD_INT 3
 605: PLUS
 606: ST_TO_ADDR
 607: GO 623
// d := d - 3 ;
 609: LD_ADDR_VAR 0 4
 613: PUSH
 614: LD_VAR 0 4
 618: PUSH
 619: LD_INT 3
 621: MINUS
 622: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
 623: LD_INT 0
 625: PPUSH
 626: LD_VAR 0 8
 630: PPUSH
 631: CALL_OW 381
// un := CreateHuman ;
 635: LD_ADDR_VAR 0 6
 639: PUSH
 640: CALL_OW 44
 644: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
 645: LD_ADDR_EXP 15
 649: PUSH
 650: LD_EXP 15
 654: PPUSH
 655: LD_VAR 0 6
 659: PPUSH
 660: CALL 52420 0 2
 664: ST_TO_ADDR
// SetDir ( un , d ) ;
 665: LD_VAR 0 6
 669: PPUSH
 670: LD_VAR 0 4
 674: PPUSH
 675: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 679: LD_VAR 0 6
 683: PPUSH
 684: LD_VAR 0 3
 688: PPUSH
 689: CALL_OW 52
// end ;
 693: GO 565
 695: POP
 696: POP
// for i := 1 to 2 do
 697: LD_ADDR_VAR 0 3
 701: PUSH
 702: DOUBLE
 703: LD_INT 1
 705: DEC
 706: ST_TO_ADDR
 707: LD_INT 2
 709: PUSH
 710: FOR_TO
 711: IFFALSE 795
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_control_tower , 100 ) ;
 713: LD_INT 14
 715: PPUSH
 716: LD_INT 2
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: LD_INT 31
 724: PPUSH
 725: LD_INT 100
 727: PPUSH
 728: CALL 19569 0 5
// un := CreateVehicle ;
 732: LD_ADDR_VAR 0 6
 736: PUSH
 737: CALL_OW 45
 741: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 31 , 6 , false ) ;
 742: LD_VAR 0 6
 746: PPUSH
 747: LD_INT 102
 749: PPUSH
 750: LD_INT 31
 752: PPUSH
 753: LD_INT 6
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 50
// PrepareMechanic ( false , skill + 2 ) ;
 763: LD_INT 0
 765: PPUSH
 766: LD_VAR 0 8
 770: PUSH
 771: LD_INT 2
 773: PLUS
 774: PPUSH
 775: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
 779: CALL_OW 44
 783: PPUSH
 784: LD_VAR 0 6
 788: PPUSH
 789: CALL_OW 52
// end ;
 793: GO 710
 795: POP
 796: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
 797: LD_ADDR_VAR 0 3
 801: PUSH
 802: LD_INT 22
 804: PUSH
 805: LD_VAR 0 1
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 21
 816: PUSH
 817: LD_INT 3
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PPUSH
 828: CALL_OW 69
 832: PUSH
 833: FOR_IN
 834: IFFALSE 867
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
 836: LD_VAR 0 3
 840: PPUSH
 841: LD_INT 3
 843: PUSH
 844: LD_INT 5
 846: PUSH
 847: LD_INT 7
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: LIST
 854: PUSH
 855: LD_OWVAR 67
 859: ARRAY
 860: PPUSH
 861: CALL_OW 241
 865: GO 833
 867: POP
 868: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
 869: LD_ADDR_VAR 0 3
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: LD_INT 30
 888: PUSH
 889: LD_INT 32
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PPUSH
 900: CALL_OW 69
 904: PUSH
 905: FOR_IN
 906: IFFALSE 951
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] ) ;
 908: LD_VAR 0 3
 912: PPUSH
 913: LD_INT 27
 915: PUSH
 916: LD_INT 25
 918: PUSH
 919: LD_INT 28
 921: PUSH
 922: LD_INT 27
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_VAR 0 3
 935: PUSH
 936: LD_INT 4
 938: MOD
 939: PUSH
 940: LD_INT 1
 942: PLUS
 943: ARRAY
 944: PPUSH
 945: CALL_OW 431
 949: GO 905
 951: POP
 952: POP
// end ;
 953: LD_VAR 0 2
 957: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
 958: LD_INT 0
 960: PPUSH
 961: PPUSH
 962: PPUSH
 963: PPUSH
// tmp := AreaToList ( area , 0 ) ;
 964: LD_ADDR_VAR 0 5
 968: PUSH
 969: LD_VAR 0 1
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 517
 981: ST_TO_ADDR
// if not tmp then
 982: LD_VAR 0 5
 986: NOT
 987: IFFALSE 991
// exit ;
 989: GO 1233
// for i := 1 to n do
 991: LD_ADDR_VAR 0 4
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 2
1005: PUSH
1006: FOR_TO
1007: IFFALSE 1231
// begin r := rand ( 1 , tmp [ 1 ] ) ;
1009: LD_ADDR_VAR 0 6
1013: PUSH
1014: LD_INT 1
1016: PPUSH
1017: LD_VAR 0 5
1021: PUSH
1022: LD_INT 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 12
1030: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 1 ] , 0 ) ;
1031: LD_VAR 0 5
1035: PUSH
1036: LD_INT 1
1038: ARRAY
1039: PUSH
1040: LD_VAR 0 6
1044: ARRAY
1045: PPUSH
1046: LD_VAR 0 5
1050: PUSH
1051: LD_INT 2
1053: ARRAY
1054: PUSH
1055: LD_VAR 0 6
1059: ARRAY
1060: PPUSH
1061: LD_EXP 3
1065: PUSH
1066: LD_INT 1
1068: ARRAY
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
1077: LD_ADDR_EXP 13
1081: PUSH
1082: LD_EXP 13
1086: PPUSH
1087: LD_EXP 13
1091: PUSH
1092: LD_INT 1
1094: PLUS
1095: PPUSH
1096: LD_VAR 0 5
1100: PUSH
1101: LD_INT 1
1103: ARRAY
1104: PUSH
1105: LD_VAR 0 6
1109: ARRAY
1110: PPUSH
1111: CALL_OW 2
1115: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
1116: LD_ADDR_EXP 13
1120: PUSH
1121: LD_EXP 13
1125: PPUSH
1126: LD_EXP 13
1130: PUSH
1131: LD_INT 1
1133: PLUS
1134: PPUSH
1135: LD_VAR 0 5
1139: PUSH
1140: LD_INT 2
1142: ARRAY
1143: PUSH
1144: LD_VAR 0 6
1148: ARRAY
1149: PPUSH
1150: CALL_OW 2
1154: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
1155: LD_ADDR_VAR 0 5
1159: PUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_VAR 0 5
1172: PUSH
1173: LD_INT 1
1175: ARRAY
1176: PPUSH
1177: LD_VAR 0 6
1181: PPUSH
1182: CALL_OW 3
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
1192: LD_ADDR_VAR 0 5
1196: PUSH
1197: LD_VAR 0 5
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: LD_VAR 0 5
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_VAR 0 6
1218: PPUSH
1219: CALL_OW 3
1223: PPUSH
1224: CALL_OW 1
1228: ST_TO_ADDR
// end ;
1229: GO 1006
1231: POP
1232: POP
// end ;
1233: LD_VAR 0 3
1237: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , j , tmp , undone , ct , inside , veh , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
1238: LD_INT 0
1240: PPUSH
1241: PPUSH
1242: PPUSH
1243: PPUSH
1244: PPUSH
1245: PPUSH
1246: PPUSH
1247: PPUSH
1248: PPUSH
1249: PPUSH
1250: PPUSH
1251: PPUSH
1252: PPUSH
1253: PPUSH
1254: PPUSH
1255: PPUSH
1256: PPUSH
1257: PPUSH
1258: PPUSH
1259: PPUSH
1260: PPUSH
1261: PPUSH
1262: PPUSH
1263: PPUSH
1264: PPUSH
1265: PPUSH
1266: PPUSH
1267: PPUSH
1268: PPUSH
1269: PPUSH
1270: PPUSH
// enable ;
1271: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
1272: LD_ADDR_VAR 0 11
1276: PUSH
1277: LD_INT 81
1279: PUSH
1280: LD_VAR 0 1
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// if tmp then
1294: LD_VAR 0 11
1298: IFFALSE 1319
// enemySide := GetSide ( tmp [ 1 ] ) ;
1300: LD_ADDR_VAR 0 38
1304: PUSH
1305: LD_VAR 0 11
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 255
1318: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
1319: LD_ADDR_VAR 0 26
1323: PUSH
1324: LD_VAR 0 3
1328: PPUSH
1329: LD_INT 81
1331: PUSH
1332: LD_VAR 0 1
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PPUSH
1341: CALL_OW 70
1345: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
1346: LD_ADDR_VAR 0 27
1350: PUSH
1351: LD_VAR 0 4
1355: PPUSH
1356: LD_INT 81
1358: PUSH
1359: LD_VAR 0 1
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PPUSH
1368: CALL_OW 70
1372: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ;
1373: LD_ADDR_VAR 0 13
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_VAR 0 1
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 50
1392: PUSH
1393: EMPTY
1394: LIST
1395: PUSH
1396: LD_INT 34
1398: PUSH
1399: LD_INT 31
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: PPUSH
1411: CALL_OW 69
1415: ST_TO_ADDR
// if ct then
1416: LD_VAR 0 13
1420: IFFALSE 1511
// begin veh := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) ;
1422: LD_ADDR_VAR 0 15
1426: PUSH
1427: LD_INT 22
1429: PUSH
1430: LD_VAR 0 1
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 3
1441: PUSH
1442: LD_INT 61
1444: PUSH
1445: EMPTY
1446: LIST
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 50
1454: PUSH
1455: EMPTY
1456: LIST
1457: PUSH
1458: LD_INT 33
1460: PUSH
1461: LD_INT 2
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: PPUSH
1474: CALL_OW 69
1478: ST_TO_ADDR
// if veh then
1479: LD_VAR 0 15
1483: IFFALSE 1511
// for i in veh do
1485: LD_ADDR_VAR 0 9
1489: PUSH
1490: LD_VAR 0 15
1494: PUSH
1495: FOR_IN
1496: IFFALSE 1509
// Connect ( i ) ;
1498: LD_VAR 0 9
1502: PPUSH
1503: CALL 23037 0 1
1507: GO 1495
1509: POP
1510: POP
// end ; vehicles := arVehicles ;
1511: LD_ADDR_VAR 0 30
1515: PUSH
1516: LD_EXP 8
1520: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1521: LD_ADDR_VAR 0 36
1525: PUSH
1526: LD_VAR 0 3
1530: PPUSH
1531: LD_INT 22
1533: PUSH
1534: LD_VAR 0 1
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 30
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: LD_INT 30
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// if depot then
1580: LD_VAR 0 36
1584: IFFALSE 1600
// depot := depot [ 1 ] ;
1586: LD_ADDR_VAR 0 36
1590: PUSH
1591: LD_VAR 0 36
1595: PUSH
1596: LD_INT 1
1598: ARRAY
1599: ST_TO_ADDR
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
1600: LD_ADDR_VAR 0 22
1604: PUSH
1605: LD_VAR 0 5
1609: PPUSH
1610: LD_INT 25
1612: PUSH
1613: LD_INT 4
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 50
1622: PUSH
1623: EMPTY
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PPUSH
1630: CALL_OW 72
1634: ST_TO_ADDR
// if arTech then
1635: LD_EXP 5
1639: IFFALSE 2001
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1641: LD_ADDR_VAR 0 16
1645: PUSH
1646: LD_VAR 0 3
1650: PPUSH
1651: LD_INT 22
1653: PUSH
1654: LD_VAR 0 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PUSH
1663: LD_INT 50
1665: PUSH
1666: EMPTY
1667: LIST
1668: PUSH
1669: LD_INT 2
1671: PUSH
1672: LD_INT 30
1674: PUSH
1675: LD_INT 6
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: LD_INT 30
1684: PUSH
1685: LD_INT 7
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PUSH
1692: LD_INT 30
1694: PUSH
1695: LD_INT 8
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: PPUSH
1713: CALL_OW 70
1717: ST_TO_ADDR
// if lab then
1718: LD_VAR 0 16
1722: IFFALSE 2001
// begin for j := 1 to Count ( lab ) do
1724: LD_ADDR_VAR 0 10
1728: PUSH
1729: DOUBLE
1730: LD_INT 1
1732: DEC
1733: ST_TO_ADDR
1734: LD_VAR 0 16
1738: PPUSH
1739: CALL 16831 0 1
1743: PUSH
1744: FOR_TO
1745: IFFALSE 1999
// if BuildingStatus ( lab [ j ] ) = bs_idle then
1747: LD_VAR 0 16
1751: PUSH
1752: LD_VAR 0 10
1756: ARRAY
1757: PPUSH
1758: CALL_OW 461
1762: PUSH
1763: LD_INT 2
1765: EQUAL
1766: IFFALSE 1849
// begin for i in arTech do
1768: LD_ADDR_VAR 0 9
1772: PUSH
1773: LD_EXP 5
1777: PUSH
1778: FOR_IN
1779: IFFALSE 1845
// if CanBeResearched ( lab [ j ] , i ) and GetTech ( i , side ) = state_enabled then
1781: LD_VAR 0 16
1785: PUSH
1786: LD_VAR 0 10
1790: ARRAY
1791: PPUSH
1792: LD_VAR 0 9
1796: PPUSH
1797: CALL_OW 430
1801: PUSH
1802: LD_VAR 0 9
1806: PPUSH
1807: LD_VAR 0 1
1811: PPUSH
1812: CALL_OW 321
1816: PUSH
1817: LD_INT 1
1819: EQUAL
1820: AND
1821: IFFALSE 1843
// begin AddComResearch ( lab [ j ] , i ) ;
1823: LD_VAR 0 16
1827: PUSH
1828: LD_VAR 0 10
1832: ARRAY
1833: PPUSH
1834: LD_VAR 0 9
1838: PPUSH
1839: CALL_OW 184
// end ;
1843: GO 1778
1845: POP
1846: POP
// end else
1847: GO 1997
// if BuildingStatus ( lab [ j ] ) = bs_need_people then
1849: LD_VAR 0 16
1853: PUSH
1854: LD_VAR 0 10
1858: ARRAY
1859: PPUSH
1860: CALL_OW 461
1864: PUSH
1865: LD_INT 6
1867: EQUAL
1868: IFFALSE 1997
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
1870: LD_ADDR_VAR 0 9
1874: PUSH
1875: LD_VAR 0 22
1879: PPUSH
1880: LD_INT 3
1882: PUSH
1883: LD_INT 120
1885: PUSH
1886: LD_INT 10
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PPUSH
1897: CALL_OW 72
1901: PUSH
1902: FOR_IN
1903: IFFALSE 1995
// begin inside := IsInUnit ( i ) ;
1905: LD_ADDR_VAR 0 14
1909: PUSH
1910: LD_VAR 0 9
1914: PPUSH
1915: CALL_OW 310
1919: ST_TO_ADDR
// if not inside then
1920: LD_VAR 0 14
1924: NOT
1925: IFFALSE 1949
// ComEnterUnit ( i , lab [ j ] ) else
1927: LD_VAR 0 9
1931: PPUSH
1932: LD_VAR 0 16
1936: PUSH
1937: LD_VAR 0 10
1941: ARRAY
1942: PPUSH
1943: CALL_OW 120
1947: GO 1993
// if BuildingStatus ( inside ) = bs_idle then
1949: LD_VAR 0 14
1953: PPUSH
1954: CALL_OW 461
1958: PUSH
1959: LD_INT 2
1961: EQUAL
1962: IFFALSE 1993
// begin ComExitBuilding ( i ) ;
1964: LD_VAR 0 9
1968: PPUSH
1969: CALL_OW 122
// AddComEnterUnit ( i , lab [ j ] ) ;
1973: LD_VAR 0 9
1977: PPUSH
1978: LD_VAR 0 16
1982: PUSH
1983: LD_VAR 0 10
1987: ARRAY
1988: PPUSH
1989: CALL_OW 180
// end ; end ;
1993: GO 1902
1995: POP
1996: POP
// end ;
1997: GO 1744
1999: POP
2000: POP
// end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2001: LD_ADDR_VAR 0 33
2005: PUSH
2006: LD_VAR 0 3
2010: PPUSH
2011: LD_INT 22
2013: PUSH
2014: LD_VAR 0 1
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 30
2025: PUSH
2026: LD_INT 3
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: PUSH
2033: LD_INT 50
2035: PUSH
2036: EMPTY
2037: LIST
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 70
2048: ST_TO_ADDR
// if fac then
2049: LD_VAR 0 33
2053: IFFALSE 2388
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2055: LD_VAR 0 33
2059: PUSH
2060: LD_INT 1
2062: ARRAY
2063: PPUSH
2064: CALL_OW 461
2068: PUSH
2069: LD_INT 2
2071: EQUAL
2072: IFFALSE 2388
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2074: LD_ADDR_VAR 0 34
2078: PUSH
2079: LD_VAR 0 3
2083: PPUSH
2084: LD_INT 2
2086: PUSH
2087: LD_INT 30
2089: PUSH
2090: LD_INT 32
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 30
2099: PUSH
2100: LD_INT 33
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 35
2114: PUSH
2115: LD_INT 0
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PPUSH
2126: CALL_OW 70
2130: ST_TO_ADDR
// if emptyTowers then
2131: LD_VAR 0 34
2135: IFFALSE 2185
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
2137: LD_ADDR_VAR 0 35
2141: PUSH
2142: LD_VAR 0 34
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PPUSH
2151: LD_VAR 0 3
2155: PPUSH
2156: CALL 25076 0 2
2160: ST_TO_ADDR
// if weapon then
2161: LD_VAR 0 35
2165: IFFALSE 2185
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2167: LD_VAR 0 34
2171: PUSH
2172: LD_INT 1
2174: ARRAY
2175: PPUSH
2176: LD_VAR 0 35
2180: PPUSH
2181: CALL_OW 148
// end ; if arConstructList then
2185: LD_EXP 6
2189: IFFALSE 2388
// for i := 1 to Count ( arConstructList ) do
2191: LD_ADDR_VAR 0 9
2195: PUSH
2196: DOUBLE
2197: LD_INT 1
2199: DEC
2200: ST_TO_ADDR
2201: LD_EXP 6
2205: PPUSH
2206: CALL 16831 0 1
2210: PUSH
2211: FOR_TO
2212: IFFALSE 2386
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
2214: LD_VAR 0 33
2218: PUSH
2219: LD_INT 1
2221: ARRAY
2222: PPUSH
2223: LD_EXP 6
2227: PUSH
2228: LD_VAR 0 9
2232: ARRAY
2233: PUSH
2234: LD_INT 1
2236: ARRAY
2237: PPUSH
2238: LD_EXP 6
2242: PUSH
2243: LD_VAR 0 9
2247: ARRAY
2248: PUSH
2249: LD_INT 2
2251: ARRAY
2252: PPUSH
2253: LD_EXP 6
2257: PUSH
2258: LD_VAR 0 9
2262: ARRAY
2263: PUSH
2264: LD_INT 3
2266: ARRAY
2267: PPUSH
2268: LD_EXP 6
2272: PUSH
2273: LD_VAR 0 9
2277: ARRAY
2278: PUSH
2279: LD_INT 4
2281: ARRAY
2282: PPUSH
2283: CALL_OW 448
2287: IFFALSE 2384
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
2289: LD_VAR 0 33
2293: PUSH
2294: LD_INT 1
2296: ARRAY
2297: PPUSH
2298: LD_EXP 6
2302: PUSH
2303: LD_VAR 0 9
2307: ARRAY
2308: PUSH
2309: LD_INT 1
2311: ARRAY
2312: PPUSH
2313: LD_EXP 6
2317: PUSH
2318: LD_VAR 0 9
2322: ARRAY
2323: PUSH
2324: LD_INT 2
2326: ARRAY
2327: PPUSH
2328: LD_EXP 6
2332: PUSH
2333: LD_VAR 0 9
2337: ARRAY
2338: PUSH
2339: LD_INT 3
2341: ARRAY
2342: PPUSH
2343: LD_EXP 6
2347: PUSH
2348: LD_VAR 0 9
2352: ARRAY
2353: PUSH
2354: LD_INT 4
2356: ARRAY
2357: PPUSH
2358: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
2362: LD_ADDR_EXP 6
2366: PUSH
2367: LD_EXP 6
2371: PPUSH
2372: LD_VAR 0 9
2376: PPUSH
2377: CALL_OW 3
2381: ST_TO_ADDR
// break ;
2382: GO 2386
// end ; end ;
2384: GO 2211
2386: POP
2387: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2388: LD_ADDR_VAR 0 11
2392: PUSH
2393: LD_VAR 0 3
2397: PPUSH
2398: LD_INT 21
2400: PUSH
2401: LD_INT 3
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 3
2410: PUSH
2411: LD_INT 57
2413: PUSH
2414: EMPTY
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PUSH
2421: LD_INT 3
2423: PUSH
2424: LD_INT 24
2426: PUSH
2427: LD_INT 1000
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: LIST
2442: PPUSH
2443: CALL_OW 70
2447: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
2448: LD_ADDR_VAR 0 21
2452: PUSH
2453: LD_VAR 0 3
2457: PPUSH
2458: CALL_OW 435
2462: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
2463: LD_ADDR_VAR 0 18
2467: PUSH
2468: LD_VAR 0 5
2472: PPUSH
2473: LD_INT 25
2475: PUSH
2476: LD_INT 3
2478: PUSH
2479: EMPTY
2480: LIST
2481: LIST
2482: PUSH
2483: LD_INT 50
2485: PUSH
2486: EMPTY
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PPUSH
2493: CALL_OW 72
2497: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
2498: LD_VAR 0 18
2502: PPUSH
2503: LD_INT 3
2505: PUSH
2506: LD_INT 120
2508: PUSH
2509: LD_INT 7
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 3
2522: PUSH
2523: LD_INT 54
2525: PUSH
2526: EMPTY
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: PPUSH
2537: CALL_OW 72
2541: PUSH
2542: LD_VAR 0 33
2546: PUSH
2547: LD_INT 1
2549: ARRAY
2550: PPUSH
2551: CALL_OW 302
2555: AND
2556: IFFALSE 2615
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
2558: LD_VAR 0 18
2562: PPUSH
2563: LD_INT 3
2565: PUSH
2566: LD_INT 120
2568: PUSH
2569: LD_INT 7
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 3
2582: PUSH
2583: LD_INT 54
2585: PUSH
2586: EMPTY
2587: LIST
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: PPUSH
2597: CALL_OW 72
2601: PPUSH
2602: LD_VAR 0 33
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: CALL_OW 120
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2615: LD_ADDR_VAR 0 16
2619: PUSH
2620: LD_VAR 0 3
2624: PPUSH
2625: LD_INT 2
2627: PUSH
2628: LD_INT 30
2630: PUSH
2631: LD_INT 6
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: PUSH
2638: LD_INT 30
2640: PUSH
2641: LD_INT 7
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 30
2650: PUSH
2651: LD_INT 8
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: PPUSH
2664: CALL_OW 70
2668: ST_TO_ADDR
// if sci then
2669: LD_VAR 0 22
2673: IFFALSE 2916
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
2675: LD_ADDR_VAR 0 24
2679: PUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: LD_INT 95
2687: PUSH
2688: LD_VAR 0 3
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: LD_INT 120
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PPUSH
2711: CALL_OW 72
2715: ST_TO_ADDR
// if hurtUnits then
2716: LD_VAR 0 24
2720: IFFALSE 2815
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
2722: LD_ADDR_VAR 0 9
2726: PUSH
2727: LD_VAR 0 22
2731: PPUSH
2732: LD_INT 3
2734: PUSH
2735: LD_INT 120
2737: PUSH
2738: LD_INT 10
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PPUSH
2749: CALL_OW 72
2753: PUSH
2754: FOR_IN
2755: IFFALSE 2811
// begin SetTag ( i , tHealer ) ;
2757: LD_VAR 0 9
2761: PPUSH
2762: LD_INT 10
2764: PPUSH
2765: CALL_OW 109
// if IsInUnit ( i ) then
2769: LD_VAR 0 9
2773: PPUSH
2774: CALL_OW 310
2778: IFFALSE 2791
// ComExitBuilding ( i ) else
2780: LD_VAR 0 9
2784: PPUSH
2785: CALL_OW 122
2789: GO 2809
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2791: LD_VAR 0 9
2795: PPUSH
2796: LD_VAR 0 24
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PPUSH
2805: CALL_OW 128
// end ;
2809: GO 2754
2811: POP
2812: POP
// end else
2813: GO 2916
// if lab and UnitFilter ( sci , [ f_tag , tHealer ] ) then
2815: LD_VAR 0 16
2819: PUSH
2820: LD_VAR 0 22
2824: PPUSH
2825: LD_INT 120
2827: PUSH
2828: LD_INT 10
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 72
2839: AND
2840: IFFALSE 2916
// begin for i in UnitFilter ( sci , [ f_tag , tHealer ] ) do
2842: LD_ADDR_VAR 0 9
2846: PUSH
2847: LD_VAR 0 22
2851: PPUSH
2852: LD_INT 120
2854: PUSH
2855: LD_INT 10
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: PPUSH
2862: CALL_OW 72
2866: PUSH
2867: FOR_IN
2868: IFFALSE 2914
// begin SetTag ( i , 0 ) ;
2870: LD_VAR 0 9
2874: PPUSH
2875: LD_INT 0
2877: PPUSH
2878: CALL_OW 109
// if not IsInUnit ( i ) then
2882: LD_VAR 0 9
2886: PPUSH
2887: CALL_OW 310
2891: NOT
2892: IFFALSE 2912
// ComEnterUnit ( i , lab [ 1 ] ) ;
2894: LD_VAR 0 9
2898: PPUSH
2899: LD_VAR 0 16
2903: PUSH
2904: LD_INT 1
2906: ARRAY
2907: PPUSH
2908: CALL_OW 120
// end ;
2912: GO 2867
2914: POP
2915: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
2916: LD_ADDR_VAR 0 17
2920: PUSH
2921: LD_VAR 0 5
2925: PPUSH
2926: LD_INT 25
2928: PUSH
2929: LD_INT 2
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PPUSH
2936: CALL_OW 72
2940: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
2941: LD_ADDR_VAR 0 37
2945: PUSH
2946: LD_EXP 7
2950: ST_TO_ADDR
// if eng then
2951: LD_VAR 0 17
2955: IFFALSE 3789
// begin for i in eng do
2957: LD_ADDR_VAR 0 9
2961: PUSH
2962: LD_VAR 0 17
2966: PUSH
2967: FOR_IN
2968: IFFALSE 3787
// begin tag := GetTag ( i ) ;
2970: LD_ADDR_VAR 0 19
2974: PUSH
2975: LD_VAR 0 9
2979: PPUSH
2980: CALL_OW 110
2984: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
2985: LD_VAR 0 9
2989: PPUSH
2990: LD_VAR 0 4
2994: PPUSH
2995: CALL_OW 308
2999: IFFALSE 3030
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
3001: LD_VAR 0 9
3005: PPUSH
3006: LD_VAR 0 7
3010: PUSH
3011: LD_INT 1
3013: ARRAY
3014: PPUSH
3015: LD_VAR 0 7
3019: PUSH
3020: LD_INT 2
3022: ARRAY
3023: PPUSH
3024: CALL_OW 111
// continue ;
3028: GO 2967
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
3030: LD_VAR 0 9
3034: PPUSH
3035: CALL_OW 256
3039: PUSH
3040: LD_INT 800
3042: LESS
3043: PUSH
3044: LD_VAR 0 19
3048: PUSH
3049: LD_INT 1
3051: NONEQUAL
3052: AND
3053: IFFALSE 3103
// begin SetTag ( i , tHeal ) ;
3055: LD_VAR 0 9
3059: PPUSH
3060: LD_INT 1
3062: PPUSH
3063: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
3067: LD_VAR 0 9
3071: PPUSH
3072: LD_VAR 0 6
3076: PUSH
3077: LD_INT 1
3079: ARRAY
3080: PPUSH
3081: LD_VAR 0 6
3085: PUSH
3086: LD_INT 2
3088: ARRAY
3089: PPUSH
3090: CALL_OW 111
// AddComHold ( i ) ;
3094: LD_VAR 0 9
3098: PPUSH
3099: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
3103: LD_VAR 0 19
3107: PUSH
3108: LD_INT 1
3110: EQUAL
3111: PUSH
3112: LD_VAR 0 9
3116: PPUSH
3117: CALL_OW 256
3121: PUSH
3122: LD_INT 1000
3124: EQUAL
3125: AND
3126: IFFALSE 3140
// SetTag ( i , 0 ) ;
3128: LD_VAR 0 9
3132: PPUSH
3133: LD_INT 0
3135: PPUSH
3136: CALL_OW 109
// if not tag then
3140: LD_VAR 0 19
3144: NOT
3145: IFFALSE 3312
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3147: LD_ADDR_VAR 0 12
3151: PUSH
3152: LD_VAR 0 3
3156: PPUSH
3157: LD_INT 57
3159: PUSH
3160: EMPTY
3161: LIST
3162: PPUSH
3163: CALL_OW 70
3167: ST_TO_ADDR
// if undone then
3168: LD_VAR 0 12
3172: IFFALSE 3194
// begin ComComplete ( i , undone [ 1 ] ) ;
3174: LD_VAR 0 9
3178: PPUSH
3179: LD_VAR 0 12
3183: PUSH
3184: LD_INT 1
3186: ARRAY
3187: PPUSH
3188: CALL 22929 0 2
// continue ;
3192: GO 2967
// end ; if cr or tmp or buildingsToBuild then
3194: LD_VAR 0 21
3198: PUSH
3199: LD_VAR 0 11
3203: OR
3204: PUSH
3205: LD_VAR 0 37
3209: OR
3210: IFFALSE 3286
// begin if IsInUnit ( i ) then
3212: LD_VAR 0 9
3216: PPUSH
3217: CALL_OW 310
3221: IFFALSE 3232
// ComExitBuilding ( i ) ;
3223: LD_VAR 0 9
3227: PPUSH
3228: CALL_OW 122
// if tmp then
3232: LD_VAR 0 11
3236: IFFALSE 3252
// SetTag ( i , tRepair ) else
3238: LD_VAR 0 9
3242: PPUSH
3243: LD_INT 3
3245: PPUSH
3246: CALL_OW 109
3250: GO 3284
// if cr then
3252: LD_VAR 0 21
3256: IFFALSE 3272
// SetTag ( i , tCrates ) else
3258: LD_VAR 0 9
3262: PPUSH
3263: LD_INT 2
3265: PPUSH
3266: CALL_OW 109
3270: GO 3284
// SetTag ( i , tBuild ) ;
3272: LD_VAR 0 9
3276: PPUSH
3277: LD_INT 5
3279: PPUSH
3280: CALL_OW 109
// end else
3284: GO 3312
// if not IsInUnit ( i ) then
3286: LD_VAR 0 9
3290: PPUSH
3291: CALL_OW 310
3295: NOT
3296: IFFALSE 3312
// ComEnterUnit ( i , depot ) ;
3298: LD_VAR 0 9
3302: PPUSH
3303: LD_VAR 0 36
3307: PPUSH
3308: CALL_OW 120
// end ; if tag = tRepair then
3312: LD_VAR 0 19
3316: PUSH
3317: LD_INT 3
3319: EQUAL
3320: IFFALSE 3426
// begin if IsInUnit ( i ) then
3322: LD_VAR 0 9
3326: PPUSH
3327: CALL_OW 310
3331: IFFALSE 3344
// begin ComExitBuilding ( i ) ;
3333: LD_VAR 0 9
3337: PPUSH
3338: CALL_OW 122
// continue ;
3342: GO 2967
// end ; if not tmp then
3344: LD_VAR 0 11
3348: NOT
3349: IFFALSE 3365
// begin SetTag ( i , 0 ) ;
3351: LD_VAR 0 9
3355: PPUSH
3356: LD_INT 0
3358: PPUSH
3359: CALL_OW 109
// continue ;
3363: GO 2967
// end ; if not HasTask ( i ) then
3365: LD_VAR 0 9
3369: PPUSH
3370: CALL_OW 314
3374: NOT
3375: IFFALSE 3395
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3377: LD_VAR 0 9
3381: PPUSH
3382: LD_VAR 0 11
3386: PUSH
3387: LD_INT 1
3389: ARRAY
3390: PPUSH
3391: CALL_OW 130
// if not IsInArea ( i , area ) then
3395: LD_VAR 0 9
3399: PPUSH
3400: LD_VAR 0 3
3404: PPUSH
3405: CALL_OW 308
3409: NOT
3410: IFFALSE 3426
// ComMoveToArea ( i , area ) ;
3412: LD_VAR 0 9
3416: PPUSH
3417: LD_VAR 0 3
3421: PPUSH
3422: CALL_OW 113
// end ; if tag = tBuild then
3426: LD_VAR 0 19
3430: PUSH
3431: LD_INT 5
3433: EQUAL
3434: IFFALSE 3640
// begin if IsInUnit ( i ) then
3436: LD_VAR 0 9
3440: PPUSH
3441: CALL_OW 310
3445: IFFALSE 3458
// begin ComExitBuilding ( i ) ;
3447: LD_VAR 0 9
3451: PPUSH
3452: CALL_OW 122
// continue ;
3456: GO 2967
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
3458: LD_VAR 0 37
3462: NOT
3463: PUSH
3464: LD_VAR 0 26
3468: OR
3469: PUSH
3470: LD_VAR 0 27
3474: OR
3475: IFFALSE 3493
// begin SetTag ( i , 0 ) ;
3477: LD_VAR 0 9
3481: PPUSH
3482: LD_INT 0
3484: PPUSH
3485: CALL_OW 109
// continue ;
3489: GO 2967
// end else
3491: GO 3532
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
3493: LD_VAR 0 36
3497: PPUSH
3498: LD_VAR 0 37
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: PUSH
3507: LD_INT 1
3509: ARRAY
3510: PPUSH
3511: CALL 56339 0 2
3515: NOT
3516: IFFALSE 3532
// begin SetTag ( i , 0 ) ;
3518: LD_VAR 0 9
3522: PPUSH
3523: LD_INT 0
3525: PPUSH
3526: CALL_OW 109
// continue ;
3530: GO 2967
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3532: LD_ADDR_VAR 0 12
3536: PUSH
3537: LD_VAR 0 3
3541: PPUSH
3542: LD_INT 57
3544: PUSH
3545: EMPTY
3546: LIST
3547: PPUSH
3548: CALL_OW 70
3552: ST_TO_ADDR
// if undone then
3553: LD_VAR 0 12
3557: IFFALSE 3579
// begin ComComplete ( i , undone [ 1 ] ) ;
3559: LD_VAR 0 9
3563: PPUSH
3564: LD_VAR 0 12
3568: PUSH
3569: LD_INT 1
3571: ARRAY
3572: PPUSH
3573: CALL 22929 0 2
// continue ;
3577: GO 2967
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
3579: LD_VAR 0 9
3583: PPUSH
3584: LD_VAR 0 37
3588: PUSH
3589: LD_INT 1
3591: ARRAY
3592: PUSH
3593: LD_INT 1
3595: ARRAY
3596: PPUSH
3597: LD_VAR 0 37
3601: PUSH
3602: LD_INT 1
3604: ARRAY
3605: PUSH
3606: LD_INT 2
3608: ARRAY
3609: PPUSH
3610: LD_VAR 0 37
3614: PUSH
3615: LD_INT 1
3617: ARRAY
3618: PUSH
3619: LD_INT 3
3621: ARRAY
3622: PPUSH
3623: LD_VAR 0 37
3627: PUSH
3628: LD_INT 1
3630: ARRAY
3631: PUSH
3632: LD_INT 4
3634: ARRAY
3635: PPUSH
3636: CALL_OW 145
// end ; if tag = tCrates then
3640: LD_VAR 0 19
3644: PUSH
3645: LD_INT 2
3647: EQUAL
3648: IFFALSE 3785
// begin if IsInUnit ( i ) then
3650: LD_VAR 0 9
3654: PPUSH
3655: CALL_OW 310
3659: IFFALSE 3672
// begin ComExitBuilding ( i ) ;
3661: LD_VAR 0 9
3665: PPUSH
3666: CALL_OW 122
// continue ;
3670: GO 2967
// end ; if not cr then
3672: LD_VAR 0 21
3676: NOT
3677: IFFALSE 3693
// begin SetTag ( i , 0 ) ;
3679: LD_VAR 0 9
3683: PPUSH
3684: LD_INT 0
3686: PPUSH
3687: CALL_OW 109
// continue ;
3691: GO 2967
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3693: LD_VAR 0 9
3697: PPUSH
3698: CALL_OW 314
3702: NOT
3703: PUSH
3704: LD_INT 81
3706: PUSH
3707: LD_VAR 0 1
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: LD_INT 92
3718: PUSH
3719: LD_VAR 0 21
3723: PUSH
3724: LD_INT 1
3726: ARRAY
3727: PUSH
3728: LD_VAR 0 21
3732: PUSH
3733: LD_INT 2
3735: ARRAY
3736: PUSH
3737: LD_INT 12
3739: PUSH
3740: EMPTY
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PPUSH
3750: CALL_OW 69
3754: NOT
3755: AND
3756: IFFALSE 3785
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3758: LD_VAR 0 9
3762: PPUSH
3763: LD_VAR 0 21
3767: PUSH
3768: LD_INT 1
3770: ARRAY
3771: PPUSH
3772: LD_VAR 0 21
3776: PUSH
3777: LD_INT 2
3779: ARRAY
3780: PPUSH
3781: CALL_OW 117
// end ; end ;
3785: GO 2967
3787: POP
3788: POP
// end ; if vehicles then
3789: LD_VAR 0 30
3793: IFFALSE 4593
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
3795: LD_ADDR_VAR 0 30
3799: PUSH
3800: LD_VAR 0 30
3804: PPUSH
3805: LD_INT 3
3807: PUSH
3808: LD_INT 2
3810: PUSH
3811: LD_INT 34
3813: PUSH
3814: LD_INT 88
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: LD_INT 34
3823: PUSH
3824: LD_INT 32
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: LIST
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 50
3842: PUSH
3843: EMPTY
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PPUSH
3850: CALL_OW 72
3854: ST_TO_ADDR
// if vehicles then
3855: LD_VAR 0 30
3859: IFFALSE 4593
// begin for i in vehicles do
3861: LD_ADDR_VAR 0 9
3865: PUSH
3866: LD_VAR 0 30
3870: PUSH
3871: FOR_IN
3872: IFFALSE 4591
// begin tag := GetTag ( i ) ;
3874: LD_ADDR_VAR 0 19
3878: PUSH
3879: LD_VAR 0 9
3883: PPUSH
3884: CALL_OW 110
3888: ST_TO_ADDR
// if not tag then
3889: LD_VAR 0 19
3893: NOT
3894: IFFALSE 4040
// begin if GetControl ( i ) = control_manual then
3896: LD_VAR 0 9
3900: PPUSH
3901: CALL_OW 263
3905: PUSH
3906: LD_INT 1
3908: EQUAL
3909: IFFALSE 4026
// begin drivers := arDrivers ;
3911: LD_ADDR_VAR 0 28
3915: PUSH
3916: LD_EXP 10
3920: ST_TO_ADDR
// if not drivers then
3921: LD_VAR 0 28
3925: NOT
3926: IFFALSE 4006
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
3928: LD_ADDR_VAR 0 28
3932: PUSH
3933: LD_VAR 0 18
3937: PPUSH
3938: LD_INT 3
3940: PUSH
3941: LD_INT 120
3943: PUSH
3944: LD_INT 7
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: PPUSH
3955: CALL_OW 72
3959: ST_TO_ADDR
// if drivers then
3960: LD_VAR 0 28
3964: IFFALSE 4006
// begin SetTag ( drivers [ 1 ] , tMech ) ;
3966: LD_VAR 0 28
3970: PUSH
3971: LD_INT 1
3973: ARRAY
3974: PPUSH
3975: LD_INT 7
3977: PPUSH
3978: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
3982: LD_ADDR_EXP 10
3986: PUSH
3987: LD_EXP 10
3991: PPUSH
3992: LD_VAR 0 28
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PPUSH
4001: CALL 52420 0 2
4005: ST_TO_ADDR
// end ; end ; if drivers then
4006: LD_VAR 0 28
4010: IFFALSE 4024
// SetTag ( i , tBusy ) ;
4012: LD_VAR 0 9
4016: PPUSH
4017: LD_INT 8
4019: PPUSH
4020: CALL_OW 109
// continue ;
4024: GO 3871
// end ; SetTag ( i , tBusy ) ;
4026: LD_VAR 0 9
4030: PPUSH
4031: LD_INT 8
4033: PPUSH
4034: CALL_OW 109
// end else
4038: GO 4589
// if tag = tBusy then
4040: LD_VAR 0 19
4044: PUSH
4045: LD_INT 8
4047: EQUAL
4048: IFFALSE 4260
// begin if GetLives ( i ) = 1000 then
4050: LD_VAR 0 9
4054: PPUSH
4055: CALL_OW 256
4059: PUSH
4060: LD_INT 1000
4062: EQUAL
4063: IFFALSE 4258
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
4065: LD_VAR 0 9
4069: PPUSH
4070: CALL_OW 263
4074: PUSH
4075: LD_INT 1
4077: EQUAL
4078: PUSH
4079: LD_VAR 0 9
4083: PPUSH
4084: CALL_OW 311
4088: NOT
4089: AND
4090: IFFALSE 4246
// begin drivers := arDrivers ;
4092: LD_ADDR_VAR 0 28
4096: PUSH
4097: LD_EXP 10
4101: ST_TO_ADDR
// if not drivers then
4102: LD_VAR 0 28
4106: NOT
4107: IFFALSE 4123
// begin SetTag ( i , 0 ) ;
4109: LD_VAR 0 9
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 109
// continue ;
4121: GO 3871
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
4123: LD_VAR 0 28
4127: PUSH
4128: LD_INT 1
4130: ARRAY
4131: PPUSH
4132: CALL_OW 310
4136: PUSH
4137: LD_VAR 0 28
4141: PUSH
4142: LD_INT 1
4144: ARRAY
4145: PPUSH
4146: CALL 50024 0 1
4150: NOT
4151: AND
4152: IFFALSE 4167
// ComExitBuilding ( drivers [ 1 ] ) ;
4154: LD_VAR 0 28
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: PPUSH
4163: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
4167: LD_VAR 0 30
4171: PPUSH
4172: LD_INT 120
4174: PUSH
4175: LD_INT 3
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PPUSH
4182: CALL_OW 72
4186: PUSH
4187: LD_VAR 0 28
4191: PUSH
4192: LD_INT 1
4194: ARRAY
4195: PPUSH
4196: CALL_OW 314
4200: NOT
4201: AND
4202: PUSH
4203: LD_VAR 0 30
4207: PPUSH
4208: LD_INT 120
4210: PUSH
4211: LD_INT 3
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PPUSH
4218: CALL_OW 72
4222: NOT
4223: OR
4224: IFFALSE 4244
// ComEnterUnit ( drivers [ 1 ] , i ) ;
4226: LD_VAR 0 28
4230: PUSH
4231: LD_INT 1
4233: ARRAY
4234: PPUSH
4235: LD_VAR 0 9
4239: PPUSH
4240: CALL_OW 120
// continue ;
4244: GO 3871
// end ; SetTag ( i , tAttack ) ;
4246: LD_VAR 0 9
4250: PPUSH
4251: LD_INT 13
4253: PPUSH
4254: CALL_OW 109
// end ; end else
4258: GO 4589
// if tag = tAttack then
4260: LD_VAR 0 19
4264: PUSH
4265: LD_INT 13
4267: EQUAL
4268: IFFALSE 4448
// begin enemy := enemyInBase ;
4270: LD_ADDR_VAR 0 25
4274: PUSH
4275: LD_VAR 0 26
4279: ST_TO_ADDR
// if not enemy then
4280: LD_VAR 0 25
4284: NOT
4285: IFFALSE 4297
// enemy := enemyOuterBase ;
4287: LD_ADDR_VAR 0 25
4291: PUSH
4292: LD_VAR 0 27
4296: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4297: LD_VAR 0 25
4301: NOT
4302: PUSH
4303: LD_VAR 0 9
4307: PPUSH
4308: LD_VAR 0 7
4312: PUSH
4313: LD_INT 1
4315: ARRAY
4316: PPUSH
4317: LD_VAR 0 7
4321: PUSH
4322: LD_INT 2
4324: ARRAY
4325: PPUSH
4326: CALL_OW 297
4330: PUSH
4331: LD_INT 10
4333: GREATER
4334: AND
4335: IFFALSE 4366
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4337: LD_VAR 0 9
4341: PPUSH
4342: LD_VAR 0 7
4346: PUSH
4347: LD_INT 1
4349: ARRAY
4350: PPUSH
4351: LD_VAR 0 7
4355: PUSH
4356: LD_INT 2
4358: ARRAY
4359: PPUSH
4360: CALL_OW 111
// continue ;
4364: GO 3871
// end ; if GetLives ( i ) < 650 then
4366: LD_VAR 0 9
4370: PPUSH
4371: CALL_OW 256
4375: PUSH
4376: LD_INT 650
4378: LESS
4379: IFFALSE 4422
// begin SetTag ( i , tVehRepair ) ;
4381: LD_VAR 0 9
4385: PPUSH
4386: LD_INT 9
4388: PPUSH
4389: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4393: LD_VAR 0 9
4397: PPUSH
4398: LD_VAR 0 7
4402: PUSH
4403: LD_INT 1
4405: ARRAY
4406: PPUSH
4407: LD_VAR 0 7
4411: PUSH
4412: LD_INT 2
4414: ARRAY
4415: PPUSH
4416: CALL_OW 111
// continue ;
4420: GO 3871
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4422: LD_VAR 0 9
4426: PPUSH
4427: LD_VAR 0 25
4431: PPUSH
4432: LD_VAR 0 9
4436: PPUSH
4437: CALL_OW 74
4441: PPUSH
4442: CALL_OW 115
// end else
4446: GO 4589
// if tag = tVehRepair then
4448: LD_VAR 0 19
4452: PUSH
4453: LD_INT 9
4455: EQUAL
4456: IFFALSE 4589
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4458: LD_VAR 0 9
4462: PPUSH
4463: LD_VAR 0 7
4467: PUSH
4468: LD_INT 1
4470: ARRAY
4471: PPUSH
4472: LD_VAR 0 7
4476: PUSH
4477: LD_INT 2
4479: ARRAY
4480: PPUSH
4481: CALL_OW 297
4485: PUSH
4486: LD_INT 10
4488: GREATER
4489: IFFALSE 4520
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4491: LD_VAR 0 9
4495: PPUSH
4496: LD_VAR 0 7
4500: PUSH
4501: LD_INT 1
4503: ARRAY
4504: PPUSH
4505: LD_VAR 0 7
4509: PUSH
4510: LD_INT 2
4512: ARRAY
4513: PPUSH
4514: CALL_OW 111
// continue ;
4518: GO 3871
// end ; if GetLives ( i ) = 1000 then
4520: LD_VAR 0 9
4524: PPUSH
4525: CALL_OW 256
4529: PUSH
4530: LD_INT 1000
4532: EQUAL
4533: IFFALSE 4549
// begin SetTag ( i , tBusy ) ;
4535: LD_VAR 0 9
4539: PPUSH
4540: LD_INT 8
4542: PPUSH
4543: CALL_OW 109
// continue ;
4547: GO 3871
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
4549: LD_VAR 0 9
4553: PPUSH
4554: CALL_OW 263
4558: PUSH
4559: LD_INT 1
4561: EQUAL
4562: PUSH
4563: LD_VAR 0 9
4567: PPUSH
4568: CALL_OW 311
4572: AND
4573: IFFALSE 4589
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
4575: LD_VAR 0 9
4579: PPUSH
4580: CALL_OW 311
4584: PPUSH
4585: CALL 54120 0 1
// end ; end ;
4589: GO 3871
4591: POP
4592: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
4593: LD_ADDR_VAR 0 23
4597: PUSH
4598: LD_VAR 0 5
4602: PPUSH
4603: LD_INT 2
4605: PUSH
4606: LD_INT 25
4608: PUSH
4609: LD_INT 1
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PUSH
4616: LD_INT 25
4618: PUSH
4619: LD_INT 8
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 25
4628: PUSH
4629: LD_INT 5
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 25
4638: PUSH
4639: LD_INT 9
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: PUSH
4653: LD_INT 50
4655: PUSH
4656: EMPTY
4657: LIST
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PPUSH
4663: CALL_OW 72
4667: ST_TO_ADDR
// if sol then
4668: LD_VAR 0 23
4672: IFFALSE 5180
// begin if enemyInBase then
4674: LD_VAR 0 26
4678: IFFALSE 4857
// begin for i in sol do
4680: LD_ADDR_VAR 0 9
4684: PUSH
4685: LD_VAR 0 23
4689: PUSH
4690: FOR_IN
4691: IFFALSE 4853
// begin tw := IsInUnit ( i ) ;
4693: LD_ADDR_VAR 0 20
4697: PUSH
4698: LD_VAR 0 9
4702: PPUSH
4703: CALL_OW 310
4707: ST_TO_ADDR
// if tw then
4708: LD_VAR 0 20
4712: IFFALSE 4795
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
4714: LD_VAR 0 20
4718: PUSH
4719: LD_INT 22
4721: PUSH
4722: LD_VAR 0 1
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: LD_INT 101
4733: PUSH
4734: LD_VAR 0 38
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 2
4745: PUSH
4746: LD_INT 30
4748: PUSH
4749: LD_INT 32
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PUSH
4756: LD_INT 30
4758: PUSH
4759: LD_INT 31
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: LIST
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: PPUSH
4776: CALL_OW 69
4780: IN
4781: NOT
4782: IFFALSE 4793
// ComExitBuilding ( i ) ;
4784: LD_VAR 0 9
4788: PPUSH
4789: CALL_OW 122
// end else
4793: GO 4851
// if IsInArea ( i , area ) then
4795: LD_VAR 0 9
4799: PPUSH
4800: LD_VAR 0 3
4804: PPUSH
4805: CALL_OW 308
4809: IFFALSE 4837
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
4811: LD_VAR 0 9
4815: PPUSH
4816: LD_VAR 0 26
4820: PPUSH
4821: LD_VAR 0 9
4825: PPUSH
4826: CALL_OW 74
4830: PPUSH
4831: CALL_OW 115
4835: GO 4851
// ComMoveToArea ( i , area ) ;
4837: LD_VAR 0 9
4841: PPUSH
4842: LD_VAR 0 3
4846: PPUSH
4847: CALL_OW 113
// end ;
4851: GO 4690
4853: POP
4854: POP
// end else
4855: GO 5180
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
4857: LD_ADDR_VAR 0 32
4861: PUSH
4862: LD_VAR 0 3
4866: PPUSH
4867: LD_INT 3
4869: PUSH
4870: LD_INT 62
4872: PUSH
4873: EMPTY
4874: LIST
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: LD_INT 30
4885: PUSH
4886: LD_INT 32
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: PUSH
4893: LD_INT 30
4895: PUSH
4896: LD_INT 4
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: PUSH
4903: LD_INT 30
4905: PUSH
4906: LD_INT 5
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 30
4915: PUSH
4916: LD_INT 31
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PPUSH
4934: CALL_OW 70
4938: ST_TO_ADDR
// if empty then
4939: LD_VAR 0 32
4943: IFFALSE 4960
// empty := ReverseArray ( empty ) ;
4945: LD_ADDR_VAR 0 32
4949: PUSH
4950: LD_VAR 0 32
4954: PPUSH
4955: CALL 47707 0 1
4959: ST_TO_ADDR
// for i in sol do
4960: LD_ADDR_VAR 0 9
4964: PUSH
4965: LD_VAR 0 23
4969: PUSH
4970: FOR_IN
4971: IFFALSE 5178
// begin tag := GetTag ( i ) ;
4973: LD_ADDR_VAR 0 19
4977: PUSH
4978: LD_VAR 0 9
4982: PPUSH
4983: CALL_OW 110
4987: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
4988: LD_VAR 0 9
4992: PPUSH
4993: CALL_OW 256
4997: PUSH
4998: LD_INT 1000
5000: LESS
5001: PUSH
5002: LD_VAR 0 19
5006: PUSH
5007: LD_INT 1
5009: NONEQUAL
5010: AND
5011: IFFALSE 5063
// begin SetTag ( i , tHeal ) ;
5013: LD_VAR 0 9
5017: PPUSH
5018: LD_INT 1
5020: PPUSH
5021: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
5025: LD_VAR 0 9
5029: PPUSH
5030: LD_VAR 0 6
5034: PUSH
5035: LD_INT 1
5037: ARRAY
5038: PPUSH
5039: LD_VAR 0 6
5043: PUSH
5044: LD_INT 2
5046: ARRAY
5047: PPUSH
5048: CALL_OW 111
// AddComHold ( i ) ;
5052: LD_VAR 0 9
5056: PPUSH
5057: CALL_OW 200
// continue ;
5061: GO 4970
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5063: LD_VAR 0 9
5067: PPUSH
5068: CALL_OW 256
5072: PUSH
5073: LD_INT 1000
5075: EQUAL
5076: PUSH
5077: LD_VAR 0 19
5081: PUSH
5082: LD_INT 1
5084: EQUAL
5085: AND
5086: IFFALSE 5102
// begin SetTag ( i , 0 ) ;
5088: LD_VAR 0 9
5092: PPUSH
5093: LD_INT 0
5095: PPUSH
5096: CALL_OW 109
// continue ;
5100: GO 4970
// end ; if HasTask ( i ) then
5102: LD_VAR 0 9
5106: PPUSH
5107: CALL_OW 314
5111: IFFALSE 5115
// continue ;
5113: GO 4970
// if not IsInUnit ( i ) and not tag and empty then
5115: LD_VAR 0 9
5119: PPUSH
5120: CALL_OW 310
5124: NOT
5125: PUSH
5126: LD_VAR 0 19
5130: NOT
5131: AND
5132: PUSH
5133: LD_VAR 0 32
5137: AND
5138: IFFALSE 5176
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
5140: LD_VAR 0 9
5144: PPUSH
5145: LD_VAR 0 32
5149: PUSH
5150: LD_INT 1
5152: ARRAY
5153: PPUSH
5154: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
5158: LD_ADDR_VAR 0 32
5162: PUSH
5163: LD_VAR 0 32
5167: PPUSH
5168: LD_INT 1
5170: PPUSH
5171: CALL_OW 3
5175: ST_TO_ADDR
// end ; end ;
5176: GO 4970
5178: POP
5179: POP
// end ; end ; end ;
5180: LD_VAR 0 8
5184: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
5185: LD_EXP 14
5189: PPUSH
5190: LD_INT 50
5192: PUSH
5193: EMPTY
5194: LIST
5195: PPUSH
5196: CALL_OW 72
5200: IFFALSE 5253
5202: GO 5204
5204: DISABLE
// begin enable ;
5205: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , arBaseArea , arBaseOuterArea , arForce , [ 109 , 43 ] , [ 112 , 52 ] ) ;
5206: LD_EXP 3
5210: PUSH
5211: LD_INT 1
5213: ARRAY
5214: PPUSH
5215: LD_INT 1
5217: PPUSH
5218: LD_INT 1
5220: PPUSH
5221: LD_INT 2
5223: PPUSH
5224: LD_EXP 14
5228: PPUSH
5229: LD_INT 109
5231: PUSH
5232: LD_INT 43
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: PPUSH
5239: LD_INT 112
5241: PUSH
5242: LD_INT 52
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PPUSH
5249: CALL 1238 0 7
// end ;
5253: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
5254: LD_EXP 13
5258: IFFALSE 5478
5260: GO 5262
5262: DISABLE
5263: LD_INT 0
5265: PPUSH
5266: PPUSH
5267: PPUSH
// begin enable ;
5268: ENABLE
// p := 1 ;
5269: LD_ADDR_VAR 0 2
5273: PUSH
5274: LD_INT 1
5276: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
5277: LD_ADDR_VAR 0 1
5281: PUSH
5282: DOUBLE
5283: LD_INT 1
5285: DEC
5286: ST_TO_ADDR
5287: LD_EXP 13
5291: PPUSH
5292: CALL 16831 0 1
5296: PUSH
5297: LD_INT 2
5299: DIV
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5476
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
5304: LD_ADDR_VAR 0 3
5308: PUSH
5309: LD_EXP 13
5313: PUSH
5314: LD_VAR 0 2
5318: ARRAY
5319: PPUSH
5320: LD_EXP 13
5324: PUSH
5325: LD_VAR 0 2
5329: PUSH
5330: LD_INT 1
5332: PLUS
5333: ARRAY
5334: PPUSH
5335: CALL_OW 428
5339: ST_TO_ADDR
// if tmp then
5340: LD_VAR 0 3
5344: IFFALSE 5460
// if GetSide ( tmp ) <> botSides [ 1 ] then
5346: LD_VAR 0 3
5350: PPUSH
5351: CALL_OW 255
5355: PUSH
5356: LD_EXP 3
5360: PUSH
5361: LD_INT 1
5363: ARRAY
5364: NONEQUAL
5365: IFFALSE 5460
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 1 ] ) ;
5367: LD_EXP 13
5371: PUSH
5372: LD_VAR 0 2
5376: ARRAY
5377: PPUSH
5378: LD_EXP 13
5382: PUSH
5383: LD_VAR 0 2
5387: PUSH
5388: LD_INT 1
5390: PLUS
5391: ARRAY
5392: PPUSH
5393: LD_EXP 3
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
5406: LD_ADDR_EXP 13
5410: PUSH
5411: LD_EXP 13
5415: PPUSH
5416: LD_VAR 0 2
5420: PPUSH
5421: CALL_OW 3
5425: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
5426: LD_ADDR_EXP 13
5430: PUSH
5431: LD_EXP 13
5435: PPUSH
5436: LD_VAR 0 2
5440: PPUSH
5441: CALL_OW 3
5445: ST_TO_ADDR
// p := p - 2 ;
5446: LD_ADDR_VAR 0 2
5450: PUSH
5451: LD_VAR 0 2
5455: PUSH
5456: LD_INT 2
5458: MINUS
5459: ST_TO_ADDR
// end ; p := p + 2 ;
5460: LD_ADDR_VAR 0 2
5464: PUSH
5465: LD_VAR 0 2
5469: PUSH
5470: LD_INT 2
5472: PLUS
5473: ST_TO_ADDR
// end ;
5474: GO 5301
5476: POP
5477: POP
// end ;
5478: PPOPN 3
5480: END
// every 8 8$00 trigger IsOk ( arDep ) and not arConstructList do
5481: LD_INT 2
5483: PPUSH
5484: CALL_OW 302
5488: PUSH
5489: LD_EXP 6
5493: NOT
5494: AND
5495: IFFALSE 5667
5497: GO 5499
5499: DISABLE
// begin enable ;
5500: ENABLE
// arConstructList := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] ] ;
5501: LD_ADDR_EXP 6
5505: PUSH
5506: LD_INT 14
5508: PUSH
5509: LD_INT 1
5511: PUSH
5512: LD_INT 2
5514: PUSH
5515: LD_INT 27
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: PUSH
5524: LD_INT 14
5526: PUSH
5527: LD_INT 1
5529: PUSH
5530: LD_INT 2
5532: PUSH
5533: LD_INT 28
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: PUSH
5542: LD_INT 14
5544: PUSH
5545: LD_INT 1
5547: PUSH
5548: LD_INT 2
5550: PUSH
5551: LD_INT 28
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: LIST
5564: ST_TO_ADDR
// if Difficulty > 1 and GetTech ( tech_SibImplosion , botSides [ 1 ] ) = state_researched then
5565: LD_OWVAR 67
5569: PUSH
5570: LD_INT 1
5572: GREATER
5573: PUSH
5574: LD_INT 72
5576: PPUSH
5577: LD_EXP 3
5581: PUSH
5582: LD_INT 1
5584: ARRAY
5585: PPUSH
5586: CALL_OW 321
5590: PUSH
5591: LD_INT 2
5593: EQUAL
5594: AND
5595: IFFALSE 5667
// arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ] ;
5597: LD_ADDR_EXP 6
5601: PUSH
5602: LD_EXP 6
5606: PUSH
5607: LD_INT 14
5609: PUSH
5610: LD_INT 3
5612: PUSH
5613: LD_INT 2
5615: PUSH
5616: LD_INT 29
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: PUSH
5625: LD_INT 14
5627: PUSH
5628: LD_INT 3
5630: PUSH
5631: LD_INT 2
5633: PUSH
5634: LD_INT 29
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 14
5645: PUSH
5646: LD_INT 3
5648: PUSH
5649: LD_INT 2
5651: PUSH
5652: LD_INT 29
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: LIST
5665: ADD
5666: ST_TO_ADDR
// end ; end_of_file
5667: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_apeman , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
5668: LD_INT 0
5670: PPUSH
5671: PPUSH
5672: PPUSH
5673: PPUSH
5674: PPUSH
// multi_settings_counter := 6 ;
5675: LD_ADDR_EXP 29
5679: PUSH
5680: LD_INT 6
5682: ST_TO_ADDR
// multi_settings := [ ] ;
5683: LD_ADDR_EXP 28
5687: PUSH
5688: EMPTY
5689: ST_TO_ADDR
// if Multiplayer then
5690: LD_OWVAR 4
5694: IFFALSE 5874
// begin your_side := mp_player_side ;
5696: LD_ADDR_OWVAR 2
5700: PUSH
5701: LD_OWVAR 7
5705: ST_TO_ADDR
// multi_gametype := mp_game_type ;
5706: LD_ADDR_EXP 17
5710: PUSH
5711: LD_OWVAR 6
5715: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
5716: LD_ADDR_EXP 18
5720: PUSH
5721: LD_OWVAR 17
5725: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
5726: LD_ADDR_EXP 19
5730: PUSH
5731: LD_OWVAR 15
5735: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
5736: LD_ADDR_EXP 20
5740: PUSH
5741: LD_OWVAR 16
5745: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
5746: LD_ADDR_EXP 21
5750: PUSH
5751: EMPTY
5752: PUSH
5753: EMPTY
5754: LIST
5755: ST_TO_ADDR
// for i in mp_teams do
5756: LD_ADDR_VAR 0 2
5760: PUSH
5761: LD_OWVAR 12
5765: PUSH
5766: FOR_IN
5767: IFFALSE 5810
// if i then
5769: LD_VAR 0 2
5773: IFFALSE 5808
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
5775: LD_ADDR_EXP 21
5779: PUSH
5780: LD_EXP 21
5784: PPUSH
5785: LD_INT 1
5787: PPUSH
5788: LD_EXP 21
5792: PUSH
5793: LD_INT 1
5795: ARRAY
5796: PUSH
5797: LD_VAR 0 2
5801: UNION
5802: PPUSH
5803: CALL_OW 1
5807: ST_TO_ADDR
5808: GO 5766
5810: POP
5811: POP
// for i := 1 to multi_settings_counter do
5812: LD_ADDR_VAR 0 2
5816: PUSH
5817: DOUBLE
5818: LD_INT 1
5820: DEC
5821: ST_TO_ADDR
5822: LD_EXP 29
5826: PUSH
5827: FOR_TO
5828: IFFALSE 5870
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
5830: LD_ADDR_EXP 28
5834: PUSH
5835: LD_EXP 28
5839: PPUSH
5840: LD_EXP 28
5844: PUSH
5845: LD_INT 1
5847: PLUS
5848: PPUSH
5849: LD_VAR 0 2
5853: PPUSH
5854: CALL_OW 426
5858: PUSH
5859: LD_INT 1
5861: PLUS
5862: PPUSH
5863: CALL_OW 1
5867: ST_TO_ADDR
5868: GO 5827
5870: POP
5871: POP
// end else
5872: GO 6060
// begin your_side := 3 ;
5874: LD_ADDR_OWVAR 2
5878: PUSH
5879: LD_INT 3
5881: ST_TO_ADDR
// multi_gametype := 1 ;
5882: LD_ADDR_EXP 17
5886: PUSH
5887: LD_INT 1
5889: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
5890: LD_ADDR_EXP 18
5894: PUSH
5895: LD_INT 0
5897: PUSH
5898: LD_INT 0
5900: PUSH
5901: LD_INT 1
5903: PUSH
5904: LD_INT 2
5906: PUSH
5907: LD_INT 3
5909: PUSH
5910: LD_INT 0
5912: PUSH
5913: LD_INT 0
5915: PUSH
5916: LD_INT 0
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
5929: LD_ADDR_EXP 19
5933: PUSH
5934: LD_INT 0
5936: PUSH
5937: LD_INT 0
5939: PUSH
5940: LD_INT 1
5942: PUSH
5943: LD_INT 1
5945: PUSH
5946: LD_INT 1
5948: PUSH
5949: LD_INT 0
5951: PUSH
5952: LD_INT 0
5954: PUSH
5955: LD_INT 0
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
5968: LD_ADDR_EXP 20
5972: PUSH
5973: LD_INT 0
5975: PUSH
5976: LD_INT 0
5978: PUSH
5979: LD_INT 3
5981: PUSH
5982: LD_INT 3
5984: PUSH
5985: LD_INT 3
5987: PUSH
5988: LD_INT 0
5990: PUSH
5991: LD_INT 0
5993: PUSH
5994: LD_INT 0
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
6007: LD_ADDR_EXP 21
6011: PUSH
6012: LD_INT 3
6014: PUSH
6015: LD_INT 4
6017: PUSH
6018: LD_INT 5
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 2 , 3 ] ;
6029: LD_ADDR_EXP 28
6033: PUSH
6034: LD_INT 2
6036: PUSH
6037: LD_INT 4
6039: PUSH
6040: LD_INT 4
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: LD_INT 2
6048: PUSH
6049: LD_INT 3
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6060: LD_ADDR_EXP 22
6064: PUSH
6065: LD_INT 0
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 0
6076: PUSH
6077: LD_INT 0
6079: PUSH
6080: LD_INT 0
6082: PUSH
6083: LD_INT 0
6085: PUSH
6086: LD_INT 0
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6099: LD_ADDR_EXP 25
6103: PUSH
6104: LD_INT 0
6106: PUSH
6107: LD_INT 0
6109: PUSH
6110: LD_INT 0
6112: PUSH
6113: LD_INT 0
6115: PUSH
6116: LD_INT 0
6118: PUSH
6119: LD_INT 0
6121: PUSH
6122: LD_INT 0
6124: PUSH
6125: LD_INT 0
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6138: LD_ADDR_EXP 36
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: LD_INT 0
6148: PUSH
6149: LD_INT 0
6151: PUSH
6152: LD_INT 0
6154: PUSH
6155: LD_INT 0
6157: PUSH
6158: LD_INT 0
6160: PUSH
6161: LD_INT 0
6163: PUSH
6164: LD_INT 0
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: ST_TO_ADDR
// multi_teamgame := true ;
6177: LD_ADDR_EXP 26
6181: PUSH
6182: LD_INT 1
6184: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
6185: LD_ADDR_EXP 24
6189: PUSH
6190: LD_INT 3
6192: PUSH
6193: EMPTY
6194: LIST
6195: ST_TO_ADDR
// multi_custom_commanders := true ;
6196: LD_ADDR_EXP 27
6200: PUSH
6201: LD_INT 1
6203: ST_TO_ADDR
// multi_commanders := [ ] ;
6204: LD_ADDR_EXP 35
6208: PUSH
6209: EMPTY
6210: ST_TO_ADDR
// multi_reinforcements := [ ] ;
6211: LD_ADDR_EXP 38
6215: PUSH
6216: EMPTY
6217: ST_TO_ADDR
// multi_players_amount := 0 ;
6218: LD_ADDR_EXP 37
6222: PUSH
6223: LD_INT 0
6225: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
6226: LD_ADDR_EXP 23
6230: PUSH
6231: LD_INT 5
6233: PUSH
6234: LD_INT 6
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 7
6243: PUSH
6244: LD_INT 8
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 9
6253: PUSH
6254: LD_INT 10
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: ST_TO_ADDR
// multi_buildings := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6266: LD_ADDR_EXP 40
6270: PUSH
6271: EMPTY
6272: PUSH
6273: EMPTY
6274: PUSH
6275: EMPTY
6276: PUSH
6277: EMPTY
6278: PUSH
6279: EMPTY
6280: PUSH
6281: EMPTY
6282: PUSH
6283: EMPTY
6284: PUSH
6285: EMPTY
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: ST_TO_ADDR
// for i := 1 to 8 do
6297: LD_ADDR_VAR 0 2
6301: PUSH
6302: DOUBLE
6303: LD_INT 1
6305: DEC
6306: ST_TO_ADDR
6307: LD_INT 8
6309: PUSH
6310: FOR_TO
6311: IFFALSE 6640
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
6313: LD_VAR 0 2
6317: PPUSH
6318: CALL_OW 530
6322: IFFALSE 6480
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
6324: LD_ADDR_EXP 22
6328: PUSH
6329: LD_EXP 22
6333: PPUSH
6334: LD_VAR 0 2
6338: PPUSH
6339: LD_INT 1
6341: PPUSH
6342: CALL_OW 1
6346: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
6347: LD_ADDR_EXP 20
6351: PUSH
6352: LD_EXP 20
6356: PPUSH
6357: LD_VAR 0 2
6361: PPUSH
6362: LD_INT 0
6364: PPUSH
6365: CALL_OW 1
6369: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
6370: LD_ADDR_EXP 18
6374: PUSH
6375: LD_EXP 18
6379: PPUSH
6380: LD_VAR 0 2
6384: PPUSH
6385: LD_INT 0
6387: PPUSH
6388: CALL_OW 1
6392: ST_TO_ADDR
// for j = 1 to multi_teams do
6393: LD_ADDR_VAR 0 3
6397: PUSH
6398: DOUBLE
6399: LD_INT 1
6401: DEC
6402: ST_TO_ADDR
6403: LD_EXP 21
6407: PUSH
6408: FOR_TO
6409: IFFALSE 6478
// begin if i in multi_teams [ j ] then
6411: LD_VAR 0 2
6415: PUSH
6416: LD_EXP 21
6420: PUSH
6421: LD_VAR 0 3
6425: ARRAY
6426: IN
6427: IFFALSE 6476
// begin tmp := multi_teams [ j ] diff i ;
6429: LD_ADDR_VAR 0 5
6433: PUSH
6434: LD_EXP 21
6438: PUSH
6439: LD_VAR 0 3
6443: ARRAY
6444: PUSH
6445: LD_VAR 0 2
6449: DIFF
6450: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
6451: LD_ADDR_EXP 21
6455: PUSH
6456: LD_EXP 21
6460: PPUSH
6461: LD_VAR 0 3
6465: PPUSH
6466: LD_VAR 0 5
6470: PPUSH
6471: CALL_OW 1
6475: ST_TO_ADDR
// end ; end ;
6476: GO 6408
6478: POP
6479: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
6480: LD_EXP 20
6484: PUSH
6485: LD_VAR 0 2
6489: ARRAY
6490: PUSH
6491: LD_EXP 20
6495: PUSH
6496: LD_VAR 0 2
6500: ARRAY
6501: PUSH
6502: LD_EXP 24
6506: IN
6507: NOT
6508: AND
6509: IFFALSE 6550
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
6511: LD_ADDR_EXP 20
6515: PUSH
6516: LD_EXP 20
6520: PPUSH
6521: LD_VAR 0 2
6525: PPUSH
6526: LD_EXP 24
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_EXP 24
6538: PPUSH
6539: CALL_OW 12
6543: ARRAY
6544: PPUSH
6545: CALL_OW 1
6549: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
6550: LD_EXP 20
6554: PUSH
6555: LD_VAR 0 2
6559: ARRAY
6560: NOT
6561: PUSH
6562: LD_EXP 18
6566: PUSH
6567: LD_VAR 0 2
6571: ARRAY
6572: NOT
6573: AND
6574: PUSH
6575: LD_EXP 22
6579: PUSH
6580: LD_VAR 0 2
6584: ARRAY
6585: NOT
6586: AND
6587: IFFALSE 6612
// multi_bots := Replace ( multi_bots , i , 1 ) ;
6589: LD_ADDR_EXP 25
6593: PUSH
6594: LD_EXP 25
6598: PPUSH
6599: LD_VAR 0 2
6603: PPUSH
6604: LD_INT 1
6606: PPUSH
6607: CALL_OW 1
6611: ST_TO_ADDR
// if multi_sides [ i ] then
6612: LD_EXP 18
6616: PUSH
6617: LD_VAR 0 2
6621: ARRAY
6622: IFFALSE 6638
// multi_players_amount := multi_players_amount + 1 ;
6624: LD_ADDR_EXP 37
6628: PUSH
6629: LD_EXP 37
6633: PUSH
6634: LD_INT 1
6636: PLUS
6637: ST_TO_ADDR
// end ;
6638: GO 6310
6640: POP
6641: POP
// for i in multi_teams do
6642: LD_ADDR_VAR 0 2
6646: PUSH
6647: LD_EXP 21
6651: PUSH
6652: FOR_IN
6653: IFFALSE 6761
// begin for j = 2 to i do
6655: LD_ADDR_VAR 0 3
6659: PUSH
6660: DOUBLE
6661: LD_INT 2
6663: DEC
6664: ST_TO_ADDR
6665: LD_VAR 0 2
6669: PUSH
6670: FOR_TO
6671: IFFALSE 6757
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
6673: LD_VAR 0 2
6677: PUSH
6678: LD_VAR 0 3
6682: ARRAY
6683: PPUSH
6684: LD_VAR 0 2
6688: PUSH
6689: LD_INT 1
6691: ARRAY
6692: PPUSH
6693: CALL_OW 343
// for x = 1 to j - 1 do
6697: LD_ADDR_VAR 0 4
6701: PUSH
6702: DOUBLE
6703: LD_INT 1
6705: DEC
6706: ST_TO_ADDR
6707: LD_VAR 0 3
6711: PUSH
6712: LD_INT 1
6714: MINUS
6715: PUSH
6716: FOR_TO
6717: IFFALSE 6753
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
6719: LD_VAR 0 2
6723: PUSH
6724: LD_VAR 0 3
6728: ARRAY
6729: PPUSH
6730: LD_VAR 0 2
6734: PUSH
6735: LD_VAR 0 4
6739: ARRAY
6740: PPUSH
6741: LD_INT 1
6743: PPUSH
6744: LD_INT 1
6746: PPUSH
6747: CALL_OW 80
6751: GO 6716
6753: POP
6754: POP
// end ;
6755: GO 6670
6757: POP
6758: POP
// end ;
6759: GO 6652
6761: POP
6762: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
6763: LD_ADDR_OWVAR 67
6767: PUSH
6768: LD_INT 1
6770: PUSH
6771: LD_INT 2
6773: PUSH
6774: LD_INT 3
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PUSH
6782: LD_EXP 28
6786: PUSH
6787: LD_INT 1
6789: ARRAY
6790: ARRAY
6791: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
6792: LD_ADDR_EXP 30
6796: PUSH
6797: LD_INT 9
6799: PUSH
6800: LD_INT 12
6802: PUSH
6803: LD_INT 15
6805: PUSH
6806: LD_INT 18
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: PUSH
6815: LD_EXP 28
6819: PUSH
6820: LD_INT 2
6822: ARRAY
6823: ARRAY
6824: ST_TO_ADDR
// multi_skill_level := [ 1 , 2 , 3 , 5 ] [ multi_settings [ 3 ] ] ;
6825: LD_ADDR_EXP 31
6829: PUSH
6830: LD_INT 1
6832: PUSH
6833: LD_INT 2
6835: PUSH
6836: LD_INT 3
6838: PUSH
6839: LD_INT 5
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: PUSH
6848: LD_EXP 28
6852: PUSH
6853: LD_INT 3
6855: ARRAY
6856: ARRAY
6857: ST_TO_ADDR
// multi_crates_spawn := [ [ 3000 , 0 0$32 ] , [ 5000 , 0 0$22 ] , [ 6000 , 0 0$14 ] , [ 8000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
6858: LD_ADDR_EXP 32
6862: PUSH
6863: LD_INT 3000
6865: PUSH
6866: LD_INT 1120
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: LD_INT 5000
6875: PUSH
6876: LD_INT 770
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: LD_INT 6000
6885: PUSH
6886: LD_INT 490
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 8000
6895: PUSH
6896: LD_INT 420
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: PUSH
6909: LD_EXP 28
6913: PUSH
6914: LD_INT 4
6916: ARRAY
6917: ARRAY
6918: ST_TO_ADDR
// multi_apeman := [ 0 , 1 , 2 , 3 ] [ multi_settings [ 5 ] ] ;
6919: LD_ADDR_EXP 33
6923: PUSH
6924: LD_INT 0
6926: PUSH
6927: LD_INT 1
6929: PUSH
6930: LD_INT 2
6932: PUSH
6933: LD_INT 3
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: PUSH
6942: LD_EXP 28
6946: PUSH
6947: LD_INT 5
6949: ARRAY
6950: ARRAY
6951: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
6952: LD_ADDR_EXP 34
6956: PUSH
6957: LD_INT 0
6959: PUSH
6960: LD_INT 1
6962: PUSH
6963: LD_INT 2
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: LIST
6970: PUSH
6971: LD_EXP 28
6975: PUSH
6976: LD_INT 6
6978: ARRAY
6979: ARRAY
6980: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
6981: LD_ADDR_EXP 39
6985: PUSH
6986: LD_INT 10500
6988: PUSH
6989: LD_INT 31500
6991: PUSH
6992: LD_INT 52500
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: LIST
6999: PUSH
7000: LD_OWVAR 67
7004: ARRAY
7005: ST_TO_ADDR
// end ;
7006: LD_VAR 0 1
7010: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
7011: LD_INT 0
7013: PPUSH
7014: PPUSH
// if not multi_sides [ preferSide ] then
7015: LD_EXP 18
7019: PUSH
7020: LD_VAR 0 1
7024: ARRAY
7025: NOT
7026: IFFALSE 7040
// begin result := preferSide ;
7028: LD_ADDR_VAR 0 2
7032: PUSH
7033: LD_VAR 0 1
7037: ST_TO_ADDR
// exit ;
7038: GO 7087
// end ; for i := 1 to 8 do
7040: LD_ADDR_VAR 0 3
7044: PUSH
7045: DOUBLE
7046: LD_INT 1
7048: DEC
7049: ST_TO_ADDR
7050: LD_INT 8
7052: PUSH
7053: FOR_TO
7054: IFFALSE 7085
// if not multi_sides [ i ] then
7056: LD_EXP 18
7060: PUSH
7061: LD_VAR 0 3
7065: ARRAY
7066: NOT
7067: IFFALSE 7083
// begin result := i ;
7069: LD_ADDR_VAR 0 2
7073: PUSH
7074: LD_VAR 0 3
7078: ST_TO_ADDR
// exit ;
7079: POP
7080: POP
7081: GO 7087
// end ;
7083: GO 7053
7085: POP
7086: POP
// end ;
7087: LD_VAR 0 2
7091: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
7092: LD_INT 0
7094: PPUSH
// uc_side := side ;
7095: LD_ADDR_OWVAR 20
7099: PUSH
7100: LD_VAR 0 1
7104: ST_TO_ADDR
// uc_nation := nation_russian ;
7105: LD_ADDR_OWVAR 21
7109: PUSH
7110: LD_INT 3
7112: ST_TO_ADDR
// hc_importance := 100 ;
7113: LD_ADDR_OWVAR 32
7117: PUSH
7118: LD_INT 100
7120: ST_TO_ADDR
// hc_class := class_soldier ;
7121: LD_ADDR_OWVAR 28
7125: PUSH
7126: LD_INT 1
7128: ST_TO_ADDR
// if num = 1 then
7129: LD_VAR 0 2
7133: PUSH
7134: LD_INT 1
7136: EQUAL
7137: IFFALSE 7219
// begin hc_gallery := ru ;
7139: LD_ADDR_OWVAR 33
7143: PUSH
7144: LD_STRING ru
7146: ST_TO_ADDR
// hc_face_number := 10 ;
7147: LD_ADDR_OWVAR 34
7151: PUSH
7152: LD_INT 10
7154: ST_TO_ADDR
// hc_name := Popov ;
7155: LD_ADDR_OWVAR 26
7159: PUSH
7160: LD_STRING Popov
7162: ST_TO_ADDR
// hc_sex := sex_male ;
7163: LD_ADDR_OWVAR 27
7167: PUSH
7168: LD_INT 1
7170: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 2 ] ;
7171: LD_ADDR_OWVAR 31
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: LD_INT 1
7181: PUSH
7182: LD_INT 1
7184: PUSH
7185: LD_INT 2
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
7194: LD_ADDR_OWVAR 29
7198: PUSH
7199: LD_INT 10
7201: PUSH
7202: LD_INT 10
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: ST_TO_ADDR
// result := CreateHuman ;
7209: LD_ADDR_VAR 0 3
7213: PUSH
7214: CALL_OW 44
7218: ST_TO_ADDR
// end ; if num = 2 then
7219: LD_VAR 0 2
7223: PUSH
7224: LD_INT 2
7226: EQUAL
7227: IFFALSE 7317
// begin hc_class := class_mechanic ;
7229: LD_ADDR_OWVAR 28
7233: PUSH
7234: LD_INT 3
7236: ST_TO_ADDR
// hc_gallery := ru ;
7237: LD_ADDR_OWVAR 33
7241: PUSH
7242: LD_STRING ru
7244: ST_TO_ADDR
// hc_face_number := 1 ;
7245: LD_ADDR_OWVAR 34
7249: PUSH
7250: LD_INT 1
7252: ST_TO_ADDR
// hc_name := Burlak ;
7253: LD_ADDR_OWVAR 26
7257: PUSH
7258: LD_STRING Burlak
7260: ST_TO_ADDR
// hc_sex := sex_male ;
7261: LD_ADDR_OWVAR 27
7265: PUSH
7266: LD_INT 1
7268: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 0 ] ;
7269: LD_ADDR_OWVAR 31
7273: PUSH
7274: LD_INT 1
7276: PUSH
7277: LD_INT 2
7279: PUSH
7280: LD_INT 3
7282: PUSH
7283: LD_INT 0
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
7292: LD_ADDR_OWVAR 29
7296: PUSH
7297: LD_INT 10
7299: PUSH
7300: LD_INT 11
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: ST_TO_ADDR
// result := CreateHuman ;
7307: LD_ADDR_VAR 0 3
7311: PUSH
7312: CALL_OW 44
7316: ST_TO_ADDR
// end ; if num = 3 then
7317: LD_VAR 0 2
7321: PUSH
7322: LD_INT 3
7324: EQUAL
7325: IFFALSE 7407
// begin hc_gallery := ru ;
7327: LD_ADDR_OWVAR 33
7331: PUSH
7332: LD_STRING ru
7334: ST_TO_ADDR
// hc_face_number := 8 ;
7335: LD_ADDR_OWVAR 34
7339: PUSH
7340: LD_INT 8
7342: ST_TO_ADDR
// hc_name := Kurin ;
7343: LD_ADDR_OWVAR 26
7347: PUSH
7348: LD_STRING Kurin
7350: ST_TO_ADDR
// hc_sex := sex_male ;
7351: LD_ADDR_OWVAR 27
7355: PUSH
7356: LD_INT 1
7358: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 0 , 1 ] ;
7359: LD_ADDR_OWVAR 31
7363: PUSH
7364: LD_INT 4
7366: PUSH
7367: LD_INT 1
7369: PUSH
7370: LD_INT 0
7372: PUSH
7373: LD_INT 1
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
7382: LD_ADDR_OWVAR 29
7386: PUSH
7387: LD_INT 12
7389: PUSH
7390: LD_INT 11
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: ST_TO_ADDR
// result := CreateHuman ;
7397: LD_ADDR_VAR 0 3
7401: PUSH
7402: CALL_OW 44
7406: ST_TO_ADDR
// end ; end ;
7407: LD_VAR 0 3
7411: RET
// export function Multiplayer_PrepareApemans ( ) ; var i , tmp ; begin
7412: LD_INT 0
7414: PPUSH
7415: PPUSH
7416: PPUSH
// if not multi_apeman then
7417: LD_EXP 33
7421: NOT
7422: IFFALSE 7426
// exit ;
7424: GO 7504
// tmp := [ 6 , 9 , 12 ] [ multi_apeman ] ;
7426: LD_ADDR_VAR 0 3
7430: PUSH
7431: LD_INT 6
7433: PUSH
7434: LD_INT 9
7436: PUSH
7437: LD_INT 12
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: LIST
7444: PUSH
7445: LD_EXP 33
7449: ARRAY
7450: ST_TO_ADDR
// for i := 1 to tmp do
7451: LD_ADDR_VAR 0 2
7455: PUSH
7456: DOUBLE
7457: LD_INT 1
7459: DEC
7460: ST_TO_ADDR
7461: LD_VAR 0 3
7465: PUSH
7466: FOR_TO
7467: IFFALSE 7502
// begin uc_side := 0 ;
7469: LD_ADDR_OWVAR 20
7473: PUSH
7474: LD_INT 0
7476: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
7477: LD_INT 5
7479: NEG
7480: PPUSH
7481: CALL 48688 0 1
// PlaceUnitArea ( CreateHuman , apeSpawnArea , false ) ;
7485: CALL_OW 44
7489: PPUSH
7490: LD_INT 21
7492: PPUSH
7493: LD_INT 0
7495: PPUSH
7496: CALL_OW 49
// end ;
7500: GO 7466
7502: POP
7503: POP
// end ;
7504: LD_VAR 0 1
7508: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
7509: LD_INT 0
7511: PPUSH
7512: PPUSH
7513: PPUSH
7514: PPUSH
7515: PPUSH
7516: PPUSH
7517: PPUSH
7518: PPUSH
7519: PPUSH
7520: PPUSH
// for i := 1 to 8 do
7521: LD_ADDR_VAR 0 2
7525: PUSH
7526: DOUBLE
7527: LD_INT 1
7529: DEC
7530: ST_TO_ADDR
7531: LD_INT 8
7533: PUSH
7534: FOR_TO
7535: IFFALSE 8556
// begin if not multi_sides [ i ] then
7537: LD_EXP 18
7541: PUSH
7542: LD_VAR 0 2
7546: ARRAY
7547: NOT
7548: IFFALSE 7552
// continue ;
7550: GO 7534
// if multi_buildings [ multi_sides [ i ] ] then
7552: LD_EXP 40
7556: PUSH
7557: LD_EXP 18
7561: PUSH
7562: LD_VAR 0 2
7566: ARRAY
7567: ARRAY
7568: IFFALSE 7802
// begin uc_side := i ;
7570: LD_ADDR_OWVAR 20
7574: PUSH
7575: LD_VAR 0 2
7579: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7580: LD_ADDR_OWVAR 21
7584: PUSH
7585: LD_EXP 20
7589: PUSH
7590: LD_VAR 0 2
7594: ARRAY
7595: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
7596: LD_ADDR_VAR 0 3
7600: PUSH
7601: LD_EXP 40
7605: PUSH
7606: LD_EXP 18
7610: PUSH
7611: LD_VAR 0 2
7615: ARRAY
7616: ARRAY
7617: PUSH
7618: FOR_IN
7619: IFFALSE 7800
// begin bc_type := j [ 1 ] ;
7621: LD_ADDR_OWVAR 42
7625: PUSH
7626: LD_VAR 0 3
7630: PUSH
7631: LD_INT 1
7633: ARRAY
7634: ST_TO_ADDR
// bc_level := 2 ;
7635: LD_ADDR_OWVAR 43
7639: PUSH
7640: LD_INT 2
7642: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
7643: LD_ADDR_VAR 0 4
7647: PUSH
7648: LD_VAR 0 3
7652: PUSH
7653: LD_INT 2
7655: ARRAY
7656: PUSH
7657: LD_INT 1
7659: ARRAY
7660: PPUSH
7661: LD_VAR 0 3
7665: PUSH
7666: LD_INT 2
7668: ARRAY
7669: PUSH
7670: LD_INT 2
7672: ARRAY
7673: PPUSH
7674: LD_VAR 0 3
7678: PUSH
7679: LD_INT 2
7681: ARRAY
7682: PUSH
7683: LD_INT 3
7685: ARRAY
7686: PPUSH
7687: CALL_OW 47
7691: ST_TO_ADDR
// if j [ 1 ] = b_depot then
7692: LD_VAR 0 3
7696: PUSH
7697: LD_INT 1
7699: ARRAY
7700: PUSH
7701: LD_INT 0
7703: EQUAL
7704: IFFALSE 7798
// begin SetBName ( b , j [ 3 ] ) ;
7706: LD_VAR 0 4
7710: PPUSH
7711: LD_VAR 0 3
7715: PUSH
7716: LD_INT 3
7718: ARRAY
7719: PPUSH
7720: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 120 , 100 , 80 ] [ Difficulty ] ) ;
7724: LD_VAR 0 4
7728: PPUSH
7729: CALL_OW 274
7733: PPUSH
7734: LD_INT 1
7736: PPUSH
7737: LD_INT 120
7739: PUSH
7740: LD_INT 100
7742: PUSH
7743: LD_INT 80
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: LIST
7750: PUSH
7751: LD_OWVAR 67
7755: ARRAY
7756: PPUSH
7757: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 30 ] [ Difficulty ] ) ;
7761: LD_VAR 0 4
7765: PPUSH
7766: CALL_OW 274
7770: PPUSH
7771: LD_INT 2
7773: PPUSH
7774: LD_INT 90
7776: PUSH
7777: LD_INT 60
7779: PUSH
7780: LD_INT 30
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: LIST
7787: PUSH
7788: LD_OWVAR 67
7792: ARRAY
7793: PPUSH
7794: CALL_OW 277
// end ; end ;
7798: GO 7618
7800: POP
7801: POP
// end ; if multi_custom_commanders then
7802: LD_EXP 27
7806: IFFALSE 7898
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
7808: LD_ADDR_VAR 0 6
7812: PUSH
7813: LD_VAR 0 2
7817: PPUSH
7818: LD_EXP 18
7822: PUSH
7823: LD_VAR 0 2
7827: ARRAY
7828: PPUSH
7829: CALL 7092 0 2
7833: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
7834: LD_ADDR_EXP 35
7838: PUSH
7839: LD_EXP 35
7843: PPUSH
7844: LD_EXP 35
7848: PUSH
7849: LD_INT 1
7851: PLUS
7852: PPUSH
7853: LD_VAR 0 6
7857: PPUSH
7858: CALL_OW 2
7862: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7863: LD_VAR 0 6
7867: PPUSH
7868: LD_EXP 23
7872: PUSH
7873: LD_EXP 18
7877: PUSH
7878: LD_VAR 0 2
7882: ARRAY
7883: ARRAY
7884: PUSH
7885: LD_INT 1
7887: ARRAY
7888: PPUSH
7889: LD_INT 0
7891: PPUSH
7892: CALL_OW 49
// end else
7896: GO 8109
// begin uc_side := i ;
7898: LD_ADDR_OWVAR 20
7902: PUSH
7903: LD_VAR 0 2
7907: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7908: LD_ADDR_OWVAR 21
7912: PUSH
7913: LD_EXP 20
7917: PUSH
7918: LD_VAR 0 2
7922: ARRAY
7923: ST_TO_ADDR
// hc_importance := 100 ;
7924: LD_ADDR_OWVAR 32
7928: PUSH
7929: LD_INT 100
7931: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
7932: LD_INT 0
7934: PPUSH
7935: LD_INT 1
7937: PPUSH
7938: LD_EXP 31
7942: PPUSH
7943: CALL_OW 380
// if multiplayer then
7947: LD_OWVAR 4
7951: IFFALSE 8009
// begin hc_name := mp_sides_players_names [ i ] ;
7953: LD_ADDR_OWVAR 26
7957: PUSH
7958: LD_OWVAR 19
7962: PUSH
7963: LD_VAR 0 2
7967: ARRAY
7968: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
7969: LD_ADDR_OWVAR 33
7973: PUSH
7974: LD_STRING MULTIAVATARS
7976: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
7977: LD_ADDR_OWVAR 34
7981: PUSH
7982: LD_VAR 0 2
7986: PPUSH
7987: CALL_OW 525
7991: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
7992: LD_ADDR_OWVAR 27
7996: PUSH
7997: LD_VAR 0 2
8001: PPUSH
8002: CALL_OW 526
8006: ST_TO_ADDR
// end else
8007: GO 8041
// begin hc_gallery :=  ;
8009: LD_ADDR_OWVAR 33
8013: PUSH
8014: LD_STRING 
8016: ST_TO_ADDR
// hc_name :=  ;
8017: LD_ADDR_OWVAR 26
8021: PUSH
8022: LD_STRING 
8024: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
8025: LD_ADDR_OWVAR 27
8029: PUSH
8030: LD_INT 1
8032: PPUSH
8033: LD_INT 2
8035: PPUSH
8036: CALL_OW 12
8040: ST_TO_ADDR
// end ; un := CreateHuman ;
8041: LD_ADDR_VAR 0 6
8045: PUSH
8046: CALL_OW 44
8050: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8051: LD_VAR 0 6
8055: PPUSH
8056: LD_EXP 23
8060: PUSH
8061: LD_EXP 18
8065: PUSH
8066: LD_VAR 0 2
8070: ARRAY
8071: ARRAY
8072: PUSH
8073: LD_INT 1
8075: ARRAY
8076: PPUSH
8077: LD_INT 0
8079: PPUSH
8080: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
8084: LD_ADDR_EXP 35
8088: PUSH
8089: LD_EXP 35
8093: PPUSH
8094: LD_VAR 0 2
8098: PPUSH
8099: LD_VAR 0 6
8103: PPUSH
8104: CALL_OW 1
8108: ST_TO_ADDR
// end ; InitHc ;
8109: CALL_OW 19
// InitUc ;
8113: CALL_OW 18
// uc_side := i ;
8117: LD_ADDR_OWVAR 20
8121: PUSH
8122: LD_VAR 0 2
8126: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8127: LD_ADDR_OWVAR 21
8131: PUSH
8132: LD_EXP 20
8136: PUSH
8137: LD_VAR 0 2
8141: ARRAY
8142: ST_TO_ADDR
// hc_gallery :=  ;
8143: LD_ADDR_OWVAR 33
8147: PUSH
8148: LD_STRING 
8150: ST_TO_ADDR
// hc_name :=  ;
8151: LD_ADDR_OWVAR 26
8155: PUSH
8156: LD_STRING 
8158: ST_TO_ADDR
// hc_importance := 0 ;
8159: LD_ADDR_OWVAR 32
8163: PUSH
8164: LD_INT 0
8166: ST_TO_ADDR
// cl := 1 ;
8167: LD_ADDR_VAR 0 5
8171: PUSH
8172: LD_INT 1
8174: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
8175: LD_ADDR_VAR 0 3
8179: PUSH
8180: DOUBLE
8181: LD_INT 2
8183: DEC
8184: ST_TO_ADDR
8185: LD_EXP 30
8189: PUSH
8190: FOR_TO
8191: IFFALSE 8552
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
8193: LD_VAR 0 3
8197: PUSH
8198: LD_INT 1
8200: MINUS
8201: PUSH
8202: LD_EXP 30
8206: PUSH
8207: LD_INT 1
8209: MINUS
8210: PUSH
8211: LD_INT 4
8213: DIVREAL
8214: MOD
8215: PUSH
8216: LD_INT 0
8218: EQUAL
8219: IFFALSE 8235
// cl := cl + 1 ;
8221: LD_ADDR_VAR 0 5
8225: PUSH
8226: LD_VAR 0 5
8230: PUSH
8231: LD_INT 1
8233: PLUS
8234: ST_TO_ADDR
// if cl > 4 then
8235: LD_VAR 0 5
8239: PUSH
8240: LD_INT 4
8242: GREATER
8243: IFFALSE 8253
// cl := 1 ;
8245: LD_ADDR_VAR 0 5
8249: PUSH
8250: LD_INT 1
8252: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
8253: LD_INT 0
8255: PPUSH
8256: LD_VAR 0 5
8260: PPUSH
8261: LD_EXP 31
8265: PPUSH
8266: CALL_OW 380
// un := CreateHuman ;
8270: LD_ADDR_VAR 0 6
8274: PUSH
8275: CALL_OW 44
8279: ST_TO_ADDR
// if j > copy then
8280: LD_VAR 0 3
8284: PUSH
8285: LD_VAR 0 9
8289: GREATER
8290: IFFALSE 8319
// copy := Replace ( copy , j , un ) else
8292: LD_ADDR_VAR 0 9
8296: PUSH
8297: LD_VAR 0 9
8301: PPUSH
8302: LD_VAR 0 3
8306: PPUSH
8307: LD_VAR 0 6
8311: PPUSH
8312: CALL_OW 1
8316: ST_TO_ADDR
8317: GO 8401
// begin CopySkills ( copy [ j ] , un ) ;
8319: LD_VAR 0 9
8323: PUSH
8324: LD_VAR 0 3
8328: ARRAY
8329: PPUSH
8330: LD_VAR 0 6
8334: PPUSH
8335: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
8339: LD_VAR 0 6
8343: PPUSH
8344: LD_INT 2
8346: PPUSH
8347: LD_VAR 0 9
8351: PUSH
8352: LD_VAR 0 3
8356: ARRAY
8357: PPUSH
8358: LD_INT 2
8360: PPUSH
8361: CALL_OW 260
8365: PPUSH
8366: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
8370: LD_VAR 0 6
8374: PPUSH
8375: LD_INT 1
8377: PPUSH
8378: LD_VAR 0 9
8382: PUSH
8383: LD_VAR 0 3
8387: ARRAY
8388: PPUSH
8389: LD_INT 1
8391: PPUSH
8392: CALL_OW 260
8396: PPUSH
8397: CALL_OW 239
// end ; if multi_pos_area then
8401: LD_EXP 23
8405: IFFALSE 8550
// begin if GetClass ( un ) = 3 then
8407: LD_VAR 0 6
8411: PPUSH
8412: CALL_OW 257
8416: PUSH
8417: LD_INT 3
8419: EQUAL
8420: IFFALSE 8517
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_heavy_machine_gun ] [ Difficulty ] , 80 ) ;
8422: LD_INT 21
8424: PPUSH
8425: LD_INT 1
8427: PPUSH
8428: LD_INT 1
8430: PPUSH
8431: LD_INT 43
8433: PUSH
8434: LD_INT 42
8436: PUSH
8437: LD_INT 42
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: PUSH
8445: LD_OWVAR 67
8449: ARRAY
8450: PPUSH
8451: LD_INT 80
8453: PPUSH
8454: CALL 19569 0 5
// veh := CreateVehicle ;
8458: LD_ADDR_VAR 0 7
8462: PUSH
8463: CALL_OW 45
8467: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8468: LD_VAR 0 7
8472: PPUSH
8473: LD_EXP 23
8477: PUSH
8478: LD_EXP 18
8482: PUSH
8483: LD_VAR 0 2
8487: ARRAY
8488: ARRAY
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PPUSH
8494: LD_INT 0
8496: PPUSH
8497: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8501: LD_VAR 0 6
8505: PPUSH
8506: LD_VAR 0 7
8510: PPUSH
8511: CALL_OW 52
// continue ;
8515: GO 8190
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8517: LD_VAR 0 6
8521: PPUSH
8522: LD_EXP 23
8526: PUSH
8527: LD_EXP 18
8531: PUSH
8532: LD_VAR 0 2
8536: ARRAY
8537: ARRAY
8538: PUSH
8539: LD_INT 1
8541: ARRAY
8542: PPUSH
8543: LD_INT 0
8545: PPUSH
8546: CALL_OW 49
// end ; end ;
8550: GO 8190
8552: POP
8553: POP
// end ;
8554: GO 7534
8556: POP
8557: POP
// end ;
8558: LD_VAR 0 1
8562: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
8563: LD_INT 0
8565: PPUSH
8566: PPUSH
8567: PPUSH
8568: PPUSH
8569: PPUSH
// if not multi_support then
8570: LD_EXP 34
8574: NOT
8575: IFFALSE 8579
// exit ;
8577: GO 8866
// result := [ ] ;
8579: LD_ADDR_VAR 0 1
8583: PUSH
8584: EMPTY
8585: ST_TO_ADDR
// for i := 1 to 8 do
8586: LD_ADDR_VAR 0 2
8590: PUSH
8591: DOUBLE
8592: LD_INT 1
8594: DEC
8595: ST_TO_ADDR
8596: LD_INT 8
8598: PUSH
8599: FOR_TO
8600: IFFALSE 8864
// begin result := Replace ( result , i , [ ] ) ;
8602: LD_ADDR_VAR 0 1
8606: PUSH
8607: LD_VAR 0 1
8611: PPUSH
8612: LD_VAR 0 2
8616: PPUSH
8617: EMPTY
8618: PPUSH
8619: CALL_OW 1
8623: ST_TO_ADDR
// if multi_sides [ i ] then
8624: LD_EXP 18
8628: PUSH
8629: LD_VAR 0 2
8633: ARRAY
8634: IFFALSE 8862
// begin tmp := [ ] ;
8636: LD_ADDR_VAR 0 5
8640: PUSH
8641: EMPTY
8642: ST_TO_ADDR
// if multi_support = 1 then
8643: LD_EXP 34
8647: PUSH
8648: LD_INT 1
8650: EQUAL
8651: IFFALSE 8740
// begin uc_side := i ;
8653: LD_ADDR_OWVAR 20
8657: PUSH
8658: LD_VAR 0 2
8662: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8663: LD_ADDR_OWVAR 21
8667: PUSH
8668: LD_EXP 20
8672: PUSH
8673: LD_VAR 0 2
8677: ARRAY
8678: ST_TO_ADDR
// for j := 1 to 2 do
8679: LD_ADDR_VAR 0 3
8683: PUSH
8684: DOUBLE
8685: LD_INT 1
8687: DEC
8688: ST_TO_ADDR
8689: LD_INT 2
8691: PUSH
8692: FOR_TO
8693: IFFALSE 8738
// begin InitHC_All ( ) ;
8695: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
8699: LD_INT 0
8701: PPUSH
8702: LD_INT 1
8704: PPUSH
8705: LD_INT 4
8707: PPUSH
8708: CALL_OW 12
8712: PPUSH
8713: LD_INT 1
8715: PPUSH
8716: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
8720: LD_ADDR_VAR 0 5
8724: PUSH
8725: LD_VAR 0 5
8729: PUSH
8730: CALL_OW 44
8734: ADD
8735: ST_TO_ADDR
// end ;
8736: GO 8692
8738: POP
8739: POP
// end ; if multi_support = 2 then
8740: LD_EXP 34
8744: PUSH
8745: LD_INT 2
8747: EQUAL
8748: IFFALSE 8837
// begin uc_side := i ;
8750: LD_ADDR_OWVAR 20
8754: PUSH
8755: LD_VAR 0 2
8759: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8760: LD_ADDR_OWVAR 21
8764: PUSH
8765: LD_EXP 20
8769: PUSH
8770: LD_VAR 0 2
8774: ARRAY
8775: ST_TO_ADDR
// for j := 1 to 4 do
8776: LD_ADDR_VAR 0 3
8780: PUSH
8781: DOUBLE
8782: LD_INT 1
8784: DEC
8785: ST_TO_ADDR
8786: LD_INT 4
8788: PUSH
8789: FOR_TO
8790: IFFALSE 8835
// begin InitHC_All ( ) ;
8792: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 2 ) ;
8796: LD_INT 0
8798: PPUSH
8799: LD_INT 1
8801: PPUSH
8802: LD_INT 4
8804: PPUSH
8805: CALL_OW 12
8809: PPUSH
8810: LD_INT 2
8812: PPUSH
8813: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
8817: LD_ADDR_VAR 0 5
8821: PUSH
8822: LD_VAR 0 5
8826: PUSH
8827: CALL_OW 44
8831: ADD
8832: ST_TO_ADDR
// end ;
8833: GO 8789
8835: POP
8836: POP
// end ; result := Replace ( result , i , tmp ) ;
8837: LD_ADDR_VAR 0 1
8841: PUSH
8842: LD_VAR 0 1
8846: PPUSH
8847: LD_VAR 0 2
8851: PPUSH
8852: LD_VAR 0 5
8856: PPUSH
8857: CALL_OW 1
8861: ST_TO_ADDR
// end ; end ;
8862: GO 8599
8864: POP
8865: POP
// end ;
8866: LD_VAR 0 1
8870: RET
// export function Multiplayer_Start ( ) ; begin
8871: LD_INT 0
8873: PPUSH
// Multiplayer_PrepareApemans ( ) ;
8874: CALL 7412 0 0
// Multiplayer_PreparePlayers ( ) ;
8878: CALL 7509 0 0
// Multiplayer_InitPointSystem ( ) ;
8882: CALL 9612 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
8886: LD_INT 20
8888: PPUSH
8889: CALL 9788 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
8893: LD_INT 150
8895: PPUSH
8896: CALL 9788 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
8900: LD_INT 5
8902: PPUSH
8903: CALL 9788 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
8907: LD_INT 40
8909: NEG
8910: PPUSH
8911: CALL 9788 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
8915: LD_INT 200
8917: PPUSH
8918: CALL 9788 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
8922: LD_INT 2
8924: PPUSH
8925: CALL 9788 0 1
// if multi_support then
8929: LD_EXP 34
8933: IFFALSE 8945
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
8935: LD_ADDR_EXP 38
8939: PUSH
8940: CALL 8563 0 0
8944: ST_TO_ADDR
// if multi_sides [ your_side ] then
8945: LD_EXP 18
8949: PUSH
8950: LD_OWVAR 2
8954: ARRAY
8955: IFFALSE 8982
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
8957: LD_INT 22
8959: PUSH
8960: LD_OWVAR 2
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PPUSH
8969: CALL_OW 69
8973: PUSH
8974: LD_INT 1
8976: ARRAY
8977: PPUSH
8978: CALL_OW 87
// end ;
8982: LD_VAR 0 1
8986: RET
// export function Multiplayer_End ( ) ; var i , j ; begin
8987: LD_INT 0
8989: PPUSH
8990: PPUSH
8991: PPUSH
// repeat wait ( 0 0$1 ) ;
8992: LD_INT 35
8994: PPUSH
8995: CALL_OW 67
// if tick > multi_support_arrive_time and multi_support then
8999: LD_OWVAR 1
9003: PUSH
9004: LD_EXP 39
9008: GREATER
9009: PUSH
9010: LD_EXP 34
9014: AND
9015: IFFALSE 9180
// begin if tick mod 1 1$00 = 0 then
9017: LD_OWVAR 1
9021: PUSH
9022: LD_INT 2100
9024: MOD
9025: PUSH
9026: LD_INT 0
9028: EQUAL
9029: IFFALSE 9180
// begin for i := 1 to 8 do
9031: LD_ADDR_VAR 0 2
9035: PUSH
9036: DOUBLE
9037: LD_INT 1
9039: DEC
9040: ST_TO_ADDR
9041: LD_INT 8
9043: PUSH
9044: FOR_TO
9045: IFFALSE 9178
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] and Prob ( [ 80 , 60 , 40 ] [ Difficulty ] ) then
9047: LD_EXP 18
9051: PUSH
9052: LD_VAR 0 2
9056: ARRAY
9057: PUSH
9058: LD_EXP 36
9062: PUSH
9063: LD_VAR 0 2
9067: ARRAY
9068: NOT
9069: AND
9070: PUSH
9071: LD_EXP 38
9075: PUSH
9076: LD_VAR 0 2
9080: ARRAY
9081: AND
9082: PUSH
9083: LD_INT 80
9085: PUSH
9086: LD_INT 60
9088: PUSH
9089: LD_INT 40
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: PUSH
9097: LD_OWVAR 67
9101: ARRAY
9102: PPUSH
9103: CALL_OW 13
9107: AND
9108: IFFALSE 9176
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
9110: LD_EXP 38
9114: PUSH
9115: LD_VAR 0 2
9119: ARRAY
9120: PUSH
9121: LD_INT 1
9123: ARRAY
9124: PPUSH
9125: LD_INT 11
9127: PPUSH
9128: LD_INT 1
9130: PPUSH
9131: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
9135: LD_ADDR_EXP 38
9139: PUSH
9140: LD_EXP 38
9144: PPUSH
9145: LD_VAR 0 2
9149: PPUSH
9150: LD_EXP 38
9154: PUSH
9155: LD_VAR 0 2
9159: ARRAY
9160: PPUSH
9161: LD_INT 1
9163: PPUSH
9164: CALL_OW 3
9168: PPUSH
9169: CALL_OW 1
9173: ST_TO_ADDR
// break ;
9174: GO 9178
// end ; end ;
9176: GO 9044
9178: POP
9179: POP
// end ; end ; if not multi_custom_commanders then
9180: LD_EXP 27
9184: NOT
9185: IFFALSE 9298
// begin for i := 1 to 8 do
9187: LD_ADDR_VAR 0 2
9191: PUSH
9192: DOUBLE
9193: LD_INT 1
9195: DEC
9196: ST_TO_ADDR
9197: LD_INT 8
9199: PUSH
9200: FOR_TO
9201: IFFALSE 9272
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
9203: LD_INT 22
9205: PUSH
9206: LD_VAR 0 2
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PPUSH
9215: CALL_OW 69
9219: PUSH
9220: LD_INT 0
9222: EQUAL
9223: PUSH
9224: LD_EXP 36
9228: PUSH
9229: LD_VAR 0 2
9233: ARRAY
9234: NOT
9235: AND
9236: IFFALSE 9270
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
9238: LD_ADDR_EXP 36
9242: PUSH
9243: LD_EXP 36
9247: PPUSH
9248: LD_VAR 0 2
9252: PPUSH
9253: LD_INT 1
9255: PPUSH
9256: CALL_OW 1
9260: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
9261: LD_VAR 0 2
9265: PPUSH
9266: CALL 9858 0 1
// end ; end ;
9270: GO 9200
9272: POP
9273: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
9274: LD_EXP 36
9278: PPUSH
9279: CALL 16831 0 1
9283: PUSH
9284: LD_EXP 18
9288: PPUSH
9289: CALL 16831 0 1
9293: EQUAL
9294: IFFALSE 9298
// break ;
9296: GO 9318
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
9298: CALL 9432 0 0
9302: NOT
9303: PUSH
9304: LD_EXP 2
9308: AND
9309: PUSH
9310: LD_EXP 35
9314: NOT
9315: OR
9316: IFFALSE 8992
// game := false ;
9318: LD_ADDR_EXP 2
9322: PUSH
9323: LD_INT 0
9325: ST_TO_ADDR
// for i := 1 to 8 do
9326: LD_ADDR_VAR 0 2
9330: PUSH
9331: DOUBLE
9332: LD_INT 1
9334: DEC
9335: ST_TO_ADDR
9336: LD_INT 8
9338: PUSH
9339: FOR_TO
9340: IFFALSE 9376
// begin if multi_sides [ i ] then
9342: LD_EXP 18
9346: PUSH
9347: LD_VAR 0 2
9351: ARRAY
9352: IFFALSE 9374
// SetMultiScore ( i , multi_points [ i ] ) ;
9354: LD_VAR 0 2
9358: PPUSH
9359: LD_EXP 41
9363: PUSH
9364: LD_VAR 0 2
9368: ARRAY
9369: PPUSH
9370: CALL_OW 506
// end ;
9374: GO 9339
9376: POP
9377: POP
// if multi_loosers [ your_side ] then
9378: LD_EXP 36
9382: PUSH
9383: LD_OWVAR 2
9387: ARRAY
9388: IFFALSE 9411
// begin if Multiplayer then
9390: LD_OWVAR 4
9394: IFFALSE 9402
// YouLostInMultiplayer else
9396: CALL_OW 107
9400: GO 9409
// YouLost (  ) ;
9402: LD_STRING 
9404: PPUSH
9405: CALL_OW 104
// end else
9409: GO 9427
// begin if Multiplayer then
9411: LD_OWVAR 4
9415: IFFALSE 9423
// YouWinInMultiplayer else
9417: CALL_OW 106
9421: GO 9427
// YouWin ;
9423: CALL_OW 103
// end ; end ;
9427: LD_VAR 0 1
9431: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
9432: LD_INT 0
9434: PPUSH
9435: PPUSH
// result := false ;
9436: LD_ADDR_VAR 0 1
9440: PUSH
9441: LD_INT 0
9443: ST_TO_ADDR
// for side in botSides do
9444: LD_ADDR_VAR 0 2
9448: PUSH
9449: LD_EXP 3
9453: PUSH
9454: FOR_IN
9455: IFFALSE 9516
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
9457: LD_ADDR_VAR 0 1
9461: PUSH
9462: LD_INT 22
9464: PUSH
9465: LD_VAR 0 2
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PUSH
9474: LD_INT 21
9476: PUSH
9477: LD_INT 1
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PUSH
9484: LD_INT 50
9486: PUSH
9487: EMPTY
9488: LIST
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: PUSH
9500: LD_INT 0
9502: GREATER
9503: ST_TO_ADDR
// if result then
9504: LD_VAR 0 1
9508: IFFALSE 9514
// exit ;
9510: POP
9511: POP
9512: GO 9518
// end ;
9514: GO 9454
9516: POP
9517: POP
// end ;
9518: LD_VAR 0 1
9522: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
9523: LD_INT 0
9525: PPUSH
9526: PPUSH
// result := [ ] ;
9527: LD_ADDR_VAR 0 1
9531: PUSH
9532: EMPTY
9533: ST_TO_ADDR
// for i := 1 to 8 do
9534: LD_ADDR_VAR 0 2
9538: PUSH
9539: DOUBLE
9540: LD_INT 1
9542: DEC
9543: ST_TO_ADDR
9544: LD_INT 8
9546: PUSH
9547: FOR_TO
9548: IFFALSE 9605
// begin if multi_sides [ i ] then
9550: LD_EXP 18
9554: PUSH
9555: LD_VAR 0 2
9559: ARRAY
9560: IFFALSE 9603
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
9562: LD_ADDR_VAR 0 1
9566: PUSH
9567: LD_VAR 0 1
9571: PUSH
9572: LD_STRING #coop-points
9574: PUSH
9575: LD_VAR 0 2
9579: PUSH
9580: LD_VAR 0 2
9584: PUSH
9585: LD_EXP 41
9589: PUSH
9590: LD_VAR 0 2
9594: ARRAY
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: ADD
9602: ST_TO_ADDR
// end ; end ;
9603: GO 9547
9605: POP
9606: POP
// end ;
9607: LD_VAR 0 1
9611: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
9612: LD_INT 0
9614: PPUSH
9615: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9616: LD_ADDR_EXP 41
9620: PUSH
9621: LD_INT 0
9623: PUSH
9624: LD_INT 0
9626: PUSH
9627: LD_INT 0
9629: PUSH
9630: LD_INT 0
9632: PUSH
9633: LD_INT 0
9635: PUSH
9636: LD_INT 0
9638: PUSH
9639: LD_INT 0
9641: PUSH
9642: LD_INT 0
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// multi_points_conditions := [ ] ;
9655: LD_ADDR_EXP 42
9659: PUSH
9660: EMPTY
9661: ST_TO_ADDR
// end ;
9662: LD_VAR 0 1
9666: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
9667: LD_INT 0
9669: PPUSH
// if not multi_points or not side or side > 8 then
9670: LD_EXP 41
9674: NOT
9675: PUSH
9676: LD_VAR 0 1
9680: NOT
9681: OR
9682: PUSH
9683: LD_VAR 0 1
9687: PUSH
9688: LD_INT 8
9690: GREATER
9691: OR
9692: IFFALSE 9696
// exit ;
9694: GO 9733
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
9696: LD_ADDR_EXP 41
9700: PUSH
9701: LD_EXP 41
9705: PPUSH
9706: LD_VAR 0 1
9710: PPUSH
9711: LD_EXP 41
9715: PUSH
9716: LD_VAR 0 1
9720: ARRAY
9721: PUSH
9722: LD_VAR 0 2
9726: PLUS
9727: PPUSH
9728: CALL_OW 1
9732: ST_TO_ADDR
// end ;
9733: LD_VAR 0 3
9737: RET
// export function Multiplayer_GetPoints ( side ) ; begin
9738: LD_INT 0
9740: PPUSH
// if not multi_points or not side or side > 8 then
9741: LD_EXP 41
9745: NOT
9746: PUSH
9747: LD_VAR 0 1
9751: NOT
9752: OR
9753: PUSH
9754: LD_VAR 0 1
9758: PUSH
9759: LD_INT 8
9761: GREATER
9762: OR
9763: IFFALSE 9767
// exit ;
9765: GO 9783
// result := multi_points [ side ] ;
9767: LD_ADDR_VAR 0 2
9771: PUSH
9772: LD_EXP 41
9776: PUSH
9777: LD_VAR 0 1
9781: ARRAY
9782: ST_TO_ADDR
// end ;
9783: LD_VAR 0 2
9787: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
9788: LD_INT 0
9790: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
9791: LD_ADDR_EXP 42
9795: PUSH
9796: LD_EXP 42
9800: PPUSH
9801: LD_EXP 42
9805: PUSH
9806: LD_INT 1
9808: PLUS
9809: PPUSH
9810: LD_VAR 0 1
9814: PPUSH
9815: CALL_OW 1
9819: ST_TO_ADDR
// end ;
9820: LD_VAR 0 2
9824: RET
// export function Multiplayer_GetCondition ( id ) ; begin
9825: LD_INT 0
9827: PPUSH
// if not id then
9828: LD_VAR 0 1
9832: NOT
9833: IFFALSE 9837
// exit ;
9835: GO 9853
// result := multi_points_conditions [ id ] ;
9837: LD_ADDR_VAR 0 2
9841: PUSH
9842: LD_EXP 42
9846: PUSH
9847: LD_VAR 0 1
9851: ARRAY
9852: ST_TO_ADDR
// end ;
9853: LD_VAR 0 2
9857: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
9858: LD_INT 0
9860: PPUSH
9861: PPUSH
9862: PPUSH
9863: PPUSH
9864: PPUSH
// players := [ ] ;
9865: LD_ADDR_VAR 0 3
9869: PUSH
9870: EMPTY
9871: ST_TO_ADDR
// for i = 1 to 8 do
9872: LD_ADDR_VAR 0 4
9876: PUSH
9877: DOUBLE
9878: LD_INT 1
9880: DEC
9881: ST_TO_ADDR
9882: LD_INT 8
9884: PUSH
9885: FOR_TO
9886: IFFALSE 9945
// begin if i = side then
9888: LD_VAR 0 4
9892: PUSH
9893: LD_VAR 0 1
9897: EQUAL
9898: IFFALSE 9902
// continue ;
9900: GO 9885
// if multi_sides [ i ] and not multi_loosers [ i ] then
9902: LD_EXP 18
9906: PUSH
9907: LD_VAR 0 4
9911: ARRAY
9912: PUSH
9913: LD_EXP 36
9917: PUSH
9918: LD_VAR 0 4
9922: ARRAY
9923: NOT
9924: AND
9925: IFFALSE 9943
// players := players ^ i ;
9927: LD_ADDR_VAR 0 3
9931: PUSH
9932: LD_VAR 0 3
9936: PUSH
9937: LD_VAR 0 4
9941: ADD
9942: ST_TO_ADDR
// end ;
9943: GO 9885
9945: POP
9946: POP
// if not players then
9947: LD_VAR 0 3
9951: NOT
9952: IFFALSE 9956
// exit ;
9954: GO 10223
// if players = 1 then
9956: LD_VAR 0 3
9960: PUSH
9961: LD_INT 1
9963: EQUAL
9964: IFFALSE 10025
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
9966: LD_ADDR_VAR 0 4
9970: PUSH
9971: LD_INT 22
9973: PUSH
9974: LD_VAR 0 1
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 51
9985: PUSH
9986: EMPTY
9987: LIST
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PPUSH
9993: CALL_OW 69
9997: PUSH
9998: FOR_IN
9999: IFFALSE 10021
// SetSide ( i , players [ 1 ] ) ;
10001: LD_VAR 0 4
10005: PPUSH
10006: LD_VAR 0 3
10010: PUSH
10011: LD_INT 1
10013: ARRAY
10014: PPUSH
10015: CALL_OW 235
10019: GO 9998
10021: POP
10022: POP
// end else
10023: GO 10223
// begin j := 1 ;
10025: LD_ADDR_VAR 0 5
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
10033: LD_ADDR_VAR 0 4
10037: PUSH
10038: LD_INT 22
10040: PUSH
10041: LD_VAR 0 1
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: LD_INT 2
10052: PUSH
10053: LD_INT 21
10055: PUSH
10056: LD_INT 1
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PUSH
10063: LD_INT 51
10065: PUSH
10066: EMPTY
10067: LIST
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PUSH
10073: LD_INT 21
10075: PUSH
10076: LD_INT 2
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: LIST
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: PPUSH
10092: CALL_OW 69
10096: PUSH
10097: FOR_IN
10098: IFFALSE 10221
// begin SetSide ( i , players [ j ] ) ;
10100: LD_VAR 0 4
10104: PPUSH
10105: LD_VAR 0 3
10109: PUSH
10110: LD_VAR 0 5
10114: ARRAY
10115: PPUSH
10116: CALL_OW 235
// if IsDrivenBy ( i ) then
10120: LD_VAR 0 4
10124: PPUSH
10125: CALL_OW 311
10129: IFFALSE 10156
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
10131: LD_VAR 0 4
10135: PPUSH
10136: CALL_OW 311
10140: PPUSH
10141: LD_VAR 0 3
10145: PUSH
10146: LD_VAR 0 5
10150: ARRAY
10151: PPUSH
10152: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
10156: LD_VAR 0 4
10160: PPUSH
10161: CALL_OW 310
10165: PPUSH
10166: CALL_OW 247
10170: PUSH
10171: LD_INT 3
10173: EQUAL
10174: IFFALSE 10185
// ComExitBuilding ( i ) ;
10176: LD_VAR 0 4
10180: PPUSH
10181: CALL_OW 122
// j := j + 1 ;
10185: LD_ADDR_VAR 0 5
10189: PUSH
10190: LD_VAR 0 5
10194: PUSH
10195: LD_INT 1
10197: PLUS
10198: ST_TO_ADDR
// if j > players then
10199: LD_VAR 0 5
10203: PUSH
10204: LD_VAR 0 3
10208: GREATER
10209: IFFALSE 10219
// j := 1 ;
10211: LD_ADDR_VAR 0 5
10215: PUSH
10216: LD_INT 1
10218: ST_TO_ADDR
// end ;
10219: GO 10097
10221: POP
10222: POP
// end ; end ;
10223: LD_VAR 0 2
10227: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
10228: LD_INT 0
10230: PPUSH
10231: PPUSH
10232: PPUSH
// i := 3 ;
10233: LD_ADDR_VAR 0 2
10237: PUSH
10238: LD_INT 3
10240: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
10241: LD_ADDR_VAR 0 3
10245: PUSH
10246: LD_INT 5
10248: PUSH
10249: LD_INT 10
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 120
10258: PUSH
10259: LD_INT 2
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: LD_INT 101
10268: PUSH
10269: LD_INT 8
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 27
10278: PUSH
10279: LD_INT 4
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
10292: LD_INT 4
10294: PPUSH
10295: LD_INT 5
10297: PPUSH
10298: LD_VAR 0 3
10302: PUSH
10303: LD_VAR 0 2
10307: ARRAY
10308: PUSH
10309: LD_INT 1
10311: ARRAY
10312: PPUSH
10313: LD_VAR 0 3
10317: PUSH
10318: LD_VAR 0 2
10322: ARRAY
10323: PUSH
10324: LD_INT 2
10326: ARRAY
10327: PPUSH
10328: LD_INT 0
10330: PPUSH
10331: CALL_OW 58
// end ;
10335: LD_VAR 0 1
10339: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
10340: LD_INT 0
10342: PPUSH
// if not side or side > 8 then
10343: LD_VAR 0 1
10347: NOT
10348: PUSH
10349: LD_VAR 0 1
10353: PUSH
10354: LD_INT 8
10356: GREATER
10357: OR
10358: IFFALSE 10362
// exit ;
10360: GO 10379
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
10362: LD_VAR 0 1
10366: PPUSH
10367: LD_INT 6
10369: PPUSH
10370: CALL 9825 0 1
10374: PPUSH
10375: CALL 9667 0 2
// end ;
10379: LD_VAR 0 2
10383: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
10384: LD_INT 0
10386: PPUSH
// if not side or side > 8 then
10387: LD_VAR 0 1
10391: NOT
10392: PUSH
10393: LD_VAR 0 1
10397: PUSH
10398: LD_INT 8
10400: GREATER
10401: OR
10402: IFFALSE 10406
// exit ;
10404: GO 10423
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
10406: LD_VAR 0 1
10410: PPUSH
10411: LD_INT 4
10413: PPUSH
10414: CALL 9825 0 1
10418: PPUSH
10419: CALL 9667 0 2
// end ;
10423: LD_VAR 0 2
10427: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
10428: LD_INT 0
10430: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
10431: LD_VAR 0 1
10435: NOT
10436: PUSH
10437: LD_VAR 0 1
10441: PUSH
10442: LD_INT 8
10444: GREATER
10445: OR
10446: PUSH
10447: LD_VAR 0 2
10451: PUSH
10452: LD_INT 2
10454: PUSH
10455: LD_INT 6
10457: PUSH
10458: LD_INT 36
10460: PUSH
10461: LD_INT 0
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: IN
10470: NOT
10471: OR
10472: IFFALSE 10476
// exit ;
10474: GO 10493
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
10476: LD_VAR 0 1
10480: PPUSH
10481: LD_INT 3
10483: PPUSH
10484: CALL 9825 0 1
10488: PPUSH
10489: CALL 9667 0 2
// end ;
10493: LD_VAR 0 3
10497: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
10498: LD_INT 0
10500: PPUSH
10501: PPUSH
// if not un then
10502: LD_VAR 0 1
10506: NOT
10507: IFFALSE 10511
// exit ;
10509: GO 10557
// if not points then
10511: LD_VAR 0 3
10515: NOT
10516: IFFALSE 10533
// gained_points := Multiplayer_GetCondition ( 1 ) else
10518: LD_ADDR_VAR 0 5
10522: PUSH
10523: LD_INT 1
10525: PPUSH
10526: CALL 9825 0 1
10530: ST_TO_ADDR
10531: GO 10543
// gained_points := points ;
10533: LD_ADDR_VAR 0 5
10537: PUSH
10538: LD_VAR 0 3
10542: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
10543: LD_VAR 0 2
10547: PPUSH
10548: LD_VAR 0 5
10552: PPUSH
10553: CALL 9667 0 2
10557: LD_VAR 0 4
10561: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
10562: LD_INT 0
10564: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
10565: LD_VAR 0 1
10569: PPUSH
10570: LD_INT 2
10572: PPUSH
10573: CALL 9825 0 1
10577: PPUSH
10578: CALL 9667 0 2
// end ; end_of_file
10582: LD_VAR 0 2
10586: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
10587: LD_VAR 0 1
10591: PPUSH
10592: CALL_OW 255
10596: PUSH
10597: LD_EXP 3
10601: IN
10602: NOT
10603: IFFALSE 10607
// exit ;
10605: GO 10624
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
10607: LD_VAR 0 1
10611: PPUSH
10612: LD_VAR 0 2
10616: PPUSH
10617: LD_INT 0
10619: PPUSH
10620: CALL 10498 0 3
// end ;
10624: PPOPN 3
10626: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
10627: LD_INT 0
10629: PPUSH
10630: PPUSH
10631: PPUSH
10632: PPUSH
10633: PPUSH
10634: PPUSH
10635: PPUSH
10636: PPUSH
10637: PPUSH
10638: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
10639: LD_VAR 0 1
10643: PPUSH
10644: CALL 73319 0 1
// side := GetSide ( un ) ;
10648: LD_ADDR_VAR 0 3
10652: PUSH
10653: LD_VAR 0 1
10657: PPUSH
10658: CALL_OW 255
10662: ST_TO_ADDR
// if multi_sides [ side ] then
10663: LD_EXP 18
10667: PUSH
10668: LD_VAR 0 3
10672: ARRAY
10673: IFFALSE 10699
// if GetType ( un ) = unit_human then
10675: LD_VAR 0 1
10679: PPUSH
10680: CALL_OW 247
10684: PUSH
10685: LD_INT 1
10687: EQUAL
10688: IFFALSE 10699
// MultiplayerEvent_HumanLost ( side ) ;
10690: LD_VAR 0 3
10694: PPUSH
10695: CALL 10384 0 1
// if side in botSides then
10699: LD_VAR 0 3
10703: PUSH
10704: LD_EXP 3
10708: IN
10709: IFFALSE 11202
// begin if side = botSides [ 1 ] then
10711: LD_VAR 0 3
10715: PUSH
10716: LD_EXP 3
10720: PUSH
10721: LD_INT 1
10723: ARRAY
10724: EQUAL
10725: IFFALSE 11202
// begin if un in arForce then
10727: LD_VAR 0 1
10731: PUSH
10732: LD_EXP 14
10736: IN
10737: IFFALSE 10755
// arForce := arForce diff un ;
10739: LD_ADDR_EXP 14
10743: PUSH
10744: LD_EXP 14
10748: PUSH
10749: LD_VAR 0 1
10753: DIFF
10754: ST_TO_ADDR
// if un in arVehicles or un in arVehiclesAtttackers then
10755: LD_VAR 0 1
10759: PUSH
10760: LD_EXP 8
10764: IN
10765: PUSH
10766: LD_VAR 0 1
10770: PUSH
10771: LD_EXP 9
10775: IN
10776: OR
10777: IFFALSE 10871
// begin arVehicles := arVehicles diff un ;
10779: LD_ADDR_EXP 8
10783: PUSH
10784: LD_EXP 8
10788: PUSH
10789: LD_VAR 0 1
10793: DIFF
10794: ST_TO_ADDR
// arVehiclesAtttackers := arVehiclesAtttackers diff un ;
10795: LD_ADDR_EXP 9
10799: PUSH
10800: LD_EXP 9
10804: PUSH
10805: LD_VAR 0 1
10809: DIFF
10810: ST_TO_ADDR
// arConstructList := arConstructList ^ [ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ] ;
10811: LD_ADDR_EXP 6
10815: PUSH
10816: LD_EXP 6
10820: PUSH
10821: LD_VAR 0 1
10825: PPUSH
10826: CALL_OW 265
10830: PUSH
10831: LD_VAR 0 1
10835: PPUSH
10836: CALL_OW 262
10840: PUSH
10841: LD_VAR 0 1
10845: PPUSH
10846: CALL_OW 263
10850: PUSH
10851: LD_VAR 0 1
10855: PPUSH
10856: CALL_OW 264
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: ADD
10870: ST_TO_ADDR
// end ; if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
10871: LD_VAR 0 1
10875: PPUSH
10876: CALL_OW 257
10880: PUSH
10881: LD_INT 3
10883: EQUAL
10884: PUSH
10885: LD_VAR 0 1
10889: PPUSH
10890: CALL_OW 110
10894: PUSH
10895: LD_INT 999
10897: LESS
10898: AND
10899: PUSH
10900: LD_EXP 11
10904: AND
10905: IFFALSE 11046
// begin if not IsOk ( arDep ) then
10907: LD_INT 2
10909: PPUSH
10910: CALL_OW 302
10914: NOT
10915: IFFALSE 10919
// exit ;
10917: GO 11274
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
10919: LD_ADDR_EXP 11
10923: PUSH
10924: LD_EXP 11
10928: PPUSH
10929: CALL 53803 0 1
10933: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
10934: LD_ADDR_OWVAR 20
10938: PUSH
10939: LD_EXP 3
10943: PUSH
10944: LD_INT 1
10946: ARRAY
10947: ST_TO_ADDR
// uc_nation := nation_arabian ;
10948: LD_ADDR_OWVAR 21
10952: PUSH
10953: LD_INT 2
10955: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
10956: LD_INT 0
10958: PPUSH
10959: LD_INT 1
10961: PUSH
10962: LD_INT 2
10964: PUSH
10965: LD_INT 3
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: LIST
10972: PUSH
10973: LD_OWVAR 67
10977: ARRAY
10978: PPUSH
10979: CALL_OW 383
// un := CreateHuman ;
10983: LD_ADDR_VAR 0 1
10987: PUSH
10988: CALL_OW 44
10992: ST_TO_ADDR
// PlaceUnitXY ( un , 143 , 29 , false ) ;
10993: LD_VAR 0 1
10997: PPUSH
10998: LD_INT 143
11000: PPUSH
11001: LD_INT 29
11003: PPUSH
11004: LD_INT 0
11006: PPUSH
11007: CALL_OW 48
// ComMoveXY ( un , 115 , 52 ) ;
11011: LD_VAR 0 1
11015: PPUSH
11016: LD_INT 115
11018: PPUSH
11019: LD_INT 52
11021: PPUSH
11022: CALL_OW 111
// arForce := Join ( arForce , un ) ;
11026: LD_ADDR_EXP 14
11030: PUSH
11031: LD_EXP 14
11035: PPUSH
11036: LD_VAR 0 1
11040: PPUSH
11041: CALL 52420 0 2
11045: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
11046: LD_VAR 0 1
11050: PPUSH
11051: CALL_OW 247
11055: PUSH
11056: LD_INT 3
11058: EQUAL
11059: IFFALSE 11202
// begin btype := GetBType ( un ) ;
11061: LD_ADDR_VAR 0 11
11065: PUSH
11066: LD_VAR 0 1
11070: PPUSH
11071: CALL_OW 266
11075: ST_TO_ADDR
// if btype = b_barracks then
11076: LD_VAR 0 11
11080: PUSH
11081: LD_INT 5
11083: EQUAL
11084: IFFALSE 11094
// btype := b_armoury ;
11086: LD_ADDR_VAR 0 11
11090: PUSH
11091: LD_INT 4
11093: ST_TO_ADDR
// if btype = b_factory then
11094: LD_VAR 0 11
11098: PUSH
11099: LD_INT 3
11101: EQUAL
11102: IFFALSE 11112
// btype := b_workshop ;
11104: LD_ADDR_VAR 0 11
11108: PUSH
11109: LD_INT 2
11111: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
11112: LD_VAR 0 11
11116: PUSH
11117: LD_INT 8
11119: PUSH
11120: LD_INT 7
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: IN
11127: IFFALSE 11137
// btype := b_lab ;
11129: LD_ADDR_VAR 0 11
11133: PUSH
11134: LD_INT 6
11136: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
11137: LD_ADDR_EXP 7
11141: PUSH
11142: LD_EXP 7
11146: PPUSH
11147: LD_EXP 7
11151: PUSH
11152: LD_INT 1
11154: PLUS
11155: PPUSH
11156: LD_VAR 0 11
11160: PUSH
11161: LD_VAR 0 1
11165: PPUSH
11166: CALL_OW 250
11170: PUSH
11171: LD_VAR 0 1
11175: PPUSH
11176: CALL_OW 251
11180: PUSH
11181: LD_VAR 0 1
11185: PPUSH
11186: CALL_OW 254
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: PPUSH
11197: CALL_OW 1
11201: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders then
11202: LD_EXP 35
11206: PUSH
11207: LD_EXP 27
11211: AND
11212: IFFALSE 11274
// if un in multi_commanders then
11214: LD_VAR 0 1
11218: PUSH
11219: LD_EXP 35
11223: IN
11224: IFFALSE 11274
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
11226: LD_ADDR_EXP 36
11230: PUSH
11231: LD_EXP 36
11235: PPUSH
11236: LD_VAR 0 3
11240: PPUSH
11241: LD_INT 1
11243: PPUSH
11244: CALL_OW 1
11248: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
11249: LD_ADDR_EXP 35
11253: PUSH
11254: LD_EXP 35
11258: PUSH
11259: LD_VAR 0 1
11263: DIFF
11264: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
11265: LD_VAR 0 3
11269: PPUSH
11270: CALL 9858 0 1
// end ; end ;
11274: PPOPN 11
11276: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
11277: LD_INT 0
11279: PPUSH
11280: PPUSH
11281: PPUSH
11282: PPUSH
// begin side := GetSide ( building ) ;
11283: LD_ADDR_VAR 0 4
11287: PUSH
11288: LD_VAR 0 1
11292: PPUSH
11293: CALL_OW 255
11297: ST_TO_ADDR
// if multi_sides [ side ] then
11298: LD_EXP 18
11302: PUSH
11303: LD_VAR 0 4
11307: ARRAY
11308: IFFALSE 11329
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
11310: LD_VAR 0 4
11314: PPUSH
11315: LD_VAR 0 1
11319: PPUSH
11320: CALL_OW 266
11324: PPUSH
11325: CALL 10428 0 2
// if side = botSides [ 1 ] then
11329: LD_VAR 0 4
11333: PUSH
11334: LD_EXP 3
11338: PUSH
11339: LD_INT 1
11341: ARRAY
11342: EQUAL
11343: IFFALSE 11439
// begin arBuildings := Delete ( arBuildings , 1 ) ;
11345: LD_ADDR_EXP 7
11349: PUSH
11350: LD_EXP 7
11354: PPUSH
11355: LD_INT 1
11357: PPUSH
11358: CALL_OW 3
11362: ST_TO_ADDR
// btype := GetBType ( building ) ;
11363: LD_ADDR_VAR 0 5
11367: PUSH
11368: LD_VAR 0 1
11372: PPUSH
11373: CALL_OW 266
11377: ST_TO_ADDR
// case btype of b_workshop :
11378: LD_VAR 0 5
11382: PUSH
11383: LD_INT 2
11385: DOUBLE
11386: EQUAL
11387: IFTRUE 11391
11389: GO 11403
11391: POP
// ComUpgrade ( building ) ; b_lab :
11392: LD_VAR 0 1
11396: PPUSH
11397: CALL_OW 146
11401: GO 11439
11403: LD_INT 6
11405: DOUBLE
11406: EQUAL
11407: IFTRUE 11411
11409: GO 11438
11411: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
11412: LD_VAR 0 1
11416: PPUSH
11417: LD_INT 10
11419: PPUSH
11420: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
11424: LD_VAR 0 1
11428: PPUSH
11429: LD_INT 15
11431: PPUSH
11432: CALL_OW 207
// end ; end ;
11436: GO 11439
11438: POP
// end ; end ;
11439: PPOPN 5
11441: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_control , control_remote ] ] ) then
11442: LD_VAR 0 1
11446: PUSH
11447: LD_INT 22
11449: PUSH
11450: LD_EXP 3
11454: PUSH
11455: LD_INT 1
11457: ARRAY
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: PUSH
11463: LD_INT 33
11465: PUSH
11466: LD_INT 2
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PPUSH
11477: CALL_OW 69
11481: IN
11482: IFFALSE 11493
// ComUnlink ( un ) ;
11484: LD_VAR 0 1
11488: PPUSH
11489: CALL_OW 136
// end ;
11493: PPOPN 1
11495: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
11496: LD_VAR 0 2
11500: PPUSH
11501: CALL_OW 255
11505: PUSH
11506: LD_EXP 3
11510: IN
11511: NOT
11512: IFFALSE 11516
// exit ;
11514: GO 11579
// if unit in arForceTmp then
11516: LD_VAR 0 2
11520: PUSH
11521: LD_EXP 15
11525: IN
11526: IFFALSE 11579
// begin arForceTmp := arForceTmp diff unit ;
11528: LD_ADDR_EXP 15
11532: PUSH
11533: LD_EXP 15
11537: PUSH
11538: LD_VAR 0 2
11542: DIFF
11543: ST_TO_ADDR
// arForce := Join ( arForce , unit ) ;
11544: LD_ADDR_EXP 14
11548: PUSH
11549: LD_EXP 14
11553: PPUSH
11554: LD_VAR 0 2
11558: PPUSH
11559: CALL 52420 0 2
11563: ST_TO_ADDR
// ComMoveXY ( unit , 103 , 54 ) ;
11564: LD_VAR 0 2
11568: PPUSH
11569: LD_INT 103
11571: PPUSH
11572: LD_INT 54
11574: PPUSH
11575: CALL_OW 111
// end ; end ;
11579: PPOPN 2
11581: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
11582: LD_INT 0
11584: PPUSH
11585: PPUSH
11586: PPUSH
11587: PPUSH
11588: PPUSH
11589: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
11590: LD_VAR 0 1
11594: PPUSH
11595: LD_VAR 0 2
11599: PPUSH
11600: CALL 73439 0 2
// side := GetSide ( vehicle ) ;
11604: LD_ADDR_VAR 0 4
11608: PUSH
11609: LD_VAR 0 1
11613: PPUSH
11614: CALL_OW 255
11618: ST_TO_ADDR
// if multi_sides [ side ] then
11619: LD_EXP 18
11623: PUSH
11624: LD_VAR 0 4
11628: ARRAY
11629: IFFALSE 11640
// MultiplayerEvent_Produced ( side ) ;
11631: LD_VAR 0 4
11635: PPUSH
11636: CALL 10340 0 1
// if side = botSides [ 1 ] then
11640: LD_VAR 0 4
11644: PUSH
11645: LD_EXP 3
11649: PUSH
11650: LD_INT 1
11652: ARRAY
11653: EQUAL
11654: IFFALSE 11850
// begin driver := IsDrivenBy ( vehicle ) ;
11656: LD_ADDR_VAR 0 8
11660: PUSH
11661: LD_VAR 0 1
11665: PPUSH
11666: CALL_OW 311
11670: ST_TO_ADDR
// if driver then
11671: LD_VAR 0 8
11675: IFFALSE 11709
// begin SetTag ( driver , tMech ) ;
11677: LD_VAR 0 8
11681: PPUSH
11682: LD_INT 7
11684: PPUSH
11685: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
11689: LD_ADDR_EXP 10
11693: PUSH
11694: LD_EXP 10
11698: PPUSH
11699: LD_VAR 0 8
11703: PPUSH
11704: CALL 52420 0 2
11708: ST_TO_ADDR
// end ; if GetControl ( vehicle ) = control_remote and not GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
11709: LD_VAR 0 1
11713: PPUSH
11714: CALL_OW 263
11718: PUSH
11719: LD_INT 2
11721: EQUAL
11722: PUSH
11723: LD_VAR 0 1
11727: PPUSH
11728: CALL_OW 264
11732: PUSH
11733: LD_INT 32
11735: PUSH
11736: LD_INT 88
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: IN
11743: NOT
11744: AND
11745: IFFALSE 11769
// begin arRVehicles := Join ( arRVehicles , vehicle ) ;
11747: LD_ADDR_EXP 16
11751: PUSH
11752: LD_EXP 16
11756: PPUSH
11757: LD_VAR 0 1
11761: PPUSH
11762: CALL 52420 0 2
11766: ST_TO_ADDR
// exit ;
11767: GO 11850
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
11769: LD_EXP 12
11773: PUSH
11774: LD_EXP 8
11778: PPUSH
11779: CALL 16831 0 1
11783: GREATER
11784: PUSH
11785: LD_VAR 0 1
11789: PPUSH
11790: CALL_OW 264
11794: PUSH
11795: LD_INT 32
11797: PUSH
11798: LD_INT 88
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: IN
11805: OR
11806: IFFALSE 11830
// arVehicles := Join ( arVehicles , vehicle ) else
11808: LD_ADDR_EXP 8
11812: PUSH
11813: LD_EXP 8
11817: PPUSH
11818: LD_VAR 0 1
11822: PPUSH
11823: CALL 52420 0 2
11827: ST_TO_ADDR
11828: GO 11850
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
11830: LD_ADDR_EXP 9
11834: PUSH
11835: LD_EXP 9
11839: PPUSH
11840: LD_VAR 0 1
11844: PPUSH
11845: CALL 52420 0 2
11849: ST_TO_ADDR
// end ; end ;
11850: PPOPN 8
11852: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
11853: LD_VAR 0 1
11857: PPUSH
11858: CALL_OW 110
11862: PUSH
11863: LD_INT 7
11865: EQUAL
11866: IFFALSE 11880
// SetTag ( driver , 0 ) ;
11868: LD_VAR 0 1
11872: PPUSH
11873: LD_INT 0
11875: PPUSH
11876: CALL_OW 109
// end ;
11880: PPOPN 4
11882: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
11883: LD_VAR 0 2
11887: PPUSH
11888: CALL_OW 255
11892: PUSH
11893: LD_EXP 3
11897: PUSH
11898: LD_INT 1
11900: ARRAY
11901: EQUAL
11902: IFFALSE 11932
// if tech in arTech then
11904: LD_VAR 0 1
11908: PUSH
11909: LD_EXP 5
11913: IN
11914: IFFALSE 11932
// arTech := arTech diff tech ;
11916: LD_ADDR_EXP 5
11920: PUSH
11921: LD_EXP 5
11925: PUSH
11926: LD_VAR 0 1
11930: DIFF
11931: ST_TO_ADDR
// end ; end_of_file
11932: PPOPN 2
11934: END
// every 30 30$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
11935: LD_INT 2
11937: PPUSH
11938: CALL_OW 302
11942: PUSH
11943: LD_INT 2
11945: PPUSH
11946: CALL_OW 255
11950: PUSH
11951: LD_EXP 3
11955: PUSH
11956: LD_INT 1
11958: ARRAY
11959: EQUAL
11960: AND
11961: IFFALSE 11998
11963: GO 11965
11965: DISABLE
// begin wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
11966: LD_INT 10500
11968: PUSH
11969: LD_INT 2100
11971: PUSH
11972: LD_OWVAR 67
11976: MUL
11977: MINUS
11978: PPUSH
11979: CALL_OW 67
// activeArabAttacks := true ;
11983: LD_ADDR_EXP 4
11987: PUSH
11988: LD_INT 1
11990: ST_TO_ADDR
// ArabAttack ( 0 ) ;
11991: LD_INT 0
11993: PPUSH
11994: CALL 12040 0 1
// end ;
11998: END
// every 45 45$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
11999: LD_INT 2
12001: PPUSH
12002: CALL_OW 302
12006: PUSH
12007: LD_INT 2
12009: PPUSH
12010: CALL_OW 255
12014: PUSH
12015: LD_EXP 3
12019: PUSH
12020: LD_INT 1
12022: ARRAY
12023: EQUAL
12024: AND
12025: IFFALSE 12039
12027: GO 12029
12029: DISABLE
// ArabAttack ( Difficulty ) ;
12030: LD_OWVAR 67
12034: PPUSH
12035: CALL 12040 0 1
12039: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh ; begin
12040: LD_INT 0
12042: PPUSH
12043: PPUSH
12044: PPUSH
12045: PPUSH
12046: PPUSH
// uc_side := botSides [ 1 ] ;
12047: LD_ADDR_OWVAR 20
12051: PUSH
12052: LD_EXP 3
12056: PUSH
12057: LD_INT 1
12059: ARRAY
12060: ST_TO_ADDR
// uc_nation := nation_arabian ;
12061: LD_ADDR_OWVAR 21
12065: PUSH
12066: LD_INT 2
12068: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
12069: LD_ADDR_VAR 0 4
12073: PUSH
12074: LD_INT 3
12076: PUSH
12077: LD_INT 4
12079: PUSH
12080: LD_INT 5
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: LIST
12087: PUSH
12088: LD_OWVAR 67
12092: ARRAY
12093: ST_TO_ADDR
// arAttackersInf := [ ] ;
12094: LD_ADDR_EXP 43
12098: PUSH
12099: EMPTY
12100: ST_TO_ADDR
// arAttackersVeh := [ ] ;
12101: LD_ADDR_EXP 44
12105: PUSH
12106: EMPTY
12107: ST_TO_ADDR
// InitHC_All ( ) ;
12108: CALL_OW 584
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] + v do
12112: LD_ADDR_VAR 0 3
12116: PUSH
12117: DOUBLE
12118: LD_INT 1
12120: DEC
12121: ST_TO_ADDR
12122: LD_INT 3
12124: PUSH
12125: LD_INT 4
12127: PUSH
12128: LD_INT 6
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: LIST
12135: PUSH
12136: LD_OWVAR 67
12140: ARRAY
12141: PUSH
12142: LD_VAR 0 1
12146: PLUS
12147: PUSH
12148: FOR_TO
12149: IFFALSE 12263
// begin PrepareSoldier ( false , skill ) ;
12151: LD_INT 0
12153: PPUSH
12154: LD_VAR 0 4
12158: PPUSH
12159: CALL_OW 381
// un := CreateHuman ;
12163: LD_ADDR_VAR 0 5
12167: PUSH
12168: CALL_OW 44
12172: ST_TO_ADDR
// if i mod 2 = 0 then
12173: LD_VAR 0 3
12177: PUSH
12178: LD_INT 2
12180: MOD
12181: PUSH
12182: LD_INT 0
12184: EQUAL
12185: IFFALSE 12199
// SetClass ( un , class_mortar ) ;
12187: LD_VAR 0 5
12191: PPUSH
12192: LD_INT 8
12194: PPUSH
12195: CALL_OW 336
// SetDir ( un , 1 ) ;
12199: LD_VAR 0 5
12203: PPUSH
12204: LD_INT 1
12206: PPUSH
12207: CALL_OW 233
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
12211: LD_VAR 0 5
12215: PPUSH
12216: LD_INT 12
12218: PPUSH
12219: LD_INT 0
12221: PPUSH
12222: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
12226: LD_ADDR_EXP 43
12230: PUSH
12231: LD_EXP 43
12235: PPUSH
12236: LD_VAR 0 5
12240: PPUSH
12241: CALL 52420 0 2
12245: ST_TO_ADDR
// ComAgressiveMove ( un , 18 , 20 ) ;
12246: LD_VAR 0 5
12250: PPUSH
12251: LD_INT 18
12253: PPUSH
12254: LD_INT 20
12256: PPUSH
12257: CALL_OW 114
// end ;
12261: GO 12148
12263: POP
12264: POP
// for i := 1 to 3 + v do
12265: LD_ADDR_VAR 0 3
12269: PUSH
12270: DOUBLE
12271: LD_INT 1
12273: DEC
12274: ST_TO_ADDR
12275: LD_INT 3
12277: PUSH
12278: LD_VAR 0 1
12282: PLUS
12283: PUSH
12284: FOR_TO
12285: IFFALSE 12464
// begin PrepareMechanic ( false , skill ) ;
12287: LD_INT 0
12289: PPUSH
12290: LD_VAR 0 4
12294: PPUSH
12295: CALL_OW 383
// un := CreateHuman ;
12299: LD_ADDR_VAR 0 5
12303: PUSH
12304: CALL_OW 44
12308: ST_TO_ADDR
// SetTag ( un , 999 ) ;
12309: LD_VAR 0 5
12313: PPUSH
12314: LD_INT 999
12316: PPUSH
12317: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 80 ) ;
12321: LD_INT 14
12323: PPUSH
12324: LD_INT 1
12326: PPUSH
12327: LD_INT 1
12329: PPUSH
12330: LD_INT 27
12332: PUSH
12333: LD_INT 25
12335: PUSH
12336: LD_INT 28
12338: PUSH
12339: LD_INT 26
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: PUSH
12348: LD_VAR 0 3
12352: PUSH
12353: LD_INT 4
12355: MOD
12356: PUSH
12357: LD_INT 1
12359: PLUS
12360: ARRAY
12361: PPUSH
12362: LD_INT 80
12364: PPUSH
12365: CALL 19569 0 5
// veh := CreateVehicle ;
12369: LD_ADDR_VAR 0 6
12373: PUSH
12374: CALL_OW 45
12378: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
12379: LD_VAR 0 6
12383: PPUSH
12384: LD_INT 1
12386: PPUSH
12387: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
12391: LD_VAR 0 6
12395: PPUSH
12396: LD_INT 13
12398: PPUSH
12399: LD_INT 0
12401: PPUSH
12402: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
12406: LD_VAR 0 5
12410: PPUSH
12411: LD_VAR 0 6
12415: PPUSH
12416: CALL_OW 52
// ComMoveXY ( un , 45 , 55 ) ;
12420: LD_VAR 0 5
12424: PPUSH
12425: LD_INT 45
12427: PPUSH
12428: LD_INT 55
12430: PPUSH
12431: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
12435: LD_ADDR_EXP 44
12439: PUSH
12440: LD_EXP 44
12444: PPUSH
12445: LD_VAR 0 6
12449: PPUSH
12450: CALL 52420 0 2
12454: ST_TO_ADDR
// wait ( 0 0$2 ) ;
12455: LD_INT 70
12457: PPUSH
12458: CALL_OW 67
// end ;
12462: GO 12284
12464: POP
12465: POP
// wait ( 0 0$2 ) ;
12466: LD_INT 70
12468: PPUSH
12469: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
12473: LD_ADDR_VAR 0 3
12477: PUSH
12478: DOUBLE
12479: LD_INT 1
12481: DEC
12482: ST_TO_ADDR
12483: LD_INT 1
12485: PUSH
12486: LD_INT 2
12488: PUSH
12489: LD_INT 2
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: PUSH
12497: LD_OWVAR 67
12501: ARRAY
12502: PUSH
12503: FOR_TO
12504: IFFALSE 12599
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_apeman , ar_selfpropelled_bomb , 80 ) ;
12506: LD_INT 14
12508: PPUSH
12509: LD_INT 1
12511: PPUSH
12512: LD_INT 5
12514: PPUSH
12515: LD_INT 29
12517: PPUSH
12518: LD_INT 80
12520: PPUSH
12521: CALL 19569 0 5
// veh := CreateVehicle ;
12525: LD_ADDR_VAR 0 6
12529: PUSH
12530: CALL_OW 45
12534: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
12535: LD_VAR 0 6
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
12547: LD_VAR 0 6
12551: PPUSH
12552: LD_INT 13
12554: PPUSH
12555: LD_INT 0
12557: PPUSH
12558: CALL_OW 49
// ; ComMoveXY ( un , 60 , 63 ) ;
12562: LD_VAR 0 5
12566: PPUSH
12567: LD_INT 60
12569: PPUSH
12570: LD_INT 63
12572: PPUSH
12573: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
12577: LD_ADDR_EXP 44
12581: PUSH
12582: LD_EXP 44
12586: PPUSH
12587: LD_VAR 0 6
12591: PPUSH
12592: CALL 52420 0 2
12596: ST_TO_ADDR
// end ;
12597: GO 12503
12599: POP
12600: POP
// end ;
12601: LD_VAR 0 2
12605: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy ;
12606: LD_EXP 43
12610: IFFALSE 13137
12612: GO 12614
12614: DISABLE
12615: LD_INT 0
12617: PPUSH
12618: PPUSH
12619: PPUSH
12620: PPUSH
// begin enable ;
12621: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
12622: LD_ADDR_VAR 0 2
12626: PUSH
12627: LD_EXP 43
12631: PPUSH
12632: LD_INT 50
12634: PUSH
12635: EMPTY
12636: LIST
12637: PPUSH
12638: CALL_OW 72
12642: ST_TO_ADDR
// arAttackersInf := [ ] ;
12643: LD_ADDR_EXP 43
12647: PUSH
12648: EMPTY
12649: ST_TO_ADDR
// ComMoveXY ( tmp , 46 , 43 ) ;
12650: LD_VAR 0 2
12654: PPUSH
12655: LD_INT 46
12657: PPUSH
12658: LD_INT 43
12660: PPUSH
12661: CALL_OW 111
// wait ( 0 0$10 ) ;
12665: LD_INT 350
12667: PPUSH
12668: CALL_OW 67
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
12672: LD_ADDR_VAR 0 1
12676: PUSH
12677: LD_VAR 0 2
12681: PPUSH
12682: LD_INT 25
12684: PUSH
12685: LD_INT 1
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PPUSH
12692: CALL_OW 72
12696: PUSH
12697: FOR_IN
12698: IFFALSE 12829
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 1 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
12700: LD_ADDR_VAR 0 3
12704: PUSH
12705: LD_INT 81
12707: PUSH
12708: LD_EXP 3
12712: PUSH
12713: LD_INT 1
12715: ARRAY
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PUSH
12721: LD_INT 3
12723: PUSH
12724: LD_INT 120
12726: PUSH
12727: LD_INT 11
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: LD_INT 2
12740: PUSH
12741: LD_INT 21
12743: PUSH
12744: LD_INT 2
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PUSH
12751: LD_INT 21
12753: PUSH
12754: LD_INT 3
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: LIST
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: PPUSH
12771: CALL_OW 69
12775: PPUSH
12776: LD_VAR 0 1
12780: PPUSH
12781: CALL_OW 74
12785: ST_TO_ADDR
// if not nearest then
12786: LD_VAR 0 3
12790: NOT
12791: IFFALSE 12795
// break ;
12793: GO 12829
// SetTag ( nearest , tMined ) ;
12795: LD_VAR 0 3
12799: PPUSH
12800: LD_INT 11
12802: PPUSH
12803: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
12807: LD_VAR 0 1
12811: PPUSH
12812: LD_INT 0
12814: PPUSH
12815: LD_INT 0
12817: PPUSH
12818: LD_VAR 0 3
12822: PPUSH
12823: CALL_OW 192
// end ;
12827: GO 12697
12829: POP
12830: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
12831: LD_ADDR_VAR 0 2
12835: PUSH
12836: LD_VAR 0 2
12840: PPUSH
12841: LD_INT 50
12843: PUSH
12844: EMPTY
12845: LIST
12846: PPUSH
12847: CALL_OW 72
12851: ST_TO_ADDR
// AddComMoveXY ( tmp , 103 , 85 ) ;
12852: LD_VAR 0 2
12856: PPUSH
12857: LD_INT 103
12859: PPUSH
12860: LD_INT 85
12862: PPUSH
12863: CALL_OW 171
// repeat wait ( 0 0$2 ) ;
12867: LD_INT 70
12869: PPUSH
12870: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
12874: LD_ADDR_VAR 0 2
12878: PUSH
12879: LD_VAR 0 2
12883: PPUSH
12884: LD_INT 50
12886: PUSH
12887: EMPTY
12888: LIST
12889: PPUSH
12890: CALL_OW 72
12894: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
12895: LD_ADDR_VAR 0 4
12899: PUSH
12900: LD_INT 81
12902: PUSH
12903: LD_EXP 3
12907: PUSH
12908: LD_INT 1
12910: ARRAY
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PPUSH
12916: CALL_OW 69
12920: ST_TO_ADDR
// for i in tmp do
12921: LD_ADDR_VAR 0 1
12925: PUSH
12926: LD_VAR 0 2
12930: PUSH
12931: FOR_IN
12932: IFFALSE 13128
// if GetClass ( i ) <> 1 then
12934: LD_VAR 0 1
12938: PPUSH
12939: CALL_OW 257
12943: PUSH
12944: LD_INT 1
12946: NONEQUAL
12947: IFFALSE 12975
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
12949: LD_VAR 0 1
12953: PPUSH
12954: LD_VAR 0 4
12958: PPUSH
12959: LD_VAR 0 1
12963: PPUSH
12964: CALL_OW 74
12968: PPUSH
12969: CALL_OW 115
12973: GO 13126
// if not HasTask ( i ) then
12975: LD_VAR 0 1
12979: PPUSH
12980: CALL_OW 314
12984: NOT
12985: IFFALSE 13126
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
12987: LD_ADDR_VAR 0 3
12991: PUSH
12992: LD_VAR 0 4
12996: PPUSH
12997: LD_INT 3
12999: PUSH
13000: LD_INT 120
13002: PUSH
13003: LD_INT 11
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: LD_INT 2
13016: PUSH
13017: LD_INT 21
13019: PUSH
13020: LD_INT 2
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PUSH
13027: LD_INT 21
13029: PUSH
13030: LD_INT 3
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: LIST
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PPUSH
13046: CALL_OW 72
13050: PPUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 74
13060: ST_TO_ADDR
// if not nearest then
13061: LD_VAR 0 3
13065: NOT
13066: IFFALSE 13094
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13068: LD_VAR 0 1
13072: PPUSH
13073: LD_VAR 0 4
13077: PPUSH
13078: LD_VAR 0 1
13082: PPUSH
13083: CALL_OW 74
13087: PPUSH
13088: CALL_OW 115
13092: GO 13126
// begin SetTag ( nearest , tMined ) ;
13094: LD_VAR 0 3
13098: PPUSH
13099: LD_INT 11
13101: PPUSH
13102: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13106: LD_VAR 0 1
13110: PPUSH
13111: LD_INT 0
13113: PPUSH
13114: LD_INT 0
13116: PPUSH
13117: LD_VAR 0 3
13121: PPUSH
13122: CALL_OW 132
// end ; end ;
13126: GO 12931
13128: POP
13129: POP
// until not tmp ;
13130: LD_VAR 0 2
13134: NOT
13135: IFFALSE 12867
// end ;
13137: PPOPN 4
13139: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
13140: LD_EXP 44
13144: IFFALSE 13256
13146: GO 13148
13148: DISABLE
13149: LD_INT 0
13151: PPUSH
13152: PPUSH
// begin enable ;
13153: ENABLE
// tmp := arAttackersVeh ;
13154: LD_ADDR_VAR 0 2
13158: PUSH
13159: LD_EXP 44
13163: ST_TO_ADDR
// arAttackersVeh := [ ] ;
13164: LD_ADDR_EXP 44
13168: PUSH
13169: EMPTY
13170: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13171: LD_INT 70
13173: PPUSH
13174: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13178: LD_ADDR_VAR 0 2
13182: PUSH
13183: LD_VAR 0 2
13187: PPUSH
13188: LD_INT 50
13190: PUSH
13191: EMPTY
13192: LIST
13193: PPUSH
13194: CALL_OW 72
13198: ST_TO_ADDR
// for i in tmp do
13199: LD_ADDR_VAR 0 1
13203: PUSH
13204: LD_VAR 0 2
13208: PUSH
13209: FOR_IN
13210: IFFALSE 13247
// AgressiveMove ( i , [ [ 58 , 77 ] , [ 73 , 98 ] ] ) until not tmp ;
13212: LD_VAR 0 1
13216: PPUSH
13217: LD_INT 58
13219: PUSH
13220: LD_INT 77
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PUSH
13227: LD_INT 73
13229: PUSH
13230: LD_INT 98
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PPUSH
13241: CALL 55024 0 2
13245: GO 13209
13247: POP
13248: POP
13249: LD_VAR 0 2
13253: NOT
13254: IFFALSE 13171
// end ;
13256: PPOPN 2
13258: END
// every 3 3$00 trigger Count ( arRVehicles ) >= 3 do var i , tmp ;
13259: LD_EXP 16
13263: PPUSH
13264: CALL 16831 0 1
13268: PUSH
13269: LD_INT 3
13271: GREATEREQUAL
13272: IFFALSE 13404
13274: GO 13276
13276: DISABLE
13277: LD_INT 0
13279: PPUSH
13280: PPUSH
// begin enable ;
13281: ENABLE
// tmp := UnitFilter ( arRVehicles , [ f_linked ] ) ;
13282: LD_ADDR_VAR 0 2
13286: PUSH
13287: LD_EXP 16
13291: PPUSH
13292: LD_INT 61
13294: PUSH
13295: EMPTY
13296: LIST
13297: PPUSH
13298: CALL_OW 72
13302: ST_TO_ADDR
// arRVehicles := arRVehicles diff tmp ;
13303: LD_ADDR_EXP 16
13307: PUSH
13308: LD_EXP 16
13312: PUSH
13313: LD_VAR 0 2
13317: DIFF
13318: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13319: LD_INT 70
13321: PPUSH
13322: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13326: LD_ADDR_VAR 0 2
13330: PUSH
13331: LD_VAR 0 2
13335: PPUSH
13336: LD_INT 50
13338: PUSH
13339: EMPTY
13340: LIST
13341: PPUSH
13342: CALL_OW 72
13346: ST_TO_ADDR
// for i in tmp do
13347: LD_ADDR_VAR 0 1
13351: PUSH
13352: LD_VAR 0 2
13356: PUSH
13357: FOR_IN
13358: IFFALSE 13395
// AgressiveMove ( i , [ [ 58 , 77 ] , [ 73 , 98 ] ] ) until not tmp ;
13360: LD_VAR 0 1
13364: PPUSH
13365: LD_INT 58
13367: PUSH
13368: LD_INT 77
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 73
13377: PUSH
13378: LD_INT 98
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PPUSH
13389: CALL 55024 0 2
13393: GO 13357
13395: POP
13396: POP
13397: LD_VAR 0 2
13401: NOT
13402: IFFALSE 13319
// end ;
13404: PPOPN 2
13406: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
13407: LD_EXP 9
13411: PUSH
13412: LD_EXP 4
13416: AND
13417: IFFALSE 13996
13419: GO 13421
13421: DISABLE
13422: LD_INT 0
13424: PPUSH
13425: PPUSH
13426: PPUSH
// begin enable ;
13427: ENABLE
// if not arVehiclesAtttackers then
13428: LD_EXP 9
13432: NOT
13433: IFFALSE 13437
// exit ;
13435: GO 13996
// for i in arVehiclesAtttackers do
13437: LD_ADDR_VAR 0 1
13441: PUSH
13442: LD_EXP 9
13446: PUSH
13447: FOR_IN
13448: IFFALSE 13994
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
13450: LD_VAR 0 1
13454: PPUSH
13455: CALL_OW 302
13459: NOT
13460: PUSH
13461: LD_VAR 0 1
13465: PPUSH
13466: CALL_OW 255
13470: PUSH
13471: LD_EXP 3
13475: PUSH
13476: LD_INT 1
13478: ARRAY
13479: NONEQUAL
13480: OR
13481: IFFALSE 13501
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
13483: LD_ADDR_EXP 9
13487: PUSH
13488: LD_EXP 9
13492: PUSH
13493: LD_VAR 0 1
13497: DIFF
13498: ST_TO_ADDR
// continue ;
13499: GO 13447
// end ; if GetTag ( i ) = 300 then
13501: LD_VAR 0 1
13505: PPUSH
13506: CALL_OW 110
13510: PUSH
13511: LD_INT 300
13513: EQUAL
13514: IFFALSE 13629
// begin if GetFuel ( i ) < 50 then
13516: LD_VAR 0 1
13520: PPUSH
13521: CALL_OW 261
13525: PUSH
13526: LD_INT 50
13528: LESS
13529: IFFALSE 13588
// begin ComMoveXY ( i , 102 , 47 ) ;
13531: LD_VAR 0 1
13535: PPUSH
13536: LD_INT 102
13538: PPUSH
13539: LD_INT 47
13541: PPUSH
13542: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13546: LD_INT 35
13548: PPUSH
13549: CALL_OW 67
// until GetDistUnitXY ( i , 102 , 47 ) < 4 ;
13553: LD_VAR 0 1
13557: PPUSH
13558: LD_INT 102
13560: PPUSH
13561: LD_INT 47
13563: PPUSH
13564: CALL_OW 297
13568: PUSH
13569: LD_INT 4
13571: LESS
13572: IFFALSE 13546
// SetFuel ( i , 100 ) ;
13574: LD_VAR 0 1
13578: PPUSH
13579: LD_INT 100
13581: PPUSH
13582: CALL_OW 240
// end else
13586: GO 13629
// if not IsInArea ( i , arParkingArea ) then
13588: LD_VAR 0 1
13592: PPUSH
13593: LD_INT 14
13595: PPUSH
13596: CALL_OW 308
13600: NOT
13601: IFFALSE 13617
// ComMoveToArea ( i , arParkingArea ) else
13603: LD_VAR 0 1
13607: PPUSH
13608: LD_INT 14
13610: PPUSH
13611: CALL_OW 113
13615: GO 13629
// SetTag ( i , 301 ) ;
13617: LD_VAR 0 1
13621: PPUSH
13622: LD_INT 301
13624: PPUSH
13625: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
13629: LD_VAR 0 1
13633: PPUSH
13634: CALL_OW 110
13638: PUSH
13639: LD_INT 301
13641: EQUAL
13642: IFFALSE 13784
// begin if GetLives ( i ) < 1000 then
13644: LD_VAR 0 1
13648: PPUSH
13649: CALL_OW 256
13653: PUSH
13654: LD_INT 1000
13656: LESS
13657: IFFALSE 13761
// begin if not IsDrivenBy ( i ) then
13659: LD_VAR 0 1
13663: PPUSH
13664: CALL_OW 311
13668: NOT
13669: IFFALSE 13673
// continue ;
13671: GO 13447
// mech := IsDrivenBy ( i ) ;
13673: LD_ADDR_VAR 0 2
13677: PUSH
13678: LD_VAR 0 1
13682: PPUSH
13683: CALL_OW 311
13687: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13688: LD_VAR 0 2
13692: PPUSH
13693: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13697: LD_VAR 0 2
13701: PPUSH
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13711: LD_INT 35
13713: PPUSH
13714: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13718: LD_VAR 0 1
13722: PPUSH
13723: CALL_OW 256
13727: PUSH
13728: LD_INT 1000
13730: EQUAL
13731: IFFALSE 13711
// SetLives ( mech , 1000 ) ;
13733: LD_VAR 0 2
13737: PPUSH
13738: LD_INT 1000
13740: PPUSH
13741: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
13745: LD_VAR 0 2
13749: PPUSH
13750: LD_VAR 0 1
13754: PPUSH
13755: CALL_OW 120
// end else
13759: GO 13784
// if IsDrivenBy ( i ) then
13761: LD_VAR 0 1
13765: PPUSH
13766: CALL_OW 311
13770: IFFALSE 13784
// SetTag ( i , 0 ) ;
13772: LD_VAR 0 1
13776: PPUSH
13777: LD_INT 0
13779: PPUSH
13780: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
13784: LD_VAR 0 1
13788: PPUSH
13789: CALL_OW 110
13793: PUSH
13794: LD_INT 300
13796: LESS
13797: IFFALSE 13992
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
13799: LD_ADDR_VAR 0 3
13803: PUSH
13804: LD_INT 1
13806: PPUSH
13807: LD_INT 81
13809: PUSH
13810: LD_EXP 3
13814: PUSH
13815: LD_INT 1
13817: ARRAY
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PPUSH
13823: CALL_OW 70
13827: ST_TO_ADDR
// if GetLives ( i ) < 650 then
13828: LD_VAR 0 1
13832: PPUSH
13833: CALL_OW 256
13837: PUSH
13838: LD_INT 650
13840: LESS
13841: IFFALSE 13866
// begin ComStop ( i ) ;
13843: LD_VAR 0 1
13847: PPUSH
13848: CALL_OW 141
// SetTag ( i , 300 ) ;
13852: LD_VAR 0 1
13856: PPUSH
13857: LD_INT 300
13859: PPUSH
13860: CALL_OW 109
// continue ;
13864: GO 13447
// end ; if enemy then
13866: LD_VAR 0 3
13870: IFFALSE 13910
// begin if not HasTask ( i ) then
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 314
13881: NOT
13882: IFFALSE 13908
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13884: LD_VAR 0 1
13888: PPUSH
13889: LD_VAR 0 3
13893: PPUSH
13894: LD_VAR 0 1
13898: PPUSH
13899: CALL_OW 74
13903: PPUSH
13904: CALL_OW 115
// end else
13908: GO 13992
// if arVehiclesAtttackers then
13910: LD_EXP 9
13914: IFFALSE 13992
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
13916: LD_ADDR_VAR 0 3
13920: PUSH
13921: LD_INT 81
13923: PUSH
13924: LD_EXP 3
13928: PUSH
13929: LD_INT 1
13931: ARRAY
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PPUSH
13937: CALL_OW 69
13941: ST_TO_ADDR
// if enemy then
13942: LD_VAR 0 3
13946: IFFALSE 13992
// AgressiveMove ( i , [ [ 69 , 55 ] , [ 54 , 59 ] , [ 82 , 88 ] ] ) ;
13948: LD_VAR 0 1
13952: PPUSH
13953: LD_INT 69
13955: PUSH
13956: LD_INT 55
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 54
13965: PUSH
13966: LD_INT 59
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 82
13975: PUSH
13976: LD_INT 88
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: LIST
13987: PPUSH
13988: CALL 55024 0 2
// end ; end ; end ;
13992: GO 13447
13994: POP
13995: POP
// end ;
13996: PPOPN 3
13998: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
13999: LD_INT 22
14001: PUSH
14002: LD_EXP 3
14006: PUSH
14007: LD_INT 1
14009: ARRAY
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: LD_INT 32
14017: PUSH
14018: LD_INT 1
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PPUSH
14029: CALL_OW 69
14033: IFFALSE 14116
14035: GO 14037
14037: DISABLE
14038: LD_INT 0
14040: PPUSH
// begin enable ;
14041: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
14042: LD_ADDR_VAR 0 1
14046: PUSH
14047: LD_INT 22
14049: PUSH
14050: LD_EXP 3
14054: PUSH
14055: LD_INT 1
14057: ARRAY
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PUSH
14063: LD_INT 32
14065: PUSH
14066: LD_INT 1
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PPUSH
14077: CALL_OW 69
14081: PUSH
14082: FOR_IN
14083: IFFALSE 14114
// if GetFuel ( i ) < 3 then
14085: LD_VAR 0 1
14089: PPUSH
14090: CALL_OW 261
14094: PUSH
14095: LD_INT 3
14097: LESS
14098: IFFALSE 14112
// SetFuel ( i , 3 ) ;
14100: LD_VAR 0 1
14104: PPUSH
14105: LD_INT 3
14107: PPUSH
14108: CALL_OW 240
14112: GO 14082
14114: POP
14115: POP
// end ; end_of_file
14116: PPOPN 1
14118: END
// every 0 0$20 trigger game do
14119: LD_EXP 2
14123: IFFALSE 14168
14125: GO 14127
14127: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
14128: LD_INT 15
14130: PUSH
14131: LD_INT 17
14133: PUSH
14134: LD_INT 16
14136: PUSH
14137: LD_INT 1
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: PPUSH
14146: LD_EXP 32
14150: PUSH
14151: LD_INT 2
14153: ARRAY
14154: PPUSH
14155: LD_EXP 32
14159: PUSH
14160: LD_INT 1
14162: ARRAY
14163: PPUSH
14164: CALL 14169 0 3
14168: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
14169: LD_INT 0
14171: PPUSH
14172: PPUSH
14173: PPUSH
14174: PPUSH
// if not areas then
14175: LD_VAR 0 1
14179: NOT
14180: IFFALSE 14184
// exit ;
14182: GO 14561
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
14184: LD_ADDR_VAR 0 7
14188: PUSH
14189: LD_INT 18
14191: PUSH
14192: LD_INT 19
14194: PUSH
14195: LD_INT 20
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: LIST
14202: ST_TO_ADDR
// x := 5 ;
14203: LD_ADDR_VAR 0 6
14207: PUSH
14208: LD_INT 5
14210: ST_TO_ADDR
// repeat wait ( time ) ;
14211: LD_VAR 0 2
14215: PPUSH
14216: CALL_OW 67
// if tick < [ 18 18$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
14220: LD_OWVAR 1
14224: PUSH
14225: LD_INT 37800
14227: PUSH
14228: LD_INT 31500
14230: PUSH
14231: LD_INT 25200
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: LIST
14238: PUSH
14239: LD_OWVAR 67
14243: ARRAY
14244: LESS
14245: IFFALSE 14384
// begin for i := 1 to multi_sides do
14247: LD_ADDR_VAR 0 5
14251: PUSH
14252: DOUBLE
14253: LD_INT 1
14255: DEC
14256: ST_TO_ADDR
14257: LD_EXP 18
14261: PUSH
14262: FOR_TO
14263: IFFALSE 14375
// if multi_sides [ i ] then
14265: LD_EXP 18
14269: PUSH
14270: LD_VAR 0 5
14274: ARRAY
14275: IFFALSE 14373
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
14277: LD_VAR 0 7
14281: PUSH
14282: LD_EXP 18
14286: PUSH
14287: LD_VAR 0 5
14291: ARRAY
14292: ARRAY
14293: PPUSH
14294: LD_INT 1
14296: PPUSH
14297: CALL_OW 287
14301: PUSH
14302: LD_INT 32
14304: PUSH
14305: LD_INT 25
14307: PUSH
14308: LD_INT 23
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: LIST
14315: PUSH
14316: LD_OWVAR 67
14320: ARRAY
14321: LESS
14322: IFFALSE 14373
// begin amount := amount - ( x * 10 ) ;
14324: LD_ADDR_VAR 0 3
14328: PUSH
14329: LD_VAR 0 3
14333: PUSH
14334: LD_VAR 0 6
14338: PUSH
14339: LD_INT 10
14341: MUL
14342: MINUS
14343: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
14344: LD_VAR 0 6
14348: PPUSH
14349: LD_VAR 0 7
14353: PUSH
14354: LD_EXP 18
14358: PUSH
14359: LD_VAR 0 5
14363: ARRAY
14364: ARRAY
14365: PPUSH
14366: LD_INT 1
14368: PPUSH
14369: CALL_OW 55
// end ; end ;
14373: GO 14262
14375: POP
14376: POP
// wait ( 0 0$2 ) ;
14377: LD_INT 70
14379: PPUSH
14380: CALL_OW 67
// end ; for i in areas do
14384: LD_ADDR_VAR 0 5
14388: PUSH
14389: LD_VAR 0 1
14393: PUSH
14394: FOR_IN
14395: IFFALSE 14478
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
14397: LD_VAR 0 5
14401: PPUSH
14402: LD_INT 1
14404: PPUSH
14405: CALL_OW 287
14409: PUSH
14410: LD_INT 25
14412: PUSH
14413: LD_INT 22
14415: PUSH
14416: LD_INT 20
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: LIST
14423: PUSH
14424: LD_OWVAR 67
14428: ARRAY
14429: LESS
14430: IFFALSE 14476
// begin wait ( 0 0$5 ) ;
14432: LD_INT 175
14434: PPUSH
14435: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
14439: LD_VAR 0 6
14443: PPUSH
14444: LD_VAR 0 5
14448: PPUSH
14449: LD_INT 1
14451: PPUSH
14452: CALL_OW 55
// amount := amount - ( x * 10 ) ;
14456: LD_ADDR_VAR 0 3
14460: PUSH
14461: LD_VAR 0 3
14465: PUSH
14466: LD_VAR 0 6
14470: PUSH
14471: LD_INT 10
14473: MUL
14474: MINUS
14475: ST_TO_ADDR
// end ; end ;
14476: GO 14394
14478: POP
14479: POP
// time := time + 0 0$2 ;
14480: LD_ADDR_VAR 0 2
14484: PUSH
14485: LD_VAR 0 2
14489: PUSH
14490: LD_INT 70
14492: PLUS
14493: ST_TO_ADDR
// x := x - 1 ;
14494: LD_ADDR_VAR 0 6
14498: PUSH
14499: LD_VAR 0 6
14503: PUSH
14504: LD_INT 1
14506: MINUS
14507: ST_TO_ADDR
// if x = 0 then
14508: LD_VAR 0 6
14512: PUSH
14513: LD_INT 0
14515: EQUAL
14516: IFFALSE 14526
// x := 5 ;
14518: LD_ADDR_VAR 0 6
14522: PUSH
14523: LD_INT 5
14525: ST_TO_ADDR
// if time > 2 2$00 then
14526: LD_VAR 0 2
14530: PUSH
14531: LD_INT 4200
14533: GREATER
14534: IFFALSE 14544
// time := 0 0$30 ;
14536: LD_ADDR_VAR 0 2
14540: PUSH
14541: LD_INT 1050
14543: ST_TO_ADDR
// until not game or amount <= 0 ;
14544: LD_EXP 2
14548: NOT
14549: PUSH
14550: LD_VAR 0 3
14554: PUSH
14555: LD_INT 0
14557: LESSEQUAL
14558: OR
14559: IFFALSE 14211
// end ; end_of_file
14561: LD_VAR 0 4
14565: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
14566: LD_VAR 0 1
14570: PUSH
14571: LD_INT 200
14573: DOUBLE
14574: GREATEREQUAL
14575: IFFALSE 14583
14577: LD_INT 299
14579: DOUBLE
14580: LESSEQUAL
14581: IFTRUE 14585
14583: GO 14617
14585: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
14586: LD_VAR 0 1
14590: PPUSH
14591: LD_VAR 0 2
14595: PPUSH
14596: LD_VAR 0 3
14600: PPUSH
14601: LD_VAR 0 4
14605: PPUSH
14606: LD_VAR 0 5
14610: PPUSH
14611: CALL 73695 0 5
14615: GO 14694
14617: LD_INT 300
14619: DOUBLE
14620: GREATEREQUAL
14621: IFFALSE 14629
14623: LD_INT 399
14625: DOUBLE
14626: LESSEQUAL
14627: IFTRUE 14631
14629: GO 14693
14631: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
14632: LD_VAR 0 1
14636: PPUSH
14637: LD_VAR 0 2
14641: PPUSH
14642: LD_VAR 0 3
14646: PPUSH
14647: LD_VAR 0 4
14651: PPUSH
14652: LD_VAR 0 5
14656: PPUSH
14657: LD_VAR 0 6
14661: PPUSH
14662: LD_VAR 0 7
14666: PPUSH
14667: LD_VAR 0 8
14671: PPUSH
14672: LD_VAR 0 9
14676: PPUSH
14677: LD_VAR 0 10
14681: PPUSH
14682: LD_VAR 0 11
14686: PPUSH
14687: CALL 70020 0 11
14691: GO 14694
14693: POP
// end ;
14694: PPOPN 11
14696: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
14697: LD_VAR 0 1
14701: PPUSH
14702: LD_VAR 0 2
14706: PPUSH
14707: LD_VAR 0 3
14711: PPUSH
14712: LD_VAR 0 4
14716: PPUSH
14717: LD_VAR 0 5
14721: PPUSH
14722: CALL 73431 0 5
// end ; end_of_file
14726: PPOPN 5
14728: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
14729: LD_INT 0
14731: PPUSH
14732: PPUSH
// if exist_mode then
14733: LD_VAR 0 2
14737: IFFALSE 14762
// unit := CreateCharacter ( prefix & ident ) else
14739: LD_ADDR_VAR 0 5
14743: PUSH
14744: LD_VAR 0 3
14748: PUSH
14749: LD_VAR 0 1
14753: STR
14754: PPUSH
14755: CALL_OW 34
14759: ST_TO_ADDR
14760: GO 14777
// unit := NewCharacter ( ident ) ;
14762: LD_ADDR_VAR 0 5
14766: PUSH
14767: LD_VAR 0 1
14771: PPUSH
14772: CALL_OW 25
14776: ST_TO_ADDR
// result := unit ;
14777: LD_ADDR_VAR 0 4
14781: PUSH
14782: LD_VAR 0 5
14786: ST_TO_ADDR
// end ;
14787: LD_VAR 0 4
14791: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
14792: LD_INT 0
14794: PPUSH
14795: PPUSH
// if not side or not nation then
14796: LD_VAR 0 1
14800: NOT
14801: PUSH
14802: LD_VAR 0 2
14806: NOT
14807: OR
14808: IFFALSE 14812
// exit ;
14810: GO 15580
// case nation of nation_american :
14812: LD_VAR 0 2
14816: PUSH
14817: LD_INT 1
14819: DOUBLE
14820: EQUAL
14821: IFTRUE 14825
14823: GO 15039
14825: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
14826: LD_ADDR_VAR 0 4
14830: PUSH
14831: LD_INT 35
14833: PUSH
14834: LD_INT 45
14836: PUSH
14837: LD_INT 46
14839: PUSH
14840: LD_INT 47
14842: PUSH
14843: LD_INT 82
14845: PUSH
14846: LD_INT 83
14848: PUSH
14849: LD_INT 84
14851: PUSH
14852: LD_INT 85
14854: PUSH
14855: LD_INT 86
14857: PUSH
14858: LD_INT 1
14860: PUSH
14861: LD_INT 2
14863: PUSH
14864: LD_INT 6
14866: PUSH
14867: LD_INT 15
14869: PUSH
14870: LD_INT 16
14872: PUSH
14873: LD_INT 7
14875: PUSH
14876: LD_INT 12
14878: PUSH
14879: LD_INT 13
14881: PUSH
14882: LD_INT 10
14884: PUSH
14885: LD_INT 14
14887: PUSH
14888: LD_INT 20
14890: PUSH
14891: LD_INT 21
14893: PUSH
14894: LD_INT 22
14896: PUSH
14897: LD_INT 25
14899: PUSH
14900: LD_INT 32
14902: PUSH
14903: LD_INT 27
14905: PUSH
14906: LD_INT 36
14908: PUSH
14909: LD_INT 69
14911: PUSH
14912: LD_INT 39
14914: PUSH
14915: LD_INT 34
14917: PUSH
14918: LD_INT 40
14920: PUSH
14921: LD_INT 48
14923: PUSH
14924: LD_INT 49
14926: PUSH
14927: LD_INT 50
14929: PUSH
14930: LD_INT 51
14932: PUSH
14933: LD_INT 52
14935: PUSH
14936: LD_INT 53
14938: PUSH
14939: LD_INT 54
14941: PUSH
14942: LD_INT 55
14944: PUSH
14945: LD_INT 56
14947: PUSH
14948: LD_INT 57
14950: PUSH
14951: LD_INT 58
14953: PUSH
14954: LD_INT 59
14956: PUSH
14957: LD_INT 60
14959: PUSH
14960: LD_INT 61
14962: PUSH
14963: LD_INT 62
14965: PUSH
14966: LD_INT 80
14968: PUSH
14969: LD_INT 82
14971: PUSH
14972: LD_INT 83
14974: PUSH
14975: LD_INT 84
14977: PUSH
14978: LD_INT 85
14980: PUSH
14981: LD_INT 86
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: ST_TO_ADDR
15037: GO 15504
15039: LD_INT 2
15041: DOUBLE
15042: EQUAL
15043: IFTRUE 15047
15045: GO 15273
15047: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15048: LD_ADDR_VAR 0 4
15052: PUSH
15053: LD_INT 35
15055: PUSH
15056: LD_INT 45
15058: PUSH
15059: LD_INT 46
15061: PUSH
15062: LD_INT 47
15064: PUSH
15065: LD_INT 82
15067: PUSH
15068: LD_INT 83
15070: PUSH
15071: LD_INT 84
15073: PUSH
15074: LD_INT 85
15076: PUSH
15077: LD_INT 87
15079: PUSH
15080: LD_INT 70
15082: PUSH
15083: LD_INT 1
15085: PUSH
15086: LD_INT 11
15088: PUSH
15089: LD_INT 3
15091: PUSH
15092: LD_INT 4
15094: PUSH
15095: LD_INT 5
15097: PUSH
15098: LD_INT 6
15100: PUSH
15101: LD_INT 15
15103: PUSH
15104: LD_INT 18
15106: PUSH
15107: LD_INT 7
15109: PUSH
15110: LD_INT 17
15112: PUSH
15113: LD_INT 8
15115: PUSH
15116: LD_INT 20
15118: PUSH
15119: LD_INT 21
15121: PUSH
15122: LD_INT 22
15124: PUSH
15125: LD_INT 72
15127: PUSH
15128: LD_INT 26
15130: PUSH
15131: LD_INT 69
15133: PUSH
15134: LD_INT 39
15136: PUSH
15137: LD_INT 40
15139: PUSH
15140: LD_INT 41
15142: PUSH
15143: LD_INT 42
15145: PUSH
15146: LD_INT 43
15148: PUSH
15149: LD_INT 48
15151: PUSH
15152: LD_INT 49
15154: PUSH
15155: LD_INT 50
15157: PUSH
15158: LD_INT 51
15160: PUSH
15161: LD_INT 52
15163: PUSH
15164: LD_INT 53
15166: PUSH
15167: LD_INT 54
15169: PUSH
15170: LD_INT 55
15172: PUSH
15173: LD_INT 56
15175: PUSH
15176: LD_INT 60
15178: PUSH
15179: LD_INT 61
15181: PUSH
15182: LD_INT 62
15184: PUSH
15185: LD_INT 66
15187: PUSH
15188: LD_INT 67
15190: PUSH
15191: LD_INT 68
15193: PUSH
15194: LD_INT 81
15196: PUSH
15197: LD_INT 82
15199: PUSH
15200: LD_INT 83
15202: PUSH
15203: LD_INT 84
15205: PUSH
15206: LD_INT 85
15208: PUSH
15209: LD_INT 87
15211: PUSH
15212: LD_INT 88
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: ST_TO_ADDR
15271: GO 15504
15273: LD_INT 3
15275: DOUBLE
15276: EQUAL
15277: IFTRUE 15281
15279: GO 15503
15281: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15282: LD_ADDR_VAR 0 4
15286: PUSH
15287: LD_INT 46
15289: PUSH
15290: LD_INT 47
15292: PUSH
15293: LD_INT 1
15295: PUSH
15296: LD_INT 2
15298: PUSH
15299: LD_INT 82
15301: PUSH
15302: LD_INT 83
15304: PUSH
15305: LD_INT 84
15307: PUSH
15308: LD_INT 85
15310: PUSH
15311: LD_INT 86
15313: PUSH
15314: LD_INT 11
15316: PUSH
15317: LD_INT 9
15319: PUSH
15320: LD_INT 20
15322: PUSH
15323: LD_INT 19
15325: PUSH
15326: LD_INT 21
15328: PUSH
15329: LD_INT 24
15331: PUSH
15332: LD_INT 22
15334: PUSH
15335: LD_INT 25
15337: PUSH
15338: LD_INT 28
15340: PUSH
15341: LD_INT 29
15343: PUSH
15344: LD_INT 30
15346: PUSH
15347: LD_INT 31
15349: PUSH
15350: LD_INT 37
15352: PUSH
15353: LD_INT 38
15355: PUSH
15356: LD_INT 32
15358: PUSH
15359: LD_INT 27
15361: PUSH
15362: LD_INT 33
15364: PUSH
15365: LD_INT 69
15367: PUSH
15368: LD_INT 39
15370: PUSH
15371: LD_INT 34
15373: PUSH
15374: LD_INT 40
15376: PUSH
15377: LD_INT 71
15379: PUSH
15380: LD_INT 23
15382: PUSH
15383: LD_INT 44
15385: PUSH
15386: LD_INT 48
15388: PUSH
15389: LD_INT 49
15391: PUSH
15392: LD_INT 50
15394: PUSH
15395: LD_INT 51
15397: PUSH
15398: LD_INT 52
15400: PUSH
15401: LD_INT 53
15403: PUSH
15404: LD_INT 54
15406: PUSH
15407: LD_INT 55
15409: PUSH
15410: LD_INT 56
15412: PUSH
15413: LD_INT 57
15415: PUSH
15416: LD_INT 58
15418: PUSH
15419: LD_INT 59
15421: PUSH
15422: LD_INT 63
15424: PUSH
15425: LD_INT 64
15427: PUSH
15428: LD_INT 65
15430: PUSH
15431: LD_INT 82
15433: PUSH
15434: LD_INT 83
15436: PUSH
15437: LD_INT 84
15439: PUSH
15440: LD_INT 85
15442: PUSH
15443: LD_INT 86
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: ST_TO_ADDR
15501: GO 15504
15503: POP
// if state > - 1 and state < 3 then
15504: LD_VAR 0 3
15508: PUSH
15509: LD_INT 1
15511: NEG
15512: GREATER
15513: PUSH
15514: LD_VAR 0 3
15518: PUSH
15519: LD_INT 3
15521: LESS
15522: AND
15523: IFFALSE 15580
// for i in result do
15525: LD_ADDR_VAR 0 5
15529: PUSH
15530: LD_VAR 0 4
15534: PUSH
15535: FOR_IN
15536: IFFALSE 15578
// if GetTech ( i , side ) <> state then
15538: LD_VAR 0 5
15542: PPUSH
15543: LD_VAR 0 1
15547: PPUSH
15548: CALL_OW 321
15552: PUSH
15553: LD_VAR 0 3
15557: NONEQUAL
15558: IFFALSE 15576
// result := result diff i ;
15560: LD_ADDR_VAR 0 4
15564: PUSH
15565: LD_VAR 0 4
15569: PUSH
15570: LD_VAR 0 5
15574: DIFF
15575: ST_TO_ADDR
15576: GO 15535
15578: POP
15579: POP
// end ;
15580: LD_VAR 0 4
15584: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
15585: LD_INT 0
15587: PPUSH
15588: PPUSH
15589: PPUSH
// result := true ;
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: LD_INT 1
15597: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
15598: LD_ADDR_VAR 0 5
15602: PUSH
15603: LD_VAR 0 2
15607: PPUSH
15608: CALL_OW 480
15612: ST_TO_ADDR
// if not tmp then
15613: LD_VAR 0 5
15617: NOT
15618: IFFALSE 15622
// exit ;
15620: GO 15671
// for i in tmp do
15622: LD_ADDR_VAR 0 4
15626: PUSH
15627: LD_VAR 0 5
15631: PUSH
15632: FOR_IN
15633: IFFALSE 15669
// if GetTech ( i , side ) <> state_researched then
15635: LD_VAR 0 4
15639: PPUSH
15640: LD_VAR 0 1
15644: PPUSH
15645: CALL_OW 321
15649: PUSH
15650: LD_INT 2
15652: NONEQUAL
15653: IFFALSE 15667
// begin result := false ;
15655: LD_ADDR_VAR 0 3
15659: PUSH
15660: LD_INT 0
15662: ST_TO_ADDR
// exit ;
15663: POP
15664: POP
15665: GO 15671
// end ;
15667: GO 15632
15669: POP
15670: POP
// end ;
15671: LD_VAR 0 3
15675: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
15676: LD_INT 0
15678: PPUSH
15679: PPUSH
15680: PPUSH
15681: PPUSH
15682: PPUSH
15683: PPUSH
15684: PPUSH
15685: PPUSH
15686: PPUSH
15687: PPUSH
15688: PPUSH
15689: PPUSH
15690: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
15691: LD_VAR 0 1
15695: NOT
15696: PUSH
15697: LD_VAR 0 1
15701: PPUSH
15702: CALL_OW 257
15706: PUSH
15707: LD_INT 9
15709: NONEQUAL
15710: OR
15711: IFFALSE 15715
// exit ;
15713: GO 16288
// side := GetSide ( unit ) ;
15715: LD_ADDR_VAR 0 9
15719: PUSH
15720: LD_VAR 0 1
15724: PPUSH
15725: CALL_OW 255
15729: ST_TO_ADDR
// tech_space := tech_spacanom ;
15730: LD_ADDR_VAR 0 12
15734: PUSH
15735: LD_INT 29
15737: ST_TO_ADDR
// tech_time := tech_taurad ;
15738: LD_ADDR_VAR 0 13
15742: PUSH
15743: LD_INT 28
15745: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
15746: LD_ADDR_VAR 0 11
15750: PUSH
15751: LD_VAR 0 1
15755: PPUSH
15756: CALL_OW 310
15760: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
15761: LD_VAR 0 11
15765: PPUSH
15766: CALL_OW 247
15770: PUSH
15771: LD_INT 2
15773: EQUAL
15774: IFFALSE 15778
// exit ;
15776: GO 16288
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15778: LD_ADDR_VAR 0 8
15782: PUSH
15783: LD_INT 81
15785: PUSH
15786: LD_VAR 0 9
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: PUSH
15795: LD_INT 3
15797: PUSH
15798: LD_INT 21
15800: PUSH
15801: LD_INT 3
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PPUSH
15816: CALL_OW 69
15820: ST_TO_ADDR
// if not tmp then
15821: LD_VAR 0 8
15825: NOT
15826: IFFALSE 15830
// exit ;
15828: GO 16288
// if in_unit then
15830: LD_VAR 0 11
15834: IFFALSE 15858
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
15836: LD_ADDR_VAR 0 10
15840: PUSH
15841: LD_VAR 0 8
15845: PPUSH
15846: LD_VAR 0 11
15850: PPUSH
15851: CALL_OW 74
15855: ST_TO_ADDR
15856: GO 15878
// enemy := NearestUnitToUnit ( tmp , unit ) ;
15858: LD_ADDR_VAR 0 10
15862: PUSH
15863: LD_VAR 0 8
15867: PPUSH
15868: LD_VAR 0 1
15872: PPUSH
15873: CALL_OW 74
15877: ST_TO_ADDR
// if not enemy then
15878: LD_VAR 0 10
15882: NOT
15883: IFFALSE 15887
// exit ;
15885: GO 16288
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
15887: LD_VAR 0 11
15891: PUSH
15892: LD_VAR 0 11
15896: PPUSH
15897: LD_VAR 0 10
15901: PPUSH
15902: CALL_OW 296
15906: PUSH
15907: LD_INT 13
15909: GREATER
15910: AND
15911: PUSH
15912: LD_VAR 0 1
15916: PPUSH
15917: LD_VAR 0 10
15921: PPUSH
15922: CALL_OW 296
15926: PUSH
15927: LD_INT 12
15929: GREATER
15930: OR
15931: IFFALSE 15935
// exit ;
15933: GO 16288
// missile := [ 1 ] ;
15935: LD_ADDR_VAR 0 14
15939: PUSH
15940: LD_INT 1
15942: PUSH
15943: EMPTY
15944: LIST
15945: ST_TO_ADDR
// if Researched ( side , tech_space ) then
15946: LD_VAR 0 9
15950: PPUSH
15951: LD_VAR 0 12
15955: PPUSH
15956: CALL_OW 325
15960: IFFALSE 15989
// missile := Replace ( missile , missile + 1 , 2 ) ;
15962: LD_ADDR_VAR 0 14
15966: PUSH
15967: LD_VAR 0 14
15971: PPUSH
15972: LD_VAR 0 14
15976: PUSH
15977: LD_INT 1
15979: PLUS
15980: PPUSH
15981: LD_INT 2
15983: PPUSH
15984: CALL_OW 1
15988: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
15989: LD_VAR 0 9
15993: PPUSH
15994: LD_VAR 0 13
15998: PPUSH
15999: CALL_OW 325
16003: PUSH
16004: LD_VAR 0 10
16008: PPUSH
16009: CALL_OW 255
16013: PPUSH
16014: LD_VAR 0 13
16018: PPUSH
16019: CALL_OW 325
16023: NOT
16024: AND
16025: IFFALSE 16054
// missile := Replace ( missile , missile + 1 , 3 ) ;
16027: LD_ADDR_VAR 0 14
16031: PUSH
16032: LD_VAR 0 14
16036: PPUSH
16037: LD_VAR 0 14
16041: PUSH
16042: LD_INT 1
16044: PLUS
16045: PPUSH
16046: LD_INT 3
16048: PPUSH
16049: CALL_OW 1
16053: ST_TO_ADDR
// if missile < 2 then
16054: LD_VAR 0 14
16058: PUSH
16059: LD_INT 2
16061: LESS
16062: IFFALSE 16066
// exit ;
16064: GO 16288
// x := GetX ( enemy ) ;
16066: LD_ADDR_VAR 0 4
16070: PUSH
16071: LD_VAR 0 10
16075: PPUSH
16076: CALL_OW 250
16080: ST_TO_ADDR
// y := GetY ( enemy ) ;
16081: LD_ADDR_VAR 0 5
16085: PUSH
16086: LD_VAR 0 10
16090: PPUSH
16091: CALL_OW 251
16095: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16096: LD_ADDR_VAR 0 6
16100: PUSH
16101: LD_VAR 0 4
16105: PUSH
16106: LD_INT 1
16108: NEG
16109: PPUSH
16110: LD_INT 1
16112: PPUSH
16113: CALL_OW 12
16117: PLUS
16118: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16119: LD_ADDR_VAR 0 7
16123: PUSH
16124: LD_VAR 0 5
16128: PUSH
16129: LD_INT 1
16131: NEG
16132: PPUSH
16133: LD_INT 1
16135: PPUSH
16136: CALL_OW 12
16140: PLUS
16141: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16142: LD_VAR 0 6
16146: PPUSH
16147: LD_VAR 0 7
16151: PPUSH
16152: CALL_OW 488
16156: NOT
16157: IFFALSE 16179
// begin _x := x ;
16159: LD_ADDR_VAR 0 6
16163: PUSH
16164: LD_VAR 0 4
16168: ST_TO_ADDR
// _y := y ;
16169: LD_ADDR_VAR 0 7
16173: PUSH
16174: LD_VAR 0 5
16178: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16179: LD_ADDR_VAR 0 3
16183: PUSH
16184: LD_INT 1
16186: PPUSH
16187: LD_VAR 0 14
16191: PPUSH
16192: CALL_OW 12
16196: ST_TO_ADDR
// case i of 1 :
16197: LD_VAR 0 3
16201: PUSH
16202: LD_INT 1
16204: DOUBLE
16205: EQUAL
16206: IFTRUE 16210
16208: GO 16227
16210: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16211: LD_VAR 0 1
16215: PPUSH
16216: LD_VAR 0 10
16220: PPUSH
16221: CALL_OW 115
16225: GO 16288
16227: LD_INT 2
16229: DOUBLE
16230: EQUAL
16231: IFTRUE 16235
16233: GO 16257
16235: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16236: LD_VAR 0 1
16240: PPUSH
16241: LD_VAR 0 6
16245: PPUSH
16246: LD_VAR 0 7
16250: PPUSH
16251: CALL_OW 153
16255: GO 16288
16257: LD_INT 3
16259: DOUBLE
16260: EQUAL
16261: IFTRUE 16265
16263: GO 16287
16265: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16266: LD_VAR 0 1
16270: PPUSH
16271: LD_VAR 0 6
16275: PPUSH
16276: LD_VAR 0 7
16280: PPUSH
16281: CALL_OW 154
16285: GO 16288
16287: POP
// end ;
16288: LD_VAR 0 2
16292: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16293: LD_INT 0
16295: PPUSH
16296: PPUSH
16297: PPUSH
16298: PPUSH
16299: PPUSH
16300: PPUSH
// if not unit or not building then
16301: LD_VAR 0 1
16305: NOT
16306: PUSH
16307: LD_VAR 0 2
16311: NOT
16312: OR
16313: IFFALSE 16317
// exit ;
16315: GO 16475
// x := GetX ( building ) ;
16317: LD_ADDR_VAR 0 5
16321: PUSH
16322: LD_VAR 0 2
16326: PPUSH
16327: CALL_OW 250
16331: ST_TO_ADDR
// y := GetY ( building ) ;
16332: LD_ADDR_VAR 0 6
16336: PUSH
16337: LD_VAR 0 2
16341: PPUSH
16342: CALL_OW 251
16346: ST_TO_ADDR
// for i = 0 to 5 do
16347: LD_ADDR_VAR 0 4
16351: PUSH
16352: DOUBLE
16353: LD_INT 0
16355: DEC
16356: ST_TO_ADDR
16357: LD_INT 5
16359: PUSH
16360: FOR_TO
16361: IFFALSE 16473
// begin _x := ShiftX ( x , i , 3 ) ;
16363: LD_ADDR_VAR 0 7
16367: PUSH
16368: LD_VAR 0 5
16372: PPUSH
16373: LD_VAR 0 4
16377: PPUSH
16378: LD_INT 3
16380: PPUSH
16381: CALL_OW 272
16385: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16386: LD_ADDR_VAR 0 8
16390: PUSH
16391: LD_VAR 0 6
16395: PPUSH
16396: LD_VAR 0 4
16400: PPUSH
16401: LD_INT 3
16403: PPUSH
16404: CALL_OW 273
16408: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16409: LD_VAR 0 7
16413: PPUSH
16414: LD_VAR 0 8
16418: PPUSH
16419: CALL_OW 488
16423: NOT
16424: IFFALSE 16428
// continue ;
16426: GO 16360
// if HexInfo ( _x , _y ) = 0 then
16428: LD_VAR 0 7
16432: PPUSH
16433: LD_VAR 0 8
16437: PPUSH
16438: CALL_OW 428
16442: PUSH
16443: LD_INT 0
16445: EQUAL
16446: IFFALSE 16471
// begin ComMoveXY ( unit , _x , _y ) ;
16448: LD_VAR 0 1
16452: PPUSH
16453: LD_VAR 0 7
16457: PPUSH
16458: LD_VAR 0 8
16462: PPUSH
16463: CALL_OW 111
// exit ;
16467: POP
16468: POP
16469: GO 16475
// end ; end ;
16471: GO 16360
16473: POP
16474: POP
// end ;
16475: LD_VAR 0 3
16479: RET
// export function ScanBase ( side , base_area ) ; begin
16480: LD_INT 0
16482: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16483: LD_ADDR_VAR 0 3
16487: PUSH
16488: LD_VAR 0 2
16492: PPUSH
16493: LD_INT 81
16495: PUSH
16496: LD_VAR 0 1
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PPUSH
16505: CALL_OW 70
16509: ST_TO_ADDR
// end ;
16510: LD_VAR 0 3
16514: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16515: LD_INT 0
16517: PPUSH
16518: PPUSH
16519: PPUSH
16520: PPUSH
// result := false ;
16521: LD_ADDR_VAR 0 2
16525: PUSH
16526: LD_INT 0
16528: ST_TO_ADDR
// side := GetSide ( unit ) ;
16529: LD_ADDR_VAR 0 3
16533: PUSH
16534: LD_VAR 0 1
16538: PPUSH
16539: CALL_OW 255
16543: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16544: LD_ADDR_VAR 0 4
16548: PUSH
16549: LD_VAR 0 1
16553: PPUSH
16554: CALL_OW 248
16558: ST_TO_ADDR
// case nat of 1 :
16559: LD_VAR 0 4
16563: PUSH
16564: LD_INT 1
16566: DOUBLE
16567: EQUAL
16568: IFTRUE 16572
16570: GO 16583
16572: POP
// tech := tech_lassight ; 2 :
16573: LD_ADDR_VAR 0 5
16577: PUSH
16578: LD_INT 12
16580: ST_TO_ADDR
16581: GO 16622
16583: LD_INT 2
16585: DOUBLE
16586: EQUAL
16587: IFTRUE 16591
16589: GO 16602
16591: POP
// tech := tech_mortar ; 3 :
16592: LD_ADDR_VAR 0 5
16596: PUSH
16597: LD_INT 41
16599: ST_TO_ADDR
16600: GO 16622
16602: LD_INT 3
16604: DOUBLE
16605: EQUAL
16606: IFTRUE 16610
16608: GO 16621
16610: POP
// tech := tech_bazooka ; end ;
16611: LD_ADDR_VAR 0 5
16615: PUSH
16616: LD_INT 44
16618: ST_TO_ADDR
16619: GO 16622
16621: POP
// if Researched ( side , tech ) then
16622: LD_VAR 0 3
16626: PPUSH
16627: LD_VAR 0 5
16631: PPUSH
16632: CALL_OW 325
16636: IFFALSE 16663
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
16638: LD_ADDR_VAR 0 2
16642: PUSH
16643: LD_INT 5
16645: PUSH
16646: LD_INT 8
16648: PUSH
16649: LD_INT 9
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: PUSH
16657: LD_VAR 0 4
16661: ARRAY
16662: ST_TO_ADDR
// end ;
16663: LD_VAR 0 2
16667: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
16668: LD_INT 0
16670: PPUSH
16671: PPUSH
16672: PPUSH
// if not mines then
16673: LD_VAR 0 2
16677: NOT
16678: IFFALSE 16682
// exit ;
16680: GO 16826
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16682: LD_ADDR_VAR 0 5
16686: PUSH
16687: LD_INT 81
16689: PUSH
16690: LD_VAR 0 1
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PUSH
16699: LD_INT 3
16701: PUSH
16702: LD_INT 21
16704: PUSH
16705: LD_INT 3
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PPUSH
16720: CALL_OW 69
16724: ST_TO_ADDR
// for i in mines do
16725: LD_ADDR_VAR 0 4
16729: PUSH
16730: LD_VAR 0 2
16734: PUSH
16735: FOR_IN
16736: IFFALSE 16824
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
16738: LD_VAR 0 4
16742: PUSH
16743: LD_INT 1
16745: ARRAY
16746: PPUSH
16747: LD_VAR 0 4
16751: PUSH
16752: LD_INT 2
16754: ARRAY
16755: PPUSH
16756: CALL_OW 458
16760: NOT
16761: IFFALSE 16765
// continue ;
16763: GO 16735
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
16765: LD_VAR 0 4
16769: PUSH
16770: LD_INT 1
16772: ARRAY
16773: PPUSH
16774: LD_VAR 0 4
16778: PUSH
16779: LD_INT 2
16781: ARRAY
16782: PPUSH
16783: CALL_OW 428
16787: PUSH
16788: LD_VAR 0 5
16792: IN
16793: IFFALSE 16822
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
16795: LD_VAR 0 4
16799: PUSH
16800: LD_INT 1
16802: ARRAY
16803: PPUSH
16804: LD_VAR 0 4
16808: PUSH
16809: LD_INT 2
16811: ARRAY
16812: PPUSH
16813: LD_VAR 0 1
16817: PPUSH
16818: CALL_OW 456
// end ;
16822: GO 16735
16824: POP
16825: POP
// end ;
16826: LD_VAR 0 3
16830: RET
// export function Count ( array ) ; begin
16831: LD_INT 0
16833: PPUSH
// result := array + 0 ;
16834: LD_ADDR_VAR 0 2
16838: PUSH
16839: LD_VAR 0 1
16843: PUSH
16844: LD_INT 0
16846: PLUS
16847: ST_TO_ADDR
// end ;
16848: LD_VAR 0 2
16852: RET
// export function IsEmpty ( building ) ; begin
16853: LD_INT 0
16855: PPUSH
// if not building then
16856: LD_VAR 0 1
16860: NOT
16861: IFFALSE 16865
// exit ;
16863: GO 16908
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
16865: LD_ADDR_VAR 0 2
16869: PUSH
16870: LD_VAR 0 1
16874: PUSH
16875: LD_INT 22
16877: PUSH
16878: LD_VAR 0 1
16882: PPUSH
16883: CALL_OW 255
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 58
16894: PUSH
16895: EMPTY
16896: LIST
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PPUSH
16902: CALL_OW 69
16906: IN
16907: ST_TO_ADDR
// end ;
16908: LD_VAR 0 2
16912: RET
// export function IsNotFull ( building ) ; var places ; begin
16913: LD_INT 0
16915: PPUSH
16916: PPUSH
// if not building then
16917: LD_VAR 0 1
16921: NOT
16922: IFFALSE 16926
// exit ;
16924: GO 16954
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
16926: LD_ADDR_VAR 0 2
16930: PUSH
16931: LD_VAR 0 1
16935: PPUSH
16936: LD_INT 3
16938: PUSH
16939: LD_INT 62
16941: PUSH
16942: EMPTY
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PPUSH
16949: CALL_OW 72
16953: ST_TO_ADDR
// end ;
16954: LD_VAR 0 2
16958: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
16959: LD_INT 0
16961: PPUSH
16962: PPUSH
16963: PPUSH
16964: PPUSH
// tmp := [ ] ;
16965: LD_ADDR_VAR 0 3
16969: PUSH
16970: EMPTY
16971: ST_TO_ADDR
// list := [ ] ;
16972: LD_ADDR_VAR 0 5
16976: PUSH
16977: EMPTY
16978: ST_TO_ADDR
// for i = 16 to 25 do
16979: LD_ADDR_VAR 0 4
16983: PUSH
16984: DOUBLE
16985: LD_INT 16
16987: DEC
16988: ST_TO_ADDR
16989: LD_INT 25
16991: PUSH
16992: FOR_TO
16993: IFFALSE 17066
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
16995: LD_ADDR_VAR 0 3
16999: PUSH
17000: LD_VAR 0 3
17004: PUSH
17005: LD_INT 22
17007: PUSH
17008: LD_VAR 0 1
17012: PPUSH
17013: CALL_OW 255
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 91
17024: PUSH
17025: LD_VAR 0 1
17029: PUSH
17030: LD_INT 6
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 30
17040: PUSH
17041: LD_VAR 0 4
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: LIST
17054: PUSH
17055: EMPTY
17056: LIST
17057: PPUSH
17058: CALL_OW 69
17062: ADD
17063: ST_TO_ADDR
17064: GO 16992
17066: POP
17067: POP
// for i = 1 to tmp do
17068: LD_ADDR_VAR 0 4
17072: PUSH
17073: DOUBLE
17074: LD_INT 1
17076: DEC
17077: ST_TO_ADDR
17078: LD_VAR 0 3
17082: PUSH
17083: FOR_TO
17084: IFFALSE 17172
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17086: LD_ADDR_VAR 0 5
17090: PUSH
17091: LD_VAR 0 5
17095: PUSH
17096: LD_VAR 0 3
17100: PUSH
17101: LD_VAR 0 4
17105: ARRAY
17106: PPUSH
17107: CALL_OW 266
17111: PUSH
17112: LD_VAR 0 3
17116: PUSH
17117: LD_VAR 0 4
17121: ARRAY
17122: PPUSH
17123: CALL_OW 250
17127: PUSH
17128: LD_VAR 0 3
17132: PUSH
17133: LD_VAR 0 4
17137: ARRAY
17138: PPUSH
17139: CALL_OW 251
17143: PUSH
17144: LD_VAR 0 3
17148: PUSH
17149: LD_VAR 0 4
17153: ARRAY
17154: PPUSH
17155: CALL_OW 254
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: PUSH
17166: EMPTY
17167: LIST
17168: ADD
17169: ST_TO_ADDR
17170: GO 17083
17172: POP
17173: POP
// result := list ;
17174: LD_ADDR_VAR 0 2
17178: PUSH
17179: LD_VAR 0 5
17183: ST_TO_ADDR
// end ;
17184: LD_VAR 0 2
17188: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17189: LD_INT 0
17191: PPUSH
17192: PPUSH
17193: PPUSH
17194: PPUSH
17195: PPUSH
17196: PPUSH
17197: PPUSH
// if not factory then
17198: LD_VAR 0 1
17202: NOT
17203: IFFALSE 17207
// exit ;
17205: GO 17800
// if control = control_apeman then
17207: LD_VAR 0 4
17211: PUSH
17212: LD_INT 5
17214: EQUAL
17215: IFFALSE 17324
// begin tmp := UnitsInside ( factory ) ;
17217: LD_ADDR_VAR 0 8
17221: PUSH
17222: LD_VAR 0 1
17226: PPUSH
17227: CALL_OW 313
17231: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17232: LD_VAR 0 8
17236: PPUSH
17237: LD_INT 25
17239: PUSH
17240: LD_INT 12
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PPUSH
17247: CALL_OW 72
17251: NOT
17252: IFFALSE 17262
// control := control_manual ;
17254: LD_ADDR_VAR 0 4
17258: PUSH
17259: LD_INT 1
17261: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17262: LD_ADDR_VAR 0 8
17266: PUSH
17267: LD_VAR 0 1
17271: PPUSH
17272: CALL 16959 0 1
17276: ST_TO_ADDR
// if tmp then
17277: LD_VAR 0 8
17281: IFFALSE 17324
// begin for i in tmp do
17283: LD_ADDR_VAR 0 7
17287: PUSH
17288: LD_VAR 0 8
17292: PUSH
17293: FOR_IN
17294: IFFALSE 17322
// if i [ 1 ] = b_ext_radio then
17296: LD_VAR 0 7
17300: PUSH
17301: LD_INT 1
17303: ARRAY
17304: PUSH
17305: LD_INT 22
17307: EQUAL
17308: IFFALSE 17320
// begin control := control_remote ;
17310: LD_ADDR_VAR 0 4
17314: PUSH
17315: LD_INT 2
17317: ST_TO_ADDR
// break ;
17318: GO 17322
// end ;
17320: GO 17293
17322: POP
17323: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17324: LD_VAR 0 1
17328: PPUSH
17329: LD_VAR 0 2
17333: PPUSH
17334: LD_VAR 0 3
17338: PPUSH
17339: LD_VAR 0 4
17343: PPUSH
17344: LD_VAR 0 5
17348: PPUSH
17349: CALL_OW 448
17353: IFFALSE 17388
// begin result := [ chassis , engine , control , weapon ] ;
17355: LD_ADDR_VAR 0 6
17359: PUSH
17360: LD_VAR 0 2
17364: PUSH
17365: LD_VAR 0 3
17369: PUSH
17370: LD_VAR 0 4
17374: PUSH
17375: LD_VAR 0 5
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: ST_TO_ADDR
// exit ;
17386: GO 17800
// end ; _chassis := AvailableChassisList ( factory ) ;
17388: LD_ADDR_VAR 0 9
17392: PUSH
17393: LD_VAR 0 1
17397: PPUSH
17398: CALL_OW 475
17402: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17403: LD_ADDR_VAR 0 11
17407: PUSH
17408: LD_VAR 0 1
17412: PPUSH
17413: CALL_OW 476
17417: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17418: LD_ADDR_VAR 0 12
17422: PUSH
17423: LD_VAR 0 1
17427: PPUSH
17428: CALL_OW 477
17432: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17433: LD_ADDR_VAR 0 10
17437: PUSH
17438: LD_VAR 0 1
17442: PPUSH
17443: CALL_OW 478
17447: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17448: LD_VAR 0 9
17452: NOT
17453: PUSH
17454: LD_VAR 0 11
17458: NOT
17459: OR
17460: PUSH
17461: LD_VAR 0 12
17465: NOT
17466: OR
17467: PUSH
17468: LD_VAR 0 10
17472: NOT
17473: OR
17474: IFFALSE 17509
// begin result := [ chassis , engine , control , weapon ] ;
17476: LD_ADDR_VAR 0 6
17480: PUSH
17481: LD_VAR 0 2
17485: PUSH
17486: LD_VAR 0 3
17490: PUSH
17491: LD_VAR 0 4
17495: PUSH
17496: LD_VAR 0 5
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: ST_TO_ADDR
// exit ;
17507: GO 17800
// end ; if not chassis in _chassis then
17509: LD_VAR 0 2
17513: PUSH
17514: LD_VAR 0 9
17518: IN
17519: NOT
17520: IFFALSE 17546
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17522: LD_ADDR_VAR 0 2
17526: PUSH
17527: LD_VAR 0 9
17531: PUSH
17532: LD_INT 1
17534: PPUSH
17535: LD_VAR 0 9
17539: PPUSH
17540: CALL_OW 12
17544: ARRAY
17545: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17546: LD_VAR 0 2
17550: PPUSH
17551: LD_VAR 0 3
17555: PPUSH
17556: CALL 17805 0 2
17560: NOT
17561: IFFALSE 17620
// repeat engine := _engine [ 1 ] ;
17563: LD_ADDR_VAR 0 3
17567: PUSH
17568: LD_VAR 0 11
17572: PUSH
17573: LD_INT 1
17575: ARRAY
17576: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17577: LD_ADDR_VAR 0 11
17581: PUSH
17582: LD_VAR 0 11
17586: PPUSH
17587: LD_INT 1
17589: PPUSH
17590: CALL_OW 3
17594: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17595: LD_VAR 0 2
17599: PPUSH
17600: LD_VAR 0 3
17604: PPUSH
17605: CALL 17805 0 2
17609: PUSH
17610: LD_VAR 0 11
17614: PUSH
17615: EMPTY
17616: EQUAL
17617: OR
17618: IFFALSE 17563
// if not control in _control then
17620: LD_VAR 0 4
17624: PUSH
17625: LD_VAR 0 12
17629: IN
17630: NOT
17631: IFFALSE 17657
// control := _control [ rand ( 1 , _control ) ] ;
17633: LD_ADDR_VAR 0 4
17637: PUSH
17638: LD_VAR 0 12
17642: PUSH
17643: LD_INT 1
17645: PPUSH
17646: LD_VAR 0 12
17650: PPUSH
17651: CALL_OW 12
17655: ARRAY
17656: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
17657: LD_VAR 0 2
17661: PPUSH
17662: LD_VAR 0 5
17666: PPUSH
17667: CALL 18025 0 2
17671: NOT
17672: IFFALSE 17731
// repeat weapon := _weapon [ 1 ] ;
17674: LD_ADDR_VAR 0 5
17678: PUSH
17679: LD_VAR 0 10
17683: PUSH
17684: LD_INT 1
17686: ARRAY
17687: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
17688: LD_ADDR_VAR 0 10
17692: PUSH
17693: LD_VAR 0 10
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 3
17705: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
17706: LD_VAR 0 2
17710: PPUSH
17711: LD_VAR 0 5
17715: PPUSH
17716: CALL 18025 0 2
17720: PUSH
17721: LD_VAR 0 10
17725: PUSH
17726: EMPTY
17727: EQUAL
17728: OR
17729: IFFALSE 17674
// result := [ ] ;
17731: LD_ADDR_VAR 0 6
17735: PUSH
17736: EMPTY
17737: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17738: LD_VAR 0 1
17742: PPUSH
17743: LD_VAR 0 2
17747: PPUSH
17748: LD_VAR 0 3
17752: PPUSH
17753: LD_VAR 0 4
17757: PPUSH
17758: LD_VAR 0 5
17762: PPUSH
17763: CALL_OW 448
17767: IFFALSE 17800
// result := [ chassis , engine , control , weapon ] ;
17769: LD_ADDR_VAR 0 6
17773: PUSH
17774: LD_VAR 0 2
17778: PUSH
17779: LD_VAR 0 3
17783: PUSH
17784: LD_VAR 0 4
17788: PUSH
17789: LD_VAR 0 5
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: ST_TO_ADDR
// end ;
17800: LD_VAR 0 6
17804: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
17805: LD_INT 0
17807: PPUSH
// if not chassis or not engine then
17808: LD_VAR 0 1
17812: NOT
17813: PUSH
17814: LD_VAR 0 2
17818: NOT
17819: OR
17820: IFFALSE 17824
// exit ;
17822: GO 18020
// case engine of engine_solar :
17824: LD_VAR 0 2
17828: PUSH
17829: LD_INT 2
17831: DOUBLE
17832: EQUAL
17833: IFTRUE 17837
17835: GO 17875
17837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
17838: LD_ADDR_VAR 0 3
17842: PUSH
17843: LD_INT 11
17845: PUSH
17846: LD_INT 12
17848: PUSH
17849: LD_INT 13
17851: PUSH
17852: LD_INT 14
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: LD_INT 3
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: ST_TO_ADDR
17873: GO 18004
17875: LD_INT 1
17877: DOUBLE
17878: EQUAL
17879: IFTRUE 17883
17881: GO 17945
17883: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
17884: LD_ADDR_VAR 0 3
17888: PUSH
17889: LD_INT 11
17891: PUSH
17892: LD_INT 12
17894: PUSH
17895: LD_INT 13
17897: PUSH
17898: LD_INT 14
17900: PUSH
17901: LD_INT 1
17903: PUSH
17904: LD_INT 2
17906: PUSH
17907: LD_INT 3
17909: PUSH
17910: LD_INT 4
17912: PUSH
17913: LD_INT 5
17915: PUSH
17916: LD_INT 21
17918: PUSH
17919: LD_INT 23
17921: PUSH
17922: LD_INT 22
17924: PUSH
17925: LD_INT 24
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: ST_TO_ADDR
17943: GO 18004
17945: LD_INT 3
17947: DOUBLE
17948: EQUAL
17949: IFTRUE 17953
17951: GO 18003
17953: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17954: LD_ADDR_VAR 0 3
17958: PUSH
17959: LD_INT 13
17961: PUSH
17962: LD_INT 14
17964: PUSH
17965: LD_INT 2
17967: PUSH
17968: LD_INT 3
17970: PUSH
17971: LD_INT 4
17973: PUSH
17974: LD_INT 5
17976: PUSH
17977: LD_INT 21
17979: PUSH
17980: LD_INT 22
17982: PUSH
17983: LD_INT 23
17985: PUSH
17986: LD_INT 24
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: ST_TO_ADDR
18001: GO 18004
18003: POP
// result := ( chassis in result ) ;
18004: LD_ADDR_VAR 0 3
18008: PUSH
18009: LD_VAR 0 1
18013: PUSH
18014: LD_VAR 0 3
18018: IN
18019: ST_TO_ADDR
// end ;
18020: LD_VAR 0 3
18024: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18025: LD_INT 0
18027: PPUSH
// if not chassis or not weapon then
18028: LD_VAR 0 1
18032: NOT
18033: PUSH
18034: LD_VAR 0 2
18038: NOT
18039: OR
18040: IFFALSE 18044
// exit ;
18042: GO 19104
// case weapon of us_machine_gun :
18044: LD_VAR 0 2
18048: PUSH
18049: LD_INT 2
18051: DOUBLE
18052: EQUAL
18053: IFTRUE 18057
18055: GO 18087
18057: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18058: LD_ADDR_VAR 0 3
18062: PUSH
18063: LD_INT 1
18065: PUSH
18066: LD_INT 2
18068: PUSH
18069: LD_INT 3
18071: PUSH
18072: LD_INT 4
18074: PUSH
18075: LD_INT 5
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: ST_TO_ADDR
18085: GO 19088
18087: LD_INT 3
18089: DOUBLE
18090: EQUAL
18091: IFTRUE 18095
18093: GO 18125
18095: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18096: LD_ADDR_VAR 0 3
18100: PUSH
18101: LD_INT 1
18103: PUSH
18104: LD_INT 2
18106: PUSH
18107: LD_INT 3
18109: PUSH
18110: LD_INT 4
18112: PUSH
18113: LD_INT 5
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: ST_TO_ADDR
18123: GO 19088
18125: LD_INT 11
18127: DOUBLE
18128: EQUAL
18129: IFTRUE 18133
18131: GO 18163
18133: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18134: LD_ADDR_VAR 0 3
18138: PUSH
18139: LD_INT 1
18141: PUSH
18142: LD_INT 2
18144: PUSH
18145: LD_INT 3
18147: PUSH
18148: LD_INT 4
18150: PUSH
18151: LD_INT 5
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: ST_TO_ADDR
18161: GO 19088
18163: LD_INT 4
18165: DOUBLE
18166: EQUAL
18167: IFTRUE 18171
18169: GO 18197
18171: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18172: LD_ADDR_VAR 0 3
18176: PUSH
18177: LD_INT 2
18179: PUSH
18180: LD_INT 3
18182: PUSH
18183: LD_INT 4
18185: PUSH
18186: LD_INT 5
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: ST_TO_ADDR
18195: GO 19088
18197: LD_INT 5
18199: DOUBLE
18200: EQUAL
18201: IFTRUE 18205
18203: GO 18231
18205: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18206: LD_ADDR_VAR 0 3
18210: PUSH
18211: LD_INT 2
18213: PUSH
18214: LD_INT 3
18216: PUSH
18217: LD_INT 4
18219: PUSH
18220: LD_INT 5
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: ST_TO_ADDR
18229: GO 19088
18231: LD_INT 9
18233: DOUBLE
18234: EQUAL
18235: IFTRUE 18239
18237: GO 18265
18239: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18240: LD_ADDR_VAR 0 3
18244: PUSH
18245: LD_INT 2
18247: PUSH
18248: LD_INT 3
18250: PUSH
18251: LD_INT 4
18253: PUSH
18254: LD_INT 5
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: ST_TO_ADDR
18263: GO 19088
18265: LD_INT 7
18267: DOUBLE
18268: EQUAL
18269: IFTRUE 18273
18271: GO 18299
18273: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18274: LD_ADDR_VAR 0 3
18278: PUSH
18279: LD_INT 2
18281: PUSH
18282: LD_INT 3
18284: PUSH
18285: LD_INT 4
18287: PUSH
18288: LD_INT 5
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: ST_TO_ADDR
18297: GO 19088
18299: LD_INT 12
18301: DOUBLE
18302: EQUAL
18303: IFTRUE 18307
18305: GO 18333
18307: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18308: LD_ADDR_VAR 0 3
18312: PUSH
18313: LD_INT 2
18315: PUSH
18316: LD_INT 3
18318: PUSH
18319: LD_INT 4
18321: PUSH
18322: LD_INT 5
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: ST_TO_ADDR
18331: GO 19088
18333: LD_INT 13
18335: DOUBLE
18336: EQUAL
18337: IFTRUE 18341
18339: GO 18367
18341: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18342: LD_ADDR_VAR 0 3
18346: PUSH
18347: LD_INT 2
18349: PUSH
18350: LD_INT 3
18352: PUSH
18353: LD_INT 4
18355: PUSH
18356: LD_INT 5
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: ST_TO_ADDR
18365: GO 19088
18367: LD_INT 14
18369: DOUBLE
18370: EQUAL
18371: IFTRUE 18375
18373: GO 18393
18375: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18376: LD_ADDR_VAR 0 3
18380: PUSH
18381: LD_INT 4
18383: PUSH
18384: LD_INT 5
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: ST_TO_ADDR
18391: GO 19088
18393: LD_INT 6
18395: DOUBLE
18396: EQUAL
18397: IFTRUE 18401
18399: GO 18419
18401: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18402: LD_ADDR_VAR 0 3
18406: PUSH
18407: LD_INT 4
18409: PUSH
18410: LD_INT 5
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: ST_TO_ADDR
18417: GO 19088
18419: LD_INT 10
18421: DOUBLE
18422: EQUAL
18423: IFTRUE 18427
18425: GO 18445
18427: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18428: LD_ADDR_VAR 0 3
18432: PUSH
18433: LD_INT 4
18435: PUSH
18436: LD_INT 5
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: ST_TO_ADDR
18443: GO 19088
18445: LD_INT 22
18447: DOUBLE
18448: EQUAL
18449: IFTRUE 18453
18451: GO 18479
18453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18454: LD_ADDR_VAR 0 3
18458: PUSH
18459: LD_INT 11
18461: PUSH
18462: LD_INT 12
18464: PUSH
18465: LD_INT 13
18467: PUSH
18468: LD_INT 14
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: ST_TO_ADDR
18477: GO 19088
18479: LD_INT 23
18481: DOUBLE
18482: EQUAL
18483: IFTRUE 18487
18485: GO 18513
18487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18488: LD_ADDR_VAR 0 3
18492: PUSH
18493: LD_INT 11
18495: PUSH
18496: LD_INT 12
18498: PUSH
18499: LD_INT 13
18501: PUSH
18502: LD_INT 14
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: ST_TO_ADDR
18511: GO 19088
18513: LD_INT 24
18515: DOUBLE
18516: EQUAL
18517: IFTRUE 18521
18519: GO 18547
18521: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18522: LD_ADDR_VAR 0 3
18526: PUSH
18527: LD_INT 11
18529: PUSH
18530: LD_INT 12
18532: PUSH
18533: LD_INT 13
18535: PUSH
18536: LD_INT 14
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: ST_TO_ADDR
18545: GO 19088
18547: LD_INT 30
18549: DOUBLE
18550: EQUAL
18551: IFTRUE 18555
18553: GO 18581
18555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18556: LD_ADDR_VAR 0 3
18560: PUSH
18561: LD_INT 11
18563: PUSH
18564: LD_INT 12
18566: PUSH
18567: LD_INT 13
18569: PUSH
18570: LD_INT 14
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: ST_TO_ADDR
18579: GO 19088
18581: LD_INT 25
18583: DOUBLE
18584: EQUAL
18585: IFTRUE 18589
18587: GO 18607
18589: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18590: LD_ADDR_VAR 0 3
18594: PUSH
18595: LD_INT 13
18597: PUSH
18598: LD_INT 14
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: ST_TO_ADDR
18605: GO 19088
18607: LD_INT 27
18609: DOUBLE
18610: EQUAL
18611: IFTRUE 18615
18613: GO 18633
18615: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
18616: LD_ADDR_VAR 0 3
18620: PUSH
18621: LD_INT 13
18623: PUSH
18624: LD_INT 14
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: ST_TO_ADDR
18631: GO 19088
18633: LD_INT 92
18635: DOUBLE
18636: EQUAL
18637: IFTRUE 18641
18639: GO 18667
18641: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
18642: LD_ADDR_VAR 0 3
18646: PUSH
18647: LD_INT 11
18649: PUSH
18650: LD_INT 12
18652: PUSH
18653: LD_INT 13
18655: PUSH
18656: LD_INT 14
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: ST_TO_ADDR
18665: GO 19088
18667: LD_INT 28
18669: DOUBLE
18670: EQUAL
18671: IFTRUE 18675
18673: GO 18693
18675: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
18676: LD_ADDR_VAR 0 3
18680: PUSH
18681: LD_INT 13
18683: PUSH
18684: LD_INT 14
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: ST_TO_ADDR
18691: GO 19088
18693: LD_INT 29
18695: DOUBLE
18696: EQUAL
18697: IFTRUE 18701
18699: GO 18719
18701: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
18702: LD_ADDR_VAR 0 3
18706: PUSH
18707: LD_INT 13
18709: PUSH
18710: LD_INT 14
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: ST_TO_ADDR
18717: GO 19088
18719: LD_INT 31
18721: DOUBLE
18722: EQUAL
18723: IFTRUE 18727
18725: GO 18745
18727: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
18728: LD_ADDR_VAR 0 3
18732: PUSH
18733: LD_INT 13
18735: PUSH
18736: LD_INT 14
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: ST_TO_ADDR
18743: GO 19088
18745: LD_INT 26
18747: DOUBLE
18748: EQUAL
18749: IFTRUE 18753
18751: GO 18771
18753: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
18754: LD_ADDR_VAR 0 3
18758: PUSH
18759: LD_INT 13
18761: PUSH
18762: LD_INT 14
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: ST_TO_ADDR
18769: GO 19088
18771: LD_INT 42
18773: DOUBLE
18774: EQUAL
18775: IFTRUE 18779
18777: GO 18805
18779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
18780: LD_ADDR_VAR 0 3
18784: PUSH
18785: LD_INT 21
18787: PUSH
18788: LD_INT 22
18790: PUSH
18791: LD_INT 23
18793: PUSH
18794: LD_INT 24
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: ST_TO_ADDR
18803: GO 19088
18805: LD_INT 43
18807: DOUBLE
18808: EQUAL
18809: IFTRUE 18813
18811: GO 18839
18813: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
18814: LD_ADDR_VAR 0 3
18818: PUSH
18819: LD_INT 21
18821: PUSH
18822: LD_INT 22
18824: PUSH
18825: LD_INT 23
18827: PUSH
18828: LD_INT 24
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: ST_TO_ADDR
18837: GO 19088
18839: LD_INT 44
18841: DOUBLE
18842: EQUAL
18843: IFTRUE 18847
18845: GO 18873
18847: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
18848: LD_ADDR_VAR 0 3
18852: PUSH
18853: LD_INT 21
18855: PUSH
18856: LD_INT 22
18858: PUSH
18859: LD_INT 23
18861: PUSH
18862: LD_INT 24
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: ST_TO_ADDR
18871: GO 19088
18873: LD_INT 45
18875: DOUBLE
18876: EQUAL
18877: IFTRUE 18881
18879: GO 18907
18881: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
18882: LD_ADDR_VAR 0 3
18886: PUSH
18887: LD_INT 21
18889: PUSH
18890: LD_INT 22
18892: PUSH
18893: LD_INT 23
18895: PUSH
18896: LD_INT 24
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: ST_TO_ADDR
18905: GO 19088
18907: LD_INT 49
18909: DOUBLE
18910: EQUAL
18911: IFTRUE 18915
18913: GO 18941
18915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
18916: LD_ADDR_VAR 0 3
18920: PUSH
18921: LD_INT 21
18923: PUSH
18924: LD_INT 22
18926: PUSH
18927: LD_INT 23
18929: PUSH
18930: LD_INT 24
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: ST_TO_ADDR
18939: GO 19088
18941: LD_INT 51
18943: DOUBLE
18944: EQUAL
18945: IFTRUE 18949
18947: GO 18975
18949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
18950: LD_ADDR_VAR 0 3
18954: PUSH
18955: LD_INT 21
18957: PUSH
18958: LD_INT 22
18960: PUSH
18961: LD_INT 23
18963: PUSH
18964: LD_INT 24
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: ST_TO_ADDR
18973: GO 19088
18975: LD_INT 52
18977: DOUBLE
18978: EQUAL
18979: IFTRUE 18983
18981: GO 19009
18983: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
18984: LD_ADDR_VAR 0 3
18988: PUSH
18989: LD_INT 21
18991: PUSH
18992: LD_INT 22
18994: PUSH
18995: LD_INT 23
18997: PUSH
18998: LD_INT 24
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: ST_TO_ADDR
19007: GO 19088
19009: LD_INT 53
19011: DOUBLE
19012: EQUAL
19013: IFTRUE 19017
19015: GO 19035
19017: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19018: LD_ADDR_VAR 0 3
19022: PUSH
19023: LD_INT 23
19025: PUSH
19026: LD_INT 24
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: ST_TO_ADDR
19033: GO 19088
19035: LD_INT 46
19037: DOUBLE
19038: EQUAL
19039: IFTRUE 19043
19041: GO 19061
19043: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19044: LD_ADDR_VAR 0 3
19048: PUSH
19049: LD_INT 23
19051: PUSH
19052: LD_INT 24
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: ST_TO_ADDR
19059: GO 19088
19061: LD_INT 47
19063: DOUBLE
19064: EQUAL
19065: IFTRUE 19069
19067: GO 19087
19069: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19070: LD_ADDR_VAR 0 3
19074: PUSH
19075: LD_INT 23
19077: PUSH
19078: LD_INT 24
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: ST_TO_ADDR
19085: GO 19088
19087: POP
// result := ( chassis in result ) ;
19088: LD_ADDR_VAR 0 3
19092: PUSH
19093: LD_VAR 0 1
19097: PUSH
19098: LD_VAR 0 3
19102: IN
19103: ST_TO_ADDR
// end ;
19104: LD_VAR 0 3
19108: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19109: LD_INT 0
19111: PPUSH
19112: PPUSH
19113: PPUSH
19114: PPUSH
19115: PPUSH
19116: PPUSH
19117: PPUSH
// result := array ;
19118: LD_ADDR_VAR 0 5
19122: PUSH
19123: LD_VAR 0 1
19127: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19128: LD_VAR 0 1
19132: NOT
19133: PUSH
19134: LD_VAR 0 2
19138: NOT
19139: OR
19140: PUSH
19141: LD_VAR 0 3
19145: NOT
19146: OR
19147: PUSH
19148: LD_VAR 0 2
19152: PUSH
19153: LD_VAR 0 1
19157: GREATER
19158: OR
19159: PUSH
19160: LD_VAR 0 3
19164: PUSH
19165: LD_VAR 0 1
19169: GREATER
19170: OR
19171: IFFALSE 19175
// exit ;
19173: GO 19471
// if direction then
19175: LD_VAR 0 4
19179: IFFALSE 19243
// begin d := 1 ;
19181: LD_ADDR_VAR 0 9
19185: PUSH
19186: LD_INT 1
19188: ST_TO_ADDR
// if i_from > i_to then
19189: LD_VAR 0 2
19193: PUSH
19194: LD_VAR 0 3
19198: GREATER
19199: IFFALSE 19225
// length := ( array - i_from ) + i_to else
19201: LD_ADDR_VAR 0 11
19205: PUSH
19206: LD_VAR 0 1
19210: PUSH
19211: LD_VAR 0 2
19215: MINUS
19216: PUSH
19217: LD_VAR 0 3
19221: PLUS
19222: ST_TO_ADDR
19223: GO 19241
// length := i_to - i_from ;
19225: LD_ADDR_VAR 0 11
19229: PUSH
19230: LD_VAR 0 3
19234: PUSH
19235: LD_VAR 0 2
19239: MINUS
19240: ST_TO_ADDR
// end else
19241: GO 19304
// begin d := - 1 ;
19243: LD_ADDR_VAR 0 9
19247: PUSH
19248: LD_INT 1
19250: NEG
19251: ST_TO_ADDR
// if i_from > i_to then
19252: LD_VAR 0 2
19256: PUSH
19257: LD_VAR 0 3
19261: GREATER
19262: IFFALSE 19282
// length := i_from - i_to else
19264: LD_ADDR_VAR 0 11
19268: PUSH
19269: LD_VAR 0 2
19273: PUSH
19274: LD_VAR 0 3
19278: MINUS
19279: ST_TO_ADDR
19280: GO 19304
// length := ( array - i_to ) + i_from ;
19282: LD_ADDR_VAR 0 11
19286: PUSH
19287: LD_VAR 0 1
19291: PUSH
19292: LD_VAR 0 3
19296: MINUS
19297: PUSH
19298: LD_VAR 0 2
19302: PLUS
19303: ST_TO_ADDR
// end ; if not length then
19304: LD_VAR 0 11
19308: NOT
19309: IFFALSE 19313
// exit ;
19311: GO 19471
// tmp := array ;
19313: LD_ADDR_VAR 0 10
19317: PUSH
19318: LD_VAR 0 1
19322: ST_TO_ADDR
// for i = 1 to length do
19323: LD_ADDR_VAR 0 6
19327: PUSH
19328: DOUBLE
19329: LD_INT 1
19331: DEC
19332: ST_TO_ADDR
19333: LD_VAR 0 11
19337: PUSH
19338: FOR_TO
19339: IFFALSE 19459
// begin for j = 1 to array do
19341: LD_ADDR_VAR 0 7
19345: PUSH
19346: DOUBLE
19347: LD_INT 1
19349: DEC
19350: ST_TO_ADDR
19351: LD_VAR 0 1
19355: PUSH
19356: FOR_TO
19357: IFFALSE 19445
// begin k := j + d ;
19359: LD_ADDR_VAR 0 8
19363: PUSH
19364: LD_VAR 0 7
19368: PUSH
19369: LD_VAR 0 9
19373: PLUS
19374: ST_TO_ADDR
// if k > array then
19375: LD_VAR 0 8
19379: PUSH
19380: LD_VAR 0 1
19384: GREATER
19385: IFFALSE 19395
// k := 1 ;
19387: LD_ADDR_VAR 0 8
19391: PUSH
19392: LD_INT 1
19394: ST_TO_ADDR
// if not k then
19395: LD_VAR 0 8
19399: NOT
19400: IFFALSE 19412
// k := array ;
19402: LD_ADDR_VAR 0 8
19406: PUSH
19407: LD_VAR 0 1
19411: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19412: LD_ADDR_VAR 0 10
19416: PUSH
19417: LD_VAR 0 10
19421: PPUSH
19422: LD_VAR 0 8
19426: PPUSH
19427: LD_VAR 0 1
19431: PUSH
19432: LD_VAR 0 7
19436: ARRAY
19437: PPUSH
19438: CALL_OW 1
19442: ST_TO_ADDR
// end ;
19443: GO 19356
19445: POP
19446: POP
// array := tmp ;
19447: LD_ADDR_VAR 0 1
19451: PUSH
19452: LD_VAR 0 10
19456: ST_TO_ADDR
// end ;
19457: GO 19338
19459: POP
19460: POP
// result := array ;
19461: LD_ADDR_VAR 0 5
19465: PUSH
19466: LD_VAR 0 1
19470: ST_TO_ADDR
// end ;
19471: LD_VAR 0 5
19475: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19476: LD_INT 0
19478: PPUSH
19479: PPUSH
// result := 0 ;
19480: LD_ADDR_VAR 0 3
19484: PUSH
19485: LD_INT 0
19487: ST_TO_ADDR
// if not array or not value in array then
19488: LD_VAR 0 1
19492: NOT
19493: PUSH
19494: LD_VAR 0 2
19498: PUSH
19499: LD_VAR 0 1
19503: IN
19504: NOT
19505: OR
19506: IFFALSE 19510
// exit ;
19508: GO 19564
// for i = 1 to array do
19510: LD_ADDR_VAR 0 4
19514: PUSH
19515: DOUBLE
19516: LD_INT 1
19518: DEC
19519: ST_TO_ADDR
19520: LD_VAR 0 1
19524: PUSH
19525: FOR_TO
19526: IFFALSE 19562
// if value = array [ i ] then
19528: LD_VAR 0 2
19532: PUSH
19533: LD_VAR 0 1
19537: PUSH
19538: LD_VAR 0 4
19542: ARRAY
19543: EQUAL
19544: IFFALSE 19560
// begin result := i ;
19546: LD_ADDR_VAR 0 3
19550: PUSH
19551: LD_VAR 0 4
19555: ST_TO_ADDR
// exit ;
19556: POP
19557: POP
19558: GO 19564
// end ;
19560: GO 19525
19562: POP
19563: POP
// end ;
19564: LD_VAR 0 3
19568: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19569: LD_INT 0
19571: PPUSH
// vc_chassis := chassis ;
19572: LD_ADDR_OWVAR 37
19576: PUSH
19577: LD_VAR 0 1
19581: ST_TO_ADDR
// vc_engine := engine ;
19582: LD_ADDR_OWVAR 39
19586: PUSH
19587: LD_VAR 0 2
19591: ST_TO_ADDR
// vc_control := control ;
19592: LD_ADDR_OWVAR 38
19596: PUSH
19597: LD_VAR 0 3
19601: ST_TO_ADDR
// vc_weapon := weapon ;
19602: LD_ADDR_OWVAR 40
19606: PUSH
19607: LD_VAR 0 4
19611: ST_TO_ADDR
// vc_fuel_battery := fuel ;
19612: LD_ADDR_OWVAR 41
19616: PUSH
19617: LD_VAR 0 5
19621: ST_TO_ADDR
// end ;
19622: LD_VAR 0 6
19626: RET
// export function WantPlant ( unit ) ; var task ; begin
19627: LD_INT 0
19629: PPUSH
19630: PPUSH
// result := false ;
19631: LD_ADDR_VAR 0 2
19635: PUSH
19636: LD_INT 0
19638: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
19639: LD_ADDR_VAR 0 3
19643: PUSH
19644: LD_VAR 0 1
19648: PPUSH
19649: CALL_OW 437
19653: ST_TO_ADDR
// if task then
19654: LD_VAR 0 3
19658: IFFALSE 19686
// if task [ 1 ] [ 1 ] = p then
19660: LD_VAR 0 3
19664: PUSH
19665: LD_INT 1
19667: ARRAY
19668: PUSH
19669: LD_INT 1
19671: ARRAY
19672: PUSH
19673: LD_STRING p
19675: EQUAL
19676: IFFALSE 19686
// result := true ;
19678: LD_ADDR_VAR 0 2
19682: PUSH
19683: LD_INT 1
19685: ST_TO_ADDR
// end ;
19686: LD_VAR 0 2
19690: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
19691: LD_INT 0
19693: PPUSH
19694: PPUSH
19695: PPUSH
19696: PPUSH
// if pos < 1 then
19697: LD_VAR 0 2
19701: PUSH
19702: LD_INT 1
19704: LESS
19705: IFFALSE 19709
// exit ;
19707: GO 20012
// if pos = 1 then
19709: LD_VAR 0 2
19713: PUSH
19714: LD_INT 1
19716: EQUAL
19717: IFFALSE 19750
// result := Replace ( arr , pos [ 1 ] , value ) else
19719: LD_ADDR_VAR 0 4
19723: PUSH
19724: LD_VAR 0 1
19728: PPUSH
19729: LD_VAR 0 2
19733: PUSH
19734: LD_INT 1
19736: ARRAY
19737: PPUSH
19738: LD_VAR 0 3
19742: PPUSH
19743: CALL_OW 1
19747: ST_TO_ADDR
19748: GO 20012
// begin tmp := arr ;
19750: LD_ADDR_VAR 0 6
19754: PUSH
19755: LD_VAR 0 1
19759: ST_TO_ADDR
// s_arr := [ tmp ] ;
19760: LD_ADDR_VAR 0 7
19764: PUSH
19765: LD_VAR 0 6
19769: PUSH
19770: EMPTY
19771: LIST
19772: ST_TO_ADDR
// for i = 1 to pos - 1 do
19773: LD_ADDR_VAR 0 5
19777: PUSH
19778: DOUBLE
19779: LD_INT 1
19781: DEC
19782: ST_TO_ADDR
19783: LD_VAR 0 2
19787: PUSH
19788: LD_INT 1
19790: MINUS
19791: PUSH
19792: FOR_TO
19793: IFFALSE 19838
// begin tmp := tmp [ pos [ i ] ] ;
19795: LD_ADDR_VAR 0 6
19799: PUSH
19800: LD_VAR 0 6
19804: PUSH
19805: LD_VAR 0 2
19809: PUSH
19810: LD_VAR 0 5
19814: ARRAY
19815: ARRAY
19816: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
19817: LD_ADDR_VAR 0 7
19821: PUSH
19822: LD_VAR 0 7
19826: PUSH
19827: LD_VAR 0 6
19831: PUSH
19832: EMPTY
19833: LIST
19834: ADD
19835: ST_TO_ADDR
// end ;
19836: GO 19792
19838: POP
19839: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
19840: LD_ADDR_VAR 0 6
19844: PUSH
19845: LD_VAR 0 6
19849: PPUSH
19850: LD_VAR 0 2
19854: PUSH
19855: LD_VAR 0 2
19859: ARRAY
19860: PPUSH
19861: LD_VAR 0 3
19865: PPUSH
19866: CALL_OW 1
19870: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
19871: LD_ADDR_VAR 0 7
19875: PUSH
19876: LD_VAR 0 7
19880: PPUSH
19881: LD_VAR 0 7
19885: PPUSH
19886: LD_VAR 0 6
19890: PPUSH
19891: CALL_OW 1
19895: ST_TO_ADDR
// for i = s_arr downto 2 do
19896: LD_ADDR_VAR 0 5
19900: PUSH
19901: DOUBLE
19902: LD_VAR 0 7
19906: INC
19907: ST_TO_ADDR
19908: LD_INT 2
19910: PUSH
19911: FOR_DOWNTO
19912: IFFALSE 19996
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
19914: LD_ADDR_VAR 0 6
19918: PUSH
19919: LD_VAR 0 7
19923: PUSH
19924: LD_VAR 0 5
19928: PUSH
19929: LD_INT 1
19931: MINUS
19932: ARRAY
19933: PPUSH
19934: LD_VAR 0 2
19938: PUSH
19939: LD_VAR 0 5
19943: PUSH
19944: LD_INT 1
19946: MINUS
19947: ARRAY
19948: PPUSH
19949: LD_VAR 0 7
19953: PUSH
19954: LD_VAR 0 5
19958: ARRAY
19959: PPUSH
19960: CALL_OW 1
19964: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
19965: LD_ADDR_VAR 0 7
19969: PUSH
19970: LD_VAR 0 7
19974: PPUSH
19975: LD_VAR 0 5
19979: PUSH
19980: LD_INT 1
19982: MINUS
19983: PPUSH
19984: LD_VAR 0 6
19988: PPUSH
19989: CALL_OW 1
19993: ST_TO_ADDR
// end ;
19994: GO 19911
19996: POP
19997: POP
// result := s_arr [ 1 ] ;
19998: LD_ADDR_VAR 0 4
20002: PUSH
20003: LD_VAR 0 7
20007: PUSH
20008: LD_INT 1
20010: ARRAY
20011: ST_TO_ADDR
// end ; end ;
20012: LD_VAR 0 4
20016: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20017: LD_INT 0
20019: PPUSH
20020: PPUSH
// if not list then
20021: LD_VAR 0 1
20025: NOT
20026: IFFALSE 20030
// exit ;
20028: GO 20121
// i := list [ pos1 ] ;
20030: LD_ADDR_VAR 0 5
20034: PUSH
20035: LD_VAR 0 1
20039: PUSH
20040: LD_VAR 0 2
20044: ARRAY
20045: ST_TO_ADDR
// if not i then
20046: LD_VAR 0 5
20050: NOT
20051: IFFALSE 20055
// exit ;
20053: GO 20121
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20055: LD_ADDR_VAR 0 1
20059: PUSH
20060: LD_VAR 0 1
20064: PPUSH
20065: LD_VAR 0 2
20069: PPUSH
20070: LD_VAR 0 1
20074: PUSH
20075: LD_VAR 0 3
20079: ARRAY
20080: PPUSH
20081: CALL_OW 1
20085: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20086: LD_ADDR_VAR 0 1
20090: PUSH
20091: LD_VAR 0 1
20095: PPUSH
20096: LD_VAR 0 3
20100: PPUSH
20101: LD_VAR 0 5
20105: PPUSH
20106: CALL_OW 1
20110: ST_TO_ADDR
// result := list ;
20111: LD_ADDR_VAR 0 4
20115: PUSH
20116: LD_VAR 0 1
20120: ST_TO_ADDR
// end ;
20121: LD_VAR 0 4
20125: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20126: LD_INT 0
20128: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20129: LD_ADDR_VAR 0 5
20133: PUSH
20134: LD_VAR 0 1
20138: PPUSH
20139: CALL_OW 250
20143: PPUSH
20144: LD_VAR 0 1
20148: PPUSH
20149: CALL_OW 251
20153: PPUSH
20154: LD_VAR 0 2
20158: PPUSH
20159: LD_VAR 0 3
20163: PPUSH
20164: LD_VAR 0 4
20168: PPUSH
20169: CALL 20547 0 5
20173: ST_TO_ADDR
// end ;
20174: LD_VAR 0 5
20178: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
20179: LD_INT 0
20181: PPUSH
20182: PPUSH
20183: PPUSH
20184: PPUSH
// if not list or not unit then
20185: LD_VAR 0 2
20189: NOT
20190: PUSH
20191: LD_VAR 0 1
20195: NOT
20196: OR
20197: IFFALSE 20201
// exit ;
20199: GO 20542
// result := [ ] ;
20201: LD_ADDR_VAR 0 5
20205: PUSH
20206: EMPTY
20207: ST_TO_ADDR
// for i in list do
20208: LD_ADDR_VAR 0 6
20212: PUSH
20213: LD_VAR 0 2
20217: PUSH
20218: FOR_IN
20219: IFFALSE 20437
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
20221: LD_ADDR_VAR 0 8
20225: PUSH
20226: LD_VAR 0 1
20230: PPUSH
20231: LD_VAR 0 6
20235: PUSH
20236: LD_INT 1
20238: ARRAY
20239: PPUSH
20240: LD_VAR 0 6
20244: PUSH
20245: LD_INT 2
20247: ARRAY
20248: PPUSH
20249: CALL_OW 297
20253: ST_TO_ADDR
// if not Count ( result ) then
20254: LD_VAR 0 5
20258: PPUSH
20259: CALL 16831 0 1
20263: NOT
20264: IFFALSE 20297
// begin result := Join ( result , [ i , tmp ] ) ;
20266: LD_ADDR_VAR 0 5
20270: PUSH
20271: LD_VAR 0 5
20275: PPUSH
20276: LD_VAR 0 6
20280: PUSH
20281: LD_VAR 0 8
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PPUSH
20290: CALL 52420 0 2
20294: ST_TO_ADDR
// continue ;
20295: GO 20218
// end ; if result [ result ] [ 2 ] <= tmp then
20297: LD_VAR 0 5
20301: PUSH
20302: LD_VAR 0 5
20306: ARRAY
20307: PUSH
20308: LD_INT 2
20310: ARRAY
20311: PUSH
20312: LD_VAR 0 8
20316: LESSEQUAL
20317: IFFALSE 20350
// result := Join ( result , [ i , tmp ] ) else
20319: LD_ADDR_VAR 0 5
20323: PUSH
20324: LD_VAR 0 5
20328: PPUSH
20329: LD_VAR 0 6
20333: PUSH
20334: LD_VAR 0 8
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PPUSH
20343: CALL 52420 0 2
20347: ST_TO_ADDR
20348: GO 20435
// begin for j := 1 to Count ( result ) do
20350: LD_ADDR_VAR 0 7
20354: PUSH
20355: DOUBLE
20356: LD_INT 1
20358: DEC
20359: ST_TO_ADDR
20360: LD_VAR 0 5
20364: PPUSH
20365: CALL 16831 0 1
20369: PUSH
20370: FOR_TO
20371: IFFALSE 20433
// begin if tmp < result [ j ] [ 2 ] then
20373: LD_VAR 0 8
20377: PUSH
20378: LD_VAR 0 5
20382: PUSH
20383: LD_VAR 0 7
20387: ARRAY
20388: PUSH
20389: LD_INT 2
20391: ARRAY
20392: LESS
20393: IFFALSE 20431
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20395: LD_ADDR_VAR 0 5
20399: PUSH
20400: LD_VAR 0 5
20404: PPUSH
20405: LD_VAR 0 7
20409: PPUSH
20410: LD_VAR 0 6
20414: PUSH
20415: LD_VAR 0 8
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PPUSH
20424: CALL_OW 2
20428: ST_TO_ADDR
// break ;
20429: GO 20433
// end ; end ;
20431: GO 20370
20433: POP
20434: POP
// end ; end ;
20435: GO 20218
20437: POP
20438: POP
// if result and not asc then
20439: LD_VAR 0 5
20443: PUSH
20444: LD_VAR 0 3
20448: NOT
20449: AND
20450: IFFALSE 20467
// result := ReverseArray ( result ) ;
20452: LD_ADDR_VAR 0 5
20456: PUSH
20457: LD_VAR 0 5
20461: PPUSH
20462: CALL 47707 0 1
20466: ST_TO_ADDR
// tmp := [ ] ;
20467: LD_ADDR_VAR 0 8
20471: PUSH
20472: EMPTY
20473: ST_TO_ADDR
// if mode then
20474: LD_VAR 0 4
20478: IFFALSE 20542
// begin for i := 1 to result do
20480: LD_ADDR_VAR 0 6
20484: PUSH
20485: DOUBLE
20486: LD_INT 1
20488: DEC
20489: ST_TO_ADDR
20490: LD_VAR 0 5
20494: PUSH
20495: FOR_TO
20496: IFFALSE 20530
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
20498: LD_ADDR_VAR 0 8
20502: PUSH
20503: LD_VAR 0 8
20507: PPUSH
20508: LD_VAR 0 5
20512: PUSH
20513: LD_VAR 0 6
20517: ARRAY
20518: PUSH
20519: LD_INT 1
20521: ARRAY
20522: PPUSH
20523: CALL 52420 0 2
20527: ST_TO_ADDR
20528: GO 20495
20530: POP
20531: POP
// result := tmp ;
20532: LD_ADDR_VAR 0 5
20536: PUSH
20537: LD_VAR 0 8
20541: ST_TO_ADDR
// end ; end ;
20542: LD_VAR 0 5
20546: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20547: LD_INT 0
20549: PPUSH
20550: PPUSH
20551: PPUSH
20552: PPUSH
// if not list then
20553: LD_VAR 0 3
20557: NOT
20558: IFFALSE 20562
// exit ;
20560: GO 20950
// result := [ ] ;
20562: LD_ADDR_VAR 0 6
20566: PUSH
20567: EMPTY
20568: ST_TO_ADDR
// for i in list do
20569: LD_ADDR_VAR 0 7
20573: PUSH
20574: LD_VAR 0 3
20578: PUSH
20579: FOR_IN
20580: IFFALSE 20782
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20582: LD_ADDR_VAR 0 9
20586: PUSH
20587: LD_VAR 0 7
20591: PPUSH
20592: LD_VAR 0 1
20596: PPUSH
20597: LD_VAR 0 2
20601: PPUSH
20602: CALL_OW 297
20606: ST_TO_ADDR
// if not result then
20607: LD_VAR 0 6
20611: NOT
20612: IFFALSE 20638
// result := [ [ i , tmp ] ] else
20614: LD_ADDR_VAR 0 6
20618: PUSH
20619: LD_VAR 0 7
20623: PUSH
20624: LD_VAR 0 9
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: EMPTY
20634: LIST
20635: ST_TO_ADDR
20636: GO 20780
// begin if result [ result ] [ 2 ] < tmp then
20638: LD_VAR 0 6
20642: PUSH
20643: LD_VAR 0 6
20647: ARRAY
20648: PUSH
20649: LD_INT 2
20651: ARRAY
20652: PUSH
20653: LD_VAR 0 9
20657: LESS
20658: IFFALSE 20700
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20660: LD_ADDR_VAR 0 6
20664: PUSH
20665: LD_VAR 0 6
20669: PPUSH
20670: LD_VAR 0 6
20674: PUSH
20675: LD_INT 1
20677: PLUS
20678: PPUSH
20679: LD_VAR 0 7
20683: PUSH
20684: LD_VAR 0 9
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PPUSH
20693: CALL_OW 2
20697: ST_TO_ADDR
20698: GO 20780
// for j = 1 to result do
20700: LD_ADDR_VAR 0 8
20704: PUSH
20705: DOUBLE
20706: LD_INT 1
20708: DEC
20709: ST_TO_ADDR
20710: LD_VAR 0 6
20714: PUSH
20715: FOR_TO
20716: IFFALSE 20778
// begin if tmp < result [ j ] [ 2 ] then
20718: LD_VAR 0 9
20722: PUSH
20723: LD_VAR 0 6
20727: PUSH
20728: LD_VAR 0 8
20732: ARRAY
20733: PUSH
20734: LD_INT 2
20736: ARRAY
20737: LESS
20738: IFFALSE 20776
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20740: LD_ADDR_VAR 0 6
20744: PUSH
20745: LD_VAR 0 6
20749: PPUSH
20750: LD_VAR 0 8
20754: PPUSH
20755: LD_VAR 0 7
20759: PUSH
20760: LD_VAR 0 9
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PPUSH
20769: CALL_OW 2
20773: ST_TO_ADDR
// break ;
20774: GO 20778
// end ; end ;
20776: GO 20715
20778: POP
20779: POP
// end ; end ;
20780: GO 20579
20782: POP
20783: POP
// if result and not asc then
20784: LD_VAR 0 6
20788: PUSH
20789: LD_VAR 0 4
20793: NOT
20794: AND
20795: IFFALSE 20870
// begin tmp := result ;
20797: LD_ADDR_VAR 0 9
20801: PUSH
20802: LD_VAR 0 6
20806: ST_TO_ADDR
// for i = tmp downto 1 do
20807: LD_ADDR_VAR 0 7
20811: PUSH
20812: DOUBLE
20813: LD_VAR 0 9
20817: INC
20818: ST_TO_ADDR
20819: LD_INT 1
20821: PUSH
20822: FOR_DOWNTO
20823: IFFALSE 20868
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
20825: LD_ADDR_VAR 0 6
20829: PUSH
20830: LD_VAR 0 6
20834: PPUSH
20835: LD_VAR 0 9
20839: PUSH
20840: LD_VAR 0 7
20844: MINUS
20845: PUSH
20846: LD_INT 1
20848: PLUS
20849: PPUSH
20850: LD_VAR 0 9
20854: PUSH
20855: LD_VAR 0 7
20859: ARRAY
20860: PPUSH
20861: CALL_OW 1
20865: ST_TO_ADDR
20866: GO 20822
20868: POP
20869: POP
// end ; tmp := [ ] ;
20870: LD_ADDR_VAR 0 9
20874: PUSH
20875: EMPTY
20876: ST_TO_ADDR
// if mode then
20877: LD_VAR 0 5
20881: IFFALSE 20950
// begin for i = 1 to result do
20883: LD_ADDR_VAR 0 7
20887: PUSH
20888: DOUBLE
20889: LD_INT 1
20891: DEC
20892: ST_TO_ADDR
20893: LD_VAR 0 6
20897: PUSH
20898: FOR_TO
20899: IFFALSE 20938
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
20901: LD_ADDR_VAR 0 9
20905: PUSH
20906: LD_VAR 0 9
20910: PPUSH
20911: LD_VAR 0 7
20915: PPUSH
20916: LD_VAR 0 6
20920: PUSH
20921: LD_VAR 0 7
20925: ARRAY
20926: PUSH
20927: LD_INT 1
20929: ARRAY
20930: PPUSH
20931: CALL_OW 1
20935: ST_TO_ADDR
20936: GO 20898
20938: POP
20939: POP
// result := tmp ;
20940: LD_ADDR_VAR 0 6
20944: PUSH
20945: LD_VAR 0 9
20949: ST_TO_ADDR
// end ; end ;
20950: LD_VAR 0 6
20954: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
20955: LD_INT 0
20957: PPUSH
20958: PPUSH
20959: PPUSH
20960: PPUSH
20961: PPUSH
20962: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
20963: LD_ADDR_VAR 0 5
20967: PUSH
20968: LD_INT 0
20970: PUSH
20971: LD_INT 0
20973: PUSH
20974: LD_INT 0
20976: PUSH
20977: EMPTY
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: ST_TO_ADDR
// if not x or not y then
20985: LD_VAR 0 2
20989: NOT
20990: PUSH
20991: LD_VAR 0 3
20995: NOT
20996: OR
20997: IFFALSE 21001
// exit ;
20999: GO 22651
// if not range then
21001: LD_VAR 0 4
21005: NOT
21006: IFFALSE 21016
// range := 10 ;
21008: LD_ADDR_VAR 0 4
21012: PUSH
21013: LD_INT 10
21015: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21016: LD_ADDR_VAR 0 8
21020: PUSH
21021: LD_INT 81
21023: PUSH
21024: LD_VAR 0 1
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 92
21035: PUSH
21036: LD_VAR 0 2
21040: PUSH
21041: LD_VAR 0 3
21045: PUSH
21046: LD_VAR 0 4
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 3
21059: PUSH
21060: LD_INT 21
21062: PUSH
21063: LD_INT 3
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: LIST
21078: PPUSH
21079: CALL_OW 69
21083: ST_TO_ADDR
// if not tmp then
21084: LD_VAR 0 8
21088: NOT
21089: IFFALSE 21093
// exit ;
21091: GO 22651
// for i in tmp do
21093: LD_ADDR_VAR 0 6
21097: PUSH
21098: LD_VAR 0 8
21102: PUSH
21103: FOR_IN
21104: IFFALSE 22626
// begin points := [ 0 , 0 , 0 ] ;
21106: LD_ADDR_VAR 0 9
21110: PUSH
21111: LD_INT 0
21113: PUSH
21114: LD_INT 0
21116: PUSH
21117: LD_INT 0
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: LIST
21124: ST_TO_ADDR
// bpoints := 1 ;
21125: LD_ADDR_VAR 0 10
21129: PUSH
21130: LD_INT 1
21132: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21133: LD_VAR 0 6
21137: PPUSH
21138: CALL_OW 247
21142: PUSH
21143: LD_INT 1
21145: DOUBLE
21146: EQUAL
21147: IFTRUE 21151
21149: GO 21729
21151: POP
// begin if GetClass ( i ) = 1 then
21152: LD_VAR 0 6
21156: PPUSH
21157: CALL_OW 257
21161: PUSH
21162: LD_INT 1
21164: EQUAL
21165: IFFALSE 21186
// points := [ 10 , 5 , 3 ] ;
21167: LD_ADDR_VAR 0 9
21171: PUSH
21172: LD_INT 10
21174: PUSH
21175: LD_INT 5
21177: PUSH
21178: LD_INT 3
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: LIST
21185: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21186: LD_VAR 0 6
21190: PPUSH
21191: CALL_OW 257
21195: PUSH
21196: LD_INT 2
21198: PUSH
21199: LD_INT 3
21201: PUSH
21202: LD_INT 4
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: LIST
21209: IN
21210: IFFALSE 21231
// points := [ 3 , 2 , 1 ] ;
21212: LD_ADDR_VAR 0 9
21216: PUSH
21217: LD_INT 3
21219: PUSH
21220: LD_INT 2
21222: PUSH
21223: LD_INT 1
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: LIST
21230: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21231: LD_VAR 0 6
21235: PPUSH
21236: CALL_OW 257
21240: PUSH
21241: LD_INT 5
21243: EQUAL
21244: IFFALSE 21265
// points := [ 130 , 5 , 2 ] ;
21246: LD_ADDR_VAR 0 9
21250: PUSH
21251: LD_INT 130
21253: PUSH
21254: LD_INT 5
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: LIST
21264: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21265: LD_VAR 0 6
21269: PPUSH
21270: CALL_OW 257
21274: PUSH
21275: LD_INT 8
21277: EQUAL
21278: IFFALSE 21299
// points := [ 35 , 35 , 30 ] ;
21280: LD_ADDR_VAR 0 9
21284: PUSH
21285: LD_INT 35
21287: PUSH
21288: LD_INT 35
21290: PUSH
21291: LD_INT 30
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: LIST
21298: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21299: LD_VAR 0 6
21303: PPUSH
21304: CALL_OW 257
21308: PUSH
21309: LD_INT 9
21311: EQUAL
21312: IFFALSE 21333
// points := [ 20 , 55 , 40 ] ;
21314: LD_ADDR_VAR 0 9
21318: PUSH
21319: LD_INT 20
21321: PUSH
21322: LD_INT 55
21324: PUSH
21325: LD_INT 40
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: LIST
21332: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21333: LD_VAR 0 6
21337: PPUSH
21338: CALL_OW 257
21342: PUSH
21343: LD_INT 12
21345: PUSH
21346: LD_INT 16
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: IN
21353: IFFALSE 21374
// points := [ 5 , 3 , 2 ] ;
21355: LD_ADDR_VAR 0 9
21359: PUSH
21360: LD_INT 5
21362: PUSH
21363: LD_INT 3
21365: PUSH
21366: LD_INT 2
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: LIST
21373: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21374: LD_VAR 0 6
21378: PPUSH
21379: CALL_OW 257
21383: PUSH
21384: LD_INT 17
21386: EQUAL
21387: IFFALSE 21408
// points := [ 100 , 50 , 75 ] ;
21389: LD_ADDR_VAR 0 9
21393: PUSH
21394: LD_INT 100
21396: PUSH
21397: LD_INT 50
21399: PUSH
21400: LD_INT 75
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: LIST
21407: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21408: LD_VAR 0 6
21412: PPUSH
21413: CALL_OW 257
21417: PUSH
21418: LD_INT 15
21420: EQUAL
21421: IFFALSE 21442
// points := [ 10 , 5 , 3 ] ;
21423: LD_ADDR_VAR 0 9
21427: PUSH
21428: LD_INT 10
21430: PUSH
21431: LD_INT 5
21433: PUSH
21434: LD_INT 3
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: LIST
21441: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21442: LD_VAR 0 6
21446: PPUSH
21447: CALL_OW 257
21451: PUSH
21452: LD_INT 14
21454: EQUAL
21455: IFFALSE 21476
// points := [ 10 , 0 , 0 ] ;
21457: LD_ADDR_VAR 0 9
21461: PUSH
21462: LD_INT 10
21464: PUSH
21465: LD_INT 0
21467: PUSH
21468: LD_INT 0
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: LIST
21475: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21476: LD_VAR 0 6
21480: PPUSH
21481: CALL_OW 257
21485: PUSH
21486: LD_INT 11
21488: EQUAL
21489: IFFALSE 21510
// points := [ 30 , 10 , 5 ] ;
21491: LD_ADDR_VAR 0 9
21495: PUSH
21496: LD_INT 30
21498: PUSH
21499: LD_INT 10
21501: PUSH
21502: LD_INT 5
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: LIST
21509: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21510: LD_VAR 0 1
21514: PPUSH
21515: LD_INT 5
21517: PPUSH
21518: CALL_OW 321
21522: PUSH
21523: LD_INT 2
21525: EQUAL
21526: IFFALSE 21543
// bpoints := bpoints * 1.8 ;
21528: LD_ADDR_VAR 0 10
21532: PUSH
21533: LD_VAR 0 10
21537: PUSH
21538: LD_REAL  1.80000000000000E+0000
21541: MUL
21542: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21543: LD_VAR 0 6
21547: PPUSH
21548: CALL_OW 257
21552: PUSH
21553: LD_INT 1
21555: PUSH
21556: LD_INT 2
21558: PUSH
21559: LD_INT 3
21561: PUSH
21562: LD_INT 4
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: IN
21571: PUSH
21572: LD_VAR 0 1
21576: PPUSH
21577: LD_INT 51
21579: PPUSH
21580: CALL_OW 321
21584: PUSH
21585: LD_INT 2
21587: EQUAL
21588: AND
21589: IFFALSE 21606
// bpoints := bpoints * 1.2 ;
21591: LD_ADDR_VAR 0 10
21595: PUSH
21596: LD_VAR 0 10
21600: PUSH
21601: LD_REAL  1.20000000000000E+0000
21604: MUL
21605: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21606: LD_VAR 0 6
21610: PPUSH
21611: CALL_OW 257
21615: PUSH
21616: LD_INT 5
21618: PUSH
21619: LD_INT 7
21621: PUSH
21622: LD_INT 9
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: LIST
21629: IN
21630: PUSH
21631: LD_VAR 0 1
21635: PPUSH
21636: LD_INT 52
21638: PPUSH
21639: CALL_OW 321
21643: PUSH
21644: LD_INT 2
21646: EQUAL
21647: AND
21648: IFFALSE 21665
// bpoints := bpoints * 1.5 ;
21650: LD_ADDR_VAR 0 10
21654: PUSH
21655: LD_VAR 0 10
21659: PUSH
21660: LD_REAL  1.50000000000000E+0000
21663: MUL
21664: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21665: LD_VAR 0 1
21669: PPUSH
21670: LD_INT 66
21672: PPUSH
21673: CALL_OW 321
21677: PUSH
21678: LD_INT 2
21680: EQUAL
21681: IFFALSE 21698
// bpoints := bpoints * 1.1 ;
21683: LD_ADDR_VAR 0 10
21687: PUSH
21688: LD_VAR 0 10
21692: PUSH
21693: LD_REAL  1.10000000000000E+0000
21696: MUL
21697: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21698: LD_ADDR_VAR 0 10
21702: PUSH
21703: LD_VAR 0 10
21707: PUSH
21708: LD_VAR 0 6
21712: PPUSH
21713: LD_INT 1
21715: PPUSH
21716: CALL_OW 259
21720: PUSH
21721: LD_REAL  1.15000000000000E+0000
21724: MUL
21725: MUL
21726: ST_TO_ADDR
// end ; unit_vehicle :
21727: GO 22555
21729: LD_INT 2
21731: DOUBLE
21732: EQUAL
21733: IFTRUE 21737
21735: GO 22543
21737: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
21738: LD_VAR 0 6
21742: PPUSH
21743: CALL_OW 264
21747: PUSH
21748: LD_INT 2
21750: PUSH
21751: LD_INT 42
21753: PUSH
21754: LD_INT 24
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: LIST
21761: IN
21762: IFFALSE 21783
// points := [ 25 , 5 , 3 ] ;
21764: LD_ADDR_VAR 0 9
21768: PUSH
21769: LD_INT 25
21771: PUSH
21772: LD_INT 5
21774: PUSH
21775: LD_INT 3
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: LIST
21782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
21783: LD_VAR 0 6
21787: PPUSH
21788: CALL_OW 264
21792: PUSH
21793: LD_INT 4
21795: PUSH
21796: LD_INT 43
21798: PUSH
21799: LD_INT 25
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: IN
21807: IFFALSE 21828
// points := [ 40 , 15 , 5 ] ;
21809: LD_ADDR_VAR 0 9
21813: PUSH
21814: LD_INT 40
21816: PUSH
21817: LD_INT 15
21819: PUSH
21820: LD_INT 5
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: LIST
21827: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
21828: LD_VAR 0 6
21832: PPUSH
21833: CALL_OW 264
21837: PUSH
21838: LD_INT 3
21840: PUSH
21841: LD_INT 23
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: IN
21848: IFFALSE 21869
// points := [ 7 , 25 , 8 ] ;
21850: LD_ADDR_VAR 0 9
21854: PUSH
21855: LD_INT 7
21857: PUSH
21858: LD_INT 25
21860: PUSH
21861: LD_INT 8
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: LIST
21868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
21869: LD_VAR 0 6
21873: PPUSH
21874: CALL_OW 264
21878: PUSH
21879: LD_INT 5
21881: PUSH
21882: LD_INT 27
21884: PUSH
21885: LD_INT 44
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: LIST
21892: IN
21893: IFFALSE 21914
// points := [ 14 , 50 , 16 ] ;
21895: LD_ADDR_VAR 0 9
21899: PUSH
21900: LD_INT 14
21902: PUSH
21903: LD_INT 50
21905: PUSH
21906: LD_INT 16
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: LIST
21913: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
21914: LD_VAR 0 6
21918: PPUSH
21919: CALL_OW 264
21923: PUSH
21924: LD_INT 6
21926: PUSH
21927: LD_INT 46
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: IN
21934: IFFALSE 21955
// points := [ 32 , 120 , 70 ] ;
21936: LD_ADDR_VAR 0 9
21940: PUSH
21941: LD_INT 32
21943: PUSH
21944: LD_INT 120
21946: PUSH
21947: LD_INT 70
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: LIST
21954: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
21955: LD_VAR 0 6
21959: PPUSH
21960: CALL_OW 264
21964: PUSH
21965: LD_INT 7
21967: PUSH
21968: LD_INT 28
21970: PUSH
21971: LD_INT 45
21973: PUSH
21974: LD_INT 92
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: IN
21983: IFFALSE 22004
// points := [ 35 , 20 , 45 ] ;
21985: LD_ADDR_VAR 0 9
21989: PUSH
21990: LD_INT 35
21992: PUSH
21993: LD_INT 20
21995: PUSH
21996: LD_INT 45
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22004: LD_VAR 0 6
22008: PPUSH
22009: CALL_OW 264
22013: PUSH
22014: LD_INT 47
22016: PUSH
22017: EMPTY
22018: LIST
22019: IN
22020: IFFALSE 22041
// points := [ 67 , 45 , 75 ] ;
22022: LD_ADDR_VAR 0 9
22026: PUSH
22027: LD_INT 67
22029: PUSH
22030: LD_INT 45
22032: PUSH
22033: LD_INT 75
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: LIST
22040: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22041: LD_VAR 0 6
22045: PPUSH
22046: CALL_OW 264
22050: PUSH
22051: LD_INT 26
22053: PUSH
22054: EMPTY
22055: LIST
22056: IN
22057: IFFALSE 22078
// points := [ 120 , 30 , 80 ] ;
22059: LD_ADDR_VAR 0 9
22063: PUSH
22064: LD_INT 120
22066: PUSH
22067: LD_INT 30
22069: PUSH
22070: LD_INT 80
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: LIST
22077: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22078: LD_VAR 0 6
22082: PPUSH
22083: CALL_OW 264
22087: PUSH
22088: LD_INT 22
22090: PUSH
22091: EMPTY
22092: LIST
22093: IN
22094: IFFALSE 22115
// points := [ 40 , 1 , 1 ] ;
22096: LD_ADDR_VAR 0 9
22100: PUSH
22101: LD_INT 40
22103: PUSH
22104: LD_INT 1
22106: PUSH
22107: LD_INT 1
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: LIST
22114: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22115: LD_VAR 0 6
22119: PPUSH
22120: CALL_OW 264
22124: PUSH
22125: LD_INT 29
22127: PUSH
22128: EMPTY
22129: LIST
22130: IN
22131: IFFALSE 22152
// points := [ 70 , 200 , 400 ] ;
22133: LD_ADDR_VAR 0 9
22137: PUSH
22138: LD_INT 70
22140: PUSH
22141: LD_INT 200
22143: PUSH
22144: LD_INT 400
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22152: LD_VAR 0 6
22156: PPUSH
22157: CALL_OW 264
22161: PUSH
22162: LD_INT 14
22164: PUSH
22165: LD_INT 53
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: IN
22172: IFFALSE 22193
// points := [ 40 , 10 , 20 ] ;
22174: LD_ADDR_VAR 0 9
22178: PUSH
22179: LD_INT 40
22181: PUSH
22182: LD_INT 10
22184: PUSH
22185: LD_INT 20
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: LIST
22192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22193: LD_VAR 0 6
22197: PPUSH
22198: CALL_OW 264
22202: PUSH
22203: LD_INT 9
22205: PUSH
22206: EMPTY
22207: LIST
22208: IN
22209: IFFALSE 22230
// points := [ 5 , 70 , 20 ] ;
22211: LD_ADDR_VAR 0 9
22215: PUSH
22216: LD_INT 5
22218: PUSH
22219: LD_INT 70
22221: PUSH
22222: LD_INT 20
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: LIST
22229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22230: LD_VAR 0 6
22234: PPUSH
22235: CALL_OW 264
22239: PUSH
22240: LD_INT 10
22242: PUSH
22243: EMPTY
22244: LIST
22245: IN
22246: IFFALSE 22267
// points := [ 35 , 110 , 70 ] ;
22248: LD_ADDR_VAR 0 9
22252: PUSH
22253: LD_INT 35
22255: PUSH
22256: LD_INT 110
22258: PUSH
22259: LD_INT 70
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: LIST
22266: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22267: LD_VAR 0 6
22271: PPUSH
22272: CALL_OW 265
22276: PUSH
22277: LD_INT 25
22279: EQUAL
22280: IFFALSE 22301
// points := [ 80 , 65 , 100 ] ;
22282: LD_ADDR_VAR 0 9
22286: PUSH
22287: LD_INT 80
22289: PUSH
22290: LD_INT 65
22292: PUSH
22293: LD_INT 100
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: LIST
22300: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22301: LD_VAR 0 6
22305: PPUSH
22306: CALL_OW 263
22310: PUSH
22311: LD_INT 1
22313: EQUAL
22314: IFFALSE 22349
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22316: LD_ADDR_VAR 0 10
22320: PUSH
22321: LD_VAR 0 10
22325: PUSH
22326: LD_VAR 0 6
22330: PPUSH
22331: CALL_OW 311
22335: PPUSH
22336: LD_INT 3
22338: PPUSH
22339: CALL_OW 259
22343: PUSH
22344: LD_INT 4
22346: MUL
22347: MUL
22348: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22349: LD_VAR 0 6
22353: PPUSH
22354: CALL_OW 263
22358: PUSH
22359: LD_INT 2
22361: EQUAL
22362: IFFALSE 22413
// begin j := IsControledBy ( i ) ;
22364: LD_ADDR_VAR 0 7
22368: PUSH
22369: LD_VAR 0 6
22373: PPUSH
22374: CALL_OW 312
22378: ST_TO_ADDR
// if j then
22379: LD_VAR 0 7
22383: IFFALSE 22413
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22385: LD_ADDR_VAR 0 10
22389: PUSH
22390: LD_VAR 0 10
22394: PUSH
22395: LD_VAR 0 7
22399: PPUSH
22400: LD_INT 3
22402: PPUSH
22403: CALL_OW 259
22407: PUSH
22408: LD_INT 3
22410: MUL
22411: MUL
22412: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22413: LD_VAR 0 6
22417: PPUSH
22418: CALL_OW 264
22422: PUSH
22423: LD_INT 5
22425: PUSH
22426: LD_INT 6
22428: PUSH
22429: LD_INT 46
22431: PUSH
22432: LD_INT 44
22434: PUSH
22435: LD_INT 47
22437: PUSH
22438: LD_INT 45
22440: PUSH
22441: LD_INT 28
22443: PUSH
22444: LD_INT 7
22446: PUSH
22447: LD_INT 27
22449: PUSH
22450: LD_INT 29
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: IN
22465: PUSH
22466: LD_VAR 0 1
22470: PPUSH
22471: LD_INT 52
22473: PPUSH
22474: CALL_OW 321
22478: PUSH
22479: LD_INT 2
22481: EQUAL
22482: AND
22483: IFFALSE 22500
// bpoints := bpoints * 1.2 ;
22485: LD_ADDR_VAR 0 10
22489: PUSH
22490: LD_VAR 0 10
22494: PUSH
22495: LD_REAL  1.20000000000000E+0000
22498: MUL
22499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22500: LD_VAR 0 6
22504: PPUSH
22505: CALL_OW 264
22509: PUSH
22510: LD_INT 6
22512: PUSH
22513: LD_INT 46
22515: PUSH
22516: LD_INT 47
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: LIST
22523: IN
22524: IFFALSE 22541
// bpoints := bpoints * 1.2 ;
22526: LD_ADDR_VAR 0 10
22530: PUSH
22531: LD_VAR 0 10
22535: PUSH
22536: LD_REAL  1.20000000000000E+0000
22539: MUL
22540: ST_TO_ADDR
// end ; unit_building :
22541: GO 22555
22543: LD_INT 3
22545: DOUBLE
22546: EQUAL
22547: IFTRUE 22551
22549: GO 22554
22551: POP
// ; end ;
22552: GO 22555
22554: POP
// for j = 1 to 3 do
22555: LD_ADDR_VAR 0 7
22559: PUSH
22560: DOUBLE
22561: LD_INT 1
22563: DEC
22564: ST_TO_ADDR
22565: LD_INT 3
22567: PUSH
22568: FOR_TO
22569: IFFALSE 22622
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22571: LD_ADDR_VAR 0 5
22575: PUSH
22576: LD_VAR 0 5
22580: PPUSH
22581: LD_VAR 0 7
22585: PPUSH
22586: LD_VAR 0 5
22590: PUSH
22591: LD_VAR 0 7
22595: ARRAY
22596: PUSH
22597: LD_VAR 0 9
22601: PUSH
22602: LD_VAR 0 7
22606: ARRAY
22607: PUSH
22608: LD_VAR 0 10
22612: MUL
22613: PLUS
22614: PPUSH
22615: CALL_OW 1
22619: ST_TO_ADDR
22620: GO 22568
22622: POP
22623: POP
// end ;
22624: GO 21103
22626: POP
22627: POP
// result := Replace ( result , 4 , tmp ) ;
22628: LD_ADDR_VAR 0 5
22632: PUSH
22633: LD_VAR 0 5
22637: PPUSH
22638: LD_INT 4
22640: PPUSH
22641: LD_VAR 0 8
22645: PPUSH
22646: CALL_OW 1
22650: ST_TO_ADDR
// end ;
22651: LD_VAR 0 5
22655: RET
// export function DangerAtRange ( unit , range ) ; begin
22656: LD_INT 0
22658: PPUSH
// if not unit then
22659: LD_VAR 0 1
22663: NOT
22664: IFFALSE 22668
// exit ;
22666: GO 22713
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22668: LD_ADDR_VAR 0 3
22672: PUSH
22673: LD_VAR 0 1
22677: PPUSH
22678: CALL_OW 255
22682: PPUSH
22683: LD_VAR 0 1
22687: PPUSH
22688: CALL_OW 250
22692: PPUSH
22693: LD_VAR 0 1
22697: PPUSH
22698: CALL_OW 251
22702: PPUSH
22703: LD_VAR 0 2
22707: PPUSH
22708: CALL 20955 0 4
22712: ST_TO_ADDR
// end ;
22713: LD_VAR 0 3
22717: RET
// export function DangerInArea ( side , area ) ; begin
22718: LD_INT 0
22720: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
22721: LD_ADDR_VAR 0 3
22725: PUSH
22726: LD_VAR 0 2
22730: PPUSH
22731: LD_INT 81
22733: PUSH
22734: LD_VAR 0 1
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PPUSH
22743: CALL_OW 70
22747: ST_TO_ADDR
// end ;
22748: LD_VAR 0 3
22752: RET
// export function IsExtension ( b ) ; begin
22753: LD_INT 0
22755: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
22756: LD_ADDR_VAR 0 2
22760: PUSH
22761: LD_VAR 0 1
22765: PUSH
22766: LD_INT 23
22768: PUSH
22769: LD_INT 20
22771: PUSH
22772: LD_INT 22
22774: PUSH
22775: LD_INT 17
22777: PUSH
22778: LD_INT 24
22780: PUSH
22781: LD_INT 21
22783: PUSH
22784: LD_INT 19
22786: PUSH
22787: LD_INT 16
22789: PUSH
22790: LD_INT 25
22792: PUSH
22793: LD_INT 18
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: IN
22808: ST_TO_ADDR
// end ;
22809: LD_VAR 0 2
22813: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
22814: LD_INT 0
22816: PPUSH
22817: PPUSH
22818: PPUSH
// result := [ ] ;
22819: LD_ADDR_VAR 0 4
22823: PUSH
22824: EMPTY
22825: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
22826: LD_ADDR_VAR 0 5
22830: PUSH
22831: LD_VAR 0 2
22835: PPUSH
22836: LD_INT 21
22838: PUSH
22839: LD_INT 3
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PPUSH
22846: CALL_OW 70
22850: ST_TO_ADDR
// if not tmp then
22851: LD_VAR 0 5
22855: NOT
22856: IFFALSE 22860
// exit ;
22858: GO 22924
// if checkLink then
22860: LD_VAR 0 3
22864: IFFALSE 22914
// begin for i in tmp do
22866: LD_ADDR_VAR 0 6
22870: PUSH
22871: LD_VAR 0 5
22875: PUSH
22876: FOR_IN
22877: IFFALSE 22912
// if GetBase ( i ) <> base then
22879: LD_VAR 0 6
22883: PPUSH
22884: CALL_OW 274
22888: PUSH
22889: LD_VAR 0 1
22893: NONEQUAL
22894: IFFALSE 22910
// ComLinkToBase ( base , i ) ;
22896: LD_VAR 0 1
22900: PPUSH
22901: LD_VAR 0 6
22905: PPUSH
22906: CALL_OW 169
22910: GO 22876
22912: POP
22913: POP
// end ; result := tmp ;
22914: LD_ADDR_VAR 0 4
22918: PUSH
22919: LD_VAR 0 5
22923: ST_TO_ADDR
// end ;
22924: LD_VAR 0 4
22928: RET
// export function ComComplete ( units , b ) ; var i ; begin
22929: LD_INT 0
22931: PPUSH
22932: PPUSH
// if not units then
22933: LD_VAR 0 1
22937: NOT
22938: IFFALSE 22942
// exit ;
22940: GO 23032
// for i in units do
22942: LD_ADDR_VAR 0 4
22946: PUSH
22947: LD_VAR 0 1
22951: PUSH
22952: FOR_IN
22953: IFFALSE 23030
// if BuildingStatus ( b ) = bs_build then
22955: LD_VAR 0 2
22959: PPUSH
22960: CALL_OW 461
22964: PUSH
22965: LD_INT 1
22967: EQUAL
22968: IFFALSE 23028
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
22970: LD_VAR 0 4
22974: PPUSH
22975: LD_STRING h
22977: PUSH
22978: LD_VAR 0 2
22982: PPUSH
22983: CALL_OW 250
22987: PUSH
22988: LD_VAR 0 2
22992: PPUSH
22993: CALL_OW 251
22997: PUSH
22998: LD_VAR 0 2
23002: PUSH
23003: LD_INT 0
23005: PUSH
23006: LD_INT 0
23008: PUSH
23009: LD_INT 0
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: PUSH
23021: EMPTY
23022: LIST
23023: PPUSH
23024: CALL_OW 446
23028: GO 22952
23030: POP
23031: POP
// end ;
23032: LD_VAR 0 3
23036: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23037: LD_INT 0
23039: PPUSH
23040: PPUSH
23041: PPUSH
23042: PPUSH
23043: PPUSH
23044: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23045: LD_VAR 0 1
23049: NOT
23050: PUSH
23051: LD_VAR 0 1
23055: PPUSH
23056: CALL_OW 263
23060: PUSH
23061: LD_INT 2
23063: NONEQUAL
23064: OR
23065: IFFALSE 23069
// exit ;
23067: GO 23385
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23069: LD_ADDR_VAR 0 6
23073: PUSH
23074: LD_INT 22
23076: PUSH
23077: LD_VAR 0 1
23081: PPUSH
23082: CALL_OW 255
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 2
23093: PUSH
23094: LD_INT 30
23096: PUSH
23097: LD_INT 36
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 34
23106: PUSH
23107: LD_INT 31
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: LIST
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PPUSH
23123: CALL_OW 69
23127: ST_TO_ADDR
// if not tmp then
23128: LD_VAR 0 6
23132: NOT
23133: IFFALSE 23137
// exit ;
23135: GO 23385
// result := [ ] ;
23137: LD_ADDR_VAR 0 2
23141: PUSH
23142: EMPTY
23143: ST_TO_ADDR
// for i in tmp do
23144: LD_ADDR_VAR 0 3
23148: PUSH
23149: LD_VAR 0 6
23153: PUSH
23154: FOR_IN
23155: IFFALSE 23226
// begin t := UnitsInside ( i ) ;
23157: LD_ADDR_VAR 0 4
23161: PUSH
23162: LD_VAR 0 3
23166: PPUSH
23167: CALL_OW 313
23171: ST_TO_ADDR
// if t then
23172: LD_VAR 0 4
23176: IFFALSE 23224
// for j in t do
23178: LD_ADDR_VAR 0 7
23182: PUSH
23183: LD_VAR 0 4
23187: PUSH
23188: FOR_IN
23189: IFFALSE 23222
// result := Replace ( result , result + 1 , j ) ;
23191: LD_ADDR_VAR 0 2
23195: PUSH
23196: LD_VAR 0 2
23200: PPUSH
23201: LD_VAR 0 2
23205: PUSH
23206: LD_INT 1
23208: PLUS
23209: PPUSH
23210: LD_VAR 0 7
23214: PPUSH
23215: CALL_OW 1
23219: ST_TO_ADDR
23220: GO 23188
23222: POP
23223: POP
// end ;
23224: GO 23154
23226: POP
23227: POP
// if not result then
23228: LD_VAR 0 2
23232: NOT
23233: IFFALSE 23237
// exit ;
23235: GO 23385
// mech := result [ 1 ] ;
23237: LD_ADDR_VAR 0 5
23241: PUSH
23242: LD_VAR 0 2
23246: PUSH
23247: LD_INT 1
23249: ARRAY
23250: ST_TO_ADDR
// if result > 1 then
23251: LD_VAR 0 2
23255: PUSH
23256: LD_INT 1
23258: GREATER
23259: IFFALSE 23371
// begin for i = 2 to result do
23261: LD_ADDR_VAR 0 3
23265: PUSH
23266: DOUBLE
23267: LD_INT 2
23269: DEC
23270: ST_TO_ADDR
23271: LD_VAR 0 2
23275: PUSH
23276: FOR_TO
23277: IFFALSE 23369
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23279: LD_ADDR_VAR 0 4
23283: PUSH
23284: LD_VAR 0 2
23288: PUSH
23289: LD_VAR 0 3
23293: ARRAY
23294: PPUSH
23295: LD_INT 3
23297: PPUSH
23298: CALL_OW 259
23302: PUSH
23303: LD_VAR 0 2
23307: PUSH
23308: LD_VAR 0 3
23312: ARRAY
23313: PPUSH
23314: CALL_OW 432
23318: MINUS
23319: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23320: LD_VAR 0 4
23324: PUSH
23325: LD_VAR 0 5
23329: PPUSH
23330: LD_INT 3
23332: PPUSH
23333: CALL_OW 259
23337: PUSH
23338: LD_VAR 0 5
23342: PPUSH
23343: CALL_OW 432
23347: MINUS
23348: GREATEREQUAL
23349: IFFALSE 23367
// mech := result [ i ] ;
23351: LD_ADDR_VAR 0 5
23355: PUSH
23356: LD_VAR 0 2
23360: PUSH
23361: LD_VAR 0 3
23365: ARRAY
23366: ST_TO_ADDR
// end ;
23367: GO 23276
23369: POP
23370: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23371: LD_VAR 0 1
23375: PPUSH
23376: LD_VAR 0 5
23380: PPUSH
23381: CALL_OW 135
// end ;
23385: LD_VAR 0 2
23389: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23390: LD_INT 0
23392: PPUSH
23393: PPUSH
23394: PPUSH
23395: PPUSH
23396: PPUSH
23397: PPUSH
23398: PPUSH
23399: PPUSH
23400: PPUSH
23401: PPUSH
23402: PPUSH
23403: PPUSH
23404: PPUSH
// result := [ ] ;
23405: LD_ADDR_VAR 0 7
23409: PUSH
23410: EMPTY
23411: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23412: LD_VAR 0 1
23416: PPUSH
23417: CALL_OW 266
23421: PUSH
23422: LD_INT 0
23424: PUSH
23425: LD_INT 1
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: IN
23432: NOT
23433: IFFALSE 23437
// exit ;
23435: GO 25071
// if name then
23437: LD_VAR 0 3
23441: IFFALSE 23457
// SetBName ( base_dep , name ) ;
23443: LD_VAR 0 1
23447: PPUSH
23448: LD_VAR 0 3
23452: PPUSH
23453: CALL_OW 500
// base := GetBase ( base_dep ) ;
23457: LD_ADDR_VAR 0 15
23461: PUSH
23462: LD_VAR 0 1
23466: PPUSH
23467: CALL_OW 274
23471: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23472: LD_ADDR_VAR 0 16
23476: PUSH
23477: LD_VAR 0 1
23481: PPUSH
23482: CALL_OW 255
23486: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23487: LD_ADDR_VAR 0 17
23491: PUSH
23492: LD_VAR 0 1
23496: PPUSH
23497: CALL_OW 248
23501: ST_TO_ADDR
// if sources then
23502: LD_VAR 0 5
23506: IFFALSE 23553
// for i = 1 to 3 do
23508: LD_ADDR_VAR 0 8
23512: PUSH
23513: DOUBLE
23514: LD_INT 1
23516: DEC
23517: ST_TO_ADDR
23518: LD_INT 3
23520: PUSH
23521: FOR_TO
23522: IFFALSE 23551
// AddResourceType ( base , i , sources [ i ] ) ;
23524: LD_VAR 0 15
23528: PPUSH
23529: LD_VAR 0 8
23533: PPUSH
23534: LD_VAR 0 5
23538: PUSH
23539: LD_VAR 0 8
23543: ARRAY
23544: PPUSH
23545: CALL_OW 276
23549: GO 23521
23551: POP
23552: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23553: LD_ADDR_VAR 0 18
23557: PUSH
23558: LD_VAR 0 15
23562: PPUSH
23563: LD_VAR 0 2
23567: PPUSH
23568: LD_INT 1
23570: PPUSH
23571: CALL 22814 0 3
23575: ST_TO_ADDR
// InitHc ;
23576: CALL_OW 19
// InitUc ;
23580: CALL_OW 18
// uc_side := side ;
23584: LD_ADDR_OWVAR 20
23588: PUSH
23589: LD_VAR 0 16
23593: ST_TO_ADDR
// uc_nation := nation ;
23594: LD_ADDR_OWVAR 21
23598: PUSH
23599: LD_VAR 0 17
23603: ST_TO_ADDR
// if buildings then
23604: LD_VAR 0 18
23608: IFFALSE 24930
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23610: LD_ADDR_VAR 0 19
23614: PUSH
23615: LD_VAR 0 18
23619: PPUSH
23620: LD_INT 2
23622: PUSH
23623: LD_INT 30
23625: PUSH
23626: LD_INT 29
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 30
23635: PUSH
23636: LD_INT 30
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: LIST
23647: PPUSH
23648: CALL_OW 72
23652: ST_TO_ADDR
// if tmp then
23653: LD_VAR 0 19
23657: IFFALSE 23705
// for i in tmp do
23659: LD_ADDR_VAR 0 8
23663: PUSH
23664: LD_VAR 0 19
23668: PUSH
23669: FOR_IN
23670: IFFALSE 23703
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23672: LD_VAR 0 8
23676: PPUSH
23677: CALL_OW 250
23681: PPUSH
23682: LD_VAR 0 8
23686: PPUSH
23687: CALL_OW 251
23691: PPUSH
23692: LD_VAR 0 16
23696: PPUSH
23697: CALL_OW 441
23701: GO 23669
23703: POP
23704: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23705: LD_VAR 0 18
23709: PPUSH
23710: LD_INT 2
23712: PUSH
23713: LD_INT 30
23715: PUSH
23716: LD_INT 32
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 30
23725: PUSH
23726: LD_INT 33
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: LIST
23737: PPUSH
23738: CALL_OW 72
23742: IFFALSE 23830
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
23744: LD_ADDR_VAR 0 8
23748: PUSH
23749: LD_VAR 0 18
23753: PPUSH
23754: LD_INT 2
23756: PUSH
23757: LD_INT 30
23759: PUSH
23760: LD_INT 32
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 30
23769: PUSH
23770: LD_INT 33
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: LIST
23781: PPUSH
23782: CALL_OW 72
23786: PUSH
23787: FOR_IN
23788: IFFALSE 23828
// begin if not GetBWeapon ( i ) then
23790: LD_VAR 0 8
23794: PPUSH
23795: CALL_OW 269
23799: NOT
23800: IFFALSE 23826
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
23802: LD_VAR 0 8
23806: PPUSH
23807: LD_VAR 0 8
23811: PPUSH
23812: LD_VAR 0 2
23816: PPUSH
23817: CALL 25076 0 2
23821: PPUSH
23822: CALL_OW 431
// end ;
23826: GO 23787
23828: POP
23829: POP
// end ; for i = 1 to personel do
23830: LD_ADDR_VAR 0 8
23834: PUSH
23835: DOUBLE
23836: LD_INT 1
23838: DEC
23839: ST_TO_ADDR
23840: LD_VAR 0 6
23844: PUSH
23845: FOR_TO
23846: IFFALSE 24910
// begin if i > 4 then
23848: LD_VAR 0 8
23852: PUSH
23853: LD_INT 4
23855: GREATER
23856: IFFALSE 23860
// break ;
23858: GO 24910
// case i of 1 :
23860: LD_VAR 0 8
23864: PUSH
23865: LD_INT 1
23867: DOUBLE
23868: EQUAL
23869: IFTRUE 23873
23871: GO 23953
23873: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
23874: LD_ADDR_VAR 0 12
23878: PUSH
23879: LD_VAR 0 18
23883: PPUSH
23884: LD_INT 22
23886: PUSH
23887: LD_VAR 0 16
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 58
23898: PUSH
23899: EMPTY
23900: LIST
23901: PUSH
23902: LD_INT 2
23904: PUSH
23905: LD_INT 30
23907: PUSH
23908: LD_INT 32
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 30
23917: PUSH
23918: LD_INT 4
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 30
23927: PUSH
23928: LD_INT 5
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: LIST
23945: PPUSH
23946: CALL_OW 72
23950: ST_TO_ADDR
23951: GO 24175
23953: LD_INT 2
23955: DOUBLE
23956: EQUAL
23957: IFTRUE 23961
23959: GO 24023
23961: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
23962: LD_ADDR_VAR 0 12
23966: PUSH
23967: LD_VAR 0 18
23971: PPUSH
23972: LD_INT 22
23974: PUSH
23975: LD_VAR 0 16
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 2
23986: PUSH
23987: LD_INT 30
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 30
23999: PUSH
24000: LD_INT 1
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: LIST
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PPUSH
24016: CALL_OW 72
24020: ST_TO_ADDR
24021: GO 24175
24023: LD_INT 3
24025: DOUBLE
24026: EQUAL
24027: IFTRUE 24031
24029: GO 24093
24031: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24032: LD_ADDR_VAR 0 12
24036: PUSH
24037: LD_VAR 0 18
24041: PPUSH
24042: LD_INT 22
24044: PUSH
24045: LD_VAR 0 16
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 2
24056: PUSH
24057: LD_INT 30
24059: PUSH
24060: LD_INT 2
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 30
24069: PUSH
24070: LD_INT 3
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: LIST
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PPUSH
24086: CALL_OW 72
24090: ST_TO_ADDR
24091: GO 24175
24093: LD_INT 4
24095: DOUBLE
24096: EQUAL
24097: IFTRUE 24101
24099: GO 24174
24101: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24102: LD_ADDR_VAR 0 12
24106: PUSH
24107: LD_VAR 0 18
24111: PPUSH
24112: LD_INT 22
24114: PUSH
24115: LD_VAR 0 16
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 2
24126: PUSH
24127: LD_INT 30
24129: PUSH
24130: LD_INT 6
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 30
24139: PUSH
24140: LD_INT 7
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 30
24149: PUSH
24150: LD_INT 8
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PPUSH
24167: CALL_OW 72
24171: ST_TO_ADDR
24172: GO 24175
24174: POP
// if i = 1 then
24175: LD_VAR 0 8
24179: PUSH
24180: LD_INT 1
24182: EQUAL
24183: IFFALSE 24294
// begin tmp := [ ] ;
24185: LD_ADDR_VAR 0 19
24189: PUSH
24190: EMPTY
24191: ST_TO_ADDR
// for j in f do
24192: LD_ADDR_VAR 0 9
24196: PUSH
24197: LD_VAR 0 12
24201: PUSH
24202: FOR_IN
24203: IFFALSE 24276
// if GetBType ( j ) = b_bunker then
24205: LD_VAR 0 9
24209: PPUSH
24210: CALL_OW 266
24214: PUSH
24215: LD_INT 32
24217: EQUAL
24218: IFFALSE 24245
// tmp := Insert ( tmp , 1 , j ) else
24220: LD_ADDR_VAR 0 19
24224: PUSH
24225: LD_VAR 0 19
24229: PPUSH
24230: LD_INT 1
24232: PPUSH
24233: LD_VAR 0 9
24237: PPUSH
24238: CALL_OW 2
24242: ST_TO_ADDR
24243: GO 24274
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24245: LD_ADDR_VAR 0 19
24249: PUSH
24250: LD_VAR 0 19
24254: PPUSH
24255: LD_VAR 0 19
24259: PUSH
24260: LD_INT 1
24262: PLUS
24263: PPUSH
24264: LD_VAR 0 9
24268: PPUSH
24269: CALL_OW 2
24273: ST_TO_ADDR
24274: GO 24202
24276: POP
24277: POP
// if tmp then
24278: LD_VAR 0 19
24282: IFFALSE 24294
// f := tmp ;
24284: LD_ADDR_VAR 0 12
24288: PUSH
24289: LD_VAR 0 19
24293: ST_TO_ADDR
// end ; x := personel [ i ] ;
24294: LD_ADDR_VAR 0 13
24298: PUSH
24299: LD_VAR 0 6
24303: PUSH
24304: LD_VAR 0 8
24308: ARRAY
24309: ST_TO_ADDR
// if x = - 1 then
24310: LD_VAR 0 13
24314: PUSH
24315: LD_INT 1
24317: NEG
24318: EQUAL
24319: IFFALSE 24528
// begin for j in f do
24321: LD_ADDR_VAR 0 9
24325: PUSH
24326: LD_VAR 0 12
24330: PUSH
24331: FOR_IN
24332: IFFALSE 24524
// repeat InitHc ;
24334: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24338: LD_VAR 0 9
24342: PPUSH
24343: CALL_OW 266
24347: PUSH
24348: LD_INT 5
24350: EQUAL
24351: IFFALSE 24421
// begin if UnitsInside ( j ) < 3 then
24353: LD_VAR 0 9
24357: PPUSH
24358: CALL_OW 313
24362: PUSH
24363: LD_INT 3
24365: LESS
24366: IFFALSE 24402
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24368: LD_INT 0
24370: PPUSH
24371: LD_INT 5
24373: PUSH
24374: LD_INT 8
24376: PUSH
24377: LD_INT 9
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: LIST
24384: PUSH
24385: LD_VAR 0 17
24389: ARRAY
24390: PPUSH
24391: LD_VAR 0 4
24395: PPUSH
24396: CALL_OW 380
24400: GO 24419
// PrepareHuman ( false , i , skill ) ;
24402: LD_INT 0
24404: PPUSH
24405: LD_VAR 0 8
24409: PPUSH
24410: LD_VAR 0 4
24414: PPUSH
24415: CALL_OW 380
// end else
24419: GO 24438
// PrepareHuman ( false , i , skill ) ;
24421: LD_INT 0
24423: PPUSH
24424: LD_VAR 0 8
24428: PPUSH
24429: LD_VAR 0 4
24433: PPUSH
24434: CALL_OW 380
// un := CreateHuman ;
24438: LD_ADDR_VAR 0 14
24442: PUSH
24443: CALL_OW 44
24447: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24448: LD_ADDR_VAR 0 7
24452: PUSH
24453: LD_VAR 0 7
24457: PPUSH
24458: LD_INT 1
24460: PPUSH
24461: LD_VAR 0 14
24465: PPUSH
24466: CALL_OW 2
24470: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24471: LD_VAR 0 14
24475: PPUSH
24476: LD_VAR 0 9
24480: PPUSH
24481: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24485: LD_VAR 0 9
24489: PPUSH
24490: CALL_OW 313
24494: PUSH
24495: LD_INT 6
24497: EQUAL
24498: PUSH
24499: LD_VAR 0 9
24503: PPUSH
24504: CALL_OW 266
24508: PUSH
24509: LD_INT 32
24511: PUSH
24512: LD_INT 31
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: IN
24519: OR
24520: IFFALSE 24334
24522: GO 24331
24524: POP
24525: POP
// end else
24526: GO 24908
// for j = 1 to x do
24528: LD_ADDR_VAR 0 9
24532: PUSH
24533: DOUBLE
24534: LD_INT 1
24536: DEC
24537: ST_TO_ADDR
24538: LD_VAR 0 13
24542: PUSH
24543: FOR_TO
24544: IFFALSE 24906
// begin InitHc ;
24546: CALL_OW 19
// if not f then
24550: LD_VAR 0 12
24554: NOT
24555: IFFALSE 24644
// begin PrepareHuman ( false , i , skill ) ;
24557: LD_INT 0
24559: PPUSH
24560: LD_VAR 0 8
24564: PPUSH
24565: LD_VAR 0 4
24569: PPUSH
24570: CALL_OW 380
// un := CreateHuman ;
24574: LD_ADDR_VAR 0 14
24578: PUSH
24579: CALL_OW 44
24583: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24584: LD_ADDR_VAR 0 7
24588: PUSH
24589: LD_VAR 0 7
24593: PPUSH
24594: LD_INT 1
24596: PPUSH
24597: LD_VAR 0 14
24601: PPUSH
24602: CALL_OW 2
24606: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24607: LD_VAR 0 14
24611: PPUSH
24612: LD_VAR 0 1
24616: PPUSH
24617: CALL_OW 250
24621: PPUSH
24622: LD_VAR 0 1
24626: PPUSH
24627: CALL_OW 251
24631: PPUSH
24632: LD_INT 10
24634: PPUSH
24635: LD_INT 0
24637: PPUSH
24638: CALL_OW 50
// continue ;
24642: GO 24543
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24644: LD_VAR 0 12
24648: PUSH
24649: LD_INT 1
24651: ARRAY
24652: PPUSH
24653: CALL_OW 313
24657: PUSH
24658: LD_VAR 0 12
24662: PUSH
24663: LD_INT 1
24665: ARRAY
24666: PPUSH
24667: CALL_OW 266
24671: PUSH
24672: LD_INT 32
24674: PUSH
24675: LD_INT 31
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: IN
24682: AND
24683: PUSH
24684: LD_VAR 0 12
24688: PUSH
24689: LD_INT 1
24691: ARRAY
24692: PPUSH
24693: CALL_OW 313
24697: PUSH
24698: LD_INT 6
24700: EQUAL
24701: OR
24702: IFFALSE 24722
// f := Delete ( f , 1 ) ;
24704: LD_ADDR_VAR 0 12
24708: PUSH
24709: LD_VAR 0 12
24713: PPUSH
24714: LD_INT 1
24716: PPUSH
24717: CALL_OW 3
24721: ST_TO_ADDR
// if not f then
24722: LD_VAR 0 12
24726: NOT
24727: IFFALSE 24745
// begin x := x + 2 ;
24729: LD_ADDR_VAR 0 13
24733: PUSH
24734: LD_VAR 0 13
24738: PUSH
24739: LD_INT 2
24741: PLUS
24742: ST_TO_ADDR
// continue ;
24743: GO 24543
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
24745: LD_VAR 0 12
24749: PUSH
24750: LD_INT 1
24752: ARRAY
24753: PPUSH
24754: CALL_OW 266
24758: PUSH
24759: LD_INT 5
24761: EQUAL
24762: IFFALSE 24836
// begin if UnitsInside ( f [ 1 ] ) < 3 then
24764: LD_VAR 0 12
24768: PUSH
24769: LD_INT 1
24771: ARRAY
24772: PPUSH
24773: CALL_OW 313
24777: PUSH
24778: LD_INT 3
24780: LESS
24781: IFFALSE 24817
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24783: LD_INT 0
24785: PPUSH
24786: LD_INT 5
24788: PUSH
24789: LD_INT 8
24791: PUSH
24792: LD_INT 9
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: LIST
24799: PUSH
24800: LD_VAR 0 17
24804: ARRAY
24805: PPUSH
24806: LD_VAR 0 4
24810: PPUSH
24811: CALL_OW 380
24815: GO 24834
// PrepareHuman ( false , i , skill ) ;
24817: LD_INT 0
24819: PPUSH
24820: LD_VAR 0 8
24824: PPUSH
24825: LD_VAR 0 4
24829: PPUSH
24830: CALL_OW 380
// end else
24834: GO 24853
// PrepareHuman ( false , i , skill ) ;
24836: LD_INT 0
24838: PPUSH
24839: LD_VAR 0 8
24843: PPUSH
24844: LD_VAR 0 4
24848: PPUSH
24849: CALL_OW 380
// un := CreateHuman ;
24853: LD_ADDR_VAR 0 14
24857: PUSH
24858: CALL_OW 44
24862: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24863: LD_ADDR_VAR 0 7
24867: PUSH
24868: LD_VAR 0 7
24872: PPUSH
24873: LD_INT 1
24875: PPUSH
24876: LD_VAR 0 14
24880: PPUSH
24881: CALL_OW 2
24885: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
24886: LD_VAR 0 14
24890: PPUSH
24891: LD_VAR 0 12
24895: PUSH
24896: LD_INT 1
24898: ARRAY
24899: PPUSH
24900: CALL_OW 52
// end ;
24904: GO 24543
24906: POP
24907: POP
// end ;
24908: GO 23845
24910: POP
24911: POP
// result := result ^ buildings ;
24912: LD_ADDR_VAR 0 7
24916: PUSH
24917: LD_VAR 0 7
24921: PUSH
24922: LD_VAR 0 18
24926: ADD
24927: ST_TO_ADDR
// end else
24928: GO 25071
// begin for i = 1 to personel do
24930: LD_ADDR_VAR 0 8
24934: PUSH
24935: DOUBLE
24936: LD_INT 1
24938: DEC
24939: ST_TO_ADDR
24940: LD_VAR 0 6
24944: PUSH
24945: FOR_TO
24946: IFFALSE 25069
// begin if i > 4 then
24948: LD_VAR 0 8
24952: PUSH
24953: LD_INT 4
24955: GREATER
24956: IFFALSE 24960
// break ;
24958: GO 25069
// x := personel [ i ] ;
24960: LD_ADDR_VAR 0 13
24964: PUSH
24965: LD_VAR 0 6
24969: PUSH
24970: LD_VAR 0 8
24974: ARRAY
24975: ST_TO_ADDR
// if x = - 1 then
24976: LD_VAR 0 13
24980: PUSH
24981: LD_INT 1
24983: NEG
24984: EQUAL
24985: IFFALSE 24989
// continue ;
24987: GO 24945
// PrepareHuman ( false , i , skill ) ;
24989: LD_INT 0
24991: PPUSH
24992: LD_VAR 0 8
24996: PPUSH
24997: LD_VAR 0 4
25001: PPUSH
25002: CALL_OW 380
// un := CreateHuman ;
25006: LD_ADDR_VAR 0 14
25010: PUSH
25011: CALL_OW 44
25015: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25016: LD_VAR 0 14
25020: PPUSH
25021: LD_VAR 0 1
25025: PPUSH
25026: CALL_OW 250
25030: PPUSH
25031: LD_VAR 0 1
25035: PPUSH
25036: CALL_OW 251
25040: PPUSH
25041: LD_INT 10
25043: PPUSH
25044: LD_INT 0
25046: PPUSH
25047: CALL_OW 50
// result := result ^ un ;
25051: LD_ADDR_VAR 0 7
25055: PUSH
25056: LD_VAR 0 7
25060: PUSH
25061: LD_VAR 0 14
25065: ADD
25066: ST_TO_ADDR
// end ;
25067: GO 24945
25069: POP
25070: POP
// end ; end ;
25071: LD_VAR 0 7
25075: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25076: LD_INT 0
25078: PPUSH
25079: PPUSH
25080: PPUSH
25081: PPUSH
25082: PPUSH
25083: PPUSH
25084: PPUSH
25085: PPUSH
25086: PPUSH
25087: PPUSH
25088: PPUSH
25089: PPUSH
25090: PPUSH
25091: PPUSH
25092: PPUSH
25093: PPUSH
// result := false ;
25094: LD_ADDR_VAR 0 3
25098: PUSH
25099: LD_INT 0
25101: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25102: LD_VAR 0 1
25106: NOT
25107: PUSH
25108: LD_VAR 0 1
25112: PPUSH
25113: CALL_OW 266
25117: PUSH
25118: LD_INT 32
25120: PUSH
25121: LD_INT 33
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: IN
25128: NOT
25129: OR
25130: IFFALSE 25134
// exit ;
25132: GO 26243
// nat := GetNation ( tower ) ;
25134: LD_ADDR_VAR 0 12
25138: PUSH
25139: LD_VAR 0 1
25143: PPUSH
25144: CALL_OW 248
25148: ST_TO_ADDR
// side := GetSide ( tower ) ;
25149: LD_ADDR_VAR 0 16
25153: PUSH
25154: LD_VAR 0 1
25158: PPUSH
25159: CALL_OW 255
25163: ST_TO_ADDR
// x := GetX ( tower ) ;
25164: LD_ADDR_VAR 0 10
25168: PUSH
25169: LD_VAR 0 1
25173: PPUSH
25174: CALL_OW 250
25178: ST_TO_ADDR
// y := GetY ( tower ) ;
25179: LD_ADDR_VAR 0 11
25183: PUSH
25184: LD_VAR 0 1
25188: PPUSH
25189: CALL_OW 251
25193: ST_TO_ADDR
// if not x or not y then
25194: LD_VAR 0 10
25198: NOT
25199: PUSH
25200: LD_VAR 0 11
25204: NOT
25205: OR
25206: IFFALSE 25210
// exit ;
25208: GO 26243
// weapon := 0 ;
25210: LD_ADDR_VAR 0 18
25214: PUSH
25215: LD_INT 0
25217: ST_TO_ADDR
// fac_list := [ ] ;
25218: LD_ADDR_VAR 0 17
25222: PUSH
25223: EMPTY
25224: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25225: LD_ADDR_VAR 0 6
25229: PUSH
25230: LD_VAR 0 1
25234: PPUSH
25235: CALL_OW 274
25239: PPUSH
25240: LD_VAR 0 2
25244: PPUSH
25245: LD_INT 0
25247: PPUSH
25248: CALL 22814 0 3
25252: PPUSH
25253: LD_INT 30
25255: PUSH
25256: LD_INT 3
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PPUSH
25263: CALL_OW 72
25267: ST_TO_ADDR
// if not factories then
25268: LD_VAR 0 6
25272: NOT
25273: IFFALSE 25277
// exit ;
25275: GO 26243
// for i in factories do
25277: LD_ADDR_VAR 0 8
25281: PUSH
25282: LD_VAR 0 6
25286: PUSH
25287: FOR_IN
25288: IFFALSE 25313
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25290: LD_ADDR_VAR 0 17
25294: PUSH
25295: LD_VAR 0 17
25299: PUSH
25300: LD_VAR 0 8
25304: PPUSH
25305: CALL_OW 478
25309: UNION
25310: ST_TO_ADDR
25311: GO 25287
25313: POP
25314: POP
// if not fac_list then
25315: LD_VAR 0 17
25319: NOT
25320: IFFALSE 25324
// exit ;
25322: GO 26243
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25324: LD_ADDR_VAR 0 5
25328: PUSH
25329: LD_INT 4
25331: PUSH
25332: LD_INT 5
25334: PUSH
25335: LD_INT 9
25337: PUSH
25338: LD_INT 10
25340: PUSH
25341: LD_INT 6
25343: PUSH
25344: LD_INT 7
25346: PUSH
25347: LD_INT 11
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 27
25361: PUSH
25362: LD_INT 28
25364: PUSH
25365: LD_INT 26
25367: PUSH
25368: LD_INT 30
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 43
25379: PUSH
25380: LD_INT 44
25382: PUSH
25383: LD_INT 46
25385: PUSH
25386: LD_INT 45
25388: PUSH
25389: LD_INT 47
25391: PUSH
25392: LD_INT 49
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: LIST
25407: PUSH
25408: LD_VAR 0 12
25412: ARRAY
25413: ST_TO_ADDR
// list := list isect fac_list ;
25414: LD_ADDR_VAR 0 5
25418: PUSH
25419: LD_VAR 0 5
25423: PUSH
25424: LD_VAR 0 17
25428: ISECT
25429: ST_TO_ADDR
// if not list then
25430: LD_VAR 0 5
25434: NOT
25435: IFFALSE 25439
// exit ;
25437: GO 26243
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25439: LD_VAR 0 12
25443: PUSH
25444: LD_INT 3
25446: EQUAL
25447: PUSH
25448: LD_INT 49
25450: PUSH
25451: LD_VAR 0 5
25455: IN
25456: AND
25457: PUSH
25458: LD_INT 31
25460: PPUSH
25461: LD_VAR 0 16
25465: PPUSH
25466: CALL_OW 321
25470: PUSH
25471: LD_INT 2
25473: EQUAL
25474: AND
25475: IFFALSE 25535
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25477: LD_INT 22
25479: PUSH
25480: LD_VAR 0 16
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 35
25491: PUSH
25492: LD_INT 49
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 91
25501: PUSH
25502: LD_VAR 0 1
25506: PUSH
25507: LD_INT 10
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: LIST
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: LIST
25519: PPUSH
25520: CALL_OW 69
25524: NOT
25525: IFFALSE 25535
// weapon := ru_time_lapser ;
25527: LD_ADDR_VAR 0 18
25531: PUSH
25532: LD_INT 49
25534: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25535: LD_VAR 0 12
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: LD_INT 2
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: IN
25550: PUSH
25551: LD_INT 11
25553: PUSH
25554: LD_VAR 0 5
25558: IN
25559: PUSH
25560: LD_INT 30
25562: PUSH
25563: LD_VAR 0 5
25567: IN
25568: OR
25569: AND
25570: PUSH
25571: LD_INT 6
25573: PPUSH
25574: LD_VAR 0 16
25578: PPUSH
25579: CALL_OW 321
25583: PUSH
25584: LD_INT 2
25586: EQUAL
25587: AND
25588: IFFALSE 25753
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25590: LD_INT 22
25592: PUSH
25593: LD_VAR 0 16
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 2
25604: PUSH
25605: LD_INT 35
25607: PUSH
25608: LD_INT 11
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 35
25617: PUSH
25618: LD_INT 30
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 91
25632: PUSH
25633: LD_VAR 0 1
25637: PUSH
25638: LD_INT 18
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: LIST
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: LIST
25650: PPUSH
25651: CALL_OW 69
25655: NOT
25656: PUSH
25657: LD_INT 22
25659: PUSH
25660: LD_VAR 0 16
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 2
25671: PUSH
25672: LD_INT 30
25674: PUSH
25675: LD_INT 32
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 30
25684: PUSH
25685: LD_INT 33
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 91
25699: PUSH
25700: LD_VAR 0 1
25704: PUSH
25705: LD_INT 12
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: LIST
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: LIST
25717: PUSH
25718: EMPTY
25719: LIST
25720: PPUSH
25721: CALL_OW 69
25725: PUSH
25726: LD_INT 2
25728: GREATER
25729: AND
25730: IFFALSE 25753
// weapon := [ us_radar , ar_radar ] [ nat ] ;
25732: LD_ADDR_VAR 0 18
25736: PUSH
25737: LD_INT 11
25739: PUSH
25740: LD_INT 30
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_VAR 0 12
25751: ARRAY
25752: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
25753: LD_VAR 0 18
25757: NOT
25758: PUSH
25759: LD_INT 40
25761: PPUSH
25762: LD_VAR 0 16
25766: PPUSH
25767: CALL_OW 321
25771: PUSH
25772: LD_INT 2
25774: EQUAL
25775: AND
25776: PUSH
25777: LD_INT 7
25779: PUSH
25780: LD_VAR 0 5
25784: IN
25785: PUSH
25786: LD_INT 28
25788: PUSH
25789: LD_VAR 0 5
25793: IN
25794: OR
25795: PUSH
25796: LD_INT 45
25798: PUSH
25799: LD_VAR 0 5
25803: IN
25804: OR
25805: AND
25806: IFFALSE 26060
// begin hex := GetHexInfo ( x , y ) ;
25808: LD_ADDR_VAR 0 4
25812: PUSH
25813: LD_VAR 0 10
25817: PPUSH
25818: LD_VAR 0 11
25822: PPUSH
25823: CALL_OW 546
25827: ST_TO_ADDR
// if hex [ 1 ] then
25828: LD_VAR 0 4
25832: PUSH
25833: LD_INT 1
25835: ARRAY
25836: IFFALSE 25840
// exit ;
25838: GO 26243
// height := hex [ 2 ] ;
25840: LD_ADDR_VAR 0 15
25844: PUSH
25845: LD_VAR 0 4
25849: PUSH
25850: LD_INT 2
25852: ARRAY
25853: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
25854: LD_ADDR_VAR 0 14
25858: PUSH
25859: LD_INT 0
25861: PUSH
25862: LD_INT 2
25864: PUSH
25865: LD_INT 3
25867: PUSH
25868: LD_INT 5
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: ST_TO_ADDR
// for i in tmp do
25877: LD_ADDR_VAR 0 8
25881: PUSH
25882: LD_VAR 0 14
25886: PUSH
25887: FOR_IN
25888: IFFALSE 26058
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
25890: LD_ADDR_VAR 0 9
25894: PUSH
25895: LD_VAR 0 10
25899: PPUSH
25900: LD_VAR 0 8
25904: PPUSH
25905: LD_INT 5
25907: PPUSH
25908: CALL_OW 272
25912: PUSH
25913: LD_VAR 0 11
25917: PPUSH
25918: LD_VAR 0 8
25922: PPUSH
25923: LD_INT 5
25925: PPUSH
25926: CALL_OW 273
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
25935: LD_VAR 0 9
25939: PUSH
25940: LD_INT 1
25942: ARRAY
25943: PPUSH
25944: LD_VAR 0 9
25948: PUSH
25949: LD_INT 2
25951: ARRAY
25952: PPUSH
25953: CALL_OW 488
25957: IFFALSE 26056
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
25959: LD_ADDR_VAR 0 4
25963: PUSH
25964: LD_VAR 0 9
25968: PUSH
25969: LD_INT 1
25971: ARRAY
25972: PPUSH
25973: LD_VAR 0 9
25977: PUSH
25978: LD_INT 2
25980: ARRAY
25981: PPUSH
25982: CALL_OW 546
25986: ST_TO_ADDR
// if hex [ 1 ] then
25987: LD_VAR 0 4
25991: PUSH
25992: LD_INT 1
25994: ARRAY
25995: IFFALSE 25999
// continue ;
25997: GO 25887
// h := hex [ 2 ] ;
25999: LD_ADDR_VAR 0 13
26003: PUSH
26004: LD_VAR 0 4
26008: PUSH
26009: LD_INT 2
26011: ARRAY
26012: ST_TO_ADDR
// if h + 7 < height then
26013: LD_VAR 0 13
26017: PUSH
26018: LD_INT 7
26020: PLUS
26021: PUSH
26022: LD_VAR 0 15
26026: LESS
26027: IFFALSE 26056
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26029: LD_ADDR_VAR 0 18
26033: PUSH
26034: LD_INT 7
26036: PUSH
26037: LD_INT 28
26039: PUSH
26040: LD_INT 45
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: LIST
26047: PUSH
26048: LD_VAR 0 12
26052: ARRAY
26053: ST_TO_ADDR
// break ;
26054: GO 26058
// end ; end ; end ;
26056: GO 25887
26058: POP
26059: POP
// end ; if not weapon then
26060: LD_VAR 0 18
26064: NOT
26065: IFFALSE 26125
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26067: LD_ADDR_VAR 0 5
26071: PUSH
26072: LD_VAR 0 5
26076: PUSH
26077: LD_INT 11
26079: PUSH
26080: LD_INT 30
26082: PUSH
26083: LD_INT 49
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: LIST
26090: DIFF
26091: ST_TO_ADDR
// if not list then
26092: LD_VAR 0 5
26096: NOT
26097: IFFALSE 26101
// exit ;
26099: GO 26243
// weapon := list [ rand ( 1 , list ) ] ;
26101: LD_ADDR_VAR 0 18
26105: PUSH
26106: LD_VAR 0 5
26110: PUSH
26111: LD_INT 1
26113: PPUSH
26114: LD_VAR 0 5
26118: PPUSH
26119: CALL_OW 12
26123: ARRAY
26124: ST_TO_ADDR
// end ; if weapon then
26125: LD_VAR 0 18
26129: IFFALSE 26243
// begin tmp := CostOfWeapon ( weapon ) ;
26131: LD_ADDR_VAR 0 14
26135: PUSH
26136: LD_VAR 0 18
26140: PPUSH
26141: CALL_OW 451
26145: ST_TO_ADDR
// j := GetBase ( tower ) ;
26146: LD_ADDR_VAR 0 9
26150: PUSH
26151: LD_VAR 0 1
26155: PPUSH
26156: CALL_OW 274
26160: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26161: LD_VAR 0 9
26165: PPUSH
26166: LD_INT 1
26168: PPUSH
26169: CALL_OW 275
26173: PUSH
26174: LD_VAR 0 14
26178: PUSH
26179: LD_INT 1
26181: ARRAY
26182: GREATEREQUAL
26183: PUSH
26184: LD_VAR 0 9
26188: PPUSH
26189: LD_INT 2
26191: PPUSH
26192: CALL_OW 275
26196: PUSH
26197: LD_VAR 0 14
26201: PUSH
26202: LD_INT 2
26204: ARRAY
26205: GREATEREQUAL
26206: AND
26207: PUSH
26208: LD_VAR 0 9
26212: PPUSH
26213: LD_INT 3
26215: PPUSH
26216: CALL_OW 275
26220: PUSH
26221: LD_VAR 0 14
26225: PUSH
26226: LD_INT 3
26228: ARRAY
26229: GREATEREQUAL
26230: AND
26231: IFFALSE 26243
// result := weapon ;
26233: LD_ADDR_VAR 0 3
26237: PUSH
26238: LD_VAR 0 18
26242: ST_TO_ADDR
// end ; end ;
26243: LD_VAR 0 3
26247: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26248: LD_INT 0
26250: PPUSH
26251: PPUSH
// result := true ;
26252: LD_ADDR_VAR 0 3
26256: PUSH
26257: LD_INT 1
26259: ST_TO_ADDR
// if array1 = array2 then
26260: LD_VAR 0 1
26264: PUSH
26265: LD_VAR 0 2
26269: EQUAL
26270: IFFALSE 26330
// begin for i = 1 to array1 do
26272: LD_ADDR_VAR 0 4
26276: PUSH
26277: DOUBLE
26278: LD_INT 1
26280: DEC
26281: ST_TO_ADDR
26282: LD_VAR 0 1
26286: PUSH
26287: FOR_TO
26288: IFFALSE 26326
// if array1 [ i ] <> array2 [ i ] then
26290: LD_VAR 0 1
26294: PUSH
26295: LD_VAR 0 4
26299: ARRAY
26300: PUSH
26301: LD_VAR 0 2
26305: PUSH
26306: LD_VAR 0 4
26310: ARRAY
26311: NONEQUAL
26312: IFFALSE 26324
// begin result := false ;
26314: LD_ADDR_VAR 0 3
26318: PUSH
26319: LD_INT 0
26321: ST_TO_ADDR
// break ;
26322: GO 26326
// end ;
26324: GO 26287
26326: POP
26327: POP
// end else
26328: GO 26338
// result := false ;
26330: LD_ADDR_VAR 0 3
26334: PUSH
26335: LD_INT 0
26337: ST_TO_ADDR
// end ;
26338: LD_VAR 0 3
26342: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26343: LD_INT 0
26345: PPUSH
26346: PPUSH
// if not array1 or not array2 then
26347: LD_VAR 0 1
26351: NOT
26352: PUSH
26353: LD_VAR 0 2
26357: NOT
26358: OR
26359: IFFALSE 26363
// exit ;
26361: GO 26427
// result := true ;
26363: LD_ADDR_VAR 0 3
26367: PUSH
26368: LD_INT 1
26370: ST_TO_ADDR
// for i = 1 to array1 do
26371: LD_ADDR_VAR 0 4
26375: PUSH
26376: DOUBLE
26377: LD_INT 1
26379: DEC
26380: ST_TO_ADDR
26381: LD_VAR 0 1
26385: PUSH
26386: FOR_TO
26387: IFFALSE 26425
// if array1 [ i ] <> array2 [ i ] then
26389: LD_VAR 0 1
26393: PUSH
26394: LD_VAR 0 4
26398: ARRAY
26399: PUSH
26400: LD_VAR 0 2
26404: PUSH
26405: LD_VAR 0 4
26409: ARRAY
26410: NONEQUAL
26411: IFFALSE 26423
// begin result := false ;
26413: LD_ADDR_VAR 0 3
26417: PUSH
26418: LD_INT 0
26420: ST_TO_ADDR
// break ;
26421: GO 26425
// end ;
26423: GO 26386
26425: POP
26426: POP
// end ;
26427: LD_VAR 0 3
26431: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26432: LD_INT 0
26434: PPUSH
26435: PPUSH
26436: PPUSH
// pom := GetBase ( fac ) ;
26437: LD_ADDR_VAR 0 5
26441: PUSH
26442: LD_VAR 0 1
26446: PPUSH
26447: CALL_OW 274
26451: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26452: LD_ADDR_VAR 0 4
26456: PUSH
26457: LD_VAR 0 2
26461: PUSH
26462: LD_INT 1
26464: ARRAY
26465: PPUSH
26466: LD_VAR 0 2
26470: PUSH
26471: LD_INT 2
26473: ARRAY
26474: PPUSH
26475: LD_VAR 0 2
26479: PUSH
26480: LD_INT 3
26482: ARRAY
26483: PPUSH
26484: LD_VAR 0 2
26488: PUSH
26489: LD_INT 4
26491: ARRAY
26492: PPUSH
26493: CALL_OW 449
26497: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26498: LD_ADDR_VAR 0 3
26502: PUSH
26503: LD_VAR 0 5
26507: PPUSH
26508: LD_INT 1
26510: PPUSH
26511: CALL_OW 275
26515: PUSH
26516: LD_VAR 0 4
26520: PUSH
26521: LD_INT 1
26523: ARRAY
26524: GREATEREQUAL
26525: PUSH
26526: LD_VAR 0 5
26530: PPUSH
26531: LD_INT 2
26533: PPUSH
26534: CALL_OW 275
26538: PUSH
26539: LD_VAR 0 4
26543: PUSH
26544: LD_INT 2
26546: ARRAY
26547: GREATEREQUAL
26548: AND
26549: PUSH
26550: LD_VAR 0 5
26554: PPUSH
26555: LD_INT 3
26557: PPUSH
26558: CALL_OW 275
26562: PUSH
26563: LD_VAR 0 4
26567: PUSH
26568: LD_INT 3
26570: ARRAY
26571: GREATEREQUAL
26572: AND
26573: ST_TO_ADDR
// end ;
26574: LD_VAR 0 3
26578: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26579: LD_INT 0
26581: PPUSH
26582: PPUSH
26583: PPUSH
26584: PPUSH
// pom := GetBase ( building ) ;
26585: LD_ADDR_VAR 0 3
26589: PUSH
26590: LD_VAR 0 1
26594: PPUSH
26595: CALL_OW 274
26599: ST_TO_ADDR
// if not pom then
26600: LD_VAR 0 3
26604: NOT
26605: IFFALSE 26609
// exit ;
26607: GO 26779
// btype := GetBType ( building ) ;
26609: LD_ADDR_VAR 0 5
26613: PUSH
26614: LD_VAR 0 1
26618: PPUSH
26619: CALL_OW 266
26623: ST_TO_ADDR
// if btype = b_armoury then
26624: LD_VAR 0 5
26628: PUSH
26629: LD_INT 4
26631: EQUAL
26632: IFFALSE 26642
// btype := b_barracks ;
26634: LD_ADDR_VAR 0 5
26638: PUSH
26639: LD_INT 5
26641: ST_TO_ADDR
// if btype = b_depot then
26642: LD_VAR 0 5
26646: PUSH
26647: LD_INT 0
26649: EQUAL
26650: IFFALSE 26660
// btype := b_warehouse ;
26652: LD_ADDR_VAR 0 5
26656: PUSH
26657: LD_INT 1
26659: ST_TO_ADDR
// if btype = b_workshop then
26660: LD_VAR 0 5
26664: PUSH
26665: LD_INT 2
26667: EQUAL
26668: IFFALSE 26678
// btype := b_factory ;
26670: LD_ADDR_VAR 0 5
26674: PUSH
26675: LD_INT 3
26677: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26678: LD_ADDR_VAR 0 4
26682: PUSH
26683: LD_VAR 0 5
26687: PPUSH
26688: LD_VAR 0 1
26692: PPUSH
26693: CALL_OW 248
26697: PPUSH
26698: CALL_OW 450
26702: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26703: LD_ADDR_VAR 0 2
26707: PUSH
26708: LD_VAR 0 3
26712: PPUSH
26713: LD_INT 1
26715: PPUSH
26716: CALL_OW 275
26720: PUSH
26721: LD_VAR 0 4
26725: PUSH
26726: LD_INT 1
26728: ARRAY
26729: GREATEREQUAL
26730: PUSH
26731: LD_VAR 0 3
26735: PPUSH
26736: LD_INT 2
26738: PPUSH
26739: CALL_OW 275
26743: PUSH
26744: LD_VAR 0 4
26748: PUSH
26749: LD_INT 2
26751: ARRAY
26752: GREATEREQUAL
26753: AND
26754: PUSH
26755: LD_VAR 0 3
26759: PPUSH
26760: LD_INT 3
26762: PPUSH
26763: CALL_OW 275
26767: PUSH
26768: LD_VAR 0 4
26772: PUSH
26773: LD_INT 3
26775: ARRAY
26776: GREATEREQUAL
26777: AND
26778: ST_TO_ADDR
// end ;
26779: LD_VAR 0 2
26783: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
26784: LD_INT 0
26786: PPUSH
26787: PPUSH
26788: PPUSH
// pom := GetBase ( building ) ;
26789: LD_ADDR_VAR 0 4
26793: PUSH
26794: LD_VAR 0 1
26798: PPUSH
26799: CALL_OW 274
26803: ST_TO_ADDR
// if not pom then
26804: LD_VAR 0 4
26808: NOT
26809: IFFALSE 26813
// exit ;
26811: GO 26914
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26813: LD_ADDR_VAR 0 5
26817: PUSH
26818: LD_VAR 0 2
26822: PPUSH
26823: LD_VAR 0 1
26827: PPUSH
26828: CALL_OW 248
26832: PPUSH
26833: CALL_OW 450
26837: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26838: LD_ADDR_VAR 0 3
26842: PUSH
26843: LD_VAR 0 4
26847: PPUSH
26848: LD_INT 1
26850: PPUSH
26851: CALL_OW 275
26855: PUSH
26856: LD_VAR 0 5
26860: PUSH
26861: LD_INT 1
26863: ARRAY
26864: GREATEREQUAL
26865: PUSH
26866: LD_VAR 0 4
26870: PPUSH
26871: LD_INT 2
26873: PPUSH
26874: CALL_OW 275
26878: PUSH
26879: LD_VAR 0 5
26883: PUSH
26884: LD_INT 2
26886: ARRAY
26887: GREATEREQUAL
26888: AND
26889: PUSH
26890: LD_VAR 0 4
26894: PPUSH
26895: LD_INT 3
26897: PPUSH
26898: CALL_OW 275
26902: PUSH
26903: LD_VAR 0 5
26907: PUSH
26908: LD_INT 3
26910: ARRAY
26911: GREATEREQUAL
26912: AND
26913: ST_TO_ADDR
// end ;
26914: LD_VAR 0 3
26918: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
26919: LD_INT 0
26921: PPUSH
26922: PPUSH
26923: PPUSH
26924: PPUSH
26925: PPUSH
26926: PPUSH
26927: PPUSH
26928: PPUSH
26929: PPUSH
26930: PPUSH
26931: PPUSH
// result := false ;
26932: LD_ADDR_VAR 0 8
26936: PUSH
26937: LD_INT 0
26939: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
26940: LD_VAR 0 5
26944: NOT
26945: PUSH
26946: LD_VAR 0 1
26950: NOT
26951: OR
26952: PUSH
26953: LD_VAR 0 2
26957: NOT
26958: OR
26959: PUSH
26960: LD_VAR 0 3
26964: NOT
26965: OR
26966: IFFALSE 26970
// exit ;
26968: GO 27784
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
26970: LD_ADDR_VAR 0 14
26974: PUSH
26975: LD_VAR 0 1
26979: PPUSH
26980: LD_VAR 0 2
26984: PPUSH
26985: LD_VAR 0 3
26989: PPUSH
26990: LD_VAR 0 4
26994: PPUSH
26995: LD_VAR 0 5
26999: PUSH
27000: LD_INT 1
27002: ARRAY
27003: PPUSH
27004: CALL_OW 248
27008: PPUSH
27009: LD_INT 0
27011: PPUSH
27012: CALL 29037 0 6
27016: ST_TO_ADDR
// if not hexes then
27017: LD_VAR 0 14
27021: NOT
27022: IFFALSE 27026
// exit ;
27024: GO 27784
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27026: LD_ADDR_VAR 0 17
27030: PUSH
27031: LD_VAR 0 5
27035: PPUSH
27036: LD_INT 22
27038: PUSH
27039: LD_VAR 0 13
27043: PPUSH
27044: CALL_OW 255
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 2
27055: PUSH
27056: LD_INT 30
27058: PUSH
27059: LD_INT 0
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 30
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: LIST
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PPUSH
27085: CALL_OW 72
27089: ST_TO_ADDR
// for i = 1 to hexes do
27090: LD_ADDR_VAR 0 9
27094: PUSH
27095: DOUBLE
27096: LD_INT 1
27098: DEC
27099: ST_TO_ADDR
27100: LD_VAR 0 14
27104: PUSH
27105: FOR_TO
27106: IFFALSE 27782
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27108: LD_ADDR_VAR 0 13
27112: PUSH
27113: LD_VAR 0 14
27117: PUSH
27118: LD_VAR 0 9
27122: ARRAY
27123: PUSH
27124: LD_INT 1
27126: ARRAY
27127: PPUSH
27128: LD_VAR 0 14
27132: PUSH
27133: LD_VAR 0 9
27137: ARRAY
27138: PUSH
27139: LD_INT 2
27141: ARRAY
27142: PPUSH
27143: CALL_OW 428
27147: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27148: LD_VAR 0 14
27152: PUSH
27153: LD_VAR 0 9
27157: ARRAY
27158: PUSH
27159: LD_INT 1
27161: ARRAY
27162: PPUSH
27163: LD_VAR 0 14
27167: PUSH
27168: LD_VAR 0 9
27172: ARRAY
27173: PUSH
27174: LD_INT 2
27176: ARRAY
27177: PPUSH
27178: CALL_OW 351
27182: PUSH
27183: LD_VAR 0 14
27187: PUSH
27188: LD_VAR 0 9
27192: ARRAY
27193: PUSH
27194: LD_INT 1
27196: ARRAY
27197: PPUSH
27198: LD_VAR 0 14
27202: PUSH
27203: LD_VAR 0 9
27207: ARRAY
27208: PUSH
27209: LD_INT 2
27211: ARRAY
27212: PPUSH
27213: CALL_OW 488
27217: NOT
27218: OR
27219: PUSH
27220: LD_VAR 0 13
27224: PPUSH
27225: CALL_OW 247
27229: PUSH
27230: LD_INT 3
27232: EQUAL
27233: OR
27234: IFFALSE 27240
// exit ;
27236: POP
27237: POP
27238: GO 27784
// if not tmp then
27240: LD_VAR 0 13
27244: NOT
27245: IFFALSE 27249
// continue ;
27247: GO 27105
// result := true ;
27249: LD_ADDR_VAR 0 8
27253: PUSH
27254: LD_INT 1
27256: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27257: LD_VAR 0 6
27261: PUSH
27262: LD_VAR 0 13
27266: PPUSH
27267: CALL_OW 247
27271: PUSH
27272: LD_INT 2
27274: EQUAL
27275: AND
27276: PUSH
27277: LD_VAR 0 13
27281: PPUSH
27282: CALL_OW 263
27286: PUSH
27287: LD_INT 1
27289: EQUAL
27290: AND
27291: IFFALSE 27455
// begin if IsDrivenBy ( tmp ) then
27293: LD_VAR 0 13
27297: PPUSH
27298: CALL_OW 311
27302: IFFALSE 27306
// continue ;
27304: GO 27105
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27306: LD_VAR 0 6
27310: PPUSH
27311: LD_INT 3
27313: PUSH
27314: LD_INT 60
27316: PUSH
27317: EMPTY
27318: LIST
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 3
27326: PUSH
27327: LD_INT 55
27329: PUSH
27330: EMPTY
27331: LIST
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PPUSH
27341: CALL_OW 72
27345: IFFALSE 27453
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27347: LD_ADDR_VAR 0 18
27351: PUSH
27352: LD_VAR 0 6
27356: PPUSH
27357: LD_INT 3
27359: PUSH
27360: LD_INT 60
27362: PUSH
27363: EMPTY
27364: LIST
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 3
27372: PUSH
27373: LD_INT 55
27375: PUSH
27376: EMPTY
27377: LIST
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PPUSH
27387: CALL_OW 72
27391: PUSH
27392: LD_INT 1
27394: ARRAY
27395: ST_TO_ADDR
// if IsInUnit ( driver ) then
27396: LD_VAR 0 18
27400: PPUSH
27401: CALL_OW 310
27405: IFFALSE 27416
// ComExit ( driver ) ;
27407: LD_VAR 0 18
27411: PPUSH
27412: CALL 52818 0 1
// AddComEnterUnit ( driver , tmp ) ;
27416: LD_VAR 0 18
27420: PPUSH
27421: LD_VAR 0 13
27425: PPUSH
27426: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27430: LD_VAR 0 18
27434: PPUSH
27435: LD_VAR 0 7
27439: PPUSH
27440: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27444: LD_VAR 0 18
27448: PPUSH
27449: CALL_OW 181
// end ; continue ;
27453: GO 27105
// end ; if not cleaners or not tmp in cleaners then
27455: LD_VAR 0 6
27459: NOT
27460: PUSH
27461: LD_VAR 0 13
27465: PUSH
27466: LD_VAR 0 6
27470: IN
27471: NOT
27472: OR
27473: IFFALSE 27780
// begin if dep then
27475: LD_VAR 0 17
27479: IFFALSE 27615
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27481: LD_ADDR_VAR 0 16
27485: PUSH
27486: LD_VAR 0 17
27490: PUSH
27491: LD_INT 1
27493: ARRAY
27494: PPUSH
27495: CALL_OW 250
27499: PPUSH
27500: LD_VAR 0 17
27504: PUSH
27505: LD_INT 1
27507: ARRAY
27508: PPUSH
27509: CALL_OW 254
27513: PPUSH
27514: LD_INT 5
27516: PPUSH
27517: CALL_OW 272
27521: PUSH
27522: LD_VAR 0 17
27526: PUSH
27527: LD_INT 1
27529: ARRAY
27530: PPUSH
27531: CALL_OW 251
27535: PPUSH
27536: LD_VAR 0 17
27540: PUSH
27541: LD_INT 1
27543: ARRAY
27544: PPUSH
27545: CALL_OW 254
27549: PPUSH
27550: LD_INT 5
27552: PPUSH
27553: CALL_OW 273
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27562: LD_VAR 0 16
27566: PUSH
27567: LD_INT 1
27569: ARRAY
27570: PPUSH
27571: LD_VAR 0 16
27575: PUSH
27576: LD_INT 2
27578: ARRAY
27579: PPUSH
27580: CALL_OW 488
27584: IFFALSE 27615
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27586: LD_VAR 0 13
27590: PPUSH
27591: LD_VAR 0 16
27595: PUSH
27596: LD_INT 1
27598: ARRAY
27599: PPUSH
27600: LD_VAR 0 16
27604: PUSH
27605: LD_INT 2
27607: ARRAY
27608: PPUSH
27609: CALL_OW 111
// continue ;
27613: GO 27105
// end ; end ; r := GetDir ( tmp ) ;
27615: LD_ADDR_VAR 0 15
27619: PUSH
27620: LD_VAR 0 13
27624: PPUSH
27625: CALL_OW 254
27629: ST_TO_ADDR
// if r = 5 then
27630: LD_VAR 0 15
27634: PUSH
27635: LD_INT 5
27637: EQUAL
27638: IFFALSE 27648
// r := 0 ;
27640: LD_ADDR_VAR 0 15
27644: PUSH
27645: LD_INT 0
27647: ST_TO_ADDR
// for j = r to 5 do
27648: LD_ADDR_VAR 0 10
27652: PUSH
27653: DOUBLE
27654: LD_VAR 0 15
27658: DEC
27659: ST_TO_ADDR
27660: LD_INT 5
27662: PUSH
27663: FOR_TO
27664: IFFALSE 27778
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
27666: LD_ADDR_VAR 0 11
27670: PUSH
27671: LD_VAR 0 13
27675: PPUSH
27676: CALL_OW 250
27680: PPUSH
27681: LD_VAR 0 10
27685: PPUSH
27686: LD_INT 2
27688: PPUSH
27689: CALL_OW 272
27693: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
27694: LD_ADDR_VAR 0 12
27698: PUSH
27699: LD_VAR 0 13
27703: PPUSH
27704: CALL_OW 251
27708: PPUSH
27709: LD_VAR 0 10
27713: PPUSH
27714: LD_INT 2
27716: PPUSH
27717: CALL_OW 273
27721: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
27722: LD_VAR 0 11
27726: PPUSH
27727: LD_VAR 0 12
27731: PPUSH
27732: CALL_OW 488
27736: PUSH
27737: LD_VAR 0 11
27741: PPUSH
27742: LD_VAR 0 12
27746: PPUSH
27747: CALL_OW 428
27751: NOT
27752: AND
27753: IFFALSE 27776
// begin ComMoveXY ( tmp , _x , _y ) ;
27755: LD_VAR 0 13
27759: PPUSH
27760: LD_VAR 0 11
27764: PPUSH
27765: LD_VAR 0 12
27769: PPUSH
27770: CALL_OW 111
// break ;
27774: GO 27778
// end ; end ;
27776: GO 27663
27778: POP
27779: POP
// end ; end ;
27780: GO 27105
27782: POP
27783: POP
// end ;
27784: LD_VAR 0 8
27788: RET
// export function BuildingTechInvented ( side , btype ) ; begin
27789: LD_INT 0
27791: PPUSH
// result := true ;
27792: LD_ADDR_VAR 0 3
27796: PUSH
27797: LD_INT 1
27799: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
27800: LD_VAR 0 2
27804: PUSH
27805: LD_INT 24
27807: DOUBLE
27808: EQUAL
27809: IFTRUE 27819
27811: LD_INT 33
27813: DOUBLE
27814: EQUAL
27815: IFTRUE 27819
27817: GO 27844
27819: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
27820: LD_ADDR_VAR 0 3
27824: PUSH
27825: LD_INT 32
27827: PPUSH
27828: LD_VAR 0 1
27832: PPUSH
27833: CALL_OW 321
27837: PUSH
27838: LD_INT 2
27840: EQUAL
27841: ST_TO_ADDR
27842: GO 28160
27844: LD_INT 20
27846: DOUBLE
27847: EQUAL
27848: IFTRUE 27852
27850: GO 27877
27852: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
27853: LD_ADDR_VAR 0 3
27857: PUSH
27858: LD_INT 6
27860: PPUSH
27861: LD_VAR 0 1
27865: PPUSH
27866: CALL_OW 321
27870: PUSH
27871: LD_INT 2
27873: EQUAL
27874: ST_TO_ADDR
27875: GO 28160
27877: LD_INT 22
27879: DOUBLE
27880: EQUAL
27881: IFTRUE 27891
27883: LD_INT 36
27885: DOUBLE
27886: EQUAL
27887: IFTRUE 27891
27889: GO 27916
27891: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
27892: LD_ADDR_VAR 0 3
27896: PUSH
27897: LD_INT 15
27899: PPUSH
27900: LD_VAR 0 1
27904: PPUSH
27905: CALL_OW 321
27909: PUSH
27910: LD_INT 2
27912: EQUAL
27913: ST_TO_ADDR
27914: GO 28160
27916: LD_INT 30
27918: DOUBLE
27919: EQUAL
27920: IFTRUE 27924
27922: GO 27949
27924: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
27925: LD_ADDR_VAR 0 3
27929: PUSH
27930: LD_INT 20
27932: PPUSH
27933: LD_VAR 0 1
27937: PPUSH
27938: CALL_OW 321
27942: PUSH
27943: LD_INT 2
27945: EQUAL
27946: ST_TO_ADDR
27947: GO 28160
27949: LD_INT 28
27951: DOUBLE
27952: EQUAL
27953: IFTRUE 27963
27955: LD_INT 21
27957: DOUBLE
27958: EQUAL
27959: IFTRUE 27963
27961: GO 27988
27963: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
27964: LD_ADDR_VAR 0 3
27968: PUSH
27969: LD_INT 21
27971: PPUSH
27972: LD_VAR 0 1
27976: PPUSH
27977: CALL_OW 321
27981: PUSH
27982: LD_INT 2
27984: EQUAL
27985: ST_TO_ADDR
27986: GO 28160
27988: LD_INT 16
27990: DOUBLE
27991: EQUAL
27992: IFTRUE 27996
27994: GO 28021
27996: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
27997: LD_ADDR_VAR 0 3
28001: PUSH
28002: LD_INT 84
28004: PPUSH
28005: LD_VAR 0 1
28009: PPUSH
28010: CALL_OW 321
28014: PUSH
28015: LD_INT 2
28017: EQUAL
28018: ST_TO_ADDR
28019: GO 28160
28021: LD_INT 19
28023: DOUBLE
28024: EQUAL
28025: IFTRUE 28035
28027: LD_INT 23
28029: DOUBLE
28030: EQUAL
28031: IFTRUE 28035
28033: GO 28060
28035: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28036: LD_ADDR_VAR 0 3
28040: PUSH
28041: LD_INT 83
28043: PPUSH
28044: LD_VAR 0 1
28048: PPUSH
28049: CALL_OW 321
28053: PUSH
28054: LD_INT 2
28056: EQUAL
28057: ST_TO_ADDR
28058: GO 28160
28060: LD_INT 17
28062: DOUBLE
28063: EQUAL
28064: IFTRUE 28068
28066: GO 28093
28068: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28069: LD_ADDR_VAR 0 3
28073: PUSH
28074: LD_INT 39
28076: PPUSH
28077: LD_VAR 0 1
28081: PPUSH
28082: CALL_OW 321
28086: PUSH
28087: LD_INT 2
28089: EQUAL
28090: ST_TO_ADDR
28091: GO 28160
28093: LD_INT 18
28095: DOUBLE
28096: EQUAL
28097: IFTRUE 28101
28099: GO 28126
28101: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28102: LD_ADDR_VAR 0 3
28106: PUSH
28107: LD_INT 40
28109: PPUSH
28110: LD_VAR 0 1
28114: PPUSH
28115: CALL_OW 321
28119: PUSH
28120: LD_INT 2
28122: EQUAL
28123: ST_TO_ADDR
28124: GO 28160
28126: LD_INT 27
28128: DOUBLE
28129: EQUAL
28130: IFTRUE 28134
28132: GO 28159
28134: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28135: LD_ADDR_VAR 0 3
28139: PUSH
28140: LD_INT 35
28142: PPUSH
28143: LD_VAR 0 1
28147: PPUSH
28148: CALL_OW 321
28152: PUSH
28153: LD_INT 2
28155: EQUAL
28156: ST_TO_ADDR
28157: GO 28160
28159: POP
// end ;
28160: LD_VAR 0 3
28164: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28165: LD_INT 0
28167: PPUSH
28168: PPUSH
28169: PPUSH
28170: PPUSH
28171: PPUSH
28172: PPUSH
28173: PPUSH
28174: PPUSH
28175: PPUSH
28176: PPUSH
28177: PPUSH
// result := false ;
28178: LD_ADDR_VAR 0 6
28182: PUSH
28183: LD_INT 0
28185: ST_TO_ADDR
// if btype = b_depot then
28186: LD_VAR 0 2
28190: PUSH
28191: LD_INT 0
28193: EQUAL
28194: IFFALSE 28206
// begin result := true ;
28196: LD_ADDR_VAR 0 6
28200: PUSH
28201: LD_INT 1
28203: ST_TO_ADDR
// exit ;
28204: GO 29032
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28206: LD_VAR 0 1
28210: NOT
28211: PUSH
28212: LD_VAR 0 1
28216: PPUSH
28217: CALL_OW 266
28221: PUSH
28222: LD_INT 0
28224: PUSH
28225: LD_INT 1
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: IN
28232: NOT
28233: OR
28234: PUSH
28235: LD_VAR 0 2
28239: NOT
28240: OR
28241: PUSH
28242: LD_VAR 0 5
28246: PUSH
28247: LD_INT 0
28249: PUSH
28250: LD_INT 1
28252: PUSH
28253: LD_INT 2
28255: PUSH
28256: LD_INT 3
28258: PUSH
28259: LD_INT 4
28261: PUSH
28262: LD_INT 5
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: IN
28273: NOT
28274: OR
28275: PUSH
28276: LD_VAR 0 3
28280: PPUSH
28281: LD_VAR 0 4
28285: PPUSH
28286: CALL_OW 488
28290: NOT
28291: OR
28292: IFFALSE 28296
// exit ;
28294: GO 29032
// side := GetSide ( depot ) ;
28296: LD_ADDR_VAR 0 9
28300: PUSH
28301: LD_VAR 0 1
28305: PPUSH
28306: CALL_OW 255
28310: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28311: LD_VAR 0 9
28315: PPUSH
28316: LD_VAR 0 2
28320: PPUSH
28321: CALL 27789 0 2
28325: NOT
28326: IFFALSE 28330
// exit ;
28328: GO 29032
// pom := GetBase ( depot ) ;
28330: LD_ADDR_VAR 0 10
28334: PUSH
28335: LD_VAR 0 1
28339: PPUSH
28340: CALL_OW 274
28344: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28345: LD_ADDR_VAR 0 11
28349: PUSH
28350: LD_VAR 0 2
28354: PPUSH
28355: LD_VAR 0 1
28359: PPUSH
28360: CALL_OW 248
28364: PPUSH
28365: CALL_OW 450
28369: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28370: LD_VAR 0 10
28374: PPUSH
28375: LD_INT 1
28377: PPUSH
28378: CALL_OW 275
28382: PUSH
28383: LD_VAR 0 11
28387: PUSH
28388: LD_INT 1
28390: ARRAY
28391: GREATEREQUAL
28392: PUSH
28393: LD_VAR 0 10
28397: PPUSH
28398: LD_INT 2
28400: PPUSH
28401: CALL_OW 275
28405: PUSH
28406: LD_VAR 0 11
28410: PUSH
28411: LD_INT 2
28413: ARRAY
28414: GREATEREQUAL
28415: AND
28416: PUSH
28417: LD_VAR 0 10
28421: PPUSH
28422: LD_INT 3
28424: PPUSH
28425: CALL_OW 275
28429: PUSH
28430: LD_VAR 0 11
28434: PUSH
28435: LD_INT 3
28437: ARRAY
28438: GREATEREQUAL
28439: AND
28440: NOT
28441: IFFALSE 28445
// exit ;
28443: GO 29032
// if GetBType ( depot ) = b_depot then
28445: LD_VAR 0 1
28449: PPUSH
28450: CALL_OW 266
28454: PUSH
28455: LD_INT 0
28457: EQUAL
28458: IFFALSE 28470
// dist := 28 else
28460: LD_ADDR_VAR 0 14
28464: PUSH
28465: LD_INT 28
28467: ST_TO_ADDR
28468: GO 28478
// dist := 36 ;
28470: LD_ADDR_VAR 0 14
28474: PUSH
28475: LD_INT 36
28477: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28478: LD_VAR 0 1
28482: PPUSH
28483: LD_VAR 0 3
28487: PPUSH
28488: LD_VAR 0 4
28492: PPUSH
28493: CALL_OW 297
28497: PUSH
28498: LD_VAR 0 14
28502: GREATER
28503: IFFALSE 28507
// exit ;
28505: GO 29032
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28507: LD_ADDR_VAR 0 12
28511: PUSH
28512: LD_VAR 0 2
28516: PPUSH
28517: LD_VAR 0 3
28521: PPUSH
28522: LD_VAR 0 4
28526: PPUSH
28527: LD_VAR 0 5
28531: PPUSH
28532: LD_VAR 0 1
28536: PPUSH
28537: CALL_OW 248
28541: PPUSH
28542: LD_INT 0
28544: PPUSH
28545: CALL 29037 0 6
28549: ST_TO_ADDR
// if not hexes then
28550: LD_VAR 0 12
28554: NOT
28555: IFFALSE 28559
// exit ;
28557: GO 29032
// hex := GetHexInfo ( x , y ) ;
28559: LD_ADDR_VAR 0 15
28563: PUSH
28564: LD_VAR 0 3
28568: PPUSH
28569: LD_VAR 0 4
28573: PPUSH
28574: CALL_OW 546
28578: ST_TO_ADDR
// if hex [ 1 ] then
28579: LD_VAR 0 15
28583: PUSH
28584: LD_INT 1
28586: ARRAY
28587: IFFALSE 28591
// exit ;
28589: GO 29032
// height := hex [ 2 ] ;
28591: LD_ADDR_VAR 0 13
28595: PUSH
28596: LD_VAR 0 15
28600: PUSH
28601: LD_INT 2
28603: ARRAY
28604: ST_TO_ADDR
// for i = 1 to hexes do
28605: LD_ADDR_VAR 0 7
28609: PUSH
28610: DOUBLE
28611: LD_INT 1
28613: DEC
28614: ST_TO_ADDR
28615: LD_VAR 0 12
28619: PUSH
28620: FOR_TO
28621: IFFALSE 28951
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28623: LD_VAR 0 12
28627: PUSH
28628: LD_VAR 0 7
28632: ARRAY
28633: PUSH
28634: LD_INT 1
28636: ARRAY
28637: PPUSH
28638: LD_VAR 0 12
28642: PUSH
28643: LD_VAR 0 7
28647: ARRAY
28648: PUSH
28649: LD_INT 2
28651: ARRAY
28652: PPUSH
28653: CALL_OW 488
28657: NOT
28658: PUSH
28659: LD_VAR 0 12
28663: PUSH
28664: LD_VAR 0 7
28668: ARRAY
28669: PUSH
28670: LD_INT 1
28672: ARRAY
28673: PPUSH
28674: LD_VAR 0 12
28678: PUSH
28679: LD_VAR 0 7
28683: ARRAY
28684: PUSH
28685: LD_INT 2
28687: ARRAY
28688: PPUSH
28689: CALL_OW 428
28693: PUSH
28694: LD_INT 0
28696: GREATER
28697: OR
28698: PUSH
28699: LD_VAR 0 12
28703: PUSH
28704: LD_VAR 0 7
28708: ARRAY
28709: PUSH
28710: LD_INT 1
28712: ARRAY
28713: PPUSH
28714: LD_VAR 0 12
28718: PUSH
28719: LD_VAR 0 7
28723: ARRAY
28724: PUSH
28725: LD_INT 2
28727: ARRAY
28728: PPUSH
28729: CALL_OW 351
28733: OR
28734: IFFALSE 28740
// exit ;
28736: POP
28737: POP
28738: GO 29032
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28740: LD_ADDR_VAR 0 8
28744: PUSH
28745: LD_VAR 0 12
28749: PUSH
28750: LD_VAR 0 7
28754: ARRAY
28755: PUSH
28756: LD_INT 1
28758: ARRAY
28759: PPUSH
28760: LD_VAR 0 12
28764: PUSH
28765: LD_VAR 0 7
28769: ARRAY
28770: PUSH
28771: LD_INT 2
28773: ARRAY
28774: PPUSH
28775: CALL_OW 546
28779: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
28780: LD_VAR 0 8
28784: PUSH
28785: LD_INT 1
28787: ARRAY
28788: PUSH
28789: LD_VAR 0 8
28793: PUSH
28794: LD_INT 2
28796: ARRAY
28797: PUSH
28798: LD_VAR 0 13
28802: PUSH
28803: LD_INT 2
28805: PLUS
28806: GREATER
28807: OR
28808: PUSH
28809: LD_VAR 0 8
28813: PUSH
28814: LD_INT 2
28816: ARRAY
28817: PUSH
28818: LD_VAR 0 13
28822: PUSH
28823: LD_INT 2
28825: MINUS
28826: LESS
28827: OR
28828: PUSH
28829: LD_VAR 0 8
28833: PUSH
28834: LD_INT 3
28836: ARRAY
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: LD_INT 8
28843: PUSH
28844: LD_INT 9
28846: PUSH
28847: LD_INT 10
28849: PUSH
28850: LD_INT 11
28852: PUSH
28853: LD_INT 12
28855: PUSH
28856: LD_INT 13
28858: PUSH
28859: LD_INT 16
28861: PUSH
28862: LD_INT 17
28864: PUSH
28865: LD_INT 18
28867: PUSH
28868: LD_INT 19
28870: PUSH
28871: LD_INT 20
28873: PUSH
28874: LD_INT 21
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: IN
28892: NOT
28893: OR
28894: PUSH
28895: LD_VAR 0 8
28899: PUSH
28900: LD_INT 5
28902: ARRAY
28903: NOT
28904: OR
28905: PUSH
28906: LD_VAR 0 8
28910: PUSH
28911: LD_INT 6
28913: ARRAY
28914: PUSH
28915: LD_INT 1
28917: PUSH
28918: LD_INT 2
28920: PUSH
28921: LD_INT 7
28923: PUSH
28924: LD_INT 9
28926: PUSH
28927: LD_INT 10
28929: PUSH
28930: LD_INT 11
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: IN
28941: NOT
28942: OR
28943: IFFALSE 28949
// exit ;
28945: POP
28946: POP
28947: GO 29032
// end ;
28949: GO 28620
28951: POP
28952: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
28953: LD_VAR 0 9
28957: PPUSH
28958: LD_VAR 0 3
28962: PPUSH
28963: LD_VAR 0 4
28967: PPUSH
28968: LD_INT 20
28970: PPUSH
28971: CALL 20955 0 4
28975: PUSH
28976: LD_INT 4
28978: ARRAY
28979: IFFALSE 28983
// exit ;
28981: GO 29032
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
28983: LD_VAR 0 2
28987: PUSH
28988: LD_INT 29
28990: PUSH
28991: LD_INT 30
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: IN
28998: PUSH
28999: LD_VAR 0 3
29003: PPUSH
29004: LD_VAR 0 4
29008: PPUSH
29009: LD_VAR 0 9
29013: PPUSH
29014: CALL_OW 440
29018: NOT
29019: AND
29020: IFFALSE 29024
// exit ;
29022: GO 29032
// result := true ;
29024: LD_ADDR_VAR 0 6
29028: PUSH
29029: LD_INT 1
29031: ST_TO_ADDR
// end ;
29032: LD_VAR 0 6
29036: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29037: LD_INT 0
29039: PPUSH
29040: PPUSH
29041: PPUSH
29042: PPUSH
29043: PPUSH
29044: PPUSH
29045: PPUSH
29046: PPUSH
29047: PPUSH
29048: PPUSH
29049: PPUSH
29050: PPUSH
29051: PPUSH
29052: PPUSH
29053: PPUSH
29054: PPUSH
29055: PPUSH
29056: PPUSH
29057: PPUSH
29058: PPUSH
29059: PPUSH
29060: PPUSH
29061: PPUSH
29062: PPUSH
29063: PPUSH
29064: PPUSH
29065: PPUSH
29066: PPUSH
29067: PPUSH
29068: PPUSH
29069: PPUSH
29070: PPUSH
29071: PPUSH
29072: PPUSH
29073: PPUSH
29074: PPUSH
29075: PPUSH
29076: PPUSH
29077: PPUSH
29078: PPUSH
29079: PPUSH
29080: PPUSH
29081: PPUSH
29082: PPUSH
29083: PPUSH
29084: PPUSH
29085: PPUSH
29086: PPUSH
29087: PPUSH
29088: PPUSH
29089: PPUSH
29090: PPUSH
29091: PPUSH
29092: PPUSH
29093: PPUSH
29094: PPUSH
29095: PPUSH
29096: PPUSH
// result = [ ] ;
29097: LD_ADDR_VAR 0 7
29101: PUSH
29102: EMPTY
29103: ST_TO_ADDR
// temp_list = [ ] ;
29104: LD_ADDR_VAR 0 9
29108: PUSH
29109: EMPTY
29110: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29111: LD_VAR 0 4
29115: PUSH
29116: LD_INT 0
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: LD_INT 2
29124: PUSH
29125: LD_INT 3
29127: PUSH
29128: LD_INT 4
29130: PUSH
29131: LD_INT 5
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: IN
29142: NOT
29143: PUSH
29144: LD_VAR 0 1
29148: PUSH
29149: LD_INT 0
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: IN
29159: PUSH
29160: LD_VAR 0 5
29164: PUSH
29165: LD_INT 1
29167: PUSH
29168: LD_INT 2
29170: PUSH
29171: LD_INT 3
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: LIST
29178: IN
29179: NOT
29180: AND
29181: OR
29182: IFFALSE 29186
// exit ;
29184: GO 47577
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29186: LD_VAR 0 1
29190: PUSH
29191: LD_INT 6
29193: PUSH
29194: LD_INT 7
29196: PUSH
29197: LD_INT 8
29199: PUSH
29200: LD_INT 13
29202: PUSH
29203: LD_INT 12
29205: PUSH
29206: LD_INT 15
29208: PUSH
29209: LD_INT 11
29211: PUSH
29212: LD_INT 14
29214: PUSH
29215: LD_INT 10
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: IN
29229: IFFALSE 29239
// btype = b_lab ;
29231: LD_ADDR_VAR 0 1
29235: PUSH
29236: LD_INT 6
29238: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29239: LD_VAR 0 6
29243: PUSH
29244: LD_INT 0
29246: PUSH
29247: LD_INT 1
29249: PUSH
29250: LD_INT 2
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: LIST
29257: IN
29258: NOT
29259: PUSH
29260: LD_VAR 0 1
29264: PUSH
29265: LD_INT 0
29267: PUSH
29268: LD_INT 1
29270: PUSH
29271: LD_INT 2
29273: PUSH
29274: LD_INT 3
29276: PUSH
29277: LD_INT 6
29279: PUSH
29280: LD_INT 36
29282: PUSH
29283: LD_INT 4
29285: PUSH
29286: LD_INT 5
29288: PUSH
29289: LD_INT 31
29291: PUSH
29292: LD_INT 32
29294: PUSH
29295: LD_INT 33
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: IN
29311: NOT
29312: PUSH
29313: LD_VAR 0 6
29317: PUSH
29318: LD_INT 1
29320: EQUAL
29321: AND
29322: OR
29323: PUSH
29324: LD_VAR 0 1
29328: PUSH
29329: LD_INT 2
29331: PUSH
29332: LD_INT 3
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: IN
29339: NOT
29340: PUSH
29341: LD_VAR 0 6
29345: PUSH
29346: LD_INT 2
29348: EQUAL
29349: AND
29350: OR
29351: IFFALSE 29361
// mode = 0 ;
29353: LD_ADDR_VAR 0 6
29357: PUSH
29358: LD_INT 0
29360: ST_TO_ADDR
// case mode of 0 :
29361: LD_VAR 0 6
29365: PUSH
29366: LD_INT 0
29368: DOUBLE
29369: EQUAL
29370: IFTRUE 29374
29372: GO 40827
29374: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29375: LD_ADDR_VAR 0 11
29379: PUSH
29380: LD_INT 0
29382: PUSH
29383: LD_INT 0
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: LD_INT 1
29395: NEG
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 1
29403: PUSH
29404: LD_INT 0
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 1
29413: PUSH
29414: LD_INT 1
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 0
29423: PUSH
29424: LD_INT 1
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 1
29433: NEG
29434: PUSH
29435: LD_INT 0
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 1
29444: NEG
29445: PUSH
29446: LD_INT 1
29448: NEG
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 1
29456: NEG
29457: PUSH
29458: LD_INT 2
29460: NEG
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 0
29468: PUSH
29469: LD_INT 2
29471: NEG
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 1
29479: PUSH
29480: LD_INT 1
29482: NEG
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 1
29490: PUSH
29491: LD_INT 2
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 0
29500: PUSH
29501: LD_INT 2
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 1
29510: NEG
29511: PUSH
29512: LD_INT 1
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: LD_INT 3
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: LD_INT 3
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 1
29541: NEG
29542: PUSH
29543: LD_INT 2
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29568: LD_ADDR_VAR 0 12
29572: PUSH
29573: LD_INT 0
29575: PUSH
29576: LD_INT 0
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 0
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 1
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: LD_INT 1
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 0
29616: PUSH
29617: LD_INT 1
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 1
29626: NEG
29627: PUSH
29628: LD_INT 0
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 1
29637: NEG
29638: PUSH
29639: LD_INT 1
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: LD_INT 1
29652: NEG
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 2
29660: PUSH
29661: LD_INT 0
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: LD_INT 1
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 1
29680: NEG
29681: PUSH
29682: LD_INT 1
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 2
29691: NEG
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 2
29702: NEG
29703: PUSH
29704: LD_INT 1
29706: NEG
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 2
29714: NEG
29715: PUSH
29716: LD_INT 1
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 3
29725: NEG
29726: PUSH
29727: LD_INT 0
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 3
29736: NEG
29737: PUSH
29738: LD_INT 1
29740: NEG
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29764: LD_ADDR_VAR 0 13
29768: PUSH
29769: LD_INT 0
29771: PUSH
29772: LD_INT 0
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: LD_INT 1
29784: NEG
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 1
29792: PUSH
29793: LD_INT 0
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 1
29802: PUSH
29803: LD_INT 1
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 0
29812: PUSH
29813: LD_INT 1
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: LD_INT 0
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: NEG
29834: PUSH
29835: LD_INT 1
29837: NEG
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 1
29845: NEG
29846: PUSH
29847: LD_INT 2
29849: NEG
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 2
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 2
29867: PUSH
29868: LD_INT 2
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 1
29877: PUSH
29878: LD_INT 2
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 2
29887: NEG
29888: PUSH
29889: LD_INT 1
29891: NEG
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 2
29899: NEG
29900: PUSH
29901: LD_INT 2
29903: NEG
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 2
29911: NEG
29912: PUSH
29913: LD_INT 3
29915: NEG
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 3
29923: NEG
29924: PUSH
29925: LD_INT 2
29927: NEG
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 3
29935: NEG
29936: PUSH
29937: LD_INT 3
29939: NEG
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29963: LD_ADDR_VAR 0 14
29967: PUSH
29968: LD_INT 0
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: LD_INT 1
29983: NEG
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 1
29991: PUSH
29992: LD_INT 0
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 1
30021: NEG
30022: PUSH
30023: LD_INT 0
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 1
30032: NEG
30033: PUSH
30034: LD_INT 1
30036: NEG
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: LD_INT 2
30048: NEG
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 0
30056: PUSH
30057: LD_INT 2
30059: NEG
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 1
30067: PUSH
30068: LD_INT 1
30070: NEG
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 1
30078: PUSH
30079: LD_INT 2
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 0
30088: PUSH
30089: LD_INT 2
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 1
30098: NEG
30099: PUSH
30100: LD_INT 1
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 1
30109: NEG
30110: PUSH
30111: LD_INT 3
30113: NEG
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 0
30121: PUSH
30122: LD_INT 3
30124: NEG
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 1
30132: PUSH
30133: LD_INT 2
30135: NEG
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30159: LD_ADDR_VAR 0 15
30163: PUSH
30164: LD_INT 0
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 0
30176: PUSH
30177: LD_INT 1
30179: NEG
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 1
30187: PUSH
30188: LD_INT 0
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 1
30197: PUSH
30198: LD_INT 1
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 0
30207: PUSH
30208: LD_INT 1
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 1
30217: NEG
30218: PUSH
30219: LD_INT 0
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 1
30240: PUSH
30241: LD_INT 1
30243: NEG
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 2
30251: PUSH
30252: LD_INT 0
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: LD_INT 1
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 1
30271: NEG
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 2
30282: NEG
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 2
30293: NEG
30294: PUSH
30295: LD_INT 1
30297: NEG
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 2
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 3
30316: PUSH
30317: LD_INT 0
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 3
30326: PUSH
30327: LD_INT 1
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30352: LD_ADDR_VAR 0 16
30356: PUSH
30357: LD_INT 0
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 0
30369: PUSH
30370: LD_INT 1
30372: NEG
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: LD_INT 0
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: LD_INT 1
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 0
30400: PUSH
30401: LD_INT 1
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 1
30410: NEG
30411: PUSH
30412: LD_INT 0
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 1
30433: NEG
30434: PUSH
30435: LD_INT 2
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 2
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 2
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 1
30465: PUSH
30466: LD_INT 2
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 2
30475: NEG
30476: PUSH
30477: LD_INT 1
30479: NEG
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 2
30487: NEG
30488: PUSH
30489: LD_INT 2
30491: NEG
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 3
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 3
30509: PUSH
30510: LD_INT 3
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 2
30519: PUSH
30520: LD_INT 3
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30545: LD_ADDR_VAR 0 17
30549: PUSH
30550: LD_INT 0
30552: PUSH
30553: LD_INT 0
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 0
30562: PUSH
30563: LD_INT 1
30565: NEG
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 1
30573: PUSH
30574: LD_INT 0
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 1
30583: PUSH
30584: LD_INT 1
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 0
30593: PUSH
30594: LD_INT 1
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 1
30603: NEG
30604: PUSH
30605: LD_INT 0
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 1
30614: NEG
30615: PUSH
30616: LD_INT 1
30618: NEG
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 1
30626: NEG
30627: PUSH
30628: LD_INT 2
30630: NEG
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 0
30638: PUSH
30639: LD_INT 2
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 2
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 2
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 2
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 1
30690: PUSH
30691: LD_INT 2
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 0
30700: PUSH
30701: LD_INT 2
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 1
30710: NEG
30711: PUSH
30712: LD_INT 1
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 2
30721: NEG
30722: PUSH
30723: LD_INT 0
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 2
30732: NEG
30733: PUSH
30734: LD_INT 1
30736: NEG
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 2
30744: NEG
30745: PUSH
30746: LD_INT 2
30748: NEG
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30775: LD_ADDR_VAR 0 18
30779: PUSH
30780: LD_INT 0
30782: PUSH
30783: LD_INT 0
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 0
30792: PUSH
30793: LD_INT 1
30795: NEG
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 1
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 1
30813: PUSH
30814: LD_INT 1
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 0
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 1
30833: NEG
30834: PUSH
30835: LD_INT 0
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 1
30844: NEG
30845: PUSH
30846: LD_INT 1
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: LD_INT 2
30860: NEG
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: LD_INT 2
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: LD_INT 1
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 2
30890: PUSH
30891: LD_INT 0
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 2
30900: PUSH
30901: LD_INT 1
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: LD_INT 2
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 1
30920: PUSH
30921: LD_INT 2
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 0
30930: PUSH
30931: LD_INT 2
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 1
30940: NEG
30941: PUSH
30942: LD_INT 1
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 2
30951: NEG
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 2
30962: NEG
30963: PUSH
30964: LD_INT 1
30966: NEG
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 2
30974: NEG
30975: PUSH
30976: LD_INT 2
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31005: LD_ADDR_VAR 0 19
31009: PUSH
31010: LD_INT 0
31012: PUSH
31013: LD_INT 0
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 0
31022: PUSH
31023: LD_INT 1
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 1
31033: PUSH
31034: LD_INT 0
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 1
31043: PUSH
31044: LD_INT 1
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 0
31053: PUSH
31054: LD_INT 1
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 1
31063: NEG
31064: PUSH
31065: LD_INT 0
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 1
31074: NEG
31075: PUSH
31076: LD_INT 1
31078: NEG
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: LD_INT 2
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: LD_INT 2
31101: NEG
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 2
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 2
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 2
31140: PUSH
31141: LD_INT 2
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 1
31150: PUSH
31151: LD_INT 2
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 0
31160: PUSH
31161: LD_INT 2
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 1
31170: NEG
31171: PUSH
31172: LD_INT 1
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 2
31181: NEG
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 2
31192: NEG
31193: PUSH
31194: LD_INT 1
31196: NEG
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 2
31204: NEG
31205: PUSH
31206: LD_INT 2
31208: NEG
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31235: LD_ADDR_VAR 0 20
31239: PUSH
31240: LD_INT 0
31242: PUSH
31243: LD_INT 0
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: LD_INT 0
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 1
31293: NEG
31294: PUSH
31295: LD_INT 0
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: NEG
31305: PUSH
31306: LD_INT 1
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: NEG
31317: PUSH
31318: LD_INT 2
31320: NEG
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 0
31328: PUSH
31329: LD_INT 2
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 1
31339: PUSH
31340: LD_INT 1
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 2
31350: PUSH
31351: LD_INT 0
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 2
31360: PUSH
31361: LD_INT 1
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: LD_INT 2
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: LD_INT 2
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 0
31390: PUSH
31391: LD_INT 2
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 1
31400: NEG
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 2
31411: NEG
31412: PUSH
31413: LD_INT 0
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: NEG
31423: PUSH
31424: LD_INT 1
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 2
31434: NEG
31435: PUSH
31436: LD_INT 2
31438: NEG
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31465: LD_ADDR_VAR 0 21
31469: PUSH
31470: LD_INT 0
31472: PUSH
31473: LD_INT 0
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 0
31482: PUSH
31483: LD_INT 1
31485: NEG
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 1
31493: PUSH
31494: LD_INT 0
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 1
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 0
31513: PUSH
31514: LD_INT 1
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 1
31523: NEG
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 1
31534: NEG
31535: PUSH
31536: LD_INT 1
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 1
31546: NEG
31547: PUSH
31548: LD_INT 2
31550: NEG
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 0
31558: PUSH
31559: LD_INT 2
31561: NEG
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: LD_INT 1
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 2
31580: PUSH
31581: LD_INT 0
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 2
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 2
31600: PUSH
31601: LD_INT 2
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 1
31610: PUSH
31611: LD_INT 2
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 0
31620: PUSH
31621: LD_INT 2
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 1
31630: NEG
31631: PUSH
31632: LD_INT 1
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 2
31641: NEG
31642: PUSH
31643: LD_INT 0
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 2
31652: NEG
31653: PUSH
31654: LD_INT 1
31656: NEG
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 2
31664: NEG
31665: PUSH
31666: LD_INT 2
31668: NEG
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31695: LD_ADDR_VAR 0 22
31699: PUSH
31700: LD_INT 0
31702: PUSH
31703: LD_INT 0
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 0
31712: PUSH
31713: LD_INT 1
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 1
31723: PUSH
31724: LD_INT 0
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 1
31733: PUSH
31734: LD_INT 1
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 1
31753: NEG
31754: PUSH
31755: LD_INT 0
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: NEG
31777: PUSH
31778: LD_INT 2
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 0
31788: PUSH
31789: LD_INT 2
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 1
31799: PUSH
31800: LD_INT 1
31802: NEG
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 2
31810: PUSH
31811: LD_INT 0
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 2
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 2
31830: PUSH
31831: LD_INT 2
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: LD_INT 2
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 0
31850: PUSH
31851: LD_INT 2
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 2
31871: NEG
31872: PUSH
31873: LD_INT 0
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 2
31882: NEG
31883: PUSH
31884: LD_INT 1
31886: NEG
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 2
31894: NEG
31895: PUSH
31896: LD_INT 2
31898: NEG
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31925: LD_ADDR_VAR 0 23
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: LD_INT 0
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 0
31942: PUSH
31943: LD_INT 1
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 1
31953: PUSH
31954: LD_INT 0
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 1
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 1
31983: NEG
31984: PUSH
31985: LD_INT 0
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 1
31994: NEG
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: LD_INT 2
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: LD_INT 2
32021: NEG
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: LD_INT 1
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 2
32040: PUSH
32041: LD_INT 0
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 2
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 2
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 1
32070: PUSH
32071: LD_INT 2
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 0
32080: PUSH
32081: LD_INT 2
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 1
32090: NEG
32091: PUSH
32092: LD_INT 1
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 2
32101: NEG
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 2
32112: NEG
32113: PUSH
32114: LD_INT 1
32116: NEG
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 2
32124: NEG
32125: PUSH
32126: LD_INT 2
32128: NEG
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 2
32136: NEG
32137: PUSH
32138: LD_INT 3
32140: NEG
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 1
32148: NEG
32149: PUSH
32150: LD_INT 3
32152: NEG
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: PUSH
32161: LD_INT 2
32163: NEG
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 2
32171: PUSH
32172: LD_INT 1
32174: NEG
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32205: LD_ADDR_VAR 0 24
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 0
32222: PUSH
32223: LD_INT 1
32225: NEG
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: LD_INT 0
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 1
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 0
32253: PUSH
32254: LD_INT 1
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 1
32263: NEG
32264: PUSH
32265: LD_INT 0
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 1
32274: NEG
32275: PUSH
32276: LD_INT 1
32278: NEG
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 1
32286: NEG
32287: PUSH
32288: LD_INT 2
32290: NEG
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 0
32298: PUSH
32299: LD_INT 2
32301: NEG
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 1
32309: PUSH
32310: LD_INT 1
32312: NEG
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: LD_INT 0
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: PUSH
32331: LD_INT 1
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 2
32340: PUSH
32341: LD_INT 2
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 1
32350: PUSH
32351: LD_INT 2
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: LD_INT 2
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 1
32370: NEG
32371: PUSH
32372: LD_INT 1
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 2
32381: NEG
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 2
32392: NEG
32393: PUSH
32394: LD_INT 1
32396: NEG
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 2
32404: NEG
32405: PUSH
32406: LD_INT 2
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: LD_INT 2
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 2
32427: PUSH
32428: LD_INT 1
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 3
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 3
32448: PUSH
32449: LD_INT 2
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32481: LD_ADDR_VAR 0 25
32485: PUSH
32486: LD_INT 0
32488: PUSH
32489: LD_INT 0
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: LD_INT 1
32501: NEG
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: LD_INT 0
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 1
32519: PUSH
32520: LD_INT 1
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 0
32529: PUSH
32530: LD_INT 1
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 1
32539: NEG
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 1
32550: NEG
32551: PUSH
32552: LD_INT 1
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 1
32562: NEG
32563: PUSH
32564: LD_INT 2
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 0
32574: PUSH
32575: LD_INT 2
32577: NEG
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 1
32585: PUSH
32586: LD_INT 1
32588: NEG
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 2
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 2
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 2
32616: PUSH
32617: LD_INT 2
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 1
32626: PUSH
32627: LD_INT 2
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 0
32636: PUSH
32637: LD_INT 2
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 1
32646: NEG
32647: PUSH
32648: LD_INT 1
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 2
32657: NEG
32658: PUSH
32659: LD_INT 0
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 2
32668: NEG
32669: PUSH
32670: LD_INT 1
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 2
32680: NEG
32681: PUSH
32682: LD_INT 2
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 3
32692: PUSH
32693: LD_INT 1
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 3
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 2
32712: PUSH
32713: LD_INT 3
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 1
32722: PUSH
32723: LD_INT 3
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32755: LD_ADDR_VAR 0 26
32759: PUSH
32760: LD_INT 0
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 1
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 1
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 0
32803: PUSH
32804: LD_INT 1
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 1
32813: NEG
32814: PUSH
32815: LD_INT 0
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 1
32824: NEG
32825: PUSH
32826: LD_INT 1
32828: NEG
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: LD_INT 2
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: LD_INT 2
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 1
32859: PUSH
32860: LD_INT 1
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 2
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 2
32880: PUSH
32881: LD_INT 1
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 2
32890: PUSH
32891: LD_INT 2
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 1
32900: PUSH
32901: LD_INT 2
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: LD_INT 2
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 2
32931: NEG
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 2
32942: NEG
32943: PUSH
32944: LD_INT 1
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 2
32954: NEG
32955: PUSH
32956: LD_INT 2
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 2
32966: PUSH
32967: LD_INT 3
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 1
32976: PUSH
32977: LD_INT 3
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 1
32986: NEG
32987: PUSH
32988: LD_INT 2
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 2
32997: NEG
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33031: LD_ADDR_VAR 0 27
33035: PUSH
33036: LD_INT 0
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 1
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 1
33069: PUSH
33070: LD_INT 1
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: LD_INT 1
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: NEG
33090: PUSH
33091: LD_INT 0
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: LD_INT 1
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 1
33112: NEG
33113: PUSH
33114: LD_INT 2
33116: NEG
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 0
33124: PUSH
33125: LD_INT 2
33127: NEG
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: LD_INT 1
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 2
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 2
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 2
33166: PUSH
33167: LD_INT 2
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: PUSH
33177: LD_INT 2
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: LD_INT 2
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 1
33196: NEG
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 2
33207: NEG
33208: PUSH
33209: LD_INT 0
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 2
33218: NEG
33219: PUSH
33220: LD_INT 1
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 2
33230: NEG
33231: PUSH
33232: LD_INT 2
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 1
33242: NEG
33243: PUSH
33244: LD_INT 2
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 2
33253: NEG
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 3
33264: NEG
33265: PUSH
33266: LD_INT 1
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 3
33276: NEG
33277: PUSH
33278: LD_INT 2
33280: NEG
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33311: LD_ADDR_VAR 0 28
33315: PUSH
33316: LD_INT 0
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 0
33328: PUSH
33329: LD_INT 1
33331: NEG
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 1
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 1
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 0
33359: PUSH
33360: LD_INT 1
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 1
33369: NEG
33370: PUSH
33371: LD_INT 0
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 1
33380: NEG
33381: PUSH
33382: LD_INT 1
33384: NEG
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 1
33392: NEG
33393: PUSH
33394: LD_INT 2
33396: NEG
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 0
33404: PUSH
33405: LD_INT 2
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 1
33415: PUSH
33416: LD_INT 1
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 2
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 2
33436: PUSH
33437: LD_INT 1
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 2
33446: PUSH
33447: LD_INT 2
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 1
33456: PUSH
33457: LD_INT 2
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 0
33466: PUSH
33467: LD_INT 2
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: LD_INT 1
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 2
33487: NEG
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 2
33498: NEG
33499: PUSH
33500: LD_INT 1
33502: NEG
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 2
33510: NEG
33511: PUSH
33512: LD_INT 2
33514: NEG
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 2
33522: NEG
33523: PUSH
33524: LD_INT 3
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: LD_INT 3
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 3
33546: NEG
33547: PUSH
33548: LD_INT 1
33550: NEG
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 3
33558: NEG
33559: PUSH
33560: LD_INT 2
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33593: LD_ADDR_VAR 0 29
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: LD_INT 0
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 0
33610: PUSH
33611: LD_INT 1
33613: NEG
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: LD_INT 0
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 1
33631: PUSH
33632: LD_INT 1
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 0
33641: PUSH
33642: LD_INT 1
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 1
33651: NEG
33652: PUSH
33653: LD_INT 0
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 1
33662: NEG
33663: PUSH
33664: LD_INT 1
33666: NEG
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 1
33674: NEG
33675: PUSH
33676: LD_INT 2
33678: NEG
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: LD_INT 2
33689: NEG
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 1
33697: PUSH
33698: LD_INT 1
33700: NEG
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 2
33708: PUSH
33709: LD_INT 0
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 2
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 1
33728: PUSH
33729: LD_INT 2
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: LD_INT 2
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 1
33748: NEG
33749: PUSH
33750: LD_INT 1
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 2
33759: NEG
33760: PUSH
33761: LD_INT 1
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 2
33771: NEG
33772: PUSH
33773: LD_INT 2
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 2
33783: NEG
33784: PUSH
33785: LD_INT 3
33787: NEG
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 2
33795: PUSH
33796: LD_INT 1
33798: NEG
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 3
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 1
33816: PUSH
33817: LD_INT 3
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: NEG
33827: PUSH
33828: LD_INT 2
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 3
33837: NEG
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33872: LD_ADDR_VAR 0 30
33876: PUSH
33877: LD_INT 0
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 0
33889: PUSH
33890: LD_INT 1
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 1
33900: PUSH
33901: LD_INT 0
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: PUSH
33911: LD_INT 1
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: LD_INT 1
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: LD_INT 0
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: NEG
33942: PUSH
33943: LD_INT 1
33945: NEG
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 1
33953: NEG
33954: PUSH
33955: LD_INT 2
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: LD_INT 2
33968: NEG
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 2
33987: PUSH
33988: LD_INT 0
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 2
33997: PUSH
33998: LD_INT 1
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 2
34007: PUSH
34008: LD_INT 2
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: PUSH
34018: LD_INT 2
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: NEG
34028: PUSH
34029: LD_INT 1
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 2
34038: NEG
34039: PUSH
34040: LD_INT 0
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 2
34049: NEG
34050: PUSH
34051: LD_INT 1
34053: NEG
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 1
34061: NEG
34062: PUSH
34063: LD_INT 3
34065: NEG
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: LD_INT 2
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 3
34084: PUSH
34085: LD_INT 2
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 2
34094: PUSH
34095: LD_INT 3
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 2
34104: NEG
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 3
34115: NEG
34116: PUSH
34117: LD_INT 1
34119: NEG
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34150: LD_ADDR_VAR 0 31
34154: PUSH
34155: LD_INT 0
34157: PUSH
34158: LD_INT 0
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: LD_INT 1
34170: NEG
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 1
34178: PUSH
34179: LD_INT 0
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 1
34188: PUSH
34189: LD_INT 1
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 0
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 1
34208: NEG
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 1
34219: NEG
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 1
34231: NEG
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: LD_INT 1
34246: NEG
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 2
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 2
34264: PUSH
34265: LD_INT 1
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 2
34274: PUSH
34275: LD_INT 2
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: LD_INT 2
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 0
34294: PUSH
34295: LD_INT 2
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 1
34304: NEG
34305: PUSH
34306: LD_INT 1
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 2
34315: NEG
34316: PUSH
34317: LD_INT 1
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 2
34327: NEG
34328: PUSH
34329: LD_INT 2
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 2
34339: NEG
34340: PUSH
34341: LD_INT 3
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 2
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 3
34362: PUSH
34363: LD_INT 1
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: LD_INT 3
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: NEG
34383: PUSH
34384: LD_INT 2
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 3
34393: NEG
34394: PUSH
34395: LD_INT 2
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34428: LD_ADDR_VAR 0 32
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: LD_INT 0
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 0
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 1
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: LD_INT 1
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: LD_INT 1
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 1
34486: NEG
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: NEG
34498: PUSH
34499: LD_INT 1
34501: NEG
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 1
34509: NEG
34510: PUSH
34511: LD_INT 2
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: LD_INT 2
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 1
34532: PUSH
34533: LD_INT 1
34535: NEG
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 2
34543: PUSH
34544: LD_INT 1
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 2
34553: PUSH
34554: LD_INT 2
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: LD_INT 2
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: LD_INT 2
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 1
34583: NEG
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 2
34594: NEG
34595: PUSH
34596: LD_INT 0
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 2
34605: NEG
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 1
34617: NEG
34618: PUSH
34619: LD_INT 3
34621: NEG
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 1
34629: PUSH
34630: LD_INT 2
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 3
34640: PUSH
34641: LD_INT 2
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 2
34650: PUSH
34651: LD_INT 3
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 2
34660: NEG
34661: PUSH
34662: LD_INT 1
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 3
34671: NEG
34672: PUSH
34673: LD_INT 1
34675: NEG
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34706: LD_ADDR_VAR 0 33
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: LD_INT 0
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 1
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: LD_INT 1
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 0
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 1
34764: NEG
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 1
34775: NEG
34776: PUSH
34777: LD_INT 1
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PUSH
34789: LD_INT 2
34791: NEG
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 1
34799: PUSH
34800: LD_INT 1
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 2
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: LD_INT 1
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 1
34830: PUSH
34831: LD_INT 2
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 0
34840: PUSH
34841: LD_INT 2
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 1
34850: NEG
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 2
34861: NEG
34862: PUSH
34863: LD_INT 0
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 2
34872: NEG
34873: PUSH
34874: LD_INT 1
34876: NEG
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 2
34884: NEG
34885: PUSH
34886: LD_INT 2
34888: NEG
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 2
34896: NEG
34897: PUSH
34898: LD_INT 3
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 2
34908: PUSH
34909: LD_INT 1
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 3
34919: PUSH
34920: LD_INT 1
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: PUSH
34930: LD_INT 3
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: NEG
34940: PUSH
34941: LD_INT 2
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 3
34950: NEG
34951: PUSH
34952: LD_INT 2
34954: NEG
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34985: LD_ADDR_VAR 0 34
34989: PUSH
34990: LD_INT 0
34992: PUSH
34993: LD_INT 0
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 0
35002: PUSH
35003: LD_INT 1
35005: NEG
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: LD_INT 0
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 1
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 0
35033: PUSH
35034: LD_INT 1
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 1
35043: NEG
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 1
35054: NEG
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 1
35066: NEG
35067: PUSH
35068: LD_INT 2
35070: NEG
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: LD_INT 2
35081: NEG
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 1
35089: PUSH
35090: LD_INT 1
35092: NEG
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 2
35100: PUSH
35101: LD_INT 1
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: LD_INT 2
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 1
35120: PUSH
35121: LD_INT 2
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 1
35130: NEG
35131: PUSH
35132: LD_INT 1
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 2
35141: NEG
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 2
35152: NEG
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 2
35164: NEG
35165: PUSH
35166: LD_INT 2
35168: NEG
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 1
35176: NEG
35177: PUSH
35178: LD_INT 3
35180: NEG
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: LD_INT 2
35191: NEG
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 3
35199: PUSH
35200: LD_INT 2
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 2
35209: PUSH
35210: LD_INT 3
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 2
35219: NEG
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 3
35230: NEG
35231: PUSH
35232: LD_INT 1
35234: NEG
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35265: LD_ADDR_VAR 0 35
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: LD_INT 0
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 0
35282: PUSH
35283: LD_INT 1
35285: NEG
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: LD_INT 0
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: LD_INT 1
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 0
35313: PUSH
35314: LD_INT 1
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: LD_INT 0
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 1
35334: NEG
35335: PUSH
35336: LD_INT 1
35338: NEG
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 2
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 2
35356: NEG
35357: PUSH
35358: LD_INT 1
35360: NEG
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35377: LD_ADDR_VAR 0 36
35381: PUSH
35382: LD_INT 0
35384: PUSH
35385: LD_INT 0
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 0
35394: PUSH
35395: LD_INT 1
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 0
35425: PUSH
35426: LD_INT 1
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 1
35435: NEG
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: NEG
35447: PUSH
35448: LD_INT 1
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: LD_INT 2
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: LD_INT 2
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35489: LD_ADDR_VAR 0 37
35493: PUSH
35494: LD_INT 0
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 0
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: LD_INT 1
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 0
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 1
35547: NEG
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 1
35558: NEG
35559: PUSH
35560: LD_INT 1
35562: NEG
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 1
35570: PUSH
35571: LD_INT 1
35573: NEG
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 1
35581: NEG
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35601: LD_ADDR_VAR 0 38
35605: PUSH
35606: LD_INT 0
35608: PUSH
35609: LD_INT 0
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 0
35618: PUSH
35619: LD_INT 1
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 1
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 1
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 0
35649: PUSH
35650: LD_INT 1
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 1
35659: NEG
35660: PUSH
35661: LD_INT 0
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: NEG
35671: PUSH
35672: LD_INT 1
35674: NEG
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 2
35692: NEG
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35713: LD_ADDR_VAR 0 39
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: LD_INT 1
35733: NEG
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 1
35741: PUSH
35742: LD_INT 0
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: LD_INT 1
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 1
35771: NEG
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: LD_INT 1
35786: NEG
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 1
35794: NEG
35795: PUSH
35796: LD_INT 2
35798: NEG
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 1
35806: PUSH
35807: LD_INT 2
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35825: LD_ADDR_VAR 0 40
35829: PUSH
35830: LD_INT 0
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: LD_INT 1
35845: NEG
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 1
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 1
35883: NEG
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: LD_INT 1
35898: NEG
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 1
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 1
35917: NEG
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35937: LD_ADDR_VAR 0 41
35941: PUSH
35942: LD_INT 0
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: LD_INT 1
35957: NEG
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 1
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: LD_INT 1
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 0
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: NEG
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 1
36006: NEG
36007: PUSH
36008: LD_INT 1
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 1
36018: NEG
36019: PUSH
36020: LD_INT 2
36022: NEG
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: LD_INT 1
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 2
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 2
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 2
36061: PUSH
36062: LD_INT 2
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: LD_INT 2
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 1
36081: NEG
36082: PUSH
36083: LD_INT 1
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 2
36092: NEG
36093: PUSH
36094: LD_INT 0
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 2
36103: NEG
36104: PUSH
36105: LD_INT 1
36107: NEG
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 2
36115: NEG
36116: PUSH
36117: LD_INT 2
36119: NEG
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 2
36127: NEG
36128: PUSH
36129: LD_INT 3
36131: NEG
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 2
36139: PUSH
36140: LD_INT 1
36142: NEG
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 3
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 3
36160: PUSH
36161: LD_INT 1
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 3
36170: PUSH
36171: LD_INT 2
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 3
36180: PUSH
36181: LD_INT 3
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 2
36190: PUSH
36191: LD_INT 3
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 2
36200: NEG
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 3
36211: NEG
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 3
36222: NEG
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 3
36234: NEG
36235: PUSH
36236: LD_INT 2
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 3
36246: NEG
36247: PUSH
36248: LD_INT 3
36250: NEG
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36287: LD_ADDR_VAR 0 42
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 0
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: NEG
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: NEG
36357: PUSH
36358: LD_INT 1
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: LD_INT 2
36372: NEG
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: LD_INT 2
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: LD_INT 1
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 2
36402: PUSH
36403: LD_INT 1
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 2
36412: PUSH
36413: LD_INT 2
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: LD_INT 2
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 0
36432: PUSH
36433: LD_INT 2
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 1
36442: NEG
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: NEG
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 2
36465: NEG
36466: PUSH
36467: LD_INT 2
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 2
36477: NEG
36478: PUSH
36479: LD_INT 3
36481: NEG
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 1
36489: NEG
36490: PUSH
36491: LD_INT 3
36493: NEG
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: LD_INT 3
36504: NEG
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: LD_INT 2
36515: NEG
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 3
36523: PUSH
36524: LD_INT 2
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 3
36533: PUSH
36534: LD_INT 3
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 2
36543: PUSH
36544: LD_INT 3
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 3
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 3
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 1
36573: NEG
36574: PUSH
36575: LD_INT 2
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 3
36584: NEG
36585: PUSH
36586: LD_INT 2
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 3
36596: NEG
36597: PUSH
36598: LD_INT 3
36600: NEG
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36637: LD_ADDR_VAR 0 43
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: LD_INT 0
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 1
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: LD_INT 2
36722: NEG
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: LD_INT 2
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: LD_INT 1
36744: NEG
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 2
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 2
36762: PUSH
36763: LD_INT 1
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: PUSH
36773: LD_INT 2
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 0
36782: PUSH
36783: LD_INT 2
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 2
36803: NEG
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 2
36814: NEG
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: LD_INT 3
36830: NEG
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 0
36838: PUSH
36839: LD_INT 3
36841: NEG
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 1
36849: PUSH
36850: LD_INT 2
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 2
36860: PUSH
36861: LD_INT 1
36863: NEG
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 3
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 3
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: LD_INT 3
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: LD_INT 3
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: LD_INT 2
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 2
36922: NEG
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 3
36933: NEG
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 3
36944: NEG
36945: PUSH
36946: LD_INT 1
36948: NEG
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36985: LD_ADDR_VAR 0 44
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 0
37002: PUSH
37003: LD_INT 1
37005: NEG
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 1
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 0
37033: PUSH
37034: LD_INT 1
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 1
37043: NEG
37044: PUSH
37045: LD_INT 0
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: LD_INT 1
37058: NEG
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: NEG
37067: PUSH
37068: LD_INT 2
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: PUSH
37079: LD_INT 1
37081: NEG
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 2
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 2
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 2
37109: PUSH
37110: LD_INT 2
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 1
37119: PUSH
37120: LD_INT 2
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 1
37129: NEG
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 2
37140: NEG
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 2
37151: NEG
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 2
37163: NEG
37164: PUSH
37165: LD_INT 2
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: LD_INT 3
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 2
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 3
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 3
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 3
37218: PUSH
37219: LD_INT 2
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 3
37228: PUSH
37229: LD_INT 3
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 2
37238: PUSH
37239: LD_INT 3
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 2
37248: NEG
37249: PUSH
37250: LD_INT 1
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 3
37259: NEG
37260: PUSH
37261: LD_INT 0
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 3
37270: NEG
37271: PUSH
37272: LD_INT 1
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 3
37282: NEG
37283: PUSH
37284: LD_INT 2
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 3
37294: NEG
37295: PUSH
37296: LD_INT 3
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37335: LD_ADDR_VAR 0 45
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 0
37352: PUSH
37353: LD_INT 1
37355: NEG
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 1
37363: PUSH
37364: LD_INT 0
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 1
37373: PUSH
37374: LD_INT 1
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 0
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 1
37393: NEG
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 1
37404: NEG
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: PUSH
37418: LD_INT 2
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 0
37428: PUSH
37429: LD_INT 2
37431: NEG
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: PUSH
37440: LD_INT 1
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 2
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 2
37460: PUSH
37461: LD_INT 2
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 1
37470: PUSH
37471: LD_INT 2
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: LD_INT 2
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 1
37490: NEG
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 2
37501: NEG
37502: PUSH
37503: LD_INT 1
37505: NEG
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 2
37513: NEG
37514: PUSH
37515: LD_INT 2
37517: NEG
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 2
37525: NEG
37526: PUSH
37527: LD_INT 3
37529: NEG
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 1
37537: NEG
37538: PUSH
37539: LD_INT 3
37541: NEG
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: LD_INT 3
37552: NEG
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: LD_INT 2
37563: NEG
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 3
37571: PUSH
37572: LD_INT 2
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 3
37581: PUSH
37582: LD_INT 3
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 2
37591: PUSH
37592: LD_INT 3
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 1
37601: PUSH
37602: LD_INT 3
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: LD_INT 3
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 1
37621: NEG
37622: PUSH
37623: LD_INT 2
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 3
37632: NEG
37633: PUSH
37634: LD_INT 2
37636: NEG
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 3
37644: NEG
37645: PUSH
37646: LD_INT 3
37648: NEG
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37685: LD_ADDR_VAR 0 46
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: LD_INT 1
37705: NEG
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 1
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 1
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: LD_INT 1
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 1
37743: NEG
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: LD_INT 2
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 0
37778: PUSH
37779: LD_INT 2
37781: NEG
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 1
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 2
37800: PUSH
37801: LD_INT 0
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 2
37810: PUSH
37811: LD_INT 1
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: PUSH
37821: LD_INT 2
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: LD_INT 2
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: LD_INT 1
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 2
37851: NEG
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 2
37862: NEG
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 1
37874: NEG
37875: PUSH
37876: LD_INT 3
37878: NEG
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: LD_INT 3
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: LD_INT 2
37900: NEG
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 2
37908: PUSH
37909: LD_INT 1
37911: NEG
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 3
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 3
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 1
37939: PUSH
37940: LD_INT 3
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: LD_INT 3
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 1
37959: NEG
37960: PUSH
37961: LD_INT 2
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 2
37970: NEG
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 3
37981: NEG
37982: PUSH
37983: LD_INT 0
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 3
37992: NEG
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38033: LD_ADDR_VAR 0 47
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: LD_INT 0
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 1
38114: NEG
38115: PUSH
38116: LD_INT 2
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: LD_INT 2
38129: NEG
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 1
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 2
38148: NEG
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 2
38160: NEG
38161: PUSH
38162: LD_INT 2
38164: NEG
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38184: LD_ADDR_VAR 0 48
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 0
38201: PUSH
38202: LD_INT 1
38204: NEG
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 0
38232: PUSH
38233: LD_INT 1
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: PUSH
38244: LD_INT 0
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 1
38253: NEG
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 1
38265: NEG
38266: PUSH
38267: LD_INT 2
38269: NEG
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: LD_INT 2
38280: NEG
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 1
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 2
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 2
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38331: LD_ADDR_VAR 0 49
38335: PUSH
38336: LD_INT 0
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 1
38369: PUSH
38370: LD_INT 1
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: LD_INT 1
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 1
38389: NEG
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 1
38400: NEG
38401: PUSH
38402: LD_INT 1
38404: NEG
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 1
38412: PUSH
38413: LD_INT 1
38415: NEG
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 2
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 2
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 2
38443: PUSH
38444: LD_INT 2
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 1
38453: PUSH
38454: LD_INT 2
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38475: LD_ADDR_VAR 0 50
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 1
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 1
38544: NEG
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 2
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: LD_INT 2
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: PUSH
38577: LD_INT 2
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 0
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 1
38596: NEG
38597: PUSH
38598: LD_INT 1
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38619: LD_ADDR_VAR 0 51
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: LD_INT 0
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 0
38636: PUSH
38637: LD_INT 1
38639: NEG
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 1
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: NEG
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 1
38700: PUSH
38701: LD_INT 2
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: LD_INT 2
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 1
38720: NEG
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 2
38731: NEG
38732: PUSH
38733: LD_INT 0
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 2
38742: NEG
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38766: LD_ADDR_VAR 0 52
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: LD_INT 1
38786: NEG
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 0
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 1
38824: NEG
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: PUSH
38837: LD_INT 1
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: LD_INT 2
38851: NEG
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: NEG
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 2
38870: NEG
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 2
38881: NEG
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 2
38893: NEG
38894: PUSH
38895: LD_INT 2
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38917: LD_ADDR_VAR 0 53
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 1
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 1
38986: NEG
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: LD_INT 2
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 2
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 2
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 2
39052: PUSH
39053: LD_INT 2
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: LD_INT 2
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 0
39072: PUSH
39073: LD_INT 2
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: NEG
39083: PUSH
39084: LD_INT 1
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 2
39093: NEG
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 2
39104: NEG
39105: PUSH
39106: LD_INT 1
39108: NEG
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 2
39116: NEG
39117: PUSH
39118: LD_INT 2
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39147: LD_ADDR_VAR 0 54
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: LD_INT 1
39167: NEG
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: LD_INT 0
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: LD_INT 1
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: NEG
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 0
39240: PUSH
39241: LD_INT 2
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 1
39251: PUSH
39252: LD_INT 1
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 2
39272: PUSH
39273: LD_INT 1
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 2
39282: PUSH
39283: LD_INT 2
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: PUSH
39293: LD_INT 2
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: LD_INT 2
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PUSH
39314: LD_INT 1
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 2
39323: NEG
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 2
39334: NEG
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 2
39346: NEG
39347: PUSH
39348: LD_INT 2
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39377: LD_ADDR_VAR 0 55
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: LD_INT 1
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 1
39458: NEG
39459: PUSH
39460: LD_INT 2
39462: NEG
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: LD_INT 2
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 2
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 2
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 2
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 0
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 1
39542: NEG
39543: PUSH
39544: LD_INT 1
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 2
39553: NEG
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 2
39564: NEG
39565: PUSH
39566: LD_INT 1
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: NEG
39577: PUSH
39578: LD_INT 2
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39607: LD_ADDR_VAR 0 56
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 1
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 1
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: LD_INT 2
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: LD_INT 2
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 2
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 2
39742: PUSH
39743: LD_INT 2
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: LD_INT 2
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 2
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 1
39772: NEG
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 2
39783: NEG
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 2
39806: NEG
39807: PUSH
39808: LD_INT 2
39810: NEG
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39837: LD_ADDR_VAR 0 57
39841: PUSH
39842: LD_INT 0
39844: PUSH
39845: LD_INT 0
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: LD_INT 1
39857: NEG
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 1
39875: PUSH
39876: LD_INT 1
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: LD_INT 2
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 2
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 2
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: LD_INT 2
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: LD_INT 2
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 1
40002: NEG
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 2
40013: NEG
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: NEG
40025: PUSH
40026: LD_INT 1
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 2
40036: NEG
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40067: LD_ADDR_VAR 0 58
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: LD_INT 0
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 0
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 1
40105: PUSH
40106: LD_INT 1
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: LD_INT 1
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: NEG
40149: PUSH
40150: LD_INT 2
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: LD_INT 2
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 2
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 2
40192: PUSH
40193: LD_INT 1
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 2
40202: PUSH
40203: LD_INT 2
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: LD_INT 2
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: LD_INT 2
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 1
40232: NEG
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: NEG
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 2
40254: NEG
40255: PUSH
40256: LD_INT 1
40258: NEG
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: LD_INT 2
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40297: LD_ADDR_VAR 0 59
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40385: LD_ADDR_VAR 0 60
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: NEG
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: NEG
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40473: LD_ADDR_VAR 0 61
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: LD_INT 1
40493: NEG
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40561: LD_ADDR_VAR 0 62
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40649: LD_ADDR_VAR 0 63
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 1
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 0
40697: PUSH
40698: LD_INT 1
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: NEG
40719: PUSH
40720: LD_INT 1
40722: NEG
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40737: LD_ADDR_VAR 0 64
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: ST_TO_ADDR
// end ; 1 :
40825: GO 46722
40827: LD_INT 1
40829: DOUBLE
40830: EQUAL
40831: IFTRUE 40835
40833: GO 43458
40835: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40836: LD_ADDR_VAR 0 11
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: LD_INT 3
40847: NEG
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: LD_INT 3
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: LD_INT 2
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: LIST
40879: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40880: LD_ADDR_VAR 0 12
40884: PUSH
40885: LD_INT 2
40887: PUSH
40888: LD_INT 1
40890: NEG
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 3
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 3
40908: PUSH
40909: LD_INT 1
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: LIST
40920: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40921: LD_ADDR_VAR 0 13
40925: PUSH
40926: LD_INT 3
40928: PUSH
40929: LD_INT 2
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 3
40938: PUSH
40939: LD_INT 3
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 2
40948: PUSH
40949: LD_INT 3
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: LIST
40960: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40961: LD_ADDR_VAR 0 14
40965: PUSH
40966: LD_INT 1
40968: PUSH
40969: LD_INT 3
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: LD_INT 3
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: LIST
41001: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41002: LD_ADDR_VAR 0 15
41006: PUSH
41007: LD_INT 2
41009: NEG
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 3
41020: NEG
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 3
41031: NEG
41032: PUSH
41033: LD_INT 1
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: LIST
41045: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41046: LD_ADDR_VAR 0 16
41050: PUSH
41051: LD_INT 2
41053: NEG
41054: PUSH
41055: LD_INT 3
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 3
41065: NEG
41066: PUSH
41067: LD_INT 2
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 3
41077: NEG
41078: PUSH
41079: LD_INT 3
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: LIST
41091: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41092: LD_ADDR_VAR 0 17
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 3
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: LD_INT 3
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: LD_INT 2
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: LIST
41135: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41136: LD_ADDR_VAR 0 18
41140: PUSH
41141: LD_INT 2
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 3
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 3
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: LIST
41176: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41177: LD_ADDR_VAR 0 19
41181: PUSH
41182: LD_INT 3
41184: PUSH
41185: LD_INT 2
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 3
41194: PUSH
41195: LD_INT 3
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 2
41204: PUSH
41205: LD_INT 3
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: LIST
41216: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41217: LD_ADDR_VAR 0 20
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: LD_INT 3
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: LD_INT 3
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: LIST
41257: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41258: LD_ADDR_VAR 0 21
41262: PUSH
41263: LD_INT 2
41265: NEG
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 3
41276: NEG
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 3
41287: NEG
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: LIST
41301: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41302: LD_ADDR_VAR 0 22
41306: PUSH
41307: LD_INT 2
41309: NEG
41310: PUSH
41311: LD_INT 3
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 3
41321: NEG
41322: PUSH
41323: LD_INT 2
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 3
41333: NEG
41334: PUSH
41335: LD_INT 3
41337: NEG
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: LIST
41347: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41348: LD_ADDR_VAR 0 23
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: LD_INT 3
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: LD_INT 4
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: LD_INT 3
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: LIST
41391: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41392: LD_ADDR_VAR 0 24
41396: PUSH
41397: LD_INT 3
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 3
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 4
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: LIST
41432: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41433: LD_ADDR_VAR 0 25
41437: PUSH
41438: LD_INT 3
41440: PUSH
41441: LD_INT 3
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 4
41450: PUSH
41451: LD_INT 3
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 3
41460: PUSH
41461: LD_INT 4
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: LIST
41472: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41473: LD_ADDR_VAR 0 26
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: LD_INT 3
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: LD_INT 4
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: LD_INT 3
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: LIST
41513: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41514: LD_ADDR_VAR 0 27
41518: PUSH
41519: LD_INT 3
41521: NEG
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 3
41532: NEG
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 4
41543: NEG
41544: PUSH
41545: LD_INT 1
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: LIST
41557: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41558: LD_ADDR_VAR 0 28
41562: PUSH
41563: LD_INT 3
41565: NEG
41566: PUSH
41567: LD_INT 3
41569: NEG
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 3
41577: NEG
41578: PUSH
41579: LD_INT 4
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 4
41589: NEG
41590: PUSH
41591: LD_INT 3
41593: NEG
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: LIST
41603: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41604: LD_ADDR_VAR 0 29
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: LD_INT 3
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: LD_INT 3
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: LD_INT 2
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: LD_INT 4
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: LD_INT 4
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: LD_INT 3
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: NEG
41680: PUSH
41681: LD_INT 5
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: LD_INT 5
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: LD_INT 4
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: LD_INT 6
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: LD_INT 6
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: LD_INT 5
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
41759: LD_ADDR_VAR 0 30
41763: PUSH
41764: LD_INT 2
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 3
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 3
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 3
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 4
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 4
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 4
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 5
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 5
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 5
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 6
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 6
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
41902: LD_ADDR_VAR 0 31
41906: PUSH
41907: LD_INT 3
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 3
41919: PUSH
41920: LD_INT 3
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: LD_INT 3
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 4
41939: PUSH
41940: LD_INT 3
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 4
41949: PUSH
41950: LD_INT 4
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 3
41959: PUSH
41960: LD_INT 4
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 5
41969: PUSH
41970: LD_INT 4
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 5
41979: PUSH
41980: LD_INT 5
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 4
41989: PUSH
41990: LD_INT 5
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 6
41999: PUSH
42000: LD_INT 5
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 6
42009: PUSH
42010: LD_INT 6
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 5
42019: PUSH
42020: LD_INT 6
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42041: LD_ADDR_VAR 0 32
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: LD_INT 3
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: LD_INT 3
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: LD_INT 2
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: LD_INT 4
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: LD_INT 4
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: LD_INT 3
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 5
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 5
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: LD_INT 4
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: LD_INT 6
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 6
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: LD_INT 5
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42184: LD_ADDR_VAR 0 33
42188: PUSH
42189: LD_INT 2
42191: NEG
42192: PUSH
42193: LD_INT 1
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 3
42202: NEG
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 3
42213: NEG
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 3
42225: NEG
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 4
42236: NEG
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 4
42247: NEG
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 4
42259: NEG
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 5
42270: NEG
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 5
42281: NEG
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 5
42293: NEG
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 6
42304: NEG
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 6
42315: NEG
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42339: LD_ADDR_VAR 0 34
42343: PUSH
42344: LD_INT 2
42346: NEG
42347: PUSH
42348: LD_INT 3
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 3
42358: NEG
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 3
42370: NEG
42371: PUSH
42372: LD_INT 3
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 3
42382: NEG
42383: PUSH
42384: LD_INT 4
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 4
42394: NEG
42395: PUSH
42396: LD_INT 3
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 4
42406: NEG
42407: PUSH
42408: LD_INT 4
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 4
42418: NEG
42419: PUSH
42420: LD_INT 5
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 5
42430: NEG
42431: PUSH
42432: LD_INT 4
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 5
42442: NEG
42443: PUSH
42444: LD_INT 5
42446: NEG
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 5
42454: NEG
42455: PUSH
42456: LD_INT 6
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 6
42466: NEG
42467: PUSH
42468: LD_INT 5
42470: NEG
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 6
42478: NEG
42479: PUSH
42480: LD_INT 6
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42502: LD_ADDR_VAR 0 41
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: LD_INT 2
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: LD_INT 3
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: LD_INT 2
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: LIST
42545: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42546: LD_ADDR_VAR 0 42
42550: PUSH
42551: LD_INT 2
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 3
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: LIST
42586: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42587: LD_ADDR_VAR 0 43
42591: PUSH
42592: LD_INT 2
42594: PUSH
42595: LD_INT 2
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 3
42604: PUSH
42605: LD_INT 2
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 2
42614: PUSH
42615: LD_INT 3
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: LIST
42626: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42627: LD_ADDR_VAR 0 44
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: LD_INT 2
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: LD_INT 3
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: LD_INT 2
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: LIST
42667: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42668: LD_ADDR_VAR 0 45
42672: PUSH
42673: LD_INT 2
42675: NEG
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 2
42686: NEG
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 3
42697: NEG
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: LIST
42711: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
42712: LD_ADDR_VAR 0 46
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: LD_INT 2
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 2
42731: NEG
42732: PUSH
42733: LD_INT 3
42735: NEG
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 3
42743: NEG
42744: PUSH
42745: LD_INT 2
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: LIST
42757: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
42758: LD_ADDR_VAR 0 47
42762: PUSH
42763: LD_INT 2
42765: NEG
42766: PUSH
42767: LD_INT 3
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: LD_INT 3
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42791: LD_ADDR_VAR 0 48
42795: PUSH
42796: LD_INT 1
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 2
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
42822: LD_ADDR_VAR 0 49
42826: PUSH
42827: LD_INT 3
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 3
42839: PUSH
42840: LD_INT 2
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
42851: LD_ADDR_VAR 0 50
42855: PUSH
42856: LD_INT 2
42858: PUSH
42859: LD_INT 3
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: LD_INT 3
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42880: LD_ADDR_VAR 0 51
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: LD_INT 2
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 2
42898: NEG
42899: PUSH
42900: LD_INT 1
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42911: LD_ADDR_VAR 0 52
42915: PUSH
42916: LD_INT 3
42918: NEG
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 3
42930: NEG
42931: PUSH
42932: LD_INT 2
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42944: LD_ADDR_VAR 0 53
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: LD_INT 3
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 3
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: LD_INT 2
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: LIST
42987: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42988: LD_ADDR_VAR 0 54
42992: PUSH
42993: LD_INT 2
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 3
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 3
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: LIST
43028: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43029: LD_ADDR_VAR 0 55
43033: PUSH
43034: LD_INT 3
43036: PUSH
43037: LD_INT 2
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 3
43046: PUSH
43047: LD_INT 3
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 2
43056: PUSH
43057: LD_INT 3
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: LIST
43068: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43069: LD_ADDR_VAR 0 56
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: LD_INT 3
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: LD_INT 3
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: LD_INT 2
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43110: LD_ADDR_VAR 0 57
43114: PUSH
43115: LD_INT 2
43117: NEG
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 3
43128: NEG
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 3
43139: NEG
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: LIST
43153: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43154: LD_ADDR_VAR 0 58
43158: PUSH
43159: LD_INT 2
43161: NEG
43162: PUSH
43163: LD_INT 3
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 3
43173: NEG
43174: PUSH
43175: LD_INT 2
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 3
43185: NEG
43186: PUSH
43187: LD_INT 3
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: LIST
43199: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43200: LD_ADDR_VAR 0 59
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: LD_INT 2
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: LD_INT 2
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43244: LD_ADDR_VAR 0 60
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 2
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: LIST
43284: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43285: LD_ADDR_VAR 0 61
43289: PUSH
43290: LD_INT 2
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: LD_INT 2
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43325: LD_ADDR_VAR 0 62
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: LIST
43365: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43366: LD_ADDR_VAR 0 63
43370: PUSH
43371: LD_INT 1
43373: NEG
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 2
43384: NEG
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 2
43395: NEG
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: LIST
43409: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43410: LD_ADDR_VAR 0 64
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 2
43429: NEG
43430: PUSH
43431: LD_INT 1
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 2
43441: NEG
43442: PUSH
43443: LD_INT 2
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: LIST
43455: ST_TO_ADDR
// end ; 2 :
43456: GO 46722
43458: LD_INT 2
43460: DOUBLE
43461: EQUAL
43462: IFTRUE 43466
43464: GO 46721
43466: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43467: LD_ADDR_VAR 0 29
43471: PUSH
43472: LD_INT 4
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 4
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 5
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 5
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 4
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 3
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 3
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 3
43546: PUSH
43547: LD_INT 2
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 5
43557: PUSH
43558: LD_INT 2
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 3
43567: PUSH
43568: LD_INT 3
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 3
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 4
43587: PUSH
43588: LD_INT 3
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 4
43597: PUSH
43598: LD_INT 4
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 3
43607: PUSH
43608: LD_INT 4
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 2
43617: PUSH
43618: LD_INT 3
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 2
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 4
43637: PUSH
43638: LD_INT 2
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: LD_INT 4
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: LD_INT 4
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: LD_INT 3
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: LD_INT 4
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: LD_INT 5
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 0
43697: PUSH
43698: LD_INT 5
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 1
43707: NEG
43708: PUSH
43709: LD_INT 4
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PUSH
43720: LD_INT 3
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: LD_INT 5
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 2
43739: NEG
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 3
43750: NEG
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 3
43761: NEG
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 3
43795: NEG
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 4
43806: NEG
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 4
43817: NEG
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 4
43829: NEG
43830: PUSH
43831: LD_INT 2
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 2
43841: NEG
43842: PUSH
43843: LD_INT 2
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 4
43852: NEG
43853: PUSH
43854: LD_INT 4
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 4
43864: NEG
43865: PUSH
43866: LD_INT 5
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 3
43876: NEG
43877: PUSH
43878: LD_INT 4
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 3
43888: NEG
43889: PUSH
43890: LD_INT 3
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 4
43900: NEG
43901: PUSH
43902: LD_INT 3
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 5
43912: NEG
43913: PUSH
43914: LD_INT 4
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 5
43924: NEG
43925: PUSH
43926: LD_INT 5
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 3
43936: NEG
43937: PUSH
43938: LD_INT 5
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 5
43948: NEG
43949: PUSH
43950: LD_INT 3
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44005: LD_ADDR_VAR 0 30
44009: PUSH
44010: LD_INT 4
44012: PUSH
44013: LD_INT 4
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 4
44022: PUSH
44023: LD_INT 3
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 5
44032: PUSH
44033: LD_INT 4
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 5
44042: PUSH
44043: LD_INT 5
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 4
44052: PUSH
44053: LD_INT 5
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 3
44062: PUSH
44063: LD_INT 4
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 3
44072: PUSH
44073: LD_INT 3
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 5
44082: PUSH
44083: LD_INT 3
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 3
44092: PUSH
44093: LD_INT 5
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: LD_INT 3
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: LD_INT 3
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: LD_INT 4
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: LD_INT 4
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: LD_INT 3
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: LD_INT 4
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 2
44184: NEG
44185: PUSH
44186: LD_INT 2
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 4
44195: NEG
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 4
44206: NEG
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 3
44218: NEG
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 3
44229: NEG
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 4
44240: NEG
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 5
44251: NEG
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 5
44262: NEG
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 5
44274: NEG
44275: PUSH
44276: LD_INT 2
44278: NEG
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 3
44286: NEG
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 3
44297: NEG
44298: PUSH
44299: LD_INT 3
44301: NEG
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 3
44309: NEG
44310: PUSH
44311: LD_INT 4
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 2
44321: NEG
44322: PUSH
44323: LD_INT 3
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: NEG
44334: PUSH
44335: LD_INT 2
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 3
44345: NEG
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 4
44357: NEG
44358: PUSH
44359: LD_INT 3
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 4
44369: NEG
44370: PUSH
44371: LD_INT 4
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 2
44381: NEG
44382: PUSH
44383: LD_INT 4
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 4
44393: NEG
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: LD_INT 4
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: LD_INT 5
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: LD_INT 4
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: LD_INT 3
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: LD_INT 3
44452: NEG
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: LD_INT 4
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: LD_INT 5
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 2
44484: PUSH
44485: LD_INT 3
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 2
44495: NEG
44496: PUSH
44497: LD_INT 5
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44552: LD_ADDR_VAR 0 31
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 4
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: LD_INT 3
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: LD_INT 4
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: LD_INT 5
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: LD_INT 5
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: LD_INT 4
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 1
44620: NEG
44621: PUSH
44622: LD_INT 3
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 2
44631: PUSH
44632: LD_INT 5
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 2
44641: NEG
44642: PUSH
44643: LD_INT 3
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 3
44652: NEG
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 3
44663: NEG
44664: PUSH
44665: LD_INT 1
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: NEG
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: NEG
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 3
44697: NEG
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 4
44708: NEG
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 4
44719: NEG
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 4
44731: NEG
44732: PUSH
44733: LD_INT 2
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 4
44754: NEG
44755: PUSH
44756: LD_INT 4
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 4
44766: NEG
44767: PUSH
44768: LD_INT 5
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 3
44778: NEG
44779: PUSH
44780: LD_INT 4
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 3
44790: NEG
44791: PUSH
44792: LD_INT 3
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 4
44802: NEG
44803: PUSH
44804: LD_INT 3
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 5
44814: NEG
44815: PUSH
44816: LD_INT 4
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 5
44826: NEG
44827: PUSH
44828: LD_INT 5
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 3
44838: NEG
44839: PUSH
44840: LD_INT 5
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 5
44850: NEG
44851: PUSH
44852: LD_INT 3
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: LD_INT 3
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: LD_INT 4
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: LD_INT 3
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: LD_INT 3
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: NEG
44930: PUSH
44931: LD_INT 4
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: LD_INT 2
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: LD_INT 4
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 4
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 4
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 5
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 5
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 4
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 3
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 3
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 3
45036: PUSH
45037: LD_INT 2
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 5
45047: PUSH
45048: LD_INT 2
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45102: LD_ADDR_VAR 0 32
45106: PUSH
45107: LD_INT 4
45109: NEG
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 4
45120: NEG
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 3
45132: NEG
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 3
45143: NEG
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 4
45154: NEG
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 5
45165: NEG
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 5
45176: NEG
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 5
45188: NEG
45189: PUSH
45190: LD_INT 2
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 3
45200: NEG
45201: PUSH
45202: LD_INT 2
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 3
45211: NEG
45212: PUSH
45213: LD_INT 3
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 3
45223: NEG
45224: PUSH
45225: LD_INT 4
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: LD_INT 3
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 2
45247: NEG
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 3
45259: NEG
45260: PUSH
45261: LD_INT 2
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 4
45271: NEG
45272: PUSH
45273: LD_INT 3
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 4
45283: NEG
45284: PUSH
45285: LD_INT 4
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 2
45295: NEG
45296: PUSH
45297: LD_INT 4
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 4
45307: NEG
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: LD_INT 4
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: LD_INT 5
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 4
45344: NEG
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: LD_INT 3
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 3
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: LD_INT 4
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: LD_INT 5
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: LD_INT 3
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 2
45409: NEG
45410: PUSH
45411: LD_INT 5
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 3
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 3
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 4
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 4
45452: PUSH
45453: LD_INT 1
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 3
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 2
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 4
45504: PUSH
45505: LD_INT 2
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 4
45514: PUSH
45515: LD_INT 4
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 4
45524: PUSH
45525: LD_INT 3
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 5
45534: PUSH
45535: LD_INT 4
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 5
45544: PUSH
45545: LD_INT 5
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 4
45554: PUSH
45555: LD_INT 5
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 3
45564: PUSH
45565: LD_INT 4
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 3
45574: PUSH
45575: LD_INT 3
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 5
45584: PUSH
45585: LD_INT 3
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 3
45594: PUSH
45595: LD_INT 5
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
45649: LD_ADDR_VAR 0 33
45653: PUSH
45654: LD_INT 4
45656: NEG
45657: PUSH
45658: LD_INT 4
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 4
45668: NEG
45669: PUSH
45670: LD_INT 5
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 3
45680: NEG
45681: PUSH
45682: LD_INT 4
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 3
45692: NEG
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 4
45704: NEG
45705: PUSH
45706: LD_INT 3
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 5
45716: NEG
45717: PUSH
45718: LD_INT 4
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 5
45728: NEG
45729: PUSH
45730: LD_INT 5
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 3
45740: NEG
45741: PUSH
45742: LD_INT 5
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 5
45752: NEG
45753: PUSH
45754: LD_INT 3
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 3
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 4
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: LD_INT 3
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 2
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: LD_INT 2
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: LD_INT 3
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: LD_INT 4
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 2
45843: PUSH
45844: LD_INT 2
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: LD_INT 4
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 4
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 4
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 5
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 5
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 4
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 3
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 3
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 3
45938: PUSH
45939: LD_INT 2
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 5
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 3
45959: PUSH
45960: LD_INT 3
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 3
45969: PUSH
45970: LD_INT 2
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 4
45979: PUSH
45980: LD_INT 3
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 4
45989: PUSH
45990: LD_INT 4
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 3
45999: PUSH
46000: LD_INT 4
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: PUSH
46010: LD_INT 3
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 2
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 4
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: LD_INT 4
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 4
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: LD_INT 3
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: LD_INT 4
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: LD_INT 5
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: LD_INT 5
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: LD_INT 4
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: LD_INT 3
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: LD_INT 5
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: NEG
46132: PUSH
46133: LD_INT 3
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46187: LD_ADDR_VAR 0 34
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 4
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 5
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: LD_INT 4
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: LD_INT 3
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: LD_INT 3
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 4
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 5
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: LD_INT 3
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 2
46284: NEG
46285: PUSH
46286: LD_INT 5
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 3
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 3
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 4
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 4
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 3
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 2
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 4
46379: PUSH
46380: LD_INT 2
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 4
46389: PUSH
46390: LD_INT 4
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 4
46399: PUSH
46400: LD_INT 3
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 5
46409: PUSH
46410: LD_INT 4
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 5
46419: PUSH
46420: LD_INT 5
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 4
46429: PUSH
46430: LD_INT 5
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 3
46439: PUSH
46440: LD_INT 4
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 3
46449: PUSH
46450: LD_INT 3
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 5
46459: PUSH
46460: LD_INT 3
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 3
46469: PUSH
46470: LD_INT 5
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: LD_INT 3
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 3
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: LD_INT 4
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: LD_INT 4
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: NEG
46530: PUSH
46531: LD_INT 3
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: LD_INT 4
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 4
46572: NEG
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 4
46583: NEG
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 3
46595: NEG
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 3
46606: NEG
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 4
46617: NEG
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 5
46628: NEG
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 5
46639: NEG
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 5
46651: NEG
46652: PUSH
46653: LD_INT 2
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 3
46663: NEG
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: ST_TO_ADDR
// end ; end ;
46719: GO 46722
46721: POP
// case btype of b_depot , b_warehouse :
46722: LD_VAR 0 1
46726: PUSH
46727: LD_INT 0
46729: DOUBLE
46730: EQUAL
46731: IFTRUE 46741
46733: LD_INT 1
46735: DOUBLE
46736: EQUAL
46737: IFTRUE 46741
46739: GO 46942
46741: POP
// case nation of nation_american :
46742: LD_VAR 0 5
46746: PUSH
46747: LD_INT 1
46749: DOUBLE
46750: EQUAL
46751: IFTRUE 46755
46753: GO 46811
46755: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
46756: LD_ADDR_VAR 0 9
46760: PUSH
46761: LD_VAR 0 11
46765: PUSH
46766: LD_VAR 0 12
46770: PUSH
46771: LD_VAR 0 13
46775: PUSH
46776: LD_VAR 0 14
46780: PUSH
46781: LD_VAR 0 15
46785: PUSH
46786: LD_VAR 0 16
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: PUSH
46799: LD_VAR 0 4
46803: PUSH
46804: LD_INT 1
46806: PLUS
46807: ARRAY
46808: ST_TO_ADDR
46809: GO 46940
46811: LD_INT 2
46813: DOUBLE
46814: EQUAL
46815: IFTRUE 46819
46817: GO 46875
46819: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
46820: LD_ADDR_VAR 0 9
46824: PUSH
46825: LD_VAR 0 17
46829: PUSH
46830: LD_VAR 0 18
46834: PUSH
46835: LD_VAR 0 19
46839: PUSH
46840: LD_VAR 0 20
46844: PUSH
46845: LD_VAR 0 21
46849: PUSH
46850: LD_VAR 0 22
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: PUSH
46863: LD_VAR 0 4
46867: PUSH
46868: LD_INT 1
46870: PLUS
46871: ARRAY
46872: ST_TO_ADDR
46873: GO 46940
46875: LD_INT 3
46877: DOUBLE
46878: EQUAL
46879: IFTRUE 46883
46881: GO 46939
46883: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
46884: LD_ADDR_VAR 0 9
46888: PUSH
46889: LD_VAR 0 23
46893: PUSH
46894: LD_VAR 0 24
46898: PUSH
46899: LD_VAR 0 25
46903: PUSH
46904: LD_VAR 0 26
46908: PUSH
46909: LD_VAR 0 27
46913: PUSH
46914: LD_VAR 0 28
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: PUSH
46927: LD_VAR 0 4
46931: PUSH
46932: LD_INT 1
46934: PLUS
46935: ARRAY
46936: ST_TO_ADDR
46937: GO 46940
46939: POP
46940: GO 47495
46942: LD_INT 2
46944: DOUBLE
46945: EQUAL
46946: IFTRUE 46956
46948: LD_INT 3
46950: DOUBLE
46951: EQUAL
46952: IFTRUE 46956
46954: GO 47012
46956: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
46957: LD_ADDR_VAR 0 9
46961: PUSH
46962: LD_VAR 0 29
46966: PUSH
46967: LD_VAR 0 30
46971: PUSH
46972: LD_VAR 0 31
46976: PUSH
46977: LD_VAR 0 32
46981: PUSH
46982: LD_VAR 0 33
46986: PUSH
46987: LD_VAR 0 34
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: PUSH
47000: LD_VAR 0 4
47004: PUSH
47005: LD_INT 1
47007: PLUS
47008: ARRAY
47009: ST_TO_ADDR
47010: GO 47495
47012: LD_INT 16
47014: DOUBLE
47015: EQUAL
47016: IFTRUE 47074
47018: LD_INT 17
47020: DOUBLE
47021: EQUAL
47022: IFTRUE 47074
47024: LD_INT 18
47026: DOUBLE
47027: EQUAL
47028: IFTRUE 47074
47030: LD_INT 19
47032: DOUBLE
47033: EQUAL
47034: IFTRUE 47074
47036: LD_INT 22
47038: DOUBLE
47039: EQUAL
47040: IFTRUE 47074
47042: LD_INT 20
47044: DOUBLE
47045: EQUAL
47046: IFTRUE 47074
47048: LD_INT 21
47050: DOUBLE
47051: EQUAL
47052: IFTRUE 47074
47054: LD_INT 23
47056: DOUBLE
47057: EQUAL
47058: IFTRUE 47074
47060: LD_INT 24
47062: DOUBLE
47063: EQUAL
47064: IFTRUE 47074
47066: LD_INT 25
47068: DOUBLE
47069: EQUAL
47070: IFTRUE 47074
47072: GO 47130
47074: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47075: LD_ADDR_VAR 0 9
47079: PUSH
47080: LD_VAR 0 35
47084: PUSH
47085: LD_VAR 0 36
47089: PUSH
47090: LD_VAR 0 37
47094: PUSH
47095: LD_VAR 0 38
47099: PUSH
47100: LD_VAR 0 39
47104: PUSH
47105: LD_VAR 0 40
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: PUSH
47118: LD_VAR 0 4
47122: PUSH
47123: LD_INT 1
47125: PLUS
47126: ARRAY
47127: ST_TO_ADDR
47128: GO 47495
47130: LD_INT 6
47132: DOUBLE
47133: EQUAL
47134: IFTRUE 47186
47136: LD_INT 7
47138: DOUBLE
47139: EQUAL
47140: IFTRUE 47186
47142: LD_INT 8
47144: DOUBLE
47145: EQUAL
47146: IFTRUE 47186
47148: LD_INT 13
47150: DOUBLE
47151: EQUAL
47152: IFTRUE 47186
47154: LD_INT 12
47156: DOUBLE
47157: EQUAL
47158: IFTRUE 47186
47160: LD_INT 15
47162: DOUBLE
47163: EQUAL
47164: IFTRUE 47186
47166: LD_INT 11
47168: DOUBLE
47169: EQUAL
47170: IFTRUE 47186
47172: LD_INT 14
47174: DOUBLE
47175: EQUAL
47176: IFTRUE 47186
47178: LD_INT 10
47180: DOUBLE
47181: EQUAL
47182: IFTRUE 47186
47184: GO 47242
47186: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47187: LD_ADDR_VAR 0 9
47191: PUSH
47192: LD_VAR 0 41
47196: PUSH
47197: LD_VAR 0 42
47201: PUSH
47202: LD_VAR 0 43
47206: PUSH
47207: LD_VAR 0 44
47211: PUSH
47212: LD_VAR 0 45
47216: PUSH
47217: LD_VAR 0 46
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: PUSH
47230: LD_VAR 0 4
47234: PUSH
47235: LD_INT 1
47237: PLUS
47238: ARRAY
47239: ST_TO_ADDR
47240: GO 47495
47242: LD_INT 36
47244: DOUBLE
47245: EQUAL
47246: IFTRUE 47250
47248: GO 47306
47250: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47251: LD_ADDR_VAR 0 9
47255: PUSH
47256: LD_VAR 0 47
47260: PUSH
47261: LD_VAR 0 48
47265: PUSH
47266: LD_VAR 0 49
47270: PUSH
47271: LD_VAR 0 50
47275: PUSH
47276: LD_VAR 0 51
47280: PUSH
47281: LD_VAR 0 52
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: PUSH
47294: LD_VAR 0 4
47298: PUSH
47299: LD_INT 1
47301: PLUS
47302: ARRAY
47303: ST_TO_ADDR
47304: GO 47495
47306: LD_INT 4
47308: DOUBLE
47309: EQUAL
47310: IFTRUE 47332
47312: LD_INT 5
47314: DOUBLE
47315: EQUAL
47316: IFTRUE 47332
47318: LD_INT 34
47320: DOUBLE
47321: EQUAL
47322: IFTRUE 47332
47324: LD_INT 37
47326: DOUBLE
47327: EQUAL
47328: IFTRUE 47332
47330: GO 47388
47332: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47333: LD_ADDR_VAR 0 9
47337: PUSH
47338: LD_VAR 0 53
47342: PUSH
47343: LD_VAR 0 54
47347: PUSH
47348: LD_VAR 0 55
47352: PUSH
47353: LD_VAR 0 56
47357: PUSH
47358: LD_VAR 0 57
47362: PUSH
47363: LD_VAR 0 58
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: PUSH
47376: LD_VAR 0 4
47380: PUSH
47381: LD_INT 1
47383: PLUS
47384: ARRAY
47385: ST_TO_ADDR
47386: GO 47495
47388: LD_INT 31
47390: DOUBLE
47391: EQUAL
47392: IFTRUE 47438
47394: LD_INT 32
47396: DOUBLE
47397: EQUAL
47398: IFTRUE 47438
47400: LD_INT 33
47402: DOUBLE
47403: EQUAL
47404: IFTRUE 47438
47406: LD_INT 27
47408: DOUBLE
47409: EQUAL
47410: IFTRUE 47438
47412: LD_INT 26
47414: DOUBLE
47415: EQUAL
47416: IFTRUE 47438
47418: LD_INT 28
47420: DOUBLE
47421: EQUAL
47422: IFTRUE 47438
47424: LD_INT 29
47426: DOUBLE
47427: EQUAL
47428: IFTRUE 47438
47430: LD_INT 30
47432: DOUBLE
47433: EQUAL
47434: IFTRUE 47438
47436: GO 47494
47438: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47439: LD_ADDR_VAR 0 9
47443: PUSH
47444: LD_VAR 0 59
47448: PUSH
47449: LD_VAR 0 60
47453: PUSH
47454: LD_VAR 0 61
47458: PUSH
47459: LD_VAR 0 62
47463: PUSH
47464: LD_VAR 0 63
47468: PUSH
47469: LD_VAR 0 64
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: PUSH
47482: LD_VAR 0 4
47486: PUSH
47487: LD_INT 1
47489: PLUS
47490: ARRAY
47491: ST_TO_ADDR
47492: GO 47495
47494: POP
// temp_list2 = [ ] ;
47495: LD_ADDR_VAR 0 10
47499: PUSH
47500: EMPTY
47501: ST_TO_ADDR
// for i in temp_list do
47502: LD_ADDR_VAR 0 8
47506: PUSH
47507: LD_VAR 0 9
47511: PUSH
47512: FOR_IN
47513: IFFALSE 47565
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47515: LD_ADDR_VAR 0 10
47519: PUSH
47520: LD_VAR 0 10
47524: PUSH
47525: LD_VAR 0 8
47529: PUSH
47530: LD_INT 1
47532: ARRAY
47533: PUSH
47534: LD_VAR 0 2
47538: PLUS
47539: PUSH
47540: LD_VAR 0 8
47544: PUSH
47545: LD_INT 2
47547: ARRAY
47548: PUSH
47549: LD_VAR 0 3
47553: PLUS
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: EMPTY
47560: LIST
47561: ADD
47562: ST_TO_ADDR
47563: GO 47512
47565: POP
47566: POP
// result = temp_list2 ;
47567: LD_ADDR_VAR 0 7
47571: PUSH
47572: LD_VAR 0 10
47576: ST_TO_ADDR
// end ;
47577: LD_VAR 0 7
47581: RET
// export function EnemyInRange ( unit , dist ) ; begin
47582: LD_INT 0
47584: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47585: LD_ADDR_VAR 0 3
47589: PUSH
47590: LD_VAR 0 1
47594: PPUSH
47595: CALL_OW 255
47599: PPUSH
47600: LD_VAR 0 1
47604: PPUSH
47605: CALL_OW 250
47609: PPUSH
47610: LD_VAR 0 1
47614: PPUSH
47615: CALL_OW 251
47619: PPUSH
47620: LD_VAR 0 2
47624: PPUSH
47625: CALL 20955 0 4
47629: PUSH
47630: LD_INT 4
47632: ARRAY
47633: ST_TO_ADDR
// end ;
47634: LD_VAR 0 3
47638: RET
// export function PlayerSeeMe ( unit ) ; begin
47639: LD_INT 0
47641: PPUSH
// result := See ( your_side , unit ) ;
47642: LD_ADDR_VAR 0 2
47646: PUSH
47647: LD_OWVAR 2
47651: PPUSH
47652: LD_VAR 0 1
47656: PPUSH
47657: CALL_OW 292
47661: ST_TO_ADDR
// end ;
47662: LD_VAR 0 2
47666: RET
// export function ReverseDir ( unit ) ; begin
47667: LD_INT 0
47669: PPUSH
// if not unit then
47670: LD_VAR 0 1
47674: NOT
47675: IFFALSE 47679
// exit ;
47677: GO 47702
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
47679: LD_ADDR_VAR 0 2
47683: PUSH
47684: LD_VAR 0 1
47688: PPUSH
47689: CALL_OW 254
47693: PUSH
47694: LD_INT 3
47696: PLUS
47697: PUSH
47698: LD_INT 6
47700: MOD
47701: ST_TO_ADDR
// end ;
47702: LD_VAR 0 2
47706: RET
// export function ReverseArray ( array ) ; var i ; begin
47707: LD_INT 0
47709: PPUSH
47710: PPUSH
// if not array then
47711: LD_VAR 0 1
47715: NOT
47716: IFFALSE 47720
// exit ;
47718: GO 47775
// result := [ ] ;
47720: LD_ADDR_VAR 0 2
47724: PUSH
47725: EMPTY
47726: ST_TO_ADDR
// for i := array downto 1 do
47727: LD_ADDR_VAR 0 3
47731: PUSH
47732: DOUBLE
47733: LD_VAR 0 1
47737: INC
47738: ST_TO_ADDR
47739: LD_INT 1
47741: PUSH
47742: FOR_DOWNTO
47743: IFFALSE 47773
// result := Join ( result , array [ i ] ) ;
47745: LD_ADDR_VAR 0 2
47749: PUSH
47750: LD_VAR 0 2
47754: PPUSH
47755: LD_VAR 0 1
47759: PUSH
47760: LD_VAR 0 3
47764: ARRAY
47765: PPUSH
47766: CALL 52420 0 2
47770: ST_TO_ADDR
47771: GO 47742
47773: POP
47774: POP
// end ;
47775: LD_VAR 0 2
47779: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
47780: LD_INT 0
47782: PPUSH
47783: PPUSH
47784: PPUSH
47785: PPUSH
47786: PPUSH
47787: PPUSH
// if not unit or not hexes then
47788: LD_VAR 0 1
47792: NOT
47793: PUSH
47794: LD_VAR 0 2
47798: NOT
47799: OR
47800: IFFALSE 47804
// exit ;
47802: GO 47927
// dist := 9999 ;
47804: LD_ADDR_VAR 0 5
47808: PUSH
47809: LD_INT 9999
47811: ST_TO_ADDR
// for i = 1 to hexes do
47812: LD_ADDR_VAR 0 4
47816: PUSH
47817: DOUBLE
47818: LD_INT 1
47820: DEC
47821: ST_TO_ADDR
47822: LD_VAR 0 2
47826: PUSH
47827: FOR_TO
47828: IFFALSE 47915
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47830: LD_ADDR_VAR 0 6
47834: PUSH
47835: LD_VAR 0 1
47839: PPUSH
47840: LD_VAR 0 2
47844: PUSH
47845: LD_VAR 0 4
47849: ARRAY
47850: PUSH
47851: LD_INT 1
47853: ARRAY
47854: PPUSH
47855: LD_VAR 0 2
47859: PUSH
47860: LD_VAR 0 4
47864: ARRAY
47865: PUSH
47866: LD_INT 2
47868: ARRAY
47869: PPUSH
47870: CALL_OW 297
47874: ST_TO_ADDR
// if tdist < dist then
47875: LD_VAR 0 6
47879: PUSH
47880: LD_VAR 0 5
47884: LESS
47885: IFFALSE 47913
// begin hex := hexes [ i ] ;
47887: LD_ADDR_VAR 0 8
47891: PUSH
47892: LD_VAR 0 2
47896: PUSH
47897: LD_VAR 0 4
47901: ARRAY
47902: ST_TO_ADDR
// dist := tdist ;
47903: LD_ADDR_VAR 0 5
47907: PUSH
47908: LD_VAR 0 6
47912: ST_TO_ADDR
// end ; end ;
47913: GO 47827
47915: POP
47916: POP
// result := hex ;
47917: LD_ADDR_VAR 0 3
47921: PUSH
47922: LD_VAR 0 8
47926: ST_TO_ADDR
// end ;
47927: LD_VAR 0 3
47931: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
47932: LD_INT 0
47934: PPUSH
47935: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
47936: LD_VAR 0 1
47940: NOT
47941: PUSH
47942: LD_VAR 0 1
47946: PUSH
47947: LD_INT 21
47949: PUSH
47950: LD_INT 2
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 23
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PPUSH
47971: CALL_OW 69
47975: IN
47976: NOT
47977: OR
47978: IFFALSE 47982
// exit ;
47980: GO 48029
// for i = 1 to 3 do
47982: LD_ADDR_VAR 0 3
47986: PUSH
47987: DOUBLE
47988: LD_INT 1
47990: DEC
47991: ST_TO_ADDR
47992: LD_INT 3
47994: PUSH
47995: FOR_TO
47996: IFFALSE 48027
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
47998: LD_VAR 0 1
48002: PPUSH
48003: CALL_OW 250
48007: PPUSH
48008: LD_VAR 0 1
48012: PPUSH
48013: CALL_OW 251
48017: PPUSH
48018: LD_INT 1
48020: PPUSH
48021: CALL_OW 453
48025: GO 47995
48027: POP
48028: POP
// end ;
48029: LD_VAR 0 2
48033: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48034: LD_INT 0
48036: PPUSH
48037: PPUSH
48038: PPUSH
48039: PPUSH
48040: PPUSH
48041: PPUSH
// if not unit or not enemy_unit then
48042: LD_VAR 0 1
48046: NOT
48047: PUSH
48048: LD_VAR 0 2
48052: NOT
48053: OR
48054: IFFALSE 48058
// exit ;
48056: GO 48525
// if GetLives ( i ) < 250 then
48058: LD_VAR 0 4
48062: PPUSH
48063: CALL_OW 256
48067: PUSH
48068: LD_INT 250
48070: LESS
48071: IFFALSE 48084
// begin ComAutodestruct ( i ) ;
48073: LD_VAR 0 4
48077: PPUSH
48078: CALL 47932 0 1
// exit ;
48082: GO 48525
// end ; x := GetX ( enemy_unit ) ;
48084: LD_ADDR_VAR 0 7
48088: PUSH
48089: LD_VAR 0 2
48093: PPUSH
48094: CALL_OW 250
48098: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48099: LD_ADDR_VAR 0 8
48103: PUSH
48104: LD_VAR 0 2
48108: PPUSH
48109: CALL_OW 251
48113: ST_TO_ADDR
// if not x or not y then
48114: LD_VAR 0 7
48118: NOT
48119: PUSH
48120: LD_VAR 0 8
48124: NOT
48125: OR
48126: IFFALSE 48130
// exit ;
48128: GO 48525
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48130: LD_ADDR_VAR 0 6
48134: PUSH
48135: LD_VAR 0 7
48139: PPUSH
48140: LD_INT 0
48142: PPUSH
48143: LD_INT 4
48145: PPUSH
48146: CALL_OW 272
48150: PUSH
48151: LD_VAR 0 8
48155: PPUSH
48156: LD_INT 0
48158: PPUSH
48159: LD_INT 4
48161: PPUSH
48162: CALL_OW 273
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_VAR 0 7
48175: PPUSH
48176: LD_INT 1
48178: PPUSH
48179: LD_INT 4
48181: PPUSH
48182: CALL_OW 272
48186: PUSH
48187: LD_VAR 0 8
48191: PPUSH
48192: LD_INT 1
48194: PPUSH
48195: LD_INT 4
48197: PPUSH
48198: CALL_OW 273
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_VAR 0 7
48211: PPUSH
48212: LD_INT 2
48214: PPUSH
48215: LD_INT 4
48217: PPUSH
48218: CALL_OW 272
48222: PUSH
48223: LD_VAR 0 8
48227: PPUSH
48228: LD_INT 2
48230: PPUSH
48231: LD_INT 4
48233: PPUSH
48234: CALL_OW 273
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_VAR 0 7
48247: PPUSH
48248: LD_INT 3
48250: PPUSH
48251: LD_INT 4
48253: PPUSH
48254: CALL_OW 272
48258: PUSH
48259: LD_VAR 0 8
48263: PPUSH
48264: LD_INT 3
48266: PPUSH
48267: LD_INT 4
48269: PPUSH
48270: CALL_OW 273
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_VAR 0 7
48283: PPUSH
48284: LD_INT 4
48286: PPUSH
48287: LD_INT 4
48289: PPUSH
48290: CALL_OW 272
48294: PUSH
48295: LD_VAR 0 8
48299: PPUSH
48300: LD_INT 4
48302: PPUSH
48303: LD_INT 4
48305: PPUSH
48306: CALL_OW 273
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_VAR 0 7
48319: PPUSH
48320: LD_INT 5
48322: PPUSH
48323: LD_INT 4
48325: PPUSH
48326: CALL_OW 272
48330: PUSH
48331: LD_VAR 0 8
48335: PPUSH
48336: LD_INT 5
48338: PPUSH
48339: LD_INT 4
48341: PPUSH
48342: CALL_OW 273
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: ST_TO_ADDR
// for i = tmp downto 1 do
48359: LD_ADDR_VAR 0 4
48363: PUSH
48364: DOUBLE
48365: LD_VAR 0 6
48369: INC
48370: ST_TO_ADDR
48371: LD_INT 1
48373: PUSH
48374: FOR_DOWNTO
48375: IFFALSE 48476
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48377: LD_VAR 0 6
48381: PUSH
48382: LD_VAR 0 4
48386: ARRAY
48387: PUSH
48388: LD_INT 1
48390: ARRAY
48391: PPUSH
48392: LD_VAR 0 6
48396: PUSH
48397: LD_VAR 0 4
48401: ARRAY
48402: PUSH
48403: LD_INT 2
48405: ARRAY
48406: PPUSH
48407: CALL_OW 488
48411: NOT
48412: PUSH
48413: LD_VAR 0 6
48417: PUSH
48418: LD_VAR 0 4
48422: ARRAY
48423: PUSH
48424: LD_INT 1
48426: ARRAY
48427: PPUSH
48428: LD_VAR 0 6
48432: PUSH
48433: LD_VAR 0 4
48437: ARRAY
48438: PUSH
48439: LD_INT 2
48441: ARRAY
48442: PPUSH
48443: CALL_OW 428
48447: PUSH
48448: LD_INT 0
48450: NONEQUAL
48451: OR
48452: IFFALSE 48474
// tmp := Delete ( tmp , i ) ;
48454: LD_ADDR_VAR 0 6
48458: PUSH
48459: LD_VAR 0 6
48463: PPUSH
48464: LD_VAR 0 4
48468: PPUSH
48469: CALL_OW 3
48473: ST_TO_ADDR
48474: GO 48374
48476: POP
48477: POP
// j := GetClosestHex ( unit , tmp ) ;
48478: LD_ADDR_VAR 0 5
48482: PUSH
48483: LD_VAR 0 1
48487: PPUSH
48488: LD_VAR 0 6
48492: PPUSH
48493: CALL 47780 0 2
48497: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48498: LD_VAR 0 1
48502: PPUSH
48503: LD_VAR 0 5
48507: PUSH
48508: LD_INT 1
48510: ARRAY
48511: PPUSH
48512: LD_VAR 0 5
48516: PUSH
48517: LD_INT 2
48519: ARRAY
48520: PPUSH
48521: CALL_OW 111
// end ;
48525: LD_VAR 0 3
48529: RET
// export function PrepareApemanSoldier ( ) ; begin
48530: LD_INT 0
48532: PPUSH
// uc_nation := 0 ;
48533: LD_ADDR_OWVAR 21
48537: PUSH
48538: LD_INT 0
48540: ST_TO_ADDR
// hc_sex := sex_male ;
48541: LD_ADDR_OWVAR 27
48545: PUSH
48546: LD_INT 1
48548: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
48549: LD_ADDR_OWVAR 28
48553: PUSH
48554: LD_INT 15
48556: ST_TO_ADDR
// hc_gallery :=  ;
48557: LD_ADDR_OWVAR 33
48561: PUSH
48562: LD_STRING 
48564: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48565: LD_ADDR_OWVAR 31
48569: PUSH
48570: LD_INT 0
48572: PPUSH
48573: LD_INT 3
48575: PPUSH
48576: CALL_OW 12
48580: PUSH
48581: LD_INT 0
48583: PPUSH
48584: LD_INT 3
48586: PPUSH
48587: CALL_OW 12
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: ST_TO_ADDR
// end ;
48604: LD_VAR 0 1
48608: RET
// export function PrepareApemanEngineer ( ) ; begin
48609: LD_INT 0
48611: PPUSH
// uc_nation := 0 ;
48612: LD_ADDR_OWVAR 21
48616: PUSH
48617: LD_INT 0
48619: ST_TO_ADDR
// hc_sex := sex_male ;
48620: LD_ADDR_OWVAR 27
48624: PUSH
48625: LD_INT 1
48627: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
48628: LD_ADDR_OWVAR 28
48632: PUSH
48633: LD_INT 16
48635: ST_TO_ADDR
// hc_gallery :=  ;
48636: LD_ADDR_OWVAR 33
48640: PUSH
48641: LD_STRING 
48643: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48644: LD_ADDR_OWVAR 31
48648: PUSH
48649: LD_INT 0
48651: PPUSH
48652: LD_INT 3
48654: PPUSH
48655: CALL_OW 12
48659: PUSH
48660: LD_INT 0
48662: PPUSH
48663: LD_INT 3
48665: PPUSH
48666: CALL_OW 12
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: ST_TO_ADDR
// end ;
48683: LD_VAR 0 1
48687: RET
// export function PrepareApeman ( agressivity ) ; begin
48688: LD_INT 0
48690: PPUSH
// uc_side := 0 ;
48691: LD_ADDR_OWVAR 20
48695: PUSH
48696: LD_INT 0
48698: ST_TO_ADDR
// uc_nation := 0 ;
48699: LD_ADDR_OWVAR 21
48703: PUSH
48704: LD_INT 0
48706: ST_TO_ADDR
// hc_sex := sex_male ;
48707: LD_ADDR_OWVAR 27
48711: PUSH
48712: LD_INT 1
48714: ST_TO_ADDR
// hc_class := class_apeman ;
48715: LD_ADDR_OWVAR 28
48719: PUSH
48720: LD_INT 12
48722: ST_TO_ADDR
// hc_gallery :=  ;
48723: LD_ADDR_OWVAR 33
48727: PUSH
48728: LD_STRING 
48730: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
48731: LD_ADDR_OWVAR 35
48735: PUSH
48736: LD_VAR 0 1
48740: NEG
48741: PPUSH
48742: LD_VAR 0 1
48746: PPUSH
48747: CALL_OW 12
48751: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48752: LD_ADDR_OWVAR 31
48756: PUSH
48757: LD_INT 0
48759: PPUSH
48760: LD_INT 3
48762: PPUSH
48763: CALL_OW 12
48767: PUSH
48768: LD_INT 0
48770: PPUSH
48771: LD_INT 3
48773: PPUSH
48774: CALL_OW 12
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: ST_TO_ADDR
// end ;
48791: LD_VAR 0 2
48795: RET
// export function PrepareTiger ( agressivity ) ; begin
48796: LD_INT 0
48798: PPUSH
// uc_side := 0 ;
48799: LD_ADDR_OWVAR 20
48803: PUSH
48804: LD_INT 0
48806: ST_TO_ADDR
// uc_nation := 0 ;
48807: LD_ADDR_OWVAR 21
48811: PUSH
48812: LD_INT 0
48814: ST_TO_ADDR
// hc_class := class_tiger ;
48815: LD_ADDR_OWVAR 28
48819: PUSH
48820: LD_INT 14
48822: ST_TO_ADDR
// hc_gallery :=  ;
48823: LD_ADDR_OWVAR 33
48827: PUSH
48828: LD_STRING 
48830: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
48831: LD_ADDR_OWVAR 35
48835: PUSH
48836: LD_VAR 0 1
48840: NEG
48841: PPUSH
48842: LD_VAR 0 1
48846: PPUSH
48847: CALL_OW 12
48851: ST_TO_ADDR
// end ;
48852: LD_VAR 0 2
48856: RET
// export function PrepareEnchidna ( ) ; begin
48857: LD_INT 0
48859: PPUSH
// uc_side := 0 ;
48860: LD_ADDR_OWVAR 20
48864: PUSH
48865: LD_INT 0
48867: ST_TO_ADDR
// uc_nation := 0 ;
48868: LD_ADDR_OWVAR 21
48872: PUSH
48873: LD_INT 0
48875: ST_TO_ADDR
// hc_class := class_baggie ;
48876: LD_ADDR_OWVAR 28
48880: PUSH
48881: LD_INT 13
48883: ST_TO_ADDR
// hc_gallery :=  ;
48884: LD_ADDR_OWVAR 33
48888: PUSH
48889: LD_STRING 
48891: ST_TO_ADDR
// end ;
48892: LD_VAR 0 1
48896: RET
// export function PrepareFrog ( ) ; begin
48897: LD_INT 0
48899: PPUSH
// uc_side := 0 ;
48900: LD_ADDR_OWVAR 20
48904: PUSH
48905: LD_INT 0
48907: ST_TO_ADDR
// uc_nation := 0 ;
48908: LD_ADDR_OWVAR 21
48912: PUSH
48913: LD_INT 0
48915: ST_TO_ADDR
// hc_class := class_frog ;
48916: LD_ADDR_OWVAR 28
48920: PUSH
48921: LD_INT 19
48923: ST_TO_ADDR
// hc_gallery :=  ;
48924: LD_ADDR_OWVAR 33
48928: PUSH
48929: LD_STRING 
48931: ST_TO_ADDR
// end ;
48932: LD_VAR 0 1
48936: RET
// export function PrepareFish ( ) ; begin
48937: LD_INT 0
48939: PPUSH
// uc_side := 0 ;
48940: LD_ADDR_OWVAR 20
48944: PUSH
48945: LD_INT 0
48947: ST_TO_ADDR
// uc_nation := 0 ;
48948: LD_ADDR_OWVAR 21
48952: PUSH
48953: LD_INT 0
48955: ST_TO_ADDR
// hc_class := class_fish ;
48956: LD_ADDR_OWVAR 28
48960: PUSH
48961: LD_INT 20
48963: ST_TO_ADDR
// hc_gallery :=  ;
48964: LD_ADDR_OWVAR 33
48968: PUSH
48969: LD_STRING 
48971: ST_TO_ADDR
// end ;
48972: LD_VAR 0 1
48976: RET
// export function PrepareBird ( ) ; begin
48977: LD_INT 0
48979: PPUSH
// uc_side := 0 ;
48980: LD_ADDR_OWVAR 20
48984: PUSH
48985: LD_INT 0
48987: ST_TO_ADDR
// uc_nation := 0 ;
48988: LD_ADDR_OWVAR 21
48992: PUSH
48993: LD_INT 0
48995: ST_TO_ADDR
// hc_class := class_phororhacos ;
48996: LD_ADDR_OWVAR 28
49000: PUSH
49001: LD_INT 18
49003: ST_TO_ADDR
// hc_gallery :=  ;
49004: LD_ADDR_OWVAR 33
49008: PUSH
49009: LD_STRING 
49011: ST_TO_ADDR
// end ;
49012: LD_VAR 0 1
49016: RET
// export function PrepareHorse ( ) ; begin
49017: LD_INT 0
49019: PPUSH
// uc_side := 0 ;
49020: LD_ADDR_OWVAR 20
49024: PUSH
49025: LD_INT 0
49027: ST_TO_ADDR
// uc_nation := 0 ;
49028: LD_ADDR_OWVAR 21
49032: PUSH
49033: LD_INT 0
49035: ST_TO_ADDR
// hc_class := class_horse ;
49036: LD_ADDR_OWVAR 28
49040: PUSH
49041: LD_INT 21
49043: ST_TO_ADDR
// hc_gallery :=  ;
49044: LD_ADDR_OWVAR 33
49048: PUSH
49049: LD_STRING 
49051: ST_TO_ADDR
// end ;
49052: LD_VAR 0 1
49056: RET
// export function PrepareMastodont ( ) ; begin
49057: LD_INT 0
49059: PPUSH
// uc_side := 0 ;
49060: LD_ADDR_OWVAR 20
49064: PUSH
49065: LD_INT 0
49067: ST_TO_ADDR
// uc_nation := 0 ;
49068: LD_ADDR_OWVAR 21
49072: PUSH
49073: LD_INT 0
49075: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49076: LD_ADDR_OWVAR 37
49080: PUSH
49081: LD_INT 31
49083: ST_TO_ADDR
// vc_control := control_rider ;
49084: LD_ADDR_OWVAR 38
49088: PUSH
49089: LD_INT 4
49091: ST_TO_ADDR
// end ;
49092: LD_VAR 0 1
49096: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49097: LD_INT 0
49099: PPUSH
49100: PPUSH
49101: PPUSH
// uc_side = 0 ;
49102: LD_ADDR_OWVAR 20
49106: PUSH
49107: LD_INT 0
49109: ST_TO_ADDR
// uc_nation = 0 ;
49110: LD_ADDR_OWVAR 21
49114: PUSH
49115: LD_INT 0
49117: ST_TO_ADDR
// InitHc_All ( ) ;
49118: CALL_OW 584
// InitVc ;
49122: CALL_OW 20
// if mastodonts then
49126: LD_VAR 0 6
49130: IFFALSE 49197
// for i = 1 to mastodonts do
49132: LD_ADDR_VAR 0 11
49136: PUSH
49137: DOUBLE
49138: LD_INT 1
49140: DEC
49141: ST_TO_ADDR
49142: LD_VAR 0 6
49146: PUSH
49147: FOR_TO
49148: IFFALSE 49195
// begin vc_chassis := 31 ;
49150: LD_ADDR_OWVAR 37
49154: PUSH
49155: LD_INT 31
49157: ST_TO_ADDR
// vc_control := control_rider ;
49158: LD_ADDR_OWVAR 38
49162: PUSH
49163: LD_INT 4
49165: ST_TO_ADDR
// animal := CreateVehicle ;
49166: LD_ADDR_VAR 0 12
49170: PUSH
49171: CALL_OW 45
49175: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49176: LD_VAR 0 12
49180: PPUSH
49181: LD_VAR 0 8
49185: PPUSH
49186: LD_INT 0
49188: PPUSH
49189: CALL 51325 0 3
// end ;
49193: GO 49147
49195: POP
49196: POP
// if horses then
49197: LD_VAR 0 5
49201: IFFALSE 49268
// for i = 1 to horses do
49203: LD_ADDR_VAR 0 11
49207: PUSH
49208: DOUBLE
49209: LD_INT 1
49211: DEC
49212: ST_TO_ADDR
49213: LD_VAR 0 5
49217: PUSH
49218: FOR_TO
49219: IFFALSE 49266
// begin hc_class := 21 ;
49221: LD_ADDR_OWVAR 28
49225: PUSH
49226: LD_INT 21
49228: ST_TO_ADDR
// hc_gallery :=  ;
49229: LD_ADDR_OWVAR 33
49233: PUSH
49234: LD_STRING 
49236: ST_TO_ADDR
// animal := CreateHuman ;
49237: LD_ADDR_VAR 0 12
49241: PUSH
49242: CALL_OW 44
49246: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49247: LD_VAR 0 12
49251: PPUSH
49252: LD_VAR 0 8
49256: PPUSH
49257: LD_INT 0
49259: PPUSH
49260: CALL 51325 0 3
// end ;
49264: GO 49218
49266: POP
49267: POP
// if birds then
49268: LD_VAR 0 1
49272: IFFALSE 49339
// for i = 1 to birds do
49274: LD_ADDR_VAR 0 11
49278: PUSH
49279: DOUBLE
49280: LD_INT 1
49282: DEC
49283: ST_TO_ADDR
49284: LD_VAR 0 1
49288: PUSH
49289: FOR_TO
49290: IFFALSE 49337
// begin hc_class := 18 ;
49292: LD_ADDR_OWVAR 28
49296: PUSH
49297: LD_INT 18
49299: ST_TO_ADDR
// hc_gallery =  ;
49300: LD_ADDR_OWVAR 33
49304: PUSH
49305: LD_STRING 
49307: ST_TO_ADDR
// animal := CreateHuman ;
49308: LD_ADDR_VAR 0 12
49312: PUSH
49313: CALL_OW 44
49317: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49318: LD_VAR 0 12
49322: PPUSH
49323: LD_VAR 0 8
49327: PPUSH
49328: LD_INT 0
49330: PPUSH
49331: CALL 51325 0 3
// end ;
49335: GO 49289
49337: POP
49338: POP
// if tigers then
49339: LD_VAR 0 2
49343: IFFALSE 49427
// for i = 1 to tigers do
49345: LD_ADDR_VAR 0 11
49349: PUSH
49350: DOUBLE
49351: LD_INT 1
49353: DEC
49354: ST_TO_ADDR
49355: LD_VAR 0 2
49359: PUSH
49360: FOR_TO
49361: IFFALSE 49425
// begin hc_class = class_tiger ;
49363: LD_ADDR_OWVAR 28
49367: PUSH
49368: LD_INT 14
49370: ST_TO_ADDR
// hc_gallery =  ;
49371: LD_ADDR_OWVAR 33
49375: PUSH
49376: LD_STRING 
49378: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49379: LD_ADDR_OWVAR 35
49383: PUSH
49384: LD_INT 7
49386: NEG
49387: PPUSH
49388: LD_INT 7
49390: PPUSH
49391: CALL_OW 12
49395: ST_TO_ADDR
// animal := CreateHuman ;
49396: LD_ADDR_VAR 0 12
49400: PUSH
49401: CALL_OW 44
49405: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49406: LD_VAR 0 12
49410: PPUSH
49411: LD_VAR 0 8
49415: PPUSH
49416: LD_INT 0
49418: PPUSH
49419: CALL 51325 0 3
// end ;
49423: GO 49360
49425: POP
49426: POP
// if apemans then
49427: LD_VAR 0 3
49431: IFFALSE 49554
// for i = 1 to apemans do
49433: LD_ADDR_VAR 0 11
49437: PUSH
49438: DOUBLE
49439: LD_INT 1
49441: DEC
49442: ST_TO_ADDR
49443: LD_VAR 0 3
49447: PUSH
49448: FOR_TO
49449: IFFALSE 49552
// begin hc_class = class_apeman ;
49451: LD_ADDR_OWVAR 28
49455: PUSH
49456: LD_INT 12
49458: ST_TO_ADDR
// hc_gallery =  ;
49459: LD_ADDR_OWVAR 33
49463: PUSH
49464: LD_STRING 
49466: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49467: LD_ADDR_OWVAR 35
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PPUSH
49476: LD_INT 2
49478: PPUSH
49479: CALL_OW 12
49483: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49484: LD_ADDR_OWVAR 31
49488: PUSH
49489: LD_INT 1
49491: PPUSH
49492: LD_INT 3
49494: PPUSH
49495: CALL_OW 12
49499: PUSH
49500: LD_INT 1
49502: PPUSH
49503: LD_INT 3
49505: PPUSH
49506: CALL_OW 12
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: ST_TO_ADDR
// animal := CreateHuman ;
49523: LD_ADDR_VAR 0 12
49527: PUSH
49528: CALL_OW 44
49532: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49533: LD_VAR 0 12
49537: PPUSH
49538: LD_VAR 0 8
49542: PPUSH
49543: LD_INT 0
49545: PPUSH
49546: CALL 51325 0 3
// end ;
49550: GO 49448
49552: POP
49553: POP
// if enchidnas then
49554: LD_VAR 0 4
49558: IFFALSE 49625
// for i = 1 to enchidnas do
49560: LD_ADDR_VAR 0 11
49564: PUSH
49565: DOUBLE
49566: LD_INT 1
49568: DEC
49569: ST_TO_ADDR
49570: LD_VAR 0 4
49574: PUSH
49575: FOR_TO
49576: IFFALSE 49623
// begin hc_class = 13 ;
49578: LD_ADDR_OWVAR 28
49582: PUSH
49583: LD_INT 13
49585: ST_TO_ADDR
// hc_gallery =  ;
49586: LD_ADDR_OWVAR 33
49590: PUSH
49591: LD_STRING 
49593: ST_TO_ADDR
// animal := CreateHuman ;
49594: LD_ADDR_VAR 0 12
49598: PUSH
49599: CALL_OW 44
49603: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49604: LD_VAR 0 12
49608: PPUSH
49609: LD_VAR 0 8
49613: PPUSH
49614: LD_INT 0
49616: PPUSH
49617: CALL 51325 0 3
// end ;
49621: GO 49575
49623: POP
49624: POP
// if fishes then
49625: LD_VAR 0 7
49629: IFFALSE 49696
// for i = 1 to fishes do
49631: LD_ADDR_VAR 0 11
49635: PUSH
49636: DOUBLE
49637: LD_INT 1
49639: DEC
49640: ST_TO_ADDR
49641: LD_VAR 0 7
49645: PUSH
49646: FOR_TO
49647: IFFALSE 49694
// begin hc_class = 20 ;
49649: LD_ADDR_OWVAR 28
49653: PUSH
49654: LD_INT 20
49656: ST_TO_ADDR
// hc_gallery =  ;
49657: LD_ADDR_OWVAR 33
49661: PUSH
49662: LD_STRING 
49664: ST_TO_ADDR
// animal := CreateHuman ;
49665: LD_ADDR_VAR 0 12
49669: PUSH
49670: CALL_OW 44
49674: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
49675: LD_VAR 0 12
49679: PPUSH
49680: LD_VAR 0 9
49684: PPUSH
49685: LD_INT 0
49687: PPUSH
49688: CALL 51325 0 3
// end ;
49692: GO 49646
49694: POP
49695: POP
// end ;
49696: LD_VAR 0 10
49700: RET
// export function WantHeal ( sci , unit ) ; begin
49701: LD_INT 0
49703: PPUSH
// if GetTaskList ( sci ) > 0 then
49704: LD_VAR 0 1
49708: PPUSH
49709: CALL_OW 437
49713: PUSH
49714: LD_INT 0
49716: GREATER
49717: IFFALSE 49787
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
49719: LD_VAR 0 1
49723: PPUSH
49724: CALL_OW 437
49728: PUSH
49729: LD_INT 1
49731: ARRAY
49732: PUSH
49733: LD_INT 1
49735: ARRAY
49736: PUSH
49737: LD_STRING l
49739: EQUAL
49740: PUSH
49741: LD_VAR 0 1
49745: PPUSH
49746: CALL_OW 437
49750: PUSH
49751: LD_INT 1
49753: ARRAY
49754: PUSH
49755: LD_INT 4
49757: ARRAY
49758: PUSH
49759: LD_VAR 0 2
49763: EQUAL
49764: AND
49765: IFFALSE 49777
// result := true else
49767: LD_ADDR_VAR 0 3
49771: PUSH
49772: LD_INT 1
49774: ST_TO_ADDR
49775: GO 49785
// result := false ;
49777: LD_ADDR_VAR 0 3
49781: PUSH
49782: LD_INT 0
49784: ST_TO_ADDR
// end else
49785: GO 49795
// result := false ;
49787: LD_ADDR_VAR 0 3
49791: PUSH
49792: LD_INT 0
49794: ST_TO_ADDR
// end ;
49795: LD_VAR 0 3
49799: RET
// export function HealTarget ( sci ) ; begin
49800: LD_INT 0
49802: PPUSH
// if not sci then
49803: LD_VAR 0 1
49807: NOT
49808: IFFALSE 49812
// exit ;
49810: GO 49877
// result := 0 ;
49812: LD_ADDR_VAR 0 2
49816: PUSH
49817: LD_INT 0
49819: ST_TO_ADDR
// if GetTaskList ( sci ) then
49820: LD_VAR 0 1
49824: PPUSH
49825: CALL_OW 437
49829: IFFALSE 49877
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
49831: LD_VAR 0 1
49835: PPUSH
49836: CALL_OW 437
49840: PUSH
49841: LD_INT 1
49843: ARRAY
49844: PUSH
49845: LD_INT 1
49847: ARRAY
49848: PUSH
49849: LD_STRING l
49851: EQUAL
49852: IFFALSE 49877
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
49854: LD_ADDR_VAR 0 2
49858: PUSH
49859: LD_VAR 0 1
49863: PPUSH
49864: CALL_OW 437
49868: PUSH
49869: LD_INT 1
49871: ARRAY
49872: PUSH
49873: LD_INT 4
49875: ARRAY
49876: ST_TO_ADDR
// end ;
49877: LD_VAR 0 2
49881: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
49882: LD_INT 0
49884: PPUSH
49885: PPUSH
49886: PPUSH
49887: PPUSH
// if not base_units then
49888: LD_VAR 0 1
49892: NOT
49893: IFFALSE 49897
// exit ;
49895: GO 49984
// result := false ;
49897: LD_ADDR_VAR 0 2
49901: PUSH
49902: LD_INT 0
49904: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
49905: LD_ADDR_VAR 0 5
49909: PUSH
49910: LD_VAR 0 1
49914: PPUSH
49915: LD_INT 21
49917: PUSH
49918: LD_INT 3
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PPUSH
49925: CALL_OW 72
49929: ST_TO_ADDR
// if not tmp then
49930: LD_VAR 0 5
49934: NOT
49935: IFFALSE 49939
// exit ;
49937: GO 49984
// for i in tmp do
49939: LD_ADDR_VAR 0 3
49943: PUSH
49944: LD_VAR 0 5
49948: PUSH
49949: FOR_IN
49950: IFFALSE 49982
// begin result := EnemyInRange ( i , 22 ) ;
49952: LD_ADDR_VAR 0 2
49956: PUSH
49957: LD_VAR 0 3
49961: PPUSH
49962: LD_INT 22
49964: PPUSH
49965: CALL 47582 0 2
49969: ST_TO_ADDR
// if result then
49970: LD_VAR 0 2
49974: IFFALSE 49980
// exit ;
49976: POP
49977: POP
49978: GO 49984
// end ;
49980: GO 49949
49982: POP
49983: POP
// end ;
49984: LD_VAR 0 2
49988: RET
// export function FilterByTag ( units , tag ) ; begin
49989: LD_INT 0
49991: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
49992: LD_ADDR_VAR 0 3
49996: PUSH
49997: LD_VAR 0 1
50001: PPUSH
50002: LD_INT 120
50004: PUSH
50005: LD_VAR 0 2
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PPUSH
50014: CALL_OW 72
50018: ST_TO_ADDR
// end ;
50019: LD_VAR 0 3
50023: RET
// export function IsDriver ( un ) ; begin
50024: LD_INT 0
50026: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50027: LD_ADDR_VAR 0 2
50031: PUSH
50032: LD_VAR 0 1
50036: PUSH
50037: LD_INT 55
50039: PUSH
50040: EMPTY
50041: LIST
50042: PPUSH
50043: CALL_OW 69
50047: IN
50048: ST_TO_ADDR
// end ;
50049: LD_VAR 0 2
50053: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50054: LD_INT 0
50056: PPUSH
50057: PPUSH
// list := [ ] ;
50058: LD_ADDR_VAR 0 5
50062: PUSH
50063: EMPTY
50064: ST_TO_ADDR
// case d of 0 :
50065: LD_VAR 0 3
50069: PUSH
50070: LD_INT 0
50072: DOUBLE
50073: EQUAL
50074: IFTRUE 50078
50076: GO 50211
50078: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50079: LD_ADDR_VAR 0 5
50083: PUSH
50084: LD_VAR 0 1
50088: PUSH
50089: LD_INT 4
50091: MINUS
50092: PUSH
50093: LD_VAR 0 2
50097: PUSH
50098: LD_INT 4
50100: MINUS
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: LIST
50109: PUSH
50110: LD_VAR 0 1
50114: PUSH
50115: LD_INT 3
50117: MINUS
50118: PUSH
50119: LD_VAR 0 2
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: LIST
50131: PUSH
50132: LD_VAR 0 1
50136: PUSH
50137: LD_INT 4
50139: PLUS
50140: PUSH
50141: LD_VAR 0 2
50145: PUSH
50146: LD_INT 4
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: LIST
50153: PUSH
50154: LD_VAR 0 1
50158: PUSH
50159: LD_INT 3
50161: PLUS
50162: PUSH
50163: LD_VAR 0 2
50167: PUSH
50168: LD_INT 3
50170: PLUS
50171: PUSH
50172: LD_INT 5
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: LIST
50179: PUSH
50180: LD_VAR 0 1
50184: PUSH
50185: LD_VAR 0 2
50189: PUSH
50190: LD_INT 4
50192: PLUS
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: LIST
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: ST_TO_ADDR
// end ; 1 :
50209: GO 50909
50211: LD_INT 1
50213: DOUBLE
50214: EQUAL
50215: IFTRUE 50219
50217: GO 50352
50219: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50220: LD_ADDR_VAR 0 5
50224: PUSH
50225: LD_VAR 0 1
50229: PUSH
50230: LD_VAR 0 2
50234: PUSH
50235: LD_INT 4
50237: MINUS
50238: PUSH
50239: LD_INT 3
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: LIST
50246: PUSH
50247: LD_VAR 0 1
50251: PUSH
50252: LD_INT 3
50254: MINUS
50255: PUSH
50256: LD_VAR 0 2
50260: PUSH
50261: LD_INT 3
50263: MINUS
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: LIST
50272: PUSH
50273: LD_VAR 0 1
50277: PUSH
50278: LD_INT 4
50280: MINUS
50281: PUSH
50282: LD_VAR 0 2
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: LIST
50294: PUSH
50295: LD_VAR 0 1
50299: PUSH
50300: LD_VAR 0 2
50304: PUSH
50305: LD_INT 3
50307: PLUS
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: LIST
50316: PUSH
50317: LD_VAR 0 1
50321: PUSH
50322: LD_INT 4
50324: PLUS
50325: PUSH
50326: LD_VAR 0 2
50330: PUSH
50331: LD_INT 4
50333: PLUS
50334: PUSH
50335: LD_INT 5
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: LIST
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: ST_TO_ADDR
// end ; 2 :
50350: GO 50909
50352: LD_INT 2
50354: DOUBLE
50355: EQUAL
50356: IFTRUE 50360
50358: GO 50489
50360: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50361: LD_ADDR_VAR 0 5
50365: PUSH
50366: LD_VAR 0 1
50370: PUSH
50371: LD_VAR 0 2
50375: PUSH
50376: LD_INT 3
50378: MINUS
50379: PUSH
50380: LD_INT 3
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: LIST
50387: PUSH
50388: LD_VAR 0 1
50392: PUSH
50393: LD_INT 4
50395: PLUS
50396: PUSH
50397: LD_VAR 0 2
50401: PUSH
50402: LD_INT 4
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: LIST
50409: PUSH
50410: LD_VAR 0 1
50414: PUSH
50415: LD_VAR 0 2
50419: PUSH
50420: LD_INT 4
50422: PLUS
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: LIST
50431: PUSH
50432: LD_VAR 0 1
50436: PUSH
50437: LD_INT 3
50439: MINUS
50440: PUSH
50441: LD_VAR 0 2
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: LIST
50453: PUSH
50454: LD_VAR 0 1
50458: PUSH
50459: LD_INT 4
50461: MINUS
50462: PUSH
50463: LD_VAR 0 2
50467: PUSH
50468: LD_INT 4
50470: MINUS
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: LIST
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: ST_TO_ADDR
// end ; 3 :
50487: GO 50909
50489: LD_INT 3
50491: DOUBLE
50492: EQUAL
50493: IFTRUE 50497
50495: GO 50630
50497: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50498: LD_ADDR_VAR 0 5
50502: PUSH
50503: LD_VAR 0 1
50507: PUSH
50508: LD_INT 3
50510: PLUS
50511: PUSH
50512: LD_VAR 0 2
50516: PUSH
50517: LD_INT 4
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: LIST
50524: PUSH
50525: LD_VAR 0 1
50529: PUSH
50530: LD_INT 4
50532: PLUS
50533: PUSH
50534: LD_VAR 0 2
50538: PUSH
50539: LD_INT 4
50541: PLUS
50542: PUSH
50543: LD_INT 5
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: LIST
50550: PUSH
50551: LD_VAR 0 1
50555: PUSH
50556: LD_INT 4
50558: MINUS
50559: PUSH
50560: LD_VAR 0 2
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: LIST
50572: PUSH
50573: LD_VAR 0 1
50577: PUSH
50578: LD_VAR 0 2
50582: PUSH
50583: LD_INT 4
50585: MINUS
50586: PUSH
50587: LD_INT 3
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: LIST
50594: PUSH
50595: LD_VAR 0 1
50599: PUSH
50600: LD_INT 3
50602: MINUS
50603: PUSH
50604: LD_VAR 0 2
50608: PUSH
50609: LD_INT 3
50611: MINUS
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: LIST
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: ST_TO_ADDR
// end ; 4 :
50628: GO 50909
50630: LD_INT 4
50632: DOUBLE
50633: EQUAL
50634: IFTRUE 50638
50636: GO 50771
50638: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50639: LD_ADDR_VAR 0 5
50643: PUSH
50644: LD_VAR 0 1
50648: PUSH
50649: LD_VAR 0 2
50653: PUSH
50654: LD_INT 4
50656: PLUS
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: LIST
50665: PUSH
50666: LD_VAR 0 1
50670: PUSH
50671: LD_INT 3
50673: PLUS
50674: PUSH
50675: LD_VAR 0 2
50679: PUSH
50680: LD_INT 3
50682: PLUS
50683: PUSH
50684: LD_INT 5
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: LIST
50691: PUSH
50692: LD_VAR 0 1
50696: PUSH
50697: LD_INT 4
50699: PLUS
50700: PUSH
50701: LD_VAR 0 2
50705: PUSH
50706: LD_INT 4
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: LIST
50713: PUSH
50714: LD_VAR 0 1
50718: PUSH
50719: LD_VAR 0 2
50723: PUSH
50724: LD_INT 3
50726: MINUS
50727: PUSH
50728: LD_INT 3
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: LIST
50735: PUSH
50736: LD_VAR 0 1
50740: PUSH
50741: LD_INT 4
50743: MINUS
50744: PUSH
50745: LD_VAR 0 2
50749: PUSH
50750: LD_INT 4
50752: MINUS
50753: PUSH
50754: LD_INT 2
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: LIST
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: ST_TO_ADDR
// end ; 5 :
50769: GO 50909
50771: LD_INT 5
50773: DOUBLE
50774: EQUAL
50775: IFTRUE 50779
50777: GO 50908
50779: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
50780: LD_ADDR_VAR 0 5
50784: PUSH
50785: LD_VAR 0 1
50789: PUSH
50790: LD_INT 4
50792: MINUS
50793: PUSH
50794: LD_VAR 0 2
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: LIST
50806: PUSH
50807: LD_VAR 0 1
50811: PUSH
50812: LD_VAR 0 2
50816: PUSH
50817: LD_INT 4
50819: MINUS
50820: PUSH
50821: LD_INT 3
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: LIST
50828: PUSH
50829: LD_VAR 0 1
50833: PUSH
50834: LD_INT 4
50836: PLUS
50837: PUSH
50838: LD_VAR 0 2
50842: PUSH
50843: LD_INT 4
50845: PLUS
50846: PUSH
50847: LD_INT 5
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: LIST
50854: PUSH
50855: LD_VAR 0 1
50859: PUSH
50860: LD_INT 3
50862: PLUS
50863: PUSH
50864: LD_VAR 0 2
50868: PUSH
50869: LD_INT 4
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: LIST
50876: PUSH
50877: LD_VAR 0 1
50881: PUSH
50882: LD_VAR 0 2
50886: PUSH
50887: LD_INT 3
50889: PLUS
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: LIST
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: ST_TO_ADDR
// end ; end ;
50906: GO 50909
50908: POP
// result := list ;
50909: LD_ADDR_VAR 0 4
50913: PUSH
50914: LD_VAR 0 5
50918: ST_TO_ADDR
// end ;
50919: LD_VAR 0 4
50923: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
50924: LD_INT 0
50926: PPUSH
50927: PPUSH
50928: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
50929: LD_VAR 0 1
50933: NOT
50934: PUSH
50935: LD_VAR 0 2
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 2
50945: PUSH
50946: LD_INT 3
50948: PUSH
50949: LD_INT 4
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: IN
50958: NOT
50959: OR
50960: IFFALSE 50964
// exit ;
50962: GO 51047
// tmp := [ ] ;
50964: LD_ADDR_VAR 0 5
50968: PUSH
50969: EMPTY
50970: ST_TO_ADDR
// for i in units do
50971: LD_ADDR_VAR 0 4
50975: PUSH
50976: LD_VAR 0 1
50980: PUSH
50981: FOR_IN
50982: IFFALSE 51016
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
50984: LD_ADDR_VAR 0 5
50988: PUSH
50989: LD_VAR 0 5
50993: PPUSH
50994: LD_VAR 0 4
50998: PPUSH
50999: LD_VAR 0 2
51003: PPUSH
51004: CALL_OW 259
51008: PPUSH
51009: CALL 52420 0 2
51013: ST_TO_ADDR
51014: GO 50981
51016: POP
51017: POP
// if not tmp then
51018: LD_VAR 0 5
51022: NOT
51023: IFFALSE 51027
// exit ;
51025: GO 51047
// result := SortListByListDesc ( units , tmp ) ;
51027: LD_ADDR_VAR 0 3
51031: PUSH
51032: LD_VAR 0 1
51036: PPUSH
51037: LD_VAR 0 5
51041: PPUSH
51042: CALL_OW 77
51046: ST_TO_ADDR
// end ;
51047: LD_VAR 0 3
51051: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51052: LD_INT 0
51054: PPUSH
51055: PPUSH
51056: PPUSH
// result := false ;
51057: LD_ADDR_VAR 0 3
51061: PUSH
51062: LD_INT 0
51064: ST_TO_ADDR
// if not building then
51065: LD_VAR 0 2
51069: NOT
51070: IFFALSE 51074
// exit ;
51072: GO 51212
// x := GetX ( building ) ;
51074: LD_ADDR_VAR 0 4
51078: PUSH
51079: LD_VAR 0 2
51083: PPUSH
51084: CALL_OW 250
51088: ST_TO_ADDR
// y := GetY ( building ) ;
51089: LD_ADDR_VAR 0 5
51093: PUSH
51094: LD_VAR 0 2
51098: PPUSH
51099: CALL_OW 251
51103: ST_TO_ADDR
// if not x or not y then
51104: LD_VAR 0 4
51108: NOT
51109: PUSH
51110: LD_VAR 0 5
51114: NOT
51115: OR
51116: IFFALSE 51120
// exit ;
51118: GO 51212
// if GetTaskList ( unit ) then
51120: LD_VAR 0 1
51124: PPUSH
51125: CALL_OW 437
51129: IFFALSE 51212
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51131: LD_STRING e
51133: PUSH
51134: LD_VAR 0 1
51138: PPUSH
51139: CALL_OW 437
51143: PUSH
51144: LD_INT 1
51146: ARRAY
51147: PUSH
51148: LD_INT 1
51150: ARRAY
51151: EQUAL
51152: PUSH
51153: LD_VAR 0 4
51157: PUSH
51158: LD_VAR 0 1
51162: PPUSH
51163: CALL_OW 437
51167: PUSH
51168: LD_INT 1
51170: ARRAY
51171: PUSH
51172: LD_INT 2
51174: ARRAY
51175: EQUAL
51176: AND
51177: PUSH
51178: LD_VAR 0 5
51182: PUSH
51183: LD_VAR 0 1
51187: PPUSH
51188: CALL_OW 437
51192: PUSH
51193: LD_INT 1
51195: ARRAY
51196: PUSH
51197: LD_INT 3
51199: ARRAY
51200: EQUAL
51201: AND
51202: IFFALSE 51212
// result := true end ;
51204: LD_ADDR_VAR 0 3
51208: PUSH
51209: LD_INT 1
51211: ST_TO_ADDR
// end ;
51212: LD_VAR 0 3
51216: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51217: LD_INT 0
51219: PPUSH
// result := false ;
51220: LD_ADDR_VAR 0 4
51224: PUSH
51225: LD_INT 0
51227: ST_TO_ADDR
// if GetTaskList ( unit ) then
51228: LD_VAR 0 1
51232: PPUSH
51233: CALL_OW 437
51237: IFFALSE 51320
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51239: LD_STRING M
51241: PUSH
51242: LD_VAR 0 1
51246: PPUSH
51247: CALL_OW 437
51251: PUSH
51252: LD_INT 1
51254: ARRAY
51255: PUSH
51256: LD_INT 1
51258: ARRAY
51259: EQUAL
51260: PUSH
51261: LD_VAR 0 2
51265: PUSH
51266: LD_VAR 0 1
51270: PPUSH
51271: CALL_OW 437
51275: PUSH
51276: LD_INT 1
51278: ARRAY
51279: PUSH
51280: LD_INT 2
51282: ARRAY
51283: EQUAL
51284: AND
51285: PUSH
51286: LD_VAR 0 3
51290: PUSH
51291: LD_VAR 0 1
51295: PPUSH
51296: CALL_OW 437
51300: PUSH
51301: LD_INT 1
51303: ARRAY
51304: PUSH
51305: LD_INT 3
51307: ARRAY
51308: EQUAL
51309: AND
51310: IFFALSE 51320
// result := true ;
51312: LD_ADDR_VAR 0 4
51316: PUSH
51317: LD_INT 1
51319: ST_TO_ADDR
// end ; end ;
51320: LD_VAR 0 4
51324: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51325: LD_INT 0
51327: PPUSH
51328: PPUSH
51329: PPUSH
51330: PPUSH
// if not unit or not area then
51331: LD_VAR 0 1
51335: NOT
51336: PUSH
51337: LD_VAR 0 2
51341: NOT
51342: OR
51343: IFFALSE 51347
// exit ;
51345: GO 51523
// tmp := AreaToList ( area , i ) ;
51347: LD_ADDR_VAR 0 6
51351: PUSH
51352: LD_VAR 0 2
51356: PPUSH
51357: LD_VAR 0 5
51361: PPUSH
51362: CALL_OW 517
51366: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51367: LD_ADDR_VAR 0 5
51371: PUSH
51372: DOUBLE
51373: LD_INT 1
51375: DEC
51376: ST_TO_ADDR
51377: LD_VAR 0 6
51381: PUSH
51382: LD_INT 1
51384: ARRAY
51385: PUSH
51386: FOR_TO
51387: IFFALSE 51521
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51389: LD_ADDR_VAR 0 7
51393: PUSH
51394: LD_VAR 0 6
51398: PUSH
51399: LD_INT 1
51401: ARRAY
51402: PUSH
51403: LD_VAR 0 5
51407: ARRAY
51408: PUSH
51409: LD_VAR 0 6
51413: PUSH
51414: LD_INT 2
51416: ARRAY
51417: PUSH
51418: LD_VAR 0 5
51422: ARRAY
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
51428: LD_INT 92
51430: PUSH
51431: LD_VAR 0 7
51435: PUSH
51436: LD_INT 1
51438: ARRAY
51439: PUSH
51440: LD_VAR 0 7
51444: PUSH
51445: LD_INT 2
51447: ARRAY
51448: PUSH
51449: LD_INT 2
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: PPUSH
51458: CALL_OW 69
51462: PUSH
51463: LD_INT 0
51465: EQUAL
51466: IFFALSE 51519
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51468: LD_VAR 0 1
51472: PPUSH
51473: LD_VAR 0 7
51477: PUSH
51478: LD_INT 1
51480: ARRAY
51481: PPUSH
51482: LD_VAR 0 7
51486: PUSH
51487: LD_INT 2
51489: ARRAY
51490: PPUSH
51491: LD_VAR 0 3
51495: PPUSH
51496: CALL_OW 48
// result := IsPlaced ( unit ) ;
51500: LD_ADDR_VAR 0 4
51504: PUSH
51505: LD_VAR 0 1
51509: PPUSH
51510: CALL_OW 305
51514: ST_TO_ADDR
// exit ;
51515: POP
51516: POP
51517: GO 51523
// end ; end ;
51519: GO 51386
51521: POP
51522: POP
// end ;
51523: LD_VAR 0 4
51527: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51528: LD_INT 0
51530: PPUSH
51531: PPUSH
51532: PPUSH
// if not side or side > 8 then
51533: LD_VAR 0 1
51537: NOT
51538: PUSH
51539: LD_VAR 0 1
51543: PUSH
51544: LD_INT 8
51546: GREATER
51547: OR
51548: IFFALSE 51552
// exit ;
51550: GO 51739
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51552: LD_ADDR_VAR 0 4
51556: PUSH
51557: LD_INT 22
51559: PUSH
51560: LD_VAR 0 1
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 21
51571: PUSH
51572: LD_INT 3
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PPUSH
51583: CALL_OW 69
51587: ST_TO_ADDR
// if not tmp then
51588: LD_VAR 0 4
51592: NOT
51593: IFFALSE 51597
// exit ;
51595: GO 51739
// enable_addtolog := true ;
51597: LD_ADDR_OWVAR 81
51601: PUSH
51602: LD_INT 1
51604: ST_TO_ADDR
// AddToLog ( [ ) ;
51605: LD_STRING [
51607: PPUSH
51608: CALL_OW 561
// for i in tmp do
51612: LD_ADDR_VAR 0 3
51616: PUSH
51617: LD_VAR 0 4
51621: PUSH
51622: FOR_IN
51623: IFFALSE 51730
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51625: LD_STRING [
51627: PUSH
51628: LD_VAR 0 3
51632: PPUSH
51633: CALL_OW 266
51637: STR
51638: PUSH
51639: LD_STRING , 
51641: STR
51642: PUSH
51643: LD_VAR 0 3
51647: PPUSH
51648: CALL_OW 250
51652: STR
51653: PUSH
51654: LD_STRING , 
51656: STR
51657: PUSH
51658: LD_VAR 0 3
51662: PPUSH
51663: CALL_OW 251
51667: STR
51668: PUSH
51669: LD_STRING , 
51671: STR
51672: PUSH
51673: LD_VAR 0 3
51677: PPUSH
51678: CALL_OW 254
51682: STR
51683: PUSH
51684: LD_STRING , 
51686: STR
51687: PUSH
51688: LD_VAR 0 3
51692: PPUSH
51693: LD_INT 1
51695: PPUSH
51696: CALL_OW 268
51700: STR
51701: PUSH
51702: LD_STRING , 
51704: STR
51705: PUSH
51706: LD_VAR 0 3
51710: PPUSH
51711: LD_INT 2
51713: PPUSH
51714: CALL_OW 268
51718: STR
51719: PUSH
51720: LD_STRING ],
51722: STR
51723: PPUSH
51724: CALL_OW 561
// end ;
51728: GO 51622
51730: POP
51731: POP
// AddToLog ( ]; ) ;
51732: LD_STRING ];
51734: PPUSH
51735: CALL_OW 561
// end ;
51739: LD_VAR 0 2
51743: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
51744: LD_INT 0
51746: PPUSH
51747: PPUSH
51748: PPUSH
51749: PPUSH
51750: PPUSH
// if not area or not rate or not max then
51751: LD_VAR 0 1
51755: NOT
51756: PUSH
51757: LD_VAR 0 2
51761: NOT
51762: OR
51763: PUSH
51764: LD_VAR 0 4
51768: NOT
51769: OR
51770: IFFALSE 51774
// exit ;
51772: GO 51963
// while 1 do
51774: LD_INT 1
51776: IFFALSE 51963
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
51778: LD_ADDR_VAR 0 9
51782: PUSH
51783: LD_VAR 0 1
51787: PPUSH
51788: LD_INT 1
51790: PPUSH
51791: CALL_OW 287
51795: PUSH
51796: LD_INT 10
51798: MUL
51799: ST_TO_ADDR
// r := rate / 10 ;
51800: LD_ADDR_VAR 0 7
51804: PUSH
51805: LD_VAR 0 2
51809: PUSH
51810: LD_INT 10
51812: DIVREAL
51813: ST_TO_ADDR
// time := 1 1$00 ;
51814: LD_ADDR_VAR 0 8
51818: PUSH
51819: LD_INT 2100
51821: ST_TO_ADDR
// if amount < min then
51822: LD_VAR 0 9
51826: PUSH
51827: LD_VAR 0 3
51831: LESS
51832: IFFALSE 51850
// r := r * 2 else
51834: LD_ADDR_VAR 0 7
51838: PUSH
51839: LD_VAR 0 7
51843: PUSH
51844: LD_INT 2
51846: MUL
51847: ST_TO_ADDR
51848: GO 51876
// if amount > max then
51850: LD_VAR 0 9
51854: PUSH
51855: LD_VAR 0 4
51859: GREATER
51860: IFFALSE 51876
// r := r / 2 ;
51862: LD_ADDR_VAR 0 7
51866: PUSH
51867: LD_VAR 0 7
51871: PUSH
51872: LD_INT 2
51874: DIVREAL
51875: ST_TO_ADDR
// time := time / r ;
51876: LD_ADDR_VAR 0 8
51880: PUSH
51881: LD_VAR 0 8
51885: PUSH
51886: LD_VAR 0 7
51890: DIVREAL
51891: ST_TO_ADDR
// if time < 0 then
51892: LD_VAR 0 8
51896: PUSH
51897: LD_INT 0
51899: LESS
51900: IFFALSE 51917
// time := time * - 1 ;
51902: LD_ADDR_VAR 0 8
51906: PUSH
51907: LD_VAR 0 8
51911: PUSH
51912: LD_INT 1
51914: NEG
51915: MUL
51916: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
51917: LD_VAR 0 8
51921: PUSH
51922: LD_INT 35
51924: PPUSH
51925: LD_INT 875
51927: PPUSH
51928: CALL_OW 12
51932: PLUS
51933: PPUSH
51934: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
51938: LD_INT 1
51940: PPUSH
51941: LD_INT 5
51943: PPUSH
51944: CALL_OW 12
51948: PPUSH
51949: LD_VAR 0 1
51953: PPUSH
51954: LD_INT 1
51956: PPUSH
51957: CALL_OW 55
// end ;
51961: GO 51774
// end ;
51963: LD_VAR 0 5
51967: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
51968: LD_INT 0
51970: PPUSH
51971: PPUSH
51972: PPUSH
51973: PPUSH
51974: PPUSH
51975: PPUSH
51976: PPUSH
51977: PPUSH
// if not turrets or not factories then
51978: LD_VAR 0 1
51982: NOT
51983: PUSH
51984: LD_VAR 0 2
51988: NOT
51989: OR
51990: IFFALSE 51994
// exit ;
51992: GO 52301
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
51994: LD_ADDR_VAR 0 10
51998: PUSH
51999: LD_INT 5
52001: PUSH
52002: LD_INT 6
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: LD_INT 4
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 3
52021: PUSH
52022: LD_INT 5
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 24
52036: PUSH
52037: LD_INT 25
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 23
52046: PUSH
52047: LD_INT 27
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 42
52060: PUSH
52061: LD_INT 43
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 44
52070: PUSH
52071: LD_INT 46
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 45
52080: PUSH
52081: LD_INT 47
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: LIST
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: LIST
52097: ST_TO_ADDR
// result := [ ] ;
52098: LD_ADDR_VAR 0 3
52102: PUSH
52103: EMPTY
52104: ST_TO_ADDR
// for i in turrets do
52105: LD_ADDR_VAR 0 4
52109: PUSH
52110: LD_VAR 0 1
52114: PUSH
52115: FOR_IN
52116: IFFALSE 52299
// begin nat := GetNation ( i ) ;
52118: LD_ADDR_VAR 0 7
52122: PUSH
52123: LD_VAR 0 4
52127: PPUSH
52128: CALL_OW 248
52132: ST_TO_ADDR
// weapon := 0 ;
52133: LD_ADDR_VAR 0 8
52137: PUSH
52138: LD_INT 0
52140: ST_TO_ADDR
// if not nat then
52141: LD_VAR 0 7
52145: NOT
52146: IFFALSE 52150
// continue ;
52148: GO 52115
// for j in list [ nat ] do
52150: LD_ADDR_VAR 0 5
52154: PUSH
52155: LD_VAR 0 10
52159: PUSH
52160: LD_VAR 0 7
52164: ARRAY
52165: PUSH
52166: FOR_IN
52167: IFFALSE 52208
// if GetBWeapon ( i ) = j [ 1 ] then
52169: LD_VAR 0 4
52173: PPUSH
52174: CALL_OW 269
52178: PUSH
52179: LD_VAR 0 5
52183: PUSH
52184: LD_INT 1
52186: ARRAY
52187: EQUAL
52188: IFFALSE 52206
// begin weapon := j [ 2 ] ;
52190: LD_ADDR_VAR 0 8
52194: PUSH
52195: LD_VAR 0 5
52199: PUSH
52200: LD_INT 2
52202: ARRAY
52203: ST_TO_ADDR
// break ;
52204: GO 52208
// end ;
52206: GO 52166
52208: POP
52209: POP
// if not weapon then
52210: LD_VAR 0 8
52214: NOT
52215: IFFALSE 52219
// continue ;
52217: GO 52115
// for k in factories do
52219: LD_ADDR_VAR 0 6
52223: PUSH
52224: LD_VAR 0 2
52228: PUSH
52229: FOR_IN
52230: IFFALSE 52295
// begin weapons := AvailableWeaponList ( k ) ;
52232: LD_ADDR_VAR 0 9
52236: PUSH
52237: LD_VAR 0 6
52241: PPUSH
52242: CALL_OW 478
52246: ST_TO_ADDR
// if not weapons then
52247: LD_VAR 0 9
52251: NOT
52252: IFFALSE 52256
// continue ;
52254: GO 52229
// if weapon in weapons then
52256: LD_VAR 0 8
52260: PUSH
52261: LD_VAR 0 9
52265: IN
52266: IFFALSE 52293
// begin result := [ i , weapon ] ;
52268: LD_ADDR_VAR 0 3
52272: PUSH
52273: LD_VAR 0 4
52277: PUSH
52278: LD_VAR 0 8
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: ST_TO_ADDR
// exit ;
52287: POP
52288: POP
52289: POP
52290: POP
52291: GO 52301
// end ; end ;
52293: GO 52229
52295: POP
52296: POP
// end ;
52297: GO 52115
52299: POP
52300: POP
// end ;
52301: LD_VAR 0 3
52305: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52306: LD_INT 0
52308: PPUSH
// if not side or side > 8 then
52309: LD_VAR 0 3
52313: NOT
52314: PUSH
52315: LD_VAR 0 3
52319: PUSH
52320: LD_INT 8
52322: GREATER
52323: OR
52324: IFFALSE 52328
// exit ;
52326: GO 52387
// if not range then
52328: LD_VAR 0 4
52332: NOT
52333: IFFALSE 52344
// range := - 12 ;
52335: LD_ADDR_VAR 0 4
52339: PUSH
52340: LD_INT 12
52342: NEG
52343: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52344: LD_VAR 0 1
52348: PPUSH
52349: LD_VAR 0 2
52353: PPUSH
52354: LD_VAR 0 3
52358: PPUSH
52359: LD_VAR 0 4
52363: PPUSH
52364: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52368: LD_VAR 0 1
52372: PPUSH
52373: LD_VAR 0 2
52377: PPUSH
52378: LD_VAR 0 3
52382: PPUSH
52383: CALL_OW 331
// end ;
52387: LD_VAR 0 5
52391: RET
// export function Video ( mode ) ; begin
52392: LD_INT 0
52394: PPUSH
// ingame_video = mode ;
52395: LD_ADDR_OWVAR 52
52399: PUSH
52400: LD_VAR 0 1
52404: ST_TO_ADDR
// interface_hidden = mode ;
52405: LD_ADDR_OWVAR 54
52409: PUSH
52410: LD_VAR 0 1
52414: ST_TO_ADDR
// end ;
52415: LD_VAR 0 2
52419: RET
// export function Join ( array , element ) ; begin
52420: LD_INT 0
52422: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52423: LD_ADDR_VAR 0 3
52427: PUSH
52428: LD_VAR 0 1
52432: PPUSH
52433: LD_VAR 0 1
52437: PUSH
52438: LD_INT 1
52440: PLUS
52441: PPUSH
52442: LD_VAR 0 2
52446: PPUSH
52447: CALL_OW 1
52451: ST_TO_ADDR
// end ;
52452: LD_VAR 0 3
52456: RET
// export function JoinUnion ( array , element ) ; begin
52457: LD_INT 0
52459: PPUSH
// result := array union element ;
52460: LD_ADDR_VAR 0 3
52464: PUSH
52465: LD_VAR 0 1
52469: PUSH
52470: LD_VAR 0 2
52474: UNION
52475: ST_TO_ADDR
// end ;
52476: LD_VAR 0 3
52480: RET
// export function GetBehemoths ( side ) ; begin
52481: LD_INT 0
52483: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
52484: LD_ADDR_VAR 0 2
52488: PUSH
52489: LD_INT 22
52491: PUSH
52492: LD_VAR 0 1
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 31
52503: PUSH
52504: LD_INT 25
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PPUSH
52515: CALL_OW 69
52519: ST_TO_ADDR
// end ;
52520: LD_VAR 0 2
52524: RET
// export function Shuffle ( array ) ; var i , index ; begin
52525: LD_INT 0
52527: PPUSH
52528: PPUSH
52529: PPUSH
// result := [ ] ;
52530: LD_ADDR_VAR 0 2
52534: PUSH
52535: EMPTY
52536: ST_TO_ADDR
// if not array then
52537: LD_VAR 0 1
52541: NOT
52542: IFFALSE 52546
// exit ;
52544: GO 52645
// Randomize ;
52546: CALL_OW 10
// for i = array downto 1 do
52550: LD_ADDR_VAR 0 3
52554: PUSH
52555: DOUBLE
52556: LD_VAR 0 1
52560: INC
52561: ST_TO_ADDR
52562: LD_INT 1
52564: PUSH
52565: FOR_DOWNTO
52566: IFFALSE 52643
// begin index := rand ( 1 , array ) ;
52568: LD_ADDR_VAR 0 4
52572: PUSH
52573: LD_INT 1
52575: PPUSH
52576: LD_VAR 0 1
52580: PPUSH
52581: CALL_OW 12
52585: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52586: LD_ADDR_VAR 0 2
52590: PUSH
52591: LD_VAR 0 2
52595: PPUSH
52596: LD_VAR 0 2
52600: PUSH
52601: LD_INT 1
52603: PLUS
52604: PPUSH
52605: LD_VAR 0 1
52609: PUSH
52610: LD_VAR 0 4
52614: ARRAY
52615: PPUSH
52616: CALL_OW 2
52620: ST_TO_ADDR
// array := Delete ( array , index ) ;
52621: LD_ADDR_VAR 0 1
52625: PUSH
52626: LD_VAR 0 1
52630: PPUSH
52631: LD_VAR 0 4
52635: PPUSH
52636: CALL_OW 3
52640: ST_TO_ADDR
// end ;
52641: GO 52565
52643: POP
52644: POP
// end ;
52645: LD_VAR 0 2
52649: RET
// export function GetBaseMaterials ( base ) ; begin
52650: LD_INT 0
52652: PPUSH
// result := [ 0 , 0 , 0 ] ;
52653: LD_ADDR_VAR 0 2
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: LIST
52671: ST_TO_ADDR
// if not base then
52672: LD_VAR 0 1
52676: NOT
52677: IFFALSE 52681
// exit ;
52679: GO 52730
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
52681: LD_ADDR_VAR 0 2
52685: PUSH
52686: LD_VAR 0 1
52690: PPUSH
52691: LD_INT 1
52693: PPUSH
52694: CALL_OW 275
52698: PUSH
52699: LD_VAR 0 1
52703: PPUSH
52704: LD_INT 2
52706: PPUSH
52707: CALL_OW 275
52711: PUSH
52712: LD_VAR 0 1
52716: PPUSH
52717: LD_INT 3
52719: PPUSH
52720: CALL_OW 275
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: LIST
52729: ST_TO_ADDR
// end ;
52730: LD_VAR 0 2
52734: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
52735: LD_INT 0
52737: PPUSH
52738: PPUSH
// result := array ;
52739: LD_ADDR_VAR 0 3
52743: PUSH
52744: LD_VAR 0 1
52748: ST_TO_ADDR
// if size >= result then
52749: LD_VAR 0 2
52753: PUSH
52754: LD_VAR 0 3
52758: GREATEREQUAL
52759: IFFALSE 52763
// exit ;
52761: GO 52813
// if size then
52763: LD_VAR 0 2
52767: IFFALSE 52813
// for i := array downto size do
52769: LD_ADDR_VAR 0 4
52773: PUSH
52774: DOUBLE
52775: LD_VAR 0 1
52779: INC
52780: ST_TO_ADDR
52781: LD_VAR 0 2
52785: PUSH
52786: FOR_DOWNTO
52787: IFFALSE 52811
// result := Delete ( result , result ) ;
52789: LD_ADDR_VAR 0 3
52793: PUSH
52794: LD_VAR 0 3
52798: PPUSH
52799: LD_VAR 0 3
52803: PPUSH
52804: CALL_OW 3
52808: ST_TO_ADDR
52809: GO 52786
52811: POP
52812: POP
// end ;
52813: LD_VAR 0 3
52817: RET
// export function ComExit ( unit ) ; var tmp ; begin
52818: LD_INT 0
52820: PPUSH
52821: PPUSH
// if not IsInUnit ( unit ) then
52822: LD_VAR 0 1
52826: PPUSH
52827: CALL_OW 310
52831: NOT
52832: IFFALSE 52836
// exit ;
52834: GO 52896
// tmp := IsInUnit ( unit ) ;
52836: LD_ADDR_VAR 0 3
52840: PUSH
52841: LD_VAR 0 1
52845: PPUSH
52846: CALL_OW 310
52850: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
52851: LD_VAR 0 3
52855: PPUSH
52856: CALL_OW 247
52860: PUSH
52861: LD_INT 2
52863: EQUAL
52864: IFFALSE 52877
// ComExitVehicle ( unit ) else
52866: LD_VAR 0 1
52870: PPUSH
52871: CALL_OW 121
52875: GO 52886
// ComExitBuilding ( unit ) ;
52877: LD_VAR 0 1
52881: PPUSH
52882: CALL_OW 122
// result := tmp ;
52886: LD_ADDR_VAR 0 2
52890: PUSH
52891: LD_VAR 0 3
52895: ST_TO_ADDR
// end ;
52896: LD_VAR 0 2
52900: RET
// export function ComExitAll ( units ) ; var i ; begin
52901: LD_INT 0
52903: PPUSH
52904: PPUSH
// if not units then
52905: LD_VAR 0 1
52909: NOT
52910: IFFALSE 52914
// exit ;
52912: GO 52940
// for i in units do
52914: LD_ADDR_VAR 0 3
52918: PUSH
52919: LD_VAR 0 1
52923: PUSH
52924: FOR_IN
52925: IFFALSE 52938
// ComExit ( i ) ;
52927: LD_VAR 0 3
52931: PPUSH
52932: CALL 52818 0 1
52936: GO 52924
52938: POP
52939: POP
// end ;
52940: LD_VAR 0 2
52944: RET
// export function ResetHc ; begin
52945: LD_INT 0
52947: PPUSH
// InitHc ;
52948: CALL_OW 19
// hc_importance := 0 ;
52952: LD_ADDR_OWVAR 32
52956: PUSH
52957: LD_INT 0
52959: ST_TO_ADDR
// end ;
52960: LD_VAR 0 1
52964: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
52965: LD_INT 0
52967: PPUSH
52968: PPUSH
52969: PPUSH
// _x := ( x1 + x2 ) div 2 ;
52970: LD_ADDR_VAR 0 6
52974: PUSH
52975: LD_VAR 0 1
52979: PUSH
52980: LD_VAR 0 3
52984: PLUS
52985: PUSH
52986: LD_INT 2
52988: DIV
52989: ST_TO_ADDR
// if _x < 0 then
52990: LD_VAR 0 6
52994: PUSH
52995: LD_INT 0
52997: LESS
52998: IFFALSE 53015
// _x := _x * - 1 ;
53000: LD_ADDR_VAR 0 6
53004: PUSH
53005: LD_VAR 0 6
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: MUL
53014: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53015: LD_ADDR_VAR 0 7
53019: PUSH
53020: LD_VAR 0 2
53024: PUSH
53025: LD_VAR 0 4
53029: PLUS
53030: PUSH
53031: LD_INT 2
53033: DIV
53034: ST_TO_ADDR
// if _y < 0 then
53035: LD_VAR 0 7
53039: PUSH
53040: LD_INT 0
53042: LESS
53043: IFFALSE 53060
// _y := _y * - 1 ;
53045: LD_ADDR_VAR 0 7
53049: PUSH
53050: LD_VAR 0 7
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: MUL
53059: ST_TO_ADDR
// result := [ _x , _y ] ;
53060: LD_ADDR_VAR 0 5
53064: PUSH
53065: LD_VAR 0 6
53069: PUSH
53070: LD_VAR 0 7
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: ST_TO_ADDR
// end ;
53079: LD_VAR 0 5
53083: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53084: LD_INT 0
53086: PPUSH
53087: PPUSH
53088: PPUSH
53089: PPUSH
// task := GetTaskList ( unit ) ;
53090: LD_ADDR_VAR 0 7
53094: PUSH
53095: LD_VAR 0 1
53099: PPUSH
53100: CALL_OW 437
53104: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53105: LD_VAR 0 7
53109: NOT
53110: PUSH
53111: LD_VAR 0 1
53115: PPUSH
53116: LD_VAR 0 2
53120: PPUSH
53121: CALL_OW 308
53125: NOT
53126: AND
53127: IFFALSE 53131
// exit ;
53129: GO 53249
// if IsInArea ( unit , area ) then
53131: LD_VAR 0 1
53135: PPUSH
53136: LD_VAR 0 2
53140: PPUSH
53141: CALL_OW 308
53145: IFFALSE 53163
// begin ComMoveToArea ( unit , goAway ) ;
53147: LD_VAR 0 1
53151: PPUSH
53152: LD_VAR 0 3
53156: PPUSH
53157: CALL_OW 113
// exit ;
53161: GO 53249
// end ; if task [ 1 ] [ 1 ] <> M then
53163: LD_VAR 0 7
53167: PUSH
53168: LD_INT 1
53170: ARRAY
53171: PUSH
53172: LD_INT 1
53174: ARRAY
53175: PUSH
53176: LD_STRING M
53178: NONEQUAL
53179: IFFALSE 53183
// exit ;
53181: GO 53249
// x := task [ 1 ] [ 2 ] ;
53183: LD_ADDR_VAR 0 5
53187: PUSH
53188: LD_VAR 0 7
53192: PUSH
53193: LD_INT 1
53195: ARRAY
53196: PUSH
53197: LD_INT 2
53199: ARRAY
53200: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53201: LD_ADDR_VAR 0 6
53205: PUSH
53206: LD_VAR 0 7
53210: PUSH
53211: LD_INT 1
53213: ARRAY
53214: PUSH
53215: LD_INT 3
53217: ARRAY
53218: ST_TO_ADDR
// if InArea ( x , y , area ) then
53219: LD_VAR 0 5
53223: PPUSH
53224: LD_VAR 0 6
53228: PPUSH
53229: LD_VAR 0 2
53233: PPUSH
53234: CALL_OW 309
53238: IFFALSE 53249
// ComStop ( unit ) ;
53240: LD_VAR 0 1
53244: PPUSH
53245: CALL_OW 141
// end ;
53249: LD_VAR 0 4
53253: RET
// export function Abs ( value ) ; begin
53254: LD_INT 0
53256: PPUSH
// result := value ;
53257: LD_ADDR_VAR 0 2
53261: PUSH
53262: LD_VAR 0 1
53266: ST_TO_ADDR
// if value < 0 then
53267: LD_VAR 0 1
53271: PUSH
53272: LD_INT 0
53274: LESS
53275: IFFALSE 53292
// result := value * - 1 ;
53277: LD_ADDR_VAR 0 2
53281: PUSH
53282: LD_VAR 0 1
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: MUL
53291: ST_TO_ADDR
// end ;
53292: LD_VAR 0 2
53296: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53297: LD_INT 0
53299: PPUSH
53300: PPUSH
53301: PPUSH
53302: PPUSH
53303: PPUSH
53304: PPUSH
53305: PPUSH
53306: PPUSH
// if not unit or not building then
53307: LD_VAR 0 1
53311: NOT
53312: PUSH
53313: LD_VAR 0 2
53317: NOT
53318: OR
53319: IFFALSE 53323
// exit ;
53321: GO 53549
// x := GetX ( building ) ;
53323: LD_ADDR_VAR 0 4
53327: PUSH
53328: LD_VAR 0 2
53332: PPUSH
53333: CALL_OW 250
53337: ST_TO_ADDR
// y := GetY ( building ) ;
53338: LD_ADDR_VAR 0 6
53342: PUSH
53343: LD_VAR 0 2
53347: PPUSH
53348: CALL_OW 251
53352: ST_TO_ADDR
// d := GetDir ( building ) ;
53353: LD_ADDR_VAR 0 8
53357: PUSH
53358: LD_VAR 0 2
53362: PPUSH
53363: CALL_OW 254
53367: ST_TO_ADDR
// r := 4 ;
53368: LD_ADDR_VAR 0 9
53372: PUSH
53373: LD_INT 4
53375: ST_TO_ADDR
// for i := 1 to 5 do
53376: LD_ADDR_VAR 0 10
53380: PUSH
53381: DOUBLE
53382: LD_INT 1
53384: DEC
53385: ST_TO_ADDR
53386: LD_INT 5
53388: PUSH
53389: FOR_TO
53390: IFFALSE 53547
// begin _x := ShiftX ( x , d , r + i ) ;
53392: LD_ADDR_VAR 0 5
53396: PUSH
53397: LD_VAR 0 4
53401: PPUSH
53402: LD_VAR 0 8
53406: PPUSH
53407: LD_VAR 0 9
53411: PUSH
53412: LD_VAR 0 10
53416: PLUS
53417: PPUSH
53418: CALL_OW 272
53422: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53423: LD_ADDR_VAR 0 7
53427: PUSH
53428: LD_VAR 0 6
53432: PPUSH
53433: LD_VAR 0 8
53437: PPUSH
53438: LD_VAR 0 9
53442: PUSH
53443: LD_VAR 0 10
53447: PLUS
53448: PPUSH
53449: CALL_OW 273
53453: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53454: LD_VAR 0 5
53458: PPUSH
53459: LD_VAR 0 7
53463: PPUSH
53464: CALL_OW 488
53468: PUSH
53469: LD_VAR 0 5
53473: PPUSH
53474: LD_VAR 0 7
53478: PPUSH
53479: CALL_OW 428
53483: PPUSH
53484: CALL_OW 247
53488: PUSH
53489: LD_INT 3
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: IN
53499: NOT
53500: AND
53501: IFFALSE 53545
// begin ComMoveXY ( unit , _x , _y ) ;
53503: LD_VAR 0 1
53507: PPUSH
53508: LD_VAR 0 5
53512: PPUSH
53513: LD_VAR 0 7
53517: PPUSH
53518: CALL_OW 111
// result := [ _x , _y ] ;
53522: LD_ADDR_VAR 0 3
53526: PUSH
53527: LD_VAR 0 5
53531: PUSH
53532: LD_VAR 0 7
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: ST_TO_ADDR
// exit ;
53541: POP
53542: POP
53543: GO 53549
// end ; end ;
53545: GO 53389
53547: POP
53548: POP
// end ;
53549: LD_VAR 0 3
53553: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
53554: LD_INT 0
53556: PPUSH
53557: PPUSH
53558: PPUSH
// result := 0 ;
53559: LD_ADDR_VAR 0 3
53563: PUSH
53564: LD_INT 0
53566: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
53567: LD_VAR 0 1
53571: PUSH
53572: LD_INT 0
53574: LESS
53575: PUSH
53576: LD_VAR 0 1
53580: PUSH
53581: LD_INT 8
53583: GREATER
53584: OR
53585: PUSH
53586: LD_VAR 0 2
53590: PUSH
53591: LD_INT 0
53593: LESS
53594: OR
53595: PUSH
53596: LD_VAR 0 2
53600: PUSH
53601: LD_INT 8
53603: GREATER
53604: OR
53605: IFFALSE 53609
// exit ;
53607: GO 53684
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
53609: LD_ADDR_VAR 0 4
53613: PUSH
53614: LD_INT 22
53616: PUSH
53617: LD_VAR 0 2
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PPUSH
53626: CALL_OW 69
53630: PUSH
53631: FOR_IN
53632: IFFALSE 53682
// begin un := UnitShoot ( i ) ;
53634: LD_ADDR_VAR 0 5
53638: PUSH
53639: LD_VAR 0 4
53643: PPUSH
53644: CALL_OW 504
53648: ST_TO_ADDR
// if GetSide ( un ) = side1 then
53649: LD_VAR 0 5
53653: PPUSH
53654: CALL_OW 255
53658: PUSH
53659: LD_VAR 0 1
53663: EQUAL
53664: IFFALSE 53680
// begin result := un ;
53666: LD_ADDR_VAR 0 3
53670: PUSH
53671: LD_VAR 0 5
53675: ST_TO_ADDR
// exit ;
53676: POP
53677: POP
53678: GO 53684
// end ; end ;
53680: GO 53631
53682: POP
53683: POP
// end ;
53684: LD_VAR 0 3
53688: RET
// export function GetCargoBay ( units ) ; begin
53689: LD_INT 0
53691: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
53692: LD_ADDR_VAR 0 2
53696: PUSH
53697: LD_VAR 0 1
53701: PPUSH
53702: LD_INT 2
53704: PUSH
53705: LD_INT 34
53707: PUSH
53708: LD_INT 12
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 34
53717: PUSH
53718: LD_INT 51
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 34
53727: PUSH
53728: LD_INT 32
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 34
53737: PUSH
53738: LD_INT 89
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: PPUSH
53752: CALL_OW 72
53756: ST_TO_ADDR
// end ;
53757: LD_VAR 0 2
53761: RET
// export function Negate ( value ) ; begin
53762: LD_INT 0
53764: PPUSH
// result := not value ;
53765: LD_ADDR_VAR 0 2
53769: PUSH
53770: LD_VAR 0 1
53774: NOT
53775: ST_TO_ADDR
// end ;
53776: LD_VAR 0 2
53780: RET
// export function Inc ( value ) ; begin
53781: LD_INT 0
53783: PPUSH
// result := value + 1 ;
53784: LD_ADDR_VAR 0 2
53788: PUSH
53789: LD_VAR 0 1
53793: PUSH
53794: LD_INT 1
53796: PLUS
53797: ST_TO_ADDR
// end ;
53798: LD_VAR 0 2
53802: RET
// export function Dec ( value ) ; begin
53803: LD_INT 0
53805: PPUSH
// result := value - 1 ;
53806: LD_ADDR_VAR 0 2
53810: PUSH
53811: LD_VAR 0 1
53815: PUSH
53816: LD_INT 1
53818: MINUS
53819: ST_TO_ADDR
// end ;
53820: LD_VAR 0 2
53824: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
53825: LD_INT 0
53827: PPUSH
53828: PPUSH
53829: PPUSH
53830: PPUSH
53831: PPUSH
53832: PPUSH
53833: PPUSH
53834: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
53835: LD_VAR 0 1
53839: PPUSH
53840: LD_VAR 0 2
53844: PPUSH
53845: CALL_OW 488
53849: NOT
53850: PUSH
53851: LD_VAR 0 3
53855: PPUSH
53856: LD_VAR 0 4
53860: PPUSH
53861: CALL_OW 488
53865: NOT
53866: OR
53867: IFFALSE 53880
// begin result := - 1 ;
53869: LD_ADDR_VAR 0 5
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: ST_TO_ADDR
// exit ;
53878: GO 54115
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
53880: LD_ADDR_VAR 0 12
53884: PUSH
53885: LD_VAR 0 1
53889: PPUSH
53890: LD_VAR 0 2
53894: PPUSH
53895: LD_VAR 0 3
53899: PPUSH
53900: LD_VAR 0 4
53904: PPUSH
53905: CALL 52965 0 4
53909: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
53910: LD_ADDR_VAR 0 11
53914: PUSH
53915: LD_VAR 0 1
53919: PPUSH
53920: LD_VAR 0 2
53924: PPUSH
53925: LD_VAR 0 12
53929: PUSH
53930: LD_INT 1
53932: ARRAY
53933: PPUSH
53934: LD_VAR 0 12
53938: PUSH
53939: LD_INT 2
53941: ARRAY
53942: PPUSH
53943: CALL_OW 298
53947: ST_TO_ADDR
// distance := 9999 ;
53948: LD_ADDR_VAR 0 10
53952: PUSH
53953: LD_INT 9999
53955: ST_TO_ADDR
// for i := 0 to 5 do
53956: LD_ADDR_VAR 0 6
53960: PUSH
53961: DOUBLE
53962: LD_INT 0
53964: DEC
53965: ST_TO_ADDR
53966: LD_INT 5
53968: PUSH
53969: FOR_TO
53970: IFFALSE 54113
// begin _x := ShiftX ( x1 , i , centerDist ) ;
53972: LD_ADDR_VAR 0 7
53976: PUSH
53977: LD_VAR 0 1
53981: PPUSH
53982: LD_VAR 0 6
53986: PPUSH
53987: LD_VAR 0 11
53991: PPUSH
53992: CALL_OW 272
53996: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
53997: LD_ADDR_VAR 0 8
54001: PUSH
54002: LD_VAR 0 2
54006: PPUSH
54007: LD_VAR 0 6
54011: PPUSH
54012: LD_VAR 0 11
54016: PPUSH
54017: CALL_OW 273
54021: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54022: LD_VAR 0 7
54026: PPUSH
54027: LD_VAR 0 8
54031: PPUSH
54032: CALL_OW 488
54036: NOT
54037: IFFALSE 54041
// continue ;
54039: GO 53969
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54041: LD_ADDR_VAR 0 9
54045: PUSH
54046: LD_VAR 0 12
54050: PUSH
54051: LD_INT 1
54053: ARRAY
54054: PPUSH
54055: LD_VAR 0 12
54059: PUSH
54060: LD_INT 2
54062: ARRAY
54063: PPUSH
54064: LD_VAR 0 7
54068: PPUSH
54069: LD_VAR 0 8
54073: PPUSH
54074: CALL_OW 298
54078: ST_TO_ADDR
// if tmp < distance then
54079: LD_VAR 0 9
54083: PUSH
54084: LD_VAR 0 10
54088: LESS
54089: IFFALSE 54111
// begin result := i ;
54091: LD_ADDR_VAR 0 5
54095: PUSH
54096: LD_VAR 0 6
54100: ST_TO_ADDR
// distance := tmp ;
54101: LD_ADDR_VAR 0 10
54105: PUSH
54106: LD_VAR 0 9
54110: ST_TO_ADDR
// end ; end ;
54111: GO 53969
54113: POP
54114: POP
// end ;
54115: LD_VAR 0 5
54119: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54120: LD_INT 0
54122: PPUSH
54123: PPUSH
// if not driver or not IsInUnit ( driver ) then
54124: LD_VAR 0 1
54128: NOT
54129: PUSH
54130: LD_VAR 0 1
54134: PPUSH
54135: CALL_OW 310
54139: NOT
54140: OR
54141: IFFALSE 54145
// exit ;
54143: GO 54235
// vehicle := IsInUnit ( driver ) ;
54145: LD_ADDR_VAR 0 3
54149: PUSH
54150: LD_VAR 0 1
54154: PPUSH
54155: CALL_OW 310
54159: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54160: LD_VAR 0 1
54164: PPUSH
54165: LD_STRING \
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: PUSH
54195: LD_STRING E
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_VAR 0 3
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PPUSH
54231: CALL_OW 446
// end ;
54235: LD_VAR 0 2
54239: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54240: LD_INT 0
54242: PPUSH
54243: PPUSH
// if not driver or not IsInUnit ( driver ) then
54244: LD_VAR 0 1
54248: NOT
54249: PUSH
54250: LD_VAR 0 1
54254: PPUSH
54255: CALL_OW 310
54259: NOT
54260: OR
54261: IFFALSE 54265
// exit ;
54263: GO 54355
// vehicle := IsInUnit ( driver ) ;
54265: LD_ADDR_VAR 0 3
54269: PUSH
54270: LD_VAR 0 1
54274: PPUSH
54275: CALL_OW 310
54279: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54280: LD_VAR 0 1
54284: PPUSH
54285: LD_STRING \
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: PUSH
54315: LD_STRING E
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: LD_VAR 0 3
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PPUSH
54351: CALL_OW 447
// end ;
54355: LD_VAR 0 2
54359: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54360: LD_INT 0
54362: PPUSH
54363: PPUSH
54364: PPUSH
// tmp := [ ] ;
54365: LD_ADDR_VAR 0 5
54369: PUSH
54370: EMPTY
54371: ST_TO_ADDR
// for i in units do
54372: LD_ADDR_VAR 0 4
54376: PUSH
54377: LD_VAR 0 1
54381: PUSH
54382: FOR_IN
54383: IFFALSE 54421
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54385: LD_ADDR_VAR 0 5
54389: PUSH
54390: LD_VAR 0 5
54394: PPUSH
54395: LD_VAR 0 5
54399: PUSH
54400: LD_INT 1
54402: PLUS
54403: PPUSH
54404: LD_VAR 0 4
54408: PPUSH
54409: CALL_OW 256
54413: PPUSH
54414: CALL_OW 2
54418: ST_TO_ADDR
54419: GO 54382
54421: POP
54422: POP
// if not tmp then
54423: LD_VAR 0 5
54427: NOT
54428: IFFALSE 54432
// exit ;
54430: GO 54480
// if asc then
54432: LD_VAR 0 2
54436: IFFALSE 54460
// result := SortListByListAsc ( units , tmp ) else
54438: LD_ADDR_VAR 0 3
54442: PUSH
54443: LD_VAR 0 1
54447: PPUSH
54448: LD_VAR 0 5
54452: PPUSH
54453: CALL_OW 76
54457: ST_TO_ADDR
54458: GO 54480
// result := SortListByListDesc ( units , tmp ) ;
54460: LD_ADDR_VAR 0 3
54464: PUSH
54465: LD_VAR 0 1
54469: PPUSH
54470: LD_VAR 0 5
54474: PPUSH
54475: CALL_OW 77
54479: ST_TO_ADDR
// end ;
54480: LD_VAR 0 3
54484: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54485: LD_INT 0
54487: PPUSH
54488: PPUSH
// task := GetTaskList ( mech ) ;
54489: LD_ADDR_VAR 0 4
54493: PUSH
54494: LD_VAR 0 1
54498: PPUSH
54499: CALL_OW 437
54503: ST_TO_ADDR
// if not task then
54504: LD_VAR 0 4
54508: NOT
54509: IFFALSE 54513
// exit ;
54511: GO 54555
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
54513: LD_ADDR_VAR 0 3
54517: PUSH
54518: LD_VAR 0 4
54522: PUSH
54523: LD_INT 1
54525: ARRAY
54526: PUSH
54527: LD_INT 1
54529: ARRAY
54530: PUSH
54531: LD_STRING r
54533: EQUAL
54534: PUSH
54535: LD_VAR 0 4
54539: PUSH
54540: LD_INT 1
54542: ARRAY
54543: PUSH
54544: LD_INT 4
54546: ARRAY
54547: PUSH
54548: LD_VAR 0 2
54552: EQUAL
54553: AND
54554: ST_TO_ADDR
// end ;
54555: LD_VAR 0 3
54559: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
54560: LD_INT 0
54562: PPUSH
// SetDir ( unit , d ) ;
54563: LD_VAR 0 1
54567: PPUSH
54568: LD_VAR 0 4
54572: PPUSH
54573: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
54577: LD_VAR 0 1
54581: PPUSH
54582: LD_VAR 0 2
54586: PPUSH
54587: LD_VAR 0 3
54591: PPUSH
54592: LD_VAR 0 5
54596: PPUSH
54597: CALL_OW 48
// end ;
54601: LD_VAR 0 6
54605: RET
// export function ToNaturalNumber ( number ) ; begin
54606: LD_INT 0
54608: PPUSH
// result := number div 1 ;
54609: LD_ADDR_VAR 0 2
54613: PUSH
54614: LD_VAR 0 1
54618: PUSH
54619: LD_INT 1
54621: DIV
54622: ST_TO_ADDR
// if number < 0 then
54623: LD_VAR 0 1
54627: PUSH
54628: LD_INT 0
54630: LESS
54631: IFFALSE 54641
// result := 0 ;
54633: LD_ADDR_VAR 0 2
54637: PUSH
54638: LD_INT 0
54640: ST_TO_ADDR
// end ;
54641: LD_VAR 0 2
54645: RET
// export function SortByClass ( units , class ) ; var un ; begin
54646: LD_INT 0
54648: PPUSH
54649: PPUSH
// if not units or not class then
54650: LD_VAR 0 1
54654: NOT
54655: PUSH
54656: LD_VAR 0 2
54660: NOT
54661: OR
54662: IFFALSE 54666
// exit ;
54664: GO 54761
// result := [ ] ;
54666: LD_ADDR_VAR 0 3
54670: PUSH
54671: EMPTY
54672: ST_TO_ADDR
// for un in units do
54673: LD_ADDR_VAR 0 4
54677: PUSH
54678: LD_VAR 0 1
54682: PUSH
54683: FOR_IN
54684: IFFALSE 54759
// if GetClass ( un ) = class then
54686: LD_VAR 0 4
54690: PPUSH
54691: CALL_OW 257
54695: PUSH
54696: LD_VAR 0 2
54700: EQUAL
54701: IFFALSE 54728
// result := Insert ( result , 1 , un ) else
54703: LD_ADDR_VAR 0 3
54707: PUSH
54708: LD_VAR 0 3
54712: PPUSH
54713: LD_INT 1
54715: PPUSH
54716: LD_VAR 0 4
54720: PPUSH
54721: CALL_OW 2
54725: ST_TO_ADDR
54726: GO 54757
// result := Replace ( result , result + 1 , un ) ;
54728: LD_ADDR_VAR 0 3
54732: PUSH
54733: LD_VAR 0 3
54737: PPUSH
54738: LD_VAR 0 3
54742: PUSH
54743: LD_INT 1
54745: PLUS
54746: PPUSH
54747: LD_VAR 0 4
54751: PPUSH
54752: CALL_OW 1
54756: ST_TO_ADDR
54757: GO 54683
54759: POP
54760: POP
// end ;
54761: LD_VAR 0 3
54765: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
54766: LD_INT 0
54768: PPUSH
54769: PPUSH
54770: PPUSH
54771: PPUSH
54772: PPUSH
54773: PPUSH
54774: PPUSH
// result := [ ] ;
54775: LD_ADDR_VAR 0 4
54779: PUSH
54780: EMPTY
54781: ST_TO_ADDR
// if x - r < 0 then
54782: LD_VAR 0 1
54786: PUSH
54787: LD_VAR 0 3
54791: MINUS
54792: PUSH
54793: LD_INT 0
54795: LESS
54796: IFFALSE 54808
// min_x := 0 else
54798: LD_ADDR_VAR 0 8
54802: PUSH
54803: LD_INT 0
54805: ST_TO_ADDR
54806: GO 54824
// min_x := x - r ;
54808: LD_ADDR_VAR 0 8
54812: PUSH
54813: LD_VAR 0 1
54817: PUSH
54818: LD_VAR 0 3
54822: MINUS
54823: ST_TO_ADDR
// if y - r < 0 then
54824: LD_VAR 0 2
54828: PUSH
54829: LD_VAR 0 3
54833: MINUS
54834: PUSH
54835: LD_INT 0
54837: LESS
54838: IFFALSE 54850
// min_y := 0 else
54840: LD_ADDR_VAR 0 7
54844: PUSH
54845: LD_INT 0
54847: ST_TO_ADDR
54848: GO 54866
// min_y := y - r ;
54850: LD_ADDR_VAR 0 7
54854: PUSH
54855: LD_VAR 0 2
54859: PUSH
54860: LD_VAR 0 3
54864: MINUS
54865: ST_TO_ADDR
// max_x := x + r ;
54866: LD_ADDR_VAR 0 9
54870: PUSH
54871: LD_VAR 0 1
54875: PUSH
54876: LD_VAR 0 3
54880: PLUS
54881: ST_TO_ADDR
// max_y := y + r ;
54882: LD_ADDR_VAR 0 10
54886: PUSH
54887: LD_VAR 0 2
54891: PUSH
54892: LD_VAR 0 3
54896: PLUS
54897: ST_TO_ADDR
// for _x = min_x to max_x do
54898: LD_ADDR_VAR 0 5
54902: PUSH
54903: DOUBLE
54904: LD_VAR 0 8
54908: DEC
54909: ST_TO_ADDR
54910: LD_VAR 0 9
54914: PUSH
54915: FOR_TO
54916: IFFALSE 55017
// for _y = min_y to max_y do
54918: LD_ADDR_VAR 0 6
54922: PUSH
54923: DOUBLE
54924: LD_VAR 0 7
54928: DEC
54929: ST_TO_ADDR
54930: LD_VAR 0 10
54934: PUSH
54935: FOR_TO
54936: IFFALSE 55013
// begin if not ValidHex ( _x , _y ) then
54938: LD_VAR 0 5
54942: PPUSH
54943: LD_VAR 0 6
54947: PPUSH
54948: CALL_OW 488
54952: NOT
54953: IFFALSE 54957
// continue ;
54955: GO 54935
// if GetResourceTypeXY ( _x , _y ) then
54957: LD_VAR 0 5
54961: PPUSH
54962: LD_VAR 0 6
54966: PPUSH
54967: CALL_OW 283
54971: IFFALSE 55011
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
54973: LD_ADDR_VAR 0 4
54977: PUSH
54978: LD_VAR 0 4
54982: PPUSH
54983: LD_VAR 0 4
54987: PUSH
54988: LD_INT 1
54990: PLUS
54991: PPUSH
54992: LD_VAR 0 5
54996: PUSH
54997: LD_VAR 0 6
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PPUSH
55006: CALL_OW 1
55010: ST_TO_ADDR
// end ;
55011: GO 54935
55013: POP
55014: POP
55015: GO 54915
55017: POP
55018: POP
// end ;
55019: LD_VAR 0 4
55023: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55024: LD_INT 0
55026: PPUSH
55027: PPUSH
55028: PPUSH
55029: PPUSH
55030: PPUSH
55031: PPUSH
55032: PPUSH
55033: PPUSH
// if not units then
55034: LD_VAR 0 1
55038: NOT
55039: IFFALSE 55043
// exit ;
55041: GO 55567
// result := UnitFilter ( units , [ f_ok ] ) ;
55043: LD_ADDR_VAR 0 3
55047: PUSH
55048: LD_VAR 0 1
55052: PPUSH
55053: LD_INT 50
55055: PUSH
55056: EMPTY
55057: LIST
55058: PPUSH
55059: CALL_OW 72
55063: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55064: LD_ADDR_VAR 0 8
55068: PUSH
55069: LD_VAR 0 1
55073: PUSH
55074: LD_INT 1
55076: ARRAY
55077: PPUSH
55078: CALL_OW 255
55082: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55083: LD_ADDR_VAR 0 10
55087: PUSH
55088: LD_INT 29
55090: PUSH
55091: LD_INT 91
55093: PUSH
55094: LD_INT 49
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: LIST
55101: ST_TO_ADDR
// if not result then
55102: LD_VAR 0 3
55106: NOT
55107: IFFALSE 55111
// exit ;
55109: GO 55567
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55111: LD_ADDR_VAR 0 5
55115: PUSH
55116: LD_INT 81
55118: PUSH
55119: LD_VAR 0 8
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PPUSH
55128: CALL_OW 69
55132: ST_TO_ADDR
// for i in result do
55133: LD_ADDR_VAR 0 4
55137: PUSH
55138: LD_VAR 0 3
55142: PUSH
55143: FOR_IN
55144: IFFALSE 55565
// begin tag := GetTag ( i ) + 1 ;
55146: LD_ADDR_VAR 0 9
55150: PUSH
55151: LD_VAR 0 4
55155: PPUSH
55156: CALL_OW 110
55160: PUSH
55161: LD_INT 1
55163: PLUS
55164: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55165: LD_ADDR_VAR 0 7
55169: PUSH
55170: LD_VAR 0 4
55174: PPUSH
55175: CALL_OW 250
55179: PPUSH
55180: LD_VAR 0 4
55184: PPUSH
55185: CALL_OW 251
55189: PPUSH
55190: LD_INT 6
55192: PPUSH
55193: CALL 54766 0 3
55197: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55198: LD_VAR 0 4
55202: PPUSH
55203: CALL_OW 247
55207: PUSH
55208: LD_INT 2
55210: EQUAL
55211: PUSH
55212: LD_VAR 0 7
55216: AND
55217: PUSH
55218: LD_VAR 0 4
55222: PPUSH
55223: CALL_OW 264
55227: PUSH
55228: LD_VAR 0 10
55232: IN
55233: NOT
55234: AND
55235: IFFALSE 55274
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55237: LD_VAR 0 4
55241: PPUSH
55242: LD_VAR 0 7
55246: PUSH
55247: LD_INT 1
55249: ARRAY
55250: PUSH
55251: LD_INT 1
55253: ARRAY
55254: PPUSH
55255: LD_VAR 0 7
55259: PUSH
55260: LD_INT 1
55262: ARRAY
55263: PUSH
55264: LD_INT 2
55266: ARRAY
55267: PPUSH
55268: CALL_OW 116
55272: GO 55563
// if path > tag then
55274: LD_VAR 0 2
55278: PUSH
55279: LD_VAR 0 9
55283: GREATER
55284: IFFALSE 55492
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55286: LD_ADDR_VAR 0 6
55290: PUSH
55291: LD_VAR 0 5
55295: PPUSH
55296: LD_INT 91
55298: PUSH
55299: LD_VAR 0 4
55303: PUSH
55304: LD_INT 8
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: LIST
55311: PPUSH
55312: CALL_OW 72
55316: ST_TO_ADDR
// if nearEnemy then
55317: LD_VAR 0 6
55321: IFFALSE 55390
// begin if GetWeapon ( i ) = ru_time_lapser then
55323: LD_VAR 0 4
55327: PPUSH
55328: CALL_OW 264
55332: PUSH
55333: LD_INT 49
55335: EQUAL
55336: IFFALSE 55364
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55338: LD_VAR 0 4
55342: PPUSH
55343: LD_VAR 0 6
55347: PPUSH
55348: LD_VAR 0 4
55352: PPUSH
55353: CALL_OW 74
55357: PPUSH
55358: CALL_OW 112
55362: GO 55388
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55364: LD_VAR 0 4
55368: PPUSH
55369: LD_VAR 0 6
55373: PPUSH
55374: LD_VAR 0 4
55378: PPUSH
55379: CALL_OW 74
55383: PPUSH
55384: CALL 56638 0 2
// end else
55388: GO 55490
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55390: LD_VAR 0 4
55394: PPUSH
55395: LD_VAR 0 2
55399: PUSH
55400: LD_VAR 0 9
55404: ARRAY
55405: PUSH
55406: LD_INT 1
55408: ARRAY
55409: PPUSH
55410: LD_VAR 0 2
55414: PUSH
55415: LD_VAR 0 9
55419: ARRAY
55420: PUSH
55421: LD_INT 2
55423: ARRAY
55424: PPUSH
55425: CALL_OW 297
55429: PUSH
55430: LD_INT 6
55432: GREATER
55433: IFFALSE 55476
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55435: LD_VAR 0 4
55439: PPUSH
55440: LD_VAR 0 2
55444: PUSH
55445: LD_VAR 0 9
55449: ARRAY
55450: PUSH
55451: LD_INT 1
55453: ARRAY
55454: PPUSH
55455: LD_VAR 0 2
55459: PUSH
55460: LD_VAR 0 9
55464: ARRAY
55465: PUSH
55466: LD_INT 2
55468: ARRAY
55469: PPUSH
55470: CALL_OW 114
55474: GO 55490
// SetTag ( i , tag ) ;
55476: LD_VAR 0 4
55480: PPUSH
55481: LD_VAR 0 9
55485: PPUSH
55486: CALL_OW 109
// end else
55490: GO 55563
// if enemy then
55492: LD_VAR 0 5
55496: IFFALSE 55563
// begin if GetWeapon ( i ) = ru_time_lapser then
55498: LD_VAR 0 4
55502: PPUSH
55503: CALL_OW 264
55507: PUSH
55508: LD_INT 49
55510: EQUAL
55511: IFFALSE 55539
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
55513: LD_VAR 0 4
55517: PPUSH
55518: LD_VAR 0 5
55522: PPUSH
55523: LD_VAR 0 4
55527: PPUSH
55528: CALL_OW 74
55532: PPUSH
55533: CALL_OW 112
55537: GO 55563
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
55539: LD_VAR 0 4
55543: PPUSH
55544: LD_VAR 0 5
55548: PPUSH
55549: LD_VAR 0 4
55553: PPUSH
55554: CALL_OW 74
55558: PPUSH
55559: CALL 56638 0 2
// end ; end ;
55563: GO 55143
55565: POP
55566: POP
// end ;
55567: LD_VAR 0 3
55571: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
55572: LD_INT 0
55574: PPUSH
55575: PPUSH
55576: PPUSH
// if not unit or IsInUnit ( unit ) then
55577: LD_VAR 0 1
55581: NOT
55582: PUSH
55583: LD_VAR 0 1
55587: PPUSH
55588: CALL_OW 310
55592: OR
55593: IFFALSE 55597
// exit ;
55595: GO 55688
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
55597: LD_ADDR_VAR 0 4
55601: PUSH
55602: LD_VAR 0 1
55606: PPUSH
55607: CALL_OW 250
55611: PPUSH
55612: LD_VAR 0 2
55616: PPUSH
55617: LD_INT 1
55619: PPUSH
55620: CALL_OW 272
55624: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
55625: LD_ADDR_VAR 0 5
55629: PUSH
55630: LD_VAR 0 1
55634: PPUSH
55635: CALL_OW 251
55639: PPUSH
55640: LD_VAR 0 2
55644: PPUSH
55645: LD_INT 1
55647: PPUSH
55648: CALL_OW 273
55652: ST_TO_ADDR
// if ValidHex ( x , y ) then
55653: LD_VAR 0 4
55657: PPUSH
55658: LD_VAR 0 5
55662: PPUSH
55663: CALL_OW 488
55667: IFFALSE 55688
// ComTurnXY ( unit , x , y ) ;
55669: LD_VAR 0 1
55673: PPUSH
55674: LD_VAR 0 4
55678: PPUSH
55679: LD_VAR 0 5
55683: PPUSH
55684: CALL_OW 118
// end ;
55688: LD_VAR 0 3
55692: RET
// export function SeeUnits ( side , units ) ; var i ; begin
55693: LD_INT 0
55695: PPUSH
55696: PPUSH
// result := false ;
55697: LD_ADDR_VAR 0 3
55701: PUSH
55702: LD_INT 0
55704: ST_TO_ADDR
// if not units then
55705: LD_VAR 0 2
55709: NOT
55710: IFFALSE 55714
// exit ;
55712: GO 55759
// for i in units do
55714: LD_ADDR_VAR 0 4
55718: PUSH
55719: LD_VAR 0 2
55723: PUSH
55724: FOR_IN
55725: IFFALSE 55757
// if See ( side , i ) then
55727: LD_VAR 0 1
55731: PPUSH
55732: LD_VAR 0 4
55736: PPUSH
55737: CALL_OW 292
55741: IFFALSE 55755
// begin result := true ;
55743: LD_ADDR_VAR 0 3
55747: PUSH
55748: LD_INT 1
55750: ST_TO_ADDR
// exit ;
55751: POP
55752: POP
55753: GO 55759
// end ;
55755: GO 55724
55757: POP
55758: POP
// end ;
55759: LD_VAR 0 3
55763: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
55764: LD_INT 0
55766: PPUSH
55767: PPUSH
55768: PPUSH
55769: PPUSH
// if not unit or not points then
55770: LD_VAR 0 1
55774: NOT
55775: PUSH
55776: LD_VAR 0 2
55780: NOT
55781: OR
55782: IFFALSE 55786
// exit ;
55784: GO 55876
// dist := 99999 ;
55786: LD_ADDR_VAR 0 5
55790: PUSH
55791: LD_INT 99999
55793: ST_TO_ADDR
// for i in points do
55794: LD_ADDR_VAR 0 4
55798: PUSH
55799: LD_VAR 0 2
55803: PUSH
55804: FOR_IN
55805: IFFALSE 55874
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
55807: LD_ADDR_VAR 0 6
55811: PUSH
55812: LD_VAR 0 1
55816: PPUSH
55817: LD_VAR 0 4
55821: PUSH
55822: LD_INT 1
55824: ARRAY
55825: PPUSH
55826: LD_VAR 0 4
55830: PUSH
55831: LD_INT 2
55833: ARRAY
55834: PPUSH
55835: CALL_OW 297
55839: ST_TO_ADDR
// if tmpDist < dist then
55840: LD_VAR 0 6
55844: PUSH
55845: LD_VAR 0 5
55849: LESS
55850: IFFALSE 55872
// begin result := i ;
55852: LD_ADDR_VAR 0 3
55856: PUSH
55857: LD_VAR 0 4
55861: ST_TO_ADDR
// dist := tmpDist ;
55862: LD_ADDR_VAR 0 5
55866: PUSH
55867: LD_VAR 0 6
55871: ST_TO_ADDR
// end ; end ;
55872: GO 55804
55874: POP
55875: POP
// end ;
55876: LD_VAR 0 3
55880: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
55881: LD_INT 0
55883: PPUSH
// uc_side := side ;
55884: LD_ADDR_OWVAR 20
55888: PUSH
55889: LD_VAR 0 1
55893: ST_TO_ADDR
// uc_nation := 3 ;
55894: LD_ADDR_OWVAR 21
55898: PUSH
55899: LD_INT 3
55901: ST_TO_ADDR
// vc_chassis := 25 ;
55902: LD_ADDR_OWVAR 37
55906: PUSH
55907: LD_INT 25
55909: ST_TO_ADDR
// vc_engine := engine_siberite ;
55910: LD_ADDR_OWVAR 39
55914: PUSH
55915: LD_INT 3
55917: ST_TO_ADDR
// vc_control := control_computer ;
55918: LD_ADDR_OWVAR 38
55922: PUSH
55923: LD_INT 3
55925: ST_TO_ADDR
// vc_weapon := 59 ;
55926: LD_ADDR_OWVAR 40
55930: PUSH
55931: LD_INT 59
55933: ST_TO_ADDR
// result := CreateVehicle ;
55934: LD_ADDR_VAR 0 5
55938: PUSH
55939: CALL_OW 45
55943: ST_TO_ADDR
// SetDir ( result , d ) ;
55944: LD_VAR 0 5
55948: PPUSH
55949: LD_VAR 0 4
55953: PPUSH
55954: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
55958: LD_VAR 0 5
55962: PPUSH
55963: LD_VAR 0 2
55967: PPUSH
55968: LD_VAR 0 3
55972: PPUSH
55973: LD_INT 0
55975: PPUSH
55976: CALL_OW 48
// end ;
55980: LD_VAR 0 5
55984: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
55985: LD_INT 0
55987: PPUSH
55988: PPUSH
55989: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
55990: LD_ADDR_VAR 0 2
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56013: LD_VAR 0 1
56017: NOT
56018: PUSH
56019: LD_VAR 0 1
56023: PPUSH
56024: CALL_OW 264
56028: PUSH
56029: LD_INT 12
56031: PUSH
56032: LD_INT 51
56034: PUSH
56035: LD_INT 32
56037: PUSH
56038: LD_INT 89
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: IN
56047: NOT
56048: OR
56049: IFFALSE 56053
// exit ;
56051: GO 56151
// for i := 1 to 3 do
56053: LD_ADDR_VAR 0 3
56057: PUSH
56058: DOUBLE
56059: LD_INT 1
56061: DEC
56062: ST_TO_ADDR
56063: LD_INT 3
56065: PUSH
56066: FOR_TO
56067: IFFALSE 56149
// begin tmp := GetCargo ( cargo , i ) ;
56069: LD_ADDR_VAR 0 4
56073: PUSH
56074: LD_VAR 0 1
56078: PPUSH
56079: LD_VAR 0 3
56083: PPUSH
56084: CALL_OW 289
56088: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56089: LD_ADDR_VAR 0 2
56093: PUSH
56094: LD_VAR 0 2
56098: PPUSH
56099: LD_VAR 0 3
56103: PPUSH
56104: LD_VAR 0 4
56108: PPUSH
56109: CALL_OW 1
56113: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56114: LD_ADDR_VAR 0 2
56118: PUSH
56119: LD_VAR 0 2
56123: PPUSH
56124: LD_INT 4
56126: PPUSH
56127: LD_VAR 0 2
56131: PUSH
56132: LD_INT 4
56134: ARRAY
56135: PUSH
56136: LD_VAR 0 4
56140: PLUS
56141: PPUSH
56142: CALL_OW 1
56146: ST_TO_ADDR
// end ;
56147: GO 56066
56149: POP
56150: POP
// end ;
56151: LD_VAR 0 2
56155: RET
// export function Length ( array ) ; begin
56156: LD_INT 0
56158: PPUSH
// result := array + 0 ;
56159: LD_ADDR_VAR 0 2
56163: PUSH
56164: LD_VAR 0 1
56168: PUSH
56169: LD_INT 0
56171: PLUS
56172: ST_TO_ADDR
// end ;
56173: LD_VAR 0 2
56177: RET
// export function PrepareArray ( array ) ; begin
56178: LD_INT 0
56180: PPUSH
// result := array diff 0 ;
56181: LD_ADDR_VAR 0 2
56185: PUSH
56186: LD_VAR 0 1
56190: PUSH
56191: LD_INT 0
56193: DIFF
56194: ST_TO_ADDR
// if not result [ 1 ] then
56195: LD_VAR 0 2
56199: PUSH
56200: LD_INT 1
56202: ARRAY
56203: NOT
56204: IFFALSE 56224
// result := Delete ( result , 1 ) ;
56206: LD_ADDR_VAR 0 2
56210: PUSH
56211: LD_VAR 0 2
56215: PPUSH
56216: LD_INT 1
56218: PPUSH
56219: CALL_OW 3
56223: ST_TO_ADDR
// end ;
56224: LD_VAR 0 2
56228: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56229: LD_INT 0
56231: PPUSH
56232: PPUSH
56233: PPUSH
56234: PPUSH
// sibRocketRange := 25 ;
56235: LD_ADDR_VAR 0 6
56239: PUSH
56240: LD_INT 25
56242: ST_TO_ADDR
// result := false ;
56243: LD_ADDR_VAR 0 4
56247: PUSH
56248: LD_INT 0
56250: ST_TO_ADDR
// for i := 0 to 5 do
56251: LD_ADDR_VAR 0 5
56255: PUSH
56256: DOUBLE
56257: LD_INT 0
56259: DEC
56260: ST_TO_ADDR
56261: LD_INT 5
56263: PUSH
56264: FOR_TO
56265: IFFALSE 56332
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56267: LD_VAR 0 1
56271: PPUSH
56272: LD_VAR 0 5
56276: PPUSH
56277: LD_VAR 0 6
56281: PPUSH
56282: CALL_OW 272
56286: PPUSH
56287: LD_VAR 0 2
56291: PPUSH
56292: LD_VAR 0 5
56296: PPUSH
56297: LD_VAR 0 6
56301: PPUSH
56302: CALL_OW 273
56306: PPUSH
56307: LD_VAR 0 3
56311: PPUSH
56312: CALL_OW 309
56316: IFFALSE 56330
// begin result := true ;
56318: LD_ADDR_VAR 0 4
56322: PUSH
56323: LD_INT 1
56325: ST_TO_ADDR
// exit ;
56326: POP
56327: POP
56328: GO 56334
// end ;
56330: GO 56264
56332: POP
56333: POP
// end ;
56334: LD_VAR 0 4
56338: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
56339: LD_INT 0
56341: PPUSH
56342: PPUSH
56343: PPUSH
// if btype = b_depot then
56344: LD_VAR 0 2
56348: PUSH
56349: LD_INT 0
56351: EQUAL
56352: IFFALSE 56364
// begin result := true ;
56354: LD_ADDR_VAR 0 3
56358: PUSH
56359: LD_INT 1
56361: ST_TO_ADDR
// exit ;
56362: GO 56480
// end ; pom := GetBase ( depot ) ;
56364: LD_ADDR_VAR 0 4
56368: PUSH
56369: LD_VAR 0 1
56373: PPUSH
56374: CALL_OW 274
56378: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56379: LD_ADDR_VAR 0 5
56383: PUSH
56384: LD_VAR 0 2
56388: PPUSH
56389: LD_VAR 0 1
56393: PPUSH
56394: CALL_OW 248
56398: PPUSH
56399: CALL_OW 450
56403: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
56404: LD_ADDR_VAR 0 3
56408: PUSH
56409: LD_VAR 0 4
56413: PPUSH
56414: LD_INT 1
56416: PPUSH
56417: CALL_OW 275
56421: PUSH
56422: LD_VAR 0 5
56426: PUSH
56427: LD_INT 1
56429: ARRAY
56430: GREATEREQUAL
56431: PUSH
56432: LD_VAR 0 4
56436: PPUSH
56437: LD_INT 2
56439: PPUSH
56440: CALL_OW 275
56444: PUSH
56445: LD_VAR 0 5
56449: PUSH
56450: LD_INT 2
56452: ARRAY
56453: GREATEREQUAL
56454: AND
56455: PUSH
56456: LD_VAR 0 4
56460: PPUSH
56461: LD_INT 3
56463: PPUSH
56464: CALL_OW 275
56468: PUSH
56469: LD_VAR 0 5
56473: PUSH
56474: LD_INT 3
56476: ARRAY
56477: GREATEREQUAL
56478: AND
56479: ST_TO_ADDR
// end ;
56480: LD_VAR 0 3
56484: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
56485: LD_INT 0
56487: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
56488: LD_VAR 0 1
56492: PPUSH
56493: LD_VAR 0 2
56497: PPUSH
56498: LD_INT 0
56500: PPUSH
56501: LD_INT 0
56503: PPUSH
56504: LD_INT 1
56506: PPUSH
56507: LD_INT 0
56509: PPUSH
56510: CALL_OW 587
// end ;
56514: LD_VAR 0 3
56518: RET
// export function CenterOnNow ( unit ) ; begin
56519: LD_INT 0
56521: PPUSH
// result := IsInUnit ( unit ) ;
56522: LD_ADDR_VAR 0 2
56526: PUSH
56527: LD_VAR 0 1
56531: PPUSH
56532: CALL_OW 310
56536: ST_TO_ADDR
// if not result then
56537: LD_VAR 0 2
56541: NOT
56542: IFFALSE 56554
// result := unit ;
56544: LD_ADDR_VAR 0 2
56548: PUSH
56549: LD_VAR 0 1
56553: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
56554: LD_VAR 0 1
56558: PPUSH
56559: CALL_OW 87
// end ;
56563: LD_VAR 0 2
56567: RET
// export function ComMoveHex ( unit , hex ) ; begin
56568: LD_INT 0
56570: PPUSH
// if not hex then
56571: LD_VAR 0 2
56575: NOT
56576: IFFALSE 56580
// exit ;
56578: GO 56633
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
56580: LD_VAR 0 2
56584: PUSH
56585: LD_INT 1
56587: ARRAY
56588: PPUSH
56589: LD_VAR 0 2
56593: PUSH
56594: LD_INT 2
56596: ARRAY
56597: PPUSH
56598: CALL_OW 428
56602: IFFALSE 56606
// exit ;
56604: GO 56633
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
56606: LD_VAR 0 1
56610: PPUSH
56611: LD_VAR 0 2
56615: PUSH
56616: LD_INT 1
56618: ARRAY
56619: PPUSH
56620: LD_VAR 0 2
56624: PUSH
56625: LD_INT 2
56627: ARRAY
56628: PPUSH
56629: CALL_OW 111
// end ;
56633: LD_VAR 0 3
56637: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
56638: LD_INT 0
56640: PPUSH
56641: PPUSH
56642: PPUSH
// if not unit or not enemy then
56643: LD_VAR 0 1
56647: NOT
56648: PUSH
56649: LD_VAR 0 2
56653: NOT
56654: OR
56655: IFFALSE 56659
// exit ;
56657: GO 56783
// x := GetX ( enemy ) ;
56659: LD_ADDR_VAR 0 4
56663: PUSH
56664: LD_VAR 0 2
56668: PPUSH
56669: CALL_OW 250
56673: ST_TO_ADDR
// y := GetY ( enemy ) ;
56674: LD_ADDR_VAR 0 5
56678: PUSH
56679: LD_VAR 0 2
56683: PPUSH
56684: CALL_OW 251
56688: ST_TO_ADDR
// if ValidHex ( x , y ) then
56689: LD_VAR 0 4
56693: PPUSH
56694: LD_VAR 0 5
56698: PPUSH
56699: CALL_OW 488
56703: IFFALSE 56783
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
56705: LD_VAR 0 2
56709: PPUSH
56710: CALL_OW 247
56714: PUSH
56715: LD_INT 3
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: IN
56725: PUSH
56726: LD_VAR 0 1
56730: PPUSH
56731: CALL_OW 255
56735: PPUSH
56736: LD_VAR 0 2
56740: PPUSH
56741: CALL_OW 292
56745: OR
56746: IFFALSE 56764
// ComAttackUnit ( unit , enemy ) else
56748: LD_VAR 0 1
56752: PPUSH
56753: LD_VAR 0 2
56757: PPUSH
56758: CALL_OW 115
56762: GO 56783
// ComAgressiveMove ( unit , x , y ) ;
56764: LD_VAR 0 1
56768: PPUSH
56769: LD_VAR 0 4
56773: PPUSH
56774: LD_VAR 0 5
56778: PPUSH
56779: CALL_OW 114
// end ;
56783: LD_VAR 0 3
56787: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
56788: LD_INT 0
56790: PPUSH
56791: PPUSH
56792: PPUSH
// list := AreaToList ( area , 0 ) ;
56793: LD_ADDR_VAR 0 5
56797: PUSH
56798: LD_VAR 0 1
56802: PPUSH
56803: LD_INT 0
56805: PPUSH
56806: CALL_OW 517
56810: ST_TO_ADDR
// if not list then
56811: LD_VAR 0 5
56815: NOT
56816: IFFALSE 56820
// exit ;
56818: GO 56950
// if all then
56820: LD_VAR 0 2
56824: IFFALSE 56912
// begin for i := 1 to list [ 1 ] do
56826: LD_ADDR_VAR 0 4
56830: PUSH
56831: DOUBLE
56832: LD_INT 1
56834: DEC
56835: ST_TO_ADDR
56836: LD_VAR 0 5
56840: PUSH
56841: LD_INT 1
56843: ARRAY
56844: PUSH
56845: FOR_TO
56846: IFFALSE 56908
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
56848: LD_ADDR_VAR 0 3
56852: PUSH
56853: LD_VAR 0 3
56857: PPUSH
56858: LD_VAR 0 3
56862: PUSH
56863: LD_INT 1
56865: PLUS
56866: PPUSH
56867: LD_VAR 0 5
56871: PUSH
56872: LD_INT 1
56874: ARRAY
56875: PUSH
56876: LD_VAR 0 4
56880: ARRAY
56881: PUSH
56882: LD_VAR 0 5
56886: PUSH
56887: LD_INT 2
56889: ARRAY
56890: PUSH
56891: LD_VAR 0 4
56895: ARRAY
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PPUSH
56901: CALL_OW 1
56905: ST_TO_ADDR
56906: GO 56845
56908: POP
56909: POP
// exit ;
56910: GO 56950
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
56912: LD_ADDR_VAR 0 3
56916: PUSH
56917: LD_VAR 0 5
56921: PUSH
56922: LD_INT 1
56924: ARRAY
56925: PUSH
56926: LD_INT 1
56928: ARRAY
56929: PUSH
56930: LD_VAR 0 5
56934: PUSH
56935: LD_INT 2
56937: ARRAY
56938: PUSH
56939: LD_INT 1
56941: ARRAY
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: EMPTY
56948: LIST
56949: ST_TO_ADDR
// end ;
56950: LD_VAR 0 3
56954: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
56955: LD_INT 0
56957: PPUSH
56958: PPUSH
// list := AreaToList ( area , 0 ) ;
56959: LD_ADDR_VAR 0 4
56963: PUSH
56964: LD_VAR 0 1
56968: PPUSH
56969: LD_INT 0
56971: PPUSH
56972: CALL_OW 517
56976: ST_TO_ADDR
// if not list then
56977: LD_VAR 0 4
56981: NOT
56982: IFFALSE 56986
// exit ;
56984: GO 57027
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
56986: LD_ADDR_VAR 0 3
56990: PUSH
56991: LD_VAR 0 4
56995: PUSH
56996: LD_INT 1
56998: ARRAY
56999: PUSH
57000: LD_INT 1
57002: ARRAY
57003: PUSH
57004: LD_VAR 0 4
57008: PUSH
57009: LD_INT 2
57011: ARRAY
57012: PUSH
57013: LD_INT 1
57015: ARRAY
57016: PUSH
57017: LD_VAR 0 2
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: LIST
57026: ST_TO_ADDR
// end ;
57027: LD_VAR 0 3
57031: RET
// export function First ( array ) ; begin
57032: LD_INT 0
57034: PPUSH
// if not array then
57035: LD_VAR 0 1
57039: NOT
57040: IFFALSE 57044
// exit ;
57042: GO 57058
// result := array [ 1 ] ;
57044: LD_ADDR_VAR 0 2
57048: PUSH
57049: LD_VAR 0 1
57053: PUSH
57054: LD_INT 1
57056: ARRAY
57057: ST_TO_ADDR
// end ;
57058: LD_VAR 0 2
57062: RET
// export function Last ( array ) ; begin
57063: LD_INT 0
57065: PPUSH
// if not array then
57066: LD_VAR 0 1
57070: NOT
57071: IFFALSE 57075
// exit ;
57073: GO 57091
// result := array [ array ] ;
57075: LD_ADDR_VAR 0 2
57079: PUSH
57080: LD_VAR 0 1
57084: PUSH
57085: LD_VAR 0 1
57089: ARRAY
57090: ST_TO_ADDR
// end ;
57091: LD_VAR 0 2
57095: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
57096: LD_INT 0
57098: PPUSH
57099: PPUSH
// result := [ ] ;
57100: LD_ADDR_VAR 0 5
57104: PUSH
57105: EMPTY
57106: ST_TO_ADDR
// if not array then
57107: LD_VAR 0 1
57111: NOT
57112: IFFALSE 57116
// exit ;
57114: GO 57228
// for i := 1 to array do
57116: LD_ADDR_VAR 0 6
57120: PUSH
57121: DOUBLE
57122: LD_INT 1
57124: DEC
57125: ST_TO_ADDR
57126: LD_VAR 0 1
57130: PUSH
57131: FOR_TO
57132: IFFALSE 57226
// if array [ i ] [ index ] = value then
57134: LD_VAR 0 1
57138: PUSH
57139: LD_VAR 0 6
57143: ARRAY
57144: PUSH
57145: LD_VAR 0 2
57149: ARRAY
57150: PUSH
57151: LD_VAR 0 3
57155: EQUAL
57156: IFFALSE 57224
// begin if indexColumn then
57158: LD_VAR 0 4
57162: IFFALSE 57198
// result := Join ( result , array [ i ] [ indexColumn ] ) else
57164: LD_ADDR_VAR 0 5
57168: PUSH
57169: LD_VAR 0 5
57173: PPUSH
57174: LD_VAR 0 1
57178: PUSH
57179: LD_VAR 0 6
57183: ARRAY
57184: PUSH
57185: LD_VAR 0 4
57189: ARRAY
57190: PPUSH
57191: CALL 52420 0 2
57195: ST_TO_ADDR
57196: GO 57224
// result := Join ( result , array [ i ] ) ;
57198: LD_ADDR_VAR 0 5
57202: PUSH
57203: LD_VAR 0 5
57207: PPUSH
57208: LD_VAR 0 1
57212: PUSH
57213: LD_VAR 0 6
57217: ARRAY
57218: PPUSH
57219: CALL 52420 0 2
57223: ST_TO_ADDR
// end ;
57224: GO 57131
57226: POP
57227: POP
// end ;
57228: LD_VAR 0 5
57232: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
57233: LD_INT 0
57235: PPUSH
// if not vehicles or not parkingPoint then
57236: LD_VAR 0 1
57240: NOT
57241: PUSH
57242: LD_VAR 0 2
57246: NOT
57247: OR
57248: IFFALSE 57252
// exit ;
57250: GO 57350
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
57252: LD_ADDR_VAR 0 1
57256: PUSH
57257: LD_VAR 0 1
57261: PPUSH
57262: LD_INT 50
57264: PUSH
57265: EMPTY
57266: LIST
57267: PUSH
57268: LD_INT 3
57270: PUSH
57271: LD_INT 92
57273: PUSH
57274: LD_VAR 0 2
57278: PUSH
57279: LD_INT 1
57281: ARRAY
57282: PUSH
57283: LD_VAR 0 2
57287: PUSH
57288: LD_INT 2
57290: ARRAY
57291: PUSH
57292: LD_INT 8
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PPUSH
57309: CALL_OW 72
57313: ST_TO_ADDR
// if not vehicles then
57314: LD_VAR 0 1
57318: NOT
57319: IFFALSE 57323
// exit ;
57321: GO 57350
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
57323: LD_VAR 0 1
57327: PPUSH
57328: LD_VAR 0 2
57332: PUSH
57333: LD_INT 1
57335: ARRAY
57336: PPUSH
57337: LD_VAR 0 2
57341: PUSH
57342: LD_INT 2
57344: ARRAY
57345: PPUSH
57346: CALL_OW 111
// end ;
57350: LD_VAR 0 3
57354: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
57355: LD_INT 0
57357: PPUSH
57358: PPUSH
57359: PPUSH
// if not side or not area then
57360: LD_VAR 0 1
57364: NOT
57365: PUSH
57366: LD_VAR 0 2
57370: NOT
57371: OR
57372: IFFALSE 57376
// exit ;
57374: GO 57495
// tmp := AreaToList ( area , 0 ) ;
57376: LD_ADDR_VAR 0 5
57380: PUSH
57381: LD_VAR 0 2
57385: PPUSH
57386: LD_INT 0
57388: PPUSH
57389: CALL_OW 517
57393: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57394: LD_ADDR_VAR 0 4
57398: PUSH
57399: DOUBLE
57400: LD_INT 1
57402: DEC
57403: ST_TO_ADDR
57404: LD_VAR 0 5
57408: PUSH
57409: LD_INT 1
57411: ARRAY
57412: PUSH
57413: FOR_TO
57414: IFFALSE 57493
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
57416: LD_VAR 0 5
57420: PUSH
57421: LD_INT 1
57423: ARRAY
57424: PUSH
57425: LD_VAR 0 4
57429: ARRAY
57430: PPUSH
57431: LD_VAR 0 5
57435: PUSH
57436: LD_INT 2
57438: ARRAY
57439: PUSH
57440: LD_VAR 0 4
57444: ARRAY
57445: PPUSH
57446: CALL_OW 351
57450: IFFALSE 57491
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
57452: LD_VAR 0 5
57456: PUSH
57457: LD_INT 1
57459: ARRAY
57460: PUSH
57461: LD_VAR 0 4
57465: ARRAY
57466: PPUSH
57467: LD_VAR 0 5
57471: PUSH
57472: LD_INT 2
57474: ARRAY
57475: PUSH
57476: LD_VAR 0 4
57480: ARRAY
57481: PPUSH
57482: LD_VAR 0 1
57486: PPUSH
57487: CALL_OW 244
// end ;
57491: GO 57413
57493: POP
57494: POP
// end ; end_of_file
57495: LD_VAR 0 3
57499: RET
// export globalGameSaveCounter ; every 0 0$1 do
57500: GO 57502
57502: DISABLE
// begin enable ;
57503: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
57504: LD_STRING updateTimer(
57506: PUSH
57507: LD_OWVAR 1
57511: STR
57512: PUSH
57513: LD_STRING );
57515: STR
57516: PPUSH
57517: CALL_OW 559
// end ;
57521: END
// every 0 0$1 do
57522: GO 57524
57524: DISABLE
// begin globalGameSaveCounter := 0 ;
57525: LD_ADDR_EXP 45
57529: PUSH
57530: LD_INT 0
57532: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
57533: LD_STRING setGameSaveCounter(0)
57535: PPUSH
57536: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
57540: LD_STRING initStreamRollete();
57542: PPUSH
57543: CALL_OW 559
// InitStreamMode ;
57547: CALL 58890 0 0
// DefineStreamItems ( false ) ;
57551: LD_INT 0
57553: PPUSH
57554: CALL 59354 0 1
// end ;
57558: END
// export function SOS_MapStart ( ) ; begin
57559: LD_INT 0
57561: PPUSH
// if streamModeActive then
57562: LD_EXP 46
57566: IFFALSE 57575
// DefineStreamItems ( true ) ;
57568: LD_INT 1
57570: PPUSH
57571: CALL 59354 0 1
// UpdateLuaVariables ( ) ;
57575: CALL 57592 0 0
// UpdateFactoryWaypoints ( ) ;
57579: CALL 72223 0 0
// UpdateWarehouseGatheringPoints ( ) ;
57583: CALL 72480 0 0
// end ;
57587: LD_VAR 0 1
57591: RET
// function UpdateLuaVariables ( ) ; begin
57592: LD_INT 0
57594: PPUSH
// if globalGameSaveCounter then
57595: LD_EXP 45
57599: IFFALSE 57633
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
57601: LD_ADDR_EXP 45
57605: PUSH
57606: LD_EXP 45
57610: PPUSH
57611: CALL 53781 0 1
57615: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
57616: LD_STRING setGameSaveCounter(
57618: PUSH
57619: LD_EXP 45
57623: STR
57624: PUSH
57625: LD_STRING )
57627: STR
57628: PPUSH
57629: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
57633: LD_STRING setGameDifficulty(
57635: PUSH
57636: LD_OWVAR 67
57640: STR
57641: PUSH
57642: LD_STRING )
57644: STR
57645: PPUSH
57646: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
57650: LD_STRING displayDifficulty(
57652: PUSH
57653: LD_OWVAR 67
57657: STR
57658: PUSH
57659: LD_STRING )
57661: STR
57662: PPUSH
57663: CALL_OW 559
// end ;
57667: LD_VAR 0 1
57671: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57672: LD_INT 0
57674: PPUSH
// if p2 = stream_mode then
57675: LD_VAR 0 2
57679: PUSH
57680: LD_INT 100
57682: EQUAL
57683: IFFALSE 58686
// begin if not StreamModeActive then
57685: LD_EXP 46
57689: NOT
57690: IFFALSE 57700
// StreamModeActive := true ;
57692: LD_ADDR_EXP 46
57696: PUSH
57697: LD_INT 1
57699: ST_TO_ADDR
// if p3 = 0 then
57700: LD_VAR 0 3
57704: PUSH
57705: LD_INT 0
57707: EQUAL
57708: IFFALSE 57714
// InitStreamMode ;
57710: CALL 58890 0 0
// if p3 = 1 then
57714: LD_VAR 0 3
57718: PUSH
57719: LD_INT 1
57721: EQUAL
57722: IFFALSE 57732
// sRocket := true ;
57724: LD_ADDR_EXP 51
57728: PUSH
57729: LD_INT 1
57731: ST_TO_ADDR
// if p3 = 2 then
57732: LD_VAR 0 3
57736: PUSH
57737: LD_INT 2
57739: EQUAL
57740: IFFALSE 57750
// sSpeed := true ;
57742: LD_ADDR_EXP 50
57746: PUSH
57747: LD_INT 1
57749: ST_TO_ADDR
// if p3 = 3 then
57750: LD_VAR 0 3
57754: PUSH
57755: LD_INT 3
57757: EQUAL
57758: IFFALSE 57768
// sEngine := true ;
57760: LD_ADDR_EXP 52
57764: PUSH
57765: LD_INT 1
57767: ST_TO_ADDR
// if p3 = 4 then
57768: LD_VAR 0 3
57772: PUSH
57773: LD_INT 4
57775: EQUAL
57776: IFFALSE 57786
// sSpec := true ;
57778: LD_ADDR_EXP 49
57782: PUSH
57783: LD_INT 1
57785: ST_TO_ADDR
// if p3 = 5 then
57786: LD_VAR 0 3
57790: PUSH
57791: LD_INT 5
57793: EQUAL
57794: IFFALSE 57804
// sLevel := true ;
57796: LD_ADDR_EXP 53
57800: PUSH
57801: LD_INT 1
57803: ST_TO_ADDR
// if p3 = 6 then
57804: LD_VAR 0 3
57808: PUSH
57809: LD_INT 6
57811: EQUAL
57812: IFFALSE 57822
// sArmoury := true ;
57814: LD_ADDR_EXP 54
57818: PUSH
57819: LD_INT 1
57821: ST_TO_ADDR
// if p3 = 7 then
57822: LD_VAR 0 3
57826: PUSH
57827: LD_INT 7
57829: EQUAL
57830: IFFALSE 57840
// sRadar := true ;
57832: LD_ADDR_EXP 55
57836: PUSH
57837: LD_INT 1
57839: ST_TO_ADDR
// if p3 = 8 then
57840: LD_VAR 0 3
57844: PUSH
57845: LD_INT 8
57847: EQUAL
57848: IFFALSE 57858
// sBunker := true ;
57850: LD_ADDR_EXP 56
57854: PUSH
57855: LD_INT 1
57857: ST_TO_ADDR
// if p3 = 9 then
57858: LD_VAR 0 3
57862: PUSH
57863: LD_INT 9
57865: EQUAL
57866: IFFALSE 57876
// sHack := true ;
57868: LD_ADDR_EXP 57
57872: PUSH
57873: LD_INT 1
57875: ST_TO_ADDR
// if p3 = 10 then
57876: LD_VAR 0 3
57880: PUSH
57881: LD_INT 10
57883: EQUAL
57884: IFFALSE 57894
// sFire := true ;
57886: LD_ADDR_EXP 58
57890: PUSH
57891: LD_INT 1
57893: ST_TO_ADDR
// if p3 = 11 then
57894: LD_VAR 0 3
57898: PUSH
57899: LD_INT 11
57901: EQUAL
57902: IFFALSE 57912
// sRefresh := true ;
57904: LD_ADDR_EXP 59
57908: PUSH
57909: LD_INT 1
57911: ST_TO_ADDR
// if p3 = 12 then
57912: LD_VAR 0 3
57916: PUSH
57917: LD_INT 12
57919: EQUAL
57920: IFFALSE 57930
// sExp := true ;
57922: LD_ADDR_EXP 60
57926: PUSH
57927: LD_INT 1
57929: ST_TO_ADDR
// if p3 = 13 then
57930: LD_VAR 0 3
57934: PUSH
57935: LD_INT 13
57937: EQUAL
57938: IFFALSE 57948
// sDepot := true ;
57940: LD_ADDR_EXP 61
57944: PUSH
57945: LD_INT 1
57947: ST_TO_ADDR
// if p3 = 14 then
57948: LD_VAR 0 3
57952: PUSH
57953: LD_INT 14
57955: EQUAL
57956: IFFALSE 57966
// sFlag := true ;
57958: LD_ADDR_EXP 62
57962: PUSH
57963: LD_INT 1
57965: ST_TO_ADDR
// if p3 = 15 then
57966: LD_VAR 0 3
57970: PUSH
57971: LD_INT 15
57973: EQUAL
57974: IFFALSE 57984
// sKamikadze := true ;
57976: LD_ADDR_EXP 70
57980: PUSH
57981: LD_INT 1
57983: ST_TO_ADDR
// if p3 = 16 then
57984: LD_VAR 0 3
57988: PUSH
57989: LD_INT 16
57991: EQUAL
57992: IFFALSE 58002
// sTroll := true ;
57994: LD_ADDR_EXP 71
57998: PUSH
57999: LD_INT 1
58001: ST_TO_ADDR
// if p3 = 17 then
58002: LD_VAR 0 3
58006: PUSH
58007: LD_INT 17
58009: EQUAL
58010: IFFALSE 58020
// sSlow := true ;
58012: LD_ADDR_EXP 72
58016: PUSH
58017: LD_INT 1
58019: ST_TO_ADDR
// if p3 = 18 then
58020: LD_VAR 0 3
58024: PUSH
58025: LD_INT 18
58027: EQUAL
58028: IFFALSE 58038
// sLack := true ;
58030: LD_ADDR_EXP 73
58034: PUSH
58035: LD_INT 1
58037: ST_TO_ADDR
// if p3 = 19 then
58038: LD_VAR 0 3
58042: PUSH
58043: LD_INT 19
58045: EQUAL
58046: IFFALSE 58056
// sTank := true ;
58048: LD_ADDR_EXP 75
58052: PUSH
58053: LD_INT 1
58055: ST_TO_ADDR
// if p3 = 20 then
58056: LD_VAR 0 3
58060: PUSH
58061: LD_INT 20
58063: EQUAL
58064: IFFALSE 58074
// sRemote := true ;
58066: LD_ADDR_EXP 76
58070: PUSH
58071: LD_INT 1
58073: ST_TO_ADDR
// if p3 = 21 then
58074: LD_VAR 0 3
58078: PUSH
58079: LD_INT 21
58081: EQUAL
58082: IFFALSE 58092
// sPowell := true ;
58084: LD_ADDR_EXP 77
58088: PUSH
58089: LD_INT 1
58091: ST_TO_ADDR
// if p3 = 22 then
58092: LD_VAR 0 3
58096: PUSH
58097: LD_INT 22
58099: EQUAL
58100: IFFALSE 58110
// sTeleport := true ;
58102: LD_ADDR_EXP 80
58106: PUSH
58107: LD_INT 1
58109: ST_TO_ADDR
// if p3 = 23 then
58110: LD_VAR 0 3
58114: PUSH
58115: LD_INT 23
58117: EQUAL
58118: IFFALSE 58128
// sOilTower := true ;
58120: LD_ADDR_EXP 82
58124: PUSH
58125: LD_INT 1
58127: ST_TO_ADDR
// if p3 = 24 then
58128: LD_VAR 0 3
58132: PUSH
58133: LD_INT 24
58135: EQUAL
58136: IFFALSE 58146
// sShovel := true ;
58138: LD_ADDR_EXP 83
58142: PUSH
58143: LD_INT 1
58145: ST_TO_ADDR
// if p3 = 25 then
58146: LD_VAR 0 3
58150: PUSH
58151: LD_INT 25
58153: EQUAL
58154: IFFALSE 58164
// sSheik := true ;
58156: LD_ADDR_EXP 84
58160: PUSH
58161: LD_INT 1
58163: ST_TO_ADDR
// if p3 = 26 then
58164: LD_VAR 0 3
58168: PUSH
58169: LD_INT 26
58171: EQUAL
58172: IFFALSE 58182
// sEarthquake := true ;
58174: LD_ADDR_EXP 86
58178: PUSH
58179: LD_INT 1
58181: ST_TO_ADDR
// if p3 = 27 then
58182: LD_VAR 0 3
58186: PUSH
58187: LD_INT 27
58189: EQUAL
58190: IFFALSE 58200
// sAI := true ;
58192: LD_ADDR_EXP 87
58196: PUSH
58197: LD_INT 1
58199: ST_TO_ADDR
// if p3 = 28 then
58200: LD_VAR 0 3
58204: PUSH
58205: LD_INT 28
58207: EQUAL
58208: IFFALSE 58218
// sCargo := true ;
58210: LD_ADDR_EXP 90
58214: PUSH
58215: LD_INT 1
58217: ST_TO_ADDR
// if p3 = 29 then
58218: LD_VAR 0 3
58222: PUSH
58223: LD_INT 29
58225: EQUAL
58226: IFFALSE 58236
// sDLaser := true ;
58228: LD_ADDR_EXP 91
58232: PUSH
58233: LD_INT 1
58235: ST_TO_ADDR
// if p3 = 30 then
58236: LD_VAR 0 3
58240: PUSH
58241: LD_INT 30
58243: EQUAL
58244: IFFALSE 58254
// sExchange := true ;
58246: LD_ADDR_EXP 92
58250: PUSH
58251: LD_INT 1
58253: ST_TO_ADDR
// if p3 = 31 then
58254: LD_VAR 0 3
58258: PUSH
58259: LD_INT 31
58261: EQUAL
58262: IFFALSE 58272
// sFac := true ;
58264: LD_ADDR_EXP 93
58268: PUSH
58269: LD_INT 1
58271: ST_TO_ADDR
// if p3 = 32 then
58272: LD_VAR 0 3
58276: PUSH
58277: LD_INT 32
58279: EQUAL
58280: IFFALSE 58290
// sPower := true ;
58282: LD_ADDR_EXP 94
58286: PUSH
58287: LD_INT 1
58289: ST_TO_ADDR
// if p3 = 33 then
58290: LD_VAR 0 3
58294: PUSH
58295: LD_INT 33
58297: EQUAL
58298: IFFALSE 58308
// sRandom := true ;
58300: LD_ADDR_EXP 95
58304: PUSH
58305: LD_INT 1
58307: ST_TO_ADDR
// if p3 = 34 then
58308: LD_VAR 0 3
58312: PUSH
58313: LD_INT 34
58315: EQUAL
58316: IFFALSE 58326
// sShield := true ;
58318: LD_ADDR_EXP 96
58322: PUSH
58323: LD_INT 1
58325: ST_TO_ADDR
// if p3 = 35 then
58326: LD_VAR 0 3
58330: PUSH
58331: LD_INT 35
58333: EQUAL
58334: IFFALSE 58344
// sTime := true ;
58336: LD_ADDR_EXP 97
58340: PUSH
58341: LD_INT 1
58343: ST_TO_ADDR
// if p3 = 36 then
58344: LD_VAR 0 3
58348: PUSH
58349: LD_INT 36
58351: EQUAL
58352: IFFALSE 58362
// sTools := true ;
58354: LD_ADDR_EXP 98
58358: PUSH
58359: LD_INT 1
58361: ST_TO_ADDR
// if p3 = 101 then
58362: LD_VAR 0 3
58366: PUSH
58367: LD_INT 101
58369: EQUAL
58370: IFFALSE 58380
// sSold := true ;
58372: LD_ADDR_EXP 63
58376: PUSH
58377: LD_INT 1
58379: ST_TO_ADDR
// if p3 = 102 then
58380: LD_VAR 0 3
58384: PUSH
58385: LD_INT 102
58387: EQUAL
58388: IFFALSE 58398
// sDiff := true ;
58390: LD_ADDR_EXP 64
58394: PUSH
58395: LD_INT 1
58397: ST_TO_ADDR
// if p3 = 103 then
58398: LD_VAR 0 3
58402: PUSH
58403: LD_INT 103
58405: EQUAL
58406: IFFALSE 58416
// sFog := true ;
58408: LD_ADDR_EXP 67
58412: PUSH
58413: LD_INT 1
58415: ST_TO_ADDR
// if p3 = 104 then
58416: LD_VAR 0 3
58420: PUSH
58421: LD_INT 104
58423: EQUAL
58424: IFFALSE 58434
// sReset := true ;
58426: LD_ADDR_EXP 68
58430: PUSH
58431: LD_INT 1
58433: ST_TO_ADDR
// if p3 = 105 then
58434: LD_VAR 0 3
58438: PUSH
58439: LD_INT 105
58441: EQUAL
58442: IFFALSE 58452
// sSun := true ;
58444: LD_ADDR_EXP 69
58448: PUSH
58449: LD_INT 1
58451: ST_TO_ADDR
// if p3 = 106 then
58452: LD_VAR 0 3
58456: PUSH
58457: LD_INT 106
58459: EQUAL
58460: IFFALSE 58470
// sTiger := true ;
58462: LD_ADDR_EXP 65
58466: PUSH
58467: LD_INT 1
58469: ST_TO_ADDR
// if p3 = 107 then
58470: LD_VAR 0 3
58474: PUSH
58475: LD_INT 107
58477: EQUAL
58478: IFFALSE 58488
// sBomb := true ;
58480: LD_ADDR_EXP 66
58484: PUSH
58485: LD_INT 1
58487: ST_TO_ADDR
// if p3 = 108 then
58488: LD_VAR 0 3
58492: PUSH
58493: LD_INT 108
58495: EQUAL
58496: IFFALSE 58506
// sWound := true ;
58498: LD_ADDR_EXP 74
58502: PUSH
58503: LD_INT 1
58505: ST_TO_ADDR
// if p3 = 109 then
58506: LD_VAR 0 3
58510: PUSH
58511: LD_INT 109
58513: EQUAL
58514: IFFALSE 58524
// sBetray := true ;
58516: LD_ADDR_EXP 78
58520: PUSH
58521: LD_INT 1
58523: ST_TO_ADDR
// if p3 = 110 then
58524: LD_VAR 0 3
58528: PUSH
58529: LD_INT 110
58531: EQUAL
58532: IFFALSE 58542
// sContamin := true ;
58534: LD_ADDR_EXP 79
58538: PUSH
58539: LD_INT 1
58541: ST_TO_ADDR
// if p3 = 111 then
58542: LD_VAR 0 3
58546: PUSH
58547: LD_INT 111
58549: EQUAL
58550: IFFALSE 58560
// sOil := true ;
58552: LD_ADDR_EXP 81
58556: PUSH
58557: LD_INT 1
58559: ST_TO_ADDR
// if p3 = 112 then
58560: LD_VAR 0 3
58564: PUSH
58565: LD_INT 112
58567: EQUAL
58568: IFFALSE 58578
// sStu := true ;
58570: LD_ADDR_EXP 85
58574: PUSH
58575: LD_INT 1
58577: ST_TO_ADDR
// if p3 = 113 then
58578: LD_VAR 0 3
58582: PUSH
58583: LD_INT 113
58585: EQUAL
58586: IFFALSE 58596
// sBazooka := true ;
58588: LD_ADDR_EXP 88
58592: PUSH
58593: LD_INT 1
58595: ST_TO_ADDR
// if p3 = 114 then
58596: LD_VAR 0 3
58600: PUSH
58601: LD_INT 114
58603: EQUAL
58604: IFFALSE 58614
// sMortar := true ;
58606: LD_ADDR_EXP 89
58610: PUSH
58611: LD_INT 1
58613: ST_TO_ADDR
// if p3 = 115 then
58614: LD_VAR 0 3
58618: PUSH
58619: LD_INT 115
58621: EQUAL
58622: IFFALSE 58632
// sRanger := true ;
58624: LD_ADDR_EXP 99
58628: PUSH
58629: LD_INT 1
58631: ST_TO_ADDR
// if p3 = 116 then
58632: LD_VAR 0 3
58636: PUSH
58637: LD_INT 116
58639: EQUAL
58640: IFFALSE 58650
// sComputer := true ;
58642: LD_ADDR_EXP 100
58646: PUSH
58647: LD_INT 1
58649: ST_TO_ADDR
// if p3 = 117 then
58650: LD_VAR 0 3
58654: PUSH
58655: LD_INT 117
58657: EQUAL
58658: IFFALSE 58668
// s30 := true ;
58660: LD_ADDR_EXP 101
58664: PUSH
58665: LD_INT 1
58667: ST_TO_ADDR
// if p3 = 118 then
58668: LD_VAR 0 3
58672: PUSH
58673: LD_INT 118
58675: EQUAL
58676: IFFALSE 58686
// s60 := true ;
58678: LD_ADDR_EXP 102
58682: PUSH
58683: LD_INT 1
58685: ST_TO_ADDR
// end ; if p2 = hack_mode then
58686: LD_VAR 0 2
58690: PUSH
58691: LD_INT 101
58693: EQUAL
58694: IFFALSE 58822
// begin case p3 of 1 :
58696: LD_VAR 0 3
58700: PUSH
58701: LD_INT 1
58703: DOUBLE
58704: EQUAL
58705: IFTRUE 58709
58707: GO 58716
58709: POP
// hHackUnlimitedResources ; 2 :
58710: CALL 70969 0 0
58714: GO 58822
58716: LD_INT 2
58718: DOUBLE
58719: EQUAL
58720: IFTRUE 58724
58722: GO 58731
58724: POP
// hHackSetLevel10 ; 3 :
58725: CALL 71102 0 0
58729: GO 58822
58731: LD_INT 3
58733: DOUBLE
58734: EQUAL
58735: IFTRUE 58739
58737: GO 58746
58739: POP
// hHackSetLevel10YourUnits ; 4 :
58740: CALL 71187 0 0
58744: GO 58822
58746: LD_INT 4
58748: DOUBLE
58749: EQUAL
58750: IFTRUE 58754
58752: GO 58761
58754: POP
// hHackInvincible ; 5 :
58755: CALL 71635 0 0
58759: GO 58822
58761: LD_INT 5
58763: DOUBLE
58764: EQUAL
58765: IFTRUE 58769
58767: GO 58776
58769: POP
// hHackInvisible ; 6 :
58770: CALL 71746 0 0
58774: GO 58822
58776: LD_INT 6
58778: DOUBLE
58779: EQUAL
58780: IFTRUE 58784
58782: GO 58791
58784: POP
// hHackChangeYourSide ; 7 :
58785: CALL 71803 0 0
58789: GO 58822
58791: LD_INT 7
58793: DOUBLE
58794: EQUAL
58795: IFTRUE 58799
58797: GO 58806
58799: POP
// hHackChangeUnitSide ; 8 :
58800: CALL 71845 0 0
58804: GO 58822
58806: LD_INT 8
58808: DOUBLE
58809: EQUAL
58810: IFTRUE 58814
58812: GO 58821
58814: POP
// hHackFog ; end ;
58815: CALL 71946 0 0
58819: GO 58822
58821: POP
// end ; if p2 = game_save_mode then
58822: LD_VAR 0 2
58826: PUSH
58827: LD_INT 102
58829: EQUAL
58830: IFFALSE 58885
// begin if p3 = 1 then
58832: LD_VAR 0 3
58836: PUSH
58837: LD_INT 1
58839: EQUAL
58840: IFFALSE 58852
// globalGameSaveCounter := p4 ;
58842: LD_ADDR_EXP 45
58846: PUSH
58847: LD_VAR 0 4
58851: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
58852: LD_VAR 0 3
58856: PUSH
58857: LD_INT 2
58859: EQUAL
58860: PUSH
58861: LD_EXP 45
58865: AND
58866: IFFALSE 58885
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
58868: LD_STRING setGameSaveCounter(
58870: PUSH
58871: LD_EXP 45
58875: STR
58876: PUSH
58877: LD_STRING )
58879: STR
58880: PPUSH
58881: CALL_OW 559
// end ; end ;
58885: LD_VAR 0 7
58889: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
58890: LD_INT 0
58892: PPUSH
// streamModeActive := false ;
58893: LD_ADDR_EXP 46
58897: PUSH
58898: LD_INT 0
58900: ST_TO_ADDR
// normalCounter := 36 ;
58901: LD_ADDR_EXP 47
58905: PUSH
58906: LD_INT 36
58908: ST_TO_ADDR
// hardcoreCounter := 18 ;
58909: LD_ADDR_EXP 48
58913: PUSH
58914: LD_INT 18
58916: ST_TO_ADDR
// sRocket := false ;
58917: LD_ADDR_EXP 51
58921: PUSH
58922: LD_INT 0
58924: ST_TO_ADDR
// sSpeed := false ;
58925: LD_ADDR_EXP 50
58929: PUSH
58930: LD_INT 0
58932: ST_TO_ADDR
// sEngine := false ;
58933: LD_ADDR_EXP 52
58937: PUSH
58938: LD_INT 0
58940: ST_TO_ADDR
// sSpec := false ;
58941: LD_ADDR_EXP 49
58945: PUSH
58946: LD_INT 0
58948: ST_TO_ADDR
// sLevel := false ;
58949: LD_ADDR_EXP 53
58953: PUSH
58954: LD_INT 0
58956: ST_TO_ADDR
// sArmoury := false ;
58957: LD_ADDR_EXP 54
58961: PUSH
58962: LD_INT 0
58964: ST_TO_ADDR
// sRadar := false ;
58965: LD_ADDR_EXP 55
58969: PUSH
58970: LD_INT 0
58972: ST_TO_ADDR
// sBunker := false ;
58973: LD_ADDR_EXP 56
58977: PUSH
58978: LD_INT 0
58980: ST_TO_ADDR
// sHack := false ;
58981: LD_ADDR_EXP 57
58985: PUSH
58986: LD_INT 0
58988: ST_TO_ADDR
// sFire := false ;
58989: LD_ADDR_EXP 58
58993: PUSH
58994: LD_INT 0
58996: ST_TO_ADDR
// sRefresh := false ;
58997: LD_ADDR_EXP 59
59001: PUSH
59002: LD_INT 0
59004: ST_TO_ADDR
// sExp := false ;
59005: LD_ADDR_EXP 60
59009: PUSH
59010: LD_INT 0
59012: ST_TO_ADDR
// sDepot := false ;
59013: LD_ADDR_EXP 61
59017: PUSH
59018: LD_INT 0
59020: ST_TO_ADDR
// sFlag := false ;
59021: LD_ADDR_EXP 62
59025: PUSH
59026: LD_INT 0
59028: ST_TO_ADDR
// sKamikadze := false ;
59029: LD_ADDR_EXP 70
59033: PUSH
59034: LD_INT 0
59036: ST_TO_ADDR
// sTroll := false ;
59037: LD_ADDR_EXP 71
59041: PUSH
59042: LD_INT 0
59044: ST_TO_ADDR
// sSlow := false ;
59045: LD_ADDR_EXP 72
59049: PUSH
59050: LD_INT 0
59052: ST_TO_ADDR
// sLack := false ;
59053: LD_ADDR_EXP 73
59057: PUSH
59058: LD_INT 0
59060: ST_TO_ADDR
// sTank := false ;
59061: LD_ADDR_EXP 75
59065: PUSH
59066: LD_INT 0
59068: ST_TO_ADDR
// sRemote := false ;
59069: LD_ADDR_EXP 76
59073: PUSH
59074: LD_INT 0
59076: ST_TO_ADDR
// sPowell := false ;
59077: LD_ADDR_EXP 77
59081: PUSH
59082: LD_INT 0
59084: ST_TO_ADDR
// sTeleport := false ;
59085: LD_ADDR_EXP 80
59089: PUSH
59090: LD_INT 0
59092: ST_TO_ADDR
// sOilTower := false ;
59093: LD_ADDR_EXP 82
59097: PUSH
59098: LD_INT 0
59100: ST_TO_ADDR
// sShovel := false ;
59101: LD_ADDR_EXP 83
59105: PUSH
59106: LD_INT 0
59108: ST_TO_ADDR
// sSheik := false ;
59109: LD_ADDR_EXP 84
59113: PUSH
59114: LD_INT 0
59116: ST_TO_ADDR
// sEarthquake := false ;
59117: LD_ADDR_EXP 86
59121: PUSH
59122: LD_INT 0
59124: ST_TO_ADDR
// sAI := false ;
59125: LD_ADDR_EXP 87
59129: PUSH
59130: LD_INT 0
59132: ST_TO_ADDR
// sCargo := false ;
59133: LD_ADDR_EXP 90
59137: PUSH
59138: LD_INT 0
59140: ST_TO_ADDR
// sDLaser := false ;
59141: LD_ADDR_EXP 91
59145: PUSH
59146: LD_INT 0
59148: ST_TO_ADDR
// sExchange := false ;
59149: LD_ADDR_EXP 92
59153: PUSH
59154: LD_INT 0
59156: ST_TO_ADDR
// sFac := false ;
59157: LD_ADDR_EXP 93
59161: PUSH
59162: LD_INT 0
59164: ST_TO_ADDR
// sPower := false ;
59165: LD_ADDR_EXP 94
59169: PUSH
59170: LD_INT 0
59172: ST_TO_ADDR
// sRandom := false ;
59173: LD_ADDR_EXP 95
59177: PUSH
59178: LD_INT 0
59180: ST_TO_ADDR
// sShield := false ;
59181: LD_ADDR_EXP 96
59185: PUSH
59186: LD_INT 0
59188: ST_TO_ADDR
// sTime := false ;
59189: LD_ADDR_EXP 97
59193: PUSH
59194: LD_INT 0
59196: ST_TO_ADDR
// sTools := false ;
59197: LD_ADDR_EXP 98
59201: PUSH
59202: LD_INT 0
59204: ST_TO_ADDR
// sSold := false ;
59205: LD_ADDR_EXP 63
59209: PUSH
59210: LD_INT 0
59212: ST_TO_ADDR
// sDiff := false ;
59213: LD_ADDR_EXP 64
59217: PUSH
59218: LD_INT 0
59220: ST_TO_ADDR
// sFog := false ;
59221: LD_ADDR_EXP 67
59225: PUSH
59226: LD_INT 0
59228: ST_TO_ADDR
// sReset := false ;
59229: LD_ADDR_EXP 68
59233: PUSH
59234: LD_INT 0
59236: ST_TO_ADDR
// sSun := false ;
59237: LD_ADDR_EXP 69
59241: PUSH
59242: LD_INT 0
59244: ST_TO_ADDR
// sTiger := false ;
59245: LD_ADDR_EXP 65
59249: PUSH
59250: LD_INT 0
59252: ST_TO_ADDR
// sBomb := false ;
59253: LD_ADDR_EXP 66
59257: PUSH
59258: LD_INT 0
59260: ST_TO_ADDR
// sWound := false ;
59261: LD_ADDR_EXP 74
59265: PUSH
59266: LD_INT 0
59268: ST_TO_ADDR
// sBetray := false ;
59269: LD_ADDR_EXP 78
59273: PUSH
59274: LD_INT 0
59276: ST_TO_ADDR
// sContamin := false ;
59277: LD_ADDR_EXP 79
59281: PUSH
59282: LD_INT 0
59284: ST_TO_ADDR
// sOil := false ;
59285: LD_ADDR_EXP 81
59289: PUSH
59290: LD_INT 0
59292: ST_TO_ADDR
// sStu := false ;
59293: LD_ADDR_EXP 85
59297: PUSH
59298: LD_INT 0
59300: ST_TO_ADDR
// sBazooka := false ;
59301: LD_ADDR_EXP 88
59305: PUSH
59306: LD_INT 0
59308: ST_TO_ADDR
// sMortar := false ;
59309: LD_ADDR_EXP 89
59313: PUSH
59314: LD_INT 0
59316: ST_TO_ADDR
// sRanger := false ;
59317: LD_ADDR_EXP 99
59321: PUSH
59322: LD_INT 0
59324: ST_TO_ADDR
// sComputer := false ;
59325: LD_ADDR_EXP 100
59329: PUSH
59330: LD_INT 0
59332: ST_TO_ADDR
// s30 := false ;
59333: LD_ADDR_EXP 101
59337: PUSH
59338: LD_INT 0
59340: ST_TO_ADDR
// s60 := false ;
59341: LD_ADDR_EXP 102
59345: PUSH
59346: LD_INT 0
59348: ST_TO_ADDR
// end ;
59349: LD_VAR 0 1
59353: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
59354: LD_INT 0
59356: PPUSH
59357: PPUSH
59358: PPUSH
59359: PPUSH
59360: PPUSH
59361: PPUSH
59362: PPUSH
// result := [ ] ;
59363: LD_ADDR_VAR 0 2
59367: PUSH
59368: EMPTY
59369: ST_TO_ADDR
// if campaign_id = 1 then
59370: LD_OWVAR 69
59374: PUSH
59375: LD_INT 1
59377: EQUAL
59378: IFFALSE 62544
// begin case mission_number of 1 :
59380: LD_OWVAR 70
59384: PUSH
59385: LD_INT 1
59387: DOUBLE
59388: EQUAL
59389: IFTRUE 59393
59391: GO 59469
59393: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
59394: LD_ADDR_VAR 0 2
59398: PUSH
59399: LD_INT 2
59401: PUSH
59402: LD_INT 4
59404: PUSH
59405: LD_INT 11
59407: PUSH
59408: LD_INT 12
59410: PUSH
59411: LD_INT 15
59413: PUSH
59414: LD_INT 16
59416: PUSH
59417: LD_INT 22
59419: PUSH
59420: LD_INT 23
59422: PUSH
59423: LD_INT 26
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 101
59439: PUSH
59440: LD_INT 102
59442: PUSH
59443: LD_INT 106
59445: PUSH
59446: LD_INT 116
59448: PUSH
59449: LD_INT 117
59451: PUSH
59452: LD_INT 118
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: ST_TO_ADDR
59467: GO 62542
59469: LD_INT 2
59471: DOUBLE
59472: EQUAL
59473: IFTRUE 59477
59475: GO 59561
59477: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
59478: LD_ADDR_VAR 0 2
59482: PUSH
59483: LD_INT 2
59485: PUSH
59486: LD_INT 4
59488: PUSH
59489: LD_INT 11
59491: PUSH
59492: LD_INT 12
59494: PUSH
59495: LD_INT 15
59497: PUSH
59498: LD_INT 16
59500: PUSH
59501: LD_INT 22
59503: PUSH
59504: LD_INT 23
59506: PUSH
59507: LD_INT 26
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 101
59523: PUSH
59524: LD_INT 102
59526: PUSH
59527: LD_INT 105
59529: PUSH
59530: LD_INT 106
59532: PUSH
59533: LD_INT 108
59535: PUSH
59536: LD_INT 116
59538: PUSH
59539: LD_INT 117
59541: PUSH
59542: LD_INT 118
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: ST_TO_ADDR
59559: GO 62542
59561: LD_INT 3
59563: DOUBLE
59564: EQUAL
59565: IFTRUE 59569
59567: GO 59657
59569: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
59570: LD_ADDR_VAR 0 2
59574: PUSH
59575: LD_INT 2
59577: PUSH
59578: LD_INT 4
59580: PUSH
59581: LD_INT 5
59583: PUSH
59584: LD_INT 11
59586: PUSH
59587: LD_INT 12
59589: PUSH
59590: LD_INT 15
59592: PUSH
59593: LD_INT 16
59595: PUSH
59596: LD_INT 22
59598: PUSH
59599: LD_INT 26
59601: PUSH
59602: LD_INT 36
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 101
59619: PUSH
59620: LD_INT 102
59622: PUSH
59623: LD_INT 105
59625: PUSH
59626: LD_INT 106
59628: PUSH
59629: LD_INT 108
59631: PUSH
59632: LD_INT 116
59634: PUSH
59635: LD_INT 117
59637: PUSH
59638: LD_INT 118
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: ST_TO_ADDR
59655: GO 62542
59657: LD_INT 4
59659: DOUBLE
59660: EQUAL
59661: IFTRUE 59665
59663: GO 59761
59665: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
59666: LD_ADDR_VAR 0 2
59670: PUSH
59671: LD_INT 2
59673: PUSH
59674: LD_INT 4
59676: PUSH
59677: LD_INT 5
59679: PUSH
59680: LD_INT 8
59682: PUSH
59683: LD_INT 11
59685: PUSH
59686: LD_INT 12
59688: PUSH
59689: LD_INT 15
59691: PUSH
59692: LD_INT 16
59694: PUSH
59695: LD_INT 22
59697: PUSH
59698: LD_INT 23
59700: PUSH
59701: LD_INT 26
59703: PUSH
59704: LD_INT 36
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 101
59723: PUSH
59724: LD_INT 102
59726: PUSH
59727: LD_INT 105
59729: PUSH
59730: LD_INT 106
59732: PUSH
59733: LD_INT 108
59735: PUSH
59736: LD_INT 116
59738: PUSH
59739: LD_INT 117
59741: PUSH
59742: LD_INT 118
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: ST_TO_ADDR
59759: GO 62542
59761: LD_INT 5
59763: DOUBLE
59764: EQUAL
59765: IFTRUE 59769
59767: GO 59881
59769: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
59770: LD_ADDR_VAR 0 2
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: LD_INT 4
59780: PUSH
59781: LD_INT 5
59783: PUSH
59784: LD_INT 6
59786: PUSH
59787: LD_INT 8
59789: PUSH
59790: LD_INT 11
59792: PUSH
59793: LD_INT 12
59795: PUSH
59796: LD_INT 15
59798: PUSH
59799: LD_INT 16
59801: PUSH
59802: LD_INT 22
59804: PUSH
59805: LD_INT 23
59807: PUSH
59808: LD_INT 25
59810: PUSH
59811: LD_INT 26
59813: PUSH
59814: LD_INT 36
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 101
59835: PUSH
59836: LD_INT 102
59838: PUSH
59839: LD_INT 105
59841: PUSH
59842: LD_INT 106
59844: PUSH
59845: LD_INT 108
59847: PUSH
59848: LD_INT 109
59850: PUSH
59851: LD_INT 112
59853: PUSH
59854: LD_INT 116
59856: PUSH
59857: LD_INT 117
59859: PUSH
59860: LD_INT 118
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: ST_TO_ADDR
59879: GO 62542
59881: LD_INT 6
59883: DOUBLE
59884: EQUAL
59885: IFTRUE 59889
59887: GO 60021
59889: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
59890: LD_ADDR_VAR 0 2
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: LD_INT 4
59900: PUSH
59901: LD_INT 5
59903: PUSH
59904: LD_INT 6
59906: PUSH
59907: LD_INT 8
59909: PUSH
59910: LD_INT 11
59912: PUSH
59913: LD_INT 12
59915: PUSH
59916: LD_INT 15
59918: PUSH
59919: LD_INT 16
59921: PUSH
59922: LD_INT 20
59924: PUSH
59925: LD_INT 21
59927: PUSH
59928: LD_INT 22
59930: PUSH
59931: LD_INT 23
59933: PUSH
59934: LD_INT 25
59936: PUSH
59937: LD_INT 26
59939: PUSH
59940: LD_INT 30
59942: PUSH
59943: LD_INT 31
59945: PUSH
59946: LD_INT 32
59948: PUSH
59949: LD_INT 36
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 101
59975: PUSH
59976: LD_INT 102
59978: PUSH
59979: LD_INT 105
59981: PUSH
59982: LD_INT 106
59984: PUSH
59985: LD_INT 108
59987: PUSH
59988: LD_INT 109
59990: PUSH
59991: LD_INT 112
59993: PUSH
59994: LD_INT 116
59996: PUSH
59997: LD_INT 117
59999: PUSH
60000: LD_INT 118
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: ST_TO_ADDR
60019: GO 62542
60021: LD_INT 7
60023: DOUBLE
60024: EQUAL
60025: IFTRUE 60029
60027: GO 60141
60029: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
60030: LD_ADDR_VAR 0 2
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: LD_INT 4
60040: PUSH
60041: LD_INT 5
60043: PUSH
60044: LD_INT 7
60046: PUSH
60047: LD_INT 11
60049: PUSH
60050: LD_INT 12
60052: PUSH
60053: LD_INT 15
60055: PUSH
60056: LD_INT 16
60058: PUSH
60059: LD_INT 20
60061: PUSH
60062: LD_INT 21
60064: PUSH
60065: LD_INT 22
60067: PUSH
60068: LD_INT 23
60070: PUSH
60071: LD_INT 25
60073: PUSH
60074: LD_INT 26
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 101
60095: PUSH
60096: LD_INT 102
60098: PUSH
60099: LD_INT 103
60101: PUSH
60102: LD_INT 105
60104: PUSH
60105: LD_INT 106
60107: PUSH
60108: LD_INT 108
60110: PUSH
60111: LD_INT 112
60113: PUSH
60114: LD_INT 116
60116: PUSH
60117: LD_INT 117
60119: PUSH
60120: LD_INT 118
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: ST_TO_ADDR
60139: GO 62542
60141: LD_INT 8
60143: DOUBLE
60144: EQUAL
60145: IFTRUE 60149
60147: GO 60289
60149: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
60150: LD_ADDR_VAR 0 2
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: LD_INT 4
60160: PUSH
60161: LD_INT 5
60163: PUSH
60164: LD_INT 6
60166: PUSH
60167: LD_INT 7
60169: PUSH
60170: LD_INT 8
60172: PUSH
60173: LD_INT 11
60175: PUSH
60176: LD_INT 12
60178: PUSH
60179: LD_INT 15
60181: PUSH
60182: LD_INT 16
60184: PUSH
60185: LD_INT 20
60187: PUSH
60188: LD_INT 21
60190: PUSH
60191: LD_INT 22
60193: PUSH
60194: LD_INT 23
60196: PUSH
60197: LD_INT 25
60199: PUSH
60200: LD_INT 26
60202: PUSH
60203: LD_INT 30
60205: PUSH
60206: LD_INT 31
60208: PUSH
60209: LD_INT 32
60211: PUSH
60212: LD_INT 36
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 101
60239: PUSH
60240: LD_INT 102
60242: PUSH
60243: LD_INT 103
60245: PUSH
60246: LD_INT 105
60248: PUSH
60249: LD_INT 106
60251: PUSH
60252: LD_INT 108
60254: PUSH
60255: LD_INT 109
60257: PUSH
60258: LD_INT 112
60260: PUSH
60261: LD_INT 116
60263: PUSH
60264: LD_INT 117
60266: PUSH
60267: LD_INT 118
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: ST_TO_ADDR
60287: GO 62542
60289: LD_INT 9
60291: DOUBLE
60292: EQUAL
60293: IFTRUE 60297
60295: GO 60445
60297: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
60298: LD_ADDR_VAR 0 2
60302: PUSH
60303: LD_INT 2
60305: PUSH
60306: LD_INT 4
60308: PUSH
60309: LD_INT 5
60311: PUSH
60312: LD_INT 6
60314: PUSH
60315: LD_INT 7
60317: PUSH
60318: LD_INT 8
60320: PUSH
60321: LD_INT 11
60323: PUSH
60324: LD_INT 12
60326: PUSH
60327: LD_INT 15
60329: PUSH
60330: LD_INT 16
60332: PUSH
60333: LD_INT 20
60335: PUSH
60336: LD_INT 21
60338: PUSH
60339: LD_INT 22
60341: PUSH
60342: LD_INT 23
60344: PUSH
60345: LD_INT 25
60347: PUSH
60348: LD_INT 26
60350: PUSH
60351: LD_INT 28
60353: PUSH
60354: LD_INT 30
60356: PUSH
60357: LD_INT 31
60359: PUSH
60360: LD_INT 32
60362: PUSH
60363: LD_INT 36
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 101
60391: PUSH
60392: LD_INT 102
60394: PUSH
60395: LD_INT 103
60397: PUSH
60398: LD_INT 105
60400: PUSH
60401: LD_INT 106
60403: PUSH
60404: LD_INT 108
60406: PUSH
60407: LD_INT 109
60409: PUSH
60410: LD_INT 112
60412: PUSH
60413: LD_INT 114
60415: PUSH
60416: LD_INT 116
60418: PUSH
60419: LD_INT 117
60421: PUSH
60422: LD_INT 118
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: ST_TO_ADDR
60443: GO 62542
60445: LD_INT 10
60447: DOUBLE
60448: EQUAL
60449: IFTRUE 60453
60451: GO 60649
60453: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
60454: LD_ADDR_VAR 0 2
60458: PUSH
60459: LD_INT 2
60461: PUSH
60462: LD_INT 4
60464: PUSH
60465: LD_INT 5
60467: PUSH
60468: LD_INT 6
60470: PUSH
60471: LD_INT 7
60473: PUSH
60474: LD_INT 8
60476: PUSH
60477: LD_INT 9
60479: PUSH
60480: LD_INT 10
60482: PUSH
60483: LD_INT 11
60485: PUSH
60486: LD_INT 12
60488: PUSH
60489: LD_INT 13
60491: PUSH
60492: LD_INT 14
60494: PUSH
60495: LD_INT 15
60497: PUSH
60498: LD_INT 16
60500: PUSH
60501: LD_INT 17
60503: PUSH
60504: LD_INT 18
60506: PUSH
60507: LD_INT 19
60509: PUSH
60510: LD_INT 20
60512: PUSH
60513: LD_INT 21
60515: PUSH
60516: LD_INT 22
60518: PUSH
60519: LD_INT 23
60521: PUSH
60522: LD_INT 24
60524: PUSH
60525: LD_INT 25
60527: PUSH
60528: LD_INT 26
60530: PUSH
60531: LD_INT 28
60533: PUSH
60534: LD_INT 30
60536: PUSH
60537: LD_INT 31
60539: PUSH
60540: LD_INT 32
60542: PUSH
60543: LD_INT 36
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 101
60579: PUSH
60580: LD_INT 102
60582: PUSH
60583: LD_INT 103
60585: PUSH
60586: LD_INT 104
60588: PUSH
60589: LD_INT 105
60591: PUSH
60592: LD_INT 106
60594: PUSH
60595: LD_INT 107
60597: PUSH
60598: LD_INT 108
60600: PUSH
60601: LD_INT 109
60603: PUSH
60604: LD_INT 110
60606: PUSH
60607: LD_INT 111
60609: PUSH
60610: LD_INT 112
60612: PUSH
60613: LD_INT 114
60615: PUSH
60616: LD_INT 116
60618: PUSH
60619: LD_INT 117
60621: PUSH
60622: LD_INT 118
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: ST_TO_ADDR
60647: GO 62542
60649: LD_INT 11
60651: DOUBLE
60652: EQUAL
60653: IFTRUE 60657
60655: GO 60861
60657: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
60658: LD_ADDR_VAR 0 2
60662: PUSH
60663: LD_INT 2
60665: PUSH
60666: LD_INT 3
60668: PUSH
60669: LD_INT 4
60671: PUSH
60672: LD_INT 5
60674: PUSH
60675: LD_INT 6
60677: PUSH
60678: LD_INT 7
60680: PUSH
60681: LD_INT 8
60683: PUSH
60684: LD_INT 9
60686: PUSH
60687: LD_INT 10
60689: PUSH
60690: LD_INT 11
60692: PUSH
60693: LD_INT 12
60695: PUSH
60696: LD_INT 13
60698: PUSH
60699: LD_INT 14
60701: PUSH
60702: LD_INT 15
60704: PUSH
60705: LD_INT 16
60707: PUSH
60708: LD_INT 17
60710: PUSH
60711: LD_INT 18
60713: PUSH
60714: LD_INT 19
60716: PUSH
60717: LD_INT 20
60719: PUSH
60720: LD_INT 21
60722: PUSH
60723: LD_INT 22
60725: PUSH
60726: LD_INT 23
60728: PUSH
60729: LD_INT 24
60731: PUSH
60732: LD_INT 25
60734: PUSH
60735: LD_INT 26
60737: PUSH
60738: LD_INT 28
60740: PUSH
60741: LD_INT 30
60743: PUSH
60744: LD_INT 31
60746: PUSH
60747: LD_INT 32
60749: PUSH
60750: LD_INT 34
60752: PUSH
60753: LD_INT 36
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 101
60791: PUSH
60792: LD_INT 102
60794: PUSH
60795: LD_INT 103
60797: PUSH
60798: LD_INT 104
60800: PUSH
60801: LD_INT 105
60803: PUSH
60804: LD_INT 106
60806: PUSH
60807: LD_INT 107
60809: PUSH
60810: LD_INT 108
60812: PUSH
60813: LD_INT 109
60815: PUSH
60816: LD_INT 110
60818: PUSH
60819: LD_INT 111
60821: PUSH
60822: LD_INT 112
60824: PUSH
60825: LD_INT 114
60827: PUSH
60828: LD_INT 116
60830: PUSH
60831: LD_INT 117
60833: PUSH
60834: LD_INT 118
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: ST_TO_ADDR
60859: GO 62542
60861: LD_INT 12
60863: DOUBLE
60864: EQUAL
60865: IFTRUE 60869
60867: GO 61089
60869: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
60870: LD_ADDR_VAR 0 2
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: LD_INT 2
60880: PUSH
60881: LD_INT 3
60883: PUSH
60884: LD_INT 4
60886: PUSH
60887: LD_INT 5
60889: PUSH
60890: LD_INT 6
60892: PUSH
60893: LD_INT 7
60895: PUSH
60896: LD_INT 8
60898: PUSH
60899: LD_INT 9
60901: PUSH
60902: LD_INT 10
60904: PUSH
60905: LD_INT 11
60907: PUSH
60908: LD_INT 12
60910: PUSH
60911: LD_INT 13
60913: PUSH
60914: LD_INT 14
60916: PUSH
60917: LD_INT 15
60919: PUSH
60920: LD_INT 16
60922: PUSH
60923: LD_INT 17
60925: PUSH
60926: LD_INT 18
60928: PUSH
60929: LD_INT 19
60931: PUSH
60932: LD_INT 20
60934: PUSH
60935: LD_INT 21
60937: PUSH
60938: LD_INT 22
60940: PUSH
60941: LD_INT 23
60943: PUSH
60944: LD_INT 24
60946: PUSH
60947: LD_INT 25
60949: PUSH
60950: LD_INT 26
60952: PUSH
60953: LD_INT 27
60955: PUSH
60956: LD_INT 28
60958: PUSH
60959: LD_INT 30
60961: PUSH
60962: LD_INT 31
60964: PUSH
60965: LD_INT 32
60967: PUSH
60968: LD_INT 33
60970: PUSH
60971: LD_INT 34
60973: PUSH
60974: LD_INT 36
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 101
61015: PUSH
61016: LD_INT 102
61018: PUSH
61019: LD_INT 103
61021: PUSH
61022: LD_INT 104
61024: PUSH
61025: LD_INT 105
61027: PUSH
61028: LD_INT 106
61030: PUSH
61031: LD_INT 107
61033: PUSH
61034: LD_INT 108
61036: PUSH
61037: LD_INT 109
61039: PUSH
61040: LD_INT 110
61042: PUSH
61043: LD_INT 111
61045: PUSH
61046: LD_INT 112
61048: PUSH
61049: LD_INT 113
61051: PUSH
61052: LD_INT 114
61054: PUSH
61055: LD_INT 116
61057: PUSH
61058: LD_INT 117
61060: PUSH
61061: LD_INT 118
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: ST_TO_ADDR
61087: GO 62542
61089: LD_INT 13
61091: DOUBLE
61092: EQUAL
61093: IFTRUE 61097
61095: GO 61305
61097: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
61098: LD_ADDR_VAR 0 2
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: LD_INT 3
61111: PUSH
61112: LD_INT 4
61114: PUSH
61115: LD_INT 5
61117: PUSH
61118: LD_INT 8
61120: PUSH
61121: LD_INT 9
61123: PUSH
61124: LD_INT 10
61126: PUSH
61127: LD_INT 11
61129: PUSH
61130: LD_INT 12
61132: PUSH
61133: LD_INT 14
61135: PUSH
61136: LD_INT 15
61138: PUSH
61139: LD_INT 16
61141: PUSH
61142: LD_INT 17
61144: PUSH
61145: LD_INT 18
61147: PUSH
61148: LD_INT 19
61150: PUSH
61151: LD_INT 20
61153: PUSH
61154: LD_INT 21
61156: PUSH
61157: LD_INT 22
61159: PUSH
61160: LD_INT 23
61162: PUSH
61163: LD_INT 24
61165: PUSH
61166: LD_INT 25
61168: PUSH
61169: LD_INT 26
61171: PUSH
61172: LD_INT 27
61174: PUSH
61175: LD_INT 28
61177: PUSH
61178: LD_INT 30
61180: PUSH
61181: LD_INT 31
61183: PUSH
61184: LD_INT 32
61186: PUSH
61187: LD_INT 33
61189: PUSH
61190: LD_INT 34
61192: PUSH
61193: LD_INT 36
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 101
61231: PUSH
61232: LD_INT 102
61234: PUSH
61235: LD_INT 103
61237: PUSH
61238: LD_INT 104
61240: PUSH
61241: LD_INT 105
61243: PUSH
61244: LD_INT 106
61246: PUSH
61247: LD_INT 107
61249: PUSH
61250: LD_INT 108
61252: PUSH
61253: LD_INT 109
61255: PUSH
61256: LD_INT 110
61258: PUSH
61259: LD_INT 111
61261: PUSH
61262: LD_INT 112
61264: PUSH
61265: LD_INT 113
61267: PUSH
61268: LD_INT 114
61270: PUSH
61271: LD_INT 116
61273: PUSH
61274: LD_INT 117
61276: PUSH
61277: LD_INT 118
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: ST_TO_ADDR
61303: GO 62542
61305: LD_INT 14
61307: DOUBLE
61308: EQUAL
61309: IFTRUE 61313
61311: GO 61537
61313: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
61314: LD_ADDR_VAR 0 2
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: LD_INT 2
61324: PUSH
61325: LD_INT 3
61327: PUSH
61328: LD_INT 4
61330: PUSH
61331: LD_INT 5
61333: PUSH
61334: LD_INT 6
61336: PUSH
61337: LD_INT 7
61339: PUSH
61340: LD_INT 8
61342: PUSH
61343: LD_INT 9
61345: PUSH
61346: LD_INT 10
61348: PUSH
61349: LD_INT 11
61351: PUSH
61352: LD_INT 12
61354: PUSH
61355: LD_INT 13
61357: PUSH
61358: LD_INT 14
61360: PUSH
61361: LD_INT 15
61363: PUSH
61364: LD_INT 16
61366: PUSH
61367: LD_INT 17
61369: PUSH
61370: LD_INT 18
61372: PUSH
61373: LD_INT 19
61375: PUSH
61376: LD_INT 20
61378: PUSH
61379: LD_INT 21
61381: PUSH
61382: LD_INT 22
61384: PUSH
61385: LD_INT 23
61387: PUSH
61388: LD_INT 24
61390: PUSH
61391: LD_INT 25
61393: PUSH
61394: LD_INT 26
61396: PUSH
61397: LD_INT 27
61399: PUSH
61400: LD_INT 28
61402: PUSH
61403: LD_INT 29
61405: PUSH
61406: LD_INT 30
61408: PUSH
61409: LD_INT 31
61411: PUSH
61412: LD_INT 32
61414: PUSH
61415: LD_INT 33
61417: PUSH
61418: LD_INT 34
61420: PUSH
61421: LD_INT 36
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 101
61463: PUSH
61464: LD_INT 102
61466: PUSH
61467: LD_INT 103
61469: PUSH
61470: LD_INT 104
61472: PUSH
61473: LD_INT 105
61475: PUSH
61476: LD_INT 106
61478: PUSH
61479: LD_INT 107
61481: PUSH
61482: LD_INT 108
61484: PUSH
61485: LD_INT 109
61487: PUSH
61488: LD_INT 110
61490: PUSH
61491: LD_INT 111
61493: PUSH
61494: LD_INT 112
61496: PUSH
61497: LD_INT 113
61499: PUSH
61500: LD_INT 114
61502: PUSH
61503: LD_INT 116
61505: PUSH
61506: LD_INT 117
61508: PUSH
61509: LD_INT 118
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: ST_TO_ADDR
61535: GO 62542
61537: LD_INT 15
61539: DOUBLE
61540: EQUAL
61541: IFTRUE 61545
61543: GO 61769
61545: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
61546: LD_ADDR_VAR 0 2
61550: PUSH
61551: LD_INT 1
61553: PUSH
61554: LD_INT 2
61556: PUSH
61557: LD_INT 3
61559: PUSH
61560: LD_INT 4
61562: PUSH
61563: LD_INT 5
61565: PUSH
61566: LD_INT 6
61568: PUSH
61569: LD_INT 7
61571: PUSH
61572: LD_INT 8
61574: PUSH
61575: LD_INT 9
61577: PUSH
61578: LD_INT 10
61580: PUSH
61581: LD_INT 11
61583: PUSH
61584: LD_INT 12
61586: PUSH
61587: LD_INT 13
61589: PUSH
61590: LD_INT 14
61592: PUSH
61593: LD_INT 15
61595: PUSH
61596: LD_INT 16
61598: PUSH
61599: LD_INT 17
61601: PUSH
61602: LD_INT 18
61604: PUSH
61605: LD_INT 19
61607: PUSH
61608: LD_INT 20
61610: PUSH
61611: LD_INT 21
61613: PUSH
61614: LD_INT 22
61616: PUSH
61617: LD_INT 23
61619: PUSH
61620: LD_INT 24
61622: PUSH
61623: LD_INT 25
61625: PUSH
61626: LD_INT 26
61628: PUSH
61629: LD_INT 27
61631: PUSH
61632: LD_INT 28
61634: PUSH
61635: LD_INT 29
61637: PUSH
61638: LD_INT 30
61640: PUSH
61641: LD_INT 31
61643: PUSH
61644: LD_INT 32
61646: PUSH
61647: LD_INT 33
61649: PUSH
61650: LD_INT 34
61652: PUSH
61653: LD_INT 36
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 101
61695: PUSH
61696: LD_INT 102
61698: PUSH
61699: LD_INT 103
61701: PUSH
61702: LD_INT 104
61704: PUSH
61705: LD_INT 105
61707: PUSH
61708: LD_INT 106
61710: PUSH
61711: LD_INT 107
61713: PUSH
61714: LD_INT 108
61716: PUSH
61717: LD_INT 109
61719: PUSH
61720: LD_INT 110
61722: PUSH
61723: LD_INT 111
61725: PUSH
61726: LD_INT 112
61728: PUSH
61729: LD_INT 113
61731: PUSH
61732: LD_INT 114
61734: PUSH
61735: LD_INT 116
61737: PUSH
61738: LD_INT 117
61740: PUSH
61741: LD_INT 118
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: ST_TO_ADDR
61767: GO 62542
61769: LD_INT 16
61771: DOUBLE
61772: EQUAL
61773: IFTRUE 61777
61775: GO 61913
61777: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
61778: LD_ADDR_VAR 0 2
61782: PUSH
61783: LD_INT 2
61785: PUSH
61786: LD_INT 4
61788: PUSH
61789: LD_INT 5
61791: PUSH
61792: LD_INT 7
61794: PUSH
61795: LD_INT 11
61797: PUSH
61798: LD_INT 12
61800: PUSH
61801: LD_INT 15
61803: PUSH
61804: LD_INT 16
61806: PUSH
61807: LD_INT 20
61809: PUSH
61810: LD_INT 21
61812: PUSH
61813: LD_INT 22
61815: PUSH
61816: LD_INT 23
61818: PUSH
61819: LD_INT 25
61821: PUSH
61822: LD_INT 26
61824: PUSH
61825: LD_INT 30
61827: PUSH
61828: LD_INT 31
61830: PUSH
61831: LD_INT 32
61833: PUSH
61834: LD_INT 33
61836: PUSH
61837: LD_INT 34
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 101
61863: PUSH
61864: LD_INT 102
61866: PUSH
61867: LD_INT 103
61869: PUSH
61870: LD_INT 106
61872: PUSH
61873: LD_INT 108
61875: PUSH
61876: LD_INT 112
61878: PUSH
61879: LD_INT 113
61881: PUSH
61882: LD_INT 114
61884: PUSH
61885: LD_INT 116
61887: PUSH
61888: LD_INT 117
61890: PUSH
61891: LD_INT 118
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: ST_TO_ADDR
61911: GO 62542
61913: LD_INT 17
61915: DOUBLE
61916: EQUAL
61917: IFTRUE 61921
61919: GO 62145
61921: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
61922: LD_ADDR_VAR 0 2
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: LD_INT 2
61932: PUSH
61933: LD_INT 3
61935: PUSH
61936: LD_INT 4
61938: PUSH
61939: LD_INT 5
61941: PUSH
61942: LD_INT 6
61944: PUSH
61945: LD_INT 7
61947: PUSH
61948: LD_INT 8
61950: PUSH
61951: LD_INT 9
61953: PUSH
61954: LD_INT 10
61956: PUSH
61957: LD_INT 11
61959: PUSH
61960: LD_INT 12
61962: PUSH
61963: LD_INT 13
61965: PUSH
61966: LD_INT 14
61968: PUSH
61969: LD_INT 15
61971: PUSH
61972: LD_INT 16
61974: PUSH
61975: LD_INT 17
61977: PUSH
61978: LD_INT 18
61980: PUSH
61981: LD_INT 19
61983: PUSH
61984: LD_INT 20
61986: PUSH
61987: LD_INT 21
61989: PUSH
61990: LD_INT 22
61992: PUSH
61993: LD_INT 23
61995: PUSH
61996: LD_INT 24
61998: PUSH
61999: LD_INT 25
62001: PUSH
62002: LD_INT 26
62004: PUSH
62005: LD_INT 27
62007: PUSH
62008: LD_INT 28
62010: PUSH
62011: LD_INT 29
62013: PUSH
62014: LD_INT 30
62016: PUSH
62017: LD_INT 31
62019: PUSH
62020: LD_INT 32
62022: PUSH
62023: LD_INT 33
62025: PUSH
62026: LD_INT 34
62028: PUSH
62029: LD_INT 36
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 101
62071: PUSH
62072: LD_INT 102
62074: PUSH
62075: LD_INT 103
62077: PUSH
62078: LD_INT 104
62080: PUSH
62081: LD_INT 105
62083: PUSH
62084: LD_INT 106
62086: PUSH
62087: LD_INT 107
62089: PUSH
62090: LD_INT 108
62092: PUSH
62093: LD_INT 109
62095: PUSH
62096: LD_INT 110
62098: PUSH
62099: LD_INT 111
62101: PUSH
62102: LD_INT 112
62104: PUSH
62105: LD_INT 113
62107: PUSH
62108: LD_INT 114
62110: PUSH
62111: LD_INT 116
62113: PUSH
62114: LD_INT 117
62116: PUSH
62117: LD_INT 118
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: ST_TO_ADDR
62143: GO 62542
62145: LD_INT 18
62147: DOUBLE
62148: EQUAL
62149: IFTRUE 62153
62151: GO 62301
62153: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
62154: LD_ADDR_VAR 0 2
62158: PUSH
62159: LD_INT 2
62161: PUSH
62162: LD_INT 4
62164: PUSH
62165: LD_INT 5
62167: PUSH
62168: LD_INT 7
62170: PUSH
62171: LD_INT 11
62173: PUSH
62174: LD_INT 12
62176: PUSH
62177: LD_INT 15
62179: PUSH
62180: LD_INT 16
62182: PUSH
62183: LD_INT 20
62185: PUSH
62186: LD_INT 21
62188: PUSH
62189: LD_INT 22
62191: PUSH
62192: LD_INT 23
62194: PUSH
62195: LD_INT 25
62197: PUSH
62198: LD_INT 26
62200: PUSH
62201: LD_INT 30
62203: PUSH
62204: LD_INT 31
62206: PUSH
62207: LD_INT 32
62209: PUSH
62210: LD_INT 33
62212: PUSH
62213: LD_INT 34
62215: PUSH
62216: LD_INT 35
62218: PUSH
62219: LD_INT 36
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 101
62247: PUSH
62248: LD_INT 102
62250: PUSH
62251: LD_INT 103
62253: PUSH
62254: LD_INT 106
62256: PUSH
62257: LD_INT 108
62259: PUSH
62260: LD_INT 112
62262: PUSH
62263: LD_INT 113
62265: PUSH
62266: LD_INT 114
62268: PUSH
62269: LD_INT 115
62271: PUSH
62272: LD_INT 116
62274: PUSH
62275: LD_INT 117
62277: PUSH
62278: LD_INT 118
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: ST_TO_ADDR
62299: GO 62542
62301: LD_INT 19
62303: DOUBLE
62304: EQUAL
62305: IFTRUE 62309
62307: GO 62541
62309: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
62310: LD_ADDR_VAR 0 2
62314: PUSH
62315: LD_INT 1
62317: PUSH
62318: LD_INT 2
62320: PUSH
62321: LD_INT 3
62323: PUSH
62324: LD_INT 4
62326: PUSH
62327: LD_INT 5
62329: PUSH
62330: LD_INT 6
62332: PUSH
62333: LD_INT 7
62335: PUSH
62336: LD_INT 8
62338: PUSH
62339: LD_INT 9
62341: PUSH
62342: LD_INT 10
62344: PUSH
62345: LD_INT 11
62347: PUSH
62348: LD_INT 12
62350: PUSH
62351: LD_INT 13
62353: PUSH
62354: LD_INT 14
62356: PUSH
62357: LD_INT 15
62359: PUSH
62360: LD_INT 16
62362: PUSH
62363: LD_INT 17
62365: PUSH
62366: LD_INT 18
62368: PUSH
62369: LD_INT 19
62371: PUSH
62372: LD_INT 20
62374: PUSH
62375: LD_INT 21
62377: PUSH
62378: LD_INT 22
62380: PUSH
62381: LD_INT 23
62383: PUSH
62384: LD_INT 24
62386: PUSH
62387: LD_INT 25
62389: PUSH
62390: LD_INT 26
62392: PUSH
62393: LD_INT 27
62395: PUSH
62396: LD_INT 28
62398: PUSH
62399: LD_INT 29
62401: PUSH
62402: LD_INT 30
62404: PUSH
62405: LD_INT 31
62407: PUSH
62408: LD_INT 32
62410: PUSH
62411: LD_INT 33
62413: PUSH
62414: LD_INT 34
62416: PUSH
62417: LD_INT 35
62419: PUSH
62420: LD_INT 36
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 101
62463: PUSH
62464: LD_INT 102
62466: PUSH
62467: LD_INT 103
62469: PUSH
62470: LD_INT 104
62472: PUSH
62473: LD_INT 105
62475: PUSH
62476: LD_INT 106
62478: PUSH
62479: LD_INT 107
62481: PUSH
62482: LD_INT 108
62484: PUSH
62485: LD_INT 109
62487: PUSH
62488: LD_INT 110
62490: PUSH
62491: LD_INT 111
62493: PUSH
62494: LD_INT 112
62496: PUSH
62497: LD_INT 113
62499: PUSH
62500: LD_INT 114
62502: PUSH
62503: LD_INT 115
62505: PUSH
62506: LD_INT 116
62508: PUSH
62509: LD_INT 117
62511: PUSH
62512: LD_INT 118
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: ST_TO_ADDR
62539: GO 62542
62541: POP
// end else
62542: GO 62773
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
62544: LD_ADDR_VAR 0 2
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: LD_INT 2
62554: PUSH
62555: LD_INT 3
62557: PUSH
62558: LD_INT 4
62560: PUSH
62561: LD_INT 5
62563: PUSH
62564: LD_INT 6
62566: PUSH
62567: LD_INT 7
62569: PUSH
62570: LD_INT 8
62572: PUSH
62573: LD_INT 9
62575: PUSH
62576: LD_INT 10
62578: PUSH
62579: LD_INT 11
62581: PUSH
62582: LD_INT 12
62584: PUSH
62585: LD_INT 13
62587: PUSH
62588: LD_INT 14
62590: PUSH
62591: LD_INT 15
62593: PUSH
62594: LD_INT 16
62596: PUSH
62597: LD_INT 17
62599: PUSH
62600: LD_INT 18
62602: PUSH
62603: LD_INT 19
62605: PUSH
62606: LD_INT 20
62608: PUSH
62609: LD_INT 21
62611: PUSH
62612: LD_INT 22
62614: PUSH
62615: LD_INT 23
62617: PUSH
62618: LD_INT 24
62620: PUSH
62621: LD_INT 25
62623: PUSH
62624: LD_INT 26
62626: PUSH
62627: LD_INT 27
62629: PUSH
62630: LD_INT 28
62632: PUSH
62633: LD_INT 29
62635: PUSH
62636: LD_INT 30
62638: PUSH
62639: LD_INT 31
62641: PUSH
62642: LD_INT 32
62644: PUSH
62645: LD_INT 33
62647: PUSH
62648: LD_INT 34
62650: PUSH
62651: LD_INT 35
62653: PUSH
62654: LD_INT 36
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 101
62697: PUSH
62698: LD_INT 102
62700: PUSH
62701: LD_INT 103
62703: PUSH
62704: LD_INT 104
62706: PUSH
62707: LD_INT 105
62709: PUSH
62710: LD_INT 106
62712: PUSH
62713: LD_INT 107
62715: PUSH
62716: LD_INT 108
62718: PUSH
62719: LD_INT 109
62721: PUSH
62722: LD_INT 110
62724: PUSH
62725: LD_INT 111
62727: PUSH
62728: LD_INT 112
62730: PUSH
62731: LD_INT 113
62733: PUSH
62734: LD_INT 114
62736: PUSH
62737: LD_INT 115
62739: PUSH
62740: LD_INT 116
62742: PUSH
62743: LD_INT 117
62745: PUSH
62746: LD_INT 118
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: ST_TO_ADDR
// if result then
62773: LD_VAR 0 2
62777: IFFALSE 63563
// begin normal :=  ;
62779: LD_ADDR_VAR 0 5
62783: PUSH
62784: LD_STRING 
62786: ST_TO_ADDR
// hardcore :=  ;
62787: LD_ADDR_VAR 0 6
62791: PUSH
62792: LD_STRING 
62794: ST_TO_ADDR
// active :=  ;
62795: LD_ADDR_VAR 0 7
62799: PUSH
62800: LD_STRING 
62802: ST_TO_ADDR
// for i = 1 to normalCounter do
62803: LD_ADDR_VAR 0 8
62807: PUSH
62808: DOUBLE
62809: LD_INT 1
62811: DEC
62812: ST_TO_ADDR
62813: LD_EXP 47
62817: PUSH
62818: FOR_TO
62819: IFFALSE 62920
// begin tmp := 0 ;
62821: LD_ADDR_VAR 0 3
62825: PUSH
62826: LD_STRING 0
62828: ST_TO_ADDR
// if result [ 1 ] then
62829: LD_VAR 0 2
62833: PUSH
62834: LD_INT 1
62836: ARRAY
62837: IFFALSE 62902
// if result [ 1 ] [ 1 ] = i then
62839: LD_VAR 0 2
62843: PUSH
62844: LD_INT 1
62846: ARRAY
62847: PUSH
62848: LD_INT 1
62850: ARRAY
62851: PUSH
62852: LD_VAR 0 8
62856: EQUAL
62857: IFFALSE 62902
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
62859: LD_ADDR_VAR 0 2
62863: PUSH
62864: LD_VAR 0 2
62868: PPUSH
62869: LD_INT 1
62871: PPUSH
62872: LD_VAR 0 2
62876: PUSH
62877: LD_INT 1
62879: ARRAY
62880: PPUSH
62881: LD_INT 1
62883: PPUSH
62884: CALL_OW 3
62888: PPUSH
62889: CALL_OW 1
62893: ST_TO_ADDR
// tmp := 1 ;
62894: LD_ADDR_VAR 0 3
62898: PUSH
62899: LD_STRING 1
62901: ST_TO_ADDR
// end ; normal := normal & tmp ;
62902: LD_ADDR_VAR 0 5
62906: PUSH
62907: LD_VAR 0 5
62911: PUSH
62912: LD_VAR 0 3
62916: STR
62917: ST_TO_ADDR
// end ;
62918: GO 62818
62920: POP
62921: POP
// for i = 1 to hardcoreCounter do
62922: LD_ADDR_VAR 0 8
62926: PUSH
62927: DOUBLE
62928: LD_INT 1
62930: DEC
62931: ST_TO_ADDR
62932: LD_EXP 48
62936: PUSH
62937: FOR_TO
62938: IFFALSE 63043
// begin tmp := 0 ;
62940: LD_ADDR_VAR 0 3
62944: PUSH
62945: LD_STRING 0
62947: ST_TO_ADDR
// if result [ 2 ] then
62948: LD_VAR 0 2
62952: PUSH
62953: LD_INT 2
62955: ARRAY
62956: IFFALSE 63025
// if result [ 2 ] [ 1 ] = 100 + i then
62958: LD_VAR 0 2
62962: PUSH
62963: LD_INT 2
62965: ARRAY
62966: PUSH
62967: LD_INT 1
62969: ARRAY
62970: PUSH
62971: LD_INT 100
62973: PUSH
62974: LD_VAR 0 8
62978: PLUS
62979: EQUAL
62980: IFFALSE 63025
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
62982: LD_ADDR_VAR 0 2
62986: PUSH
62987: LD_VAR 0 2
62991: PPUSH
62992: LD_INT 2
62994: PPUSH
62995: LD_VAR 0 2
62999: PUSH
63000: LD_INT 2
63002: ARRAY
63003: PPUSH
63004: LD_INT 1
63006: PPUSH
63007: CALL_OW 3
63011: PPUSH
63012: CALL_OW 1
63016: ST_TO_ADDR
// tmp := 1 ;
63017: LD_ADDR_VAR 0 3
63021: PUSH
63022: LD_STRING 1
63024: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63025: LD_ADDR_VAR 0 6
63029: PUSH
63030: LD_VAR 0 6
63034: PUSH
63035: LD_VAR 0 3
63039: STR
63040: ST_TO_ADDR
// end ;
63041: GO 62937
63043: POP
63044: POP
// if isGameLoad then
63045: LD_VAR 0 1
63049: IFFALSE 63524
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
63051: LD_ADDR_VAR 0 4
63055: PUSH
63056: LD_EXP 51
63060: PUSH
63061: LD_EXP 50
63065: PUSH
63066: LD_EXP 52
63070: PUSH
63071: LD_EXP 49
63075: PUSH
63076: LD_EXP 53
63080: PUSH
63081: LD_EXP 54
63085: PUSH
63086: LD_EXP 55
63090: PUSH
63091: LD_EXP 56
63095: PUSH
63096: LD_EXP 57
63100: PUSH
63101: LD_EXP 58
63105: PUSH
63106: LD_EXP 59
63110: PUSH
63111: LD_EXP 60
63115: PUSH
63116: LD_EXP 61
63120: PUSH
63121: LD_EXP 62
63125: PUSH
63126: LD_EXP 70
63130: PUSH
63131: LD_EXP 71
63135: PUSH
63136: LD_EXP 72
63140: PUSH
63141: LD_EXP 73
63145: PUSH
63146: LD_EXP 75
63150: PUSH
63151: LD_EXP 76
63155: PUSH
63156: LD_EXP 77
63160: PUSH
63161: LD_EXP 80
63165: PUSH
63166: LD_EXP 82
63170: PUSH
63171: LD_EXP 83
63175: PUSH
63176: LD_EXP 84
63180: PUSH
63181: LD_EXP 86
63185: PUSH
63186: LD_EXP 87
63190: PUSH
63191: LD_EXP 90
63195: PUSH
63196: LD_EXP 91
63200: PUSH
63201: LD_EXP 92
63205: PUSH
63206: LD_EXP 93
63210: PUSH
63211: LD_EXP 94
63215: PUSH
63216: LD_EXP 95
63220: PUSH
63221: LD_EXP 96
63225: PUSH
63226: LD_EXP 97
63230: PUSH
63231: LD_EXP 98
63235: PUSH
63236: LD_EXP 63
63240: PUSH
63241: LD_EXP 64
63245: PUSH
63246: LD_EXP 67
63250: PUSH
63251: LD_EXP 68
63255: PUSH
63256: LD_EXP 69
63260: PUSH
63261: LD_EXP 65
63265: PUSH
63266: LD_EXP 66
63270: PUSH
63271: LD_EXP 74
63275: PUSH
63276: LD_EXP 78
63280: PUSH
63281: LD_EXP 79
63285: PUSH
63286: LD_EXP 81
63290: PUSH
63291: LD_EXP 85
63295: PUSH
63296: LD_EXP 88
63300: PUSH
63301: LD_EXP 89
63305: PUSH
63306: LD_EXP 99
63310: PUSH
63311: LD_EXP 100
63315: PUSH
63316: LD_EXP 101
63320: PUSH
63321: LD_EXP 102
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: ST_TO_ADDR
// tmp :=  ;
63382: LD_ADDR_VAR 0 3
63386: PUSH
63387: LD_STRING 
63389: ST_TO_ADDR
// for i = 1 to normalCounter do
63390: LD_ADDR_VAR 0 8
63394: PUSH
63395: DOUBLE
63396: LD_INT 1
63398: DEC
63399: ST_TO_ADDR
63400: LD_EXP 47
63404: PUSH
63405: FOR_TO
63406: IFFALSE 63442
// begin if flags [ i ] then
63408: LD_VAR 0 4
63412: PUSH
63413: LD_VAR 0 8
63417: ARRAY
63418: IFFALSE 63440
// tmp := tmp & i & ; ;
63420: LD_ADDR_VAR 0 3
63424: PUSH
63425: LD_VAR 0 3
63429: PUSH
63430: LD_VAR 0 8
63434: STR
63435: PUSH
63436: LD_STRING ;
63438: STR
63439: ST_TO_ADDR
// end ;
63440: GO 63405
63442: POP
63443: POP
// for i = 1 to hardcoreCounter do
63444: LD_ADDR_VAR 0 8
63448: PUSH
63449: DOUBLE
63450: LD_INT 1
63452: DEC
63453: ST_TO_ADDR
63454: LD_EXP 48
63458: PUSH
63459: FOR_TO
63460: IFFALSE 63506
// begin if flags [ normalCounter + i ] then
63462: LD_VAR 0 4
63466: PUSH
63467: LD_EXP 47
63471: PUSH
63472: LD_VAR 0 8
63476: PLUS
63477: ARRAY
63478: IFFALSE 63504
// tmp := tmp & ( 100 + i ) & ; ;
63480: LD_ADDR_VAR 0 3
63484: PUSH
63485: LD_VAR 0 3
63489: PUSH
63490: LD_INT 100
63492: PUSH
63493: LD_VAR 0 8
63497: PLUS
63498: STR
63499: PUSH
63500: LD_STRING ;
63502: STR
63503: ST_TO_ADDR
// end ;
63504: GO 63459
63506: POP
63507: POP
// if tmp then
63508: LD_VAR 0 3
63512: IFFALSE 63524
// active := tmp ;
63514: LD_ADDR_VAR 0 7
63518: PUSH
63519: LD_VAR 0 3
63523: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
63524: LD_STRING getStreamItemsFromMission("
63526: PUSH
63527: LD_VAR 0 5
63531: STR
63532: PUSH
63533: LD_STRING ","
63535: STR
63536: PUSH
63537: LD_VAR 0 6
63541: STR
63542: PUSH
63543: LD_STRING ","
63545: STR
63546: PUSH
63547: LD_VAR 0 7
63551: STR
63552: PUSH
63553: LD_STRING ")
63555: STR
63556: PPUSH
63557: CALL_OW 559
// end else
63561: GO 63570
// ToLua ( getStreamItemsFromMission("","","") ) ;
63563: LD_STRING getStreamItemsFromMission("","","")
63565: PPUSH
63566: CALL_OW 559
// end ;
63570: LD_VAR 0 2
63574: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
63575: LD_EXP 46
63579: PUSH
63580: LD_EXP 51
63584: AND
63585: IFFALSE 63709
63587: GO 63589
63589: DISABLE
63590: LD_INT 0
63592: PPUSH
63593: PPUSH
// begin enable ;
63594: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
63595: LD_ADDR_VAR 0 2
63599: PUSH
63600: LD_INT 22
63602: PUSH
63603: LD_OWVAR 2
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 2
63614: PUSH
63615: LD_INT 34
63617: PUSH
63618: LD_INT 7
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 34
63627: PUSH
63628: LD_INT 45
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 34
63637: PUSH
63638: LD_INT 28
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 34
63647: PUSH
63648: LD_INT 47
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PPUSH
63666: CALL_OW 69
63670: ST_TO_ADDR
// if not tmp then
63671: LD_VAR 0 2
63675: NOT
63676: IFFALSE 63680
// exit ;
63678: GO 63709
// for i in tmp do
63680: LD_ADDR_VAR 0 1
63684: PUSH
63685: LD_VAR 0 2
63689: PUSH
63690: FOR_IN
63691: IFFALSE 63707
// begin SetLives ( i , 0 ) ;
63693: LD_VAR 0 1
63697: PPUSH
63698: LD_INT 0
63700: PPUSH
63701: CALL_OW 234
// end ;
63705: GO 63690
63707: POP
63708: POP
// end ;
63709: PPOPN 2
63711: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
63712: LD_EXP 46
63716: PUSH
63717: LD_EXP 52
63721: AND
63722: IFFALSE 63806
63724: GO 63726
63726: DISABLE
63727: LD_INT 0
63729: PPUSH
63730: PPUSH
// begin enable ;
63731: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
63732: LD_ADDR_VAR 0 2
63736: PUSH
63737: LD_INT 22
63739: PUSH
63740: LD_OWVAR 2
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 32
63751: PUSH
63752: LD_INT 3
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PPUSH
63763: CALL_OW 69
63767: ST_TO_ADDR
// if not tmp then
63768: LD_VAR 0 2
63772: NOT
63773: IFFALSE 63777
// exit ;
63775: GO 63806
// for i in tmp do
63777: LD_ADDR_VAR 0 1
63781: PUSH
63782: LD_VAR 0 2
63786: PUSH
63787: FOR_IN
63788: IFFALSE 63804
// begin SetLives ( i , 0 ) ;
63790: LD_VAR 0 1
63794: PPUSH
63795: LD_INT 0
63797: PPUSH
63798: CALL_OW 234
// end ;
63802: GO 63787
63804: POP
63805: POP
// end ;
63806: PPOPN 2
63808: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
63809: LD_EXP 46
63813: PUSH
63814: LD_EXP 49
63818: AND
63819: IFFALSE 63912
63821: GO 63823
63823: DISABLE
63824: LD_INT 0
63826: PPUSH
// begin enable ;
63827: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
63828: LD_ADDR_VAR 0 1
63832: PUSH
63833: LD_INT 22
63835: PUSH
63836: LD_OWVAR 2
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 2
63847: PUSH
63848: LD_INT 25
63850: PUSH
63851: LD_INT 5
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 25
63860: PUSH
63861: LD_INT 9
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 25
63870: PUSH
63871: LD_INT 8
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PPUSH
63888: CALL_OW 69
63892: PUSH
63893: FOR_IN
63894: IFFALSE 63910
// begin SetClass ( i , 1 ) ;
63896: LD_VAR 0 1
63900: PPUSH
63901: LD_INT 1
63903: PPUSH
63904: CALL_OW 336
// end ;
63908: GO 63893
63910: POP
63911: POP
// end ;
63912: PPOPN 1
63914: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
63915: LD_EXP 46
63919: PUSH
63920: LD_EXP 50
63924: AND
63925: PUSH
63926: LD_OWVAR 65
63930: PUSH
63931: LD_INT 7
63933: LESS
63934: AND
63935: IFFALSE 63949
63937: GO 63939
63939: DISABLE
// begin enable ;
63940: ENABLE
// game_speed := 7 ;
63941: LD_ADDR_OWVAR 65
63945: PUSH
63946: LD_INT 7
63948: ST_TO_ADDR
// end ;
63949: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
63950: LD_EXP 46
63954: PUSH
63955: LD_EXP 53
63959: AND
63960: IFFALSE 64162
63962: GO 63964
63964: DISABLE
63965: LD_INT 0
63967: PPUSH
63968: PPUSH
63969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63970: LD_ADDR_VAR 0 3
63974: PUSH
63975: LD_INT 81
63977: PUSH
63978: LD_OWVAR 2
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 21
63989: PUSH
63990: LD_INT 1
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PPUSH
64001: CALL_OW 69
64005: ST_TO_ADDR
// if not tmp then
64006: LD_VAR 0 3
64010: NOT
64011: IFFALSE 64015
// exit ;
64013: GO 64162
// if tmp > 5 then
64015: LD_VAR 0 3
64019: PUSH
64020: LD_INT 5
64022: GREATER
64023: IFFALSE 64035
// k := 5 else
64025: LD_ADDR_VAR 0 2
64029: PUSH
64030: LD_INT 5
64032: ST_TO_ADDR
64033: GO 64045
// k := tmp ;
64035: LD_ADDR_VAR 0 2
64039: PUSH
64040: LD_VAR 0 3
64044: ST_TO_ADDR
// for i := 1 to k do
64045: LD_ADDR_VAR 0 1
64049: PUSH
64050: DOUBLE
64051: LD_INT 1
64053: DEC
64054: ST_TO_ADDR
64055: LD_VAR 0 2
64059: PUSH
64060: FOR_TO
64061: IFFALSE 64160
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64063: LD_VAR 0 3
64067: PUSH
64068: LD_VAR 0 1
64072: ARRAY
64073: PPUSH
64074: LD_VAR 0 1
64078: PUSH
64079: LD_INT 4
64081: MOD
64082: PUSH
64083: LD_INT 1
64085: PLUS
64086: PPUSH
64087: CALL_OW 259
64091: PUSH
64092: LD_INT 10
64094: LESS
64095: IFFALSE 64158
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64097: LD_VAR 0 3
64101: PUSH
64102: LD_VAR 0 1
64106: ARRAY
64107: PPUSH
64108: LD_VAR 0 1
64112: PUSH
64113: LD_INT 4
64115: MOD
64116: PUSH
64117: LD_INT 1
64119: PLUS
64120: PPUSH
64121: LD_VAR 0 3
64125: PUSH
64126: LD_VAR 0 1
64130: ARRAY
64131: PPUSH
64132: LD_VAR 0 1
64136: PUSH
64137: LD_INT 4
64139: MOD
64140: PUSH
64141: LD_INT 1
64143: PLUS
64144: PPUSH
64145: CALL_OW 259
64149: PUSH
64150: LD_INT 1
64152: PLUS
64153: PPUSH
64154: CALL_OW 237
64158: GO 64060
64160: POP
64161: POP
// end ;
64162: PPOPN 3
64164: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
64165: LD_EXP 46
64169: PUSH
64170: LD_EXP 54
64174: AND
64175: IFFALSE 64195
64177: GO 64179
64179: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64180: LD_INT 4
64182: PPUSH
64183: LD_OWVAR 2
64187: PPUSH
64188: LD_INT 0
64190: PPUSH
64191: CALL_OW 324
64195: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64196: LD_EXP 46
64200: PUSH
64201: LD_EXP 83
64205: AND
64206: IFFALSE 64226
64208: GO 64210
64210: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64211: LD_INT 19
64213: PPUSH
64214: LD_OWVAR 2
64218: PPUSH
64219: LD_INT 0
64221: PPUSH
64222: CALL_OW 324
64226: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
64227: LD_EXP 46
64231: PUSH
64232: LD_EXP 55
64236: AND
64237: IFFALSE 64339
64239: GO 64241
64241: DISABLE
64242: LD_INT 0
64244: PPUSH
64245: PPUSH
// begin enable ;
64246: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
64247: LD_ADDR_VAR 0 2
64251: PUSH
64252: LD_INT 22
64254: PUSH
64255: LD_OWVAR 2
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 2
64266: PUSH
64267: LD_INT 34
64269: PUSH
64270: LD_INT 11
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 34
64279: PUSH
64280: LD_INT 30
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: LIST
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PPUSH
64296: CALL_OW 69
64300: ST_TO_ADDR
// if not tmp then
64301: LD_VAR 0 2
64305: NOT
64306: IFFALSE 64310
// exit ;
64308: GO 64339
// for i in tmp do
64310: LD_ADDR_VAR 0 1
64314: PUSH
64315: LD_VAR 0 2
64319: PUSH
64320: FOR_IN
64321: IFFALSE 64337
// begin SetLives ( i , 0 ) ;
64323: LD_VAR 0 1
64327: PPUSH
64328: LD_INT 0
64330: PPUSH
64331: CALL_OW 234
// end ;
64335: GO 64320
64337: POP
64338: POP
// end ;
64339: PPOPN 2
64341: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64342: LD_EXP 46
64346: PUSH
64347: LD_EXP 56
64351: AND
64352: IFFALSE 64372
64354: GO 64356
64356: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64357: LD_INT 32
64359: PPUSH
64360: LD_OWVAR 2
64364: PPUSH
64365: LD_INT 0
64367: PPUSH
64368: CALL_OW 324
64372: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64373: LD_EXP 46
64377: PUSH
64378: LD_EXP 57
64382: AND
64383: IFFALSE 64564
64385: GO 64387
64387: DISABLE
64388: LD_INT 0
64390: PPUSH
64391: PPUSH
64392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64393: LD_ADDR_VAR 0 2
64397: PUSH
64398: LD_INT 22
64400: PUSH
64401: LD_OWVAR 2
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 33
64412: PUSH
64413: LD_INT 3
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PPUSH
64424: CALL_OW 69
64428: ST_TO_ADDR
// if not tmp then
64429: LD_VAR 0 2
64433: NOT
64434: IFFALSE 64438
// exit ;
64436: GO 64564
// side := 0 ;
64438: LD_ADDR_VAR 0 3
64442: PUSH
64443: LD_INT 0
64445: ST_TO_ADDR
// for i := 1 to 8 do
64446: LD_ADDR_VAR 0 1
64450: PUSH
64451: DOUBLE
64452: LD_INT 1
64454: DEC
64455: ST_TO_ADDR
64456: LD_INT 8
64458: PUSH
64459: FOR_TO
64460: IFFALSE 64508
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64462: LD_OWVAR 2
64466: PUSH
64467: LD_VAR 0 1
64471: NONEQUAL
64472: PUSH
64473: LD_OWVAR 2
64477: PPUSH
64478: LD_VAR 0 1
64482: PPUSH
64483: CALL_OW 81
64487: PUSH
64488: LD_INT 2
64490: EQUAL
64491: AND
64492: IFFALSE 64506
// begin side := i ;
64494: LD_ADDR_VAR 0 3
64498: PUSH
64499: LD_VAR 0 1
64503: ST_TO_ADDR
// break ;
64504: GO 64508
// end ;
64506: GO 64459
64508: POP
64509: POP
// if not side then
64510: LD_VAR 0 3
64514: NOT
64515: IFFALSE 64519
// exit ;
64517: GO 64564
// for i := 1 to tmp do
64519: LD_ADDR_VAR 0 1
64523: PUSH
64524: DOUBLE
64525: LD_INT 1
64527: DEC
64528: ST_TO_ADDR
64529: LD_VAR 0 2
64533: PUSH
64534: FOR_TO
64535: IFFALSE 64562
// if Prob ( 60 ) then
64537: LD_INT 60
64539: PPUSH
64540: CALL_OW 13
64544: IFFALSE 64560
// SetSide ( i , side ) ;
64546: LD_VAR 0 1
64550: PPUSH
64551: LD_VAR 0 3
64555: PPUSH
64556: CALL_OW 235
64560: GO 64534
64562: POP
64563: POP
// end ;
64564: PPOPN 3
64566: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
64567: LD_EXP 46
64571: PUSH
64572: LD_EXP 59
64576: AND
64577: IFFALSE 64696
64579: GO 64581
64581: DISABLE
64582: LD_INT 0
64584: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
64585: LD_ADDR_VAR 0 1
64589: PUSH
64590: LD_INT 22
64592: PUSH
64593: LD_OWVAR 2
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 21
64604: PUSH
64605: LD_INT 1
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 3
64614: PUSH
64615: LD_INT 23
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: LIST
64633: PPUSH
64634: CALL_OW 69
64638: PUSH
64639: FOR_IN
64640: IFFALSE 64694
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
64642: LD_VAR 0 1
64646: PPUSH
64647: CALL_OW 257
64651: PUSH
64652: LD_INT 1
64654: PUSH
64655: LD_INT 2
64657: PUSH
64658: LD_INT 3
64660: PUSH
64661: LD_INT 4
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: IN
64670: IFFALSE 64692
// SetClass ( un , rand ( 1 , 4 ) ) ;
64672: LD_VAR 0 1
64676: PPUSH
64677: LD_INT 1
64679: PPUSH
64680: LD_INT 4
64682: PPUSH
64683: CALL_OW 12
64687: PPUSH
64688: CALL_OW 336
64692: GO 64639
64694: POP
64695: POP
// end ;
64696: PPOPN 1
64698: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
64699: LD_EXP 46
64703: PUSH
64704: LD_EXP 58
64708: AND
64709: IFFALSE 64788
64711: GO 64713
64713: DISABLE
64714: LD_INT 0
64716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64717: LD_ADDR_VAR 0 1
64721: PUSH
64722: LD_INT 22
64724: PUSH
64725: LD_OWVAR 2
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 21
64736: PUSH
64737: LD_INT 3
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PPUSH
64748: CALL_OW 69
64752: ST_TO_ADDR
// if not tmp then
64753: LD_VAR 0 1
64757: NOT
64758: IFFALSE 64762
// exit ;
64760: GO 64788
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
64762: LD_VAR 0 1
64766: PUSH
64767: LD_INT 1
64769: PPUSH
64770: LD_VAR 0 1
64774: PPUSH
64775: CALL_OW 12
64779: ARRAY
64780: PPUSH
64781: LD_INT 100
64783: PPUSH
64784: CALL_OW 234
// end ;
64788: PPOPN 1
64790: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
64791: LD_EXP 46
64795: PUSH
64796: LD_EXP 60
64800: AND
64801: IFFALSE 64899
64803: GO 64805
64805: DISABLE
64806: LD_INT 0
64808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
64809: LD_ADDR_VAR 0 1
64813: PUSH
64814: LD_INT 22
64816: PUSH
64817: LD_OWVAR 2
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 21
64828: PUSH
64829: LD_INT 1
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PPUSH
64840: CALL_OW 69
64844: ST_TO_ADDR
// if not tmp then
64845: LD_VAR 0 1
64849: NOT
64850: IFFALSE 64854
// exit ;
64852: GO 64899
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
64854: LD_VAR 0 1
64858: PUSH
64859: LD_INT 1
64861: PPUSH
64862: LD_VAR 0 1
64866: PPUSH
64867: CALL_OW 12
64871: ARRAY
64872: PPUSH
64873: LD_INT 1
64875: PPUSH
64876: LD_INT 4
64878: PPUSH
64879: CALL_OW 12
64883: PPUSH
64884: LD_INT 3000
64886: PPUSH
64887: LD_INT 9000
64889: PPUSH
64890: CALL_OW 12
64894: PPUSH
64895: CALL_OW 492
// end ;
64899: PPOPN 1
64901: END
// every 0 0$1 trigger StreamModeActive and sDepot do
64902: LD_EXP 46
64906: PUSH
64907: LD_EXP 61
64911: AND
64912: IFFALSE 64932
64914: GO 64916
64916: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
64917: LD_INT 1
64919: PPUSH
64920: LD_OWVAR 2
64924: PPUSH
64925: LD_INT 0
64927: PPUSH
64928: CALL_OW 324
64932: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
64933: LD_EXP 46
64937: PUSH
64938: LD_EXP 62
64942: AND
64943: IFFALSE 65026
64945: GO 64947
64947: DISABLE
64948: LD_INT 0
64950: PPUSH
64951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64952: LD_ADDR_VAR 0 2
64956: PUSH
64957: LD_INT 22
64959: PUSH
64960: LD_OWVAR 2
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 21
64971: PUSH
64972: LD_INT 3
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PPUSH
64983: CALL_OW 69
64987: ST_TO_ADDR
// if not tmp then
64988: LD_VAR 0 2
64992: NOT
64993: IFFALSE 64997
// exit ;
64995: GO 65026
// for i in tmp do
64997: LD_ADDR_VAR 0 1
65001: PUSH
65002: LD_VAR 0 2
65006: PUSH
65007: FOR_IN
65008: IFFALSE 65024
// SetBLevel ( i , 10 ) ;
65010: LD_VAR 0 1
65014: PPUSH
65015: LD_INT 10
65017: PPUSH
65018: CALL_OW 241
65022: GO 65007
65024: POP
65025: POP
// end ;
65026: PPOPN 2
65028: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65029: LD_EXP 46
65033: PUSH
65034: LD_EXP 63
65038: AND
65039: IFFALSE 65150
65041: GO 65043
65043: DISABLE
65044: LD_INT 0
65046: PPUSH
65047: PPUSH
65048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65049: LD_ADDR_VAR 0 3
65053: PUSH
65054: LD_INT 22
65056: PUSH
65057: LD_OWVAR 2
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 25
65068: PUSH
65069: LD_INT 1
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PPUSH
65080: CALL_OW 69
65084: ST_TO_ADDR
// if not tmp then
65085: LD_VAR 0 3
65089: NOT
65090: IFFALSE 65094
// exit ;
65092: GO 65150
// un := tmp [ rand ( 1 , tmp ) ] ;
65094: LD_ADDR_VAR 0 2
65098: PUSH
65099: LD_VAR 0 3
65103: PUSH
65104: LD_INT 1
65106: PPUSH
65107: LD_VAR 0 3
65111: PPUSH
65112: CALL_OW 12
65116: ARRAY
65117: ST_TO_ADDR
// if Crawls ( un ) then
65118: LD_VAR 0 2
65122: PPUSH
65123: CALL_OW 318
65127: IFFALSE 65138
// ComWalk ( un ) ;
65129: LD_VAR 0 2
65133: PPUSH
65134: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65138: LD_VAR 0 2
65142: PPUSH
65143: LD_INT 5
65145: PPUSH
65146: CALL_OW 336
// end ;
65150: PPOPN 3
65152: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
65153: LD_EXP 46
65157: PUSH
65158: LD_EXP 64
65162: AND
65163: PUSH
65164: LD_OWVAR 67
65168: PUSH
65169: LD_INT 4
65171: LESS
65172: AND
65173: IFFALSE 65192
65175: GO 65177
65177: DISABLE
// begin Difficulty := Difficulty + 1 ;
65178: LD_ADDR_OWVAR 67
65182: PUSH
65183: LD_OWVAR 67
65187: PUSH
65188: LD_INT 1
65190: PLUS
65191: ST_TO_ADDR
// end ;
65192: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65193: LD_EXP 46
65197: PUSH
65198: LD_EXP 65
65202: AND
65203: IFFALSE 65306
65205: GO 65207
65207: DISABLE
65208: LD_INT 0
65210: PPUSH
// begin for i := 1 to 5 do
65211: LD_ADDR_VAR 0 1
65215: PUSH
65216: DOUBLE
65217: LD_INT 1
65219: DEC
65220: ST_TO_ADDR
65221: LD_INT 5
65223: PUSH
65224: FOR_TO
65225: IFFALSE 65304
// begin uc_nation := nation_nature ;
65227: LD_ADDR_OWVAR 21
65231: PUSH
65232: LD_INT 0
65234: ST_TO_ADDR
// uc_side := 0 ;
65235: LD_ADDR_OWVAR 20
65239: PUSH
65240: LD_INT 0
65242: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65243: LD_ADDR_OWVAR 29
65247: PUSH
65248: LD_INT 12
65250: PUSH
65251: LD_INT 12
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: ST_TO_ADDR
// hc_agressivity := 20 ;
65258: LD_ADDR_OWVAR 35
65262: PUSH
65263: LD_INT 20
65265: ST_TO_ADDR
// hc_class := class_tiger ;
65266: LD_ADDR_OWVAR 28
65270: PUSH
65271: LD_INT 14
65273: ST_TO_ADDR
// hc_gallery :=  ;
65274: LD_ADDR_OWVAR 33
65278: PUSH
65279: LD_STRING 
65281: ST_TO_ADDR
// hc_name :=  ;
65282: LD_ADDR_OWVAR 26
65286: PUSH
65287: LD_STRING 
65289: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
65290: CALL_OW 44
65294: PPUSH
65295: LD_INT 0
65297: PPUSH
65298: CALL_OW 51
// end ;
65302: GO 65224
65304: POP
65305: POP
// end ;
65306: PPOPN 1
65308: END
// every 0 0$1 trigger StreamModeActive and sBomb do
65309: LD_EXP 46
65313: PUSH
65314: LD_EXP 66
65318: AND
65319: IFFALSE 65328
65321: GO 65323
65323: DISABLE
// StreamSibBomb ;
65324: CALL 65329 0 0
65328: END
// export function StreamSibBomb ; var i , x , y ; begin
65329: LD_INT 0
65331: PPUSH
65332: PPUSH
65333: PPUSH
65334: PPUSH
// result := false ;
65335: LD_ADDR_VAR 0 1
65339: PUSH
65340: LD_INT 0
65342: ST_TO_ADDR
// for i := 1 to 16 do
65343: LD_ADDR_VAR 0 2
65347: PUSH
65348: DOUBLE
65349: LD_INT 1
65351: DEC
65352: ST_TO_ADDR
65353: LD_INT 16
65355: PUSH
65356: FOR_TO
65357: IFFALSE 65556
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65359: LD_ADDR_VAR 0 3
65363: PUSH
65364: LD_INT 10
65366: PUSH
65367: LD_INT 20
65369: PUSH
65370: LD_INT 30
65372: PUSH
65373: LD_INT 40
65375: PUSH
65376: LD_INT 50
65378: PUSH
65379: LD_INT 60
65381: PUSH
65382: LD_INT 70
65384: PUSH
65385: LD_INT 80
65387: PUSH
65388: LD_INT 90
65390: PUSH
65391: LD_INT 100
65393: PUSH
65394: LD_INT 110
65396: PUSH
65397: LD_INT 120
65399: PUSH
65400: LD_INT 130
65402: PUSH
65403: LD_INT 140
65405: PUSH
65406: LD_INT 150
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 1
65428: PPUSH
65429: LD_INT 15
65431: PPUSH
65432: CALL_OW 12
65436: ARRAY
65437: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65438: LD_ADDR_VAR 0 4
65442: PUSH
65443: LD_INT 10
65445: PUSH
65446: LD_INT 20
65448: PUSH
65449: LD_INT 30
65451: PUSH
65452: LD_INT 40
65454: PUSH
65455: LD_INT 50
65457: PUSH
65458: LD_INT 60
65460: PUSH
65461: LD_INT 70
65463: PUSH
65464: LD_INT 80
65466: PUSH
65467: LD_INT 90
65469: PUSH
65470: LD_INT 100
65472: PUSH
65473: LD_INT 110
65475: PUSH
65476: LD_INT 120
65478: PUSH
65479: LD_INT 130
65481: PUSH
65482: LD_INT 140
65484: PUSH
65485: LD_INT 150
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 1
65507: PPUSH
65508: LD_INT 15
65510: PPUSH
65511: CALL_OW 12
65515: ARRAY
65516: ST_TO_ADDR
// if ValidHex ( x , y ) then
65517: LD_VAR 0 3
65521: PPUSH
65522: LD_VAR 0 4
65526: PPUSH
65527: CALL_OW 488
65531: IFFALSE 65554
// begin result := [ x , y ] ;
65533: LD_ADDR_VAR 0 1
65537: PUSH
65538: LD_VAR 0 3
65542: PUSH
65543: LD_VAR 0 4
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: ST_TO_ADDR
// break ;
65552: GO 65556
// end ; end ;
65554: GO 65356
65556: POP
65557: POP
// if result then
65558: LD_VAR 0 1
65562: IFFALSE 65622
// begin ToLua ( playSibBomb() ) ;
65564: LD_STRING playSibBomb()
65566: PPUSH
65567: CALL_OW 559
// wait ( 0 0$14 ) ;
65571: LD_INT 490
65573: PPUSH
65574: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
65578: LD_VAR 0 1
65582: PUSH
65583: LD_INT 1
65585: ARRAY
65586: PPUSH
65587: LD_VAR 0 1
65591: PUSH
65592: LD_INT 2
65594: ARRAY
65595: PPUSH
65596: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
65600: LD_VAR 0 1
65604: PUSH
65605: LD_INT 1
65607: ARRAY
65608: PPUSH
65609: LD_VAR 0 1
65613: PUSH
65614: LD_INT 2
65616: ARRAY
65617: PPUSH
65618: CALL_OW 429
// end ; end ;
65622: LD_VAR 0 1
65626: RET
// every 0 0$1 trigger StreamModeActive and sReset do
65627: LD_EXP 46
65631: PUSH
65632: LD_EXP 68
65636: AND
65637: IFFALSE 65649
65639: GO 65641
65641: DISABLE
// YouLost (  ) ;
65642: LD_STRING 
65644: PPUSH
65645: CALL_OW 104
65649: END
// every 0 0$1 trigger StreamModeActive and sFog do
65650: LD_EXP 46
65654: PUSH
65655: LD_EXP 67
65659: AND
65660: IFFALSE 65674
65662: GO 65664
65664: DISABLE
// FogOff ( your_side ) ;
65665: LD_OWVAR 2
65669: PPUSH
65670: CALL_OW 344
65674: END
// every 0 0$1 trigger StreamModeActive and sSun do
65675: LD_EXP 46
65679: PUSH
65680: LD_EXP 69
65684: AND
65685: IFFALSE 65713
65687: GO 65689
65689: DISABLE
// begin solar_recharge_percent := 0 ;
65690: LD_ADDR_OWVAR 79
65694: PUSH
65695: LD_INT 0
65697: ST_TO_ADDR
// wait ( 5 5$00 ) ;
65698: LD_INT 10500
65700: PPUSH
65701: CALL_OW 67
// solar_recharge_percent := 100 ;
65705: LD_ADDR_OWVAR 79
65709: PUSH
65710: LD_INT 100
65712: ST_TO_ADDR
// end ;
65713: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
65714: LD_EXP 46
65718: PUSH
65719: LD_EXP 70
65723: AND
65724: IFFALSE 65963
65726: GO 65728
65728: DISABLE
65729: LD_INT 0
65731: PPUSH
65732: PPUSH
65733: PPUSH
// begin tmp := [ ] ;
65734: LD_ADDR_VAR 0 3
65738: PUSH
65739: EMPTY
65740: ST_TO_ADDR
// for i := 1 to 6 do
65741: LD_ADDR_VAR 0 1
65745: PUSH
65746: DOUBLE
65747: LD_INT 1
65749: DEC
65750: ST_TO_ADDR
65751: LD_INT 6
65753: PUSH
65754: FOR_TO
65755: IFFALSE 65860
// begin uc_nation := nation_nature ;
65757: LD_ADDR_OWVAR 21
65761: PUSH
65762: LD_INT 0
65764: ST_TO_ADDR
// uc_side := 0 ;
65765: LD_ADDR_OWVAR 20
65769: PUSH
65770: LD_INT 0
65772: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65773: LD_ADDR_OWVAR 29
65777: PUSH
65778: LD_INT 12
65780: PUSH
65781: LD_INT 12
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: ST_TO_ADDR
// hc_agressivity := 20 ;
65788: LD_ADDR_OWVAR 35
65792: PUSH
65793: LD_INT 20
65795: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
65796: LD_ADDR_OWVAR 28
65800: PUSH
65801: LD_INT 17
65803: ST_TO_ADDR
// hc_gallery :=  ;
65804: LD_ADDR_OWVAR 33
65808: PUSH
65809: LD_STRING 
65811: ST_TO_ADDR
// hc_name :=  ;
65812: LD_ADDR_OWVAR 26
65816: PUSH
65817: LD_STRING 
65819: ST_TO_ADDR
// un := CreateHuman ;
65820: LD_ADDR_VAR 0 2
65824: PUSH
65825: CALL_OW 44
65829: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
65830: LD_VAR 0 2
65834: PPUSH
65835: LD_INT 1
65837: PPUSH
65838: CALL_OW 51
// tmp := tmp ^ un ;
65842: LD_ADDR_VAR 0 3
65846: PUSH
65847: LD_VAR 0 3
65851: PUSH
65852: LD_VAR 0 2
65856: ADD
65857: ST_TO_ADDR
// end ;
65858: GO 65754
65860: POP
65861: POP
// repeat wait ( 0 0$1 ) ;
65862: LD_INT 35
65864: PPUSH
65865: CALL_OW 67
// for un in tmp do
65869: LD_ADDR_VAR 0 2
65873: PUSH
65874: LD_VAR 0 3
65878: PUSH
65879: FOR_IN
65880: IFFALSE 65954
// begin if IsDead ( un ) then
65882: LD_VAR 0 2
65886: PPUSH
65887: CALL_OW 301
65891: IFFALSE 65911
// begin tmp := tmp diff un ;
65893: LD_ADDR_VAR 0 3
65897: PUSH
65898: LD_VAR 0 3
65902: PUSH
65903: LD_VAR 0 2
65907: DIFF
65908: ST_TO_ADDR
// continue ;
65909: GO 65879
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
65911: LD_VAR 0 2
65915: PPUSH
65916: LD_INT 3
65918: PUSH
65919: LD_INT 22
65921: PUSH
65922: LD_INT 0
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PPUSH
65933: CALL_OW 69
65937: PPUSH
65938: LD_VAR 0 2
65942: PPUSH
65943: CALL_OW 74
65947: PPUSH
65948: CALL_OW 115
// end ;
65952: GO 65879
65954: POP
65955: POP
// until not tmp ;
65956: LD_VAR 0 3
65960: NOT
65961: IFFALSE 65862
// end ;
65963: PPOPN 3
65965: END
// every 0 0$1 trigger StreamModeActive and sTroll do
65966: LD_EXP 46
65970: PUSH
65971: LD_EXP 71
65975: AND
65976: IFFALSE 66030
65978: GO 65980
65980: DISABLE
// begin ToLua ( displayTroll(); ) ;
65981: LD_STRING displayTroll();
65983: PPUSH
65984: CALL_OW 559
// wait ( 3 3$00 ) ;
65988: LD_INT 6300
65990: PPUSH
65991: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65995: LD_STRING hideTroll();
65997: PPUSH
65998: CALL_OW 559
// wait ( 1 1$00 ) ;
66002: LD_INT 2100
66004: PPUSH
66005: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66009: LD_STRING displayTroll();
66011: PPUSH
66012: CALL_OW 559
// wait ( 1 1$00 ) ;
66016: LD_INT 2100
66018: PPUSH
66019: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66023: LD_STRING hideTroll();
66025: PPUSH
66026: CALL_OW 559
// end ;
66030: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66031: LD_EXP 46
66035: PUSH
66036: LD_EXP 72
66040: AND
66041: IFFALSE 66104
66043: GO 66045
66045: DISABLE
66046: LD_INT 0
66048: PPUSH
// begin p := 0 ;
66049: LD_ADDR_VAR 0 1
66053: PUSH
66054: LD_INT 0
66056: ST_TO_ADDR
// repeat game_speed := 1 ;
66057: LD_ADDR_OWVAR 65
66061: PUSH
66062: LD_INT 1
66064: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66065: LD_INT 35
66067: PPUSH
66068: CALL_OW 67
// p := p + 1 ;
66072: LD_ADDR_VAR 0 1
66076: PUSH
66077: LD_VAR 0 1
66081: PUSH
66082: LD_INT 1
66084: PLUS
66085: ST_TO_ADDR
// until p >= 60 ;
66086: LD_VAR 0 1
66090: PUSH
66091: LD_INT 60
66093: GREATEREQUAL
66094: IFFALSE 66057
// game_speed := 4 ;
66096: LD_ADDR_OWVAR 65
66100: PUSH
66101: LD_INT 4
66103: ST_TO_ADDR
// end ;
66104: PPOPN 1
66106: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66107: LD_EXP 46
66111: PUSH
66112: LD_EXP 73
66116: AND
66117: IFFALSE 66263
66119: GO 66121
66121: DISABLE
66122: LD_INT 0
66124: PPUSH
66125: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66126: LD_ADDR_VAR 0 1
66130: PUSH
66131: LD_INT 22
66133: PUSH
66134: LD_OWVAR 2
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 2
66145: PUSH
66146: LD_INT 30
66148: PUSH
66149: LD_INT 0
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 30
66158: PUSH
66159: LD_INT 1
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: LIST
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PPUSH
66175: CALL_OW 69
66179: ST_TO_ADDR
// if not depot then
66180: LD_VAR 0 1
66184: NOT
66185: IFFALSE 66189
// exit ;
66187: GO 66263
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66189: LD_ADDR_VAR 0 2
66193: PUSH
66194: LD_VAR 0 1
66198: PUSH
66199: LD_INT 1
66201: PPUSH
66202: LD_VAR 0 1
66206: PPUSH
66207: CALL_OW 12
66211: ARRAY
66212: PPUSH
66213: CALL_OW 274
66217: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
66218: LD_VAR 0 2
66222: PPUSH
66223: LD_INT 1
66225: PPUSH
66226: LD_INT 0
66228: PPUSH
66229: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
66233: LD_VAR 0 2
66237: PPUSH
66238: LD_INT 2
66240: PPUSH
66241: LD_INT 0
66243: PPUSH
66244: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
66248: LD_VAR 0 2
66252: PPUSH
66253: LD_INT 3
66255: PPUSH
66256: LD_INT 0
66258: PPUSH
66259: CALL_OW 277
// end ;
66263: PPOPN 2
66265: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
66266: LD_EXP 46
66270: PUSH
66271: LD_EXP 74
66275: AND
66276: IFFALSE 66373
66278: GO 66280
66280: DISABLE
66281: LD_INT 0
66283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66284: LD_ADDR_VAR 0 1
66288: PUSH
66289: LD_INT 22
66291: PUSH
66292: LD_OWVAR 2
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 21
66303: PUSH
66304: LD_INT 1
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 3
66313: PUSH
66314: LD_INT 23
66316: PUSH
66317: LD_INT 0
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: LIST
66332: PPUSH
66333: CALL_OW 69
66337: ST_TO_ADDR
// if not tmp then
66338: LD_VAR 0 1
66342: NOT
66343: IFFALSE 66347
// exit ;
66345: GO 66373
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66347: LD_VAR 0 1
66351: PUSH
66352: LD_INT 1
66354: PPUSH
66355: LD_VAR 0 1
66359: PPUSH
66360: CALL_OW 12
66364: ARRAY
66365: PPUSH
66366: LD_INT 200
66368: PPUSH
66369: CALL_OW 234
// end ;
66373: PPOPN 1
66375: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66376: LD_EXP 46
66380: PUSH
66381: LD_EXP 75
66385: AND
66386: IFFALSE 66465
66388: GO 66390
66390: DISABLE
66391: LD_INT 0
66393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66394: LD_ADDR_VAR 0 1
66398: PUSH
66399: LD_INT 22
66401: PUSH
66402: LD_OWVAR 2
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 21
66413: PUSH
66414: LD_INT 2
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PPUSH
66425: CALL_OW 69
66429: ST_TO_ADDR
// if not tmp then
66430: LD_VAR 0 1
66434: NOT
66435: IFFALSE 66439
// exit ;
66437: GO 66465
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66439: LD_VAR 0 1
66443: PUSH
66444: LD_INT 1
66446: PPUSH
66447: LD_VAR 0 1
66451: PPUSH
66452: CALL_OW 12
66456: ARRAY
66457: PPUSH
66458: LD_INT 60
66460: PPUSH
66461: CALL_OW 234
// end ;
66465: PPOPN 1
66467: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66468: LD_EXP 46
66472: PUSH
66473: LD_EXP 76
66477: AND
66478: IFFALSE 66577
66480: GO 66482
66482: DISABLE
66483: LD_INT 0
66485: PPUSH
66486: PPUSH
// begin enable ;
66487: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66488: LD_ADDR_VAR 0 1
66492: PUSH
66493: LD_INT 22
66495: PUSH
66496: LD_OWVAR 2
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 61
66507: PUSH
66508: EMPTY
66509: LIST
66510: PUSH
66511: LD_INT 33
66513: PUSH
66514: LD_INT 2
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: LIST
66525: PPUSH
66526: CALL_OW 69
66530: ST_TO_ADDR
// if not tmp then
66531: LD_VAR 0 1
66535: NOT
66536: IFFALSE 66540
// exit ;
66538: GO 66577
// for i in tmp do
66540: LD_ADDR_VAR 0 2
66544: PUSH
66545: LD_VAR 0 1
66549: PUSH
66550: FOR_IN
66551: IFFALSE 66575
// if IsControledBy ( i ) then
66553: LD_VAR 0 2
66557: PPUSH
66558: CALL_OW 312
66562: IFFALSE 66573
// ComUnlink ( i ) ;
66564: LD_VAR 0 2
66568: PPUSH
66569: CALL_OW 136
66573: GO 66550
66575: POP
66576: POP
// end ;
66577: PPOPN 2
66579: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
66580: LD_EXP 46
66584: PUSH
66585: LD_EXP 77
66589: AND
66590: IFFALSE 66730
66592: GO 66594
66594: DISABLE
66595: LD_INT 0
66597: PPUSH
66598: PPUSH
// begin ToLua ( displayPowell(); ) ;
66599: LD_STRING displayPowell();
66601: PPUSH
66602: CALL_OW 559
// uc_side := 0 ;
66606: LD_ADDR_OWVAR 20
66610: PUSH
66611: LD_INT 0
66613: ST_TO_ADDR
// uc_nation := 2 ;
66614: LD_ADDR_OWVAR 21
66618: PUSH
66619: LD_INT 2
66621: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
66622: LD_ADDR_OWVAR 37
66626: PUSH
66627: LD_INT 14
66629: ST_TO_ADDR
// vc_engine := engine_siberite ;
66630: LD_ADDR_OWVAR 39
66634: PUSH
66635: LD_INT 3
66637: ST_TO_ADDR
// vc_control := control_apeman ;
66638: LD_ADDR_OWVAR 38
66642: PUSH
66643: LD_INT 5
66645: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
66646: LD_ADDR_OWVAR 40
66650: PUSH
66651: LD_INT 29
66653: ST_TO_ADDR
// un := CreateVehicle ;
66654: LD_ADDR_VAR 0 2
66658: PUSH
66659: CALL_OW 45
66663: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66664: LD_VAR 0 2
66668: PPUSH
66669: LD_INT 1
66671: PPUSH
66672: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66676: LD_INT 35
66678: PPUSH
66679: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66683: LD_VAR 0 2
66687: PPUSH
66688: LD_INT 22
66690: PUSH
66691: LD_OWVAR 2
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PPUSH
66700: CALL_OW 69
66704: PPUSH
66705: LD_VAR 0 2
66709: PPUSH
66710: CALL_OW 74
66714: PPUSH
66715: CALL_OW 115
// until IsDead ( un ) ;
66719: LD_VAR 0 2
66723: PPUSH
66724: CALL_OW 301
66728: IFFALSE 66676
// end ;
66730: PPOPN 2
66732: END
// every 0 0$1 trigger StreamModeActive and sStu do
66733: LD_EXP 46
66737: PUSH
66738: LD_EXP 85
66742: AND
66743: IFFALSE 66759
66745: GO 66747
66747: DISABLE
// begin ToLua ( displayStucuk(); ) ;
66748: LD_STRING displayStucuk();
66750: PPUSH
66751: CALL_OW 559
// ResetFog ;
66755: CALL_OW 335
// end ;
66759: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
66760: LD_EXP 46
66764: PUSH
66765: LD_EXP 78
66769: AND
66770: IFFALSE 66911
66772: GO 66774
66774: DISABLE
66775: LD_INT 0
66777: PPUSH
66778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66779: LD_ADDR_VAR 0 2
66783: PUSH
66784: LD_INT 22
66786: PUSH
66787: LD_OWVAR 2
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 21
66798: PUSH
66799: LD_INT 1
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PPUSH
66810: CALL_OW 69
66814: ST_TO_ADDR
// if not tmp then
66815: LD_VAR 0 2
66819: NOT
66820: IFFALSE 66824
// exit ;
66822: GO 66911
// un := tmp [ rand ( 1 , tmp ) ] ;
66824: LD_ADDR_VAR 0 1
66828: PUSH
66829: LD_VAR 0 2
66833: PUSH
66834: LD_INT 1
66836: PPUSH
66837: LD_VAR 0 2
66841: PPUSH
66842: CALL_OW 12
66846: ARRAY
66847: ST_TO_ADDR
// SetSide ( un , 0 ) ;
66848: LD_VAR 0 1
66852: PPUSH
66853: LD_INT 0
66855: PPUSH
66856: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
66860: LD_VAR 0 1
66864: PPUSH
66865: LD_OWVAR 3
66869: PUSH
66870: LD_VAR 0 1
66874: DIFF
66875: PPUSH
66876: LD_VAR 0 1
66880: PPUSH
66881: CALL_OW 74
66885: PPUSH
66886: CALL_OW 115
// wait ( 0 0$20 ) ;
66890: LD_INT 700
66892: PPUSH
66893: CALL_OW 67
// SetSide ( un , your_side ) ;
66897: LD_VAR 0 1
66901: PPUSH
66902: LD_OWVAR 2
66906: PPUSH
66907: CALL_OW 235
// end ;
66911: PPOPN 2
66913: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
66914: LD_EXP 46
66918: PUSH
66919: LD_EXP 79
66923: AND
66924: IFFALSE 67030
66926: GO 66928
66928: DISABLE
66929: LD_INT 0
66931: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66932: LD_ADDR_VAR 0 1
66936: PUSH
66937: LD_INT 22
66939: PUSH
66940: LD_OWVAR 2
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 2
66951: PUSH
66952: LD_INT 30
66954: PUSH
66955: LD_INT 0
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 30
66964: PUSH
66965: LD_INT 1
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: LIST
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PPUSH
66981: CALL_OW 69
66985: ST_TO_ADDR
// if not depot then
66986: LD_VAR 0 1
66990: NOT
66991: IFFALSE 66995
// exit ;
66993: GO 67030
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
66995: LD_VAR 0 1
66999: PUSH
67000: LD_INT 1
67002: ARRAY
67003: PPUSH
67004: CALL_OW 250
67008: PPUSH
67009: LD_VAR 0 1
67013: PUSH
67014: LD_INT 1
67016: ARRAY
67017: PPUSH
67018: CALL_OW 251
67022: PPUSH
67023: LD_INT 70
67025: PPUSH
67026: CALL_OW 495
// end ;
67030: PPOPN 1
67032: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67033: LD_EXP 46
67037: PUSH
67038: LD_EXP 80
67042: AND
67043: IFFALSE 67254
67045: GO 67047
67047: DISABLE
67048: LD_INT 0
67050: PPUSH
67051: PPUSH
67052: PPUSH
67053: PPUSH
67054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67055: LD_ADDR_VAR 0 5
67059: PUSH
67060: LD_INT 22
67062: PUSH
67063: LD_OWVAR 2
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 21
67074: PUSH
67075: LD_INT 1
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PPUSH
67086: CALL_OW 69
67090: ST_TO_ADDR
// if not tmp then
67091: LD_VAR 0 5
67095: NOT
67096: IFFALSE 67100
// exit ;
67098: GO 67254
// for i in tmp do
67100: LD_ADDR_VAR 0 1
67104: PUSH
67105: LD_VAR 0 5
67109: PUSH
67110: FOR_IN
67111: IFFALSE 67252
// begin d := rand ( 0 , 5 ) ;
67113: LD_ADDR_VAR 0 4
67117: PUSH
67118: LD_INT 0
67120: PPUSH
67121: LD_INT 5
67123: PPUSH
67124: CALL_OW 12
67128: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67129: LD_ADDR_VAR 0 2
67133: PUSH
67134: LD_VAR 0 1
67138: PPUSH
67139: CALL_OW 250
67143: PPUSH
67144: LD_VAR 0 4
67148: PPUSH
67149: LD_INT 3
67151: PPUSH
67152: LD_INT 12
67154: PPUSH
67155: CALL_OW 12
67159: PPUSH
67160: CALL_OW 272
67164: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
67165: LD_ADDR_VAR 0 3
67169: PUSH
67170: LD_VAR 0 1
67174: PPUSH
67175: CALL_OW 251
67179: PPUSH
67180: LD_VAR 0 4
67184: PPUSH
67185: LD_INT 3
67187: PPUSH
67188: LD_INT 12
67190: PPUSH
67191: CALL_OW 12
67195: PPUSH
67196: CALL_OW 273
67200: ST_TO_ADDR
// if ValidHex ( x , y ) then
67201: LD_VAR 0 2
67205: PPUSH
67206: LD_VAR 0 3
67210: PPUSH
67211: CALL_OW 488
67215: IFFALSE 67250
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
67217: LD_VAR 0 1
67221: PPUSH
67222: LD_VAR 0 2
67226: PPUSH
67227: LD_VAR 0 3
67231: PPUSH
67232: LD_INT 3
67234: PPUSH
67235: LD_INT 6
67237: PPUSH
67238: CALL_OW 12
67242: PPUSH
67243: LD_INT 1
67245: PPUSH
67246: CALL_OW 483
// end ;
67250: GO 67110
67252: POP
67253: POP
// end ;
67254: PPOPN 5
67256: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
67257: LD_EXP 46
67261: PUSH
67262: LD_EXP 81
67266: AND
67267: IFFALSE 67361
67269: GO 67271
67271: DISABLE
67272: LD_INT 0
67274: PPUSH
67275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
67276: LD_ADDR_VAR 0 2
67280: PUSH
67281: LD_INT 22
67283: PUSH
67284: LD_OWVAR 2
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 32
67295: PUSH
67296: LD_INT 1
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 21
67305: PUSH
67306: LD_INT 2
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: LIST
67317: PPUSH
67318: CALL_OW 69
67322: ST_TO_ADDR
// if not tmp then
67323: LD_VAR 0 2
67327: NOT
67328: IFFALSE 67332
// exit ;
67330: GO 67361
// for i in tmp do
67332: LD_ADDR_VAR 0 1
67336: PUSH
67337: LD_VAR 0 2
67341: PUSH
67342: FOR_IN
67343: IFFALSE 67359
// SetFuel ( i , 0 ) ;
67345: LD_VAR 0 1
67349: PPUSH
67350: LD_INT 0
67352: PPUSH
67353: CALL_OW 240
67357: GO 67342
67359: POP
67360: POP
// end ;
67361: PPOPN 2
67363: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67364: LD_EXP 46
67368: PUSH
67369: LD_EXP 82
67373: AND
67374: IFFALSE 67440
67376: GO 67378
67378: DISABLE
67379: LD_INT 0
67381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67382: LD_ADDR_VAR 0 1
67386: PUSH
67387: LD_INT 22
67389: PUSH
67390: LD_OWVAR 2
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 30
67401: PUSH
67402: LD_INT 29
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PPUSH
67413: CALL_OW 69
67417: ST_TO_ADDR
// if not tmp then
67418: LD_VAR 0 1
67422: NOT
67423: IFFALSE 67427
// exit ;
67425: GO 67440
// DestroyUnit ( tmp [ 1 ] ) ;
67427: LD_VAR 0 1
67431: PUSH
67432: LD_INT 1
67434: ARRAY
67435: PPUSH
67436: CALL_OW 65
// end ;
67440: PPOPN 1
67442: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67443: LD_EXP 46
67447: PUSH
67448: LD_EXP 84
67452: AND
67453: IFFALSE 67582
67455: GO 67457
67457: DISABLE
67458: LD_INT 0
67460: PPUSH
// begin uc_side := 0 ;
67461: LD_ADDR_OWVAR 20
67465: PUSH
67466: LD_INT 0
67468: ST_TO_ADDR
// uc_nation := nation_arabian ;
67469: LD_ADDR_OWVAR 21
67473: PUSH
67474: LD_INT 2
67476: ST_TO_ADDR
// hc_gallery :=  ;
67477: LD_ADDR_OWVAR 33
67481: PUSH
67482: LD_STRING 
67484: ST_TO_ADDR
// hc_name :=  ;
67485: LD_ADDR_OWVAR 26
67489: PUSH
67490: LD_STRING 
67492: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67493: LD_INT 1
67495: PPUSH
67496: LD_INT 11
67498: PPUSH
67499: LD_INT 10
67501: PPUSH
67502: CALL_OW 380
// un := CreateHuman ;
67506: LD_ADDR_VAR 0 1
67510: PUSH
67511: CALL_OW 44
67515: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67516: LD_VAR 0 1
67520: PPUSH
67521: LD_INT 1
67523: PPUSH
67524: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67528: LD_INT 35
67530: PPUSH
67531: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67535: LD_VAR 0 1
67539: PPUSH
67540: LD_INT 22
67542: PUSH
67543: LD_OWVAR 2
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PPUSH
67552: CALL_OW 69
67556: PPUSH
67557: LD_VAR 0 1
67561: PPUSH
67562: CALL_OW 74
67566: PPUSH
67567: CALL_OW 115
// until IsDead ( un ) ;
67571: LD_VAR 0 1
67575: PPUSH
67576: CALL_OW 301
67580: IFFALSE 67528
// end ;
67582: PPOPN 1
67584: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
67585: LD_EXP 46
67589: PUSH
67590: LD_EXP 86
67594: AND
67595: IFFALSE 67607
67597: GO 67599
67599: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
67600: LD_STRING earthquake(getX(game), 0, 32)
67602: PPUSH
67603: CALL_OW 559
67607: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
67608: LD_EXP 46
67612: PUSH
67613: LD_EXP 87
67617: AND
67618: IFFALSE 67709
67620: GO 67622
67622: DISABLE
67623: LD_INT 0
67625: PPUSH
// begin enable ;
67626: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
67627: LD_ADDR_VAR 0 1
67631: PUSH
67632: LD_INT 22
67634: PUSH
67635: LD_OWVAR 2
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 21
67646: PUSH
67647: LD_INT 2
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 33
67656: PUSH
67657: LD_INT 3
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: LIST
67668: PPUSH
67669: CALL_OW 69
67673: ST_TO_ADDR
// if not tmp then
67674: LD_VAR 0 1
67678: NOT
67679: IFFALSE 67683
// exit ;
67681: GO 67709
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67683: LD_VAR 0 1
67687: PUSH
67688: LD_INT 1
67690: PPUSH
67691: LD_VAR 0 1
67695: PPUSH
67696: CALL_OW 12
67700: ARRAY
67701: PPUSH
67702: LD_INT 1
67704: PPUSH
67705: CALL_OW 234
// end ;
67709: PPOPN 1
67711: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
67712: LD_EXP 46
67716: PUSH
67717: LD_EXP 88
67721: AND
67722: IFFALSE 67863
67724: GO 67726
67726: DISABLE
67727: LD_INT 0
67729: PPUSH
67730: PPUSH
67731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67732: LD_ADDR_VAR 0 3
67736: PUSH
67737: LD_INT 22
67739: PUSH
67740: LD_OWVAR 2
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 25
67751: PUSH
67752: LD_INT 1
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PPUSH
67763: CALL_OW 69
67767: ST_TO_ADDR
// if not tmp then
67768: LD_VAR 0 3
67772: NOT
67773: IFFALSE 67777
// exit ;
67775: GO 67863
// un := tmp [ rand ( 1 , tmp ) ] ;
67777: LD_ADDR_VAR 0 2
67781: PUSH
67782: LD_VAR 0 3
67786: PUSH
67787: LD_INT 1
67789: PPUSH
67790: LD_VAR 0 3
67794: PPUSH
67795: CALL_OW 12
67799: ARRAY
67800: ST_TO_ADDR
// if Crawls ( un ) then
67801: LD_VAR 0 2
67805: PPUSH
67806: CALL_OW 318
67810: IFFALSE 67821
// ComWalk ( un ) ;
67812: LD_VAR 0 2
67816: PPUSH
67817: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
67821: LD_VAR 0 2
67825: PPUSH
67826: LD_INT 9
67828: PPUSH
67829: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
67833: LD_INT 28
67835: PPUSH
67836: LD_OWVAR 2
67840: PPUSH
67841: LD_INT 2
67843: PPUSH
67844: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
67848: LD_INT 29
67850: PPUSH
67851: LD_OWVAR 2
67855: PPUSH
67856: LD_INT 2
67858: PPUSH
67859: CALL_OW 322
// end ;
67863: PPOPN 3
67865: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
67866: LD_EXP 46
67870: PUSH
67871: LD_EXP 89
67875: AND
67876: IFFALSE 67987
67878: GO 67880
67880: DISABLE
67881: LD_INT 0
67883: PPUSH
67884: PPUSH
67885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67886: LD_ADDR_VAR 0 3
67890: PUSH
67891: LD_INT 22
67893: PUSH
67894: LD_OWVAR 2
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 25
67905: PUSH
67906: LD_INT 1
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PPUSH
67917: CALL_OW 69
67921: ST_TO_ADDR
// if not tmp then
67922: LD_VAR 0 3
67926: NOT
67927: IFFALSE 67931
// exit ;
67929: GO 67987
// un := tmp [ rand ( 1 , tmp ) ] ;
67931: LD_ADDR_VAR 0 2
67935: PUSH
67936: LD_VAR 0 3
67940: PUSH
67941: LD_INT 1
67943: PPUSH
67944: LD_VAR 0 3
67948: PPUSH
67949: CALL_OW 12
67953: ARRAY
67954: ST_TO_ADDR
// if Crawls ( un ) then
67955: LD_VAR 0 2
67959: PPUSH
67960: CALL_OW 318
67964: IFFALSE 67975
// ComWalk ( un ) ;
67966: LD_VAR 0 2
67970: PPUSH
67971: CALL_OW 138
// SetClass ( un , class_mortar ) ;
67975: LD_VAR 0 2
67979: PPUSH
67980: LD_INT 8
67982: PPUSH
67983: CALL_OW 336
// end ;
67987: PPOPN 3
67989: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
67990: LD_EXP 46
67994: PUSH
67995: LD_EXP 90
67999: AND
68000: IFFALSE 68144
68002: GO 68004
68004: DISABLE
68005: LD_INT 0
68007: PPUSH
68008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68009: LD_ADDR_VAR 0 2
68013: PUSH
68014: LD_INT 22
68016: PUSH
68017: LD_OWVAR 2
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 21
68028: PUSH
68029: LD_INT 2
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 2
68038: PUSH
68039: LD_INT 34
68041: PUSH
68042: LD_INT 12
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 34
68051: PUSH
68052: LD_INT 51
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 34
68061: PUSH
68062: LD_INT 32
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: LIST
68079: PPUSH
68080: CALL_OW 69
68084: ST_TO_ADDR
// if not tmp then
68085: LD_VAR 0 2
68089: NOT
68090: IFFALSE 68094
// exit ;
68092: GO 68144
// for i in tmp do
68094: LD_ADDR_VAR 0 1
68098: PUSH
68099: LD_VAR 0 2
68103: PUSH
68104: FOR_IN
68105: IFFALSE 68142
// if GetCargo ( i , mat_artifact ) = 0 then
68107: LD_VAR 0 1
68111: PPUSH
68112: LD_INT 4
68114: PPUSH
68115: CALL_OW 289
68119: PUSH
68120: LD_INT 0
68122: EQUAL
68123: IFFALSE 68140
// SetCargo ( i , mat_siberit , 100 ) ;
68125: LD_VAR 0 1
68129: PPUSH
68130: LD_INT 3
68132: PPUSH
68133: LD_INT 100
68135: PPUSH
68136: CALL_OW 290
68140: GO 68104
68142: POP
68143: POP
// end ;
68144: PPOPN 2
68146: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68147: LD_EXP 46
68151: PUSH
68152: LD_EXP 91
68156: AND
68157: IFFALSE 68340
68159: GO 68161
68161: DISABLE
68162: LD_INT 0
68164: PPUSH
68165: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68166: LD_ADDR_VAR 0 2
68170: PUSH
68171: LD_INT 22
68173: PUSH
68174: LD_OWVAR 2
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PPUSH
68183: CALL_OW 69
68187: ST_TO_ADDR
// if not tmp then
68188: LD_VAR 0 2
68192: NOT
68193: IFFALSE 68197
// exit ;
68195: GO 68340
// for i := 1 to 2 do
68197: LD_ADDR_VAR 0 1
68201: PUSH
68202: DOUBLE
68203: LD_INT 1
68205: DEC
68206: ST_TO_ADDR
68207: LD_INT 2
68209: PUSH
68210: FOR_TO
68211: IFFALSE 68338
// begin uc_side := your_side ;
68213: LD_ADDR_OWVAR 20
68217: PUSH
68218: LD_OWVAR 2
68222: ST_TO_ADDR
// uc_nation := nation_american ;
68223: LD_ADDR_OWVAR 21
68227: PUSH
68228: LD_INT 1
68230: ST_TO_ADDR
// vc_chassis := us_morphling ;
68231: LD_ADDR_OWVAR 37
68235: PUSH
68236: LD_INT 5
68238: ST_TO_ADDR
// vc_engine := engine_siberite ;
68239: LD_ADDR_OWVAR 39
68243: PUSH
68244: LD_INT 3
68246: ST_TO_ADDR
// vc_control := control_computer ;
68247: LD_ADDR_OWVAR 38
68251: PUSH
68252: LD_INT 3
68254: ST_TO_ADDR
// vc_weapon := us_double_laser ;
68255: LD_ADDR_OWVAR 40
68259: PUSH
68260: LD_INT 10
68262: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
68263: LD_VAR 0 2
68267: PUSH
68268: LD_INT 1
68270: ARRAY
68271: PPUSH
68272: CALL_OW 310
68276: NOT
68277: IFFALSE 68324
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
68279: CALL_OW 45
68283: PPUSH
68284: LD_VAR 0 2
68288: PUSH
68289: LD_INT 1
68291: ARRAY
68292: PPUSH
68293: CALL_OW 250
68297: PPUSH
68298: LD_VAR 0 2
68302: PUSH
68303: LD_INT 1
68305: ARRAY
68306: PPUSH
68307: CALL_OW 251
68311: PPUSH
68312: LD_INT 12
68314: PPUSH
68315: LD_INT 1
68317: PPUSH
68318: CALL_OW 50
68322: GO 68336
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
68324: CALL_OW 45
68328: PPUSH
68329: LD_INT 1
68331: PPUSH
68332: CALL_OW 51
// end ;
68336: GO 68210
68338: POP
68339: POP
// end ;
68340: PPOPN 2
68342: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68343: LD_EXP 46
68347: PUSH
68348: LD_EXP 92
68352: AND
68353: IFFALSE 68575
68355: GO 68357
68357: DISABLE
68358: LD_INT 0
68360: PPUSH
68361: PPUSH
68362: PPUSH
68363: PPUSH
68364: PPUSH
68365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68366: LD_ADDR_VAR 0 6
68370: PUSH
68371: LD_INT 22
68373: PUSH
68374: LD_OWVAR 2
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 21
68385: PUSH
68386: LD_INT 1
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 3
68395: PUSH
68396: LD_INT 23
68398: PUSH
68399: LD_INT 0
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: LIST
68414: PPUSH
68415: CALL_OW 69
68419: ST_TO_ADDR
// if not tmp then
68420: LD_VAR 0 6
68424: NOT
68425: IFFALSE 68429
// exit ;
68427: GO 68575
// s1 := rand ( 1 , 4 ) ;
68429: LD_ADDR_VAR 0 2
68433: PUSH
68434: LD_INT 1
68436: PPUSH
68437: LD_INT 4
68439: PPUSH
68440: CALL_OW 12
68444: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68445: LD_ADDR_VAR 0 4
68449: PUSH
68450: LD_VAR 0 6
68454: PUSH
68455: LD_INT 1
68457: ARRAY
68458: PPUSH
68459: LD_VAR 0 2
68463: PPUSH
68464: CALL_OW 259
68468: ST_TO_ADDR
// if s1 = 1 then
68469: LD_VAR 0 2
68473: PUSH
68474: LD_INT 1
68476: EQUAL
68477: IFFALSE 68497
// s2 := rand ( 2 , 4 ) else
68479: LD_ADDR_VAR 0 3
68483: PUSH
68484: LD_INT 2
68486: PPUSH
68487: LD_INT 4
68489: PPUSH
68490: CALL_OW 12
68494: ST_TO_ADDR
68495: GO 68505
// s2 := 1 ;
68497: LD_ADDR_VAR 0 3
68501: PUSH
68502: LD_INT 1
68504: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68505: LD_ADDR_VAR 0 5
68509: PUSH
68510: LD_VAR 0 6
68514: PUSH
68515: LD_INT 1
68517: ARRAY
68518: PPUSH
68519: LD_VAR 0 3
68523: PPUSH
68524: CALL_OW 259
68528: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
68529: LD_VAR 0 6
68533: PUSH
68534: LD_INT 1
68536: ARRAY
68537: PPUSH
68538: LD_VAR 0 2
68542: PPUSH
68543: LD_VAR 0 5
68547: PPUSH
68548: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
68552: LD_VAR 0 6
68556: PUSH
68557: LD_INT 1
68559: ARRAY
68560: PPUSH
68561: LD_VAR 0 3
68565: PPUSH
68566: LD_VAR 0 4
68570: PPUSH
68571: CALL_OW 237
// end ;
68575: PPOPN 6
68577: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
68578: LD_EXP 46
68582: PUSH
68583: LD_EXP 93
68587: AND
68588: IFFALSE 68667
68590: GO 68592
68592: DISABLE
68593: LD_INT 0
68595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
68596: LD_ADDR_VAR 0 1
68600: PUSH
68601: LD_INT 22
68603: PUSH
68604: LD_OWVAR 2
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 30
68615: PUSH
68616: LD_INT 3
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PPUSH
68627: CALL_OW 69
68631: ST_TO_ADDR
// if not tmp then
68632: LD_VAR 0 1
68636: NOT
68637: IFFALSE 68641
// exit ;
68639: GO 68667
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68641: LD_VAR 0 1
68645: PUSH
68646: LD_INT 1
68648: PPUSH
68649: LD_VAR 0 1
68653: PPUSH
68654: CALL_OW 12
68658: ARRAY
68659: PPUSH
68660: LD_INT 1
68662: PPUSH
68663: CALL_OW 234
// end ;
68667: PPOPN 1
68669: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
68670: LD_EXP 46
68674: PUSH
68675: LD_EXP 94
68679: AND
68680: IFFALSE 68792
68682: GO 68684
68684: DISABLE
68685: LD_INT 0
68687: PPUSH
68688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
68689: LD_ADDR_VAR 0 2
68693: PUSH
68694: LD_INT 22
68696: PUSH
68697: LD_OWVAR 2
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 2
68708: PUSH
68709: LD_INT 30
68711: PUSH
68712: LD_INT 27
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 30
68721: PUSH
68722: LD_INT 26
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 30
68731: PUSH
68732: LD_INT 28
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PPUSH
68749: CALL_OW 69
68753: ST_TO_ADDR
// if not tmp then
68754: LD_VAR 0 2
68758: NOT
68759: IFFALSE 68763
// exit ;
68761: GO 68792
// for i in tmp do
68763: LD_ADDR_VAR 0 1
68767: PUSH
68768: LD_VAR 0 2
68772: PUSH
68773: FOR_IN
68774: IFFALSE 68790
// SetLives ( i , 1 ) ;
68776: LD_VAR 0 1
68780: PPUSH
68781: LD_INT 1
68783: PPUSH
68784: CALL_OW 234
68788: GO 68773
68790: POP
68791: POP
// end ;
68792: PPOPN 2
68794: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
68795: LD_EXP 46
68799: PUSH
68800: LD_EXP 95
68804: AND
68805: IFFALSE 69092
68807: GO 68809
68809: DISABLE
68810: LD_INT 0
68812: PPUSH
68813: PPUSH
68814: PPUSH
// begin i := rand ( 1 , 7 ) ;
68815: LD_ADDR_VAR 0 1
68819: PUSH
68820: LD_INT 1
68822: PPUSH
68823: LD_INT 7
68825: PPUSH
68826: CALL_OW 12
68830: ST_TO_ADDR
// case i of 1 :
68831: LD_VAR 0 1
68835: PUSH
68836: LD_INT 1
68838: DOUBLE
68839: EQUAL
68840: IFTRUE 68844
68842: GO 68854
68844: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
68845: LD_STRING earthquake(getX(game), 0, 32)
68847: PPUSH
68848: CALL_OW 559
68852: GO 69092
68854: LD_INT 2
68856: DOUBLE
68857: EQUAL
68858: IFTRUE 68862
68860: GO 68876
68862: POP
// begin ToLua ( displayStucuk(); ) ;
68863: LD_STRING displayStucuk();
68865: PPUSH
68866: CALL_OW 559
// ResetFog ;
68870: CALL_OW 335
// end ; 3 :
68874: GO 69092
68876: LD_INT 3
68878: DOUBLE
68879: EQUAL
68880: IFTRUE 68884
68882: GO 68988
68884: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68885: LD_ADDR_VAR 0 2
68889: PUSH
68890: LD_INT 22
68892: PUSH
68893: LD_OWVAR 2
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 25
68904: PUSH
68905: LD_INT 1
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PPUSH
68916: CALL_OW 69
68920: ST_TO_ADDR
// if not tmp then
68921: LD_VAR 0 2
68925: NOT
68926: IFFALSE 68930
// exit ;
68928: GO 69092
// un := tmp [ rand ( 1 , tmp ) ] ;
68930: LD_ADDR_VAR 0 3
68934: PUSH
68935: LD_VAR 0 2
68939: PUSH
68940: LD_INT 1
68942: PPUSH
68943: LD_VAR 0 2
68947: PPUSH
68948: CALL_OW 12
68952: ARRAY
68953: ST_TO_ADDR
// if Crawls ( un ) then
68954: LD_VAR 0 3
68958: PPUSH
68959: CALL_OW 318
68963: IFFALSE 68974
// ComWalk ( un ) ;
68965: LD_VAR 0 3
68969: PPUSH
68970: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68974: LD_VAR 0 3
68978: PPUSH
68979: LD_INT 8
68981: PPUSH
68982: CALL_OW 336
// end ; 4 :
68986: GO 69092
68988: LD_INT 4
68990: DOUBLE
68991: EQUAL
68992: IFTRUE 68996
68994: GO 69070
68996: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68997: LD_ADDR_VAR 0 2
69001: PUSH
69002: LD_INT 22
69004: PUSH
69005: LD_OWVAR 2
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 30
69016: PUSH
69017: LD_INT 29
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PPUSH
69028: CALL_OW 69
69032: ST_TO_ADDR
// if not tmp then
69033: LD_VAR 0 2
69037: NOT
69038: IFFALSE 69042
// exit ;
69040: GO 69092
// CenterNowOnUnits ( tmp [ 1 ] ) ;
69042: LD_VAR 0 2
69046: PUSH
69047: LD_INT 1
69049: ARRAY
69050: PPUSH
69051: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
69055: LD_VAR 0 2
69059: PUSH
69060: LD_INT 1
69062: ARRAY
69063: PPUSH
69064: CALL_OW 65
// end ; 5 .. 7 :
69068: GO 69092
69070: LD_INT 5
69072: DOUBLE
69073: GREATEREQUAL
69074: IFFALSE 69082
69076: LD_INT 7
69078: DOUBLE
69079: LESSEQUAL
69080: IFTRUE 69084
69082: GO 69091
69084: POP
// StreamSibBomb ; end ;
69085: CALL 65329 0 0
69089: GO 69092
69091: POP
// end ;
69092: PPOPN 3
69094: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69095: LD_EXP 46
69099: PUSH
69100: LD_EXP 96
69104: AND
69105: IFFALSE 69261
69107: GO 69109
69109: DISABLE
69110: LD_INT 0
69112: PPUSH
69113: PPUSH
69114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69115: LD_ADDR_VAR 0 2
69119: PUSH
69120: LD_INT 81
69122: PUSH
69123: LD_OWVAR 2
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 2
69134: PUSH
69135: LD_INT 21
69137: PUSH
69138: LD_INT 1
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 21
69147: PUSH
69148: LD_INT 2
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: LIST
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PPUSH
69164: CALL_OW 69
69168: ST_TO_ADDR
// if not tmp then
69169: LD_VAR 0 2
69173: NOT
69174: IFFALSE 69178
// exit ;
69176: GO 69261
// p := 0 ;
69178: LD_ADDR_VAR 0 3
69182: PUSH
69183: LD_INT 0
69185: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69186: LD_INT 35
69188: PPUSH
69189: CALL_OW 67
// p := p + 1 ;
69193: LD_ADDR_VAR 0 3
69197: PUSH
69198: LD_VAR 0 3
69202: PUSH
69203: LD_INT 1
69205: PLUS
69206: ST_TO_ADDR
// for i in tmp do
69207: LD_ADDR_VAR 0 1
69211: PUSH
69212: LD_VAR 0 2
69216: PUSH
69217: FOR_IN
69218: IFFALSE 69249
// if GetLives ( i ) < 1000 then
69220: LD_VAR 0 1
69224: PPUSH
69225: CALL_OW 256
69229: PUSH
69230: LD_INT 1000
69232: LESS
69233: IFFALSE 69247
// SetLives ( i , 1000 ) ;
69235: LD_VAR 0 1
69239: PPUSH
69240: LD_INT 1000
69242: PPUSH
69243: CALL_OW 234
69247: GO 69217
69249: POP
69250: POP
// until p > 20 ;
69251: LD_VAR 0 3
69255: PUSH
69256: LD_INT 20
69258: GREATER
69259: IFFALSE 69186
// end ;
69261: PPOPN 3
69263: END
// every 0 0$1 trigger StreamModeActive and sTime do
69264: LD_EXP 46
69268: PUSH
69269: LD_EXP 97
69273: AND
69274: IFFALSE 69309
69276: GO 69278
69278: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
69279: LD_INT 28
69281: PPUSH
69282: LD_OWVAR 2
69286: PPUSH
69287: LD_INT 2
69289: PPUSH
69290: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
69294: LD_INT 30
69296: PPUSH
69297: LD_OWVAR 2
69301: PPUSH
69302: LD_INT 2
69304: PPUSH
69305: CALL_OW 322
// end ;
69309: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
69310: LD_EXP 46
69314: PUSH
69315: LD_EXP 98
69319: AND
69320: IFFALSE 69441
69322: GO 69324
69324: DISABLE
69325: LD_INT 0
69327: PPUSH
69328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69329: LD_ADDR_VAR 0 2
69333: PUSH
69334: LD_INT 22
69336: PUSH
69337: LD_OWVAR 2
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 21
69348: PUSH
69349: LD_INT 1
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 3
69358: PUSH
69359: LD_INT 23
69361: PUSH
69362: LD_INT 0
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: LIST
69377: PPUSH
69378: CALL_OW 69
69382: ST_TO_ADDR
// if not tmp then
69383: LD_VAR 0 2
69387: NOT
69388: IFFALSE 69392
// exit ;
69390: GO 69441
// for i in tmp do
69392: LD_ADDR_VAR 0 1
69396: PUSH
69397: LD_VAR 0 2
69401: PUSH
69402: FOR_IN
69403: IFFALSE 69439
// begin if Crawls ( i ) then
69405: LD_VAR 0 1
69409: PPUSH
69410: CALL_OW 318
69414: IFFALSE 69425
// ComWalk ( i ) ;
69416: LD_VAR 0 1
69420: PPUSH
69421: CALL_OW 138
// SetClass ( i , 2 ) ;
69425: LD_VAR 0 1
69429: PPUSH
69430: LD_INT 2
69432: PPUSH
69433: CALL_OW 336
// end ;
69437: GO 69402
69439: POP
69440: POP
// end ;
69441: PPOPN 2
69443: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69444: LD_EXP 46
69448: PUSH
69449: LD_EXP 99
69453: AND
69454: IFFALSE 69742
69456: GO 69458
69458: DISABLE
69459: LD_INT 0
69461: PPUSH
69462: PPUSH
69463: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69464: LD_OWVAR 2
69468: PPUSH
69469: LD_INT 9
69471: PPUSH
69472: LD_INT 1
69474: PPUSH
69475: LD_INT 1
69477: PPUSH
69478: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69482: LD_INT 9
69484: PPUSH
69485: LD_OWVAR 2
69489: PPUSH
69490: CALL_OW 343
// uc_side := 9 ;
69494: LD_ADDR_OWVAR 20
69498: PUSH
69499: LD_INT 9
69501: ST_TO_ADDR
// uc_nation := 2 ;
69502: LD_ADDR_OWVAR 21
69506: PUSH
69507: LD_INT 2
69509: ST_TO_ADDR
// hc_name := Dark Warrior ;
69510: LD_ADDR_OWVAR 26
69514: PUSH
69515: LD_STRING Dark Warrior
69517: ST_TO_ADDR
// hc_gallery :=  ;
69518: LD_ADDR_OWVAR 33
69522: PUSH
69523: LD_STRING 
69525: ST_TO_ADDR
// hc_noskilllimit := true ;
69526: LD_ADDR_OWVAR 76
69530: PUSH
69531: LD_INT 1
69533: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
69534: LD_ADDR_OWVAR 31
69538: PUSH
69539: LD_INT 30
69541: PUSH
69542: LD_INT 30
69544: PUSH
69545: LD_INT 30
69547: PUSH
69548: LD_INT 30
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: ST_TO_ADDR
// un := CreateHuman ;
69557: LD_ADDR_VAR 0 3
69561: PUSH
69562: CALL_OW 44
69566: ST_TO_ADDR
// hc_noskilllimit := false ;
69567: LD_ADDR_OWVAR 76
69571: PUSH
69572: LD_INT 0
69574: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69575: LD_VAR 0 3
69579: PPUSH
69580: LD_INT 1
69582: PPUSH
69583: CALL_OW 51
// ToLua ( playRanger() ) ;
69587: LD_STRING playRanger()
69589: PPUSH
69590: CALL_OW 559
// p := 0 ;
69594: LD_ADDR_VAR 0 2
69598: PUSH
69599: LD_INT 0
69601: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69602: LD_INT 35
69604: PPUSH
69605: CALL_OW 67
// p := p + 1 ;
69609: LD_ADDR_VAR 0 2
69613: PUSH
69614: LD_VAR 0 2
69618: PUSH
69619: LD_INT 1
69621: PLUS
69622: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
69623: LD_VAR 0 3
69627: PPUSH
69628: CALL_OW 256
69632: PUSH
69633: LD_INT 1000
69635: LESS
69636: IFFALSE 69650
// SetLives ( un , 1000 ) ;
69638: LD_VAR 0 3
69642: PPUSH
69643: LD_INT 1000
69645: PPUSH
69646: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
69650: LD_VAR 0 3
69654: PPUSH
69655: LD_INT 81
69657: PUSH
69658: LD_OWVAR 2
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 91
69669: PUSH
69670: LD_VAR 0 3
69674: PUSH
69675: LD_INT 30
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: LIST
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PPUSH
69687: CALL_OW 69
69691: PPUSH
69692: LD_VAR 0 3
69696: PPUSH
69697: CALL_OW 74
69701: PPUSH
69702: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
69706: LD_VAR 0 2
69710: PUSH
69711: LD_INT 80
69713: GREATER
69714: PUSH
69715: LD_VAR 0 3
69719: PPUSH
69720: CALL_OW 301
69724: OR
69725: IFFALSE 69602
// if un then
69727: LD_VAR 0 3
69731: IFFALSE 69742
// RemoveUnit ( un ) ;
69733: LD_VAR 0 3
69737: PPUSH
69738: CALL_OW 64
// end ;
69742: PPOPN 3
69744: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
69745: LD_EXP 100
69749: IFFALSE 69865
69751: GO 69753
69753: DISABLE
69754: LD_INT 0
69756: PPUSH
69757: PPUSH
69758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
69759: LD_ADDR_VAR 0 2
69763: PUSH
69764: LD_INT 81
69766: PUSH
69767: LD_OWVAR 2
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 21
69778: PUSH
69779: LD_INT 1
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PPUSH
69790: CALL_OW 69
69794: ST_TO_ADDR
// ToLua ( playComputer() ) ;
69795: LD_STRING playComputer()
69797: PPUSH
69798: CALL_OW 559
// if not tmp then
69802: LD_VAR 0 2
69806: NOT
69807: IFFALSE 69811
// exit ;
69809: GO 69865
// for i in tmp do
69811: LD_ADDR_VAR 0 1
69815: PUSH
69816: LD_VAR 0 2
69820: PUSH
69821: FOR_IN
69822: IFFALSE 69863
// for j := 1 to 4 do
69824: LD_ADDR_VAR 0 3
69828: PUSH
69829: DOUBLE
69830: LD_INT 1
69832: DEC
69833: ST_TO_ADDR
69834: LD_INT 4
69836: PUSH
69837: FOR_TO
69838: IFFALSE 69859
// SetSkill ( i , j , 10 ) ;
69840: LD_VAR 0 1
69844: PPUSH
69845: LD_VAR 0 3
69849: PPUSH
69850: LD_INT 10
69852: PPUSH
69853: CALL_OW 237
69857: GO 69837
69859: POP
69860: POP
69861: GO 69821
69863: POP
69864: POP
// end ;
69865: PPOPN 3
69867: END
// every 0 0$1 trigger s30 do var i , tmp ;
69868: LD_EXP 101
69872: IFFALSE 69941
69874: GO 69876
69876: DISABLE
69877: LD_INT 0
69879: PPUSH
69880: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69881: LD_ADDR_VAR 0 2
69885: PUSH
69886: LD_INT 22
69888: PUSH
69889: LD_OWVAR 2
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PPUSH
69898: CALL_OW 69
69902: ST_TO_ADDR
// if not tmp then
69903: LD_VAR 0 2
69907: NOT
69908: IFFALSE 69912
// exit ;
69910: GO 69941
// for i in tmp do
69912: LD_ADDR_VAR 0 1
69916: PUSH
69917: LD_VAR 0 2
69921: PUSH
69922: FOR_IN
69923: IFFALSE 69939
// SetLives ( i , 300 ) ;
69925: LD_VAR 0 1
69929: PPUSH
69930: LD_INT 300
69932: PPUSH
69933: CALL_OW 234
69937: GO 69922
69939: POP
69940: POP
// end ;
69941: PPOPN 2
69943: END
// every 0 0$1 trigger s60 do var i , tmp ;
69944: LD_EXP 102
69948: IFFALSE 70017
69950: GO 69952
69952: DISABLE
69953: LD_INT 0
69955: PPUSH
69956: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69957: LD_ADDR_VAR 0 2
69961: PUSH
69962: LD_INT 22
69964: PUSH
69965: LD_OWVAR 2
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PPUSH
69974: CALL_OW 69
69978: ST_TO_ADDR
// if not tmp then
69979: LD_VAR 0 2
69983: NOT
69984: IFFALSE 69988
// exit ;
69986: GO 70017
// for i in tmp do
69988: LD_ADDR_VAR 0 1
69992: PUSH
69993: LD_VAR 0 2
69997: PUSH
69998: FOR_IN
69999: IFFALSE 70015
// SetLives ( i , 600 ) ;
70001: LD_VAR 0 1
70005: PPUSH
70006: LD_INT 600
70008: PPUSH
70009: CALL_OW 234
70013: GO 69998
70015: POP
70016: POP
// end ;
70017: PPOPN 2
70019: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70020: LD_INT 0
70022: PPUSH
// case cmd of 301 :
70023: LD_VAR 0 1
70027: PUSH
70028: LD_INT 301
70030: DOUBLE
70031: EQUAL
70032: IFTRUE 70036
70034: GO 70068
70036: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70037: LD_VAR 0 6
70041: PPUSH
70042: LD_VAR 0 7
70046: PPUSH
70047: LD_VAR 0 8
70051: PPUSH
70052: LD_VAR 0 4
70056: PPUSH
70057: LD_VAR 0 5
70061: PPUSH
70062: CALL 71277 0 5
70066: GO 70189
70068: LD_INT 302
70070: DOUBLE
70071: EQUAL
70072: IFTRUE 70076
70074: GO 70113
70076: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
70077: LD_VAR 0 6
70081: PPUSH
70082: LD_VAR 0 7
70086: PPUSH
70087: LD_VAR 0 8
70091: PPUSH
70092: LD_VAR 0 9
70096: PPUSH
70097: LD_VAR 0 4
70101: PPUSH
70102: LD_VAR 0 5
70106: PPUSH
70107: CALL 71368 0 6
70111: GO 70189
70113: LD_INT 303
70115: DOUBLE
70116: EQUAL
70117: IFTRUE 70121
70119: GO 70158
70121: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70122: LD_VAR 0 6
70126: PPUSH
70127: LD_VAR 0 7
70131: PPUSH
70132: LD_VAR 0 8
70136: PPUSH
70137: LD_VAR 0 9
70141: PPUSH
70142: LD_VAR 0 4
70146: PPUSH
70147: LD_VAR 0 5
70151: PPUSH
70152: CALL 70194 0 6
70156: GO 70189
70158: LD_INT 304
70160: DOUBLE
70161: EQUAL
70162: IFTRUE 70166
70164: GO 70188
70166: POP
// hHackTeleport ( unit , x , y ) ; end ;
70167: LD_VAR 0 2
70171: PPUSH
70172: LD_VAR 0 4
70176: PPUSH
70177: LD_VAR 0 5
70181: PPUSH
70182: CALL 71961 0 3
70186: GO 70189
70188: POP
// end ;
70189: LD_VAR 0 12
70193: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
70194: LD_INT 0
70196: PPUSH
70197: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
70198: LD_VAR 0 1
70202: PUSH
70203: LD_INT 1
70205: LESS
70206: PUSH
70207: LD_VAR 0 1
70211: PUSH
70212: LD_INT 3
70214: GREATER
70215: OR
70216: PUSH
70217: LD_VAR 0 5
70221: PPUSH
70222: LD_VAR 0 6
70226: PPUSH
70227: CALL_OW 428
70231: OR
70232: IFFALSE 70236
// exit ;
70234: GO 70964
// uc_side := your_side ;
70236: LD_ADDR_OWVAR 20
70240: PUSH
70241: LD_OWVAR 2
70245: ST_TO_ADDR
// uc_nation := nation ;
70246: LD_ADDR_OWVAR 21
70250: PUSH
70251: LD_VAR 0 1
70255: ST_TO_ADDR
// bc_level = 1 ;
70256: LD_ADDR_OWVAR 43
70260: PUSH
70261: LD_INT 1
70263: ST_TO_ADDR
// case btype of 1 :
70264: LD_VAR 0 2
70268: PUSH
70269: LD_INT 1
70271: DOUBLE
70272: EQUAL
70273: IFTRUE 70277
70275: GO 70288
70277: POP
// bc_type := b_depot ; 2 :
70278: LD_ADDR_OWVAR 42
70282: PUSH
70283: LD_INT 0
70285: ST_TO_ADDR
70286: GO 70908
70288: LD_INT 2
70290: DOUBLE
70291: EQUAL
70292: IFTRUE 70296
70294: GO 70307
70296: POP
// bc_type := b_warehouse ; 3 :
70297: LD_ADDR_OWVAR 42
70301: PUSH
70302: LD_INT 1
70304: ST_TO_ADDR
70305: GO 70908
70307: LD_INT 3
70309: DOUBLE
70310: EQUAL
70311: IFTRUE 70315
70313: GO 70326
70315: POP
// bc_type := b_lab ; 4 .. 9 :
70316: LD_ADDR_OWVAR 42
70320: PUSH
70321: LD_INT 6
70323: ST_TO_ADDR
70324: GO 70908
70326: LD_INT 4
70328: DOUBLE
70329: GREATEREQUAL
70330: IFFALSE 70338
70332: LD_INT 9
70334: DOUBLE
70335: LESSEQUAL
70336: IFTRUE 70340
70338: GO 70400
70340: POP
// begin bc_type := b_lab_half ;
70341: LD_ADDR_OWVAR 42
70345: PUSH
70346: LD_INT 7
70348: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
70349: LD_ADDR_OWVAR 44
70353: PUSH
70354: LD_INT 10
70356: PUSH
70357: LD_INT 11
70359: PUSH
70360: LD_INT 12
70362: PUSH
70363: LD_INT 15
70365: PUSH
70366: LD_INT 14
70368: PUSH
70369: LD_INT 13
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: PUSH
70380: LD_VAR 0 2
70384: PUSH
70385: LD_INT 3
70387: MINUS
70388: ARRAY
70389: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
70390: LD_ADDR_OWVAR 45
70394: PUSH
70395: LD_INT 9
70397: ST_TO_ADDR
// end ; 10 .. 13 :
70398: GO 70908
70400: LD_INT 10
70402: DOUBLE
70403: GREATEREQUAL
70404: IFFALSE 70412
70406: LD_INT 13
70408: DOUBLE
70409: LESSEQUAL
70410: IFTRUE 70414
70412: GO 70491
70414: POP
// begin bc_type := b_lab_full ;
70415: LD_ADDR_OWVAR 42
70419: PUSH
70420: LD_INT 8
70422: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
70423: LD_ADDR_OWVAR 44
70427: PUSH
70428: LD_INT 10
70430: PUSH
70431: LD_INT 12
70433: PUSH
70434: LD_INT 14
70436: PUSH
70437: LD_INT 13
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: PUSH
70446: LD_VAR 0 2
70450: PUSH
70451: LD_INT 9
70453: MINUS
70454: ARRAY
70455: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
70456: LD_ADDR_OWVAR 45
70460: PUSH
70461: LD_INT 11
70463: PUSH
70464: LD_INT 15
70466: PUSH
70467: LD_INT 12
70469: PUSH
70470: LD_INT 15
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: PUSH
70479: LD_VAR 0 2
70483: PUSH
70484: LD_INT 9
70486: MINUS
70487: ARRAY
70488: ST_TO_ADDR
// end ; 14 :
70489: GO 70908
70491: LD_INT 14
70493: DOUBLE
70494: EQUAL
70495: IFTRUE 70499
70497: GO 70510
70499: POP
// bc_type := b_workshop ; 15 :
70500: LD_ADDR_OWVAR 42
70504: PUSH
70505: LD_INT 2
70507: ST_TO_ADDR
70508: GO 70908
70510: LD_INT 15
70512: DOUBLE
70513: EQUAL
70514: IFTRUE 70518
70516: GO 70529
70518: POP
// bc_type := b_factory ; 16 :
70519: LD_ADDR_OWVAR 42
70523: PUSH
70524: LD_INT 3
70526: ST_TO_ADDR
70527: GO 70908
70529: LD_INT 16
70531: DOUBLE
70532: EQUAL
70533: IFTRUE 70537
70535: GO 70548
70537: POP
// bc_type := b_ext_gun ; 17 :
70538: LD_ADDR_OWVAR 42
70542: PUSH
70543: LD_INT 17
70545: ST_TO_ADDR
70546: GO 70908
70548: LD_INT 17
70550: DOUBLE
70551: EQUAL
70552: IFTRUE 70556
70554: GO 70584
70556: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
70557: LD_ADDR_OWVAR 42
70561: PUSH
70562: LD_INT 19
70564: PUSH
70565: LD_INT 23
70567: PUSH
70568: LD_INT 19
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: LIST
70575: PUSH
70576: LD_VAR 0 1
70580: ARRAY
70581: ST_TO_ADDR
70582: GO 70908
70584: LD_INT 18
70586: DOUBLE
70587: EQUAL
70588: IFTRUE 70592
70590: GO 70603
70592: POP
// bc_type := b_ext_radar ; 19 :
70593: LD_ADDR_OWVAR 42
70597: PUSH
70598: LD_INT 20
70600: ST_TO_ADDR
70601: GO 70908
70603: LD_INT 19
70605: DOUBLE
70606: EQUAL
70607: IFTRUE 70611
70609: GO 70622
70611: POP
// bc_type := b_ext_radio ; 20 :
70612: LD_ADDR_OWVAR 42
70616: PUSH
70617: LD_INT 22
70619: ST_TO_ADDR
70620: GO 70908
70622: LD_INT 20
70624: DOUBLE
70625: EQUAL
70626: IFTRUE 70630
70628: GO 70641
70630: POP
// bc_type := b_ext_siberium ; 21 :
70631: LD_ADDR_OWVAR 42
70635: PUSH
70636: LD_INT 21
70638: ST_TO_ADDR
70639: GO 70908
70641: LD_INT 21
70643: DOUBLE
70644: EQUAL
70645: IFTRUE 70649
70647: GO 70660
70649: POP
// bc_type := b_ext_computer ; 22 :
70650: LD_ADDR_OWVAR 42
70654: PUSH
70655: LD_INT 24
70657: ST_TO_ADDR
70658: GO 70908
70660: LD_INT 22
70662: DOUBLE
70663: EQUAL
70664: IFTRUE 70668
70666: GO 70679
70668: POP
// bc_type := b_ext_track ; 23 :
70669: LD_ADDR_OWVAR 42
70673: PUSH
70674: LD_INT 16
70676: ST_TO_ADDR
70677: GO 70908
70679: LD_INT 23
70681: DOUBLE
70682: EQUAL
70683: IFTRUE 70687
70685: GO 70698
70687: POP
// bc_type := b_ext_laser ; 24 :
70688: LD_ADDR_OWVAR 42
70692: PUSH
70693: LD_INT 25
70695: ST_TO_ADDR
70696: GO 70908
70698: LD_INT 24
70700: DOUBLE
70701: EQUAL
70702: IFTRUE 70706
70704: GO 70717
70706: POP
// bc_type := b_control_tower ; 25 :
70707: LD_ADDR_OWVAR 42
70711: PUSH
70712: LD_INT 36
70714: ST_TO_ADDR
70715: GO 70908
70717: LD_INT 25
70719: DOUBLE
70720: EQUAL
70721: IFTRUE 70725
70723: GO 70736
70725: POP
// bc_type := b_breastwork ; 26 :
70726: LD_ADDR_OWVAR 42
70730: PUSH
70731: LD_INT 31
70733: ST_TO_ADDR
70734: GO 70908
70736: LD_INT 26
70738: DOUBLE
70739: EQUAL
70740: IFTRUE 70744
70742: GO 70755
70744: POP
// bc_type := b_bunker ; 27 :
70745: LD_ADDR_OWVAR 42
70749: PUSH
70750: LD_INT 32
70752: ST_TO_ADDR
70753: GO 70908
70755: LD_INT 27
70757: DOUBLE
70758: EQUAL
70759: IFTRUE 70763
70761: GO 70774
70763: POP
// bc_type := b_turret ; 28 :
70764: LD_ADDR_OWVAR 42
70768: PUSH
70769: LD_INT 33
70771: ST_TO_ADDR
70772: GO 70908
70774: LD_INT 28
70776: DOUBLE
70777: EQUAL
70778: IFTRUE 70782
70780: GO 70793
70782: POP
// bc_type := b_armoury ; 29 :
70783: LD_ADDR_OWVAR 42
70787: PUSH
70788: LD_INT 4
70790: ST_TO_ADDR
70791: GO 70908
70793: LD_INT 29
70795: DOUBLE
70796: EQUAL
70797: IFTRUE 70801
70799: GO 70812
70801: POP
// bc_type := b_barracks ; 30 :
70802: LD_ADDR_OWVAR 42
70806: PUSH
70807: LD_INT 5
70809: ST_TO_ADDR
70810: GO 70908
70812: LD_INT 30
70814: DOUBLE
70815: EQUAL
70816: IFTRUE 70820
70818: GO 70831
70820: POP
// bc_type := b_solar_power ; 31 :
70821: LD_ADDR_OWVAR 42
70825: PUSH
70826: LD_INT 27
70828: ST_TO_ADDR
70829: GO 70908
70831: LD_INT 31
70833: DOUBLE
70834: EQUAL
70835: IFTRUE 70839
70837: GO 70850
70839: POP
// bc_type := b_oil_power ; 32 :
70840: LD_ADDR_OWVAR 42
70844: PUSH
70845: LD_INT 26
70847: ST_TO_ADDR
70848: GO 70908
70850: LD_INT 32
70852: DOUBLE
70853: EQUAL
70854: IFTRUE 70858
70856: GO 70869
70858: POP
// bc_type := b_siberite_power ; 33 :
70859: LD_ADDR_OWVAR 42
70863: PUSH
70864: LD_INT 28
70866: ST_TO_ADDR
70867: GO 70908
70869: LD_INT 33
70871: DOUBLE
70872: EQUAL
70873: IFTRUE 70877
70875: GO 70888
70877: POP
// bc_type := b_oil_mine ; 34 :
70878: LD_ADDR_OWVAR 42
70882: PUSH
70883: LD_INT 29
70885: ST_TO_ADDR
70886: GO 70908
70888: LD_INT 34
70890: DOUBLE
70891: EQUAL
70892: IFTRUE 70896
70894: GO 70907
70896: POP
// bc_type := b_siberite_mine ; end ;
70897: LD_ADDR_OWVAR 42
70901: PUSH
70902: LD_INT 30
70904: ST_TO_ADDR
70905: GO 70908
70907: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
70908: LD_ADDR_VAR 0 8
70912: PUSH
70913: LD_VAR 0 5
70917: PPUSH
70918: LD_VAR 0 6
70922: PPUSH
70923: LD_VAR 0 3
70927: PPUSH
70928: CALL_OW 47
70932: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
70933: LD_OWVAR 42
70937: PUSH
70938: LD_INT 32
70940: PUSH
70941: LD_INT 33
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: IN
70948: IFFALSE 70964
// PlaceWeaponTurret ( b , weapon ) ;
70950: LD_VAR 0 8
70954: PPUSH
70955: LD_VAR 0 4
70959: PPUSH
70960: CALL_OW 431
// end ;
70964: LD_VAR 0 7
70968: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
70969: LD_INT 0
70971: PPUSH
70972: PPUSH
70973: PPUSH
70974: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70975: LD_ADDR_VAR 0 4
70979: PUSH
70980: LD_INT 22
70982: PUSH
70983: LD_OWVAR 2
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: LD_INT 2
70994: PUSH
70995: LD_INT 30
70997: PUSH
70998: LD_INT 0
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: LD_INT 30
71007: PUSH
71008: LD_INT 1
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: LIST
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PPUSH
71024: CALL_OW 69
71028: ST_TO_ADDR
// if not tmp then
71029: LD_VAR 0 4
71033: NOT
71034: IFFALSE 71038
// exit ;
71036: GO 71097
// for i in tmp do
71038: LD_ADDR_VAR 0 2
71042: PUSH
71043: LD_VAR 0 4
71047: PUSH
71048: FOR_IN
71049: IFFALSE 71095
// for j = 1 to 3 do
71051: LD_ADDR_VAR 0 3
71055: PUSH
71056: DOUBLE
71057: LD_INT 1
71059: DEC
71060: ST_TO_ADDR
71061: LD_INT 3
71063: PUSH
71064: FOR_TO
71065: IFFALSE 71091
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
71067: LD_VAR 0 2
71071: PPUSH
71072: CALL_OW 274
71076: PPUSH
71077: LD_VAR 0 3
71081: PPUSH
71082: LD_INT 99999
71084: PPUSH
71085: CALL_OW 277
71089: GO 71064
71091: POP
71092: POP
71093: GO 71048
71095: POP
71096: POP
// end ;
71097: LD_VAR 0 1
71101: RET
// export function hHackSetLevel10 ; var i , j ; begin
71102: LD_INT 0
71104: PPUSH
71105: PPUSH
71106: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71107: LD_ADDR_VAR 0 2
71111: PUSH
71112: LD_INT 21
71114: PUSH
71115: LD_INT 1
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PPUSH
71122: CALL_OW 69
71126: PUSH
71127: FOR_IN
71128: IFFALSE 71180
// if IsSelected ( i ) then
71130: LD_VAR 0 2
71134: PPUSH
71135: CALL_OW 306
71139: IFFALSE 71178
// begin for j := 1 to 4 do
71141: LD_ADDR_VAR 0 3
71145: PUSH
71146: DOUBLE
71147: LD_INT 1
71149: DEC
71150: ST_TO_ADDR
71151: LD_INT 4
71153: PUSH
71154: FOR_TO
71155: IFFALSE 71176
// SetSkill ( i , j , 10 ) ;
71157: LD_VAR 0 2
71161: PPUSH
71162: LD_VAR 0 3
71166: PPUSH
71167: LD_INT 10
71169: PPUSH
71170: CALL_OW 237
71174: GO 71154
71176: POP
71177: POP
// end ;
71178: GO 71127
71180: POP
71181: POP
// end ;
71182: LD_VAR 0 1
71186: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
71187: LD_INT 0
71189: PPUSH
71190: PPUSH
71191: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
71192: LD_ADDR_VAR 0 2
71196: PUSH
71197: LD_INT 22
71199: PUSH
71200: LD_OWVAR 2
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 21
71211: PUSH
71212: LD_INT 1
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PPUSH
71223: CALL_OW 69
71227: PUSH
71228: FOR_IN
71229: IFFALSE 71270
// begin for j := 1 to 4 do
71231: LD_ADDR_VAR 0 3
71235: PUSH
71236: DOUBLE
71237: LD_INT 1
71239: DEC
71240: ST_TO_ADDR
71241: LD_INT 4
71243: PUSH
71244: FOR_TO
71245: IFFALSE 71266
// SetSkill ( i , j , 10 ) ;
71247: LD_VAR 0 2
71251: PPUSH
71252: LD_VAR 0 3
71256: PPUSH
71257: LD_INT 10
71259: PPUSH
71260: CALL_OW 237
71264: GO 71244
71266: POP
71267: POP
// end ;
71268: GO 71228
71270: POP
71271: POP
// end ;
71272: LD_VAR 0 1
71276: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
71277: LD_INT 0
71279: PPUSH
// uc_side := your_side ;
71280: LD_ADDR_OWVAR 20
71284: PUSH
71285: LD_OWVAR 2
71289: ST_TO_ADDR
// uc_nation := nation ;
71290: LD_ADDR_OWVAR 21
71294: PUSH
71295: LD_VAR 0 1
71299: ST_TO_ADDR
// InitHc ;
71300: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
71304: LD_INT 0
71306: PPUSH
71307: LD_VAR 0 2
71311: PPUSH
71312: LD_VAR 0 3
71316: PPUSH
71317: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
71321: LD_VAR 0 4
71325: PPUSH
71326: LD_VAR 0 5
71330: PPUSH
71331: CALL_OW 428
71335: PUSH
71336: LD_INT 0
71338: EQUAL
71339: IFFALSE 71363
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
71341: CALL_OW 44
71345: PPUSH
71346: LD_VAR 0 4
71350: PPUSH
71351: LD_VAR 0 5
71355: PPUSH
71356: LD_INT 1
71358: PPUSH
71359: CALL_OW 48
// end ;
71363: LD_VAR 0 6
71367: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
71368: LD_INT 0
71370: PPUSH
71371: PPUSH
// uc_side := your_side ;
71372: LD_ADDR_OWVAR 20
71376: PUSH
71377: LD_OWVAR 2
71381: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
71382: LD_VAR 0 1
71386: PUSH
71387: LD_INT 1
71389: PUSH
71390: LD_INT 2
71392: PUSH
71393: LD_INT 3
71395: PUSH
71396: LD_INT 4
71398: PUSH
71399: LD_INT 5
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: IN
71409: IFFALSE 71421
// uc_nation := nation_american else
71411: LD_ADDR_OWVAR 21
71415: PUSH
71416: LD_INT 1
71418: ST_TO_ADDR
71419: GO 71464
// if chassis in [ 11 , 12 , 13 , 14 ] then
71421: LD_VAR 0 1
71425: PUSH
71426: LD_INT 11
71428: PUSH
71429: LD_INT 12
71431: PUSH
71432: LD_INT 13
71434: PUSH
71435: LD_INT 14
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: IN
71444: IFFALSE 71456
// uc_nation := nation_arabian else
71446: LD_ADDR_OWVAR 21
71450: PUSH
71451: LD_INT 2
71453: ST_TO_ADDR
71454: GO 71464
// uc_nation := nation_russian ;
71456: LD_ADDR_OWVAR 21
71460: PUSH
71461: LD_INT 3
71463: ST_TO_ADDR
// vc_chassis := chassis ;
71464: LD_ADDR_OWVAR 37
71468: PUSH
71469: LD_VAR 0 1
71473: ST_TO_ADDR
// vc_engine := engine ;
71474: LD_ADDR_OWVAR 39
71478: PUSH
71479: LD_VAR 0 2
71483: ST_TO_ADDR
// vc_control := control ;
71484: LD_ADDR_OWVAR 38
71488: PUSH
71489: LD_VAR 0 3
71493: ST_TO_ADDR
// vc_weapon := weapon ;
71494: LD_ADDR_OWVAR 40
71498: PUSH
71499: LD_VAR 0 4
71503: ST_TO_ADDR
// un := CreateVehicle ;
71504: LD_ADDR_VAR 0 8
71508: PUSH
71509: CALL_OW 45
71513: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
71514: LD_VAR 0 8
71518: PPUSH
71519: LD_INT 0
71521: PPUSH
71522: LD_INT 5
71524: PPUSH
71525: CALL_OW 12
71529: PPUSH
71530: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
71534: LD_VAR 0 8
71538: PPUSH
71539: LD_VAR 0 5
71543: PPUSH
71544: LD_VAR 0 6
71548: PPUSH
71549: LD_INT 1
71551: PPUSH
71552: CALL_OW 48
// end ;
71556: LD_VAR 0 7
71560: RET
// export hInvincible ; every 1 do
71561: GO 71563
71563: DISABLE
// hInvincible := [ ] ;
71564: LD_ADDR_EXP 103
71568: PUSH
71569: EMPTY
71570: ST_TO_ADDR
71571: END
// every 10 do var i ;
71572: GO 71574
71574: DISABLE
71575: LD_INT 0
71577: PPUSH
// begin enable ;
71578: ENABLE
// if not hInvincible then
71579: LD_EXP 103
71583: NOT
71584: IFFALSE 71588
// exit ;
71586: GO 71632
// for i in hInvincible do
71588: LD_ADDR_VAR 0 1
71592: PUSH
71593: LD_EXP 103
71597: PUSH
71598: FOR_IN
71599: IFFALSE 71630
// if GetLives ( i ) < 1000 then
71601: LD_VAR 0 1
71605: PPUSH
71606: CALL_OW 256
71610: PUSH
71611: LD_INT 1000
71613: LESS
71614: IFFALSE 71628
// SetLives ( i , 1000 ) ;
71616: LD_VAR 0 1
71620: PPUSH
71621: LD_INT 1000
71623: PPUSH
71624: CALL_OW 234
71628: GO 71598
71630: POP
71631: POP
// end ;
71632: PPOPN 1
71634: END
// export function hHackInvincible ; var i ; begin
71635: LD_INT 0
71637: PPUSH
71638: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
71639: LD_ADDR_VAR 0 2
71643: PUSH
71644: LD_INT 2
71646: PUSH
71647: LD_INT 21
71649: PUSH
71650: LD_INT 1
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 21
71659: PUSH
71660: LD_INT 2
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: LIST
71671: PPUSH
71672: CALL_OW 69
71676: PUSH
71677: FOR_IN
71678: IFFALSE 71739
// if IsSelected ( i ) then
71680: LD_VAR 0 2
71684: PPUSH
71685: CALL_OW 306
71689: IFFALSE 71737
// begin if i in hInvincible then
71691: LD_VAR 0 2
71695: PUSH
71696: LD_EXP 103
71700: IN
71701: IFFALSE 71721
// hInvincible := hInvincible diff i else
71703: LD_ADDR_EXP 103
71707: PUSH
71708: LD_EXP 103
71712: PUSH
71713: LD_VAR 0 2
71717: DIFF
71718: ST_TO_ADDR
71719: GO 71737
// hInvincible := hInvincible union i ;
71721: LD_ADDR_EXP 103
71725: PUSH
71726: LD_EXP 103
71730: PUSH
71731: LD_VAR 0 2
71735: UNION
71736: ST_TO_ADDR
// end ;
71737: GO 71677
71739: POP
71740: POP
// end ;
71741: LD_VAR 0 1
71745: RET
// export function hHackInvisible ; var i , j ; begin
71746: LD_INT 0
71748: PPUSH
71749: PPUSH
71750: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71751: LD_ADDR_VAR 0 2
71755: PUSH
71756: LD_INT 21
71758: PUSH
71759: LD_INT 1
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PPUSH
71766: CALL_OW 69
71770: PUSH
71771: FOR_IN
71772: IFFALSE 71796
// if IsSelected ( i ) then
71774: LD_VAR 0 2
71778: PPUSH
71779: CALL_OW 306
71783: IFFALSE 71794
// ComForceInvisible ( i ) ;
71785: LD_VAR 0 2
71789: PPUSH
71790: CALL_OW 496
71794: GO 71771
71796: POP
71797: POP
// end ;
71798: LD_VAR 0 1
71802: RET
// export function hHackChangeYourSide ; begin
71803: LD_INT 0
71805: PPUSH
// if your_side = 8 then
71806: LD_OWVAR 2
71810: PUSH
71811: LD_INT 8
71813: EQUAL
71814: IFFALSE 71826
// your_side := 0 else
71816: LD_ADDR_OWVAR 2
71820: PUSH
71821: LD_INT 0
71823: ST_TO_ADDR
71824: GO 71840
// your_side := your_side + 1 ;
71826: LD_ADDR_OWVAR 2
71830: PUSH
71831: LD_OWVAR 2
71835: PUSH
71836: LD_INT 1
71838: PLUS
71839: ST_TO_ADDR
// end ;
71840: LD_VAR 0 1
71844: RET
// export function hHackChangeUnitSide ; var i , j ; begin
71845: LD_INT 0
71847: PPUSH
71848: PPUSH
71849: PPUSH
// for i in all_units do
71850: LD_ADDR_VAR 0 2
71854: PUSH
71855: LD_OWVAR 3
71859: PUSH
71860: FOR_IN
71861: IFFALSE 71939
// if IsSelected ( i ) then
71863: LD_VAR 0 2
71867: PPUSH
71868: CALL_OW 306
71872: IFFALSE 71937
// begin j := GetSide ( i ) ;
71874: LD_ADDR_VAR 0 3
71878: PUSH
71879: LD_VAR 0 2
71883: PPUSH
71884: CALL_OW 255
71888: ST_TO_ADDR
// if j = 8 then
71889: LD_VAR 0 3
71893: PUSH
71894: LD_INT 8
71896: EQUAL
71897: IFFALSE 71909
// j := 0 else
71899: LD_ADDR_VAR 0 3
71903: PUSH
71904: LD_INT 0
71906: ST_TO_ADDR
71907: GO 71923
// j := j + 1 ;
71909: LD_ADDR_VAR 0 3
71913: PUSH
71914: LD_VAR 0 3
71918: PUSH
71919: LD_INT 1
71921: PLUS
71922: ST_TO_ADDR
// SetSide ( i , j ) ;
71923: LD_VAR 0 2
71927: PPUSH
71928: LD_VAR 0 3
71932: PPUSH
71933: CALL_OW 235
// end ;
71937: GO 71860
71939: POP
71940: POP
// end ;
71941: LD_VAR 0 1
71945: RET
// export function hHackFog ; begin
71946: LD_INT 0
71948: PPUSH
// FogOff ( true ) ;
71949: LD_INT 1
71951: PPUSH
71952: CALL_OW 344
// end ;
71956: LD_VAR 0 1
71960: RET
// export function hHackTeleport ( unit , x , y ) ; begin
71961: LD_INT 0
71963: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
71964: LD_VAR 0 1
71968: PPUSH
71969: LD_VAR 0 2
71973: PPUSH
71974: LD_VAR 0 3
71978: PPUSH
71979: LD_INT 1
71981: PPUSH
71982: LD_INT 1
71984: PPUSH
71985: CALL_OW 483
// CenterOnXY ( x , y ) ;
71989: LD_VAR 0 2
71993: PPUSH
71994: LD_VAR 0 3
71998: PPUSH
71999: CALL_OW 84
// end ;
72003: LD_VAR 0 4
72007: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72008: LD_INT 0
72010: PPUSH
72011: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72012: LD_VAR 0 1
72016: NOT
72017: PUSH
72018: LD_VAR 0 2
72022: PPUSH
72023: LD_VAR 0 3
72027: PPUSH
72028: CALL_OW 488
72032: NOT
72033: OR
72034: PUSH
72035: LD_VAR 0 1
72039: PPUSH
72040: CALL_OW 266
72044: PUSH
72045: LD_INT 3
72047: NONEQUAL
72048: PUSH
72049: LD_VAR 0 1
72053: PPUSH
72054: CALL_OW 247
72058: PUSH
72059: LD_INT 1
72061: EQUAL
72062: NOT
72063: AND
72064: OR
72065: IFFALSE 72069
// exit ;
72067: GO 72218
// if GetType ( factory ) = unit_human then
72069: LD_VAR 0 1
72073: PPUSH
72074: CALL_OW 247
72078: PUSH
72079: LD_INT 1
72081: EQUAL
72082: IFFALSE 72099
// factory := IsInUnit ( factory ) ;
72084: LD_ADDR_VAR 0 1
72088: PUSH
72089: LD_VAR 0 1
72093: PPUSH
72094: CALL_OW 310
72098: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72099: LD_VAR 0 1
72103: PPUSH
72104: CALL_OW 266
72108: PUSH
72109: LD_INT 3
72111: NONEQUAL
72112: IFFALSE 72116
// exit ;
72114: GO 72218
// if HexInfo ( x , y ) = factory then
72116: LD_VAR 0 2
72120: PPUSH
72121: LD_VAR 0 3
72125: PPUSH
72126: CALL_OW 428
72130: PUSH
72131: LD_VAR 0 1
72135: EQUAL
72136: IFFALSE 72163
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72138: LD_ADDR_EXP 104
72142: PUSH
72143: LD_EXP 104
72147: PPUSH
72148: LD_VAR 0 1
72152: PPUSH
72153: LD_INT 0
72155: PPUSH
72156: CALL_OW 1
72160: ST_TO_ADDR
72161: GO 72214
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72163: LD_ADDR_EXP 104
72167: PUSH
72168: LD_EXP 104
72172: PPUSH
72173: LD_VAR 0 1
72177: PPUSH
72178: LD_VAR 0 1
72182: PPUSH
72183: CALL_OW 255
72187: PUSH
72188: LD_VAR 0 1
72192: PUSH
72193: LD_VAR 0 2
72197: PUSH
72198: LD_VAR 0 3
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: PPUSH
72209: CALL_OW 1
72213: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72214: CALL 72223 0 0
// end ;
72218: LD_VAR 0 4
72222: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
72223: LD_INT 0
72225: PPUSH
72226: PPUSH
72227: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72228: LD_STRING resetFactoryWaypoint();
72230: PPUSH
72231: CALL_OW 559
// if factoryWaypoints then
72235: LD_EXP 104
72239: IFFALSE 72365
// begin list := PrepareArray ( factoryWaypoints ) ;
72241: LD_ADDR_VAR 0 3
72245: PUSH
72246: LD_EXP 104
72250: PPUSH
72251: CALL 56178 0 1
72255: ST_TO_ADDR
// for i := 1 to list do
72256: LD_ADDR_VAR 0 2
72260: PUSH
72261: DOUBLE
72262: LD_INT 1
72264: DEC
72265: ST_TO_ADDR
72266: LD_VAR 0 3
72270: PUSH
72271: FOR_TO
72272: IFFALSE 72363
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72274: LD_STRING setFactoryWaypointXY(
72276: PUSH
72277: LD_VAR 0 3
72281: PUSH
72282: LD_VAR 0 2
72286: ARRAY
72287: PUSH
72288: LD_INT 1
72290: ARRAY
72291: STR
72292: PUSH
72293: LD_STRING ,
72295: STR
72296: PUSH
72297: LD_VAR 0 3
72301: PUSH
72302: LD_VAR 0 2
72306: ARRAY
72307: PUSH
72308: LD_INT 2
72310: ARRAY
72311: STR
72312: PUSH
72313: LD_STRING ,
72315: STR
72316: PUSH
72317: LD_VAR 0 3
72321: PUSH
72322: LD_VAR 0 2
72326: ARRAY
72327: PUSH
72328: LD_INT 3
72330: ARRAY
72331: STR
72332: PUSH
72333: LD_STRING ,
72335: STR
72336: PUSH
72337: LD_VAR 0 3
72341: PUSH
72342: LD_VAR 0 2
72346: ARRAY
72347: PUSH
72348: LD_INT 4
72350: ARRAY
72351: STR
72352: PUSH
72353: LD_STRING )
72355: STR
72356: PPUSH
72357: CALL_OW 559
72361: GO 72271
72363: POP
72364: POP
// end ; end ;
72365: LD_VAR 0 1
72369: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
72370: LD_INT 0
72372: PPUSH
// if HexInfo ( x , y ) = warehouse then
72373: LD_VAR 0 2
72377: PPUSH
72378: LD_VAR 0 3
72382: PPUSH
72383: CALL_OW 428
72387: PUSH
72388: LD_VAR 0 1
72392: EQUAL
72393: IFFALSE 72420
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
72395: LD_ADDR_EXP 105
72399: PUSH
72400: LD_EXP 105
72404: PPUSH
72405: LD_VAR 0 1
72409: PPUSH
72410: LD_INT 0
72412: PPUSH
72413: CALL_OW 1
72417: ST_TO_ADDR
72418: GO 72471
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
72420: LD_ADDR_EXP 105
72424: PUSH
72425: LD_EXP 105
72429: PPUSH
72430: LD_VAR 0 1
72434: PPUSH
72435: LD_VAR 0 1
72439: PPUSH
72440: CALL_OW 255
72444: PUSH
72445: LD_VAR 0 1
72449: PUSH
72450: LD_VAR 0 2
72454: PUSH
72455: LD_VAR 0 3
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: PPUSH
72466: CALL_OW 1
72470: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
72471: CALL 72480 0 0
// end ;
72475: LD_VAR 0 4
72479: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
72480: LD_INT 0
72482: PPUSH
72483: PPUSH
72484: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
72485: LD_STRING resetWarehouseGatheringPoints();
72487: PPUSH
72488: CALL_OW 559
// if warehouseGatheringPoints then
72492: LD_EXP 105
72496: IFFALSE 72622
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
72498: LD_ADDR_VAR 0 3
72502: PUSH
72503: LD_EXP 105
72507: PPUSH
72508: CALL 56178 0 1
72512: ST_TO_ADDR
// for i := 1 to list do
72513: LD_ADDR_VAR 0 2
72517: PUSH
72518: DOUBLE
72519: LD_INT 1
72521: DEC
72522: ST_TO_ADDR
72523: LD_VAR 0 3
72527: PUSH
72528: FOR_TO
72529: IFFALSE 72620
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72531: LD_STRING setWarehouseGatheringPointXY(
72533: PUSH
72534: LD_VAR 0 3
72538: PUSH
72539: LD_VAR 0 2
72543: ARRAY
72544: PUSH
72545: LD_INT 1
72547: ARRAY
72548: STR
72549: PUSH
72550: LD_STRING ,
72552: STR
72553: PUSH
72554: LD_VAR 0 3
72558: PUSH
72559: LD_VAR 0 2
72563: ARRAY
72564: PUSH
72565: LD_INT 2
72567: ARRAY
72568: STR
72569: PUSH
72570: LD_STRING ,
72572: STR
72573: PUSH
72574: LD_VAR 0 3
72578: PUSH
72579: LD_VAR 0 2
72583: ARRAY
72584: PUSH
72585: LD_INT 3
72587: ARRAY
72588: STR
72589: PUSH
72590: LD_STRING ,
72592: STR
72593: PUSH
72594: LD_VAR 0 3
72598: PUSH
72599: LD_VAR 0 2
72603: ARRAY
72604: PUSH
72605: LD_INT 4
72607: ARRAY
72608: STR
72609: PUSH
72610: LD_STRING )
72612: STR
72613: PPUSH
72614: CALL_OW 559
72618: GO 72528
72620: POP
72621: POP
// end ; end ;
72622: LD_VAR 0 1
72626: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
72627: LD_EXP 105
72631: IFFALSE 73316
72633: GO 72635
72635: DISABLE
72636: LD_INT 0
72638: PPUSH
72639: PPUSH
72640: PPUSH
72641: PPUSH
72642: PPUSH
72643: PPUSH
72644: PPUSH
72645: PPUSH
72646: PPUSH
// begin enable ;
72647: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
72648: LD_ADDR_VAR 0 3
72652: PUSH
72653: LD_EXP 105
72657: PPUSH
72658: CALL 56178 0 1
72662: ST_TO_ADDR
// if not list then
72663: LD_VAR 0 3
72667: NOT
72668: IFFALSE 72672
// exit ;
72670: GO 73316
// for i := 1 to list do
72672: LD_ADDR_VAR 0 1
72676: PUSH
72677: DOUBLE
72678: LD_INT 1
72680: DEC
72681: ST_TO_ADDR
72682: LD_VAR 0 3
72686: PUSH
72687: FOR_TO
72688: IFFALSE 73314
// begin depot := list [ i ] [ 2 ] ;
72690: LD_ADDR_VAR 0 8
72694: PUSH
72695: LD_VAR 0 3
72699: PUSH
72700: LD_VAR 0 1
72704: ARRAY
72705: PUSH
72706: LD_INT 2
72708: ARRAY
72709: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
72710: LD_ADDR_VAR 0 5
72714: PUSH
72715: LD_VAR 0 3
72719: PUSH
72720: LD_VAR 0 1
72724: ARRAY
72725: PUSH
72726: LD_INT 1
72728: ARRAY
72729: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
72730: LD_VAR 0 8
72734: PPUSH
72735: CALL_OW 301
72739: PUSH
72740: LD_VAR 0 5
72744: PUSH
72745: LD_VAR 0 8
72749: PPUSH
72750: CALL_OW 255
72754: NONEQUAL
72755: OR
72756: IFFALSE 72785
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
72758: LD_ADDR_EXP 105
72762: PUSH
72763: LD_EXP 105
72767: PPUSH
72768: LD_VAR 0 8
72772: PPUSH
72773: LD_INT 0
72775: PPUSH
72776: CALL_OW 1
72780: ST_TO_ADDR
// exit ;
72781: POP
72782: POP
72783: GO 73316
// end ; x := list [ i ] [ 3 ] ;
72785: LD_ADDR_VAR 0 6
72789: PUSH
72790: LD_VAR 0 3
72794: PUSH
72795: LD_VAR 0 1
72799: ARRAY
72800: PUSH
72801: LD_INT 3
72803: ARRAY
72804: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
72805: LD_ADDR_VAR 0 7
72809: PUSH
72810: LD_VAR 0 3
72814: PUSH
72815: LD_VAR 0 1
72819: ARRAY
72820: PUSH
72821: LD_INT 4
72823: ARRAY
72824: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
72825: LD_ADDR_VAR 0 9
72829: PUSH
72830: LD_VAR 0 6
72834: PPUSH
72835: LD_VAR 0 7
72839: PPUSH
72840: LD_INT 16
72842: PPUSH
72843: CALL 54766 0 3
72847: ST_TO_ADDR
// if not cratesNearbyPoint then
72848: LD_VAR 0 9
72852: NOT
72853: IFFALSE 72859
// exit ;
72855: POP
72856: POP
72857: GO 73316
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
72859: LD_ADDR_VAR 0 4
72863: PUSH
72864: LD_INT 22
72866: PUSH
72867: LD_VAR 0 5
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 3
72878: PUSH
72879: LD_INT 60
72881: PUSH
72882: EMPTY
72883: LIST
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: LD_INT 91
72891: PUSH
72892: LD_VAR 0 8
72896: PUSH
72897: LD_INT 6
72899: PUSH
72900: EMPTY
72901: LIST
72902: LIST
72903: LIST
72904: PUSH
72905: LD_INT 2
72907: PUSH
72908: LD_INT 25
72910: PUSH
72911: LD_INT 2
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 25
72920: PUSH
72921: LD_INT 16
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: LIST
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: LIST
72937: LIST
72938: PPUSH
72939: CALL_OW 69
72943: PUSH
72944: LD_VAR 0 8
72948: PPUSH
72949: CALL_OW 313
72953: PPUSH
72954: LD_INT 3
72956: PUSH
72957: LD_INT 60
72959: PUSH
72960: EMPTY
72961: LIST
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: PUSH
72967: LD_INT 2
72969: PUSH
72970: LD_INT 25
72972: PUSH
72973: LD_INT 2
72975: PUSH
72976: EMPTY
72977: LIST
72978: LIST
72979: PUSH
72980: LD_INT 25
72982: PUSH
72983: LD_INT 16
72985: PUSH
72986: EMPTY
72987: LIST
72988: LIST
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: LIST
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: PPUSH
72999: CALL_OW 72
73003: UNION
73004: ST_TO_ADDR
// if tmp then
73005: LD_VAR 0 4
73009: IFFALSE 73089
// begin tmp := ShrinkArray ( tmp , 3 ) ;
73011: LD_ADDR_VAR 0 4
73015: PUSH
73016: LD_VAR 0 4
73020: PPUSH
73021: LD_INT 3
73023: PPUSH
73024: CALL 52735 0 2
73028: ST_TO_ADDR
// for j in tmp do
73029: LD_ADDR_VAR 0 2
73033: PUSH
73034: LD_VAR 0 4
73038: PUSH
73039: FOR_IN
73040: IFFALSE 73083
// begin if IsInUnit ( j ) then
73042: LD_VAR 0 2
73046: PPUSH
73047: CALL_OW 310
73051: IFFALSE 73062
// ComExit ( j ) ;
73053: LD_VAR 0 2
73057: PPUSH
73058: CALL 52818 0 1
// AddComCollect ( j , x , y ) ;
73062: LD_VAR 0 2
73066: PPUSH
73067: LD_VAR 0 6
73071: PPUSH
73072: LD_VAR 0 7
73076: PPUSH
73077: CALL_OW 177
// end ;
73081: GO 73039
73083: POP
73084: POP
// exit ;
73085: POP
73086: POP
73087: GO 73316
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
73089: LD_ADDR_VAR 0 4
73093: PUSH
73094: LD_INT 22
73096: PUSH
73097: LD_VAR 0 5
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: PUSH
73106: LD_INT 91
73108: PUSH
73109: LD_VAR 0 8
73113: PUSH
73114: LD_INT 8
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 2
73124: PUSH
73125: LD_INT 34
73127: PUSH
73128: LD_INT 12
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: PUSH
73135: LD_INT 34
73137: PUSH
73138: LD_INT 51
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: PUSH
73145: LD_INT 34
73147: PUSH
73148: LD_INT 32
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: PUSH
73155: LD_INT 34
73157: PUSH
73158: LD_INT 89
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: PUSH
73165: EMPTY
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: PUSH
73172: EMPTY
73173: LIST
73174: LIST
73175: LIST
73176: PPUSH
73177: CALL_OW 69
73181: ST_TO_ADDR
// if tmp then
73182: LD_VAR 0 4
73186: IFFALSE 73312
// begin for j in tmp do
73188: LD_ADDR_VAR 0 2
73192: PUSH
73193: LD_VAR 0 4
73197: PUSH
73198: FOR_IN
73199: IFFALSE 73310
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
73201: LD_VAR 0 2
73205: PPUSH
73206: CALL_OW 262
73210: PUSH
73211: LD_INT 3
73213: EQUAL
73214: PUSH
73215: LD_VAR 0 2
73219: PPUSH
73220: CALL_OW 261
73224: PUSH
73225: LD_INT 20
73227: GREATER
73228: OR
73229: PUSH
73230: LD_VAR 0 2
73234: PPUSH
73235: CALL_OW 314
73239: NOT
73240: AND
73241: PUSH
73242: LD_VAR 0 2
73246: PPUSH
73247: CALL_OW 263
73251: PUSH
73252: LD_INT 1
73254: NONEQUAL
73255: PUSH
73256: LD_VAR 0 2
73260: PPUSH
73261: CALL_OW 311
73265: OR
73266: AND
73267: IFFALSE 73308
// begin ComCollect ( j , x , y ) ;
73269: LD_VAR 0 2
73273: PPUSH
73274: LD_VAR 0 6
73278: PPUSH
73279: LD_VAR 0 7
73283: PPUSH
73284: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
73288: LD_VAR 0 2
73292: PPUSH
73293: LD_VAR 0 8
73297: PPUSH
73298: CALL_OW 172
// exit ;
73302: POP
73303: POP
73304: POP
73305: POP
73306: GO 73316
// end ;
73308: GO 73198
73310: POP
73311: POP
// end ; end ;
73312: GO 72687
73314: POP
73315: POP
// end ; end_of_file
73316: PPOPN 9
73318: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
73319: LD_INT 0
73321: PPUSH
73322: PPUSH
73323: PPUSH
73324: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
73325: LD_VAR 0 1
73329: PPUSH
73330: CALL_OW 264
73334: PUSH
73335: LD_INT 91
73337: EQUAL
73338: IFFALSE 73410
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
73340: LD_INT 68
73342: PPUSH
73343: LD_VAR 0 1
73347: PPUSH
73348: CALL_OW 255
73352: PPUSH
73353: CALL_OW 321
73357: PUSH
73358: LD_INT 2
73360: EQUAL
73361: IFFALSE 73373
// eff := 70 else
73363: LD_ADDR_VAR 0 4
73367: PUSH
73368: LD_INT 70
73370: ST_TO_ADDR
73371: GO 73381
// eff := 30 ;
73373: LD_ADDR_VAR 0 4
73377: PUSH
73378: LD_INT 30
73380: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
73381: LD_VAR 0 1
73385: PPUSH
73386: CALL_OW 250
73390: PPUSH
73391: LD_VAR 0 1
73395: PPUSH
73396: CALL_OW 251
73400: PPUSH
73401: LD_VAR 0 4
73405: PPUSH
73406: CALL_OW 495
// end ; end ;
73410: LD_VAR 0 2
73414: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
73415: LD_INT 0
73417: PPUSH
// end ;
73418: LD_VAR 0 4
73422: RET
// export function SOS_Command ( cmd ) ; begin
73423: LD_INT 0
73425: PPUSH
// end ;
73426: LD_VAR 0 2
73430: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
73431: LD_INT 0
73433: PPUSH
// end ;
73434: LD_VAR 0 6
73438: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
73439: LD_INT 0
73441: PPUSH
73442: PPUSH
// if not vehicle or not factory then
73443: LD_VAR 0 1
73447: NOT
73448: PUSH
73449: LD_VAR 0 2
73453: NOT
73454: OR
73455: IFFALSE 73459
// exit ;
73457: GO 73690
// if factoryWaypoints >= factory then
73459: LD_EXP 104
73463: PUSH
73464: LD_VAR 0 2
73468: GREATEREQUAL
73469: IFFALSE 73690
// if factoryWaypoints [ factory ] then
73471: LD_EXP 104
73475: PUSH
73476: LD_VAR 0 2
73480: ARRAY
73481: IFFALSE 73690
// begin if GetControl ( vehicle ) = control_manual then
73483: LD_VAR 0 1
73487: PPUSH
73488: CALL_OW 263
73492: PUSH
73493: LD_INT 1
73495: EQUAL
73496: IFFALSE 73577
// begin driver := IsDrivenBy ( vehicle ) ;
73498: LD_ADDR_VAR 0 4
73502: PUSH
73503: LD_VAR 0 1
73507: PPUSH
73508: CALL_OW 311
73512: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73513: LD_VAR 0 4
73517: PPUSH
73518: LD_EXP 104
73522: PUSH
73523: LD_VAR 0 2
73527: ARRAY
73528: PUSH
73529: LD_INT 3
73531: ARRAY
73532: PPUSH
73533: LD_EXP 104
73537: PUSH
73538: LD_VAR 0 2
73542: ARRAY
73543: PUSH
73544: LD_INT 4
73546: ARRAY
73547: PPUSH
73548: CALL_OW 171
// AddComExitVehicle ( driver ) ;
73552: LD_VAR 0 4
73556: PPUSH
73557: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
73561: LD_VAR 0 4
73565: PPUSH
73566: LD_VAR 0 2
73570: PPUSH
73571: CALL_OW 180
// end else
73575: GO 73690
// if GetControl ( vehicle ) = control_remote then
73577: LD_VAR 0 1
73581: PPUSH
73582: CALL_OW 263
73586: PUSH
73587: LD_INT 2
73589: EQUAL
73590: IFFALSE 73651
// begin wait ( 0 0$2 ) ;
73592: LD_INT 70
73594: PPUSH
73595: CALL_OW 67
// if Connect ( vehicle ) then
73599: LD_VAR 0 1
73603: PPUSH
73604: CALL 23037 0 1
73608: IFFALSE 73649
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73610: LD_VAR 0 1
73614: PPUSH
73615: LD_EXP 104
73619: PUSH
73620: LD_VAR 0 2
73624: ARRAY
73625: PUSH
73626: LD_INT 3
73628: ARRAY
73629: PPUSH
73630: LD_EXP 104
73634: PUSH
73635: LD_VAR 0 2
73639: ARRAY
73640: PUSH
73641: LD_INT 4
73643: ARRAY
73644: PPUSH
73645: CALL_OW 171
// end else
73649: GO 73690
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73651: LD_VAR 0 1
73655: PPUSH
73656: LD_EXP 104
73660: PUSH
73661: LD_VAR 0 2
73665: ARRAY
73666: PUSH
73667: LD_INT 3
73669: ARRAY
73670: PPUSH
73671: LD_EXP 104
73675: PUSH
73676: LD_VAR 0 2
73680: ARRAY
73681: PUSH
73682: LD_INT 4
73684: ARRAY
73685: PPUSH
73686: CALL_OW 171
// end ; end ;
73690: LD_VAR 0 3
73694: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
73695: LD_INT 0
73697: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
73698: LD_VAR 0 1
73702: PUSH
73703: LD_INT 250
73705: EQUAL
73706: PUSH
73707: LD_VAR 0 2
73711: PPUSH
73712: CALL_OW 264
73716: PUSH
73717: LD_INT 81
73719: EQUAL
73720: AND
73721: IFFALSE 73742
// MinerPlaceMine ( unit , x , y ) ;
73723: LD_VAR 0 2
73727: PPUSH
73728: LD_VAR 0 4
73732: PPUSH
73733: LD_VAR 0 5
73737: PPUSH
73738: CALL 76732 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
73742: LD_VAR 0 1
73746: PUSH
73747: LD_INT 251
73749: EQUAL
73750: PUSH
73751: LD_VAR 0 2
73755: PPUSH
73756: CALL_OW 264
73760: PUSH
73761: LD_INT 81
73763: EQUAL
73764: AND
73765: IFFALSE 73786
// MinerDetonateMine ( unit , x , y ) ;
73767: LD_VAR 0 2
73771: PPUSH
73772: LD_VAR 0 4
73776: PPUSH
73777: LD_VAR 0 5
73781: PPUSH
73782: CALL 77007 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
73786: LD_VAR 0 1
73790: PUSH
73791: LD_INT 252
73793: EQUAL
73794: PUSH
73795: LD_VAR 0 2
73799: PPUSH
73800: CALL_OW 264
73804: PUSH
73805: LD_INT 81
73807: EQUAL
73808: AND
73809: IFFALSE 73830
// MinerCreateMinefield ( unit , x , y ) ;
73811: LD_VAR 0 2
73815: PPUSH
73816: LD_VAR 0 4
73820: PPUSH
73821: LD_VAR 0 5
73825: PPUSH
73826: CALL 77424 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
73830: LD_VAR 0 1
73834: PUSH
73835: LD_INT 253
73837: EQUAL
73838: PUSH
73839: LD_VAR 0 2
73843: PPUSH
73844: CALL_OW 257
73848: PUSH
73849: LD_INT 5
73851: EQUAL
73852: AND
73853: IFFALSE 73874
// ComBinocular ( unit , x , y ) ;
73855: LD_VAR 0 2
73859: PPUSH
73860: LD_VAR 0 4
73864: PPUSH
73865: LD_VAR 0 5
73869: PPUSH
73870: CALL 77793 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
73874: LD_VAR 0 1
73878: PUSH
73879: LD_INT 254
73881: EQUAL
73882: PUSH
73883: LD_VAR 0 2
73887: PPUSH
73888: CALL_OW 264
73892: PUSH
73893: LD_INT 99
73895: EQUAL
73896: AND
73897: PUSH
73898: LD_VAR 0 3
73902: PPUSH
73903: CALL_OW 263
73907: PUSH
73908: LD_INT 3
73910: EQUAL
73911: AND
73912: IFFALSE 73928
// HackDestroyVehicle ( unit , selectedUnit ) ;
73914: LD_VAR 0 2
73918: PPUSH
73919: LD_VAR 0 3
73923: PPUSH
73924: CALL 76096 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
73928: LD_VAR 0 1
73932: PUSH
73933: LD_INT 255
73935: EQUAL
73936: PUSH
73937: LD_VAR 0 2
73941: PPUSH
73942: CALL_OW 264
73946: PUSH
73947: LD_INT 14
73949: PUSH
73950: LD_INT 53
73952: PUSH
73953: EMPTY
73954: LIST
73955: LIST
73956: IN
73957: AND
73958: PUSH
73959: LD_VAR 0 4
73963: PPUSH
73964: LD_VAR 0 5
73968: PPUSH
73969: CALL_OW 488
73973: AND
73974: IFFALSE 73998
// CutTreeXYR ( unit , x , y , 12 ) ;
73976: LD_VAR 0 2
73980: PPUSH
73981: LD_VAR 0 4
73985: PPUSH
73986: LD_VAR 0 5
73990: PPUSH
73991: LD_INT 12
73993: PPUSH
73994: CALL 74093 0 4
// if cmd = 256 then
73998: LD_VAR 0 1
74002: PUSH
74003: LD_INT 256
74005: EQUAL
74006: IFFALSE 74027
// SetFactoryWaypoint ( unit , x , y ) ;
74008: LD_VAR 0 2
74012: PPUSH
74013: LD_VAR 0 4
74017: PPUSH
74018: LD_VAR 0 5
74022: PPUSH
74023: CALL 72008 0 3
// if cmd = 257 then
74027: LD_VAR 0 1
74031: PUSH
74032: LD_INT 257
74034: EQUAL
74035: IFFALSE 74056
// SetWarehouseGatheringPoint ( unit , x , y ) ;
74037: LD_VAR 0 2
74041: PPUSH
74042: LD_VAR 0 4
74046: PPUSH
74047: LD_VAR 0 5
74051: PPUSH
74052: CALL 72370 0 3
// if cmd = 258 then
74056: LD_VAR 0 1
74060: PUSH
74061: LD_INT 258
74063: EQUAL
74064: IFFALSE 74088
// BurnTreeXYR ( unit , x , y , 8 ) ;
74066: LD_VAR 0 2
74070: PPUSH
74071: LD_VAR 0 4
74075: PPUSH
74076: LD_VAR 0 5
74080: PPUSH
74081: LD_INT 8
74083: PPUSH
74084: CALL 74487 0 4
// end ;
74088: LD_VAR 0 6
74092: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
74093: LD_INT 0
74095: PPUSH
74096: PPUSH
74097: PPUSH
74098: PPUSH
74099: PPUSH
74100: PPUSH
74101: PPUSH
74102: PPUSH
74103: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
74104: LD_VAR 0 1
74108: PPUSH
74109: CALL_OW 302
74113: NOT
74114: PUSH
74115: LD_VAR 0 2
74119: PPUSH
74120: LD_VAR 0 3
74124: PPUSH
74125: CALL_OW 488
74129: NOT
74130: OR
74131: PUSH
74132: LD_VAR 0 4
74136: NOT
74137: OR
74138: IFFALSE 74142
// exit ;
74140: GO 74482
// list := [ ] ;
74142: LD_ADDR_VAR 0 13
74146: PUSH
74147: EMPTY
74148: ST_TO_ADDR
// if x - r < 0 then
74149: LD_VAR 0 2
74153: PUSH
74154: LD_VAR 0 4
74158: MINUS
74159: PUSH
74160: LD_INT 0
74162: LESS
74163: IFFALSE 74175
// min_x := 0 else
74165: LD_ADDR_VAR 0 7
74169: PUSH
74170: LD_INT 0
74172: ST_TO_ADDR
74173: GO 74191
// min_x := x - r ;
74175: LD_ADDR_VAR 0 7
74179: PUSH
74180: LD_VAR 0 2
74184: PUSH
74185: LD_VAR 0 4
74189: MINUS
74190: ST_TO_ADDR
// if y - r < 0 then
74191: LD_VAR 0 3
74195: PUSH
74196: LD_VAR 0 4
74200: MINUS
74201: PUSH
74202: LD_INT 0
74204: LESS
74205: IFFALSE 74217
// min_y := 0 else
74207: LD_ADDR_VAR 0 8
74211: PUSH
74212: LD_INT 0
74214: ST_TO_ADDR
74215: GO 74233
// min_y := y - r ;
74217: LD_ADDR_VAR 0 8
74221: PUSH
74222: LD_VAR 0 3
74226: PUSH
74227: LD_VAR 0 4
74231: MINUS
74232: ST_TO_ADDR
// max_x := x + r ;
74233: LD_ADDR_VAR 0 9
74237: PUSH
74238: LD_VAR 0 2
74242: PUSH
74243: LD_VAR 0 4
74247: PLUS
74248: ST_TO_ADDR
// max_y := y + r ;
74249: LD_ADDR_VAR 0 10
74253: PUSH
74254: LD_VAR 0 3
74258: PUSH
74259: LD_VAR 0 4
74263: PLUS
74264: ST_TO_ADDR
// for _x = min_x to max_x do
74265: LD_ADDR_VAR 0 11
74269: PUSH
74270: DOUBLE
74271: LD_VAR 0 7
74275: DEC
74276: ST_TO_ADDR
74277: LD_VAR 0 9
74281: PUSH
74282: FOR_TO
74283: IFFALSE 74400
// for _y = min_y to max_y do
74285: LD_ADDR_VAR 0 12
74289: PUSH
74290: DOUBLE
74291: LD_VAR 0 8
74295: DEC
74296: ST_TO_ADDR
74297: LD_VAR 0 10
74301: PUSH
74302: FOR_TO
74303: IFFALSE 74396
// begin if not ValidHex ( _x , _y ) then
74305: LD_VAR 0 11
74309: PPUSH
74310: LD_VAR 0 12
74314: PPUSH
74315: CALL_OW 488
74319: NOT
74320: IFFALSE 74324
// continue ;
74322: GO 74302
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
74324: LD_VAR 0 11
74328: PPUSH
74329: LD_VAR 0 12
74333: PPUSH
74334: CALL_OW 351
74338: PUSH
74339: LD_VAR 0 11
74343: PPUSH
74344: LD_VAR 0 12
74348: PPUSH
74349: CALL_OW 554
74353: AND
74354: IFFALSE 74394
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
74356: LD_ADDR_VAR 0 13
74360: PUSH
74361: LD_VAR 0 13
74365: PPUSH
74366: LD_VAR 0 13
74370: PUSH
74371: LD_INT 1
74373: PLUS
74374: PPUSH
74375: LD_VAR 0 11
74379: PUSH
74380: LD_VAR 0 12
74384: PUSH
74385: EMPTY
74386: LIST
74387: LIST
74388: PPUSH
74389: CALL_OW 2
74393: ST_TO_ADDR
// end ;
74394: GO 74302
74396: POP
74397: POP
74398: GO 74282
74400: POP
74401: POP
// if not list then
74402: LD_VAR 0 13
74406: NOT
74407: IFFALSE 74411
// exit ;
74409: GO 74482
// for i in list do
74411: LD_ADDR_VAR 0 6
74415: PUSH
74416: LD_VAR 0 13
74420: PUSH
74421: FOR_IN
74422: IFFALSE 74480
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
74424: LD_VAR 0 1
74428: PPUSH
74429: LD_STRING M
74431: PUSH
74432: LD_VAR 0 6
74436: PUSH
74437: LD_INT 1
74439: ARRAY
74440: PUSH
74441: LD_VAR 0 6
74445: PUSH
74446: LD_INT 2
74448: ARRAY
74449: PUSH
74450: LD_INT 0
74452: PUSH
74453: LD_INT 0
74455: PUSH
74456: LD_INT 0
74458: PUSH
74459: LD_INT 0
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: LIST
74470: PUSH
74471: EMPTY
74472: LIST
74473: PPUSH
74474: CALL_OW 447
74478: GO 74421
74480: POP
74481: POP
// end ;
74482: LD_VAR 0 5
74486: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
74487: LD_INT 0
74489: PPUSH
74490: PPUSH
74491: PPUSH
74492: PPUSH
74493: PPUSH
74494: PPUSH
74495: PPUSH
74496: PPUSH
74497: PPUSH
74498: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
74499: LD_VAR 0 1
74503: PPUSH
74504: CALL_OW 302
74508: NOT
74509: PUSH
74510: LD_VAR 0 2
74514: PPUSH
74515: LD_VAR 0 3
74519: PPUSH
74520: CALL_OW 488
74524: NOT
74525: OR
74526: PUSH
74527: LD_VAR 0 4
74531: NOT
74532: OR
74533: IFFALSE 74537
// exit ;
74535: GO 75050
// list := [ ] ;
74537: LD_ADDR_VAR 0 13
74541: PUSH
74542: EMPTY
74543: ST_TO_ADDR
// if x - r < 0 then
74544: LD_VAR 0 2
74548: PUSH
74549: LD_VAR 0 4
74553: MINUS
74554: PUSH
74555: LD_INT 0
74557: LESS
74558: IFFALSE 74570
// min_x := 0 else
74560: LD_ADDR_VAR 0 7
74564: PUSH
74565: LD_INT 0
74567: ST_TO_ADDR
74568: GO 74586
// min_x := x - r ;
74570: LD_ADDR_VAR 0 7
74574: PUSH
74575: LD_VAR 0 2
74579: PUSH
74580: LD_VAR 0 4
74584: MINUS
74585: ST_TO_ADDR
// if y - r < 0 then
74586: LD_VAR 0 3
74590: PUSH
74591: LD_VAR 0 4
74595: MINUS
74596: PUSH
74597: LD_INT 0
74599: LESS
74600: IFFALSE 74612
// min_y := 0 else
74602: LD_ADDR_VAR 0 8
74606: PUSH
74607: LD_INT 0
74609: ST_TO_ADDR
74610: GO 74628
// min_y := y - r ;
74612: LD_ADDR_VAR 0 8
74616: PUSH
74617: LD_VAR 0 3
74621: PUSH
74622: LD_VAR 0 4
74626: MINUS
74627: ST_TO_ADDR
// max_x := x + r ;
74628: LD_ADDR_VAR 0 9
74632: PUSH
74633: LD_VAR 0 2
74637: PUSH
74638: LD_VAR 0 4
74642: PLUS
74643: ST_TO_ADDR
// max_y := y + r ;
74644: LD_ADDR_VAR 0 10
74648: PUSH
74649: LD_VAR 0 3
74653: PUSH
74654: LD_VAR 0 4
74658: PLUS
74659: ST_TO_ADDR
// for _x = min_x to max_x do
74660: LD_ADDR_VAR 0 11
74664: PUSH
74665: DOUBLE
74666: LD_VAR 0 7
74670: DEC
74671: ST_TO_ADDR
74672: LD_VAR 0 9
74676: PUSH
74677: FOR_TO
74678: IFFALSE 74795
// for _y = min_y to max_y do
74680: LD_ADDR_VAR 0 12
74684: PUSH
74685: DOUBLE
74686: LD_VAR 0 8
74690: DEC
74691: ST_TO_ADDR
74692: LD_VAR 0 10
74696: PUSH
74697: FOR_TO
74698: IFFALSE 74791
// begin if not ValidHex ( _x , _y ) then
74700: LD_VAR 0 11
74704: PPUSH
74705: LD_VAR 0 12
74709: PPUSH
74710: CALL_OW 488
74714: NOT
74715: IFFALSE 74719
// continue ;
74717: GO 74697
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
74719: LD_VAR 0 11
74723: PPUSH
74724: LD_VAR 0 12
74728: PPUSH
74729: CALL_OW 351
74733: PUSH
74734: LD_VAR 0 11
74738: PPUSH
74739: LD_VAR 0 12
74743: PPUSH
74744: CALL_OW 554
74748: AND
74749: IFFALSE 74789
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
74751: LD_ADDR_VAR 0 13
74755: PUSH
74756: LD_VAR 0 13
74760: PPUSH
74761: LD_VAR 0 13
74765: PUSH
74766: LD_INT 1
74768: PLUS
74769: PPUSH
74770: LD_VAR 0 11
74774: PUSH
74775: LD_VAR 0 12
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: PPUSH
74784: CALL_OW 2
74788: ST_TO_ADDR
// end ;
74789: GO 74697
74791: POP
74792: POP
74793: GO 74677
74795: POP
74796: POP
// if not list then
74797: LD_VAR 0 13
74801: NOT
74802: IFFALSE 74806
// exit ;
74804: GO 75050
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
74806: LD_ADDR_VAR 0 13
74810: PUSH
74811: LD_VAR 0 1
74815: PPUSH
74816: LD_VAR 0 13
74820: PPUSH
74821: LD_INT 1
74823: PPUSH
74824: LD_INT 1
74826: PPUSH
74827: CALL 20179 0 4
74831: ST_TO_ADDR
// ComStop ( flame ) ;
74832: LD_VAR 0 1
74836: PPUSH
74837: CALL_OW 141
// for i in list do
74841: LD_ADDR_VAR 0 6
74845: PUSH
74846: LD_VAR 0 13
74850: PUSH
74851: FOR_IN
74852: IFFALSE 74883
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
74854: LD_VAR 0 1
74858: PPUSH
74859: LD_VAR 0 6
74863: PUSH
74864: LD_INT 1
74866: ARRAY
74867: PPUSH
74868: LD_VAR 0 6
74872: PUSH
74873: LD_INT 2
74875: ARRAY
74876: PPUSH
74877: CALL_OW 176
74881: GO 74851
74883: POP
74884: POP
// repeat wait ( 0 0$1 ) ;
74885: LD_INT 35
74887: PPUSH
74888: CALL_OW 67
// task := GetTaskList ( flame ) ;
74892: LD_ADDR_VAR 0 14
74896: PUSH
74897: LD_VAR 0 1
74901: PPUSH
74902: CALL_OW 437
74906: ST_TO_ADDR
// if not task then
74907: LD_VAR 0 14
74911: NOT
74912: IFFALSE 74916
// exit ;
74914: GO 75050
// if task [ 1 ] [ 1 ] <> | then
74916: LD_VAR 0 14
74920: PUSH
74921: LD_INT 1
74923: ARRAY
74924: PUSH
74925: LD_INT 1
74927: ARRAY
74928: PUSH
74929: LD_STRING |
74931: NONEQUAL
74932: IFFALSE 74936
// exit ;
74934: GO 75050
// _x := task [ 1 ] [ 2 ] ;
74936: LD_ADDR_VAR 0 11
74940: PUSH
74941: LD_VAR 0 14
74945: PUSH
74946: LD_INT 1
74948: ARRAY
74949: PUSH
74950: LD_INT 2
74952: ARRAY
74953: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
74954: LD_ADDR_VAR 0 12
74958: PUSH
74959: LD_VAR 0 14
74963: PUSH
74964: LD_INT 1
74966: ARRAY
74967: PUSH
74968: LD_INT 3
74970: ARRAY
74971: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
74972: LD_VAR 0 11
74976: PPUSH
74977: LD_VAR 0 12
74981: PPUSH
74982: CALL_OW 351
74986: NOT
74987: PUSH
74988: LD_VAR 0 11
74992: PPUSH
74993: LD_VAR 0 12
74997: PPUSH
74998: CALL_OW 554
75002: NOT
75003: OR
75004: IFFALSE 75038
// begin task := Delete ( task , 1 ) ;
75006: LD_ADDR_VAR 0 14
75010: PUSH
75011: LD_VAR 0 14
75015: PPUSH
75016: LD_INT 1
75018: PPUSH
75019: CALL_OW 3
75023: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
75024: LD_VAR 0 1
75028: PPUSH
75029: LD_VAR 0 14
75033: PPUSH
75034: CALL_OW 446
// end ; until not HasTask ( flame ) ;
75038: LD_VAR 0 1
75042: PPUSH
75043: CALL_OW 314
75047: NOT
75048: IFFALSE 74885
// end ;
75050: LD_VAR 0 5
75054: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
75055: LD_EXP 107
75059: NOT
75060: IFFALSE 75110
75062: GO 75064
75064: DISABLE
// begin initHack := true ;
75065: LD_ADDR_EXP 107
75069: PUSH
75070: LD_INT 1
75072: ST_TO_ADDR
// hackTanks := [ ] ;
75073: LD_ADDR_EXP 108
75077: PUSH
75078: EMPTY
75079: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
75080: LD_ADDR_EXP 109
75084: PUSH
75085: EMPTY
75086: ST_TO_ADDR
// hackLimit := 3 ;
75087: LD_ADDR_EXP 110
75091: PUSH
75092: LD_INT 3
75094: ST_TO_ADDR
// hackDist := 12 ;
75095: LD_ADDR_EXP 111
75099: PUSH
75100: LD_INT 12
75102: ST_TO_ADDR
// hackCounter := [ ] ;
75103: LD_ADDR_EXP 112
75107: PUSH
75108: EMPTY
75109: ST_TO_ADDR
// end ;
75110: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
75111: LD_EXP 107
75115: PUSH
75116: LD_INT 34
75118: PUSH
75119: LD_INT 99
75121: PUSH
75122: EMPTY
75123: LIST
75124: LIST
75125: PPUSH
75126: CALL_OW 69
75130: AND
75131: IFFALSE 75384
75133: GO 75135
75135: DISABLE
75136: LD_INT 0
75138: PPUSH
75139: PPUSH
// begin enable ;
75140: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
75141: LD_ADDR_VAR 0 1
75145: PUSH
75146: LD_INT 34
75148: PUSH
75149: LD_INT 99
75151: PUSH
75152: EMPTY
75153: LIST
75154: LIST
75155: PPUSH
75156: CALL_OW 69
75160: PUSH
75161: FOR_IN
75162: IFFALSE 75382
// begin if not i in hackTanks then
75164: LD_VAR 0 1
75168: PUSH
75169: LD_EXP 108
75173: IN
75174: NOT
75175: IFFALSE 75258
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
75177: LD_ADDR_EXP 108
75181: PUSH
75182: LD_EXP 108
75186: PPUSH
75187: LD_EXP 108
75191: PUSH
75192: LD_INT 1
75194: PLUS
75195: PPUSH
75196: LD_VAR 0 1
75200: PPUSH
75201: CALL_OW 1
75205: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
75206: LD_ADDR_EXP 109
75210: PUSH
75211: LD_EXP 109
75215: PPUSH
75216: LD_EXP 109
75220: PUSH
75221: LD_INT 1
75223: PLUS
75224: PPUSH
75225: EMPTY
75226: PPUSH
75227: CALL_OW 1
75231: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
75232: LD_ADDR_EXP 112
75236: PUSH
75237: LD_EXP 112
75241: PPUSH
75242: LD_EXP 112
75246: PUSH
75247: LD_INT 1
75249: PLUS
75250: PPUSH
75251: EMPTY
75252: PPUSH
75253: CALL_OW 1
75257: ST_TO_ADDR
// end ; if not IsOk ( i ) then
75258: LD_VAR 0 1
75262: PPUSH
75263: CALL_OW 302
75267: NOT
75268: IFFALSE 75281
// begin HackUnlinkAll ( i ) ;
75270: LD_VAR 0 1
75274: PPUSH
75275: CALL 75387 0 1
// continue ;
75279: GO 75161
// end ; HackCheckCapturedStatus ( i ) ;
75281: LD_VAR 0 1
75285: PPUSH
75286: CALL 75830 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
75290: LD_ADDR_VAR 0 2
75294: PUSH
75295: LD_INT 81
75297: PUSH
75298: LD_VAR 0 1
75302: PPUSH
75303: CALL_OW 255
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PUSH
75312: LD_INT 33
75314: PUSH
75315: LD_INT 3
75317: PUSH
75318: EMPTY
75319: LIST
75320: LIST
75321: PUSH
75322: LD_INT 91
75324: PUSH
75325: LD_VAR 0 1
75329: PUSH
75330: LD_EXP 111
75334: PUSH
75335: EMPTY
75336: LIST
75337: LIST
75338: LIST
75339: PUSH
75340: LD_INT 50
75342: PUSH
75343: EMPTY
75344: LIST
75345: PUSH
75346: EMPTY
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: PPUSH
75352: CALL_OW 69
75356: ST_TO_ADDR
// if not tmp then
75357: LD_VAR 0 2
75361: NOT
75362: IFFALSE 75366
// continue ;
75364: GO 75161
// HackLink ( i , tmp ) ;
75366: LD_VAR 0 1
75370: PPUSH
75371: LD_VAR 0 2
75375: PPUSH
75376: CALL 75523 0 2
// end ;
75380: GO 75161
75382: POP
75383: POP
// end ;
75384: PPOPN 2
75386: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
75387: LD_INT 0
75389: PPUSH
75390: PPUSH
75391: PPUSH
// if not hack in hackTanks then
75392: LD_VAR 0 1
75396: PUSH
75397: LD_EXP 108
75401: IN
75402: NOT
75403: IFFALSE 75407
// exit ;
75405: GO 75518
// index := GetElementIndex ( hackTanks , hack ) ;
75407: LD_ADDR_VAR 0 4
75411: PUSH
75412: LD_EXP 108
75416: PPUSH
75417: LD_VAR 0 1
75421: PPUSH
75422: CALL 19476 0 2
75426: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
75427: LD_EXP 109
75431: PUSH
75432: LD_VAR 0 4
75436: ARRAY
75437: IFFALSE 75518
// begin for i in hackTanksCaptured [ index ] do
75439: LD_ADDR_VAR 0 3
75443: PUSH
75444: LD_EXP 109
75448: PUSH
75449: LD_VAR 0 4
75453: ARRAY
75454: PUSH
75455: FOR_IN
75456: IFFALSE 75482
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
75458: LD_VAR 0 3
75462: PUSH
75463: LD_INT 1
75465: ARRAY
75466: PPUSH
75467: LD_VAR 0 3
75471: PUSH
75472: LD_INT 2
75474: ARRAY
75475: PPUSH
75476: CALL_OW 235
75480: GO 75455
75482: POP
75483: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
75484: LD_ADDR_EXP 109
75488: PUSH
75489: LD_EXP 109
75493: PPUSH
75494: LD_VAR 0 4
75498: PPUSH
75499: EMPTY
75500: PPUSH
75501: CALL_OW 1
75505: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
75506: LD_VAR 0 1
75510: PPUSH
75511: LD_INT 0
75513: PPUSH
75514: CALL_OW 505
// end ; end ;
75518: LD_VAR 0 2
75522: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
75523: LD_INT 0
75525: PPUSH
75526: PPUSH
75527: PPUSH
// if not hack in hackTanks or not vehicles then
75528: LD_VAR 0 1
75532: PUSH
75533: LD_EXP 108
75537: IN
75538: NOT
75539: PUSH
75540: LD_VAR 0 2
75544: NOT
75545: OR
75546: IFFALSE 75550
// exit ;
75548: GO 75825
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
75550: LD_ADDR_VAR 0 2
75554: PUSH
75555: LD_VAR 0 1
75559: PPUSH
75560: LD_VAR 0 2
75564: PPUSH
75565: LD_INT 1
75567: PPUSH
75568: LD_INT 1
75570: PPUSH
75571: CALL 20126 0 4
75575: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
75576: LD_ADDR_VAR 0 5
75580: PUSH
75581: LD_EXP 108
75585: PPUSH
75586: LD_VAR 0 1
75590: PPUSH
75591: CALL 19476 0 2
75595: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
75596: LD_EXP 109
75600: PUSH
75601: LD_VAR 0 5
75605: ARRAY
75606: PUSH
75607: LD_EXP 110
75611: LESS
75612: IFFALSE 75801
// begin for i := 1 to vehicles do
75614: LD_ADDR_VAR 0 4
75618: PUSH
75619: DOUBLE
75620: LD_INT 1
75622: DEC
75623: ST_TO_ADDR
75624: LD_VAR 0 2
75628: PUSH
75629: FOR_TO
75630: IFFALSE 75799
// begin if hackTanksCaptured [ index ] = hackLimit then
75632: LD_EXP 109
75636: PUSH
75637: LD_VAR 0 5
75641: ARRAY
75642: PUSH
75643: LD_EXP 110
75647: EQUAL
75648: IFFALSE 75652
// break ;
75650: GO 75799
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
75652: LD_ADDR_EXP 112
75656: PUSH
75657: LD_EXP 112
75661: PPUSH
75662: LD_VAR 0 5
75666: PPUSH
75667: LD_EXP 112
75671: PUSH
75672: LD_VAR 0 5
75676: ARRAY
75677: PUSH
75678: LD_INT 1
75680: PLUS
75681: PPUSH
75682: CALL_OW 1
75686: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
75687: LD_ADDR_EXP 109
75691: PUSH
75692: LD_EXP 109
75696: PPUSH
75697: LD_VAR 0 5
75701: PUSH
75702: LD_EXP 109
75706: PUSH
75707: LD_VAR 0 5
75711: ARRAY
75712: PUSH
75713: LD_INT 1
75715: PLUS
75716: PUSH
75717: EMPTY
75718: LIST
75719: LIST
75720: PPUSH
75721: LD_VAR 0 2
75725: PUSH
75726: LD_VAR 0 4
75730: ARRAY
75731: PUSH
75732: LD_VAR 0 2
75736: PUSH
75737: LD_VAR 0 4
75741: ARRAY
75742: PPUSH
75743: CALL_OW 255
75747: PUSH
75748: EMPTY
75749: LIST
75750: LIST
75751: PPUSH
75752: CALL 19691 0 3
75756: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
75757: LD_VAR 0 2
75761: PUSH
75762: LD_VAR 0 4
75766: ARRAY
75767: PPUSH
75768: LD_VAR 0 1
75772: PPUSH
75773: CALL_OW 255
75777: PPUSH
75778: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
75782: LD_VAR 0 2
75786: PUSH
75787: LD_VAR 0 4
75791: ARRAY
75792: PPUSH
75793: CALL_OW 141
// end ;
75797: GO 75629
75799: POP
75800: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
75801: LD_VAR 0 1
75805: PPUSH
75806: LD_EXP 109
75810: PUSH
75811: LD_VAR 0 5
75815: ARRAY
75816: PUSH
75817: LD_INT 0
75819: PLUS
75820: PPUSH
75821: CALL_OW 505
// end ;
75825: LD_VAR 0 3
75829: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
75830: LD_INT 0
75832: PPUSH
75833: PPUSH
75834: PPUSH
75835: PPUSH
// if not hack in hackTanks then
75836: LD_VAR 0 1
75840: PUSH
75841: LD_EXP 108
75845: IN
75846: NOT
75847: IFFALSE 75851
// exit ;
75849: GO 76091
// index := GetElementIndex ( hackTanks , hack ) ;
75851: LD_ADDR_VAR 0 4
75855: PUSH
75856: LD_EXP 108
75860: PPUSH
75861: LD_VAR 0 1
75865: PPUSH
75866: CALL 19476 0 2
75870: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
75871: LD_ADDR_VAR 0 3
75875: PUSH
75876: DOUBLE
75877: LD_EXP 109
75881: PUSH
75882: LD_VAR 0 4
75886: ARRAY
75887: INC
75888: ST_TO_ADDR
75889: LD_INT 1
75891: PUSH
75892: FOR_DOWNTO
75893: IFFALSE 76065
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
75895: LD_ADDR_VAR 0 5
75899: PUSH
75900: LD_EXP 109
75904: PUSH
75905: LD_VAR 0 4
75909: ARRAY
75910: PUSH
75911: LD_VAR 0 3
75915: ARRAY
75916: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
75917: LD_VAR 0 5
75921: PUSH
75922: LD_INT 1
75924: ARRAY
75925: PPUSH
75926: CALL_OW 302
75930: NOT
75931: PUSH
75932: LD_VAR 0 5
75936: PUSH
75937: LD_INT 1
75939: ARRAY
75940: PPUSH
75941: CALL_OW 255
75945: PUSH
75946: LD_VAR 0 1
75950: PPUSH
75951: CALL_OW 255
75955: NONEQUAL
75956: OR
75957: IFFALSE 76063
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
75959: LD_VAR 0 5
75963: PUSH
75964: LD_INT 1
75966: ARRAY
75967: PPUSH
75968: CALL_OW 305
75972: PUSH
75973: LD_VAR 0 5
75977: PUSH
75978: LD_INT 1
75980: ARRAY
75981: PPUSH
75982: CALL_OW 255
75986: PUSH
75987: LD_VAR 0 1
75991: PPUSH
75992: CALL_OW 255
75996: EQUAL
75997: AND
75998: IFFALSE 76022
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
76000: LD_VAR 0 5
76004: PUSH
76005: LD_INT 1
76007: ARRAY
76008: PPUSH
76009: LD_VAR 0 5
76013: PUSH
76014: LD_INT 2
76016: ARRAY
76017: PPUSH
76018: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
76022: LD_ADDR_EXP 109
76026: PUSH
76027: LD_EXP 109
76031: PPUSH
76032: LD_VAR 0 4
76036: PPUSH
76037: LD_EXP 109
76041: PUSH
76042: LD_VAR 0 4
76046: ARRAY
76047: PPUSH
76048: LD_VAR 0 3
76052: PPUSH
76053: CALL_OW 3
76057: PPUSH
76058: CALL_OW 1
76062: ST_TO_ADDR
// end ; end ;
76063: GO 75892
76065: POP
76066: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76067: LD_VAR 0 1
76071: PPUSH
76072: LD_EXP 109
76076: PUSH
76077: LD_VAR 0 4
76081: ARRAY
76082: PUSH
76083: LD_INT 0
76085: PLUS
76086: PPUSH
76087: CALL_OW 505
// end ;
76091: LD_VAR 0 2
76095: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
76096: LD_INT 0
76098: PPUSH
76099: PPUSH
76100: PPUSH
76101: PPUSH
// if not hack in hackTanks then
76102: LD_VAR 0 1
76106: PUSH
76107: LD_EXP 108
76111: IN
76112: NOT
76113: IFFALSE 76117
// exit ;
76115: GO 76202
// index := GetElementIndex ( hackTanks , hack ) ;
76117: LD_ADDR_VAR 0 5
76121: PUSH
76122: LD_EXP 108
76126: PPUSH
76127: LD_VAR 0 1
76131: PPUSH
76132: CALL 19476 0 2
76136: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
76137: LD_ADDR_VAR 0 4
76141: PUSH
76142: DOUBLE
76143: LD_INT 1
76145: DEC
76146: ST_TO_ADDR
76147: LD_EXP 109
76151: PUSH
76152: LD_VAR 0 5
76156: ARRAY
76157: PUSH
76158: FOR_TO
76159: IFFALSE 76200
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
76161: LD_EXP 109
76165: PUSH
76166: LD_VAR 0 5
76170: ARRAY
76171: PUSH
76172: LD_VAR 0 4
76176: ARRAY
76177: PUSH
76178: LD_INT 1
76180: ARRAY
76181: PUSH
76182: LD_VAR 0 2
76186: EQUAL
76187: IFFALSE 76198
// KillUnit ( vehicle ) ;
76189: LD_VAR 0 2
76193: PPUSH
76194: CALL_OW 66
76198: GO 76158
76200: POP
76201: POP
// end ;
76202: LD_VAR 0 3
76206: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
76207: LD_EXP 113
76211: NOT
76212: IFFALSE 76247
76214: GO 76216
76216: DISABLE
// begin initMiner := true ;
76217: LD_ADDR_EXP 113
76221: PUSH
76222: LD_INT 1
76224: ST_TO_ADDR
// minersList := [ ] ;
76225: LD_ADDR_EXP 114
76229: PUSH
76230: EMPTY
76231: ST_TO_ADDR
// minerMinesList := [ ] ;
76232: LD_ADDR_EXP 115
76236: PUSH
76237: EMPTY
76238: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
76239: LD_ADDR_EXP 116
76243: PUSH
76244: LD_INT 5
76246: ST_TO_ADDR
// end ;
76247: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
76248: LD_EXP 113
76252: PUSH
76253: LD_INT 34
76255: PUSH
76256: LD_INT 81
76258: PUSH
76259: EMPTY
76260: LIST
76261: LIST
76262: PPUSH
76263: CALL_OW 69
76267: AND
76268: IFFALSE 76729
76270: GO 76272
76272: DISABLE
76273: LD_INT 0
76275: PPUSH
76276: PPUSH
76277: PPUSH
76278: PPUSH
// begin enable ;
76279: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
76280: LD_ADDR_VAR 0 1
76284: PUSH
76285: LD_INT 34
76287: PUSH
76288: LD_INT 81
76290: PUSH
76291: EMPTY
76292: LIST
76293: LIST
76294: PPUSH
76295: CALL_OW 69
76299: PUSH
76300: FOR_IN
76301: IFFALSE 76373
// begin if not i in minersList then
76303: LD_VAR 0 1
76307: PUSH
76308: LD_EXP 114
76312: IN
76313: NOT
76314: IFFALSE 76371
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
76316: LD_ADDR_EXP 114
76320: PUSH
76321: LD_EXP 114
76325: PPUSH
76326: LD_EXP 114
76330: PUSH
76331: LD_INT 1
76333: PLUS
76334: PPUSH
76335: LD_VAR 0 1
76339: PPUSH
76340: CALL_OW 1
76344: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
76345: LD_ADDR_EXP 115
76349: PUSH
76350: LD_EXP 115
76354: PPUSH
76355: LD_EXP 115
76359: PUSH
76360: LD_INT 1
76362: PLUS
76363: PPUSH
76364: EMPTY
76365: PPUSH
76366: CALL_OW 1
76370: ST_TO_ADDR
// end end ;
76371: GO 76300
76373: POP
76374: POP
// for i := minerMinesList downto 1 do
76375: LD_ADDR_VAR 0 1
76379: PUSH
76380: DOUBLE
76381: LD_EXP 115
76385: INC
76386: ST_TO_ADDR
76387: LD_INT 1
76389: PUSH
76390: FOR_DOWNTO
76391: IFFALSE 76727
// begin if IsLive ( minersList [ i ] ) then
76393: LD_EXP 114
76397: PUSH
76398: LD_VAR 0 1
76402: ARRAY
76403: PPUSH
76404: CALL_OW 300
76408: IFFALSE 76436
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
76410: LD_EXP 114
76414: PUSH
76415: LD_VAR 0 1
76419: ARRAY
76420: PPUSH
76421: LD_EXP 115
76425: PUSH
76426: LD_VAR 0 1
76430: ARRAY
76431: PPUSH
76432: CALL_OW 505
// if not minerMinesList [ i ] then
76436: LD_EXP 115
76440: PUSH
76441: LD_VAR 0 1
76445: ARRAY
76446: NOT
76447: IFFALSE 76451
// continue ;
76449: GO 76390
// for j := minerMinesList [ i ] downto 1 do
76451: LD_ADDR_VAR 0 2
76455: PUSH
76456: DOUBLE
76457: LD_EXP 115
76461: PUSH
76462: LD_VAR 0 1
76466: ARRAY
76467: INC
76468: ST_TO_ADDR
76469: LD_INT 1
76471: PUSH
76472: FOR_DOWNTO
76473: IFFALSE 76723
// begin side := GetSide ( minersList [ i ] ) ;
76475: LD_ADDR_VAR 0 3
76479: PUSH
76480: LD_EXP 114
76484: PUSH
76485: LD_VAR 0 1
76489: ARRAY
76490: PPUSH
76491: CALL_OW 255
76495: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
76496: LD_ADDR_VAR 0 4
76500: PUSH
76501: LD_EXP 115
76505: PUSH
76506: LD_VAR 0 1
76510: ARRAY
76511: PUSH
76512: LD_VAR 0 2
76516: ARRAY
76517: PUSH
76518: LD_INT 1
76520: ARRAY
76521: PPUSH
76522: LD_EXP 115
76526: PUSH
76527: LD_VAR 0 1
76531: ARRAY
76532: PUSH
76533: LD_VAR 0 2
76537: ARRAY
76538: PUSH
76539: LD_INT 2
76541: ARRAY
76542: PPUSH
76543: CALL_OW 428
76547: ST_TO_ADDR
// if not tmp then
76548: LD_VAR 0 4
76552: NOT
76553: IFFALSE 76557
// continue ;
76555: GO 76472
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
76557: LD_VAR 0 4
76561: PUSH
76562: LD_INT 81
76564: PUSH
76565: LD_VAR 0 3
76569: PUSH
76570: EMPTY
76571: LIST
76572: LIST
76573: PPUSH
76574: CALL_OW 69
76578: IN
76579: PUSH
76580: LD_EXP 115
76584: PUSH
76585: LD_VAR 0 1
76589: ARRAY
76590: PUSH
76591: LD_VAR 0 2
76595: ARRAY
76596: PUSH
76597: LD_INT 1
76599: ARRAY
76600: PPUSH
76601: LD_EXP 115
76605: PUSH
76606: LD_VAR 0 1
76610: ARRAY
76611: PUSH
76612: LD_VAR 0 2
76616: ARRAY
76617: PUSH
76618: LD_INT 2
76620: ARRAY
76621: PPUSH
76622: CALL_OW 458
76626: AND
76627: IFFALSE 76721
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
76629: LD_EXP 115
76633: PUSH
76634: LD_VAR 0 1
76638: ARRAY
76639: PUSH
76640: LD_VAR 0 2
76644: ARRAY
76645: PUSH
76646: LD_INT 1
76648: ARRAY
76649: PPUSH
76650: LD_EXP 115
76654: PUSH
76655: LD_VAR 0 1
76659: ARRAY
76660: PUSH
76661: LD_VAR 0 2
76665: ARRAY
76666: PUSH
76667: LD_INT 2
76669: ARRAY
76670: PPUSH
76671: LD_VAR 0 3
76675: PPUSH
76676: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
76680: LD_ADDR_EXP 115
76684: PUSH
76685: LD_EXP 115
76689: PPUSH
76690: LD_VAR 0 1
76694: PPUSH
76695: LD_EXP 115
76699: PUSH
76700: LD_VAR 0 1
76704: ARRAY
76705: PPUSH
76706: LD_VAR 0 2
76710: PPUSH
76711: CALL_OW 3
76715: PPUSH
76716: CALL_OW 1
76720: ST_TO_ADDR
// end ; end ;
76721: GO 76472
76723: POP
76724: POP
// end ;
76725: GO 76390
76727: POP
76728: POP
// end ;
76729: PPOPN 4
76731: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
76732: LD_INT 0
76734: PPUSH
76735: PPUSH
// result := false ;
76736: LD_ADDR_VAR 0 4
76740: PUSH
76741: LD_INT 0
76743: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
76744: LD_VAR 0 1
76748: PPUSH
76749: CALL_OW 264
76753: PUSH
76754: LD_INT 81
76756: EQUAL
76757: NOT
76758: IFFALSE 76762
// exit ;
76760: GO 77002
// index := GetElementIndex ( minersList , unit ) ;
76762: LD_ADDR_VAR 0 5
76766: PUSH
76767: LD_EXP 114
76771: PPUSH
76772: LD_VAR 0 1
76776: PPUSH
76777: CALL 19476 0 2
76781: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
76782: LD_EXP 115
76786: PUSH
76787: LD_VAR 0 5
76791: ARRAY
76792: PUSH
76793: LD_EXP 116
76797: GREATEREQUAL
76798: IFFALSE 76802
// exit ;
76800: GO 77002
// ComMoveXY ( unit , x , y ) ;
76802: LD_VAR 0 1
76806: PPUSH
76807: LD_VAR 0 2
76811: PPUSH
76812: LD_VAR 0 3
76816: PPUSH
76817: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
76821: LD_INT 35
76823: PPUSH
76824: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
76828: LD_VAR 0 1
76832: PPUSH
76833: LD_VAR 0 2
76837: PPUSH
76838: LD_VAR 0 3
76842: PPUSH
76843: CALL 51217 0 3
76847: NOT
76848: PUSH
76849: LD_VAR 0 1
76853: PPUSH
76854: CALL_OW 314
76858: AND
76859: IFFALSE 76863
// exit ;
76861: GO 77002
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
76863: LD_VAR 0 2
76867: PPUSH
76868: LD_VAR 0 3
76872: PPUSH
76873: CALL_OW 428
76877: PUSH
76878: LD_VAR 0 1
76882: EQUAL
76883: PUSH
76884: LD_VAR 0 1
76888: PPUSH
76889: CALL_OW 314
76893: NOT
76894: AND
76895: IFFALSE 76821
// PlaySoundXY ( x , y , PlantMine ) ;
76897: LD_VAR 0 2
76901: PPUSH
76902: LD_VAR 0 3
76906: PPUSH
76907: LD_STRING PlantMine
76909: PPUSH
76910: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
76914: LD_VAR 0 2
76918: PPUSH
76919: LD_VAR 0 3
76923: PPUSH
76924: LD_VAR 0 1
76928: PPUSH
76929: CALL_OW 255
76933: PPUSH
76934: LD_INT 0
76936: PPUSH
76937: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
76941: LD_ADDR_EXP 115
76945: PUSH
76946: LD_EXP 115
76950: PPUSH
76951: LD_VAR 0 5
76955: PUSH
76956: LD_EXP 115
76960: PUSH
76961: LD_VAR 0 5
76965: ARRAY
76966: PUSH
76967: LD_INT 1
76969: PLUS
76970: PUSH
76971: EMPTY
76972: LIST
76973: LIST
76974: PPUSH
76975: LD_VAR 0 2
76979: PUSH
76980: LD_VAR 0 3
76984: PUSH
76985: EMPTY
76986: LIST
76987: LIST
76988: PPUSH
76989: CALL 19691 0 3
76993: ST_TO_ADDR
// result := true ;
76994: LD_ADDR_VAR 0 4
76998: PUSH
76999: LD_INT 1
77001: ST_TO_ADDR
// end ;
77002: LD_VAR 0 4
77006: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
77007: LD_INT 0
77009: PPUSH
77010: PPUSH
77011: PPUSH
// if not unit in minersList then
77012: LD_VAR 0 1
77016: PUSH
77017: LD_EXP 114
77021: IN
77022: NOT
77023: IFFALSE 77027
// exit ;
77025: GO 77419
// index := GetElementIndex ( minersList , unit ) ;
77027: LD_ADDR_VAR 0 6
77031: PUSH
77032: LD_EXP 114
77036: PPUSH
77037: LD_VAR 0 1
77041: PPUSH
77042: CALL 19476 0 2
77046: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
77047: LD_ADDR_VAR 0 5
77051: PUSH
77052: DOUBLE
77053: LD_EXP 115
77057: PUSH
77058: LD_VAR 0 6
77062: ARRAY
77063: INC
77064: ST_TO_ADDR
77065: LD_INT 1
77067: PUSH
77068: FOR_DOWNTO
77069: IFFALSE 77230
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
77071: LD_EXP 115
77075: PUSH
77076: LD_VAR 0 6
77080: ARRAY
77081: PUSH
77082: LD_VAR 0 5
77086: ARRAY
77087: PUSH
77088: LD_INT 1
77090: ARRAY
77091: PUSH
77092: LD_VAR 0 2
77096: EQUAL
77097: PUSH
77098: LD_EXP 115
77102: PUSH
77103: LD_VAR 0 6
77107: ARRAY
77108: PUSH
77109: LD_VAR 0 5
77113: ARRAY
77114: PUSH
77115: LD_INT 2
77117: ARRAY
77118: PUSH
77119: LD_VAR 0 3
77123: EQUAL
77124: AND
77125: IFFALSE 77228
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77127: LD_EXP 115
77131: PUSH
77132: LD_VAR 0 6
77136: ARRAY
77137: PUSH
77138: LD_VAR 0 5
77142: ARRAY
77143: PUSH
77144: LD_INT 1
77146: ARRAY
77147: PPUSH
77148: LD_EXP 115
77152: PUSH
77153: LD_VAR 0 6
77157: ARRAY
77158: PUSH
77159: LD_VAR 0 5
77163: ARRAY
77164: PUSH
77165: LD_INT 2
77167: ARRAY
77168: PPUSH
77169: LD_VAR 0 1
77173: PPUSH
77174: CALL_OW 255
77178: PPUSH
77179: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77183: LD_ADDR_EXP 115
77187: PUSH
77188: LD_EXP 115
77192: PPUSH
77193: LD_VAR 0 6
77197: PPUSH
77198: LD_EXP 115
77202: PUSH
77203: LD_VAR 0 6
77207: ARRAY
77208: PPUSH
77209: LD_VAR 0 5
77213: PPUSH
77214: CALL_OW 3
77218: PPUSH
77219: CALL_OW 1
77223: ST_TO_ADDR
// exit ;
77224: POP
77225: POP
77226: GO 77419
// end ; end ;
77228: GO 77068
77230: POP
77231: POP
// for i := minerMinesList [ index ] downto 1 do
77232: LD_ADDR_VAR 0 5
77236: PUSH
77237: DOUBLE
77238: LD_EXP 115
77242: PUSH
77243: LD_VAR 0 6
77247: ARRAY
77248: INC
77249: ST_TO_ADDR
77250: LD_INT 1
77252: PUSH
77253: FOR_DOWNTO
77254: IFFALSE 77417
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
77256: LD_EXP 115
77260: PUSH
77261: LD_VAR 0 6
77265: ARRAY
77266: PUSH
77267: LD_VAR 0 5
77271: ARRAY
77272: PUSH
77273: LD_INT 1
77275: ARRAY
77276: PPUSH
77277: LD_EXP 115
77281: PUSH
77282: LD_VAR 0 6
77286: ARRAY
77287: PUSH
77288: LD_VAR 0 5
77292: ARRAY
77293: PUSH
77294: LD_INT 2
77296: ARRAY
77297: PPUSH
77298: LD_VAR 0 2
77302: PPUSH
77303: LD_VAR 0 3
77307: PPUSH
77308: CALL_OW 298
77312: PUSH
77313: LD_INT 6
77315: LESS
77316: IFFALSE 77415
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77318: LD_EXP 115
77322: PUSH
77323: LD_VAR 0 6
77327: ARRAY
77328: PUSH
77329: LD_VAR 0 5
77333: ARRAY
77334: PUSH
77335: LD_INT 1
77337: ARRAY
77338: PPUSH
77339: LD_EXP 115
77343: PUSH
77344: LD_VAR 0 6
77348: ARRAY
77349: PUSH
77350: LD_VAR 0 5
77354: ARRAY
77355: PUSH
77356: LD_INT 2
77358: ARRAY
77359: PPUSH
77360: LD_VAR 0 1
77364: PPUSH
77365: CALL_OW 255
77369: PPUSH
77370: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77374: LD_ADDR_EXP 115
77378: PUSH
77379: LD_EXP 115
77383: PPUSH
77384: LD_VAR 0 6
77388: PPUSH
77389: LD_EXP 115
77393: PUSH
77394: LD_VAR 0 6
77398: ARRAY
77399: PPUSH
77400: LD_VAR 0 5
77404: PPUSH
77405: CALL_OW 3
77409: PPUSH
77410: CALL_OW 1
77414: ST_TO_ADDR
// end ; end ;
77415: GO 77253
77417: POP
77418: POP
// end ;
77419: LD_VAR 0 4
77423: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
77424: LD_INT 0
77426: PPUSH
77427: PPUSH
77428: PPUSH
77429: PPUSH
77430: PPUSH
77431: PPUSH
77432: PPUSH
77433: PPUSH
77434: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
77435: LD_VAR 0 1
77439: PPUSH
77440: CALL_OW 264
77444: PUSH
77445: LD_INT 81
77447: EQUAL
77448: NOT
77449: PUSH
77450: LD_VAR 0 1
77454: PUSH
77455: LD_EXP 114
77459: IN
77460: NOT
77461: OR
77462: IFFALSE 77466
// exit ;
77464: GO 77788
// index := GetElementIndex ( minersList , unit ) ;
77466: LD_ADDR_VAR 0 6
77470: PUSH
77471: LD_EXP 114
77475: PPUSH
77476: LD_VAR 0 1
77480: PPUSH
77481: CALL 19476 0 2
77485: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
77486: LD_ADDR_VAR 0 8
77490: PUSH
77491: LD_EXP 116
77495: PUSH
77496: LD_EXP 115
77500: PUSH
77501: LD_VAR 0 6
77505: ARRAY
77506: MINUS
77507: ST_TO_ADDR
// if not minesFreeAmount then
77508: LD_VAR 0 8
77512: NOT
77513: IFFALSE 77517
// exit ;
77515: GO 77788
// tmp := [ ] ;
77517: LD_ADDR_VAR 0 7
77521: PUSH
77522: EMPTY
77523: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
77524: LD_ADDR_VAR 0 5
77528: PUSH
77529: DOUBLE
77530: LD_INT 1
77532: DEC
77533: ST_TO_ADDR
77534: LD_VAR 0 8
77538: PUSH
77539: FOR_TO
77540: IFFALSE 77735
// begin _d := rand ( 0 , 5 ) ;
77542: LD_ADDR_VAR 0 11
77546: PUSH
77547: LD_INT 0
77549: PPUSH
77550: LD_INT 5
77552: PPUSH
77553: CALL_OW 12
77557: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
77558: LD_ADDR_VAR 0 12
77562: PUSH
77563: LD_INT 2
77565: PPUSH
77566: LD_INT 6
77568: PPUSH
77569: CALL_OW 12
77573: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
77574: LD_ADDR_VAR 0 9
77578: PUSH
77579: LD_VAR 0 2
77583: PPUSH
77584: LD_VAR 0 11
77588: PPUSH
77589: LD_VAR 0 12
77593: PPUSH
77594: CALL_OW 272
77598: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
77599: LD_ADDR_VAR 0 10
77603: PUSH
77604: LD_VAR 0 3
77608: PPUSH
77609: LD_VAR 0 11
77613: PPUSH
77614: LD_VAR 0 12
77618: PPUSH
77619: CALL_OW 273
77623: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
77624: LD_VAR 0 9
77628: PPUSH
77629: LD_VAR 0 10
77633: PPUSH
77634: CALL_OW 488
77638: PUSH
77639: LD_VAR 0 9
77643: PUSH
77644: LD_VAR 0 10
77648: PUSH
77649: EMPTY
77650: LIST
77651: LIST
77652: PUSH
77653: LD_VAR 0 7
77657: IN
77658: NOT
77659: AND
77660: PUSH
77661: LD_VAR 0 9
77665: PPUSH
77666: LD_VAR 0 10
77670: PPUSH
77671: CALL_OW 458
77675: NOT
77676: AND
77677: IFFALSE 77719
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
77679: LD_ADDR_VAR 0 7
77683: PUSH
77684: LD_VAR 0 7
77688: PPUSH
77689: LD_VAR 0 7
77693: PUSH
77694: LD_INT 1
77696: PLUS
77697: PPUSH
77698: LD_VAR 0 9
77702: PUSH
77703: LD_VAR 0 10
77707: PUSH
77708: EMPTY
77709: LIST
77710: LIST
77711: PPUSH
77712: CALL_OW 1
77716: ST_TO_ADDR
77717: GO 77733
// i := i - 1 ;
77719: LD_ADDR_VAR 0 5
77723: PUSH
77724: LD_VAR 0 5
77728: PUSH
77729: LD_INT 1
77731: MINUS
77732: ST_TO_ADDR
// end ;
77733: GO 77539
77735: POP
77736: POP
// for i in tmp do
77737: LD_ADDR_VAR 0 5
77741: PUSH
77742: LD_VAR 0 7
77746: PUSH
77747: FOR_IN
77748: IFFALSE 77786
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
77750: LD_VAR 0 1
77754: PPUSH
77755: LD_VAR 0 5
77759: PUSH
77760: LD_INT 1
77762: ARRAY
77763: PPUSH
77764: LD_VAR 0 5
77768: PUSH
77769: LD_INT 2
77771: ARRAY
77772: PPUSH
77773: CALL 76732 0 3
77777: NOT
77778: IFFALSE 77784
// exit ;
77780: POP
77781: POP
77782: GO 77788
77784: GO 77747
77786: POP
77787: POP
// end ;
77788: LD_VAR 0 4
77792: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
77793: LD_INT 0
77795: PPUSH
77796: PPUSH
77797: PPUSH
77798: PPUSH
77799: PPUSH
77800: PPUSH
77801: PPUSH
// if not GetClass ( unit ) = class_sniper then
77802: LD_VAR 0 1
77806: PPUSH
77807: CALL_OW 257
77811: PUSH
77812: LD_INT 5
77814: EQUAL
77815: NOT
77816: IFFALSE 77820
// exit ;
77818: GO 78208
// dist := 8 ;
77820: LD_ADDR_VAR 0 5
77824: PUSH
77825: LD_INT 8
77827: ST_TO_ADDR
// viewRange := 12 ;
77828: LD_ADDR_VAR 0 7
77832: PUSH
77833: LD_INT 12
77835: ST_TO_ADDR
// side := GetSide ( unit ) ;
77836: LD_ADDR_VAR 0 6
77840: PUSH
77841: LD_VAR 0 1
77845: PPUSH
77846: CALL_OW 255
77850: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
77851: LD_INT 61
77853: PPUSH
77854: LD_VAR 0 6
77858: PPUSH
77859: CALL_OW 321
77863: PUSH
77864: LD_INT 2
77866: EQUAL
77867: IFFALSE 77877
// viewRange := 16 ;
77869: LD_ADDR_VAR 0 7
77873: PUSH
77874: LD_INT 16
77876: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
77877: LD_VAR 0 1
77881: PPUSH
77882: LD_VAR 0 2
77886: PPUSH
77887: LD_VAR 0 3
77891: PPUSH
77892: CALL_OW 297
77896: PUSH
77897: LD_VAR 0 5
77901: GREATER
77902: IFFALSE 77981
// begin ComMoveXY ( unit , x , y ) ;
77904: LD_VAR 0 1
77908: PPUSH
77909: LD_VAR 0 2
77913: PPUSH
77914: LD_VAR 0 3
77918: PPUSH
77919: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77923: LD_INT 35
77925: PPUSH
77926: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
77930: LD_VAR 0 1
77934: PPUSH
77935: LD_VAR 0 2
77939: PPUSH
77940: LD_VAR 0 3
77944: PPUSH
77945: CALL 51217 0 3
77949: NOT
77950: IFFALSE 77954
// exit ;
77952: GO 78208
// until GetDistUnitXY ( unit , x , y ) < dist ;
77954: LD_VAR 0 1
77958: PPUSH
77959: LD_VAR 0 2
77963: PPUSH
77964: LD_VAR 0 3
77968: PPUSH
77969: CALL_OW 297
77973: PUSH
77974: LD_VAR 0 5
77978: LESS
77979: IFFALSE 77923
// end ; ComTurnXY ( unit , x , y ) ;
77981: LD_VAR 0 1
77985: PPUSH
77986: LD_VAR 0 2
77990: PPUSH
77991: LD_VAR 0 3
77995: PPUSH
77996: CALL_OW 118
// wait ( 5 ) ;
78000: LD_INT 5
78002: PPUSH
78003: CALL_OW 67
// _d := GetDir ( unit ) ;
78007: LD_ADDR_VAR 0 10
78011: PUSH
78012: LD_VAR 0 1
78016: PPUSH
78017: CALL_OW 254
78021: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
78022: LD_ADDR_VAR 0 8
78026: PUSH
78027: LD_VAR 0 1
78031: PPUSH
78032: CALL_OW 250
78036: PPUSH
78037: LD_VAR 0 10
78041: PPUSH
78042: LD_VAR 0 5
78046: PPUSH
78047: CALL_OW 272
78051: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
78052: LD_ADDR_VAR 0 9
78056: PUSH
78057: LD_VAR 0 1
78061: PPUSH
78062: CALL_OW 251
78066: PPUSH
78067: LD_VAR 0 10
78071: PPUSH
78072: LD_VAR 0 5
78076: PPUSH
78077: CALL_OW 273
78081: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78082: LD_VAR 0 8
78086: PPUSH
78087: LD_VAR 0 9
78091: PPUSH
78092: CALL_OW 488
78096: NOT
78097: IFFALSE 78101
// exit ;
78099: GO 78208
// ComAnimCustom ( unit , 1 ) ;
78101: LD_VAR 0 1
78105: PPUSH
78106: LD_INT 1
78108: PPUSH
78109: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
78113: LD_VAR 0 8
78117: PPUSH
78118: LD_VAR 0 9
78122: PPUSH
78123: LD_VAR 0 6
78127: PPUSH
78128: LD_VAR 0 7
78132: PPUSH
78133: CALL_OW 330
// repeat wait ( 1 ) ;
78137: LD_INT 1
78139: PPUSH
78140: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
78144: LD_VAR 0 1
78148: PPUSH
78149: CALL_OW 316
78153: PUSH
78154: LD_VAR 0 1
78158: PPUSH
78159: CALL_OW 314
78163: OR
78164: PUSH
78165: LD_VAR 0 1
78169: PPUSH
78170: CALL_OW 302
78174: NOT
78175: OR
78176: PUSH
78177: LD_VAR 0 1
78181: PPUSH
78182: CALL_OW 301
78186: OR
78187: IFFALSE 78137
// RemoveSeeing ( _x , _y , side ) ;
78189: LD_VAR 0 8
78193: PPUSH
78194: LD_VAR 0 9
78198: PPUSH
78199: LD_VAR 0 6
78203: PPUSH
78204: CALL_OW 331
// end ; end_of_file
78208: LD_VAR 0 4
78212: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78213: LD_VAR 0 1
78217: PPUSH
78218: LD_VAR 0 2
78222: PPUSH
78223: LD_VAR 0 3
78227: PPUSH
78228: LD_VAR 0 4
78232: PPUSH
78233: LD_VAR 0 5
78237: PPUSH
78238: LD_VAR 0 6
78242: PPUSH
78243: CALL 57672 0 6
// end ;
78247: PPOPN 6
78249: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78250: LD_INT 0
78252: PPUSH
// begin if not units then
78253: LD_VAR 0 1
78257: NOT
78258: IFFALSE 78262
// exit ;
78260: GO 78262
// end ;
78262: PPOPN 7
78264: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78265: CALL 57559 0 0
// end ; end_of_file
78269: PPOPN 1
78271: END
