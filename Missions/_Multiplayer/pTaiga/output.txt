// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 3294 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3678 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 2 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 2
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 11
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 240 , 200 ] ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_INT 240
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 19
 849: PUSH
 850: LD_INT 1
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: LD_INT 6
 867: PUSH
 868: LD_INT 7
 870: PUSH
 871: LD_INT 8
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , CenterArea ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 18
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 11
 894: PUSH
 895: LD_INT 12
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 14
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_EXP 19
 915: UNION
 916: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 917: LD_VAR 0 1
 921: PUSH
 922: LD_INT 2
 924: EQUAL
 925: IFFALSE 937
// baseLevel := 1 else
 927: LD_ADDR_VAR 0 7
 931: PUSH
 932: LD_INT 1
 934: ST_TO_ADDR
 935: GO 951
// baseLevel := mpGameSettings [ 1 ] ;
 937: LD_ADDR_VAR 0 7
 941: PUSH
 942: LD_EXP 6
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 951: LD_ADDR_EXP 24
 955: PUSH
 956: LD_EXP 6
 960: PUSH
 961: LD_INT 2
 963: ARRAY
 964: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 965: LD_ADDR_EXP 25
 969: PUSH
 970: LD_EXP 6
 974: PUSH
 975: LD_INT 3
 977: ARRAY
 978: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 979: LD_ADDR_EXP 15
 983: PUSH
 984: LD_EXP 6
 988: PUSH
 989: LD_INT 4
 991: ARRAY
 992: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 993: LD_ADDR_EXP 27
 997: PUSH
 998: LD_EXP 6
1002: PUSH
1003: LD_INT 5
1005: ARRAY
1006: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1007: LD_ADDR_VAR 0 5
1011: PUSH
1012: LD_EXP 6
1016: PUSH
1017: LD_INT 6
1019: ARRAY
1020: PUSH
1021: LD_INT 0
1023: GREATER
1024: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1025: LD_ADDR_VAR 0 6
1029: PUSH
1030: LD_EXP 6
1034: PUSH
1035: LD_INT 7
1037: ARRAY
1038: PUSH
1039: LD_INT 0
1041: GREATER
1042: ST_TO_ADDR
// kingCamArea := 0 ;
1043: LD_ADDR_EXP 2
1047: PUSH
1048: LD_INT 0
1050: ST_TO_ADDR
// kingArea := 0 ;
1051: LD_ADDR_EXP 1
1055: PUSH
1056: LD_INT 0
1058: ST_TO_ADDR
// if gameType = GameTypeKing then
1059: LD_VAR 0 1
1063: PUSH
1064: LD_INT 3
1066: EQUAL
1067: IFFALSE 1107
// begin mpKingArea := 0 ;
1069: LD_ADDR_EXP 34
1073: PUSH
1074: LD_INT 0
1076: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1077: LD_ADDR_EXP 35
1081: PUSH
1082: LD_EXP 6
1086: PUSH
1087: LD_INT 8
1089: ARRAY
1090: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1091: LD_ADDR_EXP 37
1095: PUSH
1096: LD_EXP 6
1100: PUSH
1101: LD_INT 10
1103: ARRAY
1104: ST_TO_ADDR
// end else
1105: GO 1131
// begin mpKingArea := 0 ;
1107: LD_ADDR_EXP 34
1111: PUSH
1112: LD_INT 0
1114: ST_TO_ADDR
// mpPoints := 0 ;
1115: LD_ADDR_EXP 35
1119: PUSH
1120: LD_INT 0
1122: ST_TO_ADDR
// mpEmissions := 0 ;
1123: LD_ADDR_EXP 37
1127: PUSH
1128: LD_INT 0
1130: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1131: LD_EXP 6
1135: PUSH
1136: LD_INT 9
1138: ARRAY
1139: IFFALSE 1271
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1141: LD_ADDR_EXP 36
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 2
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: LD_INT 1
1169: PUSH
1170: LD_INT 1
1172: PUSH
1173: LD_INT 3
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: PUSH
1186: LD_INT 12
1188: PUSH
1189: LD_INT 1
1191: PUSH
1192: LD_INT 1
1194: PUSH
1195: LD_INT 24
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: PUSH
1204: LD_INT 12
1206: PUSH
1207: LD_INT 1
1209: PUSH
1210: LD_INT 1
1212: PUSH
1213: LD_INT 23
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PUSH
1226: LD_INT 21
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: LD_INT 1
1234: PUSH
1235: LD_INT 42
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: PUSH
1244: LD_INT 21
1246: PUSH
1247: LD_INT 1
1249: PUSH
1250: LD_INT 1
1252: PUSH
1253: LD_INT 42
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: LIST
1270: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: LD_EXP 6
1280: PUSH
1281: LD_INT 11
1283: ARRAY
1284: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1285: LD_ADDR_EXP 22
1289: PUSH
1290: LD_EXP 6
1294: PUSH
1295: LD_INT 12
1297: ARRAY
1298: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1299: LD_ADDR_EXP 26
1303: PUSH
1304: LD_EXP 6
1308: PUSH
1309: LD_INT 13
1311: ARRAY
1312: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1313: LD_ADDR_EXP 33
1317: PUSH
1318: LD_EXP 6
1322: PUSH
1323: LD_INT 14
1325: ARRAY
1326: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1327: LD_ADDR_EXP 30
1331: PUSH
1332: LD_EXP 6
1336: PUSH
1337: LD_INT 15
1339: ARRAY
1340: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1341: LD_ADDR_EXP 28
1345: PUSH
1346: LD_EXP 6
1350: PUSH
1351: LD_INT 18
1353: ARRAY
1354: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1355: LD_ADDR_EXP 20
1359: PUSH
1360: LD_EXP 6
1364: PUSH
1365: LD_INT 21
1367: ARRAY
1368: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1369: LD_ADDR_EXP 31
1373: PUSH
1374: LD_INT 19
1376: PUSH
1377: LD_INT 20
1379: PUSH
1380: LD_INT 21
1382: PUSH
1383: LD_INT 22
1385: PUSH
1386: LD_INT 23
1388: PUSH
1389: LD_INT 24
1391: PUSH
1392: LD_INT 25
1394: PUSH
1395: LD_INT 26
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 0 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 4 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 1 ) , GetBuildingFromArea ( depotArea8 , 0 ) ] ;
1408: LD_ADDR_VAR 0 8
1412: PUSH
1413: LD_INT 27
1415: PPUSH
1416: LD_INT 0
1418: PPUSH
1419: CALL 55769 0 2
1423: PUSH
1424: LD_INT 35
1426: PPUSH
1427: LD_INT 2
1429: PPUSH
1430: CALL 55769 0 2
1434: PUSH
1435: LD_INT 43
1437: PPUSH
1438: LD_INT 4
1440: PPUSH
1441: CALL 55769 0 2
1445: PUSH
1446: LD_INT 51
1448: PPUSH
1449: LD_INT 3
1451: PPUSH
1452: CALL 55769 0 2
1456: PUSH
1457: LD_INT 59
1459: PPUSH
1460: LD_INT 3
1462: PPUSH
1463: CALL 55769 0 2
1467: PUSH
1468: LD_INT 67
1470: PPUSH
1471: LD_INT 5
1473: PPUSH
1474: CALL 55769 0 2
1478: PUSH
1479: LD_INT 75
1481: PPUSH
1482: LD_INT 1
1484: PPUSH
1485: CALL 55769 0 2
1489: PUSH
1490: LD_INT 83
1492: PPUSH
1493: LD_INT 0
1495: PPUSH
1496: CALL 55769 0 2
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: DOUBLE
1517: LD_INT 1
1519: DEC
1520: ST_TO_ADDR
1521: LD_VAR 0 8
1525: PPUSH
1526: CALL 15084 0 1
1530: PUSH
1531: FOR_TO
1532: IFFALSE 1636
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1534: LD_ADDR_EXP 21
1538: PUSH
1539: LD_EXP 21
1543: PPUSH
1544: LD_VAR 0 3
1548: PPUSH
1549: LD_VAR 0 8
1553: PUSH
1554: LD_VAR 0 3
1558: ARRAY
1559: PUSH
1560: LD_INT 1
1562: ARRAY
1563: PPUSH
1564: LD_VAR 0 8
1568: PUSH
1569: LD_VAR 0 3
1573: ARRAY
1574: PUSH
1575: LD_INT 3
1577: ARRAY
1578: PPUSH
1579: LD_INT 10
1581: PPUSH
1582: CALL_OW 272
1586: PUSH
1587: LD_VAR 0 8
1591: PUSH
1592: LD_VAR 0 3
1596: ARRAY
1597: PUSH
1598: LD_INT 2
1600: ARRAY
1601: PPUSH
1602: LD_VAR 0 8
1606: PUSH
1607: LD_VAR 0 3
1611: ARRAY
1612: PUSH
1613: LD_INT 3
1615: ARRAY
1616: PPUSH
1617: LD_INT 10
1619: PPUSH
1620: CALL_OW 273
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PPUSH
1629: CALL_OW 1
1633: ST_TO_ADDR
1634: GO 1531
1636: POP
1637: POP
// if hasOil then
1638: LD_VAR 0 5
1642: IFFALSE 1781
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1644: LD_ADDR_VAR 0 4
1648: PUSH
1649: LD_EXP 6
1653: PUSH
1654: LD_INT 6
1656: ARRAY
1657: PUSH
1658: LD_INT 2
1660: EQUAL
1661: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1662: LD_ADDR_EXP 12
1666: PUSH
1667: LD_INT 33
1669: PPUSH
1670: LD_VAR 0 4
1674: PPUSH
1675: CALL 55602 0 2
1679: PUSH
1680: LD_INT 41
1682: PPUSH
1683: LD_VAR 0 4
1687: PPUSH
1688: CALL 55602 0 2
1692: PUSH
1693: LD_INT 49
1695: PPUSH
1696: LD_VAR 0 4
1700: PPUSH
1701: CALL 55602 0 2
1705: PUSH
1706: LD_INT 57
1708: PPUSH
1709: LD_VAR 0 4
1713: PPUSH
1714: CALL 55602 0 2
1718: PUSH
1719: LD_INT 65
1721: PPUSH
1722: LD_VAR 0 4
1726: PPUSH
1727: CALL 55602 0 2
1731: PUSH
1732: LD_INT 73
1734: PPUSH
1735: LD_VAR 0 4
1739: PPUSH
1740: CALL 55602 0 2
1744: PUSH
1745: LD_INT 81
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL 55602 0 2
1757: PUSH
1758: LD_INT 89
1760: PPUSH
1761: LD_VAR 0 4
1765: PPUSH
1766: CALL 55602 0 2
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: ST_TO_ADDR
// end ; if hasSib then
1781: LD_VAR 0 6
1785: IFFALSE 1924
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1787: LD_ADDR_VAR 0 4
1791: PUSH
1792: LD_EXP 6
1796: PUSH
1797: LD_INT 7
1799: ARRAY
1800: PUSH
1801: LD_INT 2
1803: EQUAL
1804: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1805: LD_ADDR_EXP 13
1809: PUSH
1810: LD_INT 34
1812: PPUSH
1813: LD_VAR 0 4
1817: PPUSH
1818: CALL 55602 0 2
1822: PUSH
1823: LD_INT 42
1825: PPUSH
1826: LD_VAR 0 4
1830: PPUSH
1831: CALL 55602 0 2
1835: PUSH
1836: LD_INT 50
1838: PPUSH
1839: LD_VAR 0 4
1843: PPUSH
1844: CALL 55602 0 2
1848: PUSH
1849: LD_INT 58
1851: PPUSH
1852: LD_VAR 0 4
1856: PPUSH
1857: CALL 55602 0 2
1861: PUSH
1862: LD_INT 66
1864: PPUSH
1865: LD_VAR 0 4
1869: PPUSH
1870: CALL 55602 0 2
1874: PUSH
1875: LD_INT 74
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL 55602 0 2
1887: PUSH
1888: LD_INT 82
1890: PPUSH
1891: LD_VAR 0 4
1895: PPUSH
1896: CALL 55602 0 2
1900: PUSH
1901: LD_INT 90
1903: PPUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: CALL 55602 0 2
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1924: LD_VAR 0 7
1928: PUSH
1929: LD_INT 1
1931: GREATEREQUAL
1932: IFFALSE 1944
// mpDepots := startPos ;
1934: LD_ADDR_EXP 14
1938: PUSH
1939: LD_VAR 0 8
1943: ST_TO_ADDR
// if baseLevel >= 2 then
1944: LD_VAR 0 7
1948: PUSH
1949: LD_INT 2
1951: GREATEREQUAL
1952: IFFALSE 2625
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1c , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1d , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2c , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2d , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3c , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3d , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4c , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4d , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5c , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5d , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6c , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6d , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7c , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7d , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8c , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8d , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 3 ) ] ] ;
1954: LD_ADDR_EXP 17
1958: PUSH
1959: LD_INT 31
1961: PUSH
1962: LD_INT 29
1964: PPUSH
1965: LD_INT 3
1967: PPUSH
1968: CALL 55769 0 2
1972: ADD
1973: PUSH
1974: LD_INT 31
1976: PUSH
1977: LD_INT 30
1979: PPUSH
1980: LD_INT 3
1982: PPUSH
1983: CALL 55769 0 2
1987: ADD
1988: PUSH
1989: LD_INT 31
1991: PUSH
1992: LD_INT 31
1994: PPUSH
1995: LD_INT 5
1997: PPUSH
1998: CALL 55769 0 2
2002: ADD
2003: PUSH
2004: LD_INT 31
2006: PUSH
2007: LD_INT 32
2009: PPUSH
2010: LD_INT 2
2012: PPUSH
2013: CALL 55769 0 2
2017: ADD
2018: PUSH
2019: LD_INT 4
2021: PUSH
2022: LD_INT 28
2024: PPUSH
2025: LD_INT 3
2027: PPUSH
2028: CALL 55769 0 2
2032: ADD
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: PUSH
2041: LD_INT 31
2043: PUSH
2044: LD_INT 37
2046: PPUSH
2047: LD_INT 3
2049: PPUSH
2050: CALL 55769 0 2
2054: ADD
2055: PUSH
2056: LD_INT 31
2058: PUSH
2059: LD_INT 38
2061: PPUSH
2062: LD_INT 5
2064: PPUSH
2065: CALL 55769 0 2
2069: ADD
2070: PUSH
2071: LD_INT 31
2073: PUSH
2074: LD_INT 39
2076: PPUSH
2077: LD_INT 5
2079: PPUSH
2080: CALL 55769 0 2
2084: ADD
2085: PUSH
2086: LD_INT 31
2088: PUSH
2089: LD_INT 40
2091: PPUSH
2092: LD_INT 0
2094: PPUSH
2095: CALL 55769 0 2
2099: ADD
2100: PUSH
2101: LD_INT 4
2103: PUSH
2104: LD_INT 36
2106: PPUSH
2107: LD_INT 5
2109: PPUSH
2110: CALL 55769 0 2
2114: ADD
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: PUSH
2123: LD_INT 31
2125: PUSH
2126: LD_INT 45
2128: PPUSH
2129: LD_INT 1
2131: PPUSH
2132: CALL 55769 0 2
2136: ADD
2137: PUSH
2138: LD_INT 31
2140: PUSH
2141: LD_INT 46
2143: PPUSH
2144: LD_INT 1
2146: PPUSH
2147: CALL 55769 0 2
2151: ADD
2152: PUSH
2153: LD_INT 31
2155: PUSH
2156: LD_INT 47
2158: PPUSH
2159: LD_INT 5
2161: PPUSH
2162: CALL 55769 0 2
2166: ADD
2167: PUSH
2168: LD_INT 31
2170: PUSH
2171: LD_INT 48
2173: PPUSH
2174: LD_INT 5
2176: PPUSH
2177: CALL 55769 0 2
2181: ADD
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: LD_INT 44
2188: PPUSH
2189: LD_INT 1
2191: PPUSH
2192: CALL 55769 0 2
2196: ADD
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 31
2207: PUSH
2208: LD_INT 53
2210: PPUSH
2211: LD_INT 0
2213: PPUSH
2214: CALL 55769 0 2
2218: ADD
2219: PUSH
2220: LD_INT 31
2222: PUSH
2223: LD_INT 54
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: CALL 55769 0 2
2233: ADD
2234: PUSH
2235: LD_INT 31
2237: PUSH
2238: LD_INT 55
2240: PPUSH
2241: LD_INT 5
2243: PPUSH
2244: CALL 55769 0 2
2248: ADD
2249: PUSH
2250: LD_INT 31
2252: PUSH
2253: LD_INT 56
2255: PPUSH
2256: LD_INT 2
2258: PPUSH
2259: CALL 55769 0 2
2263: ADD
2264: PUSH
2265: LD_INT 4
2267: PUSH
2268: LD_INT 52
2270: PPUSH
2271: LD_INT 0
2273: PPUSH
2274: CALL 55769 0 2
2278: ADD
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: PUSH
2287: LD_INT 31
2289: PUSH
2290: LD_INT 61
2292: PPUSH
2293: LD_INT 0
2295: PPUSH
2296: CALL 55769 0 2
2300: ADD
2301: PUSH
2302: LD_INT 31
2304: PUSH
2305: LD_INT 62
2307: PPUSH
2308: LD_INT 0
2310: PPUSH
2311: CALL 55769 0 2
2315: ADD
2316: PUSH
2317: LD_INT 31
2319: PUSH
2320: LD_INT 63
2322: PPUSH
2323: LD_INT 2
2325: PPUSH
2326: CALL 55769 0 2
2330: ADD
2331: PUSH
2332: LD_INT 31
2334: PUSH
2335: LD_INT 64
2337: PPUSH
2338: LD_INT 2
2340: PPUSH
2341: CALL 55769 0 2
2345: ADD
2346: PUSH
2347: LD_INT 4
2349: PUSH
2350: LD_INT 60
2352: PPUSH
2353: LD_INT 0
2355: PPUSH
2356: CALL 55769 0 2
2360: ADD
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: PUSH
2369: LD_INT 31
2371: PUSH
2372: LD_INT 69
2374: PPUSH
2375: LD_INT 0
2377: PPUSH
2378: CALL 55769 0 2
2382: ADD
2383: PUSH
2384: LD_INT 31
2386: PUSH
2387: LD_INT 70
2389: PPUSH
2390: LD_INT 3
2392: PPUSH
2393: CALL 55769 0 2
2397: ADD
2398: PUSH
2399: LD_INT 31
2401: PUSH
2402: LD_INT 71
2404: PPUSH
2405: LD_INT 2
2407: PPUSH
2408: CALL 55769 0 2
2412: ADD
2413: PUSH
2414: LD_INT 31
2416: PUSH
2417: LD_INT 72
2419: PPUSH
2420: LD_INT 2
2422: PPUSH
2423: CALL 55769 0 2
2427: ADD
2428: PUSH
2429: LD_INT 4
2431: PUSH
2432: LD_INT 68
2434: PPUSH
2435: LD_INT 2
2437: PPUSH
2438: CALL 55769 0 2
2442: ADD
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 31
2453: PUSH
2454: LD_INT 77
2456: PPUSH
2457: LD_INT 4
2459: PPUSH
2460: CALL 55769 0 2
2464: ADD
2465: PUSH
2466: LD_INT 31
2468: PUSH
2469: LD_INT 78
2471: PPUSH
2472: LD_INT 4
2474: PPUSH
2475: CALL 55769 0 2
2479: ADD
2480: PUSH
2481: LD_INT 31
2483: PUSH
2484: LD_INT 79
2486: PPUSH
2487: LD_INT 2
2489: PPUSH
2490: CALL 55769 0 2
2494: ADD
2495: PUSH
2496: LD_INT 31
2498: PUSH
2499: LD_INT 80
2501: PPUSH
2502: LD_INT 2
2504: PPUSH
2505: CALL 55769 0 2
2509: ADD
2510: PUSH
2511: LD_INT 4
2513: PUSH
2514: LD_INT 76
2516: PPUSH
2517: LD_INT 4
2519: PPUSH
2520: CALL 55769 0 2
2524: ADD
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: PUSH
2533: LD_INT 31
2535: PUSH
2536: LD_INT 85
2538: PPUSH
2539: LD_INT 3
2541: PPUSH
2542: CALL 55769 0 2
2546: ADD
2547: PUSH
2548: LD_INT 31
2550: PUSH
2551: LD_INT 86
2553: PPUSH
2554: LD_INT 2
2556: PPUSH
2557: CALL 55769 0 2
2561: ADD
2562: PUSH
2563: LD_INT 31
2565: PUSH
2566: LD_INT 87
2568: PPUSH
2569: LD_INT 2
2571: PPUSH
2572: CALL 55769 0 2
2576: ADD
2577: PUSH
2578: LD_INT 31
2580: PUSH
2581: LD_INT 88
2583: PPUSH
2584: LD_INT 5
2586: PPUSH
2587: CALL 55769 0 2
2591: ADD
2592: PUSH
2593: LD_INT 4
2595: PUSH
2596: LD_INT 84
2598: PPUSH
2599: LD_INT 3
2601: PPUSH
2602: CALL 55769 0 2
2606: ADD
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: ST_TO_ADDR
// end ; end ;
2625: LD_VAR 0 2
2629: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2630: GO 2632
2632: DISABLE
2633: LD_INT 0
2635: PPUSH
2636: PPUSH
2637: PPUSH
2638: PPUSH
2639: PPUSH
2640: PPUSH
2641: PPUSH
2642: PPUSH
// begin if not mpShipments then
2643: LD_EXP 27
2647: NOT
2648: IFFALSE 2652
// exit ;
2650: GO 3148
// case mpShipments of 1 :
2652: LD_EXP 27
2656: PUSH
2657: LD_INT 1
2659: DOUBLE
2660: EQUAL
2661: IFTRUE 2665
2663: GO 2700
2665: POP
// begin time := 0 0$30 ;
2666: LD_ADDR_VAR 0 5
2670: PUSH
2671: LD_INT 1050
2673: ST_TO_ADDR
// normalTime := 0 0$30 ;
2674: LD_ADDR_VAR 0 6
2678: PUSH
2679: LD_INT 1050
2681: ST_TO_ADDR
// maxTime := 1 1$20 ;
2682: LD_ADDR_VAR 0 8
2686: PUSH
2687: LD_INT 2800
2689: ST_TO_ADDR
// delayTime := 0 0$5 ;
2690: LD_ADDR_VAR 0 7
2694: PUSH
2695: LD_INT 175
2697: ST_TO_ADDR
// end ; 2 :
2698: GO 2830
2700: LD_INT 2
2702: DOUBLE
2703: EQUAL
2704: IFTRUE 2708
2706: GO 2743
2708: POP
// begin time := 0 0$25 ;
2709: LD_ADDR_VAR 0 5
2713: PUSH
2714: LD_INT 875
2716: ST_TO_ADDR
// normalTime := 0 0$25 ;
2717: LD_ADDR_VAR 0 6
2721: PUSH
2722: LD_INT 875
2724: ST_TO_ADDR
// maxTime := 1 1$10 ;
2725: LD_ADDR_VAR 0 8
2729: PUSH
2730: LD_INT 2450
2732: ST_TO_ADDR
// delayTime := 0 0$4 ;
2733: LD_ADDR_VAR 0 7
2737: PUSH
2738: LD_INT 140
2740: ST_TO_ADDR
// end ; 3 :
2741: GO 2830
2743: LD_INT 3
2745: DOUBLE
2746: EQUAL
2747: IFTRUE 2751
2749: GO 2786
2751: POP
// begin time := 0 0$20 ;
2752: LD_ADDR_VAR 0 5
2756: PUSH
2757: LD_INT 700
2759: ST_TO_ADDR
// normalTime := 0 0$20 ;
2760: LD_ADDR_VAR 0 6
2764: PUSH
2765: LD_INT 700
2767: ST_TO_ADDR
// maxTime := 1 1$00 ;
2768: LD_ADDR_VAR 0 8
2772: PUSH
2773: LD_INT 2100
2775: ST_TO_ADDR
// delayTime := 0 0$3 ;
2776: LD_ADDR_VAR 0 7
2780: PUSH
2781: LD_INT 105
2783: ST_TO_ADDR
// end ; 4 :
2784: GO 2830
2786: LD_INT 4
2788: DOUBLE
2789: EQUAL
2790: IFTRUE 2794
2792: GO 2829
2794: POP
// begin time := 0 0$15 ;
2795: LD_ADDR_VAR 0 5
2799: PUSH
2800: LD_INT 525
2802: ST_TO_ADDR
// normalTime := 0 0$15 ;
2803: LD_ADDR_VAR 0 6
2807: PUSH
2808: LD_INT 525
2810: ST_TO_ADDR
// maxTime := 0 0$55 ;
2811: LD_ADDR_VAR 0 8
2815: PUSH
2816: LD_INT 1925
2818: ST_TO_ADDR
// delayTime := 0 0$2 ;
2819: LD_ADDR_VAR 0 7
2823: PUSH
2824: LD_INT 70
2826: ST_TO_ADDR
// end ; end ;
2827: GO 2830
2829: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , HillArea1 , HillArea2 , OuterArea1 , OuterArea2 ] ;
2830: LD_ADDR_VAR 0 4
2834: PUSH
2835: LD_INT 10
2837: PUSH
2838: LD_INT 11
2840: PUSH
2841: LD_INT 12
2843: PUSH
2844: LD_INT 13
2846: PUSH
2847: LD_INT 15
2849: PUSH
2850: LD_INT 16
2852: PUSH
2853: LD_INT 17
2855: PUSH
2856: LD_INT 18
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: LIST
2868: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2869: LD_ADDR_VAR 0 3
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: LD_INT 2
2879: PUSH
2880: LD_INT 3
2882: PUSH
2883: LD_INT 4
2885: PUSH
2886: LD_INT 5
2888: PUSH
2889: LD_INT 6
2891: PUSH
2892: LD_INT 7
2894: PUSH
2895: LD_INT 8
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: LIST
2902: LIST
2903: LIST
2904: LIST
2905: LIST
2906: LIST
2907: ST_TO_ADDR
// for i := 1 to 8 do
2908: LD_ADDR_VAR 0 1
2912: PUSH
2913: DOUBLE
2914: LD_INT 1
2916: DEC
2917: ST_TO_ADDR
2918: LD_INT 8
2920: PUSH
2921: FOR_TO
2922: IFFALSE 2969
// begin if not mpSidePositions [ i ] then
2924: LD_EXP 7
2928: PUSH
2929: LD_VAR 0 1
2933: ARRAY
2934: NOT
2935: IFFALSE 2939
// continue ;
2937: GO 2921
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2939: LD_ADDR_VAR 0 4
2943: PUSH
2944: LD_VAR 0 4
2948: PUSH
2949: LD_VAR 0 3
2953: PUSH
2954: LD_EXP 7
2958: PUSH
2959: LD_VAR 0 1
2963: ARRAY
2964: ARRAY
2965: ADD
2966: ST_TO_ADDR
// end ;
2967: GO 2921
2969: POP
2970: POP
// x := 1 ;
2971: LD_ADDR_VAR 0 2
2975: PUSH
2976: LD_INT 1
2978: ST_TO_ADDR
// repeat wait ( time ) ;
2979: LD_VAR 0 5
2983: PPUSH
2984: CALL_OW 67
// x := Inc ( x ) ;
2988: LD_ADDR_VAR 0 2
2992: PUSH
2993: LD_VAR 0 2
2997: PPUSH
2998: CALL 52423 0 1
3002: ST_TO_ADDR
// if x > 5 then
3003: LD_VAR 0 2
3007: PUSH
3008: LD_INT 5
3010: GREATER
3011: IFFALSE 3021
// x := 1 ;
3013: LD_ADDR_VAR 0 2
3017: PUSH
3018: LD_INT 1
3020: ST_TO_ADDR
// for i in areas do
3021: LD_ADDR_VAR 0 1
3025: PUSH
3026: LD_VAR 0 4
3030: PUSH
3031: FOR_IN
3032: IFFALSE 3071
// begin if GetResourceArea ( i , mat_cans ) < 30 then
3034: LD_VAR 0 1
3038: PPUSH
3039: LD_INT 1
3041: PPUSH
3042: CALL_OW 287
3046: PUSH
3047: LD_INT 30
3049: LESS
3050: IFFALSE 3069
// begin CreateCratesArea ( x , i , true ) ;
3052: LD_VAR 0 2
3056: PPUSH
3057: LD_VAR 0 1
3061: PPUSH
3062: LD_INT 1
3064: PPUSH
3065: CALL_OW 55
// end ; end ;
3069: GO 3031
3071: POP
3072: POP
// if GetResourceArea ( CenterArea , mat_cans ) < 60 then
3073: LD_INT 14
3075: PPUSH
3076: LD_INT 1
3078: PPUSH
3079: CALL_OW 287
3083: PUSH
3084: LD_INT 60
3086: LESS
3087: IFFALSE 3106
// CreateCratesArea ( x , i , true ) ;
3089: LD_VAR 0 2
3093: PPUSH
3094: LD_VAR 0 1
3098: PPUSH
3099: LD_INT 1
3101: PPUSH
3102: CALL_OW 55
// time := time + delayTime ;
3106: LD_ADDR_VAR 0 5
3110: PUSH
3111: LD_VAR 0 5
3115: PUSH
3116: LD_VAR 0 7
3120: PLUS
3121: ST_TO_ADDR
// if time > maxTime then
3122: LD_VAR 0 5
3126: PUSH
3127: LD_VAR 0 8
3131: GREATER
3132: IFFALSE 3144
// time := normalTime ;
3134: LD_ADDR_VAR 0 5
3138: PUSH
3139: LD_VAR 0 6
3143: ST_TO_ADDR
// until false ;
3144: LD_INT 0
3146: IFFALSE 2979
// end ; end_of_file
3148: PPOPN 8
3150: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3151: LD_VAR 0 1
3155: PPUSH
3156: CALL 56567 0 1
// Multiplayer_UnitDestroyed ( un ) ;
3160: LD_VAR 0 1
3164: PPUSH
3165: CALL 8580 0 1
// end ;
3169: PPOPN 1
3171: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
3172: LD_VAR 0 1
3176: PPUSH
3177: CALL 56584 0 1
// end ;
3181: PPOPN 1
3183: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
3184: LD_VAR 0 1
3188: PPUSH
3189: CALL 9287 0 1
3193: PPOPN 1
3195: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
3196: LD_VAR 0 1
3200: PPUSH
3201: LD_VAR 0 2
3205: PPUSH
3206: CALL 56625 0 2
3210: PPOPN 2
3212: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
3213: LD_VAR 0 1
3217: PPUSH
3218: LD_VAR 0 2
3222: PPUSH
3223: LD_VAR 0 3
3227: PPUSH
3228: CALL 9340 0 3
3232: PPOPN 3
3234: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
3235: LD_VAR 0 1
3239: PPUSH
3240: LD_VAR 0 2
3244: PPUSH
3245: LD_VAR 0 3
3249: PPUSH
3250: LD_VAR 0 4
3254: PPUSH
3255: LD_VAR 0 5
3259: PPUSH
3260: CALL 9979 0 5
3264: PPOPN 5
3266: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
3267: LD_VAR 0 1
3271: PPUSH
3272: LD_VAR 0 2
3276: PPUSH
3277: LD_VAR 0 3
3281: PPUSH
3282: LD_VAR 0 4
3286: PPUSH
3287: CALL 10082 0 4
3291: PPOPN 4
3293: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
3294: LD_INT 0
3296: PPUSH
3297: PPUSH
// disable ( mpActive ) ;
3298: LD_INT 100
3300: DISABLE_MARKED
// disable ( mpWin ) ;
3301: LD_INT 101
3303: DISABLE_MARKED
// disable ( mpLose ) ;
3304: LD_INT 102
3306: DISABLE_MARKED
// mpGameType := 0 ;
3307: LD_ADDR_EXP 3
3311: PUSH
3312: LD_INT 0
3314: ST_TO_ADDR
// mpGameSettings := [ ] ;
3315: LD_ADDR_EXP 6
3319: PUSH
3320: EMPTY
3321: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
3322: LD_ADDR_EXP 4
3326: PUSH
3327: EMPTY
3328: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
3329: LD_ADDR_EXP 5
3333: PUSH
3334: EMPTY
3335: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
3336: LD_ADDR_EXP 29
3340: PUSH
3341: LD_INT 2
3343: PUSH
3344: LD_INT 2
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: ST_TO_ADDR
// mpOilDeposits := [ ] ;
3351: LD_ADDR_EXP 12
3355: PUSH
3356: EMPTY
3357: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3358: LD_ADDR_EXP 13
3362: PUSH
3363: EMPTY
3364: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
3365: LD_ADDR_EXP 41
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
3372: LD_ADDR_EXP 42
3376: PUSH
3377: EMPTY
3378: ST_TO_ADDR
// mpDepots := [ ] ;
3379: LD_ADDR_EXP 14
3383: PUSH
3384: EMPTY
3385: ST_TO_ADDR
// mpBuildings := [ ] ;
3386: LD_ADDR_EXP 17
3390: PUSH
3391: EMPTY
3392: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3393: LD_ADDR_EXP 18
3397: PUSH
3398: EMPTY
3399: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3400: LD_ADDR_EXP 19
3404: PUSH
3405: EMPTY
3406: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3407: LD_ADDR_EXP 20
3411: PUSH
3412: EMPTY
3413: ST_TO_ADDR
// mpStartingResources := [ ] ;
3414: LD_ADDR_EXP 15
3418: PUSH
3419: EMPTY
3420: ST_TO_ADDR
// mpStartPos := [ ] ;
3421: LD_ADDR_EXP 21
3425: PUSH
3426: EMPTY
3427: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3428: LD_ADDR_EXP 22
3432: PUSH
3433: LD_INT 1
3435: NEG
3436: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3437: LD_ADDR_EXP 23
3441: PUSH
3442: EMPTY
3443: ST_TO_ADDR
// mpApemans := [ ] ;
3444: LD_ADDR_EXP 30
3448: PUSH
3449: EMPTY
3450: ST_TO_ADDR
// mpApemansArea := [ ] ;
3451: LD_ADDR_EXP 31
3455: PUSH
3456: EMPTY
3457: ST_TO_ADDR
// mpRespawn := [ ] ;
3458: LD_ADDR_EXP 33
3462: PUSH
3463: EMPTY
3464: ST_TO_ADDR
// mpKingArea := 0 ;
3465: LD_ADDR_EXP 34
3469: PUSH
3470: LD_INT 0
3472: ST_TO_ADDR
// mpPoints := [ ] ;
3473: LD_ADDR_EXP 35
3477: PUSH
3478: EMPTY
3479: ST_TO_ADDR
// mpVehicles := 0 ;
3480: LD_ADDR_EXP 36
3484: PUSH
3485: LD_INT 0
3487: ST_TO_ADDR
// mpShipments := 0 ;
3488: LD_ADDR_EXP 27
3492: PUSH
3493: LD_INT 0
3495: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3496: LD_ADDR_EXP 40
3500: PUSH
3501: EMPTY
3502: PUSH
3503: EMPTY
3504: PUSH
3505: EMPTY
3506: PUSH
3507: EMPTY
3508: PUSH
3509: EMPTY
3510: PUSH
3511: EMPTY
3512: PUSH
3513: EMPTY
3514: PUSH
3515: EMPTY
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3527: LD_ADDR_EXP 32
3531: PUSH
3532: EMPTY
3533: PUSH
3534: EMPTY
3535: PUSH
3536: EMPTY
3537: PUSH
3538: EMPTY
3539: PUSH
3540: EMPTY
3541: PUSH
3542: EMPTY
3543: PUSH
3544: EMPTY
3545: PUSH
3546: EMPTY
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: ST_TO_ADDR
// mpEmissions := 0 ;
3558: LD_ADDR_EXP 37
3562: PUSH
3563: LD_INT 0
3565: ST_TO_ADDR
// mpTeleports := 0 ;
3566: LD_ADDR_EXP 43
3570: PUSH
3571: LD_INT 0
3573: ST_TO_ADDR
// mpArtifacts := 0 ;
3574: LD_ADDR_EXP 44
3578: PUSH
3579: LD_INT 0
3581: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3582: LD_ADDR_EXP 45
3586: PUSH
3587: LD_INT 0
3589: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3590: LD_ADDR_EXP 25
3594: PUSH
3595: LD_INT 3
3597: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3598: LD_ADDR_EXP 24
3602: PUSH
3603: LD_INT 15
3605: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3606: LD_ADDR_EXP 38
3610: PUSH
3611: LD_INT 0
3613: ST_TO_ADDR
// mpGameActive := false ;
3614: LD_ADDR_EXP 39
3618: PUSH
3619: LD_INT 0
3621: ST_TO_ADDR
// mpBlockRespThread := false ;
3622: LD_ADDR_EXP 46
3626: PUSH
3627: LD_INT 0
3629: ST_TO_ADDR
// for i := 1 to 32 do
3630: LD_ADDR_VAR 0 2
3634: PUSH
3635: DOUBLE
3636: LD_INT 1
3638: DEC
3639: ST_TO_ADDR
3640: LD_INT 32
3642: PUSH
3643: FOR_TO
3644: IFFALSE 3671
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3646: LD_ADDR_EXP 6
3650: PUSH
3651: LD_EXP 6
3655: PPUSH
3656: LD_VAR 0 2
3660: PPUSH
3661: LD_INT 0
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
3669: GO 3643
3671: POP
3672: POP
// end ;
3673: LD_VAR 0 1
3677: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3678: LD_INT 0
3680: PPUSH
3681: PPUSH
3682: PPUSH
3683: PPUSH
3684: PPUSH
3685: PPUSH
3686: PPUSH
3687: PPUSH
3688: PPUSH
3689: PPUSH
3690: PPUSH
3691: PPUSH
3692: PPUSH
3693: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
3694: LD_ADDR_VAR 0 14
3698: PUSH
3699: LD_INT 1
3701: PUSH
3702: LD_INT 2
3704: PUSH
3705: LD_INT 3
3707: PUSH
3708: LD_INT 5
3710: PUSH
3711: LD_INT 6
3713: PUSH
3714: LD_INT 7
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: ST_TO_ADDR
// for i in gameTypes do
3725: LD_ADDR_VAR 0 2
3729: PUSH
3730: LD_VAR 0 14
3734: PUSH
3735: FOR_IN
3736: IFFALSE 3745
// disable ( i ) ;
3738: LD_VAR 0 2
3742: DISABLE_MARKED
3743: GO 3735
3745: POP
3746: POP
// if Multiplayer then
3747: LD_OWVAR 4
3751: IFFALSE 3935
// begin mpGameType := mp_game_type ;
3753: LD_ADDR_EXP 3
3757: PUSH
3758: LD_OWVAR 6
3762: ST_TO_ADDR
// your_side := mp_player_side ;
3763: LD_ADDR_OWVAR 2
3767: PUSH
3768: LD_OWVAR 7
3772: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3773: LD_ADDR_EXP 7
3777: PUSH
3778: LD_OWVAR 17
3782: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3783: LD_ADDR_EXP 8
3787: PUSH
3788: LD_OWVAR 15
3792: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3793: LD_ADDR_EXP 9
3797: PUSH
3798: LD_OWVAR 16
3802: ST_TO_ADDR
// mpTeams := mp_teams ;
3803: LD_ADDR_EXP 10
3807: PUSH
3808: LD_OWVAR 12
3812: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3813: LD_ADDR_VAR 0 2
3817: PUSH
3818: DOUBLE
3819: LD_INT 1
3821: DEC
3822: ST_TO_ADDR
3823: LD_EXP 4
3827: PPUSH
3828: CALL 15084 0 1
3832: PUSH
3833: FOR_TO
3834: IFFALSE 3910
// begin setting := mpGameSettingsKeys [ i ] ;
3836: LD_ADDR_VAR 0 12
3840: PUSH
3841: LD_EXP 4
3845: PUSH
3846: LD_VAR 0 2
3850: ARRAY
3851: ST_TO_ADDR
// if setting then
3852: LD_VAR 0 12
3856: IFFALSE 3908
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3858: LD_ADDR_EXP 6
3862: PUSH
3863: LD_EXP 6
3867: PPUSH
3868: LD_VAR 0 2
3872: PPUSH
3873: LD_EXP 5
3877: PUSH
3878: LD_VAR 0 2
3882: ARRAY
3883: PUSH
3884: LD_VAR 0 2
3888: PUSH
3889: LD_INT 1
3891: MINUS
3892: PPUSH
3893: CALL_OW 426
3897: PUSH
3898: LD_INT 1
3900: PLUS
3901: ARRAY
3902: PPUSH
3903: CALL_OW 1
3907: ST_TO_ADDR
// end ;
3908: GO 3833
3910: POP
3911: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3912: LD_ADDR_EXP 11
3916: PUSH
3917: LD_EXP 8
3921: PUSH
3922: LD_INT 0
3924: PUSH
3925: EMPTY
3926: LIST
3927: DIFF
3928: PUSH
3929: LD_INT 1
3931: GREATER
3932: ST_TO_ADDR
// end else
3933: GO 3935
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3935: LD_EXP 3
3939: PPUSH
3940: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
3944: LD_EXP 18
3948: PPUSH
3949: CALL 15084 0 1
3953: IFFALSE 3984
// begin for i in mpMarkedAreas do
3955: LD_ADDR_VAR 0 2
3959: PUSH
3960: LD_EXP 18
3964: PUSH
3965: FOR_IN
3966: IFFALSE 3982
// SetAreaMapShow ( i , 0 ) ;
3968: LD_VAR 0 2
3972: PPUSH
3973: LD_INT 0
3975: PPUSH
3976: CALL_OW 424
3980: GO 3965
3982: POP
3983: POP
// end ; for i := 1 to 8 do
3984: LD_ADDR_VAR 0 2
3988: PUSH
3989: DOUBLE
3990: LD_INT 1
3992: DEC
3993: ST_TO_ADDR
3994: LD_INT 8
3996: PUSH
3997: FOR_TO
3998: IFFALSE 5433
// begin if not mpSidePositions [ i ] then
4000: LD_EXP 7
4004: PUSH
4005: LD_VAR 0 2
4009: ARRAY
4010: NOT
4011: IFFALSE 4015
// continue ;
4013: GO 3997
// side := i ;
4015: LD_ADDR_VAR 0 7
4019: PUSH
4020: LD_VAR 0 2
4024: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
4025: LD_ADDR_VAR 0 9
4029: PUSH
4030: LD_EXP 9
4034: PUSH
4035: LD_VAR 0 2
4039: ARRAY
4040: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
4041: LD_ADDR_VAR 0 8
4045: PUSH
4046: LD_EXP 7
4050: PUSH
4051: LD_VAR 0 2
4055: ARRAY
4056: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
4057: LD_EXP 12
4061: PPUSH
4062: CALL 15084 0 1
4066: IFFALSE 4143
// begin for j in mpOilDeposits [ pos ] do
4068: LD_ADDR_VAR 0 3
4072: PUSH
4073: LD_EXP 12
4077: PUSH
4078: LD_VAR 0 8
4082: ARRAY
4083: PUSH
4084: FOR_IN
4085: IFFALSE 4141
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
4087: LD_VAR 0 3
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PPUSH
4096: LD_VAR 0 3
4100: PUSH
4101: LD_INT 2
4103: ARRAY
4104: PPUSH
4105: LD_INT 2
4107: PPUSH
4108: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
4112: LD_VAR 0 3
4116: PUSH
4117: LD_INT 1
4119: ARRAY
4120: PPUSH
4121: LD_VAR 0 3
4125: PUSH
4126: LD_INT 2
4128: ARRAY
4129: PPUSH
4130: LD_VAR 0 7
4134: PPUSH
4135: CALL_OW 441
// end ;
4139: GO 4084
4141: POP
4142: POP
// end ; if Count ( mpSibDeposits ) then
4143: LD_EXP 13
4147: PPUSH
4148: CALL 15084 0 1
4152: IFFALSE 4229
// begin for j in mpSibDeposits [ pos ] do
4154: LD_ADDR_VAR 0 3
4158: PUSH
4159: LD_EXP 13
4163: PUSH
4164: LD_VAR 0 8
4168: ARRAY
4169: PUSH
4170: FOR_IN
4171: IFFALSE 4227
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
4173: LD_VAR 0 3
4177: PUSH
4178: LD_INT 1
4180: ARRAY
4181: PPUSH
4182: LD_VAR 0 3
4186: PUSH
4187: LD_INT 2
4189: ARRAY
4190: PPUSH
4191: LD_INT 3
4193: PPUSH
4194: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
4198: LD_VAR 0 3
4202: PUSH
4203: LD_INT 1
4205: ARRAY
4206: PPUSH
4207: LD_VAR 0 3
4211: PUSH
4212: LD_INT 2
4214: ARRAY
4215: PPUSH
4216: LD_VAR 0 7
4220: PPUSH
4221: CALL_OW 441
// end ;
4225: GO 4170
4227: POP
4228: POP
// end ; InitBc ;
4229: CALL_OW 21
// InitUc ;
4233: CALL_OW 18
// uc_side := side ;
4237: LD_ADDR_OWVAR 20
4241: PUSH
4242: LD_VAR 0 7
4246: ST_TO_ADDR
// uc_nation := nation ;
4247: LD_ADDR_OWVAR 21
4251: PUSH
4252: LD_VAR 0 9
4256: ST_TO_ADDR
// if mpBattleFlag > - 1 then
4257: LD_EXP 22
4261: PUSH
4262: LD_INT 1
4264: NEG
4265: GREATER
4266: IFFALSE 4425
// begin x := mpStartPos [ pos ] [ 1 ] ;
4268: LD_ADDR_VAR 0 5
4272: PUSH
4273: LD_EXP 21
4277: PUSH
4278: LD_VAR 0 8
4282: ARRAY
4283: PUSH
4284: LD_INT 1
4286: ARRAY
4287: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4288: LD_ADDR_VAR 0 6
4292: PUSH
4293: LD_EXP 21
4297: PUSH
4298: LD_VAR 0 8
4302: ARRAY
4303: PUSH
4304: LD_INT 2
4306: ARRAY
4307: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4308: LD_VAR 0 5
4312: PPUSH
4313: LD_VAR 0 6
4317: PPUSH
4318: LD_INT 12
4320: PPUSH
4321: LD_INT 2
4323: PPUSH
4324: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4328: LD_ADDR_EXP 23
4332: PUSH
4333: LD_EXP 23
4337: PPUSH
4338: LD_VAR 0 7
4342: PPUSH
4343: LD_VAR 0 7
4347: PPUSH
4348: LD_VAR 0 5
4352: PPUSH
4353: LD_VAR 0 6
4357: PPUSH
4358: LD_INT 1
4360: PUSH
4361: LD_INT 100
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 2
4370: PUSH
4371: LD_INT 70
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: PUSH
4378: LD_INT 3
4380: PUSH
4381: LD_INT 40
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: PUSH
4388: LD_INT 10
4390: PUSH
4391: LD_INT 25
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PUSH
4398: LD_INT 20
4400: PUSH
4401: LD_INT 100
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: PPUSH
4415: CALL_OW 418
4419: PPUSH
4420: CALL_OW 1
4424: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
4425: LD_EXP 14
4429: PPUSH
4430: CALL 15084 0 1
4434: IFFALSE 4629
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
4436: LD_EXP 3
4440: PUSH
4441: LD_INT 2
4443: PUSH
4444: LD_INT 6
4446: PUSH
4447: LD_INT 7
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: LIST
4454: IN
4455: IFFALSE 4475
// begin bc_level := 10 ;
4457: LD_ADDR_OWVAR 43
4461: PUSH
4462: LD_INT 10
4464: ST_TO_ADDR
// bc_type := b_warehouse ;
4465: LD_ADDR_OWVAR 42
4469: PUSH
4470: LD_INT 1
4472: ST_TO_ADDR
// end else
4473: GO 4491
// begin bc_level := 0 ;
4475: LD_ADDR_OWVAR 43
4479: PUSH
4480: LD_INT 0
4482: ST_TO_ADDR
// bc_type := b_depot ;
4483: LD_ADDR_OWVAR 42
4487: PUSH
4488: LD_INT 0
4490: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4491: LD_ADDR_VAR 0 4
4495: PUSH
4496: LD_EXP 14
4500: PUSH
4501: LD_VAR 0 8
4505: ARRAY
4506: PUSH
4507: LD_INT 1
4509: ARRAY
4510: PPUSH
4511: LD_EXP 14
4515: PUSH
4516: LD_VAR 0 8
4520: ARRAY
4521: PUSH
4522: LD_INT 2
4524: ARRAY
4525: PPUSH
4526: LD_EXP 14
4530: PUSH
4531: LD_VAR 0 8
4535: ARRAY
4536: PUSH
4537: LD_INT 3
4539: ARRAY
4540: PPUSH
4541: CALL_OW 47
4545: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4546: LD_VAR 0 4
4550: PPUSH
4551: LD_STRING @
4553: PUSH
4554: LD_VAR 0 7
4558: STR
4559: PPUSH
4560: CALL_OW 500
// if Count ( mpStartingResources ) then
4564: LD_EXP 15
4568: PPUSH
4569: CALL 15084 0 1
4573: IFFALSE 4627
// begin for j := 1 to mpStartingResources do
4575: LD_ADDR_VAR 0 3
4579: PUSH
4580: DOUBLE
4581: LD_INT 1
4583: DEC
4584: ST_TO_ADDR
4585: LD_EXP 15
4589: PUSH
4590: FOR_TO
4591: IFFALSE 4625
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4593: LD_VAR 0 4
4597: PPUSH
4598: CALL_OW 274
4602: PPUSH
4603: LD_VAR 0 3
4607: PPUSH
4608: LD_EXP 15
4612: PUSH
4613: LD_VAR 0 3
4617: ARRAY
4618: PPUSH
4619: CALL_OW 277
4623: GO 4590
4625: POP
4626: POP
// end ; end else
4627: GO 4836
// if Count ( mpStartingResources ) then
4629: LD_EXP 15
4633: PPUSH
4634: CALL 15084 0 1
4638: IFFALSE 4836
// begin x := mpStartPos [ pos ] [ 1 ] ;
4640: LD_ADDR_VAR 0 5
4644: PUSH
4645: LD_EXP 21
4649: PUSH
4650: LD_VAR 0 8
4654: ARRAY
4655: PUSH
4656: LD_INT 1
4658: ARRAY
4659: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4660: LD_ADDR_VAR 0 6
4664: PUSH
4665: LD_EXP 21
4669: PUSH
4670: LD_VAR 0 8
4674: ARRAY
4675: PUSH
4676: LD_INT 2
4678: ARRAY
4679: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4680: LD_ADDR_VAR 0 3
4684: PUSH
4685: DOUBLE
4686: LD_INT 1
4688: DEC
4689: ST_TO_ADDR
4690: LD_EXP 15
4694: PUSH
4695: FOR_TO
4696: IFFALSE 4834
// begin resources := mpStartingResources [ j ] ;
4698: LD_ADDR_VAR 0 13
4702: PUSH
4703: LD_EXP 15
4707: PUSH
4708: LD_VAR 0 3
4712: ARRAY
4713: ST_TO_ADDR
// if resources = 0 then
4714: LD_VAR 0 13
4718: PUSH
4719: LD_INT 0
4721: EQUAL
4722: IFFALSE 4726
// continue ;
4724: GO 4695
// repeat if resources >= 50 then
4726: LD_VAR 0 13
4730: PUSH
4731: LD_INT 50
4733: GREATEREQUAL
4734: IFFALSE 4780
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4736: LD_VAR 0 3
4740: PPUSH
4741: LD_INT 5
4743: PPUSH
4744: LD_VAR 0 5
4748: PPUSH
4749: LD_VAR 0 6
4753: PPUSH
4754: LD_INT 6
4756: PPUSH
4757: LD_INT 0
4759: PPUSH
4760: CALL_OW 60
// resources := resources - 50 ;
4764: LD_ADDR_VAR 0 13
4768: PUSH
4769: LD_VAR 0 13
4773: PUSH
4774: LD_INT 50
4776: MINUS
4777: ST_TO_ADDR
// end else
4778: GO 4822
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4780: LD_VAR 0 3
4784: PPUSH
4785: LD_VAR 0 13
4789: PUSH
4790: LD_INT 10
4792: DIV
4793: PPUSH
4794: LD_VAR 0 5
4798: PPUSH
4799: LD_VAR 0 6
4803: PPUSH
4804: LD_INT 6
4806: PPUSH
4807: LD_INT 0
4809: PPUSH
4810: CALL_OW 60
// resources := 0 ;
4814: LD_ADDR_VAR 0 13
4818: PUSH
4819: LD_INT 0
4821: ST_TO_ADDR
// end ; until resources <= 0 ;
4822: LD_VAR 0 13
4826: PUSH
4827: LD_INT 0
4829: LESSEQUAL
4830: IFFALSE 4726
// end ;
4832: GO 4695
4834: POP
4835: POP
// end ; if Count ( mpBuildings ) then
4836: LD_EXP 17
4840: PPUSH
4841: CALL 15084 0 1
4845: IFFALSE 4923
// begin for j in mpBuildings [ pos ] do
4847: LD_ADDR_VAR 0 3
4851: PUSH
4852: LD_EXP 17
4856: PUSH
4857: LD_VAR 0 8
4861: ARRAY
4862: PUSH
4863: FOR_IN
4864: IFFALSE 4921
// begin bc_level := 0 ;
4866: LD_ADDR_OWVAR 43
4870: PUSH
4871: LD_INT 0
4873: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4874: LD_ADDR_OWVAR 42
4878: PUSH
4879: LD_VAR 0 3
4883: PUSH
4884: LD_INT 1
4886: ARRAY
4887: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4888: LD_VAR 0 3
4892: PUSH
4893: LD_INT 2
4895: ARRAY
4896: PPUSH
4897: LD_VAR 0 3
4901: PUSH
4902: LD_INT 3
4904: ARRAY
4905: PPUSH
4906: LD_VAR 0 3
4910: PUSH
4911: LD_INT 4
4913: ARRAY
4914: PPUSH
4915: CALL_OW 47
// end ;
4919: GO 4863
4921: POP
4922: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4923: LD_EXP 26
4927: IFFALSE 4947
4929: PUSH
4930: LD_INT 20
4932: PPUSH
4933: LD_VAR 0 7
4937: PPUSH
4938: CALL_OW 321
4942: PUSH
4943: LD_INT 1
4945: EQUAL
4946: AND
4947: IFFALSE 4964
// SetTech ( tech_SibDet , side , state_researched ) ;
4949: LD_INT 20
4951: PPUSH
4952: LD_VAR 0 7
4956: PPUSH
4957: LD_INT 2
4959: PPUSH
4960: CALL_OW 322
// if not mpArtifacts then
4964: LD_EXP 44
4968: NOT
4969: IFFALSE 4986
// SetTech ( tech_artifact , side , state_disabled ) ;
4971: LD_INT 24
4973: PPUSH
4974: LD_VAR 0 7
4978: PPUSH
4979: LD_INT 0
4981: PPUSH
4982: CALL_OW 322
// if mpSibBomb = 1 then
4986: LD_EXP 28
4990: PUSH
4991: LD_INT 1
4993: EQUAL
4994: IFFALSE 5013
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4996: LD_INT 25
4998: PPUSH
4999: LD_VAR 0 7
5003: PPUSH
5004: LD_INT 1
5006: PPUSH
5007: CALL_OW 322
// end else
5011: GO 5028
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
5013: LD_INT 25
5015: PPUSH
5016: LD_VAR 0 7
5020: PPUSH
5021: LD_INT 0
5023: PPUSH
5024: CALL_OW 322
// end ; if mpVehicles then
5028: LD_EXP 36
5032: IFFALSE 5131
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
5034: LD_ADDR_VAR 0 3
5038: PUSH
5039: LD_VAR 0 7
5043: PPUSH
5044: LD_VAR 0 9
5048: PPUSH
5049: LD_EXP 36
5053: PPUSH
5054: CALL 6354 0 3
5058: PUSH
5059: FOR_IN
5060: IFFALSE 5129
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
5062: LD_VAR 0 3
5066: PPUSH
5067: LD_INT 0
5069: PPUSH
5070: LD_INT 5
5072: PPUSH
5073: CALL_OW 12
5077: PPUSH
5078: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5082: LD_VAR 0 3
5086: PPUSH
5087: LD_EXP 21
5091: PUSH
5092: LD_VAR 0 8
5096: ARRAY
5097: PUSH
5098: LD_INT 1
5100: ARRAY
5101: PPUSH
5102: LD_EXP 21
5106: PUSH
5107: LD_VAR 0 8
5111: ARRAY
5112: PUSH
5113: LD_INT 2
5115: ARRAY
5116: PPUSH
5117: LD_INT 12
5119: PPUSH
5120: LD_INT 0
5122: PPUSH
5123: CALL_OW 50
// end ;
5127: GO 5059
5129: POP
5130: POP
// end ; uc_nation := nation ;
5131: LD_ADDR_OWVAR 21
5135: PUSH
5136: LD_VAR 0 9
5140: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
5141: LD_EXP 3
5145: PUSH
5146: LD_INT 6
5148: PUSH
5149: LD_INT 7
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: IN
5156: IFFALSE 5181
5158: PUSH
5159: LD_EXP 7
5163: PUSH
5164: LD_VAR 0 2
5168: ARRAY
5169: PUSH
5170: LD_INT 1
5172: PUSH
5173: LD_INT 2
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: IN
5180: AND
5181: IFFALSE 5229
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
5183: LD_ADDR_VAR 0 11
5187: PUSH
5188: LD_VAR 0 7
5192: PPUSH
5193: LD_VAR 0 9
5197: PPUSH
5198: LD_EXP 24
5202: PUSH
5203: LD_EXP 24
5207: PUSH
5208: LD_INT 2
5210: DIV
5211: PLUS
5212: PPUSH
5213: LD_EXP 25
5217: PUSH
5218: LD_INT 1
5220: PLUS
5221: PPUSH
5222: CALL 5845 0 4
5226: ST_TO_ADDR
5227: GO 5259
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
5229: LD_ADDR_VAR 0 11
5233: PUSH
5234: LD_VAR 0 7
5238: PPUSH
5239: LD_VAR 0 9
5243: PPUSH
5244: LD_EXP 24
5248: PPUSH
5249: LD_EXP 25
5253: PPUSH
5254: CALL 5845 0 4
5258: ST_TO_ADDR
// for j in team do
5259: LD_ADDR_VAR 0 3
5263: PUSH
5264: LD_VAR 0 11
5268: PUSH
5269: FOR_IN
5270: IFFALSE 5319
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5272: LD_VAR 0 3
5276: PPUSH
5277: LD_EXP 21
5281: PUSH
5282: LD_VAR 0 8
5286: ARRAY
5287: PUSH
5288: LD_INT 1
5290: ARRAY
5291: PPUSH
5292: LD_EXP 21
5296: PUSH
5297: LD_VAR 0 8
5301: ARRAY
5302: PUSH
5303: LD_INT 2
5305: ARRAY
5306: PPUSH
5307: LD_INT 12
5309: PPUSH
5310: LD_INT 0
5312: PPUSH
5313: CALL_OW 50
5317: GO 5269
5319: POP
5320: POP
// if mpApemans then
5321: LD_EXP 30
5325: IFFALSE 5431
// begin for j := 1 to mpApemans do
5327: LD_ADDR_VAR 0 3
5331: PUSH
5332: DOUBLE
5333: LD_INT 1
5335: DEC
5336: ST_TO_ADDR
5337: LD_EXP 30
5341: PUSH
5342: FOR_TO
5343: IFFALSE 5429
// begin PrepareApeman ( - 5 ) ;
5345: LD_INT 5
5347: NEG
5348: PPUSH
5349: CALL 47177 0 1
// ape := CreateHuman ;
5353: LD_ADDR_VAR 0 10
5357: PUSH
5358: CALL_OW 44
5362: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
5363: LD_ADDR_EXP 32
5367: PUSH
5368: LD_EXP 32
5372: PPUSH
5373: LD_VAR 0 8
5377: PPUSH
5378: LD_EXP 32
5382: PUSH
5383: LD_VAR 0 8
5387: ARRAY
5388: PPUSH
5389: LD_VAR 0 10
5393: PPUSH
5394: CALL 51050 0 2
5398: PPUSH
5399: CALL_OW 1
5403: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
5404: LD_VAR 0 10
5408: PPUSH
5409: LD_EXP 31
5413: PUSH
5414: LD_VAR 0 8
5418: ARRAY
5419: PPUSH
5420: LD_INT 0
5422: PPUSH
5423: CALL_OW 49
// end ;
5427: GO 5342
5429: POP
5430: POP
// end ; end ;
5431: GO 3997
5433: POP
5434: POP
// if not mpTeamGame then
5435: LD_EXP 11
5439: NOT
5440: IFFALSE 5538
// begin for i := 1 to 8 do
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: DOUBLE
5448: LD_INT 1
5450: DEC
5451: ST_TO_ADDR
5452: LD_INT 8
5454: PUSH
5455: FOR_TO
5456: IFFALSE 5534
// for j := 1 to 8 do
5458: LD_ADDR_VAR 0 3
5462: PUSH
5463: DOUBLE
5464: LD_INT 1
5466: DEC
5467: ST_TO_ADDR
5468: LD_INT 8
5470: PUSH
5471: FOR_TO
5472: IFFALSE 5530
// if i <> j then
5474: LD_VAR 0 2
5478: PUSH
5479: LD_VAR 0 3
5483: NONEQUAL
5484: IFFALSE 5508
// SetAttitude ( i , j , att_neutral , true ) else
5486: LD_VAR 0 2
5490: PPUSH
5491: LD_VAR 0 3
5495: PPUSH
5496: LD_INT 0
5498: PPUSH
5499: LD_INT 1
5501: PPUSH
5502: CALL_OW 80
5506: GO 5528
// SetAttitude ( i , j , att_friend , true ) ;
5508: LD_VAR 0 2
5512: PPUSH
5513: LD_VAR 0 3
5517: PPUSH
5518: LD_INT 1
5520: PPUSH
5521: LD_INT 1
5523: PPUSH
5524: CALL_OW 80
5528: GO 5471
5530: POP
5531: POP
5532: GO 5455
5534: POP
5535: POP
// end else
5536: GO 5713
// begin if mpSharedVision then
5538: LD_EXP 16
5542: IFFALSE 5607
// begin for i in mpTeams do
5544: LD_ADDR_VAR 0 2
5548: PUSH
5549: LD_EXP 10
5553: PUSH
5554: FOR_IN
5555: IFFALSE 5605
// for j := 2 to i do
5557: LD_ADDR_VAR 0 3
5561: PUSH
5562: DOUBLE
5563: LD_INT 2
5565: DEC
5566: ST_TO_ADDR
5567: LD_VAR 0 2
5571: PUSH
5572: FOR_TO
5573: IFFALSE 5601
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5575: LD_VAR 0 2
5579: PUSH
5580: LD_VAR 0 3
5584: ARRAY
5585: PPUSH
5586: LD_VAR 0 2
5590: PUSH
5591: LD_INT 1
5593: ARRAY
5594: PPUSH
5595: CALL_OW 343
5599: GO 5572
5601: POP
5602: POP
5603: GO 5554
5605: POP
5606: POP
// end ; for i := 1 to 8 do
5607: LD_ADDR_VAR 0 2
5611: PUSH
5612: DOUBLE
5613: LD_INT 1
5615: DEC
5616: ST_TO_ADDR
5617: LD_INT 8
5619: PUSH
5620: FOR_TO
5621: IFFALSE 5711
// for j := 1 to 8 do
5623: LD_ADDR_VAR 0 3
5627: PUSH
5628: DOUBLE
5629: LD_INT 1
5631: DEC
5632: ST_TO_ADDR
5633: LD_INT 8
5635: PUSH
5636: FOR_TO
5637: IFFALSE 5707
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5639: LD_EXP 8
5643: PUSH
5644: LD_VAR 0 2
5648: ARRAY
5649: PUSH
5650: LD_EXP 8
5654: PUSH
5655: LD_VAR 0 3
5659: ARRAY
5660: EQUAL
5661: IFFALSE 5685
// SetAttitude ( i , j , att_friend , true ) else
5663: LD_VAR 0 2
5667: PPUSH
5668: LD_VAR 0 3
5672: PPUSH
5673: LD_INT 1
5675: PPUSH
5676: LD_INT 1
5678: PPUSH
5679: CALL_OW 80
5683: GO 5705
// SetAttitude ( i , j , att_enemy , true ) ;
5685: LD_VAR 0 2
5689: PPUSH
5690: LD_VAR 0 3
5694: PPUSH
5695: LD_INT 2
5697: PPUSH
5698: LD_INT 1
5700: PPUSH
5701: CALL_OW 80
5705: GO 5636
5707: POP
5708: POP
5709: GO 5620
5711: POP
5712: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5713: LD_ADDR_OWVAR 71
5717: PUSH
5718: LD_EXP 9
5722: PUSH
5723: LD_OWVAR 2
5727: ARRAY
5728: ST_TO_ADDR
// if IAmSpec then
5729: CALL_OW 531
5733: IFFALSE 5774
// begin FogOff ( true ) ;
5735: LD_INT 1
5737: PPUSH
5738: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5742: LD_EXP 29
5746: PUSH
5747: LD_INT 1
5749: ARRAY
5750: PUSH
5751: LD_INT 2
5753: DIV
5754: PPUSH
5755: LD_EXP 29
5759: PUSH
5760: LD_INT 2
5762: ARRAY
5763: PUSH
5764: LD_INT 2
5766: DIV
5767: PPUSH
5768: CALL_OW 86
// end else
5772: GO 5820
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5774: LD_EXP 21
5778: PUSH
5779: LD_EXP 7
5783: PUSH
5784: LD_OWVAR 2
5788: ARRAY
5789: ARRAY
5790: PUSH
5791: LD_INT 1
5793: ARRAY
5794: PPUSH
5795: LD_EXP 21
5799: PUSH
5800: LD_EXP 7
5804: PUSH
5805: LD_OWVAR 2
5809: ARRAY
5810: ARRAY
5811: PUSH
5812: LD_INT 2
5814: ARRAY
5815: PPUSH
5816: CALL_OW 86
// end ; BeginBuildUp ;
5820: CALL 6887 0 0
// enable ( mpActive ) ;
5824: LD_INT 100
5826: ENABLE_MARKED
// enable ( mpGameType ) ;
5827: LD_EXP 3
5831: ENABLE_MARKED
// mpGameActive := true ;
5832: LD_ADDR_EXP 39
5836: PUSH
5837: LD_INT 1
5839: ST_TO_ADDR
// end ;
5840: LD_VAR 0 1
5844: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5845: LD_INT 0
5847: PPUSH
5848: PPUSH
5849: PPUSH
5850: PPUSH
// result := [ ] ;
5851: LD_ADDR_VAR 0 5
5855: PUSH
5856: EMPTY
5857: ST_TO_ADDR
// class := class_soldier ;
5858: LD_ADDR_VAR 0 8
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// uc_side := side ;
5866: LD_ADDR_OWVAR 20
5870: PUSH
5871: LD_VAR 0 1
5875: ST_TO_ADDR
// uc_nation := nation ;
5876: LD_ADDR_OWVAR 21
5880: PUSH
5881: LD_VAR 0 2
5885: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5886: LD_ADDR_OWVAR 26
5890: PUSH
5891: LD_OWVAR 19
5895: PUSH
5896: LD_VAR 0 1
5900: ARRAY
5901: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5902: LD_INT 1
5904: PPUSH
5905: LD_INT 2
5907: PPUSH
5908: CALL_OW 12
5912: PPUSH
5913: LD_VAR 0 8
5917: PPUSH
5918: LD_VAR 0 4
5922: PUSH
5923: LD_INT 2
5925: PLUS
5926: PPUSH
5927: CALL_OW 380
// hc_importance := 105 ;
5931: LD_ADDR_OWVAR 32
5935: PUSH
5936: LD_INT 105
5938: ST_TO_ADDR
// if Multiplayer then
5939: LD_OWVAR 4
5943: IFFALSE 5983
// begin hc_gallery := MULTIAVATARS ;
5945: LD_ADDR_OWVAR 33
5949: PUSH
5950: LD_STRING MULTIAVATARS
5952: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5953: LD_ADDR_OWVAR 34
5957: PUSH
5958: LD_VAR 0 1
5962: PPUSH
5963: CALL_OW 525
5967: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5968: LD_ADDR_OWVAR 27
5972: PUSH
5973: LD_VAR 0 1
5977: PPUSH
5978: CALL_OW 526
5982: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5983: LD_ADDR_VAR 0 5
5987: PUSH
5988: LD_VAR 0 5
5992: PPUSH
5993: CALL_OW 44
5997: PPUSH
5998: CALL 51050 0 2
6002: ST_TO_ADDR
// if mpTeamPreset then
6003: LD_LOC 1
6007: IFFALSE 6103
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
6009: LD_LOC 1
6013: PUSH
6014: LD_INT 1
6016: ARRAY
6017: PPUSH
6018: LD_VAR 0 5
6022: PUSH
6023: LD_VAR 0 5
6027: ARRAY
6028: PPUSH
6029: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
6033: LD_VAR 0 5
6037: PUSH
6038: LD_VAR 0 5
6042: ARRAY
6043: PPUSH
6044: LD_INT 1
6046: PPUSH
6047: LD_LOC 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: LD_INT 1
6058: PPUSH
6059: CALL_OW 260
6063: PPUSH
6064: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
6068: LD_VAR 0 5
6072: PUSH
6073: LD_VAR 0 5
6077: ARRAY
6078: PPUSH
6079: LD_INT 2
6081: PPUSH
6082: LD_LOC 1
6086: PUSH
6087: LD_INT 1
6089: ARRAY
6090: PPUSH
6091: LD_INT 2
6093: PPUSH
6094: CALL_OW 260
6098: PPUSH
6099: CALL_OW 239
// end ; InitHc_All ( ) ;
6103: CALL_OW 584
// class := 2 ;
6107: LD_ADDR_VAR 0 8
6111: PUSH
6112: LD_INT 2
6114: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
6115: LD_ADDR_VAR 0 6
6119: PUSH
6120: DOUBLE
6121: LD_INT 1
6123: DEC
6124: ST_TO_ADDR
6125: LD_VAR 0 3
6129: PUSH
6130: LD_INT 1
6132: MINUS
6133: PUSH
6134: FOR_TO
6135: IFFALSE 6330
// begin PrepareHuman ( false , class , skill ) ;
6137: LD_INT 0
6139: PPUSH
6140: LD_VAR 0 8
6144: PPUSH
6145: LD_VAR 0 4
6149: PPUSH
6150: CALL_OW 380
// un := CreateHuman ;
6154: LD_ADDR_VAR 0 7
6158: PUSH
6159: CALL_OW 44
6163: ST_TO_ADDR
// result := Join ( result , un ) ;
6164: LD_ADDR_VAR 0 5
6168: PUSH
6169: LD_VAR 0 5
6173: PPUSH
6174: LD_VAR 0 7
6178: PPUSH
6179: CALL 51050 0 2
6183: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
6184: LD_LOC 1
6188: PPUSH
6189: CALL 15084 0 1
6193: PUSH
6194: LD_VAR 0 3
6198: GREATEREQUAL
6199: IFFALSE 6295
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
6201: LD_LOC 1
6205: PUSH
6206: LD_VAR 0 6
6210: PUSH
6211: LD_INT 1
6213: PLUS
6214: ARRAY
6215: PPUSH
6216: LD_VAR 0 7
6220: PPUSH
6221: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
6225: LD_VAR 0 7
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: LD_LOC 1
6237: PUSH
6238: LD_VAR 0 6
6242: PUSH
6243: LD_INT 1
6245: PLUS
6246: ARRAY
6247: PPUSH
6248: LD_INT 1
6250: PPUSH
6251: CALL_OW 260
6255: PPUSH
6256: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
6260: LD_VAR 0 7
6264: PPUSH
6265: LD_INT 2
6267: PPUSH
6268: LD_LOC 1
6272: PUSH
6273: LD_VAR 0 6
6277: PUSH
6278: LD_INT 1
6280: PLUS
6281: ARRAY
6282: PPUSH
6283: LD_INT 2
6285: PPUSH
6286: CALL_OW 260
6290: PPUSH
6291: CALL_OW 239
// end ; class := Inc ( class ) ;
6295: LD_ADDR_VAR 0 8
6299: PUSH
6300: LD_VAR 0 8
6304: PPUSH
6305: CALL 52423 0 1
6309: ST_TO_ADDR
// if class = 5 then
6310: LD_VAR 0 8
6314: PUSH
6315: LD_INT 5
6317: EQUAL
6318: IFFALSE 6328
// class := 1 ;
6320: LD_ADDR_VAR 0 8
6324: PUSH
6325: LD_INT 1
6327: ST_TO_ADDR
// end ;
6328: GO 6134
6330: POP
6331: POP
// if not mpTeamPreset then
6332: LD_LOC 1
6336: NOT
6337: IFFALSE 6349
// mpTeamPreset := result ;
6339: LD_ADDR_LOC 1
6343: PUSH
6344: LD_VAR 0 5
6348: ST_TO_ADDR
// end ;
6349: LD_VAR 0 5
6353: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
6354: LD_INT 0
6356: PPUSH
6357: PPUSH
// result := [ ] ;
6358: LD_ADDR_VAR 0 4
6362: PUSH
6363: EMPTY
6364: ST_TO_ADDR
// if not vehicles then
6365: LD_VAR 0 3
6369: NOT
6370: IFFALSE 6374
// exit ;
6372: GO 6588
// for i := 1 to vehicles [ nation ] do
6374: LD_ADDR_VAR 0 5
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_VAR 0 3
6388: PUSH
6389: LD_VAR 0 2
6393: ARRAY
6394: PUSH
6395: FOR_TO
6396: IFFALSE 6586
// begin uc_side := side ;
6398: LD_ADDR_OWVAR 20
6402: PUSH
6403: LD_VAR 0 1
6407: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6408: LD_VAR 0 3
6412: PUSH
6413: LD_VAR 0 2
6417: ARRAY
6418: PUSH
6419: LD_VAR 0 5
6423: ARRAY
6424: PPUSH
6425: CALL 15084 0 1
6429: PUSH
6430: LD_INT 4
6432: GREATER
6433: IFFALSE 6463
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6435: LD_ADDR_OWVAR 21
6439: PUSH
6440: LD_VAR 0 3
6444: PUSH
6445: LD_VAR 0 2
6449: ARRAY
6450: PUSH
6451: LD_VAR 0 5
6455: ARRAY
6456: PUSH
6457: LD_INT 5
6459: ARRAY
6460: ST_TO_ADDR
6461: GO 6473
// uc_nation := nation ;
6463: LD_ADDR_OWVAR 21
6467: PUSH
6468: LD_VAR 0 2
6472: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6473: LD_VAR 0 3
6477: PUSH
6478: LD_VAR 0 2
6482: ARRAY
6483: PUSH
6484: LD_VAR 0 5
6488: ARRAY
6489: PUSH
6490: LD_INT 1
6492: ARRAY
6493: PPUSH
6494: LD_VAR 0 3
6498: PUSH
6499: LD_VAR 0 2
6503: ARRAY
6504: PUSH
6505: LD_VAR 0 5
6509: ARRAY
6510: PUSH
6511: LD_INT 2
6513: ARRAY
6514: PPUSH
6515: LD_VAR 0 3
6519: PUSH
6520: LD_VAR 0 2
6524: ARRAY
6525: PUSH
6526: LD_VAR 0 5
6530: ARRAY
6531: PUSH
6532: LD_INT 3
6534: ARRAY
6535: PPUSH
6536: LD_VAR 0 3
6540: PUSH
6541: LD_VAR 0 2
6545: ARRAY
6546: PUSH
6547: LD_VAR 0 5
6551: ARRAY
6552: PUSH
6553: LD_INT 4
6555: ARRAY
6556: PPUSH
6557: LD_INT 80
6559: PPUSH
6560: CALL 17880 0 5
// result := Join ( result , CreateVehicle ) ;
6564: LD_ADDR_VAR 0 4
6568: PUSH
6569: LD_VAR 0 4
6573: PPUSH
6574: CALL_OW 45
6578: PPUSH
6579: CALL 51050 0 2
6583: ST_TO_ADDR
// end ;
6584: GO 6395
6586: POP
6587: POP
// end ;
6588: LD_VAR 0 4
6592: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6593: LD_INT 0
6595: PPUSH
6596: PPUSH
// for i in mpBattleFlags do
6597: LD_ADDR_VAR 0 3
6601: PUSH
6602: LD_EXP 23
6606: PUSH
6607: FOR_IN
6608: IFFALSE 6685
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6610: LD_VAR 0 3
6614: PPUSH
6615: LD_INT 1
6617: PUSH
6618: LD_VAR 0 1
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: PUSH
6627: LD_INT 2
6629: PUSH
6630: LD_VAR 0 1
6634: PUSH
6635: LD_REAL  7.00000000000000E-0001
6638: MUL
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: LD_INT 3
6646: PUSH
6647: LD_VAR 0 1
6651: PUSH
6652: LD_REAL  4.00000000000000E-0001
6655: MUL
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 20
6663: PUSH
6664: LD_VAR 0 1
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: PPUSH
6679: CALL_OW 423
6683: GO 6607
6685: POP
6686: POP
// end ;
6687: LD_VAR 0 2
6691: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6692: LD_INT 100
6694: IFFALSE 6789
6696: GO 6698
6698: DISABLE
6699: LD_INT 0
6701: PPUSH
6702: PPUSH
// begin if mpBattleFlag <= 0 then
6703: LD_EXP 22
6707: PUSH
6708: LD_INT 0
6710: LESSEQUAL
6711: IFFALSE 6715
// exit ;
6713: GO 6789
// strength := 100 ;
6715: LD_ADDR_VAR 0 2
6719: PUSH
6720: LD_INT 100
6722: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6723: LD_EXP 22
6727: PPUSH
6728: CALL_OW 67
// strength := Dec ( strength ) ;
6732: LD_ADDR_VAR 0 2
6736: PUSH
6737: LD_VAR 0 2
6741: PPUSH
6742: CALL 52445 0 1
6746: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6747: LD_VAR 0 2
6751: PPUSH
6752: CALL 6593 0 1
// until not strength ;
6756: LD_VAR 0 2
6760: NOT
6761: IFFALSE 6723
// for i in mpBattleFlags do
6763: LD_ADDR_VAR 0 1
6767: PUSH
6768: LD_EXP 23
6772: PUSH
6773: FOR_IN
6774: IFFALSE 6787
// KillBattleFlag ( i ) ;
6776: LD_VAR 0 1
6780: PPUSH
6781: CALL_OW 419
6785: GO 6773
6787: POP
6788: POP
// end ;
6789: PPOPN 2
6791: END
// every 0 0$1 marked mpActive do var side , tmp ;
6792: GO 6794
6794: DISABLE
6795: LD_INT 0
6797: PPUSH
6798: PPUSH
// begin if mpSibBomb <= 1 then
6799: LD_EXP 28
6803: PUSH
6804: LD_INT 1
6806: LESSEQUAL
6807: IFFALSE 6811
// exit ;
6809: GO 6884
// tmp := mpSibBomb ;
6811: LD_ADDR_VAR 0 2
6815: PUSH
6816: LD_EXP 28
6820: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6821: LD_INT 35
6823: PPUSH
6824: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6828: LD_ADDR_VAR 0 2
6832: PUSH
6833: LD_VAR 0 2
6837: PUSH
6838: LD_INT 35
6840: MINUS
6841: ST_TO_ADDR
// until not tmp ;
6842: LD_VAR 0 2
6846: NOT
6847: IFFALSE 6821
// for side := 1 to 8 do
6849: LD_ADDR_VAR 0 1
6853: PUSH
6854: DOUBLE
6855: LD_INT 1
6857: DEC
6858: ST_TO_ADDR
6859: LD_INT 8
6861: PUSH
6862: FOR_TO
6863: IFFALSE 6882
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6865: LD_INT 25
6867: PPUSH
6868: LD_VAR 0 1
6872: PPUSH
6873: LD_INT 1
6875: PPUSH
6876: CALL_OW 322
6880: GO 6862
6882: POP
6883: POP
// end ;
6884: PPOPN 2
6886: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6887: LD_INT 0
6889: PPUSH
6890: PPUSH
6891: PPUSH
// mpBuildUpTimeDelay := 0 ;
6892: LD_ADDR_EXP 47
6896: PUSH
6897: LD_INT 0
6899: ST_TO_ADDR
// if not mpBuildUpTime then
6900: LD_EXP 20
6904: NOT
6905: IFFALSE 6909
// exit ;
6907: GO 7098
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6909: LD_ADDR_EXP 47
6913: PUSH
6914: LD_INT 8400
6916: PUSH
6917: LD_INT 2100
6919: PUSH
6920: LD_EXP 20
6924: MUL
6925: PLUS
6926: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6927: LD_ADDR_EXP 48
6931: PUSH
6932: LD_INT 1
6934: ST_TO_ADDR
// for i := 1 to 8 do
6935: LD_ADDR_VAR 0 2
6939: PUSH
6940: DOUBLE
6941: LD_INT 1
6943: DEC
6944: ST_TO_ADDR
6945: LD_INT 8
6947: PUSH
6948: FOR_TO
6949: IFFALSE 7096
// if mpSidePositions [ i ] then
6951: LD_EXP 7
6955: PUSH
6956: LD_VAR 0 2
6960: ARRAY
6961: IFFALSE 7094
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6963: LD_EXP 19
6967: PUSH
6968: LD_EXP 7
6972: PUSH
6973: LD_VAR 0 2
6977: ARRAY
6978: ARRAY
6979: PPUSH
6980: LD_INT 5
6982: PPUSH
6983: CALL_OW 424
// for j := 1 to 8 do
6987: LD_ADDR_VAR 0 3
6991: PUSH
6992: DOUBLE
6993: LD_INT 1
6995: DEC
6996: ST_TO_ADDR
6997: LD_INT 8
6999: PUSH
7000: FOR_TO
7001: IFFALSE 7092
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
7003: LD_EXP 7
7007: PUSH
7008: LD_VAR 0 3
7012: ARRAY
7013: IFFALSE 7062
7015: PUSH
7016: LD_EXP 8
7020: PUSH
7021: LD_VAR 0 2
7025: ARRAY
7026: PUSH
7027: LD_EXP 8
7031: PUSH
7032: LD_VAR 0 3
7036: ARRAY
7037: NONEQUAL
7038: IFTRUE 7061
7040: PUSH
7041: LD_EXP 11
7045: NOT
7046: IFFALSE 7060
7048: PUSH
7049: LD_VAR 0 2
7053: PUSH
7054: LD_VAR 0 3
7058: NONEQUAL
7059: AND
7060: OR
7061: AND
7062: IFFALSE 7090
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
7064: LD_VAR 0 3
7068: PPUSH
7069: LD_EXP 19
7073: PUSH
7074: LD_EXP 7
7078: PUSH
7079: LD_VAR 0 2
7083: ARRAY
7084: ARRAY
7085: PPUSH
7086: CALL_OW 333
7090: GO 7000
7092: POP
7093: POP
// end ;
7094: GO 6948
7096: POP
7097: POP
// end ;
7098: LD_VAR 0 1
7102: RET
// function EndBuildUp ; var i , j ; begin
7103: LD_INT 0
7105: PPUSH
7106: PPUSH
7107: PPUSH
// mpBuildUpTimeActive := false ;
7108: LD_ADDR_EXP 48
7112: PUSH
7113: LD_INT 0
7115: ST_TO_ADDR
// for i := 1 to 8 do
7116: LD_ADDR_VAR 0 2
7120: PUSH
7121: DOUBLE
7122: LD_INT 1
7124: DEC
7125: ST_TO_ADDR
7126: LD_INT 8
7128: PUSH
7129: FOR_TO
7130: IFFALSE 7277
// if mpSidePositions [ i ] then
7132: LD_EXP 7
7136: PUSH
7137: LD_VAR 0 2
7141: ARRAY
7142: IFFALSE 7275
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
7144: LD_EXP 19
7148: PUSH
7149: LD_EXP 7
7153: PUSH
7154: LD_VAR 0 2
7158: ARRAY
7159: ARRAY
7160: PPUSH
7161: LD_INT 0
7163: PPUSH
7164: CALL_OW 424
// for j := 1 to 8 do
7168: LD_ADDR_VAR 0 3
7172: PUSH
7173: DOUBLE
7174: LD_INT 1
7176: DEC
7177: ST_TO_ADDR
7178: LD_INT 8
7180: PUSH
7181: FOR_TO
7182: IFFALSE 7273
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
7184: LD_EXP 7
7188: PUSH
7189: LD_VAR 0 3
7193: ARRAY
7194: IFFALSE 7243
7196: PUSH
7197: LD_EXP 8
7201: PUSH
7202: LD_VAR 0 2
7206: ARRAY
7207: PUSH
7208: LD_EXP 8
7212: PUSH
7213: LD_VAR 0 3
7217: ARRAY
7218: NONEQUAL
7219: IFTRUE 7242
7221: PUSH
7222: LD_EXP 11
7226: NOT
7227: IFFALSE 7241
7229: PUSH
7230: LD_VAR 0 2
7234: PUSH
7235: LD_VAR 0 3
7239: NONEQUAL
7240: AND
7241: OR
7242: AND
7243: IFFALSE 7271
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
7245: LD_VAR 0 3
7249: PPUSH
7250: LD_EXP 19
7254: PUSH
7255: LD_EXP 7
7259: PUSH
7260: LD_VAR 0 2
7264: ARRAY
7265: ARRAY
7266: PPUSH
7267: CALL_OW 334
7271: GO 7181
7273: POP
7274: POP
// end ;
7275: GO 7129
7277: POP
7278: POP
// end ;
7279: LD_VAR 0 1
7283: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
7284: LD_EXP 48
7288: IFFALSE 7467
7290: GO 7292
7292: DISABLE
7293: LD_INT 0
7295: PPUSH
7296: PPUSH
// begin for i := 1 to 8 do
7297: LD_ADDR_VAR 0 1
7301: PUSH
7302: DOUBLE
7303: LD_INT 1
7305: DEC
7306: ST_TO_ADDR
7307: LD_INT 8
7309: PUSH
7310: FOR_TO
7311: IFFALSE 7464
// if mpSidePositions [ i ] then
7313: LD_EXP 7
7317: PUSH
7318: LD_VAR 0 1
7322: ARRAY
7323: IFFALSE 7462
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
7325: LD_ADDR_VAR 0 2
7329: PUSH
7330: LD_EXP 19
7334: PUSH
7335: LD_EXP 7
7339: PUSH
7340: LD_VAR 0 1
7344: ARRAY
7345: ARRAY
7346: PPUSH
7347: LD_INT 2
7349: PUSH
7350: LD_INT 21
7352: PUSH
7353: LD_INT 1
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: PUSH
7360: LD_INT 21
7362: PUSH
7363: LD_INT 2
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: LIST
7374: PUSH
7375: LD_INT 22
7377: PUSH
7378: LD_OWVAR 2
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: PPUSH
7391: CALL_OW 70
7395: PUSH
7396: FOR_IN
7397: IFFALSE 7460
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7399: LD_EXP 8
7403: PUSH
7404: LD_VAR 0 1
7408: ARRAY
7409: PUSH
7410: LD_EXP 8
7414: PUSH
7415: LD_OWVAR 2
7419: ARRAY
7420: NONEQUAL
7421: IFTRUE 7444
7423: PUSH
7424: LD_EXP 11
7428: NOT
7429: IFFALSE 7443
7431: PUSH
7432: LD_VAR 0 1
7436: PUSH
7437: LD_OWVAR 2
7441: NONEQUAL
7442: AND
7443: OR
7444: IFFALSE 7458
// ComMoveToArea ( un , BuildUpEscape ) ;
7446: LD_VAR 0 2
7450: PPUSH
7451: LD_INT 9
7453: PPUSH
7454: CALL_OW 113
7458: GO 7396
7460: POP
7461: POP
7462: GO 7310
7464: POP
7465: POP
// enable ;
7466: ENABLE
// end ;
7467: PPOPN 2
7469: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7470: LD_EXP 20
7474: IFFALSE 7524
7476: GO 7478
7478: DISABLE
7479: LD_INT 0
7481: PPUSH
// begin tmp := mpBuildUpTime ;
7482: LD_ADDR_VAR 0 1
7486: PUSH
7487: LD_EXP 20
7491: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7492: LD_INT 35
7494: PPUSH
7495: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7499: LD_ADDR_VAR 0 1
7503: PUSH
7504: LD_VAR 0 1
7508: PUSH
7509: LD_INT 35
7511: MINUS
7512: ST_TO_ADDR
// until not tmp ;
7513: LD_VAR 0 1
7517: NOT
7518: IFFALSE 7492
// EndBuildUp ;
7520: CALL 7103 0 0
// end ;
7524: PPOPN 1
7526: END
// every 0 0$1 trigger mpActive marked mpWin do
7527: LD_INT 100
7529: IFFALSE 7563
7531: GO 7533
7533: DISABLE
// begin if IAmServer then
7534: CALL_OW 518
7538: IFFALSE 7547
// wait ( 0 0$3 ) ;
7540: LD_INT 105
7542: PPUSH
7543: CALL_OW 67
// if Multiplayer then
7547: LD_OWVAR 4
7551: IFFALSE 7559
// YouWinInMultiplayer else
7553: CALL_OW 106
7557: GO 7563
// YouWin ;
7559: CALL_OW 103
// end ;
7563: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7564: LD_INT 0
7566: PPUSH
// result := false ;
7567: LD_ADDR_VAR 0 3
7571: PUSH
7572: LD_INT 0
7574: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7575: LD_VAR 0 1
7579: PUSH
7580: LD_INT 1
7582: DOUBLE
7583: EQUAL
7584: IFTRUE 7606
7586: LD_INT 5
7588: DOUBLE
7589: EQUAL
7590: IFTRUE 7606
7592: LD_INT 6
7594: DOUBLE
7595: EQUAL
7596: IFTRUE 7606
7598: LD_INT 7
7600: DOUBLE
7601: EQUAL
7602: IFTRUE 7606
7604: GO 7679
7606: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7607: LD_ADDR_VAR 0 3
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_VAR 0 2
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: LD_INT 21
7629: PUSH
7630: LD_INT 1
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 33
7639: PUSH
7640: LD_INT 3
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: LD_INT 33
7649: PUSH
7650: LD_INT 5
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PPUSH
7667: CALL_OW 69
7671: PPUSH
7672: CALL 15084 0 1
7676: ST_TO_ADDR
// end ; GameTypeSurvival :
7677: GO 7918
7679: LD_INT 2
7681: DOUBLE
7682: EQUAL
7683: IFTRUE 7687
7685: GO 7817
7687: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7688: LD_ADDR_VAR 0 3
7692: PUSH
7693: LD_INT 22
7695: PUSH
7696: LD_VAR 0 2
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: PUSH
7705: LD_INT 2
7707: PUSH
7708: LD_INT 30
7710: PUSH
7711: LD_INT 0
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 30
7720: PUSH
7721: LD_INT 1
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: LIST
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PPUSH
7737: CALL_OW 69
7741: PPUSH
7742: CALL 15084 0 1
7746: IFFALSE 7814
7748: PUSH
7749: LD_INT 22
7751: PUSH
7752: LD_VAR 0 2
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 2
7763: PUSH
7764: LD_INT 21
7766: PUSH
7767: LD_INT 1
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: LD_INT 33
7776: PUSH
7777: LD_INT 3
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PUSH
7784: LD_INT 33
7786: PUSH
7787: LD_INT 5
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PPUSH
7804: CALL_OW 69
7808: PPUSH
7809: CALL 15084 0 1
7813: AND
7814: ST_TO_ADDR
// end ; GameTypeKing :
7815: GO 7918
7817: LD_INT 3
7819: DOUBLE
7820: EQUAL
7821: IFTRUE 7825
7823: GO 7917
7825: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7826: LD_ADDR_VAR 0 3
7830: PUSH
7831: LD_INT 22
7833: PUSH
7834: LD_VAR 0 2
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PUSH
7843: LD_INT 2
7845: PUSH
7846: LD_INT 21
7848: PUSH
7849: LD_INT 1
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PUSH
7856: LD_INT 33
7858: PUSH
7859: LD_INT 3
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 33
7868: PUSH
7869: LD_INT 5
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PPUSH
7886: CALL_OW 69
7890: PPUSH
7891: CALL 15084 0 1
7895: IFFALSE 7914
7897: PUSH
7898: LD_VAR 0 2
7902: PPUSH
7903: CALL 12200 0 1
7907: PUSH
7908: LD_EXP 35
7912: LESS
7913: AND
7914: ST_TO_ADDR
// end ; end ;
7915: GO 7918
7917: POP
// end ;
7918: LD_VAR 0 3
7922: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7923: LD_INT 100
7925: IFFALSE 8155
7927: GO 7929
7929: DISABLE
7930: LD_INT 0
7932: PPUSH
7933: PPUSH
// begin if Multiplayer then
7934: LD_OWVAR 4
7938: IFFALSE 7946
// SetPlayerSpectator ( ) else
7940: CALL_OW 572
7944: GO 7955
// FogOff ( your_side ) ;
7946: LD_OWVAR 2
7950: PPUSH
7951: CALL_OW 344
// repeat gameIsOn := false ;
7955: LD_ADDR_VAR 0 1
7959: PUSH
7960: LD_INT 0
7962: ST_TO_ADDR
// for i := 1 to 8 do
7963: LD_ADDR_VAR 0 2
7967: PUSH
7968: DOUBLE
7969: LD_INT 1
7971: DEC
7972: ST_TO_ADDR
7973: LD_INT 8
7975: PUSH
7976: FOR_TO
7977: IFFALSE 8107
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7979: LD_EXP 7
7983: PUSH
7984: LD_VAR 0 2
7988: ARRAY
7989: IFFALSE 8002
7991: PUSH
7992: LD_VAR 0 2
7996: PPUSH
7997: CALL_OW 108
8001: AND
8002: IFFALSE 8016
8004: PUSH
8005: LD_VAR 0 2
8009: PUSH
8010: LD_OWVAR 2
8014: NONEQUAL
8015: AND
8016: IFFALSE 8105
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8018: LD_EXP 8
8022: PUSH
8023: LD_VAR 0 2
8027: ARRAY
8028: NOT
8029: IFTRUE 8077
8031: PUSH
8032: LD_EXP 8
8036: PUSH
8037: LD_VAR 0 2
8041: ARRAY
8042: PUSH
8043: LD_EXP 8
8047: PUSH
8048: LD_OWVAR 2
8052: ARRAY
8053: NONEQUAL
8054: IFFALSE 8076
8056: PUSH
8057: LD_OWVAR 2
8061: PPUSH
8062: LD_VAR 0 2
8066: PPUSH
8067: CALL_OW 81
8071: PUSH
8072: LD_INT 1
8074: NONEQUAL
8075: AND
8076: OR
8077: IFFALSE 8105
// if HasPowerByGameType ( mpGameType , i ) then
8079: LD_EXP 3
8083: PPUSH
8084: LD_VAR 0 2
8088: PPUSH
8089: CALL 7564 0 2
8093: IFFALSE 8105
// begin gameIsOn := true ;
8095: LD_ADDR_VAR 0 1
8099: PUSH
8100: LD_INT 1
8102: ST_TO_ADDR
// break ;
8103: GO 8107
// end ;
8105: GO 7976
8107: POP
8108: POP
// wait ( 100 ) ;
8109: LD_INT 100
8111: PPUSH
8112: CALL_OW 67
// until not gameIsOn ;
8116: LD_VAR 0 1
8120: NOT
8121: IFFALSE 7955
// if IAmServer then
8123: CALL_OW 518
8127: IFFALSE 8136
// wait ( 0 0$3 ) ;
8129: LD_INT 105
8131: PPUSH
8132: CALL_OW 67
// if Multiplayer then
8136: LD_OWVAR 4
8140: IFFALSE 8148
// YouLostInMultiplayer else
8142: CALL_OW 107
8146: GO 8155
// YouLost (  ) ;
8148: LD_STRING 
8150: PPUSH
8151: CALL_OW 104
// end ;
8155: PPOPN 2
8157: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
8158: LD_EXP 33
8162: IFFALSE 8546
8164: GO 8166
8166: DISABLE
8167: LD_INT 0
8169: PPUSH
8170: PPUSH
8171: PPUSH
8172: PPUSH
8173: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
8174: LD_ADDR_VAR 0 5
8178: PUSH
8179: LD_INT 1
8181: PUSH
8182: LD_INT 2
8184: PUSH
8185: LD_INT 3
8187: PUSH
8188: LD_INT 4
8190: PUSH
8191: LD_INT 5
8193: PUSH
8194: LD_INT 6
8196: PUSH
8197: LD_INT 7
8199: PUSH
8200: LD_INT 8
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
8213: LD_INT 350
8215: PPUSH
8216: CALL_OW 67
// for i := 1 to 8 do
8220: LD_ADDR_VAR 0 1
8224: PUSH
8225: DOUBLE
8226: LD_INT 1
8228: DEC
8229: ST_TO_ADDR
8230: LD_INT 8
8232: PUSH
8233: FOR_TO
8234: IFFALSE 8516
// begin j := sides [ i ] ;
8236: LD_ADDR_VAR 0 2
8240: PUSH
8241: LD_VAR 0 5
8245: PUSH
8246: LD_VAR 0 1
8250: ARRAY
8251: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
8252: LD_EXP 40
8256: PUSH
8257: LD_VAR 0 2
8261: ARRAY
8262: PPUSH
8263: CALL 15084 0 1
8267: IFFALSE 8280
8269: PUSH
8270: LD_VAR 0 2
8274: PPUSH
8275: CALL_OW 108
8279: AND
8280: IFFALSE 8298
8282: PUSH
8283: LD_EXP 3
8287: PPUSH
8288: LD_VAR 0 2
8292: PPUSH
8293: CALL 7564 0 2
8297: AND
8298: IFFALSE 8514
// begin wait ( mpRespawn div 2 ) ;
8300: LD_EXP 33
8304: PUSH
8305: LD_INT 2
8307: DIV
8308: PPUSH
8309: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8313: LD_ADDR_VAR 0 3
8317: PUSH
8318: LD_INT 22
8320: PUSH
8321: LD_VAR 0 2
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 50
8332: PUSH
8333: EMPTY
8334: LIST
8335: PUSH
8336: LD_INT 2
8338: PUSH
8339: LD_INT 30
8341: PUSH
8342: LD_INT 0
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 30
8351: PUSH
8352: LD_INT 1
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: LIST
8368: PPUSH
8369: CALL_OW 69
8373: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8374: LD_VAR 0 3
8378: NOT
8379: IFTRUE 8393
8381: PUSH
8382: LD_VAR 0 2
8386: PPUSH
8387: CALL_OW 108
8391: NOT
8392: OR
8393: IFTRUE 8412
8395: PUSH
8396: LD_EXP 3
8400: PPUSH
8401: LD_VAR 0 2
8405: PPUSH
8406: CALL 7564 0 2
8410: NOT
8411: OR
8412: IFFALSE 8416
// continue ;
8414: GO 8233
// spawn := tmp [ 1 ] ;
8416: LD_ADDR_VAR 0 4
8420: PUSH
8421: LD_VAR 0 3
8425: PUSH
8426: LD_INT 1
8428: ARRAY
8429: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8430: LD_EXP 40
8434: PUSH
8435: LD_VAR 0 2
8439: ARRAY
8440: PUSH
8441: LD_INT 1
8443: ARRAY
8444: PPUSH
8445: LD_VAR 0 4
8449: PPUSH
8450: CALL_OW 250
8454: PPUSH
8455: LD_VAR 0 4
8459: PPUSH
8460: CALL_OW 251
8464: PPUSH
8465: LD_INT 32
8467: PPUSH
8468: LD_INT 1
8470: PPUSH
8471: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8475: LD_ADDR_EXP 40
8479: PUSH
8480: LD_EXP 40
8484: PPUSH
8485: LD_VAR 0 2
8489: PPUSH
8490: LD_EXP 40
8494: PUSH
8495: LD_VAR 0 2
8499: ARRAY
8500: PPUSH
8501: LD_INT 1
8503: PPUSH
8504: CALL_OW 3
8508: PPUSH
8509: CALL_OW 1
8513: ST_TO_ADDR
// end ; end ;
8514: GO 8233
8516: POP
8517: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8518: LD_ADDR_VAR 0 5
8522: PUSH
8523: LD_VAR 0 5
8527: PPUSH
8528: LD_INT 1
8530: PPUSH
8531: LD_INT 8
8533: PPUSH
8534: LD_INT 1
8536: PPUSH
8537: CALL 17410 0 4
8541: ST_TO_ADDR
// until false ;
8542: LD_INT 0
8544: IFFALSE 8213
// end ;
8546: PPOPN 5
8548: END
// every 0 0$1 marked mpActive do
8549: GO 8551
8551: DISABLE
// begin enable ;
8552: ENABLE
// if not mpDisplayStrings then
8553: LD_EXP 38
8557: NOT
8558: IFFALSE 8569
// begin display_strings := [ ] ;
8560: LD_ADDR_OWVAR 47
8564: PUSH
8565: EMPTY
8566: ST_TO_ADDR
// exit ;
8567: GO 8579
// end ; display_strings := mpDisplayStrings ;
8569: LD_ADDR_OWVAR 47
8573: PUSH
8574: LD_EXP 38
8578: ST_TO_ADDR
// end ; end_of_file
8579: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8580: LD_INT 0
8582: PPUSH
8583: PPUSH
8584: PPUSH
8585: PPUSH
8586: PPUSH
8587: PPUSH
8588: PPUSH
8589: PPUSH
8590: PPUSH
// if GetType ( un ) = unit_vehicle then
8591: LD_VAR 0 1
8595: PPUSH
8596: CALL_OW 247
8600: PUSH
8601: LD_INT 2
8603: EQUAL
8604: IFFALSE 8608
// exit ;
8606: GO 9282
// side := GetSide ( un ) ;
8608: LD_ADDR_VAR 0 9
8612: PUSH
8613: LD_VAR 0 1
8617: PPUSH
8618: CALL_OW 255
8622: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
8623: LD_EXP 3
8627: PUSH
8628: LD_INT 2
8630: EQUAL
8631: IFFALSE 8725
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8633: LD_VAR 0 1
8637: PPUSH
8638: CALL_OW 266
8642: PUSH
8643: LD_INT 0
8645: PUSH
8646: LD_INT 1
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: IN
8653: IFFALSE 8725
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8655: LD_ADDR_VAR 0 3
8659: PUSH
8660: LD_INT 22
8662: PUSH
8663: LD_VAR 0 9
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: PUSH
8672: LD_INT 2
8674: PUSH
8675: LD_INT 21
8677: PUSH
8678: LD_INT 1
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: PUSH
8685: LD_INT 33
8687: PUSH
8688: LD_INT 3
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: LIST
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PPUSH
8704: CALL_OW 69
8708: PUSH
8709: FOR_IN
8710: IFFALSE 8723
// KillUnit ( i ) ;
8712: LD_VAR 0 3
8716: PPUSH
8717: CALL_OW 66
8721: GO 8709
8723: POP
8724: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8725: LD_VAR 0 1
8729: PPUSH
8730: CALL_OW 257
8734: PUSH
8735: LD_INT 12
8737: PUSH
8738: LD_INT 17
8740: PUSH
8741: LD_INT 15
8743: PUSH
8744: LD_INT 16
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: IN
8753: IFTRUE 8770
8755: PUSH
8756: LD_VAR 0 1
8760: PPUSH
8761: CALL_OW 263
8765: PUSH
8766: LD_INT 5
8768: EQUAL
8769: OR
8770: IFFALSE 9007
// begin tag := 0 ;
8772: LD_ADDR_VAR 0 5
8776: PUSH
8777: LD_INT 0
8779: ST_TO_ADDR
// for i := 1 to 8 do
8780: LD_ADDR_VAR 0 3
8784: PUSH
8785: DOUBLE
8786: LD_INT 1
8788: DEC
8789: ST_TO_ADDR
8790: LD_INT 8
8792: PUSH
8793: FOR_TO
8794: IFFALSE 8828
// if un in mpApePosIndex [ i ] then
8796: LD_VAR 0 1
8800: PUSH
8801: LD_EXP 32
8805: PUSH
8806: LD_VAR 0 3
8810: ARRAY
8811: IN
8812: IFFALSE 8826
// begin tag := i ;
8814: LD_ADDR_VAR 0 5
8818: PUSH
8819: LD_VAR 0 3
8823: ST_TO_ADDR
// break ;
8824: GO 8828
// end ;
8826: GO 8793
8828: POP
8829: POP
// if not tag then
8830: LD_VAR 0 5
8834: NOT
8835: IFFALSE 8839
// exit ;
8837: GO 9282
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8839: LD_ADDR_VAR 0 7
8843: PUSH
8844: LD_EXP 31
8848: PUSH
8849: LD_EXP 7
8853: PUSH
8854: LD_VAR 0 5
8858: ARRAY
8859: ARRAY
8860: ST_TO_ADDR
// if not area then
8861: LD_VAR 0 7
8865: NOT
8866: IFFALSE 8870
// exit ;
8868: GO 9282
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8870: LD_INT 14700
8872: PUSH
8873: LD_VAR 0 1
8877: PUSH
8878: LD_INT 5
8880: MOD
8881: PUSH
8882: LD_INT 1
8884: PLUS
8885: PUSH
8886: LD_INT 700
8888: MUL
8889: PLUS
8890: PPUSH
8891: CALL_OW 67
// repeat wait ( 10 ) ;
8895: LD_INT 10
8897: PPUSH
8898: CALL_OW 67
// until not mpBlockRespThread ;
8902: LD_EXP 46
8906: NOT
8907: IFFALSE 8895
// mpBlockRespThread := true ;
8909: LD_ADDR_EXP 46
8913: PUSH
8914: LD_INT 1
8916: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8917: LD_INT 0
8919: PPUSH
8920: CALL 47177 0 1
// ape := CreateHuman ;
8924: LD_ADDR_VAR 0 4
8928: PUSH
8929: CALL_OW 44
8933: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8934: LD_ADDR_EXP 32
8938: PUSH
8939: LD_EXP 32
8943: PPUSH
8944: LD_VAR 0 5
8948: PPUSH
8949: LD_EXP 32
8953: PUSH
8954: LD_VAR 0 5
8958: ARRAY
8959: PPUSH
8960: LD_VAR 0 4
8964: PPUSH
8965: CALL 51050 0 2
8969: PPUSH
8970: CALL_OW 1
8974: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8975: LD_VAR 0 4
8979: PPUSH
8980: LD_VAR 0 7
8984: PPUSH
8985: LD_INT 0
8987: PPUSH
8988: CALL_OW 49
// wait ( 10 ) ;
8992: LD_INT 10
8994: PPUSH
8995: CALL_OW 67
// mpBlockRespThread := false ;
8999: LD_ADDR_EXP 46
9003: PUSH
9004: LD_INT 0
9006: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
9007: LD_VAR 0 1
9011: PPUSH
9012: CALL_OW 247
9016: PUSH
9017: LD_INT 1
9019: EQUAL
9020: IFFALSE 9037
9022: PUSH
9023: LD_VAR 0 1
9027: PPUSH
9028: CALL_OW 248
9032: PUSH
9033: LD_INT 0
9035: GREATER
9036: AND
9037: IFFALSE 9282
// begin if not mpRespawn then
9039: LD_EXP 33
9043: NOT
9044: IFFALSE 9048
// exit ;
9046: GO 9282
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
9048: LD_VAR 0 9
9052: PPUSH
9053: CALL_OW 108
9057: NOT
9058: IFFALSE 9077
9060: PUSH
9061: LD_EXP 3
9065: PPUSH
9066: LD_VAR 0 9
9070: PPUSH
9071: CALL 7564 0 2
9075: NOT
9076: AND
9077: IFFALSE 9081
// exit ;
9079: GO 9282
// side := GetSide ( un ) ;
9081: LD_ADDR_VAR 0 9
9085: PUSH
9086: LD_VAR 0 1
9090: PPUSH
9091: CALL_OW 255
9095: ST_TO_ADDR
// nation := GetNation ( un ) ;
9096: LD_ADDR_VAR 0 8
9100: PUSH
9101: LD_VAR 0 1
9105: PPUSH
9106: CALL_OW 248
9110: ST_TO_ADDR
// class := GetClass ( un ) ;
9111: LD_ADDR_VAR 0 6
9115: PUSH
9116: LD_VAR 0 1
9120: PPUSH
9121: CALL_OW 257
9125: ST_TO_ADDR
// if class > 4 then
9126: LD_VAR 0 6
9130: PUSH
9131: LD_INT 4
9133: GREATER
9134: IFFALSE 9144
// class := 1 ;
9136: LD_ADDR_VAR 0 6
9140: PUSH
9141: LD_INT 1
9143: ST_TO_ADDR
// repeat wait ( 10 ) ;
9144: LD_INT 10
9146: PPUSH
9147: CALL_OW 67
// until not mpBlockRespThread ;
9151: LD_EXP 46
9155: NOT
9156: IFFALSE 9144
// mpBlockRespThread := true ;
9158: LD_ADDR_EXP 46
9162: PUSH
9163: LD_INT 1
9165: ST_TO_ADDR
// uc_side := side ;
9166: LD_ADDR_OWVAR 20
9170: PUSH
9171: LD_VAR 0 9
9175: ST_TO_ADDR
// uc_nation := nation ;
9176: LD_ADDR_OWVAR 21
9180: PUSH
9181: LD_VAR 0 8
9185: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
9186: LD_INT 0
9188: PPUSH
9189: LD_VAR 0 6
9193: PPUSH
9194: LD_INT 2
9196: PPUSH
9197: CALL_OW 380
// un := CreateHuman ;
9201: LD_ADDR_VAR 0 1
9205: PUSH
9206: CALL_OW 44
9210: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
9211: LD_ADDR_EXP 40
9215: PUSH
9216: LD_EXP 40
9220: PPUSH
9221: LD_VAR 0 9
9225: PPUSH
9226: LD_EXP 40
9230: PUSH
9231: LD_VAR 0 9
9235: ARRAY
9236: PPUSH
9237: LD_EXP 40
9241: PUSH
9242: LD_VAR 0 9
9246: ARRAY
9247: PUSH
9248: LD_INT 1
9250: PLUS
9251: PPUSH
9252: LD_VAR 0 1
9256: PPUSH
9257: CALL_OW 1
9261: PPUSH
9262: CALL_OW 1
9266: ST_TO_ADDR
// wait ( 10 ) ;
9267: LD_INT 10
9269: PPUSH
9270: CALL_OW 67
// mpBlockRespThread := false ;
9274: LD_ADDR_EXP 46
9278: PUSH
9279: LD_INT 0
9281: ST_TO_ADDR
// end ; end ;
9282: LD_VAR 0 2
9286: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9287: LD_INT 0
9289: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9290: LD_VAR 0 1
9294: PPUSH
9295: CALL_OW 266
9299: PUSH
9300: LD_INT 0
9302: PUSH
9303: LD_INT 1
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: IN
9310: IFFALSE 9335
// SetBName ( building , @ & GetSide ( building ) ) ;
9312: LD_VAR 0 1
9316: PPUSH
9317: LD_STRING @
9319: PUSH
9320: LD_VAR 0 1
9324: PPUSH
9325: CALL_OW 255
9329: STR
9330: PPUSH
9331: CALL_OW 500
// end ;
9335: LD_VAR 0 2
9339: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9340: LD_INT 0
9342: PPUSH
9343: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
9344: LD_EXP 3
9348: PUSH
9349: LD_INT 2
9351: EQUAL
9352: IFFALSE 9376
9354: PUSH
9355: LD_VAR 0 1
9359: PPUSH
9360: CALL_OW 266
9364: PUSH
9365: LD_INT 0
9367: PUSH
9368: LD_INT 1
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: IN
9375: AND
9376: IFFALSE 9455
// begin SetSide ( building , oldSide ) ;
9378: LD_VAR 0 1
9382: PPUSH
9383: LD_VAR 0 2
9387: PPUSH
9388: CALL_OW 235
// KillUnit ( building ) ;
9392: LD_VAR 0 1
9396: PPUSH
9397: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9401: LD_ADDR_VAR 0 5
9405: PUSH
9406: LD_INT 22
9408: PUSH
9409: LD_VAR 0 2
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PUSH
9418: LD_INT 21
9420: PUSH
9421: LD_INT 1
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PPUSH
9432: CALL_OW 69
9436: PUSH
9437: FOR_IN
9438: IFFALSE 9451
// KillUnit ( i ) ;
9440: LD_VAR 0 5
9444: PPUSH
9445: CALL_OW 66
9449: GO 9437
9451: POP
9452: POP
// exit ;
9453: GO 9500
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9455: LD_VAR 0 1
9459: PPUSH
9460: CALL_OW 266
9464: PUSH
9465: LD_INT 0
9467: PUSH
9468: LD_INT 1
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: IN
9475: IFFALSE 9500
// SetBName ( building , @ & GetSide ( building ) ) ;
9477: LD_VAR 0 1
9481: PPUSH
9482: LD_STRING @
9484: PUSH
9485: LD_VAR 0 1
9489: PPUSH
9490: CALL_OW 255
9494: STR
9495: PPUSH
9496: CALL_OW 500
// end ;
9500: LD_VAR 0 4
9504: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9505: LD_INT 0
9507: PPUSH
9508: PPUSH
9509: PPUSH
// if mpGameType <> GameTypeFamine then
9510: LD_EXP 3
9514: PUSH
9515: LD_INT 5
9517: NONEQUAL
9518: IFFALSE 9522
// exit ;
9520: GO 9737
// for i := 1 to mpGlobalOilDeposits do
9522: LD_ADDR_VAR 0 6
9526: PUSH
9527: DOUBLE
9528: LD_INT 1
9530: DEC
9531: ST_TO_ADDR
9532: LD_EXP 41
9536: PUSH
9537: FOR_TO
9538: IFFALSE 9735
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9540: LD_EXP 41
9544: PUSH
9545: LD_VAR 0 6
9549: ARRAY
9550: PUSH
9551: LD_INT 1
9553: ARRAY
9554: PPUSH
9555: LD_EXP 41
9559: PUSH
9560: LD_VAR 0 6
9564: ARRAY
9565: PUSH
9566: LD_INT 2
9568: ARRAY
9569: PPUSH
9570: CALL_OW 428
9574: PUSH
9575: LD_VAR 0 1
9579: EQUAL
9580: IFFALSE 9733
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9582: LD_ADDR_VAR 0 7
9586: PUSH
9587: LD_EXP 41
9591: PUSH
9592: LD_VAR 0 6
9596: ARRAY
9597: PUSH
9598: LD_INT 3
9600: ARRAY
9601: ST_TO_ADDR
// value := value - amount ;
9602: LD_ADDR_VAR 0 7
9606: PUSH
9607: LD_VAR 0 7
9611: PUSH
9612: LD_VAR 0 4
9616: MINUS
9617: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9618: LD_ADDR_EXP 41
9622: PUSH
9623: LD_EXP 41
9627: PPUSH
9628: LD_VAR 0 6
9632: PPUSH
9633: LD_EXP 41
9637: PUSH
9638: LD_VAR 0 6
9642: ARRAY
9643: PPUSH
9644: LD_INT 3
9646: PPUSH
9647: LD_VAR 0 7
9651: PPUSH
9652: CALL_OW 1
9656: PPUSH
9657: CALL_OW 1
9661: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9662: LD_VAR 0 1
9666: PPUSH
9667: LD_VAR 0 7
9671: PPUSH
9672: CALL_OW 505
// if value <= 0 then
9676: LD_VAR 0 7
9680: PUSH
9681: LD_INT 0
9683: LESSEQUAL
9684: IFFALSE 9733
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9686: LD_EXP 41
9690: PUSH
9691: LD_VAR 0 6
9695: ARRAY
9696: PUSH
9697: LD_INT 1
9699: ARRAY
9700: PPUSH
9701: LD_EXP 41
9705: PUSH
9706: LD_VAR 0 6
9710: ARRAY
9711: PUSH
9712: LD_INT 2
9714: ARRAY
9715: PPUSH
9716: CALL_OW 63
// KillUnit ( building ) ;
9720: LD_VAR 0 1
9724: PPUSH
9725: CALL_OW 66
// exit ;
9729: POP
9730: POP
9731: GO 9737
// end ; end ; end ;
9733: GO 9537
9735: POP
9736: POP
// end ;
9737: LD_VAR 0 5
9741: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9742: LD_INT 0
9744: PPUSH
9745: PPUSH
9746: PPUSH
// if mpGameType <> GameTypeFamine then
9747: LD_EXP 3
9751: PUSH
9752: LD_INT 5
9754: NONEQUAL
9755: IFFALSE 9759
// exit ;
9757: GO 9974
// for i := 1 to mpGlobalSibDeposits do
9759: LD_ADDR_VAR 0 6
9763: PUSH
9764: DOUBLE
9765: LD_INT 1
9767: DEC
9768: ST_TO_ADDR
9769: LD_EXP 42
9773: PUSH
9774: FOR_TO
9775: IFFALSE 9972
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9777: LD_EXP 42
9781: PUSH
9782: LD_VAR 0 6
9786: ARRAY
9787: PUSH
9788: LD_INT 1
9790: ARRAY
9791: PPUSH
9792: LD_EXP 42
9796: PUSH
9797: LD_VAR 0 6
9801: ARRAY
9802: PUSH
9803: LD_INT 2
9805: ARRAY
9806: PPUSH
9807: CALL_OW 428
9811: PUSH
9812: LD_VAR 0 1
9816: EQUAL
9817: IFFALSE 9970
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9819: LD_ADDR_VAR 0 7
9823: PUSH
9824: LD_EXP 42
9828: PUSH
9829: LD_VAR 0 6
9833: ARRAY
9834: PUSH
9835: LD_INT 3
9837: ARRAY
9838: ST_TO_ADDR
// value := value - amount ;
9839: LD_ADDR_VAR 0 7
9843: PUSH
9844: LD_VAR 0 7
9848: PUSH
9849: LD_VAR 0 4
9853: MINUS
9854: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9855: LD_ADDR_EXP 42
9859: PUSH
9860: LD_EXP 42
9864: PPUSH
9865: LD_VAR 0 6
9869: PPUSH
9870: LD_EXP 42
9874: PUSH
9875: LD_VAR 0 6
9879: ARRAY
9880: PPUSH
9881: LD_INT 3
9883: PPUSH
9884: LD_VAR 0 7
9888: PPUSH
9889: CALL_OW 1
9893: PPUSH
9894: CALL_OW 1
9898: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9899: LD_VAR 0 1
9903: PPUSH
9904: LD_VAR 0 7
9908: PPUSH
9909: CALL_OW 505
// if value <= 0 then
9913: LD_VAR 0 7
9917: PUSH
9918: LD_INT 0
9920: LESSEQUAL
9921: IFFALSE 9970
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9923: LD_EXP 42
9927: PUSH
9928: LD_VAR 0 6
9932: ARRAY
9933: PUSH
9934: LD_INT 1
9936: ARRAY
9937: PPUSH
9938: LD_EXP 42
9942: PUSH
9943: LD_VAR 0 6
9947: ARRAY
9948: PUSH
9949: LD_INT 2
9951: ARRAY
9952: PPUSH
9953: CALL_OW 63
// KillUnit ( building ) ;
9957: LD_VAR 0 1
9961: PPUSH
9962: CALL_OW 66
// exit ;
9966: POP
9967: POP
9968: GO 9974
// end ; end ; end ;
9970: GO 9774
9972: POP
9973: POP
// end ;
9974: LD_VAR 0 5
9978: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
9979: LD_INT 0
9981: PPUSH
9982: PPUSH
// side := GetSide ( factory ) ;
9983: LD_ADDR_VAR 0 7
9987: PUSH
9988: LD_VAR 0 1
9992: PPUSH
9993: CALL_OW 255
9997: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9998: LD_VAR 0 5
10002: PUSH
10003: LD_INT 81
10005: EQUAL
10006: IFFALSE 10044
10008: PUSH
10009: LD_INT 22
10011: PUSH
10012: LD_VAR 0 7
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PUSH
10021: LD_INT 34
10023: PUSH
10024: LD_INT 81
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PPUSH
10035: CALL_OW 69
10039: PUSH
10040: LD_INT 0
10042: GREATER
10043: AND
10044: IFFALSE 10077
// begin ComCancel ( factory ) ;
10046: LD_VAR 0 1
10050: PPUSH
10051: CALL_OW 127
// if side = your_side then
10055: LD_VAR 0 7
10059: PUSH
10060: LD_OWVAR 2
10064: EQUAL
10065: IFFALSE 10077
// HintSpec ( VehLimit , 2 ) ;
10067: LD_STRING VehLimit
10069: PPUSH
10070: LD_INT 2
10072: PPUSH
10073: CALL_OW 338
// end ; end ;
10077: LD_VAR 0 6
10081: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
10082: LD_INT 0
10084: PPUSH
10085: PPUSH
10086: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
10087: LD_VAR 0 1
10091: PPUSH
10092: CALL_OW 264
10096: PUSH
10097: LD_INT 81
10099: EQUAL
10100: IFFALSE 10117
10102: PUSH
10103: LD_VAR 0 1
10107: PPUSH
10108: CALL_OW 263
10112: PUSH
10113: LD_INT 1
10115: EQUAL
10116: AND
10117: IFFALSE 10397
// begin for i := 1 to Count ( minersList ) do
10119: LD_ADDR_VAR 0 6
10123: PUSH
10124: DOUBLE
10125: LD_INT 1
10127: DEC
10128: ST_TO_ADDR
10129: LD_EXP 57
10133: PPUSH
10134: CALL 15084 0 1
10138: PUSH
10139: FOR_TO
10140: IFFALSE 10258
// begin if minersList [ i ] = oldId then
10142: LD_EXP 57
10146: PUSH
10147: LD_VAR 0 6
10151: ARRAY
10152: PUSH
10153: LD_VAR 0 2
10157: EQUAL
10158: IFFALSE 10256
// begin for j := 1 to minerMinesList [ i ] do
10160: LD_ADDR_VAR 0 7
10164: PUSH
10165: DOUBLE
10166: LD_INT 1
10168: DEC
10169: ST_TO_ADDR
10170: LD_EXP 58
10174: PUSH
10175: LD_VAR 0 6
10179: ARRAY
10180: PUSH
10181: FOR_TO
10182: IFFALSE 10232
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
10184: LD_EXP 58
10188: PUSH
10189: LD_VAR 0 6
10193: ARRAY
10194: PUSH
10195: LD_VAR 0 7
10199: ARRAY
10200: PUSH
10201: LD_INT 1
10203: ARRAY
10204: PPUSH
10205: LD_EXP 58
10209: PUSH
10210: LD_VAR 0 6
10214: ARRAY
10215: PUSH
10216: LD_VAR 0 7
10220: ARRAY
10221: PUSH
10222: LD_INT 2
10224: ARRAY
10225: PPUSH
10226: CALL_OW 612
10230: GO 10181
10232: POP
10233: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
10234: LD_ADDR_EXP 58
10238: PUSH
10239: LD_EXP 58
10243: PPUSH
10244: LD_VAR 0 6
10248: PPUSH
10249: CALL_OW 3
10253: ST_TO_ADDR
// break ;
10254: GO 10258
// end ; end ;
10256: GO 10139
10258: POP
10259: POP
// minersList := minersList diff oldId ;
10260: LD_ADDR_EXP 57
10264: PUSH
10265: LD_EXP 57
10269: PUSH
10270: LD_VAR 0 2
10274: DIFF
10275: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
10276: LD_INT 22
10278: PUSH
10279: LD_VAR 0 4
10283: PPUSH
10284: CALL_OW 255
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 34
10295: PUSH
10296: LD_INT 81
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PPUSH
10307: CALL_OW 69
10311: PUSH
10312: LD_INT 1
10314: GREATER
10315: IFFALSE 10342
// begin ComExit ( unit ) ;
10317: LD_VAR 0 4
10321: PPUSH
10322: CALL 51448 0 1
// SetSide ( newId , oldSide ) ;
10326: LD_VAR 0 1
10330: PPUSH
10331: LD_VAR 0 3
10335: PPUSH
10336: CALL_OW 235
// exit ;
10340: GO 10397
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
10342: LD_ADDR_EXP 57
10346: PUSH
10347: LD_EXP 57
10351: PPUSH
10352: LD_EXP 57
10356: PUSH
10357: LD_INT 1
10359: PLUS
10360: PPUSH
10361: LD_VAR 0 1
10365: PPUSH
10366: CALL_OW 1
10370: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10371: LD_ADDR_EXP 58
10375: PUSH
10376: LD_EXP 58
10380: PPUSH
10381: LD_EXP 58
10385: PUSH
10386: LD_INT 1
10388: PLUS
10389: PPUSH
10390: EMPTY
10391: PPUSH
10392: CALL_OW 1
10396: ST_TO_ADDR
// end ; end ; end_of_file
10397: LD_VAR 0 5
10401: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10402: LD_EXP 39
10406: IFFALSE 10414
10408: PUSH
10409: CALL 10624 0 0
10413: AND
10414: IFFALSE 10422
10416: PUSH
10417: LD_OWVAR 4
10421: AND
10422: IFFALSE 10621
10424: GO 10426
10426: DISABLE
10427: LD_INT 0
10429: PPUSH
10430: PPUSH
// begin canWin := false ;
10431: LD_ADDR_VAR 0 2
10435: PUSH
10436: LD_INT 0
10438: ST_TO_ADDR
// if not HasPower ( your_side ) then
10439: LD_OWVAR 2
10443: PPUSH
10444: CALL 10666 0 1
10448: NOT
10449: IFFALSE 10460
// begin Multiplayer_Loose_Message ;
10451: CALL_OW 521
// enable ( mpLose ) ;
10455: LD_INT 102
10457: ENABLE_MARKED
// end else
10458: GO 10621
// begin canWin := true ;
10460: LD_ADDR_VAR 0 2
10464: PUSH
10465: LD_INT 1
10467: ST_TO_ADDR
// for i := 1 to 8 do
10468: LD_ADDR_VAR 0 1
10472: PUSH
10473: DOUBLE
10474: LD_INT 1
10476: DEC
10477: ST_TO_ADDR
10478: LD_INT 8
10480: PUSH
10481: FOR_TO
10482: IFFALSE 10607
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10484: LD_EXP 7
10488: PUSH
10489: LD_VAR 0 1
10493: ARRAY
10494: IFFALSE 10507
10496: PUSH
10497: LD_VAR 0 1
10501: PPUSH
10502: CALL_OW 108
10506: AND
10507: IFFALSE 10521
10509: PUSH
10510: LD_VAR 0 1
10514: PUSH
10515: LD_OWVAR 2
10519: NONEQUAL
10520: AND
10521: IFFALSE 10605
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10523: LD_EXP 8
10527: PUSH
10528: LD_VAR 0 1
10532: ARRAY
10533: NOT
10534: IFTRUE 10582
10536: PUSH
10537: LD_EXP 8
10541: PUSH
10542: LD_VAR 0 1
10546: ARRAY
10547: PUSH
10548: LD_EXP 8
10552: PUSH
10553: LD_OWVAR 2
10557: ARRAY
10558: NONEQUAL
10559: IFFALSE 10581
10561: PUSH
10562: LD_OWVAR 2
10566: PPUSH
10567: LD_VAR 0 1
10571: PPUSH
10572: CALL_OW 81
10576: PUSH
10577: LD_INT 1
10579: NONEQUAL
10580: AND
10581: OR
10582: IFFALSE 10605
// if HasPower ( i ) then
10584: LD_VAR 0 1
10588: PPUSH
10589: CALL 10666 0 1
10593: IFFALSE 10605
// begin canWin := false ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_INT 0
10602: ST_TO_ADDR
// break ;
10603: GO 10607
// end ;
10605: GO 10481
10607: POP
10608: POP
// if canWin then
10609: LD_VAR 0 2
10613: IFFALSE 10620
// enable ( mpWin ) else
10615: LD_INT 101
10617: ENABLE_MARKED
10618: GO 10621
// enable ;
10620: ENABLE
// end ; end ;
10621: PPOPN 2
10623: END
// function CanWinLoose ; begin
10624: LD_INT 0
10626: PPUSH
// result := true ;
10627: LD_ADDR_VAR 0 1
10631: PUSH
10632: LD_INT 1
10634: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10635: CALL_OW 531
10639: IFFALSE 10651
10641: PUSH
10642: CALL_OW 519
10646: PUSH
10647: LD_INT 1
10649: GREATER
10650: AND
10651: IFFALSE 10661
// result := false ;
10653: LD_ADDR_VAR 0 1
10657: PUSH
10658: LD_INT 0
10660: ST_TO_ADDR
// end ;
10661: LD_VAR 0 1
10665: RET
// function HasPower ( i ) ; begin
10666: LD_INT 0
10668: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10669: LD_ADDR_VAR 0 2
10673: PUSH
10674: LD_INT 22
10676: PUSH
10677: LD_VAR 0 1
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: LD_INT 2
10688: PUSH
10689: LD_INT 21
10691: PUSH
10692: LD_INT 1
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 33
10701: PUSH
10702: LD_INT 3
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 33
10711: PUSH
10712: LD_INT 5
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PPUSH
10729: CALL_OW 69
10733: ST_TO_ADDR
// end ; end_of_file
10734: LD_VAR 0 2
10738: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10739: LD_EXP 39
10743: IFFALSE 10786
10745: GO 10747
10747: DISABLE
10748: LD_INT 0
10750: PPUSH
// begin for i := 1 to 8 do
10751: LD_ADDR_VAR 0 1
10755: PUSH
10756: DOUBLE
10757: LD_INT 1
10759: DEC
10760: ST_TO_ADDR
10761: LD_INT 8
10763: PUSH
10764: FOR_TO
10765: IFFALSE 10784
// SetRestrict ( b_depot , i , state_disabled ) ;
10767: LD_INT 0
10769: PPUSH
10770: LD_VAR 0 1
10774: PPUSH
10775: LD_INT 0
10777: PPUSH
10778: CALL_OW 324
10782: GO 10764
10784: POP
10785: POP
// end ;
10786: PPOPN 1
10788: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10789: LD_EXP 39
10793: IFFALSE 10801
10795: PUSH
10796: CALL 11011 0 0
10800: AND
10801: IFFALSE 10809
10803: PUSH
10804: LD_OWVAR 4
10808: AND
10809: IFFALSE 11008
10811: GO 10813
10813: DISABLE
10814: LD_INT 0
10816: PPUSH
10817: PPUSH
// begin canWin := false ;
10818: LD_ADDR_VAR 0 2
10822: PUSH
10823: LD_INT 0
10825: ST_TO_ADDR
// if not HasPower ( your_side ) then
10826: LD_OWVAR 2
10830: PPUSH
10831: CALL 11053 0 1
10835: NOT
10836: IFFALSE 10847
// begin Multiplayer_Loose_Message ;
10838: CALL_OW 521
// enable ( mpLose ) ;
10842: LD_INT 102
10844: ENABLE_MARKED
// end else
10845: GO 11008
// begin canWin := true ;
10847: LD_ADDR_VAR 0 2
10851: PUSH
10852: LD_INT 1
10854: ST_TO_ADDR
// for i := 1 to 8 do
10855: LD_ADDR_VAR 0 1
10859: PUSH
10860: DOUBLE
10861: LD_INT 1
10863: DEC
10864: ST_TO_ADDR
10865: LD_INT 8
10867: PUSH
10868: FOR_TO
10869: IFFALSE 10994
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10871: LD_EXP 7
10875: PUSH
10876: LD_VAR 0 1
10880: ARRAY
10881: IFFALSE 10894
10883: PUSH
10884: LD_VAR 0 1
10888: PPUSH
10889: CALL_OW 108
10893: AND
10894: IFFALSE 10908
10896: PUSH
10897: LD_VAR 0 1
10901: PUSH
10902: LD_OWVAR 2
10906: NONEQUAL
10907: AND
10908: IFFALSE 10992
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10910: LD_EXP 8
10914: PUSH
10915: LD_VAR 0 1
10919: ARRAY
10920: NOT
10921: IFTRUE 10969
10923: PUSH
10924: LD_EXP 8
10928: PUSH
10929: LD_VAR 0 1
10933: ARRAY
10934: PUSH
10935: LD_EXP 8
10939: PUSH
10940: LD_OWVAR 2
10944: ARRAY
10945: NONEQUAL
10946: IFFALSE 10968
10948: PUSH
10949: LD_OWVAR 2
10953: PPUSH
10954: LD_VAR 0 1
10958: PPUSH
10959: CALL_OW 81
10963: PUSH
10964: LD_INT 1
10966: NONEQUAL
10967: AND
10968: OR
10969: IFFALSE 10992
// if HasPower ( i ) then
10971: LD_VAR 0 1
10975: PPUSH
10976: CALL 11053 0 1
10980: IFFALSE 10992
// begin canWin := false ;
10982: LD_ADDR_VAR 0 2
10986: PUSH
10987: LD_INT 0
10989: ST_TO_ADDR
// break ;
10990: GO 10994
// end ;
10992: GO 10868
10994: POP
10995: POP
// if canWin then
10996: LD_VAR 0 2
11000: IFFALSE 11007
// enable ( mpWin ) else
11002: LD_INT 101
11004: ENABLE_MARKED
11005: GO 11008
// enable ;
11007: ENABLE
// end ; end ;
11008: PPOPN 2
11010: END
// function CanWinLoose ; begin
11011: LD_INT 0
11013: PPUSH
// result := true ;
11014: LD_ADDR_VAR 0 1
11018: PUSH
11019: LD_INT 1
11021: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11022: CALL_OW 531
11026: IFFALSE 11038
11028: PUSH
11029: CALL_OW 519
11033: PUSH
11034: LD_INT 1
11036: GREATER
11037: AND
11038: IFFALSE 11048
// result := false ;
11040: LD_ADDR_VAR 0 1
11044: PUSH
11045: LD_INT 0
11047: ST_TO_ADDR
// end ;
11048: LD_VAR 0 1
11052: RET
// function HasPower ( i ) ; begin
11053: LD_INT 0
11055: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11056: LD_INT 22
11058: PUSH
11059: LD_VAR 0 1
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 2
11070: PUSH
11071: LD_INT 30
11073: PUSH
11074: LD_INT 0
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 30
11083: PUSH
11084: LD_INT 1
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PPUSH
11100: CALL_OW 69
11104: NOT
11105: IFFALSE 11109
// exit ;
11107: GO 11174
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11109: LD_ADDR_VAR 0 2
11113: PUSH
11114: LD_INT 22
11116: PUSH
11117: LD_VAR 0 1
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 2
11128: PUSH
11129: LD_INT 21
11131: PUSH
11132: LD_INT 1
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 33
11141: PUSH
11142: LD_INT 3
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 33
11151: PUSH
11152: LD_INT 5
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PPUSH
11169: CALL_OW 69
11173: ST_TO_ADDR
// end ; end_of_file
11174: LD_VAR 0 2
11178: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
11179: LD_EXP 39
11183: IFFALSE 11524
11185: GO 11187
11187: DISABLE
11188: LD_INT 0
11190: PPUSH
11191: PPUSH
11192: PPUSH
// begin mpKingPoints := [ ] ;
11193: LD_ADDR_EXP 49
11197: PUSH
11198: EMPTY
11199: ST_TO_ADDR
// if mpTeamGame then
11200: LD_EXP 11
11204: IFFALSE 11258
// begin for i := 1 to Count ( mpTeams ) do
11206: LD_ADDR_VAR 0 1
11210: PUSH
11211: DOUBLE
11212: LD_INT 1
11214: DEC
11215: ST_TO_ADDR
11216: LD_EXP 10
11220: PPUSH
11221: CALL 15084 0 1
11225: PUSH
11226: FOR_TO
11227: IFFALSE 11254
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
11229: LD_ADDR_EXP 49
11233: PUSH
11234: LD_EXP 49
11238: PPUSH
11239: LD_VAR 0 1
11243: PPUSH
11244: LD_INT 0
11246: PPUSH
11247: CALL_OW 1
11251: ST_TO_ADDR
11252: GO 11226
11254: POP
11255: POP
// end else
11256: GO 11301
// begin for i := 1 to 8 do
11258: LD_ADDR_VAR 0 1
11262: PUSH
11263: DOUBLE
11264: LD_INT 1
11266: DEC
11267: ST_TO_ADDR
11268: LD_INT 8
11270: PUSH
11271: FOR_TO
11272: IFFALSE 11299
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
11274: LD_ADDR_EXP 49
11278: PUSH
11279: LD_EXP 49
11283: PPUSH
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_INT 0
11291: PPUSH
11292: CALL_OW 1
11296: ST_TO_ADDR
11297: GO 11271
11299: POP
11300: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
11301: LD_ADDR_VAR 0 3
11305: PUSH
11306: LD_EXP 2
11310: PPUSH
11311: LD_INT 0
11313: PPUSH
11314: CALL_OW 517
11318: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
11319: LD_ADDR_VAR 0 1
11323: PUSH
11324: DOUBLE
11325: LD_INT 1
11327: DEC
11328: ST_TO_ADDR
11329: LD_VAR 0 3
11333: PUSH
11334: LD_INT 1
11336: ARRAY
11337: PUSH
11338: FOR_TO
11339: IFFALSE 11406
// for j := 1 to 8 do
11341: LD_ADDR_VAR 0 2
11345: PUSH
11346: DOUBLE
11347: LD_INT 1
11349: DEC
11350: ST_TO_ADDR
11351: LD_INT 8
11353: PUSH
11354: FOR_TO
11355: IFFALSE 11402
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
11357: LD_VAR 0 3
11361: PUSH
11362: LD_INT 1
11364: ARRAY
11365: PUSH
11366: LD_VAR 0 1
11370: ARRAY
11371: PPUSH
11372: LD_VAR 0 3
11376: PUSH
11377: LD_INT 2
11379: ARRAY
11380: PUSH
11381: LD_VAR 0 1
11385: ARRAY
11386: PPUSH
11387: LD_VAR 0 2
11391: PPUSH
11392: LD_INT 12
11394: NEG
11395: PPUSH
11396: CALL_OW 330
11400: GO 11354
11402: POP
11403: POP
11404: GO 11338
11406: POP
11407: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
11408: LD_EXP 34
11412: PPUSH
11413: LD_INT 1
11415: PPUSH
11416: CALL_OW 424
// UpdateCounter ;
11420: CALL 12030 0 0
// repeat wait ( 0 0$1 ) ;
11424: LD_INT 35
11426: PPUSH
11427: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11431: LD_ADDR_VAR 0 3
11435: PUSH
11436: LD_EXP 34
11440: PPUSH
11441: LD_INT 3
11443: PUSH
11444: LD_INT 57
11446: PUSH
11447: EMPTY
11448: LIST
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 50
11456: PUSH
11457: EMPTY
11458: LIST
11459: PUSH
11460: LD_INT 2
11462: PUSH
11463: LD_INT 30
11465: PUSH
11466: LD_INT 0
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 30
11475: PUSH
11476: LD_INT 1
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: LIST
11492: PPUSH
11493: CALL_OW 70
11497: ST_TO_ADDR
// if not tmp then
11498: LD_VAR 0 3
11502: NOT
11503: IFFALSE 11507
// continue ;
11505: GO 11424
// AddPoints ( tmp ) ;
11507: LD_VAR 0 3
11511: PPUSH
11512: CALL 11708 0 1
// UpdateCounter ;
11516: CALL 12030 0 0
// until false ;
11520: LD_INT 0
11522: IFFALSE 11424
// end ;
11524: PPOPN 3
11526: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
11527: LD_EXP 39
11531: IFFALSE 11539
11533: PUSH
11534: LD_EXP 37
11538: AND
11539: IFFALSE 11705
11541: GO 11543
11543: DISABLE
11544: LD_INT 0
11546: PPUSH
11547: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
11548: LD_ADDR_VAR 0 2
11552: PUSH
11553: LD_EXP 2
11557: PPUSH
11558: LD_INT 0
11560: PPUSH
11561: CALL_OW 517
11565: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
11566: LD_ADDR_VAR 0 1
11570: PUSH
11571: DOUBLE
11572: LD_INT 1
11574: DEC
11575: ST_TO_ADDR
11576: LD_VAR 0 2
11580: PUSH
11581: LD_INT 1
11583: ARRAY
11584: PUSH
11585: FOR_TO
11586: IFFALSE 11627
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
11588: LD_VAR 0 2
11592: PUSH
11593: LD_INT 1
11595: ARRAY
11596: PUSH
11597: LD_VAR 0 1
11601: ARRAY
11602: PPUSH
11603: LD_VAR 0 2
11607: PUSH
11608: LD_INT 2
11610: ARRAY
11611: PUSH
11612: LD_VAR 0 1
11616: ARRAY
11617: PPUSH
11618: LD_INT 125
11620: PPUSH
11621: CALL_OW 495
11625: GO 11585
11627: POP
11628: POP
// repeat wait ( mpEmissions ) ;
11629: LD_EXP 37
11633: PPUSH
11634: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
11638: LD_ADDR_VAR 0 1
11642: PUSH
11643: DOUBLE
11644: LD_INT 1
11646: DEC
11647: ST_TO_ADDR
11648: LD_VAR 0 2
11652: PUSH
11653: LD_INT 1
11655: ARRAY
11656: PUSH
11657: FOR_TO
11658: IFFALSE 11699
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
11660: LD_VAR 0 2
11664: PUSH
11665: LD_INT 1
11667: ARRAY
11668: PUSH
11669: LD_VAR 0 1
11673: ARRAY
11674: PPUSH
11675: LD_VAR 0 2
11679: PUSH
11680: LD_INT 2
11682: ARRAY
11683: PUSH
11684: LD_VAR 0 1
11688: ARRAY
11689: PPUSH
11690: LD_INT 15
11692: PPUSH
11693: CALL_OW 495
11697: GO 11657
11699: POP
11700: POP
// until false ;
11701: LD_INT 0
11703: IFFALSE 11629
// end ;
11705: PPOPN 2
11707: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
11708: LD_INT 0
11710: PPUSH
11711: PPUSH
11712: PPUSH
11713: PPUSH
11714: PPUSH
// if mpTeamGame then
11715: LD_EXP 11
11719: IFFALSE 11916
// begin first := depots [ 1 ] ;
11721: LD_ADDR_VAR 0 4
11725: PUSH
11726: LD_VAR 0 1
11730: PUSH
11731: LD_INT 1
11733: ARRAY
11734: ST_TO_ADDR
// side := GetSide ( first ) ;
11735: LD_ADDR_VAR 0 6
11739: PUSH
11740: LD_VAR 0 4
11744: PPUSH
11745: CALL_OW 255
11749: ST_TO_ADDR
// for i := 1 to mpTeams do
11750: LD_ADDR_VAR 0 3
11754: PUSH
11755: DOUBLE
11756: LD_INT 1
11758: DEC
11759: ST_TO_ADDR
11760: LD_EXP 10
11764: PUSH
11765: FOR_TO
11766: IFFALSE 11800
// if side in mpTeams [ i ] then
11768: LD_VAR 0 6
11772: PUSH
11773: LD_EXP 10
11777: PUSH
11778: LD_VAR 0 3
11782: ARRAY
11783: IN
11784: IFFALSE 11798
// begin team := i ;
11786: LD_ADDR_VAR 0 5
11790: PUSH
11791: LD_VAR 0 3
11795: ST_TO_ADDR
// break ;
11796: GO 11800
// end ;
11798: GO 11765
11800: POP
11801: POP
// if not team then
11802: LD_VAR 0 5
11806: NOT
11807: IFFALSE 11811
// exit ;
11809: GO 12025
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
11811: LD_EXP 34
11815: PPUSH
11816: LD_INT 81
11818: PUSH
11819: LD_VAR 0 6
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PPUSH
11828: CALL_OW 70
11832: IFFALSE 11836
// exit ;
11834: GO 12025
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
11836: LD_ADDR_EXP 49
11840: PUSH
11841: LD_EXP 49
11845: PPUSH
11846: LD_VAR 0 5
11850: PPUSH
11851: LD_EXP 49
11855: PUSH
11856: LD_VAR 0 5
11860: ARRAY
11861: PUSH
11862: LD_INT 1
11864: PLUS
11865: PPUSH
11866: CALL_OW 1
11870: ST_TO_ADDR
// for i in mpTeams [ team ] do
11871: LD_ADDR_VAR 0 3
11875: PUSH
11876: LD_EXP 10
11880: PUSH
11881: LD_VAR 0 5
11885: ARRAY
11886: PUSH
11887: FOR_IN
11888: IFFALSE 11912
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
11890: LD_VAR 0 3
11894: PPUSH
11895: LD_EXP 49
11899: PUSH
11900: LD_VAR 0 5
11904: ARRAY
11905: PPUSH
11906: CALL_OW 506
11910: GO 11887
11912: POP
11913: POP
// end else
11914: GO 12025
// begin first := depots [ 1 ] ;
11916: LD_ADDR_VAR 0 4
11920: PUSH
11921: LD_VAR 0 1
11925: PUSH
11926: LD_INT 1
11928: ARRAY
11929: ST_TO_ADDR
// side := GetSide ( first ) ;
11930: LD_ADDR_VAR 0 6
11934: PUSH
11935: LD_VAR 0 4
11939: PPUSH
11940: CALL_OW 255
11944: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
11945: LD_EXP 34
11949: PPUSH
11950: LD_INT 81
11952: PUSH
11953: LD_VAR 0 6
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PPUSH
11962: CALL_OW 70
11966: IFFALSE 11970
// exit ;
11968: GO 12025
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
11970: LD_ADDR_EXP 49
11974: PUSH
11975: LD_EXP 49
11979: PPUSH
11980: LD_VAR 0 6
11984: PPUSH
11985: LD_EXP 49
11989: PUSH
11990: LD_VAR 0 6
11994: ARRAY
11995: PUSH
11996: LD_INT 1
11998: PLUS
11999: PPUSH
12000: CALL_OW 1
12004: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
12005: LD_VAR 0 6
12009: PPUSH
12010: LD_EXP 49
12014: PUSH
12015: LD_VAR 0 6
12019: ARRAY
12020: PPUSH
12021: CALL_OW 506
// end ; end ;
12025: LD_VAR 0 2
12029: RET
// function UpdateCounter ; var i ; begin
12030: LD_INT 0
12032: PPUSH
12033: PPUSH
// result := [ ] ;
12034: LD_ADDR_VAR 0 1
12038: PUSH
12039: EMPTY
12040: ST_TO_ADDR
// if mpTeamGame then
12041: LD_EXP 11
12045: IFFALSE 12112
// begin for i := 1 to mpTeams do
12047: LD_ADDR_VAR 0 2
12051: PUSH
12052: DOUBLE
12053: LD_INT 1
12055: DEC
12056: ST_TO_ADDR
12057: LD_EXP 10
12061: PUSH
12062: FOR_TO
12063: IFFALSE 12108
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
12065: LD_ADDR_VAR 0 1
12069: PUSH
12070: LD_VAR 0 1
12074: PUSH
12075: LD_STRING #KingoftheHill-Team
12077: PUSH
12078: LD_VAR 0 2
12082: PUSH
12083: LD_EXP 49
12087: PUSH
12088: LD_VAR 0 2
12092: ARRAY
12093: PUSH
12094: LD_EXP 35
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: ADD
12105: ST_TO_ADDR
12106: GO 12062
12108: POP
12109: POP
// end else
12110: GO 12185
// begin for i := 1 to 8 do
12112: LD_ADDR_VAR 0 2
12116: PUSH
12117: DOUBLE
12118: LD_INT 1
12120: DEC
12121: ST_TO_ADDR
12122: LD_INT 8
12124: PUSH
12125: FOR_TO
12126: IFFALSE 12183
// if mpSidePositions [ i ] then
12128: LD_EXP 7
12132: PUSH
12133: LD_VAR 0 2
12137: ARRAY
12138: IFFALSE 12181
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
12140: LD_ADDR_VAR 0 1
12144: PUSH
12145: LD_VAR 0 1
12149: PUSH
12150: LD_STRING #KingoftheHill-Player
12152: PUSH
12153: LD_VAR 0 2
12157: PUSH
12158: LD_EXP 49
12162: PUSH
12163: LD_VAR 0 2
12167: ARRAY
12168: PUSH
12169: LD_EXP 35
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: ADD
12180: ST_TO_ADDR
12181: GO 12125
12183: POP
12184: POP
// end ; mpDisplayStrings := result ;
12185: LD_ADDR_EXP 38
12189: PUSH
12190: LD_VAR 0 1
12194: ST_TO_ADDR
// end ;
12195: LD_VAR 0 1
12199: RET
// export function HowMuchPointsKing ( side ) ; begin
12200: LD_INT 0
12202: PPUSH
// result := HowMuchPoints ( side ) ;
12203: LD_ADDR_VAR 0 2
12207: PUSH
12208: LD_VAR 0 1
12212: PPUSH
12213: CALL 12223 0 1
12217: ST_TO_ADDR
// end ;
12218: LD_VAR 0 2
12222: RET
// function HowMuchPoints ( side ) ; var i ; begin
12223: LD_INT 0
12225: PPUSH
12226: PPUSH
// if mpTeamGame then
12227: LD_EXP 11
12231: IFFALSE 12300
// begin for i := 1 to Count ( mpTeams ) do
12233: LD_ADDR_VAR 0 3
12237: PUSH
12238: DOUBLE
12239: LD_INT 1
12241: DEC
12242: ST_TO_ADDR
12243: LD_EXP 10
12247: PPUSH
12248: CALL 15084 0 1
12252: PUSH
12253: FOR_TO
12254: IFFALSE 12296
// begin if side in mpTeams [ i ] then
12256: LD_VAR 0 1
12260: PUSH
12261: LD_EXP 10
12265: PUSH
12266: LD_VAR 0 3
12270: ARRAY
12271: IN
12272: IFFALSE 12294
// begin result := mpKingPoints [ i ] ;
12274: LD_ADDR_VAR 0 2
12278: PUSH
12279: LD_EXP 49
12283: PUSH
12284: LD_VAR 0 3
12288: ARRAY
12289: ST_TO_ADDR
// exit ;
12290: POP
12291: POP
12292: GO 12316
// end ; end ;
12294: GO 12253
12296: POP
12297: POP
// end else
12298: GO 12316
// result := mpKingPoints [ side ] ;
12300: LD_ADDR_VAR 0 2
12304: PUSH
12305: LD_EXP 49
12309: PUSH
12310: LD_VAR 0 1
12314: ARRAY
12315: ST_TO_ADDR
// end ;
12316: LD_VAR 0 2
12320: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
12321: LD_EXP 39
12325: IFFALSE 12333
12327: PUSH
12328: CALL 12745 0 0
12332: AND
12333: IFFALSE 12341
12335: PUSH
12336: LD_OWVAR 4
12340: AND
12341: IFFALSE 12594
12343: GO 12345
12345: DISABLE
12346: LD_INT 0
12348: PPUSH
12349: PPUSH
// begin canWin := false ;
12350: LD_ADDR_VAR 0 2
12354: PUSH
12355: LD_INT 0
12357: ST_TO_ADDR
// if not HasPower ( your_side ) then
12358: LD_OWVAR 2
12362: PPUSH
12363: CALL 12787 0 1
12367: NOT
12368: IFFALSE 12379
// begin Multiplayer_Loose_Message ;
12370: CALL_OW 521
// enable ( mpLose ) ;
12374: LD_INT 102
12376: ENABLE_MARKED
// end else
12377: GO 12594
// begin if not EnemiesInGame then
12379: CALL 12597 0 0
12383: NOT
12384: IFFALSE 12391
// begin enable ( mpWin ) ;
12386: LD_INT 101
12388: ENABLE_MARKED
// exit ;
12389: GO 12594
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
12391: LD_ADDR_VAR 0 2
12395: PUSH
12396: LD_OWVAR 2
12400: PPUSH
12401: CALL 12223 0 1
12405: PUSH
12406: LD_EXP 35
12410: GREATEREQUAL
12411: IFFALSE 12424
12413: PUSH
12414: LD_OWVAR 2
12418: PPUSH
12419: CALL 12787 0 1
12423: AND
12424: ST_TO_ADDR
// for i := 1 to 8 do
12425: LD_ADDR_VAR 0 1
12429: PUSH
12430: DOUBLE
12431: LD_INT 1
12433: DEC
12434: ST_TO_ADDR
12435: LD_INT 8
12437: PUSH
12438: FOR_TO
12439: IFFALSE 12580
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
12441: LD_EXP 7
12445: PUSH
12446: LD_VAR 0 1
12450: ARRAY
12451: IFFALSE 12464
12453: PUSH
12454: LD_VAR 0 1
12458: PPUSH
12459: CALL_OW 108
12463: AND
12464: IFFALSE 12478
12466: PUSH
12467: LD_VAR 0 1
12471: PUSH
12472: LD_OWVAR 2
12476: NONEQUAL
12477: AND
12478: IFFALSE 12578
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
12480: LD_EXP 8
12484: PUSH
12485: LD_VAR 0 1
12489: ARRAY
12490: NOT
12491: IFTRUE 12539
12493: PUSH
12494: LD_EXP 8
12498: PUSH
12499: LD_VAR 0 1
12503: ARRAY
12504: PUSH
12505: LD_EXP 8
12509: PUSH
12510: LD_OWVAR 2
12514: ARRAY
12515: NONEQUAL
12516: IFFALSE 12538
12518: PUSH
12519: LD_OWVAR 2
12523: PPUSH
12524: LD_VAR 0 1
12528: PPUSH
12529: CALL_OW 81
12533: PUSH
12534: LD_INT 1
12536: NONEQUAL
12537: AND
12538: OR
12539: IFFALSE 12578
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
12541: LD_VAR 0 1
12545: PPUSH
12546: CALL 12223 0 1
12550: PUSH
12551: LD_EXP 35
12555: GREATEREQUAL
12556: IFFALSE 12569
12558: PUSH
12559: LD_VAR 0 1
12563: PPUSH
12564: CALL 12787 0 1
12568: AND
12569: IFFALSE 12578
// begin enable ( mpLose ) ;
12571: LD_INT 102
12573: ENABLE_MARKED
// exit ;
12574: POP
12575: POP
12576: GO 12594
// end ;
12578: GO 12438
12580: POP
12581: POP
// if canWin then
12582: LD_VAR 0 2
12586: IFFALSE 12593
// enable ( mpWin ) else
12588: LD_INT 101
12590: ENABLE_MARKED
12591: GO 12594
// enable ;
12593: ENABLE
// end ; end ;
12594: PPOPN 2
12596: END
// function EnemiesInGame ; var i ; begin
12597: LD_INT 0
12599: PPUSH
12600: PPUSH
// result := false ;
12601: LD_ADDR_VAR 0 1
12605: PUSH
12606: LD_INT 0
12608: ST_TO_ADDR
// for i := 1 to 8 do
12609: LD_ADDR_VAR 0 2
12613: PUSH
12614: DOUBLE
12615: LD_INT 1
12617: DEC
12618: ST_TO_ADDR
12619: LD_INT 8
12621: PUSH
12622: FOR_TO
12623: IFFALSE 12738
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
12625: LD_VAR 0 2
12629: PUSH
12630: LD_OWVAR 2
12634: NONEQUAL
12635: IFFALSE 12648
12637: PUSH
12638: LD_VAR 0 2
12642: PPUSH
12643: CALL 12787 0 1
12647: AND
12648: IFFALSE 12661
12650: PUSH
12651: LD_VAR 0 2
12655: PPUSH
12656: CALL_OW 108
12660: AND
12661: IFFALSE 12736
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
12663: LD_EXP 8
12667: PUSH
12668: LD_VAR 0 2
12672: ARRAY
12673: NOT
12674: IFTRUE 12722
12676: PUSH
12677: LD_EXP 8
12681: PUSH
12682: LD_VAR 0 2
12686: ARRAY
12687: PUSH
12688: LD_EXP 8
12692: PUSH
12693: LD_OWVAR 2
12697: ARRAY
12698: NONEQUAL
12699: IFFALSE 12721
12701: PUSH
12702: LD_OWVAR 2
12706: PPUSH
12707: LD_VAR 0 2
12711: PPUSH
12712: CALL_OW 81
12716: PUSH
12717: LD_INT 1
12719: NONEQUAL
12720: AND
12721: OR
12722: IFFALSE 12736
// begin result := true ;
12724: LD_ADDR_VAR 0 1
12728: PUSH
12729: LD_INT 1
12731: ST_TO_ADDR
// exit ;
12732: POP
12733: POP
12734: GO 12740
// end ;
12736: GO 12622
12738: POP
12739: POP
// end ;
12740: LD_VAR 0 1
12744: RET
// function CanWinLoose ; begin
12745: LD_INT 0
12747: PPUSH
// result := true ;
12748: LD_ADDR_VAR 0 1
12752: PUSH
12753: LD_INT 1
12755: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12756: CALL_OW 531
12760: IFFALSE 12772
12762: PUSH
12763: CALL_OW 519
12767: PUSH
12768: LD_INT 1
12770: GREATER
12771: AND
12772: IFFALSE 12782
// result := false ;
12774: LD_ADDR_VAR 0 1
12778: PUSH
12779: LD_INT 0
12781: ST_TO_ADDR
// end ;
12782: LD_VAR 0 1
12786: RET
// function HasPower ( i ) ; begin
12787: LD_INT 0
12789: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
12790: LD_ADDR_VAR 0 2
12794: PUSH
12795: LD_INT 22
12797: PUSH
12798: LD_VAR 0 1
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PUSH
12807: LD_INT 2
12809: PUSH
12810: LD_INT 21
12812: PUSH
12813: LD_INT 1
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 33
12822: PUSH
12823: LD_INT 3
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PUSH
12830: LD_INT 33
12832: PUSH
12833: LD_INT 5
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PPUSH
12850: CALL_OW 69
12854: ST_TO_ADDR
// end ; end_of_file
12855: LD_VAR 0 2
12859: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
12860: LD_INT 0
12862: PPUSH
12863: PPUSH
// if exist_mode then
12864: LD_VAR 0 2
12868: IFFALSE 12914
// begin unit := CreateCharacter ( prefix & ident ) ;
12870: LD_ADDR_VAR 0 5
12874: PUSH
12875: LD_VAR 0 3
12879: PUSH
12880: LD_VAR 0 1
12884: STR
12885: PPUSH
12886: CALL_OW 34
12890: ST_TO_ADDR
// if unit then
12891: LD_VAR 0 5
12895: IFFALSE 12912
// DeleteCharacters ( prefix & ident ) ;
12897: LD_VAR 0 3
12901: PUSH
12902: LD_VAR 0 1
12906: STR
12907: PPUSH
12908: CALL_OW 40
// end else
12912: GO 12929
// unit := NewCharacter ( ident ) ;
12914: LD_ADDR_VAR 0 5
12918: PUSH
12919: LD_VAR 0 1
12923: PPUSH
12924: CALL_OW 25
12928: ST_TO_ADDR
// result := unit ;
12929: LD_ADDR_VAR 0 4
12933: PUSH
12934: LD_VAR 0 5
12938: ST_TO_ADDR
// end ;
12939: LD_VAR 0 4
12943: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
12944: LD_INT 0
12946: PPUSH
12947: PPUSH
// if exist_mode then
12948: LD_VAR 0 2
12952: IFFALSE 12977
// unit := CreateCharacter ( prefix & ident ) else
12954: LD_ADDR_VAR 0 5
12958: PUSH
12959: LD_VAR 0 3
12963: PUSH
12964: LD_VAR 0 1
12968: STR
12969: PPUSH
12970: CALL_OW 34
12974: ST_TO_ADDR
12975: GO 12992
// unit := NewCharacter ( ident ) ;
12977: LD_ADDR_VAR 0 5
12981: PUSH
12982: LD_VAR 0 1
12986: PPUSH
12987: CALL_OW 25
12991: ST_TO_ADDR
// result := unit ;
12992: LD_ADDR_VAR 0 4
12996: PUSH
12997: LD_VAR 0 5
13001: ST_TO_ADDR
// end ;
13002: LD_VAR 0 4
13006: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13007: LD_INT 0
13009: PPUSH
13010: PPUSH
// if not side or not nation then
13011: LD_VAR 0 1
13015: NOT
13016: IFTRUE 13025
13018: PUSH
13019: LD_VAR 0 2
13023: NOT
13024: OR
13025: IFFALSE 13029
// exit ;
13027: GO 13823
// case nation of nation_american :
13029: LD_VAR 0 2
13033: PUSH
13034: LD_INT 1
13036: DOUBLE
13037: EQUAL
13038: IFTRUE 13042
13040: GO 13264
13042: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
13043: LD_ADDR_VAR 0 4
13047: PUSH
13048: LD_INT 35
13050: PUSH
13051: LD_INT 45
13053: PUSH
13054: LD_INT 46
13056: PUSH
13057: LD_INT 47
13059: PUSH
13060: LD_INT 82
13062: PUSH
13063: LD_INT 83
13065: PUSH
13066: LD_INT 84
13068: PUSH
13069: LD_INT 85
13071: PUSH
13072: LD_INT 86
13074: PUSH
13075: LD_INT 1
13077: PUSH
13078: LD_INT 2
13080: PUSH
13081: LD_INT 6
13083: PUSH
13084: LD_INT 15
13086: PUSH
13087: LD_INT 16
13089: PUSH
13090: LD_INT 7
13092: PUSH
13093: LD_INT 12
13095: PUSH
13096: LD_INT 13
13098: PUSH
13099: LD_INT 10
13101: PUSH
13102: LD_INT 14
13104: PUSH
13105: LD_INT 20
13107: PUSH
13108: LD_INT 21
13110: PUSH
13111: LD_INT 22
13113: PUSH
13114: LD_INT 25
13116: PUSH
13117: LD_INT 32
13119: PUSH
13120: LD_INT 27
13122: PUSH
13123: LD_INT 36
13125: PUSH
13126: LD_INT 69
13128: PUSH
13129: LD_INT 39
13131: PUSH
13132: LD_INT 34
13134: PUSH
13135: LD_INT 40
13137: PUSH
13138: LD_INT 48
13140: PUSH
13141: LD_INT 49
13143: PUSH
13144: LD_INT 50
13146: PUSH
13147: LD_INT 51
13149: PUSH
13150: LD_INT 52
13152: PUSH
13153: LD_INT 53
13155: PUSH
13156: LD_INT 54
13158: PUSH
13159: LD_INT 55
13161: PUSH
13162: LD_INT 56
13164: PUSH
13165: LD_INT 57
13167: PUSH
13168: LD_INT 58
13170: PUSH
13171: LD_INT 59
13173: PUSH
13174: LD_INT 60
13176: PUSH
13177: LD_INT 61
13179: PUSH
13180: LD_INT 62
13182: PUSH
13183: LD_INT 80
13185: PUSH
13186: LD_INT 82
13188: PUSH
13189: LD_INT 83
13191: PUSH
13192: LD_INT 84
13194: PUSH
13195: LD_INT 85
13197: PUSH
13198: LD_INT 86
13200: PUSH
13201: LD_INT 90
13203: PUSH
13204: LD_INT 93
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: ST_TO_ADDR
13262: GO 13745
13264: LD_INT 2
13266: DOUBLE
13267: EQUAL
13268: IFTRUE 13272
13270: GO 13506
13272: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
13273: LD_ADDR_VAR 0 4
13277: PUSH
13278: LD_INT 35
13280: PUSH
13281: LD_INT 45
13283: PUSH
13284: LD_INT 46
13286: PUSH
13287: LD_INT 47
13289: PUSH
13290: LD_INT 82
13292: PUSH
13293: LD_INT 83
13295: PUSH
13296: LD_INT 84
13298: PUSH
13299: LD_INT 85
13301: PUSH
13302: LD_INT 87
13304: PUSH
13305: LD_INT 70
13307: PUSH
13308: LD_INT 1
13310: PUSH
13311: LD_INT 11
13313: PUSH
13314: LD_INT 3
13316: PUSH
13317: LD_INT 4
13319: PUSH
13320: LD_INT 5
13322: PUSH
13323: LD_INT 6
13325: PUSH
13326: LD_INT 15
13328: PUSH
13329: LD_INT 18
13331: PUSH
13332: LD_INT 7
13334: PUSH
13335: LD_INT 17
13337: PUSH
13338: LD_INT 8
13340: PUSH
13341: LD_INT 20
13343: PUSH
13344: LD_INT 21
13346: PUSH
13347: LD_INT 22
13349: PUSH
13350: LD_INT 72
13352: PUSH
13353: LD_INT 26
13355: PUSH
13356: LD_INT 69
13358: PUSH
13359: LD_INT 39
13361: PUSH
13362: LD_INT 40
13364: PUSH
13365: LD_INT 41
13367: PUSH
13368: LD_INT 42
13370: PUSH
13371: LD_INT 43
13373: PUSH
13374: LD_INT 48
13376: PUSH
13377: LD_INT 49
13379: PUSH
13380: LD_INT 50
13382: PUSH
13383: LD_INT 51
13385: PUSH
13386: LD_INT 52
13388: PUSH
13389: LD_INT 53
13391: PUSH
13392: LD_INT 54
13394: PUSH
13395: LD_INT 55
13397: PUSH
13398: LD_INT 56
13400: PUSH
13401: LD_INT 60
13403: PUSH
13404: LD_INT 61
13406: PUSH
13407: LD_INT 62
13409: PUSH
13410: LD_INT 66
13412: PUSH
13413: LD_INT 67
13415: PUSH
13416: LD_INT 68
13418: PUSH
13419: LD_INT 81
13421: PUSH
13422: LD_INT 82
13424: PUSH
13425: LD_INT 83
13427: PUSH
13428: LD_INT 84
13430: PUSH
13431: LD_INT 85
13433: PUSH
13434: LD_INT 87
13436: PUSH
13437: LD_INT 88
13439: PUSH
13440: LD_INT 92
13442: PUSH
13443: LD_INT 94
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: ST_TO_ADDR
13504: GO 13745
13506: LD_INT 3
13508: DOUBLE
13509: EQUAL
13510: IFTRUE 13514
13512: GO 13744
13514: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
13515: LD_ADDR_VAR 0 4
13519: PUSH
13520: LD_INT 46
13522: PUSH
13523: LD_INT 47
13525: PUSH
13526: LD_INT 1
13528: PUSH
13529: LD_INT 2
13531: PUSH
13532: LD_INT 82
13534: PUSH
13535: LD_INT 83
13537: PUSH
13538: LD_INT 84
13540: PUSH
13541: LD_INT 85
13543: PUSH
13544: LD_INT 86
13546: PUSH
13547: LD_INT 11
13549: PUSH
13550: LD_INT 9
13552: PUSH
13553: LD_INT 20
13555: PUSH
13556: LD_INT 19
13558: PUSH
13559: LD_INT 21
13561: PUSH
13562: LD_INT 24
13564: PUSH
13565: LD_INT 22
13567: PUSH
13568: LD_INT 25
13570: PUSH
13571: LD_INT 28
13573: PUSH
13574: LD_INT 29
13576: PUSH
13577: LD_INT 30
13579: PUSH
13580: LD_INT 31
13582: PUSH
13583: LD_INT 37
13585: PUSH
13586: LD_INT 38
13588: PUSH
13589: LD_INT 32
13591: PUSH
13592: LD_INT 27
13594: PUSH
13595: LD_INT 33
13597: PUSH
13598: LD_INT 69
13600: PUSH
13601: LD_INT 39
13603: PUSH
13604: LD_INT 34
13606: PUSH
13607: LD_INT 40
13609: PUSH
13610: LD_INT 71
13612: PUSH
13613: LD_INT 23
13615: PUSH
13616: LD_INT 44
13618: PUSH
13619: LD_INT 48
13621: PUSH
13622: LD_INT 49
13624: PUSH
13625: LD_INT 50
13627: PUSH
13628: LD_INT 51
13630: PUSH
13631: LD_INT 52
13633: PUSH
13634: LD_INT 53
13636: PUSH
13637: LD_INT 54
13639: PUSH
13640: LD_INT 55
13642: PUSH
13643: LD_INT 56
13645: PUSH
13646: LD_INT 57
13648: PUSH
13649: LD_INT 58
13651: PUSH
13652: LD_INT 59
13654: PUSH
13655: LD_INT 63
13657: PUSH
13658: LD_INT 64
13660: PUSH
13661: LD_INT 65
13663: PUSH
13664: LD_INT 82
13666: PUSH
13667: LD_INT 83
13669: PUSH
13670: LD_INT 84
13672: PUSH
13673: LD_INT 85
13675: PUSH
13676: LD_INT 86
13678: PUSH
13679: LD_INT 89
13681: PUSH
13682: LD_INT 91
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: ST_TO_ADDR
13742: GO 13745
13744: POP
// if state > - 1 and state < 3 then
13745: LD_VAR 0 3
13749: PUSH
13750: LD_INT 1
13752: NEG
13753: GREATER
13754: IFFALSE 13766
13756: PUSH
13757: LD_VAR 0 3
13761: PUSH
13762: LD_INT 3
13764: LESS
13765: AND
13766: IFFALSE 13823
// for i in result do
13768: LD_ADDR_VAR 0 5
13772: PUSH
13773: LD_VAR 0 4
13777: PUSH
13778: FOR_IN
13779: IFFALSE 13821
// if GetTech ( i , side ) <> state then
13781: LD_VAR 0 5
13785: PPUSH
13786: LD_VAR 0 1
13790: PPUSH
13791: CALL_OW 321
13795: PUSH
13796: LD_VAR 0 3
13800: NONEQUAL
13801: IFFALSE 13819
// result := result diff i ;
13803: LD_ADDR_VAR 0 4
13807: PUSH
13808: LD_VAR 0 4
13812: PUSH
13813: LD_VAR 0 5
13817: DIFF
13818: ST_TO_ADDR
13819: GO 13778
13821: POP
13822: POP
// end ;
13823: LD_VAR 0 4
13827: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
13828: LD_INT 0
13830: PPUSH
13831: PPUSH
13832: PPUSH
// result := true ;
13833: LD_ADDR_VAR 0 3
13837: PUSH
13838: LD_INT 1
13840: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
13841: LD_ADDR_VAR 0 5
13845: PUSH
13846: LD_VAR 0 2
13850: PPUSH
13851: CALL_OW 480
13855: ST_TO_ADDR
// if not tmp then
13856: LD_VAR 0 5
13860: NOT
13861: IFFALSE 13865
// exit ;
13863: GO 13914
// for i in tmp do
13865: LD_ADDR_VAR 0 4
13869: PUSH
13870: LD_VAR 0 5
13874: PUSH
13875: FOR_IN
13876: IFFALSE 13912
// if GetTech ( i , side ) <> state_researched then
13878: LD_VAR 0 4
13882: PPUSH
13883: LD_VAR 0 1
13887: PPUSH
13888: CALL_OW 321
13892: PUSH
13893: LD_INT 2
13895: NONEQUAL
13896: IFFALSE 13910
// begin result := false ;
13898: LD_ADDR_VAR 0 3
13902: PUSH
13903: LD_INT 0
13905: ST_TO_ADDR
// exit ;
13906: POP
13907: POP
13908: GO 13914
// end ;
13910: GO 13875
13912: POP
13913: POP
// end ;
13914: LD_VAR 0 3
13918: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
13919: LD_INT 0
13921: PPUSH
13922: PPUSH
13923: PPUSH
13924: PPUSH
13925: PPUSH
13926: PPUSH
13927: PPUSH
13928: PPUSH
13929: PPUSH
13930: PPUSH
13931: PPUSH
13932: PPUSH
13933: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
13934: LD_VAR 0 1
13938: NOT
13939: IFTRUE 13956
13941: PUSH
13942: LD_VAR 0 1
13946: PPUSH
13947: CALL_OW 257
13951: PUSH
13952: LD_INT 9
13954: NONEQUAL
13955: OR
13956: IFFALSE 13960
// exit ;
13958: GO 14539
// side := GetSide ( unit ) ;
13960: LD_ADDR_VAR 0 9
13964: PUSH
13965: LD_VAR 0 1
13969: PPUSH
13970: CALL_OW 255
13974: ST_TO_ADDR
// tech_space := tech_spacanom ;
13975: LD_ADDR_VAR 0 12
13979: PUSH
13980: LD_INT 29
13982: ST_TO_ADDR
// tech_time := tech_taurad ;
13983: LD_ADDR_VAR 0 13
13987: PUSH
13988: LD_INT 28
13990: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
13991: LD_ADDR_VAR 0 11
13995: PUSH
13996: LD_VAR 0 1
14000: PPUSH
14001: CALL_OW 310
14005: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14006: LD_VAR 0 11
14010: PPUSH
14011: CALL_OW 247
14015: PUSH
14016: LD_INT 2
14018: EQUAL
14019: IFFALSE 14023
// exit ;
14021: GO 14539
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14023: LD_ADDR_VAR 0 8
14027: PUSH
14028: LD_INT 81
14030: PUSH
14031: LD_VAR 0 9
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 3
14042: PUSH
14043: LD_INT 21
14045: PUSH
14046: LD_INT 3
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PPUSH
14061: CALL_OW 69
14065: ST_TO_ADDR
// if not tmp then
14066: LD_VAR 0 8
14070: NOT
14071: IFFALSE 14075
// exit ;
14073: GO 14539
// if in_unit then
14075: LD_VAR 0 11
14079: IFFALSE 14103
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14081: LD_ADDR_VAR 0 10
14085: PUSH
14086: LD_VAR 0 8
14090: PPUSH
14091: LD_VAR 0 11
14095: PPUSH
14096: CALL_OW 74
14100: ST_TO_ADDR
14101: GO 14123
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14103: LD_ADDR_VAR 0 10
14107: PUSH
14108: LD_VAR 0 8
14112: PPUSH
14113: LD_VAR 0 1
14117: PPUSH
14118: CALL_OW 74
14122: ST_TO_ADDR
// if not enemy then
14123: LD_VAR 0 10
14127: NOT
14128: IFFALSE 14132
// exit ;
14130: GO 14539
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14132: LD_VAR 0 11
14136: IFFALSE 14158
14138: PUSH
14139: LD_VAR 0 11
14143: PPUSH
14144: LD_VAR 0 10
14148: PPUSH
14149: CALL_OW 296
14153: PUSH
14154: LD_INT 13
14156: GREATER
14157: AND
14158: IFTRUE 14180
14160: PUSH
14161: LD_VAR 0 1
14165: PPUSH
14166: LD_VAR 0 10
14170: PPUSH
14171: CALL_OW 296
14175: PUSH
14176: LD_INT 12
14178: GREATER
14179: OR
14180: IFFALSE 14184
// exit ;
14182: GO 14539
// missile := [ 1 ] ;
14184: LD_ADDR_VAR 0 14
14188: PUSH
14189: LD_INT 1
14191: PUSH
14192: EMPTY
14193: LIST
14194: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14195: LD_VAR 0 9
14199: PPUSH
14200: LD_VAR 0 12
14204: PPUSH
14205: CALL_OW 325
14209: IFFALSE 14238
// missile := Replace ( missile , missile + 1 , 2 ) ;
14211: LD_ADDR_VAR 0 14
14215: PUSH
14216: LD_VAR 0 14
14220: PPUSH
14221: LD_VAR 0 14
14225: PUSH
14226: LD_INT 1
14228: PLUS
14229: PPUSH
14230: LD_INT 2
14232: PPUSH
14233: CALL_OW 1
14237: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14238: LD_VAR 0 9
14242: PPUSH
14243: LD_VAR 0 13
14247: PPUSH
14248: CALL_OW 325
14252: IFFALSE 14276
14254: PUSH
14255: LD_VAR 0 10
14259: PPUSH
14260: CALL_OW 255
14264: PPUSH
14265: LD_VAR 0 13
14269: PPUSH
14270: CALL_OW 325
14274: NOT
14275: AND
14276: IFFALSE 14305
// missile := Replace ( missile , missile + 1 , 3 ) ;
14278: LD_ADDR_VAR 0 14
14282: PUSH
14283: LD_VAR 0 14
14287: PPUSH
14288: LD_VAR 0 14
14292: PUSH
14293: LD_INT 1
14295: PLUS
14296: PPUSH
14297: LD_INT 3
14299: PPUSH
14300: CALL_OW 1
14304: ST_TO_ADDR
// if missile < 2 then
14305: LD_VAR 0 14
14309: PUSH
14310: LD_INT 2
14312: LESS
14313: IFFALSE 14317
// exit ;
14315: GO 14539
// x := GetX ( enemy ) ;
14317: LD_ADDR_VAR 0 4
14321: PUSH
14322: LD_VAR 0 10
14326: PPUSH
14327: CALL_OW 250
14331: ST_TO_ADDR
// y := GetY ( enemy ) ;
14332: LD_ADDR_VAR 0 5
14336: PUSH
14337: LD_VAR 0 10
14341: PPUSH
14342: CALL_OW 251
14346: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14347: LD_ADDR_VAR 0 6
14351: PUSH
14352: LD_VAR 0 4
14356: PUSH
14357: LD_INT 1
14359: NEG
14360: PPUSH
14361: LD_INT 1
14363: PPUSH
14364: CALL_OW 12
14368: PLUS
14369: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14370: LD_ADDR_VAR 0 7
14374: PUSH
14375: LD_VAR 0 5
14379: PUSH
14380: LD_INT 1
14382: NEG
14383: PPUSH
14384: LD_INT 1
14386: PPUSH
14387: CALL_OW 12
14391: PLUS
14392: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14393: LD_VAR 0 6
14397: PPUSH
14398: LD_VAR 0 7
14402: PPUSH
14403: CALL_OW 488
14407: NOT
14408: IFFALSE 14430
// begin _x := x ;
14410: LD_ADDR_VAR 0 6
14414: PUSH
14415: LD_VAR 0 4
14419: ST_TO_ADDR
// _y := y ;
14420: LD_ADDR_VAR 0 7
14424: PUSH
14425: LD_VAR 0 5
14429: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14430: LD_ADDR_VAR 0 3
14434: PUSH
14435: LD_INT 1
14437: PPUSH
14438: LD_VAR 0 14
14442: PPUSH
14443: CALL_OW 12
14447: ST_TO_ADDR
// case i of 1 :
14448: LD_VAR 0 3
14452: PUSH
14453: LD_INT 1
14455: DOUBLE
14456: EQUAL
14457: IFTRUE 14461
14459: GO 14478
14461: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14462: LD_VAR 0 1
14466: PPUSH
14467: LD_VAR 0 10
14471: PPUSH
14472: CALL_OW 115
14476: GO 14539
14478: LD_INT 2
14480: DOUBLE
14481: EQUAL
14482: IFTRUE 14486
14484: GO 14508
14486: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14487: LD_VAR 0 1
14491: PPUSH
14492: LD_VAR 0 6
14496: PPUSH
14497: LD_VAR 0 7
14501: PPUSH
14502: CALL_OW 153
14506: GO 14539
14508: LD_INT 3
14510: DOUBLE
14511: EQUAL
14512: IFTRUE 14516
14514: GO 14538
14516: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14517: LD_VAR 0 1
14521: PPUSH
14522: LD_VAR 0 6
14526: PPUSH
14527: LD_VAR 0 7
14531: PPUSH
14532: CALL_OW 154
14536: GO 14539
14538: POP
// end ;
14539: LD_VAR 0 2
14543: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14544: LD_INT 0
14546: PPUSH
14547: PPUSH
14548: PPUSH
14549: PPUSH
14550: PPUSH
14551: PPUSH
// if not unit or not building then
14552: LD_VAR 0 1
14556: NOT
14557: IFTRUE 14566
14559: PUSH
14560: LD_VAR 0 2
14564: NOT
14565: OR
14566: IFFALSE 14570
// exit ;
14568: GO 14728
// x := GetX ( building ) ;
14570: LD_ADDR_VAR 0 5
14574: PUSH
14575: LD_VAR 0 2
14579: PPUSH
14580: CALL_OW 250
14584: ST_TO_ADDR
// y := GetY ( building ) ;
14585: LD_ADDR_VAR 0 6
14589: PUSH
14590: LD_VAR 0 2
14594: PPUSH
14595: CALL_OW 251
14599: ST_TO_ADDR
// for i := 0 to 5 do
14600: LD_ADDR_VAR 0 4
14604: PUSH
14605: DOUBLE
14606: LD_INT 0
14608: DEC
14609: ST_TO_ADDR
14610: LD_INT 5
14612: PUSH
14613: FOR_TO
14614: IFFALSE 14726
// begin _x := ShiftX ( x , i , 3 ) ;
14616: LD_ADDR_VAR 0 7
14620: PUSH
14621: LD_VAR 0 5
14625: PPUSH
14626: LD_VAR 0 4
14630: PPUSH
14631: LD_INT 3
14633: PPUSH
14634: CALL_OW 272
14638: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
14639: LD_ADDR_VAR 0 8
14643: PUSH
14644: LD_VAR 0 6
14648: PPUSH
14649: LD_VAR 0 4
14653: PPUSH
14654: LD_INT 3
14656: PPUSH
14657: CALL_OW 273
14661: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14662: LD_VAR 0 7
14666: PPUSH
14667: LD_VAR 0 8
14671: PPUSH
14672: CALL_OW 488
14676: NOT
14677: IFFALSE 14681
// continue ;
14679: GO 14613
// if HexInfo ( _x , _y ) = 0 then
14681: LD_VAR 0 7
14685: PPUSH
14686: LD_VAR 0 8
14690: PPUSH
14691: CALL_OW 428
14695: PUSH
14696: LD_INT 0
14698: EQUAL
14699: IFFALSE 14724
// begin ComMoveXY ( unit , _x , _y ) ;
14701: LD_VAR 0 1
14705: PPUSH
14706: LD_VAR 0 7
14710: PPUSH
14711: LD_VAR 0 8
14715: PPUSH
14716: CALL_OW 111
// exit ;
14720: POP
14721: POP
14722: GO 14728
// end ; end ;
14724: GO 14613
14726: POP
14727: POP
// end ;
14728: LD_VAR 0 3
14732: RET
// export function ScanBase ( side , base_area ) ; begin
14733: LD_INT 0
14735: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
14736: LD_ADDR_VAR 0 3
14740: PUSH
14741: LD_VAR 0 2
14745: PPUSH
14746: LD_INT 81
14748: PUSH
14749: LD_VAR 0 1
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PPUSH
14758: CALL_OW 70
14762: ST_TO_ADDR
// end ;
14763: LD_VAR 0 3
14767: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14768: LD_INT 0
14770: PPUSH
14771: PPUSH
14772: PPUSH
14773: PPUSH
// result := false ;
14774: LD_ADDR_VAR 0 2
14778: PUSH
14779: LD_INT 0
14781: ST_TO_ADDR
// side := GetSide ( unit ) ;
14782: LD_ADDR_VAR 0 3
14786: PUSH
14787: LD_VAR 0 1
14791: PPUSH
14792: CALL_OW 255
14796: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14797: LD_ADDR_VAR 0 4
14801: PUSH
14802: LD_VAR 0 1
14806: PPUSH
14807: CALL_OW 248
14811: ST_TO_ADDR
// case nat of 1 :
14812: LD_VAR 0 4
14816: PUSH
14817: LD_INT 1
14819: DOUBLE
14820: EQUAL
14821: IFTRUE 14825
14823: GO 14836
14825: POP
// tech := tech_lassight ; 2 :
14826: LD_ADDR_VAR 0 5
14830: PUSH
14831: LD_INT 12
14833: ST_TO_ADDR
14834: GO 14875
14836: LD_INT 2
14838: DOUBLE
14839: EQUAL
14840: IFTRUE 14844
14842: GO 14855
14844: POP
// tech := tech_mortar ; 3 :
14845: LD_ADDR_VAR 0 5
14849: PUSH
14850: LD_INT 41
14852: ST_TO_ADDR
14853: GO 14875
14855: LD_INT 3
14857: DOUBLE
14858: EQUAL
14859: IFTRUE 14863
14861: GO 14874
14863: POP
// tech := tech_bazooka ; end ;
14864: LD_ADDR_VAR 0 5
14868: PUSH
14869: LD_INT 44
14871: ST_TO_ADDR
14872: GO 14875
14874: POP
// if Researched ( side , tech ) then
14875: LD_VAR 0 3
14879: PPUSH
14880: LD_VAR 0 5
14884: PPUSH
14885: CALL_OW 325
14889: IFFALSE 14916
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
14891: LD_ADDR_VAR 0 2
14895: PUSH
14896: LD_INT 5
14898: PUSH
14899: LD_INT 8
14901: PUSH
14902: LD_INT 9
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: LIST
14909: PUSH
14910: LD_VAR 0 4
14914: ARRAY
14915: ST_TO_ADDR
// end ;
14916: LD_VAR 0 2
14920: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
14921: LD_INT 0
14923: PPUSH
14924: PPUSH
14925: PPUSH
// if not mines then
14926: LD_VAR 0 2
14930: NOT
14931: IFFALSE 14935
// exit ;
14933: GO 15079
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14935: LD_ADDR_VAR 0 5
14939: PUSH
14940: LD_INT 81
14942: PUSH
14943: LD_VAR 0 1
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: LD_INT 3
14954: PUSH
14955: LD_INT 21
14957: PUSH
14958: LD_INT 3
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PPUSH
14973: CALL_OW 69
14977: ST_TO_ADDR
// for i in mines do
14978: LD_ADDR_VAR 0 4
14982: PUSH
14983: LD_VAR 0 2
14987: PUSH
14988: FOR_IN
14989: IFFALSE 15077
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14991: LD_VAR 0 4
14995: PUSH
14996: LD_INT 1
14998: ARRAY
14999: PPUSH
15000: LD_VAR 0 4
15004: PUSH
15005: LD_INT 2
15007: ARRAY
15008: PPUSH
15009: CALL_OW 458
15013: NOT
15014: IFFALSE 15018
// continue ;
15016: GO 14988
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15018: LD_VAR 0 4
15022: PUSH
15023: LD_INT 1
15025: ARRAY
15026: PPUSH
15027: LD_VAR 0 4
15031: PUSH
15032: LD_INT 2
15034: ARRAY
15035: PPUSH
15036: CALL_OW 428
15040: PUSH
15041: LD_VAR 0 5
15045: IN
15046: IFFALSE 15075
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15048: LD_VAR 0 4
15052: PUSH
15053: LD_INT 1
15055: ARRAY
15056: PPUSH
15057: LD_VAR 0 4
15061: PUSH
15062: LD_INT 2
15064: ARRAY
15065: PPUSH
15066: LD_VAR 0 1
15070: PPUSH
15071: CALL_OW 456
// end ;
15075: GO 14988
15077: POP
15078: POP
// end ;
15079: LD_VAR 0 3
15083: RET
// export function Count ( array ) ; begin
15084: LD_INT 0
15086: PPUSH
// result := array + 0 ;
15087: LD_ADDR_VAR 0 2
15091: PUSH
15092: LD_VAR 0 1
15096: PUSH
15097: LD_INT 0
15099: PLUS
15100: ST_TO_ADDR
// end ;
15101: LD_VAR 0 2
15105: RET
// export function IsEmpty ( building ) ; begin
15106: LD_INT 0
15108: PPUSH
// if not building then
15109: LD_VAR 0 1
15113: NOT
15114: IFFALSE 15118
// exit ;
15116: GO 15161
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15118: LD_ADDR_VAR 0 2
15122: PUSH
15123: LD_VAR 0 1
15127: PUSH
15128: LD_INT 22
15130: PUSH
15131: LD_VAR 0 1
15135: PPUSH
15136: CALL_OW 255
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: LD_INT 58
15147: PUSH
15148: EMPTY
15149: LIST
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PPUSH
15155: CALL_OW 69
15159: IN
15160: ST_TO_ADDR
// end ;
15161: LD_VAR 0 2
15165: RET
// export function IsNotFull ( building ) ; var places ; begin
15166: LD_INT 0
15168: PPUSH
15169: PPUSH
// if not building then
15170: LD_VAR 0 1
15174: NOT
15175: IFFALSE 15179
// exit ;
15177: GO 15207
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
15179: LD_ADDR_VAR 0 2
15183: PUSH
15184: LD_VAR 0 1
15188: PPUSH
15189: LD_INT 3
15191: PUSH
15192: LD_INT 62
15194: PUSH
15195: EMPTY
15196: LIST
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PPUSH
15202: CALL_OW 72
15206: ST_TO_ADDR
// end ;
15207: LD_VAR 0 2
15211: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15212: LD_INT 0
15214: PPUSH
15215: PPUSH
15216: PPUSH
15217: PPUSH
// tmp := [ ] ;
15218: LD_ADDR_VAR 0 3
15222: PUSH
15223: EMPTY
15224: ST_TO_ADDR
// list := [ ] ;
15225: LD_ADDR_VAR 0 5
15229: PUSH
15230: EMPTY
15231: ST_TO_ADDR
// for i = 16 to 25 do
15232: LD_ADDR_VAR 0 4
15236: PUSH
15237: DOUBLE
15238: LD_INT 16
15240: DEC
15241: ST_TO_ADDR
15242: LD_INT 25
15244: PUSH
15245: FOR_TO
15246: IFFALSE 15319
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15248: LD_ADDR_VAR 0 3
15252: PUSH
15253: LD_VAR 0 3
15257: PUSH
15258: LD_INT 22
15260: PUSH
15261: LD_VAR 0 1
15265: PPUSH
15266: CALL_OW 255
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 91
15277: PUSH
15278: LD_VAR 0 1
15282: PUSH
15283: LD_INT 6
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 30
15293: PUSH
15294: LD_VAR 0 4
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: PPUSH
15311: CALL_OW 69
15315: ADD
15316: ST_TO_ADDR
15317: GO 15245
15319: POP
15320: POP
// for i = 1 to tmp do
15321: LD_ADDR_VAR 0 4
15325: PUSH
15326: DOUBLE
15327: LD_INT 1
15329: DEC
15330: ST_TO_ADDR
15331: LD_VAR 0 3
15335: PUSH
15336: FOR_TO
15337: IFFALSE 15425
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15339: LD_ADDR_VAR 0 5
15343: PUSH
15344: LD_VAR 0 5
15348: PUSH
15349: LD_VAR 0 3
15353: PUSH
15354: LD_VAR 0 4
15358: ARRAY
15359: PPUSH
15360: CALL_OW 266
15364: PUSH
15365: LD_VAR 0 3
15369: PUSH
15370: LD_VAR 0 4
15374: ARRAY
15375: PPUSH
15376: CALL_OW 250
15380: PUSH
15381: LD_VAR 0 3
15385: PUSH
15386: LD_VAR 0 4
15390: ARRAY
15391: PPUSH
15392: CALL_OW 251
15396: PUSH
15397: LD_VAR 0 3
15401: PUSH
15402: LD_VAR 0 4
15406: ARRAY
15407: PPUSH
15408: CALL_OW 254
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: PUSH
15419: EMPTY
15420: LIST
15421: ADD
15422: ST_TO_ADDR
15423: GO 15336
15425: POP
15426: POP
// result := list ;
15427: LD_ADDR_VAR 0 2
15431: PUSH
15432: LD_VAR 0 5
15436: ST_TO_ADDR
// end ;
15437: LD_VAR 0 2
15441: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15442: LD_INT 0
15444: PPUSH
15445: PPUSH
15446: PPUSH
15447: PPUSH
15448: PPUSH
15449: PPUSH
15450: PPUSH
// if not factory then
15451: LD_VAR 0 1
15455: NOT
15456: IFFALSE 15460
// exit ;
15458: GO 16063
// if control = control_apeman then
15460: LD_VAR 0 4
15464: PUSH
15465: LD_INT 5
15467: EQUAL
15468: IFFALSE 15577
// begin tmp := UnitsInside ( factory ) ;
15470: LD_ADDR_VAR 0 8
15474: PUSH
15475: LD_VAR 0 1
15479: PPUSH
15480: CALL_OW 313
15484: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15485: LD_VAR 0 8
15489: PPUSH
15490: LD_INT 25
15492: PUSH
15493: LD_INT 12
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PPUSH
15500: CALL_OW 72
15504: NOT
15505: IFFALSE 15515
// control := control_manual ;
15507: LD_ADDR_VAR 0 4
15511: PUSH
15512: LD_INT 1
15514: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15515: LD_ADDR_VAR 0 8
15519: PUSH
15520: LD_VAR 0 1
15524: PPUSH
15525: CALL 15212 0 1
15529: ST_TO_ADDR
// if tmp then
15530: LD_VAR 0 8
15534: IFFALSE 15577
// begin for i in tmp do
15536: LD_ADDR_VAR 0 7
15540: PUSH
15541: LD_VAR 0 8
15545: PUSH
15546: FOR_IN
15547: IFFALSE 15575
// if i [ 1 ] = b_ext_radio then
15549: LD_VAR 0 7
15553: PUSH
15554: LD_INT 1
15556: ARRAY
15557: PUSH
15558: LD_INT 22
15560: EQUAL
15561: IFFALSE 15573
// begin control := control_remote ;
15563: LD_ADDR_VAR 0 4
15567: PUSH
15568: LD_INT 2
15570: ST_TO_ADDR
// break ;
15571: GO 15575
// end ;
15573: GO 15546
15575: POP
15576: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15577: LD_VAR 0 1
15581: PPUSH
15582: LD_VAR 0 2
15586: PPUSH
15587: LD_VAR 0 3
15591: PPUSH
15592: LD_VAR 0 4
15596: PPUSH
15597: LD_VAR 0 5
15601: PPUSH
15602: CALL_OW 448
15606: IFFALSE 15641
// begin result := [ chassis , engine , control , weapon ] ;
15608: LD_ADDR_VAR 0 6
15612: PUSH
15613: LD_VAR 0 2
15617: PUSH
15618: LD_VAR 0 3
15622: PUSH
15623: LD_VAR 0 4
15627: PUSH
15628: LD_VAR 0 5
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: ST_TO_ADDR
// exit ;
15639: GO 16063
// end ; _chassis := AvailableChassisList ( factory ) ;
15641: LD_ADDR_VAR 0 9
15645: PUSH
15646: LD_VAR 0 1
15650: PPUSH
15651: CALL_OW 475
15655: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15656: LD_ADDR_VAR 0 11
15660: PUSH
15661: LD_VAR 0 1
15665: PPUSH
15666: CALL_OW 476
15670: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15671: LD_ADDR_VAR 0 12
15675: PUSH
15676: LD_VAR 0 1
15680: PPUSH
15681: CALL_OW 477
15685: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15686: LD_ADDR_VAR 0 10
15690: PUSH
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL_OW 478
15700: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
15701: LD_VAR 0 9
15705: NOT
15706: IFTRUE 15715
15708: PUSH
15709: LD_VAR 0 11
15713: NOT
15714: OR
15715: IFTRUE 15724
15717: PUSH
15718: LD_VAR 0 12
15722: NOT
15723: OR
15724: IFTRUE 15733
15726: PUSH
15727: LD_VAR 0 10
15731: NOT
15732: OR
15733: IFFALSE 15768
// begin result := [ chassis , engine , control , weapon ] ;
15735: LD_ADDR_VAR 0 6
15739: PUSH
15740: LD_VAR 0 2
15744: PUSH
15745: LD_VAR 0 3
15749: PUSH
15750: LD_VAR 0 4
15754: PUSH
15755: LD_VAR 0 5
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: ST_TO_ADDR
// exit ;
15766: GO 16063
// end ; if not chassis in _chassis then
15768: LD_VAR 0 2
15772: PUSH
15773: LD_VAR 0 9
15777: IN
15778: NOT
15779: IFFALSE 15805
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15781: LD_ADDR_VAR 0 2
15785: PUSH
15786: LD_VAR 0 9
15790: PUSH
15791: LD_INT 1
15793: PPUSH
15794: LD_VAR 0 9
15798: PPUSH
15799: CALL_OW 12
15803: ARRAY
15804: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15805: LD_VAR 0 2
15809: PPUSH
15810: LD_VAR 0 3
15814: PPUSH
15815: CALL 16068 0 2
15819: NOT
15820: IFFALSE 15881
// repeat engine := _engine [ 1 ] ;
15822: LD_ADDR_VAR 0 3
15826: PUSH
15827: LD_VAR 0 11
15831: PUSH
15832: LD_INT 1
15834: ARRAY
15835: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
15836: LD_ADDR_VAR 0 11
15840: PUSH
15841: LD_VAR 0 11
15845: PPUSH
15846: LD_INT 1
15848: PPUSH
15849: CALL_OW 3
15853: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
15854: LD_VAR 0 2
15858: PPUSH
15859: LD_VAR 0 3
15863: PPUSH
15864: CALL 16068 0 2
15868: IFTRUE 15879
15870: PUSH
15871: LD_VAR 0 11
15875: PUSH
15876: EMPTY
15877: EQUAL
15878: OR
15879: IFFALSE 15822
// if not control in _control then
15881: LD_VAR 0 4
15885: PUSH
15886: LD_VAR 0 12
15890: IN
15891: NOT
15892: IFFALSE 15918
// control := _control [ rand ( 1 , _control ) ] ;
15894: LD_ADDR_VAR 0 4
15898: PUSH
15899: LD_VAR 0 12
15903: PUSH
15904: LD_INT 1
15906: PPUSH
15907: LD_VAR 0 12
15911: PPUSH
15912: CALL_OW 12
15916: ARRAY
15917: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
15918: LD_VAR 0 2
15922: PPUSH
15923: LD_VAR 0 5
15927: PPUSH
15928: CALL 16290 0 2
15932: NOT
15933: IFFALSE 15994
// repeat weapon := _weapon [ 1 ] ;
15935: LD_ADDR_VAR 0 5
15939: PUSH
15940: LD_VAR 0 10
15944: PUSH
15945: LD_INT 1
15947: ARRAY
15948: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15949: LD_ADDR_VAR 0 10
15953: PUSH
15954: LD_VAR 0 10
15958: PPUSH
15959: LD_INT 1
15961: PPUSH
15962: CALL_OW 3
15966: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15967: LD_VAR 0 2
15971: PPUSH
15972: LD_VAR 0 5
15976: PPUSH
15977: CALL 16290 0 2
15981: IFTRUE 15992
15983: PUSH
15984: LD_VAR 0 10
15988: PUSH
15989: EMPTY
15990: EQUAL
15991: OR
15992: IFFALSE 15935
// result := [ ] ;
15994: LD_ADDR_VAR 0 6
15998: PUSH
15999: EMPTY
16000: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16001: LD_VAR 0 1
16005: PPUSH
16006: LD_VAR 0 2
16010: PPUSH
16011: LD_VAR 0 3
16015: PPUSH
16016: LD_VAR 0 4
16020: PPUSH
16021: LD_VAR 0 5
16025: PPUSH
16026: CALL_OW 448
16030: IFFALSE 16063
// result := [ chassis , engine , control , weapon ] ;
16032: LD_ADDR_VAR 0 6
16036: PUSH
16037: LD_VAR 0 2
16041: PUSH
16042: LD_VAR 0 3
16046: PUSH
16047: LD_VAR 0 4
16051: PUSH
16052: LD_VAR 0 5
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: ST_TO_ADDR
// end ;
16063: LD_VAR 0 6
16067: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16068: LD_INT 0
16070: PPUSH
// if not chassis or not engine then
16071: LD_VAR 0 1
16075: NOT
16076: IFTRUE 16085
16078: PUSH
16079: LD_VAR 0 2
16083: NOT
16084: OR
16085: IFFALSE 16089
// exit ;
16087: GO 16285
// case engine of engine_solar :
16089: LD_VAR 0 2
16093: PUSH
16094: LD_INT 2
16096: DOUBLE
16097: EQUAL
16098: IFTRUE 16102
16100: GO 16140
16102: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16103: LD_ADDR_VAR 0 3
16107: PUSH
16108: LD_INT 11
16110: PUSH
16111: LD_INT 12
16113: PUSH
16114: LD_INT 13
16116: PUSH
16117: LD_INT 14
16119: PUSH
16120: LD_INT 1
16122: PUSH
16123: LD_INT 2
16125: PUSH
16126: LD_INT 3
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: ST_TO_ADDR
16138: GO 16269
16140: LD_INT 1
16142: DOUBLE
16143: EQUAL
16144: IFTRUE 16148
16146: GO 16210
16148: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16149: LD_ADDR_VAR 0 3
16153: PUSH
16154: LD_INT 11
16156: PUSH
16157: LD_INT 12
16159: PUSH
16160: LD_INT 13
16162: PUSH
16163: LD_INT 14
16165: PUSH
16166: LD_INT 1
16168: PUSH
16169: LD_INT 2
16171: PUSH
16172: LD_INT 3
16174: PUSH
16175: LD_INT 4
16177: PUSH
16178: LD_INT 5
16180: PUSH
16181: LD_INT 21
16183: PUSH
16184: LD_INT 23
16186: PUSH
16187: LD_INT 22
16189: PUSH
16190: LD_INT 24
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: ST_TO_ADDR
16208: GO 16269
16210: LD_INT 3
16212: DOUBLE
16213: EQUAL
16214: IFTRUE 16218
16216: GO 16268
16218: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16219: LD_ADDR_VAR 0 3
16223: PUSH
16224: LD_INT 13
16226: PUSH
16227: LD_INT 14
16229: PUSH
16230: LD_INT 2
16232: PUSH
16233: LD_INT 3
16235: PUSH
16236: LD_INT 4
16238: PUSH
16239: LD_INT 5
16241: PUSH
16242: LD_INT 21
16244: PUSH
16245: LD_INT 22
16247: PUSH
16248: LD_INT 23
16250: PUSH
16251: LD_INT 24
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: ST_TO_ADDR
16266: GO 16269
16268: POP
// result := ( chassis in result ) ;
16269: LD_ADDR_VAR 0 3
16273: PUSH
16274: LD_VAR 0 1
16278: PUSH
16279: LD_VAR 0 3
16283: IN
16284: ST_TO_ADDR
// end ;
16285: LD_VAR 0 3
16289: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16290: LD_INT 0
16292: PPUSH
// if not chassis or not weapon then
16293: LD_VAR 0 1
16297: NOT
16298: IFTRUE 16307
16300: PUSH
16301: LD_VAR 0 2
16305: NOT
16306: OR
16307: IFFALSE 16311
// exit ;
16309: GO 17405
// case weapon of us_machine_gun :
16311: LD_VAR 0 2
16315: PUSH
16316: LD_INT 2
16318: DOUBLE
16319: EQUAL
16320: IFTRUE 16324
16322: GO 16354
16324: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16325: LD_ADDR_VAR 0 3
16329: PUSH
16330: LD_INT 1
16332: PUSH
16333: LD_INT 2
16335: PUSH
16336: LD_INT 3
16338: PUSH
16339: LD_INT 4
16341: PUSH
16342: LD_INT 5
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: ST_TO_ADDR
16352: GO 17389
16354: LD_INT 3
16356: DOUBLE
16357: EQUAL
16358: IFTRUE 16362
16360: GO 16392
16362: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16363: LD_ADDR_VAR 0 3
16367: PUSH
16368: LD_INT 1
16370: PUSH
16371: LD_INT 2
16373: PUSH
16374: LD_INT 3
16376: PUSH
16377: LD_INT 4
16379: PUSH
16380: LD_INT 5
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: ST_TO_ADDR
16390: GO 17389
16392: LD_INT 11
16394: DOUBLE
16395: EQUAL
16396: IFTRUE 16400
16398: GO 16430
16400: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16401: LD_ADDR_VAR 0 3
16405: PUSH
16406: LD_INT 1
16408: PUSH
16409: LD_INT 2
16411: PUSH
16412: LD_INT 3
16414: PUSH
16415: LD_INT 4
16417: PUSH
16418: LD_INT 5
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: ST_TO_ADDR
16428: GO 17389
16430: LD_INT 4
16432: DOUBLE
16433: EQUAL
16434: IFTRUE 16438
16436: GO 16464
16438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16439: LD_ADDR_VAR 0 3
16443: PUSH
16444: LD_INT 2
16446: PUSH
16447: LD_INT 3
16449: PUSH
16450: LD_INT 4
16452: PUSH
16453: LD_INT 5
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: ST_TO_ADDR
16462: GO 17389
16464: LD_INT 5
16466: DOUBLE
16467: EQUAL
16468: IFTRUE 16472
16470: GO 16498
16472: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16473: LD_ADDR_VAR 0 3
16477: PUSH
16478: LD_INT 2
16480: PUSH
16481: LD_INT 3
16483: PUSH
16484: LD_INT 4
16486: PUSH
16487: LD_INT 5
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: ST_TO_ADDR
16496: GO 17389
16498: LD_INT 9
16500: DOUBLE
16501: EQUAL
16502: IFTRUE 16506
16504: GO 16532
16506: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16507: LD_ADDR_VAR 0 3
16511: PUSH
16512: LD_INT 2
16514: PUSH
16515: LD_INT 3
16517: PUSH
16518: LD_INT 4
16520: PUSH
16521: LD_INT 5
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: ST_TO_ADDR
16530: GO 17389
16532: LD_INT 7
16534: DOUBLE
16535: EQUAL
16536: IFTRUE 16540
16538: GO 16566
16540: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16541: LD_ADDR_VAR 0 3
16545: PUSH
16546: LD_INT 2
16548: PUSH
16549: LD_INT 3
16551: PUSH
16552: LD_INT 4
16554: PUSH
16555: LD_INT 5
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: ST_TO_ADDR
16564: GO 17389
16566: LD_INT 12
16568: DOUBLE
16569: EQUAL
16570: IFTRUE 16574
16572: GO 16600
16574: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16575: LD_ADDR_VAR 0 3
16579: PUSH
16580: LD_INT 2
16582: PUSH
16583: LD_INT 3
16585: PUSH
16586: LD_INT 4
16588: PUSH
16589: LD_INT 5
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: ST_TO_ADDR
16598: GO 17389
16600: LD_INT 13
16602: DOUBLE
16603: EQUAL
16604: IFTRUE 16608
16606: GO 16634
16608: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16609: LD_ADDR_VAR 0 3
16613: PUSH
16614: LD_INT 2
16616: PUSH
16617: LD_INT 3
16619: PUSH
16620: LD_INT 4
16622: PUSH
16623: LD_INT 5
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: ST_TO_ADDR
16632: GO 17389
16634: LD_INT 14
16636: DOUBLE
16637: EQUAL
16638: IFTRUE 16642
16640: GO 16660
16642: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16643: LD_ADDR_VAR 0 3
16647: PUSH
16648: LD_INT 4
16650: PUSH
16651: LD_INT 5
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: ST_TO_ADDR
16658: GO 17389
16660: LD_INT 6
16662: DOUBLE
16663: EQUAL
16664: IFTRUE 16668
16666: GO 16686
16668: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16669: LD_ADDR_VAR 0 3
16673: PUSH
16674: LD_INT 4
16676: PUSH
16677: LD_INT 5
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: ST_TO_ADDR
16684: GO 17389
16686: LD_INT 10
16688: DOUBLE
16689: EQUAL
16690: IFTRUE 16694
16692: GO 16712
16694: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16695: LD_ADDR_VAR 0 3
16699: PUSH
16700: LD_INT 4
16702: PUSH
16703: LD_INT 5
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: ST_TO_ADDR
16710: GO 17389
16712: LD_INT 22
16714: DOUBLE
16715: EQUAL
16716: IFTRUE 16720
16718: GO 16746
16720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16721: LD_ADDR_VAR 0 3
16725: PUSH
16726: LD_INT 11
16728: PUSH
16729: LD_INT 12
16731: PUSH
16732: LD_INT 13
16734: PUSH
16735: LD_INT 14
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: ST_TO_ADDR
16744: GO 17389
16746: LD_INT 23
16748: DOUBLE
16749: EQUAL
16750: IFTRUE 16754
16752: GO 16780
16754: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16755: LD_ADDR_VAR 0 3
16759: PUSH
16760: LD_INT 11
16762: PUSH
16763: LD_INT 12
16765: PUSH
16766: LD_INT 13
16768: PUSH
16769: LD_INT 14
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: ST_TO_ADDR
16778: GO 17389
16780: LD_INT 24
16782: DOUBLE
16783: EQUAL
16784: IFTRUE 16788
16786: GO 16814
16788: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16789: LD_ADDR_VAR 0 3
16793: PUSH
16794: LD_INT 11
16796: PUSH
16797: LD_INT 12
16799: PUSH
16800: LD_INT 13
16802: PUSH
16803: LD_INT 14
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: ST_TO_ADDR
16812: GO 17389
16814: LD_INT 30
16816: DOUBLE
16817: EQUAL
16818: IFTRUE 16822
16820: GO 16848
16822: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16823: LD_ADDR_VAR 0 3
16827: PUSH
16828: LD_INT 11
16830: PUSH
16831: LD_INT 12
16833: PUSH
16834: LD_INT 13
16836: PUSH
16837: LD_INT 14
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: ST_TO_ADDR
16846: GO 17389
16848: LD_INT 25
16850: DOUBLE
16851: EQUAL
16852: IFTRUE 16856
16854: GO 16874
16856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
16857: LD_ADDR_VAR 0 3
16861: PUSH
16862: LD_INT 13
16864: PUSH
16865: LD_INT 14
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: ST_TO_ADDR
16872: GO 17389
16874: LD_INT 27
16876: DOUBLE
16877: EQUAL
16878: IFTRUE 16882
16880: GO 16900
16882: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
16883: LD_ADDR_VAR 0 3
16887: PUSH
16888: LD_INT 13
16890: PUSH
16891: LD_INT 14
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: ST_TO_ADDR
16898: GO 17389
16900: LD_INT 92
16902: DOUBLE
16903: EQUAL
16904: IFTRUE 16908
16906: GO 16934
16908: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
16909: LD_ADDR_VAR 0 3
16913: PUSH
16914: LD_INT 11
16916: PUSH
16917: LD_INT 12
16919: PUSH
16920: LD_INT 13
16922: PUSH
16923: LD_INT 14
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: ST_TO_ADDR
16932: GO 17389
16934: LD_INT 28
16936: DOUBLE
16937: EQUAL
16938: IFTRUE 16942
16940: GO 16960
16942: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
16943: LD_ADDR_VAR 0 3
16947: PUSH
16948: LD_INT 13
16950: PUSH
16951: LD_INT 14
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: ST_TO_ADDR
16958: GO 17389
16960: LD_INT 29
16962: DOUBLE
16963: EQUAL
16964: IFTRUE 16968
16966: GO 16986
16968: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16969: LD_ADDR_VAR 0 3
16973: PUSH
16974: LD_INT 13
16976: PUSH
16977: LD_INT 14
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: ST_TO_ADDR
16984: GO 17389
16986: LD_INT 31
16988: DOUBLE
16989: EQUAL
16990: IFTRUE 16994
16992: GO 17012
16994: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16995: LD_ADDR_VAR 0 3
16999: PUSH
17000: LD_INT 13
17002: PUSH
17003: LD_INT 14
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: ST_TO_ADDR
17010: GO 17389
17012: LD_INT 26
17014: DOUBLE
17015: EQUAL
17016: IFTRUE 17020
17018: GO 17038
17020: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17021: LD_ADDR_VAR 0 3
17025: PUSH
17026: LD_INT 13
17028: PUSH
17029: LD_INT 14
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: ST_TO_ADDR
17036: GO 17389
17038: LD_INT 42
17040: DOUBLE
17041: EQUAL
17042: IFTRUE 17046
17044: GO 17072
17046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17047: LD_ADDR_VAR 0 3
17051: PUSH
17052: LD_INT 21
17054: PUSH
17055: LD_INT 22
17057: PUSH
17058: LD_INT 23
17060: PUSH
17061: LD_INT 24
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: ST_TO_ADDR
17070: GO 17389
17072: LD_INT 43
17074: DOUBLE
17075: EQUAL
17076: IFTRUE 17080
17078: GO 17106
17080: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17081: LD_ADDR_VAR 0 3
17085: PUSH
17086: LD_INT 21
17088: PUSH
17089: LD_INT 22
17091: PUSH
17092: LD_INT 23
17094: PUSH
17095: LD_INT 24
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: ST_TO_ADDR
17104: GO 17389
17106: LD_INT 44
17108: DOUBLE
17109: EQUAL
17110: IFTRUE 17114
17112: GO 17140
17114: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17115: LD_ADDR_VAR 0 3
17119: PUSH
17120: LD_INT 21
17122: PUSH
17123: LD_INT 22
17125: PUSH
17126: LD_INT 23
17128: PUSH
17129: LD_INT 24
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: ST_TO_ADDR
17138: GO 17389
17140: LD_INT 45
17142: DOUBLE
17143: EQUAL
17144: IFTRUE 17148
17146: GO 17174
17148: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17149: LD_ADDR_VAR 0 3
17153: PUSH
17154: LD_INT 21
17156: PUSH
17157: LD_INT 22
17159: PUSH
17160: LD_INT 23
17162: PUSH
17163: LD_INT 24
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: ST_TO_ADDR
17172: GO 17389
17174: LD_INT 49
17176: DOUBLE
17177: EQUAL
17178: IFTRUE 17182
17180: GO 17208
17182: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17183: LD_ADDR_VAR 0 3
17187: PUSH
17188: LD_INT 21
17190: PUSH
17191: LD_INT 22
17193: PUSH
17194: LD_INT 23
17196: PUSH
17197: LD_INT 24
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: ST_TO_ADDR
17206: GO 17389
17208: LD_INT 51
17210: DOUBLE
17211: EQUAL
17212: IFTRUE 17216
17214: GO 17242
17216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17217: LD_ADDR_VAR 0 3
17221: PUSH
17222: LD_INT 21
17224: PUSH
17225: LD_INT 22
17227: PUSH
17228: LD_INT 23
17230: PUSH
17231: LD_INT 24
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: ST_TO_ADDR
17240: GO 17389
17242: LD_INT 52
17244: DOUBLE
17245: EQUAL
17246: IFTRUE 17250
17248: GO 17276
17250: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17251: LD_ADDR_VAR 0 3
17255: PUSH
17256: LD_INT 21
17258: PUSH
17259: LD_INT 22
17261: PUSH
17262: LD_INT 23
17264: PUSH
17265: LD_INT 24
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: ST_TO_ADDR
17274: GO 17389
17276: LD_INT 53
17278: DOUBLE
17279: EQUAL
17280: IFTRUE 17284
17282: GO 17302
17284: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17285: LD_ADDR_VAR 0 3
17289: PUSH
17290: LD_INT 23
17292: PUSH
17293: LD_INT 24
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: ST_TO_ADDR
17300: GO 17389
17302: LD_INT 46
17304: DOUBLE
17305: EQUAL
17306: IFTRUE 17310
17308: GO 17328
17310: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17311: LD_ADDR_VAR 0 3
17315: PUSH
17316: LD_INT 23
17318: PUSH
17319: LD_INT 24
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: ST_TO_ADDR
17326: GO 17389
17328: LD_INT 47
17330: DOUBLE
17331: EQUAL
17332: IFTRUE 17336
17334: GO 17354
17336: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
17337: LD_ADDR_VAR 0 3
17341: PUSH
17342: LD_INT 23
17344: PUSH
17345: LD_INT 24
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: ST_TO_ADDR
17352: GO 17389
17354: LD_INT 98
17356: DOUBLE
17357: EQUAL
17358: IFTRUE 17362
17360: GO 17388
17362: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17363: LD_ADDR_VAR 0 3
17367: PUSH
17368: LD_INT 21
17370: PUSH
17371: LD_INT 22
17373: PUSH
17374: LD_INT 23
17376: PUSH
17377: LD_INT 24
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: ST_TO_ADDR
17386: GO 17389
17388: POP
// result := ( chassis in result ) ;
17389: LD_ADDR_VAR 0 3
17393: PUSH
17394: LD_VAR 0 1
17398: PUSH
17399: LD_VAR 0 3
17403: IN
17404: ST_TO_ADDR
// end ;
17405: LD_VAR 0 3
17409: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17410: LD_INT 0
17412: PPUSH
17413: PPUSH
17414: PPUSH
17415: PPUSH
17416: PPUSH
17417: PPUSH
17418: PPUSH
// result := array ;
17419: LD_ADDR_VAR 0 5
17423: PUSH
17424: LD_VAR 0 1
17428: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17429: LD_VAR 0 1
17433: NOT
17434: IFTRUE 17443
17436: PUSH
17437: LD_VAR 0 2
17441: NOT
17442: OR
17443: IFTRUE 17452
17445: PUSH
17446: LD_VAR 0 3
17450: NOT
17451: OR
17452: IFTRUE 17466
17454: PUSH
17455: LD_VAR 0 2
17459: PUSH
17460: LD_VAR 0 1
17464: GREATER
17465: OR
17466: IFTRUE 17480
17468: PUSH
17469: LD_VAR 0 3
17473: PUSH
17474: LD_VAR 0 1
17478: GREATER
17479: OR
17480: IFFALSE 17484
// exit ;
17482: GO 17780
// if direction then
17484: LD_VAR 0 4
17488: IFFALSE 17552
// begin d := 1 ;
17490: LD_ADDR_VAR 0 9
17494: PUSH
17495: LD_INT 1
17497: ST_TO_ADDR
// if i_from > i_to then
17498: LD_VAR 0 2
17502: PUSH
17503: LD_VAR 0 3
17507: GREATER
17508: IFFALSE 17534
// length := ( array - i_from ) + i_to else
17510: LD_ADDR_VAR 0 11
17514: PUSH
17515: LD_VAR 0 1
17519: PUSH
17520: LD_VAR 0 2
17524: MINUS
17525: PUSH
17526: LD_VAR 0 3
17530: PLUS
17531: ST_TO_ADDR
17532: GO 17550
// length := i_to - i_from ;
17534: LD_ADDR_VAR 0 11
17538: PUSH
17539: LD_VAR 0 3
17543: PUSH
17544: LD_VAR 0 2
17548: MINUS
17549: ST_TO_ADDR
// end else
17550: GO 17613
// begin d := - 1 ;
17552: LD_ADDR_VAR 0 9
17556: PUSH
17557: LD_INT 1
17559: NEG
17560: ST_TO_ADDR
// if i_from > i_to then
17561: LD_VAR 0 2
17565: PUSH
17566: LD_VAR 0 3
17570: GREATER
17571: IFFALSE 17591
// length := i_from - i_to else
17573: LD_ADDR_VAR 0 11
17577: PUSH
17578: LD_VAR 0 2
17582: PUSH
17583: LD_VAR 0 3
17587: MINUS
17588: ST_TO_ADDR
17589: GO 17613
// length := ( array - i_to ) + i_from ;
17591: LD_ADDR_VAR 0 11
17595: PUSH
17596: LD_VAR 0 1
17600: PUSH
17601: LD_VAR 0 3
17605: MINUS
17606: PUSH
17607: LD_VAR 0 2
17611: PLUS
17612: ST_TO_ADDR
// end ; if not length then
17613: LD_VAR 0 11
17617: NOT
17618: IFFALSE 17622
// exit ;
17620: GO 17780
// tmp := array ;
17622: LD_ADDR_VAR 0 10
17626: PUSH
17627: LD_VAR 0 1
17631: ST_TO_ADDR
// for i = 1 to length do
17632: LD_ADDR_VAR 0 6
17636: PUSH
17637: DOUBLE
17638: LD_INT 1
17640: DEC
17641: ST_TO_ADDR
17642: LD_VAR 0 11
17646: PUSH
17647: FOR_TO
17648: IFFALSE 17768
// begin for j = 1 to array do
17650: LD_ADDR_VAR 0 7
17654: PUSH
17655: DOUBLE
17656: LD_INT 1
17658: DEC
17659: ST_TO_ADDR
17660: LD_VAR 0 1
17664: PUSH
17665: FOR_TO
17666: IFFALSE 17754
// begin k := j + d ;
17668: LD_ADDR_VAR 0 8
17672: PUSH
17673: LD_VAR 0 7
17677: PUSH
17678: LD_VAR 0 9
17682: PLUS
17683: ST_TO_ADDR
// if k > array then
17684: LD_VAR 0 8
17688: PUSH
17689: LD_VAR 0 1
17693: GREATER
17694: IFFALSE 17704
// k := 1 ;
17696: LD_ADDR_VAR 0 8
17700: PUSH
17701: LD_INT 1
17703: ST_TO_ADDR
// if not k then
17704: LD_VAR 0 8
17708: NOT
17709: IFFALSE 17721
// k := array ;
17711: LD_ADDR_VAR 0 8
17715: PUSH
17716: LD_VAR 0 1
17720: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17721: LD_ADDR_VAR 0 10
17725: PUSH
17726: LD_VAR 0 10
17730: PPUSH
17731: LD_VAR 0 8
17735: PPUSH
17736: LD_VAR 0 1
17740: PUSH
17741: LD_VAR 0 7
17745: ARRAY
17746: PPUSH
17747: CALL_OW 1
17751: ST_TO_ADDR
// end ;
17752: GO 17665
17754: POP
17755: POP
// array := tmp ;
17756: LD_ADDR_VAR 0 1
17760: PUSH
17761: LD_VAR 0 10
17765: ST_TO_ADDR
// end ;
17766: GO 17647
17768: POP
17769: POP
// result := array ;
17770: LD_ADDR_VAR 0 5
17774: PUSH
17775: LD_VAR 0 1
17779: ST_TO_ADDR
// end ;
17780: LD_VAR 0 5
17784: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17785: LD_INT 0
17787: PPUSH
17788: PPUSH
// result := 0 ;
17789: LD_ADDR_VAR 0 3
17793: PUSH
17794: LD_INT 0
17796: ST_TO_ADDR
// if not array or not value in array then
17797: LD_VAR 0 1
17801: NOT
17802: IFTRUE 17817
17804: PUSH
17805: LD_VAR 0 2
17809: PUSH
17810: LD_VAR 0 1
17814: IN
17815: NOT
17816: OR
17817: IFFALSE 17821
// exit ;
17819: GO 17875
// for i = 1 to array do
17821: LD_ADDR_VAR 0 4
17825: PUSH
17826: DOUBLE
17827: LD_INT 1
17829: DEC
17830: ST_TO_ADDR
17831: LD_VAR 0 1
17835: PUSH
17836: FOR_TO
17837: IFFALSE 17873
// if value = array [ i ] then
17839: LD_VAR 0 2
17843: PUSH
17844: LD_VAR 0 1
17848: PUSH
17849: LD_VAR 0 4
17853: ARRAY
17854: EQUAL
17855: IFFALSE 17871
// begin result := i ;
17857: LD_ADDR_VAR 0 3
17861: PUSH
17862: LD_VAR 0 4
17866: ST_TO_ADDR
// exit ;
17867: POP
17868: POP
17869: GO 17875
// end ;
17871: GO 17836
17873: POP
17874: POP
// end ;
17875: LD_VAR 0 3
17879: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
17880: LD_INT 0
17882: PPUSH
// vc_chassis := chassis ;
17883: LD_ADDR_OWVAR 37
17887: PUSH
17888: LD_VAR 0 1
17892: ST_TO_ADDR
// vc_engine := engine ;
17893: LD_ADDR_OWVAR 39
17897: PUSH
17898: LD_VAR 0 2
17902: ST_TO_ADDR
// vc_control := control ;
17903: LD_ADDR_OWVAR 38
17907: PUSH
17908: LD_VAR 0 3
17912: ST_TO_ADDR
// vc_weapon := weapon ;
17913: LD_ADDR_OWVAR 40
17917: PUSH
17918: LD_VAR 0 4
17922: ST_TO_ADDR
// vc_fuel_battery := fuel ;
17923: LD_ADDR_OWVAR 41
17927: PUSH
17928: LD_VAR 0 5
17932: ST_TO_ADDR
// end ;
17933: LD_VAR 0 6
17937: RET
// export function WantPlant ( unit ) ; var task ; begin
17938: LD_INT 0
17940: PPUSH
17941: PPUSH
// result := false ;
17942: LD_ADDR_VAR 0 2
17946: PUSH
17947: LD_INT 0
17949: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
17950: LD_ADDR_VAR 0 3
17954: PUSH
17955: LD_VAR 0 1
17959: PPUSH
17960: CALL_OW 437
17964: ST_TO_ADDR
// if task then
17965: LD_VAR 0 3
17969: IFFALSE 17997
// if task [ 1 ] [ 1 ] = p then
17971: LD_VAR 0 3
17975: PUSH
17976: LD_INT 1
17978: ARRAY
17979: PUSH
17980: LD_INT 1
17982: ARRAY
17983: PUSH
17984: LD_STRING p
17986: EQUAL
17987: IFFALSE 17997
// result := true ;
17989: LD_ADDR_VAR 0 2
17993: PUSH
17994: LD_INT 1
17996: ST_TO_ADDR
// end ;
17997: LD_VAR 0 2
18001: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18002: LD_INT 0
18004: PPUSH
18005: PPUSH
18006: PPUSH
18007: PPUSH
// if pos < 1 then
18008: LD_VAR 0 2
18012: PUSH
18013: LD_INT 1
18015: LESS
18016: IFFALSE 18020
// exit ;
18018: GO 18323
// if pos = 1 then
18020: LD_VAR 0 2
18024: PUSH
18025: LD_INT 1
18027: EQUAL
18028: IFFALSE 18061
// result := Replace ( arr , pos [ 1 ] , value ) else
18030: LD_ADDR_VAR 0 4
18034: PUSH
18035: LD_VAR 0 1
18039: PPUSH
18040: LD_VAR 0 2
18044: PUSH
18045: LD_INT 1
18047: ARRAY
18048: PPUSH
18049: LD_VAR 0 3
18053: PPUSH
18054: CALL_OW 1
18058: ST_TO_ADDR
18059: GO 18323
// begin tmp := arr ;
18061: LD_ADDR_VAR 0 6
18065: PUSH
18066: LD_VAR 0 1
18070: ST_TO_ADDR
// s_arr := [ tmp ] ;
18071: LD_ADDR_VAR 0 7
18075: PUSH
18076: LD_VAR 0 6
18080: PUSH
18081: EMPTY
18082: LIST
18083: ST_TO_ADDR
// for i = 1 to pos - 1 do
18084: LD_ADDR_VAR 0 5
18088: PUSH
18089: DOUBLE
18090: LD_INT 1
18092: DEC
18093: ST_TO_ADDR
18094: LD_VAR 0 2
18098: PUSH
18099: LD_INT 1
18101: MINUS
18102: PUSH
18103: FOR_TO
18104: IFFALSE 18149
// begin tmp := tmp [ pos [ i ] ] ;
18106: LD_ADDR_VAR 0 6
18110: PUSH
18111: LD_VAR 0 6
18115: PUSH
18116: LD_VAR 0 2
18120: PUSH
18121: LD_VAR 0 5
18125: ARRAY
18126: ARRAY
18127: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18128: LD_ADDR_VAR 0 7
18132: PUSH
18133: LD_VAR 0 7
18137: PUSH
18138: LD_VAR 0 6
18142: PUSH
18143: EMPTY
18144: LIST
18145: ADD
18146: ST_TO_ADDR
// end ;
18147: GO 18103
18149: POP
18150: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18151: LD_ADDR_VAR 0 6
18155: PUSH
18156: LD_VAR 0 6
18160: PPUSH
18161: LD_VAR 0 2
18165: PUSH
18166: LD_VAR 0 2
18170: ARRAY
18171: PPUSH
18172: LD_VAR 0 3
18176: PPUSH
18177: CALL_OW 1
18181: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18182: LD_ADDR_VAR 0 7
18186: PUSH
18187: LD_VAR 0 7
18191: PPUSH
18192: LD_VAR 0 7
18196: PPUSH
18197: LD_VAR 0 6
18201: PPUSH
18202: CALL_OW 1
18206: ST_TO_ADDR
// for i = s_arr downto 2 do
18207: LD_ADDR_VAR 0 5
18211: PUSH
18212: DOUBLE
18213: LD_VAR 0 7
18217: INC
18218: ST_TO_ADDR
18219: LD_INT 2
18221: PUSH
18222: FOR_DOWNTO
18223: IFFALSE 18307
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18225: LD_ADDR_VAR 0 6
18229: PUSH
18230: LD_VAR 0 7
18234: PUSH
18235: LD_VAR 0 5
18239: PUSH
18240: LD_INT 1
18242: MINUS
18243: ARRAY
18244: PPUSH
18245: LD_VAR 0 2
18249: PUSH
18250: LD_VAR 0 5
18254: PUSH
18255: LD_INT 1
18257: MINUS
18258: ARRAY
18259: PPUSH
18260: LD_VAR 0 7
18264: PUSH
18265: LD_VAR 0 5
18269: ARRAY
18270: PPUSH
18271: CALL_OW 1
18275: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18276: LD_ADDR_VAR 0 7
18280: PUSH
18281: LD_VAR 0 7
18285: PPUSH
18286: LD_VAR 0 5
18290: PUSH
18291: LD_INT 1
18293: MINUS
18294: PPUSH
18295: LD_VAR 0 6
18299: PPUSH
18300: CALL_OW 1
18304: ST_TO_ADDR
// end ;
18305: GO 18222
18307: POP
18308: POP
// result := s_arr [ 1 ] ;
18309: LD_ADDR_VAR 0 4
18313: PUSH
18314: LD_VAR 0 7
18318: PUSH
18319: LD_INT 1
18321: ARRAY
18322: ST_TO_ADDR
// end ; end ;
18323: LD_VAR 0 4
18327: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18328: LD_INT 0
18330: PPUSH
18331: PPUSH
// if not list then
18332: LD_VAR 0 1
18336: NOT
18337: IFFALSE 18341
// exit ;
18339: GO 18432
// i := list [ pos1 ] ;
18341: LD_ADDR_VAR 0 5
18345: PUSH
18346: LD_VAR 0 1
18350: PUSH
18351: LD_VAR 0 2
18355: ARRAY
18356: ST_TO_ADDR
// if not i then
18357: LD_VAR 0 5
18361: NOT
18362: IFFALSE 18366
// exit ;
18364: GO 18432
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18366: LD_ADDR_VAR 0 1
18370: PUSH
18371: LD_VAR 0 1
18375: PPUSH
18376: LD_VAR 0 2
18380: PPUSH
18381: LD_VAR 0 1
18385: PUSH
18386: LD_VAR 0 3
18390: ARRAY
18391: PPUSH
18392: CALL_OW 1
18396: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18397: LD_ADDR_VAR 0 1
18401: PUSH
18402: LD_VAR 0 1
18406: PPUSH
18407: LD_VAR 0 3
18411: PPUSH
18412: LD_VAR 0 5
18416: PPUSH
18417: CALL_OW 1
18421: ST_TO_ADDR
// result := list ;
18422: LD_ADDR_VAR 0 4
18426: PUSH
18427: LD_VAR 0 1
18431: ST_TO_ADDR
// end ;
18432: LD_VAR 0 4
18436: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18437: LD_INT 0
18439: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18440: LD_ADDR_VAR 0 5
18444: PUSH
18445: LD_VAR 0 1
18449: PPUSH
18450: CALL_OW 250
18454: PPUSH
18455: LD_VAR 0 1
18459: PPUSH
18460: CALL_OW 251
18464: PPUSH
18465: LD_VAR 0 2
18469: PPUSH
18470: LD_VAR 0 3
18474: PPUSH
18475: LD_VAR 0 4
18479: PPUSH
18480: CALL 18862 0 5
18484: ST_TO_ADDR
// end ;
18485: LD_VAR 0 5
18489: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
18490: LD_INT 0
18492: PPUSH
18493: PPUSH
18494: PPUSH
18495: PPUSH
// if not list or not unit then
18496: LD_VAR 0 2
18500: NOT
18501: IFTRUE 18510
18503: PUSH
18504: LD_VAR 0 1
18508: NOT
18509: OR
18510: IFFALSE 18514
// exit ;
18512: GO 18857
// result := [ ] ;
18514: LD_ADDR_VAR 0 5
18518: PUSH
18519: EMPTY
18520: ST_TO_ADDR
// for i in list do
18521: LD_ADDR_VAR 0 6
18525: PUSH
18526: LD_VAR 0 2
18530: PUSH
18531: FOR_IN
18532: IFFALSE 18750
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
18534: LD_ADDR_VAR 0 8
18538: PUSH
18539: LD_VAR 0 1
18543: PPUSH
18544: LD_VAR 0 6
18548: PUSH
18549: LD_INT 1
18551: ARRAY
18552: PPUSH
18553: LD_VAR 0 6
18557: PUSH
18558: LD_INT 2
18560: ARRAY
18561: PPUSH
18562: CALL_OW 297
18566: ST_TO_ADDR
// if not Count ( result ) then
18567: LD_VAR 0 5
18571: PPUSH
18572: CALL 15084 0 1
18576: NOT
18577: IFFALSE 18610
// begin result := Join ( result , [ i , tmp ] ) ;
18579: LD_ADDR_VAR 0 5
18583: PUSH
18584: LD_VAR 0 5
18588: PPUSH
18589: LD_VAR 0 6
18593: PUSH
18594: LD_VAR 0 8
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PPUSH
18603: CALL 51050 0 2
18607: ST_TO_ADDR
// continue ;
18608: GO 18531
// end ; if result [ result ] [ 2 ] <= tmp then
18610: LD_VAR 0 5
18614: PUSH
18615: LD_VAR 0 5
18619: ARRAY
18620: PUSH
18621: LD_INT 2
18623: ARRAY
18624: PUSH
18625: LD_VAR 0 8
18629: LESSEQUAL
18630: IFFALSE 18663
// result := Join ( result , [ i , tmp ] ) else
18632: LD_ADDR_VAR 0 5
18636: PUSH
18637: LD_VAR 0 5
18641: PPUSH
18642: LD_VAR 0 6
18646: PUSH
18647: LD_VAR 0 8
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PPUSH
18656: CALL 51050 0 2
18660: ST_TO_ADDR
18661: GO 18748
// begin for j := 1 to Count ( result ) do
18663: LD_ADDR_VAR 0 7
18667: PUSH
18668: DOUBLE
18669: LD_INT 1
18671: DEC
18672: ST_TO_ADDR
18673: LD_VAR 0 5
18677: PPUSH
18678: CALL 15084 0 1
18682: PUSH
18683: FOR_TO
18684: IFFALSE 18746
// begin if tmp < result [ j ] [ 2 ] then
18686: LD_VAR 0 8
18690: PUSH
18691: LD_VAR 0 5
18695: PUSH
18696: LD_VAR 0 7
18700: ARRAY
18701: PUSH
18702: LD_INT 2
18704: ARRAY
18705: LESS
18706: IFFALSE 18744
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18708: LD_ADDR_VAR 0 5
18712: PUSH
18713: LD_VAR 0 5
18717: PPUSH
18718: LD_VAR 0 7
18722: PPUSH
18723: LD_VAR 0 6
18727: PUSH
18728: LD_VAR 0 8
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PPUSH
18737: CALL_OW 2
18741: ST_TO_ADDR
// break ;
18742: GO 18746
// end ; end ;
18744: GO 18683
18746: POP
18747: POP
// end ; end ;
18748: GO 18531
18750: POP
18751: POP
// if result and not asc then
18752: LD_VAR 0 5
18756: IFFALSE 18765
18758: PUSH
18759: LD_VAR 0 3
18763: NOT
18764: AND
18765: IFFALSE 18782
// result := ReverseArray ( result ) ;
18767: LD_ADDR_VAR 0 5
18771: PUSH
18772: LD_VAR 0 5
18776: PPUSH
18777: CALL 46140 0 1
18781: ST_TO_ADDR
// tmp := [ ] ;
18782: LD_ADDR_VAR 0 8
18786: PUSH
18787: EMPTY
18788: ST_TO_ADDR
// if mode then
18789: LD_VAR 0 4
18793: IFFALSE 18857
// begin for i := 1 to result do
18795: LD_ADDR_VAR 0 6
18799: PUSH
18800: DOUBLE
18801: LD_INT 1
18803: DEC
18804: ST_TO_ADDR
18805: LD_VAR 0 5
18809: PUSH
18810: FOR_TO
18811: IFFALSE 18845
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
18813: LD_ADDR_VAR 0 8
18817: PUSH
18818: LD_VAR 0 8
18822: PPUSH
18823: LD_VAR 0 5
18827: PUSH
18828: LD_VAR 0 6
18832: ARRAY
18833: PUSH
18834: LD_INT 1
18836: ARRAY
18837: PPUSH
18838: CALL 51050 0 2
18842: ST_TO_ADDR
18843: GO 18810
18845: POP
18846: POP
// result := tmp ;
18847: LD_ADDR_VAR 0 5
18851: PUSH
18852: LD_VAR 0 8
18856: ST_TO_ADDR
// end ; end ;
18857: LD_VAR 0 5
18861: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18862: LD_INT 0
18864: PPUSH
18865: PPUSH
18866: PPUSH
18867: PPUSH
// if not list then
18868: LD_VAR 0 3
18872: NOT
18873: IFFALSE 18877
// exit ;
18875: GO 19267
// result := [ ] ;
18877: LD_ADDR_VAR 0 6
18881: PUSH
18882: EMPTY
18883: ST_TO_ADDR
// for i in list do
18884: LD_ADDR_VAR 0 7
18888: PUSH
18889: LD_VAR 0 3
18893: PUSH
18894: FOR_IN
18895: IFFALSE 19097
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18897: LD_ADDR_VAR 0 9
18901: PUSH
18902: LD_VAR 0 7
18906: PPUSH
18907: LD_VAR 0 1
18911: PPUSH
18912: LD_VAR 0 2
18916: PPUSH
18917: CALL_OW 297
18921: ST_TO_ADDR
// if not result then
18922: LD_VAR 0 6
18926: NOT
18927: IFFALSE 18953
// result := [ [ i , tmp ] ] else
18929: LD_ADDR_VAR 0 6
18933: PUSH
18934: LD_VAR 0 7
18938: PUSH
18939: LD_VAR 0 9
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: EMPTY
18949: LIST
18950: ST_TO_ADDR
18951: GO 19095
// begin if result [ result ] [ 2 ] <= tmp then
18953: LD_VAR 0 6
18957: PUSH
18958: LD_VAR 0 6
18962: ARRAY
18963: PUSH
18964: LD_INT 2
18966: ARRAY
18967: PUSH
18968: LD_VAR 0 9
18972: LESSEQUAL
18973: IFFALSE 19015
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18975: LD_ADDR_VAR 0 6
18979: PUSH
18980: LD_VAR 0 6
18984: PPUSH
18985: LD_VAR 0 6
18989: PUSH
18990: LD_INT 1
18992: PLUS
18993: PPUSH
18994: LD_VAR 0 7
18998: PUSH
18999: LD_VAR 0 9
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PPUSH
19008: CALL_OW 2
19012: ST_TO_ADDR
19013: GO 19095
// for j := 1 to result do
19015: LD_ADDR_VAR 0 8
19019: PUSH
19020: DOUBLE
19021: LD_INT 1
19023: DEC
19024: ST_TO_ADDR
19025: LD_VAR 0 6
19029: PUSH
19030: FOR_TO
19031: IFFALSE 19093
// begin if tmp < result [ j ] [ 2 ] then
19033: LD_VAR 0 9
19037: PUSH
19038: LD_VAR 0 6
19042: PUSH
19043: LD_VAR 0 8
19047: ARRAY
19048: PUSH
19049: LD_INT 2
19051: ARRAY
19052: LESS
19053: IFFALSE 19091
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19055: LD_ADDR_VAR 0 6
19059: PUSH
19060: LD_VAR 0 6
19064: PPUSH
19065: LD_VAR 0 8
19069: PPUSH
19070: LD_VAR 0 7
19074: PUSH
19075: LD_VAR 0 9
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PPUSH
19084: CALL_OW 2
19088: ST_TO_ADDR
// break ;
19089: GO 19093
// end ; end ;
19091: GO 19030
19093: POP
19094: POP
// end ; end ;
19095: GO 18894
19097: POP
19098: POP
// if result and not asc then
19099: LD_VAR 0 6
19103: IFFALSE 19112
19105: PUSH
19106: LD_VAR 0 4
19110: NOT
19111: AND
19112: IFFALSE 19187
// begin tmp := result ;
19114: LD_ADDR_VAR 0 9
19118: PUSH
19119: LD_VAR 0 6
19123: ST_TO_ADDR
// for i = tmp downto 1 do
19124: LD_ADDR_VAR 0 7
19128: PUSH
19129: DOUBLE
19130: LD_VAR 0 9
19134: INC
19135: ST_TO_ADDR
19136: LD_INT 1
19138: PUSH
19139: FOR_DOWNTO
19140: IFFALSE 19185
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19142: LD_ADDR_VAR 0 6
19146: PUSH
19147: LD_VAR 0 6
19151: PPUSH
19152: LD_VAR 0 9
19156: PUSH
19157: LD_VAR 0 7
19161: MINUS
19162: PUSH
19163: LD_INT 1
19165: PLUS
19166: PPUSH
19167: LD_VAR 0 9
19171: PUSH
19172: LD_VAR 0 7
19176: ARRAY
19177: PPUSH
19178: CALL_OW 1
19182: ST_TO_ADDR
19183: GO 19139
19185: POP
19186: POP
// end ; tmp := [ ] ;
19187: LD_ADDR_VAR 0 9
19191: PUSH
19192: EMPTY
19193: ST_TO_ADDR
// if mode then
19194: LD_VAR 0 5
19198: IFFALSE 19267
// begin for i = 1 to result do
19200: LD_ADDR_VAR 0 7
19204: PUSH
19205: DOUBLE
19206: LD_INT 1
19208: DEC
19209: ST_TO_ADDR
19210: LD_VAR 0 6
19214: PUSH
19215: FOR_TO
19216: IFFALSE 19255
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19218: LD_ADDR_VAR 0 9
19222: PUSH
19223: LD_VAR 0 9
19227: PPUSH
19228: LD_VAR 0 7
19232: PPUSH
19233: LD_VAR 0 6
19237: PUSH
19238: LD_VAR 0 7
19242: ARRAY
19243: PUSH
19244: LD_INT 1
19246: ARRAY
19247: PPUSH
19248: CALL_OW 1
19252: ST_TO_ADDR
19253: GO 19215
19255: POP
19256: POP
// result := tmp ;
19257: LD_ADDR_VAR 0 6
19261: PUSH
19262: LD_VAR 0 9
19266: ST_TO_ADDR
// end ; end ;
19267: LD_VAR 0 6
19271: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19272: LD_INT 0
19274: PPUSH
19275: PPUSH
19276: PPUSH
19277: PPUSH
19278: PPUSH
19279: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19280: LD_ADDR_VAR 0 5
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: LD_INT 0
19290: PUSH
19291: LD_INT 0
19293: PUSH
19294: EMPTY
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: ST_TO_ADDR
// if not x or not y then
19302: LD_VAR 0 2
19306: NOT
19307: IFTRUE 19316
19309: PUSH
19310: LD_VAR 0 3
19314: NOT
19315: OR
19316: IFFALSE 19320
// exit ;
19318: GO 20976
// if not range then
19320: LD_VAR 0 4
19324: NOT
19325: IFFALSE 19335
// range := 10 ;
19327: LD_ADDR_VAR 0 4
19331: PUSH
19332: LD_INT 10
19334: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19335: LD_ADDR_VAR 0 8
19339: PUSH
19340: LD_INT 81
19342: PUSH
19343: LD_VAR 0 1
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 92
19354: PUSH
19355: LD_VAR 0 2
19359: PUSH
19360: LD_VAR 0 3
19364: PUSH
19365: LD_VAR 0 4
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 3
19378: PUSH
19379: LD_INT 21
19381: PUSH
19382: LD_INT 3
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: LIST
19397: PPUSH
19398: CALL_OW 69
19402: ST_TO_ADDR
// if not tmp then
19403: LD_VAR 0 8
19407: NOT
19408: IFFALSE 19412
// exit ;
19410: GO 20976
// for i in tmp do
19412: LD_ADDR_VAR 0 6
19416: PUSH
19417: LD_VAR 0 8
19421: PUSH
19422: FOR_IN
19423: IFFALSE 20951
// begin points := [ 0 , 0 , 0 ] ;
19425: LD_ADDR_VAR 0 9
19429: PUSH
19430: LD_INT 0
19432: PUSH
19433: LD_INT 0
19435: PUSH
19436: LD_INT 0
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: LIST
19443: ST_TO_ADDR
// bpoints := 1 ;
19444: LD_ADDR_VAR 0 10
19448: PUSH
19449: LD_INT 1
19451: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19452: LD_VAR 0 6
19456: PPUSH
19457: CALL_OW 247
19461: PUSH
19462: LD_INT 1
19464: DOUBLE
19465: EQUAL
19466: IFTRUE 19470
19468: GO 20052
19470: POP
// begin if GetClass ( i ) = 1 then
19471: LD_VAR 0 6
19475: PPUSH
19476: CALL_OW 257
19480: PUSH
19481: LD_INT 1
19483: EQUAL
19484: IFFALSE 19505
// points := [ 10 , 5 , 3 ] ;
19486: LD_ADDR_VAR 0 9
19490: PUSH
19491: LD_INT 10
19493: PUSH
19494: LD_INT 5
19496: PUSH
19497: LD_INT 3
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: LIST
19504: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19505: LD_VAR 0 6
19509: PPUSH
19510: CALL_OW 257
19514: PUSH
19515: LD_INT 2
19517: PUSH
19518: LD_INT 3
19520: PUSH
19521: LD_INT 4
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: LIST
19528: IN
19529: IFFALSE 19550
// points := [ 3 , 2 , 1 ] ;
19531: LD_ADDR_VAR 0 9
19535: PUSH
19536: LD_INT 3
19538: PUSH
19539: LD_INT 2
19541: PUSH
19542: LD_INT 1
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: LIST
19549: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19550: LD_VAR 0 6
19554: PPUSH
19555: CALL_OW 257
19559: PUSH
19560: LD_INT 5
19562: EQUAL
19563: IFFALSE 19584
// points := [ 130 , 5 , 2 ] ;
19565: LD_ADDR_VAR 0 9
19569: PUSH
19570: LD_INT 130
19572: PUSH
19573: LD_INT 5
19575: PUSH
19576: LD_INT 2
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: LIST
19583: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19584: LD_VAR 0 6
19588: PPUSH
19589: CALL_OW 257
19593: PUSH
19594: LD_INT 8
19596: EQUAL
19597: IFFALSE 19618
// points := [ 35 , 35 , 30 ] ;
19599: LD_ADDR_VAR 0 9
19603: PUSH
19604: LD_INT 35
19606: PUSH
19607: LD_INT 35
19609: PUSH
19610: LD_INT 30
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: LIST
19617: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19618: LD_VAR 0 6
19622: PPUSH
19623: CALL_OW 257
19627: PUSH
19628: LD_INT 9
19630: EQUAL
19631: IFFALSE 19652
// points := [ 20 , 55 , 40 ] ;
19633: LD_ADDR_VAR 0 9
19637: PUSH
19638: LD_INT 20
19640: PUSH
19641: LD_INT 55
19643: PUSH
19644: LD_INT 40
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: LIST
19651: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19652: LD_VAR 0 6
19656: PPUSH
19657: CALL_OW 257
19661: PUSH
19662: LD_INT 12
19664: PUSH
19665: LD_INT 16
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: IN
19672: IFFALSE 19693
// points := [ 5 , 3 , 2 ] ;
19674: LD_ADDR_VAR 0 9
19678: PUSH
19679: LD_INT 5
19681: PUSH
19682: LD_INT 3
19684: PUSH
19685: LD_INT 2
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: LIST
19692: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19693: LD_VAR 0 6
19697: PPUSH
19698: CALL_OW 257
19702: PUSH
19703: LD_INT 17
19705: EQUAL
19706: IFFALSE 19727
// points := [ 100 , 50 , 75 ] ;
19708: LD_ADDR_VAR 0 9
19712: PUSH
19713: LD_INT 100
19715: PUSH
19716: LD_INT 50
19718: PUSH
19719: LD_INT 75
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: LIST
19726: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19727: LD_VAR 0 6
19731: PPUSH
19732: CALL_OW 257
19736: PUSH
19737: LD_INT 15
19739: EQUAL
19740: IFFALSE 19761
// points := [ 10 , 5 , 3 ] ;
19742: LD_ADDR_VAR 0 9
19746: PUSH
19747: LD_INT 10
19749: PUSH
19750: LD_INT 5
19752: PUSH
19753: LD_INT 3
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19761: LD_VAR 0 6
19765: PPUSH
19766: CALL_OW 257
19770: PUSH
19771: LD_INT 14
19773: EQUAL
19774: IFFALSE 19795
// points := [ 10 , 0 , 0 ] ;
19776: LD_ADDR_VAR 0 9
19780: PUSH
19781: LD_INT 10
19783: PUSH
19784: LD_INT 0
19786: PUSH
19787: LD_INT 0
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: LIST
19794: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19795: LD_VAR 0 6
19799: PPUSH
19800: CALL_OW 257
19804: PUSH
19805: LD_INT 11
19807: EQUAL
19808: IFFALSE 19829
// points := [ 30 , 10 , 5 ] ;
19810: LD_ADDR_VAR 0 9
19814: PUSH
19815: LD_INT 30
19817: PUSH
19818: LD_INT 10
19820: PUSH
19821: LD_INT 5
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19829: LD_VAR 0 1
19833: PPUSH
19834: LD_INT 5
19836: PPUSH
19837: CALL_OW 321
19841: PUSH
19842: LD_INT 2
19844: EQUAL
19845: IFFALSE 19862
// bpoints := bpoints * 1.8 ;
19847: LD_ADDR_VAR 0 10
19851: PUSH
19852: LD_VAR 0 10
19856: PUSH
19857: LD_REAL  1.80000000000000E+0000
19860: MUL
19861: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19862: LD_VAR 0 6
19866: PPUSH
19867: CALL_OW 257
19871: PUSH
19872: LD_INT 1
19874: PUSH
19875: LD_INT 2
19877: PUSH
19878: LD_INT 3
19880: PUSH
19881: LD_INT 4
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: IN
19890: IFFALSE 19910
19892: PUSH
19893: LD_VAR 0 1
19897: PPUSH
19898: LD_INT 51
19900: PPUSH
19901: CALL_OW 321
19905: PUSH
19906: LD_INT 2
19908: EQUAL
19909: AND
19910: IFFALSE 19927
// bpoints := bpoints * 1.2 ;
19912: LD_ADDR_VAR 0 10
19916: PUSH
19917: LD_VAR 0 10
19921: PUSH
19922: LD_REAL  1.20000000000000E+0000
19925: MUL
19926: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19927: LD_VAR 0 6
19931: PPUSH
19932: CALL_OW 257
19936: PUSH
19937: LD_INT 5
19939: PUSH
19940: LD_INT 7
19942: PUSH
19943: LD_INT 9
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: LIST
19950: IN
19951: IFFALSE 19971
19953: PUSH
19954: LD_VAR 0 1
19958: PPUSH
19959: LD_INT 52
19961: PPUSH
19962: CALL_OW 321
19966: PUSH
19967: LD_INT 2
19969: EQUAL
19970: AND
19971: IFFALSE 19988
// bpoints := bpoints * 1.5 ;
19973: LD_ADDR_VAR 0 10
19977: PUSH
19978: LD_VAR 0 10
19982: PUSH
19983: LD_REAL  1.50000000000000E+0000
19986: MUL
19987: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19988: LD_VAR 0 1
19992: PPUSH
19993: LD_INT 66
19995: PPUSH
19996: CALL_OW 321
20000: PUSH
20001: LD_INT 2
20003: EQUAL
20004: IFFALSE 20021
// bpoints := bpoints * 1.1 ;
20006: LD_ADDR_VAR 0 10
20010: PUSH
20011: LD_VAR 0 10
20015: PUSH
20016: LD_REAL  1.10000000000000E+0000
20019: MUL
20020: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20021: LD_ADDR_VAR 0 10
20025: PUSH
20026: LD_VAR 0 10
20030: PUSH
20031: LD_VAR 0 6
20035: PPUSH
20036: LD_INT 1
20038: PPUSH
20039: CALL_OW 259
20043: PUSH
20044: LD_REAL  1.15000000000000E+0000
20047: MUL
20048: MUL
20049: ST_TO_ADDR
// end ; unit_vehicle :
20050: GO 20880
20052: LD_INT 2
20054: DOUBLE
20055: EQUAL
20056: IFTRUE 20060
20058: GO 20868
20060: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20061: LD_VAR 0 6
20065: PPUSH
20066: CALL_OW 264
20070: PUSH
20071: LD_INT 2
20073: PUSH
20074: LD_INT 42
20076: PUSH
20077: LD_INT 24
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: LIST
20084: IN
20085: IFFALSE 20106
// points := [ 25 , 5 , 3 ] ;
20087: LD_ADDR_VAR 0 9
20091: PUSH
20092: LD_INT 25
20094: PUSH
20095: LD_INT 5
20097: PUSH
20098: LD_INT 3
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: LIST
20105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20106: LD_VAR 0 6
20110: PPUSH
20111: CALL_OW 264
20115: PUSH
20116: LD_INT 4
20118: PUSH
20119: LD_INT 43
20121: PUSH
20122: LD_INT 25
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: LIST
20129: IN
20130: IFFALSE 20151
// points := [ 40 , 15 , 5 ] ;
20132: LD_ADDR_VAR 0 9
20136: PUSH
20137: LD_INT 40
20139: PUSH
20140: LD_INT 15
20142: PUSH
20143: LD_INT 5
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: LIST
20150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20151: LD_VAR 0 6
20155: PPUSH
20156: CALL_OW 264
20160: PUSH
20161: LD_INT 3
20163: PUSH
20164: LD_INT 23
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: IN
20171: IFFALSE 20192
// points := [ 7 , 25 , 8 ] ;
20173: LD_ADDR_VAR 0 9
20177: PUSH
20178: LD_INT 7
20180: PUSH
20181: LD_INT 25
20183: PUSH
20184: LD_INT 8
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: LIST
20191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20192: LD_VAR 0 6
20196: PPUSH
20197: CALL_OW 264
20201: PUSH
20202: LD_INT 5
20204: PUSH
20205: LD_INT 27
20207: PUSH
20208: LD_INT 44
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: LIST
20215: IN
20216: IFFALSE 20237
// points := [ 14 , 50 , 16 ] ;
20218: LD_ADDR_VAR 0 9
20222: PUSH
20223: LD_INT 14
20225: PUSH
20226: LD_INT 50
20228: PUSH
20229: LD_INT 16
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: LIST
20236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20237: LD_VAR 0 6
20241: PPUSH
20242: CALL_OW 264
20246: PUSH
20247: LD_INT 6
20249: PUSH
20250: LD_INT 46
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: IN
20257: IFFALSE 20278
// points := [ 32 , 120 , 70 ] ;
20259: LD_ADDR_VAR 0 9
20263: PUSH
20264: LD_INT 32
20266: PUSH
20267: LD_INT 120
20269: PUSH
20270: LD_INT 70
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: LIST
20277: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
20278: LD_VAR 0 6
20282: PPUSH
20283: CALL_OW 264
20287: PUSH
20288: LD_INT 7
20290: PUSH
20291: LD_INT 28
20293: PUSH
20294: LD_INT 45
20296: PUSH
20297: LD_INT 92
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: IN
20306: IFFALSE 20327
// points := [ 35 , 20 , 45 ] ;
20308: LD_ADDR_VAR 0 9
20312: PUSH
20313: LD_INT 35
20315: PUSH
20316: LD_INT 20
20318: PUSH
20319: LD_INT 45
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: LIST
20326: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20327: LD_VAR 0 6
20331: PPUSH
20332: CALL_OW 264
20336: PUSH
20337: LD_INT 47
20339: PUSH
20340: EMPTY
20341: LIST
20342: IN
20343: IFFALSE 20364
// points := [ 67 , 45 , 75 ] ;
20345: LD_ADDR_VAR 0 9
20349: PUSH
20350: LD_INT 67
20352: PUSH
20353: LD_INT 45
20355: PUSH
20356: LD_INT 75
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: LIST
20363: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20364: LD_VAR 0 6
20368: PPUSH
20369: CALL_OW 264
20373: PUSH
20374: LD_INT 26
20376: PUSH
20377: EMPTY
20378: LIST
20379: IN
20380: IFFALSE 20401
// points := [ 120 , 30 , 80 ] ;
20382: LD_ADDR_VAR 0 9
20386: PUSH
20387: LD_INT 120
20389: PUSH
20390: LD_INT 30
20392: PUSH
20393: LD_INT 80
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: LIST
20400: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20401: LD_VAR 0 6
20405: PPUSH
20406: CALL_OW 264
20410: PUSH
20411: LD_INT 22
20413: PUSH
20414: EMPTY
20415: LIST
20416: IN
20417: IFFALSE 20438
// points := [ 40 , 1 , 1 ] ;
20419: LD_ADDR_VAR 0 9
20423: PUSH
20424: LD_INT 40
20426: PUSH
20427: LD_INT 1
20429: PUSH
20430: LD_INT 1
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: LIST
20437: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20438: LD_VAR 0 6
20442: PPUSH
20443: CALL_OW 264
20447: PUSH
20448: LD_INT 29
20450: PUSH
20451: EMPTY
20452: LIST
20453: IN
20454: IFFALSE 20475
// points := [ 70 , 200 , 400 ] ;
20456: LD_ADDR_VAR 0 9
20460: PUSH
20461: LD_INT 70
20463: PUSH
20464: LD_INT 200
20466: PUSH
20467: LD_INT 400
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: LIST
20474: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20475: LD_VAR 0 6
20479: PPUSH
20480: CALL_OW 264
20484: PUSH
20485: LD_INT 14
20487: PUSH
20488: LD_INT 53
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: IN
20495: IFFALSE 20516
// points := [ 40 , 10 , 20 ] ;
20497: LD_ADDR_VAR 0 9
20501: PUSH
20502: LD_INT 40
20504: PUSH
20505: LD_INT 10
20507: PUSH
20508: LD_INT 20
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: LIST
20515: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20516: LD_VAR 0 6
20520: PPUSH
20521: CALL_OW 264
20525: PUSH
20526: LD_INT 9
20528: PUSH
20529: EMPTY
20530: LIST
20531: IN
20532: IFFALSE 20553
// points := [ 5 , 70 , 20 ] ;
20534: LD_ADDR_VAR 0 9
20538: PUSH
20539: LD_INT 5
20541: PUSH
20542: LD_INT 70
20544: PUSH
20545: LD_INT 20
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: LIST
20552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20553: LD_VAR 0 6
20557: PPUSH
20558: CALL_OW 264
20562: PUSH
20563: LD_INT 10
20565: PUSH
20566: EMPTY
20567: LIST
20568: IN
20569: IFFALSE 20590
// points := [ 35 , 110 , 70 ] ;
20571: LD_ADDR_VAR 0 9
20575: PUSH
20576: LD_INT 35
20578: PUSH
20579: LD_INT 110
20581: PUSH
20582: LD_INT 70
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: LIST
20589: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20590: LD_VAR 0 6
20594: PPUSH
20595: CALL_OW 265
20599: PUSH
20600: LD_INT 25
20602: EQUAL
20603: IFFALSE 20624
// points := [ 80 , 65 , 100 ] ;
20605: LD_ADDR_VAR 0 9
20609: PUSH
20610: LD_INT 80
20612: PUSH
20613: LD_INT 65
20615: PUSH
20616: LD_INT 100
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: LIST
20623: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20624: LD_VAR 0 6
20628: PPUSH
20629: CALL_OW 263
20633: PUSH
20634: LD_INT 1
20636: EQUAL
20637: IFFALSE 20672
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20639: LD_ADDR_VAR 0 10
20643: PUSH
20644: LD_VAR 0 10
20648: PUSH
20649: LD_VAR 0 6
20653: PPUSH
20654: CALL_OW 311
20658: PPUSH
20659: LD_INT 3
20661: PPUSH
20662: CALL_OW 259
20666: PUSH
20667: LD_INT 4
20669: MUL
20670: MUL
20671: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20672: LD_VAR 0 6
20676: PPUSH
20677: CALL_OW 263
20681: PUSH
20682: LD_INT 2
20684: EQUAL
20685: IFFALSE 20736
// begin j := IsControledBy ( i ) ;
20687: LD_ADDR_VAR 0 7
20691: PUSH
20692: LD_VAR 0 6
20696: PPUSH
20697: CALL_OW 312
20701: ST_TO_ADDR
// if j then
20702: LD_VAR 0 7
20706: IFFALSE 20736
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20708: LD_ADDR_VAR 0 10
20712: PUSH
20713: LD_VAR 0 10
20717: PUSH
20718: LD_VAR 0 7
20722: PPUSH
20723: LD_INT 3
20725: PPUSH
20726: CALL_OW 259
20730: PUSH
20731: LD_INT 3
20733: MUL
20734: MUL
20735: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20736: LD_VAR 0 6
20740: PPUSH
20741: CALL_OW 264
20745: PUSH
20746: LD_INT 5
20748: PUSH
20749: LD_INT 6
20751: PUSH
20752: LD_INT 46
20754: PUSH
20755: LD_INT 44
20757: PUSH
20758: LD_INT 47
20760: PUSH
20761: LD_INT 45
20763: PUSH
20764: LD_INT 28
20766: PUSH
20767: LD_INT 7
20769: PUSH
20770: LD_INT 27
20772: PUSH
20773: LD_INT 29
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: IN
20788: IFFALSE 20808
20790: PUSH
20791: LD_VAR 0 1
20795: PPUSH
20796: LD_INT 52
20798: PPUSH
20799: CALL_OW 321
20803: PUSH
20804: LD_INT 2
20806: EQUAL
20807: AND
20808: IFFALSE 20825
// bpoints := bpoints * 1.2 ;
20810: LD_ADDR_VAR 0 10
20814: PUSH
20815: LD_VAR 0 10
20819: PUSH
20820: LD_REAL  1.20000000000000E+0000
20823: MUL
20824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20825: LD_VAR 0 6
20829: PPUSH
20830: CALL_OW 264
20834: PUSH
20835: LD_INT 6
20837: PUSH
20838: LD_INT 46
20840: PUSH
20841: LD_INT 47
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: IN
20849: IFFALSE 20866
// bpoints := bpoints * 1.2 ;
20851: LD_ADDR_VAR 0 10
20855: PUSH
20856: LD_VAR 0 10
20860: PUSH
20861: LD_REAL  1.20000000000000E+0000
20864: MUL
20865: ST_TO_ADDR
// end ; unit_building :
20866: GO 20880
20868: LD_INT 3
20870: DOUBLE
20871: EQUAL
20872: IFTRUE 20876
20874: GO 20879
20876: POP
// ; end ;
20877: GO 20880
20879: POP
// for j = 1 to 3 do
20880: LD_ADDR_VAR 0 7
20884: PUSH
20885: DOUBLE
20886: LD_INT 1
20888: DEC
20889: ST_TO_ADDR
20890: LD_INT 3
20892: PUSH
20893: FOR_TO
20894: IFFALSE 20947
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20896: LD_ADDR_VAR 0 5
20900: PUSH
20901: LD_VAR 0 5
20905: PPUSH
20906: LD_VAR 0 7
20910: PPUSH
20911: LD_VAR 0 5
20915: PUSH
20916: LD_VAR 0 7
20920: ARRAY
20921: PUSH
20922: LD_VAR 0 9
20926: PUSH
20927: LD_VAR 0 7
20931: ARRAY
20932: PUSH
20933: LD_VAR 0 10
20937: MUL
20938: PLUS
20939: PPUSH
20940: CALL_OW 1
20944: ST_TO_ADDR
20945: GO 20893
20947: POP
20948: POP
// end ;
20949: GO 19422
20951: POP
20952: POP
// result := Replace ( result , 4 , tmp ) ;
20953: LD_ADDR_VAR 0 5
20957: PUSH
20958: LD_VAR 0 5
20962: PPUSH
20963: LD_INT 4
20965: PPUSH
20966: LD_VAR 0 8
20970: PPUSH
20971: CALL_OW 1
20975: ST_TO_ADDR
// end ;
20976: LD_VAR 0 5
20980: RET
// export function DangerAtRange ( unit , range ) ; begin
20981: LD_INT 0
20983: PPUSH
// if not unit then
20984: LD_VAR 0 1
20988: NOT
20989: IFFALSE 20993
// exit ;
20991: GO 21038
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20993: LD_ADDR_VAR 0 3
20997: PUSH
20998: LD_VAR 0 1
21002: PPUSH
21003: CALL_OW 255
21007: PPUSH
21008: LD_VAR 0 1
21012: PPUSH
21013: CALL_OW 250
21017: PPUSH
21018: LD_VAR 0 1
21022: PPUSH
21023: CALL_OW 251
21027: PPUSH
21028: LD_VAR 0 2
21032: PPUSH
21033: CALL 19272 0 4
21037: ST_TO_ADDR
// end ;
21038: LD_VAR 0 3
21042: RET
// export function DangerInArea ( side , area ) ; begin
21043: LD_INT 0
21045: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
21046: LD_ADDR_VAR 0 3
21050: PUSH
21051: LD_VAR 0 2
21055: PPUSH
21056: LD_INT 81
21058: PUSH
21059: LD_VAR 0 1
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PPUSH
21068: CALL_OW 70
21072: ST_TO_ADDR
// end ;
21073: LD_VAR 0 3
21077: RET
// export function IsExtension ( b ) ; begin
21078: LD_INT 0
21080: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21081: LD_ADDR_VAR 0 2
21085: PUSH
21086: LD_VAR 0 1
21090: PUSH
21091: LD_INT 23
21093: PUSH
21094: LD_INT 20
21096: PUSH
21097: LD_INT 22
21099: PUSH
21100: LD_INT 17
21102: PUSH
21103: LD_INT 24
21105: PUSH
21106: LD_INT 21
21108: PUSH
21109: LD_INT 19
21111: PUSH
21112: LD_INT 16
21114: PUSH
21115: LD_INT 25
21117: PUSH
21118: LD_INT 18
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: IN
21133: ST_TO_ADDR
// end ;
21134: LD_VAR 0 2
21138: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
21139: LD_INT 0
21141: PPUSH
21142: PPUSH
21143: PPUSH
// result := [ ] ;
21144: LD_ADDR_VAR 0 4
21148: PUSH
21149: EMPTY
21150: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21151: LD_ADDR_VAR 0 5
21155: PUSH
21156: LD_VAR 0 2
21160: PPUSH
21161: LD_INT 21
21163: PUSH
21164: LD_INT 3
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PPUSH
21171: CALL_OW 70
21175: ST_TO_ADDR
// if not tmp then
21176: LD_VAR 0 5
21180: NOT
21181: IFFALSE 21185
// exit ;
21183: GO 21249
// if checkLink then
21185: LD_VAR 0 3
21189: IFFALSE 21239
// begin for i in tmp do
21191: LD_ADDR_VAR 0 6
21195: PUSH
21196: LD_VAR 0 5
21200: PUSH
21201: FOR_IN
21202: IFFALSE 21237
// if GetBase ( i ) <> base then
21204: LD_VAR 0 6
21208: PPUSH
21209: CALL_OW 274
21213: PUSH
21214: LD_VAR 0 1
21218: NONEQUAL
21219: IFFALSE 21235
// ComLinkToBase ( base , i ) ;
21221: LD_VAR 0 1
21225: PPUSH
21226: LD_VAR 0 6
21230: PPUSH
21231: CALL_OW 169
21235: GO 21201
21237: POP
21238: POP
// end ; result := tmp ;
21239: LD_ADDR_VAR 0 4
21243: PUSH
21244: LD_VAR 0 5
21248: ST_TO_ADDR
// end ;
21249: LD_VAR 0 4
21253: RET
// export function ComComplete ( units , b ) ; var i ; begin
21254: LD_INT 0
21256: PPUSH
21257: PPUSH
// if not units then
21258: LD_VAR 0 1
21262: NOT
21263: IFFALSE 21267
// exit ;
21265: GO 21357
// for i in units do
21267: LD_ADDR_VAR 0 4
21271: PUSH
21272: LD_VAR 0 1
21276: PUSH
21277: FOR_IN
21278: IFFALSE 21355
// if BuildingStatus ( b ) = bs_build then
21280: LD_VAR 0 2
21284: PPUSH
21285: CALL_OW 461
21289: PUSH
21290: LD_INT 1
21292: EQUAL
21293: IFFALSE 21353
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21295: LD_VAR 0 4
21299: PPUSH
21300: LD_STRING h
21302: PUSH
21303: LD_VAR 0 2
21307: PPUSH
21308: CALL_OW 250
21312: PUSH
21313: LD_VAR 0 2
21317: PPUSH
21318: CALL_OW 251
21322: PUSH
21323: LD_VAR 0 2
21327: PUSH
21328: LD_INT 0
21330: PUSH
21331: LD_INT 0
21333: PUSH
21334: LD_INT 0
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: PUSH
21346: EMPTY
21347: LIST
21348: PPUSH
21349: CALL_OW 446
21353: GO 21277
21355: POP
21356: POP
// end ;
21357: LD_VAR 0 3
21361: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21362: LD_INT 0
21364: PPUSH
21365: PPUSH
21366: PPUSH
21367: PPUSH
21368: PPUSH
21369: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
21370: LD_VAR 0 1
21374: NOT
21375: IFTRUE 21392
21377: PUSH
21378: LD_VAR 0 1
21382: PPUSH
21383: CALL_OW 263
21387: PUSH
21388: LD_INT 2
21390: NONEQUAL
21391: OR
21392: IFFALSE 21396
// exit ;
21394: GO 21712
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21396: LD_ADDR_VAR 0 6
21400: PUSH
21401: LD_INT 22
21403: PUSH
21404: LD_VAR 0 1
21408: PPUSH
21409: CALL_OW 255
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 2
21420: PUSH
21421: LD_INT 30
21423: PUSH
21424: LD_INT 36
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 34
21433: PUSH
21434: LD_INT 31
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: LIST
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PPUSH
21450: CALL_OW 69
21454: ST_TO_ADDR
// if not tmp then
21455: LD_VAR 0 6
21459: NOT
21460: IFFALSE 21464
// exit ;
21462: GO 21712
// result := [ ] ;
21464: LD_ADDR_VAR 0 2
21468: PUSH
21469: EMPTY
21470: ST_TO_ADDR
// for i in tmp do
21471: LD_ADDR_VAR 0 3
21475: PUSH
21476: LD_VAR 0 6
21480: PUSH
21481: FOR_IN
21482: IFFALSE 21553
// begin t := UnitsInside ( i ) ;
21484: LD_ADDR_VAR 0 4
21488: PUSH
21489: LD_VAR 0 3
21493: PPUSH
21494: CALL_OW 313
21498: ST_TO_ADDR
// if t then
21499: LD_VAR 0 4
21503: IFFALSE 21551
// for j in t do
21505: LD_ADDR_VAR 0 7
21509: PUSH
21510: LD_VAR 0 4
21514: PUSH
21515: FOR_IN
21516: IFFALSE 21549
// result := Replace ( result , result + 1 , j ) ;
21518: LD_ADDR_VAR 0 2
21522: PUSH
21523: LD_VAR 0 2
21527: PPUSH
21528: LD_VAR 0 2
21532: PUSH
21533: LD_INT 1
21535: PLUS
21536: PPUSH
21537: LD_VAR 0 7
21541: PPUSH
21542: CALL_OW 1
21546: ST_TO_ADDR
21547: GO 21515
21549: POP
21550: POP
// end ;
21551: GO 21481
21553: POP
21554: POP
// if not result then
21555: LD_VAR 0 2
21559: NOT
21560: IFFALSE 21564
// exit ;
21562: GO 21712
// mech := result [ 1 ] ;
21564: LD_ADDR_VAR 0 5
21568: PUSH
21569: LD_VAR 0 2
21573: PUSH
21574: LD_INT 1
21576: ARRAY
21577: ST_TO_ADDR
// if result > 1 then
21578: LD_VAR 0 2
21582: PUSH
21583: LD_INT 1
21585: GREATER
21586: IFFALSE 21698
// begin for i = 2 to result do
21588: LD_ADDR_VAR 0 3
21592: PUSH
21593: DOUBLE
21594: LD_INT 2
21596: DEC
21597: ST_TO_ADDR
21598: LD_VAR 0 2
21602: PUSH
21603: FOR_TO
21604: IFFALSE 21696
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21606: LD_ADDR_VAR 0 4
21610: PUSH
21611: LD_VAR 0 2
21615: PUSH
21616: LD_VAR 0 3
21620: ARRAY
21621: PPUSH
21622: LD_INT 3
21624: PPUSH
21625: CALL_OW 259
21629: PUSH
21630: LD_VAR 0 2
21634: PUSH
21635: LD_VAR 0 3
21639: ARRAY
21640: PPUSH
21641: CALL_OW 432
21645: MINUS
21646: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21647: LD_VAR 0 4
21651: PUSH
21652: LD_VAR 0 5
21656: PPUSH
21657: LD_INT 3
21659: PPUSH
21660: CALL_OW 259
21664: PUSH
21665: LD_VAR 0 5
21669: PPUSH
21670: CALL_OW 432
21674: MINUS
21675: GREATEREQUAL
21676: IFFALSE 21694
// mech := result [ i ] ;
21678: LD_ADDR_VAR 0 5
21682: PUSH
21683: LD_VAR 0 2
21687: PUSH
21688: LD_VAR 0 3
21692: ARRAY
21693: ST_TO_ADDR
// end ;
21694: GO 21603
21696: POP
21697: POP
// end ; ComLinkTo ( vehicle , mech ) ;
21698: LD_VAR 0 1
21702: PPUSH
21703: LD_VAR 0 5
21707: PPUSH
21708: CALL_OW 135
// end ;
21712: LD_VAR 0 2
21716: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21717: LD_INT 0
21719: PPUSH
21720: PPUSH
21721: PPUSH
21722: PPUSH
21723: PPUSH
21724: PPUSH
21725: PPUSH
21726: PPUSH
21727: PPUSH
21728: PPUSH
21729: PPUSH
21730: PPUSH
21731: PPUSH
// result := [ ] ;
21732: LD_ADDR_VAR 0 7
21736: PUSH
21737: EMPTY
21738: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21739: LD_VAR 0 1
21743: PPUSH
21744: CALL_OW 266
21748: PUSH
21749: LD_INT 0
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: IN
21759: NOT
21760: IFFALSE 21764
// exit ;
21762: GO 23404
// if name then
21764: LD_VAR 0 3
21768: IFFALSE 21784
// SetBName ( base_dep , name ) ;
21770: LD_VAR 0 1
21774: PPUSH
21775: LD_VAR 0 3
21779: PPUSH
21780: CALL_OW 500
// base := GetBase ( base_dep ) ;
21784: LD_ADDR_VAR 0 15
21788: PUSH
21789: LD_VAR 0 1
21793: PPUSH
21794: CALL_OW 274
21798: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21799: LD_ADDR_VAR 0 16
21803: PUSH
21804: LD_VAR 0 1
21808: PPUSH
21809: CALL_OW 255
21813: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21814: LD_ADDR_VAR 0 17
21818: PUSH
21819: LD_VAR 0 1
21823: PPUSH
21824: CALL_OW 248
21828: ST_TO_ADDR
// if sources then
21829: LD_VAR 0 5
21833: IFFALSE 21880
// for i = 1 to 3 do
21835: LD_ADDR_VAR 0 8
21839: PUSH
21840: DOUBLE
21841: LD_INT 1
21843: DEC
21844: ST_TO_ADDR
21845: LD_INT 3
21847: PUSH
21848: FOR_TO
21849: IFFALSE 21878
// AddResourceType ( base , i , sources [ i ] ) ;
21851: LD_VAR 0 15
21855: PPUSH
21856: LD_VAR 0 8
21860: PPUSH
21861: LD_VAR 0 5
21865: PUSH
21866: LD_VAR 0 8
21870: ARRAY
21871: PPUSH
21872: CALL_OW 276
21876: GO 21848
21878: POP
21879: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
21880: LD_ADDR_VAR 0 18
21884: PUSH
21885: LD_VAR 0 15
21889: PPUSH
21890: LD_VAR 0 2
21894: PPUSH
21895: LD_INT 1
21897: PPUSH
21898: CALL 21139 0 3
21902: ST_TO_ADDR
// InitHc ;
21903: CALL_OW 19
// InitUc ;
21907: CALL_OW 18
// uc_side := side ;
21911: LD_ADDR_OWVAR 20
21915: PUSH
21916: LD_VAR 0 16
21920: ST_TO_ADDR
// uc_nation := nation ;
21921: LD_ADDR_OWVAR 21
21925: PUSH
21926: LD_VAR 0 17
21930: ST_TO_ADDR
// if buildings then
21931: LD_VAR 0 18
21935: IFFALSE 23263
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21937: LD_ADDR_VAR 0 19
21941: PUSH
21942: LD_VAR 0 18
21946: PPUSH
21947: LD_INT 2
21949: PUSH
21950: LD_INT 30
21952: PUSH
21953: LD_INT 29
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 30
21962: PUSH
21963: LD_INT 30
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: LIST
21974: PPUSH
21975: CALL_OW 72
21979: ST_TO_ADDR
// if tmp then
21980: LD_VAR 0 19
21984: IFFALSE 22032
// for i in tmp do
21986: LD_ADDR_VAR 0 8
21990: PUSH
21991: LD_VAR 0 19
21995: PUSH
21996: FOR_IN
21997: IFFALSE 22030
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21999: LD_VAR 0 8
22003: PPUSH
22004: CALL_OW 250
22008: PPUSH
22009: LD_VAR 0 8
22013: PPUSH
22014: CALL_OW 251
22018: PPUSH
22019: LD_VAR 0 16
22023: PPUSH
22024: CALL_OW 441
22028: GO 21996
22030: POP
22031: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
22032: LD_VAR 0 18
22036: PPUSH
22037: LD_INT 2
22039: PUSH
22040: LD_INT 30
22042: PUSH
22043: LD_INT 32
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 30
22052: PUSH
22053: LD_INT 33
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: LIST
22064: PPUSH
22065: CALL_OW 72
22069: IFFALSE 22157
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22071: LD_ADDR_VAR 0 8
22075: PUSH
22076: LD_VAR 0 18
22080: PPUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 30
22086: PUSH
22087: LD_INT 32
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 30
22096: PUSH
22097: LD_INT 33
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: LIST
22108: PPUSH
22109: CALL_OW 72
22113: PUSH
22114: FOR_IN
22115: IFFALSE 22155
// begin if not GetBWeapon ( i ) then
22117: LD_VAR 0 8
22121: PPUSH
22122: CALL_OW 269
22126: NOT
22127: IFFALSE 22153
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
22129: LD_VAR 0 8
22133: PPUSH
22134: LD_VAR 0 8
22138: PPUSH
22139: LD_VAR 0 2
22143: PPUSH
22144: CALL 23409 0 2
22148: PPUSH
22149: CALL_OW 431
// end ;
22153: GO 22114
22155: POP
22156: POP
// end ; for i = 1 to personel do
22157: LD_ADDR_VAR 0 8
22161: PUSH
22162: DOUBLE
22163: LD_INT 1
22165: DEC
22166: ST_TO_ADDR
22167: LD_VAR 0 6
22171: PUSH
22172: FOR_TO
22173: IFFALSE 23243
// begin if i > 4 then
22175: LD_VAR 0 8
22179: PUSH
22180: LD_INT 4
22182: GREATER
22183: IFFALSE 22187
// break ;
22185: GO 23243
// case i of 1 :
22187: LD_VAR 0 8
22191: PUSH
22192: LD_INT 1
22194: DOUBLE
22195: EQUAL
22196: IFTRUE 22200
22198: GO 22280
22200: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22201: LD_ADDR_VAR 0 12
22205: PUSH
22206: LD_VAR 0 18
22210: PPUSH
22211: LD_INT 22
22213: PUSH
22214: LD_VAR 0 16
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 58
22225: PUSH
22226: EMPTY
22227: LIST
22228: PUSH
22229: LD_INT 2
22231: PUSH
22232: LD_INT 30
22234: PUSH
22235: LD_INT 32
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 30
22244: PUSH
22245: LD_INT 4
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 30
22254: PUSH
22255: LD_INT 5
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: LIST
22272: PPUSH
22273: CALL_OW 72
22277: ST_TO_ADDR
22278: GO 22502
22280: LD_INT 2
22282: DOUBLE
22283: EQUAL
22284: IFTRUE 22288
22286: GO 22350
22288: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22289: LD_ADDR_VAR 0 12
22293: PUSH
22294: LD_VAR 0 18
22298: PPUSH
22299: LD_INT 22
22301: PUSH
22302: LD_VAR 0 16
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 2
22313: PUSH
22314: LD_INT 30
22316: PUSH
22317: LD_INT 0
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 30
22326: PUSH
22327: LD_INT 1
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: LIST
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PPUSH
22343: CALL_OW 72
22347: ST_TO_ADDR
22348: GO 22502
22350: LD_INT 3
22352: DOUBLE
22353: EQUAL
22354: IFTRUE 22358
22356: GO 22420
22358: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22359: LD_ADDR_VAR 0 12
22363: PUSH
22364: LD_VAR 0 18
22368: PPUSH
22369: LD_INT 22
22371: PUSH
22372: LD_VAR 0 16
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 2
22383: PUSH
22384: LD_INT 30
22386: PUSH
22387: LD_INT 2
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 30
22396: PUSH
22397: LD_INT 3
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: LIST
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PPUSH
22413: CALL_OW 72
22417: ST_TO_ADDR
22418: GO 22502
22420: LD_INT 4
22422: DOUBLE
22423: EQUAL
22424: IFTRUE 22428
22426: GO 22501
22428: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22429: LD_ADDR_VAR 0 12
22433: PUSH
22434: LD_VAR 0 18
22438: PPUSH
22439: LD_INT 22
22441: PUSH
22442: LD_VAR 0 16
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 2
22453: PUSH
22454: LD_INT 30
22456: PUSH
22457: LD_INT 6
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 30
22466: PUSH
22467: LD_INT 7
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 30
22476: PUSH
22477: LD_INT 8
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PPUSH
22494: CALL_OW 72
22498: ST_TO_ADDR
22499: GO 22502
22501: POP
// if i = 1 then
22502: LD_VAR 0 8
22506: PUSH
22507: LD_INT 1
22509: EQUAL
22510: IFFALSE 22621
// begin tmp := [ ] ;
22512: LD_ADDR_VAR 0 19
22516: PUSH
22517: EMPTY
22518: ST_TO_ADDR
// for j in f do
22519: LD_ADDR_VAR 0 9
22523: PUSH
22524: LD_VAR 0 12
22528: PUSH
22529: FOR_IN
22530: IFFALSE 22603
// if GetBType ( j ) = b_bunker then
22532: LD_VAR 0 9
22536: PPUSH
22537: CALL_OW 266
22541: PUSH
22542: LD_INT 32
22544: EQUAL
22545: IFFALSE 22572
// tmp := Insert ( tmp , 1 , j ) else
22547: LD_ADDR_VAR 0 19
22551: PUSH
22552: LD_VAR 0 19
22556: PPUSH
22557: LD_INT 1
22559: PPUSH
22560: LD_VAR 0 9
22564: PPUSH
22565: CALL_OW 2
22569: ST_TO_ADDR
22570: GO 22601
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22572: LD_ADDR_VAR 0 19
22576: PUSH
22577: LD_VAR 0 19
22581: PPUSH
22582: LD_VAR 0 19
22586: PUSH
22587: LD_INT 1
22589: PLUS
22590: PPUSH
22591: LD_VAR 0 9
22595: PPUSH
22596: CALL_OW 2
22600: ST_TO_ADDR
22601: GO 22529
22603: POP
22604: POP
// if tmp then
22605: LD_VAR 0 19
22609: IFFALSE 22621
// f := tmp ;
22611: LD_ADDR_VAR 0 12
22615: PUSH
22616: LD_VAR 0 19
22620: ST_TO_ADDR
// end ; x := personel [ i ] ;
22621: LD_ADDR_VAR 0 13
22625: PUSH
22626: LD_VAR 0 6
22630: PUSH
22631: LD_VAR 0 8
22635: ARRAY
22636: ST_TO_ADDR
// if x = - 1 then
22637: LD_VAR 0 13
22641: PUSH
22642: LD_INT 1
22644: NEG
22645: EQUAL
22646: IFFALSE 22857
// begin for j in f do
22648: LD_ADDR_VAR 0 9
22652: PUSH
22653: LD_VAR 0 12
22657: PUSH
22658: FOR_IN
22659: IFFALSE 22853
// repeat InitHc ;
22661: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22665: LD_VAR 0 9
22669: PPUSH
22670: CALL_OW 266
22674: PUSH
22675: LD_INT 5
22677: EQUAL
22678: IFFALSE 22748
// begin if UnitsInside ( j ) < 3 then
22680: LD_VAR 0 9
22684: PPUSH
22685: CALL_OW 313
22689: PUSH
22690: LD_INT 3
22692: LESS
22693: IFFALSE 22729
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22695: LD_INT 0
22697: PPUSH
22698: LD_INT 5
22700: PUSH
22701: LD_INT 8
22703: PUSH
22704: LD_INT 9
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: PUSH
22712: LD_VAR 0 17
22716: ARRAY
22717: PPUSH
22718: LD_VAR 0 4
22722: PPUSH
22723: CALL_OW 380
22727: GO 22746
// PrepareHuman ( false , i , skill ) ;
22729: LD_INT 0
22731: PPUSH
22732: LD_VAR 0 8
22736: PPUSH
22737: LD_VAR 0 4
22741: PPUSH
22742: CALL_OW 380
// end else
22746: GO 22765
// PrepareHuman ( false , i , skill ) ;
22748: LD_INT 0
22750: PPUSH
22751: LD_VAR 0 8
22755: PPUSH
22756: LD_VAR 0 4
22760: PPUSH
22761: CALL_OW 380
// un := CreateHuman ;
22765: LD_ADDR_VAR 0 14
22769: PUSH
22770: CALL_OW 44
22774: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22775: LD_ADDR_VAR 0 7
22779: PUSH
22780: LD_VAR 0 7
22784: PPUSH
22785: LD_INT 1
22787: PPUSH
22788: LD_VAR 0 14
22792: PPUSH
22793: CALL_OW 2
22797: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22798: LD_VAR 0 14
22802: PPUSH
22803: LD_VAR 0 9
22807: PPUSH
22808: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22812: LD_VAR 0 9
22816: PPUSH
22817: CALL_OW 313
22821: PUSH
22822: LD_INT 6
22824: EQUAL
22825: IFTRUE 22849
22827: PUSH
22828: LD_VAR 0 9
22832: PPUSH
22833: CALL_OW 266
22837: PUSH
22838: LD_INT 32
22840: PUSH
22841: LD_INT 31
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: IN
22848: OR
22849: IFFALSE 22661
22851: GO 22658
22853: POP
22854: POP
// end else
22855: GO 23241
// for j = 1 to x do
22857: LD_ADDR_VAR 0 9
22861: PUSH
22862: DOUBLE
22863: LD_INT 1
22865: DEC
22866: ST_TO_ADDR
22867: LD_VAR 0 13
22871: PUSH
22872: FOR_TO
22873: IFFALSE 23239
// begin InitHc ;
22875: CALL_OW 19
// if not f then
22879: LD_VAR 0 12
22883: NOT
22884: IFFALSE 22973
// begin PrepareHuman ( false , i , skill ) ;
22886: LD_INT 0
22888: PPUSH
22889: LD_VAR 0 8
22893: PPUSH
22894: LD_VAR 0 4
22898: PPUSH
22899: CALL_OW 380
// un := CreateHuman ;
22903: LD_ADDR_VAR 0 14
22907: PUSH
22908: CALL_OW 44
22912: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22913: LD_ADDR_VAR 0 7
22917: PUSH
22918: LD_VAR 0 7
22922: PPUSH
22923: LD_INT 1
22925: PPUSH
22926: LD_VAR 0 14
22930: PPUSH
22931: CALL_OW 2
22935: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22936: LD_VAR 0 14
22940: PPUSH
22941: LD_VAR 0 1
22945: PPUSH
22946: CALL_OW 250
22950: PPUSH
22951: LD_VAR 0 1
22955: PPUSH
22956: CALL_OW 251
22960: PPUSH
22961: LD_INT 10
22963: PPUSH
22964: LD_INT 0
22966: PPUSH
22967: CALL_OW 50
// continue ;
22971: GO 22872
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22973: LD_VAR 0 12
22977: PUSH
22978: LD_INT 1
22980: ARRAY
22981: PPUSH
22982: CALL_OW 313
22986: IFFALSE 23014
22988: PUSH
22989: LD_VAR 0 12
22993: PUSH
22994: LD_INT 1
22996: ARRAY
22997: PPUSH
22998: CALL_OW 266
23002: PUSH
23003: LD_INT 32
23005: PUSH
23006: LD_INT 31
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: IN
23013: AND
23014: IFTRUE 23035
23016: PUSH
23017: LD_VAR 0 12
23021: PUSH
23022: LD_INT 1
23024: ARRAY
23025: PPUSH
23026: CALL_OW 313
23030: PUSH
23031: LD_INT 6
23033: EQUAL
23034: OR
23035: IFFALSE 23055
// f := Delete ( f , 1 ) ;
23037: LD_ADDR_VAR 0 12
23041: PUSH
23042: LD_VAR 0 12
23046: PPUSH
23047: LD_INT 1
23049: PPUSH
23050: CALL_OW 3
23054: ST_TO_ADDR
// if not f then
23055: LD_VAR 0 12
23059: NOT
23060: IFFALSE 23078
// begin x := x + 2 ;
23062: LD_ADDR_VAR 0 13
23066: PUSH
23067: LD_VAR 0 13
23071: PUSH
23072: LD_INT 2
23074: PLUS
23075: ST_TO_ADDR
// continue ;
23076: GO 22872
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23078: LD_VAR 0 12
23082: PUSH
23083: LD_INT 1
23085: ARRAY
23086: PPUSH
23087: CALL_OW 266
23091: PUSH
23092: LD_INT 5
23094: EQUAL
23095: IFFALSE 23169
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23097: LD_VAR 0 12
23101: PUSH
23102: LD_INT 1
23104: ARRAY
23105: PPUSH
23106: CALL_OW 313
23110: PUSH
23111: LD_INT 3
23113: LESS
23114: IFFALSE 23150
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23116: LD_INT 0
23118: PPUSH
23119: LD_INT 5
23121: PUSH
23122: LD_INT 8
23124: PUSH
23125: LD_INT 9
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: LIST
23132: PUSH
23133: LD_VAR 0 17
23137: ARRAY
23138: PPUSH
23139: LD_VAR 0 4
23143: PPUSH
23144: CALL_OW 380
23148: GO 23167
// PrepareHuman ( false , i , skill ) ;
23150: LD_INT 0
23152: PPUSH
23153: LD_VAR 0 8
23157: PPUSH
23158: LD_VAR 0 4
23162: PPUSH
23163: CALL_OW 380
// end else
23167: GO 23186
// PrepareHuman ( false , i , skill ) ;
23169: LD_INT 0
23171: PPUSH
23172: LD_VAR 0 8
23176: PPUSH
23177: LD_VAR 0 4
23181: PPUSH
23182: CALL_OW 380
// un := CreateHuman ;
23186: LD_ADDR_VAR 0 14
23190: PUSH
23191: CALL_OW 44
23195: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23196: LD_ADDR_VAR 0 7
23200: PUSH
23201: LD_VAR 0 7
23205: PPUSH
23206: LD_INT 1
23208: PPUSH
23209: LD_VAR 0 14
23213: PPUSH
23214: CALL_OW 2
23218: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23219: LD_VAR 0 14
23223: PPUSH
23224: LD_VAR 0 12
23228: PUSH
23229: LD_INT 1
23231: ARRAY
23232: PPUSH
23233: CALL_OW 52
// end ;
23237: GO 22872
23239: POP
23240: POP
// end ;
23241: GO 22172
23243: POP
23244: POP
// result := result ^ buildings ;
23245: LD_ADDR_VAR 0 7
23249: PUSH
23250: LD_VAR 0 7
23254: PUSH
23255: LD_VAR 0 18
23259: ADD
23260: ST_TO_ADDR
// end else
23261: GO 23404
// begin for i = 1 to personel do
23263: LD_ADDR_VAR 0 8
23267: PUSH
23268: DOUBLE
23269: LD_INT 1
23271: DEC
23272: ST_TO_ADDR
23273: LD_VAR 0 6
23277: PUSH
23278: FOR_TO
23279: IFFALSE 23402
// begin if i > 4 then
23281: LD_VAR 0 8
23285: PUSH
23286: LD_INT 4
23288: GREATER
23289: IFFALSE 23293
// break ;
23291: GO 23402
// x := personel [ i ] ;
23293: LD_ADDR_VAR 0 13
23297: PUSH
23298: LD_VAR 0 6
23302: PUSH
23303: LD_VAR 0 8
23307: ARRAY
23308: ST_TO_ADDR
// if x = - 1 then
23309: LD_VAR 0 13
23313: PUSH
23314: LD_INT 1
23316: NEG
23317: EQUAL
23318: IFFALSE 23322
// continue ;
23320: GO 23278
// PrepareHuman ( false , i , skill ) ;
23322: LD_INT 0
23324: PPUSH
23325: LD_VAR 0 8
23329: PPUSH
23330: LD_VAR 0 4
23334: PPUSH
23335: CALL_OW 380
// un := CreateHuman ;
23339: LD_ADDR_VAR 0 14
23343: PUSH
23344: CALL_OW 44
23348: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23349: LD_VAR 0 14
23353: PPUSH
23354: LD_VAR 0 1
23358: PPUSH
23359: CALL_OW 250
23363: PPUSH
23364: LD_VAR 0 1
23368: PPUSH
23369: CALL_OW 251
23373: PPUSH
23374: LD_INT 10
23376: PPUSH
23377: LD_INT 0
23379: PPUSH
23380: CALL_OW 50
// result := result ^ un ;
23384: LD_ADDR_VAR 0 7
23388: PUSH
23389: LD_VAR 0 7
23393: PUSH
23394: LD_VAR 0 14
23398: ADD
23399: ST_TO_ADDR
// end ;
23400: GO 23278
23402: POP
23403: POP
// end ; end ;
23404: LD_VAR 0 7
23408: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23409: LD_INT 0
23411: PPUSH
23412: PPUSH
23413: PPUSH
23414: PPUSH
23415: PPUSH
23416: PPUSH
23417: PPUSH
23418: PPUSH
23419: PPUSH
23420: PPUSH
23421: PPUSH
23422: PPUSH
23423: PPUSH
23424: PPUSH
23425: PPUSH
23426: PPUSH
// result := false ;
23427: LD_ADDR_VAR 0 3
23431: PUSH
23432: LD_INT 0
23434: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23435: LD_VAR 0 1
23439: NOT
23440: IFTRUE 23465
23442: PUSH
23443: LD_VAR 0 1
23447: PPUSH
23448: CALL_OW 266
23452: PUSH
23453: LD_INT 32
23455: PUSH
23456: LD_INT 33
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: IN
23463: NOT
23464: OR
23465: IFFALSE 23469
// exit ;
23467: GO 24604
// nat := GetNation ( tower ) ;
23469: LD_ADDR_VAR 0 12
23473: PUSH
23474: LD_VAR 0 1
23478: PPUSH
23479: CALL_OW 248
23483: ST_TO_ADDR
// side := GetSide ( tower ) ;
23484: LD_ADDR_VAR 0 16
23488: PUSH
23489: LD_VAR 0 1
23493: PPUSH
23494: CALL_OW 255
23498: ST_TO_ADDR
// x := GetX ( tower ) ;
23499: LD_ADDR_VAR 0 10
23503: PUSH
23504: LD_VAR 0 1
23508: PPUSH
23509: CALL_OW 250
23513: ST_TO_ADDR
// y := GetY ( tower ) ;
23514: LD_ADDR_VAR 0 11
23518: PUSH
23519: LD_VAR 0 1
23523: PPUSH
23524: CALL_OW 251
23528: ST_TO_ADDR
// if not x or not y then
23529: LD_VAR 0 10
23533: NOT
23534: IFTRUE 23543
23536: PUSH
23537: LD_VAR 0 11
23541: NOT
23542: OR
23543: IFFALSE 23547
// exit ;
23545: GO 24604
// weapon := 0 ;
23547: LD_ADDR_VAR 0 18
23551: PUSH
23552: LD_INT 0
23554: ST_TO_ADDR
// fac_list := [ ] ;
23555: LD_ADDR_VAR 0 17
23559: PUSH
23560: EMPTY
23561: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
23562: LD_ADDR_VAR 0 6
23566: PUSH
23567: LD_VAR 0 1
23571: PPUSH
23572: CALL_OW 274
23576: PPUSH
23577: LD_VAR 0 2
23581: PPUSH
23582: LD_INT 0
23584: PPUSH
23585: CALL 21139 0 3
23589: PPUSH
23590: LD_INT 30
23592: PUSH
23593: LD_INT 3
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PPUSH
23600: CALL_OW 72
23604: ST_TO_ADDR
// if not factories then
23605: LD_VAR 0 6
23609: NOT
23610: IFFALSE 23614
// exit ;
23612: GO 24604
// for i in factories do
23614: LD_ADDR_VAR 0 8
23618: PUSH
23619: LD_VAR 0 6
23623: PUSH
23624: FOR_IN
23625: IFFALSE 23650
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23627: LD_ADDR_VAR 0 17
23631: PUSH
23632: LD_VAR 0 17
23636: PUSH
23637: LD_VAR 0 8
23641: PPUSH
23642: CALL_OW 478
23646: UNION
23647: ST_TO_ADDR
23648: GO 23624
23650: POP
23651: POP
// if not fac_list then
23652: LD_VAR 0 17
23656: NOT
23657: IFFALSE 23661
// exit ;
23659: GO 24604
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23661: LD_ADDR_VAR 0 5
23665: PUSH
23666: LD_INT 4
23668: PUSH
23669: LD_INT 5
23671: PUSH
23672: LD_INT 9
23674: PUSH
23675: LD_INT 10
23677: PUSH
23678: LD_INT 6
23680: PUSH
23681: LD_INT 7
23683: PUSH
23684: LD_INT 11
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 27
23698: PUSH
23699: LD_INT 28
23701: PUSH
23702: LD_INT 26
23704: PUSH
23705: LD_INT 30
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 43
23716: PUSH
23717: LD_INT 44
23719: PUSH
23720: LD_INT 46
23722: PUSH
23723: LD_INT 45
23725: PUSH
23726: LD_INT 47
23728: PUSH
23729: LD_INT 49
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: LIST
23744: PUSH
23745: LD_VAR 0 12
23749: ARRAY
23750: ST_TO_ADDR
// list := list isect fac_list ;
23751: LD_ADDR_VAR 0 5
23755: PUSH
23756: LD_VAR 0 5
23760: PUSH
23761: LD_VAR 0 17
23765: ISECT
23766: ST_TO_ADDR
// if not list then
23767: LD_VAR 0 5
23771: NOT
23772: IFFALSE 23776
// exit ;
23774: GO 24604
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23776: LD_VAR 0 12
23780: PUSH
23781: LD_INT 3
23783: EQUAL
23784: IFFALSE 23796
23786: PUSH
23787: LD_INT 49
23789: PUSH
23790: LD_VAR 0 5
23794: IN
23795: AND
23796: IFFALSE 23816
23798: PUSH
23799: LD_INT 31
23801: PPUSH
23802: LD_VAR 0 16
23806: PPUSH
23807: CALL_OW 321
23811: PUSH
23812: LD_INT 2
23814: EQUAL
23815: AND
23816: IFFALSE 23876
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23818: LD_INT 22
23820: PUSH
23821: LD_VAR 0 16
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 35
23832: PUSH
23833: LD_INT 49
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 91
23842: PUSH
23843: LD_VAR 0 1
23847: PUSH
23848: LD_INT 10
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: LIST
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: PPUSH
23861: CALL_OW 69
23865: NOT
23866: IFFALSE 23876
// weapon := ru_time_lapser ;
23868: LD_ADDR_VAR 0 18
23872: PUSH
23873: LD_INT 49
23875: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23876: LD_VAR 0 12
23880: PUSH
23881: LD_INT 1
23883: PUSH
23884: LD_INT 2
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: IN
23891: IFFALSE 23915
23893: PUSH
23894: LD_INT 11
23896: PUSH
23897: LD_VAR 0 5
23901: IN
23902: IFTRUE 23914
23904: PUSH
23905: LD_INT 30
23907: PUSH
23908: LD_VAR 0 5
23912: IN
23913: OR
23914: AND
23915: IFFALSE 23935
23917: PUSH
23918: LD_INT 6
23920: PPUSH
23921: LD_VAR 0 16
23925: PPUSH
23926: CALL_OW 321
23930: PUSH
23931: LD_INT 2
23933: EQUAL
23934: AND
23935: IFFALSE 24102
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23937: LD_INT 22
23939: PUSH
23940: LD_VAR 0 16
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 2
23951: PUSH
23952: LD_INT 35
23954: PUSH
23955: LD_INT 11
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 35
23964: PUSH
23965: LD_INT 30
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 91
23979: PUSH
23980: LD_VAR 0 1
23984: PUSH
23985: LD_INT 18
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: LIST
23997: PPUSH
23998: CALL_OW 69
24002: NOT
24003: IFFALSE 24079
24005: PUSH
24006: LD_INT 22
24008: PUSH
24009: LD_VAR 0 16
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: LD_INT 30
24023: PUSH
24024: LD_INT 32
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 30
24033: PUSH
24034: LD_INT 33
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 91
24048: PUSH
24049: LD_VAR 0 1
24053: PUSH
24054: LD_INT 12
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: LIST
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: LIST
24066: PUSH
24067: EMPTY
24068: LIST
24069: PPUSH
24070: CALL_OW 69
24074: PUSH
24075: LD_INT 2
24077: GREATER
24078: AND
24079: IFFALSE 24102
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24081: LD_ADDR_VAR 0 18
24085: PUSH
24086: LD_INT 11
24088: PUSH
24089: LD_INT 30
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_VAR 0 12
24100: ARRAY
24101: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24102: LD_VAR 0 18
24106: NOT
24107: IFFALSE 24127
24109: PUSH
24110: LD_INT 40
24112: PPUSH
24113: LD_VAR 0 16
24117: PPUSH
24118: CALL_OW 321
24122: PUSH
24123: LD_INT 2
24125: EQUAL
24126: AND
24127: IFFALSE 24163
24129: PUSH
24130: LD_INT 7
24132: PUSH
24133: LD_VAR 0 5
24137: IN
24138: IFTRUE 24150
24140: PUSH
24141: LD_INT 28
24143: PUSH
24144: LD_VAR 0 5
24148: IN
24149: OR
24150: IFTRUE 24162
24152: PUSH
24153: LD_INT 45
24155: PUSH
24156: LD_VAR 0 5
24160: IN
24161: OR
24162: AND
24163: IFFALSE 24417
// begin hex := GetHexInfo ( x , y ) ;
24165: LD_ADDR_VAR 0 4
24169: PUSH
24170: LD_VAR 0 10
24174: PPUSH
24175: LD_VAR 0 11
24179: PPUSH
24180: CALL_OW 546
24184: ST_TO_ADDR
// if hex [ 1 ] then
24185: LD_VAR 0 4
24189: PUSH
24190: LD_INT 1
24192: ARRAY
24193: IFFALSE 24197
// exit ;
24195: GO 24604
// height := hex [ 2 ] ;
24197: LD_ADDR_VAR 0 15
24201: PUSH
24202: LD_VAR 0 4
24206: PUSH
24207: LD_INT 2
24209: ARRAY
24210: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24211: LD_ADDR_VAR 0 14
24215: PUSH
24216: LD_INT 0
24218: PUSH
24219: LD_INT 2
24221: PUSH
24222: LD_INT 3
24224: PUSH
24225: LD_INT 5
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: ST_TO_ADDR
// for i in tmp do
24234: LD_ADDR_VAR 0 8
24238: PUSH
24239: LD_VAR 0 14
24243: PUSH
24244: FOR_IN
24245: IFFALSE 24415
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24247: LD_ADDR_VAR 0 9
24251: PUSH
24252: LD_VAR 0 10
24256: PPUSH
24257: LD_VAR 0 8
24261: PPUSH
24262: LD_INT 5
24264: PPUSH
24265: CALL_OW 272
24269: PUSH
24270: LD_VAR 0 11
24274: PPUSH
24275: LD_VAR 0 8
24279: PPUSH
24280: LD_INT 5
24282: PPUSH
24283: CALL_OW 273
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24292: LD_VAR 0 9
24296: PUSH
24297: LD_INT 1
24299: ARRAY
24300: PPUSH
24301: LD_VAR 0 9
24305: PUSH
24306: LD_INT 2
24308: ARRAY
24309: PPUSH
24310: CALL_OW 488
24314: IFFALSE 24413
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24316: LD_ADDR_VAR 0 4
24320: PUSH
24321: LD_VAR 0 9
24325: PUSH
24326: LD_INT 1
24328: ARRAY
24329: PPUSH
24330: LD_VAR 0 9
24334: PUSH
24335: LD_INT 2
24337: ARRAY
24338: PPUSH
24339: CALL_OW 546
24343: ST_TO_ADDR
// if hex [ 1 ] then
24344: LD_VAR 0 4
24348: PUSH
24349: LD_INT 1
24351: ARRAY
24352: IFFALSE 24356
// continue ;
24354: GO 24244
// h := hex [ 2 ] ;
24356: LD_ADDR_VAR 0 13
24360: PUSH
24361: LD_VAR 0 4
24365: PUSH
24366: LD_INT 2
24368: ARRAY
24369: ST_TO_ADDR
// if h + 7 < height then
24370: LD_VAR 0 13
24374: PUSH
24375: LD_INT 7
24377: PLUS
24378: PUSH
24379: LD_VAR 0 15
24383: LESS
24384: IFFALSE 24413
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24386: LD_ADDR_VAR 0 18
24390: PUSH
24391: LD_INT 7
24393: PUSH
24394: LD_INT 28
24396: PUSH
24397: LD_INT 45
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: LIST
24404: PUSH
24405: LD_VAR 0 12
24409: ARRAY
24410: ST_TO_ADDR
// break ;
24411: GO 24415
// end ; end ; end ;
24413: GO 24244
24415: POP
24416: POP
// end ; if not weapon then
24417: LD_VAR 0 18
24421: NOT
24422: IFFALSE 24482
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24424: LD_ADDR_VAR 0 5
24428: PUSH
24429: LD_VAR 0 5
24433: PUSH
24434: LD_INT 11
24436: PUSH
24437: LD_INT 30
24439: PUSH
24440: LD_INT 49
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: LIST
24447: DIFF
24448: ST_TO_ADDR
// if not list then
24449: LD_VAR 0 5
24453: NOT
24454: IFFALSE 24458
// exit ;
24456: GO 24604
// weapon := list [ rand ( 1 , list ) ] ;
24458: LD_ADDR_VAR 0 18
24462: PUSH
24463: LD_VAR 0 5
24467: PUSH
24468: LD_INT 1
24470: PPUSH
24471: LD_VAR 0 5
24475: PPUSH
24476: CALL_OW 12
24480: ARRAY
24481: ST_TO_ADDR
// end ; if weapon then
24482: LD_VAR 0 18
24486: IFFALSE 24604
// begin tmp := CostOfWeapon ( weapon ) ;
24488: LD_ADDR_VAR 0 14
24492: PUSH
24493: LD_VAR 0 18
24497: PPUSH
24498: CALL_OW 451
24502: ST_TO_ADDR
// j := GetBase ( tower ) ;
24503: LD_ADDR_VAR 0 9
24507: PUSH
24508: LD_VAR 0 1
24512: PPUSH
24513: CALL_OW 274
24517: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24518: LD_VAR 0 9
24522: PPUSH
24523: LD_INT 1
24525: PPUSH
24526: CALL_OW 275
24530: PUSH
24531: LD_VAR 0 14
24535: PUSH
24536: LD_INT 1
24538: ARRAY
24539: GREATEREQUAL
24540: IFFALSE 24566
24542: PUSH
24543: LD_VAR 0 9
24547: PPUSH
24548: LD_INT 2
24550: PPUSH
24551: CALL_OW 275
24555: PUSH
24556: LD_VAR 0 14
24560: PUSH
24561: LD_INT 2
24563: ARRAY
24564: GREATEREQUAL
24565: AND
24566: IFFALSE 24592
24568: PUSH
24569: LD_VAR 0 9
24573: PPUSH
24574: LD_INT 3
24576: PPUSH
24577: CALL_OW 275
24581: PUSH
24582: LD_VAR 0 14
24586: PUSH
24587: LD_INT 3
24589: ARRAY
24590: GREATEREQUAL
24591: AND
24592: IFFALSE 24604
// result := weapon ;
24594: LD_ADDR_VAR 0 3
24598: PUSH
24599: LD_VAR 0 18
24603: ST_TO_ADDR
// end ; end ;
24604: LD_VAR 0 3
24608: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24609: LD_INT 0
24611: PPUSH
24612: PPUSH
// result := true ;
24613: LD_ADDR_VAR 0 3
24617: PUSH
24618: LD_INT 1
24620: ST_TO_ADDR
// if array1 = array2 then
24621: LD_VAR 0 1
24625: PUSH
24626: LD_VAR 0 2
24630: EQUAL
24631: IFFALSE 24691
// begin for i = 1 to array1 do
24633: LD_ADDR_VAR 0 4
24637: PUSH
24638: DOUBLE
24639: LD_INT 1
24641: DEC
24642: ST_TO_ADDR
24643: LD_VAR 0 1
24647: PUSH
24648: FOR_TO
24649: IFFALSE 24687
// if array1 [ i ] <> array2 [ i ] then
24651: LD_VAR 0 1
24655: PUSH
24656: LD_VAR 0 4
24660: ARRAY
24661: PUSH
24662: LD_VAR 0 2
24666: PUSH
24667: LD_VAR 0 4
24671: ARRAY
24672: NONEQUAL
24673: IFFALSE 24685
// begin result := false ;
24675: LD_ADDR_VAR 0 3
24679: PUSH
24680: LD_INT 0
24682: ST_TO_ADDR
// break ;
24683: GO 24687
// end ;
24685: GO 24648
24687: POP
24688: POP
// end else
24689: GO 24699
// result := false ;
24691: LD_ADDR_VAR 0 3
24695: PUSH
24696: LD_INT 0
24698: ST_TO_ADDR
// end ;
24699: LD_VAR 0 3
24703: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
24704: LD_INT 0
24706: PPUSH
24707: PPUSH
// if not array1 or not array2 then
24708: LD_VAR 0 1
24712: NOT
24713: IFTRUE 24722
24715: PUSH
24716: LD_VAR 0 2
24720: NOT
24721: OR
24722: IFFALSE 24726
// exit ;
24724: GO 24790
// result := true ;
24726: LD_ADDR_VAR 0 3
24730: PUSH
24731: LD_INT 1
24733: ST_TO_ADDR
// for i = 1 to array1 do
24734: LD_ADDR_VAR 0 4
24738: PUSH
24739: DOUBLE
24740: LD_INT 1
24742: DEC
24743: ST_TO_ADDR
24744: LD_VAR 0 1
24748: PUSH
24749: FOR_TO
24750: IFFALSE 24788
// if array1 [ i ] <> array2 [ i ] then
24752: LD_VAR 0 1
24756: PUSH
24757: LD_VAR 0 4
24761: ARRAY
24762: PUSH
24763: LD_VAR 0 2
24767: PUSH
24768: LD_VAR 0 4
24772: ARRAY
24773: NONEQUAL
24774: IFFALSE 24786
// begin result := false ;
24776: LD_ADDR_VAR 0 3
24780: PUSH
24781: LD_INT 0
24783: ST_TO_ADDR
// break ;
24784: GO 24788
// end ;
24786: GO 24749
24788: POP
24789: POP
// end ;
24790: LD_VAR 0 3
24794: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24795: LD_INT 0
24797: PPUSH
24798: PPUSH
24799: PPUSH
// pom := GetBase ( fac ) ;
24800: LD_ADDR_VAR 0 5
24804: PUSH
24805: LD_VAR 0 1
24809: PPUSH
24810: CALL_OW 274
24814: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24815: LD_ADDR_VAR 0 4
24819: PUSH
24820: LD_VAR 0 2
24824: PUSH
24825: LD_INT 1
24827: ARRAY
24828: PPUSH
24829: LD_VAR 0 2
24833: PUSH
24834: LD_INT 2
24836: ARRAY
24837: PPUSH
24838: LD_VAR 0 2
24842: PUSH
24843: LD_INT 3
24845: ARRAY
24846: PPUSH
24847: LD_VAR 0 2
24851: PUSH
24852: LD_INT 4
24854: ARRAY
24855: PPUSH
24856: CALL_OW 449
24860: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24861: LD_ADDR_VAR 0 3
24865: PUSH
24866: LD_VAR 0 5
24870: PPUSH
24871: LD_INT 1
24873: PPUSH
24874: CALL_OW 275
24878: PUSH
24879: LD_VAR 0 4
24883: PUSH
24884: LD_INT 1
24886: ARRAY
24887: GREATEREQUAL
24888: IFFALSE 24914
24890: PUSH
24891: LD_VAR 0 5
24895: PPUSH
24896: LD_INT 2
24898: PPUSH
24899: CALL_OW 275
24903: PUSH
24904: LD_VAR 0 4
24908: PUSH
24909: LD_INT 2
24911: ARRAY
24912: GREATEREQUAL
24913: AND
24914: IFFALSE 24940
24916: PUSH
24917: LD_VAR 0 5
24921: PPUSH
24922: LD_INT 3
24924: PPUSH
24925: CALL_OW 275
24929: PUSH
24930: LD_VAR 0 4
24934: PUSH
24935: LD_INT 3
24937: ARRAY
24938: GREATEREQUAL
24939: AND
24940: ST_TO_ADDR
// end ;
24941: LD_VAR 0 3
24945: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24946: LD_INT 0
24948: PPUSH
24949: PPUSH
24950: PPUSH
24951: PPUSH
// pom := GetBase ( building ) ;
24952: LD_ADDR_VAR 0 3
24956: PUSH
24957: LD_VAR 0 1
24961: PPUSH
24962: CALL_OW 274
24966: ST_TO_ADDR
// if not pom then
24967: LD_VAR 0 3
24971: NOT
24972: IFFALSE 24976
// exit ;
24974: GO 25150
// btype := GetBType ( building ) ;
24976: LD_ADDR_VAR 0 5
24980: PUSH
24981: LD_VAR 0 1
24985: PPUSH
24986: CALL_OW 266
24990: ST_TO_ADDR
// if btype = b_armoury then
24991: LD_VAR 0 5
24995: PUSH
24996: LD_INT 4
24998: EQUAL
24999: IFFALSE 25009
// btype := b_barracks ;
25001: LD_ADDR_VAR 0 5
25005: PUSH
25006: LD_INT 5
25008: ST_TO_ADDR
// if btype = b_depot then
25009: LD_VAR 0 5
25013: PUSH
25014: LD_INT 0
25016: EQUAL
25017: IFFALSE 25027
// btype := b_warehouse ;
25019: LD_ADDR_VAR 0 5
25023: PUSH
25024: LD_INT 1
25026: ST_TO_ADDR
// if btype = b_workshop then
25027: LD_VAR 0 5
25031: PUSH
25032: LD_INT 2
25034: EQUAL
25035: IFFALSE 25045
// btype := b_factory ;
25037: LD_ADDR_VAR 0 5
25041: PUSH
25042: LD_INT 3
25044: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25045: LD_ADDR_VAR 0 4
25049: PUSH
25050: LD_VAR 0 5
25054: PPUSH
25055: LD_VAR 0 1
25059: PPUSH
25060: CALL_OW 248
25064: PPUSH
25065: CALL_OW 450
25069: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25070: LD_ADDR_VAR 0 2
25074: PUSH
25075: LD_VAR 0 3
25079: PPUSH
25080: LD_INT 1
25082: PPUSH
25083: CALL_OW 275
25087: PUSH
25088: LD_VAR 0 4
25092: PUSH
25093: LD_INT 1
25095: ARRAY
25096: GREATEREQUAL
25097: IFFALSE 25123
25099: PUSH
25100: LD_VAR 0 3
25104: PPUSH
25105: LD_INT 2
25107: PPUSH
25108: CALL_OW 275
25112: PUSH
25113: LD_VAR 0 4
25117: PUSH
25118: LD_INT 2
25120: ARRAY
25121: GREATEREQUAL
25122: AND
25123: IFFALSE 25149
25125: PUSH
25126: LD_VAR 0 3
25130: PPUSH
25131: LD_INT 3
25133: PPUSH
25134: CALL_OW 275
25138: PUSH
25139: LD_VAR 0 4
25143: PUSH
25144: LD_INT 3
25146: ARRAY
25147: GREATEREQUAL
25148: AND
25149: ST_TO_ADDR
// end ;
25150: LD_VAR 0 2
25154: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25155: LD_INT 0
25157: PPUSH
25158: PPUSH
25159: PPUSH
// pom := GetBase ( building ) ;
25160: LD_ADDR_VAR 0 4
25164: PUSH
25165: LD_VAR 0 1
25169: PPUSH
25170: CALL_OW 274
25174: ST_TO_ADDR
// if not pom then
25175: LD_VAR 0 4
25179: NOT
25180: IFFALSE 25184
// exit ;
25182: GO 25289
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25184: LD_ADDR_VAR 0 5
25188: PUSH
25189: LD_VAR 0 2
25193: PPUSH
25194: LD_VAR 0 1
25198: PPUSH
25199: CALL_OW 248
25203: PPUSH
25204: CALL_OW 450
25208: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25209: LD_ADDR_VAR 0 3
25213: PUSH
25214: LD_VAR 0 4
25218: PPUSH
25219: LD_INT 1
25221: PPUSH
25222: CALL_OW 275
25226: PUSH
25227: LD_VAR 0 5
25231: PUSH
25232: LD_INT 1
25234: ARRAY
25235: GREATEREQUAL
25236: IFFALSE 25262
25238: PUSH
25239: LD_VAR 0 4
25243: PPUSH
25244: LD_INT 2
25246: PPUSH
25247: CALL_OW 275
25251: PUSH
25252: LD_VAR 0 5
25256: PUSH
25257: LD_INT 2
25259: ARRAY
25260: GREATEREQUAL
25261: AND
25262: IFFALSE 25288
25264: PUSH
25265: LD_VAR 0 4
25269: PPUSH
25270: LD_INT 3
25272: PPUSH
25273: CALL_OW 275
25277: PUSH
25278: LD_VAR 0 5
25282: PUSH
25283: LD_INT 3
25285: ARRAY
25286: GREATEREQUAL
25287: AND
25288: ST_TO_ADDR
// end ;
25289: LD_VAR 0 3
25293: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
25294: LD_INT 0
25296: PPUSH
25297: PPUSH
25298: PPUSH
25299: PPUSH
25300: PPUSH
25301: PPUSH
25302: PPUSH
25303: PPUSH
25304: PPUSH
25305: PPUSH
25306: PPUSH
// result := false ;
25307: LD_ADDR_VAR 0 8
25311: PUSH
25312: LD_INT 0
25314: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
25315: LD_VAR 0 5
25319: NOT
25320: IFTRUE 25329
25322: PUSH
25323: LD_VAR 0 1
25327: NOT
25328: OR
25329: IFTRUE 25338
25331: PUSH
25332: LD_VAR 0 2
25336: NOT
25337: OR
25338: IFTRUE 25347
25340: PUSH
25341: LD_VAR 0 3
25345: NOT
25346: OR
25347: IFFALSE 25351
// exit ;
25349: GO 26177
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
25351: LD_ADDR_VAR 0 14
25355: PUSH
25356: LD_VAR 0 1
25360: PPUSH
25361: LD_VAR 0 2
25365: PPUSH
25366: LD_VAR 0 3
25370: PPUSH
25371: LD_VAR 0 4
25375: PPUSH
25376: LD_VAR 0 5
25380: PUSH
25381: LD_INT 1
25383: ARRAY
25384: PPUSH
25385: CALL_OW 248
25389: PPUSH
25390: LD_INT 0
25392: PPUSH
25393: CALL 27458 0 6
25397: ST_TO_ADDR
// if not hexes then
25398: LD_VAR 0 14
25402: NOT
25403: IFFALSE 25407
// exit ;
25405: GO 26177
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25407: LD_ADDR_VAR 0 17
25411: PUSH
25412: LD_VAR 0 5
25416: PPUSH
25417: LD_INT 22
25419: PUSH
25420: LD_VAR 0 13
25424: PPUSH
25425: CALL_OW 255
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 2
25436: PUSH
25437: LD_INT 30
25439: PUSH
25440: LD_INT 0
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 30
25449: PUSH
25450: LD_INT 1
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: LIST
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PPUSH
25466: CALL_OW 72
25470: ST_TO_ADDR
// for i = 1 to hexes do
25471: LD_ADDR_VAR 0 9
25475: PUSH
25476: DOUBLE
25477: LD_INT 1
25479: DEC
25480: ST_TO_ADDR
25481: LD_VAR 0 14
25485: PUSH
25486: FOR_TO
25487: IFFALSE 26175
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25489: LD_ADDR_VAR 0 13
25493: PUSH
25494: LD_VAR 0 14
25498: PUSH
25499: LD_VAR 0 9
25503: ARRAY
25504: PUSH
25505: LD_INT 1
25507: ARRAY
25508: PPUSH
25509: LD_VAR 0 14
25513: PUSH
25514: LD_VAR 0 9
25518: ARRAY
25519: PUSH
25520: LD_INT 2
25522: ARRAY
25523: PPUSH
25524: CALL_OW 428
25528: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
25529: LD_VAR 0 14
25533: PUSH
25534: LD_VAR 0 9
25538: ARRAY
25539: PUSH
25540: LD_INT 1
25542: ARRAY
25543: PPUSH
25544: LD_VAR 0 14
25548: PUSH
25549: LD_VAR 0 9
25553: ARRAY
25554: PUSH
25555: LD_INT 2
25557: ARRAY
25558: PPUSH
25559: CALL_OW 351
25563: IFTRUE 25602
25565: PUSH
25566: LD_VAR 0 14
25570: PUSH
25571: LD_VAR 0 9
25575: ARRAY
25576: PUSH
25577: LD_INT 1
25579: ARRAY
25580: PPUSH
25581: LD_VAR 0 14
25585: PUSH
25586: LD_VAR 0 9
25590: ARRAY
25591: PUSH
25592: LD_INT 2
25594: ARRAY
25595: PPUSH
25596: CALL_OW 488
25600: NOT
25601: OR
25602: IFTRUE 25619
25604: PUSH
25605: LD_VAR 0 13
25609: PPUSH
25610: CALL_OW 247
25614: PUSH
25615: LD_INT 3
25617: EQUAL
25618: OR
25619: IFFALSE 25625
// exit ;
25621: POP
25622: POP
25623: GO 26177
// if not tmp then
25625: LD_VAR 0 13
25629: NOT
25630: IFFALSE 25634
// continue ;
25632: GO 25486
// result := true ;
25634: LD_ADDR_VAR 0 8
25638: PUSH
25639: LD_INT 1
25641: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
25642: LD_VAR 0 6
25646: IFFALSE 25663
25648: PUSH
25649: LD_VAR 0 13
25653: PPUSH
25654: CALL_OW 247
25658: PUSH
25659: LD_INT 2
25661: EQUAL
25662: AND
25663: IFFALSE 25680
25665: PUSH
25666: LD_VAR 0 13
25670: PPUSH
25671: CALL_OW 263
25675: PUSH
25676: LD_INT 1
25678: EQUAL
25679: AND
25680: IFFALSE 25844
// begin if IsDrivenBy ( tmp ) then
25682: LD_VAR 0 13
25686: PPUSH
25687: CALL_OW 311
25691: IFFALSE 25695
// continue ;
25693: GO 25486
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
25695: LD_VAR 0 6
25699: PPUSH
25700: LD_INT 3
25702: PUSH
25703: LD_INT 60
25705: PUSH
25706: EMPTY
25707: LIST
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 3
25715: PUSH
25716: LD_INT 55
25718: PUSH
25719: EMPTY
25720: LIST
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PPUSH
25730: CALL_OW 72
25734: IFFALSE 25842
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
25736: LD_ADDR_VAR 0 18
25740: PUSH
25741: LD_VAR 0 6
25745: PPUSH
25746: LD_INT 3
25748: PUSH
25749: LD_INT 60
25751: PUSH
25752: EMPTY
25753: LIST
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 3
25761: PUSH
25762: LD_INT 55
25764: PUSH
25765: EMPTY
25766: LIST
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PPUSH
25776: CALL_OW 72
25780: PUSH
25781: LD_INT 1
25783: ARRAY
25784: ST_TO_ADDR
// if IsInUnit ( driver ) then
25785: LD_VAR 0 18
25789: PPUSH
25790: CALL_OW 310
25794: IFFALSE 25805
// ComExit ( driver ) ;
25796: LD_VAR 0 18
25800: PPUSH
25801: CALL 51448 0 1
// AddComEnterUnit ( driver , tmp ) ;
25805: LD_VAR 0 18
25809: PPUSH
25810: LD_VAR 0 13
25814: PPUSH
25815: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
25819: LD_VAR 0 18
25823: PPUSH
25824: LD_VAR 0 7
25828: PPUSH
25829: CALL_OW 173
// AddComExitVehicle ( driver ) ;
25833: LD_VAR 0 18
25837: PPUSH
25838: CALL_OW 181
// end ; continue ;
25842: GO 25486
// end ; if not cleaners or not tmp in cleaners then
25844: LD_VAR 0 6
25848: NOT
25849: IFTRUE 25864
25851: PUSH
25852: LD_VAR 0 13
25856: PUSH
25857: LD_VAR 0 6
25861: IN
25862: NOT
25863: OR
25864: IFFALSE 26173
// begin if dep then
25866: LD_VAR 0 17
25870: IFFALSE 26006
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25872: LD_ADDR_VAR 0 16
25876: PUSH
25877: LD_VAR 0 17
25881: PUSH
25882: LD_INT 1
25884: ARRAY
25885: PPUSH
25886: CALL_OW 250
25890: PPUSH
25891: LD_VAR 0 17
25895: PUSH
25896: LD_INT 1
25898: ARRAY
25899: PPUSH
25900: CALL_OW 254
25904: PPUSH
25905: LD_INT 5
25907: PPUSH
25908: CALL_OW 272
25912: PUSH
25913: LD_VAR 0 17
25917: PUSH
25918: LD_INT 1
25920: ARRAY
25921: PPUSH
25922: CALL_OW 251
25926: PPUSH
25927: LD_VAR 0 17
25931: PUSH
25932: LD_INT 1
25934: ARRAY
25935: PPUSH
25936: CALL_OW 254
25940: PPUSH
25941: LD_INT 5
25943: PPUSH
25944: CALL_OW 273
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25953: LD_VAR 0 16
25957: PUSH
25958: LD_INT 1
25960: ARRAY
25961: PPUSH
25962: LD_VAR 0 16
25966: PUSH
25967: LD_INT 2
25969: ARRAY
25970: PPUSH
25971: CALL_OW 488
25975: IFFALSE 26006
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25977: LD_VAR 0 13
25981: PPUSH
25982: LD_VAR 0 16
25986: PUSH
25987: LD_INT 1
25989: ARRAY
25990: PPUSH
25991: LD_VAR 0 16
25995: PUSH
25996: LD_INT 2
25998: ARRAY
25999: PPUSH
26000: CALL_OW 111
// continue ;
26004: GO 25486
// end ; end ; r := GetDir ( tmp ) ;
26006: LD_ADDR_VAR 0 15
26010: PUSH
26011: LD_VAR 0 13
26015: PPUSH
26016: CALL_OW 254
26020: ST_TO_ADDR
// if r = 5 then
26021: LD_VAR 0 15
26025: PUSH
26026: LD_INT 5
26028: EQUAL
26029: IFFALSE 26039
// r := 0 ;
26031: LD_ADDR_VAR 0 15
26035: PUSH
26036: LD_INT 0
26038: ST_TO_ADDR
// for j = r to 5 do
26039: LD_ADDR_VAR 0 10
26043: PUSH
26044: DOUBLE
26045: LD_VAR 0 15
26049: DEC
26050: ST_TO_ADDR
26051: LD_INT 5
26053: PUSH
26054: FOR_TO
26055: IFFALSE 26171
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
26057: LD_ADDR_VAR 0 11
26061: PUSH
26062: LD_VAR 0 13
26066: PPUSH
26067: CALL_OW 250
26071: PPUSH
26072: LD_VAR 0 10
26076: PPUSH
26077: LD_INT 2
26079: PPUSH
26080: CALL_OW 272
26084: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
26085: LD_ADDR_VAR 0 12
26089: PUSH
26090: LD_VAR 0 13
26094: PPUSH
26095: CALL_OW 251
26099: PPUSH
26100: LD_VAR 0 10
26104: PPUSH
26105: LD_INT 2
26107: PPUSH
26108: CALL_OW 273
26112: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
26113: LD_VAR 0 11
26117: PPUSH
26118: LD_VAR 0 12
26122: PPUSH
26123: CALL_OW 488
26127: IFFALSE 26146
26129: PUSH
26130: LD_VAR 0 11
26134: PPUSH
26135: LD_VAR 0 12
26139: PPUSH
26140: CALL_OW 428
26144: NOT
26145: AND
26146: IFFALSE 26169
// begin ComMoveXY ( tmp , _x , _y ) ;
26148: LD_VAR 0 13
26152: PPUSH
26153: LD_VAR 0 11
26157: PPUSH
26158: LD_VAR 0 12
26162: PPUSH
26163: CALL_OW 111
// break ;
26167: GO 26171
// end ; end ;
26169: GO 26054
26171: POP
26172: POP
// end ; end ;
26173: GO 25486
26175: POP
26176: POP
// end ;
26177: LD_VAR 0 8
26181: RET
// export function BuildingTechInvented ( side , btype ) ; begin
26182: LD_INT 0
26184: PPUSH
// result := true ;
26185: LD_ADDR_VAR 0 3
26189: PUSH
26190: LD_INT 1
26192: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
26193: LD_VAR 0 2
26197: PUSH
26198: LD_INT 24
26200: DOUBLE
26201: EQUAL
26202: IFTRUE 26212
26204: LD_INT 33
26206: DOUBLE
26207: EQUAL
26208: IFTRUE 26212
26210: GO 26237
26212: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
26213: LD_ADDR_VAR 0 3
26217: PUSH
26218: LD_INT 32
26220: PPUSH
26221: LD_VAR 0 1
26225: PPUSH
26226: CALL_OW 321
26230: PUSH
26231: LD_INT 2
26233: EQUAL
26234: ST_TO_ADDR
26235: GO 26553
26237: LD_INT 20
26239: DOUBLE
26240: EQUAL
26241: IFTRUE 26245
26243: GO 26270
26245: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
26246: LD_ADDR_VAR 0 3
26250: PUSH
26251: LD_INT 6
26253: PPUSH
26254: LD_VAR 0 1
26258: PPUSH
26259: CALL_OW 321
26263: PUSH
26264: LD_INT 2
26266: EQUAL
26267: ST_TO_ADDR
26268: GO 26553
26270: LD_INT 22
26272: DOUBLE
26273: EQUAL
26274: IFTRUE 26284
26276: LD_INT 36
26278: DOUBLE
26279: EQUAL
26280: IFTRUE 26284
26282: GO 26309
26284: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
26285: LD_ADDR_VAR 0 3
26289: PUSH
26290: LD_INT 15
26292: PPUSH
26293: LD_VAR 0 1
26297: PPUSH
26298: CALL_OW 321
26302: PUSH
26303: LD_INT 2
26305: EQUAL
26306: ST_TO_ADDR
26307: GO 26553
26309: LD_INT 30
26311: DOUBLE
26312: EQUAL
26313: IFTRUE 26317
26315: GO 26342
26317: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
26318: LD_ADDR_VAR 0 3
26322: PUSH
26323: LD_INT 20
26325: PPUSH
26326: LD_VAR 0 1
26330: PPUSH
26331: CALL_OW 321
26335: PUSH
26336: LD_INT 2
26338: EQUAL
26339: ST_TO_ADDR
26340: GO 26553
26342: LD_INT 28
26344: DOUBLE
26345: EQUAL
26346: IFTRUE 26356
26348: LD_INT 21
26350: DOUBLE
26351: EQUAL
26352: IFTRUE 26356
26354: GO 26381
26356: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
26357: LD_ADDR_VAR 0 3
26361: PUSH
26362: LD_INT 21
26364: PPUSH
26365: LD_VAR 0 1
26369: PPUSH
26370: CALL_OW 321
26374: PUSH
26375: LD_INT 2
26377: EQUAL
26378: ST_TO_ADDR
26379: GO 26553
26381: LD_INT 16
26383: DOUBLE
26384: EQUAL
26385: IFTRUE 26389
26387: GO 26414
26389: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
26390: LD_ADDR_VAR 0 3
26394: PUSH
26395: LD_INT 84
26397: PPUSH
26398: LD_VAR 0 1
26402: PPUSH
26403: CALL_OW 321
26407: PUSH
26408: LD_INT 2
26410: EQUAL
26411: ST_TO_ADDR
26412: GO 26553
26414: LD_INT 19
26416: DOUBLE
26417: EQUAL
26418: IFTRUE 26428
26420: LD_INT 23
26422: DOUBLE
26423: EQUAL
26424: IFTRUE 26428
26426: GO 26453
26428: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
26429: LD_ADDR_VAR 0 3
26433: PUSH
26434: LD_INT 83
26436: PPUSH
26437: LD_VAR 0 1
26441: PPUSH
26442: CALL_OW 321
26446: PUSH
26447: LD_INT 2
26449: EQUAL
26450: ST_TO_ADDR
26451: GO 26553
26453: LD_INT 17
26455: DOUBLE
26456: EQUAL
26457: IFTRUE 26461
26459: GO 26486
26461: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
26462: LD_ADDR_VAR 0 3
26466: PUSH
26467: LD_INT 39
26469: PPUSH
26470: LD_VAR 0 1
26474: PPUSH
26475: CALL_OW 321
26479: PUSH
26480: LD_INT 2
26482: EQUAL
26483: ST_TO_ADDR
26484: GO 26553
26486: LD_INT 18
26488: DOUBLE
26489: EQUAL
26490: IFTRUE 26494
26492: GO 26519
26494: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
26495: LD_ADDR_VAR 0 3
26499: PUSH
26500: LD_INT 40
26502: PPUSH
26503: LD_VAR 0 1
26507: PPUSH
26508: CALL_OW 321
26512: PUSH
26513: LD_INT 2
26515: EQUAL
26516: ST_TO_ADDR
26517: GO 26553
26519: LD_INT 27
26521: DOUBLE
26522: EQUAL
26523: IFTRUE 26527
26525: GO 26552
26527: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
26528: LD_ADDR_VAR 0 3
26532: PUSH
26533: LD_INT 35
26535: PPUSH
26536: LD_VAR 0 1
26540: PPUSH
26541: CALL_OW 321
26545: PUSH
26546: LD_INT 2
26548: EQUAL
26549: ST_TO_ADDR
26550: GO 26553
26552: POP
// end ;
26553: LD_VAR 0 3
26557: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
26558: LD_INT 0
26560: PPUSH
26561: PPUSH
26562: PPUSH
26563: PPUSH
26564: PPUSH
26565: PPUSH
26566: PPUSH
26567: PPUSH
26568: PPUSH
26569: PPUSH
26570: PPUSH
// result := false ;
26571: LD_ADDR_VAR 0 6
26575: PUSH
26576: LD_INT 0
26578: ST_TO_ADDR
// if btype = b_depot then
26579: LD_VAR 0 2
26583: PUSH
26584: LD_INT 0
26586: EQUAL
26587: IFFALSE 26599
// begin result := true ;
26589: LD_ADDR_VAR 0 6
26593: PUSH
26594: LD_INT 1
26596: ST_TO_ADDR
// exit ;
26597: GO 27453
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
26599: LD_VAR 0 1
26603: NOT
26604: IFTRUE 26629
26606: PUSH
26607: LD_VAR 0 1
26611: PPUSH
26612: CALL_OW 266
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: LD_INT 1
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: IN
26627: NOT
26628: OR
26629: IFTRUE 26638
26631: PUSH
26632: LD_VAR 0 2
26636: NOT
26637: OR
26638: IFTRUE 26674
26640: PUSH
26641: LD_VAR 0 5
26645: PUSH
26646: LD_INT 0
26648: PUSH
26649: LD_INT 1
26651: PUSH
26652: LD_INT 2
26654: PUSH
26655: LD_INT 3
26657: PUSH
26658: LD_INT 4
26660: PUSH
26661: LD_INT 5
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: IN
26672: NOT
26673: OR
26674: IFTRUE 26693
26676: PUSH
26677: LD_VAR 0 3
26681: PPUSH
26682: LD_VAR 0 4
26686: PPUSH
26687: CALL_OW 488
26691: NOT
26692: OR
26693: IFFALSE 26697
// exit ;
26695: GO 27453
// side := GetSide ( depot ) ;
26697: LD_ADDR_VAR 0 9
26701: PUSH
26702: LD_VAR 0 1
26706: PPUSH
26707: CALL_OW 255
26711: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
26712: LD_VAR 0 9
26716: PPUSH
26717: LD_VAR 0 2
26721: PPUSH
26722: CALL 26182 0 2
26726: NOT
26727: IFFALSE 26731
// exit ;
26729: GO 27453
// pom := GetBase ( depot ) ;
26731: LD_ADDR_VAR 0 10
26735: PUSH
26736: LD_VAR 0 1
26740: PPUSH
26741: CALL_OW 274
26745: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
26746: LD_ADDR_VAR 0 11
26750: PUSH
26751: LD_VAR 0 2
26755: PPUSH
26756: LD_VAR 0 1
26760: PPUSH
26761: CALL_OW 248
26765: PPUSH
26766: CALL_OW 450
26770: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26771: LD_VAR 0 10
26775: PPUSH
26776: LD_INT 1
26778: PPUSH
26779: CALL_OW 275
26783: PUSH
26784: LD_VAR 0 11
26788: PUSH
26789: LD_INT 1
26791: ARRAY
26792: GREATEREQUAL
26793: IFFALSE 26819
26795: PUSH
26796: LD_VAR 0 10
26800: PPUSH
26801: LD_INT 2
26803: PPUSH
26804: CALL_OW 275
26808: PUSH
26809: LD_VAR 0 11
26813: PUSH
26814: LD_INT 2
26816: ARRAY
26817: GREATEREQUAL
26818: AND
26819: IFFALSE 26845
26821: PUSH
26822: LD_VAR 0 10
26826: PPUSH
26827: LD_INT 3
26829: PPUSH
26830: CALL_OW 275
26834: PUSH
26835: LD_VAR 0 11
26839: PUSH
26840: LD_INT 3
26842: ARRAY
26843: GREATEREQUAL
26844: AND
26845: NOT
26846: IFFALSE 26850
// exit ;
26848: GO 27453
// if GetBType ( depot ) = b_depot then
26850: LD_VAR 0 1
26854: PPUSH
26855: CALL_OW 266
26859: PUSH
26860: LD_INT 0
26862: EQUAL
26863: IFFALSE 26875
// dist := 28 else
26865: LD_ADDR_VAR 0 14
26869: PUSH
26870: LD_INT 28
26872: ST_TO_ADDR
26873: GO 26883
// dist := 36 ;
26875: LD_ADDR_VAR 0 14
26879: PUSH
26880: LD_INT 36
26882: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26883: LD_VAR 0 1
26887: PPUSH
26888: LD_VAR 0 3
26892: PPUSH
26893: LD_VAR 0 4
26897: PPUSH
26898: CALL_OW 297
26902: PUSH
26903: LD_VAR 0 14
26907: GREATER
26908: IFFALSE 26912
// exit ;
26910: GO 27453
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26912: LD_ADDR_VAR 0 12
26916: PUSH
26917: LD_VAR 0 2
26921: PPUSH
26922: LD_VAR 0 3
26926: PPUSH
26927: LD_VAR 0 4
26931: PPUSH
26932: LD_VAR 0 5
26936: PPUSH
26937: LD_VAR 0 1
26941: PPUSH
26942: CALL_OW 248
26946: PPUSH
26947: LD_INT 0
26949: PPUSH
26950: CALL 27458 0 6
26954: ST_TO_ADDR
// if not hexes then
26955: LD_VAR 0 12
26959: NOT
26960: IFFALSE 26964
// exit ;
26962: GO 27453
// hex := GetHexInfo ( x , y ) ;
26964: LD_ADDR_VAR 0 15
26968: PUSH
26969: LD_VAR 0 3
26973: PPUSH
26974: LD_VAR 0 4
26978: PPUSH
26979: CALL_OW 546
26983: ST_TO_ADDR
// if hex [ 1 ] then
26984: LD_VAR 0 15
26988: PUSH
26989: LD_INT 1
26991: ARRAY
26992: IFFALSE 26996
// exit ;
26994: GO 27453
// height := hex [ 2 ] ;
26996: LD_ADDR_VAR 0 13
27000: PUSH
27001: LD_VAR 0 15
27005: PUSH
27006: LD_INT 2
27008: ARRAY
27009: ST_TO_ADDR
// for i = 1 to hexes do
27010: LD_ADDR_VAR 0 7
27014: PUSH
27015: DOUBLE
27016: LD_INT 1
27018: DEC
27019: ST_TO_ADDR
27020: LD_VAR 0 12
27024: PUSH
27025: FOR_TO
27026: IFFALSE 27370
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
27028: LD_VAR 0 12
27032: PUSH
27033: LD_VAR 0 7
27037: ARRAY
27038: PUSH
27039: LD_INT 1
27041: ARRAY
27042: PPUSH
27043: LD_VAR 0 12
27047: PUSH
27048: LD_VAR 0 7
27052: ARRAY
27053: PUSH
27054: LD_INT 2
27056: ARRAY
27057: PPUSH
27058: CALL_OW 488
27062: NOT
27063: IFTRUE 27105
27065: PUSH
27066: LD_VAR 0 12
27070: PUSH
27071: LD_VAR 0 7
27075: ARRAY
27076: PUSH
27077: LD_INT 1
27079: ARRAY
27080: PPUSH
27081: LD_VAR 0 12
27085: PUSH
27086: LD_VAR 0 7
27090: ARRAY
27091: PUSH
27092: LD_INT 2
27094: ARRAY
27095: PPUSH
27096: CALL_OW 428
27100: PUSH
27101: LD_INT 0
27103: GREATER
27104: OR
27105: IFTRUE 27143
27107: PUSH
27108: LD_VAR 0 12
27112: PUSH
27113: LD_VAR 0 7
27117: ARRAY
27118: PUSH
27119: LD_INT 1
27121: ARRAY
27122: PPUSH
27123: LD_VAR 0 12
27127: PUSH
27128: LD_VAR 0 7
27132: ARRAY
27133: PUSH
27134: LD_INT 2
27136: ARRAY
27137: PPUSH
27138: CALL_OW 351
27142: OR
27143: IFFALSE 27149
// exit ;
27145: POP
27146: POP
27147: GO 27453
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27149: LD_ADDR_VAR 0 8
27153: PUSH
27154: LD_VAR 0 12
27158: PUSH
27159: LD_VAR 0 7
27163: ARRAY
27164: PUSH
27165: LD_INT 1
27167: ARRAY
27168: PPUSH
27169: LD_VAR 0 12
27173: PUSH
27174: LD_VAR 0 7
27178: ARRAY
27179: PUSH
27180: LD_INT 2
27182: ARRAY
27183: PPUSH
27184: CALL_OW 546
27188: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
27189: LD_VAR 0 8
27193: PUSH
27194: LD_INT 1
27196: ARRAY
27197: IFTRUE 27219
27199: PUSH
27200: LD_VAR 0 8
27204: PUSH
27205: LD_INT 2
27207: ARRAY
27208: PUSH
27209: LD_VAR 0 13
27213: PUSH
27214: LD_INT 2
27216: PLUS
27217: GREATER
27218: OR
27219: IFTRUE 27241
27221: PUSH
27222: LD_VAR 0 8
27226: PUSH
27227: LD_INT 2
27229: ARRAY
27230: PUSH
27231: LD_VAR 0 13
27235: PUSH
27236: LD_INT 2
27238: MINUS
27239: LESS
27240: OR
27241: IFTRUE 27309
27243: PUSH
27244: LD_VAR 0 8
27248: PUSH
27249: LD_INT 3
27251: ARRAY
27252: PUSH
27253: LD_INT 0
27255: PUSH
27256: LD_INT 8
27258: PUSH
27259: LD_INT 9
27261: PUSH
27262: LD_INT 10
27264: PUSH
27265: LD_INT 11
27267: PUSH
27268: LD_INT 12
27270: PUSH
27271: LD_INT 13
27273: PUSH
27274: LD_INT 16
27276: PUSH
27277: LD_INT 17
27279: PUSH
27280: LD_INT 18
27282: PUSH
27283: LD_INT 19
27285: PUSH
27286: LD_INT 20
27288: PUSH
27289: LD_INT 21
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: IN
27307: NOT
27308: OR
27309: IFTRUE 27322
27311: PUSH
27312: LD_VAR 0 8
27316: PUSH
27317: LD_INT 5
27319: ARRAY
27320: NOT
27321: OR
27322: IFTRUE 27362
27324: PUSH
27325: LD_VAR 0 8
27329: PUSH
27330: LD_INT 6
27332: ARRAY
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: LD_INT 2
27339: PUSH
27340: LD_INT 7
27342: PUSH
27343: LD_INT 9
27345: PUSH
27346: LD_INT 10
27348: PUSH
27349: LD_INT 11
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: IN
27360: NOT
27361: OR
27362: IFFALSE 27368
// exit ;
27364: POP
27365: POP
27366: GO 27453
// end ;
27368: GO 27025
27370: POP
27371: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
27372: LD_VAR 0 9
27376: PPUSH
27377: LD_VAR 0 3
27381: PPUSH
27382: LD_VAR 0 4
27386: PPUSH
27387: LD_INT 20
27389: PPUSH
27390: CALL 19272 0 4
27394: PUSH
27395: LD_INT 4
27397: ARRAY
27398: IFFALSE 27402
// exit ;
27400: GO 27453
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
27402: LD_VAR 0 2
27406: PUSH
27407: LD_INT 29
27409: PUSH
27410: LD_INT 30
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: IN
27417: IFFALSE 27441
27419: PUSH
27420: LD_VAR 0 3
27424: PPUSH
27425: LD_VAR 0 4
27429: PPUSH
27430: LD_VAR 0 9
27434: PPUSH
27435: CALL_OW 440
27439: NOT
27440: AND
27441: IFFALSE 27445
// exit ;
27443: GO 27453
// result := true ;
27445: LD_ADDR_VAR 0 6
27449: PUSH
27450: LD_INT 1
27452: ST_TO_ADDR
// end ;
27453: LD_VAR 0 6
27457: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
27458: LD_INT 0
27460: PPUSH
27461: PPUSH
27462: PPUSH
27463: PPUSH
27464: PPUSH
27465: PPUSH
27466: PPUSH
27467: PPUSH
27468: PPUSH
27469: PPUSH
27470: PPUSH
27471: PPUSH
27472: PPUSH
27473: PPUSH
27474: PPUSH
27475: PPUSH
27476: PPUSH
27477: PPUSH
27478: PPUSH
27479: PPUSH
27480: PPUSH
27481: PPUSH
27482: PPUSH
27483: PPUSH
27484: PPUSH
27485: PPUSH
27486: PPUSH
27487: PPUSH
27488: PPUSH
27489: PPUSH
27490: PPUSH
27491: PPUSH
27492: PPUSH
27493: PPUSH
27494: PPUSH
27495: PPUSH
27496: PPUSH
27497: PPUSH
27498: PPUSH
27499: PPUSH
27500: PPUSH
27501: PPUSH
27502: PPUSH
27503: PPUSH
27504: PPUSH
27505: PPUSH
27506: PPUSH
27507: PPUSH
27508: PPUSH
27509: PPUSH
27510: PPUSH
27511: PPUSH
27512: PPUSH
27513: PPUSH
27514: PPUSH
27515: PPUSH
27516: PPUSH
27517: PPUSH
// result = [ ] ;
27518: LD_ADDR_VAR 0 7
27522: PUSH
27523: EMPTY
27524: ST_TO_ADDR
// temp_list = [ ] ;
27525: LD_ADDR_VAR 0 9
27529: PUSH
27530: EMPTY
27531: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
27532: LD_VAR 0 4
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: LD_INT 1
27542: PUSH
27543: LD_INT 2
27545: PUSH
27546: LD_INT 3
27548: PUSH
27549: LD_INT 4
27551: PUSH
27552: LD_INT 5
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: IN
27563: NOT
27564: IFTRUE 27607
27566: PUSH
27567: LD_VAR 0 1
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: IN
27582: IFFALSE 27606
27584: PUSH
27585: LD_VAR 0 5
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: LD_INT 2
27595: PUSH
27596: LD_INT 3
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: LIST
27603: IN
27604: NOT
27605: AND
27606: OR
27607: IFFALSE 27611
// exit ;
27609: GO 46010
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
27611: LD_VAR 0 1
27615: PUSH
27616: LD_INT 6
27618: PUSH
27619: LD_INT 7
27621: PUSH
27622: LD_INT 8
27624: PUSH
27625: LD_INT 13
27627: PUSH
27628: LD_INT 12
27630: PUSH
27631: LD_INT 15
27633: PUSH
27634: LD_INT 11
27636: PUSH
27637: LD_INT 14
27639: PUSH
27640: LD_INT 10
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: IN
27654: IFFALSE 27664
// btype = b_lab ;
27656: LD_ADDR_VAR 0 1
27660: PUSH
27661: LD_INT 6
27663: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
27664: LD_VAR 0 6
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: LD_INT 2
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: LIST
27682: IN
27683: NOT
27684: IFTRUE 27752
27686: PUSH
27687: LD_VAR 0 1
27691: PUSH
27692: LD_INT 0
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: LD_INT 2
27700: PUSH
27701: LD_INT 3
27703: PUSH
27704: LD_INT 6
27706: PUSH
27707: LD_INT 36
27709: PUSH
27710: LD_INT 4
27712: PUSH
27713: LD_INT 5
27715: PUSH
27716: LD_INT 31
27718: PUSH
27719: LD_INT 32
27721: PUSH
27722: LD_INT 33
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: IN
27738: NOT
27739: IFFALSE 27751
27741: PUSH
27742: LD_VAR 0 6
27746: PUSH
27747: LD_INT 1
27749: EQUAL
27750: AND
27751: OR
27752: IFTRUE 27784
27754: PUSH
27755: LD_VAR 0 1
27759: PUSH
27760: LD_INT 2
27762: PUSH
27763: LD_INT 3
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: IN
27770: NOT
27771: IFFALSE 27783
27773: PUSH
27774: LD_VAR 0 6
27778: PUSH
27779: LD_INT 2
27781: EQUAL
27782: AND
27783: OR
27784: IFFALSE 27794
// mode = 0 ;
27786: LD_ADDR_VAR 0 6
27790: PUSH
27791: LD_INT 0
27793: ST_TO_ADDR
// case mode of 0 :
27794: LD_VAR 0 6
27798: PUSH
27799: LD_INT 0
27801: DOUBLE
27802: EQUAL
27803: IFTRUE 27807
27805: GO 39260
27807: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27808: LD_ADDR_VAR 0 11
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: LD_INT 0
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: LD_INT 1
27828: NEG
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 1
27836: PUSH
27837: LD_INT 0
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: LD_INT 1
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: LD_INT 1
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 1
27866: NEG
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 1
27877: NEG
27878: PUSH
27879: LD_INT 1
27881: NEG
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 1
27889: NEG
27890: PUSH
27891: LD_INT 2
27893: NEG
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 0
27901: PUSH
27902: LD_INT 2
27904: NEG
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 1
27912: PUSH
27913: LD_INT 1
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: PUSH
27924: LD_INT 2
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: LD_INT 2
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: LD_INT 1
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 1
27954: PUSH
27955: LD_INT 3
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: LD_INT 3
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 1
27974: NEG
27975: PUSH
27976: LD_INT 2
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28001: LD_ADDR_VAR 0 12
28005: PUSH
28006: LD_INT 0
28008: PUSH
28009: LD_INT 0
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 0
28018: PUSH
28019: LD_INT 1
28021: NEG
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 1
28029: PUSH
28030: LD_INT 0
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 0
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 1
28059: NEG
28060: PUSH
28061: LD_INT 0
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 1
28070: NEG
28071: PUSH
28072: LD_INT 1
28074: NEG
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: LD_INT 1
28085: NEG
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 2
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 2
28103: PUSH
28104: LD_INT 1
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 2
28124: NEG
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 2
28135: NEG
28136: PUSH
28137: LD_INT 1
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 2
28147: NEG
28148: PUSH
28149: LD_INT 1
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 3
28158: NEG
28159: PUSH
28160: LD_INT 0
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 3
28169: NEG
28170: PUSH
28171: LD_INT 1
28173: NEG
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28197: LD_ADDR_VAR 0 13
28201: PUSH
28202: LD_INT 0
28204: PUSH
28205: LD_INT 0
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: LD_INT 1
28217: NEG
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 1
28225: PUSH
28226: LD_INT 0
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 1
28235: PUSH
28236: LD_INT 1
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 0
28245: PUSH
28246: LD_INT 1
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: LD_INT 0
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 1
28266: NEG
28267: PUSH
28268: LD_INT 1
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 1
28278: NEG
28279: PUSH
28280: LD_INT 2
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 2
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 2
28300: PUSH
28301: LD_INT 2
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 2
28320: NEG
28321: PUSH
28322: LD_INT 1
28324: NEG
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 2
28332: NEG
28333: PUSH
28334: LD_INT 2
28336: NEG
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 2
28344: NEG
28345: PUSH
28346: LD_INT 3
28348: NEG
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 3
28356: NEG
28357: PUSH
28358: LD_INT 2
28360: NEG
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 3
28368: NEG
28369: PUSH
28370: LD_INT 3
28372: NEG
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28396: LD_ADDR_VAR 0 14
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: LD_INT 0
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 0
28413: PUSH
28414: LD_INT 1
28416: NEG
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 1
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 1
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 1
28454: NEG
28455: PUSH
28456: LD_INT 0
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PUSH
28479: LD_INT 2
28481: NEG
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 0
28489: PUSH
28490: LD_INT 2
28492: NEG
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 1
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 1
28511: PUSH
28512: LD_INT 2
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: LD_INT 2
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 1
28531: NEG
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: NEG
28543: PUSH
28544: LD_INT 3
28546: NEG
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 0
28554: PUSH
28555: LD_INT 3
28557: NEG
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: LD_INT 2
28568: NEG
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28592: LD_ADDR_VAR 0 15
28596: PUSH
28597: LD_INT 0
28599: PUSH
28600: LD_INT 0
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 0
28609: PUSH
28610: LD_INT 1
28612: NEG
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 1
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 0
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 1
28650: NEG
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 1
28661: NEG
28662: PUSH
28663: LD_INT 1
28665: NEG
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: LD_INT 1
28676: NEG
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 2
28684: PUSH
28685: LD_INT 0
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 2
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: LD_INT 1
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 2
28715: NEG
28716: PUSH
28717: LD_INT 0
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 2
28726: NEG
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 2
28738: PUSH
28739: LD_INT 1
28741: NEG
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 3
28749: PUSH
28750: LD_INT 0
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 3
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28785: LD_ADDR_VAR 0 16
28789: PUSH
28790: LD_INT 0
28792: PUSH
28793: LD_INT 0
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 0
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 1
28813: PUSH
28814: LD_INT 0
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 1
28823: PUSH
28824: LD_INT 1
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 0
28833: PUSH
28834: LD_INT 1
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: LD_INT 0
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 1
28854: NEG
28855: PUSH
28856: LD_INT 1
28858: NEG
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 1
28866: NEG
28867: PUSH
28868: LD_INT 2
28870: NEG
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 2
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 2
28888: PUSH
28889: LD_INT 2
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: LD_INT 2
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 2
28908: NEG
28909: PUSH
28910: LD_INT 1
28912: NEG
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 2
28920: NEG
28921: PUSH
28922: LD_INT 2
28924: NEG
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 3
28932: PUSH
28933: LD_INT 2
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 3
28942: PUSH
28943: LD_INT 3
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 2
28952: PUSH
28953: LD_INT 3
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28978: LD_ADDR_VAR 0 17
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: LD_INT 0
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 0
28995: PUSH
28996: LD_INT 1
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 1
29006: PUSH
29007: LD_INT 0
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 1
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 0
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 1
29036: NEG
29037: PUSH
29038: LD_INT 0
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 1
29047: NEG
29048: PUSH
29049: LD_INT 1
29051: NEG
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: LD_INT 2
29063: NEG
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 0
29071: PUSH
29072: LD_INT 2
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 1
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 2
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 2
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 2
29113: PUSH
29114: LD_INT 2
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 1
29123: PUSH
29124: LD_INT 2
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 0
29133: PUSH
29134: LD_INT 2
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 1
29143: NEG
29144: PUSH
29145: LD_INT 1
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 2
29154: NEG
29155: PUSH
29156: LD_INT 0
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 2
29165: NEG
29166: PUSH
29167: LD_INT 1
29169: NEG
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 2
29177: NEG
29178: PUSH
29179: LD_INT 2
29181: NEG
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29208: LD_ADDR_VAR 0 18
29212: PUSH
29213: LD_INT 0
29215: PUSH
29216: LD_INT 0
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: LD_INT 1
29228: NEG
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 1
29236: PUSH
29237: LD_INT 0
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 1
29246: PUSH
29247: LD_INT 1
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 1
29266: NEG
29267: PUSH
29268: LD_INT 0
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 1
29277: NEG
29278: PUSH
29279: LD_INT 1
29281: NEG
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 1
29289: NEG
29290: PUSH
29291: LD_INT 2
29293: NEG
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 0
29301: PUSH
29302: LD_INT 2
29304: NEG
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 1
29312: PUSH
29313: LD_INT 1
29315: NEG
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 2
29323: PUSH
29324: LD_INT 0
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 2
29333: PUSH
29334: LD_INT 1
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 2
29343: PUSH
29344: LD_INT 2
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 1
29353: PUSH
29354: LD_INT 2
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 0
29363: PUSH
29364: LD_INT 2
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 1
29373: NEG
29374: PUSH
29375: LD_INT 1
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 2
29384: NEG
29385: PUSH
29386: LD_INT 0
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 2
29395: NEG
29396: PUSH
29397: LD_INT 1
29399: NEG
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 2
29407: NEG
29408: PUSH
29409: LD_INT 2
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29438: LD_ADDR_VAR 0 19
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: LD_INT 0
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 0
29455: PUSH
29456: LD_INT 1
29458: NEG
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 1
29466: PUSH
29467: LD_INT 0
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 1
29476: PUSH
29477: LD_INT 1
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: LD_INT 1
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 1
29496: NEG
29497: PUSH
29498: LD_INT 0
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 1
29507: NEG
29508: PUSH
29509: LD_INT 1
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: NEG
29520: PUSH
29521: LD_INT 2
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: LD_INT 2
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 1
29542: PUSH
29543: LD_INT 1
29545: NEG
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 2
29553: PUSH
29554: LD_INT 0
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 2
29563: PUSH
29564: LD_INT 1
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 2
29573: PUSH
29574: LD_INT 2
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: LD_INT 2
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 0
29593: PUSH
29594: LD_INT 2
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 1
29603: NEG
29604: PUSH
29605: LD_INT 1
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 2
29614: NEG
29615: PUSH
29616: LD_INT 0
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 2
29625: NEG
29626: PUSH
29627: LD_INT 1
29629: NEG
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 2
29637: NEG
29638: PUSH
29639: LD_INT 2
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29668: LD_ADDR_VAR 0 20
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 0
29685: PUSH
29686: LD_INT 1
29688: NEG
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 1
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 0
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 1
29726: NEG
29727: PUSH
29728: LD_INT 0
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 1
29737: NEG
29738: PUSH
29739: LD_INT 1
29741: NEG
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 1
29749: NEG
29750: PUSH
29751: LD_INT 2
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 0
29761: PUSH
29762: LD_INT 2
29764: NEG
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 1
29772: PUSH
29773: LD_INT 1
29775: NEG
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 2
29783: PUSH
29784: LD_INT 0
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 2
29793: PUSH
29794: LD_INT 1
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 0
29823: PUSH
29824: LD_INT 2
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: NEG
29834: PUSH
29835: LD_INT 1
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 2
29844: NEG
29845: PUSH
29846: LD_INT 0
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 2
29855: NEG
29856: PUSH
29857: LD_INT 1
29859: NEG
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 2
29867: NEG
29868: PUSH
29869: LD_INT 2
29871: NEG
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29898: LD_ADDR_VAR 0 21
29902: PUSH
29903: LD_INT 0
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 0
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 1
29926: PUSH
29927: LD_INT 0
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 1
29956: NEG
29957: PUSH
29958: LD_INT 0
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 1
29967: NEG
29968: PUSH
29969: LD_INT 1
29971: NEG
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 1
29979: NEG
29980: PUSH
29981: LD_INT 2
29983: NEG
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 0
29991: PUSH
29992: LD_INT 2
29994: NEG
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 1
30002: PUSH
30003: LD_INT 1
30005: NEG
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 2
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 2
30023: PUSH
30024: LD_INT 1
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 2
30033: PUSH
30034: LD_INT 2
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: LD_INT 2
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 0
30053: PUSH
30054: LD_INT 2
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 1
30063: NEG
30064: PUSH
30065: LD_INT 1
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 2
30074: NEG
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 2
30085: NEG
30086: PUSH
30087: LD_INT 1
30089: NEG
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 2
30097: NEG
30098: PUSH
30099: LD_INT 2
30101: NEG
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30128: LD_ADDR_VAR 0 22
30132: PUSH
30133: LD_INT 0
30135: PUSH
30136: LD_INT 0
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 0
30145: PUSH
30146: LD_INT 1
30148: NEG
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 1
30156: PUSH
30157: LD_INT 0
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: LD_INT 1
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 0
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 1
30186: NEG
30187: PUSH
30188: LD_INT 0
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 1
30197: NEG
30198: PUSH
30199: LD_INT 1
30201: NEG
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 1
30209: NEG
30210: PUSH
30211: LD_INT 2
30213: NEG
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 0
30221: PUSH
30222: LD_INT 2
30224: NEG
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 1
30232: PUSH
30233: LD_INT 1
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 2
30243: PUSH
30244: LD_INT 0
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 2
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 2
30263: PUSH
30264: LD_INT 2
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: LD_INT 2
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: LD_INT 2
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 1
30293: NEG
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 2
30304: NEG
30305: PUSH
30306: LD_INT 0
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 2
30315: NEG
30316: PUSH
30317: LD_INT 1
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 2
30327: NEG
30328: PUSH
30329: LD_INT 2
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30358: LD_ADDR_VAR 0 23
30362: PUSH
30363: LD_INT 0
30365: PUSH
30366: LD_INT 0
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 0
30375: PUSH
30376: LD_INT 1
30378: NEG
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 1
30386: PUSH
30387: LD_INT 0
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: LD_INT 1
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 0
30406: PUSH
30407: LD_INT 1
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 1
30416: NEG
30417: PUSH
30418: LD_INT 0
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 1
30427: NEG
30428: PUSH
30429: LD_INT 1
30431: NEG
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 1
30439: NEG
30440: PUSH
30441: LD_INT 2
30443: NEG
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 0
30451: PUSH
30452: LD_INT 2
30454: NEG
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 1
30462: PUSH
30463: LD_INT 1
30465: NEG
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 2
30473: PUSH
30474: LD_INT 0
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 2
30483: PUSH
30484: LD_INT 1
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 2
30493: PUSH
30494: LD_INT 2
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 1
30503: PUSH
30504: LD_INT 2
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 0
30513: PUSH
30514: LD_INT 2
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 1
30523: NEG
30524: PUSH
30525: LD_INT 1
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 2
30534: NEG
30535: PUSH
30536: LD_INT 0
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 2
30545: NEG
30546: PUSH
30547: LD_INT 1
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 2
30557: NEG
30558: PUSH
30559: LD_INT 2
30561: NEG
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 2
30569: NEG
30570: PUSH
30571: LD_INT 3
30573: NEG
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 1
30581: NEG
30582: PUSH
30583: LD_INT 3
30585: NEG
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 1
30593: PUSH
30594: LD_INT 2
30596: NEG
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 2
30604: PUSH
30605: LD_INT 1
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
30638: LD_ADDR_VAR 0 24
30642: PUSH
30643: LD_INT 0
30645: PUSH
30646: LD_INT 0
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 0
30655: PUSH
30656: LD_INT 1
30658: NEG
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 1
30666: PUSH
30667: LD_INT 0
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 1
30676: PUSH
30677: LD_INT 1
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 0
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 1
30696: NEG
30697: PUSH
30698: LD_INT 0
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 1
30707: NEG
30708: PUSH
30709: LD_INT 1
30711: NEG
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: LD_INT 2
30723: NEG
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: LD_INT 2
30734: NEG
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: LD_INT 1
30745: NEG
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 2
30753: PUSH
30754: LD_INT 0
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 2
30763: PUSH
30764: LD_INT 1
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 2
30773: PUSH
30774: LD_INT 2
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 1
30783: PUSH
30784: LD_INT 2
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: LD_INT 2
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: LD_INT 1
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 2
30814: NEG
30815: PUSH
30816: LD_INT 0
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 2
30825: NEG
30826: PUSH
30827: LD_INT 1
30829: NEG
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 2
30837: NEG
30838: PUSH
30839: LD_INT 2
30841: NEG
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 1
30849: PUSH
30850: LD_INT 2
30852: NEG
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 2
30860: PUSH
30861: LD_INT 1
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 3
30871: PUSH
30872: LD_INT 1
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 3
30881: PUSH
30882: LD_INT 2
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30914: LD_ADDR_VAR 0 25
30918: PUSH
30919: LD_INT 0
30921: PUSH
30922: LD_INT 0
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 0
30931: PUSH
30932: LD_INT 1
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: LD_INT 0
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 1
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 0
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 1
30972: NEG
30973: PUSH
30974: LD_INT 0
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 1
30983: NEG
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 1
30995: NEG
30996: PUSH
30997: LD_INT 2
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 0
31007: PUSH
31008: LD_INT 2
31010: NEG
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 1
31018: PUSH
31019: LD_INT 1
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 2
31029: PUSH
31030: LD_INT 0
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 2
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 2
31049: PUSH
31050: LD_INT 2
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: LD_INT 2
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: LD_INT 2
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 1
31079: NEG
31080: PUSH
31081: LD_INT 1
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 2
31090: NEG
31091: PUSH
31092: LD_INT 0
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 2
31101: NEG
31102: PUSH
31103: LD_INT 1
31105: NEG
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 2
31113: NEG
31114: PUSH
31115: LD_INT 2
31117: NEG
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: LD_INT 1
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 2
31145: PUSH
31146: LD_INT 3
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 1
31155: PUSH
31156: LD_INT 3
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31188: LD_ADDR_VAR 0 26
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: LD_INT 0
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 0
31205: PUSH
31206: LD_INT 1
31208: NEG
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 1
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 1
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 1
31246: NEG
31247: PUSH
31248: LD_INT 0
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 1
31257: NEG
31258: PUSH
31259: LD_INT 1
31261: NEG
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 1
31269: NEG
31270: PUSH
31271: LD_INT 2
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 0
31281: PUSH
31282: LD_INT 2
31284: NEG
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: LD_INT 1
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 2
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 2
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 2
31323: PUSH
31324: LD_INT 2
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: LD_INT 2
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 0
31343: PUSH
31344: LD_INT 2
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 1
31353: NEG
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 2
31364: NEG
31365: PUSH
31366: LD_INT 0
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 2
31375: NEG
31376: PUSH
31377: LD_INT 1
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 2
31387: NEG
31388: PUSH
31389: LD_INT 2
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: LD_INT 3
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: LD_INT 3
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: LD_INT 2
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 2
31430: NEG
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31464: LD_ADDR_VAR 0 27
31468: PUSH
31469: LD_INT 0
31471: PUSH
31472: LD_INT 0
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 0
31481: PUSH
31482: LD_INT 1
31484: NEG
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 0
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: NEG
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 1
31533: NEG
31534: PUSH
31535: LD_INT 1
31537: NEG
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 1
31545: NEG
31546: PUSH
31547: LD_INT 2
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 0
31557: PUSH
31558: LD_INT 2
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 1
31568: PUSH
31569: LD_INT 1
31571: NEG
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 2
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 2
31589: PUSH
31590: LD_INT 1
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 2
31599: PUSH
31600: LD_INT 2
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: LD_INT 2
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: LD_INT 2
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 1
31629: NEG
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 2
31640: NEG
31641: PUSH
31642: LD_INT 0
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 2
31651: NEG
31652: PUSH
31653: LD_INT 1
31655: NEG
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: LD_INT 2
31667: NEG
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: LD_INT 2
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 2
31686: NEG
31687: PUSH
31688: LD_INT 1
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 3
31697: NEG
31698: PUSH
31699: LD_INT 1
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 3
31709: NEG
31710: PUSH
31711: LD_INT 2
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31744: LD_ADDR_VAR 0 28
31748: PUSH
31749: LD_INT 0
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: LD_INT 0
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: LD_INT 1
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 1
31802: NEG
31803: PUSH
31804: LD_INT 0
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 1
31813: NEG
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 1
31825: NEG
31826: PUSH
31827: LD_INT 2
31829: NEG
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 0
31837: PUSH
31838: LD_INT 2
31840: NEG
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: LD_INT 1
31851: NEG
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 2
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 2
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 2
31879: PUSH
31880: LD_INT 2
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: LD_INT 2
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 0
31899: PUSH
31900: LD_INT 2
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 1
31909: NEG
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 2
31920: NEG
31921: PUSH
31922: LD_INT 0
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 2
31931: NEG
31932: PUSH
31933: LD_INT 1
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 2
31943: NEG
31944: PUSH
31945: LD_INT 2
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 2
31955: NEG
31956: PUSH
31957: LD_INT 3
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 1
31967: NEG
31968: PUSH
31969: LD_INT 3
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 3
31979: NEG
31980: PUSH
31981: LD_INT 1
31983: NEG
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 3
31991: NEG
31992: PUSH
31993: LD_INT 2
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32026: LD_ADDR_VAR 0 29
32030: PUSH
32031: LD_INT 0
32033: PUSH
32034: LD_INT 0
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 0
32043: PUSH
32044: LD_INT 1
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 1
32054: PUSH
32055: LD_INT 0
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 1
32064: PUSH
32065: LD_INT 1
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: LD_INT 1
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 1
32084: NEG
32085: PUSH
32086: LD_INT 0
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 1
32095: NEG
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 1
32107: NEG
32108: PUSH
32109: LD_INT 2
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: LD_INT 2
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: PUSH
32131: LD_INT 1
32133: NEG
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 2
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 2
32151: PUSH
32152: LD_INT 1
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 1
32161: PUSH
32162: LD_INT 2
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 0
32171: PUSH
32172: LD_INT 2
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 1
32181: NEG
32182: PUSH
32183: LD_INT 1
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 2
32192: NEG
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 2
32204: NEG
32205: PUSH
32206: LD_INT 2
32208: NEG
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 2
32216: NEG
32217: PUSH
32218: LD_INT 3
32220: NEG
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 2
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 3
32239: PUSH
32240: LD_INT 1
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: LD_INT 3
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: LD_INT 2
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 3
32270: NEG
32271: PUSH
32272: LD_INT 2
32274: NEG
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32305: LD_ADDR_VAR 0 30
32309: PUSH
32310: LD_INT 0
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 0
32322: PUSH
32323: LD_INT 1
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 1
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: LD_INT 1
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 0
32353: PUSH
32354: LD_INT 1
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 1
32363: NEG
32364: PUSH
32365: LD_INT 0
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 1
32374: NEG
32375: PUSH
32376: LD_INT 1
32378: NEG
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: LD_INT 2
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: LD_INT 2
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: PUSH
32410: LD_INT 1
32412: NEG
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 2
32420: PUSH
32421: LD_INT 0
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 2
32430: PUSH
32431: LD_INT 1
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 2
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: LD_INT 2
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 1
32460: NEG
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 2
32471: NEG
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 2
32482: NEG
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: LD_INT 3
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 1
32506: PUSH
32507: LD_INT 2
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 3
32517: PUSH
32518: LD_INT 2
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 2
32527: PUSH
32528: LD_INT 3
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 2
32537: NEG
32538: PUSH
32539: LD_INT 1
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 3
32548: NEG
32549: PUSH
32550: LD_INT 1
32552: NEG
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32583: LD_ADDR_VAR 0 31
32587: PUSH
32588: LD_INT 0
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: LD_INT 1
32603: NEG
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: LD_INT 0
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 1
32621: PUSH
32622: LD_INT 1
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: LD_INT 1
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 1
32641: NEG
32642: PUSH
32643: LD_INT 0
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 1
32652: NEG
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: NEG
32665: PUSH
32666: LD_INT 2
32668: NEG
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 1
32676: PUSH
32677: LD_INT 1
32679: NEG
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: LD_INT 0
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: LD_INT 1
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 2
32707: PUSH
32708: LD_INT 2
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: LD_INT 2
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: LD_INT 2
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 2
32748: NEG
32749: PUSH
32750: LD_INT 1
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 2
32760: NEG
32761: PUSH
32762: LD_INT 2
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 2
32772: NEG
32773: PUSH
32774: LD_INT 3
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 2
32784: PUSH
32785: LD_INT 1
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 3
32795: PUSH
32796: LD_INT 1
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 1
32805: PUSH
32806: LD_INT 3
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 1
32815: NEG
32816: PUSH
32817: LD_INT 2
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 3
32826: NEG
32827: PUSH
32828: LD_INT 2
32830: NEG
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32861: LD_ADDR_VAR 0 32
32865: PUSH
32866: LD_INT 0
32868: PUSH
32869: LD_INT 0
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 0
32878: PUSH
32879: LD_INT 1
32881: NEG
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 1
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: LD_INT 1
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 1
32919: NEG
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 1
32930: NEG
32931: PUSH
32932: LD_INT 1
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 1
32942: NEG
32943: PUSH
32944: LD_INT 2
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 0
32954: PUSH
32955: LD_INT 2
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 1
32965: PUSH
32966: LD_INT 1
32968: NEG
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 2
32976: PUSH
32977: LD_INT 1
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 2
32986: PUSH
32987: LD_INT 2
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: LD_INT 2
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: LD_INT 2
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: LD_INT 1
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 2
33027: NEG
33028: PUSH
33029: LD_INT 0
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 2
33038: NEG
33039: PUSH
33040: LD_INT 1
33042: NEG
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 1
33050: NEG
33051: PUSH
33052: LD_INT 3
33054: NEG
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 1
33062: PUSH
33063: LD_INT 2
33065: NEG
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 3
33073: PUSH
33074: LD_INT 2
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 2
33083: PUSH
33084: LD_INT 3
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 2
33093: NEG
33094: PUSH
33095: LD_INT 1
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 3
33104: NEG
33105: PUSH
33106: LD_INT 1
33108: NEG
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33139: LD_ADDR_VAR 0 33
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: LD_INT 1
33159: NEG
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: LD_INT 0
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: LD_INT 1
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 1
33197: NEG
33198: PUSH
33199: LD_INT 0
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 1
33208: NEG
33209: PUSH
33210: LD_INT 1
33212: NEG
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 1
33220: NEG
33221: PUSH
33222: LD_INT 2
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: LD_INT 1
33235: NEG
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 2
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 2
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 1
33263: PUSH
33264: LD_INT 2
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 0
33273: PUSH
33274: LD_INT 2
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 1
33283: NEG
33284: PUSH
33285: LD_INT 1
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 2
33294: NEG
33295: PUSH
33296: LD_INT 0
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 2
33305: NEG
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 2
33317: NEG
33318: PUSH
33319: LD_INT 2
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 2
33329: NEG
33330: PUSH
33331: LD_INT 3
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 2
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 3
33352: PUSH
33353: LD_INT 1
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 1
33362: PUSH
33363: LD_INT 3
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 1
33372: NEG
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 3
33383: NEG
33384: PUSH
33385: LD_INT 2
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33418: LD_ADDR_VAR 0 34
33422: PUSH
33423: LD_INT 0
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 0
33435: PUSH
33436: LD_INT 1
33438: NEG
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: LD_INT 0
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 1
33456: PUSH
33457: LD_INT 1
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 0
33466: PUSH
33467: LD_INT 1
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: LD_INT 1
33491: NEG
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PUSH
33501: LD_INT 2
33503: NEG
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: LD_INT 2
33514: NEG
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 2
33533: PUSH
33534: LD_INT 1
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 2
33543: PUSH
33544: LD_INT 2
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: LD_INT 2
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 1
33563: NEG
33564: PUSH
33565: LD_INT 1
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 2
33574: NEG
33575: PUSH
33576: LD_INT 0
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 2
33585: NEG
33586: PUSH
33587: LD_INT 1
33589: NEG
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 2
33597: NEG
33598: PUSH
33599: LD_INT 2
33601: NEG
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 1
33609: NEG
33610: PUSH
33611: LD_INT 3
33613: NEG
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: LD_INT 2
33624: NEG
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 3
33632: PUSH
33633: LD_INT 2
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 2
33642: PUSH
33643: LD_INT 3
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: LD_INT 1
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 3
33663: NEG
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33698: LD_ADDR_VAR 0 35
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: LD_INT 0
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 0
33715: PUSH
33716: LD_INT 1
33718: NEG
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 1
33726: PUSH
33727: LD_INT 0
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 1
33736: PUSH
33737: LD_INT 1
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: LD_INT 1
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 1
33756: NEG
33757: PUSH
33758: LD_INT 0
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 2
33779: PUSH
33780: LD_INT 1
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 2
33789: NEG
33790: PUSH
33791: LD_INT 1
33793: NEG
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33810: LD_ADDR_VAR 0 36
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: LD_INT 0
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: LD_INT 1
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 1
33838: PUSH
33839: LD_INT 0
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: LD_INT 1
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 0
33858: PUSH
33859: LD_INT 1
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 1
33868: NEG
33869: PUSH
33870: LD_INT 0
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 1
33879: NEG
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 1
33891: NEG
33892: PUSH
33893: LD_INT 2
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 1
33903: PUSH
33904: LD_INT 2
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33922: LD_ADDR_VAR 0 37
33926: PUSH
33927: LD_INT 0
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 0
33939: PUSH
33940: LD_INT 1
33942: NEG
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 1
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 1
33960: PUSH
33961: LD_INT 1
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 0
33970: PUSH
33971: LD_INT 1
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 1
33980: NEG
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 1
33991: NEG
33992: PUSH
33993: LD_INT 1
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 1
34003: PUSH
34004: LD_INT 1
34006: NEG
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 1
34014: NEG
34015: PUSH
34016: LD_INT 1
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34034: LD_ADDR_VAR 0 38
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: LD_INT 0
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: LD_INT 1
34054: NEG
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 1
34072: PUSH
34073: LD_INT 1
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 0
34082: PUSH
34083: LD_INT 1
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 1
34092: NEG
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 1
34103: NEG
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 2
34115: PUSH
34116: LD_INT 1
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 2
34125: NEG
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34146: LD_ADDR_VAR 0 39
34150: PUSH
34151: LD_INT 0
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: LD_INT 1
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 1
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: LD_INT 1
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 0
34194: PUSH
34195: LD_INT 1
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 1
34204: NEG
34205: PUSH
34206: LD_INT 0
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 1
34215: NEG
34216: PUSH
34217: LD_INT 1
34219: NEG
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: LD_INT 2
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 1
34239: PUSH
34240: LD_INT 2
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34258: LD_ADDR_VAR 0 40
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: LD_INT 0
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: LD_INT 1
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: LD_INT 1
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 1
34316: NEG
34317: PUSH
34318: LD_INT 0
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 1
34327: NEG
34328: PUSH
34329: LD_INT 1
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: LD_INT 1
34342: NEG
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34370: LD_ADDR_VAR 0 41
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: LD_INT 0
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 0
34387: PUSH
34388: LD_INT 1
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 1
34398: PUSH
34399: LD_INT 0
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: LD_INT 1
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 1
34428: NEG
34429: PUSH
34430: LD_INT 0
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: LD_INT 1
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: NEG
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 1
34463: PUSH
34464: LD_INT 1
34466: NEG
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 2
34474: PUSH
34475: LD_INT 0
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 2
34484: PUSH
34485: LD_INT 1
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 2
34494: PUSH
34495: LD_INT 2
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 1
34504: PUSH
34505: LD_INT 2
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 1
34514: NEG
34515: PUSH
34516: LD_INT 1
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 2
34525: NEG
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 2
34536: NEG
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 2
34548: NEG
34549: PUSH
34550: LD_INT 2
34552: NEG
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 2
34560: NEG
34561: PUSH
34562: LD_INT 3
34564: NEG
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: LD_INT 1
34575: NEG
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 3
34583: PUSH
34584: LD_INT 0
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 3
34593: PUSH
34594: LD_INT 1
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 3
34603: PUSH
34604: LD_INT 2
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 3
34613: PUSH
34614: LD_INT 3
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: LD_INT 3
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 2
34633: NEG
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 3
34644: NEG
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 3
34655: NEG
34656: PUSH
34657: LD_INT 1
34659: NEG
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 3
34667: NEG
34668: PUSH
34669: LD_INT 2
34671: NEG
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 3
34679: NEG
34680: PUSH
34681: LD_INT 3
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34720: LD_ADDR_VAR 0 42
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: LD_INT 0
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: LD_INT 1
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 1
34778: NEG
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 1
34789: NEG
34790: PUSH
34791: LD_INT 1
34793: NEG
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 1
34801: NEG
34802: PUSH
34803: LD_INT 2
34805: NEG
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: LD_INT 2
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: LD_INT 1
34827: NEG
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 2
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 2
34845: PUSH
34846: LD_INT 2
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: LD_INT 2
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 0
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 1
34875: NEG
34876: PUSH
34877: LD_INT 1
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 2
34886: NEG
34887: PUSH
34888: LD_INT 1
34890: NEG
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 2
34898: NEG
34899: PUSH
34900: LD_INT 2
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 2
34910: NEG
34911: PUSH
34912: LD_INT 3
34914: NEG
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 1
34922: NEG
34923: PUSH
34924: LD_INT 3
34926: NEG
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 0
34934: PUSH
34935: LD_INT 3
34937: NEG
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: PUSH
34946: LD_INT 2
34948: NEG
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 3
34956: PUSH
34957: LD_INT 2
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 3
34966: PUSH
34967: LD_INT 3
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: LD_INT 3
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: LD_INT 3
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: LD_INT 3
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 1
35006: NEG
35007: PUSH
35008: LD_INT 2
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 3
35017: NEG
35018: PUSH
35019: LD_INT 2
35021: NEG
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 3
35029: NEG
35030: PUSH
35031: LD_INT 3
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35070: LD_ADDR_VAR 0 43
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: LD_INT 0
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: LD_INT 1
35090: NEG
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 1
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 1
35108: PUSH
35109: LD_INT 1
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 1
35128: NEG
35129: PUSH
35130: LD_INT 0
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 1
35139: NEG
35140: PUSH
35141: LD_INT 1
35143: NEG
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: LD_INT 2
35155: NEG
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 0
35163: PUSH
35164: LD_INT 2
35166: NEG
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: LD_INT 1
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 2
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 2
35195: PUSH
35196: LD_INT 1
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 1
35205: PUSH
35206: LD_INT 2
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 0
35215: PUSH
35216: LD_INT 2
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 1
35225: NEG
35226: PUSH
35227: LD_INT 1
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 2
35236: NEG
35237: PUSH
35238: LD_INT 0
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 2
35247: NEG
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: LD_INT 3
35263: NEG
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: LD_INT 3
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: LD_INT 2
35285: NEG
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 2
35293: PUSH
35294: LD_INT 1
35296: NEG
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 3
35304: PUSH
35305: LD_INT 0
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 3
35314: PUSH
35315: LD_INT 1
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: LD_INT 3
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: LD_INT 3
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 1
35344: NEG
35345: PUSH
35346: LD_INT 2
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 2
35355: NEG
35356: PUSH
35357: LD_INT 1
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 3
35366: NEG
35367: PUSH
35368: LD_INT 0
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 3
35377: NEG
35378: PUSH
35379: LD_INT 1
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35418: LD_ADDR_VAR 0 44
35422: PUSH
35423: LD_INT 0
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: LD_INT 1
35438: NEG
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: PUSH
35447: LD_INT 0
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 1
35456: PUSH
35457: LD_INT 1
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: LD_INT 1
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 1
35476: NEG
35477: PUSH
35478: LD_INT 0
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 1
35487: NEG
35488: PUSH
35489: LD_INT 1
35491: NEG
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 1
35499: NEG
35500: PUSH
35501: LD_INT 2
35503: NEG
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: LD_INT 1
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 2
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 2
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 1
35552: PUSH
35553: LD_INT 2
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 1
35562: NEG
35563: PUSH
35564: LD_INT 1
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 2
35573: NEG
35574: PUSH
35575: LD_INT 0
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 2
35584: NEG
35585: PUSH
35586: LD_INT 1
35588: NEG
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 2
35596: NEG
35597: PUSH
35598: LD_INT 2
35600: NEG
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 2
35608: NEG
35609: PUSH
35610: LD_INT 3
35612: NEG
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 2
35620: PUSH
35621: LD_INT 1
35623: NEG
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 3
35631: PUSH
35632: LD_INT 0
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 3
35641: PUSH
35642: LD_INT 1
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 3
35651: PUSH
35652: LD_INT 2
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 3
35661: PUSH
35662: LD_INT 3
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 2
35671: PUSH
35672: LD_INT 3
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 2
35681: NEG
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 3
35692: NEG
35693: PUSH
35694: LD_INT 0
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 3
35703: NEG
35704: PUSH
35705: LD_INT 1
35707: NEG
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 3
35715: NEG
35716: PUSH
35717: LD_INT 2
35719: NEG
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 3
35727: NEG
35728: PUSH
35729: LD_INT 3
35731: NEG
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35768: LD_ADDR_VAR 0 45
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: PUSH
35797: LD_INT 0
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 1
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 0
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 1
35826: NEG
35827: PUSH
35828: LD_INT 0
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 1
35837: NEG
35838: PUSH
35839: LD_INT 1
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 1
35849: NEG
35850: PUSH
35851: LD_INT 2
35853: NEG
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 0
35861: PUSH
35862: LD_INT 2
35864: NEG
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 1
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 2
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 2
35893: PUSH
35894: LD_INT 2
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: LD_INT 2
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: LD_INT 2
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 1
35923: NEG
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 2
35934: NEG
35935: PUSH
35936: LD_INT 1
35938: NEG
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 2
35946: NEG
35947: PUSH
35948: LD_INT 2
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 2
35958: NEG
35959: PUSH
35960: LD_INT 3
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: LD_INT 3
35974: NEG
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: LD_INT 3
35985: NEG
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: LD_INT 2
35996: NEG
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 3
36004: PUSH
36005: LD_INT 2
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 3
36014: PUSH
36015: LD_INT 3
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 2
36024: PUSH
36025: LD_INT 3
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: PUSH
36035: LD_INT 3
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 3
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: LD_INT 2
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 3
36065: NEG
36066: PUSH
36067: LD_INT 2
36069: NEG
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 3
36077: NEG
36078: PUSH
36079: LD_INT 3
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36118: LD_ADDR_VAR 0 46
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 0
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: LD_INT 0
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 0
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: LD_INT 0
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 1
36187: NEG
36188: PUSH
36189: LD_INT 1
36191: NEG
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 1
36199: NEG
36200: PUSH
36201: LD_INT 2
36203: NEG
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: LD_INT 2
36214: NEG
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: LD_INT 1
36225: NEG
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 2
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: LD_INT 1
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: LD_INT 2
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: LD_INT 2
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 2
36284: NEG
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 2
36295: NEG
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: LD_INT 3
36311: NEG
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: LD_INT 3
36322: NEG
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 1
36330: PUSH
36331: LD_INT 2
36333: NEG
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 2
36341: PUSH
36342: LD_INT 1
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 3
36352: PUSH
36353: LD_INT 0
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 3
36362: PUSH
36363: LD_INT 1
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 1
36372: PUSH
36373: LD_INT 3
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: LD_INT 3
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 1
36392: NEG
36393: PUSH
36394: LD_INT 2
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 2
36403: NEG
36404: PUSH
36405: LD_INT 1
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 3
36414: NEG
36415: PUSH
36416: LD_INT 0
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 3
36425: NEG
36426: PUSH
36427: LD_INT 1
36429: NEG
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36466: LD_ADDR_VAR 0 47
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 0
36483: PUSH
36484: LD_INT 1
36486: NEG
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 1
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 1
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 0
36514: PUSH
36515: LD_INT 1
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 1
36524: NEG
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 1
36535: NEG
36536: PUSH
36537: LD_INT 1
36539: NEG
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 1
36547: NEG
36548: PUSH
36549: LD_INT 2
36551: NEG
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: LD_INT 2
36562: NEG
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 1
36570: PUSH
36571: LD_INT 1
36573: NEG
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 2
36581: NEG
36582: PUSH
36583: LD_INT 1
36585: NEG
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 2
36593: NEG
36594: PUSH
36595: LD_INT 2
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36617: LD_ADDR_VAR 0 48
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 1
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 0
36665: PUSH
36666: LD_INT 1
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: NEG
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: NEG
36687: PUSH
36688: LD_INT 1
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 1
36698: NEG
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: LD_INT 2
36713: NEG
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: LD_INT 1
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 2
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 2
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36764: LD_ADDR_VAR 0 49
36768: PUSH
36769: LD_INT 0
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 1
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 1
36822: NEG
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: LD_INT 1
36837: NEG
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 1
36845: PUSH
36846: LD_INT 1
36848: NEG
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 2
36856: PUSH
36857: LD_INT 0
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 2
36866: PUSH
36867: LD_INT 1
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 2
36876: PUSH
36877: LD_INT 2
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 1
36886: PUSH
36887: LD_INT 2
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36908: LD_ADDR_VAR 0 50
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: LD_INT 1
36928: NEG
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 1
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: LD_INT 1
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: LD_INT 1
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 1
36966: NEG
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 1
36977: NEG
36978: PUSH
36979: LD_INT 1
36981: NEG
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 2
36989: PUSH
36990: LD_INT 1
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 2
36999: PUSH
37000: LD_INT 2
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: LD_INT 2
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: LD_INT 2
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: LD_INT 1
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37052: LD_ADDR_VAR 0 51
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: LD_INT 1
37072: NEG
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 1
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: LD_INT 1
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 1
37110: NEG
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 1
37121: NEG
37122: PUSH
37123: LD_INT 1
37125: NEG
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: LD_INT 2
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: LD_INT 1
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 2
37164: NEG
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37199: LD_ADDR_VAR 0 52
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: LD_INT 0
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 1
37227: PUSH
37228: LD_INT 0
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 0
37247: PUSH
37248: LD_INT 1
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: NEG
37258: PUSH
37259: LD_INT 0
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 1
37268: NEG
37269: PUSH
37270: LD_INT 1
37272: NEG
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 1
37280: NEG
37281: PUSH
37282: LD_INT 2
37284: NEG
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: NEG
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 2
37303: NEG
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 2
37314: NEG
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 2
37326: NEG
37327: PUSH
37328: LD_INT 2
37330: NEG
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37350: LD_ADDR_VAR 0 53
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: LD_INT 1
37370: NEG
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 1
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: LD_INT 1
37423: NEG
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 1
37431: NEG
37432: PUSH
37433: LD_INT 2
37435: NEG
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: LD_INT 2
37446: NEG
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 1
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 2
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 2
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: LD_INT 2
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: LD_INT 1
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 2
37526: NEG
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 2
37537: NEG
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 2
37549: NEG
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37580: LD_ADDR_VAR 0 54
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: LD_INT 2
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: LD_INT 2
37676: NEG
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: PUSH
37685: LD_INT 1
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: LD_INT 1
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 2
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: LD_INT 2
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: LD_INT 2
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: NEG
37746: PUSH
37747: LD_INT 1
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: NEG
37757: PUSH
37758: LD_INT 0
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 2
37767: NEG
37768: PUSH
37769: LD_INT 1
37771: NEG
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 2
37779: NEG
37780: PUSH
37781: LD_INT 2
37783: NEG
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37810: LD_ADDR_VAR 0 55
37814: PUSH
37815: LD_INT 0
37817: PUSH
37818: LD_INT 0
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 1
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 1
37848: PUSH
37849: LD_INT 1
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 1
37868: NEG
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: NEG
37880: PUSH
37881: LD_INT 1
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 1
37891: NEG
37892: PUSH
37893: LD_INT 2
37895: NEG
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: LD_INT 2
37906: NEG
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 1
37914: PUSH
37915: LD_INT 1
37917: NEG
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 2
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 2
37935: PUSH
37936: LD_INT 1
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: LD_INT 2
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: LD_INT 2
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 2
37986: NEG
37987: PUSH
37988: LD_INT 0
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 2
37997: NEG
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 2
38009: NEG
38010: PUSH
38011: LD_INT 2
38013: NEG
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38040: LD_ADDR_VAR 0 56
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: LD_INT 1
38060: NEG
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 1
38068: PUSH
38069: LD_INT 0
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 1
38078: PUSH
38079: LD_INT 1
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 0
38088: PUSH
38089: LD_INT 1
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 1
38098: NEG
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 1
38109: NEG
38110: PUSH
38111: LD_INT 1
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: LD_INT 2
38125: NEG
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: LD_INT 2
38136: NEG
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 2
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 2
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 2
38175: PUSH
38176: LD_INT 2
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: LD_INT 2
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: LD_INT 1
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 2
38216: NEG
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: NEG
38228: PUSH
38229: LD_INT 1
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 2
38239: NEG
38240: PUSH
38241: LD_INT 2
38243: NEG
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38270: LD_ADDR_VAR 0 57
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 0
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 1
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 0
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 1
38328: NEG
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: PUSH
38341: LD_INT 1
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: LD_INT 2
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: LD_INT 2
38366: NEG
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 1
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 2
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: PUSH
38396: LD_INT 1
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: LD_INT 2
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: LD_INT 2
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: LD_INT 2
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 1
38435: NEG
38436: PUSH
38437: LD_INT 1
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 2
38446: NEG
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 2
38457: NEG
38458: PUSH
38459: LD_INT 1
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 2
38469: NEG
38470: PUSH
38471: LD_INT 2
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38500: LD_ADDR_VAR 0 58
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 0
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 1
38569: NEG
38570: PUSH
38571: LD_INT 1
38573: NEG
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: LD_INT 2
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 0
38593: PUSH
38594: LD_INT 2
38596: NEG
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 1
38604: PUSH
38605: LD_INT 1
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 2
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 2
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: LD_INT 2
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 2
38676: NEG
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 2
38687: NEG
38688: PUSH
38689: LD_INT 1
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 2
38699: NEG
38700: PUSH
38701: LD_INT 2
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38730: LD_ADDR_VAR 0 59
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 0
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: LD_INT 1
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: PUSH
38801: LD_INT 1
38803: NEG
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38818: LD_ADDR_VAR 0 60
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 0
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: LD_INT 0
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 1
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: LD_INT 1
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 1
38876: NEG
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: PUSH
38889: LD_INT 1
38891: NEG
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38906: LD_ADDR_VAR 0 61
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: LD_INT 0
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: LD_INT 1
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38994: LD_ADDR_VAR 0 62
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 1
39032: PUSH
39033: LD_INT 1
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: PUSH
39054: LD_INT 0
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 1
39063: NEG
39064: PUSH
39065: LD_INT 1
39067: NEG
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39082: LD_ADDR_VAR 0 63
39086: PUSH
39087: LD_INT 0
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 1
39110: PUSH
39111: LD_INT 0
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 1
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: LD_INT 1
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 1
39140: NEG
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 1
39151: NEG
39152: PUSH
39153: LD_INT 1
39155: NEG
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39170: LD_ADDR_VAR 0 64
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: LD_INT 1
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 1
39239: NEG
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: ST_TO_ADDR
// end ; 1 :
39258: GO 45155
39260: LD_INT 1
39262: DOUBLE
39263: EQUAL
39264: IFTRUE 39268
39266: GO 41891
39268: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39269: LD_ADDR_VAR 0 11
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: LD_INT 3
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: LD_INT 3
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 1
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39313: LD_ADDR_VAR 0 12
39317: PUSH
39318: LD_INT 2
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 3
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 3
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: LIST
39353: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39354: LD_ADDR_VAR 0 13
39358: PUSH
39359: LD_INT 3
39361: PUSH
39362: LD_INT 2
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 3
39371: PUSH
39372: LD_INT 3
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 2
39381: PUSH
39382: LD_INT 3
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: LIST
39393: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39394: LD_ADDR_VAR 0 14
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: LD_INT 3
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 0
39411: PUSH
39412: LD_INT 3
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: NEG
39422: PUSH
39423: LD_INT 2
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: LIST
39434: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39435: LD_ADDR_VAR 0 15
39439: PUSH
39440: LD_INT 2
39442: NEG
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 3
39453: NEG
39454: PUSH
39455: LD_INT 0
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 3
39464: NEG
39465: PUSH
39466: LD_INT 1
39468: NEG
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39479: LD_ADDR_VAR 0 16
39483: PUSH
39484: LD_INT 2
39486: NEG
39487: PUSH
39488: LD_INT 3
39490: NEG
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 3
39498: NEG
39499: PUSH
39500: LD_INT 2
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 3
39510: NEG
39511: PUSH
39512: LD_INT 3
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: LIST
39524: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39525: LD_ADDR_VAR 0 17
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: LD_INT 3
39536: NEG
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: LD_INT 3
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: LD_INT 2
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: LIST
39568: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39569: LD_ADDR_VAR 0 18
39573: PUSH
39574: LD_INT 2
39576: PUSH
39577: LD_INT 1
39579: NEG
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 3
39587: PUSH
39588: LD_INT 0
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 3
39597: PUSH
39598: LD_INT 1
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: LIST
39609: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39610: LD_ADDR_VAR 0 19
39614: PUSH
39615: LD_INT 3
39617: PUSH
39618: LD_INT 2
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 3
39627: PUSH
39628: LD_INT 3
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 2
39637: PUSH
39638: LD_INT 3
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: LIST
39649: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39650: LD_ADDR_VAR 0 20
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: LD_INT 3
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: LD_INT 3
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: LD_INT 2
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: LIST
39690: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39691: LD_ADDR_VAR 0 21
39695: PUSH
39696: LD_INT 2
39698: NEG
39699: PUSH
39700: LD_INT 1
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 3
39709: NEG
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 3
39720: NEG
39721: PUSH
39722: LD_INT 1
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: LIST
39734: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39735: LD_ADDR_VAR 0 22
39739: PUSH
39740: LD_INT 2
39742: NEG
39743: PUSH
39744: LD_INT 3
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 3
39754: NEG
39755: PUSH
39756: LD_INT 2
39758: NEG
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 3
39766: NEG
39767: PUSH
39768: LD_INT 3
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: LIST
39780: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39781: LD_ADDR_VAR 0 23
39785: PUSH
39786: LD_INT 0
39788: PUSH
39789: LD_INT 3
39791: NEG
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 1
39799: NEG
39800: PUSH
39801: LD_INT 4
39803: NEG
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: LD_INT 3
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: LIST
39824: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39825: LD_ADDR_VAR 0 24
39829: PUSH
39830: LD_INT 3
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 3
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 4
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: LIST
39865: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39866: LD_ADDR_VAR 0 25
39870: PUSH
39871: LD_INT 3
39873: PUSH
39874: LD_INT 3
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 4
39883: PUSH
39884: LD_INT 3
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 3
39893: PUSH
39894: LD_INT 4
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: LIST
39905: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39906: LD_ADDR_VAR 0 26
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: LD_INT 3
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: LD_INT 4
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: LD_INT 3
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: LIST
39946: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39947: LD_ADDR_VAR 0 27
39951: PUSH
39952: LD_INT 3
39954: NEG
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 3
39965: NEG
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 4
39976: NEG
39977: PUSH
39978: LD_INT 1
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: LIST
39990: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39991: LD_ADDR_VAR 0 28
39995: PUSH
39996: LD_INT 3
39998: NEG
39999: PUSH
40000: LD_INT 3
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 3
40010: NEG
40011: PUSH
40012: LD_INT 4
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 4
40022: NEG
40023: PUSH
40024: LD_INT 3
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: LIST
40036: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
40037: LD_ADDR_VAR 0 29
40041: PUSH
40042: LD_INT 1
40044: NEG
40045: PUSH
40046: LD_INT 3
40048: NEG
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 0
40056: PUSH
40057: LD_INT 3
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 1
40067: PUSH
40068: LD_INT 2
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 4
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: LD_INT 4
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: LD_INT 3
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: LD_INT 5
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 5
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 4
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: LD_INT 6
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: LD_INT 6
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: LD_INT 5
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
40192: LD_ADDR_VAR 0 30
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 3
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 3
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 3
40230: PUSH
40231: LD_INT 1
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 4
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 4
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 4
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 5
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 5
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 5
40292: PUSH
40293: LD_INT 1
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 6
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 6
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
40335: LD_ADDR_VAR 0 31
40339: PUSH
40340: LD_INT 3
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 3
40352: PUSH
40353: LD_INT 3
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 2
40362: PUSH
40363: LD_INT 3
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 4
40372: PUSH
40373: LD_INT 3
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 4
40382: PUSH
40383: LD_INT 4
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 3
40392: PUSH
40393: LD_INT 4
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 5
40402: PUSH
40403: LD_INT 4
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 5
40412: PUSH
40413: LD_INT 5
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 4
40422: PUSH
40423: LD_INT 5
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 6
40432: PUSH
40433: LD_INT 5
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 6
40442: PUSH
40443: LD_INT 6
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 5
40452: PUSH
40453: LD_INT 6
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
40474: LD_ADDR_VAR 0 32
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: LD_INT 3
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: LD_INT 3
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: PUSH
40503: LD_INT 2
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: LD_INT 4
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: LD_INT 4
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: LD_INT 3
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: LD_INT 5
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: LD_INT 5
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: LD_INT 4
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: LD_INT 6
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: LD_INT 6
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 1
40594: NEG
40595: PUSH
40596: LD_INT 5
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
40617: LD_ADDR_VAR 0 33
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 3
40635: NEG
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 3
40646: NEG
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 3
40658: NEG
40659: PUSH
40660: LD_INT 1
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 4
40669: NEG
40670: PUSH
40671: LD_INT 0
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 4
40680: NEG
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 4
40692: NEG
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 5
40703: NEG
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 5
40714: NEG
40715: PUSH
40716: LD_INT 1
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 5
40726: NEG
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 6
40737: NEG
40738: PUSH
40739: LD_INT 0
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 6
40748: NEG
40749: PUSH
40750: LD_INT 1
40752: NEG
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40772: LD_ADDR_VAR 0 34
40776: PUSH
40777: LD_INT 2
40779: NEG
40780: PUSH
40781: LD_INT 3
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 3
40791: NEG
40792: PUSH
40793: LD_INT 2
40795: NEG
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 3
40803: NEG
40804: PUSH
40805: LD_INT 3
40807: NEG
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 3
40815: NEG
40816: PUSH
40817: LD_INT 4
40819: NEG
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 4
40827: NEG
40828: PUSH
40829: LD_INT 3
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 4
40839: NEG
40840: PUSH
40841: LD_INT 4
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 4
40851: NEG
40852: PUSH
40853: LD_INT 5
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 5
40863: NEG
40864: PUSH
40865: LD_INT 4
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 5
40875: NEG
40876: PUSH
40877: LD_INT 5
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 5
40887: NEG
40888: PUSH
40889: LD_INT 6
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 6
40899: NEG
40900: PUSH
40901: LD_INT 5
40903: NEG
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 6
40911: NEG
40912: PUSH
40913: LD_INT 6
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40935: LD_ADDR_VAR 0 41
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: LD_INT 3
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: LD_INT 2
40968: NEG
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: LIST
40978: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40979: LD_ADDR_VAR 0 42
40983: PUSH
40984: LD_INT 2
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 2
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 3
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: LIST
41019: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
41020: LD_ADDR_VAR 0 43
41024: PUSH
41025: LD_INT 2
41027: PUSH
41028: LD_INT 2
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 3
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: PUSH
41048: LD_INT 3
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: LIST
41059: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
41060: LD_ADDR_VAR 0 44
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: LD_INT 2
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 1
41077: PUSH
41078: LD_INT 3
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: LD_INT 2
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: LIST
41100: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41101: LD_ADDR_VAR 0 45
41105: PUSH
41106: LD_INT 2
41108: NEG
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 2
41119: NEG
41120: PUSH
41121: LD_INT 1
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 3
41130: NEG
41131: PUSH
41132: LD_INT 1
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: LIST
41144: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
41145: LD_ADDR_VAR 0 46
41149: PUSH
41150: LD_INT 2
41152: NEG
41153: PUSH
41154: LD_INT 2
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 2
41164: NEG
41165: PUSH
41166: LD_INT 3
41168: NEG
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 3
41176: NEG
41177: PUSH
41178: LD_INT 2
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: LIST
41190: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
41191: LD_ADDR_VAR 0 47
41195: PUSH
41196: LD_INT 2
41198: NEG
41199: PUSH
41200: LD_INT 3
41202: NEG
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 1
41210: NEG
41211: PUSH
41212: LD_INT 3
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41224: LD_ADDR_VAR 0 48
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: LD_INT 2
41234: NEG
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 2
41242: PUSH
41243: LD_INT 1
41245: NEG
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
41255: LD_ADDR_VAR 0 49
41259: PUSH
41260: LD_INT 3
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 3
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
41284: LD_ADDR_VAR 0 50
41288: PUSH
41289: LD_INT 2
41291: PUSH
41292: LD_INT 3
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 3
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41313: LD_ADDR_VAR 0 51
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: LD_INT 2
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 2
41331: NEG
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41344: LD_ADDR_VAR 0 52
41348: PUSH
41349: LD_INT 3
41351: NEG
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 3
41363: NEG
41364: PUSH
41365: LD_INT 2
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41377: LD_ADDR_VAR 0 53
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PUSH
41386: LD_INT 3
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: LD_INT 3
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: PUSH
41408: LD_INT 2
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: LIST
41420: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41421: LD_ADDR_VAR 0 54
41425: PUSH
41426: LD_INT 2
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 3
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 3
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: LIST
41461: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41462: LD_ADDR_VAR 0 55
41466: PUSH
41467: LD_INT 3
41469: PUSH
41470: LD_INT 2
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 3
41479: PUSH
41480: LD_INT 3
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 2
41489: PUSH
41490: LD_INT 3
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: LIST
41501: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41502: LD_ADDR_VAR 0 56
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: LD_INT 3
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 0
41519: PUSH
41520: LD_INT 3
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: LD_INT 2
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: LIST
41542: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41543: LD_ADDR_VAR 0 57
41547: PUSH
41548: LD_INT 2
41550: NEG
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 3
41561: NEG
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 3
41572: NEG
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: LIST
41586: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41587: LD_ADDR_VAR 0 58
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: LD_INT 3
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 3
41606: NEG
41607: PUSH
41608: LD_INT 2
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 3
41618: NEG
41619: PUSH
41620: LD_INT 3
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: LIST
41632: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
41633: LD_ADDR_VAR 0 59
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: PUSH
41642: LD_INT 2
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: LD_INT 2
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: LIST
41676: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41677: LD_ADDR_VAR 0 60
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: LD_INT 1
41687: NEG
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 2
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 2
41705: PUSH
41706: LD_INT 1
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: LIST
41717: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41718: LD_ADDR_VAR 0 61
41722: PUSH
41723: LD_INT 2
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 2
41735: PUSH
41736: LD_INT 2
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: LIST
41757: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41758: LD_ADDR_VAR 0 62
41762: PUSH
41763: LD_INT 1
41765: PUSH
41766: LD_INT 2
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: LD_INT 2
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: LIST
41798: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41799: LD_ADDR_VAR 0 63
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: LD_INT 1
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 2
41817: NEG
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 2
41828: NEG
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: LIST
41842: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41843: LD_ADDR_VAR 0 64
41847: PUSH
41848: LD_INT 1
41850: NEG
41851: PUSH
41852: LD_INT 2
41854: NEG
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 2
41862: NEG
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 2
41874: NEG
41875: PUSH
41876: LD_INT 2
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: LIST
41888: ST_TO_ADDR
// end ; 2 :
41889: GO 45155
41891: LD_INT 2
41893: DOUBLE
41894: EQUAL
41895: IFTRUE 41899
41897: GO 45154
41899: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41900: LD_ADDR_VAR 0 29
41904: PUSH
41905: LD_INT 4
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 4
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 5
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 5
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 4
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 3
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 3
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 3
41979: PUSH
41980: LD_INT 2
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 5
41990: PUSH
41991: LD_INT 2
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 3
42000: PUSH
42001: LD_INT 3
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 3
42010: PUSH
42011: LD_INT 2
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 4
42020: PUSH
42021: LD_INT 3
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 4
42030: PUSH
42031: LD_INT 4
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 3
42040: PUSH
42041: LD_INT 4
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 2
42050: PUSH
42051: LD_INT 3
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: LD_INT 2
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 4
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: LD_INT 4
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 4
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: LD_INT 3
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 4
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: LD_INT 5
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: LD_INT 5
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: LD_INT 4
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: NEG
42152: PUSH
42153: LD_INT 3
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 2
42162: PUSH
42163: LD_INT 5
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 2
42172: NEG
42173: PUSH
42174: LD_INT 3
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 3
42183: NEG
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 3
42194: NEG
42195: PUSH
42196: LD_INT 1
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 2
42206: NEG
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 2
42217: NEG
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 3
42228: NEG
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 4
42239: NEG
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 4
42250: NEG
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 4
42262: NEG
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 2
42274: NEG
42275: PUSH
42276: LD_INT 2
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 4
42285: NEG
42286: PUSH
42287: LD_INT 4
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 4
42297: NEG
42298: PUSH
42299: LD_INT 5
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 3
42309: NEG
42310: PUSH
42311: LD_INT 4
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 3
42321: NEG
42322: PUSH
42323: LD_INT 3
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 4
42333: NEG
42334: PUSH
42335: LD_INT 3
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 5
42345: NEG
42346: PUSH
42347: LD_INT 4
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 5
42357: NEG
42358: PUSH
42359: LD_INT 5
42361: NEG
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 3
42369: NEG
42370: PUSH
42371: LD_INT 5
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 5
42381: NEG
42382: PUSH
42383: LD_INT 3
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
42438: LD_ADDR_VAR 0 30
42442: PUSH
42443: LD_INT 4
42445: PUSH
42446: LD_INT 4
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 4
42455: PUSH
42456: LD_INT 3
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 5
42465: PUSH
42466: LD_INT 4
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 5
42475: PUSH
42476: LD_INT 5
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 4
42485: PUSH
42486: LD_INT 5
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 3
42495: PUSH
42496: LD_INT 4
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 3
42505: PUSH
42506: LD_INT 3
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 5
42515: PUSH
42516: LD_INT 3
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 3
42525: PUSH
42526: LD_INT 5
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: LD_INT 3
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 0
42545: PUSH
42546: LD_INT 2
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 1
42555: PUSH
42556: LD_INT 3
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 4
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 4
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: LD_INT 3
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: NEG
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 2
42607: PUSH
42608: LD_INT 4
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 2
42617: NEG
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 4
42628: NEG
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 4
42639: NEG
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 3
42651: NEG
42652: PUSH
42653: LD_INT 0
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 3
42662: NEG
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 4
42673: NEG
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 5
42684: NEG
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 5
42695: NEG
42696: PUSH
42697: LD_INT 1
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 5
42707: NEG
42708: PUSH
42709: LD_INT 2
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 3
42719: NEG
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 3
42730: NEG
42731: PUSH
42732: LD_INT 3
42734: NEG
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 3
42742: NEG
42743: PUSH
42744: LD_INT 4
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: LD_INT 3
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: NEG
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 3
42778: NEG
42779: PUSH
42780: LD_INT 2
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 4
42790: NEG
42791: PUSH
42792: LD_INT 3
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 4
42802: NEG
42803: PUSH
42804: LD_INT 4
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: LD_INT 4
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 4
42826: NEG
42827: PUSH
42828: LD_INT 2
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: LD_INT 4
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 5
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: LD_INT 4
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: LD_INT 3
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: LD_INT 3
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: LD_INT 4
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: LD_INT 5
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: LD_INT 3
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 2
42928: NEG
42929: PUSH
42930: LD_INT 5
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42985: LD_ADDR_VAR 0 31
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: LD_INT 4
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: LD_INT 3
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: LD_INT 4
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: LD_INT 5
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: LD_INT 5
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: NEG
43043: PUSH
43044: LD_INT 4
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: LD_INT 3
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: LD_INT 5
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 2
43074: NEG
43075: PUSH
43076: LD_INT 3
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 3
43085: NEG
43086: PUSH
43087: LD_INT 0
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 3
43096: NEG
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 2
43108: NEG
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 2
43119: NEG
43120: PUSH
43121: LD_INT 1
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 3
43130: NEG
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 4
43141: NEG
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 4
43152: NEG
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 4
43164: NEG
43165: PUSH
43166: LD_INT 2
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 2
43176: NEG
43177: PUSH
43178: LD_INT 2
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 4
43187: NEG
43188: PUSH
43189: LD_INT 4
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 4
43199: NEG
43200: PUSH
43201: LD_INT 5
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 3
43211: NEG
43212: PUSH
43213: LD_INT 4
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 3
43223: NEG
43224: PUSH
43225: LD_INT 3
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 4
43235: NEG
43236: PUSH
43237: LD_INT 3
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 5
43247: NEG
43248: PUSH
43249: LD_INT 4
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 5
43259: NEG
43260: PUSH
43261: LD_INT 5
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 3
43271: NEG
43272: PUSH
43273: LD_INT 5
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 5
43283: NEG
43284: PUSH
43285: LD_INT 3
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: LD_INT 3
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: LD_INT 4
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: LD_INT 3
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: LD_INT 3
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: LD_INT 4
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 2
43385: NEG
43386: PUSH
43387: LD_INT 4
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 4
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 4
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 5
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 5
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 4
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 3
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 3
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 3
43469: PUSH
43470: LD_INT 2
43472: NEG
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 5
43480: PUSH
43481: LD_INT 2
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
43535: LD_ADDR_VAR 0 32
43539: PUSH
43540: LD_INT 4
43542: NEG
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 4
43553: NEG
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 3
43565: NEG
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 3
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 4
43587: NEG
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 5
43598: NEG
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 5
43609: NEG
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 5
43621: NEG
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 3
43633: NEG
43634: PUSH
43635: LD_INT 2
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 3
43644: NEG
43645: PUSH
43646: LD_INT 3
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 3
43656: NEG
43657: PUSH
43658: LD_INT 4
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 2
43668: NEG
43669: PUSH
43670: LD_INT 3
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: LD_INT 2
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 3
43692: NEG
43693: PUSH
43694: LD_INT 2
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 4
43704: NEG
43705: PUSH
43706: LD_INT 3
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 4
43716: NEG
43717: PUSH
43718: LD_INT 4
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: LD_INT 4
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 4
43740: NEG
43741: PUSH
43742: LD_INT 2
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: LD_INT 4
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 5
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: LD_INT 4
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: LD_INT 3
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: LD_INT 3
43799: NEG
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: LD_INT 4
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: LD_INT 5
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: LD_INT 3
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: NEG
43843: PUSH
43844: LD_INT 5
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 3
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 3
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 4
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 4
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 3
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 2
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 2
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 2
43926: PUSH
43927: LD_INT 2
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 4
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 4
43947: PUSH
43948: LD_INT 4
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 4
43957: PUSH
43958: LD_INT 3
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 5
43967: PUSH
43968: LD_INT 4
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 5
43977: PUSH
43978: LD_INT 5
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 4
43987: PUSH
43988: LD_INT 5
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 3
43997: PUSH
43998: LD_INT 4
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 3
44007: PUSH
44008: LD_INT 3
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 5
44017: PUSH
44018: LD_INT 3
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 3
44027: PUSH
44028: LD_INT 5
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
44082: LD_ADDR_VAR 0 33
44086: PUSH
44087: LD_INT 4
44089: NEG
44090: PUSH
44091: LD_INT 4
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 4
44101: NEG
44102: PUSH
44103: LD_INT 5
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 3
44113: NEG
44114: PUSH
44115: LD_INT 4
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 3
44125: NEG
44126: PUSH
44127: LD_INT 3
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 4
44137: NEG
44138: PUSH
44139: LD_INT 3
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 5
44149: NEG
44150: PUSH
44151: LD_INT 4
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 5
44161: NEG
44162: PUSH
44163: LD_INT 5
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 3
44173: NEG
44174: PUSH
44175: LD_INT 5
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 5
44185: NEG
44186: PUSH
44187: LD_INT 3
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: LD_INT 3
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: LD_INT 4
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: LD_INT 3
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: LD_INT 2
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: NEG
44253: PUSH
44254: LD_INT 3
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: LD_INT 4
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: LD_INT 2
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 2
44287: NEG
44288: PUSH
44289: LD_INT 4
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 4
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 4
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 5
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 5
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 4
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 3
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 3
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 3
44371: PUSH
44372: LD_INT 2
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 5
44382: PUSH
44383: LD_INT 2
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 3
44392: PUSH
44393: LD_INT 3
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 3
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 4
44412: PUSH
44413: LD_INT 3
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 4
44422: PUSH
44423: LD_INT 4
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 3
44432: PUSH
44433: LD_INT 4
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: LD_INT 3
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 4
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: LD_INT 4
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: LD_INT 4
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: LD_INT 3
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: LD_INT 4
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: LD_INT 5
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: LD_INT 5
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: LD_INT 4
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: LD_INT 3
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: LD_INT 5
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 2
44564: NEG
44565: PUSH
44566: LD_INT 3
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
44620: LD_ADDR_VAR 0 34
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: LD_INT 4
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: LD_INT 5
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: LD_INT 4
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: LD_INT 3
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: LD_INT 3
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 4
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 5
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 2
44706: PUSH
44707: LD_INT 3
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: LD_INT 5
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 3
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 3
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 4
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 4
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 3
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 4
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 4
44822: PUSH
44823: LD_INT 4
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 4
44832: PUSH
44833: LD_INT 3
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 5
44842: PUSH
44843: LD_INT 4
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 5
44852: PUSH
44853: LD_INT 5
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 4
44862: PUSH
44863: LD_INT 5
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 3
44872: PUSH
44873: LD_INT 4
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 3
44882: PUSH
44883: LD_INT 3
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 5
44892: PUSH
44893: LD_INT 3
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 3
44902: PUSH
44903: LD_INT 5
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 3
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 3
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: LD_INT 4
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: LD_INT 4
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: LD_INT 3
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: LD_INT 2
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 2
44984: PUSH
44985: LD_INT 4
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 2
44994: NEG
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 4
45005: NEG
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 4
45016: NEG
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 3
45028: NEG
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 3
45039: NEG
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 4
45050: NEG
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 5
45061: NEG
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 5
45072: NEG
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 5
45084: NEG
45085: PUSH
45086: LD_INT 2
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 3
45096: NEG
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: ST_TO_ADDR
// end ; end ;
45152: GO 45155
45154: POP
// case btype of b_depot , b_warehouse :
45155: LD_VAR 0 1
45159: PUSH
45160: LD_INT 0
45162: DOUBLE
45163: EQUAL
45164: IFTRUE 45174
45166: LD_INT 1
45168: DOUBLE
45169: EQUAL
45170: IFTRUE 45174
45172: GO 45375
45174: POP
// case nation of nation_american :
45175: LD_VAR 0 5
45179: PUSH
45180: LD_INT 1
45182: DOUBLE
45183: EQUAL
45184: IFTRUE 45188
45186: GO 45244
45188: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
45189: LD_ADDR_VAR 0 9
45193: PUSH
45194: LD_VAR 0 11
45198: PUSH
45199: LD_VAR 0 12
45203: PUSH
45204: LD_VAR 0 13
45208: PUSH
45209: LD_VAR 0 14
45213: PUSH
45214: LD_VAR 0 15
45218: PUSH
45219: LD_VAR 0 16
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: PUSH
45232: LD_VAR 0 4
45236: PUSH
45237: LD_INT 1
45239: PLUS
45240: ARRAY
45241: ST_TO_ADDR
45242: GO 45373
45244: LD_INT 2
45246: DOUBLE
45247: EQUAL
45248: IFTRUE 45252
45250: GO 45308
45252: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
45253: LD_ADDR_VAR 0 9
45257: PUSH
45258: LD_VAR 0 17
45262: PUSH
45263: LD_VAR 0 18
45267: PUSH
45268: LD_VAR 0 19
45272: PUSH
45273: LD_VAR 0 20
45277: PUSH
45278: LD_VAR 0 21
45282: PUSH
45283: LD_VAR 0 22
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: PUSH
45296: LD_VAR 0 4
45300: PUSH
45301: LD_INT 1
45303: PLUS
45304: ARRAY
45305: ST_TO_ADDR
45306: GO 45373
45308: LD_INT 3
45310: DOUBLE
45311: EQUAL
45312: IFTRUE 45316
45314: GO 45372
45316: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
45317: LD_ADDR_VAR 0 9
45321: PUSH
45322: LD_VAR 0 23
45326: PUSH
45327: LD_VAR 0 24
45331: PUSH
45332: LD_VAR 0 25
45336: PUSH
45337: LD_VAR 0 26
45341: PUSH
45342: LD_VAR 0 27
45346: PUSH
45347: LD_VAR 0 28
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: PUSH
45360: LD_VAR 0 4
45364: PUSH
45365: LD_INT 1
45367: PLUS
45368: ARRAY
45369: ST_TO_ADDR
45370: GO 45373
45372: POP
45373: GO 45928
45375: LD_INT 2
45377: DOUBLE
45378: EQUAL
45379: IFTRUE 45389
45381: LD_INT 3
45383: DOUBLE
45384: EQUAL
45385: IFTRUE 45389
45387: GO 45445
45389: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
45390: LD_ADDR_VAR 0 9
45394: PUSH
45395: LD_VAR 0 29
45399: PUSH
45400: LD_VAR 0 30
45404: PUSH
45405: LD_VAR 0 31
45409: PUSH
45410: LD_VAR 0 32
45414: PUSH
45415: LD_VAR 0 33
45419: PUSH
45420: LD_VAR 0 34
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: PUSH
45433: LD_VAR 0 4
45437: PUSH
45438: LD_INT 1
45440: PLUS
45441: ARRAY
45442: ST_TO_ADDR
45443: GO 45928
45445: LD_INT 16
45447: DOUBLE
45448: EQUAL
45449: IFTRUE 45507
45451: LD_INT 17
45453: DOUBLE
45454: EQUAL
45455: IFTRUE 45507
45457: LD_INT 18
45459: DOUBLE
45460: EQUAL
45461: IFTRUE 45507
45463: LD_INT 19
45465: DOUBLE
45466: EQUAL
45467: IFTRUE 45507
45469: LD_INT 22
45471: DOUBLE
45472: EQUAL
45473: IFTRUE 45507
45475: LD_INT 20
45477: DOUBLE
45478: EQUAL
45479: IFTRUE 45507
45481: LD_INT 21
45483: DOUBLE
45484: EQUAL
45485: IFTRUE 45507
45487: LD_INT 23
45489: DOUBLE
45490: EQUAL
45491: IFTRUE 45507
45493: LD_INT 24
45495: DOUBLE
45496: EQUAL
45497: IFTRUE 45507
45499: LD_INT 25
45501: DOUBLE
45502: EQUAL
45503: IFTRUE 45507
45505: GO 45563
45507: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
45508: LD_ADDR_VAR 0 9
45512: PUSH
45513: LD_VAR 0 35
45517: PUSH
45518: LD_VAR 0 36
45522: PUSH
45523: LD_VAR 0 37
45527: PUSH
45528: LD_VAR 0 38
45532: PUSH
45533: LD_VAR 0 39
45537: PUSH
45538: LD_VAR 0 40
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: PUSH
45551: LD_VAR 0 4
45555: PUSH
45556: LD_INT 1
45558: PLUS
45559: ARRAY
45560: ST_TO_ADDR
45561: GO 45928
45563: LD_INT 6
45565: DOUBLE
45566: EQUAL
45567: IFTRUE 45619
45569: LD_INT 7
45571: DOUBLE
45572: EQUAL
45573: IFTRUE 45619
45575: LD_INT 8
45577: DOUBLE
45578: EQUAL
45579: IFTRUE 45619
45581: LD_INT 13
45583: DOUBLE
45584: EQUAL
45585: IFTRUE 45619
45587: LD_INT 12
45589: DOUBLE
45590: EQUAL
45591: IFTRUE 45619
45593: LD_INT 15
45595: DOUBLE
45596: EQUAL
45597: IFTRUE 45619
45599: LD_INT 11
45601: DOUBLE
45602: EQUAL
45603: IFTRUE 45619
45605: LD_INT 14
45607: DOUBLE
45608: EQUAL
45609: IFTRUE 45619
45611: LD_INT 10
45613: DOUBLE
45614: EQUAL
45615: IFTRUE 45619
45617: GO 45675
45619: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
45620: LD_ADDR_VAR 0 9
45624: PUSH
45625: LD_VAR 0 41
45629: PUSH
45630: LD_VAR 0 42
45634: PUSH
45635: LD_VAR 0 43
45639: PUSH
45640: LD_VAR 0 44
45644: PUSH
45645: LD_VAR 0 45
45649: PUSH
45650: LD_VAR 0 46
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: PUSH
45663: LD_VAR 0 4
45667: PUSH
45668: LD_INT 1
45670: PLUS
45671: ARRAY
45672: ST_TO_ADDR
45673: GO 45928
45675: LD_INT 36
45677: DOUBLE
45678: EQUAL
45679: IFTRUE 45683
45681: GO 45739
45683: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
45684: LD_ADDR_VAR 0 9
45688: PUSH
45689: LD_VAR 0 47
45693: PUSH
45694: LD_VAR 0 48
45698: PUSH
45699: LD_VAR 0 49
45703: PUSH
45704: LD_VAR 0 50
45708: PUSH
45709: LD_VAR 0 51
45713: PUSH
45714: LD_VAR 0 52
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: PUSH
45727: LD_VAR 0 4
45731: PUSH
45732: LD_INT 1
45734: PLUS
45735: ARRAY
45736: ST_TO_ADDR
45737: GO 45928
45739: LD_INT 4
45741: DOUBLE
45742: EQUAL
45743: IFTRUE 45765
45745: LD_INT 5
45747: DOUBLE
45748: EQUAL
45749: IFTRUE 45765
45751: LD_INT 34
45753: DOUBLE
45754: EQUAL
45755: IFTRUE 45765
45757: LD_INT 37
45759: DOUBLE
45760: EQUAL
45761: IFTRUE 45765
45763: GO 45821
45765: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
45766: LD_ADDR_VAR 0 9
45770: PUSH
45771: LD_VAR 0 53
45775: PUSH
45776: LD_VAR 0 54
45780: PUSH
45781: LD_VAR 0 55
45785: PUSH
45786: LD_VAR 0 56
45790: PUSH
45791: LD_VAR 0 57
45795: PUSH
45796: LD_VAR 0 58
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: PUSH
45809: LD_VAR 0 4
45813: PUSH
45814: LD_INT 1
45816: PLUS
45817: ARRAY
45818: ST_TO_ADDR
45819: GO 45928
45821: LD_INT 31
45823: DOUBLE
45824: EQUAL
45825: IFTRUE 45871
45827: LD_INT 32
45829: DOUBLE
45830: EQUAL
45831: IFTRUE 45871
45833: LD_INT 33
45835: DOUBLE
45836: EQUAL
45837: IFTRUE 45871
45839: LD_INT 27
45841: DOUBLE
45842: EQUAL
45843: IFTRUE 45871
45845: LD_INT 26
45847: DOUBLE
45848: EQUAL
45849: IFTRUE 45871
45851: LD_INT 28
45853: DOUBLE
45854: EQUAL
45855: IFTRUE 45871
45857: LD_INT 29
45859: DOUBLE
45860: EQUAL
45861: IFTRUE 45871
45863: LD_INT 30
45865: DOUBLE
45866: EQUAL
45867: IFTRUE 45871
45869: GO 45927
45871: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
45872: LD_ADDR_VAR 0 9
45876: PUSH
45877: LD_VAR 0 59
45881: PUSH
45882: LD_VAR 0 60
45886: PUSH
45887: LD_VAR 0 61
45891: PUSH
45892: LD_VAR 0 62
45896: PUSH
45897: LD_VAR 0 63
45901: PUSH
45902: LD_VAR 0 64
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: PUSH
45915: LD_VAR 0 4
45919: PUSH
45920: LD_INT 1
45922: PLUS
45923: ARRAY
45924: ST_TO_ADDR
45925: GO 45928
45927: POP
// temp_list2 = [ ] ;
45928: LD_ADDR_VAR 0 10
45932: PUSH
45933: EMPTY
45934: ST_TO_ADDR
// for i in temp_list do
45935: LD_ADDR_VAR 0 8
45939: PUSH
45940: LD_VAR 0 9
45944: PUSH
45945: FOR_IN
45946: IFFALSE 45998
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45948: LD_ADDR_VAR 0 10
45952: PUSH
45953: LD_VAR 0 10
45957: PUSH
45958: LD_VAR 0 8
45962: PUSH
45963: LD_INT 1
45965: ARRAY
45966: PUSH
45967: LD_VAR 0 2
45971: PLUS
45972: PUSH
45973: LD_VAR 0 8
45977: PUSH
45978: LD_INT 2
45980: ARRAY
45981: PUSH
45982: LD_VAR 0 3
45986: PLUS
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: EMPTY
45993: LIST
45994: ADD
45995: ST_TO_ADDR
45996: GO 45945
45998: POP
45999: POP
// result = temp_list2 ;
46000: LD_ADDR_VAR 0 7
46004: PUSH
46005: LD_VAR 0 10
46009: ST_TO_ADDR
// end ;
46010: LD_VAR 0 7
46014: RET
// export function EnemyInRange ( unit , dist ) ; begin
46015: LD_INT 0
46017: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
46018: LD_ADDR_VAR 0 3
46022: PUSH
46023: LD_VAR 0 1
46027: PPUSH
46028: CALL_OW 255
46032: PPUSH
46033: LD_VAR 0 1
46037: PPUSH
46038: CALL_OW 250
46042: PPUSH
46043: LD_VAR 0 1
46047: PPUSH
46048: CALL_OW 251
46052: PPUSH
46053: LD_VAR 0 2
46057: PPUSH
46058: CALL 19272 0 4
46062: PUSH
46063: LD_INT 4
46065: ARRAY
46066: ST_TO_ADDR
// end ;
46067: LD_VAR 0 3
46071: RET
// export function PlayerSeeMe ( unit ) ; begin
46072: LD_INT 0
46074: PPUSH
// result := See ( your_side , unit ) ;
46075: LD_ADDR_VAR 0 2
46079: PUSH
46080: LD_OWVAR 2
46084: PPUSH
46085: LD_VAR 0 1
46089: PPUSH
46090: CALL_OW 292
46094: ST_TO_ADDR
// end ;
46095: LD_VAR 0 2
46099: RET
// export function ReverseDir ( unit ) ; begin
46100: LD_INT 0
46102: PPUSH
// if not unit then
46103: LD_VAR 0 1
46107: NOT
46108: IFFALSE 46112
// exit ;
46110: GO 46135
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
46112: LD_ADDR_VAR 0 2
46116: PUSH
46117: LD_VAR 0 1
46121: PPUSH
46122: CALL_OW 254
46126: PUSH
46127: LD_INT 3
46129: PLUS
46130: PUSH
46131: LD_INT 6
46133: MOD
46134: ST_TO_ADDR
// end ;
46135: LD_VAR 0 2
46139: RET
// export function ReverseArray ( array ) ; var i ; begin
46140: LD_INT 0
46142: PPUSH
46143: PPUSH
// if not array then
46144: LD_VAR 0 1
46148: NOT
46149: IFFALSE 46153
// exit ;
46151: GO 46208
// result := [ ] ;
46153: LD_ADDR_VAR 0 2
46157: PUSH
46158: EMPTY
46159: ST_TO_ADDR
// for i := array downto 1 do
46160: LD_ADDR_VAR 0 3
46164: PUSH
46165: DOUBLE
46166: LD_VAR 0 1
46170: INC
46171: ST_TO_ADDR
46172: LD_INT 1
46174: PUSH
46175: FOR_DOWNTO
46176: IFFALSE 46206
// result := Join ( result , array [ i ] ) ;
46178: LD_ADDR_VAR 0 2
46182: PUSH
46183: LD_VAR 0 2
46187: PPUSH
46188: LD_VAR 0 1
46192: PUSH
46193: LD_VAR 0 3
46197: ARRAY
46198: PPUSH
46199: CALL 51050 0 2
46203: ST_TO_ADDR
46204: GO 46175
46206: POP
46207: POP
// end ;
46208: LD_VAR 0 2
46212: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
46213: LD_INT 0
46215: PPUSH
46216: PPUSH
46217: PPUSH
46218: PPUSH
46219: PPUSH
46220: PPUSH
// if not unit or not hexes then
46221: LD_VAR 0 1
46225: NOT
46226: IFTRUE 46235
46228: PUSH
46229: LD_VAR 0 2
46233: NOT
46234: OR
46235: IFFALSE 46239
// exit ;
46237: GO 46362
// dist := 9999 ;
46239: LD_ADDR_VAR 0 5
46243: PUSH
46244: LD_INT 9999
46246: ST_TO_ADDR
// for i = 1 to hexes do
46247: LD_ADDR_VAR 0 4
46251: PUSH
46252: DOUBLE
46253: LD_INT 1
46255: DEC
46256: ST_TO_ADDR
46257: LD_VAR 0 2
46261: PUSH
46262: FOR_TO
46263: IFFALSE 46350
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46265: LD_ADDR_VAR 0 6
46269: PUSH
46270: LD_VAR 0 1
46274: PPUSH
46275: LD_VAR 0 2
46279: PUSH
46280: LD_VAR 0 4
46284: ARRAY
46285: PUSH
46286: LD_INT 1
46288: ARRAY
46289: PPUSH
46290: LD_VAR 0 2
46294: PUSH
46295: LD_VAR 0 4
46299: ARRAY
46300: PUSH
46301: LD_INT 2
46303: ARRAY
46304: PPUSH
46305: CALL_OW 297
46309: ST_TO_ADDR
// if tdist < dist then
46310: LD_VAR 0 6
46314: PUSH
46315: LD_VAR 0 5
46319: LESS
46320: IFFALSE 46348
// begin hex := hexes [ i ] ;
46322: LD_ADDR_VAR 0 8
46326: PUSH
46327: LD_VAR 0 2
46331: PUSH
46332: LD_VAR 0 4
46336: ARRAY
46337: ST_TO_ADDR
// dist := tdist ;
46338: LD_ADDR_VAR 0 5
46342: PUSH
46343: LD_VAR 0 6
46347: ST_TO_ADDR
// end ; end ;
46348: GO 46262
46350: POP
46351: POP
// result := hex ;
46352: LD_ADDR_VAR 0 3
46356: PUSH
46357: LD_VAR 0 8
46361: ST_TO_ADDR
// end ;
46362: LD_VAR 0 3
46366: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
46367: LD_INT 0
46369: PPUSH
46370: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
46371: LD_VAR 0 1
46375: NOT
46376: IFTRUE 46415
46378: PUSH
46379: LD_VAR 0 1
46383: PUSH
46384: LD_INT 21
46386: PUSH
46387: LD_INT 2
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 23
46396: PUSH
46397: LD_INT 2
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PPUSH
46408: CALL_OW 69
46412: IN
46413: NOT
46414: OR
46415: IFFALSE 46419
// exit ;
46417: GO 46466
// for i = 1 to 3 do
46419: LD_ADDR_VAR 0 3
46423: PUSH
46424: DOUBLE
46425: LD_INT 1
46427: DEC
46428: ST_TO_ADDR
46429: LD_INT 3
46431: PUSH
46432: FOR_TO
46433: IFFALSE 46464
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
46435: LD_VAR 0 1
46439: PPUSH
46440: CALL_OW 250
46444: PPUSH
46445: LD_VAR 0 1
46449: PPUSH
46450: CALL_OW 251
46454: PPUSH
46455: LD_INT 1
46457: PPUSH
46458: CALL_OW 453
46462: GO 46432
46464: POP
46465: POP
// end ;
46466: LD_VAR 0 2
46470: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
46471: LD_INT 0
46473: PPUSH
46474: PPUSH
46475: PPUSH
46476: PPUSH
46477: PPUSH
46478: PPUSH
// if not unit or not enemy_unit then
46479: LD_VAR 0 1
46483: NOT
46484: IFTRUE 46493
46486: PUSH
46487: LD_VAR 0 2
46491: NOT
46492: OR
46493: IFFALSE 46497
// exit ;
46495: GO 46968
// if GetLives ( i ) < 250 then
46497: LD_VAR 0 4
46501: PPUSH
46502: CALL_OW 256
46506: PUSH
46507: LD_INT 250
46509: LESS
46510: IFFALSE 46523
// begin ComAutodestruct ( i ) ;
46512: LD_VAR 0 4
46516: PPUSH
46517: CALL 46367 0 1
// exit ;
46521: GO 46968
// end ; x := GetX ( enemy_unit ) ;
46523: LD_ADDR_VAR 0 7
46527: PUSH
46528: LD_VAR 0 2
46532: PPUSH
46533: CALL_OW 250
46537: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
46538: LD_ADDR_VAR 0 8
46542: PUSH
46543: LD_VAR 0 2
46547: PPUSH
46548: CALL_OW 251
46552: ST_TO_ADDR
// if not x or not y then
46553: LD_VAR 0 7
46557: NOT
46558: IFTRUE 46567
46560: PUSH
46561: LD_VAR 0 8
46565: NOT
46566: OR
46567: IFFALSE 46571
// exit ;
46569: GO 46968
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
46571: LD_ADDR_VAR 0 6
46575: PUSH
46576: LD_VAR 0 7
46580: PPUSH
46581: LD_INT 0
46583: PPUSH
46584: LD_INT 4
46586: PPUSH
46587: CALL_OW 272
46591: PUSH
46592: LD_VAR 0 8
46596: PPUSH
46597: LD_INT 0
46599: PPUSH
46600: LD_INT 4
46602: PPUSH
46603: CALL_OW 273
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_VAR 0 7
46616: PPUSH
46617: LD_INT 1
46619: PPUSH
46620: LD_INT 4
46622: PPUSH
46623: CALL_OW 272
46627: PUSH
46628: LD_VAR 0 8
46632: PPUSH
46633: LD_INT 1
46635: PPUSH
46636: LD_INT 4
46638: PPUSH
46639: CALL_OW 273
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_VAR 0 7
46652: PPUSH
46653: LD_INT 2
46655: PPUSH
46656: LD_INT 4
46658: PPUSH
46659: CALL_OW 272
46663: PUSH
46664: LD_VAR 0 8
46668: PPUSH
46669: LD_INT 2
46671: PPUSH
46672: LD_INT 4
46674: PPUSH
46675: CALL_OW 273
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_VAR 0 7
46688: PPUSH
46689: LD_INT 3
46691: PPUSH
46692: LD_INT 4
46694: PPUSH
46695: CALL_OW 272
46699: PUSH
46700: LD_VAR 0 8
46704: PPUSH
46705: LD_INT 3
46707: PPUSH
46708: LD_INT 4
46710: PPUSH
46711: CALL_OW 273
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_VAR 0 7
46724: PPUSH
46725: LD_INT 4
46727: PPUSH
46728: LD_INT 4
46730: PPUSH
46731: CALL_OW 272
46735: PUSH
46736: LD_VAR 0 8
46740: PPUSH
46741: LD_INT 4
46743: PPUSH
46744: LD_INT 4
46746: PPUSH
46747: CALL_OW 273
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_VAR 0 7
46760: PPUSH
46761: LD_INT 5
46763: PPUSH
46764: LD_INT 4
46766: PPUSH
46767: CALL_OW 272
46771: PUSH
46772: LD_VAR 0 8
46776: PPUSH
46777: LD_INT 5
46779: PPUSH
46780: LD_INT 4
46782: PPUSH
46783: CALL_OW 273
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: ST_TO_ADDR
// for i = tmp downto 1 do
46800: LD_ADDR_VAR 0 4
46804: PUSH
46805: DOUBLE
46806: LD_VAR 0 6
46810: INC
46811: ST_TO_ADDR
46812: LD_INT 1
46814: PUSH
46815: FOR_DOWNTO
46816: IFFALSE 46919
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
46818: LD_VAR 0 6
46822: PUSH
46823: LD_VAR 0 4
46827: ARRAY
46828: PUSH
46829: LD_INT 1
46831: ARRAY
46832: PPUSH
46833: LD_VAR 0 6
46837: PUSH
46838: LD_VAR 0 4
46842: ARRAY
46843: PUSH
46844: LD_INT 2
46846: ARRAY
46847: PPUSH
46848: CALL_OW 488
46852: NOT
46853: IFTRUE 46895
46855: PUSH
46856: LD_VAR 0 6
46860: PUSH
46861: LD_VAR 0 4
46865: ARRAY
46866: PUSH
46867: LD_INT 1
46869: ARRAY
46870: PPUSH
46871: LD_VAR 0 6
46875: PUSH
46876: LD_VAR 0 4
46880: ARRAY
46881: PUSH
46882: LD_INT 2
46884: ARRAY
46885: PPUSH
46886: CALL_OW 428
46890: PUSH
46891: LD_INT 0
46893: NONEQUAL
46894: OR
46895: IFFALSE 46917
// tmp := Delete ( tmp , i ) ;
46897: LD_ADDR_VAR 0 6
46901: PUSH
46902: LD_VAR 0 6
46906: PPUSH
46907: LD_VAR 0 4
46911: PPUSH
46912: CALL_OW 3
46916: ST_TO_ADDR
46917: GO 46815
46919: POP
46920: POP
// j := GetClosestHex ( unit , tmp ) ;
46921: LD_ADDR_VAR 0 5
46925: PUSH
46926: LD_VAR 0 1
46930: PPUSH
46931: LD_VAR 0 6
46935: PPUSH
46936: CALL 46213 0 2
46940: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46941: LD_VAR 0 1
46945: PPUSH
46946: LD_VAR 0 5
46950: PUSH
46951: LD_INT 1
46953: ARRAY
46954: PPUSH
46955: LD_VAR 0 5
46959: PUSH
46960: LD_INT 2
46962: ARRAY
46963: PPUSH
46964: CALL_OW 111
// end ;
46968: LD_VAR 0 3
46972: RET
// export function PrepareApemanSoldier ( ) ; begin
46973: LD_INT 0
46975: PPUSH
// uc_nation := 0 ;
46976: LD_ADDR_OWVAR 21
46980: PUSH
46981: LD_INT 0
46983: ST_TO_ADDR
// hc_sex := sex_male ;
46984: LD_ADDR_OWVAR 27
46988: PUSH
46989: LD_INT 1
46991: ST_TO_ADDR
// hc_name :=  ;
46992: LD_ADDR_OWVAR 26
46996: PUSH
46997: LD_STRING 
46999: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
47000: LD_ADDR_OWVAR 28
47004: PUSH
47005: LD_INT 15
47007: ST_TO_ADDR
// hc_gallery :=  ;
47008: LD_ADDR_OWVAR 33
47012: PUSH
47013: LD_STRING 
47015: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47016: LD_ADDR_OWVAR 31
47020: PUSH
47021: LD_INT 0
47023: PPUSH
47024: LD_INT 3
47026: PPUSH
47027: CALL_OW 12
47031: PUSH
47032: LD_INT 0
47034: PPUSH
47035: LD_INT 3
47037: PPUSH
47038: CALL_OW 12
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
47055: LD_ADDR_OWVAR 29
47059: PUSH
47060: LD_INT 12
47062: PUSH
47063: LD_INT 12
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: ST_TO_ADDR
// end ;
47070: LD_VAR 0 1
47074: RET
// export function PrepareApemanEngineer ( ) ; begin
47075: LD_INT 0
47077: PPUSH
// uc_nation := 0 ;
47078: LD_ADDR_OWVAR 21
47082: PUSH
47083: LD_INT 0
47085: ST_TO_ADDR
// hc_sex := sex_male ;
47086: LD_ADDR_OWVAR 27
47090: PUSH
47091: LD_INT 1
47093: ST_TO_ADDR
// hc_name :=  ;
47094: LD_ADDR_OWVAR 26
47098: PUSH
47099: LD_STRING 
47101: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
47102: LD_ADDR_OWVAR 28
47106: PUSH
47107: LD_INT 16
47109: ST_TO_ADDR
// hc_gallery :=  ;
47110: LD_ADDR_OWVAR 33
47114: PUSH
47115: LD_STRING 
47117: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47118: LD_ADDR_OWVAR 31
47122: PUSH
47123: LD_INT 0
47125: PPUSH
47126: LD_INT 3
47128: PPUSH
47129: CALL_OW 12
47133: PUSH
47134: LD_INT 0
47136: PPUSH
47137: LD_INT 3
47139: PPUSH
47140: CALL_OW 12
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
47157: LD_ADDR_OWVAR 29
47161: PUSH
47162: LD_INT 12
47164: PUSH
47165: LD_INT 12
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: ST_TO_ADDR
// end ;
47172: LD_VAR 0 1
47176: RET
// export function PrepareApeman ( agressivity ) ; begin
47177: LD_INT 0
47179: PPUSH
// uc_side := 0 ;
47180: LD_ADDR_OWVAR 20
47184: PUSH
47185: LD_INT 0
47187: ST_TO_ADDR
// uc_nation := 0 ;
47188: LD_ADDR_OWVAR 21
47192: PUSH
47193: LD_INT 0
47195: ST_TO_ADDR
// hc_sex := sex_male ;
47196: LD_ADDR_OWVAR 27
47200: PUSH
47201: LD_INT 1
47203: ST_TO_ADDR
// hc_class := class_apeman ;
47204: LD_ADDR_OWVAR 28
47208: PUSH
47209: LD_INT 12
47211: ST_TO_ADDR
// hc_gallery :=  ;
47212: LD_ADDR_OWVAR 33
47216: PUSH
47217: LD_STRING 
47219: ST_TO_ADDR
// hc_name :=  ;
47220: LD_ADDR_OWVAR 26
47224: PUSH
47225: LD_STRING 
47227: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
47228: LD_ADDR_OWVAR 29
47232: PUSH
47233: LD_INT 12
47235: PUSH
47236: LD_INT 12
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: ST_TO_ADDR
// if agressivity = 0 then
47243: LD_VAR 0 1
47247: PUSH
47248: LD_INT 0
47250: EQUAL
47251: IFFALSE 47263
// hc_agressivity := 0 else
47253: LD_ADDR_OWVAR 35
47257: PUSH
47258: LD_INT 0
47260: ST_TO_ADDR
47261: GO 47284
// hc_agressivity := rand ( - agressivity , agressivity ) ;
47263: LD_ADDR_OWVAR 35
47267: PUSH
47268: LD_VAR 0 1
47272: NEG
47273: PPUSH
47274: LD_VAR 0 1
47278: PPUSH
47279: CALL_OW 12
47283: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47284: LD_ADDR_OWVAR 31
47288: PUSH
47289: LD_INT 0
47291: PPUSH
47292: LD_INT 3
47294: PPUSH
47295: CALL_OW 12
47299: PUSH
47300: LD_INT 0
47302: PPUSH
47303: LD_INT 3
47305: PPUSH
47306: CALL_OW 12
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: ST_TO_ADDR
// end ;
47323: LD_VAR 0 2
47327: RET
// export function PrepareTiger ( agressivity ) ; begin
47328: LD_INT 0
47330: PPUSH
// uc_side := 0 ;
47331: LD_ADDR_OWVAR 20
47335: PUSH
47336: LD_INT 0
47338: ST_TO_ADDR
// uc_nation := 0 ;
47339: LD_ADDR_OWVAR 21
47343: PUSH
47344: LD_INT 0
47346: ST_TO_ADDR
// InitHc ;
47347: CALL_OW 19
// hc_class := class_tiger ;
47351: LD_ADDR_OWVAR 28
47355: PUSH
47356: LD_INT 14
47358: ST_TO_ADDR
// hc_gallery :=  ;
47359: LD_ADDR_OWVAR 33
47363: PUSH
47364: LD_STRING 
47366: ST_TO_ADDR
// hc_name :=  ;
47367: LD_ADDR_OWVAR 26
47371: PUSH
47372: LD_STRING 
47374: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
47375: LD_ADDR_OWVAR 35
47379: PUSH
47380: LD_VAR 0 1
47384: NEG
47385: PPUSH
47386: LD_VAR 0 1
47390: PPUSH
47391: CALL_OW 12
47395: ST_TO_ADDR
// end ;
47396: LD_VAR 0 2
47400: RET
// export function PrepareEnchidna ( ) ; begin
47401: LD_INT 0
47403: PPUSH
// uc_side := 0 ;
47404: LD_ADDR_OWVAR 20
47408: PUSH
47409: LD_INT 0
47411: ST_TO_ADDR
// uc_nation := 0 ;
47412: LD_ADDR_OWVAR 21
47416: PUSH
47417: LD_INT 0
47419: ST_TO_ADDR
// InitHc ;
47420: CALL_OW 19
// hc_class := class_baggie ;
47424: LD_ADDR_OWVAR 28
47428: PUSH
47429: LD_INT 13
47431: ST_TO_ADDR
// hc_gallery :=  ;
47432: LD_ADDR_OWVAR 33
47436: PUSH
47437: LD_STRING 
47439: ST_TO_ADDR
// hc_name :=  ;
47440: LD_ADDR_OWVAR 26
47444: PUSH
47445: LD_STRING 
47447: ST_TO_ADDR
// end ;
47448: LD_VAR 0 1
47452: RET
// export function PrepareFrog ( ) ; begin
47453: LD_INT 0
47455: PPUSH
// uc_side := 0 ;
47456: LD_ADDR_OWVAR 20
47460: PUSH
47461: LD_INT 0
47463: ST_TO_ADDR
// uc_nation := 0 ;
47464: LD_ADDR_OWVAR 21
47468: PUSH
47469: LD_INT 0
47471: ST_TO_ADDR
// InitHc ;
47472: CALL_OW 19
// hc_class := class_frog ;
47476: LD_ADDR_OWVAR 28
47480: PUSH
47481: LD_INT 19
47483: ST_TO_ADDR
// hc_gallery :=  ;
47484: LD_ADDR_OWVAR 33
47488: PUSH
47489: LD_STRING 
47491: ST_TO_ADDR
// hc_name :=  ;
47492: LD_ADDR_OWVAR 26
47496: PUSH
47497: LD_STRING 
47499: ST_TO_ADDR
// end ;
47500: LD_VAR 0 1
47504: RET
// export function PrepareFish ( ) ; begin
47505: LD_INT 0
47507: PPUSH
// uc_side := 0 ;
47508: LD_ADDR_OWVAR 20
47512: PUSH
47513: LD_INT 0
47515: ST_TO_ADDR
// uc_nation := 0 ;
47516: LD_ADDR_OWVAR 21
47520: PUSH
47521: LD_INT 0
47523: ST_TO_ADDR
// InitHc ;
47524: CALL_OW 19
// hc_class := class_fish ;
47528: LD_ADDR_OWVAR 28
47532: PUSH
47533: LD_INT 20
47535: ST_TO_ADDR
// hc_gallery :=  ;
47536: LD_ADDR_OWVAR 33
47540: PUSH
47541: LD_STRING 
47543: ST_TO_ADDR
// hc_name :=  ;
47544: LD_ADDR_OWVAR 26
47548: PUSH
47549: LD_STRING 
47551: ST_TO_ADDR
// end ;
47552: LD_VAR 0 1
47556: RET
// export function PrepareBird ( ) ; begin
47557: LD_INT 0
47559: PPUSH
// uc_side := 0 ;
47560: LD_ADDR_OWVAR 20
47564: PUSH
47565: LD_INT 0
47567: ST_TO_ADDR
// uc_nation := 0 ;
47568: LD_ADDR_OWVAR 21
47572: PUSH
47573: LD_INT 0
47575: ST_TO_ADDR
// InitHc ;
47576: CALL_OW 19
// hc_class := class_phororhacos ;
47580: LD_ADDR_OWVAR 28
47584: PUSH
47585: LD_INT 18
47587: ST_TO_ADDR
// hc_gallery :=  ;
47588: LD_ADDR_OWVAR 33
47592: PUSH
47593: LD_STRING 
47595: ST_TO_ADDR
// hc_name :=  ;
47596: LD_ADDR_OWVAR 26
47600: PUSH
47601: LD_STRING 
47603: ST_TO_ADDR
// end ;
47604: LD_VAR 0 1
47608: RET
// export function PrepareHorse ( ) ; begin
47609: LD_INT 0
47611: PPUSH
// uc_side := 0 ;
47612: LD_ADDR_OWVAR 20
47616: PUSH
47617: LD_INT 0
47619: ST_TO_ADDR
// uc_nation := 0 ;
47620: LD_ADDR_OWVAR 21
47624: PUSH
47625: LD_INT 0
47627: ST_TO_ADDR
// InitHc ;
47628: CALL_OW 19
// hc_class := class_horse ;
47632: LD_ADDR_OWVAR 28
47636: PUSH
47637: LD_INT 21
47639: ST_TO_ADDR
// hc_gallery :=  ;
47640: LD_ADDR_OWVAR 33
47644: PUSH
47645: LD_STRING 
47647: ST_TO_ADDR
// hc_name :=  ;
47648: LD_ADDR_OWVAR 26
47652: PUSH
47653: LD_STRING 
47655: ST_TO_ADDR
// end ;
47656: LD_VAR 0 1
47660: RET
// export function PrepareMastodont ( ) ; begin
47661: LD_INT 0
47663: PPUSH
// uc_side := 0 ;
47664: LD_ADDR_OWVAR 20
47668: PUSH
47669: LD_INT 0
47671: ST_TO_ADDR
// uc_nation := 0 ;
47672: LD_ADDR_OWVAR 21
47676: PUSH
47677: LD_INT 0
47679: ST_TO_ADDR
// vc_chassis := class_mastodont ;
47680: LD_ADDR_OWVAR 37
47684: PUSH
47685: LD_INT 31
47687: ST_TO_ADDR
// vc_control := control_rider ;
47688: LD_ADDR_OWVAR 38
47692: PUSH
47693: LD_INT 4
47695: ST_TO_ADDR
// end ;
47696: LD_VAR 0 1
47700: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
47701: LD_INT 0
47703: PPUSH
47704: PPUSH
47705: PPUSH
// uc_side = 0 ;
47706: LD_ADDR_OWVAR 20
47710: PUSH
47711: LD_INT 0
47713: ST_TO_ADDR
// uc_nation = 0 ;
47714: LD_ADDR_OWVAR 21
47718: PUSH
47719: LD_INT 0
47721: ST_TO_ADDR
// InitHc_All ( ) ;
47722: CALL_OW 584
// InitVc ;
47726: CALL_OW 20
// if mastodonts then
47730: LD_VAR 0 6
47734: IFFALSE 47801
// for i = 1 to mastodonts do
47736: LD_ADDR_VAR 0 11
47740: PUSH
47741: DOUBLE
47742: LD_INT 1
47744: DEC
47745: ST_TO_ADDR
47746: LD_VAR 0 6
47750: PUSH
47751: FOR_TO
47752: IFFALSE 47799
// begin vc_chassis := 31 ;
47754: LD_ADDR_OWVAR 37
47758: PUSH
47759: LD_INT 31
47761: ST_TO_ADDR
// vc_control := control_rider ;
47762: LD_ADDR_OWVAR 38
47766: PUSH
47767: LD_INT 4
47769: ST_TO_ADDR
// animal := CreateVehicle ;
47770: LD_ADDR_VAR 0 12
47774: PUSH
47775: CALL_OW 45
47779: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47780: LD_VAR 0 12
47784: PPUSH
47785: LD_VAR 0 8
47789: PPUSH
47790: LD_INT 0
47792: PPUSH
47793: CALL 49943 0 3
// end ;
47797: GO 47751
47799: POP
47800: POP
// if horses then
47801: LD_VAR 0 5
47805: IFFALSE 47872
// for i = 1 to horses do
47807: LD_ADDR_VAR 0 11
47811: PUSH
47812: DOUBLE
47813: LD_INT 1
47815: DEC
47816: ST_TO_ADDR
47817: LD_VAR 0 5
47821: PUSH
47822: FOR_TO
47823: IFFALSE 47870
// begin hc_class := 21 ;
47825: LD_ADDR_OWVAR 28
47829: PUSH
47830: LD_INT 21
47832: ST_TO_ADDR
// hc_gallery :=  ;
47833: LD_ADDR_OWVAR 33
47837: PUSH
47838: LD_STRING 
47840: ST_TO_ADDR
// animal := CreateHuman ;
47841: LD_ADDR_VAR 0 12
47845: PUSH
47846: CALL_OW 44
47850: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47851: LD_VAR 0 12
47855: PPUSH
47856: LD_VAR 0 8
47860: PPUSH
47861: LD_INT 0
47863: PPUSH
47864: CALL 49943 0 3
// end ;
47868: GO 47822
47870: POP
47871: POP
// if birds then
47872: LD_VAR 0 1
47876: IFFALSE 47943
// for i = 1 to birds do
47878: LD_ADDR_VAR 0 11
47882: PUSH
47883: DOUBLE
47884: LD_INT 1
47886: DEC
47887: ST_TO_ADDR
47888: LD_VAR 0 1
47892: PUSH
47893: FOR_TO
47894: IFFALSE 47941
// begin hc_class := 18 ;
47896: LD_ADDR_OWVAR 28
47900: PUSH
47901: LD_INT 18
47903: ST_TO_ADDR
// hc_gallery =  ;
47904: LD_ADDR_OWVAR 33
47908: PUSH
47909: LD_STRING 
47911: ST_TO_ADDR
// animal := CreateHuman ;
47912: LD_ADDR_VAR 0 12
47916: PUSH
47917: CALL_OW 44
47921: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47922: LD_VAR 0 12
47926: PPUSH
47927: LD_VAR 0 8
47931: PPUSH
47932: LD_INT 0
47934: PPUSH
47935: CALL 49943 0 3
// end ;
47939: GO 47893
47941: POP
47942: POP
// if tigers then
47943: LD_VAR 0 2
47947: IFFALSE 48031
// for i = 1 to tigers do
47949: LD_ADDR_VAR 0 11
47953: PUSH
47954: DOUBLE
47955: LD_INT 1
47957: DEC
47958: ST_TO_ADDR
47959: LD_VAR 0 2
47963: PUSH
47964: FOR_TO
47965: IFFALSE 48029
// begin hc_class = class_tiger ;
47967: LD_ADDR_OWVAR 28
47971: PUSH
47972: LD_INT 14
47974: ST_TO_ADDR
// hc_gallery =  ;
47975: LD_ADDR_OWVAR 33
47979: PUSH
47980: LD_STRING 
47982: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
47983: LD_ADDR_OWVAR 35
47987: PUSH
47988: LD_INT 7
47990: NEG
47991: PPUSH
47992: LD_INT 7
47994: PPUSH
47995: CALL_OW 12
47999: ST_TO_ADDR
// animal := CreateHuman ;
48000: LD_ADDR_VAR 0 12
48004: PUSH
48005: CALL_OW 44
48009: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48010: LD_VAR 0 12
48014: PPUSH
48015: LD_VAR 0 8
48019: PPUSH
48020: LD_INT 0
48022: PPUSH
48023: CALL 49943 0 3
// end ;
48027: GO 47964
48029: POP
48030: POP
// if apemans then
48031: LD_VAR 0 3
48035: IFFALSE 48158
// for i = 1 to apemans do
48037: LD_ADDR_VAR 0 11
48041: PUSH
48042: DOUBLE
48043: LD_INT 1
48045: DEC
48046: ST_TO_ADDR
48047: LD_VAR 0 3
48051: PUSH
48052: FOR_TO
48053: IFFALSE 48156
// begin hc_class = class_apeman ;
48055: LD_ADDR_OWVAR 28
48059: PUSH
48060: LD_INT 12
48062: ST_TO_ADDR
// hc_gallery =  ;
48063: LD_ADDR_OWVAR 33
48067: PUSH
48068: LD_STRING 
48070: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
48071: LD_ADDR_OWVAR 35
48075: PUSH
48076: LD_INT 2
48078: NEG
48079: PPUSH
48080: LD_INT 2
48082: PPUSH
48083: CALL_OW 12
48087: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
48088: LD_ADDR_OWVAR 31
48092: PUSH
48093: LD_INT 1
48095: PPUSH
48096: LD_INT 3
48098: PPUSH
48099: CALL_OW 12
48103: PUSH
48104: LD_INT 1
48106: PPUSH
48107: LD_INT 3
48109: PPUSH
48110: CALL_OW 12
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: ST_TO_ADDR
// animal := CreateHuman ;
48127: LD_ADDR_VAR 0 12
48131: PUSH
48132: CALL_OW 44
48136: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48137: LD_VAR 0 12
48141: PPUSH
48142: LD_VAR 0 8
48146: PPUSH
48147: LD_INT 0
48149: PPUSH
48150: CALL 49943 0 3
// end ;
48154: GO 48052
48156: POP
48157: POP
// if enchidnas then
48158: LD_VAR 0 4
48162: IFFALSE 48229
// for i = 1 to enchidnas do
48164: LD_ADDR_VAR 0 11
48168: PUSH
48169: DOUBLE
48170: LD_INT 1
48172: DEC
48173: ST_TO_ADDR
48174: LD_VAR 0 4
48178: PUSH
48179: FOR_TO
48180: IFFALSE 48227
// begin hc_class = 13 ;
48182: LD_ADDR_OWVAR 28
48186: PUSH
48187: LD_INT 13
48189: ST_TO_ADDR
// hc_gallery =  ;
48190: LD_ADDR_OWVAR 33
48194: PUSH
48195: LD_STRING 
48197: ST_TO_ADDR
// animal := CreateHuman ;
48198: LD_ADDR_VAR 0 12
48202: PUSH
48203: CALL_OW 44
48207: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48208: LD_VAR 0 12
48212: PPUSH
48213: LD_VAR 0 8
48217: PPUSH
48218: LD_INT 0
48220: PPUSH
48221: CALL 49943 0 3
// end ;
48225: GO 48179
48227: POP
48228: POP
// if fishes then
48229: LD_VAR 0 7
48233: IFFALSE 48300
// for i = 1 to fishes do
48235: LD_ADDR_VAR 0 11
48239: PUSH
48240: DOUBLE
48241: LD_INT 1
48243: DEC
48244: ST_TO_ADDR
48245: LD_VAR 0 7
48249: PUSH
48250: FOR_TO
48251: IFFALSE 48298
// begin hc_class = 20 ;
48253: LD_ADDR_OWVAR 28
48257: PUSH
48258: LD_INT 20
48260: ST_TO_ADDR
// hc_gallery =  ;
48261: LD_ADDR_OWVAR 33
48265: PUSH
48266: LD_STRING 
48268: ST_TO_ADDR
// animal := CreateHuman ;
48269: LD_ADDR_VAR 0 12
48273: PUSH
48274: CALL_OW 44
48278: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
48279: LD_VAR 0 12
48283: PPUSH
48284: LD_VAR 0 9
48288: PPUSH
48289: LD_INT 0
48291: PPUSH
48292: CALL 49943 0 3
// end ;
48296: GO 48250
48298: POP
48299: POP
// end ;
48300: LD_VAR 0 10
48304: RET
// export function WantHeal ( sci , unit ) ; begin
48305: LD_INT 0
48307: PPUSH
// if GetTaskList ( sci ) > 0 then
48308: LD_VAR 0 1
48312: PPUSH
48313: CALL_OW 437
48317: PUSH
48318: LD_INT 0
48320: GREATER
48321: IFFALSE 48393
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
48323: LD_VAR 0 1
48327: PPUSH
48328: CALL_OW 437
48332: PUSH
48333: LD_INT 1
48335: ARRAY
48336: PUSH
48337: LD_INT 1
48339: ARRAY
48340: PUSH
48341: LD_STRING l
48343: EQUAL
48344: IFFALSE 48371
48346: PUSH
48347: LD_VAR 0 1
48351: PPUSH
48352: CALL_OW 437
48356: PUSH
48357: LD_INT 1
48359: ARRAY
48360: PUSH
48361: LD_INT 4
48363: ARRAY
48364: PUSH
48365: LD_VAR 0 2
48369: EQUAL
48370: AND
48371: IFFALSE 48383
// result := true else
48373: LD_ADDR_VAR 0 3
48377: PUSH
48378: LD_INT 1
48380: ST_TO_ADDR
48381: GO 48391
// result := false ;
48383: LD_ADDR_VAR 0 3
48387: PUSH
48388: LD_INT 0
48390: ST_TO_ADDR
// end else
48391: GO 48401
// result := false ;
48393: LD_ADDR_VAR 0 3
48397: PUSH
48398: LD_INT 0
48400: ST_TO_ADDR
// end ;
48401: LD_VAR 0 3
48405: RET
// export function HealTarget ( sci ) ; begin
48406: LD_INT 0
48408: PPUSH
// if not sci then
48409: LD_VAR 0 1
48413: NOT
48414: IFFALSE 48418
// exit ;
48416: GO 48483
// result := 0 ;
48418: LD_ADDR_VAR 0 2
48422: PUSH
48423: LD_INT 0
48425: ST_TO_ADDR
// if GetTaskList ( sci ) then
48426: LD_VAR 0 1
48430: PPUSH
48431: CALL_OW 437
48435: IFFALSE 48483
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
48437: LD_VAR 0 1
48441: PPUSH
48442: CALL_OW 437
48446: PUSH
48447: LD_INT 1
48449: ARRAY
48450: PUSH
48451: LD_INT 1
48453: ARRAY
48454: PUSH
48455: LD_STRING l
48457: EQUAL
48458: IFFALSE 48483
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
48460: LD_ADDR_VAR 0 2
48464: PUSH
48465: LD_VAR 0 1
48469: PPUSH
48470: CALL_OW 437
48474: PUSH
48475: LD_INT 1
48477: ARRAY
48478: PUSH
48479: LD_INT 4
48481: ARRAY
48482: ST_TO_ADDR
// end ;
48483: LD_VAR 0 2
48487: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
48488: LD_INT 0
48490: PPUSH
48491: PPUSH
48492: PPUSH
48493: PPUSH
// if not base_units then
48494: LD_VAR 0 1
48498: NOT
48499: IFFALSE 48503
// exit ;
48501: GO 48590
// result := false ;
48503: LD_ADDR_VAR 0 2
48507: PUSH
48508: LD_INT 0
48510: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
48511: LD_ADDR_VAR 0 5
48515: PUSH
48516: LD_VAR 0 1
48520: PPUSH
48521: LD_INT 21
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PPUSH
48531: CALL_OW 72
48535: ST_TO_ADDR
// if not tmp then
48536: LD_VAR 0 5
48540: NOT
48541: IFFALSE 48545
// exit ;
48543: GO 48590
// for i in tmp do
48545: LD_ADDR_VAR 0 3
48549: PUSH
48550: LD_VAR 0 5
48554: PUSH
48555: FOR_IN
48556: IFFALSE 48588
// begin result := EnemyInRange ( i , 22 ) ;
48558: LD_ADDR_VAR 0 2
48562: PUSH
48563: LD_VAR 0 3
48567: PPUSH
48568: LD_INT 22
48570: PPUSH
48571: CALL 46015 0 2
48575: ST_TO_ADDR
// if result then
48576: LD_VAR 0 2
48580: IFFALSE 48586
// exit ;
48582: POP
48583: POP
48584: GO 48590
// end ;
48586: GO 48555
48588: POP
48589: POP
// end ;
48590: LD_VAR 0 2
48594: RET
// export function FilterByTag ( units , tag ) ; begin
48595: LD_INT 0
48597: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
48598: LD_ADDR_VAR 0 3
48602: PUSH
48603: LD_VAR 0 1
48607: PPUSH
48608: LD_INT 120
48610: PUSH
48611: LD_VAR 0 2
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PPUSH
48620: CALL_OW 72
48624: ST_TO_ADDR
// end ;
48625: LD_VAR 0 3
48629: RET
// export function IsDriver ( un ) ; begin
48630: LD_INT 0
48632: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
48633: LD_ADDR_VAR 0 2
48637: PUSH
48638: LD_VAR 0 1
48642: PUSH
48643: LD_INT 55
48645: PUSH
48646: EMPTY
48647: LIST
48648: PPUSH
48649: CALL_OW 69
48653: IN
48654: ST_TO_ADDR
// end ;
48655: LD_VAR 0 2
48659: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
48660: LD_INT 0
48662: PPUSH
48663: PPUSH
// list := [ ] ;
48664: LD_ADDR_VAR 0 5
48668: PUSH
48669: EMPTY
48670: ST_TO_ADDR
// case d of 0 :
48671: LD_VAR 0 3
48675: PUSH
48676: LD_INT 0
48678: DOUBLE
48679: EQUAL
48680: IFTRUE 48684
48682: GO 48817
48684: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
48685: LD_ADDR_VAR 0 5
48689: PUSH
48690: LD_VAR 0 1
48694: PUSH
48695: LD_INT 4
48697: MINUS
48698: PUSH
48699: LD_VAR 0 2
48703: PUSH
48704: LD_INT 4
48706: MINUS
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: LIST
48715: PUSH
48716: LD_VAR 0 1
48720: PUSH
48721: LD_INT 3
48723: MINUS
48724: PUSH
48725: LD_VAR 0 2
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: LIST
48737: PUSH
48738: LD_VAR 0 1
48742: PUSH
48743: LD_INT 4
48745: PLUS
48746: PUSH
48747: LD_VAR 0 2
48751: PUSH
48752: LD_INT 4
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: LIST
48759: PUSH
48760: LD_VAR 0 1
48764: PUSH
48765: LD_INT 3
48767: PLUS
48768: PUSH
48769: LD_VAR 0 2
48773: PUSH
48774: LD_INT 3
48776: PLUS
48777: PUSH
48778: LD_INT 5
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: LIST
48785: PUSH
48786: LD_VAR 0 1
48790: PUSH
48791: LD_VAR 0 2
48795: PUSH
48796: LD_INT 4
48798: PLUS
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: LIST
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: ST_TO_ADDR
// end ; 1 :
48815: GO 49515
48817: LD_INT 1
48819: DOUBLE
48820: EQUAL
48821: IFTRUE 48825
48823: GO 48958
48825: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
48826: LD_ADDR_VAR 0 5
48830: PUSH
48831: LD_VAR 0 1
48835: PUSH
48836: LD_VAR 0 2
48840: PUSH
48841: LD_INT 4
48843: MINUS
48844: PUSH
48845: LD_INT 3
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: LIST
48852: PUSH
48853: LD_VAR 0 1
48857: PUSH
48858: LD_INT 3
48860: MINUS
48861: PUSH
48862: LD_VAR 0 2
48866: PUSH
48867: LD_INT 3
48869: MINUS
48870: PUSH
48871: LD_INT 2
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: LIST
48878: PUSH
48879: LD_VAR 0 1
48883: PUSH
48884: LD_INT 4
48886: MINUS
48887: PUSH
48888: LD_VAR 0 2
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: LIST
48900: PUSH
48901: LD_VAR 0 1
48905: PUSH
48906: LD_VAR 0 2
48910: PUSH
48911: LD_INT 3
48913: PLUS
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: LIST
48922: PUSH
48923: LD_VAR 0 1
48927: PUSH
48928: LD_INT 4
48930: PLUS
48931: PUSH
48932: LD_VAR 0 2
48936: PUSH
48937: LD_INT 4
48939: PLUS
48940: PUSH
48941: LD_INT 5
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: LIST
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: ST_TO_ADDR
// end ; 2 :
48956: GO 49515
48958: LD_INT 2
48960: DOUBLE
48961: EQUAL
48962: IFTRUE 48966
48964: GO 49095
48966: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
48967: LD_ADDR_VAR 0 5
48971: PUSH
48972: LD_VAR 0 1
48976: PUSH
48977: LD_VAR 0 2
48981: PUSH
48982: LD_INT 3
48984: MINUS
48985: PUSH
48986: LD_INT 3
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: LIST
48993: PUSH
48994: LD_VAR 0 1
48998: PUSH
48999: LD_INT 4
49001: PLUS
49002: PUSH
49003: LD_VAR 0 2
49007: PUSH
49008: LD_INT 4
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: LIST
49015: PUSH
49016: LD_VAR 0 1
49020: PUSH
49021: LD_VAR 0 2
49025: PUSH
49026: LD_INT 4
49028: PLUS
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: LIST
49037: PUSH
49038: LD_VAR 0 1
49042: PUSH
49043: LD_INT 3
49045: MINUS
49046: PUSH
49047: LD_VAR 0 2
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: LIST
49059: PUSH
49060: LD_VAR 0 1
49064: PUSH
49065: LD_INT 4
49067: MINUS
49068: PUSH
49069: LD_VAR 0 2
49073: PUSH
49074: LD_INT 4
49076: MINUS
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: LIST
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: ST_TO_ADDR
// end ; 3 :
49093: GO 49515
49095: LD_INT 3
49097: DOUBLE
49098: EQUAL
49099: IFTRUE 49103
49101: GO 49236
49103: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
49104: LD_ADDR_VAR 0 5
49108: PUSH
49109: LD_VAR 0 1
49113: PUSH
49114: LD_INT 3
49116: PLUS
49117: PUSH
49118: LD_VAR 0 2
49122: PUSH
49123: LD_INT 4
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: LIST
49130: PUSH
49131: LD_VAR 0 1
49135: PUSH
49136: LD_INT 4
49138: PLUS
49139: PUSH
49140: LD_VAR 0 2
49144: PUSH
49145: LD_INT 4
49147: PLUS
49148: PUSH
49149: LD_INT 5
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: LIST
49156: PUSH
49157: LD_VAR 0 1
49161: PUSH
49162: LD_INT 4
49164: MINUS
49165: PUSH
49166: LD_VAR 0 2
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: LIST
49178: PUSH
49179: LD_VAR 0 1
49183: PUSH
49184: LD_VAR 0 2
49188: PUSH
49189: LD_INT 4
49191: MINUS
49192: PUSH
49193: LD_INT 3
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: LIST
49200: PUSH
49201: LD_VAR 0 1
49205: PUSH
49206: LD_INT 3
49208: MINUS
49209: PUSH
49210: LD_VAR 0 2
49214: PUSH
49215: LD_INT 3
49217: MINUS
49218: PUSH
49219: LD_INT 2
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: LIST
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: ST_TO_ADDR
// end ; 4 :
49234: GO 49515
49236: LD_INT 4
49238: DOUBLE
49239: EQUAL
49240: IFTRUE 49244
49242: GO 49377
49244: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
49245: LD_ADDR_VAR 0 5
49249: PUSH
49250: LD_VAR 0 1
49254: PUSH
49255: LD_VAR 0 2
49259: PUSH
49260: LD_INT 4
49262: PLUS
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: LIST
49271: PUSH
49272: LD_VAR 0 1
49276: PUSH
49277: LD_INT 3
49279: PLUS
49280: PUSH
49281: LD_VAR 0 2
49285: PUSH
49286: LD_INT 3
49288: PLUS
49289: PUSH
49290: LD_INT 5
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: LIST
49297: PUSH
49298: LD_VAR 0 1
49302: PUSH
49303: LD_INT 4
49305: PLUS
49306: PUSH
49307: LD_VAR 0 2
49311: PUSH
49312: LD_INT 4
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: LIST
49319: PUSH
49320: LD_VAR 0 1
49324: PUSH
49325: LD_VAR 0 2
49329: PUSH
49330: LD_INT 3
49332: MINUS
49333: PUSH
49334: LD_INT 3
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: LIST
49341: PUSH
49342: LD_VAR 0 1
49346: PUSH
49347: LD_INT 4
49349: MINUS
49350: PUSH
49351: LD_VAR 0 2
49355: PUSH
49356: LD_INT 4
49358: MINUS
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: LIST
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: ST_TO_ADDR
// end ; 5 :
49375: GO 49515
49377: LD_INT 5
49379: DOUBLE
49380: EQUAL
49381: IFTRUE 49385
49383: GO 49514
49385: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
49386: LD_ADDR_VAR 0 5
49390: PUSH
49391: LD_VAR 0 1
49395: PUSH
49396: LD_INT 4
49398: MINUS
49399: PUSH
49400: LD_VAR 0 2
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: LIST
49412: PUSH
49413: LD_VAR 0 1
49417: PUSH
49418: LD_VAR 0 2
49422: PUSH
49423: LD_INT 4
49425: MINUS
49426: PUSH
49427: LD_INT 3
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: LIST
49434: PUSH
49435: LD_VAR 0 1
49439: PUSH
49440: LD_INT 4
49442: PLUS
49443: PUSH
49444: LD_VAR 0 2
49448: PUSH
49449: LD_INT 4
49451: PLUS
49452: PUSH
49453: LD_INT 5
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: LIST
49460: PUSH
49461: LD_VAR 0 1
49465: PUSH
49466: LD_INT 3
49468: PLUS
49469: PUSH
49470: LD_VAR 0 2
49474: PUSH
49475: LD_INT 4
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: LIST
49482: PUSH
49483: LD_VAR 0 1
49487: PUSH
49488: LD_VAR 0 2
49492: PUSH
49493: LD_INT 3
49495: PLUS
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: LIST
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: ST_TO_ADDR
// end ; end ;
49512: GO 49515
49514: POP
// result := list ;
49515: LD_ADDR_VAR 0 4
49519: PUSH
49520: LD_VAR 0 5
49524: ST_TO_ADDR
// end ;
49525: LD_VAR 0 4
49529: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
49530: LD_INT 0
49532: PPUSH
49533: PPUSH
49534: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
49535: LD_VAR 0 1
49539: NOT
49540: IFTRUE 49568
49542: PUSH
49543: LD_VAR 0 2
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: LD_INT 3
49556: PUSH
49557: LD_INT 4
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: IN
49566: NOT
49567: OR
49568: IFFALSE 49572
// exit ;
49570: GO 49655
// tmp := [ ] ;
49572: LD_ADDR_VAR 0 5
49576: PUSH
49577: EMPTY
49578: ST_TO_ADDR
// for i in units do
49579: LD_ADDR_VAR 0 4
49583: PUSH
49584: LD_VAR 0 1
49588: PUSH
49589: FOR_IN
49590: IFFALSE 49624
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
49592: LD_ADDR_VAR 0 5
49596: PUSH
49597: LD_VAR 0 5
49601: PPUSH
49602: LD_VAR 0 4
49606: PPUSH
49607: LD_VAR 0 2
49611: PPUSH
49612: CALL_OW 259
49616: PPUSH
49617: CALL 51050 0 2
49621: ST_TO_ADDR
49622: GO 49589
49624: POP
49625: POP
// if not tmp then
49626: LD_VAR 0 5
49630: NOT
49631: IFFALSE 49635
// exit ;
49633: GO 49655
// result := SortListByListDesc ( units , tmp ) ;
49635: LD_ADDR_VAR 0 3
49639: PUSH
49640: LD_VAR 0 1
49644: PPUSH
49645: LD_VAR 0 5
49649: PPUSH
49650: CALL_OW 77
49654: ST_TO_ADDR
// end ;
49655: LD_VAR 0 3
49659: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
49660: LD_INT 0
49662: PPUSH
49663: PPUSH
49664: PPUSH
// result := false ;
49665: LD_ADDR_VAR 0 3
49669: PUSH
49670: LD_INT 0
49672: ST_TO_ADDR
// if not building then
49673: LD_VAR 0 2
49677: NOT
49678: IFFALSE 49682
// exit ;
49680: GO 49826
// x := GetX ( building ) ;
49682: LD_ADDR_VAR 0 4
49686: PUSH
49687: LD_VAR 0 2
49691: PPUSH
49692: CALL_OW 250
49696: ST_TO_ADDR
// y := GetY ( building ) ;
49697: LD_ADDR_VAR 0 5
49701: PUSH
49702: LD_VAR 0 2
49706: PPUSH
49707: CALL_OW 251
49711: ST_TO_ADDR
// if not x or not y then
49712: LD_VAR 0 4
49716: NOT
49717: IFTRUE 49726
49719: PUSH
49720: LD_VAR 0 5
49724: NOT
49725: OR
49726: IFFALSE 49730
// exit ;
49728: GO 49826
// if GetTaskList ( unit ) then
49730: LD_VAR 0 1
49734: PPUSH
49735: CALL_OW 437
49739: IFFALSE 49826
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
49741: LD_STRING e
49743: PUSH
49744: LD_VAR 0 1
49748: PPUSH
49749: CALL_OW 437
49753: PUSH
49754: LD_INT 1
49756: ARRAY
49757: PUSH
49758: LD_INT 1
49760: ARRAY
49761: EQUAL
49762: IFFALSE 49789
49764: PUSH
49765: LD_VAR 0 4
49769: PUSH
49770: LD_VAR 0 1
49774: PPUSH
49775: CALL_OW 437
49779: PUSH
49780: LD_INT 1
49782: ARRAY
49783: PUSH
49784: LD_INT 2
49786: ARRAY
49787: EQUAL
49788: AND
49789: IFFALSE 49816
49791: PUSH
49792: LD_VAR 0 5
49796: PUSH
49797: LD_VAR 0 1
49801: PPUSH
49802: CALL_OW 437
49806: PUSH
49807: LD_INT 1
49809: ARRAY
49810: PUSH
49811: LD_INT 3
49813: ARRAY
49814: EQUAL
49815: AND
49816: IFFALSE 49826
// result := true end ;
49818: LD_ADDR_VAR 0 3
49822: PUSH
49823: LD_INT 1
49825: ST_TO_ADDR
// end ;
49826: LD_VAR 0 3
49830: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
49831: LD_INT 0
49833: PPUSH
// result := false ;
49834: LD_ADDR_VAR 0 4
49838: PUSH
49839: LD_INT 0
49841: ST_TO_ADDR
// if GetTaskList ( unit ) then
49842: LD_VAR 0 1
49846: PPUSH
49847: CALL_OW 437
49851: IFFALSE 49938
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
49853: LD_STRING M
49855: PUSH
49856: LD_VAR 0 1
49860: PPUSH
49861: CALL_OW 437
49865: PUSH
49866: LD_INT 1
49868: ARRAY
49869: PUSH
49870: LD_INT 1
49872: ARRAY
49873: EQUAL
49874: IFFALSE 49901
49876: PUSH
49877: LD_VAR 0 2
49881: PUSH
49882: LD_VAR 0 1
49886: PPUSH
49887: CALL_OW 437
49891: PUSH
49892: LD_INT 1
49894: ARRAY
49895: PUSH
49896: LD_INT 2
49898: ARRAY
49899: EQUAL
49900: AND
49901: IFFALSE 49928
49903: PUSH
49904: LD_VAR 0 3
49908: PUSH
49909: LD_VAR 0 1
49913: PPUSH
49914: CALL_OW 437
49918: PUSH
49919: LD_INT 1
49921: ARRAY
49922: PUSH
49923: LD_INT 3
49925: ARRAY
49926: EQUAL
49927: AND
49928: IFFALSE 49938
// result := true ;
49930: LD_ADDR_VAR 0 4
49934: PUSH
49935: LD_INT 1
49937: ST_TO_ADDR
// end ; end ;
49938: LD_VAR 0 4
49942: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
49943: LD_INT 0
49945: PPUSH
49946: PPUSH
49947: PPUSH
49948: PPUSH
// if not unit or not area then
49949: LD_VAR 0 1
49953: NOT
49954: IFTRUE 49963
49956: PUSH
49957: LD_VAR 0 2
49961: NOT
49962: OR
49963: IFFALSE 49967
// exit ;
49965: GO 50143
// tmp := AreaToList ( area , i ) ;
49967: LD_ADDR_VAR 0 6
49971: PUSH
49972: LD_VAR 0 2
49976: PPUSH
49977: LD_VAR 0 5
49981: PPUSH
49982: CALL_OW 517
49986: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
49987: LD_ADDR_VAR 0 5
49991: PUSH
49992: DOUBLE
49993: LD_INT 1
49995: DEC
49996: ST_TO_ADDR
49997: LD_VAR 0 6
50001: PUSH
50002: LD_INT 1
50004: ARRAY
50005: PUSH
50006: FOR_TO
50007: IFFALSE 50141
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
50009: LD_ADDR_VAR 0 7
50013: PUSH
50014: LD_VAR 0 6
50018: PUSH
50019: LD_INT 1
50021: ARRAY
50022: PUSH
50023: LD_VAR 0 5
50027: ARRAY
50028: PUSH
50029: LD_VAR 0 6
50033: PUSH
50034: LD_INT 2
50036: ARRAY
50037: PUSH
50038: LD_VAR 0 5
50042: ARRAY
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
50048: LD_INT 92
50050: PUSH
50051: LD_VAR 0 7
50055: PUSH
50056: LD_INT 1
50058: ARRAY
50059: PUSH
50060: LD_VAR 0 7
50064: PUSH
50065: LD_INT 2
50067: ARRAY
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: PPUSH
50078: CALL_OW 69
50082: PUSH
50083: LD_INT 0
50085: EQUAL
50086: IFFALSE 50139
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
50088: LD_VAR 0 1
50092: PPUSH
50093: LD_VAR 0 7
50097: PUSH
50098: LD_INT 1
50100: ARRAY
50101: PPUSH
50102: LD_VAR 0 7
50106: PUSH
50107: LD_INT 2
50109: ARRAY
50110: PPUSH
50111: LD_VAR 0 3
50115: PPUSH
50116: CALL_OW 48
// result := IsPlaced ( unit ) ;
50120: LD_ADDR_VAR 0 4
50124: PUSH
50125: LD_VAR 0 1
50129: PPUSH
50130: CALL_OW 305
50134: ST_TO_ADDR
// exit ;
50135: POP
50136: POP
50137: GO 50143
// end ; end ;
50139: GO 50006
50141: POP
50142: POP
// end ;
50143: LD_VAR 0 4
50147: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
50148: LD_INT 0
50150: PPUSH
50151: PPUSH
50152: PPUSH
// if not side or side > 8 then
50153: LD_VAR 0 1
50157: NOT
50158: IFTRUE 50170
50160: PUSH
50161: LD_VAR 0 1
50165: PUSH
50166: LD_INT 8
50168: GREATER
50169: OR
50170: IFFALSE 50174
// exit ;
50172: GO 50361
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
50174: LD_ADDR_VAR 0 4
50178: PUSH
50179: LD_INT 22
50181: PUSH
50182: LD_VAR 0 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 21
50193: PUSH
50194: LD_INT 3
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PPUSH
50205: CALL_OW 69
50209: ST_TO_ADDR
// if not tmp then
50210: LD_VAR 0 4
50214: NOT
50215: IFFALSE 50219
// exit ;
50217: GO 50361
// enable_addtolog := true ;
50219: LD_ADDR_OWVAR 81
50223: PUSH
50224: LD_INT 1
50226: ST_TO_ADDR
// AddToLog ( [ ) ;
50227: LD_STRING [
50229: PPUSH
50230: CALL_OW 561
// for i in tmp do
50234: LD_ADDR_VAR 0 3
50238: PUSH
50239: LD_VAR 0 4
50243: PUSH
50244: FOR_IN
50245: IFFALSE 50352
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
50247: LD_STRING [
50249: PUSH
50250: LD_VAR 0 3
50254: PPUSH
50255: CALL_OW 266
50259: STR
50260: PUSH
50261: LD_STRING , 
50263: STR
50264: PUSH
50265: LD_VAR 0 3
50269: PPUSH
50270: CALL_OW 250
50274: STR
50275: PUSH
50276: LD_STRING , 
50278: STR
50279: PUSH
50280: LD_VAR 0 3
50284: PPUSH
50285: CALL_OW 251
50289: STR
50290: PUSH
50291: LD_STRING , 
50293: STR
50294: PUSH
50295: LD_VAR 0 3
50299: PPUSH
50300: CALL_OW 254
50304: STR
50305: PUSH
50306: LD_STRING , 
50308: STR
50309: PUSH
50310: LD_VAR 0 3
50314: PPUSH
50315: LD_INT 1
50317: PPUSH
50318: CALL_OW 268
50322: STR
50323: PUSH
50324: LD_STRING , 
50326: STR
50327: PUSH
50328: LD_VAR 0 3
50332: PPUSH
50333: LD_INT 2
50335: PPUSH
50336: CALL_OW 268
50340: STR
50341: PUSH
50342: LD_STRING ],
50344: STR
50345: PPUSH
50346: CALL_OW 561
// end ;
50350: GO 50244
50352: POP
50353: POP
// AddToLog ( ]; ) ;
50354: LD_STRING ];
50356: PPUSH
50357: CALL_OW 561
// end ;
50361: LD_VAR 0 2
50365: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
50366: LD_INT 0
50368: PPUSH
50369: PPUSH
50370: PPUSH
50371: PPUSH
50372: PPUSH
// if not area or not rate or not max then
50373: LD_VAR 0 1
50377: NOT
50378: IFTRUE 50387
50380: PUSH
50381: LD_VAR 0 2
50385: NOT
50386: OR
50387: IFTRUE 50396
50389: PUSH
50390: LD_VAR 0 4
50394: NOT
50395: OR
50396: IFFALSE 50400
// exit ;
50398: GO 50589
// while 1 do
50400: LD_INT 1
50402: IFFALSE 50589
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
50404: LD_ADDR_VAR 0 9
50408: PUSH
50409: LD_VAR 0 1
50413: PPUSH
50414: LD_INT 1
50416: PPUSH
50417: CALL_OW 287
50421: PUSH
50422: LD_INT 10
50424: MUL
50425: ST_TO_ADDR
// r := rate / 10 ;
50426: LD_ADDR_VAR 0 7
50430: PUSH
50431: LD_VAR 0 2
50435: PUSH
50436: LD_INT 10
50438: DIVREAL
50439: ST_TO_ADDR
// time := 1 1$00 ;
50440: LD_ADDR_VAR 0 8
50444: PUSH
50445: LD_INT 2100
50447: ST_TO_ADDR
// if amount < min then
50448: LD_VAR 0 9
50452: PUSH
50453: LD_VAR 0 3
50457: LESS
50458: IFFALSE 50476
// r := r * 2 else
50460: LD_ADDR_VAR 0 7
50464: PUSH
50465: LD_VAR 0 7
50469: PUSH
50470: LD_INT 2
50472: MUL
50473: ST_TO_ADDR
50474: GO 50502
// if amount > max then
50476: LD_VAR 0 9
50480: PUSH
50481: LD_VAR 0 4
50485: GREATER
50486: IFFALSE 50502
// r := r / 2 ;
50488: LD_ADDR_VAR 0 7
50492: PUSH
50493: LD_VAR 0 7
50497: PUSH
50498: LD_INT 2
50500: DIVREAL
50501: ST_TO_ADDR
// time := time / r ;
50502: LD_ADDR_VAR 0 8
50506: PUSH
50507: LD_VAR 0 8
50511: PUSH
50512: LD_VAR 0 7
50516: DIVREAL
50517: ST_TO_ADDR
// if time < 0 then
50518: LD_VAR 0 8
50522: PUSH
50523: LD_INT 0
50525: LESS
50526: IFFALSE 50543
// time := time * - 1 ;
50528: LD_ADDR_VAR 0 8
50532: PUSH
50533: LD_VAR 0 8
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: MUL
50542: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
50543: LD_VAR 0 8
50547: PUSH
50548: LD_INT 35
50550: PPUSH
50551: LD_INT 875
50553: PPUSH
50554: CALL_OW 12
50558: PLUS
50559: PPUSH
50560: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
50564: LD_INT 1
50566: PPUSH
50567: LD_INT 5
50569: PPUSH
50570: CALL_OW 12
50574: PPUSH
50575: LD_VAR 0 1
50579: PPUSH
50580: LD_INT 1
50582: PPUSH
50583: CALL_OW 55
// end ;
50587: GO 50400
// end ;
50589: LD_VAR 0 5
50593: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
50594: LD_INT 0
50596: PPUSH
50597: PPUSH
50598: PPUSH
50599: PPUSH
50600: PPUSH
50601: PPUSH
50602: PPUSH
50603: PPUSH
// if not turrets or not factories then
50604: LD_VAR 0 1
50608: NOT
50609: IFTRUE 50618
50611: PUSH
50612: LD_VAR 0 2
50616: NOT
50617: OR
50618: IFFALSE 50622
// exit ;
50620: GO 50929
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
50622: LD_ADDR_VAR 0 10
50626: PUSH
50627: LD_INT 5
50629: PUSH
50630: LD_INT 6
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: LD_INT 4
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 3
50649: PUSH
50650: LD_INT 5
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 24
50664: PUSH
50665: LD_INT 25
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 23
50674: PUSH
50675: LD_INT 27
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 42
50688: PUSH
50689: LD_INT 43
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 44
50698: PUSH
50699: LD_INT 46
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 45
50708: PUSH
50709: LD_INT 47
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: LIST
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: LIST
50725: ST_TO_ADDR
// result := [ ] ;
50726: LD_ADDR_VAR 0 3
50730: PUSH
50731: EMPTY
50732: ST_TO_ADDR
// for i in turrets do
50733: LD_ADDR_VAR 0 4
50737: PUSH
50738: LD_VAR 0 1
50742: PUSH
50743: FOR_IN
50744: IFFALSE 50927
// begin nat := GetNation ( i ) ;
50746: LD_ADDR_VAR 0 7
50750: PUSH
50751: LD_VAR 0 4
50755: PPUSH
50756: CALL_OW 248
50760: ST_TO_ADDR
// weapon := 0 ;
50761: LD_ADDR_VAR 0 8
50765: PUSH
50766: LD_INT 0
50768: ST_TO_ADDR
// if not nat then
50769: LD_VAR 0 7
50773: NOT
50774: IFFALSE 50778
// continue ;
50776: GO 50743
// for j in list [ nat ] do
50778: LD_ADDR_VAR 0 5
50782: PUSH
50783: LD_VAR 0 10
50787: PUSH
50788: LD_VAR 0 7
50792: ARRAY
50793: PUSH
50794: FOR_IN
50795: IFFALSE 50836
// if GetBWeapon ( i ) = j [ 1 ] then
50797: LD_VAR 0 4
50801: PPUSH
50802: CALL_OW 269
50806: PUSH
50807: LD_VAR 0 5
50811: PUSH
50812: LD_INT 1
50814: ARRAY
50815: EQUAL
50816: IFFALSE 50834
// begin weapon := j [ 2 ] ;
50818: LD_ADDR_VAR 0 8
50822: PUSH
50823: LD_VAR 0 5
50827: PUSH
50828: LD_INT 2
50830: ARRAY
50831: ST_TO_ADDR
// break ;
50832: GO 50836
// end ;
50834: GO 50794
50836: POP
50837: POP
// if not weapon then
50838: LD_VAR 0 8
50842: NOT
50843: IFFALSE 50847
// continue ;
50845: GO 50743
// for k in factories do
50847: LD_ADDR_VAR 0 6
50851: PUSH
50852: LD_VAR 0 2
50856: PUSH
50857: FOR_IN
50858: IFFALSE 50923
// begin weapons := AvailableWeaponList ( k ) ;
50860: LD_ADDR_VAR 0 9
50864: PUSH
50865: LD_VAR 0 6
50869: PPUSH
50870: CALL_OW 478
50874: ST_TO_ADDR
// if not weapons then
50875: LD_VAR 0 9
50879: NOT
50880: IFFALSE 50884
// continue ;
50882: GO 50857
// if weapon in weapons then
50884: LD_VAR 0 8
50888: PUSH
50889: LD_VAR 0 9
50893: IN
50894: IFFALSE 50921
// begin result := [ i , weapon ] ;
50896: LD_ADDR_VAR 0 3
50900: PUSH
50901: LD_VAR 0 4
50905: PUSH
50906: LD_VAR 0 8
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: ST_TO_ADDR
// exit ;
50915: POP
50916: POP
50917: POP
50918: POP
50919: GO 50929
// end ; end ;
50921: GO 50857
50923: POP
50924: POP
// end ;
50925: GO 50743
50927: POP
50928: POP
// end ;
50929: LD_VAR 0 3
50933: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
50934: LD_INT 0
50936: PPUSH
// if not side or side > 8 then
50937: LD_VAR 0 3
50941: NOT
50942: IFTRUE 50954
50944: PUSH
50945: LD_VAR 0 3
50949: PUSH
50950: LD_INT 8
50952: GREATER
50953: OR
50954: IFFALSE 50958
// exit ;
50956: GO 51017
// if not range then
50958: LD_VAR 0 4
50962: NOT
50963: IFFALSE 50974
// range := - 12 ;
50965: LD_ADDR_VAR 0 4
50969: PUSH
50970: LD_INT 12
50972: NEG
50973: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
50974: LD_VAR 0 1
50978: PPUSH
50979: LD_VAR 0 2
50983: PPUSH
50984: LD_VAR 0 3
50988: PPUSH
50989: LD_VAR 0 4
50993: PPUSH
50994: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
50998: LD_VAR 0 1
51002: PPUSH
51003: LD_VAR 0 2
51007: PPUSH
51008: LD_VAR 0 3
51012: PPUSH
51013: CALL_OW 331
// end ;
51017: LD_VAR 0 5
51021: RET
// export function Video ( mode ) ; begin
51022: LD_INT 0
51024: PPUSH
// ingame_video = mode ;
51025: LD_ADDR_OWVAR 52
51029: PUSH
51030: LD_VAR 0 1
51034: ST_TO_ADDR
// interface_hidden = mode ;
51035: LD_ADDR_OWVAR 54
51039: PUSH
51040: LD_VAR 0 1
51044: ST_TO_ADDR
// end ;
51045: LD_VAR 0 2
51049: RET
// export function Join ( array , element ) ; begin
51050: LD_INT 0
51052: PPUSH
// result := Replace ( array , array + 1 , element ) ;
51053: LD_ADDR_VAR 0 3
51057: PUSH
51058: LD_VAR 0 1
51062: PPUSH
51063: LD_VAR 0 1
51067: PUSH
51068: LD_INT 1
51070: PLUS
51071: PPUSH
51072: LD_VAR 0 2
51076: PPUSH
51077: CALL_OW 1
51081: ST_TO_ADDR
// end ;
51082: LD_VAR 0 3
51086: RET
// export function JoinUnion ( array , element ) ; begin
51087: LD_INT 0
51089: PPUSH
// result := array union element ;
51090: LD_ADDR_VAR 0 3
51094: PUSH
51095: LD_VAR 0 1
51099: PUSH
51100: LD_VAR 0 2
51104: UNION
51105: ST_TO_ADDR
// end ;
51106: LD_VAR 0 3
51110: RET
// export function GetBehemoths ( side ) ; begin
51111: LD_INT 0
51113: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
51114: LD_ADDR_VAR 0 2
51118: PUSH
51119: LD_INT 22
51121: PUSH
51122: LD_VAR 0 1
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 31
51133: PUSH
51134: LD_INT 25
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PPUSH
51145: CALL_OW 69
51149: ST_TO_ADDR
// end ;
51150: LD_VAR 0 2
51154: RET
// export function Shuffle ( array ) ; var i , index ; begin
51155: LD_INT 0
51157: PPUSH
51158: PPUSH
51159: PPUSH
// result := [ ] ;
51160: LD_ADDR_VAR 0 2
51164: PUSH
51165: EMPTY
51166: ST_TO_ADDR
// if not array then
51167: LD_VAR 0 1
51171: NOT
51172: IFFALSE 51176
// exit ;
51174: GO 51275
// Randomize ;
51176: CALL_OW 10
// for i = array downto 1 do
51180: LD_ADDR_VAR 0 3
51184: PUSH
51185: DOUBLE
51186: LD_VAR 0 1
51190: INC
51191: ST_TO_ADDR
51192: LD_INT 1
51194: PUSH
51195: FOR_DOWNTO
51196: IFFALSE 51273
// begin index := rand ( 1 , array ) ;
51198: LD_ADDR_VAR 0 4
51202: PUSH
51203: LD_INT 1
51205: PPUSH
51206: LD_VAR 0 1
51210: PPUSH
51211: CALL_OW 12
51215: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
51216: LD_ADDR_VAR 0 2
51220: PUSH
51221: LD_VAR 0 2
51225: PPUSH
51226: LD_VAR 0 2
51230: PUSH
51231: LD_INT 1
51233: PLUS
51234: PPUSH
51235: LD_VAR 0 1
51239: PUSH
51240: LD_VAR 0 4
51244: ARRAY
51245: PPUSH
51246: CALL_OW 2
51250: ST_TO_ADDR
// array := Delete ( array , index ) ;
51251: LD_ADDR_VAR 0 1
51255: PUSH
51256: LD_VAR 0 1
51260: PPUSH
51261: LD_VAR 0 4
51265: PPUSH
51266: CALL_OW 3
51270: ST_TO_ADDR
// end ;
51271: GO 51195
51273: POP
51274: POP
// end ;
51275: LD_VAR 0 2
51279: RET
// export function GetBaseMaterials ( base ) ; begin
51280: LD_INT 0
51282: PPUSH
// result := [ 0 , 0 , 0 ] ;
51283: LD_ADDR_VAR 0 2
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: LIST
51301: ST_TO_ADDR
// if not base then
51302: LD_VAR 0 1
51306: NOT
51307: IFFALSE 51311
// exit ;
51309: GO 51360
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
51311: LD_ADDR_VAR 0 2
51315: PUSH
51316: LD_VAR 0 1
51320: PPUSH
51321: LD_INT 1
51323: PPUSH
51324: CALL_OW 275
51328: PUSH
51329: LD_VAR 0 1
51333: PPUSH
51334: LD_INT 2
51336: PPUSH
51337: CALL_OW 275
51341: PUSH
51342: LD_VAR 0 1
51346: PPUSH
51347: LD_INT 3
51349: PPUSH
51350: CALL_OW 275
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: LIST
51359: ST_TO_ADDR
// end ;
51360: LD_VAR 0 2
51364: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
51365: LD_INT 0
51367: PPUSH
51368: PPUSH
// result := array ;
51369: LD_ADDR_VAR 0 3
51373: PUSH
51374: LD_VAR 0 1
51378: ST_TO_ADDR
// if size >= result then
51379: LD_VAR 0 2
51383: PUSH
51384: LD_VAR 0 3
51388: GREATEREQUAL
51389: IFFALSE 51393
// exit ;
51391: GO 51443
// if size then
51393: LD_VAR 0 2
51397: IFFALSE 51443
// for i := array downto size do
51399: LD_ADDR_VAR 0 4
51403: PUSH
51404: DOUBLE
51405: LD_VAR 0 1
51409: INC
51410: ST_TO_ADDR
51411: LD_VAR 0 2
51415: PUSH
51416: FOR_DOWNTO
51417: IFFALSE 51441
// result := Delete ( result , result ) ;
51419: LD_ADDR_VAR 0 3
51423: PUSH
51424: LD_VAR 0 3
51428: PPUSH
51429: LD_VAR 0 3
51433: PPUSH
51434: CALL_OW 3
51438: ST_TO_ADDR
51439: GO 51416
51441: POP
51442: POP
// end ;
51443: LD_VAR 0 3
51447: RET
// export function ComExit ( unit ) ; var tmp ; begin
51448: LD_INT 0
51450: PPUSH
51451: PPUSH
// if not IsInUnit ( unit ) then
51452: LD_VAR 0 1
51456: PPUSH
51457: CALL_OW 310
51461: NOT
51462: IFFALSE 51466
// exit ;
51464: GO 51526
// tmp := IsInUnit ( unit ) ;
51466: LD_ADDR_VAR 0 3
51470: PUSH
51471: LD_VAR 0 1
51475: PPUSH
51476: CALL_OW 310
51480: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
51481: LD_VAR 0 3
51485: PPUSH
51486: CALL_OW 247
51490: PUSH
51491: LD_INT 2
51493: EQUAL
51494: IFFALSE 51507
// ComExitVehicle ( unit ) else
51496: LD_VAR 0 1
51500: PPUSH
51501: CALL_OW 121
51505: GO 51516
// ComExitBuilding ( unit ) ;
51507: LD_VAR 0 1
51511: PPUSH
51512: CALL_OW 122
// result := tmp ;
51516: LD_ADDR_VAR 0 2
51520: PUSH
51521: LD_VAR 0 3
51525: ST_TO_ADDR
// end ;
51526: LD_VAR 0 2
51530: RET
// export function ComExitAll ( units ) ; var i ; begin
51531: LD_INT 0
51533: PPUSH
51534: PPUSH
// if not units then
51535: LD_VAR 0 1
51539: NOT
51540: IFFALSE 51544
// exit ;
51542: GO 51570
// for i in units do
51544: LD_ADDR_VAR 0 3
51548: PUSH
51549: LD_VAR 0 1
51553: PUSH
51554: FOR_IN
51555: IFFALSE 51568
// ComExit ( i ) ;
51557: LD_VAR 0 3
51561: PPUSH
51562: CALL 51448 0 1
51566: GO 51554
51568: POP
51569: POP
// end ;
51570: LD_VAR 0 2
51574: RET
// export function ResetHc ; begin
51575: LD_INT 0
51577: PPUSH
// InitHc ;
51578: CALL_OW 19
// hc_importance := 0 ;
51582: LD_ADDR_OWVAR 32
51586: PUSH
51587: LD_INT 0
51589: ST_TO_ADDR
// end ;
51590: LD_VAR 0 1
51594: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
51595: LD_INT 0
51597: PPUSH
51598: PPUSH
51599: PPUSH
// _x := ( x1 + x2 ) div 2 ;
51600: LD_ADDR_VAR 0 6
51604: PUSH
51605: LD_VAR 0 1
51609: PUSH
51610: LD_VAR 0 3
51614: PLUS
51615: PUSH
51616: LD_INT 2
51618: DIV
51619: ST_TO_ADDR
// if _x < 0 then
51620: LD_VAR 0 6
51624: PUSH
51625: LD_INT 0
51627: LESS
51628: IFFALSE 51645
// _x := _x * - 1 ;
51630: LD_ADDR_VAR 0 6
51634: PUSH
51635: LD_VAR 0 6
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: MUL
51644: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
51645: LD_ADDR_VAR 0 7
51649: PUSH
51650: LD_VAR 0 2
51654: PUSH
51655: LD_VAR 0 4
51659: PLUS
51660: PUSH
51661: LD_INT 2
51663: DIV
51664: ST_TO_ADDR
// if _y < 0 then
51665: LD_VAR 0 7
51669: PUSH
51670: LD_INT 0
51672: LESS
51673: IFFALSE 51690
// _y := _y * - 1 ;
51675: LD_ADDR_VAR 0 7
51679: PUSH
51680: LD_VAR 0 7
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: MUL
51689: ST_TO_ADDR
// result := [ _x , _y ] ;
51690: LD_ADDR_VAR 0 5
51694: PUSH
51695: LD_VAR 0 6
51699: PUSH
51700: LD_VAR 0 7
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: ST_TO_ADDR
// end ;
51709: LD_VAR 0 5
51713: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
51714: LD_INT 0
51716: PPUSH
51717: PPUSH
51718: PPUSH
51719: PPUSH
// task := GetTaskList ( unit ) ;
51720: LD_ADDR_VAR 0 7
51724: PUSH
51725: LD_VAR 0 1
51729: PPUSH
51730: CALL_OW 437
51734: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
51735: LD_VAR 0 7
51739: NOT
51740: IFFALSE 51759
51742: PUSH
51743: LD_VAR 0 1
51747: PPUSH
51748: LD_VAR 0 2
51752: PPUSH
51753: CALL_OW 308
51757: NOT
51758: AND
51759: IFFALSE 51763
// exit ;
51761: GO 51881
// if IsInArea ( unit , area ) then
51763: LD_VAR 0 1
51767: PPUSH
51768: LD_VAR 0 2
51772: PPUSH
51773: CALL_OW 308
51777: IFFALSE 51795
// begin ComMoveToArea ( unit , goAway ) ;
51779: LD_VAR 0 1
51783: PPUSH
51784: LD_VAR 0 3
51788: PPUSH
51789: CALL_OW 113
// exit ;
51793: GO 51881
// end ; if task [ 1 ] [ 1 ] <> M then
51795: LD_VAR 0 7
51799: PUSH
51800: LD_INT 1
51802: ARRAY
51803: PUSH
51804: LD_INT 1
51806: ARRAY
51807: PUSH
51808: LD_STRING M
51810: NONEQUAL
51811: IFFALSE 51815
// exit ;
51813: GO 51881
// x := task [ 1 ] [ 2 ] ;
51815: LD_ADDR_VAR 0 5
51819: PUSH
51820: LD_VAR 0 7
51824: PUSH
51825: LD_INT 1
51827: ARRAY
51828: PUSH
51829: LD_INT 2
51831: ARRAY
51832: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
51833: LD_ADDR_VAR 0 6
51837: PUSH
51838: LD_VAR 0 7
51842: PUSH
51843: LD_INT 1
51845: ARRAY
51846: PUSH
51847: LD_INT 3
51849: ARRAY
51850: ST_TO_ADDR
// if InArea ( x , y , area ) then
51851: LD_VAR 0 5
51855: PPUSH
51856: LD_VAR 0 6
51860: PPUSH
51861: LD_VAR 0 2
51865: PPUSH
51866: CALL_OW 309
51870: IFFALSE 51881
// ComStop ( unit ) ;
51872: LD_VAR 0 1
51876: PPUSH
51877: CALL_OW 141
// end ;
51881: LD_VAR 0 4
51885: RET
// export function Abs ( value ) ; begin
51886: LD_INT 0
51888: PPUSH
// result := value ;
51889: LD_ADDR_VAR 0 2
51893: PUSH
51894: LD_VAR 0 1
51898: ST_TO_ADDR
// if value < 0 then
51899: LD_VAR 0 1
51903: PUSH
51904: LD_INT 0
51906: LESS
51907: IFFALSE 51924
// result := value * - 1 ;
51909: LD_ADDR_VAR 0 2
51913: PUSH
51914: LD_VAR 0 1
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: MUL
51923: ST_TO_ADDR
// end ;
51924: LD_VAR 0 2
51928: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
51929: LD_INT 0
51931: PPUSH
51932: PPUSH
51933: PPUSH
51934: PPUSH
51935: PPUSH
51936: PPUSH
51937: PPUSH
51938: PPUSH
// if not unit or not building then
51939: LD_VAR 0 1
51943: NOT
51944: IFTRUE 51953
51946: PUSH
51947: LD_VAR 0 2
51951: NOT
51952: OR
51953: IFFALSE 51957
// exit ;
51955: GO 52185
// x := GetX ( building ) ;
51957: LD_ADDR_VAR 0 4
51961: PUSH
51962: LD_VAR 0 2
51966: PPUSH
51967: CALL_OW 250
51971: ST_TO_ADDR
// y := GetY ( building ) ;
51972: LD_ADDR_VAR 0 6
51976: PUSH
51977: LD_VAR 0 2
51981: PPUSH
51982: CALL_OW 251
51986: ST_TO_ADDR
// d := GetDir ( building ) ;
51987: LD_ADDR_VAR 0 8
51991: PUSH
51992: LD_VAR 0 2
51996: PPUSH
51997: CALL_OW 254
52001: ST_TO_ADDR
// r := 4 ;
52002: LD_ADDR_VAR 0 9
52006: PUSH
52007: LD_INT 4
52009: ST_TO_ADDR
// for i := 1 to 5 do
52010: LD_ADDR_VAR 0 10
52014: PUSH
52015: DOUBLE
52016: LD_INT 1
52018: DEC
52019: ST_TO_ADDR
52020: LD_INT 5
52022: PUSH
52023: FOR_TO
52024: IFFALSE 52183
// begin _x := ShiftX ( x , d , r + i ) ;
52026: LD_ADDR_VAR 0 5
52030: PUSH
52031: LD_VAR 0 4
52035: PPUSH
52036: LD_VAR 0 8
52040: PPUSH
52041: LD_VAR 0 9
52045: PUSH
52046: LD_VAR 0 10
52050: PLUS
52051: PPUSH
52052: CALL_OW 272
52056: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
52057: LD_ADDR_VAR 0 7
52061: PUSH
52062: LD_VAR 0 6
52066: PPUSH
52067: LD_VAR 0 8
52071: PPUSH
52072: LD_VAR 0 9
52076: PUSH
52077: LD_VAR 0 10
52081: PLUS
52082: PPUSH
52083: CALL_OW 273
52087: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
52088: LD_VAR 0 5
52092: PPUSH
52093: LD_VAR 0 7
52097: PPUSH
52098: CALL_OW 488
52102: IFFALSE 52137
52104: PUSH
52105: LD_VAR 0 5
52109: PPUSH
52110: LD_VAR 0 7
52114: PPUSH
52115: CALL_OW 428
52119: PPUSH
52120: CALL_OW 247
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: IN
52135: NOT
52136: AND
52137: IFFALSE 52181
// begin ComMoveXY ( unit , _x , _y ) ;
52139: LD_VAR 0 1
52143: PPUSH
52144: LD_VAR 0 5
52148: PPUSH
52149: LD_VAR 0 7
52153: PPUSH
52154: CALL_OW 111
// result := [ _x , _y ] ;
52158: LD_ADDR_VAR 0 3
52162: PUSH
52163: LD_VAR 0 5
52167: PUSH
52168: LD_VAR 0 7
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: ST_TO_ADDR
// exit ;
52177: POP
52178: POP
52179: GO 52185
// end ; end ;
52181: GO 52023
52183: POP
52184: POP
// end ;
52185: LD_VAR 0 3
52189: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
52190: LD_INT 0
52192: PPUSH
52193: PPUSH
52194: PPUSH
// result := 0 ;
52195: LD_ADDR_VAR 0 3
52199: PUSH
52200: LD_INT 0
52202: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
52203: LD_VAR 0 1
52207: PUSH
52208: LD_INT 0
52210: LESS
52211: IFTRUE 52223
52213: PUSH
52214: LD_VAR 0 1
52218: PUSH
52219: LD_INT 8
52221: GREATER
52222: OR
52223: IFTRUE 52235
52225: PUSH
52226: LD_VAR 0 2
52230: PUSH
52231: LD_INT 0
52233: LESS
52234: OR
52235: IFTRUE 52247
52237: PUSH
52238: LD_VAR 0 2
52242: PUSH
52243: LD_INT 8
52245: GREATER
52246: OR
52247: IFFALSE 52251
// exit ;
52249: GO 52326
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
52251: LD_ADDR_VAR 0 4
52255: PUSH
52256: LD_INT 22
52258: PUSH
52259: LD_VAR 0 2
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PPUSH
52268: CALL_OW 69
52272: PUSH
52273: FOR_IN
52274: IFFALSE 52324
// begin un := UnitShoot ( i ) ;
52276: LD_ADDR_VAR 0 5
52280: PUSH
52281: LD_VAR 0 4
52285: PPUSH
52286: CALL_OW 504
52290: ST_TO_ADDR
// if GetSide ( un ) = side1 then
52291: LD_VAR 0 5
52295: PPUSH
52296: CALL_OW 255
52300: PUSH
52301: LD_VAR 0 1
52305: EQUAL
52306: IFFALSE 52322
// begin result := un ;
52308: LD_ADDR_VAR 0 3
52312: PUSH
52313: LD_VAR 0 5
52317: ST_TO_ADDR
// exit ;
52318: POP
52319: POP
52320: GO 52326
// end ; end ;
52322: GO 52273
52324: POP
52325: POP
// end ;
52326: LD_VAR 0 3
52330: RET
// export function GetCargoBay ( units ) ; begin
52331: LD_INT 0
52333: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
52334: LD_ADDR_VAR 0 2
52338: PUSH
52339: LD_VAR 0 1
52343: PPUSH
52344: LD_INT 2
52346: PUSH
52347: LD_INT 34
52349: PUSH
52350: LD_INT 12
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 34
52359: PUSH
52360: LD_INT 51
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 34
52369: PUSH
52370: LD_INT 32
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 34
52379: PUSH
52380: LD_INT 89
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: PPUSH
52394: CALL_OW 72
52398: ST_TO_ADDR
// end ;
52399: LD_VAR 0 2
52403: RET
// export function Negate ( value ) ; begin
52404: LD_INT 0
52406: PPUSH
// result := not value ;
52407: LD_ADDR_VAR 0 2
52411: PUSH
52412: LD_VAR 0 1
52416: NOT
52417: ST_TO_ADDR
// end ;
52418: LD_VAR 0 2
52422: RET
// export function Inc ( value ) ; begin
52423: LD_INT 0
52425: PPUSH
// result := value + 1 ;
52426: LD_ADDR_VAR 0 2
52430: PUSH
52431: LD_VAR 0 1
52435: PUSH
52436: LD_INT 1
52438: PLUS
52439: ST_TO_ADDR
// end ;
52440: LD_VAR 0 2
52444: RET
// export function Dec ( value ) ; begin
52445: LD_INT 0
52447: PPUSH
// result := value - 1 ;
52448: LD_ADDR_VAR 0 2
52452: PUSH
52453: LD_VAR 0 1
52457: PUSH
52458: LD_INT 1
52460: MINUS
52461: ST_TO_ADDR
// end ;
52462: LD_VAR 0 2
52466: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
52467: LD_INT 0
52469: PPUSH
52470: PPUSH
52471: PPUSH
52472: PPUSH
52473: PPUSH
52474: PPUSH
52475: PPUSH
52476: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
52477: LD_VAR 0 1
52481: PPUSH
52482: LD_VAR 0 2
52486: PPUSH
52487: CALL_OW 488
52491: NOT
52492: IFTRUE 52511
52494: PUSH
52495: LD_VAR 0 3
52499: PPUSH
52500: LD_VAR 0 4
52504: PPUSH
52505: CALL_OW 488
52509: NOT
52510: OR
52511: IFFALSE 52524
// begin result := - 1 ;
52513: LD_ADDR_VAR 0 5
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: ST_TO_ADDR
// exit ;
52522: GO 52759
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
52524: LD_ADDR_VAR 0 12
52528: PUSH
52529: LD_VAR 0 1
52533: PPUSH
52534: LD_VAR 0 2
52538: PPUSH
52539: LD_VAR 0 3
52543: PPUSH
52544: LD_VAR 0 4
52548: PPUSH
52549: CALL 51595 0 4
52553: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
52554: LD_ADDR_VAR 0 11
52558: PUSH
52559: LD_VAR 0 1
52563: PPUSH
52564: LD_VAR 0 2
52568: PPUSH
52569: LD_VAR 0 12
52573: PUSH
52574: LD_INT 1
52576: ARRAY
52577: PPUSH
52578: LD_VAR 0 12
52582: PUSH
52583: LD_INT 2
52585: ARRAY
52586: PPUSH
52587: CALL_OW 298
52591: ST_TO_ADDR
// distance := 9999 ;
52592: LD_ADDR_VAR 0 10
52596: PUSH
52597: LD_INT 9999
52599: ST_TO_ADDR
// for i := 0 to 5 do
52600: LD_ADDR_VAR 0 6
52604: PUSH
52605: DOUBLE
52606: LD_INT 0
52608: DEC
52609: ST_TO_ADDR
52610: LD_INT 5
52612: PUSH
52613: FOR_TO
52614: IFFALSE 52757
// begin _x := ShiftX ( x1 , i , centerDist ) ;
52616: LD_ADDR_VAR 0 7
52620: PUSH
52621: LD_VAR 0 1
52625: PPUSH
52626: LD_VAR 0 6
52630: PPUSH
52631: LD_VAR 0 11
52635: PPUSH
52636: CALL_OW 272
52640: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
52641: LD_ADDR_VAR 0 8
52645: PUSH
52646: LD_VAR 0 2
52650: PPUSH
52651: LD_VAR 0 6
52655: PPUSH
52656: LD_VAR 0 11
52660: PPUSH
52661: CALL_OW 273
52665: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
52666: LD_VAR 0 7
52670: PPUSH
52671: LD_VAR 0 8
52675: PPUSH
52676: CALL_OW 488
52680: NOT
52681: IFFALSE 52685
// continue ;
52683: GO 52613
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
52685: LD_ADDR_VAR 0 9
52689: PUSH
52690: LD_VAR 0 12
52694: PUSH
52695: LD_INT 1
52697: ARRAY
52698: PPUSH
52699: LD_VAR 0 12
52703: PUSH
52704: LD_INT 2
52706: ARRAY
52707: PPUSH
52708: LD_VAR 0 7
52712: PPUSH
52713: LD_VAR 0 8
52717: PPUSH
52718: CALL_OW 298
52722: ST_TO_ADDR
// if tmp < distance then
52723: LD_VAR 0 9
52727: PUSH
52728: LD_VAR 0 10
52732: LESS
52733: IFFALSE 52755
// begin result := i ;
52735: LD_ADDR_VAR 0 5
52739: PUSH
52740: LD_VAR 0 6
52744: ST_TO_ADDR
// distance := tmp ;
52745: LD_ADDR_VAR 0 10
52749: PUSH
52750: LD_VAR 0 9
52754: ST_TO_ADDR
// end ; end ;
52755: GO 52613
52757: POP
52758: POP
// end ;
52759: LD_VAR 0 5
52763: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
52764: LD_INT 0
52766: PPUSH
52767: PPUSH
// if not driver or not IsInUnit ( driver ) then
52768: LD_VAR 0 1
52772: NOT
52773: IFTRUE 52787
52775: PUSH
52776: LD_VAR 0 1
52780: PPUSH
52781: CALL_OW 310
52785: NOT
52786: OR
52787: IFFALSE 52791
// exit ;
52789: GO 52881
// vehicle := IsInUnit ( driver ) ;
52791: LD_ADDR_VAR 0 3
52795: PUSH
52796: LD_VAR 0 1
52800: PPUSH
52801: CALL_OW 310
52805: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
52806: LD_VAR 0 1
52810: PPUSH
52811: LD_STRING \
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: PUSH
52841: LD_STRING E
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_VAR 0 3
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PPUSH
52877: CALL_OW 446
// end ;
52881: LD_VAR 0 2
52885: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
52886: LD_INT 0
52888: PPUSH
52889: PPUSH
// if not driver or not IsInUnit ( driver ) then
52890: LD_VAR 0 1
52894: NOT
52895: IFTRUE 52909
52897: PUSH
52898: LD_VAR 0 1
52902: PPUSH
52903: CALL_OW 310
52907: NOT
52908: OR
52909: IFFALSE 52913
// exit ;
52911: GO 53003
// vehicle := IsInUnit ( driver ) ;
52913: LD_ADDR_VAR 0 3
52917: PUSH
52918: LD_VAR 0 1
52922: PPUSH
52923: CALL_OW 310
52927: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
52928: LD_VAR 0 1
52932: PPUSH
52933: LD_STRING \
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: PUSH
52963: LD_STRING E
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_VAR 0 3
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PPUSH
52999: CALL_OW 447
// end ;
53003: LD_VAR 0 2
53007: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
53008: LD_INT 0
53010: PPUSH
53011: PPUSH
53012: PPUSH
// tmp := [ ] ;
53013: LD_ADDR_VAR 0 5
53017: PUSH
53018: EMPTY
53019: ST_TO_ADDR
// for i in units do
53020: LD_ADDR_VAR 0 4
53024: PUSH
53025: LD_VAR 0 1
53029: PUSH
53030: FOR_IN
53031: IFFALSE 53069
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
53033: LD_ADDR_VAR 0 5
53037: PUSH
53038: LD_VAR 0 5
53042: PPUSH
53043: LD_VAR 0 5
53047: PUSH
53048: LD_INT 1
53050: PLUS
53051: PPUSH
53052: LD_VAR 0 4
53056: PPUSH
53057: CALL_OW 256
53061: PPUSH
53062: CALL_OW 2
53066: ST_TO_ADDR
53067: GO 53030
53069: POP
53070: POP
// if not tmp then
53071: LD_VAR 0 5
53075: NOT
53076: IFFALSE 53080
// exit ;
53078: GO 53128
// if asc then
53080: LD_VAR 0 2
53084: IFFALSE 53108
// result := SortListByListAsc ( units , tmp ) else
53086: LD_ADDR_VAR 0 3
53090: PUSH
53091: LD_VAR 0 1
53095: PPUSH
53096: LD_VAR 0 5
53100: PPUSH
53101: CALL_OW 76
53105: ST_TO_ADDR
53106: GO 53128
// result := SortListByListDesc ( units , tmp ) ;
53108: LD_ADDR_VAR 0 3
53112: PUSH
53113: LD_VAR 0 1
53117: PPUSH
53118: LD_VAR 0 5
53122: PPUSH
53123: CALL_OW 77
53127: ST_TO_ADDR
// end ;
53128: LD_VAR 0 3
53132: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
53133: LD_INT 0
53135: PPUSH
53136: PPUSH
// task := GetTaskList ( mech ) ;
53137: LD_ADDR_VAR 0 4
53141: PUSH
53142: LD_VAR 0 1
53146: PPUSH
53147: CALL_OW 437
53151: ST_TO_ADDR
// if not task then
53152: LD_VAR 0 4
53156: NOT
53157: IFFALSE 53161
// exit ;
53159: GO 53205
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
53161: LD_ADDR_VAR 0 3
53165: PUSH
53166: LD_VAR 0 4
53170: PUSH
53171: LD_INT 1
53173: ARRAY
53174: PUSH
53175: LD_INT 1
53177: ARRAY
53178: PUSH
53179: LD_STRING r
53181: EQUAL
53182: IFFALSE 53204
53184: PUSH
53185: LD_VAR 0 4
53189: PUSH
53190: LD_INT 1
53192: ARRAY
53193: PUSH
53194: LD_INT 4
53196: ARRAY
53197: PUSH
53198: LD_VAR 0 2
53202: EQUAL
53203: AND
53204: ST_TO_ADDR
// end ;
53205: LD_VAR 0 3
53209: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
53210: LD_INT 0
53212: PPUSH
// SetDir ( unit , d ) ;
53213: LD_VAR 0 1
53217: PPUSH
53218: LD_VAR 0 4
53222: PPUSH
53223: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
53227: LD_ADDR_VAR 0 6
53231: PUSH
53232: LD_VAR 0 1
53236: PPUSH
53237: LD_VAR 0 2
53241: PPUSH
53242: LD_VAR 0 3
53246: PPUSH
53247: LD_VAR 0 5
53251: PPUSH
53252: CALL_OW 48
53256: ST_TO_ADDR
// end ;
53257: LD_VAR 0 6
53261: RET
// export function ToNaturalNumber ( number ) ; begin
53262: LD_INT 0
53264: PPUSH
// result := number div 1 ;
53265: LD_ADDR_VAR 0 2
53269: PUSH
53270: LD_VAR 0 1
53274: PUSH
53275: LD_INT 1
53277: DIV
53278: ST_TO_ADDR
// if number < 0 then
53279: LD_VAR 0 1
53283: PUSH
53284: LD_INT 0
53286: LESS
53287: IFFALSE 53297
// result := 0 ;
53289: LD_ADDR_VAR 0 2
53293: PUSH
53294: LD_INT 0
53296: ST_TO_ADDR
// end ;
53297: LD_VAR 0 2
53301: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
53302: LD_INT 0
53304: PPUSH
53305: PPUSH
53306: PPUSH
// if not buildings then
53307: LD_VAR 0 1
53311: NOT
53312: IFFALSE 53316
// exit ;
53314: GO 53431
// tmp := [ ] ;
53316: LD_ADDR_VAR 0 5
53320: PUSH
53321: EMPTY
53322: ST_TO_ADDR
// for b in buildings do
53323: LD_ADDR_VAR 0 4
53327: PUSH
53328: LD_VAR 0 1
53332: PUSH
53333: FOR_IN
53334: IFFALSE 53372
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
53336: LD_ADDR_VAR 0 5
53340: PUSH
53341: LD_VAR 0 5
53345: PPUSH
53346: LD_VAR 0 5
53350: PUSH
53351: LD_INT 1
53353: PLUS
53354: PPUSH
53355: LD_VAR 0 4
53359: PPUSH
53360: CALL_OW 266
53364: PPUSH
53365: CALL_OW 1
53369: ST_TO_ADDR
53370: GO 53333
53372: POP
53373: POP
// if not tmp then
53374: LD_VAR 0 5
53378: NOT
53379: IFFALSE 53383
// exit ;
53381: GO 53431
// if asc then
53383: LD_VAR 0 2
53387: IFFALSE 53411
// result := SortListByListAsc ( buildings , tmp ) else
53389: LD_ADDR_VAR 0 3
53393: PUSH
53394: LD_VAR 0 1
53398: PPUSH
53399: LD_VAR 0 5
53403: PPUSH
53404: CALL_OW 76
53408: ST_TO_ADDR
53409: GO 53431
// result := SortListByListDesc ( buildings , tmp ) ;
53411: LD_ADDR_VAR 0 3
53415: PUSH
53416: LD_VAR 0 1
53420: PPUSH
53421: LD_VAR 0 5
53425: PPUSH
53426: CALL_OW 77
53430: ST_TO_ADDR
// end ;
53431: LD_VAR 0 3
53435: RET
// export function SortByClass ( units , class ) ; var un ; begin
53436: LD_INT 0
53438: PPUSH
53439: PPUSH
// if not units or not class then
53440: LD_VAR 0 1
53444: NOT
53445: IFTRUE 53454
53447: PUSH
53448: LD_VAR 0 2
53452: NOT
53453: OR
53454: IFFALSE 53458
// exit ;
53456: GO 53553
// result := [ ] ;
53458: LD_ADDR_VAR 0 3
53462: PUSH
53463: EMPTY
53464: ST_TO_ADDR
// for un in units do
53465: LD_ADDR_VAR 0 4
53469: PUSH
53470: LD_VAR 0 1
53474: PUSH
53475: FOR_IN
53476: IFFALSE 53551
// if GetClass ( un ) = class then
53478: LD_VAR 0 4
53482: PPUSH
53483: CALL_OW 257
53487: PUSH
53488: LD_VAR 0 2
53492: EQUAL
53493: IFFALSE 53520
// result := Insert ( result , 1 , un ) else
53495: LD_ADDR_VAR 0 3
53499: PUSH
53500: LD_VAR 0 3
53504: PPUSH
53505: LD_INT 1
53507: PPUSH
53508: LD_VAR 0 4
53512: PPUSH
53513: CALL_OW 2
53517: ST_TO_ADDR
53518: GO 53549
// result := Replace ( result , result + 1 , un ) ;
53520: LD_ADDR_VAR 0 3
53524: PUSH
53525: LD_VAR 0 3
53529: PPUSH
53530: LD_VAR 0 3
53534: PUSH
53535: LD_INT 1
53537: PLUS
53538: PPUSH
53539: LD_VAR 0 4
53543: PPUSH
53544: CALL_OW 1
53548: ST_TO_ADDR
53549: GO 53475
53551: POP
53552: POP
// end ;
53553: LD_VAR 0 3
53557: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
53558: LD_INT 0
53560: PPUSH
53561: PPUSH
53562: PPUSH
53563: PPUSH
53564: PPUSH
53565: PPUSH
53566: PPUSH
// result := [ ] ;
53567: LD_ADDR_VAR 0 4
53571: PUSH
53572: EMPTY
53573: ST_TO_ADDR
// if x - r < 0 then
53574: LD_VAR 0 1
53578: PUSH
53579: LD_VAR 0 3
53583: MINUS
53584: PUSH
53585: LD_INT 0
53587: LESS
53588: IFFALSE 53600
// min_x := 0 else
53590: LD_ADDR_VAR 0 8
53594: PUSH
53595: LD_INT 0
53597: ST_TO_ADDR
53598: GO 53616
// min_x := x - r ;
53600: LD_ADDR_VAR 0 8
53604: PUSH
53605: LD_VAR 0 1
53609: PUSH
53610: LD_VAR 0 3
53614: MINUS
53615: ST_TO_ADDR
// if y - r < 0 then
53616: LD_VAR 0 2
53620: PUSH
53621: LD_VAR 0 3
53625: MINUS
53626: PUSH
53627: LD_INT 0
53629: LESS
53630: IFFALSE 53642
// min_y := 0 else
53632: LD_ADDR_VAR 0 7
53636: PUSH
53637: LD_INT 0
53639: ST_TO_ADDR
53640: GO 53658
// min_y := y - r ;
53642: LD_ADDR_VAR 0 7
53646: PUSH
53647: LD_VAR 0 2
53651: PUSH
53652: LD_VAR 0 3
53656: MINUS
53657: ST_TO_ADDR
// max_x := x + r ;
53658: LD_ADDR_VAR 0 9
53662: PUSH
53663: LD_VAR 0 1
53667: PUSH
53668: LD_VAR 0 3
53672: PLUS
53673: ST_TO_ADDR
// max_y := y + r ;
53674: LD_ADDR_VAR 0 10
53678: PUSH
53679: LD_VAR 0 2
53683: PUSH
53684: LD_VAR 0 3
53688: PLUS
53689: ST_TO_ADDR
// for _x = min_x to max_x do
53690: LD_ADDR_VAR 0 5
53694: PUSH
53695: DOUBLE
53696: LD_VAR 0 8
53700: DEC
53701: ST_TO_ADDR
53702: LD_VAR 0 9
53706: PUSH
53707: FOR_TO
53708: IFFALSE 53809
// for _y = min_y to max_y do
53710: LD_ADDR_VAR 0 6
53714: PUSH
53715: DOUBLE
53716: LD_VAR 0 7
53720: DEC
53721: ST_TO_ADDR
53722: LD_VAR 0 10
53726: PUSH
53727: FOR_TO
53728: IFFALSE 53805
// begin if not ValidHex ( _x , _y ) then
53730: LD_VAR 0 5
53734: PPUSH
53735: LD_VAR 0 6
53739: PPUSH
53740: CALL_OW 488
53744: NOT
53745: IFFALSE 53749
// continue ;
53747: GO 53727
// if GetResourceTypeXY ( _x , _y ) then
53749: LD_VAR 0 5
53753: PPUSH
53754: LD_VAR 0 6
53758: PPUSH
53759: CALL_OW 283
53763: IFFALSE 53803
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
53765: LD_ADDR_VAR 0 4
53769: PUSH
53770: LD_VAR 0 4
53774: PPUSH
53775: LD_VAR 0 4
53779: PUSH
53780: LD_INT 1
53782: PLUS
53783: PPUSH
53784: LD_VAR 0 5
53788: PUSH
53789: LD_VAR 0 6
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PPUSH
53798: CALL_OW 1
53802: ST_TO_ADDR
// end ;
53803: GO 53727
53805: POP
53806: POP
53807: GO 53707
53809: POP
53810: POP
// end ;
53811: LD_VAR 0 4
53815: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
53816: LD_INT 0
53818: PPUSH
53819: PPUSH
53820: PPUSH
53821: PPUSH
53822: PPUSH
53823: PPUSH
53824: PPUSH
53825: PPUSH
// if not units then
53826: LD_VAR 0 1
53830: NOT
53831: IFFALSE 53835
// exit ;
53833: GO 54367
// result := UnitFilter ( units , [ f_ok ] ) ;
53835: LD_ADDR_VAR 0 3
53839: PUSH
53840: LD_VAR 0 1
53844: PPUSH
53845: LD_INT 50
53847: PUSH
53848: EMPTY
53849: LIST
53850: PPUSH
53851: CALL_OW 72
53855: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
53856: LD_ADDR_VAR 0 8
53860: PUSH
53861: LD_VAR 0 1
53865: PUSH
53866: LD_INT 1
53868: ARRAY
53869: PPUSH
53870: CALL_OW 255
53874: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
53875: LD_ADDR_VAR 0 10
53879: PUSH
53880: LD_INT 29
53882: PUSH
53883: LD_INT 91
53885: PUSH
53886: LD_INT 49
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: LIST
53893: ST_TO_ADDR
// if not result then
53894: LD_VAR 0 3
53898: NOT
53899: IFFALSE 53903
// exit ;
53901: GO 54367
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
53903: LD_ADDR_VAR 0 5
53907: PUSH
53908: LD_INT 81
53910: PUSH
53911: LD_VAR 0 8
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PPUSH
53920: CALL_OW 69
53924: ST_TO_ADDR
// for i in result do
53925: LD_ADDR_VAR 0 4
53929: PUSH
53930: LD_VAR 0 3
53934: PUSH
53935: FOR_IN
53936: IFFALSE 54365
// begin tag := GetTag ( i ) + 1 ;
53938: LD_ADDR_VAR 0 9
53942: PUSH
53943: LD_VAR 0 4
53947: PPUSH
53948: CALL_OW 110
53952: PUSH
53953: LD_INT 1
53955: PLUS
53956: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
53957: LD_ADDR_VAR 0 7
53961: PUSH
53962: LD_VAR 0 4
53966: PPUSH
53967: CALL_OW 250
53971: PPUSH
53972: LD_VAR 0 4
53976: PPUSH
53977: CALL_OW 251
53981: PPUSH
53982: LD_INT 4
53984: PPUSH
53985: CALL 53558 0 3
53989: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
53990: LD_VAR 0 4
53994: PPUSH
53995: CALL_OW 247
53999: PUSH
54000: LD_INT 2
54002: EQUAL
54003: IFFALSE 54015
54005: PUSH
54006: LD_VAR 0 7
54010: PUSH
54011: LD_INT 2
54013: GREATER
54014: AND
54015: IFFALSE 54035
54017: PUSH
54018: LD_VAR 0 4
54022: PPUSH
54023: CALL_OW 264
54027: PUSH
54028: LD_VAR 0 10
54032: IN
54033: NOT
54034: AND
54035: IFFALSE 54074
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
54037: LD_VAR 0 4
54041: PPUSH
54042: LD_VAR 0 7
54046: PUSH
54047: LD_INT 1
54049: ARRAY
54050: PUSH
54051: LD_INT 1
54053: ARRAY
54054: PPUSH
54055: LD_VAR 0 7
54059: PUSH
54060: LD_INT 1
54062: ARRAY
54063: PUSH
54064: LD_INT 2
54066: ARRAY
54067: PPUSH
54068: CALL_OW 116
54072: GO 54363
// if path > tag then
54074: LD_VAR 0 2
54078: PUSH
54079: LD_VAR 0 9
54083: GREATER
54084: IFFALSE 54292
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
54086: LD_ADDR_VAR 0 6
54090: PUSH
54091: LD_VAR 0 5
54095: PPUSH
54096: LD_INT 91
54098: PUSH
54099: LD_VAR 0 4
54103: PUSH
54104: LD_INT 8
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: LIST
54111: PPUSH
54112: CALL_OW 72
54116: ST_TO_ADDR
// if nearEnemy then
54117: LD_VAR 0 6
54121: IFFALSE 54190
// begin if GetWeapon ( i ) = ru_time_lapser then
54123: LD_VAR 0 4
54127: PPUSH
54128: CALL_OW 264
54132: PUSH
54133: LD_INT 49
54135: EQUAL
54136: IFFALSE 54164
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
54138: LD_VAR 0 4
54142: PPUSH
54143: LD_VAR 0 6
54147: PPUSH
54148: LD_VAR 0 4
54152: PPUSH
54153: CALL_OW 74
54157: PPUSH
54158: CALL_OW 112
54162: GO 54188
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
54164: LD_VAR 0 4
54168: PPUSH
54169: LD_VAR 0 6
54173: PPUSH
54174: LD_VAR 0 4
54178: PPUSH
54179: CALL_OW 74
54183: PPUSH
54184: CALL 55448 0 2
// end else
54188: GO 54290
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
54190: LD_VAR 0 4
54194: PPUSH
54195: LD_VAR 0 2
54199: PUSH
54200: LD_VAR 0 9
54204: ARRAY
54205: PUSH
54206: LD_INT 1
54208: ARRAY
54209: PPUSH
54210: LD_VAR 0 2
54214: PUSH
54215: LD_VAR 0 9
54219: ARRAY
54220: PUSH
54221: LD_INT 2
54223: ARRAY
54224: PPUSH
54225: CALL_OW 297
54229: PUSH
54230: LD_INT 6
54232: GREATER
54233: IFFALSE 54276
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
54235: LD_VAR 0 4
54239: PPUSH
54240: LD_VAR 0 2
54244: PUSH
54245: LD_VAR 0 9
54249: ARRAY
54250: PUSH
54251: LD_INT 1
54253: ARRAY
54254: PPUSH
54255: LD_VAR 0 2
54259: PUSH
54260: LD_VAR 0 9
54264: ARRAY
54265: PUSH
54266: LD_INT 2
54268: ARRAY
54269: PPUSH
54270: CALL_OW 114
54274: GO 54290
// SetTag ( i , tag ) ;
54276: LD_VAR 0 4
54280: PPUSH
54281: LD_VAR 0 9
54285: PPUSH
54286: CALL_OW 109
// end else
54290: GO 54363
// if enemy then
54292: LD_VAR 0 5
54296: IFFALSE 54363
// begin if GetWeapon ( i ) = ru_time_lapser then
54298: LD_VAR 0 4
54302: PPUSH
54303: CALL_OW 264
54307: PUSH
54308: LD_INT 49
54310: EQUAL
54311: IFFALSE 54339
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
54313: LD_VAR 0 4
54317: PPUSH
54318: LD_VAR 0 5
54322: PPUSH
54323: LD_VAR 0 4
54327: PPUSH
54328: CALL_OW 74
54332: PPUSH
54333: CALL_OW 112
54337: GO 54363
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
54339: LD_VAR 0 4
54343: PPUSH
54344: LD_VAR 0 5
54348: PPUSH
54349: LD_VAR 0 4
54353: PPUSH
54354: CALL_OW 74
54358: PPUSH
54359: CALL 55448 0 2
// end ; end ;
54363: GO 53935
54365: POP
54366: POP
// end ;
54367: LD_VAR 0 3
54371: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
54372: LD_INT 0
54374: PPUSH
54375: PPUSH
54376: PPUSH
// if not unit or IsInUnit ( unit ) then
54377: LD_VAR 0 1
54381: NOT
54382: IFTRUE 54395
54384: PUSH
54385: LD_VAR 0 1
54389: PPUSH
54390: CALL_OW 310
54394: OR
54395: IFFALSE 54399
// exit ;
54397: GO 54490
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
54399: LD_ADDR_VAR 0 4
54403: PUSH
54404: LD_VAR 0 1
54408: PPUSH
54409: CALL_OW 250
54413: PPUSH
54414: LD_VAR 0 2
54418: PPUSH
54419: LD_INT 1
54421: PPUSH
54422: CALL_OW 272
54426: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
54427: LD_ADDR_VAR 0 5
54431: PUSH
54432: LD_VAR 0 1
54436: PPUSH
54437: CALL_OW 251
54441: PPUSH
54442: LD_VAR 0 2
54446: PPUSH
54447: LD_INT 1
54449: PPUSH
54450: CALL_OW 273
54454: ST_TO_ADDR
// if ValidHex ( x , y ) then
54455: LD_VAR 0 4
54459: PPUSH
54460: LD_VAR 0 5
54464: PPUSH
54465: CALL_OW 488
54469: IFFALSE 54490
// ComTurnXY ( unit , x , y ) ;
54471: LD_VAR 0 1
54475: PPUSH
54476: LD_VAR 0 4
54480: PPUSH
54481: LD_VAR 0 5
54485: PPUSH
54486: CALL_OW 118
// end ;
54490: LD_VAR 0 3
54494: RET
// export function SeeUnits ( side , units ) ; var i ; begin
54495: LD_INT 0
54497: PPUSH
54498: PPUSH
// result := false ;
54499: LD_ADDR_VAR 0 3
54503: PUSH
54504: LD_INT 0
54506: ST_TO_ADDR
// if not units then
54507: LD_VAR 0 2
54511: NOT
54512: IFFALSE 54516
// exit ;
54514: GO 54561
// for i in units do
54516: LD_ADDR_VAR 0 4
54520: PUSH
54521: LD_VAR 0 2
54525: PUSH
54526: FOR_IN
54527: IFFALSE 54559
// if See ( side , i ) then
54529: LD_VAR 0 1
54533: PPUSH
54534: LD_VAR 0 4
54538: PPUSH
54539: CALL_OW 292
54543: IFFALSE 54557
// begin result := true ;
54545: LD_ADDR_VAR 0 3
54549: PUSH
54550: LD_INT 1
54552: ST_TO_ADDR
// exit ;
54553: POP
54554: POP
54555: GO 54561
// end ;
54557: GO 54526
54559: POP
54560: POP
// end ;
54561: LD_VAR 0 3
54565: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
54566: LD_INT 0
54568: PPUSH
54569: PPUSH
54570: PPUSH
54571: PPUSH
// if not unit or not points then
54572: LD_VAR 0 1
54576: NOT
54577: IFTRUE 54586
54579: PUSH
54580: LD_VAR 0 2
54584: NOT
54585: OR
54586: IFFALSE 54590
// exit ;
54588: GO 54680
// dist := 99999 ;
54590: LD_ADDR_VAR 0 5
54594: PUSH
54595: LD_INT 99999
54597: ST_TO_ADDR
// for i in points do
54598: LD_ADDR_VAR 0 4
54602: PUSH
54603: LD_VAR 0 2
54607: PUSH
54608: FOR_IN
54609: IFFALSE 54678
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
54611: LD_ADDR_VAR 0 6
54615: PUSH
54616: LD_VAR 0 1
54620: PPUSH
54621: LD_VAR 0 4
54625: PUSH
54626: LD_INT 1
54628: ARRAY
54629: PPUSH
54630: LD_VAR 0 4
54634: PUSH
54635: LD_INT 2
54637: ARRAY
54638: PPUSH
54639: CALL_OW 297
54643: ST_TO_ADDR
// if tmpDist < dist then
54644: LD_VAR 0 6
54648: PUSH
54649: LD_VAR 0 5
54653: LESS
54654: IFFALSE 54676
// begin result := i ;
54656: LD_ADDR_VAR 0 3
54660: PUSH
54661: LD_VAR 0 4
54665: ST_TO_ADDR
// dist := tmpDist ;
54666: LD_ADDR_VAR 0 5
54670: PUSH
54671: LD_VAR 0 6
54675: ST_TO_ADDR
// end ; end ;
54676: GO 54608
54678: POP
54679: POP
// end ;
54680: LD_VAR 0 3
54684: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
54685: LD_INT 0
54687: PPUSH
// uc_side := side ;
54688: LD_ADDR_OWVAR 20
54692: PUSH
54693: LD_VAR 0 1
54697: ST_TO_ADDR
// uc_nation := 3 ;
54698: LD_ADDR_OWVAR 21
54702: PUSH
54703: LD_INT 3
54705: ST_TO_ADDR
// vc_chassis := 25 ;
54706: LD_ADDR_OWVAR 37
54710: PUSH
54711: LD_INT 25
54713: ST_TO_ADDR
// vc_engine := engine_siberite ;
54714: LD_ADDR_OWVAR 39
54718: PUSH
54719: LD_INT 3
54721: ST_TO_ADDR
// vc_control := control_computer ;
54722: LD_ADDR_OWVAR 38
54726: PUSH
54727: LD_INT 3
54729: ST_TO_ADDR
// vc_weapon := 59 ;
54730: LD_ADDR_OWVAR 40
54734: PUSH
54735: LD_INT 59
54737: ST_TO_ADDR
// result := CreateVehicle ;
54738: LD_ADDR_VAR 0 5
54742: PUSH
54743: CALL_OW 45
54747: ST_TO_ADDR
// SetDir ( result , d ) ;
54748: LD_VAR 0 5
54752: PPUSH
54753: LD_VAR 0 4
54757: PPUSH
54758: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
54762: LD_VAR 0 5
54766: PPUSH
54767: LD_VAR 0 2
54771: PPUSH
54772: LD_VAR 0 3
54776: PPUSH
54777: LD_INT 0
54779: PPUSH
54780: CALL_OW 48
// end ;
54784: LD_VAR 0 5
54788: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
54789: LD_INT 0
54791: PPUSH
54792: PPUSH
54793: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
54794: LD_ADDR_VAR 0 2
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
54817: LD_VAR 0 1
54821: NOT
54822: IFTRUE 54855
54824: PUSH
54825: LD_VAR 0 1
54829: PPUSH
54830: CALL_OW 264
54834: PUSH
54835: LD_INT 12
54837: PUSH
54838: LD_INT 51
54840: PUSH
54841: LD_INT 32
54843: PUSH
54844: LD_INT 89
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: IN
54853: NOT
54854: OR
54855: IFFALSE 54859
// exit ;
54857: GO 54957
// for i := 1 to 3 do
54859: LD_ADDR_VAR 0 3
54863: PUSH
54864: DOUBLE
54865: LD_INT 1
54867: DEC
54868: ST_TO_ADDR
54869: LD_INT 3
54871: PUSH
54872: FOR_TO
54873: IFFALSE 54955
// begin tmp := GetCargo ( cargo , i ) ;
54875: LD_ADDR_VAR 0 4
54879: PUSH
54880: LD_VAR 0 1
54884: PPUSH
54885: LD_VAR 0 3
54889: PPUSH
54890: CALL_OW 289
54894: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
54895: LD_ADDR_VAR 0 2
54899: PUSH
54900: LD_VAR 0 2
54904: PPUSH
54905: LD_VAR 0 3
54909: PPUSH
54910: LD_VAR 0 4
54914: PPUSH
54915: CALL_OW 1
54919: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
54920: LD_ADDR_VAR 0 2
54924: PUSH
54925: LD_VAR 0 2
54929: PPUSH
54930: LD_INT 4
54932: PPUSH
54933: LD_VAR 0 2
54937: PUSH
54938: LD_INT 4
54940: ARRAY
54941: PUSH
54942: LD_VAR 0 4
54946: PLUS
54947: PPUSH
54948: CALL_OW 1
54952: ST_TO_ADDR
// end ;
54953: GO 54872
54955: POP
54956: POP
// end ;
54957: LD_VAR 0 2
54961: RET
// export function Length ( array ) ; begin
54962: LD_INT 0
54964: PPUSH
// result := array + 0 ;
54965: LD_ADDR_VAR 0 2
54969: PUSH
54970: LD_VAR 0 1
54974: PUSH
54975: LD_INT 0
54977: PLUS
54978: ST_TO_ADDR
// end ;
54979: LD_VAR 0 2
54983: RET
// export function PrepareArray ( array ) ; begin
54984: LD_INT 0
54986: PPUSH
// result := array diff 0 ;
54987: LD_ADDR_VAR 0 2
54991: PUSH
54992: LD_VAR 0 1
54996: PUSH
54997: LD_INT 0
54999: DIFF
55000: ST_TO_ADDR
// if not result [ 1 ] then
55001: LD_VAR 0 2
55005: PUSH
55006: LD_INT 1
55008: ARRAY
55009: NOT
55010: IFFALSE 55030
// result := Delete ( result , 1 ) ;
55012: LD_ADDR_VAR 0 2
55016: PUSH
55017: LD_VAR 0 2
55021: PPUSH
55022: LD_INT 1
55024: PPUSH
55025: CALL_OW 3
55029: ST_TO_ADDR
// end ;
55030: LD_VAR 0 2
55034: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
55035: LD_INT 0
55037: PPUSH
55038: PPUSH
55039: PPUSH
55040: PPUSH
// sibRocketRange := 25 ;
55041: LD_ADDR_VAR 0 6
55045: PUSH
55046: LD_INT 25
55048: ST_TO_ADDR
// result := false ;
55049: LD_ADDR_VAR 0 4
55053: PUSH
55054: LD_INT 0
55056: ST_TO_ADDR
// for i := 0 to 5 do
55057: LD_ADDR_VAR 0 5
55061: PUSH
55062: DOUBLE
55063: LD_INT 0
55065: DEC
55066: ST_TO_ADDR
55067: LD_INT 5
55069: PUSH
55070: FOR_TO
55071: IFFALSE 55138
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
55073: LD_VAR 0 1
55077: PPUSH
55078: LD_VAR 0 5
55082: PPUSH
55083: LD_VAR 0 6
55087: PPUSH
55088: CALL_OW 272
55092: PPUSH
55093: LD_VAR 0 2
55097: PPUSH
55098: LD_VAR 0 5
55102: PPUSH
55103: LD_VAR 0 6
55107: PPUSH
55108: CALL_OW 273
55112: PPUSH
55113: LD_VAR 0 3
55117: PPUSH
55118: CALL_OW 309
55122: IFFALSE 55136
// begin result := true ;
55124: LD_ADDR_VAR 0 4
55128: PUSH
55129: LD_INT 1
55131: ST_TO_ADDR
// exit ;
55132: POP
55133: POP
55134: GO 55140
// end ;
55136: GO 55070
55138: POP
55139: POP
// end ;
55140: LD_VAR 0 4
55144: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
55145: LD_INT 0
55147: PPUSH
55148: PPUSH
55149: PPUSH
// if btype = b_depot then
55150: LD_VAR 0 2
55154: PUSH
55155: LD_INT 0
55157: EQUAL
55158: IFFALSE 55170
// begin result := true ;
55160: LD_ADDR_VAR 0 3
55164: PUSH
55165: LD_INT 1
55167: ST_TO_ADDR
// exit ;
55168: GO 55290
// end ; pom := GetBase ( depot ) ;
55170: LD_ADDR_VAR 0 4
55174: PUSH
55175: LD_VAR 0 1
55179: PPUSH
55180: CALL_OW 274
55184: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55185: LD_ADDR_VAR 0 5
55189: PUSH
55190: LD_VAR 0 2
55194: PPUSH
55195: LD_VAR 0 1
55199: PPUSH
55200: CALL_OW 248
55204: PPUSH
55205: CALL_OW 450
55209: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
55210: LD_ADDR_VAR 0 3
55214: PUSH
55215: LD_VAR 0 4
55219: PPUSH
55220: LD_INT 1
55222: PPUSH
55223: CALL_OW 275
55227: PUSH
55228: LD_VAR 0 5
55232: PUSH
55233: LD_INT 1
55235: ARRAY
55236: GREATEREQUAL
55237: IFFALSE 55263
55239: PUSH
55240: LD_VAR 0 4
55244: PPUSH
55245: LD_INT 2
55247: PPUSH
55248: CALL_OW 275
55252: PUSH
55253: LD_VAR 0 5
55257: PUSH
55258: LD_INT 2
55260: ARRAY
55261: GREATEREQUAL
55262: AND
55263: IFFALSE 55289
55265: PUSH
55266: LD_VAR 0 4
55270: PPUSH
55271: LD_INT 3
55273: PPUSH
55274: CALL_OW 275
55278: PUSH
55279: LD_VAR 0 5
55283: PUSH
55284: LD_INT 3
55286: ARRAY
55287: GREATEREQUAL
55288: AND
55289: ST_TO_ADDR
// end ;
55290: LD_VAR 0 3
55294: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
55295: LD_INT 0
55297: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
55298: LD_VAR 0 1
55302: PPUSH
55303: LD_VAR 0 2
55307: PPUSH
55308: LD_INT 0
55310: PPUSH
55311: LD_INT 0
55313: PPUSH
55314: LD_INT 1
55316: PPUSH
55317: LD_INT 0
55319: PPUSH
55320: CALL_OW 587
// end ;
55324: LD_VAR 0 3
55328: RET
// export function CenterOnNow ( unit ) ; begin
55329: LD_INT 0
55331: PPUSH
// result := IsInUnit ( unit ) ;
55332: LD_ADDR_VAR 0 2
55336: PUSH
55337: LD_VAR 0 1
55341: PPUSH
55342: CALL_OW 310
55346: ST_TO_ADDR
// if not result then
55347: LD_VAR 0 2
55351: NOT
55352: IFFALSE 55364
// result := unit ;
55354: LD_ADDR_VAR 0 2
55358: PUSH
55359: LD_VAR 0 1
55363: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
55364: LD_VAR 0 1
55368: PPUSH
55369: CALL_OW 87
// end ;
55373: LD_VAR 0 2
55377: RET
// export function ComMoveHex ( unit , hex ) ; begin
55378: LD_INT 0
55380: PPUSH
// if not hex then
55381: LD_VAR 0 2
55385: NOT
55386: IFFALSE 55390
// exit ;
55388: GO 55443
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
55390: LD_VAR 0 2
55394: PUSH
55395: LD_INT 1
55397: ARRAY
55398: PPUSH
55399: LD_VAR 0 2
55403: PUSH
55404: LD_INT 2
55406: ARRAY
55407: PPUSH
55408: CALL_OW 428
55412: IFFALSE 55416
// exit ;
55414: GO 55443
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
55416: LD_VAR 0 1
55420: PPUSH
55421: LD_VAR 0 2
55425: PUSH
55426: LD_INT 1
55428: ARRAY
55429: PPUSH
55430: LD_VAR 0 2
55434: PUSH
55435: LD_INT 2
55437: ARRAY
55438: PPUSH
55439: CALL_OW 111
// end ;
55443: LD_VAR 0 3
55447: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
55448: LD_INT 0
55450: PPUSH
55451: PPUSH
55452: PPUSH
// if not unit or not enemy then
55453: LD_VAR 0 1
55457: NOT
55458: IFTRUE 55467
55460: PUSH
55461: LD_VAR 0 2
55465: NOT
55466: OR
55467: IFFALSE 55471
// exit ;
55469: GO 55597
// x := GetX ( enemy ) ;
55471: LD_ADDR_VAR 0 4
55475: PUSH
55476: LD_VAR 0 2
55480: PPUSH
55481: CALL_OW 250
55485: ST_TO_ADDR
// y := GetY ( enemy ) ;
55486: LD_ADDR_VAR 0 5
55490: PUSH
55491: LD_VAR 0 2
55495: PPUSH
55496: CALL_OW 251
55500: ST_TO_ADDR
// if ValidHex ( x , y ) then
55501: LD_VAR 0 4
55505: PPUSH
55506: LD_VAR 0 5
55510: PPUSH
55511: CALL_OW 488
55515: IFFALSE 55597
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
55517: LD_VAR 0 2
55521: PPUSH
55522: CALL_OW 247
55526: PUSH
55527: LD_INT 3
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: IN
55537: IFTRUE 55560
55539: PUSH
55540: LD_VAR 0 1
55544: PPUSH
55545: CALL_OW 255
55549: PPUSH
55550: LD_VAR 0 2
55554: PPUSH
55555: CALL_OW 292
55559: OR
55560: IFFALSE 55578
// ComAttackUnit ( unit , enemy ) else
55562: LD_VAR 0 1
55566: PPUSH
55567: LD_VAR 0 2
55571: PPUSH
55572: CALL_OW 115
55576: GO 55597
// ComAgressiveMove ( unit , x , y ) ;
55578: LD_VAR 0 1
55582: PPUSH
55583: LD_VAR 0 4
55587: PPUSH
55588: LD_VAR 0 5
55592: PPUSH
55593: CALL_OW 114
// end ;
55597: LD_VAR 0 3
55601: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
55602: LD_INT 0
55604: PPUSH
55605: PPUSH
55606: PPUSH
// list := AreaToList ( area , 0 ) ;
55607: LD_ADDR_VAR 0 5
55611: PUSH
55612: LD_VAR 0 1
55616: PPUSH
55617: LD_INT 0
55619: PPUSH
55620: CALL_OW 517
55624: ST_TO_ADDR
// if not list then
55625: LD_VAR 0 5
55629: NOT
55630: IFFALSE 55634
// exit ;
55632: GO 55764
// if all then
55634: LD_VAR 0 2
55638: IFFALSE 55726
// begin for i := 1 to list [ 1 ] do
55640: LD_ADDR_VAR 0 4
55644: PUSH
55645: DOUBLE
55646: LD_INT 1
55648: DEC
55649: ST_TO_ADDR
55650: LD_VAR 0 5
55654: PUSH
55655: LD_INT 1
55657: ARRAY
55658: PUSH
55659: FOR_TO
55660: IFFALSE 55722
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
55662: LD_ADDR_VAR 0 3
55666: PUSH
55667: LD_VAR 0 3
55671: PPUSH
55672: LD_VAR 0 3
55676: PUSH
55677: LD_INT 1
55679: PLUS
55680: PPUSH
55681: LD_VAR 0 5
55685: PUSH
55686: LD_INT 1
55688: ARRAY
55689: PUSH
55690: LD_VAR 0 4
55694: ARRAY
55695: PUSH
55696: LD_VAR 0 5
55700: PUSH
55701: LD_INT 2
55703: ARRAY
55704: PUSH
55705: LD_VAR 0 4
55709: ARRAY
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PPUSH
55715: CALL_OW 1
55719: ST_TO_ADDR
55720: GO 55659
55722: POP
55723: POP
// exit ;
55724: GO 55764
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
55726: LD_ADDR_VAR 0 3
55730: PUSH
55731: LD_VAR 0 5
55735: PUSH
55736: LD_INT 1
55738: ARRAY
55739: PUSH
55740: LD_INT 1
55742: ARRAY
55743: PUSH
55744: LD_VAR 0 5
55748: PUSH
55749: LD_INT 2
55751: ARRAY
55752: PUSH
55753: LD_INT 1
55755: ARRAY
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: EMPTY
55762: LIST
55763: ST_TO_ADDR
// end ;
55764: LD_VAR 0 3
55768: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
55769: LD_INT 0
55771: PPUSH
55772: PPUSH
// list := AreaToList ( area , 0 ) ;
55773: LD_ADDR_VAR 0 4
55777: PUSH
55778: LD_VAR 0 1
55782: PPUSH
55783: LD_INT 0
55785: PPUSH
55786: CALL_OW 517
55790: ST_TO_ADDR
// if not list then
55791: LD_VAR 0 4
55795: NOT
55796: IFFALSE 55800
// exit ;
55798: GO 55841
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
55800: LD_ADDR_VAR 0 3
55804: PUSH
55805: LD_VAR 0 4
55809: PUSH
55810: LD_INT 1
55812: ARRAY
55813: PUSH
55814: LD_INT 1
55816: ARRAY
55817: PUSH
55818: LD_VAR 0 4
55822: PUSH
55823: LD_INT 2
55825: ARRAY
55826: PUSH
55827: LD_INT 1
55829: ARRAY
55830: PUSH
55831: LD_VAR 0 2
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: LIST
55840: ST_TO_ADDR
// end ;
55841: LD_VAR 0 3
55845: RET
// export function First ( array ) ; begin
55846: LD_INT 0
55848: PPUSH
// if not array then
55849: LD_VAR 0 1
55853: NOT
55854: IFFALSE 55858
// exit ;
55856: GO 55872
// result := array [ 1 ] ;
55858: LD_ADDR_VAR 0 2
55862: PUSH
55863: LD_VAR 0 1
55867: PUSH
55868: LD_INT 1
55870: ARRAY
55871: ST_TO_ADDR
// end ;
55872: LD_VAR 0 2
55876: RET
// export function Last ( array ) ; begin
55877: LD_INT 0
55879: PPUSH
// if not array then
55880: LD_VAR 0 1
55884: NOT
55885: IFFALSE 55889
// exit ;
55887: GO 55905
// result := array [ array ] ;
55889: LD_ADDR_VAR 0 2
55893: PUSH
55894: LD_VAR 0 1
55898: PUSH
55899: LD_VAR 0 1
55903: ARRAY
55904: ST_TO_ADDR
// end ;
55905: LD_VAR 0 2
55909: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
55910: LD_INT 0
55912: PPUSH
55913: PPUSH
// result := [ ] ;
55914: LD_ADDR_VAR 0 5
55918: PUSH
55919: EMPTY
55920: ST_TO_ADDR
// if not array then
55921: LD_VAR 0 1
55925: NOT
55926: IFFALSE 55930
// exit ;
55928: GO 56042
// for i := 1 to array do
55930: LD_ADDR_VAR 0 6
55934: PUSH
55935: DOUBLE
55936: LD_INT 1
55938: DEC
55939: ST_TO_ADDR
55940: LD_VAR 0 1
55944: PUSH
55945: FOR_TO
55946: IFFALSE 56040
// if array [ i ] [ index ] = value then
55948: LD_VAR 0 1
55952: PUSH
55953: LD_VAR 0 6
55957: ARRAY
55958: PUSH
55959: LD_VAR 0 2
55963: ARRAY
55964: PUSH
55965: LD_VAR 0 3
55969: EQUAL
55970: IFFALSE 56038
// begin if indexColumn then
55972: LD_VAR 0 4
55976: IFFALSE 56012
// result := Join ( result , array [ i ] [ indexColumn ] ) else
55978: LD_ADDR_VAR 0 5
55982: PUSH
55983: LD_VAR 0 5
55987: PPUSH
55988: LD_VAR 0 1
55992: PUSH
55993: LD_VAR 0 6
55997: ARRAY
55998: PUSH
55999: LD_VAR 0 4
56003: ARRAY
56004: PPUSH
56005: CALL 51050 0 2
56009: ST_TO_ADDR
56010: GO 56038
// result := Join ( result , array [ i ] ) ;
56012: LD_ADDR_VAR 0 5
56016: PUSH
56017: LD_VAR 0 5
56021: PPUSH
56022: LD_VAR 0 1
56026: PUSH
56027: LD_VAR 0 6
56031: ARRAY
56032: PPUSH
56033: CALL 51050 0 2
56037: ST_TO_ADDR
// end ;
56038: GO 55945
56040: POP
56041: POP
// end ;
56042: LD_VAR 0 5
56046: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
56047: LD_INT 0
56049: PPUSH
// if not vehicles or not parkingPoint then
56050: LD_VAR 0 1
56054: NOT
56055: IFTRUE 56064
56057: PUSH
56058: LD_VAR 0 2
56062: NOT
56063: OR
56064: IFFALSE 56068
// exit ;
56066: GO 56166
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
56068: LD_ADDR_VAR 0 1
56072: PUSH
56073: LD_VAR 0 1
56077: PPUSH
56078: LD_INT 50
56080: PUSH
56081: EMPTY
56082: LIST
56083: PUSH
56084: LD_INT 3
56086: PUSH
56087: LD_INT 92
56089: PUSH
56090: LD_VAR 0 2
56094: PUSH
56095: LD_INT 1
56097: ARRAY
56098: PUSH
56099: LD_VAR 0 2
56103: PUSH
56104: LD_INT 2
56106: ARRAY
56107: PUSH
56108: LD_INT 8
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PPUSH
56125: CALL_OW 72
56129: ST_TO_ADDR
// if not vehicles then
56130: LD_VAR 0 1
56134: NOT
56135: IFFALSE 56139
// exit ;
56137: GO 56166
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
56139: LD_VAR 0 1
56143: PPUSH
56144: LD_VAR 0 2
56148: PUSH
56149: LD_INT 1
56151: ARRAY
56152: PPUSH
56153: LD_VAR 0 2
56157: PUSH
56158: LD_INT 2
56160: ARRAY
56161: PPUSH
56162: CALL_OW 111
// end ;
56166: LD_VAR 0 3
56170: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
56171: LD_INT 0
56173: PPUSH
56174: PPUSH
56175: PPUSH
// if not side or not area then
56176: LD_VAR 0 1
56180: NOT
56181: IFTRUE 56190
56183: PUSH
56184: LD_VAR 0 2
56188: NOT
56189: OR
56190: IFFALSE 56194
// exit ;
56192: GO 56313
// tmp := AreaToList ( area , 0 ) ;
56194: LD_ADDR_VAR 0 5
56198: PUSH
56199: LD_VAR 0 2
56203: PPUSH
56204: LD_INT 0
56206: PPUSH
56207: CALL_OW 517
56211: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
56212: LD_ADDR_VAR 0 4
56216: PUSH
56217: DOUBLE
56218: LD_INT 1
56220: DEC
56221: ST_TO_ADDR
56222: LD_VAR 0 5
56226: PUSH
56227: LD_INT 1
56229: ARRAY
56230: PUSH
56231: FOR_TO
56232: IFFALSE 56311
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
56234: LD_VAR 0 5
56238: PUSH
56239: LD_INT 1
56241: ARRAY
56242: PUSH
56243: LD_VAR 0 4
56247: ARRAY
56248: PPUSH
56249: LD_VAR 0 5
56253: PUSH
56254: LD_INT 2
56256: ARRAY
56257: PUSH
56258: LD_VAR 0 4
56262: ARRAY
56263: PPUSH
56264: CALL_OW 351
56268: IFFALSE 56309
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
56270: LD_VAR 0 5
56274: PUSH
56275: LD_INT 1
56277: ARRAY
56278: PUSH
56279: LD_VAR 0 4
56283: ARRAY
56284: PPUSH
56285: LD_VAR 0 5
56289: PUSH
56290: LD_INT 2
56292: ARRAY
56293: PUSH
56294: LD_VAR 0 4
56298: ARRAY
56299: PPUSH
56300: LD_VAR 0 1
56304: PPUSH
56305: CALL_OW 244
// end ;
56309: GO 56231
56311: POP
56312: POP
// end ;
56313: LD_VAR 0 3
56317: RET
// export function UniqueArray ( array ) ; var i ; begin
56318: LD_INT 0
56320: PPUSH
56321: PPUSH
// result := [ ] ;
56322: LD_ADDR_VAR 0 2
56326: PUSH
56327: EMPTY
56328: ST_TO_ADDR
// if not array then
56329: LD_VAR 0 1
56333: NOT
56334: IFFALSE 56338
// exit ;
56336: GO 56399
// for i := 1 to array do
56338: LD_ADDR_VAR 0 3
56342: PUSH
56343: DOUBLE
56344: LD_INT 1
56346: DEC
56347: ST_TO_ADDR
56348: LD_VAR 0 1
56352: PUSH
56353: FOR_TO
56354: IFFALSE 56397
// if not array [ i ] in result then
56356: LD_VAR 0 1
56360: PUSH
56361: LD_VAR 0 3
56365: ARRAY
56366: PUSH
56367: LD_VAR 0 2
56371: IN
56372: NOT
56373: IFFALSE 56395
// result := Join ( result , i ) ;
56375: LD_ADDR_VAR 0 2
56379: PUSH
56380: LD_VAR 0 2
56384: PPUSH
56385: LD_VAR 0 3
56389: PPUSH
56390: CALL 51050 0 2
56394: ST_TO_ADDR
56395: GO 56353
56397: POP
56398: POP
// end ; end_of_file
56399: LD_VAR 0 2
56403: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56404: LD_VAR 0 1
56408: PUSH
56409: LD_INT 200
56411: DOUBLE
56412: GREATEREQUAL
56413: IFFALSE 56421
56415: LD_INT 299
56417: DOUBLE
56418: LESSEQUAL
56419: IFTRUE 56423
56421: GO 56455
56423: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56424: LD_VAR 0 1
56428: PPUSH
56429: LD_VAR 0 2
56433: PPUSH
56434: LD_VAR 0 3
56438: PPUSH
56439: LD_VAR 0 4
56443: PPUSH
56444: LD_VAR 0 5
56448: PPUSH
56449: CALL 57317 0 5
56453: GO 56532
56455: LD_INT 300
56457: DOUBLE
56458: GREATEREQUAL
56459: IFFALSE 56467
56461: LD_INT 399
56463: DOUBLE
56464: LESSEQUAL
56465: IFTRUE 56469
56467: GO 56531
56469: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56470: LD_VAR 0 1
56474: PPUSH
56475: LD_VAR 0 2
56479: PPUSH
56480: LD_VAR 0 3
56484: PPUSH
56485: LD_VAR 0 4
56489: PPUSH
56490: LD_VAR 0 5
56494: PPUSH
56495: LD_VAR 0 6
56499: PPUSH
56500: LD_VAR 0 7
56504: PPUSH
56505: LD_VAR 0 8
56509: PPUSH
56510: LD_VAR 0 9
56514: PPUSH
56515: LD_VAR 0 10
56519: PPUSH
56520: LD_VAR 0 11
56524: PPUSH
56525: CALL 63638 0 11
56529: GO 56532
56531: POP
// end ;
56532: PPOPN 11
56534: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56535: LD_VAR 0 1
56539: PPUSH
56540: LD_VAR 0 2
56544: PPUSH
56545: LD_VAR 0 3
56549: PPUSH
56550: LD_VAR 0 4
56554: PPUSH
56555: LD_VAR 0 5
56559: PPUSH
56560: CALL 56617 0 5
// end ; end_of_file
56564: PPOPN 5
56566: END
// export function SOS_UnitDestroyed ( un ) ; begin
56567: LD_INT 0
56569: PPUSH
// ComRadiation ( un ) ;
56570: LD_VAR 0 1
56574: PPUSH
56575: CALL 57737 0 1
// end ;
56579: LD_VAR 0 2
56583: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56584: LD_INT 0
56586: PPUSH
// ComRadiation ( un ) ;
56587: LD_VAR 0 1
56591: PPUSH
56592: CALL 57737 0 1
// end ;
56596: LD_VAR 0 2
56600: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56601: LD_INT 0
56603: PPUSH
// end ;
56604: LD_VAR 0 4
56608: RET
// export function SOS_Command ( cmd ) ; begin
56609: LD_INT 0
56611: PPUSH
// end ;
56612: LD_VAR 0 2
56616: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56617: LD_INT 0
56619: PPUSH
// end ;
56620: LD_VAR 0 6
56624: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
56625: LD_INT 0
56627: PPUSH
56628: PPUSH
56629: PPUSH
56630: PPUSH
56631: PPUSH
// if not vehicle or not factory then
56632: LD_VAR 0 1
56636: NOT
56637: IFTRUE 56646
56639: PUSH
56640: LD_VAR 0 2
56644: NOT
56645: OR
56646: IFFALSE 56650
// exit ;
56648: GO 57312
// weapon := GetWeapon ( vehicle ) ;
56650: LD_ADDR_VAR 0 7
56654: PUSH
56655: LD_VAR 0 1
56659: PPUSH
56660: CALL_OW 264
56664: ST_TO_ADDR
// if weapon = ar_miner then
56665: LD_VAR 0 7
56669: PUSH
56670: LD_INT 81
56672: EQUAL
56673: IFFALSE 56730
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
56675: LD_ADDR_EXP 57
56679: PUSH
56680: LD_EXP 57
56684: PPUSH
56685: LD_EXP 57
56689: PUSH
56690: LD_INT 1
56692: PLUS
56693: PPUSH
56694: LD_VAR 0 1
56698: PPUSH
56699: CALL_OW 1
56703: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56704: LD_ADDR_EXP 58
56708: PUSH
56709: LD_EXP 58
56713: PPUSH
56714: LD_EXP 58
56718: PUSH
56719: LD_INT 1
56721: PLUS
56722: PPUSH
56723: EMPTY
56724: PPUSH
56725: CALL_OW 1
56729: ST_TO_ADDR
// end ; if not factoryWaypoints then
56730: LD_EXP 60
56734: NOT
56735: IFFALSE 56739
// exit ;
56737: GO 57312
// for i := 1 to Count ( factoryWaypoints ) do
56739: LD_ADDR_VAR 0 4
56743: PUSH
56744: DOUBLE
56745: LD_INT 1
56747: DEC
56748: ST_TO_ADDR
56749: LD_EXP 60
56753: PPUSH
56754: CALL 15084 0 1
56758: PUSH
56759: FOR_TO
56760: IFFALSE 57310
// if factoryWaypoints [ i ] [ 2 ] = factory then
56762: LD_EXP 60
56766: PUSH
56767: LD_VAR 0 4
56771: ARRAY
56772: PUSH
56773: LD_INT 2
56775: ARRAY
56776: PUSH
56777: LD_VAR 0 2
56781: EQUAL
56782: IFFALSE 57308
// begin if GetControl ( vehicle ) = control_manual then
56784: LD_VAR 0 1
56788: PPUSH
56789: CALL_OW 263
56793: PUSH
56794: LD_INT 1
56796: EQUAL
56797: IFFALSE 57161
// begin driver := IsDrivenBy ( vehicle ) ;
56799: LD_ADDR_VAR 0 5
56803: PUSH
56804: LD_VAR 0 1
56808: PPUSH
56809: CALL_OW 311
56813: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
56814: LD_VAR 0 5
56818: PUSH
56819: LD_EXP 61
56823: IN
56824: IFTRUE 56838
56826: PUSH
56827: LD_VAR 0 1
56831: PUSH
56832: LD_EXP 61
56836: IN
56837: OR
56838: IFFALSE 56844
// exit ;
56840: POP
56841: POP
56842: GO 57312
// if not HasTask ( driver ) then
56844: LD_VAR 0 5
56848: PPUSH
56849: CALL_OW 314
56853: NOT
56854: IFFALSE 57159
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
56856: LD_ADDR_EXP 61
56860: PUSH
56861: LD_EXP 61
56865: PPUSH
56866: LD_VAR 0 5
56870: PPUSH
56871: CALL 51050 0 2
56875: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
56876: LD_ADDR_EXP 61
56880: PUSH
56881: LD_EXP 61
56885: PPUSH
56886: LD_VAR 0 1
56890: PPUSH
56891: CALL 51050 0 2
56895: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56896: LD_ADDR_VAR 0 6
56900: PUSH
56901: LD_EXP 60
56905: PUSH
56906: LD_VAR 0 4
56910: ARRAY
56911: PUSH
56912: LD_INT 3
56914: ARRAY
56915: PPUSH
56916: LD_EXP 60
56920: PUSH
56921: LD_VAR 0 4
56925: ARRAY
56926: PUSH
56927: LD_INT 4
56929: ARRAY
56930: PPUSH
56931: CALL_OW 428
56935: ST_TO_ADDR
// if hex then
56936: LD_VAR 0 6
56940: IFFALSE 56958
// ComMoveUnit ( driver , hex ) else
56942: LD_VAR 0 5
56946: PPUSH
56947: LD_VAR 0 6
56951: PPUSH
56952: CALL_OW 112
56956: GO 57042
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
56958: LD_VAR 0 1
56962: PPUSH
56963: LD_EXP 60
56967: PUSH
56968: LD_VAR 0 4
56972: ARRAY
56973: PUSH
56974: LD_INT 3
56976: ARRAY
56977: PPUSH
56978: LD_EXP 60
56982: PUSH
56983: LD_VAR 0 4
56987: ARRAY
56988: PUSH
56989: LD_INT 4
56991: ARRAY
56992: PPUSH
56993: CALL_OW 297
56997: PUSH
56998: LD_INT 0
57000: GREATER
57001: IFFALSE 57042
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57003: LD_VAR 0 5
57007: PPUSH
57008: LD_EXP 60
57012: PUSH
57013: LD_VAR 0 4
57017: ARRAY
57018: PUSH
57019: LD_INT 3
57021: ARRAY
57022: PPUSH
57023: LD_EXP 60
57027: PUSH
57028: LD_VAR 0 4
57032: ARRAY
57033: PUSH
57034: LD_INT 4
57036: ARRAY
57037: PPUSH
57038: CALL_OW 111
// AddComExitVehicle ( driver ) ;
57042: LD_VAR 0 5
57046: PPUSH
57047: CALL_OW 181
// if Multiplayer then
57051: LD_OWVAR 4
57055: IFFALSE 57104
// begin repeat wait ( 10 ) ;
57057: LD_INT 10
57059: PPUSH
57060: CALL_OW 67
// until not IsInUnit ( driver ) ;
57064: LD_VAR 0 5
57068: PPUSH
57069: CALL_OW 310
57073: NOT
57074: IFFALSE 57057
// if not HasTask ( driver ) then
57076: LD_VAR 0 5
57080: PPUSH
57081: CALL_OW 314
57085: NOT
57086: IFFALSE 57102
// ComEnterUnit ( driver , factory ) ;
57088: LD_VAR 0 5
57092: PPUSH
57093: LD_VAR 0 2
57097: PPUSH
57098: CALL_OW 120
// end else
57102: GO 57118
// AddComEnterUnit ( driver , factory ) ;
57104: LD_VAR 0 5
57108: PPUSH
57109: LD_VAR 0 2
57113: PPUSH
57114: CALL_OW 180
// wait ( 0 0$1 ) ;
57118: LD_INT 35
57120: PPUSH
57121: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
57125: LD_ADDR_EXP 61
57129: PUSH
57130: LD_EXP 61
57134: PUSH
57135: LD_VAR 0 5
57139: DIFF
57140: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
57141: LD_ADDR_EXP 61
57145: PUSH
57146: LD_EXP 61
57150: PUSH
57151: LD_VAR 0 1
57155: DIFF
57156: ST_TO_ADDR
// break ;
57157: GO 57310
// end ; end else
57159: GO 57308
// if GetControl ( vehicle ) = control_remote then
57161: LD_VAR 0 1
57165: PPUSH
57166: CALL_OW 263
57170: PUSH
57171: LD_INT 2
57173: EQUAL
57174: IFFALSE 57260
// begin wait ( 0 0$2 ) ;
57176: LD_INT 70
57178: PPUSH
57179: CALL_OW 67
// repeat wait ( 10 ) ;
57183: LD_INT 10
57185: PPUSH
57186: CALL_OW 67
// Connect ( vehicle ) ;
57190: LD_VAR 0 1
57194: PPUSH
57195: CALL 21362 0 1
// until IsControledBy ( vehicle ) ;
57199: LD_VAR 0 1
57203: PPUSH
57204: CALL_OW 312
57208: IFFALSE 57183
// wait ( 10 ) ;
57210: LD_INT 10
57212: PPUSH
57213: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57217: LD_VAR 0 1
57221: PPUSH
57222: LD_EXP 60
57226: PUSH
57227: LD_VAR 0 4
57231: ARRAY
57232: PUSH
57233: LD_INT 3
57235: ARRAY
57236: PPUSH
57237: LD_EXP 60
57241: PUSH
57242: LD_VAR 0 4
57246: ARRAY
57247: PUSH
57248: LD_INT 4
57250: ARRAY
57251: PPUSH
57252: CALL_OW 111
// break ;
57256: GO 57310
// end else
57258: GO 57308
// begin wait ( 0 0$3 ) ;
57260: LD_INT 105
57262: PPUSH
57263: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57267: LD_VAR 0 1
57271: PPUSH
57272: LD_EXP 60
57276: PUSH
57277: LD_VAR 0 4
57281: ARRAY
57282: PUSH
57283: LD_INT 3
57285: ARRAY
57286: PPUSH
57287: LD_EXP 60
57291: PUSH
57292: LD_VAR 0 4
57296: ARRAY
57297: PUSH
57298: LD_INT 4
57300: ARRAY
57301: PPUSH
57302: CALL_OW 111
// break ;
57306: GO 57310
// end ; end ;
57308: GO 56759
57310: POP
57311: POP
// end ;
57312: LD_VAR 0 3
57316: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57317: LD_INT 0
57319: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57320: LD_VAR 0 1
57324: PUSH
57325: LD_INT 250
57327: EQUAL
57328: IFFALSE 57345
57330: PUSH
57331: LD_VAR 0 2
57335: PPUSH
57336: CALL_OW 264
57340: PUSH
57341: LD_INT 81
57343: EQUAL
57344: AND
57345: IFFALSE 57366
// MinerPlaceMine ( unit , x , y ) ;
57347: LD_VAR 0 2
57351: PPUSH
57352: LD_VAR 0 4
57356: PPUSH
57357: LD_VAR 0 5
57361: PPUSH
57362: CALL 60647 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57366: LD_VAR 0 1
57370: PUSH
57371: LD_INT 251
57373: EQUAL
57374: IFFALSE 57391
57376: PUSH
57377: LD_VAR 0 2
57381: PPUSH
57382: CALL_OW 264
57386: PUSH
57387: LD_INT 81
57389: EQUAL
57390: AND
57391: IFFALSE 57412
// MinerDetonateMine ( unit , x , y ) ;
57393: LD_VAR 0 2
57397: PPUSH
57398: LD_VAR 0 4
57402: PPUSH
57403: LD_VAR 0 5
57407: PPUSH
57408: CALL 61054 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57412: LD_VAR 0 1
57416: PUSH
57417: LD_INT 252
57419: EQUAL
57420: IFFALSE 57437
57422: PUSH
57423: LD_VAR 0 2
57427: PPUSH
57428: CALL_OW 264
57432: PUSH
57433: LD_INT 81
57435: EQUAL
57436: AND
57437: IFFALSE 57458
// MinerCreateMinefield ( unit , x , y ) ;
57439: LD_VAR 0 2
57443: PPUSH
57444: LD_VAR 0 4
57448: PPUSH
57449: LD_VAR 0 5
57453: PPUSH
57454: CALL 61286 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57458: LD_VAR 0 1
57462: PUSH
57463: LD_INT 253
57465: EQUAL
57466: IFFALSE 57483
57468: PUSH
57469: LD_VAR 0 2
57473: PPUSH
57474: CALL_OW 257
57478: PUSH
57479: LD_INT 5
57481: EQUAL
57482: AND
57483: IFFALSE 57504
// ComBinocular ( unit , x , y ) ;
57485: LD_VAR 0 2
57489: PPUSH
57490: LD_VAR 0 4
57494: PPUSH
57495: LD_VAR 0 5
57499: PPUSH
57500: CALL 61661 0 3
// if selectedUnit then
57504: LD_VAR 0 3
57508: IFFALSE 57568
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57510: LD_VAR 0 1
57514: PUSH
57515: LD_INT 254
57517: EQUAL
57518: IFFALSE 57535
57520: PUSH
57521: LD_VAR 0 2
57525: PPUSH
57526: CALL_OW 264
57530: PUSH
57531: LD_INT 99
57533: EQUAL
57534: AND
57535: IFFALSE 57552
57537: PUSH
57538: LD_VAR 0 3
57542: PPUSH
57543: CALL_OW 263
57547: PUSH
57548: LD_INT 3
57550: EQUAL
57551: AND
57552: IFFALSE 57568
// HackDestroyVehicle ( unit , selectedUnit ) ;
57554: LD_VAR 0 2
57558: PPUSH
57559: LD_VAR 0 3
57563: PPUSH
57564: CALL 59858 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57568: LD_VAR 0 1
57572: PUSH
57573: LD_INT 255
57575: EQUAL
57576: IFFALSE 57600
57578: PUSH
57579: LD_VAR 0 2
57583: PPUSH
57584: CALL_OW 264
57588: PUSH
57589: LD_INT 14
57591: PUSH
57592: LD_INT 53
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: IN
57599: AND
57600: IFFALSE 57618
57602: PUSH
57603: LD_VAR 0 4
57607: PPUSH
57608: LD_VAR 0 5
57612: PPUSH
57613: CALL_OW 488
57617: AND
57618: IFFALSE 57642
// CutTreeXYR ( unit , x , y , 12 ) ;
57620: LD_VAR 0 2
57624: PPUSH
57625: LD_VAR 0 4
57629: PPUSH
57630: LD_VAR 0 5
57634: PPUSH
57635: LD_INT 12
57637: PPUSH
57638: CALL 57833 0 4
// if cmd = 256 then
57642: LD_VAR 0 1
57646: PUSH
57647: LD_INT 256
57649: EQUAL
57650: IFFALSE 57671
// SetFactoryWaypoint ( unit , x , y ) ;
57652: LD_VAR 0 2
57656: PPUSH
57657: LD_VAR 0 4
57661: PPUSH
57662: LD_VAR 0 5
57666: PPUSH
57667: CALL 63646 0 3
// if cmd = 257 then
57671: LD_VAR 0 1
57675: PUSH
57676: LD_INT 257
57678: EQUAL
57679: IFFALSE 57700
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57681: LD_VAR 0 2
57685: PPUSH
57686: LD_VAR 0 4
57690: PPUSH
57691: LD_VAR 0 5
57695: PPUSH
57696: CALL 64142 0 3
// if cmd = 258 then
57700: LD_VAR 0 1
57704: PUSH
57705: LD_INT 258
57707: EQUAL
57708: IFFALSE 57732
// BurnTreeXYR ( unit , x , y , 8 ) ;
57710: LD_VAR 0 2
57714: PPUSH
57715: LD_VAR 0 4
57719: PPUSH
57720: LD_VAR 0 5
57724: PPUSH
57725: LD_INT 8
57727: PPUSH
57728: CALL 58233 0 4
// end ;
57732: LD_VAR 0 6
57736: RET
// export function ComRadiation ( un ) ; var eff ; begin
57737: LD_INT 0
57739: PPUSH
57740: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
57741: LD_VAR 0 1
57745: PPUSH
57746: CALL_OW 264
57750: PUSH
57751: LD_INT 91
57753: NONEQUAL
57754: IFFALSE 57758
// exit ;
57756: GO 57828
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57758: LD_INT 68
57760: PPUSH
57761: LD_VAR 0 1
57765: PPUSH
57766: CALL_OW 255
57770: PPUSH
57771: CALL_OW 321
57775: PUSH
57776: LD_INT 2
57778: EQUAL
57779: IFFALSE 57791
// eff := 50 else
57781: LD_ADDR_VAR 0 3
57785: PUSH
57786: LD_INT 50
57788: ST_TO_ADDR
57789: GO 57799
// eff := 25 ;
57791: LD_ADDR_VAR 0 3
57795: PUSH
57796: LD_INT 25
57798: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57799: LD_VAR 0 1
57803: PPUSH
57804: CALL_OW 250
57808: PPUSH
57809: LD_VAR 0 1
57813: PPUSH
57814: CALL_OW 251
57818: PPUSH
57819: LD_VAR 0 3
57823: PPUSH
57824: CALL_OW 495
// end ;
57828: LD_VAR 0 2
57832: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57833: LD_INT 0
57835: PPUSH
57836: PPUSH
57837: PPUSH
57838: PPUSH
57839: PPUSH
57840: PPUSH
57841: PPUSH
57842: PPUSH
57843: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
57844: LD_VAR 0 1
57848: PPUSH
57849: CALL_OW 302
57853: NOT
57854: IFTRUE 57873
57856: PUSH
57857: LD_VAR 0 2
57861: PPUSH
57862: LD_VAR 0 3
57866: PPUSH
57867: CALL_OW 488
57871: NOT
57872: OR
57873: IFTRUE 57882
57875: PUSH
57876: LD_VAR 0 4
57880: NOT
57881: OR
57882: IFFALSE 57886
// exit ;
57884: GO 58228
// list := [ ] ;
57886: LD_ADDR_VAR 0 13
57890: PUSH
57891: EMPTY
57892: ST_TO_ADDR
// if x - r < 0 then
57893: LD_VAR 0 2
57897: PUSH
57898: LD_VAR 0 4
57902: MINUS
57903: PUSH
57904: LD_INT 0
57906: LESS
57907: IFFALSE 57919
// min_x := 0 else
57909: LD_ADDR_VAR 0 7
57913: PUSH
57914: LD_INT 0
57916: ST_TO_ADDR
57917: GO 57935
// min_x := x - r ;
57919: LD_ADDR_VAR 0 7
57923: PUSH
57924: LD_VAR 0 2
57928: PUSH
57929: LD_VAR 0 4
57933: MINUS
57934: ST_TO_ADDR
// if y - r < 0 then
57935: LD_VAR 0 3
57939: PUSH
57940: LD_VAR 0 4
57944: MINUS
57945: PUSH
57946: LD_INT 0
57948: LESS
57949: IFFALSE 57961
// min_y := 0 else
57951: LD_ADDR_VAR 0 8
57955: PUSH
57956: LD_INT 0
57958: ST_TO_ADDR
57959: GO 57977
// min_y := y - r ;
57961: LD_ADDR_VAR 0 8
57965: PUSH
57966: LD_VAR 0 3
57970: PUSH
57971: LD_VAR 0 4
57975: MINUS
57976: ST_TO_ADDR
// max_x := x + r ;
57977: LD_ADDR_VAR 0 9
57981: PUSH
57982: LD_VAR 0 2
57986: PUSH
57987: LD_VAR 0 4
57991: PLUS
57992: ST_TO_ADDR
// max_y := y + r ;
57993: LD_ADDR_VAR 0 10
57997: PUSH
57998: LD_VAR 0 3
58002: PUSH
58003: LD_VAR 0 4
58007: PLUS
58008: ST_TO_ADDR
// for _x = min_x to max_x do
58009: LD_ADDR_VAR 0 11
58013: PUSH
58014: DOUBLE
58015: LD_VAR 0 7
58019: DEC
58020: ST_TO_ADDR
58021: LD_VAR 0 9
58025: PUSH
58026: FOR_TO
58027: IFFALSE 58146
// for _y = min_y to max_y do
58029: LD_ADDR_VAR 0 12
58033: PUSH
58034: DOUBLE
58035: LD_VAR 0 8
58039: DEC
58040: ST_TO_ADDR
58041: LD_VAR 0 10
58045: PUSH
58046: FOR_TO
58047: IFFALSE 58142
// begin if not ValidHex ( _x , _y ) then
58049: LD_VAR 0 11
58053: PPUSH
58054: LD_VAR 0 12
58058: PPUSH
58059: CALL_OW 488
58063: NOT
58064: IFFALSE 58068
// continue ;
58066: GO 58046
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58068: LD_VAR 0 11
58072: PPUSH
58073: LD_VAR 0 12
58077: PPUSH
58078: CALL_OW 351
58082: IFFALSE 58100
58084: PUSH
58085: LD_VAR 0 11
58089: PPUSH
58090: LD_VAR 0 12
58094: PPUSH
58095: CALL_OW 554
58099: AND
58100: IFFALSE 58140
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58102: LD_ADDR_VAR 0 13
58106: PUSH
58107: LD_VAR 0 13
58111: PPUSH
58112: LD_VAR 0 13
58116: PUSH
58117: LD_INT 1
58119: PLUS
58120: PPUSH
58121: LD_VAR 0 11
58125: PUSH
58126: LD_VAR 0 12
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PPUSH
58135: CALL_OW 2
58139: ST_TO_ADDR
// end ;
58140: GO 58046
58142: POP
58143: POP
58144: GO 58026
58146: POP
58147: POP
// if not list then
58148: LD_VAR 0 13
58152: NOT
58153: IFFALSE 58157
// exit ;
58155: GO 58228
// for i in list do
58157: LD_ADDR_VAR 0 6
58161: PUSH
58162: LD_VAR 0 13
58166: PUSH
58167: FOR_IN
58168: IFFALSE 58226
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58170: LD_VAR 0 1
58174: PPUSH
58175: LD_STRING M
58177: PUSH
58178: LD_VAR 0 6
58182: PUSH
58183: LD_INT 1
58185: ARRAY
58186: PUSH
58187: LD_VAR 0 6
58191: PUSH
58192: LD_INT 2
58194: ARRAY
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: PUSH
58217: EMPTY
58218: LIST
58219: PPUSH
58220: CALL_OW 447
58224: GO 58167
58226: POP
58227: POP
// end ;
58228: LD_VAR 0 5
58232: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
58233: LD_INT 0
58235: PPUSH
58236: PPUSH
58237: PPUSH
58238: PPUSH
58239: PPUSH
58240: PPUSH
58241: PPUSH
58242: PPUSH
58243: PPUSH
58244: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
58245: LD_VAR 0 1
58249: PPUSH
58250: CALL_OW 302
58254: NOT
58255: IFTRUE 58274
58257: PUSH
58258: LD_VAR 0 2
58262: PPUSH
58263: LD_VAR 0 3
58267: PPUSH
58268: CALL_OW 488
58272: NOT
58273: OR
58274: IFTRUE 58283
58276: PUSH
58277: LD_VAR 0 4
58281: NOT
58282: OR
58283: IFFALSE 58287
// exit ;
58285: GO 58804
// list := [ ] ;
58287: LD_ADDR_VAR 0 13
58291: PUSH
58292: EMPTY
58293: ST_TO_ADDR
// if x - r < 0 then
58294: LD_VAR 0 2
58298: PUSH
58299: LD_VAR 0 4
58303: MINUS
58304: PUSH
58305: LD_INT 0
58307: LESS
58308: IFFALSE 58320
// min_x := 0 else
58310: LD_ADDR_VAR 0 7
58314: PUSH
58315: LD_INT 0
58317: ST_TO_ADDR
58318: GO 58336
// min_x := x - r ;
58320: LD_ADDR_VAR 0 7
58324: PUSH
58325: LD_VAR 0 2
58329: PUSH
58330: LD_VAR 0 4
58334: MINUS
58335: ST_TO_ADDR
// if y - r < 0 then
58336: LD_VAR 0 3
58340: PUSH
58341: LD_VAR 0 4
58345: MINUS
58346: PUSH
58347: LD_INT 0
58349: LESS
58350: IFFALSE 58362
// min_y := 0 else
58352: LD_ADDR_VAR 0 8
58356: PUSH
58357: LD_INT 0
58359: ST_TO_ADDR
58360: GO 58378
// min_y := y - r ;
58362: LD_ADDR_VAR 0 8
58366: PUSH
58367: LD_VAR 0 3
58371: PUSH
58372: LD_VAR 0 4
58376: MINUS
58377: ST_TO_ADDR
// max_x := x + r ;
58378: LD_ADDR_VAR 0 9
58382: PUSH
58383: LD_VAR 0 2
58387: PUSH
58388: LD_VAR 0 4
58392: PLUS
58393: ST_TO_ADDR
// max_y := y + r ;
58394: LD_ADDR_VAR 0 10
58398: PUSH
58399: LD_VAR 0 3
58403: PUSH
58404: LD_VAR 0 4
58408: PLUS
58409: ST_TO_ADDR
// for _x = min_x to max_x do
58410: LD_ADDR_VAR 0 11
58414: PUSH
58415: DOUBLE
58416: LD_VAR 0 7
58420: DEC
58421: ST_TO_ADDR
58422: LD_VAR 0 9
58426: PUSH
58427: FOR_TO
58428: IFFALSE 58547
// for _y = min_y to max_y do
58430: LD_ADDR_VAR 0 12
58434: PUSH
58435: DOUBLE
58436: LD_VAR 0 8
58440: DEC
58441: ST_TO_ADDR
58442: LD_VAR 0 10
58446: PUSH
58447: FOR_TO
58448: IFFALSE 58543
// begin if not ValidHex ( _x , _y ) then
58450: LD_VAR 0 11
58454: PPUSH
58455: LD_VAR 0 12
58459: PPUSH
58460: CALL_OW 488
58464: NOT
58465: IFFALSE 58469
// continue ;
58467: GO 58447
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58469: LD_VAR 0 11
58473: PPUSH
58474: LD_VAR 0 12
58478: PPUSH
58479: CALL_OW 351
58483: IFFALSE 58501
58485: PUSH
58486: LD_VAR 0 11
58490: PPUSH
58491: LD_VAR 0 12
58495: PPUSH
58496: CALL_OW 554
58500: AND
58501: IFFALSE 58541
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58503: LD_ADDR_VAR 0 13
58507: PUSH
58508: LD_VAR 0 13
58512: PPUSH
58513: LD_VAR 0 13
58517: PUSH
58518: LD_INT 1
58520: PLUS
58521: PPUSH
58522: LD_VAR 0 11
58526: PUSH
58527: LD_VAR 0 12
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PPUSH
58536: CALL_OW 2
58540: ST_TO_ADDR
// end ;
58541: GO 58447
58543: POP
58544: POP
58545: GO 58427
58547: POP
58548: POP
// if not list then
58549: LD_VAR 0 13
58553: NOT
58554: IFFALSE 58558
// exit ;
58556: GO 58804
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58558: LD_ADDR_VAR 0 13
58562: PUSH
58563: LD_VAR 0 1
58567: PPUSH
58568: LD_VAR 0 13
58572: PPUSH
58573: LD_INT 1
58575: PPUSH
58576: LD_INT 1
58578: PPUSH
58579: CALL 18490 0 4
58583: ST_TO_ADDR
// ComStop ( flame ) ;
58584: LD_VAR 0 1
58588: PPUSH
58589: CALL_OW 141
// for i in list do
58593: LD_ADDR_VAR 0 6
58597: PUSH
58598: LD_VAR 0 13
58602: PUSH
58603: FOR_IN
58604: IFFALSE 58635
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
58606: LD_VAR 0 1
58610: PPUSH
58611: LD_VAR 0 6
58615: PUSH
58616: LD_INT 1
58618: ARRAY
58619: PPUSH
58620: LD_VAR 0 6
58624: PUSH
58625: LD_INT 2
58627: ARRAY
58628: PPUSH
58629: CALL_OW 176
58633: GO 58603
58635: POP
58636: POP
// repeat wait ( 0 0$1 ) ;
58637: LD_INT 35
58639: PPUSH
58640: CALL_OW 67
// task := GetTaskList ( flame ) ;
58644: LD_ADDR_VAR 0 14
58648: PUSH
58649: LD_VAR 0 1
58653: PPUSH
58654: CALL_OW 437
58658: ST_TO_ADDR
// if not task then
58659: LD_VAR 0 14
58663: NOT
58664: IFFALSE 58668
// exit ;
58666: GO 58804
// if task [ 1 ] [ 1 ] <> | then
58668: LD_VAR 0 14
58672: PUSH
58673: LD_INT 1
58675: ARRAY
58676: PUSH
58677: LD_INT 1
58679: ARRAY
58680: PUSH
58681: LD_STRING |
58683: NONEQUAL
58684: IFFALSE 58688
// exit ;
58686: GO 58804
// _x := task [ 1 ] [ 2 ] ;
58688: LD_ADDR_VAR 0 11
58692: PUSH
58693: LD_VAR 0 14
58697: PUSH
58698: LD_INT 1
58700: ARRAY
58701: PUSH
58702: LD_INT 2
58704: ARRAY
58705: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
58706: LD_ADDR_VAR 0 12
58710: PUSH
58711: LD_VAR 0 14
58715: PUSH
58716: LD_INT 1
58718: ARRAY
58719: PUSH
58720: LD_INT 3
58722: ARRAY
58723: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
58724: LD_VAR 0 11
58728: PPUSH
58729: LD_VAR 0 12
58733: PPUSH
58734: CALL_OW 351
58738: NOT
58739: IFTRUE 58758
58741: PUSH
58742: LD_VAR 0 11
58746: PPUSH
58747: LD_VAR 0 12
58751: PPUSH
58752: CALL_OW 554
58756: NOT
58757: OR
58758: IFFALSE 58792
// begin task := Delete ( task , 1 ) ;
58760: LD_ADDR_VAR 0 14
58764: PUSH
58765: LD_VAR 0 14
58769: PPUSH
58770: LD_INT 1
58772: PPUSH
58773: CALL_OW 3
58777: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
58778: LD_VAR 0 1
58782: PPUSH
58783: LD_VAR 0 14
58787: PPUSH
58788: CALL_OW 446
// end ; until not HasTask ( flame ) ;
58792: LD_VAR 0 1
58796: PPUSH
58797: CALL_OW 314
58801: NOT
58802: IFFALSE 58637
// end ;
58804: LD_VAR 0 5
58808: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58809: LD_EXP 50
58813: NOT
58814: IFFALSE 58864
58816: GO 58818
58818: DISABLE
// begin initHack := true ;
58819: LD_ADDR_EXP 50
58823: PUSH
58824: LD_INT 1
58826: ST_TO_ADDR
// hackTanks := [ ] ;
58827: LD_ADDR_EXP 51
58831: PUSH
58832: EMPTY
58833: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58834: LD_ADDR_EXP 52
58838: PUSH
58839: EMPTY
58840: ST_TO_ADDR
// hackLimit := 3 ;
58841: LD_ADDR_EXP 53
58845: PUSH
58846: LD_INT 3
58848: ST_TO_ADDR
// hackDist := 12 ;
58849: LD_ADDR_EXP 54
58853: PUSH
58854: LD_INT 12
58856: ST_TO_ADDR
// hackCounter := [ ] ;
58857: LD_ADDR_EXP 55
58861: PUSH
58862: EMPTY
58863: ST_TO_ADDR
// end ;
58864: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58865: LD_EXP 50
58869: IFFALSE 58887
58871: PUSH
58872: LD_INT 34
58874: PUSH
58875: LD_INT 99
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PPUSH
58882: CALL_OW 69
58886: AND
58887: IFFALSE 59140
58889: GO 58891
58891: DISABLE
58892: LD_INT 0
58894: PPUSH
58895: PPUSH
// begin enable ;
58896: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58897: LD_ADDR_VAR 0 1
58901: PUSH
58902: LD_INT 34
58904: PUSH
58905: LD_INT 99
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PPUSH
58912: CALL_OW 69
58916: PUSH
58917: FOR_IN
58918: IFFALSE 59138
// begin if not i in hackTanks then
58920: LD_VAR 0 1
58924: PUSH
58925: LD_EXP 51
58929: IN
58930: NOT
58931: IFFALSE 59014
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58933: LD_ADDR_EXP 51
58937: PUSH
58938: LD_EXP 51
58942: PPUSH
58943: LD_EXP 51
58947: PUSH
58948: LD_INT 1
58950: PLUS
58951: PPUSH
58952: LD_VAR 0 1
58956: PPUSH
58957: CALL_OW 1
58961: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58962: LD_ADDR_EXP 52
58966: PUSH
58967: LD_EXP 52
58971: PPUSH
58972: LD_EXP 52
58976: PUSH
58977: LD_INT 1
58979: PLUS
58980: PPUSH
58981: EMPTY
58982: PPUSH
58983: CALL_OW 1
58987: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58988: LD_ADDR_EXP 55
58992: PUSH
58993: LD_EXP 55
58997: PPUSH
58998: LD_EXP 55
59002: PUSH
59003: LD_INT 1
59005: PLUS
59006: PPUSH
59007: EMPTY
59008: PPUSH
59009: CALL_OW 1
59013: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59014: LD_VAR 0 1
59018: PPUSH
59019: CALL_OW 302
59023: NOT
59024: IFFALSE 59037
// begin HackUnlinkAll ( i ) ;
59026: LD_VAR 0 1
59030: PPUSH
59031: CALL 59143 0 1
// continue ;
59035: GO 58917
// end ; HackCheckCapturedStatus ( i ) ;
59037: LD_VAR 0 1
59041: PPUSH
59042: CALL 59588 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59046: LD_ADDR_VAR 0 2
59050: PUSH
59051: LD_INT 81
59053: PUSH
59054: LD_VAR 0 1
59058: PPUSH
59059: CALL_OW 255
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 33
59070: PUSH
59071: LD_INT 3
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 91
59080: PUSH
59081: LD_VAR 0 1
59085: PUSH
59086: LD_EXP 54
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 50
59098: PUSH
59099: EMPTY
59100: LIST
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: PPUSH
59108: CALL_OW 69
59112: ST_TO_ADDR
// if not tmp then
59113: LD_VAR 0 2
59117: NOT
59118: IFFALSE 59122
// continue ;
59120: GO 58917
// HackLink ( i , tmp ) ;
59122: LD_VAR 0 1
59126: PPUSH
59127: LD_VAR 0 2
59131: PPUSH
59132: CALL 59279 0 2
// end ;
59136: GO 58917
59138: POP
59139: POP
// end ;
59140: PPOPN 2
59142: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59143: LD_INT 0
59145: PPUSH
59146: PPUSH
59147: PPUSH
// if not hack in hackTanks then
59148: LD_VAR 0 1
59152: PUSH
59153: LD_EXP 51
59157: IN
59158: NOT
59159: IFFALSE 59163
// exit ;
59161: GO 59274
// index := GetElementIndex ( hackTanks , hack ) ;
59163: LD_ADDR_VAR 0 4
59167: PUSH
59168: LD_EXP 51
59172: PPUSH
59173: LD_VAR 0 1
59177: PPUSH
59178: CALL 17785 0 2
59182: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59183: LD_EXP 52
59187: PUSH
59188: LD_VAR 0 4
59192: ARRAY
59193: IFFALSE 59274
// begin for i in hackTanksCaptured [ index ] do
59195: LD_ADDR_VAR 0 3
59199: PUSH
59200: LD_EXP 52
59204: PUSH
59205: LD_VAR 0 4
59209: ARRAY
59210: PUSH
59211: FOR_IN
59212: IFFALSE 59238
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59214: LD_VAR 0 3
59218: PUSH
59219: LD_INT 1
59221: ARRAY
59222: PPUSH
59223: LD_VAR 0 3
59227: PUSH
59228: LD_INT 2
59230: ARRAY
59231: PPUSH
59232: CALL_OW 235
59236: GO 59211
59238: POP
59239: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59240: LD_ADDR_EXP 52
59244: PUSH
59245: LD_EXP 52
59249: PPUSH
59250: LD_VAR 0 4
59254: PPUSH
59255: EMPTY
59256: PPUSH
59257: CALL_OW 1
59261: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59262: LD_VAR 0 1
59266: PPUSH
59267: LD_INT 0
59269: PPUSH
59270: CALL_OW 505
// end ; end ;
59274: LD_VAR 0 2
59278: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59279: LD_INT 0
59281: PPUSH
59282: PPUSH
59283: PPUSH
// if not hack in hackTanks or not vehicles then
59284: LD_VAR 0 1
59288: PUSH
59289: LD_EXP 51
59293: IN
59294: NOT
59295: IFTRUE 59304
59297: PUSH
59298: LD_VAR 0 2
59302: NOT
59303: OR
59304: IFFALSE 59308
// exit ;
59306: GO 59583
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59308: LD_ADDR_VAR 0 2
59312: PUSH
59313: LD_VAR 0 1
59317: PPUSH
59318: LD_VAR 0 2
59322: PPUSH
59323: LD_INT 1
59325: PPUSH
59326: LD_INT 1
59328: PPUSH
59329: CALL 18437 0 4
59333: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59334: LD_ADDR_VAR 0 5
59338: PUSH
59339: LD_EXP 51
59343: PPUSH
59344: LD_VAR 0 1
59348: PPUSH
59349: CALL 17785 0 2
59353: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59354: LD_EXP 52
59358: PUSH
59359: LD_VAR 0 5
59363: ARRAY
59364: PUSH
59365: LD_EXP 53
59369: LESS
59370: IFFALSE 59559
// begin for i := 1 to vehicles do
59372: LD_ADDR_VAR 0 4
59376: PUSH
59377: DOUBLE
59378: LD_INT 1
59380: DEC
59381: ST_TO_ADDR
59382: LD_VAR 0 2
59386: PUSH
59387: FOR_TO
59388: IFFALSE 59557
// begin if hackTanksCaptured [ index ] = hackLimit then
59390: LD_EXP 52
59394: PUSH
59395: LD_VAR 0 5
59399: ARRAY
59400: PUSH
59401: LD_EXP 53
59405: EQUAL
59406: IFFALSE 59410
// break ;
59408: GO 59557
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59410: LD_ADDR_EXP 55
59414: PUSH
59415: LD_EXP 55
59419: PPUSH
59420: LD_VAR 0 5
59424: PPUSH
59425: LD_EXP 55
59429: PUSH
59430: LD_VAR 0 5
59434: ARRAY
59435: PUSH
59436: LD_INT 1
59438: PLUS
59439: PPUSH
59440: CALL_OW 1
59444: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59445: LD_ADDR_EXP 52
59449: PUSH
59450: LD_EXP 52
59454: PPUSH
59455: LD_VAR 0 5
59459: PUSH
59460: LD_EXP 52
59464: PUSH
59465: LD_VAR 0 5
59469: ARRAY
59470: PUSH
59471: LD_INT 1
59473: PLUS
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PPUSH
59479: LD_VAR 0 2
59483: PUSH
59484: LD_VAR 0 4
59488: ARRAY
59489: PUSH
59490: LD_VAR 0 2
59494: PUSH
59495: LD_VAR 0 4
59499: ARRAY
59500: PPUSH
59501: CALL_OW 255
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PPUSH
59510: CALL 18002 0 3
59514: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59515: LD_VAR 0 2
59519: PUSH
59520: LD_VAR 0 4
59524: ARRAY
59525: PPUSH
59526: LD_VAR 0 1
59530: PPUSH
59531: CALL_OW 255
59535: PPUSH
59536: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59540: LD_VAR 0 2
59544: PUSH
59545: LD_VAR 0 4
59549: ARRAY
59550: PPUSH
59551: CALL_OW 141
// end ;
59555: GO 59387
59557: POP
59558: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59559: LD_VAR 0 1
59563: PPUSH
59564: LD_EXP 52
59568: PUSH
59569: LD_VAR 0 5
59573: ARRAY
59574: PUSH
59575: LD_INT 0
59577: PLUS
59578: PPUSH
59579: CALL_OW 505
// end ;
59583: LD_VAR 0 3
59587: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59588: LD_INT 0
59590: PPUSH
59591: PPUSH
59592: PPUSH
59593: PPUSH
// if not hack in hackTanks then
59594: LD_VAR 0 1
59598: PUSH
59599: LD_EXP 51
59603: IN
59604: NOT
59605: IFFALSE 59609
// exit ;
59607: GO 59853
// index := GetElementIndex ( hackTanks , hack ) ;
59609: LD_ADDR_VAR 0 4
59613: PUSH
59614: LD_EXP 51
59618: PPUSH
59619: LD_VAR 0 1
59623: PPUSH
59624: CALL 17785 0 2
59628: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59629: LD_ADDR_VAR 0 3
59633: PUSH
59634: DOUBLE
59635: LD_EXP 52
59639: PUSH
59640: LD_VAR 0 4
59644: ARRAY
59645: INC
59646: ST_TO_ADDR
59647: LD_INT 1
59649: PUSH
59650: FOR_DOWNTO
59651: IFFALSE 59827
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59653: LD_ADDR_VAR 0 5
59657: PUSH
59658: LD_EXP 52
59662: PUSH
59663: LD_VAR 0 4
59667: ARRAY
59668: PUSH
59669: LD_VAR 0 3
59673: ARRAY
59674: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59675: LD_VAR 0 5
59679: PUSH
59680: LD_INT 1
59682: ARRAY
59683: PPUSH
59684: CALL_OW 302
59688: NOT
59689: IFTRUE 59717
59691: PUSH
59692: LD_VAR 0 5
59696: PUSH
59697: LD_INT 1
59699: ARRAY
59700: PPUSH
59701: CALL_OW 255
59705: PUSH
59706: LD_VAR 0 1
59710: PPUSH
59711: CALL_OW 255
59715: NONEQUAL
59716: OR
59717: IFFALSE 59825
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59719: LD_VAR 0 5
59723: PUSH
59724: LD_INT 1
59726: ARRAY
59727: PPUSH
59728: CALL_OW 305
59732: IFFALSE 59760
59734: PUSH
59735: LD_VAR 0 5
59739: PUSH
59740: LD_INT 1
59742: ARRAY
59743: PPUSH
59744: CALL_OW 255
59748: PUSH
59749: LD_VAR 0 1
59753: PPUSH
59754: CALL_OW 255
59758: EQUAL
59759: AND
59760: IFFALSE 59784
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59762: LD_VAR 0 5
59766: PUSH
59767: LD_INT 1
59769: ARRAY
59770: PPUSH
59771: LD_VAR 0 5
59775: PUSH
59776: LD_INT 2
59778: ARRAY
59779: PPUSH
59780: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59784: LD_ADDR_EXP 52
59788: PUSH
59789: LD_EXP 52
59793: PPUSH
59794: LD_VAR 0 4
59798: PPUSH
59799: LD_EXP 52
59803: PUSH
59804: LD_VAR 0 4
59808: ARRAY
59809: PPUSH
59810: LD_VAR 0 3
59814: PPUSH
59815: CALL_OW 3
59819: PPUSH
59820: CALL_OW 1
59824: ST_TO_ADDR
// end ; end ;
59825: GO 59650
59827: POP
59828: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59829: LD_VAR 0 1
59833: PPUSH
59834: LD_EXP 52
59838: PUSH
59839: LD_VAR 0 4
59843: ARRAY
59844: PUSH
59845: LD_INT 0
59847: PLUS
59848: PPUSH
59849: CALL_OW 505
// end ;
59853: LD_VAR 0 2
59857: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59858: LD_INT 0
59860: PPUSH
59861: PPUSH
59862: PPUSH
59863: PPUSH
// if not hack in hackTanks then
59864: LD_VAR 0 1
59868: PUSH
59869: LD_EXP 51
59873: IN
59874: NOT
59875: IFFALSE 59879
// exit ;
59877: GO 59964
// index := GetElementIndex ( hackTanks , hack ) ;
59879: LD_ADDR_VAR 0 5
59883: PUSH
59884: LD_EXP 51
59888: PPUSH
59889: LD_VAR 0 1
59893: PPUSH
59894: CALL 17785 0 2
59898: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59899: LD_ADDR_VAR 0 4
59903: PUSH
59904: DOUBLE
59905: LD_INT 1
59907: DEC
59908: ST_TO_ADDR
59909: LD_EXP 52
59913: PUSH
59914: LD_VAR 0 5
59918: ARRAY
59919: PUSH
59920: FOR_TO
59921: IFFALSE 59962
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59923: LD_EXP 52
59927: PUSH
59928: LD_VAR 0 5
59932: ARRAY
59933: PUSH
59934: LD_VAR 0 4
59938: ARRAY
59939: PUSH
59940: LD_INT 1
59942: ARRAY
59943: PUSH
59944: LD_VAR 0 2
59948: EQUAL
59949: IFFALSE 59960
// KillUnit ( vehicle ) ;
59951: LD_VAR 0 2
59955: PPUSH
59956: CALL_OW 66
59960: GO 59920
59962: POP
59963: POP
// end ;
59964: LD_VAR 0 3
59968: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
59969: LD_EXP 56
59973: NOT
59974: IFFALSE 60107
59976: GO 59978
59978: DISABLE
59979: LD_INT 0
59981: PPUSH
// begin initMiner := true ;
59982: LD_ADDR_EXP 56
59986: PUSH
59987: LD_INT 1
59989: ST_TO_ADDR
// minersList := [ ] ;
59990: LD_ADDR_EXP 57
59994: PUSH
59995: EMPTY
59996: ST_TO_ADDR
// minerMinesList := [ ] ;
59997: LD_ADDR_EXP 58
60001: PUSH
60002: EMPTY
60003: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
60004: LD_ADDR_EXP 59
60008: PUSH
60009: LD_INT 6
60011: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60012: LD_ADDR_VAR 0 1
60016: PUSH
60017: LD_INT 34
60019: PUSH
60020: LD_INT 81
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PPUSH
60027: CALL_OW 69
60031: PUSH
60032: FOR_IN
60033: IFFALSE 60105
// begin if not i in minersList then
60035: LD_VAR 0 1
60039: PUSH
60040: LD_EXP 57
60044: IN
60045: NOT
60046: IFFALSE 60103
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60048: LD_ADDR_EXP 57
60052: PUSH
60053: LD_EXP 57
60057: PPUSH
60058: LD_EXP 57
60062: PUSH
60063: LD_INT 1
60065: PLUS
60066: PPUSH
60067: LD_VAR 0 1
60071: PPUSH
60072: CALL_OW 1
60076: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60077: LD_ADDR_EXP 58
60081: PUSH
60082: LD_EXP 58
60086: PPUSH
60087: LD_EXP 58
60091: PUSH
60092: LD_INT 1
60094: PLUS
60095: PPUSH
60096: EMPTY
60097: PPUSH
60098: CALL_OW 1
60102: ST_TO_ADDR
// end end ;
60103: GO 60032
60105: POP
60106: POP
// end ;
60107: PPOPN 1
60109: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
60110: LD_EXP 56
60114: IFFALSE 60145
60116: PUSH
60117: LD_EXP 58
60121: PPUSH
60122: CALL 15084 0 1
60126: IFTRUE 60144
60128: PUSH
60129: LD_INT 34
60131: PUSH
60132: LD_INT 81
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PPUSH
60139: CALL_OW 69
60143: OR
60144: AND
60145: IFFALSE 60644
60147: GO 60149
60149: DISABLE
60150: LD_INT 0
60152: PPUSH
60153: PPUSH
60154: PPUSH
60155: PPUSH
// begin enable ;
60156: ENABLE
// for i := minerMinesList downto 1 do
60157: LD_ADDR_VAR 0 1
60161: PUSH
60162: DOUBLE
60163: LD_EXP 58
60167: INC
60168: ST_TO_ADDR
60169: LD_INT 1
60171: PUSH
60172: FOR_DOWNTO
60173: IFFALSE 60642
// begin if IsLive ( minersList [ i ] ) then
60175: LD_EXP 57
60179: PUSH
60180: LD_VAR 0 1
60184: ARRAY
60185: PPUSH
60186: CALL_OW 300
60190: IFFALSE 60223
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
60192: LD_EXP 57
60196: PUSH
60197: LD_VAR 0 1
60201: ARRAY
60202: PPUSH
60203: LD_EXP 58
60207: PUSH
60208: LD_VAR 0 1
60212: ARRAY
60213: PPUSH
60214: CALL 15084 0 1
60218: PPUSH
60219: CALL_OW 505
// if not minerMinesList [ i ] then
60223: LD_EXP 58
60227: PUSH
60228: LD_VAR 0 1
60232: ARRAY
60233: NOT
60234: IFFALSE 60238
// continue ;
60236: GO 60172
// for j := minerMinesList [ i ] downto 1 do
60238: LD_ADDR_VAR 0 2
60242: PUSH
60243: DOUBLE
60244: LD_EXP 58
60248: PUSH
60249: LD_VAR 0 1
60253: ARRAY
60254: INC
60255: ST_TO_ADDR
60256: LD_INT 1
60258: PUSH
60259: FOR_DOWNTO
60260: IFFALSE 60638
// begin side := GetSide ( minersList [ i ] ) ;
60262: LD_ADDR_VAR 0 3
60266: PUSH
60267: LD_EXP 57
60271: PUSH
60272: LD_VAR 0 1
60276: ARRAY
60277: PPUSH
60278: CALL_OW 255
60282: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
60283: LD_EXP 57
60287: PUSH
60288: LD_VAR 0 1
60292: ARRAY
60293: PPUSH
60294: CALL_OW 301
60298: IFTRUE 60318
60300: PUSH
60301: LD_EXP 57
60305: PUSH
60306: LD_VAR 0 1
60310: ARRAY
60311: PPUSH
60312: CALL_OW 305
60316: NOT
60317: OR
60318: IFFALSE 60409
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60320: LD_EXP 58
60324: PUSH
60325: LD_VAR 0 1
60329: ARRAY
60330: PUSH
60331: LD_VAR 0 2
60335: ARRAY
60336: PUSH
60337: LD_INT 1
60339: ARRAY
60340: PPUSH
60341: LD_EXP 58
60345: PUSH
60346: LD_VAR 0 1
60350: ARRAY
60351: PUSH
60352: LD_VAR 0 2
60356: ARRAY
60357: PUSH
60358: LD_INT 2
60360: ARRAY
60361: PPUSH
60362: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60366: LD_ADDR_EXP 58
60370: PUSH
60371: LD_EXP 58
60375: PPUSH
60376: LD_VAR 0 1
60380: PPUSH
60381: LD_EXP 58
60385: PUSH
60386: LD_VAR 0 1
60390: ARRAY
60391: PPUSH
60392: LD_VAR 0 2
60396: PPUSH
60397: CALL_OW 3
60401: PPUSH
60402: CALL_OW 1
60406: ST_TO_ADDR
// continue ;
60407: GO 60259
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60409: LD_ADDR_VAR 0 4
60413: PUSH
60414: LD_EXP 58
60418: PUSH
60419: LD_VAR 0 1
60423: ARRAY
60424: PUSH
60425: LD_VAR 0 2
60429: ARRAY
60430: PUSH
60431: LD_INT 1
60433: ARRAY
60434: PPUSH
60435: LD_EXP 58
60439: PUSH
60440: LD_VAR 0 1
60444: ARRAY
60445: PUSH
60446: LD_VAR 0 2
60450: ARRAY
60451: PUSH
60452: LD_INT 2
60454: ARRAY
60455: PPUSH
60456: CALL_OW 428
60460: ST_TO_ADDR
// if not tmp then
60461: LD_VAR 0 4
60465: NOT
60466: IFFALSE 60470
// continue ;
60468: GO 60259
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60470: LD_VAR 0 4
60474: PUSH
60475: LD_INT 81
60477: PUSH
60478: LD_VAR 0 3
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PPUSH
60487: CALL_OW 69
60491: IN
60492: IFFALSE 60542
60494: PUSH
60495: LD_EXP 58
60499: PUSH
60500: LD_VAR 0 1
60504: ARRAY
60505: PUSH
60506: LD_VAR 0 2
60510: ARRAY
60511: PUSH
60512: LD_INT 1
60514: ARRAY
60515: PPUSH
60516: LD_EXP 58
60520: PUSH
60521: LD_VAR 0 1
60525: ARRAY
60526: PUSH
60527: LD_VAR 0 2
60531: ARRAY
60532: PUSH
60533: LD_INT 2
60535: ARRAY
60536: PPUSH
60537: CALL_OW 458
60541: AND
60542: IFFALSE 60636
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60544: LD_EXP 58
60548: PUSH
60549: LD_VAR 0 1
60553: ARRAY
60554: PUSH
60555: LD_VAR 0 2
60559: ARRAY
60560: PUSH
60561: LD_INT 1
60563: ARRAY
60564: PPUSH
60565: LD_EXP 58
60569: PUSH
60570: LD_VAR 0 1
60574: ARRAY
60575: PUSH
60576: LD_VAR 0 2
60580: ARRAY
60581: PUSH
60582: LD_INT 2
60584: ARRAY
60585: PPUSH
60586: LD_VAR 0 3
60590: PPUSH
60591: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60595: LD_ADDR_EXP 58
60599: PUSH
60600: LD_EXP 58
60604: PPUSH
60605: LD_VAR 0 1
60609: PPUSH
60610: LD_EXP 58
60614: PUSH
60615: LD_VAR 0 1
60619: ARRAY
60620: PPUSH
60621: LD_VAR 0 2
60625: PPUSH
60626: CALL_OW 3
60630: PPUSH
60631: CALL_OW 1
60635: ST_TO_ADDR
// end ; end ;
60636: GO 60259
60638: POP
60639: POP
// end ;
60640: GO 60172
60642: POP
60643: POP
// end ;
60644: PPOPN 4
60646: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
60647: LD_INT 0
60649: PPUSH
60650: PPUSH
60651: PPUSH
60652: PPUSH
// result := false ;
60653: LD_ADDR_VAR 0 4
60657: PUSH
60658: LD_INT 0
60660: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60661: LD_VAR 0 1
60665: PPUSH
60666: CALL_OW 264
60670: PUSH
60671: LD_INT 81
60673: EQUAL
60674: NOT
60675: IFFALSE 60679
// exit ;
60677: GO 61049
// side := GetSide ( unit ) ;
60679: LD_ADDR_VAR 0 6
60683: PUSH
60684: LD_VAR 0 1
60688: PPUSH
60689: CALL_OW 255
60693: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
60694: LD_ADDR_VAR 0 5
60698: PUSH
60699: LD_EXP 57
60703: PPUSH
60704: LD_VAR 0 1
60708: PPUSH
60709: CALL 17785 0 2
60713: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60714: LD_EXP 58
60718: PUSH
60719: LD_VAR 0 5
60723: ARRAY
60724: PUSH
60725: LD_EXP 59
60729: GREATEREQUAL
60730: IFFALSE 60734
// exit ;
60732: GO 61049
// ComMoveXY ( unit , x , y ) ;
60734: LD_VAR 0 1
60738: PPUSH
60739: LD_VAR 0 2
60743: PPUSH
60744: LD_VAR 0 3
60748: PPUSH
60749: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60753: LD_INT 35
60755: PPUSH
60756: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60760: LD_VAR 0 1
60764: PPUSH
60765: LD_VAR 0 2
60769: PPUSH
60770: LD_VAR 0 3
60774: PPUSH
60775: CALL 49831 0 3
60779: NOT
60780: IFFALSE 60793
60782: PUSH
60783: LD_VAR 0 1
60787: PPUSH
60788: CALL_OW 314
60792: AND
60793: IFFALSE 60797
// exit ;
60795: GO 61049
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60797: LD_VAR 0 2
60801: PPUSH
60802: LD_VAR 0 3
60806: PPUSH
60807: CALL_OW 428
60811: PUSH
60812: LD_VAR 0 1
60816: EQUAL
60817: IFFALSE 60831
60819: PUSH
60820: LD_VAR 0 1
60824: PPUSH
60825: CALL_OW 314
60829: NOT
60830: AND
60831: IFFALSE 60753
// if MineAtPos ( x , y ) then
60833: LD_VAR 0 2
60837: PPUSH
60838: LD_VAR 0 3
60842: PPUSH
60843: CALL_OW 458
60847: IFFALSE 60851
// exit ;
60849: GO 61049
// if your_side = side then
60851: LD_OWVAR 2
60855: PUSH
60856: LD_VAR 0 6
60860: EQUAL
60861: IFFALSE 60880
// PlaySoundXY ( x , y , PlantMine ) ;
60863: LD_VAR 0 2
60867: PPUSH
60868: LD_VAR 0 3
60872: PPUSH
60873: LD_STRING PlantMine
60875: PPUSH
60876: CALL_OW 366
// repeat wait ( 1 ) ;
60880: LD_INT 1
60882: PPUSH
60883: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
60887: LD_VAR 0 2
60891: PPUSH
60892: LD_VAR 0 3
60896: PPUSH
60897: LD_VAR 0 6
60901: PPUSH
60902: LD_INT 0
60904: PPUSH
60905: CALL_OW 454
60909: IFFALSE 60880
// if MineAtPos ( x , y ) then
60911: LD_VAR 0 2
60915: PPUSH
60916: LD_VAR 0 3
60920: PPUSH
60921: CALL_OW 458
60925: IFFALSE 61041
// begin for i in minerMinesList [ index ] do
60927: LD_ADDR_VAR 0 7
60931: PUSH
60932: LD_EXP 58
60936: PUSH
60937: LD_VAR 0 5
60941: ARRAY
60942: PUSH
60943: FOR_IN
60944: IFFALSE 60986
// if i [ 1 ] = x and i [ 2 ] = y then
60946: LD_VAR 0 7
60950: PUSH
60951: LD_INT 1
60953: ARRAY
60954: PUSH
60955: LD_VAR 0 2
60959: EQUAL
60960: IFFALSE 60978
60962: PUSH
60963: LD_VAR 0 7
60967: PUSH
60968: LD_INT 2
60970: ARRAY
60971: PUSH
60972: LD_VAR 0 3
60976: EQUAL
60977: AND
60978: IFFALSE 60984
// exit ;
60980: POP
60981: POP
60982: GO 61049
60984: GO 60943
60986: POP
60987: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60988: LD_ADDR_EXP 58
60992: PUSH
60993: LD_EXP 58
60997: PPUSH
60998: LD_VAR 0 5
61002: PUSH
61003: LD_EXP 58
61007: PUSH
61008: LD_VAR 0 5
61012: ARRAY
61013: PUSH
61014: LD_INT 1
61016: PLUS
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PPUSH
61022: LD_VAR 0 2
61026: PUSH
61027: LD_VAR 0 3
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PPUSH
61036: CALL 18002 0 3
61040: ST_TO_ADDR
// end ; result := true ;
61041: LD_ADDR_VAR 0 4
61045: PUSH
61046: LD_INT 1
61048: ST_TO_ADDR
// end ;
61049: LD_VAR 0 4
61053: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61054: LD_INT 0
61056: PPUSH
61057: PPUSH
61058: PPUSH
// if not unit in minersList then
61059: LD_VAR 0 1
61063: PUSH
61064: LD_EXP 57
61068: IN
61069: NOT
61070: IFFALSE 61074
// exit ;
61072: GO 61281
// index := GetElementIndex ( minersList , unit ) ;
61074: LD_ADDR_VAR 0 6
61078: PUSH
61079: LD_EXP 57
61083: PPUSH
61084: LD_VAR 0 1
61088: PPUSH
61089: CALL 17785 0 2
61093: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61094: LD_ADDR_VAR 0 5
61098: PUSH
61099: DOUBLE
61100: LD_EXP 58
61104: PUSH
61105: LD_VAR 0 6
61109: ARRAY
61110: INC
61111: ST_TO_ADDR
61112: LD_INT 1
61114: PUSH
61115: FOR_DOWNTO
61116: IFFALSE 61279
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61118: LD_EXP 58
61122: PUSH
61123: LD_VAR 0 6
61127: ARRAY
61128: PUSH
61129: LD_VAR 0 5
61133: ARRAY
61134: PUSH
61135: LD_INT 1
61137: ARRAY
61138: PPUSH
61139: LD_EXP 58
61143: PUSH
61144: LD_VAR 0 6
61148: ARRAY
61149: PUSH
61150: LD_VAR 0 5
61154: ARRAY
61155: PUSH
61156: LD_INT 2
61158: ARRAY
61159: PPUSH
61160: LD_VAR 0 2
61164: PPUSH
61165: LD_VAR 0 3
61169: PPUSH
61170: CALL_OW 298
61174: PUSH
61175: LD_INT 6
61177: LESS
61178: IFFALSE 61277
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61180: LD_EXP 58
61184: PUSH
61185: LD_VAR 0 6
61189: ARRAY
61190: PUSH
61191: LD_VAR 0 5
61195: ARRAY
61196: PUSH
61197: LD_INT 1
61199: ARRAY
61200: PPUSH
61201: LD_EXP 58
61205: PUSH
61206: LD_VAR 0 6
61210: ARRAY
61211: PUSH
61212: LD_VAR 0 5
61216: ARRAY
61217: PUSH
61218: LD_INT 2
61220: ARRAY
61221: PPUSH
61222: LD_VAR 0 1
61226: PPUSH
61227: CALL_OW 255
61231: PPUSH
61232: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61236: LD_ADDR_EXP 58
61240: PUSH
61241: LD_EXP 58
61245: PPUSH
61246: LD_VAR 0 6
61250: PPUSH
61251: LD_EXP 58
61255: PUSH
61256: LD_VAR 0 6
61260: ARRAY
61261: PPUSH
61262: LD_VAR 0 5
61266: PPUSH
61267: CALL_OW 3
61271: PPUSH
61272: CALL_OW 1
61276: ST_TO_ADDR
// end ; end ;
61277: GO 61115
61279: POP
61280: POP
// end ;
61281: LD_VAR 0 4
61285: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61286: LD_INT 0
61288: PPUSH
61289: PPUSH
61290: PPUSH
61291: PPUSH
61292: PPUSH
61293: PPUSH
61294: PPUSH
61295: PPUSH
61296: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61297: LD_VAR 0 1
61301: PPUSH
61302: CALL_OW 264
61306: PUSH
61307: LD_INT 81
61309: EQUAL
61310: NOT
61311: IFTRUE 61326
61313: PUSH
61314: LD_VAR 0 1
61318: PUSH
61319: LD_EXP 57
61323: IN
61324: NOT
61325: OR
61326: IFFALSE 61330
// exit ;
61328: GO 61656
// index := GetElementIndex ( minersList , unit ) ;
61330: LD_ADDR_VAR 0 6
61334: PUSH
61335: LD_EXP 57
61339: PPUSH
61340: LD_VAR 0 1
61344: PPUSH
61345: CALL 17785 0 2
61349: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61350: LD_ADDR_VAR 0 8
61354: PUSH
61355: LD_EXP 59
61359: PUSH
61360: LD_EXP 58
61364: PUSH
61365: LD_VAR 0 6
61369: ARRAY
61370: MINUS
61371: ST_TO_ADDR
// if not minesFreeAmount then
61372: LD_VAR 0 8
61376: NOT
61377: IFFALSE 61381
// exit ;
61379: GO 61656
// tmp := [ ] ;
61381: LD_ADDR_VAR 0 7
61385: PUSH
61386: EMPTY
61387: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61388: LD_ADDR_VAR 0 5
61392: PUSH
61393: DOUBLE
61394: LD_INT 1
61396: DEC
61397: ST_TO_ADDR
61398: LD_VAR 0 8
61402: PUSH
61403: FOR_TO
61404: IFFALSE 61603
// begin _d := rand ( 0 , 5 ) ;
61406: LD_ADDR_VAR 0 11
61410: PUSH
61411: LD_INT 0
61413: PPUSH
61414: LD_INT 5
61416: PPUSH
61417: CALL_OW 12
61421: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61422: LD_ADDR_VAR 0 12
61426: PUSH
61427: LD_INT 2
61429: PPUSH
61430: LD_INT 6
61432: PPUSH
61433: CALL_OW 12
61437: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61438: LD_ADDR_VAR 0 9
61442: PUSH
61443: LD_VAR 0 2
61447: PPUSH
61448: LD_VAR 0 11
61452: PPUSH
61453: LD_VAR 0 12
61457: PPUSH
61458: CALL_OW 272
61462: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61463: LD_ADDR_VAR 0 10
61467: PUSH
61468: LD_VAR 0 3
61472: PPUSH
61473: LD_VAR 0 11
61477: PPUSH
61478: LD_VAR 0 12
61482: PPUSH
61483: CALL_OW 273
61487: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61488: LD_VAR 0 9
61492: PPUSH
61493: LD_VAR 0 10
61497: PPUSH
61498: CALL_OW 488
61502: IFFALSE 61526
61504: PUSH
61505: LD_VAR 0 9
61509: PUSH
61510: LD_VAR 0 10
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_VAR 0 7
61523: IN
61524: NOT
61525: AND
61526: IFFALSE 61545
61528: PUSH
61529: LD_VAR 0 9
61533: PPUSH
61534: LD_VAR 0 10
61538: PPUSH
61539: CALL_OW 458
61543: NOT
61544: AND
61545: IFFALSE 61587
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61547: LD_ADDR_VAR 0 7
61551: PUSH
61552: LD_VAR 0 7
61556: PPUSH
61557: LD_VAR 0 7
61561: PUSH
61562: LD_INT 1
61564: PLUS
61565: PPUSH
61566: LD_VAR 0 9
61570: PUSH
61571: LD_VAR 0 10
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PPUSH
61580: CALL_OW 1
61584: ST_TO_ADDR
61585: GO 61601
// i := i - 1 ;
61587: LD_ADDR_VAR 0 5
61591: PUSH
61592: LD_VAR 0 5
61596: PUSH
61597: LD_INT 1
61599: MINUS
61600: ST_TO_ADDR
// end ;
61601: GO 61403
61603: POP
61604: POP
// for i in tmp do
61605: LD_ADDR_VAR 0 5
61609: PUSH
61610: LD_VAR 0 7
61614: PUSH
61615: FOR_IN
61616: IFFALSE 61654
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61618: LD_VAR 0 1
61622: PPUSH
61623: LD_VAR 0 5
61627: PUSH
61628: LD_INT 1
61630: ARRAY
61631: PPUSH
61632: LD_VAR 0 5
61636: PUSH
61637: LD_INT 2
61639: ARRAY
61640: PPUSH
61641: CALL 60647 0 3
61645: NOT
61646: IFFALSE 61652
// exit ;
61648: POP
61649: POP
61650: GO 61656
61652: GO 61615
61654: POP
61655: POP
// end ;
61656: LD_VAR 0 4
61660: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
61661: LD_INT 0
61663: PPUSH
61664: PPUSH
61665: PPUSH
61666: PPUSH
61667: PPUSH
61668: PPUSH
61669: PPUSH
61670: PPUSH
61671: PPUSH
// if GetClass ( unit ) <> class_sniper then
61672: LD_VAR 0 1
61676: PPUSH
61677: CALL_OW 257
61681: PUSH
61682: LD_INT 5
61684: NONEQUAL
61685: IFFALSE 61689
// exit ;
61687: GO 62159
// dist := 8 ;
61689: LD_ADDR_VAR 0 5
61693: PUSH
61694: LD_INT 8
61696: ST_TO_ADDR
// viewRange := 12 ;
61697: LD_ADDR_VAR 0 8
61701: PUSH
61702: LD_INT 12
61704: ST_TO_ADDR
// side := GetSide ( unit ) ;
61705: LD_ADDR_VAR 0 6
61709: PUSH
61710: LD_VAR 0 1
61714: PPUSH
61715: CALL_OW 255
61719: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61720: LD_INT 61
61722: PPUSH
61723: LD_VAR 0 6
61727: PPUSH
61728: CALL_OW 321
61732: PUSH
61733: LD_INT 2
61735: EQUAL
61736: IFFALSE 61746
// viewRange := 16 ;
61738: LD_ADDR_VAR 0 8
61742: PUSH
61743: LD_INT 16
61745: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61746: LD_VAR 0 1
61750: PPUSH
61751: LD_VAR 0 2
61755: PPUSH
61756: LD_VAR 0 3
61760: PPUSH
61761: CALL_OW 297
61765: PUSH
61766: LD_VAR 0 5
61770: GREATER
61771: IFFALSE 61850
// begin ComMoveXY ( unit , x , y ) ;
61773: LD_VAR 0 1
61777: PPUSH
61778: LD_VAR 0 2
61782: PPUSH
61783: LD_VAR 0 3
61787: PPUSH
61788: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61792: LD_INT 35
61794: PPUSH
61795: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61799: LD_VAR 0 1
61803: PPUSH
61804: LD_VAR 0 2
61808: PPUSH
61809: LD_VAR 0 3
61813: PPUSH
61814: CALL 49831 0 3
61818: NOT
61819: IFFALSE 61823
// exit ;
61821: GO 62159
// until GetDistUnitXY ( unit , x , y ) < dist ;
61823: LD_VAR 0 1
61827: PPUSH
61828: LD_VAR 0 2
61832: PPUSH
61833: LD_VAR 0 3
61837: PPUSH
61838: CALL_OW 297
61842: PUSH
61843: LD_VAR 0 5
61847: LESS
61848: IFFALSE 61792
// end ; ComTurnXY ( unit , x , y ) ;
61850: LD_VAR 0 1
61854: PPUSH
61855: LD_VAR 0 2
61859: PPUSH
61860: LD_VAR 0 3
61864: PPUSH
61865: CALL_OW 118
// repeat if Multiplayer then
61869: LD_OWVAR 4
61873: IFFALSE 61884
// wait ( 35 ) else
61875: LD_INT 35
61877: PPUSH
61878: CALL_OW 67
61882: GO 61891
// wait ( 5 ) ;
61884: LD_INT 5
61886: PPUSH
61887: CALL_OW 67
// _d := GetDir ( unit ) ;
61891: LD_ADDR_VAR 0 11
61895: PUSH
61896: LD_VAR 0 1
61900: PPUSH
61901: CALL_OW 254
61905: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
61906: LD_ADDR_VAR 0 7
61910: PUSH
61911: LD_VAR 0 1
61915: PPUSH
61916: CALL_OW 250
61920: PPUSH
61921: LD_VAR 0 1
61925: PPUSH
61926: CALL_OW 251
61930: PPUSH
61931: LD_VAR 0 2
61935: PPUSH
61936: LD_VAR 0 3
61940: PPUSH
61941: CALL 52467 0 4
61945: ST_TO_ADDR
// until dir = _d ;
61946: LD_VAR 0 7
61950: PUSH
61951: LD_VAR 0 11
61955: EQUAL
61956: IFFALSE 61869
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
61958: LD_ADDR_VAR 0 9
61962: PUSH
61963: LD_VAR 0 1
61967: PPUSH
61968: CALL_OW 250
61972: PPUSH
61973: LD_VAR 0 7
61977: PPUSH
61978: LD_VAR 0 5
61982: PPUSH
61983: CALL_OW 272
61987: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
61988: LD_ADDR_VAR 0 10
61992: PUSH
61993: LD_VAR 0 1
61997: PPUSH
61998: CALL_OW 251
62002: PPUSH
62003: LD_VAR 0 7
62007: PPUSH
62008: LD_VAR 0 5
62012: PPUSH
62013: CALL_OW 273
62017: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62018: LD_VAR 0 9
62022: PPUSH
62023: LD_VAR 0 10
62027: PPUSH
62028: CALL_OW 488
62032: NOT
62033: IFFALSE 62037
// exit ;
62035: GO 62159
// ComAnimCustom ( unit , 1 ) ;
62037: LD_VAR 0 1
62041: PPUSH
62042: LD_INT 1
62044: PPUSH
62045: CALL_OW 592
// p := 0 ;
62049: LD_ADDR_VAR 0 12
62053: PUSH
62054: LD_INT 0
62056: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62057: LD_VAR 0 9
62061: PPUSH
62062: LD_VAR 0 10
62066: PPUSH
62067: LD_VAR 0 6
62071: PPUSH
62072: LD_VAR 0 8
62076: PPUSH
62077: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
62081: LD_INT 35
62083: PPUSH
62084: CALL_OW 67
// p := Inc ( p ) ;
62088: LD_ADDR_VAR 0 12
62092: PUSH
62093: LD_VAR 0 12
62097: PPUSH
62098: CALL 52423 0 1
62102: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
62103: LD_VAR 0 12
62107: PUSH
62108: LD_INT 3
62110: EQUAL
62111: IFTRUE 62125
62113: PUSH
62114: LD_VAR 0 1
62118: PPUSH
62119: CALL_OW 302
62123: NOT
62124: OR
62125: IFTRUE 62138
62127: PUSH
62128: LD_VAR 0 1
62132: PPUSH
62133: CALL_OW 301
62137: OR
62138: IFFALSE 62081
// RemoveSeeing ( _x , _y , side ) ;
62140: LD_VAR 0 9
62144: PPUSH
62145: LD_VAR 0 10
62149: PPUSH
62150: LD_VAR 0 6
62154: PPUSH
62155: CALL_OW 331
// end ;
62159: LD_VAR 0 4
62163: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
62164: LD_INT 0
62166: PPUSH
62167: PPUSH
62168: PPUSH
62169: PPUSH
62170: PPUSH
62171: PPUSH
62172: PPUSH
62173: PPUSH
62174: PPUSH
62175: PPUSH
62176: PPUSH
// if not unit then
62177: LD_VAR 0 1
62181: NOT
62182: IFFALSE 62186
// exit ;
62184: GO 62457
// side := GetSide ( unit ) ;
62186: LD_ADDR_VAR 0 3
62190: PUSH
62191: LD_VAR 0 1
62195: PPUSH
62196: CALL_OW 255
62200: ST_TO_ADDR
// x := GetX ( unit ) ;
62201: LD_ADDR_VAR 0 5
62205: PUSH
62206: LD_VAR 0 1
62210: PPUSH
62211: CALL_OW 250
62215: ST_TO_ADDR
// y := GetY ( unit ) ;
62216: LD_ADDR_VAR 0 6
62220: PUSH
62221: LD_VAR 0 1
62225: PPUSH
62226: CALL_OW 251
62230: ST_TO_ADDR
// r := 8 ;
62231: LD_ADDR_VAR 0 4
62235: PUSH
62236: LD_INT 8
62238: ST_TO_ADDR
// if x - r < 0 then
62239: LD_VAR 0 5
62243: PUSH
62244: LD_VAR 0 4
62248: MINUS
62249: PUSH
62250: LD_INT 0
62252: LESS
62253: IFFALSE 62265
// min_x := 0 else
62255: LD_ADDR_VAR 0 7
62259: PUSH
62260: LD_INT 0
62262: ST_TO_ADDR
62263: GO 62281
// min_x := x - r ;
62265: LD_ADDR_VAR 0 7
62269: PUSH
62270: LD_VAR 0 5
62274: PUSH
62275: LD_VAR 0 4
62279: MINUS
62280: ST_TO_ADDR
// if y - r < 0 then
62281: LD_VAR 0 6
62285: PUSH
62286: LD_VAR 0 4
62290: MINUS
62291: PUSH
62292: LD_INT 0
62294: LESS
62295: IFFALSE 62307
// min_y := 0 else
62297: LD_ADDR_VAR 0 8
62301: PUSH
62302: LD_INT 0
62304: ST_TO_ADDR
62305: GO 62323
// min_y := y - r ;
62307: LD_ADDR_VAR 0 8
62311: PUSH
62312: LD_VAR 0 6
62316: PUSH
62317: LD_VAR 0 4
62321: MINUS
62322: ST_TO_ADDR
// max_x := x + r ;
62323: LD_ADDR_VAR 0 9
62327: PUSH
62328: LD_VAR 0 5
62332: PUSH
62333: LD_VAR 0 4
62337: PLUS
62338: ST_TO_ADDR
// max_y := y + r ;
62339: LD_ADDR_VAR 0 10
62343: PUSH
62344: LD_VAR 0 6
62348: PUSH
62349: LD_VAR 0 4
62353: PLUS
62354: ST_TO_ADDR
// for _x = min_x to max_x do
62355: LD_ADDR_VAR 0 11
62359: PUSH
62360: DOUBLE
62361: LD_VAR 0 7
62365: DEC
62366: ST_TO_ADDR
62367: LD_VAR 0 9
62371: PUSH
62372: FOR_TO
62373: IFFALSE 62455
// for _y = min_y to max_y do
62375: LD_ADDR_VAR 0 12
62379: PUSH
62380: DOUBLE
62381: LD_VAR 0 8
62385: DEC
62386: ST_TO_ADDR
62387: LD_VAR 0 10
62391: PUSH
62392: FOR_TO
62393: IFFALSE 62451
// begin if not ValidHex ( _x , _y ) then
62395: LD_VAR 0 11
62399: PPUSH
62400: LD_VAR 0 12
62404: PPUSH
62405: CALL_OW 488
62409: NOT
62410: IFFALSE 62414
// continue ;
62412: GO 62392
// if MineAtPos ( _x , _y ) then
62414: LD_VAR 0 11
62418: PPUSH
62419: LD_VAR 0 12
62423: PPUSH
62424: CALL_OW 458
62428: IFFALSE 62449
// ViewMineAtPos ( _x , _y , side ) ;
62430: LD_VAR 0 11
62434: PPUSH
62435: LD_VAR 0 12
62439: PPUSH
62440: LD_VAR 0 3
62444: PPUSH
62445: CALL_OW 457
// end ;
62449: GO 62392
62451: POP
62452: POP
62453: GO 62372
62455: POP
62456: POP
// end ;
62457: LD_VAR 0 2
62461: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
62462: LD_INT 0
62464: PPUSH
62465: PPUSH
62466: PPUSH
62467: PPUSH
62468: PPUSH
62469: PPUSH
// if not units then
62470: LD_VAR 0 1
62474: NOT
62475: IFFALSE 62479
// exit ;
62477: GO 62909
// scaners := [ ] ;
62479: LD_ADDR_VAR 0 6
62483: PUSH
62484: EMPTY
62485: ST_TO_ADDR
// for i in units do
62486: LD_ADDR_VAR 0 3
62490: PUSH
62491: LD_VAR 0 1
62495: PUSH
62496: FOR_IN
62497: IFFALSE 62654
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
62499: LD_VAR 0 3
62503: PPUSH
62504: CALL_OW 264
62508: PUSH
62509: LD_INT 11
62511: NONEQUAL
62512: IFTRUE 62526
62514: PUSH
62515: LD_VAR 0 3
62519: PPUSH
62520: CALL_OW 302
62524: NOT
62525: OR
62526: IFTRUE 62543
62528: PUSH
62529: LD_VAR 0 3
62533: PPUSH
62534: CALL_OW 110
62538: PUSH
62539: LD_INT 502
62541: EQUAL
62542: OR
62543: IFFALSE 62547
// continue ;
62545: GO 62496
// ComStop ( i ) ;
62547: LD_VAR 0 3
62551: PPUSH
62552: CALL_OW 141
// x := GetX ( i ) ;
62556: LD_ADDR_VAR 0 4
62560: PUSH
62561: LD_VAR 0 3
62565: PPUSH
62566: CALL_OW 250
62570: ST_TO_ADDR
// y := GetY ( i ) ;
62571: LD_ADDR_VAR 0 5
62575: PUSH
62576: LD_VAR 0 3
62580: PPUSH
62581: CALL_OW 251
62585: ST_TO_ADDR
// if GetSide ( i ) = your_side then
62586: LD_VAR 0 3
62590: PPUSH
62591: CALL_OW 255
62595: PUSH
62596: LD_OWVAR 2
62600: EQUAL
62601: IFFALSE 62620
// PlaySoundXY ( x , y , mineDetector ) ;
62603: LD_VAR 0 4
62607: PPUSH
62608: LD_VAR 0 5
62612: PPUSH
62613: LD_STRING mineDetector
62615: PPUSH
62616: CALL_OW 366
// scaners := Join ( scaners , i ) ;
62620: LD_ADDR_VAR 0 6
62624: PUSH
62625: LD_VAR 0 6
62629: PPUSH
62630: LD_VAR 0 3
62634: PPUSH
62635: CALL 51050 0 2
62639: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
62640: LD_VAR 0 3
62644: PPUSH
62645: LD_INT 502
62647: PPUSH
62648: CALL_OW 109
// end ;
62652: GO 62496
62654: POP
62655: POP
// if not scaners then
62656: LD_VAR 0 6
62660: NOT
62661: IFFALSE 62665
// exit ;
62663: GO 62909
// wait ( 3 ) ;
62665: LD_INT 3
62667: PPUSH
62668: CALL_OW 67
// timer := 6 ;
62672: LD_ADDR_VAR 0 7
62676: PUSH
62677: LD_INT 6
62679: ST_TO_ADDR
// repeat for i in scaners do
62680: LD_ADDR_VAR 0 3
62684: PUSH
62685: LD_VAR 0 6
62689: PUSH
62690: FOR_IN
62691: IFFALSE 62807
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
62693: LD_VAR 0 3
62697: PPUSH
62698: CALL_OW 302
62702: NOT
62703: IFTRUE 62716
62705: PUSH
62706: LD_VAR 0 3
62710: PPUSH
62711: CALL_OW 314
62715: OR
62716: IFTRUE 62747
62718: PUSH
62719: LD_VAR 0 3
62723: PPUSH
62724: CALL_OW 263
62728: PUSH
62729: LD_INT 1
62731: EQUAL
62732: IFFALSE 62746
62734: PUSH
62735: LD_VAR 0 3
62739: PPUSH
62740: CALL_OW 311
62744: NOT
62745: AND
62746: OR
62747: IFFALSE 62791
// begin SetUnitDisplayNumber ( i , 0 ) ;
62749: LD_VAR 0 3
62753: PPUSH
62754: LD_INT 0
62756: PPUSH
62757: CALL_OW 505
// SetTag ( i , 0 ) ;
62761: LD_VAR 0 3
62765: PPUSH
62766: LD_INT 0
62768: PPUSH
62769: CALL_OW 109
// scaners := scaners diff i ;
62773: LD_ADDR_VAR 0 6
62777: PUSH
62778: LD_VAR 0 6
62782: PUSH
62783: LD_VAR 0 3
62787: DIFF
62788: ST_TO_ADDR
// continue ;
62789: GO 62690
// end ; SetUnitDisplayNumber ( i , timer ) ;
62791: LD_VAR 0 3
62795: PPUSH
62796: LD_VAR 0 7
62800: PPUSH
62801: CALL_OW 505
// end ;
62805: GO 62690
62807: POP
62808: POP
// if not scaners then
62809: LD_VAR 0 6
62813: NOT
62814: IFFALSE 62818
// exit ;
62816: GO 62909
// timer := Dec ( timer ) ;
62818: LD_ADDR_VAR 0 7
62822: PUSH
62823: LD_VAR 0 7
62827: PPUSH
62828: CALL 52445 0 1
62832: ST_TO_ADDR
// wait ( 0 0$1 ) ;
62833: LD_INT 35
62835: PPUSH
62836: CALL_OW 67
// until timer = 0 ;
62840: LD_VAR 0 7
62844: PUSH
62845: LD_INT 0
62847: EQUAL
62848: IFFALSE 62680
// if not scaners then
62850: LD_VAR 0 6
62854: NOT
62855: IFFALSE 62859
// exit ;
62857: GO 62909
// for i in scaners do
62859: LD_ADDR_VAR 0 3
62863: PUSH
62864: LD_VAR 0 6
62868: PUSH
62869: FOR_IN
62870: IFFALSE 62907
// begin SetUnitDisplayNumber ( i , 0 ) ;
62872: LD_VAR 0 3
62876: PPUSH
62877: LD_INT 0
62879: PPUSH
62880: CALL_OW 505
// SetTag ( i , 0 ) ;
62884: LD_VAR 0 3
62888: PPUSH
62889: LD_INT 0
62891: PPUSH
62892: CALL_OW 109
// RevealDetectorMine ( i ) ;
62896: LD_VAR 0 3
62900: PPUSH
62901: CALL 62164 0 1
// end ;
62905: GO 62869
62907: POP
62908: POP
// end ;
62909: LD_VAR 0 2
62913: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
62914: LD_INT 0
62916: PPUSH
// if p1 = mine_detector_mode then
62917: LD_VAR 0 2
62921: PUSH
62922: LD_INT 103
62924: EQUAL
62925: IFFALSE 62936
// DetectMine ( units ) ;
62927: LD_VAR 0 1
62931: PPUSH
62932: CALL 62462 0 1
// end ; end_of_file
62936: LD_VAR 0 7
62940: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62941: PPOPN 6
62943: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62944: LD_INT 0
62946: PPUSH
// begin if not units then
62947: LD_VAR 0 1
62951: NOT
62952: IFFALSE 62956
// exit ;
62954: GO 62990
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62956: LD_VAR 0 1
62960: PPUSH
62961: LD_VAR 0 2
62965: PPUSH
62966: LD_VAR 0 3
62970: PPUSH
62971: LD_VAR 0 4
62975: PPUSH
62976: LD_VAR 0 5
62980: PPUSH
62981: LD_VAR 0 6
62985: PPUSH
62986: CALL 62914 0 6
// end ;
62990: PPOPN 7
62992: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62993: LD_EXP 3
62997: PUSH
62998: LD_INT 4
63000: EQUAL
63001: IFFALSE 63037
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63003: LD_STRING setGameDifficulty(
63005: PUSH
63006: LD_OWVAR 67
63010: STR
63011: PUSH
63012: LD_STRING )
63014: STR
63015: PPUSH
63016: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63020: LD_STRING displayDifficulty(
63022: PUSH
63023: LD_OWVAR 67
63027: STR
63028: PUSH
63029: LD_STRING )
63031: STR
63032: PPUSH
63033: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63037: CALL 63066 0 0
// end ; end_of_file
63041: PPOPN 1
63043: END
// every 0 0$1 do
63044: GO 63046
63046: DISABLE
// begin enable ;
63047: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63048: LD_STRING updateTimer(
63050: PUSH
63051: LD_OWVAR 1
63055: STR
63056: PUSH
63057: LD_STRING );
63059: STR
63060: PPUSH
63061: CALL_OW 559
// end ;
63065: END
// export function SOS_MapStart ( ) ; begin
63066: LD_INT 0
63068: PPUSH
// UpdateFactoryWaypoints ( ) ;
63069: CALL 64000 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63073: CALL 64252 0 0
// ParseMultiDataToLua ( ) ;
63077: CALL 64399 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63081: LD_STRING setSpecLogoNumber(
63083: PUSH
63084: LD_INT 2
63086: STR
63087: PUSH
63088: LD_STRING ,
63090: STR
63091: PUSH
63092: LD_INT 1
63094: STR
63095: PUSH
63096: LD_STRING )
63098: STR
63099: PPUSH
63100: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63104: LD_STRING setSpecLogoNumber(
63106: PUSH
63107: LD_INT 3
63109: STR
63110: PUSH
63111: LD_STRING ,
63113: STR
63114: PUSH
63115: LD_INT 2
63117: STR
63118: PUSH
63119: LD_STRING )
63121: STR
63122: PPUSH
63123: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63127: LD_STRING setSpecLogoNumber(
63129: PUSH
63130: LD_INT 4
63132: STR
63133: PUSH
63134: LD_STRING ,
63136: STR
63137: PUSH
63138: LD_INT 3
63140: STR
63141: PUSH
63142: LD_STRING )
63144: STR
63145: PPUSH
63146: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63150: LD_STRING setSpecLogoNumber(
63152: PUSH
63153: LD_INT 5
63155: STR
63156: PUSH
63157: LD_STRING ,
63159: STR
63160: PUSH
63161: LD_INT 4
63163: STR
63164: PUSH
63165: LD_STRING )
63167: STR
63168: PPUSH
63169: CALL_OW 559
// end ;
63173: LD_VAR 0 1
63177: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63178: LD_INT 0
63180: PPUSH
63181: PPUSH
63182: PPUSH
63183: PPUSH
63184: PPUSH
63185: PPUSH
63186: PPUSH
63187: PPUSH
63188: PPUSH
// for i := 1 to 8 do
63189: LD_ADDR_VAR 0 2
63193: PUSH
63194: DOUBLE
63195: LD_INT 1
63197: DEC
63198: ST_TO_ADDR
63199: LD_INT 8
63201: PUSH
63202: FOR_TO
63203: IFFALSE 63588
// begin if mpSidePositions [ i ] then
63205: LD_EXP 7
63209: PUSH
63210: LD_VAR 0 2
63214: ARRAY
63215: IFFALSE 63586
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63217: LD_ADDR_VAR 0 7
63221: PUSH
63222: LD_INT 22
63224: PUSH
63225: LD_VAR 0 2
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 21
63236: PUSH
63237: LD_INT 1
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PPUSH
63248: CALL_OW 69
63252: PPUSH
63253: CALL 15084 0 1
63257: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63258: LD_ADDR_VAR 0 9
63262: PUSH
63263: LD_INT 22
63265: PUSH
63266: LD_VAR 0 2
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 2
63277: PUSH
63278: LD_INT 30
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 30
63290: PUSH
63291: LD_INT 1
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: LIST
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PPUSH
63307: CALL_OW 69
63311: ST_TO_ADDR
// crates := 0 ;
63312: LD_ADDR_VAR 0 4
63316: PUSH
63317: LD_INT 0
63319: ST_TO_ADDR
// oil := 0 ;
63320: LD_ADDR_VAR 0 5
63324: PUSH
63325: LD_INT 0
63327: ST_TO_ADDR
// sib := 0 ;
63328: LD_ADDR_VAR 0 6
63332: PUSH
63333: LD_INT 0
63335: ST_TO_ADDR
// if bases then
63336: LD_VAR 0 9
63340: IFFALSE 63446
// begin for j in bases do
63342: LD_ADDR_VAR 0 3
63346: PUSH
63347: LD_VAR 0 9
63351: PUSH
63352: FOR_IN
63353: IFFALSE 63444
// begin base := GetBase ( j ) ;
63355: LD_ADDR_VAR 0 8
63359: PUSH
63360: LD_VAR 0 3
63364: PPUSH
63365: CALL_OW 274
63369: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63370: LD_ADDR_VAR 0 4
63374: PUSH
63375: LD_VAR 0 4
63379: PUSH
63380: LD_VAR 0 8
63384: PPUSH
63385: LD_INT 1
63387: PPUSH
63388: CALL_OW 275
63392: PLUS
63393: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63394: LD_ADDR_VAR 0 5
63398: PUSH
63399: LD_VAR 0 5
63403: PUSH
63404: LD_VAR 0 8
63408: PPUSH
63409: LD_INT 2
63411: PPUSH
63412: CALL_OW 275
63416: PLUS
63417: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63418: LD_ADDR_VAR 0 6
63422: PUSH
63423: LD_VAR 0 6
63427: PUSH
63428: LD_VAR 0 8
63432: PPUSH
63433: LD_INT 3
63435: PPUSH
63436: CALL_OW 275
63440: PLUS
63441: ST_TO_ADDR
// end ;
63442: GO 63352
63444: POP
63445: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63446: LD_STRING setSpecText(
63448: PUSH
63449: LD_VAR 0 2
63453: STR
63454: PUSH
63455: LD_STRING ,
63457: STR
63458: PUSH
63459: LD_INT 2
63461: STR
63462: PUSH
63463: LD_STRING ,
63465: STR
63466: PUSH
63467: LD_VAR 0 4
63471: STR
63472: PUSH
63473: LD_STRING )
63475: STR
63476: PPUSH
63477: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63481: LD_STRING setSpecText(
63483: PUSH
63484: LD_VAR 0 2
63488: STR
63489: PUSH
63490: LD_STRING ,
63492: STR
63493: PUSH
63494: LD_INT 3
63496: STR
63497: PUSH
63498: LD_STRING ,
63500: STR
63501: PUSH
63502: LD_VAR 0 5
63506: STR
63507: PUSH
63508: LD_STRING )
63510: STR
63511: PPUSH
63512: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63516: LD_STRING setSpecText(
63518: PUSH
63519: LD_VAR 0 2
63523: STR
63524: PUSH
63525: LD_STRING ,
63527: STR
63528: PUSH
63529: LD_INT 4
63531: STR
63532: PUSH
63533: LD_STRING ,
63535: STR
63536: PUSH
63537: LD_VAR 0 6
63541: STR
63542: PUSH
63543: LD_STRING )
63545: STR
63546: PPUSH
63547: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63551: LD_STRING setSpecText(
63553: PUSH
63554: LD_VAR 0 2
63558: STR
63559: PUSH
63560: LD_STRING ,
63562: STR
63563: PUSH
63564: LD_INT 5
63566: STR
63567: PUSH
63568: LD_STRING ,
63570: STR
63571: PUSH
63572: LD_VAR 0 7
63576: STR
63577: PUSH
63578: LD_STRING )
63580: STR
63581: PPUSH
63582: CALL_OW 559
// end ; end ;
63586: GO 63202
63588: POP
63589: POP
// end ;
63590: LD_VAR 0 1
63594: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63595: LD_INT 2
63597: PUSH
63598: LD_INT 30
63600: PUSH
63601: LD_INT 0
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 30
63610: PUSH
63611: LD_INT 1
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: LIST
63622: PPUSH
63623: CALL_OW 69
63627: IFFALSE 63637
63629: GO 63631
63631: DISABLE
// begin enable ;
63632: ENABLE
// UpdateSpectatorBar ;
63633: CALL 63178 0 0
// end ;
63637: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63638: LD_INT 0
63640: PPUSH
// end ;
63641: LD_VAR 0 12
63645: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63646: LD_INT 0
63648: PPUSH
63649: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63650: LD_VAR 0 1
63654: NOT
63655: IFTRUE 63674
63657: PUSH
63658: LD_VAR 0 2
63662: PPUSH
63663: LD_VAR 0 3
63667: PPUSH
63668: CALL_OW 488
63672: NOT
63673: OR
63674: IFTRUE 63709
63676: PUSH
63677: LD_VAR 0 1
63681: PPUSH
63682: CALL_OW 266
63686: PUSH
63687: LD_INT 3
63689: NONEQUAL
63690: IFFALSE 63708
63692: PUSH
63693: LD_VAR 0 1
63697: PPUSH
63698: CALL_OW 247
63702: PUSH
63703: LD_INT 1
63705: EQUAL
63706: NOT
63707: AND
63708: OR
63709: IFFALSE 63713
// exit ;
63711: GO 63995
// if GetType ( factory ) = unit_human then
63713: LD_VAR 0 1
63717: PPUSH
63718: CALL_OW 247
63722: PUSH
63723: LD_INT 1
63725: EQUAL
63726: IFFALSE 63743
// factory := IsInUnit ( factory ) ;
63728: LD_ADDR_VAR 0 1
63732: PUSH
63733: LD_VAR 0 1
63737: PPUSH
63738: CALL_OW 310
63742: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63743: LD_VAR 0 1
63747: PPUSH
63748: CALL_OW 266
63752: PUSH
63753: LD_INT 3
63755: NONEQUAL
63756: IFFALSE 63760
// exit ;
63758: GO 63995
// for i := 1 to Count ( factoryWaypoints ) do
63760: LD_ADDR_VAR 0 5
63764: PUSH
63765: DOUBLE
63766: LD_INT 1
63768: DEC
63769: ST_TO_ADDR
63770: LD_EXP 60
63774: PPUSH
63775: CALL 15084 0 1
63779: PUSH
63780: FOR_TO
63781: IFFALSE 63943
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63783: LD_VAR 0 2
63787: PPUSH
63788: LD_VAR 0 3
63792: PPUSH
63793: CALL_OW 428
63797: PUSH
63798: LD_EXP 60
63802: PUSH
63803: LD_VAR 0 5
63807: ARRAY
63808: PUSH
63809: LD_INT 2
63811: ARRAY
63812: EQUAL
63813: IFFALSE 63845
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63815: LD_ADDR_EXP 60
63819: PUSH
63820: LD_EXP 60
63824: PPUSH
63825: LD_VAR 0 5
63829: PPUSH
63830: CALL_OW 3
63834: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63835: CALL 64000 0 0
// exit ;
63839: POP
63840: POP
63841: GO 63995
// end else
63843: GO 63941
// if factory = factoryWaypoints [ i ] [ 2 ] then
63845: LD_VAR 0 1
63849: PUSH
63850: LD_EXP 60
63854: PUSH
63855: LD_VAR 0 5
63859: ARRAY
63860: PUSH
63861: LD_INT 2
63863: ARRAY
63864: EQUAL
63865: IFFALSE 63941
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63867: LD_ADDR_EXP 60
63871: PUSH
63872: LD_EXP 60
63876: PPUSH
63877: LD_VAR 0 5
63881: PPUSH
63882: CALL_OW 3
63886: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63887: LD_ADDR_EXP 60
63891: PUSH
63892: LD_EXP 60
63896: PPUSH
63897: LD_VAR 0 1
63901: PPUSH
63902: CALL_OW 255
63906: PUSH
63907: LD_VAR 0 1
63911: PUSH
63912: LD_VAR 0 2
63916: PUSH
63917: LD_VAR 0 3
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: PPUSH
63928: CALL 51050 0 2
63932: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63933: CALL 64000 0 0
// exit ;
63937: POP
63938: POP
63939: GO 63995
// end ; end ;
63941: GO 63780
63943: POP
63944: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63945: LD_ADDR_EXP 60
63949: PUSH
63950: LD_EXP 60
63954: PPUSH
63955: LD_VAR 0 1
63959: PPUSH
63960: CALL_OW 255
63964: PUSH
63965: LD_VAR 0 1
63969: PUSH
63970: LD_VAR 0 2
63974: PUSH
63975: LD_VAR 0 3
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: PPUSH
63986: CALL 51050 0 2
63990: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63991: CALL 64000 0 0
// end ;
63995: LD_VAR 0 4
63999: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64000: LD_INT 0
64002: PPUSH
64003: PPUSH
64004: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64005: LD_STRING resetFactoryWaypoint();
64007: PPUSH
64008: CALL_OW 559
// if factoryWaypoints then
64012: LD_EXP 60
64016: IFFALSE 64137
// begin list := factoryWaypoints ;
64018: LD_ADDR_VAR 0 3
64022: PUSH
64023: LD_EXP 60
64027: ST_TO_ADDR
// for i := 1 to list do
64028: LD_ADDR_VAR 0 2
64032: PUSH
64033: DOUBLE
64034: LD_INT 1
64036: DEC
64037: ST_TO_ADDR
64038: LD_VAR 0 3
64042: PUSH
64043: FOR_TO
64044: IFFALSE 64135
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64046: LD_STRING setFactoryWaypointXY(
64048: PUSH
64049: LD_VAR 0 3
64053: PUSH
64054: LD_VAR 0 2
64058: ARRAY
64059: PUSH
64060: LD_INT 1
64062: ARRAY
64063: STR
64064: PUSH
64065: LD_STRING ,
64067: STR
64068: PUSH
64069: LD_VAR 0 3
64073: PUSH
64074: LD_VAR 0 2
64078: ARRAY
64079: PUSH
64080: LD_INT 2
64082: ARRAY
64083: STR
64084: PUSH
64085: LD_STRING ,
64087: STR
64088: PUSH
64089: LD_VAR 0 3
64093: PUSH
64094: LD_VAR 0 2
64098: ARRAY
64099: PUSH
64100: LD_INT 3
64102: ARRAY
64103: STR
64104: PUSH
64105: LD_STRING ,
64107: STR
64108: PUSH
64109: LD_VAR 0 3
64113: PUSH
64114: LD_VAR 0 2
64118: ARRAY
64119: PUSH
64120: LD_INT 4
64122: ARRAY
64123: STR
64124: PUSH
64125: LD_STRING )
64127: STR
64128: PPUSH
64129: CALL_OW 559
64133: GO 64043
64135: POP
64136: POP
// end ; end ;
64137: LD_VAR 0 1
64141: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64142: LD_INT 0
64144: PPUSH
// if HexInfo ( x , y ) = warehouse then
64145: LD_VAR 0 2
64149: PPUSH
64150: LD_VAR 0 3
64154: PPUSH
64155: CALL_OW 428
64159: PUSH
64160: LD_VAR 0 1
64164: EQUAL
64165: IFFALSE 64192
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64167: LD_ADDR_EXP 62
64171: PUSH
64172: LD_EXP 62
64176: PPUSH
64177: LD_VAR 0 1
64181: PPUSH
64182: LD_INT 0
64184: PPUSH
64185: CALL_OW 1
64189: ST_TO_ADDR
64190: GO 64243
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64192: LD_ADDR_EXP 62
64196: PUSH
64197: LD_EXP 62
64201: PPUSH
64202: LD_VAR 0 1
64206: PPUSH
64207: LD_VAR 0 1
64211: PPUSH
64212: CALL_OW 255
64216: PUSH
64217: LD_VAR 0 1
64221: PUSH
64222: LD_VAR 0 2
64226: PUSH
64227: LD_VAR 0 3
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: PPUSH
64238: CALL_OW 1
64242: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64243: CALL 64252 0 0
// end ;
64247: LD_VAR 0 4
64251: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64252: LD_INT 0
64254: PPUSH
64255: PPUSH
64256: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64257: LD_STRING resetWarehouseGatheringPoints();
64259: PPUSH
64260: CALL_OW 559
// if warehouseGatheringPoints then
64264: LD_EXP 62
64268: IFFALSE 64394
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64270: LD_ADDR_VAR 0 3
64274: PUSH
64275: LD_EXP 62
64279: PPUSH
64280: CALL 54984 0 1
64284: ST_TO_ADDR
// for i := 1 to list do
64285: LD_ADDR_VAR 0 2
64289: PUSH
64290: DOUBLE
64291: LD_INT 1
64293: DEC
64294: ST_TO_ADDR
64295: LD_VAR 0 3
64299: PUSH
64300: FOR_TO
64301: IFFALSE 64392
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64303: LD_STRING setWarehouseGatheringPointXY(
64305: PUSH
64306: LD_VAR 0 3
64310: PUSH
64311: LD_VAR 0 2
64315: ARRAY
64316: PUSH
64317: LD_INT 1
64319: ARRAY
64320: STR
64321: PUSH
64322: LD_STRING ,
64324: STR
64325: PUSH
64326: LD_VAR 0 3
64330: PUSH
64331: LD_VAR 0 2
64335: ARRAY
64336: PUSH
64337: LD_INT 2
64339: ARRAY
64340: STR
64341: PUSH
64342: LD_STRING ,
64344: STR
64345: PUSH
64346: LD_VAR 0 3
64350: PUSH
64351: LD_VAR 0 2
64355: ARRAY
64356: PUSH
64357: LD_INT 3
64359: ARRAY
64360: STR
64361: PUSH
64362: LD_STRING ,
64364: STR
64365: PUSH
64366: LD_VAR 0 3
64370: PUSH
64371: LD_VAR 0 2
64375: ARRAY
64376: PUSH
64377: LD_INT 4
64379: ARRAY
64380: STR
64381: PUSH
64382: LD_STRING )
64384: STR
64385: PPUSH
64386: CALL_OW 559
64390: GO 64300
64392: POP
64393: POP
// end ; end ;
64394: LD_VAR 0 1
64398: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64399: LD_INT 0
64401: PPUSH
64402: PPUSH
// if not mpSidePositions then
64403: LD_EXP 7
64407: NOT
64408: IFFALSE 64412
// exit ;
64410: GO 64483
// result :=  ;
64412: LD_ADDR_VAR 0 1
64416: PUSH
64417: LD_STRING 
64419: ST_TO_ADDR
// for i := 1 to 8 do
64420: LD_ADDR_VAR 0 2
64424: PUSH
64425: DOUBLE
64426: LD_INT 1
64428: DEC
64429: ST_TO_ADDR
64430: LD_INT 8
64432: PUSH
64433: FOR_TO
64434: IFFALSE 64464
// begin result := result & mpSidePositions [ i ] & ; ;
64436: LD_ADDR_VAR 0 1
64440: PUSH
64441: LD_VAR 0 1
64445: PUSH
64446: LD_EXP 7
64450: PUSH
64451: LD_VAR 0 2
64455: ARRAY
64456: STR
64457: PUSH
64458: LD_STRING ;
64460: STR
64461: ST_TO_ADDR
// end ;
64462: GO 64433
64464: POP
64465: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64466: LD_STRING setMultiplayerRealPosition("
64468: PUSH
64469: LD_VAR 0 1
64473: STR
64474: PUSH
64475: LD_STRING ");
64477: STR
64478: PPUSH
64479: CALL_OW 559
// end ;
64483: LD_VAR 0 1
64487: RET
