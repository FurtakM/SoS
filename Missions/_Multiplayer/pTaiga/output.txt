// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 3311 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3734 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 2 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 2
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 11
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 240 , 200 ] ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_INT 240
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 19
 849: PUSH
 850: LD_INT 1
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: LD_INT 6
 867: PUSH
 868: LD_INT 7
 870: PUSH
 871: LD_INT 8
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , CenterArea ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 18
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 11
 894: PUSH
 895: LD_INT 12
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 14
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_EXP 19
 915: UNION
 916: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 917: LD_VAR 0 1
 921: PUSH
 922: LD_INT 2
 924: EQUAL
 925: IFFALSE 937
// baseLevel := 1 else
 927: LD_ADDR_VAR 0 7
 931: PUSH
 932: LD_INT 1
 934: ST_TO_ADDR
 935: GO 951
// baseLevel := mpGameSettings [ 1 ] ;
 937: LD_ADDR_VAR 0 7
 941: PUSH
 942: LD_EXP 6
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 951: LD_ADDR_EXP 24
 955: PUSH
 956: LD_EXP 6
 960: PUSH
 961: LD_INT 2
 963: ARRAY
 964: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 965: LD_ADDR_EXP 25
 969: PUSH
 970: LD_EXP 6
 974: PUSH
 975: LD_INT 3
 977: ARRAY
 978: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 979: LD_ADDR_EXP 15
 983: PUSH
 984: LD_EXP 6
 988: PUSH
 989: LD_INT 4
 991: ARRAY
 992: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 993: LD_ADDR_EXP 27
 997: PUSH
 998: LD_EXP 6
1002: PUSH
1003: LD_INT 5
1005: ARRAY
1006: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1007: LD_ADDR_VAR 0 5
1011: PUSH
1012: LD_EXP 6
1016: PUSH
1017: LD_INT 6
1019: ARRAY
1020: PUSH
1021: LD_INT 0
1023: GREATER
1024: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1025: LD_ADDR_VAR 0 6
1029: PUSH
1030: LD_EXP 6
1034: PUSH
1035: LD_INT 7
1037: ARRAY
1038: PUSH
1039: LD_INT 0
1041: GREATER
1042: ST_TO_ADDR
// kingCamArea := 0 ;
1043: LD_ADDR_EXP 2
1047: PUSH
1048: LD_INT 0
1050: ST_TO_ADDR
// kingArea := 0 ;
1051: LD_ADDR_EXP 1
1055: PUSH
1056: LD_INT 0
1058: ST_TO_ADDR
// if gameType = GameTypeKing then
1059: LD_VAR 0 1
1063: PUSH
1064: LD_INT 3
1066: EQUAL
1067: IFFALSE 1107
// begin mpKingArea := 0 ;
1069: LD_ADDR_EXP 34
1073: PUSH
1074: LD_INT 0
1076: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1077: LD_ADDR_EXP 35
1081: PUSH
1082: LD_EXP 6
1086: PUSH
1087: LD_INT 8
1089: ARRAY
1090: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1091: LD_ADDR_EXP 37
1095: PUSH
1096: LD_EXP 6
1100: PUSH
1101: LD_INT 10
1103: ARRAY
1104: ST_TO_ADDR
// end else
1105: GO 1131
// begin mpKingArea := 0 ;
1107: LD_ADDR_EXP 34
1111: PUSH
1112: LD_INT 0
1114: ST_TO_ADDR
// mpPoints := 0 ;
1115: LD_ADDR_EXP 35
1119: PUSH
1120: LD_INT 0
1122: ST_TO_ADDR
// mpEmissions := 0 ;
1123: LD_ADDR_EXP 37
1127: PUSH
1128: LD_INT 0
1130: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1131: LD_EXP 6
1135: PUSH
1136: LD_INT 9
1138: ARRAY
1139: IFFALSE 1271
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1141: LD_ADDR_EXP 36
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 2
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: LD_INT 1
1169: PUSH
1170: LD_INT 1
1172: PUSH
1173: LD_INT 3
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: PUSH
1186: LD_INT 12
1188: PUSH
1189: LD_INT 1
1191: PUSH
1192: LD_INT 1
1194: PUSH
1195: LD_INT 24
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: PUSH
1204: LD_INT 12
1206: PUSH
1207: LD_INT 1
1209: PUSH
1210: LD_INT 1
1212: PUSH
1213: LD_INT 23
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PUSH
1226: LD_INT 21
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: LD_INT 1
1234: PUSH
1235: LD_INT 42
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: PUSH
1244: LD_INT 21
1246: PUSH
1247: LD_INT 1
1249: PUSH
1250: LD_INT 1
1252: PUSH
1253: LD_INT 42
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: LIST
1270: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: LD_EXP 6
1280: PUSH
1281: LD_INT 11
1283: ARRAY
1284: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1285: LD_ADDR_EXP 22
1289: PUSH
1290: LD_EXP 6
1294: PUSH
1295: LD_INT 12
1297: ARRAY
1298: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1299: LD_ADDR_EXP 26
1303: PUSH
1304: LD_EXP 6
1308: PUSH
1309: LD_INT 13
1311: ARRAY
1312: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1313: LD_ADDR_EXP 33
1317: PUSH
1318: LD_EXP 6
1322: PUSH
1323: LD_INT 14
1325: ARRAY
1326: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1327: LD_ADDR_EXP 30
1331: PUSH
1332: LD_EXP 6
1336: PUSH
1337: LD_INT 15
1339: ARRAY
1340: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1341: LD_ADDR_EXP 28
1345: PUSH
1346: LD_EXP 6
1350: PUSH
1351: LD_INT 18
1353: ARRAY
1354: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1355: LD_ADDR_EXP 20
1359: PUSH
1360: LD_EXP 6
1364: PUSH
1365: LD_INT 21
1367: ARRAY
1368: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1369: LD_ADDR_EXP 31
1373: PUSH
1374: LD_INT 19
1376: PUSH
1377: LD_INT 20
1379: PUSH
1380: LD_INT 21
1382: PUSH
1383: LD_INT 22
1385: PUSH
1386: LD_INT 23
1388: PUSH
1389: LD_INT 24
1391: PUSH
1392: LD_INT 25
1394: PUSH
1395: LD_INT 26
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 0 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 4 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 1 ) , GetBuildingFromArea ( depotArea8 , 0 ) ] ;
1408: LD_ADDR_VAR 0 8
1412: PUSH
1413: LD_INT 27
1415: PPUSH
1416: LD_INT 0
1418: PPUSH
1419: CALL 56447 0 2
1423: PUSH
1424: LD_INT 35
1426: PPUSH
1427: LD_INT 2
1429: PPUSH
1430: CALL 56447 0 2
1434: PUSH
1435: LD_INT 43
1437: PPUSH
1438: LD_INT 4
1440: PPUSH
1441: CALL 56447 0 2
1445: PUSH
1446: LD_INT 51
1448: PPUSH
1449: LD_INT 3
1451: PPUSH
1452: CALL 56447 0 2
1456: PUSH
1457: LD_INT 59
1459: PPUSH
1460: LD_INT 3
1462: PPUSH
1463: CALL 56447 0 2
1467: PUSH
1468: LD_INT 67
1470: PPUSH
1471: LD_INT 5
1473: PPUSH
1474: CALL 56447 0 2
1478: PUSH
1479: LD_INT 75
1481: PPUSH
1482: LD_INT 1
1484: PPUSH
1485: CALL 56447 0 2
1489: PUSH
1490: LD_INT 83
1492: PPUSH
1493: LD_INT 0
1495: PPUSH
1496: CALL 56447 0 2
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: DOUBLE
1517: LD_INT 1
1519: DEC
1520: ST_TO_ADDR
1521: LD_VAR 0 8
1525: PPUSH
1526: CALL 15752 0 1
1530: PUSH
1531: FOR_TO
1532: IFFALSE 1636
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1534: LD_ADDR_EXP 21
1538: PUSH
1539: LD_EXP 21
1543: PPUSH
1544: LD_VAR 0 3
1548: PPUSH
1549: LD_VAR 0 8
1553: PUSH
1554: LD_VAR 0 3
1558: ARRAY
1559: PUSH
1560: LD_INT 1
1562: ARRAY
1563: PPUSH
1564: LD_VAR 0 8
1568: PUSH
1569: LD_VAR 0 3
1573: ARRAY
1574: PUSH
1575: LD_INT 3
1577: ARRAY
1578: PPUSH
1579: LD_INT 10
1581: PPUSH
1582: CALL_OW 272
1586: PUSH
1587: LD_VAR 0 8
1591: PUSH
1592: LD_VAR 0 3
1596: ARRAY
1597: PUSH
1598: LD_INT 2
1600: ARRAY
1601: PPUSH
1602: LD_VAR 0 8
1606: PUSH
1607: LD_VAR 0 3
1611: ARRAY
1612: PUSH
1613: LD_INT 3
1615: ARRAY
1616: PPUSH
1617: LD_INT 10
1619: PPUSH
1620: CALL_OW 273
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PPUSH
1629: CALL_OW 1
1633: ST_TO_ADDR
1634: GO 1531
1636: POP
1637: POP
// if hasOil then
1638: LD_VAR 0 5
1642: IFFALSE 1781
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1644: LD_ADDR_VAR 0 4
1648: PUSH
1649: LD_EXP 6
1653: PUSH
1654: LD_INT 6
1656: ARRAY
1657: PUSH
1658: LD_INT 2
1660: EQUAL
1661: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1662: LD_ADDR_EXP 12
1666: PUSH
1667: LD_INT 33
1669: PPUSH
1670: LD_VAR 0 4
1674: PPUSH
1675: CALL 56280 0 2
1679: PUSH
1680: LD_INT 41
1682: PPUSH
1683: LD_VAR 0 4
1687: PPUSH
1688: CALL 56280 0 2
1692: PUSH
1693: LD_INT 49
1695: PPUSH
1696: LD_VAR 0 4
1700: PPUSH
1701: CALL 56280 0 2
1705: PUSH
1706: LD_INT 57
1708: PPUSH
1709: LD_VAR 0 4
1713: PPUSH
1714: CALL 56280 0 2
1718: PUSH
1719: LD_INT 65
1721: PPUSH
1722: LD_VAR 0 4
1726: PPUSH
1727: CALL 56280 0 2
1731: PUSH
1732: LD_INT 73
1734: PPUSH
1735: LD_VAR 0 4
1739: PPUSH
1740: CALL 56280 0 2
1744: PUSH
1745: LD_INT 81
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL 56280 0 2
1757: PUSH
1758: LD_INT 89
1760: PPUSH
1761: LD_VAR 0 4
1765: PPUSH
1766: CALL 56280 0 2
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: ST_TO_ADDR
// end ; if hasSib then
1781: LD_VAR 0 6
1785: IFFALSE 1924
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1787: LD_ADDR_VAR 0 4
1791: PUSH
1792: LD_EXP 6
1796: PUSH
1797: LD_INT 7
1799: ARRAY
1800: PUSH
1801: LD_INT 2
1803: EQUAL
1804: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1805: LD_ADDR_EXP 13
1809: PUSH
1810: LD_INT 34
1812: PPUSH
1813: LD_VAR 0 4
1817: PPUSH
1818: CALL 56280 0 2
1822: PUSH
1823: LD_INT 42
1825: PPUSH
1826: LD_VAR 0 4
1830: PPUSH
1831: CALL 56280 0 2
1835: PUSH
1836: LD_INT 50
1838: PPUSH
1839: LD_VAR 0 4
1843: PPUSH
1844: CALL 56280 0 2
1848: PUSH
1849: LD_INT 58
1851: PPUSH
1852: LD_VAR 0 4
1856: PPUSH
1857: CALL 56280 0 2
1861: PUSH
1862: LD_INT 66
1864: PPUSH
1865: LD_VAR 0 4
1869: PPUSH
1870: CALL 56280 0 2
1874: PUSH
1875: LD_INT 74
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL 56280 0 2
1887: PUSH
1888: LD_INT 82
1890: PPUSH
1891: LD_VAR 0 4
1895: PPUSH
1896: CALL 56280 0 2
1900: PUSH
1901: LD_INT 90
1903: PPUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: CALL 56280 0 2
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1924: LD_VAR 0 7
1928: PUSH
1929: LD_INT 1
1931: GREATEREQUAL
1932: IFFALSE 1944
// mpDepots := startPos ;
1934: LD_ADDR_EXP 14
1938: PUSH
1939: LD_VAR 0 8
1943: ST_TO_ADDR
// if baseLevel >= 2 then
1944: LD_VAR 0 7
1948: PUSH
1949: LD_INT 2
1951: GREATEREQUAL
1952: IFFALSE 2625
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1c , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1d , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2c , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2d , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3c , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3d , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4c , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4d , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5c , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5d , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6c , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6d , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7c , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7d , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8c , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8d , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 3 ) ] ] ;
1954: LD_ADDR_EXP 17
1958: PUSH
1959: LD_INT 31
1961: PUSH
1962: LD_INT 29
1964: PPUSH
1965: LD_INT 3
1967: PPUSH
1968: CALL 56447 0 2
1972: ADD
1973: PUSH
1974: LD_INT 31
1976: PUSH
1977: LD_INT 30
1979: PPUSH
1980: LD_INT 3
1982: PPUSH
1983: CALL 56447 0 2
1987: ADD
1988: PUSH
1989: LD_INT 31
1991: PUSH
1992: LD_INT 31
1994: PPUSH
1995: LD_INT 5
1997: PPUSH
1998: CALL 56447 0 2
2002: ADD
2003: PUSH
2004: LD_INT 31
2006: PUSH
2007: LD_INT 32
2009: PPUSH
2010: LD_INT 2
2012: PPUSH
2013: CALL 56447 0 2
2017: ADD
2018: PUSH
2019: LD_INT 4
2021: PUSH
2022: LD_INT 28
2024: PPUSH
2025: LD_INT 3
2027: PPUSH
2028: CALL 56447 0 2
2032: ADD
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: PUSH
2041: LD_INT 31
2043: PUSH
2044: LD_INT 37
2046: PPUSH
2047: LD_INT 3
2049: PPUSH
2050: CALL 56447 0 2
2054: ADD
2055: PUSH
2056: LD_INT 31
2058: PUSH
2059: LD_INT 38
2061: PPUSH
2062: LD_INT 5
2064: PPUSH
2065: CALL 56447 0 2
2069: ADD
2070: PUSH
2071: LD_INT 31
2073: PUSH
2074: LD_INT 39
2076: PPUSH
2077: LD_INT 5
2079: PPUSH
2080: CALL 56447 0 2
2084: ADD
2085: PUSH
2086: LD_INT 31
2088: PUSH
2089: LD_INT 40
2091: PPUSH
2092: LD_INT 0
2094: PPUSH
2095: CALL 56447 0 2
2099: ADD
2100: PUSH
2101: LD_INT 4
2103: PUSH
2104: LD_INT 36
2106: PPUSH
2107: LD_INT 5
2109: PPUSH
2110: CALL 56447 0 2
2114: ADD
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: PUSH
2123: LD_INT 31
2125: PUSH
2126: LD_INT 45
2128: PPUSH
2129: LD_INT 1
2131: PPUSH
2132: CALL 56447 0 2
2136: ADD
2137: PUSH
2138: LD_INT 31
2140: PUSH
2141: LD_INT 46
2143: PPUSH
2144: LD_INT 1
2146: PPUSH
2147: CALL 56447 0 2
2151: ADD
2152: PUSH
2153: LD_INT 31
2155: PUSH
2156: LD_INT 47
2158: PPUSH
2159: LD_INT 5
2161: PPUSH
2162: CALL 56447 0 2
2166: ADD
2167: PUSH
2168: LD_INT 31
2170: PUSH
2171: LD_INT 48
2173: PPUSH
2174: LD_INT 5
2176: PPUSH
2177: CALL 56447 0 2
2181: ADD
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: LD_INT 44
2188: PPUSH
2189: LD_INT 1
2191: PPUSH
2192: CALL 56447 0 2
2196: ADD
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 31
2207: PUSH
2208: LD_INT 53
2210: PPUSH
2211: LD_INT 0
2213: PPUSH
2214: CALL 56447 0 2
2218: ADD
2219: PUSH
2220: LD_INT 31
2222: PUSH
2223: LD_INT 54
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: CALL 56447 0 2
2233: ADD
2234: PUSH
2235: LD_INT 31
2237: PUSH
2238: LD_INT 55
2240: PPUSH
2241: LD_INT 5
2243: PPUSH
2244: CALL 56447 0 2
2248: ADD
2249: PUSH
2250: LD_INT 31
2252: PUSH
2253: LD_INT 56
2255: PPUSH
2256: LD_INT 2
2258: PPUSH
2259: CALL 56447 0 2
2263: ADD
2264: PUSH
2265: LD_INT 4
2267: PUSH
2268: LD_INT 52
2270: PPUSH
2271: LD_INT 0
2273: PPUSH
2274: CALL 56447 0 2
2278: ADD
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: PUSH
2287: LD_INT 31
2289: PUSH
2290: LD_INT 61
2292: PPUSH
2293: LD_INT 0
2295: PPUSH
2296: CALL 56447 0 2
2300: ADD
2301: PUSH
2302: LD_INT 31
2304: PUSH
2305: LD_INT 62
2307: PPUSH
2308: LD_INT 0
2310: PPUSH
2311: CALL 56447 0 2
2315: ADD
2316: PUSH
2317: LD_INT 31
2319: PUSH
2320: LD_INT 63
2322: PPUSH
2323: LD_INT 2
2325: PPUSH
2326: CALL 56447 0 2
2330: ADD
2331: PUSH
2332: LD_INT 31
2334: PUSH
2335: LD_INT 64
2337: PPUSH
2338: LD_INT 2
2340: PPUSH
2341: CALL 56447 0 2
2345: ADD
2346: PUSH
2347: LD_INT 4
2349: PUSH
2350: LD_INT 60
2352: PPUSH
2353: LD_INT 0
2355: PPUSH
2356: CALL 56447 0 2
2360: ADD
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: PUSH
2369: LD_INT 31
2371: PUSH
2372: LD_INT 69
2374: PPUSH
2375: LD_INT 0
2377: PPUSH
2378: CALL 56447 0 2
2382: ADD
2383: PUSH
2384: LD_INT 31
2386: PUSH
2387: LD_INT 70
2389: PPUSH
2390: LD_INT 3
2392: PPUSH
2393: CALL 56447 0 2
2397: ADD
2398: PUSH
2399: LD_INT 31
2401: PUSH
2402: LD_INT 71
2404: PPUSH
2405: LD_INT 2
2407: PPUSH
2408: CALL 56447 0 2
2412: ADD
2413: PUSH
2414: LD_INT 31
2416: PUSH
2417: LD_INT 72
2419: PPUSH
2420: LD_INT 2
2422: PPUSH
2423: CALL 56447 0 2
2427: ADD
2428: PUSH
2429: LD_INT 4
2431: PUSH
2432: LD_INT 68
2434: PPUSH
2435: LD_INT 2
2437: PPUSH
2438: CALL 56447 0 2
2442: ADD
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 31
2453: PUSH
2454: LD_INT 77
2456: PPUSH
2457: LD_INT 4
2459: PPUSH
2460: CALL 56447 0 2
2464: ADD
2465: PUSH
2466: LD_INT 31
2468: PUSH
2469: LD_INT 78
2471: PPUSH
2472: LD_INT 4
2474: PPUSH
2475: CALL 56447 0 2
2479: ADD
2480: PUSH
2481: LD_INT 31
2483: PUSH
2484: LD_INT 79
2486: PPUSH
2487: LD_INT 2
2489: PPUSH
2490: CALL 56447 0 2
2494: ADD
2495: PUSH
2496: LD_INT 31
2498: PUSH
2499: LD_INT 80
2501: PPUSH
2502: LD_INT 2
2504: PPUSH
2505: CALL 56447 0 2
2509: ADD
2510: PUSH
2511: LD_INT 4
2513: PUSH
2514: LD_INT 76
2516: PPUSH
2517: LD_INT 4
2519: PPUSH
2520: CALL 56447 0 2
2524: ADD
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: PUSH
2533: LD_INT 31
2535: PUSH
2536: LD_INT 85
2538: PPUSH
2539: LD_INT 3
2541: PPUSH
2542: CALL 56447 0 2
2546: ADD
2547: PUSH
2548: LD_INT 31
2550: PUSH
2551: LD_INT 86
2553: PPUSH
2554: LD_INT 2
2556: PPUSH
2557: CALL 56447 0 2
2561: ADD
2562: PUSH
2563: LD_INT 31
2565: PUSH
2566: LD_INT 87
2568: PPUSH
2569: LD_INT 2
2571: PPUSH
2572: CALL 56447 0 2
2576: ADD
2577: PUSH
2578: LD_INT 31
2580: PUSH
2581: LD_INT 88
2583: PPUSH
2584: LD_INT 5
2586: PPUSH
2587: CALL 56447 0 2
2591: ADD
2592: PUSH
2593: LD_INT 4
2595: PUSH
2596: LD_INT 84
2598: PPUSH
2599: LD_INT 3
2601: PPUSH
2602: CALL 56447 0 2
2606: ADD
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: ST_TO_ADDR
// end ; end ;
2625: LD_VAR 0 2
2629: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2630: GO 2632
2632: DISABLE
2633: LD_INT 0
2635: PPUSH
2636: PPUSH
2637: PPUSH
2638: PPUSH
2639: PPUSH
2640: PPUSH
2641: PPUSH
2642: PPUSH
// begin if not mpShipments then
2643: LD_EXP 27
2647: NOT
2648: IFFALSE 2652
// exit ;
2650: GO 3148
// case mpShipments of 1 :
2652: LD_EXP 27
2656: PUSH
2657: LD_INT 1
2659: DOUBLE
2660: EQUAL
2661: IFTRUE 2665
2663: GO 2700
2665: POP
// begin time := 0 0$30 ;
2666: LD_ADDR_VAR 0 5
2670: PUSH
2671: LD_INT 1050
2673: ST_TO_ADDR
// normalTime := 0 0$30 ;
2674: LD_ADDR_VAR 0 6
2678: PUSH
2679: LD_INT 1050
2681: ST_TO_ADDR
// maxTime := 1 1$20 ;
2682: LD_ADDR_VAR 0 8
2686: PUSH
2687: LD_INT 2800
2689: ST_TO_ADDR
// delayTime := 0 0$5 ;
2690: LD_ADDR_VAR 0 7
2694: PUSH
2695: LD_INT 175
2697: ST_TO_ADDR
// end ; 2 :
2698: GO 2830
2700: LD_INT 2
2702: DOUBLE
2703: EQUAL
2704: IFTRUE 2708
2706: GO 2743
2708: POP
// begin time := 0 0$25 ;
2709: LD_ADDR_VAR 0 5
2713: PUSH
2714: LD_INT 875
2716: ST_TO_ADDR
// normalTime := 0 0$25 ;
2717: LD_ADDR_VAR 0 6
2721: PUSH
2722: LD_INT 875
2724: ST_TO_ADDR
// maxTime := 1 1$10 ;
2725: LD_ADDR_VAR 0 8
2729: PUSH
2730: LD_INT 2450
2732: ST_TO_ADDR
// delayTime := 0 0$4 ;
2733: LD_ADDR_VAR 0 7
2737: PUSH
2738: LD_INT 140
2740: ST_TO_ADDR
// end ; 3 :
2741: GO 2830
2743: LD_INT 3
2745: DOUBLE
2746: EQUAL
2747: IFTRUE 2751
2749: GO 2786
2751: POP
// begin time := 0 0$20 ;
2752: LD_ADDR_VAR 0 5
2756: PUSH
2757: LD_INT 700
2759: ST_TO_ADDR
// normalTime := 0 0$20 ;
2760: LD_ADDR_VAR 0 6
2764: PUSH
2765: LD_INT 700
2767: ST_TO_ADDR
// maxTime := 1 1$00 ;
2768: LD_ADDR_VAR 0 8
2772: PUSH
2773: LD_INT 2100
2775: ST_TO_ADDR
// delayTime := 0 0$3 ;
2776: LD_ADDR_VAR 0 7
2780: PUSH
2781: LD_INT 105
2783: ST_TO_ADDR
// end ; 4 :
2784: GO 2830
2786: LD_INT 4
2788: DOUBLE
2789: EQUAL
2790: IFTRUE 2794
2792: GO 2829
2794: POP
// begin time := 0 0$15 ;
2795: LD_ADDR_VAR 0 5
2799: PUSH
2800: LD_INT 525
2802: ST_TO_ADDR
// normalTime := 0 0$15 ;
2803: LD_ADDR_VAR 0 6
2807: PUSH
2808: LD_INT 525
2810: ST_TO_ADDR
// maxTime := 0 0$55 ;
2811: LD_ADDR_VAR 0 8
2815: PUSH
2816: LD_INT 1925
2818: ST_TO_ADDR
// delayTime := 0 0$2 ;
2819: LD_ADDR_VAR 0 7
2823: PUSH
2824: LD_INT 70
2826: ST_TO_ADDR
// end ; end ;
2827: GO 2830
2829: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , HillArea1 , HillArea2 , OuterArea1 , OuterArea2 ] ;
2830: LD_ADDR_VAR 0 4
2834: PUSH
2835: LD_INT 10
2837: PUSH
2838: LD_INT 11
2840: PUSH
2841: LD_INT 12
2843: PUSH
2844: LD_INT 13
2846: PUSH
2847: LD_INT 15
2849: PUSH
2850: LD_INT 16
2852: PUSH
2853: LD_INT 17
2855: PUSH
2856: LD_INT 18
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: LIST
2868: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2869: LD_ADDR_VAR 0 3
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: LD_INT 2
2879: PUSH
2880: LD_INT 3
2882: PUSH
2883: LD_INT 4
2885: PUSH
2886: LD_INT 5
2888: PUSH
2889: LD_INT 6
2891: PUSH
2892: LD_INT 7
2894: PUSH
2895: LD_INT 8
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: LIST
2902: LIST
2903: LIST
2904: LIST
2905: LIST
2906: LIST
2907: ST_TO_ADDR
// for i := 1 to 8 do
2908: LD_ADDR_VAR 0 1
2912: PUSH
2913: DOUBLE
2914: LD_INT 1
2916: DEC
2917: ST_TO_ADDR
2918: LD_INT 8
2920: PUSH
2921: FOR_TO
2922: IFFALSE 2969
// begin if not mpSidePositions [ i ] then
2924: LD_EXP 7
2928: PUSH
2929: LD_VAR 0 1
2933: ARRAY
2934: NOT
2935: IFFALSE 2939
// continue ;
2937: GO 2921
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2939: LD_ADDR_VAR 0 4
2943: PUSH
2944: LD_VAR 0 4
2948: PUSH
2949: LD_VAR 0 3
2953: PUSH
2954: LD_EXP 7
2958: PUSH
2959: LD_VAR 0 1
2963: ARRAY
2964: ARRAY
2965: ADD
2966: ST_TO_ADDR
// end ;
2967: GO 2921
2969: POP
2970: POP
// x := 1 ;
2971: LD_ADDR_VAR 0 2
2975: PUSH
2976: LD_INT 1
2978: ST_TO_ADDR
// repeat wait ( time ) ;
2979: LD_VAR 0 5
2983: PPUSH
2984: CALL_OW 67
// x := Inc ( x ) ;
2988: LD_ADDR_VAR 0 2
2992: PUSH
2993: LD_VAR 0 2
2997: PPUSH
2998: CALL 53101 0 1
3002: ST_TO_ADDR
// if x > 5 then
3003: LD_VAR 0 2
3007: PUSH
3008: LD_INT 5
3010: GREATER
3011: IFFALSE 3021
// x := 1 ;
3013: LD_ADDR_VAR 0 2
3017: PUSH
3018: LD_INT 1
3020: ST_TO_ADDR
// for i in areas do
3021: LD_ADDR_VAR 0 1
3025: PUSH
3026: LD_VAR 0 4
3030: PUSH
3031: FOR_IN
3032: IFFALSE 3071
// begin if GetResourceArea ( i , mat_cans ) < 30 then
3034: LD_VAR 0 1
3038: PPUSH
3039: LD_INT 1
3041: PPUSH
3042: CALL_OW 287
3046: PUSH
3047: LD_INT 30
3049: LESS
3050: IFFALSE 3069
// begin CreateCratesArea ( x , i , true ) ;
3052: LD_VAR 0 2
3056: PPUSH
3057: LD_VAR 0 1
3061: PPUSH
3062: LD_INT 1
3064: PPUSH
3065: CALL_OW 55
// end ; end ;
3069: GO 3031
3071: POP
3072: POP
// if GetResourceArea ( CenterArea , mat_cans ) < 60 then
3073: LD_INT 14
3075: PPUSH
3076: LD_INT 1
3078: PPUSH
3079: CALL_OW 287
3083: PUSH
3084: LD_INT 60
3086: LESS
3087: IFFALSE 3106
// CreateCratesArea ( x , i , true ) ;
3089: LD_VAR 0 2
3093: PPUSH
3094: LD_VAR 0 1
3098: PPUSH
3099: LD_INT 1
3101: PPUSH
3102: CALL_OW 55
// time := time + delayTime ;
3106: LD_ADDR_VAR 0 5
3110: PUSH
3111: LD_VAR 0 5
3115: PUSH
3116: LD_VAR 0 7
3120: PLUS
3121: ST_TO_ADDR
// if time > maxTime then
3122: LD_VAR 0 5
3126: PUSH
3127: LD_VAR 0 8
3131: GREATER
3132: IFFALSE 3144
// time := normalTime ;
3134: LD_ADDR_VAR 0 5
3138: PUSH
3139: LD_VAR 0 6
3143: ST_TO_ADDR
// until false ;
3144: LD_INT 0
3146: IFFALSE 2979
// end ; end_of_file
3148: PPOPN 8
3150: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3151: LD_VAR 0 1
3155: PPUSH
3156: CALL 57245 0 1
// Multiplayer_UnitDestroyed ( un ) ;
3160: LD_VAR 0 1
3164: PPUSH
3165: CALL 8857 0 1
// end ;
3169: PPOPN 1
3171: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
3172: LD_VAR 0 1
3176: PPUSH
3177: CALL 57262 0 1
// end ;
3181: PPOPN 1
3183: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
3184: LD_VAR 0 1
3188: PPUSH
3189: CALL 9910 0 1
3193: PPOPN 1
3195: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
3196: LD_VAR 0 1
3200: PPUSH
3201: LD_VAR 0 2
3205: PPUSH
3206: CALL 57303 0 2
3210: PPOPN 2
3212: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
3213: LD_VAR 0 1
3217: PPUSH
3218: LD_VAR 0 2
3222: PPUSH
3223: CALL 9663 0 2
3227: PPOPN 2
3229: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
3230: LD_VAR 0 1
3234: PPUSH
3235: LD_VAR 0 2
3239: PPUSH
3240: LD_VAR 0 3
3244: PPUSH
3245: CALL 9963 0 3
3249: PPOPN 3
3251: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
3252: LD_VAR 0 1
3256: PPUSH
3257: LD_VAR 0 2
3261: PPUSH
3262: LD_VAR 0 3
3266: PPUSH
3267: LD_VAR 0 4
3271: PPUSH
3272: LD_VAR 0 5
3276: PPUSH
3277: CALL 10647 0 5
3281: PPOPN 5
3283: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
3284: LD_VAR 0 1
3288: PPUSH
3289: LD_VAR 0 2
3293: PPUSH
3294: LD_VAR 0 3
3298: PPUSH
3299: LD_VAR 0 4
3303: PPUSH
3304: CALL 10750 0 4
3308: PPOPN 4
3310: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
3311: LD_INT 0
3313: PPUSH
3314: PPUSH
// disable ( mpActive ) ;
3315: LD_INT 100
3317: DISABLE_MARKED
// disable ( mpWin ) ;
3318: LD_INT 101
3320: DISABLE_MARKED
// disable ( mpLose ) ;
3321: LD_INT 102
3323: DISABLE_MARKED
// mpGameType := 0 ;
3324: LD_ADDR_EXP 3
3328: PUSH
3329: LD_INT 0
3331: ST_TO_ADDR
// mpGameSettings := [ ] ;
3332: LD_ADDR_EXP 6
3336: PUSH
3337: EMPTY
3338: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
3339: LD_ADDR_EXP 4
3343: PUSH
3344: EMPTY
3345: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
3346: LD_ADDR_EXP 5
3350: PUSH
3351: EMPTY
3352: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
3353: LD_ADDR_EXP 29
3357: PUSH
3358: LD_INT 2
3360: PUSH
3361: LD_INT 2
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: ST_TO_ADDR
// mpOilDeposits := [ ] ;
3368: LD_ADDR_EXP 12
3372: PUSH
3373: EMPTY
3374: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3375: LD_ADDR_EXP 13
3379: PUSH
3380: EMPTY
3381: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
3382: LD_ADDR_EXP 42
3386: PUSH
3387: EMPTY
3388: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
3389: LD_ADDR_EXP 43
3393: PUSH
3394: EMPTY
3395: ST_TO_ADDR
// mpDepots := [ ] ;
3396: LD_ADDR_EXP 14
3400: PUSH
3401: EMPTY
3402: ST_TO_ADDR
// mpBuildings := [ ] ;
3403: LD_ADDR_EXP 17
3407: PUSH
3408: EMPTY
3409: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3410: LD_ADDR_EXP 18
3414: PUSH
3415: EMPTY
3416: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3417: LD_ADDR_EXP 19
3421: PUSH
3422: EMPTY
3423: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3424: LD_ADDR_EXP 20
3428: PUSH
3429: EMPTY
3430: ST_TO_ADDR
// mpStartingResources := [ ] ;
3431: LD_ADDR_EXP 15
3435: PUSH
3436: EMPTY
3437: ST_TO_ADDR
// mpStartPos := [ ] ;
3438: LD_ADDR_EXP 21
3442: PUSH
3443: EMPTY
3444: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3445: LD_ADDR_EXP 22
3449: PUSH
3450: LD_INT 1
3452: NEG
3453: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3454: LD_ADDR_EXP 23
3458: PUSH
3459: EMPTY
3460: ST_TO_ADDR
// mpApemans := [ ] ;
3461: LD_ADDR_EXP 30
3465: PUSH
3466: EMPTY
3467: ST_TO_ADDR
// mpApemansArea := [ ] ;
3468: LD_ADDR_EXP 31
3472: PUSH
3473: EMPTY
3474: ST_TO_ADDR
// mpRespawn := [ ] ;
3475: LD_ADDR_EXP 33
3479: PUSH
3480: EMPTY
3481: ST_TO_ADDR
// mpKingArea := 0 ;
3482: LD_ADDR_EXP 34
3486: PUSH
3487: LD_INT 0
3489: ST_TO_ADDR
// mpPoints := [ ] ;
3490: LD_ADDR_EXP 35
3494: PUSH
3495: EMPTY
3496: ST_TO_ADDR
// mpVehicles := 0 ;
3497: LD_ADDR_EXP 36
3501: PUSH
3502: LD_INT 0
3504: ST_TO_ADDR
// mpShipments := 0 ;
3505: LD_ADDR_EXP 27
3509: PUSH
3510: LD_INT 0
3512: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3513: LD_ADDR_EXP 40
3517: PUSH
3518: EMPTY
3519: PUSH
3520: EMPTY
3521: PUSH
3522: EMPTY
3523: PUSH
3524: EMPTY
3525: PUSH
3526: EMPTY
3527: PUSH
3528: EMPTY
3529: PUSH
3530: EMPTY
3531: PUSH
3532: EMPTY
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3544: LD_ADDR_EXP 32
3548: PUSH
3549: EMPTY
3550: PUSH
3551: EMPTY
3552: PUSH
3553: EMPTY
3554: PUSH
3555: EMPTY
3556: PUSH
3557: EMPTY
3558: PUSH
3559: EMPTY
3560: PUSH
3561: EMPTY
3562: PUSH
3563: EMPTY
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
3575: LD_ADDR_EXP 41
3579: PUSH
3580: LD_INT 0
3582: PUSH
3583: LD_INT 0
3585: PUSH
3586: LD_INT 0
3588: PUSH
3589: LD_INT 0
3591: PUSH
3592: LD_INT 0
3594: PUSH
3595: LD_INT 0
3597: PUSH
3598: LD_INT 0
3600: PUSH
3601: LD_INT 0
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: ST_TO_ADDR
// mpEmissions := 0 ;
3614: LD_ADDR_EXP 37
3618: PUSH
3619: LD_INT 0
3621: ST_TO_ADDR
// mpTeleports := 0 ;
3622: LD_ADDR_EXP 44
3626: PUSH
3627: LD_INT 0
3629: ST_TO_ADDR
// mpArtifacts := 0 ;
3630: LD_ADDR_EXP 45
3634: PUSH
3635: LD_INT 0
3637: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3638: LD_ADDR_EXP 46
3642: PUSH
3643: LD_INT 0
3645: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3646: LD_ADDR_EXP 25
3650: PUSH
3651: LD_INT 3
3653: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3654: LD_ADDR_EXP 24
3658: PUSH
3659: LD_INT 15
3661: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3662: LD_ADDR_EXP 38
3666: PUSH
3667: LD_INT 0
3669: ST_TO_ADDR
// mpGameActive := false ;
3670: LD_ADDR_EXP 39
3674: PUSH
3675: LD_INT 0
3677: ST_TO_ADDR
// mpBlockRespThread := false ;
3678: LD_ADDR_EXP 47
3682: PUSH
3683: LD_INT 0
3685: ST_TO_ADDR
// for i := 1 to 32 do
3686: LD_ADDR_VAR 0 2
3690: PUSH
3691: DOUBLE
3692: LD_INT 1
3694: DEC
3695: ST_TO_ADDR
3696: LD_INT 32
3698: PUSH
3699: FOR_TO
3700: IFFALSE 3727
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3702: LD_ADDR_EXP 6
3706: PUSH
3707: LD_EXP 6
3711: PPUSH
3712: LD_VAR 0 2
3716: PPUSH
3717: LD_INT 0
3719: PPUSH
3720: CALL_OW 1
3724: ST_TO_ADDR
3725: GO 3699
3727: POP
3728: POP
// end ;
3729: LD_VAR 0 1
3733: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3734: LD_INT 0
3736: PPUSH
3737: PPUSH
3738: PPUSH
3739: PPUSH
3740: PPUSH
3741: PPUSH
3742: PPUSH
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
3748: PPUSH
3749: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
3750: LD_ADDR_VAR 0 14
3754: PUSH
3755: LD_INT 1
3757: PUSH
3758: LD_INT 2
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: LD_INT 5
3766: PUSH
3767: LD_INT 6
3769: PUSH
3770: LD_INT 7
3772: PUSH
3773: LD_INT 8
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: ST_TO_ADDR
// for i in gameTypes do
3785: LD_ADDR_VAR 0 2
3789: PUSH
3790: LD_VAR 0 14
3794: PUSH
3795: FOR_IN
3796: IFFALSE 3805
// disable ( i ) ;
3798: LD_VAR 0 2
3802: DISABLE_MARKED
3803: GO 3795
3805: POP
3806: POP
// if Multiplayer then
3807: LD_OWVAR 4
3811: IFFALSE 3995
// begin mpGameType := mp_game_type ;
3813: LD_ADDR_EXP 3
3817: PUSH
3818: LD_OWVAR 6
3822: ST_TO_ADDR
// your_side := mp_player_side ;
3823: LD_ADDR_OWVAR 2
3827: PUSH
3828: LD_OWVAR 7
3832: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3833: LD_ADDR_EXP 7
3837: PUSH
3838: LD_OWVAR 17
3842: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3843: LD_ADDR_EXP 8
3847: PUSH
3848: LD_OWVAR 15
3852: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3853: LD_ADDR_EXP 9
3857: PUSH
3858: LD_OWVAR 16
3862: ST_TO_ADDR
// mpTeams := mp_teams ;
3863: LD_ADDR_EXP 10
3867: PUSH
3868: LD_OWVAR 12
3872: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3873: LD_ADDR_VAR 0 2
3877: PUSH
3878: DOUBLE
3879: LD_INT 1
3881: DEC
3882: ST_TO_ADDR
3883: LD_EXP 4
3887: PPUSH
3888: CALL 15752 0 1
3892: PUSH
3893: FOR_TO
3894: IFFALSE 3970
// begin setting := mpGameSettingsKeys [ i ] ;
3896: LD_ADDR_VAR 0 12
3900: PUSH
3901: LD_EXP 4
3905: PUSH
3906: LD_VAR 0 2
3910: ARRAY
3911: ST_TO_ADDR
// if setting then
3912: LD_VAR 0 12
3916: IFFALSE 3968
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3918: LD_ADDR_EXP 6
3922: PUSH
3923: LD_EXP 6
3927: PPUSH
3928: LD_VAR 0 2
3932: PPUSH
3933: LD_EXP 5
3937: PUSH
3938: LD_VAR 0 2
3942: ARRAY
3943: PUSH
3944: LD_VAR 0 2
3948: PUSH
3949: LD_INT 1
3951: MINUS
3952: PPUSH
3953: CALL_OW 426
3957: PUSH
3958: LD_INT 1
3960: PLUS
3961: ARRAY
3962: PPUSH
3963: CALL_OW 1
3967: ST_TO_ADDR
// end ;
3968: GO 3893
3970: POP
3971: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3972: LD_ADDR_EXP 11
3976: PUSH
3977: LD_EXP 8
3981: PUSH
3982: LD_INT 0
3984: PUSH
3985: EMPTY
3986: LIST
3987: DIFF
3988: PUSH
3989: LD_INT 1
3991: GREATER
3992: ST_TO_ADDR
// end else
3993: GO 3995
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3995: LD_EXP 3
3999: PPUSH
4000: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
4004: LD_EXP 18
4008: PPUSH
4009: CALL 15752 0 1
4013: IFFALSE 4044
// begin for i in mpMarkedAreas do
4015: LD_ADDR_VAR 0 2
4019: PUSH
4020: LD_EXP 18
4024: PUSH
4025: FOR_IN
4026: IFFALSE 4042
// SetAreaMapShow ( i , 0 ) ;
4028: LD_VAR 0 2
4032: PPUSH
4033: LD_INT 0
4035: PPUSH
4036: CALL_OW 424
4040: GO 4025
4042: POP
4043: POP
// end ; for i := 1 to 8 do
4044: LD_ADDR_VAR 0 2
4048: PUSH
4049: DOUBLE
4050: LD_INT 1
4052: DEC
4053: ST_TO_ADDR
4054: LD_INT 8
4056: PUSH
4057: FOR_TO
4058: IFFALSE 5517
// begin if not mpSidePositions [ i ] then
4060: LD_EXP 7
4064: PUSH
4065: LD_VAR 0 2
4069: ARRAY
4070: NOT
4071: IFFALSE 4075
// continue ;
4073: GO 4057
// side := i ;
4075: LD_ADDR_VAR 0 7
4079: PUSH
4080: LD_VAR 0 2
4084: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
4085: LD_ADDR_VAR 0 9
4089: PUSH
4090: LD_EXP 9
4094: PUSH
4095: LD_VAR 0 2
4099: ARRAY
4100: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
4101: LD_ADDR_VAR 0 8
4105: PUSH
4106: LD_EXP 7
4110: PUSH
4111: LD_VAR 0 2
4115: ARRAY
4116: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
4117: LD_EXP 12
4121: PPUSH
4122: CALL 15752 0 1
4126: IFFALSE 4203
// begin for j in mpOilDeposits [ pos ] do
4128: LD_ADDR_VAR 0 3
4132: PUSH
4133: LD_EXP 12
4137: PUSH
4138: LD_VAR 0 8
4142: ARRAY
4143: PUSH
4144: FOR_IN
4145: IFFALSE 4201
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
4147: LD_VAR 0 3
4151: PUSH
4152: LD_INT 1
4154: ARRAY
4155: PPUSH
4156: LD_VAR 0 3
4160: PUSH
4161: LD_INT 2
4163: ARRAY
4164: PPUSH
4165: LD_INT 2
4167: PPUSH
4168: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
4172: LD_VAR 0 3
4176: PUSH
4177: LD_INT 1
4179: ARRAY
4180: PPUSH
4181: LD_VAR 0 3
4185: PUSH
4186: LD_INT 2
4188: ARRAY
4189: PPUSH
4190: LD_VAR 0 7
4194: PPUSH
4195: CALL_OW 441
// end ;
4199: GO 4144
4201: POP
4202: POP
// end ; if Count ( mpSibDeposits ) then
4203: LD_EXP 13
4207: PPUSH
4208: CALL 15752 0 1
4212: IFFALSE 4289
// begin for j in mpSibDeposits [ pos ] do
4214: LD_ADDR_VAR 0 3
4218: PUSH
4219: LD_EXP 13
4223: PUSH
4224: LD_VAR 0 8
4228: ARRAY
4229: PUSH
4230: FOR_IN
4231: IFFALSE 4287
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
4233: LD_VAR 0 3
4237: PUSH
4238: LD_INT 1
4240: ARRAY
4241: PPUSH
4242: LD_VAR 0 3
4246: PUSH
4247: LD_INT 2
4249: ARRAY
4250: PPUSH
4251: LD_INT 3
4253: PPUSH
4254: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
4258: LD_VAR 0 3
4262: PUSH
4263: LD_INT 1
4265: ARRAY
4266: PPUSH
4267: LD_VAR 0 3
4271: PUSH
4272: LD_INT 2
4274: ARRAY
4275: PPUSH
4276: LD_VAR 0 7
4280: PPUSH
4281: CALL_OW 441
// end ;
4285: GO 4230
4287: POP
4288: POP
// end ; InitBc ;
4289: CALL_OW 21
// InitUc ;
4293: CALL_OW 18
// uc_side := side ;
4297: LD_ADDR_OWVAR 20
4301: PUSH
4302: LD_VAR 0 7
4306: ST_TO_ADDR
// uc_nation := nation ;
4307: LD_ADDR_OWVAR 21
4311: PUSH
4312: LD_VAR 0 9
4316: ST_TO_ADDR
// if mpBattleFlag > - 1 then
4317: LD_EXP 22
4321: PUSH
4322: LD_INT 1
4324: NEG
4325: GREATER
4326: IFFALSE 4485
// begin x := mpStartPos [ pos ] [ 1 ] ;
4328: LD_ADDR_VAR 0 5
4332: PUSH
4333: LD_EXP 21
4337: PUSH
4338: LD_VAR 0 8
4342: ARRAY
4343: PUSH
4344: LD_INT 1
4346: ARRAY
4347: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4348: LD_ADDR_VAR 0 6
4352: PUSH
4353: LD_EXP 21
4357: PUSH
4358: LD_VAR 0 8
4362: ARRAY
4363: PUSH
4364: LD_INT 2
4366: ARRAY
4367: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4368: LD_VAR 0 5
4372: PPUSH
4373: LD_VAR 0 6
4377: PPUSH
4378: LD_INT 12
4380: PPUSH
4381: LD_INT 2
4383: PPUSH
4384: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4388: LD_ADDR_EXP 23
4392: PUSH
4393: LD_EXP 23
4397: PPUSH
4398: LD_VAR 0 7
4402: PPUSH
4403: LD_VAR 0 7
4407: PPUSH
4408: LD_VAR 0 5
4412: PPUSH
4413: LD_VAR 0 6
4417: PPUSH
4418: LD_INT 1
4420: PUSH
4421: LD_INT 100
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 2
4430: PUSH
4431: LD_INT 70
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: PUSH
4438: LD_INT 3
4440: PUSH
4441: LD_INT 40
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: PUSH
4448: LD_INT 10
4450: PUSH
4451: LD_INT 25
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: LD_INT 20
4460: PUSH
4461: LD_INT 100
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: PPUSH
4475: CALL_OW 418
4479: PPUSH
4480: CALL_OW 1
4484: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
4485: LD_EXP 14
4489: PPUSH
4490: CALL 15752 0 1
4494: IFFALSE 4693
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
4496: LD_EXP 3
4500: PUSH
4501: LD_INT 2
4503: PUSH
4504: LD_INT 8
4506: PUSH
4507: LD_INT 6
4509: PUSH
4510: LD_INT 7
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: IN
4519: IFFALSE 4539
// begin bc_level := 10 ;
4521: LD_ADDR_OWVAR 43
4525: PUSH
4526: LD_INT 10
4528: ST_TO_ADDR
// bc_type := b_warehouse ;
4529: LD_ADDR_OWVAR 42
4533: PUSH
4534: LD_INT 1
4536: ST_TO_ADDR
// end else
4537: GO 4555
// begin bc_level := 0 ;
4539: LD_ADDR_OWVAR 43
4543: PUSH
4544: LD_INT 0
4546: ST_TO_ADDR
// bc_type := b_depot ;
4547: LD_ADDR_OWVAR 42
4551: PUSH
4552: LD_INT 0
4554: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4555: LD_ADDR_VAR 0 4
4559: PUSH
4560: LD_EXP 14
4564: PUSH
4565: LD_VAR 0 8
4569: ARRAY
4570: PUSH
4571: LD_INT 1
4573: ARRAY
4574: PPUSH
4575: LD_EXP 14
4579: PUSH
4580: LD_VAR 0 8
4584: ARRAY
4585: PUSH
4586: LD_INT 2
4588: ARRAY
4589: PPUSH
4590: LD_EXP 14
4594: PUSH
4595: LD_VAR 0 8
4599: ARRAY
4600: PUSH
4601: LD_INT 3
4603: ARRAY
4604: PPUSH
4605: CALL_OW 47
4609: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4610: LD_VAR 0 4
4614: PPUSH
4615: LD_STRING @
4617: PUSH
4618: LD_VAR 0 7
4622: STR
4623: PPUSH
4624: CALL_OW 500
// if Count ( mpStartingResources ) then
4628: LD_EXP 15
4632: PPUSH
4633: CALL 15752 0 1
4637: IFFALSE 4691
// begin for j := 1 to mpStartingResources do
4639: LD_ADDR_VAR 0 3
4643: PUSH
4644: DOUBLE
4645: LD_INT 1
4647: DEC
4648: ST_TO_ADDR
4649: LD_EXP 15
4653: PUSH
4654: FOR_TO
4655: IFFALSE 4689
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4657: LD_VAR 0 4
4661: PPUSH
4662: CALL_OW 274
4666: PPUSH
4667: LD_VAR 0 3
4671: PPUSH
4672: LD_EXP 15
4676: PUSH
4677: LD_VAR 0 3
4681: ARRAY
4682: PPUSH
4683: CALL_OW 277
4687: GO 4654
4689: POP
4690: POP
// end ; end else
4691: GO 4900
// if Count ( mpStartingResources ) then
4693: LD_EXP 15
4697: PPUSH
4698: CALL 15752 0 1
4702: IFFALSE 4900
// begin x := mpStartPos [ pos ] [ 1 ] ;
4704: LD_ADDR_VAR 0 5
4708: PUSH
4709: LD_EXP 21
4713: PUSH
4714: LD_VAR 0 8
4718: ARRAY
4719: PUSH
4720: LD_INT 1
4722: ARRAY
4723: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4724: LD_ADDR_VAR 0 6
4728: PUSH
4729: LD_EXP 21
4733: PUSH
4734: LD_VAR 0 8
4738: ARRAY
4739: PUSH
4740: LD_INT 2
4742: ARRAY
4743: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4744: LD_ADDR_VAR 0 3
4748: PUSH
4749: DOUBLE
4750: LD_INT 1
4752: DEC
4753: ST_TO_ADDR
4754: LD_EXP 15
4758: PUSH
4759: FOR_TO
4760: IFFALSE 4898
// begin resources := mpStartingResources [ j ] ;
4762: LD_ADDR_VAR 0 13
4766: PUSH
4767: LD_EXP 15
4771: PUSH
4772: LD_VAR 0 3
4776: ARRAY
4777: ST_TO_ADDR
// if resources = 0 then
4778: LD_VAR 0 13
4782: PUSH
4783: LD_INT 0
4785: EQUAL
4786: IFFALSE 4790
// continue ;
4788: GO 4759
// repeat if resources >= 50 then
4790: LD_VAR 0 13
4794: PUSH
4795: LD_INT 50
4797: GREATEREQUAL
4798: IFFALSE 4844
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4800: LD_VAR 0 3
4804: PPUSH
4805: LD_INT 5
4807: PPUSH
4808: LD_VAR 0 5
4812: PPUSH
4813: LD_VAR 0 6
4817: PPUSH
4818: LD_INT 6
4820: PPUSH
4821: LD_INT 0
4823: PPUSH
4824: CALL_OW 60
// resources := resources - 50 ;
4828: LD_ADDR_VAR 0 13
4832: PUSH
4833: LD_VAR 0 13
4837: PUSH
4838: LD_INT 50
4840: MINUS
4841: ST_TO_ADDR
// end else
4842: GO 4886
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4844: LD_VAR 0 3
4848: PPUSH
4849: LD_VAR 0 13
4853: PUSH
4854: LD_INT 10
4856: DIV
4857: PPUSH
4858: LD_VAR 0 5
4862: PPUSH
4863: LD_VAR 0 6
4867: PPUSH
4868: LD_INT 6
4870: PPUSH
4871: LD_INT 0
4873: PPUSH
4874: CALL_OW 60
// resources := 0 ;
4878: LD_ADDR_VAR 0 13
4882: PUSH
4883: LD_INT 0
4885: ST_TO_ADDR
// end ; until resources <= 0 ;
4886: LD_VAR 0 13
4890: PUSH
4891: LD_INT 0
4893: LESSEQUAL
4894: IFFALSE 4790
// end ;
4896: GO 4759
4898: POP
4899: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
4900: LD_EXP 17
4904: PPUSH
4905: CALL 15752 0 1
4909: IFFALSE 4929
4911: PUSH
4912: LD_EXP 3
4916: PUSH
4917: LD_INT 2
4919: PUSH
4920: LD_INT 8
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: IN
4927: NOT
4928: AND
4929: IFFALSE 5007
// begin for j in mpBuildings [ pos ] do
4931: LD_ADDR_VAR 0 3
4935: PUSH
4936: LD_EXP 17
4940: PUSH
4941: LD_VAR 0 8
4945: ARRAY
4946: PUSH
4947: FOR_IN
4948: IFFALSE 5005
// begin bc_level := 0 ;
4950: LD_ADDR_OWVAR 43
4954: PUSH
4955: LD_INT 0
4957: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4958: LD_ADDR_OWVAR 42
4962: PUSH
4963: LD_VAR 0 3
4967: PUSH
4968: LD_INT 1
4970: ARRAY
4971: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4972: LD_VAR 0 3
4976: PUSH
4977: LD_INT 2
4979: ARRAY
4980: PPUSH
4981: LD_VAR 0 3
4985: PUSH
4986: LD_INT 3
4988: ARRAY
4989: PPUSH
4990: LD_VAR 0 3
4994: PUSH
4995: LD_INT 4
4997: ARRAY
4998: PPUSH
4999: CALL_OW 47
// end ;
5003: GO 4947
5005: POP
5006: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
5007: LD_EXP 26
5011: IFFALSE 5031
5013: PUSH
5014: LD_INT 20
5016: PPUSH
5017: LD_VAR 0 7
5021: PPUSH
5022: CALL_OW 321
5026: PUSH
5027: LD_INT 1
5029: EQUAL
5030: AND
5031: IFFALSE 5048
// SetTech ( tech_SibDet , side , state_researched ) ;
5033: LD_INT 20
5035: PPUSH
5036: LD_VAR 0 7
5040: PPUSH
5041: LD_INT 2
5043: PPUSH
5044: CALL_OW 322
// if not mpArtifacts then
5048: LD_EXP 45
5052: NOT
5053: IFFALSE 5070
// SetTech ( tech_artifact , side , state_disabled ) ;
5055: LD_INT 24
5057: PPUSH
5058: LD_VAR 0 7
5062: PPUSH
5063: LD_INT 0
5065: PPUSH
5066: CALL_OW 322
// if mpSibBomb = 1 then
5070: LD_EXP 28
5074: PUSH
5075: LD_INT 1
5077: EQUAL
5078: IFFALSE 5097
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
5080: LD_INT 25
5082: PPUSH
5083: LD_VAR 0 7
5087: PPUSH
5088: LD_INT 1
5090: PPUSH
5091: CALL_OW 322
// end else
5095: GO 5112
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
5097: LD_INT 25
5099: PPUSH
5100: LD_VAR 0 7
5104: PPUSH
5105: LD_INT 0
5107: PPUSH
5108: CALL_OW 322
// end ; if mpVehicles then
5112: LD_EXP 36
5116: IFFALSE 5215
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
5118: LD_ADDR_VAR 0 3
5122: PUSH
5123: LD_VAR 0 7
5127: PPUSH
5128: LD_VAR 0 9
5132: PPUSH
5133: LD_EXP 36
5137: PPUSH
5138: CALL 6474 0 3
5142: PUSH
5143: FOR_IN
5144: IFFALSE 5213
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
5146: LD_VAR 0 3
5150: PPUSH
5151: LD_INT 0
5153: PPUSH
5154: LD_INT 5
5156: PPUSH
5157: CALL_OW 12
5161: PPUSH
5162: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5166: LD_VAR 0 3
5170: PPUSH
5171: LD_EXP 21
5175: PUSH
5176: LD_VAR 0 8
5180: ARRAY
5181: PUSH
5182: LD_INT 1
5184: ARRAY
5185: PPUSH
5186: LD_EXP 21
5190: PUSH
5191: LD_VAR 0 8
5195: ARRAY
5196: PUSH
5197: LD_INT 2
5199: ARRAY
5200: PPUSH
5201: LD_INT 12
5203: PPUSH
5204: LD_INT 0
5206: PPUSH
5207: CALL_OW 50
// end ;
5211: GO 5143
5213: POP
5214: POP
// end ; uc_nation := nation ;
5215: LD_ADDR_OWVAR 21
5219: PUSH
5220: LD_VAR 0 9
5224: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
5225: LD_EXP 3
5229: PUSH
5230: LD_INT 6
5232: PUSH
5233: LD_INT 7
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: IN
5240: IFFALSE 5265
5242: PUSH
5243: LD_EXP 7
5247: PUSH
5248: LD_VAR 0 2
5252: ARRAY
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: LD_INT 2
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: IN
5264: AND
5265: IFFALSE 5313
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
5267: LD_ADDR_VAR 0 11
5271: PUSH
5272: LD_VAR 0 7
5276: PPUSH
5277: LD_VAR 0 9
5281: PPUSH
5282: LD_EXP 24
5286: PUSH
5287: LD_EXP 24
5291: PUSH
5292: LD_INT 2
5294: DIV
5295: PLUS
5296: PPUSH
5297: LD_EXP 25
5301: PUSH
5302: LD_INT 1
5304: PLUS
5305: PPUSH
5306: CALL 5929 0 4
5310: ST_TO_ADDR
5311: GO 5343
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
5313: LD_ADDR_VAR 0 11
5317: PUSH
5318: LD_VAR 0 7
5322: PPUSH
5323: LD_VAR 0 9
5327: PPUSH
5328: LD_EXP 24
5332: PPUSH
5333: LD_EXP 25
5337: PPUSH
5338: CALL 5929 0 4
5342: ST_TO_ADDR
// for j in team do
5343: LD_ADDR_VAR 0 3
5347: PUSH
5348: LD_VAR 0 11
5352: PUSH
5353: FOR_IN
5354: IFFALSE 5403
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5356: LD_VAR 0 3
5360: PPUSH
5361: LD_EXP 21
5365: PUSH
5366: LD_VAR 0 8
5370: ARRAY
5371: PUSH
5372: LD_INT 1
5374: ARRAY
5375: PPUSH
5376: LD_EXP 21
5380: PUSH
5381: LD_VAR 0 8
5385: ARRAY
5386: PUSH
5387: LD_INT 2
5389: ARRAY
5390: PPUSH
5391: LD_INT 12
5393: PPUSH
5394: LD_INT 0
5396: PPUSH
5397: CALL_OW 50
5401: GO 5353
5403: POP
5404: POP
// if mpApemans then
5405: LD_EXP 30
5409: IFFALSE 5515
// begin for j := 1 to mpApemans do
5411: LD_ADDR_VAR 0 3
5415: PUSH
5416: DOUBLE
5417: LD_INT 1
5419: DEC
5420: ST_TO_ADDR
5421: LD_EXP 30
5425: PUSH
5426: FOR_TO
5427: IFFALSE 5513
// begin PrepareApeman ( - 5 ) ;
5429: LD_INT 5
5431: NEG
5432: PPUSH
5433: CALL 47855 0 1
// ape := CreateHuman ;
5437: LD_ADDR_VAR 0 10
5441: PUSH
5442: CALL_OW 44
5446: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
5447: LD_ADDR_EXP 32
5451: PUSH
5452: LD_EXP 32
5456: PPUSH
5457: LD_VAR 0 8
5461: PPUSH
5462: LD_EXP 32
5466: PUSH
5467: LD_VAR 0 8
5471: ARRAY
5472: PPUSH
5473: LD_VAR 0 10
5477: PPUSH
5478: CALL 51728 0 2
5482: PPUSH
5483: CALL_OW 1
5487: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
5488: LD_VAR 0 10
5492: PPUSH
5493: LD_EXP 31
5497: PUSH
5498: LD_VAR 0 8
5502: ARRAY
5503: PPUSH
5504: LD_INT 0
5506: PPUSH
5507: CALL_OW 49
// end ;
5511: GO 5426
5513: POP
5514: POP
// end ; end ;
5515: GO 4057
5517: POP
5518: POP
// if not mpTeamGame then
5519: LD_EXP 11
5523: NOT
5524: IFFALSE 5622
// begin for i := 1 to 8 do
5526: LD_ADDR_VAR 0 2
5530: PUSH
5531: DOUBLE
5532: LD_INT 1
5534: DEC
5535: ST_TO_ADDR
5536: LD_INT 8
5538: PUSH
5539: FOR_TO
5540: IFFALSE 5618
// for j := 1 to 8 do
5542: LD_ADDR_VAR 0 3
5546: PUSH
5547: DOUBLE
5548: LD_INT 1
5550: DEC
5551: ST_TO_ADDR
5552: LD_INT 8
5554: PUSH
5555: FOR_TO
5556: IFFALSE 5614
// if i <> j then
5558: LD_VAR 0 2
5562: PUSH
5563: LD_VAR 0 3
5567: NONEQUAL
5568: IFFALSE 5592
// SetAttitude ( i , j , att_neutral , true ) else
5570: LD_VAR 0 2
5574: PPUSH
5575: LD_VAR 0 3
5579: PPUSH
5580: LD_INT 0
5582: PPUSH
5583: LD_INT 1
5585: PPUSH
5586: CALL_OW 80
5590: GO 5612
// SetAttitude ( i , j , att_friend , true ) ;
5592: LD_VAR 0 2
5596: PPUSH
5597: LD_VAR 0 3
5601: PPUSH
5602: LD_INT 1
5604: PPUSH
5605: LD_INT 1
5607: PPUSH
5608: CALL_OW 80
5612: GO 5555
5614: POP
5615: POP
5616: GO 5539
5618: POP
5619: POP
// end else
5620: GO 5797
// begin if mpSharedVision then
5622: LD_EXP 16
5626: IFFALSE 5691
// begin for i in mpTeams do
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: LD_EXP 10
5637: PUSH
5638: FOR_IN
5639: IFFALSE 5689
// for j := 2 to i do
5641: LD_ADDR_VAR 0 3
5645: PUSH
5646: DOUBLE
5647: LD_INT 2
5649: DEC
5650: ST_TO_ADDR
5651: LD_VAR 0 2
5655: PUSH
5656: FOR_TO
5657: IFFALSE 5685
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5659: LD_VAR 0 2
5663: PUSH
5664: LD_VAR 0 3
5668: ARRAY
5669: PPUSH
5670: LD_VAR 0 2
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: CALL_OW 343
5683: GO 5656
5685: POP
5686: POP
5687: GO 5638
5689: POP
5690: POP
// end ; for i := 1 to 8 do
5691: LD_ADDR_VAR 0 2
5695: PUSH
5696: DOUBLE
5697: LD_INT 1
5699: DEC
5700: ST_TO_ADDR
5701: LD_INT 8
5703: PUSH
5704: FOR_TO
5705: IFFALSE 5795
// for j := 1 to 8 do
5707: LD_ADDR_VAR 0 3
5711: PUSH
5712: DOUBLE
5713: LD_INT 1
5715: DEC
5716: ST_TO_ADDR
5717: LD_INT 8
5719: PUSH
5720: FOR_TO
5721: IFFALSE 5791
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5723: LD_EXP 8
5727: PUSH
5728: LD_VAR 0 2
5732: ARRAY
5733: PUSH
5734: LD_EXP 8
5738: PUSH
5739: LD_VAR 0 3
5743: ARRAY
5744: EQUAL
5745: IFFALSE 5769
// SetAttitude ( i , j , att_friend , true ) else
5747: LD_VAR 0 2
5751: PPUSH
5752: LD_VAR 0 3
5756: PPUSH
5757: LD_INT 1
5759: PPUSH
5760: LD_INT 1
5762: PPUSH
5763: CALL_OW 80
5767: GO 5789
// SetAttitude ( i , j , att_enemy , true ) ;
5769: LD_VAR 0 2
5773: PPUSH
5774: LD_VAR 0 3
5778: PPUSH
5779: LD_INT 2
5781: PPUSH
5782: LD_INT 1
5784: PPUSH
5785: CALL_OW 80
5789: GO 5720
5791: POP
5792: POP
5793: GO 5704
5795: POP
5796: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5797: LD_ADDR_OWVAR 71
5801: PUSH
5802: LD_EXP 9
5806: PUSH
5807: LD_OWVAR 2
5811: ARRAY
5812: ST_TO_ADDR
// if IAmSpec then
5813: CALL_OW 531
5817: IFFALSE 5858
// begin FogOff ( true ) ;
5819: LD_INT 1
5821: PPUSH
5822: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5826: LD_EXP 29
5830: PUSH
5831: LD_INT 1
5833: ARRAY
5834: PUSH
5835: LD_INT 2
5837: DIV
5838: PPUSH
5839: LD_EXP 29
5843: PUSH
5844: LD_INT 2
5846: ARRAY
5847: PUSH
5848: LD_INT 2
5850: DIV
5851: PPUSH
5852: CALL_OW 86
// end else
5856: GO 5904
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5858: LD_EXP 21
5862: PUSH
5863: LD_EXP 7
5867: PUSH
5868: LD_OWVAR 2
5872: ARRAY
5873: ARRAY
5874: PUSH
5875: LD_INT 1
5877: ARRAY
5878: PPUSH
5879: LD_EXP 21
5883: PUSH
5884: LD_EXP 7
5888: PUSH
5889: LD_OWVAR 2
5893: ARRAY
5894: ARRAY
5895: PUSH
5896: LD_INT 2
5898: ARRAY
5899: PPUSH
5900: CALL_OW 86
// end ; BeginBuildUp ;
5904: CALL 7007 0 0
// enable ( mpActive ) ;
5908: LD_INT 100
5910: ENABLE_MARKED
// enable ( mpGameType ) ;
5911: LD_EXP 3
5915: ENABLE_MARKED
// mpGameActive := true ;
5916: LD_ADDR_EXP 39
5920: PUSH
5921: LD_INT 1
5923: ST_TO_ADDR
// end ;
5924: LD_VAR 0 1
5928: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
5929: LD_INT 0
5931: PPUSH
5932: PPUSH
5933: PPUSH
5934: PPUSH
5935: PPUSH
// result := [ ] ;
5936: LD_ADDR_VAR 0 5
5940: PUSH
5941: EMPTY
5942: ST_TO_ADDR
// class := class_soldier ;
5943: LD_ADDR_VAR 0 8
5947: PUSH
5948: LD_INT 1
5950: ST_TO_ADDR
// uc_side := side ;
5951: LD_ADDR_OWVAR 20
5955: PUSH
5956: LD_VAR 0 1
5960: ST_TO_ADDR
// uc_nation := nation ;
5961: LD_ADDR_OWVAR 21
5965: PUSH
5966: LD_VAR 0 2
5970: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5971: LD_ADDR_OWVAR 26
5975: PUSH
5976: LD_OWVAR 19
5980: PUSH
5981: LD_VAR 0 1
5985: ARRAY
5986: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5987: LD_INT 1
5989: PPUSH
5990: LD_INT 2
5992: PPUSH
5993: CALL_OW 12
5997: PPUSH
5998: LD_VAR 0 8
6002: PPUSH
6003: LD_VAR 0 4
6007: PUSH
6008: LD_INT 2
6010: PLUS
6011: PPUSH
6012: CALL_OW 380
// hc_importance := 105 ;
6016: LD_ADDR_OWVAR 32
6020: PUSH
6021: LD_INT 105
6023: ST_TO_ADDR
// if Multiplayer then
6024: LD_OWVAR 4
6028: IFFALSE 6068
// begin hc_gallery := MULTIAVATARS ;
6030: LD_ADDR_OWVAR 33
6034: PUSH
6035: LD_STRING MULTIAVATARS
6037: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
6038: LD_ADDR_OWVAR 34
6042: PUSH
6043: LD_VAR 0 1
6047: PPUSH
6048: CALL_OW 525
6052: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
6053: LD_ADDR_OWVAR 27
6057: PUSH
6058: LD_VAR 0 1
6062: PPUSH
6063: CALL_OW 526
6067: ST_TO_ADDR
// end ; commander := CreateHuman ;
6068: LD_ADDR_VAR 0 9
6072: PUSH
6073: CALL_OW 44
6077: ST_TO_ADDR
// result := Join ( result , commander ) ;
6078: LD_ADDR_VAR 0 5
6082: PUSH
6083: LD_VAR 0 5
6087: PPUSH
6088: LD_VAR 0 9
6092: PPUSH
6093: CALL 51728 0 2
6097: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
6098: LD_ADDR_EXP 41
6102: PUSH
6103: LD_EXP 41
6107: PPUSH
6108: LD_VAR 0 1
6112: PPUSH
6113: LD_VAR 0 9
6117: PPUSH
6118: CALL_OW 1
6122: ST_TO_ADDR
// if mpTeamPreset then
6123: LD_LOC 1
6127: IFFALSE 6223
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
6129: LD_LOC 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: LD_VAR 0 5
6142: PUSH
6143: LD_VAR 0 5
6147: ARRAY
6148: PPUSH
6149: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
6153: LD_VAR 0 5
6157: PUSH
6158: LD_VAR 0 5
6162: ARRAY
6163: PPUSH
6164: LD_INT 1
6166: PPUSH
6167: LD_LOC 1
6171: PUSH
6172: LD_INT 1
6174: ARRAY
6175: PPUSH
6176: LD_INT 1
6178: PPUSH
6179: CALL_OW 260
6183: PPUSH
6184: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
6188: LD_VAR 0 5
6192: PUSH
6193: LD_VAR 0 5
6197: ARRAY
6198: PPUSH
6199: LD_INT 2
6201: PPUSH
6202: LD_LOC 1
6206: PUSH
6207: LD_INT 1
6209: ARRAY
6210: PPUSH
6211: LD_INT 2
6213: PPUSH
6214: CALL_OW 260
6218: PPUSH
6219: CALL_OW 239
// end ; InitHc_All ( ) ;
6223: CALL_OW 584
// class := 2 ;
6227: LD_ADDR_VAR 0 8
6231: PUSH
6232: LD_INT 2
6234: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
6235: LD_ADDR_VAR 0 6
6239: PUSH
6240: DOUBLE
6241: LD_INT 1
6243: DEC
6244: ST_TO_ADDR
6245: LD_VAR 0 3
6249: PUSH
6250: LD_INT 1
6252: MINUS
6253: PUSH
6254: FOR_TO
6255: IFFALSE 6450
// begin PrepareHuman ( false , class , skill ) ;
6257: LD_INT 0
6259: PPUSH
6260: LD_VAR 0 8
6264: PPUSH
6265: LD_VAR 0 4
6269: PPUSH
6270: CALL_OW 380
// un := CreateHuman ;
6274: LD_ADDR_VAR 0 7
6278: PUSH
6279: CALL_OW 44
6283: ST_TO_ADDR
// result := Join ( result , un ) ;
6284: LD_ADDR_VAR 0 5
6288: PUSH
6289: LD_VAR 0 5
6293: PPUSH
6294: LD_VAR 0 7
6298: PPUSH
6299: CALL 51728 0 2
6303: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
6304: LD_LOC 1
6308: PPUSH
6309: CALL 15752 0 1
6313: PUSH
6314: LD_VAR 0 3
6318: GREATEREQUAL
6319: IFFALSE 6415
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
6321: LD_LOC 1
6325: PUSH
6326: LD_VAR 0 6
6330: PUSH
6331: LD_INT 1
6333: PLUS
6334: ARRAY
6335: PPUSH
6336: LD_VAR 0 7
6340: PPUSH
6341: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
6345: LD_VAR 0 7
6349: PPUSH
6350: LD_INT 1
6352: PPUSH
6353: LD_LOC 1
6357: PUSH
6358: LD_VAR 0 6
6362: PUSH
6363: LD_INT 1
6365: PLUS
6366: ARRAY
6367: PPUSH
6368: LD_INT 1
6370: PPUSH
6371: CALL_OW 260
6375: PPUSH
6376: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
6380: LD_VAR 0 7
6384: PPUSH
6385: LD_INT 2
6387: PPUSH
6388: LD_LOC 1
6392: PUSH
6393: LD_VAR 0 6
6397: PUSH
6398: LD_INT 1
6400: PLUS
6401: ARRAY
6402: PPUSH
6403: LD_INT 2
6405: PPUSH
6406: CALL_OW 260
6410: PPUSH
6411: CALL_OW 239
// end ; class := Inc ( class ) ;
6415: LD_ADDR_VAR 0 8
6419: PUSH
6420: LD_VAR 0 8
6424: PPUSH
6425: CALL 53101 0 1
6429: ST_TO_ADDR
// if class = 5 then
6430: LD_VAR 0 8
6434: PUSH
6435: LD_INT 5
6437: EQUAL
6438: IFFALSE 6448
// class := 1 ;
6440: LD_ADDR_VAR 0 8
6444: PUSH
6445: LD_INT 1
6447: ST_TO_ADDR
// end ;
6448: GO 6254
6450: POP
6451: POP
// if not mpTeamPreset then
6452: LD_LOC 1
6456: NOT
6457: IFFALSE 6469
// mpTeamPreset := result ;
6459: LD_ADDR_LOC 1
6463: PUSH
6464: LD_VAR 0 5
6468: ST_TO_ADDR
// end ;
6469: LD_VAR 0 5
6473: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
6474: LD_INT 0
6476: PPUSH
6477: PPUSH
// result := [ ] ;
6478: LD_ADDR_VAR 0 4
6482: PUSH
6483: EMPTY
6484: ST_TO_ADDR
// if not vehicles then
6485: LD_VAR 0 3
6489: NOT
6490: IFFALSE 6494
// exit ;
6492: GO 6708
// for i := 1 to vehicles [ nation ] do
6494: LD_ADDR_VAR 0 5
6498: PUSH
6499: DOUBLE
6500: LD_INT 1
6502: DEC
6503: ST_TO_ADDR
6504: LD_VAR 0 3
6508: PUSH
6509: LD_VAR 0 2
6513: ARRAY
6514: PUSH
6515: FOR_TO
6516: IFFALSE 6706
// begin uc_side := side ;
6518: LD_ADDR_OWVAR 20
6522: PUSH
6523: LD_VAR 0 1
6527: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6528: LD_VAR 0 3
6532: PUSH
6533: LD_VAR 0 2
6537: ARRAY
6538: PUSH
6539: LD_VAR 0 5
6543: ARRAY
6544: PPUSH
6545: CALL 15752 0 1
6549: PUSH
6550: LD_INT 4
6552: GREATER
6553: IFFALSE 6583
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6555: LD_ADDR_OWVAR 21
6559: PUSH
6560: LD_VAR 0 3
6564: PUSH
6565: LD_VAR 0 2
6569: ARRAY
6570: PUSH
6571: LD_VAR 0 5
6575: ARRAY
6576: PUSH
6577: LD_INT 5
6579: ARRAY
6580: ST_TO_ADDR
6581: GO 6593
// uc_nation := nation ;
6583: LD_ADDR_OWVAR 21
6587: PUSH
6588: LD_VAR 0 2
6592: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6593: LD_VAR 0 3
6597: PUSH
6598: LD_VAR 0 2
6602: ARRAY
6603: PUSH
6604: LD_VAR 0 5
6608: ARRAY
6609: PUSH
6610: LD_INT 1
6612: ARRAY
6613: PPUSH
6614: LD_VAR 0 3
6618: PUSH
6619: LD_VAR 0 2
6623: ARRAY
6624: PUSH
6625: LD_VAR 0 5
6629: ARRAY
6630: PUSH
6631: LD_INT 2
6633: ARRAY
6634: PPUSH
6635: LD_VAR 0 3
6639: PUSH
6640: LD_VAR 0 2
6644: ARRAY
6645: PUSH
6646: LD_VAR 0 5
6650: ARRAY
6651: PUSH
6652: LD_INT 3
6654: ARRAY
6655: PPUSH
6656: LD_VAR 0 3
6660: PUSH
6661: LD_VAR 0 2
6665: ARRAY
6666: PUSH
6667: LD_VAR 0 5
6671: ARRAY
6672: PUSH
6673: LD_INT 4
6675: ARRAY
6676: PPUSH
6677: LD_INT 80
6679: PPUSH
6680: CALL 18548 0 5
// result := Join ( result , CreateVehicle ) ;
6684: LD_ADDR_VAR 0 4
6688: PUSH
6689: LD_VAR 0 4
6693: PPUSH
6694: CALL_OW 45
6698: PPUSH
6699: CALL 51728 0 2
6703: ST_TO_ADDR
// end ;
6704: GO 6515
6706: POP
6707: POP
// end ;
6708: LD_VAR 0 4
6712: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6713: LD_INT 0
6715: PPUSH
6716: PPUSH
// for i in mpBattleFlags do
6717: LD_ADDR_VAR 0 3
6721: PUSH
6722: LD_EXP 23
6726: PUSH
6727: FOR_IN
6728: IFFALSE 6805
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6730: LD_VAR 0 3
6734: PPUSH
6735: LD_INT 1
6737: PUSH
6738: LD_VAR 0 1
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: LD_INT 2
6749: PUSH
6750: LD_VAR 0 1
6754: PUSH
6755: LD_REAL  7.00000000000000E-0001
6758: MUL
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: PUSH
6764: LD_INT 3
6766: PUSH
6767: LD_VAR 0 1
6771: PUSH
6772: LD_REAL  4.00000000000000E-0001
6775: MUL
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 20
6783: PUSH
6784: LD_VAR 0 1
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: PPUSH
6799: CALL_OW 423
6803: GO 6727
6805: POP
6806: POP
// end ;
6807: LD_VAR 0 2
6811: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6812: LD_INT 100
6814: IFFALSE 6909
6816: GO 6818
6818: DISABLE
6819: LD_INT 0
6821: PPUSH
6822: PPUSH
// begin if mpBattleFlag <= 0 then
6823: LD_EXP 22
6827: PUSH
6828: LD_INT 0
6830: LESSEQUAL
6831: IFFALSE 6835
// exit ;
6833: GO 6909
// strength := 100 ;
6835: LD_ADDR_VAR 0 2
6839: PUSH
6840: LD_INT 100
6842: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6843: LD_EXP 22
6847: PPUSH
6848: CALL_OW 67
// strength := Dec ( strength ) ;
6852: LD_ADDR_VAR 0 2
6856: PUSH
6857: LD_VAR 0 2
6861: PPUSH
6862: CALL 53123 0 1
6866: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6867: LD_VAR 0 2
6871: PPUSH
6872: CALL 6713 0 1
// until not strength ;
6876: LD_VAR 0 2
6880: NOT
6881: IFFALSE 6843
// for i in mpBattleFlags do
6883: LD_ADDR_VAR 0 1
6887: PUSH
6888: LD_EXP 23
6892: PUSH
6893: FOR_IN
6894: IFFALSE 6907
// KillBattleFlag ( i ) ;
6896: LD_VAR 0 1
6900: PPUSH
6901: CALL_OW 419
6905: GO 6893
6907: POP
6908: POP
// end ;
6909: PPOPN 2
6911: END
// every 0 0$1 marked mpActive do var side , tmp ;
6912: GO 6914
6914: DISABLE
6915: LD_INT 0
6917: PPUSH
6918: PPUSH
// begin if mpSibBomb <= 1 then
6919: LD_EXP 28
6923: PUSH
6924: LD_INT 1
6926: LESSEQUAL
6927: IFFALSE 6931
// exit ;
6929: GO 7004
// tmp := mpSibBomb ;
6931: LD_ADDR_VAR 0 2
6935: PUSH
6936: LD_EXP 28
6940: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6941: LD_INT 35
6943: PPUSH
6944: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6948: LD_ADDR_VAR 0 2
6952: PUSH
6953: LD_VAR 0 2
6957: PUSH
6958: LD_INT 35
6960: MINUS
6961: ST_TO_ADDR
// until not tmp ;
6962: LD_VAR 0 2
6966: NOT
6967: IFFALSE 6941
// for side := 1 to 8 do
6969: LD_ADDR_VAR 0 1
6973: PUSH
6974: DOUBLE
6975: LD_INT 1
6977: DEC
6978: ST_TO_ADDR
6979: LD_INT 8
6981: PUSH
6982: FOR_TO
6983: IFFALSE 7002
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6985: LD_INT 25
6987: PPUSH
6988: LD_VAR 0 1
6992: PPUSH
6993: LD_INT 1
6995: PPUSH
6996: CALL_OW 322
7000: GO 6982
7002: POP
7003: POP
// end ;
7004: PPOPN 2
7006: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
7007: LD_INT 0
7009: PPUSH
7010: PPUSH
7011: PPUSH
// mpBuildUpTimeDelay := 0 ;
7012: LD_ADDR_EXP 48
7016: PUSH
7017: LD_INT 0
7019: ST_TO_ADDR
// if not mpBuildUpTime then
7020: LD_EXP 20
7024: NOT
7025: IFFALSE 7029
// exit ;
7027: GO 7218
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
7029: LD_ADDR_EXP 48
7033: PUSH
7034: LD_INT 8400
7036: PUSH
7037: LD_INT 2100
7039: PUSH
7040: LD_EXP 20
7044: MUL
7045: PLUS
7046: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
7047: LD_ADDR_EXP 49
7051: PUSH
7052: LD_INT 1
7054: ST_TO_ADDR
// for i := 1 to 8 do
7055: LD_ADDR_VAR 0 2
7059: PUSH
7060: DOUBLE
7061: LD_INT 1
7063: DEC
7064: ST_TO_ADDR
7065: LD_INT 8
7067: PUSH
7068: FOR_TO
7069: IFFALSE 7216
// if mpSidePositions [ i ] then
7071: LD_EXP 7
7075: PUSH
7076: LD_VAR 0 2
7080: ARRAY
7081: IFFALSE 7214
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
7083: LD_EXP 19
7087: PUSH
7088: LD_EXP 7
7092: PUSH
7093: LD_VAR 0 2
7097: ARRAY
7098: ARRAY
7099: PPUSH
7100: LD_INT 5
7102: PPUSH
7103: CALL_OW 424
// for j := 1 to 8 do
7107: LD_ADDR_VAR 0 3
7111: PUSH
7112: DOUBLE
7113: LD_INT 1
7115: DEC
7116: ST_TO_ADDR
7117: LD_INT 8
7119: PUSH
7120: FOR_TO
7121: IFFALSE 7212
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
7123: LD_EXP 7
7127: PUSH
7128: LD_VAR 0 3
7132: ARRAY
7133: IFFALSE 7182
7135: PUSH
7136: LD_EXP 8
7140: PUSH
7141: LD_VAR 0 2
7145: ARRAY
7146: PUSH
7147: LD_EXP 8
7151: PUSH
7152: LD_VAR 0 3
7156: ARRAY
7157: NONEQUAL
7158: IFTRUE 7181
7160: PUSH
7161: LD_EXP 11
7165: NOT
7166: IFFALSE 7180
7168: PUSH
7169: LD_VAR 0 2
7173: PUSH
7174: LD_VAR 0 3
7178: NONEQUAL
7179: AND
7180: OR
7181: AND
7182: IFFALSE 7210
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
7184: LD_VAR 0 3
7188: PPUSH
7189: LD_EXP 19
7193: PUSH
7194: LD_EXP 7
7198: PUSH
7199: LD_VAR 0 2
7203: ARRAY
7204: ARRAY
7205: PPUSH
7206: CALL_OW 333
7210: GO 7120
7212: POP
7213: POP
// end ;
7214: GO 7068
7216: POP
7217: POP
// end ;
7218: LD_VAR 0 1
7222: RET
// function EndBuildUp ; var i , j ; begin
7223: LD_INT 0
7225: PPUSH
7226: PPUSH
7227: PPUSH
// mpBuildUpTimeActive := false ;
7228: LD_ADDR_EXP 49
7232: PUSH
7233: LD_INT 0
7235: ST_TO_ADDR
// for i := 1 to 8 do
7236: LD_ADDR_VAR 0 2
7240: PUSH
7241: DOUBLE
7242: LD_INT 1
7244: DEC
7245: ST_TO_ADDR
7246: LD_INT 8
7248: PUSH
7249: FOR_TO
7250: IFFALSE 7397
// if mpSidePositions [ i ] then
7252: LD_EXP 7
7256: PUSH
7257: LD_VAR 0 2
7261: ARRAY
7262: IFFALSE 7395
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
7264: LD_EXP 19
7268: PUSH
7269: LD_EXP 7
7273: PUSH
7274: LD_VAR 0 2
7278: ARRAY
7279: ARRAY
7280: PPUSH
7281: LD_INT 0
7283: PPUSH
7284: CALL_OW 424
// for j := 1 to 8 do
7288: LD_ADDR_VAR 0 3
7292: PUSH
7293: DOUBLE
7294: LD_INT 1
7296: DEC
7297: ST_TO_ADDR
7298: LD_INT 8
7300: PUSH
7301: FOR_TO
7302: IFFALSE 7393
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
7304: LD_EXP 7
7308: PUSH
7309: LD_VAR 0 3
7313: ARRAY
7314: IFFALSE 7363
7316: PUSH
7317: LD_EXP 8
7321: PUSH
7322: LD_VAR 0 2
7326: ARRAY
7327: PUSH
7328: LD_EXP 8
7332: PUSH
7333: LD_VAR 0 3
7337: ARRAY
7338: NONEQUAL
7339: IFTRUE 7362
7341: PUSH
7342: LD_EXP 11
7346: NOT
7347: IFFALSE 7361
7349: PUSH
7350: LD_VAR 0 2
7354: PUSH
7355: LD_VAR 0 3
7359: NONEQUAL
7360: AND
7361: OR
7362: AND
7363: IFFALSE 7391
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
7365: LD_VAR 0 3
7369: PPUSH
7370: LD_EXP 19
7374: PUSH
7375: LD_EXP 7
7379: PUSH
7380: LD_VAR 0 2
7384: ARRAY
7385: ARRAY
7386: PPUSH
7387: CALL_OW 334
7391: GO 7301
7393: POP
7394: POP
// end ;
7395: GO 7249
7397: POP
7398: POP
// end ;
7399: LD_VAR 0 1
7403: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
7404: LD_EXP 49
7408: IFFALSE 7587
7410: GO 7412
7412: DISABLE
7413: LD_INT 0
7415: PPUSH
7416: PPUSH
// begin for i := 1 to 8 do
7417: LD_ADDR_VAR 0 1
7421: PUSH
7422: DOUBLE
7423: LD_INT 1
7425: DEC
7426: ST_TO_ADDR
7427: LD_INT 8
7429: PUSH
7430: FOR_TO
7431: IFFALSE 7584
// if mpSidePositions [ i ] then
7433: LD_EXP 7
7437: PUSH
7438: LD_VAR 0 1
7442: ARRAY
7443: IFFALSE 7582
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
7445: LD_ADDR_VAR 0 2
7449: PUSH
7450: LD_EXP 19
7454: PUSH
7455: LD_EXP 7
7459: PUSH
7460: LD_VAR 0 1
7464: ARRAY
7465: ARRAY
7466: PPUSH
7467: LD_INT 2
7469: PUSH
7470: LD_INT 21
7472: PUSH
7473: LD_INT 1
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 21
7482: PUSH
7483: LD_INT 2
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 22
7497: PUSH
7498: LD_OWVAR 2
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PPUSH
7511: CALL_OW 70
7515: PUSH
7516: FOR_IN
7517: IFFALSE 7580
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7519: LD_EXP 8
7523: PUSH
7524: LD_VAR 0 1
7528: ARRAY
7529: PUSH
7530: LD_EXP 8
7534: PUSH
7535: LD_OWVAR 2
7539: ARRAY
7540: NONEQUAL
7541: IFTRUE 7564
7543: PUSH
7544: LD_EXP 11
7548: NOT
7549: IFFALSE 7563
7551: PUSH
7552: LD_VAR 0 1
7556: PUSH
7557: LD_OWVAR 2
7561: NONEQUAL
7562: AND
7563: OR
7564: IFFALSE 7578
// ComMoveToArea ( un , BuildUpEscape ) ;
7566: LD_VAR 0 2
7570: PPUSH
7571: LD_INT 9
7573: PPUSH
7574: CALL_OW 113
7578: GO 7516
7580: POP
7581: POP
7582: GO 7430
7584: POP
7585: POP
// enable ;
7586: ENABLE
// end ;
7587: PPOPN 2
7589: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7590: LD_EXP 20
7594: IFFALSE 7644
7596: GO 7598
7598: DISABLE
7599: LD_INT 0
7601: PPUSH
// begin tmp := mpBuildUpTime ;
7602: LD_ADDR_VAR 0 1
7606: PUSH
7607: LD_EXP 20
7611: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7612: LD_INT 35
7614: PPUSH
7615: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7619: LD_ADDR_VAR 0 1
7623: PUSH
7624: LD_VAR 0 1
7628: PUSH
7629: LD_INT 35
7631: MINUS
7632: ST_TO_ADDR
// until not tmp ;
7633: LD_VAR 0 1
7637: NOT
7638: IFFALSE 7612
// EndBuildUp ;
7640: CALL 7223 0 0
// end ;
7644: PPOPN 1
7646: END
// every 0 0$1 trigger mpActive marked mpWin do
7647: LD_INT 100
7649: IFFALSE 7683
7651: GO 7653
7653: DISABLE
// begin if IAmServer then
7654: CALL_OW 518
7658: IFFALSE 7667
// wait ( 0 0$3 ) ;
7660: LD_INT 105
7662: PPUSH
7663: CALL_OW 67
// if Multiplayer then
7667: LD_OWVAR 4
7671: IFFALSE 7679
// YouWinInMultiplayer else
7673: CALL_OW 106
7677: GO 7683
// YouWin ;
7679: CALL_OW 103
// end ;
7683: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7684: LD_INT 0
7686: PPUSH
// result := false ;
7687: LD_ADDR_VAR 0 3
7691: PUSH
7692: LD_INT 0
7694: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7695: LD_VAR 0 1
7699: PUSH
7700: LD_INT 1
7702: DOUBLE
7703: EQUAL
7704: IFTRUE 7726
7706: LD_INT 5
7708: DOUBLE
7709: EQUAL
7710: IFTRUE 7726
7712: LD_INT 6
7714: DOUBLE
7715: EQUAL
7716: IFTRUE 7726
7718: LD_INT 7
7720: DOUBLE
7721: EQUAL
7722: IFTRUE 7726
7724: GO 7799
7726: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7727: LD_ADDR_VAR 0 3
7731: PUSH
7732: LD_INT 22
7734: PUSH
7735: LD_VAR 0 2
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: PUSH
7744: LD_INT 2
7746: PUSH
7747: LD_INT 21
7749: PUSH
7750: LD_INT 1
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: LD_INT 33
7759: PUSH
7760: LD_INT 3
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: LD_INT 33
7769: PUSH
7770: LD_INT 5
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PPUSH
7787: CALL_OW 69
7791: PPUSH
7792: CALL 15752 0 1
7796: ST_TO_ADDR
// end ; GameTypeSurvival :
7797: GO 8195
7799: LD_INT 2
7801: DOUBLE
7802: EQUAL
7803: IFTRUE 7807
7805: GO 7937
7807: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7808: LD_ADDR_VAR 0 3
7812: PUSH
7813: LD_INT 22
7815: PUSH
7816: LD_VAR 0 2
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PUSH
7825: LD_INT 2
7827: PUSH
7828: LD_INT 30
7830: PUSH
7831: LD_INT 0
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 30
7840: PUSH
7841: LD_INT 1
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PPUSH
7857: CALL_OW 69
7861: PPUSH
7862: CALL 15752 0 1
7866: IFFALSE 7934
7868: PUSH
7869: LD_INT 22
7871: PUSH
7872: LD_VAR 0 2
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 2
7883: PUSH
7884: LD_INT 21
7886: PUSH
7887: LD_INT 1
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PUSH
7894: LD_INT 33
7896: PUSH
7897: LD_INT 3
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 33
7906: PUSH
7907: LD_INT 5
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PPUSH
7924: CALL_OW 69
7928: PPUSH
7929: CALL 15752 0 1
7933: AND
7934: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
7935: GO 8195
7937: LD_INT 8
7939: DOUBLE
7940: EQUAL
7941: IFTRUE 7945
7943: GO 8094
7945: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7946: LD_ADDR_VAR 0 3
7950: PUSH
7951: LD_EXP 41
7955: PUSH
7956: LD_VAR 0 2
7960: ARRAY
7961: PPUSH
7962: CALL_OW 300
7966: IFFALSE 8023
7968: PUSH
7969: LD_INT 22
7971: PUSH
7972: LD_VAR 0 2
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 2
7983: PUSH
7984: LD_INT 30
7986: PUSH
7987: LD_INT 0
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PUSH
7994: LD_INT 30
7996: PUSH
7997: LD_INT 1
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: LIST
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PPUSH
8013: CALL_OW 69
8017: PPUSH
8018: CALL 15752 0 1
8022: AND
8023: IFFALSE 8091
8025: PUSH
8026: LD_INT 22
8028: PUSH
8029: LD_VAR 0 2
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: LD_INT 21
8043: PUSH
8044: LD_INT 1
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PUSH
8051: LD_INT 33
8053: PUSH
8054: LD_INT 3
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PUSH
8061: LD_INT 33
8063: PUSH
8064: LD_INT 5
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PPUSH
8081: CALL_OW 69
8085: PPUSH
8086: CALL 15752 0 1
8090: AND
8091: ST_TO_ADDR
// end ; GameTypeKing :
8092: GO 8195
8094: LD_INT 3
8096: DOUBLE
8097: EQUAL
8098: IFTRUE 8102
8100: GO 8194
8102: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
8103: LD_ADDR_VAR 0 3
8107: PUSH
8108: LD_INT 22
8110: PUSH
8111: LD_VAR 0 2
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: PUSH
8120: LD_INT 2
8122: PUSH
8123: LD_INT 21
8125: PUSH
8126: LD_INT 1
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: LD_INT 33
8135: PUSH
8136: LD_INT 3
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PUSH
8143: LD_INT 33
8145: PUSH
8146: LD_INT 5
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PPUSH
8163: CALL_OW 69
8167: PPUSH
8168: CALL 15752 0 1
8172: IFFALSE 8191
8174: PUSH
8175: LD_VAR 0 2
8179: PPUSH
8180: CALL 12868 0 1
8184: PUSH
8185: LD_EXP 35
8189: LESS
8190: AND
8191: ST_TO_ADDR
// end ; end ;
8192: GO 8195
8194: POP
// end ;
8195: LD_VAR 0 3
8199: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
8200: LD_INT 100
8202: IFFALSE 8432
8204: GO 8206
8206: DISABLE
8207: LD_INT 0
8209: PPUSH
8210: PPUSH
// begin if Multiplayer then
8211: LD_OWVAR 4
8215: IFFALSE 8223
// SetPlayerSpectator ( ) else
8217: CALL_OW 572
8221: GO 8232
// FogOff ( your_side ) ;
8223: LD_OWVAR 2
8227: PPUSH
8228: CALL_OW 344
// repeat gameIsOn := false ;
8232: LD_ADDR_VAR 0 1
8236: PUSH
8237: LD_INT 0
8239: ST_TO_ADDR
// for i := 1 to 8 do
8240: LD_ADDR_VAR 0 2
8244: PUSH
8245: DOUBLE
8246: LD_INT 1
8248: DEC
8249: ST_TO_ADDR
8250: LD_INT 8
8252: PUSH
8253: FOR_TO
8254: IFFALSE 8384
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8256: LD_EXP 7
8260: PUSH
8261: LD_VAR 0 2
8265: ARRAY
8266: IFFALSE 8279
8268: PUSH
8269: LD_VAR 0 2
8273: PPUSH
8274: CALL_OW 108
8278: AND
8279: IFFALSE 8293
8281: PUSH
8282: LD_VAR 0 2
8286: PUSH
8287: LD_OWVAR 2
8291: NONEQUAL
8292: AND
8293: IFFALSE 8382
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8295: LD_EXP 8
8299: PUSH
8300: LD_VAR 0 2
8304: ARRAY
8305: NOT
8306: IFTRUE 8354
8308: PUSH
8309: LD_EXP 8
8313: PUSH
8314: LD_VAR 0 2
8318: ARRAY
8319: PUSH
8320: LD_EXP 8
8324: PUSH
8325: LD_OWVAR 2
8329: ARRAY
8330: NONEQUAL
8331: IFFALSE 8353
8333: PUSH
8334: LD_OWVAR 2
8338: PPUSH
8339: LD_VAR 0 2
8343: PPUSH
8344: CALL_OW 81
8348: PUSH
8349: LD_INT 1
8351: NONEQUAL
8352: AND
8353: OR
8354: IFFALSE 8382
// if HasPowerByGameType ( mpGameType , i ) then
8356: LD_EXP 3
8360: PPUSH
8361: LD_VAR 0 2
8365: PPUSH
8366: CALL 7684 0 2
8370: IFFALSE 8382
// begin gameIsOn := true ;
8372: LD_ADDR_VAR 0 1
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// break ;
8380: GO 8384
// end ;
8382: GO 8253
8384: POP
8385: POP
// wait ( 100 ) ;
8386: LD_INT 100
8388: PPUSH
8389: CALL_OW 67
// until not gameIsOn ;
8393: LD_VAR 0 1
8397: NOT
8398: IFFALSE 8232
// if IAmServer then
8400: CALL_OW 518
8404: IFFALSE 8413
// wait ( 0 0$3 ) ;
8406: LD_INT 105
8408: PPUSH
8409: CALL_OW 67
// if Multiplayer then
8413: LD_OWVAR 4
8417: IFFALSE 8425
// YouLostInMultiplayer else
8419: CALL_OW 107
8423: GO 8432
// YouLost (  ) ;
8425: LD_STRING 
8427: PPUSH
8428: CALL_OW 104
// end ;
8432: PPOPN 2
8434: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
8435: LD_EXP 33
8439: IFFALSE 8823
8441: GO 8443
8443: DISABLE
8444: LD_INT 0
8446: PPUSH
8447: PPUSH
8448: PPUSH
8449: PPUSH
8450: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
8451: LD_ADDR_VAR 0 5
8455: PUSH
8456: LD_INT 1
8458: PUSH
8459: LD_INT 2
8461: PUSH
8462: LD_INT 3
8464: PUSH
8465: LD_INT 4
8467: PUSH
8468: LD_INT 5
8470: PUSH
8471: LD_INT 6
8473: PUSH
8474: LD_INT 7
8476: PUSH
8477: LD_INT 8
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
8490: LD_INT 350
8492: PPUSH
8493: CALL_OW 67
// for i := 1 to 8 do
8497: LD_ADDR_VAR 0 1
8501: PUSH
8502: DOUBLE
8503: LD_INT 1
8505: DEC
8506: ST_TO_ADDR
8507: LD_INT 8
8509: PUSH
8510: FOR_TO
8511: IFFALSE 8793
// begin j := sides [ i ] ;
8513: LD_ADDR_VAR 0 2
8517: PUSH
8518: LD_VAR 0 5
8522: PUSH
8523: LD_VAR 0 1
8527: ARRAY
8528: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
8529: LD_EXP 40
8533: PUSH
8534: LD_VAR 0 2
8538: ARRAY
8539: PPUSH
8540: CALL 15752 0 1
8544: IFFALSE 8557
8546: PUSH
8547: LD_VAR 0 2
8551: PPUSH
8552: CALL_OW 108
8556: AND
8557: IFFALSE 8575
8559: PUSH
8560: LD_EXP 3
8564: PPUSH
8565: LD_VAR 0 2
8569: PPUSH
8570: CALL 7684 0 2
8574: AND
8575: IFFALSE 8791
// begin wait ( mpRespawn div 2 ) ;
8577: LD_EXP 33
8581: PUSH
8582: LD_INT 2
8584: DIV
8585: PPUSH
8586: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8590: LD_ADDR_VAR 0 3
8594: PUSH
8595: LD_INT 22
8597: PUSH
8598: LD_VAR 0 2
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PUSH
8607: LD_INT 50
8609: PUSH
8610: EMPTY
8611: LIST
8612: PUSH
8613: LD_INT 2
8615: PUSH
8616: LD_INT 30
8618: PUSH
8619: LD_INT 0
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: PUSH
8626: LD_INT 30
8628: PUSH
8629: LD_INT 1
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: LIST
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: LIST
8645: PPUSH
8646: CALL_OW 69
8650: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8651: LD_VAR 0 3
8655: NOT
8656: IFTRUE 8670
8658: PUSH
8659: LD_VAR 0 2
8663: PPUSH
8664: CALL_OW 108
8668: NOT
8669: OR
8670: IFTRUE 8689
8672: PUSH
8673: LD_EXP 3
8677: PPUSH
8678: LD_VAR 0 2
8682: PPUSH
8683: CALL 7684 0 2
8687: NOT
8688: OR
8689: IFFALSE 8693
// continue ;
8691: GO 8510
// spawn := tmp [ 1 ] ;
8693: LD_ADDR_VAR 0 4
8697: PUSH
8698: LD_VAR 0 3
8702: PUSH
8703: LD_INT 1
8705: ARRAY
8706: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8707: LD_EXP 40
8711: PUSH
8712: LD_VAR 0 2
8716: ARRAY
8717: PUSH
8718: LD_INT 1
8720: ARRAY
8721: PPUSH
8722: LD_VAR 0 4
8726: PPUSH
8727: CALL_OW 250
8731: PPUSH
8732: LD_VAR 0 4
8736: PPUSH
8737: CALL_OW 251
8741: PPUSH
8742: LD_INT 32
8744: PPUSH
8745: LD_INT 1
8747: PPUSH
8748: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8752: LD_ADDR_EXP 40
8756: PUSH
8757: LD_EXP 40
8761: PPUSH
8762: LD_VAR 0 2
8766: PPUSH
8767: LD_EXP 40
8771: PUSH
8772: LD_VAR 0 2
8776: ARRAY
8777: PPUSH
8778: LD_INT 1
8780: PPUSH
8781: CALL_OW 3
8785: PPUSH
8786: CALL_OW 1
8790: ST_TO_ADDR
// end ; end ;
8791: GO 8510
8793: POP
8794: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8795: LD_ADDR_VAR 0 5
8799: PUSH
8800: LD_VAR 0 5
8804: PPUSH
8805: LD_INT 1
8807: PPUSH
8808: LD_INT 8
8810: PPUSH
8811: LD_INT 1
8813: PPUSH
8814: CALL 18078 0 4
8818: ST_TO_ADDR
// until false ;
8819: LD_INT 0
8821: IFFALSE 8490
// end ;
8823: PPOPN 5
8825: END
// every 0 0$1 marked mpActive do
8826: GO 8828
8828: DISABLE
// begin enable ;
8829: ENABLE
// if not mpDisplayStrings then
8830: LD_EXP 38
8834: NOT
8835: IFFALSE 8846
// begin display_strings := [ ] ;
8837: LD_ADDR_OWVAR 47
8841: PUSH
8842: EMPTY
8843: ST_TO_ADDR
// exit ;
8844: GO 8856
// end ; display_strings := mpDisplayStrings ;
8846: LD_ADDR_OWVAR 47
8850: PUSH
8851: LD_EXP 38
8855: ST_TO_ADDR
// end ; end_of_file
8856: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8857: LD_INT 0
8859: PPUSH
8860: PPUSH
8861: PPUSH
8862: PPUSH
8863: PPUSH
8864: PPUSH
8865: PPUSH
8866: PPUSH
8867: PPUSH
// if GetType ( un ) = unit_vehicle then
8868: LD_VAR 0 1
8872: PPUSH
8873: CALL_OW 247
8877: PUSH
8878: LD_INT 2
8880: EQUAL
8881: IFFALSE 8885
// exit ;
8883: GO 9658
// side := GetSide ( un ) ;
8885: LD_ADDR_VAR 0 9
8889: PUSH
8890: LD_VAR 0 1
8894: PPUSH
8895: CALL_OW 255
8899: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
8900: LD_EXP 3
8904: PUSH
8905: LD_INT 2
8907: PUSH
8908: LD_INT 8
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: IN
8915: IFFALSE 9009
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8917: LD_VAR 0 1
8921: PPUSH
8922: CALL_OW 266
8926: PUSH
8927: LD_INT 0
8929: PUSH
8930: LD_INT 1
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: IN
8937: IFFALSE 9009
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8939: LD_ADDR_VAR 0 3
8943: PUSH
8944: LD_INT 22
8946: PUSH
8947: LD_VAR 0 9
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 2
8958: PUSH
8959: LD_INT 21
8961: PUSH
8962: LD_INT 1
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: LD_INT 33
8971: PUSH
8972: LD_INT 3
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 69
8992: PUSH
8993: FOR_IN
8994: IFFALSE 9007
// KillUnit ( i ) ;
8996: LD_VAR 0 3
9000: PPUSH
9001: CALL_OW 66
9005: GO 8993
9007: POP
9008: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
9009: LD_EXP 3
9013: PUSH
9014: LD_INT 8
9016: EQUAL
9017: IFFALSE 9101
// if un in mpCommanders then
9019: LD_VAR 0 1
9023: PUSH
9024: LD_EXP 41
9028: IN
9029: IFFALSE 9101
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
9031: LD_ADDR_VAR 0 3
9035: PUSH
9036: LD_INT 22
9038: PUSH
9039: LD_VAR 0 9
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: PUSH
9048: LD_INT 2
9050: PUSH
9051: LD_INT 21
9053: PUSH
9054: LD_INT 1
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 33
9063: PUSH
9064: LD_INT 3
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: LIST
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PPUSH
9080: CALL_OW 69
9084: PUSH
9085: FOR_IN
9086: IFFALSE 9099
// KillUnit ( i ) ;
9088: LD_VAR 0 3
9092: PPUSH
9093: CALL_OW 66
9097: GO 9085
9099: POP
9100: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
9101: LD_VAR 0 1
9105: PPUSH
9106: CALL_OW 257
9110: PUSH
9111: LD_INT 12
9113: PUSH
9114: LD_INT 17
9116: PUSH
9117: LD_INT 15
9119: PUSH
9120: LD_INT 16
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: IN
9129: IFTRUE 9146
9131: PUSH
9132: LD_VAR 0 1
9136: PPUSH
9137: CALL_OW 263
9141: PUSH
9142: LD_INT 5
9144: EQUAL
9145: OR
9146: IFFALSE 9383
// begin tag := 0 ;
9148: LD_ADDR_VAR 0 5
9152: PUSH
9153: LD_INT 0
9155: ST_TO_ADDR
// for i := 1 to 8 do
9156: LD_ADDR_VAR 0 3
9160: PUSH
9161: DOUBLE
9162: LD_INT 1
9164: DEC
9165: ST_TO_ADDR
9166: LD_INT 8
9168: PUSH
9169: FOR_TO
9170: IFFALSE 9204
// if un in mpApePosIndex [ i ] then
9172: LD_VAR 0 1
9176: PUSH
9177: LD_EXP 32
9181: PUSH
9182: LD_VAR 0 3
9186: ARRAY
9187: IN
9188: IFFALSE 9202
// begin tag := i ;
9190: LD_ADDR_VAR 0 5
9194: PUSH
9195: LD_VAR 0 3
9199: ST_TO_ADDR
// break ;
9200: GO 9204
// end ;
9202: GO 9169
9204: POP
9205: POP
// if not tag then
9206: LD_VAR 0 5
9210: NOT
9211: IFFALSE 9215
// exit ;
9213: GO 9658
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9215: LD_ADDR_VAR 0 7
9219: PUSH
9220: LD_EXP 31
9224: PUSH
9225: LD_EXP 7
9229: PUSH
9230: LD_VAR 0 5
9234: ARRAY
9235: ARRAY
9236: ST_TO_ADDR
// if not area then
9237: LD_VAR 0 7
9241: NOT
9242: IFFALSE 9246
// exit ;
9244: GO 9658
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9246: LD_INT 14700
9248: PUSH
9249: LD_VAR 0 1
9253: PUSH
9254: LD_INT 5
9256: MOD
9257: PUSH
9258: LD_INT 1
9260: PLUS
9261: PUSH
9262: LD_INT 700
9264: MUL
9265: PLUS
9266: PPUSH
9267: CALL_OW 67
// repeat wait ( 10 ) ;
9271: LD_INT 10
9273: PPUSH
9274: CALL_OW 67
// until not mpBlockRespThread ;
9278: LD_EXP 47
9282: NOT
9283: IFFALSE 9271
// mpBlockRespThread := true ;
9285: LD_ADDR_EXP 47
9289: PUSH
9290: LD_INT 1
9292: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9293: LD_INT 0
9295: PPUSH
9296: CALL 47855 0 1
// ape := CreateHuman ;
9300: LD_ADDR_VAR 0 4
9304: PUSH
9305: CALL_OW 44
9309: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9310: LD_ADDR_EXP 32
9314: PUSH
9315: LD_EXP 32
9319: PPUSH
9320: LD_VAR 0 5
9324: PPUSH
9325: LD_EXP 32
9329: PUSH
9330: LD_VAR 0 5
9334: ARRAY
9335: PPUSH
9336: LD_VAR 0 4
9340: PPUSH
9341: CALL 51728 0 2
9345: PPUSH
9346: CALL_OW 1
9350: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9351: LD_VAR 0 4
9355: PPUSH
9356: LD_VAR 0 7
9360: PPUSH
9361: LD_INT 0
9363: PPUSH
9364: CALL_OW 49
// wait ( 10 ) ;
9368: LD_INT 10
9370: PPUSH
9371: CALL_OW 67
// mpBlockRespThread := false ;
9375: LD_ADDR_EXP 47
9379: PUSH
9380: LD_INT 0
9382: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
9383: LD_VAR 0 1
9387: PPUSH
9388: CALL_OW 247
9392: PUSH
9393: LD_INT 1
9395: EQUAL
9396: IFFALSE 9413
9398: PUSH
9399: LD_VAR 0 1
9403: PPUSH
9404: CALL_OW 248
9408: PUSH
9409: LD_INT 0
9411: GREATER
9412: AND
9413: IFFALSE 9658
// begin if not mpRespawn then
9415: LD_EXP 33
9419: NOT
9420: IFFALSE 9424
// exit ;
9422: GO 9658
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
9424: LD_VAR 0 9
9428: PPUSH
9429: CALL_OW 108
9433: NOT
9434: IFFALSE 9453
9436: PUSH
9437: LD_EXP 3
9441: PPUSH
9442: LD_VAR 0 9
9446: PPUSH
9447: CALL 7684 0 2
9451: NOT
9452: AND
9453: IFFALSE 9457
// exit ;
9455: GO 9658
// side := GetSide ( un ) ;
9457: LD_ADDR_VAR 0 9
9461: PUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: CALL_OW 255
9471: ST_TO_ADDR
// nation := GetNation ( un ) ;
9472: LD_ADDR_VAR 0 8
9476: PUSH
9477: LD_VAR 0 1
9481: PPUSH
9482: CALL_OW 248
9486: ST_TO_ADDR
// class := GetClass ( un ) ;
9487: LD_ADDR_VAR 0 6
9491: PUSH
9492: LD_VAR 0 1
9496: PPUSH
9497: CALL_OW 257
9501: ST_TO_ADDR
// if class > 4 then
9502: LD_VAR 0 6
9506: PUSH
9507: LD_INT 4
9509: GREATER
9510: IFFALSE 9520
// class := 1 ;
9512: LD_ADDR_VAR 0 6
9516: PUSH
9517: LD_INT 1
9519: ST_TO_ADDR
// repeat wait ( 10 ) ;
9520: LD_INT 10
9522: PPUSH
9523: CALL_OW 67
// until not mpBlockRespThread ;
9527: LD_EXP 47
9531: NOT
9532: IFFALSE 9520
// mpBlockRespThread := true ;
9534: LD_ADDR_EXP 47
9538: PUSH
9539: LD_INT 1
9541: ST_TO_ADDR
// uc_side := side ;
9542: LD_ADDR_OWVAR 20
9546: PUSH
9547: LD_VAR 0 9
9551: ST_TO_ADDR
// uc_nation := nation ;
9552: LD_ADDR_OWVAR 21
9556: PUSH
9557: LD_VAR 0 8
9561: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
9562: LD_INT 0
9564: PPUSH
9565: LD_VAR 0 6
9569: PPUSH
9570: LD_INT 2
9572: PPUSH
9573: CALL_OW 380
// un := CreateHuman ;
9577: LD_ADDR_VAR 0 1
9581: PUSH
9582: CALL_OW 44
9586: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
9587: LD_ADDR_EXP 40
9591: PUSH
9592: LD_EXP 40
9596: PPUSH
9597: LD_VAR 0 9
9601: PPUSH
9602: LD_EXP 40
9606: PUSH
9607: LD_VAR 0 9
9611: ARRAY
9612: PPUSH
9613: LD_EXP 40
9617: PUSH
9618: LD_VAR 0 9
9622: ARRAY
9623: PUSH
9624: LD_INT 1
9626: PLUS
9627: PPUSH
9628: LD_VAR 0 1
9632: PPUSH
9633: CALL_OW 1
9637: PPUSH
9638: CALL_OW 1
9642: ST_TO_ADDR
// wait ( 10 ) ;
9643: LD_INT 10
9645: PPUSH
9646: CALL_OW 67
// mpBlockRespThread := false ;
9650: LD_ADDR_EXP 47
9654: PUSH
9655: LD_INT 0
9657: ST_TO_ADDR
// end ; end ;
9658: LD_VAR 0 2
9662: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
9663: LD_INT 0
9665: PPUSH
9666: PPUSH
9667: PPUSH
9668: PPUSH
9669: PPUSH
// tag := 0 ;
9670: LD_ADDR_VAR 0 5
9674: PUSH
9675: LD_INT 0
9677: ST_TO_ADDR
// for i := 1 to 8 do
9678: LD_ADDR_VAR 0 4
9682: PUSH
9683: DOUBLE
9684: LD_INT 1
9686: DEC
9687: ST_TO_ADDR
9688: LD_INT 8
9690: PUSH
9691: FOR_TO
9692: IFFALSE 9726
// if un in mpApePosIndex [ i ] then
9694: LD_VAR 0 2
9698: PUSH
9699: LD_EXP 32
9703: PUSH
9704: LD_VAR 0 4
9708: ARRAY
9709: IN
9710: IFFALSE 9724
// begin tag := i ;
9712: LD_ADDR_VAR 0 5
9716: PUSH
9717: LD_VAR 0 4
9721: ST_TO_ADDR
// break ;
9722: GO 9726
// end ;
9724: GO 9691
9726: POP
9727: POP
// if not tag then
9728: LD_VAR 0 5
9732: NOT
9733: IFFALSE 9737
// exit ;
9735: GO 9905
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9737: LD_ADDR_VAR 0 6
9741: PUSH
9742: LD_EXP 31
9746: PUSH
9747: LD_EXP 7
9751: PUSH
9752: LD_VAR 0 5
9756: ARRAY
9757: ARRAY
9758: ST_TO_ADDR
// if not area then
9759: LD_VAR 0 6
9763: NOT
9764: IFFALSE 9768
// exit ;
9766: GO 9905
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9768: LD_INT 14700
9770: PUSH
9771: LD_VAR 0 2
9775: PUSH
9776: LD_INT 5
9778: MOD
9779: PUSH
9780: LD_INT 1
9782: PLUS
9783: PUSH
9784: LD_INT 700
9786: MUL
9787: PLUS
9788: PPUSH
9789: CALL_OW 67
// repeat wait ( 10 ) ;
9793: LD_INT 10
9795: PPUSH
9796: CALL_OW 67
// until not mpBlockRespThread ;
9800: LD_EXP 47
9804: NOT
9805: IFFALSE 9793
// mpBlockRespThread := true ;
9807: LD_ADDR_EXP 47
9811: PUSH
9812: LD_INT 1
9814: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9815: LD_INT 0
9817: PPUSH
9818: CALL 47855 0 1
// ape := CreateHuman ;
9822: LD_ADDR_VAR 0 7
9826: PUSH
9827: CALL_OW 44
9831: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9832: LD_ADDR_EXP 32
9836: PUSH
9837: LD_EXP 32
9841: PPUSH
9842: LD_VAR 0 5
9846: PPUSH
9847: LD_EXP 32
9851: PUSH
9852: LD_VAR 0 5
9856: ARRAY
9857: PPUSH
9858: LD_VAR 0 7
9862: PPUSH
9863: CALL 51728 0 2
9867: PPUSH
9868: CALL_OW 1
9872: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9873: LD_VAR 0 7
9877: PPUSH
9878: LD_VAR 0 6
9882: PPUSH
9883: LD_INT 0
9885: PPUSH
9886: CALL_OW 49
// wait ( 10 ) ;
9890: LD_INT 10
9892: PPUSH
9893: CALL_OW 67
// mpBlockRespThread := false ;
9897: LD_ADDR_EXP 47
9901: PUSH
9902: LD_INT 0
9904: ST_TO_ADDR
// end ;
9905: LD_VAR 0 3
9909: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9910: LD_INT 0
9912: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9913: LD_VAR 0 1
9917: PPUSH
9918: CALL_OW 266
9922: PUSH
9923: LD_INT 0
9925: PUSH
9926: LD_INT 1
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: IN
9933: IFFALSE 9958
// SetBName ( building , @ & GetSide ( building ) ) ;
9935: LD_VAR 0 1
9939: PPUSH
9940: LD_STRING @
9942: PUSH
9943: LD_VAR 0 1
9947: PPUSH
9948: CALL_OW 255
9952: STR
9953: PPUSH
9954: CALL_OW 500
// end ;
9958: LD_VAR 0 2
9962: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9963: LD_INT 0
9965: PPUSH
9966: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
9967: LD_EXP 3
9971: PUSH
9972: LD_INT 2
9974: PUSH
9975: LD_INT 8
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: IN
9982: IFFALSE 10006
9984: PUSH
9985: LD_VAR 0 1
9989: PPUSH
9990: CALL_OW 266
9994: PUSH
9995: LD_INT 0
9997: PUSH
9998: LD_INT 1
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: IN
10005: AND
10006: IFFALSE 10085
// begin SetSide ( building , oldSide ) ;
10008: LD_VAR 0 1
10012: PPUSH
10013: LD_VAR 0 2
10017: PPUSH
10018: CALL_OW 235
// KillUnit ( building ) ;
10022: LD_VAR 0 1
10026: PPUSH
10027: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
10031: LD_ADDR_VAR 0 5
10035: PUSH
10036: LD_INT 22
10038: PUSH
10039: LD_VAR 0 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 21
10050: PUSH
10051: LD_INT 1
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PPUSH
10062: CALL_OW 69
10066: PUSH
10067: FOR_IN
10068: IFFALSE 10081
// KillUnit ( i ) ;
10070: LD_VAR 0 5
10074: PPUSH
10075: CALL_OW 66
10079: GO 10067
10081: POP
10082: POP
// exit ;
10083: GO 10130
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
10085: LD_VAR 0 1
10089: PPUSH
10090: CALL_OW 266
10094: PUSH
10095: LD_INT 0
10097: PUSH
10098: LD_INT 1
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: IN
10105: IFFALSE 10130
// SetBName ( building , @ & GetSide ( building ) ) ;
10107: LD_VAR 0 1
10111: PPUSH
10112: LD_STRING @
10114: PUSH
10115: LD_VAR 0 1
10119: PPUSH
10120: CALL_OW 255
10124: STR
10125: PPUSH
10126: CALL_OW 500
// end ;
10130: LD_VAR 0 4
10134: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
10135: LD_INT 0
10137: PPUSH
10138: PPUSH
10139: PPUSH
// if mpGameType <> GameTypeFamine then
10140: LD_EXP 3
10144: PUSH
10145: LD_INT 5
10147: NONEQUAL
10148: IFFALSE 10152
// exit ;
10150: GO 10386
// for i := 1 to mpGlobalOilDeposits do
10152: LD_ADDR_VAR 0 6
10156: PUSH
10157: DOUBLE
10158: LD_INT 1
10160: DEC
10161: ST_TO_ADDR
10162: LD_EXP 42
10166: PUSH
10167: FOR_TO
10168: IFFALSE 10384
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
10170: LD_EXP 42
10174: PUSH
10175: LD_VAR 0 6
10179: ARRAY
10180: PUSH
10181: LD_INT 1
10183: ARRAY
10184: PPUSH
10185: LD_EXP 42
10189: PUSH
10190: LD_VAR 0 6
10194: ARRAY
10195: PUSH
10196: LD_INT 2
10198: ARRAY
10199: PPUSH
10200: CALL_OW 428
10204: PUSH
10205: LD_VAR 0 1
10209: EQUAL
10210: IFFALSE 10382
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
10212: LD_ADDR_VAR 0 7
10216: PUSH
10217: LD_EXP 42
10221: PUSH
10222: LD_VAR 0 6
10226: ARRAY
10227: PUSH
10228: LD_INT 3
10230: ARRAY
10231: ST_TO_ADDR
// value := value - amount ;
10232: LD_ADDR_VAR 0 7
10236: PUSH
10237: LD_VAR 0 7
10241: PUSH
10242: LD_VAR 0 4
10246: MINUS
10247: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
10248: LD_ADDR_EXP 42
10252: PUSH
10253: LD_EXP 42
10257: PPUSH
10258: LD_VAR 0 6
10262: PPUSH
10263: LD_EXP 42
10267: PUSH
10268: LD_VAR 0 6
10272: ARRAY
10273: PPUSH
10274: LD_INT 3
10276: PPUSH
10277: LD_VAR 0 7
10281: PPUSH
10282: CALL_OW 1
10286: PPUSH
10287: CALL_OW 1
10291: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10292: LD_VAR 0 2
10296: PUSH
10297: LD_OWVAR 2
10301: PUSH
10302: LD_INT 9
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: IN
10309: IFFALSE 10325
// SetUnitDisplayNumber ( building , value ) ;
10311: LD_VAR 0 1
10315: PPUSH
10316: LD_VAR 0 7
10320: PPUSH
10321: CALL_OW 505
// if value <= 0 then
10325: LD_VAR 0 7
10329: PUSH
10330: LD_INT 0
10332: LESSEQUAL
10333: IFFALSE 10382
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
10335: LD_EXP 42
10339: PUSH
10340: LD_VAR 0 6
10344: ARRAY
10345: PUSH
10346: LD_INT 1
10348: ARRAY
10349: PPUSH
10350: LD_EXP 42
10354: PUSH
10355: LD_VAR 0 6
10359: ARRAY
10360: PUSH
10361: LD_INT 2
10363: ARRAY
10364: PPUSH
10365: CALL_OW 63
// KillUnit ( building ) ;
10369: LD_VAR 0 1
10373: PPUSH
10374: CALL_OW 66
// exit ;
10378: POP
10379: POP
10380: GO 10386
// end ; end ; end ;
10382: GO 10167
10384: POP
10385: POP
// end ;
10386: LD_VAR 0 5
10390: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
10391: LD_INT 0
10393: PPUSH
10394: PPUSH
10395: PPUSH
// if mpGameType <> GameTypeFamine then
10396: LD_EXP 3
10400: PUSH
10401: LD_INT 5
10403: NONEQUAL
10404: IFFALSE 10408
// exit ;
10406: GO 10642
// for i := 1 to mpGlobalSibDeposits do
10408: LD_ADDR_VAR 0 6
10412: PUSH
10413: DOUBLE
10414: LD_INT 1
10416: DEC
10417: ST_TO_ADDR
10418: LD_EXP 43
10422: PUSH
10423: FOR_TO
10424: IFFALSE 10640
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
10426: LD_EXP 43
10430: PUSH
10431: LD_VAR 0 6
10435: ARRAY
10436: PUSH
10437: LD_INT 1
10439: ARRAY
10440: PPUSH
10441: LD_EXP 43
10445: PUSH
10446: LD_VAR 0 6
10450: ARRAY
10451: PUSH
10452: LD_INT 2
10454: ARRAY
10455: PPUSH
10456: CALL_OW 428
10460: PUSH
10461: LD_VAR 0 1
10465: EQUAL
10466: IFFALSE 10638
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
10468: LD_ADDR_VAR 0 7
10472: PUSH
10473: LD_EXP 43
10477: PUSH
10478: LD_VAR 0 6
10482: ARRAY
10483: PUSH
10484: LD_INT 3
10486: ARRAY
10487: ST_TO_ADDR
// value := value - amount ;
10488: LD_ADDR_VAR 0 7
10492: PUSH
10493: LD_VAR 0 7
10497: PUSH
10498: LD_VAR 0 4
10502: MINUS
10503: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
10504: LD_ADDR_EXP 43
10508: PUSH
10509: LD_EXP 43
10513: PPUSH
10514: LD_VAR 0 6
10518: PPUSH
10519: LD_EXP 43
10523: PUSH
10524: LD_VAR 0 6
10528: ARRAY
10529: PPUSH
10530: LD_INT 3
10532: PPUSH
10533: LD_VAR 0 7
10537: PPUSH
10538: CALL_OW 1
10542: PPUSH
10543: CALL_OW 1
10547: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10548: LD_VAR 0 2
10552: PUSH
10553: LD_OWVAR 2
10557: PUSH
10558: LD_INT 9
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: IN
10565: IFFALSE 10581
// SetUnitDisplayNumber ( building , value ) ;
10567: LD_VAR 0 1
10571: PPUSH
10572: LD_VAR 0 7
10576: PPUSH
10577: CALL_OW 505
// if value <= 0 then
10581: LD_VAR 0 7
10585: PUSH
10586: LD_INT 0
10588: LESSEQUAL
10589: IFFALSE 10638
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
10591: LD_EXP 43
10595: PUSH
10596: LD_VAR 0 6
10600: ARRAY
10601: PUSH
10602: LD_INT 1
10604: ARRAY
10605: PPUSH
10606: LD_EXP 43
10610: PUSH
10611: LD_VAR 0 6
10615: ARRAY
10616: PUSH
10617: LD_INT 2
10619: ARRAY
10620: PPUSH
10621: CALL_OW 63
// KillUnit ( building ) ;
10625: LD_VAR 0 1
10629: PPUSH
10630: CALL_OW 66
// exit ;
10634: POP
10635: POP
10636: GO 10642
// end ; end ; end ;
10638: GO 10423
10640: POP
10641: POP
// end ;
10642: LD_VAR 0 5
10646: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
10647: LD_INT 0
10649: PPUSH
10650: PPUSH
// side := GetSide ( factory ) ;
10651: LD_ADDR_VAR 0 7
10655: PUSH
10656: LD_VAR 0 1
10660: PPUSH
10661: CALL_OW 255
10665: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
10666: LD_VAR 0 5
10670: PUSH
10671: LD_INT 81
10673: EQUAL
10674: IFFALSE 10712
10676: PUSH
10677: LD_INT 22
10679: PUSH
10680: LD_VAR 0 7
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 34
10691: PUSH
10692: LD_INT 81
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PPUSH
10703: CALL_OW 69
10707: PUSH
10708: LD_INT 0
10710: GREATER
10711: AND
10712: IFFALSE 10745
// begin ComCancel ( factory ) ;
10714: LD_VAR 0 1
10718: PPUSH
10719: CALL_OW 127
// if side = your_side then
10723: LD_VAR 0 7
10727: PUSH
10728: LD_OWVAR 2
10732: EQUAL
10733: IFFALSE 10745
// HintSpec ( VehLimit , 2 ) ;
10735: LD_STRING VehLimit
10737: PPUSH
10738: LD_INT 2
10740: PPUSH
10741: CALL_OW 338
// end ; end ;
10745: LD_VAR 0 6
10749: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
10750: LD_INT 0
10752: PPUSH
10753: PPUSH
10754: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
10755: LD_VAR 0 1
10759: PPUSH
10760: CALL_OW 264
10764: PUSH
10765: LD_INT 81
10767: EQUAL
10768: IFFALSE 10785
10770: PUSH
10771: LD_VAR 0 1
10775: PPUSH
10776: CALL_OW 263
10780: PUSH
10781: LD_INT 1
10783: EQUAL
10784: AND
10785: IFFALSE 11065
// begin for i := 1 to Count ( minersList ) do
10787: LD_ADDR_VAR 0 6
10791: PUSH
10792: DOUBLE
10793: LD_INT 1
10795: DEC
10796: ST_TO_ADDR
10797: LD_EXP 58
10801: PPUSH
10802: CALL 15752 0 1
10806: PUSH
10807: FOR_TO
10808: IFFALSE 10926
// begin if minersList [ i ] = oldId then
10810: LD_EXP 58
10814: PUSH
10815: LD_VAR 0 6
10819: ARRAY
10820: PUSH
10821: LD_VAR 0 2
10825: EQUAL
10826: IFFALSE 10924
// begin for j := 1 to minerMinesList [ i ] do
10828: LD_ADDR_VAR 0 7
10832: PUSH
10833: DOUBLE
10834: LD_INT 1
10836: DEC
10837: ST_TO_ADDR
10838: LD_EXP 59
10842: PUSH
10843: LD_VAR 0 6
10847: ARRAY
10848: PUSH
10849: FOR_TO
10850: IFFALSE 10900
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
10852: LD_EXP 59
10856: PUSH
10857: LD_VAR 0 6
10861: ARRAY
10862: PUSH
10863: LD_VAR 0 7
10867: ARRAY
10868: PUSH
10869: LD_INT 1
10871: ARRAY
10872: PPUSH
10873: LD_EXP 59
10877: PUSH
10878: LD_VAR 0 6
10882: ARRAY
10883: PUSH
10884: LD_VAR 0 7
10888: ARRAY
10889: PUSH
10890: LD_INT 2
10892: ARRAY
10893: PPUSH
10894: CALL_OW 612
10898: GO 10849
10900: POP
10901: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
10902: LD_ADDR_EXP 59
10906: PUSH
10907: LD_EXP 59
10911: PPUSH
10912: LD_VAR 0 6
10916: PPUSH
10917: CALL_OW 3
10921: ST_TO_ADDR
// break ;
10922: GO 10926
// end ; end ;
10924: GO 10807
10926: POP
10927: POP
// minersList := minersList diff oldId ;
10928: LD_ADDR_EXP 58
10932: PUSH
10933: LD_EXP 58
10937: PUSH
10938: LD_VAR 0 2
10942: DIFF
10943: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
10944: LD_INT 22
10946: PUSH
10947: LD_VAR 0 4
10951: PPUSH
10952: CALL_OW 255
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 34
10963: PUSH
10964: LD_INT 81
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PPUSH
10975: CALL_OW 69
10979: PUSH
10980: LD_INT 1
10982: GREATER
10983: IFFALSE 11010
// begin ComExit ( unit ) ;
10985: LD_VAR 0 4
10989: PPUSH
10990: CALL 52126 0 1
// SetSide ( newId , oldSide ) ;
10994: LD_VAR 0 1
10998: PPUSH
10999: LD_VAR 0 3
11003: PPUSH
11004: CALL_OW 235
// exit ;
11008: GO 11065
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
11010: LD_ADDR_EXP 58
11014: PUSH
11015: LD_EXP 58
11019: PPUSH
11020: LD_EXP 58
11024: PUSH
11025: LD_INT 1
11027: PLUS
11028: PPUSH
11029: LD_VAR 0 1
11033: PPUSH
11034: CALL_OW 1
11038: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
11039: LD_ADDR_EXP 59
11043: PUSH
11044: LD_EXP 59
11048: PPUSH
11049: LD_EXP 59
11053: PUSH
11054: LD_INT 1
11056: PLUS
11057: PPUSH
11058: EMPTY
11059: PPUSH
11060: CALL_OW 1
11064: ST_TO_ADDR
// end ; end ; end_of_file
11065: LD_VAR 0 5
11069: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
11070: LD_EXP 39
11074: IFFALSE 11082
11076: PUSH
11077: CALL 11292 0 0
11081: AND
11082: IFFALSE 11090
11084: PUSH
11085: LD_OWVAR 4
11089: AND
11090: IFFALSE 11289
11092: GO 11094
11094: DISABLE
11095: LD_INT 0
11097: PPUSH
11098: PPUSH
// begin canWin := false ;
11099: LD_ADDR_VAR 0 2
11103: PUSH
11104: LD_INT 0
11106: ST_TO_ADDR
// if not HasPower ( your_side ) then
11107: LD_OWVAR 2
11111: PPUSH
11112: CALL 11334 0 1
11116: NOT
11117: IFFALSE 11128
// begin Multiplayer_Loose_Message ;
11119: CALL_OW 521
// enable ( mpLose ) ;
11123: LD_INT 102
11125: ENABLE_MARKED
// end else
11126: GO 11289
// begin canWin := true ;
11128: LD_ADDR_VAR 0 2
11132: PUSH
11133: LD_INT 1
11135: ST_TO_ADDR
// for i := 1 to 8 do
11136: LD_ADDR_VAR 0 1
11140: PUSH
11141: DOUBLE
11142: LD_INT 1
11144: DEC
11145: ST_TO_ADDR
11146: LD_INT 8
11148: PUSH
11149: FOR_TO
11150: IFFALSE 11275
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11152: LD_EXP 7
11156: PUSH
11157: LD_VAR 0 1
11161: ARRAY
11162: IFFALSE 11175
11164: PUSH
11165: LD_VAR 0 1
11169: PPUSH
11170: CALL_OW 108
11174: AND
11175: IFFALSE 11189
11177: PUSH
11178: LD_VAR 0 1
11182: PUSH
11183: LD_OWVAR 2
11187: NONEQUAL
11188: AND
11189: IFFALSE 11273
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11191: LD_EXP 8
11195: PUSH
11196: LD_VAR 0 1
11200: ARRAY
11201: NOT
11202: IFTRUE 11250
11204: PUSH
11205: LD_EXP 8
11209: PUSH
11210: LD_VAR 0 1
11214: ARRAY
11215: PUSH
11216: LD_EXP 8
11220: PUSH
11221: LD_OWVAR 2
11225: ARRAY
11226: NONEQUAL
11227: IFFALSE 11249
11229: PUSH
11230: LD_OWVAR 2
11234: PPUSH
11235: LD_VAR 0 1
11239: PPUSH
11240: CALL_OW 81
11244: PUSH
11245: LD_INT 1
11247: NONEQUAL
11248: AND
11249: OR
11250: IFFALSE 11273
// if HasPower ( i ) then
11252: LD_VAR 0 1
11256: PPUSH
11257: CALL 11334 0 1
11261: IFFALSE 11273
// begin canWin := false ;
11263: LD_ADDR_VAR 0 2
11267: PUSH
11268: LD_INT 0
11270: ST_TO_ADDR
// break ;
11271: GO 11275
// end ;
11273: GO 11149
11275: POP
11276: POP
// if canWin then
11277: LD_VAR 0 2
11281: IFFALSE 11288
// enable ( mpWin ) else
11283: LD_INT 101
11285: ENABLE_MARKED
11286: GO 11289
// enable ;
11288: ENABLE
// end ; end ;
11289: PPOPN 2
11291: END
// function CanWinLoose ; begin
11292: LD_INT 0
11294: PPUSH
// result := true ;
11295: LD_ADDR_VAR 0 1
11299: PUSH
11300: LD_INT 1
11302: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11303: CALL_OW 531
11307: IFFALSE 11319
11309: PUSH
11310: CALL_OW 519
11314: PUSH
11315: LD_INT 1
11317: GREATER
11318: AND
11319: IFFALSE 11329
// result := false ;
11321: LD_ADDR_VAR 0 1
11325: PUSH
11326: LD_INT 0
11328: ST_TO_ADDR
// end ;
11329: LD_VAR 0 1
11333: RET
// function HasPower ( i ) ; begin
11334: LD_INT 0
11336: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11337: LD_ADDR_VAR 0 2
11341: PUSH
11342: LD_INT 22
11344: PUSH
11345: LD_VAR 0 1
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 2
11356: PUSH
11357: LD_INT 21
11359: PUSH
11360: LD_INT 1
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PUSH
11367: LD_INT 33
11369: PUSH
11370: LD_INT 3
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PUSH
11377: LD_INT 33
11379: PUSH
11380: LD_INT 5
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PPUSH
11397: CALL_OW 69
11401: ST_TO_ADDR
// end ; end_of_file
11402: LD_VAR 0 2
11406: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
11407: LD_EXP 39
11411: IFFALSE 11454
11413: GO 11415
11415: DISABLE
11416: LD_INT 0
11418: PPUSH
// begin for i := 1 to 8 do
11419: LD_ADDR_VAR 0 1
11423: PUSH
11424: DOUBLE
11425: LD_INT 1
11427: DEC
11428: ST_TO_ADDR
11429: LD_INT 8
11431: PUSH
11432: FOR_TO
11433: IFFALSE 11452
// SetRestrict ( b_depot , i , state_disabled ) ;
11435: LD_INT 0
11437: PPUSH
11438: LD_VAR 0 1
11442: PPUSH
11443: LD_INT 0
11445: PPUSH
11446: CALL_OW 324
11450: GO 11432
11452: POP
11453: POP
// end ;
11454: PPOPN 1
11456: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
11457: LD_EXP 39
11461: IFFALSE 11469
11463: PUSH
11464: CALL 11679 0 0
11468: AND
11469: IFFALSE 11477
11471: PUSH
11472: LD_OWVAR 4
11476: AND
11477: IFFALSE 11676
11479: GO 11481
11481: DISABLE
11482: LD_INT 0
11484: PPUSH
11485: PPUSH
// begin canWin := false ;
11486: LD_ADDR_VAR 0 2
11490: PUSH
11491: LD_INT 0
11493: ST_TO_ADDR
// if not HasPower ( your_side ) then
11494: LD_OWVAR 2
11498: PPUSH
11499: CALL 11721 0 1
11503: NOT
11504: IFFALSE 11515
// begin Multiplayer_Loose_Message ;
11506: CALL_OW 521
// enable ( mpLose ) ;
11510: LD_INT 102
11512: ENABLE_MARKED
// end else
11513: GO 11676
// begin canWin := true ;
11515: LD_ADDR_VAR 0 2
11519: PUSH
11520: LD_INT 1
11522: ST_TO_ADDR
// for i := 1 to 8 do
11523: LD_ADDR_VAR 0 1
11527: PUSH
11528: DOUBLE
11529: LD_INT 1
11531: DEC
11532: ST_TO_ADDR
11533: LD_INT 8
11535: PUSH
11536: FOR_TO
11537: IFFALSE 11662
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11539: LD_EXP 7
11543: PUSH
11544: LD_VAR 0 1
11548: ARRAY
11549: IFFALSE 11562
11551: PUSH
11552: LD_VAR 0 1
11556: PPUSH
11557: CALL_OW 108
11561: AND
11562: IFFALSE 11576
11564: PUSH
11565: LD_VAR 0 1
11569: PUSH
11570: LD_OWVAR 2
11574: NONEQUAL
11575: AND
11576: IFFALSE 11660
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11578: LD_EXP 8
11582: PUSH
11583: LD_VAR 0 1
11587: ARRAY
11588: NOT
11589: IFTRUE 11637
11591: PUSH
11592: LD_EXP 8
11596: PUSH
11597: LD_VAR 0 1
11601: ARRAY
11602: PUSH
11603: LD_EXP 8
11607: PUSH
11608: LD_OWVAR 2
11612: ARRAY
11613: NONEQUAL
11614: IFFALSE 11636
11616: PUSH
11617: LD_OWVAR 2
11621: PPUSH
11622: LD_VAR 0 1
11626: PPUSH
11627: CALL_OW 81
11631: PUSH
11632: LD_INT 1
11634: NONEQUAL
11635: AND
11636: OR
11637: IFFALSE 11660
// if HasPower ( i ) then
11639: LD_VAR 0 1
11643: PPUSH
11644: CALL 11721 0 1
11648: IFFALSE 11660
// begin canWin := false ;
11650: LD_ADDR_VAR 0 2
11654: PUSH
11655: LD_INT 0
11657: ST_TO_ADDR
// break ;
11658: GO 11662
// end ;
11660: GO 11536
11662: POP
11663: POP
// if canWin then
11664: LD_VAR 0 2
11668: IFFALSE 11675
// enable ( mpWin ) else
11670: LD_INT 101
11672: ENABLE_MARKED
11673: GO 11676
// enable ;
11675: ENABLE
// end ; end ;
11676: PPOPN 2
11678: END
// function CanWinLoose ; begin
11679: LD_INT 0
11681: PPUSH
// result := true ;
11682: LD_ADDR_VAR 0 1
11686: PUSH
11687: LD_INT 1
11689: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11690: CALL_OW 531
11694: IFFALSE 11706
11696: PUSH
11697: CALL_OW 519
11701: PUSH
11702: LD_INT 1
11704: GREATER
11705: AND
11706: IFFALSE 11716
// result := false ;
11708: LD_ADDR_VAR 0 1
11712: PUSH
11713: LD_INT 0
11715: ST_TO_ADDR
// end ;
11716: LD_VAR 0 1
11720: RET
// function HasPower ( i ) ; begin
11721: LD_INT 0
11723: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11724: LD_INT 22
11726: PUSH
11727: LD_VAR 0 1
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PUSH
11736: LD_INT 2
11738: PUSH
11739: LD_INT 30
11741: PUSH
11742: LD_INT 0
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 30
11751: PUSH
11752: LD_INT 1
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: LIST
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PPUSH
11768: CALL_OW 69
11772: NOT
11773: IFFALSE 11777
// exit ;
11775: GO 11842
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11777: LD_ADDR_VAR 0 2
11781: PUSH
11782: LD_INT 22
11784: PUSH
11785: LD_VAR 0 1
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PUSH
11794: LD_INT 2
11796: PUSH
11797: LD_INT 21
11799: PUSH
11800: LD_INT 1
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: LD_INT 33
11809: PUSH
11810: LD_INT 3
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 33
11819: PUSH
11820: LD_INT 5
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PPUSH
11837: CALL_OW 69
11841: ST_TO_ADDR
// end ; end_of_file
11842: LD_VAR 0 2
11846: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
11847: LD_EXP 39
11851: IFFALSE 12192
11853: GO 11855
11855: DISABLE
11856: LD_INT 0
11858: PPUSH
11859: PPUSH
11860: PPUSH
// begin mpKingPoints := [ ] ;
11861: LD_ADDR_EXP 50
11865: PUSH
11866: EMPTY
11867: ST_TO_ADDR
// if mpTeamGame then
11868: LD_EXP 11
11872: IFFALSE 11926
// begin for i := 1 to Count ( mpTeams ) do
11874: LD_ADDR_VAR 0 1
11878: PUSH
11879: DOUBLE
11880: LD_INT 1
11882: DEC
11883: ST_TO_ADDR
11884: LD_EXP 10
11888: PPUSH
11889: CALL 15752 0 1
11893: PUSH
11894: FOR_TO
11895: IFFALSE 11922
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
11897: LD_ADDR_EXP 50
11901: PUSH
11902: LD_EXP 50
11906: PPUSH
11907: LD_VAR 0 1
11911: PPUSH
11912: LD_INT 0
11914: PPUSH
11915: CALL_OW 1
11919: ST_TO_ADDR
11920: GO 11894
11922: POP
11923: POP
// end else
11924: GO 11969
// begin for i := 1 to 8 do
11926: LD_ADDR_VAR 0 1
11930: PUSH
11931: DOUBLE
11932: LD_INT 1
11934: DEC
11935: ST_TO_ADDR
11936: LD_INT 8
11938: PUSH
11939: FOR_TO
11940: IFFALSE 11967
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
11942: LD_ADDR_EXP 50
11946: PUSH
11947: LD_EXP 50
11951: PPUSH
11952: LD_VAR 0 1
11956: PPUSH
11957: LD_INT 0
11959: PPUSH
11960: CALL_OW 1
11964: ST_TO_ADDR
11965: GO 11939
11967: POP
11968: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
11969: LD_ADDR_VAR 0 3
11973: PUSH
11974: LD_EXP 2
11978: PPUSH
11979: LD_INT 0
11981: PPUSH
11982: CALL_OW 517
11986: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
11987: LD_ADDR_VAR 0 1
11991: PUSH
11992: DOUBLE
11993: LD_INT 1
11995: DEC
11996: ST_TO_ADDR
11997: LD_VAR 0 3
12001: PUSH
12002: LD_INT 1
12004: ARRAY
12005: PUSH
12006: FOR_TO
12007: IFFALSE 12074
// for j := 1 to 8 do
12009: LD_ADDR_VAR 0 2
12013: PUSH
12014: DOUBLE
12015: LD_INT 1
12017: DEC
12018: ST_TO_ADDR
12019: LD_INT 8
12021: PUSH
12022: FOR_TO
12023: IFFALSE 12070
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
12025: LD_VAR 0 3
12029: PUSH
12030: LD_INT 1
12032: ARRAY
12033: PUSH
12034: LD_VAR 0 1
12038: ARRAY
12039: PPUSH
12040: LD_VAR 0 3
12044: PUSH
12045: LD_INT 2
12047: ARRAY
12048: PUSH
12049: LD_VAR 0 1
12053: ARRAY
12054: PPUSH
12055: LD_VAR 0 2
12059: PPUSH
12060: LD_INT 12
12062: NEG
12063: PPUSH
12064: CALL_OW 330
12068: GO 12022
12070: POP
12071: POP
12072: GO 12006
12074: POP
12075: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
12076: LD_EXP 34
12080: PPUSH
12081: LD_INT 1
12083: PPUSH
12084: CALL_OW 424
// UpdateCounter ;
12088: CALL 12698 0 0
// repeat wait ( 0 0$1 ) ;
12092: LD_INT 35
12094: PPUSH
12095: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12099: LD_ADDR_VAR 0 3
12103: PUSH
12104: LD_EXP 34
12108: PPUSH
12109: LD_INT 3
12111: PUSH
12112: LD_INT 57
12114: PUSH
12115: EMPTY
12116: LIST
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 50
12124: PUSH
12125: EMPTY
12126: LIST
12127: PUSH
12128: LD_INT 2
12130: PUSH
12131: LD_INT 30
12133: PUSH
12134: LD_INT 0
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 30
12143: PUSH
12144: LD_INT 1
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: LIST
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: LIST
12160: PPUSH
12161: CALL_OW 70
12165: ST_TO_ADDR
// if not tmp then
12166: LD_VAR 0 3
12170: NOT
12171: IFFALSE 12175
// continue ;
12173: GO 12092
// AddPoints ( tmp ) ;
12175: LD_VAR 0 3
12179: PPUSH
12180: CALL 12376 0 1
// UpdateCounter ;
12184: CALL 12698 0 0
// until false ;
12188: LD_INT 0
12190: IFFALSE 12092
// end ;
12192: PPOPN 3
12194: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
12195: LD_EXP 39
12199: IFFALSE 12207
12201: PUSH
12202: LD_EXP 37
12206: AND
12207: IFFALSE 12373
12209: GO 12211
12211: DISABLE
12212: LD_INT 0
12214: PPUSH
12215: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
12216: LD_ADDR_VAR 0 2
12220: PUSH
12221: LD_EXP 2
12225: PPUSH
12226: LD_INT 0
12228: PPUSH
12229: CALL_OW 517
12233: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
12234: LD_ADDR_VAR 0 1
12238: PUSH
12239: DOUBLE
12240: LD_INT 1
12242: DEC
12243: ST_TO_ADDR
12244: LD_VAR 0 2
12248: PUSH
12249: LD_INT 1
12251: ARRAY
12252: PUSH
12253: FOR_TO
12254: IFFALSE 12295
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
12256: LD_VAR 0 2
12260: PUSH
12261: LD_INT 1
12263: ARRAY
12264: PUSH
12265: LD_VAR 0 1
12269: ARRAY
12270: PPUSH
12271: LD_VAR 0 2
12275: PUSH
12276: LD_INT 2
12278: ARRAY
12279: PUSH
12280: LD_VAR 0 1
12284: ARRAY
12285: PPUSH
12286: LD_INT 125
12288: PPUSH
12289: CALL_OW 495
12293: GO 12253
12295: POP
12296: POP
// repeat wait ( mpEmissions ) ;
12297: LD_EXP 37
12301: PPUSH
12302: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
12306: LD_ADDR_VAR 0 1
12310: PUSH
12311: DOUBLE
12312: LD_INT 1
12314: DEC
12315: ST_TO_ADDR
12316: LD_VAR 0 2
12320: PUSH
12321: LD_INT 1
12323: ARRAY
12324: PUSH
12325: FOR_TO
12326: IFFALSE 12367
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
12328: LD_VAR 0 2
12332: PUSH
12333: LD_INT 1
12335: ARRAY
12336: PUSH
12337: LD_VAR 0 1
12341: ARRAY
12342: PPUSH
12343: LD_VAR 0 2
12347: PUSH
12348: LD_INT 2
12350: ARRAY
12351: PUSH
12352: LD_VAR 0 1
12356: ARRAY
12357: PPUSH
12358: LD_INT 15
12360: PPUSH
12361: CALL_OW 495
12365: GO 12325
12367: POP
12368: POP
// until false ;
12369: LD_INT 0
12371: IFFALSE 12297
// end ;
12373: PPOPN 2
12375: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
12376: LD_INT 0
12378: PPUSH
12379: PPUSH
12380: PPUSH
12381: PPUSH
12382: PPUSH
// if mpTeamGame then
12383: LD_EXP 11
12387: IFFALSE 12584
// begin first := depots [ 1 ] ;
12389: LD_ADDR_VAR 0 4
12393: PUSH
12394: LD_VAR 0 1
12398: PUSH
12399: LD_INT 1
12401: ARRAY
12402: ST_TO_ADDR
// side := GetSide ( first ) ;
12403: LD_ADDR_VAR 0 6
12407: PUSH
12408: LD_VAR 0 4
12412: PPUSH
12413: CALL_OW 255
12417: ST_TO_ADDR
// for i := 1 to mpTeams do
12418: LD_ADDR_VAR 0 3
12422: PUSH
12423: DOUBLE
12424: LD_INT 1
12426: DEC
12427: ST_TO_ADDR
12428: LD_EXP 10
12432: PUSH
12433: FOR_TO
12434: IFFALSE 12468
// if side in mpTeams [ i ] then
12436: LD_VAR 0 6
12440: PUSH
12441: LD_EXP 10
12445: PUSH
12446: LD_VAR 0 3
12450: ARRAY
12451: IN
12452: IFFALSE 12466
// begin team := i ;
12454: LD_ADDR_VAR 0 5
12458: PUSH
12459: LD_VAR 0 3
12463: ST_TO_ADDR
// break ;
12464: GO 12468
// end ;
12466: GO 12433
12468: POP
12469: POP
// if not team then
12470: LD_VAR 0 5
12474: NOT
12475: IFFALSE 12479
// exit ;
12477: GO 12693
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
12479: LD_EXP 34
12483: PPUSH
12484: LD_INT 81
12486: PUSH
12487: LD_VAR 0 6
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PPUSH
12496: CALL_OW 70
12500: IFFALSE 12504
// exit ;
12502: GO 12693
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
12504: LD_ADDR_EXP 50
12508: PUSH
12509: LD_EXP 50
12513: PPUSH
12514: LD_VAR 0 5
12518: PPUSH
12519: LD_EXP 50
12523: PUSH
12524: LD_VAR 0 5
12528: ARRAY
12529: PUSH
12530: LD_INT 1
12532: PLUS
12533: PPUSH
12534: CALL_OW 1
12538: ST_TO_ADDR
// for i in mpTeams [ team ] do
12539: LD_ADDR_VAR 0 3
12543: PUSH
12544: LD_EXP 10
12548: PUSH
12549: LD_VAR 0 5
12553: ARRAY
12554: PUSH
12555: FOR_IN
12556: IFFALSE 12580
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
12558: LD_VAR 0 3
12562: PPUSH
12563: LD_EXP 50
12567: PUSH
12568: LD_VAR 0 5
12572: ARRAY
12573: PPUSH
12574: CALL_OW 506
12578: GO 12555
12580: POP
12581: POP
// end else
12582: GO 12693
// begin first := depots [ 1 ] ;
12584: LD_ADDR_VAR 0 4
12588: PUSH
12589: LD_VAR 0 1
12593: PUSH
12594: LD_INT 1
12596: ARRAY
12597: ST_TO_ADDR
// side := GetSide ( first ) ;
12598: LD_ADDR_VAR 0 6
12602: PUSH
12603: LD_VAR 0 4
12607: PPUSH
12608: CALL_OW 255
12612: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
12613: LD_EXP 34
12617: PPUSH
12618: LD_INT 81
12620: PUSH
12621: LD_VAR 0 6
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PPUSH
12630: CALL_OW 70
12634: IFFALSE 12638
// exit ;
12636: GO 12693
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
12638: LD_ADDR_EXP 50
12642: PUSH
12643: LD_EXP 50
12647: PPUSH
12648: LD_VAR 0 6
12652: PPUSH
12653: LD_EXP 50
12657: PUSH
12658: LD_VAR 0 6
12662: ARRAY
12663: PUSH
12664: LD_INT 1
12666: PLUS
12667: PPUSH
12668: CALL_OW 1
12672: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
12673: LD_VAR 0 6
12677: PPUSH
12678: LD_EXP 50
12682: PUSH
12683: LD_VAR 0 6
12687: ARRAY
12688: PPUSH
12689: CALL_OW 506
// end ; end ;
12693: LD_VAR 0 2
12697: RET
// function UpdateCounter ; var i ; begin
12698: LD_INT 0
12700: PPUSH
12701: PPUSH
// result := [ ] ;
12702: LD_ADDR_VAR 0 1
12706: PUSH
12707: EMPTY
12708: ST_TO_ADDR
// if mpTeamGame then
12709: LD_EXP 11
12713: IFFALSE 12780
// begin for i := 1 to mpTeams do
12715: LD_ADDR_VAR 0 2
12719: PUSH
12720: DOUBLE
12721: LD_INT 1
12723: DEC
12724: ST_TO_ADDR
12725: LD_EXP 10
12729: PUSH
12730: FOR_TO
12731: IFFALSE 12776
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
12733: LD_ADDR_VAR 0 1
12737: PUSH
12738: LD_VAR 0 1
12742: PUSH
12743: LD_STRING #KingoftheHill-Team
12745: PUSH
12746: LD_VAR 0 2
12750: PUSH
12751: LD_EXP 50
12755: PUSH
12756: LD_VAR 0 2
12760: ARRAY
12761: PUSH
12762: LD_EXP 35
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: ADD
12773: ST_TO_ADDR
12774: GO 12730
12776: POP
12777: POP
// end else
12778: GO 12853
// begin for i := 1 to 8 do
12780: LD_ADDR_VAR 0 2
12784: PUSH
12785: DOUBLE
12786: LD_INT 1
12788: DEC
12789: ST_TO_ADDR
12790: LD_INT 8
12792: PUSH
12793: FOR_TO
12794: IFFALSE 12851
// if mpSidePositions [ i ] then
12796: LD_EXP 7
12800: PUSH
12801: LD_VAR 0 2
12805: ARRAY
12806: IFFALSE 12849
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
12808: LD_ADDR_VAR 0 1
12812: PUSH
12813: LD_VAR 0 1
12817: PUSH
12818: LD_STRING #KingoftheHill-Player
12820: PUSH
12821: LD_VAR 0 2
12825: PUSH
12826: LD_EXP 50
12830: PUSH
12831: LD_VAR 0 2
12835: ARRAY
12836: PUSH
12837: LD_EXP 35
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: ADD
12848: ST_TO_ADDR
12849: GO 12793
12851: POP
12852: POP
// end ; mpDisplayStrings := result ;
12853: LD_ADDR_EXP 38
12857: PUSH
12858: LD_VAR 0 1
12862: ST_TO_ADDR
// end ;
12863: LD_VAR 0 1
12867: RET
// export function HowMuchPointsKing ( side ) ; begin
12868: LD_INT 0
12870: PPUSH
// result := HowMuchPoints ( side ) ;
12871: LD_ADDR_VAR 0 2
12875: PUSH
12876: LD_VAR 0 1
12880: PPUSH
12881: CALL 12891 0 1
12885: ST_TO_ADDR
// end ;
12886: LD_VAR 0 2
12890: RET
// function HowMuchPoints ( side ) ; var i ; begin
12891: LD_INT 0
12893: PPUSH
12894: PPUSH
// if mpTeamGame then
12895: LD_EXP 11
12899: IFFALSE 12968
// begin for i := 1 to Count ( mpTeams ) do
12901: LD_ADDR_VAR 0 3
12905: PUSH
12906: DOUBLE
12907: LD_INT 1
12909: DEC
12910: ST_TO_ADDR
12911: LD_EXP 10
12915: PPUSH
12916: CALL 15752 0 1
12920: PUSH
12921: FOR_TO
12922: IFFALSE 12964
// begin if side in mpTeams [ i ] then
12924: LD_VAR 0 1
12928: PUSH
12929: LD_EXP 10
12933: PUSH
12934: LD_VAR 0 3
12938: ARRAY
12939: IN
12940: IFFALSE 12962
// begin result := mpKingPoints [ i ] ;
12942: LD_ADDR_VAR 0 2
12946: PUSH
12947: LD_EXP 50
12951: PUSH
12952: LD_VAR 0 3
12956: ARRAY
12957: ST_TO_ADDR
// exit ;
12958: POP
12959: POP
12960: GO 12984
// end ; end ;
12962: GO 12921
12964: POP
12965: POP
// end else
12966: GO 12984
// result := mpKingPoints [ side ] ;
12968: LD_ADDR_VAR 0 2
12972: PUSH
12973: LD_EXP 50
12977: PUSH
12978: LD_VAR 0 1
12982: ARRAY
12983: ST_TO_ADDR
// end ;
12984: LD_VAR 0 2
12988: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
12989: LD_EXP 39
12993: IFFALSE 13001
12995: PUSH
12996: CALL 13413 0 0
13000: AND
13001: IFFALSE 13009
13003: PUSH
13004: LD_OWVAR 4
13008: AND
13009: IFFALSE 13262
13011: GO 13013
13013: DISABLE
13014: LD_INT 0
13016: PPUSH
13017: PPUSH
// begin canWin := false ;
13018: LD_ADDR_VAR 0 2
13022: PUSH
13023: LD_INT 0
13025: ST_TO_ADDR
// if not HasPower ( your_side ) then
13026: LD_OWVAR 2
13030: PPUSH
13031: CALL 13455 0 1
13035: NOT
13036: IFFALSE 13047
// begin Multiplayer_Loose_Message ;
13038: CALL_OW 521
// enable ( mpLose ) ;
13042: LD_INT 102
13044: ENABLE_MARKED
// end else
13045: GO 13262
// begin if not EnemiesInGame then
13047: CALL 13265 0 0
13051: NOT
13052: IFFALSE 13059
// begin enable ( mpWin ) ;
13054: LD_INT 101
13056: ENABLE_MARKED
// exit ;
13057: GO 13262
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
13059: LD_ADDR_VAR 0 2
13063: PUSH
13064: LD_OWVAR 2
13068: PPUSH
13069: CALL 12891 0 1
13073: PUSH
13074: LD_EXP 35
13078: GREATEREQUAL
13079: IFFALSE 13092
13081: PUSH
13082: LD_OWVAR 2
13086: PPUSH
13087: CALL 13455 0 1
13091: AND
13092: ST_TO_ADDR
// for i := 1 to 8 do
13093: LD_ADDR_VAR 0 1
13097: PUSH
13098: DOUBLE
13099: LD_INT 1
13101: DEC
13102: ST_TO_ADDR
13103: LD_INT 8
13105: PUSH
13106: FOR_TO
13107: IFFALSE 13248
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
13109: LD_EXP 7
13113: PUSH
13114: LD_VAR 0 1
13118: ARRAY
13119: IFFALSE 13132
13121: PUSH
13122: LD_VAR 0 1
13126: PPUSH
13127: CALL_OW 108
13131: AND
13132: IFFALSE 13146
13134: PUSH
13135: LD_VAR 0 1
13139: PUSH
13140: LD_OWVAR 2
13144: NONEQUAL
13145: AND
13146: IFFALSE 13246
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
13148: LD_EXP 8
13152: PUSH
13153: LD_VAR 0 1
13157: ARRAY
13158: NOT
13159: IFTRUE 13207
13161: PUSH
13162: LD_EXP 8
13166: PUSH
13167: LD_VAR 0 1
13171: ARRAY
13172: PUSH
13173: LD_EXP 8
13177: PUSH
13178: LD_OWVAR 2
13182: ARRAY
13183: NONEQUAL
13184: IFFALSE 13206
13186: PUSH
13187: LD_OWVAR 2
13191: PPUSH
13192: LD_VAR 0 1
13196: PPUSH
13197: CALL_OW 81
13201: PUSH
13202: LD_INT 1
13204: NONEQUAL
13205: AND
13206: OR
13207: IFFALSE 13246
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
13209: LD_VAR 0 1
13213: PPUSH
13214: CALL 12891 0 1
13218: PUSH
13219: LD_EXP 35
13223: GREATEREQUAL
13224: IFFALSE 13237
13226: PUSH
13227: LD_VAR 0 1
13231: PPUSH
13232: CALL 13455 0 1
13236: AND
13237: IFFALSE 13246
// begin enable ( mpLose ) ;
13239: LD_INT 102
13241: ENABLE_MARKED
// exit ;
13242: POP
13243: POP
13244: GO 13262
// end ;
13246: GO 13106
13248: POP
13249: POP
// if canWin then
13250: LD_VAR 0 2
13254: IFFALSE 13261
// enable ( mpWin ) else
13256: LD_INT 101
13258: ENABLE_MARKED
13259: GO 13262
// enable ;
13261: ENABLE
// end ; end ;
13262: PPOPN 2
13264: END
// function EnemiesInGame ; var i ; begin
13265: LD_INT 0
13267: PPUSH
13268: PPUSH
// result := false ;
13269: LD_ADDR_VAR 0 1
13273: PUSH
13274: LD_INT 0
13276: ST_TO_ADDR
// for i := 1 to 8 do
13277: LD_ADDR_VAR 0 2
13281: PUSH
13282: DOUBLE
13283: LD_INT 1
13285: DEC
13286: ST_TO_ADDR
13287: LD_INT 8
13289: PUSH
13290: FOR_TO
13291: IFFALSE 13406
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
13293: LD_VAR 0 2
13297: PUSH
13298: LD_OWVAR 2
13302: NONEQUAL
13303: IFFALSE 13316
13305: PUSH
13306: LD_VAR 0 2
13310: PPUSH
13311: CALL 13455 0 1
13315: AND
13316: IFFALSE 13329
13318: PUSH
13319: LD_VAR 0 2
13323: PPUSH
13324: CALL_OW 108
13328: AND
13329: IFFALSE 13404
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
13331: LD_EXP 8
13335: PUSH
13336: LD_VAR 0 2
13340: ARRAY
13341: NOT
13342: IFTRUE 13390
13344: PUSH
13345: LD_EXP 8
13349: PUSH
13350: LD_VAR 0 2
13354: ARRAY
13355: PUSH
13356: LD_EXP 8
13360: PUSH
13361: LD_OWVAR 2
13365: ARRAY
13366: NONEQUAL
13367: IFFALSE 13389
13369: PUSH
13370: LD_OWVAR 2
13374: PPUSH
13375: LD_VAR 0 2
13379: PPUSH
13380: CALL_OW 81
13384: PUSH
13385: LD_INT 1
13387: NONEQUAL
13388: AND
13389: OR
13390: IFFALSE 13404
// begin result := true ;
13392: LD_ADDR_VAR 0 1
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// exit ;
13400: POP
13401: POP
13402: GO 13408
// end ;
13404: GO 13290
13406: POP
13407: POP
// end ;
13408: LD_VAR 0 1
13412: RET
// function CanWinLoose ; begin
13413: LD_INT 0
13415: PPUSH
// result := true ;
13416: LD_ADDR_VAR 0 1
13420: PUSH
13421: LD_INT 1
13423: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13424: CALL_OW 531
13428: IFFALSE 13440
13430: PUSH
13431: CALL_OW 519
13435: PUSH
13436: LD_INT 1
13438: GREATER
13439: AND
13440: IFFALSE 13450
// result := false ;
13442: LD_ADDR_VAR 0 1
13446: PUSH
13447: LD_INT 0
13449: ST_TO_ADDR
// end ;
13450: LD_VAR 0 1
13454: RET
// function HasPower ( i ) ; begin
13455: LD_INT 0
13457: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
13458: LD_ADDR_VAR 0 2
13462: PUSH
13463: LD_INT 22
13465: PUSH
13466: LD_VAR 0 1
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: PUSH
13475: LD_INT 2
13477: PUSH
13478: LD_INT 21
13480: PUSH
13481: LD_INT 1
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 33
13490: PUSH
13491: LD_INT 3
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 33
13500: PUSH
13501: LD_INT 5
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PPUSH
13518: CALL_OW 69
13522: ST_TO_ADDR
// end ; end_of_file
13523: LD_VAR 0 2
13527: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13528: LD_INT 0
13530: PPUSH
13531: PPUSH
// if exist_mode then
13532: LD_VAR 0 2
13536: IFFALSE 13582
// begin unit := CreateCharacter ( prefix & ident ) ;
13538: LD_ADDR_VAR 0 5
13542: PUSH
13543: LD_VAR 0 3
13547: PUSH
13548: LD_VAR 0 1
13552: STR
13553: PPUSH
13554: CALL_OW 34
13558: ST_TO_ADDR
// if unit then
13559: LD_VAR 0 5
13563: IFFALSE 13580
// DeleteCharacters ( prefix & ident ) ;
13565: LD_VAR 0 3
13569: PUSH
13570: LD_VAR 0 1
13574: STR
13575: PPUSH
13576: CALL_OW 40
// end else
13580: GO 13597
// unit := NewCharacter ( ident ) ;
13582: LD_ADDR_VAR 0 5
13586: PUSH
13587: LD_VAR 0 1
13591: PPUSH
13592: CALL_OW 25
13596: ST_TO_ADDR
// result := unit ;
13597: LD_ADDR_VAR 0 4
13601: PUSH
13602: LD_VAR 0 5
13606: ST_TO_ADDR
// end ;
13607: LD_VAR 0 4
13611: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
13612: LD_INT 0
13614: PPUSH
13615: PPUSH
// if exist_mode then
13616: LD_VAR 0 2
13620: IFFALSE 13645
// unit := CreateCharacter ( prefix & ident ) else
13622: LD_ADDR_VAR 0 5
13626: PUSH
13627: LD_VAR 0 3
13631: PUSH
13632: LD_VAR 0 1
13636: STR
13637: PPUSH
13638: CALL_OW 34
13642: ST_TO_ADDR
13643: GO 13660
// unit := NewCharacter ( ident ) ;
13645: LD_ADDR_VAR 0 5
13649: PUSH
13650: LD_VAR 0 1
13654: PPUSH
13655: CALL_OW 25
13659: ST_TO_ADDR
// result := unit ;
13660: LD_ADDR_VAR 0 4
13664: PUSH
13665: LD_VAR 0 5
13669: ST_TO_ADDR
// end ;
13670: LD_VAR 0 4
13674: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13675: LD_INT 0
13677: PPUSH
13678: PPUSH
// if not side or not nation then
13679: LD_VAR 0 1
13683: NOT
13684: IFTRUE 13693
13686: PUSH
13687: LD_VAR 0 2
13691: NOT
13692: OR
13693: IFFALSE 13697
// exit ;
13695: GO 14491
// case nation of nation_american :
13697: LD_VAR 0 2
13701: PUSH
13702: LD_INT 1
13704: DOUBLE
13705: EQUAL
13706: IFTRUE 13710
13708: GO 13932
13710: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
13711: LD_ADDR_VAR 0 4
13715: PUSH
13716: LD_INT 35
13718: PUSH
13719: LD_INT 45
13721: PUSH
13722: LD_INT 46
13724: PUSH
13725: LD_INT 47
13727: PUSH
13728: LD_INT 82
13730: PUSH
13731: LD_INT 83
13733: PUSH
13734: LD_INT 84
13736: PUSH
13737: LD_INT 85
13739: PUSH
13740: LD_INT 86
13742: PUSH
13743: LD_INT 1
13745: PUSH
13746: LD_INT 2
13748: PUSH
13749: LD_INT 6
13751: PUSH
13752: LD_INT 15
13754: PUSH
13755: LD_INT 16
13757: PUSH
13758: LD_INT 7
13760: PUSH
13761: LD_INT 12
13763: PUSH
13764: LD_INT 13
13766: PUSH
13767: LD_INT 10
13769: PUSH
13770: LD_INT 14
13772: PUSH
13773: LD_INT 20
13775: PUSH
13776: LD_INT 21
13778: PUSH
13779: LD_INT 22
13781: PUSH
13782: LD_INT 25
13784: PUSH
13785: LD_INT 32
13787: PUSH
13788: LD_INT 27
13790: PUSH
13791: LD_INT 36
13793: PUSH
13794: LD_INT 69
13796: PUSH
13797: LD_INT 39
13799: PUSH
13800: LD_INT 34
13802: PUSH
13803: LD_INT 40
13805: PUSH
13806: LD_INT 48
13808: PUSH
13809: LD_INT 49
13811: PUSH
13812: LD_INT 50
13814: PUSH
13815: LD_INT 51
13817: PUSH
13818: LD_INT 52
13820: PUSH
13821: LD_INT 53
13823: PUSH
13824: LD_INT 54
13826: PUSH
13827: LD_INT 55
13829: PUSH
13830: LD_INT 56
13832: PUSH
13833: LD_INT 57
13835: PUSH
13836: LD_INT 58
13838: PUSH
13839: LD_INT 59
13841: PUSH
13842: LD_INT 60
13844: PUSH
13845: LD_INT 61
13847: PUSH
13848: LD_INT 62
13850: PUSH
13851: LD_INT 80
13853: PUSH
13854: LD_INT 82
13856: PUSH
13857: LD_INT 83
13859: PUSH
13860: LD_INT 84
13862: PUSH
13863: LD_INT 85
13865: PUSH
13866: LD_INT 86
13868: PUSH
13869: LD_INT 90
13871: PUSH
13872: LD_INT 93
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: ST_TO_ADDR
13930: GO 14413
13932: LD_INT 2
13934: DOUBLE
13935: EQUAL
13936: IFTRUE 13940
13938: GO 14174
13940: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
13941: LD_ADDR_VAR 0 4
13945: PUSH
13946: LD_INT 35
13948: PUSH
13949: LD_INT 45
13951: PUSH
13952: LD_INT 46
13954: PUSH
13955: LD_INT 47
13957: PUSH
13958: LD_INT 82
13960: PUSH
13961: LD_INT 83
13963: PUSH
13964: LD_INT 84
13966: PUSH
13967: LD_INT 85
13969: PUSH
13970: LD_INT 87
13972: PUSH
13973: LD_INT 70
13975: PUSH
13976: LD_INT 1
13978: PUSH
13979: LD_INT 11
13981: PUSH
13982: LD_INT 3
13984: PUSH
13985: LD_INT 4
13987: PUSH
13988: LD_INT 5
13990: PUSH
13991: LD_INT 6
13993: PUSH
13994: LD_INT 15
13996: PUSH
13997: LD_INT 18
13999: PUSH
14000: LD_INT 7
14002: PUSH
14003: LD_INT 17
14005: PUSH
14006: LD_INT 8
14008: PUSH
14009: LD_INT 20
14011: PUSH
14012: LD_INT 21
14014: PUSH
14015: LD_INT 22
14017: PUSH
14018: LD_INT 72
14020: PUSH
14021: LD_INT 26
14023: PUSH
14024: LD_INT 69
14026: PUSH
14027: LD_INT 39
14029: PUSH
14030: LD_INT 40
14032: PUSH
14033: LD_INT 41
14035: PUSH
14036: LD_INT 42
14038: PUSH
14039: LD_INT 43
14041: PUSH
14042: LD_INT 48
14044: PUSH
14045: LD_INT 49
14047: PUSH
14048: LD_INT 50
14050: PUSH
14051: LD_INT 51
14053: PUSH
14054: LD_INT 52
14056: PUSH
14057: LD_INT 53
14059: PUSH
14060: LD_INT 54
14062: PUSH
14063: LD_INT 55
14065: PUSH
14066: LD_INT 56
14068: PUSH
14069: LD_INT 60
14071: PUSH
14072: LD_INT 61
14074: PUSH
14075: LD_INT 62
14077: PUSH
14078: LD_INT 66
14080: PUSH
14081: LD_INT 67
14083: PUSH
14084: LD_INT 68
14086: PUSH
14087: LD_INT 81
14089: PUSH
14090: LD_INT 82
14092: PUSH
14093: LD_INT 83
14095: PUSH
14096: LD_INT 84
14098: PUSH
14099: LD_INT 85
14101: PUSH
14102: LD_INT 87
14104: PUSH
14105: LD_INT 88
14107: PUSH
14108: LD_INT 92
14110: PUSH
14111: LD_INT 94
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: ST_TO_ADDR
14172: GO 14413
14174: LD_INT 3
14176: DOUBLE
14177: EQUAL
14178: IFTRUE 14182
14180: GO 14412
14182: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
14183: LD_ADDR_VAR 0 4
14187: PUSH
14188: LD_INT 46
14190: PUSH
14191: LD_INT 47
14193: PUSH
14194: LD_INT 1
14196: PUSH
14197: LD_INT 2
14199: PUSH
14200: LD_INT 82
14202: PUSH
14203: LD_INT 83
14205: PUSH
14206: LD_INT 84
14208: PUSH
14209: LD_INT 85
14211: PUSH
14212: LD_INT 86
14214: PUSH
14215: LD_INT 11
14217: PUSH
14218: LD_INT 9
14220: PUSH
14221: LD_INT 20
14223: PUSH
14224: LD_INT 19
14226: PUSH
14227: LD_INT 21
14229: PUSH
14230: LD_INT 24
14232: PUSH
14233: LD_INT 22
14235: PUSH
14236: LD_INT 25
14238: PUSH
14239: LD_INT 28
14241: PUSH
14242: LD_INT 29
14244: PUSH
14245: LD_INT 30
14247: PUSH
14248: LD_INT 31
14250: PUSH
14251: LD_INT 37
14253: PUSH
14254: LD_INT 38
14256: PUSH
14257: LD_INT 32
14259: PUSH
14260: LD_INT 27
14262: PUSH
14263: LD_INT 33
14265: PUSH
14266: LD_INT 69
14268: PUSH
14269: LD_INT 39
14271: PUSH
14272: LD_INT 34
14274: PUSH
14275: LD_INT 40
14277: PUSH
14278: LD_INT 71
14280: PUSH
14281: LD_INT 23
14283: PUSH
14284: LD_INT 44
14286: PUSH
14287: LD_INT 48
14289: PUSH
14290: LD_INT 49
14292: PUSH
14293: LD_INT 50
14295: PUSH
14296: LD_INT 51
14298: PUSH
14299: LD_INT 52
14301: PUSH
14302: LD_INT 53
14304: PUSH
14305: LD_INT 54
14307: PUSH
14308: LD_INT 55
14310: PUSH
14311: LD_INT 56
14313: PUSH
14314: LD_INT 57
14316: PUSH
14317: LD_INT 58
14319: PUSH
14320: LD_INT 59
14322: PUSH
14323: LD_INT 63
14325: PUSH
14326: LD_INT 64
14328: PUSH
14329: LD_INT 65
14331: PUSH
14332: LD_INT 82
14334: PUSH
14335: LD_INT 83
14337: PUSH
14338: LD_INT 84
14340: PUSH
14341: LD_INT 85
14343: PUSH
14344: LD_INT 86
14346: PUSH
14347: LD_INT 89
14349: PUSH
14350: LD_INT 91
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: ST_TO_ADDR
14410: GO 14413
14412: POP
// if state > - 1 and state < 3 then
14413: LD_VAR 0 3
14417: PUSH
14418: LD_INT 1
14420: NEG
14421: GREATER
14422: IFFALSE 14434
14424: PUSH
14425: LD_VAR 0 3
14429: PUSH
14430: LD_INT 3
14432: LESS
14433: AND
14434: IFFALSE 14491
// for i in result do
14436: LD_ADDR_VAR 0 5
14440: PUSH
14441: LD_VAR 0 4
14445: PUSH
14446: FOR_IN
14447: IFFALSE 14489
// if GetTech ( i , side ) <> state then
14449: LD_VAR 0 5
14453: PPUSH
14454: LD_VAR 0 1
14458: PPUSH
14459: CALL_OW 321
14463: PUSH
14464: LD_VAR 0 3
14468: NONEQUAL
14469: IFFALSE 14487
// result := result diff i ;
14471: LD_ADDR_VAR 0 4
14475: PUSH
14476: LD_VAR 0 4
14480: PUSH
14481: LD_VAR 0 5
14485: DIFF
14486: ST_TO_ADDR
14487: GO 14446
14489: POP
14490: POP
// end ;
14491: LD_VAR 0 4
14495: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
14496: LD_INT 0
14498: PPUSH
14499: PPUSH
14500: PPUSH
// result := true ;
14501: LD_ADDR_VAR 0 3
14505: PUSH
14506: LD_INT 1
14508: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14509: LD_ADDR_VAR 0 5
14513: PUSH
14514: LD_VAR 0 2
14518: PPUSH
14519: CALL_OW 480
14523: ST_TO_ADDR
// if not tmp then
14524: LD_VAR 0 5
14528: NOT
14529: IFFALSE 14533
// exit ;
14531: GO 14582
// for i in tmp do
14533: LD_ADDR_VAR 0 4
14537: PUSH
14538: LD_VAR 0 5
14542: PUSH
14543: FOR_IN
14544: IFFALSE 14580
// if GetTech ( i , side ) <> state_researched then
14546: LD_VAR 0 4
14550: PPUSH
14551: LD_VAR 0 1
14555: PPUSH
14556: CALL_OW 321
14560: PUSH
14561: LD_INT 2
14563: NONEQUAL
14564: IFFALSE 14578
// begin result := false ;
14566: LD_ADDR_VAR 0 3
14570: PUSH
14571: LD_INT 0
14573: ST_TO_ADDR
// exit ;
14574: POP
14575: POP
14576: GO 14582
// end ;
14578: GO 14543
14580: POP
14581: POP
// end ;
14582: LD_VAR 0 3
14586: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14587: LD_INT 0
14589: PPUSH
14590: PPUSH
14591: PPUSH
14592: PPUSH
14593: PPUSH
14594: PPUSH
14595: PPUSH
14596: PPUSH
14597: PPUSH
14598: PPUSH
14599: PPUSH
14600: PPUSH
14601: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14602: LD_VAR 0 1
14606: NOT
14607: IFTRUE 14624
14609: PUSH
14610: LD_VAR 0 1
14614: PPUSH
14615: CALL_OW 257
14619: PUSH
14620: LD_INT 9
14622: NONEQUAL
14623: OR
14624: IFFALSE 14628
// exit ;
14626: GO 15207
// side := GetSide ( unit ) ;
14628: LD_ADDR_VAR 0 9
14632: PUSH
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL_OW 255
14642: ST_TO_ADDR
// tech_space := tech_spacanom ;
14643: LD_ADDR_VAR 0 12
14647: PUSH
14648: LD_INT 29
14650: ST_TO_ADDR
// tech_time := tech_taurad ;
14651: LD_ADDR_VAR 0 13
14655: PUSH
14656: LD_INT 28
14658: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14659: LD_ADDR_VAR 0 11
14663: PUSH
14664: LD_VAR 0 1
14668: PPUSH
14669: CALL_OW 310
14673: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14674: LD_VAR 0 11
14678: PPUSH
14679: CALL_OW 247
14683: PUSH
14684: LD_INT 2
14686: EQUAL
14687: IFFALSE 14691
// exit ;
14689: GO 15207
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14691: LD_ADDR_VAR 0 8
14695: PUSH
14696: LD_INT 81
14698: PUSH
14699: LD_VAR 0 9
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 3
14710: PUSH
14711: LD_INT 21
14713: PUSH
14714: LD_INT 3
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PPUSH
14729: CALL_OW 69
14733: ST_TO_ADDR
// if not tmp then
14734: LD_VAR 0 8
14738: NOT
14739: IFFALSE 14743
// exit ;
14741: GO 15207
// if in_unit then
14743: LD_VAR 0 11
14747: IFFALSE 14771
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14749: LD_ADDR_VAR 0 10
14753: PUSH
14754: LD_VAR 0 8
14758: PPUSH
14759: LD_VAR 0 11
14763: PPUSH
14764: CALL_OW 74
14768: ST_TO_ADDR
14769: GO 14791
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14771: LD_ADDR_VAR 0 10
14775: PUSH
14776: LD_VAR 0 8
14780: PPUSH
14781: LD_VAR 0 1
14785: PPUSH
14786: CALL_OW 74
14790: ST_TO_ADDR
// if not enemy then
14791: LD_VAR 0 10
14795: NOT
14796: IFFALSE 14800
// exit ;
14798: GO 15207
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14800: LD_VAR 0 11
14804: IFFALSE 14826
14806: PUSH
14807: LD_VAR 0 11
14811: PPUSH
14812: LD_VAR 0 10
14816: PPUSH
14817: CALL_OW 296
14821: PUSH
14822: LD_INT 13
14824: GREATER
14825: AND
14826: IFTRUE 14848
14828: PUSH
14829: LD_VAR 0 1
14833: PPUSH
14834: LD_VAR 0 10
14838: PPUSH
14839: CALL_OW 296
14843: PUSH
14844: LD_INT 12
14846: GREATER
14847: OR
14848: IFFALSE 14852
// exit ;
14850: GO 15207
// missile := [ 1 ] ;
14852: LD_ADDR_VAR 0 14
14856: PUSH
14857: LD_INT 1
14859: PUSH
14860: EMPTY
14861: LIST
14862: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14863: LD_VAR 0 9
14867: PPUSH
14868: LD_VAR 0 12
14872: PPUSH
14873: CALL_OW 325
14877: IFFALSE 14906
// missile := Replace ( missile , missile + 1 , 2 ) ;
14879: LD_ADDR_VAR 0 14
14883: PUSH
14884: LD_VAR 0 14
14888: PPUSH
14889: LD_VAR 0 14
14893: PUSH
14894: LD_INT 1
14896: PLUS
14897: PPUSH
14898: LD_INT 2
14900: PPUSH
14901: CALL_OW 1
14905: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14906: LD_VAR 0 9
14910: PPUSH
14911: LD_VAR 0 13
14915: PPUSH
14916: CALL_OW 325
14920: IFFALSE 14944
14922: PUSH
14923: LD_VAR 0 10
14927: PPUSH
14928: CALL_OW 255
14932: PPUSH
14933: LD_VAR 0 13
14937: PPUSH
14938: CALL_OW 325
14942: NOT
14943: AND
14944: IFFALSE 14973
// missile := Replace ( missile , missile + 1 , 3 ) ;
14946: LD_ADDR_VAR 0 14
14950: PUSH
14951: LD_VAR 0 14
14955: PPUSH
14956: LD_VAR 0 14
14960: PUSH
14961: LD_INT 1
14963: PLUS
14964: PPUSH
14965: LD_INT 3
14967: PPUSH
14968: CALL_OW 1
14972: ST_TO_ADDR
// if missile < 2 then
14973: LD_VAR 0 14
14977: PUSH
14978: LD_INT 2
14980: LESS
14981: IFFALSE 14985
// exit ;
14983: GO 15207
// x := GetX ( enemy ) ;
14985: LD_ADDR_VAR 0 4
14989: PUSH
14990: LD_VAR 0 10
14994: PPUSH
14995: CALL_OW 250
14999: ST_TO_ADDR
// y := GetY ( enemy ) ;
15000: LD_ADDR_VAR 0 5
15004: PUSH
15005: LD_VAR 0 10
15009: PPUSH
15010: CALL_OW 251
15014: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
15015: LD_ADDR_VAR 0 6
15019: PUSH
15020: LD_VAR 0 4
15024: PUSH
15025: LD_INT 1
15027: NEG
15028: PPUSH
15029: LD_INT 1
15031: PPUSH
15032: CALL_OW 12
15036: PLUS
15037: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
15038: LD_ADDR_VAR 0 7
15042: PUSH
15043: LD_VAR 0 5
15047: PUSH
15048: LD_INT 1
15050: NEG
15051: PPUSH
15052: LD_INT 1
15054: PPUSH
15055: CALL_OW 12
15059: PLUS
15060: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15061: LD_VAR 0 6
15065: PPUSH
15066: LD_VAR 0 7
15070: PPUSH
15071: CALL_OW 488
15075: NOT
15076: IFFALSE 15098
// begin _x := x ;
15078: LD_ADDR_VAR 0 6
15082: PUSH
15083: LD_VAR 0 4
15087: ST_TO_ADDR
// _y := y ;
15088: LD_ADDR_VAR 0 7
15092: PUSH
15093: LD_VAR 0 5
15097: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
15098: LD_ADDR_VAR 0 3
15102: PUSH
15103: LD_INT 1
15105: PPUSH
15106: LD_VAR 0 14
15110: PPUSH
15111: CALL_OW 12
15115: ST_TO_ADDR
// case i of 1 :
15116: LD_VAR 0 3
15120: PUSH
15121: LD_INT 1
15123: DOUBLE
15124: EQUAL
15125: IFTRUE 15129
15127: GO 15146
15129: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
15130: LD_VAR 0 1
15134: PPUSH
15135: LD_VAR 0 10
15139: PPUSH
15140: CALL_OW 115
15144: GO 15207
15146: LD_INT 2
15148: DOUBLE
15149: EQUAL
15150: IFTRUE 15154
15152: GO 15176
15154: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
15155: LD_VAR 0 1
15159: PPUSH
15160: LD_VAR 0 6
15164: PPUSH
15165: LD_VAR 0 7
15169: PPUSH
15170: CALL_OW 153
15174: GO 15207
15176: LD_INT 3
15178: DOUBLE
15179: EQUAL
15180: IFTRUE 15184
15182: GO 15206
15184: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
15185: LD_VAR 0 1
15189: PPUSH
15190: LD_VAR 0 6
15194: PPUSH
15195: LD_VAR 0 7
15199: PPUSH
15200: CALL_OW 154
15204: GO 15207
15206: POP
// end ;
15207: LD_VAR 0 2
15211: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
15212: LD_INT 0
15214: PPUSH
15215: PPUSH
15216: PPUSH
15217: PPUSH
15218: PPUSH
15219: PPUSH
// if not unit or not building then
15220: LD_VAR 0 1
15224: NOT
15225: IFTRUE 15234
15227: PUSH
15228: LD_VAR 0 2
15232: NOT
15233: OR
15234: IFFALSE 15238
// exit ;
15236: GO 15396
// x := GetX ( building ) ;
15238: LD_ADDR_VAR 0 5
15242: PUSH
15243: LD_VAR 0 2
15247: PPUSH
15248: CALL_OW 250
15252: ST_TO_ADDR
// y := GetY ( building ) ;
15253: LD_ADDR_VAR 0 6
15257: PUSH
15258: LD_VAR 0 2
15262: PPUSH
15263: CALL_OW 251
15267: ST_TO_ADDR
// for i := 0 to 5 do
15268: LD_ADDR_VAR 0 4
15272: PUSH
15273: DOUBLE
15274: LD_INT 0
15276: DEC
15277: ST_TO_ADDR
15278: LD_INT 5
15280: PUSH
15281: FOR_TO
15282: IFFALSE 15394
// begin _x := ShiftX ( x , i , 3 ) ;
15284: LD_ADDR_VAR 0 7
15288: PUSH
15289: LD_VAR 0 5
15293: PPUSH
15294: LD_VAR 0 4
15298: PPUSH
15299: LD_INT 3
15301: PPUSH
15302: CALL_OW 272
15306: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
15307: LD_ADDR_VAR 0 8
15311: PUSH
15312: LD_VAR 0 6
15316: PPUSH
15317: LD_VAR 0 4
15321: PPUSH
15322: LD_INT 3
15324: PPUSH
15325: CALL_OW 273
15329: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15330: LD_VAR 0 7
15334: PPUSH
15335: LD_VAR 0 8
15339: PPUSH
15340: CALL_OW 488
15344: NOT
15345: IFFALSE 15349
// continue ;
15347: GO 15281
// if HexInfo ( _x , _y ) = 0 then
15349: LD_VAR 0 7
15353: PPUSH
15354: LD_VAR 0 8
15358: PPUSH
15359: CALL_OW 428
15363: PUSH
15364: LD_INT 0
15366: EQUAL
15367: IFFALSE 15392
// begin ComMoveXY ( unit , _x , _y ) ;
15369: LD_VAR 0 1
15373: PPUSH
15374: LD_VAR 0 7
15378: PPUSH
15379: LD_VAR 0 8
15383: PPUSH
15384: CALL_OW 111
// exit ;
15388: POP
15389: POP
15390: GO 15396
// end ; end ;
15392: GO 15281
15394: POP
15395: POP
// end ;
15396: LD_VAR 0 3
15400: RET
// export function ScanBase ( side , base_area ) ; begin
15401: LD_INT 0
15403: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
15404: LD_ADDR_VAR 0 3
15408: PUSH
15409: LD_VAR 0 2
15413: PPUSH
15414: LD_INT 81
15416: PUSH
15417: LD_VAR 0 1
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PPUSH
15426: CALL_OW 70
15430: ST_TO_ADDR
// end ;
15431: LD_VAR 0 3
15435: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15436: LD_INT 0
15438: PPUSH
15439: PPUSH
15440: PPUSH
15441: PPUSH
// result := false ;
15442: LD_ADDR_VAR 0 2
15446: PUSH
15447: LD_INT 0
15449: ST_TO_ADDR
// side := GetSide ( unit ) ;
15450: LD_ADDR_VAR 0 3
15454: PUSH
15455: LD_VAR 0 1
15459: PPUSH
15460: CALL_OW 255
15464: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15465: LD_ADDR_VAR 0 4
15469: PUSH
15470: LD_VAR 0 1
15474: PPUSH
15475: CALL_OW 248
15479: ST_TO_ADDR
// case nat of 1 :
15480: LD_VAR 0 4
15484: PUSH
15485: LD_INT 1
15487: DOUBLE
15488: EQUAL
15489: IFTRUE 15493
15491: GO 15504
15493: POP
// tech := tech_lassight ; 2 :
15494: LD_ADDR_VAR 0 5
15498: PUSH
15499: LD_INT 12
15501: ST_TO_ADDR
15502: GO 15543
15504: LD_INT 2
15506: DOUBLE
15507: EQUAL
15508: IFTRUE 15512
15510: GO 15523
15512: POP
// tech := tech_mortar ; 3 :
15513: LD_ADDR_VAR 0 5
15517: PUSH
15518: LD_INT 41
15520: ST_TO_ADDR
15521: GO 15543
15523: LD_INT 3
15525: DOUBLE
15526: EQUAL
15527: IFTRUE 15531
15529: GO 15542
15531: POP
// tech := tech_bazooka ; end ;
15532: LD_ADDR_VAR 0 5
15536: PUSH
15537: LD_INT 44
15539: ST_TO_ADDR
15540: GO 15543
15542: POP
// if Researched ( side , tech ) then
15543: LD_VAR 0 3
15547: PPUSH
15548: LD_VAR 0 5
15552: PPUSH
15553: CALL_OW 325
15557: IFFALSE 15584
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15559: LD_ADDR_VAR 0 2
15563: PUSH
15564: LD_INT 5
15566: PUSH
15567: LD_INT 8
15569: PUSH
15570: LD_INT 9
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: LIST
15577: PUSH
15578: LD_VAR 0 4
15582: ARRAY
15583: ST_TO_ADDR
// end ;
15584: LD_VAR 0 2
15588: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15589: LD_INT 0
15591: PPUSH
15592: PPUSH
15593: PPUSH
// if not mines then
15594: LD_VAR 0 2
15598: NOT
15599: IFFALSE 15603
// exit ;
15601: GO 15747
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15603: LD_ADDR_VAR 0 5
15607: PUSH
15608: LD_INT 81
15610: PUSH
15611: LD_VAR 0 1
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 3
15622: PUSH
15623: LD_INT 21
15625: PUSH
15626: LD_INT 3
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PPUSH
15641: CALL_OW 69
15645: ST_TO_ADDR
// for i in mines do
15646: LD_ADDR_VAR 0 4
15650: PUSH
15651: LD_VAR 0 2
15655: PUSH
15656: FOR_IN
15657: IFFALSE 15745
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15659: LD_VAR 0 4
15663: PUSH
15664: LD_INT 1
15666: ARRAY
15667: PPUSH
15668: LD_VAR 0 4
15672: PUSH
15673: LD_INT 2
15675: ARRAY
15676: PPUSH
15677: CALL_OW 458
15681: NOT
15682: IFFALSE 15686
// continue ;
15684: GO 15656
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15686: LD_VAR 0 4
15690: PUSH
15691: LD_INT 1
15693: ARRAY
15694: PPUSH
15695: LD_VAR 0 4
15699: PUSH
15700: LD_INT 2
15702: ARRAY
15703: PPUSH
15704: CALL_OW 428
15708: PUSH
15709: LD_VAR 0 5
15713: IN
15714: IFFALSE 15743
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15716: LD_VAR 0 4
15720: PUSH
15721: LD_INT 1
15723: ARRAY
15724: PPUSH
15725: LD_VAR 0 4
15729: PUSH
15730: LD_INT 2
15732: ARRAY
15733: PPUSH
15734: LD_VAR 0 1
15738: PPUSH
15739: CALL_OW 456
// end ;
15743: GO 15656
15745: POP
15746: POP
// end ;
15747: LD_VAR 0 3
15751: RET
// export function Count ( array ) ; begin
15752: LD_INT 0
15754: PPUSH
// result := array + 0 ;
15755: LD_ADDR_VAR 0 2
15759: PUSH
15760: LD_VAR 0 1
15764: PUSH
15765: LD_INT 0
15767: PLUS
15768: ST_TO_ADDR
// end ;
15769: LD_VAR 0 2
15773: RET
// export function IsEmpty ( building ) ; begin
15774: LD_INT 0
15776: PPUSH
// if not building then
15777: LD_VAR 0 1
15781: NOT
15782: IFFALSE 15786
// exit ;
15784: GO 15829
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15786: LD_ADDR_VAR 0 2
15790: PUSH
15791: LD_VAR 0 1
15795: PUSH
15796: LD_INT 22
15798: PUSH
15799: LD_VAR 0 1
15803: PPUSH
15804: CALL_OW 255
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 58
15815: PUSH
15816: EMPTY
15817: LIST
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PPUSH
15823: CALL_OW 69
15827: IN
15828: ST_TO_ADDR
// end ;
15829: LD_VAR 0 2
15833: RET
// export function IsNotFull ( building ) ; var places ; begin
15834: LD_INT 0
15836: PPUSH
15837: PPUSH
// if not building then
15838: LD_VAR 0 1
15842: NOT
15843: IFFALSE 15847
// exit ;
15845: GO 15875
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
15847: LD_ADDR_VAR 0 2
15851: PUSH
15852: LD_VAR 0 1
15856: PPUSH
15857: LD_INT 3
15859: PUSH
15860: LD_INT 62
15862: PUSH
15863: EMPTY
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PPUSH
15870: CALL_OW 72
15874: ST_TO_ADDR
// end ;
15875: LD_VAR 0 2
15879: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15880: LD_INT 0
15882: PPUSH
15883: PPUSH
15884: PPUSH
15885: PPUSH
// tmp := [ ] ;
15886: LD_ADDR_VAR 0 3
15890: PUSH
15891: EMPTY
15892: ST_TO_ADDR
// list := [ ] ;
15893: LD_ADDR_VAR 0 5
15897: PUSH
15898: EMPTY
15899: ST_TO_ADDR
// for i = 16 to 25 do
15900: LD_ADDR_VAR 0 4
15904: PUSH
15905: DOUBLE
15906: LD_INT 16
15908: DEC
15909: ST_TO_ADDR
15910: LD_INT 25
15912: PUSH
15913: FOR_TO
15914: IFFALSE 15987
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15916: LD_ADDR_VAR 0 3
15920: PUSH
15921: LD_VAR 0 3
15925: PUSH
15926: LD_INT 22
15928: PUSH
15929: LD_VAR 0 1
15933: PPUSH
15934: CALL_OW 255
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: PUSH
15943: LD_INT 91
15945: PUSH
15946: LD_VAR 0 1
15950: PUSH
15951: LD_INT 6
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 30
15961: PUSH
15962: LD_VAR 0 4
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: PUSH
15976: EMPTY
15977: LIST
15978: PPUSH
15979: CALL_OW 69
15983: ADD
15984: ST_TO_ADDR
15985: GO 15913
15987: POP
15988: POP
// for i = 1 to tmp do
15989: LD_ADDR_VAR 0 4
15993: PUSH
15994: DOUBLE
15995: LD_INT 1
15997: DEC
15998: ST_TO_ADDR
15999: LD_VAR 0 3
16003: PUSH
16004: FOR_TO
16005: IFFALSE 16093
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
16007: LD_ADDR_VAR 0 5
16011: PUSH
16012: LD_VAR 0 5
16016: PUSH
16017: LD_VAR 0 3
16021: PUSH
16022: LD_VAR 0 4
16026: ARRAY
16027: PPUSH
16028: CALL_OW 266
16032: PUSH
16033: LD_VAR 0 3
16037: PUSH
16038: LD_VAR 0 4
16042: ARRAY
16043: PPUSH
16044: CALL_OW 250
16048: PUSH
16049: LD_VAR 0 3
16053: PUSH
16054: LD_VAR 0 4
16058: ARRAY
16059: PPUSH
16060: CALL_OW 251
16064: PUSH
16065: LD_VAR 0 3
16069: PUSH
16070: LD_VAR 0 4
16074: ARRAY
16075: PPUSH
16076: CALL_OW 254
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: PUSH
16087: EMPTY
16088: LIST
16089: ADD
16090: ST_TO_ADDR
16091: GO 16004
16093: POP
16094: POP
// result := list ;
16095: LD_ADDR_VAR 0 2
16099: PUSH
16100: LD_VAR 0 5
16104: ST_TO_ADDR
// end ;
16105: LD_VAR 0 2
16109: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
16110: LD_INT 0
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
16117: PPUSH
16118: PPUSH
// if not factory then
16119: LD_VAR 0 1
16123: NOT
16124: IFFALSE 16128
// exit ;
16126: GO 16731
// if control = control_apeman then
16128: LD_VAR 0 4
16132: PUSH
16133: LD_INT 5
16135: EQUAL
16136: IFFALSE 16245
// begin tmp := UnitsInside ( factory ) ;
16138: LD_ADDR_VAR 0 8
16142: PUSH
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 313
16152: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
16153: LD_VAR 0 8
16157: PPUSH
16158: LD_INT 25
16160: PUSH
16161: LD_INT 12
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PPUSH
16168: CALL_OW 72
16172: NOT
16173: IFFALSE 16183
// control := control_manual ;
16175: LD_ADDR_VAR 0 4
16179: PUSH
16180: LD_INT 1
16182: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
16183: LD_ADDR_VAR 0 8
16187: PUSH
16188: LD_VAR 0 1
16192: PPUSH
16193: CALL 15880 0 1
16197: ST_TO_ADDR
// if tmp then
16198: LD_VAR 0 8
16202: IFFALSE 16245
// begin for i in tmp do
16204: LD_ADDR_VAR 0 7
16208: PUSH
16209: LD_VAR 0 8
16213: PUSH
16214: FOR_IN
16215: IFFALSE 16243
// if i [ 1 ] = b_ext_radio then
16217: LD_VAR 0 7
16221: PUSH
16222: LD_INT 1
16224: ARRAY
16225: PUSH
16226: LD_INT 22
16228: EQUAL
16229: IFFALSE 16241
// begin control := control_remote ;
16231: LD_ADDR_VAR 0 4
16235: PUSH
16236: LD_INT 2
16238: ST_TO_ADDR
// break ;
16239: GO 16243
// end ;
16241: GO 16214
16243: POP
16244: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16245: LD_VAR 0 1
16249: PPUSH
16250: LD_VAR 0 2
16254: PPUSH
16255: LD_VAR 0 3
16259: PPUSH
16260: LD_VAR 0 4
16264: PPUSH
16265: LD_VAR 0 5
16269: PPUSH
16270: CALL_OW 448
16274: IFFALSE 16309
// begin result := [ chassis , engine , control , weapon ] ;
16276: LD_ADDR_VAR 0 6
16280: PUSH
16281: LD_VAR 0 2
16285: PUSH
16286: LD_VAR 0 3
16290: PUSH
16291: LD_VAR 0 4
16295: PUSH
16296: LD_VAR 0 5
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: ST_TO_ADDR
// exit ;
16307: GO 16731
// end ; _chassis := AvailableChassisList ( factory ) ;
16309: LD_ADDR_VAR 0 9
16313: PUSH
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 475
16323: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16324: LD_ADDR_VAR 0 11
16328: PUSH
16329: LD_VAR 0 1
16333: PPUSH
16334: CALL_OW 476
16338: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16339: LD_ADDR_VAR 0 12
16343: PUSH
16344: LD_VAR 0 1
16348: PPUSH
16349: CALL_OW 477
16353: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16354: LD_ADDR_VAR 0 10
16358: PUSH
16359: LD_VAR 0 1
16363: PPUSH
16364: CALL_OW 478
16368: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
16369: LD_VAR 0 9
16373: NOT
16374: IFTRUE 16383
16376: PUSH
16377: LD_VAR 0 11
16381: NOT
16382: OR
16383: IFTRUE 16392
16385: PUSH
16386: LD_VAR 0 12
16390: NOT
16391: OR
16392: IFTRUE 16401
16394: PUSH
16395: LD_VAR 0 10
16399: NOT
16400: OR
16401: IFFALSE 16436
// begin result := [ chassis , engine , control , weapon ] ;
16403: LD_ADDR_VAR 0 6
16407: PUSH
16408: LD_VAR 0 2
16412: PUSH
16413: LD_VAR 0 3
16417: PUSH
16418: LD_VAR 0 4
16422: PUSH
16423: LD_VAR 0 5
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: ST_TO_ADDR
// exit ;
16434: GO 16731
// end ; if not chassis in _chassis then
16436: LD_VAR 0 2
16440: PUSH
16441: LD_VAR 0 9
16445: IN
16446: NOT
16447: IFFALSE 16473
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16449: LD_ADDR_VAR 0 2
16453: PUSH
16454: LD_VAR 0 9
16458: PUSH
16459: LD_INT 1
16461: PPUSH
16462: LD_VAR 0 9
16466: PPUSH
16467: CALL_OW 12
16471: ARRAY
16472: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16473: LD_VAR 0 2
16477: PPUSH
16478: LD_VAR 0 3
16482: PPUSH
16483: CALL 16736 0 2
16487: NOT
16488: IFFALSE 16549
// repeat engine := _engine [ 1 ] ;
16490: LD_ADDR_VAR 0 3
16494: PUSH
16495: LD_VAR 0 11
16499: PUSH
16500: LD_INT 1
16502: ARRAY
16503: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16504: LD_ADDR_VAR 0 11
16508: PUSH
16509: LD_VAR 0 11
16513: PPUSH
16514: LD_INT 1
16516: PPUSH
16517: CALL_OW 3
16521: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16522: LD_VAR 0 2
16526: PPUSH
16527: LD_VAR 0 3
16531: PPUSH
16532: CALL 16736 0 2
16536: IFTRUE 16547
16538: PUSH
16539: LD_VAR 0 11
16543: PUSH
16544: EMPTY
16545: EQUAL
16546: OR
16547: IFFALSE 16490
// if not control in _control then
16549: LD_VAR 0 4
16553: PUSH
16554: LD_VAR 0 12
16558: IN
16559: NOT
16560: IFFALSE 16586
// control := _control [ rand ( 1 , _control ) ] ;
16562: LD_ADDR_VAR 0 4
16566: PUSH
16567: LD_VAR 0 12
16571: PUSH
16572: LD_INT 1
16574: PPUSH
16575: LD_VAR 0 12
16579: PPUSH
16580: CALL_OW 12
16584: ARRAY
16585: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16586: LD_VAR 0 2
16590: PPUSH
16591: LD_VAR 0 5
16595: PPUSH
16596: CALL 16958 0 2
16600: NOT
16601: IFFALSE 16662
// repeat weapon := _weapon [ 1 ] ;
16603: LD_ADDR_VAR 0 5
16607: PUSH
16608: LD_VAR 0 10
16612: PUSH
16613: LD_INT 1
16615: ARRAY
16616: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16617: LD_ADDR_VAR 0 10
16621: PUSH
16622: LD_VAR 0 10
16626: PPUSH
16627: LD_INT 1
16629: PPUSH
16630: CALL_OW 3
16634: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16635: LD_VAR 0 2
16639: PPUSH
16640: LD_VAR 0 5
16644: PPUSH
16645: CALL 16958 0 2
16649: IFTRUE 16660
16651: PUSH
16652: LD_VAR 0 10
16656: PUSH
16657: EMPTY
16658: EQUAL
16659: OR
16660: IFFALSE 16603
// result := [ ] ;
16662: LD_ADDR_VAR 0 6
16666: PUSH
16667: EMPTY
16668: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16669: LD_VAR 0 1
16673: PPUSH
16674: LD_VAR 0 2
16678: PPUSH
16679: LD_VAR 0 3
16683: PPUSH
16684: LD_VAR 0 4
16688: PPUSH
16689: LD_VAR 0 5
16693: PPUSH
16694: CALL_OW 448
16698: IFFALSE 16731
// result := [ chassis , engine , control , weapon ] ;
16700: LD_ADDR_VAR 0 6
16704: PUSH
16705: LD_VAR 0 2
16709: PUSH
16710: LD_VAR 0 3
16714: PUSH
16715: LD_VAR 0 4
16719: PUSH
16720: LD_VAR 0 5
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: ST_TO_ADDR
// end ;
16731: LD_VAR 0 6
16735: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16736: LD_INT 0
16738: PPUSH
// if not chassis or not engine then
16739: LD_VAR 0 1
16743: NOT
16744: IFTRUE 16753
16746: PUSH
16747: LD_VAR 0 2
16751: NOT
16752: OR
16753: IFFALSE 16757
// exit ;
16755: GO 16953
// case engine of engine_solar :
16757: LD_VAR 0 2
16761: PUSH
16762: LD_INT 2
16764: DOUBLE
16765: EQUAL
16766: IFTRUE 16770
16768: GO 16808
16770: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16771: LD_ADDR_VAR 0 3
16775: PUSH
16776: LD_INT 11
16778: PUSH
16779: LD_INT 12
16781: PUSH
16782: LD_INT 13
16784: PUSH
16785: LD_INT 14
16787: PUSH
16788: LD_INT 1
16790: PUSH
16791: LD_INT 2
16793: PUSH
16794: LD_INT 3
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: ST_TO_ADDR
16806: GO 16937
16808: LD_INT 1
16810: DOUBLE
16811: EQUAL
16812: IFTRUE 16816
16814: GO 16878
16816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16817: LD_ADDR_VAR 0 3
16821: PUSH
16822: LD_INT 11
16824: PUSH
16825: LD_INT 12
16827: PUSH
16828: LD_INT 13
16830: PUSH
16831: LD_INT 14
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: LD_INT 2
16839: PUSH
16840: LD_INT 3
16842: PUSH
16843: LD_INT 4
16845: PUSH
16846: LD_INT 5
16848: PUSH
16849: LD_INT 21
16851: PUSH
16852: LD_INT 23
16854: PUSH
16855: LD_INT 22
16857: PUSH
16858: LD_INT 24
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: ST_TO_ADDR
16876: GO 16937
16878: LD_INT 3
16880: DOUBLE
16881: EQUAL
16882: IFTRUE 16886
16884: GO 16936
16886: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16887: LD_ADDR_VAR 0 3
16891: PUSH
16892: LD_INT 13
16894: PUSH
16895: LD_INT 14
16897: PUSH
16898: LD_INT 2
16900: PUSH
16901: LD_INT 3
16903: PUSH
16904: LD_INT 4
16906: PUSH
16907: LD_INT 5
16909: PUSH
16910: LD_INT 21
16912: PUSH
16913: LD_INT 22
16915: PUSH
16916: LD_INT 23
16918: PUSH
16919: LD_INT 24
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: ST_TO_ADDR
16934: GO 16937
16936: POP
// result := ( chassis in result ) ;
16937: LD_ADDR_VAR 0 3
16941: PUSH
16942: LD_VAR 0 1
16946: PUSH
16947: LD_VAR 0 3
16951: IN
16952: ST_TO_ADDR
// end ;
16953: LD_VAR 0 3
16957: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16958: LD_INT 0
16960: PPUSH
// if not chassis or not weapon then
16961: LD_VAR 0 1
16965: NOT
16966: IFTRUE 16975
16968: PUSH
16969: LD_VAR 0 2
16973: NOT
16974: OR
16975: IFFALSE 16979
// exit ;
16977: GO 18073
// case weapon of us_machine_gun :
16979: LD_VAR 0 2
16983: PUSH
16984: LD_INT 2
16986: DOUBLE
16987: EQUAL
16988: IFTRUE 16992
16990: GO 17022
16992: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16993: LD_ADDR_VAR 0 3
16997: PUSH
16998: LD_INT 1
17000: PUSH
17001: LD_INT 2
17003: PUSH
17004: LD_INT 3
17006: PUSH
17007: LD_INT 4
17009: PUSH
17010: LD_INT 5
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: ST_TO_ADDR
17020: GO 18057
17022: LD_INT 3
17024: DOUBLE
17025: EQUAL
17026: IFTRUE 17030
17028: GO 17060
17030: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
17031: LD_ADDR_VAR 0 3
17035: PUSH
17036: LD_INT 1
17038: PUSH
17039: LD_INT 2
17041: PUSH
17042: LD_INT 3
17044: PUSH
17045: LD_INT 4
17047: PUSH
17048: LD_INT 5
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: ST_TO_ADDR
17058: GO 18057
17060: LD_INT 11
17062: DOUBLE
17063: EQUAL
17064: IFTRUE 17068
17066: GO 17098
17068: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
17069: LD_ADDR_VAR 0 3
17073: PUSH
17074: LD_INT 1
17076: PUSH
17077: LD_INT 2
17079: PUSH
17080: LD_INT 3
17082: PUSH
17083: LD_INT 4
17085: PUSH
17086: LD_INT 5
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: ST_TO_ADDR
17096: GO 18057
17098: LD_INT 4
17100: DOUBLE
17101: EQUAL
17102: IFTRUE 17106
17104: GO 17132
17106: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
17107: LD_ADDR_VAR 0 3
17111: PUSH
17112: LD_INT 2
17114: PUSH
17115: LD_INT 3
17117: PUSH
17118: LD_INT 4
17120: PUSH
17121: LD_INT 5
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: ST_TO_ADDR
17130: GO 18057
17132: LD_INT 5
17134: DOUBLE
17135: EQUAL
17136: IFTRUE 17140
17138: GO 17166
17140: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
17141: LD_ADDR_VAR 0 3
17145: PUSH
17146: LD_INT 2
17148: PUSH
17149: LD_INT 3
17151: PUSH
17152: LD_INT 4
17154: PUSH
17155: LD_INT 5
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: ST_TO_ADDR
17164: GO 18057
17166: LD_INT 9
17168: DOUBLE
17169: EQUAL
17170: IFTRUE 17174
17172: GO 17200
17174: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
17175: LD_ADDR_VAR 0 3
17179: PUSH
17180: LD_INT 2
17182: PUSH
17183: LD_INT 3
17185: PUSH
17186: LD_INT 4
17188: PUSH
17189: LD_INT 5
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: ST_TO_ADDR
17198: GO 18057
17200: LD_INT 7
17202: DOUBLE
17203: EQUAL
17204: IFTRUE 17208
17206: GO 17234
17208: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
17209: LD_ADDR_VAR 0 3
17213: PUSH
17214: LD_INT 2
17216: PUSH
17217: LD_INT 3
17219: PUSH
17220: LD_INT 4
17222: PUSH
17223: LD_INT 5
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: ST_TO_ADDR
17232: GO 18057
17234: LD_INT 12
17236: DOUBLE
17237: EQUAL
17238: IFTRUE 17242
17240: GO 17268
17242: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
17243: LD_ADDR_VAR 0 3
17247: PUSH
17248: LD_INT 2
17250: PUSH
17251: LD_INT 3
17253: PUSH
17254: LD_INT 4
17256: PUSH
17257: LD_INT 5
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: ST_TO_ADDR
17266: GO 18057
17268: LD_INT 13
17270: DOUBLE
17271: EQUAL
17272: IFTRUE 17276
17274: GO 17302
17276: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
17277: LD_ADDR_VAR 0 3
17281: PUSH
17282: LD_INT 2
17284: PUSH
17285: LD_INT 3
17287: PUSH
17288: LD_INT 4
17290: PUSH
17291: LD_INT 5
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: ST_TO_ADDR
17300: GO 18057
17302: LD_INT 14
17304: DOUBLE
17305: EQUAL
17306: IFTRUE 17310
17308: GO 17328
17310: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
17311: LD_ADDR_VAR 0 3
17315: PUSH
17316: LD_INT 4
17318: PUSH
17319: LD_INT 5
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: ST_TO_ADDR
17326: GO 18057
17328: LD_INT 6
17330: DOUBLE
17331: EQUAL
17332: IFTRUE 17336
17334: GO 17354
17336: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17337: LD_ADDR_VAR 0 3
17341: PUSH
17342: LD_INT 4
17344: PUSH
17345: LD_INT 5
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: ST_TO_ADDR
17352: GO 18057
17354: LD_INT 10
17356: DOUBLE
17357: EQUAL
17358: IFTRUE 17362
17360: GO 17380
17362: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17363: LD_ADDR_VAR 0 3
17367: PUSH
17368: LD_INT 4
17370: PUSH
17371: LD_INT 5
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: ST_TO_ADDR
17378: GO 18057
17380: LD_INT 22
17382: DOUBLE
17383: EQUAL
17384: IFTRUE 17388
17386: GO 17414
17388: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17389: LD_ADDR_VAR 0 3
17393: PUSH
17394: LD_INT 11
17396: PUSH
17397: LD_INT 12
17399: PUSH
17400: LD_INT 13
17402: PUSH
17403: LD_INT 14
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: ST_TO_ADDR
17412: GO 18057
17414: LD_INT 23
17416: DOUBLE
17417: EQUAL
17418: IFTRUE 17422
17420: GO 17448
17422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17423: LD_ADDR_VAR 0 3
17427: PUSH
17428: LD_INT 11
17430: PUSH
17431: LD_INT 12
17433: PUSH
17434: LD_INT 13
17436: PUSH
17437: LD_INT 14
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: ST_TO_ADDR
17446: GO 18057
17448: LD_INT 24
17450: DOUBLE
17451: EQUAL
17452: IFTRUE 17456
17454: GO 17482
17456: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17457: LD_ADDR_VAR 0 3
17461: PUSH
17462: LD_INT 11
17464: PUSH
17465: LD_INT 12
17467: PUSH
17468: LD_INT 13
17470: PUSH
17471: LD_INT 14
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: ST_TO_ADDR
17480: GO 18057
17482: LD_INT 30
17484: DOUBLE
17485: EQUAL
17486: IFTRUE 17490
17488: GO 17516
17490: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17491: LD_ADDR_VAR 0 3
17495: PUSH
17496: LD_INT 11
17498: PUSH
17499: LD_INT 12
17501: PUSH
17502: LD_INT 13
17504: PUSH
17505: LD_INT 14
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: ST_TO_ADDR
17514: GO 18057
17516: LD_INT 25
17518: DOUBLE
17519: EQUAL
17520: IFTRUE 17524
17522: GO 17542
17524: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17525: LD_ADDR_VAR 0 3
17529: PUSH
17530: LD_INT 13
17532: PUSH
17533: LD_INT 14
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: ST_TO_ADDR
17540: GO 18057
17542: LD_INT 27
17544: DOUBLE
17545: EQUAL
17546: IFTRUE 17550
17548: GO 17568
17550: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
17551: LD_ADDR_VAR 0 3
17555: PUSH
17556: LD_INT 13
17558: PUSH
17559: LD_INT 14
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: ST_TO_ADDR
17566: GO 18057
17568: LD_INT 92
17570: DOUBLE
17571: EQUAL
17572: IFTRUE 17576
17574: GO 17602
17576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17577: LD_ADDR_VAR 0 3
17581: PUSH
17582: LD_INT 11
17584: PUSH
17585: LD_INT 12
17587: PUSH
17588: LD_INT 13
17590: PUSH
17591: LD_INT 14
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: ST_TO_ADDR
17600: GO 18057
17602: LD_INT 28
17604: DOUBLE
17605: EQUAL
17606: IFTRUE 17610
17608: GO 17628
17610: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17611: LD_ADDR_VAR 0 3
17615: PUSH
17616: LD_INT 13
17618: PUSH
17619: LD_INT 14
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: ST_TO_ADDR
17626: GO 18057
17628: LD_INT 29
17630: DOUBLE
17631: EQUAL
17632: IFTRUE 17636
17634: GO 17654
17636: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17637: LD_ADDR_VAR 0 3
17641: PUSH
17642: LD_INT 13
17644: PUSH
17645: LD_INT 14
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: ST_TO_ADDR
17652: GO 18057
17654: LD_INT 31
17656: DOUBLE
17657: EQUAL
17658: IFTRUE 17662
17660: GO 17680
17662: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17663: LD_ADDR_VAR 0 3
17667: PUSH
17668: LD_INT 13
17670: PUSH
17671: LD_INT 14
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: ST_TO_ADDR
17678: GO 18057
17680: LD_INT 26
17682: DOUBLE
17683: EQUAL
17684: IFTRUE 17688
17686: GO 17706
17688: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17689: LD_ADDR_VAR 0 3
17693: PUSH
17694: LD_INT 13
17696: PUSH
17697: LD_INT 14
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: ST_TO_ADDR
17704: GO 18057
17706: LD_INT 42
17708: DOUBLE
17709: EQUAL
17710: IFTRUE 17714
17712: GO 17740
17714: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17715: LD_ADDR_VAR 0 3
17719: PUSH
17720: LD_INT 21
17722: PUSH
17723: LD_INT 22
17725: PUSH
17726: LD_INT 23
17728: PUSH
17729: LD_INT 24
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: ST_TO_ADDR
17738: GO 18057
17740: LD_INT 43
17742: DOUBLE
17743: EQUAL
17744: IFTRUE 17748
17746: GO 17774
17748: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17749: LD_ADDR_VAR 0 3
17753: PUSH
17754: LD_INT 21
17756: PUSH
17757: LD_INT 22
17759: PUSH
17760: LD_INT 23
17762: PUSH
17763: LD_INT 24
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: ST_TO_ADDR
17772: GO 18057
17774: LD_INT 44
17776: DOUBLE
17777: EQUAL
17778: IFTRUE 17782
17780: GO 17808
17782: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17783: LD_ADDR_VAR 0 3
17787: PUSH
17788: LD_INT 21
17790: PUSH
17791: LD_INT 22
17793: PUSH
17794: LD_INT 23
17796: PUSH
17797: LD_INT 24
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: ST_TO_ADDR
17806: GO 18057
17808: LD_INT 45
17810: DOUBLE
17811: EQUAL
17812: IFTRUE 17816
17814: GO 17842
17816: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17817: LD_ADDR_VAR 0 3
17821: PUSH
17822: LD_INT 21
17824: PUSH
17825: LD_INT 22
17827: PUSH
17828: LD_INT 23
17830: PUSH
17831: LD_INT 24
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: ST_TO_ADDR
17840: GO 18057
17842: LD_INT 49
17844: DOUBLE
17845: EQUAL
17846: IFTRUE 17850
17848: GO 17876
17850: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17851: LD_ADDR_VAR 0 3
17855: PUSH
17856: LD_INT 21
17858: PUSH
17859: LD_INT 22
17861: PUSH
17862: LD_INT 23
17864: PUSH
17865: LD_INT 24
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: ST_TO_ADDR
17874: GO 18057
17876: LD_INT 51
17878: DOUBLE
17879: EQUAL
17880: IFTRUE 17884
17882: GO 17910
17884: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17885: LD_ADDR_VAR 0 3
17889: PUSH
17890: LD_INT 21
17892: PUSH
17893: LD_INT 22
17895: PUSH
17896: LD_INT 23
17898: PUSH
17899: LD_INT 24
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: ST_TO_ADDR
17908: GO 18057
17910: LD_INT 52
17912: DOUBLE
17913: EQUAL
17914: IFTRUE 17918
17916: GO 17944
17918: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17919: LD_ADDR_VAR 0 3
17923: PUSH
17924: LD_INT 21
17926: PUSH
17927: LD_INT 22
17929: PUSH
17930: LD_INT 23
17932: PUSH
17933: LD_INT 24
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: ST_TO_ADDR
17942: GO 18057
17944: LD_INT 53
17946: DOUBLE
17947: EQUAL
17948: IFTRUE 17952
17950: GO 17970
17952: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17953: LD_ADDR_VAR 0 3
17957: PUSH
17958: LD_INT 23
17960: PUSH
17961: LD_INT 24
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: ST_TO_ADDR
17968: GO 18057
17970: LD_INT 46
17972: DOUBLE
17973: EQUAL
17974: IFTRUE 17978
17976: GO 17996
17978: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17979: LD_ADDR_VAR 0 3
17983: PUSH
17984: LD_INT 23
17986: PUSH
17987: LD_INT 24
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: ST_TO_ADDR
17994: GO 18057
17996: LD_INT 47
17998: DOUBLE
17999: EQUAL
18000: IFTRUE 18004
18002: GO 18022
18004: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
18005: LD_ADDR_VAR 0 3
18009: PUSH
18010: LD_INT 23
18012: PUSH
18013: LD_INT 24
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: ST_TO_ADDR
18020: GO 18057
18022: LD_INT 98
18024: DOUBLE
18025: EQUAL
18026: IFTRUE 18030
18028: GO 18056
18030: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18031: LD_ADDR_VAR 0 3
18035: PUSH
18036: LD_INT 21
18038: PUSH
18039: LD_INT 22
18041: PUSH
18042: LD_INT 23
18044: PUSH
18045: LD_INT 24
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: ST_TO_ADDR
18054: GO 18057
18056: POP
// result := ( chassis in result ) ;
18057: LD_ADDR_VAR 0 3
18061: PUSH
18062: LD_VAR 0 1
18066: PUSH
18067: LD_VAR 0 3
18071: IN
18072: ST_TO_ADDR
// end ;
18073: LD_VAR 0 3
18077: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
18078: LD_INT 0
18080: PPUSH
18081: PPUSH
18082: PPUSH
18083: PPUSH
18084: PPUSH
18085: PPUSH
18086: PPUSH
// result := array ;
18087: LD_ADDR_VAR 0 5
18091: PUSH
18092: LD_VAR 0 1
18096: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
18097: LD_VAR 0 1
18101: NOT
18102: IFTRUE 18111
18104: PUSH
18105: LD_VAR 0 2
18109: NOT
18110: OR
18111: IFTRUE 18120
18113: PUSH
18114: LD_VAR 0 3
18118: NOT
18119: OR
18120: IFTRUE 18134
18122: PUSH
18123: LD_VAR 0 2
18127: PUSH
18128: LD_VAR 0 1
18132: GREATER
18133: OR
18134: IFTRUE 18148
18136: PUSH
18137: LD_VAR 0 3
18141: PUSH
18142: LD_VAR 0 1
18146: GREATER
18147: OR
18148: IFFALSE 18152
// exit ;
18150: GO 18448
// if direction then
18152: LD_VAR 0 4
18156: IFFALSE 18220
// begin d := 1 ;
18158: LD_ADDR_VAR 0 9
18162: PUSH
18163: LD_INT 1
18165: ST_TO_ADDR
// if i_from > i_to then
18166: LD_VAR 0 2
18170: PUSH
18171: LD_VAR 0 3
18175: GREATER
18176: IFFALSE 18202
// length := ( array - i_from ) + i_to else
18178: LD_ADDR_VAR 0 11
18182: PUSH
18183: LD_VAR 0 1
18187: PUSH
18188: LD_VAR 0 2
18192: MINUS
18193: PUSH
18194: LD_VAR 0 3
18198: PLUS
18199: ST_TO_ADDR
18200: GO 18218
// length := i_to - i_from ;
18202: LD_ADDR_VAR 0 11
18206: PUSH
18207: LD_VAR 0 3
18211: PUSH
18212: LD_VAR 0 2
18216: MINUS
18217: ST_TO_ADDR
// end else
18218: GO 18281
// begin d := - 1 ;
18220: LD_ADDR_VAR 0 9
18224: PUSH
18225: LD_INT 1
18227: NEG
18228: ST_TO_ADDR
// if i_from > i_to then
18229: LD_VAR 0 2
18233: PUSH
18234: LD_VAR 0 3
18238: GREATER
18239: IFFALSE 18259
// length := i_from - i_to else
18241: LD_ADDR_VAR 0 11
18245: PUSH
18246: LD_VAR 0 2
18250: PUSH
18251: LD_VAR 0 3
18255: MINUS
18256: ST_TO_ADDR
18257: GO 18281
// length := ( array - i_to ) + i_from ;
18259: LD_ADDR_VAR 0 11
18263: PUSH
18264: LD_VAR 0 1
18268: PUSH
18269: LD_VAR 0 3
18273: MINUS
18274: PUSH
18275: LD_VAR 0 2
18279: PLUS
18280: ST_TO_ADDR
// end ; if not length then
18281: LD_VAR 0 11
18285: NOT
18286: IFFALSE 18290
// exit ;
18288: GO 18448
// tmp := array ;
18290: LD_ADDR_VAR 0 10
18294: PUSH
18295: LD_VAR 0 1
18299: ST_TO_ADDR
// for i = 1 to length do
18300: LD_ADDR_VAR 0 6
18304: PUSH
18305: DOUBLE
18306: LD_INT 1
18308: DEC
18309: ST_TO_ADDR
18310: LD_VAR 0 11
18314: PUSH
18315: FOR_TO
18316: IFFALSE 18436
// begin for j = 1 to array do
18318: LD_ADDR_VAR 0 7
18322: PUSH
18323: DOUBLE
18324: LD_INT 1
18326: DEC
18327: ST_TO_ADDR
18328: LD_VAR 0 1
18332: PUSH
18333: FOR_TO
18334: IFFALSE 18422
// begin k := j + d ;
18336: LD_ADDR_VAR 0 8
18340: PUSH
18341: LD_VAR 0 7
18345: PUSH
18346: LD_VAR 0 9
18350: PLUS
18351: ST_TO_ADDR
// if k > array then
18352: LD_VAR 0 8
18356: PUSH
18357: LD_VAR 0 1
18361: GREATER
18362: IFFALSE 18372
// k := 1 ;
18364: LD_ADDR_VAR 0 8
18368: PUSH
18369: LD_INT 1
18371: ST_TO_ADDR
// if not k then
18372: LD_VAR 0 8
18376: NOT
18377: IFFALSE 18389
// k := array ;
18379: LD_ADDR_VAR 0 8
18383: PUSH
18384: LD_VAR 0 1
18388: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18389: LD_ADDR_VAR 0 10
18393: PUSH
18394: LD_VAR 0 10
18398: PPUSH
18399: LD_VAR 0 8
18403: PPUSH
18404: LD_VAR 0 1
18408: PUSH
18409: LD_VAR 0 7
18413: ARRAY
18414: PPUSH
18415: CALL_OW 1
18419: ST_TO_ADDR
// end ;
18420: GO 18333
18422: POP
18423: POP
// array := tmp ;
18424: LD_ADDR_VAR 0 1
18428: PUSH
18429: LD_VAR 0 10
18433: ST_TO_ADDR
// end ;
18434: GO 18315
18436: POP
18437: POP
// result := array ;
18438: LD_ADDR_VAR 0 5
18442: PUSH
18443: LD_VAR 0 1
18447: ST_TO_ADDR
// end ;
18448: LD_VAR 0 5
18452: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18453: LD_INT 0
18455: PPUSH
18456: PPUSH
// result := 0 ;
18457: LD_ADDR_VAR 0 3
18461: PUSH
18462: LD_INT 0
18464: ST_TO_ADDR
// if not array or not value in array then
18465: LD_VAR 0 1
18469: NOT
18470: IFTRUE 18485
18472: PUSH
18473: LD_VAR 0 2
18477: PUSH
18478: LD_VAR 0 1
18482: IN
18483: NOT
18484: OR
18485: IFFALSE 18489
// exit ;
18487: GO 18543
// for i = 1 to array do
18489: LD_ADDR_VAR 0 4
18493: PUSH
18494: DOUBLE
18495: LD_INT 1
18497: DEC
18498: ST_TO_ADDR
18499: LD_VAR 0 1
18503: PUSH
18504: FOR_TO
18505: IFFALSE 18541
// if value = array [ i ] then
18507: LD_VAR 0 2
18511: PUSH
18512: LD_VAR 0 1
18516: PUSH
18517: LD_VAR 0 4
18521: ARRAY
18522: EQUAL
18523: IFFALSE 18539
// begin result := i ;
18525: LD_ADDR_VAR 0 3
18529: PUSH
18530: LD_VAR 0 4
18534: ST_TO_ADDR
// exit ;
18535: POP
18536: POP
18537: GO 18543
// end ;
18539: GO 18504
18541: POP
18542: POP
// end ;
18543: LD_VAR 0 3
18547: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18548: LD_INT 0
18550: PPUSH
// vc_chassis := chassis ;
18551: LD_ADDR_OWVAR 37
18555: PUSH
18556: LD_VAR 0 1
18560: ST_TO_ADDR
// vc_engine := engine ;
18561: LD_ADDR_OWVAR 39
18565: PUSH
18566: LD_VAR 0 2
18570: ST_TO_ADDR
// vc_control := control ;
18571: LD_ADDR_OWVAR 38
18575: PUSH
18576: LD_VAR 0 3
18580: ST_TO_ADDR
// vc_weapon := weapon ;
18581: LD_ADDR_OWVAR 40
18585: PUSH
18586: LD_VAR 0 4
18590: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18591: LD_ADDR_OWVAR 41
18595: PUSH
18596: LD_VAR 0 5
18600: ST_TO_ADDR
// end ;
18601: LD_VAR 0 6
18605: RET
// export function WantPlant ( unit ) ; var task ; begin
18606: LD_INT 0
18608: PPUSH
18609: PPUSH
// result := false ;
18610: LD_ADDR_VAR 0 2
18614: PUSH
18615: LD_INT 0
18617: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18618: LD_ADDR_VAR 0 3
18622: PUSH
18623: LD_VAR 0 1
18627: PPUSH
18628: CALL_OW 437
18632: ST_TO_ADDR
// if task then
18633: LD_VAR 0 3
18637: IFFALSE 18665
// if task [ 1 ] [ 1 ] = p then
18639: LD_VAR 0 3
18643: PUSH
18644: LD_INT 1
18646: ARRAY
18647: PUSH
18648: LD_INT 1
18650: ARRAY
18651: PUSH
18652: LD_STRING p
18654: EQUAL
18655: IFFALSE 18665
// result := true ;
18657: LD_ADDR_VAR 0 2
18661: PUSH
18662: LD_INT 1
18664: ST_TO_ADDR
// end ;
18665: LD_VAR 0 2
18669: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18670: LD_INT 0
18672: PPUSH
18673: PPUSH
18674: PPUSH
18675: PPUSH
// if pos < 1 then
18676: LD_VAR 0 2
18680: PUSH
18681: LD_INT 1
18683: LESS
18684: IFFALSE 18688
// exit ;
18686: GO 18991
// if pos = 1 then
18688: LD_VAR 0 2
18692: PUSH
18693: LD_INT 1
18695: EQUAL
18696: IFFALSE 18729
// result := Replace ( arr , pos [ 1 ] , value ) else
18698: LD_ADDR_VAR 0 4
18702: PUSH
18703: LD_VAR 0 1
18707: PPUSH
18708: LD_VAR 0 2
18712: PUSH
18713: LD_INT 1
18715: ARRAY
18716: PPUSH
18717: LD_VAR 0 3
18721: PPUSH
18722: CALL_OW 1
18726: ST_TO_ADDR
18727: GO 18991
// begin tmp := arr ;
18729: LD_ADDR_VAR 0 6
18733: PUSH
18734: LD_VAR 0 1
18738: ST_TO_ADDR
// s_arr := [ tmp ] ;
18739: LD_ADDR_VAR 0 7
18743: PUSH
18744: LD_VAR 0 6
18748: PUSH
18749: EMPTY
18750: LIST
18751: ST_TO_ADDR
// for i = 1 to pos - 1 do
18752: LD_ADDR_VAR 0 5
18756: PUSH
18757: DOUBLE
18758: LD_INT 1
18760: DEC
18761: ST_TO_ADDR
18762: LD_VAR 0 2
18766: PUSH
18767: LD_INT 1
18769: MINUS
18770: PUSH
18771: FOR_TO
18772: IFFALSE 18817
// begin tmp := tmp [ pos [ i ] ] ;
18774: LD_ADDR_VAR 0 6
18778: PUSH
18779: LD_VAR 0 6
18783: PUSH
18784: LD_VAR 0 2
18788: PUSH
18789: LD_VAR 0 5
18793: ARRAY
18794: ARRAY
18795: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18796: LD_ADDR_VAR 0 7
18800: PUSH
18801: LD_VAR 0 7
18805: PUSH
18806: LD_VAR 0 6
18810: PUSH
18811: EMPTY
18812: LIST
18813: ADD
18814: ST_TO_ADDR
// end ;
18815: GO 18771
18817: POP
18818: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18819: LD_ADDR_VAR 0 6
18823: PUSH
18824: LD_VAR 0 6
18828: PPUSH
18829: LD_VAR 0 2
18833: PUSH
18834: LD_VAR 0 2
18838: ARRAY
18839: PPUSH
18840: LD_VAR 0 3
18844: PPUSH
18845: CALL_OW 1
18849: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18850: LD_ADDR_VAR 0 7
18854: PUSH
18855: LD_VAR 0 7
18859: PPUSH
18860: LD_VAR 0 7
18864: PPUSH
18865: LD_VAR 0 6
18869: PPUSH
18870: CALL_OW 1
18874: ST_TO_ADDR
// for i = s_arr downto 2 do
18875: LD_ADDR_VAR 0 5
18879: PUSH
18880: DOUBLE
18881: LD_VAR 0 7
18885: INC
18886: ST_TO_ADDR
18887: LD_INT 2
18889: PUSH
18890: FOR_DOWNTO
18891: IFFALSE 18975
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18893: LD_ADDR_VAR 0 6
18897: PUSH
18898: LD_VAR 0 7
18902: PUSH
18903: LD_VAR 0 5
18907: PUSH
18908: LD_INT 1
18910: MINUS
18911: ARRAY
18912: PPUSH
18913: LD_VAR 0 2
18917: PUSH
18918: LD_VAR 0 5
18922: PUSH
18923: LD_INT 1
18925: MINUS
18926: ARRAY
18927: PPUSH
18928: LD_VAR 0 7
18932: PUSH
18933: LD_VAR 0 5
18937: ARRAY
18938: PPUSH
18939: CALL_OW 1
18943: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18944: LD_ADDR_VAR 0 7
18948: PUSH
18949: LD_VAR 0 7
18953: PPUSH
18954: LD_VAR 0 5
18958: PUSH
18959: LD_INT 1
18961: MINUS
18962: PPUSH
18963: LD_VAR 0 6
18967: PPUSH
18968: CALL_OW 1
18972: ST_TO_ADDR
// end ;
18973: GO 18890
18975: POP
18976: POP
// result := s_arr [ 1 ] ;
18977: LD_ADDR_VAR 0 4
18981: PUSH
18982: LD_VAR 0 7
18986: PUSH
18987: LD_INT 1
18989: ARRAY
18990: ST_TO_ADDR
// end ; end ;
18991: LD_VAR 0 4
18995: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18996: LD_INT 0
18998: PPUSH
18999: PPUSH
// if not list then
19000: LD_VAR 0 1
19004: NOT
19005: IFFALSE 19009
// exit ;
19007: GO 19100
// i := list [ pos1 ] ;
19009: LD_ADDR_VAR 0 5
19013: PUSH
19014: LD_VAR 0 1
19018: PUSH
19019: LD_VAR 0 2
19023: ARRAY
19024: ST_TO_ADDR
// if not i then
19025: LD_VAR 0 5
19029: NOT
19030: IFFALSE 19034
// exit ;
19032: GO 19100
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
19034: LD_ADDR_VAR 0 1
19038: PUSH
19039: LD_VAR 0 1
19043: PPUSH
19044: LD_VAR 0 2
19048: PPUSH
19049: LD_VAR 0 1
19053: PUSH
19054: LD_VAR 0 3
19058: ARRAY
19059: PPUSH
19060: CALL_OW 1
19064: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
19065: LD_ADDR_VAR 0 1
19069: PUSH
19070: LD_VAR 0 1
19074: PPUSH
19075: LD_VAR 0 3
19079: PPUSH
19080: LD_VAR 0 5
19084: PPUSH
19085: CALL_OW 1
19089: ST_TO_ADDR
// result := list ;
19090: LD_ADDR_VAR 0 4
19094: PUSH
19095: LD_VAR 0 1
19099: ST_TO_ADDR
// end ;
19100: LD_VAR 0 4
19104: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
19105: LD_INT 0
19107: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
19108: LD_ADDR_VAR 0 5
19112: PUSH
19113: LD_VAR 0 1
19117: PPUSH
19118: CALL_OW 250
19122: PPUSH
19123: LD_VAR 0 1
19127: PPUSH
19128: CALL_OW 251
19132: PPUSH
19133: LD_VAR 0 2
19137: PPUSH
19138: LD_VAR 0 3
19142: PPUSH
19143: LD_VAR 0 4
19147: PPUSH
19148: CALL 19530 0 5
19152: ST_TO_ADDR
// end ;
19153: LD_VAR 0 5
19157: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
19158: LD_INT 0
19160: PPUSH
19161: PPUSH
19162: PPUSH
19163: PPUSH
// if not list or not unit then
19164: LD_VAR 0 2
19168: NOT
19169: IFTRUE 19178
19171: PUSH
19172: LD_VAR 0 1
19176: NOT
19177: OR
19178: IFFALSE 19182
// exit ;
19180: GO 19525
// result := [ ] ;
19182: LD_ADDR_VAR 0 5
19186: PUSH
19187: EMPTY
19188: ST_TO_ADDR
// for i in list do
19189: LD_ADDR_VAR 0 6
19193: PUSH
19194: LD_VAR 0 2
19198: PUSH
19199: FOR_IN
19200: IFFALSE 19418
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
19202: LD_ADDR_VAR 0 8
19206: PUSH
19207: LD_VAR 0 1
19211: PPUSH
19212: LD_VAR 0 6
19216: PUSH
19217: LD_INT 1
19219: ARRAY
19220: PPUSH
19221: LD_VAR 0 6
19225: PUSH
19226: LD_INT 2
19228: ARRAY
19229: PPUSH
19230: CALL_OW 297
19234: ST_TO_ADDR
// if not Count ( result ) then
19235: LD_VAR 0 5
19239: PPUSH
19240: CALL 15752 0 1
19244: NOT
19245: IFFALSE 19278
// begin result := Join ( result , [ i , tmp ] ) ;
19247: LD_ADDR_VAR 0 5
19251: PUSH
19252: LD_VAR 0 5
19256: PPUSH
19257: LD_VAR 0 6
19261: PUSH
19262: LD_VAR 0 8
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PPUSH
19271: CALL 51728 0 2
19275: ST_TO_ADDR
// continue ;
19276: GO 19199
// end ; if result [ result ] [ 2 ] <= tmp then
19278: LD_VAR 0 5
19282: PUSH
19283: LD_VAR 0 5
19287: ARRAY
19288: PUSH
19289: LD_INT 2
19291: ARRAY
19292: PUSH
19293: LD_VAR 0 8
19297: LESSEQUAL
19298: IFFALSE 19331
// result := Join ( result , [ i , tmp ] ) else
19300: LD_ADDR_VAR 0 5
19304: PUSH
19305: LD_VAR 0 5
19309: PPUSH
19310: LD_VAR 0 6
19314: PUSH
19315: LD_VAR 0 8
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PPUSH
19324: CALL 51728 0 2
19328: ST_TO_ADDR
19329: GO 19416
// begin for j := 1 to Count ( result ) do
19331: LD_ADDR_VAR 0 7
19335: PUSH
19336: DOUBLE
19337: LD_INT 1
19339: DEC
19340: ST_TO_ADDR
19341: LD_VAR 0 5
19345: PPUSH
19346: CALL 15752 0 1
19350: PUSH
19351: FOR_TO
19352: IFFALSE 19414
// begin if tmp < result [ j ] [ 2 ] then
19354: LD_VAR 0 8
19358: PUSH
19359: LD_VAR 0 5
19363: PUSH
19364: LD_VAR 0 7
19368: ARRAY
19369: PUSH
19370: LD_INT 2
19372: ARRAY
19373: LESS
19374: IFFALSE 19412
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19376: LD_ADDR_VAR 0 5
19380: PUSH
19381: LD_VAR 0 5
19385: PPUSH
19386: LD_VAR 0 7
19390: PPUSH
19391: LD_VAR 0 6
19395: PUSH
19396: LD_VAR 0 8
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PPUSH
19405: CALL_OW 2
19409: ST_TO_ADDR
// break ;
19410: GO 19414
// end ; end ;
19412: GO 19351
19414: POP
19415: POP
// end ; end ;
19416: GO 19199
19418: POP
19419: POP
// if result and not asc then
19420: LD_VAR 0 5
19424: IFFALSE 19433
19426: PUSH
19427: LD_VAR 0 3
19431: NOT
19432: AND
19433: IFFALSE 19450
// result := ReverseArray ( result ) ;
19435: LD_ADDR_VAR 0 5
19439: PUSH
19440: LD_VAR 0 5
19444: PPUSH
19445: CALL 46808 0 1
19449: ST_TO_ADDR
// tmp := [ ] ;
19450: LD_ADDR_VAR 0 8
19454: PUSH
19455: EMPTY
19456: ST_TO_ADDR
// if mode then
19457: LD_VAR 0 4
19461: IFFALSE 19525
// begin for i := 1 to result do
19463: LD_ADDR_VAR 0 6
19467: PUSH
19468: DOUBLE
19469: LD_INT 1
19471: DEC
19472: ST_TO_ADDR
19473: LD_VAR 0 5
19477: PUSH
19478: FOR_TO
19479: IFFALSE 19513
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
19481: LD_ADDR_VAR 0 8
19485: PUSH
19486: LD_VAR 0 8
19490: PPUSH
19491: LD_VAR 0 5
19495: PUSH
19496: LD_VAR 0 6
19500: ARRAY
19501: PUSH
19502: LD_INT 1
19504: ARRAY
19505: PPUSH
19506: CALL 51728 0 2
19510: ST_TO_ADDR
19511: GO 19478
19513: POP
19514: POP
// result := tmp ;
19515: LD_ADDR_VAR 0 5
19519: PUSH
19520: LD_VAR 0 8
19524: ST_TO_ADDR
// end ; end ;
19525: LD_VAR 0 5
19529: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
19530: LD_INT 0
19532: PPUSH
19533: PPUSH
19534: PPUSH
19535: PPUSH
// if not list then
19536: LD_VAR 0 3
19540: NOT
19541: IFFALSE 19545
// exit ;
19543: GO 19935
// result := [ ] ;
19545: LD_ADDR_VAR 0 6
19549: PUSH
19550: EMPTY
19551: ST_TO_ADDR
// for i in list do
19552: LD_ADDR_VAR 0 7
19556: PUSH
19557: LD_VAR 0 3
19561: PUSH
19562: FOR_IN
19563: IFFALSE 19765
// begin tmp := GetDistUnitXY ( i , x , y ) ;
19565: LD_ADDR_VAR 0 9
19569: PUSH
19570: LD_VAR 0 7
19574: PPUSH
19575: LD_VAR 0 1
19579: PPUSH
19580: LD_VAR 0 2
19584: PPUSH
19585: CALL_OW 297
19589: ST_TO_ADDR
// if not result then
19590: LD_VAR 0 6
19594: NOT
19595: IFFALSE 19621
// result := [ [ i , tmp ] ] else
19597: LD_ADDR_VAR 0 6
19601: PUSH
19602: LD_VAR 0 7
19606: PUSH
19607: LD_VAR 0 9
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: EMPTY
19617: LIST
19618: ST_TO_ADDR
19619: GO 19763
// begin if result [ result ] [ 2 ] <= tmp then
19621: LD_VAR 0 6
19625: PUSH
19626: LD_VAR 0 6
19630: ARRAY
19631: PUSH
19632: LD_INT 2
19634: ARRAY
19635: PUSH
19636: LD_VAR 0 9
19640: LESSEQUAL
19641: IFFALSE 19683
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
19643: LD_ADDR_VAR 0 6
19647: PUSH
19648: LD_VAR 0 6
19652: PPUSH
19653: LD_VAR 0 6
19657: PUSH
19658: LD_INT 1
19660: PLUS
19661: PPUSH
19662: LD_VAR 0 7
19666: PUSH
19667: LD_VAR 0 9
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PPUSH
19676: CALL_OW 2
19680: ST_TO_ADDR
19681: GO 19763
// for j := 1 to result do
19683: LD_ADDR_VAR 0 8
19687: PUSH
19688: DOUBLE
19689: LD_INT 1
19691: DEC
19692: ST_TO_ADDR
19693: LD_VAR 0 6
19697: PUSH
19698: FOR_TO
19699: IFFALSE 19761
// begin if tmp < result [ j ] [ 2 ] then
19701: LD_VAR 0 9
19705: PUSH
19706: LD_VAR 0 6
19710: PUSH
19711: LD_VAR 0 8
19715: ARRAY
19716: PUSH
19717: LD_INT 2
19719: ARRAY
19720: LESS
19721: IFFALSE 19759
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19723: LD_ADDR_VAR 0 6
19727: PUSH
19728: LD_VAR 0 6
19732: PPUSH
19733: LD_VAR 0 8
19737: PPUSH
19738: LD_VAR 0 7
19742: PUSH
19743: LD_VAR 0 9
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PPUSH
19752: CALL_OW 2
19756: ST_TO_ADDR
// break ;
19757: GO 19761
// end ; end ;
19759: GO 19698
19761: POP
19762: POP
// end ; end ;
19763: GO 19562
19765: POP
19766: POP
// if result and not asc then
19767: LD_VAR 0 6
19771: IFFALSE 19780
19773: PUSH
19774: LD_VAR 0 4
19778: NOT
19779: AND
19780: IFFALSE 19855
// begin tmp := result ;
19782: LD_ADDR_VAR 0 9
19786: PUSH
19787: LD_VAR 0 6
19791: ST_TO_ADDR
// for i = tmp downto 1 do
19792: LD_ADDR_VAR 0 7
19796: PUSH
19797: DOUBLE
19798: LD_VAR 0 9
19802: INC
19803: ST_TO_ADDR
19804: LD_INT 1
19806: PUSH
19807: FOR_DOWNTO
19808: IFFALSE 19853
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19810: LD_ADDR_VAR 0 6
19814: PUSH
19815: LD_VAR 0 6
19819: PPUSH
19820: LD_VAR 0 9
19824: PUSH
19825: LD_VAR 0 7
19829: MINUS
19830: PUSH
19831: LD_INT 1
19833: PLUS
19834: PPUSH
19835: LD_VAR 0 9
19839: PUSH
19840: LD_VAR 0 7
19844: ARRAY
19845: PPUSH
19846: CALL_OW 1
19850: ST_TO_ADDR
19851: GO 19807
19853: POP
19854: POP
// end ; tmp := [ ] ;
19855: LD_ADDR_VAR 0 9
19859: PUSH
19860: EMPTY
19861: ST_TO_ADDR
// if mode then
19862: LD_VAR 0 5
19866: IFFALSE 19935
// begin for i = 1 to result do
19868: LD_ADDR_VAR 0 7
19872: PUSH
19873: DOUBLE
19874: LD_INT 1
19876: DEC
19877: ST_TO_ADDR
19878: LD_VAR 0 6
19882: PUSH
19883: FOR_TO
19884: IFFALSE 19923
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19886: LD_ADDR_VAR 0 9
19890: PUSH
19891: LD_VAR 0 9
19895: PPUSH
19896: LD_VAR 0 7
19900: PPUSH
19901: LD_VAR 0 6
19905: PUSH
19906: LD_VAR 0 7
19910: ARRAY
19911: PUSH
19912: LD_INT 1
19914: ARRAY
19915: PPUSH
19916: CALL_OW 1
19920: ST_TO_ADDR
19921: GO 19883
19923: POP
19924: POP
// result := tmp ;
19925: LD_ADDR_VAR 0 6
19929: PUSH
19930: LD_VAR 0 9
19934: ST_TO_ADDR
// end ; end ;
19935: LD_VAR 0 6
19939: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19940: LD_INT 0
19942: PPUSH
19943: PPUSH
19944: PPUSH
19945: PPUSH
19946: PPUSH
19947: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19948: LD_ADDR_VAR 0 5
19952: PUSH
19953: LD_INT 0
19955: PUSH
19956: LD_INT 0
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: EMPTY
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: ST_TO_ADDR
// if not x or not y then
19970: LD_VAR 0 2
19974: NOT
19975: IFTRUE 19984
19977: PUSH
19978: LD_VAR 0 3
19982: NOT
19983: OR
19984: IFFALSE 19988
// exit ;
19986: GO 21644
// if not range then
19988: LD_VAR 0 4
19992: NOT
19993: IFFALSE 20003
// range := 10 ;
19995: LD_ADDR_VAR 0 4
19999: PUSH
20000: LD_INT 10
20002: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20003: LD_ADDR_VAR 0 8
20007: PUSH
20008: LD_INT 81
20010: PUSH
20011: LD_VAR 0 1
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 92
20022: PUSH
20023: LD_VAR 0 2
20027: PUSH
20028: LD_VAR 0 3
20032: PUSH
20033: LD_VAR 0 4
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 3
20046: PUSH
20047: LD_INT 21
20049: PUSH
20050: LD_INT 3
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: LIST
20065: PPUSH
20066: CALL_OW 69
20070: ST_TO_ADDR
// if not tmp then
20071: LD_VAR 0 8
20075: NOT
20076: IFFALSE 20080
// exit ;
20078: GO 21644
// for i in tmp do
20080: LD_ADDR_VAR 0 6
20084: PUSH
20085: LD_VAR 0 8
20089: PUSH
20090: FOR_IN
20091: IFFALSE 21619
// begin points := [ 0 , 0 , 0 ] ;
20093: LD_ADDR_VAR 0 9
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: LD_INT 0
20103: PUSH
20104: LD_INT 0
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: LIST
20111: ST_TO_ADDR
// bpoints := 1 ;
20112: LD_ADDR_VAR 0 10
20116: PUSH
20117: LD_INT 1
20119: ST_TO_ADDR
// case GetType ( i ) of unit_human :
20120: LD_VAR 0 6
20124: PPUSH
20125: CALL_OW 247
20129: PUSH
20130: LD_INT 1
20132: DOUBLE
20133: EQUAL
20134: IFTRUE 20138
20136: GO 20720
20138: POP
// begin if GetClass ( i ) = 1 then
20139: LD_VAR 0 6
20143: PPUSH
20144: CALL_OW 257
20148: PUSH
20149: LD_INT 1
20151: EQUAL
20152: IFFALSE 20173
// points := [ 10 , 5 , 3 ] ;
20154: LD_ADDR_VAR 0 9
20158: PUSH
20159: LD_INT 10
20161: PUSH
20162: LD_INT 5
20164: PUSH
20165: LD_INT 3
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: LIST
20172: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
20173: LD_VAR 0 6
20177: PPUSH
20178: CALL_OW 257
20182: PUSH
20183: LD_INT 2
20185: PUSH
20186: LD_INT 3
20188: PUSH
20189: LD_INT 4
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: LIST
20196: IN
20197: IFFALSE 20218
// points := [ 3 , 2 , 1 ] ;
20199: LD_ADDR_VAR 0 9
20203: PUSH
20204: LD_INT 3
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: LD_INT 1
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: LIST
20217: ST_TO_ADDR
// if GetClass ( i ) = 5 then
20218: LD_VAR 0 6
20222: PPUSH
20223: CALL_OW 257
20227: PUSH
20228: LD_INT 5
20230: EQUAL
20231: IFFALSE 20252
// points := [ 130 , 5 , 2 ] ;
20233: LD_ADDR_VAR 0 9
20237: PUSH
20238: LD_INT 130
20240: PUSH
20241: LD_INT 5
20243: PUSH
20244: LD_INT 2
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: LIST
20251: ST_TO_ADDR
// if GetClass ( i ) = 8 then
20252: LD_VAR 0 6
20256: PPUSH
20257: CALL_OW 257
20261: PUSH
20262: LD_INT 8
20264: EQUAL
20265: IFFALSE 20286
// points := [ 35 , 35 , 30 ] ;
20267: LD_ADDR_VAR 0 9
20271: PUSH
20272: LD_INT 35
20274: PUSH
20275: LD_INT 35
20277: PUSH
20278: LD_INT 30
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: LIST
20285: ST_TO_ADDR
// if GetClass ( i ) = 9 then
20286: LD_VAR 0 6
20290: PPUSH
20291: CALL_OW 257
20295: PUSH
20296: LD_INT 9
20298: EQUAL
20299: IFFALSE 20320
// points := [ 20 , 55 , 40 ] ;
20301: LD_ADDR_VAR 0 9
20305: PUSH
20306: LD_INT 20
20308: PUSH
20309: LD_INT 55
20311: PUSH
20312: LD_INT 40
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: LIST
20319: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
20320: LD_VAR 0 6
20324: PPUSH
20325: CALL_OW 257
20329: PUSH
20330: LD_INT 12
20332: PUSH
20333: LD_INT 16
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: IN
20340: IFFALSE 20361
// points := [ 5 , 3 , 2 ] ;
20342: LD_ADDR_VAR 0 9
20346: PUSH
20347: LD_INT 5
20349: PUSH
20350: LD_INT 3
20352: PUSH
20353: LD_INT 2
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: LIST
20360: ST_TO_ADDR
// if GetClass ( i ) = 17 then
20361: LD_VAR 0 6
20365: PPUSH
20366: CALL_OW 257
20370: PUSH
20371: LD_INT 17
20373: EQUAL
20374: IFFALSE 20395
// points := [ 100 , 50 , 75 ] ;
20376: LD_ADDR_VAR 0 9
20380: PUSH
20381: LD_INT 100
20383: PUSH
20384: LD_INT 50
20386: PUSH
20387: LD_INT 75
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: LIST
20394: ST_TO_ADDR
// if GetClass ( i ) = 15 then
20395: LD_VAR 0 6
20399: PPUSH
20400: CALL_OW 257
20404: PUSH
20405: LD_INT 15
20407: EQUAL
20408: IFFALSE 20429
// points := [ 10 , 5 , 3 ] ;
20410: LD_ADDR_VAR 0 9
20414: PUSH
20415: LD_INT 10
20417: PUSH
20418: LD_INT 5
20420: PUSH
20421: LD_INT 3
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: LIST
20428: ST_TO_ADDR
// if GetClass ( i ) = 14 then
20429: LD_VAR 0 6
20433: PPUSH
20434: CALL_OW 257
20438: PUSH
20439: LD_INT 14
20441: EQUAL
20442: IFFALSE 20463
// points := [ 10 , 0 , 0 ] ;
20444: LD_ADDR_VAR 0 9
20448: PUSH
20449: LD_INT 10
20451: PUSH
20452: LD_INT 0
20454: PUSH
20455: LD_INT 0
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: LIST
20462: ST_TO_ADDR
// if GetClass ( i ) = 11 then
20463: LD_VAR 0 6
20467: PPUSH
20468: CALL_OW 257
20472: PUSH
20473: LD_INT 11
20475: EQUAL
20476: IFFALSE 20497
// points := [ 30 , 10 , 5 ] ;
20478: LD_ADDR_VAR 0 9
20482: PUSH
20483: LD_INT 30
20485: PUSH
20486: LD_INT 10
20488: PUSH
20489: LD_INT 5
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: LIST
20496: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
20497: LD_VAR 0 1
20501: PPUSH
20502: LD_INT 5
20504: PPUSH
20505: CALL_OW 321
20509: PUSH
20510: LD_INT 2
20512: EQUAL
20513: IFFALSE 20530
// bpoints := bpoints * 1.8 ;
20515: LD_ADDR_VAR 0 10
20519: PUSH
20520: LD_VAR 0 10
20524: PUSH
20525: LD_REAL  1.80000000000000E+0000
20528: MUL
20529: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
20530: LD_VAR 0 6
20534: PPUSH
20535: CALL_OW 257
20539: PUSH
20540: LD_INT 1
20542: PUSH
20543: LD_INT 2
20545: PUSH
20546: LD_INT 3
20548: PUSH
20549: LD_INT 4
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: IN
20558: IFFALSE 20578
20560: PUSH
20561: LD_VAR 0 1
20565: PPUSH
20566: LD_INT 51
20568: PPUSH
20569: CALL_OW 321
20573: PUSH
20574: LD_INT 2
20576: EQUAL
20577: AND
20578: IFFALSE 20595
// bpoints := bpoints * 1.2 ;
20580: LD_ADDR_VAR 0 10
20584: PUSH
20585: LD_VAR 0 10
20589: PUSH
20590: LD_REAL  1.20000000000000E+0000
20593: MUL
20594: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
20595: LD_VAR 0 6
20599: PPUSH
20600: CALL_OW 257
20604: PUSH
20605: LD_INT 5
20607: PUSH
20608: LD_INT 7
20610: PUSH
20611: LD_INT 9
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: LIST
20618: IN
20619: IFFALSE 20639
20621: PUSH
20622: LD_VAR 0 1
20626: PPUSH
20627: LD_INT 52
20629: PPUSH
20630: CALL_OW 321
20634: PUSH
20635: LD_INT 2
20637: EQUAL
20638: AND
20639: IFFALSE 20656
// bpoints := bpoints * 1.5 ;
20641: LD_ADDR_VAR 0 10
20645: PUSH
20646: LD_VAR 0 10
20650: PUSH
20651: LD_REAL  1.50000000000000E+0000
20654: MUL
20655: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
20656: LD_VAR 0 1
20660: PPUSH
20661: LD_INT 66
20663: PPUSH
20664: CALL_OW 321
20668: PUSH
20669: LD_INT 2
20671: EQUAL
20672: IFFALSE 20689
// bpoints := bpoints * 1.1 ;
20674: LD_ADDR_VAR 0 10
20678: PUSH
20679: LD_VAR 0 10
20683: PUSH
20684: LD_REAL  1.10000000000000E+0000
20687: MUL
20688: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20689: LD_ADDR_VAR 0 10
20693: PUSH
20694: LD_VAR 0 10
20698: PUSH
20699: LD_VAR 0 6
20703: PPUSH
20704: LD_INT 1
20706: PPUSH
20707: CALL_OW 259
20711: PUSH
20712: LD_REAL  1.15000000000000E+0000
20715: MUL
20716: MUL
20717: ST_TO_ADDR
// end ; unit_vehicle :
20718: GO 21548
20720: LD_INT 2
20722: DOUBLE
20723: EQUAL
20724: IFTRUE 20728
20726: GO 21536
20728: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20729: LD_VAR 0 6
20733: PPUSH
20734: CALL_OW 264
20738: PUSH
20739: LD_INT 2
20741: PUSH
20742: LD_INT 42
20744: PUSH
20745: LD_INT 24
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: LIST
20752: IN
20753: IFFALSE 20774
// points := [ 25 , 5 , 3 ] ;
20755: LD_ADDR_VAR 0 9
20759: PUSH
20760: LD_INT 25
20762: PUSH
20763: LD_INT 5
20765: PUSH
20766: LD_INT 3
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: LIST
20773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20774: LD_VAR 0 6
20778: PPUSH
20779: CALL_OW 264
20783: PUSH
20784: LD_INT 4
20786: PUSH
20787: LD_INT 43
20789: PUSH
20790: LD_INT 25
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: LIST
20797: IN
20798: IFFALSE 20819
// points := [ 40 , 15 , 5 ] ;
20800: LD_ADDR_VAR 0 9
20804: PUSH
20805: LD_INT 40
20807: PUSH
20808: LD_INT 15
20810: PUSH
20811: LD_INT 5
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20819: LD_VAR 0 6
20823: PPUSH
20824: CALL_OW 264
20828: PUSH
20829: LD_INT 3
20831: PUSH
20832: LD_INT 23
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: IN
20839: IFFALSE 20860
// points := [ 7 , 25 , 8 ] ;
20841: LD_ADDR_VAR 0 9
20845: PUSH
20846: LD_INT 7
20848: PUSH
20849: LD_INT 25
20851: PUSH
20852: LD_INT 8
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: LIST
20859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20860: LD_VAR 0 6
20864: PPUSH
20865: CALL_OW 264
20869: PUSH
20870: LD_INT 5
20872: PUSH
20873: LD_INT 27
20875: PUSH
20876: LD_INT 44
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: LIST
20883: IN
20884: IFFALSE 20905
// points := [ 14 , 50 , 16 ] ;
20886: LD_ADDR_VAR 0 9
20890: PUSH
20891: LD_INT 14
20893: PUSH
20894: LD_INT 50
20896: PUSH
20897: LD_INT 16
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20905: LD_VAR 0 6
20909: PPUSH
20910: CALL_OW 264
20914: PUSH
20915: LD_INT 6
20917: PUSH
20918: LD_INT 46
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: IN
20925: IFFALSE 20946
// points := [ 32 , 120 , 70 ] ;
20927: LD_ADDR_VAR 0 9
20931: PUSH
20932: LD_INT 32
20934: PUSH
20935: LD_INT 120
20937: PUSH
20938: LD_INT 70
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: LIST
20945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
20946: LD_VAR 0 6
20950: PPUSH
20951: CALL_OW 264
20955: PUSH
20956: LD_INT 7
20958: PUSH
20959: LD_INT 28
20961: PUSH
20962: LD_INT 45
20964: PUSH
20965: LD_INT 92
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: IN
20974: IFFALSE 20995
// points := [ 35 , 20 , 45 ] ;
20976: LD_ADDR_VAR 0 9
20980: PUSH
20981: LD_INT 35
20983: PUSH
20984: LD_INT 20
20986: PUSH
20987: LD_INT 45
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: LIST
20994: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20995: LD_VAR 0 6
20999: PPUSH
21000: CALL_OW 264
21004: PUSH
21005: LD_INT 47
21007: PUSH
21008: EMPTY
21009: LIST
21010: IN
21011: IFFALSE 21032
// points := [ 67 , 45 , 75 ] ;
21013: LD_ADDR_VAR 0 9
21017: PUSH
21018: LD_INT 67
21020: PUSH
21021: LD_INT 45
21023: PUSH
21024: LD_INT 75
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: LIST
21031: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
21032: LD_VAR 0 6
21036: PPUSH
21037: CALL_OW 264
21041: PUSH
21042: LD_INT 26
21044: PUSH
21045: EMPTY
21046: LIST
21047: IN
21048: IFFALSE 21069
// points := [ 120 , 30 , 80 ] ;
21050: LD_ADDR_VAR 0 9
21054: PUSH
21055: LD_INT 120
21057: PUSH
21058: LD_INT 30
21060: PUSH
21061: LD_INT 80
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: LIST
21068: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
21069: LD_VAR 0 6
21073: PPUSH
21074: CALL_OW 264
21078: PUSH
21079: LD_INT 22
21081: PUSH
21082: EMPTY
21083: LIST
21084: IN
21085: IFFALSE 21106
// points := [ 40 , 1 , 1 ] ;
21087: LD_ADDR_VAR 0 9
21091: PUSH
21092: LD_INT 40
21094: PUSH
21095: LD_INT 1
21097: PUSH
21098: LD_INT 1
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: LIST
21105: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
21106: LD_VAR 0 6
21110: PPUSH
21111: CALL_OW 264
21115: PUSH
21116: LD_INT 29
21118: PUSH
21119: EMPTY
21120: LIST
21121: IN
21122: IFFALSE 21143
// points := [ 70 , 200 , 400 ] ;
21124: LD_ADDR_VAR 0 9
21128: PUSH
21129: LD_INT 70
21131: PUSH
21132: LD_INT 200
21134: PUSH
21135: LD_INT 400
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: LIST
21142: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
21143: LD_VAR 0 6
21147: PPUSH
21148: CALL_OW 264
21152: PUSH
21153: LD_INT 14
21155: PUSH
21156: LD_INT 53
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: IN
21163: IFFALSE 21184
// points := [ 40 , 10 , 20 ] ;
21165: LD_ADDR_VAR 0 9
21169: PUSH
21170: LD_INT 40
21172: PUSH
21173: LD_INT 10
21175: PUSH
21176: LD_INT 20
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: LIST
21183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
21184: LD_VAR 0 6
21188: PPUSH
21189: CALL_OW 264
21193: PUSH
21194: LD_INT 9
21196: PUSH
21197: EMPTY
21198: LIST
21199: IN
21200: IFFALSE 21221
// points := [ 5 , 70 , 20 ] ;
21202: LD_ADDR_VAR 0 9
21206: PUSH
21207: LD_INT 5
21209: PUSH
21210: LD_INT 70
21212: PUSH
21213: LD_INT 20
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: LIST
21220: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
21221: LD_VAR 0 6
21225: PPUSH
21226: CALL_OW 264
21230: PUSH
21231: LD_INT 10
21233: PUSH
21234: EMPTY
21235: LIST
21236: IN
21237: IFFALSE 21258
// points := [ 35 , 110 , 70 ] ;
21239: LD_ADDR_VAR 0 9
21243: PUSH
21244: LD_INT 35
21246: PUSH
21247: LD_INT 110
21249: PUSH
21250: LD_INT 70
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: LIST
21257: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
21258: LD_VAR 0 6
21262: PPUSH
21263: CALL_OW 265
21267: PUSH
21268: LD_INT 25
21270: EQUAL
21271: IFFALSE 21292
// points := [ 80 , 65 , 100 ] ;
21273: LD_ADDR_VAR 0 9
21277: PUSH
21278: LD_INT 80
21280: PUSH
21281: LD_INT 65
21283: PUSH
21284: LD_INT 100
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: LIST
21291: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
21292: LD_VAR 0 6
21296: PPUSH
21297: CALL_OW 263
21301: PUSH
21302: LD_INT 1
21304: EQUAL
21305: IFFALSE 21340
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
21307: LD_ADDR_VAR 0 10
21311: PUSH
21312: LD_VAR 0 10
21316: PUSH
21317: LD_VAR 0 6
21321: PPUSH
21322: CALL_OW 311
21326: PPUSH
21327: LD_INT 3
21329: PPUSH
21330: CALL_OW 259
21334: PUSH
21335: LD_INT 4
21337: MUL
21338: MUL
21339: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
21340: LD_VAR 0 6
21344: PPUSH
21345: CALL_OW 263
21349: PUSH
21350: LD_INT 2
21352: EQUAL
21353: IFFALSE 21404
// begin j := IsControledBy ( i ) ;
21355: LD_ADDR_VAR 0 7
21359: PUSH
21360: LD_VAR 0 6
21364: PPUSH
21365: CALL_OW 312
21369: ST_TO_ADDR
// if j then
21370: LD_VAR 0 7
21374: IFFALSE 21404
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
21376: LD_ADDR_VAR 0 10
21380: PUSH
21381: LD_VAR 0 10
21385: PUSH
21386: LD_VAR 0 7
21390: PPUSH
21391: LD_INT 3
21393: PPUSH
21394: CALL_OW 259
21398: PUSH
21399: LD_INT 3
21401: MUL
21402: MUL
21403: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
21404: LD_VAR 0 6
21408: PPUSH
21409: CALL_OW 264
21413: PUSH
21414: LD_INT 5
21416: PUSH
21417: LD_INT 6
21419: PUSH
21420: LD_INT 46
21422: PUSH
21423: LD_INT 44
21425: PUSH
21426: LD_INT 47
21428: PUSH
21429: LD_INT 45
21431: PUSH
21432: LD_INT 28
21434: PUSH
21435: LD_INT 7
21437: PUSH
21438: LD_INT 27
21440: PUSH
21441: LD_INT 29
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: IN
21456: IFFALSE 21476
21458: PUSH
21459: LD_VAR 0 1
21463: PPUSH
21464: LD_INT 52
21466: PPUSH
21467: CALL_OW 321
21471: PUSH
21472: LD_INT 2
21474: EQUAL
21475: AND
21476: IFFALSE 21493
// bpoints := bpoints * 1.2 ;
21478: LD_ADDR_VAR 0 10
21482: PUSH
21483: LD_VAR 0 10
21487: PUSH
21488: LD_REAL  1.20000000000000E+0000
21491: MUL
21492: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
21493: LD_VAR 0 6
21497: PPUSH
21498: CALL_OW 264
21502: PUSH
21503: LD_INT 6
21505: PUSH
21506: LD_INT 46
21508: PUSH
21509: LD_INT 47
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: LIST
21516: IN
21517: IFFALSE 21534
// bpoints := bpoints * 1.2 ;
21519: LD_ADDR_VAR 0 10
21523: PUSH
21524: LD_VAR 0 10
21528: PUSH
21529: LD_REAL  1.20000000000000E+0000
21532: MUL
21533: ST_TO_ADDR
// end ; unit_building :
21534: GO 21548
21536: LD_INT 3
21538: DOUBLE
21539: EQUAL
21540: IFTRUE 21544
21542: GO 21547
21544: POP
// ; end ;
21545: GO 21548
21547: POP
// for j = 1 to 3 do
21548: LD_ADDR_VAR 0 7
21552: PUSH
21553: DOUBLE
21554: LD_INT 1
21556: DEC
21557: ST_TO_ADDR
21558: LD_INT 3
21560: PUSH
21561: FOR_TO
21562: IFFALSE 21615
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
21564: LD_ADDR_VAR 0 5
21568: PUSH
21569: LD_VAR 0 5
21573: PPUSH
21574: LD_VAR 0 7
21578: PPUSH
21579: LD_VAR 0 5
21583: PUSH
21584: LD_VAR 0 7
21588: ARRAY
21589: PUSH
21590: LD_VAR 0 9
21594: PUSH
21595: LD_VAR 0 7
21599: ARRAY
21600: PUSH
21601: LD_VAR 0 10
21605: MUL
21606: PLUS
21607: PPUSH
21608: CALL_OW 1
21612: ST_TO_ADDR
21613: GO 21561
21615: POP
21616: POP
// end ;
21617: GO 20090
21619: POP
21620: POP
// result := Replace ( result , 4 , tmp ) ;
21621: LD_ADDR_VAR 0 5
21625: PUSH
21626: LD_VAR 0 5
21630: PPUSH
21631: LD_INT 4
21633: PPUSH
21634: LD_VAR 0 8
21638: PPUSH
21639: CALL_OW 1
21643: ST_TO_ADDR
// end ;
21644: LD_VAR 0 5
21648: RET
// export function DangerAtRange ( unit , range ) ; begin
21649: LD_INT 0
21651: PPUSH
// if not unit then
21652: LD_VAR 0 1
21656: NOT
21657: IFFALSE 21661
// exit ;
21659: GO 21706
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
21661: LD_ADDR_VAR 0 3
21665: PUSH
21666: LD_VAR 0 1
21670: PPUSH
21671: CALL_OW 255
21675: PPUSH
21676: LD_VAR 0 1
21680: PPUSH
21681: CALL_OW 250
21685: PPUSH
21686: LD_VAR 0 1
21690: PPUSH
21691: CALL_OW 251
21695: PPUSH
21696: LD_VAR 0 2
21700: PPUSH
21701: CALL 19940 0 4
21705: ST_TO_ADDR
// end ;
21706: LD_VAR 0 3
21710: RET
// export function DangerInArea ( side , area ) ; begin
21711: LD_INT 0
21713: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
21714: LD_ADDR_VAR 0 3
21718: PUSH
21719: LD_VAR 0 2
21723: PPUSH
21724: LD_INT 81
21726: PUSH
21727: LD_VAR 0 1
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PPUSH
21736: CALL_OW 70
21740: ST_TO_ADDR
// end ;
21741: LD_VAR 0 3
21745: RET
// export function IsExtension ( b ) ; begin
21746: LD_INT 0
21748: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21749: LD_ADDR_VAR 0 2
21753: PUSH
21754: LD_VAR 0 1
21758: PUSH
21759: LD_INT 23
21761: PUSH
21762: LD_INT 20
21764: PUSH
21765: LD_INT 22
21767: PUSH
21768: LD_INT 17
21770: PUSH
21771: LD_INT 24
21773: PUSH
21774: LD_INT 21
21776: PUSH
21777: LD_INT 19
21779: PUSH
21780: LD_INT 16
21782: PUSH
21783: LD_INT 25
21785: PUSH
21786: LD_INT 18
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: IN
21801: ST_TO_ADDR
// end ;
21802: LD_VAR 0 2
21806: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
21807: LD_INT 0
21809: PPUSH
21810: PPUSH
21811: PPUSH
// result := [ ] ;
21812: LD_ADDR_VAR 0 4
21816: PUSH
21817: EMPTY
21818: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21819: LD_ADDR_VAR 0 5
21823: PUSH
21824: LD_VAR 0 2
21828: PPUSH
21829: LD_INT 21
21831: PUSH
21832: LD_INT 3
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PPUSH
21839: CALL_OW 70
21843: ST_TO_ADDR
// if not tmp then
21844: LD_VAR 0 5
21848: NOT
21849: IFFALSE 21853
// exit ;
21851: GO 21917
// if checkLink then
21853: LD_VAR 0 3
21857: IFFALSE 21907
// begin for i in tmp do
21859: LD_ADDR_VAR 0 6
21863: PUSH
21864: LD_VAR 0 5
21868: PUSH
21869: FOR_IN
21870: IFFALSE 21905
// if GetBase ( i ) <> base then
21872: LD_VAR 0 6
21876: PPUSH
21877: CALL_OW 274
21881: PUSH
21882: LD_VAR 0 1
21886: NONEQUAL
21887: IFFALSE 21903
// ComLinkToBase ( base , i ) ;
21889: LD_VAR 0 1
21893: PPUSH
21894: LD_VAR 0 6
21898: PPUSH
21899: CALL_OW 169
21903: GO 21869
21905: POP
21906: POP
// end ; result := tmp ;
21907: LD_ADDR_VAR 0 4
21911: PUSH
21912: LD_VAR 0 5
21916: ST_TO_ADDR
// end ;
21917: LD_VAR 0 4
21921: RET
// export function ComComplete ( units , b ) ; var i ; begin
21922: LD_INT 0
21924: PPUSH
21925: PPUSH
// if not units then
21926: LD_VAR 0 1
21930: NOT
21931: IFFALSE 21935
// exit ;
21933: GO 22025
// for i in units do
21935: LD_ADDR_VAR 0 4
21939: PUSH
21940: LD_VAR 0 1
21944: PUSH
21945: FOR_IN
21946: IFFALSE 22023
// if BuildingStatus ( b ) = bs_build then
21948: LD_VAR 0 2
21952: PPUSH
21953: CALL_OW 461
21957: PUSH
21958: LD_INT 1
21960: EQUAL
21961: IFFALSE 22021
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21963: LD_VAR 0 4
21967: PPUSH
21968: LD_STRING h
21970: PUSH
21971: LD_VAR 0 2
21975: PPUSH
21976: CALL_OW 250
21980: PUSH
21981: LD_VAR 0 2
21985: PPUSH
21986: CALL_OW 251
21990: PUSH
21991: LD_VAR 0 2
21995: PUSH
21996: LD_INT 0
21998: PUSH
21999: LD_INT 0
22001: PUSH
22002: LD_INT 0
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: PUSH
22014: EMPTY
22015: LIST
22016: PPUSH
22017: CALL_OW 446
22021: GO 21945
22023: POP
22024: POP
// end ;
22025: LD_VAR 0 3
22029: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
22030: LD_INT 0
22032: PPUSH
22033: PPUSH
22034: PPUSH
22035: PPUSH
22036: PPUSH
22037: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
22038: LD_VAR 0 1
22042: NOT
22043: IFTRUE 22060
22045: PUSH
22046: LD_VAR 0 1
22050: PPUSH
22051: CALL_OW 263
22055: PUSH
22056: LD_INT 2
22058: NONEQUAL
22059: OR
22060: IFFALSE 22064
// exit ;
22062: GO 22380
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
22064: LD_ADDR_VAR 0 6
22068: PUSH
22069: LD_INT 22
22071: PUSH
22072: LD_VAR 0 1
22076: PPUSH
22077: CALL_OW 255
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 2
22088: PUSH
22089: LD_INT 30
22091: PUSH
22092: LD_INT 36
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 34
22101: PUSH
22102: LD_INT 31
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: LIST
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PPUSH
22118: CALL_OW 69
22122: ST_TO_ADDR
// if not tmp then
22123: LD_VAR 0 6
22127: NOT
22128: IFFALSE 22132
// exit ;
22130: GO 22380
// result := [ ] ;
22132: LD_ADDR_VAR 0 2
22136: PUSH
22137: EMPTY
22138: ST_TO_ADDR
// for i in tmp do
22139: LD_ADDR_VAR 0 3
22143: PUSH
22144: LD_VAR 0 6
22148: PUSH
22149: FOR_IN
22150: IFFALSE 22221
// begin t := UnitsInside ( i ) ;
22152: LD_ADDR_VAR 0 4
22156: PUSH
22157: LD_VAR 0 3
22161: PPUSH
22162: CALL_OW 313
22166: ST_TO_ADDR
// if t then
22167: LD_VAR 0 4
22171: IFFALSE 22219
// for j in t do
22173: LD_ADDR_VAR 0 7
22177: PUSH
22178: LD_VAR 0 4
22182: PUSH
22183: FOR_IN
22184: IFFALSE 22217
// result := Replace ( result , result + 1 , j ) ;
22186: LD_ADDR_VAR 0 2
22190: PUSH
22191: LD_VAR 0 2
22195: PPUSH
22196: LD_VAR 0 2
22200: PUSH
22201: LD_INT 1
22203: PLUS
22204: PPUSH
22205: LD_VAR 0 7
22209: PPUSH
22210: CALL_OW 1
22214: ST_TO_ADDR
22215: GO 22183
22217: POP
22218: POP
// end ;
22219: GO 22149
22221: POP
22222: POP
// if not result then
22223: LD_VAR 0 2
22227: NOT
22228: IFFALSE 22232
// exit ;
22230: GO 22380
// mech := result [ 1 ] ;
22232: LD_ADDR_VAR 0 5
22236: PUSH
22237: LD_VAR 0 2
22241: PUSH
22242: LD_INT 1
22244: ARRAY
22245: ST_TO_ADDR
// if result > 1 then
22246: LD_VAR 0 2
22250: PUSH
22251: LD_INT 1
22253: GREATER
22254: IFFALSE 22366
// begin for i = 2 to result do
22256: LD_ADDR_VAR 0 3
22260: PUSH
22261: DOUBLE
22262: LD_INT 2
22264: DEC
22265: ST_TO_ADDR
22266: LD_VAR 0 2
22270: PUSH
22271: FOR_TO
22272: IFFALSE 22364
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
22274: LD_ADDR_VAR 0 4
22278: PUSH
22279: LD_VAR 0 2
22283: PUSH
22284: LD_VAR 0 3
22288: ARRAY
22289: PPUSH
22290: LD_INT 3
22292: PPUSH
22293: CALL_OW 259
22297: PUSH
22298: LD_VAR 0 2
22302: PUSH
22303: LD_VAR 0 3
22307: ARRAY
22308: PPUSH
22309: CALL_OW 432
22313: MINUS
22314: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
22315: LD_VAR 0 4
22319: PUSH
22320: LD_VAR 0 5
22324: PPUSH
22325: LD_INT 3
22327: PPUSH
22328: CALL_OW 259
22332: PUSH
22333: LD_VAR 0 5
22337: PPUSH
22338: CALL_OW 432
22342: MINUS
22343: GREATEREQUAL
22344: IFFALSE 22362
// mech := result [ i ] ;
22346: LD_ADDR_VAR 0 5
22350: PUSH
22351: LD_VAR 0 2
22355: PUSH
22356: LD_VAR 0 3
22360: ARRAY
22361: ST_TO_ADDR
// end ;
22362: GO 22271
22364: POP
22365: POP
// end ; ComLinkTo ( vehicle , mech ) ;
22366: LD_VAR 0 1
22370: PPUSH
22371: LD_VAR 0 5
22375: PPUSH
22376: CALL_OW 135
// end ;
22380: LD_VAR 0 2
22384: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
22385: LD_INT 0
22387: PPUSH
22388: PPUSH
22389: PPUSH
22390: PPUSH
22391: PPUSH
22392: PPUSH
22393: PPUSH
22394: PPUSH
22395: PPUSH
22396: PPUSH
22397: PPUSH
22398: PPUSH
22399: PPUSH
// result := [ ] ;
22400: LD_ADDR_VAR 0 7
22404: PUSH
22405: EMPTY
22406: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
22407: LD_VAR 0 1
22411: PPUSH
22412: CALL_OW 266
22416: PUSH
22417: LD_INT 0
22419: PUSH
22420: LD_INT 1
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: IN
22427: NOT
22428: IFFALSE 22432
// exit ;
22430: GO 24072
// if name then
22432: LD_VAR 0 3
22436: IFFALSE 22452
// SetBName ( base_dep , name ) ;
22438: LD_VAR 0 1
22442: PPUSH
22443: LD_VAR 0 3
22447: PPUSH
22448: CALL_OW 500
// base := GetBase ( base_dep ) ;
22452: LD_ADDR_VAR 0 15
22456: PUSH
22457: LD_VAR 0 1
22461: PPUSH
22462: CALL_OW 274
22466: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
22467: LD_ADDR_VAR 0 16
22471: PUSH
22472: LD_VAR 0 1
22476: PPUSH
22477: CALL_OW 255
22481: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
22482: LD_ADDR_VAR 0 17
22486: PUSH
22487: LD_VAR 0 1
22491: PPUSH
22492: CALL_OW 248
22496: ST_TO_ADDR
// if sources then
22497: LD_VAR 0 5
22501: IFFALSE 22548
// for i = 1 to 3 do
22503: LD_ADDR_VAR 0 8
22507: PUSH
22508: DOUBLE
22509: LD_INT 1
22511: DEC
22512: ST_TO_ADDR
22513: LD_INT 3
22515: PUSH
22516: FOR_TO
22517: IFFALSE 22546
// AddResourceType ( base , i , sources [ i ] ) ;
22519: LD_VAR 0 15
22523: PPUSH
22524: LD_VAR 0 8
22528: PPUSH
22529: LD_VAR 0 5
22533: PUSH
22534: LD_VAR 0 8
22538: ARRAY
22539: PPUSH
22540: CALL_OW 276
22544: GO 22516
22546: POP
22547: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
22548: LD_ADDR_VAR 0 18
22552: PUSH
22553: LD_VAR 0 15
22557: PPUSH
22558: LD_VAR 0 2
22562: PPUSH
22563: LD_INT 1
22565: PPUSH
22566: CALL 21807 0 3
22570: ST_TO_ADDR
// InitHc ;
22571: CALL_OW 19
// InitUc ;
22575: CALL_OW 18
// uc_side := side ;
22579: LD_ADDR_OWVAR 20
22583: PUSH
22584: LD_VAR 0 16
22588: ST_TO_ADDR
// uc_nation := nation ;
22589: LD_ADDR_OWVAR 21
22593: PUSH
22594: LD_VAR 0 17
22598: ST_TO_ADDR
// if buildings then
22599: LD_VAR 0 18
22603: IFFALSE 23931
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
22605: LD_ADDR_VAR 0 19
22609: PUSH
22610: LD_VAR 0 18
22614: PPUSH
22615: LD_INT 2
22617: PUSH
22618: LD_INT 30
22620: PUSH
22621: LD_INT 29
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 30
22630: PUSH
22631: LD_INT 30
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: LIST
22642: PPUSH
22643: CALL_OW 72
22647: ST_TO_ADDR
// if tmp then
22648: LD_VAR 0 19
22652: IFFALSE 22700
// for i in tmp do
22654: LD_ADDR_VAR 0 8
22658: PUSH
22659: LD_VAR 0 19
22663: PUSH
22664: FOR_IN
22665: IFFALSE 22698
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
22667: LD_VAR 0 8
22671: PPUSH
22672: CALL_OW 250
22676: PPUSH
22677: LD_VAR 0 8
22681: PPUSH
22682: CALL_OW 251
22686: PPUSH
22687: LD_VAR 0 16
22691: PPUSH
22692: CALL_OW 441
22696: GO 22664
22698: POP
22699: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
22700: LD_VAR 0 18
22704: PPUSH
22705: LD_INT 2
22707: PUSH
22708: LD_INT 30
22710: PUSH
22711: LD_INT 32
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 30
22720: PUSH
22721: LD_INT 33
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: LIST
22732: PPUSH
22733: CALL_OW 72
22737: IFFALSE 22825
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22739: LD_ADDR_VAR 0 8
22743: PUSH
22744: LD_VAR 0 18
22748: PPUSH
22749: LD_INT 2
22751: PUSH
22752: LD_INT 30
22754: PUSH
22755: LD_INT 32
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 30
22764: PUSH
22765: LD_INT 33
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: LIST
22776: PPUSH
22777: CALL_OW 72
22781: PUSH
22782: FOR_IN
22783: IFFALSE 22823
// begin if not GetBWeapon ( i ) then
22785: LD_VAR 0 8
22789: PPUSH
22790: CALL_OW 269
22794: NOT
22795: IFFALSE 22821
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
22797: LD_VAR 0 8
22801: PPUSH
22802: LD_VAR 0 8
22806: PPUSH
22807: LD_VAR 0 2
22811: PPUSH
22812: CALL 24077 0 2
22816: PPUSH
22817: CALL_OW 431
// end ;
22821: GO 22782
22823: POP
22824: POP
// end ; for i = 1 to personel do
22825: LD_ADDR_VAR 0 8
22829: PUSH
22830: DOUBLE
22831: LD_INT 1
22833: DEC
22834: ST_TO_ADDR
22835: LD_VAR 0 6
22839: PUSH
22840: FOR_TO
22841: IFFALSE 23911
// begin if i > 4 then
22843: LD_VAR 0 8
22847: PUSH
22848: LD_INT 4
22850: GREATER
22851: IFFALSE 22855
// break ;
22853: GO 23911
// case i of 1 :
22855: LD_VAR 0 8
22859: PUSH
22860: LD_INT 1
22862: DOUBLE
22863: EQUAL
22864: IFTRUE 22868
22866: GO 22948
22868: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22869: LD_ADDR_VAR 0 12
22873: PUSH
22874: LD_VAR 0 18
22878: PPUSH
22879: LD_INT 22
22881: PUSH
22882: LD_VAR 0 16
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 58
22893: PUSH
22894: EMPTY
22895: LIST
22896: PUSH
22897: LD_INT 2
22899: PUSH
22900: LD_INT 30
22902: PUSH
22903: LD_INT 32
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 30
22912: PUSH
22913: LD_INT 4
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 30
22922: PUSH
22923: LD_INT 5
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: LIST
22940: PPUSH
22941: CALL_OW 72
22945: ST_TO_ADDR
22946: GO 23170
22948: LD_INT 2
22950: DOUBLE
22951: EQUAL
22952: IFTRUE 22956
22954: GO 23018
22956: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22957: LD_ADDR_VAR 0 12
22961: PUSH
22962: LD_VAR 0 18
22966: PPUSH
22967: LD_INT 22
22969: PUSH
22970: LD_VAR 0 16
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 2
22981: PUSH
22982: LD_INT 30
22984: PUSH
22985: LD_INT 0
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 30
22994: PUSH
22995: LD_INT 1
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: LIST
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PPUSH
23011: CALL_OW 72
23015: ST_TO_ADDR
23016: GO 23170
23018: LD_INT 3
23020: DOUBLE
23021: EQUAL
23022: IFTRUE 23026
23024: GO 23088
23026: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
23027: LD_ADDR_VAR 0 12
23031: PUSH
23032: LD_VAR 0 18
23036: PPUSH
23037: LD_INT 22
23039: PUSH
23040: LD_VAR 0 16
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 2
23051: PUSH
23052: LD_INT 30
23054: PUSH
23055: LD_INT 2
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 30
23064: PUSH
23065: LD_INT 3
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: LIST
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PPUSH
23081: CALL_OW 72
23085: ST_TO_ADDR
23086: GO 23170
23088: LD_INT 4
23090: DOUBLE
23091: EQUAL
23092: IFTRUE 23096
23094: GO 23169
23096: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
23097: LD_ADDR_VAR 0 12
23101: PUSH
23102: LD_VAR 0 18
23106: PPUSH
23107: LD_INT 22
23109: PUSH
23110: LD_VAR 0 16
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 2
23121: PUSH
23122: LD_INT 30
23124: PUSH
23125: LD_INT 6
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 30
23134: PUSH
23135: LD_INT 7
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 30
23144: PUSH
23145: LD_INT 8
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PPUSH
23162: CALL_OW 72
23166: ST_TO_ADDR
23167: GO 23170
23169: POP
// if i = 1 then
23170: LD_VAR 0 8
23174: PUSH
23175: LD_INT 1
23177: EQUAL
23178: IFFALSE 23289
// begin tmp := [ ] ;
23180: LD_ADDR_VAR 0 19
23184: PUSH
23185: EMPTY
23186: ST_TO_ADDR
// for j in f do
23187: LD_ADDR_VAR 0 9
23191: PUSH
23192: LD_VAR 0 12
23196: PUSH
23197: FOR_IN
23198: IFFALSE 23271
// if GetBType ( j ) = b_bunker then
23200: LD_VAR 0 9
23204: PPUSH
23205: CALL_OW 266
23209: PUSH
23210: LD_INT 32
23212: EQUAL
23213: IFFALSE 23240
// tmp := Insert ( tmp , 1 , j ) else
23215: LD_ADDR_VAR 0 19
23219: PUSH
23220: LD_VAR 0 19
23224: PPUSH
23225: LD_INT 1
23227: PPUSH
23228: LD_VAR 0 9
23232: PPUSH
23233: CALL_OW 2
23237: ST_TO_ADDR
23238: GO 23269
// tmp := Insert ( tmp , tmp + 1 , j ) ;
23240: LD_ADDR_VAR 0 19
23244: PUSH
23245: LD_VAR 0 19
23249: PPUSH
23250: LD_VAR 0 19
23254: PUSH
23255: LD_INT 1
23257: PLUS
23258: PPUSH
23259: LD_VAR 0 9
23263: PPUSH
23264: CALL_OW 2
23268: ST_TO_ADDR
23269: GO 23197
23271: POP
23272: POP
// if tmp then
23273: LD_VAR 0 19
23277: IFFALSE 23289
// f := tmp ;
23279: LD_ADDR_VAR 0 12
23283: PUSH
23284: LD_VAR 0 19
23288: ST_TO_ADDR
// end ; x := personel [ i ] ;
23289: LD_ADDR_VAR 0 13
23293: PUSH
23294: LD_VAR 0 6
23298: PUSH
23299: LD_VAR 0 8
23303: ARRAY
23304: ST_TO_ADDR
// if x = - 1 then
23305: LD_VAR 0 13
23309: PUSH
23310: LD_INT 1
23312: NEG
23313: EQUAL
23314: IFFALSE 23525
// begin for j in f do
23316: LD_ADDR_VAR 0 9
23320: PUSH
23321: LD_VAR 0 12
23325: PUSH
23326: FOR_IN
23327: IFFALSE 23521
// repeat InitHc ;
23329: CALL_OW 19
// if GetBType ( j ) = b_barracks then
23333: LD_VAR 0 9
23337: PPUSH
23338: CALL_OW 266
23342: PUSH
23343: LD_INT 5
23345: EQUAL
23346: IFFALSE 23416
// begin if UnitsInside ( j ) < 3 then
23348: LD_VAR 0 9
23352: PPUSH
23353: CALL_OW 313
23357: PUSH
23358: LD_INT 3
23360: LESS
23361: IFFALSE 23397
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23363: LD_INT 0
23365: PPUSH
23366: LD_INT 5
23368: PUSH
23369: LD_INT 8
23371: PUSH
23372: LD_INT 9
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: LIST
23379: PUSH
23380: LD_VAR 0 17
23384: ARRAY
23385: PPUSH
23386: LD_VAR 0 4
23390: PPUSH
23391: CALL_OW 380
23395: GO 23414
// PrepareHuman ( false , i , skill ) ;
23397: LD_INT 0
23399: PPUSH
23400: LD_VAR 0 8
23404: PPUSH
23405: LD_VAR 0 4
23409: PPUSH
23410: CALL_OW 380
// end else
23414: GO 23433
// PrepareHuman ( false , i , skill ) ;
23416: LD_INT 0
23418: PPUSH
23419: LD_VAR 0 8
23423: PPUSH
23424: LD_VAR 0 4
23428: PPUSH
23429: CALL_OW 380
// un := CreateHuman ;
23433: LD_ADDR_VAR 0 14
23437: PUSH
23438: CALL_OW 44
23442: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23443: LD_ADDR_VAR 0 7
23447: PUSH
23448: LD_VAR 0 7
23452: PPUSH
23453: LD_INT 1
23455: PPUSH
23456: LD_VAR 0 14
23460: PPUSH
23461: CALL_OW 2
23465: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
23466: LD_VAR 0 14
23470: PPUSH
23471: LD_VAR 0 9
23475: PPUSH
23476: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
23480: LD_VAR 0 9
23484: PPUSH
23485: CALL_OW 313
23489: PUSH
23490: LD_INT 6
23492: EQUAL
23493: IFTRUE 23517
23495: PUSH
23496: LD_VAR 0 9
23500: PPUSH
23501: CALL_OW 266
23505: PUSH
23506: LD_INT 32
23508: PUSH
23509: LD_INT 31
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: IN
23516: OR
23517: IFFALSE 23329
23519: GO 23326
23521: POP
23522: POP
// end else
23523: GO 23909
// for j = 1 to x do
23525: LD_ADDR_VAR 0 9
23529: PUSH
23530: DOUBLE
23531: LD_INT 1
23533: DEC
23534: ST_TO_ADDR
23535: LD_VAR 0 13
23539: PUSH
23540: FOR_TO
23541: IFFALSE 23907
// begin InitHc ;
23543: CALL_OW 19
// if not f then
23547: LD_VAR 0 12
23551: NOT
23552: IFFALSE 23641
// begin PrepareHuman ( false , i , skill ) ;
23554: LD_INT 0
23556: PPUSH
23557: LD_VAR 0 8
23561: PPUSH
23562: LD_VAR 0 4
23566: PPUSH
23567: CALL_OW 380
// un := CreateHuman ;
23571: LD_ADDR_VAR 0 14
23575: PUSH
23576: CALL_OW 44
23580: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23581: LD_ADDR_VAR 0 7
23585: PUSH
23586: LD_VAR 0 7
23590: PPUSH
23591: LD_INT 1
23593: PPUSH
23594: LD_VAR 0 14
23598: PPUSH
23599: CALL_OW 2
23603: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23604: LD_VAR 0 14
23608: PPUSH
23609: LD_VAR 0 1
23613: PPUSH
23614: CALL_OW 250
23618: PPUSH
23619: LD_VAR 0 1
23623: PPUSH
23624: CALL_OW 251
23628: PPUSH
23629: LD_INT 10
23631: PPUSH
23632: LD_INT 0
23634: PPUSH
23635: CALL_OW 50
// continue ;
23639: GO 23540
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
23641: LD_VAR 0 12
23645: PUSH
23646: LD_INT 1
23648: ARRAY
23649: PPUSH
23650: CALL_OW 313
23654: IFFALSE 23682
23656: PUSH
23657: LD_VAR 0 12
23661: PUSH
23662: LD_INT 1
23664: ARRAY
23665: PPUSH
23666: CALL_OW 266
23670: PUSH
23671: LD_INT 32
23673: PUSH
23674: LD_INT 31
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: IN
23681: AND
23682: IFTRUE 23703
23684: PUSH
23685: LD_VAR 0 12
23689: PUSH
23690: LD_INT 1
23692: ARRAY
23693: PPUSH
23694: CALL_OW 313
23698: PUSH
23699: LD_INT 6
23701: EQUAL
23702: OR
23703: IFFALSE 23723
// f := Delete ( f , 1 ) ;
23705: LD_ADDR_VAR 0 12
23709: PUSH
23710: LD_VAR 0 12
23714: PPUSH
23715: LD_INT 1
23717: PPUSH
23718: CALL_OW 3
23722: ST_TO_ADDR
// if not f then
23723: LD_VAR 0 12
23727: NOT
23728: IFFALSE 23746
// begin x := x + 2 ;
23730: LD_ADDR_VAR 0 13
23734: PUSH
23735: LD_VAR 0 13
23739: PUSH
23740: LD_INT 2
23742: PLUS
23743: ST_TO_ADDR
// continue ;
23744: GO 23540
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23746: LD_VAR 0 12
23750: PUSH
23751: LD_INT 1
23753: ARRAY
23754: PPUSH
23755: CALL_OW 266
23759: PUSH
23760: LD_INT 5
23762: EQUAL
23763: IFFALSE 23837
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23765: LD_VAR 0 12
23769: PUSH
23770: LD_INT 1
23772: ARRAY
23773: PPUSH
23774: CALL_OW 313
23778: PUSH
23779: LD_INT 3
23781: LESS
23782: IFFALSE 23818
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23784: LD_INT 0
23786: PPUSH
23787: LD_INT 5
23789: PUSH
23790: LD_INT 8
23792: PUSH
23793: LD_INT 9
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: LIST
23800: PUSH
23801: LD_VAR 0 17
23805: ARRAY
23806: PPUSH
23807: LD_VAR 0 4
23811: PPUSH
23812: CALL_OW 380
23816: GO 23835
// PrepareHuman ( false , i , skill ) ;
23818: LD_INT 0
23820: PPUSH
23821: LD_VAR 0 8
23825: PPUSH
23826: LD_VAR 0 4
23830: PPUSH
23831: CALL_OW 380
// end else
23835: GO 23854
// PrepareHuman ( false , i , skill ) ;
23837: LD_INT 0
23839: PPUSH
23840: LD_VAR 0 8
23844: PPUSH
23845: LD_VAR 0 4
23849: PPUSH
23850: CALL_OW 380
// un := CreateHuman ;
23854: LD_ADDR_VAR 0 14
23858: PUSH
23859: CALL_OW 44
23863: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23864: LD_ADDR_VAR 0 7
23868: PUSH
23869: LD_VAR 0 7
23873: PPUSH
23874: LD_INT 1
23876: PPUSH
23877: LD_VAR 0 14
23881: PPUSH
23882: CALL_OW 2
23886: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23887: LD_VAR 0 14
23891: PPUSH
23892: LD_VAR 0 12
23896: PUSH
23897: LD_INT 1
23899: ARRAY
23900: PPUSH
23901: CALL_OW 52
// end ;
23905: GO 23540
23907: POP
23908: POP
// end ;
23909: GO 22840
23911: POP
23912: POP
// result := result ^ buildings ;
23913: LD_ADDR_VAR 0 7
23917: PUSH
23918: LD_VAR 0 7
23922: PUSH
23923: LD_VAR 0 18
23927: ADD
23928: ST_TO_ADDR
// end else
23929: GO 24072
// begin for i = 1 to personel do
23931: LD_ADDR_VAR 0 8
23935: PUSH
23936: DOUBLE
23937: LD_INT 1
23939: DEC
23940: ST_TO_ADDR
23941: LD_VAR 0 6
23945: PUSH
23946: FOR_TO
23947: IFFALSE 24070
// begin if i > 4 then
23949: LD_VAR 0 8
23953: PUSH
23954: LD_INT 4
23956: GREATER
23957: IFFALSE 23961
// break ;
23959: GO 24070
// x := personel [ i ] ;
23961: LD_ADDR_VAR 0 13
23965: PUSH
23966: LD_VAR 0 6
23970: PUSH
23971: LD_VAR 0 8
23975: ARRAY
23976: ST_TO_ADDR
// if x = - 1 then
23977: LD_VAR 0 13
23981: PUSH
23982: LD_INT 1
23984: NEG
23985: EQUAL
23986: IFFALSE 23990
// continue ;
23988: GO 23946
// PrepareHuman ( false , i , skill ) ;
23990: LD_INT 0
23992: PPUSH
23993: LD_VAR 0 8
23997: PPUSH
23998: LD_VAR 0 4
24002: PPUSH
24003: CALL_OW 380
// un := CreateHuman ;
24007: LD_ADDR_VAR 0 14
24011: PUSH
24012: CALL_OW 44
24016: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24017: LD_VAR 0 14
24021: PPUSH
24022: LD_VAR 0 1
24026: PPUSH
24027: CALL_OW 250
24031: PPUSH
24032: LD_VAR 0 1
24036: PPUSH
24037: CALL_OW 251
24041: PPUSH
24042: LD_INT 10
24044: PPUSH
24045: LD_INT 0
24047: PPUSH
24048: CALL_OW 50
// result := result ^ un ;
24052: LD_ADDR_VAR 0 7
24056: PUSH
24057: LD_VAR 0 7
24061: PUSH
24062: LD_VAR 0 14
24066: ADD
24067: ST_TO_ADDR
// end ;
24068: GO 23946
24070: POP
24071: POP
// end ; end ;
24072: LD_VAR 0 7
24076: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
24077: LD_INT 0
24079: PPUSH
24080: PPUSH
24081: PPUSH
24082: PPUSH
24083: PPUSH
24084: PPUSH
24085: PPUSH
24086: PPUSH
24087: PPUSH
24088: PPUSH
24089: PPUSH
24090: PPUSH
24091: PPUSH
24092: PPUSH
24093: PPUSH
24094: PPUSH
// result := false ;
24095: LD_ADDR_VAR 0 3
24099: PUSH
24100: LD_INT 0
24102: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
24103: LD_VAR 0 1
24107: NOT
24108: IFTRUE 24133
24110: PUSH
24111: LD_VAR 0 1
24115: PPUSH
24116: CALL_OW 266
24120: PUSH
24121: LD_INT 32
24123: PUSH
24124: LD_INT 33
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: IN
24131: NOT
24132: OR
24133: IFFALSE 24137
// exit ;
24135: GO 25272
// nat := GetNation ( tower ) ;
24137: LD_ADDR_VAR 0 12
24141: PUSH
24142: LD_VAR 0 1
24146: PPUSH
24147: CALL_OW 248
24151: ST_TO_ADDR
// side := GetSide ( tower ) ;
24152: LD_ADDR_VAR 0 16
24156: PUSH
24157: LD_VAR 0 1
24161: PPUSH
24162: CALL_OW 255
24166: ST_TO_ADDR
// x := GetX ( tower ) ;
24167: LD_ADDR_VAR 0 10
24171: PUSH
24172: LD_VAR 0 1
24176: PPUSH
24177: CALL_OW 250
24181: ST_TO_ADDR
// y := GetY ( tower ) ;
24182: LD_ADDR_VAR 0 11
24186: PUSH
24187: LD_VAR 0 1
24191: PPUSH
24192: CALL_OW 251
24196: ST_TO_ADDR
// if not x or not y then
24197: LD_VAR 0 10
24201: NOT
24202: IFTRUE 24211
24204: PUSH
24205: LD_VAR 0 11
24209: NOT
24210: OR
24211: IFFALSE 24215
// exit ;
24213: GO 25272
// weapon := 0 ;
24215: LD_ADDR_VAR 0 18
24219: PUSH
24220: LD_INT 0
24222: ST_TO_ADDR
// fac_list := [ ] ;
24223: LD_ADDR_VAR 0 17
24227: PUSH
24228: EMPTY
24229: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
24230: LD_ADDR_VAR 0 6
24234: PUSH
24235: LD_VAR 0 1
24239: PPUSH
24240: CALL_OW 274
24244: PPUSH
24245: LD_VAR 0 2
24249: PPUSH
24250: LD_INT 0
24252: PPUSH
24253: CALL 21807 0 3
24257: PPUSH
24258: LD_INT 30
24260: PUSH
24261: LD_INT 3
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PPUSH
24268: CALL_OW 72
24272: ST_TO_ADDR
// if not factories then
24273: LD_VAR 0 6
24277: NOT
24278: IFFALSE 24282
// exit ;
24280: GO 25272
// for i in factories do
24282: LD_ADDR_VAR 0 8
24286: PUSH
24287: LD_VAR 0 6
24291: PUSH
24292: FOR_IN
24293: IFFALSE 24318
// fac_list := fac_list union AvailableWeaponList ( i ) ;
24295: LD_ADDR_VAR 0 17
24299: PUSH
24300: LD_VAR 0 17
24304: PUSH
24305: LD_VAR 0 8
24309: PPUSH
24310: CALL_OW 478
24314: UNION
24315: ST_TO_ADDR
24316: GO 24292
24318: POP
24319: POP
// if not fac_list then
24320: LD_VAR 0 17
24324: NOT
24325: IFFALSE 24329
// exit ;
24327: GO 25272
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
24329: LD_ADDR_VAR 0 5
24333: PUSH
24334: LD_INT 4
24336: PUSH
24337: LD_INT 5
24339: PUSH
24340: LD_INT 9
24342: PUSH
24343: LD_INT 10
24345: PUSH
24346: LD_INT 6
24348: PUSH
24349: LD_INT 7
24351: PUSH
24352: LD_INT 11
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 27
24366: PUSH
24367: LD_INT 28
24369: PUSH
24370: LD_INT 26
24372: PUSH
24373: LD_INT 30
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 43
24384: PUSH
24385: LD_INT 44
24387: PUSH
24388: LD_INT 46
24390: PUSH
24391: LD_INT 45
24393: PUSH
24394: LD_INT 47
24396: PUSH
24397: LD_INT 49
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: LIST
24412: PUSH
24413: LD_VAR 0 12
24417: ARRAY
24418: ST_TO_ADDR
// list := list isect fac_list ;
24419: LD_ADDR_VAR 0 5
24423: PUSH
24424: LD_VAR 0 5
24428: PUSH
24429: LD_VAR 0 17
24433: ISECT
24434: ST_TO_ADDR
// if not list then
24435: LD_VAR 0 5
24439: NOT
24440: IFFALSE 24444
// exit ;
24442: GO 25272
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
24444: LD_VAR 0 12
24448: PUSH
24449: LD_INT 3
24451: EQUAL
24452: IFFALSE 24464
24454: PUSH
24455: LD_INT 49
24457: PUSH
24458: LD_VAR 0 5
24462: IN
24463: AND
24464: IFFALSE 24484
24466: PUSH
24467: LD_INT 31
24469: PPUSH
24470: LD_VAR 0 16
24474: PPUSH
24475: CALL_OW 321
24479: PUSH
24480: LD_INT 2
24482: EQUAL
24483: AND
24484: IFFALSE 24544
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
24486: LD_INT 22
24488: PUSH
24489: LD_VAR 0 16
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 35
24500: PUSH
24501: LD_INT 49
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 91
24510: PUSH
24511: LD_VAR 0 1
24515: PUSH
24516: LD_INT 10
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: LIST
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: LIST
24528: PPUSH
24529: CALL_OW 69
24533: NOT
24534: IFFALSE 24544
// weapon := ru_time_lapser ;
24536: LD_ADDR_VAR 0 18
24540: PUSH
24541: LD_INT 49
24543: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
24544: LD_VAR 0 12
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: LD_INT 2
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: IN
24559: IFFALSE 24583
24561: PUSH
24562: LD_INT 11
24564: PUSH
24565: LD_VAR 0 5
24569: IN
24570: IFTRUE 24582
24572: PUSH
24573: LD_INT 30
24575: PUSH
24576: LD_VAR 0 5
24580: IN
24581: OR
24582: AND
24583: IFFALSE 24603
24585: PUSH
24586: LD_INT 6
24588: PPUSH
24589: LD_VAR 0 16
24593: PPUSH
24594: CALL_OW 321
24598: PUSH
24599: LD_INT 2
24601: EQUAL
24602: AND
24603: IFFALSE 24770
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
24605: LD_INT 22
24607: PUSH
24608: LD_VAR 0 16
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 2
24619: PUSH
24620: LD_INT 35
24622: PUSH
24623: LD_INT 11
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 35
24632: PUSH
24633: LD_INT 30
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 91
24647: PUSH
24648: LD_VAR 0 1
24652: PUSH
24653: LD_INT 18
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: LIST
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: LIST
24665: PPUSH
24666: CALL_OW 69
24670: NOT
24671: IFFALSE 24747
24673: PUSH
24674: LD_INT 22
24676: PUSH
24677: LD_VAR 0 16
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 2
24688: PUSH
24689: LD_INT 30
24691: PUSH
24692: LD_INT 32
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 30
24701: PUSH
24702: LD_INT 33
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 91
24716: PUSH
24717: LD_VAR 0 1
24721: PUSH
24722: LD_INT 12
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: LIST
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: LIST
24734: PUSH
24735: EMPTY
24736: LIST
24737: PPUSH
24738: CALL_OW 69
24742: PUSH
24743: LD_INT 2
24745: GREATER
24746: AND
24747: IFFALSE 24770
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24749: LD_ADDR_VAR 0 18
24753: PUSH
24754: LD_INT 11
24756: PUSH
24757: LD_INT 30
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_VAR 0 12
24768: ARRAY
24769: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24770: LD_VAR 0 18
24774: NOT
24775: IFFALSE 24795
24777: PUSH
24778: LD_INT 40
24780: PPUSH
24781: LD_VAR 0 16
24785: PPUSH
24786: CALL_OW 321
24790: PUSH
24791: LD_INT 2
24793: EQUAL
24794: AND
24795: IFFALSE 24831
24797: PUSH
24798: LD_INT 7
24800: PUSH
24801: LD_VAR 0 5
24805: IN
24806: IFTRUE 24818
24808: PUSH
24809: LD_INT 28
24811: PUSH
24812: LD_VAR 0 5
24816: IN
24817: OR
24818: IFTRUE 24830
24820: PUSH
24821: LD_INT 45
24823: PUSH
24824: LD_VAR 0 5
24828: IN
24829: OR
24830: AND
24831: IFFALSE 25085
// begin hex := GetHexInfo ( x , y ) ;
24833: LD_ADDR_VAR 0 4
24837: PUSH
24838: LD_VAR 0 10
24842: PPUSH
24843: LD_VAR 0 11
24847: PPUSH
24848: CALL_OW 546
24852: ST_TO_ADDR
// if hex [ 1 ] then
24853: LD_VAR 0 4
24857: PUSH
24858: LD_INT 1
24860: ARRAY
24861: IFFALSE 24865
// exit ;
24863: GO 25272
// height := hex [ 2 ] ;
24865: LD_ADDR_VAR 0 15
24869: PUSH
24870: LD_VAR 0 4
24874: PUSH
24875: LD_INT 2
24877: ARRAY
24878: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24879: LD_ADDR_VAR 0 14
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: LD_INT 2
24889: PUSH
24890: LD_INT 3
24892: PUSH
24893: LD_INT 5
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: ST_TO_ADDR
// for i in tmp do
24902: LD_ADDR_VAR 0 8
24906: PUSH
24907: LD_VAR 0 14
24911: PUSH
24912: FOR_IN
24913: IFFALSE 25083
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24915: LD_ADDR_VAR 0 9
24919: PUSH
24920: LD_VAR 0 10
24924: PPUSH
24925: LD_VAR 0 8
24929: PPUSH
24930: LD_INT 5
24932: PPUSH
24933: CALL_OW 272
24937: PUSH
24938: LD_VAR 0 11
24942: PPUSH
24943: LD_VAR 0 8
24947: PPUSH
24948: LD_INT 5
24950: PPUSH
24951: CALL_OW 273
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24960: LD_VAR 0 9
24964: PUSH
24965: LD_INT 1
24967: ARRAY
24968: PPUSH
24969: LD_VAR 0 9
24973: PUSH
24974: LD_INT 2
24976: ARRAY
24977: PPUSH
24978: CALL_OW 488
24982: IFFALSE 25081
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24984: LD_ADDR_VAR 0 4
24988: PUSH
24989: LD_VAR 0 9
24993: PUSH
24994: LD_INT 1
24996: ARRAY
24997: PPUSH
24998: LD_VAR 0 9
25002: PUSH
25003: LD_INT 2
25005: ARRAY
25006: PPUSH
25007: CALL_OW 546
25011: ST_TO_ADDR
// if hex [ 1 ] then
25012: LD_VAR 0 4
25016: PUSH
25017: LD_INT 1
25019: ARRAY
25020: IFFALSE 25024
// continue ;
25022: GO 24912
// h := hex [ 2 ] ;
25024: LD_ADDR_VAR 0 13
25028: PUSH
25029: LD_VAR 0 4
25033: PUSH
25034: LD_INT 2
25036: ARRAY
25037: ST_TO_ADDR
// if h + 7 < height then
25038: LD_VAR 0 13
25042: PUSH
25043: LD_INT 7
25045: PLUS
25046: PUSH
25047: LD_VAR 0 15
25051: LESS
25052: IFFALSE 25081
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
25054: LD_ADDR_VAR 0 18
25058: PUSH
25059: LD_INT 7
25061: PUSH
25062: LD_INT 28
25064: PUSH
25065: LD_INT 45
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: LIST
25072: PUSH
25073: LD_VAR 0 12
25077: ARRAY
25078: ST_TO_ADDR
// break ;
25079: GO 25083
// end ; end ; end ;
25081: GO 24912
25083: POP
25084: POP
// end ; if not weapon then
25085: LD_VAR 0 18
25089: NOT
25090: IFFALSE 25150
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
25092: LD_ADDR_VAR 0 5
25096: PUSH
25097: LD_VAR 0 5
25101: PUSH
25102: LD_INT 11
25104: PUSH
25105: LD_INT 30
25107: PUSH
25108: LD_INT 49
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: LIST
25115: DIFF
25116: ST_TO_ADDR
// if not list then
25117: LD_VAR 0 5
25121: NOT
25122: IFFALSE 25126
// exit ;
25124: GO 25272
// weapon := list [ rand ( 1 , list ) ] ;
25126: LD_ADDR_VAR 0 18
25130: PUSH
25131: LD_VAR 0 5
25135: PUSH
25136: LD_INT 1
25138: PPUSH
25139: LD_VAR 0 5
25143: PPUSH
25144: CALL_OW 12
25148: ARRAY
25149: ST_TO_ADDR
// end ; if weapon then
25150: LD_VAR 0 18
25154: IFFALSE 25272
// begin tmp := CostOfWeapon ( weapon ) ;
25156: LD_ADDR_VAR 0 14
25160: PUSH
25161: LD_VAR 0 18
25165: PPUSH
25166: CALL_OW 451
25170: ST_TO_ADDR
// j := GetBase ( tower ) ;
25171: LD_ADDR_VAR 0 9
25175: PUSH
25176: LD_VAR 0 1
25180: PPUSH
25181: CALL_OW 274
25185: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
25186: LD_VAR 0 9
25190: PPUSH
25191: LD_INT 1
25193: PPUSH
25194: CALL_OW 275
25198: PUSH
25199: LD_VAR 0 14
25203: PUSH
25204: LD_INT 1
25206: ARRAY
25207: GREATEREQUAL
25208: IFFALSE 25234
25210: PUSH
25211: LD_VAR 0 9
25215: PPUSH
25216: LD_INT 2
25218: PPUSH
25219: CALL_OW 275
25223: PUSH
25224: LD_VAR 0 14
25228: PUSH
25229: LD_INT 2
25231: ARRAY
25232: GREATEREQUAL
25233: AND
25234: IFFALSE 25260
25236: PUSH
25237: LD_VAR 0 9
25241: PPUSH
25242: LD_INT 3
25244: PPUSH
25245: CALL_OW 275
25249: PUSH
25250: LD_VAR 0 14
25254: PUSH
25255: LD_INT 3
25257: ARRAY
25258: GREATEREQUAL
25259: AND
25260: IFFALSE 25272
// result := weapon ;
25262: LD_ADDR_VAR 0 3
25266: PUSH
25267: LD_VAR 0 18
25271: ST_TO_ADDR
// end ; end ;
25272: LD_VAR 0 3
25276: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
25277: LD_INT 0
25279: PPUSH
25280: PPUSH
// result := true ;
25281: LD_ADDR_VAR 0 3
25285: PUSH
25286: LD_INT 1
25288: ST_TO_ADDR
// if array1 = array2 then
25289: LD_VAR 0 1
25293: PUSH
25294: LD_VAR 0 2
25298: EQUAL
25299: IFFALSE 25359
// begin for i = 1 to array1 do
25301: LD_ADDR_VAR 0 4
25305: PUSH
25306: DOUBLE
25307: LD_INT 1
25309: DEC
25310: ST_TO_ADDR
25311: LD_VAR 0 1
25315: PUSH
25316: FOR_TO
25317: IFFALSE 25355
// if array1 [ i ] <> array2 [ i ] then
25319: LD_VAR 0 1
25323: PUSH
25324: LD_VAR 0 4
25328: ARRAY
25329: PUSH
25330: LD_VAR 0 2
25334: PUSH
25335: LD_VAR 0 4
25339: ARRAY
25340: NONEQUAL
25341: IFFALSE 25353
// begin result := false ;
25343: LD_ADDR_VAR 0 3
25347: PUSH
25348: LD_INT 0
25350: ST_TO_ADDR
// break ;
25351: GO 25355
// end ;
25353: GO 25316
25355: POP
25356: POP
// end else
25357: GO 25367
// result := false ;
25359: LD_ADDR_VAR 0 3
25363: PUSH
25364: LD_INT 0
25366: ST_TO_ADDR
// end ;
25367: LD_VAR 0 3
25371: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
25372: LD_INT 0
25374: PPUSH
25375: PPUSH
// if not array1 or not array2 then
25376: LD_VAR 0 1
25380: NOT
25381: IFTRUE 25390
25383: PUSH
25384: LD_VAR 0 2
25388: NOT
25389: OR
25390: IFFALSE 25394
// exit ;
25392: GO 25458
// result := true ;
25394: LD_ADDR_VAR 0 3
25398: PUSH
25399: LD_INT 1
25401: ST_TO_ADDR
// for i = 1 to array1 do
25402: LD_ADDR_VAR 0 4
25406: PUSH
25407: DOUBLE
25408: LD_INT 1
25410: DEC
25411: ST_TO_ADDR
25412: LD_VAR 0 1
25416: PUSH
25417: FOR_TO
25418: IFFALSE 25456
// if array1 [ i ] <> array2 [ i ] then
25420: LD_VAR 0 1
25424: PUSH
25425: LD_VAR 0 4
25429: ARRAY
25430: PUSH
25431: LD_VAR 0 2
25435: PUSH
25436: LD_VAR 0 4
25440: ARRAY
25441: NONEQUAL
25442: IFFALSE 25454
// begin result := false ;
25444: LD_ADDR_VAR 0 3
25448: PUSH
25449: LD_INT 0
25451: ST_TO_ADDR
// break ;
25452: GO 25456
// end ;
25454: GO 25417
25456: POP
25457: POP
// end ;
25458: LD_VAR 0 3
25462: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
25463: LD_INT 0
25465: PPUSH
25466: PPUSH
25467: PPUSH
// pom := GetBase ( fac ) ;
25468: LD_ADDR_VAR 0 5
25472: PUSH
25473: LD_VAR 0 1
25477: PPUSH
25478: CALL_OW 274
25482: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
25483: LD_ADDR_VAR 0 4
25487: PUSH
25488: LD_VAR 0 2
25492: PUSH
25493: LD_INT 1
25495: ARRAY
25496: PPUSH
25497: LD_VAR 0 2
25501: PUSH
25502: LD_INT 2
25504: ARRAY
25505: PPUSH
25506: LD_VAR 0 2
25510: PUSH
25511: LD_INT 3
25513: ARRAY
25514: PPUSH
25515: LD_VAR 0 2
25519: PUSH
25520: LD_INT 4
25522: ARRAY
25523: PPUSH
25524: CALL_OW 449
25528: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25529: LD_ADDR_VAR 0 3
25533: PUSH
25534: LD_VAR 0 5
25538: PPUSH
25539: LD_INT 1
25541: PPUSH
25542: CALL_OW 275
25546: PUSH
25547: LD_VAR 0 4
25551: PUSH
25552: LD_INT 1
25554: ARRAY
25555: GREATEREQUAL
25556: IFFALSE 25582
25558: PUSH
25559: LD_VAR 0 5
25563: PPUSH
25564: LD_INT 2
25566: PPUSH
25567: CALL_OW 275
25571: PUSH
25572: LD_VAR 0 4
25576: PUSH
25577: LD_INT 2
25579: ARRAY
25580: GREATEREQUAL
25581: AND
25582: IFFALSE 25608
25584: PUSH
25585: LD_VAR 0 5
25589: PPUSH
25590: LD_INT 3
25592: PPUSH
25593: CALL_OW 275
25597: PUSH
25598: LD_VAR 0 4
25602: PUSH
25603: LD_INT 3
25605: ARRAY
25606: GREATEREQUAL
25607: AND
25608: ST_TO_ADDR
// end ;
25609: LD_VAR 0 3
25613: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
25614: LD_INT 0
25616: PPUSH
25617: PPUSH
25618: PPUSH
25619: PPUSH
// pom := GetBase ( building ) ;
25620: LD_ADDR_VAR 0 3
25624: PUSH
25625: LD_VAR 0 1
25629: PPUSH
25630: CALL_OW 274
25634: ST_TO_ADDR
// if not pom then
25635: LD_VAR 0 3
25639: NOT
25640: IFFALSE 25644
// exit ;
25642: GO 25818
// btype := GetBType ( building ) ;
25644: LD_ADDR_VAR 0 5
25648: PUSH
25649: LD_VAR 0 1
25653: PPUSH
25654: CALL_OW 266
25658: ST_TO_ADDR
// if btype = b_armoury then
25659: LD_VAR 0 5
25663: PUSH
25664: LD_INT 4
25666: EQUAL
25667: IFFALSE 25677
// btype := b_barracks ;
25669: LD_ADDR_VAR 0 5
25673: PUSH
25674: LD_INT 5
25676: ST_TO_ADDR
// if btype = b_depot then
25677: LD_VAR 0 5
25681: PUSH
25682: LD_INT 0
25684: EQUAL
25685: IFFALSE 25695
// btype := b_warehouse ;
25687: LD_ADDR_VAR 0 5
25691: PUSH
25692: LD_INT 1
25694: ST_TO_ADDR
// if btype = b_workshop then
25695: LD_VAR 0 5
25699: PUSH
25700: LD_INT 2
25702: EQUAL
25703: IFFALSE 25713
// btype := b_factory ;
25705: LD_ADDR_VAR 0 5
25709: PUSH
25710: LD_INT 3
25712: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25713: LD_ADDR_VAR 0 4
25717: PUSH
25718: LD_VAR 0 5
25722: PPUSH
25723: LD_VAR 0 1
25727: PPUSH
25728: CALL_OW 248
25732: PPUSH
25733: CALL_OW 450
25737: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25738: LD_ADDR_VAR 0 2
25742: PUSH
25743: LD_VAR 0 3
25747: PPUSH
25748: LD_INT 1
25750: PPUSH
25751: CALL_OW 275
25755: PUSH
25756: LD_VAR 0 4
25760: PUSH
25761: LD_INT 1
25763: ARRAY
25764: GREATEREQUAL
25765: IFFALSE 25791
25767: PUSH
25768: LD_VAR 0 3
25772: PPUSH
25773: LD_INT 2
25775: PPUSH
25776: CALL_OW 275
25780: PUSH
25781: LD_VAR 0 4
25785: PUSH
25786: LD_INT 2
25788: ARRAY
25789: GREATEREQUAL
25790: AND
25791: IFFALSE 25817
25793: PUSH
25794: LD_VAR 0 3
25798: PPUSH
25799: LD_INT 3
25801: PPUSH
25802: CALL_OW 275
25806: PUSH
25807: LD_VAR 0 4
25811: PUSH
25812: LD_INT 3
25814: ARRAY
25815: GREATEREQUAL
25816: AND
25817: ST_TO_ADDR
// end ;
25818: LD_VAR 0 2
25822: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25823: LD_INT 0
25825: PPUSH
25826: PPUSH
25827: PPUSH
// pom := GetBase ( building ) ;
25828: LD_ADDR_VAR 0 4
25832: PUSH
25833: LD_VAR 0 1
25837: PPUSH
25838: CALL_OW 274
25842: ST_TO_ADDR
// if not pom then
25843: LD_VAR 0 4
25847: NOT
25848: IFFALSE 25852
// exit ;
25850: GO 25957
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25852: LD_ADDR_VAR 0 5
25856: PUSH
25857: LD_VAR 0 2
25861: PPUSH
25862: LD_VAR 0 1
25866: PPUSH
25867: CALL_OW 248
25871: PPUSH
25872: CALL_OW 450
25876: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25877: LD_ADDR_VAR 0 3
25881: PUSH
25882: LD_VAR 0 4
25886: PPUSH
25887: LD_INT 1
25889: PPUSH
25890: CALL_OW 275
25894: PUSH
25895: LD_VAR 0 5
25899: PUSH
25900: LD_INT 1
25902: ARRAY
25903: GREATEREQUAL
25904: IFFALSE 25930
25906: PUSH
25907: LD_VAR 0 4
25911: PPUSH
25912: LD_INT 2
25914: PPUSH
25915: CALL_OW 275
25919: PUSH
25920: LD_VAR 0 5
25924: PUSH
25925: LD_INT 2
25927: ARRAY
25928: GREATEREQUAL
25929: AND
25930: IFFALSE 25956
25932: PUSH
25933: LD_VAR 0 4
25937: PPUSH
25938: LD_INT 3
25940: PPUSH
25941: CALL_OW 275
25945: PUSH
25946: LD_VAR 0 5
25950: PUSH
25951: LD_INT 3
25953: ARRAY
25954: GREATEREQUAL
25955: AND
25956: ST_TO_ADDR
// end ;
25957: LD_VAR 0 3
25961: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
25962: LD_INT 0
25964: PPUSH
25965: PPUSH
25966: PPUSH
25967: PPUSH
25968: PPUSH
25969: PPUSH
25970: PPUSH
25971: PPUSH
25972: PPUSH
25973: PPUSH
25974: PPUSH
// result := false ;
25975: LD_ADDR_VAR 0 8
25979: PUSH
25980: LD_INT 0
25982: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
25983: LD_VAR 0 5
25987: NOT
25988: IFTRUE 25997
25990: PUSH
25991: LD_VAR 0 1
25995: NOT
25996: OR
25997: IFTRUE 26006
25999: PUSH
26000: LD_VAR 0 2
26004: NOT
26005: OR
26006: IFTRUE 26015
26008: PUSH
26009: LD_VAR 0 3
26013: NOT
26014: OR
26015: IFFALSE 26019
// exit ;
26017: GO 26845
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
26019: LD_ADDR_VAR 0 14
26023: PUSH
26024: LD_VAR 0 1
26028: PPUSH
26029: LD_VAR 0 2
26033: PPUSH
26034: LD_VAR 0 3
26038: PPUSH
26039: LD_VAR 0 4
26043: PPUSH
26044: LD_VAR 0 5
26048: PUSH
26049: LD_INT 1
26051: ARRAY
26052: PPUSH
26053: CALL_OW 248
26057: PPUSH
26058: LD_INT 0
26060: PPUSH
26061: CALL 28126 0 6
26065: ST_TO_ADDR
// if not hexes then
26066: LD_VAR 0 14
26070: NOT
26071: IFFALSE 26075
// exit ;
26073: GO 26845
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26075: LD_ADDR_VAR 0 17
26079: PUSH
26080: LD_VAR 0 5
26084: PPUSH
26085: LD_INT 22
26087: PUSH
26088: LD_VAR 0 13
26092: PPUSH
26093: CALL_OW 255
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 2
26104: PUSH
26105: LD_INT 30
26107: PUSH
26108: LD_INT 0
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 30
26117: PUSH
26118: LD_INT 1
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: LIST
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PPUSH
26134: CALL_OW 72
26138: ST_TO_ADDR
// for i = 1 to hexes do
26139: LD_ADDR_VAR 0 9
26143: PUSH
26144: DOUBLE
26145: LD_INT 1
26147: DEC
26148: ST_TO_ADDR
26149: LD_VAR 0 14
26153: PUSH
26154: FOR_TO
26155: IFFALSE 26843
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26157: LD_ADDR_VAR 0 13
26161: PUSH
26162: LD_VAR 0 14
26166: PUSH
26167: LD_VAR 0 9
26171: ARRAY
26172: PUSH
26173: LD_INT 1
26175: ARRAY
26176: PPUSH
26177: LD_VAR 0 14
26181: PUSH
26182: LD_VAR 0 9
26186: ARRAY
26187: PUSH
26188: LD_INT 2
26190: ARRAY
26191: PPUSH
26192: CALL_OW 428
26196: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
26197: LD_VAR 0 14
26201: PUSH
26202: LD_VAR 0 9
26206: ARRAY
26207: PUSH
26208: LD_INT 1
26210: ARRAY
26211: PPUSH
26212: LD_VAR 0 14
26216: PUSH
26217: LD_VAR 0 9
26221: ARRAY
26222: PUSH
26223: LD_INT 2
26225: ARRAY
26226: PPUSH
26227: CALL_OW 351
26231: IFTRUE 26270
26233: PUSH
26234: LD_VAR 0 14
26238: PUSH
26239: LD_VAR 0 9
26243: ARRAY
26244: PUSH
26245: LD_INT 1
26247: ARRAY
26248: PPUSH
26249: LD_VAR 0 14
26253: PUSH
26254: LD_VAR 0 9
26258: ARRAY
26259: PUSH
26260: LD_INT 2
26262: ARRAY
26263: PPUSH
26264: CALL_OW 488
26268: NOT
26269: OR
26270: IFTRUE 26287
26272: PUSH
26273: LD_VAR 0 13
26277: PPUSH
26278: CALL_OW 247
26282: PUSH
26283: LD_INT 3
26285: EQUAL
26286: OR
26287: IFFALSE 26293
// exit ;
26289: POP
26290: POP
26291: GO 26845
// if not tmp then
26293: LD_VAR 0 13
26297: NOT
26298: IFFALSE 26302
// continue ;
26300: GO 26154
// result := true ;
26302: LD_ADDR_VAR 0 8
26306: PUSH
26307: LD_INT 1
26309: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
26310: LD_VAR 0 6
26314: IFFALSE 26331
26316: PUSH
26317: LD_VAR 0 13
26321: PPUSH
26322: CALL_OW 247
26326: PUSH
26327: LD_INT 2
26329: EQUAL
26330: AND
26331: IFFALSE 26348
26333: PUSH
26334: LD_VAR 0 13
26338: PPUSH
26339: CALL_OW 263
26343: PUSH
26344: LD_INT 1
26346: EQUAL
26347: AND
26348: IFFALSE 26512
// begin if IsDrivenBy ( tmp ) then
26350: LD_VAR 0 13
26354: PPUSH
26355: CALL_OW 311
26359: IFFALSE 26363
// continue ;
26361: GO 26154
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
26363: LD_VAR 0 6
26367: PPUSH
26368: LD_INT 3
26370: PUSH
26371: LD_INT 60
26373: PUSH
26374: EMPTY
26375: LIST
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 3
26383: PUSH
26384: LD_INT 55
26386: PUSH
26387: EMPTY
26388: LIST
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PPUSH
26398: CALL_OW 72
26402: IFFALSE 26510
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
26404: LD_ADDR_VAR 0 18
26408: PUSH
26409: LD_VAR 0 6
26413: PPUSH
26414: LD_INT 3
26416: PUSH
26417: LD_INT 60
26419: PUSH
26420: EMPTY
26421: LIST
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 3
26429: PUSH
26430: LD_INT 55
26432: PUSH
26433: EMPTY
26434: LIST
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PPUSH
26444: CALL_OW 72
26448: PUSH
26449: LD_INT 1
26451: ARRAY
26452: ST_TO_ADDR
// if IsInUnit ( driver ) then
26453: LD_VAR 0 18
26457: PPUSH
26458: CALL_OW 310
26462: IFFALSE 26473
// ComExit ( driver ) ;
26464: LD_VAR 0 18
26468: PPUSH
26469: CALL 52126 0 1
// AddComEnterUnit ( driver , tmp ) ;
26473: LD_VAR 0 18
26477: PPUSH
26478: LD_VAR 0 13
26482: PPUSH
26483: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
26487: LD_VAR 0 18
26491: PPUSH
26492: LD_VAR 0 7
26496: PPUSH
26497: CALL_OW 173
// AddComExitVehicle ( driver ) ;
26501: LD_VAR 0 18
26505: PPUSH
26506: CALL_OW 181
// end ; continue ;
26510: GO 26154
// end ; if not cleaners or not tmp in cleaners then
26512: LD_VAR 0 6
26516: NOT
26517: IFTRUE 26532
26519: PUSH
26520: LD_VAR 0 13
26524: PUSH
26525: LD_VAR 0 6
26529: IN
26530: NOT
26531: OR
26532: IFFALSE 26841
// begin if dep then
26534: LD_VAR 0 17
26538: IFFALSE 26674
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
26540: LD_ADDR_VAR 0 16
26544: PUSH
26545: LD_VAR 0 17
26549: PUSH
26550: LD_INT 1
26552: ARRAY
26553: PPUSH
26554: CALL_OW 250
26558: PPUSH
26559: LD_VAR 0 17
26563: PUSH
26564: LD_INT 1
26566: ARRAY
26567: PPUSH
26568: CALL_OW 254
26572: PPUSH
26573: LD_INT 5
26575: PPUSH
26576: CALL_OW 272
26580: PUSH
26581: LD_VAR 0 17
26585: PUSH
26586: LD_INT 1
26588: ARRAY
26589: PPUSH
26590: CALL_OW 251
26594: PPUSH
26595: LD_VAR 0 17
26599: PUSH
26600: LD_INT 1
26602: ARRAY
26603: PPUSH
26604: CALL_OW 254
26608: PPUSH
26609: LD_INT 5
26611: PPUSH
26612: CALL_OW 273
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
26621: LD_VAR 0 16
26625: PUSH
26626: LD_INT 1
26628: ARRAY
26629: PPUSH
26630: LD_VAR 0 16
26634: PUSH
26635: LD_INT 2
26637: ARRAY
26638: PPUSH
26639: CALL_OW 488
26643: IFFALSE 26674
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
26645: LD_VAR 0 13
26649: PPUSH
26650: LD_VAR 0 16
26654: PUSH
26655: LD_INT 1
26657: ARRAY
26658: PPUSH
26659: LD_VAR 0 16
26663: PUSH
26664: LD_INT 2
26666: ARRAY
26667: PPUSH
26668: CALL_OW 111
// continue ;
26672: GO 26154
// end ; end ; r := GetDir ( tmp ) ;
26674: LD_ADDR_VAR 0 15
26678: PUSH
26679: LD_VAR 0 13
26683: PPUSH
26684: CALL_OW 254
26688: ST_TO_ADDR
// if r = 5 then
26689: LD_VAR 0 15
26693: PUSH
26694: LD_INT 5
26696: EQUAL
26697: IFFALSE 26707
// r := 0 ;
26699: LD_ADDR_VAR 0 15
26703: PUSH
26704: LD_INT 0
26706: ST_TO_ADDR
// for j = r to 5 do
26707: LD_ADDR_VAR 0 10
26711: PUSH
26712: DOUBLE
26713: LD_VAR 0 15
26717: DEC
26718: ST_TO_ADDR
26719: LD_INT 5
26721: PUSH
26722: FOR_TO
26723: IFFALSE 26839
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
26725: LD_ADDR_VAR 0 11
26729: PUSH
26730: LD_VAR 0 13
26734: PPUSH
26735: CALL_OW 250
26739: PPUSH
26740: LD_VAR 0 10
26744: PPUSH
26745: LD_INT 2
26747: PPUSH
26748: CALL_OW 272
26752: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
26753: LD_ADDR_VAR 0 12
26757: PUSH
26758: LD_VAR 0 13
26762: PPUSH
26763: CALL_OW 251
26767: PPUSH
26768: LD_VAR 0 10
26772: PPUSH
26773: LD_INT 2
26775: PPUSH
26776: CALL_OW 273
26780: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
26781: LD_VAR 0 11
26785: PPUSH
26786: LD_VAR 0 12
26790: PPUSH
26791: CALL_OW 488
26795: IFFALSE 26814
26797: PUSH
26798: LD_VAR 0 11
26802: PPUSH
26803: LD_VAR 0 12
26807: PPUSH
26808: CALL_OW 428
26812: NOT
26813: AND
26814: IFFALSE 26837
// begin ComMoveXY ( tmp , _x , _y ) ;
26816: LD_VAR 0 13
26820: PPUSH
26821: LD_VAR 0 11
26825: PPUSH
26826: LD_VAR 0 12
26830: PPUSH
26831: CALL_OW 111
// break ;
26835: GO 26839
// end ; end ;
26837: GO 26722
26839: POP
26840: POP
// end ; end ;
26841: GO 26154
26843: POP
26844: POP
// end ;
26845: LD_VAR 0 8
26849: RET
// export function BuildingTechInvented ( side , btype ) ; begin
26850: LD_INT 0
26852: PPUSH
// result := true ;
26853: LD_ADDR_VAR 0 3
26857: PUSH
26858: LD_INT 1
26860: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
26861: LD_VAR 0 2
26865: PUSH
26866: LD_INT 24
26868: DOUBLE
26869: EQUAL
26870: IFTRUE 26880
26872: LD_INT 33
26874: DOUBLE
26875: EQUAL
26876: IFTRUE 26880
26878: GO 26905
26880: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
26881: LD_ADDR_VAR 0 3
26885: PUSH
26886: LD_INT 32
26888: PPUSH
26889: LD_VAR 0 1
26893: PPUSH
26894: CALL_OW 321
26898: PUSH
26899: LD_INT 2
26901: EQUAL
26902: ST_TO_ADDR
26903: GO 27221
26905: LD_INT 20
26907: DOUBLE
26908: EQUAL
26909: IFTRUE 26913
26911: GO 26938
26913: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
26914: LD_ADDR_VAR 0 3
26918: PUSH
26919: LD_INT 6
26921: PPUSH
26922: LD_VAR 0 1
26926: PPUSH
26927: CALL_OW 321
26931: PUSH
26932: LD_INT 2
26934: EQUAL
26935: ST_TO_ADDR
26936: GO 27221
26938: LD_INT 22
26940: DOUBLE
26941: EQUAL
26942: IFTRUE 26952
26944: LD_INT 36
26946: DOUBLE
26947: EQUAL
26948: IFTRUE 26952
26950: GO 26977
26952: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
26953: LD_ADDR_VAR 0 3
26957: PUSH
26958: LD_INT 15
26960: PPUSH
26961: LD_VAR 0 1
26965: PPUSH
26966: CALL_OW 321
26970: PUSH
26971: LD_INT 2
26973: EQUAL
26974: ST_TO_ADDR
26975: GO 27221
26977: LD_INT 30
26979: DOUBLE
26980: EQUAL
26981: IFTRUE 26985
26983: GO 27010
26985: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
26986: LD_ADDR_VAR 0 3
26990: PUSH
26991: LD_INT 20
26993: PPUSH
26994: LD_VAR 0 1
26998: PPUSH
26999: CALL_OW 321
27003: PUSH
27004: LD_INT 2
27006: EQUAL
27007: ST_TO_ADDR
27008: GO 27221
27010: LD_INT 28
27012: DOUBLE
27013: EQUAL
27014: IFTRUE 27024
27016: LD_INT 21
27018: DOUBLE
27019: EQUAL
27020: IFTRUE 27024
27022: GO 27049
27024: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
27025: LD_ADDR_VAR 0 3
27029: PUSH
27030: LD_INT 21
27032: PPUSH
27033: LD_VAR 0 1
27037: PPUSH
27038: CALL_OW 321
27042: PUSH
27043: LD_INT 2
27045: EQUAL
27046: ST_TO_ADDR
27047: GO 27221
27049: LD_INT 16
27051: DOUBLE
27052: EQUAL
27053: IFTRUE 27057
27055: GO 27082
27057: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
27058: LD_ADDR_VAR 0 3
27062: PUSH
27063: LD_INT 84
27065: PPUSH
27066: LD_VAR 0 1
27070: PPUSH
27071: CALL_OW 321
27075: PUSH
27076: LD_INT 2
27078: EQUAL
27079: ST_TO_ADDR
27080: GO 27221
27082: LD_INT 19
27084: DOUBLE
27085: EQUAL
27086: IFTRUE 27096
27088: LD_INT 23
27090: DOUBLE
27091: EQUAL
27092: IFTRUE 27096
27094: GO 27121
27096: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
27097: LD_ADDR_VAR 0 3
27101: PUSH
27102: LD_INT 83
27104: PPUSH
27105: LD_VAR 0 1
27109: PPUSH
27110: CALL_OW 321
27114: PUSH
27115: LD_INT 2
27117: EQUAL
27118: ST_TO_ADDR
27119: GO 27221
27121: LD_INT 17
27123: DOUBLE
27124: EQUAL
27125: IFTRUE 27129
27127: GO 27154
27129: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
27130: LD_ADDR_VAR 0 3
27134: PUSH
27135: LD_INT 39
27137: PPUSH
27138: LD_VAR 0 1
27142: PPUSH
27143: CALL_OW 321
27147: PUSH
27148: LD_INT 2
27150: EQUAL
27151: ST_TO_ADDR
27152: GO 27221
27154: LD_INT 18
27156: DOUBLE
27157: EQUAL
27158: IFTRUE 27162
27160: GO 27187
27162: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
27163: LD_ADDR_VAR 0 3
27167: PUSH
27168: LD_INT 40
27170: PPUSH
27171: LD_VAR 0 1
27175: PPUSH
27176: CALL_OW 321
27180: PUSH
27181: LD_INT 2
27183: EQUAL
27184: ST_TO_ADDR
27185: GO 27221
27187: LD_INT 27
27189: DOUBLE
27190: EQUAL
27191: IFTRUE 27195
27193: GO 27220
27195: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
27196: LD_ADDR_VAR 0 3
27200: PUSH
27201: LD_INT 35
27203: PPUSH
27204: LD_VAR 0 1
27208: PPUSH
27209: CALL_OW 321
27213: PUSH
27214: LD_INT 2
27216: EQUAL
27217: ST_TO_ADDR
27218: GO 27221
27220: POP
// end ;
27221: LD_VAR 0 3
27225: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
27226: LD_INT 0
27228: PPUSH
27229: PPUSH
27230: PPUSH
27231: PPUSH
27232: PPUSH
27233: PPUSH
27234: PPUSH
27235: PPUSH
27236: PPUSH
27237: PPUSH
27238: PPUSH
// result := false ;
27239: LD_ADDR_VAR 0 6
27243: PUSH
27244: LD_INT 0
27246: ST_TO_ADDR
// if btype = b_depot then
27247: LD_VAR 0 2
27251: PUSH
27252: LD_INT 0
27254: EQUAL
27255: IFFALSE 27267
// begin result := true ;
27257: LD_ADDR_VAR 0 6
27261: PUSH
27262: LD_INT 1
27264: ST_TO_ADDR
// exit ;
27265: GO 28121
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
27267: LD_VAR 0 1
27271: NOT
27272: IFTRUE 27297
27274: PUSH
27275: LD_VAR 0 1
27279: PPUSH
27280: CALL_OW 266
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: LD_INT 1
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: IN
27295: NOT
27296: OR
27297: IFTRUE 27306
27299: PUSH
27300: LD_VAR 0 2
27304: NOT
27305: OR
27306: IFTRUE 27342
27308: PUSH
27309: LD_VAR 0 5
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: LD_INT 1
27319: PUSH
27320: LD_INT 2
27322: PUSH
27323: LD_INT 3
27325: PUSH
27326: LD_INT 4
27328: PUSH
27329: LD_INT 5
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: IN
27340: NOT
27341: OR
27342: IFTRUE 27361
27344: PUSH
27345: LD_VAR 0 3
27349: PPUSH
27350: LD_VAR 0 4
27354: PPUSH
27355: CALL_OW 488
27359: NOT
27360: OR
27361: IFFALSE 27365
// exit ;
27363: GO 28121
// side := GetSide ( depot ) ;
27365: LD_ADDR_VAR 0 9
27369: PUSH
27370: LD_VAR 0 1
27374: PPUSH
27375: CALL_OW 255
27379: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
27380: LD_VAR 0 9
27384: PPUSH
27385: LD_VAR 0 2
27389: PPUSH
27390: CALL 26850 0 2
27394: NOT
27395: IFFALSE 27399
// exit ;
27397: GO 28121
// pom := GetBase ( depot ) ;
27399: LD_ADDR_VAR 0 10
27403: PUSH
27404: LD_VAR 0 1
27408: PPUSH
27409: CALL_OW 274
27413: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
27414: LD_ADDR_VAR 0 11
27418: PUSH
27419: LD_VAR 0 2
27423: PPUSH
27424: LD_VAR 0 1
27428: PPUSH
27429: CALL_OW 248
27433: PPUSH
27434: CALL_OW 450
27438: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
27439: LD_VAR 0 10
27443: PPUSH
27444: LD_INT 1
27446: PPUSH
27447: CALL_OW 275
27451: PUSH
27452: LD_VAR 0 11
27456: PUSH
27457: LD_INT 1
27459: ARRAY
27460: GREATEREQUAL
27461: IFFALSE 27487
27463: PUSH
27464: LD_VAR 0 10
27468: PPUSH
27469: LD_INT 2
27471: PPUSH
27472: CALL_OW 275
27476: PUSH
27477: LD_VAR 0 11
27481: PUSH
27482: LD_INT 2
27484: ARRAY
27485: GREATEREQUAL
27486: AND
27487: IFFALSE 27513
27489: PUSH
27490: LD_VAR 0 10
27494: PPUSH
27495: LD_INT 3
27497: PPUSH
27498: CALL_OW 275
27502: PUSH
27503: LD_VAR 0 11
27507: PUSH
27508: LD_INT 3
27510: ARRAY
27511: GREATEREQUAL
27512: AND
27513: NOT
27514: IFFALSE 27518
// exit ;
27516: GO 28121
// if GetBType ( depot ) = b_depot then
27518: LD_VAR 0 1
27522: PPUSH
27523: CALL_OW 266
27527: PUSH
27528: LD_INT 0
27530: EQUAL
27531: IFFALSE 27543
// dist := 28 else
27533: LD_ADDR_VAR 0 14
27537: PUSH
27538: LD_INT 28
27540: ST_TO_ADDR
27541: GO 27551
// dist := 36 ;
27543: LD_ADDR_VAR 0 14
27547: PUSH
27548: LD_INT 36
27550: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
27551: LD_VAR 0 1
27555: PPUSH
27556: LD_VAR 0 3
27560: PPUSH
27561: LD_VAR 0 4
27565: PPUSH
27566: CALL_OW 297
27570: PUSH
27571: LD_VAR 0 14
27575: GREATER
27576: IFFALSE 27580
// exit ;
27578: GO 28121
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
27580: LD_ADDR_VAR 0 12
27584: PUSH
27585: LD_VAR 0 2
27589: PPUSH
27590: LD_VAR 0 3
27594: PPUSH
27595: LD_VAR 0 4
27599: PPUSH
27600: LD_VAR 0 5
27604: PPUSH
27605: LD_VAR 0 1
27609: PPUSH
27610: CALL_OW 248
27614: PPUSH
27615: LD_INT 0
27617: PPUSH
27618: CALL 28126 0 6
27622: ST_TO_ADDR
// if not hexes then
27623: LD_VAR 0 12
27627: NOT
27628: IFFALSE 27632
// exit ;
27630: GO 28121
// hex := GetHexInfo ( x , y ) ;
27632: LD_ADDR_VAR 0 15
27636: PUSH
27637: LD_VAR 0 3
27641: PPUSH
27642: LD_VAR 0 4
27646: PPUSH
27647: CALL_OW 546
27651: ST_TO_ADDR
// if hex [ 1 ] then
27652: LD_VAR 0 15
27656: PUSH
27657: LD_INT 1
27659: ARRAY
27660: IFFALSE 27664
// exit ;
27662: GO 28121
// height := hex [ 2 ] ;
27664: LD_ADDR_VAR 0 13
27668: PUSH
27669: LD_VAR 0 15
27673: PUSH
27674: LD_INT 2
27676: ARRAY
27677: ST_TO_ADDR
// for i = 1 to hexes do
27678: LD_ADDR_VAR 0 7
27682: PUSH
27683: DOUBLE
27684: LD_INT 1
27686: DEC
27687: ST_TO_ADDR
27688: LD_VAR 0 12
27692: PUSH
27693: FOR_TO
27694: IFFALSE 28038
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
27696: LD_VAR 0 12
27700: PUSH
27701: LD_VAR 0 7
27705: ARRAY
27706: PUSH
27707: LD_INT 1
27709: ARRAY
27710: PPUSH
27711: LD_VAR 0 12
27715: PUSH
27716: LD_VAR 0 7
27720: ARRAY
27721: PUSH
27722: LD_INT 2
27724: ARRAY
27725: PPUSH
27726: CALL_OW 488
27730: NOT
27731: IFTRUE 27773
27733: PUSH
27734: LD_VAR 0 12
27738: PUSH
27739: LD_VAR 0 7
27743: ARRAY
27744: PUSH
27745: LD_INT 1
27747: ARRAY
27748: PPUSH
27749: LD_VAR 0 12
27753: PUSH
27754: LD_VAR 0 7
27758: ARRAY
27759: PUSH
27760: LD_INT 2
27762: ARRAY
27763: PPUSH
27764: CALL_OW 428
27768: PUSH
27769: LD_INT 0
27771: GREATER
27772: OR
27773: IFTRUE 27811
27775: PUSH
27776: LD_VAR 0 12
27780: PUSH
27781: LD_VAR 0 7
27785: ARRAY
27786: PUSH
27787: LD_INT 1
27789: ARRAY
27790: PPUSH
27791: LD_VAR 0 12
27795: PUSH
27796: LD_VAR 0 7
27800: ARRAY
27801: PUSH
27802: LD_INT 2
27804: ARRAY
27805: PPUSH
27806: CALL_OW 351
27810: OR
27811: IFFALSE 27817
// exit ;
27813: POP
27814: POP
27815: GO 28121
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27817: LD_ADDR_VAR 0 8
27821: PUSH
27822: LD_VAR 0 12
27826: PUSH
27827: LD_VAR 0 7
27831: ARRAY
27832: PUSH
27833: LD_INT 1
27835: ARRAY
27836: PPUSH
27837: LD_VAR 0 12
27841: PUSH
27842: LD_VAR 0 7
27846: ARRAY
27847: PUSH
27848: LD_INT 2
27850: ARRAY
27851: PPUSH
27852: CALL_OW 546
27856: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
27857: LD_VAR 0 8
27861: PUSH
27862: LD_INT 1
27864: ARRAY
27865: IFTRUE 27887
27867: PUSH
27868: LD_VAR 0 8
27872: PUSH
27873: LD_INT 2
27875: ARRAY
27876: PUSH
27877: LD_VAR 0 13
27881: PUSH
27882: LD_INT 2
27884: PLUS
27885: GREATER
27886: OR
27887: IFTRUE 27909
27889: PUSH
27890: LD_VAR 0 8
27894: PUSH
27895: LD_INT 2
27897: ARRAY
27898: PUSH
27899: LD_VAR 0 13
27903: PUSH
27904: LD_INT 2
27906: MINUS
27907: LESS
27908: OR
27909: IFTRUE 27977
27911: PUSH
27912: LD_VAR 0 8
27916: PUSH
27917: LD_INT 3
27919: ARRAY
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: LD_INT 8
27926: PUSH
27927: LD_INT 9
27929: PUSH
27930: LD_INT 10
27932: PUSH
27933: LD_INT 11
27935: PUSH
27936: LD_INT 12
27938: PUSH
27939: LD_INT 13
27941: PUSH
27942: LD_INT 16
27944: PUSH
27945: LD_INT 17
27947: PUSH
27948: LD_INT 18
27950: PUSH
27951: LD_INT 19
27953: PUSH
27954: LD_INT 20
27956: PUSH
27957: LD_INT 21
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: IN
27975: NOT
27976: OR
27977: IFTRUE 27990
27979: PUSH
27980: LD_VAR 0 8
27984: PUSH
27985: LD_INT 5
27987: ARRAY
27988: NOT
27989: OR
27990: IFTRUE 28030
27992: PUSH
27993: LD_VAR 0 8
27997: PUSH
27998: LD_INT 6
28000: ARRAY
28001: PUSH
28002: LD_INT 1
28004: PUSH
28005: LD_INT 2
28007: PUSH
28008: LD_INT 7
28010: PUSH
28011: LD_INT 9
28013: PUSH
28014: LD_INT 10
28016: PUSH
28017: LD_INT 11
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: IN
28028: NOT
28029: OR
28030: IFFALSE 28036
// exit ;
28032: POP
28033: POP
28034: GO 28121
// end ;
28036: GO 27693
28038: POP
28039: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
28040: LD_VAR 0 9
28044: PPUSH
28045: LD_VAR 0 3
28049: PPUSH
28050: LD_VAR 0 4
28054: PPUSH
28055: LD_INT 20
28057: PPUSH
28058: CALL 19940 0 4
28062: PUSH
28063: LD_INT 4
28065: ARRAY
28066: IFFALSE 28070
// exit ;
28068: GO 28121
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
28070: LD_VAR 0 2
28074: PUSH
28075: LD_INT 29
28077: PUSH
28078: LD_INT 30
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: IN
28085: IFFALSE 28109
28087: PUSH
28088: LD_VAR 0 3
28092: PPUSH
28093: LD_VAR 0 4
28097: PPUSH
28098: LD_VAR 0 9
28102: PPUSH
28103: CALL_OW 440
28107: NOT
28108: AND
28109: IFFALSE 28113
// exit ;
28111: GO 28121
// result := true ;
28113: LD_ADDR_VAR 0 6
28117: PUSH
28118: LD_INT 1
28120: ST_TO_ADDR
// end ;
28121: LD_VAR 0 6
28125: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
28126: LD_INT 0
28128: PPUSH
28129: PPUSH
28130: PPUSH
28131: PPUSH
28132: PPUSH
28133: PPUSH
28134: PPUSH
28135: PPUSH
28136: PPUSH
28137: PPUSH
28138: PPUSH
28139: PPUSH
28140: PPUSH
28141: PPUSH
28142: PPUSH
28143: PPUSH
28144: PPUSH
28145: PPUSH
28146: PPUSH
28147: PPUSH
28148: PPUSH
28149: PPUSH
28150: PPUSH
28151: PPUSH
28152: PPUSH
28153: PPUSH
28154: PPUSH
28155: PPUSH
28156: PPUSH
28157: PPUSH
28158: PPUSH
28159: PPUSH
28160: PPUSH
28161: PPUSH
28162: PPUSH
28163: PPUSH
28164: PPUSH
28165: PPUSH
28166: PPUSH
28167: PPUSH
28168: PPUSH
28169: PPUSH
28170: PPUSH
28171: PPUSH
28172: PPUSH
28173: PPUSH
28174: PPUSH
28175: PPUSH
28176: PPUSH
28177: PPUSH
28178: PPUSH
28179: PPUSH
28180: PPUSH
28181: PPUSH
28182: PPUSH
28183: PPUSH
28184: PPUSH
28185: PPUSH
// result = [ ] ;
28186: LD_ADDR_VAR 0 7
28190: PUSH
28191: EMPTY
28192: ST_TO_ADDR
// temp_list = [ ] ;
28193: LD_ADDR_VAR 0 9
28197: PUSH
28198: EMPTY
28199: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
28200: LD_VAR 0 4
28204: PUSH
28205: LD_INT 0
28207: PUSH
28208: LD_INT 1
28210: PUSH
28211: LD_INT 2
28213: PUSH
28214: LD_INT 3
28216: PUSH
28217: LD_INT 4
28219: PUSH
28220: LD_INT 5
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: IN
28231: NOT
28232: IFTRUE 28275
28234: PUSH
28235: LD_VAR 0 1
28239: PUSH
28240: LD_INT 0
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: IN
28250: IFFALSE 28274
28252: PUSH
28253: LD_VAR 0 5
28257: PUSH
28258: LD_INT 1
28260: PUSH
28261: LD_INT 2
28263: PUSH
28264: LD_INT 3
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: LIST
28271: IN
28272: NOT
28273: AND
28274: OR
28275: IFFALSE 28279
// exit ;
28277: GO 46678
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
28279: LD_VAR 0 1
28283: PUSH
28284: LD_INT 6
28286: PUSH
28287: LD_INT 7
28289: PUSH
28290: LD_INT 8
28292: PUSH
28293: LD_INT 13
28295: PUSH
28296: LD_INT 12
28298: PUSH
28299: LD_INT 15
28301: PUSH
28302: LD_INT 11
28304: PUSH
28305: LD_INT 14
28307: PUSH
28308: LD_INT 10
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: IN
28322: IFFALSE 28332
// btype = b_lab ;
28324: LD_ADDR_VAR 0 1
28328: PUSH
28329: LD_INT 6
28331: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
28332: LD_VAR 0 6
28336: PUSH
28337: LD_INT 0
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: LD_INT 2
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: LIST
28350: IN
28351: NOT
28352: IFTRUE 28420
28354: PUSH
28355: LD_VAR 0 1
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: LD_INT 1
28365: PUSH
28366: LD_INT 2
28368: PUSH
28369: LD_INT 3
28371: PUSH
28372: LD_INT 6
28374: PUSH
28375: LD_INT 36
28377: PUSH
28378: LD_INT 4
28380: PUSH
28381: LD_INT 5
28383: PUSH
28384: LD_INT 31
28386: PUSH
28387: LD_INT 32
28389: PUSH
28390: LD_INT 33
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: IN
28406: NOT
28407: IFFALSE 28419
28409: PUSH
28410: LD_VAR 0 6
28414: PUSH
28415: LD_INT 1
28417: EQUAL
28418: AND
28419: OR
28420: IFTRUE 28452
28422: PUSH
28423: LD_VAR 0 1
28427: PUSH
28428: LD_INT 2
28430: PUSH
28431: LD_INT 3
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: IN
28438: NOT
28439: IFFALSE 28451
28441: PUSH
28442: LD_VAR 0 6
28446: PUSH
28447: LD_INT 2
28449: EQUAL
28450: AND
28451: OR
28452: IFFALSE 28462
// mode = 0 ;
28454: LD_ADDR_VAR 0 6
28458: PUSH
28459: LD_INT 0
28461: ST_TO_ADDR
// case mode of 0 :
28462: LD_VAR 0 6
28466: PUSH
28467: LD_INT 0
28469: DOUBLE
28470: EQUAL
28471: IFTRUE 28475
28473: GO 39928
28475: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28476: LD_ADDR_VAR 0 11
28480: PUSH
28481: LD_INT 0
28483: PUSH
28484: LD_INT 0
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 0
28493: PUSH
28494: LD_INT 1
28496: NEG
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 1
28504: PUSH
28505: LD_INT 0
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: LD_INT 1
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 1
28534: NEG
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 1
28545: NEG
28546: PUSH
28547: LD_INT 1
28549: NEG
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 1
28557: NEG
28558: PUSH
28559: LD_INT 2
28561: NEG
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: LD_INT 2
28572: NEG
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 1
28591: PUSH
28592: LD_INT 2
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 0
28601: PUSH
28602: LD_INT 2
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 1
28611: NEG
28612: PUSH
28613: LD_INT 1
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 1
28622: PUSH
28623: LD_INT 3
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 0
28632: PUSH
28633: LD_INT 3
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 1
28642: NEG
28643: PUSH
28644: LD_INT 2
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28669: LD_ADDR_VAR 0 12
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: LD_INT 0
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 0
28686: PUSH
28687: LD_INT 1
28689: NEG
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: LD_INT 0
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 1
28707: PUSH
28708: LD_INT 1
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 1
28727: NEG
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 1
28738: NEG
28739: PUSH
28740: LD_INT 1
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 1
28750: PUSH
28751: LD_INT 1
28753: NEG
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 2
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 2
28771: PUSH
28772: LD_INT 1
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 1
28781: NEG
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 2
28792: NEG
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 2
28803: NEG
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 2
28815: NEG
28816: PUSH
28817: LD_INT 1
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 3
28826: NEG
28827: PUSH
28828: LD_INT 0
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 3
28837: NEG
28838: PUSH
28839: LD_INT 1
28841: NEG
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28865: LD_ADDR_VAR 0 13
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 0
28882: PUSH
28883: LD_INT 1
28885: NEG
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: LD_INT 1
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 1
28946: NEG
28947: PUSH
28948: LD_INT 2
28950: NEG
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 2
28958: PUSH
28959: LD_INT 1
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 2
28968: PUSH
28969: LD_INT 2
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: LD_INT 2
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 2
28988: NEG
28989: PUSH
28990: LD_INT 1
28992: NEG
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 2
29000: NEG
29001: PUSH
29002: LD_INT 2
29004: NEG
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 2
29012: NEG
29013: PUSH
29014: LD_INT 3
29016: NEG
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 3
29024: NEG
29025: PUSH
29026: LD_INT 2
29028: NEG
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 3
29036: NEG
29037: PUSH
29038: LD_INT 3
29040: NEG
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29064: LD_ADDR_VAR 0 14
29068: PUSH
29069: LD_INT 0
29071: PUSH
29072: LD_INT 0
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 0
29081: PUSH
29082: LD_INT 1
29084: NEG
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: LD_INT 0
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 1
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 1
29122: NEG
29123: PUSH
29124: LD_INT 0
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: LD_INT 1
29137: NEG
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 1
29145: NEG
29146: PUSH
29147: LD_INT 2
29149: NEG
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: LD_INT 2
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 1
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 1
29179: PUSH
29180: LD_INT 2
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 0
29189: PUSH
29190: LD_INT 2
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 1
29199: NEG
29200: PUSH
29201: LD_INT 1
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 1
29210: NEG
29211: PUSH
29212: LD_INT 3
29214: NEG
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 0
29222: PUSH
29223: LD_INT 3
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 1
29233: PUSH
29234: LD_INT 2
29236: NEG
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29260: LD_ADDR_VAR 0 15
29264: PUSH
29265: LD_INT 0
29267: PUSH
29268: LD_INT 0
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 0
29277: PUSH
29278: LD_INT 1
29280: NEG
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: LD_INT 0
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 1
29298: PUSH
29299: LD_INT 1
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 0
29308: PUSH
29309: LD_INT 1
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 1
29318: NEG
29319: PUSH
29320: LD_INT 0
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 1
29329: NEG
29330: PUSH
29331: LD_INT 1
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: LD_INT 1
29344: NEG
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 2
29352: PUSH
29353: LD_INT 0
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 2
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 1
29372: NEG
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 2
29383: NEG
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 2
29394: NEG
29395: PUSH
29396: LD_INT 1
29398: NEG
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 2
29406: PUSH
29407: LD_INT 1
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 3
29417: PUSH
29418: LD_INT 0
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 3
29427: PUSH
29428: LD_INT 1
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29453: LD_ADDR_VAR 0 16
29457: PUSH
29458: LD_INT 0
29460: PUSH
29461: LD_INT 0
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 0
29470: PUSH
29471: LD_INT 1
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: PUSH
29482: LD_INT 0
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 1
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 0
29501: PUSH
29502: LD_INT 1
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 1
29511: NEG
29512: PUSH
29513: LD_INT 0
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 1
29522: NEG
29523: PUSH
29524: LD_INT 1
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 1
29534: NEG
29535: PUSH
29536: LD_INT 2
29538: NEG
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 2
29546: PUSH
29547: LD_INT 1
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 2
29556: PUSH
29557: LD_INT 2
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 1
29566: PUSH
29567: LD_INT 2
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 2
29576: NEG
29577: PUSH
29578: LD_INT 1
29580: NEG
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 2
29588: NEG
29589: PUSH
29590: LD_INT 2
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 3
29600: PUSH
29601: LD_INT 2
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 3
29610: PUSH
29611: LD_INT 3
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 2
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29646: LD_ADDR_VAR 0 17
29650: PUSH
29651: LD_INT 0
29653: PUSH
29654: LD_INT 0
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 0
29663: PUSH
29664: LD_INT 1
29666: NEG
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 1
29674: PUSH
29675: LD_INT 0
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 1
29684: PUSH
29685: LD_INT 1
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 0
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 1
29704: NEG
29705: PUSH
29706: LD_INT 0
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 1
29715: NEG
29716: PUSH
29717: LD_INT 1
29719: NEG
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: LD_INT 2
29731: NEG
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 0
29739: PUSH
29740: LD_INT 2
29742: NEG
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 1
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 2
29761: PUSH
29762: LD_INT 0
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 2
29771: PUSH
29772: LD_INT 1
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 2
29781: PUSH
29782: LD_INT 2
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 1
29791: PUSH
29792: LD_INT 2
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 0
29801: PUSH
29802: LD_INT 2
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 1
29811: NEG
29812: PUSH
29813: LD_INT 1
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 2
29822: NEG
29823: PUSH
29824: LD_INT 0
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 2
29833: NEG
29834: PUSH
29835: LD_INT 1
29837: NEG
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 2
29845: NEG
29846: PUSH
29847: LD_INT 2
29849: NEG
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29876: LD_ADDR_VAR 0 18
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 0
29893: PUSH
29894: LD_INT 1
29896: NEG
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: LD_INT 0
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 1
29914: PUSH
29915: LD_INT 1
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 0
29924: PUSH
29925: LD_INT 1
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: LD_INT 0
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 1
29945: NEG
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 1
29957: NEG
29958: PUSH
29959: LD_INT 2
29961: NEG
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 0
29969: PUSH
29970: LD_INT 2
29972: NEG
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: LD_INT 1
29983: NEG
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 2
29991: PUSH
29992: LD_INT 0
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 2
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 2
30011: PUSH
30012: LD_INT 2
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 1
30021: PUSH
30022: LD_INT 2
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 0
30031: PUSH
30032: LD_INT 2
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 1
30041: NEG
30042: PUSH
30043: LD_INT 1
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 2
30052: NEG
30053: PUSH
30054: LD_INT 0
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 2
30063: NEG
30064: PUSH
30065: LD_INT 1
30067: NEG
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 2
30075: NEG
30076: PUSH
30077: LD_INT 2
30079: NEG
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30106: LD_ADDR_VAR 0 19
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: LD_INT 0
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 0
30123: PUSH
30124: LD_INT 1
30126: NEG
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 1
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: LD_INT 1
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 0
30154: PUSH
30155: LD_INT 1
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 1
30164: NEG
30165: PUSH
30166: LD_INT 0
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 1
30175: NEG
30176: PUSH
30177: LD_INT 1
30179: NEG
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 1
30187: NEG
30188: PUSH
30189: LD_INT 2
30191: NEG
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 0
30199: PUSH
30200: LD_INT 2
30202: NEG
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 1
30210: PUSH
30211: LD_INT 1
30213: NEG
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 2
30221: PUSH
30222: LD_INT 0
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 2
30231: PUSH
30232: LD_INT 1
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 2
30241: PUSH
30242: LD_INT 2
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: LD_INT 2
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 0
30261: PUSH
30262: LD_INT 2
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 1
30271: NEG
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 2
30282: NEG
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 2
30293: NEG
30294: PUSH
30295: LD_INT 1
30297: NEG
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 2
30305: NEG
30306: PUSH
30307: LD_INT 2
30309: NEG
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30336: LD_ADDR_VAR 0 20
30340: PUSH
30341: LD_INT 0
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: LD_INT 1
30356: NEG
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: LD_INT 1
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 1
30394: NEG
30395: PUSH
30396: LD_INT 0
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 1
30405: NEG
30406: PUSH
30407: LD_INT 1
30409: NEG
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 1
30417: NEG
30418: PUSH
30419: LD_INT 2
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 0
30429: PUSH
30430: LD_INT 2
30432: NEG
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 1
30440: PUSH
30441: LD_INT 1
30443: NEG
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 2
30451: PUSH
30452: LD_INT 0
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 2
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 2
30471: PUSH
30472: LD_INT 2
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: LD_INT 2
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 0
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 1
30501: NEG
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 2
30512: NEG
30513: PUSH
30514: LD_INT 0
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 2
30523: NEG
30524: PUSH
30525: LD_INT 1
30527: NEG
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 2
30535: NEG
30536: PUSH
30537: LD_INT 2
30539: NEG
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30566: LD_ADDR_VAR 0 21
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: LD_INT 0
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 0
30583: PUSH
30584: LD_INT 1
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 1
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 1
30604: PUSH
30605: LD_INT 1
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 0
30614: PUSH
30615: LD_INT 1
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 1
30624: NEG
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 1
30635: NEG
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 1
30647: NEG
30648: PUSH
30649: LD_INT 2
30651: NEG
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 0
30659: PUSH
30660: LD_INT 2
30662: NEG
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 1
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 2
30681: PUSH
30682: LD_INT 0
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 2
30691: PUSH
30692: LD_INT 1
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 2
30701: PUSH
30702: LD_INT 2
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 1
30711: PUSH
30712: LD_INT 2
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 0
30721: PUSH
30722: LD_INT 2
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 1
30731: NEG
30732: PUSH
30733: LD_INT 1
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 2
30742: NEG
30743: PUSH
30744: LD_INT 0
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 2
30753: NEG
30754: PUSH
30755: LD_INT 1
30757: NEG
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 2
30765: NEG
30766: PUSH
30767: LD_INT 2
30769: NEG
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30796: LD_ADDR_VAR 0 22
30800: PUSH
30801: LD_INT 0
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 0
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 1
30824: PUSH
30825: LD_INT 0
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 1
30834: PUSH
30835: LD_INT 1
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 0
30844: PUSH
30845: LD_INT 1
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 1
30854: NEG
30855: PUSH
30856: LD_INT 0
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 1
30865: NEG
30866: PUSH
30867: LD_INT 1
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 1
30877: NEG
30878: PUSH
30879: LD_INT 2
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 0
30889: PUSH
30890: LD_INT 2
30892: NEG
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 1
30900: PUSH
30901: LD_INT 1
30903: NEG
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 2
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 2
30921: PUSH
30922: LD_INT 1
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 2
30931: PUSH
30932: LD_INT 2
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 1
30941: PUSH
30942: LD_INT 2
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 0
30951: PUSH
30952: LD_INT 2
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 1
30961: NEG
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 2
30972: NEG
30973: PUSH
30974: LD_INT 0
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 2
30983: NEG
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 2
30995: NEG
30996: PUSH
30997: LD_INT 2
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31026: LD_ADDR_VAR 0 23
31030: PUSH
31031: LD_INT 0
31033: PUSH
31034: LD_INT 0
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 0
31043: PUSH
31044: LD_INT 1
31046: NEG
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: LD_INT 0
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 1
31064: PUSH
31065: LD_INT 1
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 0
31074: PUSH
31075: LD_INT 1
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 1
31084: NEG
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 1
31095: NEG
31096: PUSH
31097: LD_INT 1
31099: NEG
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 1
31107: NEG
31108: PUSH
31109: LD_INT 2
31111: NEG
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 0
31119: PUSH
31120: LD_INT 2
31122: NEG
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 1
31130: PUSH
31131: LD_INT 1
31133: NEG
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 2
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 2
31151: PUSH
31152: LD_INT 1
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 2
31161: PUSH
31162: LD_INT 2
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 1
31171: PUSH
31172: LD_INT 2
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 0
31181: PUSH
31182: LD_INT 2
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 1
31191: NEG
31192: PUSH
31193: LD_INT 1
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 2
31202: NEG
31203: PUSH
31204: LD_INT 0
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 2
31213: NEG
31214: PUSH
31215: LD_INT 1
31217: NEG
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 2
31225: NEG
31226: PUSH
31227: LD_INT 2
31229: NEG
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 2
31237: NEG
31238: PUSH
31239: LD_INT 3
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PUSH
31251: LD_INT 3
31253: NEG
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 1
31261: PUSH
31262: LD_INT 2
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 2
31272: PUSH
31273: LD_INT 1
31275: NEG
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
31306: LD_ADDR_VAR 0 24
31310: PUSH
31311: LD_INT 0
31313: PUSH
31314: LD_INT 0
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: LD_INT 1
31326: NEG
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 1
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 1
31364: NEG
31365: PUSH
31366: LD_INT 0
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 1
31375: NEG
31376: PUSH
31377: LD_INT 1
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 1
31387: NEG
31388: PUSH
31389: LD_INT 2
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: LD_INT 2
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: LD_INT 1
31413: NEG
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 2
31421: PUSH
31422: LD_INT 0
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 2
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 2
31441: PUSH
31442: LD_INT 2
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 1
31451: PUSH
31452: LD_INT 2
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 0
31461: PUSH
31462: LD_INT 2
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 1
31471: NEG
31472: PUSH
31473: LD_INT 1
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 2
31482: NEG
31483: PUSH
31484: LD_INT 0
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 2
31493: NEG
31494: PUSH
31495: LD_INT 1
31497: NEG
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 2
31505: NEG
31506: PUSH
31507: LD_INT 2
31509: NEG
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: LD_INT 2
31520: NEG
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: LD_INT 1
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 3
31539: PUSH
31540: LD_INT 1
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 3
31549: PUSH
31550: LD_INT 2
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
31582: LD_ADDR_VAR 0 25
31586: PUSH
31587: LD_INT 0
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 0
31599: PUSH
31600: LD_INT 1
31602: NEG
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 1
31610: PUSH
31611: LD_INT 0
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 1
31620: PUSH
31621: LD_INT 1
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: LD_INT 0
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: LD_INT 1
31655: NEG
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 1
31663: NEG
31664: PUSH
31665: LD_INT 2
31667: NEG
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 0
31675: PUSH
31676: LD_INT 2
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: LD_INT 1
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 2
31697: PUSH
31698: LD_INT 0
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 2
31707: PUSH
31708: LD_INT 1
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 2
31717: PUSH
31718: LD_INT 2
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 1
31727: PUSH
31728: LD_INT 2
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 0
31737: PUSH
31738: LD_INT 2
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 1
31747: NEG
31748: PUSH
31749: LD_INT 1
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 2
31758: NEG
31759: PUSH
31760: LD_INT 0
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 2
31769: NEG
31770: PUSH
31771: LD_INT 1
31773: NEG
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 2
31781: NEG
31782: PUSH
31783: LD_INT 2
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 3
31793: PUSH
31794: LD_INT 1
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 3
31803: PUSH
31804: LD_INT 2
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 2
31813: PUSH
31814: LD_INT 3
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: LD_INT 3
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31856: LD_ADDR_VAR 0 26
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: LD_INT 0
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: LD_INT 1
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 1
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 1
31894: PUSH
31895: LD_INT 1
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 0
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 1
31914: NEG
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 1
31925: NEG
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 1
31937: NEG
31938: PUSH
31939: LD_INT 2
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 0
31949: PUSH
31950: LD_INT 2
31952: NEG
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 1
31960: PUSH
31961: LD_INT 1
31963: NEG
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 2
31971: PUSH
31972: LD_INT 0
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 2
31981: PUSH
31982: LD_INT 1
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 2
31991: PUSH
31992: LD_INT 2
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 1
32001: PUSH
32002: LD_INT 2
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: LD_INT 2
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 1
32021: NEG
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 2
32032: NEG
32033: PUSH
32034: LD_INT 0
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 2
32043: NEG
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 2
32055: NEG
32056: PUSH
32057: LD_INT 2
32059: NEG
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 2
32067: PUSH
32068: LD_INT 3
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 1
32077: PUSH
32078: LD_INT 3
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 1
32087: NEG
32088: PUSH
32089: LD_INT 2
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: LD_INT 1
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32132: LD_ADDR_VAR 0 27
32136: PUSH
32137: LD_INT 0
32139: PUSH
32140: LD_INT 0
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 0
32149: PUSH
32150: LD_INT 1
32152: NEG
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: PUSH
32161: LD_INT 0
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 1
32170: PUSH
32171: LD_INT 1
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 0
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 1
32190: NEG
32191: PUSH
32192: LD_INT 0
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 1
32201: NEG
32202: PUSH
32203: LD_INT 1
32205: NEG
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 1
32213: NEG
32214: PUSH
32215: LD_INT 2
32217: NEG
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: LD_INT 2
32228: NEG
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 1
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 2
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 2
32257: PUSH
32258: LD_INT 1
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 2
32267: PUSH
32268: LD_INT 2
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: LD_INT 2
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: LD_INT 2
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 2
32308: NEG
32309: PUSH
32310: LD_INT 0
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 2
32319: NEG
32320: PUSH
32321: LD_INT 1
32323: NEG
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 2
32331: NEG
32332: PUSH
32333: LD_INT 2
32335: NEG
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 1
32343: NEG
32344: PUSH
32345: LD_INT 2
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: LD_INT 1
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 3
32365: NEG
32366: PUSH
32367: LD_INT 1
32369: NEG
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 3
32377: NEG
32378: PUSH
32379: LD_INT 2
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32412: LD_ADDR_VAR 0 28
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: LD_INT 0
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: LD_INT 1
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 1
32493: NEG
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 0
32505: PUSH
32506: LD_INT 2
32508: NEG
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 1
32516: PUSH
32517: LD_INT 1
32519: NEG
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 2
32527: PUSH
32528: LD_INT 0
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 2
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 2
32547: PUSH
32548: LD_INT 2
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 1
32557: PUSH
32558: LD_INT 2
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: LD_INT 2
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 1
32577: NEG
32578: PUSH
32579: LD_INT 1
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 2
32588: NEG
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 2
32599: NEG
32600: PUSH
32601: LD_INT 1
32603: NEG
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 2
32611: NEG
32612: PUSH
32613: LD_INT 2
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 2
32623: NEG
32624: PUSH
32625: LD_INT 3
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 1
32635: NEG
32636: PUSH
32637: LD_INT 3
32639: NEG
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 3
32647: NEG
32648: PUSH
32649: LD_INT 1
32651: NEG
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 3
32659: NEG
32660: PUSH
32661: LD_INT 2
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32694: LD_ADDR_VAR 0 29
32698: PUSH
32699: LD_INT 0
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 0
32711: PUSH
32712: LD_INT 1
32714: NEG
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 1
32722: PUSH
32723: LD_INT 0
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 1
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: LD_INT 1
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 1
32752: NEG
32753: PUSH
32754: LD_INT 0
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: LD_INT 1
32767: NEG
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: PUSH
32777: LD_INT 2
32779: NEG
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 0
32787: PUSH
32788: LD_INT 2
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 1
32798: PUSH
32799: LD_INT 1
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 2
32809: PUSH
32810: LD_INT 0
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 2
32819: PUSH
32820: LD_INT 1
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 1
32829: PUSH
32830: LD_INT 2
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 0
32839: PUSH
32840: LD_INT 2
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 1
32849: NEG
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 2
32860: NEG
32861: PUSH
32862: LD_INT 1
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 2
32872: NEG
32873: PUSH
32874: LD_INT 2
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 2
32884: NEG
32885: PUSH
32886: LD_INT 3
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 2
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 3
32907: PUSH
32908: LD_INT 1
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: LD_INT 3
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 1
32927: NEG
32928: PUSH
32929: LD_INT 2
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 3
32938: NEG
32939: PUSH
32940: LD_INT 2
32942: NEG
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32973: LD_ADDR_VAR 0 30
32977: PUSH
32978: LD_INT 0
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 0
32990: PUSH
32991: LD_INT 1
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 1
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 0
33021: PUSH
33022: LD_INT 1
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 1
33031: NEG
33032: PUSH
33033: LD_INT 0
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 1
33042: NEG
33043: PUSH
33044: LD_INT 1
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: NEG
33055: PUSH
33056: LD_INT 2
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: LD_INT 2
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 2
33088: PUSH
33089: LD_INT 0
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 2
33098: PUSH
33099: LD_INT 1
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: PUSH
33109: LD_INT 2
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: PUSH
33119: LD_INT 2
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 1
33128: NEG
33129: PUSH
33130: LD_INT 1
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 2
33139: NEG
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 2
33150: NEG
33151: PUSH
33152: LD_INT 1
33154: NEG
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 1
33162: NEG
33163: PUSH
33164: LD_INT 3
33166: NEG
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: PUSH
33175: LD_INT 2
33177: NEG
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 3
33185: PUSH
33186: LD_INT 2
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 2
33195: PUSH
33196: LD_INT 3
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 2
33205: NEG
33206: PUSH
33207: LD_INT 1
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 3
33216: NEG
33217: PUSH
33218: LD_INT 1
33220: NEG
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33251: LD_ADDR_VAR 0 31
33255: PUSH
33256: LD_INT 0
33258: PUSH
33259: LD_INT 0
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 0
33268: PUSH
33269: LD_INT 1
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: LD_INT 1
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: LD_INT 1
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 1
33320: NEG
33321: PUSH
33322: LD_INT 1
33324: NEG
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 1
33332: NEG
33333: PUSH
33334: LD_INT 2
33336: NEG
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: LD_INT 1
33347: NEG
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 2
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 2
33365: PUSH
33366: LD_INT 1
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 2
33375: PUSH
33376: LD_INT 2
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 1
33385: PUSH
33386: LD_INT 2
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: LD_INT 2
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: LD_INT 1
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 2
33416: NEG
33417: PUSH
33418: LD_INT 1
33420: NEG
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 2
33428: NEG
33429: PUSH
33430: LD_INT 2
33432: NEG
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 2
33440: NEG
33441: PUSH
33442: LD_INT 3
33444: NEG
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 2
33452: PUSH
33453: LD_INT 1
33455: NEG
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 3
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 1
33473: PUSH
33474: LD_INT 3
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 1
33483: NEG
33484: PUSH
33485: LD_INT 2
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 3
33494: NEG
33495: PUSH
33496: LD_INT 2
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33529: LD_ADDR_VAR 0 32
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: LD_INT 1
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 1
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 1
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: LD_INT 1
33602: NEG
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 1
33610: NEG
33611: PUSH
33612: LD_INT 2
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: LD_INT 2
33625: NEG
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 1
33633: PUSH
33634: LD_INT 1
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 2
33644: PUSH
33645: LD_INT 1
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 2
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: LD_INT 2
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: LD_INT 2
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 1
33684: NEG
33685: PUSH
33686: LD_INT 1
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 2
33695: NEG
33696: PUSH
33697: LD_INT 0
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 2
33706: NEG
33707: PUSH
33708: LD_INT 1
33710: NEG
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 1
33718: NEG
33719: PUSH
33720: LD_INT 3
33722: NEG
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 1
33730: PUSH
33731: LD_INT 2
33733: NEG
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 3
33741: PUSH
33742: LD_INT 2
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 2
33751: PUSH
33752: LD_INT 3
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 2
33761: NEG
33762: PUSH
33763: LD_INT 1
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 3
33772: NEG
33773: PUSH
33774: LD_INT 1
33776: NEG
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33807: LD_ADDR_VAR 0 33
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: LD_INT 1
33827: NEG
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 1
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 1
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 0
33855: PUSH
33856: LD_INT 1
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 1
33865: NEG
33866: PUSH
33867: LD_INT 0
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 1
33876: NEG
33877: PUSH
33878: LD_INT 1
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 1
33888: NEG
33889: PUSH
33890: LD_INT 2
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 1
33900: PUSH
33901: LD_INT 1
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 2
33911: PUSH
33912: LD_INT 0
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 2
33921: PUSH
33922: LD_INT 1
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: LD_INT 2
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: LD_INT 2
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 1
33951: NEG
33952: PUSH
33953: LD_INT 1
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 2
33962: NEG
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 2
33973: NEG
33974: PUSH
33975: LD_INT 1
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 2
33985: NEG
33986: PUSH
33987: LD_INT 2
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 2
33997: NEG
33998: PUSH
33999: LD_INT 3
34001: NEG
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 2
34009: PUSH
34010: LD_INT 1
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 3
34020: PUSH
34021: LD_INT 1
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: LD_INT 3
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: LD_INT 2
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 3
34051: NEG
34052: PUSH
34053: LD_INT 2
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34086: LD_ADDR_VAR 0 34
34090: PUSH
34091: LD_INT 0
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 0
34103: PUSH
34104: LD_INT 1
34106: NEG
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 1
34114: PUSH
34115: LD_INT 0
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: LD_INT 1
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 0
34134: PUSH
34135: LD_INT 1
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 1
34144: NEG
34145: PUSH
34146: LD_INT 0
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 1
34155: NEG
34156: PUSH
34157: LD_INT 1
34159: NEG
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 1
34167: NEG
34168: PUSH
34169: LD_INT 2
34171: NEG
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: LD_INT 2
34182: NEG
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 1
34190: PUSH
34191: LD_INT 1
34193: NEG
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 2
34201: PUSH
34202: LD_INT 1
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 2
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 1
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 1
34231: NEG
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 2
34242: NEG
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 2
34253: NEG
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 2
34265: NEG
34266: PUSH
34267: LD_INT 2
34269: NEG
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 1
34277: NEG
34278: PUSH
34279: LD_INT 3
34281: NEG
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 1
34289: PUSH
34290: LD_INT 2
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 3
34300: PUSH
34301: LD_INT 2
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 2
34310: PUSH
34311: LD_INT 3
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 2
34320: NEG
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 3
34331: NEG
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34366: LD_ADDR_VAR 0 35
34370: PUSH
34371: LD_INT 0
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 1
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 1
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: NEG
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 1
34435: NEG
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 2
34447: PUSH
34448: LD_INT 1
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 2
34457: NEG
34458: PUSH
34459: LD_INT 1
34461: NEG
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34478: LD_ADDR_VAR 0 36
34482: PUSH
34483: LD_INT 0
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 1
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: LD_INT 1
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: LD_INT 1
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: NEG
34548: PUSH
34549: LD_INT 1
34551: NEG
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 1
34559: NEG
34560: PUSH
34561: LD_INT 2
34563: NEG
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 1
34571: PUSH
34572: LD_INT 2
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34590: LD_ADDR_VAR 0 37
34594: PUSH
34595: LD_INT 0
34597: PUSH
34598: LD_INT 0
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 0
34607: PUSH
34608: LD_INT 1
34610: NEG
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 1
34618: PUSH
34619: LD_INT 0
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: LD_INT 1
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 0
34638: PUSH
34639: LD_INT 1
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 1
34648: NEG
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 1
34659: NEG
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 1
34682: NEG
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34702: LD_ADDR_VAR 0 38
34706: PUSH
34707: LD_INT 0
34709: PUSH
34710: LD_INT 0
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 0
34719: PUSH
34720: LD_INT 1
34722: NEG
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 1
34730: PUSH
34731: LD_INT 0
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 0
34750: PUSH
34751: LD_INT 1
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: NEG
34761: PUSH
34762: LD_INT 0
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 1
34771: NEG
34772: PUSH
34773: LD_INT 1
34775: NEG
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 2
34783: PUSH
34784: LD_INT 1
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 2
34793: NEG
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34814: LD_ADDR_VAR 0 39
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: LD_INT 0
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: LD_INT 0
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 1
34872: NEG
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 1
34883: NEG
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: LD_INT 2
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 1
34907: PUSH
34908: LD_INT 2
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34926: LD_ADDR_VAR 0 40
34930: PUSH
34931: LD_INT 0
34933: PUSH
34934: LD_INT 0
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 0
34943: PUSH
34944: LD_INT 1
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 1
34964: PUSH
34965: LD_INT 1
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: LD_INT 1
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 1
34984: NEG
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 1
34995: NEG
34996: PUSH
34997: LD_INT 1
34999: NEG
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 1
35018: NEG
35019: PUSH
35020: LD_INT 1
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35038: LD_ADDR_VAR 0 41
35042: PUSH
35043: LD_INT 0
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 0
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: LD_INT 0
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: LD_INT 1
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 0
35086: PUSH
35087: LD_INT 1
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 1
35096: NEG
35097: PUSH
35098: LD_INT 0
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 1
35107: NEG
35108: PUSH
35109: LD_INT 1
35111: NEG
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 1
35119: NEG
35120: PUSH
35121: LD_INT 2
35123: NEG
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 1
35131: PUSH
35132: LD_INT 1
35134: NEG
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 2
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 2
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 2
35162: PUSH
35163: LD_INT 2
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 1
35172: PUSH
35173: LD_INT 2
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 2
35193: NEG
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 2
35204: NEG
35205: PUSH
35206: LD_INT 1
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 2
35216: NEG
35217: PUSH
35218: LD_INT 2
35220: NEG
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 2
35228: NEG
35229: PUSH
35230: LD_INT 3
35232: NEG
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 2
35240: PUSH
35241: LD_INT 1
35243: NEG
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 3
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 3
35261: PUSH
35262: LD_INT 1
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 3
35271: PUSH
35272: LD_INT 2
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 3
35281: PUSH
35282: LD_INT 3
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 2
35291: PUSH
35292: LD_INT 3
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 2
35301: NEG
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 3
35312: NEG
35313: PUSH
35314: LD_INT 0
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 3
35323: NEG
35324: PUSH
35325: LD_INT 1
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 3
35335: NEG
35336: PUSH
35337: LD_INT 2
35339: NEG
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 3
35347: NEG
35348: PUSH
35349: LD_INT 3
35351: NEG
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35388: LD_ADDR_VAR 0 42
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: LD_INT 0
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 0
35405: PUSH
35406: LD_INT 1
35408: NEG
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: LD_INT 0
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: LD_INT 1
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: NEG
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 1
35457: NEG
35458: PUSH
35459: LD_INT 1
35461: NEG
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 1
35469: NEG
35470: PUSH
35471: LD_INT 2
35473: NEG
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 0
35481: PUSH
35482: LD_INT 2
35484: NEG
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 1
35492: PUSH
35493: LD_INT 1
35495: NEG
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 2
35503: PUSH
35504: LD_INT 1
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 2
35513: PUSH
35514: LD_INT 2
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 1
35523: PUSH
35524: LD_INT 2
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 0
35533: PUSH
35534: LD_INT 2
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 1
35543: NEG
35544: PUSH
35545: LD_INT 1
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 2
35554: NEG
35555: PUSH
35556: LD_INT 1
35558: NEG
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 2
35566: NEG
35567: PUSH
35568: LD_INT 2
35570: NEG
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 2
35578: NEG
35579: PUSH
35580: LD_INT 3
35582: NEG
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 1
35590: NEG
35591: PUSH
35592: LD_INT 3
35594: NEG
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: LD_INT 3
35605: NEG
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 1
35613: PUSH
35614: LD_INT 2
35616: NEG
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 3
35624: PUSH
35625: LD_INT 2
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 3
35634: PUSH
35635: LD_INT 3
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: LD_INT 3
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 1
35654: PUSH
35655: LD_INT 3
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: LD_INT 3
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 1
35674: NEG
35675: PUSH
35676: LD_INT 2
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 3
35685: NEG
35686: PUSH
35687: LD_INT 2
35689: NEG
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 3
35697: NEG
35698: PUSH
35699: LD_INT 3
35701: NEG
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35738: LD_ADDR_VAR 0 43
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 0
35755: PUSH
35756: LD_INT 1
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: LD_INT 0
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 1
35776: PUSH
35777: LD_INT 1
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 0
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 1
35807: NEG
35808: PUSH
35809: LD_INT 1
35811: NEG
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 1
35819: NEG
35820: PUSH
35821: LD_INT 2
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 0
35831: PUSH
35832: LD_INT 2
35834: NEG
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 1
35842: PUSH
35843: LD_INT 1
35845: NEG
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 2
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 2
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 1
35873: PUSH
35874: LD_INT 2
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: LD_INT 2
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: NEG
35894: PUSH
35895: LD_INT 1
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 2
35904: NEG
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 2
35915: NEG
35916: PUSH
35917: LD_INT 1
35919: NEG
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: PUSH
35929: LD_INT 3
35931: NEG
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: LD_INT 3
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: LD_INT 2
35953: NEG
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 3
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 3
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 1
35992: PUSH
35993: LD_INT 3
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 3
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 1
36012: NEG
36013: PUSH
36014: LD_INT 2
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 2
36023: NEG
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 3
36034: NEG
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 3
36045: NEG
36046: PUSH
36047: LD_INT 1
36049: NEG
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36086: LD_ADDR_VAR 0 44
36090: PUSH
36091: LD_INT 0
36093: PUSH
36094: LD_INT 0
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 0
36103: PUSH
36104: LD_INT 1
36106: NEG
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 1
36114: PUSH
36115: LD_INT 0
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 0
36134: PUSH
36135: LD_INT 1
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: NEG
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 1
36155: NEG
36156: PUSH
36157: LD_INT 1
36159: NEG
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 1
36167: NEG
36168: PUSH
36169: LD_INT 2
36171: NEG
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 1
36179: PUSH
36180: LD_INT 1
36182: NEG
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 2
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 2
36200: PUSH
36201: LD_INT 1
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 2
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: LD_INT 2
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 2
36241: NEG
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 2
36252: NEG
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 2
36264: NEG
36265: PUSH
36266: LD_INT 2
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 2
36276: NEG
36277: PUSH
36278: LD_INT 3
36280: NEG
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 2
36288: PUSH
36289: LD_INT 1
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 3
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 3
36309: PUSH
36310: LD_INT 1
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 3
36319: PUSH
36320: LD_INT 2
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 3
36329: PUSH
36330: LD_INT 3
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 2
36339: PUSH
36340: LD_INT 3
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 2
36349: NEG
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 3
36360: NEG
36361: PUSH
36362: LD_INT 0
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 3
36371: NEG
36372: PUSH
36373: LD_INT 1
36375: NEG
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 3
36383: NEG
36384: PUSH
36385: LD_INT 2
36387: NEG
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 3
36395: NEG
36396: PUSH
36397: LD_INT 3
36399: NEG
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36436: LD_ADDR_VAR 0 45
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 0
36453: PUSH
36454: LD_INT 1
36456: NEG
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: LD_INT 0
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 1
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 1
36494: NEG
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 1
36505: NEG
36506: PUSH
36507: LD_INT 1
36509: NEG
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 1
36517: NEG
36518: PUSH
36519: LD_INT 2
36521: NEG
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 0
36529: PUSH
36530: LD_INT 2
36532: NEG
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: PUSH
36541: LD_INT 1
36543: NEG
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 2
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 2
36561: PUSH
36562: LD_INT 2
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: LD_INT 2
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 0
36581: PUSH
36582: LD_INT 2
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 1
36591: NEG
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 2
36602: NEG
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 2
36614: NEG
36615: PUSH
36616: LD_INT 2
36618: NEG
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 2
36626: NEG
36627: PUSH
36628: LD_INT 3
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 1
36638: NEG
36639: PUSH
36640: LD_INT 3
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: LD_INT 3
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: LD_INT 2
36664: NEG
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 3
36672: PUSH
36673: LD_INT 2
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 3
36682: PUSH
36683: LD_INT 3
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 2
36692: PUSH
36693: LD_INT 3
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 1
36702: PUSH
36703: LD_INT 3
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 0
36712: PUSH
36713: LD_INT 3
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: NEG
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 3
36733: NEG
36734: PUSH
36735: LD_INT 2
36737: NEG
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 3
36745: NEG
36746: PUSH
36747: LD_INT 3
36749: NEG
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36786: LD_ADDR_VAR 0 46
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: LD_INT 0
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 0
36803: PUSH
36804: LD_INT 1
36806: NEG
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 1
36824: PUSH
36825: LD_INT 1
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: LD_INT 1
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 1
36844: NEG
36845: PUSH
36846: LD_INT 0
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: LD_INT 1
36859: NEG
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 1
36867: NEG
36868: PUSH
36869: LD_INT 2
36871: NEG
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 0
36879: PUSH
36880: LD_INT 2
36882: NEG
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: LD_INT 1
36893: NEG
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 2
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 2
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 1
36921: PUSH
36922: LD_INT 2
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: LD_INT 2
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: PUSH
36943: LD_INT 1
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 2
36952: NEG
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 2
36963: NEG
36964: PUSH
36965: LD_INT 1
36967: NEG
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 1
36975: NEG
36976: PUSH
36977: LD_INT 3
36979: NEG
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: LD_INT 3
36990: NEG
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: LD_INT 2
37001: NEG
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 2
37009: PUSH
37010: LD_INT 1
37012: NEG
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 3
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 3
37030: PUSH
37031: LD_INT 1
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: LD_INT 3
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: LD_INT 3
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 1
37060: NEG
37061: PUSH
37062: LD_INT 2
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 2
37071: NEG
37072: PUSH
37073: LD_INT 1
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 3
37082: NEG
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 3
37093: NEG
37094: PUSH
37095: LD_INT 1
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37134: LD_ADDR_VAR 0 47
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 1
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 0
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: NEG
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 1
37203: NEG
37204: PUSH
37205: LD_INT 1
37207: NEG
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 1
37215: NEG
37216: PUSH
37217: LD_INT 2
37219: NEG
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 0
37227: PUSH
37228: LD_INT 2
37230: NEG
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 1
37238: PUSH
37239: LD_INT 1
37241: NEG
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 2
37249: NEG
37250: PUSH
37251: LD_INT 1
37253: NEG
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 2
37261: NEG
37262: PUSH
37263: LD_INT 2
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37285: LD_ADDR_VAR 0 48
37289: PUSH
37290: LD_INT 0
37292: PUSH
37293: LD_INT 0
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: LD_INT 1
37305: NEG
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 1
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 1
37323: PUSH
37324: LD_INT 1
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 0
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 1
37343: NEG
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 1
37354: NEG
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 1
37366: NEG
37367: PUSH
37368: LD_INT 2
37370: NEG
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 2
37381: NEG
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: PUSH
37390: LD_INT 1
37392: NEG
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 2
37400: PUSH
37401: LD_INT 0
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 2
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37432: LD_ADDR_VAR 0 49
37436: PUSH
37437: LD_INT 0
37439: PUSH
37440: LD_INT 0
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 1
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 1
37470: PUSH
37471: LD_INT 1
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: LD_INT 1
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 1
37490: NEG
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 1
37501: NEG
37502: PUSH
37503: LD_INT 1
37505: NEG
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: LD_INT 1
37516: NEG
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 2
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 2
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 2
37544: PUSH
37545: LD_INT 2
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: LD_INT 2
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37576: LD_ADDR_VAR 0 50
37580: PUSH
37581: LD_INT 0
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: LD_INT 1
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 1
37634: NEG
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: NEG
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 2
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 2
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: LD_INT 2
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 1
37697: NEG
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37720: LD_ADDR_VAR 0 51
37724: PUSH
37725: LD_INT 0
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: LD_INT 1
37740: NEG
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 1
37748: PUSH
37749: LD_INT 0
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: LD_INT 1
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 1
37778: NEG
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 1
37789: NEG
37790: PUSH
37791: LD_INT 1
37793: NEG
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 1
37801: PUSH
37802: LD_INT 2
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: LD_INT 2
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 2
37832: NEG
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 2
37843: NEG
37844: PUSH
37845: LD_INT 1
37847: NEG
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37867: LD_ADDR_VAR 0 52
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 0
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: LD_INT 1
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 1
37925: NEG
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 1
37936: NEG
37937: PUSH
37938: LD_INT 1
37940: NEG
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 1
37948: NEG
37949: PUSH
37950: LD_INT 2
37952: NEG
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: NEG
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 2
37971: NEG
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 2
37982: NEG
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 2
37994: NEG
37995: PUSH
37996: LD_INT 2
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38018: LD_ADDR_VAR 0 53
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: LD_INT 0
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 0
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 1
38046: PUSH
38047: LD_INT 0
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: LD_INT 1
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 0
38111: PUSH
38112: LD_INT 2
38114: NEG
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 1
38122: PUSH
38123: LD_INT 1
38125: NEG
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 2
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 2
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 2
38153: PUSH
38154: LD_INT 2
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 1
38163: PUSH
38164: LD_INT 2
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 0
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: LD_INT 1
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 2
38194: NEG
38195: PUSH
38196: LD_INT 0
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 2
38205: NEG
38206: PUSH
38207: LD_INT 1
38209: NEG
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 2
38217: NEG
38218: PUSH
38219: LD_INT 2
38221: NEG
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38248: LD_ADDR_VAR 0 54
38252: PUSH
38253: LD_INT 0
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 1
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: LD_INT 1
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 0
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: LD_INT 0
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 1
38317: NEG
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: LD_INT 2
38333: NEG
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: LD_INT 2
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 2
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 2
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 2
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: LD_INT 2
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 1
38413: NEG
38414: PUSH
38415: LD_INT 1
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 2
38424: NEG
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 2
38435: NEG
38436: PUSH
38437: LD_INT 1
38439: NEG
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 2
38447: NEG
38448: PUSH
38449: LD_INT 2
38451: NEG
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38478: LD_ADDR_VAR 0 55
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: LD_INT 1
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: LD_INT 0
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: LD_INT 2
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: LD_INT 2
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: LD_INT 1
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 2
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 2
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 2
38613: PUSH
38614: LD_INT 2
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: LD_INT 2
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: LD_INT 2
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 2
38654: NEG
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 2
38665: NEG
38666: PUSH
38667: LD_INT 1
38669: NEG
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 2
38677: NEG
38678: PUSH
38679: LD_INT 2
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38708: LD_ADDR_VAR 0 56
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: LD_INT 0
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 0
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 1
38736: PUSH
38737: LD_INT 0
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: LD_INT 1
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: LD_INT 1
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 1
38766: NEG
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 1
38777: NEG
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: LD_INT 2
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: LD_INT 2
38804: NEG
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 2
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 2
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 2
38843: PUSH
38844: LD_INT 2
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: LD_INT 2
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: LD_INT 2
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 2
38884: NEG
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 2
38895: NEG
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 2
38907: NEG
38908: PUSH
38909: LD_INT 2
38911: NEG
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38938: LD_ADDR_VAR 0 57
38942: PUSH
38943: LD_INT 0
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: LD_INT 1
38958: NEG
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: PUSH
38977: LD_INT 1
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: LD_INT 1
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 1
38996: NEG
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: PUSH
39009: LD_INT 1
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 1
39019: NEG
39020: PUSH
39021: LD_INT 2
39023: NEG
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: LD_INT 2
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 2
39053: PUSH
39054: LD_INT 0
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 2
39063: PUSH
39064: LD_INT 1
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: LD_INT 2
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: LD_INT 2
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: LD_INT 2
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 2
39114: NEG
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 2
39125: NEG
39126: PUSH
39127: LD_INT 1
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 2
39137: NEG
39138: PUSH
39139: LD_INT 2
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39168: LD_ADDR_VAR 0 58
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: LD_INT 0
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: LD_INT 1
39188: NEG
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: LD_INT 1
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: NEG
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: LD_INT 1
39241: NEG
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: LD_INT 2
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 0
39261: PUSH
39262: LD_INT 2
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 1
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 2
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 2
39293: PUSH
39294: LD_INT 1
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 2
39303: PUSH
39304: LD_INT 2
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: LD_INT 2
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: LD_INT 2
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 1
39333: NEG
39334: PUSH
39335: LD_INT 1
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 2
39344: NEG
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 2
39367: NEG
39368: PUSH
39369: LD_INT 2
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39398: LD_ADDR_VAR 0 59
39402: PUSH
39403: LD_INT 0
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: LD_INT 1
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 1
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: LD_INT 1
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: LD_INT 0
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 1
39467: NEG
39468: PUSH
39469: LD_INT 1
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39486: LD_ADDR_VAR 0 60
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: LD_INT 1
39559: NEG
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39574: LD_ADDR_VAR 0 61
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: LD_INT 1
39594: NEG
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 1
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: LD_INT 1
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: LD_INT 1
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39662: LD_ADDR_VAR 0 62
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: LD_INT 1
39682: NEG
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: LD_INT 0
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 1
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: LD_INT 1
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: LD_INT 1
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39750: LD_ADDR_VAR 0 63
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 0
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 1
39778: PUSH
39779: LD_INT 0
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 1
39808: NEG
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: LD_INT 1
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39838: LD_ADDR_VAR 0 64
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: NEG
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: LD_INT 1
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: ST_TO_ADDR
// end ; 1 :
39926: GO 45823
39928: LD_INT 1
39930: DOUBLE
39931: EQUAL
39932: IFTRUE 39936
39934: GO 42559
39936: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39937: LD_ADDR_VAR 0 11
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: LD_INT 3
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: LD_INT 3
39959: NEG
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: PUSH
39968: LD_INT 2
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: LIST
39980: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39981: LD_ADDR_VAR 0 12
39985: PUSH
39986: LD_INT 2
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 3
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 3
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: LIST
40021: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40022: LD_ADDR_VAR 0 13
40026: PUSH
40027: LD_INT 3
40029: PUSH
40030: LD_INT 2
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 3
40039: PUSH
40040: LD_INT 3
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 2
40049: PUSH
40050: LD_INT 3
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: LIST
40061: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40062: LD_ADDR_VAR 0 14
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: LD_INT 3
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: LD_INT 3
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: LD_INT 2
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: LIST
40102: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40103: LD_ADDR_VAR 0 15
40107: PUSH
40108: LD_INT 2
40110: NEG
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 3
40121: NEG
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 3
40132: NEG
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: LIST
40146: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40147: LD_ADDR_VAR 0 16
40151: PUSH
40152: LD_INT 2
40154: NEG
40155: PUSH
40156: LD_INT 3
40158: NEG
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 3
40166: NEG
40167: PUSH
40168: LD_INT 2
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 3
40178: NEG
40179: PUSH
40180: LD_INT 3
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: LIST
40192: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40193: LD_ADDR_VAR 0 17
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: LD_INT 3
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: LD_INT 3
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: LIST
40236: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40237: LD_ADDR_VAR 0 18
40241: PUSH
40242: LD_INT 2
40244: PUSH
40245: LD_INT 1
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 3
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 3
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: LIST
40277: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40278: LD_ADDR_VAR 0 19
40282: PUSH
40283: LD_INT 3
40285: PUSH
40286: LD_INT 2
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 3
40295: PUSH
40296: LD_INT 3
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 2
40305: PUSH
40306: LD_INT 3
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: LIST
40317: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40318: LD_ADDR_VAR 0 20
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 3
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: LD_INT 3
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: LD_INT 2
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: LIST
40358: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40359: LD_ADDR_VAR 0 21
40363: PUSH
40364: LD_INT 2
40366: NEG
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 3
40377: NEG
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 3
40388: NEG
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: LIST
40402: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40403: LD_ADDR_VAR 0 22
40407: PUSH
40408: LD_INT 2
40410: NEG
40411: PUSH
40412: LD_INT 3
40414: NEG
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 3
40422: NEG
40423: PUSH
40424: LD_INT 2
40426: NEG
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 3
40434: NEG
40435: PUSH
40436: LD_INT 3
40438: NEG
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: LIST
40448: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
40449: LD_ADDR_VAR 0 23
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 3
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: NEG
40468: PUSH
40469: LD_INT 4
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: PUSH
40480: LD_INT 3
40482: NEG
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: LIST
40492: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
40493: LD_ADDR_VAR 0 24
40497: PUSH
40498: LD_INT 3
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 3
40510: PUSH
40511: LD_INT 1
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 4
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: LIST
40533: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
40534: LD_ADDR_VAR 0 25
40538: PUSH
40539: LD_INT 3
40541: PUSH
40542: LD_INT 3
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 4
40551: PUSH
40552: LD_INT 3
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 3
40561: PUSH
40562: LD_INT 4
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: LIST
40573: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
40574: LD_ADDR_VAR 0 26
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: LD_INT 3
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: LD_INT 4
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: LD_INT 3
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: LIST
40614: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
40615: LD_ADDR_VAR 0 27
40619: PUSH
40620: LD_INT 3
40622: NEG
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 3
40633: NEG
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 4
40644: NEG
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: LIST
40658: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
40659: LD_ADDR_VAR 0 28
40663: PUSH
40664: LD_INT 3
40666: NEG
40667: PUSH
40668: LD_INT 3
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 3
40678: NEG
40679: PUSH
40680: LD_INT 4
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 4
40690: NEG
40691: PUSH
40692: LD_INT 3
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: LIST
40704: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
40705: LD_ADDR_VAR 0 29
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: LD_INT 3
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: LD_INT 3
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: LD_INT 2
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: LD_INT 4
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: LD_INT 4
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: LD_INT 3
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: LD_INT 5
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: LD_INT 5
40795: NEG
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: LD_INT 4
40806: NEG
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: LD_INT 6
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: LD_INT 6
40829: NEG
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: LD_INT 5
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
40860: LD_ADDR_VAR 0 30
40864: PUSH
40865: LD_INT 2
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 3
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 3
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 3
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 4
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 4
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 4
40929: PUSH
40930: LD_INT 1
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 5
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 5
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 5
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 6
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 6
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
41003: LD_ADDR_VAR 0 31
41007: PUSH
41008: LD_INT 3
41010: PUSH
41011: LD_INT 2
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 3
41020: PUSH
41021: LD_INT 3
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: PUSH
41031: LD_INT 3
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 4
41040: PUSH
41041: LD_INT 3
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 4
41050: PUSH
41051: LD_INT 4
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 3
41060: PUSH
41061: LD_INT 4
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 5
41070: PUSH
41071: LD_INT 4
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 5
41080: PUSH
41081: LD_INT 5
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 4
41090: PUSH
41091: LD_INT 5
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 6
41100: PUSH
41101: LD_INT 5
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 6
41110: PUSH
41111: LD_INT 6
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 5
41120: PUSH
41121: LD_INT 6
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
41142: LD_ADDR_VAR 0 32
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: LD_INT 3
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: LD_INT 3
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: LD_INT 2
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 1
41180: PUSH
41181: LD_INT 4
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: LD_INT 4
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: LD_INT 3
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: LD_INT 5
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: LD_INT 5
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: NEG
41232: PUSH
41233: LD_INT 4
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: LD_INT 6
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: LD_INT 6
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: LD_INT 5
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
41285: LD_ADDR_VAR 0 33
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 3
41303: NEG
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 3
41314: NEG
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 3
41326: NEG
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 4
41337: NEG
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 4
41348: NEG
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 4
41360: NEG
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 5
41371: NEG
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 5
41382: NEG
41383: PUSH
41384: LD_INT 1
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 5
41394: NEG
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 6
41405: NEG
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 6
41416: NEG
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
41440: LD_ADDR_VAR 0 34
41444: PUSH
41445: LD_INT 2
41447: NEG
41448: PUSH
41449: LD_INT 3
41451: NEG
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 3
41459: NEG
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 3
41471: NEG
41472: PUSH
41473: LD_INT 3
41475: NEG
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 3
41483: NEG
41484: PUSH
41485: LD_INT 4
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 4
41495: NEG
41496: PUSH
41497: LD_INT 3
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 4
41507: NEG
41508: PUSH
41509: LD_INT 4
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 4
41519: NEG
41520: PUSH
41521: LD_INT 5
41523: NEG
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 5
41531: NEG
41532: PUSH
41533: LD_INT 4
41535: NEG
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 5
41543: NEG
41544: PUSH
41545: LD_INT 5
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 5
41555: NEG
41556: PUSH
41557: LD_INT 6
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 6
41567: NEG
41568: PUSH
41569: LD_INT 5
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 6
41579: NEG
41580: PUSH
41581: LD_INT 6
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
41603: LD_ADDR_VAR 0 41
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: LD_INT 2
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: LD_INT 3
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 2
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: LIST
41646: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
41647: LD_ADDR_VAR 0 42
41651: PUSH
41652: LD_INT 2
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 2
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 3
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: LIST
41687: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
41688: LD_ADDR_VAR 0 43
41692: PUSH
41693: LD_INT 2
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 3
41705: PUSH
41706: LD_INT 2
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: LD_INT 3
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: LIST
41727: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
41728: LD_ADDR_VAR 0 44
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: LD_INT 2
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: LD_INT 3
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: LD_INT 2
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: LIST
41768: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41769: LD_ADDR_VAR 0 45
41773: PUSH
41774: LD_INT 2
41776: NEG
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 2
41787: NEG
41788: PUSH
41789: LD_INT 1
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 3
41798: NEG
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: LIST
41812: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
41813: LD_ADDR_VAR 0 46
41817: PUSH
41818: LD_INT 2
41820: NEG
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: NEG
41833: PUSH
41834: LD_INT 3
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 3
41844: NEG
41845: PUSH
41846: LD_INT 2
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: LIST
41858: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
41859: LD_ADDR_VAR 0 47
41863: PUSH
41864: LD_INT 2
41866: NEG
41867: PUSH
41868: LD_INT 3
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: LD_INT 3
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41892: LD_ADDR_VAR 0 48
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: LD_INT 2
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: LD_INT 1
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
41923: LD_ADDR_VAR 0 49
41927: PUSH
41928: LD_INT 3
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 3
41940: PUSH
41941: LD_INT 2
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
41952: LD_ADDR_VAR 0 50
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: LD_INT 3
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 1
41969: PUSH
41970: LD_INT 3
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41981: LD_ADDR_VAR 0 51
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 2
41999: NEG
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42012: LD_ADDR_VAR 0 52
42016: PUSH
42017: LD_INT 3
42019: NEG
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 3
42031: NEG
42032: PUSH
42033: LD_INT 2
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42045: LD_ADDR_VAR 0 53
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: LD_INT 3
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: LD_INT 3
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: LD_INT 2
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: LIST
42088: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42089: LD_ADDR_VAR 0 54
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 3
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 3
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: LIST
42129: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42130: LD_ADDR_VAR 0 55
42134: PUSH
42135: LD_INT 3
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 3
42147: PUSH
42148: LD_INT 3
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 2
42157: PUSH
42158: LD_INT 3
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: LIST
42169: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42170: LD_ADDR_VAR 0 56
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: LD_INT 3
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: LD_INT 3
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: LD_INT 2
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: LIST
42210: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42211: LD_ADDR_VAR 0 57
42215: PUSH
42216: LD_INT 2
42218: NEG
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 3
42229: NEG
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 3
42240: NEG
42241: PUSH
42242: LD_INT 1
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: LIST
42254: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42255: LD_ADDR_VAR 0 58
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: LD_INT 3
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 3
42274: NEG
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 3
42286: NEG
42287: PUSH
42288: LD_INT 3
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: LIST
42300: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
42301: LD_ADDR_VAR 0 59
42305: PUSH
42306: LD_INT 1
42308: NEG
42309: PUSH
42310: LD_INT 2
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: LD_INT 2
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: LIST
42344: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42345: LD_ADDR_VAR 0 60
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 2
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 2
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: LIST
42385: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42386: LD_ADDR_VAR 0 61
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 2
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: LIST
42425: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42426: LD_ADDR_VAR 0 62
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: LD_INT 2
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: NEG
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: LIST
42466: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42467: LD_ADDR_VAR 0 63
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 2
42496: NEG
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: LIST
42510: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42511: LD_ADDR_VAR 0 64
42515: PUSH
42516: LD_INT 1
42518: NEG
42519: PUSH
42520: LD_INT 2
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 2
42530: NEG
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 2
42542: NEG
42543: PUSH
42544: LD_INT 2
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: LIST
42556: ST_TO_ADDR
// end ; 2 :
42557: GO 45823
42559: LD_INT 2
42561: DOUBLE
42562: EQUAL
42563: IFTRUE 42567
42565: GO 45822
42567: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
42568: LD_ADDR_VAR 0 29
42572: PUSH
42573: LD_INT 4
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 4
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 5
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 5
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 4
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 3
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 3
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 3
42647: PUSH
42648: LD_INT 2
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 5
42658: PUSH
42659: LD_INT 2
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 3
42668: PUSH
42669: LD_INT 3
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 3
42678: PUSH
42679: LD_INT 2
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 4
42688: PUSH
42689: LD_INT 3
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 4
42698: PUSH
42699: LD_INT 4
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 3
42708: PUSH
42709: LD_INT 4
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 2
42718: PUSH
42719: LD_INT 3
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 2
42728: PUSH
42729: LD_INT 2
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 4
42738: PUSH
42739: LD_INT 2
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 2
42748: PUSH
42749: LD_INT 4
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: LD_INT 4
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: LD_INT 3
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: LD_INT 4
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: LD_INT 5
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: LD_INT 5
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: LD_INT 4
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: LD_INT 3
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: LD_INT 5
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 2
42840: NEG
42841: PUSH
42842: LD_INT 3
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 3
42851: NEG
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 3
42862: NEG
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: NEG
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 2
42885: NEG
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 3
42896: NEG
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 4
42907: NEG
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 4
42918: NEG
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 4
42930: NEG
42931: PUSH
42932: LD_INT 2
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: LD_INT 2
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 4
42953: NEG
42954: PUSH
42955: LD_INT 4
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 4
42965: NEG
42966: PUSH
42967: LD_INT 5
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 3
42977: NEG
42978: PUSH
42979: LD_INT 4
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 3
42989: NEG
42990: PUSH
42991: LD_INT 3
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 4
43001: NEG
43002: PUSH
43003: LD_INT 3
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 5
43013: NEG
43014: PUSH
43015: LD_INT 4
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 5
43025: NEG
43026: PUSH
43027: LD_INT 5
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 3
43037: NEG
43038: PUSH
43039: LD_INT 5
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 5
43049: NEG
43050: PUSH
43051: LD_INT 3
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
43106: LD_ADDR_VAR 0 30
43110: PUSH
43111: LD_INT 4
43113: PUSH
43114: LD_INT 4
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 4
43123: PUSH
43124: LD_INT 3
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 5
43133: PUSH
43134: LD_INT 4
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 5
43143: PUSH
43144: LD_INT 5
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 4
43153: PUSH
43154: LD_INT 5
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 3
43163: PUSH
43164: LD_INT 4
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 3
43173: PUSH
43174: LD_INT 3
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 5
43183: PUSH
43184: LD_INT 3
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 3
43193: PUSH
43194: LD_INT 5
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: LD_INT 3
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: LD_INT 2
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: LD_INT 3
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: LD_INT 4
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: LD_INT 4
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: LD_INT 3
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: LD_INT 2
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 2
43275: PUSH
43276: LD_INT 4
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 2
43285: NEG
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 4
43296: NEG
43297: PUSH
43298: LD_INT 0
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 4
43307: NEG
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 3
43319: NEG
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 3
43330: NEG
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 4
43341: NEG
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 5
43352: NEG
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 5
43363: NEG
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 5
43375: NEG
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 3
43387: NEG
43388: PUSH
43389: LD_INT 2
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 3
43398: NEG
43399: PUSH
43400: LD_INT 3
43402: NEG
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 3
43410: NEG
43411: PUSH
43412: LD_INT 4
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: LD_INT 3
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 2
43434: NEG
43435: PUSH
43436: LD_INT 2
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 3
43446: NEG
43447: PUSH
43448: LD_INT 2
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 4
43458: NEG
43459: PUSH
43460: LD_INT 3
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 4
43470: NEG
43471: PUSH
43472: LD_INT 4
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 2
43482: NEG
43483: PUSH
43484: LD_INT 4
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 4
43494: NEG
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: LD_INT 4
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: LD_INT 5
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: LD_INT 4
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: LD_INT 3
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: LD_INT 3
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: LD_INT 4
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 1
43573: NEG
43574: PUSH
43575: LD_INT 5
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 2
43585: PUSH
43586: LD_INT 3
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 2
43596: NEG
43597: PUSH
43598: LD_INT 5
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
43653: LD_ADDR_VAR 0 31
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 4
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: LD_INT 3
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: LD_INT 4
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 5
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 5
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: LD_INT 4
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: LD_INT 3
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: LD_INT 5
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 2
43742: NEG
43743: PUSH
43744: LD_INT 3
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 3
43753: NEG
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 3
43764: NEG
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: NEG
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 2
43787: NEG
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 3
43798: NEG
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 4
43809: NEG
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 4
43820: NEG
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 4
43832: NEG
43833: PUSH
43834: LD_INT 2
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 4
43855: NEG
43856: PUSH
43857: LD_INT 4
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 4
43867: NEG
43868: PUSH
43869: LD_INT 5
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 3
43879: NEG
43880: PUSH
43881: LD_INT 4
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 3
43891: NEG
43892: PUSH
43893: LD_INT 3
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 4
43903: NEG
43904: PUSH
43905: LD_INT 3
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 5
43915: NEG
43916: PUSH
43917: LD_INT 4
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 5
43927: NEG
43928: PUSH
43929: LD_INT 5
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 3
43939: NEG
43940: PUSH
43941: LD_INT 5
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 5
43951: NEG
43952: PUSH
43953: LD_INT 3
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: LD_INT 3
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: LD_INT 4
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: LD_INT 3
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: LD_INT 2
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: LD_INT 3
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: LD_INT 4
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 2
44042: PUSH
44043: LD_INT 2
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: LD_INT 4
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 4
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 4
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 5
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 5
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 4
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 3
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 3
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 3
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 5
44148: PUSH
44149: LD_INT 2
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
44203: LD_ADDR_VAR 0 32
44207: PUSH
44208: LD_INT 4
44210: NEG
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 4
44221: NEG
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 3
44233: NEG
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 3
44244: NEG
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 4
44255: NEG
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 5
44266: NEG
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 5
44277: NEG
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 5
44289: NEG
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 3
44301: NEG
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 3
44312: NEG
44313: PUSH
44314: LD_INT 3
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 3
44324: NEG
44325: PUSH
44326: LD_INT 4
44328: NEG
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 2
44336: NEG
44337: PUSH
44338: LD_INT 3
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 2
44348: NEG
44349: PUSH
44350: LD_INT 2
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 3
44360: NEG
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 4
44372: NEG
44373: PUSH
44374: LD_INT 3
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 4
44384: NEG
44385: PUSH
44386: LD_INT 4
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: NEG
44397: PUSH
44398: LD_INT 4
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 4
44408: NEG
44409: PUSH
44410: LD_INT 2
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: LD_INT 4
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 5
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: LD_INT 4
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: LD_INT 3
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: LD_INT 3
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: LD_INT 4
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: LD_INT 5
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: LD_INT 3
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: LD_INT 5
44514: NEG
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 3
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 3
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 4
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 4
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 3
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 2
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: LD_INT 2
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 4
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 4
44615: PUSH
44616: LD_INT 4
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 4
44625: PUSH
44626: LD_INT 3
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 5
44635: PUSH
44636: LD_INT 4
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 5
44645: PUSH
44646: LD_INT 5
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 4
44655: PUSH
44656: LD_INT 5
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 3
44665: PUSH
44666: LD_INT 4
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 3
44675: PUSH
44676: LD_INT 3
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 5
44685: PUSH
44686: LD_INT 3
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 3
44695: PUSH
44696: LD_INT 5
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
44750: LD_ADDR_VAR 0 33
44754: PUSH
44755: LD_INT 4
44757: NEG
44758: PUSH
44759: LD_INT 4
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 4
44769: NEG
44770: PUSH
44771: LD_INT 5
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 3
44781: NEG
44782: PUSH
44783: LD_INT 4
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 3
44793: NEG
44794: PUSH
44795: LD_INT 3
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 4
44805: NEG
44806: PUSH
44807: LD_INT 3
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 5
44817: NEG
44818: PUSH
44819: LD_INT 4
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 5
44829: NEG
44830: PUSH
44831: LD_INT 5
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 3
44841: NEG
44842: PUSH
44843: LD_INT 5
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 5
44853: NEG
44854: PUSH
44855: LD_INT 3
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 3
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: LD_INT 4
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: LD_INT 3
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: LD_INT 2
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: LD_INT 2
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: LD_INT 3
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: LD_INT 4
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 2
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: NEG
44956: PUSH
44957: LD_INT 4
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 4
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 4
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 5
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 5
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 4
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 3
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 3
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 3
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 5
45050: PUSH
45051: LD_INT 2
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 3
45060: PUSH
45061: LD_INT 3
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 3
45070: PUSH
45071: LD_INT 2
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 4
45080: PUSH
45081: LD_INT 3
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 4
45090: PUSH
45091: LD_INT 4
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 3
45100: PUSH
45101: LD_INT 4
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: LD_INT 3
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 4
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 2
45140: PUSH
45141: LD_INT 4
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: LD_INT 4
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: LD_INT 3
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: LD_INT 4
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: LD_INT 5
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: LD_INT 5
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: LD_INT 4
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: LD_INT 3
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: LD_INT 5
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 2
45232: NEG
45233: PUSH
45234: LD_INT 3
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
45288: LD_ADDR_VAR 0 34
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: LD_INT 4
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 5
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: LD_INT 4
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: LD_INT 3
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: LD_INT 3
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: LD_INT 4
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: LD_INT 5
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: LD_INT 3
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: LD_INT 5
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 3
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 3
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 4
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 4
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 3
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 2
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 4
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 4
45490: PUSH
45491: LD_INT 4
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 4
45500: PUSH
45501: LD_INT 3
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 5
45510: PUSH
45511: LD_INT 4
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 5
45520: PUSH
45521: LD_INT 5
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 4
45530: PUSH
45531: LD_INT 5
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 3
45540: PUSH
45541: LD_INT 4
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 3
45550: PUSH
45551: LD_INT 3
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 5
45560: PUSH
45561: LD_INT 3
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 3
45570: PUSH
45571: LD_INT 5
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 3
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: LD_INT 2
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: LD_INT 3
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: LD_INT 4
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 4
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: LD_INT 3
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 2
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: LD_INT 4
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: LD_INT 2
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 4
45673: NEG
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 4
45684: NEG
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 3
45707: NEG
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 4
45718: NEG
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 5
45729: NEG
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 5
45740: NEG
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 5
45752: NEG
45753: PUSH
45754: LD_INT 2
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 3
45764: NEG
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: ST_TO_ADDR
// end ; end ;
45820: GO 45823
45822: POP
// case btype of b_depot , b_warehouse :
45823: LD_VAR 0 1
45827: PUSH
45828: LD_INT 0
45830: DOUBLE
45831: EQUAL
45832: IFTRUE 45842
45834: LD_INT 1
45836: DOUBLE
45837: EQUAL
45838: IFTRUE 45842
45840: GO 46043
45842: POP
// case nation of nation_american :
45843: LD_VAR 0 5
45847: PUSH
45848: LD_INT 1
45850: DOUBLE
45851: EQUAL
45852: IFTRUE 45856
45854: GO 45912
45856: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
45857: LD_ADDR_VAR 0 9
45861: PUSH
45862: LD_VAR 0 11
45866: PUSH
45867: LD_VAR 0 12
45871: PUSH
45872: LD_VAR 0 13
45876: PUSH
45877: LD_VAR 0 14
45881: PUSH
45882: LD_VAR 0 15
45886: PUSH
45887: LD_VAR 0 16
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: PUSH
45900: LD_VAR 0 4
45904: PUSH
45905: LD_INT 1
45907: PLUS
45908: ARRAY
45909: ST_TO_ADDR
45910: GO 46041
45912: LD_INT 2
45914: DOUBLE
45915: EQUAL
45916: IFTRUE 45920
45918: GO 45976
45920: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
45921: LD_ADDR_VAR 0 9
45925: PUSH
45926: LD_VAR 0 17
45930: PUSH
45931: LD_VAR 0 18
45935: PUSH
45936: LD_VAR 0 19
45940: PUSH
45941: LD_VAR 0 20
45945: PUSH
45946: LD_VAR 0 21
45950: PUSH
45951: LD_VAR 0 22
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: PUSH
45964: LD_VAR 0 4
45968: PUSH
45969: LD_INT 1
45971: PLUS
45972: ARRAY
45973: ST_TO_ADDR
45974: GO 46041
45976: LD_INT 3
45978: DOUBLE
45979: EQUAL
45980: IFTRUE 45984
45982: GO 46040
45984: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
45985: LD_ADDR_VAR 0 9
45989: PUSH
45990: LD_VAR 0 23
45994: PUSH
45995: LD_VAR 0 24
45999: PUSH
46000: LD_VAR 0 25
46004: PUSH
46005: LD_VAR 0 26
46009: PUSH
46010: LD_VAR 0 27
46014: PUSH
46015: LD_VAR 0 28
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: PUSH
46028: LD_VAR 0 4
46032: PUSH
46033: LD_INT 1
46035: PLUS
46036: ARRAY
46037: ST_TO_ADDR
46038: GO 46041
46040: POP
46041: GO 46596
46043: LD_INT 2
46045: DOUBLE
46046: EQUAL
46047: IFTRUE 46057
46049: LD_INT 3
46051: DOUBLE
46052: EQUAL
46053: IFTRUE 46057
46055: GO 46113
46057: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
46058: LD_ADDR_VAR 0 9
46062: PUSH
46063: LD_VAR 0 29
46067: PUSH
46068: LD_VAR 0 30
46072: PUSH
46073: LD_VAR 0 31
46077: PUSH
46078: LD_VAR 0 32
46082: PUSH
46083: LD_VAR 0 33
46087: PUSH
46088: LD_VAR 0 34
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: PUSH
46101: LD_VAR 0 4
46105: PUSH
46106: LD_INT 1
46108: PLUS
46109: ARRAY
46110: ST_TO_ADDR
46111: GO 46596
46113: LD_INT 16
46115: DOUBLE
46116: EQUAL
46117: IFTRUE 46175
46119: LD_INT 17
46121: DOUBLE
46122: EQUAL
46123: IFTRUE 46175
46125: LD_INT 18
46127: DOUBLE
46128: EQUAL
46129: IFTRUE 46175
46131: LD_INT 19
46133: DOUBLE
46134: EQUAL
46135: IFTRUE 46175
46137: LD_INT 22
46139: DOUBLE
46140: EQUAL
46141: IFTRUE 46175
46143: LD_INT 20
46145: DOUBLE
46146: EQUAL
46147: IFTRUE 46175
46149: LD_INT 21
46151: DOUBLE
46152: EQUAL
46153: IFTRUE 46175
46155: LD_INT 23
46157: DOUBLE
46158: EQUAL
46159: IFTRUE 46175
46161: LD_INT 24
46163: DOUBLE
46164: EQUAL
46165: IFTRUE 46175
46167: LD_INT 25
46169: DOUBLE
46170: EQUAL
46171: IFTRUE 46175
46173: GO 46231
46175: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
46176: LD_ADDR_VAR 0 9
46180: PUSH
46181: LD_VAR 0 35
46185: PUSH
46186: LD_VAR 0 36
46190: PUSH
46191: LD_VAR 0 37
46195: PUSH
46196: LD_VAR 0 38
46200: PUSH
46201: LD_VAR 0 39
46205: PUSH
46206: LD_VAR 0 40
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: PUSH
46219: LD_VAR 0 4
46223: PUSH
46224: LD_INT 1
46226: PLUS
46227: ARRAY
46228: ST_TO_ADDR
46229: GO 46596
46231: LD_INT 6
46233: DOUBLE
46234: EQUAL
46235: IFTRUE 46287
46237: LD_INT 7
46239: DOUBLE
46240: EQUAL
46241: IFTRUE 46287
46243: LD_INT 8
46245: DOUBLE
46246: EQUAL
46247: IFTRUE 46287
46249: LD_INT 13
46251: DOUBLE
46252: EQUAL
46253: IFTRUE 46287
46255: LD_INT 12
46257: DOUBLE
46258: EQUAL
46259: IFTRUE 46287
46261: LD_INT 15
46263: DOUBLE
46264: EQUAL
46265: IFTRUE 46287
46267: LD_INT 11
46269: DOUBLE
46270: EQUAL
46271: IFTRUE 46287
46273: LD_INT 14
46275: DOUBLE
46276: EQUAL
46277: IFTRUE 46287
46279: LD_INT 10
46281: DOUBLE
46282: EQUAL
46283: IFTRUE 46287
46285: GO 46343
46287: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
46288: LD_ADDR_VAR 0 9
46292: PUSH
46293: LD_VAR 0 41
46297: PUSH
46298: LD_VAR 0 42
46302: PUSH
46303: LD_VAR 0 43
46307: PUSH
46308: LD_VAR 0 44
46312: PUSH
46313: LD_VAR 0 45
46317: PUSH
46318: LD_VAR 0 46
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: PUSH
46331: LD_VAR 0 4
46335: PUSH
46336: LD_INT 1
46338: PLUS
46339: ARRAY
46340: ST_TO_ADDR
46341: GO 46596
46343: LD_INT 36
46345: DOUBLE
46346: EQUAL
46347: IFTRUE 46351
46349: GO 46407
46351: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
46352: LD_ADDR_VAR 0 9
46356: PUSH
46357: LD_VAR 0 47
46361: PUSH
46362: LD_VAR 0 48
46366: PUSH
46367: LD_VAR 0 49
46371: PUSH
46372: LD_VAR 0 50
46376: PUSH
46377: LD_VAR 0 51
46381: PUSH
46382: LD_VAR 0 52
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: PUSH
46395: LD_VAR 0 4
46399: PUSH
46400: LD_INT 1
46402: PLUS
46403: ARRAY
46404: ST_TO_ADDR
46405: GO 46596
46407: LD_INT 4
46409: DOUBLE
46410: EQUAL
46411: IFTRUE 46433
46413: LD_INT 5
46415: DOUBLE
46416: EQUAL
46417: IFTRUE 46433
46419: LD_INT 34
46421: DOUBLE
46422: EQUAL
46423: IFTRUE 46433
46425: LD_INT 37
46427: DOUBLE
46428: EQUAL
46429: IFTRUE 46433
46431: GO 46489
46433: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
46434: LD_ADDR_VAR 0 9
46438: PUSH
46439: LD_VAR 0 53
46443: PUSH
46444: LD_VAR 0 54
46448: PUSH
46449: LD_VAR 0 55
46453: PUSH
46454: LD_VAR 0 56
46458: PUSH
46459: LD_VAR 0 57
46463: PUSH
46464: LD_VAR 0 58
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: PUSH
46477: LD_VAR 0 4
46481: PUSH
46482: LD_INT 1
46484: PLUS
46485: ARRAY
46486: ST_TO_ADDR
46487: GO 46596
46489: LD_INT 31
46491: DOUBLE
46492: EQUAL
46493: IFTRUE 46539
46495: LD_INT 32
46497: DOUBLE
46498: EQUAL
46499: IFTRUE 46539
46501: LD_INT 33
46503: DOUBLE
46504: EQUAL
46505: IFTRUE 46539
46507: LD_INT 27
46509: DOUBLE
46510: EQUAL
46511: IFTRUE 46539
46513: LD_INT 26
46515: DOUBLE
46516: EQUAL
46517: IFTRUE 46539
46519: LD_INT 28
46521: DOUBLE
46522: EQUAL
46523: IFTRUE 46539
46525: LD_INT 29
46527: DOUBLE
46528: EQUAL
46529: IFTRUE 46539
46531: LD_INT 30
46533: DOUBLE
46534: EQUAL
46535: IFTRUE 46539
46537: GO 46595
46539: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
46540: LD_ADDR_VAR 0 9
46544: PUSH
46545: LD_VAR 0 59
46549: PUSH
46550: LD_VAR 0 60
46554: PUSH
46555: LD_VAR 0 61
46559: PUSH
46560: LD_VAR 0 62
46564: PUSH
46565: LD_VAR 0 63
46569: PUSH
46570: LD_VAR 0 64
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: PUSH
46583: LD_VAR 0 4
46587: PUSH
46588: LD_INT 1
46590: PLUS
46591: ARRAY
46592: ST_TO_ADDR
46593: GO 46596
46595: POP
// temp_list2 = [ ] ;
46596: LD_ADDR_VAR 0 10
46600: PUSH
46601: EMPTY
46602: ST_TO_ADDR
// for i in temp_list do
46603: LD_ADDR_VAR 0 8
46607: PUSH
46608: LD_VAR 0 9
46612: PUSH
46613: FOR_IN
46614: IFFALSE 46666
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
46616: LD_ADDR_VAR 0 10
46620: PUSH
46621: LD_VAR 0 10
46625: PUSH
46626: LD_VAR 0 8
46630: PUSH
46631: LD_INT 1
46633: ARRAY
46634: PUSH
46635: LD_VAR 0 2
46639: PLUS
46640: PUSH
46641: LD_VAR 0 8
46645: PUSH
46646: LD_INT 2
46648: ARRAY
46649: PUSH
46650: LD_VAR 0 3
46654: PLUS
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: EMPTY
46661: LIST
46662: ADD
46663: ST_TO_ADDR
46664: GO 46613
46666: POP
46667: POP
// result = temp_list2 ;
46668: LD_ADDR_VAR 0 7
46672: PUSH
46673: LD_VAR 0 10
46677: ST_TO_ADDR
// end ;
46678: LD_VAR 0 7
46682: RET
// export function EnemyInRange ( unit , dist ) ; begin
46683: LD_INT 0
46685: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
46686: LD_ADDR_VAR 0 3
46690: PUSH
46691: LD_VAR 0 1
46695: PPUSH
46696: CALL_OW 255
46700: PPUSH
46701: LD_VAR 0 1
46705: PPUSH
46706: CALL_OW 250
46710: PPUSH
46711: LD_VAR 0 1
46715: PPUSH
46716: CALL_OW 251
46720: PPUSH
46721: LD_VAR 0 2
46725: PPUSH
46726: CALL 19940 0 4
46730: PUSH
46731: LD_INT 4
46733: ARRAY
46734: ST_TO_ADDR
// end ;
46735: LD_VAR 0 3
46739: RET
// export function PlayerSeeMe ( unit ) ; begin
46740: LD_INT 0
46742: PPUSH
// result := See ( your_side , unit ) ;
46743: LD_ADDR_VAR 0 2
46747: PUSH
46748: LD_OWVAR 2
46752: PPUSH
46753: LD_VAR 0 1
46757: PPUSH
46758: CALL_OW 292
46762: ST_TO_ADDR
// end ;
46763: LD_VAR 0 2
46767: RET
// export function ReverseDir ( unit ) ; begin
46768: LD_INT 0
46770: PPUSH
// if not unit then
46771: LD_VAR 0 1
46775: NOT
46776: IFFALSE 46780
// exit ;
46778: GO 46803
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
46780: LD_ADDR_VAR 0 2
46784: PUSH
46785: LD_VAR 0 1
46789: PPUSH
46790: CALL_OW 254
46794: PUSH
46795: LD_INT 3
46797: PLUS
46798: PUSH
46799: LD_INT 6
46801: MOD
46802: ST_TO_ADDR
// end ;
46803: LD_VAR 0 2
46807: RET
// export function ReverseArray ( array ) ; var i ; begin
46808: LD_INT 0
46810: PPUSH
46811: PPUSH
// if not array then
46812: LD_VAR 0 1
46816: NOT
46817: IFFALSE 46821
// exit ;
46819: GO 46876
// result := [ ] ;
46821: LD_ADDR_VAR 0 2
46825: PUSH
46826: EMPTY
46827: ST_TO_ADDR
// for i := array downto 1 do
46828: LD_ADDR_VAR 0 3
46832: PUSH
46833: DOUBLE
46834: LD_VAR 0 1
46838: INC
46839: ST_TO_ADDR
46840: LD_INT 1
46842: PUSH
46843: FOR_DOWNTO
46844: IFFALSE 46874
// result := Join ( result , array [ i ] ) ;
46846: LD_ADDR_VAR 0 2
46850: PUSH
46851: LD_VAR 0 2
46855: PPUSH
46856: LD_VAR 0 1
46860: PUSH
46861: LD_VAR 0 3
46865: ARRAY
46866: PPUSH
46867: CALL 51728 0 2
46871: ST_TO_ADDR
46872: GO 46843
46874: POP
46875: POP
// end ;
46876: LD_VAR 0 2
46880: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
46881: LD_INT 0
46883: PPUSH
46884: PPUSH
46885: PPUSH
46886: PPUSH
46887: PPUSH
46888: PPUSH
// if not unit or not hexes then
46889: LD_VAR 0 1
46893: NOT
46894: IFTRUE 46903
46896: PUSH
46897: LD_VAR 0 2
46901: NOT
46902: OR
46903: IFFALSE 46907
// exit ;
46905: GO 47030
// dist := 9999 ;
46907: LD_ADDR_VAR 0 5
46911: PUSH
46912: LD_INT 9999
46914: ST_TO_ADDR
// for i = 1 to hexes do
46915: LD_ADDR_VAR 0 4
46919: PUSH
46920: DOUBLE
46921: LD_INT 1
46923: DEC
46924: ST_TO_ADDR
46925: LD_VAR 0 2
46929: PUSH
46930: FOR_TO
46931: IFFALSE 47018
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46933: LD_ADDR_VAR 0 6
46937: PUSH
46938: LD_VAR 0 1
46942: PPUSH
46943: LD_VAR 0 2
46947: PUSH
46948: LD_VAR 0 4
46952: ARRAY
46953: PUSH
46954: LD_INT 1
46956: ARRAY
46957: PPUSH
46958: LD_VAR 0 2
46962: PUSH
46963: LD_VAR 0 4
46967: ARRAY
46968: PUSH
46969: LD_INT 2
46971: ARRAY
46972: PPUSH
46973: CALL_OW 297
46977: ST_TO_ADDR
// if tdist < dist then
46978: LD_VAR 0 6
46982: PUSH
46983: LD_VAR 0 5
46987: LESS
46988: IFFALSE 47016
// begin hex := hexes [ i ] ;
46990: LD_ADDR_VAR 0 8
46994: PUSH
46995: LD_VAR 0 2
46999: PUSH
47000: LD_VAR 0 4
47004: ARRAY
47005: ST_TO_ADDR
// dist := tdist ;
47006: LD_ADDR_VAR 0 5
47010: PUSH
47011: LD_VAR 0 6
47015: ST_TO_ADDR
// end ; end ;
47016: GO 46930
47018: POP
47019: POP
// result := hex ;
47020: LD_ADDR_VAR 0 3
47024: PUSH
47025: LD_VAR 0 8
47029: ST_TO_ADDR
// end ;
47030: LD_VAR 0 3
47034: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
47035: LD_INT 0
47037: PPUSH
47038: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
47039: LD_VAR 0 1
47043: NOT
47044: IFTRUE 47083
47046: PUSH
47047: LD_VAR 0 1
47051: PUSH
47052: LD_INT 21
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 23
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PPUSH
47076: CALL_OW 69
47080: IN
47081: NOT
47082: OR
47083: IFFALSE 47087
// exit ;
47085: GO 47134
// for i = 1 to 3 do
47087: LD_ADDR_VAR 0 3
47091: PUSH
47092: DOUBLE
47093: LD_INT 1
47095: DEC
47096: ST_TO_ADDR
47097: LD_INT 3
47099: PUSH
47100: FOR_TO
47101: IFFALSE 47132
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
47103: LD_VAR 0 1
47107: PPUSH
47108: CALL_OW 250
47112: PPUSH
47113: LD_VAR 0 1
47117: PPUSH
47118: CALL_OW 251
47122: PPUSH
47123: LD_INT 1
47125: PPUSH
47126: CALL_OW 453
47130: GO 47100
47132: POP
47133: POP
// end ;
47134: LD_VAR 0 2
47138: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
47139: LD_INT 0
47141: PPUSH
47142: PPUSH
47143: PPUSH
47144: PPUSH
47145: PPUSH
47146: PPUSH
// if not unit or not enemy_unit then
47147: LD_VAR 0 1
47151: NOT
47152: IFTRUE 47161
47154: PUSH
47155: LD_VAR 0 2
47159: NOT
47160: OR
47161: IFFALSE 47165
// exit ;
47163: GO 47646
// if GetLives ( i ) < 250 then
47165: LD_VAR 0 4
47169: PPUSH
47170: CALL_OW 256
47174: PUSH
47175: LD_INT 250
47177: LESS
47178: IFFALSE 47191
// begin ComAutodestruct ( i ) ;
47180: LD_VAR 0 4
47184: PPUSH
47185: CALL 47035 0 1
// exit ;
47189: GO 47646
// end ; x := GetX ( enemy_unit ) ;
47191: LD_ADDR_VAR 0 7
47195: PUSH
47196: LD_VAR 0 2
47200: PPUSH
47201: CALL_OW 250
47205: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
47206: LD_ADDR_VAR 0 8
47210: PUSH
47211: LD_VAR 0 2
47215: PPUSH
47216: CALL_OW 251
47220: ST_TO_ADDR
// if not x or not y then
47221: LD_VAR 0 7
47225: NOT
47226: IFTRUE 47235
47228: PUSH
47229: LD_VAR 0 8
47233: NOT
47234: OR
47235: IFFALSE 47239
// exit ;
47237: GO 47646
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
47239: LD_ADDR_VAR 0 6
47243: PUSH
47244: LD_VAR 0 7
47248: PPUSH
47249: LD_INT 0
47251: PPUSH
47252: LD_INT 4
47254: PPUSH
47255: CALL_OW 272
47259: PUSH
47260: LD_VAR 0 8
47264: PPUSH
47265: LD_INT 0
47267: PPUSH
47268: LD_INT 4
47270: PPUSH
47271: CALL_OW 273
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_VAR 0 7
47284: PPUSH
47285: LD_INT 1
47287: PPUSH
47288: LD_INT 4
47290: PPUSH
47291: CALL_OW 272
47295: PUSH
47296: LD_VAR 0 8
47300: PPUSH
47301: LD_INT 1
47303: PPUSH
47304: LD_INT 4
47306: PPUSH
47307: CALL_OW 273
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_VAR 0 7
47320: PPUSH
47321: LD_INT 2
47323: PPUSH
47324: LD_INT 4
47326: PPUSH
47327: CALL_OW 272
47331: PUSH
47332: LD_VAR 0 8
47336: PPUSH
47337: LD_INT 2
47339: PPUSH
47340: LD_INT 4
47342: PPUSH
47343: CALL_OW 273
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_VAR 0 7
47356: PPUSH
47357: LD_INT 3
47359: PPUSH
47360: LD_INT 4
47362: PPUSH
47363: CALL_OW 272
47367: PUSH
47368: LD_VAR 0 8
47372: PPUSH
47373: LD_INT 3
47375: PPUSH
47376: LD_INT 4
47378: PPUSH
47379: CALL_OW 273
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_VAR 0 7
47392: PPUSH
47393: LD_INT 4
47395: PPUSH
47396: LD_INT 4
47398: PPUSH
47399: CALL_OW 272
47403: PUSH
47404: LD_VAR 0 8
47408: PPUSH
47409: LD_INT 4
47411: PPUSH
47412: LD_INT 4
47414: PPUSH
47415: CALL_OW 273
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_VAR 0 7
47428: PPUSH
47429: LD_INT 5
47431: PPUSH
47432: LD_INT 4
47434: PPUSH
47435: CALL_OW 272
47439: PUSH
47440: LD_VAR 0 8
47444: PPUSH
47445: LD_INT 5
47447: PPUSH
47448: LD_INT 4
47450: PPUSH
47451: CALL_OW 273
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: ST_TO_ADDR
// for i = tmp downto 1 do
47468: LD_ADDR_VAR 0 4
47472: PUSH
47473: DOUBLE
47474: LD_VAR 0 6
47478: INC
47479: ST_TO_ADDR
47480: LD_INT 1
47482: PUSH
47483: FOR_DOWNTO
47484: IFFALSE 47587
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
47486: LD_VAR 0 6
47490: PUSH
47491: LD_VAR 0 4
47495: ARRAY
47496: PUSH
47497: LD_INT 1
47499: ARRAY
47500: PPUSH
47501: LD_VAR 0 6
47505: PUSH
47506: LD_VAR 0 4
47510: ARRAY
47511: PUSH
47512: LD_INT 2
47514: ARRAY
47515: PPUSH
47516: CALL_OW 488
47520: NOT
47521: IFTRUE 47563
47523: PUSH
47524: LD_VAR 0 6
47528: PUSH
47529: LD_VAR 0 4
47533: ARRAY
47534: PUSH
47535: LD_INT 1
47537: ARRAY
47538: PPUSH
47539: LD_VAR 0 6
47543: PUSH
47544: LD_VAR 0 4
47548: ARRAY
47549: PUSH
47550: LD_INT 2
47552: ARRAY
47553: PPUSH
47554: CALL_OW 428
47558: PUSH
47559: LD_INT 0
47561: NONEQUAL
47562: OR
47563: IFFALSE 47585
// tmp := Delete ( tmp , i ) ;
47565: LD_ADDR_VAR 0 6
47569: PUSH
47570: LD_VAR 0 6
47574: PPUSH
47575: LD_VAR 0 4
47579: PPUSH
47580: CALL_OW 3
47584: ST_TO_ADDR
47585: GO 47483
47587: POP
47588: POP
// j := GetClosestHex ( unit , tmp ) ;
47589: LD_ADDR_VAR 0 5
47593: PUSH
47594: LD_VAR 0 1
47598: PPUSH
47599: LD_VAR 0 6
47603: PPUSH
47604: CALL 46881 0 2
47608: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
47609: LD_VAR 0 1
47613: PPUSH
47614: LD_VAR 0 5
47618: PUSH
47619: LD_INT 1
47621: ARRAY
47622: PPUSH
47623: LD_VAR 0 5
47627: PUSH
47628: LD_INT 2
47630: ARRAY
47631: PPUSH
47632: CALL_OW 111
// result := j ;
47636: LD_ADDR_VAR 0 3
47640: PUSH
47641: LD_VAR 0 5
47645: ST_TO_ADDR
// end ;
47646: LD_VAR 0 3
47650: RET
// export function PrepareApemanSoldier ( ) ; begin
47651: LD_INT 0
47653: PPUSH
// uc_nation := 0 ;
47654: LD_ADDR_OWVAR 21
47658: PUSH
47659: LD_INT 0
47661: ST_TO_ADDR
// hc_sex := sex_male ;
47662: LD_ADDR_OWVAR 27
47666: PUSH
47667: LD_INT 1
47669: ST_TO_ADDR
// hc_name :=  ;
47670: LD_ADDR_OWVAR 26
47674: PUSH
47675: LD_STRING 
47677: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
47678: LD_ADDR_OWVAR 28
47682: PUSH
47683: LD_INT 15
47685: ST_TO_ADDR
// hc_gallery :=  ;
47686: LD_ADDR_OWVAR 33
47690: PUSH
47691: LD_STRING 
47693: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47694: LD_ADDR_OWVAR 31
47698: PUSH
47699: LD_INT 0
47701: PPUSH
47702: LD_INT 3
47704: PPUSH
47705: CALL_OW 12
47709: PUSH
47710: LD_INT 0
47712: PPUSH
47713: LD_INT 3
47715: PPUSH
47716: CALL_OW 12
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
47733: LD_ADDR_OWVAR 29
47737: PUSH
47738: LD_INT 10
47740: PUSH
47741: LD_INT 12
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: ST_TO_ADDR
// end ;
47748: LD_VAR 0 1
47752: RET
// export function PrepareApemanEngineer ( ) ; begin
47753: LD_INT 0
47755: PPUSH
// uc_nation := 0 ;
47756: LD_ADDR_OWVAR 21
47760: PUSH
47761: LD_INT 0
47763: ST_TO_ADDR
// hc_sex := sex_male ;
47764: LD_ADDR_OWVAR 27
47768: PUSH
47769: LD_INT 1
47771: ST_TO_ADDR
// hc_name :=  ;
47772: LD_ADDR_OWVAR 26
47776: PUSH
47777: LD_STRING 
47779: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
47780: LD_ADDR_OWVAR 28
47784: PUSH
47785: LD_INT 16
47787: ST_TO_ADDR
// hc_gallery :=  ;
47788: LD_ADDR_OWVAR 33
47792: PUSH
47793: LD_STRING 
47795: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47796: LD_ADDR_OWVAR 31
47800: PUSH
47801: LD_INT 0
47803: PPUSH
47804: LD_INT 3
47806: PPUSH
47807: CALL_OW 12
47811: PUSH
47812: LD_INT 0
47814: PPUSH
47815: LD_INT 3
47817: PPUSH
47818: CALL_OW 12
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
47835: LD_ADDR_OWVAR 29
47839: PUSH
47840: LD_INT 10
47842: PUSH
47843: LD_INT 12
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: ST_TO_ADDR
// end ;
47850: LD_VAR 0 1
47854: RET
// export function PrepareApeman ( agressivity ) ; begin
47855: LD_INT 0
47857: PPUSH
// uc_side := 0 ;
47858: LD_ADDR_OWVAR 20
47862: PUSH
47863: LD_INT 0
47865: ST_TO_ADDR
// uc_nation := 0 ;
47866: LD_ADDR_OWVAR 21
47870: PUSH
47871: LD_INT 0
47873: ST_TO_ADDR
// hc_sex := sex_male ;
47874: LD_ADDR_OWVAR 27
47878: PUSH
47879: LD_INT 1
47881: ST_TO_ADDR
// hc_class := class_apeman ;
47882: LD_ADDR_OWVAR 28
47886: PUSH
47887: LD_INT 12
47889: ST_TO_ADDR
// hc_gallery :=  ;
47890: LD_ADDR_OWVAR 33
47894: PUSH
47895: LD_STRING 
47897: ST_TO_ADDR
// hc_name :=  ;
47898: LD_ADDR_OWVAR 26
47902: PUSH
47903: LD_STRING 
47905: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
47906: LD_ADDR_OWVAR 29
47910: PUSH
47911: LD_INT 10
47913: PUSH
47914: LD_INT 12
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: ST_TO_ADDR
// if agressivity = 0 then
47921: LD_VAR 0 1
47925: PUSH
47926: LD_INT 0
47928: EQUAL
47929: IFFALSE 47941
// hc_agressivity := 0 else
47931: LD_ADDR_OWVAR 35
47935: PUSH
47936: LD_INT 0
47938: ST_TO_ADDR
47939: GO 47962
// hc_agressivity := rand ( - agressivity , agressivity ) ;
47941: LD_ADDR_OWVAR 35
47945: PUSH
47946: LD_VAR 0 1
47950: NEG
47951: PPUSH
47952: LD_VAR 0 1
47956: PPUSH
47957: CALL_OW 12
47961: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47962: LD_ADDR_OWVAR 31
47966: PUSH
47967: LD_INT 0
47969: PPUSH
47970: LD_INT 3
47972: PPUSH
47973: CALL_OW 12
47977: PUSH
47978: LD_INT 0
47980: PPUSH
47981: LD_INT 3
47983: PPUSH
47984: CALL_OW 12
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: ST_TO_ADDR
// end ;
48001: LD_VAR 0 2
48005: RET
// export function PrepareTiger ( agressivity ) ; begin
48006: LD_INT 0
48008: PPUSH
// uc_side := 0 ;
48009: LD_ADDR_OWVAR 20
48013: PUSH
48014: LD_INT 0
48016: ST_TO_ADDR
// uc_nation := 0 ;
48017: LD_ADDR_OWVAR 21
48021: PUSH
48022: LD_INT 0
48024: ST_TO_ADDR
// InitHc ;
48025: CALL_OW 19
// hc_class := class_tiger ;
48029: LD_ADDR_OWVAR 28
48033: PUSH
48034: LD_INT 14
48036: ST_TO_ADDR
// hc_gallery :=  ;
48037: LD_ADDR_OWVAR 33
48041: PUSH
48042: LD_STRING 
48044: ST_TO_ADDR
// hc_name :=  ;
48045: LD_ADDR_OWVAR 26
48049: PUSH
48050: LD_STRING 
48052: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
48053: LD_ADDR_OWVAR 35
48057: PUSH
48058: LD_VAR 0 1
48062: NEG
48063: PPUSH
48064: LD_VAR 0 1
48068: PPUSH
48069: CALL_OW 12
48073: ST_TO_ADDR
// end ;
48074: LD_VAR 0 2
48078: RET
// export function PrepareEnchidna ( ) ; begin
48079: LD_INT 0
48081: PPUSH
// uc_side := 0 ;
48082: LD_ADDR_OWVAR 20
48086: PUSH
48087: LD_INT 0
48089: ST_TO_ADDR
// uc_nation := 0 ;
48090: LD_ADDR_OWVAR 21
48094: PUSH
48095: LD_INT 0
48097: ST_TO_ADDR
// InitHc ;
48098: CALL_OW 19
// hc_class := class_baggie ;
48102: LD_ADDR_OWVAR 28
48106: PUSH
48107: LD_INT 13
48109: ST_TO_ADDR
// hc_gallery :=  ;
48110: LD_ADDR_OWVAR 33
48114: PUSH
48115: LD_STRING 
48117: ST_TO_ADDR
// hc_name :=  ;
48118: LD_ADDR_OWVAR 26
48122: PUSH
48123: LD_STRING 
48125: ST_TO_ADDR
// end ;
48126: LD_VAR 0 1
48130: RET
// export function PrepareFrog ( ) ; begin
48131: LD_INT 0
48133: PPUSH
// uc_side := 0 ;
48134: LD_ADDR_OWVAR 20
48138: PUSH
48139: LD_INT 0
48141: ST_TO_ADDR
// uc_nation := 0 ;
48142: LD_ADDR_OWVAR 21
48146: PUSH
48147: LD_INT 0
48149: ST_TO_ADDR
// InitHc ;
48150: CALL_OW 19
// hc_class := class_frog ;
48154: LD_ADDR_OWVAR 28
48158: PUSH
48159: LD_INT 19
48161: ST_TO_ADDR
// hc_gallery :=  ;
48162: LD_ADDR_OWVAR 33
48166: PUSH
48167: LD_STRING 
48169: ST_TO_ADDR
// hc_name :=  ;
48170: LD_ADDR_OWVAR 26
48174: PUSH
48175: LD_STRING 
48177: ST_TO_ADDR
// end ;
48178: LD_VAR 0 1
48182: RET
// export function PrepareFish ( ) ; begin
48183: LD_INT 0
48185: PPUSH
// uc_side := 0 ;
48186: LD_ADDR_OWVAR 20
48190: PUSH
48191: LD_INT 0
48193: ST_TO_ADDR
// uc_nation := 0 ;
48194: LD_ADDR_OWVAR 21
48198: PUSH
48199: LD_INT 0
48201: ST_TO_ADDR
// InitHc ;
48202: CALL_OW 19
// hc_class := class_fish ;
48206: LD_ADDR_OWVAR 28
48210: PUSH
48211: LD_INT 20
48213: ST_TO_ADDR
// hc_gallery :=  ;
48214: LD_ADDR_OWVAR 33
48218: PUSH
48219: LD_STRING 
48221: ST_TO_ADDR
// hc_name :=  ;
48222: LD_ADDR_OWVAR 26
48226: PUSH
48227: LD_STRING 
48229: ST_TO_ADDR
// end ;
48230: LD_VAR 0 1
48234: RET
// export function PrepareBird ( ) ; begin
48235: LD_INT 0
48237: PPUSH
// uc_side := 0 ;
48238: LD_ADDR_OWVAR 20
48242: PUSH
48243: LD_INT 0
48245: ST_TO_ADDR
// uc_nation := 0 ;
48246: LD_ADDR_OWVAR 21
48250: PUSH
48251: LD_INT 0
48253: ST_TO_ADDR
// InitHc ;
48254: CALL_OW 19
// hc_class := class_phororhacos ;
48258: LD_ADDR_OWVAR 28
48262: PUSH
48263: LD_INT 18
48265: ST_TO_ADDR
// hc_gallery :=  ;
48266: LD_ADDR_OWVAR 33
48270: PUSH
48271: LD_STRING 
48273: ST_TO_ADDR
// hc_name :=  ;
48274: LD_ADDR_OWVAR 26
48278: PUSH
48279: LD_STRING 
48281: ST_TO_ADDR
// end ;
48282: LD_VAR 0 1
48286: RET
// export function PrepareHorse ( ) ; begin
48287: LD_INT 0
48289: PPUSH
// uc_side := 0 ;
48290: LD_ADDR_OWVAR 20
48294: PUSH
48295: LD_INT 0
48297: ST_TO_ADDR
// uc_nation := 0 ;
48298: LD_ADDR_OWVAR 21
48302: PUSH
48303: LD_INT 0
48305: ST_TO_ADDR
// InitHc ;
48306: CALL_OW 19
// hc_class := class_horse ;
48310: LD_ADDR_OWVAR 28
48314: PUSH
48315: LD_INT 21
48317: ST_TO_ADDR
// hc_gallery :=  ;
48318: LD_ADDR_OWVAR 33
48322: PUSH
48323: LD_STRING 
48325: ST_TO_ADDR
// hc_name :=  ;
48326: LD_ADDR_OWVAR 26
48330: PUSH
48331: LD_STRING 
48333: ST_TO_ADDR
// end ;
48334: LD_VAR 0 1
48338: RET
// export function PrepareMastodont ( ) ; begin
48339: LD_INT 0
48341: PPUSH
// uc_side := 0 ;
48342: LD_ADDR_OWVAR 20
48346: PUSH
48347: LD_INT 0
48349: ST_TO_ADDR
// uc_nation := 0 ;
48350: LD_ADDR_OWVAR 21
48354: PUSH
48355: LD_INT 0
48357: ST_TO_ADDR
// vc_chassis := class_mastodont ;
48358: LD_ADDR_OWVAR 37
48362: PUSH
48363: LD_INT 31
48365: ST_TO_ADDR
// vc_control := control_rider ;
48366: LD_ADDR_OWVAR 38
48370: PUSH
48371: LD_INT 4
48373: ST_TO_ADDR
// end ;
48374: LD_VAR 0 1
48378: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
48379: LD_INT 0
48381: PPUSH
48382: PPUSH
48383: PPUSH
// uc_side = 0 ;
48384: LD_ADDR_OWVAR 20
48388: PUSH
48389: LD_INT 0
48391: ST_TO_ADDR
// uc_nation = 0 ;
48392: LD_ADDR_OWVAR 21
48396: PUSH
48397: LD_INT 0
48399: ST_TO_ADDR
// InitHc_All ( ) ;
48400: CALL_OW 584
// InitVc ;
48404: CALL_OW 20
// if mastodonts then
48408: LD_VAR 0 6
48412: IFFALSE 48479
// for i = 1 to mastodonts do
48414: LD_ADDR_VAR 0 11
48418: PUSH
48419: DOUBLE
48420: LD_INT 1
48422: DEC
48423: ST_TO_ADDR
48424: LD_VAR 0 6
48428: PUSH
48429: FOR_TO
48430: IFFALSE 48477
// begin vc_chassis := 31 ;
48432: LD_ADDR_OWVAR 37
48436: PUSH
48437: LD_INT 31
48439: ST_TO_ADDR
// vc_control := control_rider ;
48440: LD_ADDR_OWVAR 38
48444: PUSH
48445: LD_INT 4
48447: ST_TO_ADDR
// animal := CreateVehicle ;
48448: LD_ADDR_VAR 0 12
48452: PUSH
48453: CALL_OW 45
48457: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48458: LD_VAR 0 12
48462: PPUSH
48463: LD_VAR 0 8
48467: PPUSH
48468: LD_INT 0
48470: PPUSH
48471: CALL 50621 0 3
// end ;
48475: GO 48429
48477: POP
48478: POP
// if horses then
48479: LD_VAR 0 5
48483: IFFALSE 48550
// for i = 1 to horses do
48485: LD_ADDR_VAR 0 11
48489: PUSH
48490: DOUBLE
48491: LD_INT 1
48493: DEC
48494: ST_TO_ADDR
48495: LD_VAR 0 5
48499: PUSH
48500: FOR_TO
48501: IFFALSE 48548
// begin hc_class := 21 ;
48503: LD_ADDR_OWVAR 28
48507: PUSH
48508: LD_INT 21
48510: ST_TO_ADDR
// hc_gallery :=  ;
48511: LD_ADDR_OWVAR 33
48515: PUSH
48516: LD_STRING 
48518: ST_TO_ADDR
// animal := CreateHuman ;
48519: LD_ADDR_VAR 0 12
48523: PUSH
48524: CALL_OW 44
48528: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48529: LD_VAR 0 12
48533: PPUSH
48534: LD_VAR 0 8
48538: PPUSH
48539: LD_INT 0
48541: PPUSH
48542: CALL 50621 0 3
// end ;
48546: GO 48500
48548: POP
48549: POP
// if birds then
48550: LD_VAR 0 1
48554: IFFALSE 48621
// for i = 1 to birds do
48556: LD_ADDR_VAR 0 11
48560: PUSH
48561: DOUBLE
48562: LD_INT 1
48564: DEC
48565: ST_TO_ADDR
48566: LD_VAR 0 1
48570: PUSH
48571: FOR_TO
48572: IFFALSE 48619
// begin hc_class := 18 ;
48574: LD_ADDR_OWVAR 28
48578: PUSH
48579: LD_INT 18
48581: ST_TO_ADDR
// hc_gallery =  ;
48582: LD_ADDR_OWVAR 33
48586: PUSH
48587: LD_STRING 
48589: ST_TO_ADDR
// animal := CreateHuman ;
48590: LD_ADDR_VAR 0 12
48594: PUSH
48595: CALL_OW 44
48599: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48600: LD_VAR 0 12
48604: PPUSH
48605: LD_VAR 0 8
48609: PPUSH
48610: LD_INT 0
48612: PPUSH
48613: CALL 50621 0 3
// end ;
48617: GO 48571
48619: POP
48620: POP
// if tigers then
48621: LD_VAR 0 2
48625: IFFALSE 48709
// for i = 1 to tigers do
48627: LD_ADDR_VAR 0 11
48631: PUSH
48632: DOUBLE
48633: LD_INT 1
48635: DEC
48636: ST_TO_ADDR
48637: LD_VAR 0 2
48641: PUSH
48642: FOR_TO
48643: IFFALSE 48707
// begin hc_class = class_tiger ;
48645: LD_ADDR_OWVAR 28
48649: PUSH
48650: LD_INT 14
48652: ST_TO_ADDR
// hc_gallery =  ;
48653: LD_ADDR_OWVAR 33
48657: PUSH
48658: LD_STRING 
48660: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
48661: LD_ADDR_OWVAR 35
48665: PUSH
48666: LD_INT 7
48668: NEG
48669: PPUSH
48670: LD_INT 7
48672: PPUSH
48673: CALL_OW 12
48677: ST_TO_ADDR
// animal := CreateHuman ;
48678: LD_ADDR_VAR 0 12
48682: PUSH
48683: CALL_OW 44
48687: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48688: LD_VAR 0 12
48692: PPUSH
48693: LD_VAR 0 8
48697: PPUSH
48698: LD_INT 0
48700: PPUSH
48701: CALL 50621 0 3
// end ;
48705: GO 48642
48707: POP
48708: POP
// if apemans then
48709: LD_VAR 0 3
48713: IFFALSE 48836
// for i = 1 to apemans do
48715: LD_ADDR_VAR 0 11
48719: PUSH
48720: DOUBLE
48721: LD_INT 1
48723: DEC
48724: ST_TO_ADDR
48725: LD_VAR 0 3
48729: PUSH
48730: FOR_TO
48731: IFFALSE 48834
// begin hc_class = class_apeman ;
48733: LD_ADDR_OWVAR 28
48737: PUSH
48738: LD_INT 12
48740: ST_TO_ADDR
// hc_gallery =  ;
48741: LD_ADDR_OWVAR 33
48745: PUSH
48746: LD_STRING 
48748: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
48749: LD_ADDR_OWVAR 35
48753: PUSH
48754: LD_INT 2
48756: NEG
48757: PPUSH
48758: LD_INT 2
48760: PPUSH
48761: CALL_OW 12
48765: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
48766: LD_ADDR_OWVAR 31
48770: PUSH
48771: LD_INT 1
48773: PPUSH
48774: LD_INT 3
48776: PPUSH
48777: CALL_OW 12
48781: PUSH
48782: LD_INT 1
48784: PPUSH
48785: LD_INT 3
48787: PPUSH
48788: CALL_OW 12
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: ST_TO_ADDR
// animal := CreateHuman ;
48805: LD_ADDR_VAR 0 12
48809: PUSH
48810: CALL_OW 44
48814: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48815: LD_VAR 0 12
48819: PPUSH
48820: LD_VAR 0 8
48824: PPUSH
48825: LD_INT 0
48827: PPUSH
48828: CALL 50621 0 3
// end ;
48832: GO 48730
48834: POP
48835: POP
// if enchidnas then
48836: LD_VAR 0 4
48840: IFFALSE 48907
// for i = 1 to enchidnas do
48842: LD_ADDR_VAR 0 11
48846: PUSH
48847: DOUBLE
48848: LD_INT 1
48850: DEC
48851: ST_TO_ADDR
48852: LD_VAR 0 4
48856: PUSH
48857: FOR_TO
48858: IFFALSE 48905
// begin hc_class = 13 ;
48860: LD_ADDR_OWVAR 28
48864: PUSH
48865: LD_INT 13
48867: ST_TO_ADDR
// hc_gallery =  ;
48868: LD_ADDR_OWVAR 33
48872: PUSH
48873: LD_STRING 
48875: ST_TO_ADDR
// animal := CreateHuman ;
48876: LD_ADDR_VAR 0 12
48880: PUSH
48881: CALL_OW 44
48885: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48886: LD_VAR 0 12
48890: PPUSH
48891: LD_VAR 0 8
48895: PPUSH
48896: LD_INT 0
48898: PPUSH
48899: CALL 50621 0 3
// end ;
48903: GO 48857
48905: POP
48906: POP
// if fishes then
48907: LD_VAR 0 7
48911: IFFALSE 48978
// for i = 1 to fishes do
48913: LD_ADDR_VAR 0 11
48917: PUSH
48918: DOUBLE
48919: LD_INT 1
48921: DEC
48922: ST_TO_ADDR
48923: LD_VAR 0 7
48927: PUSH
48928: FOR_TO
48929: IFFALSE 48976
// begin hc_class = 20 ;
48931: LD_ADDR_OWVAR 28
48935: PUSH
48936: LD_INT 20
48938: ST_TO_ADDR
// hc_gallery =  ;
48939: LD_ADDR_OWVAR 33
48943: PUSH
48944: LD_STRING 
48946: ST_TO_ADDR
// animal := CreateHuman ;
48947: LD_ADDR_VAR 0 12
48951: PUSH
48952: CALL_OW 44
48956: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
48957: LD_VAR 0 12
48961: PPUSH
48962: LD_VAR 0 9
48966: PPUSH
48967: LD_INT 0
48969: PPUSH
48970: CALL 50621 0 3
// end ;
48974: GO 48928
48976: POP
48977: POP
// end ;
48978: LD_VAR 0 10
48982: RET
// export function WantHeal ( sci , unit ) ; begin
48983: LD_INT 0
48985: PPUSH
// if GetTaskList ( sci ) > 0 then
48986: LD_VAR 0 1
48990: PPUSH
48991: CALL_OW 437
48995: PUSH
48996: LD_INT 0
48998: GREATER
48999: IFFALSE 49071
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
49001: LD_VAR 0 1
49005: PPUSH
49006: CALL_OW 437
49010: PUSH
49011: LD_INT 1
49013: ARRAY
49014: PUSH
49015: LD_INT 1
49017: ARRAY
49018: PUSH
49019: LD_STRING l
49021: EQUAL
49022: IFFALSE 49049
49024: PUSH
49025: LD_VAR 0 1
49029: PPUSH
49030: CALL_OW 437
49034: PUSH
49035: LD_INT 1
49037: ARRAY
49038: PUSH
49039: LD_INT 4
49041: ARRAY
49042: PUSH
49043: LD_VAR 0 2
49047: EQUAL
49048: AND
49049: IFFALSE 49061
// result := true else
49051: LD_ADDR_VAR 0 3
49055: PUSH
49056: LD_INT 1
49058: ST_TO_ADDR
49059: GO 49069
// result := false ;
49061: LD_ADDR_VAR 0 3
49065: PUSH
49066: LD_INT 0
49068: ST_TO_ADDR
// end else
49069: GO 49079
// result := false ;
49071: LD_ADDR_VAR 0 3
49075: PUSH
49076: LD_INT 0
49078: ST_TO_ADDR
// end ;
49079: LD_VAR 0 3
49083: RET
// export function HealTarget ( sci ) ; begin
49084: LD_INT 0
49086: PPUSH
// if not sci then
49087: LD_VAR 0 1
49091: NOT
49092: IFFALSE 49096
// exit ;
49094: GO 49161
// result := 0 ;
49096: LD_ADDR_VAR 0 2
49100: PUSH
49101: LD_INT 0
49103: ST_TO_ADDR
// if GetTaskList ( sci ) then
49104: LD_VAR 0 1
49108: PPUSH
49109: CALL_OW 437
49113: IFFALSE 49161
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
49115: LD_VAR 0 1
49119: PPUSH
49120: CALL_OW 437
49124: PUSH
49125: LD_INT 1
49127: ARRAY
49128: PUSH
49129: LD_INT 1
49131: ARRAY
49132: PUSH
49133: LD_STRING l
49135: EQUAL
49136: IFFALSE 49161
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
49138: LD_ADDR_VAR 0 2
49142: PUSH
49143: LD_VAR 0 1
49147: PPUSH
49148: CALL_OW 437
49152: PUSH
49153: LD_INT 1
49155: ARRAY
49156: PUSH
49157: LD_INT 4
49159: ARRAY
49160: ST_TO_ADDR
// end ;
49161: LD_VAR 0 2
49165: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
49166: LD_INT 0
49168: PPUSH
49169: PPUSH
49170: PPUSH
49171: PPUSH
// if not base_units then
49172: LD_VAR 0 1
49176: NOT
49177: IFFALSE 49181
// exit ;
49179: GO 49268
// result := false ;
49181: LD_ADDR_VAR 0 2
49185: PUSH
49186: LD_INT 0
49188: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
49189: LD_ADDR_VAR 0 5
49193: PUSH
49194: LD_VAR 0 1
49198: PPUSH
49199: LD_INT 21
49201: PUSH
49202: LD_INT 3
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PPUSH
49209: CALL_OW 72
49213: ST_TO_ADDR
// if not tmp then
49214: LD_VAR 0 5
49218: NOT
49219: IFFALSE 49223
// exit ;
49221: GO 49268
// for i in tmp do
49223: LD_ADDR_VAR 0 3
49227: PUSH
49228: LD_VAR 0 5
49232: PUSH
49233: FOR_IN
49234: IFFALSE 49266
// begin result := EnemyInRange ( i , 22 ) ;
49236: LD_ADDR_VAR 0 2
49240: PUSH
49241: LD_VAR 0 3
49245: PPUSH
49246: LD_INT 22
49248: PPUSH
49249: CALL 46683 0 2
49253: ST_TO_ADDR
// if result then
49254: LD_VAR 0 2
49258: IFFALSE 49264
// exit ;
49260: POP
49261: POP
49262: GO 49268
// end ;
49264: GO 49233
49266: POP
49267: POP
// end ;
49268: LD_VAR 0 2
49272: RET
// export function FilterByTag ( units , tag ) ; begin
49273: LD_INT 0
49275: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
49276: LD_ADDR_VAR 0 3
49280: PUSH
49281: LD_VAR 0 1
49285: PPUSH
49286: LD_INT 120
49288: PUSH
49289: LD_VAR 0 2
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PPUSH
49298: CALL_OW 72
49302: ST_TO_ADDR
// end ;
49303: LD_VAR 0 3
49307: RET
// export function IsDriver ( un ) ; begin
49308: LD_INT 0
49310: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
49311: LD_ADDR_VAR 0 2
49315: PUSH
49316: LD_VAR 0 1
49320: PUSH
49321: LD_INT 55
49323: PUSH
49324: EMPTY
49325: LIST
49326: PPUSH
49327: CALL_OW 69
49331: IN
49332: ST_TO_ADDR
// end ;
49333: LD_VAR 0 2
49337: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
49338: LD_INT 0
49340: PPUSH
49341: PPUSH
// list := [ ] ;
49342: LD_ADDR_VAR 0 5
49346: PUSH
49347: EMPTY
49348: ST_TO_ADDR
// case d of 0 :
49349: LD_VAR 0 3
49353: PUSH
49354: LD_INT 0
49356: DOUBLE
49357: EQUAL
49358: IFTRUE 49362
49360: GO 49495
49362: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
49363: LD_ADDR_VAR 0 5
49367: PUSH
49368: LD_VAR 0 1
49372: PUSH
49373: LD_INT 4
49375: MINUS
49376: PUSH
49377: LD_VAR 0 2
49381: PUSH
49382: LD_INT 4
49384: MINUS
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: PUSH
49394: LD_VAR 0 1
49398: PUSH
49399: LD_INT 3
49401: MINUS
49402: PUSH
49403: LD_VAR 0 2
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: LIST
49415: PUSH
49416: LD_VAR 0 1
49420: PUSH
49421: LD_INT 4
49423: PLUS
49424: PUSH
49425: LD_VAR 0 2
49429: PUSH
49430: LD_INT 4
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: LIST
49437: PUSH
49438: LD_VAR 0 1
49442: PUSH
49443: LD_INT 3
49445: PLUS
49446: PUSH
49447: LD_VAR 0 2
49451: PUSH
49452: LD_INT 3
49454: PLUS
49455: PUSH
49456: LD_INT 5
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: LIST
49463: PUSH
49464: LD_VAR 0 1
49468: PUSH
49469: LD_VAR 0 2
49473: PUSH
49474: LD_INT 4
49476: PLUS
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: LIST
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: ST_TO_ADDR
// end ; 1 :
49493: GO 50193
49495: LD_INT 1
49497: DOUBLE
49498: EQUAL
49499: IFTRUE 49503
49501: GO 49636
49503: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
49504: LD_ADDR_VAR 0 5
49508: PUSH
49509: LD_VAR 0 1
49513: PUSH
49514: LD_VAR 0 2
49518: PUSH
49519: LD_INT 4
49521: MINUS
49522: PUSH
49523: LD_INT 3
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: PUSH
49531: LD_VAR 0 1
49535: PUSH
49536: LD_INT 3
49538: MINUS
49539: PUSH
49540: LD_VAR 0 2
49544: PUSH
49545: LD_INT 3
49547: MINUS
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: LIST
49556: PUSH
49557: LD_VAR 0 1
49561: PUSH
49562: LD_INT 4
49564: MINUS
49565: PUSH
49566: LD_VAR 0 2
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: LIST
49578: PUSH
49579: LD_VAR 0 1
49583: PUSH
49584: LD_VAR 0 2
49588: PUSH
49589: LD_INT 3
49591: PLUS
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: LIST
49600: PUSH
49601: LD_VAR 0 1
49605: PUSH
49606: LD_INT 4
49608: PLUS
49609: PUSH
49610: LD_VAR 0 2
49614: PUSH
49615: LD_INT 4
49617: PLUS
49618: PUSH
49619: LD_INT 5
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: LIST
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: ST_TO_ADDR
// end ; 2 :
49634: GO 50193
49636: LD_INT 2
49638: DOUBLE
49639: EQUAL
49640: IFTRUE 49644
49642: GO 49773
49644: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
49645: LD_ADDR_VAR 0 5
49649: PUSH
49650: LD_VAR 0 1
49654: PUSH
49655: LD_VAR 0 2
49659: PUSH
49660: LD_INT 3
49662: MINUS
49663: PUSH
49664: LD_INT 3
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: LIST
49671: PUSH
49672: LD_VAR 0 1
49676: PUSH
49677: LD_INT 4
49679: PLUS
49680: PUSH
49681: LD_VAR 0 2
49685: PUSH
49686: LD_INT 4
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: LIST
49693: PUSH
49694: LD_VAR 0 1
49698: PUSH
49699: LD_VAR 0 2
49703: PUSH
49704: LD_INT 4
49706: PLUS
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: LIST
49715: PUSH
49716: LD_VAR 0 1
49720: PUSH
49721: LD_INT 3
49723: MINUS
49724: PUSH
49725: LD_VAR 0 2
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: LIST
49737: PUSH
49738: LD_VAR 0 1
49742: PUSH
49743: LD_INT 4
49745: MINUS
49746: PUSH
49747: LD_VAR 0 2
49751: PUSH
49752: LD_INT 4
49754: MINUS
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: LIST
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: ST_TO_ADDR
// end ; 3 :
49771: GO 50193
49773: LD_INT 3
49775: DOUBLE
49776: EQUAL
49777: IFTRUE 49781
49779: GO 49914
49781: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
49782: LD_ADDR_VAR 0 5
49786: PUSH
49787: LD_VAR 0 1
49791: PUSH
49792: LD_INT 3
49794: PLUS
49795: PUSH
49796: LD_VAR 0 2
49800: PUSH
49801: LD_INT 4
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: LIST
49808: PUSH
49809: LD_VAR 0 1
49813: PUSH
49814: LD_INT 4
49816: PLUS
49817: PUSH
49818: LD_VAR 0 2
49822: PUSH
49823: LD_INT 4
49825: PLUS
49826: PUSH
49827: LD_INT 5
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: LIST
49834: PUSH
49835: LD_VAR 0 1
49839: PUSH
49840: LD_INT 4
49842: MINUS
49843: PUSH
49844: LD_VAR 0 2
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: LIST
49856: PUSH
49857: LD_VAR 0 1
49861: PUSH
49862: LD_VAR 0 2
49866: PUSH
49867: LD_INT 4
49869: MINUS
49870: PUSH
49871: LD_INT 3
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: LIST
49878: PUSH
49879: LD_VAR 0 1
49883: PUSH
49884: LD_INT 3
49886: MINUS
49887: PUSH
49888: LD_VAR 0 2
49892: PUSH
49893: LD_INT 3
49895: MINUS
49896: PUSH
49897: LD_INT 2
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: LIST
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: ST_TO_ADDR
// end ; 4 :
49912: GO 50193
49914: LD_INT 4
49916: DOUBLE
49917: EQUAL
49918: IFTRUE 49922
49920: GO 50055
49922: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
49923: LD_ADDR_VAR 0 5
49927: PUSH
49928: LD_VAR 0 1
49932: PUSH
49933: LD_VAR 0 2
49937: PUSH
49938: LD_INT 4
49940: PLUS
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: LIST
49949: PUSH
49950: LD_VAR 0 1
49954: PUSH
49955: LD_INT 3
49957: PLUS
49958: PUSH
49959: LD_VAR 0 2
49963: PUSH
49964: LD_INT 3
49966: PLUS
49967: PUSH
49968: LD_INT 5
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: LIST
49975: PUSH
49976: LD_VAR 0 1
49980: PUSH
49981: LD_INT 4
49983: PLUS
49984: PUSH
49985: LD_VAR 0 2
49989: PUSH
49990: LD_INT 4
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: LIST
49997: PUSH
49998: LD_VAR 0 1
50002: PUSH
50003: LD_VAR 0 2
50007: PUSH
50008: LD_INT 3
50010: MINUS
50011: PUSH
50012: LD_INT 3
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: LIST
50019: PUSH
50020: LD_VAR 0 1
50024: PUSH
50025: LD_INT 4
50027: MINUS
50028: PUSH
50029: LD_VAR 0 2
50033: PUSH
50034: LD_INT 4
50036: MINUS
50037: PUSH
50038: LD_INT 2
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: LIST
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: ST_TO_ADDR
// end ; 5 :
50053: GO 50193
50055: LD_INT 5
50057: DOUBLE
50058: EQUAL
50059: IFTRUE 50063
50061: GO 50192
50063: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
50064: LD_ADDR_VAR 0 5
50068: PUSH
50069: LD_VAR 0 1
50073: PUSH
50074: LD_INT 4
50076: MINUS
50077: PUSH
50078: LD_VAR 0 2
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: LIST
50090: PUSH
50091: LD_VAR 0 1
50095: PUSH
50096: LD_VAR 0 2
50100: PUSH
50101: LD_INT 4
50103: MINUS
50104: PUSH
50105: LD_INT 3
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: LIST
50112: PUSH
50113: LD_VAR 0 1
50117: PUSH
50118: LD_INT 4
50120: PLUS
50121: PUSH
50122: LD_VAR 0 2
50126: PUSH
50127: LD_INT 4
50129: PLUS
50130: PUSH
50131: LD_INT 5
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: LIST
50138: PUSH
50139: LD_VAR 0 1
50143: PUSH
50144: LD_INT 3
50146: PLUS
50147: PUSH
50148: LD_VAR 0 2
50152: PUSH
50153: LD_INT 4
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: LIST
50160: PUSH
50161: LD_VAR 0 1
50165: PUSH
50166: LD_VAR 0 2
50170: PUSH
50171: LD_INT 3
50173: PLUS
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: LIST
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: ST_TO_ADDR
// end ; end ;
50190: GO 50193
50192: POP
// result := list ;
50193: LD_ADDR_VAR 0 4
50197: PUSH
50198: LD_VAR 0 5
50202: ST_TO_ADDR
// end ;
50203: LD_VAR 0 4
50207: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
50208: LD_INT 0
50210: PPUSH
50211: PPUSH
50212: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
50213: LD_VAR 0 1
50217: NOT
50218: IFTRUE 50246
50220: PUSH
50221: LD_VAR 0 2
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: LD_INT 3
50234: PUSH
50235: LD_INT 4
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: IN
50244: NOT
50245: OR
50246: IFFALSE 50250
// exit ;
50248: GO 50333
// tmp := [ ] ;
50250: LD_ADDR_VAR 0 5
50254: PUSH
50255: EMPTY
50256: ST_TO_ADDR
// for i in units do
50257: LD_ADDR_VAR 0 4
50261: PUSH
50262: LD_VAR 0 1
50266: PUSH
50267: FOR_IN
50268: IFFALSE 50302
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
50270: LD_ADDR_VAR 0 5
50274: PUSH
50275: LD_VAR 0 5
50279: PPUSH
50280: LD_VAR 0 4
50284: PPUSH
50285: LD_VAR 0 2
50289: PPUSH
50290: CALL_OW 259
50294: PPUSH
50295: CALL 51728 0 2
50299: ST_TO_ADDR
50300: GO 50267
50302: POP
50303: POP
// if not tmp then
50304: LD_VAR 0 5
50308: NOT
50309: IFFALSE 50313
// exit ;
50311: GO 50333
// result := SortListByListDesc ( units , tmp ) ;
50313: LD_ADDR_VAR 0 3
50317: PUSH
50318: LD_VAR 0 1
50322: PPUSH
50323: LD_VAR 0 5
50327: PPUSH
50328: CALL_OW 77
50332: ST_TO_ADDR
// end ;
50333: LD_VAR 0 3
50337: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
50338: LD_INT 0
50340: PPUSH
50341: PPUSH
50342: PPUSH
// result := false ;
50343: LD_ADDR_VAR 0 3
50347: PUSH
50348: LD_INT 0
50350: ST_TO_ADDR
// if not building then
50351: LD_VAR 0 2
50355: NOT
50356: IFFALSE 50360
// exit ;
50358: GO 50504
// x := GetX ( building ) ;
50360: LD_ADDR_VAR 0 4
50364: PUSH
50365: LD_VAR 0 2
50369: PPUSH
50370: CALL_OW 250
50374: ST_TO_ADDR
// y := GetY ( building ) ;
50375: LD_ADDR_VAR 0 5
50379: PUSH
50380: LD_VAR 0 2
50384: PPUSH
50385: CALL_OW 251
50389: ST_TO_ADDR
// if not x or not y then
50390: LD_VAR 0 4
50394: NOT
50395: IFTRUE 50404
50397: PUSH
50398: LD_VAR 0 5
50402: NOT
50403: OR
50404: IFFALSE 50408
// exit ;
50406: GO 50504
// if GetTaskList ( unit ) then
50408: LD_VAR 0 1
50412: PPUSH
50413: CALL_OW 437
50417: IFFALSE 50504
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50419: LD_STRING e
50421: PUSH
50422: LD_VAR 0 1
50426: PPUSH
50427: CALL_OW 437
50431: PUSH
50432: LD_INT 1
50434: ARRAY
50435: PUSH
50436: LD_INT 1
50438: ARRAY
50439: EQUAL
50440: IFFALSE 50467
50442: PUSH
50443: LD_VAR 0 4
50447: PUSH
50448: LD_VAR 0 1
50452: PPUSH
50453: CALL_OW 437
50457: PUSH
50458: LD_INT 1
50460: ARRAY
50461: PUSH
50462: LD_INT 2
50464: ARRAY
50465: EQUAL
50466: AND
50467: IFFALSE 50494
50469: PUSH
50470: LD_VAR 0 5
50474: PUSH
50475: LD_VAR 0 1
50479: PPUSH
50480: CALL_OW 437
50484: PUSH
50485: LD_INT 1
50487: ARRAY
50488: PUSH
50489: LD_INT 3
50491: ARRAY
50492: EQUAL
50493: AND
50494: IFFALSE 50504
// result := true end ;
50496: LD_ADDR_VAR 0 3
50500: PUSH
50501: LD_INT 1
50503: ST_TO_ADDR
// end ;
50504: LD_VAR 0 3
50508: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
50509: LD_INT 0
50511: PPUSH
// result := false ;
50512: LD_ADDR_VAR 0 4
50516: PUSH
50517: LD_INT 0
50519: ST_TO_ADDR
// if GetTaskList ( unit ) then
50520: LD_VAR 0 1
50524: PPUSH
50525: CALL_OW 437
50529: IFFALSE 50616
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50531: LD_STRING M
50533: PUSH
50534: LD_VAR 0 1
50538: PPUSH
50539: CALL_OW 437
50543: PUSH
50544: LD_INT 1
50546: ARRAY
50547: PUSH
50548: LD_INT 1
50550: ARRAY
50551: EQUAL
50552: IFFALSE 50579
50554: PUSH
50555: LD_VAR 0 2
50559: PUSH
50560: LD_VAR 0 1
50564: PPUSH
50565: CALL_OW 437
50569: PUSH
50570: LD_INT 1
50572: ARRAY
50573: PUSH
50574: LD_INT 2
50576: ARRAY
50577: EQUAL
50578: AND
50579: IFFALSE 50606
50581: PUSH
50582: LD_VAR 0 3
50586: PUSH
50587: LD_VAR 0 1
50591: PPUSH
50592: CALL_OW 437
50596: PUSH
50597: LD_INT 1
50599: ARRAY
50600: PUSH
50601: LD_INT 3
50603: ARRAY
50604: EQUAL
50605: AND
50606: IFFALSE 50616
// result := true ;
50608: LD_ADDR_VAR 0 4
50612: PUSH
50613: LD_INT 1
50615: ST_TO_ADDR
// end ; end ;
50616: LD_VAR 0 4
50620: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
50621: LD_INT 0
50623: PPUSH
50624: PPUSH
50625: PPUSH
50626: PPUSH
// if not unit or not area then
50627: LD_VAR 0 1
50631: NOT
50632: IFTRUE 50641
50634: PUSH
50635: LD_VAR 0 2
50639: NOT
50640: OR
50641: IFFALSE 50645
// exit ;
50643: GO 50821
// tmp := AreaToList ( area , i ) ;
50645: LD_ADDR_VAR 0 6
50649: PUSH
50650: LD_VAR 0 2
50654: PPUSH
50655: LD_VAR 0 5
50659: PPUSH
50660: CALL_OW 517
50664: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
50665: LD_ADDR_VAR 0 5
50669: PUSH
50670: DOUBLE
50671: LD_INT 1
50673: DEC
50674: ST_TO_ADDR
50675: LD_VAR 0 6
50679: PUSH
50680: LD_INT 1
50682: ARRAY
50683: PUSH
50684: FOR_TO
50685: IFFALSE 50819
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
50687: LD_ADDR_VAR 0 7
50691: PUSH
50692: LD_VAR 0 6
50696: PUSH
50697: LD_INT 1
50699: ARRAY
50700: PUSH
50701: LD_VAR 0 5
50705: ARRAY
50706: PUSH
50707: LD_VAR 0 6
50711: PUSH
50712: LD_INT 2
50714: ARRAY
50715: PUSH
50716: LD_VAR 0 5
50720: ARRAY
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
50726: LD_INT 92
50728: PUSH
50729: LD_VAR 0 7
50733: PUSH
50734: LD_INT 1
50736: ARRAY
50737: PUSH
50738: LD_VAR 0 7
50742: PUSH
50743: LD_INT 2
50745: ARRAY
50746: PUSH
50747: LD_INT 2
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: PPUSH
50756: CALL_OW 69
50760: PUSH
50761: LD_INT 0
50763: EQUAL
50764: IFFALSE 50817
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
50766: LD_VAR 0 1
50770: PPUSH
50771: LD_VAR 0 7
50775: PUSH
50776: LD_INT 1
50778: ARRAY
50779: PPUSH
50780: LD_VAR 0 7
50784: PUSH
50785: LD_INT 2
50787: ARRAY
50788: PPUSH
50789: LD_VAR 0 3
50793: PPUSH
50794: CALL_OW 48
// result := IsPlaced ( unit ) ;
50798: LD_ADDR_VAR 0 4
50802: PUSH
50803: LD_VAR 0 1
50807: PPUSH
50808: CALL_OW 305
50812: ST_TO_ADDR
// exit ;
50813: POP
50814: POP
50815: GO 50821
// end ; end ;
50817: GO 50684
50819: POP
50820: POP
// end ;
50821: LD_VAR 0 4
50825: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
50826: LD_INT 0
50828: PPUSH
50829: PPUSH
50830: PPUSH
// if not side or side > 8 then
50831: LD_VAR 0 1
50835: NOT
50836: IFTRUE 50848
50838: PUSH
50839: LD_VAR 0 1
50843: PUSH
50844: LD_INT 8
50846: GREATER
50847: OR
50848: IFFALSE 50852
// exit ;
50850: GO 51039
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
50852: LD_ADDR_VAR 0 4
50856: PUSH
50857: LD_INT 22
50859: PUSH
50860: LD_VAR 0 1
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 21
50871: PUSH
50872: LD_INT 3
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PPUSH
50883: CALL_OW 69
50887: ST_TO_ADDR
// if not tmp then
50888: LD_VAR 0 4
50892: NOT
50893: IFFALSE 50897
// exit ;
50895: GO 51039
// enable_addtolog := true ;
50897: LD_ADDR_OWVAR 81
50901: PUSH
50902: LD_INT 1
50904: ST_TO_ADDR
// AddToLog ( [ ) ;
50905: LD_STRING [
50907: PPUSH
50908: CALL_OW 561
// for i in tmp do
50912: LD_ADDR_VAR 0 3
50916: PUSH
50917: LD_VAR 0 4
50921: PUSH
50922: FOR_IN
50923: IFFALSE 51030
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
50925: LD_STRING [
50927: PUSH
50928: LD_VAR 0 3
50932: PPUSH
50933: CALL_OW 266
50937: STR
50938: PUSH
50939: LD_STRING , 
50941: STR
50942: PUSH
50943: LD_VAR 0 3
50947: PPUSH
50948: CALL_OW 250
50952: STR
50953: PUSH
50954: LD_STRING , 
50956: STR
50957: PUSH
50958: LD_VAR 0 3
50962: PPUSH
50963: CALL_OW 251
50967: STR
50968: PUSH
50969: LD_STRING , 
50971: STR
50972: PUSH
50973: LD_VAR 0 3
50977: PPUSH
50978: CALL_OW 254
50982: STR
50983: PUSH
50984: LD_STRING , 
50986: STR
50987: PUSH
50988: LD_VAR 0 3
50992: PPUSH
50993: LD_INT 1
50995: PPUSH
50996: CALL_OW 268
51000: STR
51001: PUSH
51002: LD_STRING , 
51004: STR
51005: PUSH
51006: LD_VAR 0 3
51010: PPUSH
51011: LD_INT 2
51013: PPUSH
51014: CALL_OW 268
51018: STR
51019: PUSH
51020: LD_STRING ],
51022: STR
51023: PPUSH
51024: CALL_OW 561
// end ;
51028: GO 50922
51030: POP
51031: POP
// AddToLog ( ]; ) ;
51032: LD_STRING ];
51034: PPUSH
51035: CALL_OW 561
// end ;
51039: LD_VAR 0 2
51043: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
51044: LD_INT 0
51046: PPUSH
51047: PPUSH
51048: PPUSH
51049: PPUSH
51050: PPUSH
// if not area or not rate or not max then
51051: LD_VAR 0 1
51055: NOT
51056: IFTRUE 51065
51058: PUSH
51059: LD_VAR 0 2
51063: NOT
51064: OR
51065: IFTRUE 51074
51067: PUSH
51068: LD_VAR 0 4
51072: NOT
51073: OR
51074: IFFALSE 51078
// exit ;
51076: GO 51267
// while 1 do
51078: LD_INT 1
51080: IFFALSE 51267
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
51082: LD_ADDR_VAR 0 9
51086: PUSH
51087: LD_VAR 0 1
51091: PPUSH
51092: LD_INT 1
51094: PPUSH
51095: CALL_OW 287
51099: PUSH
51100: LD_INT 10
51102: MUL
51103: ST_TO_ADDR
// r := rate / 10 ;
51104: LD_ADDR_VAR 0 7
51108: PUSH
51109: LD_VAR 0 2
51113: PUSH
51114: LD_INT 10
51116: DIVREAL
51117: ST_TO_ADDR
// time := 1 1$00 ;
51118: LD_ADDR_VAR 0 8
51122: PUSH
51123: LD_INT 2100
51125: ST_TO_ADDR
// if amount < min then
51126: LD_VAR 0 9
51130: PUSH
51131: LD_VAR 0 3
51135: LESS
51136: IFFALSE 51154
// r := r * 2 else
51138: LD_ADDR_VAR 0 7
51142: PUSH
51143: LD_VAR 0 7
51147: PUSH
51148: LD_INT 2
51150: MUL
51151: ST_TO_ADDR
51152: GO 51180
// if amount > max then
51154: LD_VAR 0 9
51158: PUSH
51159: LD_VAR 0 4
51163: GREATER
51164: IFFALSE 51180
// r := r / 2 ;
51166: LD_ADDR_VAR 0 7
51170: PUSH
51171: LD_VAR 0 7
51175: PUSH
51176: LD_INT 2
51178: DIVREAL
51179: ST_TO_ADDR
// time := time / r ;
51180: LD_ADDR_VAR 0 8
51184: PUSH
51185: LD_VAR 0 8
51189: PUSH
51190: LD_VAR 0 7
51194: DIVREAL
51195: ST_TO_ADDR
// if time < 0 then
51196: LD_VAR 0 8
51200: PUSH
51201: LD_INT 0
51203: LESS
51204: IFFALSE 51221
// time := time * - 1 ;
51206: LD_ADDR_VAR 0 8
51210: PUSH
51211: LD_VAR 0 8
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: MUL
51220: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
51221: LD_VAR 0 8
51225: PUSH
51226: LD_INT 35
51228: PPUSH
51229: LD_INT 875
51231: PPUSH
51232: CALL_OW 12
51236: PLUS
51237: PPUSH
51238: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
51242: LD_INT 1
51244: PPUSH
51245: LD_INT 5
51247: PPUSH
51248: CALL_OW 12
51252: PPUSH
51253: LD_VAR 0 1
51257: PPUSH
51258: LD_INT 1
51260: PPUSH
51261: CALL_OW 55
// end ;
51265: GO 51078
// end ;
51267: LD_VAR 0 5
51271: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
51272: LD_INT 0
51274: PPUSH
51275: PPUSH
51276: PPUSH
51277: PPUSH
51278: PPUSH
51279: PPUSH
51280: PPUSH
51281: PPUSH
// if not turrets or not factories then
51282: LD_VAR 0 1
51286: NOT
51287: IFTRUE 51296
51289: PUSH
51290: LD_VAR 0 2
51294: NOT
51295: OR
51296: IFFALSE 51300
// exit ;
51298: GO 51607
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
51300: LD_ADDR_VAR 0 10
51304: PUSH
51305: LD_INT 5
51307: PUSH
51308: LD_INT 6
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: LD_INT 4
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 3
51327: PUSH
51328: LD_INT 5
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 24
51342: PUSH
51343: LD_INT 25
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 23
51352: PUSH
51353: LD_INT 27
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 42
51366: PUSH
51367: LD_INT 43
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 44
51376: PUSH
51377: LD_INT 46
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 45
51386: PUSH
51387: LD_INT 47
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: LIST
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: LIST
51403: ST_TO_ADDR
// result := [ ] ;
51404: LD_ADDR_VAR 0 3
51408: PUSH
51409: EMPTY
51410: ST_TO_ADDR
// for i in turrets do
51411: LD_ADDR_VAR 0 4
51415: PUSH
51416: LD_VAR 0 1
51420: PUSH
51421: FOR_IN
51422: IFFALSE 51605
// begin nat := GetNation ( i ) ;
51424: LD_ADDR_VAR 0 7
51428: PUSH
51429: LD_VAR 0 4
51433: PPUSH
51434: CALL_OW 248
51438: ST_TO_ADDR
// weapon := 0 ;
51439: LD_ADDR_VAR 0 8
51443: PUSH
51444: LD_INT 0
51446: ST_TO_ADDR
// if not nat then
51447: LD_VAR 0 7
51451: NOT
51452: IFFALSE 51456
// continue ;
51454: GO 51421
// for j in list [ nat ] do
51456: LD_ADDR_VAR 0 5
51460: PUSH
51461: LD_VAR 0 10
51465: PUSH
51466: LD_VAR 0 7
51470: ARRAY
51471: PUSH
51472: FOR_IN
51473: IFFALSE 51514
// if GetBWeapon ( i ) = j [ 1 ] then
51475: LD_VAR 0 4
51479: PPUSH
51480: CALL_OW 269
51484: PUSH
51485: LD_VAR 0 5
51489: PUSH
51490: LD_INT 1
51492: ARRAY
51493: EQUAL
51494: IFFALSE 51512
// begin weapon := j [ 2 ] ;
51496: LD_ADDR_VAR 0 8
51500: PUSH
51501: LD_VAR 0 5
51505: PUSH
51506: LD_INT 2
51508: ARRAY
51509: ST_TO_ADDR
// break ;
51510: GO 51514
// end ;
51512: GO 51472
51514: POP
51515: POP
// if not weapon then
51516: LD_VAR 0 8
51520: NOT
51521: IFFALSE 51525
// continue ;
51523: GO 51421
// for k in factories do
51525: LD_ADDR_VAR 0 6
51529: PUSH
51530: LD_VAR 0 2
51534: PUSH
51535: FOR_IN
51536: IFFALSE 51601
// begin weapons := AvailableWeaponList ( k ) ;
51538: LD_ADDR_VAR 0 9
51542: PUSH
51543: LD_VAR 0 6
51547: PPUSH
51548: CALL_OW 478
51552: ST_TO_ADDR
// if not weapons then
51553: LD_VAR 0 9
51557: NOT
51558: IFFALSE 51562
// continue ;
51560: GO 51535
// if weapon in weapons then
51562: LD_VAR 0 8
51566: PUSH
51567: LD_VAR 0 9
51571: IN
51572: IFFALSE 51599
// begin result := [ i , weapon ] ;
51574: LD_ADDR_VAR 0 3
51578: PUSH
51579: LD_VAR 0 4
51583: PUSH
51584: LD_VAR 0 8
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: ST_TO_ADDR
// exit ;
51593: POP
51594: POP
51595: POP
51596: POP
51597: GO 51607
// end ; end ;
51599: GO 51535
51601: POP
51602: POP
// end ;
51603: GO 51421
51605: POP
51606: POP
// end ;
51607: LD_VAR 0 3
51611: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
51612: LD_INT 0
51614: PPUSH
// if not side or side > 8 then
51615: LD_VAR 0 3
51619: NOT
51620: IFTRUE 51632
51622: PUSH
51623: LD_VAR 0 3
51627: PUSH
51628: LD_INT 8
51630: GREATER
51631: OR
51632: IFFALSE 51636
// exit ;
51634: GO 51695
// if not range then
51636: LD_VAR 0 4
51640: NOT
51641: IFFALSE 51652
// range := - 12 ;
51643: LD_ADDR_VAR 0 4
51647: PUSH
51648: LD_INT 12
51650: NEG
51651: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
51652: LD_VAR 0 1
51656: PPUSH
51657: LD_VAR 0 2
51661: PPUSH
51662: LD_VAR 0 3
51666: PPUSH
51667: LD_VAR 0 4
51671: PPUSH
51672: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
51676: LD_VAR 0 1
51680: PPUSH
51681: LD_VAR 0 2
51685: PPUSH
51686: LD_VAR 0 3
51690: PPUSH
51691: CALL_OW 331
// end ;
51695: LD_VAR 0 5
51699: RET
// export function Video ( mode ) ; begin
51700: LD_INT 0
51702: PPUSH
// ingame_video = mode ;
51703: LD_ADDR_OWVAR 52
51707: PUSH
51708: LD_VAR 0 1
51712: ST_TO_ADDR
// interface_hidden = mode ;
51713: LD_ADDR_OWVAR 54
51717: PUSH
51718: LD_VAR 0 1
51722: ST_TO_ADDR
// end ;
51723: LD_VAR 0 2
51727: RET
// export function Join ( array , element ) ; begin
51728: LD_INT 0
51730: PPUSH
// result := Replace ( array , array + 1 , element ) ;
51731: LD_ADDR_VAR 0 3
51735: PUSH
51736: LD_VAR 0 1
51740: PPUSH
51741: LD_VAR 0 1
51745: PUSH
51746: LD_INT 1
51748: PLUS
51749: PPUSH
51750: LD_VAR 0 2
51754: PPUSH
51755: CALL_OW 1
51759: ST_TO_ADDR
// end ;
51760: LD_VAR 0 3
51764: RET
// export function JoinUnion ( array , element ) ; begin
51765: LD_INT 0
51767: PPUSH
// result := array union element ;
51768: LD_ADDR_VAR 0 3
51772: PUSH
51773: LD_VAR 0 1
51777: PUSH
51778: LD_VAR 0 2
51782: UNION
51783: ST_TO_ADDR
// end ;
51784: LD_VAR 0 3
51788: RET
// export function GetBehemoths ( side ) ; begin
51789: LD_INT 0
51791: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
51792: LD_ADDR_VAR 0 2
51796: PUSH
51797: LD_INT 22
51799: PUSH
51800: LD_VAR 0 1
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 31
51811: PUSH
51812: LD_INT 25
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PPUSH
51823: CALL_OW 69
51827: ST_TO_ADDR
// end ;
51828: LD_VAR 0 2
51832: RET
// export function Shuffle ( array ) ; var i , index ; begin
51833: LD_INT 0
51835: PPUSH
51836: PPUSH
51837: PPUSH
// result := [ ] ;
51838: LD_ADDR_VAR 0 2
51842: PUSH
51843: EMPTY
51844: ST_TO_ADDR
// if not array then
51845: LD_VAR 0 1
51849: NOT
51850: IFFALSE 51854
// exit ;
51852: GO 51953
// Randomize ;
51854: CALL_OW 10
// for i = array downto 1 do
51858: LD_ADDR_VAR 0 3
51862: PUSH
51863: DOUBLE
51864: LD_VAR 0 1
51868: INC
51869: ST_TO_ADDR
51870: LD_INT 1
51872: PUSH
51873: FOR_DOWNTO
51874: IFFALSE 51951
// begin index := rand ( 1 , array ) ;
51876: LD_ADDR_VAR 0 4
51880: PUSH
51881: LD_INT 1
51883: PPUSH
51884: LD_VAR 0 1
51888: PPUSH
51889: CALL_OW 12
51893: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
51894: LD_ADDR_VAR 0 2
51898: PUSH
51899: LD_VAR 0 2
51903: PPUSH
51904: LD_VAR 0 2
51908: PUSH
51909: LD_INT 1
51911: PLUS
51912: PPUSH
51913: LD_VAR 0 1
51917: PUSH
51918: LD_VAR 0 4
51922: ARRAY
51923: PPUSH
51924: CALL_OW 2
51928: ST_TO_ADDR
// array := Delete ( array , index ) ;
51929: LD_ADDR_VAR 0 1
51933: PUSH
51934: LD_VAR 0 1
51938: PPUSH
51939: LD_VAR 0 4
51943: PPUSH
51944: CALL_OW 3
51948: ST_TO_ADDR
// end ;
51949: GO 51873
51951: POP
51952: POP
// end ;
51953: LD_VAR 0 2
51957: RET
// export function GetBaseMaterials ( base ) ; begin
51958: LD_INT 0
51960: PPUSH
// result := [ 0 , 0 , 0 ] ;
51961: LD_ADDR_VAR 0 2
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: LIST
51979: ST_TO_ADDR
// if not base then
51980: LD_VAR 0 1
51984: NOT
51985: IFFALSE 51989
// exit ;
51987: GO 52038
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
51989: LD_ADDR_VAR 0 2
51993: PUSH
51994: LD_VAR 0 1
51998: PPUSH
51999: LD_INT 1
52001: PPUSH
52002: CALL_OW 275
52006: PUSH
52007: LD_VAR 0 1
52011: PPUSH
52012: LD_INT 2
52014: PPUSH
52015: CALL_OW 275
52019: PUSH
52020: LD_VAR 0 1
52024: PPUSH
52025: LD_INT 3
52027: PPUSH
52028: CALL_OW 275
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: LIST
52037: ST_TO_ADDR
// end ;
52038: LD_VAR 0 2
52042: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
52043: LD_INT 0
52045: PPUSH
52046: PPUSH
// result := array ;
52047: LD_ADDR_VAR 0 3
52051: PUSH
52052: LD_VAR 0 1
52056: ST_TO_ADDR
// if size >= result then
52057: LD_VAR 0 2
52061: PUSH
52062: LD_VAR 0 3
52066: GREATEREQUAL
52067: IFFALSE 52071
// exit ;
52069: GO 52121
// if size then
52071: LD_VAR 0 2
52075: IFFALSE 52121
// for i := array downto size do
52077: LD_ADDR_VAR 0 4
52081: PUSH
52082: DOUBLE
52083: LD_VAR 0 1
52087: INC
52088: ST_TO_ADDR
52089: LD_VAR 0 2
52093: PUSH
52094: FOR_DOWNTO
52095: IFFALSE 52119
// result := Delete ( result , result ) ;
52097: LD_ADDR_VAR 0 3
52101: PUSH
52102: LD_VAR 0 3
52106: PPUSH
52107: LD_VAR 0 3
52111: PPUSH
52112: CALL_OW 3
52116: ST_TO_ADDR
52117: GO 52094
52119: POP
52120: POP
// end ;
52121: LD_VAR 0 3
52125: RET
// export function ComExit ( unit ) ; var tmp ; begin
52126: LD_INT 0
52128: PPUSH
52129: PPUSH
// if not IsInUnit ( unit ) then
52130: LD_VAR 0 1
52134: PPUSH
52135: CALL_OW 310
52139: NOT
52140: IFFALSE 52144
// exit ;
52142: GO 52204
// tmp := IsInUnit ( unit ) ;
52144: LD_ADDR_VAR 0 3
52148: PUSH
52149: LD_VAR 0 1
52153: PPUSH
52154: CALL_OW 310
52158: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
52159: LD_VAR 0 3
52163: PPUSH
52164: CALL_OW 247
52168: PUSH
52169: LD_INT 2
52171: EQUAL
52172: IFFALSE 52185
// ComExitVehicle ( unit ) else
52174: LD_VAR 0 1
52178: PPUSH
52179: CALL_OW 121
52183: GO 52194
// ComExitBuilding ( unit ) ;
52185: LD_VAR 0 1
52189: PPUSH
52190: CALL_OW 122
// result := tmp ;
52194: LD_ADDR_VAR 0 2
52198: PUSH
52199: LD_VAR 0 3
52203: ST_TO_ADDR
// end ;
52204: LD_VAR 0 2
52208: RET
// export function ComExitAll ( units ) ; var i ; begin
52209: LD_INT 0
52211: PPUSH
52212: PPUSH
// if not units then
52213: LD_VAR 0 1
52217: NOT
52218: IFFALSE 52222
// exit ;
52220: GO 52248
// for i in units do
52222: LD_ADDR_VAR 0 3
52226: PUSH
52227: LD_VAR 0 1
52231: PUSH
52232: FOR_IN
52233: IFFALSE 52246
// ComExit ( i ) ;
52235: LD_VAR 0 3
52239: PPUSH
52240: CALL 52126 0 1
52244: GO 52232
52246: POP
52247: POP
// end ;
52248: LD_VAR 0 2
52252: RET
// export function ResetHc ; begin
52253: LD_INT 0
52255: PPUSH
// InitHc ;
52256: CALL_OW 19
// hc_importance := 0 ;
52260: LD_ADDR_OWVAR 32
52264: PUSH
52265: LD_INT 0
52267: ST_TO_ADDR
// end ;
52268: LD_VAR 0 1
52272: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
52273: LD_INT 0
52275: PPUSH
52276: PPUSH
52277: PPUSH
// _x := ( x1 + x2 ) div 2 ;
52278: LD_ADDR_VAR 0 6
52282: PUSH
52283: LD_VAR 0 1
52287: PUSH
52288: LD_VAR 0 3
52292: PLUS
52293: PUSH
52294: LD_INT 2
52296: DIV
52297: ST_TO_ADDR
// if _x < 0 then
52298: LD_VAR 0 6
52302: PUSH
52303: LD_INT 0
52305: LESS
52306: IFFALSE 52323
// _x := _x * - 1 ;
52308: LD_ADDR_VAR 0 6
52312: PUSH
52313: LD_VAR 0 6
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: MUL
52322: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
52323: LD_ADDR_VAR 0 7
52327: PUSH
52328: LD_VAR 0 2
52332: PUSH
52333: LD_VAR 0 4
52337: PLUS
52338: PUSH
52339: LD_INT 2
52341: DIV
52342: ST_TO_ADDR
// if _y < 0 then
52343: LD_VAR 0 7
52347: PUSH
52348: LD_INT 0
52350: LESS
52351: IFFALSE 52368
// _y := _y * - 1 ;
52353: LD_ADDR_VAR 0 7
52357: PUSH
52358: LD_VAR 0 7
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: MUL
52367: ST_TO_ADDR
// result := [ _x , _y ] ;
52368: LD_ADDR_VAR 0 5
52372: PUSH
52373: LD_VAR 0 6
52377: PUSH
52378: LD_VAR 0 7
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: ST_TO_ADDR
// end ;
52387: LD_VAR 0 5
52391: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
52392: LD_INT 0
52394: PPUSH
52395: PPUSH
52396: PPUSH
52397: PPUSH
// task := GetTaskList ( unit ) ;
52398: LD_ADDR_VAR 0 7
52402: PUSH
52403: LD_VAR 0 1
52407: PPUSH
52408: CALL_OW 437
52412: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
52413: LD_VAR 0 7
52417: NOT
52418: IFFALSE 52437
52420: PUSH
52421: LD_VAR 0 1
52425: PPUSH
52426: LD_VAR 0 2
52430: PPUSH
52431: CALL_OW 308
52435: NOT
52436: AND
52437: IFFALSE 52441
// exit ;
52439: GO 52559
// if IsInArea ( unit , area ) then
52441: LD_VAR 0 1
52445: PPUSH
52446: LD_VAR 0 2
52450: PPUSH
52451: CALL_OW 308
52455: IFFALSE 52473
// begin ComMoveToArea ( unit , goAway ) ;
52457: LD_VAR 0 1
52461: PPUSH
52462: LD_VAR 0 3
52466: PPUSH
52467: CALL_OW 113
// exit ;
52471: GO 52559
// end ; if task [ 1 ] [ 1 ] <> M then
52473: LD_VAR 0 7
52477: PUSH
52478: LD_INT 1
52480: ARRAY
52481: PUSH
52482: LD_INT 1
52484: ARRAY
52485: PUSH
52486: LD_STRING M
52488: NONEQUAL
52489: IFFALSE 52493
// exit ;
52491: GO 52559
// x := task [ 1 ] [ 2 ] ;
52493: LD_ADDR_VAR 0 5
52497: PUSH
52498: LD_VAR 0 7
52502: PUSH
52503: LD_INT 1
52505: ARRAY
52506: PUSH
52507: LD_INT 2
52509: ARRAY
52510: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
52511: LD_ADDR_VAR 0 6
52515: PUSH
52516: LD_VAR 0 7
52520: PUSH
52521: LD_INT 1
52523: ARRAY
52524: PUSH
52525: LD_INT 3
52527: ARRAY
52528: ST_TO_ADDR
// if InArea ( x , y , area ) then
52529: LD_VAR 0 5
52533: PPUSH
52534: LD_VAR 0 6
52538: PPUSH
52539: LD_VAR 0 2
52543: PPUSH
52544: CALL_OW 309
52548: IFFALSE 52559
// ComStop ( unit ) ;
52550: LD_VAR 0 1
52554: PPUSH
52555: CALL_OW 141
// end ;
52559: LD_VAR 0 4
52563: RET
// export function Abs ( value ) ; begin
52564: LD_INT 0
52566: PPUSH
// result := value ;
52567: LD_ADDR_VAR 0 2
52571: PUSH
52572: LD_VAR 0 1
52576: ST_TO_ADDR
// if value < 0 then
52577: LD_VAR 0 1
52581: PUSH
52582: LD_INT 0
52584: LESS
52585: IFFALSE 52602
// result := value * - 1 ;
52587: LD_ADDR_VAR 0 2
52591: PUSH
52592: LD_VAR 0 1
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: MUL
52601: ST_TO_ADDR
// end ;
52602: LD_VAR 0 2
52606: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
52607: LD_INT 0
52609: PPUSH
52610: PPUSH
52611: PPUSH
52612: PPUSH
52613: PPUSH
52614: PPUSH
52615: PPUSH
52616: PPUSH
// if not unit or not building then
52617: LD_VAR 0 1
52621: NOT
52622: IFTRUE 52631
52624: PUSH
52625: LD_VAR 0 2
52629: NOT
52630: OR
52631: IFFALSE 52635
// exit ;
52633: GO 52863
// x := GetX ( building ) ;
52635: LD_ADDR_VAR 0 4
52639: PUSH
52640: LD_VAR 0 2
52644: PPUSH
52645: CALL_OW 250
52649: ST_TO_ADDR
// y := GetY ( building ) ;
52650: LD_ADDR_VAR 0 6
52654: PUSH
52655: LD_VAR 0 2
52659: PPUSH
52660: CALL_OW 251
52664: ST_TO_ADDR
// d := GetDir ( building ) ;
52665: LD_ADDR_VAR 0 8
52669: PUSH
52670: LD_VAR 0 2
52674: PPUSH
52675: CALL_OW 254
52679: ST_TO_ADDR
// r := 4 ;
52680: LD_ADDR_VAR 0 9
52684: PUSH
52685: LD_INT 4
52687: ST_TO_ADDR
// for i := 1 to 5 do
52688: LD_ADDR_VAR 0 10
52692: PUSH
52693: DOUBLE
52694: LD_INT 1
52696: DEC
52697: ST_TO_ADDR
52698: LD_INT 5
52700: PUSH
52701: FOR_TO
52702: IFFALSE 52861
// begin _x := ShiftX ( x , d , r + i ) ;
52704: LD_ADDR_VAR 0 5
52708: PUSH
52709: LD_VAR 0 4
52713: PPUSH
52714: LD_VAR 0 8
52718: PPUSH
52719: LD_VAR 0 9
52723: PUSH
52724: LD_VAR 0 10
52728: PLUS
52729: PPUSH
52730: CALL_OW 272
52734: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
52735: LD_ADDR_VAR 0 7
52739: PUSH
52740: LD_VAR 0 6
52744: PPUSH
52745: LD_VAR 0 8
52749: PPUSH
52750: LD_VAR 0 9
52754: PUSH
52755: LD_VAR 0 10
52759: PLUS
52760: PPUSH
52761: CALL_OW 273
52765: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
52766: LD_VAR 0 5
52770: PPUSH
52771: LD_VAR 0 7
52775: PPUSH
52776: CALL_OW 488
52780: IFFALSE 52815
52782: PUSH
52783: LD_VAR 0 5
52787: PPUSH
52788: LD_VAR 0 7
52792: PPUSH
52793: CALL_OW 428
52797: PPUSH
52798: CALL_OW 247
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: IN
52813: NOT
52814: AND
52815: IFFALSE 52859
// begin ComMoveXY ( unit , _x , _y ) ;
52817: LD_VAR 0 1
52821: PPUSH
52822: LD_VAR 0 5
52826: PPUSH
52827: LD_VAR 0 7
52831: PPUSH
52832: CALL_OW 111
// result := [ _x , _y ] ;
52836: LD_ADDR_VAR 0 3
52840: PUSH
52841: LD_VAR 0 5
52845: PUSH
52846: LD_VAR 0 7
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: ST_TO_ADDR
// exit ;
52855: POP
52856: POP
52857: GO 52863
// end ; end ;
52859: GO 52701
52861: POP
52862: POP
// end ;
52863: LD_VAR 0 3
52867: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
52868: LD_INT 0
52870: PPUSH
52871: PPUSH
52872: PPUSH
// result := 0 ;
52873: LD_ADDR_VAR 0 3
52877: PUSH
52878: LD_INT 0
52880: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
52881: LD_VAR 0 1
52885: PUSH
52886: LD_INT 0
52888: LESS
52889: IFTRUE 52901
52891: PUSH
52892: LD_VAR 0 1
52896: PUSH
52897: LD_INT 8
52899: GREATER
52900: OR
52901: IFTRUE 52913
52903: PUSH
52904: LD_VAR 0 2
52908: PUSH
52909: LD_INT 0
52911: LESS
52912: OR
52913: IFTRUE 52925
52915: PUSH
52916: LD_VAR 0 2
52920: PUSH
52921: LD_INT 8
52923: GREATER
52924: OR
52925: IFFALSE 52929
// exit ;
52927: GO 53004
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
52929: LD_ADDR_VAR 0 4
52933: PUSH
52934: LD_INT 22
52936: PUSH
52937: LD_VAR 0 2
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PPUSH
52946: CALL_OW 69
52950: PUSH
52951: FOR_IN
52952: IFFALSE 53002
// begin un := UnitShoot ( i ) ;
52954: LD_ADDR_VAR 0 5
52958: PUSH
52959: LD_VAR 0 4
52963: PPUSH
52964: CALL_OW 504
52968: ST_TO_ADDR
// if GetSide ( un ) = side1 then
52969: LD_VAR 0 5
52973: PPUSH
52974: CALL_OW 255
52978: PUSH
52979: LD_VAR 0 1
52983: EQUAL
52984: IFFALSE 53000
// begin result := un ;
52986: LD_ADDR_VAR 0 3
52990: PUSH
52991: LD_VAR 0 5
52995: ST_TO_ADDR
// exit ;
52996: POP
52997: POP
52998: GO 53004
// end ; end ;
53000: GO 52951
53002: POP
53003: POP
// end ;
53004: LD_VAR 0 3
53008: RET
// export function GetCargoBay ( units ) ; begin
53009: LD_INT 0
53011: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
53012: LD_ADDR_VAR 0 2
53016: PUSH
53017: LD_VAR 0 1
53021: PPUSH
53022: LD_INT 2
53024: PUSH
53025: LD_INT 34
53027: PUSH
53028: LD_INT 12
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 34
53037: PUSH
53038: LD_INT 51
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 34
53047: PUSH
53048: LD_INT 32
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 34
53057: PUSH
53058: LD_INT 89
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: PPUSH
53072: CALL_OW 72
53076: ST_TO_ADDR
// end ;
53077: LD_VAR 0 2
53081: RET
// export function Negate ( value ) ; begin
53082: LD_INT 0
53084: PPUSH
// result := not value ;
53085: LD_ADDR_VAR 0 2
53089: PUSH
53090: LD_VAR 0 1
53094: NOT
53095: ST_TO_ADDR
// end ;
53096: LD_VAR 0 2
53100: RET
// export function Inc ( value ) ; begin
53101: LD_INT 0
53103: PPUSH
// result := value + 1 ;
53104: LD_ADDR_VAR 0 2
53108: PUSH
53109: LD_VAR 0 1
53113: PUSH
53114: LD_INT 1
53116: PLUS
53117: ST_TO_ADDR
// end ;
53118: LD_VAR 0 2
53122: RET
// export function Dec ( value ) ; begin
53123: LD_INT 0
53125: PPUSH
// result := value - 1 ;
53126: LD_ADDR_VAR 0 2
53130: PUSH
53131: LD_VAR 0 1
53135: PUSH
53136: LD_INT 1
53138: MINUS
53139: ST_TO_ADDR
// end ;
53140: LD_VAR 0 2
53144: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
53145: LD_INT 0
53147: PPUSH
53148: PPUSH
53149: PPUSH
53150: PPUSH
53151: PPUSH
53152: PPUSH
53153: PPUSH
53154: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
53155: LD_VAR 0 1
53159: PPUSH
53160: LD_VAR 0 2
53164: PPUSH
53165: CALL_OW 488
53169: NOT
53170: IFTRUE 53189
53172: PUSH
53173: LD_VAR 0 3
53177: PPUSH
53178: LD_VAR 0 4
53182: PPUSH
53183: CALL_OW 488
53187: NOT
53188: OR
53189: IFFALSE 53202
// begin result := - 1 ;
53191: LD_ADDR_VAR 0 5
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: ST_TO_ADDR
// exit ;
53200: GO 53437
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
53202: LD_ADDR_VAR 0 12
53206: PUSH
53207: LD_VAR 0 1
53211: PPUSH
53212: LD_VAR 0 2
53216: PPUSH
53217: LD_VAR 0 3
53221: PPUSH
53222: LD_VAR 0 4
53226: PPUSH
53227: CALL 52273 0 4
53231: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
53232: LD_ADDR_VAR 0 11
53236: PUSH
53237: LD_VAR 0 1
53241: PPUSH
53242: LD_VAR 0 2
53246: PPUSH
53247: LD_VAR 0 12
53251: PUSH
53252: LD_INT 1
53254: ARRAY
53255: PPUSH
53256: LD_VAR 0 12
53260: PUSH
53261: LD_INT 2
53263: ARRAY
53264: PPUSH
53265: CALL_OW 298
53269: ST_TO_ADDR
// distance := 9999 ;
53270: LD_ADDR_VAR 0 10
53274: PUSH
53275: LD_INT 9999
53277: ST_TO_ADDR
// for i := 0 to 5 do
53278: LD_ADDR_VAR 0 6
53282: PUSH
53283: DOUBLE
53284: LD_INT 0
53286: DEC
53287: ST_TO_ADDR
53288: LD_INT 5
53290: PUSH
53291: FOR_TO
53292: IFFALSE 53435
// begin _x := ShiftX ( x1 , i , centerDist ) ;
53294: LD_ADDR_VAR 0 7
53298: PUSH
53299: LD_VAR 0 1
53303: PPUSH
53304: LD_VAR 0 6
53308: PPUSH
53309: LD_VAR 0 11
53313: PPUSH
53314: CALL_OW 272
53318: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
53319: LD_ADDR_VAR 0 8
53323: PUSH
53324: LD_VAR 0 2
53328: PPUSH
53329: LD_VAR 0 6
53333: PPUSH
53334: LD_VAR 0 11
53338: PPUSH
53339: CALL_OW 273
53343: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
53344: LD_VAR 0 7
53348: PPUSH
53349: LD_VAR 0 8
53353: PPUSH
53354: CALL_OW 488
53358: NOT
53359: IFFALSE 53363
// continue ;
53361: GO 53291
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
53363: LD_ADDR_VAR 0 9
53367: PUSH
53368: LD_VAR 0 12
53372: PUSH
53373: LD_INT 1
53375: ARRAY
53376: PPUSH
53377: LD_VAR 0 12
53381: PUSH
53382: LD_INT 2
53384: ARRAY
53385: PPUSH
53386: LD_VAR 0 7
53390: PPUSH
53391: LD_VAR 0 8
53395: PPUSH
53396: CALL_OW 298
53400: ST_TO_ADDR
// if tmp < distance then
53401: LD_VAR 0 9
53405: PUSH
53406: LD_VAR 0 10
53410: LESS
53411: IFFALSE 53433
// begin result := i ;
53413: LD_ADDR_VAR 0 5
53417: PUSH
53418: LD_VAR 0 6
53422: ST_TO_ADDR
// distance := tmp ;
53423: LD_ADDR_VAR 0 10
53427: PUSH
53428: LD_VAR 0 9
53432: ST_TO_ADDR
// end ; end ;
53433: GO 53291
53435: POP
53436: POP
// end ;
53437: LD_VAR 0 5
53441: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53442: LD_INT 0
53444: PPUSH
53445: PPUSH
// if not driver or not IsInUnit ( driver ) then
53446: LD_VAR 0 1
53450: NOT
53451: IFTRUE 53465
53453: PUSH
53454: LD_VAR 0 1
53458: PPUSH
53459: CALL_OW 310
53463: NOT
53464: OR
53465: IFFALSE 53469
// exit ;
53467: GO 53559
// vehicle := IsInUnit ( driver ) ;
53469: LD_ADDR_VAR 0 3
53473: PUSH
53474: LD_VAR 0 1
53478: PPUSH
53479: CALL_OW 310
53483: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53484: LD_VAR 0 1
53488: PPUSH
53489: LD_STRING \
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: PUSH
53519: LD_STRING E
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: LD_VAR 0 3
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PPUSH
53555: CALL_OW 446
// end ;
53559: LD_VAR 0 2
53563: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53564: LD_INT 0
53566: PPUSH
53567: PPUSH
// if not driver or not IsInUnit ( driver ) then
53568: LD_VAR 0 1
53572: NOT
53573: IFTRUE 53587
53575: PUSH
53576: LD_VAR 0 1
53580: PPUSH
53581: CALL_OW 310
53585: NOT
53586: OR
53587: IFFALSE 53591
// exit ;
53589: GO 53681
// vehicle := IsInUnit ( driver ) ;
53591: LD_ADDR_VAR 0 3
53595: PUSH
53596: LD_VAR 0 1
53600: PPUSH
53601: CALL_OW 310
53605: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53606: LD_VAR 0 1
53610: PPUSH
53611: LD_STRING \
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: PUSH
53641: LD_STRING E
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: LD_VAR 0 3
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PPUSH
53677: CALL_OW 447
// end ;
53681: LD_VAR 0 2
53685: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
53686: LD_INT 0
53688: PPUSH
53689: PPUSH
53690: PPUSH
// tmp := [ ] ;
53691: LD_ADDR_VAR 0 5
53695: PUSH
53696: EMPTY
53697: ST_TO_ADDR
// for i in units do
53698: LD_ADDR_VAR 0 4
53702: PUSH
53703: LD_VAR 0 1
53707: PUSH
53708: FOR_IN
53709: IFFALSE 53747
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
53711: LD_ADDR_VAR 0 5
53715: PUSH
53716: LD_VAR 0 5
53720: PPUSH
53721: LD_VAR 0 5
53725: PUSH
53726: LD_INT 1
53728: PLUS
53729: PPUSH
53730: LD_VAR 0 4
53734: PPUSH
53735: CALL_OW 256
53739: PPUSH
53740: CALL_OW 2
53744: ST_TO_ADDR
53745: GO 53708
53747: POP
53748: POP
// if not tmp then
53749: LD_VAR 0 5
53753: NOT
53754: IFFALSE 53758
// exit ;
53756: GO 53806
// if asc then
53758: LD_VAR 0 2
53762: IFFALSE 53786
// result := SortListByListAsc ( units , tmp ) else
53764: LD_ADDR_VAR 0 3
53768: PUSH
53769: LD_VAR 0 1
53773: PPUSH
53774: LD_VAR 0 5
53778: PPUSH
53779: CALL_OW 76
53783: ST_TO_ADDR
53784: GO 53806
// result := SortListByListDesc ( units , tmp ) ;
53786: LD_ADDR_VAR 0 3
53790: PUSH
53791: LD_VAR 0 1
53795: PPUSH
53796: LD_VAR 0 5
53800: PPUSH
53801: CALL_OW 77
53805: ST_TO_ADDR
// end ;
53806: LD_VAR 0 3
53810: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
53811: LD_INT 0
53813: PPUSH
53814: PPUSH
// task := GetTaskList ( mech ) ;
53815: LD_ADDR_VAR 0 4
53819: PUSH
53820: LD_VAR 0 1
53824: PPUSH
53825: CALL_OW 437
53829: ST_TO_ADDR
// if not task then
53830: LD_VAR 0 4
53834: NOT
53835: IFFALSE 53839
// exit ;
53837: GO 53883
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
53839: LD_ADDR_VAR 0 3
53843: PUSH
53844: LD_VAR 0 4
53848: PUSH
53849: LD_INT 1
53851: ARRAY
53852: PUSH
53853: LD_INT 1
53855: ARRAY
53856: PUSH
53857: LD_STRING r
53859: EQUAL
53860: IFFALSE 53882
53862: PUSH
53863: LD_VAR 0 4
53867: PUSH
53868: LD_INT 1
53870: ARRAY
53871: PUSH
53872: LD_INT 4
53874: ARRAY
53875: PUSH
53876: LD_VAR 0 2
53880: EQUAL
53881: AND
53882: ST_TO_ADDR
// end ;
53883: LD_VAR 0 3
53887: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
53888: LD_INT 0
53890: PPUSH
// SetDir ( unit , d ) ;
53891: LD_VAR 0 1
53895: PPUSH
53896: LD_VAR 0 4
53900: PPUSH
53901: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
53905: LD_ADDR_VAR 0 6
53909: PUSH
53910: LD_VAR 0 1
53914: PPUSH
53915: LD_VAR 0 2
53919: PPUSH
53920: LD_VAR 0 3
53924: PPUSH
53925: LD_VAR 0 5
53929: PPUSH
53930: CALL_OW 48
53934: ST_TO_ADDR
// end ;
53935: LD_VAR 0 6
53939: RET
// export function ToNaturalNumber ( number ) ; begin
53940: LD_INT 0
53942: PPUSH
// result := number div 1 ;
53943: LD_ADDR_VAR 0 2
53947: PUSH
53948: LD_VAR 0 1
53952: PUSH
53953: LD_INT 1
53955: DIV
53956: ST_TO_ADDR
// if number < 0 then
53957: LD_VAR 0 1
53961: PUSH
53962: LD_INT 0
53964: LESS
53965: IFFALSE 53975
// result := 0 ;
53967: LD_ADDR_VAR 0 2
53971: PUSH
53972: LD_INT 0
53974: ST_TO_ADDR
// end ;
53975: LD_VAR 0 2
53979: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
53980: LD_INT 0
53982: PPUSH
53983: PPUSH
53984: PPUSH
// if not buildings then
53985: LD_VAR 0 1
53989: NOT
53990: IFFALSE 53994
// exit ;
53992: GO 54109
// tmp := [ ] ;
53994: LD_ADDR_VAR 0 5
53998: PUSH
53999: EMPTY
54000: ST_TO_ADDR
// for b in buildings do
54001: LD_ADDR_VAR 0 4
54005: PUSH
54006: LD_VAR 0 1
54010: PUSH
54011: FOR_IN
54012: IFFALSE 54050
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
54014: LD_ADDR_VAR 0 5
54018: PUSH
54019: LD_VAR 0 5
54023: PPUSH
54024: LD_VAR 0 5
54028: PUSH
54029: LD_INT 1
54031: PLUS
54032: PPUSH
54033: LD_VAR 0 4
54037: PPUSH
54038: CALL_OW 266
54042: PPUSH
54043: CALL_OW 1
54047: ST_TO_ADDR
54048: GO 54011
54050: POP
54051: POP
// if not tmp then
54052: LD_VAR 0 5
54056: NOT
54057: IFFALSE 54061
// exit ;
54059: GO 54109
// if asc then
54061: LD_VAR 0 2
54065: IFFALSE 54089
// result := SortListByListAsc ( buildings , tmp ) else
54067: LD_ADDR_VAR 0 3
54071: PUSH
54072: LD_VAR 0 1
54076: PPUSH
54077: LD_VAR 0 5
54081: PPUSH
54082: CALL_OW 76
54086: ST_TO_ADDR
54087: GO 54109
// result := SortListByListDesc ( buildings , tmp ) ;
54089: LD_ADDR_VAR 0 3
54093: PUSH
54094: LD_VAR 0 1
54098: PPUSH
54099: LD_VAR 0 5
54103: PPUSH
54104: CALL_OW 77
54108: ST_TO_ADDR
// end ;
54109: LD_VAR 0 3
54113: RET
// export function SortByClass ( units , class ) ; var un ; begin
54114: LD_INT 0
54116: PPUSH
54117: PPUSH
// if not units or not class then
54118: LD_VAR 0 1
54122: NOT
54123: IFTRUE 54132
54125: PUSH
54126: LD_VAR 0 2
54130: NOT
54131: OR
54132: IFFALSE 54136
// exit ;
54134: GO 54231
// result := [ ] ;
54136: LD_ADDR_VAR 0 3
54140: PUSH
54141: EMPTY
54142: ST_TO_ADDR
// for un in units do
54143: LD_ADDR_VAR 0 4
54147: PUSH
54148: LD_VAR 0 1
54152: PUSH
54153: FOR_IN
54154: IFFALSE 54229
// if GetClass ( un ) = class then
54156: LD_VAR 0 4
54160: PPUSH
54161: CALL_OW 257
54165: PUSH
54166: LD_VAR 0 2
54170: EQUAL
54171: IFFALSE 54198
// result := Insert ( result , 1 , un ) else
54173: LD_ADDR_VAR 0 3
54177: PUSH
54178: LD_VAR 0 3
54182: PPUSH
54183: LD_INT 1
54185: PPUSH
54186: LD_VAR 0 4
54190: PPUSH
54191: CALL_OW 2
54195: ST_TO_ADDR
54196: GO 54227
// result := Replace ( result , result + 1 , un ) ;
54198: LD_ADDR_VAR 0 3
54202: PUSH
54203: LD_VAR 0 3
54207: PPUSH
54208: LD_VAR 0 3
54212: PUSH
54213: LD_INT 1
54215: PLUS
54216: PPUSH
54217: LD_VAR 0 4
54221: PPUSH
54222: CALL_OW 1
54226: ST_TO_ADDR
54227: GO 54153
54229: POP
54230: POP
// end ;
54231: LD_VAR 0 3
54235: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
54236: LD_INT 0
54238: PPUSH
54239: PPUSH
54240: PPUSH
54241: PPUSH
54242: PPUSH
54243: PPUSH
54244: PPUSH
// result := [ ] ;
54245: LD_ADDR_VAR 0 4
54249: PUSH
54250: EMPTY
54251: ST_TO_ADDR
// if x - r < 0 then
54252: LD_VAR 0 1
54256: PUSH
54257: LD_VAR 0 3
54261: MINUS
54262: PUSH
54263: LD_INT 0
54265: LESS
54266: IFFALSE 54278
// min_x := 0 else
54268: LD_ADDR_VAR 0 8
54272: PUSH
54273: LD_INT 0
54275: ST_TO_ADDR
54276: GO 54294
// min_x := x - r ;
54278: LD_ADDR_VAR 0 8
54282: PUSH
54283: LD_VAR 0 1
54287: PUSH
54288: LD_VAR 0 3
54292: MINUS
54293: ST_TO_ADDR
// if y - r < 0 then
54294: LD_VAR 0 2
54298: PUSH
54299: LD_VAR 0 3
54303: MINUS
54304: PUSH
54305: LD_INT 0
54307: LESS
54308: IFFALSE 54320
// min_y := 0 else
54310: LD_ADDR_VAR 0 7
54314: PUSH
54315: LD_INT 0
54317: ST_TO_ADDR
54318: GO 54336
// min_y := y - r ;
54320: LD_ADDR_VAR 0 7
54324: PUSH
54325: LD_VAR 0 2
54329: PUSH
54330: LD_VAR 0 3
54334: MINUS
54335: ST_TO_ADDR
// max_x := x + r ;
54336: LD_ADDR_VAR 0 9
54340: PUSH
54341: LD_VAR 0 1
54345: PUSH
54346: LD_VAR 0 3
54350: PLUS
54351: ST_TO_ADDR
// max_y := y + r ;
54352: LD_ADDR_VAR 0 10
54356: PUSH
54357: LD_VAR 0 2
54361: PUSH
54362: LD_VAR 0 3
54366: PLUS
54367: ST_TO_ADDR
// for _x = min_x to max_x do
54368: LD_ADDR_VAR 0 5
54372: PUSH
54373: DOUBLE
54374: LD_VAR 0 8
54378: DEC
54379: ST_TO_ADDR
54380: LD_VAR 0 9
54384: PUSH
54385: FOR_TO
54386: IFFALSE 54487
// for _y = min_y to max_y do
54388: LD_ADDR_VAR 0 6
54392: PUSH
54393: DOUBLE
54394: LD_VAR 0 7
54398: DEC
54399: ST_TO_ADDR
54400: LD_VAR 0 10
54404: PUSH
54405: FOR_TO
54406: IFFALSE 54483
// begin if not ValidHex ( _x , _y ) then
54408: LD_VAR 0 5
54412: PPUSH
54413: LD_VAR 0 6
54417: PPUSH
54418: CALL_OW 488
54422: NOT
54423: IFFALSE 54427
// continue ;
54425: GO 54405
// if GetResourceTypeXY ( _x , _y ) then
54427: LD_VAR 0 5
54431: PPUSH
54432: LD_VAR 0 6
54436: PPUSH
54437: CALL_OW 283
54441: IFFALSE 54481
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
54443: LD_ADDR_VAR 0 4
54447: PUSH
54448: LD_VAR 0 4
54452: PPUSH
54453: LD_VAR 0 4
54457: PUSH
54458: LD_INT 1
54460: PLUS
54461: PPUSH
54462: LD_VAR 0 5
54466: PUSH
54467: LD_VAR 0 6
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PPUSH
54476: CALL_OW 1
54480: ST_TO_ADDR
// end ;
54481: GO 54405
54483: POP
54484: POP
54485: GO 54385
54487: POP
54488: POP
// end ;
54489: LD_VAR 0 4
54493: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
54494: LD_INT 0
54496: PPUSH
54497: PPUSH
54498: PPUSH
54499: PPUSH
54500: PPUSH
54501: PPUSH
54502: PPUSH
54503: PPUSH
// if not units then
54504: LD_VAR 0 1
54508: NOT
54509: IFFALSE 54513
// exit ;
54511: GO 55045
// result := UnitFilter ( units , [ f_ok ] ) ;
54513: LD_ADDR_VAR 0 3
54517: PUSH
54518: LD_VAR 0 1
54522: PPUSH
54523: LD_INT 50
54525: PUSH
54526: EMPTY
54527: LIST
54528: PPUSH
54529: CALL_OW 72
54533: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
54534: LD_ADDR_VAR 0 8
54538: PUSH
54539: LD_VAR 0 1
54543: PUSH
54544: LD_INT 1
54546: ARRAY
54547: PPUSH
54548: CALL_OW 255
54552: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
54553: LD_ADDR_VAR 0 10
54557: PUSH
54558: LD_INT 29
54560: PUSH
54561: LD_INT 91
54563: PUSH
54564: LD_INT 49
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: LIST
54571: ST_TO_ADDR
// if not result then
54572: LD_VAR 0 3
54576: NOT
54577: IFFALSE 54581
// exit ;
54579: GO 55045
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
54581: LD_ADDR_VAR 0 5
54585: PUSH
54586: LD_INT 81
54588: PUSH
54589: LD_VAR 0 8
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PPUSH
54598: CALL_OW 69
54602: ST_TO_ADDR
// for i in result do
54603: LD_ADDR_VAR 0 4
54607: PUSH
54608: LD_VAR 0 3
54612: PUSH
54613: FOR_IN
54614: IFFALSE 55043
// begin tag := GetTag ( i ) + 1 ;
54616: LD_ADDR_VAR 0 9
54620: PUSH
54621: LD_VAR 0 4
54625: PPUSH
54626: CALL_OW 110
54630: PUSH
54631: LD_INT 1
54633: PLUS
54634: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
54635: LD_ADDR_VAR 0 7
54639: PUSH
54640: LD_VAR 0 4
54644: PPUSH
54645: CALL_OW 250
54649: PPUSH
54650: LD_VAR 0 4
54654: PPUSH
54655: CALL_OW 251
54659: PPUSH
54660: LD_INT 4
54662: PPUSH
54663: CALL 54236 0 3
54667: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
54668: LD_VAR 0 4
54672: PPUSH
54673: CALL_OW 247
54677: PUSH
54678: LD_INT 2
54680: EQUAL
54681: IFFALSE 54693
54683: PUSH
54684: LD_VAR 0 7
54688: PUSH
54689: LD_INT 2
54691: GREATER
54692: AND
54693: IFFALSE 54713
54695: PUSH
54696: LD_VAR 0 4
54700: PPUSH
54701: CALL_OW 264
54705: PUSH
54706: LD_VAR 0 10
54710: IN
54711: NOT
54712: AND
54713: IFFALSE 54752
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
54715: LD_VAR 0 4
54719: PPUSH
54720: LD_VAR 0 7
54724: PUSH
54725: LD_INT 1
54727: ARRAY
54728: PUSH
54729: LD_INT 1
54731: ARRAY
54732: PPUSH
54733: LD_VAR 0 7
54737: PUSH
54738: LD_INT 1
54740: ARRAY
54741: PUSH
54742: LD_INT 2
54744: ARRAY
54745: PPUSH
54746: CALL_OW 116
54750: GO 55041
// if path > tag then
54752: LD_VAR 0 2
54756: PUSH
54757: LD_VAR 0 9
54761: GREATER
54762: IFFALSE 54970
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
54764: LD_ADDR_VAR 0 6
54768: PUSH
54769: LD_VAR 0 5
54773: PPUSH
54774: LD_INT 91
54776: PUSH
54777: LD_VAR 0 4
54781: PUSH
54782: LD_INT 8
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: LIST
54789: PPUSH
54790: CALL_OW 72
54794: ST_TO_ADDR
// if nearEnemy then
54795: LD_VAR 0 6
54799: IFFALSE 54868
// begin if GetWeapon ( i ) = ru_time_lapser then
54801: LD_VAR 0 4
54805: PPUSH
54806: CALL_OW 264
54810: PUSH
54811: LD_INT 49
54813: EQUAL
54814: IFFALSE 54842
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
54816: LD_VAR 0 4
54820: PPUSH
54821: LD_VAR 0 6
54825: PPUSH
54826: LD_VAR 0 4
54830: PPUSH
54831: CALL_OW 74
54835: PPUSH
54836: CALL_OW 112
54840: GO 54866
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
54842: LD_VAR 0 4
54846: PPUSH
54847: LD_VAR 0 6
54851: PPUSH
54852: LD_VAR 0 4
54856: PPUSH
54857: CALL_OW 74
54861: PPUSH
54862: CALL 56126 0 2
// end else
54866: GO 54968
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
54868: LD_VAR 0 4
54872: PPUSH
54873: LD_VAR 0 2
54877: PUSH
54878: LD_VAR 0 9
54882: ARRAY
54883: PUSH
54884: LD_INT 1
54886: ARRAY
54887: PPUSH
54888: LD_VAR 0 2
54892: PUSH
54893: LD_VAR 0 9
54897: ARRAY
54898: PUSH
54899: LD_INT 2
54901: ARRAY
54902: PPUSH
54903: CALL_OW 297
54907: PUSH
54908: LD_INT 6
54910: GREATER
54911: IFFALSE 54954
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
54913: LD_VAR 0 4
54917: PPUSH
54918: LD_VAR 0 2
54922: PUSH
54923: LD_VAR 0 9
54927: ARRAY
54928: PUSH
54929: LD_INT 1
54931: ARRAY
54932: PPUSH
54933: LD_VAR 0 2
54937: PUSH
54938: LD_VAR 0 9
54942: ARRAY
54943: PUSH
54944: LD_INT 2
54946: ARRAY
54947: PPUSH
54948: CALL_OW 114
54952: GO 54968
// SetTag ( i , tag ) ;
54954: LD_VAR 0 4
54958: PPUSH
54959: LD_VAR 0 9
54963: PPUSH
54964: CALL_OW 109
// end else
54968: GO 55041
// if enemy then
54970: LD_VAR 0 5
54974: IFFALSE 55041
// begin if GetWeapon ( i ) = ru_time_lapser then
54976: LD_VAR 0 4
54980: PPUSH
54981: CALL_OW 264
54985: PUSH
54986: LD_INT 49
54988: EQUAL
54989: IFFALSE 55017
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
54991: LD_VAR 0 4
54995: PPUSH
54996: LD_VAR 0 5
55000: PPUSH
55001: LD_VAR 0 4
55005: PPUSH
55006: CALL_OW 74
55010: PPUSH
55011: CALL_OW 112
55015: GO 55041
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
55017: LD_VAR 0 4
55021: PPUSH
55022: LD_VAR 0 5
55026: PPUSH
55027: LD_VAR 0 4
55031: PPUSH
55032: CALL_OW 74
55036: PPUSH
55037: CALL 56126 0 2
// end ; end ;
55041: GO 54613
55043: POP
55044: POP
// end ;
55045: LD_VAR 0 3
55049: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
55050: LD_INT 0
55052: PPUSH
55053: PPUSH
55054: PPUSH
// if not unit or IsInUnit ( unit ) then
55055: LD_VAR 0 1
55059: NOT
55060: IFTRUE 55073
55062: PUSH
55063: LD_VAR 0 1
55067: PPUSH
55068: CALL_OW 310
55072: OR
55073: IFFALSE 55077
// exit ;
55075: GO 55168
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
55077: LD_ADDR_VAR 0 4
55081: PUSH
55082: LD_VAR 0 1
55086: PPUSH
55087: CALL_OW 250
55091: PPUSH
55092: LD_VAR 0 2
55096: PPUSH
55097: LD_INT 1
55099: PPUSH
55100: CALL_OW 272
55104: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
55105: LD_ADDR_VAR 0 5
55109: PUSH
55110: LD_VAR 0 1
55114: PPUSH
55115: CALL_OW 251
55119: PPUSH
55120: LD_VAR 0 2
55124: PPUSH
55125: LD_INT 1
55127: PPUSH
55128: CALL_OW 273
55132: ST_TO_ADDR
// if ValidHex ( x , y ) then
55133: LD_VAR 0 4
55137: PPUSH
55138: LD_VAR 0 5
55142: PPUSH
55143: CALL_OW 488
55147: IFFALSE 55168
// ComTurnXY ( unit , x , y ) ;
55149: LD_VAR 0 1
55153: PPUSH
55154: LD_VAR 0 4
55158: PPUSH
55159: LD_VAR 0 5
55163: PPUSH
55164: CALL_OW 118
// end ;
55168: LD_VAR 0 3
55172: RET
// export function SeeUnits ( side , units ) ; var i ; begin
55173: LD_INT 0
55175: PPUSH
55176: PPUSH
// result := false ;
55177: LD_ADDR_VAR 0 3
55181: PUSH
55182: LD_INT 0
55184: ST_TO_ADDR
// if not units then
55185: LD_VAR 0 2
55189: NOT
55190: IFFALSE 55194
// exit ;
55192: GO 55239
// for i in units do
55194: LD_ADDR_VAR 0 4
55198: PUSH
55199: LD_VAR 0 2
55203: PUSH
55204: FOR_IN
55205: IFFALSE 55237
// if See ( side , i ) then
55207: LD_VAR 0 1
55211: PPUSH
55212: LD_VAR 0 4
55216: PPUSH
55217: CALL_OW 292
55221: IFFALSE 55235
// begin result := true ;
55223: LD_ADDR_VAR 0 3
55227: PUSH
55228: LD_INT 1
55230: ST_TO_ADDR
// exit ;
55231: POP
55232: POP
55233: GO 55239
// end ;
55235: GO 55204
55237: POP
55238: POP
// end ;
55239: LD_VAR 0 3
55243: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
55244: LD_INT 0
55246: PPUSH
55247: PPUSH
55248: PPUSH
55249: PPUSH
// if not unit or not points then
55250: LD_VAR 0 1
55254: NOT
55255: IFTRUE 55264
55257: PUSH
55258: LD_VAR 0 2
55262: NOT
55263: OR
55264: IFFALSE 55268
// exit ;
55266: GO 55358
// dist := 99999 ;
55268: LD_ADDR_VAR 0 5
55272: PUSH
55273: LD_INT 99999
55275: ST_TO_ADDR
// for i in points do
55276: LD_ADDR_VAR 0 4
55280: PUSH
55281: LD_VAR 0 2
55285: PUSH
55286: FOR_IN
55287: IFFALSE 55356
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
55289: LD_ADDR_VAR 0 6
55293: PUSH
55294: LD_VAR 0 1
55298: PPUSH
55299: LD_VAR 0 4
55303: PUSH
55304: LD_INT 1
55306: ARRAY
55307: PPUSH
55308: LD_VAR 0 4
55312: PUSH
55313: LD_INT 2
55315: ARRAY
55316: PPUSH
55317: CALL_OW 297
55321: ST_TO_ADDR
// if tmpDist < dist then
55322: LD_VAR 0 6
55326: PUSH
55327: LD_VAR 0 5
55331: LESS
55332: IFFALSE 55354
// begin result := i ;
55334: LD_ADDR_VAR 0 3
55338: PUSH
55339: LD_VAR 0 4
55343: ST_TO_ADDR
// dist := tmpDist ;
55344: LD_ADDR_VAR 0 5
55348: PUSH
55349: LD_VAR 0 6
55353: ST_TO_ADDR
// end ; end ;
55354: GO 55286
55356: POP
55357: POP
// end ;
55358: LD_VAR 0 3
55362: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
55363: LD_INT 0
55365: PPUSH
// uc_side := side ;
55366: LD_ADDR_OWVAR 20
55370: PUSH
55371: LD_VAR 0 1
55375: ST_TO_ADDR
// uc_nation := 3 ;
55376: LD_ADDR_OWVAR 21
55380: PUSH
55381: LD_INT 3
55383: ST_TO_ADDR
// vc_chassis := 25 ;
55384: LD_ADDR_OWVAR 37
55388: PUSH
55389: LD_INT 25
55391: ST_TO_ADDR
// vc_engine := engine_siberite ;
55392: LD_ADDR_OWVAR 39
55396: PUSH
55397: LD_INT 3
55399: ST_TO_ADDR
// vc_control := control_computer ;
55400: LD_ADDR_OWVAR 38
55404: PUSH
55405: LD_INT 3
55407: ST_TO_ADDR
// vc_weapon := 59 ;
55408: LD_ADDR_OWVAR 40
55412: PUSH
55413: LD_INT 59
55415: ST_TO_ADDR
// result := CreateVehicle ;
55416: LD_ADDR_VAR 0 5
55420: PUSH
55421: CALL_OW 45
55425: ST_TO_ADDR
// SetDir ( result , d ) ;
55426: LD_VAR 0 5
55430: PPUSH
55431: LD_VAR 0 4
55435: PPUSH
55436: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
55440: LD_VAR 0 5
55444: PPUSH
55445: LD_VAR 0 2
55449: PPUSH
55450: LD_VAR 0 3
55454: PPUSH
55455: LD_INT 0
55457: PPUSH
55458: CALL_OW 48
// end ;
55462: LD_VAR 0 5
55466: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
55467: LD_INT 0
55469: PPUSH
55470: PPUSH
55471: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
55472: LD_ADDR_VAR 0 2
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
55495: LD_VAR 0 1
55499: NOT
55500: IFTRUE 55533
55502: PUSH
55503: LD_VAR 0 1
55507: PPUSH
55508: CALL_OW 264
55512: PUSH
55513: LD_INT 12
55515: PUSH
55516: LD_INT 51
55518: PUSH
55519: LD_INT 32
55521: PUSH
55522: LD_INT 89
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: IN
55531: NOT
55532: OR
55533: IFFALSE 55537
// exit ;
55535: GO 55635
// for i := 1 to 3 do
55537: LD_ADDR_VAR 0 3
55541: PUSH
55542: DOUBLE
55543: LD_INT 1
55545: DEC
55546: ST_TO_ADDR
55547: LD_INT 3
55549: PUSH
55550: FOR_TO
55551: IFFALSE 55633
// begin tmp := GetCargo ( cargo , i ) ;
55553: LD_ADDR_VAR 0 4
55557: PUSH
55558: LD_VAR 0 1
55562: PPUSH
55563: LD_VAR 0 3
55567: PPUSH
55568: CALL_OW 289
55572: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
55573: LD_ADDR_VAR 0 2
55577: PUSH
55578: LD_VAR 0 2
55582: PPUSH
55583: LD_VAR 0 3
55587: PPUSH
55588: LD_VAR 0 4
55592: PPUSH
55593: CALL_OW 1
55597: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
55598: LD_ADDR_VAR 0 2
55602: PUSH
55603: LD_VAR 0 2
55607: PPUSH
55608: LD_INT 4
55610: PPUSH
55611: LD_VAR 0 2
55615: PUSH
55616: LD_INT 4
55618: ARRAY
55619: PUSH
55620: LD_VAR 0 4
55624: PLUS
55625: PPUSH
55626: CALL_OW 1
55630: ST_TO_ADDR
// end ;
55631: GO 55550
55633: POP
55634: POP
// end ;
55635: LD_VAR 0 2
55639: RET
// export function Length ( array ) ; begin
55640: LD_INT 0
55642: PPUSH
// result := array + 0 ;
55643: LD_ADDR_VAR 0 2
55647: PUSH
55648: LD_VAR 0 1
55652: PUSH
55653: LD_INT 0
55655: PLUS
55656: ST_TO_ADDR
// end ;
55657: LD_VAR 0 2
55661: RET
// export function PrepareArray ( array ) ; begin
55662: LD_INT 0
55664: PPUSH
// result := array diff 0 ;
55665: LD_ADDR_VAR 0 2
55669: PUSH
55670: LD_VAR 0 1
55674: PUSH
55675: LD_INT 0
55677: DIFF
55678: ST_TO_ADDR
// if not result [ 1 ] then
55679: LD_VAR 0 2
55683: PUSH
55684: LD_INT 1
55686: ARRAY
55687: NOT
55688: IFFALSE 55708
// result := Delete ( result , 1 ) ;
55690: LD_ADDR_VAR 0 2
55694: PUSH
55695: LD_VAR 0 2
55699: PPUSH
55700: LD_INT 1
55702: PPUSH
55703: CALL_OW 3
55707: ST_TO_ADDR
// end ;
55708: LD_VAR 0 2
55712: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
55713: LD_INT 0
55715: PPUSH
55716: PPUSH
55717: PPUSH
55718: PPUSH
// sibRocketRange := 25 ;
55719: LD_ADDR_VAR 0 6
55723: PUSH
55724: LD_INT 25
55726: ST_TO_ADDR
// result := false ;
55727: LD_ADDR_VAR 0 4
55731: PUSH
55732: LD_INT 0
55734: ST_TO_ADDR
// for i := 0 to 5 do
55735: LD_ADDR_VAR 0 5
55739: PUSH
55740: DOUBLE
55741: LD_INT 0
55743: DEC
55744: ST_TO_ADDR
55745: LD_INT 5
55747: PUSH
55748: FOR_TO
55749: IFFALSE 55816
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
55751: LD_VAR 0 1
55755: PPUSH
55756: LD_VAR 0 5
55760: PPUSH
55761: LD_VAR 0 6
55765: PPUSH
55766: CALL_OW 272
55770: PPUSH
55771: LD_VAR 0 2
55775: PPUSH
55776: LD_VAR 0 5
55780: PPUSH
55781: LD_VAR 0 6
55785: PPUSH
55786: CALL_OW 273
55790: PPUSH
55791: LD_VAR 0 3
55795: PPUSH
55796: CALL_OW 309
55800: IFFALSE 55814
// begin result := true ;
55802: LD_ADDR_VAR 0 4
55806: PUSH
55807: LD_INT 1
55809: ST_TO_ADDR
// exit ;
55810: POP
55811: POP
55812: GO 55818
// end ;
55814: GO 55748
55816: POP
55817: POP
// end ;
55818: LD_VAR 0 4
55822: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
55823: LD_INT 0
55825: PPUSH
55826: PPUSH
55827: PPUSH
// if btype = b_depot then
55828: LD_VAR 0 2
55832: PUSH
55833: LD_INT 0
55835: EQUAL
55836: IFFALSE 55848
// begin result := true ;
55838: LD_ADDR_VAR 0 3
55842: PUSH
55843: LD_INT 1
55845: ST_TO_ADDR
// exit ;
55846: GO 55968
// end ; pom := GetBase ( depot ) ;
55848: LD_ADDR_VAR 0 4
55852: PUSH
55853: LD_VAR 0 1
55857: PPUSH
55858: CALL_OW 274
55862: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55863: LD_ADDR_VAR 0 5
55867: PUSH
55868: LD_VAR 0 2
55872: PPUSH
55873: LD_VAR 0 1
55877: PPUSH
55878: CALL_OW 248
55882: PPUSH
55883: CALL_OW 450
55887: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
55888: LD_ADDR_VAR 0 3
55892: PUSH
55893: LD_VAR 0 4
55897: PPUSH
55898: LD_INT 1
55900: PPUSH
55901: CALL_OW 275
55905: PUSH
55906: LD_VAR 0 5
55910: PUSH
55911: LD_INT 1
55913: ARRAY
55914: GREATEREQUAL
55915: IFFALSE 55941
55917: PUSH
55918: LD_VAR 0 4
55922: PPUSH
55923: LD_INT 2
55925: PPUSH
55926: CALL_OW 275
55930: PUSH
55931: LD_VAR 0 5
55935: PUSH
55936: LD_INT 2
55938: ARRAY
55939: GREATEREQUAL
55940: AND
55941: IFFALSE 55967
55943: PUSH
55944: LD_VAR 0 4
55948: PPUSH
55949: LD_INT 3
55951: PPUSH
55952: CALL_OW 275
55956: PUSH
55957: LD_VAR 0 5
55961: PUSH
55962: LD_INT 3
55964: ARRAY
55965: GREATEREQUAL
55966: AND
55967: ST_TO_ADDR
// end ;
55968: LD_VAR 0 3
55972: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
55973: LD_INT 0
55975: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
55976: LD_VAR 0 1
55980: PPUSH
55981: LD_VAR 0 2
55985: PPUSH
55986: LD_INT 0
55988: PPUSH
55989: LD_INT 0
55991: PPUSH
55992: LD_INT 1
55994: PPUSH
55995: LD_INT 0
55997: PPUSH
55998: CALL_OW 587
// end ;
56002: LD_VAR 0 3
56006: RET
// export function CenterOnNow ( unit ) ; begin
56007: LD_INT 0
56009: PPUSH
// result := IsInUnit ( unit ) ;
56010: LD_ADDR_VAR 0 2
56014: PUSH
56015: LD_VAR 0 1
56019: PPUSH
56020: CALL_OW 310
56024: ST_TO_ADDR
// if not result then
56025: LD_VAR 0 2
56029: NOT
56030: IFFALSE 56042
// result := unit ;
56032: LD_ADDR_VAR 0 2
56036: PUSH
56037: LD_VAR 0 1
56041: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
56042: LD_VAR 0 1
56046: PPUSH
56047: CALL_OW 87
// end ;
56051: LD_VAR 0 2
56055: RET
// export function ComMoveHex ( unit , hex ) ; begin
56056: LD_INT 0
56058: PPUSH
// if not hex then
56059: LD_VAR 0 2
56063: NOT
56064: IFFALSE 56068
// exit ;
56066: GO 56121
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
56068: LD_VAR 0 2
56072: PUSH
56073: LD_INT 1
56075: ARRAY
56076: PPUSH
56077: LD_VAR 0 2
56081: PUSH
56082: LD_INT 2
56084: ARRAY
56085: PPUSH
56086: CALL_OW 428
56090: IFFALSE 56094
// exit ;
56092: GO 56121
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
56094: LD_VAR 0 1
56098: PPUSH
56099: LD_VAR 0 2
56103: PUSH
56104: LD_INT 1
56106: ARRAY
56107: PPUSH
56108: LD_VAR 0 2
56112: PUSH
56113: LD_INT 2
56115: ARRAY
56116: PPUSH
56117: CALL_OW 111
// end ;
56121: LD_VAR 0 3
56125: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
56126: LD_INT 0
56128: PPUSH
56129: PPUSH
56130: PPUSH
// if not unit or not enemy then
56131: LD_VAR 0 1
56135: NOT
56136: IFTRUE 56145
56138: PUSH
56139: LD_VAR 0 2
56143: NOT
56144: OR
56145: IFFALSE 56149
// exit ;
56147: GO 56275
// x := GetX ( enemy ) ;
56149: LD_ADDR_VAR 0 4
56153: PUSH
56154: LD_VAR 0 2
56158: PPUSH
56159: CALL_OW 250
56163: ST_TO_ADDR
// y := GetY ( enemy ) ;
56164: LD_ADDR_VAR 0 5
56168: PUSH
56169: LD_VAR 0 2
56173: PPUSH
56174: CALL_OW 251
56178: ST_TO_ADDR
// if ValidHex ( x , y ) then
56179: LD_VAR 0 4
56183: PPUSH
56184: LD_VAR 0 5
56188: PPUSH
56189: CALL_OW 488
56193: IFFALSE 56275
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
56195: LD_VAR 0 2
56199: PPUSH
56200: CALL_OW 247
56204: PUSH
56205: LD_INT 3
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: IN
56215: IFTRUE 56238
56217: PUSH
56218: LD_VAR 0 1
56222: PPUSH
56223: CALL_OW 255
56227: PPUSH
56228: LD_VAR 0 2
56232: PPUSH
56233: CALL_OW 292
56237: OR
56238: IFFALSE 56256
// ComAttackUnit ( unit , enemy ) else
56240: LD_VAR 0 1
56244: PPUSH
56245: LD_VAR 0 2
56249: PPUSH
56250: CALL_OW 115
56254: GO 56275
// ComAgressiveMove ( unit , x , y ) ;
56256: LD_VAR 0 1
56260: PPUSH
56261: LD_VAR 0 4
56265: PPUSH
56266: LD_VAR 0 5
56270: PPUSH
56271: CALL_OW 114
// end ;
56275: LD_VAR 0 3
56279: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
56280: LD_INT 0
56282: PPUSH
56283: PPUSH
56284: PPUSH
// list := AreaToList ( area , 0 ) ;
56285: LD_ADDR_VAR 0 5
56289: PUSH
56290: LD_VAR 0 1
56294: PPUSH
56295: LD_INT 0
56297: PPUSH
56298: CALL_OW 517
56302: ST_TO_ADDR
// if not list then
56303: LD_VAR 0 5
56307: NOT
56308: IFFALSE 56312
// exit ;
56310: GO 56442
// if all then
56312: LD_VAR 0 2
56316: IFFALSE 56404
// begin for i := 1 to list [ 1 ] do
56318: LD_ADDR_VAR 0 4
56322: PUSH
56323: DOUBLE
56324: LD_INT 1
56326: DEC
56327: ST_TO_ADDR
56328: LD_VAR 0 5
56332: PUSH
56333: LD_INT 1
56335: ARRAY
56336: PUSH
56337: FOR_TO
56338: IFFALSE 56400
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
56340: LD_ADDR_VAR 0 3
56344: PUSH
56345: LD_VAR 0 3
56349: PPUSH
56350: LD_VAR 0 3
56354: PUSH
56355: LD_INT 1
56357: PLUS
56358: PPUSH
56359: LD_VAR 0 5
56363: PUSH
56364: LD_INT 1
56366: ARRAY
56367: PUSH
56368: LD_VAR 0 4
56372: ARRAY
56373: PUSH
56374: LD_VAR 0 5
56378: PUSH
56379: LD_INT 2
56381: ARRAY
56382: PUSH
56383: LD_VAR 0 4
56387: ARRAY
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PPUSH
56393: CALL_OW 1
56397: ST_TO_ADDR
56398: GO 56337
56400: POP
56401: POP
// exit ;
56402: GO 56442
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
56404: LD_ADDR_VAR 0 3
56408: PUSH
56409: LD_VAR 0 5
56413: PUSH
56414: LD_INT 1
56416: ARRAY
56417: PUSH
56418: LD_INT 1
56420: ARRAY
56421: PUSH
56422: LD_VAR 0 5
56426: PUSH
56427: LD_INT 2
56429: ARRAY
56430: PUSH
56431: LD_INT 1
56433: ARRAY
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: EMPTY
56440: LIST
56441: ST_TO_ADDR
// end ;
56442: LD_VAR 0 3
56446: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
56447: LD_INT 0
56449: PPUSH
56450: PPUSH
// list := AreaToList ( area , 0 ) ;
56451: LD_ADDR_VAR 0 4
56455: PUSH
56456: LD_VAR 0 1
56460: PPUSH
56461: LD_INT 0
56463: PPUSH
56464: CALL_OW 517
56468: ST_TO_ADDR
// if not list then
56469: LD_VAR 0 4
56473: NOT
56474: IFFALSE 56478
// exit ;
56476: GO 56519
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
56478: LD_ADDR_VAR 0 3
56482: PUSH
56483: LD_VAR 0 4
56487: PUSH
56488: LD_INT 1
56490: ARRAY
56491: PUSH
56492: LD_INT 1
56494: ARRAY
56495: PUSH
56496: LD_VAR 0 4
56500: PUSH
56501: LD_INT 2
56503: ARRAY
56504: PUSH
56505: LD_INT 1
56507: ARRAY
56508: PUSH
56509: LD_VAR 0 2
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: LIST
56518: ST_TO_ADDR
// end ;
56519: LD_VAR 0 3
56523: RET
// export function First ( array ) ; begin
56524: LD_INT 0
56526: PPUSH
// if not array then
56527: LD_VAR 0 1
56531: NOT
56532: IFFALSE 56536
// exit ;
56534: GO 56550
// result := array [ 1 ] ;
56536: LD_ADDR_VAR 0 2
56540: PUSH
56541: LD_VAR 0 1
56545: PUSH
56546: LD_INT 1
56548: ARRAY
56549: ST_TO_ADDR
// end ;
56550: LD_VAR 0 2
56554: RET
// export function Last ( array ) ; begin
56555: LD_INT 0
56557: PPUSH
// if not array then
56558: LD_VAR 0 1
56562: NOT
56563: IFFALSE 56567
// exit ;
56565: GO 56583
// result := array [ array ] ;
56567: LD_ADDR_VAR 0 2
56571: PUSH
56572: LD_VAR 0 1
56576: PUSH
56577: LD_VAR 0 1
56581: ARRAY
56582: ST_TO_ADDR
// end ;
56583: LD_VAR 0 2
56587: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
56588: LD_INT 0
56590: PPUSH
56591: PPUSH
// result := [ ] ;
56592: LD_ADDR_VAR 0 5
56596: PUSH
56597: EMPTY
56598: ST_TO_ADDR
// if not array then
56599: LD_VAR 0 1
56603: NOT
56604: IFFALSE 56608
// exit ;
56606: GO 56720
// for i := 1 to array do
56608: LD_ADDR_VAR 0 6
56612: PUSH
56613: DOUBLE
56614: LD_INT 1
56616: DEC
56617: ST_TO_ADDR
56618: LD_VAR 0 1
56622: PUSH
56623: FOR_TO
56624: IFFALSE 56718
// if array [ i ] [ index ] = value then
56626: LD_VAR 0 1
56630: PUSH
56631: LD_VAR 0 6
56635: ARRAY
56636: PUSH
56637: LD_VAR 0 2
56641: ARRAY
56642: PUSH
56643: LD_VAR 0 3
56647: EQUAL
56648: IFFALSE 56716
// begin if indexColumn then
56650: LD_VAR 0 4
56654: IFFALSE 56690
// result := Join ( result , array [ i ] [ indexColumn ] ) else
56656: LD_ADDR_VAR 0 5
56660: PUSH
56661: LD_VAR 0 5
56665: PPUSH
56666: LD_VAR 0 1
56670: PUSH
56671: LD_VAR 0 6
56675: ARRAY
56676: PUSH
56677: LD_VAR 0 4
56681: ARRAY
56682: PPUSH
56683: CALL 51728 0 2
56687: ST_TO_ADDR
56688: GO 56716
// result := Join ( result , array [ i ] ) ;
56690: LD_ADDR_VAR 0 5
56694: PUSH
56695: LD_VAR 0 5
56699: PPUSH
56700: LD_VAR 0 1
56704: PUSH
56705: LD_VAR 0 6
56709: ARRAY
56710: PPUSH
56711: CALL 51728 0 2
56715: ST_TO_ADDR
// end ;
56716: GO 56623
56718: POP
56719: POP
// end ;
56720: LD_VAR 0 5
56724: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
56725: LD_INT 0
56727: PPUSH
// if not vehicles or not parkingPoint then
56728: LD_VAR 0 1
56732: NOT
56733: IFTRUE 56742
56735: PUSH
56736: LD_VAR 0 2
56740: NOT
56741: OR
56742: IFFALSE 56746
// exit ;
56744: GO 56844
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
56746: LD_ADDR_VAR 0 1
56750: PUSH
56751: LD_VAR 0 1
56755: PPUSH
56756: LD_INT 50
56758: PUSH
56759: EMPTY
56760: LIST
56761: PUSH
56762: LD_INT 3
56764: PUSH
56765: LD_INT 92
56767: PUSH
56768: LD_VAR 0 2
56772: PUSH
56773: LD_INT 1
56775: ARRAY
56776: PUSH
56777: LD_VAR 0 2
56781: PUSH
56782: LD_INT 2
56784: ARRAY
56785: PUSH
56786: LD_INT 8
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PPUSH
56803: CALL_OW 72
56807: ST_TO_ADDR
// if not vehicles then
56808: LD_VAR 0 1
56812: NOT
56813: IFFALSE 56817
// exit ;
56815: GO 56844
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
56817: LD_VAR 0 1
56821: PPUSH
56822: LD_VAR 0 2
56826: PUSH
56827: LD_INT 1
56829: ARRAY
56830: PPUSH
56831: LD_VAR 0 2
56835: PUSH
56836: LD_INT 2
56838: ARRAY
56839: PPUSH
56840: CALL_OW 111
// end ;
56844: LD_VAR 0 3
56848: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
56849: LD_INT 0
56851: PPUSH
56852: PPUSH
56853: PPUSH
// if not side or not area then
56854: LD_VAR 0 1
56858: NOT
56859: IFTRUE 56868
56861: PUSH
56862: LD_VAR 0 2
56866: NOT
56867: OR
56868: IFFALSE 56872
// exit ;
56870: GO 56991
// tmp := AreaToList ( area , 0 ) ;
56872: LD_ADDR_VAR 0 5
56876: PUSH
56877: LD_VAR 0 2
56881: PPUSH
56882: LD_INT 0
56884: PPUSH
56885: CALL_OW 517
56889: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
56890: LD_ADDR_VAR 0 4
56894: PUSH
56895: DOUBLE
56896: LD_INT 1
56898: DEC
56899: ST_TO_ADDR
56900: LD_VAR 0 5
56904: PUSH
56905: LD_INT 1
56907: ARRAY
56908: PUSH
56909: FOR_TO
56910: IFFALSE 56989
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
56912: LD_VAR 0 5
56916: PUSH
56917: LD_INT 1
56919: ARRAY
56920: PUSH
56921: LD_VAR 0 4
56925: ARRAY
56926: PPUSH
56927: LD_VAR 0 5
56931: PUSH
56932: LD_INT 2
56934: ARRAY
56935: PUSH
56936: LD_VAR 0 4
56940: ARRAY
56941: PPUSH
56942: CALL_OW 351
56946: IFFALSE 56987
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
56948: LD_VAR 0 5
56952: PUSH
56953: LD_INT 1
56955: ARRAY
56956: PUSH
56957: LD_VAR 0 4
56961: ARRAY
56962: PPUSH
56963: LD_VAR 0 5
56967: PUSH
56968: LD_INT 2
56970: ARRAY
56971: PUSH
56972: LD_VAR 0 4
56976: ARRAY
56977: PPUSH
56978: LD_VAR 0 1
56982: PPUSH
56983: CALL_OW 244
// end ;
56987: GO 56909
56989: POP
56990: POP
// end ;
56991: LD_VAR 0 3
56995: RET
// export function UniqueArray ( array ) ; var i ; begin
56996: LD_INT 0
56998: PPUSH
56999: PPUSH
// result := [ ] ;
57000: LD_ADDR_VAR 0 2
57004: PUSH
57005: EMPTY
57006: ST_TO_ADDR
// if not array then
57007: LD_VAR 0 1
57011: NOT
57012: IFFALSE 57016
// exit ;
57014: GO 57077
// for i := 1 to array do
57016: LD_ADDR_VAR 0 3
57020: PUSH
57021: DOUBLE
57022: LD_INT 1
57024: DEC
57025: ST_TO_ADDR
57026: LD_VAR 0 1
57030: PUSH
57031: FOR_TO
57032: IFFALSE 57075
// if not array [ i ] in result then
57034: LD_VAR 0 1
57038: PUSH
57039: LD_VAR 0 3
57043: ARRAY
57044: PUSH
57045: LD_VAR 0 2
57049: IN
57050: NOT
57051: IFFALSE 57073
// result := Join ( result , i ) ;
57053: LD_ADDR_VAR 0 2
57057: PUSH
57058: LD_VAR 0 2
57062: PPUSH
57063: LD_VAR 0 3
57067: PPUSH
57068: CALL 51728 0 2
57072: ST_TO_ADDR
57073: GO 57031
57075: POP
57076: POP
// end ; end_of_file
57077: LD_VAR 0 2
57081: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
57082: LD_VAR 0 1
57086: PUSH
57087: LD_INT 200
57089: DOUBLE
57090: GREATEREQUAL
57091: IFFALSE 57099
57093: LD_INT 299
57095: DOUBLE
57096: LESSEQUAL
57097: IFTRUE 57101
57099: GO 57133
57101: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
57102: LD_VAR 0 1
57106: PPUSH
57107: LD_VAR 0 2
57111: PPUSH
57112: LD_VAR 0 3
57116: PPUSH
57117: LD_VAR 0 4
57121: PPUSH
57122: LD_VAR 0 5
57126: PPUSH
57127: CALL 57995 0 5
57131: GO 57210
57133: LD_INT 300
57135: DOUBLE
57136: GREATEREQUAL
57137: IFFALSE 57145
57139: LD_INT 399
57141: DOUBLE
57142: LESSEQUAL
57143: IFTRUE 57147
57145: GO 57209
57147: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
57148: LD_VAR 0 1
57152: PPUSH
57153: LD_VAR 0 2
57157: PPUSH
57158: LD_VAR 0 3
57162: PPUSH
57163: LD_VAR 0 4
57167: PPUSH
57168: LD_VAR 0 5
57172: PPUSH
57173: LD_VAR 0 6
57177: PPUSH
57178: LD_VAR 0 7
57182: PPUSH
57183: LD_VAR 0 8
57187: PPUSH
57188: LD_VAR 0 9
57192: PPUSH
57193: LD_VAR 0 10
57197: PPUSH
57198: LD_VAR 0 11
57202: PPUSH
57203: CALL 64423 0 11
57207: GO 57210
57209: POP
// end ;
57210: PPOPN 11
57212: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
57213: LD_VAR 0 1
57217: PPUSH
57218: LD_VAR 0 2
57222: PPUSH
57223: LD_VAR 0 3
57227: PPUSH
57228: LD_VAR 0 4
57232: PPUSH
57233: LD_VAR 0 5
57237: PPUSH
57238: CALL 57295 0 5
// end ; end_of_file
57242: PPOPN 5
57244: END
// export function SOS_UnitDestroyed ( un ) ; begin
57245: LD_INT 0
57247: PPUSH
// ComRadiation ( un ) ;
57248: LD_VAR 0 1
57252: PPUSH
57253: CALL 58415 0 1
// end ;
57257: LD_VAR 0 2
57261: RET
// export function SOS_UnitKamikazed ( un ) ; begin
57262: LD_INT 0
57264: PPUSH
// ComRadiation ( un ) ;
57265: LD_VAR 0 1
57269: PPUSH
57270: CALL 58415 0 1
// end ;
57274: LD_VAR 0 2
57278: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
57279: LD_INT 0
57281: PPUSH
// end ;
57282: LD_VAR 0 4
57286: RET
// export function SOS_Command ( cmd ) ; begin
57287: LD_INT 0
57289: PPUSH
// end ;
57290: LD_VAR 0 2
57294: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
57295: LD_INT 0
57297: PPUSH
// end ;
57298: LD_VAR 0 6
57302: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
57303: LD_INT 0
57305: PPUSH
57306: PPUSH
57307: PPUSH
57308: PPUSH
57309: PPUSH
// if not vehicle or not factory then
57310: LD_VAR 0 1
57314: NOT
57315: IFTRUE 57324
57317: PUSH
57318: LD_VAR 0 2
57322: NOT
57323: OR
57324: IFFALSE 57328
// exit ;
57326: GO 57990
// weapon := GetWeapon ( vehicle ) ;
57328: LD_ADDR_VAR 0 7
57332: PUSH
57333: LD_VAR 0 1
57337: PPUSH
57338: CALL_OW 264
57342: ST_TO_ADDR
// if weapon = ar_miner then
57343: LD_VAR 0 7
57347: PUSH
57348: LD_INT 81
57350: EQUAL
57351: IFFALSE 57408
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
57353: LD_ADDR_EXP 58
57357: PUSH
57358: LD_EXP 58
57362: PPUSH
57363: LD_EXP 58
57367: PUSH
57368: LD_INT 1
57370: PLUS
57371: PPUSH
57372: LD_VAR 0 1
57376: PPUSH
57377: CALL_OW 1
57381: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57382: LD_ADDR_EXP 59
57386: PUSH
57387: LD_EXP 59
57391: PPUSH
57392: LD_EXP 59
57396: PUSH
57397: LD_INT 1
57399: PLUS
57400: PPUSH
57401: EMPTY
57402: PPUSH
57403: CALL_OW 1
57407: ST_TO_ADDR
// end ; if not factoryWaypoints then
57408: LD_EXP 61
57412: NOT
57413: IFFALSE 57417
// exit ;
57415: GO 57990
// for i := 1 to Count ( factoryWaypoints ) do
57417: LD_ADDR_VAR 0 4
57421: PUSH
57422: DOUBLE
57423: LD_INT 1
57425: DEC
57426: ST_TO_ADDR
57427: LD_EXP 61
57431: PPUSH
57432: CALL 15752 0 1
57436: PUSH
57437: FOR_TO
57438: IFFALSE 57988
// if factoryWaypoints [ i ] [ 2 ] = factory then
57440: LD_EXP 61
57444: PUSH
57445: LD_VAR 0 4
57449: ARRAY
57450: PUSH
57451: LD_INT 2
57453: ARRAY
57454: PUSH
57455: LD_VAR 0 2
57459: EQUAL
57460: IFFALSE 57986
// begin if GetControl ( vehicle ) = control_manual then
57462: LD_VAR 0 1
57466: PPUSH
57467: CALL_OW 263
57471: PUSH
57472: LD_INT 1
57474: EQUAL
57475: IFFALSE 57839
// begin driver := IsDrivenBy ( vehicle ) ;
57477: LD_ADDR_VAR 0 5
57481: PUSH
57482: LD_VAR 0 1
57486: PPUSH
57487: CALL_OW 311
57491: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
57492: LD_VAR 0 5
57496: PUSH
57497: LD_EXP 62
57501: IN
57502: IFTRUE 57516
57504: PUSH
57505: LD_VAR 0 1
57509: PUSH
57510: LD_EXP 62
57514: IN
57515: OR
57516: IFFALSE 57522
// exit ;
57518: POP
57519: POP
57520: GO 57990
// if not HasTask ( driver ) then
57522: LD_VAR 0 5
57526: PPUSH
57527: CALL_OW 314
57531: NOT
57532: IFFALSE 57837
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
57534: LD_ADDR_EXP 62
57538: PUSH
57539: LD_EXP 62
57543: PPUSH
57544: LD_VAR 0 5
57548: PPUSH
57549: CALL 51728 0 2
57553: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
57554: LD_ADDR_EXP 62
57558: PUSH
57559: LD_EXP 62
57563: PPUSH
57564: LD_VAR 0 1
57568: PPUSH
57569: CALL 51728 0 2
57573: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57574: LD_ADDR_VAR 0 6
57578: PUSH
57579: LD_EXP 61
57583: PUSH
57584: LD_VAR 0 4
57588: ARRAY
57589: PUSH
57590: LD_INT 3
57592: ARRAY
57593: PPUSH
57594: LD_EXP 61
57598: PUSH
57599: LD_VAR 0 4
57603: ARRAY
57604: PUSH
57605: LD_INT 4
57607: ARRAY
57608: PPUSH
57609: CALL_OW 428
57613: ST_TO_ADDR
// if hex then
57614: LD_VAR 0 6
57618: IFFALSE 57636
// ComMoveUnit ( driver , hex ) else
57620: LD_VAR 0 5
57624: PPUSH
57625: LD_VAR 0 6
57629: PPUSH
57630: CALL_OW 112
57634: GO 57720
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
57636: LD_VAR 0 1
57640: PPUSH
57641: LD_EXP 61
57645: PUSH
57646: LD_VAR 0 4
57650: ARRAY
57651: PUSH
57652: LD_INT 3
57654: ARRAY
57655: PPUSH
57656: LD_EXP 61
57660: PUSH
57661: LD_VAR 0 4
57665: ARRAY
57666: PUSH
57667: LD_INT 4
57669: ARRAY
57670: PPUSH
57671: CALL_OW 297
57675: PUSH
57676: LD_INT 0
57678: GREATER
57679: IFFALSE 57720
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57681: LD_VAR 0 5
57685: PPUSH
57686: LD_EXP 61
57690: PUSH
57691: LD_VAR 0 4
57695: ARRAY
57696: PUSH
57697: LD_INT 3
57699: ARRAY
57700: PPUSH
57701: LD_EXP 61
57705: PUSH
57706: LD_VAR 0 4
57710: ARRAY
57711: PUSH
57712: LD_INT 4
57714: ARRAY
57715: PPUSH
57716: CALL_OW 111
// AddComExitVehicle ( driver ) ;
57720: LD_VAR 0 5
57724: PPUSH
57725: CALL_OW 181
// if Multiplayer then
57729: LD_OWVAR 4
57733: IFFALSE 57782
// begin repeat wait ( 10 ) ;
57735: LD_INT 10
57737: PPUSH
57738: CALL_OW 67
// until not IsInUnit ( driver ) ;
57742: LD_VAR 0 5
57746: PPUSH
57747: CALL_OW 310
57751: NOT
57752: IFFALSE 57735
// if not HasTask ( driver ) then
57754: LD_VAR 0 5
57758: PPUSH
57759: CALL_OW 314
57763: NOT
57764: IFFALSE 57780
// ComEnterUnit ( driver , factory ) ;
57766: LD_VAR 0 5
57770: PPUSH
57771: LD_VAR 0 2
57775: PPUSH
57776: CALL_OW 120
// end else
57780: GO 57796
// AddComEnterUnit ( driver , factory ) ;
57782: LD_VAR 0 5
57786: PPUSH
57787: LD_VAR 0 2
57791: PPUSH
57792: CALL_OW 180
// wait ( 0 0$1 ) ;
57796: LD_INT 35
57798: PPUSH
57799: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
57803: LD_ADDR_EXP 62
57807: PUSH
57808: LD_EXP 62
57812: PUSH
57813: LD_VAR 0 5
57817: DIFF
57818: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
57819: LD_ADDR_EXP 62
57823: PUSH
57824: LD_EXP 62
57828: PUSH
57829: LD_VAR 0 1
57833: DIFF
57834: ST_TO_ADDR
// break ;
57835: GO 57988
// end ; end else
57837: GO 57986
// if GetControl ( vehicle ) = control_remote then
57839: LD_VAR 0 1
57843: PPUSH
57844: CALL_OW 263
57848: PUSH
57849: LD_INT 2
57851: EQUAL
57852: IFFALSE 57938
// begin wait ( 0 0$2 ) ;
57854: LD_INT 70
57856: PPUSH
57857: CALL_OW 67
// repeat wait ( 10 ) ;
57861: LD_INT 10
57863: PPUSH
57864: CALL_OW 67
// Connect ( vehicle ) ;
57868: LD_VAR 0 1
57872: PPUSH
57873: CALL 22030 0 1
// until IsControledBy ( vehicle ) ;
57877: LD_VAR 0 1
57881: PPUSH
57882: CALL_OW 312
57886: IFFALSE 57861
// wait ( 10 ) ;
57888: LD_INT 10
57890: PPUSH
57891: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57895: LD_VAR 0 1
57899: PPUSH
57900: LD_EXP 61
57904: PUSH
57905: LD_VAR 0 4
57909: ARRAY
57910: PUSH
57911: LD_INT 3
57913: ARRAY
57914: PPUSH
57915: LD_EXP 61
57919: PUSH
57920: LD_VAR 0 4
57924: ARRAY
57925: PUSH
57926: LD_INT 4
57928: ARRAY
57929: PPUSH
57930: CALL_OW 111
// break ;
57934: GO 57988
// end else
57936: GO 57986
// begin wait ( 0 0$3 ) ;
57938: LD_INT 105
57940: PPUSH
57941: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57945: LD_VAR 0 1
57949: PPUSH
57950: LD_EXP 61
57954: PUSH
57955: LD_VAR 0 4
57959: ARRAY
57960: PUSH
57961: LD_INT 3
57963: ARRAY
57964: PPUSH
57965: LD_EXP 61
57969: PUSH
57970: LD_VAR 0 4
57974: ARRAY
57975: PUSH
57976: LD_INT 4
57978: ARRAY
57979: PPUSH
57980: CALL_OW 111
// break ;
57984: GO 57988
// end ; end ;
57986: GO 57437
57988: POP
57989: POP
// end ;
57990: LD_VAR 0 3
57994: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57995: LD_INT 0
57997: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57998: LD_VAR 0 1
58002: PUSH
58003: LD_INT 250
58005: EQUAL
58006: IFFALSE 58023
58008: PUSH
58009: LD_VAR 0 2
58013: PPUSH
58014: CALL_OW 264
58018: PUSH
58019: LD_INT 81
58021: EQUAL
58022: AND
58023: IFFALSE 58044
// MinerPlaceMine ( unit , x , y ) ;
58025: LD_VAR 0 2
58029: PPUSH
58030: LD_VAR 0 4
58034: PPUSH
58035: LD_VAR 0 5
58039: PPUSH
58040: CALL 61390 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
58044: LD_VAR 0 1
58048: PUSH
58049: LD_INT 251
58051: EQUAL
58052: IFFALSE 58069
58054: PUSH
58055: LD_VAR 0 2
58059: PPUSH
58060: CALL_OW 264
58064: PUSH
58065: LD_INT 81
58067: EQUAL
58068: AND
58069: IFFALSE 58090
// MinerDetonateMine ( unit , x , y ) ;
58071: LD_VAR 0 2
58075: PPUSH
58076: LD_VAR 0 4
58080: PPUSH
58081: LD_VAR 0 5
58085: PPUSH
58086: CALL 61797 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
58090: LD_VAR 0 1
58094: PUSH
58095: LD_INT 252
58097: EQUAL
58098: IFFALSE 58115
58100: PUSH
58101: LD_VAR 0 2
58105: PPUSH
58106: CALL_OW 264
58110: PUSH
58111: LD_INT 81
58113: EQUAL
58114: AND
58115: IFFALSE 58136
// MinerCreateMinefield ( unit , x , y ) ;
58117: LD_VAR 0 2
58121: PPUSH
58122: LD_VAR 0 4
58126: PPUSH
58127: LD_VAR 0 5
58131: PPUSH
58132: CALL 62029 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
58136: LD_VAR 0 1
58140: PUSH
58141: LD_INT 253
58143: EQUAL
58144: IFFALSE 58161
58146: PUSH
58147: LD_VAR 0 2
58151: PPUSH
58152: CALL_OW 257
58156: PUSH
58157: LD_INT 5
58159: EQUAL
58160: AND
58161: IFFALSE 58182
// ComBinocular ( unit , x , y ) ;
58163: LD_VAR 0 2
58167: PPUSH
58168: LD_VAR 0 4
58172: PPUSH
58173: LD_VAR 0 5
58177: PPUSH
58178: CALL 62404 0 3
// if selectedUnit then
58182: LD_VAR 0 3
58186: IFFALSE 58246
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
58188: LD_VAR 0 1
58192: PUSH
58193: LD_INT 254
58195: EQUAL
58196: IFFALSE 58213
58198: PUSH
58199: LD_VAR 0 2
58203: PPUSH
58204: CALL_OW 264
58208: PUSH
58209: LD_INT 99
58211: EQUAL
58212: AND
58213: IFFALSE 58230
58215: PUSH
58216: LD_VAR 0 3
58220: PPUSH
58221: CALL_OW 263
58225: PUSH
58226: LD_INT 3
58228: EQUAL
58229: AND
58230: IFFALSE 58246
// HackDestroyVehicle ( unit , selectedUnit ) ;
58232: LD_VAR 0 2
58236: PPUSH
58237: LD_VAR 0 3
58241: PPUSH
58242: CALL 60580 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
58246: LD_VAR 0 1
58250: PUSH
58251: LD_INT 255
58253: EQUAL
58254: IFFALSE 58278
58256: PUSH
58257: LD_VAR 0 2
58261: PPUSH
58262: CALL_OW 264
58266: PUSH
58267: LD_INT 14
58269: PUSH
58270: LD_INT 53
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: IN
58277: AND
58278: IFFALSE 58296
58280: PUSH
58281: LD_VAR 0 4
58285: PPUSH
58286: LD_VAR 0 5
58290: PPUSH
58291: CALL_OW 488
58295: AND
58296: IFFALSE 58320
// CutTreeXYR ( unit , x , y , 12 ) ;
58298: LD_VAR 0 2
58302: PPUSH
58303: LD_VAR 0 4
58307: PPUSH
58308: LD_VAR 0 5
58312: PPUSH
58313: LD_INT 12
58315: PPUSH
58316: CALL 58511 0 4
// if cmd = 256 then
58320: LD_VAR 0 1
58324: PUSH
58325: LD_INT 256
58327: EQUAL
58328: IFFALSE 58349
// SetFactoryWaypoint ( unit , x , y ) ;
58330: LD_VAR 0 2
58334: PPUSH
58335: LD_VAR 0 4
58339: PPUSH
58340: LD_VAR 0 5
58344: PPUSH
58345: CALL 64431 0 3
// if cmd = 257 then
58349: LD_VAR 0 1
58353: PUSH
58354: LD_INT 257
58356: EQUAL
58357: IFFALSE 58378
// SetWarehouseGatheringPoint ( unit , x , y ) ;
58359: LD_VAR 0 2
58363: PPUSH
58364: LD_VAR 0 4
58368: PPUSH
58369: LD_VAR 0 5
58373: PPUSH
58374: CALL 64927 0 3
// if cmd = 258 then
58378: LD_VAR 0 1
58382: PUSH
58383: LD_INT 258
58385: EQUAL
58386: IFFALSE 58410
// BurnTreeXYR ( unit , x , y , 8 ) ;
58388: LD_VAR 0 2
58392: PPUSH
58393: LD_VAR 0 4
58397: PPUSH
58398: LD_VAR 0 5
58402: PPUSH
58403: LD_INT 8
58405: PPUSH
58406: CALL 58933 0 4
// end ;
58410: LD_VAR 0 6
58414: RET
// export function ComRadiation ( un ) ; var eff ; begin
58415: LD_INT 0
58417: PPUSH
58418: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
58419: LD_VAR 0 1
58423: PPUSH
58424: CALL_OW 264
58428: PUSH
58429: LD_INT 91
58431: NONEQUAL
58432: IFFALSE 58436
// exit ;
58434: GO 58506
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58436: LD_INT 68
58438: PPUSH
58439: LD_VAR 0 1
58443: PPUSH
58444: CALL_OW 255
58448: PPUSH
58449: CALL_OW 321
58453: PUSH
58454: LD_INT 2
58456: EQUAL
58457: IFFALSE 58469
// eff := 50 else
58459: LD_ADDR_VAR 0 3
58463: PUSH
58464: LD_INT 50
58466: ST_TO_ADDR
58467: GO 58477
// eff := 25 ;
58469: LD_ADDR_VAR 0 3
58473: PUSH
58474: LD_INT 25
58476: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58477: LD_VAR 0 1
58481: PPUSH
58482: CALL_OW 250
58486: PPUSH
58487: LD_VAR 0 1
58491: PPUSH
58492: CALL_OW 251
58496: PPUSH
58497: LD_VAR 0 3
58501: PPUSH
58502: CALL_OW 495
// end ;
58506: LD_VAR 0 2
58510: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58511: LD_INT 0
58513: PPUSH
58514: PPUSH
58515: PPUSH
58516: PPUSH
58517: PPUSH
58518: PPUSH
58519: PPUSH
58520: PPUSH
58521: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
58522: LD_VAR 0 1
58526: PPUSH
58527: CALL_OW 302
58531: NOT
58532: IFTRUE 58551
58534: PUSH
58535: LD_VAR 0 2
58539: PPUSH
58540: LD_VAR 0 3
58544: PPUSH
58545: CALL_OW 488
58549: NOT
58550: OR
58551: IFTRUE 58560
58553: PUSH
58554: LD_VAR 0 4
58558: NOT
58559: OR
58560: IFFALSE 58564
// exit ;
58562: GO 58928
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
58564: LD_VAR 0 1
58568: PPUSH
58569: CALL_OW 437
58573: PPUSH
58574: CALL 15752 0 1
58578: PUSH
58579: LD_INT 10
58581: GREATER
58582: IFFALSE 58586
// exit ;
58584: GO 58928
// list := [ ] ;
58586: LD_ADDR_VAR 0 13
58590: PUSH
58591: EMPTY
58592: ST_TO_ADDR
// if x - r < 0 then
58593: LD_VAR 0 2
58597: PUSH
58598: LD_VAR 0 4
58602: MINUS
58603: PUSH
58604: LD_INT 0
58606: LESS
58607: IFFALSE 58619
// min_x := 0 else
58609: LD_ADDR_VAR 0 7
58613: PUSH
58614: LD_INT 0
58616: ST_TO_ADDR
58617: GO 58635
// min_x := x - r ;
58619: LD_ADDR_VAR 0 7
58623: PUSH
58624: LD_VAR 0 2
58628: PUSH
58629: LD_VAR 0 4
58633: MINUS
58634: ST_TO_ADDR
// if y - r < 0 then
58635: LD_VAR 0 3
58639: PUSH
58640: LD_VAR 0 4
58644: MINUS
58645: PUSH
58646: LD_INT 0
58648: LESS
58649: IFFALSE 58661
// min_y := 0 else
58651: LD_ADDR_VAR 0 8
58655: PUSH
58656: LD_INT 0
58658: ST_TO_ADDR
58659: GO 58677
// min_y := y - r ;
58661: LD_ADDR_VAR 0 8
58665: PUSH
58666: LD_VAR 0 3
58670: PUSH
58671: LD_VAR 0 4
58675: MINUS
58676: ST_TO_ADDR
// max_x := x + r ;
58677: LD_ADDR_VAR 0 9
58681: PUSH
58682: LD_VAR 0 2
58686: PUSH
58687: LD_VAR 0 4
58691: PLUS
58692: ST_TO_ADDR
// max_y := y + r ;
58693: LD_ADDR_VAR 0 10
58697: PUSH
58698: LD_VAR 0 3
58702: PUSH
58703: LD_VAR 0 4
58707: PLUS
58708: ST_TO_ADDR
// for _x = min_x to max_x do
58709: LD_ADDR_VAR 0 11
58713: PUSH
58714: DOUBLE
58715: LD_VAR 0 7
58719: DEC
58720: ST_TO_ADDR
58721: LD_VAR 0 9
58725: PUSH
58726: FOR_TO
58727: IFFALSE 58846
// for _y = min_y to max_y do
58729: LD_ADDR_VAR 0 12
58733: PUSH
58734: DOUBLE
58735: LD_VAR 0 8
58739: DEC
58740: ST_TO_ADDR
58741: LD_VAR 0 10
58745: PUSH
58746: FOR_TO
58747: IFFALSE 58842
// begin if not ValidHex ( _x , _y ) then
58749: LD_VAR 0 11
58753: PPUSH
58754: LD_VAR 0 12
58758: PPUSH
58759: CALL_OW 488
58763: NOT
58764: IFFALSE 58768
// continue ;
58766: GO 58746
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58768: LD_VAR 0 11
58772: PPUSH
58773: LD_VAR 0 12
58777: PPUSH
58778: CALL_OW 351
58782: IFFALSE 58800
58784: PUSH
58785: LD_VAR 0 11
58789: PPUSH
58790: LD_VAR 0 12
58794: PPUSH
58795: CALL_OW 554
58799: AND
58800: IFFALSE 58840
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58802: LD_ADDR_VAR 0 13
58806: PUSH
58807: LD_VAR 0 13
58811: PPUSH
58812: LD_VAR 0 13
58816: PUSH
58817: LD_INT 1
58819: PLUS
58820: PPUSH
58821: LD_VAR 0 11
58825: PUSH
58826: LD_VAR 0 12
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PPUSH
58835: CALL_OW 2
58839: ST_TO_ADDR
// end ;
58840: GO 58746
58842: POP
58843: POP
58844: GO 58726
58846: POP
58847: POP
// if not list then
58848: LD_VAR 0 13
58852: NOT
58853: IFFALSE 58857
// exit ;
58855: GO 58928
// for i in list do
58857: LD_ADDR_VAR 0 6
58861: PUSH
58862: LD_VAR 0 13
58866: PUSH
58867: FOR_IN
58868: IFFALSE 58926
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58870: LD_VAR 0 1
58874: PPUSH
58875: LD_STRING M
58877: PUSH
58878: LD_VAR 0 6
58882: PUSH
58883: LD_INT 1
58885: ARRAY
58886: PUSH
58887: LD_VAR 0 6
58891: PUSH
58892: LD_INT 2
58894: ARRAY
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: PUSH
58917: EMPTY
58918: LIST
58919: PPUSH
58920: CALL_OW 447
58924: GO 58867
58926: POP
58927: POP
// end ;
58928: LD_VAR 0 5
58932: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
58933: LD_INT 0
58935: PPUSH
58936: PPUSH
58937: PPUSH
58938: PPUSH
58939: PPUSH
58940: PPUSH
58941: PPUSH
58942: PPUSH
58943: PPUSH
58944: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
58945: LD_VAR 0 1
58949: PPUSH
58950: CALL_OW 302
58954: NOT
58955: IFTRUE 58974
58957: PUSH
58958: LD_VAR 0 2
58962: PPUSH
58963: LD_VAR 0 3
58967: PPUSH
58968: CALL_OW 488
58972: NOT
58973: OR
58974: IFTRUE 58983
58976: PUSH
58977: LD_VAR 0 4
58981: NOT
58982: OR
58983: IFFALSE 58987
// exit ;
58985: GO 59526
// if Count ( GetTaskList ( flame ) ) > 10 then
58987: LD_VAR 0 1
58991: PPUSH
58992: CALL_OW 437
58996: PPUSH
58997: CALL 15752 0 1
59001: PUSH
59002: LD_INT 10
59004: GREATER
59005: IFFALSE 59009
// exit ;
59007: GO 59526
// list := [ ] ;
59009: LD_ADDR_VAR 0 13
59013: PUSH
59014: EMPTY
59015: ST_TO_ADDR
// if x - r < 0 then
59016: LD_VAR 0 2
59020: PUSH
59021: LD_VAR 0 4
59025: MINUS
59026: PUSH
59027: LD_INT 0
59029: LESS
59030: IFFALSE 59042
// min_x := 0 else
59032: LD_ADDR_VAR 0 7
59036: PUSH
59037: LD_INT 0
59039: ST_TO_ADDR
59040: GO 59058
// min_x := x - r ;
59042: LD_ADDR_VAR 0 7
59046: PUSH
59047: LD_VAR 0 2
59051: PUSH
59052: LD_VAR 0 4
59056: MINUS
59057: ST_TO_ADDR
// if y - r < 0 then
59058: LD_VAR 0 3
59062: PUSH
59063: LD_VAR 0 4
59067: MINUS
59068: PUSH
59069: LD_INT 0
59071: LESS
59072: IFFALSE 59084
// min_y := 0 else
59074: LD_ADDR_VAR 0 8
59078: PUSH
59079: LD_INT 0
59081: ST_TO_ADDR
59082: GO 59100
// min_y := y - r ;
59084: LD_ADDR_VAR 0 8
59088: PUSH
59089: LD_VAR 0 3
59093: PUSH
59094: LD_VAR 0 4
59098: MINUS
59099: ST_TO_ADDR
// max_x := x + r ;
59100: LD_ADDR_VAR 0 9
59104: PUSH
59105: LD_VAR 0 2
59109: PUSH
59110: LD_VAR 0 4
59114: PLUS
59115: ST_TO_ADDR
// max_y := y + r ;
59116: LD_ADDR_VAR 0 10
59120: PUSH
59121: LD_VAR 0 3
59125: PUSH
59126: LD_VAR 0 4
59130: PLUS
59131: ST_TO_ADDR
// for _x = min_x to max_x do
59132: LD_ADDR_VAR 0 11
59136: PUSH
59137: DOUBLE
59138: LD_VAR 0 7
59142: DEC
59143: ST_TO_ADDR
59144: LD_VAR 0 9
59148: PUSH
59149: FOR_TO
59150: IFFALSE 59269
// for _y = min_y to max_y do
59152: LD_ADDR_VAR 0 12
59156: PUSH
59157: DOUBLE
59158: LD_VAR 0 8
59162: DEC
59163: ST_TO_ADDR
59164: LD_VAR 0 10
59168: PUSH
59169: FOR_TO
59170: IFFALSE 59265
// begin if not ValidHex ( _x , _y ) then
59172: LD_VAR 0 11
59176: PPUSH
59177: LD_VAR 0 12
59181: PPUSH
59182: CALL_OW 488
59186: NOT
59187: IFFALSE 59191
// continue ;
59189: GO 59169
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59191: LD_VAR 0 11
59195: PPUSH
59196: LD_VAR 0 12
59200: PPUSH
59201: CALL_OW 351
59205: IFFALSE 59223
59207: PUSH
59208: LD_VAR 0 11
59212: PPUSH
59213: LD_VAR 0 12
59217: PPUSH
59218: CALL_OW 554
59222: AND
59223: IFFALSE 59263
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59225: LD_ADDR_VAR 0 13
59229: PUSH
59230: LD_VAR 0 13
59234: PPUSH
59235: LD_VAR 0 13
59239: PUSH
59240: LD_INT 1
59242: PLUS
59243: PPUSH
59244: LD_VAR 0 11
59248: PUSH
59249: LD_VAR 0 12
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PPUSH
59258: CALL_OW 2
59262: ST_TO_ADDR
// end ;
59263: GO 59169
59265: POP
59266: POP
59267: GO 59149
59269: POP
59270: POP
// if not list then
59271: LD_VAR 0 13
59275: NOT
59276: IFFALSE 59280
// exit ;
59278: GO 59526
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
59280: LD_ADDR_VAR 0 13
59284: PUSH
59285: LD_VAR 0 1
59289: PPUSH
59290: LD_VAR 0 13
59294: PPUSH
59295: LD_INT 1
59297: PPUSH
59298: LD_INT 1
59300: PPUSH
59301: CALL 19158 0 4
59305: ST_TO_ADDR
// ComStop ( flame ) ;
59306: LD_VAR 0 1
59310: PPUSH
59311: CALL_OW 141
// for i in list do
59315: LD_ADDR_VAR 0 6
59319: PUSH
59320: LD_VAR 0 13
59324: PUSH
59325: FOR_IN
59326: IFFALSE 59357
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
59328: LD_VAR 0 1
59332: PPUSH
59333: LD_VAR 0 6
59337: PUSH
59338: LD_INT 1
59340: ARRAY
59341: PPUSH
59342: LD_VAR 0 6
59346: PUSH
59347: LD_INT 2
59349: ARRAY
59350: PPUSH
59351: CALL_OW 176
59355: GO 59325
59357: POP
59358: POP
// repeat wait ( 0 0$1 ) ;
59359: LD_INT 35
59361: PPUSH
59362: CALL_OW 67
// task := GetTaskList ( flame ) ;
59366: LD_ADDR_VAR 0 14
59370: PUSH
59371: LD_VAR 0 1
59375: PPUSH
59376: CALL_OW 437
59380: ST_TO_ADDR
// if not task then
59381: LD_VAR 0 14
59385: NOT
59386: IFFALSE 59390
// exit ;
59388: GO 59526
// if task [ 1 ] [ 1 ] <> | then
59390: LD_VAR 0 14
59394: PUSH
59395: LD_INT 1
59397: ARRAY
59398: PUSH
59399: LD_INT 1
59401: ARRAY
59402: PUSH
59403: LD_STRING |
59405: NONEQUAL
59406: IFFALSE 59410
// exit ;
59408: GO 59526
// _x := task [ 1 ] [ 2 ] ;
59410: LD_ADDR_VAR 0 11
59414: PUSH
59415: LD_VAR 0 14
59419: PUSH
59420: LD_INT 1
59422: ARRAY
59423: PUSH
59424: LD_INT 2
59426: ARRAY
59427: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
59428: LD_ADDR_VAR 0 12
59432: PUSH
59433: LD_VAR 0 14
59437: PUSH
59438: LD_INT 1
59440: ARRAY
59441: PUSH
59442: LD_INT 3
59444: ARRAY
59445: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
59446: LD_VAR 0 11
59450: PPUSH
59451: LD_VAR 0 12
59455: PPUSH
59456: CALL_OW 351
59460: NOT
59461: IFTRUE 59480
59463: PUSH
59464: LD_VAR 0 11
59468: PPUSH
59469: LD_VAR 0 12
59473: PPUSH
59474: CALL_OW 554
59478: NOT
59479: OR
59480: IFFALSE 59514
// begin task := Delete ( task , 1 ) ;
59482: LD_ADDR_VAR 0 14
59486: PUSH
59487: LD_VAR 0 14
59491: PPUSH
59492: LD_INT 1
59494: PPUSH
59495: CALL_OW 3
59499: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
59500: LD_VAR 0 1
59504: PPUSH
59505: LD_VAR 0 14
59509: PPUSH
59510: CALL_OW 446
// end ; until not HasTask ( flame ) ;
59514: LD_VAR 0 1
59518: PPUSH
59519: CALL_OW 314
59523: NOT
59524: IFFALSE 59359
// end ;
59526: LD_VAR 0 5
59530: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59531: LD_EXP 51
59535: NOT
59536: IFFALSE 59586
59538: GO 59540
59540: DISABLE
// begin initHack := true ;
59541: LD_ADDR_EXP 51
59545: PUSH
59546: LD_INT 1
59548: ST_TO_ADDR
// hackTanks := [ ] ;
59549: LD_ADDR_EXP 52
59553: PUSH
59554: EMPTY
59555: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59556: LD_ADDR_EXP 53
59560: PUSH
59561: EMPTY
59562: ST_TO_ADDR
// hackLimit := 3 ;
59563: LD_ADDR_EXP 54
59567: PUSH
59568: LD_INT 3
59570: ST_TO_ADDR
// hackDist := 12 ;
59571: LD_ADDR_EXP 55
59575: PUSH
59576: LD_INT 12
59578: ST_TO_ADDR
// hackCounter := [ ] ;
59579: LD_ADDR_EXP 56
59583: PUSH
59584: EMPTY
59585: ST_TO_ADDR
// end ;
59586: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59587: LD_EXP 51
59591: IFFALSE 59609
59593: PUSH
59594: LD_INT 34
59596: PUSH
59597: LD_INT 99
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PPUSH
59604: CALL_OW 69
59608: AND
59609: IFFALSE 59862
59611: GO 59613
59613: DISABLE
59614: LD_INT 0
59616: PPUSH
59617: PPUSH
// begin enable ;
59618: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59619: LD_ADDR_VAR 0 1
59623: PUSH
59624: LD_INT 34
59626: PUSH
59627: LD_INT 99
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PPUSH
59634: CALL_OW 69
59638: PUSH
59639: FOR_IN
59640: IFFALSE 59860
// begin if not i in hackTanks then
59642: LD_VAR 0 1
59646: PUSH
59647: LD_EXP 52
59651: IN
59652: NOT
59653: IFFALSE 59736
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59655: LD_ADDR_EXP 52
59659: PUSH
59660: LD_EXP 52
59664: PPUSH
59665: LD_EXP 52
59669: PUSH
59670: LD_INT 1
59672: PLUS
59673: PPUSH
59674: LD_VAR 0 1
59678: PPUSH
59679: CALL_OW 1
59683: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59684: LD_ADDR_EXP 53
59688: PUSH
59689: LD_EXP 53
59693: PPUSH
59694: LD_EXP 53
59698: PUSH
59699: LD_INT 1
59701: PLUS
59702: PPUSH
59703: EMPTY
59704: PPUSH
59705: CALL_OW 1
59709: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59710: LD_ADDR_EXP 56
59714: PUSH
59715: LD_EXP 56
59719: PPUSH
59720: LD_EXP 56
59724: PUSH
59725: LD_INT 1
59727: PLUS
59728: PPUSH
59729: EMPTY
59730: PPUSH
59731: CALL_OW 1
59735: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59736: LD_VAR 0 1
59740: PPUSH
59741: CALL_OW 302
59745: NOT
59746: IFFALSE 59759
// begin HackUnlinkAll ( i ) ;
59748: LD_VAR 0 1
59752: PPUSH
59753: CALL 59865 0 1
// continue ;
59757: GO 59639
// end ; HackCheckCapturedStatus ( i ) ;
59759: LD_VAR 0 1
59763: PPUSH
59764: CALL 60310 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59768: LD_ADDR_VAR 0 2
59772: PUSH
59773: LD_INT 81
59775: PUSH
59776: LD_VAR 0 1
59780: PPUSH
59781: CALL_OW 255
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 33
59792: PUSH
59793: LD_INT 3
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 91
59802: PUSH
59803: LD_VAR 0 1
59807: PUSH
59808: LD_EXP 55
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 50
59820: PUSH
59821: EMPTY
59822: LIST
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: PPUSH
59830: CALL_OW 69
59834: ST_TO_ADDR
// if not tmp then
59835: LD_VAR 0 2
59839: NOT
59840: IFFALSE 59844
// continue ;
59842: GO 59639
// HackLink ( i , tmp ) ;
59844: LD_VAR 0 1
59848: PPUSH
59849: LD_VAR 0 2
59853: PPUSH
59854: CALL 60001 0 2
// end ;
59858: GO 59639
59860: POP
59861: POP
// end ;
59862: PPOPN 2
59864: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59865: LD_INT 0
59867: PPUSH
59868: PPUSH
59869: PPUSH
// if not hack in hackTanks then
59870: LD_VAR 0 1
59874: PUSH
59875: LD_EXP 52
59879: IN
59880: NOT
59881: IFFALSE 59885
// exit ;
59883: GO 59996
// index := GetElementIndex ( hackTanks , hack ) ;
59885: LD_ADDR_VAR 0 4
59889: PUSH
59890: LD_EXP 52
59894: PPUSH
59895: LD_VAR 0 1
59899: PPUSH
59900: CALL 18453 0 2
59904: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59905: LD_EXP 53
59909: PUSH
59910: LD_VAR 0 4
59914: ARRAY
59915: IFFALSE 59996
// begin for i in hackTanksCaptured [ index ] do
59917: LD_ADDR_VAR 0 3
59921: PUSH
59922: LD_EXP 53
59926: PUSH
59927: LD_VAR 0 4
59931: ARRAY
59932: PUSH
59933: FOR_IN
59934: IFFALSE 59960
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59936: LD_VAR 0 3
59940: PUSH
59941: LD_INT 1
59943: ARRAY
59944: PPUSH
59945: LD_VAR 0 3
59949: PUSH
59950: LD_INT 2
59952: ARRAY
59953: PPUSH
59954: CALL_OW 235
59958: GO 59933
59960: POP
59961: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59962: LD_ADDR_EXP 53
59966: PUSH
59967: LD_EXP 53
59971: PPUSH
59972: LD_VAR 0 4
59976: PPUSH
59977: EMPTY
59978: PPUSH
59979: CALL_OW 1
59983: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59984: LD_VAR 0 1
59988: PPUSH
59989: LD_INT 0
59991: PPUSH
59992: CALL_OW 505
// end ; end ;
59996: LD_VAR 0 2
60000: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
60001: LD_INT 0
60003: PPUSH
60004: PPUSH
60005: PPUSH
// if not hack in hackTanks or not vehicles then
60006: LD_VAR 0 1
60010: PUSH
60011: LD_EXP 52
60015: IN
60016: NOT
60017: IFTRUE 60026
60019: PUSH
60020: LD_VAR 0 2
60024: NOT
60025: OR
60026: IFFALSE 60030
// exit ;
60028: GO 60305
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
60030: LD_ADDR_VAR 0 2
60034: PUSH
60035: LD_VAR 0 1
60039: PPUSH
60040: LD_VAR 0 2
60044: PPUSH
60045: LD_INT 1
60047: PPUSH
60048: LD_INT 1
60050: PPUSH
60051: CALL 19105 0 4
60055: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
60056: LD_ADDR_VAR 0 5
60060: PUSH
60061: LD_EXP 52
60065: PPUSH
60066: LD_VAR 0 1
60070: PPUSH
60071: CALL 18453 0 2
60075: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
60076: LD_EXP 53
60080: PUSH
60081: LD_VAR 0 5
60085: ARRAY
60086: PUSH
60087: LD_EXP 54
60091: LESS
60092: IFFALSE 60281
// begin for i := 1 to vehicles do
60094: LD_ADDR_VAR 0 4
60098: PUSH
60099: DOUBLE
60100: LD_INT 1
60102: DEC
60103: ST_TO_ADDR
60104: LD_VAR 0 2
60108: PUSH
60109: FOR_TO
60110: IFFALSE 60279
// begin if hackTanksCaptured [ index ] = hackLimit then
60112: LD_EXP 53
60116: PUSH
60117: LD_VAR 0 5
60121: ARRAY
60122: PUSH
60123: LD_EXP 54
60127: EQUAL
60128: IFFALSE 60132
// break ;
60130: GO 60279
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
60132: LD_ADDR_EXP 56
60136: PUSH
60137: LD_EXP 56
60141: PPUSH
60142: LD_VAR 0 5
60146: PPUSH
60147: LD_EXP 56
60151: PUSH
60152: LD_VAR 0 5
60156: ARRAY
60157: PUSH
60158: LD_INT 1
60160: PLUS
60161: PPUSH
60162: CALL_OW 1
60166: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
60167: LD_ADDR_EXP 53
60171: PUSH
60172: LD_EXP 53
60176: PPUSH
60177: LD_VAR 0 5
60181: PUSH
60182: LD_EXP 53
60186: PUSH
60187: LD_VAR 0 5
60191: ARRAY
60192: PUSH
60193: LD_INT 1
60195: PLUS
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PPUSH
60201: LD_VAR 0 2
60205: PUSH
60206: LD_VAR 0 4
60210: ARRAY
60211: PUSH
60212: LD_VAR 0 2
60216: PUSH
60217: LD_VAR 0 4
60221: ARRAY
60222: PPUSH
60223: CALL_OW 255
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PPUSH
60232: CALL 18670 0 3
60236: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
60237: LD_VAR 0 2
60241: PUSH
60242: LD_VAR 0 4
60246: ARRAY
60247: PPUSH
60248: LD_VAR 0 1
60252: PPUSH
60253: CALL_OW 255
60257: PPUSH
60258: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
60262: LD_VAR 0 2
60266: PUSH
60267: LD_VAR 0 4
60271: ARRAY
60272: PPUSH
60273: CALL_OW 141
// end ;
60277: GO 60109
60279: POP
60280: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60281: LD_VAR 0 1
60285: PPUSH
60286: LD_EXP 53
60290: PUSH
60291: LD_VAR 0 5
60295: ARRAY
60296: PUSH
60297: LD_INT 0
60299: PLUS
60300: PPUSH
60301: CALL_OW 505
// end ;
60305: LD_VAR 0 3
60309: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60310: LD_INT 0
60312: PPUSH
60313: PPUSH
60314: PPUSH
60315: PPUSH
// if not hack in hackTanks then
60316: LD_VAR 0 1
60320: PUSH
60321: LD_EXP 52
60325: IN
60326: NOT
60327: IFFALSE 60331
// exit ;
60329: GO 60575
// index := GetElementIndex ( hackTanks , hack ) ;
60331: LD_ADDR_VAR 0 4
60335: PUSH
60336: LD_EXP 52
60340: PPUSH
60341: LD_VAR 0 1
60345: PPUSH
60346: CALL 18453 0 2
60350: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60351: LD_ADDR_VAR 0 3
60355: PUSH
60356: DOUBLE
60357: LD_EXP 53
60361: PUSH
60362: LD_VAR 0 4
60366: ARRAY
60367: INC
60368: ST_TO_ADDR
60369: LD_INT 1
60371: PUSH
60372: FOR_DOWNTO
60373: IFFALSE 60549
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60375: LD_ADDR_VAR 0 5
60379: PUSH
60380: LD_EXP 53
60384: PUSH
60385: LD_VAR 0 4
60389: ARRAY
60390: PUSH
60391: LD_VAR 0 3
60395: ARRAY
60396: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60397: LD_VAR 0 5
60401: PUSH
60402: LD_INT 1
60404: ARRAY
60405: PPUSH
60406: CALL_OW 302
60410: NOT
60411: IFTRUE 60439
60413: PUSH
60414: LD_VAR 0 5
60418: PUSH
60419: LD_INT 1
60421: ARRAY
60422: PPUSH
60423: CALL_OW 255
60427: PUSH
60428: LD_VAR 0 1
60432: PPUSH
60433: CALL_OW 255
60437: NONEQUAL
60438: OR
60439: IFFALSE 60547
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60441: LD_VAR 0 5
60445: PUSH
60446: LD_INT 1
60448: ARRAY
60449: PPUSH
60450: CALL_OW 305
60454: IFFALSE 60482
60456: PUSH
60457: LD_VAR 0 5
60461: PUSH
60462: LD_INT 1
60464: ARRAY
60465: PPUSH
60466: CALL_OW 255
60470: PUSH
60471: LD_VAR 0 1
60475: PPUSH
60476: CALL_OW 255
60480: EQUAL
60481: AND
60482: IFFALSE 60506
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60484: LD_VAR 0 5
60488: PUSH
60489: LD_INT 1
60491: ARRAY
60492: PPUSH
60493: LD_VAR 0 5
60497: PUSH
60498: LD_INT 2
60500: ARRAY
60501: PPUSH
60502: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60506: LD_ADDR_EXP 53
60510: PUSH
60511: LD_EXP 53
60515: PPUSH
60516: LD_VAR 0 4
60520: PPUSH
60521: LD_EXP 53
60525: PUSH
60526: LD_VAR 0 4
60530: ARRAY
60531: PPUSH
60532: LD_VAR 0 3
60536: PPUSH
60537: CALL_OW 3
60541: PPUSH
60542: CALL_OW 1
60546: ST_TO_ADDR
// end ; end ;
60547: GO 60372
60549: POP
60550: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60551: LD_VAR 0 1
60555: PPUSH
60556: LD_EXP 53
60560: PUSH
60561: LD_VAR 0 4
60565: ARRAY
60566: PUSH
60567: LD_INT 0
60569: PLUS
60570: PPUSH
60571: CALL_OW 505
// end ;
60575: LD_VAR 0 2
60579: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60580: LD_INT 0
60582: PPUSH
60583: PPUSH
60584: PPUSH
60585: PPUSH
// if not hack in hackTanks then
60586: LD_VAR 0 1
60590: PUSH
60591: LD_EXP 52
60595: IN
60596: NOT
60597: IFFALSE 60601
// exit ;
60599: GO 60686
// index := GetElementIndex ( hackTanks , hack ) ;
60601: LD_ADDR_VAR 0 5
60605: PUSH
60606: LD_EXP 52
60610: PPUSH
60611: LD_VAR 0 1
60615: PPUSH
60616: CALL 18453 0 2
60620: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60621: LD_ADDR_VAR 0 4
60625: PUSH
60626: DOUBLE
60627: LD_INT 1
60629: DEC
60630: ST_TO_ADDR
60631: LD_EXP 53
60635: PUSH
60636: LD_VAR 0 5
60640: ARRAY
60641: PUSH
60642: FOR_TO
60643: IFFALSE 60684
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60645: LD_EXP 53
60649: PUSH
60650: LD_VAR 0 5
60654: ARRAY
60655: PUSH
60656: LD_VAR 0 4
60660: ARRAY
60661: PUSH
60662: LD_INT 1
60664: ARRAY
60665: PUSH
60666: LD_VAR 0 2
60670: EQUAL
60671: IFFALSE 60682
// KillUnit ( vehicle ) ;
60673: LD_VAR 0 2
60677: PPUSH
60678: CALL_OW 66
60682: GO 60642
60684: POP
60685: POP
// end ;
60686: LD_VAR 0 3
60690: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
60691: LD_EXP 57
60695: NOT
60696: IFFALSE 60829
60698: GO 60700
60700: DISABLE
60701: LD_INT 0
60703: PPUSH
// begin initMiner := true ;
60704: LD_ADDR_EXP 57
60708: PUSH
60709: LD_INT 1
60711: ST_TO_ADDR
// minersList := [ ] ;
60712: LD_ADDR_EXP 58
60716: PUSH
60717: EMPTY
60718: ST_TO_ADDR
// minerMinesList := [ ] ;
60719: LD_ADDR_EXP 59
60723: PUSH
60724: EMPTY
60725: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
60726: LD_ADDR_EXP 60
60730: PUSH
60731: LD_INT 10
60733: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60734: LD_ADDR_VAR 0 1
60738: PUSH
60739: LD_INT 34
60741: PUSH
60742: LD_INT 81
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PPUSH
60749: CALL_OW 69
60753: PUSH
60754: FOR_IN
60755: IFFALSE 60827
// begin if not i in minersList then
60757: LD_VAR 0 1
60761: PUSH
60762: LD_EXP 58
60766: IN
60767: NOT
60768: IFFALSE 60825
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60770: LD_ADDR_EXP 58
60774: PUSH
60775: LD_EXP 58
60779: PPUSH
60780: LD_EXP 58
60784: PUSH
60785: LD_INT 1
60787: PLUS
60788: PPUSH
60789: LD_VAR 0 1
60793: PPUSH
60794: CALL_OW 1
60798: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60799: LD_ADDR_EXP 59
60803: PUSH
60804: LD_EXP 59
60808: PPUSH
60809: LD_EXP 59
60813: PUSH
60814: LD_INT 1
60816: PLUS
60817: PPUSH
60818: EMPTY
60819: PPUSH
60820: CALL_OW 1
60824: ST_TO_ADDR
// end end ;
60825: GO 60754
60827: POP
60828: POP
// end ;
60829: PPOPN 1
60831: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
60832: LD_EXP 57
60836: IFFALSE 60867
60838: PUSH
60839: LD_EXP 59
60843: PPUSH
60844: CALL 15752 0 1
60848: IFTRUE 60866
60850: PUSH
60851: LD_INT 34
60853: PUSH
60854: LD_INT 81
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PPUSH
60861: CALL_OW 69
60865: OR
60866: AND
60867: IFFALSE 61387
60869: GO 60871
60871: DISABLE
60872: LD_INT 0
60874: PPUSH
60875: PPUSH
60876: PPUSH
60877: PPUSH
// begin enable ;
60878: ENABLE
// for i := minerMinesList downto 1 do
60879: LD_ADDR_VAR 0 1
60883: PUSH
60884: DOUBLE
60885: LD_EXP 59
60889: INC
60890: ST_TO_ADDR
60891: LD_INT 1
60893: PUSH
60894: FOR_DOWNTO
60895: IFFALSE 61385
// begin side := GetSide ( minersList [ i ] ) ;
60897: LD_ADDR_VAR 0 3
60901: PUSH
60902: LD_EXP 58
60906: PUSH
60907: LD_VAR 0 1
60911: ARRAY
60912: PPUSH
60913: CALL_OW 255
60917: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
60918: LD_EXP 58
60922: PUSH
60923: LD_VAR 0 1
60927: ARRAY
60928: PPUSH
60929: CALL_OW 300
60933: IFFALSE 60954
60935: PUSH
60936: LD_VAR 0 3
60940: PUSH
60941: LD_OWVAR 2
60945: PUSH
60946: LD_INT 9
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: IN
60953: AND
60954: IFFALSE 60987
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
60956: LD_EXP 58
60960: PUSH
60961: LD_VAR 0 1
60965: ARRAY
60966: PPUSH
60967: LD_EXP 59
60971: PUSH
60972: LD_VAR 0 1
60976: ARRAY
60977: PPUSH
60978: CALL 15752 0 1
60982: PPUSH
60983: CALL_OW 505
// if not minerMinesList [ i ] then
60987: LD_EXP 59
60991: PUSH
60992: LD_VAR 0 1
60996: ARRAY
60997: NOT
60998: IFFALSE 61002
// continue ;
61000: GO 60894
// for j := minerMinesList [ i ] downto 1 do
61002: LD_ADDR_VAR 0 2
61006: PUSH
61007: DOUBLE
61008: LD_EXP 59
61012: PUSH
61013: LD_VAR 0 1
61017: ARRAY
61018: INC
61019: ST_TO_ADDR
61020: LD_INT 1
61022: PUSH
61023: FOR_DOWNTO
61024: IFFALSE 61381
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
61026: LD_EXP 58
61030: PUSH
61031: LD_VAR 0 1
61035: ARRAY
61036: PPUSH
61037: CALL_OW 301
61041: IFTRUE 61061
61043: PUSH
61044: LD_EXP 58
61048: PUSH
61049: LD_VAR 0 1
61053: ARRAY
61054: PPUSH
61055: CALL_OW 305
61059: NOT
61060: OR
61061: IFFALSE 61152
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61063: LD_EXP 59
61067: PUSH
61068: LD_VAR 0 1
61072: ARRAY
61073: PUSH
61074: LD_VAR 0 2
61078: ARRAY
61079: PUSH
61080: LD_INT 1
61082: ARRAY
61083: PPUSH
61084: LD_EXP 59
61088: PUSH
61089: LD_VAR 0 1
61093: ARRAY
61094: PUSH
61095: LD_VAR 0 2
61099: ARRAY
61100: PUSH
61101: LD_INT 2
61103: ARRAY
61104: PPUSH
61105: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61109: LD_ADDR_EXP 59
61113: PUSH
61114: LD_EXP 59
61118: PPUSH
61119: LD_VAR 0 1
61123: PPUSH
61124: LD_EXP 59
61128: PUSH
61129: LD_VAR 0 1
61133: ARRAY
61134: PPUSH
61135: LD_VAR 0 2
61139: PPUSH
61140: CALL_OW 3
61144: PPUSH
61145: CALL_OW 1
61149: ST_TO_ADDR
// continue ;
61150: GO 61023
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61152: LD_ADDR_VAR 0 4
61156: PUSH
61157: LD_EXP 59
61161: PUSH
61162: LD_VAR 0 1
61166: ARRAY
61167: PUSH
61168: LD_VAR 0 2
61172: ARRAY
61173: PUSH
61174: LD_INT 1
61176: ARRAY
61177: PPUSH
61178: LD_EXP 59
61182: PUSH
61183: LD_VAR 0 1
61187: ARRAY
61188: PUSH
61189: LD_VAR 0 2
61193: ARRAY
61194: PUSH
61195: LD_INT 2
61197: ARRAY
61198: PPUSH
61199: CALL_OW 428
61203: ST_TO_ADDR
// if not tmp then
61204: LD_VAR 0 4
61208: NOT
61209: IFFALSE 61213
// continue ;
61211: GO 61023
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
61213: LD_VAR 0 4
61217: PUSH
61218: LD_INT 81
61220: PUSH
61221: LD_VAR 0 3
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PPUSH
61230: CALL_OW 69
61234: IN
61235: IFFALSE 61285
61237: PUSH
61238: LD_EXP 59
61242: PUSH
61243: LD_VAR 0 1
61247: ARRAY
61248: PUSH
61249: LD_VAR 0 2
61253: ARRAY
61254: PUSH
61255: LD_INT 1
61257: ARRAY
61258: PPUSH
61259: LD_EXP 59
61263: PUSH
61264: LD_VAR 0 1
61268: ARRAY
61269: PUSH
61270: LD_VAR 0 2
61274: ARRAY
61275: PUSH
61276: LD_INT 2
61278: ARRAY
61279: PPUSH
61280: CALL_OW 458
61284: AND
61285: IFFALSE 61379
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
61287: LD_EXP 59
61291: PUSH
61292: LD_VAR 0 1
61296: ARRAY
61297: PUSH
61298: LD_VAR 0 2
61302: ARRAY
61303: PUSH
61304: LD_INT 1
61306: ARRAY
61307: PPUSH
61308: LD_EXP 59
61312: PUSH
61313: LD_VAR 0 1
61317: ARRAY
61318: PUSH
61319: LD_VAR 0 2
61323: ARRAY
61324: PUSH
61325: LD_INT 2
61327: ARRAY
61328: PPUSH
61329: LD_VAR 0 3
61333: PPUSH
61334: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61338: LD_ADDR_EXP 59
61342: PUSH
61343: LD_EXP 59
61347: PPUSH
61348: LD_VAR 0 1
61352: PPUSH
61353: LD_EXP 59
61357: PUSH
61358: LD_VAR 0 1
61362: ARRAY
61363: PPUSH
61364: LD_VAR 0 2
61368: PPUSH
61369: CALL_OW 3
61373: PPUSH
61374: CALL_OW 1
61378: ST_TO_ADDR
// end ; end ;
61379: GO 61023
61381: POP
61382: POP
// end ;
61383: GO 60894
61385: POP
61386: POP
// end ;
61387: PPOPN 4
61389: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
61390: LD_INT 0
61392: PPUSH
61393: PPUSH
61394: PPUSH
61395: PPUSH
// result := false ;
61396: LD_ADDR_VAR 0 4
61400: PUSH
61401: LD_INT 0
61403: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61404: LD_VAR 0 1
61408: PPUSH
61409: CALL_OW 264
61413: PUSH
61414: LD_INT 81
61416: EQUAL
61417: NOT
61418: IFFALSE 61422
// exit ;
61420: GO 61792
// side := GetSide ( unit ) ;
61422: LD_ADDR_VAR 0 6
61426: PUSH
61427: LD_VAR 0 1
61431: PPUSH
61432: CALL_OW 255
61436: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
61437: LD_ADDR_VAR 0 5
61441: PUSH
61442: LD_EXP 58
61446: PPUSH
61447: LD_VAR 0 1
61451: PPUSH
61452: CALL 18453 0 2
61456: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61457: LD_EXP 59
61461: PUSH
61462: LD_VAR 0 5
61466: ARRAY
61467: PUSH
61468: LD_EXP 60
61472: GREATEREQUAL
61473: IFFALSE 61477
// exit ;
61475: GO 61792
// ComMoveXY ( unit , x , y ) ;
61477: LD_VAR 0 1
61481: PPUSH
61482: LD_VAR 0 2
61486: PPUSH
61487: LD_VAR 0 3
61491: PPUSH
61492: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61496: LD_INT 35
61498: PPUSH
61499: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61503: LD_VAR 0 1
61507: PPUSH
61508: LD_VAR 0 2
61512: PPUSH
61513: LD_VAR 0 3
61517: PPUSH
61518: CALL 50509 0 3
61522: NOT
61523: IFFALSE 61536
61525: PUSH
61526: LD_VAR 0 1
61530: PPUSH
61531: CALL_OW 314
61535: AND
61536: IFFALSE 61540
// exit ;
61538: GO 61792
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61540: LD_VAR 0 2
61544: PPUSH
61545: LD_VAR 0 3
61549: PPUSH
61550: CALL_OW 428
61554: PUSH
61555: LD_VAR 0 1
61559: EQUAL
61560: IFFALSE 61574
61562: PUSH
61563: LD_VAR 0 1
61567: PPUSH
61568: CALL_OW 314
61572: NOT
61573: AND
61574: IFFALSE 61496
// if MineAtPos ( x , y ) then
61576: LD_VAR 0 2
61580: PPUSH
61581: LD_VAR 0 3
61585: PPUSH
61586: CALL_OW 458
61590: IFFALSE 61594
// exit ;
61592: GO 61792
// if your_side = side then
61594: LD_OWVAR 2
61598: PUSH
61599: LD_VAR 0 6
61603: EQUAL
61604: IFFALSE 61623
// PlaySoundXY ( x , y , PlantMine ) ;
61606: LD_VAR 0 2
61610: PPUSH
61611: LD_VAR 0 3
61615: PPUSH
61616: LD_STRING PlantMine
61618: PPUSH
61619: CALL_OW 366
// repeat wait ( 1 ) ;
61623: LD_INT 1
61625: PPUSH
61626: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
61630: LD_VAR 0 2
61634: PPUSH
61635: LD_VAR 0 3
61639: PPUSH
61640: LD_VAR 0 6
61644: PPUSH
61645: LD_INT 0
61647: PPUSH
61648: CALL_OW 454
61652: IFFALSE 61623
// if MineAtPos ( x , y ) then
61654: LD_VAR 0 2
61658: PPUSH
61659: LD_VAR 0 3
61663: PPUSH
61664: CALL_OW 458
61668: IFFALSE 61784
// begin for i in minerMinesList [ index ] do
61670: LD_ADDR_VAR 0 7
61674: PUSH
61675: LD_EXP 59
61679: PUSH
61680: LD_VAR 0 5
61684: ARRAY
61685: PUSH
61686: FOR_IN
61687: IFFALSE 61729
// if i [ 1 ] = x and i [ 2 ] = y then
61689: LD_VAR 0 7
61693: PUSH
61694: LD_INT 1
61696: ARRAY
61697: PUSH
61698: LD_VAR 0 2
61702: EQUAL
61703: IFFALSE 61721
61705: PUSH
61706: LD_VAR 0 7
61710: PUSH
61711: LD_INT 2
61713: ARRAY
61714: PUSH
61715: LD_VAR 0 3
61719: EQUAL
61720: AND
61721: IFFALSE 61727
// exit ;
61723: POP
61724: POP
61725: GO 61792
61727: GO 61686
61729: POP
61730: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61731: LD_ADDR_EXP 59
61735: PUSH
61736: LD_EXP 59
61740: PPUSH
61741: LD_VAR 0 5
61745: PUSH
61746: LD_EXP 59
61750: PUSH
61751: LD_VAR 0 5
61755: ARRAY
61756: PUSH
61757: LD_INT 1
61759: PLUS
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PPUSH
61765: LD_VAR 0 2
61769: PUSH
61770: LD_VAR 0 3
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PPUSH
61779: CALL 18670 0 3
61783: ST_TO_ADDR
// end ; result := true ;
61784: LD_ADDR_VAR 0 4
61788: PUSH
61789: LD_INT 1
61791: ST_TO_ADDR
// end ;
61792: LD_VAR 0 4
61796: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61797: LD_INT 0
61799: PPUSH
61800: PPUSH
61801: PPUSH
// if not unit in minersList then
61802: LD_VAR 0 1
61806: PUSH
61807: LD_EXP 58
61811: IN
61812: NOT
61813: IFFALSE 61817
// exit ;
61815: GO 62024
// index := GetElementIndex ( minersList , unit ) ;
61817: LD_ADDR_VAR 0 6
61821: PUSH
61822: LD_EXP 58
61826: PPUSH
61827: LD_VAR 0 1
61831: PPUSH
61832: CALL 18453 0 2
61836: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61837: LD_ADDR_VAR 0 5
61841: PUSH
61842: DOUBLE
61843: LD_EXP 59
61847: PUSH
61848: LD_VAR 0 6
61852: ARRAY
61853: INC
61854: ST_TO_ADDR
61855: LD_INT 1
61857: PUSH
61858: FOR_DOWNTO
61859: IFFALSE 62022
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61861: LD_EXP 59
61865: PUSH
61866: LD_VAR 0 6
61870: ARRAY
61871: PUSH
61872: LD_VAR 0 5
61876: ARRAY
61877: PUSH
61878: LD_INT 1
61880: ARRAY
61881: PPUSH
61882: LD_EXP 59
61886: PUSH
61887: LD_VAR 0 6
61891: ARRAY
61892: PUSH
61893: LD_VAR 0 5
61897: ARRAY
61898: PUSH
61899: LD_INT 2
61901: ARRAY
61902: PPUSH
61903: LD_VAR 0 2
61907: PPUSH
61908: LD_VAR 0 3
61912: PPUSH
61913: CALL_OW 298
61917: PUSH
61918: LD_INT 6
61920: LESS
61921: IFFALSE 62020
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61923: LD_EXP 59
61927: PUSH
61928: LD_VAR 0 6
61932: ARRAY
61933: PUSH
61934: LD_VAR 0 5
61938: ARRAY
61939: PUSH
61940: LD_INT 1
61942: ARRAY
61943: PPUSH
61944: LD_EXP 59
61948: PUSH
61949: LD_VAR 0 6
61953: ARRAY
61954: PUSH
61955: LD_VAR 0 5
61959: ARRAY
61960: PUSH
61961: LD_INT 2
61963: ARRAY
61964: PPUSH
61965: LD_VAR 0 1
61969: PPUSH
61970: CALL_OW 255
61974: PPUSH
61975: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61979: LD_ADDR_EXP 59
61983: PUSH
61984: LD_EXP 59
61988: PPUSH
61989: LD_VAR 0 6
61993: PPUSH
61994: LD_EXP 59
61998: PUSH
61999: LD_VAR 0 6
62003: ARRAY
62004: PPUSH
62005: LD_VAR 0 5
62009: PPUSH
62010: CALL_OW 3
62014: PPUSH
62015: CALL_OW 1
62019: ST_TO_ADDR
// end ; end ;
62020: GO 61858
62022: POP
62023: POP
// end ;
62024: LD_VAR 0 4
62028: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
62029: LD_INT 0
62031: PPUSH
62032: PPUSH
62033: PPUSH
62034: PPUSH
62035: PPUSH
62036: PPUSH
62037: PPUSH
62038: PPUSH
62039: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
62040: LD_VAR 0 1
62044: PPUSH
62045: CALL_OW 264
62049: PUSH
62050: LD_INT 81
62052: EQUAL
62053: NOT
62054: IFTRUE 62069
62056: PUSH
62057: LD_VAR 0 1
62061: PUSH
62062: LD_EXP 58
62066: IN
62067: NOT
62068: OR
62069: IFFALSE 62073
// exit ;
62071: GO 62399
// index := GetElementIndex ( minersList , unit ) ;
62073: LD_ADDR_VAR 0 6
62077: PUSH
62078: LD_EXP 58
62082: PPUSH
62083: LD_VAR 0 1
62087: PPUSH
62088: CALL 18453 0 2
62092: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
62093: LD_ADDR_VAR 0 8
62097: PUSH
62098: LD_EXP 60
62102: PUSH
62103: LD_EXP 59
62107: PUSH
62108: LD_VAR 0 6
62112: ARRAY
62113: MINUS
62114: ST_TO_ADDR
// if not minesFreeAmount then
62115: LD_VAR 0 8
62119: NOT
62120: IFFALSE 62124
// exit ;
62122: GO 62399
// tmp := [ ] ;
62124: LD_ADDR_VAR 0 7
62128: PUSH
62129: EMPTY
62130: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
62131: LD_ADDR_VAR 0 5
62135: PUSH
62136: DOUBLE
62137: LD_INT 1
62139: DEC
62140: ST_TO_ADDR
62141: LD_VAR 0 8
62145: PUSH
62146: FOR_TO
62147: IFFALSE 62346
// begin _d := rand ( 0 , 5 ) ;
62149: LD_ADDR_VAR 0 11
62153: PUSH
62154: LD_INT 0
62156: PPUSH
62157: LD_INT 5
62159: PPUSH
62160: CALL_OW 12
62164: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
62165: LD_ADDR_VAR 0 12
62169: PUSH
62170: LD_INT 2
62172: PPUSH
62173: LD_INT 6
62175: PPUSH
62176: CALL_OW 12
62180: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
62181: LD_ADDR_VAR 0 9
62185: PUSH
62186: LD_VAR 0 2
62190: PPUSH
62191: LD_VAR 0 11
62195: PPUSH
62196: LD_VAR 0 12
62200: PPUSH
62201: CALL_OW 272
62205: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
62206: LD_ADDR_VAR 0 10
62210: PUSH
62211: LD_VAR 0 3
62215: PPUSH
62216: LD_VAR 0 11
62220: PPUSH
62221: LD_VAR 0 12
62225: PPUSH
62226: CALL_OW 273
62230: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
62231: LD_VAR 0 9
62235: PPUSH
62236: LD_VAR 0 10
62240: PPUSH
62241: CALL_OW 488
62245: IFFALSE 62269
62247: PUSH
62248: LD_VAR 0 9
62252: PUSH
62253: LD_VAR 0 10
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_VAR 0 7
62266: IN
62267: NOT
62268: AND
62269: IFFALSE 62288
62271: PUSH
62272: LD_VAR 0 9
62276: PPUSH
62277: LD_VAR 0 10
62281: PPUSH
62282: CALL_OW 458
62286: NOT
62287: AND
62288: IFFALSE 62330
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
62290: LD_ADDR_VAR 0 7
62294: PUSH
62295: LD_VAR 0 7
62299: PPUSH
62300: LD_VAR 0 7
62304: PUSH
62305: LD_INT 1
62307: PLUS
62308: PPUSH
62309: LD_VAR 0 9
62313: PUSH
62314: LD_VAR 0 10
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PPUSH
62323: CALL_OW 1
62327: ST_TO_ADDR
62328: GO 62344
// i := i - 1 ;
62330: LD_ADDR_VAR 0 5
62334: PUSH
62335: LD_VAR 0 5
62339: PUSH
62340: LD_INT 1
62342: MINUS
62343: ST_TO_ADDR
// end ;
62344: GO 62146
62346: POP
62347: POP
// for i in tmp do
62348: LD_ADDR_VAR 0 5
62352: PUSH
62353: LD_VAR 0 7
62357: PUSH
62358: FOR_IN
62359: IFFALSE 62397
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62361: LD_VAR 0 1
62365: PPUSH
62366: LD_VAR 0 5
62370: PUSH
62371: LD_INT 1
62373: ARRAY
62374: PPUSH
62375: LD_VAR 0 5
62379: PUSH
62380: LD_INT 2
62382: ARRAY
62383: PPUSH
62384: CALL 61390 0 3
62388: NOT
62389: IFFALSE 62395
// exit ;
62391: POP
62392: POP
62393: GO 62399
62395: GO 62358
62397: POP
62398: POP
// end ;
62399: LD_VAR 0 4
62403: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
62404: LD_INT 0
62406: PPUSH
62407: PPUSH
62408: PPUSH
62409: PPUSH
62410: PPUSH
62411: PPUSH
62412: PPUSH
62413: PPUSH
62414: PPUSH
// if GetClass ( unit ) <> class_sniper then
62415: LD_VAR 0 1
62419: PPUSH
62420: CALL_OW 257
62424: PUSH
62425: LD_INT 5
62427: NONEQUAL
62428: IFFALSE 62432
// exit ;
62430: GO 62902
// dist := 8 ;
62432: LD_ADDR_VAR 0 5
62436: PUSH
62437: LD_INT 8
62439: ST_TO_ADDR
// viewRange := 12 ;
62440: LD_ADDR_VAR 0 8
62444: PUSH
62445: LD_INT 12
62447: ST_TO_ADDR
// side := GetSide ( unit ) ;
62448: LD_ADDR_VAR 0 6
62452: PUSH
62453: LD_VAR 0 1
62457: PPUSH
62458: CALL_OW 255
62462: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62463: LD_INT 61
62465: PPUSH
62466: LD_VAR 0 6
62470: PPUSH
62471: CALL_OW 321
62475: PUSH
62476: LD_INT 2
62478: EQUAL
62479: IFFALSE 62489
// viewRange := 16 ;
62481: LD_ADDR_VAR 0 8
62485: PUSH
62486: LD_INT 16
62488: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62489: LD_VAR 0 1
62493: PPUSH
62494: LD_VAR 0 2
62498: PPUSH
62499: LD_VAR 0 3
62503: PPUSH
62504: CALL_OW 297
62508: PUSH
62509: LD_VAR 0 5
62513: GREATER
62514: IFFALSE 62593
// begin ComMoveXY ( unit , x , y ) ;
62516: LD_VAR 0 1
62520: PPUSH
62521: LD_VAR 0 2
62525: PPUSH
62526: LD_VAR 0 3
62530: PPUSH
62531: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62535: LD_INT 35
62537: PPUSH
62538: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62542: LD_VAR 0 1
62546: PPUSH
62547: LD_VAR 0 2
62551: PPUSH
62552: LD_VAR 0 3
62556: PPUSH
62557: CALL 50509 0 3
62561: NOT
62562: IFFALSE 62566
// exit ;
62564: GO 62902
// until GetDistUnitXY ( unit , x , y ) < dist ;
62566: LD_VAR 0 1
62570: PPUSH
62571: LD_VAR 0 2
62575: PPUSH
62576: LD_VAR 0 3
62580: PPUSH
62581: CALL_OW 297
62585: PUSH
62586: LD_VAR 0 5
62590: LESS
62591: IFFALSE 62535
// end ; ComTurnXY ( unit , x , y ) ;
62593: LD_VAR 0 1
62597: PPUSH
62598: LD_VAR 0 2
62602: PPUSH
62603: LD_VAR 0 3
62607: PPUSH
62608: CALL_OW 118
// repeat if Multiplayer then
62612: LD_OWVAR 4
62616: IFFALSE 62627
// wait ( 35 ) else
62618: LD_INT 35
62620: PPUSH
62621: CALL_OW 67
62625: GO 62634
// wait ( 5 ) ;
62627: LD_INT 5
62629: PPUSH
62630: CALL_OW 67
// _d := GetDir ( unit ) ;
62634: LD_ADDR_VAR 0 11
62638: PUSH
62639: LD_VAR 0 1
62643: PPUSH
62644: CALL_OW 254
62648: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
62649: LD_ADDR_VAR 0 7
62653: PUSH
62654: LD_VAR 0 1
62658: PPUSH
62659: CALL_OW 250
62663: PPUSH
62664: LD_VAR 0 1
62668: PPUSH
62669: CALL_OW 251
62673: PPUSH
62674: LD_VAR 0 2
62678: PPUSH
62679: LD_VAR 0 3
62683: PPUSH
62684: CALL 53145 0 4
62688: ST_TO_ADDR
// until dir = _d ;
62689: LD_VAR 0 7
62693: PUSH
62694: LD_VAR 0 11
62698: EQUAL
62699: IFFALSE 62612
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
62701: LD_ADDR_VAR 0 9
62705: PUSH
62706: LD_VAR 0 1
62710: PPUSH
62711: CALL_OW 250
62715: PPUSH
62716: LD_VAR 0 7
62720: PPUSH
62721: LD_VAR 0 5
62725: PPUSH
62726: CALL_OW 272
62730: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
62731: LD_ADDR_VAR 0 10
62735: PUSH
62736: LD_VAR 0 1
62740: PPUSH
62741: CALL_OW 251
62745: PPUSH
62746: LD_VAR 0 7
62750: PPUSH
62751: LD_VAR 0 5
62755: PPUSH
62756: CALL_OW 273
62760: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62761: LD_VAR 0 9
62765: PPUSH
62766: LD_VAR 0 10
62770: PPUSH
62771: CALL_OW 488
62775: NOT
62776: IFFALSE 62780
// exit ;
62778: GO 62902
// ComAnimCustom ( unit , 1 ) ;
62780: LD_VAR 0 1
62784: PPUSH
62785: LD_INT 1
62787: PPUSH
62788: CALL_OW 592
// p := 0 ;
62792: LD_ADDR_VAR 0 12
62796: PUSH
62797: LD_INT 0
62799: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62800: LD_VAR 0 9
62804: PPUSH
62805: LD_VAR 0 10
62809: PPUSH
62810: LD_VAR 0 6
62814: PPUSH
62815: LD_VAR 0 8
62819: PPUSH
62820: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
62824: LD_INT 35
62826: PPUSH
62827: CALL_OW 67
// p := Inc ( p ) ;
62831: LD_ADDR_VAR 0 12
62835: PUSH
62836: LD_VAR 0 12
62840: PPUSH
62841: CALL 53101 0 1
62845: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
62846: LD_VAR 0 12
62850: PUSH
62851: LD_INT 3
62853: EQUAL
62854: IFTRUE 62868
62856: PUSH
62857: LD_VAR 0 1
62861: PPUSH
62862: CALL_OW 302
62866: NOT
62867: OR
62868: IFTRUE 62881
62870: PUSH
62871: LD_VAR 0 1
62875: PPUSH
62876: CALL_OW 301
62880: OR
62881: IFFALSE 62824
// RemoveSeeing ( _x , _y , side ) ;
62883: LD_VAR 0 9
62887: PPUSH
62888: LD_VAR 0 10
62892: PPUSH
62893: LD_VAR 0 6
62897: PPUSH
62898: CALL_OW 331
// end ;
62902: LD_VAR 0 4
62906: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
62907: LD_INT 0
62909: PPUSH
62910: PPUSH
62911: PPUSH
62912: PPUSH
62913: PPUSH
62914: PPUSH
62915: PPUSH
62916: PPUSH
62917: PPUSH
62918: PPUSH
62919: PPUSH
// if not unit then
62920: LD_VAR 0 1
62924: NOT
62925: IFFALSE 62929
// exit ;
62927: GO 63200
// side := GetSide ( unit ) ;
62929: LD_ADDR_VAR 0 3
62933: PUSH
62934: LD_VAR 0 1
62938: PPUSH
62939: CALL_OW 255
62943: ST_TO_ADDR
// x := GetX ( unit ) ;
62944: LD_ADDR_VAR 0 5
62948: PUSH
62949: LD_VAR 0 1
62953: PPUSH
62954: CALL_OW 250
62958: ST_TO_ADDR
// y := GetY ( unit ) ;
62959: LD_ADDR_VAR 0 6
62963: PUSH
62964: LD_VAR 0 1
62968: PPUSH
62969: CALL_OW 251
62973: ST_TO_ADDR
// r := 8 ;
62974: LD_ADDR_VAR 0 4
62978: PUSH
62979: LD_INT 8
62981: ST_TO_ADDR
// if x - r < 0 then
62982: LD_VAR 0 5
62986: PUSH
62987: LD_VAR 0 4
62991: MINUS
62992: PUSH
62993: LD_INT 0
62995: LESS
62996: IFFALSE 63008
// min_x := 0 else
62998: LD_ADDR_VAR 0 7
63002: PUSH
63003: LD_INT 0
63005: ST_TO_ADDR
63006: GO 63024
// min_x := x - r ;
63008: LD_ADDR_VAR 0 7
63012: PUSH
63013: LD_VAR 0 5
63017: PUSH
63018: LD_VAR 0 4
63022: MINUS
63023: ST_TO_ADDR
// if y - r < 0 then
63024: LD_VAR 0 6
63028: PUSH
63029: LD_VAR 0 4
63033: MINUS
63034: PUSH
63035: LD_INT 0
63037: LESS
63038: IFFALSE 63050
// min_y := 0 else
63040: LD_ADDR_VAR 0 8
63044: PUSH
63045: LD_INT 0
63047: ST_TO_ADDR
63048: GO 63066
// min_y := y - r ;
63050: LD_ADDR_VAR 0 8
63054: PUSH
63055: LD_VAR 0 6
63059: PUSH
63060: LD_VAR 0 4
63064: MINUS
63065: ST_TO_ADDR
// max_x := x + r ;
63066: LD_ADDR_VAR 0 9
63070: PUSH
63071: LD_VAR 0 5
63075: PUSH
63076: LD_VAR 0 4
63080: PLUS
63081: ST_TO_ADDR
// max_y := y + r ;
63082: LD_ADDR_VAR 0 10
63086: PUSH
63087: LD_VAR 0 6
63091: PUSH
63092: LD_VAR 0 4
63096: PLUS
63097: ST_TO_ADDR
// for _x = min_x to max_x do
63098: LD_ADDR_VAR 0 11
63102: PUSH
63103: DOUBLE
63104: LD_VAR 0 7
63108: DEC
63109: ST_TO_ADDR
63110: LD_VAR 0 9
63114: PUSH
63115: FOR_TO
63116: IFFALSE 63198
// for _y = min_y to max_y do
63118: LD_ADDR_VAR 0 12
63122: PUSH
63123: DOUBLE
63124: LD_VAR 0 8
63128: DEC
63129: ST_TO_ADDR
63130: LD_VAR 0 10
63134: PUSH
63135: FOR_TO
63136: IFFALSE 63194
// begin if not ValidHex ( _x , _y ) then
63138: LD_VAR 0 11
63142: PPUSH
63143: LD_VAR 0 12
63147: PPUSH
63148: CALL_OW 488
63152: NOT
63153: IFFALSE 63157
// continue ;
63155: GO 63135
// if MineAtPos ( _x , _y ) then
63157: LD_VAR 0 11
63161: PPUSH
63162: LD_VAR 0 12
63166: PPUSH
63167: CALL_OW 458
63171: IFFALSE 63192
// ViewMineAtPos ( _x , _y , side ) ;
63173: LD_VAR 0 11
63177: PPUSH
63178: LD_VAR 0 12
63182: PPUSH
63183: LD_VAR 0 3
63187: PPUSH
63188: CALL_OW 457
// end ;
63192: GO 63135
63194: POP
63195: POP
63196: GO 63115
63198: POP
63199: POP
// end ;
63200: LD_VAR 0 2
63204: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
63205: LD_INT 0
63207: PPUSH
63208: PPUSH
63209: PPUSH
63210: PPUSH
63211: PPUSH
63212: PPUSH
63213: PPUSH
// if not units then
63214: LD_VAR 0 1
63218: NOT
63219: IFFALSE 63223
// exit ;
63221: GO 63687
// scaners := [ ] ;
63223: LD_ADDR_VAR 0 6
63227: PUSH
63228: EMPTY
63229: ST_TO_ADDR
// for i in units do
63230: LD_ADDR_VAR 0 3
63234: PUSH
63235: LD_VAR 0 1
63239: PUSH
63240: FOR_IN
63241: IFFALSE 63398
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
63243: LD_VAR 0 3
63247: PPUSH
63248: CALL_OW 264
63252: PUSH
63253: LD_INT 11
63255: NONEQUAL
63256: IFTRUE 63270
63258: PUSH
63259: LD_VAR 0 3
63263: PPUSH
63264: CALL_OW 302
63268: NOT
63269: OR
63270: IFTRUE 63287
63272: PUSH
63273: LD_VAR 0 3
63277: PPUSH
63278: CALL_OW 110
63282: PUSH
63283: LD_INT 502
63285: EQUAL
63286: OR
63287: IFFALSE 63291
// continue ;
63289: GO 63240
// ComStop ( i ) ;
63291: LD_VAR 0 3
63295: PPUSH
63296: CALL_OW 141
// x := GetX ( i ) ;
63300: LD_ADDR_VAR 0 4
63304: PUSH
63305: LD_VAR 0 3
63309: PPUSH
63310: CALL_OW 250
63314: ST_TO_ADDR
// y := GetY ( i ) ;
63315: LD_ADDR_VAR 0 5
63319: PUSH
63320: LD_VAR 0 3
63324: PPUSH
63325: CALL_OW 251
63329: ST_TO_ADDR
// if GetSide ( i ) = your_side then
63330: LD_VAR 0 3
63334: PPUSH
63335: CALL_OW 255
63339: PUSH
63340: LD_OWVAR 2
63344: EQUAL
63345: IFFALSE 63364
// PlaySoundXY ( x , y , mineDetector ) ;
63347: LD_VAR 0 4
63351: PPUSH
63352: LD_VAR 0 5
63356: PPUSH
63357: LD_STRING mineDetector
63359: PPUSH
63360: CALL_OW 366
// scaners := Join ( scaners , i ) ;
63364: LD_ADDR_VAR 0 6
63368: PUSH
63369: LD_VAR 0 6
63373: PPUSH
63374: LD_VAR 0 3
63378: PPUSH
63379: CALL 51728 0 2
63383: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
63384: LD_VAR 0 3
63388: PPUSH
63389: LD_INT 502
63391: PPUSH
63392: CALL_OW 109
// end ;
63396: GO 63240
63398: POP
63399: POP
// if not scaners then
63400: LD_VAR 0 6
63404: NOT
63405: IFFALSE 63409
// exit ;
63407: GO 63687
// wait ( 3 ) ;
63409: LD_INT 3
63411: PPUSH
63412: CALL_OW 67
// timer := 6 ;
63416: LD_ADDR_VAR 0 7
63420: PUSH
63421: LD_INT 6
63423: ST_TO_ADDR
// repeat for i in scaners do
63424: LD_ADDR_VAR 0 3
63428: PUSH
63429: LD_VAR 0 6
63433: PUSH
63434: FOR_IN
63435: IFFALSE 63585
// begin side := GetSide ( i ) ;
63437: LD_ADDR_VAR 0 8
63441: PUSH
63442: LD_VAR 0 3
63446: PPUSH
63447: CALL_OW 255
63451: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
63452: LD_VAR 0 3
63456: PPUSH
63457: CALL_OW 302
63461: NOT
63462: IFTRUE 63475
63464: PUSH
63465: LD_VAR 0 3
63469: PPUSH
63470: CALL_OW 314
63474: OR
63475: IFTRUE 63506
63477: PUSH
63478: LD_VAR 0 3
63482: PPUSH
63483: CALL_OW 263
63487: PUSH
63488: LD_INT 1
63490: EQUAL
63491: IFFALSE 63505
63493: PUSH
63494: LD_VAR 0 3
63498: PPUSH
63499: CALL_OW 311
63503: NOT
63504: AND
63505: OR
63506: IFFALSE 63550
// begin SetUnitDisplayNumber ( i , 0 ) ;
63508: LD_VAR 0 3
63512: PPUSH
63513: LD_INT 0
63515: PPUSH
63516: CALL_OW 505
// SetTag ( i , 0 ) ;
63520: LD_VAR 0 3
63524: PPUSH
63525: LD_INT 0
63527: PPUSH
63528: CALL_OW 109
// scaners := scaners diff i ;
63532: LD_ADDR_VAR 0 6
63536: PUSH
63537: LD_VAR 0 6
63541: PUSH
63542: LD_VAR 0 3
63546: DIFF
63547: ST_TO_ADDR
// continue ;
63548: GO 63434
// end ; if side in [ your_side , 9 ] then
63550: LD_VAR 0 8
63554: PUSH
63555: LD_OWVAR 2
63559: PUSH
63560: LD_INT 9
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: IN
63567: IFFALSE 63583
// SetUnitDisplayNumber ( i , timer ) ;
63569: LD_VAR 0 3
63573: PPUSH
63574: LD_VAR 0 7
63578: PPUSH
63579: CALL_OW 505
// end ;
63583: GO 63434
63585: POP
63586: POP
// if not scaners then
63587: LD_VAR 0 6
63591: NOT
63592: IFFALSE 63596
// exit ;
63594: GO 63687
// timer := Dec ( timer ) ;
63596: LD_ADDR_VAR 0 7
63600: PUSH
63601: LD_VAR 0 7
63605: PPUSH
63606: CALL 53123 0 1
63610: ST_TO_ADDR
// wait ( 0 0$1 ) ;
63611: LD_INT 35
63613: PPUSH
63614: CALL_OW 67
// until timer = 0 ;
63618: LD_VAR 0 7
63622: PUSH
63623: LD_INT 0
63625: EQUAL
63626: IFFALSE 63424
// if not scaners then
63628: LD_VAR 0 6
63632: NOT
63633: IFFALSE 63637
// exit ;
63635: GO 63687
// for i in scaners do
63637: LD_ADDR_VAR 0 3
63641: PUSH
63642: LD_VAR 0 6
63646: PUSH
63647: FOR_IN
63648: IFFALSE 63685
// begin SetUnitDisplayNumber ( i , 0 ) ;
63650: LD_VAR 0 3
63654: PPUSH
63655: LD_INT 0
63657: PPUSH
63658: CALL_OW 505
// SetTag ( i , 0 ) ;
63662: LD_VAR 0 3
63666: PPUSH
63667: LD_INT 0
63669: PPUSH
63670: CALL_OW 109
// RevealDetectorMine ( i ) ;
63674: LD_VAR 0 3
63678: PPUSH
63679: CALL 62907 0 1
// end ;
63683: GO 63647
63685: POP
63686: POP
// end ;
63687: LD_VAR 0 2
63691: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
63692: LD_INT 0
63694: PPUSH
// if p1 = mine_detector_mode then
63695: LD_VAR 0 2
63699: PUSH
63700: LD_INT 103
63702: EQUAL
63703: IFFALSE 63714
// DetectMine ( units ) ;
63705: LD_VAR 0 1
63709: PPUSH
63710: CALL 63205 0 1
// end ; end_of_file
63714: LD_VAR 0 7
63718: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63719: PPOPN 6
63721: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63722: LD_INT 0
63724: PPUSH
// begin if not units then
63725: LD_VAR 0 1
63729: NOT
63730: IFFALSE 63734
// exit ;
63732: GO 63768
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63734: LD_VAR 0 1
63738: PPUSH
63739: LD_VAR 0 2
63743: PPUSH
63744: LD_VAR 0 3
63748: PPUSH
63749: LD_VAR 0 4
63753: PPUSH
63754: LD_VAR 0 5
63758: PPUSH
63759: LD_VAR 0 6
63763: PPUSH
63764: CALL 63692 0 6
// end ;
63768: PPOPN 7
63770: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63771: LD_EXP 3
63775: PUSH
63776: LD_INT 4
63778: EQUAL
63779: IFFALSE 63815
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63781: LD_STRING setGameDifficulty(
63783: PUSH
63784: LD_OWVAR 67
63788: STR
63789: PUSH
63790: LD_STRING )
63792: STR
63793: PPUSH
63794: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63798: LD_STRING displayDifficulty(
63800: PUSH
63801: LD_OWVAR 67
63805: STR
63806: PUSH
63807: LD_STRING )
63809: STR
63810: PPUSH
63811: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63815: CALL 63844 0 0
// end ; end_of_file
63819: PPOPN 1
63821: END
// every 0 0$1 do
63822: GO 63824
63824: DISABLE
// begin enable ;
63825: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63826: LD_STRING updateTimer(
63828: PUSH
63829: LD_OWVAR 1
63833: STR
63834: PUSH
63835: LD_STRING );
63837: STR
63838: PPUSH
63839: CALL_OW 559
// end ;
63843: END
// export function SOS_MapStart ( ) ; begin
63844: LD_INT 0
63846: PPUSH
// UpdateFactoryWaypoints ( ) ;
63847: CALL 64785 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63851: CALL 65037 0 0
// ParseMultiDataToLua ( ) ;
63855: CALL 65184 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
63859: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
63861: PPUSH
63862: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63866: LD_STRING setSpecLogoNumber(
63868: PUSH
63869: LD_INT 2
63871: STR
63872: PUSH
63873: LD_STRING ,
63875: STR
63876: PUSH
63877: LD_INT 1
63879: STR
63880: PUSH
63881: LD_STRING )
63883: STR
63884: PPUSH
63885: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63889: LD_STRING setSpecLogoNumber(
63891: PUSH
63892: LD_INT 3
63894: STR
63895: PUSH
63896: LD_STRING ,
63898: STR
63899: PUSH
63900: LD_INT 2
63902: STR
63903: PUSH
63904: LD_STRING )
63906: STR
63907: PPUSH
63908: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63912: LD_STRING setSpecLogoNumber(
63914: PUSH
63915: LD_INT 4
63917: STR
63918: PUSH
63919: LD_STRING ,
63921: STR
63922: PUSH
63923: LD_INT 3
63925: STR
63926: PUSH
63927: LD_STRING )
63929: STR
63930: PPUSH
63931: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63935: LD_STRING setSpecLogoNumber(
63937: PUSH
63938: LD_INT 5
63940: STR
63941: PUSH
63942: LD_STRING ,
63944: STR
63945: PUSH
63946: LD_INT 4
63948: STR
63949: PUSH
63950: LD_STRING )
63952: STR
63953: PPUSH
63954: CALL_OW 559
// end ;
63958: LD_VAR 0 1
63962: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63963: LD_INT 0
63965: PPUSH
63966: PPUSH
63967: PPUSH
63968: PPUSH
63969: PPUSH
63970: PPUSH
63971: PPUSH
63972: PPUSH
63973: PPUSH
// for i := 1 to 8 do
63974: LD_ADDR_VAR 0 2
63978: PUSH
63979: DOUBLE
63980: LD_INT 1
63982: DEC
63983: ST_TO_ADDR
63984: LD_INT 8
63986: PUSH
63987: FOR_TO
63988: IFFALSE 64373
// begin if mpSidePositions [ i ] then
63990: LD_EXP 7
63994: PUSH
63995: LD_VAR 0 2
63999: ARRAY
64000: IFFALSE 64371
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
64002: LD_ADDR_VAR 0 7
64006: PUSH
64007: LD_INT 22
64009: PUSH
64010: LD_VAR 0 2
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 21
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PPUSH
64033: CALL_OW 69
64037: PPUSH
64038: CALL 15752 0 1
64042: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64043: LD_ADDR_VAR 0 9
64047: PUSH
64048: LD_INT 22
64050: PUSH
64051: LD_VAR 0 2
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 2
64062: PUSH
64063: LD_INT 30
64065: PUSH
64066: LD_INT 0
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 30
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: LIST
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PPUSH
64092: CALL_OW 69
64096: ST_TO_ADDR
// crates := 0 ;
64097: LD_ADDR_VAR 0 4
64101: PUSH
64102: LD_INT 0
64104: ST_TO_ADDR
// oil := 0 ;
64105: LD_ADDR_VAR 0 5
64109: PUSH
64110: LD_INT 0
64112: ST_TO_ADDR
// sib := 0 ;
64113: LD_ADDR_VAR 0 6
64117: PUSH
64118: LD_INT 0
64120: ST_TO_ADDR
// if bases then
64121: LD_VAR 0 9
64125: IFFALSE 64231
// begin for j in bases do
64127: LD_ADDR_VAR 0 3
64131: PUSH
64132: LD_VAR 0 9
64136: PUSH
64137: FOR_IN
64138: IFFALSE 64229
// begin base := GetBase ( j ) ;
64140: LD_ADDR_VAR 0 8
64144: PUSH
64145: LD_VAR 0 3
64149: PPUSH
64150: CALL_OW 274
64154: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
64155: LD_ADDR_VAR 0 4
64159: PUSH
64160: LD_VAR 0 4
64164: PUSH
64165: LD_VAR 0 8
64169: PPUSH
64170: LD_INT 1
64172: PPUSH
64173: CALL_OW 275
64177: PLUS
64178: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
64179: LD_ADDR_VAR 0 5
64183: PUSH
64184: LD_VAR 0 5
64188: PUSH
64189: LD_VAR 0 8
64193: PPUSH
64194: LD_INT 2
64196: PPUSH
64197: CALL_OW 275
64201: PLUS
64202: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
64203: LD_ADDR_VAR 0 6
64207: PUSH
64208: LD_VAR 0 6
64212: PUSH
64213: LD_VAR 0 8
64217: PPUSH
64218: LD_INT 3
64220: PPUSH
64221: CALL_OW 275
64225: PLUS
64226: ST_TO_ADDR
// end ;
64227: GO 64137
64229: POP
64230: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
64231: LD_STRING setSpecText(
64233: PUSH
64234: LD_VAR 0 2
64238: STR
64239: PUSH
64240: LD_STRING ,
64242: STR
64243: PUSH
64244: LD_INT 2
64246: STR
64247: PUSH
64248: LD_STRING ,
64250: STR
64251: PUSH
64252: LD_VAR 0 4
64256: STR
64257: PUSH
64258: LD_STRING )
64260: STR
64261: PPUSH
64262: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
64266: LD_STRING setSpecText(
64268: PUSH
64269: LD_VAR 0 2
64273: STR
64274: PUSH
64275: LD_STRING ,
64277: STR
64278: PUSH
64279: LD_INT 3
64281: STR
64282: PUSH
64283: LD_STRING ,
64285: STR
64286: PUSH
64287: LD_VAR 0 5
64291: STR
64292: PUSH
64293: LD_STRING )
64295: STR
64296: PPUSH
64297: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
64301: LD_STRING setSpecText(
64303: PUSH
64304: LD_VAR 0 2
64308: STR
64309: PUSH
64310: LD_STRING ,
64312: STR
64313: PUSH
64314: LD_INT 4
64316: STR
64317: PUSH
64318: LD_STRING ,
64320: STR
64321: PUSH
64322: LD_VAR 0 6
64326: STR
64327: PUSH
64328: LD_STRING )
64330: STR
64331: PPUSH
64332: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
64336: LD_STRING setSpecText(
64338: PUSH
64339: LD_VAR 0 2
64343: STR
64344: PUSH
64345: LD_STRING ,
64347: STR
64348: PUSH
64349: LD_INT 5
64351: STR
64352: PUSH
64353: LD_STRING ,
64355: STR
64356: PUSH
64357: LD_VAR 0 7
64361: STR
64362: PUSH
64363: LD_STRING )
64365: STR
64366: PPUSH
64367: CALL_OW 559
// end ; end ;
64371: GO 63987
64373: POP
64374: POP
// end ;
64375: LD_VAR 0 1
64379: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
64380: LD_INT 2
64382: PUSH
64383: LD_INT 30
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 30
64395: PUSH
64396: LD_INT 1
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: LIST
64407: PPUSH
64408: CALL_OW 69
64412: IFFALSE 64422
64414: GO 64416
64416: DISABLE
// begin enable ;
64417: ENABLE
// UpdateSpectatorBar ;
64418: CALL 63963 0 0
// end ;
64422: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64423: LD_INT 0
64425: PPUSH
// end ;
64426: LD_VAR 0 12
64430: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64431: LD_INT 0
64433: PPUSH
64434: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64435: LD_VAR 0 1
64439: NOT
64440: IFTRUE 64459
64442: PUSH
64443: LD_VAR 0 2
64447: PPUSH
64448: LD_VAR 0 3
64452: PPUSH
64453: CALL_OW 488
64457: NOT
64458: OR
64459: IFTRUE 64494
64461: PUSH
64462: LD_VAR 0 1
64466: PPUSH
64467: CALL_OW 266
64471: PUSH
64472: LD_INT 3
64474: NONEQUAL
64475: IFFALSE 64493
64477: PUSH
64478: LD_VAR 0 1
64482: PPUSH
64483: CALL_OW 247
64487: PUSH
64488: LD_INT 1
64490: EQUAL
64491: NOT
64492: AND
64493: OR
64494: IFFALSE 64498
// exit ;
64496: GO 64780
// if GetType ( factory ) = unit_human then
64498: LD_VAR 0 1
64502: PPUSH
64503: CALL_OW 247
64507: PUSH
64508: LD_INT 1
64510: EQUAL
64511: IFFALSE 64528
// factory := IsInUnit ( factory ) ;
64513: LD_ADDR_VAR 0 1
64517: PUSH
64518: LD_VAR 0 1
64522: PPUSH
64523: CALL_OW 310
64527: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64528: LD_VAR 0 1
64532: PPUSH
64533: CALL_OW 266
64537: PUSH
64538: LD_INT 3
64540: NONEQUAL
64541: IFFALSE 64545
// exit ;
64543: GO 64780
// for i := 1 to Count ( factoryWaypoints ) do
64545: LD_ADDR_VAR 0 5
64549: PUSH
64550: DOUBLE
64551: LD_INT 1
64553: DEC
64554: ST_TO_ADDR
64555: LD_EXP 61
64559: PPUSH
64560: CALL 15752 0 1
64564: PUSH
64565: FOR_TO
64566: IFFALSE 64728
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64568: LD_VAR 0 2
64572: PPUSH
64573: LD_VAR 0 3
64577: PPUSH
64578: CALL_OW 428
64582: PUSH
64583: LD_EXP 61
64587: PUSH
64588: LD_VAR 0 5
64592: ARRAY
64593: PUSH
64594: LD_INT 2
64596: ARRAY
64597: EQUAL
64598: IFFALSE 64630
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64600: LD_ADDR_EXP 61
64604: PUSH
64605: LD_EXP 61
64609: PPUSH
64610: LD_VAR 0 5
64614: PPUSH
64615: CALL_OW 3
64619: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64620: CALL 64785 0 0
// exit ;
64624: POP
64625: POP
64626: GO 64780
// end else
64628: GO 64726
// if factory = factoryWaypoints [ i ] [ 2 ] then
64630: LD_VAR 0 1
64634: PUSH
64635: LD_EXP 61
64639: PUSH
64640: LD_VAR 0 5
64644: ARRAY
64645: PUSH
64646: LD_INT 2
64648: ARRAY
64649: EQUAL
64650: IFFALSE 64726
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64652: LD_ADDR_EXP 61
64656: PUSH
64657: LD_EXP 61
64661: PPUSH
64662: LD_VAR 0 5
64666: PPUSH
64667: CALL_OW 3
64671: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64672: LD_ADDR_EXP 61
64676: PUSH
64677: LD_EXP 61
64681: PPUSH
64682: LD_VAR 0 1
64686: PPUSH
64687: CALL_OW 255
64691: PUSH
64692: LD_VAR 0 1
64696: PUSH
64697: LD_VAR 0 2
64701: PUSH
64702: LD_VAR 0 3
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: PPUSH
64713: CALL 51728 0 2
64717: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64718: CALL 64785 0 0
// exit ;
64722: POP
64723: POP
64724: GO 64780
// end ; end ;
64726: GO 64565
64728: POP
64729: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64730: LD_ADDR_EXP 61
64734: PUSH
64735: LD_EXP 61
64739: PPUSH
64740: LD_VAR 0 1
64744: PPUSH
64745: CALL_OW 255
64749: PUSH
64750: LD_VAR 0 1
64754: PUSH
64755: LD_VAR 0 2
64759: PUSH
64760: LD_VAR 0 3
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: PPUSH
64771: CALL 51728 0 2
64775: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64776: CALL 64785 0 0
// end ;
64780: LD_VAR 0 4
64784: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64785: LD_INT 0
64787: PPUSH
64788: PPUSH
64789: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64790: LD_STRING resetFactoryWaypoint();
64792: PPUSH
64793: CALL_OW 559
// if factoryWaypoints then
64797: LD_EXP 61
64801: IFFALSE 64922
// begin list := factoryWaypoints ;
64803: LD_ADDR_VAR 0 3
64807: PUSH
64808: LD_EXP 61
64812: ST_TO_ADDR
// for i := 1 to list do
64813: LD_ADDR_VAR 0 2
64817: PUSH
64818: DOUBLE
64819: LD_INT 1
64821: DEC
64822: ST_TO_ADDR
64823: LD_VAR 0 3
64827: PUSH
64828: FOR_TO
64829: IFFALSE 64920
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64831: LD_STRING setFactoryWaypointXY(
64833: PUSH
64834: LD_VAR 0 3
64838: PUSH
64839: LD_VAR 0 2
64843: ARRAY
64844: PUSH
64845: LD_INT 1
64847: ARRAY
64848: STR
64849: PUSH
64850: LD_STRING ,
64852: STR
64853: PUSH
64854: LD_VAR 0 3
64858: PUSH
64859: LD_VAR 0 2
64863: ARRAY
64864: PUSH
64865: LD_INT 2
64867: ARRAY
64868: STR
64869: PUSH
64870: LD_STRING ,
64872: STR
64873: PUSH
64874: LD_VAR 0 3
64878: PUSH
64879: LD_VAR 0 2
64883: ARRAY
64884: PUSH
64885: LD_INT 3
64887: ARRAY
64888: STR
64889: PUSH
64890: LD_STRING ,
64892: STR
64893: PUSH
64894: LD_VAR 0 3
64898: PUSH
64899: LD_VAR 0 2
64903: ARRAY
64904: PUSH
64905: LD_INT 4
64907: ARRAY
64908: STR
64909: PUSH
64910: LD_STRING )
64912: STR
64913: PPUSH
64914: CALL_OW 559
64918: GO 64828
64920: POP
64921: POP
// end ; end ;
64922: LD_VAR 0 1
64926: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64927: LD_INT 0
64929: PPUSH
// if HexInfo ( x , y ) = warehouse then
64930: LD_VAR 0 2
64934: PPUSH
64935: LD_VAR 0 3
64939: PPUSH
64940: CALL_OW 428
64944: PUSH
64945: LD_VAR 0 1
64949: EQUAL
64950: IFFALSE 64977
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64952: LD_ADDR_EXP 63
64956: PUSH
64957: LD_EXP 63
64961: PPUSH
64962: LD_VAR 0 1
64966: PPUSH
64967: LD_INT 0
64969: PPUSH
64970: CALL_OW 1
64974: ST_TO_ADDR
64975: GO 65028
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64977: LD_ADDR_EXP 63
64981: PUSH
64982: LD_EXP 63
64986: PPUSH
64987: LD_VAR 0 1
64991: PPUSH
64992: LD_VAR 0 1
64996: PPUSH
64997: CALL_OW 255
65001: PUSH
65002: LD_VAR 0 1
65006: PUSH
65007: LD_VAR 0 2
65011: PUSH
65012: LD_VAR 0 3
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: PPUSH
65023: CALL_OW 1
65027: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65028: CALL 65037 0 0
// end ;
65032: LD_VAR 0 4
65036: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65037: LD_INT 0
65039: PPUSH
65040: PPUSH
65041: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65042: LD_STRING resetWarehouseGatheringPoints();
65044: PPUSH
65045: CALL_OW 559
// if warehouseGatheringPoints then
65049: LD_EXP 63
65053: IFFALSE 65179
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65055: LD_ADDR_VAR 0 3
65059: PUSH
65060: LD_EXP 63
65064: PPUSH
65065: CALL 55662 0 1
65069: ST_TO_ADDR
// for i := 1 to list do
65070: LD_ADDR_VAR 0 2
65074: PUSH
65075: DOUBLE
65076: LD_INT 1
65078: DEC
65079: ST_TO_ADDR
65080: LD_VAR 0 3
65084: PUSH
65085: FOR_TO
65086: IFFALSE 65177
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65088: LD_STRING setWarehouseGatheringPointXY(
65090: PUSH
65091: LD_VAR 0 3
65095: PUSH
65096: LD_VAR 0 2
65100: ARRAY
65101: PUSH
65102: LD_INT 1
65104: ARRAY
65105: STR
65106: PUSH
65107: LD_STRING ,
65109: STR
65110: PUSH
65111: LD_VAR 0 3
65115: PUSH
65116: LD_VAR 0 2
65120: ARRAY
65121: PUSH
65122: LD_INT 2
65124: ARRAY
65125: STR
65126: PUSH
65127: LD_STRING ,
65129: STR
65130: PUSH
65131: LD_VAR 0 3
65135: PUSH
65136: LD_VAR 0 2
65140: ARRAY
65141: PUSH
65142: LD_INT 3
65144: ARRAY
65145: STR
65146: PUSH
65147: LD_STRING ,
65149: STR
65150: PUSH
65151: LD_VAR 0 3
65155: PUSH
65156: LD_VAR 0 2
65160: ARRAY
65161: PUSH
65162: LD_INT 4
65164: ARRAY
65165: STR
65166: PUSH
65167: LD_STRING )
65169: STR
65170: PPUSH
65171: CALL_OW 559
65175: GO 65085
65177: POP
65178: POP
// end ; end ;
65179: LD_VAR 0 1
65183: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
65184: LD_INT 0
65186: PPUSH
65187: PPUSH
// if not mpSidePositions then
65188: LD_EXP 7
65192: NOT
65193: IFFALSE 65197
// exit ;
65195: GO 65268
// result :=  ;
65197: LD_ADDR_VAR 0 1
65201: PUSH
65202: LD_STRING 
65204: ST_TO_ADDR
// for i := 1 to 8 do
65205: LD_ADDR_VAR 0 2
65209: PUSH
65210: DOUBLE
65211: LD_INT 1
65213: DEC
65214: ST_TO_ADDR
65215: LD_INT 8
65217: PUSH
65218: FOR_TO
65219: IFFALSE 65249
// begin result := result & mpSidePositions [ i ] & ; ;
65221: LD_ADDR_VAR 0 1
65225: PUSH
65226: LD_VAR 0 1
65230: PUSH
65231: LD_EXP 7
65235: PUSH
65236: LD_VAR 0 2
65240: ARRAY
65241: STR
65242: PUSH
65243: LD_STRING ;
65245: STR
65246: ST_TO_ADDR
// end ;
65247: GO 65218
65249: POP
65250: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
65251: LD_STRING setMultiplayerRealPosition("
65253: PUSH
65254: LD_VAR 0 1
65258: STR
65259: PUSH
65260: LD_STRING ");
65262: STR
65263: PPUSH
65264: CALL_OW 559
// end ; end_of_file
65268: LD_VAR 0 1
65272: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalHardcore do var i ;
65273: LD_EXP 39
65277: IFFALSE 65320
65279: GO 65281
65281: DISABLE
65282: LD_INT 0
65284: PPUSH
// begin for i := 1 to 8 do
65285: LD_ADDR_VAR 0 1
65289: PUSH
65290: DOUBLE
65291: LD_INT 1
65293: DEC
65294: ST_TO_ADDR
65295: LD_INT 8
65297: PUSH
65298: FOR_TO
65299: IFFALSE 65318
// SetRestrict ( b_depot , i , state_disabled ) ;
65301: LD_INT 0
65303: PPUSH
65304: LD_VAR 0 1
65308: PPUSH
65309: LD_INT 0
65311: PPUSH
65312: CALL_OW 324
65316: GO 65298
65318: POP
65319: POP
// end ;
65320: PPOPN 1
65322: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalHardcore do var i , canWin ;
65323: LD_EXP 39
65327: IFFALSE 65335
65329: PUSH
65330: CALL 65545 0 0
65334: AND
65335: IFFALSE 65343
65337: PUSH
65338: LD_OWVAR 4
65342: AND
65343: IFFALSE 65542
65345: GO 65347
65347: DISABLE
65348: LD_INT 0
65350: PPUSH
65351: PPUSH
// begin canWin := false ;
65352: LD_ADDR_VAR 0 2
65356: PUSH
65357: LD_INT 0
65359: ST_TO_ADDR
// if not HasPower ( your_side ) then
65360: LD_OWVAR 2
65364: PPUSH
65365: CALL 65587 0 1
65369: NOT
65370: IFFALSE 65381
// begin Multiplayer_Loose_Message ;
65372: CALL_OW 521
// enable ( mpLose ) ;
65376: LD_INT 102
65378: ENABLE_MARKED
// end else
65379: GO 65542
// begin canWin := true ;
65381: LD_ADDR_VAR 0 2
65385: PUSH
65386: LD_INT 1
65388: ST_TO_ADDR
// for i := 1 to 8 do
65389: LD_ADDR_VAR 0 1
65393: PUSH
65394: DOUBLE
65395: LD_INT 1
65397: DEC
65398: ST_TO_ADDR
65399: LD_INT 8
65401: PUSH
65402: FOR_TO
65403: IFFALSE 65528
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
65405: LD_EXP 7
65409: PUSH
65410: LD_VAR 0 1
65414: ARRAY
65415: IFFALSE 65428
65417: PUSH
65418: LD_VAR 0 1
65422: PPUSH
65423: CALL_OW 108
65427: AND
65428: IFFALSE 65442
65430: PUSH
65431: LD_VAR 0 1
65435: PUSH
65436: LD_OWVAR 2
65440: NONEQUAL
65441: AND
65442: IFFALSE 65526
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
65444: LD_EXP 8
65448: PUSH
65449: LD_VAR 0 1
65453: ARRAY
65454: NOT
65455: IFTRUE 65503
65457: PUSH
65458: LD_EXP 8
65462: PUSH
65463: LD_VAR 0 1
65467: ARRAY
65468: PUSH
65469: LD_EXP 8
65473: PUSH
65474: LD_OWVAR 2
65478: ARRAY
65479: NONEQUAL
65480: IFFALSE 65502
65482: PUSH
65483: LD_OWVAR 2
65487: PPUSH
65488: LD_VAR 0 1
65492: PPUSH
65493: CALL_OW 81
65497: PUSH
65498: LD_INT 1
65500: NONEQUAL
65501: AND
65502: OR
65503: IFFALSE 65526
// if HasPower ( i ) then
65505: LD_VAR 0 1
65509: PPUSH
65510: CALL 65587 0 1
65514: IFFALSE 65526
// begin canWin := false ;
65516: LD_ADDR_VAR 0 2
65520: PUSH
65521: LD_INT 0
65523: ST_TO_ADDR
// break ;
65524: GO 65528
// end ;
65526: GO 65402
65528: POP
65529: POP
// if canWin then
65530: LD_VAR 0 2
65534: IFFALSE 65541
// enable ( mpWin ) else
65536: LD_INT 101
65538: ENABLE_MARKED
65539: GO 65542
// enable ;
65541: ENABLE
// end ; end ;
65542: PPOPN 2
65544: END
// function CanWinLoose ; begin
65545: LD_INT 0
65547: PPUSH
// result := true ;
65548: LD_ADDR_VAR 0 1
65552: PUSH
65553: LD_INT 1
65555: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
65556: CALL_OW 531
65560: IFFALSE 65572
65562: PUSH
65563: CALL_OW 519
65567: PUSH
65568: LD_INT 1
65570: GREATER
65571: AND
65572: IFFALSE 65582
// result := false ;
65574: LD_ADDR_VAR 0 1
65578: PUSH
65579: LD_INT 0
65581: ST_TO_ADDR
// end ;
65582: LD_VAR 0 1
65586: RET
// function HasPower ( i ) ; begin
65587: LD_INT 0
65589: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
65590: LD_INT 22
65592: PUSH
65593: LD_VAR 0 1
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 2
65604: PUSH
65605: LD_INT 30
65607: PUSH
65608: LD_INT 0
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 30
65617: PUSH
65618: LD_INT 1
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: LIST
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PPUSH
65634: CALL_OW 69
65638: NOT
65639: IFFALSE 65643
// exit ;
65641: GO 65708
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
65643: LD_ADDR_VAR 0 2
65647: PUSH
65648: LD_INT 22
65650: PUSH
65651: LD_VAR 0 1
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 2
65662: PUSH
65663: LD_INT 21
65665: PUSH
65666: LD_INT 1
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 33
65675: PUSH
65676: LD_INT 3
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 33
65685: PUSH
65686: LD_INT 5
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PPUSH
65703: CALL_OW 69
65707: ST_TO_ADDR
// end ;
65708: LD_VAR 0 2
65712: RET
