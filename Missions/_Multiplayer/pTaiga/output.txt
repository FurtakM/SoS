// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 3235 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3611 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 2 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 2
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 11
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 240 , 200 ] ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_INT 240
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 19
 849: PUSH
 850: LD_INT 1
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: LD_INT 6
 867: PUSH
 868: LD_INT 7
 870: PUSH
 871: LD_INT 8
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , CenterArea ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 18
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 11
 894: PUSH
 895: LD_INT 12
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 14
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_EXP 19
 915: UNION
 916: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 917: LD_VAR 0 1
 921: PUSH
 922: LD_INT 2
 924: EQUAL
 925: IFFALSE 937
// baseLevel := 1 else
 927: LD_ADDR_VAR 0 7
 931: PUSH
 932: LD_INT 1
 934: ST_TO_ADDR
 935: GO 951
// baseLevel := mpGameSettings [ 1 ] ;
 937: LD_ADDR_VAR 0 7
 941: PUSH
 942: LD_EXP 6
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 951: LD_ADDR_EXP 24
 955: PUSH
 956: LD_EXP 6
 960: PUSH
 961: LD_INT 2
 963: ARRAY
 964: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 965: LD_ADDR_EXP 25
 969: PUSH
 970: LD_EXP 6
 974: PUSH
 975: LD_INT 3
 977: ARRAY
 978: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 979: LD_ADDR_EXP 15
 983: PUSH
 984: LD_EXP 6
 988: PUSH
 989: LD_INT 4
 991: ARRAY
 992: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 993: LD_ADDR_EXP 27
 997: PUSH
 998: LD_EXP 6
1002: PUSH
1003: LD_INT 5
1005: ARRAY
1006: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1007: LD_ADDR_VAR 0 5
1011: PUSH
1012: LD_EXP 6
1016: PUSH
1017: LD_INT 6
1019: ARRAY
1020: PUSH
1021: LD_INT 0
1023: GREATER
1024: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1025: LD_ADDR_VAR 0 6
1029: PUSH
1030: LD_EXP 6
1034: PUSH
1035: LD_INT 7
1037: ARRAY
1038: PUSH
1039: LD_INT 0
1041: GREATER
1042: ST_TO_ADDR
// kingCamArea := 0 ;
1043: LD_ADDR_EXP 2
1047: PUSH
1048: LD_INT 0
1050: ST_TO_ADDR
// kingArea := 0 ;
1051: LD_ADDR_EXP 1
1055: PUSH
1056: LD_INT 0
1058: ST_TO_ADDR
// if gameType = GameTypeKing then
1059: LD_VAR 0 1
1063: PUSH
1064: LD_INT 3
1066: EQUAL
1067: IFFALSE 1107
// begin mpKingArea := 0 ;
1069: LD_ADDR_EXP 34
1073: PUSH
1074: LD_INT 0
1076: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1077: LD_ADDR_EXP 35
1081: PUSH
1082: LD_EXP 6
1086: PUSH
1087: LD_INT 8
1089: ARRAY
1090: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1091: LD_ADDR_EXP 37
1095: PUSH
1096: LD_EXP 6
1100: PUSH
1101: LD_INT 10
1103: ARRAY
1104: ST_TO_ADDR
// end else
1105: GO 1131
// begin mpKingArea := 0 ;
1107: LD_ADDR_EXP 34
1111: PUSH
1112: LD_INT 0
1114: ST_TO_ADDR
// mpPoints := 0 ;
1115: LD_ADDR_EXP 35
1119: PUSH
1120: LD_INT 0
1122: ST_TO_ADDR
// mpEmissions := 0 ;
1123: LD_ADDR_EXP 37
1127: PUSH
1128: LD_INT 0
1130: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1131: LD_EXP 6
1135: PUSH
1136: LD_INT 9
1138: ARRAY
1139: IFFALSE 1271
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1141: LD_ADDR_EXP 36
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 2
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: LD_INT 1
1169: PUSH
1170: LD_INT 1
1172: PUSH
1173: LD_INT 3
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: PUSH
1186: LD_INT 12
1188: PUSH
1189: LD_INT 1
1191: PUSH
1192: LD_INT 1
1194: PUSH
1195: LD_INT 24
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: PUSH
1204: LD_INT 12
1206: PUSH
1207: LD_INT 1
1209: PUSH
1210: LD_INT 1
1212: PUSH
1213: LD_INT 23
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PUSH
1226: LD_INT 21
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: LD_INT 1
1234: PUSH
1235: LD_INT 42
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: PUSH
1244: LD_INT 21
1246: PUSH
1247: LD_INT 1
1249: PUSH
1250: LD_INT 1
1252: PUSH
1253: LD_INT 42
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: LIST
1270: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: LD_EXP 6
1280: PUSH
1281: LD_INT 11
1283: ARRAY
1284: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1285: LD_ADDR_EXP 22
1289: PUSH
1290: LD_EXP 6
1294: PUSH
1295: LD_INT 12
1297: ARRAY
1298: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1299: LD_ADDR_EXP 26
1303: PUSH
1304: LD_EXP 6
1308: PUSH
1309: LD_INT 13
1311: ARRAY
1312: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1313: LD_ADDR_EXP 33
1317: PUSH
1318: LD_EXP 6
1322: PUSH
1323: LD_INT 14
1325: ARRAY
1326: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1327: LD_ADDR_EXP 30
1331: PUSH
1332: LD_EXP 6
1336: PUSH
1337: LD_INT 15
1339: ARRAY
1340: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1341: LD_ADDR_EXP 28
1345: PUSH
1346: LD_EXP 6
1350: PUSH
1351: LD_INT 18
1353: ARRAY
1354: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1355: LD_ADDR_EXP 20
1359: PUSH
1360: LD_EXP 6
1364: PUSH
1365: LD_INT 21
1367: ARRAY
1368: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1369: LD_ADDR_EXP 31
1373: PUSH
1374: LD_INT 19
1376: PUSH
1377: LD_INT 20
1379: PUSH
1380: LD_INT 21
1382: PUSH
1383: LD_INT 22
1385: PUSH
1386: LD_INT 23
1388: PUSH
1389: LD_INT 24
1391: PUSH
1392: LD_INT 25
1394: PUSH
1395: LD_INT 26
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 0 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 4 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 1 ) , GetBuildingFromArea ( depotArea8 , 0 ) ] ;
1408: LD_ADDR_VAR 0 8
1412: PUSH
1413: LD_INT 27
1415: PPUSH
1416: LD_INT 0
1418: PPUSH
1419: CALL 55089 0 2
1423: PUSH
1424: LD_INT 35
1426: PPUSH
1427: LD_INT 2
1429: PPUSH
1430: CALL 55089 0 2
1434: PUSH
1435: LD_INT 43
1437: PPUSH
1438: LD_INT 4
1440: PPUSH
1441: CALL 55089 0 2
1445: PUSH
1446: LD_INT 51
1448: PPUSH
1449: LD_INT 3
1451: PPUSH
1452: CALL 55089 0 2
1456: PUSH
1457: LD_INT 59
1459: PPUSH
1460: LD_INT 3
1462: PPUSH
1463: CALL 55089 0 2
1467: PUSH
1468: LD_INT 67
1470: PPUSH
1471: LD_INT 5
1473: PPUSH
1474: CALL 55089 0 2
1478: PUSH
1479: LD_INT 75
1481: PPUSH
1482: LD_INT 1
1484: PPUSH
1485: CALL 55089 0 2
1489: PUSH
1490: LD_INT 83
1492: PPUSH
1493: LD_INT 0
1495: PPUSH
1496: CALL 55089 0 2
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: DOUBLE
1517: LD_INT 1
1519: DEC
1520: ST_TO_ADDR
1521: LD_VAR 0 8
1525: PPUSH
1526: CALL 14438 0 1
1530: PUSH
1531: FOR_TO
1532: IFFALSE 1636
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1534: LD_ADDR_EXP 21
1538: PUSH
1539: LD_EXP 21
1543: PPUSH
1544: LD_VAR 0 3
1548: PPUSH
1549: LD_VAR 0 8
1553: PUSH
1554: LD_VAR 0 3
1558: ARRAY
1559: PUSH
1560: LD_INT 1
1562: ARRAY
1563: PPUSH
1564: LD_VAR 0 8
1568: PUSH
1569: LD_VAR 0 3
1573: ARRAY
1574: PUSH
1575: LD_INT 3
1577: ARRAY
1578: PPUSH
1579: LD_INT 10
1581: PPUSH
1582: CALL_OW 272
1586: PUSH
1587: LD_VAR 0 8
1591: PUSH
1592: LD_VAR 0 3
1596: ARRAY
1597: PUSH
1598: LD_INT 2
1600: ARRAY
1601: PPUSH
1602: LD_VAR 0 8
1606: PUSH
1607: LD_VAR 0 3
1611: ARRAY
1612: PUSH
1613: LD_INT 3
1615: ARRAY
1616: PPUSH
1617: LD_INT 10
1619: PPUSH
1620: CALL_OW 273
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PPUSH
1629: CALL_OW 1
1633: ST_TO_ADDR
1634: GO 1531
1636: POP
1637: POP
// if hasOil then
1638: LD_VAR 0 5
1642: IFFALSE 1781
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1644: LD_ADDR_VAR 0 4
1648: PUSH
1649: LD_EXP 6
1653: PUSH
1654: LD_INT 6
1656: ARRAY
1657: PUSH
1658: LD_INT 2
1660: EQUAL
1661: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1662: LD_ADDR_EXP 12
1666: PUSH
1667: LD_INT 33
1669: PPUSH
1670: LD_VAR 0 4
1674: PPUSH
1675: CALL 54922 0 2
1679: PUSH
1680: LD_INT 41
1682: PPUSH
1683: LD_VAR 0 4
1687: PPUSH
1688: CALL 54922 0 2
1692: PUSH
1693: LD_INT 49
1695: PPUSH
1696: LD_VAR 0 4
1700: PPUSH
1701: CALL 54922 0 2
1705: PUSH
1706: LD_INT 57
1708: PPUSH
1709: LD_VAR 0 4
1713: PPUSH
1714: CALL 54922 0 2
1718: PUSH
1719: LD_INT 65
1721: PPUSH
1722: LD_VAR 0 4
1726: PPUSH
1727: CALL 54922 0 2
1731: PUSH
1732: LD_INT 73
1734: PPUSH
1735: LD_VAR 0 4
1739: PPUSH
1740: CALL 54922 0 2
1744: PUSH
1745: LD_INT 81
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL 54922 0 2
1757: PUSH
1758: LD_INT 89
1760: PPUSH
1761: LD_VAR 0 4
1765: PPUSH
1766: CALL 54922 0 2
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: ST_TO_ADDR
// end ; if hasSib then
1781: LD_VAR 0 6
1785: IFFALSE 1924
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1787: LD_ADDR_VAR 0 4
1791: PUSH
1792: LD_EXP 6
1796: PUSH
1797: LD_INT 7
1799: ARRAY
1800: PUSH
1801: LD_INT 2
1803: EQUAL
1804: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1805: LD_ADDR_EXP 13
1809: PUSH
1810: LD_INT 34
1812: PPUSH
1813: LD_VAR 0 4
1817: PPUSH
1818: CALL 54922 0 2
1822: PUSH
1823: LD_INT 42
1825: PPUSH
1826: LD_VAR 0 4
1830: PPUSH
1831: CALL 54922 0 2
1835: PUSH
1836: LD_INT 50
1838: PPUSH
1839: LD_VAR 0 4
1843: PPUSH
1844: CALL 54922 0 2
1848: PUSH
1849: LD_INT 58
1851: PPUSH
1852: LD_VAR 0 4
1856: PPUSH
1857: CALL 54922 0 2
1861: PUSH
1862: LD_INT 66
1864: PPUSH
1865: LD_VAR 0 4
1869: PPUSH
1870: CALL 54922 0 2
1874: PUSH
1875: LD_INT 74
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL 54922 0 2
1887: PUSH
1888: LD_INT 82
1890: PPUSH
1891: LD_VAR 0 4
1895: PPUSH
1896: CALL 54922 0 2
1900: PUSH
1901: LD_INT 90
1903: PPUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: CALL 54922 0 2
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1924: LD_VAR 0 7
1928: PUSH
1929: LD_INT 1
1931: GREATEREQUAL
1932: IFFALSE 1944
// mpDepots := startPos ;
1934: LD_ADDR_EXP 14
1938: PUSH
1939: LD_VAR 0 8
1943: ST_TO_ADDR
// if baseLevel >= 2 then
1944: LD_VAR 0 7
1948: PUSH
1949: LD_INT 2
1951: GREATEREQUAL
1952: IFFALSE 2625
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1c , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1d , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2c , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2d , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3c , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3d , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4c , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4d , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5c , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5d , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6c , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6d , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7c , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7d , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8c , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8d , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 3 ) ] ] ;
1954: LD_ADDR_EXP 17
1958: PUSH
1959: LD_INT 31
1961: PUSH
1962: LD_INT 29
1964: PPUSH
1965: LD_INT 3
1967: PPUSH
1968: CALL 55089 0 2
1972: ADD
1973: PUSH
1974: LD_INT 31
1976: PUSH
1977: LD_INT 30
1979: PPUSH
1980: LD_INT 3
1982: PPUSH
1983: CALL 55089 0 2
1987: ADD
1988: PUSH
1989: LD_INT 31
1991: PUSH
1992: LD_INT 31
1994: PPUSH
1995: LD_INT 5
1997: PPUSH
1998: CALL 55089 0 2
2002: ADD
2003: PUSH
2004: LD_INT 31
2006: PUSH
2007: LD_INT 32
2009: PPUSH
2010: LD_INT 2
2012: PPUSH
2013: CALL 55089 0 2
2017: ADD
2018: PUSH
2019: LD_INT 4
2021: PUSH
2022: LD_INT 28
2024: PPUSH
2025: LD_INT 3
2027: PPUSH
2028: CALL 55089 0 2
2032: ADD
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: PUSH
2041: LD_INT 31
2043: PUSH
2044: LD_INT 37
2046: PPUSH
2047: LD_INT 3
2049: PPUSH
2050: CALL 55089 0 2
2054: ADD
2055: PUSH
2056: LD_INT 31
2058: PUSH
2059: LD_INT 38
2061: PPUSH
2062: LD_INT 5
2064: PPUSH
2065: CALL 55089 0 2
2069: ADD
2070: PUSH
2071: LD_INT 31
2073: PUSH
2074: LD_INT 39
2076: PPUSH
2077: LD_INT 5
2079: PPUSH
2080: CALL 55089 0 2
2084: ADD
2085: PUSH
2086: LD_INT 31
2088: PUSH
2089: LD_INT 40
2091: PPUSH
2092: LD_INT 0
2094: PPUSH
2095: CALL 55089 0 2
2099: ADD
2100: PUSH
2101: LD_INT 4
2103: PUSH
2104: LD_INT 36
2106: PPUSH
2107: LD_INT 5
2109: PPUSH
2110: CALL 55089 0 2
2114: ADD
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: PUSH
2123: LD_INT 31
2125: PUSH
2126: LD_INT 45
2128: PPUSH
2129: LD_INT 1
2131: PPUSH
2132: CALL 55089 0 2
2136: ADD
2137: PUSH
2138: LD_INT 31
2140: PUSH
2141: LD_INT 46
2143: PPUSH
2144: LD_INT 1
2146: PPUSH
2147: CALL 55089 0 2
2151: ADD
2152: PUSH
2153: LD_INT 31
2155: PUSH
2156: LD_INT 47
2158: PPUSH
2159: LD_INT 5
2161: PPUSH
2162: CALL 55089 0 2
2166: ADD
2167: PUSH
2168: LD_INT 31
2170: PUSH
2171: LD_INT 48
2173: PPUSH
2174: LD_INT 5
2176: PPUSH
2177: CALL 55089 0 2
2181: ADD
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: LD_INT 44
2188: PPUSH
2189: LD_INT 1
2191: PPUSH
2192: CALL 55089 0 2
2196: ADD
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 31
2207: PUSH
2208: LD_INT 53
2210: PPUSH
2211: LD_INT 0
2213: PPUSH
2214: CALL 55089 0 2
2218: ADD
2219: PUSH
2220: LD_INT 31
2222: PUSH
2223: LD_INT 54
2225: PPUSH
2226: LD_INT 5
2228: PPUSH
2229: CALL 55089 0 2
2233: ADD
2234: PUSH
2235: LD_INT 31
2237: PUSH
2238: LD_INT 55
2240: PPUSH
2241: LD_INT 5
2243: PPUSH
2244: CALL 55089 0 2
2248: ADD
2249: PUSH
2250: LD_INT 31
2252: PUSH
2253: LD_INT 56
2255: PPUSH
2256: LD_INT 2
2258: PPUSH
2259: CALL 55089 0 2
2263: ADD
2264: PUSH
2265: LD_INT 4
2267: PUSH
2268: LD_INT 52
2270: PPUSH
2271: LD_INT 0
2273: PPUSH
2274: CALL 55089 0 2
2278: ADD
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: PUSH
2287: LD_INT 31
2289: PUSH
2290: LD_INT 61
2292: PPUSH
2293: LD_INT 0
2295: PPUSH
2296: CALL 55089 0 2
2300: ADD
2301: PUSH
2302: LD_INT 31
2304: PUSH
2305: LD_INT 62
2307: PPUSH
2308: LD_INT 0
2310: PPUSH
2311: CALL 55089 0 2
2315: ADD
2316: PUSH
2317: LD_INT 31
2319: PUSH
2320: LD_INT 63
2322: PPUSH
2323: LD_INT 2
2325: PPUSH
2326: CALL 55089 0 2
2330: ADD
2331: PUSH
2332: LD_INT 31
2334: PUSH
2335: LD_INT 64
2337: PPUSH
2338: LD_INT 2
2340: PPUSH
2341: CALL 55089 0 2
2345: ADD
2346: PUSH
2347: LD_INT 4
2349: PUSH
2350: LD_INT 60
2352: PPUSH
2353: LD_INT 0
2355: PPUSH
2356: CALL 55089 0 2
2360: ADD
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: PUSH
2369: LD_INT 31
2371: PUSH
2372: LD_INT 69
2374: PPUSH
2375: LD_INT 0
2377: PPUSH
2378: CALL 55089 0 2
2382: ADD
2383: PUSH
2384: LD_INT 31
2386: PUSH
2387: LD_INT 70
2389: PPUSH
2390: LD_INT 3
2392: PPUSH
2393: CALL 55089 0 2
2397: ADD
2398: PUSH
2399: LD_INT 31
2401: PUSH
2402: LD_INT 71
2404: PPUSH
2405: LD_INT 2
2407: PPUSH
2408: CALL 55089 0 2
2412: ADD
2413: PUSH
2414: LD_INT 31
2416: PUSH
2417: LD_INT 72
2419: PPUSH
2420: LD_INT 2
2422: PPUSH
2423: CALL 55089 0 2
2427: ADD
2428: PUSH
2429: LD_INT 4
2431: PUSH
2432: LD_INT 68
2434: PPUSH
2435: LD_INT 2
2437: PPUSH
2438: CALL 55089 0 2
2442: ADD
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 31
2453: PUSH
2454: LD_INT 77
2456: PPUSH
2457: LD_INT 4
2459: PPUSH
2460: CALL 55089 0 2
2464: ADD
2465: PUSH
2466: LD_INT 31
2468: PUSH
2469: LD_INT 78
2471: PPUSH
2472: LD_INT 4
2474: PPUSH
2475: CALL 55089 0 2
2479: ADD
2480: PUSH
2481: LD_INT 31
2483: PUSH
2484: LD_INT 79
2486: PPUSH
2487: LD_INT 2
2489: PPUSH
2490: CALL 55089 0 2
2494: ADD
2495: PUSH
2496: LD_INT 31
2498: PUSH
2499: LD_INT 80
2501: PPUSH
2502: LD_INT 2
2504: PPUSH
2505: CALL 55089 0 2
2509: ADD
2510: PUSH
2511: LD_INT 4
2513: PUSH
2514: LD_INT 76
2516: PPUSH
2517: LD_INT 4
2519: PPUSH
2520: CALL 55089 0 2
2524: ADD
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: PUSH
2533: LD_INT 31
2535: PUSH
2536: LD_INT 85
2538: PPUSH
2539: LD_INT 3
2541: PPUSH
2542: CALL 55089 0 2
2546: ADD
2547: PUSH
2548: LD_INT 31
2550: PUSH
2551: LD_INT 86
2553: PPUSH
2554: LD_INT 2
2556: PPUSH
2557: CALL 55089 0 2
2561: ADD
2562: PUSH
2563: LD_INT 31
2565: PUSH
2566: LD_INT 87
2568: PPUSH
2569: LD_INT 2
2571: PPUSH
2572: CALL 55089 0 2
2576: ADD
2577: PUSH
2578: LD_INT 31
2580: PUSH
2581: LD_INT 88
2583: PPUSH
2584: LD_INT 5
2586: PPUSH
2587: CALL 55089 0 2
2591: ADD
2592: PUSH
2593: LD_INT 4
2595: PUSH
2596: LD_INT 84
2598: PPUSH
2599: LD_INT 3
2601: PPUSH
2602: CALL 55089 0 2
2606: ADD
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: ST_TO_ADDR
// end ; end ;
2625: LD_VAR 0 2
2629: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2630: GO 2632
2632: DISABLE
2633: LD_INT 0
2635: PPUSH
2636: PPUSH
2637: PPUSH
2638: PPUSH
2639: PPUSH
2640: PPUSH
2641: PPUSH
2642: PPUSH
// begin if not mpShipments then
2643: LD_EXP 27
2647: NOT
2648: IFFALSE 2652
// exit ;
2650: GO 3148
// case mpShipments of 1 :
2652: LD_EXP 27
2656: PUSH
2657: LD_INT 1
2659: DOUBLE
2660: EQUAL
2661: IFTRUE 2665
2663: GO 2700
2665: POP
// begin time := 0 0$30 ;
2666: LD_ADDR_VAR 0 5
2670: PUSH
2671: LD_INT 1050
2673: ST_TO_ADDR
// normalTime := 0 0$30 ;
2674: LD_ADDR_VAR 0 6
2678: PUSH
2679: LD_INT 1050
2681: ST_TO_ADDR
// maxTime := 1 1$20 ;
2682: LD_ADDR_VAR 0 8
2686: PUSH
2687: LD_INT 2800
2689: ST_TO_ADDR
// delayTime := 0 0$5 ;
2690: LD_ADDR_VAR 0 7
2694: PUSH
2695: LD_INT 175
2697: ST_TO_ADDR
// end ; 2 :
2698: GO 2830
2700: LD_INT 2
2702: DOUBLE
2703: EQUAL
2704: IFTRUE 2708
2706: GO 2743
2708: POP
// begin time := 0 0$25 ;
2709: LD_ADDR_VAR 0 5
2713: PUSH
2714: LD_INT 875
2716: ST_TO_ADDR
// normalTime := 0 0$25 ;
2717: LD_ADDR_VAR 0 6
2721: PUSH
2722: LD_INT 875
2724: ST_TO_ADDR
// maxTime := 1 1$10 ;
2725: LD_ADDR_VAR 0 8
2729: PUSH
2730: LD_INT 2450
2732: ST_TO_ADDR
// delayTime := 0 0$4 ;
2733: LD_ADDR_VAR 0 7
2737: PUSH
2738: LD_INT 140
2740: ST_TO_ADDR
// end ; 3 :
2741: GO 2830
2743: LD_INT 3
2745: DOUBLE
2746: EQUAL
2747: IFTRUE 2751
2749: GO 2786
2751: POP
// begin time := 0 0$20 ;
2752: LD_ADDR_VAR 0 5
2756: PUSH
2757: LD_INT 700
2759: ST_TO_ADDR
// normalTime := 0 0$20 ;
2760: LD_ADDR_VAR 0 6
2764: PUSH
2765: LD_INT 700
2767: ST_TO_ADDR
// maxTime := 1 1$00 ;
2768: LD_ADDR_VAR 0 8
2772: PUSH
2773: LD_INT 2100
2775: ST_TO_ADDR
// delayTime := 0 0$3 ;
2776: LD_ADDR_VAR 0 7
2780: PUSH
2781: LD_INT 105
2783: ST_TO_ADDR
// end ; 4 :
2784: GO 2830
2786: LD_INT 4
2788: DOUBLE
2789: EQUAL
2790: IFTRUE 2794
2792: GO 2829
2794: POP
// begin time := 0 0$15 ;
2795: LD_ADDR_VAR 0 5
2799: PUSH
2800: LD_INT 525
2802: ST_TO_ADDR
// normalTime := 0 0$15 ;
2803: LD_ADDR_VAR 0 6
2807: PUSH
2808: LD_INT 525
2810: ST_TO_ADDR
// maxTime := 0 0$55 ;
2811: LD_ADDR_VAR 0 8
2815: PUSH
2816: LD_INT 1925
2818: ST_TO_ADDR
// delayTime := 0 0$2 ;
2819: LD_ADDR_VAR 0 7
2823: PUSH
2824: LD_INT 70
2826: ST_TO_ADDR
// end ; end ;
2827: GO 2830
2829: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , HillArea1 , HillArea2 , OuterArea1 , OuterArea2 ] ;
2830: LD_ADDR_VAR 0 4
2834: PUSH
2835: LD_INT 10
2837: PUSH
2838: LD_INT 11
2840: PUSH
2841: LD_INT 12
2843: PUSH
2844: LD_INT 13
2846: PUSH
2847: LD_INT 15
2849: PUSH
2850: LD_INT 16
2852: PUSH
2853: LD_INT 17
2855: PUSH
2856: LD_INT 18
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: LIST
2868: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2869: LD_ADDR_VAR 0 3
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: LD_INT 2
2879: PUSH
2880: LD_INT 3
2882: PUSH
2883: LD_INT 4
2885: PUSH
2886: LD_INT 5
2888: PUSH
2889: LD_INT 6
2891: PUSH
2892: LD_INT 7
2894: PUSH
2895: LD_INT 8
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: LIST
2902: LIST
2903: LIST
2904: LIST
2905: LIST
2906: LIST
2907: ST_TO_ADDR
// for i := 1 to 8 do
2908: LD_ADDR_VAR 0 1
2912: PUSH
2913: DOUBLE
2914: LD_INT 1
2916: DEC
2917: ST_TO_ADDR
2918: LD_INT 8
2920: PUSH
2921: FOR_TO
2922: IFFALSE 2969
// begin if not mpSidePositions [ i ] then
2924: LD_EXP 7
2928: PUSH
2929: LD_VAR 0 1
2933: ARRAY
2934: NOT
2935: IFFALSE 2939
// continue ;
2937: GO 2921
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2939: LD_ADDR_VAR 0 4
2943: PUSH
2944: LD_VAR 0 4
2948: PUSH
2949: LD_VAR 0 3
2953: PUSH
2954: LD_EXP 7
2958: PUSH
2959: LD_VAR 0 1
2963: ARRAY
2964: ARRAY
2965: ADD
2966: ST_TO_ADDR
// end ;
2967: GO 2921
2969: POP
2970: POP
// x := 1 ;
2971: LD_ADDR_VAR 0 2
2975: PUSH
2976: LD_INT 1
2978: ST_TO_ADDR
// repeat wait ( time ) ;
2979: LD_VAR 0 5
2983: PPUSH
2984: CALL_OW 67
// x := Inc ( x ) ;
2988: LD_ADDR_VAR 0 2
2992: PUSH
2993: LD_VAR 0 2
2997: PPUSH
2998: CALL 51743 0 1
3002: ST_TO_ADDR
// if x > 5 then
3003: LD_VAR 0 2
3007: PUSH
3008: LD_INT 5
3010: GREATER
3011: IFFALSE 3021
// x := 1 ;
3013: LD_ADDR_VAR 0 2
3017: PUSH
3018: LD_INT 1
3020: ST_TO_ADDR
// for i in areas do
3021: LD_ADDR_VAR 0 1
3025: PUSH
3026: LD_VAR 0 4
3030: PUSH
3031: FOR_IN
3032: IFFALSE 3071
// begin if GetResourceArea ( i , mat_cans ) < 30 then
3034: LD_VAR 0 1
3038: PPUSH
3039: LD_INT 1
3041: PPUSH
3042: CALL_OW 287
3046: PUSH
3047: LD_INT 30
3049: LESS
3050: IFFALSE 3069
// begin CreateCratesArea ( x , i , true ) ;
3052: LD_VAR 0 2
3056: PPUSH
3057: LD_VAR 0 1
3061: PPUSH
3062: LD_INT 1
3064: PPUSH
3065: CALL_OW 55
// end ; end ;
3069: GO 3031
3071: POP
3072: POP
// if GetResourceArea ( CenterArea , mat_cans ) < 60 then
3073: LD_INT 14
3075: PPUSH
3076: LD_INT 1
3078: PPUSH
3079: CALL_OW 287
3083: PUSH
3084: LD_INT 60
3086: LESS
3087: IFFALSE 3106
// CreateCratesArea ( x , i , true ) ;
3089: LD_VAR 0 2
3093: PPUSH
3094: LD_VAR 0 1
3098: PPUSH
3099: LD_INT 1
3101: PPUSH
3102: CALL_OW 55
// time := time + delayTime ;
3106: LD_ADDR_VAR 0 5
3110: PUSH
3111: LD_VAR 0 5
3115: PUSH
3116: LD_VAR 0 7
3120: PLUS
3121: ST_TO_ADDR
// if time > maxTime then
3122: LD_VAR 0 5
3126: PUSH
3127: LD_VAR 0 8
3131: GREATER
3132: IFFALSE 3144
// time := normalTime ;
3134: LD_ADDR_VAR 0 5
3138: PUSH
3139: LD_VAR 0 6
3143: ST_TO_ADDR
// until false ;
3144: LD_INT 0
3146: IFFALSE 2979
// end ; end_of_file
3148: PPOPN 8
3150: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3151: LD_VAR 0 1
3155: PPUSH
3156: CALL 55887 0 1
// Multiplayer_UnitDestroyed ( un ) ;
3160: LD_VAR 0 1
3164: PPUSH
3165: CALL 8383 0 1
// end ;
3169: PPOPN 1
3171: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
3172: LD_VAR 0 1
3176: PPUSH
3177: CALL 55904 0 1
// end ;
3181: PPOPN 1
3183: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
3184: LD_VAR 0 1
3188: PPUSH
3189: CALL 9090 0 1
3193: PPOPN 1
3195: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
3196: LD_VAR 0 1
3200: PPUSH
3201: LD_VAR 0 2
3205: PPUSH
3206: CALL 55945 0 2
3210: PPOPN 2
3212: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
3213: LD_VAR 0 1
3217: PPUSH
3218: LD_VAR 0 2
3222: PPUSH
3223: LD_VAR 0 3
3227: PPUSH
3228: CALL 9143 0 3
3232: PPOPN 3
3234: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
3235: LD_INT 0
3237: PPUSH
3238: PPUSH
// disable ( mpActive ) ;
3239: LD_INT 100
3241: DISABLE_MARKED
// disable ( mpWin ) ;
3242: LD_INT 101
3244: DISABLE_MARKED
// disable ( mpLose ) ;
3245: LD_INT 102
3247: DISABLE_MARKED
// mpGameType := 0 ;
3248: LD_ADDR_EXP 3
3252: PUSH
3253: LD_INT 0
3255: ST_TO_ADDR
// mpGameSettings := [ ] ;
3256: LD_ADDR_EXP 6
3260: PUSH
3261: EMPTY
3262: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
3263: LD_ADDR_EXP 4
3267: PUSH
3268: EMPTY
3269: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
3270: LD_ADDR_EXP 5
3274: PUSH
3275: EMPTY
3276: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
3277: LD_ADDR_EXP 29
3281: PUSH
3282: LD_INT 2
3284: PUSH
3285: LD_INT 2
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: ST_TO_ADDR
// mpOilDeposits := [ ] ;
3292: LD_ADDR_EXP 12
3296: PUSH
3297: EMPTY
3298: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3299: LD_ADDR_EXP 13
3303: PUSH
3304: EMPTY
3305: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
3306: LD_ADDR_EXP 41
3310: PUSH
3311: EMPTY
3312: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
3313: LD_ADDR_EXP 42
3317: PUSH
3318: EMPTY
3319: ST_TO_ADDR
// mpDepots := [ ] ;
3320: LD_ADDR_EXP 14
3324: PUSH
3325: EMPTY
3326: ST_TO_ADDR
// mpBuildings := [ ] ;
3327: LD_ADDR_EXP 17
3331: PUSH
3332: EMPTY
3333: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3334: LD_ADDR_EXP 18
3338: PUSH
3339: EMPTY
3340: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3341: LD_ADDR_EXP 19
3345: PUSH
3346: EMPTY
3347: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3348: LD_ADDR_EXP 20
3352: PUSH
3353: EMPTY
3354: ST_TO_ADDR
// mpStartingResources := [ ] ;
3355: LD_ADDR_EXP 15
3359: PUSH
3360: EMPTY
3361: ST_TO_ADDR
// mpStartPos := [ ] ;
3362: LD_ADDR_EXP 21
3366: PUSH
3367: EMPTY
3368: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3369: LD_ADDR_EXP 22
3373: PUSH
3374: LD_INT 1
3376: NEG
3377: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3378: LD_ADDR_EXP 23
3382: PUSH
3383: EMPTY
3384: ST_TO_ADDR
// mpApemans := [ ] ;
3385: LD_ADDR_EXP 30
3389: PUSH
3390: EMPTY
3391: ST_TO_ADDR
// mpApemansArea := [ ] ;
3392: LD_ADDR_EXP 31
3396: PUSH
3397: EMPTY
3398: ST_TO_ADDR
// mpRespawn := [ ] ;
3399: LD_ADDR_EXP 33
3403: PUSH
3404: EMPTY
3405: ST_TO_ADDR
// mpKingArea := 0 ;
3406: LD_ADDR_EXP 34
3410: PUSH
3411: LD_INT 0
3413: ST_TO_ADDR
// mpPoints := [ ] ;
3414: LD_ADDR_EXP 35
3418: PUSH
3419: EMPTY
3420: ST_TO_ADDR
// mpVehicles := 0 ;
3421: LD_ADDR_EXP 36
3425: PUSH
3426: LD_INT 0
3428: ST_TO_ADDR
// mpShipments := 0 ;
3429: LD_ADDR_EXP 27
3433: PUSH
3434: LD_INT 0
3436: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3437: LD_ADDR_EXP 40
3441: PUSH
3442: EMPTY
3443: PUSH
3444: EMPTY
3445: PUSH
3446: EMPTY
3447: PUSH
3448: EMPTY
3449: PUSH
3450: EMPTY
3451: PUSH
3452: EMPTY
3453: PUSH
3454: EMPTY
3455: PUSH
3456: EMPTY
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3468: LD_ADDR_EXP 32
3472: PUSH
3473: EMPTY
3474: PUSH
3475: EMPTY
3476: PUSH
3477: EMPTY
3478: PUSH
3479: EMPTY
3480: PUSH
3481: EMPTY
3482: PUSH
3483: EMPTY
3484: PUSH
3485: EMPTY
3486: PUSH
3487: EMPTY
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: ST_TO_ADDR
// mpEmissions := 0 ;
3499: LD_ADDR_EXP 37
3503: PUSH
3504: LD_INT 0
3506: ST_TO_ADDR
// mpTeleports := 0 ;
3507: LD_ADDR_EXP 43
3511: PUSH
3512: LD_INT 0
3514: ST_TO_ADDR
// mpArtifacts := 0 ;
3515: LD_ADDR_EXP 44
3519: PUSH
3520: LD_INT 0
3522: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3523: LD_ADDR_EXP 25
3527: PUSH
3528: LD_INT 3
3530: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3531: LD_ADDR_EXP 24
3535: PUSH
3536: LD_INT 15
3538: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3539: LD_ADDR_EXP 38
3543: PUSH
3544: LD_INT 0
3546: ST_TO_ADDR
// mpGameActive := false ;
3547: LD_ADDR_EXP 39
3551: PUSH
3552: LD_INT 0
3554: ST_TO_ADDR
// mpBlockRespThread := false ;
3555: LD_ADDR_EXP 45
3559: PUSH
3560: LD_INT 0
3562: ST_TO_ADDR
// for i := 1 to 32 do
3563: LD_ADDR_VAR 0 2
3567: PUSH
3568: DOUBLE
3569: LD_INT 1
3571: DEC
3572: ST_TO_ADDR
3573: LD_INT 32
3575: PUSH
3576: FOR_TO
3577: IFFALSE 3604
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3579: LD_ADDR_EXP 6
3583: PUSH
3584: LD_EXP 6
3588: PPUSH
3589: LD_VAR 0 2
3593: PPUSH
3594: LD_INT 0
3596: PPUSH
3597: CALL_OW 1
3601: ST_TO_ADDR
3602: GO 3576
3604: POP
3605: POP
// end ;
3606: LD_VAR 0 1
3610: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3611: LD_INT 0
3613: PPUSH
3614: PPUSH
3615: PPUSH
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
3620: PPUSH
3621: PPUSH
3622: PPUSH
3623: PPUSH
3624: PPUSH
3625: PPUSH
3626: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3627: LD_ADDR_VAR 0 14
3631: PUSH
3632: LD_INT 1
3634: PUSH
3635: LD_INT 2
3637: PUSH
3638: LD_INT 3
3640: PUSH
3641: LD_INT 5
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: ST_TO_ADDR
// for i in gameTypes do
3650: LD_ADDR_VAR 0 2
3654: PUSH
3655: LD_VAR 0 14
3659: PUSH
3660: FOR_IN
3661: IFFALSE 3670
// disable ( i ) ;
3663: LD_VAR 0 2
3667: DISABLE_MARKED
3668: GO 3660
3670: POP
3671: POP
// if Multiplayer then
3672: LD_OWVAR 4
3676: IFFALSE 3860
// begin mpGameType := mp_game_type ;
3678: LD_ADDR_EXP 3
3682: PUSH
3683: LD_OWVAR 6
3687: ST_TO_ADDR
// your_side := mp_player_side ;
3688: LD_ADDR_OWVAR 2
3692: PUSH
3693: LD_OWVAR 7
3697: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3698: LD_ADDR_EXP 7
3702: PUSH
3703: LD_OWVAR 17
3707: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3708: LD_ADDR_EXP 8
3712: PUSH
3713: LD_OWVAR 15
3717: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3718: LD_ADDR_EXP 9
3722: PUSH
3723: LD_OWVAR 16
3727: ST_TO_ADDR
// mpTeams := mp_teams ;
3728: LD_ADDR_EXP 10
3732: PUSH
3733: LD_OWVAR 12
3737: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3738: LD_ADDR_VAR 0 2
3742: PUSH
3743: DOUBLE
3744: LD_INT 1
3746: DEC
3747: ST_TO_ADDR
3748: LD_EXP 4
3752: PPUSH
3753: CALL 14438 0 1
3757: PUSH
3758: FOR_TO
3759: IFFALSE 3835
// begin setting := mpGameSettingsKeys [ i ] ;
3761: LD_ADDR_VAR 0 12
3765: PUSH
3766: LD_EXP 4
3770: PUSH
3771: LD_VAR 0 2
3775: ARRAY
3776: ST_TO_ADDR
// if setting then
3777: LD_VAR 0 12
3781: IFFALSE 3833
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3783: LD_ADDR_EXP 6
3787: PUSH
3788: LD_EXP 6
3792: PPUSH
3793: LD_VAR 0 2
3797: PPUSH
3798: LD_EXP 5
3802: PUSH
3803: LD_VAR 0 2
3807: ARRAY
3808: PUSH
3809: LD_VAR 0 2
3813: PUSH
3814: LD_INT 1
3816: MINUS
3817: PPUSH
3818: CALL_OW 426
3822: PUSH
3823: LD_INT 1
3825: PLUS
3826: ARRAY
3827: PPUSH
3828: CALL_OW 1
3832: ST_TO_ADDR
// end ;
3833: GO 3758
3835: POP
3836: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3837: LD_ADDR_EXP 11
3841: PUSH
3842: LD_EXP 8
3846: PUSH
3847: LD_INT 0
3849: PUSH
3850: EMPTY
3851: LIST
3852: DIFF
3853: PUSH
3854: LD_INT 1
3856: GREATER
3857: ST_TO_ADDR
// end else
3858: GO 3860
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3860: LD_EXP 3
3864: PPUSH
3865: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
3869: LD_EXP 18
3873: PPUSH
3874: CALL 14438 0 1
3878: IFFALSE 3909
// begin for i in mpMarkedAreas do
3880: LD_ADDR_VAR 0 2
3884: PUSH
3885: LD_EXP 18
3889: PUSH
3890: FOR_IN
3891: IFFALSE 3907
// SetAreaMapShow ( i , 0 ) ;
3893: LD_VAR 0 2
3897: PPUSH
3898: LD_INT 0
3900: PPUSH
3901: CALL_OW 424
3905: GO 3890
3907: POP
3908: POP
// end ; for i := 1 to 8 do
3909: LD_ADDR_VAR 0 2
3913: PUSH
3914: DOUBLE
3915: LD_INT 1
3917: DEC
3918: ST_TO_ADDR
3919: LD_INT 8
3921: PUSH
3922: FOR_TO
3923: IFFALSE 5259
// begin if not mpSidePositions [ i ] then
3925: LD_EXP 7
3929: PUSH
3930: LD_VAR 0 2
3934: ARRAY
3935: NOT
3936: IFFALSE 3940
// continue ;
3938: GO 3922
// side := i ;
3940: LD_ADDR_VAR 0 7
3944: PUSH
3945: LD_VAR 0 2
3949: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3950: LD_ADDR_VAR 0 9
3954: PUSH
3955: LD_EXP 9
3959: PUSH
3960: LD_VAR 0 2
3964: ARRAY
3965: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3966: LD_ADDR_VAR 0 8
3970: PUSH
3971: LD_EXP 7
3975: PUSH
3976: LD_VAR 0 2
3980: ARRAY
3981: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3982: LD_EXP 12
3986: PPUSH
3987: CALL 14438 0 1
3991: IFFALSE 4068
// begin for j in mpOilDeposits [ pos ] do
3993: LD_ADDR_VAR 0 3
3997: PUSH
3998: LD_EXP 12
4002: PUSH
4003: LD_VAR 0 8
4007: ARRAY
4008: PUSH
4009: FOR_IN
4010: IFFALSE 4066
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
4012: LD_VAR 0 3
4016: PUSH
4017: LD_INT 1
4019: ARRAY
4020: PPUSH
4021: LD_VAR 0 3
4025: PUSH
4026: LD_INT 2
4028: ARRAY
4029: PPUSH
4030: LD_INT 2
4032: PPUSH
4033: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
4037: LD_VAR 0 3
4041: PUSH
4042: LD_INT 1
4044: ARRAY
4045: PPUSH
4046: LD_VAR 0 3
4050: PUSH
4051: LD_INT 2
4053: ARRAY
4054: PPUSH
4055: LD_VAR 0 7
4059: PPUSH
4060: CALL_OW 441
// end ;
4064: GO 4009
4066: POP
4067: POP
// end ; if Count ( mpSibDeposits ) then
4068: LD_EXP 13
4072: PPUSH
4073: CALL 14438 0 1
4077: IFFALSE 4154
// begin for j in mpSibDeposits [ pos ] do
4079: LD_ADDR_VAR 0 3
4083: PUSH
4084: LD_EXP 13
4088: PUSH
4089: LD_VAR 0 8
4093: ARRAY
4094: PUSH
4095: FOR_IN
4096: IFFALSE 4152
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
4098: LD_VAR 0 3
4102: PUSH
4103: LD_INT 1
4105: ARRAY
4106: PPUSH
4107: LD_VAR 0 3
4111: PUSH
4112: LD_INT 2
4114: ARRAY
4115: PPUSH
4116: LD_INT 3
4118: PPUSH
4119: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
4123: LD_VAR 0 3
4127: PUSH
4128: LD_INT 1
4130: ARRAY
4131: PPUSH
4132: LD_VAR 0 3
4136: PUSH
4137: LD_INT 2
4139: ARRAY
4140: PPUSH
4141: LD_VAR 0 7
4145: PPUSH
4146: CALL_OW 441
// end ;
4150: GO 4095
4152: POP
4153: POP
// end ; InitBc ;
4154: CALL_OW 21
// InitUc ;
4158: CALL_OW 18
// uc_side := side ;
4162: LD_ADDR_OWVAR 20
4166: PUSH
4167: LD_VAR 0 7
4171: ST_TO_ADDR
// uc_nation := nation ;
4172: LD_ADDR_OWVAR 21
4176: PUSH
4177: LD_VAR 0 9
4181: ST_TO_ADDR
// if mpBattleFlag > - 1 then
4182: LD_EXP 22
4186: PUSH
4187: LD_INT 1
4189: NEG
4190: GREATER
4191: IFFALSE 4350
// begin x := mpStartPos [ pos ] [ 1 ] ;
4193: LD_ADDR_VAR 0 5
4197: PUSH
4198: LD_EXP 21
4202: PUSH
4203: LD_VAR 0 8
4207: ARRAY
4208: PUSH
4209: LD_INT 1
4211: ARRAY
4212: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4213: LD_ADDR_VAR 0 6
4217: PUSH
4218: LD_EXP 21
4222: PUSH
4223: LD_VAR 0 8
4227: ARRAY
4228: PUSH
4229: LD_INT 2
4231: ARRAY
4232: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4233: LD_VAR 0 5
4237: PPUSH
4238: LD_VAR 0 6
4242: PPUSH
4243: LD_INT 12
4245: PPUSH
4246: LD_INT 2
4248: PPUSH
4249: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4253: LD_ADDR_EXP 23
4257: PUSH
4258: LD_EXP 23
4262: PPUSH
4263: LD_VAR 0 7
4267: PPUSH
4268: LD_VAR 0 7
4272: PPUSH
4273: LD_VAR 0 5
4277: PPUSH
4278: LD_VAR 0 6
4282: PPUSH
4283: LD_INT 1
4285: PUSH
4286: LD_INT 100
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: PUSH
4293: LD_INT 2
4295: PUSH
4296: LD_INT 70
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 3
4305: PUSH
4306: LD_INT 40
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: LD_INT 10
4315: PUSH
4316: LD_INT 25
4318: PUSH
4319: EMPTY
4320: LIST
4321: LIST
4322: PUSH
4323: LD_INT 20
4325: PUSH
4326: LD_INT 100
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: PPUSH
4340: CALL_OW 418
4344: PPUSH
4345: CALL_OW 1
4349: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
4350: LD_EXP 14
4354: PPUSH
4355: CALL 14438 0 1
4359: IFFALSE 4543
// begin if mpGameType = GameTypeSurvival then
4361: LD_EXP 3
4365: PUSH
4366: LD_INT 2
4368: EQUAL
4369: IFFALSE 4389
// begin bc_level := 10 ;
4371: LD_ADDR_OWVAR 43
4375: PUSH
4376: LD_INT 10
4378: ST_TO_ADDR
// bc_type := b_warehouse ;
4379: LD_ADDR_OWVAR 42
4383: PUSH
4384: LD_INT 1
4386: ST_TO_ADDR
// end else
4387: GO 4405
// begin bc_level := 0 ;
4389: LD_ADDR_OWVAR 43
4393: PUSH
4394: LD_INT 0
4396: ST_TO_ADDR
// bc_type := b_depot ;
4397: LD_ADDR_OWVAR 42
4401: PUSH
4402: LD_INT 0
4404: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4405: LD_ADDR_VAR 0 4
4409: PUSH
4410: LD_EXP 14
4414: PUSH
4415: LD_VAR 0 8
4419: ARRAY
4420: PUSH
4421: LD_INT 1
4423: ARRAY
4424: PPUSH
4425: LD_EXP 14
4429: PUSH
4430: LD_VAR 0 8
4434: ARRAY
4435: PUSH
4436: LD_INT 2
4438: ARRAY
4439: PPUSH
4440: LD_EXP 14
4444: PUSH
4445: LD_VAR 0 8
4449: ARRAY
4450: PUSH
4451: LD_INT 3
4453: ARRAY
4454: PPUSH
4455: CALL_OW 47
4459: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4460: LD_VAR 0 4
4464: PPUSH
4465: LD_STRING @
4467: PUSH
4468: LD_VAR 0 7
4472: STR
4473: PPUSH
4474: CALL_OW 500
// if Count ( mpStartingResources ) then
4478: LD_EXP 15
4482: PPUSH
4483: CALL 14438 0 1
4487: IFFALSE 4541
// begin for j := 1 to mpStartingResources do
4489: LD_ADDR_VAR 0 3
4493: PUSH
4494: DOUBLE
4495: LD_INT 1
4497: DEC
4498: ST_TO_ADDR
4499: LD_EXP 15
4503: PUSH
4504: FOR_TO
4505: IFFALSE 4539
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4507: LD_VAR 0 4
4511: PPUSH
4512: CALL_OW 274
4516: PPUSH
4517: LD_VAR 0 3
4521: PPUSH
4522: LD_EXP 15
4526: PUSH
4527: LD_VAR 0 3
4531: ARRAY
4532: PPUSH
4533: CALL_OW 277
4537: GO 4504
4539: POP
4540: POP
// end ; end else
4541: GO 4750
// if Count ( mpStartingResources ) then
4543: LD_EXP 15
4547: PPUSH
4548: CALL 14438 0 1
4552: IFFALSE 4750
// begin x := mpStartPos [ pos ] [ 1 ] ;
4554: LD_ADDR_VAR 0 5
4558: PUSH
4559: LD_EXP 21
4563: PUSH
4564: LD_VAR 0 8
4568: ARRAY
4569: PUSH
4570: LD_INT 1
4572: ARRAY
4573: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4574: LD_ADDR_VAR 0 6
4578: PUSH
4579: LD_EXP 21
4583: PUSH
4584: LD_VAR 0 8
4588: ARRAY
4589: PUSH
4590: LD_INT 2
4592: ARRAY
4593: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4594: LD_ADDR_VAR 0 3
4598: PUSH
4599: DOUBLE
4600: LD_INT 1
4602: DEC
4603: ST_TO_ADDR
4604: LD_EXP 15
4608: PUSH
4609: FOR_TO
4610: IFFALSE 4748
// begin resources := mpStartingResources [ j ] ;
4612: LD_ADDR_VAR 0 13
4616: PUSH
4617: LD_EXP 15
4621: PUSH
4622: LD_VAR 0 3
4626: ARRAY
4627: ST_TO_ADDR
// if resources = 0 then
4628: LD_VAR 0 13
4632: PUSH
4633: LD_INT 0
4635: EQUAL
4636: IFFALSE 4640
// continue ;
4638: GO 4609
// repeat if resources >= 50 then
4640: LD_VAR 0 13
4644: PUSH
4645: LD_INT 50
4647: GREATEREQUAL
4648: IFFALSE 4694
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4650: LD_VAR 0 3
4654: PPUSH
4655: LD_INT 5
4657: PPUSH
4658: LD_VAR 0 5
4662: PPUSH
4663: LD_VAR 0 6
4667: PPUSH
4668: LD_INT 6
4670: PPUSH
4671: LD_INT 0
4673: PPUSH
4674: CALL_OW 60
// resources := resources - 50 ;
4678: LD_ADDR_VAR 0 13
4682: PUSH
4683: LD_VAR 0 13
4687: PUSH
4688: LD_INT 50
4690: MINUS
4691: ST_TO_ADDR
// end else
4692: GO 4736
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4694: LD_VAR 0 3
4698: PPUSH
4699: LD_VAR 0 13
4703: PUSH
4704: LD_INT 10
4706: DIV
4707: PPUSH
4708: LD_VAR 0 5
4712: PPUSH
4713: LD_VAR 0 6
4717: PPUSH
4718: LD_INT 6
4720: PPUSH
4721: LD_INT 0
4723: PPUSH
4724: CALL_OW 60
// resources := 0 ;
4728: LD_ADDR_VAR 0 13
4732: PUSH
4733: LD_INT 0
4735: ST_TO_ADDR
// end ; until resources <= 0 ;
4736: LD_VAR 0 13
4740: PUSH
4741: LD_INT 0
4743: LESSEQUAL
4744: IFFALSE 4640
// end ;
4746: GO 4609
4748: POP
4749: POP
// end ; if Count ( mpBuildings ) then
4750: LD_EXP 17
4754: PPUSH
4755: CALL 14438 0 1
4759: IFFALSE 4837
// begin for j in mpBuildings [ pos ] do
4761: LD_ADDR_VAR 0 3
4765: PUSH
4766: LD_EXP 17
4770: PUSH
4771: LD_VAR 0 8
4775: ARRAY
4776: PUSH
4777: FOR_IN
4778: IFFALSE 4835
// begin bc_level := 0 ;
4780: LD_ADDR_OWVAR 43
4784: PUSH
4785: LD_INT 0
4787: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4788: LD_ADDR_OWVAR 42
4792: PUSH
4793: LD_VAR 0 3
4797: PUSH
4798: LD_INT 1
4800: ARRAY
4801: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4802: LD_VAR 0 3
4806: PUSH
4807: LD_INT 2
4809: ARRAY
4810: PPUSH
4811: LD_VAR 0 3
4815: PUSH
4816: LD_INT 3
4818: ARRAY
4819: PPUSH
4820: LD_VAR 0 3
4824: PUSH
4825: LD_INT 4
4827: ARRAY
4828: PPUSH
4829: CALL_OW 47
// end ;
4833: GO 4777
4835: POP
4836: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4837: LD_EXP 26
4841: IFFALSE 4861
4843: PUSH
4844: LD_INT 20
4846: PPUSH
4847: LD_VAR 0 7
4851: PPUSH
4852: CALL_OW 321
4856: PUSH
4857: LD_INT 1
4859: EQUAL
4860: AND
4861: IFFALSE 4878
// SetTech ( tech_SibDet , side , state_researched ) ;
4863: LD_INT 20
4865: PPUSH
4866: LD_VAR 0 7
4870: PPUSH
4871: LD_INT 2
4873: PPUSH
4874: CALL_OW 322
// if not mpArtifacts then
4878: LD_EXP 44
4882: NOT
4883: IFFALSE 4900
// SetTech ( tech_artifact , side , state_disabled ) ;
4885: LD_INT 24
4887: PPUSH
4888: LD_VAR 0 7
4892: PPUSH
4893: LD_INT 0
4895: PPUSH
4896: CALL_OW 322
// if mpSibBomb = 1 then
4900: LD_EXP 28
4904: PUSH
4905: LD_INT 1
4907: EQUAL
4908: IFFALSE 4927
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4910: LD_INT 25
4912: PPUSH
4913: LD_VAR 0 7
4917: PPUSH
4918: LD_INT 1
4920: PPUSH
4921: CALL_OW 322
// end else
4925: GO 4942
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4927: LD_INT 25
4929: PPUSH
4930: LD_VAR 0 7
4934: PPUSH
4935: LD_INT 0
4937: PPUSH
4938: CALL_OW 322
// end ; if mpVehicles then
4942: LD_EXP 36
4946: IFFALSE 5045
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4948: LD_ADDR_VAR 0 3
4952: PUSH
4953: LD_VAR 0 7
4957: PPUSH
4958: LD_VAR 0 9
4962: PPUSH
4963: LD_EXP 36
4967: PPUSH
4968: CALL 6169 0 3
4972: PUSH
4973: FOR_IN
4974: IFFALSE 5043
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4976: LD_VAR 0 3
4980: PPUSH
4981: LD_INT 0
4983: PPUSH
4984: LD_INT 5
4986: PPUSH
4987: CALL_OW 12
4991: PPUSH
4992: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4996: LD_VAR 0 3
5000: PPUSH
5001: LD_EXP 21
5005: PUSH
5006: LD_VAR 0 8
5010: ARRAY
5011: PUSH
5012: LD_INT 1
5014: ARRAY
5015: PPUSH
5016: LD_EXP 21
5020: PUSH
5021: LD_VAR 0 8
5025: ARRAY
5026: PUSH
5027: LD_INT 2
5029: ARRAY
5030: PPUSH
5031: LD_INT 12
5033: PPUSH
5034: LD_INT 0
5036: PPUSH
5037: CALL_OW 50
// end ;
5041: GO 4973
5043: POP
5044: POP
// end ; uc_nation := nation ;
5045: LD_ADDR_OWVAR 21
5049: PUSH
5050: LD_VAR 0 9
5054: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
5055: LD_ADDR_VAR 0 11
5059: PUSH
5060: LD_VAR 0 7
5064: PPUSH
5065: LD_VAR 0 9
5069: PPUSH
5070: LD_EXP 24
5074: PPUSH
5075: LD_EXP 25
5079: PPUSH
5080: CALL 5671 0 4
5084: ST_TO_ADDR
// for j in team do
5085: LD_ADDR_VAR 0 3
5089: PUSH
5090: LD_VAR 0 11
5094: PUSH
5095: FOR_IN
5096: IFFALSE 5145
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5098: LD_VAR 0 3
5102: PPUSH
5103: LD_EXP 21
5107: PUSH
5108: LD_VAR 0 8
5112: ARRAY
5113: PUSH
5114: LD_INT 1
5116: ARRAY
5117: PPUSH
5118: LD_EXP 21
5122: PUSH
5123: LD_VAR 0 8
5127: ARRAY
5128: PUSH
5129: LD_INT 2
5131: ARRAY
5132: PPUSH
5133: LD_INT 12
5135: PPUSH
5136: LD_INT 0
5138: PPUSH
5139: CALL_OW 50
5143: GO 5095
5145: POP
5146: POP
// if mpApemans then
5147: LD_EXP 30
5151: IFFALSE 5257
// begin for j := 1 to mpApemans do
5153: LD_ADDR_VAR 0 3
5157: PUSH
5158: DOUBLE
5159: LD_INT 1
5161: DEC
5162: ST_TO_ADDR
5163: LD_EXP 30
5167: PUSH
5168: FOR_TO
5169: IFFALSE 5255
// begin PrepareApeman ( - 5 ) ;
5171: LD_INT 5
5173: NEG
5174: PPUSH
5175: CALL 46497 0 1
// ape := CreateHuman ;
5179: LD_ADDR_VAR 0 10
5183: PUSH
5184: CALL_OW 44
5188: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
5189: LD_ADDR_EXP 32
5193: PUSH
5194: LD_EXP 32
5198: PPUSH
5199: LD_VAR 0 8
5203: PPUSH
5204: LD_EXP 32
5208: PUSH
5209: LD_VAR 0 8
5213: ARRAY
5214: PPUSH
5215: LD_VAR 0 10
5219: PPUSH
5220: CALL 50370 0 2
5224: PPUSH
5225: CALL_OW 1
5229: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
5230: LD_VAR 0 10
5234: PPUSH
5235: LD_EXP 31
5239: PUSH
5240: LD_VAR 0 8
5244: ARRAY
5245: PPUSH
5246: LD_INT 0
5248: PPUSH
5249: CALL_OW 49
// end ;
5253: GO 5168
5255: POP
5256: POP
// end ; end ;
5257: GO 3922
5259: POP
5260: POP
// if not mpTeamGame then
5261: LD_EXP 11
5265: NOT
5266: IFFALSE 5364
// begin for i := 1 to 8 do
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: DOUBLE
5274: LD_INT 1
5276: DEC
5277: ST_TO_ADDR
5278: LD_INT 8
5280: PUSH
5281: FOR_TO
5282: IFFALSE 5360
// for j := 1 to 8 do
5284: LD_ADDR_VAR 0 3
5288: PUSH
5289: DOUBLE
5290: LD_INT 1
5292: DEC
5293: ST_TO_ADDR
5294: LD_INT 8
5296: PUSH
5297: FOR_TO
5298: IFFALSE 5356
// if i <> j then
5300: LD_VAR 0 2
5304: PUSH
5305: LD_VAR 0 3
5309: NONEQUAL
5310: IFFALSE 5334
// SetAttitude ( i , j , att_neutral , true ) else
5312: LD_VAR 0 2
5316: PPUSH
5317: LD_VAR 0 3
5321: PPUSH
5322: LD_INT 0
5324: PPUSH
5325: LD_INT 1
5327: PPUSH
5328: CALL_OW 80
5332: GO 5354
// SetAttitude ( i , j , att_friend , true ) ;
5334: LD_VAR 0 2
5338: PPUSH
5339: LD_VAR 0 3
5343: PPUSH
5344: LD_INT 1
5346: PPUSH
5347: LD_INT 1
5349: PPUSH
5350: CALL_OW 80
5354: GO 5297
5356: POP
5357: POP
5358: GO 5281
5360: POP
5361: POP
// end else
5362: GO 5539
// begin if mpSharedVision then
5364: LD_EXP 16
5368: IFFALSE 5433
// begin for i in mpTeams do
5370: LD_ADDR_VAR 0 2
5374: PUSH
5375: LD_EXP 10
5379: PUSH
5380: FOR_IN
5381: IFFALSE 5431
// for j := 2 to i do
5383: LD_ADDR_VAR 0 3
5387: PUSH
5388: DOUBLE
5389: LD_INT 2
5391: DEC
5392: ST_TO_ADDR
5393: LD_VAR 0 2
5397: PUSH
5398: FOR_TO
5399: IFFALSE 5427
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5401: LD_VAR 0 2
5405: PUSH
5406: LD_VAR 0 3
5410: ARRAY
5411: PPUSH
5412: LD_VAR 0 2
5416: PUSH
5417: LD_INT 1
5419: ARRAY
5420: PPUSH
5421: CALL_OW 343
5425: GO 5398
5427: POP
5428: POP
5429: GO 5380
5431: POP
5432: POP
// end ; for i := 1 to 8 do
5433: LD_ADDR_VAR 0 2
5437: PUSH
5438: DOUBLE
5439: LD_INT 1
5441: DEC
5442: ST_TO_ADDR
5443: LD_INT 8
5445: PUSH
5446: FOR_TO
5447: IFFALSE 5537
// for j := 1 to 8 do
5449: LD_ADDR_VAR 0 3
5453: PUSH
5454: DOUBLE
5455: LD_INT 1
5457: DEC
5458: ST_TO_ADDR
5459: LD_INT 8
5461: PUSH
5462: FOR_TO
5463: IFFALSE 5533
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5465: LD_EXP 8
5469: PUSH
5470: LD_VAR 0 2
5474: ARRAY
5475: PUSH
5476: LD_EXP 8
5480: PUSH
5481: LD_VAR 0 3
5485: ARRAY
5486: EQUAL
5487: IFFALSE 5511
// SetAttitude ( i , j , att_friend , true ) else
5489: LD_VAR 0 2
5493: PPUSH
5494: LD_VAR 0 3
5498: PPUSH
5499: LD_INT 1
5501: PPUSH
5502: LD_INT 1
5504: PPUSH
5505: CALL_OW 80
5509: GO 5531
// SetAttitude ( i , j , att_enemy , true ) ;
5511: LD_VAR 0 2
5515: PPUSH
5516: LD_VAR 0 3
5520: PPUSH
5521: LD_INT 2
5523: PPUSH
5524: LD_INT 1
5526: PPUSH
5527: CALL_OW 80
5531: GO 5462
5533: POP
5534: POP
5535: GO 5446
5537: POP
5538: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5539: LD_ADDR_OWVAR 71
5543: PUSH
5544: LD_EXP 9
5548: PUSH
5549: LD_OWVAR 2
5553: ARRAY
5554: ST_TO_ADDR
// if IAmSpec then
5555: CALL_OW 531
5559: IFFALSE 5600
// begin FogOff ( true ) ;
5561: LD_INT 1
5563: PPUSH
5564: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5568: LD_EXP 29
5572: PUSH
5573: LD_INT 1
5575: ARRAY
5576: PUSH
5577: LD_INT 2
5579: DIV
5580: PPUSH
5581: LD_EXP 29
5585: PUSH
5586: LD_INT 2
5588: ARRAY
5589: PUSH
5590: LD_INT 2
5592: DIV
5593: PPUSH
5594: CALL_OW 86
// end else
5598: GO 5646
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5600: LD_EXP 21
5604: PUSH
5605: LD_EXP 7
5609: PUSH
5610: LD_OWVAR 2
5614: ARRAY
5615: ARRAY
5616: PUSH
5617: LD_INT 1
5619: ARRAY
5620: PPUSH
5621: LD_EXP 21
5625: PUSH
5626: LD_EXP 7
5630: PUSH
5631: LD_OWVAR 2
5635: ARRAY
5636: ARRAY
5637: PUSH
5638: LD_INT 2
5640: ARRAY
5641: PPUSH
5642: CALL_OW 86
// end ; BeginBuildUp ;
5646: CALL 6702 0 0
// enable ( mpActive ) ;
5650: LD_INT 100
5652: ENABLE_MARKED
// enable ( mpGameType ) ;
5653: LD_EXP 3
5657: ENABLE_MARKED
// mpGameActive := true ;
5658: LD_ADDR_EXP 39
5662: PUSH
5663: LD_INT 1
5665: ST_TO_ADDR
// end ;
5666: LD_VAR 0 1
5670: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5671: LD_INT 0
5673: PPUSH
5674: PPUSH
5675: PPUSH
5676: PPUSH
// result := [ ] ;
5677: LD_ADDR_VAR 0 5
5681: PUSH
5682: EMPTY
5683: ST_TO_ADDR
// class := class_soldier ;
5684: LD_ADDR_VAR 0 8
5688: PUSH
5689: LD_INT 1
5691: ST_TO_ADDR
// uc_side := side ;
5692: LD_ADDR_OWVAR 20
5696: PUSH
5697: LD_VAR 0 1
5701: ST_TO_ADDR
// uc_nation := nation ;
5702: LD_ADDR_OWVAR 21
5706: PUSH
5707: LD_VAR 0 2
5711: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5712: LD_ADDR_OWVAR 26
5716: PUSH
5717: LD_OWVAR 19
5721: PUSH
5722: LD_VAR 0 1
5726: ARRAY
5727: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5728: LD_INT 1
5730: PPUSH
5731: LD_INT 2
5733: PPUSH
5734: CALL_OW 12
5738: PPUSH
5739: LD_VAR 0 8
5743: PPUSH
5744: LD_VAR 0 4
5748: PUSH
5749: LD_INT 2
5751: PLUS
5752: PPUSH
5753: CALL_OW 380
// hc_importance := 105 ;
5757: LD_ADDR_OWVAR 32
5761: PUSH
5762: LD_INT 105
5764: ST_TO_ADDR
// if Multiplayer then
5765: LD_OWVAR 4
5769: IFFALSE 5809
// begin hc_gallery := MULTIAVATARS ;
5771: LD_ADDR_OWVAR 33
5775: PUSH
5776: LD_STRING MULTIAVATARS
5778: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5779: LD_ADDR_OWVAR 34
5783: PUSH
5784: LD_VAR 0 1
5788: PPUSH
5789: CALL_OW 525
5793: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5794: LD_ADDR_OWVAR 27
5798: PUSH
5799: LD_VAR 0 1
5803: PPUSH
5804: CALL_OW 526
5808: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5809: LD_ADDR_VAR 0 5
5813: PUSH
5814: LD_VAR 0 5
5818: PPUSH
5819: CALL_OW 44
5823: PPUSH
5824: CALL 50370 0 2
5828: ST_TO_ADDR
// if mpTeamPreset then
5829: LD_LOC 1
5833: IFFALSE 5929
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5835: LD_LOC 1
5839: PUSH
5840: LD_INT 1
5842: ARRAY
5843: PPUSH
5844: LD_VAR 0 5
5848: PUSH
5849: LD_VAR 0 5
5853: ARRAY
5854: PPUSH
5855: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5859: LD_VAR 0 5
5863: PUSH
5864: LD_VAR 0 5
5868: ARRAY
5869: PPUSH
5870: LD_INT 1
5872: PPUSH
5873: LD_LOC 1
5877: PUSH
5878: LD_INT 1
5880: ARRAY
5881: PPUSH
5882: LD_INT 1
5884: PPUSH
5885: CALL_OW 260
5889: PPUSH
5890: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5894: LD_VAR 0 5
5898: PUSH
5899: LD_VAR 0 5
5903: ARRAY
5904: PPUSH
5905: LD_INT 2
5907: PPUSH
5908: LD_LOC 1
5912: PUSH
5913: LD_INT 1
5915: ARRAY
5916: PPUSH
5917: LD_INT 2
5919: PPUSH
5920: CALL_OW 260
5924: PPUSH
5925: CALL_OW 239
// end ; InitHc_All ( ) ;
5929: CALL_OW 584
// class := 2 ;
5933: LD_ADDR_VAR 0 8
5937: PUSH
5938: LD_INT 2
5940: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5941: LD_ADDR_VAR 0 6
5945: PUSH
5946: DOUBLE
5947: LD_INT 1
5949: DEC
5950: ST_TO_ADDR
5951: LD_VAR 0 3
5955: PUSH
5956: LD_INT 1
5958: MINUS
5959: PUSH
5960: FOR_TO
5961: IFFALSE 6145
// begin PrepareHuman ( false , class , skill ) ;
5963: LD_INT 0
5965: PPUSH
5966: LD_VAR 0 8
5970: PPUSH
5971: LD_VAR 0 4
5975: PPUSH
5976: CALL_OW 380
// un := CreateHuman ;
5980: LD_ADDR_VAR 0 7
5984: PUSH
5985: CALL_OW 44
5989: ST_TO_ADDR
// result := Join ( result , un ) ;
5990: LD_ADDR_VAR 0 5
5994: PUSH
5995: LD_VAR 0 5
5999: PPUSH
6000: LD_VAR 0 7
6004: PPUSH
6005: CALL 50370 0 2
6009: ST_TO_ADDR
// if mpTeamPreset then
6010: LD_LOC 1
6014: IFFALSE 6110
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
6016: LD_LOC 1
6020: PUSH
6021: LD_VAR 0 6
6025: PUSH
6026: LD_INT 1
6028: PLUS
6029: ARRAY
6030: PPUSH
6031: LD_VAR 0 7
6035: PPUSH
6036: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
6040: LD_VAR 0 7
6044: PPUSH
6045: LD_INT 1
6047: PPUSH
6048: LD_LOC 1
6052: PUSH
6053: LD_VAR 0 6
6057: PUSH
6058: LD_INT 1
6060: PLUS
6061: ARRAY
6062: PPUSH
6063: LD_INT 1
6065: PPUSH
6066: CALL_OW 260
6070: PPUSH
6071: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
6075: LD_VAR 0 7
6079: PPUSH
6080: LD_INT 2
6082: PPUSH
6083: LD_LOC 1
6087: PUSH
6088: LD_VAR 0 6
6092: PUSH
6093: LD_INT 1
6095: PLUS
6096: ARRAY
6097: PPUSH
6098: LD_INT 2
6100: PPUSH
6101: CALL_OW 260
6105: PPUSH
6106: CALL_OW 239
// end ; class := Inc ( class ) ;
6110: LD_ADDR_VAR 0 8
6114: PUSH
6115: LD_VAR 0 8
6119: PPUSH
6120: CALL 51743 0 1
6124: ST_TO_ADDR
// if class = 5 then
6125: LD_VAR 0 8
6129: PUSH
6130: LD_INT 5
6132: EQUAL
6133: IFFALSE 6143
// class := 1 ;
6135: LD_ADDR_VAR 0 8
6139: PUSH
6140: LD_INT 1
6142: ST_TO_ADDR
// end ;
6143: GO 5960
6145: POP
6146: POP
// if not mpTeamPreset then
6147: LD_LOC 1
6151: NOT
6152: IFFALSE 6164
// mpTeamPreset := result ;
6154: LD_ADDR_LOC 1
6158: PUSH
6159: LD_VAR 0 5
6163: ST_TO_ADDR
// end ;
6164: LD_VAR 0 5
6168: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
6169: LD_INT 0
6171: PPUSH
6172: PPUSH
// result := [ ] ;
6173: LD_ADDR_VAR 0 4
6177: PUSH
6178: EMPTY
6179: ST_TO_ADDR
// if not vehicles then
6180: LD_VAR 0 3
6184: NOT
6185: IFFALSE 6189
// exit ;
6187: GO 6403
// for i := 1 to vehicles [ nation ] do
6189: LD_ADDR_VAR 0 5
6193: PUSH
6194: DOUBLE
6195: LD_INT 1
6197: DEC
6198: ST_TO_ADDR
6199: LD_VAR 0 3
6203: PUSH
6204: LD_VAR 0 2
6208: ARRAY
6209: PUSH
6210: FOR_TO
6211: IFFALSE 6401
// begin uc_side := side ;
6213: LD_ADDR_OWVAR 20
6217: PUSH
6218: LD_VAR 0 1
6222: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6223: LD_VAR 0 3
6227: PUSH
6228: LD_VAR 0 2
6232: ARRAY
6233: PUSH
6234: LD_VAR 0 5
6238: ARRAY
6239: PPUSH
6240: CALL 14438 0 1
6244: PUSH
6245: LD_INT 4
6247: GREATER
6248: IFFALSE 6278
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6250: LD_ADDR_OWVAR 21
6254: PUSH
6255: LD_VAR 0 3
6259: PUSH
6260: LD_VAR 0 2
6264: ARRAY
6265: PUSH
6266: LD_VAR 0 5
6270: ARRAY
6271: PUSH
6272: LD_INT 5
6274: ARRAY
6275: ST_TO_ADDR
6276: GO 6288
// uc_nation := nation ;
6278: LD_ADDR_OWVAR 21
6282: PUSH
6283: LD_VAR 0 2
6287: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6288: LD_VAR 0 3
6292: PUSH
6293: LD_VAR 0 2
6297: ARRAY
6298: PUSH
6299: LD_VAR 0 5
6303: ARRAY
6304: PUSH
6305: LD_INT 1
6307: ARRAY
6308: PPUSH
6309: LD_VAR 0 3
6313: PUSH
6314: LD_VAR 0 2
6318: ARRAY
6319: PUSH
6320: LD_VAR 0 5
6324: ARRAY
6325: PUSH
6326: LD_INT 2
6328: ARRAY
6329: PPUSH
6330: LD_VAR 0 3
6334: PUSH
6335: LD_VAR 0 2
6339: ARRAY
6340: PUSH
6341: LD_VAR 0 5
6345: ARRAY
6346: PUSH
6347: LD_INT 3
6349: ARRAY
6350: PPUSH
6351: LD_VAR 0 3
6355: PUSH
6356: LD_VAR 0 2
6360: ARRAY
6361: PUSH
6362: LD_VAR 0 5
6366: ARRAY
6367: PUSH
6368: LD_INT 4
6370: ARRAY
6371: PPUSH
6372: LD_INT 80
6374: PPUSH
6375: CALL 17200 0 5
// result := Join ( result , CreateVehicle ) ;
6379: LD_ADDR_VAR 0 4
6383: PUSH
6384: LD_VAR 0 4
6388: PPUSH
6389: CALL_OW 45
6393: PPUSH
6394: CALL 50370 0 2
6398: ST_TO_ADDR
// end ;
6399: GO 6210
6401: POP
6402: POP
// end ;
6403: LD_VAR 0 4
6407: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6408: LD_INT 0
6410: PPUSH
6411: PPUSH
// for i in mpBattleFlags do
6412: LD_ADDR_VAR 0 3
6416: PUSH
6417: LD_EXP 23
6421: PUSH
6422: FOR_IN
6423: IFFALSE 6500
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6425: LD_VAR 0 3
6429: PPUSH
6430: LD_INT 1
6432: PUSH
6433: LD_VAR 0 1
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: LD_INT 2
6444: PUSH
6445: LD_VAR 0 1
6449: PUSH
6450: LD_REAL  7.00000000000000E-0001
6453: MUL
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 3
6461: PUSH
6462: LD_VAR 0 1
6466: PUSH
6467: LD_REAL  4.00000000000000E-0001
6470: MUL
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: PUSH
6476: LD_INT 20
6478: PUSH
6479: LD_VAR 0 1
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: PPUSH
6494: CALL_OW 423
6498: GO 6422
6500: POP
6501: POP
// end ;
6502: LD_VAR 0 2
6506: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6507: LD_INT 100
6509: IFFALSE 6604
6511: GO 6513
6513: DISABLE
6514: LD_INT 0
6516: PPUSH
6517: PPUSH
// begin if mpBattleFlag <= 0 then
6518: LD_EXP 22
6522: PUSH
6523: LD_INT 0
6525: LESSEQUAL
6526: IFFALSE 6530
// exit ;
6528: GO 6604
// strength := 100 ;
6530: LD_ADDR_VAR 0 2
6534: PUSH
6535: LD_INT 100
6537: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6538: LD_EXP 22
6542: PPUSH
6543: CALL_OW 67
// strength := Dec ( strength ) ;
6547: LD_ADDR_VAR 0 2
6551: PUSH
6552: LD_VAR 0 2
6556: PPUSH
6557: CALL 51765 0 1
6561: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6562: LD_VAR 0 2
6566: PPUSH
6567: CALL 6408 0 1
// until not strength ;
6571: LD_VAR 0 2
6575: NOT
6576: IFFALSE 6538
// for i in mpBattleFlags do
6578: LD_ADDR_VAR 0 1
6582: PUSH
6583: LD_EXP 23
6587: PUSH
6588: FOR_IN
6589: IFFALSE 6602
// KillBattleFlag ( i ) ;
6591: LD_VAR 0 1
6595: PPUSH
6596: CALL_OW 419
6600: GO 6588
6602: POP
6603: POP
// end ;
6604: PPOPN 2
6606: END
// every 0 0$1 marked mpActive do var side , tmp ;
6607: GO 6609
6609: DISABLE
6610: LD_INT 0
6612: PPUSH
6613: PPUSH
// begin if mpSibBomb <= 1 then
6614: LD_EXP 28
6618: PUSH
6619: LD_INT 1
6621: LESSEQUAL
6622: IFFALSE 6626
// exit ;
6624: GO 6699
// tmp := mpSibBomb ;
6626: LD_ADDR_VAR 0 2
6630: PUSH
6631: LD_EXP 28
6635: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6636: LD_INT 35
6638: PPUSH
6639: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6643: LD_ADDR_VAR 0 2
6647: PUSH
6648: LD_VAR 0 2
6652: PUSH
6653: LD_INT 35
6655: MINUS
6656: ST_TO_ADDR
// until not tmp ;
6657: LD_VAR 0 2
6661: NOT
6662: IFFALSE 6636
// for side := 1 to 8 do
6664: LD_ADDR_VAR 0 1
6668: PUSH
6669: DOUBLE
6670: LD_INT 1
6672: DEC
6673: ST_TO_ADDR
6674: LD_INT 8
6676: PUSH
6677: FOR_TO
6678: IFFALSE 6697
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6680: LD_INT 25
6682: PPUSH
6683: LD_VAR 0 1
6687: PPUSH
6688: LD_INT 1
6690: PPUSH
6691: CALL_OW 322
6695: GO 6677
6697: POP
6698: POP
// end ;
6699: PPOPN 2
6701: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6702: LD_INT 0
6704: PPUSH
6705: PPUSH
6706: PPUSH
// mpBuildUpTimeDelay := 0 ;
6707: LD_ADDR_EXP 46
6711: PUSH
6712: LD_INT 0
6714: ST_TO_ADDR
// if not mpBuildUpTime then
6715: LD_EXP 20
6719: NOT
6720: IFFALSE 6724
// exit ;
6722: GO 6913
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6724: LD_ADDR_EXP 46
6728: PUSH
6729: LD_INT 8400
6731: PUSH
6732: LD_INT 2100
6734: PUSH
6735: LD_EXP 20
6739: MUL
6740: PLUS
6741: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6742: LD_ADDR_EXP 47
6746: PUSH
6747: LD_INT 1
6749: ST_TO_ADDR
// for i := 1 to 8 do
6750: LD_ADDR_VAR 0 2
6754: PUSH
6755: DOUBLE
6756: LD_INT 1
6758: DEC
6759: ST_TO_ADDR
6760: LD_INT 8
6762: PUSH
6763: FOR_TO
6764: IFFALSE 6911
// if mpSidePositions [ i ] then
6766: LD_EXP 7
6770: PUSH
6771: LD_VAR 0 2
6775: ARRAY
6776: IFFALSE 6909
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6778: LD_EXP 19
6782: PUSH
6783: LD_EXP 7
6787: PUSH
6788: LD_VAR 0 2
6792: ARRAY
6793: ARRAY
6794: PPUSH
6795: LD_INT 5
6797: PPUSH
6798: CALL_OW 424
// for j := 1 to 8 do
6802: LD_ADDR_VAR 0 3
6806: PUSH
6807: DOUBLE
6808: LD_INT 1
6810: DEC
6811: ST_TO_ADDR
6812: LD_INT 8
6814: PUSH
6815: FOR_TO
6816: IFFALSE 6907
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6818: LD_EXP 7
6822: PUSH
6823: LD_VAR 0 3
6827: ARRAY
6828: IFFALSE 6877
6830: PUSH
6831: LD_EXP 8
6835: PUSH
6836: LD_VAR 0 2
6840: ARRAY
6841: PUSH
6842: LD_EXP 8
6846: PUSH
6847: LD_VAR 0 3
6851: ARRAY
6852: NONEQUAL
6853: IFTRUE 6876
6855: PUSH
6856: LD_EXP 11
6860: NOT
6861: IFFALSE 6875
6863: PUSH
6864: LD_VAR 0 2
6868: PUSH
6869: LD_VAR 0 3
6873: NONEQUAL
6874: AND
6875: OR
6876: AND
6877: IFFALSE 6905
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6879: LD_VAR 0 3
6883: PPUSH
6884: LD_EXP 19
6888: PUSH
6889: LD_EXP 7
6893: PUSH
6894: LD_VAR 0 2
6898: ARRAY
6899: ARRAY
6900: PPUSH
6901: CALL_OW 333
6905: GO 6815
6907: POP
6908: POP
// end ;
6909: GO 6763
6911: POP
6912: POP
// end ;
6913: LD_VAR 0 1
6917: RET
// function EndBuildUp ; var i , j ; begin
6918: LD_INT 0
6920: PPUSH
6921: PPUSH
6922: PPUSH
// mpBuildUpTimeActive := false ;
6923: LD_ADDR_EXP 47
6927: PUSH
6928: LD_INT 0
6930: ST_TO_ADDR
// for i := 1 to 8 do
6931: LD_ADDR_VAR 0 2
6935: PUSH
6936: DOUBLE
6937: LD_INT 1
6939: DEC
6940: ST_TO_ADDR
6941: LD_INT 8
6943: PUSH
6944: FOR_TO
6945: IFFALSE 7092
// if mpSidePositions [ i ] then
6947: LD_EXP 7
6951: PUSH
6952: LD_VAR 0 2
6956: ARRAY
6957: IFFALSE 7090
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6959: LD_EXP 19
6963: PUSH
6964: LD_EXP 7
6968: PUSH
6969: LD_VAR 0 2
6973: ARRAY
6974: ARRAY
6975: PPUSH
6976: LD_INT 0
6978: PPUSH
6979: CALL_OW 424
// for j := 1 to 8 do
6983: LD_ADDR_VAR 0 3
6987: PUSH
6988: DOUBLE
6989: LD_INT 1
6991: DEC
6992: ST_TO_ADDR
6993: LD_INT 8
6995: PUSH
6996: FOR_TO
6997: IFFALSE 7088
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6999: LD_EXP 7
7003: PUSH
7004: LD_VAR 0 3
7008: ARRAY
7009: IFFALSE 7058
7011: PUSH
7012: LD_EXP 8
7016: PUSH
7017: LD_VAR 0 2
7021: ARRAY
7022: PUSH
7023: LD_EXP 8
7027: PUSH
7028: LD_VAR 0 3
7032: ARRAY
7033: NONEQUAL
7034: IFTRUE 7057
7036: PUSH
7037: LD_EXP 11
7041: NOT
7042: IFFALSE 7056
7044: PUSH
7045: LD_VAR 0 2
7049: PUSH
7050: LD_VAR 0 3
7054: NONEQUAL
7055: AND
7056: OR
7057: AND
7058: IFFALSE 7086
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
7060: LD_VAR 0 3
7064: PPUSH
7065: LD_EXP 19
7069: PUSH
7070: LD_EXP 7
7074: PUSH
7075: LD_VAR 0 2
7079: ARRAY
7080: ARRAY
7081: PPUSH
7082: CALL_OW 334
7086: GO 6996
7088: POP
7089: POP
// end ;
7090: GO 6944
7092: POP
7093: POP
// end ;
7094: LD_VAR 0 1
7098: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
7099: LD_EXP 47
7103: IFFALSE 7282
7105: GO 7107
7107: DISABLE
7108: LD_INT 0
7110: PPUSH
7111: PPUSH
// begin for i := 1 to 8 do
7112: LD_ADDR_VAR 0 1
7116: PUSH
7117: DOUBLE
7118: LD_INT 1
7120: DEC
7121: ST_TO_ADDR
7122: LD_INT 8
7124: PUSH
7125: FOR_TO
7126: IFFALSE 7279
// if mpSidePositions [ i ] then
7128: LD_EXP 7
7132: PUSH
7133: LD_VAR 0 1
7137: ARRAY
7138: IFFALSE 7277
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
7140: LD_ADDR_VAR 0 2
7144: PUSH
7145: LD_EXP 19
7149: PUSH
7150: LD_EXP 7
7154: PUSH
7155: LD_VAR 0 1
7159: ARRAY
7160: ARRAY
7161: PPUSH
7162: LD_INT 2
7164: PUSH
7165: LD_INT 21
7167: PUSH
7168: LD_INT 1
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 21
7177: PUSH
7178: LD_INT 2
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_OWVAR 2
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PPUSH
7206: CALL_OW 70
7210: PUSH
7211: FOR_IN
7212: IFFALSE 7275
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7214: LD_EXP 8
7218: PUSH
7219: LD_VAR 0 1
7223: ARRAY
7224: PUSH
7225: LD_EXP 8
7229: PUSH
7230: LD_OWVAR 2
7234: ARRAY
7235: NONEQUAL
7236: IFTRUE 7259
7238: PUSH
7239: LD_EXP 11
7243: NOT
7244: IFFALSE 7258
7246: PUSH
7247: LD_VAR 0 1
7251: PUSH
7252: LD_OWVAR 2
7256: NONEQUAL
7257: AND
7258: OR
7259: IFFALSE 7273
// ComMoveToArea ( un , BuildUpEscape ) ;
7261: LD_VAR 0 2
7265: PPUSH
7266: LD_INT 9
7268: PPUSH
7269: CALL_OW 113
7273: GO 7211
7275: POP
7276: POP
7277: GO 7125
7279: POP
7280: POP
// enable ;
7281: ENABLE
// end ;
7282: PPOPN 2
7284: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7285: LD_EXP 20
7289: IFFALSE 7339
7291: GO 7293
7293: DISABLE
7294: LD_INT 0
7296: PPUSH
// begin tmp := mpBuildUpTime ;
7297: LD_ADDR_VAR 0 1
7301: PUSH
7302: LD_EXP 20
7306: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7307: LD_INT 35
7309: PPUSH
7310: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7314: LD_ADDR_VAR 0 1
7318: PUSH
7319: LD_VAR 0 1
7323: PUSH
7324: LD_INT 35
7326: MINUS
7327: ST_TO_ADDR
// until not tmp ;
7328: LD_VAR 0 1
7332: NOT
7333: IFFALSE 7307
// EndBuildUp ;
7335: CALL 6918 0 0
// end ;
7339: PPOPN 1
7341: END
// every 0 0$1 trigger mpActive marked mpWin do
7342: LD_INT 100
7344: IFFALSE 7378
7346: GO 7348
7348: DISABLE
// begin if IAmServer then
7349: CALL_OW 518
7353: IFFALSE 7362
// wait ( 0 0$3 ) ;
7355: LD_INT 105
7357: PPUSH
7358: CALL_OW 67
// if Multiplayer then
7362: LD_OWVAR 4
7366: IFFALSE 7374
// YouWinInMultiplayer else
7368: CALL_OW 106
7372: GO 7378
// YouWin ;
7374: CALL_OW 103
// end ;
7378: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7379: LD_INT 0
7381: PPUSH
// result := false ;
7382: LD_ADDR_VAR 0 3
7386: PUSH
7387: LD_INT 0
7389: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
7390: LD_VAR 0 1
7394: PUSH
7395: LD_INT 1
7397: DOUBLE
7398: EQUAL
7399: IFTRUE 7409
7401: LD_INT 5
7403: DOUBLE
7404: EQUAL
7405: IFTRUE 7409
7407: GO 7482
7409: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7410: LD_ADDR_VAR 0 3
7414: PUSH
7415: LD_INT 22
7417: PUSH
7418: LD_VAR 0 2
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 2
7429: PUSH
7430: LD_INT 21
7432: PUSH
7433: LD_INT 1
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PUSH
7440: LD_INT 33
7442: PUSH
7443: LD_INT 3
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: LD_INT 33
7452: PUSH
7453: LD_INT 5
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: PPUSH
7470: CALL_OW 69
7474: PPUSH
7475: CALL 14438 0 1
7479: ST_TO_ADDR
// end ; GameTypeSurvival :
7480: GO 7721
7482: LD_INT 2
7484: DOUBLE
7485: EQUAL
7486: IFTRUE 7490
7488: GO 7620
7490: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7491: LD_ADDR_VAR 0 3
7495: PUSH
7496: LD_INT 22
7498: PUSH
7499: LD_VAR 0 2
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_INT 2
7510: PUSH
7511: LD_INT 30
7513: PUSH
7514: LD_INT 0
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PUSH
7521: LD_INT 30
7523: PUSH
7524: LD_INT 1
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: LIST
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: PPUSH
7540: CALL_OW 69
7544: PPUSH
7545: CALL 14438 0 1
7549: IFFALSE 7617
7551: PUSH
7552: LD_INT 22
7554: PUSH
7555: LD_VAR 0 2
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 2
7566: PUSH
7567: LD_INT 21
7569: PUSH
7570: LD_INT 1
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 33
7579: PUSH
7580: LD_INT 3
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: PUSH
7587: LD_INT 33
7589: PUSH
7590: LD_INT 5
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PPUSH
7607: CALL_OW 69
7611: PPUSH
7612: CALL 14438 0 1
7616: AND
7617: ST_TO_ADDR
// end ; GameTypeKing :
7618: GO 7721
7620: LD_INT 3
7622: DOUBLE
7623: EQUAL
7624: IFTRUE 7628
7626: GO 7720
7628: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7629: LD_ADDR_VAR 0 3
7633: PUSH
7634: LD_INT 22
7636: PUSH
7637: LD_VAR 0 2
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: LD_INT 2
7648: PUSH
7649: LD_INT 21
7651: PUSH
7652: LD_INT 1
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PUSH
7659: LD_INT 33
7661: PUSH
7662: LD_INT 3
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_INT 33
7671: PUSH
7672: LD_INT 5
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 69
7693: PPUSH
7694: CALL 14438 0 1
7698: IFFALSE 7717
7700: PUSH
7701: LD_VAR 0 2
7705: PPUSH
7706: CALL 11578 0 1
7710: PUSH
7711: LD_EXP 35
7715: LESS
7716: AND
7717: ST_TO_ADDR
// end ; end ;
7718: GO 7721
7720: POP
// end ;
7721: LD_VAR 0 3
7725: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7726: LD_INT 100
7728: IFFALSE 7958
7730: GO 7732
7732: DISABLE
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
// begin if Multiplayer then
7737: LD_OWVAR 4
7741: IFFALSE 7749
// SetPlayerSpectator ( ) else
7743: CALL_OW 572
7747: GO 7758
// FogOff ( your_side ) ;
7749: LD_OWVAR 2
7753: PPUSH
7754: CALL_OW 344
// repeat gameIsOn := false ;
7758: LD_ADDR_VAR 0 1
7762: PUSH
7763: LD_INT 0
7765: ST_TO_ADDR
// for i := 1 to 8 do
7766: LD_ADDR_VAR 0 2
7770: PUSH
7771: DOUBLE
7772: LD_INT 1
7774: DEC
7775: ST_TO_ADDR
7776: LD_INT 8
7778: PUSH
7779: FOR_TO
7780: IFFALSE 7910
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7782: LD_EXP 7
7786: PUSH
7787: LD_VAR 0 2
7791: ARRAY
7792: IFFALSE 7805
7794: PUSH
7795: LD_VAR 0 2
7799: PPUSH
7800: CALL_OW 108
7804: AND
7805: IFFALSE 7819
7807: PUSH
7808: LD_VAR 0 2
7812: PUSH
7813: LD_OWVAR 2
7817: NONEQUAL
7818: AND
7819: IFFALSE 7908
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7821: LD_EXP 8
7825: PUSH
7826: LD_VAR 0 2
7830: ARRAY
7831: NOT
7832: IFTRUE 7880
7834: PUSH
7835: LD_EXP 8
7839: PUSH
7840: LD_VAR 0 2
7844: ARRAY
7845: PUSH
7846: LD_EXP 8
7850: PUSH
7851: LD_OWVAR 2
7855: ARRAY
7856: NONEQUAL
7857: IFFALSE 7879
7859: PUSH
7860: LD_OWVAR 2
7864: PPUSH
7865: LD_VAR 0 2
7869: PPUSH
7870: CALL_OW 81
7874: PUSH
7875: LD_INT 1
7877: NONEQUAL
7878: AND
7879: OR
7880: IFFALSE 7908
// if HasPowerByGameType ( mpGameType , i ) then
7882: LD_EXP 3
7886: PPUSH
7887: LD_VAR 0 2
7891: PPUSH
7892: CALL 7379 0 2
7896: IFFALSE 7908
// begin gameIsOn := true ;
7898: LD_ADDR_VAR 0 1
7902: PUSH
7903: LD_INT 1
7905: ST_TO_ADDR
// break ;
7906: GO 7910
// end ;
7908: GO 7779
7910: POP
7911: POP
// wait ( 100 ) ;
7912: LD_INT 100
7914: PPUSH
7915: CALL_OW 67
// until not gameIsOn ;
7919: LD_VAR 0 1
7923: NOT
7924: IFFALSE 7758
// if IAmServer then
7926: CALL_OW 518
7930: IFFALSE 7939
// wait ( 0 0$3 ) ;
7932: LD_INT 105
7934: PPUSH
7935: CALL_OW 67
// if Multiplayer then
7939: LD_OWVAR 4
7943: IFFALSE 7951
// YouLostInMultiplayer else
7945: CALL_OW 107
7949: GO 7958
// YouLost (  ) ;
7951: LD_STRING 
7953: PPUSH
7954: CALL_OW 104
// end ;
7958: PPOPN 2
7960: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7961: LD_EXP 33
7965: IFFALSE 8349
7967: GO 7969
7969: DISABLE
7970: LD_INT 0
7972: PPUSH
7973: PPUSH
7974: PPUSH
7975: PPUSH
7976: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7977: LD_ADDR_VAR 0 5
7981: PUSH
7982: LD_INT 1
7984: PUSH
7985: LD_INT 2
7987: PUSH
7988: LD_INT 3
7990: PUSH
7991: LD_INT 4
7993: PUSH
7994: LD_INT 5
7996: PUSH
7997: LD_INT 6
7999: PUSH
8000: LD_INT 7
8002: PUSH
8003: LD_INT 8
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
8016: LD_INT 350
8018: PPUSH
8019: CALL_OW 67
// for i := 1 to 8 do
8023: LD_ADDR_VAR 0 1
8027: PUSH
8028: DOUBLE
8029: LD_INT 1
8031: DEC
8032: ST_TO_ADDR
8033: LD_INT 8
8035: PUSH
8036: FOR_TO
8037: IFFALSE 8319
// begin j := sides [ i ] ;
8039: LD_ADDR_VAR 0 2
8043: PUSH
8044: LD_VAR 0 5
8048: PUSH
8049: LD_VAR 0 1
8053: ARRAY
8054: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
8055: LD_EXP 40
8059: PUSH
8060: LD_VAR 0 2
8064: ARRAY
8065: PPUSH
8066: CALL 14438 0 1
8070: IFFALSE 8083
8072: PUSH
8073: LD_VAR 0 2
8077: PPUSH
8078: CALL_OW 108
8082: AND
8083: IFFALSE 8101
8085: PUSH
8086: LD_EXP 3
8090: PPUSH
8091: LD_VAR 0 2
8095: PPUSH
8096: CALL 7379 0 2
8100: AND
8101: IFFALSE 8317
// begin wait ( mpRespawn div 2 ) ;
8103: LD_EXP 33
8107: PUSH
8108: LD_INT 2
8110: DIV
8111: PPUSH
8112: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8116: LD_ADDR_VAR 0 3
8120: PUSH
8121: LD_INT 22
8123: PUSH
8124: LD_VAR 0 2
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: LD_INT 50
8135: PUSH
8136: EMPTY
8137: LIST
8138: PUSH
8139: LD_INT 2
8141: PUSH
8142: LD_INT 30
8144: PUSH
8145: LD_INT 0
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PUSH
8152: LD_INT 30
8154: PUSH
8155: LD_INT 1
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: LIST
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: PPUSH
8172: CALL_OW 69
8176: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8177: LD_VAR 0 3
8181: NOT
8182: IFTRUE 8196
8184: PUSH
8185: LD_VAR 0 2
8189: PPUSH
8190: CALL_OW 108
8194: NOT
8195: OR
8196: IFTRUE 8215
8198: PUSH
8199: LD_EXP 3
8203: PPUSH
8204: LD_VAR 0 2
8208: PPUSH
8209: CALL 7379 0 2
8213: NOT
8214: OR
8215: IFFALSE 8219
// continue ;
8217: GO 8036
// spawn := tmp [ 1 ] ;
8219: LD_ADDR_VAR 0 4
8223: PUSH
8224: LD_VAR 0 3
8228: PUSH
8229: LD_INT 1
8231: ARRAY
8232: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8233: LD_EXP 40
8237: PUSH
8238: LD_VAR 0 2
8242: ARRAY
8243: PUSH
8244: LD_INT 1
8246: ARRAY
8247: PPUSH
8248: LD_VAR 0 4
8252: PPUSH
8253: CALL_OW 250
8257: PPUSH
8258: LD_VAR 0 4
8262: PPUSH
8263: CALL_OW 251
8267: PPUSH
8268: LD_INT 32
8270: PPUSH
8271: LD_INT 1
8273: PPUSH
8274: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8278: LD_ADDR_EXP 40
8282: PUSH
8283: LD_EXP 40
8287: PPUSH
8288: LD_VAR 0 2
8292: PPUSH
8293: LD_EXP 40
8297: PUSH
8298: LD_VAR 0 2
8302: ARRAY
8303: PPUSH
8304: LD_INT 1
8306: PPUSH
8307: CALL_OW 3
8311: PPUSH
8312: CALL_OW 1
8316: ST_TO_ADDR
// end ; end ;
8317: GO 8036
8319: POP
8320: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8321: LD_ADDR_VAR 0 5
8325: PUSH
8326: LD_VAR 0 5
8330: PPUSH
8331: LD_INT 1
8333: PPUSH
8334: LD_INT 8
8336: PPUSH
8337: LD_INT 1
8339: PPUSH
8340: CALL 16730 0 4
8344: ST_TO_ADDR
// until false ;
8345: LD_INT 0
8347: IFFALSE 8016
// end ;
8349: PPOPN 5
8351: END
// every 0 0$1 marked mpActive do
8352: GO 8354
8354: DISABLE
// begin enable ;
8355: ENABLE
// if not mpDisplayStrings then
8356: LD_EXP 38
8360: NOT
8361: IFFALSE 8372
// begin display_strings := [ ] ;
8363: LD_ADDR_OWVAR 47
8367: PUSH
8368: EMPTY
8369: ST_TO_ADDR
// exit ;
8370: GO 8382
// end ; display_strings := mpDisplayStrings ;
8372: LD_ADDR_OWVAR 47
8376: PUSH
8377: LD_EXP 38
8381: ST_TO_ADDR
// end ; end_of_file
8382: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8383: LD_INT 0
8385: PPUSH
8386: PPUSH
8387: PPUSH
8388: PPUSH
8389: PPUSH
8390: PPUSH
8391: PPUSH
8392: PPUSH
8393: PPUSH
// if GetType ( un ) = unit_vehicle then
8394: LD_VAR 0 1
8398: PPUSH
8399: CALL_OW 247
8403: PUSH
8404: LD_INT 2
8406: EQUAL
8407: IFFALSE 8411
// exit ;
8409: GO 9085
// side := GetSide ( un ) ;
8411: LD_ADDR_VAR 0 9
8415: PUSH
8416: LD_VAR 0 1
8420: PPUSH
8421: CALL_OW 255
8425: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
8426: LD_EXP 3
8430: PUSH
8431: LD_INT 2
8433: EQUAL
8434: IFFALSE 8528
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8436: LD_VAR 0 1
8440: PPUSH
8441: CALL_OW 266
8445: PUSH
8446: LD_INT 0
8448: PUSH
8449: LD_INT 1
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: IN
8456: IFFALSE 8528
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8458: LD_ADDR_VAR 0 3
8462: PUSH
8463: LD_INT 22
8465: PUSH
8466: LD_VAR 0 9
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 2
8477: PUSH
8478: LD_INT 21
8480: PUSH
8481: LD_INT 1
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: LD_INT 33
8490: PUSH
8491: LD_INT 3
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PPUSH
8507: CALL_OW 69
8511: PUSH
8512: FOR_IN
8513: IFFALSE 8526
// KillUnit ( i ) ;
8515: LD_VAR 0 3
8519: PPUSH
8520: CALL_OW 66
8524: GO 8512
8526: POP
8527: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8528: LD_VAR 0 1
8532: PPUSH
8533: CALL_OW 257
8537: PUSH
8538: LD_INT 12
8540: PUSH
8541: LD_INT 17
8543: PUSH
8544: LD_INT 15
8546: PUSH
8547: LD_INT 16
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: IN
8556: IFTRUE 8573
8558: PUSH
8559: LD_VAR 0 1
8563: PPUSH
8564: CALL_OW 263
8568: PUSH
8569: LD_INT 5
8571: EQUAL
8572: OR
8573: IFFALSE 8810
// begin tag := 0 ;
8575: LD_ADDR_VAR 0 5
8579: PUSH
8580: LD_INT 0
8582: ST_TO_ADDR
// for i := 1 to 8 do
8583: LD_ADDR_VAR 0 3
8587: PUSH
8588: DOUBLE
8589: LD_INT 1
8591: DEC
8592: ST_TO_ADDR
8593: LD_INT 8
8595: PUSH
8596: FOR_TO
8597: IFFALSE 8631
// if un in mpApePosIndex [ i ] then
8599: LD_VAR 0 1
8603: PUSH
8604: LD_EXP 32
8608: PUSH
8609: LD_VAR 0 3
8613: ARRAY
8614: IN
8615: IFFALSE 8629
// begin tag := i ;
8617: LD_ADDR_VAR 0 5
8621: PUSH
8622: LD_VAR 0 3
8626: ST_TO_ADDR
// break ;
8627: GO 8631
// end ;
8629: GO 8596
8631: POP
8632: POP
// if not tag then
8633: LD_VAR 0 5
8637: NOT
8638: IFFALSE 8642
// exit ;
8640: GO 9085
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8642: LD_ADDR_VAR 0 7
8646: PUSH
8647: LD_EXP 31
8651: PUSH
8652: LD_EXP 7
8656: PUSH
8657: LD_VAR 0 5
8661: ARRAY
8662: ARRAY
8663: ST_TO_ADDR
// if not area then
8664: LD_VAR 0 7
8668: NOT
8669: IFFALSE 8673
// exit ;
8671: GO 9085
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8673: LD_INT 14700
8675: PUSH
8676: LD_VAR 0 1
8680: PUSH
8681: LD_INT 5
8683: MOD
8684: PUSH
8685: LD_INT 1
8687: PLUS
8688: PUSH
8689: LD_INT 700
8691: MUL
8692: PLUS
8693: PPUSH
8694: CALL_OW 67
// repeat wait ( 10 ) ;
8698: LD_INT 10
8700: PPUSH
8701: CALL_OW 67
// until not mpBlockRespThread ;
8705: LD_EXP 45
8709: NOT
8710: IFFALSE 8698
// mpBlockRespThread := true ;
8712: LD_ADDR_EXP 45
8716: PUSH
8717: LD_INT 1
8719: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8720: LD_INT 0
8722: PPUSH
8723: CALL 46497 0 1
// ape := CreateHuman ;
8727: LD_ADDR_VAR 0 4
8731: PUSH
8732: CALL_OW 44
8736: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8737: LD_ADDR_EXP 32
8741: PUSH
8742: LD_EXP 32
8746: PPUSH
8747: LD_VAR 0 5
8751: PPUSH
8752: LD_EXP 32
8756: PUSH
8757: LD_VAR 0 5
8761: ARRAY
8762: PPUSH
8763: LD_VAR 0 4
8767: PPUSH
8768: CALL 50370 0 2
8772: PPUSH
8773: CALL_OW 1
8777: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8778: LD_VAR 0 4
8782: PPUSH
8783: LD_VAR 0 7
8787: PPUSH
8788: LD_INT 0
8790: PPUSH
8791: CALL_OW 49
// wait ( 10 ) ;
8795: LD_INT 10
8797: PPUSH
8798: CALL_OW 67
// mpBlockRespThread := false ;
8802: LD_ADDR_EXP 45
8806: PUSH
8807: LD_INT 0
8809: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8810: LD_VAR 0 1
8814: PPUSH
8815: CALL_OW 247
8819: PUSH
8820: LD_INT 1
8822: EQUAL
8823: IFFALSE 8840
8825: PUSH
8826: LD_VAR 0 1
8830: PPUSH
8831: CALL_OW 248
8835: PUSH
8836: LD_INT 0
8838: GREATER
8839: AND
8840: IFFALSE 9085
// begin if not mpRespawn then
8842: LD_EXP 33
8846: NOT
8847: IFFALSE 8851
// exit ;
8849: GO 9085
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8851: LD_VAR 0 9
8855: PPUSH
8856: CALL_OW 108
8860: NOT
8861: IFFALSE 8880
8863: PUSH
8864: LD_EXP 3
8868: PPUSH
8869: LD_VAR 0 9
8873: PPUSH
8874: CALL 7379 0 2
8878: NOT
8879: AND
8880: IFFALSE 8884
// exit ;
8882: GO 9085
// side := GetSide ( un ) ;
8884: LD_ADDR_VAR 0 9
8888: PUSH
8889: LD_VAR 0 1
8893: PPUSH
8894: CALL_OW 255
8898: ST_TO_ADDR
// nation := GetNation ( un ) ;
8899: LD_ADDR_VAR 0 8
8903: PUSH
8904: LD_VAR 0 1
8908: PPUSH
8909: CALL_OW 248
8913: ST_TO_ADDR
// class := GetClass ( un ) ;
8914: LD_ADDR_VAR 0 6
8918: PUSH
8919: LD_VAR 0 1
8923: PPUSH
8924: CALL_OW 257
8928: ST_TO_ADDR
// if class > 4 then
8929: LD_VAR 0 6
8933: PUSH
8934: LD_INT 4
8936: GREATER
8937: IFFALSE 8947
// class := 1 ;
8939: LD_ADDR_VAR 0 6
8943: PUSH
8944: LD_INT 1
8946: ST_TO_ADDR
// repeat wait ( 10 ) ;
8947: LD_INT 10
8949: PPUSH
8950: CALL_OW 67
// until not mpBlockRespThread ;
8954: LD_EXP 45
8958: NOT
8959: IFFALSE 8947
// mpBlockRespThread := true ;
8961: LD_ADDR_EXP 45
8965: PUSH
8966: LD_INT 1
8968: ST_TO_ADDR
// uc_side := side ;
8969: LD_ADDR_OWVAR 20
8973: PUSH
8974: LD_VAR 0 9
8978: ST_TO_ADDR
// uc_nation := nation ;
8979: LD_ADDR_OWVAR 21
8983: PUSH
8984: LD_VAR 0 8
8988: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8989: LD_INT 0
8991: PPUSH
8992: LD_VAR 0 6
8996: PPUSH
8997: LD_INT 2
8999: PPUSH
9000: CALL_OW 380
// un := CreateHuman ;
9004: LD_ADDR_VAR 0 1
9008: PUSH
9009: CALL_OW 44
9013: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
9014: LD_ADDR_EXP 40
9018: PUSH
9019: LD_EXP 40
9023: PPUSH
9024: LD_VAR 0 9
9028: PPUSH
9029: LD_EXP 40
9033: PUSH
9034: LD_VAR 0 9
9038: ARRAY
9039: PPUSH
9040: LD_EXP 40
9044: PUSH
9045: LD_VAR 0 9
9049: ARRAY
9050: PUSH
9051: LD_INT 1
9053: PLUS
9054: PPUSH
9055: LD_VAR 0 1
9059: PPUSH
9060: CALL_OW 1
9064: PPUSH
9065: CALL_OW 1
9069: ST_TO_ADDR
// wait ( 10 ) ;
9070: LD_INT 10
9072: PPUSH
9073: CALL_OW 67
// mpBlockRespThread := false ;
9077: LD_ADDR_EXP 45
9081: PUSH
9082: LD_INT 0
9084: ST_TO_ADDR
// end ; end ;
9085: LD_VAR 0 2
9089: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9090: LD_INT 0
9092: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9093: LD_VAR 0 1
9097: PPUSH
9098: CALL_OW 266
9102: PUSH
9103: LD_INT 0
9105: PUSH
9106: LD_INT 1
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: IN
9113: IFFALSE 9138
// SetBName ( building , @ & GetSide ( building ) ) ;
9115: LD_VAR 0 1
9119: PPUSH
9120: LD_STRING @
9122: PUSH
9123: LD_VAR 0 1
9127: PPUSH
9128: CALL_OW 255
9132: STR
9133: PPUSH
9134: CALL_OW 500
// end ;
9138: LD_VAR 0 2
9142: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9143: LD_INT 0
9145: PPUSH
9146: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
9147: LD_EXP 3
9151: PUSH
9152: LD_INT 2
9154: EQUAL
9155: IFFALSE 9179
9157: PUSH
9158: LD_VAR 0 1
9162: PPUSH
9163: CALL_OW 266
9167: PUSH
9168: LD_INT 0
9170: PUSH
9171: LD_INT 1
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: IN
9178: AND
9179: IFFALSE 9258
// begin SetSide ( building , oldSide ) ;
9181: LD_VAR 0 1
9185: PPUSH
9186: LD_VAR 0 2
9190: PPUSH
9191: CALL_OW 235
// KillUnit ( building ) ;
9195: LD_VAR 0 1
9199: PPUSH
9200: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9204: LD_ADDR_VAR 0 5
9208: PUSH
9209: LD_INT 22
9211: PUSH
9212: LD_VAR 0 2
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 21
9223: PUSH
9224: LD_INT 1
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PPUSH
9235: CALL_OW 69
9239: PUSH
9240: FOR_IN
9241: IFFALSE 9254
// KillUnit ( i ) ;
9243: LD_VAR 0 5
9247: PPUSH
9248: CALL_OW 66
9252: GO 9240
9254: POP
9255: POP
// exit ;
9256: GO 9303
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9258: LD_VAR 0 1
9262: PPUSH
9263: CALL_OW 266
9267: PUSH
9268: LD_INT 0
9270: PUSH
9271: LD_INT 1
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: IN
9278: IFFALSE 9303
// SetBName ( building , @ & GetSide ( building ) ) ;
9280: LD_VAR 0 1
9284: PPUSH
9285: LD_STRING @
9287: PUSH
9288: LD_VAR 0 1
9292: PPUSH
9293: CALL_OW 255
9297: STR
9298: PPUSH
9299: CALL_OW 500
// end ;
9303: LD_VAR 0 4
9307: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9308: LD_INT 0
9310: PPUSH
9311: PPUSH
9312: PPUSH
// if mpGameType <> GameTypeFamine then
9313: LD_EXP 3
9317: PUSH
9318: LD_INT 5
9320: NONEQUAL
9321: IFFALSE 9325
// exit ;
9323: GO 9539
// for i := 1 to mpGlobalOilDeposits do
9325: LD_ADDR_VAR 0 6
9329: PUSH
9330: DOUBLE
9331: LD_INT 1
9333: DEC
9334: ST_TO_ADDR
9335: LD_EXP 41
9339: PUSH
9340: FOR_TO
9341: IFFALSE 9537
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9343: LD_EXP 41
9347: PUSH
9348: LD_VAR 0 6
9352: ARRAY
9353: PUSH
9354: LD_INT 1
9356: ARRAY
9357: PPUSH
9358: LD_EXP 41
9362: PUSH
9363: LD_VAR 0 6
9367: ARRAY
9368: PUSH
9369: LD_INT 2
9371: ARRAY
9372: PPUSH
9373: CALL_OW 428
9377: PUSH
9378: LD_VAR 0 1
9382: EQUAL
9383: IFFALSE 9535
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9385: LD_ADDR_VAR 0 7
9389: PUSH
9390: LD_EXP 41
9394: PUSH
9395: LD_VAR 0 6
9399: ARRAY
9400: PUSH
9401: LD_INT 3
9403: ARRAY
9404: ST_TO_ADDR
// value := Dec ( value ) ;
9405: LD_ADDR_VAR 0 7
9409: PUSH
9410: LD_VAR 0 7
9414: PPUSH
9415: CALL 51765 0 1
9419: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9420: LD_ADDR_EXP 41
9424: PUSH
9425: LD_EXP 41
9429: PPUSH
9430: LD_VAR 0 6
9434: PPUSH
9435: LD_EXP 41
9439: PUSH
9440: LD_VAR 0 6
9444: ARRAY
9445: PPUSH
9446: LD_INT 3
9448: PPUSH
9449: LD_VAR 0 7
9453: PPUSH
9454: CALL_OW 1
9458: PPUSH
9459: CALL_OW 1
9463: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9464: LD_VAR 0 1
9468: PPUSH
9469: LD_VAR 0 7
9473: PPUSH
9474: CALL_OW 505
// if value = 0 then
9478: LD_VAR 0 7
9482: PUSH
9483: LD_INT 0
9485: EQUAL
9486: IFFALSE 9535
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9488: LD_EXP 41
9492: PUSH
9493: LD_VAR 0 6
9497: ARRAY
9498: PUSH
9499: LD_INT 1
9501: ARRAY
9502: PPUSH
9503: LD_EXP 41
9507: PUSH
9508: LD_VAR 0 6
9512: ARRAY
9513: PUSH
9514: LD_INT 2
9516: ARRAY
9517: PPUSH
9518: CALL_OW 63
// KillUnit ( building ) ;
9522: LD_VAR 0 1
9526: PPUSH
9527: CALL_OW 66
// exit ;
9531: POP
9532: POP
9533: GO 9539
// end ; end ; end ;
9535: GO 9340
9537: POP
9538: POP
// end ;
9539: LD_VAR 0 5
9543: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9544: LD_INT 0
9546: PPUSH
9547: PPUSH
9548: PPUSH
// if mpGameType <> GameTypeFamine then
9549: LD_EXP 3
9553: PUSH
9554: LD_INT 5
9556: NONEQUAL
9557: IFFALSE 9561
// exit ;
9559: GO 9775
// for i := 1 to mpGlobalSibDeposits do
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: DOUBLE
9567: LD_INT 1
9569: DEC
9570: ST_TO_ADDR
9571: LD_EXP 42
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9773
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9579: LD_EXP 42
9583: PUSH
9584: LD_VAR 0 6
9588: ARRAY
9589: PUSH
9590: LD_INT 1
9592: ARRAY
9593: PPUSH
9594: LD_EXP 42
9598: PUSH
9599: LD_VAR 0 6
9603: ARRAY
9604: PUSH
9605: LD_INT 2
9607: ARRAY
9608: PPUSH
9609: CALL_OW 428
9613: PUSH
9614: LD_VAR 0 1
9618: EQUAL
9619: IFFALSE 9771
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9621: LD_ADDR_VAR 0 7
9625: PUSH
9626: LD_EXP 42
9630: PUSH
9631: LD_VAR 0 6
9635: ARRAY
9636: PUSH
9637: LD_INT 3
9639: ARRAY
9640: ST_TO_ADDR
// value := Dec ( value ) ;
9641: LD_ADDR_VAR 0 7
9645: PUSH
9646: LD_VAR 0 7
9650: PPUSH
9651: CALL 51765 0 1
9655: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9656: LD_ADDR_EXP 42
9660: PUSH
9661: LD_EXP 42
9665: PPUSH
9666: LD_VAR 0 6
9670: PPUSH
9671: LD_EXP 42
9675: PUSH
9676: LD_VAR 0 6
9680: ARRAY
9681: PPUSH
9682: LD_INT 3
9684: PPUSH
9685: LD_VAR 0 7
9689: PPUSH
9690: CALL_OW 1
9694: PPUSH
9695: CALL_OW 1
9699: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9700: LD_VAR 0 1
9704: PPUSH
9705: LD_VAR 0 7
9709: PPUSH
9710: CALL_OW 505
// if value = 0 then
9714: LD_VAR 0 7
9718: PUSH
9719: LD_INT 0
9721: EQUAL
9722: IFFALSE 9771
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9724: LD_EXP 42
9728: PUSH
9729: LD_VAR 0 6
9733: ARRAY
9734: PUSH
9735: LD_INT 1
9737: ARRAY
9738: PPUSH
9739: LD_EXP 42
9743: PUSH
9744: LD_VAR 0 6
9748: ARRAY
9749: PUSH
9750: LD_INT 2
9752: ARRAY
9753: PPUSH
9754: CALL_OW 63
// KillUnit ( building ) ;
9758: LD_VAR 0 1
9762: PPUSH
9763: CALL_OW 66
// exit ;
9767: POP
9768: POP
9769: GO 9775
// end ; end ; end ;
9771: GO 9576
9773: POP
9774: POP
// end ; end_of_file
9775: LD_VAR 0 5
9779: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9780: LD_EXP 39
9784: IFFALSE 9792
9786: PUSH
9787: CALL 10002 0 0
9791: AND
9792: IFFALSE 9800
9794: PUSH
9795: LD_OWVAR 4
9799: AND
9800: IFFALSE 9999
9802: GO 9804
9804: DISABLE
9805: LD_INT 0
9807: PPUSH
9808: PPUSH
// begin canWin := false ;
9809: LD_ADDR_VAR 0 2
9813: PUSH
9814: LD_INT 0
9816: ST_TO_ADDR
// if not HasPower ( your_side ) then
9817: LD_OWVAR 2
9821: PPUSH
9822: CALL 10044 0 1
9826: NOT
9827: IFFALSE 9838
// begin Multiplayer_Loose_Message ;
9829: CALL_OW 521
// enable ( mpLose ) ;
9833: LD_INT 102
9835: ENABLE_MARKED
// end else
9836: GO 9999
// begin canWin := true ;
9838: LD_ADDR_VAR 0 2
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// for i := 1 to 8 do
9846: LD_ADDR_VAR 0 1
9850: PUSH
9851: DOUBLE
9852: LD_INT 1
9854: DEC
9855: ST_TO_ADDR
9856: LD_INT 8
9858: PUSH
9859: FOR_TO
9860: IFFALSE 9985
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9862: LD_EXP 7
9866: PUSH
9867: LD_VAR 0 1
9871: ARRAY
9872: IFFALSE 9885
9874: PUSH
9875: LD_VAR 0 1
9879: PPUSH
9880: CALL_OW 108
9884: AND
9885: IFFALSE 9899
9887: PUSH
9888: LD_VAR 0 1
9892: PUSH
9893: LD_OWVAR 2
9897: NONEQUAL
9898: AND
9899: IFFALSE 9983
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9901: LD_EXP 8
9905: PUSH
9906: LD_VAR 0 1
9910: ARRAY
9911: NOT
9912: IFTRUE 9960
9914: PUSH
9915: LD_EXP 8
9919: PUSH
9920: LD_VAR 0 1
9924: ARRAY
9925: PUSH
9926: LD_EXP 8
9930: PUSH
9931: LD_OWVAR 2
9935: ARRAY
9936: NONEQUAL
9937: IFFALSE 9959
9939: PUSH
9940: LD_OWVAR 2
9944: PPUSH
9945: LD_VAR 0 1
9949: PPUSH
9950: CALL_OW 81
9954: PUSH
9955: LD_INT 1
9957: NONEQUAL
9958: AND
9959: OR
9960: IFFALSE 9983
// if HasPower ( i ) then
9962: LD_VAR 0 1
9966: PPUSH
9967: CALL 10044 0 1
9971: IFFALSE 9983
// begin canWin := false ;
9973: LD_ADDR_VAR 0 2
9977: PUSH
9978: LD_INT 0
9980: ST_TO_ADDR
// break ;
9981: GO 9985
// end ;
9983: GO 9859
9985: POP
9986: POP
// if canWin then
9987: LD_VAR 0 2
9991: IFFALSE 9998
// enable ( mpWin ) else
9993: LD_INT 101
9995: ENABLE_MARKED
9996: GO 9999
// enable ;
9998: ENABLE
// end ; end ;
9999: PPOPN 2
10001: END
// function CanWinLoose ; begin
10002: LD_INT 0
10004: PPUSH
// result := true ;
10005: LD_ADDR_VAR 0 1
10009: PUSH
10010: LD_INT 1
10012: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10013: CALL_OW 531
10017: IFFALSE 10029
10019: PUSH
10020: CALL_OW 519
10024: PUSH
10025: LD_INT 1
10027: GREATER
10028: AND
10029: IFFALSE 10039
// result := false ;
10031: LD_ADDR_VAR 0 1
10035: PUSH
10036: LD_INT 0
10038: ST_TO_ADDR
// end ;
10039: LD_VAR 0 1
10043: RET
// function HasPower ( i ) ; begin
10044: LD_INT 0
10046: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10047: LD_ADDR_VAR 0 2
10051: PUSH
10052: LD_INT 22
10054: PUSH
10055: LD_VAR 0 1
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PUSH
10064: LD_INT 2
10066: PUSH
10067: LD_INT 21
10069: PUSH
10070: LD_INT 1
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: LD_INT 33
10079: PUSH
10080: LD_INT 3
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 33
10089: PUSH
10090: LD_INT 5
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PPUSH
10107: CALL_OW 69
10111: ST_TO_ADDR
// end ; end_of_file
10112: LD_VAR 0 2
10116: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10117: LD_EXP 39
10121: IFFALSE 10164
10123: GO 10125
10125: DISABLE
10126: LD_INT 0
10128: PPUSH
// begin for i := 1 to 8 do
10129: LD_ADDR_VAR 0 1
10133: PUSH
10134: DOUBLE
10135: LD_INT 1
10137: DEC
10138: ST_TO_ADDR
10139: LD_INT 8
10141: PUSH
10142: FOR_TO
10143: IFFALSE 10162
// SetRestrict ( b_depot , i , state_disabled ) ;
10145: LD_INT 0
10147: PPUSH
10148: LD_VAR 0 1
10152: PPUSH
10153: LD_INT 0
10155: PPUSH
10156: CALL_OW 324
10160: GO 10142
10162: POP
10163: POP
// end ;
10164: PPOPN 1
10166: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10167: LD_EXP 39
10171: IFFALSE 10179
10173: PUSH
10174: CALL 10389 0 0
10178: AND
10179: IFFALSE 10187
10181: PUSH
10182: LD_OWVAR 4
10186: AND
10187: IFFALSE 10386
10189: GO 10191
10191: DISABLE
10192: LD_INT 0
10194: PPUSH
10195: PPUSH
// begin canWin := false ;
10196: LD_ADDR_VAR 0 2
10200: PUSH
10201: LD_INT 0
10203: ST_TO_ADDR
// if not HasPower ( your_side ) then
10204: LD_OWVAR 2
10208: PPUSH
10209: CALL 10431 0 1
10213: NOT
10214: IFFALSE 10225
// begin Multiplayer_Loose_Message ;
10216: CALL_OW 521
// enable ( mpLose ) ;
10220: LD_INT 102
10222: ENABLE_MARKED
// end else
10223: GO 10386
// begin canWin := true ;
10225: LD_ADDR_VAR 0 2
10229: PUSH
10230: LD_INT 1
10232: ST_TO_ADDR
// for i := 1 to 8 do
10233: LD_ADDR_VAR 0 1
10237: PUSH
10238: DOUBLE
10239: LD_INT 1
10241: DEC
10242: ST_TO_ADDR
10243: LD_INT 8
10245: PUSH
10246: FOR_TO
10247: IFFALSE 10372
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10249: LD_EXP 7
10253: PUSH
10254: LD_VAR 0 1
10258: ARRAY
10259: IFFALSE 10272
10261: PUSH
10262: LD_VAR 0 1
10266: PPUSH
10267: CALL_OW 108
10271: AND
10272: IFFALSE 10286
10274: PUSH
10275: LD_VAR 0 1
10279: PUSH
10280: LD_OWVAR 2
10284: NONEQUAL
10285: AND
10286: IFFALSE 10370
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10288: LD_EXP 8
10292: PUSH
10293: LD_VAR 0 1
10297: ARRAY
10298: NOT
10299: IFTRUE 10347
10301: PUSH
10302: LD_EXP 8
10306: PUSH
10307: LD_VAR 0 1
10311: ARRAY
10312: PUSH
10313: LD_EXP 8
10317: PUSH
10318: LD_OWVAR 2
10322: ARRAY
10323: NONEQUAL
10324: IFFALSE 10346
10326: PUSH
10327: LD_OWVAR 2
10331: PPUSH
10332: LD_VAR 0 1
10336: PPUSH
10337: CALL_OW 81
10341: PUSH
10342: LD_INT 1
10344: NONEQUAL
10345: AND
10346: OR
10347: IFFALSE 10370
// if HasPower ( i ) then
10349: LD_VAR 0 1
10353: PPUSH
10354: CALL 10431 0 1
10358: IFFALSE 10370
// begin canWin := false ;
10360: LD_ADDR_VAR 0 2
10364: PUSH
10365: LD_INT 0
10367: ST_TO_ADDR
// break ;
10368: GO 10372
// end ;
10370: GO 10246
10372: POP
10373: POP
// if canWin then
10374: LD_VAR 0 2
10378: IFFALSE 10385
// enable ( mpWin ) else
10380: LD_INT 101
10382: ENABLE_MARKED
10383: GO 10386
// enable ;
10385: ENABLE
// end ; end ;
10386: PPOPN 2
10388: END
// function CanWinLoose ; begin
10389: LD_INT 0
10391: PPUSH
// result := true ;
10392: LD_ADDR_VAR 0 1
10396: PUSH
10397: LD_INT 1
10399: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10400: CALL_OW 531
10404: IFFALSE 10416
10406: PUSH
10407: CALL_OW 519
10411: PUSH
10412: LD_INT 1
10414: GREATER
10415: AND
10416: IFFALSE 10426
// result := false ;
10418: LD_ADDR_VAR 0 1
10422: PUSH
10423: LD_INT 0
10425: ST_TO_ADDR
// end ;
10426: LD_VAR 0 1
10430: RET
// function HasPower ( i ) ; begin
10431: LD_INT 0
10433: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10434: LD_INT 22
10436: PUSH
10437: LD_VAR 0 1
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PUSH
10446: LD_INT 2
10448: PUSH
10449: LD_INT 30
10451: PUSH
10452: LD_INT 0
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 30
10461: PUSH
10462: LD_INT 1
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: LIST
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PPUSH
10478: CALL_OW 69
10482: NOT
10483: IFFALSE 10487
// exit ;
10485: GO 10552
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10487: LD_ADDR_VAR 0 2
10491: PUSH
10492: LD_INT 22
10494: PUSH
10495: LD_VAR 0 1
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 2
10506: PUSH
10507: LD_INT 21
10509: PUSH
10510: LD_INT 1
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 33
10519: PUSH
10520: LD_INT 3
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 33
10529: PUSH
10530: LD_INT 5
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PPUSH
10547: CALL_OW 69
10551: ST_TO_ADDR
// end ; end_of_file
10552: LD_VAR 0 2
10556: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
10557: LD_EXP 39
10561: IFFALSE 10902
10563: GO 10565
10565: DISABLE
10566: LD_INT 0
10568: PPUSH
10569: PPUSH
10570: PPUSH
// begin mpKingPoints := [ ] ;
10571: LD_ADDR_EXP 48
10575: PUSH
10576: EMPTY
10577: ST_TO_ADDR
// if mpTeamGame then
10578: LD_EXP 11
10582: IFFALSE 10636
// begin for i := 1 to Count ( mpTeams ) do
10584: LD_ADDR_VAR 0 1
10588: PUSH
10589: DOUBLE
10590: LD_INT 1
10592: DEC
10593: ST_TO_ADDR
10594: LD_EXP 10
10598: PPUSH
10599: CALL 14438 0 1
10603: PUSH
10604: FOR_TO
10605: IFFALSE 10632
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
10607: LD_ADDR_EXP 48
10611: PUSH
10612: LD_EXP 48
10616: PPUSH
10617: LD_VAR 0 1
10621: PPUSH
10622: LD_INT 0
10624: PPUSH
10625: CALL_OW 1
10629: ST_TO_ADDR
10630: GO 10604
10632: POP
10633: POP
// end else
10634: GO 10679
// begin for i := 1 to 8 do
10636: LD_ADDR_VAR 0 1
10640: PUSH
10641: DOUBLE
10642: LD_INT 1
10644: DEC
10645: ST_TO_ADDR
10646: LD_INT 8
10648: PUSH
10649: FOR_TO
10650: IFFALSE 10677
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
10652: LD_ADDR_EXP 48
10656: PUSH
10657: LD_EXP 48
10661: PPUSH
10662: LD_VAR 0 1
10666: PPUSH
10667: LD_INT 0
10669: PPUSH
10670: CALL_OW 1
10674: ST_TO_ADDR
10675: GO 10649
10677: POP
10678: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
10679: LD_ADDR_VAR 0 3
10683: PUSH
10684: LD_EXP 2
10688: PPUSH
10689: LD_INT 0
10691: PPUSH
10692: CALL_OW 517
10696: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
10697: LD_ADDR_VAR 0 1
10701: PUSH
10702: DOUBLE
10703: LD_INT 1
10705: DEC
10706: ST_TO_ADDR
10707: LD_VAR 0 3
10711: PUSH
10712: LD_INT 1
10714: ARRAY
10715: PUSH
10716: FOR_TO
10717: IFFALSE 10784
// for j := 1 to 8 do
10719: LD_ADDR_VAR 0 2
10723: PUSH
10724: DOUBLE
10725: LD_INT 1
10727: DEC
10728: ST_TO_ADDR
10729: LD_INT 8
10731: PUSH
10732: FOR_TO
10733: IFFALSE 10780
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
10735: LD_VAR 0 3
10739: PUSH
10740: LD_INT 1
10742: ARRAY
10743: PUSH
10744: LD_VAR 0 1
10748: ARRAY
10749: PPUSH
10750: LD_VAR 0 3
10754: PUSH
10755: LD_INT 2
10757: ARRAY
10758: PUSH
10759: LD_VAR 0 1
10763: ARRAY
10764: PPUSH
10765: LD_VAR 0 2
10769: PPUSH
10770: LD_INT 12
10772: NEG
10773: PPUSH
10774: CALL_OW 330
10778: GO 10732
10780: POP
10781: POP
10782: GO 10716
10784: POP
10785: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
10786: LD_EXP 34
10790: PPUSH
10791: LD_INT 1
10793: PPUSH
10794: CALL_OW 424
// UpdateCounter ;
10798: CALL 11408 0 0
// repeat wait ( 0 0$1 ) ;
10802: LD_INT 35
10804: PPUSH
10805: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10809: LD_ADDR_VAR 0 3
10813: PUSH
10814: LD_EXP 34
10818: PPUSH
10819: LD_INT 3
10821: PUSH
10822: LD_INT 57
10824: PUSH
10825: EMPTY
10826: LIST
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 50
10834: PUSH
10835: EMPTY
10836: LIST
10837: PUSH
10838: LD_INT 2
10840: PUSH
10841: LD_INT 30
10843: PUSH
10844: LD_INT 0
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PUSH
10851: LD_INT 30
10853: PUSH
10854: LD_INT 1
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: LIST
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: LIST
10870: PPUSH
10871: CALL_OW 70
10875: ST_TO_ADDR
// if not tmp then
10876: LD_VAR 0 3
10880: NOT
10881: IFFALSE 10885
// continue ;
10883: GO 10802
// AddPoints ( tmp ) ;
10885: LD_VAR 0 3
10889: PPUSH
10890: CALL 11086 0 1
// UpdateCounter ;
10894: CALL 11408 0 0
// until false ;
10898: LD_INT 0
10900: IFFALSE 10802
// end ;
10902: PPOPN 3
10904: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
10905: LD_EXP 39
10909: IFFALSE 10917
10911: PUSH
10912: LD_EXP 37
10916: AND
10917: IFFALSE 11083
10919: GO 10921
10921: DISABLE
10922: LD_INT 0
10924: PPUSH
10925: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
10926: LD_ADDR_VAR 0 2
10930: PUSH
10931: LD_EXP 2
10935: PPUSH
10936: LD_INT 0
10938: PPUSH
10939: CALL_OW 517
10943: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
10944: LD_ADDR_VAR 0 1
10948: PUSH
10949: DOUBLE
10950: LD_INT 1
10952: DEC
10953: ST_TO_ADDR
10954: LD_VAR 0 2
10958: PUSH
10959: LD_INT 1
10961: ARRAY
10962: PUSH
10963: FOR_TO
10964: IFFALSE 11005
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
10966: LD_VAR 0 2
10970: PUSH
10971: LD_INT 1
10973: ARRAY
10974: PUSH
10975: LD_VAR 0 1
10979: ARRAY
10980: PPUSH
10981: LD_VAR 0 2
10985: PUSH
10986: LD_INT 2
10988: ARRAY
10989: PUSH
10990: LD_VAR 0 1
10994: ARRAY
10995: PPUSH
10996: LD_INT 125
10998: PPUSH
10999: CALL_OW 495
11003: GO 10963
11005: POP
11006: POP
// repeat wait ( mpEmissions ) ;
11007: LD_EXP 37
11011: PPUSH
11012: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
11016: LD_ADDR_VAR 0 1
11020: PUSH
11021: DOUBLE
11022: LD_INT 1
11024: DEC
11025: ST_TO_ADDR
11026: LD_VAR 0 2
11030: PUSH
11031: LD_INT 1
11033: ARRAY
11034: PUSH
11035: FOR_TO
11036: IFFALSE 11077
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
11038: LD_VAR 0 2
11042: PUSH
11043: LD_INT 1
11045: ARRAY
11046: PUSH
11047: LD_VAR 0 1
11051: ARRAY
11052: PPUSH
11053: LD_VAR 0 2
11057: PUSH
11058: LD_INT 2
11060: ARRAY
11061: PUSH
11062: LD_VAR 0 1
11066: ARRAY
11067: PPUSH
11068: LD_INT 15
11070: PPUSH
11071: CALL_OW 495
11075: GO 11035
11077: POP
11078: POP
// until false ;
11079: LD_INT 0
11081: IFFALSE 11007
// end ;
11083: PPOPN 2
11085: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
11086: LD_INT 0
11088: PPUSH
11089: PPUSH
11090: PPUSH
11091: PPUSH
11092: PPUSH
// if mpTeamGame then
11093: LD_EXP 11
11097: IFFALSE 11294
// begin first := depots [ 1 ] ;
11099: LD_ADDR_VAR 0 4
11103: PUSH
11104: LD_VAR 0 1
11108: PUSH
11109: LD_INT 1
11111: ARRAY
11112: ST_TO_ADDR
// side := GetSide ( first ) ;
11113: LD_ADDR_VAR 0 6
11117: PUSH
11118: LD_VAR 0 4
11122: PPUSH
11123: CALL_OW 255
11127: ST_TO_ADDR
// for i := 1 to mpTeams do
11128: LD_ADDR_VAR 0 3
11132: PUSH
11133: DOUBLE
11134: LD_INT 1
11136: DEC
11137: ST_TO_ADDR
11138: LD_EXP 10
11142: PUSH
11143: FOR_TO
11144: IFFALSE 11178
// if side in mpTeams [ i ] then
11146: LD_VAR 0 6
11150: PUSH
11151: LD_EXP 10
11155: PUSH
11156: LD_VAR 0 3
11160: ARRAY
11161: IN
11162: IFFALSE 11176
// begin team := i ;
11164: LD_ADDR_VAR 0 5
11168: PUSH
11169: LD_VAR 0 3
11173: ST_TO_ADDR
// break ;
11174: GO 11178
// end ;
11176: GO 11143
11178: POP
11179: POP
// if not team then
11180: LD_VAR 0 5
11184: NOT
11185: IFFALSE 11189
// exit ;
11187: GO 11403
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
11189: LD_EXP 34
11193: PPUSH
11194: LD_INT 81
11196: PUSH
11197: LD_VAR 0 6
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PPUSH
11206: CALL_OW 70
11210: IFFALSE 11214
// exit ;
11212: GO 11403
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
11214: LD_ADDR_EXP 48
11218: PUSH
11219: LD_EXP 48
11223: PPUSH
11224: LD_VAR 0 5
11228: PPUSH
11229: LD_EXP 48
11233: PUSH
11234: LD_VAR 0 5
11238: ARRAY
11239: PUSH
11240: LD_INT 1
11242: PLUS
11243: PPUSH
11244: CALL_OW 1
11248: ST_TO_ADDR
// for i in mpTeams [ team ] do
11249: LD_ADDR_VAR 0 3
11253: PUSH
11254: LD_EXP 10
11258: PUSH
11259: LD_VAR 0 5
11263: ARRAY
11264: PUSH
11265: FOR_IN
11266: IFFALSE 11290
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
11268: LD_VAR 0 3
11272: PPUSH
11273: LD_EXP 48
11277: PUSH
11278: LD_VAR 0 5
11282: ARRAY
11283: PPUSH
11284: CALL_OW 506
11288: GO 11265
11290: POP
11291: POP
// end else
11292: GO 11403
// begin first := depots [ 1 ] ;
11294: LD_ADDR_VAR 0 4
11298: PUSH
11299: LD_VAR 0 1
11303: PUSH
11304: LD_INT 1
11306: ARRAY
11307: ST_TO_ADDR
// side := GetSide ( first ) ;
11308: LD_ADDR_VAR 0 6
11312: PUSH
11313: LD_VAR 0 4
11317: PPUSH
11318: CALL_OW 255
11322: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
11323: LD_EXP 34
11327: PPUSH
11328: LD_INT 81
11330: PUSH
11331: LD_VAR 0 6
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PPUSH
11340: CALL_OW 70
11344: IFFALSE 11348
// exit ;
11346: GO 11403
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
11348: LD_ADDR_EXP 48
11352: PUSH
11353: LD_EXP 48
11357: PPUSH
11358: LD_VAR 0 6
11362: PPUSH
11363: LD_EXP 48
11367: PUSH
11368: LD_VAR 0 6
11372: ARRAY
11373: PUSH
11374: LD_INT 1
11376: PLUS
11377: PPUSH
11378: CALL_OW 1
11382: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
11383: LD_VAR 0 6
11387: PPUSH
11388: LD_EXP 48
11392: PUSH
11393: LD_VAR 0 6
11397: ARRAY
11398: PPUSH
11399: CALL_OW 506
// end ; end ;
11403: LD_VAR 0 2
11407: RET
// function UpdateCounter ; var i ; begin
11408: LD_INT 0
11410: PPUSH
11411: PPUSH
// result := [ ] ;
11412: LD_ADDR_VAR 0 1
11416: PUSH
11417: EMPTY
11418: ST_TO_ADDR
// if mpTeamGame then
11419: LD_EXP 11
11423: IFFALSE 11490
// begin for i := 1 to mpTeams do
11425: LD_ADDR_VAR 0 2
11429: PUSH
11430: DOUBLE
11431: LD_INT 1
11433: DEC
11434: ST_TO_ADDR
11435: LD_EXP 10
11439: PUSH
11440: FOR_TO
11441: IFFALSE 11486
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
11443: LD_ADDR_VAR 0 1
11447: PUSH
11448: LD_VAR 0 1
11452: PUSH
11453: LD_STRING #KingoftheHill-Team
11455: PUSH
11456: LD_VAR 0 2
11460: PUSH
11461: LD_EXP 48
11465: PUSH
11466: LD_VAR 0 2
11470: ARRAY
11471: PUSH
11472: LD_EXP 35
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: ADD
11483: ST_TO_ADDR
11484: GO 11440
11486: POP
11487: POP
// end else
11488: GO 11563
// begin for i := 1 to 8 do
11490: LD_ADDR_VAR 0 2
11494: PUSH
11495: DOUBLE
11496: LD_INT 1
11498: DEC
11499: ST_TO_ADDR
11500: LD_INT 8
11502: PUSH
11503: FOR_TO
11504: IFFALSE 11561
// if mpSidePositions [ i ] then
11506: LD_EXP 7
11510: PUSH
11511: LD_VAR 0 2
11515: ARRAY
11516: IFFALSE 11559
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
11518: LD_ADDR_VAR 0 1
11522: PUSH
11523: LD_VAR 0 1
11527: PUSH
11528: LD_STRING #KingoftheHill-Player
11530: PUSH
11531: LD_VAR 0 2
11535: PUSH
11536: LD_EXP 48
11540: PUSH
11541: LD_VAR 0 2
11545: ARRAY
11546: PUSH
11547: LD_EXP 35
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: ADD
11558: ST_TO_ADDR
11559: GO 11503
11561: POP
11562: POP
// end ; mpDisplayStrings := result ;
11563: LD_ADDR_EXP 38
11567: PUSH
11568: LD_VAR 0 1
11572: ST_TO_ADDR
// end ;
11573: LD_VAR 0 1
11577: RET
// export function HowMuchPointsKing ( side ) ; begin
11578: LD_INT 0
11580: PPUSH
// result := HowMuchPoints ( side ) ;
11581: LD_ADDR_VAR 0 2
11585: PUSH
11586: LD_VAR 0 1
11590: PPUSH
11591: CALL 11601 0 1
11595: ST_TO_ADDR
// end ;
11596: LD_VAR 0 2
11600: RET
// function HowMuchPoints ( side ) ; var i ; begin
11601: LD_INT 0
11603: PPUSH
11604: PPUSH
// if mpTeamGame then
11605: LD_EXP 11
11609: IFFALSE 11678
// begin for i := 1 to Count ( mpTeams ) do
11611: LD_ADDR_VAR 0 3
11615: PUSH
11616: DOUBLE
11617: LD_INT 1
11619: DEC
11620: ST_TO_ADDR
11621: LD_EXP 10
11625: PPUSH
11626: CALL 14438 0 1
11630: PUSH
11631: FOR_TO
11632: IFFALSE 11674
// begin if side in mpTeams [ i ] then
11634: LD_VAR 0 1
11638: PUSH
11639: LD_EXP 10
11643: PUSH
11644: LD_VAR 0 3
11648: ARRAY
11649: IN
11650: IFFALSE 11672
// begin result := mpKingPoints [ i ] ;
11652: LD_ADDR_VAR 0 2
11656: PUSH
11657: LD_EXP 48
11661: PUSH
11662: LD_VAR 0 3
11666: ARRAY
11667: ST_TO_ADDR
// exit ;
11668: POP
11669: POP
11670: GO 11694
// end ; end ;
11672: GO 11631
11674: POP
11675: POP
// end else
11676: GO 11694
// result := mpKingPoints [ side ] ;
11678: LD_ADDR_VAR 0 2
11682: PUSH
11683: LD_EXP 48
11687: PUSH
11688: LD_VAR 0 1
11692: ARRAY
11693: ST_TO_ADDR
// end ;
11694: LD_VAR 0 2
11698: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
11699: LD_EXP 39
11703: IFFALSE 11711
11705: PUSH
11706: CALL 12123 0 0
11710: AND
11711: IFFALSE 11719
11713: PUSH
11714: LD_OWVAR 4
11718: AND
11719: IFFALSE 11972
11721: GO 11723
11723: DISABLE
11724: LD_INT 0
11726: PPUSH
11727: PPUSH
// begin canWin := false ;
11728: LD_ADDR_VAR 0 2
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// if not HasPower ( your_side ) then
11736: LD_OWVAR 2
11740: PPUSH
11741: CALL 12165 0 1
11745: NOT
11746: IFFALSE 11757
// begin Multiplayer_Loose_Message ;
11748: CALL_OW 521
// enable ( mpLose ) ;
11752: LD_INT 102
11754: ENABLE_MARKED
// end else
11755: GO 11972
// begin if not EnemiesInGame then
11757: CALL 11975 0 0
11761: NOT
11762: IFFALSE 11769
// begin enable ( mpWin ) ;
11764: LD_INT 101
11766: ENABLE_MARKED
// exit ;
11767: GO 11972
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
11769: LD_ADDR_VAR 0 2
11773: PUSH
11774: LD_OWVAR 2
11778: PPUSH
11779: CALL 11601 0 1
11783: PUSH
11784: LD_EXP 35
11788: GREATEREQUAL
11789: IFFALSE 11802
11791: PUSH
11792: LD_OWVAR 2
11796: PPUSH
11797: CALL 12165 0 1
11801: AND
11802: ST_TO_ADDR
// for i := 1 to 8 do
11803: LD_ADDR_VAR 0 1
11807: PUSH
11808: DOUBLE
11809: LD_INT 1
11811: DEC
11812: ST_TO_ADDR
11813: LD_INT 8
11815: PUSH
11816: FOR_TO
11817: IFFALSE 11958
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11819: LD_EXP 7
11823: PUSH
11824: LD_VAR 0 1
11828: ARRAY
11829: IFFALSE 11842
11831: PUSH
11832: LD_VAR 0 1
11836: PPUSH
11837: CALL_OW 108
11841: AND
11842: IFFALSE 11856
11844: PUSH
11845: LD_VAR 0 1
11849: PUSH
11850: LD_OWVAR 2
11854: NONEQUAL
11855: AND
11856: IFFALSE 11956
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11858: LD_EXP 8
11862: PUSH
11863: LD_VAR 0 1
11867: ARRAY
11868: NOT
11869: IFTRUE 11917
11871: PUSH
11872: LD_EXP 8
11876: PUSH
11877: LD_VAR 0 1
11881: ARRAY
11882: PUSH
11883: LD_EXP 8
11887: PUSH
11888: LD_OWVAR 2
11892: ARRAY
11893: NONEQUAL
11894: IFFALSE 11916
11896: PUSH
11897: LD_OWVAR 2
11901: PPUSH
11902: LD_VAR 0 1
11906: PPUSH
11907: CALL_OW 81
11911: PUSH
11912: LD_INT 1
11914: NONEQUAL
11915: AND
11916: OR
11917: IFFALSE 11956
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
11919: LD_VAR 0 1
11923: PPUSH
11924: CALL 11601 0 1
11928: PUSH
11929: LD_EXP 35
11933: GREATEREQUAL
11934: IFFALSE 11947
11936: PUSH
11937: LD_VAR 0 1
11941: PPUSH
11942: CALL 12165 0 1
11946: AND
11947: IFFALSE 11956
// begin enable ( mpLose ) ;
11949: LD_INT 102
11951: ENABLE_MARKED
// exit ;
11952: POP
11953: POP
11954: GO 11972
// end ;
11956: GO 11816
11958: POP
11959: POP
// if canWin then
11960: LD_VAR 0 2
11964: IFFALSE 11971
// enable ( mpWin ) else
11966: LD_INT 101
11968: ENABLE_MARKED
11969: GO 11972
// enable ;
11971: ENABLE
// end ; end ;
11972: PPOPN 2
11974: END
// function EnemiesInGame ; var i ; begin
11975: LD_INT 0
11977: PPUSH
11978: PPUSH
// result := false ;
11979: LD_ADDR_VAR 0 1
11983: PUSH
11984: LD_INT 0
11986: ST_TO_ADDR
// for i := 1 to 8 do
11987: LD_ADDR_VAR 0 2
11991: PUSH
11992: DOUBLE
11993: LD_INT 1
11995: DEC
11996: ST_TO_ADDR
11997: LD_INT 8
11999: PUSH
12000: FOR_TO
12001: IFFALSE 12116
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
12003: LD_VAR 0 2
12007: PUSH
12008: LD_OWVAR 2
12012: NONEQUAL
12013: IFFALSE 12026
12015: PUSH
12016: LD_VAR 0 2
12020: PPUSH
12021: CALL 12165 0 1
12025: AND
12026: IFFALSE 12039
12028: PUSH
12029: LD_VAR 0 2
12033: PPUSH
12034: CALL_OW 108
12038: AND
12039: IFFALSE 12114
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
12041: LD_EXP 8
12045: PUSH
12046: LD_VAR 0 2
12050: ARRAY
12051: NOT
12052: IFTRUE 12100
12054: PUSH
12055: LD_EXP 8
12059: PUSH
12060: LD_VAR 0 2
12064: ARRAY
12065: PUSH
12066: LD_EXP 8
12070: PUSH
12071: LD_OWVAR 2
12075: ARRAY
12076: NONEQUAL
12077: IFFALSE 12099
12079: PUSH
12080: LD_OWVAR 2
12084: PPUSH
12085: LD_VAR 0 2
12089: PPUSH
12090: CALL_OW 81
12094: PUSH
12095: LD_INT 1
12097: NONEQUAL
12098: AND
12099: OR
12100: IFFALSE 12114
// begin result := true ;
12102: LD_ADDR_VAR 0 1
12106: PUSH
12107: LD_INT 1
12109: ST_TO_ADDR
// exit ;
12110: POP
12111: POP
12112: GO 12118
// end ;
12114: GO 12000
12116: POP
12117: POP
// end ;
12118: LD_VAR 0 1
12122: RET
// function CanWinLoose ; begin
12123: LD_INT 0
12125: PPUSH
// result := true ;
12126: LD_ADDR_VAR 0 1
12130: PUSH
12131: LD_INT 1
12133: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12134: CALL_OW 531
12138: IFFALSE 12150
12140: PUSH
12141: CALL_OW 519
12145: PUSH
12146: LD_INT 1
12148: GREATER
12149: AND
12150: IFFALSE 12160
// result := false ;
12152: LD_ADDR_VAR 0 1
12156: PUSH
12157: LD_INT 0
12159: ST_TO_ADDR
// end ;
12160: LD_VAR 0 1
12164: RET
// function HasPower ( i ) ; begin
12165: LD_INT 0
12167: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
12168: LD_ADDR_VAR 0 2
12172: PUSH
12173: LD_INT 22
12175: PUSH
12176: LD_VAR 0 1
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: LD_INT 2
12187: PUSH
12188: LD_INT 21
12190: PUSH
12191: LD_INT 1
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PUSH
12198: LD_INT 33
12200: PUSH
12201: LD_INT 3
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 33
12210: PUSH
12211: LD_INT 5
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PPUSH
12228: CALL_OW 69
12232: ST_TO_ADDR
// end ; end_of_file
12233: LD_VAR 0 2
12237: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
12238: LD_INT 0
12240: PPUSH
12241: PPUSH
// if exist_mode then
12242: LD_VAR 0 2
12246: IFFALSE 12292
// begin unit := CreateCharacter ( prefix & ident ) ;
12248: LD_ADDR_VAR 0 5
12252: PUSH
12253: LD_VAR 0 3
12257: PUSH
12258: LD_VAR 0 1
12262: STR
12263: PPUSH
12264: CALL_OW 34
12268: ST_TO_ADDR
// if unit then
12269: LD_VAR 0 5
12273: IFFALSE 12290
// DeleteCharacters ( prefix & ident ) ;
12275: LD_VAR 0 3
12279: PUSH
12280: LD_VAR 0 1
12284: STR
12285: PPUSH
12286: CALL_OW 40
// end else
12290: GO 12307
// unit := NewCharacter ( ident ) ;
12292: LD_ADDR_VAR 0 5
12296: PUSH
12297: LD_VAR 0 1
12301: PPUSH
12302: CALL_OW 25
12306: ST_TO_ADDR
// result := unit ;
12307: LD_ADDR_VAR 0 4
12311: PUSH
12312: LD_VAR 0 5
12316: ST_TO_ADDR
// end ;
12317: LD_VAR 0 4
12321: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
12322: LD_INT 0
12324: PPUSH
12325: PPUSH
// if exist_mode then
12326: LD_VAR 0 2
12330: IFFALSE 12355
// unit := CreateCharacter ( prefix & ident ) else
12332: LD_ADDR_VAR 0 5
12336: PUSH
12337: LD_VAR 0 3
12341: PUSH
12342: LD_VAR 0 1
12346: STR
12347: PPUSH
12348: CALL_OW 34
12352: ST_TO_ADDR
12353: GO 12370
// unit := NewCharacter ( ident ) ;
12355: LD_ADDR_VAR 0 5
12359: PUSH
12360: LD_VAR 0 1
12364: PPUSH
12365: CALL_OW 25
12369: ST_TO_ADDR
// result := unit ;
12370: LD_ADDR_VAR 0 4
12374: PUSH
12375: LD_VAR 0 5
12379: ST_TO_ADDR
// end ;
12380: LD_VAR 0 4
12384: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
12385: LD_INT 0
12387: PPUSH
12388: PPUSH
// if not side or not nation then
12389: LD_VAR 0 1
12393: NOT
12394: IFTRUE 12403
12396: PUSH
12397: LD_VAR 0 2
12401: NOT
12402: OR
12403: IFFALSE 12407
// exit ;
12405: GO 13177
// case nation of nation_american :
12407: LD_VAR 0 2
12411: PUSH
12412: LD_INT 1
12414: DOUBLE
12415: EQUAL
12416: IFTRUE 12420
12418: GO 12634
12420: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
12421: LD_ADDR_VAR 0 4
12425: PUSH
12426: LD_INT 35
12428: PUSH
12429: LD_INT 45
12431: PUSH
12432: LD_INT 46
12434: PUSH
12435: LD_INT 47
12437: PUSH
12438: LD_INT 82
12440: PUSH
12441: LD_INT 83
12443: PUSH
12444: LD_INT 84
12446: PUSH
12447: LD_INT 85
12449: PUSH
12450: LD_INT 86
12452: PUSH
12453: LD_INT 1
12455: PUSH
12456: LD_INT 2
12458: PUSH
12459: LD_INT 6
12461: PUSH
12462: LD_INT 15
12464: PUSH
12465: LD_INT 16
12467: PUSH
12468: LD_INT 7
12470: PUSH
12471: LD_INT 12
12473: PUSH
12474: LD_INT 13
12476: PUSH
12477: LD_INT 10
12479: PUSH
12480: LD_INT 14
12482: PUSH
12483: LD_INT 20
12485: PUSH
12486: LD_INT 21
12488: PUSH
12489: LD_INT 22
12491: PUSH
12492: LD_INT 25
12494: PUSH
12495: LD_INT 32
12497: PUSH
12498: LD_INT 27
12500: PUSH
12501: LD_INT 36
12503: PUSH
12504: LD_INT 69
12506: PUSH
12507: LD_INT 39
12509: PUSH
12510: LD_INT 34
12512: PUSH
12513: LD_INT 40
12515: PUSH
12516: LD_INT 48
12518: PUSH
12519: LD_INT 49
12521: PUSH
12522: LD_INT 50
12524: PUSH
12525: LD_INT 51
12527: PUSH
12528: LD_INT 52
12530: PUSH
12531: LD_INT 53
12533: PUSH
12534: LD_INT 54
12536: PUSH
12537: LD_INT 55
12539: PUSH
12540: LD_INT 56
12542: PUSH
12543: LD_INT 57
12545: PUSH
12546: LD_INT 58
12548: PUSH
12549: LD_INT 59
12551: PUSH
12552: LD_INT 60
12554: PUSH
12555: LD_INT 61
12557: PUSH
12558: LD_INT 62
12560: PUSH
12561: LD_INT 80
12563: PUSH
12564: LD_INT 82
12566: PUSH
12567: LD_INT 83
12569: PUSH
12570: LD_INT 84
12572: PUSH
12573: LD_INT 85
12575: PUSH
12576: LD_INT 86
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: ST_TO_ADDR
12632: GO 13099
12634: LD_INT 2
12636: DOUBLE
12637: EQUAL
12638: IFTRUE 12642
12640: GO 12868
12642: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
12643: LD_ADDR_VAR 0 4
12647: PUSH
12648: LD_INT 35
12650: PUSH
12651: LD_INT 45
12653: PUSH
12654: LD_INT 46
12656: PUSH
12657: LD_INT 47
12659: PUSH
12660: LD_INT 82
12662: PUSH
12663: LD_INT 83
12665: PUSH
12666: LD_INT 84
12668: PUSH
12669: LD_INT 85
12671: PUSH
12672: LD_INT 87
12674: PUSH
12675: LD_INT 70
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: LD_INT 11
12683: PUSH
12684: LD_INT 3
12686: PUSH
12687: LD_INT 4
12689: PUSH
12690: LD_INT 5
12692: PUSH
12693: LD_INT 6
12695: PUSH
12696: LD_INT 15
12698: PUSH
12699: LD_INT 18
12701: PUSH
12702: LD_INT 7
12704: PUSH
12705: LD_INT 17
12707: PUSH
12708: LD_INT 8
12710: PUSH
12711: LD_INT 20
12713: PUSH
12714: LD_INT 21
12716: PUSH
12717: LD_INT 22
12719: PUSH
12720: LD_INT 72
12722: PUSH
12723: LD_INT 26
12725: PUSH
12726: LD_INT 69
12728: PUSH
12729: LD_INT 39
12731: PUSH
12732: LD_INT 40
12734: PUSH
12735: LD_INT 41
12737: PUSH
12738: LD_INT 42
12740: PUSH
12741: LD_INT 43
12743: PUSH
12744: LD_INT 48
12746: PUSH
12747: LD_INT 49
12749: PUSH
12750: LD_INT 50
12752: PUSH
12753: LD_INT 51
12755: PUSH
12756: LD_INT 52
12758: PUSH
12759: LD_INT 53
12761: PUSH
12762: LD_INT 54
12764: PUSH
12765: LD_INT 55
12767: PUSH
12768: LD_INT 56
12770: PUSH
12771: LD_INT 60
12773: PUSH
12774: LD_INT 61
12776: PUSH
12777: LD_INT 62
12779: PUSH
12780: LD_INT 66
12782: PUSH
12783: LD_INT 67
12785: PUSH
12786: LD_INT 68
12788: PUSH
12789: LD_INT 81
12791: PUSH
12792: LD_INT 82
12794: PUSH
12795: LD_INT 83
12797: PUSH
12798: LD_INT 84
12800: PUSH
12801: LD_INT 85
12803: PUSH
12804: LD_INT 87
12806: PUSH
12807: LD_INT 88
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: ST_TO_ADDR
12866: GO 13099
12868: LD_INT 3
12870: DOUBLE
12871: EQUAL
12872: IFTRUE 12876
12874: GO 13098
12876: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
12877: LD_ADDR_VAR 0 4
12881: PUSH
12882: LD_INT 46
12884: PUSH
12885: LD_INT 47
12887: PUSH
12888: LD_INT 1
12890: PUSH
12891: LD_INT 2
12893: PUSH
12894: LD_INT 82
12896: PUSH
12897: LD_INT 83
12899: PUSH
12900: LD_INT 84
12902: PUSH
12903: LD_INT 85
12905: PUSH
12906: LD_INT 86
12908: PUSH
12909: LD_INT 11
12911: PUSH
12912: LD_INT 9
12914: PUSH
12915: LD_INT 20
12917: PUSH
12918: LD_INT 19
12920: PUSH
12921: LD_INT 21
12923: PUSH
12924: LD_INT 24
12926: PUSH
12927: LD_INT 22
12929: PUSH
12930: LD_INT 25
12932: PUSH
12933: LD_INT 28
12935: PUSH
12936: LD_INT 29
12938: PUSH
12939: LD_INT 30
12941: PUSH
12942: LD_INT 31
12944: PUSH
12945: LD_INT 37
12947: PUSH
12948: LD_INT 38
12950: PUSH
12951: LD_INT 32
12953: PUSH
12954: LD_INT 27
12956: PUSH
12957: LD_INT 33
12959: PUSH
12960: LD_INT 69
12962: PUSH
12963: LD_INT 39
12965: PUSH
12966: LD_INT 34
12968: PUSH
12969: LD_INT 40
12971: PUSH
12972: LD_INT 71
12974: PUSH
12975: LD_INT 23
12977: PUSH
12978: LD_INT 44
12980: PUSH
12981: LD_INT 48
12983: PUSH
12984: LD_INT 49
12986: PUSH
12987: LD_INT 50
12989: PUSH
12990: LD_INT 51
12992: PUSH
12993: LD_INT 52
12995: PUSH
12996: LD_INT 53
12998: PUSH
12999: LD_INT 54
13001: PUSH
13002: LD_INT 55
13004: PUSH
13005: LD_INT 56
13007: PUSH
13008: LD_INT 57
13010: PUSH
13011: LD_INT 58
13013: PUSH
13014: LD_INT 59
13016: PUSH
13017: LD_INT 63
13019: PUSH
13020: LD_INT 64
13022: PUSH
13023: LD_INT 65
13025: PUSH
13026: LD_INT 82
13028: PUSH
13029: LD_INT 83
13031: PUSH
13032: LD_INT 84
13034: PUSH
13035: LD_INT 85
13037: PUSH
13038: LD_INT 86
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: ST_TO_ADDR
13096: GO 13099
13098: POP
// if state > - 1 and state < 3 then
13099: LD_VAR 0 3
13103: PUSH
13104: LD_INT 1
13106: NEG
13107: GREATER
13108: IFFALSE 13120
13110: PUSH
13111: LD_VAR 0 3
13115: PUSH
13116: LD_INT 3
13118: LESS
13119: AND
13120: IFFALSE 13177
// for i in result do
13122: LD_ADDR_VAR 0 5
13126: PUSH
13127: LD_VAR 0 4
13131: PUSH
13132: FOR_IN
13133: IFFALSE 13175
// if GetTech ( i , side ) <> state then
13135: LD_VAR 0 5
13139: PPUSH
13140: LD_VAR 0 1
13144: PPUSH
13145: CALL_OW 321
13149: PUSH
13150: LD_VAR 0 3
13154: NONEQUAL
13155: IFFALSE 13173
// result := result diff i ;
13157: LD_ADDR_VAR 0 4
13161: PUSH
13162: LD_VAR 0 4
13166: PUSH
13167: LD_VAR 0 5
13171: DIFF
13172: ST_TO_ADDR
13173: GO 13132
13175: POP
13176: POP
// end ;
13177: LD_VAR 0 4
13181: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
13182: LD_INT 0
13184: PPUSH
13185: PPUSH
13186: PPUSH
// result := true ;
13187: LD_ADDR_VAR 0 3
13191: PUSH
13192: LD_INT 1
13194: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
13195: LD_ADDR_VAR 0 5
13199: PUSH
13200: LD_VAR 0 2
13204: PPUSH
13205: CALL_OW 480
13209: ST_TO_ADDR
// if not tmp then
13210: LD_VAR 0 5
13214: NOT
13215: IFFALSE 13219
// exit ;
13217: GO 13268
// for i in tmp do
13219: LD_ADDR_VAR 0 4
13223: PUSH
13224: LD_VAR 0 5
13228: PUSH
13229: FOR_IN
13230: IFFALSE 13266
// if GetTech ( i , side ) <> state_researched then
13232: LD_VAR 0 4
13236: PPUSH
13237: LD_VAR 0 1
13241: PPUSH
13242: CALL_OW 321
13246: PUSH
13247: LD_INT 2
13249: NONEQUAL
13250: IFFALSE 13264
// begin result := false ;
13252: LD_ADDR_VAR 0 3
13256: PUSH
13257: LD_INT 0
13259: ST_TO_ADDR
// exit ;
13260: POP
13261: POP
13262: GO 13268
// end ;
13264: GO 13229
13266: POP
13267: POP
// end ;
13268: LD_VAR 0 3
13272: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
13273: LD_INT 0
13275: PPUSH
13276: PPUSH
13277: PPUSH
13278: PPUSH
13279: PPUSH
13280: PPUSH
13281: PPUSH
13282: PPUSH
13283: PPUSH
13284: PPUSH
13285: PPUSH
13286: PPUSH
13287: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
13288: LD_VAR 0 1
13292: NOT
13293: IFTRUE 13310
13295: PUSH
13296: LD_VAR 0 1
13300: PPUSH
13301: CALL_OW 257
13305: PUSH
13306: LD_INT 9
13308: NONEQUAL
13309: OR
13310: IFFALSE 13314
// exit ;
13312: GO 13893
// side := GetSide ( unit ) ;
13314: LD_ADDR_VAR 0 9
13318: PUSH
13319: LD_VAR 0 1
13323: PPUSH
13324: CALL_OW 255
13328: ST_TO_ADDR
// tech_space := tech_spacanom ;
13329: LD_ADDR_VAR 0 12
13333: PUSH
13334: LD_INT 29
13336: ST_TO_ADDR
// tech_time := tech_taurad ;
13337: LD_ADDR_VAR 0 13
13341: PUSH
13342: LD_INT 28
13344: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
13345: LD_ADDR_VAR 0 11
13349: PUSH
13350: LD_VAR 0 1
13354: PPUSH
13355: CALL_OW 310
13359: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
13360: LD_VAR 0 11
13364: PPUSH
13365: CALL_OW 247
13369: PUSH
13370: LD_INT 2
13372: EQUAL
13373: IFFALSE 13377
// exit ;
13375: GO 13893
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13377: LD_ADDR_VAR 0 8
13381: PUSH
13382: LD_INT 81
13384: PUSH
13385: LD_VAR 0 9
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 3
13396: PUSH
13397: LD_INT 21
13399: PUSH
13400: LD_INT 3
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PPUSH
13415: CALL_OW 69
13419: ST_TO_ADDR
// if not tmp then
13420: LD_VAR 0 8
13424: NOT
13425: IFFALSE 13429
// exit ;
13427: GO 13893
// if in_unit then
13429: LD_VAR 0 11
13433: IFFALSE 13457
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
13435: LD_ADDR_VAR 0 10
13439: PUSH
13440: LD_VAR 0 8
13444: PPUSH
13445: LD_VAR 0 11
13449: PPUSH
13450: CALL_OW 74
13454: ST_TO_ADDR
13455: GO 13477
// enemy := NearestUnitToUnit ( tmp , unit ) ;
13457: LD_ADDR_VAR 0 10
13461: PUSH
13462: LD_VAR 0 8
13466: PPUSH
13467: LD_VAR 0 1
13471: PPUSH
13472: CALL_OW 74
13476: ST_TO_ADDR
// if not enemy then
13477: LD_VAR 0 10
13481: NOT
13482: IFFALSE 13486
// exit ;
13484: GO 13893
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
13486: LD_VAR 0 11
13490: IFFALSE 13512
13492: PUSH
13493: LD_VAR 0 11
13497: PPUSH
13498: LD_VAR 0 10
13502: PPUSH
13503: CALL_OW 296
13507: PUSH
13508: LD_INT 13
13510: GREATER
13511: AND
13512: IFTRUE 13534
13514: PUSH
13515: LD_VAR 0 1
13519: PPUSH
13520: LD_VAR 0 10
13524: PPUSH
13525: CALL_OW 296
13529: PUSH
13530: LD_INT 12
13532: GREATER
13533: OR
13534: IFFALSE 13538
// exit ;
13536: GO 13893
// missile := [ 1 ] ;
13538: LD_ADDR_VAR 0 14
13542: PUSH
13543: LD_INT 1
13545: PUSH
13546: EMPTY
13547: LIST
13548: ST_TO_ADDR
// if Researched ( side , tech_space ) then
13549: LD_VAR 0 9
13553: PPUSH
13554: LD_VAR 0 12
13558: PPUSH
13559: CALL_OW 325
13563: IFFALSE 13592
// missile := Replace ( missile , missile + 1 , 2 ) ;
13565: LD_ADDR_VAR 0 14
13569: PUSH
13570: LD_VAR 0 14
13574: PPUSH
13575: LD_VAR 0 14
13579: PUSH
13580: LD_INT 1
13582: PLUS
13583: PPUSH
13584: LD_INT 2
13586: PPUSH
13587: CALL_OW 1
13591: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
13592: LD_VAR 0 9
13596: PPUSH
13597: LD_VAR 0 13
13601: PPUSH
13602: CALL_OW 325
13606: IFFALSE 13630
13608: PUSH
13609: LD_VAR 0 10
13613: PPUSH
13614: CALL_OW 255
13618: PPUSH
13619: LD_VAR 0 13
13623: PPUSH
13624: CALL_OW 325
13628: NOT
13629: AND
13630: IFFALSE 13659
// missile := Replace ( missile , missile + 1 , 3 ) ;
13632: LD_ADDR_VAR 0 14
13636: PUSH
13637: LD_VAR 0 14
13641: PPUSH
13642: LD_VAR 0 14
13646: PUSH
13647: LD_INT 1
13649: PLUS
13650: PPUSH
13651: LD_INT 3
13653: PPUSH
13654: CALL_OW 1
13658: ST_TO_ADDR
// if missile < 2 then
13659: LD_VAR 0 14
13663: PUSH
13664: LD_INT 2
13666: LESS
13667: IFFALSE 13671
// exit ;
13669: GO 13893
// x := GetX ( enemy ) ;
13671: LD_ADDR_VAR 0 4
13675: PUSH
13676: LD_VAR 0 10
13680: PPUSH
13681: CALL_OW 250
13685: ST_TO_ADDR
// y := GetY ( enemy ) ;
13686: LD_ADDR_VAR 0 5
13690: PUSH
13691: LD_VAR 0 10
13695: PPUSH
13696: CALL_OW 251
13700: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
13701: LD_ADDR_VAR 0 6
13705: PUSH
13706: LD_VAR 0 4
13710: PUSH
13711: LD_INT 1
13713: NEG
13714: PPUSH
13715: LD_INT 1
13717: PPUSH
13718: CALL_OW 12
13722: PLUS
13723: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
13724: LD_ADDR_VAR 0 7
13728: PUSH
13729: LD_VAR 0 5
13733: PUSH
13734: LD_INT 1
13736: NEG
13737: PPUSH
13738: LD_INT 1
13740: PPUSH
13741: CALL_OW 12
13745: PLUS
13746: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13747: LD_VAR 0 6
13751: PPUSH
13752: LD_VAR 0 7
13756: PPUSH
13757: CALL_OW 488
13761: NOT
13762: IFFALSE 13784
// begin _x := x ;
13764: LD_ADDR_VAR 0 6
13768: PUSH
13769: LD_VAR 0 4
13773: ST_TO_ADDR
// _y := y ;
13774: LD_ADDR_VAR 0 7
13778: PUSH
13779: LD_VAR 0 5
13783: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
13784: LD_ADDR_VAR 0 3
13788: PUSH
13789: LD_INT 1
13791: PPUSH
13792: LD_VAR 0 14
13796: PPUSH
13797: CALL_OW 12
13801: ST_TO_ADDR
// case i of 1 :
13802: LD_VAR 0 3
13806: PUSH
13807: LD_INT 1
13809: DOUBLE
13810: EQUAL
13811: IFTRUE 13815
13813: GO 13832
13815: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
13816: LD_VAR 0 1
13820: PPUSH
13821: LD_VAR 0 10
13825: PPUSH
13826: CALL_OW 115
13830: GO 13893
13832: LD_INT 2
13834: DOUBLE
13835: EQUAL
13836: IFTRUE 13840
13838: GO 13862
13840: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
13841: LD_VAR 0 1
13845: PPUSH
13846: LD_VAR 0 6
13850: PPUSH
13851: LD_VAR 0 7
13855: PPUSH
13856: CALL_OW 153
13860: GO 13893
13862: LD_INT 3
13864: DOUBLE
13865: EQUAL
13866: IFTRUE 13870
13868: GO 13892
13870: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
13871: LD_VAR 0 1
13875: PPUSH
13876: LD_VAR 0 6
13880: PPUSH
13881: LD_VAR 0 7
13885: PPUSH
13886: CALL_OW 154
13890: GO 13893
13892: POP
// end ;
13893: LD_VAR 0 2
13897: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
13898: LD_INT 0
13900: PPUSH
13901: PPUSH
13902: PPUSH
13903: PPUSH
13904: PPUSH
13905: PPUSH
// if not unit or not building then
13906: LD_VAR 0 1
13910: NOT
13911: IFTRUE 13920
13913: PUSH
13914: LD_VAR 0 2
13918: NOT
13919: OR
13920: IFFALSE 13924
// exit ;
13922: GO 14082
// x := GetX ( building ) ;
13924: LD_ADDR_VAR 0 5
13928: PUSH
13929: LD_VAR 0 2
13933: PPUSH
13934: CALL_OW 250
13938: ST_TO_ADDR
// y := GetY ( building ) ;
13939: LD_ADDR_VAR 0 6
13943: PUSH
13944: LD_VAR 0 2
13948: PPUSH
13949: CALL_OW 251
13953: ST_TO_ADDR
// for i := 0 to 5 do
13954: LD_ADDR_VAR 0 4
13958: PUSH
13959: DOUBLE
13960: LD_INT 0
13962: DEC
13963: ST_TO_ADDR
13964: LD_INT 5
13966: PUSH
13967: FOR_TO
13968: IFFALSE 14080
// begin _x := ShiftX ( x , i , 3 ) ;
13970: LD_ADDR_VAR 0 7
13974: PUSH
13975: LD_VAR 0 5
13979: PPUSH
13980: LD_VAR 0 4
13984: PPUSH
13985: LD_INT 3
13987: PPUSH
13988: CALL_OW 272
13992: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13993: LD_ADDR_VAR 0 8
13997: PUSH
13998: LD_VAR 0 6
14002: PPUSH
14003: LD_VAR 0 4
14007: PPUSH
14008: LD_INT 3
14010: PPUSH
14011: CALL_OW 273
14015: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14016: LD_VAR 0 7
14020: PPUSH
14021: LD_VAR 0 8
14025: PPUSH
14026: CALL_OW 488
14030: NOT
14031: IFFALSE 14035
// continue ;
14033: GO 13967
// if HexInfo ( _x , _y ) = 0 then
14035: LD_VAR 0 7
14039: PPUSH
14040: LD_VAR 0 8
14044: PPUSH
14045: CALL_OW 428
14049: PUSH
14050: LD_INT 0
14052: EQUAL
14053: IFFALSE 14078
// begin ComMoveXY ( unit , _x , _y ) ;
14055: LD_VAR 0 1
14059: PPUSH
14060: LD_VAR 0 7
14064: PPUSH
14065: LD_VAR 0 8
14069: PPUSH
14070: CALL_OW 111
// exit ;
14074: POP
14075: POP
14076: GO 14082
// end ; end ;
14078: GO 13967
14080: POP
14081: POP
// end ;
14082: LD_VAR 0 3
14086: RET
// export function ScanBase ( side , base_area ) ; begin
14087: LD_INT 0
14089: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
14090: LD_ADDR_VAR 0 3
14094: PUSH
14095: LD_VAR 0 2
14099: PPUSH
14100: LD_INT 81
14102: PUSH
14103: LD_VAR 0 1
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PPUSH
14112: CALL_OW 70
14116: ST_TO_ADDR
// end ;
14117: LD_VAR 0 3
14121: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14122: LD_INT 0
14124: PPUSH
14125: PPUSH
14126: PPUSH
14127: PPUSH
// result := false ;
14128: LD_ADDR_VAR 0 2
14132: PUSH
14133: LD_INT 0
14135: ST_TO_ADDR
// side := GetSide ( unit ) ;
14136: LD_ADDR_VAR 0 3
14140: PUSH
14141: LD_VAR 0 1
14145: PPUSH
14146: CALL_OW 255
14150: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14151: LD_ADDR_VAR 0 4
14155: PUSH
14156: LD_VAR 0 1
14160: PPUSH
14161: CALL_OW 248
14165: ST_TO_ADDR
// case nat of 1 :
14166: LD_VAR 0 4
14170: PUSH
14171: LD_INT 1
14173: DOUBLE
14174: EQUAL
14175: IFTRUE 14179
14177: GO 14190
14179: POP
// tech := tech_lassight ; 2 :
14180: LD_ADDR_VAR 0 5
14184: PUSH
14185: LD_INT 12
14187: ST_TO_ADDR
14188: GO 14229
14190: LD_INT 2
14192: DOUBLE
14193: EQUAL
14194: IFTRUE 14198
14196: GO 14209
14198: POP
// tech := tech_mortar ; 3 :
14199: LD_ADDR_VAR 0 5
14203: PUSH
14204: LD_INT 41
14206: ST_TO_ADDR
14207: GO 14229
14209: LD_INT 3
14211: DOUBLE
14212: EQUAL
14213: IFTRUE 14217
14215: GO 14228
14217: POP
// tech := tech_bazooka ; end ;
14218: LD_ADDR_VAR 0 5
14222: PUSH
14223: LD_INT 44
14225: ST_TO_ADDR
14226: GO 14229
14228: POP
// if Researched ( side , tech ) then
14229: LD_VAR 0 3
14233: PPUSH
14234: LD_VAR 0 5
14238: PPUSH
14239: CALL_OW 325
14243: IFFALSE 14270
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
14245: LD_ADDR_VAR 0 2
14249: PUSH
14250: LD_INT 5
14252: PUSH
14253: LD_INT 8
14255: PUSH
14256: LD_INT 9
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: PUSH
14264: LD_VAR 0 4
14268: ARRAY
14269: ST_TO_ADDR
// end ;
14270: LD_VAR 0 2
14274: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
14275: LD_INT 0
14277: PPUSH
14278: PPUSH
14279: PPUSH
// if not mines then
14280: LD_VAR 0 2
14284: NOT
14285: IFFALSE 14289
// exit ;
14287: GO 14433
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14289: LD_ADDR_VAR 0 5
14293: PUSH
14294: LD_INT 81
14296: PUSH
14297: LD_VAR 0 1
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: LD_INT 3
14308: PUSH
14309: LD_INT 21
14311: PUSH
14312: LD_INT 3
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PPUSH
14327: CALL_OW 69
14331: ST_TO_ADDR
// for i in mines do
14332: LD_ADDR_VAR 0 4
14336: PUSH
14337: LD_VAR 0 2
14341: PUSH
14342: FOR_IN
14343: IFFALSE 14431
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14345: LD_VAR 0 4
14349: PUSH
14350: LD_INT 1
14352: ARRAY
14353: PPUSH
14354: LD_VAR 0 4
14358: PUSH
14359: LD_INT 2
14361: ARRAY
14362: PPUSH
14363: CALL_OW 458
14367: NOT
14368: IFFALSE 14372
// continue ;
14370: GO 14342
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14372: LD_VAR 0 4
14376: PUSH
14377: LD_INT 1
14379: ARRAY
14380: PPUSH
14381: LD_VAR 0 4
14385: PUSH
14386: LD_INT 2
14388: ARRAY
14389: PPUSH
14390: CALL_OW 428
14394: PUSH
14395: LD_VAR 0 5
14399: IN
14400: IFFALSE 14429
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14402: LD_VAR 0 4
14406: PUSH
14407: LD_INT 1
14409: ARRAY
14410: PPUSH
14411: LD_VAR 0 4
14415: PUSH
14416: LD_INT 2
14418: ARRAY
14419: PPUSH
14420: LD_VAR 0 1
14424: PPUSH
14425: CALL_OW 456
// end ;
14429: GO 14342
14431: POP
14432: POP
// end ;
14433: LD_VAR 0 3
14437: RET
// export function Count ( array ) ; begin
14438: LD_INT 0
14440: PPUSH
// result := array + 0 ;
14441: LD_ADDR_VAR 0 2
14445: PUSH
14446: LD_VAR 0 1
14450: PUSH
14451: LD_INT 0
14453: PLUS
14454: ST_TO_ADDR
// end ;
14455: LD_VAR 0 2
14459: RET
// export function IsEmpty ( building ) ; begin
14460: LD_INT 0
14462: PPUSH
// if not building then
14463: LD_VAR 0 1
14467: NOT
14468: IFFALSE 14472
// exit ;
14470: GO 14515
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
14472: LD_ADDR_VAR 0 2
14476: PUSH
14477: LD_VAR 0 1
14481: PUSH
14482: LD_INT 22
14484: PUSH
14485: LD_VAR 0 1
14489: PPUSH
14490: CALL_OW 255
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PUSH
14499: LD_INT 58
14501: PUSH
14502: EMPTY
14503: LIST
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PPUSH
14509: CALL_OW 69
14513: IN
14514: ST_TO_ADDR
// end ;
14515: LD_VAR 0 2
14519: RET
// export function IsNotFull ( building ) ; var places ; begin
14520: LD_INT 0
14522: PPUSH
14523: PPUSH
// if not building then
14524: LD_VAR 0 1
14528: NOT
14529: IFFALSE 14533
// exit ;
14531: GO 14561
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
14533: LD_ADDR_VAR 0 2
14537: PUSH
14538: LD_VAR 0 1
14542: PPUSH
14543: LD_INT 3
14545: PUSH
14546: LD_INT 62
14548: PUSH
14549: EMPTY
14550: LIST
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PPUSH
14556: CALL_OW 72
14560: ST_TO_ADDR
// end ;
14561: LD_VAR 0 2
14565: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
14566: LD_INT 0
14568: PPUSH
14569: PPUSH
14570: PPUSH
14571: PPUSH
// tmp := [ ] ;
14572: LD_ADDR_VAR 0 3
14576: PUSH
14577: EMPTY
14578: ST_TO_ADDR
// list := [ ] ;
14579: LD_ADDR_VAR 0 5
14583: PUSH
14584: EMPTY
14585: ST_TO_ADDR
// for i = 16 to 25 do
14586: LD_ADDR_VAR 0 4
14590: PUSH
14591: DOUBLE
14592: LD_INT 16
14594: DEC
14595: ST_TO_ADDR
14596: LD_INT 25
14598: PUSH
14599: FOR_TO
14600: IFFALSE 14673
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
14602: LD_ADDR_VAR 0 3
14606: PUSH
14607: LD_VAR 0 3
14611: PUSH
14612: LD_INT 22
14614: PUSH
14615: LD_VAR 0 1
14619: PPUSH
14620: CALL_OW 255
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: LD_INT 91
14631: PUSH
14632: LD_VAR 0 1
14636: PUSH
14637: LD_INT 6
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: LIST
14644: PUSH
14645: LD_INT 30
14647: PUSH
14648: LD_VAR 0 4
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: LIST
14661: PUSH
14662: EMPTY
14663: LIST
14664: PPUSH
14665: CALL_OW 69
14669: ADD
14670: ST_TO_ADDR
14671: GO 14599
14673: POP
14674: POP
// for i = 1 to tmp do
14675: LD_ADDR_VAR 0 4
14679: PUSH
14680: DOUBLE
14681: LD_INT 1
14683: DEC
14684: ST_TO_ADDR
14685: LD_VAR 0 3
14689: PUSH
14690: FOR_TO
14691: IFFALSE 14779
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
14693: LD_ADDR_VAR 0 5
14697: PUSH
14698: LD_VAR 0 5
14702: PUSH
14703: LD_VAR 0 3
14707: PUSH
14708: LD_VAR 0 4
14712: ARRAY
14713: PPUSH
14714: CALL_OW 266
14718: PUSH
14719: LD_VAR 0 3
14723: PUSH
14724: LD_VAR 0 4
14728: ARRAY
14729: PPUSH
14730: CALL_OW 250
14734: PUSH
14735: LD_VAR 0 3
14739: PUSH
14740: LD_VAR 0 4
14744: ARRAY
14745: PPUSH
14746: CALL_OW 251
14750: PUSH
14751: LD_VAR 0 3
14755: PUSH
14756: LD_VAR 0 4
14760: ARRAY
14761: PPUSH
14762: CALL_OW 254
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: PUSH
14773: EMPTY
14774: LIST
14775: ADD
14776: ST_TO_ADDR
14777: GO 14690
14779: POP
14780: POP
// result := list ;
14781: LD_ADDR_VAR 0 2
14785: PUSH
14786: LD_VAR 0 5
14790: ST_TO_ADDR
// end ;
14791: LD_VAR 0 2
14795: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
14796: LD_INT 0
14798: PPUSH
14799: PPUSH
14800: PPUSH
14801: PPUSH
14802: PPUSH
14803: PPUSH
14804: PPUSH
// if not factory then
14805: LD_VAR 0 1
14809: NOT
14810: IFFALSE 14814
// exit ;
14812: GO 15417
// if control = control_apeman then
14814: LD_VAR 0 4
14818: PUSH
14819: LD_INT 5
14821: EQUAL
14822: IFFALSE 14931
// begin tmp := UnitsInside ( factory ) ;
14824: LD_ADDR_VAR 0 8
14828: PUSH
14829: LD_VAR 0 1
14833: PPUSH
14834: CALL_OW 313
14838: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
14839: LD_VAR 0 8
14843: PPUSH
14844: LD_INT 25
14846: PUSH
14847: LD_INT 12
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PPUSH
14854: CALL_OW 72
14858: NOT
14859: IFFALSE 14869
// control := control_manual ;
14861: LD_ADDR_VAR 0 4
14865: PUSH
14866: LD_INT 1
14868: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
14869: LD_ADDR_VAR 0 8
14873: PUSH
14874: LD_VAR 0 1
14878: PPUSH
14879: CALL 14566 0 1
14883: ST_TO_ADDR
// if tmp then
14884: LD_VAR 0 8
14888: IFFALSE 14931
// begin for i in tmp do
14890: LD_ADDR_VAR 0 7
14894: PUSH
14895: LD_VAR 0 8
14899: PUSH
14900: FOR_IN
14901: IFFALSE 14929
// if i [ 1 ] = b_ext_radio then
14903: LD_VAR 0 7
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: PUSH
14912: LD_INT 22
14914: EQUAL
14915: IFFALSE 14927
// begin control := control_remote ;
14917: LD_ADDR_VAR 0 4
14921: PUSH
14922: LD_INT 2
14924: ST_TO_ADDR
// break ;
14925: GO 14929
// end ;
14927: GO 14900
14929: POP
14930: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14931: LD_VAR 0 1
14935: PPUSH
14936: LD_VAR 0 2
14940: PPUSH
14941: LD_VAR 0 3
14945: PPUSH
14946: LD_VAR 0 4
14950: PPUSH
14951: LD_VAR 0 5
14955: PPUSH
14956: CALL_OW 448
14960: IFFALSE 14995
// begin result := [ chassis , engine , control , weapon ] ;
14962: LD_ADDR_VAR 0 6
14966: PUSH
14967: LD_VAR 0 2
14971: PUSH
14972: LD_VAR 0 3
14976: PUSH
14977: LD_VAR 0 4
14981: PUSH
14982: LD_VAR 0 5
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: ST_TO_ADDR
// exit ;
14993: GO 15417
// end ; _chassis := AvailableChassisList ( factory ) ;
14995: LD_ADDR_VAR 0 9
14999: PUSH
15000: LD_VAR 0 1
15004: PPUSH
15005: CALL_OW 475
15009: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15010: LD_ADDR_VAR 0 11
15014: PUSH
15015: LD_VAR 0 1
15019: PPUSH
15020: CALL_OW 476
15024: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15025: LD_ADDR_VAR 0 12
15029: PUSH
15030: LD_VAR 0 1
15034: PPUSH
15035: CALL_OW 477
15039: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15040: LD_ADDR_VAR 0 10
15044: PUSH
15045: LD_VAR 0 1
15049: PPUSH
15050: CALL_OW 478
15054: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
15055: LD_VAR 0 9
15059: NOT
15060: IFTRUE 15069
15062: PUSH
15063: LD_VAR 0 11
15067: NOT
15068: OR
15069: IFTRUE 15078
15071: PUSH
15072: LD_VAR 0 12
15076: NOT
15077: OR
15078: IFTRUE 15087
15080: PUSH
15081: LD_VAR 0 10
15085: NOT
15086: OR
15087: IFFALSE 15122
// begin result := [ chassis , engine , control , weapon ] ;
15089: LD_ADDR_VAR 0 6
15093: PUSH
15094: LD_VAR 0 2
15098: PUSH
15099: LD_VAR 0 3
15103: PUSH
15104: LD_VAR 0 4
15108: PUSH
15109: LD_VAR 0 5
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: ST_TO_ADDR
// exit ;
15120: GO 15417
// end ; if not chassis in _chassis then
15122: LD_VAR 0 2
15126: PUSH
15127: LD_VAR 0 9
15131: IN
15132: NOT
15133: IFFALSE 15159
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15135: LD_ADDR_VAR 0 2
15139: PUSH
15140: LD_VAR 0 9
15144: PUSH
15145: LD_INT 1
15147: PPUSH
15148: LD_VAR 0 9
15152: PPUSH
15153: CALL_OW 12
15157: ARRAY
15158: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15159: LD_VAR 0 2
15163: PPUSH
15164: LD_VAR 0 3
15168: PPUSH
15169: CALL 15422 0 2
15173: NOT
15174: IFFALSE 15235
// repeat engine := _engine [ 1 ] ;
15176: LD_ADDR_VAR 0 3
15180: PUSH
15181: LD_VAR 0 11
15185: PUSH
15186: LD_INT 1
15188: ARRAY
15189: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
15190: LD_ADDR_VAR 0 11
15194: PUSH
15195: LD_VAR 0 11
15199: PPUSH
15200: LD_INT 1
15202: PPUSH
15203: CALL_OW 3
15207: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
15208: LD_VAR 0 2
15212: PPUSH
15213: LD_VAR 0 3
15217: PPUSH
15218: CALL 15422 0 2
15222: IFTRUE 15233
15224: PUSH
15225: LD_VAR 0 11
15229: PUSH
15230: EMPTY
15231: EQUAL
15232: OR
15233: IFFALSE 15176
// if not control in _control then
15235: LD_VAR 0 4
15239: PUSH
15240: LD_VAR 0 12
15244: IN
15245: NOT
15246: IFFALSE 15272
// control := _control [ rand ( 1 , _control ) ] ;
15248: LD_ADDR_VAR 0 4
15252: PUSH
15253: LD_VAR 0 12
15257: PUSH
15258: LD_INT 1
15260: PPUSH
15261: LD_VAR 0 12
15265: PPUSH
15266: CALL_OW 12
15270: ARRAY
15271: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
15272: LD_VAR 0 2
15276: PPUSH
15277: LD_VAR 0 5
15281: PPUSH
15282: CALL 15644 0 2
15286: NOT
15287: IFFALSE 15348
// repeat weapon := _weapon [ 1 ] ;
15289: LD_ADDR_VAR 0 5
15293: PUSH
15294: LD_VAR 0 10
15298: PUSH
15299: LD_INT 1
15301: ARRAY
15302: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15303: LD_ADDR_VAR 0 10
15307: PUSH
15308: LD_VAR 0 10
15312: PPUSH
15313: LD_INT 1
15315: PPUSH
15316: CALL_OW 3
15320: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15321: LD_VAR 0 2
15325: PPUSH
15326: LD_VAR 0 5
15330: PPUSH
15331: CALL 15644 0 2
15335: IFTRUE 15346
15337: PUSH
15338: LD_VAR 0 10
15342: PUSH
15343: EMPTY
15344: EQUAL
15345: OR
15346: IFFALSE 15289
// result := [ ] ;
15348: LD_ADDR_VAR 0 6
15352: PUSH
15353: EMPTY
15354: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15355: LD_VAR 0 1
15359: PPUSH
15360: LD_VAR 0 2
15364: PPUSH
15365: LD_VAR 0 3
15369: PPUSH
15370: LD_VAR 0 4
15374: PPUSH
15375: LD_VAR 0 5
15379: PPUSH
15380: CALL_OW 448
15384: IFFALSE 15417
// result := [ chassis , engine , control , weapon ] ;
15386: LD_ADDR_VAR 0 6
15390: PUSH
15391: LD_VAR 0 2
15395: PUSH
15396: LD_VAR 0 3
15400: PUSH
15401: LD_VAR 0 4
15405: PUSH
15406: LD_VAR 0 5
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: ST_TO_ADDR
// end ;
15417: LD_VAR 0 6
15421: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15422: LD_INT 0
15424: PPUSH
// if not chassis or not engine then
15425: LD_VAR 0 1
15429: NOT
15430: IFTRUE 15439
15432: PUSH
15433: LD_VAR 0 2
15437: NOT
15438: OR
15439: IFFALSE 15443
// exit ;
15441: GO 15639
// case engine of engine_solar :
15443: LD_VAR 0 2
15447: PUSH
15448: LD_INT 2
15450: DOUBLE
15451: EQUAL
15452: IFTRUE 15456
15454: GO 15494
15456: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
15457: LD_ADDR_VAR 0 3
15461: PUSH
15462: LD_INT 11
15464: PUSH
15465: LD_INT 12
15467: PUSH
15468: LD_INT 13
15470: PUSH
15471: LD_INT 14
15473: PUSH
15474: LD_INT 1
15476: PUSH
15477: LD_INT 2
15479: PUSH
15480: LD_INT 3
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: ST_TO_ADDR
15492: GO 15623
15494: LD_INT 1
15496: DOUBLE
15497: EQUAL
15498: IFTRUE 15502
15500: GO 15564
15502: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
15503: LD_ADDR_VAR 0 3
15507: PUSH
15508: LD_INT 11
15510: PUSH
15511: LD_INT 12
15513: PUSH
15514: LD_INT 13
15516: PUSH
15517: LD_INT 14
15519: PUSH
15520: LD_INT 1
15522: PUSH
15523: LD_INT 2
15525: PUSH
15526: LD_INT 3
15528: PUSH
15529: LD_INT 4
15531: PUSH
15532: LD_INT 5
15534: PUSH
15535: LD_INT 21
15537: PUSH
15538: LD_INT 23
15540: PUSH
15541: LD_INT 22
15543: PUSH
15544: LD_INT 24
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: ST_TO_ADDR
15562: GO 15623
15564: LD_INT 3
15566: DOUBLE
15567: EQUAL
15568: IFTRUE 15572
15570: GO 15622
15572: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15573: LD_ADDR_VAR 0 3
15577: PUSH
15578: LD_INT 13
15580: PUSH
15581: LD_INT 14
15583: PUSH
15584: LD_INT 2
15586: PUSH
15587: LD_INT 3
15589: PUSH
15590: LD_INT 4
15592: PUSH
15593: LD_INT 5
15595: PUSH
15596: LD_INT 21
15598: PUSH
15599: LD_INT 22
15601: PUSH
15602: LD_INT 23
15604: PUSH
15605: LD_INT 24
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: ST_TO_ADDR
15620: GO 15623
15622: POP
// result := ( chassis in result ) ;
15623: LD_ADDR_VAR 0 3
15627: PUSH
15628: LD_VAR 0 1
15632: PUSH
15633: LD_VAR 0 3
15637: IN
15638: ST_TO_ADDR
// end ;
15639: LD_VAR 0 3
15643: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
15644: LD_INT 0
15646: PPUSH
// if not chassis or not weapon then
15647: LD_VAR 0 1
15651: NOT
15652: IFTRUE 15661
15654: PUSH
15655: LD_VAR 0 2
15659: NOT
15660: OR
15661: IFFALSE 15665
// exit ;
15663: GO 16725
// case weapon of us_machine_gun :
15665: LD_VAR 0 2
15669: PUSH
15670: LD_INT 2
15672: DOUBLE
15673: EQUAL
15674: IFTRUE 15678
15676: GO 15708
15678: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
15679: LD_ADDR_VAR 0 3
15683: PUSH
15684: LD_INT 1
15686: PUSH
15687: LD_INT 2
15689: PUSH
15690: LD_INT 3
15692: PUSH
15693: LD_INT 4
15695: PUSH
15696: LD_INT 5
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: ST_TO_ADDR
15706: GO 16709
15708: LD_INT 3
15710: DOUBLE
15711: EQUAL
15712: IFTRUE 15716
15714: GO 15746
15716: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
15717: LD_ADDR_VAR 0 3
15721: PUSH
15722: LD_INT 1
15724: PUSH
15725: LD_INT 2
15727: PUSH
15728: LD_INT 3
15730: PUSH
15731: LD_INT 4
15733: PUSH
15734: LD_INT 5
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: ST_TO_ADDR
15744: GO 16709
15746: LD_INT 11
15748: DOUBLE
15749: EQUAL
15750: IFTRUE 15754
15752: GO 15784
15754: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
15755: LD_ADDR_VAR 0 3
15759: PUSH
15760: LD_INT 1
15762: PUSH
15763: LD_INT 2
15765: PUSH
15766: LD_INT 3
15768: PUSH
15769: LD_INT 4
15771: PUSH
15772: LD_INT 5
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: ST_TO_ADDR
15782: GO 16709
15784: LD_INT 4
15786: DOUBLE
15787: EQUAL
15788: IFTRUE 15792
15790: GO 15818
15792: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
15793: LD_ADDR_VAR 0 3
15797: PUSH
15798: LD_INT 2
15800: PUSH
15801: LD_INT 3
15803: PUSH
15804: LD_INT 4
15806: PUSH
15807: LD_INT 5
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: ST_TO_ADDR
15816: GO 16709
15818: LD_INT 5
15820: DOUBLE
15821: EQUAL
15822: IFTRUE 15826
15824: GO 15852
15826: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
15827: LD_ADDR_VAR 0 3
15831: PUSH
15832: LD_INT 2
15834: PUSH
15835: LD_INT 3
15837: PUSH
15838: LD_INT 4
15840: PUSH
15841: LD_INT 5
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: ST_TO_ADDR
15850: GO 16709
15852: LD_INT 9
15854: DOUBLE
15855: EQUAL
15856: IFTRUE 15860
15858: GO 15886
15860: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
15861: LD_ADDR_VAR 0 3
15865: PUSH
15866: LD_INT 2
15868: PUSH
15869: LD_INT 3
15871: PUSH
15872: LD_INT 4
15874: PUSH
15875: LD_INT 5
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: ST_TO_ADDR
15884: GO 16709
15886: LD_INT 7
15888: DOUBLE
15889: EQUAL
15890: IFTRUE 15894
15892: GO 15920
15894: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
15895: LD_ADDR_VAR 0 3
15899: PUSH
15900: LD_INT 2
15902: PUSH
15903: LD_INT 3
15905: PUSH
15906: LD_INT 4
15908: PUSH
15909: LD_INT 5
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: ST_TO_ADDR
15918: GO 16709
15920: LD_INT 12
15922: DOUBLE
15923: EQUAL
15924: IFTRUE 15928
15926: GO 15954
15928: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
15929: LD_ADDR_VAR 0 3
15933: PUSH
15934: LD_INT 2
15936: PUSH
15937: LD_INT 3
15939: PUSH
15940: LD_INT 4
15942: PUSH
15943: LD_INT 5
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: ST_TO_ADDR
15952: GO 16709
15954: LD_INT 13
15956: DOUBLE
15957: EQUAL
15958: IFTRUE 15962
15960: GO 15988
15962: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15963: LD_ADDR_VAR 0 3
15967: PUSH
15968: LD_INT 2
15970: PUSH
15971: LD_INT 3
15973: PUSH
15974: LD_INT 4
15976: PUSH
15977: LD_INT 5
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: ST_TO_ADDR
15986: GO 16709
15988: LD_INT 14
15990: DOUBLE
15991: EQUAL
15992: IFTRUE 15996
15994: GO 16014
15996: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15997: LD_ADDR_VAR 0 3
16001: PUSH
16002: LD_INT 4
16004: PUSH
16005: LD_INT 5
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: ST_TO_ADDR
16012: GO 16709
16014: LD_INT 6
16016: DOUBLE
16017: EQUAL
16018: IFTRUE 16022
16020: GO 16040
16022: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16023: LD_ADDR_VAR 0 3
16027: PUSH
16028: LD_INT 4
16030: PUSH
16031: LD_INT 5
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: ST_TO_ADDR
16038: GO 16709
16040: LD_INT 10
16042: DOUBLE
16043: EQUAL
16044: IFTRUE 16048
16046: GO 16066
16048: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16049: LD_ADDR_VAR 0 3
16053: PUSH
16054: LD_INT 4
16056: PUSH
16057: LD_INT 5
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: ST_TO_ADDR
16064: GO 16709
16066: LD_INT 22
16068: DOUBLE
16069: EQUAL
16070: IFTRUE 16074
16072: GO 16100
16074: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16075: LD_ADDR_VAR 0 3
16079: PUSH
16080: LD_INT 11
16082: PUSH
16083: LD_INT 12
16085: PUSH
16086: LD_INT 13
16088: PUSH
16089: LD_INT 14
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: ST_TO_ADDR
16098: GO 16709
16100: LD_INT 23
16102: DOUBLE
16103: EQUAL
16104: IFTRUE 16108
16106: GO 16134
16108: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16109: LD_ADDR_VAR 0 3
16113: PUSH
16114: LD_INT 11
16116: PUSH
16117: LD_INT 12
16119: PUSH
16120: LD_INT 13
16122: PUSH
16123: LD_INT 14
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: ST_TO_ADDR
16132: GO 16709
16134: LD_INT 24
16136: DOUBLE
16137: EQUAL
16138: IFTRUE 16142
16140: GO 16168
16142: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16143: LD_ADDR_VAR 0 3
16147: PUSH
16148: LD_INT 11
16150: PUSH
16151: LD_INT 12
16153: PUSH
16154: LD_INT 13
16156: PUSH
16157: LD_INT 14
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: ST_TO_ADDR
16166: GO 16709
16168: LD_INT 30
16170: DOUBLE
16171: EQUAL
16172: IFTRUE 16176
16174: GO 16202
16176: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16177: LD_ADDR_VAR 0 3
16181: PUSH
16182: LD_INT 11
16184: PUSH
16185: LD_INT 12
16187: PUSH
16188: LD_INT 13
16190: PUSH
16191: LD_INT 14
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: ST_TO_ADDR
16200: GO 16709
16202: LD_INT 25
16204: DOUBLE
16205: EQUAL
16206: IFTRUE 16210
16208: GO 16228
16210: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
16211: LD_ADDR_VAR 0 3
16215: PUSH
16216: LD_INT 13
16218: PUSH
16219: LD_INT 14
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: ST_TO_ADDR
16226: GO 16709
16228: LD_INT 27
16230: DOUBLE
16231: EQUAL
16232: IFTRUE 16236
16234: GO 16254
16236: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
16237: LD_ADDR_VAR 0 3
16241: PUSH
16242: LD_INT 13
16244: PUSH
16245: LD_INT 14
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: ST_TO_ADDR
16252: GO 16709
16254: LD_INT 92
16256: DOUBLE
16257: EQUAL
16258: IFTRUE 16262
16260: GO 16288
16262: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
16263: LD_ADDR_VAR 0 3
16267: PUSH
16268: LD_INT 11
16270: PUSH
16271: LD_INT 12
16273: PUSH
16274: LD_INT 13
16276: PUSH
16277: LD_INT 14
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: ST_TO_ADDR
16286: GO 16709
16288: LD_INT 28
16290: DOUBLE
16291: EQUAL
16292: IFTRUE 16296
16294: GO 16314
16296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
16297: LD_ADDR_VAR 0 3
16301: PUSH
16302: LD_INT 13
16304: PUSH
16305: LD_INT 14
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: ST_TO_ADDR
16312: GO 16709
16314: LD_INT 29
16316: DOUBLE
16317: EQUAL
16318: IFTRUE 16322
16320: GO 16340
16322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16323: LD_ADDR_VAR 0 3
16327: PUSH
16328: LD_INT 13
16330: PUSH
16331: LD_INT 14
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: ST_TO_ADDR
16338: GO 16709
16340: LD_INT 31
16342: DOUBLE
16343: EQUAL
16344: IFTRUE 16348
16346: GO 16366
16348: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16349: LD_ADDR_VAR 0 3
16353: PUSH
16354: LD_INT 13
16356: PUSH
16357: LD_INT 14
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: ST_TO_ADDR
16364: GO 16709
16366: LD_INT 26
16368: DOUBLE
16369: EQUAL
16370: IFTRUE 16374
16372: GO 16392
16374: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
16375: LD_ADDR_VAR 0 3
16379: PUSH
16380: LD_INT 13
16382: PUSH
16383: LD_INT 14
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: ST_TO_ADDR
16390: GO 16709
16392: LD_INT 42
16394: DOUBLE
16395: EQUAL
16396: IFTRUE 16400
16398: GO 16426
16400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16401: LD_ADDR_VAR 0 3
16405: PUSH
16406: LD_INT 21
16408: PUSH
16409: LD_INT 22
16411: PUSH
16412: LD_INT 23
16414: PUSH
16415: LD_INT 24
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: ST_TO_ADDR
16424: GO 16709
16426: LD_INT 43
16428: DOUBLE
16429: EQUAL
16430: IFTRUE 16434
16432: GO 16460
16434: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
16435: LD_ADDR_VAR 0 3
16439: PUSH
16440: LD_INT 21
16442: PUSH
16443: LD_INT 22
16445: PUSH
16446: LD_INT 23
16448: PUSH
16449: LD_INT 24
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: ST_TO_ADDR
16458: GO 16709
16460: LD_INT 44
16462: DOUBLE
16463: EQUAL
16464: IFTRUE 16468
16466: GO 16494
16468: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
16469: LD_ADDR_VAR 0 3
16473: PUSH
16474: LD_INT 21
16476: PUSH
16477: LD_INT 22
16479: PUSH
16480: LD_INT 23
16482: PUSH
16483: LD_INT 24
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: ST_TO_ADDR
16492: GO 16709
16494: LD_INT 45
16496: DOUBLE
16497: EQUAL
16498: IFTRUE 16502
16500: GO 16528
16502: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
16503: LD_ADDR_VAR 0 3
16507: PUSH
16508: LD_INT 21
16510: PUSH
16511: LD_INT 22
16513: PUSH
16514: LD_INT 23
16516: PUSH
16517: LD_INT 24
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: ST_TO_ADDR
16526: GO 16709
16528: LD_INT 49
16530: DOUBLE
16531: EQUAL
16532: IFTRUE 16536
16534: GO 16562
16536: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
16537: LD_ADDR_VAR 0 3
16541: PUSH
16542: LD_INT 21
16544: PUSH
16545: LD_INT 22
16547: PUSH
16548: LD_INT 23
16550: PUSH
16551: LD_INT 24
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: ST_TO_ADDR
16560: GO 16709
16562: LD_INT 51
16564: DOUBLE
16565: EQUAL
16566: IFTRUE 16570
16568: GO 16596
16570: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
16571: LD_ADDR_VAR 0 3
16575: PUSH
16576: LD_INT 21
16578: PUSH
16579: LD_INT 22
16581: PUSH
16582: LD_INT 23
16584: PUSH
16585: LD_INT 24
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: ST_TO_ADDR
16594: GO 16709
16596: LD_INT 52
16598: DOUBLE
16599: EQUAL
16600: IFTRUE 16604
16602: GO 16630
16604: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
16605: LD_ADDR_VAR 0 3
16609: PUSH
16610: LD_INT 21
16612: PUSH
16613: LD_INT 22
16615: PUSH
16616: LD_INT 23
16618: PUSH
16619: LD_INT 24
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: ST_TO_ADDR
16628: GO 16709
16630: LD_INT 53
16632: DOUBLE
16633: EQUAL
16634: IFTRUE 16638
16636: GO 16656
16638: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
16639: LD_ADDR_VAR 0 3
16643: PUSH
16644: LD_INT 23
16646: PUSH
16647: LD_INT 24
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: ST_TO_ADDR
16654: GO 16709
16656: LD_INT 46
16658: DOUBLE
16659: EQUAL
16660: IFTRUE 16664
16662: GO 16682
16664: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
16665: LD_ADDR_VAR 0 3
16669: PUSH
16670: LD_INT 23
16672: PUSH
16673: LD_INT 24
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: ST_TO_ADDR
16680: GO 16709
16682: LD_INT 47
16684: DOUBLE
16685: EQUAL
16686: IFTRUE 16690
16688: GO 16708
16690: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16691: LD_ADDR_VAR 0 3
16695: PUSH
16696: LD_INT 23
16698: PUSH
16699: LD_INT 24
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: ST_TO_ADDR
16706: GO 16709
16708: POP
// result := ( chassis in result ) ;
16709: LD_ADDR_VAR 0 3
16713: PUSH
16714: LD_VAR 0 1
16718: PUSH
16719: LD_VAR 0 3
16723: IN
16724: ST_TO_ADDR
// end ;
16725: LD_VAR 0 3
16729: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
16730: LD_INT 0
16732: PPUSH
16733: PPUSH
16734: PPUSH
16735: PPUSH
16736: PPUSH
16737: PPUSH
16738: PPUSH
// result := array ;
16739: LD_ADDR_VAR 0 5
16743: PUSH
16744: LD_VAR 0 1
16748: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
16749: LD_VAR 0 1
16753: NOT
16754: IFTRUE 16763
16756: PUSH
16757: LD_VAR 0 2
16761: NOT
16762: OR
16763: IFTRUE 16772
16765: PUSH
16766: LD_VAR 0 3
16770: NOT
16771: OR
16772: IFTRUE 16786
16774: PUSH
16775: LD_VAR 0 2
16779: PUSH
16780: LD_VAR 0 1
16784: GREATER
16785: OR
16786: IFTRUE 16800
16788: PUSH
16789: LD_VAR 0 3
16793: PUSH
16794: LD_VAR 0 1
16798: GREATER
16799: OR
16800: IFFALSE 16804
// exit ;
16802: GO 17100
// if direction then
16804: LD_VAR 0 4
16808: IFFALSE 16872
// begin d := 1 ;
16810: LD_ADDR_VAR 0 9
16814: PUSH
16815: LD_INT 1
16817: ST_TO_ADDR
// if i_from > i_to then
16818: LD_VAR 0 2
16822: PUSH
16823: LD_VAR 0 3
16827: GREATER
16828: IFFALSE 16854
// length := ( array - i_from ) + i_to else
16830: LD_ADDR_VAR 0 11
16834: PUSH
16835: LD_VAR 0 1
16839: PUSH
16840: LD_VAR 0 2
16844: MINUS
16845: PUSH
16846: LD_VAR 0 3
16850: PLUS
16851: ST_TO_ADDR
16852: GO 16870
// length := i_to - i_from ;
16854: LD_ADDR_VAR 0 11
16858: PUSH
16859: LD_VAR 0 3
16863: PUSH
16864: LD_VAR 0 2
16868: MINUS
16869: ST_TO_ADDR
// end else
16870: GO 16933
// begin d := - 1 ;
16872: LD_ADDR_VAR 0 9
16876: PUSH
16877: LD_INT 1
16879: NEG
16880: ST_TO_ADDR
// if i_from > i_to then
16881: LD_VAR 0 2
16885: PUSH
16886: LD_VAR 0 3
16890: GREATER
16891: IFFALSE 16911
// length := i_from - i_to else
16893: LD_ADDR_VAR 0 11
16897: PUSH
16898: LD_VAR 0 2
16902: PUSH
16903: LD_VAR 0 3
16907: MINUS
16908: ST_TO_ADDR
16909: GO 16933
// length := ( array - i_to ) + i_from ;
16911: LD_ADDR_VAR 0 11
16915: PUSH
16916: LD_VAR 0 1
16920: PUSH
16921: LD_VAR 0 3
16925: MINUS
16926: PUSH
16927: LD_VAR 0 2
16931: PLUS
16932: ST_TO_ADDR
// end ; if not length then
16933: LD_VAR 0 11
16937: NOT
16938: IFFALSE 16942
// exit ;
16940: GO 17100
// tmp := array ;
16942: LD_ADDR_VAR 0 10
16946: PUSH
16947: LD_VAR 0 1
16951: ST_TO_ADDR
// for i = 1 to length do
16952: LD_ADDR_VAR 0 6
16956: PUSH
16957: DOUBLE
16958: LD_INT 1
16960: DEC
16961: ST_TO_ADDR
16962: LD_VAR 0 11
16966: PUSH
16967: FOR_TO
16968: IFFALSE 17088
// begin for j = 1 to array do
16970: LD_ADDR_VAR 0 7
16974: PUSH
16975: DOUBLE
16976: LD_INT 1
16978: DEC
16979: ST_TO_ADDR
16980: LD_VAR 0 1
16984: PUSH
16985: FOR_TO
16986: IFFALSE 17074
// begin k := j + d ;
16988: LD_ADDR_VAR 0 8
16992: PUSH
16993: LD_VAR 0 7
16997: PUSH
16998: LD_VAR 0 9
17002: PLUS
17003: ST_TO_ADDR
// if k > array then
17004: LD_VAR 0 8
17008: PUSH
17009: LD_VAR 0 1
17013: GREATER
17014: IFFALSE 17024
// k := 1 ;
17016: LD_ADDR_VAR 0 8
17020: PUSH
17021: LD_INT 1
17023: ST_TO_ADDR
// if not k then
17024: LD_VAR 0 8
17028: NOT
17029: IFFALSE 17041
// k := array ;
17031: LD_ADDR_VAR 0 8
17035: PUSH
17036: LD_VAR 0 1
17040: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17041: LD_ADDR_VAR 0 10
17045: PUSH
17046: LD_VAR 0 10
17050: PPUSH
17051: LD_VAR 0 8
17055: PPUSH
17056: LD_VAR 0 1
17060: PUSH
17061: LD_VAR 0 7
17065: ARRAY
17066: PPUSH
17067: CALL_OW 1
17071: ST_TO_ADDR
// end ;
17072: GO 16985
17074: POP
17075: POP
// array := tmp ;
17076: LD_ADDR_VAR 0 1
17080: PUSH
17081: LD_VAR 0 10
17085: ST_TO_ADDR
// end ;
17086: GO 16967
17088: POP
17089: POP
// result := array ;
17090: LD_ADDR_VAR 0 5
17094: PUSH
17095: LD_VAR 0 1
17099: ST_TO_ADDR
// end ;
17100: LD_VAR 0 5
17104: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17105: LD_INT 0
17107: PPUSH
17108: PPUSH
// result := 0 ;
17109: LD_ADDR_VAR 0 3
17113: PUSH
17114: LD_INT 0
17116: ST_TO_ADDR
// if not array or not value in array then
17117: LD_VAR 0 1
17121: NOT
17122: IFTRUE 17137
17124: PUSH
17125: LD_VAR 0 2
17129: PUSH
17130: LD_VAR 0 1
17134: IN
17135: NOT
17136: OR
17137: IFFALSE 17141
// exit ;
17139: GO 17195
// for i = 1 to array do
17141: LD_ADDR_VAR 0 4
17145: PUSH
17146: DOUBLE
17147: LD_INT 1
17149: DEC
17150: ST_TO_ADDR
17151: LD_VAR 0 1
17155: PUSH
17156: FOR_TO
17157: IFFALSE 17193
// if value = array [ i ] then
17159: LD_VAR 0 2
17163: PUSH
17164: LD_VAR 0 1
17168: PUSH
17169: LD_VAR 0 4
17173: ARRAY
17174: EQUAL
17175: IFFALSE 17191
// begin result := i ;
17177: LD_ADDR_VAR 0 3
17181: PUSH
17182: LD_VAR 0 4
17186: ST_TO_ADDR
// exit ;
17187: POP
17188: POP
17189: GO 17195
// end ;
17191: GO 17156
17193: POP
17194: POP
// end ;
17195: LD_VAR 0 3
17199: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
17200: LD_INT 0
17202: PPUSH
// vc_chassis := chassis ;
17203: LD_ADDR_OWVAR 37
17207: PUSH
17208: LD_VAR 0 1
17212: ST_TO_ADDR
// vc_engine := engine ;
17213: LD_ADDR_OWVAR 39
17217: PUSH
17218: LD_VAR 0 2
17222: ST_TO_ADDR
// vc_control := control ;
17223: LD_ADDR_OWVAR 38
17227: PUSH
17228: LD_VAR 0 3
17232: ST_TO_ADDR
// vc_weapon := weapon ;
17233: LD_ADDR_OWVAR 40
17237: PUSH
17238: LD_VAR 0 4
17242: ST_TO_ADDR
// vc_fuel_battery := fuel ;
17243: LD_ADDR_OWVAR 41
17247: PUSH
17248: LD_VAR 0 5
17252: ST_TO_ADDR
// end ;
17253: LD_VAR 0 6
17257: RET
// export function WantPlant ( unit ) ; var task ; begin
17258: LD_INT 0
17260: PPUSH
17261: PPUSH
// result := false ;
17262: LD_ADDR_VAR 0 2
17266: PUSH
17267: LD_INT 0
17269: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
17270: LD_ADDR_VAR 0 3
17274: PUSH
17275: LD_VAR 0 1
17279: PPUSH
17280: CALL_OW 437
17284: ST_TO_ADDR
// if task then
17285: LD_VAR 0 3
17289: IFFALSE 17317
// if task [ 1 ] [ 1 ] = p then
17291: LD_VAR 0 3
17295: PUSH
17296: LD_INT 1
17298: ARRAY
17299: PUSH
17300: LD_INT 1
17302: ARRAY
17303: PUSH
17304: LD_STRING p
17306: EQUAL
17307: IFFALSE 17317
// result := true ;
17309: LD_ADDR_VAR 0 2
17313: PUSH
17314: LD_INT 1
17316: ST_TO_ADDR
// end ;
17317: LD_VAR 0 2
17321: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
17322: LD_INT 0
17324: PPUSH
17325: PPUSH
17326: PPUSH
17327: PPUSH
// if pos < 1 then
17328: LD_VAR 0 2
17332: PUSH
17333: LD_INT 1
17335: LESS
17336: IFFALSE 17340
// exit ;
17338: GO 17643
// if pos = 1 then
17340: LD_VAR 0 2
17344: PUSH
17345: LD_INT 1
17347: EQUAL
17348: IFFALSE 17381
// result := Replace ( arr , pos [ 1 ] , value ) else
17350: LD_ADDR_VAR 0 4
17354: PUSH
17355: LD_VAR 0 1
17359: PPUSH
17360: LD_VAR 0 2
17364: PUSH
17365: LD_INT 1
17367: ARRAY
17368: PPUSH
17369: LD_VAR 0 3
17373: PPUSH
17374: CALL_OW 1
17378: ST_TO_ADDR
17379: GO 17643
// begin tmp := arr ;
17381: LD_ADDR_VAR 0 6
17385: PUSH
17386: LD_VAR 0 1
17390: ST_TO_ADDR
// s_arr := [ tmp ] ;
17391: LD_ADDR_VAR 0 7
17395: PUSH
17396: LD_VAR 0 6
17400: PUSH
17401: EMPTY
17402: LIST
17403: ST_TO_ADDR
// for i = 1 to pos - 1 do
17404: LD_ADDR_VAR 0 5
17408: PUSH
17409: DOUBLE
17410: LD_INT 1
17412: DEC
17413: ST_TO_ADDR
17414: LD_VAR 0 2
17418: PUSH
17419: LD_INT 1
17421: MINUS
17422: PUSH
17423: FOR_TO
17424: IFFALSE 17469
// begin tmp := tmp [ pos [ i ] ] ;
17426: LD_ADDR_VAR 0 6
17430: PUSH
17431: LD_VAR 0 6
17435: PUSH
17436: LD_VAR 0 2
17440: PUSH
17441: LD_VAR 0 5
17445: ARRAY
17446: ARRAY
17447: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
17448: LD_ADDR_VAR 0 7
17452: PUSH
17453: LD_VAR 0 7
17457: PUSH
17458: LD_VAR 0 6
17462: PUSH
17463: EMPTY
17464: LIST
17465: ADD
17466: ST_TO_ADDR
// end ;
17467: GO 17423
17469: POP
17470: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
17471: LD_ADDR_VAR 0 6
17475: PUSH
17476: LD_VAR 0 6
17480: PPUSH
17481: LD_VAR 0 2
17485: PUSH
17486: LD_VAR 0 2
17490: ARRAY
17491: PPUSH
17492: LD_VAR 0 3
17496: PPUSH
17497: CALL_OW 1
17501: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
17502: LD_ADDR_VAR 0 7
17506: PUSH
17507: LD_VAR 0 7
17511: PPUSH
17512: LD_VAR 0 7
17516: PPUSH
17517: LD_VAR 0 6
17521: PPUSH
17522: CALL_OW 1
17526: ST_TO_ADDR
// for i = s_arr downto 2 do
17527: LD_ADDR_VAR 0 5
17531: PUSH
17532: DOUBLE
17533: LD_VAR 0 7
17537: INC
17538: ST_TO_ADDR
17539: LD_INT 2
17541: PUSH
17542: FOR_DOWNTO
17543: IFFALSE 17627
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
17545: LD_ADDR_VAR 0 6
17549: PUSH
17550: LD_VAR 0 7
17554: PUSH
17555: LD_VAR 0 5
17559: PUSH
17560: LD_INT 1
17562: MINUS
17563: ARRAY
17564: PPUSH
17565: LD_VAR 0 2
17569: PUSH
17570: LD_VAR 0 5
17574: PUSH
17575: LD_INT 1
17577: MINUS
17578: ARRAY
17579: PPUSH
17580: LD_VAR 0 7
17584: PUSH
17585: LD_VAR 0 5
17589: ARRAY
17590: PPUSH
17591: CALL_OW 1
17595: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
17596: LD_ADDR_VAR 0 7
17600: PUSH
17601: LD_VAR 0 7
17605: PPUSH
17606: LD_VAR 0 5
17610: PUSH
17611: LD_INT 1
17613: MINUS
17614: PPUSH
17615: LD_VAR 0 6
17619: PPUSH
17620: CALL_OW 1
17624: ST_TO_ADDR
// end ;
17625: GO 17542
17627: POP
17628: POP
// result := s_arr [ 1 ] ;
17629: LD_ADDR_VAR 0 4
17633: PUSH
17634: LD_VAR 0 7
17638: PUSH
17639: LD_INT 1
17641: ARRAY
17642: ST_TO_ADDR
// end ; end ;
17643: LD_VAR 0 4
17647: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
17648: LD_INT 0
17650: PPUSH
17651: PPUSH
// if not list then
17652: LD_VAR 0 1
17656: NOT
17657: IFFALSE 17661
// exit ;
17659: GO 17752
// i := list [ pos1 ] ;
17661: LD_ADDR_VAR 0 5
17665: PUSH
17666: LD_VAR 0 1
17670: PUSH
17671: LD_VAR 0 2
17675: ARRAY
17676: ST_TO_ADDR
// if not i then
17677: LD_VAR 0 5
17681: NOT
17682: IFFALSE 17686
// exit ;
17684: GO 17752
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
17686: LD_ADDR_VAR 0 1
17690: PUSH
17691: LD_VAR 0 1
17695: PPUSH
17696: LD_VAR 0 2
17700: PPUSH
17701: LD_VAR 0 1
17705: PUSH
17706: LD_VAR 0 3
17710: ARRAY
17711: PPUSH
17712: CALL_OW 1
17716: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
17717: LD_ADDR_VAR 0 1
17721: PUSH
17722: LD_VAR 0 1
17726: PPUSH
17727: LD_VAR 0 3
17731: PPUSH
17732: LD_VAR 0 5
17736: PPUSH
17737: CALL_OW 1
17741: ST_TO_ADDR
// result := list ;
17742: LD_ADDR_VAR 0 4
17746: PUSH
17747: LD_VAR 0 1
17751: ST_TO_ADDR
// end ;
17752: LD_VAR 0 4
17756: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
17757: LD_INT 0
17759: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
17760: LD_ADDR_VAR 0 5
17764: PUSH
17765: LD_VAR 0 1
17769: PPUSH
17770: CALL_OW 250
17774: PPUSH
17775: LD_VAR 0 1
17779: PPUSH
17780: CALL_OW 251
17784: PPUSH
17785: LD_VAR 0 2
17789: PPUSH
17790: LD_VAR 0 3
17794: PPUSH
17795: LD_VAR 0 4
17799: PPUSH
17800: CALL 18182 0 5
17804: ST_TO_ADDR
// end ;
17805: LD_VAR 0 5
17809: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
17810: LD_INT 0
17812: PPUSH
17813: PPUSH
17814: PPUSH
17815: PPUSH
// if not list or not unit then
17816: LD_VAR 0 2
17820: NOT
17821: IFTRUE 17830
17823: PUSH
17824: LD_VAR 0 1
17828: NOT
17829: OR
17830: IFFALSE 17834
// exit ;
17832: GO 18177
// result := [ ] ;
17834: LD_ADDR_VAR 0 5
17838: PUSH
17839: EMPTY
17840: ST_TO_ADDR
// for i in list do
17841: LD_ADDR_VAR 0 6
17845: PUSH
17846: LD_VAR 0 2
17850: PUSH
17851: FOR_IN
17852: IFFALSE 18070
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
17854: LD_ADDR_VAR 0 8
17858: PUSH
17859: LD_VAR 0 1
17863: PPUSH
17864: LD_VAR 0 6
17868: PUSH
17869: LD_INT 1
17871: ARRAY
17872: PPUSH
17873: LD_VAR 0 6
17877: PUSH
17878: LD_INT 2
17880: ARRAY
17881: PPUSH
17882: CALL_OW 297
17886: ST_TO_ADDR
// if not Count ( result ) then
17887: LD_VAR 0 5
17891: PPUSH
17892: CALL 14438 0 1
17896: NOT
17897: IFFALSE 17930
// begin result := Join ( result , [ i , tmp ] ) ;
17899: LD_ADDR_VAR 0 5
17903: PUSH
17904: LD_VAR 0 5
17908: PPUSH
17909: LD_VAR 0 6
17913: PUSH
17914: LD_VAR 0 8
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PPUSH
17923: CALL 50370 0 2
17927: ST_TO_ADDR
// continue ;
17928: GO 17851
// end ; if result [ result ] [ 2 ] <= tmp then
17930: LD_VAR 0 5
17934: PUSH
17935: LD_VAR 0 5
17939: ARRAY
17940: PUSH
17941: LD_INT 2
17943: ARRAY
17944: PUSH
17945: LD_VAR 0 8
17949: LESSEQUAL
17950: IFFALSE 17983
// result := Join ( result , [ i , tmp ] ) else
17952: LD_ADDR_VAR 0 5
17956: PUSH
17957: LD_VAR 0 5
17961: PPUSH
17962: LD_VAR 0 6
17966: PUSH
17967: LD_VAR 0 8
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PPUSH
17976: CALL 50370 0 2
17980: ST_TO_ADDR
17981: GO 18068
// begin for j := 1 to Count ( result ) do
17983: LD_ADDR_VAR 0 7
17987: PUSH
17988: DOUBLE
17989: LD_INT 1
17991: DEC
17992: ST_TO_ADDR
17993: LD_VAR 0 5
17997: PPUSH
17998: CALL 14438 0 1
18002: PUSH
18003: FOR_TO
18004: IFFALSE 18066
// begin if tmp < result [ j ] [ 2 ] then
18006: LD_VAR 0 8
18010: PUSH
18011: LD_VAR 0 5
18015: PUSH
18016: LD_VAR 0 7
18020: ARRAY
18021: PUSH
18022: LD_INT 2
18024: ARRAY
18025: LESS
18026: IFFALSE 18064
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18028: LD_ADDR_VAR 0 5
18032: PUSH
18033: LD_VAR 0 5
18037: PPUSH
18038: LD_VAR 0 7
18042: PPUSH
18043: LD_VAR 0 6
18047: PUSH
18048: LD_VAR 0 8
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PPUSH
18057: CALL_OW 2
18061: ST_TO_ADDR
// break ;
18062: GO 18066
// end ; end ;
18064: GO 18003
18066: POP
18067: POP
// end ; end ;
18068: GO 17851
18070: POP
18071: POP
// if result and not asc then
18072: LD_VAR 0 5
18076: IFFALSE 18085
18078: PUSH
18079: LD_VAR 0 3
18083: NOT
18084: AND
18085: IFFALSE 18102
// result := ReverseArray ( result ) ;
18087: LD_ADDR_VAR 0 5
18091: PUSH
18092: LD_VAR 0 5
18096: PPUSH
18097: CALL 45460 0 1
18101: ST_TO_ADDR
// tmp := [ ] ;
18102: LD_ADDR_VAR 0 8
18106: PUSH
18107: EMPTY
18108: ST_TO_ADDR
// if mode then
18109: LD_VAR 0 4
18113: IFFALSE 18177
// begin for i := 1 to result do
18115: LD_ADDR_VAR 0 6
18119: PUSH
18120: DOUBLE
18121: LD_INT 1
18123: DEC
18124: ST_TO_ADDR
18125: LD_VAR 0 5
18129: PUSH
18130: FOR_TO
18131: IFFALSE 18165
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
18133: LD_ADDR_VAR 0 8
18137: PUSH
18138: LD_VAR 0 8
18142: PPUSH
18143: LD_VAR 0 5
18147: PUSH
18148: LD_VAR 0 6
18152: ARRAY
18153: PUSH
18154: LD_INT 1
18156: ARRAY
18157: PPUSH
18158: CALL 50370 0 2
18162: ST_TO_ADDR
18163: GO 18130
18165: POP
18166: POP
// result := tmp ;
18167: LD_ADDR_VAR 0 5
18171: PUSH
18172: LD_VAR 0 8
18176: ST_TO_ADDR
// end ; end ;
18177: LD_VAR 0 5
18181: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18182: LD_INT 0
18184: PPUSH
18185: PPUSH
18186: PPUSH
18187: PPUSH
// if not list then
18188: LD_VAR 0 3
18192: NOT
18193: IFFALSE 18197
// exit ;
18195: GO 18587
// result := [ ] ;
18197: LD_ADDR_VAR 0 6
18201: PUSH
18202: EMPTY
18203: ST_TO_ADDR
// for i in list do
18204: LD_ADDR_VAR 0 7
18208: PUSH
18209: LD_VAR 0 3
18213: PUSH
18214: FOR_IN
18215: IFFALSE 18417
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18217: LD_ADDR_VAR 0 9
18221: PUSH
18222: LD_VAR 0 7
18226: PPUSH
18227: LD_VAR 0 1
18231: PPUSH
18232: LD_VAR 0 2
18236: PPUSH
18237: CALL_OW 297
18241: ST_TO_ADDR
// if not result then
18242: LD_VAR 0 6
18246: NOT
18247: IFFALSE 18273
// result := [ [ i , tmp ] ] else
18249: LD_ADDR_VAR 0 6
18253: PUSH
18254: LD_VAR 0 7
18258: PUSH
18259: LD_VAR 0 9
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: EMPTY
18269: LIST
18270: ST_TO_ADDR
18271: GO 18415
// begin if result [ result ] [ 2 ] <= tmp then
18273: LD_VAR 0 6
18277: PUSH
18278: LD_VAR 0 6
18282: ARRAY
18283: PUSH
18284: LD_INT 2
18286: ARRAY
18287: PUSH
18288: LD_VAR 0 9
18292: LESSEQUAL
18293: IFFALSE 18335
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18295: LD_ADDR_VAR 0 6
18299: PUSH
18300: LD_VAR 0 6
18304: PPUSH
18305: LD_VAR 0 6
18309: PUSH
18310: LD_INT 1
18312: PLUS
18313: PPUSH
18314: LD_VAR 0 7
18318: PUSH
18319: LD_VAR 0 9
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PPUSH
18328: CALL_OW 2
18332: ST_TO_ADDR
18333: GO 18415
// for j := 1 to result do
18335: LD_ADDR_VAR 0 8
18339: PUSH
18340: DOUBLE
18341: LD_INT 1
18343: DEC
18344: ST_TO_ADDR
18345: LD_VAR 0 6
18349: PUSH
18350: FOR_TO
18351: IFFALSE 18413
// begin if tmp < result [ j ] [ 2 ] then
18353: LD_VAR 0 9
18357: PUSH
18358: LD_VAR 0 6
18362: PUSH
18363: LD_VAR 0 8
18367: ARRAY
18368: PUSH
18369: LD_INT 2
18371: ARRAY
18372: LESS
18373: IFFALSE 18411
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18375: LD_ADDR_VAR 0 6
18379: PUSH
18380: LD_VAR 0 6
18384: PPUSH
18385: LD_VAR 0 8
18389: PPUSH
18390: LD_VAR 0 7
18394: PUSH
18395: LD_VAR 0 9
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PPUSH
18404: CALL_OW 2
18408: ST_TO_ADDR
// break ;
18409: GO 18413
// end ; end ;
18411: GO 18350
18413: POP
18414: POP
// end ; end ;
18415: GO 18214
18417: POP
18418: POP
// if result and not asc then
18419: LD_VAR 0 6
18423: IFFALSE 18432
18425: PUSH
18426: LD_VAR 0 4
18430: NOT
18431: AND
18432: IFFALSE 18507
// begin tmp := result ;
18434: LD_ADDR_VAR 0 9
18438: PUSH
18439: LD_VAR 0 6
18443: ST_TO_ADDR
// for i = tmp downto 1 do
18444: LD_ADDR_VAR 0 7
18448: PUSH
18449: DOUBLE
18450: LD_VAR 0 9
18454: INC
18455: ST_TO_ADDR
18456: LD_INT 1
18458: PUSH
18459: FOR_DOWNTO
18460: IFFALSE 18505
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18462: LD_ADDR_VAR 0 6
18466: PUSH
18467: LD_VAR 0 6
18471: PPUSH
18472: LD_VAR 0 9
18476: PUSH
18477: LD_VAR 0 7
18481: MINUS
18482: PUSH
18483: LD_INT 1
18485: PLUS
18486: PPUSH
18487: LD_VAR 0 9
18491: PUSH
18492: LD_VAR 0 7
18496: ARRAY
18497: PPUSH
18498: CALL_OW 1
18502: ST_TO_ADDR
18503: GO 18459
18505: POP
18506: POP
// end ; tmp := [ ] ;
18507: LD_ADDR_VAR 0 9
18511: PUSH
18512: EMPTY
18513: ST_TO_ADDR
// if mode then
18514: LD_VAR 0 5
18518: IFFALSE 18587
// begin for i = 1 to result do
18520: LD_ADDR_VAR 0 7
18524: PUSH
18525: DOUBLE
18526: LD_INT 1
18528: DEC
18529: ST_TO_ADDR
18530: LD_VAR 0 6
18534: PUSH
18535: FOR_TO
18536: IFFALSE 18575
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
18538: LD_ADDR_VAR 0 9
18542: PUSH
18543: LD_VAR 0 9
18547: PPUSH
18548: LD_VAR 0 7
18552: PPUSH
18553: LD_VAR 0 6
18557: PUSH
18558: LD_VAR 0 7
18562: ARRAY
18563: PUSH
18564: LD_INT 1
18566: ARRAY
18567: PPUSH
18568: CALL_OW 1
18572: ST_TO_ADDR
18573: GO 18535
18575: POP
18576: POP
// result := tmp ;
18577: LD_ADDR_VAR 0 6
18581: PUSH
18582: LD_VAR 0 9
18586: ST_TO_ADDR
// end ; end ;
18587: LD_VAR 0 6
18591: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
18592: LD_INT 0
18594: PPUSH
18595: PPUSH
18596: PPUSH
18597: PPUSH
18598: PPUSH
18599: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
18600: LD_ADDR_VAR 0 5
18604: PUSH
18605: LD_INT 0
18607: PUSH
18608: LD_INT 0
18610: PUSH
18611: LD_INT 0
18613: PUSH
18614: EMPTY
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: ST_TO_ADDR
// if not x or not y then
18622: LD_VAR 0 2
18626: NOT
18627: IFTRUE 18636
18629: PUSH
18630: LD_VAR 0 3
18634: NOT
18635: OR
18636: IFFALSE 18640
// exit ;
18638: GO 20296
// if not range then
18640: LD_VAR 0 4
18644: NOT
18645: IFFALSE 18655
// range := 10 ;
18647: LD_ADDR_VAR 0 4
18651: PUSH
18652: LD_INT 10
18654: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18655: LD_ADDR_VAR 0 8
18659: PUSH
18660: LD_INT 81
18662: PUSH
18663: LD_VAR 0 1
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 92
18674: PUSH
18675: LD_VAR 0 2
18679: PUSH
18680: LD_VAR 0 3
18684: PUSH
18685: LD_VAR 0 4
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 3
18698: PUSH
18699: LD_INT 21
18701: PUSH
18702: LD_INT 3
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: LIST
18717: PPUSH
18718: CALL_OW 69
18722: ST_TO_ADDR
// if not tmp then
18723: LD_VAR 0 8
18727: NOT
18728: IFFALSE 18732
// exit ;
18730: GO 20296
// for i in tmp do
18732: LD_ADDR_VAR 0 6
18736: PUSH
18737: LD_VAR 0 8
18741: PUSH
18742: FOR_IN
18743: IFFALSE 20271
// begin points := [ 0 , 0 , 0 ] ;
18745: LD_ADDR_VAR 0 9
18749: PUSH
18750: LD_INT 0
18752: PUSH
18753: LD_INT 0
18755: PUSH
18756: LD_INT 0
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: LIST
18763: ST_TO_ADDR
// bpoints := 1 ;
18764: LD_ADDR_VAR 0 10
18768: PUSH
18769: LD_INT 1
18771: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18772: LD_VAR 0 6
18776: PPUSH
18777: CALL_OW 247
18781: PUSH
18782: LD_INT 1
18784: DOUBLE
18785: EQUAL
18786: IFTRUE 18790
18788: GO 19372
18790: POP
// begin if GetClass ( i ) = 1 then
18791: LD_VAR 0 6
18795: PPUSH
18796: CALL_OW 257
18800: PUSH
18801: LD_INT 1
18803: EQUAL
18804: IFFALSE 18825
// points := [ 10 , 5 , 3 ] ;
18806: LD_ADDR_VAR 0 9
18810: PUSH
18811: LD_INT 10
18813: PUSH
18814: LD_INT 5
18816: PUSH
18817: LD_INT 3
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: LIST
18824: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18825: LD_VAR 0 6
18829: PPUSH
18830: CALL_OW 257
18834: PUSH
18835: LD_INT 2
18837: PUSH
18838: LD_INT 3
18840: PUSH
18841: LD_INT 4
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: LIST
18848: IN
18849: IFFALSE 18870
// points := [ 3 , 2 , 1 ] ;
18851: LD_ADDR_VAR 0 9
18855: PUSH
18856: LD_INT 3
18858: PUSH
18859: LD_INT 2
18861: PUSH
18862: LD_INT 1
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: LIST
18869: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18870: LD_VAR 0 6
18874: PPUSH
18875: CALL_OW 257
18879: PUSH
18880: LD_INT 5
18882: EQUAL
18883: IFFALSE 18904
// points := [ 130 , 5 , 2 ] ;
18885: LD_ADDR_VAR 0 9
18889: PUSH
18890: LD_INT 130
18892: PUSH
18893: LD_INT 5
18895: PUSH
18896: LD_INT 2
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: LIST
18903: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18904: LD_VAR 0 6
18908: PPUSH
18909: CALL_OW 257
18913: PUSH
18914: LD_INT 8
18916: EQUAL
18917: IFFALSE 18938
// points := [ 35 , 35 , 30 ] ;
18919: LD_ADDR_VAR 0 9
18923: PUSH
18924: LD_INT 35
18926: PUSH
18927: LD_INT 35
18929: PUSH
18930: LD_INT 30
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: LIST
18937: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18938: LD_VAR 0 6
18942: PPUSH
18943: CALL_OW 257
18947: PUSH
18948: LD_INT 9
18950: EQUAL
18951: IFFALSE 18972
// points := [ 20 , 55 , 40 ] ;
18953: LD_ADDR_VAR 0 9
18957: PUSH
18958: LD_INT 20
18960: PUSH
18961: LD_INT 55
18963: PUSH
18964: LD_INT 40
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18972: LD_VAR 0 6
18976: PPUSH
18977: CALL_OW 257
18981: PUSH
18982: LD_INT 12
18984: PUSH
18985: LD_INT 16
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: IN
18992: IFFALSE 19013
// points := [ 5 , 3 , 2 ] ;
18994: LD_ADDR_VAR 0 9
18998: PUSH
18999: LD_INT 5
19001: PUSH
19002: LD_INT 3
19004: PUSH
19005: LD_INT 2
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: LIST
19012: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19013: LD_VAR 0 6
19017: PPUSH
19018: CALL_OW 257
19022: PUSH
19023: LD_INT 17
19025: EQUAL
19026: IFFALSE 19047
// points := [ 100 , 50 , 75 ] ;
19028: LD_ADDR_VAR 0 9
19032: PUSH
19033: LD_INT 100
19035: PUSH
19036: LD_INT 50
19038: PUSH
19039: LD_INT 75
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: LIST
19046: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19047: LD_VAR 0 6
19051: PPUSH
19052: CALL_OW 257
19056: PUSH
19057: LD_INT 15
19059: EQUAL
19060: IFFALSE 19081
// points := [ 10 , 5 , 3 ] ;
19062: LD_ADDR_VAR 0 9
19066: PUSH
19067: LD_INT 10
19069: PUSH
19070: LD_INT 5
19072: PUSH
19073: LD_INT 3
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: LIST
19080: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19081: LD_VAR 0 6
19085: PPUSH
19086: CALL_OW 257
19090: PUSH
19091: LD_INT 14
19093: EQUAL
19094: IFFALSE 19115
// points := [ 10 , 0 , 0 ] ;
19096: LD_ADDR_VAR 0 9
19100: PUSH
19101: LD_INT 10
19103: PUSH
19104: LD_INT 0
19106: PUSH
19107: LD_INT 0
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: LIST
19114: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19115: LD_VAR 0 6
19119: PPUSH
19120: CALL_OW 257
19124: PUSH
19125: LD_INT 11
19127: EQUAL
19128: IFFALSE 19149
// points := [ 30 , 10 , 5 ] ;
19130: LD_ADDR_VAR 0 9
19134: PUSH
19135: LD_INT 30
19137: PUSH
19138: LD_INT 10
19140: PUSH
19141: LD_INT 5
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: LIST
19148: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19149: LD_VAR 0 1
19153: PPUSH
19154: LD_INT 5
19156: PPUSH
19157: CALL_OW 321
19161: PUSH
19162: LD_INT 2
19164: EQUAL
19165: IFFALSE 19182
// bpoints := bpoints * 1.8 ;
19167: LD_ADDR_VAR 0 10
19171: PUSH
19172: LD_VAR 0 10
19176: PUSH
19177: LD_REAL  1.80000000000000E+0000
19180: MUL
19181: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19182: LD_VAR 0 6
19186: PPUSH
19187: CALL_OW 257
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: LD_INT 2
19197: PUSH
19198: LD_INT 3
19200: PUSH
19201: LD_INT 4
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: IN
19210: IFFALSE 19230
19212: PUSH
19213: LD_VAR 0 1
19217: PPUSH
19218: LD_INT 51
19220: PPUSH
19221: CALL_OW 321
19225: PUSH
19226: LD_INT 2
19228: EQUAL
19229: AND
19230: IFFALSE 19247
// bpoints := bpoints * 1.2 ;
19232: LD_ADDR_VAR 0 10
19236: PUSH
19237: LD_VAR 0 10
19241: PUSH
19242: LD_REAL  1.20000000000000E+0000
19245: MUL
19246: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19247: LD_VAR 0 6
19251: PPUSH
19252: CALL_OW 257
19256: PUSH
19257: LD_INT 5
19259: PUSH
19260: LD_INT 7
19262: PUSH
19263: LD_INT 9
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: IN
19271: IFFALSE 19291
19273: PUSH
19274: LD_VAR 0 1
19278: PPUSH
19279: LD_INT 52
19281: PPUSH
19282: CALL_OW 321
19286: PUSH
19287: LD_INT 2
19289: EQUAL
19290: AND
19291: IFFALSE 19308
// bpoints := bpoints * 1.5 ;
19293: LD_ADDR_VAR 0 10
19297: PUSH
19298: LD_VAR 0 10
19302: PUSH
19303: LD_REAL  1.50000000000000E+0000
19306: MUL
19307: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19308: LD_VAR 0 1
19312: PPUSH
19313: LD_INT 66
19315: PPUSH
19316: CALL_OW 321
19320: PUSH
19321: LD_INT 2
19323: EQUAL
19324: IFFALSE 19341
// bpoints := bpoints * 1.1 ;
19326: LD_ADDR_VAR 0 10
19330: PUSH
19331: LD_VAR 0 10
19335: PUSH
19336: LD_REAL  1.10000000000000E+0000
19339: MUL
19340: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19341: LD_ADDR_VAR 0 10
19345: PUSH
19346: LD_VAR 0 10
19350: PUSH
19351: LD_VAR 0 6
19355: PPUSH
19356: LD_INT 1
19358: PPUSH
19359: CALL_OW 259
19363: PUSH
19364: LD_REAL  1.15000000000000E+0000
19367: MUL
19368: MUL
19369: ST_TO_ADDR
// end ; unit_vehicle :
19370: GO 20200
19372: LD_INT 2
19374: DOUBLE
19375: EQUAL
19376: IFTRUE 19380
19378: GO 20188
19380: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19381: LD_VAR 0 6
19385: PPUSH
19386: CALL_OW 264
19390: PUSH
19391: LD_INT 2
19393: PUSH
19394: LD_INT 42
19396: PUSH
19397: LD_INT 24
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: LIST
19404: IN
19405: IFFALSE 19426
// points := [ 25 , 5 , 3 ] ;
19407: LD_ADDR_VAR 0 9
19411: PUSH
19412: LD_INT 25
19414: PUSH
19415: LD_INT 5
19417: PUSH
19418: LD_INT 3
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: LIST
19425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19426: LD_VAR 0 6
19430: PPUSH
19431: CALL_OW 264
19435: PUSH
19436: LD_INT 4
19438: PUSH
19439: LD_INT 43
19441: PUSH
19442: LD_INT 25
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: LIST
19449: IN
19450: IFFALSE 19471
// points := [ 40 , 15 , 5 ] ;
19452: LD_ADDR_VAR 0 9
19456: PUSH
19457: LD_INT 40
19459: PUSH
19460: LD_INT 15
19462: PUSH
19463: LD_INT 5
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: LIST
19470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19471: LD_VAR 0 6
19475: PPUSH
19476: CALL_OW 264
19480: PUSH
19481: LD_INT 3
19483: PUSH
19484: LD_INT 23
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: IN
19491: IFFALSE 19512
// points := [ 7 , 25 , 8 ] ;
19493: LD_ADDR_VAR 0 9
19497: PUSH
19498: LD_INT 7
19500: PUSH
19501: LD_INT 25
19503: PUSH
19504: LD_INT 8
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: LIST
19511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19512: LD_VAR 0 6
19516: PPUSH
19517: CALL_OW 264
19521: PUSH
19522: LD_INT 5
19524: PUSH
19525: LD_INT 27
19527: PUSH
19528: LD_INT 44
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: LIST
19535: IN
19536: IFFALSE 19557
// points := [ 14 , 50 , 16 ] ;
19538: LD_ADDR_VAR 0 9
19542: PUSH
19543: LD_INT 14
19545: PUSH
19546: LD_INT 50
19548: PUSH
19549: LD_INT 16
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
19557: LD_VAR 0 6
19561: PPUSH
19562: CALL_OW 264
19566: PUSH
19567: LD_INT 6
19569: PUSH
19570: LD_INT 46
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: IN
19577: IFFALSE 19598
// points := [ 32 , 120 , 70 ] ;
19579: LD_ADDR_VAR 0 9
19583: PUSH
19584: LD_INT 32
19586: PUSH
19587: LD_INT 120
19589: PUSH
19590: LD_INT 70
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: LIST
19597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
19598: LD_VAR 0 6
19602: PPUSH
19603: CALL_OW 264
19607: PUSH
19608: LD_INT 7
19610: PUSH
19611: LD_INT 28
19613: PUSH
19614: LD_INT 45
19616: PUSH
19617: LD_INT 92
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: IN
19626: IFFALSE 19647
// points := [ 35 , 20 , 45 ] ;
19628: LD_ADDR_VAR 0 9
19632: PUSH
19633: LD_INT 35
19635: PUSH
19636: LD_INT 20
19638: PUSH
19639: LD_INT 45
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: LIST
19646: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
19647: LD_VAR 0 6
19651: PPUSH
19652: CALL_OW 264
19656: PUSH
19657: LD_INT 47
19659: PUSH
19660: EMPTY
19661: LIST
19662: IN
19663: IFFALSE 19684
// points := [ 67 , 45 , 75 ] ;
19665: LD_ADDR_VAR 0 9
19669: PUSH
19670: LD_INT 67
19672: PUSH
19673: LD_INT 45
19675: PUSH
19676: LD_INT 75
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: LIST
19683: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
19684: LD_VAR 0 6
19688: PPUSH
19689: CALL_OW 264
19693: PUSH
19694: LD_INT 26
19696: PUSH
19697: EMPTY
19698: LIST
19699: IN
19700: IFFALSE 19721
// points := [ 120 , 30 , 80 ] ;
19702: LD_ADDR_VAR 0 9
19706: PUSH
19707: LD_INT 120
19709: PUSH
19710: LD_INT 30
19712: PUSH
19713: LD_INT 80
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: LIST
19720: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19721: LD_VAR 0 6
19725: PPUSH
19726: CALL_OW 264
19730: PUSH
19731: LD_INT 22
19733: PUSH
19734: EMPTY
19735: LIST
19736: IN
19737: IFFALSE 19758
// points := [ 40 , 1 , 1 ] ;
19739: LD_ADDR_VAR 0 9
19743: PUSH
19744: LD_INT 40
19746: PUSH
19747: LD_INT 1
19749: PUSH
19750: LD_INT 1
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19758: LD_VAR 0 6
19762: PPUSH
19763: CALL_OW 264
19767: PUSH
19768: LD_INT 29
19770: PUSH
19771: EMPTY
19772: LIST
19773: IN
19774: IFFALSE 19795
// points := [ 70 , 200 , 400 ] ;
19776: LD_ADDR_VAR 0 9
19780: PUSH
19781: LD_INT 70
19783: PUSH
19784: LD_INT 200
19786: PUSH
19787: LD_INT 400
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: LIST
19794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19795: LD_VAR 0 6
19799: PPUSH
19800: CALL_OW 264
19804: PUSH
19805: LD_INT 14
19807: PUSH
19808: LD_INT 53
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: IN
19815: IFFALSE 19836
// points := [ 40 , 10 , 20 ] ;
19817: LD_ADDR_VAR 0 9
19821: PUSH
19822: LD_INT 40
19824: PUSH
19825: LD_INT 10
19827: PUSH
19828: LD_INT 20
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: LIST
19835: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19836: LD_VAR 0 6
19840: PPUSH
19841: CALL_OW 264
19845: PUSH
19846: LD_INT 9
19848: PUSH
19849: EMPTY
19850: LIST
19851: IN
19852: IFFALSE 19873
// points := [ 5 , 70 , 20 ] ;
19854: LD_ADDR_VAR 0 9
19858: PUSH
19859: LD_INT 5
19861: PUSH
19862: LD_INT 70
19864: PUSH
19865: LD_INT 20
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: LIST
19872: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19873: LD_VAR 0 6
19877: PPUSH
19878: CALL_OW 264
19882: PUSH
19883: LD_INT 10
19885: PUSH
19886: EMPTY
19887: LIST
19888: IN
19889: IFFALSE 19910
// points := [ 35 , 110 , 70 ] ;
19891: LD_ADDR_VAR 0 9
19895: PUSH
19896: LD_INT 35
19898: PUSH
19899: LD_INT 110
19901: PUSH
19902: LD_INT 70
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: LIST
19909: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19910: LD_VAR 0 6
19914: PPUSH
19915: CALL_OW 265
19919: PUSH
19920: LD_INT 25
19922: EQUAL
19923: IFFALSE 19944
// points := [ 80 , 65 , 100 ] ;
19925: LD_ADDR_VAR 0 9
19929: PUSH
19930: LD_INT 80
19932: PUSH
19933: LD_INT 65
19935: PUSH
19936: LD_INT 100
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: LIST
19943: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19944: LD_VAR 0 6
19948: PPUSH
19949: CALL_OW 263
19953: PUSH
19954: LD_INT 1
19956: EQUAL
19957: IFFALSE 19992
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19959: LD_ADDR_VAR 0 10
19963: PUSH
19964: LD_VAR 0 10
19968: PUSH
19969: LD_VAR 0 6
19973: PPUSH
19974: CALL_OW 311
19978: PPUSH
19979: LD_INT 3
19981: PPUSH
19982: CALL_OW 259
19986: PUSH
19987: LD_INT 4
19989: MUL
19990: MUL
19991: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19992: LD_VAR 0 6
19996: PPUSH
19997: CALL_OW 263
20001: PUSH
20002: LD_INT 2
20004: EQUAL
20005: IFFALSE 20056
// begin j := IsControledBy ( i ) ;
20007: LD_ADDR_VAR 0 7
20011: PUSH
20012: LD_VAR 0 6
20016: PPUSH
20017: CALL_OW 312
20021: ST_TO_ADDR
// if j then
20022: LD_VAR 0 7
20026: IFFALSE 20056
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20028: LD_ADDR_VAR 0 10
20032: PUSH
20033: LD_VAR 0 10
20037: PUSH
20038: LD_VAR 0 7
20042: PPUSH
20043: LD_INT 3
20045: PPUSH
20046: CALL_OW 259
20050: PUSH
20051: LD_INT 3
20053: MUL
20054: MUL
20055: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20056: LD_VAR 0 6
20060: PPUSH
20061: CALL_OW 264
20065: PUSH
20066: LD_INT 5
20068: PUSH
20069: LD_INT 6
20071: PUSH
20072: LD_INT 46
20074: PUSH
20075: LD_INT 44
20077: PUSH
20078: LD_INT 47
20080: PUSH
20081: LD_INT 45
20083: PUSH
20084: LD_INT 28
20086: PUSH
20087: LD_INT 7
20089: PUSH
20090: LD_INT 27
20092: PUSH
20093: LD_INT 29
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: IN
20108: IFFALSE 20128
20110: PUSH
20111: LD_VAR 0 1
20115: PPUSH
20116: LD_INT 52
20118: PPUSH
20119: CALL_OW 321
20123: PUSH
20124: LD_INT 2
20126: EQUAL
20127: AND
20128: IFFALSE 20145
// bpoints := bpoints * 1.2 ;
20130: LD_ADDR_VAR 0 10
20134: PUSH
20135: LD_VAR 0 10
20139: PUSH
20140: LD_REAL  1.20000000000000E+0000
20143: MUL
20144: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20145: LD_VAR 0 6
20149: PPUSH
20150: CALL_OW 264
20154: PUSH
20155: LD_INT 6
20157: PUSH
20158: LD_INT 46
20160: PUSH
20161: LD_INT 47
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: LIST
20168: IN
20169: IFFALSE 20186
// bpoints := bpoints * 1.2 ;
20171: LD_ADDR_VAR 0 10
20175: PUSH
20176: LD_VAR 0 10
20180: PUSH
20181: LD_REAL  1.20000000000000E+0000
20184: MUL
20185: ST_TO_ADDR
// end ; unit_building :
20186: GO 20200
20188: LD_INT 3
20190: DOUBLE
20191: EQUAL
20192: IFTRUE 20196
20194: GO 20199
20196: POP
// ; end ;
20197: GO 20200
20199: POP
// for j = 1 to 3 do
20200: LD_ADDR_VAR 0 7
20204: PUSH
20205: DOUBLE
20206: LD_INT 1
20208: DEC
20209: ST_TO_ADDR
20210: LD_INT 3
20212: PUSH
20213: FOR_TO
20214: IFFALSE 20267
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20216: LD_ADDR_VAR 0 5
20220: PUSH
20221: LD_VAR 0 5
20225: PPUSH
20226: LD_VAR 0 7
20230: PPUSH
20231: LD_VAR 0 5
20235: PUSH
20236: LD_VAR 0 7
20240: ARRAY
20241: PUSH
20242: LD_VAR 0 9
20246: PUSH
20247: LD_VAR 0 7
20251: ARRAY
20252: PUSH
20253: LD_VAR 0 10
20257: MUL
20258: PLUS
20259: PPUSH
20260: CALL_OW 1
20264: ST_TO_ADDR
20265: GO 20213
20267: POP
20268: POP
// end ;
20269: GO 18742
20271: POP
20272: POP
// result := Replace ( result , 4 , tmp ) ;
20273: LD_ADDR_VAR 0 5
20277: PUSH
20278: LD_VAR 0 5
20282: PPUSH
20283: LD_INT 4
20285: PPUSH
20286: LD_VAR 0 8
20290: PPUSH
20291: CALL_OW 1
20295: ST_TO_ADDR
// end ;
20296: LD_VAR 0 5
20300: RET
// export function DangerAtRange ( unit , range ) ; begin
20301: LD_INT 0
20303: PPUSH
// if not unit then
20304: LD_VAR 0 1
20308: NOT
20309: IFFALSE 20313
// exit ;
20311: GO 20358
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20313: LD_ADDR_VAR 0 3
20317: PUSH
20318: LD_VAR 0 1
20322: PPUSH
20323: CALL_OW 255
20327: PPUSH
20328: LD_VAR 0 1
20332: PPUSH
20333: CALL_OW 250
20337: PPUSH
20338: LD_VAR 0 1
20342: PPUSH
20343: CALL_OW 251
20347: PPUSH
20348: LD_VAR 0 2
20352: PPUSH
20353: CALL 18592 0 4
20357: ST_TO_ADDR
// end ;
20358: LD_VAR 0 3
20362: RET
// export function DangerInArea ( side , area ) ; begin
20363: LD_INT 0
20365: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20366: LD_ADDR_VAR 0 3
20370: PUSH
20371: LD_VAR 0 2
20375: PPUSH
20376: LD_INT 81
20378: PUSH
20379: LD_VAR 0 1
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PPUSH
20388: CALL_OW 70
20392: ST_TO_ADDR
// end ;
20393: LD_VAR 0 3
20397: RET
// export function IsExtension ( b ) ; begin
20398: LD_INT 0
20400: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20401: LD_ADDR_VAR 0 2
20405: PUSH
20406: LD_VAR 0 1
20410: PUSH
20411: LD_INT 23
20413: PUSH
20414: LD_INT 20
20416: PUSH
20417: LD_INT 22
20419: PUSH
20420: LD_INT 17
20422: PUSH
20423: LD_INT 24
20425: PUSH
20426: LD_INT 21
20428: PUSH
20429: LD_INT 19
20431: PUSH
20432: LD_INT 16
20434: PUSH
20435: LD_INT 25
20437: PUSH
20438: LD_INT 18
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: IN
20453: ST_TO_ADDR
// end ;
20454: LD_VAR 0 2
20458: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
20459: LD_INT 0
20461: PPUSH
20462: PPUSH
20463: PPUSH
// result := [ ] ;
20464: LD_ADDR_VAR 0 4
20468: PUSH
20469: EMPTY
20470: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
20471: LD_ADDR_VAR 0 5
20475: PUSH
20476: LD_VAR 0 2
20480: PPUSH
20481: LD_INT 21
20483: PUSH
20484: LD_INT 3
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PPUSH
20491: CALL_OW 70
20495: ST_TO_ADDR
// if not tmp then
20496: LD_VAR 0 5
20500: NOT
20501: IFFALSE 20505
// exit ;
20503: GO 20569
// if checkLink then
20505: LD_VAR 0 3
20509: IFFALSE 20559
// begin for i in tmp do
20511: LD_ADDR_VAR 0 6
20515: PUSH
20516: LD_VAR 0 5
20520: PUSH
20521: FOR_IN
20522: IFFALSE 20557
// if GetBase ( i ) <> base then
20524: LD_VAR 0 6
20528: PPUSH
20529: CALL_OW 274
20533: PUSH
20534: LD_VAR 0 1
20538: NONEQUAL
20539: IFFALSE 20555
// ComLinkToBase ( base , i ) ;
20541: LD_VAR 0 1
20545: PPUSH
20546: LD_VAR 0 6
20550: PPUSH
20551: CALL_OW 169
20555: GO 20521
20557: POP
20558: POP
// end ; result := tmp ;
20559: LD_ADDR_VAR 0 4
20563: PUSH
20564: LD_VAR 0 5
20568: ST_TO_ADDR
// end ;
20569: LD_VAR 0 4
20573: RET
// export function ComComplete ( units , b ) ; var i ; begin
20574: LD_INT 0
20576: PPUSH
20577: PPUSH
// if not units then
20578: LD_VAR 0 1
20582: NOT
20583: IFFALSE 20587
// exit ;
20585: GO 20677
// for i in units do
20587: LD_ADDR_VAR 0 4
20591: PUSH
20592: LD_VAR 0 1
20596: PUSH
20597: FOR_IN
20598: IFFALSE 20675
// if BuildingStatus ( b ) = bs_build then
20600: LD_VAR 0 2
20604: PPUSH
20605: CALL_OW 461
20609: PUSH
20610: LD_INT 1
20612: EQUAL
20613: IFFALSE 20673
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20615: LD_VAR 0 4
20619: PPUSH
20620: LD_STRING h
20622: PUSH
20623: LD_VAR 0 2
20627: PPUSH
20628: CALL_OW 250
20632: PUSH
20633: LD_VAR 0 2
20637: PPUSH
20638: CALL_OW 251
20642: PUSH
20643: LD_VAR 0 2
20647: PUSH
20648: LD_INT 0
20650: PUSH
20651: LD_INT 0
20653: PUSH
20654: LD_INT 0
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: PUSH
20666: EMPTY
20667: LIST
20668: PPUSH
20669: CALL_OW 446
20673: GO 20597
20675: POP
20676: POP
// end ;
20677: LD_VAR 0 3
20681: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
20682: LD_INT 0
20684: PPUSH
20685: PPUSH
20686: PPUSH
20687: PPUSH
20688: PPUSH
20689: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
20690: LD_VAR 0 1
20694: NOT
20695: IFTRUE 20712
20697: PUSH
20698: LD_VAR 0 1
20702: PPUSH
20703: CALL_OW 263
20707: PUSH
20708: LD_INT 2
20710: NONEQUAL
20711: OR
20712: IFFALSE 20716
// exit ;
20714: GO 21032
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
20716: LD_ADDR_VAR 0 6
20720: PUSH
20721: LD_INT 22
20723: PUSH
20724: LD_VAR 0 1
20728: PPUSH
20729: CALL_OW 255
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 2
20740: PUSH
20741: LD_INT 30
20743: PUSH
20744: LD_INT 36
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 34
20753: PUSH
20754: LD_INT 31
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: LIST
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PPUSH
20770: CALL_OW 69
20774: ST_TO_ADDR
// if not tmp then
20775: LD_VAR 0 6
20779: NOT
20780: IFFALSE 20784
// exit ;
20782: GO 21032
// result := [ ] ;
20784: LD_ADDR_VAR 0 2
20788: PUSH
20789: EMPTY
20790: ST_TO_ADDR
// for i in tmp do
20791: LD_ADDR_VAR 0 3
20795: PUSH
20796: LD_VAR 0 6
20800: PUSH
20801: FOR_IN
20802: IFFALSE 20873
// begin t := UnitsInside ( i ) ;
20804: LD_ADDR_VAR 0 4
20808: PUSH
20809: LD_VAR 0 3
20813: PPUSH
20814: CALL_OW 313
20818: ST_TO_ADDR
// if t then
20819: LD_VAR 0 4
20823: IFFALSE 20871
// for j in t do
20825: LD_ADDR_VAR 0 7
20829: PUSH
20830: LD_VAR 0 4
20834: PUSH
20835: FOR_IN
20836: IFFALSE 20869
// result := Replace ( result , result + 1 , j ) ;
20838: LD_ADDR_VAR 0 2
20842: PUSH
20843: LD_VAR 0 2
20847: PPUSH
20848: LD_VAR 0 2
20852: PUSH
20853: LD_INT 1
20855: PLUS
20856: PPUSH
20857: LD_VAR 0 7
20861: PPUSH
20862: CALL_OW 1
20866: ST_TO_ADDR
20867: GO 20835
20869: POP
20870: POP
// end ;
20871: GO 20801
20873: POP
20874: POP
// if not result then
20875: LD_VAR 0 2
20879: NOT
20880: IFFALSE 20884
// exit ;
20882: GO 21032
// mech := result [ 1 ] ;
20884: LD_ADDR_VAR 0 5
20888: PUSH
20889: LD_VAR 0 2
20893: PUSH
20894: LD_INT 1
20896: ARRAY
20897: ST_TO_ADDR
// if result > 1 then
20898: LD_VAR 0 2
20902: PUSH
20903: LD_INT 1
20905: GREATER
20906: IFFALSE 21018
// begin for i = 2 to result do
20908: LD_ADDR_VAR 0 3
20912: PUSH
20913: DOUBLE
20914: LD_INT 2
20916: DEC
20917: ST_TO_ADDR
20918: LD_VAR 0 2
20922: PUSH
20923: FOR_TO
20924: IFFALSE 21016
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20926: LD_ADDR_VAR 0 4
20930: PUSH
20931: LD_VAR 0 2
20935: PUSH
20936: LD_VAR 0 3
20940: ARRAY
20941: PPUSH
20942: LD_INT 3
20944: PPUSH
20945: CALL_OW 259
20949: PUSH
20950: LD_VAR 0 2
20954: PUSH
20955: LD_VAR 0 3
20959: ARRAY
20960: PPUSH
20961: CALL_OW 432
20965: MINUS
20966: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20967: LD_VAR 0 4
20971: PUSH
20972: LD_VAR 0 5
20976: PPUSH
20977: LD_INT 3
20979: PPUSH
20980: CALL_OW 259
20984: PUSH
20985: LD_VAR 0 5
20989: PPUSH
20990: CALL_OW 432
20994: MINUS
20995: GREATEREQUAL
20996: IFFALSE 21014
// mech := result [ i ] ;
20998: LD_ADDR_VAR 0 5
21002: PUSH
21003: LD_VAR 0 2
21007: PUSH
21008: LD_VAR 0 3
21012: ARRAY
21013: ST_TO_ADDR
// end ;
21014: GO 20923
21016: POP
21017: POP
// end ; ComLinkTo ( vehicle , mech ) ;
21018: LD_VAR 0 1
21022: PPUSH
21023: LD_VAR 0 5
21027: PPUSH
21028: CALL_OW 135
// end ;
21032: LD_VAR 0 2
21036: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21037: LD_INT 0
21039: PPUSH
21040: PPUSH
21041: PPUSH
21042: PPUSH
21043: PPUSH
21044: PPUSH
21045: PPUSH
21046: PPUSH
21047: PPUSH
21048: PPUSH
21049: PPUSH
21050: PPUSH
21051: PPUSH
// result := [ ] ;
21052: LD_ADDR_VAR 0 7
21056: PUSH
21057: EMPTY
21058: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21059: LD_VAR 0 1
21063: PPUSH
21064: CALL_OW 266
21068: PUSH
21069: LD_INT 0
21071: PUSH
21072: LD_INT 1
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: IN
21079: NOT
21080: IFFALSE 21084
// exit ;
21082: GO 22724
// if name then
21084: LD_VAR 0 3
21088: IFFALSE 21104
// SetBName ( base_dep , name ) ;
21090: LD_VAR 0 1
21094: PPUSH
21095: LD_VAR 0 3
21099: PPUSH
21100: CALL_OW 500
// base := GetBase ( base_dep ) ;
21104: LD_ADDR_VAR 0 15
21108: PUSH
21109: LD_VAR 0 1
21113: PPUSH
21114: CALL_OW 274
21118: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21119: LD_ADDR_VAR 0 16
21123: PUSH
21124: LD_VAR 0 1
21128: PPUSH
21129: CALL_OW 255
21133: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21134: LD_ADDR_VAR 0 17
21138: PUSH
21139: LD_VAR 0 1
21143: PPUSH
21144: CALL_OW 248
21148: ST_TO_ADDR
// if sources then
21149: LD_VAR 0 5
21153: IFFALSE 21200
// for i = 1 to 3 do
21155: LD_ADDR_VAR 0 8
21159: PUSH
21160: DOUBLE
21161: LD_INT 1
21163: DEC
21164: ST_TO_ADDR
21165: LD_INT 3
21167: PUSH
21168: FOR_TO
21169: IFFALSE 21198
// AddResourceType ( base , i , sources [ i ] ) ;
21171: LD_VAR 0 15
21175: PPUSH
21176: LD_VAR 0 8
21180: PPUSH
21181: LD_VAR 0 5
21185: PUSH
21186: LD_VAR 0 8
21190: ARRAY
21191: PPUSH
21192: CALL_OW 276
21196: GO 21168
21198: POP
21199: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
21200: LD_ADDR_VAR 0 18
21204: PUSH
21205: LD_VAR 0 15
21209: PPUSH
21210: LD_VAR 0 2
21214: PPUSH
21215: LD_INT 1
21217: PPUSH
21218: CALL 20459 0 3
21222: ST_TO_ADDR
// InitHc ;
21223: CALL_OW 19
// InitUc ;
21227: CALL_OW 18
// uc_side := side ;
21231: LD_ADDR_OWVAR 20
21235: PUSH
21236: LD_VAR 0 16
21240: ST_TO_ADDR
// uc_nation := nation ;
21241: LD_ADDR_OWVAR 21
21245: PUSH
21246: LD_VAR 0 17
21250: ST_TO_ADDR
// if buildings then
21251: LD_VAR 0 18
21255: IFFALSE 22583
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21257: LD_ADDR_VAR 0 19
21261: PUSH
21262: LD_VAR 0 18
21266: PPUSH
21267: LD_INT 2
21269: PUSH
21270: LD_INT 30
21272: PUSH
21273: LD_INT 29
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 30
21282: PUSH
21283: LD_INT 30
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: LIST
21294: PPUSH
21295: CALL_OW 72
21299: ST_TO_ADDR
// if tmp then
21300: LD_VAR 0 19
21304: IFFALSE 21352
// for i in tmp do
21306: LD_ADDR_VAR 0 8
21310: PUSH
21311: LD_VAR 0 19
21315: PUSH
21316: FOR_IN
21317: IFFALSE 21350
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21319: LD_VAR 0 8
21323: PPUSH
21324: CALL_OW 250
21328: PPUSH
21329: LD_VAR 0 8
21333: PPUSH
21334: CALL_OW 251
21338: PPUSH
21339: LD_VAR 0 16
21343: PPUSH
21344: CALL_OW 441
21348: GO 21316
21350: POP
21351: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21352: LD_VAR 0 18
21356: PPUSH
21357: LD_INT 2
21359: PUSH
21360: LD_INT 30
21362: PUSH
21363: LD_INT 32
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 30
21372: PUSH
21373: LD_INT 33
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: LIST
21384: PPUSH
21385: CALL_OW 72
21389: IFFALSE 21477
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21391: LD_ADDR_VAR 0 8
21395: PUSH
21396: LD_VAR 0 18
21400: PPUSH
21401: LD_INT 2
21403: PUSH
21404: LD_INT 30
21406: PUSH
21407: LD_INT 32
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 30
21416: PUSH
21417: LD_INT 33
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: LIST
21428: PPUSH
21429: CALL_OW 72
21433: PUSH
21434: FOR_IN
21435: IFFALSE 21475
// begin if not GetBWeapon ( i ) then
21437: LD_VAR 0 8
21441: PPUSH
21442: CALL_OW 269
21446: NOT
21447: IFFALSE 21473
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21449: LD_VAR 0 8
21453: PPUSH
21454: LD_VAR 0 8
21458: PPUSH
21459: LD_VAR 0 2
21463: PPUSH
21464: CALL 22729 0 2
21468: PPUSH
21469: CALL_OW 431
// end ;
21473: GO 21434
21475: POP
21476: POP
// end ; for i = 1 to personel do
21477: LD_ADDR_VAR 0 8
21481: PUSH
21482: DOUBLE
21483: LD_INT 1
21485: DEC
21486: ST_TO_ADDR
21487: LD_VAR 0 6
21491: PUSH
21492: FOR_TO
21493: IFFALSE 22563
// begin if i > 4 then
21495: LD_VAR 0 8
21499: PUSH
21500: LD_INT 4
21502: GREATER
21503: IFFALSE 21507
// break ;
21505: GO 22563
// case i of 1 :
21507: LD_VAR 0 8
21511: PUSH
21512: LD_INT 1
21514: DOUBLE
21515: EQUAL
21516: IFTRUE 21520
21518: GO 21600
21520: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
21521: LD_ADDR_VAR 0 12
21525: PUSH
21526: LD_VAR 0 18
21530: PPUSH
21531: LD_INT 22
21533: PUSH
21534: LD_VAR 0 16
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 58
21545: PUSH
21546: EMPTY
21547: LIST
21548: PUSH
21549: LD_INT 2
21551: PUSH
21552: LD_INT 30
21554: PUSH
21555: LD_INT 32
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 30
21564: PUSH
21565: LD_INT 4
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 30
21574: PUSH
21575: LD_INT 5
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: PPUSH
21593: CALL_OW 72
21597: ST_TO_ADDR
21598: GO 21822
21600: LD_INT 2
21602: DOUBLE
21603: EQUAL
21604: IFTRUE 21608
21606: GO 21670
21608: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
21609: LD_ADDR_VAR 0 12
21613: PUSH
21614: LD_VAR 0 18
21618: PPUSH
21619: LD_INT 22
21621: PUSH
21622: LD_VAR 0 16
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 2
21633: PUSH
21634: LD_INT 30
21636: PUSH
21637: LD_INT 0
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 30
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: LIST
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PPUSH
21663: CALL_OW 72
21667: ST_TO_ADDR
21668: GO 21822
21670: LD_INT 3
21672: DOUBLE
21673: EQUAL
21674: IFTRUE 21678
21676: GO 21740
21678: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
21679: LD_ADDR_VAR 0 12
21683: PUSH
21684: LD_VAR 0 18
21688: PPUSH
21689: LD_INT 22
21691: PUSH
21692: LD_VAR 0 16
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 2
21703: PUSH
21704: LD_INT 30
21706: PUSH
21707: LD_INT 2
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 30
21716: PUSH
21717: LD_INT 3
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: LIST
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PPUSH
21733: CALL_OW 72
21737: ST_TO_ADDR
21738: GO 21822
21740: LD_INT 4
21742: DOUBLE
21743: EQUAL
21744: IFTRUE 21748
21746: GO 21821
21748: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21749: LD_ADDR_VAR 0 12
21753: PUSH
21754: LD_VAR 0 18
21758: PPUSH
21759: LD_INT 22
21761: PUSH
21762: LD_VAR 0 16
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 2
21773: PUSH
21774: LD_INT 30
21776: PUSH
21777: LD_INT 6
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 30
21786: PUSH
21787: LD_INT 7
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 30
21796: PUSH
21797: LD_INT 8
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PPUSH
21814: CALL_OW 72
21818: ST_TO_ADDR
21819: GO 21822
21821: POP
// if i = 1 then
21822: LD_VAR 0 8
21826: PUSH
21827: LD_INT 1
21829: EQUAL
21830: IFFALSE 21941
// begin tmp := [ ] ;
21832: LD_ADDR_VAR 0 19
21836: PUSH
21837: EMPTY
21838: ST_TO_ADDR
// for j in f do
21839: LD_ADDR_VAR 0 9
21843: PUSH
21844: LD_VAR 0 12
21848: PUSH
21849: FOR_IN
21850: IFFALSE 21923
// if GetBType ( j ) = b_bunker then
21852: LD_VAR 0 9
21856: PPUSH
21857: CALL_OW 266
21861: PUSH
21862: LD_INT 32
21864: EQUAL
21865: IFFALSE 21892
// tmp := Insert ( tmp , 1 , j ) else
21867: LD_ADDR_VAR 0 19
21871: PUSH
21872: LD_VAR 0 19
21876: PPUSH
21877: LD_INT 1
21879: PPUSH
21880: LD_VAR 0 9
21884: PPUSH
21885: CALL_OW 2
21889: ST_TO_ADDR
21890: GO 21921
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21892: LD_ADDR_VAR 0 19
21896: PUSH
21897: LD_VAR 0 19
21901: PPUSH
21902: LD_VAR 0 19
21906: PUSH
21907: LD_INT 1
21909: PLUS
21910: PPUSH
21911: LD_VAR 0 9
21915: PPUSH
21916: CALL_OW 2
21920: ST_TO_ADDR
21921: GO 21849
21923: POP
21924: POP
// if tmp then
21925: LD_VAR 0 19
21929: IFFALSE 21941
// f := tmp ;
21931: LD_ADDR_VAR 0 12
21935: PUSH
21936: LD_VAR 0 19
21940: ST_TO_ADDR
// end ; x := personel [ i ] ;
21941: LD_ADDR_VAR 0 13
21945: PUSH
21946: LD_VAR 0 6
21950: PUSH
21951: LD_VAR 0 8
21955: ARRAY
21956: ST_TO_ADDR
// if x = - 1 then
21957: LD_VAR 0 13
21961: PUSH
21962: LD_INT 1
21964: NEG
21965: EQUAL
21966: IFFALSE 22177
// begin for j in f do
21968: LD_ADDR_VAR 0 9
21972: PUSH
21973: LD_VAR 0 12
21977: PUSH
21978: FOR_IN
21979: IFFALSE 22173
// repeat InitHc ;
21981: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21985: LD_VAR 0 9
21989: PPUSH
21990: CALL_OW 266
21994: PUSH
21995: LD_INT 5
21997: EQUAL
21998: IFFALSE 22068
// begin if UnitsInside ( j ) < 3 then
22000: LD_VAR 0 9
22004: PPUSH
22005: CALL_OW 313
22009: PUSH
22010: LD_INT 3
22012: LESS
22013: IFFALSE 22049
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22015: LD_INT 0
22017: PPUSH
22018: LD_INT 5
22020: PUSH
22021: LD_INT 8
22023: PUSH
22024: LD_INT 9
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: LIST
22031: PUSH
22032: LD_VAR 0 17
22036: ARRAY
22037: PPUSH
22038: LD_VAR 0 4
22042: PPUSH
22043: CALL_OW 380
22047: GO 22066
// PrepareHuman ( false , i , skill ) ;
22049: LD_INT 0
22051: PPUSH
22052: LD_VAR 0 8
22056: PPUSH
22057: LD_VAR 0 4
22061: PPUSH
22062: CALL_OW 380
// end else
22066: GO 22085
// PrepareHuman ( false , i , skill ) ;
22068: LD_INT 0
22070: PPUSH
22071: LD_VAR 0 8
22075: PPUSH
22076: LD_VAR 0 4
22080: PPUSH
22081: CALL_OW 380
// un := CreateHuman ;
22085: LD_ADDR_VAR 0 14
22089: PUSH
22090: CALL_OW 44
22094: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22095: LD_ADDR_VAR 0 7
22099: PUSH
22100: LD_VAR 0 7
22104: PPUSH
22105: LD_INT 1
22107: PPUSH
22108: LD_VAR 0 14
22112: PPUSH
22113: CALL_OW 2
22117: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22118: LD_VAR 0 14
22122: PPUSH
22123: LD_VAR 0 9
22127: PPUSH
22128: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22132: LD_VAR 0 9
22136: PPUSH
22137: CALL_OW 313
22141: PUSH
22142: LD_INT 6
22144: EQUAL
22145: IFTRUE 22169
22147: PUSH
22148: LD_VAR 0 9
22152: PPUSH
22153: CALL_OW 266
22157: PUSH
22158: LD_INT 32
22160: PUSH
22161: LD_INT 31
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: IN
22168: OR
22169: IFFALSE 21981
22171: GO 21978
22173: POP
22174: POP
// end else
22175: GO 22561
// for j = 1 to x do
22177: LD_ADDR_VAR 0 9
22181: PUSH
22182: DOUBLE
22183: LD_INT 1
22185: DEC
22186: ST_TO_ADDR
22187: LD_VAR 0 13
22191: PUSH
22192: FOR_TO
22193: IFFALSE 22559
// begin InitHc ;
22195: CALL_OW 19
// if not f then
22199: LD_VAR 0 12
22203: NOT
22204: IFFALSE 22293
// begin PrepareHuman ( false , i , skill ) ;
22206: LD_INT 0
22208: PPUSH
22209: LD_VAR 0 8
22213: PPUSH
22214: LD_VAR 0 4
22218: PPUSH
22219: CALL_OW 380
// un := CreateHuman ;
22223: LD_ADDR_VAR 0 14
22227: PUSH
22228: CALL_OW 44
22232: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22233: LD_ADDR_VAR 0 7
22237: PUSH
22238: LD_VAR 0 7
22242: PPUSH
22243: LD_INT 1
22245: PPUSH
22246: LD_VAR 0 14
22250: PPUSH
22251: CALL_OW 2
22255: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22256: LD_VAR 0 14
22260: PPUSH
22261: LD_VAR 0 1
22265: PPUSH
22266: CALL_OW 250
22270: PPUSH
22271: LD_VAR 0 1
22275: PPUSH
22276: CALL_OW 251
22280: PPUSH
22281: LD_INT 10
22283: PPUSH
22284: LD_INT 0
22286: PPUSH
22287: CALL_OW 50
// continue ;
22291: GO 22192
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22293: LD_VAR 0 12
22297: PUSH
22298: LD_INT 1
22300: ARRAY
22301: PPUSH
22302: CALL_OW 313
22306: IFFALSE 22334
22308: PUSH
22309: LD_VAR 0 12
22313: PUSH
22314: LD_INT 1
22316: ARRAY
22317: PPUSH
22318: CALL_OW 266
22322: PUSH
22323: LD_INT 32
22325: PUSH
22326: LD_INT 31
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: IN
22333: AND
22334: IFTRUE 22355
22336: PUSH
22337: LD_VAR 0 12
22341: PUSH
22342: LD_INT 1
22344: ARRAY
22345: PPUSH
22346: CALL_OW 313
22350: PUSH
22351: LD_INT 6
22353: EQUAL
22354: OR
22355: IFFALSE 22375
// f := Delete ( f , 1 ) ;
22357: LD_ADDR_VAR 0 12
22361: PUSH
22362: LD_VAR 0 12
22366: PPUSH
22367: LD_INT 1
22369: PPUSH
22370: CALL_OW 3
22374: ST_TO_ADDR
// if not f then
22375: LD_VAR 0 12
22379: NOT
22380: IFFALSE 22398
// begin x := x + 2 ;
22382: LD_ADDR_VAR 0 13
22386: PUSH
22387: LD_VAR 0 13
22391: PUSH
22392: LD_INT 2
22394: PLUS
22395: ST_TO_ADDR
// continue ;
22396: GO 22192
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22398: LD_VAR 0 12
22402: PUSH
22403: LD_INT 1
22405: ARRAY
22406: PPUSH
22407: CALL_OW 266
22411: PUSH
22412: LD_INT 5
22414: EQUAL
22415: IFFALSE 22489
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22417: LD_VAR 0 12
22421: PUSH
22422: LD_INT 1
22424: ARRAY
22425: PPUSH
22426: CALL_OW 313
22430: PUSH
22431: LD_INT 3
22433: LESS
22434: IFFALSE 22470
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22436: LD_INT 0
22438: PPUSH
22439: LD_INT 5
22441: PUSH
22442: LD_INT 8
22444: PUSH
22445: LD_INT 9
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: LIST
22452: PUSH
22453: LD_VAR 0 17
22457: ARRAY
22458: PPUSH
22459: LD_VAR 0 4
22463: PPUSH
22464: CALL_OW 380
22468: GO 22487
// PrepareHuman ( false , i , skill ) ;
22470: LD_INT 0
22472: PPUSH
22473: LD_VAR 0 8
22477: PPUSH
22478: LD_VAR 0 4
22482: PPUSH
22483: CALL_OW 380
// end else
22487: GO 22506
// PrepareHuman ( false , i , skill ) ;
22489: LD_INT 0
22491: PPUSH
22492: LD_VAR 0 8
22496: PPUSH
22497: LD_VAR 0 4
22501: PPUSH
22502: CALL_OW 380
// un := CreateHuman ;
22506: LD_ADDR_VAR 0 14
22510: PUSH
22511: CALL_OW 44
22515: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22516: LD_ADDR_VAR 0 7
22520: PUSH
22521: LD_VAR 0 7
22525: PPUSH
22526: LD_INT 1
22528: PPUSH
22529: LD_VAR 0 14
22533: PPUSH
22534: CALL_OW 2
22538: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
22539: LD_VAR 0 14
22543: PPUSH
22544: LD_VAR 0 12
22548: PUSH
22549: LD_INT 1
22551: ARRAY
22552: PPUSH
22553: CALL_OW 52
// end ;
22557: GO 22192
22559: POP
22560: POP
// end ;
22561: GO 21492
22563: POP
22564: POP
// result := result ^ buildings ;
22565: LD_ADDR_VAR 0 7
22569: PUSH
22570: LD_VAR 0 7
22574: PUSH
22575: LD_VAR 0 18
22579: ADD
22580: ST_TO_ADDR
// end else
22581: GO 22724
// begin for i = 1 to personel do
22583: LD_ADDR_VAR 0 8
22587: PUSH
22588: DOUBLE
22589: LD_INT 1
22591: DEC
22592: ST_TO_ADDR
22593: LD_VAR 0 6
22597: PUSH
22598: FOR_TO
22599: IFFALSE 22722
// begin if i > 4 then
22601: LD_VAR 0 8
22605: PUSH
22606: LD_INT 4
22608: GREATER
22609: IFFALSE 22613
// break ;
22611: GO 22722
// x := personel [ i ] ;
22613: LD_ADDR_VAR 0 13
22617: PUSH
22618: LD_VAR 0 6
22622: PUSH
22623: LD_VAR 0 8
22627: ARRAY
22628: ST_TO_ADDR
// if x = - 1 then
22629: LD_VAR 0 13
22633: PUSH
22634: LD_INT 1
22636: NEG
22637: EQUAL
22638: IFFALSE 22642
// continue ;
22640: GO 22598
// PrepareHuman ( false , i , skill ) ;
22642: LD_INT 0
22644: PPUSH
22645: LD_VAR 0 8
22649: PPUSH
22650: LD_VAR 0 4
22654: PPUSH
22655: CALL_OW 380
// un := CreateHuman ;
22659: LD_ADDR_VAR 0 14
22663: PUSH
22664: CALL_OW 44
22668: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22669: LD_VAR 0 14
22673: PPUSH
22674: LD_VAR 0 1
22678: PPUSH
22679: CALL_OW 250
22683: PPUSH
22684: LD_VAR 0 1
22688: PPUSH
22689: CALL_OW 251
22693: PPUSH
22694: LD_INT 10
22696: PPUSH
22697: LD_INT 0
22699: PPUSH
22700: CALL_OW 50
// result := result ^ un ;
22704: LD_ADDR_VAR 0 7
22708: PUSH
22709: LD_VAR 0 7
22713: PUSH
22714: LD_VAR 0 14
22718: ADD
22719: ST_TO_ADDR
// end ;
22720: GO 22598
22722: POP
22723: POP
// end ; end ;
22724: LD_VAR 0 7
22728: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22729: LD_INT 0
22731: PPUSH
22732: PPUSH
22733: PPUSH
22734: PPUSH
22735: PPUSH
22736: PPUSH
22737: PPUSH
22738: PPUSH
22739: PPUSH
22740: PPUSH
22741: PPUSH
22742: PPUSH
22743: PPUSH
22744: PPUSH
22745: PPUSH
22746: PPUSH
// result := false ;
22747: LD_ADDR_VAR 0 3
22751: PUSH
22752: LD_INT 0
22754: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22755: LD_VAR 0 1
22759: NOT
22760: IFTRUE 22785
22762: PUSH
22763: LD_VAR 0 1
22767: PPUSH
22768: CALL_OW 266
22772: PUSH
22773: LD_INT 32
22775: PUSH
22776: LD_INT 33
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: IN
22783: NOT
22784: OR
22785: IFFALSE 22789
// exit ;
22787: GO 23924
// nat := GetNation ( tower ) ;
22789: LD_ADDR_VAR 0 12
22793: PUSH
22794: LD_VAR 0 1
22798: PPUSH
22799: CALL_OW 248
22803: ST_TO_ADDR
// side := GetSide ( tower ) ;
22804: LD_ADDR_VAR 0 16
22808: PUSH
22809: LD_VAR 0 1
22813: PPUSH
22814: CALL_OW 255
22818: ST_TO_ADDR
// x := GetX ( tower ) ;
22819: LD_ADDR_VAR 0 10
22823: PUSH
22824: LD_VAR 0 1
22828: PPUSH
22829: CALL_OW 250
22833: ST_TO_ADDR
// y := GetY ( tower ) ;
22834: LD_ADDR_VAR 0 11
22838: PUSH
22839: LD_VAR 0 1
22843: PPUSH
22844: CALL_OW 251
22848: ST_TO_ADDR
// if not x or not y then
22849: LD_VAR 0 10
22853: NOT
22854: IFTRUE 22863
22856: PUSH
22857: LD_VAR 0 11
22861: NOT
22862: OR
22863: IFFALSE 22867
// exit ;
22865: GO 23924
// weapon := 0 ;
22867: LD_ADDR_VAR 0 18
22871: PUSH
22872: LD_INT 0
22874: ST_TO_ADDR
// fac_list := [ ] ;
22875: LD_ADDR_VAR 0 17
22879: PUSH
22880: EMPTY
22881: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
22882: LD_ADDR_VAR 0 6
22886: PUSH
22887: LD_VAR 0 1
22891: PPUSH
22892: CALL_OW 274
22896: PPUSH
22897: LD_VAR 0 2
22901: PPUSH
22902: LD_INT 0
22904: PPUSH
22905: CALL 20459 0 3
22909: PPUSH
22910: LD_INT 30
22912: PUSH
22913: LD_INT 3
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PPUSH
22920: CALL_OW 72
22924: ST_TO_ADDR
// if not factories then
22925: LD_VAR 0 6
22929: NOT
22930: IFFALSE 22934
// exit ;
22932: GO 23924
// for i in factories do
22934: LD_ADDR_VAR 0 8
22938: PUSH
22939: LD_VAR 0 6
22943: PUSH
22944: FOR_IN
22945: IFFALSE 22970
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22947: LD_ADDR_VAR 0 17
22951: PUSH
22952: LD_VAR 0 17
22956: PUSH
22957: LD_VAR 0 8
22961: PPUSH
22962: CALL_OW 478
22966: UNION
22967: ST_TO_ADDR
22968: GO 22944
22970: POP
22971: POP
// if not fac_list then
22972: LD_VAR 0 17
22976: NOT
22977: IFFALSE 22981
// exit ;
22979: GO 23924
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22981: LD_ADDR_VAR 0 5
22985: PUSH
22986: LD_INT 4
22988: PUSH
22989: LD_INT 5
22991: PUSH
22992: LD_INT 9
22994: PUSH
22995: LD_INT 10
22997: PUSH
22998: LD_INT 6
23000: PUSH
23001: LD_INT 7
23003: PUSH
23004: LD_INT 11
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 27
23018: PUSH
23019: LD_INT 28
23021: PUSH
23022: LD_INT 26
23024: PUSH
23025: LD_INT 30
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 43
23036: PUSH
23037: LD_INT 44
23039: PUSH
23040: LD_INT 46
23042: PUSH
23043: LD_INT 45
23045: PUSH
23046: LD_INT 47
23048: PUSH
23049: LD_INT 49
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: LIST
23064: PUSH
23065: LD_VAR 0 12
23069: ARRAY
23070: ST_TO_ADDR
// list := list isect fac_list ;
23071: LD_ADDR_VAR 0 5
23075: PUSH
23076: LD_VAR 0 5
23080: PUSH
23081: LD_VAR 0 17
23085: ISECT
23086: ST_TO_ADDR
// if not list then
23087: LD_VAR 0 5
23091: NOT
23092: IFFALSE 23096
// exit ;
23094: GO 23924
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23096: LD_VAR 0 12
23100: PUSH
23101: LD_INT 3
23103: EQUAL
23104: IFFALSE 23116
23106: PUSH
23107: LD_INT 49
23109: PUSH
23110: LD_VAR 0 5
23114: IN
23115: AND
23116: IFFALSE 23136
23118: PUSH
23119: LD_INT 31
23121: PPUSH
23122: LD_VAR 0 16
23126: PPUSH
23127: CALL_OW 321
23131: PUSH
23132: LD_INT 2
23134: EQUAL
23135: AND
23136: IFFALSE 23196
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23138: LD_INT 22
23140: PUSH
23141: LD_VAR 0 16
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 35
23152: PUSH
23153: LD_INT 49
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 91
23162: PUSH
23163: LD_VAR 0 1
23167: PUSH
23168: LD_INT 10
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: LIST
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: LIST
23180: PPUSH
23181: CALL_OW 69
23185: NOT
23186: IFFALSE 23196
// weapon := ru_time_lapser ;
23188: LD_ADDR_VAR 0 18
23192: PUSH
23193: LD_INT 49
23195: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23196: LD_VAR 0 12
23200: PUSH
23201: LD_INT 1
23203: PUSH
23204: LD_INT 2
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: IN
23211: IFFALSE 23235
23213: PUSH
23214: LD_INT 11
23216: PUSH
23217: LD_VAR 0 5
23221: IN
23222: IFTRUE 23234
23224: PUSH
23225: LD_INT 30
23227: PUSH
23228: LD_VAR 0 5
23232: IN
23233: OR
23234: AND
23235: IFFALSE 23255
23237: PUSH
23238: LD_INT 6
23240: PPUSH
23241: LD_VAR 0 16
23245: PPUSH
23246: CALL_OW 321
23250: PUSH
23251: LD_INT 2
23253: EQUAL
23254: AND
23255: IFFALSE 23422
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23257: LD_INT 22
23259: PUSH
23260: LD_VAR 0 16
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 2
23271: PUSH
23272: LD_INT 35
23274: PUSH
23275: LD_INT 11
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 35
23284: PUSH
23285: LD_INT 30
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 91
23299: PUSH
23300: LD_VAR 0 1
23304: PUSH
23305: LD_INT 18
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: LIST
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: LIST
23317: PPUSH
23318: CALL_OW 69
23322: NOT
23323: IFFALSE 23399
23325: PUSH
23326: LD_INT 22
23328: PUSH
23329: LD_VAR 0 16
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 2
23340: PUSH
23341: LD_INT 30
23343: PUSH
23344: LD_INT 32
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 30
23353: PUSH
23354: LD_INT 33
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 91
23368: PUSH
23369: LD_VAR 0 1
23373: PUSH
23374: LD_INT 12
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: LIST
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: LIST
23386: PUSH
23387: EMPTY
23388: LIST
23389: PPUSH
23390: CALL_OW 69
23394: PUSH
23395: LD_INT 2
23397: GREATER
23398: AND
23399: IFFALSE 23422
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23401: LD_ADDR_VAR 0 18
23405: PUSH
23406: LD_INT 11
23408: PUSH
23409: LD_INT 30
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_VAR 0 12
23420: ARRAY
23421: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23422: LD_VAR 0 18
23426: NOT
23427: IFFALSE 23447
23429: PUSH
23430: LD_INT 40
23432: PPUSH
23433: LD_VAR 0 16
23437: PPUSH
23438: CALL_OW 321
23442: PUSH
23443: LD_INT 2
23445: EQUAL
23446: AND
23447: IFFALSE 23483
23449: PUSH
23450: LD_INT 7
23452: PUSH
23453: LD_VAR 0 5
23457: IN
23458: IFTRUE 23470
23460: PUSH
23461: LD_INT 28
23463: PUSH
23464: LD_VAR 0 5
23468: IN
23469: OR
23470: IFTRUE 23482
23472: PUSH
23473: LD_INT 45
23475: PUSH
23476: LD_VAR 0 5
23480: IN
23481: OR
23482: AND
23483: IFFALSE 23737
// begin hex := GetHexInfo ( x , y ) ;
23485: LD_ADDR_VAR 0 4
23489: PUSH
23490: LD_VAR 0 10
23494: PPUSH
23495: LD_VAR 0 11
23499: PPUSH
23500: CALL_OW 546
23504: ST_TO_ADDR
// if hex [ 1 ] then
23505: LD_VAR 0 4
23509: PUSH
23510: LD_INT 1
23512: ARRAY
23513: IFFALSE 23517
// exit ;
23515: GO 23924
// height := hex [ 2 ] ;
23517: LD_ADDR_VAR 0 15
23521: PUSH
23522: LD_VAR 0 4
23526: PUSH
23527: LD_INT 2
23529: ARRAY
23530: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
23531: LD_ADDR_VAR 0 14
23535: PUSH
23536: LD_INT 0
23538: PUSH
23539: LD_INT 2
23541: PUSH
23542: LD_INT 3
23544: PUSH
23545: LD_INT 5
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: ST_TO_ADDR
// for i in tmp do
23554: LD_ADDR_VAR 0 8
23558: PUSH
23559: LD_VAR 0 14
23563: PUSH
23564: FOR_IN
23565: IFFALSE 23735
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23567: LD_ADDR_VAR 0 9
23571: PUSH
23572: LD_VAR 0 10
23576: PPUSH
23577: LD_VAR 0 8
23581: PPUSH
23582: LD_INT 5
23584: PPUSH
23585: CALL_OW 272
23589: PUSH
23590: LD_VAR 0 11
23594: PPUSH
23595: LD_VAR 0 8
23599: PPUSH
23600: LD_INT 5
23602: PPUSH
23603: CALL_OW 273
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
23612: LD_VAR 0 9
23616: PUSH
23617: LD_INT 1
23619: ARRAY
23620: PPUSH
23621: LD_VAR 0 9
23625: PUSH
23626: LD_INT 2
23628: ARRAY
23629: PPUSH
23630: CALL_OW 488
23634: IFFALSE 23733
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
23636: LD_ADDR_VAR 0 4
23640: PUSH
23641: LD_VAR 0 9
23645: PUSH
23646: LD_INT 1
23648: ARRAY
23649: PPUSH
23650: LD_VAR 0 9
23654: PUSH
23655: LD_INT 2
23657: ARRAY
23658: PPUSH
23659: CALL_OW 546
23663: ST_TO_ADDR
// if hex [ 1 ] then
23664: LD_VAR 0 4
23668: PUSH
23669: LD_INT 1
23671: ARRAY
23672: IFFALSE 23676
// continue ;
23674: GO 23564
// h := hex [ 2 ] ;
23676: LD_ADDR_VAR 0 13
23680: PUSH
23681: LD_VAR 0 4
23685: PUSH
23686: LD_INT 2
23688: ARRAY
23689: ST_TO_ADDR
// if h + 7 < height then
23690: LD_VAR 0 13
23694: PUSH
23695: LD_INT 7
23697: PLUS
23698: PUSH
23699: LD_VAR 0 15
23703: LESS
23704: IFFALSE 23733
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
23706: LD_ADDR_VAR 0 18
23710: PUSH
23711: LD_INT 7
23713: PUSH
23714: LD_INT 28
23716: PUSH
23717: LD_INT 45
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: LIST
23724: PUSH
23725: LD_VAR 0 12
23729: ARRAY
23730: ST_TO_ADDR
// break ;
23731: GO 23735
// end ; end ; end ;
23733: GO 23564
23735: POP
23736: POP
// end ; if not weapon then
23737: LD_VAR 0 18
23741: NOT
23742: IFFALSE 23802
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
23744: LD_ADDR_VAR 0 5
23748: PUSH
23749: LD_VAR 0 5
23753: PUSH
23754: LD_INT 11
23756: PUSH
23757: LD_INT 30
23759: PUSH
23760: LD_INT 49
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: LIST
23767: DIFF
23768: ST_TO_ADDR
// if not list then
23769: LD_VAR 0 5
23773: NOT
23774: IFFALSE 23778
// exit ;
23776: GO 23924
// weapon := list [ rand ( 1 , list ) ] ;
23778: LD_ADDR_VAR 0 18
23782: PUSH
23783: LD_VAR 0 5
23787: PUSH
23788: LD_INT 1
23790: PPUSH
23791: LD_VAR 0 5
23795: PPUSH
23796: CALL_OW 12
23800: ARRAY
23801: ST_TO_ADDR
// end ; if weapon then
23802: LD_VAR 0 18
23806: IFFALSE 23924
// begin tmp := CostOfWeapon ( weapon ) ;
23808: LD_ADDR_VAR 0 14
23812: PUSH
23813: LD_VAR 0 18
23817: PPUSH
23818: CALL_OW 451
23822: ST_TO_ADDR
// j := GetBase ( tower ) ;
23823: LD_ADDR_VAR 0 9
23827: PUSH
23828: LD_VAR 0 1
23832: PPUSH
23833: CALL_OW 274
23837: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23838: LD_VAR 0 9
23842: PPUSH
23843: LD_INT 1
23845: PPUSH
23846: CALL_OW 275
23850: PUSH
23851: LD_VAR 0 14
23855: PUSH
23856: LD_INT 1
23858: ARRAY
23859: GREATEREQUAL
23860: IFFALSE 23886
23862: PUSH
23863: LD_VAR 0 9
23867: PPUSH
23868: LD_INT 2
23870: PPUSH
23871: CALL_OW 275
23875: PUSH
23876: LD_VAR 0 14
23880: PUSH
23881: LD_INT 2
23883: ARRAY
23884: GREATEREQUAL
23885: AND
23886: IFFALSE 23912
23888: PUSH
23889: LD_VAR 0 9
23893: PPUSH
23894: LD_INT 3
23896: PPUSH
23897: CALL_OW 275
23901: PUSH
23902: LD_VAR 0 14
23906: PUSH
23907: LD_INT 3
23909: ARRAY
23910: GREATEREQUAL
23911: AND
23912: IFFALSE 23924
// result := weapon ;
23914: LD_ADDR_VAR 0 3
23918: PUSH
23919: LD_VAR 0 18
23923: ST_TO_ADDR
// end ; end ;
23924: LD_VAR 0 3
23928: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23929: LD_INT 0
23931: PPUSH
23932: PPUSH
// result := true ;
23933: LD_ADDR_VAR 0 3
23937: PUSH
23938: LD_INT 1
23940: ST_TO_ADDR
// if array1 = array2 then
23941: LD_VAR 0 1
23945: PUSH
23946: LD_VAR 0 2
23950: EQUAL
23951: IFFALSE 24011
// begin for i = 1 to array1 do
23953: LD_ADDR_VAR 0 4
23957: PUSH
23958: DOUBLE
23959: LD_INT 1
23961: DEC
23962: ST_TO_ADDR
23963: LD_VAR 0 1
23967: PUSH
23968: FOR_TO
23969: IFFALSE 24007
// if array1 [ i ] <> array2 [ i ] then
23971: LD_VAR 0 1
23975: PUSH
23976: LD_VAR 0 4
23980: ARRAY
23981: PUSH
23982: LD_VAR 0 2
23986: PUSH
23987: LD_VAR 0 4
23991: ARRAY
23992: NONEQUAL
23993: IFFALSE 24005
// begin result := false ;
23995: LD_ADDR_VAR 0 3
23999: PUSH
24000: LD_INT 0
24002: ST_TO_ADDR
// break ;
24003: GO 24007
// end ;
24005: GO 23968
24007: POP
24008: POP
// end else
24009: GO 24019
// result := false ;
24011: LD_ADDR_VAR 0 3
24015: PUSH
24016: LD_INT 0
24018: ST_TO_ADDR
// end ;
24019: LD_VAR 0 3
24023: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
24024: LD_INT 0
24026: PPUSH
24027: PPUSH
// if not array1 or not array2 then
24028: LD_VAR 0 1
24032: NOT
24033: IFTRUE 24042
24035: PUSH
24036: LD_VAR 0 2
24040: NOT
24041: OR
24042: IFFALSE 24046
// exit ;
24044: GO 24110
// result := true ;
24046: LD_ADDR_VAR 0 3
24050: PUSH
24051: LD_INT 1
24053: ST_TO_ADDR
// for i = 1 to array1 do
24054: LD_ADDR_VAR 0 4
24058: PUSH
24059: DOUBLE
24060: LD_INT 1
24062: DEC
24063: ST_TO_ADDR
24064: LD_VAR 0 1
24068: PUSH
24069: FOR_TO
24070: IFFALSE 24108
// if array1 [ i ] <> array2 [ i ] then
24072: LD_VAR 0 1
24076: PUSH
24077: LD_VAR 0 4
24081: ARRAY
24082: PUSH
24083: LD_VAR 0 2
24087: PUSH
24088: LD_VAR 0 4
24092: ARRAY
24093: NONEQUAL
24094: IFFALSE 24106
// begin result := false ;
24096: LD_ADDR_VAR 0 3
24100: PUSH
24101: LD_INT 0
24103: ST_TO_ADDR
// break ;
24104: GO 24108
// end ;
24106: GO 24069
24108: POP
24109: POP
// end ;
24110: LD_VAR 0 3
24114: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24115: LD_INT 0
24117: PPUSH
24118: PPUSH
24119: PPUSH
// pom := GetBase ( fac ) ;
24120: LD_ADDR_VAR 0 5
24124: PUSH
24125: LD_VAR 0 1
24129: PPUSH
24130: CALL_OW 274
24134: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24135: LD_ADDR_VAR 0 4
24139: PUSH
24140: LD_VAR 0 2
24144: PUSH
24145: LD_INT 1
24147: ARRAY
24148: PPUSH
24149: LD_VAR 0 2
24153: PUSH
24154: LD_INT 2
24156: ARRAY
24157: PPUSH
24158: LD_VAR 0 2
24162: PUSH
24163: LD_INT 3
24165: ARRAY
24166: PPUSH
24167: LD_VAR 0 2
24171: PUSH
24172: LD_INT 4
24174: ARRAY
24175: PPUSH
24176: CALL_OW 449
24180: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24181: LD_ADDR_VAR 0 3
24185: PUSH
24186: LD_VAR 0 5
24190: PPUSH
24191: LD_INT 1
24193: PPUSH
24194: CALL_OW 275
24198: PUSH
24199: LD_VAR 0 4
24203: PUSH
24204: LD_INT 1
24206: ARRAY
24207: GREATEREQUAL
24208: IFFALSE 24234
24210: PUSH
24211: LD_VAR 0 5
24215: PPUSH
24216: LD_INT 2
24218: PPUSH
24219: CALL_OW 275
24223: PUSH
24224: LD_VAR 0 4
24228: PUSH
24229: LD_INT 2
24231: ARRAY
24232: GREATEREQUAL
24233: AND
24234: IFFALSE 24260
24236: PUSH
24237: LD_VAR 0 5
24241: PPUSH
24242: LD_INT 3
24244: PPUSH
24245: CALL_OW 275
24249: PUSH
24250: LD_VAR 0 4
24254: PUSH
24255: LD_INT 3
24257: ARRAY
24258: GREATEREQUAL
24259: AND
24260: ST_TO_ADDR
// end ;
24261: LD_VAR 0 3
24265: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24266: LD_INT 0
24268: PPUSH
24269: PPUSH
24270: PPUSH
24271: PPUSH
// pom := GetBase ( building ) ;
24272: LD_ADDR_VAR 0 3
24276: PUSH
24277: LD_VAR 0 1
24281: PPUSH
24282: CALL_OW 274
24286: ST_TO_ADDR
// if not pom then
24287: LD_VAR 0 3
24291: NOT
24292: IFFALSE 24296
// exit ;
24294: GO 24470
// btype := GetBType ( building ) ;
24296: LD_ADDR_VAR 0 5
24300: PUSH
24301: LD_VAR 0 1
24305: PPUSH
24306: CALL_OW 266
24310: ST_TO_ADDR
// if btype = b_armoury then
24311: LD_VAR 0 5
24315: PUSH
24316: LD_INT 4
24318: EQUAL
24319: IFFALSE 24329
// btype := b_barracks ;
24321: LD_ADDR_VAR 0 5
24325: PUSH
24326: LD_INT 5
24328: ST_TO_ADDR
// if btype = b_depot then
24329: LD_VAR 0 5
24333: PUSH
24334: LD_INT 0
24336: EQUAL
24337: IFFALSE 24347
// btype := b_warehouse ;
24339: LD_ADDR_VAR 0 5
24343: PUSH
24344: LD_INT 1
24346: ST_TO_ADDR
// if btype = b_workshop then
24347: LD_VAR 0 5
24351: PUSH
24352: LD_INT 2
24354: EQUAL
24355: IFFALSE 24365
// btype := b_factory ;
24357: LD_ADDR_VAR 0 5
24361: PUSH
24362: LD_INT 3
24364: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24365: LD_ADDR_VAR 0 4
24369: PUSH
24370: LD_VAR 0 5
24374: PPUSH
24375: LD_VAR 0 1
24379: PPUSH
24380: CALL_OW 248
24384: PPUSH
24385: CALL_OW 450
24389: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24390: LD_ADDR_VAR 0 2
24394: PUSH
24395: LD_VAR 0 3
24399: PPUSH
24400: LD_INT 1
24402: PPUSH
24403: CALL_OW 275
24407: PUSH
24408: LD_VAR 0 4
24412: PUSH
24413: LD_INT 1
24415: ARRAY
24416: GREATEREQUAL
24417: IFFALSE 24443
24419: PUSH
24420: LD_VAR 0 3
24424: PPUSH
24425: LD_INT 2
24427: PPUSH
24428: CALL_OW 275
24432: PUSH
24433: LD_VAR 0 4
24437: PUSH
24438: LD_INT 2
24440: ARRAY
24441: GREATEREQUAL
24442: AND
24443: IFFALSE 24469
24445: PUSH
24446: LD_VAR 0 3
24450: PPUSH
24451: LD_INT 3
24453: PPUSH
24454: CALL_OW 275
24458: PUSH
24459: LD_VAR 0 4
24463: PUSH
24464: LD_INT 3
24466: ARRAY
24467: GREATEREQUAL
24468: AND
24469: ST_TO_ADDR
// end ;
24470: LD_VAR 0 2
24474: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24475: LD_INT 0
24477: PPUSH
24478: PPUSH
24479: PPUSH
// pom := GetBase ( building ) ;
24480: LD_ADDR_VAR 0 4
24484: PUSH
24485: LD_VAR 0 1
24489: PPUSH
24490: CALL_OW 274
24494: ST_TO_ADDR
// if not pom then
24495: LD_VAR 0 4
24499: NOT
24500: IFFALSE 24504
// exit ;
24502: GO 24609
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24504: LD_ADDR_VAR 0 5
24508: PUSH
24509: LD_VAR 0 2
24513: PPUSH
24514: LD_VAR 0 1
24518: PPUSH
24519: CALL_OW 248
24523: PPUSH
24524: CALL_OW 450
24528: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24529: LD_ADDR_VAR 0 3
24533: PUSH
24534: LD_VAR 0 4
24538: PPUSH
24539: LD_INT 1
24541: PPUSH
24542: CALL_OW 275
24546: PUSH
24547: LD_VAR 0 5
24551: PUSH
24552: LD_INT 1
24554: ARRAY
24555: GREATEREQUAL
24556: IFFALSE 24582
24558: PUSH
24559: LD_VAR 0 4
24563: PPUSH
24564: LD_INT 2
24566: PPUSH
24567: CALL_OW 275
24571: PUSH
24572: LD_VAR 0 5
24576: PUSH
24577: LD_INT 2
24579: ARRAY
24580: GREATEREQUAL
24581: AND
24582: IFFALSE 24608
24584: PUSH
24585: LD_VAR 0 4
24589: PPUSH
24590: LD_INT 3
24592: PPUSH
24593: CALL_OW 275
24597: PUSH
24598: LD_VAR 0 5
24602: PUSH
24603: LD_INT 3
24605: ARRAY
24606: GREATEREQUAL
24607: AND
24608: ST_TO_ADDR
// end ;
24609: LD_VAR 0 3
24613: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
24614: LD_INT 0
24616: PPUSH
24617: PPUSH
24618: PPUSH
24619: PPUSH
24620: PPUSH
24621: PPUSH
24622: PPUSH
24623: PPUSH
24624: PPUSH
24625: PPUSH
24626: PPUSH
// result := false ;
24627: LD_ADDR_VAR 0 8
24631: PUSH
24632: LD_INT 0
24634: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
24635: LD_VAR 0 5
24639: NOT
24640: IFTRUE 24649
24642: PUSH
24643: LD_VAR 0 1
24647: NOT
24648: OR
24649: IFTRUE 24658
24651: PUSH
24652: LD_VAR 0 2
24656: NOT
24657: OR
24658: IFTRUE 24667
24660: PUSH
24661: LD_VAR 0 3
24665: NOT
24666: OR
24667: IFFALSE 24671
// exit ;
24669: GO 25497
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
24671: LD_ADDR_VAR 0 14
24675: PUSH
24676: LD_VAR 0 1
24680: PPUSH
24681: LD_VAR 0 2
24685: PPUSH
24686: LD_VAR 0 3
24690: PPUSH
24691: LD_VAR 0 4
24695: PPUSH
24696: LD_VAR 0 5
24700: PUSH
24701: LD_INT 1
24703: ARRAY
24704: PPUSH
24705: CALL_OW 248
24709: PPUSH
24710: LD_INT 0
24712: PPUSH
24713: CALL 26778 0 6
24717: ST_TO_ADDR
// if not hexes then
24718: LD_VAR 0 14
24722: NOT
24723: IFFALSE 24727
// exit ;
24725: GO 25497
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24727: LD_ADDR_VAR 0 17
24731: PUSH
24732: LD_VAR 0 5
24736: PPUSH
24737: LD_INT 22
24739: PUSH
24740: LD_VAR 0 13
24744: PPUSH
24745: CALL_OW 255
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 2
24756: PUSH
24757: LD_INT 30
24759: PUSH
24760: LD_INT 0
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 30
24769: PUSH
24770: LD_INT 1
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: LIST
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PPUSH
24786: CALL_OW 72
24790: ST_TO_ADDR
// for i = 1 to hexes do
24791: LD_ADDR_VAR 0 9
24795: PUSH
24796: DOUBLE
24797: LD_INT 1
24799: DEC
24800: ST_TO_ADDR
24801: LD_VAR 0 14
24805: PUSH
24806: FOR_TO
24807: IFFALSE 25495
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24809: LD_ADDR_VAR 0 13
24813: PUSH
24814: LD_VAR 0 14
24818: PUSH
24819: LD_VAR 0 9
24823: ARRAY
24824: PUSH
24825: LD_INT 1
24827: ARRAY
24828: PPUSH
24829: LD_VAR 0 14
24833: PUSH
24834: LD_VAR 0 9
24838: ARRAY
24839: PUSH
24840: LD_INT 2
24842: ARRAY
24843: PPUSH
24844: CALL_OW 428
24848: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24849: LD_VAR 0 14
24853: PUSH
24854: LD_VAR 0 9
24858: ARRAY
24859: PUSH
24860: LD_INT 1
24862: ARRAY
24863: PPUSH
24864: LD_VAR 0 14
24868: PUSH
24869: LD_VAR 0 9
24873: ARRAY
24874: PUSH
24875: LD_INT 2
24877: ARRAY
24878: PPUSH
24879: CALL_OW 351
24883: IFTRUE 24922
24885: PUSH
24886: LD_VAR 0 14
24890: PUSH
24891: LD_VAR 0 9
24895: ARRAY
24896: PUSH
24897: LD_INT 1
24899: ARRAY
24900: PPUSH
24901: LD_VAR 0 14
24905: PUSH
24906: LD_VAR 0 9
24910: ARRAY
24911: PUSH
24912: LD_INT 2
24914: ARRAY
24915: PPUSH
24916: CALL_OW 488
24920: NOT
24921: OR
24922: IFTRUE 24939
24924: PUSH
24925: LD_VAR 0 13
24929: PPUSH
24930: CALL_OW 247
24934: PUSH
24935: LD_INT 3
24937: EQUAL
24938: OR
24939: IFFALSE 24945
// exit ;
24941: POP
24942: POP
24943: GO 25497
// if not tmp then
24945: LD_VAR 0 13
24949: NOT
24950: IFFALSE 24954
// continue ;
24952: GO 24806
// result := true ;
24954: LD_ADDR_VAR 0 8
24958: PUSH
24959: LD_INT 1
24961: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
24962: LD_VAR 0 6
24966: IFFALSE 24983
24968: PUSH
24969: LD_VAR 0 13
24973: PPUSH
24974: CALL_OW 247
24978: PUSH
24979: LD_INT 2
24981: EQUAL
24982: AND
24983: IFFALSE 25000
24985: PUSH
24986: LD_VAR 0 13
24990: PPUSH
24991: CALL_OW 263
24995: PUSH
24996: LD_INT 1
24998: EQUAL
24999: AND
25000: IFFALSE 25164
// begin if IsDrivenBy ( tmp ) then
25002: LD_VAR 0 13
25006: PPUSH
25007: CALL_OW 311
25011: IFFALSE 25015
// continue ;
25013: GO 24806
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
25015: LD_VAR 0 6
25019: PPUSH
25020: LD_INT 3
25022: PUSH
25023: LD_INT 60
25025: PUSH
25026: EMPTY
25027: LIST
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 3
25035: PUSH
25036: LD_INT 55
25038: PUSH
25039: EMPTY
25040: LIST
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PPUSH
25050: CALL_OW 72
25054: IFFALSE 25162
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
25056: LD_ADDR_VAR 0 18
25060: PUSH
25061: LD_VAR 0 6
25065: PPUSH
25066: LD_INT 3
25068: PUSH
25069: LD_INT 60
25071: PUSH
25072: EMPTY
25073: LIST
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 3
25081: PUSH
25082: LD_INT 55
25084: PUSH
25085: EMPTY
25086: LIST
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PPUSH
25096: CALL_OW 72
25100: PUSH
25101: LD_INT 1
25103: ARRAY
25104: ST_TO_ADDR
// if IsInUnit ( driver ) then
25105: LD_VAR 0 18
25109: PPUSH
25110: CALL_OW 310
25114: IFFALSE 25125
// ComExit ( driver ) ;
25116: LD_VAR 0 18
25120: PPUSH
25121: CALL 50768 0 1
// AddComEnterUnit ( driver , tmp ) ;
25125: LD_VAR 0 18
25129: PPUSH
25130: LD_VAR 0 13
25134: PPUSH
25135: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
25139: LD_VAR 0 18
25143: PPUSH
25144: LD_VAR 0 7
25148: PPUSH
25149: CALL_OW 173
// AddComExitVehicle ( driver ) ;
25153: LD_VAR 0 18
25157: PPUSH
25158: CALL_OW 181
// end ; continue ;
25162: GO 24806
// end ; if not cleaners or not tmp in cleaners then
25164: LD_VAR 0 6
25168: NOT
25169: IFTRUE 25184
25171: PUSH
25172: LD_VAR 0 13
25176: PUSH
25177: LD_VAR 0 6
25181: IN
25182: NOT
25183: OR
25184: IFFALSE 25493
// begin if dep then
25186: LD_VAR 0 17
25190: IFFALSE 25326
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25192: LD_ADDR_VAR 0 16
25196: PUSH
25197: LD_VAR 0 17
25201: PUSH
25202: LD_INT 1
25204: ARRAY
25205: PPUSH
25206: CALL_OW 250
25210: PPUSH
25211: LD_VAR 0 17
25215: PUSH
25216: LD_INT 1
25218: ARRAY
25219: PPUSH
25220: CALL_OW 254
25224: PPUSH
25225: LD_INT 5
25227: PPUSH
25228: CALL_OW 272
25232: PUSH
25233: LD_VAR 0 17
25237: PUSH
25238: LD_INT 1
25240: ARRAY
25241: PPUSH
25242: CALL_OW 251
25246: PPUSH
25247: LD_VAR 0 17
25251: PUSH
25252: LD_INT 1
25254: ARRAY
25255: PPUSH
25256: CALL_OW 254
25260: PPUSH
25261: LD_INT 5
25263: PPUSH
25264: CALL_OW 273
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25273: LD_VAR 0 16
25277: PUSH
25278: LD_INT 1
25280: ARRAY
25281: PPUSH
25282: LD_VAR 0 16
25286: PUSH
25287: LD_INT 2
25289: ARRAY
25290: PPUSH
25291: CALL_OW 488
25295: IFFALSE 25326
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25297: LD_VAR 0 13
25301: PPUSH
25302: LD_VAR 0 16
25306: PUSH
25307: LD_INT 1
25309: ARRAY
25310: PPUSH
25311: LD_VAR 0 16
25315: PUSH
25316: LD_INT 2
25318: ARRAY
25319: PPUSH
25320: CALL_OW 111
// continue ;
25324: GO 24806
// end ; end ; r := GetDir ( tmp ) ;
25326: LD_ADDR_VAR 0 15
25330: PUSH
25331: LD_VAR 0 13
25335: PPUSH
25336: CALL_OW 254
25340: ST_TO_ADDR
// if r = 5 then
25341: LD_VAR 0 15
25345: PUSH
25346: LD_INT 5
25348: EQUAL
25349: IFFALSE 25359
// r := 0 ;
25351: LD_ADDR_VAR 0 15
25355: PUSH
25356: LD_INT 0
25358: ST_TO_ADDR
// for j = r to 5 do
25359: LD_ADDR_VAR 0 10
25363: PUSH
25364: DOUBLE
25365: LD_VAR 0 15
25369: DEC
25370: ST_TO_ADDR
25371: LD_INT 5
25373: PUSH
25374: FOR_TO
25375: IFFALSE 25491
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25377: LD_ADDR_VAR 0 11
25381: PUSH
25382: LD_VAR 0 13
25386: PPUSH
25387: CALL_OW 250
25391: PPUSH
25392: LD_VAR 0 10
25396: PPUSH
25397: LD_INT 2
25399: PPUSH
25400: CALL_OW 272
25404: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25405: LD_ADDR_VAR 0 12
25409: PUSH
25410: LD_VAR 0 13
25414: PPUSH
25415: CALL_OW 251
25419: PPUSH
25420: LD_VAR 0 10
25424: PPUSH
25425: LD_INT 2
25427: PPUSH
25428: CALL_OW 273
25432: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25433: LD_VAR 0 11
25437: PPUSH
25438: LD_VAR 0 12
25442: PPUSH
25443: CALL_OW 488
25447: IFFALSE 25466
25449: PUSH
25450: LD_VAR 0 11
25454: PPUSH
25455: LD_VAR 0 12
25459: PPUSH
25460: CALL_OW 428
25464: NOT
25465: AND
25466: IFFALSE 25489
// begin ComMoveXY ( tmp , _x , _y ) ;
25468: LD_VAR 0 13
25472: PPUSH
25473: LD_VAR 0 11
25477: PPUSH
25478: LD_VAR 0 12
25482: PPUSH
25483: CALL_OW 111
// break ;
25487: GO 25491
// end ; end ;
25489: GO 25374
25491: POP
25492: POP
// end ; end ;
25493: GO 24806
25495: POP
25496: POP
// end ;
25497: LD_VAR 0 8
25501: RET
// export function BuildingTechInvented ( side , btype ) ; begin
25502: LD_INT 0
25504: PPUSH
// result := true ;
25505: LD_ADDR_VAR 0 3
25509: PUSH
25510: LD_INT 1
25512: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
25513: LD_VAR 0 2
25517: PUSH
25518: LD_INT 24
25520: DOUBLE
25521: EQUAL
25522: IFTRUE 25532
25524: LD_INT 33
25526: DOUBLE
25527: EQUAL
25528: IFTRUE 25532
25530: GO 25557
25532: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
25533: LD_ADDR_VAR 0 3
25537: PUSH
25538: LD_INT 32
25540: PPUSH
25541: LD_VAR 0 1
25545: PPUSH
25546: CALL_OW 321
25550: PUSH
25551: LD_INT 2
25553: EQUAL
25554: ST_TO_ADDR
25555: GO 25873
25557: LD_INT 20
25559: DOUBLE
25560: EQUAL
25561: IFTRUE 25565
25563: GO 25590
25565: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
25566: LD_ADDR_VAR 0 3
25570: PUSH
25571: LD_INT 6
25573: PPUSH
25574: LD_VAR 0 1
25578: PPUSH
25579: CALL_OW 321
25583: PUSH
25584: LD_INT 2
25586: EQUAL
25587: ST_TO_ADDR
25588: GO 25873
25590: LD_INT 22
25592: DOUBLE
25593: EQUAL
25594: IFTRUE 25604
25596: LD_INT 36
25598: DOUBLE
25599: EQUAL
25600: IFTRUE 25604
25602: GO 25629
25604: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
25605: LD_ADDR_VAR 0 3
25609: PUSH
25610: LD_INT 15
25612: PPUSH
25613: LD_VAR 0 1
25617: PPUSH
25618: CALL_OW 321
25622: PUSH
25623: LD_INT 2
25625: EQUAL
25626: ST_TO_ADDR
25627: GO 25873
25629: LD_INT 30
25631: DOUBLE
25632: EQUAL
25633: IFTRUE 25637
25635: GO 25662
25637: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
25638: LD_ADDR_VAR 0 3
25642: PUSH
25643: LD_INT 20
25645: PPUSH
25646: LD_VAR 0 1
25650: PPUSH
25651: CALL_OW 321
25655: PUSH
25656: LD_INT 2
25658: EQUAL
25659: ST_TO_ADDR
25660: GO 25873
25662: LD_INT 28
25664: DOUBLE
25665: EQUAL
25666: IFTRUE 25676
25668: LD_INT 21
25670: DOUBLE
25671: EQUAL
25672: IFTRUE 25676
25674: GO 25701
25676: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
25677: LD_ADDR_VAR 0 3
25681: PUSH
25682: LD_INT 21
25684: PPUSH
25685: LD_VAR 0 1
25689: PPUSH
25690: CALL_OW 321
25694: PUSH
25695: LD_INT 2
25697: EQUAL
25698: ST_TO_ADDR
25699: GO 25873
25701: LD_INT 16
25703: DOUBLE
25704: EQUAL
25705: IFTRUE 25709
25707: GO 25734
25709: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
25710: LD_ADDR_VAR 0 3
25714: PUSH
25715: LD_INT 84
25717: PPUSH
25718: LD_VAR 0 1
25722: PPUSH
25723: CALL_OW 321
25727: PUSH
25728: LD_INT 2
25730: EQUAL
25731: ST_TO_ADDR
25732: GO 25873
25734: LD_INT 19
25736: DOUBLE
25737: EQUAL
25738: IFTRUE 25748
25740: LD_INT 23
25742: DOUBLE
25743: EQUAL
25744: IFTRUE 25748
25746: GO 25773
25748: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
25749: LD_ADDR_VAR 0 3
25753: PUSH
25754: LD_INT 83
25756: PPUSH
25757: LD_VAR 0 1
25761: PPUSH
25762: CALL_OW 321
25766: PUSH
25767: LD_INT 2
25769: EQUAL
25770: ST_TO_ADDR
25771: GO 25873
25773: LD_INT 17
25775: DOUBLE
25776: EQUAL
25777: IFTRUE 25781
25779: GO 25806
25781: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
25782: LD_ADDR_VAR 0 3
25786: PUSH
25787: LD_INT 39
25789: PPUSH
25790: LD_VAR 0 1
25794: PPUSH
25795: CALL_OW 321
25799: PUSH
25800: LD_INT 2
25802: EQUAL
25803: ST_TO_ADDR
25804: GO 25873
25806: LD_INT 18
25808: DOUBLE
25809: EQUAL
25810: IFTRUE 25814
25812: GO 25839
25814: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
25815: LD_ADDR_VAR 0 3
25819: PUSH
25820: LD_INT 40
25822: PPUSH
25823: LD_VAR 0 1
25827: PPUSH
25828: CALL_OW 321
25832: PUSH
25833: LD_INT 2
25835: EQUAL
25836: ST_TO_ADDR
25837: GO 25873
25839: LD_INT 27
25841: DOUBLE
25842: EQUAL
25843: IFTRUE 25847
25845: GO 25872
25847: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
25848: LD_ADDR_VAR 0 3
25852: PUSH
25853: LD_INT 35
25855: PPUSH
25856: LD_VAR 0 1
25860: PPUSH
25861: CALL_OW 321
25865: PUSH
25866: LD_INT 2
25868: EQUAL
25869: ST_TO_ADDR
25870: GO 25873
25872: POP
// end ;
25873: LD_VAR 0 3
25877: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
25878: LD_INT 0
25880: PPUSH
25881: PPUSH
25882: PPUSH
25883: PPUSH
25884: PPUSH
25885: PPUSH
25886: PPUSH
25887: PPUSH
25888: PPUSH
25889: PPUSH
25890: PPUSH
// result := false ;
25891: LD_ADDR_VAR 0 6
25895: PUSH
25896: LD_INT 0
25898: ST_TO_ADDR
// if btype = b_depot then
25899: LD_VAR 0 2
25903: PUSH
25904: LD_INT 0
25906: EQUAL
25907: IFFALSE 25919
// begin result := true ;
25909: LD_ADDR_VAR 0 6
25913: PUSH
25914: LD_INT 1
25916: ST_TO_ADDR
// exit ;
25917: GO 26773
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25919: LD_VAR 0 1
25923: NOT
25924: IFTRUE 25949
25926: PUSH
25927: LD_VAR 0 1
25931: PPUSH
25932: CALL_OW 266
25936: PUSH
25937: LD_INT 0
25939: PUSH
25940: LD_INT 1
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: IN
25947: NOT
25948: OR
25949: IFTRUE 25958
25951: PUSH
25952: LD_VAR 0 2
25956: NOT
25957: OR
25958: IFTRUE 25994
25960: PUSH
25961: LD_VAR 0 5
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: LD_INT 1
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: LD_INT 3
25977: PUSH
25978: LD_INT 4
25980: PUSH
25981: LD_INT 5
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: IN
25992: NOT
25993: OR
25994: IFTRUE 26013
25996: PUSH
25997: LD_VAR 0 3
26001: PPUSH
26002: LD_VAR 0 4
26006: PPUSH
26007: CALL_OW 488
26011: NOT
26012: OR
26013: IFFALSE 26017
// exit ;
26015: GO 26773
// side := GetSide ( depot ) ;
26017: LD_ADDR_VAR 0 9
26021: PUSH
26022: LD_VAR 0 1
26026: PPUSH
26027: CALL_OW 255
26031: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
26032: LD_VAR 0 9
26036: PPUSH
26037: LD_VAR 0 2
26041: PPUSH
26042: CALL 25502 0 2
26046: NOT
26047: IFFALSE 26051
// exit ;
26049: GO 26773
// pom := GetBase ( depot ) ;
26051: LD_ADDR_VAR 0 10
26055: PUSH
26056: LD_VAR 0 1
26060: PPUSH
26061: CALL_OW 274
26065: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
26066: LD_ADDR_VAR 0 11
26070: PUSH
26071: LD_VAR 0 2
26075: PPUSH
26076: LD_VAR 0 1
26080: PPUSH
26081: CALL_OW 248
26085: PPUSH
26086: CALL_OW 450
26090: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26091: LD_VAR 0 10
26095: PPUSH
26096: LD_INT 1
26098: PPUSH
26099: CALL_OW 275
26103: PUSH
26104: LD_VAR 0 11
26108: PUSH
26109: LD_INT 1
26111: ARRAY
26112: GREATEREQUAL
26113: IFFALSE 26139
26115: PUSH
26116: LD_VAR 0 10
26120: PPUSH
26121: LD_INT 2
26123: PPUSH
26124: CALL_OW 275
26128: PUSH
26129: LD_VAR 0 11
26133: PUSH
26134: LD_INT 2
26136: ARRAY
26137: GREATEREQUAL
26138: AND
26139: IFFALSE 26165
26141: PUSH
26142: LD_VAR 0 10
26146: PPUSH
26147: LD_INT 3
26149: PPUSH
26150: CALL_OW 275
26154: PUSH
26155: LD_VAR 0 11
26159: PUSH
26160: LD_INT 3
26162: ARRAY
26163: GREATEREQUAL
26164: AND
26165: NOT
26166: IFFALSE 26170
// exit ;
26168: GO 26773
// if GetBType ( depot ) = b_depot then
26170: LD_VAR 0 1
26174: PPUSH
26175: CALL_OW 266
26179: PUSH
26180: LD_INT 0
26182: EQUAL
26183: IFFALSE 26195
// dist := 28 else
26185: LD_ADDR_VAR 0 14
26189: PUSH
26190: LD_INT 28
26192: ST_TO_ADDR
26193: GO 26203
// dist := 36 ;
26195: LD_ADDR_VAR 0 14
26199: PUSH
26200: LD_INT 36
26202: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26203: LD_VAR 0 1
26207: PPUSH
26208: LD_VAR 0 3
26212: PPUSH
26213: LD_VAR 0 4
26217: PPUSH
26218: CALL_OW 297
26222: PUSH
26223: LD_VAR 0 14
26227: GREATER
26228: IFFALSE 26232
// exit ;
26230: GO 26773
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26232: LD_ADDR_VAR 0 12
26236: PUSH
26237: LD_VAR 0 2
26241: PPUSH
26242: LD_VAR 0 3
26246: PPUSH
26247: LD_VAR 0 4
26251: PPUSH
26252: LD_VAR 0 5
26256: PPUSH
26257: LD_VAR 0 1
26261: PPUSH
26262: CALL_OW 248
26266: PPUSH
26267: LD_INT 0
26269: PPUSH
26270: CALL 26778 0 6
26274: ST_TO_ADDR
// if not hexes then
26275: LD_VAR 0 12
26279: NOT
26280: IFFALSE 26284
// exit ;
26282: GO 26773
// hex := GetHexInfo ( x , y ) ;
26284: LD_ADDR_VAR 0 15
26288: PUSH
26289: LD_VAR 0 3
26293: PPUSH
26294: LD_VAR 0 4
26298: PPUSH
26299: CALL_OW 546
26303: ST_TO_ADDR
// if hex [ 1 ] then
26304: LD_VAR 0 15
26308: PUSH
26309: LD_INT 1
26311: ARRAY
26312: IFFALSE 26316
// exit ;
26314: GO 26773
// height := hex [ 2 ] ;
26316: LD_ADDR_VAR 0 13
26320: PUSH
26321: LD_VAR 0 15
26325: PUSH
26326: LD_INT 2
26328: ARRAY
26329: ST_TO_ADDR
// for i = 1 to hexes do
26330: LD_ADDR_VAR 0 7
26334: PUSH
26335: DOUBLE
26336: LD_INT 1
26338: DEC
26339: ST_TO_ADDR
26340: LD_VAR 0 12
26344: PUSH
26345: FOR_TO
26346: IFFALSE 26690
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26348: LD_VAR 0 12
26352: PUSH
26353: LD_VAR 0 7
26357: ARRAY
26358: PUSH
26359: LD_INT 1
26361: ARRAY
26362: PPUSH
26363: LD_VAR 0 12
26367: PUSH
26368: LD_VAR 0 7
26372: ARRAY
26373: PUSH
26374: LD_INT 2
26376: ARRAY
26377: PPUSH
26378: CALL_OW 488
26382: NOT
26383: IFTRUE 26425
26385: PUSH
26386: LD_VAR 0 12
26390: PUSH
26391: LD_VAR 0 7
26395: ARRAY
26396: PUSH
26397: LD_INT 1
26399: ARRAY
26400: PPUSH
26401: LD_VAR 0 12
26405: PUSH
26406: LD_VAR 0 7
26410: ARRAY
26411: PUSH
26412: LD_INT 2
26414: ARRAY
26415: PPUSH
26416: CALL_OW 428
26420: PUSH
26421: LD_INT 0
26423: GREATER
26424: OR
26425: IFTRUE 26463
26427: PUSH
26428: LD_VAR 0 12
26432: PUSH
26433: LD_VAR 0 7
26437: ARRAY
26438: PUSH
26439: LD_INT 1
26441: ARRAY
26442: PPUSH
26443: LD_VAR 0 12
26447: PUSH
26448: LD_VAR 0 7
26452: ARRAY
26453: PUSH
26454: LD_INT 2
26456: ARRAY
26457: PPUSH
26458: CALL_OW 351
26462: OR
26463: IFFALSE 26469
// exit ;
26465: POP
26466: POP
26467: GO 26773
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26469: LD_ADDR_VAR 0 8
26473: PUSH
26474: LD_VAR 0 12
26478: PUSH
26479: LD_VAR 0 7
26483: ARRAY
26484: PUSH
26485: LD_INT 1
26487: ARRAY
26488: PPUSH
26489: LD_VAR 0 12
26493: PUSH
26494: LD_VAR 0 7
26498: ARRAY
26499: PUSH
26500: LD_INT 2
26502: ARRAY
26503: PPUSH
26504: CALL_OW 546
26508: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26509: LD_VAR 0 8
26513: PUSH
26514: LD_INT 1
26516: ARRAY
26517: IFTRUE 26539
26519: PUSH
26520: LD_VAR 0 8
26524: PUSH
26525: LD_INT 2
26527: ARRAY
26528: PUSH
26529: LD_VAR 0 13
26533: PUSH
26534: LD_INT 2
26536: PLUS
26537: GREATER
26538: OR
26539: IFTRUE 26561
26541: PUSH
26542: LD_VAR 0 8
26546: PUSH
26547: LD_INT 2
26549: ARRAY
26550: PUSH
26551: LD_VAR 0 13
26555: PUSH
26556: LD_INT 2
26558: MINUS
26559: LESS
26560: OR
26561: IFTRUE 26629
26563: PUSH
26564: LD_VAR 0 8
26568: PUSH
26569: LD_INT 3
26571: ARRAY
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: LD_INT 8
26578: PUSH
26579: LD_INT 9
26581: PUSH
26582: LD_INT 10
26584: PUSH
26585: LD_INT 11
26587: PUSH
26588: LD_INT 12
26590: PUSH
26591: LD_INT 13
26593: PUSH
26594: LD_INT 16
26596: PUSH
26597: LD_INT 17
26599: PUSH
26600: LD_INT 18
26602: PUSH
26603: LD_INT 19
26605: PUSH
26606: LD_INT 20
26608: PUSH
26609: LD_INT 21
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: IN
26627: NOT
26628: OR
26629: IFTRUE 26642
26631: PUSH
26632: LD_VAR 0 8
26636: PUSH
26637: LD_INT 5
26639: ARRAY
26640: NOT
26641: OR
26642: IFTRUE 26682
26644: PUSH
26645: LD_VAR 0 8
26649: PUSH
26650: LD_INT 6
26652: ARRAY
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: LD_INT 2
26659: PUSH
26660: LD_INT 7
26662: PUSH
26663: LD_INT 9
26665: PUSH
26666: LD_INT 10
26668: PUSH
26669: LD_INT 11
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: IN
26680: NOT
26681: OR
26682: IFFALSE 26688
// exit ;
26684: POP
26685: POP
26686: GO 26773
// end ;
26688: GO 26345
26690: POP
26691: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26692: LD_VAR 0 9
26696: PPUSH
26697: LD_VAR 0 3
26701: PPUSH
26702: LD_VAR 0 4
26706: PPUSH
26707: LD_INT 20
26709: PPUSH
26710: CALL 18592 0 4
26714: PUSH
26715: LD_INT 4
26717: ARRAY
26718: IFFALSE 26722
// exit ;
26720: GO 26773
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26722: LD_VAR 0 2
26726: PUSH
26727: LD_INT 29
26729: PUSH
26730: LD_INT 30
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: IN
26737: IFFALSE 26761
26739: PUSH
26740: LD_VAR 0 3
26744: PPUSH
26745: LD_VAR 0 4
26749: PPUSH
26750: LD_VAR 0 9
26754: PPUSH
26755: CALL_OW 440
26759: NOT
26760: AND
26761: IFFALSE 26765
// exit ;
26763: GO 26773
// result := true ;
26765: LD_ADDR_VAR 0 6
26769: PUSH
26770: LD_INT 1
26772: ST_TO_ADDR
// end ;
26773: LD_VAR 0 6
26777: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
26778: LD_INT 0
26780: PPUSH
26781: PPUSH
26782: PPUSH
26783: PPUSH
26784: PPUSH
26785: PPUSH
26786: PPUSH
26787: PPUSH
26788: PPUSH
26789: PPUSH
26790: PPUSH
26791: PPUSH
26792: PPUSH
26793: PPUSH
26794: PPUSH
26795: PPUSH
26796: PPUSH
26797: PPUSH
26798: PPUSH
26799: PPUSH
26800: PPUSH
26801: PPUSH
26802: PPUSH
26803: PPUSH
26804: PPUSH
26805: PPUSH
26806: PPUSH
26807: PPUSH
26808: PPUSH
26809: PPUSH
26810: PPUSH
26811: PPUSH
26812: PPUSH
26813: PPUSH
26814: PPUSH
26815: PPUSH
26816: PPUSH
26817: PPUSH
26818: PPUSH
26819: PPUSH
26820: PPUSH
26821: PPUSH
26822: PPUSH
26823: PPUSH
26824: PPUSH
26825: PPUSH
26826: PPUSH
26827: PPUSH
26828: PPUSH
26829: PPUSH
26830: PPUSH
26831: PPUSH
26832: PPUSH
26833: PPUSH
26834: PPUSH
26835: PPUSH
26836: PPUSH
26837: PPUSH
// result = [ ] ;
26838: LD_ADDR_VAR 0 7
26842: PUSH
26843: EMPTY
26844: ST_TO_ADDR
// temp_list = [ ] ;
26845: LD_ADDR_VAR 0 9
26849: PUSH
26850: EMPTY
26851: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26852: LD_VAR 0 4
26856: PUSH
26857: LD_INT 0
26859: PUSH
26860: LD_INT 1
26862: PUSH
26863: LD_INT 2
26865: PUSH
26866: LD_INT 3
26868: PUSH
26869: LD_INT 4
26871: PUSH
26872: LD_INT 5
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: IN
26883: NOT
26884: IFTRUE 26927
26886: PUSH
26887: LD_VAR 0 1
26891: PUSH
26892: LD_INT 0
26894: PUSH
26895: LD_INT 1
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: IN
26902: IFFALSE 26926
26904: PUSH
26905: LD_VAR 0 5
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: LD_INT 3
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: LIST
26923: IN
26924: NOT
26925: AND
26926: OR
26927: IFFALSE 26931
// exit ;
26929: GO 45330
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26931: LD_VAR 0 1
26935: PUSH
26936: LD_INT 6
26938: PUSH
26939: LD_INT 7
26941: PUSH
26942: LD_INT 8
26944: PUSH
26945: LD_INT 13
26947: PUSH
26948: LD_INT 12
26950: PUSH
26951: LD_INT 15
26953: PUSH
26954: LD_INT 11
26956: PUSH
26957: LD_INT 14
26959: PUSH
26960: LD_INT 10
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: IN
26974: IFFALSE 26984
// btype = b_lab ;
26976: LD_ADDR_VAR 0 1
26980: PUSH
26981: LD_INT 6
26983: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26984: LD_VAR 0 6
26988: PUSH
26989: LD_INT 0
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: LD_INT 2
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: LIST
27002: IN
27003: NOT
27004: IFTRUE 27072
27006: PUSH
27007: LD_VAR 0 1
27011: PUSH
27012: LD_INT 0
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: LD_INT 2
27020: PUSH
27021: LD_INT 3
27023: PUSH
27024: LD_INT 6
27026: PUSH
27027: LD_INT 36
27029: PUSH
27030: LD_INT 4
27032: PUSH
27033: LD_INT 5
27035: PUSH
27036: LD_INT 31
27038: PUSH
27039: LD_INT 32
27041: PUSH
27042: LD_INT 33
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: IN
27058: NOT
27059: IFFALSE 27071
27061: PUSH
27062: LD_VAR 0 6
27066: PUSH
27067: LD_INT 1
27069: EQUAL
27070: AND
27071: OR
27072: IFTRUE 27104
27074: PUSH
27075: LD_VAR 0 1
27079: PUSH
27080: LD_INT 2
27082: PUSH
27083: LD_INT 3
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: IN
27090: NOT
27091: IFFALSE 27103
27093: PUSH
27094: LD_VAR 0 6
27098: PUSH
27099: LD_INT 2
27101: EQUAL
27102: AND
27103: OR
27104: IFFALSE 27114
// mode = 0 ;
27106: LD_ADDR_VAR 0 6
27110: PUSH
27111: LD_INT 0
27113: ST_TO_ADDR
// case mode of 0 :
27114: LD_VAR 0 6
27118: PUSH
27119: LD_INT 0
27121: DOUBLE
27122: EQUAL
27123: IFTRUE 27127
27125: GO 38580
27127: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27128: LD_ADDR_VAR 0 11
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 0
27145: PUSH
27146: LD_INT 1
27148: NEG
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 1
27156: PUSH
27157: LD_INT 0
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 1
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 0
27176: PUSH
27177: LD_INT 1
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: PUSH
27188: LD_INT 0
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 1
27197: NEG
27198: PUSH
27199: LD_INT 1
27201: NEG
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: LD_INT 2
27213: NEG
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 0
27221: PUSH
27222: LD_INT 2
27224: NEG
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: LD_INT 1
27235: NEG
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 1
27243: PUSH
27244: LD_INT 2
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: LD_INT 2
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: NEG
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 1
27274: PUSH
27275: LD_INT 3
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: LD_INT 3
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 1
27294: NEG
27295: PUSH
27296: LD_INT 2
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27321: LD_ADDR_VAR 0 12
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: LD_INT 1
27341: NEG
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 1
27349: PUSH
27350: LD_INT 0
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 1
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: LD_INT 1
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 1
27379: NEG
27380: PUSH
27381: LD_INT 0
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 1
27390: NEG
27391: PUSH
27392: LD_INT 1
27394: NEG
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 1
27402: PUSH
27403: LD_INT 1
27405: NEG
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 2
27413: PUSH
27414: LD_INT 0
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 2
27423: PUSH
27424: LD_INT 1
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 2
27444: NEG
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 2
27455: NEG
27456: PUSH
27457: LD_INT 1
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 2
27467: NEG
27468: PUSH
27469: LD_INT 1
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 3
27478: NEG
27479: PUSH
27480: LD_INT 0
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 3
27489: NEG
27490: PUSH
27491: LD_INT 1
27493: NEG
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27517: LD_ADDR_VAR 0 13
27521: PUSH
27522: LD_INT 0
27524: PUSH
27525: LD_INT 0
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 0
27534: PUSH
27535: LD_INT 1
27537: NEG
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 1
27545: PUSH
27546: LD_INT 0
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 1
27555: PUSH
27556: LD_INT 1
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 0
27565: PUSH
27566: LD_INT 1
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 1
27575: NEG
27576: PUSH
27577: LD_INT 0
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 1
27586: NEG
27587: PUSH
27588: LD_INT 1
27590: NEG
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 1
27598: NEG
27599: PUSH
27600: LD_INT 2
27602: NEG
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 2
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 2
27620: PUSH
27621: LD_INT 2
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 1
27630: PUSH
27631: LD_INT 2
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 2
27640: NEG
27641: PUSH
27642: LD_INT 1
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 2
27652: NEG
27653: PUSH
27654: LD_INT 2
27656: NEG
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 2
27664: NEG
27665: PUSH
27666: LD_INT 3
27668: NEG
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 3
27676: NEG
27677: PUSH
27678: LD_INT 2
27680: NEG
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 3
27688: NEG
27689: PUSH
27690: LD_INT 3
27692: NEG
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27716: LD_ADDR_VAR 0 14
27720: PUSH
27721: LD_INT 0
27723: PUSH
27724: LD_INT 0
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: LD_INT 1
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 1
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 0
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 1
27774: NEG
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 1
27785: NEG
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 1
27797: NEG
27798: PUSH
27799: LD_INT 2
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: LD_INT 2
27812: NEG
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 1
27831: PUSH
27832: LD_INT 2
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: LD_INT 2
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 1
27851: NEG
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 1
27862: NEG
27863: PUSH
27864: LD_INT 3
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 0
27874: PUSH
27875: LD_INT 3
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: LD_INT 2
27888: NEG
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27912: LD_ADDR_VAR 0 15
27916: PUSH
27917: LD_INT 0
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 0
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 0
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 1
27970: NEG
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 1
27981: NEG
27982: PUSH
27983: LD_INT 1
27985: NEG
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 1
27993: PUSH
27994: LD_INT 1
27996: NEG
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 2
28014: PUSH
28015: LD_INT 1
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 1
28024: NEG
28025: PUSH
28026: LD_INT 1
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 2
28035: NEG
28036: PUSH
28037: LD_INT 0
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 2
28046: NEG
28047: PUSH
28048: LD_INT 1
28050: NEG
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 2
28058: PUSH
28059: LD_INT 1
28061: NEG
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 3
28069: PUSH
28070: LD_INT 0
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 3
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28105: LD_ADDR_VAR 0 16
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 1
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 1
28143: PUSH
28144: LD_INT 1
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 0
28153: PUSH
28154: LD_INT 1
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 1
28163: NEG
28164: PUSH
28165: LD_INT 0
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 1
28186: NEG
28187: PUSH
28188: LD_INT 2
28190: NEG
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 2
28208: PUSH
28209: LD_INT 2
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: LD_INT 2
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 2
28228: NEG
28229: PUSH
28230: LD_INT 1
28232: NEG
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 2
28240: NEG
28241: PUSH
28242: LD_INT 2
28244: NEG
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 3
28252: PUSH
28253: LD_INT 2
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 3
28262: PUSH
28263: LD_INT 3
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 2
28272: PUSH
28273: LD_INT 3
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28298: LD_ADDR_VAR 0 17
28302: PUSH
28303: LD_INT 0
28305: PUSH
28306: LD_INT 0
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 0
28315: PUSH
28316: LD_INT 1
28318: NEG
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 1
28326: PUSH
28327: LD_INT 0
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 1
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 0
28346: PUSH
28347: LD_INT 1
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 1
28356: NEG
28357: PUSH
28358: LD_INT 0
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 1
28367: NEG
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PUSH
28381: LD_INT 2
28383: NEG
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 0
28391: PUSH
28392: LD_INT 2
28394: NEG
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 1
28402: PUSH
28403: LD_INT 1
28405: NEG
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 2
28413: PUSH
28414: LD_INT 0
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 2
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 2
28433: PUSH
28434: LD_INT 2
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 1
28443: PUSH
28444: LD_INT 2
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: NEG
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 2
28474: NEG
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 2
28485: NEG
28486: PUSH
28487: LD_INT 1
28489: NEG
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 2
28497: NEG
28498: PUSH
28499: LD_INT 2
28501: NEG
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28528: LD_ADDR_VAR 0 18
28532: PUSH
28533: LD_INT 0
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 0
28545: PUSH
28546: LD_INT 1
28548: NEG
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 1
28556: PUSH
28557: LD_INT 0
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: LD_INT 1
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 0
28576: PUSH
28577: LD_INT 1
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 1
28586: NEG
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 1
28597: NEG
28598: PUSH
28599: LD_INT 1
28601: NEG
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 1
28609: NEG
28610: PUSH
28611: LD_INT 2
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: LD_INT 2
28624: NEG
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: LD_INT 1
28635: NEG
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 2
28643: PUSH
28644: LD_INT 0
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 2
28653: PUSH
28654: LD_INT 1
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 2
28663: PUSH
28664: LD_INT 2
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: LD_INT 2
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: LD_INT 2
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: NEG
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 2
28704: NEG
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 2
28715: NEG
28716: PUSH
28717: LD_INT 1
28719: NEG
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 2
28727: NEG
28728: PUSH
28729: LD_INT 2
28731: NEG
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28758: LD_ADDR_VAR 0 19
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 0
28775: PUSH
28776: LD_INT 1
28778: NEG
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: LD_INT 1
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 1
28816: NEG
28817: PUSH
28818: LD_INT 0
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 1
28827: NEG
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 1
28839: NEG
28840: PUSH
28841: LD_INT 2
28843: NEG
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 0
28851: PUSH
28852: LD_INT 2
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 1
28862: PUSH
28863: LD_INT 1
28865: NEG
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 2
28873: PUSH
28874: LD_INT 0
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 2
28883: PUSH
28884: LD_INT 1
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 2
28893: PUSH
28894: LD_INT 2
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: LD_INT 2
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: LD_INT 2
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: LD_INT 1
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 2
28934: NEG
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 2
28945: NEG
28946: PUSH
28947: LD_INT 1
28949: NEG
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 2
28957: NEG
28958: PUSH
28959: LD_INT 2
28961: NEG
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28988: LD_ADDR_VAR 0 20
28992: PUSH
28993: LD_INT 0
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 0
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 1
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 1
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 1
29046: NEG
29047: PUSH
29048: LD_INT 0
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 1
29057: NEG
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 1
29069: NEG
29070: PUSH
29071: LD_INT 2
29073: NEG
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 0
29081: PUSH
29082: LD_INT 2
29084: NEG
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: LD_INT 1
29095: NEG
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 2
29103: PUSH
29104: LD_INT 0
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 2
29113: PUSH
29114: LD_INT 1
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 2
29123: PUSH
29124: LD_INT 2
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 1
29133: PUSH
29134: LD_INT 2
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: LD_INT 2
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 2
29164: NEG
29165: PUSH
29166: LD_INT 0
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 2
29175: NEG
29176: PUSH
29177: LD_INT 1
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 2
29187: NEG
29188: PUSH
29189: LD_INT 2
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29218: LD_ADDR_VAR 0 21
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 0
29235: PUSH
29236: LD_INT 1
29238: NEG
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 1
29246: PUSH
29247: LD_INT 0
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 0
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 1
29276: NEG
29277: PUSH
29278: LD_INT 0
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 1
29287: NEG
29288: PUSH
29289: LD_INT 1
29291: NEG
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 1
29299: NEG
29300: PUSH
29301: LD_INT 2
29303: NEG
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 0
29311: PUSH
29312: LD_INT 2
29314: NEG
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 1
29322: PUSH
29323: LD_INT 1
29325: NEG
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 2
29333: PUSH
29334: LD_INT 0
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 2
29343: PUSH
29344: LD_INT 1
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 2
29353: PUSH
29354: LD_INT 2
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 1
29363: PUSH
29364: LD_INT 2
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 0
29373: PUSH
29374: LD_INT 2
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 1
29383: NEG
29384: PUSH
29385: LD_INT 1
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 2
29394: NEG
29395: PUSH
29396: LD_INT 0
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 2
29405: NEG
29406: PUSH
29407: LD_INT 1
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 2
29417: NEG
29418: PUSH
29419: LD_INT 2
29421: NEG
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29448: LD_ADDR_VAR 0 22
29452: PUSH
29453: LD_INT 0
29455: PUSH
29456: LD_INT 0
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 0
29465: PUSH
29466: LD_INT 1
29468: NEG
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 1
29476: PUSH
29477: LD_INT 0
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 1
29486: PUSH
29487: LD_INT 1
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 0
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 1
29506: NEG
29507: PUSH
29508: LD_INT 0
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 1
29517: NEG
29518: PUSH
29519: LD_INT 1
29521: NEG
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 1
29529: NEG
29530: PUSH
29531: LD_INT 2
29533: NEG
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: LD_INT 2
29544: NEG
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 1
29552: PUSH
29553: LD_INT 1
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 2
29563: PUSH
29564: LD_INT 0
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 2
29573: PUSH
29574: LD_INT 1
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 2
29583: PUSH
29584: LD_INT 2
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 1
29593: PUSH
29594: LD_INT 2
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: LD_INT 2
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 1
29613: NEG
29614: PUSH
29615: LD_INT 1
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 2
29624: NEG
29625: PUSH
29626: LD_INT 0
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 2
29635: NEG
29636: PUSH
29637: LD_INT 1
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 2
29647: NEG
29648: PUSH
29649: LD_INT 2
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29678: LD_ADDR_VAR 0 23
29682: PUSH
29683: LD_INT 0
29685: PUSH
29686: LD_INT 0
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: LD_INT 1
29698: NEG
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 1
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 0
29726: PUSH
29727: LD_INT 1
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 1
29736: NEG
29737: PUSH
29738: LD_INT 0
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 1
29747: NEG
29748: PUSH
29749: LD_INT 1
29751: NEG
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 1
29759: NEG
29760: PUSH
29761: LD_INT 2
29763: NEG
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 0
29771: PUSH
29772: LD_INT 2
29774: NEG
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 1
29782: PUSH
29783: LD_INT 1
29785: NEG
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 2
29793: PUSH
29794: LD_INT 0
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 2
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: LD_INT 2
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: LD_INT 2
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 1
29843: NEG
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 2
29854: NEG
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 2
29865: NEG
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 2
29877: NEG
29878: PUSH
29879: LD_INT 2
29881: NEG
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 2
29889: NEG
29890: PUSH
29891: LD_INT 3
29893: NEG
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 1
29901: NEG
29902: PUSH
29903: LD_INT 3
29905: NEG
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: LD_INT 2
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 2
29924: PUSH
29925: LD_INT 1
29927: NEG
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29958: LD_ADDR_VAR 0 24
29962: PUSH
29963: LD_INT 0
29965: PUSH
29966: LD_INT 0
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 0
29975: PUSH
29976: LD_INT 1
29978: NEG
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 1
29986: PUSH
29987: LD_INT 0
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 1
29996: PUSH
29997: LD_INT 1
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 0
30006: PUSH
30007: LD_INT 1
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 1
30016: NEG
30017: PUSH
30018: LD_INT 0
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 1
30027: NEG
30028: PUSH
30029: LD_INT 1
30031: NEG
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 1
30039: NEG
30040: PUSH
30041: LD_INT 2
30043: NEG
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: LD_INT 2
30054: NEG
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: LD_INT 1
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 2
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 2
30083: PUSH
30084: LD_INT 1
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: LD_INT 2
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 1
30103: PUSH
30104: LD_INT 2
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: LD_INT 2
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 1
30123: NEG
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 2
30134: NEG
30135: PUSH
30136: LD_INT 0
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 2
30145: NEG
30146: PUSH
30147: LD_INT 1
30149: NEG
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 2
30157: NEG
30158: PUSH
30159: LD_INT 2
30161: NEG
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 1
30169: PUSH
30170: LD_INT 2
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 2
30180: PUSH
30181: LD_INT 1
30183: NEG
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 3
30191: PUSH
30192: LD_INT 1
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 3
30201: PUSH
30202: LD_INT 2
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30234: LD_ADDR_VAR 0 25
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: LD_INT 0
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: LD_INT 1
30254: NEG
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 1
30262: PUSH
30263: LD_INT 0
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 0
30282: PUSH
30283: LD_INT 1
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 1
30292: NEG
30293: PUSH
30294: LD_INT 0
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: LD_INT 1
30307: NEG
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 1
30315: NEG
30316: PUSH
30317: LD_INT 2
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 0
30327: PUSH
30328: LD_INT 2
30330: NEG
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 1
30338: PUSH
30339: LD_INT 1
30341: NEG
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 2
30349: PUSH
30350: LD_INT 0
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: LD_INT 1
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 0
30389: PUSH
30390: LD_INT 2
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 1
30399: NEG
30400: PUSH
30401: LD_INT 1
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 2
30410: NEG
30411: PUSH
30412: LD_INT 0
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 2
30421: NEG
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 2
30433: NEG
30434: PUSH
30435: LD_INT 2
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 3
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 3
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 2
30465: PUSH
30466: LD_INT 3
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 1
30475: PUSH
30476: LD_INT 3
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30508: LD_ADDR_VAR 0 26
30512: PUSH
30513: LD_INT 0
30515: PUSH
30516: LD_INT 0
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 0
30525: PUSH
30526: LD_INT 1
30528: NEG
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 1
30536: PUSH
30537: LD_INT 0
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 1
30546: PUSH
30547: LD_INT 1
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 0
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 1
30566: NEG
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 1
30577: NEG
30578: PUSH
30579: LD_INT 1
30581: NEG
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 1
30589: NEG
30590: PUSH
30591: LD_INT 2
30593: NEG
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: LD_INT 2
30604: NEG
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: LD_INT 1
30615: NEG
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 2
30623: PUSH
30624: LD_INT 0
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 2
30633: PUSH
30634: LD_INT 1
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 2
30643: PUSH
30644: LD_INT 2
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 1
30653: PUSH
30654: LD_INT 2
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: LD_INT 2
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PUSH
30675: LD_INT 1
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 2
30684: NEG
30685: PUSH
30686: LD_INT 0
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 2
30695: NEG
30696: PUSH
30697: LD_INT 1
30699: NEG
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 2
30707: NEG
30708: PUSH
30709: LD_INT 2
30711: NEG
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 2
30719: PUSH
30720: LD_INT 3
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 1
30729: PUSH
30730: LD_INT 3
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: PUSH
30741: LD_INT 2
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 2
30750: NEG
30751: PUSH
30752: LD_INT 1
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30784: LD_ADDR_VAR 0 27
30788: PUSH
30789: LD_INT 0
30791: PUSH
30792: LD_INT 0
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 0
30801: PUSH
30802: LD_INT 1
30804: NEG
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 1
30812: PUSH
30813: LD_INT 0
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 1
30822: PUSH
30823: LD_INT 1
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 0
30832: PUSH
30833: LD_INT 1
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: NEG
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 1
30853: NEG
30854: PUSH
30855: LD_INT 1
30857: NEG
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 1
30865: NEG
30866: PUSH
30867: LD_INT 2
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 0
30877: PUSH
30878: LD_INT 2
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 1
30888: PUSH
30889: LD_INT 1
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 2
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 2
30909: PUSH
30910: LD_INT 1
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 2
30919: PUSH
30920: LD_INT 2
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: LD_INT 2
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 0
30939: PUSH
30940: LD_INT 2
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 1
30949: NEG
30950: PUSH
30951: LD_INT 1
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 2
30960: NEG
30961: PUSH
30962: LD_INT 0
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 2
30971: NEG
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 2
30983: NEG
30984: PUSH
30985: LD_INT 2
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 1
30995: NEG
30996: PUSH
30997: LD_INT 2
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 2
31006: NEG
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 3
31017: NEG
31018: PUSH
31019: LD_INT 1
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 3
31029: NEG
31030: PUSH
31031: LD_INT 2
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31064: LD_ADDR_VAR 0 28
31068: PUSH
31069: LD_INT 0
31071: PUSH
31072: LD_INT 0
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 0
31081: PUSH
31082: LD_INT 1
31084: NEG
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 1
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 0
31112: PUSH
31113: LD_INT 1
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 1
31122: NEG
31123: PUSH
31124: LD_INT 0
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 1
31133: NEG
31134: PUSH
31135: LD_INT 1
31137: NEG
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 1
31145: NEG
31146: PUSH
31147: LD_INT 2
31149: NEG
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 0
31157: PUSH
31158: LD_INT 2
31160: NEG
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: LD_INT 1
31171: NEG
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 2
31179: PUSH
31180: LD_INT 0
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 2
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 2
31199: PUSH
31200: LD_INT 2
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: LD_INT 2
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: LD_INT 2
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 1
31229: NEG
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 2
31240: NEG
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 2
31251: NEG
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 2
31263: NEG
31264: PUSH
31265: LD_INT 2
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 2
31275: NEG
31276: PUSH
31277: LD_INT 3
31279: NEG
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 1
31287: NEG
31288: PUSH
31289: LD_INT 3
31291: NEG
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 3
31299: NEG
31300: PUSH
31301: LD_INT 1
31303: NEG
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 3
31311: NEG
31312: PUSH
31313: LD_INT 2
31315: NEG
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31346: LD_ADDR_VAR 0 29
31350: PUSH
31351: LD_INT 0
31353: PUSH
31354: LD_INT 0
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 0
31363: PUSH
31364: LD_INT 1
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: LD_INT 0
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 1
31384: PUSH
31385: LD_INT 1
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 0
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 1
31404: NEG
31405: PUSH
31406: LD_INT 0
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 1
31415: NEG
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 1
31427: NEG
31428: PUSH
31429: LD_INT 2
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 0
31439: PUSH
31440: LD_INT 2
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 1
31450: PUSH
31451: LD_INT 1
31453: NEG
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 2
31461: PUSH
31462: LD_INT 0
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 2
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 1
31481: PUSH
31482: LD_INT 2
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 0
31491: PUSH
31492: LD_INT 2
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 1
31501: NEG
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 2
31512: NEG
31513: PUSH
31514: LD_INT 1
31516: NEG
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 2
31524: NEG
31525: PUSH
31526: LD_INT 2
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 2
31536: NEG
31537: PUSH
31538: LD_INT 3
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 2
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 3
31559: PUSH
31560: LD_INT 1
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: LD_INT 3
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 1
31579: NEG
31580: PUSH
31581: LD_INT 2
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 3
31590: NEG
31591: PUSH
31592: LD_INT 2
31594: NEG
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31625: LD_ADDR_VAR 0 30
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 0
31642: PUSH
31643: LD_INT 1
31645: NEG
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 1
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: LD_INT 1
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: NEG
31684: PUSH
31685: LD_INT 0
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 1
31706: NEG
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 0
31718: PUSH
31719: LD_INT 2
31721: NEG
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: LD_INT 1
31732: NEG
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 2
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 2
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 2
31760: PUSH
31761: LD_INT 2
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: LD_INT 2
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 1
31780: NEG
31781: PUSH
31782: LD_INT 1
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 2
31791: NEG
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 2
31802: NEG
31803: PUSH
31804: LD_INT 1
31806: NEG
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: LD_INT 3
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: LD_INT 2
31829: NEG
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 3
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 2
31847: PUSH
31848: LD_INT 3
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 2
31857: NEG
31858: PUSH
31859: LD_INT 1
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 3
31868: NEG
31869: PUSH
31870: LD_INT 1
31872: NEG
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31903: LD_ADDR_VAR 0 31
31907: PUSH
31908: LD_INT 0
31910: PUSH
31911: LD_INT 0
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: LD_INT 1
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: PUSH
31942: LD_INT 1
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: LD_INT 1
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 1
31961: NEG
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 1
31972: NEG
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 1
31984: NEG
31985: PUSH
31986: LD_INT 2
31988: NEG
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: LD_INT 1
31999: NEG
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 2
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 2
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 2
32027: PUSH
32028: LD_INT 2
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 1
32037: PUSH
32038: LD_INT 2
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 0
32047: PUSH
32048: LD_INT 2
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 1
32057: NEG
32058: PUSH
32059: LD_INT 1
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 2
32068: NEG
32069: PUSH
32070: LD_INT 1
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 2
32080: NEG
32081: PUSH
32082: LD_INT 2
32084: NEG
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 2
32092: NEG
32093: PUSH
32094: LD_INT 3
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 2
32104: PUSH
32105: LD_INT 1
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 3
32115: PUSH
32116: LD_INT 1
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: LD_INT 3
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 1
32135: NEG
32136: PUSH
32137: LD_INT 2
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 3
32146: NEG
32147: PUSH
32148: LD_INT 2
32150: NEG
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32181: LD_ADDR_VAR 0 32
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: LD_INT 1
32201: NEG
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 1
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 1
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 0
32229: PUSH
32230: LD_INT 1
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 1
32250: NEG
32251: PUSH
32252: LD_INT 1
32254: NEG
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 1
32262: NEG
32263: PUSH
32264: LD_INT 2
32266: NEG
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: LD_INT 2
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: LD_INT 1
32288: NEG
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 2
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 2
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: PUSH
32317: LD_INT 2
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 0
32326: PUSH
32327: LD_INT 2
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 1
32336: NEG
32337: PUSH
32338: LD_INT 1
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 2
32347: NEG
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 2
32358: NEG
32359: PUSH
32360: LD_INT 1
32362: NEG
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 1
32370: NEG
32371: PUSH
32372: LD_INT 3
32374: NEG
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 1
32382: PUSH
32383: LD_INT 2
32385: NEG
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 3
32393: PUSH
32394: LD_INT 2
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 2
32403: PUSH
32404: LD_INT 3
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 2
32413: NEG
32414: PUSH
32415: LD_INT 1
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 3
32424: NEG
32425: PUSH
32426: LD_INT 1
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32459: LD_ADDR_VAR 0 33
32463: PUSH
32464: LD_INT 0
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 0
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: LD_INT 0
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 1
32497: PUSH
32498: LD_INT 1
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 0
32507: PUSH
32508: LD_INT 1
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 1
32517: NEG
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 1
32528: NEG
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 1
32540: NEG
32541: PUSH
32542: LD_INT 2
32544: NEG
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: LD_INT 1
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 2
32563: PUSH
32564: LD_INT 0
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 2
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 1
32583: PUSH
32584: LD_INT 2
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: LD_INT 2
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 1
32603: NEG
32604: PUSH
32605: LD_INT 1
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 2
32614: NEG
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 2
32625: NEG
32626: PUSH
32627: LD_INT 1
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 2
32637: NEG
32638: PUSH
32639: LD_INT 2
32641: NEG
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 2
32649: NEG
32650: PUSH
32651: LD_INT 3
32653: NEG
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 2
32661: PUSH
32662: LD_INT 1
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 3
32672: PUSH
32673: LD_INT 1
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 1
32682: PUSH
32683: LD_INT 3
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 1
32692: NEG
32693: PUSH
32694: LD_INT 2
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 3
32703: NEG
32704: PUSH
32705: LD_INT 2
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32738: LD_ADDR_VAR 0 34
32742: PUSH
32743: LD_INT 0
32745: PUSH
32746: LD_INT 0
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 0
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 1
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: LD_INT 1
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: LD_INT 1
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 1
32796: NEG
32797: PUSH
32798: LD_INT 0
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: LD_INT 1
32811: NEG
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 1
32819: NEG
32820: PUSH
32821: LD_INT 2
32823: NEG
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 0
32831: PUSH
32832: LD_INT 2
32834: NEG
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 1
32842: PUSH
32843: LD_INT 1
32845: NEG
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 2
32853: PUSH
32854: LD_INT 1
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 2
32863: PUSH
32864: LD_INT 2
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 1
32873: PUSH
32874: LD_INT 2
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 1
32883: NEG
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 2
32894: NEG
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 2
32905: NEG
32906: PUSH
32907: LD_INT 1
32909: NEG
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 2
32917: NEG
32918: PUSH
32919: LD_INT 2
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 1
32929: NEG
32930: PUSH
32931: LD_INT 3
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 1
32941: PUSH
32942: LD_INT 2
32944: NEG
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 3
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: LD_INT 3
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 2
32972: NEG
32973: PUSH
32974: LD_INT 1
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 3
32983: NEG
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33018: LD_ADDR_VAR 0 35
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: LD_INT 0
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 0
33035: PUSH
33036: LD_INT 1
33038: NEG
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 1
33046: PUSH
33047: LD_INT 0
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 1
33056: PUSH
33057: LD_INT 1
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: LD_INT 1
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: NEG
33077: PUSH
33078: LD_INT 0
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 1
33087: NEG
33088: PUSH
33089: LD_INT 1
33091: NEG
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 2
33099: PUSH
33100: LD_INT 1
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 2
33109: NEG
33110: PUSH
33111: LD_INT 1
33113: NEG
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33130: LD_ADDR_VAR 0 36
33134: PUSH
33135: LD_INT 0
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 0
33147: PUSH
33148: LD_INT 1
33150: NEG
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 1
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 1
33168: PUSH
33169: LD_INT 1
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: LD_INT 1
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 1
33188: NEG
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 1
33199: NEG
33200: PUSH
33201: LD_INT 1
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 1
33211: NEG
33212: PUSH
33213: LD_INT 2
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: LD_INT 2
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33242: LD_ADDR_VAR 0 37
33246: PUSH
33247: LD_INT 0
33249: PUSH
33250: LD_INT 0
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 0
33259: PUSH
33260: LD_INT 1
33262: NEG
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: LD_INT 0
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 1
33280: PUSH
33281: LD_INT 1
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: LD_INT 1
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 1
33300: NEG
33301: PUSH
33302: LD_INT 0
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 1
33311: NEG
33312: PUSH
33313: LD_INT 1
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 1
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 1
33334: NEG
33335: PUSH
33336: LD_INT 1
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33354: LD_ADDR_VAR 0 38
33358: PUSH
33359: LD_INT 0
33361: PUSH
33362: LD_INT 0
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 0
33371: PUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 1
33382: PUSH
33383: LD_INT 0
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 1
33392: PUSH
33393: LD_INT 1
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 0
33402: PUSH
33403: LD_INT 1
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: LD_INT 0
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 1
33423: NEG
33424: PUSH
33425: LD_INT 1
33427: NEG
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 2
33435: PUSH
33436: LD_INT 1
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 2
33445: NEG
33446: PUSH
33447: LD_INT 1
33449: NEG
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33466: LD_ADDR_VAR 0 39
33470: PUSH
33471: LD_INT 0
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 0
33483: PUSH
33484: LD_INT 1
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 1
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 1
33524: NEG
33525: PUSH
33526: LD_INT 0
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: NEG
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 1
33547: NEG
33548: PUSH
33549: LD_INT 2
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 1
33559: PUSH
33560: LD_INT 2
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33578: LD_ADDR_VAR 0 40
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: LD_INT 0
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: NEG
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: LD_INT 1
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: LD_INT 1
33662: NEG
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 1
33670: NEG
33671: PUSH
33672: LD_INT 1
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33690: LD_ADDR_VAR 0 41
33694: PUSH
33695: LD_INT 0
33697: PUSH
33698: LD_INT 0
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 0
33707: PUSH
33708: LD_INT 1
33710: NEG
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 1
33718: PUSH
33719: LD_INT 0
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 1
33728: PUSH
33729: LD_INT 1
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: LD_INT 1
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 1
33748: NEG
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 1
33759: NEG
33760: PUSH
33761: LD_INT 1
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: LD_INT 2
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 2
33804: PUSH
33805: LD_INT 1
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 2
33814: PUSH
33815: LD_INT 2
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 1
33824: PUSH
33825: LD_INT 2
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 1
33834: NEG
33835: PUSH
33836: LD_INT 1
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 2
33845: NEG
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 2
33856: NEG
33857: PUSH
33858: LD_INT 1
33860: NEG
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 2
33868: NEG
33869: PUSH
33870: LD_INT 2
33872: NEG
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 2
33880: NEG
33881: PUSH
33882: LD_INT 3
33884: NEG
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 2
33892: PUSH
33893: LD_INT 1
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 3
33903: PUSH
33904: LD_INT 0
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 3
33913: PUSH
33914: LD_INT 1
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 3
33923: PUSH
33924: LD_INT 2
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 3
33933: PUSH
33934: LD_INT 3
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 2
33943: PUSH
33944: LD_INT 3
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 2
33953: NEG
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 3
33964: NEG
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 3
33975: NEG
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 3
33987: NEG
33988: PUSH
33989: LD_INT 2
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 3
33999: NEG
34000: PUSH
34001: LD_INT 3
34003: NEG
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34040: LD_ADDR_VAR 0 42
34044: PUSH
34045: LD_INT 0
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: LD_INT 1
34060: NEG
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: LD_INT 0
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: LD_INT 1
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 0
34088: PUSH
34089: LD_INT 1
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 1
34098: NEG
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: LD_INT 1
34113: NEG
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 1
34121: NEG
34122: PUSH
34123: LD_INT 2
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 0
34133: PUSH
34134: LD_INT 2
34136: NEG
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: LD_INT 1
34147: NEG
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 2
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 2
34165: PUSH
34166: LD_INT 2
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 1
34175: PUSH
34176: LD_INT 2
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: LD_INT 2
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 1
34195: NEG
34196: PUSH
34197: LD_INT 1
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 2
34206: NEG
34207: PUSH
34208: LD_INT 1
34210: NEG
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 2
34218: NEG
34219: PUSH
34220: LD_INT 2
34222: NEG
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 2
34230: NEG
34231: PUSH
34232: LD_INT 3
34234: NEG
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 1
34242: NEG
34243: PUSH
34244: LD_INT 3
34246: NEG
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 0
34254: PUSH
34255: LD_INT 3
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 1
34265: PUSH
34266: LD_INT 2
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 3
34276: PUSH
34277: LD_INT 2
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 3
34286: PUSH
34287: LD_INT 3
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 2
34296: PUSH
34297: LD_INT 3
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: LD_INT 3
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: LD_INT 3
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 1
34326: NEG
34327: PUSH
34328: LD_INT 2
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 3
34337: NEG
34338: PUSH
34339: LD_INT 2
34341: NEG
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 3
34349: NEG
34350: PUSH
34351: LD_INT 3
34353: NEG
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34390: LD_ADDR_VAR 0 43
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: LD_INT 1
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 0
34438: PUSH
34439: LD_INT 1
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: LD_INT 0
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 1
34459: NEG
34460: PUSH
34461: LD_INT 1
34463: NEG
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 1
34471: NEG
34472: PUSH
34473: LD_INT 2
34475: NEG
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 0
34483: PUSH
34484: LD_INT 2
34486: NEG
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: LD_INT 1
34497: NEG
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: LD_INT 0
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 2
34515: PUSH
34516: LD_INT 1
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 1
34525: PUSH
34526: LD_INT 2
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: LD_INT 2
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 1
34545: NEG
34546: PUSH
34547: LD_INT 1
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 2
34556: NEG
34557: PUSH
34558: LD_INT 0
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 2
34567: NEG
34568: PUSH
34569: LD_INT 1
34571: NEG
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 1
34579: NEG
34580: PUSH
34581: LD_INT 3
34583: NEG
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 0
34591: PUSH
34592: LD_INT 3
34594: NEG
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: LD_INT 2
34605: NEG
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: LD_INT 1
34616: NEG
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 3
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 3
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: LD_INT 3
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: LD_INT 3
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 1
34664: NEG
34665: PUSH
34666: LD_INT 2
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 2
34675: NEG
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 3
34686: NEG
34687: PUSH
34688: LD_INT 0
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 3
34697: NEG
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34738: LD_ADDR_VAR 0 44
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: LD_INT 0
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 0
34755: PUSH
34756: LD_INT 1
34758: NEG
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 1
34766: PUSH
34767: LD_INT 0
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 1
34776: PUSH
34777: LD_INT 1
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 0
34786: PUSH
34787: LD_INT 1
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 1
34796: NEG
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 1
34807: NEG
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: LD_INT 2
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 1
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 2
34842: PUSH
34843: LD_INT 0
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 2
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 2
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 1
34872: PUSH
34873: LD_INT 2
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 1
34882: NEG
34883: PUSH
34884: LD_INT 1
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 2
34893: NEG
34894: PUSH
34895: LD_INT 0
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 2
34904: NEG
34905: PUSH
34906: LD_INT 1
34908: NEG
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 2
34916: NEG
34917: PUSH
34918: LD_INT 2
34920: NEG
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 2
34928: NEG
34929: PUSH
34930: LD_INT 3
34932: NEG
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: LD_INT 1
34943: NEG
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 3
34951: PUSH
34952: LD_INT 0
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 3
34961: PUSH
34962: LD_INT 1
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 3
34971: PUSH
34972: LD_INT 2
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 3
34981: PUSH
34982: LD_INT 3
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 2
34991: PUSH
34992: LD_INT 3
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 2
35001: NEG
35002: PUSH
35003: LD_INT 1
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 3
35012: NEG
35013: PUSH
35014: LD_INT 0
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 3
35023: NEG
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 3
35035: NEG
35036: PUSH
35037: LD_INT 2
35039: NEG
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 3
35047: NEG
35048: PUSH
35049: LD_INT 3
35051: NEG
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35088: LD_ADDR_VAR 0 45
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 0
35105: PUSH
35106: LD_INT 1
35108: NEG
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 1
35116: PUSH
35117: LD_INT 0
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 1
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: LD_INT 1
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 1
35157: NEG
35158: PUSH
35159: LD_INT 1
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 1
35169: NEG
35170: PUSH
35171: LD_INT 2
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 0
35181: PUSH
35182: LD_INT 2
35184: NEG
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 1
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 2
35203: PUSH
35204: LD_INT 1
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 2
35213: PUSH
35214: LD_INT 2
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: LD_INT 2
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 1
35243: NEG
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 2
35254: NEG
35255: PUSH
35256: LD_INT 1
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 2
35266: NEG
35267: PUSH
35268: LD_INT 2
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 2
35278: NEG
35279: PUSH
35280: LD_INT 3
35282: NEG
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 1
35290: NEG
35291: PUSH
35292: LD_INT 3
35294: NEG
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: LD_INT 3
35305: NEG
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 1
35313: PUSH
35314: LD_INT 2
35316: NEG
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 3
35324: PUSH
35325: LD_INT 2
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 3
35334: PUSH
35335: LD_INT 3
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: LD_INT 3
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: PUSH
35355: LD_INT 3
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: LD_INT 3
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 1
35374: NEG
35375: PUSH
35376: LD_INT 2
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 3
35385: NEG
35386: PUSH
35387: LD_INT 2
35389: NEG
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 3
35397: NEG
35398: PUSH
35399: LD_INT 3
35401: NEG
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35438: LD_ADDR_VAR 0 46
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 0
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: LD_INT 1
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 0
35486: PUSH
35487: LD_INT 1
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 1
35496: NEG
35497: PUSH
35498: LD_INT 0
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 1
35507: NEG
35508: PUSH
35509: LD_INT 1
35511: NEG
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 1
35519: NEG
35520: PUSH
35521: LD_INT 2
35523: NEG
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 0
35531: PUSH
35532: LD_INT 2
35534: NEG
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 1
35542: PUSH
35543: LD_INT 1
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 2
35553: PUSH
35554: LD_INT 0
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: LD_INT 1
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 1
35573: PUSH
35574: LD_INT 2
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 0
35583: PUSH
35584: LD_INT 2
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 1
35593: NEG
35594: PUSH
35595: LD_INT 1
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 2
35604: NEG
35605: PUSH
35606: LD_INT 0
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 2
35615: NEG
35616: PUSH
35617: LD_INT 1
35619: NEG
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 1
35627: NEG
35628: PUSH
35629: LD_INT 3
35631: NEG
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: LD_INT 3
35642: NEG
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 1
35650: PUSH
35651: LD_INT 2
35653: NEG
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 2
35661: PUSH
35662: LD_INT 1
35664: NEG
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 3
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 3
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 1
35692: PUSH
35693: LD_INT 3
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 0
35702: PUSH
35703: LD_INT 3
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 1
35712: NEG
35713: PUSH
35714: LD_INT 2
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 2
35723: NEG
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 3
35734: NEG
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 3
35745: NEG
35746: PUSH
35747: LD_INT 1
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35786: LD_ADDR_VAR 0 47
35790: PUSH
35791: LD_INT 0
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: LD_INT 1
35806: NEG
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 1
35814: PUSH
35815: LD_INT 0
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 1
35824: PUSH
35825: LD_INT 1
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 0
35834: PUSH
35835: LD_INT 1
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 1
35844: NEG
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 1
35855: NEG
35856: PUSH
35857: LD_INT 1
35859: NEG
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: LD_INT 2
35871: NEG
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: LD_INT 2
35882: NEG
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: LD_INT 1
35893: NEG
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 2
35901: NEG
35902: PUSH
35903: LD_INT 1
35905: NEG
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 2
35913: NEG
35914: PUSH
35915: LD_INT 2
35917: NEG
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35937: LD_ADDR_VAR 0 48
35941: PUSH
35942: LD_INT 0
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: LD_INT 1
35957: NEG
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 1
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: LD_INT 1
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 0
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: NEG
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 1
36006: NEG
36007: PUSH
36008: LD_INT 1
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 1
36018: NEG
36019: PUSH
36020: LD_INT 2
36022: NEG
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: LD_INT 2
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: LD_INT 1
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 2
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 2
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36084: LD_ADDR_VAR 0 49
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: LD_INT 0
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: LD_INT 1
36104: NEG
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 1
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 1
36122: PUSH
36123: LD_INT 1
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 1
36142: NEG
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 1
36153: NEG
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: LD_INT 1
36168: NEG
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 2
36176: PUSH
36177: LD_INT 0
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 2
36186: PUSH
36187: LD_INT 1
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 2
36196: PUSH
36197: LD_INT 2
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: LD_INT 2
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36228: LD_ADDR_VAR 0 50
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 1
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 1
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 1
36286: NEG
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 1
36297: NEG
36298: PUSH
36299: LD_INT 1
36301: NEG
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 2
36309: PUSH
36310: LD_INT 1
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 2
36319: PUSH
36320: LD_INT 2
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: LD_INT 2
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 0
36339: PUSH
36340: LD_INT 2
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 1
36349: NEG
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36372: LD_ADDR_VAR 0 51
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 0
36389: PUSH
36390: LD_INT 1
36392: NEG
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 1
36400: PUSH
36401: LD_INT 0
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 0
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 1
36430: NEG
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 1
36441: NEG
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 1
36453: PUSH
36454: LD_INT 2
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: LD_INT 2
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 1
36473: NEG
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 2
36484: NEG
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 2
36495: NEG
36496: PUSH
36497: LD_INT 1
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36519: LD_ADDR_VAR 0 52
36523: PUSH
36524: LD_INT 0
36526: PUSH
36527: LD_INT 0
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: LD_INT 1
36539: NEG
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 1
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 1
36557: PUSH
36558: LD_INT 1
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: LD_INT 1
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 1
36577: NEG
36578: PUSH
36579: LD_INT 0
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: LD_INT 1
36592: NEG
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: NEG
36601: PUSH
36602: LD_INT 2
36604: NEG
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: LD_INT 1
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 2
36623: NEG
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 2
36634: NEG
36635: PUSH
36636: LD_INT 1
36638: NEG
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 2
36646: NEG
36647: PUSH
36648: LD_INT 2
36650: NEG
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36670: LD_ADDR_VAR 0 53
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: LD_INT 1
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 1
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: NEG
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: NEG
36740: PUSH
36741: LD_INT 1
36743: NEG
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 1
36751: NEG
36752: PUSH
36753: LD_INT 2
36755: NEG
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: LD_INT 2
36766: NEG
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 1
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 2
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 2
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 2
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: LD_INT 2
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: LD_INT 2
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 1
36835: NEG
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 2
36846: NEG
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 2
36857: NEG
36858: PUSH
36859: LD_INT 1
36861: NEG
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 2
36869: NEG
36870: PUSH
36871: LD_INT 2
36873: NEG
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36900: LD_ADDR_VAR 0 54
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: LD_INT 0
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: LD_INT 1
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 1
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: LD_INT 1
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: NEG
36959: PUSH
36960: LD_INT 0
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 1
36969: NEG
36970: PUSH
36971: LD_INT 1
36973: NEG
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 1
36981: NEG
36982: PUSH
36983: LD_INT 2
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: LD_INT 2
36996: NEG
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 1
37004: PUSH
37005: LD_INT 1
37007: NEG
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 2
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 2
37025: PUSH
37026: LD_INT 1
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: LD_INT 2
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: LD_INT 2
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: LD_INT 2
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: NEG
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 2
37076: NEG
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 2
37087: NEG
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 2
37099: NEG
37100: PUSH
37101: LD_INT 2
37103: NEG
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37130: LD_ADDR_VAR 0 55
37134: PUSH
37135: LD_INT 0
37137: PUSH
37138: LD_INT 0
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 0
37147: PUSH
37148: LD_INT 1
37150: NEG
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: LD_INT 1
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 1
37188: NEG
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: LD_INT 1
37203: NEG
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 1
37211: NEG
37212: PUSH
37213: LD_INT 2
37215: NEG
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: LD_INT 2
37226: NEG
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 1
37234: PUSH
37235: LD_INT 1
37237: NEG
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 2
37255: PUSH
37256: LD_INT 1
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 2
37265: PUSH
37266: LD_INT 2
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 1
37275: PUSH
37276: LD_INT 2
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 0
37285: PUSH
37286: LD_INT 2
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 1
37295: NEG
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 2
37306: NEG
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 2
37317: NEG
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 2
37329: NEG
37330: PUSH
37331: LD_INT 2
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37360: LD_ADDR_VAR 0 56
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: LD_INT 1
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 1
37418: NEG
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 1
37441: NEG
37442: PUSH
37443: LD_INT 2
37445: NEG
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: LD_INT 2
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: PUSH
37465: LD_INT 1
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 2
37475: PUSH
37476: LD_INT 0
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: LD_INT 1
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 1
37525: NEG
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 2
37536: NEG
37537: PUSH
37538: LD_INT 0
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 2
37547: NEG
37548: PUSH
37549: LD_INT 1
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 2
37559: NEG
37560: PUSH
37561: LD_INT 2
37563: NEG
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37590: LD_ADDR_VAR 0 57
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: LD_INT 1
37610: NEG
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: LD_INT 0
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: LD_INT 1
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 1
37671: NEG
37672: PUSH
37673: LD_INT 2
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: LD_INT 2
37686: NEG
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 1
37694: PUSH
37695: LD_INT 1
37697: NEG
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: LD_INT 0
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 2
37715: PUSH
37716: LD_INT 1
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 2
37725: PUSH
37726: LD_INT 2
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: LD_INT 2
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: LD_INT 2
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: NEG
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 2
37766: NEG
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 2
37777: NEG
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 2
37789: NEG
37790: PUSH
37791: LD_INT 2
37793: NEG
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37820: LD_ADDR_VAR 0 58
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 0
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 1
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 1
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: LD_INT 2
37905: NEG
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 2
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: LD_INT 1
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: LD_INT 2
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: LD_INT 2
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 2
37996: NEG
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 2
38007: NEG
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 2
38019: NEG
38020: PUSH
38021: LD_INT 2
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38050: LD_ADDR_VAR 0 59
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 1
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 1
38088: PUSH
38089: LD_INT 1
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 0
38098: PUSH
38099: LD_INT 1
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 1
38108: NEG
38109: PUSH
38110: LD_INT 0
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 1
38119: NEG
38120: PUSH
38121: LD_INT 1
38123: NEG
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38138: LD_ADDR_VAR 0 60
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: LD_INT 0
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: LD_INT 1
38158: NEG
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: NEG
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38226: LD_ADDR_VAR 0 61
38230: PUSH
38231: LD_INT 0
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 1
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 1
38264: PUSH
38265: LD_INT 1
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: LD_INT 1
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 1
38284: NEG
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38314: LD_ADDR_VAR 0 62
38318: PUSH
38319: LD_INT 0
38321: PUSH
38322: LD_INT 0
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: LD_INT 1
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38402: LD_ADDR_VAR 0 63
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 0
38419: PUSH
38420: LD_INT 1
38422: NEG
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: LD_INT 1
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: LD_INT 1
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 1
38460: NEG
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: LD_INT 1
38475: NEG
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38490: LD_ADDR_VAR 0 64
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: ST_TO_ADDR
// end ; 1 :
38578: GO 44475
38580: LD_INT 1
38582: DOUBLE
38583: EQUAL
38584: IFTRUE 38588
38586: GO 41211
38588: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38589: LD_ADDR_VAR 0 11
38593: PUSH
38594: LD_INT 1
38596: NEG
38597: PUSH
38598: LD_INT 3
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: LD_INT 3
38611: NEG
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: LD_INT 2
38622: NEG
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: LIST
38632: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38633: LD_ADDR_VAR 0 12
38637: PUSH
38638: LD_INT 2
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 3
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 3
38661: PUSH
38662: LD_INT 1
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: LIST
38673: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38674: LD_ADDR_VAR 0 13
38678: PUSH
38679: LD_INT 3
38681: PUSH
38682: LD_INT 2
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 3
38691: PUSH
38692: LD_INT 3
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 2
38701: PUSH
38702: LD_INT 3
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38714: LD_ADDR_VAR 0 14
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: LD_INT 3
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: LD_INT 3
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 1
38741: NEG
38742: PUSH
38743: LD_INT 2
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: LIST
38754: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38755: LD_ADDR_VAR 0 15
38759: PUSH
38760: LD_INT 2
38762: NEG
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 3
38773: NEG
38774: PUSH
38775: LD_INT 0
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 3
38784: NEG
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: LIST
38798: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38799: LD_ADDR_VAR 0 16
38803: PUSH
38804: LD_INT 2
38806: NEG
38807: PUSH
38808: LD_INT 3
38810: NEG
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 3
38818: NEG
38819: PUSH
38820: LD_INT 2
38822: NEG
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 3
38830: NEG
38831: PUSH
38832: LD_INT 3
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: LIST
38844: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38845: LD_ADDR_VAR 0 17
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PUSH
38854: LD_INT 3
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: LD_INT 3
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: LD_INT 2
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: LIST
38888: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38889: LD_ADDR_VAR 0 18
38893: PUSH
38894: LD_INT 2
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 3
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 3
38917: PUSH
38918: LD_INT 1
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: LIST
38929: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38930: LD_ADDR_VAR 0 19
38934: PUSH
38935: LD_INT 3
38937: PUSH
38938: LD_INT 2
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 3
38947: PUSH
38948: LD_INT 3
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 2
38957: PUSH
38958: LD_INT 3
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38970: LD_ADDR_VAR 0 20
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: LD_INT 3
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: LD_INT 3
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 1
38997: NEG
38998: PUSH
38999: LD_INT 2
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39011: LD_ADDR_VAR 0 21
39015: PUSH
39016: LD_INT 2
39018: NEG
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 3
39029: NEG
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 3
39040: NEG
39041: PUSH
39042: LD_INT 1
39044: NEG
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: LIST
39054: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39055: LD_ADDR_VAR 0 22
39059: PUSH
39060: LD_INT 2
39062: NEG
39063: PUSH
39064: LD_INT 3
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 3
39074: NEG
39075: PUSH
39076: LD_INT 2
39078: NEG
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 3
39086: NEG
39087: PUSH
39088: LD_INT 3
39090: NEG
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39101: LD_ADDR_VAR 0 23
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: LD_INT 3
39111: NEG
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: NEG
39120: PUSH
39121: LD_INT 4
39123: NEG
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: LD_INT 3
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: LIST
39144: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39145: LD_ADDR_VAR 0 24
39149: PUSH
39150: LD_INT 3
39152: PUSH
39153: LD_INT 0
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 3
39162: PUSH
39163: LD_INT 1
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 4
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: LIST
39185: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39186: LD_ADDR_VAR 0 25
39190: PUSH
39191: LD_INT 3
39193: PUSH
39194: LD_INT 3
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 4
39203: PUSH
39204: LD_INT 3
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 3
39213: PUSH
39214: LD_INT 4
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: LIST
39225: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39226: LD_ADDR_VAR 0 26
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: LD_INT 3
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: PUSH
39244: LD_INT 4
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: LD_INT 3
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: LIST
39266: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39267: LD_ADDR_VAR 0 27
39271: PUSH
39272: LD_INT 3
39274: NEG
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 3
39285: NEG
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 4
39296: NEG
39297: PUSH
39298: LD_INT 1
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: LIST
39310: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39311: LD_ADDR_VAR 0 28
39315: PUSH
39316: LD_INT 3
39318: NEG
39319: PUSH
39320: LD_INT 3
39322: NEG
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 3
39330: NEG
39331: PUSH
39332: LD_INT 4
39334: NEG
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 4
39342: NEG
39343: PUSH
39344: LD_INT 3
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: LIST
39356: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39357: LD_ADDR_VAR 0 29
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: LD_INT 3
39368: NEG
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: LD_INT 3
39379: NEG
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: LD_INT 4
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 0
39410: PUSH
39411: LD_INT 4
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: LD_INT 3
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: NEG
39433: PUSH
39434: LD_INT 5
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: LD_INT 5
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: LD_INT 4
39458: NEG
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 1
39466: NEG
39467: PUSH
39468: LD_INT 6
39470: NEG
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: LD_INT 6
39481: NEG
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 1
39489: PUSH
39490: LD_INT 5
39492: NEG
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39512: LD_ADDR_VAR 0 30
39516: PUSH
39517: LD_INT 2
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 3
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 3
39540: PUSH
39541: LD_INT 1
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 3
39550: PUSH
39551: LD_INT 1
39553: NEG
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 4
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 4
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 4
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 5
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 5
39602: PUSH
39603: LD_INT 1
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 5
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 6
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 6
39633: PUSH
39634: LD_INT 1
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39655: LD_ADDR_VAR 0 31
39659: PUSH
39660: LD_INT 3
39662: PUSH
39663: LD_INT 2
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 3
39672: PUSH
39673: LD_INT 3
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: LD_INT 3
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 4
39692: PUSH
39693: LD_INT 3
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 4
39702: PUSH
39703: LD_INT 4
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 3
39712: PUSH
39713: LD_INT 4
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 5
39722: PUSH
39723: LD_INT 4
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 5
39732: PUSH
39733: LD_INT 5
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 4
39742: PUSH
39743: LD_INT 5
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 6
39752: PUSH
39753: LD_INT 5
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 6
39762: PUSH
39763: LD_INT 6
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 5
39772: PUSH
39773: LD_INT 6
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39794: LD_ADDR_VAR 0 32
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: LD_INT 3
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: LD_INT 3
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 1
39821: NEG
39822: PUSH
39823: LD_INT 2
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: LD_INT 4
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: LD_INT 4
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 1
39852: NEG
39853: PUSH
39854: LD_INT 3
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: LD_INT 5
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: LD_INT 5
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: NEG
39884: PUSH
39885: LD_INT 4
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: PUSH
39895: LD_INT 6
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: LD_INT 6
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: LD_INT 5
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39937: LD_ADDR_VAR 0 33
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: LD_INT 1
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 3
39955: NEG
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 3
39966: NEG
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 3
39978: NEG
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 4
39989: NEG
39990: PUSH
39991: LD_INT 0
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 4
40000: NEG
40001: PUSH
40002: LD_INT 1
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 4
40012: NEG
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 5
40023: NEG
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 5
40034: NEG
40035: PUSH
40036: LD_INT 1
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 5
40046: NEG
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 6
40057: NEG
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 6
40068: NEG
40069: PUSH
40070: LD_INT 1
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40092: LD_ADDR_VAR 0 34
40096: PUSH
40097: LD_INT 2
40099: NEG
40100: PUSH
40101: LD_INT 3
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 3
40111: NEG
40112: PUSH
40113: LD_INT 2
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 3
40123: NEG
40124: PUSH
40125: LD_INT 3
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 3
40135: NEG
40136: PUSH
40137: LD_INT 4
40139: NEG
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 4
40147: NEG
40148: PUSH
40149: LD_INT 3
40151: NEG
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 4
40159: NEG
40160: PUSH
40161: LD_INT 4
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 4
40171: NEG
40172: PUSH
40173: LD_INT 5
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 5
40183: NEG
40184: PUSH
40185: LD_INT 4
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 5
40195: NEG
40196: PUSH
40197: LD_INT 5
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 5
40207: NEG
40208: PUSH
40209: LD_INT 6
40211: NEG
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 6
40219: NEG
40220: PUSH
40221: LD_INT 5
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 6
40231: NEG
40232: PUSH
40233: LD_INT 6
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40255: LD_ADDR_VAR 0 41
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: LD_INT 2
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: NEG
40274: PUSH
40275: LD_INT 3
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: LD_INT 2
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: LIST
40298: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40299: LD_ADDR_VAR 0 42
40303: PUSH
40304: LD_INT 2
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 3
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: LIST
40339: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40340: LD_ADDR_VAR 0 43
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 3
40357: PUSH
40358: LD_INT 2
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: PUSH
40368: LD_INT 3
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: LIST
40379: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40380: LD_ADDR_VAR 0 44
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: LD_INT 2
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: LD_INT 3
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: LIST
40420: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40421: LD_ADDR_VAR 0 45
40425: PUSH
40426: LD_INT 2
40428: NEG
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 2
40439: NEG
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 3
40450: NEG
40451: PUSH
40452: LD_INT 1
40454: NEG
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: LIST
40464: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40465: LD_ADDR_VAR 0 46
40469: PUSH
40470: LD_INT 2
40472: NEG
40473: PUSH
40474: LD_INT 2
40476: NEG
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 2
40484: NEG
40485: PUSH
40486: LD_INT 3
40488: NEG
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 3
40496: NEG
40497: PUSH
40498: LD_INT 2
40500: NEG
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: LIST
40510: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40511: LD_ADDR_VAR 0 47
40515: PUSH
40516: LD_INT 2
40518: NEG
40519: PUSH
40520: LD_INT 3
40522: NEG
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: LD_INT 3
40534: NEG
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40544: LD_ADDR_VAR 0 48
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: LD_INT 2
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 2
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40575: LD_ADDR_VAR 0 49
40579: PUSH
40580: LD_INT 3
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 3
40592: PUSH
40593: LD_INT 2
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40604: LD_ADDR_VAR 0 50
40608: PUSH
40609: LD_INT 2
40611: PUSH
40612: LD_INT 3
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: LD_INT 3
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40633: LD_ADDR_VAR 0 51
40637: PUSH
40638: LD_INT 1
40640: NEG
40641: PUSH
40642: LD_INT 2
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 2
40651: NEG
40652: PUSH
40653: LD_INT 1
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40664: LD_ADDR_VAR 0 52
40668: PUSH
40669: LD_INT 3
40671: NEG
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 3
40683: NEG
40684: PUSH
40685: LD_INT 2
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40697: LD_ADDR_VAR 0 53
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: LD_INT 3
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: LD_INT 3
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: LD_INT 2
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: LIST
40740: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40741: LD_ADDR_VAR 0 54
40745: PUSH
40746: LD_INT 2
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 3
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 3
40769: PUSH
40770: LD_INT 1
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: LIST
40781: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40782: LD_ADDR_VAR 0 55
40786: PUSH
40787: LD_INT 3
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 3
40799: PUSH
40800: LD_INT 3
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 2
40809: PUSH
40810: LD_INT 3
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: LIST
40821: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40822: LD_ADDR_VAR 0 56
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: LD_INT 3
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: LD_INT 3
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: LIST
40862: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40863: LD_ADDR_VAR 0 57
40867: PUSH
40868: LD_INT 2
40870: NEG
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 3
40881: NEG
40882: PUSH
40883: LD_INT 0
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 3
40892: NEG
40893: PUSH
40894: LD_INT 1
40896: NEG
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: LIST
40906: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40907: LD_ADDR_VAR 0 58
40911: PUSH
40912: LD_INT 2
40914: NEG
40915: PUSH
40916: LD_INT 3
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 3
40926: NEG
40927: PUSH
40928: LD_INT 2
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 3
40938: NEG
40939: PUSH
40940: LD_INT 3
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: LIST
40952: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40953: LD_ADDR_VAR 0 59
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: LD_INT 2
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: LD_INT 2
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: LIST
40996: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40997: LD_ADDR_VAR 0 60
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 2
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 2
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: LIST
41037: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41038: LD_ADDR_VAR 0 61
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 2
41055: PUSH
41056: LD_INT 2
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: LIST
41077: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41078: LD_ADDR_VAR 0 62
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: LIST
41118: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41119: LD_ADDR_VAR 0 63
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: LD_INT 1
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 2
41137: NEG
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 2
41148: NEG
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: LIST
41162: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41163: LD_ADDR_VAR 0 64
41167: PUSH
41168: LD_INT 1
41170: NEG
41171: PUSH
41172: LD_INT 2
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 2
41182: NEG
41183: PUSH
41184: LD_INT 1
41186: NEG
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 2
41194: NEG
41195: PUSH
41196: LD_INT 2
41198: NEG
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: LIST
41208: ST_TO_ADDR
// end ; 2 :
41209: GO 44475
41211: LD_INT 2
41213: DOUBLE
41214: EQUAL
41215: IFTRUE 41219
41217: GO 44474
41219: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41220: LD_ADDR_VAR 0 29
41224: PUSH
41225: LD_INT 4
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 4
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 5
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 5
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 4
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 3
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 3
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 3
41299: PUSH
41300: LD_INT 2
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 5
41310: PUSH
41311: LD_INT 2
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 3
41320: PUSH
41321: LD_INT 3
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 3
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 4
41340: PUSH
41341: LD_INT 3
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 4
41350: PUSH
41351: LD_INT 4
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 3
41360: PUSH
41361: LD_INT 4
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: LD_INT 3
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 2
41380: PUSH
41381: LD_INT 2
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 4
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: PUSH
41401: LD_INT 4
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: LD_INT 4
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: LD_INT 3
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: LD_INT 4
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: LD_INT 5
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: LD_INT 5
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: LD_INT 4
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: LD_INT 3
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 2
41482: PUSH
41483: LD_INT 5
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 2
41492: NEG
41493: PUSH
41494: LD_INT 3
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 3
41503: NEG
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 3
41514: NEG
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 2
41526: NEG
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: NEG
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 3
41548: NEG
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 4
41559: NEG
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 4
41570: NEG
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 4
41582: NEG
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: LD_INT 2
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 4
41605: NEG
41606: PUSH
41607: LD_INT 4
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 4
41617: NEG
41618: PUSH
41619: LD_INT 5
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 3
41629: NEG
41630: PUSH
41631: LD_INT 4
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 3
41641: NEG
41642: PUSH
41643: LD_INT 3
41645: NEG
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 4
41653: NEG
41654: PUSH
41655: LD_INT 3
41657: NEG
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 5
41665: NEG
41666: PUSH
41667: LD_INT 4
41669: NEG
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 5
41677: NEG
41678: PUSH
41679: LD_INT 5
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 3
41689: NEG
41690: PUSH
41691: LD_INT 5
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 5
41701: NEG
41702: PUSH
41703: LD_INT 3
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41758: LD_ADDR_VAR 0 30
41762: PUSH
41763: LD_INT 4
41765: PUSH
41766: LD_INT 4
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 4
41775: PUSH
41776: LD_INT 3
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 5
41785: PUSH
41786: LD_INT 4
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 5
41795: PUSH
41796: LD_INT 5
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 4
41805: PUSH
41806: LD_INT 5
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 3
41815: PUSH
41816: LD_INT 4
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 3
41825: PUSH
41826: LD_INT 3
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 5
41835: PUSH
41836: LD_INT 3
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 3
41845: PUSH
41846: LD_INT 5
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: LD_INT 3
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: LD_INT 2
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 3
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: LD_INT 4
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: LD_INT 4
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 3
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: LD_INT 4
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: NEG
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 4
41948: NEG
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 4
41959: NEG
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 3
41971: NEG
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 3
41982: NEG
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 4
41993: NEG
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 5
42004: NEG
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 5
42015: NEG
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 5
42027: NEG
42028: PUSH
42029: LD_INT 2
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 3
42039: NEG
42040: PUSH
42041: LD_INT 2
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 3
42050: NEG
42051: PUSH
42052: LD_INT 3
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 3
42062: NEG
42063: PUSH
42064: LD_INT 4
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 2
42074: NEG
42075: PUSH
42076: LD_INT 3
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: LD_INT 2
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 3
42098: NEG
42099: PUSH
42100: LD_INT 2
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 4
42110: NEG
42111: PUSH
42112: LD_INT 3
42114: NEG
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 4
42122: NEG
42123: PUSH
42124: LD_INT 4
42126: NEG
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: LD_INT 4
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 4
42146: NEG
42147: PUSH
42148: LD_INT 2
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 4
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: LD_INT 5
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: PUSH
42181: LD_INT 4
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: LD_INT 3
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 0
42202: PUSH
42203: LD_INT 3
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: LD_INT 4
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: NEG
42226: PUSH
42227: LD_INT 5
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 2
42237: PUSH
42238: LD_INT 3
42240: NEG
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 2
42248: NEG
42249: PUSH
42250: LD_INT 5
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42305: LD_ADDR_VAR 0 31
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 4
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: LD_INT 3
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: LD_INT 4
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: LD_INT 5
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 5
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: LD_INT 4
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: LD_INT 3
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 2
42384: PUSH
42385: LD_INT 5
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 2
42394: NEG
42395: PUSH
42396: LD_INT 3
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 3
42405: NEG
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 3
42416: NEG
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 2
42428: NEG
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 2
42439: NEG
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 3
42450: NEG
42451: PUSH
42452: LD_INT 1
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 4
42461: NEG
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 4
42472: NEG
42473: PUSH
42474: LD_INT 1
42476: NEG
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 4
42484: NEG
42485: PUSH
42486: LD_INT 2
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 2
42496: NEG
42497: PUSH
42498: LD_INT 2
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 4
42507: NEG
42508: PUSH
42509: LD_INT 4
42511: NEG
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 4
42519: NEG
42520: PUSH
42521: LD_INT 5
42523: NEG
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 3
42531: NEG
42532: PUSH
42533: LD_INT 4
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 3
42543: NEG
42544: PUSH
42545: LD_INT 3
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 4
42555: NEG
42556: PUSH
42557: LD_INT 3
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 5
42567: NEG
42568: PUSH
42569: LD_INT 4
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 5
42579: NEG
42580: PUSH
42581: LD_INT 5
42583: NEG
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 3
42591: NEG
42592: PUSH
42593: LD_INT 5
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 5
42603: NEG
42604: PUSH
42605: LD_INT 3
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 3
42618: NEG
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: LD_INT 4
42629: NEG
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: PUSH
42638: LD_INT 3
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: LD_INT 2
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: LD_INT 3
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: LD_INT 4
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: LD_INT 2
42697: NEG
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 2
42705: NEG
42706: PUSH
42707: LD_INT 4
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 4
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 4
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 5
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 5
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 4
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 3
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 3
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 3
42789: PUSH
42790: LD_INT 2
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 5
42800: PUSH
42801: LD_INT 2
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42855: LD_ADDR_VAR 0 32
42859: PUSH
42860: LD_INT 4
42862: NEG
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 4
42873: NEG
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 3
42885: NEG
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 3
42896: NEG
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 4
42907: NEG
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 5
42918: NEG
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 5
42929: NEG
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 5
42941: NEG
42942: PUSH
42943: LD_INT 2
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 3
42953: NEG
42954: PUSH
42955: LD_INT 2
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 3
42964: NEG
42965: PUSH
42966: LD_INT 3
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 3
42976: NEG
42977: PUSH
42978: LD_INT 4
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 2
42988: NEG
42989: PUSH
42990: LD_INT 3
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 3
43012: NEG
43013: PUSH
43014: LD_INT 2
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 4
43024: NEG
43025: PUSH
43026: LD_INT 3
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 4
43036: NEG
43037: PUSH
43038: LD_INT 4
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: NEG
43049: PUSH
43050: LD_INT 4
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 4
43060: NEG
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: LD_INT 4
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: LD_INT 5
43086: NEG
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: PUSH
43095: LD_INT 4
43097: NEG
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: LD_INT 3
43108: NEG
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: LD_INT 3
43119: NEG
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: LD_INT 4
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: NEG
43140: PUSH
43141: LD_INT 5
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: PUSH
43152: LD_INT 3
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: NEG
43163: PUSH
43164: LD_INT 5
43166: NEG
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 3
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 3
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 4
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 4
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 3
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 2
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 2
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: LD_INT 2
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 4
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 4
43267: PUSH
43268: LD_INT 4
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 4
43277: PUSH
43278: LD_INT 3
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 5
43287: PUSH
43288: LD_INT 4
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 5
43297: PUSH
43298: LD_INT 5
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 4
43307: PUSH
43308: LD_INT 5
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 3
43317: PUSH
43318: LD_INT 4
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 3
43327: PUSH
43328: LD_INT 3
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 5
43337: PUSH
43338: LD_INT 3
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 3
43347: PUSH
43348: LD_INT 5
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43402: LD_ADDR_VAR 0 33
43406: PUSH
43407: LD_INT 4
43409: NEG
43410: PUSH
43411: LD_INT 4
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 4
43421: NEG
43422: PUSH
43423: LD_INT 5
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 3
43433: NEG
43434: PUSH
43435: LD_INT 4
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 3
43445: NEG
43446: PUSH
43447: LD_INT 3
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 4
43457: NEG
43458: PUSH
43459: LD_INT 3
43461: NEG
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 5
43469: NEG
43470: PUSH
43471: LD_INT 4
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 5
43481: NEG
43482: PUSH
43483: LD_INT 5
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 3
43493: NEG
43494: PUSH
43495: LD_INT 5
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 5
43505: NEG
43506: PUSH
43507: LD_INT 3
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: LD_INT 3
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: LD_INT 4
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: LD_INT 3
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: LD_INT 2
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: LD_INT 2
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: LD_INT 3
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 1
43584: NEG
43585: PUSH
43586: LD_INT 4
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 2
43607: NEG
43608: PUSH
43609: LD_INT 4
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 4
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 4
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 5
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 5
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 4
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 3
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 3
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 3
43691: PUSH
43692: LD_INT 2
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 5
43702: PUSH
43703: LD_INT 2
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 3
43712: PUSH
43713: LD_INT 3
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 3
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 4
43732: PUSH
43733: LD_INT 3
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 4
43742: PUSH
43743: LD_INT 4
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 3
43752: PUSH
43753: LD_INT 4
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 2
43762: PUSH
43763: LD_INT 3
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: LD_INT 2
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 4
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: LD_INT 4
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 4
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: LD_INT 3
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: PUSH
43823: LD_INT 4
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: LD_INT 5
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: LD_INT 5
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 1
43852: NEG
43853: PUSH
43854: LD_INT 4
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 3
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 2
43874: PUSH
43875: LD_INT 5
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: LD_INT 3
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43940: LD_ADDR_VAR 0 34
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: LD_INT 4
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 5
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: LD_INT 4
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: LD_INT 3
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 3
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: LD_INT 4
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: LD_INT 5
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: LD_INT 3
44029: NEG
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 2
44037: NEG
44038: PUSH
44039: LD_INT 5
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 3
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 3
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 4
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 4
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 3
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 2
44121: PUSH
44122: LD_INT 2
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 4
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 4
44142: PUSH
44143: LD_INT 4
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 4
44152: PUSH
44153: LD_INT 3
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 5
44162: PUSH
44163: LD_INT 4
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 5
44172: PUSH
44173: LD_INT 5
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 4
44182: PUSH
44183: LD_INT 5
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 3
44192: PUSH
44193: LD_INT 4
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 3
44202: PUSH
44203: LD_INT 3
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 5
44212: PUSH
44213: LD_INT 3
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 3
44222: PUSH
44223: LD_INT 5
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: LD_INT 3
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: LD_INT 3
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: LD_INT 4
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: LD_INT 4
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: LD_INT 3
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: LD_INT 2
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: LD_INT 4
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 2
44314: NEG
44315: PUSH
44316: LD_INT 2
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 4
44325: NEG
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 4
44336: NEG
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 3
44348: NEG
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 3
44359: NEG
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 4
44370: NEG
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 5
44381: NEG
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 5
44392: NEG
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 5
44404: NEG
44405: PUSH
44406: LD_INT 2
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 3
44416: NEG
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: ST_TO_ADDR
// end ; end ;
44472: GO 44475
44474: POP
// case btype of b_depot , b_warehouse :
44475: LD_VAR 0 1
44479: PUSH
44480: LD_INT 0
44482: DOUBLE
44483: EQUAL
44484: IFTRUE 44494
44486: LD_INT 1
44488: DOUBLE
44489: EQUAL
44490: IFTRUE 44494
44492: GO 44695
44494: POP
// case nation of nation_american :
44495: LD_VAR 0 5
44499: PUSH
44500: LD_INT 1
44502: DOUBLE
44503: EQUAL
44504: IFTRUE 44508
44506: GO 44564
44508: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
44509: LD_ADDR_VAR 0 9
44513: PUSH
44514: LD_VAR 0 11
44518: PUSH
44519: LD_VAR 0 12
44523: PUSH
44524: LD_VAR 0 13
44528: PUSH
44529: LD_VAR 0 14
44533: PUSH
44534: LD_VAR 0 15
44538: PUSH
44539: LD_VAR 0 16
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: PUSH
44552: LD_VAR 0 4
44556: PUSH
44557: LD_INT 1
44559: PLUS
44560: ARRAY
44561: ST_TO_ADDR
44562: GO 44693
44564: LD_INT 2
44566: DOUBLE
44567: EQUAL
44568: IFTRUE 44572
44570: GO 44628
44572: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
44573: LD_ADDR_VAR 0 9
44577: PUSH
44578: LD_VAR 0 17
44582: PUSH
44583: LD_VAR 0 18
44587: PUSH
44588: LD_VAR 0 19
44592: PUSH
44593: LD_VAR 0 20
44597: PUSH
44598: LD_VAR 0 21
44602: PUSH
44603: LD_VAR 0 22
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: PUSH
44616: LD_VAR 0 4
44620: PUSH
44621: LD_INT 1
44623: PLUS
44624: ARRAY
44625: ST_TO_ADDR
44626: GO 44693
44628: LD_INT 3
44630: DOUBLE
44631: EQUAL
44632: IFTRUE 44636
44634: GO 44692
44636: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44637: LD_ADDR_VAR 0 9
44641: PUSH
44642: LD_VAR 0 23
44646: PUSH
44647: LD_VAR 0 24
44651: PUSH
44652: LD_VAR 0 25
44656: PUSH
44657: LD_VAR 0 26
44661: PUSH
44662: LD_VAR 0 27
44666: PUSH
44667: LD_VAR 0 28
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: PUSH
44680: LD_VAR 0 4
44684: PUSH
44685: LD_INT 1
44687: PLUS
44688: ARRAY
44689: ST_TO_ADDR
44690: GO 44693
44692: POP
44693: GO 45248
44695: LD_INT 2
44697: DOUBLE
44698: EQUAL
44699: IFTRUE 44709
44701: LD_INT 3
44703: DOUBLE
44704: EQUAL
44705: IFTRUE 44709
44707: GO 44765
44709: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44710: LD_ADDR_VAR 0 9
44714: PUSH
44715: LD_VAR 0 29
44719: PUSH
44720: LD_VAR 0 30
44724: PUSH
44725: LD_VAR 0 31
44729: PUSH
44730: LD_VAR 0 32
44734: PUSH
44735: LD_VAR 0 33
44739: PUSH
44740: LD_VAR 0 34
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: PUSH
44753: LD_VAR 0 4
44757: PUSH
44758: LD_INT 1
44760: PLUS
44761: ARRAY
44762: ST_TO_ADDR
44763: GO 45248
44765: LD_INT 16
44767: DOUBLE
44768: EQUAL
44769: IFTRUE 44827
44771: LD_INT 17
44773: DOUBLE
44774: EQUAL
44775: IFTRUE 44827
44777: LD_INT 18
44779: DOUBLE
44780: EQUAL
44781: IFTRUE 44827
44783: LD_INT 19
44785: DOUBLE
44786: EQUAL
44787: IFTRUE 44827
44789: LD_INT 22
44791: DOUBLE
44792: EQUAL
44793: IFTRUE 44827
44795: LD_INT 20
44797: DOUBLE
44798: EQUAL
44799: IFTRUE 44827
44801: LD_INT 21
44803: DOUBLE
44804: EQUAL
44805: IFTRUE 44827
44807: LD_INT 23
44809: DOUBLE
44810: EQUAL
44811: IFTRUE 44827
44813: LD_INT 24
44815: DOUBLE
44816: EQUAL
44817: IFTRUE 44827
44819: LD_INT 25
44821: DOUBLE
44822: EQUAL
44823: IFTRUE 44827
44825: GO 44883
44827: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44828: LD_ADDR_VAR 0 9
44832: PUSH
44833: LD_VAR 0 35
44837: PUSH
44838: LD_VAR 0 36
44842: PUSH
44843: LD_VAR 0 37
44847: PUSH
44848: LD_VAR 0 38
44852: PUSH
44853: LD_VAR 0 39
44857: PUSH
44858: LD_VAR 0 40
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: PUSH
44871: LD_VAR 0 4
44875: PUSH
44876: LD_INT 1
44878: PLUS
44879: ARRAY
44880: ST_TO_ADDR
44881: GO 45248
44883: LD_INT 6
44885: DOUBLE
44886: EQUAL
44887: IFTRUE 44939
44889: LD_INT 7
44891: DOUBLE
44892: EQUAL
44893: IFTRUE 44939
44895: LD_INT 8
44897: DOUBLE
44898: EQUAL
44899: IFTRUE 44939
44901: LD_INT 13
44903: DOUBLE
44904: EQUAL
44905: IFTRUE 44939
44907: LD_INT 12
44909: DOUBLE
44910: EQUAL
44911: IFTRUE 44939
44913: LD_INT 15
44915: DOUBLE
44916: EQUAL
44917: IFTRUE 44939
44919: LD_INT 11
44921: DOUBLE
44922: EQUAL
44923: IFTRUE 44939
44925: LD_INT 14
44927: DOUBLE
44928: EQUAL
44929: IFTRUE 44939
44931: LD_INT 10
44933: DOUBLE
44934: EQUAL
44935: IFTRUE 44939
44937: GO 44995
44939: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44940: LD_ADDR_VAR 0 9
44944: PUSH
44945: LD_VAR 0 41
44949: PUSH
44950: LD_VAR 0 42
44954: PUSH
44955: LD_VAR 0 43
44959: PUSH
44960: LD_VAR 0 44
44964: PUSH
44965: LD_VAR 0 45
44969: PUSH
44970: LD_VAR 0 46
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: PUSH
44983: LD_VAR 0 4
44987: PUSH
44988: LD_INT 1
44990: PLUS
44991: ARRAY
44992: ST_TO_ADDR
44993: GO 45248
44995: LD_INT 36
44997: DOUBLE
44998: EQUAL
44999: IFTRUE 45003
45001: GO 45059
45003: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
45004: LD_ADDR_VAR 0 9
45008: PUSH
45009: LD_VAR 0 47
45013: PUSH
45014: LD_VAR 0 48
45018: PUSH
45019: LD_VAR 0 49
45023: PUSH
45024: LD_VAR 0 50
45028: PUSH
45029: LD_VAR 0 51
45033: PUSH
45034: LD_VAR 0 52
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: PUSH
45047: LD_VAR 0 4
45051: PUSH
45052: LD_INT 1
45054: PLUS
45055: ARRAY
45056: ST_TO_ADDR
45057: GO 45248
45059: LD_INT 4
45061: DOUBLE
45062: EQUAL
45063: IFTRUE 45085
45065: LD_INT 5
45067: DOUBLE
45068: EQUAL
45069: IFTRUE 45085
45071: LD_INT 34
45073: DOUBLE
45074: EQUAL
45075: IFTRUE 45085
45077: LD_INT 37
45079: DOUBLE
45080: EQUAL
45081: IFTRUE 45085
45083: GO 45141
45085: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
45086: LD_ADDR_VAR 0 9
45090: PUSH
45091: LD_VAR 0 53
45095: PUSH
45096: LD_VAR 0 54
45100: PUSH
45101: LD_VAR 0 55
45105: PUSH
45106: LD_VAR 0 56
45110: PUSH
45111: LD_VAR 0 57
45115: PUSH
45116: LD_VAR 0 58
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: PUSH
45129: LD_VAR 0 4
45133: PUSH
45134: LD_INT 1
45136: PLUS
45137: ARRAY
45138: ST_TO_ADDR
45139: GO 45248
45141: LD_INT 31
45143: DOUBLE
45144: EQUAL
45145: IFTRUE 45191
45147: LD_INT 32
45149: DOUBLE
45150: EQUAL
45151: IFTRUE 45191
45153: LD_INT 33
45155: DOUBLE
45156: EQUAL
45157: IFTRUE 45191
45159: LD_INT 27
45161: DOUBLE
45162: EQUAL
45163: IFTRUE 45191
45165: LD_INT 26
45167: DOUBLE
45168: EQUAL
45169: IFTRUE 45191
45171: LD_INT 28
45173: DOUBLE
45174: EQUAL
45175: IFTRUE 45191
45177: LD_INT 29
45179: DOUBLE
45180: EQUAL
45181: IFTRUE 45191
45183: LD_INT 30
45185: DOUBLE
45186: EQUAL
45187: IFTRUE 45191
45189: GO 45247
45191: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
45192: LD_ADDR_VAR 0 9
45196: PUSH
45197: LD_VAR 0 59
45201: PUSH
45202: LD_VAR 0 60
45206: PUSH
45207: LD_VAR 0 61
45211: PUSH
45212: LD_VAR 0 62
45216: PUSH
45217: LD_VAR 0 63
45221: PUSH
45222: LD_VAR 0 64
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: PUSH
45235: LD_VAR 0 4
45239: PUSH
45240: LD_INT 1
45242: PLUS
45243: ARRAY
45244: ST_TO_ADDR
45245: GO 45248
45247: POP
// temp_list2 = [ ] ;
45248: LD_ADDR_VAR 0 10
45252: PUSH
45253: EMPTY
45254: ST_TO_ADDR
// for i in temp_list do
45255: LD_ADDR_VAR 0 8
45259: PUSH
45260: LD_VAR 0 9
45264: PUSH
45265: FOR_IN
45266: IFFALSE 45318
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45268: LD_ADDR_VAR 0 10
45272: PUSH
45273: LD_VAR 0 10
45277: PUSH
45278: LD_VAR 0 8
45282: PUSH
45283: LD_INT 1
45285: ARRAY
45286: PUSH
45287: LD_VAR 0 2
45291: PLUS
45292: PUSH
45293: LD_VAR 0 8
45297: PUSH
45298: LD_INT 2
45300: ARRAY
45301: PUSH
45302: LD_VAR 0 3
45306: PLUS
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: EMPTY
45313: LIST
45314: ADD
45315: ST_TO_ADDR
45316: GO 45265
45318: POP
45319: POP
// result = temp_list2 ;
45320: LD_ADDR_VAR 0 7
45324: PUSH
45325: LD_VAR 0 10
45329: ST_TO_ADDR
// end ;
45330: LD_VAR 0 7
45334: RET
// export function EnemyInRange ( unit , dist ) ; begin
45335: LD_INT 0
45337: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45338: LD_ADDR_VAR 0 3
45342: PUSH
45343: LD_VAR 0 1
45347: PPUSH
45348: CALL_OW 255
45352: PPUSH
45353: LD_VAR 0 1
45357: PPUSH
45358: CALL_OW 250
45362: PPUSH
45363: LD_VAR 0 1
45367: PPUSH
45368: CALL_OW 251
45372: PPUSH
45373: LD_VAR 0 2
45377: PPUSH
45378: CALL 18592 0 4
45382: PUSH
45383: LD_INT 4
45385: ARRAY
45386: ST_TO_ADDR
// end ;
45387: LD_VAR 0 3
45391: RET
// export function PlayerSeeMe ( unit ) ; begin
45392: LD_INT 0
45394: PPUSH
// result := See ( your_side , unit ) ;
45395: LD_ADDR_VAR 0 2
45399: PUSH
45400: LD_OWVAR 2
45404: PPUSH
45405: LD_VAR 0 1
45409: PPUSH
45410: CALL_OW 292
45414: ST_TO_ADDR
// end ;
45415: LD_VAR 0 2
45419: RET
// export function ReverseDir ( unit ) ; begin
45420: LD_INT 0
45422: PPUSH
// if not unit then
45423: LD_VAR 0 1
45427: NOT
45428: IFFALSE 45432
// exit ;
45430: GO 45455
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
45432: LD_ADDR_VAR 0 2
45436: PUSH
45437: LD_VAR 0 1
45441: PPUSH
45442: CALL_OW 254
45446: PUSH
45447: LD_INT 3
45449: PLUS
45450: PUSH
45451: LD_INT 6
45453: MOD
45454: ST_TO_ADDR
// end ;
45455: LD_VAR 0 2
45459: RET
// export function ReverseArray ( array ) ; var i ; begin
45460: LD_INT 0
45462: PPUSH
45463: PPUSH
// if not array then
45464: LD_VAR 0 1
45468: NOT
45469: IFFALSE 45473
// exit ;
45471: GO 45528
// result := [ ] ;
45473: LD_ADDR_VAR 0 2
45477: PUSH
45478: EMPTY
45479: ST_TO_ADDR
// for i := array downto 1 do
45480: LD_ADDR_VAR 0 3
45484: PUSH
45485: DOUBLE
45486: LD_VAR 0 1
45490: INC
45491: ST_TO_ADDR
45492: LD_INT 1
45494: PUSH
45495: FOR_DOWNTO
45496: IFFALSE 45526
// result := Join ( result , array [ i ] ) ;
45498: LD_ADDR_VAR 0 2
45502: PUSH
45503: LD_VAR 0 2
45507: PPUSH
45508: LD_VAR 0 1
45512: PUSH
45513: LD_VAR 0 3
45517: ARRAY
45518: PPUSH
45519: CALL 50370 0 2
45523: ST_TO_ADDR
45524: GO 45495
45526: POP
45527: POP
// end ;
45528: LD_VAR 0 2
45532: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
45533: LD_INT 0
45535: PPUSH
45536: PPUSH
45537: PPUSH
45538: PPUSH
45539: PPUSH
45540: PPUSH
// if not unit or not hexes then
45541: LD_VAR 0 1
45545: NOT
45546: IFTRUE 45555
45548: PUSH
45549: LD_VAR 0 2
45553: NOT
45554: OR
45555: IFFALSE 45559
// exit ;
45557: GO 45682
// dist := 9999 ;
45559: LD_ADDR_VAR 0 5
45563: PUSH
45564: LD_INT 9999
45566: ST_TO_ADDR
// for i = 1 to hexes do
45567: LD_ADDR_VAR 0 4
45571: PUSH
45572: DOUBLE
45573: LD_INT 1
45575: DEC
45576: ST_TO_ADDR
45577: LD_VAR 0 2
45581: PUSH
45582: FOR_TO
45583: IFFALSE 45670
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45585: LD_ADDR_VAR 0 6
45589: PUSH
45590: LD_VAR 0 1
45594: PPUSH
45595: LD_VAR 0 2
45599: PUSH
45600: LD_VAR 0 4
45604: ARRAY
45605: PUSH
45606: LD_INT 1
45608: ARRAY
45609: PPUSH
45610: LD_VAR 0 2
45614: PUSH
45615: LD_VAR 0 4
45619: ARRAY
45620: PUSH
45621: LD_INT 2
45623: ARRAY
45624: PPUSH
45625: CALL_OW 297
45629: ST_TO_ADDR
// if tdist < dist then
45630: LD_VAR 0 6
45634: PUSH
45635: LD_VAR 0 5
45639: LESS
45640: IFFALSE 45668
// begin hex := hexes [ i ] ;
45642: LD_ADDR_VAR 0 8
45646: PUSH
45647: LD_VAR 0 2
45651: PUSH
45652: LD_VAR 0 4
45656: ARRAY
45657: ST_TO_ADDR
// dist := tdist ;
45658: LD_ADDR_VAR 0 5
45662: PUSH
45663: LD_VAR 0 6
45667: ST_TO_ADDR
// end ; end ;
45668: GO 45582
45670: POP
45671: POP
// result := hex ;
45672: LD_ADDR_VAR 0 3
45676: PUSH
45677: LD_VAR 0 8
45681: ST_TO_ADDR
// end ;
45682: LD_VAR 0 3
45686: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45687: LD_INT 0
45689: PPUSH
45690: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45691: LD_VAR 0 1
45695: NOT
45696: IFTRUE 45735
45698: PUSH
45699: LD_VAR 0 1
45703: PUSH
45704: LD_INT 21
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 23
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PPUSH
45728: CALL_OW 69
45732: IN
45733: NOT
45734: OR
45735: IFFALSE 45739
// exit ;
45737: GO 45786
// for i = 1 to 3 do
45739: LD_ADDR_VAR 0 3
45743: PUSH
45744: DOUBLE
45745: LD_INT 1
45747: DEC
45748: ST_TO_ADDR
45749: LD_INT 3
45751: PUSH
45752: FOR_TO
45753: IFFALSE 45784
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45755: LD_VAR 0 1
45759: PPUSH
45760: CALL_OW 250
45764: PPUSH
45765: LD_VAR 0 1
45769: PPUSH
45770: CALL_OW 251
45774: PPUSH
45775: LD_INT 1
45777: PPUSH
45778: CALL_OW 453
45782: GO 45752
45784: POP
45785: POP
// end ;
45786: LD_VAR 0 2
45790: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45791: LD_INT 0
45793: PPUSH
45794: PPUSH
45795: PPUSH
45796: PPUSH
45797: PPUSH
45798: PPUSH
// if not unit or not enemy_unit then
45799: LD_VAR 0 1
45803: NOT
45804: IFTRUE 45813
45806: PUSH
45807: LD_VAR 0 2
45811: NOT
45812: OR
45813: IFFALSE 45817
// exit ;
45815: GO 46288
// if GetLives ( i ) < 250 then
45817: LD_VAR 0 4
45821: PPUSH
45822: CALL_OW 256
45826: PUSH
45827: LD_INT 250
45829: LESS
45830: IFFALSE 45843
// begin ComAutodestruct ( i ) ;
45832: LD_VAR 0 4
45836: PPUSH
45837: CALL 45687 0 1
// exit ;
45841: GO 46288
// end ; x := GetX ( enemy_unit ) ;
45843: LD_ADDR_VAR 0 7
45847: PUSH
45848: LD_VAR 0 2
45852: PPUSH
45853: CALL_OW 250
45857: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45858: LD_ADDR_VAR 0 8
45862: PUSH
45863: LD_VAR 0 2
45867: PPUSH
45868: CALL_OW 251
45872: ST_TO_ADDR
// if not x or not y then
45873: LD_VAR 0 7
45877: NOT
45878: IFTRUE 45887
45880: PUSH
45881: LD_VAR 0 8
45885: NOT
45886: OR
45887: IFFALSE 45891
// exit ;
45889: GO 46288
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45891: LD_ADDR_VAR 0 6
45895: PUSH
45896: LD_VAR 0 7
45900: PPUSH
45901: LD_INT 0
45903: PPUSH
45904: LD_INT 4
45906: PPUSH
45907: CALL_OW 272
45911: PUSH
45912: LD_VAR 0 8
45916: PPUSH
45917: LD_INT 0
45919: PPUSH
45920: LD_INT 4
45922: PPUSH
45923: CALL_OW 273
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_VAR 0 7
45936: PPUSH
45937: LD_INT 1
45939: PPUSH
45940: LD_INT 4
45942: PPUSH
45943: CALL_OW 272
45947: PUSH
45948: LD_VAR 0 8
45952: PPUSH
45953: LD_INT 1
45955: PPUSH
45956: LD_INT 4
45958: PPUSH
45959: CALL_OW 273
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_VAR 0 7
45972: PPUSH
45973: LD_INT 2
45975: PPUSH
45976: LD_INT 4
45978: PPUSH
45979: CALL_OW 272
45983: PUSH
45984: LD_VAR 0 8
45988: PPUSH
45989: LD_INT 2
45991: PPUSH
45992: LD_INT 4
45994: PPUSH
45995: CALL_OW 273
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_VAR 0 7
46008: PPUSH
46009: LD_INT 3
46011: PPUSH
46012: LD_INT 4
46014: PPUSH
46015: CALL_OW 272
46019: PUSH
46020: LD_VAR 0 8
46024: PPUSH
46025: LD_INT 3
46027: PPUSH
46028: LD_INT 4
46030: PPUSH
46031: CALL_OW 273
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_VAR 0 7
46044: PPUSH
46045: LD_INT 4
46047: PPUSH
46048: LD_INT 4
46050: PPUSH
46051: CALL_OW 272
46055: PUSH
46056: LD_VAR 0 8
46060: PPUSH
46061: LD_INT 4
46063: PPUSH
46064: LD_INT 4
46066: PPUSH
46067: CALL_OW 273
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_VAR 0 7
46080: PPUSH
46081: LD_INT 5
46083: PPUSH
46084: LD_INT 4
46086: PPUSH
46087: CALL_OW 272
46091: PUSH
46092: LD_VAR 0 8
46096: PPUSH
46097: LD_INT 5
46099: PPUSH
46100: LD_INT 4
46102: PPUSH
46103: CALL_OW 273
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: ST_TO_ADDR
// for i = tmp downto 1 do
46120: LD_ADDR_VAR 0 4
46124: PUSH
46125: DOUBLE
46126: LD_VAR 0 6
46130: INC
46131: ST_TO_ADDR
46132: LD_INT 1
46134: PUSH
46135: FOR_DOWNTO
46136: IFFALSE 46239
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
46138: LD_VAR 0 6
46142: PUSH
46143: LD_VAR 0 4
46147: ARRAY
46148: PUSH
46149: LD_INT 1
46151: ARRAY
46152: PPUSH
46153: LD_VAR 0 6
46157: PUSH
46158: LD_VAR 0 4
46162: ARRAY
46163: PUSH
46164: LD_INT 2
46166: ARRAY
46167: PPUSH
46168: CALL_OW 488
46172: NOT
46173: IFTRUE 46215
46175: PUSH
46176: LD_VAR 0 6
46180: PUSH
46181: LD_VAR 0 4
46185: ARRAY
46186: PUSH
46187: LD_INT 1
46189: ARRAY
46190: PPUSH
46191: LD_VAR 0 6
46195: PUSH
46196: LD_VAR 0 4
46200: ARRAY
46201: PUSH
46202: LD_INT 2
46204: ARRAY
46205: PPUSH
46206: CALL_OW 428
46210: PUSH
46211: LD_INT 0
46213: NONEQUAL
46214: OR
46215: IFFALSE 46237
// tmp := Delete ( tmp , i ) ;
46217: LD_ADDR_VAR 0 6
46221: PUSH
46222: LD_VAR 0 6
46226: PPUSH
46227: LD_VAR 0 4
46231: PPUSH
46232: CALL_OW 3
46236: ST_TO_ADDR
46237: GO 46135
46239: POP
46240: POP
// j := GetClosestHex ( unit , tmp ) ;
46241: LD_ADDR_VAR 0 5
46245: PUSH
46246: LD_VAR 0 1
46250: PPUSH
46251: LD_VAR 0 6
46255: PPUSH
46256: CALL 45533 0 2
46260: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46261: LD_VAR 0 1
46265: PPUSH
46266: LD_VAR 0 5
46270: PUSH
46271: LD_INT 1
46273: ARRAY
46274: PPUSH
46275: LD_VAR 0 5
46279: PUSH
46280: LD_INT 2
46282: ARRAY
46283: PPUSH
46284: CALL_OW 111
// end ;
46288: LD_VAR 0 3
46292: RET
// export function PrepareApemanSoldier ( ) ; begin
46293: LD_INT 0
46295: PPUSH
// uc_nation := 0 ;
46296: LD_ADDR_OWVAR 21
46300: PUSH
46301: LD_INT 0
46303: ST_TO_ADDR
// hc_sex := sex_male ;
46304: LD_ADDR_OWVAR 27
46308: PUSH
46309: LD_INT 1
46311: ST_TO_ADDR
// hc_name :=  ;
46312: LD_ADDR_OWVAR 26
46316: PUSH
46317: LD_STRING 
46319: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
46320: LD_ADDR_OWVAR 28
46324: PUSH
46325: LD_INT 15
46327: ST_TO_ADDR
// hc_gallery :=  ;
46328: LD_ADDR_OWVAR 33
46332: PUSH
46333: LD_STRING 
46335: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
46336: LD_ADDR_OWVAR 31
46340: PUSH
46341: LD_INT 0
46343: PPUSH
46344: LD_INT 3
46346: PPUSH
46347: CALL_OW 12
46351: PUSH
46352: LD_INT 0
46354: PPUSH
46355: LD_INT 3
46357: PPUSH
46358: CALL_OW 12
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
46375: LD_ADDR_OWVAR 29
46379: PUSH
46380: LD_INT 12
46382: PUSH
46383: LD_INT 12
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: ST_TO_ADDR
// end ;
46390: LD_VAR 0 1
46394: RET
// export function PrepareApemanEngineer ( ) ; begin
46395: LD_INT 0
46397: PPUSH
// uc_nation := 0 ;
46398: LD_ADDR_OWVAR 21
46402: PUSH
46403: LD_INT 0
46405: ST_TO_ADDR
// hc_sex := sex_male ;
46406: LD_ADDR_OWVAR 27
46410: PUSH
46411: LD_INT 1
46413: ST_TO_ADDR
// hc_name :=  ;
46414: LD_ADDR_OWVAR 26
46418: PUSH
46419: LD_STRING 
46421: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
46422: LD_ADDR_OWVAR 28
46426: PUSH
46427: LD_INT 16
46429: ST_TO_ADDR
// hc_gallery :=  ;
46430: LD_ADDR_OWVAR 33
46434: PUSH
46435: LD_STRING 
46437: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
46438: LD_ADDR_OWVAR 31
46442: PUSH
46443: LD_INT 0
46445: PPUSH
46446: LD_INT 3
46448: PPUSH
46449: CALL_OW 12
46453: PUSH
46454: LD_INT 0
46456: PPUSH
46457: LD_INT 3
46459: PPUSH
46460: CALL_OW 12
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
46477: LD_ADDR_OWVAR 29
46481: PUSH
46482: LD_INT 12
46484: PUSH
46485: LD_INT 12
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: ST_TO_ADDR
// end ;
46492: LD_VAR 0 1
46496: RET
// export function PrepareApeman ( agressivity ) ; begin
46497: LD_INT 0
46499: PPUSH
// uc_side := 0 ;
46500: LD_ADDR_OWVAR 20
46504: PUSH
46505: LD_INT 0
46507: ST_TO_ADDR
// uc_nation := 0 ;
46508: LD_ADDR_OWVAR 21
46512: PUSH
46513: LD_INT 0
46515: ST_TO_ADDR
// hc_sex := sex_male ;
46516: LD_ADDR_OWVAR 27
46520: PUSH
46521: LD_INT 1
46523: ST_TO_ADDR
// hc_class := class_apeman ;
46524: LD_ADDR_OWVAR 28
46528: PUSH
46529: LD_INT 12
46531: ST_TO_ADDR
// hc_gallery :=  ;
46532: LD_ADDR_OWVAR 33
46536: PUSH
46537: LD_STRING 
46539: ST_TO_ADDR
// hc_name :=  ;
46540: LD_ADDR_OWVAR 26
46544: PUSH
46545: LD_STRING 
46547: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
46548: LD_ADDR_OWVAR 29
46552: PUSH
46553: LD_INT 12
46555: PUSH
46556: LD_INT 12
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: ST_TO_ADDR
// if agressivity = 0 then
46563: LD_VAR 0 1
46567: PUSH
46568: LD_INT 0
46570: EQUAL
46571: IFFALSE 46583
// hc_agressivity := 0 else
46573: LD_ADDR_OWVAR 35
46577: PUSH
46578: LD_INT 0
46580: ST_TO_ADDR
46581: GO 46604
// hc_agressivity := rand ( - agressivity , agressivity ) ;
46583: LD_ADDR_OWVAR 35
46587: PUSH
46588: LD_VAR 0 1
46592: NEG
46593: PPUSH
46594: LD_VAR 0 1
46598: PPUSH
46599: CALL_OW 12
46603: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
46604: LD_ADDR_OWVAR 31
46608: PUSH
46609: LD_INT 0
46611: PPUSH
46612: LD_INT 3
46614: PPUSH
46615: CALL_OW 12
46619: PUSH
46620: LD_INT 0
46622: PPUSH
46623: LD_INT 3
46625: PPUSH
46626: CALL_OW 12
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: ST_TO_ADDR
// end ;
46643: LD_VAR 0 2
46647: RET
// export function PrepareTiger ( agressivity ) ; begin
46648: LD_INT 0
46650: PPUSH
// uc_side := 0 ;
46651: LD_ADDR_OWVAR 20
46655: PUSH
46656: LD_INT 0
46658: ST_TO_ADDR
// uc_nation := 0 ;
46659: LD_ADDR_OWVAR 21
46663: PUSH
46664: LD_INT 0
46666: ST_TO_ADDR
// InitHc ;
46667: CALL_OW 19
// hc_class := class_tiger ;
46671: LD_ADDR_OWVAR 28
46675: PUSH
46676: LD_INT 14
46678: ST_TO_ADDR
// hc_gallery :=  ;
46679: LD_ADDR_OWVAR 33
46683: PUSH
46684: LD_STRING 
46686: ST_TO_ADDR
// hc_name :=  ;
46687: LD_ADDR_OWVAR 26
46691: PUSH
46692: LD_STRING 
46694: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
46695: LD_ADDR_OWVAR 35
46699: PUSH
46700: LD_VAR 0 1
46704: NEG
46705: PPUSH
46706: LD_VAR 0 1
46710: PPUSH
46711: CALL_OW 12
46715: ST_TO_ADDR
// end ;
46716: LD_VAR 0 2
46720: RET
// export function PrepareEnchidna ( ) ; begin
46721: LD_INT 0
46723: PPUSH
// uc_side := 0 ;
46724: LD_ADDR_OWVAR 20
46728: PUSH
46729: LD_INT 0
46731: ST_TO_ADDR
// uc_nation := 0 ;
46732: LD_ADDR_OWVAR 21
46736: PUSH
46737: LD_INT 0
46739: ST_TO_ADDR
// InitHc ;
46740: CALL_OW 19
// hc_class := class_baggie ;
46744: LD_ADDR_OWVAR 28
46748: PUSH
46749: LD_INT 13
46751: ST_TO_ADDR
// hc_gallery :=  ;
46752: LD_ADDR_OWVAR 33
46756: PUSH
46757: LD_STRING 
46759: ST_TO_ADDR
// hc_name :=  ;
46760: LD_ADDR_OWVAR 26
46764: PUSH
46765: LD_STRING 
46767: ST_TO_ADDR
// end ;
46768: LD_VAR 0 1
46772: RET
// export function PrepareFrog ( ) ; begin
46773: LD_INT 0
46775: PPUSH
// uc_side := 0 ;
46776: LD_ADDR_OWVAR 20
46780: PUSH
46781: LD_INT 0
46783: ST_TO_ADDR
// uc_nation := 0 ;
46784: LD_ADDR_OWVAR 21
46788: PUSH
46789: LD_INT 0
46791: ST_TO_ADDR
// InitHc ;
46792: CALL_OW 19
// hc_class := class_frog ;
46796: LD_ADDR_OWVAR 28
46800: PUSH
46801: LD_INT 19
46803: ST_TO_ADDR
// hc_gallery :=  ;
46804: LD_ADDR_OWVAR 33
46808: PUSH
46809: LD_STRING 
46811: ST_TO_ADDR
// hc_name :=  ;
46812: LD_ADDR_OWVAR 26
46816: PUSH
46817: LD_STRING 
46819: ST_TO_ADDR
// end ;
46820: LD_VAR 0 1
46824: RET
// export function PrepareFish ( ) ; begin
46825: LD_INT 0
46827: PPUSH
// uc_side := 0 ;
46828: LD_ADDR_OWVAR 20
46832: PUSH
46833: LD_INT 0
46835: ST_TO_ADDR
// uc_nation := 0 ;
46836: LD_ADDR_OWVAR 21
46840: PUSH
46841: LD_INT 0
46843: ST_TO_ADDR
// InitHc ;
46844: CALL_OW 19
// hc_class := class_fish ;
46848: LD_ADDR_OWVAR 28
46852: PUSH
46853: LD_INT 20
46855: ST_TO_ADDR
// hc_gallery :=  ;
46856: LD_ADDR_OWVAR 33
46860: PUSH
46861: LD_STRING 
46863: ST_TO_ADDR
// hc_name :=  ;
46864: LD_ADDR_OWVAR 26
46868: PUSH
46869: LD_STRING 
46871: ST_TO_ADDR
// end ;
46872: LD_VAR 0 1
46876: RET
// export function PrepareBird ( ) ; begin
46877: LD_INT 0
46879: PPUSH
// uc_side := 0 ;
46880: LD_ADDR_OWVAR 20
46884: PUSH
46885: LD_INT 0
46887: ST_TO_ADDR
// uc_nation := 0 ;
46888: LD_ADDR_OWVAR 21
46892: PUSH
46893: LD_INT 0
46895: ST_TO_ADDR
// InitHc ;
46896: CALL_OW 19
// hc_class := class_phororhacos ;
46900: LD_ADDR_OWVAR 28
46904: PUSH
46905: LD_INT 18
46907: ST_TO_ADDR
// hc_gallery :=  ;
46908: LD_ADDR_OWVAR 33
46912: PUSH
46913: LD_STRING 
46915: ST_TO_ADDR
// hc_name :=  ;
46916: LD_ADDR_OWVAR 26
46920: PUSH
46921: LD_STRING 
46923: ST_TO_ADDR
// end ;
46924: LD_VAR 0 1
46928: RET
// export function PrepareHorse ( ) ; begin
46929: LD_INT 0
46931: PPUSH
// uc_side := 0 ;
46932: LD_ADDR_OWVAR 20
46936: PUSH
46937: LD_INT 0
46939: ST_TO_ADDR
// uc_nation := 0 ;
46940: LD_ADDR_OWVAR 21
46944: PUSH
46945: LD_INT 0
46947: ST_TO_ADDR
// InitHc ;
46948: CALL_OW 19
// hc_class := class_horse ;
46952: LD_ADDR_OWVAR 28
46956: PUSH
46957: LD_INT 21
46959: ST_TO_ADDR
// hc_gallery :=  ;
46960: LD_ADDR_OWVAR 33
46964: PUSH
46965: LD_STRING 
46967: ST_TO_ADDR
// hc_name :=  ;
46968: LD_ADDR_OWVAR 26
46972: PUSH
46973: LD_STRING 
46975: ST_TO_ADDR
// end ;
46976: LD_VAR 0 1
46980: RET
// export function PrepareMastodont ( ) ; begin
46981: LD_INT 0
46983: PPUSH
// uc_side := 0 ;
46984: LD_ADDR_OWVAR 20
46988: PUSH
46989: LD_INT 0
46991: ST_TO_ADDR
// uc_nation := 0 ;
46992: LD_ADDR_OWVAR 21
46996: PUSH
46997: LD_INT 0
46999: ST_TO_ADDR
// vc_chassis := class_mastodont ;
47000: LD_ADDR_OWVAR 37
47004: PUSH
47005: LD_INT 31
47007: ST_TO_ADDR
// vc_control := control_rider ;
47008: LD_ADDR_OWVAR 38
47012: PUSH
47013: LD_INT 4
47015: ST_TO_ADDR
// end ;
47016: LD_VAR 0 1
47020: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
47021: LD_INT 0
47023: PPUSH
47024: PPUSH
47025: PPUSH
// uc_side = 0 ;
47026: LD_ADDR_OWVAR 20
47030: PUSH
47031: LD_INT 0
47033: ST_TO_ADDR
// uc_nation = 0 ;
47034: LD_ADDR_OWVAR 21
47038: PUSH
47039: LD_INT 0
47041: ST_TO_ADDR
// InitHc_All ( ) ;
47042: CALL_OW 584
// InitVc ;
47046: CALL_OW 20
// if mastodonts then
47050: LD_VAR 0 6
47054: IFFALSE 47121
// for i = 1 to mastodonts do
47056: LD_ADDR_VAR 0 11
47060: PUSH
47061: DOUBLE
47062: LD_INT 1
47064: DEC
47065: ST_TO_ADDR
47066: LD_VAR 0 6
47070: PUSH
47071: FOR_TO
47072: IFFALSE 47119
// begin vc_chassis := 31 ;
47074: LD_ADDR_OWVAR 37
47078: PUSH
47079: LD_INT 31
47081: ST_TO_ADDR
// vc_control := control_rider ;
47082: LD_ADDR_OWVAR 38
47086: PUSH
47087: LD_INT 4
47089: ST_TO_ADDR
// animal := CreateVehicle ;
47090: LD_ADDR_VAR 0 12
47094: PUSH
47095: CALL_OW 45
47099: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47100: LD_VAR 0 12
47104: PPUSH
47105: LD_VAR 0 8
47109: PPUSH
47110: LD_INT 0
47112: PPUSH
47113: CALL 49263 0 3
// end ;
47117: GO 47071
47119: POP
47120: POP
// if horses then
47121: LD_VAR 0 5
47125: IFFALSE 47192
// for i = 1 to horses do
47127: LD_ADDR_VAR 0 11
47131: PUSH
47132: DOUBLE
47133: LD_INT 1
47135: DEC
47136: ST_TO_ADDR
47137: LD_VAR 0 5
47141: PUSH
47142: FOR_TO
47143: IFFALSE 47190
// begin hc_class := 21 ;
47145: LD_ADDR_OWVAR 28
47149: PUSH
47150: LD_INT 21
47152: ST_TO_ADDR
// hc_gallery :=  ;
47153: LD_ADDR_OWVAR 33
47157: PUSH
47158: LD_STRING 
47160: ST_TO_ADDR
// animal := CreateHuman ;
47161: LD_ADDR_VAR 0 12
47165: PUSH
47166: CALL_OW 44
47170: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47171: LD_VAR 0 12
47175: PPUSH
47176: LD_VAR 0 8
47180: PPUSH
47181: LD_INT 0
47183: PPUSH
47184: CALL 49263 0 3
// end ;
47188: GO 47142
47190: POP
47191: POP
// if birds then
47192: LD_VAR 0 1
47196: IFFALSE 47263
// for i = 1 to birds do
47198: LD_ADDR_VAR 0 11
47202: PUSH
47203: DOUBLE
47204: LD_INT 1
47206: DEC
47207: ST_TO_ADDR
47208: LD_VAR 0 1
47212: PUSH
47213: FOR_TO
47214: IFFALSE 47261
// begin hc_class := 18 ;
47216: LD_ADDR_OWVAR 28
47220: PUSH
47221: LD_INT 18
47223: ST_TO_ADDR
// hc_gallery =  ;
47224: LD_ADDR_OWVAR 33
47228: PUSH
47229: LD_STRING 
47231: ST_TO_ADDR
// animal := CreateHuman ;
47232: LD_ADDR_VAR 0 12
47236: PUSH
47237: CALL_OW 44
47241: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47242: LD_VAR 0 12
47246: PPUSH
47247: LD_VAR 0 8
47251: PPUSH
47252: LD_INT 0
47254: PPUSH
47255: CALL 49263 0 3
// end ;
47259: GO 47213
47261: POP
47262: POP
// if tigers then
47263: LD_VAR 0 2
47267: IFFALSE 47351
// for i = 1 to tigers do
47269: LD_ADDR_VAR 0 11
47273: PUSH
47274: DOUBLE
47275: LD_INT 1
47277: DEC
47278: ST_TO_ADDR
47279: LD_VAR 0 2
47283: PUSH
47284: FOR_TO
47285: IFFALSE 47349
// begin hc_class = class_tiger ;
47287: LD_ADDR_OWVAR 28
47291: PUSH
47292: LD_INT 14
47294: ST_TO_ADDR
// hc_gallery =  ;
47295: LD_ADDR_OWVAR 33
47299: PUSH
47300: LD_STRING 
47302: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
47303: LD_ADDR_OWVAR 35
47307: PUSH
47308: LD_INT 7
47310: NEG
47311: PPUSH
47312: LD_INT 7
47314: PPUSH
47315: CALL_OW 12
47319: ST_TO_ADDR
// animal := CreateHuman ;
47320: LD_ADDR_VAR 0 12
47324: PUSH
47325: CALL_OW 44
47329: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47330: LD_VAR 0 12
47334: PPUSH
47335: LD_VAR 0 8
47339: PPUSH
47340: LD_INT 0
47342: PPUSH
47343: CALL 49263 0 3
// end ;
47347: GO 47284
47349: POP
47350: POP
// if apemans then
47351: LD_VAR 0 3
47355: IFFALSE 47478
// for i = 1 to apemans do
47357: LD_ADDR_VAR 0 11
47361: PUSH
47362: DOUBLE
47363: LD_INT 1
47365: DEC
47366: ST_TO_ADDR
47367: LD_VAR 0 3
47371: PUSH
47372: FOR_TO
47373: IFFALSE 47476
// begin hc_class = class_apeman ;
47375: LD_ADDR_OWVAR 28
47379: PUSH
47380: LD_INT 12
47382: ST_TO_ADDR
// hc_gallery =  ;
47383: LD_ADDR_OWVAR 33
47387: PUSH
47388: LD_STRING 
47390: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
47391: LD_ADDR_OWVAR 35
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PPUSH
47400: LD_INT 2
47402: PPUSH
47403: CALL_OW 12
47407: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
47408: LD_ADDR_OWVAR 31
47412: PUSH
47413: LD_INT 1
47415: PPUSH
47416: LD_INT 3
47418: PPUSH
47419: CALL_OW 12
47423: PUSH
47424: LD_INT 1
47426: PPUSH
47427: LD_INT 3
47429: PPUSH
47430: CALL_OW 12
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: ST_TO_ADDR
// animal := CreateHuman ;
47447: LD_ADDR_VAR 0 12
47451: PUSH
47452: CALL_OW 44
47456: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47457: LD_VAR 0 12
47461: PPUSH
47462: LD_VAR 0 8
47466: PPUSH
47467: LD_INT 0
47469: PPUSH
47470: CALL 49263 0 3
// end ;
47474: GO 47372
47476: POP
47477: POP
// if enchidnas then
47478: LD_VAR 0 4
47482: IFFALSE 47549
// for i = 1 to enchidnas do
47484: LD_ADDR_VAR 0 11
47488: PUSH
47489: DOUBLE
47490: LD_INT 1
47492: DEC
47493: ST_TO_ADDR
47494: LD_VAR 0 4
47498: PUSH
47499: FOR_TO
47500: IFFALSE 47547
// begin hc_class = 13 ;
47502: LD_ADDR_OWVAR 28
47506: PUSH
47507: LD_INT 13
47509: ST_TO_ADDR
// hc_gallery =  ;
47510: LD_ADDR_OWVAR 33
47514: PUSH
47515: LD_STRING 
47517: ST_TO_ADDR
// animal := CreateHuman ;
47518: LD_ADDR_VAR 0 12
47522: PUSH
47523: CALL_OW 44
47527: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47528: LD_VAR 0 12
47532: PPUSH
47533: LD_VAR 0 8
47537: PPUSH
47538: LD_INT 0
47540: PPUSH
47541: CALL 49263 0 3
// end ;
47545: GO 47499
47547: POP
47548: POP
// if fishes then
47549: LD_VAR 0 7
47553: IFFALSE 47620
// for i = 1 to fishes do
47555: LD_ADDR_VAR 0 11
47559: PUSH
47560: DOUBLE
47561: LD_INT 1
47563: DEC
47564: ST_TO_ADDR
47565: LD_VAR 0 7
47569: PUSH
47570: FOR_TO
47571: IFFALSE 47618
// begin hc_class = 20 ;
47573: LD_ADDR_OWVAR 28
47577: PUSH
47578: LD_INT 20
47580: ST_TO_ADDR
// hc_gallery =  ;
47581: LD_ADDR_OWVAR 33
47585: PUSH
47586: LD_STRING 
47588: ST_TO_ADDR
// animal := CreateHuman ;
47589: LD_ADDR_VAR 0 12
47593: PUSH
47594: CALL_OW 44
47598: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
47599: LD_VAR 0 12
47603: PPUSH
47604: LD_VAR 0 9
47608: PPUSH
47609: LD_INT 0
47611: PPUSH
47612: CALL 49263 0 3
// end ;
47616: GO 47570
47618: POP
47619: POP
// end ;
47620: LD_VAR 0 10
47624: RET
// export function WantHeal ( sci , unit ) ; begin
47625: LD_INT 0
47627: PPUSH
// if GetTaskList ( sci ) > 0 then
47628: LD_VAR 0 1
47632: PPUSH
47633: CALL_OW 437
47637: PUSH
47638: LD_INT 0
47640: GREATER
47641: IFFALSE 47713
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
47643: LD_VAR 0 1
47647: PPUSH
47648: CALL_OW 437
47652: PUSH
47653: LD_INT 1
47655: ARRAY
47656: PUSH
47657: LD_INT 1
47659: ARRAY
47660: PUSH
47661: LD_STRING l
47663: EQUAL
47664: IFFALSE 47691
47666: PUSH
47667: LD_VAR 0 1
47671: PPUSH
47672: CALL_OW 437
47676: PUSH
47677: LD_INT 1
47679: ARRAY
47680: PUSH
47681: LD_INT 4
47683: ARRAY
47684: PUSH
47685: LD_VAR 0 2
47689: EQUAL
47690: AND
47691: IFFALSE 47703
// result := true else
47693: LD_ADDR_VAR 0 3
47697: PUSH
47698: LD_INT 1
47700: ST_TO_ADDR
47701: GO 47711
// result := false ;
47703: LD_ADDR_VAR 0 3
47707: PUSH
47708: LD_INT 0
47710: ST_TO_ADDR
// end else
47711: GO 47721
// result := false ;
47713: LD_ADDR_VAR 0 3
47717: PUSH
47718: LD_INT 0
47720: ST_TO_ADDR
// end ;
47721: LD_VAR 0 3
47725: RET
// export function HealTarget ( sci ) ; begin
47726: LD_INT 0
47728: PPUSH
// if not sci then
47729: LD_VAR 0 1
47733: NOT
47734: IFFALSE 47738
// exit ;
47736: GO 47803
// result := 0 ;
47738: LD_ADDR_VAR 0 2
47742: PUSH
47743: LD_INT 0
47745: ST_TO_ADDR
// if GetTaskList ( sci ) then
47746: LD_VAR 0 1
47750: PPUSH
47751: CALL_OW 437
47755: IFFALSE 47803
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
47757: LD_VAR 0 1
47761: PPUSH
47762: CALL_OW 437
47766: PUSH
47767: LD_INT 1
47769: ARRAY
47770: PUSH
47771: LD_INT 1
47773: ARRAY
47774: PUSH
47775: LD_STRING l
47777: EQUAL
47778: IFFALSE 47803
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
47780: LD_ADDR_VAR 0 2
47784: PUSH
47785: LD_VAR 0 1
47789: PPUSH
47790: CALL_OW 437
47794: PUSH
47795: LD_INT 1
47797: ARRAY
47798: PUSH
47799: LD_INT 4
47801: ARRAY
47802: ST_TO_ADDR
// end ;
47803: LD_VAR 0 2
47807: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
47808: LD_INT 0
47810: PPUSH
47811: PPUSH
47812: PPUSH
47813: PPUSH
// if not base_units then
47814: LD_VAR 0 1
47818: NOT
47819: IFFALSE 47823
// exit ;
47821: GO 47910
// result := false ;
47823: LD_ADDR_VAR 0 2
47827: PUSH
47828: LD_INT 0
47830: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
47831: LD_ADDR_VAR 0 5
47835: PUSH
47836: LD_VAR 0 1
47840: PPUSH
47841: LD_INT 21
47843: PUSH
47844: LD_INT 3
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PPUSH
47851: CALL_OW 72
47855: ST_TO_ADDR
// if not tmp then
47856: LD_VAR 0 5
47860: NOT
47861: IFFALSE 47865
// exit ;
47863: GO 47910
// for i in tmp do
47865: LD_ADDR_VAR 0 3
47869: PUSH
47870: LD_VAR 0 5
47874: PUSH
47875: FOR_IN
47876: IFFALSE 47908
// begin result := EnemyInRange ( i , 22 ) ;
47878: LD_ADDR_VAR 0 2
47882: PUSH
47883: LD_VAR 0 3
47887: PPUSH
47888: LD_INT 22
47890: PPUSH
47891: CALL 45335 0 2
47895: ST_TO_ADDR
// if result then
47896: LD_VAR 0 2
47900: IFFALSE 47906
// exit ;
47902: POP
47903: POP
47904: GO 47910
// end ;
47906: GO 47875
47908: POP
47909: POP
// end ;
47910: LD_VAR 0 2
47914: RET
// export function FilterByTag ( units , tag ) ; begin
47915: LD_INT 0
47917: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47918: LD_ADDR_VAR 0 3
47922: PUSH
47923: LD_VAR 0 1
47927: PPUSH
47928: LD_INT 120
47930: PUSH
47931: LD_VAR 0 2
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PPUSH
47940: CALL_OW 72
47944: ST_TO_ADDR
// end ;
47945: LD_VAR 0 3
47949: RET
// export function IsDriver ( un ) ; begin
47950: LD_INT 0
47952: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47953: LD_ADDR_VAR 0 2
47957: PUSH
47958: LD_VAR 0 1
47962: PUSH
47963: LD_INT 55
47965: PUSH
47966: EMPTY
47967: LIST
47968: PPUSH
47969: CALL_OW 69
47973: IN
47974: ST_TO_ADDR
// end ;
47975: LD_VAR 0 2
47979: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47980: LD_INT 0
47982: PPUSH
47983: PPUSH
// list := [ ] ;
47984: LD_ADDR_VAR 0 5
47988: PUSH
47989: EMPTY
47990: ST_TO_ADDR
// case d of 0 :
47991: LD_VAR 0 3
47995: PUSH
47996: LD_INT 0
47998: DOUBLE
47999: EQUAL
48000: IFTRUE 48004
48002: GO 48137
48004: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
48005: LD_ADDR_VAR 0 5
48009: PUSH
48010: LD_VAR 0 1
48014: PUSH
48015: LD_INT 4
48017: MINUS
48018: PUSH
48019: LD_VAR 0 2
48023: PUSH
48024: LD_INT 4
48026: MINUS
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: LIST
48035: PUSH
48036: LD_VAR 0 1
48040: PUSH
48041: LD_INT 3
48043: MINUS
48044: PUSH
48045: LD_VAR 0 2
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: LIST
48057: PUSH
48058: LD_VAR 0 1
48062: PUSH
48063: LD_INT 4
48065: PLUS
48066: PUSH
48067: LD_VAR 0 2
48071: PUSH
48072: LD_INT 4
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: LIST
48079: PUSH
48080: LD_VAR 0 1
48084: PUSH
48085: LD_INT 3
48087: PLUS
48088: PUSH
48089: LD_VAR 0 2
48093: PUSH
48094: LD_INT 3
48096: PLUS
48097: PUSH
48098: LD_INT 5
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: LIST
48105: PUSH
48106: LD_VAR 0 1
48110: PUSH
48111: LD_VAR 0 2
48115: PUSH
48116: LD_INT 4
48118: PLUS
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: LIST
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: ST_TO_ADDR
// end ; 1 :
48135: GO 48835
48137: LD_INT 1
48139: DOUBLE
48140: EQUAL
48141: IFTRUE 48145
48143: GO 48278
48145: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
48146: LD_ADDR_VAR 0 5
48150: PUSH
48151: LD_VAR 0 1
48155: PUSH
48156: LD_VAR 0 2
48160: PUSH
48161: LD_INT 4
48163: MINUS
48164: PUSH
48165: LD_INT 3
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: LIST
48172: PUSH
48173: LD_VAR 0 1
48177: PUSH
48178: LD_INT 3
48180: MINUS
48181: PUSH
48182: LD_VAR 0 2
48186: PUSH
48187: LD_INT 3
48189: MINUS
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: LIST
48198: PUSH
48199: LD_VAR 0 1
48203: PUSH
48204: LD_INT 4
48206: MINUS
48207: PUSH
48208: LD_VAR 0 2
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: LIST
48220: PUSH
48221: LD_VAR 0 1
48225: PUSH
48226: LD_VAR 0 2
48230: PUSH
48231: LD_INT 3
48233: PLUS
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: PUSH
48243: LD_VAR 0 1
48247: PUSH
48248: LD_INT 4
48250: PLUS
48251: PUSH
48252: LD_VAR 0 2
48256: PUSH
48257: LD_INT 4
48259: PLUS
48260: PUSH
48261: LD_INT 5
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: LIST
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: ST_TO_ADDR
// end ; 2 :
48276: GO 48835
48278: LD_INT 2
48280: DOUBLE
48281: EQUAL
48282: IFTRUE 48286
48284: GO 48415
48286: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
48287: LD_ADDR_VAR 0 5
48291: PUSH
48292: LD_VAR 0 1
48296: PUSH
48297: LD_VAR 0 2
48301: PUSH
48302: LD_INT 3
48304: MINUS
48305: PUSH
48306: LD_INT 3
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: LIST
48313: PUSH
48314: LD_VAR 0 1
48318: PUSH
48319: LD_INT 4
48321: PLUS
48322: PUSH
48323: LD_VAR 0 2
48327: PUSH
48328: LD_INT 4
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: LIST
48335: PUSH
48336: LD_VAR 0 1
48340: PUSH
48341: LD_VAR 0 2
48345: PUSH
48346: LD_INT 4
48348: PLUS
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: LIST
48357: PUSH
48358: LD_VAR 0 1
48362: PUSH
48363: LD_INT 3
48365: MINUS
48366: PUSH
48367: LD_VAR 0 2
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: LIST
48379: PUSH
48380: LD_VAR 0 1
48384: PUSH
48385: LD_INT 4
48387: MINUS
48388: PUSH
48389: LD_VAR 0 2
48393: PUSH
48394: LD_INT 4
48396: MINUS
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: LIST
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: ST_TO_ADDR
// end ; 3 :
48413: GO 48835
48415: LD_INT 3
48417: DOUBLE
48418: EQUAL
48419: IFTRUE 48423
48421: GO 48556
48423: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
48424: LD_ADDR_VAR 0 5
48428: PUSH
48429: LD_VAR 0 1
48433: PUSH
48434: LD_INT 3
48436: PLUS
48437: PUSH
48438: LD_VAR 0 2
48442: PUSH
48443: LD_INT 4
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: LIST
48450: PUSH
48451: LD_VAR 0 1
48455: PUSH
48456: LD_INT 4
48458: PLUS
48459: PUSH
48460: LD_VAR 0 2
48464: PUSH
48465: LD_INT 4
48467: PLUS
48468: PUSH
48469: LD_INT 5
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: LIST
48476: PUSH
48477: LD_VAR 0 1
48481: PUSH
48482: LD_INT 4
48484: MINUS
48485: PUSH
48486: LD_VAR 0 2
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: LIST
48498: PUSH
48499: LD_VAR 0 1
48503: PUSH
48504: LD_VAR 0 2
48508: PUSH
48509: LD_INT 4
48511: MINUS
48512: PUSH
48513: LD_INT 3
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: LIST
48520: PUSH
48521: LD_VAR 0 1
48525: PUSH
48526: LD_INT 3
48528: MINUS
48529: PUSH
48530: LD_VAR 0 2
48534: PUSH
48535: LD_INT 3
48537: MINUS
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: LIST
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: ST_TO_ADDR
// end ; 4 :
48554: GO 48835
48556: LD_INT 4
48558: DOUBLE
48559: EQUAL
48560: IFTRUE 48564
48562: GO 48697
48564: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
48565: LD_ADDR_VAR 0 5
48569: PUSH
48570: LD_VAR 0 1
48574: PUSH
48575: LD_VAR 0 2
48579: PUSH
48580: LD_INT 4
48582: PLUS
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: LIST
48591: PUSH
48592: LD_VAR 0 1
48596: PUSH
48597: LD_INT 3
48599: PLUS
48600: PUSH
48601: LD_VAR 0 2
48605: PUSH
48606: LD_INT 3
48608: PLUS
48609: PUSH
48610: LD_INT 5
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: LIST
48617: PUSH
48618: LD_VAR 0 1
48622: PUSH
48623: LD_INT 4
48625: PLUS
48626: PUSH
48627: LD_VAR 0 2
48631: PUSH
48632: LD_INT 4
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: LIST
48639: PUSH
48640: LD_VAR 0 1
48644: PUSH
48645: LD_VAR 0 2
48649: PUSH
48650: LD_INT 3
48652: MINUS
48653: PUSH
48654: LD_INT 3
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: LIST
48661: PUSH
48662: LD_VAR 0 1
48666: PUSH
48667: LD_INT 4
48669: MINUS
48670: PUSH
48671: LD_VAR 0 2
48675: PUSH
48676: LD_INT 4
48678: MINUS
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: ST_TO_ADDR
// end ; 5 :
48695: GO 48835
48697: LD_INT 5
48699: DOUBLE
48700: EQUAL
48701: IFTRUE 48705
48703: GO 48834
48705: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
48706: LD_ADDR_VAR 0 5
48710: PUSH
48711: LD_VAR 0 1
48715: PUSH
48716: LD_INT 4
48718: MINUS
48719: PUSH
48720: LD_VAR 0 2
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: LIST
48732: PUSH
48733: LD_VAR 0 1
48737: PUSH
48738: LD_VAR 0 2
48742: PUSH
48743: LD_INT 4
48745: MINUS
48746: PUSH
48747: LD_INT 3
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: LIST
48754: PUSH
48755: LD_VAR 0 1
48759: PUSH
48760: LD_INT 4
48762: PLUS
48763: PUSH
48764: LD_VAR 0 2
48768: PUSH
48769: LD_INT 4
48771: PLUS
48772: PUSH
48773: LD_INT 5
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: LIST
48780: PUSH
48781: LD_VAR 0 1
48785: PUSH
48786: LD_INT 3
48788: PLUS
48789: PUSH
48790: LD_VAR 0 2
48794: PUSH
48795: LD_INT 4
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: LIST
48802: PUSH
48803: LD_VAR 0 1
48807: PUSH
48808: LD_VAR 0 2
48812: PUSH
48813: LD_INT 3
48815: PLUS
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: LIST
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: ST_TO_ADDR
// end ; end ;
48832: GO 48835
48834: POP
// result := list ;
48835: LD_ADDR_VAR 0 4
48839: PUSH
48840: LD_VAR 0 5
48844: ST_TO_ADDR
// end ;
48845: LD_VAR 0 4
48849: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48850: LD_INT 0
48852: PPUSH
48853: PPUSH
48854: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48855: LD_VAR 0 1
48859: NOT
48860: IFTRUE 48888
48862: PUSH
48863: LD_VAR 0 2
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: LD_INT 2
48873: PUSH
48874: LD_INT 3
48876: PUSH
48877: LD_INT 4
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: IN
48886: NOT
48887: OR
48888: IFFALSE 48892
// exit ;
48890: GO 48975
// tmp := [ ] ;
48892: LD_ADDR_VAR 0 5
48896: PUSH
48897: EMPTY
48898: ST_TO_ADDR
// for i in units do
48899: LD_ADDR_VAR 0 4
48903: PUSH
48904: LD_VAR 0 1
48908: PUSH
48909: FOR_IN
48910: IFFALSE 48944
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
48912: LD_ADDR_VAR 0 5
48916: PUSH
48917: LD_VAR 0 5
48921: PPUSH
48922: LD_VAR 0 4
48926: PPUSH
48927: LD_VAR 0 2
48931: PPUSH
48932: CALL_OW 259
48936: PPUSH
48937: CALL 50370 0 2
48941: ST_TO_ADDR
48942: GO 48909
48944: POP
48945: POP
// if not tmp then
48946: LD_VAR 0 5
48950: NOT
48951: IFFALSE 48955
// exit ;
48953: GO 48975
// result := SortListByListDesc ( units , tmp ) ;
48955: LD_ADDR_VAR 0 3
48959: PUSH
48960: LD_VAR 0 1
48964: PPUSH
48965: LD_VAR 0 5
48969: PPUSH
48970: CALL_OW 77
48974: ST_TO_ADDR
// end ;
48975: LD_VAR 0 3
48979: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48980: LD_INT 0
48982: PPUSH
48983: PPUSH
48984: PPUSH
// result := false ;
48985: LD_ADDR_VAR 0 3
48989: PUSH
48990: LD_INT 0
48992: ST_TO_ADDR
// if not building then
48993: LD_VAR 0 2
48997: NOT
48998: IFFALSE 49002
// exit ;
49000: GO 49146
// x := GetX ( building ) ;
49002: LD_ADDR_VAR 0 4
49006: PUSH
49007: LD_VAR 0 2
49011: PPUSH
49012: CALL_OW 250
49016: ST_TO_ADDR
// y := GetY ( building ) ;
49017: LD_ADDR_VAR 0 5
49021: PUSH
49022: LD_VAR 0 2
49026: PPUSH
49027: CALL_OW 251
49031: ST_TO_ADDR
// if not x or not y then
49032: LD_VAR 0 4
49036: NOT
49037: IFTRUE 49046
49039: PUSH
49040: LD_VAR 0 5
49044: NOT
49045: OR
49046: IFFALSE 49050
// exit ;
49048: GO 49146
// if GetTaskList ( unit ) then
49050: LD_VAR 0 1
49054: PPUSH
49055: CALL_OW 437
49059: IFFALSE 49146
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
49061: LD_STRING e
49063: PUSH
49064: LD_VAR 0 1
49068: PPUSH
49069: CALL_OW 437
49073: PUSH
49074: LD_INT 1
49076: ARRAY
49077: PUSH
49078: LD_INT 1
49080: ARRAY
49081: EQUAL
49082: IFFALSE 49109
49084: PUSH
49085: LD_VAR 0 4
49089: PUSH
49090: LD_VAR 0 1
49094: PPUSH
49095: CALL_OW 437
49099: PUSH
49100: LD_INT 1
49102: ARRAY
49103: PUSH
49104: LD_INT 2
49106: ARRAY
49107: EQUAL
49108: AND
49109: IFFALSE 49136
49111: PUSH
49112: LD_VAR 0 5
49116: PUSH
49117: LD_VAR 0 1
49121: PPUSH
49122: CALL_OW 437
49126: PUSH
49127: LD_INT 1
49129: ARRAY
49130: PUSH
49131: LD_INT 3
49133: ARRAY
49134: EQUAL
49135: AND
49136: IFFALSE 49146
// result := true end ;
49138: LD_ADDR_VAR 0 3
49142: PUSH
49143: LD_INT 1
49145: ST_TO_ADDR
// end ;
49146: LD_VAR 0 3
49150: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
49151: LD_INT 0
49153: PPUSH
// result := false ;
49154: LD_ADDR_VAR 0 4
49158: PUSH
49159: LD_INT 0
49161: ST_TO_ADDR
// if GetTaskList ( unit ) then
49162: LD_VAR 0 1
49166: PPUSH
49167: CALL_OW 437
49171: IFFALSE 49258
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
49173: LD_STRING M
49175: PUSH
49176: LD_VAR 0 1
49180: PPUSH
49181: CALL_OW 437
49185: PUSH
49186: LD_INT 1
49188: ARRAY
49189: PUSH
49190: LD_INT 1
49192: ARRAY
49193: EQUAL
49194: IFFALSE 49221
49196: PUSH
49197: LD_VAR 0 2
49201: PUSH
49202: LD_VAR 0 1
49206: PPUSH
49207: CALL_OW 437
49211: PUSH
49212: LD_INT 1
49214: ARRAY
49215: PUSH
49216: LD_INT 2
49218: ARRAY
49219: EQUAL
49220: AND
49221: IFFALSE 49248
49223: PUSH
49224: LD_VAR 0 3
49228: PUSH
49229: LD_VAR 0 1
49233: PPUSH
49234: CALL_OW 437
49238: PUSH
49239: LD_INT 1
49241: ARRAY
49242: PUSH
49243: LD_INT 3
49245: ARRAY
49246: EQUAL
49247: AND
49248: IFFALSE 49258
// result := true ;
49250: LD_ADDR_VAR 0 4
49254: PUSH
49255: LD_INT 1
49257: ST_TO_ADDR
// end ; end ;
49258: LD_VAR 0 4
49262: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
49263: LD_INT 0
49265: PPUSH
49266: PPUSH
49267: PPUSH
49268: PPUSH
// if not unit or not area then
49269: LD_VAR 0 1
49273: NOT
49274: IFTRUE 49283
49276: PUSH
49277: LD_VAR 0 2
49281: NOT
49282: OR
49283: IFFALSE 49287
// exit ;
49285: GO 49463
// tmp := AreaToList ( area , i ) ;
49287: LD_ADDR_VAR 0 6
49291: PUSH
49292: LD_VAR 0 2
49296: PPUSH
49297: LD_VAR 0 5
49301: PPUSH
49302: CALL_OW 517
49306: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
49307: LD_ADDR_VAR 0 5
49311: PUSH
49312: DOUBLE
49313: LD_INT 1
49315: DEC
49316: ST_TO_ADDR
49317: LD_VAR 0 6
49321: PUSH
49322: LD_INT 1
49324: ARRAY
49325: PUSH
49326: FOR_TO
49327: IFFALSE 49461
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
49329: LD_ADDR_VAR 0 7
49333: PUSH
49334: LD_VAR 0 6
49338: PUSH
49339: LD_INT 1
49341: ARRAY
49342: PUSH
49343: LD_VAR 0 5
49347: ARRAY
49348: PUSH
49349: LD_VAR 0 6
49353: PUSH
49354: LD_INT 2
49356: ARRAY
49357: PUSH
49358: LD_VAR 0 5
49362: ARRAY
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
49368: LD_INT 92
49370: PUSH
49371: LD_VAR 0 7
49375: PUSH
49376: LD_INT 1
49378: ARRAY
49379: PUSH
49380: LD_VAR 0 7
49384: PUSH
49385: LD_INT 2
49387: ARRAY
49388: PUSH
49389: LD_INT 2
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: PPUSH
49398: CALL_OW 69
49402: PUSH
49403: LD_INT 0
49405: EQUAL
49406: IFFALSE 49459
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
49408: LD_VAR 0 1
49412: PPUSH
49413: LD_VAR 0 7
49417: PUSH
49418: LD_INT 1
49420: ARRAY
49421: PPUSH
49422: LD_VAR 0 7
49426: PUSH
49427: LD_INT 2
49429: ARRAY
49430: PPUSH
49431: LD_VAR 0 3
49435: PPUSH
49436: CALL_OW 48
// result := IsPlaced ( unit ) ;
49440: LD_ADDR_VAR 0 4
49444: PUSH
49445: LD_VAR 0 1
49449: PPUSH
49450: CALL_OW 305
49454: ST_TO_ADDR
// exit ;
49455: POP
49456: POP
49457: GO 49463
// end ; end ;
49459: GO 49326
49461: POP
49462: POP
// end ;
49463: LD_VAR 0 4
49467: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
49468: LD_INT 0
49470: PPUSH
49471: PPUSH
49472: PPUSH
// if not side or side > 8 then
49473: LD_VAR 0 1
49477: NOT
49478: IFTRUE 49490
49480: PUSH
49481: LD_VAR 0 1
49485: PUSH
49486: LD_INT 8
49488: GREATER
49489: OR
49490: IFFALSE 49494
// exit ;
49492: GO 49681
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
49494: LD_ADDR_VAR 0 4
49498: PUSH
49499: LD_INT 22
49501: PUSH
49502: LD_VAR 0 1
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 21
49513: PUSH
49514: LD_INT 3
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PPUSH
49525: CALL_OW 69
49529: ST_TO_ADDR
// if not tmp then
49530: LD_VAR 0 4
49534: NOT
49535: IFFALSE 49539
// exit ;
49537: GO 49681
// enable_addtolog := true ;
49539: LD_ADDR_OWVAR 81
49543: PUSH
49544: LD_INT 1
49546: ST_TO_ADDR
// AddToLog ( [ ) ;
49547: LD_STRING [
49549: PPUSH
49550: CALL_OW 561
// for i in tmp do
49554: LD_ADDR_VAR 0 3
49558: PUSH
49559: LD_VAR 0 4
49563: PUSH
49564: FOR_IN
49565: IFFALSE 49672
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
49567: LD_STRING [
49569: PUSH
49570: LD_VAR 0 3
49574: PPUSH
49575: CALL_OW 266
49579: STR
49580: PUSH
49581: LD_STRING , 
49583: STR
49584: PUSH
49585: LD_VAR 0 3
49589: PPUSH
49590: CALL_OW 250
49594: STR
49595: PUSH
49596: LD_STRING , 
49598: STR
49599: PUSH
49600: LD_VAR 0 3
49604: PPUSH
49605: CALL_OW 251
49609: STR
49610: PUSH
49611: LD_STRING , 
49613: STR
49614: PUSH
49615: LD_VAR 0 3
49619: PPUSH
49620: CALL_OW 254
49624: STR
49625: PUSH
49626: LD_STRING , 
49628: STR
49629: PUSH
49630: LD_VAR 0 3
49634: PPUSH
49635: LD_INT 1
49637: PPUSH
49638: CALL_OW 268
49642: STR
49643: PUSH
49644: LD_STRING , 
49646: STR
49647: PUSH
49648: LD_VAR 0 3
49652: PPUSH
49653: LD_INT 2
49655: PPUSH
49656: CALL_OW 268
49660: STR
49661: PUSH
49662: LD_STRING ],
49664: STR
49665: PPUSH
49666: CALL_OW 561
// end ;
49670: GO 49564
49672: POP
49673: POP
// AddToLog ( ]; ) ;
49674: LD_STRING ];
49676: PPUSH
49677: CALL_OW 561
// end ;
49681: LD_VAR 0 2
49685: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
49686: LD_INT 0
49688: PPUSH
49689: PPUSH
49690: PPUSH
49691: PPUSH
49692: PPUSH
// if not area or not rate or not max then
49693: LD_VAR 0 1
49697: NOT
49698: IFTRUE 49707
49700: PUSH
49701: LD_VAR 0 2
49705: NOT
49706: OR
49707: IFTRUE 49716
49709: PUSH
49710: LD_VAR 0 4
49714: NOT
49715: OR
49716: IFFALSE 49720
// exit ;
49718: GO 49909
// while 1 do
49720: LD_INT 1
49722: IFFALSE 49909
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
49724: LD_ADDR_VAR 0 9
49728: PUSH
49729: LD_VAR 0 1
49733: PPUSH
49734: LD_INT 1
49736: PPUSH
49737: CALL_OW 287
49741: PUSH
49742: LD_INT 10
49744: MUL
49745: ST_TO_ADDR
// r := rate / 10 ;
49746: LD_ADDR_VAR 0 7
49750: PUSH
49751: LD_VAR 0 2
49755: PUSH
49756: LD_INT 10
49758: DIVREAL
49759: ST_TO_ADDR
// time := 1 1$00 ;
49760: LD_ADDR_VAR 0 8
49764: PUSH
49765: LD_INT 2100
49767: ST_TO_ADDR
// if amount < min then
49768: LD_VAR 0 9
49772: PUSH
49773: LD_VAR 0 3
49777: LESS
49778: IFFALSE 49796
// r := r * 2 else
49780: LD_ADDR_VAR 0 7
49784: PUSH
49785: LD_VAR 0 7
49789: PUSH
49790: LD_INT 2
49792: MUL
49793: ST_TO_ADDR
49794: GO 49822
// if amount > max then
49796: LD_VAR 0 9
49800: PUSH
49801: LD_VAR 0 4
49805: GREATER
49806: IFFALSE 49822
// r := r / 2 ;
49808: LD_ADDR_VAR 0 7
49812: PUSH
49813: LD_VAR 0 7
49817: PUSH
49818: LD_INT 2
49820: DIVREAL
49821: ST_TO_ADDR
// time := time / r ;
49822: LD_ADDR_VAR 0 8
49826: PUSH
49827: LD_VAR 0 8
49831: PUSH
49832: LD_VAR 0 7
49836: DIVREAL
49837: ST_TO_ADDR
// if time < 0 then
49838: LD_VAR 0 8
49842: PUSH
49843: LD_INT 0
49845: LESS
49846: IFFALSE 49863
// time := time * - 1 ;
49848: LD_ADDR_VAR 0 8
49852: PUSH
49853: LD_VAR 0 8
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: MUL
49862: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
49863: LD_VAR 0 8
49867: PUSH
49868: LD_INT 35
49870: PPUSH
49871: LD_INT 875
49873: PPUSH
49874: CALL_OW 12
49878: PLUS
49879: PPUSH
49880: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49884: LD_INT 1
49886: PPUSH
49887: LD_INT 5
49889: PPUSH
49890: CALL_OW 12
49894: PPUSH
49895: LD_VAR 0 1
49899: PPUSH
49900: LD_INT 1
49902: PPUSH
49903: CALL_OW 55
// end ;
49907: GO 49720
// end ;
49909: LD_VAR 0 5
49913: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49914: LD_INT 0
49916: PPUSH
49917: PPUSH
49918: PPUSH
49919: PPUSH
49920: PPUSH
49921: PPUSH
49922: PPUSH
49923: PPUSH
// if not turrets or not factories then
49924: LD_VAR 0 1
49928: NOT
49929: IFTRUE 49938
49931: PUSH
49932: LD_VAR 0 2
49936: NOT
49937: OR
49938: IFFALSE 49942
// exit ;
49940: GO 50249
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49942: LD_ADDR_VAR 0 10
49946: PUSH
49947: LD_INT 5
49949: PUSH
49950: LD_INT 6
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: LD_INT 4
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 3
49969: PUSH
49970: LD_INT 5
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 24
49984: PUSH
49985: LD_INT 25
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 23
49994: PUSH
49995: LD_INT 27
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 42
50008: PUSH
50009: LD_INT 43
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 44
50018: PUSH
50019: LD_INT 46
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 45
50028: PUSH
50029: LD_INT 47
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: LIST
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: LIST
50045: ST_TO_ADDR
// result := [ ] ;
50046: LD_ADDR_VAR 0 3
50050: PUSH
50051: EMPTY
50052: ST_TO_ADDR
// for i in turrets do
50053: LD_ADDR_VAR 0 4
50057: PUSH
50058: LD_VAR 0 1
50062: PUSH
50063: FOR_IN
50064: IFFALSE 50247
// begin nat := GetNation ( i ) ;
50066: LD_ADDR_VAR 0 7
50070: PUSH
50071: LD_VAR 0 4
50075: PPUSH
50076: CALL_OW 248
50080: ST_TO_ADDR
// weapon := 0 ;
50081: LD_ADDR_VAR 0 8
50085: PUSH
50086: LD_INT 0
50088: ST_TO_ADDR
// if not nat then
50089: LD_VAR 0 7
50093: NOT
50094: IFFALSE 50098
// continue ;
50096: GO 50063
// for j in list [ nat ] do
50098: LD_ADDR_VAR 0 5
50102: PUSH
50103: LD_VAR 0 10
50107: PUSH
50108: LD_VAR 0 7
50112: ARRAY
50113: PUSH
50114: FOR_IN
50115: IFFALSE 50156
// if GetBWeapon ( i ) = j [ 1 ] then
50117: LD_VAR 0 4
50121: PPUSH
50122: CALL_OW 269
50126: PUSH
50127: LD_VAR 0 5
50131: PUSH
50132: LD_INT 1
50134: ARRAY
50135: EQUAL
50136: IFFALSE 50154
// begin weapon := j [ 2 ] ;
50138: LD_ADDR_VAR 0 8
50142: PUSH
50143: LD_VAR 0 5
50147: PUSH
50148: LD_INT 2
50150: ARRAY
50151: ST_TO_ADDR
// break ;
50152: GO 50156
// end ;
50154: GO 50114
50156: POP
50157: POP
// if not weapon then
50158: LD_VAR 0 8
50162: NOT
50163: IFFALSE 50167
// continue ;
50165: GO 50063
// for k in factories do
50167: LD_ADDR_VAR 0 6
50171: PUSH
50172: LD_VAR 0 2
50176: PUSH
50177: FOR_IN
50178: IFFALSE 50243
// begin weapons := AvailableWeaponList ( k ) ;
50180: LD_ADDR_VAR 0 9
50184: PUSH
50185: LD_VAR 0 6
50189: PPUSH
50190: CALL_OW 478
50194: ST_TO_ADDR
// if not weapons then
50195: LD_VAR 0 9
50199: NOT
50200: IFFALSE 50204
// continue ;
50202: GO 50177
// if weapon in weapons then
50204: LD_VAR 0 8
50208: PUSH
50209: LD_VAR 0 9
50213: IN
50214: IFFALSE 50241
// begin result := [ i , weapon ] ;
50216: LD_ADDR_VAR 0 3
50220: PUSH
50221: LD_VAR 0 4
50225: PUSH
50226: LD_VAR 0 8
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: ST_TO_ADDR
// exit ;
50235: POP
50236: POP
50237: POP
50238: POP
50239: GO 50249
// end ; end ;
50241: GO 50177
50243: POP
50244: POP
// end ;
50245: GO 50063
50247: POP
50248: POP
// end ;
50249: LD_VAR 0 3
50253: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
50254: LD_INT 0
50256: PPUSH
// if not side or side > 8 then
50257: LD_VAR 0 3
50261: NOT
50262: IFTRUE 50274
50264: PUSH
50265: LD_VAR 0 3
50269: PUSH
50270: LD_INT 8
50272: GREATER
50273: OR
50274: IFFALSE 50278
// exit ;
50276: GO 50337
// if not range then
50278: LD_VAR 0 4
50282: NOT
50283: IFFALSE 50294
// range := - 12 ;
50285: LD_ADDR_VAR 0 4
50289: PUSH
50290: LD_INT 12
50292: NEG
50293: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
50294: LD_VAR 0 1
50298: PPUSH
50299: LD_VAR 0 2
50303: PPUSH
50304: LD_VAR 0 3
50308: PPUSH
50309: LD_VAR 0 4
50313: PPUSH
50314: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
50318: LD_VAR 0 1
50322: PPUSH
50323: LD_VAR 0 2
50327: PPUSH
50328: LD_VAR 0 3
50332: PPUSH
50333: CALL_OW 331
// end ;
50337: LD_VAR 0 5
50341: RET
// export function Video ( mode ) ; begin
50342: LD_INT 0
50344: PPUSH
// ingame_video = mode ;
50345: LD_ADDR_OWVAR 52
50349: PUSH
50350: LD_VAR 0 1
50354: ST_TO_ADDR
// interface_hidden = mode ;
50355: LD_ADDR_OWVAR 54
50359: PUSH
50360: LD_VAR 0 1
50364: ST_TO_ADDR
// end ;
50365: LD_VAR 0 2
50369: RET
// export function Join ( array , element ) ; begin
50370: LD_INT 0
50372: PPUSH
// result := Replace ( array , array + 1 , element ) ;
50373: LD_ADDR_VAR 0 3
50377: PUSH
50378: LD_VAR 0 1
50382: PPUSH
50383: LD_VAR 0 1
50387: PUSH
50388: LD_INT 1
50390: PLUS
50391: PPUSH
50392: LD_VAR 0 2
50396: PPUSH
50397: CALL_OW 1
50401: ST_TO_ADDR
// end ;
50402: LD_VAR 0 3
50406: RET
// export function JoinUnion ( array , element ) ; begin
50407: LD_INT 0
50409: PPUSH
// result := array union element ;
50410: LD_ADDR_VAR 0 3
50414: PUSH
50415: LD_VAR 0 1
50419: PUSH
50420: LD_VAR 0 2
50424: UNION
50425: ST_TO_ADDR
// end ;
50426: LD_VAR 0 3
50430: RET
// export function GetBehemoths ( side ) ; begin
50431: LD_INT 0
50433: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
50434: LD_ADDR_VAR 0 2
50438: PUSH
50439: LD_INT 22
50441: PUSH
50442: LD_VAR 0 1
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 31
50453: PUSH
50454: LD_INT 25
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PPUSH
50465: CALL_OW 69
50469: ST_TO_ADDR
// end ;
50470: LD_VAR 0 2
50474: RET
// export function Shuffle ( array ) ; var i , index ; begin
50475: LD_INT 0
50477: PPUSH
50478: PPUSH
50479: PPUSH
// result := [ ] ;
50480: LD_ADDR_VAR 0 2
50484: PUSH
50485: EMPTY
50486: ST_TO_ADDR
// if not array then
50487: LD_VAR 0 1
50491: NOT
50492: IFFALSE 50496
// exit ;
50494: GO 50595
// Randomize ;
50496: CALL_OW 10
// for i = array downto 1 do
50500: LD_ADDR_VAR 0 3
50504: PUSH
50505: DOUBLE
50506: LD_VAR 0 1
50510: INC
50511: ST_TO_ADDR
50512: LD_INT 1
50514: PUSH
50515: FOR_DOWNTO
50516: IFFALSE 50593
// begin index := rand ( 1 , array ) ;
50518: LD_ADDR_VAR 0 4
50522: PUSH
50523: LD_INT 1
50525: PPUSH
50526: LD_VAR 0 1
50530: PPUSH
50531: CALL_OW 12
50535: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
50536: LD_ADDR_VAR 0 2
50540: PUSH
50541: LD_VAR 0 2
50545: PPUSH
50546: LD_VAR 0 2
50550: PUSH
50551: LD_INT 1
50553: PLUS
50554: PPUSH
50555: LD_VAR 0 1
50559: PUSH
50560: LD_VAR 0 4
50564: ARRAY
50565: PPUSH
50566: CALL_OW 2
50570: ST_TO_ADDR
// array := Delete ( array , index ) ;
50571: LD_ADDR_VAR 0 1
50575: PUSH
50576: LD_VAR 0 1
50580: PPUSH
50581: LD_VAR 0 4
50585: PPUSH
50586: CALL_OW 3
50590: ST_TO_ADDR
// end ;
50591: GO 50515
50593: POP
50594: POP
// end ;
50595: LD_VAR 0 2
50599: RET
// export function GetBaseMaterials ( base ) ; begin
50600: LD_INT 0
50602: PPUSH
// result := [ 0 , 0 , 0 ] ;
50603: LD_ADDR_VAR 0 2
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: LIST
50621: ST_TO_ADDR
// if not base then
50622: LD_VAR 0 1
50626: NOT
50627: IFFALSE 50631
// exit ;
50629: GO 50680
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
50631: LD_ADDR_VAR 0 2
50635: PUSH
50636: LD_VAR 0 1
50640: PPUSH
50641: LD_INT 1
50643: PPUSH
50644: CALL_OW 275
50648: PUSH
50649: LD_VAR 0 1
50653: PPUSH
50654: LD_INT 2
50656: PPUSH
50657: CALL_OW 275
50661: PUSH
50662: LD_VAR 0 1
50666: PPUSH
50667: LD_INT 3
50669: PPUSH
50670: CALL_OW 275
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: LIST
50679: ST_TO_ADDR
// end ;
50680: LD_VAR 0 2
50684: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
50685: LD_INT 0
50687: PPUSH
50688: PPUSH
// result := array ;
50689: LD_ADDR_VAR 0 3
50693: PUSH
50694: LD_VAR 0 1
50698: ST_TO_ADDR
// if size >= result then
50699: LD_VAR 0 2
50703: PUSH
50704: LD_VAR 0 3
50708: GREATEREQUAL
50709: IFFALSE 50713
// exit ;
50711: GO 50763
// if size then
50713: LD_VAR 0 2
50717: IFFALSE 50763
// for i := array downto size do
50719: LD_ADDR_VAR 0 4
50723: PUSH
50724: DOUBLE
50725: LD_VAR 0 1
50729: INC
50730: ST_TO_ADDR
50731: LD_VAR 0 2
50735: PUSH
50736: FOR_DOWNTO
50737: IFFALSE 50761
// result := Delete ( result , result ) ;
50739: LD_ADDR_VAR 0 3
50743: PUSH
50744: LD_VAR 0 3
50748: PPUSH
50749: LD_VAR 0 3
50753: PPUSH
50754: CALL_OW 3
50758: ST_TO_ADDR
50759: GO 50736
50761: POP
50762: POP
// end ;
50763: LD_VAR 0 3
50767: RET
// export function ComExit ( unit ) ; var tmp ; begin
50768: LD_INT 0
50770: PPUSH
50771: PPUSH
// if not IsInUnit ( unit ) then
50772: LD_VAR 0 1
50776: PPUSH
50777: CALL_OW 310
50781: NOT
50782: IFFALSE 50786
// exit ;
50784: GO 50846
// tmp := IsInUnit ( unit ) ;
50786: LD_ADDR_VAR 0 3
50790: PUSH
50791: LD_VAR 0 1
50795: PPUSH
50796: CALL_OW 310
50800: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
50801: LD_VAR 0 3
50805: PPUSH
50806: CALL_OW 247
50810: PUSH
50811: LD_INT 2
50813: EQUAL
50814: IFFALSE 50827
// ComExitVehicle ( unit ) else
50816: LD_VAR 0 1
50820: PPUSH
50821: CALL_OW 121
50825: GO 50836
// ComExitBuilding ( unit ) ;
50827: LD_VAR 0 1
50831: PPUSH
50832: CALL_OW 122
// result := tmp ;
50836: LD_ADDR_VAR 0 2
50840: PUSH
50841: LD_VAR 0 3
50845: ST_TO_ADDR
// end ;
50846: LD_VAR 0 2
50850: RET
// export function ComExitAll ( units ) ; var i ; begin
50851: LD_INT 0
50853: PPUSH
50854: PPUSH
// if not units then
50855: LD_VAR 0 1
50859: NOT
50860: IFFALSE 50864
// exit ;
50862: GO 50890
// for i in units do
50864: LD_ADDR_VAR 0 3
50868: PUSH
50869: LD_VAR 0 1
50873: PUSH
50874: FOR_IN
50875: IFFALSE 50888
// ComExit ( i ) ;
50877: LD_VAR 0 3
50881: PPUSH
50882: CALL 50768 0 1
50886: GO 50874
50888: POP
50889: POP
// end ;
50890: LD_VAR 0 2
50894: RET
// export function ResetHc ; begin
50895: LD_INT 0
50897: PPUSH
// InitHc ;
50898: CALL_OW 19
// hc_importance := 0 ;
50902: LD_ADDR_OWVAR 32
50906: PUSH
50907: LD_INT 0
50909: ST_TO_ADDR
// end ;
50910: LD_VAR 0 1
50914: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50915: LD_INT 0
50917: PPUSH
50918: PPUSH
50919: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50920: LD_ADDR_VAR 0 6
50924: PUSH
50925: LD_VAR 0 1
50929: PUSH
50930: LD_VAR 0 3
50934: PLUS
50935: PUSH
50936: LD_INT 2
50938: DIV
50939: ST_TO_ADDR
// if _x < 0 then
50940: LD_VAR 0 6
50944: PUSH
50945: LD_INT 0
50947: LESS
50948: IFFALSE 50965
// _x := _x * - 1 ;
50950: LD_ADDR_VAR 0 6
50954: PUSH
50955: LD_VAR 0 6
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: MUL
50964: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50965: LD_ADDR_VAR 0 7
50969: PUSH
50970: LD_VAR 0 2
50974: PUSH
50975: LD_VAR 0 4
50979: PLUS
50980: PUSH
50981: LD_INT 2
50983: DIV
50984: ST_TO_ADDR
// if _y < 0 then
50985: LD_VAR 0 7
50989: PUSH
50990: LD_INT 0
50992: LESS
50993: IFFALSE 51010
// _y := _y * - 1 ;
50995: LD_ADDR_VAR 0 7
50999: PUSH
51000: LD_VAR 0 7
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: MUL
51009: ST_TO_ADDR
// result := [ _x , _y ] ;
51010: LD_ADDR_VAR 0 5
51014: PUSH
51015: LD_VAR 0 6
51019: PUSH
51020: LD_VAR 0 7
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: ST_TO_ADDR
// end ;
51029: LD_VAR 0 5
51033: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
51034: LD_INT 0
51036: PPUSH
51037: PPUSH
51038: PPUSH
51039: PPUSH
// task := GetTaskList ( unit ) ;
51040: LD_ADDR_VAR 0 7
51044: PUSH
51045: LD_VAR 0 1
51049: PPUSH
51050: CALL_OW 437
51054: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
51055: LD_VAR 0 7
51059: NOT
51060: IFFALSE 51079
51062: PUSH
51063: LD_VAR 0 1
51067: PPUSH
51068: LD_VAR 0 2
51072: PPUSH
51073: CALL_OW 308
51077: NOT
51078: AND
51079: IFFALSE 51083
// exit ;
51081: GO 51201
// if IsInArea ( unit , area ) then
51083: LD_VAR 0 1
51087: PPUSH
51088: LD_VAR 0 2
51092: PPUSH
51093: CALL_OW 308
51097: IFFALSE 51115
// begin ComMoveToArea ( unit , goAway ) ;
51099: LD_VAR 0 1
51103: PPUSH
51104: LD_VAR 0 3
51108: PPUSH
51109: CALL_OW 113
// exit ;
51113: GO 51201
// end ; if task [ 1 ] [ 1 ] <> M then
51115: LD_VAR 0 7
51119: PUSH
51120: LD_INT 1
51122: ARRAY
51123: PUSH
51124: LD_INT 1
51126: ARRAY
51127: PUSH
51128: LD_STRING M
51130: NONEQUAL
51131: IFFALSE 51135
// exit ;
51133: GO 51201
// x := task [ 1 ] [ 2 ] ;
51135: LD_ADDR_VAR 0 5
51139: PUSH
51140: LD_VAR 0 7
51144: PUSH
51145: LD_INT 1
51147: ARRAY
51148: PUSH
51149: LD_INT 2
51151: ARRAY
51152: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
51153: LD_ADDR_VAR 0 6
51157: PUSH
51158: LD_VAR 0 7
51162: PUSH
51163: LD_INT 1
51165: ARRAY
51166: PUSH
51167: LD_INT 3
51169: ARRAY
51170: ST_TO_ADDR
// if InArea ( x , y , area ) then
51171: LD_VAR 0 5
51175: PPUSH
51176: LD_VAR 0 6
51180: PPUSH
51181: LD_VAR 0 2
51185: PPUSH
51186: CALL_OW 309
51190: IFFALSE 51201
// ComStop ( unit ) ;
51192: LD_VAR 0 1
51196: PPUSH
51197: CALL_OW 141
// end ;
51201: LD_VAR 0 4
51205: RET
// export function Abs ( value ) ; begin
51206: LD_INT 0
51208: PPUSH
// result := value ;
51209: LD_ADDR_VAR 0 2
51213: PUSH
51214: LD_VAR 0 1
51218: ST_TO_ADDR
// if value < 0 then
51219: LD_VAR 0 1
51223: PUSH
51224: LD_INT 0
51226: LESS
51227: IFFALSE 51244
// result := value * - 1 ;
51229: LD_ADDR_VAR 0 2
51233: PUSH
51234: LD_VAR 0 1
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: MUL
51243: ST_TO_ADDR
// end ;
51244: LD_VAR 0 2
51248: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
51249: LD_INT 0
51251: PPUSH
51252: PPUSH
51253: PPUSH
51254: PPUSH
51255: PPUSH
51256: PPUSH
51257: PPUSH
51258: PPUSH
// if not unit or not building then
51259: LD_VAR 0 1
51263: NOT
51264: IFTRUE 51273
51266: PUSH
51267: LD_VAR 0 2
51271: NOT
51272: OR
51273: IFFALSE 51277
// exit ;
51275: GO 51505
// x := GetX ( building ) ;
51277: LD_ADDR_VAR 0 4
51281: PUSH
51282: LD_VAR 0 2
51286: PPUSH
51287: CALL_OW 250
51291: ST_TO_ADDR
// y := GetY ( building ) ;
51292: LD_ADDR_VAR 0 6
51296: PUSH
51297: LD_VAR 0 2
51301: PPUSH
51302: CALL_OW 251
51306: ST_TO_ADDR
// d := GetDir ( building ) ;
51307: LD_ADDR_VAR 0 8
51311: PUSH
51312: LD_VAR 0 2
51316: PPUSH
51317: CALL_OW 254
51321: ST_TO_ADDR
// r := 4 ;
51322: LD_ADDR_VAR 0 9
51326: PUSH
51327: LD_INT 4
51329: ST_TO_ADDR
// for i := 1 to 5 do
51330: LD_ADDR_VAR 0 10
51334: PUSH
51335: DOUBLE
51336: LD_INT 1
51338: DEC
51339: ST_TO_ADDR
51340: LD_INT 5
51342: PUSH
51343: FOR_TO
51344: IFFALSE 51503
// begin _x := ShiftX ( x , d , r + i ) ;
51346: LD_ADDR_VAR 0 5
51350: PUSH
51351: LD_VAR 0 4
51355: PPUSH
51356: LD_VAR 0 8
51360: PPUSH
51361: LD_VAR 0 9
51365: PUSH
51366: LD_VAR 0 10
51370: PLUS
51371: PPUSH
51372: CALL_OW 272
51376: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
51377: LD_ADDR_VAR 0 7
51381: PUSH
51382: LD_VAR 0 6
51386: PPUSH
51387: LD_VAR 0 8
51391: PPUSH
51392: LD_VAR 0 9
51396: PUSH
51397: LD_VAR 0 10
51401: PLUS
51402: PPUSH
51403: CALL_OW 273
51407: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
51408: LD_VAR 0 5
51412: PPUSH
51413: LD_VAR 0 7
51417: PPUSH
51418: CALL_OW 488
51422: IFFALSE 51457
51424: PUSH
51425: LD_VAR 0 5
51429: PPUSH
51430: LD_VAR 0 7
51434: PPUSH
51435: CALL_OW 428
51439: PPUSH
51440: CALL_OW 247
51444: PUSH
51445: LD_INT 3
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: IN
51455: NOT
51456: AND
51457: IFFALSE 51501
// begin ComMoveXY ( unit , _x , _y ) ;
51459: LD_VAR 0 1
51463: PPUSH
51464: LD_VAR 0 5
51468: PPUSH
51469: LD_VAR 0 7
51473: PPUSH
51474: CALL_OW 111
// result := [ _x , _y ] ;
51478: LD_ADDR_VAR 0 3
51482: PUSH
51483: LD_VAR 0 5
51487: PUSH
51488: LD_VAR 0 7
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: ST_TO_ADDR
// exit ;
51497: POP
51498: POP
51499: GO 51505
// end ; end ;
51501: GO 51343
51503: POP
51504: POP
// end ;
51505: LD_VAR 0 3
51509: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
51510: LD_INT 0
51512: PPUSH
51513: PPUSH
51514: PPUSH
// result := 0 ;
51515: LD_ADDR_VAR 0 3
51519: PUSH
51520: LD_INT 0
51522: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
51523: LD_VAR 0 1
51527: PUSH
51528: LD_INT 0
51530: LESS
51531: IFTRUE 51543
51533: PUSH
51534: LD_VAR 0 1
51538: PUSH
51539: LD_INT 8
51541: GREATER
51542: OR
51543: IFTRUE 51555
51545: PUSH
51546: LD_VAR 0 2
51550: PUSH
51551: LD_INT 0
51553: LESS
51554: OR
51555: IFTRUE 51567
51557: PUSH
51558: LD_VAR 0 2
51562: PUSH
51563: LD_INT 8
51565: GREATER
51566: OR
51567: IFFALSE 51571
// exit ;
51569: GO 51646
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
51571: LD_ADDR_VAR 0 4
51575: PUSH
51576: LD_INT 22
51578: PUSH
51579: LD_VAR 0 2
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PPUSH
51588: CALL_OW 69
51592: PUSH
51593: FOR_IN
51594: IFFALSE 51644
// begin un := UnitShoot ( i ) ;
51596: LD_ADDR_VAR 0 5
51600: PUSH
51601: LD_VAR 0 4
51605: PPUSH
51606: CALL_OW 504
51610: ST_TO_ADDR
// if GetSide ( un ) = side1 then
51611: LD_VAR 0 5
51615: PPUSH
51616: CALL_OW 255
51620: PUSH
51621: LD_VAR 0 1
51625: EQUAL
51626: IFFALSE 51642
// begin result := un ;
51628: LD_ADDR_VAR 0 3
51632: PUSH
51633: LD_VAR 0 5
51637: ST_TO_ADDR
// exit ;
51638: POP
51639: POP
51640: GO 51646
// end ; end ;
51642: GO 51593
51644: POP
51645: POP
// end ;
51646: LD_VAR 0 3
51650: RET
// export function GetCargoBay ( units ) ; begin
51651: LD_INT 0
51653: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
51654: LD_ADDR_VAR 0 2
51658: PUSH
51659: LD_VAR 0 1
51663: PPUSH
51664: LD_INT 2
51666: PUSH
51667: LD_INT 34
51669: PUSH
51670: LD_INT 12
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 34
51679: PUSH
51680: LD_INT 51
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 34
51689: PUSH
51690: LD_INT 32
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 34
51699: PUSH
51700: LD_INT 89
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: PPUSH
51714: CALL_OW 72
51718: ST_TO_ADDR
// end ;
51719: LD_VAR 0 2
51723: RET
// export function Negate ( value ) ; begin
51724: LD_INT 0
51726: PPUSH
// result := not value ;
51727: LD_ADDR_VAR 0 2
51731: PUSH
51732: LD_VAR 0 1
51736: NOT
51737: ST_TO_ADDR
// end ;
51738: LD_VAR 0 2
51742: RET
// export function Inc ( value ) ; begin
51743: LD_INT 0
51745: PPUSH
// result := value + 1 ;
51746: LD_ADDR_VAR 0 2
51750: PUSH
51751: LD_VAR 0 1
51755: PUSH
51756: LD_INT 1
51758: PLUS
51759: ST_TO_ADDR
// end ;
51760: LD_VAR 0 2
51764: RET
// export function Dec ( value ) ; begin
51765: LD_INT 0
51767: PPUSH
// result := value - 1 ;
51768: LD_ADDR_VAR 0 2
51772: PUSH
51773: LD_VAR 0 1
51777: PUSH
51778: LD_INT 1
51780: MINUS
51781: ST_TO_ADDR
// end ;
51782: LD_VAR 0 2
51786: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
51787: LD_INT 0
51789: PPUSH
51790: PPUSH
51791: PPUSH
51792: PPUSH
51793: PPUSH
51794: PPUSH
51795: PPUSH
51796: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
51797: LD_VAR 0 1
51801: PPUSH
51802: LD_VAR 0 2
51806: PPUSH
51807: CALL_OW 488
51811: NOT
51812: IFTRUE 51831
51814: PUSH
51815: LD_VAR 0 3
51819: PPUSH
51820: LD_VAR 0 4
51824: PPUSH
51825: CALL_OW 488
51829: NOT
51830: OR
51831: IFFALSE 51844
// begin result := - 1 ;
51833: LD_ADDR_VAR 0 5
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: ST_TO_ADDR
// exit ;
51842: GO 52079
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
51844: LD_ADDR_VAR 0 12
51848: PUSH
51849: LD_VAR 0 1
51853: PPUSH
51854: LD_VAR 0 2
51858: PPUSH
51859: LD_VAR 0 3
51863: PPUSH
51864: LD_VAR 0 4
51868: PPUSH
51869: CALL 50915 0 4
51873: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
51874: LD_ADDR_VAR 0 11
51878: PUSH
51879: LD_VAR 0 1
51883: PPUSH
51884: LD_VAR 0 2
51888: PPUSH
51889: LD_VAR 0 12
51893: PUSH
51894: LD_INT 1
51896: ARRAY
51897: PPUSH
51898: LD_VAR 0 12
51902: PUSH
51903: LD_INT 2
51905: ARRAY
51906: PPUSH
51907: CALL_OW 298
51911: ST_TO_ADDR
// distance := 9999 ;
51912: LD_ADDR_VAR 0 10
51916: PUSH
51917: LD_INT 9999
51919: ST_TO_ADDR
// for i := 0 to 5 do
51920: LD_ADDR_VAR 0 6
51924: PUSH
51925: DOUBLE
51926: LD_INT 0
51928: DEC
51929: ST_TO_ADDR
51930: LD_INT 5
51932: PUSH
51933: FOR_TO
51934: IFFALSE 52077
// begin _x := ShiftX ( x1 , i , centerDist ) ;
51936: LD_ADDR_VAR 0 7
51940: PUSH
51941: LD_VAR 0 1
51945: PPUSH
51946: LD_VAR 0 6
51950: PPUSH
51951: LD_VAR 0 11
51955: PPUSH
51956: CALL_OW 272
51960: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51961: LD_ADDR_VAR 0 8
51965: PUSH
51966: LD_VAR 0 2
51970: PPUSH
51971: LD_VAR 0 6
51975: PPUSH
51976: LD_VAR 0 11
51980: PPUSH
51981: CALL_OW 273
51985: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51986: LD_VAR 0 7
51990: PPUSH
51991: LD_VAR 0 8
51995: PPUSH
51996: CALL_OW 488
52000: NOT
52001: IFFALSE 52005
// continue ;
52003: GO 51933
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
52005: LD_ADDR_VAR 0 9
52009: PUSH
52010: LD_VAR 0 12
52014: PUSH
52015: LD_INT 1
52017: ARRAY
52018: PPUSH
52019: LD_VAR 0 12
52023: PUSH
52024: LD_INT 2
52026: ARRAY
52027: PPUSH
52028: LD_VAR 0 7
52032: PPUSH
52033: LD_VAR 0 8
52037: PPUSH
52038: CALL_OW 298
52042: ST_TO_ADDR
// if tmp < distance then
52043: LD_VAR 0 9
52047: PUSH
52048: LD_VAR 0 10
52052: LESS
52053: IFFALSE 52075
// begin result := i ;
52055: LD_ADDR_VAR 0 5
52059: PUSH
52060: LD_VAR 0 6
52064: ST_TO_ADDR
// distance := tmp ;
52065: LD_ADDR_VAR 0 10
52069: PUSH
52070: LD_VAR 0 9
52074: ST_TO_ADDR
// end ; end ;
52075: GO 51933
52077: POP
52078: POP
// end ;
52079: LD_VAR 0 5
52083: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
52084: LD_INT 0
52086: PPUSH
52087: PPUSH
// if not driver or not IsInUnit ( driver ) then
52088: LD_VAR 0 1
52092: NOT
52093: IFTRUE 52107
52095: PUSH
52096: LD_VAR 0 1
52100: PPUSH
52101: CALL_OW 310
52105: NOT
52106: OR
52107: IFFALSE 52111
// exit ;
52109: GO 52201
// vehicle := IsInUnit ( driver ) ;
52111: LD_ADDR_VAR 0 3
52115: PUSH
52116: LD_VAR 0 1
52120: PPUSH
52121: CALL_OW 310
52125: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
52126: LD_VAR 0 1
52130: PPUSH
52131: LD_STRING \
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: PUSH
52161: LD_STRING E
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_VAR 0 3
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PPUSH
52197: CALL_OW 446
// end ;
52201: LD_VAR 0 2
52205: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
52206: LD_INT 0
52208: PPUSH
52209: PPUSH
// if not driver or not IsInUnit ( driver ) then
52210: LD_VAR 0 1
52214: NOT
52215: IFTRUE 52229
52217: PUSH
52218: LD_VAR 0 1
52222: PPUSH
52223: CALL_OW 310
52227: NOT
52228: OR
52229: IFFALSE 52233
// exit ;
52231: GO 52323
// vehicle := IsInUnit ( driver ) ;
52233: LD_ADDR_VAR 0 3
52237: PUSH
52238: LD_VAR 0 1
52242: PPUSH
52243: CALL_OW 310
52247: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
52248: LD_VAR 0 1
52252: PPUSH
52253: LD_STRING \
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: PUSH
52283: LD_STRING E
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_VAR 0 3
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PPUSH
52319: CALL_OW 447
// end ;
52323: LD_VAR 0 2
52327: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
52328: LD_INT 0
52330: PPUSH
52331: PPUSH
52332: PPUSH
// tmp := [ ] ;
52333: LD_ADDR_VAR 0 5
52337: PUSH
52338: EMPTY
52339: ST_TO_ADDR
// for i in units do
52340: LD_ADDR_VAR 0 4
52344: PUSH
52345: LD_VAR 0 1
52349: PUSH
52350: FOR_IN
52351: IFFALSE 52389
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
52353: LD_ADDR_VAR 0 5
52357: PUSH
52358: LD_VAR 0 5
52362: PPUSH
52363: LD_VAR 0 5
52367: PUSH
52368: LD_INT 1
52370: PLUS
52371: PPUSH
52372: LD_VAR 0 4
52376: PPUSH
52377: CALL_OW 256
52381: PPUSH
52382: CALL_OW 2
52386: ST_TO_ADDR
52387: GO 52350
52389: POP
52390: POP
// if not tmp then
52391: LD_VAR 0 5
52395: NOT
52396: IFFALSE 52400
// exit ;
52398: GO 52448
// if asc then
52400: LD_VAR 0 2
52404: IFFALSE 52428
// result := SortListByListAsc ( units , tmp ) else
52406: LD_ADDR_VAR 0 3
52410: PUSH
52411: LD_VAR 0 1
52415: PPUSH
52416: LD_VAR 0 5
52420: PPUSH
52421: CALL_OW 76
52425: ST_TO_ADDR
52426: GO 52448
// result := SortListByListDesc ( units , tmp ) ;
52428: LD_ADDR_VAR 0 3
52432: PUSH
52433: LD_VAR 0 1
52437: PPUSH
52438: LD_VAR 0 5
52442: PPUSH
52443: CALL_OW 77
52447: ST_TO_ADDR
// end ;
52448: LD_VAR 0 3
52452: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
52453: LD_INT 0
52455: PPUSH
52456: PPUSH
// task := GetTaskList ( mech ) ;
52457: LD_ADDR_VAR 0 4
52461: PUSH
52462: LD_VAR 0 1
52466: PPUSH
52467: CALL_OW 437
52471: ST_TO_ADDR
// if not task then
52472: LD_VAR 0 4
52476: NOT
52477: IFFALSE 52481
// exit ;
52479: GO 52525
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
52481: LD_ADDR_VAR 0 3
52485: PUSH
52486: LD_VAR 0 4
52490: PUSH
52491: LD_INT 1
52493: ARRAY
52494: PUSH
52495: LD_INT 1
52497: ARRAY
52498: PUSH
52499: LD_STRING r
52501: EQUAL
52502: IFFALSE 52524
52504: PUSH
52505: LD_VAR 0 4
52509: PUSH
52510: LD_INT 1
52512: ARRAY
52513: PUSH
52514: LD_INT 4
52516: ARRAY
52517: PUSH
52518: LD_VAR 0 2
52522: EQUAL
52523: AND
52524: ST_TO_ADDR
// end ;
52525: LD_VAR 0 3
52529: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
52530: LD_INT 0
52532: PPUSH
// SetDir ( unit , d ) ;
52533: LD_VAR 0 1
52537: PPUSH
52538: LD_VAR 0 4
52542: PPUSH
52543: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
52547: LD_ADDR_VAR 0 6
52551: PUSH
52552: LD_VAR 0 1
52556: PPUSH
52557: LD_VAR 0 2
52561: PPUSH
52562: LD_VAR 0 3
52566: PPUSH
52567: LD_VAR 0 5
52571: PPUSH
52572: CALL_OW 48
52576: ST_TO_ADDR
// end ;
52577: LD_VAR 0 6
52581: RET
// export function ToNaturalNumber ( number ) ; begin
52582: LD_INT 0
52584: PPUSH
// result := number div 1 ;
52585: LD_ADDR_VAR 0 2
52589: PUSH
52590: LD_VAR 0 1
52594: PUSH
52595: LD_INT 1
52597: DIV
52598: ST_TO_ADDR
// if number < 0 then
52599: LD_VAR 0 1
52603: PUSH
52604: LD_INT 0
52606: LESS
52607: IFFALSE 52617
// result := 0 ;
52609: LD_ADDR_VAR 0 2
52613: PUSH
52614: LD_INT 0
52616: ST_TO_ADDR
// end ;
52617: LD_VAR 0 2
52621: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
52622: LD_INT 0
52624: PPUSH
52625: PPUSH
52626: PPUSH
// if not buildings then
52627: LD_VAR 0 1
52631: NOT
52632: IFFALSE 52636
// exit ;
52634: GO 52751
// tmp := [ ] ;
52636: LD_ADDR_VAR 0 5
52640: PUSH
52641: EMPTY
52642: ST_TO_ADDR
// for b in buildings do
52643: LD_ADDR_VAR 0 4
52647: PUSH
52648: LD_VAR 0 1
52652: PUSH
52653: FOR_IN
52654: IFFALSE 52692
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
52656: LD_ADDR_VAR 0 5
52660: PUSH
52661: LD_VAR 0 5
52665: PPUSH
52666: LD_VAR 0 5
52670: PUSH
52671: LD_INT 1
52673: PLUS
52674: PPUSH
52675: LD_VAR 0 4
52679: PPUSH
52680: CALL_OW 266
52684: PPUSH
52685: CALL_OW 1
52689: ST_TO_ADDR
52690: GO 52653
52692: POP
52693: POP
// if not tmp then
52694: LD_VAR 0 5
52698: NOT
52699: IFFALSE 52703
// exit ;
52701: GO 52751
// if asc then
52703: LD_VAR 0 2
52707: IFFALSE 52731
// result := SortListByListAsc ( buildings , tmp ) else
52709: LD_ADDR_VAR 0 3
52713: PUSH
52714: LD_VAR 0 1
52718: PPUSH
52719: LD_VAR 0 5
52723: PPUSH
52724: CALL_OW 76
52728: ST_TO_ADDR
52729: GO 52751
// result := SortListByListDesc ( buildings , tmp ) ;
52731: LD_ADDR_VAR 0 3
52735: PUSH
52736: LD_VAR 0 1
52740: PPUSH
52741: LD_VAR 0 5
52745: PPUSH
52746: CALL_OW 77
52750: ST_TO_ADDR
// end ;
52751: LD_VAR 0 3
52755: RET
// export function SortByClass ( units , class ) ; var un ; begin
52756: LD_INT 0
52758: PPUSH
52759: PPUSH
// if not units or not class then
52760: LD_VAR 0 1
52764: NOT
52765: IFTRUE 52774
52767: PUSH
52768: LD_VAR 0 2
52772: NOT
52773: OR
52774: IFFALSE 52778
// exit ;
52776: GO 52873
// result := [ ] ;
52778: LD_ADDR_VAR 0 3
52782: PUSH
52783: EMPTY
52784: ST_TO_ADDR
// for un in units do
52785: LD_ADDR_VAR 0 4
52789: PUSH
52790: LD_VAR 0 1
52794: PUSH
52795: FOR_IN
52796: IFFALSE 52871
// if GetClass ( un ) = class then
52798: LD_VAR 0 4
52802: PPUSH
52803: CALL_OW 257
52807: PUSH
52808: LD_VAR 0 2
52812: EQUAL
52813: IFFALSE 52840
// result := Insert ( result , 1 , un ) else
52815: LD_ADDR_VAR 0 3
52819: PUSH
52820: LD_VAR 0 3
52824: PPUSH
52825: LD_INT 1
52827: PPUSH
52828: LD_VAR 0 4
52832: PPUSH
52833: CALL_OW 2
52837: ST_TO_ADDR
52838: GO 52869
// result := Replace ( result , result + 1 , un ) ;
52840: LD_ADDR_VAR 0 3
52844: PUSH
52845: LD_VAR 0 3
52849: PPUSH
52850: LD_VAR 0 3
52854: PUSH
52855: LD_INT 1
52857: PLUS
52858: PPUSH
52859: LD_VAR 0 4
52863: PPUSH
52864: CALL_OW 1
52868: ST_TO_ADDR
52869: GO 52795
52871: POP
52872: POP
// end ;
52873: LD_VAR 0 3
52877: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
52878: LD_INT 0
52880: PPUSH
52881: PPUSH
52882: PPUSH
52883: PPUSH
52884: PPUSH
52885: PPUSH
52886: PPUSH
// result := [ ] ;
52887: LD_ADDR_VAR 0 4
52891: PUSH
52892: EMPTY
52893: ST_TO_ADDR
// if x - r < 0 then
52894: LD_VAR 0 1
52898: PUSH
52899: LD_VAR 0 3
52903: MINUS
52904: PUSH
52905: LD_INT 0
52907: LESS
52908: IFFALSE 52920
// min_x := 0 else
52910: LD_ADDR_VAR 0 8
52914: PUSH
52915: LD_INT 0
52917: ST_TO_ADDR
52918: GO 52936
// min_x := x - r ;
52920: LD_ADDR_VAR 0 8
52924: PUSH
52925: LD_VAR 0 1
52929: PUSH
52930: LD_VAR 0 3
52934: MINUS
52935: ST_TO_ADDR
// if y - r < 0 then
52936: LD_VAR 0 2
52940: PUSH
52941: LD_VAR 0 3
52945: MINUS
52946: PUSH
52947: LD_INT 0
52949: LESS
52950: IFFALSE 52962
// min_y := 0 else
52952: LD_ADDR_VAR 0 7
52956: PUSH
52957: LD_INT 0
52959: ST_TO_ADDR
52960: GO 52978
// min_y := y - r ;
52962: LD_ADDR_VAR 0 7
52966: PUSH
52967: LD_VAR 0 2
52971: PUSH
52972: LD_VAR 0 3
52976: MINUS
52977: ST_TO_ADDR
// max_x := x + r ;
52978: LD_ADDR_VAR 0 9
52982: PUSH
52983: LD_VAR 0 1
52987: PUSH
52988: LD_VAR 0 3
52992: PLUS
52993: ST_TO_ADDR
// max_y := y + r ;
52994: LD_ADDR_VAR 0 10
52998: PUSH
52999: LD_VAR 0 2
53003: PUSH
53004: LD_VAR 0 3
53008: PLUS
53009: ST_TO_ADDR
// for _x = min_x to max_x do
53010: LD_ADDR_VAR 0 5
53014: PUSH
53015: DOUBLE
53016: LD_VAR 0 8
53020: DEC
53021: ST_TO_ADDR
53022: LD_VAR 0 9
53026: PUSH
53027: FOR_TO
53028: IFFALSE 53129
// for _y = min_y to max_y do
53030: LD_ADDR_VAR 0 6
53034: PUSH
53035: DOUBLE
53036: LD_VAR 0 7
53040: DEC
53041: ST_TO_ADDR
53042: LD_VAR 0 10
53046: PUSH
53047: FOR_TO
53048: IFFALSE 53125
// begin if not ValidHex ( _x , _y ) then
53050: LD_VAR 0 5
53054: PPUSH
53055: LD_VAR 0 6
53059: PPUSH
53060: CALL_OW 488
53064: NOT
53065: IFFALSE 53069
// continue ;
53067: GO 53047
// if GetResourceTypeXY ( _x , _y ) then
53069: LD_VAR 0 5
53073: PPUSH
53074: LD_VAR 0 6
53078: PPUSH
53079: CALL_OW 283
53083: IFFALSE 53123
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
53085: LD_ADDR_VAR 0 4
53089: PUSH
53090: LD_VAR 0 4
53094: PPUSH
53095: LD_VAR 0 4
53099: PUSH
53100: LD_INT 1
53102: PLUS
53103: PPUSH
53104: LD_VAR 0 5
53108: PUSH
53109: LD_VAR 0 6
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PPUSH
53118: CALL_OW 1
53122: ST_TO_ADDR
// end ;
53123: GO 53047
53125: POP
53126: POP
53127: GO 53027
53129: POP
53130: POP
// end ;
53131: LD_VAR 0 4
53135: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
53136: LD_INT 0
53138: PPUSH
53139: PPUSH
53140: PPUSH
53141: PPUSH
53142: PPUSH
53143: PPUSH
53144: PPUSH
53145: PPUSH
// if not units then
53146: LD_VAR 0 1
53150: NOT
53151: IFFALSE 53155
// exit ;
53153: GO 53687
// result := UnitFilter ( units , [ f_ok ] ) ;
53155: LD_ADDR_VAR 0 3
53159: PUSH
53160: LD_VAR 0 1
53164: PPUSH
53165: LD_INT 50
53167: PUSH
53168: EMPTY
53169: LIST
53170: PPUSH
53171: CALL_OW 72
53175: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
53176: LD_ADDR_VAR 0 8
53180: PUSH
53181: LD_VAR 0 1
53185: PUSH
53186: LD_INT 1
53188: ARRAY
53189: PPUSH
53190: CALL_OW 255
53194: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
53195: LD_ADDR_VAR 0 10
53199: PUSH
53200: LD_INT 29
53202: PUSH
53203: LD_INT 91
53205: PUSH
53206: LD_INT 49
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: ST_TO_ADDR
// if not result then
53214: LD_VAR 0 3
53218: NOT
53219: IFFALSE 53223
// exit ;
53221: GO 53687
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
53223: LD_ADDR_VAR 0 5
53227: PUSH
53228: LD_INT 81
53230: PUSH
53231: LD_VAR 0 8
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PPUSH
53240: CALL_OW 69
53244: ST_TO_ADDR
// for i in result do
53245: LD_ADDR_VAR 0 4
53249: PUSH
53250: LD_VAR 0 3
53254: PUSH
53255: FOR_IN
53256: IFFALSE 53685
// begin tag := GetTag ( i ) + 1 ;
53258: LD_ADDR_VAR 0 9
53262: PUSH
53263: LD_VAR 0 4
53267: PPUSH
53268: CALL_OW 110
53272: PUSH
53273: LD_INT 1
53275: PLUS
53276: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
53277: LD_ADDR_VAR 0 7
53281: PUSH
53282: LD_VAR 0 4
53286: PPUSH
53287: CALL_OW 250
53291: PPUSH
53292: LD_VAR 0 4
53296: PPUSH
53297: CALL_OW 251
53301: PPUSH
53302: LD_INT 4
53304: PPUSH
53305: CALL 52878 0 3
53309: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
53310: LD_VAR 0 4
53314: PPUSH
53315: CALL_OW 247
53319: PUSH
53320: LD_INT 2
53322: EQUAL
53323: IFFALSE 53335
53325: PUSH
53326: LD_VAR 0 7
53330: PUSH
53331: LD_INT 2
53333: GREATER
53334: AND
53335: IFFALSE 53355
53337: PUSH
53338: LD_VAR 0 4
53342: PPUSH
53343: CALL_OW 264
53347: PUSH
53348: LD_VAR 0 10
53352: IN
53353: NOT
53354: AND
53355: IFFALSE 53394
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
53357: LD_VAR 0 4
53361: PPUSH
53362: LD_VAR 0 7
53366: PUSH
53367: LD_INT 1
53369: ARRAY
53370: PUSH
53371: LD_INT 1
53373: ARRAY
53374: PPUSH
53375: LD_VAR 0 7
53379: PUSH
53380: LD_INT 1
53382: ARRAY
53383: PUSH
53384: LD_INT 2
53386: ARRAY
53387: PPUSH
53388: CALL_OW 116
53392: GO 53683
// if path > tag then
53394: LD_VAR 0 2
53398: PUSH
53399: LD_VAR 0 9
53403: GREATER
53404: IFFALSE 53612
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
53406: LD_ADDR_VAR 0 6
53410: PUSH
53411: LD_VAR 0 5
53415: PPUSH
53416: LD_INT 91
53418: PUSH
53419: LD_VAR 0 4
53423: PUSH
53424: LD_INT 8
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: LIST
53431: PPUSH
53432: CALL_OW 72
53436: ST_TO_ADDR
// if nearEnemy then
53437: LD_VAR 0 6
53441: IFFALSE 53510
// begin if GetWeapon ( i ) = ru_time_lapser then
53443: LD_VAR 0 4
53447: PPUSH
53448: CALL_OW 264
53452: PUSH
53453: LD_INT 49
53455: EQUAL
53456: IFFALSE 53484
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
53458: LD_VAR 0 4
53462: PPUSH
53463: LD_VAR 0 6
53467: PPUSH
53468: LD_VAR 0 4
53472: PPUSH
53473: CALL_OW 74
53477: PPUSH
53478: CALL_OW 112
53482: GO 53508
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
53484: LD_VAR 0 4
53488: PPUSH
53489: LD_VAR 0 6
53493: PPUSH
53494: LD_VAR 0 4
53498: PPUSH
53499: CALL_OW 74
53503: PPUSH
53504: CALL 54768 0 2
// end else
53508: GO 53610
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
53510: LD_VAR 0 4
53514: PPUSH
53515: LD_VAR 0 2
53519: PUSH
53520: LD_VAR 0 9
53524: ARRAY
53525: PUSH
53526: LD_INT 1
53528: ARRAY
53529: PPUSH
53530: LD_VAR 0 2
53534: PUSH
53535: LD_VAR 0 9
53539: ARRAY
53540: PUSH
53541: LD_INT 2
53543: ARRAY
53544: PPUSH
53545: CALL_OW 297
53549: PUSH
53550: LD_INT 6
53552: GREATER
53553: IFFALSE 53596
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
53555: LD_VAR 0 4
53559: PPUSH
53560: LD_VAR 0 2
53564: PUSH
53565: LD_VAR 0 9
53569: ARRAY
53570: PUSH
53571: LD_INT 1
53573: ARRAY
53574: PPUSH
53575: LD_VAR 0 2
53579: PUSH
53580: LD_VAR 0 9
53584: ARRAY
53585: PUSH
53586: LD_INT 2
53588: ARRAY
53589: PPUSH
53590: CALL_OW 114
53594: GO 53610
// SetTag ( i , tag ) ;
53596: LD_VAR 0 4
53600: PPUSH
53601: LD_VAR 0 9
53605: PPUSH
53606: CALL_OW 109
// end else
53610: GO 53683
// if enemy then
53612: LD_VAR 0 5
53616: IFFALSE 53683
// begin if GetWeapon ( i ) = ru_time_lapser then
53618: LD_VAR 0 4
53622: PPUSH
53623: CALL_OW 264
53627: PUSH
53628: LD_INT 49
53630: EQUAL
53631: IFFALSE 53659
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
53633: LD_VAR 0 4
53637: PPUSH
53638: LD_VAR 0 5
53642: PPUSH
53643: LD_VAR 0 4
53647: PPUSH
53648: CALL_OW 74
53652: PPUSH
53653: CALL_OW 112
53657: GO 53683
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
53659: LD_VAR 0 4
53663: PPUSH
53664: LD_VAR 0 5
53668: PPUSH
53669: LD_VAR 0 4
53673: PPUSH
53674: CALL_OW 74
53678: PPUSH
53679: CALL 54768 0 2
// end ; end ;
53683: GO 53255
53685: POP
53686: POP
// end ;
53687: LD_VAR 0 3
53691: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
53692: LD_INT 0
53694: PPUSH
53695: PPUSH
53696: PPUSH
// if not unit or IsInUnit ( unit ) then
53697: LD_VAR 0 1
53701: NOT
53702: IFTRUE 53715
53704: PUSH
53705: LD_VAR 0 1
53709: PPUSH
53710: CALL_OW 310
53714: OR
53715: IFFALSE 53719
// exit ;
53717: GO 53810
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
53719: LD_ADDR_VAR 0 4
53723: PUSH
53724: LD_VAR 0 1
53728: PPUSH
53729: CALL_OW 250
53733: PPUSH
53734: LD_VAR 0 2
53738: PPUSH
53739: LD_INT 1
53741: PPUSH
53742: CALL_OW 272
53746: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
53747: LD_ADDR_VAR 0 5
53751: PUSH
53752: LD_VAR 0 1
53756: PPUSH
53757: CALL_OW 251
53761: PPUSH
53762: LD_VAR 0 2
53766: PPUSH
53767: LD_INT 1
53769: PPUSH
53770: CALL_OW 273
53774: ST_TO_ADDR
// if ValidHex ( x , y ) then
53775: LD_VAR 0 4
53779: PPUSH
53780: LD_VAR 0 5
53784: PPUSH
53785: CALL_OW 488
53789: IFFALSE 53810
// ComTurnXY ( unit , x , y ) ;
53791: LD_VAR 0 1
53795: PPUSH
53796: LD_VAR 0 4
53800: PPUSH
53801: LD_VAR 0 5
53805: PPUSH
53806: CALL_OW 118
// end ;
53810: LD_VAR 0 3
53814: RET
// export function SeeUnits ( side , units ) ; var i ; begin
53815: LD_INT 0
53817: PPUSH
53818: PPUSH
// result := false ;
53819: LD_ADDR_VAR 0 3
53823: PUSH
53824: LD_INT 0
53826: ST_TO_ADDR
// if not units then
53827: LD_VAR 0 2
53831: NOT
53832: IFFALSE 53836
// exit ;
53834: GO 53881
// for i in units do
53836: LD_ADDR_VAR 0 4
53840: PUSH
53841: LD_VAR 0 2
53845: PUSH
53846: FOR_IN
53847: IFFALSE 53879
// if See ( side , i ) then
53849: LD_VAR 0 1
53853: PPUSH
53854: LD_VAR 0 4
53858: PPUSH
53859: CALL_OW 292
53863: IFFALSE 53877
// begin result := true ;
53865: LD_ADDR_VAR 0 3
53869: PUSH
53870: LD_INT 1
53872: ST_TO_ADDR
// exit ;
53873: POP
53874: POP
53875: GO 53881
// end ;
53877: GO 53846
53879: POP
53880: POP
// end ;
53881: LD_VAR 0 3
53885: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
53886: LD_INT 0
53888: PPUSH
53889: PPUSH
53890: PPUSH
53891: PPUSH
// if not unit or not points then
53892: LD_VAR 0 1
53896: NOT
53897: IFTRUE 53906
53899: PUSH
53900: LD_VAR 0 2
53904: NOT
53905: OR
53906: IFFALSE 53910
// exit ;
53908: GO 54000
// dist := 99999 ;
53910: LD_ADDR_VAR 0 5
53914: PUSH
53915: LD_INT 99999
53917: ST_TO_ADDR
// for i in points do
53918: LD_ADDR_VAR 0 4
53922: PUSH
53923: LD_VAR 0 2
53927: PUSH
53928: FOR_IN
53929: IFFALSE 53998
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
53931: LD_ADDR_VAR 0 6
53935: PUSH
53936: LD_VAR 0 1
53940: PPUSH
53941: LD_VAR 0 4
53945: PUSH
53946: LD_INT 1
53948: ARRAY
53949: PPUSH
53950: LD_VAR 0 4
53954: PUSH
53955: LD_INT 2
53957: ARRAY
53958: PPUSH
53959: CALL_OW 297
53963: ST_TO_ADDR
// if tmpDist < dist then
53964: LD_VAR 0 6
53968: PUSH
53969: LD_VAR 0 5
53973: LESS
53974: IFFALSE 53996
// begin result := i ;
53976: LD_ADDR_VAR 0 3
53980: PUSH
53981: LD_VAR 0 4
53985: ST_TO_ADDR
// dist := tmpDist ;
53986: LD_ADDR_VAR 0 5
53990: PUSH
53991: LD_VAR 0 6
53995: ST_TO_ADDR
// end ; end ;
53996: GO 53928
53998: POP
53999: POP
// end ;
54000: LD_VAR 0 3
54004: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
54005: LD_INT 0
54007: PPUSH
// uc_side := side ;
54008: LD_ADDR_OWVAR 20
54012: PUSH
54013: LD_VAR 0 1
54017: ST_TO_ADDR
// uc_nation := 3 ;
54018: LD_ADDR_OWVAR 21
54022: PUSH
54023: LD_INT 3
54025: ST_TO_ADDR
// vc_chassis := 25 ;
54026: LD_ADDR_OWVAR 37
54030: PUSH
54031: LD_INT 25
54033: ST_TO_ADDR
// vc_engine := engine_siberite ;
54034: LD_ADDR_OWVAR 39
54038: PUSH
54039: LD_INT 3
54041: ST_TO_ADDR
// vc_control := control_computer ;
54042: LD_ADDR_OWVAR 38
54046: PUSH
54047: LD_INT 3
54049: ST_TO_ADDR
// vc_weapon := 59 ;
54050: LD_ADDR_OWVAR 40
54054: PUSH
54055: LD_INT 59
54057: ST_TO_ADDR
// result := CreateVehicle ;
54058: LD_ADDR_VAR 0 5
54062: PUSH
54063: CALL_OW 45
54067: ST_TO_ADDR
// SetDir ( result , d ) ;
54068: LD_VAR 0 5
54072: PPUSH
54073: LD_VAR 0 4
54077: PPUSH
54078: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
54082: LD_VAR 0 5
54086: PPUSH
54087: LD_VAR 0 2
54091: PPUSH
54092: LD_VAR 0 3
54096: PPUSH
54097: LD_INT 0
54099: PPUSH
54100: CALL_OW 48
// end ;
54104: LD_VAR 0 5
54108: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
54109: LD_INT 0
54111: PPUSH
54112: PPUSH
54113: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
54114: LD_ADDR_VAR 0 2
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
54137: LD_VAR 0 1
54141: NOT
54142: IFTRUE 54175
54144: PUSH
54145: LD_VAR 0 1
54149: PPUSH
54150: CALL_OW 264
54154: PUSH
54155: LD_INT 12
54157: PUSH
54158: LD_INT 51
54160: PUSH
54161: LD_INT 32
54163: PUSH
54164: LD_INT 89
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: IN
54173: NOT
54174: OR
54175: IFFALSE 54179
// exit ;
54177: GO 54277
// for i := 1 to 3 do
54179: LD_ADDR_VAR 0 3
54183: PUSH
54184: DOUBLE
54185: LD_INT 1
54187: DEC
54188: ST_TO_ADDR
54189: LD_INT 3
54191: PUSH
54192: FOR_TO
54193: IFFALSE 54275
// begin tmp := GetCargo ( cargo , i ) ;
54195: LD_ADDR_VAR 0 4
54199: PUSH
54200: LD_VAR 0 1
54204: PPUSH
54205: LD_VAR 0 3
54209: PPUSH
54210: CALL_OW 289
54214: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
54215: LD_ADDR_VAR 0 2
54219: PUSH
54220: LD_VAR 0 2
54224: PPUSH
54225: LD_VAR 0 3
54229: PPUSH
54230: LD_VAR 0 4
54234: PPUSH
54235: CALL_OW 1
54239: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
54240: LD_ADDR_VAR 0 2
54244: PUSH
54245: LD_VAR 0 2
54249: PPUSH
54250: LD_INT 4
54252: PPUSH
54253: LD_VAR 0 2
54257: PUSH
54258: LD_INT 4
54260: ARRAY
54261: PUSH
54262: LD_VAR 0 4
54266: PLUS
54267: PPUSH
54268: CALL_OW 1
54272: ST_TO_ADDR
// end ;
54273: GO 54192
54275: POP
54276: POP
// end ;
54277: LD_VAR 0 2
54281: RET
// export function Length ( array ) ; begin
54282: LD_INT 0
54284: PPUSH
// result := array + 0 ;
54285: LD_ADDR_VAR 0 2
54289: PUSH
54290: LD_VAR 0 1
54294: PUSH
54295: LD_INT 0
54297: PLUS
54298: ST_TO_ADDR
// end ;
54299: LD_VAR 0 2
54303: RET
// export function PrepareArray ( array ) ; begin
54304: LD_INT 0
54306: PPUSH
// result := array diff 0 ;
54307: LD_ADDR_VAR 0 2
54311: PUSH
54312: LD_VAR 0 1
54316: PUSH
54317: LD_INT 0
54319: DIFF
54320: ST_TO_ADDR
// if not result [ 1 ] then
54321: LD_VAR 0 2
54325: PUSH
54326: LD_INT 1
54328: ARRAY
54329: NOT
54330: IFFALSE 54350
// result := Delete ( result , 1 ) ;
54332: LD_ADDR_VAR 0 2
54336: PUSH
54337: LD_VAR 0 2
54341: PPUSH
54342: LD_INT 1
54344: PPUSH
54345: CALL_OW 3
54349: ST_TO_ADDR
// end ;
54350: LD_VAR 0 2
54354: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
54355: LD_INT 0
54357: PPUSH
54358: PPUSH
54359: PPUSH
54360: PPUSH
// sibRocketRange := 25 ;
54361: LD_ADDR_VAR 0 6
54365: PUSH
54366: LD_INT 25
54368: ST_TO_ADDR
// result := false ;
54369: LD_ADDR_VAR 0 4
54373: PUSH
54374: LD_INT 0
54376: ST_TO_ADDR
// for i := 0 to 5 do
54377: LD_ADDR_VAR 0 5
54381: PUSH
54382: DOUBLE
54383: LD_INT 0
54385: DEC
54386: ST_TO_ADDR
54387: LD_INT 5
54389: PUSH
54390: FOR_TO
54391: IFFALSE 54458
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
54393: LD_VAR 0 1
54397: PPUSH
54398: LD_VAR 0 5
54402: PPUSH
54403: LD_VAR 0 6
54407: PPUSH
54408: CALL_OW 272
54412: PPUSH
54413: LD_VAR 0 2
54417: PPUSH
54418: LD_VAR 0 5
54422: PPUSH
54423: LD_VAR 0 6
54427: PPUSH
54428: CALL_OW 273
54432: PPUSH
54433: LD_VAR 0 3
54437: PPUSH
54438: CALL_OW 309
54442: IFFALSE 54456
// begin result := true ;
54444: LD_ADDR_VAR 0 4
54448: PUSH
54449: LD_INT 1
54451: ST_TO_ADDR
// exit ;
54452: POP
54453: POP
54454: GO 54460
// end ;
54456: GO 54390
54458: POP
54459: POP
// end ;
54460: LD_VAR 0 4
54464: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
54465: LD_INT 0
54467: PPUSH
54468: PPUSH
54469: PPUSH
// if btype = b_depot then
54470: LD_VAR 0 2
54474: PUSH
54475: LD_INT 0
54477: EQUAL
54478: IFFALSE 54490
// begin result := true ;
54480: LD_ADDR_VAR 0 3
54484: PUSH
54485: LD_INT 1
54487: ST_TO_ADDR
// exit ;
54488: GO 54610
// end ; pom := GetBase ( depot ) ;
54490: LD_ADDR_VAR 0 4
54494: PUSH
54495: LD_VAR 0 1
54499: PPUSH
54500: CALL_OW 274
54504: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54505: LD_ADDR_VAR 0 5
54509: PUSH
54510: LD_VAR 0 2
54514: PPUSH
54515: LD_VAR 0 1
54519: PPUSH
54520: CALL_OW 248
54524: PPUSH
54525: CALL_OW 450
54529: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
54530: LD_ADDR_VAR 0 3
54534: PUSH
54535: LD_VAR 0 4
54539: PPUSH
54540: LD_INT 1
54542: PPUSH
54543: CALL_OW 275
54547: PUSH
54548: LD_VAR 0 5
54552: PUSH
54553: LD_INT 1
54555: ARRAY
54556: GREATEREQUAL
54557: IFFALSE 54583
54559: PUSH
54560: LD_VAR 0 4
54564: PPUSH
54565: LD_INT 2
54567: PPUSH
54568: CALL_OW 275
54572: PUSH
54573: LD_VAR 0 5
54577: PUSH
54578: LD_INT 2
54580: ARRAY
54581: GREATEREQUAL
54582: AND
54583: IFFALSE 54609
54585: PUSH
54586: LD_VAR 0 4
54590: PPUSH
54591: LD_INT 3
54593: PPUSH
54594: CALL_OW 275
54598: PUSH
54599: LD_VAR 0 5
54603: PUSH
54604: LD_INT 3
54606: ARRAY
54607: GREATEREQUAL
54608: AND
54609: ST_TO_ADDR
// end ;
54610: LD_VAR 0 3
54614: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
54615: LD_INT 0
54617: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
54618: LD_VAR 0 1
54622: PPUSH
54623: LD_VAR 0 2
54627: PPUSH
54628: LD_INT 0
54630: PPUSH
54631: LD_INT 0
54633: PPUSH
54634: LD_INT 1
54636: PPUSH
54637: LD_INT 0
54639: PPUSH
54640: CALL_OW 587
// end ;
54644: LD_VAR 0 3
54648: RET
// export function CenterOnNow ( unit ) ; begin
54649: LD_INT 0
54651: PPUSH
// result := IsInUnit ( unit ) ;
54652: LD_ADDR_VAR 0 2
54656: PUSH
54657: LD_VAR 0 1
54661: PPUSH
54662: CALL_OW 310
54666: ST_TO_ADDR
// if not result then
54667: LD_VAR 0 2
54671: NOT
54672: IFFALSE 54684
// result := unit ;
54674: LD_ADDR_VAR 0 2
54678: PUSH
54679: LD_VAR 0 1
54683: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
54684: LD_VAR 0 1
54688: PPUSH
54689: CALL_OW 87
// end ;
54693: LD_VAR 0 2
54697: RET
// export function ComMoveHex ( unit , hex ) ; begin
54698: LD_INT 0
54700: PPUSH
// if not hex then
54701: LD_VAR 0 2
54705: NOT
54706: IFFALSE 54710
// exit ;
54708: GO 54763
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
54710: LD_VAR 0 2
54714: PUSH
54715: LD_INT 1
54717: ARRAY
54718: PPUSH
54719: LD_VAR 0 2
54723: PUSH
54724: LD_INT 2
54726: ARRAY
54727: PPUSH
54728: CALL_OW 428
54732: IFFALSE 54736
// exit ;
54734: GO 54763
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
54736: LD_VAR 0 1
54740: PPUSH
54741: LD_VAR 0 2
54745: PUSH
54746: LD_INT 1
54748: ARRAY
54749: PPUSH
54750: LD_VAR 0 2
54754: PUSH
54755: LD_INT 2
54757: ARRAY
54758: PPUSH
54759: CALL_OW 111
// end ;
54763: LD_VAR 0 3
54767: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
54768: LD_INT 0
54770: PPUSH
54771: PPUSH
54772: PPUSH
// if not unit or not enemy then
54773: LD_VAR 0 1
54777: NOT
54778: IFTRUE 54787
54780: PUSH
54781: LD_VAR 0 2
54785: NOT
54786: OR
54787: IFFALSE 54791
// exit ;
54789: GO 54917
// x := GetX ( enemy ) ;
54791: LD_ADDR_VAR 0 4
54795: PUSH
54796: LD_VAR 0 2
54800: PPUSH
54801: CALL_OW 250
54805: ST_TO_ADDR
// y := GetY ( enemy ) ;
54806: LD_ADDR_VAR 0 5
54810: PUSH
54811: LD_VAR 0 2
54815: PPUSH
54816: CALL_OW 251
54820: ST_TO_ADDR
// if ValidHex ( x , y ) then
54821: LD_VAR 0 4
54825: PPUSH
54826: LD_VAR 0 5
54830: PPUSH
54831: CALL_OW 488
54835: IFFALSE 54917
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
54837: LD_VAR 0 2
54841: PPUSH
54842: CALL_OW 247
54846: PUSH
54847: LD_INT 3
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: IN
54857: IFTRUE 54880
54859: PUSH
54860: LD_VAR 0 1
54864: PPUSH
54865: CALL_OW 255
54869: PPUSH
54870: LD_VAR 0 2
54874: PPUSH
54875: CALL_OW 292
54879: OR
54880: IFFALSE 54898
// ComAttackUnit ( unit , enemy ) else
54882: LD_VAR 0 1
54886: PPUSH
54887: LD_VAR 0 2
54891: PPUSH
54892: CALL_OW 115
54896: GO 54917
// ComAgressiveMove ( unit , x , y ) ;
54898: LD_VAR 0 1
54902: PPUSH
54903: LD_VAR 0 4
54907: PPUSH
54908: LD_VAR 0 5
54912: PPUSH
54913: CALL_OW 114
// end ;
54917: LD_VAR 0 3
54921: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
54922: LD_INT 0
54924: PPUSH
54925: PPUSH
54926: PPUSH
// list := AreaToList ( area , 0 ) ;
54927: LD_ADDR_VAR 0 5
54931: PUSH
54932: LD_VAR 0 1
54936: PPUSH
54937: LD_INT 0
54939: PPUSH
54940: CALL_OW 517
54944: ST_TO_ADDR
// if not list then
54945: LD_VAR 0 5
54949: NOT
54950: IFFALSE 54954
// exit ;
54952: GO 55084
// if all then
54954: LD_VAR 0 2
54958: IFFALSE 55046
// begin for i := 1 to list [ 1 ] do
54960: LD_ADDR_VAR 0 4
54964: PUSH
54965: DOUBLE
54966: LD_INT 1
54968: DEC
54969: ST_TO_ADDR
54970: LD_VAR 0 5
54974: PUSH
54975: LD_INT 1
54977: ARRAY
54978: PUSH
54979: FOR_TO
54980: IFFALSE 55042
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
54982: LD_ADDR_VAR 0 3
54986: PUSH
54987: LD_VAR 0 3
54991: PPUSH
54992: LD_VAR 0 3
54996: PUSH
54997: LD_INT 1
54999: PLUS
55000: PPUSH
55001: LD_VAR 0 5
55005: PUSH
55006: LD_INT 1
55008: ARRAY
55009: PUSH
55010: LD_VAR 0 4
55014: ARRAY
55015: PUSH
55016: LD_VAR 0 5
55020: PUSH
55021: LD_INT 2
55023: ARRAY
55024: PUSH
55025: LD_VAR 0 4
55029: ARRAY
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PPUSH
55035: CALL_OW 1
55039: ST_TO_ADDR
55040: GO 54979
55042: POP
55043: POP
// exit ;
55044: GO 55084
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
55046: LD_ADDR_VAR 0 3
55050: PUSH
55051: LD_VAR 0 5
55055: PUSH
55056: LD_INT 1
55058: ARRAY
55059: PUSH
55060: LD_INT 1
55062: ARRAY
55063: PUSH
55064: LD_VAR 0 5
55068: PUSH
55069: LD_INT 2
55071: ARRAY
55072: PUSH
55073: LD_INT 1
55075: ARRAY
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: EMPTY
55082: LIST
55083: ST_TO_ADDR
// end ;
55084: LD_VAR 0 3
55088: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
55089: LD_INT 0
55091: PPUSH
55092: PPUSH
// list := AreaToList ( area , 0 ) ;
55093: LD_ADDR_VAR 0 4
55097: PUSH
55098: LD_VAR 0 1
55102: PPUSH
55103: LD_INT 0
55105: PPUSH
55106: CALL_OW 517
55110: ST_TO_ADDR
// if not list then
55111: LD_VAR 0 4
55115: NOT
55116: IFFALSE 55120
// exit ;
55118: GO 55161
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
55120: LD_ADDR_VAR 0 3
55124: PUSH
55125: LD_VAR 0 4
55129: PUSH
55130: LD_INT 1
55132: ARRAY
55133: PUSH
55134: LD_INT 1
55136: ARRAY
55137: PUSH
55138: LD_VAR 0 4
55142: PUSH
55143: LD_INT 2
55145: ARRAY
55146: PUSH
55147: LD_INT 1
55149: ARRAY
55150: PUSH
55151: LD_VAR 0 2
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: LIST
55160: ST_TO_ADDR
// end ;
55161: LD_VAR 0 3
55165: RET
// export function First ( array ) ; begin
55166: LD_INT 0
55168: PPUSH
// if not array then
55169: LD_VAR 0 1
55173: NOT
55174: IFFALSE 55178
// exit ;
55176: GO 55192
// result := array [ 1 ] ;
55178: LD_ADDR_VAR 0 2
55182: PUSH
55183: LD_VAR 0 1
55187: PUSH
55188: LD_INT 1
55190: ARRAY
55191: ST_TO_ADDR
// end ;
55192: LD_VAR 0 2
55196: RET
// export function Last ( array ) ; begin
55197: LD_INT 0
55199: PPUSH
// if not array then
55200: LD_VAR 0 1
55204: NOT
55205: IFFALSE 55209
// exit ;
55207: GO 55225
// result := array [ array ] ;
55209: LD_ADDR_VAR 0 2
55213: PUSH
55214: LD_VAR 0 1
55218: PUSH
55219: LD_VAR 0 1
55223: ARRAY
55224: ST_TO_ADDR
// end ;
55225: LD_VAR 0 2
55229: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
55230: LD_INT 0
55232: PPUSH
55233: PPUSH
// result := [ ] ;
55234: LD_ADDR_VAR 0 5
55238: PUSH
55239: EMPTY
55240: ST_TO_ADDR
// if not array then
55241: LD_VAR 0 1
55245: NOT
55246: IFFALSE 55250
// exit ;
55248: GO 55362
// for i := 1 to array do
55250: LD_ADDR_VAR 0 6
55254: PUSH
55255: DOUBLE
55256: LD_INT 1
55258: DEC
55259: ST_TO_ADDR
55260: LD_VAR 0 1
55264: PUSH
55265: FOR_TO
55266: IFFALSE 55360
// if array [ i ] [ index ] = value then
55268: LD_VAR 0 1
55272: PUSH
55273: LD_VAR 0 6
55277: ARRAY
55278: PUSH
55279: LD_VAR 0 2
55283: ARRAY
55284: PUSH
55285: LD_VAR 0 3
55289: EQUAL
55290: IFFALSE 55358
// begin if indexColumn then
55292: LD_VAR 0 4
55296: IFFALSE 55332
// result := Join ( result , array [ i ] [ indexColumn ] ) else
55298: LD_ADDR_VAR 0 5
55302: PUSH
55303: LD_VAR 0 5
55307: PPUSH
55308: LD_VAR 0 1
55312: PUSH
55313: LD_VAR 0 6
55317: ARRAY
55318: PUSH
55319: LD_VAR 0 4
55323: ARRAY
55324: PPUSH
55325: CALL 50370 0 2
55329: ST_TO_ADDR
55330: GO 55358
// result := Join ( result , array [ i ] ) ;
55332: LD_ADDR_VAR 0 5
55336: PUSH
55337: LD_VAR 0 5
55341: PPUSH
55342: LD_VAR 0 1
55346: PUSH
55347: LD_VAR 0 6
55351: ARRAY
55352: PPUSH
55353: CALL 50370 0 2
55357: ST_TO_ADDR
// end ;
55358: GO 55265
55360: POP
55361: POP
// end ;
55362: LD_VAR 0 5
55366: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
55367: LD_INT 0
55369: PPUSH
// if not vehicles or not parkingPoint then
55370: LD_VAR 0 1
55374: NOT
55375: IFTRUE 55384
55377: PUSH
55378: LD_VAR 0 2
55382: NOT
55383: OR
55384: IFFALSE 55388
// exit ;
55386: GO 55486
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
55388: LD_ADDR_VAR 0 1
55392: PUSH
55393: LD_VAR 0 1
55397: PPUSH
55398: LD_INT 50
55400: PUSH
55401: EMPTY
55402: LIST
55403: PUSH
55404: LD_INT 3
55406: PUSH
55407: LD_INT 92
55409: PUSH
55410: LD_VAR 0 2
55414: PUSH
55415: LD_INT 1
55417: ARRAY
55418: PUSH
55419: LD_VAR 0 2
55423: PUSH
55424: LD_INT 2
55426: ARRAY
55427: PUSH
55428: LD_INT 8
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PPUSH
55445: CALL_OW 72
55449: ST_TO_ADDR
// if not vehicles then
55450: LD_VAR 0 1
55454: NOT
55455: IFFALSE 55459
// exit ;
55457: GO 55486
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
55459: LD_VAR 0 1
55463: PPUSH
55464: LD_VAR 0 2
55468: PUSH
55469: LD_INT 1
55471: ARRAY
55472: PPUSH
55473: LD_VAR 0 2
55477: PUSH
55478: LD_INT 2
55480: ARRAY
55481: PPUSH
55482: CALL_OW 111
// end ;
55486: LD_VAR 0 3
55490: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
55491: LD_INT 0
55493: PPUSH
55494: PPUSH
55495: PPUSH
// if not side or not area then
55496: LD_VAR 0 1
55500: NOT
55501: IFTRUE 55510
55503: PUSH
55504: LD_VAR 0 2
55508: NOT
55509: OR
55510: IFFALSE 55514
// exit ;
55512: GO 55633
// tmp := AreaToList ( area , 0 ) ;
55514: LD_ADDR_VAR 0 5
55518: PUSH
55519: LD_VAR 0 2
55523: PPUSH
55524: LD_INT 0
55526: PPUSH
55527: CALL_OW 517
55531: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55532: LD_ADDR_VAR 0 4
55536: PUSH
55537: DOUBLE
55538: LD_INT 1
55540: DEC
55541: ST_TO_ADDR
55542: LD_VAR 0 5
55546: PUSH
55547: LD_INT 1
55549: ARRAY
55550: PUSH
55551: FOR_TO
55552: IFFALSE 55631
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
55554: LD_VAR 0 5
55558: PUSH
55559: LD_INT 1
55561: ARRAY
55562: PUSH
55563: LD_VAR 0 4
55567: ARRAY
55568: PPUSH
55569: LD_VAR 0 5
55573: PUSH
55574: LD_INT 2
55576: ARRAY
55577: PUSH
55578: LD_VAR 0 4
55582: ARRAY
55583: PPUSH
55584: CALL_OW 351
55588: IFFALSE 55629
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
55590: LD_VAR 0 5
55594: PUSH
55595: LD_INT 1
55597: ARRAY
55598: PUSH
55599: LD_VAR 0 4
55603: ARRAY
55604: PPUSH
55605: LD_VAR 0 5
55609: PUSH
55610: LD_INT 2
55612: ARRAY
55613: PUSH
55614: LD_VAR 0 4
55618: ARRAY
55619: PPUSH
55620: LD_VAR 0 1
55624: PPUSH
55625: CALL_OW 244
// end ;
55629: GO 55551
55631: POP
55632: POP
// end ;
55633: LD_VAR 0 3
55637: RET
// export function UniqueArray ( array ) ; var i ; begin
55638: LD_INT 0
55640: PPUSH
55641: PPUSH
// result := [ ] ;
55642: LD_ADDR_VAR 0 2
55646: PUSH
55647: EMPTY
55648: ST_TO_ADDR
// if not array then
55649: LD_VAR 0 1
55653: NOT
55654: IFFALSE 55658
// exit ;
55656: GO 55719
// for i := 1 to array do
55658: LD_ADDR_VAR 0 3
55662: PUSH
55663: DOUBLE
55664: LD_INT 1
55666: DEC
55667: ST_TO_ADDR
55668: LD_VAR 0 1
55672: PUSH
55673: FOR_TO
55674: IFFALSE 55717
// if not array [ i ] in result then
55676: LD_VAR 0 1
55680: PUSH
55681: LD_VAR 0 3
55685: ARRAY
55686: PUSH
55687: LD_VAR 0 2
55691: IN
55692: NOT
55693: IFFALSE 55715
// result := Join ( result , i ) ;
55695: LD_ADDR_VAR 0 2
55699: PUSH
55700: LD_VAR 0 2
55704: PPUSH
55705: LD_VAR 0 3
55709: PPUSH
55710: CALL 50370 0 2
55714: ST_TO_ADDR
55715: GO 55673
55717: POP
55718: POP
// end ; end_of_file
55719: LD_VAR 0 2
55723: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55724: LD_VAR 0 1
55728: PUSH
55729: LD_INT 200
55731: DOUBLE
55732: GREATEREQUAL
55733: IFFALSE 55741
55735: LD_INT 299
55737: DOUBLE
55738: LESSEQUAL
55739: IFTRUE 55743
55741: GO 55775
55743: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55744: LD_VAR 0 1
55748: PPUSH
55749: LD_VAR 0 2
55753: PPUSH
55754: LD_VAR 0 3
55758: PPUSH
55759: LD_VAR 0 4
55763: PPUSH
55764: LD_VAR 0 5
55768: PPUSH
55769: CALL 56556 0 5
55773: GO 55852
55775: LD_INT 300
55777: DOUBLE
55778: GREATEREQUAL
55779: IFFALSE 55787
55781: LD_INT 399
55783: DOUBLE
55784: LESSEQUAL
55785: IFTRUE 55789
55787: GO 55851
55789: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55790: LD_VAR 0 1
55794: PPUSH
55795: LD_VAR 0 2
55799: PPUSH
55800: LD_VAR 0 3
55804: PPUSH
55805: LD_VAR 0 4
55809: PPUSH
55810: LD_VAR 0 5
55814: PPUSH
55815: LD_VAR 0 6
55819: PPUSH
55820: LD_VAR 0 7
55824: PPUSH
55825: LD_VAR 0 8
55829: PPUSH
55830: LD_VAR 0 9
55834: PPUSH
55835: LD_VAR 0 10
55839: PPUSH
55840: LD_VAR 0 11
55844: PPUSH
55845: CALL 61961 0 11
55849: GO 55852
55851: POP
// end ;
55852: PPOPN 11
55854: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55855: LD_VAR 0 1
55859: PPUSH
55860: LD_VAR 0 2
55864: PPUSH
55865: LD_VAR 0 3
55869: PPUSH
55870: LD_VAR 0 4
55874: PPUSH
55875: LD_VAR 0 5
55879: PPUSH
55880: CALL 55937 0 5
// end ; end_of_file
55884: PPOPN 5
55886: END
// export function SOS_UnitDestroyed ( un ) ; begin
55887: LD_INT 0
55889: PPUSH
// ComRadiation ( un ) ;
55890: LD_VAR 0 1
55894: PPUSH
55895: CALL 56976 0 1
// end ;
55899: LD_VAR 0 2
55903: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55904: LD_INT 0
55906: PPUSH
// ComRadiation ( un ) ;
55907: LD_VAR 0 1
55911: PPUSH
55912: CALL 56976 0 1
// end ;
55916: LD_VAR 0 2
55920: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55921: LD_INT 0
55923: PPUSH
// end ;
55924: LD_VAR 0 4
55928: RET
// export function SOS_Command ( cmd ) ; begin
55929: LD_INT 0
55931: PPUSH
// end ;
55932: LD_VAR 0 2
55936: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55937: LD_INT 0
55939: PPUSH
// end ;
55940: LD_VAR 0 6
55944: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
55945: LD_INT 0
55947: PPUSH
55948: PPUSH
55949: PPUSH
55950: PPUSH
// if not vehicle or not factory then
55951: LD_VAR 0 1
55955: NOT
55956: IFTRUE 55965
55958: PUSH
55959: LD_VAR 0 2
55963: NOT
55964: OR
55965: IFFALSE 55969
// exit ;
55967: GO 56551
// if not factoryWaypoints then
55969: LD_EXP 59
55973: NOT
55974: IFFALSE 55978
// exit ;
55976: GO 56551
// for i := 1 to Count ( factoryWaypoints ) do
55978: LD_ADDR_VAR 0 4
55982: PUSH
55983: DOUBLE
55984: LD_INT 1
55986: DEC
55987: ST_TO_ADDR
55988: LD_EXP 59
55992: PPUSH
55993: CALL 14438 0 1
55997: PUSH
55998: FOR_TO
55999: IFFALSE 56549
// if factoryWaypoints [ i ] [ 2 ] = factory then
56001: LD_EXP 59
56005: PUSH
56006: LD_VAR 0 4
56010: ARRAY
56011: PUSH
56012: LD_INT 2
56014: ARRAY
56015: PUSH
56016: LD_VAR 0 2
56020: EQUAL
56021: IFFALSE 56547
// begin if GetControl ( vehicle ) = control_manual then
56023: LD_VAR 0 1
56027: PPUSH
56028: CALL_OW 263
56032: PUSH
56033: LD_INT 1
56035: EQUAL
56036: IFFALSE 56400
// begin driver := IsDrivenBy ( vehicle ) ;
56038: LD_ADDR_VAR 0 5
56042: PUSH
56043: LD_VAR 0 1
56047: PPUSH
56048: CALL_OW 311
56052: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
56053: LD_VAR 0 5
56057: PUSH
56058: LD_EXP 60
56062: IN
56063: IFTRUE 56077
56065: PUSH
56066: LD_VAR 0 1
56070: PUSH
56071: LD_EXP 60
56075: IN
56076: OR
56077: IFFALSE 56083
// exit ;
56079: POP
56080: POP
56081: GO 56551
// if not HasTask ( driver ) then
56083: LD_VAR 0 5
56087: PPUSH
56088: CALL_OW 314
56092: NOT
56093: IFFALSE 56398
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
56095: LD_ADDR_EXP 60
56099: PUSH
56100: LD_EXP 60
56104: PPUSH
56105: LD_VAR 0 5
56109: PPUSH
56110: CALL 50370 0 2
56114: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
56115: LD_ADDR_EXP 60
56119: PUSH
56120: LD_EXP 60
56124: PPUSH
56125: LD_VAR 0 1
56129: PPUSH
56130: CALL 50370 0 2
56134: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56135: LD_ADDR_VAR 0 6
56139: PUSH
56140: LD_EXP 59
56144: PUSH
56145: LD_VAR 0 4
56149: ARRAY
56150: PUSH
56151: LD_INT 3
56153: ARRAY
56154: PPUSH
56155: LD_EXP 59
56159: PUSH
56160: LD_VAR 0 4
56164: ARRAY
56165: PUSH
56166: LD_INT 4
56168: ARRAY
56169: PPUSH
56170: CALL_OW 428
56174: ST_TO_ADDR
// if hex then
56175: LD_VAR 0 6
56179: IFFALSE 56197
// ComMoveUnit ( driver , hex ) else
56181: LD_VAR 0 5
56185: PPUSH
56186: LD_VAR 0 6
56190: PPUSH
56191: CALL_OW 112
56195: GO 56281
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
56197: LD_VAR 0 1
56201: PPUSH
56202: LD_EXP 59
56206: PUSH
56207: LD_VAR 0 4
56211: ARRAY
56212: PUSH
56213: LD_INT 3
56215: ARRAY
56216: PPUSH
56217: LD_EXP 59
56221: PUSH
56222: LD_VAR 0 4
56226: ARRAY
56227: PUSH
56228: LD_INT 4
56230: ARRAY
56231: PPUSH
56232: CALL_OW 297
56236: PUSH
56237: LD_INT 0
56239: GREATER
56240: IFFALSE 56281
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56242: LD_VAR 0 5
56246: PPUSH
56247: LD_EXP 59
56251: PUSH
56252: LD_VAR 0 4
56256: ARRAY
56257: PUSH
56258: LD_INT 3
56260: ARRAY
56261: PPUSH
56262: LD_EXP 59
56266: PUSH
56267: LD_VAR 0 4
56271: ARRAY
56272: PUSH
56273: LD_INT 4
56275: ARRAY
56276: PPUSH
56277: CALL_OW 111
// AddComExitVehicle ( driver ) ;
56281: LD_VAR 0 5
56285: PPUSH
56286: CALL_OW 181
// if Multiplayer then
56290: LD_OWVAR 4
56294: IFFALSE 56343
// begin repeat wait ( 10 ) ;
56296: LD_INT 10
56298: PPUSH
56299: CALL_OW 67
// until not IsInUnit ( driver ) ;
56303: LD_VAR 0 5
56307: PPUSH
56308: CALL_OW 310
56312: NOT
56313: IFFALSE 56296
// if not HasTask ( driver ) then
56315: LD_VAR 0 5
56319: PPUSH
56320: CALL_OW 314
56324: NOT
56325: IFFALSE 56341
// ComEnterUnit ( driver , factory ) ;
56327: LD_VAR 0 5
56331: PPUSH
56332: LD_VAR 0 2
56336: PPUSH
56337: CALL_OW 120
// end else
56341: GO 56357
// AddComEnterUnit ( driver , factory ) ;
56343: LD_VAR 0 5
56347: PPUSH
56348: LD_VAR 0 2
56352: PPUSH
56353: CALL_OW 180
// wait ( 0 0$1 ) ;
56357: LD_INT 35
56359: PPUSH
56360: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
56364: LD_ADDR_EXP 60
56368: PUSH
56369: LD_EXP 60
56373: PUSH
56374: LD_VAR 0 5
56378: DIFF
56379: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
56380: LD_ADDR_EXP 60
56384: PUSH
56385: LD_EXP 60
56389: PUSH
56390: LD_VAR 0 1
56394: DIFF
56395: ST_TO_ADDR
// break ;
56396: GO 56549
// end ; end else
56398: GO 56547
// if GetControl ( vehicle ) = control_remote then
56400: LD_VAR 0 1
56404: PPUSH
56405: CALL_OW 263
56409: PUSH
56410: LD_INT 2
56412: EQUAL
56413: IFFALSE 56499
// begin wait ( 0 0$2 ) ;
56415: LD_INT 70
56417: PPUSH
56418: CALL_OW 67
// repeat wait ( 10 ) ;
56422: LD_INT 10
56424: PPUSH
56425: CALL_OW 67
// Connect ( vehicle ) ;
56429: LD_VAR 0 1
56433: PPUSH
56434: CALL 20682 0 1
// until IsControledBy ( vehicle ) ;
56438: LD_VAR 0 1
56442: PPUSH
56443: CALL_OW 312
56447: IFFALSE 56422
// wait ( 10 ) ;
56449: LD_INT 10
56451: PPUSH
56452: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56456: LD_VAR 0 1
56460: PPUSH
56461: LD_EXP 59
56465: PUSH
56466: LD_VAR 0 4
56470: ARRAY
56471: PUSH
56472: LD_INT 3
56474: ARRAY
56475: PPUSH
56476: LD_EXP 59
56480: PUSH
56481: LD_VAR 0 4
56485: ARRAY
56486: PUSH
56487: LD_INT 4
56489: ARRAY
56490: PPUSH
56491: CALL_OW 111
// break ;
56495: GO 56549
// end else
56497: GO 56547
// begin wait ( 0 0$3 ) ;
56499: LD_INT 105
56501: PPUSH
56502: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56506: LD_VAR 0 1
56510: PPUSH
56511: LD_EXP 59
56515: PUSH
56516: LD_VAR 0 4
56520: ARRAY
56521: PUSH
56522: LD_INT 3
56524: ARRAY
56525: PPUSH
56526: LD_EXP 59
56530: PUSH
56531: LD_VAR 0 4
56535: ARRAY
56536: PUSH
56537: LD_INT 4
56539: ARRAY
56540: PPUSH
56541: CALL_OW 111
// break ;
56545: GO 56549
// end ; end ;
56547: GO 55998
56549: POP
56550: POP
// end ;
56551: LD_VAR 0 3
56555: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56556: LD_INT 0
56558: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56559: LD_VAR 0 1
56563: PUSH
56564: LD_INT 250
56566: EQUAL
56567: IFFALSE 56584
56569: PUSH
56570: LD_VAR 0 2
56574: PPUSH
56575: CALL_OW 264
56579: PUSH
56580: LD_INT 81
56582: EQUAL
56583: AND
56584: IFFALSE 56605
// MinerPlaceMine ( unit , x , y ) ;
56586: LD_VAR 0 2
56590: PPUSH
56591: LD_VAR 0 4
56595: PPUSH
56596: LD_VAR 0 5
56600: PPUSH
56601: CALL 59737 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56605: LD_VAR 0 1
56609: PUSH
56610: LD_INT 251
56612: EQUAL
56613: IFFALSE 56630
56615: PUSH
56616: LD_VAR 0 2
56620: PPUSH
56621: CALL_OW 264
56625: PUSH
56626: LD_INT 81
56628: EQUAL
56629: AND
56630: IFFALSE 56651
// MinerDetonateMine ( unit , x , y ) ;
56632: LD_VAR 0 2
56636: PPUSH
56637: LD_VAR 0 4
56641: PPUSH
56642: LD_VAR 0 5
56646: PPUSH
56647: CALL 60016 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56651: LD_VAR 0 1
56655: PUSH
56656: LD_INT 252
56658: EQUAL
56659: IFFALSE 56676
56661: PUSH
56662: LD_VAR 0 2
56666: PPUSH
56667: CALL_OW 264
56671: PUSH
56672: LD_INT 81
56674: EQUAL
56675: AND
56676: IFFALSE 56697
// MinerCreateMinefield ( unit , x , y ) ;
56678: LD_VAR 0 2
56682: PPUSH
56683: LD_VAR 0 4
56687: PPUSH
56688: LD_VAR 0 5
56692: PPUSH
56693: CALL 60435 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56697: LD_VAR 0 1
56701: PUSH
56702: LD_INT 253
56704: EQUAL
56705: IFFALSE 56722
56707: PUSH
56708: LD_VAR 0 2
56712: PPUSH
56713: CALL_OW 257
56717: PUSH
56718: LD_INT 5
56720: EQUAL
56721: AND
56722: IFFALSE 56743
// ComBinocular ( unit , x , y ) ;
56724: LD_VAR 0 2
56728: PPUSH
56729: LD_VAR 0 4
56733: PPUSH
56734: LD_VAR 0 5
56738: PPUSH
56739: CALL 60810 0 3
// if selectedUnit then
56743: LD_VAR 0 3
56747: IFFALSE 56807
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56749: LD_VAR 0 1
56753: PUSH
56754: LD_INT 254
56756: EQUAL
56757: IFFALSE 56774
56759: PUSH
56760: LD_VAR 0 2
56764: PPUSH
56765: CALL_OW 264
56769: PUSH
56770: LD_INT 99
56772: EQUAL
56773: AND
56774: IFFALSE 56791
56776: PUSH
56777: LD_VAR 0 3
56781: PPUSH
56782: CALL_OW 263
56786: PUSH
56787: LD_INT 3
56789: EQUAL
56790: AND
56791: IFFALSE 56807
// HackDestroyVehicle ( unit , selectedUnit ) ;
56793: LD_VAR 0 2
56797: PPUSH
56798: LD_VAR 0 3
56802: PPUSH
56803: CALL 59097 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56807: LD_VAR 0 1
56811: PUSH
56812: LD_INT 255
56814: EQUAL
56815: IFFALSE 56839
56817: PUSH
56818: LD_VAR 0 2
56822: PPUSH
56823: CALL_OW 264
56827: PUSH
56828: LD_INT 14
56830: PUSH
56831: LD_INT 53
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: IN
56838: AND
56839: IFFALSE 56857
56841: PUSH
56842: LD_VAR 0 4
56846: PPUSH
56847: LD_VAR 0 5
56851: PPUSH
56852: CALL_OW 488
56856: AND
56857: IFFALSE 56881
// CutTreeXYR ( unit , x , y , 12 ) ;
56859: LD_VAR 0 2
56863: PPUSH
56864: LD_VAR 0 4
56868: PPUSH
56869: LD_VAR 0 5
56873: PPUSH
56874: LD_INT 12
56876: PPUSH
56877: CALL 57072 0 4
// if cmd = 256 then
56881: LD_VAR 0 1
56885: PUSH
56886: LD_INT 256
56888: EQUAL
56889: IFFALSE 56910
// SetFactoryWaypoint ( unit , x , y ) ;
56891: LD_VAR 0 2
56895: PPUSH
56896: LD_VAR 0 4
56900: PPUSH
56901: LD_VAR 0 5
56905: PPUSH
56906: CALL 61969 0 3
// if cmd = 257 then
56910: LD_VAR 0 1
56914: PUSH
56915: LD_INT 257
56917: EQUAL
56918: IFFALSE 56939
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56920: LD_VAR 0 2
56924: PPUSH
56925: LD_VAR 0 4
56929: PPUSH
56930: LD_VAR 0 5
56934: PPUSH
56935: CALL 62465 0 3
// if cmd = 258 then
56939: LD_VAR 0 1
56943: PUSH
56944: LD_INT 258
56946: EQUAL
56947: IFFALSE 56971
// BurnTreeXYR ( unit , x , y , 8 ) ;
56949: LD_VAR 0 2
56953: PPUSH
56954: LD_VAR 0 4
56958: PPUSH
56959: LD_VAR 0 5
56963: PPUSH
56964: LD_INT 8
56966: PPUSH
56967: CALL 57472 0 4
// end ;
56971: LD_VAR 0 6
56975: RET
// export function ComRadiation ( un ) ; var eff ; begin
56976: LD_INT 0
56978: PPUSH
56979: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56980: LD_VAR 0 1
56984: PPUSH
56985: CALL_OW 264
56989: PUSH
56990: LD_INT 91
56992: NONEQUAL
56993: IFFALSE 56997
// exit ;
56995: GO 57067
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56997: LD_INT 68
56999: PPUSH
57000: LD_VAR 0 1
57004: PPUSH
57005: CALL_OW 255
57009: PPUSH
57010: CALL_OW 321
57014: PUSH
57015: LD_INT 2
57017: EQUAL
57018: IFFALSE 57030
// eff := 50 else
57020: LD_ADDR_VAR 0 3
57024: PUSH
57025: LD_INT 50
57027: ST_TO_ADDR
57028: GO 57038
// eff := 25 ;
57030: LD_ADDR_VAR 0 3
57034: PUSH
57035: LD_INT 25
57037: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57038: LD_VAR 0 1
57042: PPUSH
57043: CALL_OW 250
57047: PPUSH
57048: LD_VAR 0 1
57052: PPUSH
57053: CALL_OW 251
57057: PPUSH
57058: LD_VAR 0 3
57062: PPUSH
57063: CALL_OW 495
// end ;
57067: LD_VAR 0 2
57071: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57072: LD_INT 0
57074: PPUSH
57075: PPUSH
57076: PPUSH
57077: PPUSH
57078: PPUSH
57079: PPUSH
57080: PPUSH
57081: PPUSH
57082: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
57083: LD_VAR 0 1
57087: PPUSH
57088: CALL_OW 302
57092: NOT
57093: IFTRUE 57112
57095: PUSH
57096: LD_VAR 0 2
57100: PPUSH
57101: LD_VAR 0 3
57105: PPUSH
57106: CALL_OW 488
57110: NOT
57111: OR
57112: IFTRUE 57121
57114: PUSH
57115: LD_VAR 0 4
57119: NOT
57120: OR
57121: IFFALSE 57125
// exit ;
57123: GO 57467
// list := [ ] ;
57125: LD_ADDR_VAR 0 13
57129: PUSH
57130: EMPTY
57131: ST_TO_ADDR
// if x - r < 0 then
57132: LD_VAR 0 2
57136: PUSH
57137: LD_VAR 0 4
57141: MINUS
57142: PUSH
57143: LD_INT 0
57145: LESS
57146: IFFALSE 57158
// min_x := 0 else
57148: LD_ADDR_VAR 0 7
57152: PUSH
57153: LD_INT 0
57155: ST_TO_ADDR
57156: GO 57174
// min_x := x - r ;
57158: LD_ADDR_VAR 0 7
57162: PUSH
57163: LD_VAR 0 2
57167: PUSH
57168: LD_VAR 0 4
57172: MINUS
57173: ST_TO_ADDR
// if y - r < 0 then
57174: LD_VAR 0 3
57178: PUSH
57179: LD_VAR 0 4
57183: MINUS
57184: PUSH
57185: LD_INT 0
57187: LESS
57188: IFFALSE 57200
// min_y := 0 else
57190: LD_ADDR_VAR 0 8
57194: PUSH
57195: LD_INT 0
57197: ST_TO_ADDR
57198: GO 57216
// min_y := y - r ;
57200: LD_ADDR_VAR 0 8
57204: PUSH
57205: LD_VAR 0 3
57209: PUSH
57210: LD_VAR 0 4
57214: MINUS
57215: ST_TO_ADDR
// max_x := x + r ;
57216: LD_ADDR_VAR 0 9
57220: PUSH
57221: LD_VAR 0 2
57225: PUSH
57226: LD_VAR 0 4
57230: PLUS
57231: ST_TO_ADDR
// max_y := y + r ;
57232: LD_ADDR_VAR 0 10
57236: PUSH
57237: LD_VAR 0 3
57241: PUSH
57242: LD_VAR 0 4
57246: PLUS
57247: ST_TO_ADDR
// for _x = min_x to max_x do
57248: LD_ADDR_VAR 0 11
57252: PUSH
57253: DOUBLE
57254: LD_VAR 0 7
57258: DEC
57259: ST_TO_ADDR
57260: LD_VAR 0 9
57264: PUSH
57265: FOR_TO
57266: IFFALSE 57385
// for _y = min_y to max_y do
57268: LD_ADDR_VAR 0 12
57272: PUSH
57273: DOUBLE
57274: LD_VAR 0 8
57278: DEC
57279: ST_TO_ADDR
57280: LD_VAR 0 10
57284: PUSH
57285: FOR_TO
57286: IFFALSE 57381
// begin if not ValidHex ( _x , _y ) then
57288: LD_VAR 0 11
57292: PPUSH
57293: LD_VAR 0 12
57297: PPUSH
57298: CALL_OW 488
57302: NOT
57303: IFFALSE 57307
// continue ;
57305: GO 57285
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57307: LD_VAR 0 11
57311: PPUSH
57312: LD_VAR 0 12
57316: PPUSH
57317: CALL_OW 351
57321: IFFALSE 57339
57323: PUSH
57324: LD_VAR 0 11
57328: PPUSH
57329: LD_VAR 0 12
57333: PPUSH
57334: CALL_OW 554
57338: AND
57339: IFFALSE 57379
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57341: LD_ADDR_VAR 0 13
57345: PUSH
57346: LD_VAR 0 13
57350: PPUSH
57351: LD_VAR 0 13
57355: PUSH
57356: LD_INT 1
57358: PLUS
57359: PPUSH
57360: LD_VAR 0 11
57364: PUSH
57365: LD_VAR 0 12
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PPUSH
57374: CALL_OW 2
57378: ST_TO_ADDR
// end ;
57379: GO 57285
57381: POP
57382: POP
57383: GO 57265
57385: POP
57386: POP
// if not list then
57387: LD_VAR 0 13
57391: NOT
57392: IFFALSE 57396
// exit ;
57394: GO 57467
// for i in list do
57396: LD_ADDR_VAR 0 6
57400: PUSH
57401: LD_VAR 0 13
57405: PUSH
57406: FOR_IN
57407: IFFALSE 57465
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57409: LD_VAR 0 1
57413: PPUSH
57414: LD_STRING M
57416: PUSH
57417: LD_VAR 0 6
57421: PUSH
57422: LD_INT 1
57424: ARRAY
57425: PUSH
57426: LD_VAR 0 6
57430: PUSH
57431: LD_INT 2
57433: ARRAY
57434: PUSH
57435: LD_INT 0
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: PUSH
57456: EMPTY
57457: LIST
57458: PPUSH
57459: CALL_OW 447
57463: GO 57406
57465: POP
57466: POP
// end ;
57467: LD_VAR 0 5
57471: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57472: LD_INT 0
57474: PPUSH
57475: PPUSH
57476: PPUSH
57477: PPUSH
57478: PPUSH
57479: PPUSH
57480: PPUSH
57481: PPUSH
57482: PPUSH
57483: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57484: LD_VAR 0 1
57488: PPUSH
57489: CALL_OW 302
57493: NOT
57494: IFTRUE 57513
57496: PUSH
57497: LD_VAR 0 2
57501: PPUSH
57502: LD_VAR 0 3
57506: PPUSH
57507: CALL_OW 488
57511: NOT
57512: OR
57513: IFTRUE 57522
57515: PUSH
57516: LD_VAR 0 4
57520: NOT
57521: OR
57522: IFFALSE 57526
// exit ;
57524: GO 58043
// list := [ ] ;
57526: LD_ADDR_VAR 0 13
57530: PUSH
57531: EMPTY
57532: ST_TO_ADDR
// if x - r < 0 then
57533: LD_VAR 0 2
57537: PUSH
57538: LD_VAR 0 4
57542: MINUS
57543: PUSH
57544: LD_INT 0
57546: LESS
57547: IFFALSE 57559
// min_x := 0 else
57549: LD_ADDR_VAR 0 7
57553: PUSH
57554: LD_INT 0
57556: ST_TO_ADDR
57557: GO 57575
// min_x := x - r ;
57559: LD_ADDR_VAR 0 7
57563: PUSH
57564: LD_VAR 0 2
57568: PUSH
57569: LD_VAR 0 4
57573: MINUS
57574: ST_TO_ADDR
// if y - r < 0 then
57575: LD_VAR 0 3
57579: PUSH
57580: LD_VAR 0 4
57584: MINUS
57585: PUSH
57586: LD_INT 0
57588: LESS
57589: IFFALSE 57601
// min_y := 0 else
57591: LD_ADDR_VAR 0 8
57595: PUSH
57596: LD_INT 0
57598: ST_TO_ADDR
57599: GO 57617
// min_y := y - r ;
57601: LD_ADDR_VAR 0 8
57605: PUSH
57606: LD_VAR 0 3
57610: PUSH
57611: LD_VAR 0 4
57615: MINUS
57616: ST_TO_ADDR
// max_x := x + r ;
57617: LD_ADDR_VAR 0 9
57621: PUSH
57622: LD_VAR 0 2
57626: PUSH
57627: LD_VAR 0 4
57631: PLUS
57632: ST_TO_ADDR
// max_y := y + r ;
57633: LD_ADDR_VAR 0 10
57637: PUSH
57638: LD_VAR 0 3
57642: PUSH
57643: LD_VAR 0 4
57647: PLUS
57648: ST_TO_ADDR
// for _x = min_x to max_x do
57649: LD_ADDR_VAR 0 11
57653: PUSH
57654: DOUBLE
57655: LD_VAR 0 7
57659: DEC
57660: ST_TO_ADDR
57661: LD_VAR 0 9
57665: PUSH
57666: FOR_TO
57667: IFFALSE 57786
// for _y = min_y to max_y do
57669: LD_ADDR_VAR 0 12
57673: PUSH
57674: DOUBLE
57675: LD_VAR 0 8
57679: DEC
57680: ST_TO_ADDR
57681: LD_VAR 0 10
57685: PUSH
57686: FOR_TO
57687: IFFALSE 57782
// begin if not ValidHex ( _x , _y ) then
57689: LD_VAR 0 11
57693: PPUSH
57694: LD_VAR 0 12
57698: PPUSH
57699: CALL_OW 488
57703: NOT
57704: IFFALSE 57708
// continue ;
57706: GO 57686
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57708: LD_VAR 0 11
57712: PPUSH
57713: LD_VAR 0 12
57717: PPUSH
57718: CALL_OW 351
57722: IFFALSE 57740
57724: PUSH
57725: LD_VAR 0 11
57729: PPUSH
57730: LD_VAR 0 12
57734: PPUSH
57735: CALL_OW 554
57739: AND
57740: IFFALSE 57780
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57742: LD_ADDR_VAR 0 13
57746: PUSH
57747: LD_VAR 0 13
57751: PPUSH
57752: LD_VAR 0 13
57756: PUSH
57757: LD_INT 1
57759: PLUS
57760: PPUSH
57761: LD_VAR 0 11
57765: PUSH
57766: LD_VAR 0 12
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PPUSH
57775: CALL_OW 2
57779: ST_TO_ADDR
// end ;
57780: GO 57686
57782: POP
57783: POP
57784: GO 57666
57786: POP
57787: POP
// if not list then
57788: LD_VAR 0 13
57792: NOT
57793: IFFALSE 57797
// exit ;
57795: GO 58043
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57797: LD_ADDR_VAR 0 13
57801: PUSH
57802: LD_VAR 0 1
57806: PPUSH
57807: LD_VAR 0 13
57811: PPUSH
57812: LD_INT 1
57814: PPUSH
57815: LD_INT 1
57817: PPUSH
57818: CALL 17810 0 4
57822: ST_TO_ADDR
// ComStop ( flame ) ;
57823: LD_VAR 0 1
57827: PPUSH
57828: CALL_OW 141
// for i in list do
57832: LD_ADDR_VAR 0 6
57836: PUSH
57837: LD_VAR 0 13
57841: PUSH
57842: FOR_IN
57843: IFFALSE 57874
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57845: LD_VAR 0 1
57849: PPUSH
57850: LD_VAR 0 6
57854: PUSH
57855: LD_INT 1
57857: ARRAY
57858: PPUSH
57859: LD_VAR 0 6
57863: PUSH
57864: LD_INT 2
57866: ARRAY
57867: PPUSH
57868: CALL_OW 176
57872: GO 57842
57874: POP
57875: POP
// repeat wait ( 0 0$1 ) ;
57876: LD_INT 35
57878: PPUSH
57879: CALL_OW 67
// task := GetTaskList ( flame ) ;
57883: LD_ADDR_VAR 0 14
57887: PUSH
57888: LD_VAR 0 1
57892: PPUSH
57893: CALL_OW 437
57897: ST_TO_ADDR
// if not task then
57898: LD_VAR 0 14
57902: NOT
57903: IFFALSE 57907
// exit ;
57905: GO 58043
// if task [ 1 ] [ 1 ] <> | then
57907: LD_VAR 0 14
57911: PUSH
57912: LD_INT 1
57914: ARRAY
57915: PUSH
57916: LD_INT 1
57918: ARRAY
57919: PUSH
57920: LD_STRING |
57922: NONEQUAL
57923: IFFALSE 57927
// exit ;
57925: GO 58043
// _x := task [ 1 ] [ 2 ] ;
57927: LD_ADDR_VAR 0 11
57931: PUSH
57932: LD_VAR 0 14
57936: PUSH
57937: LD_INT 1
57939: ARRAY
57940: PUSH
57941: LD_INT 2
57943: ARRAY
57944: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57945: LD_ADDR_VAR 0 12
57949: PUSH
57950: LD_VAR 0 14
57954: PUSH
57955: LD_INT 1
57957: ARRAY
57958: PUSH
57959: LD_INT 3
57961: ARRAY
57962: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57963: LD_VAR 0 11
57967: PPUSH
57968: LD_VAR 0 12
57972: PPUSH
57973: CALL_OW 351
57977: NOT
57978: IFTRUE 57997
57980: PUSH
57981: LD_VAR 0 11
57985: PPUSH
57986: LD_VAR 0 12
57990: PPUSH
57991: CALL_OW 554
57995: NOT
57996: OR
57997: IFFALSE 58031
// begin task := Delete ( task , 1 ) ;
57999: LD_ADDR_VAR 0 14
58003: PUSH
58004: LD_VAR 0 14
58008: PPUSH
58009: LD_INT 1
58011: PPUSH
58012: CALL_OW 3
58016: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
58017: LD_VAR 0 1
58021: PPUSH
58022: LD_VAR 0 14
58026: PPUSH
58027: CALL_OW 446
// end ; until not HasTask ( flame ) ;
58031: LD_VAR 0 1
58035: PPUSH
58036: CALL_OW 314
58040: NOT
58041: IFFALSE 57876
// end ;
58043: LD_VAR 0 5
58047: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58048: LD_EXP 49
58052: NOT
58053: IFFALSE 58103
58055: GO 58057
58057: DISABLE
// begin initHack := true ;
58058: LD_ADDR_EXP 49
58062: PUSH
58063: LD_INT 1
58065: ST_TO_ADDR
// hackTanks := [ ] ;
58066: LD_ADDR_EXP 50
58070: PUSH
58071: EMPTY
58072: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58073: LD_ADDR_EXP 51
58077: PUSH
58078: EMPTY
58079: ST_TO_ADDR
// hackLimit := 3 ;
58080: LD_ADDR_EXP 52
58084: PUSH
58085: LD_INT 3
58087: ST_TO_ADDR
// hackDist := 12 ;
58088: LD_ADDR_EXP 53
58092: PUSH
58093: LD_INT 12
58095: ST_TO_ADDR
// hackCounter := [ ] ;
58096: LD_ADDR_EXP 54
58100: PUSH
58101: EMPTY
58102: ST_TO_ADDR
// end ;
58103: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58104: LD_EXP 49
58108: IFFALSE 58126
58110: PUSH
58111: LD_INT 34
58113: PUSH
58114: LD_INT 99
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PPUSH
58121: CALL_OW 69
58125: AND
58126: IFFALSE 58379
58128: GO 58130
58130: DISABLE
58131: LD_INT 0
58133: PPUSH
58134: PPUSH
// begin enable ;
58135: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58136: LD_ADDR_VAR 0 1
58140: PUSH
58141: LD_INT 34
58143: PUSH
58144: LD_INT 99
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PPUSH
58151: CALL_OW 69
58155: PUSH
58156: FOR_IN
58157: IFFALSE 58377
// begin if not i in hackTanks then
58159: LD_VAR 0 1
58163: PUSH
58164: LD_EXP 50
58168: IN
58169: NOT
58170: IFFALSE 58253
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58172: LD_ADDR_EXP 50
58176: PUSH
58177: LD_EXP 50
58181: PPUSH
58182: LD_EXP 50
58186: PUSH
58187: LD_INT 1
58189: PLUS
58190: PPUSH
58191: LD_VAR 0 1
58195: PPUSH
58196: CALL_OW 1
58200: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58201: LD_ADDR_EXP 51
58205: PUSH
58206: LD_EXP 51
58210: PPUSH
58211: LD_EXP 51
58215: PUSH
58216: LD_INT 1
58218: PLUS
58219: PPUSH
58220: EMPTY
58221: PPUSH
58222: CALL_OW 1
58226: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58227: LD_ADDR_EXP 54
58231: PUSH
58232: LD_EXP 54
58236: PPUSH
58237: LD_EXP 54
58241: PUSH
58242: LD_INT 1
58244: PLUS
58245: PPUSH
58246: EMPTY
58247: PPUSH
58248: CALL_OW 1
58252: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58253: LD_VAR 0 1
58257: PPUSH
58258: CALL_OW 302
58262: NOT
58263: IFFALSE 58276
// begin HackUnlinkAll ( i ) ;
58265: LD_VAR 0 1
58269: PPUSH
58270: CALL 58382 0 1
// continue ;
58274: GO 58156
// end ; HackCheckCapturedStatus ( i ) ;
58276: LD_VAR 0 1
58280: PPUSH
58281: CALL 58827 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58285: LD_ADDR_VAR 0 2
58289: PUSH
58290: LD_INT 81
58292: PUSH
58293: LD_VAR 0 1
58297: PPUSH
58298: CALL_OW 255
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 33
58309: PUSH
58310: LD_INT 3
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 91
58319: PUSH
58320: LD_VAR 0 1
58324: PUSH
58325: LD_EXP 53
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 50
58337: PUSH
58338: EMPTY
58339: LIST
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: PPUSH
58347: CALL_OW 69
58351: ST_TO_ADDR
// if not tmp then
58352: LD_VAR 0 2
58356: NOT
58357: IFFALSE 58361
// continue ;
58359: GO 58156
// HackLink ( i , tmp ) ;
58361: LD_VAR 0 1
58365: PPUSH
58366: LD_VAR 0 2
58370: PPUSH
58371: CALL 58518 0 2
// end ;
58375: GO 58156
58377: POP
58378: POP
// end ;
58379: PPOPN 2
58381: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58382: LD_INT 0
58384: PPUSH
58385: PPUSH
58386: PPUSH
// if not hack in hackTanks then
58387: LD_VAR 0 1
58391: PUSH
58392: LD_EXP 50
58396: IN
58397: NOT
58398: IFFALSE 58402
// exit ;
58400: GO 58513
// index := GetElementIndex ( hackTanks , hack ) ;
58402: LD_ADDR_VAR 0 4
58406: PUSH
58407: LD_EXP 50
58411: PPUSH
58412: LD_VAR 0 1
58416: PPUSH
58417: CALL 17105 0 2
58421: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58422: LD_EXP 51
58426: PUSH
58427: LD_VAR 0 4
58431: ARRAY
58432: IFFALSE 58513
// begin for i in hackTanksCaptured [ index ] do
58434: LD_ADDR_VAR 0 3
58438: PUSH
58439: LD_EXP 51
58443: PUSH
58444: LD_VAR 0 4
58448: ARRAY
58449: PUSH
58450: FOR_IN
58451: IFFALSE 58477
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58453: LD_VAR 0 3
58457: PUSH
58458: LD_INT 1
58460: ARRAY
58461: PPUSH
58462: LD_VAR 0 3
58466: PUSH
58467: LD_INT 2
58469: ARRAY
58470: PPUSH
58471: CALL_OW 235
58475: GO 58450
58477: POP
58478: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58479: LD_ADDR_EXP 51
58483: PUSH
58484: LD_EXP 51
58488: PPUSH
58489: LD_VAR 0 4
58493: PPUSH
58494: EMPTY
58495: PPUSH
58496: CALL_OW 1
58500: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58501: LD_VAR 0 1
58505: PPUSH
58506: LD_INT 0
58508: PPUSH
58509: CALL_OW 505
// end ; end ;
58513: LD_VAR 0 2
58517: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58518: LD_INT 0
58520: PPUSH
58521: PPUSH
58522: PPUSH
// if not hack in hackTanks or not vehicles then
58523: LD_VAR 0 1
58527: PUSH
58528: LD_EXP 50
58532: IN
58533: NOT
58534: IFTRUE 58543
58536: PUSH
58537: LD_VAR 0 2
58541: NOT
58542: OR
58543: IFFALSE 58547
// exit ;
58545: GO 58822
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58547: LD_ADDR_VAR 0 2
58551: PUSH
58552: LD_VAR 0 1
58556: PPUSH
58557: LD_VAR 0 2
58561: PPUSH
58562: LD_INT 1
58564: PPUSH
58565: LD_INT 1
58567: PPUSH
58568: CALL 17757 0 4
58572: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58573: LD_ADDR_VAR 0 5
58577: PUSH
58578: LD_EXP 50
58582: PPUSH
58583: LD_VAR 0 1
58587: PPUSH
58588: CALL 17105 0 2
58592: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58593: LD_EXP 51
58597: PUSH
58598: LD_VAR 0 5
58602: ARRAY
58603: PUSH
58604: LD_EXP 52
58608: LESS
58609: IFFALSE 58798
// begin for i := 1 to vehicles do
58611: LD_ADDR_VAR 0 4
58615: PUSH
58616: DOUBLE
58617: LD_INT 1
58619: DEC
58620: ST_TO_ADDR
58621: LD_VAR 0 2
58625: PUSH
58626: FOR_TO
58627: IFFALSE 58796
// begin if hackTanksCaptured [ index ] = hackLimit then
58629: LD_EXP 51
58633: PUSH
58634: LD_VAR 0 5
58638: ARRAY
58639: PUSH
58640: LD_EXP 52
58644: EQUAL
58645: IFFALSE 58649
// break ;
58647: GO 58796
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58649: LD_ADDR_EXP 54
58653: PUSH
58654: LD_EXP 54
58658: PPUSH
58659: LD_VAR 0 5
58663: PPUSH
58664: LD_EXP 54
58668: PUSH
58669: LD_VAR 0 5
58673: ARRAY
58674: PUSH
58675: LD_INT 1
58677: PLUS
58678: PPUSH
58679: CALL_OW 1
58683: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58684: LD_ADDR_EXP 51
58688: PUSH
58689: LD_EXP 51
58693: PPUSH
58694: LD_VAR 0 5
58698: PUSH
58699: LD_EXP 51
58703: PUSH
58704: LD_VAR 0 5
58708: ARRAY
58709: PUSH
58710: LD_INT 1
58712: PLUS
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PPUSH
58718: LD_VAR 0 2
58722: PUSH
58723: LD_VAR 0 4
58727: ARRAY
58728: PUSH
58729: LD_VAR 0 2
58733: PUSH
58734: LD_VAR 0 4
58738: ARRAY
58739: PPUSH
58740: CALL_OW 255
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PPUSH
58749: CALL 17322 0 3
58753: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58754: LD_VAR 0 2
58758: PUSH
58759: LD_VAR 0 4
58763: ARRAY
58764: PPUSH
58765: LD_VAR 0 1
58769: PPUSH
58770: CALL_OW 255
58774: PPUSH
58775: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58779: LD_VAR 0 2
58783: PUSH
58784: LD_VAR 0 4
58788: ARRAY
58789: PPUSH
58790: CALL_OW 141
// end ;
58794: GO 58626
58796: POP
58797: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58798: LD_VAR 0 1
58802: PPUSH
58803: LD_EXP 51
58807: PUSH
58808: LD_VAR 0 5
58812: ARRAY
58813: PUSH
58814: LD_INT 0
58816: PLUS
58817: PPUSH
58818: CALL_OW 505
// end ;
58822: LD_VAR 0 3
58826: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58827: LD_INT 0
58829: PPUSH
58830: PPUSH
58831: PPUSH
58832: PPUSH
// if not hack in hackTanks then
58833: LD_VAR 0 1
58837: PUSH
58838: LD_EXP 50
58842: IN
58843: NOT
58844: IFFALSE 58848
// exit ;
58846: GO 59092
// index := GetElementIndex ( hackTanks , hack ) ;
58848: LD_ADDR_VAR 0 4
58852: PUSH
58853: LD_EXP 50
58857: PPUSH
58858: LD_VAR 0 1
58862: PPUSH
58863: CALL 17105 0 2
58867: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58868: LD_ADDR_VAR 0 3
58872: PUSH
58873: DOUBLE
58874: LD_EXP 51
58878: PUSH
58879: LD_VAR 0 4
58883: ARRAY
58884: INC
58885: ST_TO_ADDR
58886: LD_INT 1
58888: PUSH
58889: FOR_DOWNTO
58890: IFFALSE 59066
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58892: LD_ADDR_VAR 0 5
58896: PUSH
58897: LD_EXP 51
58901: PUSH
58902: LD_VAR 0 4
58906: ARRAY
58907: PUSH
58908: LD_VAR 0 3
58912: ARRAY
58913: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58914: LD_VAR 0 5
58918: PUSH
58919: LD_INT 1
58921: ARRAY
58922: PPUSH
58923: CALL_OW 302
58927: NOT
58928: IFTRUE 58956
58930: PUSH
58931: LD_VAR 0 5
58935: PUSH
58936: LD_INT 1
58938: ARRAY
58939: PPUSH
58940: CALL_OW 255
58944: PUSH
58945: LD_VAR 0 1
58949: PPUSH
58950: CALL_OW 255
58954: NONEQUAL
58955: OR
58956: IFFALSE 59064
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58958: LD_VAR 0 5
58962: PUSH
58963: LD_INT 1
58965: ARRAY
58966: PPUSH
58967: CALL_OW 305
58971: IFFALSE 58999
58973: PUSH
58974: LD_VAR 0 5
58978: PUSH
58979: LD_INT 1
58981: ARRAY
58982: PPUSH
58983: CALL_OW 255
58987: PUSH
58988: LD_VAR 0 1
58992: PPUSH
58993: CALL_OW 255
58997: EQUAL
58998: AND
58999: IFFALSE 59023
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59001: LD_VAR 0 5
59005: PUSH
59006: LD_INT 1
59008: ARRAY
59009: PPUSH
59010: LD_VAR 0 5
59014: PUSH
59015: LD_INT 2
59017: ARRAY
59018: PPUSH
59019: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59023: LD_ADDR_EXP 51
59027: PUSH
59028: LD_EXP 51
59032: PPUSH
59033: LD_VAR 0 4
59037: PPUSH
59038: LD_EXP 51
59042: PUSH
59043: LD_VAR 0 4
59047: ARRAY
59048: PPUSH
59049: LD_VAR 0 3
59053: PPUSH
59054: CALL_OW 3
59058: PPUSH
59059: CALL_OW 1
59063: ST_TO_ADDR
// end ; end ;
59064: GO 58889
59066: POP
59067: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59068: LD_VAR 0 1
59072: PPUSH
59073: LD_EXP 51
59077: PUSH
59078: LD_VAR 0 4
59082: ARRAY
59083: PUSH
59084: LD_INT 0
59086: PLUS
59087: PPUSH
59088: CALL_OW 505
// end ;
59092: LD_VAR 0 2
59096: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59097: LD_INT 0
59099: PPUSH
59100: PPUSH
59101: PPUSH
59102: PPUSH
// if not hack in hackTanks then
59103: LD_VAR 0 1
59107: PUSH
59108: LD_EXP 50
59112: IN
59113: NOT
59114: IFFALSE 59118
// exit ;
59116: GO 59203
// index := GetElementIndex ( hackTanks , hack ) ;
59118: LD_ADDR_VAR 0 5
59122: PUSH
59123: LD_EXP 50
59127: PPUSH
59128: LD_VAR 0 1
59132: PPUSH
59133: CALL 17105 0 2
59137: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59138: LD_ADDR_VAR 0 4
59142: PUSH
59143: DOUBLE
59144: LD_INT 1
59146: DEC
59147: ST_TO_ADDR
59148: LD_EXP 51
59152: PUSH
59153: LD_VAR 0 5
59157: ARRAY
59158: PUSH
59159: FOR_TO
59160: IFFALSE 59201
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59162: LD_EXP 51
59166: PUSH
59167: LD_VAR 0 5
59171: ARRAY
59172: PUSH
59173: LD_VAR 0 4
59177: ARRAY
59178: PUSH
59179: LD_INT 1
59181: ARRAY
59182: PUSH
59183: LD_VAR 0 2
59187: EQUAL
59188: IFFALSE 59199
// KillUnit ( vehicle ) ;
59190: LD_VAR 0 2
59194: PPUSH
59195: CALL_OW 66
59199: GO 59159
59201: POP
59202: POP
// end ;
59203: LD_VAR 0 3
59207: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
59208: LD_EXP 55
59212: NOT
59213: IFFALSE 59248
59215: GO 59217
59217: DISABLE
// begin initMiner := true ;
59218: LD_ADDR_EXP 55
59222: PUSH
59223: LD_INT 1
59225: ST_TO_ADDR
// minersList := [ ] ;
59226: LD_ADDR_EXP 56
59230: PUSH
59231: EMPTY
59232: ST_TO_ADDR
// minerMinesList := [ ] ;
59233: LD_ADDR_EXP 57
59237: PUSH
59238: EMPTY
59239: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
59240: LD_ADDR_EXP 58
59244: PUSH
59245: LD_INT 5
59247: ST_TO_ADDR
// end ;
59248: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
59249: LD_EXP 55
59253: IFFALSE 59271
59255: PUSH
59256: LD_INT 34
59258: PUSH
59259: LD_INT 81
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PPUSH
59266: CALL_OW 69
59270: AND
59271: IFFALSE 59734
59273: GO 59275
59275: DISABLE
59276: LD_INT 0
59278: PPUSH
59279: PPUSH
59280: PPUSH
59281: PPUSH
// begin enable ;
59282: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59283: LD_ADDR_VAR 0 1
59287: PUSH
59288: LD_INT 34
59290: PUSH
59291: LD_INT 81
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PPUSH
59298: CALL_OW 69
59302: PUSH
59303: FOR_IN
59304: IFFALSE 59376
// begin if not i in minersList then
59306: LD_VAR 0 1
59310: PUSH
59311: LD_EXP 56
59315: IN
59316: NOT
59317: IFFALSE 59374
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59319: LD_ADDR_EXP 56
59323: PUSH
59324: LD_EXP 56
59328: PPUSH
59329: LD_EXP 56
59333: PUSH
59334: LD_INT 1
59336: PLUS
59337: PPUSH
59338: LD_VAR 0 1
59342: PPUSH
59343: CALL_OW 1
59347: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59348: LD_ADDR_EXP 57
59352: PUSH
59353: LD_EXP 57
59357: PPUSH
59358: LD_EXP 57
59362: PUSH
59363: LD_INT 1
59365: PLUS
59366: PPUSH
59367: EMPTY
59368: PPUSH
59369: CALL_OW 1
59373: ST_TO_ADDR
// end end ;
59374: GO 59303
59376: POP
59377: POP
// for i := minerMinesList downto 1 do
59378: LD_ADDR_VAR 0 1
59382: PUSH
59383: DOUBLE
59384: LD_EXP 57
59388: INC
59389: ST_TO_ADDR
59390: LD_INT 1
59392: PUSH
59393: FOR_DOWNTO
59394: IFFALSE 59732
// begin if IsLive ( minersList [ i ] ) then
59396: LD_EXP 56
59400: PUSH
59401: LD_VAR 0 1
59405: ARRAY
59406: PPUSH
59407: CALL_OW 300
59411: IFFALSE 59439
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59413: LD_EXP 56
59417: PUSH
59418: LD_VAR 0 1
59422: ARRAY
59423: PPUSH
59424: LD_EXP 57
59428: PUSH
59429: LD_VAR 0 1
59433: ARRAY
59434: PPUSH
59435: CALL_OW 505
// if not minerMinesList [ i ] then
59439: LD_EXP 57
59443: PUSH
59444: LD_VAR 0 1
59448: ARRAY
59449: NOT
59450: IFFALSE 59454
// continue ;
59452: GO 59393
// for j := minerMinesList [ i ] downto 1 do
59454: LD_ADDR_VAR 0 2
59458: PUSH
59459: DOUBLE
59460: LD_EXP 57
59464: PUSH
59465: LD_VAR 0 1
59469: ARRAY
59470: INC
59471: ST_TO_ADDR
59472: LD_INT 1
59474: PUSH
59475: FOR_DOWNTO
59476: IFFALSE 59728
// begin side := GetSide ( minersList [ i ] ) ;
59478: LD_ADDR_VAR 0 3
59482: PUSH
59483: LD_EXP 56
59487: PUSH
59488: LD_VAR 0 1
59492: ARRAY
59493: PPUSH
59494: CALL_OW 255
59498: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59499: LD_ADDR_VAR 0 4
59503: PUSH
59504: LD_EXP 57
59508: PUSH
59509: LD_VAR 0 1
59513: ARRAY
59514: PUSH
59515: LD_VAR 0 2
59519: ARRAY
59520: PUSH
59521: LD_INT 1
59523: ARRAY
59524: PPUSH
59525: LD_EXP 57
59529: PUSH
59530: LD_VAR 0 1
59534: ARRAY
59535: PUSH
59536: LD_VAR 0 2
59540: ARRAY
59541: PUSH
59542: LD_INT 2
59544: ARRAY
59545: PPUSH
59546: CALL_OW 428
59550: ST_TO_ADDR
// if not tmp then
59551: LD_VAR 0 4
59555: NOT
59556: IFFALSE 59560
// continue ;
59558: GO 59475
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59560: LD_VAR 0 4
59564: PUSH
59565: LD_INT 81
59567: PUSH
59568: LD_VAR 0 3
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PPUSH
59577: CALL_OW 69
59581: IN
59582: IFFALSE 59632
59584: PUSH
59585: LD_EXP 57
59589: PUSH
59590: LD_VAR 0 1
59594: ARRAY
59595: PUSH
59596: LD_VAR 0 2
59600: ARRAY
59601: PUSH
59602: LD_INT 1
59604: ARRAY
59605: PPUSH
59606: LD_EXP 57
59610: PUSH
59611: LD_VAR 0 1
59615: ARRAY
59616: PUSH
59617: LD_VAR 0 2
59621: ARRAY
59622: PUSH
59623: LD_INT 2
59625: ARRAY
59626: PPUSH
59627: CALL_OW 458
59631: AND
59632: IFFALSE 59726
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59634: LD_EXP 57
59638: PUSH
59639: LD_VAR 0 1
59643: ARRAY
59644: PUSH
59645: LD_VAR 0 2
59649: ARRAY
59650: PUSH
59651: LD_INT 1
59653: ARRAY
59654: PPUSH
59655: LD_EXP 57
59659: PUSH
59660: LD_VAR 0 1
59664: ARRAY
59665: PUSH
59666: LD_VAR 0 2
59670: ARRAY
59671: PUSH
59672: LD_INT 2
59674: ARRAY
59675: PPUSH
59676: LD_VAR 0 3
59680: PPUSH
59681: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59685: LD_ADDR_EXP 57
59689: PUSH
59690: LD_EXP 57
59694: PPUSH
59695: LD_VAR 0 1
59699: PPUSH
59700: LD_EXP 57
59704: PUSH
59705: LD_VAR 0 1
59709: ARRAY
59710: PPUSH
59711: LD_VAR 0 2
59715: PPUSH
59716: CALL_OW 3
59720: PPUSH
59721: CALL_OW 1
59725: ST_TO_ADDR
// end ; end ;
59726: GO 59475
59728: POP
59729: POP
// end ;
59730: GO 59393
59732: POP
59733: POP
// end ;
59734: PPOPN 4
59736: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
59737: LD_INT 0
59739: PPUSH
59740: PPUSH
// result := false ;
59741: LD_ADDR_VAR 0 4
59745: PUSH
59746: LD_INT 0
59748: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59749: LD_VAR 0 1
59753: PPUSH
59754: CALL_OW 264
59758: PUSH
59759: LD_INT 81
59761: EQUAL
59762: NOT
59763: IFFALSE 59767
// exit ;
59765: GO 60011
// index := GetElementIndex ( minersList , unit ) ;
59767: LD_ADDR_VAR 0 5
59771: PUSH
59772: LD_EXP 56
59776: PPUSH
59777: LD_VAR 0 1
59781: PPUSH
59782: CALL 17105 0 2
59786: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59787: LD_EXP 57
59791: PUSH
59792: LD_VAR 0 5
59796: ARRAY
59797: PUSH
59798: LD_EXP 58
59802: GREATEREQUAL
59803: IFFALSE 59807
// exit ;
59805: GO 60011
// ComMoveXY ( unit , x , y ) ;
59807: LD_VAR 0 1
59811: PPUSH
59812: LD_VAR 0 2
59816: PPUSH
59817: LD_VAR 0 3
59821: PPUSH
59822: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59826: LD_INT 35
59828: PPUSH
59829: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59833: LD_VAR 0 1
59837: PPUSH
59838: LD_VAR 0 2
59842: PPUSH
59843: LD_VAR 0 3
59847: PPUSH
59848: CALL 49151 0 3
59852: NOT
59853: IFFALSE 59866
59855: PUSH
59856: LD_VAR 0 1
59860: PPUSH
59861: CALL_OW 314
59865: AND
59866: IFFALSE 59870
// exit ;
59868: GO 60011
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59870: LD_VAR 0 2
59874: PPUSH
59875: LD_VAR 0 3
59879: PPUSH
59880: CALL_OW 428
59884: PUSH
59885: LD_VAR 0 1
59889: EQUAL
59890: IFFALSE 59904
59892: PUSH
59893: LD_VAR 0 1
59897: PPUSH
59898: CALL_OW 314
59902: NOT
59903: AND
59904: IFFALSE 59826
// PlaySoundXY ( x , y , PlantMine ) ;
59906: LD_VAR 0 2
59910: PPUSH
59911: LD_VAR 0 3
59915: PPUSH
59916: LD_STRING PlantMine
59918: PPUSH
59919: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59923: LD_VAR 0 2
59927: PPUSH
59928: LD_VAR 0 3
59932: PPUSH
59933: LD_VAR 0 1
59937: PPUSH
59938: CALL_OW 255
59942: PPUSH
59943: LD_INT 0
59945: PPUSH
59946: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59950: LD_ADDR_EXP 57
59954: PUSH
59955: LD_EXP 57
59959: PPUSH
59960: LD_VAR 0 5
59964: PUSH
59965: LD_EXP 57
59969: PUSH
59970: LD_VAR 0 5
59974: ARRAY
59975: PUSH
59976: LD_INT 1
59978: PLUS
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PPUSH
59984: LD_VAR 0 2
59988: PUSH
59989: LD_VAR 0 3
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PPUSH
59998: CALL 17322 0 3
60002: ST_TO_ADDR
// result := true ;
60003: LD_ADDR_VAR 0 4
60007: PUSH
60008: LD_INT 1
60010: ST_TO_ADDR
// end ;
60011: LD_VAR 0 4
60015: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60016: LD_INT 0
60018: PPUSH
60019: PPUSH
60020: PPUSH
// if not unit in minersList then
60021: LD_VAR 0 1
60025: PUSH
60026: LD_EXP 56
60030: IN
60031: NOT
60032: IFFALSE 60036
// exit ;
60034: GO 60430
// index := GetElementIndex ( minersList , unit ) ;
60036: LD_ADDR_VAR 0 6
60040: PUSH
60041: LD_EXP 56
60045: PPUSH
60046: LD_VAR 0 1
60050: PPUSH
60051: CALL 17105 0 2
60055: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
60056: LD_ADDR_VAR 0 5
60060: PUSH
60061: DOUBLE
60062: LD_EXP 57
60066: PUSH
60067: LD_VAR 0 6
60071: ARRAY
60072: INC
60073: ST_TO_ADDR
60074: LD_INT 1
60076: PUSH
60077: FOR_DOWNTO
60078: IFFALSE 60241
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
60080: LD_EXP 57
60084: PUSH
60085: LD_VAR 0 6
60089: ARRAY
60090: PUSH
60091: LD_VAR 0 5
60095: ARRAY
60096: PUSH
60097: LD_INT 1
60099: ARRAY
60100: PUSH
60101: LD_VAR 0 2
60105: EQUAL
60106: IFFALSE 60136
60108: PUSH
60109: LD_EXP 57
60113: PUSH
60114: LD_VAR 0 6
60118: ARRAY
60119: PUSH
60120: LD_VAR 0 5
60124: ARRAY
60125: PUSH
60126: LD_INT 2
60128: ARRAY
60129: PUSH
60130: LD_VAR 0 3
60134: EQUAL
60135: AND
60136: IFFALSE 60239
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60138: LD_EXP 57
60142: PUSH
60143: LD_VAR 0 6
60147: ARRAY
60148: PUSH
60149: LD_VAR 0 5
60153: ARRAY
60154: PUSH
60155: LD_INT 1
60157: ARRAY
60158: PPUSH
60159: LD_EXP 57
60163: PUSH
60164: LD_VAR 0 6
60168: ARRAY
60169: PUSH
60170: LD_VAR 0 5
60174: ARRAY
60175: PUSH
60176: LD_INT 2
60178: ARRAY
60179: PPUSH
60180: LD_VAR 0 1
60184: PPUSH
60185: CALL_OW 255
60189: PPUSH
60190: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60194: LD_ADDR_EXP 57
60198: PUSH
60199: LD_EXP 57
60203: PPUSH
60204: LD_VAR 0 6
60208: PPUSH
60209: LD_EXP 57
60213: PUSH
60214: LD_VAR 0 6
60218: ARRAY
60219: PPUSH
60220: LD_VAR 0 5
60224: PPUSH
60225: CALL_OW 3
60229: PPUSH
60230: CALL_OW 1
60234: ST_TO_ADDR
// exit ;
60235: POP
60236: POP
60237: GO 60430
// end ; end ;
60239: GO 60077
60241: POP
60242: POP
// for i := minerMinesList [ index ] downto 1 do
60243: LD_ADDR_VAR 0 5
60247: PUSH
60248: DOUBLE
60249: LD_EXP 57
60253: PUSH
60254: LD_VAR 0 6
60258: ARRAY
60259: INC
60260: ST_TO_ADDR
60261: LD_INT 1
60263: PUSH
60264: FOR_DOWNTO
60265: IFFALSE 60428
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60267: LD_EXP 57
60271: PUSH
60272: LD_VAR 0 6
60276: ARRAY
60277: PUSH
60278: LD_VAR 0 5
60282: ARRAY
60283: PUSH
60284: LD_INT 1
60286: ARRAY
60287: PPUSH
60288: LD_EXP 57
60292: PUSH
60293: LD_VAR 0 6
60297: ARRAY
60298: PUSH
60299: LD_VAR 0 5
60303: ARRAY
60304: PUSH
60305: LD_INT 2
60307: ARRAY
60308: PPUSH
60309: LD_VAR 0 2
60313: PPUSH
60314: LD_VAR 0 3
60318: PPUSH
60319: CALL_OW 298
60323: PUSH
60324: LD_INT 6
60326: LESS
60327: IFFALSE 60426
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60329: LD_EXP 57
60333: PUSH
60334: LD_VAR 0 6
60338: ARRAY
60339: PUSH
60340: LD_VAR 0 5
60344: ARRAY
60345: PUSH
60346: LD_INT 1
60348: ARRAY
60349: PPUSH
60350: LD_EXP 57
60354: PUSH
60355: LD_VAR 0 6
60359: ARRAY
60360: PUSH
60361: LD_VAR 0 5
60365: ARRAY
60366: PUSH
60367: LD_INT 2
60369: ARRAY
60370: PPUSH
60371: LD_VAR 0 1
60375: PPUSH
60376: CALL_OW 255
60380: PPUSH
60381: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60385: LD_ADDR_EXP 57
60389: PUSH
60390: LD_EXP 57
60394: PPUSH
60395: LD_VAR 0 6
60399: PPUSH
60400: LD_EXP 57
60404: PUSH
60405: LD_VAR 0 6
60409: ARRAY
60410: PPUSH
60411: LD_VAR 0 5
60415: PPUSH
60416: CALL_OW 3
60420: PPUSH
60421: CALL_OW 1
60425: ST_TO_ADDR
// end ; end ;
60426: GO 60264
60428: POP
60429: POP
// end ;
60430: LD_VAR 0 4
60434: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60435: LD_INT 0
60437: PPUSH
60438: PPUSH
60439: PPUSH
60440: PPUSH
60441: PPUSH
60442: PPUSH
60443: PPUSH
60444: PPUSH
60445: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60446: LD_VAR 0 1
60450: PPUSH
60451: CALL_OW 264
60455: PUSH
60456: LD_INT 81
60458: EQUAL
60459: NOT
60460: IFTRUE 60475
60462: PUSH
60463: LD_VAR 0 1
60467: PUSH
60468: LD_EXP 56
60472: IN
60473: NOT
60474: OR
60475: IFFALSE 60479
// exit ;
60477: GO 60805
// index := GetElementIndex ( minersList , unit ) ;
60479: LD_ADDR_VAR 0 6
60483: PUSH
60484: LD_EXP 56
60488: PPUSH
60489: LD_VAR 0 1
60493: PPUSH
60494: CALL 17105 0 2
60498: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60499: LD_ADDR_VAR 0 8
60503: PUSH
60504: LD_EXP 58
60508: PUSH
60509: LD_EXP 57
60513: PUSH
60514: LD_VAR 0 6
60518: ARRAY
60519: MINUS
60520: ST_TO_ADDR
// if not minesFreeAmount then
60521: LD_VAR 0 8
60525: NOT
60526: IFFALSE 60530
// exit ;
60528: GO 60805
// tmp := [ ] ;
60530: LD_ADDR_VAR 0 7
60534: PUSH
60535: EMPTY
60536: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60537: LD_ADDR_VAR 0 5
60541: PUSH
60542: DOUBLE
60543: LD_INT 1
60545: DEC
60546: ST_TO_ADDR
60547: LD_VAR 0 8
60551: PUSH
60552: FOR_TO
60553: IFFALSE 60752
// begin _d := rand ( 0 , 5 ) ;
60555: LD_ADDR_VAR 0 11
60559: PUSH
60560: LD_INT 0
60562: PPUSH
60563: LD_INT 5
60565: PPUSH
60566: CALL_OW 12
60570: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60571: LD_ADDR_VAR 0 12
60575: PUSH
60576: LD_INT 2
60578: PPUSH
60579: LD_INT 6
60581: PPUSH
60582: CALL_OW 12
60586: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60587: LD_ADDR_VAR 0 9
60591: PUSH
60592: LD_VAR 0 2
60596: PPUSH
60597: LD_VAR 0 11
60601: PPUSH
60602: LD_VAR 0 12
60606: PPUSH
60607: CALL_OW 272
60611: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60612: LD_ADDR_VAR 0 10
60616: PUSH
60617: LD_VAR 0 3
60621: PPUSH
60622: LD_VAR 0 11
60626: PPUSH
60627: LD_VAR 0 12
60631: PPUSH
60632: CALL_OW 273
60636: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60637: LD_VAR 0 9
60641: PPUSH
60642: LD_VAR 0 10
60646: PPUSH
60647: CALL_OW 488
60651: IFFALSE 60675
60653: PUSH
60654: LD_VAR 0 9
60658: PUSH
60659: LD_VAR 0 10
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_VAR 0 7
60672: IN
60673: NOT
60674: AND
60675: IFFALSE 60694
60677: PUSH
60678: LD_VAR 0 9
60682: PPUSH
60683: LD_VAR 0 10
60687: PPUSH
60688: CALL_OW 458
60692: NOT
60693: AND
60694: IFFALSE 60736
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60696: LD_ADDR_VAR 0 7
60700: PUSH
60701: LD_VAR 0 7
60705: PPUSH
60706: LD_VAR 0 7
60710: PUSH
60711: LD_INT 1
60713: PLUS
60714: PPUSH
60715: LD_VAR 0 9
60719: PUSH
60720: LD_VAR 0 10
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PPUSH
60729: CALL_OW 1
60733: ST_TO_ADDR
60734: GO 60750
// i := i - 1 ;
60736: LD_ADDR_VAR 0 5
60740: PUSH
60741: LD_VAR 0 5
60745: PUSH
60746: LD_INT 1
60748: MINUS
60749: ST_TO_ADDR
// end ;
60750: GO 60552
60752: POP
60753: POP
// for i in tmp do
60754: LD_ADDR_VAR 0 5
60758: PUSH
60759: LD_VAR 0 7
60763: PUSH
60764: FOR_IN
60765: IFFALSE 60803
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60767: LD_VAR 0 1
60771: PPUSH
60772: LD_VAR 0 5
60776: PUSH
60777: LD_INT 1
60779: ARRAY
60780: PPUSH
60781: LD_VAR 0 5
60785: PUSH
60786: LD_INT 2
60788: ARRAY
60789: PPUSH
60790: CALL 59737 0 3
60794: NOT
60795: IFFALSE 60801
// exit ;
60797: POP
60798: POP
60799: GO 60805
60801: GO 60764
60803: POP
60804: POP
// end ;
60805: LD_VAR 0 4
60809: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60810: LD_INT 0
60812: PPUSH
60813: PPUSH
60814: PPUSH
60815: PPUSH
60816: PPUSH
60817: PPUSH
60818: PPUSH
60819: PPUSH
60820: PPUSH
// if GetClass ( unit ) <> class_sniper then
60821: LD_VAR 0 1
60825: PPUSH
60826: CALL_OW 257
60830: PUSH
60831: LD_INT 5
60833: NONEQUAL
60834: IFFALSE 60838
// exit ;
60836: GO 61308
// dist := 8 ;
60838: LD_ADDR_VAR 0 5
60842: PUSH
60843: LD_INT 8
60845: ST_TO_ADDR
// viewRange := 12 ;
60846: LD_ADDR_VAR 0 8
60850: PUSH
60851: LD_INT 12
60853: ST_TO_ADDR
// side := GetSide ( unit ) ;
60854: LD_ADDR_VAR 0 6
60858: PUSH
60859: LD_VAR 0 1
60863: PPUSH
60864: CALL_OW 255
60868: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60869: LD_INT 61
60871: PPUSH
60872: LD_VAR 0 6
60876: PPUSH
60877: CALL_OW 321
60881: PUSH
60882: LD_INT 2
60884: EQUAL
60885: IFFALSE 60895
// viewRange := 16 ;
60887: LD_ADDR_VAR 0 8
60891: PUSH
60892: LD_INT 16
60894: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60895: LD_VAR 0 1
60899: PPUSH
60900: LD_VAR 0 2
60904: PPUSH
60905: LD_VAR 0 3
60909: PPUSH
60910: CALL_OW 297
60914: PUSH
60915: LD_VAR 0 5
60919: GREATER
60920: IFFALSE 60999
// begin ComMoveXY ( unit , x , y ) ;
60922: LD_VAR 0 1
60926: PPUSH
60927: LD_VAR 0 2
60931: PPUSH
60932: LD_VAR 0 3
60936: PPUSH
60937: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60941: LD_INT 35
60943: PPUSH
60944: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60948: LD_VAR 0 1
60952: PPUSH
60953: LD_VAR 0 2
60957: PPUSH
60958: LD_VAR 0 3
60962: PPUSH
60963: CALL 49151 0 3
60967: NOT
60968: IFFALSE 60972
// exit ;
60970: GO 61308
// until GetDistUnitXY ( unit , x , y ) < dist ;
60972: LD_VAR 0 1
60976: PPUSH
60977: LD_VAR 0 2
60981: PPUSH
60982: LD_VAR 0 3
60986: PPUSH
60987: CALL_OW 297
60991: PUSH
60992: LD_VAR 0 5
60996: LESS
60997: IFFALSE 60941
// end ; ComTurnXY ( unit , x , y ) ;
60999: LD_VAR 0 1
61003: PPUSH
61004: LD_VAR 0 2
61008: PPUSH
61009: LD_VAR 0 3
61013: PPUSH
61014: CALL_OW 118
// repeat if Multiplayer then
61018: LD_OWVAR 4
61022: IFFALSE 61033
// wait ( 35 ) else
61024: LD_INT 35
61026: PPUSH
61027: CALL_OW 67
61031: GO 61040
// wait ( 5 ) ;
61033: LD_INT 5
61035: PPUSH
61036: CALL_OW 67
// _d := GetDir ( unit ) ;
61040: LD_ADDR_VAR 0 11
61044: PUSH
61045: LD_VAR 0 1
61049: PPUSH
61050: CALL_OW 254
61054: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
61055: LD_ADDR_VAR 0 7
61059: PUSH
61060: LD_VAR 0 1
61064: PPUSH
61065: CALL_OW 250
61069: PPUSH
61070: LD_VAR 0 1
61074: PPUSH
61075: CALL_OW 251
61079: PPUSH
61080: LD_VAR 0 2
61084: PPUSH
61085: LD_VAR 0 3
61089: PPUSH
61090: CALL 51787 0 4
61094: ST_TO_ADDR
// until dir = _d ;
61095: LD_VAR 0 7
61099: PUSH
61100: LD_VAR 0 11
61104: EQUAL
61105: IFFALSE 61018
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
61107: LD_ADDR_VAR 0 9
61111: PUSH
61112: LD_VAR 0 1
61116: PPUSH
61117: CALL_OW 250
61121: PPUSH
61122: LD_VAR 0 7
61126: PPUSH
61127: LD_VAR 0 5
61131: PPUSH
61132: CALL_OW 272
61136: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
61137: LD_ADDR_VAR 0 10
61141: PUSH
61142: LD_VAR 0 1
61146: PPUSH
61147: CALL_OW 251
61151: PPUSH
61152: LD_VAR 0 7
61156: PPUSH
61157: LD_VAR 0 5
61161: PPUSH
61162: CALL_OW 273
61166: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61167: LD_VAR 0 9
61171: PPUSH
61172: LD_VAR 0 10
61176: PPUSH
61177: CALL_OW 488
61181: NOT
61182: IFFALSE 61186
// exit ;
61184: GO 61308
// ComAnimCustom ( unit , 1 ) ;
61186: LD_VAR 0 1
61190: PPUSH
61191: LD_INT 1
61193: PPUSH
61194: CALL_OW 592
// p := 0 ;
61198: LD_ADDR_VAR 0 12
61202: PUSH
61203: LD_INT 0
61205: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61206: LD_VAR 0 9
61210: PPUSH
61211: LD_VAR 0 10
61215: PPUSH
61216: LD_VAR 0 6
61220: PPUSH
61221: LD_VAR 0 8
61225: PPUSH
61226: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
61230: LD_INT 35
61232: PPUSH
61233: CALL_OW 67
// p := Inc ( p ) ;
61237: LD_ADDR_VAR 0 12
61241: PUSH
61242: LD_VAR 0 12
61246: PPUSH
61247: CALL 51743 0 1
61251: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
61252: LD_VAR 0 12
61256: PUSH
61257: LD_INT 3
61259: EQUAL
61260: IFTRUE 61274
61262: PUSH
61263: LD_VAR 0 1
61267: PPUSH
61268: CALL_OW 302
61272: NOT
61273: OR
61274: IFTRUE 61287
61276: PUSH
61277: LD_VAR 0 1
61281: PPUSH
61282: CALL_OW 301
61286: OR
61287: IFFALSE 61230
// RemoveSeeing ( _x , _y , side ) ;
61289: LD_VAR 0 9
61293: PPUSH
61294: LD_VAR 0 10
61298: PPUSH
61299: LD_VAR 0 6
61303: PPUSH
61304: CALL_OW 331
// end ; end_of_file
61308: LD_VAR 0 4
61312: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
61313: PPOPN 6
61315: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
61316: LD_EXP 3
61320: PUSH
61321: LD_INT 4
61323: EQUAL
61324: IFFALSE 61360
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61326: LD_STRING setGameDifficulty(
61328: PUSH
61329: LD_OWVAR 67
61333: STR
61334: PUSH
61335: LD_STRING )
61337: STR
61338: PPUSH
61339: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
61343: LD_STRING displayDifficulty(
61345: PUSH
61346: LD_OWVAR 67
61350: STR
61351: PUSH
61352: LD_STRING )
61354: STR
61355: PPUSH
61356: CALL_OW 559
// end ; SOS_MapStart ( ) ;
61360: CALL 61389 0 0
// end ; end_of_file
61364: PPOPN 1
61366: END
// every 0 0$1 do
61367: GO 61369
61369: DISABLE
// begin enable ;
61370: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61371: LD_STRING updateTimer(
61373: PUSH
61374: LD_OWVAR 1
61378: STR
61379: PUSH
61380: LD_STRING );
61382: STR
61383: PPUSH
61384: CALL_OW 559
// end ;
61388: END
// export function SOS_MapStart ( ) ; begin
61389: LD_INT 0
61391: PPUSH
// UpdateFactoryWaypoints ( ) ;
61392: CALL 62323 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61396: CALL 62575 0 0
// ParseMultiDataToLua ( ) ;
61400: CALL 62722 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
61404: LD_STRING setSpecLogoNumber(
61406: PUSH
61407: LD_INT 2
61409: STR
61410: PUSH
61411: LD_STRING ,
61413: STR
61414: PUSH
61415: LD_INT 1
61417: STR
61418: PUSH
61419: LD_STRING )
61421: STR
61422: PPUSH
61423: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
61427: LD_STRING setSpecLogoNumber(
61429: PUSH
61430: LD_INT 3
61432: STR
61433: PUSH
61434: LD_STRING ,
61436: STR
61437: PUSH
61438: LD_INT 2
61440: STR
61441: PUSH
61442: LD_STRING )
61444: STR
61445: PPUSH
61446: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
61450: LD_STRING setSpecLogoNumber(
61452: PUSH
61453: LD_INT 4
61455: STR
61456: PUSH
61457: LD_STRING ,
61459: STR
61460: PUSH
61461: LD_INT 3
61463: STR
61464: PUSH
61465: LD_STRING )
61467: STR
61468: PPUSH
61469: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
61473: LD_STRING setSpecLogoNumber(
61475: PUSH
61476: LD_INT 5
61478: STR
61479: PUSH
61480: LD_STRING ,
61482: STR
61483: PUSH
61484: LD_INT 4
61486: STR
61487: PUSH
61488: LD_STRING )
61490: STR
61491: PPUSH
61492: CALL_OW 559
// end ;
61496: LD_VAR 0 1
61500: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
61501: LD_INT 0
61503: PPUSH
61504: PPUSH
61505: PPUSH
61506: PPUSH
61507: PPUSH
61508: PPUSH
61509: PPUSH
61510: PPUSH
61511: PPUSH
// for i := 1 to 8 do
61512: LD_ADDR_VAR 0 2
61516: PUSH
61517: DOUBLE
61518: LD_INT 1
61520: DEC
61521: ST_TO_ADDR
61522: LD_INT 8
61524: PUSH
61525: FOR_TO
61526: IFFALSE 61911
// begin if mpSidePositions [ i ] then
61528: LD_EXP 7
61532: PUSH
61533: LD_VAR 0 2
61537: ARRAY
61538: IFFALSE 61909
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61540: LD_ADDR_VAR 0 7
61544: PUSH
61545: LD_INT 22
61547: PUSH
61548: LD_VAR 0 2
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 21
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PPUSH
61571: CALL_OW 69
61575: PPUSH
61576: CALL 14438 0 1
61580: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61581: LD_ADDR_VAR 0 9
61585: PUSH
61586: LD_INT 22
61588: PUSH
61589: LD_VAR 0 2
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 2
61600: PUSH
61601: LD_INT 30
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 30
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: LIST
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PPUSH
61630: CALL_OW 69
61634: ST_TO_ADDR
// crates := 0 ;
61635: LD_ADDR_VAR 0 4
61639: PUSH
61640: LD_INT 0
61642: ST_TO_ADDR
// oil := 0 ;
61643: LD_ADDR_VAR 0 5
61647: PUSH
61648: LD_INT 0
61650: ST_TO_ADDR
// sib := 0 ;
61651: LD_ADDR_VAR 0 6
61655: PUSH
61656: LD_INT 0
61658: ST_TO_ADDR
// if bases then
61659: LD_VAR 0 9
61663: IFFALSE 61769
// begin for j in bases do
61665: LD_ADDR_VAR 0 3
61669: PUSH
61670: LD_VAR 0 9
61674: PUSH
61675: FOR_IN
61676: IFFALSE 61767
// begin base := GetBase ( j ) ;
61678: LD_ADDR_VAR 0 8
61682: PUSH
61683: LD_VAR 0 3
61687: PPUSH
61688: CALL_OW 274
61692: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61693: LD_ADDR_VAR 0 4
61697: PUSH
61698: LD_VAR 0 4
61702: PUSH
61703: LD_VAR 0 8
61707: PPUSH
61708: LD_INT 1
61710: PPUSH
61711: CALL_OW 275
61715: PLUS
61716: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61717: LD_ADDR_VAR 0 5
61721: PUSH
61722: LD_VAR 0 5
61726: PUSH
61727: LD_VAR 0 8
61731: PPUSH
61732: LD_INT 2
61734: PPUSH
61735: CALL_OW 275
61739: PLUS
61740: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61741: LD_ADDR_VAR 0 6
61745: PUSH
61746: LD_VAR 0 6
61750: PUSH
61751: LD_VAR 0 8
61755: PPUSH
61756: LD_INT 3
61758: PPUSH
61759: CALL_OW 275
61763: PLUS
61764: ST_TO_ADDR
// end ;
61765: GO 61675
61767: POP
61768: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61769: LD_STRING setSpecText(
61771: PUSH
61772: LD_VAR 0 2
61776: STR
61777: PUSH
61778: LD_STRING ,
61780: STR
61781: PUSH
61782: LD_INT 2
61784: STR
61785: PUSH
61786: LD_STRING ,
61788: STR
61789: PUSH
61790: LD_VAR 0 4
61794: STR
61795: PUSH
61796: LD_STRING )
61798: STR
61799: PPUSH
61800: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61804: LD_STRING setSpecText(
61806: PUSH
61807: LD_VAR 0 2
61811: STR
61812: PUSH
61813: LD_STRING ,
61815: STR
61816: PUSH
61817: LD_INT 3
61819: STR
61820: PUSH
61821: LD_STRING ,
61823: STR
61824: PUSH
61825: LD_VAR 0 5
61829: STR
61830: PUSH
61831: LD_STRING )
61833: STR
61834: PPUSH
61835: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61839: LD_STRING setSpecText(
61841: PUSH
61842: LD_VAR 0 2
61846: STR
61847: PUSH
61848: LD_STRING ,
61850: STR
61851: PUSH
61852: LD_INT 4
61854: STR
61855: PUSH
61856: LD_STRING ,
61858: STR
61859: PUSH
61860: LD_VAR 0 6
61864: STR
61865: PUSH
61866: LD_STRING )
61868: STR
61869: PPUSH
61870: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61874: LD_STRING setSpecText(
61876: PUSH
61877: LD_VAR 0 2
61881: STR
61882: PUSH
61883: LD_STRING ,
61885: STR
61886: PUSH
61887: LD_INT 5
61889: STR
61890: PUSH
61891: LD_STRING ,
61893: STR
61894: PUSH
61895: LD_VAR 0 7
61899: STR
61900: PUSH
61901: LD_STRING )
61903: STR
61904: PPUSH
61905: CALL_OW 559
// end ; end ;
61909: GO 61525
61911: POP
61912: POP
// end ;
61913: LD_VAR 0 1
61917: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61918: LD_INT 2
61920: PUSH
61921: LD_INT 30
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 30
61933: PUSH
61934: LD_INT 1
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: LIST
61945: PPUSH
61946: CALL_OW 69
61950: IFFALSE 61960
61952: GO 61954
61954: DISABLE
// begin enable ;
61955: ENABLE
// UpdateSpectatorBar ;
61956: CALL 61501 0 0
// end ;
61960: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61961: LD_INT 0
61963: PPUSH
// end ;
61964: LD_VAR 0 12
61968: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61969: LD_INT 0
61971: PPUSH
61972: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61973: LD_VAR 0 1
61977: NOT
61978: IFTRUE 61997
61980: PUSH
61981: LD_VAR 0 2
61985: PPUSH
61986: LD_VAR 0 3
61990: PPUSH
61991: CALL_OW 488
61995: NOT
61996: OR
61997: IFTRUE 62032
61999: PUSH
62000: LD_VAR 0 1
62004: PPUSH
62005: CALL_OW 266
62009: PUSH
62010: LD_INT 3
62012: NONEQUAL
62013: IFFALSE 62031
62015: PUSH
62016: LD_VAR 0 1
62020: PPUSH
62021: CALL_OW 247
62025: PUSH
62026: LD_INT 1
62028: EQUAL
62029: NOT
62030: AND
62031: OR
62032: IFFALSE 62036
// exit ;
62034: GO 62318
// if GetType ( factory ) = unit_human then
62036: LD_VAR 0 1
62040: PPUSH
62041: CALL_OW 247
62045: PUSH
62046: LD_INT 1
62048: EQUAL
62049: IFFALSE 62066
// factory := IsInUnit ( factory ) ;
62051: LD_ADDR_VAR 0 1
62055: PUSH
62056: LD_VAR 0 1
62060: PPUSH
62061: CALL_OW 310
62065: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62066: LD_VAR 0 1
62070: PPUSH
62071: CALL_OW 266
62075: PUSH
62076: LD_INT 3
62078: NONEQUAL
62079: IFFALSE 62083
// exit ;
62081: GO 62318
// for i := 1 to Count ( factoryWaypoints ) do
62083: LD_ADDR_VAR 0 5
62087: PUSH
62088: DOUBLE
62089: LD_INT 1
62091: DEC
62092: ST_TO_ADDR
62093: LD_EXP 59
62097: PPUSH
62098: CALL 14438 0 1
62102: PUSH
62103: FOR_TO
62104: IFFALSE 62266
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
62106: LD_VAR 0 2
62110: PPUSH
62111: LD_VAR 0 3
62115: PPUSH
62116: CALL_OW 428
62120: PUSH
62121: LD_EXP 59
62125: PUSH
62126: LD_VAR 0 5
62130: ARRAY
62131: PUSH
62132: LD_INT 2
62134: ARRAY
62135: EQUAL
62136: IFFALSE 62168
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
62138: LD_ADDR_EXP 59
62142: PUSH
62143: LD_EXP 59
62147: PPUSH
62148: LD_VAR 0 5
62152: PPUSH
62153: CALL_OW 3
62157: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62158: CALL 62323 0 0
// exit ;
62162: POP
62163: POP
62164: GO 62318
// end else
62166: GO 62264
// if factory = factoryWaypoints [ i ] [ 2 ] then
62168: LD_VAR 0 1
62172: PUSH
62173: LD_EXP 59
62177: PUSH
62178: LD_VAR 0 5
62182: ARRAY
62183: PUSH
62184: LD_INT 2
62186: ARRAY
62187: EQUAL
62188: IFFALSE 62264
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
62190: LD_ADDR_EXP 59
62194: PUSH
62195: LD_EXP 59
62199: PPUSH
62200: LD_VAR 0 5
62204: PPUSH
62205: CALL_OW 3
62209: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
62210: LD_ADDR_EXP 59
62214: PUSH
62215: LD_EXP 59
62219: PPUSH
62220: LD_VAR 0 1
62224: PPUSH
62225: CALL_OW 255
62229: PUSH
62230: LD_VAR 0 1
62234: PUSH
62235: LD_VAR 0 2
62239: PUSH
62240: LD_VAR 0 3
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: PPUSH
62251: CALL 50370 0 2
62255: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62256: CALL 62323 0 0
// exit ;
62260: POP
62261: POP
62262: GO 62318
// end ; end ;
62264: GO 62103
62266: POP
62267: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
62268: LD_ADDR_EXP 59
62272: PUSH
62273: LD_EXP 59
62277: PPUSH
62278: LD_VAR 0 1
62282: PPUSH
62283: CALL_OW 255
62287: PUSH
62288: LD_VAR 0 1
62292: PUSH
62293: LD_VAR 0 2
62297: PUSH
62298: LD_VAR 0 3
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: PPUSH
62309: CALL 50370 0 2
62313: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62314: CALL 62323 0 0
// end ;
62318: LD_VAR 0 4
62322: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62323: LD_INT 0
62325: PPUSH
62326: PPUSH
62327: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62328: LD_STRING resetFactoryWaypoint();
62330: PPUSH
62331: CALL_OW 559
// if factoryWaypoints then
62335: LD_EXP 59
62339: IFFALSE 62460
// begin list := factoryWaypoints ;
62341: LD_ADDR_VAR 0 3
62345: PUSH
62346: LD_EXP 59
62350: ST_TO_ADDR
// for i := 1 to list do
62351: LD_ADDR_VAR 0 2
62355: PUSH
62356: DOUBLE
62357: LD_INT 1
62359: DEC
62360: ST_TO_ADDR
62361: LD_VAR 0 3
62365: PUSH
62366: FOR_TO
62367: IFFALSE 62458
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62369: LD_STRING setFactoryWaypointXY(
62371: PUSH
62372: LD_VAR 0 3
62376: PUSH
62377: LD_VAR 0 2
62381: ARRAY
62382: PUSH
62383: LD_INT 1
62385: ARRAY
62386: STR
62387: PUSH
62388: LD_STRING ,
62390: STR
62391: PUSH
62392: LD_VAR 0 3
62396: PUSH
62397: LD_VAR 0 2
62401: ARRAY
62402: PUSH
62403: LD_INT 2
62405: ARRAY
62406: STR
62407: PUSH
62408: LD_STRING ,
62410: STR
62411: PUSH
62412: LD_VAR 0 3
62416: PUSH
62417: LD_VAR 0 2
62421: ARRAY
62422: PUSH
62423: LD_INT 3
62425: ARRAY
62426: STR
62427: PUSH
62428: LD_STRING ,
62430: STR
62431: PUSH
62432: LD_VAR 0 3
62436: PUSH
62437: LD_VAR 0 2
62441: ARRAY
62442: PUSH
62443: LD_INT 4
62445: ARRAY
62446: STR
62447: PUSH
62448: LD_STRING )
62450: STR
62451: PPUSH
62452: CALL_OW 559
62456: GO 62366
62458: POP
62459: POP
// end ; end ;
62460: LD_VAR 0 1
62464: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62465: LD_INT 0
62467: PPUSH
// if HexInfo ( x , y ) = warehouse then
62468: LD_VAR 0 2
62472: PPUSH
62473: LD_VAR 0 3
62477: PPUSH
62478: CALL_OW 428
62482: PUSH
62483: LD_VAR 0 1
62487: EQUAL
62488: IFFALSE 62515
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62490: LD_ADDR_EXP 61
62494: PUSH
62495: LD_EXP 61
62499: PPUSH
62500: LD_VAR 0 1
62504: PPUSH
62505: LD_INT 0
62507: PPUSH
62508: CALL_OW 1
62512: ST_TO_ADDR
62513: GO 62566
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62515: LD_ADDR_EXP 61
62519: PUSH
62520: LD_EXP 61
62524: PPUSH
62525: LD_VAR 0 1
62529: PPUSH
62530: LD_VAR 0 1
62534: PPUSH
62535: CALL_OW 255
62539: PUSH
62540: LD_VAR 0 1
62544: PUSH
62545: LD_VAR 0 2
62549: PUSH
62550: LD_VAR 0 3
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: PPUSH
62561: CALL_OW 1
62565: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62566: CALL 62575 0 0
// end ;
62570: LD_VAR 0 4
62574: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62575: LD_INT 0
62577: PPUSH
62578: PPUSH
62579: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62580: LD_STRING resetWarehouseGatheringPoints();
62582: PPUSH
62583: CALL_OW 559
// if warehouseGatheringPoints then
62587: LD_EXP 61
62591: IFFALSE 62717
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62593: LD_ADDR_VAR 0 3
62597: PUSH
62598: LD_EXP 61
62602: PPUSH
62603: CALL 54304 0 1
62607: ST_TO_ADDR
// for i := 1 to list do
62608: LD_ADDR_VAR 0 2
62612: PUSH
62613: DOUBLE
62614: LD_INT 1
62616: DEC
62617: ST_TO_ADDR
62618: LD_VAR 0 3
62622: PUSH
62623: FOR_TO
62624: IFFALSE 62715
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62626: LD_STRING setWarehouseGatheringPointXY(
62628: PUSH
62629: LD_VAR 0 3
62633: PUSH
62634: LD_VAR 0 2
62638: ARRAY
62639: PUSH
62640: LD_INT 1
62642: ARRAY
62643: STR
62644: PUSH
62645: LD_STRING ,
62647: STR
62648: PUSH
62649: LD_VAR 0 3
62653: PUSH
62654: LD_VAR 0 2
62658: ARRAY
62659: PUSH
62660: LD_INT 2
62662: ARRAY
62663: STR
62664: PUSH
62665: LD_STRING ,
62667: STR
62668: PUSH
62669: LD_VAR 0 3
62673: PUSH
62674: LD_VAR 0 2
62678: ARRAY
62679: PUSH
62680: LD_INT 3
62682: ARRAY
62683: STR
62684: PUSH
62685: LD_STRING ,
62687: STR
62688: PUSH
62689: LD_VAR 0 3
62693: PUSH
62694: LD_VAR 0 2
62698: ARRAY
62699: PUSH
62700: LD_INT 4
62702: ARRAY
62703: STR
62704: PUSH
62705: LD_STRING )
62707: STR
62708: PPUSH
62709: CALL_OW 559
62713: GO 62623
62715: POP
62716: POP
// end ; end ;
62717: LD_VAR 0 1
62721: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62722: LD_INT 0
62724: PPUSH
62725: PPUSH
// if not mpSidePositions then
62726: LD_EXP 7
62730: NOT
62731: IFFALSE 62735
// exit ;
62733: GO 62806
// result :=  ;
62735: LD_ADDR_VAR 0 1
62739: PUSH
62740: LD_STRING 
62742: ST_TO_ADDR
// for i := 1 to 8 do
62743: LD_ADDR_VAR 0 2
62747: PUSH
62748: DOUBLE
62749: LD_INT 1
62751: DEC
62752: ST_TO_ADDR
62753: LD_INT 8
62755: PUSH
62756: FOR_TO
62757: IFFALSE 62787
// begin result := result & mpSidePositions [ i ] & ; ;
62759: LD_ADDR_VAR 0 1
62763: PUSH
62764: LD_VAR 0 1
62768: PUSH
62769: LD_EXP 7
62773: PUSH
62774: LD_VAR 0 2
62778: ARRAY
62779: STR
62780: PUSH
62781: LD_STRING ;
62783: STR
62784: ST_TO_ADDR
// end ;
62785: GO 62756
62787: POP
62788: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62789: LD_STRING setMultiplayerRealPosition("
62791: PUSH
62792: LD_VAR 0 1
62796: STR
62797: PUSH
62798: LD_STRING ");
62800: STR
62801: PPUSH
62802: CALL_OW 559
// end ;
62806: LD_VAR 0 1
62810: RET
