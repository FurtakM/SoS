// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45578 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 45846 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 3 , 6 , 9 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: EMPTY
 307: PUSH
 308: LD_INT 0
 310: PUSH
 311: LD_INT 1
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: LD_INT 1
 320: NEG
 321: PUSH
 322: LD_INT 350
 324: PUSH
 325: LD_INT 700
 327: PUSH
 328: LD_INT 1400
 330: PUSH
 331: LD_INT 0
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_INT 0
 343: PUSH
 344: LD_INT 1
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: LD_INT 0
 353: PUSH
 354: LD_INT 13650
 356: PUSH
 357: LD_INT 7350
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 3
 370: PUSH
 371: LD_INT 6
 373: PUSH
 374: LD_INT 9
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: PUSH
 383: EMPTY
 384: PUSH
 385: EMPTY
 386: PUSH
 387: LD_INT 0
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: LD_INT 31500
 395: PUSH
 396: LD_INT 52500
 398: PUSH
 399: LD_INT 63000
 401: PUSH
 402: LD_INT 94500
 404: PUSH
 405: LD_INT 126000
 407: PUSH
 408: LD_INT 189000
 410: PUSH
 411: LD_INT 210000
 413: PUSH
 414: LD_INT 252000
 416: PUSH
 417: LD_INT 378000
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: LIST
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: PUSH
 433: EMPTY
 434: PUSH
 435: EMPTY
 436: PUSH
 437: LD_INT 0
 439: PUSH
 440: LD_INT 6300
 442: PUSH
 443: LD_INT 10500
 445: PUSH
 446: LD_INT 16800
 448: PUSH
 449: LD_INT 21000
 451: PUSH
 452: LD_INT 25200
 454: PUSH
 455: LD_INT 31500
 457: PUSH
 458: LD_INT 42000
 460: PUSH
 461: LD_INT 63000
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: LIST
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 498: LD_ADDR_EXP 4
 502: PUSH
 503: LD_INT 2
 505: PUSH
 506: LD_INT 15
 508: PUSH
 509: LD_INT 4
 511: PUSH
 512: LD_INT 100
 514: PUSH
 515: LD_INT 30
 517: PUSH
 518: LD_INT 0
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: LIST
 525: PUSH
 526: LD_INT 3
 528: PUSH
 529: LD_INT 1
 531: PUSH
 532: LD_INT 2
 534: PUSH
 535: LD_INT 250
 537: PUSH
 538: LD_INT 2
 540: PUSH
 541: LD_INT 0
 543: PUSH
 544: LD_INT 1
 546: PUSH
 547: LD_INT 700
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: LD_INT 700
 555: PUSH
 556: LD_INT 3
 558: PUSH
 559: LD_INT 0
 561: PUSH
 562: LD_INT 0
 564: PUSH
 565: LD_INT 31500
 567: PUSH
 568: LD_INT 0
 570: PUSH
 571: LD_INT 0
 573: PUSH
 574: LD_INT 6300
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: LIST
 594: LIST
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: ST_TO_ADDR
// mpGameType := GameTypeSurvival ;
 600: LD_ADDR_EXP 1
 604: PUSH
 605: LD_INT 2
 607: ST_TO_ADDR
// your_side := 1 ;
 608: LD_ADDR_OWVAR 2
 612: PUSH
 613: LD_INT 1
 615: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 616: LD_ADDR_EXP 5
 620: PUSH
 621: LD_INT 8
 623: PUSH
 624: LD_INT 2
 626: PUSH
 627: LD_INT 3
 629: PUSH
 630: LD_INT 4
 632: PUSH
 633: LD_INT 5
 635: PUSH
 636: LD_INT 6
 638: PUSH
 639: LD_INT 7
 641: PUSH
 642: LD_INT 1
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 655: LD_ADDR_EXP 6
 659: PUSH
 660: LD_INT 1
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 2
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 3
 674: PUSH
 675: LD_INT 4
 677: PUSH
 678: LD_INT 4
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 694: LD_ADDR_EXP 7
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 3
 707: PUSH
 708: LD_INT 1
 710: PUSH
 711: LD_INT 2
 713: PUSH
 714: LD_INT 3
 716: PUSH
 717: LD_INT 1
 719: PUSH
 720: LD_INT 2
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 733: LD_ADDR_EXP 8
 737: PUSH
 738: LD_INT 1
 740: PUSH
 741: LD_INT 8
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PUSH
 748: LD_INT 2
 750: PUSH
 751: LD_INT 3
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: PUSH
 758: LD_INT 4
 760: PUSH
 761: LD_INT 5
 763: PUSH
 764: EMPTY
 765: LIST
 766: LIST
 767: PUSH
 768: LD_INT 6
 770: PUSH
 771: LD_INT 7
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: ST_TO_ADDR
// mpTeamGame := true ;
 784: LD_ADDR_EXP 9
 788: PUSH
 789: LD_INT 1
 791: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 792: LD_ADDR_EXP 27
 796: PUSH
 797: LD_INT 160
 799: PUSH
 800: LD_INT 200
 802: PUSH
 803: EMPTY
 804: LIST
 805: LIST
 806: ST_TO_ADDR
// end ;
 807: LD_VAR 0 1
 811: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 812: LD_INT 0
 814: PPUSH
 815: PPUSH
 816: PPUSH
 817: PPUSH
 818: PPUSH
 819: PPUSH
 820: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 821: LD_ADDR_EXP 17
 825: PUSH
 826: LD_INT 9
 828: PUSH
 829: LD_INT 10
 831: PUSH
 832: LD_INT 11
 834: PUSH
 835: LD_INT 12
 837: PUSH
 838: LD_INT 13
 840: PUSH
 841: LD_INT 14
 843: PUSH
 844: LD_INT 15
 846: PUSH
 847: LD_INT 16
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 860: LD_ADDR_EXP 16
 864: PUSH
 865: LD_INT 18
 867: PUSH
 868: LD_INT 19
 870: PUSH
 871: LD_INT 20
 873: PUSH
 874: LD_INT 21
 876: PUSH
 877: LD_INT 22
 879: PUSH
 880: LD_INT 23
 882: PUSH
 883: EMPTY
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: PUSH
 891: LD_EXP 17
 895: UNION
 896: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 897: LD_VAR 0 1
 901: PUSH
 902: LD_INT 2
 904: EQUAL
 905: IFFALSE 917
// baseLevel := 1 else
 907: LD_ADDR_VAR 0 7
 911: PUSH
 912: LD_INT 1
 914: ST_TO_ADDR
 915: GO 931
// baseLevel := mpGameSettings [ 1 ] ;
 917: LD_ADDR_VAR 0 7
 921: PUSH
 922: LD_EXP 4
 926: PUSH
 927: LD_INT 1
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 931: LD_ADDR_EXP 22
 935: PUSH
 936: LD_EXP 4
 940: PUSH
 941: LD_INT 2
 943: ARRAY
 944: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 945: LD_ADDR_EXP 23
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 3
 957: ARRAY
 958: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 959: LD_ADDR_EXP 13
 963: PUSH
 964: LD_EXP 4
 968: PUSH
 969: LD_INT 4
 971: ARRAY
 972: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 973: LD_ADDR_EXP 25
 977: PUSH
 978: LD_EXP 4
 982: PUSH
 983: LD_INT 5
 985: ARRAY
 986: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 987: LD_ADDR_VAR 0 5
 991: PUSH
 992: LD_EXP 4
 996: PUSH
 997: LD_INT 6
 999: ARRAY
1000: PUSH
1001: LD_INT 0
1003: GREATER
1004: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1005: LD_ADDR_VAR 0 6
1009: PUSH
1010: LD_EXP 4
1014: PUSH
1015: LD_INT 7
1017: ARRAY
1018: PUSH
1019: LD_INT 0
1021: GREATER
1022: ST_TO_ADDR
// if gameType = GameTypeKing then
1023: LD_VAR 0 1
1027: PUSH
1028: LD_INT 3
1030: EQUAL
1031: IFFALSE 1057
// begin mpKingArea := kingArea ;
1033: LD_ADDR_EXP 31
1037: PUSH
1038: LD_INT 64
1040: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1041: LD_ADDR_EXP 32
1045: PUSH
1046: LD_EXP 4
1050: PUSH
1051: LD_INT 8
1053: ARRAY
1054: ST_TO_ADDR
// end else
1055: GO 1073
// begin mpKingArea := 0 ;
1057: LD_ADDR_EXP 31
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// mpPoints := 0 ;
1065: LD_ADDR_EXP 32
1069: PUSH
1070: LD_INT 0
1072: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1073: LD_EXP 4
1077: PUSH
1078: LD_INT 9
1080: ARRAY
1081: IFFALSE 1213
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1083: LD_ADDR_EXP 33
1087: PUSH
1088: LD_INT 1
1090: PUSH
1091: LD_INT 1
1093: PUSH
1094: LD_INT 1
1096: PUSH
1097: LD_INT 2
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: LD_INT 3
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 12
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 24
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 12
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 23
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 21
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 42
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: LD_INT 21
1188: PUSH
1189: LD_INT 1
1191: PUSH
1192: LD_INT 1
1194: PUSH
1195: LD_INT 42
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: LIST
1212: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1213: LD_ADDR_EXP 14
1217: PUSH
1218: LD_EXP 4
1222: PUSH
1223: LD_INT 11
1225: ARRAY
1226: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1227: LD_ADDR_EXP 20
1231: PUSH
1232: LD_EXP 4
1236: PUSH
1237: LD_INT 12
1239: ARRAY
1240: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1241: LD_ADDR_EXP 24
1245: PUSH
1246: LD_EXP 4
1250: PUSH
1251: LD_INT 13
1253: ARRAY
1254: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1255: LD_ADDR_EXP 30
1259: PUSH
1260: LD_EXP 4
1264: PUSH
1265: LD_INT 14
1267: ARRAY
1268: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1269: LD_ADDR_EXP 28
1273: PUSH
1274: LD_EXP 4
1278: PUSH
1279: LD_INT 15
1281: ARRAY
1282: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1283: LD_ADDR_EXP 26
1287: PUSH
1288: LD_EXP 4
1292: PUSH
1293: LD_INT 18
1295: ARRAY
1296: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1297: LD_ADDR_EXP 18
1301: PUSH
1302: LD_EXP 4
1306: PUSH
1307: LD_INT 21
1309: ARRAY
1310: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1311: LD_ADDR_EXP 29
1315: PUSH
1316: LD_INT 1
1318: PUSH
1319: LD_INT 2
1321: PUSH
1322: LD_INT 3
1324: PUSH
1325: LD_INT 4
1327: PUSH
1328: LD_INT 5
1330: PUSH
1331: LD_INT 6
1333: PUSH
1334: LD_INT 7
1336: PUSH
1337: LD_INT 8
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 5 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 2 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1350: LD_ADDR_VAR 0 8
1354: PUSH
1355: LD_INT 40
1357: PPUSH
1358: LD_INT 2
1360: PPUSH
1361: CALL 45033 0 2
1365: PUSH
1366: LD_INT 41
1368: PPUSH
1369: LD_INT 5
1371: PPUSH
1372: CALL 45033 0 2
1376: PUSH
1377: LD_INT 42
1379: PPUSH
1380: LD_INT 3
1382: PPUSH
1383: CALL 45033 0 2
1387: PUSH
1388: LD_INT 43
1390: PPUSH
1391: LD_INT 4
1393: PPUSH
1394: CALL 45033 0 2
1398: PUSH
1399: LD_INT 44
1401: PPUSH
1402: LD_INT 5
1404: PPUSH
1405: CALL 45033 0 2
1409: PUSH
1410: LD_INT 45
1412: PPUSH
1413: LD_INT 2
1415: PPUSH
1416: CALL 45033 0 2
1420: PUSH
1421: LD_INT 46
1423: PPUSH
1424: LD_INT 0
1426: PPUSH
1427: CALL 45033 0 2
1431: PUSH
1432: LD_INT 47
1434: PPUSH
1435: LD_INT 1
1437: PPUSH
1438: CALL 45033 0 2
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1453: LD_ADDR_VAR 0 3
1457: PUSH
1458: DOUBLE
1459: LD_INT 1
1461: DEC
1462: ST_TO_ADDR
1463: LD_VAR 0 8
1467: PPUSH
1468: CALL 4905 0 1
1472: PUSH
1473: FOR_TO
1474: IFFALSE 1578
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1476: LD_ADDR_EXP 19
1480: PUSH
1481: LD_EXP 19
1485: PPUSH
1486: LD_VAR 0 3
1490: PPUSH
1491: LD_VAR 0 8
1495: PUSH
1496: LD_VAR 0 3
1500: ARRAY
1501: PUSH
1502: LD_INT 1
1504: ARRAY
1505: PPUSH
1506: LD_VAR 0 8
1510: PUSH
1511: LD_VAR 0 3
1515: ARRAY
1516: PUSH
1517: LD_INT 3
1519: ARRAY
1520: PPUSH
1521: LD_INT 10
1523: PPUSH
1524: CALL_OW 272
1528: PUSH
1529: LD_VAR 0 8
1533: PUSH
1534: LD_VAR 0 3
1538: ARRAY
1539: PUSH
1540: LD_INT 2
1542: ARRAY
1543: PPUSH
1544: LD_VAR 0 8
1548: PUSH
1549: LD_VAR 0 3
1553: ARRAY
1554: PUSH
1555: LD_INT 3
1557: ARRAY
1558: PPUSH
1559: LD_INT 10
1561: PPUSH
1562: CALL_OW 273
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PPUSH
1571: CALL_OW 1
1575: ST_TO_ADDR
1576: GO 1473
1578: POP
1579: POP
// if hasOil then
1580: LD_VAR 0 5
1584: IFFALSE 1723
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1586: LD_ADDR_VAR 0 4
1590: PUSH
1591: LD_EXP 4
1595: PUSH
1596: LD_INT 6
1598: ARRAY
1599: PUSH
1600: LD_INT 2
1602: EQUAL
1603: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1604: LD_ADDR_EXP 10
1608: PUSH
1609: LD_INT 24
1611: PPUSH
1612: LD_VAR 0 4
1616: PPUSH
1617: CALL 44866 0 2
1621: PUSH
1622: LD_INT 25
1624: PPUSH
1625: LD_VAR 0 4
1629: PPUSH
1630: CALL 44866 0 2
1634: PUSH
1635: LD_INT 26
1637: PPUSH
1638: LD_VAR 0 4
1642: PPUSH
1643: CALL 44866 0 2
1647: PUSH
1648: LD_INT 27
1650: PPUSH
1651: LD_VAR 0 4
1655: PPUSH
1656: CALL 44866 0 2
1660: PUSH
1661: LD_INT 28
1663: PPUSH
1664: LD_VAR 0 4
1668: PPUSH
1669: CALL 44866 0 2
1673: PUSH
1674: LD_INT 29
1676: PPUSH
1677: LD_VAR 0 4
1681: PPUSH
1682: CALL 44866 0 2
1686: PUSH
1687: LD_INT 30
1689: PPUSH
1690: LD_VAR 0 4
1694: PPUSH
1695: CALL 44866 0 2
1699: PUSH
1700: LD_INT 31
1702: PPUSH
1703: LD_VAR 0 4
1707: PPUSH
1708: CALL 44866 0 2
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// end ; if hasSib then
1723: LD_VAR 0 6
1727: IFFALSE 1866
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1729: LD_ADDR_VAR 0 4
1733: PUSH
1734: LD_EXP 4
1738: PUSH
1739: LD_INT 7
1741: ARRAY
1742: PUSH
1743: LD_INT 2
1745: EQUAL
1746: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1747: LD_ADDR_EXP 11
1751: PUSH
1752: LD_INT 32
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL 44866 0 2
1764: PUSH
1765: LD_INT 33
1767: PPUSH
1768: LD_VAR 0 4
1772: PPUSH
1773: CALL 44866 0 2
1777: PUSH
1778: LD_INT 34
1780: PPUSH
1781: LD_VAR 0 4
1785: PPUSH
1786: CALL 44866 0 2
1790: PUSH
1791: LD_INT 35
1793: PPUSH
1794: LD_VAR 0 4
1798: PPUSH
1799: CALL 44866 0 2
1803: PUSH
1804: LD_INT 36
1806: PPUSH
1807: LD_VAR 0 4
1811: PPUSH
1812: CALL 44866 0 2
1816: PUSH
1817: LD_INT 37
1819: PPUSH
1820: LD_VAR 0 4
1824: PPUSH
1825: CALL 44866 0 2
1829: PUSH
1830: LD_INT 38
1832: PPUSH
1833: LD_VAR 0 4
1837: PPUSH
1838: CALL 44866 0 2
1842: PUSH
1843: LD_INT 39
1845: PPUSH
1846: LD_VAR 0 4
1850: PPUSH
1851: CALL 44866 0 2
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1866: LD_VAR 0 7
1870: PUSH
1871: LD_INT 1
1873: GREATEREQUAL
1874: IFFALSE 1886
// mpDepots := startPos ;
1876: LD_ADDR_EXP 12
1880: PUSH
1881: LD_VAR 0 8
1885: ST_TO_ADDR
// if baseLevel >= 2 then
1886: LD_VAR 0 7
1890: PUSH
1891: LD_INT 2
1893: GREATEREQUAL
1894: IFFALSE 2311
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1896: LD_ADDR_EXP 15
1900: PUSH
1901: LD_INT 31
1903: PUSH
1904: LD_INT 48
1906: PPUSH
1907: LD_INT 5
1909: PPUSH
1910: CALL 45033 0 2
1914: ADD
1915: PUSH
1916: LD_INT 31
1918: PUSH
1919: LD_INT 49
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: CALL 45033 0 2
1929: ADD
1930: PUSH
1931: LD_INT 4
1933: PUSH
1934: LD_INT 65
1936: PPUSH
1937: LD_INT 5
1939: PPUSH
1940: CALL 45033 0 2
1944: ADD
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: LD_INT 50
1956: PPUSH
1957: LD_INT 1
1959: PPUSH
1960: CALL 45033 0 2
1964: ADD
1965: PUSH
1966: LD_INT 31
1968: PUSH
1969: LD_INT 51
1971: PPUSH
1972: LD_INT 4
1974: PPUSH
1975: CALL 45033 0 2
1979: ADD
1980: PUSH
1981: LD_INT 4
1983: PUSH
1984: LD_INT 66
1986: PPUSH
1987: LD_INT 4
1989: PPUSH
1990: CALL 45033 0 2
1994: ADD
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: PUSH
2001: LD_INT 31
2003: PUSH
2004: LD_INT 52
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 45033 0 2
2014: ADD
2015: PUSH
2016: LD_INT 31
2018: PUSH
2019: LD_INT 53
2021: PPUSH
2022: LD_INT 5
2024: PPUSH
2025: CALL 45033 0 2
2029: ADD
2030: PUSH
2031: LD_INT 4
2033: PUSH
2034: LD_INT 67
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL 45033 0 2
2044: ADD
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 31
2053: PUSH
2054: LD_INT 54
2056: PPUSH
2057: LD_INT 1
2059: PPUSH
2060: CALL 45033 0 2
2064: ADD
2065: PUSH
2066: LD_INT 31
2068: PUSH
2069: LD_INT 55
2071: PPUSH
2072: LD_INT 1
2074: PPUSH
2075: CALL 45033 0 2
2079: ADD
2080: PUSH
2081: LD_INT 4
2083: PUSH
2084: LD_INT 68
2086: PPUSH
2087: LD_INT 1
2089: PPUSH
2090: CALL 45033 0 2
2094: ADD
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: LD_INT 31
2103: PUSH
2104: LD_INT 56
2106: PPUSH
2107: LD_INT 2
2109: PPUSH
2110: CALL 45033 0 2
2114: ADD
2115: PUSH
2116: LD_INT 31
2118: PUSH
2119: LD_INT 57
2121: PPUSH
2122: LD_INT 2
2124: PPUSH
2125: CALL 45033 0 2
2129: ADD
2130: PUSH
2131: LD_INT 4
2133: PUSH
2134: LD_INT 69
2136: PPUSH
2137: LD_INT 2
2139: PPUSH
2140: CALL 45033 0 2
2144: ADD
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: LIST
2150: PUSH
2151: LD_INT 31
2153: PUSH
2154: LD_INT 58
2156: PPUSH
2157: LD_INT 1
2159: PPUSH
2160: CALL 45033 0 2
2164: ADD
2165: PUSH
2166: LD_INT 31
2168: PUSH
2169: LD_INT 59
2171: PPUSH
2172: LD_INT 4
2174: PPUSH
2175: CALL 45033 0 2
2179: ADD
2180: PUSH
2181: LD_INT 4
2183: PUSH
2184: LD_INT 70
2186: PPUSH
2187: LD_INT 5
2189: PPUSH
2190: CALL 45033 0 2
2194: ADD
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 31
2203: PUSH
2204: LD_INT 60
2206: PPUSH
2207: LD_INT 4
2209: PPUSH
2210: CALL 45033 0 2
2214: ADD
2215: PUSH
2216: LD_INT 31
2218: PUSH
2219: LD_INT 61
2221: PPUSH
2222: LD_INT 3
2224: PPUSH
2225: CALL 45033 0 2
2229: ADD
2230: PUSH
2231: LD_INT 4
2233: PUSH
2234: LD_INT 71
2236: PPUSH
2237: LD_INT 3
2239: PPUSH
2240: CALL 45033 0 2
2244: ADD
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: LIST
2250: PUSH
2251: LD_INT 31
2253: PUSH
2254: LD_INT 62
2256: PPUSH
2257: LD_INT 4
2259: PPUSH
2260: CALL 45033 0 2
2264: ADD
2265: PUSH
2266: LD_INT 31
2268: PUSH
2269: LD_INT 63
2271: PPUSH
2272: LD_INT 4
2274: PPUSH
2275: CALL 45033 0 2
2279: ADD
2280: PUSH
2281: LD_INT 4
2283: PUSH
2284: LD_INT 72
2286: PPUSH
2287: LD_INT 4
2289: PPUSH
2290: CALL 45033 0 2
2294: ADD
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: LIST
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: LD_VAR 0 2
2315: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2316: GO 2318
2318: DISABLE
2319: LD_INT 0
2321: PPUSH
2322: PPUSH
2323: PPUSH
2324: PPUSH
2325: PPUSH
2326: PPUSH
2327: PPUSH
2328: PPUSH
// begin if not mpShipments then
2329: LD_EXP 25
2333: NOT
2334: IFFALSE 2338
// exit ;
2336: GO 2762
// case mpShipments of 1 :
2338: LD_EXP 25
2342: PUSH
2343: LD_INT 1
2345: DOUBLE
2346: EQUAL
2347: IFTRUE 2351
2349: GO 2386
2351: POP
// begin time := 0 0$30 ;
2352: LD_ADDR_VAR 0 5
2356: PUSH
2357: LD_INT 1050
2359: ST_TO_ADDR
// normalTime := 0 0$30 ;
2360: LD_ADDR_VAR 0 6
2364: PUSH
2365: LD_INT 1050
2367: ST_TO_ADDR
// maxTime := 1 1$20 ;
2368: LD_ADDR_VAR 0 8
2372: PUSH
2373: LD_INT 2800
2375: ST_TO_ADDR
// delayTime := 0 0$5 ;
2376: LD_ADDR_VAR 0 7
2380: PUSH
2381: LD_INT 175
2383: ST_TO_ADDR
// end ; 2 :
2384: GO 2516
2386: LD_INT 2
2388: DOUBLE
2389: EQUAL
2390: IFTRUE 2394
2392: GO 2429
2394: POP
// begin time := 0 0$25 ;
2395: LD_ADDR_VAR 0 5
2399: PUSH
2400: LD_INT 875
2402: ST_TO_ADDR
// normalTime := 0 0$25 ;
2403: LD_ADDR_VAR 0 6
2407: PUSH
2408: LD_INT 875
2410: ST_TO_ADDR
// maxTime := 1 1$10 ;
2411: LD_ADDR_VAR 0 8
2415: PUSH
2416: LD_INT 2450
2418: ST_TO_ADDR
// delayTime := 0 0$4 ;
2419: LD_ADDR_VAR 0 7
2423: PUSH
2424: LD_INT 140
2426: ST_TO_ADDR
// end ; 3 :
2427: GO 2516
2429: LD_INT 3
2431: DOUBLE
2432: EQUAL
2433: IFTRUE 2437
2435: GO 2472
2437: POP
// begin time := 0 0$20 ;
2438: LD_ADDR_VAR 0 5
2442: PUSH
2443: LD_INT 700
2445: ST_TO_ADDR
// normalTime := 0 0$20 ;
2446: LD_ADDR_VAR 0 6
2450: PUSH
2451: LD_INT 700
2453: ST_TO_ADDR
// maxTime := 1 1$00 ;
2454: LD_ADDR_VAR 0 8
2458: PUSH
2459: LD_INT 2100
2461: ST_TO_ADDR
// delayTime := 0 0$3 ;
2462: LD_ADDR_VAR 0 7
2466: PUSH
2467: LD_INT 105
2469: ST_TO_ADDR
// end ; 4 :
2470: GO 2516
2472: LD_INT 4
2474: DOUBLE
2475: EQUAL
2476: IFTRUE 2480
2478: GO 2515
2480: POP
// begin time := 0 0$15 ;
2481: LD_ADDR_VAR 0 5
2485: PUSH
2486: LD_INT 525
2488: ST_TO_ADDR
// normalTime := 0 0$15 ;
2489: LD_ADDR_VAR 0 6
2493: PUSH
2494: LD_INT 525
2496: ST_TO_ADDR
// maxTime := 0 0$55 ;
2497: LD_ADDR_VAR 0 8
2501: PUSH
2502: LD_INT 1925
2504: ST_TO_ADDR
// delayTime := 0 0$2 ;
2505: LD_ADDR_VAR 0 7
2509: PUSH
2510: LD_INT 70
2512: ST_TO_ADDR
// end ; end ;
2513: GO 2516
2515: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2516: LD_ADDR_VAR 0 4
2520: PUSH
2521: LD_INT 18
2523: PUSH
2524: LD_INT 19
2526: PUSH
2527: LD_INT 20
2529: PUSH
2530: LD_INT 21
2532: PUSH
2533: LD_INT 22
2535: PUSH
2536: LD_INT 23
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2547: LD_ADDR_VAR 0 3
2551: PUSH
2552: LD_INT 9
2554: PUSH
2555: LD_INT 10
2557: PUSH
2558: LD_INT 11
2560: PUSH
2561: LD_INT 12
2563: PUSH
2564: LD_INT 13
2566: PUSH
2567: LD_INT 14
2569: PUSH
2570: LD_INT 15
2572: PUSH
2573: LD_INT 16
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: ST_TO_ADDR
// for i := 1 to 8 do
2586: LD_ADDR_VAR 0 1
2590: PUSH
2591: DOUBLE
2592: LD_INT 1
2594: DEC
2595: ST_TO_ADDR
2596: LD_INT 8
2598: PUSH
2599: FOR_TO
2600: IFFALSE 2641
// begin if not mpSidePositions [ i ] then
2602: LD_EXP 5
2606: PUSH
2607: LD_VAR 0 1
2611: ARRAY
2612: NOT
2613: IFFALSE 2617
// continue ;
2615: GO 2599
// areas := areas ^ tmp [ i ] ;
2617: LD_ADDR_VAR 0 4
2621: PUSH
2622: LD_VAR 0 4
2626: PUSH
2627: LD_VAR 0 3
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: ADD
2638: ST_TO_ADDR
// end ;
2639: GO 2599
2641: POP
2642: POP
// repeat wait ( time ) ;
2643: LD_VAR 0 5
2647: PPUSH
2648: CALL_OW 67
// x := rand ( 1 , 5 ) ;
2652: LD_ADDR_VAR 0 2
2656: PUSH
2657: LD_INT 1
2659: PPUSH
2660: LD_INT 5
2662: PPUSH
2663: CALL_OW 12
2667: ST_TO_ADDR
// for i in areas do
2668: LD_ADDR_VAR 0 1
2672: PUSH
2673: LD_VAR 0 4
2677: PUSH
2678: FOR_IN
2679: IFFALSE 2718
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2681: LD_VAR 0 1
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: CALL_OW 287
2693: PUSH
2694: LD_INT 20
2696: LESS
2697: IFFALSE 2716
// begin CreateCratesArea ( x , i , true ) ;
2699: LD_VAR 0 2
2703: PPUSH
2704: LD_VAR 0 1
2708: PPUSH
2709: LD_INT 1
2711: PPUSH
2712: CALL_OW 55
// end ; end ;
2716: GO 2678
2718: POP
2719: POP
// time := time + delayTime ;
2720: LD_ADDR_VAR 0 5
2724: PUSH
2725: LD_VAR 0 5
2729: PUSH
2730: LD_VAR 0 7
2734: PLUS
2735: ST_TO_ADDR
// if time > maxTime then
2736: LD_VAR 0 5
2740: PUSH
2741: LD_VAR 0 8
2745: GREATER
2746: IFFALSE 2758
// time := normalTime ;
2748: LD_ADDR_VAR 0 5
2752: PUSH
2753: LD_VAR 0 6
2757: ST_TO_ADDR
// until false ;
2758: LD_INT 0
2760: IFFALSE 2643
// end ; end_of_file
2762: PPOPN 8
2764: END
// on UnitDestroyed ( un ) do begin Multiplayer_UnitDestroyed ( un ) ;
2765: LD_VAR 0 1
2769: PPUSH
2770: CALL 49735 0 1
// SOS_UnitDestroyed ( un ) ;
2774: LD_VAR 0 1
2778: PPUSH
2779: CALL 68170 0 1
// end ;
2783: PPOPN 1
2785: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ; end_of_file
2786: LD_VAR 0 1
2790: PPUSH
2791: LD_VAR 0 2
2795: PPUSH
2796: CALL 68290 0 2
2800: PPOPN 2
2802: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2803: LD_INT 0
2805: PPUSH
2806: PPUSH
// if exist_mode then
2807: LD_VAR 0 2
2811: IFFALSE 2836
// unit := CreateCharacter ( prefix & ident ) else
2813: LD_ADDR_VAR 0 5
2817: PUSH
2818: LD_VAR 0 3
2822: PUSH
2823: LD_VAR 0 1
2827: STR
2828: PPUSH
2829: CALL_OW 34
2833: ST_TO_ADDR
2834: GO 2851
// unit := NewCharacter ( ident ) ;
2836: LD_ADDR_VAR 0 5
2840: PUSH
2841: LD_VAR 0 1
2845: PPUSH
2846: CALL_OW 25
2850: ST_TO_ADDR
// result := unit ;
2851: LD_ADDR_VAR 0 4
2855: PUSH
2856: LD_VAR 0 5
2860: ST_TO_ADDR
// end ;
2861: LD_VAR 0 4
2865: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2866: LD_INT 0
2868: PPUSH
2869: PPUSH
// if not side or not nation then
2870: LD_VAR 0 1
2874: NOT
2875: PUSH
2876: LD_VAR 0 2
2880: NOT
2881: OR
2882: IFFALSE 2886
// exit ;
2884: GO 3654
// case nation of nation_american :
2886: LD_VAR 0 2
2890: PUSH
2891: LD_INT 1
2893: DOUBLE
2894: EQUAL
2895: IFTRUE 2899
2897: GO 3113
2899: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2900: LD_ADDR_VAR 0 4
2904: PUSH
2905: LD_INT 35
2907: PUSH
2908: LD_INT 45
2910: PUSH
2911: LD_INT 46
2913: PUSH
2914: LD_INT 47
2916: PUSH
2917: LD_INT 82
2919: PUSH
2920: LD_INT 83
2922: PUSH
2923: LD_INT 84
2925: PUSH
2926: LD_INT 85
2928: PUSH
2929: LD_INT 86
2931: PUSH
2932: LD_INT 1
2934: PUSH
2935: LD_INT 2
2937: PUSH
2938: LD_INT 6
2940: PUSH
2941: LD_INT 15
2943: PUSH
2944: LD_INT 16
2946: PUSH
2947: LD_INT 7
2949: PUSH
2950: LD_INT 12
2952: PUSH
2953: LD_INT 13
2955: PUSH
2956: LD_INT 10
2958: PUSH
2959: LD_INT 14
2961: PUSH
2962: LD_INT 20
2964: PUSH
2965: LD_INT 21
2967: PUSH
2968: LD_INT 22
2970: PUSH
2971: LD_INT 25
2973: PUSH
2974: LD_INT 32
2976: PUSH
2977: LD_INT 27
2979: PUSH
2980: LD_INT 36
2982: PUSH
2983: LD_INT 69
2985: PUSH
2986: LD_INT 39
2988: PUSH
2989: LD_INT 34
2991: PUSH
2992: LD_INT 40
2994: PUSH
2995: LD_INT 48
2997: PUSH
2998: LD_INT 49
3000: PUSH
3001: LD_INT 50
3003: PUSH
3004: LD_INT 51
3006: PUSH
3007: LD_INT 52
3009: PUSH
3010: LD_INT 53
3012: PUSH
3013: LD_INT 54
3015: PUSH
3016: LD_INT 55
3018: PUSH
3019: LD_INT 56
3021: PUSH
3022: LD_INT 57
3024: PUSH
3025: LD_INT 58
3027: PUSH
3028: LD_INT 59
3030: PUSH
3031: LD_INT 60
3033: PUSH
3034: LD_INT 61
3036: PUSH
3037: LD_INT 62
3039: PUSH
3040: LD_INT 80
3042: PUSH
3043: LD_INT 82
3045: PUSH
3046: LD_INT 83
3048: PUSH
3049: LD_INT 84
3051: PUSH
3052: LD_INT 85
3054: PUSH
3055: LD_INT 86
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: ST_TO_ADDR
3111: GO 3578
3113: LD_INT 2
3115: DOUBLE
3116: EQUAL
3117: IFTRUE 3121
3119: GO 3347
3121: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3122: LD_ADDR_VAR 0 4
3126: PUSH
3127: LD_INT 35
3129: PUSH
3130: LD_INT 45
3132: PUSH
3133: LD_INT 46
3135: PUSH
3136: LD_INT 47
3138: PUSH
3139: LD_INT 82
3141: PUSH
3142: LD_INT 83
3144: PUSH
3145: LD_INT 84
3147: PUSH
3148: LD_INT 85
3150: PUSH
3151: LD_INT 87
3153: PUSH
3154: LD_INT 70
3156: PUSH
3157: LD_INT 1
3159: PUSH
3160: LD_INT 11
3162: PUSH
3163: LD_INT 3
3165: PUSH
3166: LD_INT 4
3168: PUSH
3169: LD_INT 5
3171: PUSH
3172: LD_INT 6
3174: PUSH
3175: LD_INT 15
3177: PUSH
3178: LD_INT 18
3180: PUSH
3181: LD_INT 7
3183: PUSH
3184: LD_INT 17
3186: PUSH
3187: LD_INT 8
3189: PUSH
3190: LD_INT 20
3192: PUSH
3193: LD_INT 21
3195: PUSH
3196: LD_INT 22
3198: PUSH
3199: LD_INT 72
3201: PUSH
3202: LD_INT 26
3204: PUSH
3205: LD_INT 69
3207: PUSH
3208: LD_INT 39
3210: PUSH
3211: LD_INT 40
3213: PUSH
3214: LD_INT 41
3216: PUSH
3217: LD_INT 42
3219: PUSH
3220: LD_INT 43
3222: PUSH
3223: LD_INT 48
3225: PUSH
3226: LD_INT 49
3228: PUSH
3229: LD_INT 50
3231: PUSH
3232: LD_INT 51
3234: PUSH
3235: LD_INT 52
3237: PUSH
3238: LD_INT 53
3240: PUSH
3241: LD_INT 54
3243: PUSH
3244: LD_INT 55
3246: PUSH
3247: LD_INT 56
3249: PUSH
3250: LD_INT 60
3252: PUSH
3253: LD_INT 61
3255: PUSH
3256: LD_INT 62
3258: PUSH
3259: LD_INT 66
3261: PUSH
3262: LD_INT 67
3264: PUSH
3265: LD_INT 68
3267: PUSH
3268: LD_INT 81
3270: PUSH
3271: LD_INT 82
3273: PUSH
3274: LD_INT 83
3276: PUSH
3277: LD_INT 84
3279: PUSH
3280: LD_INT 85
3282: PUSH
3283: LD_INT 87
3285: PUSH
3286: LD_INT 88
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: ST_TO_ADDR
3345: GO 3578
3347: LD_INT 3
3349: DOUBLE
3350: EQUAL
3351: IFTRUE 3355
3353: GO 3577
3355: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3356: LD_ADDR_VAR 0 4
3360: PUSH
3361: LD_INT 46
3363: PUSH
3364: LD_INT 47
3366: PUSH
3367: LD_INT 1
3369: PUSH
3370: LD_INT 2
3372: PUSH
3373: LD_INT 82
3375: PUSH
3376: LD_INT 83
3378: PUSH
3379: LD_INT 84
3381: PUSH
3382: LD_INT 85
3384: PUSH
3385: LD_INT 86
3387: PUSH
3388: LD_INT 11
3390: PUSH
3391: LD_INT 9
3393: PUSH
3394: LD_INT 20
3396: PUSH
3397: LD_INT 19
3399: PUSH
3400: LD_INT 21
3402: PUSH
3403: LD_INT 24
3405: PUSH
3406: LD_INT 22
3408: PUSH
3409: LD_INT 25
3411: PUSH
3412: LD_INT 28
3414: PUSH
3415: LD_INT 29
3417: PUSH
3418: LD_INT 30
3420: PUSH
3421: LD_INT 31
3423: PUSH
3424: LD_INT 37
3426: PUSH
3427: LD_INT 38
3429: PUSH
3430: LD_INT 32
3432: PUSH
3433: LD_INT 27
3435: PUSH
3436: LD_INT 33
3438: PUSH
3439: LD_INT 69
3441: PUSH
3442: LD_INT 39
3444: PUSH
3445: LD_INT 34
3447: PUSH
3448: LD_INT 40
3450: PUSH
3451: LD_INT 71
3453: PUSH
3454: LD_INT 23
3456: PUSH
3457: LD_INT 44
3459: PUSH
3460: LD_INT 48
3462: PUSH
3463: LD_INT 49
3465: PUSH
3466: LD_INT 50
3468: PUSH
3469: LD_INT 51
3471: PUSH
3472: LD_INT 52
3474: PUSH
3475: LD_INT 53
3477: PUSH
3478: LD_INT 54
3480: PUSH
3481: LD_INT 55
3483: PUSH
3484: LD_INT 56
3486: PUSH
3487: LD_INT 57
3489: PUSH
3490: LD_INT 58
3492: PUSH
3493: LD_INT 59
3495: PUSH
3496: LD_INT 63
3498: PUSH
3499: LD_INT 64
3501: PUSH
3502: LD_INT 65
3504: PUSH
3505: LD_INT 82
3507: PUSH
3508: LD_INT 83
3510: PUSH
3511: LD_INT 84
3513: PUSH
3514: LD_INT 85
3516: PUSH
3517: LD_INT 86
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: ST_TO_ADDR
3575: GO 3578
3577: POP
// if state > - 1 and state < 3 then
3578: LD_VAR 0 3
3582: PUSH
3583: LD_INT 1
3585: NEG
3586: GREATER
3587: PUSH
3588: LD_VAR 0 3
3592: PUSH
3593: LD_INT 3
3595: LESS
3596: AND
3597: IFFALSE 3654
// for i in result do
3599: LD_ADDR_VAR 0 5
3603: PUSH
3604: LD_VAR 0 4
3608: PUSH
3609: FOR_IN
3610: IFFALSE 3652
// if GetTech ( i , side ) <> state then
3612: LD_VAR 0 5
3616: PPUSH
3617: LD_VAR 0 1
3621: PPUSH
3622: CALL_OW 321
3626: PUSH
3627: LD_VAR 0 3
3631: NONEQUAL
3632: IFFALSE 3650
// result := result diff i ;
3634: LD_ADDR_VAR 0 4
3638: PUSH
3639: LD_VAR 0 4
3643: PUSH
3644: LD_VAR 0 5
3648: DIFF
3649: ST_TO_ADDR
3650: GO 3609
3652: POP
3653: POP
// end ;
3654: LD_VAR 0 4
3658: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3659: LD_INT 0
3661: PPUSH
3662: PPUSH
3663: PPUSH
// result := true ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: LD_INT 1
3671: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3672: LD_ADDR_VAR 0 5
3676: PUSH
3677: LD_VAR 0 2
3681: PPUSH
3682: CALL_OW 480
3686: ST_TO_ADDR
// if not tmp then
3687: LD_VAR 0 5
3691: NOT
3692: IFFALSE 3696
// exit ;
3694: GO 3745
// for i in tmp do
3696: LD_ADDR_VAR 0 4
3700: PUSH
3701: LD_VAR 0 5
3705: PUSH
3706: FOR_IN
3707: IFFALSE 3743
// if GetTech ( i , side ) <> state_researched then
3709: LD_VAR 0 4
3713: PPUSH
3714: LD_VAR 0 1
3718: PPUSH
3719: CALL_OW 321
3723: PUSH
3724: LD_INT 2
3726: NONEQUAL
3727: IFFALSE 3741
// begin result := false ;
3729: LD_ADDR_VAR 0 3
3733: PUSH
3734: LD_INT 0
3736: ST_TO_ADDR
// exit ;
3737: POP
3738: POP
3739: GO 3745
// end ;
3741: GO 3706
3743: POP
3744: POP
// end ;
3745: LD_VAR 0 3
3749: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3750: LD_INT 0
3752: PPUSH
3753: PPUSH
3754: PPUSH
3755: PPUSH
3756: PPUSH
3757: PPUSH
3758: PPUSH
3759: PPUSH
3760: PPUSH
3761: PPUSH
3762: PPUSH
3763: PPUSH
3764: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3765: LD_VAR 0 1
3769: NOT
3770: PUSH
3771: LD_VAR 0 1
3775: PPUSH
3776: CALL_OW 257
3780: PUSH
3781: LD_INT 9
3783: NONEQUAL
3784: OR
3785: IFFALSE 3789
// exit ;
3787: GO 4362
// side := GetSide ( unit ) ;
3789: LD_ADDR_VAR 0 9
3793: PUSH
3794: LD_VAR 0 1
3798: PPUSH
3799: CALL_OW 255
3803: ST_TO_ADDR
// tech_space := tech_spacanom ;
3804: LD_ADDR_VAR 0 12
3808: PUSH
3809: LD_INT 29
3811: ST_TO_ADDR
// tech_time := tech_taurad ;
3812: LD_ADDR_VAR 0 13
3816: PUSH
3817: LD_INT 28
3819: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3820: LD_ADDR_VAR 0 11
3824: PUSH
3825: LD_VAR 0 1
3829: PPUSH
3830: CALL_OW 310
3834: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3835: LD_VAR 0 11
3839: PPUSH
3840: CALL_OW 247
3844: PUSH
3845: LD_INT 2
3847: EQUAL
3848: IFFALSE 3852
// exit ;
3850: GO 4362
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3852: LD_ADDR_VAR 0 8
3856: PUSH
3857: LD_INT 81
3859: PUSH
3860: LD_VAR 0 9
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: PUSH
3869: LD_INT 3
3871: PUSH
3872: LD_INT 21
3874: PUSH
3875: LD_INT 3
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PPUSH
3890: CALL_OW 69
3894: ST_TO_ADDR
// if not tmp then
3895: LD_VAR 0 8
3899: NOT
3900: IFFALSE 3904
// exit ;
3902: GO 4362
// if in_unit then
3904: LD_VAR 0 11
3908: IFFALSE 3932
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3910: LD_ADDR_VAR 0 10
3914: PUSH
3915: LD_VAR 0 8
3919: PPUSH
3920: LD_VAR 0 11
3924: PPUSH
3925: CALL_OW 74
3929: ST_TO_ADDR
3930: GO 3952
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3932: LD_ADDR_VAR 0 10
3936: PUSH
3937: LD_VAR 0 8
3941: PPUSH
3942: LD_VAR 0 1
3946: PPUSH
3947: CALL_OW 74
3951: ST_TO_ADDR
// if not enemy then
3952: LD_VAR 0 10
3956: NOT
3957: IFFALSE 3961
// exit ;
3959: GO 4362
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3961: LD_VAR 0 11
3965: PUSH
3966: LD_VAR 0 11
3970: PPUSH
3971: LD_VAR 0 10
3975: PPUSH
3976: CALL_OW 296
3980: PUSH
3981: LD_INT 13
3983: GREATER
3984: AND
3985: PUSH
3986: LD_VAR 0 1
3990: PPUSH
3991: LD_VAR 0 10
3995: PPUSH
3996: CALL_OW 296
4000: PUSH
4001: LD_INT 12
4003: GREATER
4004: OR
4005: IFFALSE 4009
// exit ;
4007: GO 4362
// missile := [ 1 ] ;
4009: LD_ADDR_VAR 0 14
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: EMPTY
4018: LIST
4019: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4020: LD_VAR 0 9
4024: PPUSH
4025: LD_VAR 0 12
4029: PPUSH
4030: CALL_OW 325
4034: IFFALSE 4063
// missile := Replace ( missile , missile + 1 , 2 ) ;
4036: LD_ADDR_VAR 0 14
4040: PUSH
4041: LD_VAR 0 14
4045: PPUSH
4046: LD_VAR 0 14
4050: PUSH
4051: LD_INT 1
4053: PLUS
4054: PPUSH
4055: LD_INT 2
4057: PPUSH
4058: CALL_OW 1
4062: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4063: LD_VAR 0 9
4067: PPUSH
4068: LD_VAR 0 13
4072: PPUSH
4073: CALL_OW 325
4077: PUSH
4078: LD_VAR 0 10
4082: PPUSH
4083: CALL_OW 255
4087: PPUSH
4088: LD_VAR 0 13
4092: PPUSH
4093: CALL_OW 325
4097: NOT
4098: AND
4099: IFFALSE 4128
// missile := Replace ( missile , missile + 1 , 3 ) ;
4101: LD_ADDR_VAR 0 14
4105: PUSH
4106: LD_VAR 0 14
4110: PPUSH
4111: LD_VAR 0 14
4115: PUSH
4116: LD_INT 1
4118: PLUS
4119: PPUSH
4120: LD_INT 3
4122: PPUSH
4123: CALL_OW 1
4127: ST_TO_ADDR
// if missile < 2 then
4128: LD_VAR 0 14
4132: PUSH
4133: LD_INT 2
4135: LESS
4136: IFFALSE 4140
// exit ;
4138: GO 4362
// x := GetX ( enemy ) ;
4140: LD_ADDR_VAR 0 4
4144: PUSH
4145: LD_VAR 0 10
4149: PPUSH
4150: CALL_OW 250
4154: ST_TO_ADDR
// y := GetY ( enemy ) ;
4155: LD_ADDR_VAR 0 5
4159: PUSH
4160: LD_VAR 0 10
4164: PPUSH
4165: CALL_OW 251
4169: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4170: LD_ADDR_VAR 0 6
4174: PUSH
4175: LD_VAR 0 4
4179: PUSH
4180: LD_INT 1
4182: NEG
4183: PPUSH
4184: LD_INT 1
4186: PPUSH
4187: CALL_OW 12
4191: PLUS
4192: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4193: LD_ADDR_VAR 0 7
4197: PUSH
4198: LD_VAR 0 5
4202: PUSH
4203: LD_INT 1
4205: NEG
4206: PPUSH
4207: LD_INT 1
4209: PPUSH
4210: CALL_OW 12
4214: PLUS
4215: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4216: LD_VAR 0 6
4220: PPUSH
4221: LD_VAR 0 7
4225: PPUSH
4226: CALL_OW 488
4230: NOT
4231: IFFALSE 4253
// begin _x := x ;
4233: LD_ADDR_VAR 0 6
4237: PUSH
4238: LD_VAR 0 4
4242: ST_TO_ADDR
// _y := y ;
4243: LD_ADDR_VAR 0 7
4247: PUSH
4248: LD_VAR 0 5
4252: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4253: LD_ADDR_VAR 0 3
4257: PUSH
4258: LD_INT 1
4260: PPUSH
4261: LD_VAR 0 14
4265: PPUSH
4266: CALL_OW 12
4270: ST_TO_ADDR
// case i of 1 :
4271: LD_VAR 0 3
4275: PUSH
4276: LD_INT 1
4278: DOUBLE
4279: EQUAL
4280: IFTRUE 4284
4282: GO 4301
4284: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4285: LD_VAR 0 1
4289: PPUSH
4290: LD_VAR 0 10
4294: PPUSH
4295: CALL_OW 115
4299: GO 4362
4301: LD_INT 2
4303: DOUBLE
4304: EQUAL
4305: IFTRUE 4309
4307: GO 4331
4309: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4310: LD_VAR 0 1
4314: PPUSH
4315: LD_VAR 0 6
4319: PPUSH
4320: LD_VAR 0 7
4324: PPUSH
4325: CALL_OW 153
4329: GO 4362
4331: LD_INT 3
4333: DOUBLE
4334: EQUAL
4335: IFTRUE 4339
4337: GO 4361
4339: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4340: LD_VAR 0 1
4344: PPUSH
4345: LD_VAR 0 6
4349: PPUSH
4350: LD_VAR 0 7
4354: PPUSH
4355: CALL_OW 154
4359: GO 4362
4361: POP
// end ;
4362: LD_VAR 0 2
4366: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4367: LD_INT 0
4369: PPUSH
4370: PPUSH
4371: PPUSH
4372: PPUSH
4373: PPUSH
4374: PPUSH
// if not unit or not building then
4375: LD_VAR 0 1
4379: NOT
4380: PUSH
4381: LD_VAR 0 2
4385: NOT
4386: OR
4387: IFFALSE 4391
// exit ;
4389: GO 4549
// x := GetX ( building ) ;
4391: LD_ADDR_VAR 0 5
4395: PUSH
4396: LD_VAR 0 2
4400: PPUSH
4401: CALL_OW 250
4405: ST_TO_ADDR
// y := GetY ( building ) ;
4406: LD_ADDR_VAR 0 6
4410: PUSH
4411: LD_VAR 0 2
4415: PPUSH
4416: CALL_OW 251
4420: ST_TO_ADDR
// for i = 0 to 5 do
4421: LD_ADDR_VAR 0 4
4425: PUSH
4426: DOUBLE
4427: LD_INT 0
4429: DEC
4430: ST_TO_ADDR
4431: LD_INT 5
4433: PUSH
4434: FOR_TO
4435: IFFALSE 4547
// begin _x := ShiftX ( x , i , 3 ) ;
4437: LD_ADDR_VAR 0 7
4441: PUSH
4442: LD_VAR 0 5
4446: PPUSH
4447: LD_VAR 0 4
4451: PPUSH
4452: LD_INT 3
4454: PPUSH
4455: CALL_OW 272
4459: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4460: LD_ADDR_VAR 0 8
4464: PUSH
4465: LD_VAR 0 6
4469: PPUSH
4470: LD_VAR 0 4
4474: PPUSH
4475: LD_INT 3
4477: PPUSH
4478: CALL_OW 273
4482: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4483: LD_VAR 0 7
4487: PPUSH
4488: LD_VAR 0 8
4492: PPUSH
4493: CALL_OW 488
4497: NOT
4498: IFFALSE 4502
// continue ;
4500: GO 4434
// if HexInfo ( _x , _y ) = 0 then
4502: LD_VAR 0 7
4506: PPUSH
4507: LD_VAR 0 8
4511: PPUSH
4512: CALL_OW 428
4516: PUSH
4517: LD_INT 0
4519: EQUAL
4520: IFFALSE 4545
// begin ComMoveXY ( unit , _x , _y ) ;
4522: LD_VAR 0 1
4526: PPUSH
4527: LD_VAR 0 7
4531: PPUSH
4532: LD_VAR 0 8
4536: PPUSH
4537: CALL_OW 111
// exit ;
4541: POP
4542: POP
4543: GO 4549
// end ; end ;
4545: GO 4434
4547: POP
4548: POP
// end ;
4549: LD_VAR 0 3
4553: RET
// export function ScanBase ( side , base_area ) ; begin
4554: LD_INT 0
4556: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4557: LD_ADDR_VAR 0 3
4561: PUSH
4562: LD_VAR 0 2
4566: PPUSH
4567: LD_INT 81
4569: PUSH
4570: LD_VAR 0 1
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PPUSH
4579: CALL_OW 70
4583: ST_TO_ADDR
// end ;
4584: LD_VAR 0 3
4588: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4589: LD_INT 0
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
// result := false ;
4595: LD_ADDR_VAR 0 2
4599: PUSH
4600: LD_INT 0
4602: ST_TO_ADDR
// side := GetSide ( unit ) ;
4603: LD_ADDR_VAR 0 3
4607: PUSH
4608: LD_VAR 0 1
4612: PPUSH
4613: CALL_OW 255
4617: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4618: LD_ADDR_VAR 0 4
4622: PUSH
4623: LD_VAR 0 1
4627: PPUSH
4628: CALL_OW 248
4632: ST_TO_ADDR
// case nat of 1 :
4633: LD_VAR 0 4
4637: PUSH
4638: LD_INT 1
4640: DOUBLE
4641: EQUAL
4642: IFTRUE 4646
4644: GO 4657
4646: POP
// tech := tech_lassight ; 2 :
4647: LD_ADDR_VAR 0 5
4651: PUSH
4652: LD_INT 12
4654: ST_TO_ADDR
4655: GO 4696
4657: LD_INT 2
4659: DOUBLE
4660: EQUAL
4661: IFTRUE 4665
4663: GO 4676
4665: POP
// tech := tech_mortar ; 3 :
4666: LD_ADDR_VAR 0 5
4670: PUSH
4671: LD_INT 41
4673: ST_TO_ADDR
4674: GO 4696
4676: LD_INT 3
4678: DOUBLE
4679: EQUAL
4680: IFTRUE 4684
4682: GO 4695
4684: POP
// tech := tech_bazooka ; end ;
4685: LD_ADDR_VAR 0 5
4689: PUSH
4690: LD_INT 44
4692: ST_TO_ADDR
4693: GO 4696
4695: POP
// if Researched ( side , tech ) then
4696: LD_VAR 0 3
4700: PPUSH
4701: LD_VAR 0 5
4705: PPUSH
4706: CALL_OW 325
4710: IFFALSE 4737
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4712: LD_ADDR_VAR 0 2
4716: PUSH
4717: LD_INT 5
4719: PUSH
4720: LD_INT 8
4722: PUSH
4723: LD_INT 9
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: LIST
4730: PUSH
4731: LD_VAR 0 4
4735: ARRAY
4736: ST_TO_ADDR
// end ;
4737: LD_VAR 0 2
4741: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4742: LD_INT 0
4744: PPUSH
4745: PPUSH
4746: PPUSH
// if not mines then
4747: LD_VAR 0 2
4751: NOT
4752: IFFALSE 4756
// exit ;
4754: GO 4900
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4756: LD_ADDR_VAR 0 5
4760: PUSH
4761: LD_INT 81
4763: PUSH
4764: LD_VAR 0 1
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: LD_INT 3
4775: PUSH
4776: LD_INT 21
4778: PUSH
4779: LD_INT 3
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PPUSH
4794: CALL_OW 69
4798: ST_TO_ADDR
// for i in mines do
4799: LD_ADDR_VAR 0 4
4803: PUSH
4804: LD_VAR 0 2
4808: PUSH
4809: FOR_IN
4810: IFFALSE 4898
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4812: LD_VAR 0 4
4816: PUSH
4817: LD_INT 1
4819: ARRAY
4820: PPUSH
4821: LD_VAR 0 4
4825: PUSH
4826: LD_INT 2
4828: ARRAY
4829: PPUSH
4830: CALL_OW 458
4834: NOT
4835: IFFALSE 4839
// continue ;
4837: GO 4809
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4839: LD_VAR 0 4
4843: PUSH
4844: LD_INT 1
4846: ARRAY
4847: PPUSH
4848: LD_VAR 0 4
4852: PUSH
4853: LD_INT 2
4855: ARRAY
4856: PPUSH
4857: CALL_OW 428
4861: PUSH
4862: LD_VAR 0 5
4866: IN
4867: IFFALSE 4896
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4869: LD_VAR 0 4
4873: PUSH
4874: LD_INT 1
4876: ARRAY
4877: PPUSH
4878: LD_VAR 0 4
4882: PUSH
4883: LD_INT 2
4885: ARRAY
4886: PPUSH
4887: LD_VAR 0 1
4891: PPUSH
4892: CALL_OW 456
// end ;
4896: GO 4809
4898: POP
4899: POP
// end ;
4900: LD_VAR 0 3
4904: RET
// export function Count ( array ) ; begin
4905: LD_INT 0
4907: PPUSH
// result := array + 0 ;
4908: LD_ADDR_VAR 0 2
4912: PUSH
4913: LD_VAR 0 1
4917: PUSH
4918: LD_INT 0
4920: PLUS
4921: ST_TO_ADDR
// end ;
4922: LD_VAR 0 2
4926: RET
// export function IsEmpty ( building ) ; begin
4927: LD_INT 0
4929: PPUSH
// if not building then
4930: LD_VAR 0 1
4934: NOT
4935: IFFALSE 4939
// exit ;
4937: GO 4982
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4939: LD_ADDR_VAR 0 2
4943: PUSH
4944: LD_VAR 0 1
4948: PUSH
4949: LD_INT 22
4951: PUSH
4952: LD_VAR 0 1
4956: PPUSH
4957: CALL_OW 255
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 58
4968: PUSH
4969: EMPTY
4970: LIST
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PPUSH
4976: CALL_OW 69
4980: IN
4981: ST_TO_ADDR
// end ;
4982: LD_VAR 0 2
4986: RET
// export function IsNotFull ( building ) ; var places ; begin
4987: LD_INT 0
4989: PPUSH
4990: PPUSH
// if not building then
4991: LD_VAR 0 1
4995: NOT
4996: IFFALSE 5000
// exit ;
4998: GO 5028
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5000: LD_ADDR_VAR 0 2
5004: PUSH
5005: LD_VAR 0 1
5009: PPUSH
5010: LD_INT 3
5012: PUSH
5013: LD_INT 62
5015: PUSH
5016: EMPTY
5017: LIST
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: PPUSH
5023: CALL_OW 72
5027: ST_TO_ADDR
// end ;
5028: LD_VAR 0 2
5032: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5033: LD_INT 0
5035: PPUSH
5036: PPUSH
5037: PPUSH
5038: PPUSH
// tmp := [ ] ;
5039: LD_ADDR_VAR 0 3
5043: PUSH
5044: EMPTY
5045: ST_TO_ADDR
// list := [ ] ;
5046: LD_ADDR_VAR 0 5
5050: PUSH
5051: EMPTY
5052: ST_TO_ADDR
// for i = 16 to 25 do
5053: LD_ADDR_VAR 0 4
5057: PUSH
5058: DOUBLE
5059: LD_INT 16
5061: DEC
5062: ST_TO_ADDR
5063: LD_INT 25
5065: PUSH
5066: FOR_TO
5067: IFFALSE 5140
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5069: LD_ADDR_VAR 0 3
5073: PUSH
5074: LD_VAR 0 3
5078: PUSH
5079: LD_INT 22
5081: PUSH
5082: LD_VAR 0 1
5086: PPUSH
5087: CALL_OW 255
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 91
5098: PUSH
5099: LD_VAR 0 1
5103: PUSH
5104: LD_INT 6
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: LIST
5111: PUSH
5112: LD_INT 30
5114: PUSH
5115: LD_VAR 0 4
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: LIST
5128: PUSH
5129: EMPTY
5130: LIST
5131: PPUSH
5132: CALL_OW 69
5136: ADD
5137: ST_TO_ADDR
5138: GO 5066
5140: POP
5141: POP
// for i = 1 to tmp do
5142: LD_ADDR_VAR 0 4
5146: PUSH
5147: DOUBLE
5148: LD_INT 1
5150: DEC
5151: ST_TO_ADDR
5152: LD_VAR 0 3
5156: PUSH
5157: FOR_TO
5158: IFFALSE 5246
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5160: LD_ADDR_VAR 0 5
5164: PUSH
5165: LD_VAR 0 5
5169: PUSH
5170: LD_VAR 0 3
5174: PUSH
5175: LD_VAR 0 4
5179: ARRAY
5180: PPUSH
5181: CALL_OW 266
5185: PUSH
5186: LD_VAR 0 3
5190: PUSH
5191: LD_VAR 0 4
5195: ARRAY
5196: PPUSH
5197: CALL_OW 250
5201: PUSH
5202: LD_VAR 0 3
5206: PUSH
5207: LD_VAR 0 4
5211: ARRAY
5212: PPUSH
5213: CALL_OW 251
5217: PUSH
5218: LD_VAR 0 3
5222: PUSH
5223: LD_VAR 0 4
5227: ARRAY
5228: PPUSH
5229: CALL_OW 254
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: PUSH
5240: EMPTY
5241: LIST
5242: ADD
5243: ST_TO_ADDR
5244: GO 5157
5246: POP
5247: POP
// result := list ;
5248: LD_ADDR_VAR 0 2
5252: PUSH
5253: LD_VAR 0 5
5257: ST_TO_ADDR
// end ;
5258: LD_VAR 0 2
5262: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5263: LD_INT 0
5265: PPUSH
5266: PPUSH
5267: PPUSH
5268: PPUSH
5269: PPUSH
5270: PPUSH
5271: PPUSH
// if not factory then
5272: LD_VAR 0 1
5276: NOT
5277: IFFALSE 5281
// exit ;
5279: GO 5874
// if control = control_apeman then
5281: LD_VAR 0 4
5285: PUSH
5286: LD_INT 5
5288: EQUAL
5289: IFFALSE 5398
// begin tmp := UnitsInside ( factory ) ;
5291: LD_ADDR_VAR 0 8
5295: PUSH
5296: LD_VAR 0 1
5300: PPUSH
5301: CALL_OW 313
5305: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5306: LD_VAR 0 8
5310: PPUSH
5311: LD_INT 25
5313: PUSH
5314: LD_INT 12
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PPUSH
5321: CALL_OW 72
5325: NOT
5326: IFFALSE 5336
// control := control_manual ;
5328: LD_ADDR_VAR 0 4
5332: PUSH
5333: LD_INT 1
5335: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5336: LD_ADDR_VAR 0 8
5340: PUSH
5341: LD_VAR 0 1
5345: PPUSH
5346: CALL 5033 0 1
5350: ST_TO_ADDR
// if tmp then
5351: LD_VAR 0 8
5355: IFFALSE 5398
// begin for i in tmp do
5357: LD_ADDR_VAR 0 7
5361: PUSH
5362: LD_VAR 0 8
5366: PUSH
5367: FOR_IN
5368: IFFALSE 5396
// if i [ 1 ] = b_ext_radio then
5370: LD_VAR 0 7
5374: PUSH
5375: LD_INT 1
5377: ARRAY
5378: PUSH
5379: LD_INT 22
5381: EQUAL
5382: IFFALSE 5394
// begin control := control_remote ;
5384: LD_ADDR_VAR 0 4
5388: PUSH
5389: LD_INT 2
5391: ST_TO_ADDR
// break ;
5392: GO 5396
// end ;
5394: GO 5367
5396: POP
5397: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5398: LD_VAR 0 1
5402: PPUSH
5403: LD_VAR 0 2
5407: PPUSH
5408: LD_VAR 0 3
5412: PPUSH
5413: LD_VAR 0 4
5417: PPUSH
5418: LD_VAR 0 5
5422: PPUSH
5423: CALL_OW 448
5427: IFFALSE 5462
// begin result := [ chassis , engine , control , weapon ] ;
5429: LD_ADDR_VAR 0 6
5433: PUSH
5434: LD_VAR 0 2
5438: PUSH
5439: LD_VAR 0 3
5443: PUSH
5444: LD_VAR 0 4
5448: PUSH
5449: LD_VAR 0 5
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: ST_TO_ADDR
// exit ;
5460: GO 5874
// end ; _chassis := AvailableChassisList ( factory ) ;
5462: LD_ADDR_VAR 0 9
5466: PUSH
5467: LD_VAR 0 1
5471: PPUSH
5472: CALL_OW 475
5476: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5477: LD_ADDR_VAR 0 11
5481: PUSH
5482: LD_VAR 0 1
5486: PPUSH
5487: CALL_OW 476
5491: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5492: LD_ADDR_VAR 0 12
5496: PUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 477
5506: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5507: LD_ADDR_VAR 0 10
5511: PUSH
5512: LD_VAR 0 1
5516: PPUSH
5517: CALL_OW 478
5521: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5522: LD_VAR 0 9
5526: NOT
5527: PUSH
5528: LD_VAR 0 11
5532: NOT
5533: OR
5534: PUSH
5535: LD_VAR 0 12
5539: NOT
5540: OR
5541: PUSH
5542: LD_VAR 0 10
5546: NOT
5547: OR
5548: IFFALSE 5583
// begin result := [ chassis , engine , control , weapon ] ;
5550: LD_ADDR_VAR 0 6
5554: PUSH
5555: LD_VAR 0 2
5559: PUSH
5560: LD_VAR 0 3
5564: PUSH
5565: LD_VAR 0 4
5569: PUSH
5570: LD_VAR 0 5
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: ST_TO_ADDR
// exit ;
5581: GO 5874
// end ; if not chassis in _chassis then
5583: LD_VAR 0 2
5587: PUSH
5588: LD_VAR 0 9
5592: IN
5593: NOT
5594: IFFALSE 5620
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5596: LD_ADDR_VAR 0 2
5600: PUSH
5601: LD_VAR 0 9
5605: PUSH
5606: LD_INT 1
5608: PPUSH
5609: LD_VAR 0 9
5613: PPUSH
5614: CALL_OW 12
5618: ARRAY
5619: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5620: LD_VAR 0 2
5624: PPUSH
5625: LD_VAR 0 3
5629: PPUSH
5630: CALL 5879 0 2
5634: NOT
5635: IFFALSE 5694
// repeat engine := _engine [ 1 ] ;
5637: LD_ADDR_VAR 0 3
5641: PUSH
5642: LD_VAR 0 11
5646: PUSH
5647: LD_INT 1
5649: ARRAY
5650: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5651: LD_ADDR_VAR 0 11
5655: PUSH
5656: LD_VAR 0 11
5660: PPUSH
5661: LD_INT 1
5663: PPUSH
5664: CALL_OW 3
5668: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5669: LD_VAR 0 2
5673: PPUSH
5674: LD_VAR 0 3
5678: PPUSH
5679: CALL 5879 0 2
5683: PUSH
5684: LD_VAR 0 11
5688: PUSH
5689: EMPTY
5690: EQUAL
5691: OR
5692: IFFALSE 5637
// if not control in _control then
5694: LD_VAR 0 4
5698: PUSH
5699: LD_VAR 0 12
5703: IN
5704: NOT
5705: IFFALSE 5731
// control := _control [ rand ( 1 , _control ) ] ;
5707: LD_ADDR_VAR 0 4
5711: PUSH
5712: LD_VAR 0 12
5716: PUSH
5717: LD_INT 1
5719: PPUSH
5720: LD_VAR 0 12
5724: PPUSH
5725: CALL_OW 12
5729: ARRAY
5730: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5731: LD_VAR 0 2
5735: PPUSH
5736: LD_VAR 0 5
5740: PPUSH
5741: CALL 6099 0 2
5745: NOT
5746: IFFALSE 5805
// repeat weapon := _weapon [ 1 ] ;
5748: LD_ADDR_VAR 0 5
5752: PUSH
5753: LD_VAR 0 10
5757: PUSH
5758: LD_INT 1
5760: ARRAY
5761: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5762: LD_ADDR_VAR 0 10
5766: PUSH
5767: LD_VAR 0 10
5771: PPUSH
5772: LD_INT 1
5774: PPUSH
5775: CALL_OW 3
5779: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5780: LD_VAR 0 2
5784: PPUSH
5785: LD_VAR 0 5
5789: PPUSH
5790: CALL 6099 0 2
5794: PUSH
5795: LD_VAR 0 10
5799: PUSH
5800: EMPTY
5801: EQUAL
5802: OR
5803: IFFALSE 5748
// result := [ ] ;
5805: LD_ADDR_VAR 0 6
5809: PUSH
5810: EMPTY
5811: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5812: LD_VAR 0 1
5816: PPUSH
5817: LD_VAR 0 2
5821: PPUSH
5822: LD_VAR 0 3
5826: PPUSH
5827: LD_VAR 0 4
5831: PPUSH
5832: LD_VAR 0 5
5836: PPUSH
5837: CALL_OW 448
5841: IFFALSE 5874
// result := [ chassis , engine , control , weapon ] ;
5843: LD_ADDR_VAR 0 6
5847: PUSH
5848: LD_VAR 0 2
5852: PUSH
5853: LD_VAR 0 3
5857: PUSH
5858: LD_VAR 0 4
5862: PUSH
5863: LD_VAR 0 5
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: ST_TO_ADDR
// end ;
5874: LD_VAR 0 6
5878: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5879: LD_INT 0
5881: PPUSH
// if not chassis or not engine then
5882: LD_VAR 0 1
5886: NOT
5887: PUSH
5888: LD_VAR 0 2
5892: NOT
5893: OR
5894: IFFALSE 5898
// exit ;
5896: GO 6094
// case engine of engine_solar :
5898: LD_VAR 0 2
5902: PUSH
5903: LD_INT 2
5905: DOUBLE
5906: EQUAL
5907: IFTRUE 5911
5909: GO 5949
5911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5912: LD_ADDR_VAR 0 3
5916: PUSH
5917: LD_INT 11
5919: PUSH
5920: LD_INT 12
5922: PUSH
5923: LD_INT 13
5925: PUSH
5926: LD_INT 14
5928: PUSH
5929: LD_INT 1
5931: PUSH
5932: LD_INT 2
5934: PUSH
5935: LD_INT 3
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: ST_TO_ADDR
5947: GO 6078
5949: LD_INT 1
5951: DOUBLE
5952: EQUAL
5953: IFTRUE 5957
5955: GO 6019
5957: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5958: LD_ADDR_VAR 0 3
5962: PUSH
5963: LD_INT 11
5965: PUSH
5966: LD_INT 12
5968: PUSH
5969: LD_INT 13
5971: PUSH
5972: LD_INT 14
5974: PUSH
5975: LD_INT 1
5977: PUSH
5978: LD_INT 2
5980: PUSH
5981: LD_INT 3
5983: PUSH
5984: LD_INT 4
5986: PUSH
5987: LD_INT 5
5989: PUSH
5990: LD_INT 21
5992: PUSH
5993: LD_INT 23
5995: PUSH
5996: LD_INT 22
5998: PUSH
5999: LD_INT 24
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: ST_TO_ADDR
6017: GO 6078
6019: LD_INT 3
6021: DOUBLE
6022: EQUAL
6023: IFTRUE 6027
6025: GO 6077
6027: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6028: LD_ADDR_VAR 0 3
6032: PUSH
6033: LD_INT 13
6035: PUSH
6036: LD_INT 14
6038: PUSH
6039: LD_INT 2
6041: PUSH
6042: LD_INT 3
6044: PUSH
6045: LD_INT 4
6047: PUSH
6048: LD_INT 5
6050: PUSH
6051: LD_INT 21
6053: PUSH
6054: LD_INT 22
6056: PUSH
6057: LD_INT 23
6059: PUSH
6060: LD_INT 24
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: ST_TO_ADDR
6075: GO 6078
6077: POP
// result := ( chassis in result ) ;
6078: LD_ADDR_VAR 0 3
6082: PUSH
6083: LD_VAR 0 1
6087: PUSH
6088: LD_VAR 0 3
6092: IN
6093: ST_TO_ADDR
// end ;
6094: LD_VAR 0 3
6098: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6099: LD_INT 0
6101: PPUSH
// if not chassis or not weapon then
6102: LD_VAR 0 1
6106: NOT
6107: PUSH
6108: LD_VAR 0 2
6112: NOT
6113: OR
6114: IFFALSE 6118
// exit ;
6116: GO 7178
// case weapon of us_machine_gun :
6118: LD_VAR 0 2
6122: PUSH
6123: LD_INT 2
6125: DOUBLE
6126: EQUAL
6127: IFTRUE 6131
6129: GO 6161
6131: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6132: LD_ADDR_VAR 0 3
6136: PUSH
6137: LD_INT 1
6139: PUSH
6140: LD_INT 2
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: LD_INT 4
6148: PUSH
6149: LD_INT 5
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: ST_TO_ADDR
6159: GO 7162
6161: LD_INT 3
6163: DOUBLE
6164: EQUAL
6165: IFTRUE 6169
6167: GO 6199
6169: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6170: LD_ADDR_VAR 0 3
6174: PUSH
6175: LD_INT 1
6177: PUSH
6178: LD_INT 2
6180: PUSH
6181: LD_INT 3
6183: PUSH
6184: LD_INT 4
6186: PUSH
6187: LD_INT 5
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: ST_TO_ADDR
6197: GO 7162
6199: LD_INT 11
6201: DOUBLE
6202: EQUAL
6203: IFTRUE 6207
6205: GO 6237
6207: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6208: LD_ADDR_VAR 0 3
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: LD_INT 2
6218: PUSH
6219: LD_INT 3
6221: PUSH
6222: LD_INT 4
6224: PUSH
6225: LD_INT 5
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: ST_TO_ADDR
6235: GO 7162
6237: LD_INT 4
6239: DOUBLE
6240: EQUAL
6241: IFTRUE 6245
6243: GO 6271
6245: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6246: LD_ADDR_VAR 0 3
6250: PUSH
6251: LD_INT 2
6253: PUSH
6254: LD_INT 3
6256: PUSH
6257: LD_INT 4
6259: PUSH
6260: LD_INT 5
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: ST_TO_ADDR
6269: GO 7162
6271: LD_INT 5
6273: DOUBLE
6274: EQUAL
6275: IFTRUE 6279
6277: GO 6305
6279: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: LD_INT 2
6287: PUSH
6288: LD_INT 3
6290: PUSH
6291: LD_INT 4
6293: PUSH
6294: LD_INT 5
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: ST_TO_ADDR
6303: GO 7162
6305: LD_INT 9
6307: DOUBLE
6308: EQUAL
6309: IFTRUE 6313
6311: GO 6339
6313: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6314: LD_ADDR_VAR 0 3
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: LD_INT 3
6324: PUSH
6325: LD_INT 4
6327: PUSH
6328: LD_INT 5
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: ST_TO_ADDR
6337: GO 7162
6339: LD_INT 7
6341: DOUBLE
6342: EQUAL
6343: IFTRUE 6347
6345: GO 6373
6347: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6348: LD_ADDR_VAR 0 3
6352: PUSH
6353: LD_INT 2
6355: PUSH
6356: LD_INT 3
6358: PUSH
6359: LD_INT 4
6361: PUSH
6362: LD_INT 5
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: ST_TO_ADDR
6371: GO 7162
6373: LD_INT 12
6375: DOUBLE
6376: EQUAL
6377: IFTRUE 6381
6379: GO 6407
6381: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6382: LD_ADDR_VAR 0 3
6386: PUSH
6387: LD_INT 2
6389: PUSH
6390: LD_INT 3
6392: PUSH
6393: LD_INT 4
6395: PUSH
6396: LD_INT 5
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: ST_TO_ADDR
6405: GO 7162
6407: LD_INT 13
6409: DOUBLE
6410: EQUAL
6411: IFTRUE 6415
6413: GO 6441
6415: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6416: LD_ADDR_VAR 0 3
6420: PUSH
6421: LD_INT 2
6423: PUSH
6424: LD_INT 3
6426: PUSH
6427: LD_INT 4
6429: PUSH
6430: LD_INT 5
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: ST_TO_ADDR
6439: GO 7162
6441: LD_INT 14
6443: DOUBLE
6444: EQUAL
6445: IFTRUE 6449
6447: GO 6467
6449: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6450: LD_ADDR_VAR 0 3
6454: PUSH
6455: LD_INT 4
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: ST_TO_ADDR
6465: GO 7162
6467: LD_INT 6
6469: DOUBLE
6470: EQUAL
6471: IFTRUE 6475
6473: GO 6493
6475: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6476: LD_ADDR_VAR 0 3
6480: PUSH
6481: LD_INT 4
6483: PUSH
6484: LD_INT 5
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: ST_TO_ADDR
6491: GO 7162
6493: LD_INT 10
6495: DOUBLE
6496: EQUAL
6497: IFTRUE 6501
6499: GO 6519
6501: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6502: LD_ADDR_VAR 0 3
6506: PUSH
6507: LD_INT 4
6509: PUSH
6510: LD_INT 5
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: ST_TO_ADDR
6517: GO 7162
6519: LD_INT 22
6521: DOUBLE
6522: EQUAL
6523: IFTRUE 6527
6525: GO 6553
6527: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6528: LD_ADDR_VAR 0 3
6532: PUSH
6533: LD_INT 11
6535: PUSH
6536: LD_INT 12
6538: PUSH
6539: LD_INT 13
6541: PUSH
6542: LD_INT 14
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: ST_TO_ADDR
6551: GO 7162
6553: LD_INT 23
6555: DOUBLE
6556: EQUAL
6557: IFTRUE 6561
6559: GO 6587
6561: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: LD_INT 11
6569: PUSH
6570: LD_INT 12
6572: PUSH
6573: LD_INT 13
6575: PUSH
6576: LD_INT 14
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: ST_TO_ADDR
6585: GO 7162
6587: LD_INT 24
6589: DOUBLE
6590: EQUAL
6591: IFTRUE 6595
6593: GO 6621
6595: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6596: LD_ADDR_VAR 0 3
6600: PUSH
6601: LD_INT 11
6603: PUSH
6604: LD_INT 12
6606: PUSH
6607: LD_INT 13
6609: PUSH
6610: LD_INT 14
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: ST_TO_ADDR
6619: GO 7162
6621: LD_INT 30
6623: DOUBLE
6624: EQUAL
6625: IFTRUE 6629
6627: GO 6655
6629: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6630: LD_ADDR_VAR 0 3
6634: PUSH
6635: LD_INT 11
6637: PUSH
6638: LD_INT 12
6640: PUSH
6641: LD_INT 13
6643: PUSH
6644: LD_INT 14
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: ST_TO_ADDR
6653: GO 7162
6655: LD_INT 25
6657: DOUBLE
6658: EQUAL
6659: IFTRUE 6663
6661: GO 6681
6663: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6664: LD_ADDR_VAR 0 3
6668: PUSH
6669: LD_INT 13
6671: PUSH
6672: LD_INT 14
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: ST_TO_ADDR
6679: GO 7162
6681: LD_INT 27
6683: DOUBLE
6684: EQUAL
6685: IFTRUE 6689
6687: GO 6707
6689: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6690: LD_ADDR_VAR 0 3
6694: PUSH
6695: LD_INT 13
6697: PUSH
6698: LD_INT 14
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: ST_TO_ADDR
6705: GO 7162
6707: LD_INT 92
6709: DOUBLE
6710: EQUAL
6711: IFTRUE 6715
6713: GO 6741
6715: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6716: LD_ADDR_VAR 0 3
6720: PUSH
6721: LD_INT 11
6723: PUSH
6724: LD_INT 12
6726: PUSH
6727: LD_INT 13
6729: PUSH
6730: LD_INT 14
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: ST_TO_ADDR
6739: GO 7162
6741: LD_INT 28
6743: DOUBLE
6744: EQUAL
6745: IFTRUE 6749
6747: GO 6767
6749: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_INT 13
6757: PUSH
6758: LD_INT 14
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: ST_TO_ADDR
6765: GO 7162
6767: LD_INT 29
6769: DOUBLE
6770: EQUAL
6771: IFTRUE 6775
6773: GO 6793
6775: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6776: LD_ADDR_VAR 0 3
6780: PUSH
6781: LD_INT 13
6783: PUSH
6784: LD_INT 14
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: ST_TO_ADDR
6791: GO 7162
6793: LD_INT 31
6795: DOUBLE
6796: EQUAL
6797: IFTRUE 6801
6799: GO 6819
6801: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6802: LD_ADDR_VAR 0 3
6806: PUSH
6807: LD_INT 13
6809: PUSH
6810: LD_INT 14
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: ST_TO_ADDR
6817: GO 7162
6819: LD_INT 26
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 6845
6827: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6828: LD_ADDR_VAR 0 3
6832: PUSH
6833: LD_INT 13
6835: PUSH
6836: LD_INT 14
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: ST_TO_ADDR
6843: GO 7162
6845: LD_INT 42
6847: DOUBLE
6848: EQUAL
6849: IFTRUE 6853
6851: GO 6879
6853: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6854: LD_ADDR_VAR 0 3
6858: PUSH
6859: LD_INT 21
6861: PUSH
6862: LD_INT 22
6864: PUSH
6865: LD_INT 23
6867: PUSH
6868: LD_INT 24
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: ST_TO_ADDR
6877: GO 7162
6879: LD_INT 43
6881: DOUBLE
6882: EQUAL
6883: IFTRUE 6887
6885: GO 6913
6887: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6888: LD_ADDR_VAR 0 3
6892: PUSH
6893: LD_INT 21
6895: PUSH
6896: LD_INT 22
6898: PUSH
6899: LD_INT 23
6901: PUSH
6902: LD_INT 24
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: ST_TO_ADDR
6911: GO 7162
6913: LD_INT 44
6915: DOUBLE
6916: EQUAL
6917: IFTRUE 6921
6919: GO 6947
6921: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6922: LD_ADDR_VAR 0 3
6926: PUSH
6927: LD_INT 21
6929: PUSH
6930: LD_INT 22
6932: PUSH
6933: LD_INT 23
6935: PUSH
6936: LD_INT 24
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: ST_TO_ADDR
6945: GO 7162
6947: LD_INT 45
6949: DOUBLE
6950: EQUAL
6951: IFTRUE 6955
6953: GO 6981
6955: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6956: LD_ADDR_VAR 0 3
6960: PUSH
6961: LD_INT 21
6963: PUSH
6964: LD_INT 22
6966: PUSH
6967: LD_INT 23
6969: PUSH
6970: LD_INT 24
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: ST_TO_ADDR
6979: GO 7162
6981: LD_INT 49
6983: DOUBLE
6984: EQUAL
6985: IFTRUE 6989
6987: GO 7015
6989: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6990: LD_ADDR_VAR 0 3
6994: PUSH
6995: LD_INT 21
6997: PUSH
6998: LD_INT 22
7000: PUSH
7001: LD_INT 23
7003: PUSH
7004: LD_INT 24
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: ST_TO_ADDR
7013: GO 7162
7015: LD_INT 51
7017: DOUBLE
7018: EQUAL
7019: IFTRUE 7023
7021: GO 7049
7023: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7024: LD_ADDR_VAR 0 3
7028: PUSH
7029: LD_INT 21
7031: PUSH
7032: LD_INT 22
7034: PUSH
7035: LD_INT 23
7037: PUSH
7038: LD_INT 24
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: ST_TO_ADDR
7047: GO 7162
7049: LD_INT 52
7051: DOUBLE
7052: EQUAL
7053: IFTRUE 7057
7055: GO 7083
7057: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7058: LD_ADDR_VAR 0 3
7062: PUSH
7063: LD_INT 21
7065: PUSH
7066: LD_INT 22
7068: PUSH
7069: LD_INT 23
7071: PUSH
7072: LD_INT 24
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: ST_TO_ADDR
7081: GO 7162
7083: LD_INT 53
7085: DOUBLE
7086: EQUAL
7087: IFTRUE 7091
7089: GO 7109
7091: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7092: LD_ADDR_VAR 0 3
7096: PUSH
7097: LD_INT 23
7099: PUSH
7100: LD_INT 24
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: ST_TO_ADDR
7107: GO 7162
7109: LD_INT 46
7111: DOUBLE
7112: EQUAL
7113: IFTRUE 7117
7115: GO 7135
7117: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7118: LD_ADDR_VAR 0 3
7122: PUSH
7123: LD_INT 23
7125: PUSH
7126: LD_INT 24
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: ST_TO_ADDR
7133: GO 7162
7135: LD_INT 47
7137: DOUBLE
7138: EQUAL
7139: IFTRUE 7143
7141: GO 7161
7143: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7144: LD_ADDR_VAR 0 3
7148: PUSH
7149: LD_INT 23
7151: PUSH
7152: LD_INT 24
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: ST_TO_ADDR
7159: GO 7162
7161: POP
// result := ( chassis in result ) ;
7162: LD_ADDR_VAR 0 3
7166: PUSH
7167: LD_VAR 0 1
7171: PUSH
7172: LD_VAR 0 3
7176: IN
7177: ST_TO_ADDR
// end ;
7178: LD_VAR 0 3
7182: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7183: LD_INT 0
7185: PPUSH
7186: PPUSH
7187: PPUSH
7188: PPUSH
7189: PPUSH
7190: PPUSH
7191: PPUSH
// result := array ;
7192: LD_ADDR_VAR 0 5
7196: PUSH
7197: LD_VAR 0 1
7201: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7202: LD_VAR 0 1
7206: NOT
7207: PUSH
7208: LD_VAR 0 2
7212: NOT
7213: OR
7214: PUSH
7215: LD_VAR 0 3
7219: NOT
7220: OR
7221: PUSH
7222: LD_VAR 0 2
7226: PUSH
7227: LD_VAR 0 1
7231: GREATER
7232: OR
7233: PUSH
7234: LD_VAR 0 3
7238: PUSH
7239: LD_VAR 0 1
7243: GREATER
7244: OR
7245: IFFALSE 7249
// exit ;
7247: GO 7545
// if direction then
7249: LD_VAR 0 4
7253: IFFALSE 7317
// begin d := 1 ;
7255: LD_ADDR_VAR 0 9
7259: PUSH
7260: LD_INT 1
7262: ST_TO_ADDR
// if i_from > i_to then
7263: LD_VAR 0 2
7267: PUSH
7268: LD_VAR 0 3
7272: GREATER
7273: IFFALSE 7299
// length := ( array - i_from ) + i_to else
7275: LD_ADDR_VAR 0 11
7279: PUSH
7280: LD_VAR 0 1
7284: PUSH
7285: LD_VAR 0 2
7289: MINUS
7290: PUSH
7291: LD_VAR 0 3
7295: PLUS
7296: ST_TO_ADDR
7297: GO 7315
// length := i_to - i_from ;
7299: LD_ADDR_VAR 0 11
7303: PUSH
7304: LD_VAR 0 3
7308: PUSH
7309: LD_VAR 0 2
7313: MINUS
7314: ST_TO_ADDR
// end else
7315: GO 7378
// begin d := - 1 ;
7317: LD_ADDR_VAR 0 9
7321: PUSH
7322: LD_INT 1
7324: NEG
7325: ST_TO_ADDR
// if i_from > i_to then
7326: LD_VAR 0 2
7330: PUSH
7331: LD_VAR 0 3
7335: GREATER
7336: IFFALSE 7356
// length := i_from - i_to else
7338: LD_ADDR_VAR 0 11
7342: PUSH
7343: LD_VAR 0 2
7347: PUSH
7348: LD_VAR 0 3
7352: MINUS
7353: ST_TO_ADDR
7354: GO 7378
// length := ( array - i_to ) + i_from ;
7356: LD_ADDR_VAR 0 11
7360: PUSH
7361: LD_VAR 0 1
7365: PUSH
7366: LD_VAR 0 3
7370: MINUS
7371: PUSH
7372: LD_VAR 0 2
7376: PLUS
7377: ST_TO_ADDR
// end ; if not length then
7378: LD_VAR 0 11
7382: NOT
7383: IFFALSE 7387
// exit ;
7385: GO 7545
// tmp := array ;
7387: LD_ADDR_VAR 0 10
7391: PUSH
7392: LD_VAR 0 1
7396: ST_TO_ADDR
// for i = 1 to length do
7397: LD_ADDR_VAR 0 6
7401: PUSH
7402: DOUBLE
7403: LD_INT 1
7405: DEC
7406: ST_TO_ADDR
7407: LD_VAR 0 11
7411: PUSH
7412: FOR_TO
7413: IFFALSE 7533
// begin for j = 1 to array do
7415: LD_ADDR_VAR 0 7
7419: PUSH
7420: DOUBLE
7421: LD_INT 1
7423: DEC
7424: ST_TO_ADDR
7425: LD_VAR 0 1
7429: PUSH
7430: FOR_TO
7431: IFFALSE 7519
// begin k := j + d ;
7433: LD_ADDR_VAR 0 8
7437: PUSH
7438: LD_VAR 0 7
7442: PUSH
7443: LD_VAR 0 9
7447: PLUS
7448: ST_TO_ADDR
// if k > array then
7449: LD_VAR 0 8
7453: PUSH
7454: LD_VAR 0 1
7458: GREATER
7459: IFFALSE 7469
// k := 1 ;
7461: LD_ADDR_VAR 0 8
7465: PUSH
7466: LD_INT 1
7468: ST_TO_ADDR
// if not k then
7469: LD_VAR 0 8
7473: NOT
7474: IFFALSE 7486
// k := array ;
7476: LD_ADDR_VAR 0 8
7480: PUSH
7481: LD_VAR 0 1
7485: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7486: LD_ADDR_VAR 0 10
7490: PUSH
7491: LD_VAR 0 10
7495: PPUSH
7496: LD_VAR 0 8
7500: PPUSH
7501: LD_VAR 0 1
7505: PUSH
7506: LD_VAR 0 7
7510: ARRAY
7511: PPUSH
7512: CALL_OW 1
7516: ST_TO_ADDR
// end ;
7517: GO 7430
7519: POP
7520: POP
// array := tmp ;
7521: LD_ADDR_VAR 0 1
7525: PUSH
7526: LD_VAR 0 10
7530: ST_TO_ADDR
// end ;
7531: GO 7412
7533: POP
7534: POP
// result := array ;
7535: LD_ADDR_VAR 0 5
7539: PUSH
7540: LD_VAR 0 1
7544: ST_TO_ADDR
// end ;
7545: LD_VAR 0 5
7549: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7550: LD_INT 0
7552: PPUSH
7553: PPUSH
// result := 0 ;
7554: LD_ADDR_VAR 0 3
7558: PUSH
7559: LD_INT 0
7561: ST_TO_ADDR
// if not array or not value in array then
7562: LD_VAR 0 1
7566: NOT
7567: PUSH
7568: LD_VAR 0 2
7572: PUSH
7573: LD_VAR 0 1
7577: IN
7578: NOT
7579: OR
7580: IFFALSE 7584
// exit ;
7582: GO 7638
// for i = 1 to array do
7584: LD_ADDR_VAR 0 4
7588: PUSH
7589: DOUBLE
7590: LD_INT 1
7592: DEC
7593: ST_TO_ADDR
7594: LD_VAR 0 1
7598: PUSH
7599: FOR_TO
7600: IFFALSE 7636
// if value = array [ i ] then
7602: LD_VAR 0 2
7606: PUSH
7607: LD_VAR 0 1
7611: PUSH
7612: LD_VAR 0 4
7616: ARRAY
7617: EQUAL
7618: IFFALSE 7634
// begin result := i ;
7620: LD_ADDR_VAR 0 3
7624: PUSH
7625: LD_VAR 0 4
7629: ST_TO_ADDR
// exit ;
7630: POP
7631: POP
7632: GO 7638
// end ;
7634: GO 7599
7636: POP
7637: POP
// end ;
7638: LD_VAR 0 3
7642: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7643: LD_INT 0
7645: PPUSH
// vc_chassis := chassis ;
7646: LD_ADDR_OWVAR 37
7650: PUSH
7651: LD_VAR 0 1
7655: ST_TO_ADDR
// vc_engine := engine ;
7656: LD_ADDR_OWVAR 39
7660: PUSH
7661: LD_VAR 0 2
7665: ST_TO_ADDR
// vc_control := control ;
7666: LD_ADDR_OWVAR 38
7670: PUSH
7671: LD_VAR 0 3
7675: ST_TO_ADDR
// vc_weapon := weapon ;
7676: LD_ADDR_OWVAR 40
7680: PUSH
7681: LD_VAR 0 4
7685: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7686: LD_ADDR_OWVAR 41
7690: PUSH
7691: LD_VAR 0 5
7695: ST_TO_ADDR
// end ;
7696: LD_VAR 0 6
7700: RET
// export function WantPlant ( unit ) ; var task ; begin
7701: LD_INT 0
7703: PPUSH
7704: PPUSH
// result := false ;
7705: LD_ADDR_VAR 0 2
7709: PUSH
7710: LD_INT 0
7712: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7713: LD_ADDR_VAR 0 3
7717: PUSH
7718: LD_VAR 0 1
7722: PPUSH
7723: CALL_OW 437
7727: ST_TO_ADDR
// if task then
7728: LD_VAR 0 3
7732: IFFALSE 7760
// if task [ 1 ] [ 1 ] = p then
7734: LD_VAR 0 3
7738: PUSH
7739: LD_INT 1
7741: ARRAY
7742: PUSH
7743: LD_INT 1
7745: ARRAY
7746: PUSH
7747: LD_STRING p
7749: EQUAL
7750: IFFALSE 7760
// result := true ;
7752: LD_ADDR_VAR 0 2
7756: PUSH
7757: LD_INT 1
7759: ST_TO_ADDR
// end ;
7760: LD_VAR 0 2
7764: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7765: LD_INT 0
7767: PPUSH
7768: PPUSH
7769: PPUSH
7770: PPUSH
// if pos < 1 then
7771: LD_VAR 0 2
7775: PUSH
7776: LD_INT 1
7778: LESS
7779: IFFALSE 7783
// exit ;
7781: GO 8086
// if pos = 1 then
7783: LD_VAR 0 2
7787: PUSH
7788: LD_INT 1
7790: EQUAL
7791: IFFALSE 7824
// result := Replace ( arr , pos [ 1 ] , value ) else
7793: LD_ADDR_VAR 0 4
7797: PUSH
7798: LD_VAR 0 1
7802: PPUSH
7803: LD_VAR 0 2
7807: PUSH
7808: LD_INT 1
7810: ARRAY
7811: PPUSH
7812: LD_VAR 0 3
7816: PPUSH
7817: CALL_OW 1
7821: ST_TO_ADDR
7822: GO 8086
// begin tmp := arr ;
7824: LD_ADDR_VAR 0 6
7828: PUSH
7829: LD_VAR 0 1
7833: ST_TO_ADDR
// s_arr := [ tmp ] ;
7834: LD_ADDR_VAR 0 7
7838: PUSH
7839: LD_VAR 0 6
7843: PUSH
7844: EMPTY
7845: LIST
7846: ST_TO_ADDR
// for i = 1 to pos - 1 do
7847: LD_ADDR_VAR 0 5
7851: PUSH
7852: DOUBLE
7853: LD_INT 1
7855: DEC
7856: ST_TO_ADDR
7857: LD_VAR 0 2
7861: PUSH
7862: LD_INT 1
7864: MINUS
7865: PUSH
7866: FOR_TO
7867: IFFALSE 7912
// begin tmp := tmp [ pos [ i ] ] ;
7869: LD_ADDR_VAR 0 6
7873: PUSH
7874: LD_VAR 0 6
7878: PUSH
7879: LD_VAR 0 2
7883: PUSH
7884: LD_VAR 0 5
7888: ARRAY
7889: ARRAY
7890: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7891: LD_ADDR_VAR 0 7
7895: PUSH
7896: LD_VAR 0 7
7900: PUSH
7901: LD_VAR 0 6
7905: PUSH
7906: EMPTY
7907: LIST
7908: ADD
7909: ST_TO_ADDR
// end ;
7910: GO 7866
7912: POP
7913: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7914: LD_ADDR_VAR 0 6
7918: PUSH
7919: LD_VAR 0 6
7923: PPUSH
7924: LD_VAR 0 2
7928: PUSH
7929: LD_VAR 0 2
7933: ARRAY
7934: PPUSH
7935: LD_VAR 0 3
7939: PPUSH
7940: CALL_OW 1
7944: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7945: LD_ADDR_VAR 0 7
7949: PUSH
7950: LD_VAR 0 7
7954: PPUSH
7955: LD_VAR 0 7
7959: PPUSH
7960: LD_VAR 0 6
7964: PPUSH
7965: CALL_OW 1
7969: ST_TO_ADDR
// for i = s_arr downto 2 do
7970: LD_ADDR_VAR 0 5
7974: PUSH
7975: DOUBLE
7976: LD_VAR 0 7
7980: INC
7981: ST_TO_ADDR
7982: LD_INT 2
7984: PUSH
7985: FOR_DOWNTO
7986: IFFALSE 8070
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7988: LD_ADDR_VAR 0 6
7992: PUSH
7993: LD_VAR 0 7
7997: PUSH
7998: LD_VAR 0 5
8002: PUSH
8003: LD_INT 1
8005: MINUS
8006: ARRAY
8007: PPUSH
8008: LD_VAR 0 2
8012: PUSH
8013: LD_VAR 0 5
8017: PUSH
8018: LD_INT 1
8020: MINUS
8021: ARRAY
8022: PPUSH
8023: LD_VAR 0 7
8027: PUSH
8028: LD_VAR 0 5
8032: ARRAY
8033: PPUSH
8034: CALL_OW 1
8038: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8039: LD_ADDR_VAR 0 7
8043: PUSH
8044: LD_VAR 0 7
8048: PPUSH
8049: LD_VAR 0 5
8053: PUSH
8054: LD_INT 1
8056: MINUS
8057: PPUSH
8058: LD_VAR 0 6
8062: PPUSH
8063: CALL_OW 1
8067: ST_TO_ADDR
// end ;
8068: GO 7985
8070: POP
8071: POP
// result := s_arr [ 1 ] ;
8072: LD_ADDR_VAR 0 4
8076: PUSH
8077: LD_VAR 0 7
8081: PUSH
8082: LD_INT 1
8084: ARRAY
8085: ST_TO_ADDR
// end ; end ;
8086: LD_VAR 0 4
8090: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8091: LD_INT 0
8093: PPUSH
8094: PPUSH
// if not list then
8095: LD_VAR 0 1
8099: NOT
8100: IFFALSE 8104
// exit ;
8102: GO 8195
// i := list [ pos1 ] ;
8104: LD_ADDR_VAR 0 5
8108: PUSH
8109: LD_VAR 0 1
8113: PUSH
8114: LD_VAR 0 2
8118: ARRAY
8119: ST_TO_ADDR
// if not i then
8120: LD_VAR 0 5
8124: NOT
8125: IFFALSE 8129
// exit ;
8127: GO 8195
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8129: LD_ADDR_VAR 0 1
8133: PUSH
8134: LD_VAR 0 1
8138: PPUSH
8139: LD_VAR 0 2
8143: PPUSH
8144: LD_VAR 0 1
8148: PUSH
8149: LD_VAR 0 3
8153: ARRAY
8154: PPUSH
8155: CALL_OW 1
8159: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8160: LD_ADDR_VAR 0 1
8164: PUSH
8165: LD_VAR 0 1
8169: PPUSH
8170: LD_VAR 0 3
8174: PPUSH
8175: LD_VAR 0 5
8179: PPUSH
8180: CALL_OW 1
8184: ST_TO_ADDR
// result := list ;
8185: LD_ADDR_VAR 0 4
8189: PUSH
8190: LD_VAR 0 1
8194: ST_TO_ADDR
// end ;
8195: LD_VAR 0 4
8199: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8200: LD_INT 0
8202: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8203: LD_ADDR_VAR 0 5
8207: PUSH
8208: LD_VAR 0 1
8212: PPUSH
8213: CALL_OW 250
8217: PPUSH
8218: LD_VAR 0 1
8222: PPUSH
8223: CALL_OW 251
8227: PPUSH
8228: LD_VAR 0 2
8232: PPUSH
8233: LD_VAR 0 3
8237: PPUSH
8238: LD_VAR 0 4
8242: PPUSH
8243: CALL 8621 0 5
8247: ST_TO_ADDR
// end ;
8248: LD_VAR 0 5
8252: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8253: LD_INT 0
8255: PPUSH
8256: PPUSH
8257: PPUSH
8258: PPUSH
// if not list or not unit then
8259: LD_VAR 0 2
8263: NOT
8264: PUSH
8265: LD_VAR 0 1
8269: NOT
8270: OR
8271: IFFALSE 8275
// exit ;
8273: GO 8616
// result := [ ] ;
8275: LD_ADDR_VAR 0 5
8279: PUSH
8280: EMPTY
8281: ST_TO_ADDR
// for i in list do
8282: LD_ADDR_VAR 0 6
8286: PUSH
8287: LD_VAR 0 2
8291: PUSH
8292: FOR_IN
8293: IFFALSE 8511
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8295: LD_ADDR_VAR 0 8
8299: PUSH
8300: LD_VAR 0 1
8304: PPUSH
8305: LD_VAR 0 6
8309: PUSH
8310: LD_INT 1
8312: ARRAY
8313: PPUSH
8314: LD_VAR 0 6
8318: PUSH
8319: LD_INT 2
8321: ARRAY
8322: PPUSH
8323: CALL_OW 297
8327: ST_TO_ADDR
// if not Count ( result ) then
8328: LD_VAR 0 5
8332: PPUSH
8333: CALL 4905 0 1
8337: NOT
8338: IFFALSE 8371
// begin result := Join ( result , [ i , tmp ] ) ;
8340: LD_ADDR_VAR 0 5
8344: PUSH
8345: LD_VAR 0 5
8349: PPUSH
8350: LD_VAR 0 6
8354: PUSH
8355: LD_VAR 0 8
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: PPUSH
8364: CALL 40494 0 2
8368: ST_TO_ADDR
// continue ;
8369: GO 8292
// end ; if result [ result ] [ 2 ] <= tmp then
8371: LD_VAR 0 5
8375: PUSH
8376: LD_VAR 0 5
8380: ARRAY
8381: PUSH
8382: LD_INT 2
8384: ARRAY
8385: PUSH
8386: LD_VAR 0 8
8390: LESSEQUAL
8391: IFFALSE 8424
// result := Join ( result , [ i , tmp ] ) else
8393: LD_ADDR_VAR 0 5
8397: PUSH
8398: LD_VAR 0 5
8402: PPUSH
8403: LD_VAR 0 6
8407: PUSH
8408: LD_VAR 0 8
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PPUSH
8417: CALL 40494 0 2
8421: ST_TO_ADDR
8422: GO 8509
// begin for j := 1 to Count ( result ) do
8424: LD_ADDR_VAR 0 7
8428: PUSH
8429: DOUBLE
8430: LD_INT 1
8432: DEC
8433: ST_TO_ADDR
8434: LD_VAR 0 5
8438: PPUSH
8439: CALL 4905 0 1
8443: PUSH
8444: FOR_TO
8445: IFFALSE 8507
// begin if tmp < result [ j ] [ 2 ] then
8447: LD_VAR 0 8
8451: PUSH
8452: LD_VAR 0 5
8456: PUSH
8457: LD_VAR 0 7
8461: ARRAY
8462: PUSH
8463: LD_INT 2
8465: ARRAY
8466: LESS
8467: IFFALSE 8505
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8469: LD_ADDR_VAR 0 5
8473: PUSH
8474: LD_VAR 0 5
8478: PPUSH
8479: LD_VAR 0 7
8483: PPUSH
8484: LD_VAR 0 6
8488: PUSH
8489: LD_VAR 0 8
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PPUSH
8498: CALL_OW 2
8502: ST_TO_ADDR
// break ;
8503: GO 8507
// end ; end ;
8505: GO 8444
8507: POP
8508: POP
// end ; end ;
8509: GO 8292
8511: POP
8512: POP
// if result and not asc then
8513: LD_VAR 0 5
8517: PUSH
8518: LD_VAR 0 3
8522: NOT
8523: AND
8524: IFFALSE 8541
// result := ReverseArray ( result ) ;
8526: LD_ADDR_VAR 0 5
8530: PUSH
8531: LD_VAR 0 5
8535: PPUSH
8536: CALL 35781 0 1
8540: ST_TO_ADDR
// tmp := [ ] ;
8541: LD_ADDR_VAR 0 8
8545: PUSH
8546: EMPTY
8547: ST_TO_ADDR
// if mode then
8548: LD_VAR 0 4
8552: IFFALSE 8616
// begin for i := 1 to result do
8554: LD_ADDR_VAR 0 6
8558: PUSH
8559: DOUBLE
8560: LD_INT 1
8562: DEC
8563: ST_TO_ADDR
8564: LD_VAR 0 5
8568: PUSH
8569: FOR_TO
8570: IFFALSE 8604
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8572: LD_ADDR_VAR 0 8
8576: PUSH
8577: LD_VAR 0 8
8581: PPUSH
8582: LD_VAR 0 5
8586: PUSH
8587: LD_VAR 0 6
8591: ARRAY
8592: PUSH
8593: LD_INT 1
8595: ARRAY
8596: PPUSH
8597: CALL 40494 0 2
8601: ST_TO_ADDR
8602: GO 8569
8604: POP
8605: POP
// result := tmp ;
8606: LD_ADDR_VAR 0 5
8610: PUSH
8611: LD_VAR 0 8
8615: ST_TO_ADDR
// end ; end ;
8616: LD_VAR 0 5
8620: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8621: LD_INT 0
8623: PPUSH
8624: PPUSH
8625: PPUSH
8626: PPUSH
// if not list then
8627: LD_VAR 0 3
8631: NOT
8632: IFFALSE 8636
// exit ;
8634: GO 9024
// result := [ ] ;
8636: LD_ADDR_VAR 0 6
8640: PUSH
8641: EMPTY
8642: ST_TO_ADDR
// for i in list do
8643: LD_ADDR_VAR 0 7
8647: PUSH
8648: LD_VAR 0 3
8652: PUSH
8653: FOR_IN
8654: IFFALSE 8856
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8656: LD_ADDR_VAR 0 9
8660: PUSH
8661: LD_VAR 0 7
8665: PPUSH
8666: LD_VAR 0 1
8670: PPUSH
8671: LD_VAR 0 2
8675: PPUSH
8676: CALL_OW 297
8680: ST_TO_ADDR
// if not result then
8681: LD_VAR 0 6
8685: NOT
8686: IFFALSE 8712
// result := [ [ i , tmp ] ] else
8688: LD_ADDR_VAR 0 6
8692: PUSH
8693: LD_VAR 0 7
8697: PUSH
8698: LD_VAR 0 9
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: EMPTY
8708: LIST
8709: ST_TO_ADDR
8710: GO 8854
// begin if result [ result ] [ 2 ] < tmp then
8712: LD_VAR 0 6
8716: PUSH
8717: LD_VAR 0 6
8721: ARRAY
8722: PUSH
8723: LD_INT 2
8725: ARRAY
8726: PUSH
8727: LD_VAR 0 9
8731: LESS
8732: IFFALSE 8774
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8734: LD_ADDR_VAR 0 6
8738: PUSH
8739: LD_VAR 0 6
8743: PPUSH
8744: LD_VAR 0 6
8748: PUSH
8749: LD_INT 1
8751: PLUS
8752: PPUSH
8753: LD_VAR 0 7
8757: PUSH
8758: LD_VAR 0 9
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PPUSH
8767: CALL_OW 2
8771: ST_TO_ADDR
8772: GO 8854
// for j = 1 to result do
8774: LD_ADDR_VAR 0 8
8778: PUSH
8779: DOUBLE
8780: LD_INT 1
8782: DEC
8783: ST_TO_ADDR
8784: LD_VAR 0 6
8788: PUSH
8789: FOR_TO
8790: IFFALSE 8852
// begin if tmp < result [ j ] [ 2 ] then
8792: LD_VAR 0 9
8796: PUSH
8797: LD_VAR 0 6
8801: PUSH
8802: LD_VAR 0 8
8806: ARRAY
8807: PUSH
8808: LD_INT 2
8810: ARRAY
8811: LESS
8812: IFFALSE 8850
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8814: LD_ADDR_VAR 0 6
8818: PUSH
8819: LD_VAR 0 6
8823: PPUSH
8824: LD_VAR 0 8
8828: PPUSH
8829: LD_VAR 0 7
8833: PUSH
8834: LD_VAR 0 9
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PPUSH
8843: CALL_OW 2
8847: ST_TO_ADDR
// break ;
8848: GO 8852
// end ; end ;
8850: GO 8789
8852: POP
8853: POP
// end ; end ;
8854: GO 8653
8856: POP
8857: POP
// if result and not asc then
8858: LD_VAR 0 6
8862: PUSH
8863: LD_VAR 0 4
8867: NOT
8868: AND
8869: IFFALSE 8944
// begin tmp := result ;
8871: LD_ADDR_VAR 0 9
8875: PUSH
8876: LD_VAR 0 6
8880: ST_TO_ADDR
// for i = tmp downto 1 do
8881: LD_ADDR_VAR 0 7
8885: PUSH
8886: DOUBLE
8887: LD_VAR 0 9
8891: INC
8892: ST_TO_ADDR
8893: LD_INT 1
8895: PUSH
8896: FOR_DOWNTO
8897: IFFALSE 8942
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8899: LD_ADDR_VAR 0 6
8903: PUSH
8904: LD_VAR 0 6
8908: PPUSH
8909: LD_VAR 0 9
8913: PUSH
8914: LD_VAR 0 7
8918: MINUS
8919: PUSH
8920: LD_INT 1
8922: PLUS
8923: PPUSH
8924: LD_VAR 0 9
8928: PUSH
8929: LD_VAR 0 7
8933: ARRAY
8934: PPUSH
8935: CALL_OW 1
8939: ST_TO_ADDR
8940: GO 8896
8942: POP
8943: POP
// end ; tmp := [ ] ;
8944: LD_ADDR_VAR 0 9
8948: PUSH
8949: EMPTY
8950: ST_TO_ADDR
// if mode then
8951: LD_VAR 0 5
8955: IFFALSE 9024
// begin for i = 1 to result do
8957: LD_ADDR_VAR 0 7
8961: PUSH
8962: DOUBLE
8963: LD_INT 1
8965: DEC
8966: ST_TO_ADDR
8967: LD_VAR 0 6
8971: PUSH
8972: FOR_TO
8973: IFFALSE 9012
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8975: LD_ADDR_VAR 0 9
8979: PUSH
8980: LD_VAR 0 9
8984: PPUSH
8985: LD_VAR 0 7
8989: PPUSH
8990: LD_VAR 0 6
8994: PUSH
8995: LD_VAR 0 7
8999: ARRAY
9000: PUSH
9001: LD_INT 1
9003: ARRAY
9004: PPUSH
9005: CALL_OW 1
9009: ST_TO_ADDR
9010: GO 8972
9012: POP
9013: POP
// result := tmp ;
9014: LD_ADDR_VAR 0 6
9018: PUSH
9019: LD_VAR 0 9
9023: ST_TO_ADDR
// end ; end ;
9024: LD_VAR 0 6
9028: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9029: LD_INT 0
9031: PPUSH
9032: PPUSH
9033: PPUSH
9034: PPUSH
9035: PPUSH
9036: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9037: LD_ADDR_VAR 0 5
9041: PUSH
9042: LD_INT 0
9044: PUSH
9045: LD_INT 0
9047: PUSH
9048: LD_INT 0
9050: PUSH
9051: EMPTY
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: ST_TO_ADDR
// if not x or not y then
9059: LD_VAR 0 2
9063: NOT
9064: PUSH
9065: LD_VAR 0 3
9069: NOT
9070: OR
9071: IFFALSE 9075
// exit ;
9073: GO 10725
// if not range then
9075: LD_VAR 0 4
9079: NOT
9080: IFFALSE 9090
// range := 10 ;
9082: LD_ADDR_VAR 0 4
9086: PUSH
9087: LD_INT 10
9089: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9090: LD_ADDR_VAR 0 8
9094: PUSH
9095: LD_INT 81
9097: PUSH
9098: LD_VAR 0 1
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 92
9109: PUSH
9110: LD_VAR 0 2
9114: PUSH
9115: LD_VAR 0 3
9119: PUSH
9120: LD_VAR 0 4
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: PUSH
9131: LD_INT 3
9133: PUSH
9134: LD_INT 21
9136: PUSH
9137: LD_INT 3
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: LIST
9152: PPUSH
9153: CALL_OW 69
9157: ST_TO_ADDR
// if not tmp then
9158: LD_VAR 0 8
9162: NOT
9163: IFFALSE 9167
// exit ;
9165: GO 10725
// for i in tmp do
9167: LD_ADDR_VAR 0 6
9171: PUSH
9172: LD_VAR 0 8
9176: PUSH
9177: FOR_IN
9178: IFFALSE 10700
// begin points := [ 0 , 0 , 0 ] ;
9180: LD_ADDR_VAR 0 9
9184: PUSH
9185: LD_INT 0
9187: PUSH
9188: LD_INT 0
9190: PUSH
9191: LD_INT 0
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: LIST
9198: ST_TO_ADDR
// bpoints := 1 ;
9199: LD_ADDR_VAR 0 10
9203: PUSH
9204: LD_INT 1
9206: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9207: LD_VAR 0 6
9211: PPUSH
9212: CALL_OW 247
9216: PUSH
9217: LD_INT 1
9219: DOUBLE
9220: EQUAL
9221: IFTRUE 9225
9223: GO 9803
9225: POP
// begin if GetClass ( i ) = 1 then
9226: LD_VAR 0 6
9230: PPUSH
9231: CALL_OW 257
9235: PUSH
9236: LD_INT 1
9238: EQUAL
9239: IFFALSE 9260
// points := [ 10 , 5 , 3 ] ;
9241: LD_ADDR_VAR 0 9
9245: PUSH
9246: LD_INT 10
9248: PUSH
9249: LD_INT 5
9251: PUSH
9252: LD_INT 3
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: LIST
9259: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9260: LD_VAR 0 6
9264: PPUSH
9265: CALL_OW 257
9269: PUSH
9270: LD_INT 2
9272: PUSH
9273: LD_INT 3
9275: PUSH
9276: LD_INT 4
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: LIST
9283: IN
9284: IFFALSE 9305
// points := [ 3 , 2 , 1 ] ;
9286: LD_ADDR_VAR 0 9
9290: PUSH
9291: LD_INT 3
9293: PUSH
9294: LD_INT 2
9296: PUSH
9297: LD_INT 1
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: LIST
9304: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9305: LD_VAR 0 6
9309: PPUSH
9310: CALL_OW 257
9314: PUSH
9315: LD_INT 5
9317: EQUAL
9318: IFFALSE 9339
// points := [ 130 , 5 , 2 ] ;
9320: LD_ADDR_VAR 0 9
9324: PUSH
9325: LD_INT 130
9327: PUSH
9328: LD_INT 5
9330: PUSH
9331: LD_INT 2
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: LIST
9338: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9339: LD_VAR 0 6
9343: PPUSH
9344: CALL_OW 257
9348: PUSH
9349: LD_INT 8
9351: EQUAL
9352: IFFALSE 9373
// points := [ 35 , 35 , 30 ] ;
9354: LD_ADDR_VAR 0 9
9358: PUSH
9359: LD_INT 35
9361: PUSH
9362: LD_INT 35
9364: PUSH
9365: LD_INT 30
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: LIST
9372: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9373: LD_VAR 0 6
9377: PPUSH
9378: CALL_OW 257
9382: PUSH
9383: LD_INT 9
9385: EQUAL
9386: IFFALSE 9407
// points := [ 20 , 55 , 40 ] ;
9388: LD_ADDR_VAR 0 9
9392: PUSH
9393: LD_INT 20
9395: PUSH
9396: LD_INT 55
9398: PUSH
9399: LD_INT 40
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: LIST
9406: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9407: LD_VAR 0 6
9411: PPUSH
9412: CALL_OW 257
9416: PUSH
9417: LD_INT 12
9419: PUSH
9420: LD_INT 16
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: IN
9427: IFFALSE 9448
// points := [ 5 , 3 , 2 ] ;
9429: LD_ADDR_VAR 0 9
9433: PUSH
9434: LD_INT 5
9436: PUSH
9437: LD_INT 3
9439: PUSH
9440: LD_INT 2
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: LIST
9447: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9448: LD_VAR 0 6
9452: PPUSH
9453: CALL_OW 257
9457: PUSH
9458: LD_INT 17
9460: EQUAL
9461: IFFALSE 9482
// points := [ 100 , 50 , 75 ] ;
9463: LD_ADDR_VAR 0 9
9467: PUSH
9468: LD_INT 100
9470: PUSH
9471: LD_INT 50
9473: PUSH
9474: LD_INT 75
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: LIST
9481: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9482: LD_VAR 0 6
9486: PPUSH
9487: CALL_OW 257
9491: PUSH
9492: LD_INT 15
9494: EQUAL
9495: IFFALSE 9516
// points := [ 10 , 5 , 3 ] ;
9497: LD_ADDR_VAR 0 9
9501: PUSH
9502: LD_INT 10
9504: PUSH
9505: LD_INT 5
9507: PUSH
9508: LD_INT 3
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: LIST
9515: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9516: LD_VAR 0 6
9520: PPUSH
9521: CALL_OW 257
9525: PUSH
9526: LD_INT 14
9528: EQUAL
9529: IFFALSE 9550
// points := [ 10 , 0 , 0 ] ;
9531: LD_ADDR_VAR 0 9
9535: PUSH
9536: LD_INT 10
9538: PUSH
9539: LD_INT 0
9541: PUSH
9542: LD_INT 0
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: LIST
9549: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9550: LD_VAR 0 6
9554: PPUSH
9555: CALL_OW 257
9559: PUSH
9560: LD_INT 11
9562: EQUAL
9563: IFFALSE 9584
// points := [ 30 , 10 , 5 ] ;
9565: LD_ADDR_VAR 0 9
9569: PUSH
9570: LD_INT 30
9572: PUSH
9573: LD_INT 10
9575: PUSH
9576: LD_INT 5
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: LIST
9583: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9584: LD_VAR 0 1
9588: PPUSH
9589: LD_INT 5
9591: PPUSH
9592: CALL_OW 321
9596: PUSH
9597: LD_INT 2
9599: EQUAL
9600: IFFALSE 9617
// bpoints := bpoints * 1.8 ;
9602: LD_ADDR_VAR 0 10
9606: PUSH
9607: LD_VAR 0 10
9611: PUSH
9612: LD_REAL  1.80000000000000E+0000
9615: MUL
9616: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9617: LD_VAR 0 6
9621: PPUSH
9622: CALL_OW 257
9626: PUSH
9627: LD_INT 1
9629: PUSH
9630: LD_INT 2
9632: PUSH
9633: LD_INT 3
9635: PUSH
9636: LD_INT 4
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: IN
9645: PUSH
9646: LD_VAR 0 1
9650: PPUSH
9651: LD_INT 51
9653: PPUSH
9654: CALL_OW 321
9658: PUSH
9659: LD_INT 2
9661: EQUAL
9662: AND
9663: IFFALSE 9680
// bpoints := bpoints * 1.2 ;
9665: LD_ADDR_VAR 0 10
9669: PUSH
9670: LD_VAR 0 10
9674: PUSH
9675: LD_REAL  1.20000000000000E+0000
9678: MUL
9679: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9680: LD_VAR 0 6
9684: PPUSH
9685: CALL_OW 257
9689: PUSH
9690: LD_INT 5
9692: PUSH
9693: LD_INT 7
9695: PUSH
9696: LD_INT 9
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: LIST
9703: IN
9704: PUSH
9705: LD_VAR 0 1
9709: PPUSH
9710: LD_INT 52
9712: PPUSH
9713: CALL_OW 321
9717: PUSH
9718: LD_INT 2
9720: EQUAL
9721: AND
9722: IFFALSE 9739
// bpoints := bpoints * 1.5 ;
9724: LD_ADDR_VAR 0 10
9728: PUSH
9729: LD_VAR 0 10
9733: PUSH
9734: LD_REAL  1.50000000000000E+0000
9737: MUL
9738: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9739: LD_VAR 0 1
9743: PPUSH
9744: LD_INT 66
9746: PPUSH
9747: CALL_OW 321
9751: PUSH
9752: LD_INT 2
9754: EQUAL
9755: IFFALSE 9772
// bpoints := bpoints * 1.1 ;
9757: LD_ADDR_VAR 0 10
9761: PUSH
9762: LD_VAR 0 10
9766: PUSH
9767: LD_REAL  1.10000000000000E+0000
9770: MUL
9771: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9772: LD_ADDR_VAR 0 10
9776: PUSH
9777: LD_VAR 0 10
9781: PUSH
9782: LD_VAR 0 6
9786: PPUSH
9787: LD_INT 1
9789: PPUSH
9790: CALL_OW 259
9794: PUSH
9795: LD_REAL  1.15000000000000E+0000
9798: MUL
9799: MUL
9800: ST_TO_ADDR
// end ; unit_vehicle :
9801: GO 10629
9803: LD_INT 2
9805: DOUBLE
9806: EQUAL
9807: IFTRUE 9811
9809: GO 10617
9811: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9812: LD_VAR 0 6
9816: PPUSH
9817: CALL_OW 264
9821: PUSH
9822: LD_INT 2
9824: PUSH
9825: LD_INT 42
9827: PUSH
9828: LD_INT 24
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: LIST
9835: IN
9836: IFFALSE 9857
// points := [ 25 , 5 , 3 ] ;
9838: LD_ADDR_VAR 0 9
9842: PUSH
9843: LD_INT 25
9845: PUSH
9846: LD_INT 5
9848: PUSH
9849: LD_INT 3
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9857: LD_VAR 0 6
9861: PPUSH
9862: CALL_OW 264
9866: PUSH
9867: LD_INT 4
9869: PUSH
9870: LD_INT 43
9872: PUSH
9873: LD_INT 25
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: LIST
9880: IN
9881: IFFALSE 9902
// points := [ 40 , 15 , 5 ] ;
9883: LD_ADDR_VAR 0 9
9887: PUSH
9888: LD_INT 40
9890: PUSH
9891: LD_INT 15
9893: PUSH
9894: LD_INT 5
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: LIST
9901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9902: LD_VAR 0 6
9906: PPUSH
9907: CALL_OW 264
9911: PUSH
9912: LD_INT 3
9914: PUSH
9915: LD_INT 23
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: IN
9922: IFFALSE 9943
// points := [ 7 , 25 , 8 ] ;
9924: LD_ADDR_VAR 0 9
9928: PUSH
9929: LD_INT 7
9931: PUSH
9932: LD_INT 25
9934: PUSH
9935: LD_INT 8
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: LIST
9942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9943: LD_VAR 0 6
9947: PPUSH
9948: CALL_OW 264
9952: PUSH
9953: LD_INT 5
9955: PUSH
9956: LD_INT 27
9958: PUSH
9959: LD_INT 44
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: LIST
9966: IN
9967: IFFALSE 9988
// points := [ 14 , 50 , 16 ] ;
9969: LD_ADDR_VAR 0 9
9973: PUSH
9974: LD_INT 14
9976: PUSH
9977: LD_INT 50
9979: PUSH
9980: LD_INT 16
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: LIST
9987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9988: LD_VAR 0 6
9992: PPUSH
9993: CALL_OW 264
9997: PUSH
9998: LD_INT 6
10000: PUSH
10001: LD_INT 46
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: IN
10008: IFFALSE 10029
// points := [ 32 , 120 , 70 ] ;
10010: LD_ADDR_VAR 0 9
10014: PUSH
10015: LD_INT 32
10017: PUSH
10018: LD_INT 120
10020: PUSH
10021: LD_INT 70
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: LIST
10028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10029: LD_VAR 0 6
10033: PPUSH
10034: CALL_OW 264
10038: PUSH
10039: LD_INT 7
10041: PUSH
10042: LD_INT 28
10044: PUSH
10045: LD_INT 45
10047: PUSH
10048: LD_INT 92
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: IN
10057: IFFALSE 10078
// points := [ 35 , 20 , 45 ] ;
10059: LD_ADDR_VAR 0 9
10063: PUSH
10064: LD_INT 35
10066: PUSH
10067: LD_INT 20
10069: PUSH
10070: LD_INT 45
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: LIST
10077: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10078: LD_VAR 0 6
10082: PPUSH
10083: CALL_OW 264
10087: PUSH
10088: LD_INT 47
10090: PUSH
10091: EMPTY
10092: LIST
10093: IN
10094: IFFALSE 10115
// points := [ 67 , 45 , 75 ] ;
10096: LD_ADDR_VAR 0 9
10100: PUSH
10101: LD_INT 67
10103: PUSH
10104: LD_INT 45
10106: PUSH
10107: LD_INT 75
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10115: LD_VAR 0 6
10119: PPUSH
10120: CALL_OW 264
10124: PUSH
10125: LD_INT 26
10127: PUSH
10128: EMPTY
10129: LIST
10130: IN
10131: IFFALSE 10152
// points := [ 120 , 30 , 80 ] ;
10133: LD_ADDR_VAR 0 9
10137: PUSH
10138: LD_INT 120
10140: PUSH
10141: LD_INT 30
10143: PUSH
10144: LD_INT 80
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: LIST
10151: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10152: LD_VAR 0 6
10156: PPUSH
10157: CALL_OW 264
10161: PUSH
10162: LD_INT 22
10164: PUSH
10165: EMPTY
10166: LIST
10167: IN
10168: IFFALSE 10189
// points := [ 40 , 1 , 1 ] ;
10170: LD_ADDR_VAR 0 9
10174: PUSH
10175: LD_INT 40
10177: PUSH
10178: LD_INT 1
10180: PUSH
10181: LD_INT 1
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: LIST
10188: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10189: LD_VAR 0 6
10193: PPUSH
10194: CALL_OW 264
10198: PUSH
10199: LD_INT 29
10201: PUSH
10202: EMPTY
10203: LIST
10204: IN
10205: IFFALSE 10226
// points := [ 70 , 200 , 400 ] ;
10207: LD_ADDR_VAR 0 9
10211: PUSH
10212: LD_INT 70
10214: PUSH
10215: LD_INT 200
10217: PUSH
10218: LD_INT 400
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: LIST
10225: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10226: LD_VAR 0 6
10230: PPUSH
10231: CALL_OW 264
10235: PUSH
10236: LD_INT 14
10238: PUSH
10239: LD_INT 53
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: IN
10246: IFFALSE 10267
// points := [ 40 , 10 , 20 ] ;
10248: LD_ADDR_VAR 0 9
10252: PUSH
10253: LD_INT 40
10255: PUSH
10256: LD_INT 10
10258: PUSH
10259: LD_INT 20
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: LIST
10266: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10267: LD_VAR 0 6
10271: PPUSH
10272: CALL_OW 264
10276: PUSH
10277: LD_INT 9
10279: PUSH
10280: EMPTY
10281: LIST
10282: IN
10283: IFFALSE 10304
// points := [ 5 , 70 , 20 ] ;
10285: LD_ADDR_VAR 0 9
10289: PUSH
10290: LD_INT 5
10292: PUSH
10293: LD_INT 70
10295: PUSH
10296: LD_INT 20
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: LIST
10303: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10304: LD_VAR 0 6
10308: PPUSH
10309: CALL_OW 264
10313: PUSH
10314: LD_INT 10
10316: PUSH
10317: EMPTY
10318: LIST
10319: IN
10320: IFFALSE 10341
// points := [ 35 , 110 , 70 ] ;
10322: LD_ADDR_VAR 0 9
10326: PUSH
10327: LD_INT 35
10329: PUSH
10330: LD_INT 110
10332: PUSH
10333: LD_INT 70
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: LIST
10340: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10341: LD_VAR 0 6
10345: PPUSH
10346: CALL_OW 265
10350: PUSH
10351: LD_INT 25
10353: EQUAL
10354: IFFALSE 10375
// points := [ 80 , 65 , 100 ] ;
10356: LD_ADDR_VAR 0 9
10360: PUSH
10361: LD_INT 80
10363: PUSH
10364: LD_INT 65
10366: PUSH
10367: LD_INT 100
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: LIST
10374: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10375: LD_VAR 0 6
10379: PPUSH
10380: CALL_OW 263
10384: PUSH
10385: LD_INT 1
10387: EQUAL
10388: IFFALSE 10423
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10390: LD_ADDR_VAR 0 10
10394: PUSH
10395: LD_VAR 0 10
10399: PUSH
10400: LD_VAR 0 6
10404: PPUSH
10405: CALL_OW 311
10409: PPUSH
10410: LD_INT 3
10412: PPUSH
10413: CALL_OW 259
10417: PUSH
10418: LD_INT 4
10420: MUL
10421: MUL
10422: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10423: LD_VAR 0 6
10427: PPUSH
10428: CALL_OW 263
10432: PUSH
10433: LD_INT 2
10435: EQUAL
10436: IFFALSE 10487
// begin j := IsControledBy ( i ) ;
10438: LD_ADDR_VAR 0 7
10442: PUSH
10443: LD_VAR 0 6
10447: PPUSH
10448: CALL_OW 312
10452: ST_TO_ADDR
// if j then
10453: LD_VAR 0 7
10457: IFFALSE 10487
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10459: LD_ADDR_VAR 0 10
10463: PUSH
10464: LD_VAR 0 10
10468: PUSH
10469: LD_VAR 0 7
10473: PPUSH
10474: LD_INT 3
10476: PPUSH
10477: CALL_OW 259
10481: PUSH
10482: LD_INT 3
10484: MUL
10485: MUL
10486: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10487: LD_VAR 0 6
10491: PPUSH
10492: CALL_OW 264
10496: PUSH
10497: LD_INT 5
10499: PUSH
10500: LD_INT 6
10502: PUSH
10503: LD_INT 46
10505: PUSH
10506: LD_INT 44
10508: PUSH
10509: LD_INT 47
10511: PUSH
10512: LD_INT 45
10514: PUSH
10515: LD_INT 28
10517: PUSH
10518: LD_INT 7
10520: PUSH
10521: LD_INT 27
10523: PUSH
10524: LD_INT 29
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: IN
10539: PUSH
10540: LD_VAR 0 1
10544: PPUSH
10545: LD_INT 52
10547: PPUSH
10548: CALL_OW 321
10552: PUSH
10553: LD_INT 2
10555: EQUAL
10556: AND
10557: IFFALSE 10574
// bpoints := bpoints * 1.2 ;
10559: LD_ADDR_VAR 0 10
10563: PUSH
10564: LD_VAR 0 10
10568: PUSH
10569: LD_REAL  1.20000000000000E+0000
10572: MUL
10573: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10574: LD_VAR 0 6
10578: PPUSH
10579: CALL_OW 264
10583: PUSH
10584: LD_INT 6
10586: PUSH
10587: LD_INT 46
10589: PUSH
10590: LD_INT 47
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: LIST
10597: IN
10598: IFFALSE 10615
// bpoints := bpoints * 1.2 ;
10600: LD_ADDR_VAR 0 10
10604: PUSH
10605: LD_VAR 0 10
10609: PUSH
10610: LD_REAL  1.20000000000000E+0000
10613: MUL
10614: ST_TO_ADDR
// end ; unit_building :
10615: GO 10629
10617: LD_INT 3
10619: DOUBLE
10620: EQUAL
10621: IFTRUE 10625
10623: GO 10628
10625: POP
// ; end ;
10626: GO 10629
10628: POP
// for j = 1 to 3 do
10629: LD_ADDR_VAR 0 7
10633: PUSH
10634: DOUBLE
10635: LD_INT 1
10637: DEC
10638: ST_TO_ADDR
10639: LD_INT 3
10641: PUSH
10642: FOR_TO
10643: IFFALSE 10696
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10645: LD_ADDR_VAR 0 5
10649: PUSH
10650: LD_VAR 0 5
10654: PPUSH
10655: LD_VAR 0 7
10659: PPUSH
10660: LD_VAR 0 5
10664: PUSH
10665: LD_VAR 0 7
10669: ARRAY
10670: PUSH
10671: LD_VAR 0 9
10675: PUSH
10676: LD_VAR 0 7
10680: ARRAY
10681: PUSH
10682: LD_VAR 0 10
10686: MUL
10687: PLUS
10688: PPUSH
10689: CALL_OW 1
10693: ST_TO_ADDR
10694: GO 10642
10696: POP
10697: POP
// end ;
10698: GO 9177
10700: POP
10701: POP
// result := Replace ( result , 4 , tmp ) ;
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: LD_VAR 0 5
10711: PPUSH
10712: LD_INT 4
10714: PPUSH
10715: LD_VAR 0 8
10719: PPUSH
10720: CALL_OW 1
10724: ST_TO_ADDR
// end ;
10725: LD_VAR 0 5
10729: RET
// export function DangerAtRange ( unit , range ) ; begin
10730: LD_INT 0
10732: PPUSH
// if not unit then
10733: LD_VAR 0 1
10737: NOT
10738: IFFALSE 10742
// exit ;
10740: GO 10787
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10742: LD_ADDR_VAR 0 3
10746: PUSH
10747: LD_VAR 0 1
10751: PPUSH
10752: CALL_OW 255
10756: PPUSH
10757: LD_VAR 0 1
10761: PPUSH
10762: CALL_OW 250
10766: PPUSH
10767: LD_VAR 0 1
10771: PPUSH
10772: CALL_OW 251
10776: PPUSH
10777: LD_VAR 0 2
10781: PPUSH
10782: CALL 9029 0 4
10786: ST_TO_ADDR
// end ;
10787: LD_VAR 0 3
10791: RET
// export function DangerInArea ( side , area ) ; begin
10792: LD_INT 0
10794: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10795: LD_ADDR_VAR 0 3
10799: PUSH
10800: LD_VAR 0 2
10804: PPUSH
10805: LD_INT 81
10807: PUSH
10808: LD_VAR 0 1
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PPUSH
10817: CALL_OW 70
10821: ST_TO_ADDR
// end ;
10822: LD_VAR 0 3
10826: RET
// export function IsExtension ( b ) ; begin
10827: LD_INT 0
10829: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10830: LD_ADDR_VAR 0 2
10834: PUSH
10835: LD_VAR 0 1
10839: PUSH
10840: LD_INT 23
10842: PUSH
10843: LD_INT 20
10845: PUSH
10846: LD_INT 22
10848: PUSH
10849: LD_INT 17
10851: PUSH
10852: LD_INT 24
10854: PUSH
10855: LD_INT 21
10857: PUSH
10858: LD_INT 19
10860: PUSH
10861: LD_INT 16
10863: PUSH
10864: LD_INT 25
10866: PUSH
10867: LD_INT 18
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: IN
10882: ST_TO_ADDR
// end ;
10883: LD_VAR 0 2
10887: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10888: LD_INT 0
10890: PPUSH
10891: PPUSH
10892: PPUSH
// result := [ ] ;
10893: LD_ADDR_VAR 0 4
10897: PUSH
10898: EMPTY
10899: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10900: LD_ADDR_VAR 0 5
10904: PUSH
10905: LD_VAR 0 2
10909: PPUSH
10910: LD_INT 21
10912: PUSH
10913: LD_INT 3
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PPUSH
10920: CALL_OW 70
10924: ST_TO_ADDR
// if not tmp then
10925: LD_VAR 0 5
10929: NOT
10930: IFFALSE 10934
// exit ;
10932: GO 10998
// if checkLink then
10934: LD_VAR 0 3
10938: IFFALSE 10988
// begin for i in tmp do
10940: LD_ADDR_VAR 0 6
10944: PUSH
10945: LD_VAR 0 5
10949: PUSH
10950: FOR_IN
10951: IFFALSE 10986
// if GetBase ( i ) <> base then
10953: LD_VAR 0 6
10957: PPUSH
10958: CALL_OW 274
10962: PUSH
10963: LD_VAR 0 1
10967: NONEQUAL
10968: IFFALSE 10984
// ComLinkToBase ( base , i ) ;
10970: LD_VAR 0 1
10974: PPUSH
10975: LD_VAR 0 6
10979: PPUSH
10980: CALL_OW 169
10984: GO 10950
10986: POP
10987: POP
// end ; result := tmp ;
10988: LD_ADDR_VAR 0 4
10992: PUSH
10993: LD_VAR 0 5
10997: ST_TO_ADDR
// end ;
10998: LD_VAR 0 4
11002: RET
// export function ComComplete ( units , b ) ; var i ; begin
11003: LD_INT 0
11005: PPUSH
11006: PPUSH
// if not units then
11007: LD_VAR 0 1
11011: NOT
11012: IFFALSE 11016
// exit ;
11014: GO 11106
// for i in units do
11016: LD_ADDR_VAR 0 4
11020: PUSH
11021: LD_VAR 0 1
11025: PUSH
11026: FOR_IN
11027: IFFALSE 11104
// if BuildingStatus ( b ) = bs_build then
11029: LD_VAR 0 2
11033: PPUSH
11034: CALL_OW 461
11038: PUSH
11039: LD_INT 1
11041: EQUAL
11042: IFFALSE 11102
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11044: LD_VAR 0 4
11048: PPUSH
11049: LD_STRING h
11051: PUSH
11052: LD_VAR 0 2
11056: PPUSH
11057: CALL_OW 250
11061: PUSH
11062: LD_VAR 0 2
11066: PPUSH
11067: CALL_OW 251
11071: PUSH
11072: LD_VAR 0 2
11076: PUSH
11077: LD_INT 0
11079: PUSH
11080: LD_INT 0
11082: PUSH
11083: LD_INT 0
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: PUSH
11095: EMPTY
11096: LIST
11097: PPUSH
11098: CALL_OW 446
11102: GO 11026
11104: POP
11105: POP
// end ;
11106: LD_VAR 0 3
11110: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11111: LD_INT 0
11113: PPUSH
11114: PPUSH
11115: PPUSH
11116: PPUSH
11117: PPUSH
11118: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11119: LD_VAR 0 1
11123: NOT
11124: PUSH
11125: LD_VAR 0 1
11129: PPUSH
11130: CALL_OW 263
11134: PUSH
11135: LD_INT 2
11137: NONEQUAL
11138: OR
11139: IFFALSE 11143
// exit ;
11141: GO 11459
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11143: LD_ADDR_VAR 0 6
11147: PUSH
11148: LD_INT 22
11150: PUSH
11151: LD_VAR 0 1
11155: PPUSH
11156: CALL_OW 255
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: LD_INT 2
11167: PUSH
11168: LD_INT 30
11170: PUSH
11171: LD_INT 36
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PUSH
11178: LD_INT 34
11180: PUSH
11181: LD_INT 31
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: LIST
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PPUSH
11197: CALL_OW 69
11201: ST_TO_ADDR
// if not tmp then
11202: LD_VAR 0 6
11206: NOT
11207: IFFALSE 11211
// exit ;
11209: GO 11459
// result := [ ] ;
11211: LD_ADDR_VAR 0 2
11215: PUSH
11216: EMPTY
11217: ST_TO_ADDR
// for i in tmp do
11218: LD_ADDR_VAR 0 3
11222: PUSH
11223: LD_VAR 0 6
11227: PUSH
11228: FOR_IN
11229: IFFALSE 11300
// begin t := UnitsInside ( i ) ;
11231: LD_ADDR_VAR 0 4
11235: PUSH
11236: LD_VAR 0 3
11240: PPUSH
11241: CALL_OW 313
11245: ST_TO_ADDR
// if t then
11246: LD_VAR 0 4
11250: IFFALSE 11298
// for j in t do
11252: LD_ADDR_VAR 0 7
11256: PUSH
11257: LD_VAR 0 4
11261: PUSH
11262: FOR_IN
11263: IFFALSE 11296
// result := Replace ( result , result + 1 , j ) ;
11265: LD_ADDR_VAR 0 2
11269: PUSH
11270: LD_VAR 0 2
11274: PPUSH
11275: LD_VAR 0 2
11279: PUSH
11280: LD_INT 1
11282: PLUS
11283: PPUSH
11284: LD_VAR 0 7
11288: PPUSH
11289: CALL_OW 1
11293: ST_TO_ADDR
11294: GO 11262
11296: POP
11297: POP
// end ;
11298: GO 11228
11300: POP
11301: POP
// if not result then
11302: LD_VAR 0 2
11306: NOT
11307: IFFALSE 11311
// exit ;
11309: GO 11459
// mech := result [ 1 ] ;
11311: LD_ADDR_VAR 0 5
11315: PUSH
11316: LD_VAR 0 2
11320: PUSH
11321: LD_INT 1
11323: ARRAY
11324: ST_TO_ADDR
// if result > 1 then
11325: LD_VAR 0 2
11329: PUSH
11330: LD_INT 1
11332: GREATER
11333: IFFALSE 11445
// begin for i = 2 to result do
11335: LD_ADDR_VAR 0 3
11339: PUSH
11340: DOUBLE
11341: LD_INT 2
11343: DEC
11344: ST_TO_ADDR
11345: LD_VAR 0 2
11349: PUSH
11350: FOR_TO
11351: IFFALSE 11443
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11353: LD_ADDR_VAR 0 4
11357: PUSH
11358: LD_VAR 0 2
11362: PUSH
11363: LD_VAR 0 3
11367: ARRAY
11368: PPUSH
11369: LD_INT 3
11371: PPUSH
11372: CALL_OW 259
11376: PUSH
11377: LD_VAR 0 2
11381: PUSH
11382: LD_VAR 0 3
11386: ARRAY
11387: PPUSH
11388: CALL_OW 432
11392: MINUS
11393: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11394: LD_VAR 0 4
11398: PUSH
11399: LD_VAR 0 5
11403: PPUSH
11404: LD_INT 3
11406: PPUSH
11407: CALL_OW 259
11411: PUSH
11412: LD_VAR 0 5
11416: PPUSH
11417: CALL_OW 432
11421: MINUS
11422: GREATEREQUAL
11423: IFFALSE 11441
// mech := result [ i ] ;
11425: LD_ADDR_VAR 0 5
11429: PUSH
11430: LD_VAR 0 2
11434: PUSH
11435: LD_VAR 0 3
11439: ARRAY
11440: ST_TO_ADDR
// end ;
11441: GO 11350
11443: POP
11444: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11445: LD_VAR 0 1
11449: PPUSH
11450: LD_VAR 0 5
11454: PPUSH
11455: CALL_OW 135
// end ;
11459: LD_VAR 0 2
11463: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11464: LD_INT 0
11466: PPUSH
11467: PPUSH
11468: PPUSH
11469: PPUSH
11470: PPUSH
11471: PPUSH
11472: PPUSH
11473: PPUSH
11474: PPUSH
11475: PPUSH
11476: PPUSH
11477: PPUSH
11478: PPUSH
// result := [ ] ;
11479: LD_ADDR_VAR 0 7
11483: PUSH
11484: EMPTY
11485: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11486: LD_VAR 0 1
11490: PPUSH
11491: CALL_OW 266
11495: PUSH
11496: LD_INT 0
11498: PUSH
11499: LD_INT 1
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: IN
11506: NOT
11507: IFFALSE 11511
// exit ;
11509: GO 13145
// if name then
11511: LD_VAR 0 3
11515: IFFALSE 11531
// SetBName ( base_dep , name ) ;
11517: LD_VAR 0 1
11521: PPUSH
11522: LD_VAR 0 3
11526: PPUSH
11527: CALL_OW 500
// base := GetBase ( base_dep ) ;
11531: LD_ADDR_VAR 0 15
11535: PUSH
11536: LD_VAR 0 1
11540: PPUSH
11541: CALL_OW 274
11545: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11546: LD_ADDR_VAR 0 16
11550: PUSH
11551: LD_VAR 0 1
11555: PPUSH
11556: CALL_OW 255
11560: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11561: LD_ADDR_VAR 0 17
11565: PUSH
11566: LD_VAR 0 1
11570: PPUSH
11571: CALL_OW 248
11575: ST_TO_ADDR
// if sources then
11576: LD_VAR 0 5
11580: IFFALSE 11627
// for i = 1 to 3 do
11582: LD_ADDR_VAR 0 8
11586: PUSH
11587: DOUBLE
11588: LD_INT 1
11590: DEC
11591: ST_TO_ADDR
11592: LD_INT 3
11594: PUSH
11595: FOR_TO
11596: IFFALSE 11625
// AddResourceType ( base , i , sources [ i ] ) ;
11598: LD_VAR 0 15
11602: PPUSH
11603: LD_VAR 0 8
11607: PPUSH
11608: LD_VAR 0 5
11612: PUSH
11613: LD_VAR 0 8
11617: ARRAY
11618: PPUSH
11619: CALL_OW 276
11623: GO 11595
11625: POP
11626: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11627: LD_ADDR_VAR 0 18
11631: PUSH
11632: LD_VAR 0 15
11636: PPUSH
11637: LD_VAR 0 2
11641: PPUSH
11642: LD_INT 1
11644: PPUSH
11645: CALL 10888 0 3
11649: ST_TO_ADDR
// InitHc ;
11650: CALL_OW 19
// InitUc ;
11654: CALL_OW 18
// uc_side := side ;
11658: LD_ADDR_OWVAR 20
11662: PUSH
11663: LD_VAR 0 16
11667: ST_TO_ADDR
// uc_nation := nation ;
11668: LD_ADDR_OWVAR 21
11672: PUSH
11673: LD_VAR 0 17
11677: ST_TO_ADDR
// if buildings then
11678: LD_VAR 0 18
11682: IFFALSE 13004
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11684: LD_ADDR_VAR 0 19
11688: PUSH
11689: LD_VAR 0 18
11693: PPUSH
11694: LD_INT 2
11696: PUSH
11697: LD_INT 30
11699: PUSH
11700: LD_INT 29
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 30
11709: PUSH
11710: LD_INT 30
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: PPUSH
11722: CALL_OW 72
11726: ST_TO_ADDR
// if tmp then
11727: LD_VAR 0 19
11731: IFFALSE 11779
// for i in tmp do
11733: LD_ADDR_VAR 0 8
11737: PUSH
11738: LD_VAR 0 19
11742: PUSH
11743: FOR_IN
11744: IFFALSE 11777
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11746: LD_VAR 0 8
11750: PPUSH
11751: CALL_OW 250
11755: PPUSH
11756: LD_VAR 0 8
11760: PPUSH
11761: CALL_OW 251
11765: PPUSH
11766: LD_VAR 0 16
11770: PPUSH
11771: CALL_OW 441
11775: GO 11743
11777: POP
11778: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11779: LD_VAR 0 18
11783: PPUSH
11784: LD_INT 2
11786: PUSH
11787: LD_INT 30
11789: PUSH
11790: LD_INT 32
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 30
11799: PUSH
11800: LD_INT 33
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: LIST
11811: PPUSH
11812: CALL_OW 72
11816: IFFALSE 11904
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11818: LD_ADDR_VAR 0 8
11822: PUSH
11823: LD_VAR 0 18
11827: PPUSH
11828: LD_INT 2
11830: PUSH
11831: LD_INT 30
11833: PUSH
11834: LD_INT 32
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 30
11843: PUSH
11844: LD_INT 33
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: LIST
11855: PPUSH
11856: CALL_OW 72
11860: PUSH
11861: FOR_IN
11862: IFFALSE 11902
// begin if not GetBWeapon ( i ) then
11864: LD_VAR 0 8
11868: PPUSH
11869: CALL_OW 269
11873: NOT
11874: IFFALSE 11900
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11876: LD_VAR 0 8
11880: PPUSH
11881: LD_VAR 0 8
11885: PPUSH
11886: LD_VAR 0 2
11890: PPUSH
11891: CALL 13150 0 2
11895: PPUSH
11896: CALL_OW 431
// end ;
11900: GO 11861
11902: POP
11903: POP
// end ; for i = 1 to personel do
11904: LD_ADDR_VAR 0 8
11908: PUSH
11909: DOUBLE
11910: LD_INT 1
11912: DEC
11913: ST_TO_ADDR
11914: LD_VAR 0 6
11918: PUSH
11919: FOR_TO
11920: IFFALSE 12984
// begin if i > 4 then
11922: LD_VAR 0 8
11926: PUSH
11927: LD_INT 4
11929: GREATER
11930: IFFALSE 11934
// break ;
11932: GO 12984
// case i of 1 :
11934: LD_VAR 0 8
11938: PUSH
11939: LD_INT 1
11941: DOUBLE
11942: EQUAL
11943: IFTRUE 11947
11945: GO 12027
11947: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11948: LD_ADDR_VAR 0 12
11952: PUSH
11953: LD_VAR 0 18
11957: PPUSH
11958: LD_INT 22
11960: PUSH
11961: LD_VAR 0 16
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PUSH
11970: LD_INT 58
11972: PUSH
11973: EMPTY
11974: LIST
11975: PUSH
11976: LD_INT 2
11978: PUSH
11979: LD_INT 30
11981: PUSH
11982: LD_INT 32
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 30
11991: PUSH
11992: LD_INT 4
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 30
12001: PUSH
12002: LD_INT 5
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: LIST
12019: PPUSH
12020: CALL_OW 72
12024: ST_TO_ADDR
12025: GO 12249
12027: LD_INT 2
12029: DOUBLE
12030: EQUAL
12031: IFTRUE 12035
12033: GO 12097
12035: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12036: LD_ADDR_VAR 0 12
12040: PUSH
12041: LD_VAR 0 18
12045: PPUSH
12046: LD_INT 22
12048: PUSH
12049: LD_VAR 0 16
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 2
12060: PUSH
12061: LD_INT 30
12063: PUSH
12064: LD_INT 0
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 30
12073: PUSH
12074: LD_INT 1
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: LIST
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PPUSH
12090: CALL_OW 72
12094: ST_TO_ADDR
12095: GO 12249
12097: LD_INT 3
12099: DOUBLE
12100: EQUAL
12101: IFTRUE 12105
12103: GO 12167
12105: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12106: LD_ADDR_VAR 0 12
12110: PUSH
12111: LD_VAR 0 18
12115: PPUSH
12116: LD_INT 22
12118: PUSH
12119: LD_VAR 0 16
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 2
12130: PUSH
12131: LD_INT 30
12133: PUSH
12134: LD_INT 2
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 30
12143: PUSH
12144: LD_INT 3
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: LIST
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PPUSH
12160: CALL_OW 72
12164: ST_TO_ADDR
12165: GO 12249
12167: LD_INT 4
12169: DOUBLE
12170: EQUAL
12171: IFTRUE 12175
12173: GO 12248
12175: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12176: LD_ADDR_VAR 0 12
12180: PUSH
12181: LD_VAR 0 18
12185: PPUSH
12186: LD_INT 22
12188: PUSH
12189: LD_VAR 0 16
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PUSH
12198: LD_INT 2
12200: PUSH
12201: LD_INT 30
12203: PUSH
12204: LD_INT 6
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 30
12213: PUSH
12214: LD_INT 7
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 30
12223: PUSH
12224: LD_INT 8
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PPUSH
12241: CALL_OW 72
12245: ST_TO_ADDR
12246: GO 12249
12248: POP
// if i = 1 then
12249: LD_VAR 0 8
12253: PUSH
12254: LD_INT 1
12256: EQUAL
12257: IFFALSE 12368
// begin tmp := [ ] ;
12259: LD_ADDR_VAR 0 19
12263: PUSH
12264: EMPTY
12265: ST_TO_ADDR
// for j in f do
12266: LD_ADDR_VAR 0 9
12270: PUSH
12271: LD_VAR 0 12
12275: PUSH
12276: FOR_IN
12277: IFFALSE 12350
// if GetBType ( j ) = b_bunker then
12279: LD_VAR 0 9
12283: PPUSH
12284: CALL_OW 266
12288: PUSH
12289: LD_INT 32
12291: EQUAL
12292: IFFALSE 12319
// tmp := Insert ( tmp , 1 , j ) else
12294: LD_ADDR_VAR 0 19
12298: PUSH
12299: LD_VAR 0 19
12303: PPUSH
12304: LD_INT 1
12306: PPUSH
12307: LD_VAR 0 9
12311: PPUSH
12312: CALL_OW 2
12316: ST_TO_ADDR
12317: GO 12348
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12319: LD_ADDR_VAR 0 19
12323: PUSH
12324: LD_VAR 0 19
12328: PPUSH
12329: LD_VAR 0 19
12333: PUSH
12334: LD_INT 1
12336: PLUS
12337: PPUSH
12338: LD_VAR 0 9
12342: PPUSH
12343: CALL_OW 2
12347: ST_TO_ADDR
12348: GO 12276
12350: POP
12351: POP
// if tmp then
12352: LD_VAR 0 19
12356: IFFALSE 12368
// f := tmp ;
12358: LD_ADDR_VAR 0 12
12362: PUSH
12363: LD_VAR 0 19
12367: ST_TO_ADDR
// end ; x := personel [ i ] ;
12368: LD_ADDR_VAR 0 13
12372: PUSH
12373: LD_VAR 0 6
12377: PUSH
12378: LD_VAR 0 8
12382: ARRAY
12383: ST_TO_ADDR
// if x = - 1 then
12384: LD_VAR 0 13
12388: PUSH
12389: LD_INT 1
12391: NEG
12392: EQUAL
12393: IFFALSE 12602
// begin for j in f do
12395: LD_ADDR_VAR 0 9
12399: PUSH
12400: LD_VAR 0 12
12404: PUSH
12405: FOR_IN
12406: IFFALSE 12598
// repeat InitHc ;
12408: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12412: LD_VAR 0 9
12416: PPUSH
12417: CALL_OW 266
12421: PUSH
12422: LD_INT 5
12424: EQUAL
12425: IFFALSE 12495
// begin if UnitsInside ( j ) < 3 then
12427: LD_VAR 0 9
12431: PPUSH
12432: CALL_OW 313
12436: PUSH
12437: LD_INT 3
12439: LESS
12440: IFFALSE 12476
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12442: LD_INT 0
12444: PPUSH
12445: LD_INT 5
12447: PUSH
12448: LD_INT 8
12450: PUSH
12451: LD_INT 9
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: LIST
12458: PUSH
12459: LD_VAR 0 17
12463: ARRAY
12464: PPUSH
12465: LD_VAR 0 4
12469: PPUSH
12470: CALL_OW 380
12474: GO 12493
// PrepareHuman ( false , i , skill ) ;
12476: LD_INT 0
12478: PPUSH
12479: LD_VAR 0 8
12483: PPUSH
12484: LD_VAR 0 4
12488: PPUSH
12489: CALL_OW 380
// end else
12493: GO 12512
// PrepareHuman ( false , i , skill ) ;
12495: LD_INT 0
12497: PPUSH
12498: LD_VAR 0 8
12502: PPUSH
12503: LD_VAR 0 4
12507: PPUSH
12508: CALL_OW 380
// un := CreateHuman ;
12512: LD_ADDR_VAR 0 14
12516: PUSH
12517: CALL_OW 44
12521: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12522: LD_ADDR_VAR 0 7
12526: PUSH
12527: LD_VAR 0 7
12531: PPUSH
12532: LD_INT 1
12534: PPUSH
12535: LD_VAR 0 14
12539: PPUSH
12540: CALL_OW 2
12544: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12545: LD_VAR 0 14
12549: PPUSH
12550: LD_VAR 0 9
12554: PPUSH
12555: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12559: LD_VAR 0 9
12563: PPUSH
12564: CALL_OW 313
12568: PUSH
12569: LD_INT 6
12571: EQUAL
12572: PUSH
12573: LD_VAR 0 9
12577: PPUSH
12578: CALL_OW 266
12582: PUSH
12583: LD_INT 32
12585: PUSH
12586: LD_INT 31
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: IN
12593: OR
12594: IFFALSE 12408
12596: GO 12405
12598: POP
12599: POP
// end else
12600: GO 12982
// for j = 1 to x do
12602: LD_ADDR_VAR 0 9
12606: PUSH
12607: DOUBLE
12608: LD_INT 1
12610: DEC
12611: ST_TO_ADDR
12612: LD_VAR 0 13
12616: PUSH
12617: FOR_TO
12618: IFFALSE 12980
// begin InitHc ;
12620: CALL_OW 19
// if not f then
12624: LD_VAR 0 12
12628: NOT
12629: IFFALSE 12718
// begin PrepareHuman ( false , i , skill ) ;
12631: LD_INT 0
12633: PPUSH
12634: LD_VAR 0 8
12638: PPUSH
12639: LD_VAR 0 4
12643: PPUSH
12644: CALL_OW 380
// un := CreateHuman ;
12648: LD_ADDR_VAR 0 14
12652: PUSH
12653: CALL_OW 44
12657: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12658: LD_ADDR_VAR 0 7
12662: PUSH
12663: LD_VAR 0 7
12667: PPUSH
12668: LD_INT 1
12670: PPUSH
12671: LD_VAR 0 14
12675: PPUSH
12676: CALL_OW 2
12680: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12681: LD_VAR 0 14
12685: PPUSH
12686: LD_VAR 0 1
12690: PPUSH
12691: CALL_OW 250
12695: PPUSH
12696: LD_VAR 0 1
12700: PPUSH
12701: CALL_OW 251
12705: PPUSH
12706: LD_INT 10
12708: PPUSH
12709: LD_INT 0
12711: PPUSH
12712: CALL_OW 50
// continue ;
12716: GO 12617
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12718: LD_VAR 0 12
12722: PUSH
12723: LD_INT 1
12725: ARRAY
12726: PPUSH
12727: CALL_OW 313
12731: PUSH
12732: LD_VAR 0 12
12736: PUSH
12737: LD_INT 1
12739: ARRAY
12740: PPUSH
12741: CALL_OW 266
12745: PUSH
12746: LD_INT 32
12748: PUSH
12749: LD_INT 31
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: IN
12756: AND
12757: PUSH
12758: LD_VAR 0 12
12762: PUSH
12763: LD_INT 1
12765: ARRAY
12766: PPUSH
12767: CALL_OW 313
12771: PUSH
12772: LD_INT 6
12774: EQUAL
12775: OR
12776: IFFALSE 12796
// f := Delete ( f , 1 ) ;
12778: LD_ADDR_VAR 0 12
12782: PUSH
12783: LD_VAR 0 12
12787: PPUSH
12788: LD_INT 1
12790: PPUSH
12791: CALL_OW 3
12795: ST_TO_ADDR
// if not f then
12796: LD_VAR 0 12
12800: NOT
12801: IFFALSE 12819
// begin x := x + 2 ;
12803: LD_ADDR_VAR 0 13
12807: PUSH
12808: LD_VAR 0 13
12812: PUSH
12813: LD_INT 2
12815: PLUS
12816: ST_TO_ADDR
// continue ;
12817: GO 12617
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12819: LD_VAR 0 12
12823: PUSH
12824: LD_INT 1
12826: ARRAY
12827: PPUSH
12828: CALL_OW 266
12832: PUSH
12833: LD_INT 5
12835: EQUAL
12836: IFFALSE 12910
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12838: LD_VAR 0 12
12842: PUSH
12843: LD_INT 1
12845: ARRAY
12846: PPUSH
12847: CALL_OW 313
12851: PUSH
12852: LD_INT 3
12854: LESS
12855: IFFALSE 12891
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12857: LD_INT 0
12859: PPUSH
12860: LD_INT 5
12862: PUSH
12863: LD_INT 8
12865: PUSH
12866: LD_INT 9
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: LIST
12873: PUSH
12874: LD_VAR 0 17
12878: ARRAY
12879: PPUSH
12880: LD_VAR 0 4
12884: PPUSH
12885: CALL_OW 380
12889: GO 12908
// PrepareHuman ( false , i , skill ) ;
12891: LD_INT 0
12893: PPUSH
12894: LD_VAR 0 8
12898: PPUSH
12899: LD_VAR 0 4
12903: PPUSH
12904: CALL_OW 380
// end else
12908: GO 12927
// PrepareHuman ( false , i , skill ) ;
12910: LD_INT 0
12912: PPUSH
12913: LD_VAR 0 8
12917: PPUSH
12918: LD_VAR 0 4
12922: PPUSH
12923: CALL_OW 380
// un := CreateHuman ;
12927: LD_ADDR_VAR 0 14
12931: PUSH
12932: CALL_OW 44
12936: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12937: LD_ADDR_VAR 0 7
12941: PUSH
12942: LD_VAR 0 7
12946: PPUSH
12947: LD_INT 1
12949: PPUSH
12950: LD_VAR 0 14
12954: PPUSH
12955: CALL_OW 2
12959: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12960: LD_VAR 0 14
12964: PPUSH
12965: LD_VAR 0 12
12969: PUSH
12970: LD_INT 1
12972: ARRAY
12973: PPUSH
12974: CALL_OW 52
// end ;
12978: GO 12617
12980: POP
12981: POP
// end ;
12982: GO 11919
12984: POP
12985: POP
// result := result ^ buildings ;
12986: LD_ADDR_VAR 0 7
12990: PUSH
12991: LD_VAR 0 7
12995: PUSH
12996: LD_VAR 0 18
13000: ADD
13001: ST_TO_ADDR
// end else
13002: GO 13145
// begin for i = 1 to personel do
13004: LD_ADDR_VAR 0 8
13008: PUSH
13009: DOUBLE
13010: LD_INT 1
13012: DEC
13013: ST_TO_ADDR
13014: LD_VAR 0 6
13018: PUSH
13019: FOR_TO
13020: IFFALSE 13143
// begin if i > 4 then
13022: LD_VAR 0 8
13026: PUSH
13027: LD_INT 4
13029: GREATER
13030: IFFALSE 13034
// break ;
13032: GO 13143
// x := personel [ i ] ;
13034: LD_ADDR_VAR 0 13
13038: PUSH
13039: LD_VAR 0 6
13043: PUSH
13044: LD_VAR 0 8
13048: ARRAY
13049: ST_TO_ADDR
// if x = - 1 then
13050: LD_VAR 0 13
13054: PUSH
13055: LD_INT 1
13057: NEG
13058: EQUAL
13059: IFFALSE 13063
// continue ;
13061: GO 13019
// PrepareHuman ( false , i , skill ) ;
13063: LD_INT 0
13065: PPUSH
13066: LD_VAR 0 8
13070: PPUSH
13071: LD_VAR 0 4
13075: PPUSH
13076: CALL_OW 380
// un := CreateHuman ;
13080: LD_ADDR_VAR 0 14
13084: PUSH
13085: CALL_OW 44
13089: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13090: LD_VAR 0 14
13094: PPUSH
13095: LD_VAR 0 1
13099: PPUSH
13100: CALL_OW 250
13104: PPUSH
13105: LD_VAR 0 1
13109: PPUSH
13110: CALL_OW 251
13114: PPUSH
13115: LD_INT 10
13117: PPUSH
13118: LD_INT 0
13120: PPUSH
13121: CALL_OW 50
// result := result ^ un ;
13125: LD_ADDR_VAR 0 7
13129: PUSH
13130: LD_VAR 0 7
13134: PUSH
13135: LD_VAR 0 14
13139: ADD
13140: ST_TO_ADDR
// end ;
13141: GO 13019
13143: POP
13144: POP
// end ; end ;
13145: LD_VAR 0 7
13149: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13150: LD_INT 0
13152: PPUSH
13153: PPUSH
13154: PPUSH
13155: PPUSH
13156: PPUSH
13157: PPUSH
13158: PPUSH
13159: PPUSH
13160: PPUSH
13161: PPUSH
13162: PPUSH
13163: PPUSH
13164: PPUSH
13165: PPUSH
13166: PPUSH
13167: PPUSH
// result := false ;
13168: LD_ADDR_VAR 0 3
13172: PUSH
13173: LD_INT 0
13175: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13176: LD_VAR 0 1
13180: NOT
13181: PUSH
13182: LD_VAR 0 1
13186: PPUSH
13187: CALL_OW 266
13191: PUSH
13192: LD_INT 32
13194: PUSH
13195: LD_INT 33
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: IN
13202: NOT
13203: OR
13204: IFFALSE 13208
// exit ;
13206: GO 14317
// nat := GetNation ( tower ) ;
13208: LD_ADDR_VAR 0 12
13212: PUSH
13213: LD_VAR 0 1
13217: PPUSH
13218: CALL_OW 248
13222: ST_TO_ADDR
// side := GetSide ( tower ) ;
13223: LD_ADDR_VAR 0 16
13227: PUSH
13228: LD_VAR 0 1
13232: PPUSH
13233: CALL_OW 255
13237: ST_TO_ADDR
// x := GetX ( tower ) ;
13238: LD_ADDR_VAR 0 10
13242: PUSH
13243: LD_VAR 0 1
13247: PPUSH
13248: CALL_OW 250
13252: ST_TO_ADDR
// y := GetY ( tower ) ;
13253: LD_ADDR_VAR 0 11
13257: PUSH
13258: LD_VAR 0 1
13262: PPUSH
13263: CALL_OW 251
13267: ST_TO_ADDR
// if not x or not y then
13268: LD_VAR 0 10
13272: NOT
13273: PUSH
13274: LD_VAR 0 11
13278: NOT
13279: OR
13280: IFFALSE 13284
// exit ;
13282: GO 14317
// weapon := 0 ;
13284: LD_ADDR_VAR 0 18
13288: PUSH
13289: LD_INT 0
13291: ST_TO_ADDR
// fac_list := [ ] ;
13292: LD_ADDR_VAR 0 17
13296: PUSH
13297: EMPTY
13298: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13299: LD_ADDR_VAR 0 6
13303: PUSH
13304: LD_VAR 0 1
13308: PPUSH
13309: CALL_OW 274
13313: PPUSH
13314: LD_VAR 0 2
13318: PPUSH
13319: LD_INT 0
13321: PPUSH
13322: CALL 10888 0 3
13326: PPUSH
13327: LD_INT 30
13329: PUSH
13330: LD_INT 3
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PPUSH
13337: CALL_OW 72
13341: ST_TO_ADDR
// if not factories then
13342: LD_VAR 0 6
13346: NOT
13347: IFFALSE 13351
// exit ;
13349: GO 14317
// for i in factories do
13351: LD_ADDR_VAR 0 8
13355: PUSH
13356: LD_VAR 0 6
13360: PUSH
13361: FOR_IN
13362: IFFALSE 13387
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13364: LD_ADDR_VAR 0 17
13368: PUSH
13369: LD_VAR 0 17
13373: PUSH
13374: LD_VAR 0 8
13378: PPUSH
13379: CALL_OW 478
13383: UNION
13384: ST_TO_ADDR
13385: GO 13361
13387: POP
13388: POP
// if not fac_list then
13389: LD_VAR 0 17
13393: NOT
13394: IFFALSE 13398
// exit ;
13396: GO 14317
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13398: LD_ADDR_VAR 0 5
13402: PUSH
13403: LD_INT 4
13405: PUSH
13406: LD_INT 5
13408: PUSH
13409: LD_INT 9
13411: PUSH
13412: LD_INT 10
13414: PUSH
13415: LD_INT 6
13417: PUSH
13418: LD_INT 7
13420: PUSH
13421: LD_INT 11
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 27
13435: PUSH
13436: LD_INT 28
13438: PUSH
13439: LD_INT 26
13441: PUSH
13442: LD_INT 30
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: PUSH
13451: LD_INT 43
13453: PUSH
13454: LD_INT 44
13456: PUSH
13457: LD_INT 46
13459: PUSH
13460: LD_INT 45
13462: PUSH
13463: LD_INT 47
13465: PUSH
13466: LD_INT 49
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: LD_VAR 0 12
13486: ARRAY
13487: ST_TO_ADDR
// list := list isect fac_list ;
13488: LD_ADDR_VAR 0 5
13492: PUSH
13493: LD_VAR 0 5
13497: PUSH
13498: LD_VAR 0 17
13502: ISECT
13503: ST_TO_ADDR
// if not list then
13504: LD_VAR 0 5
13508: NOT
13509: IFFALSE 13513
// exit ;
13511: GO 14317
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13513: LD_VAR 0 12
13517: PUSH
13518: LD_INT 3
13520: EQUAL
13521: PUSH
13522: LD_INT 49
13524: PUSH
13525: LD_VAR 0 5
13529: IN
13530: AND
13531: PUSH
13532: LD_INT 31
13534: PPUSH
13535: LD_VAR 0 16
13539: PPUSH
13540: CALL_OW 321
13544: PUSH
13545: LD_INT 2
13547: EQUAL
13548: AND
13549: IFFALSE 13609
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13551: LD_INT 22
13553: PUSH
13554: LD_VAR 0 16
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: PUSH
13563: LD_INT 35
13565: PUSH
13566: LD_INT 49
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PUSH
13573: LD_INT 91
13575: PUSH
13576: LD_VAR 0 1
13580: PUSH
13581: LD_INT 10
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: LIST
13593: PPUSH
13594: CALL_OW 69
13598: NOT
13599: IFFALSE 13609
// weapon := ru_time_lapser ;
13601: LD_ADDR_VAR 0 18
13605: PUSH
13606: LD_INT 49
13608: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13609: LD_VAR 0 12
13613: PUSH
13614: LD_INT 1
13616: PUSH
13617: LD_INT 2
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: IN
13624: PUSH
13625: LD_INT 11
13627: PUSH
13628: LD_VAR 0 5
13632: IN
13633: PUSH
13634: LD_INT 30
13636: PUSH
13637: LD_VAR 0 5
13641: IN
13642: OR
13643: AND
13644: PUSH
13645: LD_INT 6
13647: PPUSH
13648: LD_VAR 0 16
13652: PPUSH
13653: CALL_OW 321
13657: PUSH
13658: LD_INT 2
13660: EQUAL
13661: AND
13662: IFFALSE 13827
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13664: LD_INT 22
13666: PUSH
13667: LD_VAR 0 16
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 2
13678: PUSH
13679: LD_INT 35
13681: PUSH
13682: LD_INT 11
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 35
13691: PUSH
13692: LD_INT 30
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: LIST
13703: PUSH
13704: LD_INT 91
13706: PUSH
13707: LD_VAR 0 1
13711: PUSH
13712: LD_INT 18
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: LIST
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: LIST
13724: PPUSH
13725: CALL_OW 69
13729: NOT
13730: PUSH
13731: LD_INT 22
13733: PUSH
13734: LD_VAR 0 16
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 2
13745: PUSH
13746: LD_INT 30
13748: PUSH
13749: LD_INT 32
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: LD_INT 30
13758: PUSH
13759: LD_INT 33
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: PUSH
13771: LD_INT 91
13773: PUSH
13774: LD_VAR 0 1
13778: PUSH
13779: LD_INT 12
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: LIST
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: LIST
13791: PUSH
13792: EMPTY
13793: LIST
13794: PPUSH
13795: CALL_OW 69
13799: PUSH
13800: LD_INT 2
13802: GREATER
13803: AND
13804: IFFALSE 13827
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13806: LD_ADDR_VAR 0 18
13810: PUSH
13811: LD_INT 11
13813: PUSH
13814: LD_INT 30
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: LD_VAR 0 12
13825: ARRAY
13826: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13827: LD_VAR 0 18
13831: NOT
13832: PUSH
13833: LD_INT 40
13835: PPUSH
13836: LD_VAR 0 16
13840: PPUSH
13841: CALL_OW 321
13845: PUSH
13846: LD_INT 2
13848: EQUAL
13849: AND
13850: PUSH
13851: LD_INT 7
13853: PUSH
13854: LD_VAR 0 5
13858: IN
13859: PUSH
13860: LD_INT 28
13862: PUSH
13863: LD_VAR 0 5
13867: IN
13868: OR
13869: PUSH
13870: LD_INT 45
13872: PUSH
13873: LD_VAR 0 5
13877: IN
13878: OR
13879: AND
13880: IFFALSE 14134
// begin hex := GetHexInfo ( x , y ) ;
13882: LD_ADDR_VAR 0 4
13886: PUSH
13887: LD_VAR 0 10
13891: PPUSH
13892: LD_VAR 0 11
13896: PPUSH
13897: CALL_OW 546
13901: ST_TO_ADDR
// if hex [ 1 ] then
13902: LD_VAR 0 4
13906: PUSH
13907: LD_INT 1
13909: ARRAY
13910: IFFALSE 13914
// exit ;
13912: GO 14317
// height := hex [ 2 ] ;
13914: LD_ADDR_VAR 0 15
13918: PUSH
13919: LD_VAR 0 4
13923: PUSH
13924: LD_INT 2
13926: ARRAY
13927: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13928: LD_ADDR_VAR 0 14
13932: PUSH
13933: LD_INT 0
13935: PUSH
13936: LD_INT 2
13938: PUSH
13939: LD_INT 3
13941: PUSH
13942: LD_INT 5
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: ST_TO_ADDR
// for i in tmp do
13951: LD_ADDR_VAR 0 8
13955: PUSH
13956: LD_VAR 0 14
13960: PUSH
13961: FOR_IN
13962: IFFALSE 14132
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13964: LD_ADDR_VAR 0 9
13968: PUSH
13969: LD_VAR 0 10
13973: PPUSH
13974: LD_VAR 0 8
13978: PPUSH
13979: LD_INT 5
13981: PPUSH
13982: CALL_OW 272
13986: PUSH
13987: LD_VAR 0 11
13991: PPUSH
13992: LD_VAR 0 8
13996: PPUSH
13997: LD_INT 5
13999: PPUSH
14000: CALL_OW 273
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14009: LD_VAR 0 9
14013: PUSH
14014: LD_INT 1
14016: ARRAY
14017: PPUSH
14018: LD_VAR 0 9
14022: PUSH
14023: LD_INT 2
14025: ARRAY
14026: PPUSH
14027: CALL_OW 488
14031: IFFALSE 14130
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14033: LD_ADDR_VAR 0 4
14037: PUSH
14038: LD_VAR 0 9
14042: PUSH
14043: LD_INT 1
14045: ARRAY
14046: PPUSH
14047: LD_VAR 0 9
14051: PUSH
14052: LD_INT 2
14054: ARRAY
14055: PPUSH
14056: CALL_OW 546
14060: ST_TO_ADDR
// if hex [ 1 ] then
14061: LD_VAR 0 4
14065: PUSH
14066: LD_INT 1
14068: ARRAY
14069: IFFALSE 14073
// continue ;
14071: GO 13961
// h := hex [ 2 ] ;
14073: LD_ADDR_VAR 0 13
14077: PUSH
14078: LD_VAR 0 4
14082: PUSH
14083: LD_INT 2
14085: ARRAY
14086: ST_TO_ADDR
// if h + 7 < height then
14087: LD_VAR 0 13
14091: PUSH
14092: LD_INT 7
14094: PLUS
14095: PUSH
14096: LD_VAR 0 15
14100: LESS
14101: IFFALSE 14130
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14103: LD_ADDR_VAR 0 18
14107: PUSH
14108: LD_INT 7
14110: PUSH
14111: LD_INT 28
14113: PUSH
14114: LD_INT 45
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: LIST
14121: PUSH
14122: LD_VAR 0 12
14126: ARRAY
14127: ST_TO_ADDR
// break ;
14128: GO 14132
// end ; end ; end ;
14130: GO 13961
14132: POP
14133: POP
// end ; if not weapon then
14134: LD_VAR 0 18
14138: NOT
14139: IFFALSE 14199
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14141: LD_ADDR_VAR 0 5
14145: PUSH
14146: LD_VAR 0 5
14150: PUSH
14151: LD_INT 11
14153: PUSH
14154: LD_INT 30
14156: PUSH
14157: LD_INT 49
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: LIST
14164: DIFF
14165: ST_TO_ADDR
// if not list then
14166: LD_VAR 0 5
14170: NOT
14171: IFFALSE 14175
// exit ;
14173: GO 14317
// weapon := list [ rand ( 1 , list ) ] ;
14175: LD_ADDR_VAR 0 18
14179: PUSH
14180: LD_VAR 0 5
14184: PUSH
14185: LD_INT 1
14187: PPUSH
14188: LD_VAR 0 5
14192: PPUSH
14193: CALL_OW 12
14197: ARRAY
14198: ST_TO_ADDR
// end ; if weapon then
14199: LD_VAR 0 18
14203: IFFALSE 14317
// begin tmp := CostOfWeapon ( weapon ) ;
14205: LD_ADDR_VAR 0 14
14209: PUSH
14210: LD_VAR 0 18
14214: PPUSH
14215: CALL_OW 451
14219: ST_TO_ADDR
// j := GetBase ( tower ) ;
14220: LD_ADDR_VAR 0 9
14224: PUSH
14225: LD_VAR 0 1
14229: PPUSH
14230: CALL_OW 274
14234: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14235: LD_VAR 0 9
14239: PPUSH
14240: LD_INT 1
14242: PPUSH
14243: CALL_OW 275
14247: PUSH
14248: LD_VAR 0 14
14252: PUSH
14253: LD_INT 1
14255: ARRAY
14256: GREATEREQUAL
14257: PUSH
14258: LD_VAR 0 9
14262: PPUSH
14263: LD_INT 2
14265: PPUSH
14266: CALL_OW 275
14270: PUSH
14271: LD_VAR 0 14
14275: PUSH
14276: LD_INT 2
14278: ARRAY
14279: GREATEREQUAL
14280: AND
14281: PUSH
14282: LD_VAR 0 9
14286: PPUSH
14287: LD_INT 3
14289: PPUSH
14290: CALL_OW 275
14294: PUSH
14295: LD_VAR 0 14
14299: PUSH
14300: LD_INT 3
14302: ARRAY
14303: GREATEREQUAL
14304: AND
14305: IFFALSE 14317
// result := weapon ;
14307: LD_ADDR_VAR 0 3
14311: PUSH
14312: LD_VAR 0 18
14316: ST_TO_ADDR
// end ; end ;
14317: LD_VAR 0 3
14321: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14322: LD_INT 0
14324: PPUSH
14325: PPUSH
// result := true ;
14326: LD_ADDR_VAR 0 3
14330: PUSH
14331: LD_INT 1
14333: ST_TO_ADDR
// if array1 = array2 then
14334: LD_VAR 0 1
14338: PUSH
14339: LD_VAR 0 2
14343: EQUAL
14344: IFFALSE 14404
// begin for i = 1 to array1 do
14346: LD_ADDR_VAR 0 4
14350: PUSH
14351: DOUBLE
14352: LD_INT 1
14354: DEC
14355: ST_TO_ADDR
14356: LD_VAR 0 1
14360: PUSH
14361: FOR_TO
14362: IFFALSE 14400
// if array1 [ i ] <> array2 [ i ] then
14364: LD_VAR 0 1
14368: PUSH
14369: LD_VAR 0 4
14373: ARRAY
14374: PUSH
14375: LD_VAR 0 2
14379: PUSH
14380: LD_VAR 0 4
14384: ARRAY
14385: NONEQUAL
14386: IFFALSE 14398
// begin result := false ;
14388: LD_ADDR_VAR 0 3
14392: PUSH
14393: LD_INT 0
14395: ST_TO_ADDR
// break ;
14396: GO 14400
// end ;
14398: GO 14361
14400: POP
14401: POP
// end else
14402: GO 14412
// result := false ;
14404: LD_ADDR_VAR 0 3
14408: PUSH
14409: LD_INT 0
14411: ST_TO_ADDR
// end ;
14412: LD_VAR 0 3
14416: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14417: LD_INT 0
14419: PPUSH
14420: PPUSH
// if not array1 or not array2 then
14421: LD_VAR 0 1
14425: NOT
14426: PUSH
14427: LD_VAR 0 2
14431: NOT
14432: OR
14433: IFFALSE 14437
// exit ;
14435: GO 14501
// result := true ;
14437: LD_ADDR_VAR 0 3
14441: PUSH
14442: LD_INT 1
14444: ST_TO_ADDR
// for i = 1 to array1 do
14445: LD_ADDR_VAR 0 4
14449: PUSH
14450: DOUBLE
14451: LD_INT 1
14453: DEC
14454: ST_TO_ADDR
14455: LD_VAR 0 1
14459: PUSH
14460: FOR_TO
14461: IFFALSE 14499
// if array1 [ i ] <> array2 [ i ] then
14463: LD_VAR 0 1
14467: PUSH
14468: LD_VAR 0 4
14472: ARRAY
14473: PUSH
14474: LD_VAR 0 2
14478: PUSH
14479: LD_VAR 0 4
14483: ARRAY
14484: NONEQUAL
14485: IFFALSE 14497
// begin result := false ;
14487: LD_ADDR_VAR 0 3
14491: PUSH
14492: LD_INT 0
14494: ST_TO_ADDR
// break ;
14495: GO 14499
// end ;
14497: GO 14460
14499: POP
14500: POP
// end ;
14501: LD_VAR 0 3
14505: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14506: LD_INT 0
14508: PPUSH
14509: PPUSH
14510: PPUSH
// pom := GetBase ( fac ) ;
14511: LD_ADDR_VAR 0 5
14515: PUSH
14516: LD_VAR 0 1
14520: PPUSH
14521: CALL_OW 274
14525: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14526: LD_ADDR_VAR 0 4
14530: PUSH
14531: LD_VAR 0 2
14535: PUSH
14536: LD_INT 1
14538: ARRAY
14539: PPUSH
14540: LD_VAR 0 2
14544: PUSH
14545: LD_INT 2
14547: ARRAY
14548: PPUSH
14549: LD_VAR 0 2
14553: PUSH
14554: LD_INT 3
14556: ARRAY
14557: PPUSH
14558: LD_VAR 0 2
14562: PUSH
14563: LD_INT 4
14565: ARRAY
14566: PPUSH
14567: CALL_OW 449
14571: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14572: LD_ADDR_VAR 0 3
14576: PUSH
14577: LD_VAR 0 5
14581: PPUSH
14582: LD_INT 1
14584: PPUSH
14585: CALL_OW 275
14589: PUSH
14590: LD_VAR 0 4
14594: PUSH
14595: LD_INT 1
14597: ARRAY
14598: GREATEREQUAL
14599: PUSH
14600: LD_VAR 0 5
14604: PPUSH
14605: LD_INT 2
14607: PPUSH
14608: CALL_OW 275
14612: PUSH
14613: LD_VAR 0 4
14617: PUSH
14618: LD_INT 2
14620: ARRAY
14621: GREATEREQUAL
14622: AND
14623: PUSH
14624: LD_VAR 0 5
14628: PPUSH
14629: LD_INT 3
14631: PPUSH
14632: CALL_OW 275
14636: PUSH
14637: LD_VAR 0 4
14641: PUSH
14642: LD_INT 3
14644: ARRAY
14645: GREATEREQUAL
14646: AND
14647: ST_TO_ADDR
// end ;
14648: LD_VAR 0 3
14652: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14653: LD_INT 0
14655: PPUSH
14656: PPUSH
14657: PPUSH
14658: PPUSH
// pom := GetBase ( building ) ;
14659: LD_ADDR_VAR 0 3
14663: PUSH
14664: LD_VAR 0 1
14668: PPUSH
14669: CALL_OW 274
14673: ST_TO_ADDR
// if not pom then
14674: LD_VAR 0 3
14678: NOT
14679: IFFALSE 14683
// exit ;
14681: GO 14853
// btype := GetBType ( building ) ;
14683: LD_ADDR_VAR 0 5
14687: PUSH
14688: LD_VAR 0 1
14692: PPUSH
14693: CALL_OW 266
14697: ST_TO_ADDR
// if btype = b_armoury then
14698: LD_VAR 0 5
14702: PUSH
14703: LD_INT 4
14705: EQUAL
14706: IFFALSE 14716
// btype := b_barracks ;
14708: LD_ADDR_VAR 0 5
14712: PUSH
14713: LD_INT 5
14715: ST_TO_ADDR
// if btype = b_depot then
14716: LD_VAR 0 5
14720: PUSH
14721: LD_INT 0
14723: EQUAL
14724: IFFALSE 14734
// btype := b_warehouse ;
14726: LD_ADDR_VAR 0 5
14730: PUSH
14731: LD_INT 1
14733: ST_TO_ADDR
// if btype = b_workshop then
14734: LD_VAR 0 5
14738: PUSH
14739: LD_INT 2
14741: EQUAL
14742: IFFALSE 14752
// btype := b_factory ;
14744: LD_ADDR_VAR 0 5
14748: PUSH
14749: LD_INT 3
14751: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14752: LD_ADDR_VAR 0 4
14756: PUSH
14757: LD_VAR 0 5
14761: PPUSH
14762: LD_VAR 0 1
14766: PPUSH
14767: CALL_OW 248
14771: PPUSH
14772: CALL_OW 450
14776: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14777: LD_ADDR_VAR 0 2
14781: PUSH
14782: LD_VAR 0 3
14786: PPUSH
14787: LD_INT 1
14789: PPUSH
14790: CALL_OW 275
14794: PUSH
14795: LD_VAR 0 4
14799: PUSH
14800: LD_INT 1
14802: ARRAY
14803: GREATEREQUAL
14804: PUSH
14805: LD_VAR 0 3
14809: PPUSH
14810: LD_INT 2
14812: PPUSH
14813: CALL_OW 275
14817: PUSH
14818: LD_VAR 0 4
14822: PUSH
14823: LD_INT 2
14825: ARRAY
14826: GREATEREQUAL
14827: AND
14828: PUSH
14829: LD_VAR 0 3
14833: PPUSH
14834: LD_INT 3
14836: PPUSH
14837: CALL_OW 275
14841: PUSH
14842: LD_VAR 0 4
14846: PUSH
14847: LD_INT 3
14849: ARRAY
14850: GREATEREQUAL
14851: AND
14852: ST_TO_ADDR
// end ;
14853: LD_VAR 0 2
14857: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14858: LD_INT 0
14860: PPUSH
14861: PPUSH
14862: PPUSH
// pom := GetBase ( building ) ;
14863: LD_ADDR_VAR 0 4
14867: PUSH
14868: LD_VAR 0 1
14872: PPUSH
14873: CALL_OW 274
14877: ST_TO_ADDR
// if not pom then
14878: LD_VAR 0 4
14882: NOT
14883: IFFALSE 14887
// exit ;
14885: GO 14988
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14887: LD_ADDR_VAR 0 5
14891: PUSH
14892: LD_VAR 0 2
14896: PPUSH
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 248
14906: PPUSH
14907: CALL_OW 450
14911: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14912: LD_ADDR_VAR 0 3
14916: PUSH
14917: LD_VAR 0 4
14921: PPUSH
14922: LD_INT 1
14924: PPUSH
14925: CALL_OW 275
14929: PUSH
14930: LD_VAR 0 5
14934: PUSH
14935: LD_INT 1
14937: ARRAY
14938: GREATEREQUAL
14939: PUSH
14940: LD_VAR 0 4
14944: PPUSH
14945: LD_INT 2
14947: PPUSH
14948: CALL_OW 275
14952: PUSH
14953: LD_VAR 0 5
14957: PUSH
14958: LD_INT 2
14960: ARRAY
14961: GREATEREQUAL
14962: AND
14963: PUSH
14964: LD_VAR 0 4
14968: PPUSH
14969: LD_INT 3
14971: PPUSH
14972: CALL_OW 275
14976: PUSH
14977: LD_VAR 0 5
14981: PUSH
14982: LD_INT 3
14984: ARRAY
14985: GREATEREQUAL
14986: AND
14987: ST_TO_ADDR
// end ;
14988: LD_VAR 0 3
14992: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14993: LD_INT 0
14995: PPUSH
14996: PPUSH
14997: PPUSH
14998: PPUSH
14999: PPUSH
15000: PPUSH
15001: PPUSH
15002: PPUSH
15003: PPUSH
15004: PPUSH
15005: PPUSH
// result := false ;
15006: LD_ADDR_VAR 0 8
15010: PUSH
15011: LD_INT 0
15013: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15014: LD_VAR 0 5
15018: NOT
15019: PUSH
15020: LD_VAR 0 1
15024: NOT
15025: OR
15026: PUSH
15027: LD_VAR 0 2
15031: NOT
15032: OR
15033: PUSH
15034: LD_VAR 0 3
15038: NOT
15039: OR
15040: IFFALSE 15044
// exit ;
15042: GO 15858
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15044: LD_ADDR_VAR 0 14
15048: PUSH
15049: LD_VAR 0 1
15053: PPUSH
15054: LD_VAR 0 2
15058: PPUSH
15059: LD_VAR 0 3
15063: PPUSH
15064: LD_VAR 0 4
15068: PPUSH
15069: LD_VAR 0 5
15073: PUSH
15074: LD_INT 1
15076: ARRAY
15077: PPUSH
15078: CALL_OW 248
15082: PPUSH
15083: LD_INT 0
15085: PPUSH
15086: CALL 17111 0 6
15090: ST_TO_ADDR
// if not hexes then
15091: LD_VAR 0 14
15095: NOT
15096: IFFALSE 15100
// exit ;
15098: GO 15858
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15100: LD_ADDR_VAR 0 17
15104: PUSH
15105: LD_VAR 0 5
15109: PPUSH
15110: LD_INT 22
15112: PUSH
15113: LD_VAR 0 13
15117: PPUSH
15118: CALL_OW 255
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PUSH
15127: LD_INT 2
15129: PUSH
15130: LD_INT 30
15132: PUSH
15133: LD_INT 0
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: LD_INT 30
15142: PUSH
15143: LD_INT 1
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: LIST
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PPUSH
15159: CALL_OW 72
15163: ST_TO_ADDR
// for i = 1 to hexes do
15164: LD_ADDR_VAR 0 9
15168: PUSH
15169: DOUBLE
15170: LD_INT 1
15172: DEC
15173: ST_TO_ADDR
15174: LD_VAR 0 14
15178: PUSH
15179: FOR_TO
15180: IFFALSE 15856
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15182: LD_ADDR_VAR 0 13
15186: PUSH
15187: LD_VAR 0 14
15191: PUSH
15192: LD_VAR 0 9
15196: ARRAY
15197: PUSH
15198: LD_INT 1
15200: ARRAY
15201: PPUSH
15202: LD_VAR 0 14
15206: PUSH
15207: LD_VAR 0 9
15211: ARRAY
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: CALL_OW 428
15221: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15222: LD_VAR 0 14
15226: PUSH
15227: LD_VAR 0 9
15231: ARRAY
15232: PUSH
15233: LD_INT 1
15235: ARRAY
15236: PPUSH
15237: LD_VAR 0 14
15241: PUSH
15242: LD_VAR 0 9
15246: ARRAY
15247: PUSH
15248: LD_INT 2
15250: ARRAY
15251: PPUSH
15252: CALL_OW 351
15256: PUSH
15257: LD_VAR 0 14
15261: PUSH
15262: LD_VAR 0 9
15266: ARRAY
15267: PUSH
15268: LD_INT 1
15270: ARRAY
15271: PPUSH
15272: LD_VAR 0 14
15276: PUSH
15277: LD_VAR 0 9
15281: ARRAY
15282: PUSH
15283: LD_INT 2
15285: ARRAY
15286: PPUSH
15287: CALL_OW 488
15291: NOT
15292: OR
15293: PUSH
15294: LD_VAR 0 13
15298: PPUSH
15299: CALL_OW 247
15303: PUSH
15304: LD_INT 3
15306: EQUAL
15307: OR
15308: IFFALSE 15314
// exit ;
15310: POP
15311: POP
15312: GO 15858
// if not tmp then
15314: LD_VAR 0 13
15318: NOT
15319: IFFALSE 15323
// continue ;
15321: GO 15179
// result := true ;
15323: LD_ADDR_VAR 0 8
15327: PUSH
15328: LD_INT 1
15330: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15331: LD_VAR 0 6
15335: PUSH
15336: LD_VAR 0 13
15340: PPUSH
15341: CALL_OW 247
15345: PUSH
15346: LD_INT 2
15348: EQUAL
15349: AND
15350: PUSH
15351: LD_VAR 0 13
15355: PPUSH
15356: CALL_OW 263
15360: PUSH
15361: LD_INT 1
15363: EQUAL
15364: AND
15365: IFFALSE 15529
// begin if IsDrivenBy ( tmp ) then
15367: LD_VAR 0 13
15371: PPUSH
15372: CALL_OW 311
15376: IFFALSE 15380
// continue ;
15378: GO 15179
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15380: LD_VAR 0 6
15384: PPUSH
15385: LD_INT 3
15387: PUSH
15388: LD_INT 60
15390: PUSH
15391: EMPTY
15392: LIST
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 3
15400: PUSH
15401: LD_INT 55
15403: PUSH
15404: EMPTY
15405: LIST
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PPUSH
15415: CALL_OW 72
15419: IFFALSE 15527
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15421: LD_ADDR_VAR 0 18
15425: PUSH
15426: LD_VAR 0 6
15430: PPUSH
15431: LD_INT 3
15433: PUSH
15434: LD_INT 60
15436: PUSH
15437: EMPTY
15438: LIST
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 3
15446: PUSH
15447: LD_INT 55
15449: PUSH
15450: EMPTY
15451: LIST
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PPUSH
15461: CALL_OW 72
15465: PUSH
15466: LD_INT 1
15468: ARRAY
15469: ST_TO_ADDR
// if IsInUnit ( driver ) then
15470: LD_VAR 0 18
15474: PPUSH
15475: CALL_OW 310
15479: IFFALSE 15490
// ComExit ( driver ) ;
15481: LD_VAR 0 18
15485: PPUSH
15486: CALL 40892 0 1
// AddComEnterUnit ( driver , tmp ) ;
15490: LD_VAR 0 18
15494: PPUSH
15495: LD_VAR 0 13
15499: PPUSH
15500: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15504: LD_VAR 0 18
15508: PPUSH
15509: LD_VAR 0 7
15513: PPUSH
15514: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15518: LD_VAR 0 18
15522: PPUSH
15523: CALL_OW 181
// end ; continue ;
15527: GO 15179
// end ; if not cleaners or not tmp in cleaners then
15529: LD_VAR 0 6
15533: NOT
15534: PUSH
15535: LD_VAR 0 13
15539: PUSH
15540: LD_VAR 0 6
15544: IN
15545: NOT
15546: OR
15547: IFFALSE 15854
// begin if dep then
15549: LD_VAR 0 17
15553: IFFALSE 15689
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15555: LD_ADDR_VAR 0 16
15559: PUSH
15560: LD_VAR 0 17
15564: PUSH
15565: LD_INT 1
15567: ARRAY
15568: PPUSH
15569: CALL_OW 250
15573: PPUSH
15574: LD_VAR 0 17
15578: PUSH
15579: LD_INT 1
15581: ARRAY
15582: PPUSH
15583: CALL_OW 254
15587: PPUSH
15588: LD_INT 5
15590: PPUSH
15591: CALL_OW 272
15595: PUSH
15596: LD_VAR 0 17
15600: PUSH
15601: LD_INT 1
15603: ARRAY
15604: PPUSH
15605: CALL_OW 251
15609: PPUSH
15610: LD_VAR 0 17
15614: PUSH
15615: LD_INT 1
15617: ARRAY
15618: PPUSH
15619: CALL_OW 254
15623: PPUSH
15624: LD_INT 5
15626: PPUSH
15627: CALL_OW 273
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15636: LD_VAR 0 16
15640: PUSH
15641: LD_INT 1
15643: ARRAY
15644: PPUSH
15645: LD_VAR 0 16
15649: PUSH
15650: LD_INT 2
15652: ARRAY
15653: PPUSH
15654: CALL_OW 488
15658: IFFALSE 15689
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15660: LD_VAR 0 13
15664: PPUSH
15665: LD_VAR 0 16
15669: PUSH
15670: LD_INT 1
15672: ARRAY
15673: PPUSH
15674: LD_VAR 0 16
15678: PUSH
15679: LD_INT 2
15681: ARRAY
15682: PPUSH
15683: CALL_OW 111
// continue ;
15687: GO 15179
// end ; end ; r := GetDir ( tmp ) ;
15689: LD_ADDR_VAR 0 15
15693: PUSH
15694: LD_VAR 0 13
15698: PPUSH
15699: CALL_OW 254
15703: ST_TO_ADDR
// if r = 5 then
15704: LD_VAR 0 15
15708: PUSH
15709: LD_INT 5
15711: EQUAL
15712: IFFALSE 15722
// r := 0 ;
15714: LD_ADDR_VAR 0 15
15718: PUSH
15719: LD_INT 0
15721: ST_TO_ADDR
// for j = r to 5 do
15722: LD_ADDR_VAR 0 10
15726: PUSH
15727: DOUBLE
15728: LD_VAR 0 15
15732: DEC
15733: ST_TO_ADDR
15734: LD_INT 5
15736: PUSH
15737: FOR_TO
15738: IFFALSE 15852
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15740: LD_ADDR_VAR 0 11
15744: PUSH
15745: LD_VAR 0 13
15749: PPUSH
15750: CALL_OW 250
15754: PPUSH
15755: LD_VAR 0 10
15759: PPUSH
15760: LD_INT 2
15762: PPUSH
15763: CALL_OW 272
15767: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15768: LD_ADDR_VAR 0 12
15772: PUSH
15773: LD_VAR 0 13
15777: PPUSH
15778: CALL_OW 251
15782: PPUSH
15783: LD_VAR 0 10
15787: PPUSH
15788: LD_INT 2
15790: PPUSH
15791: CALL_OW 273
15795: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15796: LD_VAR 0 11
15800: PPUSH
15801: LD_VAR 0 12
15805: PPUSH
15806: CALL_OW 488
15810: PUSH
15811: LD_VAR 0 11
15815: PPUSH
15816: LD_VAR 0 12
15820: PPUSH
15821: CALL_OW 428
15825: NOT
15826: AND
15827: IFFALSE 15850
// begin ComMoveXY ( tmp , _x , _y ) ;
15829: LD_VAR 0 13
15833: PPUSH
15834: LD_VAR 0 11
15838: PPUSH
15839: LD_VAR 0 12
15843: PPUSH
15844: CALL_OW 111
// break ;
15848: GO 15852
// end ; end ;
15850: GO 15737
15852: POP
15853: POP
// end ; end ;
15854: GO 15179
15856: POP
15857: POP
// end ;
15858: LD_VAR 0 8
15862: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15863: LD_INT 0
15865: PPUSH
// result := true ;
15866: LD_ADDR_VAR 0 3
15870: PUSH
15871: LD_INT 1
15873: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15874: LD_VAR 0 2
15878: PUSH
15879: LD_INT 24
15881: DOUBLE
15882: EQUAL
15883: IFTRUE 15893
15885: LD_INT 33
15887: DOUBLE
15888: EQUAL
15889: IFTRUE 15893
15891: GO 15918
15893: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15894: LD_ADDR_VAR 0 3
15898: PUSH
15899: LD_INT 32
15901: PPUSH
15902: LD_VAR 0 1
15906: PPUSH
15907: CALL_OW 321
15911: PUSH
15912: LD_INT 2
15914: EQUAL
15915: ST_TO_ADDR
15916: GO 16234
15918: LD_INT 20
15920: DOUBLE
15921: EQUAL
15922: IFTRUE 15926
15924: GO 15951
15926: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15927: LD_ADDR_VAR 0 3
15931: PUSH
15932: LD_INT 6
15934: PPUSH
15935: LD_VAR 0 1
15939: PPUSH
15940: CALL_OW 321
15944: PUSH
15945: LD_INT 2
15947: EQUAL
15948: ST_TO_ADDR
15949: GO 16234
15951: LD_INT 22
15953: DOUBLE
15954: EQUAL
15955: IFTRUE 15965
15957: LD_INT 36
15959: DOUBLE
15960: EQUAL
15961: IFTRUE 15965
15963: GO 15990
15965: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15966: LD_ADDR_VAR 0 3
15970: PUSH
15971: LD_INT 15
15973: PPUSH
15974: LD_VAR 0 1
15978: PPUSH
15979: CALL_OW 321
15983: PUSH
15984: LD_INT 2
15986: EQUAL
15987: ST_TO_ADDR
15988: GO 16234
15990: LD_INT 30
15992: DOUBLE
15993: EQUAL
15994: IFTRUE 15998
15996: GO 16023
15998: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15999: LD_ADDR_VAR 0 3
16003: PUSH
16004: LD_INT 20
16006: PPUSH
16007: LD_VAR 0 1
16011: PPUSH
16012: CALL_OW 321
16016: PUSH
16017: LD_INT 2
16019: EQUAL
16020: ST_TO_ADDR
16021: GO 16234
16023: LD_INT 28
16025: DOUBLE
16026: EQUAL
16027: IFTRUE 16037
16029: LD_INT 21
16031: DOUBLE
16032: EQUAL
16033: IFTRUE 16037
16035: GO 16062
16037: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16038: LD_ADDR_VAR 0 3
16042: PUSH
16043: LD_INT 21
16045: PPUSH
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 321
16055: PUSH
16056: LD_INT 2
16058: EQUAL
16059: ST_TO_ADDR
16060: GO 16234
16062: LD_INT 16
16064: DOUBLE
16065: EQUAL
16066: IFTRUE 16070
16068: GO 16095
16070: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16071: LD_ADDR_VAR 0 3
16075: PUSH
16076: LD_INT 84
16078: PPUSH
16079: LD_VAR 0 1
16083: PPUSH
16084: CALL_OW 321
16088: PUSH
16089: LD_INT 2
16091: EQUAL
16092: ST_TO_ADDR
16093: GO 16234
16095: LD_INT 19
16097: DOUBLE
16098: EQUAL
16099: IFTRUE 16109
16101: LD_INT 23
16103: DOUBLE
16104: EQUAL
16105: IFTRUE 16109
16107: GO 16134
16109: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16110: LD_ADDR_VAR 0 3
16114: PUSH
16115: LD_INT 83
16117: PPUSH
16118: LD_VAR 0 1
16122: PPUSH
16123: CALL_OW 321
16127: PUSH
16128: LD_INT 2
16130: EQUAL
16131: ST_TO_ADDR
16132: GO 16234
16134: LD_INT 17
16136: DOUBLE
16137: EQUAL
16138: IFTRUE 16142
16140: GO 16167
16142: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16143: LD_ADDR_VAR 0 3
16147: PUSH
16148: LD_INT 39
16150: PPUSH
16151: LD_VAR 0 1
16155: PPUSH
16156: CALL_OW 321
16160: PUSH
16161: LD_INT 2
16163: EQUAL
16164: ST_TO_ADDR
16165: GO 16234
16167: LD_INT 18
16169: DOUBLE
16170: EQUAL
16171: IFTRUE 16175
16173: GO 16200
16175: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16176: LD_ADDR_VAR 0 3
16180: PUSH
16181: LD_INT 40
16183: PPUSH
16184: LD_VAR 0 1
16188: PPUSH
16189: CALL_OW 321
16193: PUSH
16194: LD_INT 2
16196: EQUAL
16197: ST_TO_ADDR
16198: GO 16234
16200: LD_INT 27
16202: DOUBLE
16203: EQUAL
16204: IFTRUE 16208
16206: GO 16233
16208: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16209: LD_ADDR_VAR 0 3
16213: PUSH
16214: LD_INT 35
16216: PPUSH
16217: LD_VAR 0 1
16221: PPUSH
16222: CALL_OW 321
16226: PUSH
16227: LD_INT 2
16229: EQUAL
16230: ST_TO_ADDR
16231: GO 16234
16233: POP
// end ;
16234: LD_VAR 0 3
16238: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16239: LD_INT 0
16241: PPUSH
16242: PPUSH
16243: PPUSH
16244: PPUSH
16245: PPUSH
16246: PPUSH
16247: PPUSH
16248: PPUSH
16249: PPUSH
16250: PPUSH
16251: PPUSH
// result := false ;
16252: LD_ADDR_VAR 0 6
16256: PUSH
16257: LD_INT 0
16259: ST_TO_ADDR
// if btype = b_depot then
16260: LD_VAR 0 2
16264: PUSH
16265: LD_INT 0
16267: EQUAL
16268: IFFALSE 16280
// begin result := true ;
16270: LD_ADDR_VAR 0 6
16274: PUSH
16275: LD_INT 1
16277: ST_TO_ADDR
// exit ;
16278: GO 17106
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16280: LD_VAR 0 1
16284: NOT
16285: PUSH
16286: LD_VAR 0 1
16290: PPUSH
16291: CALL_OW 266
16295: PUSH
16296: LD_INT 0
16298: PUSH
16299: LD_INT 1
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: IN
16306: NOT
16307: OR
16308: PUSH
16309: LD_VAR 0 2
16313: NOT
16314: OR
16315: PUSH
16316: LD_VAR 0 5
16320: PUSH
16321: LD_INT 0
16323: PUSH
16324: LD_INT 1
16326: PUSH
16327: LD_INT 2
16329: PUSH
16330: LD_INT 3
16332: PUSH
16333: LD_INT 4
16335: PUSH
16336: LD_INT 5
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: IN
16347: NOT
16348: OR
16349: PUSH
16350: LD_VAR 0 3
16354: PPUSH
16355: LD_VAR 0 4
16359: PPUSH
16360: CALL_OW 488
16364: NOT
16365: OR
16366: IFFALSE 16370
// exit ;
16368: GO 17106
// side := GetSide ( depot ) ;
16370: LD_ADDR_VAR 0 9
16374: PUSH
16375: LD_VAR 0 1
16379: PPUSH
16380: CALL_OW 255
16384: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16385: LD_VAR 0 9
16389: PPUSH
16390: LD_VAR 0 2
16394: PPUSH
16395: CALL 15863 0 2
16399: NOT
16400: IFFALSE 16404
// exit ;
16402: GO 17106
// pom := GetBase ( depot ) ;
16404: LD_ADDR_VAR 0 10
16408: PUSH
16409: LD_VAR 0 1
16413: PPUSH
16414: CALL_OW 274
16418: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16419: LD_ADDR_VAR 0 11
16423: PUSH
16424: LD_VAR 0 2
16428: PPUSH
16429: LD_VAR 0 1
16433: PPUSH
16434: CALL_OW 248
16438: PPUSH
16439: CALL_OW 450
16443: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16444: LD_VAR 0 10
16448: PPUSH
16449: LD_INT 1
16451: PPUSH
16452: CALL_OW 275
16456: PUSH
16457: LD_VAR 0 11
16461: PUSH
16462: LD_INT 1
16464: ARRAY
16465: GREATEREQUAL
16466: PUSH
16467: LD_VAR 0 10
16471: PPUSH
16472: LD_INT 2
16474: PPUSH
16475: CALL_OW 275
16479: PUSH
16480: LD_VAR 0 11
16484: PUSH
16485: LD_INT 2
16487: ARRAY
16488: GREATEREQUAL
16489: AND
16490: PUSH
16491: LD_VAR 0 10
16495: PPUSH
16496: LD_INT 3
16498: PPUSH
16499: CALL_OW 275
16503: PUSH
16504: LD_VAR 0 11
16508: PUSH
16509: LD_INT 3
16511: ARRAY
16512: GREATEREQUAL
16513: AND
16514: NOT
16515: IFFALSE 16519
// exit ;
16517: GO 17106
// if GetBType ( depot ) = b_depot then
16519: LD_VAR 0 1
16523: PPUSH
16524: CALL_OW 266
16528: PUSH
16529: LD_INT 0
16531: EQUAL
16532: IFFALSE 16544
// dist := 28 else
16534: LD_ADDR_VAR 0 14
16538: PUSH
16539: LD_INT 28
16541: ST_TO_ADDR
16542: GO 16552
// dist := 36 ;
16544: LD_ADDR_VAR 0 14
16548: PUSH
16549: LD_INT 36
16551: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16552: LD_VAR 0 1
16556: PPUSH
16557: LD_VAR 0 3
16561: PPUSH
16562: LD_VAR 0 4
16566: PPUSH
16567: CALL_OW 297
16571: PUSH
16572: LD_VAR 0 14
16576: GREATER
16577: IFFALSE 16581
// exit ;
16579: GO 17106
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16581: LD_ADDR_VAR 0 12
16585: PUSH
16586: LD_VAR 0 2
16590: PPUSH
16591: LD_VAR 0 3
16595: PPUSH
16596: LD_VAR 0 4
16600: PPUSH
16601: LD_VAR 0 5
16605: PPUSH
16606: LD_VAR 0 1
16610: PPUSH
16611: CALL_OW 248
16615: PPUSH
16616: LD_INT 0
16618: PPUSH
16619: CALL 17111 0 6
16623: ST_TO_ADDR
// if not hexes then
16624: LD_VAR 0 12
16628: NOT
16629: IFFALSE 16633
// exit ;
16631: GO 17106
// hex := GetHexInfo ( x , y ) ;
16633: LD_ADDR_VAR 0 15
16637: PUSH
16638: LD_VAR 0 3
16642: PPUSH
16643: LD_VAR 0 4
16647: PPUSH
16648: CALL_OW 546
16652: ST_TO_ADDR
// if hex [ 1 ] then
16653: LD_VAR 0 15
16657: PUSH
16658: LD_INT 1
16660: ARRAY
16661: IFFALSE 16665
// exit ;
16663: GO 17106
// height := hex [ 2 ] ;
16665: LD_ADDR_VAR 0 13
16669: PUSH
16670: LD_VAR 0 15
16674: PUSH
16675: LD_INT 2
16677: ARRAY
16678: ST_TO_ADDR
// for i = 1 to hexes do
16679: LD_ADDR_VAR 0 7
16683: PUSH
16684: DOUBLE
16685: LD_INT 1
16687: DEC
16688: ST_TO_ADDR
16689: LD_VAR 0 12
16693: PUSH
16694: FOR_TO
16695: IFFALSE 17025
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16697: LD_VAR 0 12
16701: PUSH
16702: LD_VAR 0 7
16706: ARRAY
16707: PUSH
16708: LD_INT 1
16710: ARRAY
16711: PPUSH
16712: LD_VAR 0 12
16716: PUSH
16717: LD_VAR 0 7
16721: ARRAY
16722: PUSH
16723: LD_INT 2
16725: ARRAY
16726: PPUSH
16727: CALL_OW 488
16731: NOT
16732: PUSH
16733: LD_VAR 0 12
16737: PUSH
16738: LD_VAR 0 7
16742: ARRAY
16743: PUSH
16744: LD_INT 1
16746: ARRAY
16747: PPUSH
16748: LD_VAR 0 12
16752: PUSH
16753: LD_VAR 0 7
16757: ARRAY
16758: PUSH
16759: LD_INT 2
16761: ARRAY
16762: PPUSH
16763: CALL_OW 428
16767: PUSH
16768: LD_INT 0
16770: GREATER
16771: OR
16772: PUSH
16773: LD_VAR 0 12
16777: PUSH
16778: LD_VAR 0 7
16782: ARRAY
16783: PUSH
16784: LD_INT 1
16786: ARRAY
16787: PPUSH
16788: LD_VAR 0 12
16792: PUSH
16793: LD_VAR 0 7
16797: ARRAY
16798: PUSH
16799: LD_INT 2
16801: ARRAY
16802: PPUSH
16803: CALL_OW 351
16807: OR
16808: IFFALSE 16814
// exit ;
16810: POP
16811: POP
16812: GO 17106
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16814: LD_ADDR_VAR 0 8
16818: PUSH
16819: LD_VAR 0 12
16823: PUSH
16824: LD_VAR 0 7
16828: ARRAY
16829: PUSH
16830: LD_INT 1
16832: ARRAY
16833: PPUSH
16834: LD_VAR 0 12
16838: PUSH
16839: LD_VAR 0 7
16843: ARRAY
16844: PUSH
16845: LD_INT 2
16847: ARRAY
16848: PPUSH
16849: CALL_OW 546
16853: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16854: LD_VAR 0 8
16858: PUSH
16859: LD_INT 1
16861: ARRAY
16862: PUSH
16863: LD_VAR 0 8
16867: PUSH
16868: LD_INT 2
16870: ARRAY
16871: PUSH
16872: LD_VAR 0 13
16876: PUSH
16877: LD_INT 2
16879: PLUS
16880: GREATER
16881: OR
16882: PUSH
16883: LD_VAR 0 8
16887: PUSH
16888: LD_INT 2
16890: ARRAY
16891: PUSH
16892: LD_VAR 0 13
16896: PUSH
16897: LD_INT 2
16899: MINUS
16900: LESS
16901: OR
16902: PUSH
16903: LD_VAR 0 8
16907: PUSH
16908: LD_INT 3
16910: ARRAY
16911: PUSH
16912: LD_INT 0
16914: PUSH
16915: LD_INT 8
16917: PUSH
16918: LD_INT 9
16920: PUSH
16921: LD_INT 10
16923: PUSH
16924: LD_INT 11
16926: PUSH
16927: LD_INT 12
16929: PUSH
16930: LD_INT 13
16932: PUSH
16933: LD_INT 16
16935: PUSH
16936: LD_INT 17
16938: PUSH
16939: LD_INT 18
16941: PUSH
16942: LD_INT 19
16944: PUSH
16945: LD_INT 20
16947: PUSH
16948: LD_INT 21
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: IN
16966: NOT
16967: OR
16968: PUSH
16969: LD_VAR 0 8
16973: PUSH
16974: LD_INT 5
16976: ARRAY
16977: NOT
16978: OR
16979: PUSH
16980: LD_VAR 0 8
16984: PUSH
16985: LD_INT 6
16987: ARRAY
16988: PUSH
16989: LD_INT 1
16991: PUSH
16992: LD_INT 2
16994: PUSH
16995: LD_INT 7
16997: PUSH
16998: LD_INT 9
17000: PUSH
17001: LD_INT 10
17003: PUSH
17004: LD_INT 11
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: IN
17015: NOT
17016: OR
17017: IFFALSE 17023
// exit ;
17019: POP
17020: POP
17021: GO 17106
// end ;
17023: GO 16694
17025: POP
17026: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17027: LD_VAR 0 9
17031: PPUSH
17032: LD_VAR 0 3
17036: PPUSH
17037: LD_VAR 0 4
17041: PPUSH
17042: LD_INT 20
17044: PPUSH
17045: CALL 9029 0 4
17049: PUSH
17050: LD_INT 4
17052: ARRAY
17053: IFFALSE 17057
// exit ;
17055: GO 17106
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17057: LD_VAR 0 2
17061: PUSH
17062: LD_INT 29
17064: PUSH
17065: LD_INT 30
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: IN
17072: PUSH
17073: LD_VAR 0 3
17077: PPUSH
17078: LD_VAR 0 4
17082: PPUSH
17083: LD_VAR 0 9
17087: PPUSH
17088: CALL_OW 440
17092: NOT
17093: AND
17094: IFFALSE 17098
// exit ;
17096: GO 17106
// result := true ;
17098: LD_ADDR_VAR 0 6
17102: PUSH
17103: LD_INT 1
17105: ST_TO_ADDR
// end ;
17106: LD_VAR 0 6
17110: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17111: LD_INT 0
17113: PPUSH
17114: PPUSH
17115: PPUSH
17116: PPUSH
17117: PPUSH
17118: PPUSH
17119: PPUSH
17120: PPUSH
17121: PPUSH
17122: PPUSH
17123: PPUSH
17124: PPUSH
17125: PPUSH
17126: PPUSH
17127: PPUSH
17128: PPUSH
17129: PPUSH
17130: PPUSH
17131: PPUSH
17132: PPUSH
17133: PPUSH
17134: PPUSH
17135: PPUSH
17136: PPUSH
17137: PPUSH
17138: PPUSH
17139: PPUSH
17140: PPUSH
17141: PPUSH
17142: PPUSH
17143: PPUSH
17144: PPUSH
17145: PPUSH
17146: PPUSH
17147: PPUSH
17148: PPUSH
17149: PPUSH
17150: PPUSH
17151: PPUSH
17152: PPUSH
17153: PPUSH
17154: PPUSH
17155: PPUSH
17156: PPUSH
17157: PPUSH
17158: PPUSH
17159: PPUSH
17160: PPUSH
17161: PPUSH
17162: PPUSH
17163: PPUSH
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
17169: PPUSH
17170: PPUSH
// result = [ ] ;
17171: LD_ADDR_VAR 0 7
17175: PUSH
17176: EMPTY
17177: ST_TO_ADDR
// temp_list = [ ] ;
17178: LD_ADDR_VAR 0 9
17182: PUSH
17183: EMPTY
17184: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17185: LD_VAR 0 4
17189: PUSH
17190: LD_INT 0
17192: PUSH
17193: LD_INT 1
17195: PUSH
17196: LD_INT 2
17198: PUSH
17199: LD_INT 3
17201: PUSH
17202: LD_INT 4
17204: PUSH
17205: LD_INT 5
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: IN
17216: NOT
17217: PUSH
17218: LD_VAR 0 1
17222: PUSH
17223: LD_INT 0
17225: PUSH
17226: LD_INT 1
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: IN
17233: PUSH
17234: LD_VAR 0 5
17238: PUSH
17239: LD_INT 1
17241: PUSH
17242: LD_INT 2
17244: PUSH
17245: LD_INT 3
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: LIST
17252: IN
17253: NOT
17254: AND
17255: OR
17256: IFFALSE 17260
// exit ;
17258: GO 35651
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17260: LD_VAR 0 1
17264: PUSH
17265: LD_INT 6
17267: PUSH
17268: LD_INT 7
17270: PUSH
17271: LD_INT 8
17273: PUSH
17274: LD_INT 13
17276: PUSH
17277: LD_INT 12
17279: PUSH
17280: LD_INT 15
17282: PUSH
17283: LD_INT 11
17285: PUSH
17286: LD_INT 14
17288: PUSH
17289: LD_INT 10
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: IN
17303: IFFALSE 17313
// btype = b_lab ;
17305: LD_ADDR_VAR 0 1
17309: PUSH
17310: LD_INT 6
17312: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17313: LD_VAR 0 6
17317: PUSH
17318: LD_INT 0
17320: PUSH
17321: LD_INT 1
17323: PUSH
17324: LD_INT 2
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: LIST
17331: IN
17332: NOT
17333: PUSH
17334: LD_VAR 0 1
17338: PUSH
17339: LD_INT 0
17341: PUSH
17342: LD_INT 1
17344: PUSH
17345: LD_INT 2
17347: PUSH
17348: LD_INT 3
17350: PUSH
17351: LD_INT 6
17353: PUSH
17354: LD_INT 36
17356: PUSH
17357: LD_INT 4
17359: PUSH
17360: LD_INT 5
17362: PUSH
17363: LD_INT 31
17365: PUSH
17366: LD_INT 32
17368: PUSH
17369: LD_INT 33
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: IN
17385: NOT
17386: PUSH
17387: LD_VAR 0 6
17391: PUSH
17392: LD_INT 1
17394: EQUAL
17395: AND
17396: OR
17397: PUSH
17398: LD_VAR 0 1
17402: PUSH
17403: LD_INT 2
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: IN
17413: NOT
17414: PUSH
17415: LD_VAR 0 6
17419: PUSH
17420: LD_INT 2
17422: EQUAL
17423: AND
17424: OR
17425: IFFALSE 17435
// mode = 0 ;
17427: LD_ADDR_VAR 0 6
17431: PUSH
17432: LD_INT 0
17434: ST_TO_ADDR
// case mode of 0 :
17435: LD_VAR 0 6
17439: PUSH
17440: LD_INT 0
17442: DOUBLE
17443: EQUAL
17444: IFTRUE 17448
17446: GO 28901
17448: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17449: LD_ADDR_VAR 0 11
17453: PUSH
17454: LD_INT 0
17456: PUSH
17457: LD_INT 0
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 0
17466: PUSH
17467: LD_INT 1
17469: NEG
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 1
17477: PUSH
17478: LD_INT 0
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 1
17487: PUSH
17488: LD_INT 1
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: LD_INT 0
17497: PUSH
17498: LD_INT 1
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 1
17507: NEG
17508: PUSH
17509: LD_INT 0
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 1
17518: NEG
17519: PUSH
17520: LD_INT 1
17522: NEG
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 1
17530: NEG
17531: PUSH
17532: LD_INT 2
17534: NEG
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 0
17542: PUSH
17543: LD_INT 2
17545: NEG
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 1
17553: PUSH
17554: LD_INT 1
17556: NEG
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 1
17564: PUSH
17565: LD_INT 2
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 0
17574: PUSH
17575: LD_INT 2
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 1
17584: NEG
17585: PUSH
17586: LD_INT 1
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 1
17595: PUSH
17596: LD_INT 3
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 0
17605: PUSH
17606: LD_INT 3
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: LD_INT 1
17615: NEG
17616: PUSH
17617: LD_INT 2
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17642: LD_ADDR_VAR 0 12
17646: PUSH
17647: LD_INT 0
17649: PUSH
17650: LD_INT 0
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: LD_INT 0
17659: PUSH
17660: LD_INT 1
17662: NEG
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PUSH
17668: LD_INT 1
17670: PUSH
17671: LD_INT 0
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 1
17680: PUSH
17681: LD_INT 1
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 0
17690: PUSH
17691: LD_INT 1
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 1
17700: NEG
17701: PUSH
17702: LD_INT 0
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 1
17711: NEG
17712: PUSH
17713: LD_INT 1
17715: NEG
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 1
17723: PUSH
17724: LD_INT 1
17726: NEG
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 2
17734: PUSH
17735: LD_INT 0
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 2
17744: PUSH
17745: LD_INT 1
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 1
17754: NEG
17755: PUSH
17756: LD_INT 1
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: LD_INT 2
17765: NEG
17766: PUSH
17767: LD_INT 0
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 2
17776: NEG
17777: PUSH
17778: LD_INT 1
17780: NEG
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 2
17788: NEG
17789: PUSH
17790: LD_INT 1
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 3
17799: NEG
17800: PUSH
17801: LD_INT 0
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 3
17810: NEG
17811: PUSH
17812: LD_INT 1
17814: NEG
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17838: LD_ADDR_VAR 0 13
17842: PUSH
17843: LD_INT 0
17845: PUSH
17846: LD_INT 0
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 0
17855: PUSH
17856: LD_INT 1
17858: NEG
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 1
17866: PUSH
17867: LD_INT 0
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 1
17876: PUSH
17877: LD_INT 1
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 0
17886: PUSH
17887: LD_INT 1
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 1
17896: NEG
17897: PUSH
17898: LD_INT 0
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 1
17907: NEG
17908: PUSH
17909: LD_INT 1
17911: NEG
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 1
17919: NEG
17920: PUSH
17921: LD_INT 2
17923: NEG
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 2
17931: PUSH
17932: LD_INT 1
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 2
17941: PUSH
17942: LD_INT 2
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 1
17951: PUSH
17952: LD_INT 2
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 2
17961: NEG
17962: PUSH
17963: LD_INT 1
17965: NEG
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 2
17973: NEG
17974: PUSH
17975: LD_INT 2
17977: NEG
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 2
17985: NEG
17986: PUSH
17987: LD_INT 3
17989: NEG
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 3
17997: NEG
17998: PUSH
17999: LD_INT 2
18001: NEG
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 3
18009: NEG
18010: PUSH
18011: LD_INT 3
18013: NEG
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18037: LD_ADDR_VAR 0 14
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: LD_INT 0
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 0
18054: PUSH
18055: LD_INT 1
18057: NEG
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 1
18065: PUSH
18066: LD_INT 0
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 1
18075: PUSH
18076: LD_INT 1
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 0
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 1
18095: NEG
18096: PUSH
18097: LD_INT 0
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 1
18106: NEG
18107: PUSH
18108: LD_INT 1
18110: NEG
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 1
18118: NEG
18119: PUSH
18120: LD_INT 2
18122: NEG
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 0
18130: PUSH
18131: LD_INT 2
18133: NEG
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 1
18141: PUSH
18142: LD_INT 1
18144: NEG
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 1
18152: PUSH
18153: LD_INT 2
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 0
18162: PUSH
18163: LD_INT 2
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 1
18172: NEG
18173: PUSH
18174: LD_INT 1
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 1
18183: NEG
18184: PUSH
18185: LD_INT 3
18187: NEG
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 0
18195: PUSH
18196: LD_INT 3
18198: NEG
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: LD_INT 2
18209: NEG
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18233: LD_ADDR_VAR 0 15
18237: PUSH
18238: LD_INT 0
18240: PUSH
18241: LD_INT 0
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 0
18250: PUSH
18251: LD_INT 1
18253: NEG
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 1
18261: PUSH
18262: LD_INT 0
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: LD_INT 1
18271: PUSH
18272: LD_INT 1
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 0
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 1
18291: NEG
18292: PUSH
18293: LD_INT 0
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 1
18302: NEG
18303: PUSH
18304: LD_INT 1
18306: NEG
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 1
18314: PUSH
18315: LD_INT 1
18317: NEG
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 2
18325: PUSH
18326: LD_INT 0
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 2
18335: PUSH
18336: LD_INT 1
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 1
18345: NEG
18346: PUSH
18347: LD_INT 1
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 2
18356: NEG
18357: PUSH
18358: LD_INT 0
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 2
18367: NEG
18368: PUSH
18369: LD_INT 1
18371: NEG
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 2
18379: PUSH
18380: LD_INT 1
18382: NEG
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 3
18390: PUSH
18391: LD_INT 0
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 3
18400: PUSH
18401: LD_INT 1
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18426: LD_ADDR_VAR 0 16
18430: PUSH
18431: LD_INT 0
18433: PUSH
18434: LD_INT 0
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 0
18443: PUSH
18444: LD_INT 1
18446: NEG
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 1
18454: PUSH
18455: LD_INT 0
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 1
18464: PUSH
18465: LD_INT 1
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 0
18474: PUSH
18475: LD_INT 1
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 1
18484: NEG
18485: PUSH
18486: LD_INT 0
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 1
18495: NEG
18496: PUSH
18497: LD_INT 1
18499: NEG
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 1
18507: NEG
18508: PUSH
18509: LD_INT 2
18511: NEG
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 2
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 2
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 1
18539: PUSH
18540: LD_INT 2
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 2
18549: NEG
18550: PUSH
18551: LD_INT 1
18553: NEG
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 2
18561: NEG
18562: PUSH
18563: LD_INT 2
18565: NEG
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 3
18573: PUSH
18574: LD_INT 2
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 3
18583: PUSH
18584: LD_INT 3
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 2
18593: PUSH
18594: LD_INT 3
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18619: LD_ADDR_VAR 0 17
18623: PUSH
18624: LD_INT 0
18626: PUSH
18627: LD_INT 0
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 0
18636: PUSH
18637: LD_INT 1
18639: NEG
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 1
18647: PUSH
18648: LD_INT 0
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 1
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 0
18667: PUSH
18668: LD_INT 1
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 1
18677: NEG
18678: PUSH
18679: LD_INT 0
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 1
18688: NEG
18689: PUSH
18690: LD_INT 1
18692: NEG
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 1
18700: NEG
18701: PUSH
18702: LD_INT 2
18704: NEG
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 0
18712: PUSH
18713: LD_INT 2
18715: NEG
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: LD_INT 1
18726: NEG
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 2
18734: PUSH
18735: LD_INT 0
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 2
18744: PUSH
18745: LD_INT 1
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 2
18754: PUSH
18755: LD_INT 2
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 1
18764: PUSH
18765: LD_INT 2
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 0
18774: PUSH
18775: LD_INT 2
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 1
18784: NEG
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: NEG
18796: PUSH
18797: LD_INT 0
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 2
18806: NEG
18807: PUSH
18808: LD_INT 1
18810: NEG
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 2
18818: NEG
18819: PUSH
18820: LD_INT 2
18822: NEG
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18849: LD_ADDR_VAR 0 18
18853: PUSH
18854: LD_INT 0
18856: PUSH
18857: LD_INT 0
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 0
18866: PUSH
18867: LD_INT 1
18869: NEG
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 1
18877: PUSH
18878: LD_INT 0
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 1
18887: PUSH
18888: LD_INT 1
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 0
18897: PUSH
18898: LD_INT 1
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 1
18907: NEG
18908: PUSH
18909: LD_INT 0
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 1
18918: NEG
18919: PUSH
18920: LD_INT 1
18922: NEG
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 1
18930: NEG
18931: PUSH
18932: LD_INT 2
18934: NEG
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 0
18942: PUSH
18943: LD_INT 2
18945: NEG
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 1
18953: PUSH
18954: LD_INT 1
18956: NEG
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 2
18964: PUSH
18965: LD_INT 0
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 2
18974: PUSH
18975: LD_INT 1
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 2
18984: PUSH
18985: LD_INT 2
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 1
18994: PUSH
18995: LD_INT 2
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 0
19004: PUSH
19005: LD_INT 2
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 1
19014: NEG
19015: PUSH
19016: LD_INT 1
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 2
19025: NEG
19026: PUSH
19027: LD_INT 0
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 2
19036: NEG
19037: PUSH
19038: LD_INT 1
19040: NEG
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 2
19048: NEG
19049: PUSH
19050: LD_INT 2
19052: NEG
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19079: LD_ADDR_VAR 0 19
19083: PUSH
19084: LD_INT 0
19086: PUSH
19087: LD_INT 0
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 0
19096: PUSH
19097: LD_INT 1
19099: NEG
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 1
19107: PUSH
19108: LD_INT 0
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 1
19117: PUSH
19118: LD_INT 1
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 0
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 1
19137: NEG
19138: PUSH
19139: LD_INT 0
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 1
19148: NEG
19149: PUSH
19150: LD_INT 1
19152: NEG
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 1
19160: NEG
19161: PUSH
19162: LD_INT 2
19164: NEG
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 0
19172: PUSH
19173: LD_INT 2
19175: NEG
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 1
19183: PUSH
19184: LD_INT 1
19186: NEG
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 2
19194: PUSH
19195: LD_INT 0
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 2
19214: PUSH
19215: LD_INT 2
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 1
19224: PUSH
19225: LD_INT 2
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 0
19234: PUSH
19235: LD_INT 2
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 1
19244: NEG
19245: PUSH
19246: LD_INT 1
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 2
19255: NEG
19256: PUSH
19257: LD_INT 0
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 2
19266: NEG
19267: PUSH
19268: LD_INT 1
19270: NEG
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 2
19278: NEG
19279: PUSH
19280: LD_INT 2
19282: NEG
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19309: LD_ADDR_VAR 0 20
19313: PUSH
19314: LD_INT 0
19316: PUSH
19317: LD_INT 0
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 0
19326: PUSH
19327: LD_INT 1
19329: NEG
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 1
19337: PUSH
19338: LD_INT 0
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 1
19347: PUSH
19348: LD_INT 1
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 0
19357: PUSH
19358: LD_INT 1
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 1
19367: NEG
19368: PUSH
19369: LD_INT 0
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 1
19378: NEG
19379: PUSH
19380: LD_INT 1
19382: NEG
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 1
19390: NEG
19391: PUSH
19392: LD_INT 2
19394: NEG
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 0
19402: PUSH
19403: LD_INT 2
19405: NEG
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 1
19413: PUSH
19414: LD_INT 1
19416: NEG
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 2
19424: PUSH
19425: LD_INT 0
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 2
19434: PUSH
19435: LD_INT 1
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 2
19444: PUSH
19445: LD_INT 2
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 1
19454: PUSH
19455: LD_INT 2
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 0
19464: PUSH
19465: LD_INT 2
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 1
19474: NEG
19475: PUSH
19476: LD_INT 1
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 2
19485: NEG
19486: PUSH
19487: LD_INT 0
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 2
19496: NEG
19497: PUSH
19498: LD_INT 1
19500: NEG
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 2
19508: NEG
19509: PUSH
19510: LD_INT 2
19512: NEG
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19539: LD_ADDR_VAR 0 21
19543: PUSH
19544: LD_INT 0
19546: PUSH
19547: LD_INT 0
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 0
19556: PUSH
19557: LD_INT 1
19559: NEG
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 1
19567: PUSH
19568: LD_INT 0
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 1
19577: PUSH
19578: LD_INT 1
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 0
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 1
19597: NEG
19598: PUSH
19599: LD_INT 0
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 1
19608: NEG
19609: PUSH
19610: LD_INT 1
19612: NEG
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 1
19620: NEG
19621: PUSH
19622: LD_INT 2
19624: NEG
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 0
19632: PUSH
19633: LD_INT 2
19635: NEG
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 1
19643: PUSH
19644: LD_INT 1
19646: NEG
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 2
19654: PUSH
19655: LD_INT 0
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 2
19664: PUSH
19665: LD_INT 1
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 2
19674: PUSH
19675: LD_INT 2
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 1
19684: PUSH
19685: LD_INT 2
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 0
19694: PUSH
19695: LD_INT 2
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 1
19704: NEG
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 2
19715: NEG
19716: PUSH
19717: LD_INT 0
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 2
19726: NEG
19727: PUSH
19728: LD_INT 1
19730: NEG
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 2
19738: NEG
19739: PUSH
19740: LD_INT 2
19742: NEG
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19769: LD_ADDR_VAR 0 22
19773: PUSH
19774: LD_INT 0
19776: PUSH
19777: LD_INT 0
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 0
19786: PUSH
19787: LD_INT 1
19789: NEG
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 1
19797: PUSH
19798: LD_INT 0
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 1
19807: PUSH
19808: LD_INT 1
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 0
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 1
19827: NEG
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 1
19838: NEG
19839: PUSH
19840: LD_INT 1
19842: NEG
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 1
19850: NEG
19851: PUSH
19852: LD_INT 2
19854: NEG
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 0
19862: PUSH
19863: LD_INT 2
19865: NEG
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: LD_INT 1
19873: PUSH
19874: LD_INT 1
19876: NEG
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 2
19884: PUSH
19885: LD_INT 0
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 2
19894: PUSH
19895: LD_INT 1
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 2
19904: PUSH
19905: LD_INT 2
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 1
19914: PUSH
19915: LD_INT 2
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 0
19924: PUSH
19925: LD_INT 2
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 1
19934: NEG
19935: PUSH
19936: LD_INT 1
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 2
19945: NEG
19946: PUSH
19947: LD_INT 0
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 2
19956: NEG
19957: PUSH
19958: LD_INT 1
19960: NEG
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 2
19968: NEG
19969: PUSH
19970: LD_INT 2
19972: NEG
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19999: LD_ADDR_VAR 0 23
20003: PUSH
20004: LD_INT 0
20006: PUSH
20007: LD_INT 0
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 0
20016: PUSH
20017: LD_INT 1
20019: NEG
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 1
20027: PUSH
20028: LD_INT 0
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 1
20037: PUSH
20038: LD_INT 1
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 0
20047: PUSH
20048: LD_INT 1
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 1
20057: NEG
20058: PUSH
20059: LD_INT 0
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 1
20068: NEG
20069: PUSH
20070: LD_INT 1
20072: NEG
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 1
20080: NEG
20081: PUSH
20082: LD_INT 2
20084: NEG
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: LD_INT 2
20095: NEG
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 1
20103: PUSH
20104: LD_INT 1
20106: NEG
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 2
20114: PUSH
20115: LD_INT 0
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 2
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 2
20134: PUSH
20135: LD_INT 2
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 1
20144: PUSH
20145: LD_INT 2
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 0
20154: PUSH
20155: LD_INT 2
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 1
20164: NEG
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 2
20175: NEG
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 2
20186: NEG
20187: PUSH
20188: LD_INT 1
20190: NEG
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 2
20198: NEG
20199: PUSH
20200: LD_INT 2
20202: NEG
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 2
20210: NEG
20211: PUSH
20212: LD_INT 3
20214: NEG
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 1
20222: NEG
20223: PUSH
20224: LD_INT 3
20226: NEG
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 1
20234: PUSH
20235: LD_INT 2
20237: NEG
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 2
20245: PUSH
20246: LD_INT 1
20248: NEG
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20279: LD_ADDR_VAR 0 24
20283: PUSH
20284: LD_INT 0
20286: PUSH
20287: LD_INT 0
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 0
20296: PUSH
20297: LD_INT 1
20299: NEG
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 1
20307: PUSH
20308: LD_INT 0
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 1
20317: PUSH
20318: LD_INT 1
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: LD_INT 1
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 1
20337: NEG
20338: PUSH
20339: LD_INT 0
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 1
20348: NEG
20349: PUSH
20350: LD_INT 1
20352: NEG
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 1
20360: NEG
20361: PUSH
20362: LD_INT 2
20364: NEG
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 0
20372: PUSH
20373: LD_INT 2
20375: NEG
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 1
20383: PUSH
20384: LD_INT 1
20386: NEG
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 2
20394: PUSH
20395: LD_INT 0
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 2
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 2
20414: PUSH
20415: LD_INT 2
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 1
20424: PUSH
20425: LD_INT 2
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 0
20434: PUSH
20435: LD_INT 2
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 1
20444: NEG
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: NEG
20456: PUSH
20457: LD_INT 0
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 2
20466: NEG
20467: PUSH
20468: LD_INT 1
20470: NEG
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 2
20478: NEG
20479: PUSH
20480: LD_INT 2
20482: NEG
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 1
20490: PUSH
20491: LD_INT 2
20493: NEG
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 2
20501: PUSH
20502: LD_INT 1
20504: NEG
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 3
20512: PUSH
20513: LD_INT 1
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 3
20522: PUSH
20523: LD_INT 2
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20555: LD_ADDR_VAR 0 25
20559: PUSH
20560: LD_INT 0
20562: PUSH
20563: LD_INT 0
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: LD_INT 1
20575: NEG
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 1
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 1
20593: PUSH
20594: LD_INT 1
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 0
20603: PUSH
20604: LD_INT 1
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 1
20613: NEG
20614: PUSH
20615: LD_INT 0
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 1
20624: NEG
20625: PUSH
20626: LD_INT 1
20628: NEG
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 1
20636: NEG
20637: PUSH
20638: LD_INT 2
20640: NEG
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 0
20648: PUSH
20649: LD_INT 2
20651: NEG
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 1
20659: PUSH
20660: LD_INT 1
20662: NEG
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: LD_INT 0
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 2
20680: PUSH
20681: LD_INT 1
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 2
20690: PUSH
20691: LD_INT 2
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 1
20700: PUSH
20701: LD_INT 2
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: LD_INT 2
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 1
20720: NEG
20721: PUSH
20722: LD_INT 1
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 2
20731: NEG
20732: PUSH
20733: LD_INT 0
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 2
20742: NEG
20743: PUSH
20744: LD_INT 1
20746: NEG
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 2
20754: NEG
20755: PUSH
20756: LD_INT 2
20758: NEG
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 3
20766: PUSH
20767: LD_INT 1
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 3
20776: PUSH
20777: LD_INT 2
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 2
20786: PUSH
20787: LD_INT 3
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 1
20796: PUSH
20797: LD_INT 3
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20829: LD_ADDR_VAR 0 26
20833: PUSH
20834: LD_INT 0
20836: PUSH
20837: LD_INT 0
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 0
20846: PUSH
20847: LD_INT 1
20849: NEG
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 1
20857: PUSH
20858: LD_INT 0
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 1
20867: PUSH
20868: LD_INT 1
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 0
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: LD_INT 0
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 1
20898: NEG
20899: PUSH
20900: LD_INT 1
20902: NEG
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 1
20910: NEG
20911: PUSH
20912: LD_INT 2
20914: NEG
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 0
20922: PUSH
20923: LD_INT 2
20925: NEG
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 1
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 2
20944: PUSH
20945: LD_INT 0
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 2
20954: PUSH
20955: LD_INT 1
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 2
20964: PUSH
20965: LD_INT 2
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 1
20974: PUSH
20975: LD_INT 2
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 0
20984: PUSH
20985: LD_INT 2
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 1
20994: NEG
20995: PUSH
20996: LD_INT 1
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 2
21005: NEG
21006: PUSH
21007: LD_INT 0
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 2
21016: NEG
21017: PUSH
21018: LD_INT 1
21020: NEG
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 2
21028: NEG
21029: PUSH
21030: LD_INT 2
21032: NEG
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 2
21040: PUSH
21041: LD_INT 3
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 1
21050: PUSH
21051: LD_INT 3
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 1
21060: NEG
21061: PUSH
21062: LD_INT 2
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 2
21071: NEG
21072: PUSH
21073: LD_INT 1
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21105: LD_ADDR_VAR 0 27
21109: PUSH
21110: LD_INT 0
21112: PUSH
21113: LD_INT 0
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 0
21122: PUSH
21123: LD_INT 1
21125: NEG
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 1
21133: PUSH
21134: LD_INT 0
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 1
21143: PUSH
21144: LD_INT 1
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 0
21153: PUSH
21154: LD_INT 1
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 1
21163: NEG
21164: PUSH
21165: LD_INT 0
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 1
21174: NEG
21175: PUSH
21176: LD_INT 1
21178: NEG
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 1
21186: NEG
21187: PUSH
21188: LD_INT 2
21190: NEG
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 0
21198: PUSH
21199: LD_INT 2
21201: NEG
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 1
21209: PUSH
21210: LD_INT 1
21212: NEG
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: LD_INT 0
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 2
21230: PUSH
21231: LD_INT 1
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 2
21240: PUSH
21241: LD_INT 2
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 1
21250: PUSH
21251: LD_INT 2
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 0
21260: PUSH
21261: LD_INT 2
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 1
21270: NEG
21271: PUSH
21272: LD_INT 1
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 2
21281: NEG
21282: PUSH
21283: LD_INT 0
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 2
21292: NEG
21293: PUSH
21294: LD_INT 1
21296: NEG
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 2
21304: NEG
21305: PUSH
21306: LD_INT 2
21308: NEG
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: NEG
21317: PUSH
21318: LD_INT 2
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 2
21327: NEG
21328: PUSH
21329: LD_INT 1
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 3
21338: NEG
21339: PUSH
21340: LD_INT 1
21342: NEG
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 3
21350: NEG
21351: PUSH
21352: LD_INT 2
21354: NEG
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21385: LD_ADDR_VAR 0 28
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: LD_INT 0
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 0
21402: PUSH
21403: LD_INT 1
21405: NEG
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: LD_INT 0
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 1
21423: PUSH
21424: LD_INT 1
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 0
21433: PUSH
21434: LD_INT 1
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 1
21443: NEG
21444: PUSH
21445: LD_INT 0
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 1
21454: NEG
21455: PUSH
21456: LD_INT 1
21458: NEG
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 1
21466: NEG
21467: PUSH
21468: LD_INT 2
21470: NEG
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 0
21478: PUSH
21479: LD_INT 2
21481: NEG
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 1
21489: PUSH
21490: LD_INT 1
21492: NEG
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 2
21500: PUSH
21501: LD_INT 0
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 2
21510: PUSH
21511: LD_INT 1
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 2
21520: PUSH
21521: LD_INT 2
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 1
21530: PUSH
21531: LD_INT 2
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 0
21540: PUSH
21541: LD_INT 2
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 1
21550: NEG
21551: PUSH
21552: LD_INT 1
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 2
21561: NEG
21562: PUSH
21563: LD_INT 0
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 2
21572: NEG
21573: PUSH
21574: LD_INT 1
21576: NEG
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 2
21584: NEG
21585: PUSH
21586: LD_INT 2
21588: NEG
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 2
21596: NEG
21597: PUSH
21598: LD_INT 3
21600: NEG
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 1
21608: NEG
21609: PUSH
21610: LD_INT 3
21612: NEG
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 3
21620: NEG
21621: PUSH
21622: LD_INT 1
21624: NEG
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 3
21632: NEG
21633: PUSH
21634: LD_INT 2
21636: NEG
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21667: LD_ADDR_VAR 0 29
21671: PUSH
21672: LD_INT 0
21674: PUSH
21675: LD_INT 0
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 0
21684: PUSH
21685: LD_INT 1
21687: NEG
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 1
21695: PUSH
21696: LD_INT 0
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 1
21705: PUSH
21706: LD_INT 1
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 0
21715: PUSH
21716: LD_INT 1
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 1
21725: NEG
21726: PUSH
21727: LD_INT 0
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 1
21736: NEG
21737: PUSH
21738: LD_INT 1
21740: NEG
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 1
21748: NEG
21749: PUSH
21750: LD_INT 2
21752: NEG
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 0
21760: PUSH
21761: LD_INT 2
21763: NEG
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 1
21771: PUSH
21772: LD_INT 1
21774: NEG
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 2
21782: PUSH
21783: LD_INT 0
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 2
21792: PUSH
21793: LD_INT 1
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 1
21802: PUSH
21803: LD_INT 2
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 0
21812: PUSH
21813: LD_INT 2
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 1
21822: NEG
21823: PUSH
21824: LD_INT 1
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 2
21833: NEG
21834: PUSH
21835: LD_INT 1
21837: NEG
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 2
21845: NEG
21846: PUSH
21847: LD_INT 2
21849: NEG
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 2
21857: NEG
21858: PUSH
21859: LD_INT 3
21861: NEG
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 2
21869: PUSH
21870: LD_INT 1
21872: NEG
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 3
21880: PUSH
21881: LD_INT 1
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 1
21890: PUSH
21891: LD_INT 3
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 1
21900: NEG
21901: PUSH
21902: LD_INT 2
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 3
21911: NEG
21912: PUSH
21913: LD_INT 2
21915: NEG
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21946: LD_ADDR_VAR 0 30
21950: PUSH
21951: LD_INT 0
21953: PUSH
21954: LD_INT 0
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 0
21963: PUSH
21964: LD_INT 1
21966: NEG
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 1
21974: PUSH
21975: LD_INT 0
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 1
21984: PUSH
21985: LD_INT 1
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 0
21994: PUSH
21995: LD_INT 1
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: LD_INT 0
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 1
22015: NEG
22016: PUSH
22017: LD_INT 1
22019: NEG
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 1
22027: NEG
22028: PUSH
22029: LD_INT 2
22031: NEG
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 0
22039: PUSH
22040: LD_INT 2
22042: NEG
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 1
22050: PUSH
22051: LD_INT 1
22053: NEG
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 2
22061: PUSH
22062: LD_INT 0
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 2
22071: PUSH
22072: LD_INT 1
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 2
22081: PUSH
22082: LD_INT 2
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 1
22091: PUSH
22092: LD_INT 2
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 1
22101: NEG
22102: PUSH
22103: LD_INT 1
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 2
22112: NEG
22113: PUSH
22114: LD_INT 0
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 2
22123: NEG
22124: PUSH
22125: LD_INT 1
22127: NEG
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 1
22135: NEG
22136: PUSH
22137: LD_INT 3
22139: NEG
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 1
22147: PUSH
22148: LD_INT 2
22150: NEG
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 3
22158: PUSH
22159: LD_INT 2
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 2
22168: PUSH
22169: LD_INT 3
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 2
22178: NEG
22179: PUSH
22180: LD_INT 1
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 3
22189: NEG
22190: PUSH
22191: LD_INT 1
22193: NEG
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22224: LD_ADDR_VAR 0 31
22228: PUSH
22229: LD_INT 0
22231: PUSH
22232: LD_INT 0
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 0
22241: PUSH
22242: LD_INT 1
22244: NEG
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 1
22252: PUSH
22253: LD_INT 0
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 1
22262: PUSH
22263: LD_INT 1
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 0
22272: PUSH
22273: LD_INT 1
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 1
22282: NEG
22283: PUSH
22284: LD_INT 0
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 1
22293: NEG
22294: PUSH
22295: LD_INT 1
22297: NEG
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 1
22305: NEG
22306: PUSH
22307: LD_INT 2
22309: NEG
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 1
22317: PUSH
22318: LD_INT 1
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 2
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 2
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 2
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: LD_INT 2
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 0
22368: PUSH
22369: LD_INT 2
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 1
22378: NEG
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 2
22389: NEG
22390: PUSH
22391: LD_INT 1
22393: NEG
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 2
22401: NEG
22402: PUSH
22403: LD_INT 2
22405: NEG
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 2
22413: NEG
22414: PUSH
22415: LD_INT 3
22417: NEG
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 2
22425: PUSH
22426: LD_INT 1
22428: NEG
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 3
22436: PUSH
22437: LD_INT 1
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 1
22446: PUSH
22447: LD_INT 3
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 1
22456: NEG
22457: PUSH
22458: LD_INT 2
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 3
22467: NEG
22468: PUSH
22469: LD_INT 2
22471: NEG
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22502: LD_ADDR_VAR 0 32
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: LD_INT 0
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 0
22519: PUSH
22520: LD_INT 1
22522: NEG
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 1
22530: PUSH
22531: LD_INT 0
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 1
22540: PUSH
22541: LD_INT 1
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 0
22550: PUSH
22551: LD_INT 1
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 1
22560: NEG
22561: PUSH
22562: LD_INT 0
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 1
22571: NEG
22572: PUSH
22573: LD_INT 1
22575: NEG
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 1
22583: NEG
22584: PUSH
22585: LD_INT 2
22587: NEG
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 0
22595: PUSH
22596: LD_INT 2
22598: NEG
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 1
22606: PUSH
22607: LD_INT 1
22609: NEG
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 2
22617: PUSH
22618: LD_INT 1
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 2
22627: PUSH
22628: LD_INT 2
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 1
22637: PUSH
22638: LD_INT 2
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 0
22647: PUSH
22648: LD_INT 2
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 1
22657: NEG
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 2
22668: NEG
22669: PUSH
22670: LD_INT 0
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 2
22679: NEG
22680: PUSH
22681: LD_INT 1
22683: NEG
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 1
22691: NEG
22692: PUSH
22693: LD_INT 3
22695: NEG
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 1
22703: PUSH
22704: LD_INT 2
22706: NEG
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 3
22714: PUSH
22715: LD_INT 2
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 2
22724: PUSH
22725: LD_INT 3
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 2
22734: NEG
22735: PUSH
22736: LD_INT 1
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 3
22745: NEG
22746: PUSH
22747: LD_INT 1
22749: NEG
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22780: LD_ADDR_VAR 0 33
22784: PUSH
22785: LD_INT 0
22787: PUSH
22788: LD_INT 0
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 0
22797: PUSH
22798: LD_INT 1
22800: NEG
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 1
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 1
22818: PUSH
22819: LD_INT 1
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 0
22828: PUSH
22829: LD_INT 1
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 1
22838: NEG
22839: PUSH
22840: LD_INT 0
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 1
22849: NEG
22850: PUSH
22851: LD_INT 1
22853: NEG
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 1
22861: NEG
22862: PUSH
22863: LD_INT 2
22865: NEG
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 1
22873: PUSH
22874: LD_INT 1
22876: NEG
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 2
22884: PUSH
22885: LD_INT 0
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 2
22894: PUSH
22895: LD_INT 1
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 1
22904: PUSH
22905: LD_INT 2
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 0
22914: PUSH
22915: LD_INT 2
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 1
22924: NEG
22925: PUSH
22926: LD_INT 1
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 2
22935: NEG
22936: PUSH
22937: LD_INT 0
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 2
22946: NEG
22947: PUSH
22948: LD_INT 1
22950: NEG
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 2
22958: NEG
22959: PUSH
22960: LD_INT 2
22962: NEG
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 2
22970: NEG
22971: PUSH
22972: LD_INT 3
22974: NEG
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 2
22982: PUSH
22983: LD_INT 1
22985: NEG
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 3
22993: PUSH
22994: LD_INT 1
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 1
23003: PUSH
23004: LD_INT 3
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 1
23013: NEG
23014: PUSH
23015: LD_INT 2
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 3
23024: NEG
23025: PUSH
23026: LD_INT 2
23028: NEG
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23059: LD_ADDR_VAR 0 34
23063: PUSH
23064: LD_INT 0
23066: PUSH
23067: LD_INT 0
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 0
23076: PUSH
23077: LD_INT 1
23079: NEG
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 1
23087: PUSH
23088: LD_INT 0
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 1
23097: PUSH
23098: LD_INT 1
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 0
23107: PUSH
23108: LD_INT 1
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 1
23117: NEG
23118: PUSH
23119: LD_INT 0
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 1
23128: NEG
23129: PUSH
23130: LD_INT 1
23132: NEG
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 1
23140: NEG
23141: PUSH
23142: LD_INT 2
23144: NEG
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 0
23152: PUSH
23153: LD_INT 2
23155: NEG
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 1
23163: PUSH
23164: LD_INT 1
23166: NEG
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 2
23174: PUSH
23175: LD_INT 1
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 2
23184: PUSH
23185: LD_INT 2
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 1
23194: PUSH
23195: LD_INT 2
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 1
23204: NEG
23205: PUSH
23206: LD_INT 1
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 2
23215: NEG
23216: PUSH
23217: LD_INT 0
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 2
23226: NEG
23227: PUSH
23228: LD_INT 1
23230: NEG
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 2
23238: NEG
23239: PUSH
23240: LD_INT 2
23242: NEG
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 1
23250: NEG
23251: PUSH
23252: LD_INT 3
23254: NEG
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 1
23262: PUSH
23263: LD_INT 2
23265: NEG
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 3
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 2
23283: PUSH
23284: LD_INT 3
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 2
23293: NEG
23294: PUSH
23295: LD_INT 1
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 3
23304: NEG
23305: PUSH
23306: LD_INT 1
23308: NEG
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23339: LD_ADDR_VAR 0 35
23343: PUSH
23344: LD_INT 0
23346: PUSH
23347: LD_INT 0
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 0
23356: PUSH
23357: LD_INT 1
23359: NEG
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 1
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 1
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 0
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 1
23397: NEG
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 1
23408: NEG
23409: PUSH
23410: LD_INT 1
23412: NEG
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 2
23420: PUSH
23421: LD_INT 1
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 2
23430: NEG
23431: PUSH
23432: LD_INT 1
23434: NEG
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23451: LD_ADDR_VAR 0 36
23455: PUSH
23456: LD_INT 0
23458: PUSH
23459: LD_INT 0
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 0
23468: PUSH
23469: LD_INT 1
23471: NEG
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 1
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 1
23489: PUSH
23490: LD_INT 1
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 1
23509: NEG
23510: PUSH
23511: LD_INT 0
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 1
23520: NEG
23521: PUSH
23522: LD_INT 1
23524: NEG
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 1
23532: NEG
23533: PUSH
23534: LD_INT 2
23536: NEG
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 1
23544: PUSH
23545: LD_INT 2
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23563: LD_ADDR_VAR 0 37
23567: PUSH
23568: LD_INT 0
23570: PUSH
23571: LD_INT 0
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 0
23580: PUSH
23581: LD_INT 1
23583: NEG
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: LD_INT 0
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 1
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: LD_INT 1
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 1
23621: NEG
23622: PUSH
23623: LD_INT 0
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 1
23632: NEG
23633: PUSH
23634: LD_INT 1
23636: NEG
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: LD_INT 1
23647: NEG
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 1
23655: NEG
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23675: LD_ADDR_VAR 0 38
23679: PUSH
23680: LD_INT 0
23682: PUSH
23683: LD_INT 0
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 0
23692: PUSH
23693: LD_INT 1
23695: NEG
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 1
23703: PUSH
23704: LD_INT 0
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 1
23713: PUSH
23714: LD_INT 1
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 0
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 1
23733: NEG
23734: PUSH
23735: LD_INT 0
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: NEG
23745: PUSH
23746: LD_INT 1
23748: NEG
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 2
23756: PUSH
23757: LD_INT 1
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 2
23766: NEG
23767: PUSH
23768: LD_INT 1
23770: NEG
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23787: LD_ADDR_VAR 0 39
23791: PUSH
23792: LD_INT 0
23794: PUSH
23795: LD_INT 0
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 0
23804: PUSH
23805: LD_INT 1
23807: NEG
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 1
23815: PUSH
23816: LD_INT 0
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 1
23825: PUSH
23826: LD_INT 1
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 1
23845: NEG
23846: PUSH
23847: LD_INT 0
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 1
23856: NEG
23857: PUSH
23858: LD_INT 1
23860: NEG
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 1
23868: NEG
23869: PUSH
23870: LD_INT 2
23872: NEG
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 1
23880: PUSH
23881: LD_INT 2
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23899: LD_ADDR_VAR 0 40
23903: PUSH
23904: LD_INT 0
23906: PUSH
23907: LD_INT 0
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 0
23916: PUSH
23917: LD_INT 1
23919: NEG
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 1
23927: PUSH
23928: LD_INT 0
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 1
23937: PUSH
23938: LD_INT 1
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 0
23947: PUSH
23948: LD_INT 1
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 1
23957: NEG
23958: PUSH
23959: LD_INT 0
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 1
23968: NEG
23969: PUSH
23970: LD_INT 1
23972: NEG
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 1
23980: PUSH
23981: LD_INT 1
23983: NEG
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 1
23991: NEG
23992: PUSH
23993: LD_INT 1
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24011: LD_ADDR_VAR 0 41
24015: PUSH
24016: LD_INT 0
24018: PUSH
24019: LD_INT 0
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 0
24028: PUSH
24029: LD_INT 1
24031: NEG
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 1
24039: PUSH
24040: LD_INT 0
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 1
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: LD_INT 1
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 1
24069: NEG
24070: PUSH
24071: LD_INT 0
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: NEG
24081: PUSH
24082: LD_INT 1
24084: NEG
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 1
24092: NEG
24093: PUSH
24094: LD_INT 2
24096: NEG
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: LD_INT 1
24107: NEG
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: LD_INT 0
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 2
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 2
24135: PUSH
24136: LD_INT 2
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 1
24145: PUSH
24146: LD_INT 2
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 1
24155: NEG
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 2
24166: NEG
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 2
24177: NEG
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 2
24189: NEG
24190: PUSH
24191: LD_INT 2
24193: NEG
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 2
24201: NEG
24202: PUSH
24203: LD_INT 3
24205: NEG
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: LD_INT 1
24216: NEG
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 3
24224: PUSH
24225: LD_INT 0
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 3
24234: PUSH
24235: LD_INT 1
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 3
24244: PUSH
24245: LD_INT 2
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 3
24254: PUSH
24255: LD_INT 3
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 2
24264: PUSH
24265: LD_INT 3
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 2
24274: NEG
24275: PUSH
24276: LD_INT 1
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 3
24285: NEG
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 3
24296: NEG
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 3
24308: NEG
24309: PUSH
24310: LD_INT 2
24312: NEG
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 3
24320: NEG
24321: PUSH
24322: LD_INT 3
24324: NEG
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24361: LD_ADDR_VAR 0 42
24365: PUSH
24366: LD_INT 0
24368: PUSH
24369: LD_INT 0
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 0
24378: PUSH
24379: LD_INT 1
24381: NEG
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 1
24389: PUSH
24390: LD_INT 0
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 1
24399: PUSH
24400: LD_INT 1
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 0
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 1
24419: NEG
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 1
24430: NEG
24431: PUSH
24432: LD_INT 1
24434: NEG
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 1
24442: NEG
24443: PUSH
24444: LD_INT 2
24446: NEG
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 0
24454: PUSH
24455: LD_INT 2
24457: NEG
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 1
24465: PUSH
24466: LD_INT 1
24468: NEG
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 2
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 2
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: LD_INT 2
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 0
24506: PUSH
24507: LD_INT 2
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 1
24516: NEG
24517: PUSH
24518: LD_INT 1
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 2
24527: NEG
24528: PUSH
24529: LD_INT 1
24531: NEG
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 2
24539: NEG
24540: PUSH
24541: LD_INT 2
24543: NEG
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 2
24551: NEG
24552: PUSH
24553: LD_INT 3
24555: NEG
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: LD_INT 3
24567: NEG
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 0
24575: PUSH
24576: LD_INT 3
24578: NEG
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 1
24586: PUSH
24587: LD_INT 2
24589: NEG
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 3
24597: PUSH
24598: LD_INT 2
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 3
24607: PUSH
24608: LD_INT 3
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 2
24617: PUSH
24618: LD_INT 3
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 1
24627: PUSH
24628: LD_INT 3
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 0
24637: PUSH
24638: LD_INT 3
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 1
24647: NEG
24648: PUSH
24649: LD_INT 2
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 3
24658: NEG
24659: PUSH
24660: LD_INT 2
24662: NEG
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 3
24670: NEG
24671: PUSH
24672: LD_INT 3
24674: NEG
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24711: LD_ADDR_VAR 0 43
24715: PUSH
24716: LD_INT 0
24718: PUSH
24719: LD_INT 0
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 0
24728: PUSH
24729: LD_INT 1
24731: NEG
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 1
24739: PUSH
24740: LD_INT 0
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 1
24749: PUSH
24750: LD_INT 1
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 0
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 1
24769: NEG
24770: PUSH
24771: LD_INT 0
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 1
24780: NEG
24781: PUSH
24782: LD_INT 1
24784: NEG
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 1
24792: NEG
24793: PUSH
24794: LD_INT 2
24796: NEG
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 0
24804: PUSH
24805: LD_INT 2
24807: NEG
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 1
24815: PUSH
24816: LD_INT 1
24818: NEG
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 2
24826: PUSH
24827: LD_INT 0
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 2
24836: PUSH
24837: LD_INT 1
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 1
24846: PUSH
24847: LD_INT 2
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 1
24866: NEG
24867: PUSH
24868: LD_INT 1
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 2
24877: NEG
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 2
24888: NEG
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 1
24900: NEG
24901: PUSH
24902: LD_INT 3
24904: NEG
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: LD_INT 3
24915: NEG
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 1
24923: PUSH
24924: LD_INT 2
24926: NEG
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 2
24934: PUSH
24935: LD_INT 1
24937: NEG
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 3
24945: PUSH
24946: LD_INT 0
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 3
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 1
24965: PUSH
24966: LD_INT 3
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 0
24975: PUSH
24976: LD_INT 3
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 1
24985: NEG
24986: PUSH
24987: LD_INT 2
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 2
24996: NEG
24997: PUSH
24998: LD_INT 1
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 3
25007: NEG
25008: PUSH
25009: LD_INT 0
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 3
25018: NEG
25019: PUSH
25020: LD_INT 1
25022: NEG
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25059: LD_ADDR_VAR 0 44
25063: PUSH
25064: LD_INT 0
25066: PUSH
25067: LD_INT 0
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 0
25076: PUSH
25077: LD_INT 1
25079: NEG
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: LD_INT 0
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 1
25097: PUSH
25098: LD_INT 1
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 0
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 1
25117: NEG
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 1
25128: NEG
25129: PUSH
25130: LD_INT 1
25132: NEG
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 1
25140: NEG
25141: PUSH
25142: LD_INT 2
25144: NEG
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 1
25152: PUSH
25153: LD_INT 1
25155: NEG
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: LD_INT 0
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 2
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 2
25183: PUSH
25184: LD_INT 2
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: LD_INT 2
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 1
25203: NEG
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 2
25214: NEG
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 2
25225: NEG
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 2
25237: NEG
25238: PUSH
25239: LD_INT 2
25241: NEG
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 2
25249: NEG
25250: PUSH
25251: LD_INT 3
25253: NEG
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 2
25261: PUSH
25262: LD_INT 1
25264: NEG
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 3
25272: PUSH
25273: LD_INT 0
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 3
25282: PUSH
25283: LD_INT 1
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 3
25292: PUSH
25293: LD_INT 2
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 3
25302: PUSH
25303: LD_INT 3
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: LD_INT 3
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 2
25322: NEG
25323: PUSH
25324: LD_INT 1
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 3
25333: NEG
25334: PUSH
25335: LD_INT 0
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 3
25344: NEG
25345: PUSH
25346: LD_INT 1
25348: NEG
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 3
25356: NEG
25357: PUSH
25358: LD_INT 2
25360: NEG
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 3
25368: NEG
25369: PUSH
25370: LD_INT 3
25372: NEG
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25409: LD_ADDR_VAR 0 45
25413: PUSH
25414: LD_INT 0
25416: PUSH
25417: LD_INT 0
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 0
25426: PUSH
25427: LD_INT 1
25429: NEG
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 1
25437: PUSH
25438: LD_INT 0
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 1
25447: PUSH
25448: LD_INT 1
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 0
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 1
25467: NEG
25468: PUSH
25469: LD_INT 0
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 1
25478: NEG
25479: PUSH
25480: LD_INT 1
25482: NEG
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 1
25490: NEG
25491: PUSH
25492: LD_INT 2
25494: NEG
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 0
25502: PUSH
25503: LD_INT 2
25505: NEG
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 1
25513: PUSH
25514: LD_INT 1
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 2
25524: PUSH
25525: LD_INT 1
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 2
25534: PUSH
25535: LD_INT 2
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 1
25544: PUSH
25545: LD_INT 2
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: LD_INT 2
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 1
25564: NEG
25565: PUSH
25566: LD_INT 1
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 2
25575: NEG
25576: PUSH
25577: LD_INT 1
25579: NEG
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 2
25587: NEG
25588: PUSH
25589: LD_INT 2
25591: NEG
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 2
25599: NEG
25600: PUSH
25601: LD_INT 3
25603: NEG
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: LD_INT 3
25615: NEG
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 0
25623: PUSH
25624: LD_INT 3
25626: NEG
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 1
25634: PUSH
25635: LD_INT 2
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 3
25645: PUSH
25646: LD_INT 2
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 3
25655: PUSH
25656: LD_INT 3
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 2
25665: PUSH
25666: LD_INT 3
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 1
25675: PUSH
25676: LD_INT 3
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 0
25685: PUSH
25686: LD_INT 3
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 1
25695: NEG
25696: PUSH
25697: LD_INT 2
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 3
25706: NEG
25707: PUSH
25708: LD_INT 2
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 3
25718: NEG
25719: PUSH
25720: LD_INT 3
25722: NEG
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25759: LD_ADDR_VAR 0 46
25763: PUSH
25764: LD_INT 0
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: LD_INT 1
25779: NEG
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 1
25787: PUSH
25788: LD_INT 0
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: LD_INT 1
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: LD_INT 1
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 1
25828: NEG
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 1
25840: NEG
25841: PUSH
25842: LD_INT 2
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 0
25852: PUSH
25853: LD_INT 2
25855: NEG
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: LD_INT 1
25866: NEG
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 2
25874: PUSH
25875: LD_INT 0
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 2
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: LD_INT 2
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 0
25904: PUSH
25905: LD_INT 2
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 2
25925: NEG
25926: PUSH
25927: LD_INT 0
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 2
25936: NEG
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: LD_INT 3
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 0
25960: PUSH
25961: LD_INT 3
25963: NEG
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 1
25971: PUSH
25972: LD_INT 2
25974: NEG
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 2
25982: PUSH
25983: LD_INT 1
25985: NEG
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 3
25993: PUSH
25994: LD_INT 0
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 3
26003: PUSH
26004: LD_INT 1
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 1
26013: PUSH
26014: LD_INT 3
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 0
26023: PUSH
26024: LD_INT 3
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: LD_INT 2
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 2
26044: NEG
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 3
26055: NEG
26056: PUSH
26057: LD_INT 0
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 3
26066: NEG
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26107: LD_ADDR_VAR 0 47
26111: PUSH
26112: LD_INT 0
26114: PUSH
26115: LD_INT 0
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: LD_INT 1
26127: NEG
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 1
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: LD_INT 1
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 1
26165: NEG
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 1
26176: NEG
26177: PUSH
26178: LD_INT 1
26180: NEG
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 1
26188: NEG
26189: PUSH
26190: LD_INT 2
26192: NEG
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 0
26200: PUSH
26201: LD_INT 2
26203: NEG
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 1
26211: PUSH
26212: LD_INT 1
26214: NEG
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 2
26222: NEG
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 2
26234: NEG
26235: PUSH
26236: LD_INT 2
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26258: LD_ADDR_VAR 0 48
26262: PUSH
26263: LD_INT 0
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 0
26275: PUSH
26276: LD_INT 1
26278: NEG
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 1
26286: PUSH
26287: LD_INT 0
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 1
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 0
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 1
26316: NEG
26317: PUSH
26318: LD_INT 0
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: PUSH
26329: LD_INT 1
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 1
26339: NEG
26340: PUSH
26341: LD_INT 2
26343: NEG
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 0
26351: PUSH
26352: LD_INT 2
26354: NEG
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 2
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 1
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26405: LD_ADDR_VAR 0 49
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: LD_INT 0
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 0
26422: PUSH
26423: LD_INT 1
26425: NEG
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 1
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 1
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: LD_INT 1
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 1
26463: NEG
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 1
26474: NEG
26475: PUSH
26476: LD_INT 1
26478: NEG
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 1
26486: PUSH
26487: LD_INT 1
26489: NEG
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 2
26497: PUSH
26498: LD_INT 0
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 2
26507: PUSH
26508: LD_INT 1
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 2
26517: PUSH
26518: LD_INT 2
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: LD_INT 2
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26549: LD_ADDR_VAR 0 50
26553: PUSH
26554: LD_INT 0
26556: PUSH
26557: LD_INT 0
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: LD_INT 1
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 1
26577: PUSH
26578: LD_INT 0
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 1
26587: PUSH
26588: LD_INT 1
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: LD_INT 1
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 1
26607: NEG
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 1
26618: NEG
26619: PUSH
26620: LD_INT 1
26622: NEG
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 2
26630: PUSH
26631: LD_INT 1
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 2
26640: PUSH
26641: LD_INT 2
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: LD_INT 2
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 0
26660: PUSH
26661: LD_INT 2
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: LD_INT 1
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26693: LD_ADDR_VAR 0 51
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: LD_INT 0
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: LD_INT 1
26713: NEG
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 1
26751: NEG
26752: PUSH
26753: LD_INT 0
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: NEG
26763: PUSH
26764: LD_INT 1
26766: NEG
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 1
26774: PUSH
26775: LD_INT 2
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 0
26784: PUSH
26785: LD_INT 2
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 1
26794: NEG
26795: PUSH
26796: LD_INT 1
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 2
26805: NEG
26806: PUSH
26807: LD_INT 0
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 2
26816: NEG
26817: PUSH
26818: LD_INT 1
26820: NEG
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26840: LD_ADDR_VAR 0 52
26844: PUSH
26845: LD_INT 0
26847: PUSH
26848: LD_INT 0
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: LD_INT 1
26860: NEG
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 1
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 1
26878: PUSH
26879: LD_INT 1
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 1
26898: NEG
26899: PUSH
26900: LD_INT 0
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 1
26909: NEG
26910: PUSH
26911: LD_INT 1
26913: NEG
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: LD_INT 2
26925: NEG
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: LD_INT 1
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 2
26944: NEG
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 2
26955: NEG
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 2
26967: NEG
26968: PUSH
26969: LD_INT 2
26971: NEG
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26991: LD_ADDR_VAR 0 53
26995: PUSH
26996: LD_INT 0
26998: PUSH
26999: LD_INT 0
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 0
27008: PUSH
27009: LD_INT 1
27011: NEG
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 1
27019: PUSH
27020: LD_INT 0
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 1
27029: PUSH
27030: LD_INT 1
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 0
27039: PUSH
27040: LD_INT 1
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 1
27049: NEG
27050: PUSH
27051: LD_INT 0
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 1
27060: NEG
27061: PUSH
27062: LD_INT 1
27064: NEG
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 1
27072: NEG
27073: PUSH
27074: LD_INT 2
27076: NEG
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: LD_INT 2
27087: NEG
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: LD_INT 1
27098: NEG
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 2
27106: PUSH
27107: LD_INT 0
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 2
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 2
27126: PUSH
27127: LD_INT 2
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 1
27136: PUSH
27137: LD_INT 2
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: LD_INT 2
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 1
27156: NEG
27157: PUSH
27158: LD_INT 1
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 2
27167: NEG
27168: PUSH
27169: LD_INT 0
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 2
27178: NEG
27179: PUSH
27180: LD_INT 1
27182: NEG
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 2
27190: NEG
27191: PUSH
27192: LD_INT 2
27194: NEG
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27221: LD_ADDR_VAR 0 54
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: LD_INT 0
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: LD_INT 1
27241: NEG
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 1
27249: PUSH
27250: LD_INT 0
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 1
27259: PUSH
27260: LD_INT 1
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 1
27279: NEG
27280: PUSH
27281: LD_INT 0
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 1
27290: NEG
27291: PUSH
27292: LD_INT 1
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: NEG
27303: PUSH
27304: LD_INT 2
27306: NEG
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: LD_INT 2
27317: NEG
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 2
27336: PUSH
27337: LD_INT 0
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: LD_INT 1
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 2
27356: PUSH
27357: LD_INT 2
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 1
27366: PUSH
27367: LD_INT 2
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 0
27376: PUSH
27377: LD_INT 2
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 1
27386: NEG
27387: PUSH
27388: LD_INT 1
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 2
27397: NEG
27398: PUSH
27399: LD_INT 0
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 2
27408: NEG
27409: PUSH
27410: LD_INT 1
27412: NEG
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 2
27420: NEG
27421: PUSH
27422: LD_INT 2
27424: NEG
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27451: LD_ADDR_VAR 0 55
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: LD_INT 0
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: LD_INT 1
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: PUSH
27480: LD_INT 0
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 1
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 0
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 1
27509: NEG
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 1
27520: NEG
27521: PUSH
27522: LD_INT 1
27524: NEG
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 1
27532: NEG
27533: PUSH
27534: LD_INT 2
27536: NEG
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 0
27544: PUSH
27545: LD_INT 2
27547: NEG
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 1
27555: PUSH
27556: LD_INT 1
27558: NEG
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 2
27566: PUSH
27567: LD_INT 0
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 2
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 2
27586: PUSH
27587: LD_INT 2
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 1
27596: PUSH
27597: LD_INT 2
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 0
27606: PUSH
27607: LD_INT 2
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 1
27616: NEG
27617: PUSH
27618: LD_INT 1
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 2
27627: NEG
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 2
27638: NEG
27639: PUSH
27640: LD_INT 1
27642: NEG
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 2
27650: NEG
27651: PUSH
27652: LD_INT 2
27654: NEG
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27681: LD_ADDR_VAR 0 56
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 0
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 1
27709: PUSH
27710: LD_INT 0
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 1
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: NEG
27740: PUSH
27741: LD_INT 0
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 1
27750: NEG
27751: PUSH
27752: LD_INT 1
27754: NEG
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 1
27762: NEG
27763: PUSH
27764: LD_INT 2
27766: NEG
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 0
27774: PUSH
27775: LD_INT 2
27777: NEG
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 1
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 2
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 2
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 2
27816: PUSH
27817: LD_INT 2
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 1
27826: PUSH
27827: LD_INT 2
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: LD_INT 2
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: NEG
27847: PUSH
27848: LD_INT 1
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 2
27857: NEG
27858: PUSH
27859: LD_INT 0
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 2
27868: NEG
27869: PUSH
27870: LD_INT 1
27872: NEG
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 2
27880: NEG
27881: PUSH
27882: LD_INT 2
27884: NEG
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27911: LD_ADDR_VAR 0 57
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 0
27928: PUSH
27929: LD_INT 1
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 1
27939: PUSH
27940: LD_INT 0
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 1
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 1
27969: NEG
27970: PUSH
27971: LD_INT 0
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 1
27992: NEG
27993: PUSH
27994: LD_INT 2
27996: NEG
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 0
28004: PUSH
28005: LD_INT 2
28007: NEG
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 1
28015: PUSH
28016: LD_INT 1
28018: NEG
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 2
28026: PUSH
28027: LD_INT 0
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 2
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 2
28046: PUSH
28047: LD_INT 2
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 1
28056: PUSH
28057: LD_INT 2
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: LD_INT 2
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 1
28076: NEG
28077: PUSH
28078: LD_INT 1
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 2
28087: NEG
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 2
28098: NEG
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 2
28110: NEG
28111: PUSH
28112: LD_INT 2
28114: NEG
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28141: LD_ADDR_VAR 0 58
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: LD_INT 0
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 0
28158: PUSH
28159: LD_INT 1
28161: NEG
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: LD_INT 0
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 1
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 1
28199: NEG
28200: PUSH
28201: LD_INT 0
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 1
28210: NEG
28211: PUSH
28212: LD_INT 1
28214: NEG
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 1
28222: NEG
28223: PUSH
28224: LD_INT 2
28226: NEG
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 0
28234: PUSH
28235: LD_INT 2
28237: NEG
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: LD_INT 1
28248: NEG
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 2
28256: PUSH
28257: LD_INT 0
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 2
28266: PUSH
28267: LD_INT 1
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 2
28276: PUSH
28277: LD_INT 2
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 1
28286: PUSH
28287: LD_INT 2
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: LD_INT 2
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 1
28306: NEG
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 2
28317: NEG
28318: PUSH
28319: LD_INT 0
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 2
28328: NEG
28329: PUSH
28330: LD_INT 1
28332: NEG
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 2
28340: NEG
28341: PUSH
28342: LD_INT 2
28344: NEG
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28371: LD_ADDR_VAR 0 59
28375: PUSH
28376: LD_INT 0
28378: PUSH
28379: LD_INT 0
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 0
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 1
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 1
28429: NEG
28430: PUSH
28431: LD_INT 0
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: LD_INT 1
28444: NEG
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28459: LD_ADDR_VAR 0 60
28463: PUSH
28464: LD_INT 0
28466: PUSH
28467: LD_INT 0
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 0
28476: PUSH
28477: LD_INT 1
28479: NEG
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 1
28497: PUSH
28498: LD_INT 1
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 0
28507: PUSH
28508: LD_INT 1
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 1
28517: NEG
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 1
28528: NEG
28529: PUSH
28530: LD_INT 1
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28547: LD_ADDR_VAR 0 61
28551: PUSH
28552: LD_INT 0
28554: PUSH
28555: LD_INT 0
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 0
28564: PUSH
28565: LD_INT 1
28567: NEG
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: LD_INT 0
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: LD_INT 1
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 0
28595: PUSH
28596: LD_INT 1
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 1
28605: NEG
28606: PUSH
28607: LD_INT 0
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 1
28616: NEG
28617: PUSH
28618: LD_INT 1
28620: NEG
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28635: LD_ADDR_VAR 0 62
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 0
28652: PUSH
28653: LD_INT 1
28655: NEG
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: LD_INT 1
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: NEG
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: LD_INT 1
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28723: LD_ADDR_VAR 0 63
28727: PUSH
28728: LD_INT 0
28730: PUSH
28731: LD_INT 0
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 0
28740: PUSH
28741: LD_INT 1
28743: NEG
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 1
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 1
28761: PUSH
28762: LD_INT 1
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 0
28771: PUSH
28772: LD_INT 1
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 1
28781: NEG
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 1
28792: NEG
28793: PUSH
28794: LD_INT 1
28796: NEG
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28811: LD_ADDR_VAR 0 64
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: LD_INT 0
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 1
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 1
28849: PUSH
28850: LD_INT 1
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: LD_INT 1
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 1
28869: NEG
28870: PUSH
28871: LD_INT 0
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: NEG
28881: PUSH
28882: LD_INT 1
28884: NEG
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: ST_TO_ADDR
// end ; 1 :
28899: GO 34796
28901: LD_INT 1
28903: DOUBLE
28904: EQUAL
28905: IFTRUE 28909
28907: GO 31532
28909: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28910: LD_ADDR_VAR 0 11
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: LD_INT 3
28921: NEG
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 0
28929: PUSH
28930: LD_INT 3
28932: NEG
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: LD_INT 2
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: LIST
28953: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28954: LD_ADDR_VAR 0 12
28958: PUSH
28959: LD_INT 2
28961: PUSH
28962: LD_INT 1
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 3
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 3
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: LIST
28994: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28995: LD_ADDR_VAR 0 13
28999: PUSH
29000: LD_INT 3
29002: PUSH
29003: LD_INT 2
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 3
29012: PUSH
29013: LD_INT 3
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 2
29022: PUSH
29023: LD_INT 3
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: LIST
29034: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29035: LD_ADDR_VAR 0 14
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: LD_INT 3
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 0
29052: PUSH
29053: LD_INT 3
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 1
29062: NEG
29063: PUSH
29064: LD_INT 2
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: LIST
29075: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29076: LD_ADDR_VAR 0 15
29080: PUSH
29081: LD_INT 2
29083: NEG
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 3
29094: NEG
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 3
29105: NEG
29106: PUSH
29107: LD_INT 1
29109: NEG
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: LIST
29119: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29120: LD_ADDR_VAR 0 16
29124: PUSH
29125: LD_INT 2
29127: NEG
29128: PUSH
29129: LD_INT 3
29131: NEG
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 3
29139: NEG
29140: PUSH
29141: LD_INT 2
29143: NEG
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 3
29151: NEG
29152: PUSH
29153: LD_INT 3
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: LIST
29165: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29166: LD_ADDR_VAR 0 17
29170: PUSH
29171: LD_INT 1
29173: NEG
29174: PUSH
29175: LD_INT 3
29177: NEG
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 0
29185: PUSH
29186: LD_INT 3
29188: NEG
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 1
29196: PUSH
29197: LD_INT 2
29199: NEG
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: LIST
29209: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29210: LD_ADDR_VAR 0 18
29214: PUSH
29215: LD_INT 2
29217: PUSH
29218: LD_INT 1
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 3
29228: PUSH
29229: LD_INT 0
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 3
29238: PUSH
29239: LD_INT 1
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: LIST
29250: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29251: LD_ADDR_VAR 0 19
29255: PUSH
29256: LD_INT 3
29258: PUSH
29259: LD_INT 2
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 3
29268: PUSH
29269: LD_INT 3
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 2
29278: PUSH
29279: LD_INT 3
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: LIST
29290: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29291: LD_ADDR_VAR 0 20
29295: PUSH
29296: LD_INT 1
29298: PUSH
29299: LD_INT 3
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 0
29308: PUSH
29309: LD_INT 3
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 1
29318: NEG
29319: PUSH
29320: LD_INT 2
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: LIST
29331: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29332: LD_ADDR_VAR 0 21
29336: PUSH
29337: LD_INT 2
29339: NEG
29340: PUSH
29341: LD_INT 1
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 3
29350: NEG
29351: PUSH
29352: LD_INT 0
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 3
29361: NEG
29362: PUSH
29363: LD_INT 1
29365: NEG
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: LIST
29375: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29376: LD_ADDR_VAR 0 22
29380: PUSH
29381: LD_INT 2
29383: NEG
29384: PUSH
29385: LD_INT 3
29387: NEG
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 3
29395: NEG
29396: PUSH
29397: LD_INT 2
29399: NEG
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 3
29407: NEG
29408: PUSH
29409: LD_INT 3
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: LIST
29421: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29422: LD_ADDR_VAR 0 23
29426: PUSH
29427: LD_INT 0
29429: PUSH
29430: LD_INT 3
29432: NEG
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 1
29440: NEG
29441: PUSH
29442: LD_INT 4
29444: NEG
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 1
29452: PUSH
29453: LD_INT 3
29455: NEG
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: LIST
29465: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29466: LD_ADDR_VAR 0 24
29470: PUSH
29471: LD_INT 3
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 3
29483: PUSH
29484: LD_INT 1
29486: NEG
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 4
29494: PUSH
29495: LD_INT 1
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: LIST
29506: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29507: LD_ADDR_VAR 0 25
29511: PUSH
29512: LD_INT 3
29514: PUSH
29515: LD_INT 3
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 4
29524: PUSH
29525: LD_INT 3
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 3
29534: PUSH
29535: LD_INT 4
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: LIST
29546: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29547: LD_ADDR_VAR 0 26
29551: PUSH
29552: LD_INT 0
29554: PUSH
29555: LD_INT 3
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 1
29564: PUSH
29565: LD_INT 4
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 1
29574: NEG
29575: PUSH
29576: LD_INT 3
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: LIST
29587: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29588: LD_ADDR_VAR 0 27
29592: PUSH
29593: LD_INT 3
29595: NEG
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 3
29606: NEG
29607: PUSH
29608: LD_INT 1
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 4
29617: NEG
29618: PUSH
29619: LD_INT 1
29621: NEG
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: LIST
29631: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29632: LD_ADDR_VAR 0 28
29636: PUSH
29637: LD_INT 3
29639: NEG
29640: PUSH
29641: LD_INT 3
29643: NEG
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 3
29651: NEG
29652: PUSH
29653: LD_INT 4
29655: NEG
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 4
29663: NEG
29664: PUSH
29665: LD_INT 3
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: LIST
29677: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29678: LD_ADDR_VAR 0 29
29682: PUSH
29683: LD_INT 1
29685: NEG
29686: PUSH
29687: LD_INT 3
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 0
29697: PUSH
29698: LD_INT 3
29700: NEG
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 1
29708: PUSH
29709: LD_INT 2
29711: NEG
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 1
29719: NEG
29720: PUSH
29721: LD_INT 4
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: LD_INT 4
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: LD_INT 3
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: LD_INT 5
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 0
29765: PUSH
29766: LD_INT 5
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: LD_INT 4
29779: NEG
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: PUSH
29789: LD_INT 6
29791: NEG
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: LD_INT 6
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 1
29810: PUSH
29811: LD_INT 5
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29833: LD_ADDR_VAR 0 30
29837: PUSH
29838: LD_INT 2
29840: PUSH
29841: LD_INT 1
29843: NEG
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 3
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 3
29861: PUSH
29862: LD_INT 1
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 3
29871: PUSH
29872: LD_INT 1
29874: NEG
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 4
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 4
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 4
29902: PUSH
29903: LD_INT 1
29905: NEG
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 5
29913: PUSH
29914: LD_INT 0
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 5
29923: PUSH
29924: LD_INT 1
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 5
29933: PUSH
29934: LD_INT 1
29936: NEG
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 6
29944: PUSH
29945: LD_INT 0
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 6
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29976: LD_ADDR_VAR 0 31
29980: PUSH
29981: LD_INT 3
29983: PUSH
29984: LD_INT 2
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 3
29993: PUSH
29994: LD_INT 3
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 2
30003: PUSH
30004: LD_INT 3
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 4
30013: PUSH
30014: LD_INT 3
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 4
30023: PUSH
30024: LD_INT 4
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 3
30033: PUSH
30034: LD_INT 4
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 5
30043: PUSH
30044: LD_INT 4
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 5
30053: PUSH
30054: LD_INT 5
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 4
30063: PUSH
30064: LD_INT 5
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 6
30073: PUSH
30074: LD_INT 5
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 6
30083: PUSH
30084: LD_INT 6
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 5
30093: PUSH
30094: LD_INT 6
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30115: LD_ADDR_VAR 0 32
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: LD_INT 3
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 0
30132: PUSH
30133: LD_INT 3
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 1
30142: NEG
30143: PUSH
30144: LD_INT 2
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 1
30153: PUSH
30154: LD_INT 4
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 0
30163: PUSH
30164: LD_INT 4
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 1
30173: NEG
30174: PUSH
30175: LD_INT 3
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 1
30184: PUSH
30185: LD_INT 5
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: LD_INT 5
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 1
30204: NEG
30205: PUSH
30206: LD_INT 4
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 1
30215: PUSH
30216: LD_INT 6
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 0
30225: PUSH
30226: LD_INT 6
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 1
30235: NEG
30236: PUSH
30237: LD_INT 5
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30258: LD_ADDR_VAR 0 33
30262: PUSH
30263: LD_INT 2
30265: NEG
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 3
30276: NEG
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 3
30287: NEG
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 3
30299: NEG
30300: PUSH
30301: LD_INT 1
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 4
30310: NEG
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 4
30321: NEG
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 4
30333: NEG
30334: PUSH
30335: LD_INT 1
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 5
30344: NEG
30345: PUSH
30346: LD_INT 0
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 5
30355: NEG
30356: PUSH
30357: LD_INT 1
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 5
30367: NEG
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 6
30378: NEG
30379: PUSH
30380: LD_INT 0
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 6
30389: NEG
30390: PUSH
30391: LD_INT 1
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30413: LD_ADDR_VAR 0 34
30417: PUSH
30418: LD_INT 2
30420: NEG
30421: PUSH
30422: LD_INT 3
30424: NEG
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 3
30432: NEG
30433: PUSH
30434: LD_INT 2
30436: NEG
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 3
30444: NEG
30445: PUSH
30446: LD_INT 3
30448: NEG
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 3
30456: NEG
30457: PUSH
30458: LD_INT 4
30460: NEG
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 4
30468: NEG
30469: PUSH
30470: LD_INT 3
30472: NEG
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 4
30480: NEG
30481: PUSH
30482: LD_INT 4
30484: NEG
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 4
30492: NEG
30493: PUSH
30494: LD_INT 5
30496: NEG
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 5
30504: NEG
30505: PUSH
30506: LD_INT 4
30508: NEG
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 5
30516: NEG
30517: PUSH
30518: LD_INT 5
30520: NEG
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 5
30528: NEG
30529: PUSH
30530: LD_INT 6
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 6
30540: NEG
30541: PUSH
30542: LD_INT 5
30544: NEG
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 6
30552: NEG
30553: PUSH
30554: LD_INT 6
30556: NEG
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30576: LD_ADDR_VAR 0 41
30580: PUSH
30581: LD_INT 0
30583: PUSH
30584: LD_INT 2
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 1
30594: NEG
30595: PUSH
30596: LD_INT 3
30598: NEG
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: LD_INT 2
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30620: LD_ADDR_VAR 0 42
30624: PUSH
30625: LD_INT 2
30627: PUSH
30628: LD_INT 0
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: LD_INT 1
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 3
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: LIST
30660: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30661: LD_ADDR_VAR 0 43
30665: PUSH
30666: LD_INT 2
30668: PUSH
30669: LD_INT 2
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 3
30678: PUSH
30679: LD_INT 2
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 2
30688: PUSH
30689: LD_INT 3
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: LIST
30700: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30701: LD_ADDR_VAR 0 44
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: LD_INT 2
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 1
30718: PUSH
30719: LD_INT 3
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 1
30728: NEG
30729: PUSH
30730: LD_INT 2
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: LIST
30741: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30742: LD_ADDR_VAR 0 45
30746: PUSH
30747: LD_INT 2
30749: NEG
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 2
30760: NEG
30761: PUSH
30762: LD_INT 1
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 3
30771: NEG
30772: PUSH
30773: LD_INT 1
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: LIST
30785: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30786: LD_ADDR_VAR 0 46
30790: PUSH
30791: LD_INT 2
30793: NEG
30794: PUSH
30795: LD_INT 2
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 2
30805: NEG
30806: PUSH
30807: LD_INT 3
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 3
30817: NEG
30818: PUSH
30819: LD_INT 2
30821: NEG
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: LIST
30831: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30832: LD_ADDR_VAR 0 47
30836: PUSH
30837: LD_INT 2
30839: NEG
30840: PUSH
30841: LD_INT 3
30843: NEG
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 1
30851: NEG
30852: PUSH
30853: LD_INT 3
30855: NEG
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30865: LD_ADDR_VAR 0 48
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: LD_INT 2
30875: NEG
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 2
30883: PUSH
30884: LD_INT 1
30886: NEG
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30896: LD_ADDR_VAR 0 49
30900: PUSH
30901: LD_INT 3
30903: PUSH
30904: LD_INT 1
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 3
30913: PUSH
30914: LD_INT 2
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30925: LD_ADDR_VAR 0 50
30929: PUSH
30930: LD_INT 2
30932: PUSH
30933: LD_INT 3
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: LD_INT 3
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30954: LD_ADDR_VAR 0 51
30958: PUSH
30959: LD_INT 1
30961: NEG
30962: PUSH
30963: LD_INT 2
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 2
30972: NEG
30973: PUSH
30974: LD_INT 1
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30985: LD_ADDR_VAR 0 52
30989: PUSH
30990: LD_INT 3
30992: NEG
30993: PUSH
30994: LD_INT 1
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 3
31004: NEG
31005: PUSH
31006: LD_INT 2
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31018: LD_ADDR_VAR 0 53
31022: PUSH
31023: LD_INT 1
31025: NEG
31026: PUSH
31027: LD_INT 3
31029: NEG
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 0
31037: PUSH
31038: LD_INT 3
31040: NEG
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 1
31048: PUSH
31049: LD_INT 2
31051: NEG
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: LIST
31061: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31062: LD_ADDR_VAR 0 54
31066: PUSH
31067: LD_INT 2
31069: PUSH
31070: LD_INT 1
31072: NEG
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 3
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 3
31090: PUSH
31091: LD_INT 1
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: LIST
31102: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31103: LD_ADDR_VAR 0 55
31107: PUSH
31108: LD_INT 3
31110: PUSH
31111: LD_INT 2
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 3
31120: PUSH
31121: LD_INT 3
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 2
31130: PUSH
31131: LD_INT 3
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: LIST
31142: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31143: LD_ADDR_VAR 0 56
31147: PUSH
31148: LD_INT 1
31150: PUSH
31151: LD_INT 3
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 0
31160: PUSH
31161: LD_INT 3
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 1
31170: NEG
31171: PUSH
31172: LD_INT 2
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: LIST
31183: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31184: LD_ADDR_VAR 0 57
31188: PUSH
31189: LD_INT 2
31191: NEG
31192: PUSH
31193: LD_INT 1
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 3
31202: NEG
31203: PUSH
31204: LD_INT 0
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 3
31213: NEG
31214: PUSH
31215: LD_INT 1
31217: NEG
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: LIST
31227: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31228: LD_ADDR_VAR 0 58
31232: PUSH
31233: LD_INT 2
31235: NEG
31236: PUSH
31237: LD_INT 3
31239: NEG
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 3
31247: NEG
31248: PUSH
31249: LD_INT 2
31251: NEG
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 3
31259: NEG
31260: PUSH
31261: LD_INT 3
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: LIST
31273: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31274: LD_ADDR_VAR 0 59
31278: PUSH
31279: LD_INT 1
31281: NEG
31282: PUSH
31283: LD_INT 2
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 0
31293: PUSH
31294: LD_INT 2
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: LIST
31317: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31318: LD_ADDR_VAR 0 60
31322: PUSH
31323: LD_INT 1
31325: PUSH
31326: LD_INT 1
31328: NEG
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 2
31336: PUSH
31337: LD_INT 0
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 2
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: LIST
31358: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31359: LD_ADDR_VAR 0 61
31363: PUSH
31364: LD_INT 2
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 2
31376: PUSH
31377: LD_INT 2
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 1
31386: PUSH
31387: LD_INT 2
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31399: LD_ADDR_VAR 0 62
31403: PUSH
31404: LD_INT 1
31406: PUSH
31407: LD_INT 2
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: LD_INT 2
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 1
31426: NEG
31427: PUSH
31428: LD_INT 1
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: LIST
31439: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31440: LD_ADDR_VAR 0 63
31444: PUSH
31445: LD_INT 1
31447: NEG
31448: PUSH
31449: LD_INT 1
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 2
31458: NEG
31459: PUSH
31460: LD_INT 0
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 2
31469: NEG
31470: PUSH
31471: LD_INT 1
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: LIST
31483: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31484: LD_ADDR_VAR 0 64
31488: PUSH
31489: LD_INT 1
31491: NEG
31492: PUSH
31493: LD_INT 2
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 2
31503: NEG
31504: PUSH
31505: LD_INT 1
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 2
31515: NEG
31516: PUSH
31517: LD_INT 2
31519: NEG
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: LIST
31529: ST_TO_ADDR
// end ; 2 :
31530: GO 34796
31532: LD_INT 2
31534: DOUBLE
31535: EQUAL
31536: IFTRUE 31540
31538: GO 34795
31540: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31541: LD_ADDR_VAR 0 29
31545: PUSH
31546: LD_INT 4
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 4
31558: PUSH
31559: LD_INT 1
31561: NEG
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 5
31569: PUSH
31570: LD_INT 0
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 5
31579: PUSH
31580: LD_INT 1
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 4
31589: PUSH
31590: LD_INT 1
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 3
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 3
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 3
31620: PUSH
31621: LD_INT 2
31623: NEG
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 5
31631: PUSH
31632: LD_INT 2
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 3
31641: PUSH
31642: LD_INT 3
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 3
31651: PUSH
31652: LD_INT 2
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 4
31661: PUSH
31662: LD_INT 3
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 4
31671: PUSH
31672: LD_INT 4
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 3
31681: PUSH
31682: LD_INT 4
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 2
31691: PUSH
31692: LD_INT 3
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 2
31701: PUSH
31702: LD_INT 2
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 4
31711: PUSH
31712: LD_INT 2
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 2
31721: PUSH
31722: LD_INT 4
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 0
31731: PUSH
31732: LD_INT 4
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: LD_INT 3
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 1
31751: PUSH
31752: LD_INT 4
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 1
31761: PUSH
31762: LD_INT 5
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: LD_INT 5
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 1
31781: NEG
31782: PUSH
31783: LD_INT 4
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: NEG
31793: PUSH
31794: LD_INT 3
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 2
31803: PUSH
31804: LD_INT 5
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 2
31813: NEG
31814: PUSH
31815: LD_INT 3
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 3
31824: NEG
31825: PUSH
31826: LD_INT 0
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 3
31835: NEG
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 2
31847: NEG
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 2
31858: NEG
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 3
31869: NEG
31870: PUSH
31871: LD_INT 1
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 4
31880: NEG
31881: PUSH
31882: LD_INT 0
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 4
31891: NEG
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 4
31903: NEG
31904: PUSH
31905: LD_INT 2
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 2
31915: NEG
31916: PUSH
31917: LD_INT 2
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 4
31926: NEG
31927: PUSH
31928: LD_INT 4
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 4
31938: NEG
31939: PUSH
31940: LD_INT 5
31942: NEG
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 3
31950: NEG
31951: PUSH
31952: LD_INT 4
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 3
31962: NEG
31963: PUSH
31964: LD_INT 3
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 4
31974: NEG
31975: PUSH
31976: LD_INT 3
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 5
31986: NEG
31987: PUSH
31988: LD_INT 4
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 5
31998: NEG
31999: PUSH
32000: LD_INT 5
32002: NEG
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 3
32010: NEG
32011: PUSH
32012: LD_INT 5
32014: NEG
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 5
32022: NEG
32023: PUSH
32024: LD_INT 3
32026: NEG
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32079: LD_ADDR_VAR 0 30
32083: PUSH
32084: LD_INT 4
32086: PUSH
32087: LD_INT 4
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 4
32096: PUSH
32097: LD_INT 3
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 5
32106: PUSH
32107: LD_INT 4
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 5
32116: PUSH
32117: LD_INT 5
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 4
32126: PUSH
32127: LD_INT 5
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 3
32136: PUSH
32137: LD_INT 4
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 3
32146: PUSH
32147: LD_INT 3
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 5
32156: PUSH
32157: LD_INT 3
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 3
32166: PUSH
32167: LD_INT 5
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 0
32176: PUSH
32177: LD_INT 3
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: LD_INT 2
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 1
32196: PUSH
32197: LD_INT 3
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: LD_INT 4
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 0
32216: PUSH
32217: LD_INT 4
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 1
32226: NEG
32227: PUSH
32228: LD_INT 3
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 1
32237: NEG
32238: PUSH
32239: LD_INT 2
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 2
32248: PUSH
32249: LD_INT 4
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 2
32258: NEG
32259: PUSH
32260: LD_INT 2
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 4
32269: NEG
32270: PUSH
32271: LD_INT 0
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 4
32280: NEG
32281: PUSH
32282: LD_INT 1
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 3
32292: NEG
32293: PUSH
32294: LD_INT 0
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 3
32303: NEG
32304: PUSH
32305: LD_INT 1
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 4
32314: NEG
32315: PUSH
32316: LD_INT 1
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 5
32325: NEG
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 5
32336: NEG
32337: PUSH
32338: LD_INT 1
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 5
32348: NEG
32349: PUSH
32350: LD_INT 2
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 3
32360: NEG
32361: PUSH
32362: LD_INT 2
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 3
32371: NEG
32372: PUSH
32373: LD_INT 3
32375: NEG
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 3
32383: NEG
32384: PUSH
32385: LD_INT 4
32387: NEG
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 2
32395: NEG
32396: PUSH
32397: LD_INT 3
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 2
32407: NEG
32408: PUSH
32409: LD_INT 2
32411: NEG
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 3
32419: NEG
32420: PUSH
32421: LD_INT 2
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 4
32431: NEG
32432: PUSH
32433: LD_INT 3
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 4
32443: NEG
32444: PUSH
32445: LD_INT 4
32447: NEG
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 2
32455: NEG
32456: PUSH
32457: LD_INT 4
32459: NEG
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 4
32467: NEG
32468: PUSH
32469: LD_INT 2
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: LD_INT 4
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 0
32490: PUSH
32491: LD_INT 5
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: LD_INT 4
32504: NEG
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 1
32512: PUSH
32513: LD_INT 3
32515: NEG
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 0
32523: PUSH
32524: LD_INT 3
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 1
32534: NEG
32535: PUSH
32536: LD_INT 4
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 1
32546: NEG
32547: PUSH
32548: LD_INT 5
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 2
32558: PUSH
32559: LD_INT 3
32561: NEG
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 2
32569: NEG
32570: PUSH
32571: LD_INT 5
32573: NEG
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32626: LD_ADDR_VAR 0 31
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: LD_INT 4
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: LD_INT 3
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 1
32653: PUSH
32654: LD_INT 4
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: LD_INT 5
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: LD_INT 5
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 1
32683: NEG
32684: PUSH
32685: LD_INT 4
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PUSH
32696: LD_INT 3
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: LD_INT 5
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: NEG
32716: PUSH
32717: LD_INT 3
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 3
32726: NEG
32727: PUSH
32728: LD_INT 0
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 3
32737: NEG
32738: PUSH
32739: LD_INT 1
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 2
32749: NEG
32750: PUSH
32751: LD_INT 0
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 2
32760: NEG
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 3
32771: NEG
32772: PUSH
32773: LD_INT 1
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 4
32782: NEG
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 4
32793: NEG
32794: PUSH
32795: LD_INT 1
32797: NEG
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 4
32805: NEG
32806: PUSH
32807: LD_INT 2
32809: NEG
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 2
32817: NEG
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 4
32828: NEG
32829: PUSH
32830: LD_INT 4
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 4
32840: NEG
32841: PUSH
32842: LD_INT 5
32844: NEG
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 3
32852: NEG
32853: PUSH
32854: LD_INT 4
32856: NEG
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 3
32864: NEG
32865: PUSH
32866: LD_INT 3
32868: NEG
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 4
32876: NEG
32877: PUSH
32878: LD_INT 3
32880: NEG
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 5
32888: NEG
32889: PUSH
32890: LD_INT 4
32892: NEG
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 5
32900: NEG
32901: PUSH
32902: LD_INT 5
32904: NEG
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 3
32912: NEG
32913: PUSH
32914: LD_INT 5
32916: NEG
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 5
32924: NEG
32925: PUSH
32926: LD_INT 3
32928: NEG
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 0
32936: PUSH
32937: LD_INT 3
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 0
32947: PUSH
32948: LD_INT 4
32950: NEG
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 1
32958: PUSH
32959: LD_INT 3
32961: NEG
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: LD_INT 2
32972: NEG
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 0
32980: PUSH
32981: LD_INT 2
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: LD_INT 3
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: NEG
33004: PUSH
33005: LD_INT 4
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: LD_INT 2
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 2
33026: NEG
33027: PUSH
33028: LD_INT 4
33030: NEG
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 4
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 4
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 5
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 5
33069: PUSH
33070: LD_INT 1
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 4
33079: PUSH
33080: LD_INT 1
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 3
33089: PUSH
33090: LD_INT 0
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 3
33099: PUSH
33100: LD_INT 1
33102: NEG
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 3
33110: PUSH
33111: LD_INT 2
33113: NEG
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 5
33121: PUSH
33122: LD_INT 2
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33176: LD_ADDR_VAR 0 32
33180: PUSH
33181: LD_INT 4
33183: NEG
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 4
33194: NEG
33195: PUSH
33196: LD_INT 1
33198: NEG
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 3
33206: NEG
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 3
33217: NEG
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 4
33228: NEG
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 5
33239: NEG
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 5
33250: NEG
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 5
33262: NEG
33263: PUSH
33264: LD_INT 2
33266: NEG
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 3
33274: NEG
33275: PUSH
33276: LD_INT 2
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 3
33285: NEG
33286: PUSH
33287: LD_INT 3
33289: NEG
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 3
33297: NEG
33298: PUSH
33299: LD_INT 4
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 2
33309: NEG
33310: PUSH
33311: LD_INT 3
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 2
33321: NEG
33322: PUSH
33323: LD_INT 2
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 3
33333: NEG
33334: PUSH
33335: LD_INT 2
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 4
33345: NEG
33346: PUSH
33347: LD_INT 3
33349: NEG
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 4
33357: NEG
33358: PUSH
33359: LD_INT 4
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 2
33369: NEG
33370: PUSH
33371: LD_INT 4
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 4
33381: NEG
33382: PUSH
33383: LD_INT 2
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: LD_INT 4
33396: NEG
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 0
33404: PUSH
33405: LD_INT 5
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 1
33415: PUSH
33416: LD_INT 4
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 1
33426: PUSH
33427: LD_INT 3
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 0
33437: PUSH
33438: LD_INT 3
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 1
33448: NEG
33449: PUSH
33450: LD_INT 4
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 1
33460: NEG
33461: PUSH
33462: LD_INT 5
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 2
33472: PUSH
33473: LD_INT 3
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: LD_INT 5
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 3
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 3
33505: PUSH
33506: LD_INT 1
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 4
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 4
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 3
33536: PUSH
33537: LD_INT 1
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 2
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 2
33556: PUSH
33557: LD_INT 1
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 2
33567: PUSH
33568: LD_INT 2
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 4
33578: PUSH
33579: LD_INT 2
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 4
33588: PUSH
33589: LD_INT 4
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 4
33598: PUSH
33599: LD_INT 3
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 5
33608: PUSH
33609: LD_INT 4
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 5
33618: PUSH
33619: LD_INT 5
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 4
33628: PUSH
33629: LD_INT 5
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 3
33638: PUSH
33639: LD_INT 4
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 3
33648: PUSH
33649: LD_INT 3
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 5
33658: PUSH
33659: LD_INT 3
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 3
33668: PUSH
33669: LD_INT 5
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33723: LD_ADDR_VAR 0 33
33727: PUSH
33728: LD_INT 4
33730: NEG
33731: PUSH
33732: LD_INT 4
33734: NEG
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 4
33742: NEG
33743: PUSH
33744: LD_INT 5
33746: NEG
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 3
33754: NEG
33755: PUSH
33756: LD_INT 4
33758: NEG
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 3
33766: NEG
33767: PUSH
33768: LD_INT 3
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 4
33778: NEG
33779: PUSH
33780: LD_INT 3
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 5
33790: NEG
33791: PUSH
33792: LD_INT 4
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 5
33802: NEG
33803: PUSH
33804: LD_INT 5
33806: NEG
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 3
33814: NEG
33815: PUSH
33816: LD_INT 5
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 5
33826: NEG
33827: PUSH
33828: LD_INT 3
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: LD_INT 3
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: LD_INT 4
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: LD_INT 3
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: LD_INT 2
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: LD_INT 2
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 1
33893: NEG
33894: PUSH
33895: LD_INT 3
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 1
33905: NEG
33906: PUSH
33907: LD_INT 4
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 2
33917: PUSH
33918: LD_INT 2
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 2
33928: NEG
33929: PUSH
33930: LD_INT 4
33932: NEG
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 4
33940: PUSH
33941: LD_INT 0
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 4
33950: PUSH
33951: LD_INT 1
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 5
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 5
33971: PUSH
33972: LD_INT 1
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 4
33981: PUSH
33982: LD_INT 1
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 3
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 3
34001: PUSH
34002: LD_INT 1
34004: NEG
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 3
34012: PUSH
34013: LD_INT 2
34015: NEG
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 5
34023: PUSH
34024: LD_INT 2
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 3
34033: PUSH
34034: LD_INT 3
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 3
34043: PUSH
34044: LD_INT 2
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 4
34053: PUSH
34054: LD_INT 3
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 4
34063: PUSH
34064: LD_INT 4
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 3
34073: PUSH
34074: LD_INT 4
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 2
34083: PUSH
34084: LD_INT 3
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 2
34093: PUSH
34094: LD_INT 2
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 4
34103: PUSH
34104: LD_INT 2
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: LD_INT 4
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: LD_INT 4
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 0
34133: PUSH
34134: LD_INT 3
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: LD_INT 4
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: LD_INT 5
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: LD_INT 5
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 1
34173: NEG
34174: PUSH
34175: LD_INT 4
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 1
34184: NEG
34185: PUSH
34186: LD_INT 3
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 2
34195: PUSH
34196: LD_INT 5
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 2
34205: NEG
34206: PUSH
34207: LD_INT 3
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34261: LD_ADDR_VAR 0 34
34265: PUSH
34266: LD_INT 0
34268: PUSH
34269: LD_INT 4
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: LD_INT 5
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 1
34290: PUSH
34291: LD_INT 4
34293: NEG
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 1
34301: PUSH
34302: LD_INT 3
34304: NEG
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 0
34312: PUSH
34313: LD_INT 3
34315: NEG
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: NEG
34324: PUSH
34325: LD_INT 4
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: LD_INT 5
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 2
34347: PUSH
34348: LD_INT 3
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 2
34358: NEG
34359: PUSH
34360: LD_INT 5
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 3
34370: PUSH
34371: LD_INT 0
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 3
34380: PUSH
34381: LD_INT 1
34383: NEG
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 4
34391: PUSH
34392: LD_INT 0
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 4
34401: PUSH
34402: LD_INT 1
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 3
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: LD_INT 0
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 2
34431: PUSH
34432: LD_INT 1
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 2
34442: PUSH
34443: LD_INT 2
34445: NEG
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 4
34453: PUSH
34454: LD_INT 2
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 4
34463: PUSH
34464: LD_INT 4
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 4
34473: PUSH
34474: LD_INT 3
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 5
34483: PUSH
34484: LD_INT 4
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 5
34493: PUSH
34494: LD_INT 5
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 4
34503: PUSH
34504: LD_INT 5
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 3
34513: PUSH
34514: LD_INT 4
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: LD_INT 3
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 5
34533: PUSH
34534: LD_INT 3
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: LD_INT 5
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 0
34553: PUSH
34554: LD_INT 3
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 0
34563: PUSH
34564: LD_INT 2
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: LD_INT 3
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 1
34583: PUSH
34584: LD_INT 4
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: LD_INT 4
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: NEG
34604: PUSH
34605: LD_INT 3
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 1
34614: NEG
34615: PUSH
34616: LD_INT 2
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 2
34625: PUSH
34626: LD_INT 4
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 2
34635: NEG
34636: PUSH
34637: LD_INT 2
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 4
34646: NEG
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 4
34657: NEG
34658: PUSH
34659: LD_INT 1
34661: NEG
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 3
34669: NEG
34670: PUSH
34671: LD_INT 0
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 3
34680: NEG
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 4
34691: NEG
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 5
34702: NEG
34703: PUSH
34704: LD_INT 0
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 5
34713: NEG
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 5
34725: NEG
34726: PUSH
34727: LD_INT 2
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 3
34737: NEG
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: ST_TO_ADDR
// end ; end ;
34793: GO 34796
34795: POP
// case btype of b_depot , b_warehouse :
34796: LD_VAR 0 1
34800: PUSH
34801: LD_INT 0
34803: DOUBLE
34804: EQUAL
34805: IFTRUE 34815
34807: LD_INT 1
34809: DOUBLE
34810: EQUAL
34811: IFTRUE 34815
34813: GO 35016
34815: POP
// case nation of nation_american :
34816: LD_VAR 0 5
34820: PUSH
34821: LD_INT 1
34823: DOUBLE
34824: EQUAL
34825: IFTRUE 34829
34827: GO 34885
34829: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34830: LD_ADDR_VAR 0 9
34834: PUSH
34835: LD_VAR 0 11
34839: PUSH
34840: LD_VAR 0 12
34844: PUSH
34845: LD_VAR 0 13
34849: PUSH
34850: LD_VAR 0 14
34854: PUSH
34855: LD_VAR 0 15
34859: PUSH
34860: LD_VAR 0 16
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: PUSH
34873: LD_VAR 0 4
34877: PUSH
34878: LD_INT 1
34880: PLUS
34881: ARRAY
34882: ST_TO_ADDR
34883: GO 35014
34885: LD_INT 2
34887: DOUBLE
34888: EQUAL
34889: IFTRUE 34893
34891: GO 34949
34893: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34894: LD_ADDR_VAR 0 9
34898: PUSH
34899: LD_VAR 0 17
34903: PUSH
34904: LD_VAR 0 18
34908: PUSH
34909: LD_VAR 0 19
34913: PUSH
34914: LD_VAR 0 20
34918: PUSH
34919: LD_VAR 0 21
34923: PUSH
34924: LD_VAR 0 22
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: PUSH
34937: LD_VAR 0 4
34941: PUSH
34942: LD_INT 1
34944: PLUS
34945: ARRAY
34946: ST_TO_ADDR
34947: GO 35014
34949: LD_INT 3
34951: DOUBLE
34952: EQUAL
34953: IFTRUE 34957
34955: GO 35013
34957: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34958: LD_ADDR_VAR 0 9
34962: PUSH
34963: LD_VAR 0 23
34967: PUSH
34968: LD_VAR 0 24
34972: PUSH
34973: LD_VAR 0 25
34977: PUSH
34978: LD_VAR 0 26
34982: PUSH
34983: LD_VAR 0 27
34987: PUSH
34988: LD_VAR 0 28
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: PUSH
35001: LD_VAR 0 4
35005: PUSH
35006: LD_INT 1
35008: PLUS
35009: ARRAY
35010: ST_TO_ADDR
35011: GO 35014
35013: POP
35014: GO 35569
35016: LD_INT 2
35018: DOUBLE
35019: EQUAL
35020: IFTRUE 35030
35022: LD_INT 3
35024: DOUBLE
35025: EQUAL
35026: IFTRUE 35030
35028: GO 35086
35030: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35031: LD_ADDR_VAR 0 9
35035: PUSH
35036: LD_VAR 0 29
35040: PUSH
35041: LD_VAR 0 30
35045: PUSH
35046: LD_VAR 0 31
35050: PUSH
35051: LD_VAR 0 32
35055: PUSH
35056: LD_VAR 0 33
35060: PUSH
35061: LD_VAR 0 34
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: PUSH
35074: LD_VAR 0 4
35078: PUSH
35079: LD_INT 1
35081: PLUS
35082: ARRAY
35083: ST_TO_ADDR
35084: GO 35569
35086: LD_INT 16
35088: DOUBLE
35089: EQUAL
35090: IFTRUE 35148
35092: LD_INT 17
35094: DOUBLE
35095: EQUAL
35096: IFTRUE 35148
35098: LD_INT 18
35100: DOUBLE
35101: EQUAL
35102: IFTRUE 35148
35104: LD_INT 19
35106: DOUBLE
35107: EQUAL
35108: IFTRUE 35148
35110: LD_INT 22
35112: DOUBLE
35113: EQUAL
35114: IFTRUE 35148
35116: LD_INT 20
35118: DOUBLE
35119: EQUAL
35120: IFTRUE 35148
35122: LD_INT 21
35124: DOUBLE
35125: EQUAL
35126: IFTRUE 35148
35128: LD_INT 23
35130: DOUBLE
35131: EQUAL
35132: IFTRUE 35148
35134: LD_INT 24
35136: DOUBLE
35137: EQUAL
35138: IFTRUE 35148
35140: LD_INT 25
35142: DOUBLE
35143: EQUAL
35144: IFTRUE 35148
35146: GO 35204
35148: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35149: LD_ADDR_VAR 0 9
35153: PUSH
35154: LD_VAR 0 35
35158: PUSH
35159: LD_VAR 0 36
35163: PUSH
35164: LD_VAR 0 37
35168: PUSH
35169: LD_VAR 0 38
35173: PUSH
35174: LD_VAR 0 39
35178: PUSH
35179: LD_VAR 0 40
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: PUSH
35192: LD_VAR 0 4
35196: PUSH
35197: LD_INT 1
35199: PLUS
35200: ARRAY
35201: ST_TO_ADDR
35202: GO 35569
35204: LD_INT 6
35206: DOUBLE
35207: EQUAL
35208: IFTRUE 35260
35210: LD_INT 7
35212: DOUBLE
35213: EQUAL
35214: IFTRUE 35260
35216: LD_INT 8
35218: DOUBLE
35219: EQUAL
35220: IFTRUE 35260
35222: LD_INT 13
35224: DOUBLE
35225: EQUAL
35226: IFTRUE 35260
35228: LD_INT 12
35230: DOUBLE
35231: EQUAL
35232: IFTRUE 35260
35234: LD_INT 15
35236: DOUBLE
35237: EQUAL
35238: IFTRUE 35260
35240: LD_INT 11
35242: DOUBLE
35243: EQUAL
35244: IFTRUE 35260
35246: LD_INT 14
35248: DOUBLE
35249: EQUAL
35250: IFTRUE 35260
35252: LD_INT 10
35254: DOUBLE
35255: EQUAL
35256: IFTRUE 35260
35258: GO 35316
35260: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35261: LD_ADDR_VAR 0 9
35265: PUSH
35266: LD_VAR 0 41
35270: PUSH
35271: LD_VAR 0 42
35275: PUSH
35276: LD_VAR 0 43
35280: PUSH
35281: LD_VAR 0 44
35285: PUSH
35286: LD_VAR 0 45
35290: PUSH
35291: LD_VAR 0 46
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: PUSH
35304: LD_VAR 0 4
35308: PUSH
35309: LD_INT 1
35311: PLUS
35312: ARRAY
35313: ST_TO_ADDR
35314: GO 35569
35316: LD_INT 36
35318: DOUBLE
35319: EQUAL
35320: IFTRUE 35324
35322: GO 35380
35324: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35325: LD_ADDR_VAR 0 9
35329: PUSH
35330: LD_VAR 0 47
35334: PUSH
35335: LD_VAR 0 48
35339: PUSH
35340: LD_VAR 0 49
35344: PUSH
35345: LD_VAR 0 50
35349: PUSH
35350: LD_VAR 0 51
35354: PUSH
35355: LD_VAR 0 52
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: PUSH
35368: LD_VAR 0 4
35372: PUSH
35373: LD_INT 1
35375: PLUS
35376: ARRAY
35377: ST_TO_ADDR
35378: GO 35569
35380: LD_INT 4
35382: DOUBLE
35383: EQUAL
35384: IFTRUE 35406
35386: LD_INT 5
35388: DOUBLE
35389: EQUAL
35390: IFTRUE 35406
35392: LD_INT 34
35394: DOUBLE
35395: EQUAL
35396: IFTRUE 35406
35398: LD_INT 37
35400: DOUBLE
35401: EQUAL
35402: IFTRUE 35406
35404: GO 35462
35406: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35407: LD_ADDR_VAR 0 9
35411: PUSH
35412: LD_VAR 0 53
35416: PUSH
35417: LD_VAR 0 54
35421: PUSH
35422: LD_VAR 0 55
35426: PUSH
35427: LD_VAR 0 56
35431: PUSH
35432: LD_VAR 0 57
35436: PUSH
35437: LD_VAR 0 58
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: PUSH
35450: LD_VAR 0 4
35454: PUSH
35455: LD_INT 1
35457: PLUS
35458: ARRAY
35459: ST_TO_ADDR
35460: GO 35569
35462: LD_INT 31
35464: DOUBLE
35465: EQUAL
35466: IFTRUE 35512
35468: LD_INT 32
35470: DOUBLE
35471: EQUAL
35472: IFTRUE 35512
35474: LD_INT 33
35476: DOUBLE
35477: EQUAL
35478: IFTRUE 35512
35480: LD_INT 27
35482: DOUBLE
35483: EQUAL
35484: IFTRUE 35512
35486: LD_INT 26
35488: DOUBLE
35489: EQUAL
35490: IFTRUE 35512
35492: LD_INT 28
35494: DOUBLE
35495: EQUAL
35496: IFTRUE 35512
35498: LD_INT 29
35500: DOUBLE
35501: EQUAL
35502: IFTRUE 35512
35504: LD_INT 30
35506: DOUBLE
35507: EQUAL
35508: IFTRUE 35512
35510: GO 35568
35512: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35513: LD_ADDR_VAR 0 9
35517: PUSH
35518: LD_VAR 0 59
35522: PUSH
35523: LD_VAR 0 60
35527: PUSH
35528: LD_VAR 0 61
35532: PUSH
35533: LD_VAR 0 62
35537: PUSH
35538: LD_VAR 0 63
35542: PUSH
35543: LD_VAR 0 64
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: PUSH
35556: LD_VAR 0 4
35560: PUSH
35561: LD_INT 1
35563: PLUS
35564: ARRAY
35565: ST_TO_ADDR
35566: GO 35569
35568: POP
// temp_list2 = [ ] ;
35569: LD_ADDR_VAR 0 10
35573: PUSH
35574: EMPTY
35575: ST_TO_ADDR
// for i in temp_list do
35576: LD_ADDR_VAR 0 8
35580: PUSH
35581: LD_VAR 0 9
35585: PUSH
35586: FOR_IN
35587: IFFALSE 35639
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35589: LD_ADDR_VAR 0 10
35593: PUSH
35594: LD_VAR 0 10
35598: PUSH
35599: LD_VAR 0 8
35603: PUSH
35604: LD_INT 1
35606: ARRAY
35607: PUSH
35608: LD_VAR 0 2
35612: PLUS
35613: PUSH
35614: LD_VAR 0 8
35618: PUSH
35619: LD_INT 2
35621: ARRAY
35622: PUSH
35623: LD_VAR 0 3
35627: PLUS
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: EMPTY
35634: LIST
35635: ADD
35636: ST_TO_ADDR
35637: GO 35586
35639: POP
35640: POP
// result = temp_list2 ;
35641: LD_ADDR_VAR 0 7
35645: PUSH
35646: LD_VAR 0 10
35650: ST_TO_ADDR
// end ;
35651: LD_VAR 0 7
35655: RET
// export function EnemyInRange ( unit , dist ) ; begin
35656: LD_INT 0
35658: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35659: LD_ADDR_VAR 0 3
35663: PUSH
35664: LD_VAR 0 1
35668: PPUSH
35669: CALL_OW 255
35673: PPUSH
35674: LD_VAR 0 1
35678: PPUSH
35679: CALL_OW 250
35683: PPUSH
35684: LD_VAR 0 1
35688: PPUSH
35689: CALL_OW 251
35693: PPUSH
35694: LD_VAR 0 2
35698: PPUSH
35699: CALL 9029 0 4
35703: PUSH
35704: LD_INT 4
35706: ARRAY
35707: ST_TO_ADDR
// end ;
35708: LD_VAR 0 3
35712: RET
// export function PlayerSeeMe ( unit ) ; begin
35713: LD_INT 0
35715: PPUSH
// result := See ( your_side , unit ) ;
35716: LD_ADDR_VAR 0 2
35720: PUSH
35721: LD_OWVAR 2
35725: PPUSH
35726: LD_VAR 0 1
35730: PPUSH
35731: CALL_OW 292
35735: ST_TO_ADDR
// end ;
35736: LD_VAR 0 2
35740: RET
// export function ReverseDir ( unit ) ; begin
35741: LD_INT 0
35743: PPUSH
// if not unit then
35744: LD_VAR 0 1
35748: NOT
35749: IFFALSE 35753
// exit ;
35751: GO 35776
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35753: LD_ADDR_VAR 0 2
35757: PUSH
35758: LD_VAR 0 1
35762: PPUSH
35763: CALL_OW 254
35767: PUSH
35768: LD_INT 3
35770: PLUS
35771: PUSH
35772: LD_INT 6
35774: MOD
35775: ST_TO_ADDR
// end ;
35776: LD_VAR 0 2
35780: RET
// export function ReverseArray ( array ) ; var i ; begin
35781: LD_INT 0
35783: PPUSH
35784: PPUSH
// if not array then
35785: LD_VAR 0 1
35789: NOT
35790: IFFALSE 35794
// exit ;
35792: GO 35849
// result := [ ] ;
35794: LD_ADDR_VAR 0 2
35798: PUSH
35799: EMPTY
35800: ST_TO_ADDR
// for i := array downto 1 do
35801: LD_ADDR_VAR 0 3
35805: PUSH
35806: DOUBLE
35807: LD_VAR 0 1
35811: INC
35812: ST_TO_ADDR
35813: LD_INT 1
35815: PUSH
35816: FOR_DOWNTO
35817: IFFALSE 35847
// result := Join ( result , array [ i ] ) ;
35819: LD_ADDR_VAR 0 2
35823: PUSH
35824: LD_VAR 0 2
35828: PPUSH
35829: LD_VAR 0 1
35833: PUSH
35834: LD_VAR 0 3
35838: ARRAY
35839: PPUSH
35840: CALL 40494 0 2
35844: ST_TO_ADDR
35845: GO 35816
35847: POP
35848: POP
// end ;
35849: LD_VAR 0 2
35853: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35854: LD_INT 0
35856: PPUSH
35857: PPUSH
35858: PPUSH
35859: PPUSH
35860: PPUSH
35861: PPUSH
// if not unit or not hexes then
35862: LD_VAR 0 1
35866: NOT
35867: PUSH
35868: LD_VAR 0 2
35872: NOT
35873: OR
35874: IFFALSE 35878
// exit ;
35876: GO 36001
// dist := 9999 ;
35878: LD_ADDR_VAR 0 5
35882: PUSH
35883: LD_INT 9999
35885: ST_TO_ADDR
// for i = 1 to hexes do
35886: LD_ADDR_VAR 0 4
35890: PUSH
35891: DOUBLE
35892: LD_INT 1
35894: DEC
35895: ST_TO_ADDR
35896: LD_VAR 0 2
35900: PUSH
35901: FOR_TO
35902: IFFALSE 35989
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35904: LD_ADDR_VAR 0 6
35908: PUSH
35909: LD_VAR 0 1
35913: PPUSH
35914: LD_VAR 0 2
35918: PUSH
35919: LD_VAR 0 4
35923: ARRAY
35924: PUSH
35925: LD_INT 1
35927: ARRAY
35928: PPUSH
35929: LD_VAR 0 2
35933: PUSH
35934: LD_VAR 0 4
35938: ARRAY
35939: PUSH
35940: LD_INT 2
35942: ARRAY
35943: PPUSH
35944: CALL_OW 297
35948: ST_TO_ADDR
// if tdist < dist then
35949: LD_VAR 0 6
35953: PUSH
35954: LD_VAR 0 5
35958: LESS
35959: IFFALSE 35987
// begin hex := hexes [ i ] ;
35961: LD_ADDR_VAR 0 8
35965: PUSH
35966: LD_VAR 0 2
35970: PUSH
35971: LD_VAR 0 4
35975: ARRAY
35976: ST_TO_ADDR
// dist := tdist ;
35977: LD_ADDR_VAR 0 5
35981: PUSH
35982: LD_VAR 0 6
35986: ST_TO_ADDR
// end ; end ;
35987: GO 35901
35989: POP
35990: POP
// result := hex ;
35991: LD_ADDR_VAR 0 3
35995: PUSH
35996: LD_VAR 0 8
36000: ST_TO_ADDR
// end ;
36001: LD_VAR 0 3
36005: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36006: LD_INT 0
36008: PPUSH
36009: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36010: LD_VAR 0 1
36014: NOT
36015: PUSH
36016: LD_VAR 0 1
36020: PUSH
36021: LD_INT 21
36023: PUSH
36024: LD_INT 2
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 23
36033: PUSH
36034: LD_INT 2
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PPUSH
36045: CALL_OW 69
36049: IN
36050: NOT
36051: OR
36052: IFFALSE 36056
// exit ;
36054: GO 36103
// for i = 1 to 3 do
36056: LD_ADDR_VAR 0 3
36060: PUSH
36061: DOUBLE
36062: LD_INT 1
36064: DEC
36065: ST_TO_ADDR
36066: LD_INT 3
36068: PUSH
36069: FOR_TO
36070: IFFALSE 36101
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36072: LD_VAR 0 1
36076: PPUSH
36077: CALL_OW 250
36081: PPUSH
36082: LD_VAR 0 1
36086: PPUSH
36087: CALL_OW 251
36091: PPUSH
36092: LD_INT 1
36094: PPUSH
36095: CALL_OW 453
36099: GO 36069
36101: POP
36102: POP
// end ;
36103: LD_VAR 0 2
36107: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36108: LD_INT 0
36110: PPUSH
36111: PPUSH
36112: PPUSH
36113: PPUSH
36114: PPUSH
36115: PPUSH
// if not unit or not enemy_unit then
36116: LD_VAR 0 1
36120: NOT
36121: PUSH
36122: LD_VAR 0 2
36126: NOT
36127: OR
36128: IFFALSE 36132
// exit ;
36130: GO 36599
// if GetLives ( i ) < 250 then
36132: LD_VAR 0 4
36136: PPUSH
36137: CALL_OW 256
36141: PUSH
36142: LD_INT 250
36144: LESS
36145: IFFALSE 36158
// begin ComAutodestruct ( i ) ;
36147: LD_VAR 0 4
36151: PPUSH
36152: CALL 36006 0 1
// exit ;
36156: GO 36599
// end ; x := GetX ( enemy_unit ) ;
36158: LD_ADDR_VAR 0 7
36162: PUSH
36163: LD_VAR 0 2
36167: PPUSH
36168: CALL_OW 250
36172: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36173: LD_ADDR_VAR 0 8
36177: PUSH
36178: LD_VAR 0 2
36182: PPUSH
36183: CALL_OW 251
36187: ST_TO_ADDR
// if not x or not y then
36188: LD_VAR 0 7
36192: NOT
36193: PUSH
36194: LD_VAR 0 8
36198: NOT
36199: OR
36200: IFFALSE 36204
// exit ;
36202: GO 36599
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36204: LD_ADDR_VAR 0 6
36208: PUSH
36209: LD_VAR 0 7
36213: PPUSH
36214: LD_INT 0
36216: PPUSH
36217: LD_INT 4
36219: PPUSH
36220: CALL_OW 272
36224: PUSH
36225: LD_VAR 0 8
36229: PPUSH
36230: LD_INT 0
36232: PPUSH
36233: LD_INT 4
36235: PPUSH
36236: CALL_OW 273
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_VAR 0 7
36249: PPUSH
36250: LD_INT 1
36252: PPUSH
36253: LD_INT 4
36255: PPUSH
36256: CALL_OW 272
36260: PUSH
36261: LD_VAR 0 8
36265: PPUSH
36266: LD_INT 1
36268: PPUSH
36269: LD_INT 4
36271: PPUSH
36272: CALL_OW 273
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_VAR 0 7
36285: PPUSH
36286: LD_INT 2
36288: PPUSH
36289: LD_INT 4
36291: PPUSH
36292: CALL_OW 272
36296: PUSH
36297: LD_VAR 0 8
36301: PPUSH
36302: LD_INT 2
36304: PPUSH
36305: LD_INT 4
36307: PPUSH
36308: CALL_OW 273
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_VAR 0 7
36321: PPUSH
36322: LD_INT 3
36324: PPUSH
36325: LD_INT 4
36327: PPUSH
36328: CALL_OW 272
36332: PUSH
36333: LD_VAR 0 8
36337: PPUSH
36338: LD_INT 3
36340: PPUSH
36341: LD_INT 4
36343: PPUSH
36344: CALL_OW 273
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_VAR 0 7
36357: PPUSH
36358: LD_INT 4
36360: PPUSH
36361: LD_INT 4
36363: PPUSH
36364: CALL_OW 272
36368: PUSH
36369: LD_VAR 0 8
36373: PPUSH
36374: LD_INT 4
36376: PPUSH
36377: LD_INT 4
36379: PPUSH
36380: CALL_OW 273
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_VAR 0 7
36393: PPUSH
36394: LD_INT 5
36396: PPUSH
36397: LD_INT 4
36399: PPUSH
36400: CALL_OW 272
36404: PUSH
36405: LD_VAR 0 8
36409: PPUSH
36410: LD_INT 5
36412: PPUSH
36413: LD_INT 4
36415: PPUSH
36416: CALL_OW 273
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: ST_TO_ADDR
// for i = tmp downto 1 do
36433: LD_ADDR_VAR 0 4
36437: PUSH
36438: DOUBLE
36439: LD_VAR 0 6
36443: INC
36444: ST_TO_ADDR
36445: LD_INT 1
36447: PUSH
36448: FOR_DOWNTO
36449: IFFALSE 36550
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36451: LD_VAR 0 6
36455: PUSH
36456: LD_VAR 0 4
36460: ARRAY
36461: PUSH
36462: LD_INT 1
36464: ARRAY
36465: PPUSH
36466: LD_VAR 0 6
36470: PUSH
36471: LD_VAR 0 4
36475: ARRAY
36476: PUSH
36477: LD_INT 2
36479: ARRAY
36480: PPUSH
36481: CALL_OW 488
36485: NOT
36486: PUSH
36487: LD_VAR 0 6
36491: PUSH
36492: LD_VAR 0 4
36496: ARRAY
36497: PUSH
36498: LD_INT 1
36500: ARRAY
36501: PPUSH
36502: LD_VAR 0 6
36506: PUSH
36507: LD_VAR 0 4
36511: ARRAY
36512: PUSH
36513: LD_INT 2
36515: ARRAY
36516: PPUSH
36517: CALL_OW 428
36521: PUSH
36522: LD_INT 0
36524: NONEQUAL
36525: OR
36526: IFFALSE 36548
// tmp := Delete ( tmp , i ) ;
36528: LD_ADDR_VAR 0 6
36532: PUSH
36533: LD_VAR 0 6
36537: PPUSH
36538: LD_VAR 0 4
36542: PPUSH
36543: CALL_OW 3
36547: ST_TO_ADDR
36548: GO 36448
36550: POP
36551: POP
// j := GetClosestHex ( unit , tmp ) ;
36552: LD_ADDR_VAR 0 5
36556: PUSH
36557: LD_VAR 0 1
36561: PPUSH
36562: LD_VAR 0 6
36566: PPUSH
36567: CALL 35854 0 2
36571: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36572: LD_VAR 0 1
36576: PPUSH
36577: LD_VAR 0 5
36581: PUSH
36582: LD_INT 1
36584: ARRAY
36585: PPUSH
36586: LD_VAR 0 5
36590: PUSH
36591: LD_INT 2
36593: ARRAY
36594: PPUSH
36595: CALL_OW 111
// end ;
36599: LD_VAR 0 3
36603: RET
// export function PrepareApemanSoldier ( ) ; begin
36604: LD_INT 0
36606: PPUSH
// uc_nation := 0 ;
36607: LD_ADDR_OWVAR 21
36611: PUSH
36612: LD_INT 0
36614: ST_TO_ADDR
// hc_sex := sex_male ;
36615: LD_ADDR_OWVAR 27
36619: PUSH
36620: LD_INT 1
36622: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36623: LD_ADDR_OWVAR 28
36627: PUSH
36628: LD_INT 15
36630: ST_TO_ADDR
// hc_gallery :=  ;
36631: LD_ADDR_OWVAR 33
36635: PUSH
36636: LD_STRING 
36638: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36639: LD_ADDR_OWVAR 31
36643: PUSH
36644: LD_INT 0
36646: PPUSH
36647: LD_INT 3
36649: PPUSH
36650: CALL_OW 12
36654: PUSH
36655: LD_INT 0
36657: PPUSH
36658: LD_INT 3
36660: PPUSH
36661: CALL_OW 12
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: ST_TO_ADDR
// end ;
36678: LD_VAR 0 1
36682: RET
// export function PrepareApemanEngineer ( ) ; begin
36683: LD_INT 0
36685: PPUSH
// uc_nation := 0 ;
36686: LD_ADDR_OWVAR 21
36690: PUSH
36691: LD_INT 0
36693: ST_TO_ADDR
// hc_sex := sex_male ;
36694: LD_ADDR_OWVAR 27
36698: PUSH
36699: LD_INT 1
36701: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36702: LD_ADDR_OWVAR 28
36706: PUSH
36707: LD_INT 16
36709: ST_TO_ADDR
// hc_gallery :=  ;
36710: LD_ADDR_OWVAR 33
36714: PUSH
36715: LD_STRING 
36717: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36718: LD_ADDR_OWVAR 31
36722: PUSH
36723: LD_INT 0
36725: PPUSH
36726: LD_INT 3
36728: PPUSH
36729: CALL_OW 12
36733: PUSH
36734: LD_INT 0
36736: PPUSH
36737: LD_INT 3
36739: PPUSH
36740: CALL_OW 12
36744: PUSH
36745: LD_INT 0
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: ST_TO_ADDR
// end ;
36757: LD_VAR 0 1
36761: RET
// export function PrepareApeman ( agressivity ) ; begin
36762: LD_INT 0
36764: PPUSH
// uc_side := 0 ;
36765: LD_ADDR_OWVAR 20
36769: PUSH
36770: LD_INT 0
36772: ST_TO_ADDR
// uc_nation := 0 ;
36773: LD_ADDR_OWVAR 21
36777: PUSH
36778: LD_INT 0
36780: ST_TO_ADDR
// hc_sex := sex_male ;
36781: LD_ADDR_OWVAR 27
36785: PUSH
36786: LD_INT 1
36788: ST_TO_ADDR
// hc_class := class_apeman ;
36789: LD_ADDR_OWVAR 28
36793: PUSH
36794: LD_INT 12
36796: ST_TO_ADDR
// hc_gallery :=  ;
36797: LD_ADDR_OWVAR 33
36801: PUSH
36802: LD_STRING 
36804: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36805: LD_ADDR_OWVAR 35
36809: PUSH
36810: LD_VAR 0 1
36814: NEG
36815: PPUSH
36816: LD_VAR 0 1
36820: PPUSH
36821: CALL_OW 12
36825: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36826: LD_ADDR_OWVAR 31
36830: PUSH
36831: LD_INT 0
36833: PPUSH
36834: LD_INT 3
36836: PPUSH
36837: CALL_OW 12
36841: PUSH
36842: LD_INT 0
36844: PPUSH
36845: LD_INT 3
36847: PPUSH
36848: CALL_OW 12
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: LD_INT 0
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: ST_TO_ADDR
// end ;
36865: LD_VAR 0 2
36869: RET
// export function PrepareTiger ( agressivity ) ; begin
36870: LD_INT 0
36872: PPUSH
// uc_side := 0 ;
36873: LD_ADDR_OWVAR 20
36877: PUSH
36878: LD_INT 0
36880: ST_TO_ADDR
// uc_nation := 0 ;
36881: LD_ADDR_OWVAR 21
36885: PUSH
36886: LD_INT 0
36888: ST_TO_ADDR
// hc_class := class_tiger ;
36889: LD_ADDR_OWVAR 28
36893: PUSH
36894: LD_INT 14
36896: ST_TO_ADDR
// hc_gallery :=  ;
36897: LD_ADDR_OWVAR 33
36901: PUSH
36902: LD_STRING 
36904: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36905: LD_ADDR_OWVAR 35
36909: PUSH
36910: LD_VAR 0 1
36914: NEG
36915: PPUSH
36916: LD_VAR 0 1
36920: PPUSH
36921: CALL_OW 12
36925: ST_TO_ADDR
// end ;
36926: LD_VAR 0 2
36930: RET
// export function PrepareEnchidna ( ) ; begin
36931: LD_INT 0
36933: PPUSH
// uc_side := 0 ;
36934: LD_ADDR_OWVAR 20
36938: PUSH
36939: LD_INT 0
36941: ST_TO_ADDR
// uc_nation := 0 ;
36942: LD_ADDR_OWVAR 21
36946: PUSH
36947: LD_INT 0
36949: ST_TO_ADDR
// hc_class := class_baggie ;
36950: LD_ADDR_OWVAR 28
36954: PUSH
36955: LD_INT 13
36957: ST_TO_ADDR
// hc_gallery :=  ;
36958: LD_ADDR_OWVAR 33
36962: PUSH
36963: LD_STRING 
36965: ST_TO_ADDR
// end ;
36966: LD_VAR 0 1
36970: RET
// export function PrepareFrog ( ) ; begin
36971: LD_INT 0
36973: PPUSH
// uc_side := 0 ;
36974: LD_ADDR_OWVAR 20
36978: PUSH
36979: LD_INT 0
36981: ST_TO_ADDR
// uc_nation := 0 ;
36982: LD_ADDR_OWVAR 21
36986: PUSH
36987: LD_INT 0
36989: ST_TO_ADDR
// hc_class := class_frog ;
36990: LD_ADDR_OWVAR 28
36994: PUSH
36995: LD_INT 19
36997: ST_TO_ADDR
// hc_gallery :=  ;
36998: LD_ADDR_OWVAR 33
37002: PUSH
37003: LD_STRING 
37005: ST_TO_ADDR
// end ;
37006: LD_VAR 0 1
37010: RET
// export function PrepareFish ( ) ; begin
37011: LD_INT 0
37013: PPUSH
// uc_side := 0 ;
37014: LD_ADDR_OWVAR 20
37018: PUSH
37019: LD_INT 0
37021: ST_TO_ADDR
// uc_nation := 0 ;
37022: LD_ADDR_OWVAR 21
37026: PUSH
37027: LD_INT 0
37029: ST_TO_ADDR
// hc_class := class_fish ;
37030: LD_ADDR_OWVAR 28
37034: PUSH
37035: LD_INT 20
37037: ST_TO_ADDR
// hc_gallery :=  ;
37038: LD_ADDR_OWVAR 33
37042: PUSH
37043: LD_STRING 
37045: ST_TO_ADDR
// end ;
37046: LD_VAR 0 1
37050: RET
// export function PrepareBird ( ) ; begin
37051: LD_INT 0
37053: PPUSH
// uc_side := 0 ;
37054: LD_ADDR_OWVAR 20
37058: PUSH
37059: LD_INT 0
37061: ST_TO_ADDR
// uc_nation := 0 ;
37062: LD_ADDR_OWVAR 21
37066: PUSH
37067: LD_INT 0
37069: ST_TO_ADDR
// hc_class := class_phororhacos ;
37070: LD_ADDR_OWVAR 28
37074: PUSH
37075: LD_INT 18
37077: ST_TO_ADDR
// hc_gallery :=  ;
37078: LD_ADDR_OWVAR 33
37082: PUSH
37083: LD_STRING 
37085: ST_TO_ADDR
// end ;
37086: LD_VAR 0 1
37090: RET
// export function PrepareHorse ( ) ; begin
37091: LD_INT 0
37093: PPUSH
// uc_side := 0 ;
37094: LD_ADDR_OWVAR 20
37098: PUSH
37099: LD_INT 0
37101: ST_TO_ADDR
// uc_nation := 0 ;
37102: LD_ADDR_OWVAR 21
37106: PUSH
37107: LD_INT 0
37109: ST_TO_ADDR
// hc_class := class_horse ;
37110: LD_ADDR_OWVAR 28
37114: PUSH
37115: LD_INT 21
37117: ST_TO_ADDR
// hc_gallery :=  ;
37118: LD_ADDR_OWVAR 33
37122: PUSH
37123: LD_STRING 
37125: ST_TO_ADDR
// end ;
37126: LD_VAR 0 1
37130: RET
// export function PrepareMastodont ( ) ; begin
37131: LD_INT 0
37133: PPUSH
// uc_side := 0 ;
37134: LD_ADDR_OWVAR 20
37138: PUSH
37139: LD_INT 0
37141: ST_TO_ADDR
// uc_nation := 0 ;
37142: LD_ADDR_OWVAR 21
37146: PUSH
37147: LD_INT 0
37149: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37150: LD_ADDR_OWVAR 37
37154: PUSH
37155: LD_INT 31
37157: ST_TO_ADDR
// vc_control := control_rider ;
37158: LD_ADDR_OWVAR 38
37162: PUSH
37163: LD_INT 4
37165: ST_TO_ADDR
// end ;
37166: LD_VAR 0 1
37170: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37171: LD_INT 0
37173: PPUSH
37174: PPUSH
37175: PPUSH
// uc_side = 0 ;
37176: LD_ADDR_OWVAR 20
37180: PUSH
37181: LD_INT 0
37183: ST_TO_ADDR
// uc_nation = 0 ;
37184: LD_ADDR_OWVAR 21
37188: PUSH
37189: LD_INT 0
37191: ST_TO_ADDR
// InitHc_All ( ) ;
37192: CALL_OW 584
// InitVc ;
37196: CALL_OW 20
// if mastodonts then
37200: LD_VAR 0 6
37204: IFFALSE 37271
// for i = 1 to mastodonts do
37206: LD_ADDR_VAR 0 11
37210: PUSH
37211: DOUBLE
37212: LD_INT 1
37214: DEC
37215: ST_TO_ADDR
37216: LD_VAR 0 6
37220: PUSH
37221: FOR_TO
37222: IFFALSE 37269
// begin vc_chassis := 31 ;
37224: LD_ADDR_OWVAR 37
37228: PUSH
37229: LD_INT 31
37231: ST_TO_ADDR
// vc_control := control_rider ;
37232: LD_ADDR_OWVAR 38
37236: PUSH
37237: LD_INT 4
37239: ST_TO_ADDR
// animal := CreateVehicle ;
37240: LD_ADDR_VAR 0 12
37244: PUSH
37245: CALL_OW 45
37249: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37250: LD_VAR 0 12
37254: PPUSH
37255: LD_VAR 0 8
37259: PPUSH
37260: LD_INT 0
37262: PPUSH
37263: CALL 39399 0 3
// end ;
37267: GO 37221
37269: POP
37270: POP
// if horses then
37271: LD_VAR 0 5
37275: IFFALSE 37342
// for i = 1 to horses do
37277: LD_ADDR_VAR 0 11
37281: PUSH
37282: DOUBLE
37283: LD_INT 1
37285: DEC
37286: ST_TO_ADDR
37287: LD_VAR 0 5
37291: PUSH
37292: FOR_TO
37293: IFFALSE 37340
// begin hc_class := 21 ;
37295: LD_ADDR_OWVAR 28
37299: PUSH
37300: LD_INT 21
37302: ST_TO_ADDR
// hc_gallery :=  ;
37303: LD_ADDR_OWVAR 33
37307: PUSH
37308: LD_STRING 
37310: ST_TO_ADDR
// animal := CreateHuman ;
37311: LD_ADDR_VAR 0 12
37315: PUSH
37316: CALL_OW 44
37320: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37321: LD_VAR 0 12
37325: PPUSH
37326: LD_VAR 0 8
37330: PPUSH
37331: LD_INT 0
37333: PPUSH
37334: CALL 39399 0 3
// end ;
37338: GO 37292
37340: POP
37341: POP
// if birds then
37342: LD_VAR 0 1
37346: IFFALSE 37413
// for i = 1 to birds do
37348: LD_ADDR_VAR 0 11
37352: PUSH
37353: DOUBLE
37354: LD_INT 1
37356: DEC
37357: ST_TO_ADDR
37358: LD_VAR 0 1
37362: PUSH
37363: FOR_TO
37364: IFFALSE 37411
// begin hc_class := 18 ;
37366: LD_ADDR_OWVAR 28
37370: PUSH
37371: LD_INT 18
37373: ST_TO_ADDR
// hc_gallery =  ;
37374: LD_ADDR_OWVAR 33
37378: PUSH
37379: LD_STRING 
37381: ST_TO_ADDR
// animal := CreateHuman ;
37382: LD_ADDR_VAR 0 12
37386: PUSH
37387: CALL_OW 44
37391: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37392: LD_VAR 0 12
37396: PPUSH
37397: LD_VAR 0 8
37401: PPUSH
37402: LD_INT 0
37404: PPUSH
37405: CALL 39399 0 3
// end ;
37409: GO 37363
37411: POP
37412: POP
// if tigers then
37413: LD_VAR 0 2
37417: IFFALSE 37501
// for i = 1 to tigers do
37419: LD_ADDR_VAR 0 11
37423: PUSH
37424: DOUBLE
37425: LD_INT 1
37427: DEC
37428: ST_TO_ADDR
37429: LD_VAR 0 2
37433: PUSH
37434: FOR_TO
37435: IFFALSE 37499
// begin hc_class = class_tiger ;
37437: LD_ADDR_OWVAR 28
37441: PUSH
37442: LD_INT 14
37444: ST_TO_ADDR
// hc_gallery =  ;
37445: LD_ADDR_OWVAR 33
37449: PUSH
37450: LD_STRING 
37452: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37453: LD_ADDR_OWVAR 35
37457: PUSH
37458: LD_INT 7
37460: NEG
37461: PPUSH
37462: LD_INT 7
37464: PPUSH
37465: CALL_OW 12
37469: ST_TO_ADDR
// animal := CreateHuman ;
37470: LD_ADDR_VAR 0 12
37474: PUSH
37475: CALL_OW 44
37479: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37480: LD_VAR 0 12
37484: PPUSH
37485: LD_VAR 0 8
37489: PPUSH
37490: LD_INT 0
37492: PPUSH
37493: CALL 39399 0 3
// end ;
37497: GO 37434
37499: POP
37500: POP
// if apemans then
37501: LD_VAR 0 3
37505: IFFALSE 37628
// for i = 1 to apemans do
37507: LD_ADDR_VAR 0 11
37511: PUSH
37512: DOUBLE
37513: LD_INT 1
37515: DEC
37516: ST_TO_ADDR
37517: LD_VAR 0 3
37521: PUSH
37522: FOR_TO
37523: IFFALSE 37626
// begin hc_class = class_apeman ;
37525: LD_ADDR_OWVAR 28
37529: PUSH
37530: LD_INT 12
37532: ST_TO_ADDR
// hc_gallery =  ;
37533: LD_ADDR_OWVAR 33
37537: PUSH
37538: LD_STRING 
37540: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37541: LD_ADDR_OWVAR 35
37545: PUSH
37546: LD_INT 2
37548: NEG
37549: PPUSH
37550: LD_INT 2
37552: PPUSH
37553: CALL_OW 12
37557: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37558: LD_ADDR_OWVAR 31
37562: PUSH
37563: LD_INT 1
37565: PPUSH
37566: LD_INT 3
37568: PPUSH
37569: CALL_OW 12
37573: PUSH
37574: LD_INT 1
37576: PPUSH
37577: LD_INT 3
37579: PPUSH
37580: CALL_OW 12
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: ST_TO_ADDR
// animal := CreateHuman ;
37597: LD_ADDR_VAR 0 12
37601: PUSH
37602: CALL_OW 44
37606: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37607: LD_VAR 0 12
37611: PPUSH
37612: LD_VAR 0 8
37616: PPUSH
37617: LD_INT 0
37619: PPUSH
37620: CALL 39399 0 3
// end ;
37624: GO 37522
37626: POP
37627: POP
// if enchidnas then
37628: LD_VAR 0 4
37632: IFFALSE 37699
// for i = 1 to enchidnas do
37634: LD_ADDR_VAR 0 11
37638: PUSH
37639: DOUBLE
37640: LD_INT 1
37642: DEC
37643: ST_TO_ADDR
37644: LD_VAR 0 4
37648: PUSH
37649: FOR_TO
37650: IFFALSE 37697
// begin hc_class = 13 ;
37652: LD_ADDR_OWVAR 28
37656: PUSH
37657: LD_INT 13
37659: ST_TO_ADDR
// hc_gallery =  ;
37660: LD_ADDR_OWVAR 33
37664: PUSH
37665: LD_STRING 
37667: ST_TO_ADDR
// animal := CreateHuman ;
37668: LD_ADDR_VAR 0 12
37672: PUSH
37673: CALL_OW 44
37677: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37678: LD_VAR 0 12
37682: PPUSH
37683: LD_VAR 0 8
37687: PPUSH
37688: LD_INT 0
37690: PPUSH
37691: CALL 39399 0 3
// end ;
37695: GO 37649
37697: POP
37698: POP
// if fishes then
37699: LD_VAR 0 7
37703: IFFALSE 37770
// for i = 1 to fishes do
37705: LD_ADDR_VAR 0 11
37709: PUSH
37710: DOUBLE
37711: LD_INT 1
37713: DEC
37714: ST_TO_ADDR
37715: LD_VAR 0 7
37719: PUSH
37720: FOR_TO
37721: IFFALSE 37768
// begin hc_class = 20 ;
37723: LD_ADDR_OWVAR 28
37727: PUSH
37728: LD_INT 20
37730: ST_TO_ADDR
// hc_gallery =  ;
37731: LD_ADDR_OWVAR 33
37735: PUSH
37736: LD_STRING 
37738: ST_TO_ADDR
// animal := CreateHuman ;
37739: LD_ADDR_VAR 0 12
37743: PUSH
37744: CALL_OW 44
37748: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37749: LD_VAR 0 12
37753: PPUSH
37754: LD_VAR 0 9
37758: PPUSH
37759: LD_INT 0
37761: PPUSH
37762: CALL 39399 0 3
// end ;
37766: GO 37720
37768: POP
37769: POP
// end ;
37770: LD_VAR 0 10
37774: RET
// export function WantHeal ( sci , unit ) ; begin
37775: LD_INT 0
37777: PPUSH
// if GetTaskList ( sci ) > 0 then
37778: LD_VAR 0 1
37782: PPUSH
37783: CALL_OW 437
37787: PUSH
37788: LD_INT 0
37790: GREATER
37791: IFFALSE 37861
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37793: LD_VAR 0 1
37797: PPUSH
37798: CALL_OW 437
37802: PUSH
37803: LD_INT 1
37805: ARRAY
37806: PUSH
37807: LD_INT 1
37809: ARRAY
37810: PUSH
37811: LD_STRING l
37813: EQUAL
37814: PUSH
37815: LD_VAR 0 1
37819: PPUSH
37820: CALL_OW 437
37824: PUSH
37825: LD_INT 1
37827: ARRAY
37828: PUSH
37829: LD_INT 4
37831: ARRAY
37832: PUSH
37833: LD_VAR 0 2
37837: EQUAL
37838: AND
37839: IFFALSE 37851
// result := true else
37841: LD_ADDR_VAR 0 3
37845: PUSH
37846: LD_INT 1
37848: ST_TO_ADDR
37849: GO 37859
// result := false ;
37851: LD_ADDR_VAR 0 3
37855: PUSH
37856: LD_INT 0
37858: ST_TO_ADDR
// end else
37859: GO 37869
// result := false ;
37861: LD_ADDR_VAR 0 3
37865: PUSH
37866: LD_INT 0
37868: ST_TO_ADDR
// end ;
37869: LD_VAR 0 3
37873: RET
// export function HealTarget ( sci ) ; begin
37874: LD_INT 0
37876: PPUSH
// if not sci then
37877: LD_VAR 0 1
37881: NOT
37882: IFFALSE 37886
// exit ;
37884: GO 37951
// result := 0 ;
37886: LD_ADDR_VAR 0 2
37890: PUSH
37891: LD_INT 0
37893: ST_TO_ADDR
// if GetTaskList ( sci ) then
37894: LD_VAR 0 1
37898: PPUSH
37899: CALL_OW 437
37903: IFFALSE 37951
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37905: LD_VAR 0 1
37909: PPUSH
37910: CALL_OW 437
37914: PUSH
37915: LD_INT 1
37917: ARRAY
37918: PUSH
37919: LD_INT 1
37921: ARRAY
37922: PUSH
37923: LD_STRING l
37925: EQUAL
37926: IFFALSE 37951
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37928: LD_ADDR_VAR 0 2
37932: PUSH
37933: LD_VAR 0 1
37937: PPUSH
37938: CALL_OW 437
37942: PUSH
37943: LD_INT 1
37945: ARRAY
37946: PUSH
37947: LD_INT 4
37949: ARRAY
37950: ST_TO_ADDR
// end ;
37951: LD_VAR 0 2
37955: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37956: LD_INT 0
37958: PPUSH
37959: PPUSH
37960: PPUSH
37961: PPUSH
// if not base_units then
37962: LD_VAR 0 1
37966: NOT
37967: IFFALSE 37971
// exit ;
37969: GO 38058
// result := false ;
37971: LD_ADDR_VAR 0 2
37975: PUSH
37976: LD_INT 0
37978: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37979: LD_ADDR_VAR 0 5
37983: PUSH
37984: LD_VAR 0 1
37988: PPUSH
37989: LD_INT 21
37991: PUSH
37992: LD_INT 3
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PPUSH
37999: CALL_OW 72
38003: ST_TO_ADDR
// if not tmp then
38004: LD_VAR 0 5
38008: NOT
38009: IFFALSE 38013
// exit ;
38011: GO 38058
// for i in tmp do
38013: LD_ADDR_VAR 0 3
38017: PUSH
38018: LD_VAR 0 5
38022: PUSH
38023: FOR_IN
38024: IFFALSE 38056
// begin result := EnemyInRange ( i , 22 ) ;
38026: LD_ADDR_VAR 0 2
38030: PUSH
38031: LD_VAR 0 3
38035: PPUSH
38036: LD_INT 22
38038: PPUSH
38039: CALL 35656 0 2
38043: ST_TO_ADDR
// if result then
38044: LD_VAR 0 2
38048: IFFALSE 38054
// exit ;
38050: POP
38051: POP
38052: GO 38058
// end ;
38054: GO 38023
38056: POP
38057: POP
// end ;
38058: LD_VAR 0 2
38062: RET
// export function FilterByTag ( units , tag ) ; begin
38063: LD_INT 0
38065: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38066: LD_ADDR_VAR 0 3
38070: PUSH
38071: LD_VAR 0 1
38075: PPUSH
38076: LD_INT 120
38078: PUSH
38079: LD_VAR 0 2
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PPUSH
38088: CALL_OW 72
38092: ST_TO_ADDR
// end ;
38093: LD_VAR 0 3
38097: RET
// export function IsDriver ( un ) ; begin
38098: LD_INT 0
38100: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38101: LD_ADDR_VAR 0 2
38105: PUSH
38106: LD_VAR 0 1
38110: PUSH
38111: LD_INT 55
38113: PUSH
38114: EMPTY
38115: LIST
38116: PPUSH
38117: CALL_OW 69
38121: IN
38122: ST_TO_ADDR
// end ;
38123: LD_VAR 0 2
38127: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38128: LD_INT 0
38130: PPUSH
38131: PPUSH
// list := [ ] ;
38132: LD_ADDR_VAR 0 5
38136: PUSH
38137: EMPTY
38138: ST_TO_ADDR
// case d of 0 :
38139: LD_VAR 0 3
38143: PUSH
38144: LD_INT 0
38146: DOUBLE
38147: EQUAL
38148: IFTRUE 38152
38150: GO 38285
38152: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38153: LD_ADDR_VAR 0 5
38157: PUSH
38158: LD_VAR 0 1
38162: PUSH
38163: LD_INT 4
38165: MINUS
38166: PUSH
38167: LD_VAR 0 2
38171: PUSH
38172: LD_INT 4
38174: MINUS
38175: PUSH
38176: LD_INT 2
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: LIST
38183: PUSH
38184: LD_VAR 0 1
38188: PUSH
38189: LD_INT 3
38191: MINUS
38192: PUSH
38193: LD_VAR 0 2
38197: PUSH
38198: LD_INT 1
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: LIST
38205: PUSH
38206: LD_VAR 0 1
38210: PUSH
38211: LD_INT 4
38213: PLUS
38214: PUSH
38215: LD_VAR 0 2
38219: PUSH
38220: LD_INT 4
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: PUSH
38228: LD_VAR 0 1
38232: PUSH
38233: LD_INT 3
38235: PLUS
38236: PUSH
38237: LD_VAR 0 2
38241: PUSH
38242: LD_INT 3
38244: PLUS
38245: PUSH
38246: LD_INT 5
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: LIST
38253: PUSH
38254: LD_VAR 0 1
38258: PUSH
38259: LD_VAR 0 2
38263: PUSH
38264: LD_INT 4
38266: PLUS
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: LIST
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: ST_TO_ADDR
// end ; 1 :
38283: GO 38983
38285: LD_INT 1
38287: DOUBLE
38288: EQUAL
38289: IFTRUE 38293
38291: GO 38426
38293: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38294: LD_ADDR_VAR 0 5
38298: PUSH
38299: LD_VAR 0 1
38303: PUSH
38304: LD_VAR 0 2
38308: PUSH
38309: LD_INT 4
38311: MINUS
38312: PUSH
38313: LD_INT 3
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: LIST
38320: PUSH
38321: LD_VAR 0 1
38325: PUSH
38326: LD_INT 3
38328: MINUS
38329: PUSH
38330: LD_VAR 0 2
38334: PUSH
38335: LD_INT 3
38337: MINUS
38338: PUSH
38339: LD_INT 2
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: LIST
38346: PUSH
38347: LD_VAR 0 1
38351: PUSH
38352: LD_INT 4
38354: MINUS
38355: PUSH
38356: LD_VAR 0 2
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: LIST
38368: PUSH
38369: LD_VAR 0 1
38373: PUSH
38374: LD_VAR 0 2
38378: PUSH
38379: LD_INT 3
38381: PLUS
38382: PUSH
38383: LD_INT 0
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: LIST
38390: PUSH
38391: LD_VAR 0 1
38395: PUSH
38396: LD_INT 4
38398: PLUS
38399: PUSH
38400: LD_VAR 0 2
38404: PUSH
38405: LD_INT 4
38407: PLUS
38408: PUSH
38409: LD_INT 5
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: LIST
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: ST_TO_ADDR
// end ; 2 :
38424: GO 38983
38426: LD_INT 2
38428: DOUBLE
38429: EQUAL
38430: IFTRUE 38434
38432: GO 38563
38434: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38435: LD_ADDR_VAR 0 5
38439: PUSH
38440: LD_VAR 0 1
38444: PUSH
38445: LD_VAR 0 2
38449: PUSH
38450: LD_INT 3
38452: MINUS
38453: PUSH
38454: LD_INT 3
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: LIST
38461: PUSH
38462: LD_VAR 0 1
38466: PUSH
38467: LD_INT 4
38469: PLUS
38470: PUSH
38471: LD_VAR 0 2
38475: PUSH
38476: LD_INT 4
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: LIST
38483: PUSH
38484: LD_VAR 0 1
38488: PUSH
38489: LD_VAR 0 2
38493: PUSH
38494: LD_INT 4
38496: PLUS
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: LIST
38505: PUSH
38506: LD_VAR 0 1
38510: PUSH
38511: LD_INT 3
38513: MINUS
38514: PUSH
38515: LD_VAR 0 2
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: LIST
38527: PUSH
38528: LD_VAR 0 1
38532: PUSH
38533: LD_INT 4
38535: MINUS
38536: PUSH
38537: LD_VAR 0 2
38541: PUSH
38542: LD_INT 4
38544: MINUS
38545: PUSH
38546: LD_INT 2
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: LIST
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: ST_TO_ADDR
// end ; 3 :
38561: GO 38983
38563: LD_INT 3
38565: DOUBLE
38566: EQUAL
38567: IFTRUE 38571
38569: GO 38704
38571: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38572: LD_ADDR_VAR 0 5
38576: PUSH
38577: LD_VAR 0 1
38581: PUSH
38582: LD_INT 3
38584: PLUS
38585: PUSH
38586: LD_VAR 0 2
38590: PUSH
38591: LD_INT 4
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: LIST
38598: PUSH
38599: LD_VAR 0 1
38603: PUSH
38604: LD_INT 4
38606: PLUS
38607: PUSH
38608: LD_VAR 0 2
38612: PUSH
38613: LD_INT 4
38615: PLUS
38616: PUSH
38617: LD_INT 5
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: LIST
38624: PUSH
38625: LD_VAR 0 1
38629: PUSH
38630: LD_INT 4
38632: MINUS
38633: PUSH
38634: LD_VAR 0 2
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: LIST
38646: PUSH
38647: LD_VAR 0 1
38651: PUSH
38652: LD_VAR 0 2
38656: PUSH
38657: LD_INT 4
38659: MINUS
38660: PUSH
38661: LD_INT 3
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: PUSH
38669: LD_VAR 0 1
38673: PUSH
38674: LD_INT 3
38676: MINUS
38677: PUSH
38678: LD_VAR 0 2
38682: PUSH
38683: LD_INT 3
38685: MINUS
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: LIST
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: ST_TO_ADDR
// end ; 4 :
38702: GO 38983
38704: LD_INT 4
38706: DOUBLE
38707: EQUAL
38708: IFTRUE 38712
38710: GO 38845
38712: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38713: LD_ADDR_VAR 0 5
38717: PUSH
38718: LD_VAR 0 1
38722: PUSH
38723: LD_VAR 0 2
38727: PUSH
38728: LD_INT 4
38730: PLUS
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: LIST
38739: PUSH
38740: LD_VAR 0 1
38744: PUSH
38745: LD_INT 3
38747: PLUS
38748: PUSH
38749: LD_VAR 0 2
38753: PUSH
38754: LD_INT 3
38756: PLUS
38757: PUSH
38758: LD_INT 5
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: LIST
38765: PUSH
38766: LD_VAR 0 1
38770: PUSH
38771: LD_INT 4
38773: PLUS
38774: PUSH
38775: LD_VAR 0 2
38779: PUSH
38780: LD_INT 4
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: LIST
38787: PUSH
38788: LD_VAR 0 1
38792: PUSH
38793: LD_VAR 0 2
38797: PUSH
38798: LD_INT 3
38800: MINUS
38801: PUSH
38802: LD_INT 3
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: LIST
38809: PUSH
38810: LD_VAR 0 1
38814: PUSH
38815: LD_INT 4
38817: MINUS
38818: PUSH
38819: LD_VAR 0 2
38823: PUSH
38824: LD_INT 4
38826: MINUS
38827: PUSH
38828: LD_INT 2
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: LIST
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: ST_TO_ADDR
// end ; 5 :
38843: GO 38983
38845: LD_INT 5
38847: DOUBLE
38848: EQUAL
38849: IFTRUE 38853
38851: GO 38982
38853: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38854: LD_ADDR_VAR 0 5
38858: PUSH
38859: LD_VAR 0 1
38863: PUSH
38864: LD_INT 4
38866: MINUS
38867: PUSH
38868: LD_VAR 0 2
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: PUSH
38881: LD_VAR 0 1
38885: PUSH
38886: LD_VAR 0 2
38890: PUSH
38891: LD_INT 4
38893: MINUS
38894: PUSH
38895: LD_INT 3
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: LIST
38902: PUSH
38903: LD_VAR 0 1
38907: PUSH
38908: LD_INT 4
38910: PLUS
38911: PUSH
38912: LD_VAR 0 2
38916: PUSH
38917: LD_INT 4
38919: PLUS
38920: PUSH
38921: LD_INT 5
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: LIST
38928: PUSH
38929: LD_VAR 0 1
38933: PUSH
38934: LD_INT 3
38936: PLUS
38937: PUSH
38938: LD_VAR 0 2
38942: PUSH
38943: LD_INT 4
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: LIST
38950: PUSH
38951: LD_VAR 0 1
38955: PUSH
38956: LD_VAR 0 2
38960: PUSH
38961: LD_INT 3
38963: PLUS
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: LIST
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: ST_TO_ADDR
// end ; end ;
38980: GO 38983
38982: POP
// result := list ;
38983: LD_ADDR_VAR 0 4
38987: PUSH
38988: LD_VAR 0 5
38992: ST_TO_ADDR
// end ;
38993: LD_VAR 0 4
38997: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38998: LD_INT 0
39000: PPUSH
39001: PPUSH
39002: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39003: LD_VAR 0 1
39007: NOT
39008: PUSH
39009: LD_VAR 0 2
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: LD_INT 2
39019: PUSH
39020: LD_INT 3
39022: PUSH
39023: LD_INT 4
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: IN
39032: NOT
39033: OR
39034: IFFALSE 39038
// exit ;
39036: GO 39121
// tmp := [ ] ;
39038: LD_ADDR_VAR 0 5
39042: PUSH
39043: EMPTY
39044: ST_TO_ADDR
// for i in units do
39045: LD_ADDR_VAR 0 4
39049: PUSH
39050: LD_VAR 0 1
39054: PUSH
39055: FOR_IN
39056: IFFALSE 39090
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39058: LD_ADDR_VAR 0 5
39062: PUSH
39063: LD_VAR 0 5
39067: PPUSH
39068: LD_VAR 0 4
39072: PPUSH
39073: LD_VAR 0 2
39077: PPUSH
39078: CALL_OW 259
39082: PPUSH
39083: CALL 40494 0 2
39087: ST_TO_ADDR
39088: GO 39055
39090: POP
39091: POP
// if not tmp then
39092: LD_VAR 0 5
39096: NOT
39097: IFFALSE 39101
// exit ;
39099: GO 39121
// result := SortListByListDesc ( units , tmp ) ;
39101: LD_ADDR_VAR 0 3
39105: PUSH
39106: LD_VAR 0 1
39110: PPUSH
39111: LD_VAR 0 5
39115: PPUSH
39116: CALL_OW 77
39120: ST_TO_ADDR
// end ;
39121: LD_VAR 0 3
39125: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39126: LD_INT 0
39128: PPUSH
39129: PPUSH
39130: PPUSH
// result := false ;
39131: LD_ADDR_VAR 0 3
39135: PUSH
39136: LD_INT 0
39138: ST_TO_ADDR
// if not building then
39139: LD_VAR 0 2
39143: NOT
39144: IFFALSE 39148
// exit ;
39146: GO 39286
// x := GetX ( building ) ;
39148: LD_ADDR_VAR 0 4
39152: PUSH
39153: LD_VAR 0 2
39157: PPUSH
39158: CALL_OW 250
39162: ST_TO_ADDR
// y := GetY ( building ) ;
39163: LD_ADDR_VAR 0 5
39167: PUSH
39168: LD_VAR 0 2
39172: PPUSH
39173: CALL_OW 251
39177: ST_TO_ADDR
// if not x or not y then
39178: LD_VAR 0 4
39182: NOT
39183: PUSH
39184: LD_VAR 0 5
39188: NOT
39189: OR
39190: IFFALSE 39194
// exit ;
39192: GO 39286
// if GetTaskList ( unit ) then
39194: LD_VAR 0 1
39198: PPUSH
39199: CALL_OW 437
39203: IFFALSE 39286
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39205: LD_STRING e
39207: PUSH
39208: LD_VAR 0 1
39212: PPUSH
39213: CALL_OW 437
39217: PUSH
39218: LD_INT 1
39220: ARRAY
39221: PUSH
39222: LD_INT 1
39224: ARRAY
39225: EQUAL
39226: PUSH
39227: LD_VAR 0 4
39231: PUSH
39232: LD_VAR 0 1
39236: PPUSH
39237: CALL_OW 437
39241: PUSH
39242: LD_INT 1
39244: ARRAY
39245: PUSH
39246: LD_INT 2
39248: ARRAY
39249: EQUAL
39250: AND
39251: PUSH
39252: LD_VAR 0 5
39256: PUSH
39257: LD_VAR 0 1
39261: PPUSH
39262: CALL_OW 437
39266: PUSH
39267: LD_INT 1
39269: ARRAY
39270: PUSH
39271: LD_INT 3
39273: ARRAY
39274: EQUAL
39275: AND
39276: IFFALSE 39286
// result := true end ;
39278: LD_ADDR_VAR 0 3
39282: PUSH
39283: LD_INT 1
39285: ST_TO_ADDR
// end ;
39286: LD_VAR 0 3
39290: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39291: LD_INT 0
39293: PPUSH
// result := false ;
39294: LD_ADDR_VAR 0 4
39298: PUSH
39299: LD_INT 0
39301: ST_TO_ADDR
// if GetTaskList ( unit ) then
39302: LD_VAR 0 1
39306: PPUSH
39307: CALL_OW 437
39311: IFFALSE 39394
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39313: LD_STRING M
39315: PUSH
39316: LD_VAR 0 1
39320: PPUSH
39321: CALL_OW 437
39325: PUSH
39326: LD_INT 1
39328: ARRAY
39329: PUSH
39330: LD_INT 1
39332: ARRAY
39333: EQUAL
39334: PUSH
39335: LD_VAR 0 2
39339: PUSH
39340: LD_VAR 0 1
39344: PPUSH
39345: CALL_OW 437
39349: PUSH
39350: LD_INT 1
39352: ARRAY
39353: PUSH
39354: LD_INT 2
39356: ARRAY
39357: EQUAL
39358: AND
39359: PUSH
39360: LD_VAR 0 3
39364: PUSH
39365: LD_VAR 0 1
39369: PPUSH
39370: CALL_OW 437
39374: PUSH
39375: LD_INT 1
39377: ARRAY
39378: PUSH
39379: LD_INT 3
39381: ARRAY
39382: EQUAL
39383: AND
39384: IFFALSE 39394
// result := true ;
39386: LD_ADDR_VAR 0 4
39390: PUSH
39391: LD_INT 1
39393: ST_TO_ADDR
// end ; end ;
39394: LD_VAR 0 4
39398: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39399: LD_INT 0
39401: PPUSH
39402: PPUSH
39403: PPUSH
39404: PPUSH
// if not unit or not area then
39405: LD_VAR 0 1
39409: NOT
39410: PUSH
39411: LD_VAR 0 2
39415: NOT
39416: OR
39417: IFFALSE 39421
// exit ;
39419: GO 39597
// tmp := AreaToList ( area , i ) ;
39421: LD_ADDR_VAR 0 6
39425: PUSH
39426: LD_VAR 0 2
39430: PPUSH
39431: LD_VAR 0 5
39435: PPUSH
39436: CALL_OW 517
39440: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39441: LD_ADDR_VAR 0 5
39445: PUSH
39446: DOUBLE
39447: LD_INT 1
39449: DEC
39450: ST_TO_ADDR
39451: LD_VAR 0 6
39455: PUSH
39456: LD_INT 1
39458: ARRAY
39459: PUSH
39460: FOR_TO
39461: IFFALSE 39595
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39463: LD_ADDR_VAR 0 7
39467: PUSH
39468: LD_VAR 0 6
39472: PUSH
39473: LD_INT 1
39475: ARRAY
39476: PUSH
39477: LD_VAR 0 5
39481: ARRAY
39482: PUSH
39483: LD_VAR 0 6
39487: PUSH
39488: LD_INT 2
39490: ARRAY
39491: PUSH
39492: LD_VAR 0 5
39496: ARRAY
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39502: LD_INT 92
39504: PUSH
39505: LD_VAR 0 7
39509: PUSH
39510: LD_INT 1
39512: ARRAY
39513: PUSH
39514: LD_VAR 0 7
39518: PUSH
39519: LD_INT 2
39521: ARRAY
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: PPUSH
39532: CALL_OW 69
39536: PUSH
39537: LD_INT 0
39539: EQUAL
39540: IFFALSE 39593
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39542: LD_VAR 0 1
39546: PPUSH
39547: LD_VAR 0 7
39551: PUSH
39552: LD_INT 1
39554: ARRAY
39555: PPUSH
39556: LD_VAR 0 7
39560: PUSH
39561: LD_INT 2
39563: ARRAY
39564: PPUSH
39565: LD_VAR 0 3
39569: PPUSH
39570: CALL_OW 48
// result := IsPlaced ( unit ) ;
39574: LD_ADDR_VAR 0 4
39578: PUSH
39579: LD_VAR 0 1
39583: PPUSH
39584: CALL_OW 305
39588: ST_TO_ADDR
// exit ;
39589: POP
39590: POP
39591: GO 39597
// end ; end ;
39593: GO 39460
39595: POP
39596: POP
// end ;
39597: LD_VAR 0 4
39601: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39602: LD_INT 0
39604: PPUSH
39605: PPUSH
39606: PPUSH
// if not side or side > 8 then
39607: LD_VAR 0 1
39611: NOT
39612: PUSH
39613: LD_VAR 0 1
39617: PUSH
39618: LD_INT 8
39620: GREATER
39621: OR
39622: IFFALSE 39626
// exit ;
39624: GO 39813
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39626: LD_ADDR_VAR 0 4
39630: PUSH
39631: LD_INT 22
39633: PUSH
39634: LD_VAR 0 1
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 21
39645: PUSH
39646: LD_INT 3
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PPUSH
39657: CALL_OW 69
39661: ST_TO_ADDR
// if not tmp then
39662: LD_VAR 0 4
39666: NOT
39667: IFFALSE 39671
// exit ;
39669: GO 39813
// enable_addtolog := true ;
39671: LD_ADDR_OWVAR 81
39675: PUSH
39676: LD_INT 1
39678: ST_TO_ADDR
// AddToLog ( [ ) ;
39679: LD_STRING [
39681: PPUSH
39682: CALL_OW 561
// for i in tmp do
39686: LD_ADDR_VAR 0 3
39690: PUSH
39691: LD_VAR 0 4
39695: PUSH
39696: FOR_IN
39697: IFFALSE 39804
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39699: LD_STRING [
39701: PUSH
39702: LD_VAR 0 3
39706: PPUSH
39707: CALL_OW 266
39711: STR
39712: PUSH
39713: LD_STRING , 
39715: STR
39716: PUSH
39717: LD_VAR 0 3
39721: PPUSH
39722: CALL_OW 250
39726: STR
39727: PUSH
39728: LD_STRING , 
39730: STR
39731: PUSH
39732: LD_VAR 0 3
39736: PPUSH
39737: CALL_OW 251
39741: STR
39742: PUSH
39743: LD_STRING , 
39745: STR
39746: PUSH
39747: LD_VAR 0 3
39751: PPUSH
39752: CALL_OW 254
39756: STR
39757: PUSH
39758: LD_STRING , 
39760: STR
39761: PUSH
39762: LD_VAR 0 3
39766: PPUSH
39767: LD_INT 1
39769: PPUSH
39770: CALL_OW 268
39774: STR
39775: PUSH
39776: LD_STRING , 
39778: STR
39779: PUSH
39780: LD_VAR 0 3
39784: PPUSH
39785: LD_INT 2
39787: PPUSH
39788: CALL_OW 268
39792: STR
39793: PUSH
39794: LD_STRING ],
39796: STR
39797: PPUSH
39798: CALL_OW 561
// end ;
39802: GO 39696
39804: POP
39805: POP
// AddToLog ( ]; ) ;
39806: LD_STRING ];
39808: PPUSH
39809: CALL_OW 561
// end ;
39813: LD_VAR 0 2
39817: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39818: LD_INT 0
39820: PPUSH
39821: PPUSH
39822: PPUSH
39823: PPUSH
39824: PPUSH
// if not area or not rate or not max then
39825: LD_VAR 0 1
39829: NOT
39830: PUSH
39831: LD_VAR 0 2
39835: NOT
39836: OR
39837: PUSH
39838: LD_VAR 0 4
39842: NOT
39843: OR
39844: IFFALSE 39848
// exit ;
39846: GO 40037
// while 1 do
39848: LD_INT 1
39850: IFFALSE 40037
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39852: LD_ADDR_VAR 0 9
39856: PUSH
39857: LD_VAR 0 1
39861: PPUSH
39862: LD_INT 1
39864: PPUSH
39865: CALL_OW 287
39869: PUSH
39870: LD_INT 10
39872: MUL
39873: ST_TO_ADDR
// r := rate / 10 ;
39874: LD_ADDR_VAR 0 7
39878: PUSH
39879: LD_VAR 0 2
39883: PUSH
39884: LD_INT 10
39886: DIVREAL
39887: ST_TO_ADDR
// time := 1 1$00 ;
39888: LD_ADDR_VAR 0 8
39892: PUSH
39893: LD_INT 2100
39895: ST_TO_ADDR
// if amount < min then
39896: LD_VAR 0 9
39900: PUSH
39901: LD_VAR 0 3
39905: LESS
39906: IFFALSE 39924
// r := r * 2 else
39908: LD_ADDR_VAR 0 7
39912: PUSH
39913: LD_VAR 0 7
39917: PUSH
39918: LD_INT 2
39920: MUL
39921: ST_TO_ADDR
39922: GO 39950
// if amount > max then
39924: LD_VAR 0 9
39928: PUSH
39929: LD_VAR 0 4
39933: GREATER
39934: IFFALSE 39950
// r := r / 2 ;
39936: LD_ADDR_VAR 0 7
39940: PUSH
39941: LD_VAR 0 7
39945: PUSH
39946: LD_INT 2
39948: DIVREAL
39949: ST_TO_ADDR
// time := time / r ;
39950: LD_ADDR_VAR 0 8
39954: PUSH
39955: LD_VAR 0 8
39959: PUSH
39960: LD_VAR 0 7
39964: DIVREAL
39965: ST_TO_ADDR
// if time < 0 then
39966: LD_VAR 0 8
39970: PUSH
39971: LD_INT 0
39973: LESS
39974: IFFALSE 39991
// time := time * - 1 ;
39976: LD_ADDR_VAR 0 8
39980: PUSH
39981: LD_VAR 0 8
39985: PUSH
39986: LD_INT 1
39988: NEG
39989: MUL
39990: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39991: LD_VAR 0 8
39995: PUSH
39996: LD_INT 35
39998: PPUSH
39999: LD_INT 875
40001: PPUSH
40002: CALL_OW 12
40006: PLUS
40007: PPUSH
40008: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40012: LD_INT 1
40014: PPUSH
40015: LD_INT 5
40017: PPUSH
40018: CALL_OW 12
40022: PPUSH
40023: LD_VAR 0 1
40027: PPUSH
40028: LD_INT 1
40030: PPUSH
40031: CALL_OW 55
// end ;
40035: GO 39848
// end ;
40037: LD_VAR 0 5
40041: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40042: LD_INT 0
40044: PPUSH
40045: PPUSH
40046: PPUSH
40047: PPUSH
40048: PPUSH
40049: PPUSH
40050: PPUSH
40051: PPUSH
// if not turrets or not factories then
40052: LD_VAR 0 1
40056: NOT
40057: PUSH
40058: LD_VAR 0 2
40062: NOT
40063: OR
40064: IFFALSE 40068
// exit ;
40066: GO 40375
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40068: LD_ADDR_VAR 0 10
40072: PUSH
40073: LD_INT 5
40075: PUSH
40076: LD_INT 6
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 2
40085: PUSH
40086: LD_INT 4
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 3
40095: PUSH
40096: LD_INT 5
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 24
40110: PUSH
40111: LD_INT 25
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 23
40120: PUSH
40121: LD_INT 27
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 42
40134: PUSH
40135: LD_INT 43
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 44
40144: PUSH
40145: LD_INT 46
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 45
40154: PUSH
40155: LD_INT 47
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: LIST
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: LIST
40171: ST_TO_ADDR
// result := [ ] ;
40172: LD_ADDR_VAR 0 3
40176: PUSH
40177: EMPTY
40178: ST_TO_ADDR
// for i in turrets do
40179: LD_ADDR_VAR 0 4
40183: PUSH
40184: LD_VAR 0 1
40188: PUSH
40189: FOR_IN
40190: IFFALSE 40373
// begin nat := GetNation ( i ) ;
40192: LD_ADDR_VAR 0 7
40196: PUSH
40197: LD_VAR 0 4
40201: PPUSH
40202: CALL_OW 248
40206: ST_TO_ADDR
// weapon := 0 ;
40207: LD_ADDR_VAR 0 8
40211: PUSH
40212: LD_INT 0
40214: ST_TO_ADDR
// if not nat then
40215: LD_VAR 0 7
40219: NOT
40220: IFFALSE 40224
// continue ;
40222: GO 40189
// for j in list [ nat ] do
40224: LD_ADDR_VAR 0 5
40228: PUSH
40229: LD_VAR 0 10
40233: PUSH
40234: LD_VAR 0 7
40238: ARRAY
40239: PUSH
40240: FOR_IN
40241: IFFALSE 40282
// if GetBWeapon ( i ) = j [ 1 ] then
40243: LD_VAR 0 4
40247: PPUSH
40248: CALL_OW 269
40252: PUSH
40253: LD_VAR 0 5
40257: PUSH
40258: LD_INT 1
40260: ARRAY
40261: EQUAL
40262: IFFALSE 40280
// begin weapon := j [ 2 ] ;
40264: LD_ADDR_VAR 0 8
40268: PUSH
40269: LD_VAR 0 5
40273: PUSH
40274: LD_INT 2
40276: ARRAY
40277: ST_TO_ADDR
// break ;
40278: GO 40282
// end ;
40280: GO 40240
40282: POP
40283: POP
// if not weapon then
40284: LD_VAR 0 8
40288: NOT
40289: IFFALSE 40293
// continue ;
40291: GO 40189
// for k in factories do
40293: LD_ADDR_VAR 0 6
40297: PUSH
40298: LD_VAR 0 2
40302: PUSH
40303: FOR_IN
40304: IFFALSE 40369
// begin weapons := AvailableWeaponList ( k ) ;
40306: LD_ADDR_VAR 0 9
40310: PUSH
40311: LD_VAR 0 6
40315: PPUSH
40316: CALL_OW 478
40320: ST_TO_ADDR
// if not weapons then
40321: LD_VAR 0 9
40325: NOT
40326: IFFALSE 40330
// continue ;
40328: GO 40303
// if weapon in weapons then
40330: LD_VAR 0 8
40334: PUSH
40335: LD_VAR 0 9
40339: IN
40340: IFFALSE 40367
// begin result := [ i , weapon ] ;
40342: LD_ADDR_VAR 0 3
40346: PUSH
40347: LD_VAR 0 4
40351: PUSH
40352: LD_VAR 0 8
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: ST_TO_ADDR
// exit ;
40361: POP
40362: POP
40363: POP
40364: POP
40365: GO 40375
// end ; end ;
40367: GO 40303
40369: POP
40370: POP
// end ;
40371: GO 40189
40373: POP
40374: POP
// end ;
40375: LD_VAR 0 3
40379: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40380: LD_INT 0
40382: PPUSH
// if not side or side > 8 then
40383: LD_VAR 0 3
40387: NOT
40388: PUSH
40389: LD_VAR 0 3
40393: PUSH
40394: LD_INT 8
40396: GREATER
40397: OR
40398: IFFALSE 40402
// exit ;
40400: GO 40461
// if not range then
40402: LD_VAR 0 4
40406: NOT
40407: IFFALSE 40418
// range := - 12 ;
40409: LD_ADDR_VAR 0 4
40413: PUSH
40414: LD_INT 12
40416: NEG
40417: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40418: LD_VAR 0 1
40422: PPUSH
40423: LD_VAR 0 2
40427: PPUSH
40428: LD_VAR 0 3
40432: PPUSH
40433: LD_VAR 0 4
40437: PPUSH
40438: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40442: LD_VAR 0 1
40446: PPUSH
40447: LD_VAR 0 2
40451: PPUSH
40452: LD_VAR 0 3
40456: PPUSH
40457: CALL_OW 331
// end ;
40461: LD_VAR 0 5
40465: RET
// export function Video ( mode ) ; begin
40466: LD_INT 0
40468: PPUSH
// ingame_video = mode ;
40469: LD_ADDR_OWVAR 52
40473: PUSH
40474: LD_VAR 0 1
40478: ST_TO_ADDR
// interface_hidden = mode ;
40479: LD_ADDR_OWVAR 54
40483: PUSH
40484: LD_VAR 0 1
40488: ST_TO_ADDR
// end ;
40489: LD_VAR 0 2
40493: RET
// export function Join ( array , element ) ; begin
40494: LD_INT 0
40496: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40497: LD_ADDR_VAR 0 3
40501: PUSH
40502: LD_VAR 0 1
40506: PPUSH
40507: LD_VAR 0 1
40511: PUSH
40512: LD_INT 1
40514: PLUS
40515: PPUSH
40516: LD_VAR 0 2
40520: PPUSH
40521: CALL_OW 1
40525: ST_TO_ADDR
// end ;
40526: LD_VAR 0 3
40530: RET
// export function JoinUnion ( array , element ) ; begin
40531: LD_INT 0
40533: PPUSH
// result := array union element ;
40534: LD_ADDR_VAR 0 3
40538: PUSH
40539: LD_VAR 0 1
40543: PUSH
40544: LD_VAR 0 2
40548: UNION
40549: ST_TO_ADDR
// end ;
40550: LD_VAR 0 3
40554: RET
// export function GetBehemoths ( side ) ; begin
40555: LD_INT 0
40557: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40558: LD_ADDR_VAR 0 2
40562: PUSH
40563: LD_INT 22
40565: PUSH
40566: LD_VAR 0 1
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 31
40577: PUSH
40578: LD_INT 25
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PPUSH
40589: CALL_OW 69
40593: ST_TO_ADDR
// end ;
40594: LD_VAR 0 2
40598: RET
// export function Shuffle ( array ) ; var i , index ; begin
40599: LD_INT 0
40601: PPUSH
40602: PPUSH
40603: PPUSH
// result := [ ] ;
40604: LD_ADDR_VAR 0 2
40608: PUSH
40609: EMPTY
40610: ST_TO_ADDR
// if not array then
40611: LD_VAR 0 1
40615: NOT
40616: IFFALSE 40620
// exit ;
40618: GO 40719
// Randomize ;
40620: CALL_OW 10
// for i = array downto 1 do
40624: LD_ADDR_VAR 0 3
40628: PUSH
40629: DOUBLE
40630: LD_VAR 0 1
40634: INC
40635: ST_TO_ADDR
40636: LD_INT 1
40638: PUSH
40639: FOR_DOWNTO
40640: IFFALSE 40717
// begin index := rand ( 1 , array ) ;
40642: LD_ADDR_VAR 0 4
40646: PUSH
40647: LD_INT 1
40649: PPUSH
40650: LD_VAR 0 1
40654: PPUSH
40655: CALL_OW 12
40659: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40660: LD_ADDR_VAR 0 2
40664: PUSH
40665: LD_VAR 0 2
40669: PPUSH
40670: LD_VAR 0 2
40674: PUSH
40675: LD_INT 1
40677: PLUS
40678: PPUSH
40679: LD_VAR 0 1
40683: PUSH
40684: LD_VAR 0 4
40688: ARRAY
40689: PPUSH
40690: CALL_OW 2
40694: ST_TO_ADDR
// array := Delete ( array , index ) ;
40695: LD_ADDR_VAR 0 1
40699: PUSH
40700: LD_VAR 0 1
40704: PPUSH
40705: LD_VAR 0 4
40709: PPUSH
40710: CALL_OW 3
40714: ST_TO_ADDR
// end ;
40715: GO 40639
40717: POP
40718: POP
// end ;
40719: LD_VAR 0 2
40723: RET
// export function GetBaseMaterials ( base ) ; begin
40724: LD_INT 0
40726: PPUSH
// result := [ 0 , 0 , 0 ] ;
40727: LD_ADDR_VAR 0 2
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: LIST
40745: ST_TO_ADDR
// if not base then
40746: LD_VAR 0 1
40750: NOT
40751: IFFALSE 40755
// exit ;
40753: GO 40804
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40755: LD_ADDR_VAR 0 2
40759: PUSH
40760: LD_VAR 0 1
40764: PPUSH
40765: LD_INT 1
40767: PPUSH
40768: CALL_OW 275
40772: PUSH
40773: LD_VAR 0 1
40777: PPUSH
40778: LD_INT 2
40780: PPUSH
40781: CALL_OW 275
40785: PUSH
40786: LD_VAR 0 1
40790: PPUSH
40791: LD_INT 3
40793: PPUSH
40794: CALL_OW 275
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: LIST
40803: ST_TO_ADDR
// end ;
40804: LD_VAR 0 2
40808: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40809: LD_INT 0
40811: PPUSH
40812: PPUSH
// result := array ;
40813: LD_ADDR_VAR 0 3
40817: PUSH
40818: LD_VAR 0 1
40822: ST_TO_ADDR
// if size >= result then
40823: LD_VAR 0 2
40827: PUSH
40828: LD_VAR 0 3
40832: GREATEREQUAL
40833: IFFALSE 40837
// exit ;
40835: GO 40887
// if size then
40837: LD_VAR 0 2
40841: IFFALSE 40887
// for i := array downto size do
40843: LD_ADDR_VAR 0 4
40847: PUSH
40848: DOUBLE
40849: LD_VAR 0 1
40853: INC
40854: ST_TO_ADDR
40855: LD_VAR 0 2
40859: PUSH
40860: FOR_DOWNTO
40861: IFFALSE 40885
// result := Delete ( result , result ) ;
40863: LD_ADDR_VAR 0 3
40867: PUSH
40868: LD_VAR 0 3
40872: PPUSH
40873: LD_VAR 0 3
40877: PPUSH
40878: CALL_OW 3
40882: ST_TO_ADDR
40883: GO 40860
40885: POP
40886: POP
// end ;
40887: LD_VAR 0 3
40891: RET
// export function ComExit ( unit ) ; var tmp ; begin
40892: LD_INT 0
40894: PPUSH
40895: PPUSH
// if not IsInUnit ( unit ) then
40896: LD_VAR 0 1
40900: PPUSH
40901: CALL_OW 310
40905: NOT
40906: IFFALSE 40910
// exit ;
40908: GO 40970
// tmp := IsInUnit ( unit ) ;
40910: LD_ADDR_VAR 0 3
40914: PUSH
40915: LD_VAR 0 1
40919: PPUSH
40920: CALL_OW 310
40924: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40925: LD_VAR 0 3
40929: PPUSH
40930: CALL_OW 247
40934: PUSH
40935: LD_INT 2
40937: EQUAL
40938: IFFALSE 40951
// ComExitVehicle ( unit ) else
40940: LD_VAR 0 1
40944: PPUSH
40945: CALL_OW 121
40949: GO 40960
// ComExitBuilding ( unit ) ;
40951: LD_VAR 0 1
40955: PPUSH
40956: CALL_OW 122
// result := tmp ;
40960: LD_ADDR_VAR 0 2
40964: PUSH
40965: LD_VAR 0 3
40969: ST_TO_ADDR
// end ;
40970: LD_VAR 0 2
40974: RET
// export function ComExitAll ( units ) ; var i ; begin
40975: LD_INT 0
40977: PPUSH
40978: PPUSH
// if not units then
40979: LD_VAR 0 1
40983: NOT
40984: IFFALSE 40988
// exit ;
40986: GO 41014
// for i in units do
40988: LD_ADDR_VAR 0 3
40992: PUSH
40993: LD_VAR 0 1
40997: PUSH
40998: FOR_IN
40999: IFFALSE 41012
// ComExit ( i ) ;
41001: LD_VAR 0 3
41005: PPUSH
41006: CALL 40892 0 1
41010: GO 40998
41012: POP
41013: POP
// end ;
41014: LD_VAR 0 2
41018: RET
// export function ResetHc ; begin
41019: LD_INT 0
41021: PPUSH
// InitHc ;
41022: CALL_OW 19
// hc_importance := 0 ;
41026: LD_ADDR_OWVAR 32
41030: PUSH
41031: LD_INT 0
41033: ST_TO_ADDR
// end ;
41034: LD_VAR 0 1
41038: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41039: LD_INT 0
41041: PPUSH
41042: PPUSH
41043: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41044: LD_ADDR_VAR 0 6
41048: PUSH
41049: LD_VAR 0 1
41053: PUSH
41054: LD_VAR 0 3
41058: PLUS
41059: PUSH
41060: LD_INT 2
41062: DIV
41063: ST_TO_ADDR
// if _x < 0 then
41064: LD_VAR 0 6
41068: PUSH
41069: LD_INT 0
41071: LESS
41072: IFFALSE 41089
// _x := _x * - 1 ;
41074: LD_ADDR_VAR 0 6
41078: PUSH
41079: LD_VAR 0 6
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: MUL
41088: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41089: LD_ADDR_VAR 0 7
41093: PUSH
41094: LD_VAR 0 2
41098: PUSH
41099: LD_VAR 0 4
41103: PLUS
41104: PUSH
41105: LD_INT 2
41107: DIV
41108: ST_TO_ADDR
// if _y < 0 then
41109: LD_VAR 0 7
41113: PUSH
41114: LD_INT 0
41116: LESS
41117: IFFALSE 41134
// _y := _y * - 1 ;
41119: LD_ADDR_VAR 0 7
41123: PUSH
41124: LD_VAR 0 7
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: MUL
41133: ST_TO_ADDR
// result := [ _x , _y ] ;
41134: LD_ADDR_VAR 0 5
41138: PUSH
41139: LD_VAR 0 6
41143: PUSH
41144: LD_VAR 0 7
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: ST_TO_ADDR
// end ;
41153: LD_VAR 0 5
41157: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41158: LD_INT 0
41160: PPUSH
41161: PPUSH
41162: PPUSH
41163: PPUSH
// task := GetTaskList ( unit ) ;
41164: LD_ADDR_VAR 0 7
41168: PUSH
41169: LD_VAR 0 1
41173: PPUSH
41174: CALL_OW 437
41178: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41179: LD_VAR 0 7
41183: NOT
41184: PUSH
41185: LD_VAR 0 1
41189: PPUSH
41190: LD_VAR 0 2
41194: PPUSH
41195: CALL_OW 308
41199: NOT
41200: AND
41201: IFFALSE 41205
// exit ;
41203: GO 41323
// if IsInArea ( unit , area ) then
41205: LD_VAR 0 1
41209: PPUSH
41210: LD_VAR 0 2
41214: PPUSH
41215: CALL_OW 308
41219: IFFALSE 41237
// begin ComMoveToArea ( unit , goAway ) ;
41221: LD_VAR 0 1
41225: PPUSH
41226: LD_VAR 0 3
41230: PPUSH
41231: CALL_OW 113
// exit ;
41235: GO 41323
// end ; if task [ 1 ] [ 1 ] <> M then
41237: LD_VAR 0 7
41241: PUSH
41242: LD_INT 1
41244: ARRAY
41245: PUSH
41246: LD_INT 1
41248: ARRAY
41249: PUSH
41250: LD_STRING M
41252: NONEQUAL
41253: IFFALSE 41257
// exit ;
41255: GO 41323
// x := task [ 1 ] [ 2 ] ;
41257: LD_ADDR_VAR 0 5
41261: PUSH
41262: LD_VAR 0 7
41266: PUSH
41267: LD_INT 1
41269: ARRAY
41270: PUSH
41271: LD_INT 2
41273: ARRAY
41274: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41275: LD_ADDR_VAR 0 6
41279: PUSH
41280: LD_VAR 0 7
41284: PUSH
41285: LD_INT 1
41287: ARRAY
41288: PUSH
41289: LD_INT 3
41291: ARRAY
41292: ST_TO_ADDR
// if InArea ( x , y , area ) then
41293: LD_VAR 0 5
41297: PPUSH
41298: LD_VAR 0 6
41302: PPUSH
41303: LD_VAR 0 2
41307: PPUSH
41308: CALL_OW 309
41312: IFFALSE 41323
// ComStop ( unit ) ;
41314: LD_VAR 0 1
41318: PPUSH
41319: CALL_OW 141
// end ;
41323: LD_VAR 0 4
41327: RET
// export function Abs ( value ) ; begin
41328: LD_INT 0
41330: PPUSH
// result := value ;
41331: LD_ADDR_VAR 0 2
41335: PUSH
41336: LD_VAR 0 1
41340: ST_TO_ADDR
// if value < 0 then
41341: LD_VAR 0 1
41345: PUSH
41346: LD_INT 0
41348: LESS
41349: IFFALSE 41366
// result := value * - 1 ;
41351: LD_ADDR_VAR 0 2
41355: PUSH
41356: LD_VAR 0 1
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: MUL
41365: ST_TO_ADDR
// end ;
41366: LD_VAR 0 2
41370: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41371: LD_INT 0
41373: PPUSH
41374: PPUSH
41375: PPUSH
41376: PPUSH
41377: PPUSH
41378: PPUSH
41379: PPUSH
41380: PPUSH
// if not unit or not building then
41381: LD_VAR 0 1
41385: NOT
41386: PUSH
41387: LD_VAR 0 2
41391: NOT
41392: OR
41393: IFFALSE 41397
// exit ;
41395: GO 41623
// x := GetX ( building ) ;
41397: LD_ADDR_VAR 0 4
41401: PUSH
41402: LD_VAR 0 2
41406: PPUSH
41407: CALL_OW 250
41411: ST_TO_ADDR
// y := GetY ( building ) ;
41412: LD_ADDR_VAR 0 6
41416: PUSH
41417: LD_VAR 0 2
41421: PPUSH
41422: CALL_OW 251
41426: ST_TO_ADDR
// d := GetDir ( building ) ;
41427: LD_ADDR_VAR 0 8
41431: PUSH
41432: LD_VAR 0 2
41436: PPUSH
41437: CALL_OW 254
41441: ST_TO_ADDR
// r := 4 ;
41442: LD_ADDR_VAR 0 9
41446: PUSH
41447: LD_INT 4
41449: ST_TO_ADDR
// for i := 1 to 5 do
41450: LD_ADDR_VAR 0 10
41454: PUSH
41455: DOUBLE
41456: LD_INT 1
41458: DEC
41459: ST_TO_ADDR
41460: LD_INT 5
41462: PUSH
41463: FOR_TO
41464: IFFALSE 41621
// begin _x := ShiftX ( x , d , r + i ) ;
41466: LD_ADDR_VAR 0 5
41470: PUSH
41471: LD_VAR 0 4
41475: PPUSH
41476: LD_VAR 0 8
41480: PPUSH
41481: LD_VAR 0 9
41485: PUSH
41486: LD_VAR 0 10
41490: PLUS
41491: PPUSH
41492: CALL_OW 272
41496: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41497: LD_ADDR_VAR 0 7
41501: PUSH
41502: LD_VAR 0 6
41506: PPUSH
41507: LD_VAR 0 8
41511: PPUSH
41512: LD_VAR 0 9
41516: PUSH
41517: LD_VAR 0 10
41521: PLUS
41522: PPUSH
41523: CALL_OW 273
41527: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41528: LD_VAR 0 5
41532: PPUSH
41533: LD_VAR 0 7
41537: PPUSH
41538: CALL_OW 488
41542: PUSH
41543: LD_VAR 0 5
41547: PPUSH
41548: LD_VAR 0 7
41552: PPUSH
41553: CALL_OW 428
41557: PPUSH
41558: CALL_OW 247
41562: PUSH
41563: LD_INT 3
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: IN
41573: NOT
41574: AND
41575: IFFALSE 41619
// begin ComMoveXY ( unit , _x , _y ) ;
41577: LD_VAR 0 1
41581: PPUSH
41582: LD_VAR 0 5
41586: PPUSH
41587: LD_VAR 0 7
41591: PPUSH
41592: CALL_OW 111
// result := [ _x , _y ] ;
41596: LD_ADDR_VAR 0 3
41600: PUSH
41601: LD_VAR 0 5
41605: PUSH
41606: LD_VAR 0 7
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: ST_TO_ADDR
// exit ;
41615: POP
41616: POP
41617: GO 41623
// end ; end ;
41619: GO 41463
41621: POP
41622: POP
// end ;
41623: LD_VAR 0 3
41627: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41628: LD_INT 0
41630: PPUSH
41631: PPUSH
41632: PPUSH
// result := 0 ;
41633: LD_ADDR_VAR 0 3
41637: PUSH
41638: LD_INT 0
41640: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41641: LD_VAR 0 1
41645: PUSH
41646: LD_INT 0
41648: LESS
41649: PUSH
41650: LD_VAR 0 1
41654: PUSH
41655: LD_INT 8
41657: GREATER
41658: OR
41659: PUSH
41660: LD_VAR 0 2
41664: PUSH
41665: LD_INT 0
41667: LESS
41668: OR
41669: PUSH
41670: LD_VAR 0 2
41674: PUSH
41675: LD_INT 8
41677: GREATER
41678: OR
41679: IFFALSE 41683
// exit ;
41681: GO 41758
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41683: LD_ADDR_VAR 0 4
41687: PUSH
41688: LD_INT 22
41690: PUSH
41691: LD_VAR 0 2
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PPUSH
41700: CALL_OW 69
41704: PUSH
41705: FOR_IN
41706: IFFALSE 41756
// begin un := UnitShoot ( i ) ;
41708: LD_ADDR_VAR 0 5
41712: PUSH
41713: LD_VAR 0 4
41717: PPUSH
41718: CALL_OW 504
41722: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41723: LD_VAR 0 5
41727: PPUSH
41728: CALL_OW 255
41732: PUSH
41733: LD_VAR 0 1
41737: EQUAL
41738: IFFALSE 41754
// begin result := un ;
41740: LD_ADDR_VAR 0 3
41744: PUSH
41745: LD_VAR 0 5
41749: ST_TO_ADDR
// exit ;
41750: POP
41751: POP
41752: GO 41758
// end ; end ;
41754: GO 41705
41756: POP
41757: POP
// end ;
41758: LD_VAR 0 3
41762: RET
// export function GetCargoBay ( units ) ; begin
41763: LD_INT 0
41765: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41766: LD_ADDR_VAR 0 2
41770: PUSH
41771: LD_VAR 0 1
41775: PPUSH
41776: LD_INT 2
41778: PUSH
41779: LD_INT 34
41781: PUSH
41782: LD_INT 12
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 34
41791: PUSH
41792: LD_INT 51
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 34
41801: PUSH
41802: LD_INT 32
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 34
41811: PUSH
41812: LD_INT 89
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: PPUSH
41826: CALL_OW 72
41830: ST_TO_ADDR
// end ;
41831: LD_VAR 0 2
41835: RET
// export function Negate ( value ) ; begin
41836: LD_INT 0
41838: PPUSH
// result := not value ;
41839: LD_ADDR_VAR 0 2
41843: PUSH
41844: LD_VAR 0 1
41848: NOT
41849: ST_TO_ADDR
// end ;
41850: LD_VAR 0 2
41854: RET
// export function Inc ( value ) ; begin
41855: LD_INT 0
41857: PPUSH
// result := value + 1 ;
41858: LD_ADDR_VAR 0 2
41862: PUSH
41863: LD_VAR 0 1
41867: PUSH
41868: LD_INT 1
41870: PLUS
41871: ST_TO_ADDR
// end ;
41872: LD_VAR 0 2
41876: RET
// export function Dec ( value ) ; begin
41877: LD_INT 0
41879: PPUSH
// result := value - 1 ;
41880: LD_ADDR_VAR 0 2
41884: PUSH
41885: LD_VAR 0 1
41889: PUSH
41890: LD_INT 1
41892: MINUS
41893: ST_TO_ADDR
// end ;
41894: LD_VAR 0 2
41898: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41899: LD_INT 0
41901: PPUSH
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
41906: PPUSH
41907: PPUSH
41908: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41909: LD_VAR 0 1
41913: PPUSH
41914: LD_VAR 0 2
41918: PPUSH
41919: CALL_OW 488
41923: NOT
41924: PUSH
41925: LD_VAR 0 3
41929: PPUSH
41930: LD_VAR 0 4
41934: PPUSH
41935: CALL_OW 488
41939: NOT
41940: OR
41941: IFFALSE 41954
// begin result := - 1 ;
41943: LD_ADDR_VAR 0 5
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: ST_TO_ADDR
// exit ;
41952: GO 42189
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41954: LD_ADDR_VAR 0 12
41958: PUSH
41959: LD_VAR 0 1
41963: PPUSH
41964: LD_VAR 0 2
41968: PPUSH
41969: LD_VAR 0 3
41973: PPUSH
41974: LD_VAR 0 4
41978: PPUSH
41979: CALL 41039 0 4
41983: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41984: LD_ADDR_VAR 0 11
41988: PUSH
41989: LD_VAR 0 1
41993: PPUSH
41994: LD_VAR 0 2
41998: PPUSH
41999: LD_VAR 0 12
42003: PUSH
42004: LD_INT 1
42006: ARRAY
42007: PPUSH
42008: LD_VAR 0 12
42012: PUSH
42013: LD_INT 2
42015: ARRAY
42016: PPUSH
42017: CALL_OW 298
42021: ST_TO_ADDR
// distance := 9999 ;
42022: LD_ADDR_VAR 0 10
42026: PUSH
42027: LD_INT 9999
42029: ST_TO_ADDR
// for i := 0 to 5 do
42030: LD_ADDR_VAR 0 6
42034: PUSH
42035: DOUBLE
42036: LD_INT 0
42038: DEC
42039: ST_TO_ADDR
42040: LD_INT 5
42042: PUSH
42043: FOR_TO
42044: IFFALSE 42187
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42046: LD_ADDR_VAR 0 7
42050: PUSH
42051: LD_VAR 0 1
42055: PPUSH
42056: LD_VAR 0 6
42060: PPUSH
42061: LD_VAR 0 11
42065: PPUSH
42066: CALL_OW 272
42070: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42071: LD_ADDR_VAR 0 8
42075: PUSH
42076: LD_VAR 0 2
42080: PPUSH
42081: LD_VAR 0 6
42085: PPUSH
42086: LD_VAR 0 11
42090: PPUSH
42091: CALL_OW 273
42095: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42096: LD_VAR 0 7
42100: PPUSH
42101: LD_VAR 0 8
42105: PPUSH
42106: CALL_OW 488
42110: NOT
42111: IFFALSE 42115
// continue ;
42113: GO 42043
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42115: LD_ADDR_VAR 0 9
42119: PUSH
42120: LD_VAR 0 12
42124: PUSH
42125: LD_INT 1
42127: ARRAY
42128: PPUSH
42129: LD_VAR 0 12
42133: PUSH
42134: LD_INT 2
42136: ARRAY
42137: PPUSH
42138: LD_VAR 0 7
42142: PPUSH
42143: LD_VAR 0 8
42147: PPUSH
42148: CALL_OW 298
42152: ST_TO_ADDR
// if tmp < distance then
42153: LD_VAR 0 9
42157: PUSH
42158: LD_VAR 0 10
42162: LESS
42163: IFFALSE 42185
// begin result := i ;
42165: LD_ADDR_VAR 0 5
42169: PUSH
42170: LD_VAR 0 6
42174: ST_TO_ADDR
// distance := tmp ;
42175: LD_ADDR_VAR 0 10
42179: PUSH
42180: LD_VAR 0 9
42184: ST_TO_ADDR
// end ; end ;
42185: GO 42043
42187: POP
42188: POP
// end ;
42189: LD_VAR 0 5
42193: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42194: LD_INT 0
42196: PPUSH
42197: PPUSH
// if not driver or not IsInUnit ( driver ) then
42198: LD_VAR 0 1
42202: NOT
42203: PUSH
42204: LD_VAR 0 1
42208: PPUSH
42209: CALL_OW 310
42213: NOT
42214: OR
42215: IFFALSE 42219
// exit ;
42217: GO 42309
// vehicle := IsInUnit ( driver ) ;
42219: LD_ADDR_VAR 0 3
42223: PUSH
42224: LD_VAR 0 1
42228: PPUSH
42229: CALL_OW 310
42233: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42234: LD_VAR 0 1
42238: PPUSH
42239: LD_STRING \
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: PUSH
42269: LD_STRING E
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_VAR 0 3
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PPUSH
42305: CALL_OW 446
// end ;
42309: LD_VAR 0 2
42313: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42314: LD_INT 0
42316: PPUSH
42317: PPUSH
// if not driver or not IsInUnit ( driver ) then
42318: LD_VAR 0 1
42322: NOT
42323: PUSH
42324: LD_VAR 0 1
42328: PPUSH
42329: CALL_OW 310
42333: NOT
42334: OR
42335: IFFALSE 42339
// exit ;
42337: GO 42429
// vehicle := IsInUnit ( driver ) ;
42339: LD_ADDR_VAR 0 3
42343: PUSH
42344: LD_VAR 0 1
42348: PPUSH
42349: CALL_OW 310
42353: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42354: LD_VAR 0 1
42358: PPUSH
42359: LD_STRING \
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: PUSH
42389: LD_STRING E
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_VAR 0 3
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PPUSH
42425: CALL_OW 447
// end ;
42429: LD_VAR 0 2
42433: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42434: LD_INT 0
42436: PPUSH
42437: PPUSH
42438: PPUSH
// tmp := [ ] ;
42439: LD_ADDR_VAR 0 5
42443: PUSH
42444: EMPTY
42445: ST_TO_ADDR
// for i in units do
42446: LD_ADDR_VAR 0 4
42450: PUSH
42451: LD_VAR 0 1
42455: PUSH
42456: FOR_IN
42457: IFFALSE 42495
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42459: LD_ADDR_VAR 0 5
42463: PUSH
42464: LD_VAR 0 5
42468: PPUSH
42469: LD_VAR 0 5
42473: PUSH
42474: LD_INT 1
42476: PLUS
42477: PPUSH
42478: LD_VAR 0 4
42482: PPUSH
42483: CALL_OW 256
42487: PPUSH
42488: CALL_OW 2
42492: ST_TO_ADDR
42493: GO 42456
42495: POP
42496: POP
// if not tmp then
42497: LD_VAR 0 5
42501: NOT
42502: IFFALSE 42506
// exit ;
42504: GO 42554
// if asc then
42506: LD_VAR 0 2
42510: IFFALSE 42534
// result := SortListByListAsc ( units , tmp ) else
42512: LD_ADDR_VAR 0 3
42516: PUSH
42517: LD_VAR 0 1
42521: PPUSH
42522: LD_VAR 0 5
42526: PPUSH
42527: CALL_OW 76
42531: ST_TO_ADDR
42532: GO 42554
// result := SortListByListDesc ( units , tmp ) ;
42534: LD_ADDR_VAR 0 3
42538: PUSH
42539: LD_VAR 0 1
42543: PPUSH
42544: LD_VAR 0 5
42548: PPUSH
42549: CALL_OW 77
42553: ST_TO_ADDR
// end ;
42554: LD_VAR 0 3
42558: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42559: LD_INT 0
42561: PPUSH
42562: PPUSH
// task := GetTaskList ( mech ) ;
42563: LD_ADDR_VAR 0 4
42567: PUSH
42568: LD_VAR 0 1
42572: PPUSH
42573: CALL_OW 437
42577: ST_TO_ADDR
// if not task then
42578: LD_VAR 0 4
42582: NOT
42583: IFFALSE 42587
// exit ;
42585: GO 42629
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42587: LD_ADDR_VAR 0 3
42591: PUSH
42592: LD_VAR 0 4
42596: PUSH
42597: LD_INT 1
42599: ARRAY
42600: PUSH
42601: LD_INT 1
42603: ARRAY
42604: PUSH
42605: LD_STRING r
42607: EQUAL
42608: PUSH
42609: LD_VAR 0 4
42613: PUSH
42614: LD_INT 1
42616: ARRAY
42617: PUSH
42618: LD_INT 4
42620: ARRAY
42621: PUSH
42622: LD_VAR 0 2
42626: EQUAL
42627: AND
42628: ST_TO_ADDR
// end ;
42629: LD_VAR 0 3
42633: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42634: LD_INT 0
42636: PPUSH
// SetDir ( unit , d ) ;
42637: LD_VAR 0 1
42641: PPUSH
42642: LD_VAR 0 4
42646: PPUSH
42647: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42651: LD_VAR 0 1
42655: PPUSH
42656: LD_VAR 0 2
42660: PPUSH
42661: LD_VAR 0 3
42665: PPUSH
42666: LD_VAR 0 5
42670: PPUSH
42671: CALL_OW 48
// end ;
42675: LD_VAR 0 6
42679: RET
// export function ToNaturalNumber ( number ) ; begin
42680: LD_INT 0
42682: PPUSH
// result := number div 1 ;
42683: LD_ADDR_VAR 0 2
42687: PUSH
42688: LD_VAR 0 1
42692: PUSH
42693: LD_INT 1
42695: DIV
42696: ST_TO_ADDR
// if number < 0 then
42697: LD_VAR 0 1
42701: PUSH
42702: LD_INT 0
42704: LESS
42705: IFFALSE 42715
// result := 0 ;
42707: LD_ADDR_VAR 0 2
42711: PUSH
42712: LD_INT 0
42714: ST_TO_ADDR
// end ;
42715: LD_VAR 0 2
42719: RET
// export function SortByClass ( units , class ) ; var un ; begin
42720: LD_INT 0
42722: PPUSH
42723: PPUSH
// if not units or not class then
42724: LD_VAR 0 1
42728: NOT
42729: PUSH
42730: LD_VAR 0 2
42734: NOT
42735: OR
42736: IFFALSE 42740
// exit ;
42738: GO 42835
// result := [ ] ;
42740: LD_ADDR_VAR 0 3
42744: PUSH
42745: EMPTY
42746: ST_TO_ADDR
// for un in units do
42747: LD_ADDR_VAR 0 4
42751: PUSH
42752: LD_VAR 0 1
42756: PUSH
42757: FOR_IN
42758: IFFALSE 42833
// if GetClass ( un ) = class then
42760: LD_VAR 0 4
42764: PPUSH
42765: CALL_OW 257
42769: PUSH
42770: LD_VAR 0 2
42774: EQUAL
42775: IFFALSE 42802
// result := Insert ( result , 1 , un ) else
42777: LD_ADDR_VAR 0 3
42781: PUSH
42782: LD_VAR 0 3
42786: PPUSH
42787: LD_INT 1
42789: PPUSH
42790: LD_VAR 0 4
42794: PPUSH
42795: CALL_OW 2
42799: ST_TO_ADDR
42800: GO 42831
// result := Replace ( result , result + 1 , un ) ;
42802: LD_ADDR_VAR 0 3
42806: PUSH
42807: LD_VAR 0 3
42811: PPUSH
42812: LD_VAR 0 3
42816: PUSH
42817: LD_INT 1
42819: PLUS
42820: PPUSH
42821: LD_VAR 0 4
42825: PPUSH
42826: CALL_OW 1
42830: ST_TO_ADDR
42831: GO 42757
42833: POP
42834: POP
// end ;
42835: LD_VAR 0 3
42839: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42840: LD_INT 0
42842: PPUSH
42843: PPUSH
42844: PPUSH
42845: PPUSH
42846: PPUSH
42847: PPUSH
42848: PPUSH
// result := [ ] ;
42849: LD_ADDR_VAR 0 4
42853: PUSH
42854: EMPTY
42855: ST_TO_ADDR
// if x - r < 0 then
42856: LD_VAR 0 1
42860: PUSH
42861: LD_VAR 0 3
42865: MINUS
42866: PUSH
42867: LD_INT 0
42869: LESS
42870: IFFALSE 42882
// min_x := 0 else
42872: LD_ADDR_VAR 0 8
42876: PUSH
42877: LD_INT 0
42879: ST_TO_ADDR
42880: GO 42898
// min_x := x - r ;
42882: LD_ADDR_VAR 0 8
42886: PUSH
42887: LD_VAR 0 1
42891: PUSH
42892: LD_VAR 0 3
42896: MINUS
42897: ST_TO_ADDR
// if y - r < 0 then
42898: LD_VAR 0 2
42902: PUSH
42903: LD_VAR 0 3
42907: MINUS
42908: PUSH
42909: LD_INT 0
42911: LESS
42912: IFFALSE 42924
// min_y := 0 else
42914: LD_ADDR_VAR 0 7
42918: PUSH
42919: LD_INT 0
42921: ST_TO_ADDR
42922: GO 42940
// min_y := y - r ;
42924: LD_ADDR_VAR 0 7
42928: PUSH
42929: LD_VAR 0 2
42933: PUSH
42934: LD_VAR 0 3
42938: MINUS
42939: ST_TO_ADDR
// max_x := x + r ;
42940: LD_ADDR_VAR 0 9
42944: PUSH
42945: LD_VAR 0 1
42949: PUSH
42950: LD_VAR 0 3
42954: PLUS
42955: ST_TO_ADDR
// max_y := y + r ;
42956: LD_ADDR_VAR 0 10
42960: PUSH
42961: LD_VAR 0 2
42965: PUSH
42966: LD_VAR 0 3
42970: PLUS
42971: ST_TO_ADDR
// for _x = min_x to max_x do
42972: LD_ADDR_VAR 0 5
42976: PUSH
42977: DOUBLE
42978: LD_VAR 0 8
42982: DEC
42983: ST_TO_ADDR
42984: LD_VAR 0 9
42988: PUSH
42989: FOR_TO
42990: IFFALSE 43091
// for _y = min_y to max_y do
42992: LD_ADDR_VAR 0 6
42996: PUSH
42997: DOUBLE
42998: LD_VAR 0 7
43002: DEC
43003: ST_TO_ADDR
43004: LD_VAR 0 10
43008: PUSH
43009: FOR_TO
43010: IFFALSE 43087
// begin if not ValidHex ( _x , _y ) then
43012: LD_VAR 0 5
43016: PPUSH
43017: LD_VAR 0 6
43021: PPUSH
43022: CALL_OW 488
43026: NOT
43027: IFFALSE 43031
// continue ;
43029: GO 43009
// if GetResourceTypeXY ( _x , _y ) then
43031: LD_VAR 0 5
43035: PPUSH
43036: LD_VAR 0 6
43040: PPUSH
43041: CALL_OW 283
43045: IFFALSE 43085
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43047: LD_ADDR_VAR 0 4
43051: PUSH
43052: LD_VAR 0 4
43056: PPUSH
43057: LD_VAR 0 4
43061: PUSH
43062: LD_INT 1
43064: PLUS
43065: PPUSH
43066: LD_VAR 0 5
43070: PUSH
43071: LD_VAR 0 6
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PPUSH
43080: CALL_OW 1
43084: ST_TO_ADDR
// end ;
43085: GO 43009
43087: POP
43088: POP
43089: GO 42989
43091: POP
43092: POP
// end ;
43093: LD_VAR 0 4
43097: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43098: LD_INT 0
43100: PPUSH
43101: PPUSH
43102: PPUSH
43103: PPUSH
43104: PPUSH
43105: PPUSH
43106: PPUSH
43107: PPUSH
// if not units then
43108: LD_VAR 0 1
43112: NOT
43113: IFFALSE 43117
// exit ;
43115: GO 43645
// result := UnitFilter ( units , [ f_ok ] ) ;
43117: LD_ADDR_VAR 0 3
43121: PUSH
43122: LD_VAR 0 1
43126: PPUSH
43127: LD_INT 50
43129: PUSH
43130: EMPTY
43131: LIST
43132: PPUSH
43133: CALL_OW 72
43137: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43138: LD_ADDR_VAR 0 8
43142: PUSH
43143: LD_VAR 0 1
43147: PUSH
43148: LD_INT 1
43150: ARRAY
43151: PPUSH
43152: CALL_OW 255
43156: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43157: LD_ADDR_VAR 0 10
43161: PUSH
43162: LD_INT 29
43164: PUSH
43165: LD_INT 91
43167: PUSH
43168: LD_INT 49
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: LIST
43175: ST_TO_ADDR
// if not result then
43176: LD_VAR 0 3
43180: NOT
43181: IFFALSE 43185
// exit ;
43183: GO 43645
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43185: LD_ADDR_VAR 0 5
43189: PUSH
43190: LD_INT 81
43192: PUSH
43193: LD_VAR 0 8
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PPUSH
43202: CALL_OW 69
43206: ST_TO_ADDR
// for i in result do
43207: LD_ADDR_VAR 0 4
43211: PUSH
43212: LD_VAR 0 3
43216: PUSH
43217: FOR_IN
43218: IFFALSE 43643
// begin tag := GetTag ( i ) + 1 ;
43220: LD_ADDR_VAR 0 9
43224: PUSH
43225: LD_VAR 0 4
43229: PPUSH
43230: CALL_OW 110
43234: PUSH
43235: LD_INT 1
43237: PLUS
43238: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43239: LD_ADDR_VAR 0 7
43243: PUSH
43244: LD_VAR 0 4
43248: PPUSH
43249: CALL_OW 250
43253: PPUSH
43254: LD_VAR 0 4
43258: PPUSH
43259: CALL_OW 251
43263: PPUSH
43264: LD_INT 4
43266: PPUSH
43267: CALL 42840 0 3
43271: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43272: LD_VAR 0 4
43276: PPUSH
43277: CALL_OW 247
43281: PUSH
43282: LD_INT 2
43284: EQUAL
43285: PUSH
43286: LD_VAR 0 7
43290: PUSH
43291: LD_INT 2
43293: GREATER
43294: AND
43295: PUSH
43296: LD_VAR 0 4
43300: PPUSH
43301: CALL_OW 264
43305: PUSH
43306: LD_VAR 0 10
43310: IN
43311: NOT
43312: AND
43313: IFFALSE 43352
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43315: LD_VAR 0 4
43319: PPUSH
43320: LD_VAR 0 7
43324: PUSH
43325: LD_INT 1
43327: ARRAY
43328: PUSH
43329: LD_INT 1
43331: ARRAY
43332: PPUSH
43333: LD_VAR 0 7
43337: PUSH
43338: LD_INT 1
43340: ARRAY
43341: PUSH
43342: LD_INT 2
43344: ARRAY
43345: PPUSH
43346: CALL_OW 116
43350: GO 43641
// if path > tag then
43352: LD_VAR 0 2
43356: PUSH
43357: LD_VAR 0 9
43361: GREATER
43362: IFFALSE 43570
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43364: LD_ADDR_VAR 0 6
43368: PUSH
43369: LD_VAR 0 5
43373: PPUSH
43374: LD_INT 91
43376: PUSH
43377: LD_VAR 0 4
43381: PUSH
43382: LD_INT 8
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: LIST
43389: PPUSH
43390: CALL_OW 72
43394: ST_TO_ADDR
// if nearEnemy then
43395: LD_VAR 0 6
43399: IFFALSE 43468
// begin if GetWeapon ( i ) = ru_time_lapser then
43401: LD_VAR 0 4
43405: PPUSH
43406: CALL_OW 264
43410: PUSH
43411: LD_INT 49
43413: EQUAL
43414: IFFALSE 43442
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43416: LD_VAR 0 4
43420: PPUSH
43421: LD_VAR 0 6
43425: PPUSH
43426: LD_VAR 0 4
43430: PPUSH
43431: CALL_OW 74
43435: PPUSH
43436: CALL_OW 112
43440: GO 43466
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43442: LD_VAR 0 4
43446: PPUSH
43447: LD_VAR 0 6
43451: PPUSH
43452: LD_VAR 0 4
43456: PPUSH
43457: CALL_OW 74
43461: PPUSH
43462: CALL 44716 0 2
// end else
43466: GO 43568
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43468: LD_VAR 0 4
43472: PPUSH
43473: LD_VAR 0 2
43477: PUSH
43478: LD_VAR 0 9
43482: ARRAY
43483: PUSH
43484: LD_INT 1
43486: ARRAY
43487: PPUSH
43488: LD_VAR 0 2
43492: PUSH
43493: LD_VAR 0 9
43497: ARRAY
43498: PUSH
43499: LD_INT 2
43501: ARRAY
43502: PPUSH
43503: CALL_OW 297
43507: PUSH
43508: LD_INT 6
43510: GREATER
43511: IFFALSE 43554
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43513: LD_VAR 0 4
43517: PPUSH
43518: LD_VAR 0 2
43522: PUSH
43523: LD_VAR 0 9
43527: ARRAY
43528: PUSH
43529: LD_INT 1
43531: ARRAY
43532: PPUSH
43533: LD_VAR 0 2
43537: PUSH
43538: LD_VAR 0 9
43542: ARRAY
43543: PUSH
43544: LD_INT 2
43546: ARRAY
43547: PPUSH
43548: CALL_OW 114
43552: GO 43568
// SetTag ( i , tag ) ;
43554: LD_VAR 0 4
43558: PPUSH
43559: LD_VAR 0 9
43563: PPUSH
43564: CALL_OW 109
// end else
43568: GO 43641
// if enemy then
43570: LD_VAR 0 5
43574: IFFALSE 43641
// begin if GetWeapon ( i ) = ru_time_lapser then
43576: LD_VAR 0 4
43580: PPUSH
43581: CALL_OW 264
43585: PUSH
43586: LD_INT 49
43588: EQUAL
43589: IFFALSE 43617
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43591: LD_VAR 0 4
43595: PPUSH
43596: LD_VAR 0 5
43600: PPUSH
43601: LD_VAR 0 4
43605: PPUSH
43606: CALL_OW 74
43610: PPUSH
43611: CALL_OW 112
43615: GO 43641
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43617: LD_VAR 0 4
43621: PPUSH
43622: LD_VAR 0 5
43626: PPUSH
43627: LD_VAR 0 4
43631: PPUSH
43632: CALL_OW 74
43636: PPUSH
43637: CALL 44716 0 2
// end ; end ;
43641: GO 43217
43643: POP
43644: POP
// end ;
43645: LD_VAR 0 3
43649: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43650: LD_INT 0
43652: PPUSH
43653: PPUSH
43654: PPUSH
// if not unit or IsInUnit ( unit ) then
43655: LD_VAR 0 1
43659: NOT
43660: PUSH
43661: LD_VAR 0 1
43665: PPUSH
43666: CALL_OW 310
43670: OR
43671: IFFALSE 43675
// exit ;
43673: GO 43766
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43675: LD_ADDR_VAR 0 4
43679: PUSH
43680: LD_VAR 0 1
43684: PPUSH
43685: CALL_OW 250
43689: PPUSH
43690: LD_VAR 0 2
43694: PPUSH
43695: LD_INT 1
43697: PPUSH
43698: CALL_OW 272
43702: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43703: LD_ADDR_VAR 0 5
43707: PUSH
43708: LD_VAR 0 1
43712: PPUSH
43713: CALL_OW 251
43717: PPUSH
43718: LD_VAR 0 2
43722: PPUSH
43723: LD_INT 1
43725: PPUSH
43726: CALL_OW 273
43730: ST_TO_ADDR
// if ValidHex ( x , y ) then
43731: LD_VAR 0 4
43735: PPUSH
43736: LD_VAR 0 5
43740: PPUSH
43741: CALL_OW 488
43745: IFFALSE 43766
// ComTurnXY ( unit , x , y ) ;
43747: LD_VAR 0 1
43751: PPUSH
43752: LD_VAR 0 4
43756: PPUSH
43757: LD_VAR 0 5
43761: PPUSH
43762: CALL_OW 118
// end ;
43766: LD_VAR 0 3
43770: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43771: LD_INT 0
43773: PPUSH
43774: PPUSH
// result := false ;
43775: LD_ADDR_VAR 0 3
43779: PUSH
43780: LD_INT 0
43782: ST_TO_ADDR
// if not units then
43783: LD_VAR 0 2
43787: NOT
43788: IFFALSE 43792
// exit ;
43790: GO 43837
// for i in units do
43792: LD_ADDR_VAR 0 4
43796: PUSH
43797: LD_VAR 0 2
43801: PUSH
43802: FOR_IN
43803: IFFALSE 43835
// if See ( side , i ) then
43805: LD_VAR 0 1
43809: PPUSH
43810: LD_VAR 0 4
43814: PPUSH
43815: CALL_OW 292
43819: IFFALSE 43833
// begin result := true ;
43821: LD_ADDR_VAR 0 3
43825: PUSH
43826: LD_INT 1
43828: ST_TO_ADDR
// exit ;
43829: POP
43830: POP
43831: GO 43837
// end ;
43833: GO 43802
43835: POP
43836: POP
// end ;
43837: LD_VAR 0 3
43841: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43842: LD_INT 0
43844: PPUSH
43845: PPUSH
43846: PPUSH
43847: PPUSH
// if not unit or not points then
43848: LD_VAR 0 1
43852: NOT
43853: PUSH
43854: LD_VAR 0 2
43858: NOT
43859: OR
43860: IFFALSE 43864
// exit ;
43862: GO 43954
// dist := 99999 ;
43864: LD_ADDR_VAR 0 5
43868: PUSH
43869: LD_INT 99999
43871: ST_TO_ADDR
// for i in points do
43872: LD_ADDR_VAR 0 4
43876: PUSH
43877: LD_VAR 0 2
43881: PUSH
43882: FOR_IN
43883: IFFALSE 43952
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43885: LD_ADDR_VAR 0 6
43889: PUSH
43890: LD_VAR 0 1
43894: PPUSH
43895: LD_VAR 0 4
43899: PUSH
43900: LD_INT 1
43902: ARRAY
43903: PPUSH
43904: LD_VAR 0 4
43908: PUSH
43909: LD_INT 2
43911: ARRAY
43912: PPUSH
43913: CALL_OW 297
43917: ST_TO_ADDR
// if tmpDist < dist then
43918: LD_VAR 0 6
43922: PUSH
43923: LD_VAR 0 5
43927: LESS
43928: IFFALSE 43950
// begin result := i ;
43930: LD_ADDR_VAR 0 3
43934: PUSH
43935: LD_VAR 0 4
43939: ST_TO_ADDR
// dist := tmpDist ;
43940: LD_ADDR_VAR 0 5
43944: PUSH
43945: LD_VAR 0 6
43949: ST_TO_ADDR
// end ; end ;
43950: GO 43882
43952: POP
43953: POP
// end ;
43954: LD_VAR 0 3
43958: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43959: LD_INT 0
43961: PPUSH
// uc_side := side ;
43962: LD_ADDR_OWVAR 20
43966: PUSH
43967: LD_VAR 0 1
43971: ST_TO_ADDR
// uc_nation := 3 ;
43972: LD_ADDR_OWVAR 21
43976: PUSH
43977: LD_INT 3
43979: ST_TO_ADDR
// vc_chassis := 25 ;
43980: LD_ADDR_OWVAR 37
43984: PUSH
43985: LD_INT 25
43987: ST_TO_ADDR
// vc_engine := engine_siberite ;
43988: LD_ADDR_OWVAR 39
43992: PUSH
43993: LD_INT 3
43995: ST_TO_ADDR
// vc_control := control_computer ;
43996: LD_ADDR_OWVAR 38
44000: PUSH
44001: LD_INT 3
44003: ST_TO_ADDR
// vc_weapon := 59 ;
44004: LD_ADDR_OWVAR 40
44008: PUSH
44009: LD_INT 59
44011: ST_TO_ADDR
// result := CreateVehicle ;
44012: LD_ADDR_VAR 0 5
44016: PUSH
44017: CALL_OW 45
44021: ST_TO_ADDR
// SetDir ( result , d ) ;
44022: LD_VAR 0 5
44026: PPUSH
44027: LD_VAR 0 4
44031: PPUSH
44032: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44036: LD_VAR 0 5
44040: PPUSH
44041: LD_VAR 0 2
44045: PPUSH
44046: LD_VAR 0 3
44050: PPUSH
44051: LD_INT 0
44053: PPUSH
44054: CALL_OW 48
// end ;
44058: LD_VAR 0 5
44062: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44063: LD_INT 0
44065: PPUSH
44066: PPUSH
44067: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44068: LD_ADDR_VAR 0 2
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44091: LD_VAR 0 1
44095: NOT
44096: PUSH
44097: LD_VAR 0 1
44101: PPUSH
44102: CALL_OW 264
44106: PUSH
44107: LD_INT 12
44109: PUSH
44110: LD_INT 51
44112: PUSH
44113: LD_INT 32
44115: PUSH
44116: LD_INT 89
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: IN
44125: NOT
44126: OR
44127: IFFALSE 44131
// exit ;
44129: GO 44229
// for i := 1 to 3 do
44131: LD_ADDR_VAR 0 3
44135: PUSH
44136: DOUBLE
44137: LD_INT 1
44139: DEC
44140: ST_TO_ADDR
44141: LD_INT 3
44143: PUSH
44144: FOR_TO
44145: IFFALSE 44227
// begin tmp := GetCargo ( cargo , i ) ;
44147: LD_ADDR_VAR 0 4
44151: PUSH
44152: LD_VAR 0 1
44156: PPUSH
44157: LD_VAR 0 3
44161: PPUSH
44162: CALL_OW 289
44166: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44167: LD_ADDR_VAR 0 2
44171: PUSH
44172: LD_VAR 0 2
44176: PPUSH
44177: LD_VAR 0 3
44181: PPUSH
44182: LD_VAR 0 4
44186: PPUSH
44187: CALL_OW 1
44191: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44192: LD_ADDR_VAR 0 2
44196: PUSH
44197: LD_VAR 0 2
44201: PPUSH
44202: LD_INT 4
44204: PPUSH
44205: LD_VAR 0 2
44209: PUSH
44210: LD_INT 4
44212: ARRAY
44213: PUSH
44214: LD_VAR 0 4
44218: PLUS
44219: PPUSH
44220: CALL_OW 1
44224: ST_TO_ADDR
// end ;
44225: GO 44144
44227: POP
44228: POP
// end ;
44229: LD_VAR 0 2
44233: RET
// export function Length ( array ) ; begin
44234: LD_INT 0
44236: PPUSH
// result := array + 0 ;
44237: LD_ADDR_VAR 0 2
44241: PUSH
44242: LD_VAR 0 1
44246: PUSH
44247: LD_INT 0
44249: PLUS
44250: ST_TO_ADDR
// end ;
44251: LD_VAR 0 2
44255: RET
// export function PrepareArray ( array ) ; begin
44256: LD_INT 0
44258: PPUSH
// result := array diff 0 ;
44259: LD_ADDR_VAR 0 2
44263: PUSH
44264: LD_VAR 0 1
44268: PUSH
44269: LD_INT 0
44271: DIFF
44272: ST_TO_ADDR
// if not result [ 1 ] then
44273: LD_VAR 0 2
44277: PUSH
44278: LD_INT 1
44280: ARRAY
44281: NOT
44282: IFFALSE 44302
// result := Delete ( result , 1 ) ;
44284: LD_ADDR_VAR 0 2
44288: PUSH
44289: LD_VAR 0 2
44293: PPUSH
44294: LD_INT 1
44296: PPUSH
44297: CALL_OW 3
44301: ST_TO_ADDR
// end ;
44302: LD_VAR 0 2
44306: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44307: LD_INT 0
44309: PPUSH
44310: PPUSH
44311: PPUSH
44312: PPUSH
// sibRocketRange := 25 ;
44313: LD_ADDR_VAR 0 6
44317: PUSH
44318: LD_INT 25
44320: ST_TO_ADDR
// result := false ;
44321: LD_ADDR_VAR 0 4
44325: PUSH
44326: LD_INT 0
44328: ST_TO_ADDR
// for i := 0 to 5 do
44329: LD_ADDR_VAR 0 5
44333: PUSH
44334: DOUBLE
44335: LD_INT 0
44337: DEC
44338: ST_TO_ADDR
44339: LD_INT 5
44341: PUSH
44342: FOR_TO
44343: IFFALSE 44410
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44345: LD_VAR 0 1
44349: PPUSH
44350: LD_VAR 0 5
44354: PPUSH
44355: LD_VAR 0 6
44359: PPUSH
44360: CALL_OW 272
44364: PPUSH
44365: LD_VAR 0 2
44369: PPUSH
44370: LD_VAR 0 5
44374: PPUSH
44375: LD_VAR 0 6
44379: PPUSH
44380: CALL_OW 273
44384: PPUSH
44385: LD_VAR 0 3
44389: PPUSH
44390: CALL_OW 309
44394: IFFALSE 44408
// begin result := true ;
44396: LD_ADDR_VAR 0 4
44400: PUSH
44401: LD_INT 1
44403: ST_TO_ADDR
// exit ;
44404: POP
44405: POP
44406: GO 44412
// end ;
44408: GO 44342
44410: POP
44411: POP
// end ;
44412: LD_VAR 0 4
44416: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44417: LD_INT 0
44419: PPUSH
44420: PPUSH
44421: PPUSH
// if btype = b_depot then
44422: LD_VAR 0 2
44426: PUSH
44427: LD_INT 0
44429: EQUAL
44430: IFFALSE 44442
// begin result := true ;
44432: LD_ADDR_VAR 0 3
44436: PUSH
44437: LD_INT 1
44439: ST_TO_ADDR
// exit ;
44440: GO 44558
// end ; pom := GetBase ( depot ) ;
44442: LD_ADDR_VAR 0 4
44446: PUSH
44447: LD_VAR 0 1
44451: PPUSH
44452: CALL_OW 274
44456: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44457: LD_ADDR_VAR 0 5
44461: PUSH
44462: LD_VAR 0 2
44466: PPUSH
44467: LD_VAR 0 1
44471: PPUSH
44472: CALL_OW 248
44476: PPUSH
44477: CALL_OW 450
44481: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44482: LD_ADDR_VAR 0 3
44486: PUSH
44487: LD_VAR 0 4
44491: PPUSH
44492: LD_INT 1
44494: PPUSH
44495: CALL_OW 275
44499: PUSH
44500: LD_VAR 0 5
44504: PUSH
44505: LD_INT 1
44507: ARRAY
44508: GREATEREQUAL
44509: PUSH
44510: LD_VAR 0 4
44514: PPUSH
44515: LD_INT 2
44517: PPUSH
44518: CALL_OW 275
44522: PUSH
44523: LD_VAR 0 5
44527: PUSH
44528: LD_INT 2
44530: ARRAY
44531: GREATEREQUAL
44532: AND
44533: PUSH
44534: LD_VAR 0 4
44538: PPUSH
44539: LD_INT 3
44541: PPUSH
44542: CALL_OW 275
44546: PUSH
44547: LD_VAR 0 5
44551: PUSH
44552: LD_INT 3
44554: ARRAY
44555: GREATEREQUAL
44556: AND
44557: ST_TO_ADDR
// end ;
44558: LD_VAR 0 3
44562: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44563: LD_INT 0
44565: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44566: LD_VAR 0 1
44570: PPUSH
44571: LD_VAR 0 2
44575: PPUSH
44576: LD_INT 0
44578: PPUSH
44579: LD_INT 0
44581: PPUSH
44582: LD_INT 1
44584: PPUSH
44585: LD_INT 0
44587: PPUSH
44588: CALL_OW 587
// end ;
44592: LD_VAR 0 3
44596: RET
// export function CenterOnNow ( unit ) ; begin
44597: LD_INT 0
44599: PPUSH
// result := IsInUnit ( unit ) ;
44600: LD_ADDR_VAR 0 2
44604: PUSH
44605: LD_VAR 0 1
44609: PPUSH
44610: CALL_OW 310
44614: ST_TO_ADDR
// if not result then
44615: LD_VAR 0 2
44619: NOT
44620: IFFALSE 44632
// result := unit ;
44622: LD_ADDR_VAR 0 2
44626: PUSH
44627: LD_VAR 0 1
44631: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44632: LD_VAR 0 1
44636: PPUSH
44637: CALL_OW 87
// end ;
44641: LD_VAR 0 2
44645: RET
// export function ComMoveHex ( unit , hex ) ; begin
44646: LD_INT 0
44648: PPUSH
// if not hex then
44649: LD_VAR 0 2
44653: NOT
44654: IFFALSE 44658
// exit ;
44656: GO 44711
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44658: LD_VAR 0 2
44662: PUSH
44663: LD_INT 1
44665: ARRAY
44666: PPUSH
44667: LD_VAR 0 2
44671: PUSH
44672: LD_INT 2
44674: ARRAY
44675: PPUSH
44676: CALL_OW 428
44680: IFFALSE 44684
// exit ;
44682: GO 44711
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44684: LD_VAR 0 1
44688: PPUSH
44689: LD_VAR 0 2
44693: PUSH
44694: LD_INT 1
44696: ARRAY
44697: PPUSH
44698: LD_VAR 0 2
44702: PUSH
44703: LD_INT 2
44705: ARRAY
44706: PPUSH
44707: CALL_OW 111
// end ;
44711: LD_VAR 0 3
44715: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44716: LD_INT 0
44718: PPUSH
44719: PPUSH
44720: PPUSH
// if not unit or not enemy then
44721: LD_VAR 0 1
44725: NOT
44726: PUSH
44727: LD_VAR 0 2
44731: NOT
44732: OR
44733: IFFALSE 44737
// exit ;
44735: GO 44861
// x := GetX ( enemy ) ;
44737: LD_ADDR_VAR 0 4
44741: PUSH
44742: LD_VAR 0 2
44746: PPUSH
44747: CALL_OW 250
44751: ST_TO_ADDR
// y := GetY ( enemy ) ;
44752: LD_ADDR_VAR 0 5
44756: PUSH
44757: LD_VAR 0 2
44761: PPUSH
44762: CALL_OW 251
44766: ST_TO_ADDR
// if ValidHex ( x , y ) then
44767: LD_VAR 0 4
44771: PPUSH
44772: LD_VAR 0 5
44776: PPUSH
44777: CALL_OW 488
44781: IFFALSE 44861
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44783: LD_VAR 0 2
44787: PPUSH
44788: CALL_OW 247
44792: PUSH
44793: LD_INT 3
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: IN
44803: PUSH
44804: LD_VAR 0 1
44808: PPUSH
44809: CALL_OW 255
44813: PPUSH
44814: LD_VAR 0 2
44818: PPUSH
44819: CALL_OW 292
44823: OR
44824: IFFALSE 44842
// ComAttackUnit ( unit , enemy ) else
44826: LD_VAR 0 1
44830: PPUSH
44831: LD_VAR 0 2
44835: PPUSH
44836: CALL_OW 115
44840: GO 44861
// ComAgressiveMove ( unit , x , y ) ;
44842: LD_VAR 0 1
44846: PPUSH
44847: LD_VAR 0 4
44851: PPUSH
44852: LD_VAR 0 5
44856: PPUSH
44857: CALL_OW 114
// end ;
44861: LD_VAR 0 3
44865: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44866: LD_INT 0
44868: PPUSH
44869: PPUSH
44870: PPUSH
// list := AreaToList ( area , 0 ) ;
44871: LD_ADDR_VAR 0 5
44875: PUSH
44876: LD_VAR 0 1
44880: PPUSH
44881: LD_INT 0
44883: PPUSH
44884: CALL_OW 517
44888: ST_TO_ADDR
// if not list then
44889: LD_VAR 0 5
44893: NOT
44894: IFFALSE 44898
// exit ;
44896: GO 45028
// if all then
44898: LD_VAR 0 2
44902: IFFALSE 44990
// begin for i := 1 to list [ 1 ] do
44904: LD_ADDR_VAR 0 4
44908: PUSH
44909: DOUBLE
44910: LD_INT 1
44912: DEC
44913: ST_TO_ADDR
44914: LD_VAR 0 5
44918: PUSH
44919: LD_INT 1
44921: ARRAY
44922: PUSH
44923: FOR_TO
44924: IFFALSE 44986
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44926: LD_ADDR_VAR 0 3
44930: PUSH
44931: LD_VAR 0 3
44935: PPUSH
44936: LD_VAR 0 3
44940: PUSH
44941: LD_INT 1
44943: PLUS
44944: PPUSH
44945: LD_VAR 0 5
44949: PUSH
44950: LD_INT 1
44952: ARRAY
44953: PUSH
44954: LD_VAR 0 4
44958: ARRAY
44959: PUSH
44960: LD_VAR 0 5
44964: PUSH
44965: LD_INT 2
44967: ARRAY
44968: PUSH
44969: LD_VAR 0 4
44973: ARRAY
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PPUSH
44979: CALL_OW 1
44983: ST_TO_ADDR
44984: GO 44923
44986: POP
44987: POP
// exit ;
44988: GO 45028
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44990: LD_ADDR_VAR 0 3
44994: PUSH
44995: LD_VAR 0 5
44999: PUSH
45000: LD_INT 1
45002: ARRAY
45003: PUSH
45004: LD_INT 1
45006: ARRAY
45007: PUSH
45008: LD_VAR 0 5
45012: PUSH
45013: LD_INT 2
45015: ARRAY
45016: PUSH
45017: LD_INT 1
45019: ARRAY
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: EMPTY
45026: LIST
45027: ST_TO_ADDR
// end ;
45028: LD_VAR 0 3
45032: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45033: LD_INT 0
45035: PPUSH
45036: PPUSH
// list := AreaToList ( area , 0 ) ;
45037: LD_ADDR_VAR 0 4
45041: PUSH
45042: LD_VAR 0 1
45046: PPUSH
45047: LD_INT 0
45049: PPUSH
45050: CALL_OW 517
45054: ST_TO_ADDR
// if not list then
45055: LD_VAR 0 4
45059: NOT
45060: IFFALSE 45064
// exit ;
45062: GO 45105
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45064: LD_ADDR_VAR 0 3
45068: PUSH
45069: LD_VAR 0 4
45073: PUSH
45074: LD_INT 1
45076: ARRAY
45077: PUSH
45078: LD_INT 1
45080: ARRAY
45081: PUSH
45082: LD_VAR 0 4
45086: PUSH
45087: LD_INT 2
45089: ARRAY
45090: PUSH
45091: LD_INT 1
45093: ARRAY
45094: PUSH
45095: LD_VAR 0 2
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: LIST
45104: ST_TO_ADDR
// end ;
45105: LD_VAR 0 3
45109: RET
// export function First ( array ) ; begin
45110: LD_INT 0
45112: PPUSH
// if not array then
45113: LD_VAR 0 1
45117: NOT
45118: IFFALSE 45122
// exit ;
45120: GO 45136
// result := array [ 1 ] ;
45122: LD_ADDR_VAR 0 2
45126: PUSH
45127: LD_VAR 0 1
45131: PUSH
45132: LD_INT 1
45134: ARRAY
45135: ST_TO_ADDR
// end ;
45136: LD_VAR 0 2
45140: RET
// export function Last ( array ) ; begin
45141: LD_INT 0
45143: PPUSH
// if not array then
45144: LD_VAR 0 1
45148: NOT
45149: IFFALSE 45153
// exit ;
45151: GO 45169
// result := array [ array ] ;
45153: LD_ADDR_VAR 0 2
45157: PUSH
45158: LD_VAR 0 1
45162: PUSH
45163: LD_VAR 0 1
45167: ARRAY
45168: ST_TO_ADDR
// end ;
45169: LD_VAR 0 2
45173: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45174: LD_INT 0
45176: PPUSH
45177: PPUSH
// result := [ ] ;
45178: LD_ADDR_VAR 0 5
45182: PUSH
45183: EMPTY
45184: ST_TO_ADDR
// if not array then
45185: LD_VAR 0 1
45189: NOT
45190: IFFALSE 45194
// exit ;
45192: GO 45306
// for i := 1 to array do
45194: LD_ADDR_VAR 0 6
45198: PUSH
45199: DOUBLE
45200: LD_INT 1
45202: DEC
45203: ST_TO_ADDR
45204: LD_VAR 0 1
45208: PUSH
45209: FOR_TO
45210: IFFALSE 45304
// if array [ i ] [ index ] = value then
45212: LD_VAR 0 1
45216: PUSH
45217: LD_VAR 0 6
45221: ARRAY
45222: PUSH
45223: LD_VAR 0 2
45227: ARRAY
45228: PUSH
45229: LD_VAR 0 3
45233: EQUAL
45234: IFFALSE 45302
// begin if indexColumn then
45236: LD_VAR 0 4
45240: IFFALSE 45276
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45242: LD_ADDR_VAR 0 5
45246: PUSH
45247: LD_VAR 0 5
45251: PPUSH
45252: LD_VAR 0 1
45256: PUSH
45257: LD_VAR 0 6
45261: ARRAY
45262: PUSH
45263: LD_VAR 0 4
45267: ARRAY
45268: PPUSH
45269: CALL 40494 0 2
45273: ST_TO_ADDR
45274: GO 45302
// result := Join ( result , array [ i ] ) ;
45276: LD_ADDR_VAR 0 5
45280: PUSH
45281: LD_VAR 0 5
45285: PPUSH
45286: LD_VAR 0 1
45290: PUSH
45291: LD_VAR 0 6
45295: ARRAY
45296: PPUSH
45297: CALL 40494 0 2
45301: ST_TO_ADDR
// end ;
45302: GO 45209
45304: POP
45305: POP
// end ;
45306: LD_VAR 0 5
45310: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45311: LD_INT 0
45313: PPUSH
// if not vehicles or not parkingPoint then
45314: LD_VAR 0 1
45318: NOT
45319: PUSH
45320: LD_VAR 0 2
45324: NOT
45325: OR
45326: IFFALSE 45330
// exit ;
45328: GO 45428
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45330: LD_ADDR_VAR 0 1
45334: PUSH
45335: LD_VAR 0 1
45339: PPUSH
45340: LD_INT 50
45342: PUSH
45343: EMPTY
45344: LIST
45345: PUSH
45346: LD_INT 3
45348: PUSH
45349: LD_INT 92
45351: PUSH
45352: LD_VAR 0 2
45356: PUSH
45357: LD_INT 1
45359: ARRAY
45360: PUSH
45361: LD_VAR 0 2
45365: PUSH
45366: LD_INT 2
45368: ARRAY
45369: PUSH
45370: LD_INT 8
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PPUSH
45387: CALL_OW 72
45391: ST_TO_ADDR
// if not vehicles then
45392: LD_VAR 0 1
45396: NOT
45397: IFFALSE 45401
// exit ;
45399: GO 45428
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45401: LD_VAR 0 1
45405: PPUSH
45406: LD_VAR 0 2
45410: PUSH
45411: LD_INT 1
45413: ARRAY
45414: PPUSH
45415: LD_VAR 0 2
45419: PUSH
45420: LD_INT 2
45422: ARRAY
45423: PPUSH
45424: CALL_OW 111
// end ;
45428: LD_VAR 0 3
45432: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45433: LD_INT 0
45435: PPUSH
45436: PPUSH
45437: PPUSH
// if not side or not area then
45438: LD_VAR 0 1
45442: NOT
45443: PUSH
45444: LD_VAR 0 2
45448: NOT
45449: OR
45450: IFFALSE 45454
// exit ;
45452: GO 45573
// tmp := AreaToList ( area , 0 ) ;
45454: LD_ADDR_VAR 0 5
45458: PUSH
45459: LD_VAR 0 2
45463: PPUSH
45464: LD_INT 0
45466: PPUSH
45467: CALL_OW 517
45471: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45472: LD_ADDR_VAR 0 4
45476: PUSH
45477: DOUBLE
45478: LD_INT 1
45480: DEC
45481: ST_TO_ADDR
45482: LD_VAR 0 5
45486: PUSH
45487: LD_INT 1
45489: ARRAY
45490: PUSH
45491: FOR_TO
45492: IFFALSE 45571
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45494: LD_VAR 0 5
45498: PUSH
45499: LD_INT 1
45501: ARRAY
45502: PUSH
45503: LD_VAR 0 4
45507: ARRAY
45508: PPUSH
45509: LD_VAR 0 5
45513: PUSH
45514: LD_INT 2
45516: ARRAY
45517: PUSH
45518: LD_VAR 0 4
45522: ARRAY
45523: PPUSH
45524: CALL_OW 351
45528: IFFALSE 45569
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45530: LD_VAR 0 5
45534: PUSH
45535: LD_INT 1
45537: ARRAY
45538: PUSH
45539: LD_VAR 0 4
45543: ARRAY
45544: PPUSH
45545: LD_VAR 0 5
45549: PUSH
45550: LD_INT 2
45552: ARRAY
45553: PUSH
45554: LD_VAR 0 4
45558: ARRAY
45559: PPUSH
45560: LD_VAR 0 1
45564: PPUSH
45565: CALL_OW 244
// end ;
45569: GO 45491
45571: POP
45572: POP
// end ; end_of_file
45573: LD_VAR 0 3
45577: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpDisplayStrings , mpGameActive ; export function InitMultiplayer ; var i ; begin
45578: LD_INT 0
45580: PPUSH
45581: PPUSH
// disable ( mpActive ) ;
45582: LD_INT 100
45584: DISABLE_MARKED
// disable ( mpWin ) ;
45585: LD_INT 101
45587: DISABLE_MARKED
// disable ( mpLose ) ;
45588: LD_INT 102
45590: DISABLE_MARKED
// mpGameType := 0 ;
45591: LD_ADDR_EXP 1
45595: PUSH
45596: LD_INT 0
45598: ST_TO_ADDR
// mpGameSettings := [ ] ;
45599: LD_ADDR_EXP 4
45603: PUSH
45604: EMPTY
45605: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45606: LD_ADDR_EXP 2
45610: PUSH
45611: EMPTY
45612: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45613: LD_ADDR_EXP 3
45617: PUSH
45618: EMPTY
45619: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45620: LD_ADDR_EXP 27
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: LD_INT 2
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45635: LD_ADDR_EXP 10
45639: PUSH
45640: EMPTY
45641: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45642: LD_ADDR_EXP 11
45646: PUSH
45647: EMPTY
45648: ST_TO_ADDR
// mpDepots := [ ] ;
45649: LD_ADDR_EXP 12
45653: PUSH
45654: EMPTY
45655: ST_TO_ADDR
// mpBuildings := [ ] ;
45656: LD_ADDR_EXP 15
45660: PUSH
45661: EMPTY
45662: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45663: LD_ADDR_EXP 16
45667: PUSH
45668: EMPTY
45669: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45670: LD_ADDR_EXP 17
45674: PUSH
45675: EMPTY
45676: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45677: LD_ADDR_EXP 18
45681: PUSH
45682: EMPTY
45683: ST_TO_ADDR
// mpStartingResources := [ ] ;
45684: LD_ADDR_EXP 13
45688: PUSH
45689: EMPTY
45690: ST_TO_ADDR
// mpStartPos := [ ] ;
45691: LD_ADDR_EXP 19
45695: PUSH
45696: EMPTY
45697: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45698: LD_ADDR_EXP 20
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45707: LD_ADDR_EXP 21
45711: PUSH
45712: EMPTY
45713: ST_TO_ADDR
// mpApemans := [ ] ;
45714: LD_ADDR_EXP 28
45718: PUSH
45719: EMPTY
45720: ST_TO_ADDR
// mpApemansArea := [ ] ;
45721: LD_ADDR_EXP 29
45725: PUSH
45726: EMPTY
45727: ST_TO_ADDR
// mpRespawn := [ ] ;
45728: LD_ADDR_EXP 30
45732: PUSH
45733: EMPTY
45734: ST_TO_ADDR
// mpKingArea := 0 ;
45735: LD_ADDR_EXP 31
45739: PUSH
45740: LD_INT 0
45742: ST_TO_ADDR
// mpPoints := [ ] ;
45743: LD_ADDR_EXP 32
45747: PUSH
45748: EMPTY
45749: ST_TO_ADDR
// mpVehicles := 0 ;
45750: LD_ADDR_EXP 33
45754: PUSH
45755: LD_INT 0
45757: ST_TO_ADDR
// mpShipments := 0 ;
45758: LD_ADDR_EXP 25
45762: PUSH
45763: LD_INT 0
45765: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45766: LD_ADDR_EXP 23
45770: PUSH
45771: LD_INT 3
45773: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45774: LD_ADDR_EXP 22
45778: PUSH
45779: LD_INT 15
45781: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45782: LD_ADDR_EXP 34
45786: PUSH
45787: LD_INT 0
45789: ST_TO_ADDR
// mpGameActive := false ;
45790: LD_ADDR_EXP 35
45794: PUSH
45795: LD_INT 0
45797: ST_TO_ADDR
// for i := 1 to 32 do
45798: LD_ADDR_VAR 0 2
45802: PUSH
45803: DOUBLE
45804: LD_INT 1
45806: DEC
45807: ST_TO_ADDR
45808: LD_INT 32
45810: PUSH
45811: FOR_TO
45812: IFFALSE 45839
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
45814: LD_ADDR_EXP 4
45818: PUSH
45819: LD_EXP 4
45823: PPUSH
45824: LD_VAR 0 2
45828: PPUSH
45829: LD_INT 0
45831: PPUSH
45832: CALL_OW 1
45836: ST_TO_ADDR
45837: GO 45811
45839: POP
45840: POP
// end ;
45841: LD_VAR 0 1
45845: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
45846: LD_INT 0
45848: PPUSH
45849: PPUSH
45850: PPUSH
45851: PPUSH
45852: PPUSH
45853: PPUSH
45854: PPUSH
45855: PPUSH
45856: PPUSH
45857: PPUSH
45858: PPUSH
45859: PPUSH
45860: PPUSH
45861: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
45862: LD_ADDR_VAR 0 14
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: LD_INT 3
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: LIST
45880: ST_TO_ADDR
// for i in gameTypes do
45881: LD_ADDR_VAR 0 2
45885: PUSH
45886: LD_VAR 0 14
45890: PUSH
45891: FOR_IN
45892: IFFALSE 45901
// disable ( i ) ;
45894: LD_VAR 0 2
45898: DISABLE_MARKED
45899: GO 45891
45901: POP
45902: POP
// if Multiplayer then
45903: LD_OWVAR 4
45907: IFFALSE 46091
// begin mpGameType := mp_game_type ;
45909: LD_ADDR_EXP 1
45913: PUSH
45914: LD_OWVAR 6
45918: ST_TO_ADDR
// your_side := mp_player_side ;
45919: LD_ADDR_OWVAR 2
45923: PUSH
45924: LD_OWVAR 7
45928: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
45929: LD_ADDR_EXP 5
45933: PUSH
45934: LD_OWVAR 17
45938: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
45939: LD_ADDR_EXP 6
45943: PUSH
45944: LD_OWVAR 15
45948: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
45949: LD_ADDR_EXP 7
45953: PUSH
45954: LD_OWVAR 16
45958: ST_TO_ADDR
// mpTeams := mp_teams ;
45959: LD_ADDR_EXP 8
45963: PUSH
45964: LD_OWVAR 12
45968: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
45969: LD_ADDR_VAR 0 2
45973: PUSH
45974: DOUBLE
45975: LD_INT 1
45977: DEC
45978: ST_TO_ADDR
45979: LD_EXP 2
45983: PPUSH
45984: CALL 4905 0 1
45988: PUSH
45989: FOR_TO
45990: IFFALSE 46066
// begin setting := mpGameSettingsKeys [ i ] ;
45992: LD_ADDR_VAR 0 12
45996: PUSH
45997: LD_EXP 2
46001: PUSH
46002: LD_VAR 0 2
46006: ARRAY
46007: ST_TO_ADDR
// if setting then
46008: LD_VAR 0 12
46012: IFFALSE 46064
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46014: LD_ADDR_EXP 4
46018: PUSH
46019: LD_EXP 4
46023: PPUSH
46024: LD_VAR 0 2
46028: PPUSH
46029: LD_EXP 3
46033: PUSH
46034: LD_VAR 0 2
46038: ARRAY
46039: PUSH
46040: LD_VAR 0 2
46044: PUSH
46045: LD_INT 1
46047: MINUS
46048: PPUSH
46049: CALL_OW 426
46053: PUSH
46054: LD_INT 1
46056: PLUS
46057: ARRAY
46058: PPUSH
46059: CALL_OW 1
46063: ST_TO_ADDR
// end ;
46064: GO 45989
46066: POP
46067: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46068: LD_ADDR_EXP 9
46072: PUSH
46073: LD_EXP 6
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: DIFF
46084: PUSH
46085: LD_INT 1
46087: GREATER
46088: ST_TO_ADDR
// end else
46089: GO 46091
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46091: LD_EXP 1
46095: PPUSH
46096: CALL 812 0 1
// if Count ( mpMarkedAreas ) then
46100: LD_EXP 16
46104: PPUSH
46105: CALL 4905 0 1
46109: IFFALSE 46140
// begin for i in mpMarkedAreas do
46111: LD_ADDR_VAR 0 2
46115: PUSH
46116: LD_EXP 16
46120: PUSH
46121: FOR_IN
46122: IFFALSE 46138
// SetAreaMapShow ( i , 0 ) ;
46124: LD_VAR 0 2
46128: PPUSH
46129: LD_INT 0
46131: PPUSH
46132: CALL_OW 424
46136: GO 46121
46138: POP
46139: POP
// end ; for i := 1 to 8 do
46140: LD_ADDR_VAR 0 2
46144: PUSH
46145: DOUBLE
46146: LD_INT 1
46148: DEC
46149: ST_TO_ADDR
46150: LD_INT 8
46152: PUSH
46153: FOR_TO
46154: IFFALSE 47356
// begin if not mpSidePositions [ i ] then
46156: LD_EXP 5
46160: PUSH
46161: LD_VAR 0 2
46165: ARRAY
46166: NOT
46167: IFFALSE 46171
// continue ;
46169: GO 46153
// side := i ;
46171: LD_ADDR_VAR 0 7
46175: PUSH
46176: LD_VAR 0 2
46180: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46181: LD_ADDR_VAR 0 9
46185: PUSH
46186: LD_EXP 7
46190: PUSH
46191: LD_VAR 0 2
46195: ARRAY
46196: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46197: LD_ADDR_VAR 0 8
46201: PUSH
46202: LD_EXP 5
46206: PUSH
46207: LD_VAR 0 2
46211: ARRAY
46212: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46213: LD_EXP 10
46217: PPUSH
46218: CALL 4905 0 1
46222: IFFALSE 46299
// begin for j in mpOilDeposits [ pos ] do
46224: LD_ADDR_VAR 0 3
46228: PUSH
46229: LD_EXP 10
46233: PUSH
46234: LD_VAR 0 8
46238: ARRAY
46239: PUSH
46240: FOR_IN
46241: IFFALSE 46297
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46243: LD_VAR 0 3
46247: PUSH
46248: LD_INT 1
46250: ARRAY
46251: PPUSH
46252: LD_VAR 0 3
46256: PUSH
46257: LD_INT 2
46259: ARRAY
46260: PPUSH
46261: LD_INT 2
46263: PPUSH
46264: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46268: LD_VAR 0 3
46272: PUSH
46273: LD_INT 1
46275: ARRAY
46276: PPUSH
46277: LD_VAR 0 3
46281: PUSH
46282: LD_INT 2
46284: ARRAY
46285: PPUSH
46286: LD_VAR 0 7
46290: PPUSH
46291: CALL_OW 441
// end ;
46295: GO 46240
46297: POP
46298: POP
// end ; if Count ( mpSibDeposits ) then
46299: LD_EXP 11
46303: PPUSH
46304: CALL 4905 0 1
46308: IFFALSE 46385
// begin for j in mpSibDeposits [ pos ] do
46310: LD_ADDR_VAR 0 3
46314: PUSH
46315: LD_EXP 11
46319: PUSH
46320: LD_VAR 0 8
46324: ARRAY
46325: PUSH
46326: FOR_IN
46327: IFFALSE 46383
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46329: LD_VAR 0 3
46333: PUSH
46334: LD_INT 1
46336: ARRAY
46337: PPUSH
46338: LD_VAR 0 3
46342: PUSH
46343: LD_INT 2
46345: ARRAY
46346: PPUSH
46347: LD_INT 3
46349: PPUSH
46350: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46354: LD_VAR 0 3
46358: PUSH
46359: LD_INT 1
46361: ARRAY
46362: PPUSH
46363: LD_VAR 0 3
46367: PUSH
46368: LD_INT 2
46370: ARRAY
46371: PPUSH
46372: LD_VAR 0 7
46376: PPUSH
46377: CALL_OW 441
// end ;
46381: GO 46326
46383: POP
46384: POP
// end ; InitBc ;
46385: CALL_OW 21
// InitUc ;
46389: CALL_OW 18
// uc_side := side ;
46393: LD_ADDR_OWVAR 20
46397: PUSH
46398: LD_VAR 0 7
46402: ST_TO_ADDR
// uc_nation := nation ;
46403: LD_ADDR_OWVAR 21
46407: PUSH
46408: LD_VAR 0 9
46412: ST_TO_ADDR
// if Count ( mpDepots ) then
46413: LD_EXP 12
46417: PPUSH
46418: CALL 4905 0 1
46422: IFFALSE 46578
// begin bc_level := 0 ;
46424: LD_ADDR_OWVAR 43
46428: PUSH
46429: LD_INT 0
46431: ST_TO_ADDR
// bc_type := b_depot ;
46432: LD_ADDR_OWVAR 42
46436: PUSH
46437: LD_INT 0
46439: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46440: LD_ADDR_VAR 0 4
46444: PUSH
46445: LD_EXP 12
46449: PUSH
46450: LD_VAR 0 8
46454: ARRAY
46455: PUSH
46456: LD_INT 1
46458: ARRAY
46459: PPUSH
46460: LD_EXP 12
46464: PUSH
46465: LD_VAR 0 8
46469: ARRAY
46470: PUSH
46471: LD_INT 2
46473: ARRAY
46474: PPUSH
46475: LD_EXP 12
46479: PUSH
46480: LD_VAR 0 8
46484: ARRAY
46485: PUSH
46486: LD_INT 3
46488: ARRAY
46489: PPUSH
46490: CALL_OW 47
46494: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46495: LD_VAR 0 4
46499: PPUSH
46500: LD_STRING @
46502: PUSH
46503: LD_VAR 0 7
46507: STR
46508: PPUSH
46509: CALL_OW 500
// if Count ( mpStartingResources ) then
46513: LD_EXP 13
46517: PPUSH
46518: CALL 4905 0 1
46522: IFFALSE 46576
// begin for j := 1 to mpStartingResources do
46524: LD_ADDR_VAR 0 3
46528: PUSH
46529: DOUBLE
46530: LD_INT 1
46532: DEC
46533: ST_TO_ADDR
46534: LD_EXP 13
46538: PUSH
46539: FOR_TO
46540: IFFALSE 46574
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46542: LD_VAR 0 4
46546: PPUSH
46547: CALL_OW 274
46551: PPUSH
46552: LD_VAR 0 3
46556: PPUSH
46557: LD_EXP 13
46561: PUSH
46562: LD_VAR 0 3
46566: ARRAY
46567: PPUSH
46568: CALL_OW 277
46572: GO 46539
46574: POP
46575: POP
// end ; end else
46576: GO 46725
// if Count ( mpStartingResources ) then
46578: LD_EXP 13
46582: PPUSH
46583: CALL 4905 0 1
46587: IFFALSE 46725
// begin for j := 1 to mpStartingResources do
46589: LD_ADDR_VAR 0 3
46593: PUSH
46594: DOUBLE
46595: LD_INT 1
46597: DEC
46598: ST_TO_ADDR
46599: LD_EXP 13
46603: PUSH
46604: FOR_TO
46605: IFFALSE 46723
// begin resources := mpStartingResources [ j ] ;
46607: LD_ADDR_VAR 0 13
46611: PUSH
46612: LD_EXP 13
46616: PUSH
46617: LD_VAR 0 3
46621: ARRAY
46622: ST_TO_ADDR
// repeat if resources >= 50 then
46623: LD_VAR 0 13
46627: PUSH
46628: LD_INT 50
46630: GREATEREQUAL
46631: IFFALSE 46677
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46633: LD_VAR 0 3
46637: PPUSH
46638: LD_INT 5
46640: PPUSH
46641: LD_VAR 0 5
46645: PPUSH
46646: LD_VAR 0 6
46650: PPUSH
46651: LD_INT 4
46653: PPUSH
46654: LD_INT 0
46656: PPUSH
46657: CALL_OW 60
// resources := resources - 50 ;
46661: LD_ADDR_VAR 0 13
46665: PUSH
46666: LD_VAR 0 13
46670: PUSH
46671: LD_INT 50
46673: MINUS
46674: ST_TO_ADDR
// end else
46675: GO 46711
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46677: LD_VAR 0 3
46681: PPUSH
46682: LD_VAR 0 13
46686: PUSH
46687: LD_INT 10
46689: DIV
46690: PPUSH
46691: LD_VAR 0 5
46695: PPUSH
46696: LD_VAR 0 6
46700: PPUSH
46701: LD_INT 4
46703: PPUSH
46704: LD_INT 0
46706: PPUSH
46707: CALL_OW 60
// until resources <= 0 ;
46711: LD_VAR 0 13
46715: PUSH
46716: LD_INT 0
46718: LESSEQUAL
46719: IFFALSE 46623
// end ;
46721: GO 46604
46723: POP
46724: POP
// end ; if Count ( mpBuildings ) then
46725: LD_EXP 15
46729: PPUSH
46730: CALL 4905 0 1
46734: IFFALSE 46812
// begin for j in mpBuildings [ pos ] do
46736: LD_ADDR_VAR 0 3
46740: PUSH
46741: LD_EXP 15
46745: PUSH
46746: LD_VAR 0 8
46750: ARRAY
46751: PUSH
46752: FOR_IN
46753: IFFALSE 46810
// begin bc_level := 0 ;
46755: LD_ADDR_OWVAR 43
46759: PUSH
46760: LD_INT 0
46762: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46763: LD_ADDR_OWVAR 42
46767: PUSH
46768: LD_VAR 0 3
46772: PUSH
46773: LD_INT 1
46775: ARRAY
46776: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46777: LD_VAR 0 3
46781: PUSH
46782: LD_INT 2
46784: ARRAY
46785: PPUSH
46786: LD_VAR 0 3
46790: PUSH
46791: LD_INT 3
46793: ARRAY
46794: PPUSH
46795: LD_VAR 0 3
46799: PUSH
46800: LD_INT 4
46802: ARRAY
46803: PPUSH
46804: CALL_OW 47
// end ;
46808: GO 46752
46810: POP
46811: POP
// end ; if mpBattleFlag > - 1 then
46812: LD_EXP 20
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: GREATER
46821: IFFALSE 46980
// begin x := mpStartPos [ pos ] [ 1 ] ;
46823: LD_ADDR_VAR 0 5
46827: PUSH
46828: LD_EXP 19
46832: PUSH
46833: LD_VAR 0 8
46837: ARRAY
46838: PUSH
46839: LD_INT 1
46841: ARRAY
46842: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
46843: LD_ADDR_VAR 0 6
46847: PUSH
46848: LD_EXP 19
46852: PUSH
46853: LD_VAR 0 8
46857: ARRAY
46858: PUSH
46859: LD_INT 2
46861: ARRAY
46862: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
46863: LD_VAR 0 5
46867: PPUSH
46868: LD_VAR 0 6
46872: PPUSH
46873: LD_INT 12
46875: PPUSH
46876: LD_INT 2
46878: PPUSH
46879: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
46883: LD_ADDR_EXP 21
46887: PUSH
46888: LD_EXP 21
46892: PPUSH
46893: LD_VAR 0 7
46897: PPUSH
46898: LD_VAR 0 7
46902: PPUSH
46903: LD_VAR 0 5
46907: PPUSH
46908: LD_VAR 0 6
46912: PPUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 100
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: LD_INT 70
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 3
46935: PUSH
46936: LD_INT 40
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 10
46945: PUSH
46946: LD_INT 25
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 20
46955: PUSH
46956: LD_INT 100
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: PPUSH
46970: CALL_OW 418
46974: PPUSH
46975: CALL_OW 1
46979: ST_TO_ADDR
// end ; if mpApemans then
46980: LD_EXP 28
46984: IFFALSE 47063
// begin for j := 1 to mpApemans do
46986: LD_ADDR_VAR 0 3
46990: PUSH
46991: DOUBLE
46992: LD_INT 1
46994: DEC
46995: ST_TO_ADDR
46996: LD_EXP 28
47000: PUSH
47001: FOR_TO
47002: IFFALSE 47061
// begin PrepareApeman ( - 5 ) ;
47004: LD_INT 5
47006: NEG
47007: PPUSH
47008: CALL 36762 0 1
// ape := CreateHuman ;
47012: LD_ADDR_VAR 0 10
47016: PUSH
47017: CALL_OW 44
47021: ST_TO_ADDR
// SetTag ( ape , side ) ;
47022: LD_VAR 0 10
47026: PPUSH
47027: LD_VAR 0 7
47031: PPUSH
47032: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ side ] , false ) ;
47036: LD_VAR 0 10
47040: PPUSH
47041: LD_EXP 29
47045: PUSH
47046: LD_VAR 0 7
47050: ARRAY
47051: PPUSH
47052: LD_INT 0
47054: PPUSH
47055: CALL_OW 49
// end ;
47059: GO 47001
47061: POP
47062: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47063: LD_EXP 24
47067: PUSH
47068: LD_INT 20
47070: PPUSH
47071: LD_VAR 0 7
47075: PPUSH
47076: CALL_OW 321
47080: PUSH
47081: LD_INT 1
47083: EQUAL
47084: AND
47085: IFFALSE 47102
// SetTech ( tech_SibDet , side , state_researched ) ;
47087: LD_INT 20
47089: PPUSH
47090: LD_VAR 0 7
47094: PPUSH
47095: LD_INT 2
47097: PPUSH
47098: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47102: LD_INT 24
47104: PPUSH
47105: LD_VAR 0 7
47109: PPUSH
47110: LD_INT 0
47112: PPUSH
47113: CALL_OW 322
// if mpSibBomb = 1 then
47117: LD_EXP 26
47121: PUSH
47122: LD_INT 1
47124: EQUAL
47125: IFFALSE 47144
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47127: LD_INT 25
47129: PPUSH
47130: LD_VAR 0 7
47134: PPUSH
47135: LD_INT 1
47137: PPUSH
47138: CALL_OW 322
// end else
47142: GO 47159
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47144: LD_INT 25
47146: PPUSH
47147: LD_VAR 0 7
47151: PPUSH
47152: LD_INT 0
47154: PPUSH
47155: CALL_OW 322
// end ; if mpVehicles then
47159: LD_EXP 33
47163: IFFALSE 47262
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47165: LD_ADDR_VAR 0 3
47169: PUSH
47170: LD_VAR 0 7
47174: PPUSH
47175: LD_VAR 0 9
47179: PPUSH
47180: LD_EXP 33
47184: PPUSH
47185: CALL 48038 0 3
47189: PUSH
47190: FOR_IN
47191: IFFALSE 47260
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47193: LD_VAR 0 3
47197: PPUSH
47198: LD_INT 0
47200: PPUSH
47201: LD_INT 5
47203: PPUSH
47204: CALL_OW 12
47208: PPUSH
47209: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47213: LD_VAR 0 3
47217: PPUSH
47218: LD_EXP 19
47222: PUSH
47223: LD_VAR 0 8
47227: ARRAY
47228: PUSH
47229: LD_INT 1
47231: ARRAY
47232: PPUSH
47233: LD_EXP 19
47237: PUSH
47238: LD_VAR 0 8
47242: ARRAY
47243: PUSH
47244: LD_INT 2
47246: ARRAY
47247: PPUSH
47248: LD_INT 12
47250: PPUSH
47251: LD_INT 0
47253: PPUSH
47254: CALL_OW 50
// end ;
47258: GO 47190
47260: POP
47261: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47262: LD_ADDR_VAR 0 11
47266: PUSH
47267: LD_VAR 0 7
47271: PPUSH
47272: LD_VAR 0 9
47276: PPUSH
47277: LD_EXP 22
47281: PPUSH
47282: LD_EXP 23
47286: PPUSH
47287: CALL 47768 0 4
47291: ST_TO_ADDR
// for j in team do
47292: LD_ADDR_VAR 0 3
47296: PUSH
47297: LD_VAR 0 11
47301: PUSH
47302: FOR_IN
47303: IFFALSE 47352
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47305: LD_VAR 0 3
47309: PPUSH
47310: LD_EXP 19
47314: PUSH
47315: LD_VAR 0 8
47319: ARRAY
47320: PUSH
47321: LD_INT 1
47323: ARRAY
47324: PPUSH
47325: LD_EXP 19
47329: PUSH
47330: LD_VAR 0 8
47334: ARRAY
47335: PUSH
47336: LD_INT 2
47338: ARRAY
47339: PPUSH
47340: LD_INT 12
47342: PPUSH
47343: LD_INT 0
47345: PPUSH
47346: CALL_OW 50
47350: GO 47302
47352: POP
47353: POP
// end ;
47354: GO 46153
47356: POP
47357: POP
// if not mpTeamGame then
47358: LD_EXP 9
47362: NOT
47363: IFFALSE 47461
// begin for i := 1 to 8 do
47365: LD_ADDR_VAR 0 2
47369: PUSH
47370: DOUBLE
47371: LD_INT 1
47373: DEC
47374: ST_TO_ADDR
47375: LD_INT 8
47377: PUSH
47378: FOR_TO
47379: IFFALSE 47457
// for j := 1 to 8 do
47381: LD_ADDR_VAR 0 3
47385: PUSH
47386: DOUBLE
47387: LD_INT 1
47389: DEC
47390: ST_TO_ADDR
47391: LD_INT 8
47393: PUSH
47394: FOR_TO
47395: IFFALSE 47453
// if i <> j then
47397: LD_VAR 0 2
47401: PUSH
47402: LD_VAR 0 3
47406: NONEQUAL
47407: IFFALSE 47431
// SetAttitude ( i , j , att_neutral , true ) else
47409: LD_VAR 0 2
47413: PPUSH
47414: LD_VAR 0 3
47418: PPUSH
47419: LD_INT 0
47421: PPUSH
47422: LD_INT 1
47424: PPUSH
47425: CALL_OW 80
47429: GO 47451
// SetAttitude ( i , j , att_friend , true ) ;
47431: LD_VAR 0 2
47435: PPUSH
47436: LD_VAR 0 3
47440: PPUSH
47441: LD_INT 1
47443: PPUSH
47444: LD_INT 1
47446: PPUSH
47447: CALL_OW 80
47451: GO 47394
47453: POP
47454: POP
47455: GO 47378
47457: POP
47458: POP
// end else
47459: GO 47530
// begin if mpSharedVision then
47461: LD_EXP 14
47465: IFFALSE 47530
// begin for i in mpTeams do
47467: LD_ADDR_VAR 0 2
47471: PUSH
47472: LD_EXP 8
47476: PUSH
47477: FOR_IN
47478: IFFALSE 47528
// for j := 2 to i do
47480: LD_ADDR_VAR 0 3
47484: PUSH
47485: DOUBLE
47486: LD_INT 2
47488: DEC
47489: ST_TO_ADDR
47490: LD_VAR 0 2
47494: PUSH
47495: FOR_TO
47496: IFFALSE 47524
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47498: LD_VAR 0 2
47502: PUSH
47503: LD_VAR 0 3
47507: ARRAY
47508: PPUSH
47509: LD_VAR 0 2
47513: PUSH
47514: LD_INT 1
47516: ARRAY
47517: PPUSH
47518: CALL_OW 343
47522: GO 47495
47524: POP
47525: POP
47526: GO 47477
47528: POP
47529: POP
// end ; end ; for i := 1 to 8 do
47530: LD_ADDR_VAR 0 2
47534: PUSH
47535: DOUBLE
47536: LD_INT 1
47538: DEC
47539: ST_TO_ADDR
47540: LD_INT 8
47542: PUSH
47543: FOR_TO
47544: IFFALSE 47634
// for j := 1 to 8 do
47546: LD_ADDR_VAR 0 3
47550: PUSH
47551: DOUBLE
47552: LD_INT 1
47554: DEC
47555: ST_TO_ADDR
47556: LD_INT 8
47558: PUSH
47559: FOR_TO
47560: IFFALSE 47630
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47562: LD_EXP 6
47566: PUSH
47567: LD_VAR 0 2
47571: ARRAY
47572: PUSH
47573: LD_EXP 6
47577: PUSH
47578: LD_VAR 0 3
47582: ARRAY
47583: EQUAL
47584: IFFALSE 47608
// SetAttitude ( i , j , att_friend , true ) else
47586: LD_VAR 0 2
47590: PPUSH
47591: LD_VAR 0 3
47595: PPUSH
47596: LD_INT 1
47598: PPUSH
47599: LD_INT 1
47601: PPUSH
47602: CALL_OW 80
47606: GO 47628
// SetAttitude ( i , j , att_enemy , true ) ;
47608: LD_VAR 0 2
47612: PPUSH
47613: LD_VAR 0 3
47617: PPUSH
47618: LD_INT 2
47620: PPUSH
47621: LD_INT 1
47623: PPUSH
47624: CALL_OW 80
47628: GO 47559
47630: POP
47631: POP
47632: GO 47543
47634: POP
47635: POP
// music_nat := mpSideNations [ your_side ] ;
47636: LD_ADDR_OWVAR 71
47640: PUSH
47641: LD_EXP 7
47645: PUSH
47646: LD_OWVAR 2
47650: ARRAY
47651: ST_TO_ADDR
// if IAmSpec then
47652: CALL_OW 531
47656: IFFALSE 47697
// begin FogOff ( true ) ;
47658: LD_INT 1
47660: PPUSH
47661: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47665: LD_EXP 27
47669: PUSH
47670: LD_INT 1
47672: ARRAY
47673: PUSH
47674: LD_INT 2
47676: DIV
47677: PPUSH
47678: LD_EXP 27
47682: PUSH
47683: LD_INT 2
47685: ARRAY
47686: PUSH
47687: LD_INT 2
47689: DIV
47690: PPUSH
47691: CALL_OW 86
// end else
47695: GO 47743
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47697: LD_EXP 19
47701: PUSH
47702: LD_EXP 5
47706: PUSH
47707: LD_OWVAR 2
47711: ARRAY
47712: ARRAY
47713: PUSH
47714: LD_INT 1
47716: ARRAY
47717: PPUSH
47718: LD_EXP 19
47722: PUSH
47723: LD_EXP 5
47727: PUSH
47728: LD_OWVAR 2
47732: ARRAY
47733: ARRAY
47734: PUSH
47735: LD_INT 2
47737: ARRAY
47738: PPUSH
47739: CALL_OW 86
// end ; BeginBuildUp ;
47743: CALL 48516 0 0
// enable ( mpActive ) ;
47747: LD_INT 100
47749: ENABLE_MARKED
// enable ( mpGameType ) ;
47750: LD_EXP 1
47754: ENABLE_MARKED
// mpGameActive := true ;
47755: LD_ADDR_EXP 35
47759: PUSH
47760: LD_INT 1
47762: ST_TO_ADDR
// end ;
47763: LD_VAR 0 1
47767: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , class ; begin
47768: LD_INT 0
47770: PPUSH
47771: PPUSH
47772: PPUSH
// result := [ ] ;
47773: LD_ADDR_VAR 0 5
47777: PUSH
47778: EMPTY
47779: ST_TO_ADDR
// class := class_soldier ;
47780: LD_ADDR_VAR 0 7
47784: PUSH
47785: LD_INT 1
47787: ST_TO_ADDR
// uc_side := side ;
47788: LD_ADDR_OWVAR 20
47792: PUSH
47793: LD_VAR 0 1
47797: ST_TO_ADDR
// uc_nation := nation ;
47798: LD_ADDR_OWVAR 21
47802: PUSH
47803: LD_VAR 0 2
47807: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
47808: LD_ADDR_OWVAR 26
47812: PUSH
47813: LD_OWVAR 19
47817: PUSH
47818: LD_VAR 0 1
47822: ARRAY
47823: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
47824: LD_INT 1
47826: PPUSH
47827: LD_INT 2
47829: PPUSH
47830: CALL_OW 12
47834: PPUSH
47835: LD_VAR 0 7
47839: PPUSH
47840: LD_VAR 0 4
47844: PUSH
47845: LD_INT 2
47847: PLUS
47848: PPUSH
47849: CALL_OW 380
// hc_importance := 105 ;
47853: LD_ADDR_OWVAR 32
47857: PUSH
47858: LD_INT 105
47860: ST_TO_ADDR
// if Multiplayer then
47861: LD_OWVAR 4
47865: IFFALSE 47905
// begin hc_gallery := MULTIAVATARS ;
47867: LD_ADDR_OWVAR 33
47871: PUSH
47872: LD_STRING MULTIAVATARS
47874: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
47875: LD_ADDR_OWVAR 34
47879: PUSH
47880: LD_VAR 0 1
47884: PPUSH
47885: CALL_OW 525
47889: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
47890: LD_ADDR_OWVAR 27
47894: PUSH
47895: LD_VAR 0 1
47899: PPUSH
47900: CALL_OW 526
47904: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
47905: LD_ADDR_VAR 0 5
47909: PUSH
47910: LD_VAR 0 5
47914: PPUSH
47915: CALL_OW 44
47919: PPUSH
47920: CALL 40494 0 2
47924: ST_TO_ADDR
// InitHc_All ( ) ;
47925: CALL_OW 584
// class := 2 ;
47929: LD_ADDR_VAR 0 7
47933: PUSH
47934: LD_INT 2
47936: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
47937: LD_ADDR_VAR 0 6
47941: PUSH
47942: DOUBLE
47943: LD_INT 1
47945: DEC
47946: ST_TO_ADDR
47947: LD_VAR 0 3
47951: PUSH
47952: LD_INT 1
47954: MINUS
47955: PUSH
47956: FOR_TO
47957: IFFALSE 48031
// begin PrepareHuman ( false , class , skill ) ;
47959: LD_INT 0
47961: PPUSH
47962: LD_VAR 0 7
47966: PPUSH
47967: LD_VAR 0 4
47971: PPUSH
47972: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
47976: LD_ADDR_VAR 0 5
47980: PUSH
47981: LD_VAR 0 5
47985: PPUSH
47986: CALL_OW 44
47990: PPUSH
47991: CALL 40494 0 2
47995: ST_TO_ADDR
// class := Inc ( class ) ;
47996: LD_ADDR_VAR 0 7
48000: PUSH
48001: LD_VAR 0 7
48005: PPUSH
48006: CALL 41855 0 1
48010: ST_TO_ADDR
// if class = 5 then
48011: LD_VAR 0 7
48015: PUSH
48016: LD_INT 5
48018: EQUAL
48019: IFFALSE 48029
// class := 1 ;
48021: LD_ADDR_VAR 0 7
48025: PUSH
48026: LD_INT 1
48028: ST_TO_ADDR
// end ;
48029: GO 47956
48031: POP
48032: POP
// end ;
48033: LD_VAR 0 5
48037: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48038: LD_INT 0
48040: PPUSH
48041: PPUSH
// result := [ ] ;
48042: LD_ADDR_VAR 0 4
48046: PUSH
48047: EMPTY
48048: ST_TO_ADDR
// if not vehicles then
48049: LD_VAR 0 3
48053: NOT
48054: IFFALSE 48058
// exit ;
48056: GO 48217
// for i := 1 to vehicles [ nation ] do
48058: LD_ADDR_VAR 0 5
48062: PUSH
48063: DOUBLE
48064: LD_INT 1
48066: DEC
48067: ST_TO_ADDR
48068: LD_VAR 0 3
48072: PUSH
48073: LD_VAR 0 2
48077: ARRAY
48078: PUSH
48079: FOR_TO
48080: IFFALSE 48215
// begin uc_side := side ;
48082: LD_ADDR_OWVAR 20
48086: PUSH
48087: LD_VAR 0 1
48091: ST_TO_ADDR
// uc_nation := nation ;
48092: LD_ADDR_OWVAR 21
48096: PUSH
48097: LD_VAR 0 2
48101: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48102: LD_VAR 0 3
48106: PUSH
48107: LD_VAR 0 2
48111: ARRAY
48112: PUSH
48113: LD_VAR 0 5
48117: ARRAY
48118: PUSH
48119: LD_INT 1
48121: ARRAY
48122: PPUSH
48123: LD_VAR 0 3
48127: PUSH
48128: LD_VAR 0 2
48132: ARRAY
48133: PUSH
48134: LD_VAR 0 5
48138: ARRAY
48139: PUSH
48140: LD_INT 2
48142: ARRAY
48143: PPUSH
48144: LD_VAR 0 3
48148: PUSH
48149: LD_VAR 0 2
48153: ARRAY
48154: PUSH
48155: LD_VAR 0 5
48159: ARRAY
48160: PUSH
48161: LD_INT 3
48163: ARRAY
48164: PPUSH
48165: LD_VAR 0 3
48169: PUSH
48170: LD_VAR 0 2
48174: ARRAY
48175: PUSH
48176: LD_VAR 0 5
48180: ARRAY
48181: PUSH
48182: LD_INT 4
48184: ARRAY
48185: PPUSH
48186: LD_INT 80
48188: PPUSH
48189: CALL 7643 0 5
// result := Join ( result , CreateVehicle ) ;
48193: LD_ADDR_VAR 0 4
48197: PUSH
48198: LD_VAR 0 4
48202: PPUSH
48203: CALL_OW 45
48207: PPUSH
48208: CALL 40494 0 2
48212: ST_TO_ADDR
// end ;
48213: GO 48079
48215: POP
48216: POP
// end ;
48217: LD_VAR 0 4
48221: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48222: LD_INT 0
48224: PPUSH
48225: PPUSH
// for i in mpBattleFlags do
48226: LD_ADDR_VAR 0 3
48230: PUSH
48231: LD_EXP 21
48235: PUSH
48236: FOR_IN
48237: IFFALSE 48314
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48239: LD_VAR 0 3
48243: PPUSH
48244: LD_INT 1
48246: PUSH
48247: LD_VAR 0 1
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 2
48258: PUSH
48259: LD_VAR 0 1
48263: PUSH
48264: LD_REAL  7.00000000000000E-0001
48267: MUL
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 3
48275: PUSH
48276: LD_VAR 0 1
48280: PUSH
48281: LD_REAL  4.00000000000000E-0001
48284: MUL
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 20
48292: PUSH
48293: LD_VAR 0 1
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: PPUSH
48308: CALL_OW 423
48312: GO 48236
48314: POP
48315: POP
// end ;
48316: LD_VAR 0 2
48320: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48321: LD_INT 100
48323: IFFALSE 48418
48325: GO 48327
48327: DISABLE
48328: LD_INT 0
48330: PPUSH
48331: PPUSH
// begin if mpBattleFlag <= 0 then
48332: LD_EXP 20
48336: PUSH
48337: LD_INT 0
48339: LESSEQUAL
48340: IFFALSE 48344
// exit ;
48342: GO 48418
// strength := 100 ;
48344: LD_ADDR_VAR 0 2
48348: PUSH
48349: LD_INT 100
48351: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48352: LD_EXP 20
48356: PPUSH
48357: CALL_OW 67
// strength := Dec ( strength ) ;
48361: LD_ADDR_VAR 0 2
48365: PUSH
48366: LD_VAR 0 2
48370: PPUSH
48371: CALL 41877 0 1
48375: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48376: LD_VAR 0 2
48380: PPUSH
48381: CALL 48222 0 1
// until not strength ;
48385: LD_VAR 0 2
48389: NOT
48390: IFFALSE 48352
// for i in mpBattleFlags do
48392: LD_ADDR_VAR 0 1
48396: PUSH
48397: LD_EXP 21
48401: PUSH
48402: FOR_IN
48403: IFFALSE 48416
// KillBattleFlag ( i ) ;
48405: LD_VAR 0 1
48409: PPUSH
48410: CALL_OW 419
48414: GO 48402
48416: POP
48417: POP
// end ;
48418: PPOPN 2
48420: END
// every 0 0$1 marked mpActive do var side , tmp ;
48421: GO 48423
48423: DISABLE
48424: LD_INT 0
48426: PPUSH
48427: PPUSH
// begin if mpSibBomb <= 1 then
48428: LD_EXP 26
48432: PUSH
48433: LD_INT 1
48435: LESSEQUAL
48436: IFFALSE 48440
// exit ;
48438: GO 48513
// tmp := mpSibBomb ;
48440: LD_ADDR_VAR 0 2
48444: PUSH
48445: LD_EXP 26
48449: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48450: LD_INT 35
48452: PPUSH
48453: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48457: LD_ADDR_VAR 0 2
48461: PUSH
48462: LD_VAR 0 2
48466: PUSH
48467: LD_INT 35
48469: MINUS
48470: ST_TO_ADDR
// until not tmp ;
48471: LD_VAR 0 2
48475: NOT
48476: IFFALSE 48450
// for side := 1 to 8 do
48478: LD_ADDR_VAR 0 1
48482: PUSH
48483: DOUBLE
48484: LD_INT 1
48486: DEC
48487: ST_TO_ADDR
48488: LD_INT 8
48490: PUSH
48491: FOR_TO
48492: IFFALSE 48511
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48494: LD_INT 25
48496: PPUSH
48497: LD_VAR 0 1
48501: PPUSH
48502: LD_INT 1
48504: PPUSH
48505: CALL_OW 322
48509: GO 48491
48511: POP
48512: POP
// end ;
48513: PPOPN 2
48515: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48516: LD_INT 0
48518: PPUSH
48519: PPUSH
48520: PPUSH
// mpBuildUpTimeDelay := 0 ;
48521: LD_ADDR_EXP 36
48525: PUSH
48526: LD_INT 0
48528: ST_TO_ADDR
// if not mpBuildUpTime then
48529: LD_EXP 18
48533: NOT
48534: IFFALSE 48538
// exit ;
48536: GO 48721
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
48538: LD_ADDR_EXP 36
48542: PUSH
48543: LD_INT 8400
48545: PUSH
48546: LD_INT 2100
48548: PUSH
48549: LD_EXP 18
48553: MUL
48554: PLUS
48555: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
48556: LD_ADDR_EXP 37
48560: PUSH
48561: LD_INT 1
48563: ST_TO_ADDR
// for i := 1 to 8 do
48564: LD_ADDR_VAR 0 2
48568: PUSH
48569: DOUBLE
48570: LD_INT 1
48572: DEC
48573: ST_TO_ADDR
48574: LD_INT 8
48576: PUSH
48577: FOR_TO
48578: IFFALSE 48719
// if mpSidePositions [ i ] then
48580: LD_EXP 5
48584: PUSH
48585: LD_VAR 0 2
48589: ARRAY
48590: IFFALSE 48717
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
48592: LD_EXP 17
48596: PUSH
48597: LD_EXP 5
48601: PUSH
48602: LD_VAR 0 2
48606: ARRAY
48607: ARRAY
48608: PPUSH
48609: LD_INT 5
48611: PPUSH
48612: CALL_OW 424
// for j := 1 to 8 do
48616: LD_ADDR_VAR 0 3
48620: PUSH
48621: DOUBLE
48622: LD_INT 1
48624: DEC
48625: ST_TO_ADDR
48626: LD_INT 8
48628: PUSH
48629: FOR_TO
48630: IFFALSE 48715
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48632: LD_EXP 5
48636: PUSH
48637: LD_VAR 0 3
48641: ARRAY
48642: PUSH
48643: LD_EXP 6
48647: PUSH
48648: LD_VAR 0 2
48652: ARRAY
48653: PUSH
48654: LD_EXP 6
48658: PUSH
48659: LD_VAR 0 3
48663: ARRAY
48664: NONEQUAL
48665: PUSH
48666: LD_EXP 9
48670: NOT
48671: PUSH
48672: LD_VAR 0 2
48676: PUSH
48677: LD_VAR 0 3
48681: NONEQUAL
48682: AND
48683: OR
48684: AND
48685: IFFALSE 48713
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
48687: LD_VAR 0 3
48691: PPUSH
48692: LD_EXP 17
48696: PUSH
48697: LD_EXP 5
48701: PUSH
48702: LD_VAR 0 2
48706: ARRAY
48707: ARRAY
48708: PPUSH
48709: CALL_OW 333
48713: GO 48629
48715: POP
48716: POP
// end ;
48717: GO 48577
48719: POP
48720: POP
// end ;
48721: LD_VAR 0 1
48725: RET
// function EndBuildUp ; var i , j ; begin
48726: LD_INT 0
48728: PPUSH
48729: PPUSH
48730: PPUSH
// mpBuildUpTimeActive := false ;
48731: LD_ADDR_EXP 37
48735: PUSH
48736: LD_INT 0
48738: ST_TO_ADDR
// for i := 1 to 8 do
48739: LD_ADDR_VAR 0 2
48743: PUSH
48744: DOUBLE
48745: LD_INT 1
48747: DEC
48748: ST_TO_ADDR
48749: LD_INT 8
48751: PUSH
48752: FOR_TO
48753: IFFALSE 48894
// if mpSidePositions [ i ] then
48755: LD_EXP 5
48759: PUSH
48760: LD_VAR 0 2
48764: ARRAY
48765: IFFALSE 48892
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
48767: LD_EXP 17
48771: PUSH
48772: LD_EXP 5
48776: PUSH
48777: LD_VAR 0 2
48781: ARRAY
48782: ARRAY
48783: PPUSH
48784: LD_INT 0
48786: PPUSH
48787: CALL_OW 424
// for j := 1 to 8 do
48791: LD_ADDR_VAR 0 3
48795: PUSH
48796: DOUBLE
48797: LD_INT 1
48799: DEC
48800: ST_TO_ADDR
48801: LD_INT 8
48803: PUSH
48804: FOR_TO
48805: IFFALSE 48890
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48807: LD_EXP 5
48811: PUSH
48812: LD_VAR 0 3
48816: ARRAY
48817: PUSH
48818: LD_EXP 6
48822: PUSH
48823: LD_VAR 0 2
48827: ARRAY
48828: PUSH
48829: LD_EXP 6
48833: PUSH
48834: LD_VAR 0 3
48838: ARRAY
48839: NONEQUAL
48840: PUSH
48841: LD_EXP 9
48845: NOT
48846: PUSH
48847: LD_VAR 0 2
48851: PUSH
48852: LD_VAR 0 3
48856: NONEQUAL
48857: AND
48858: OR
48859: AND
48860: IFFALSE 48888
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
48862: LD_VAR 0 3
48866: PPUSH
48867: LD_EXP 17
48871: PUSH
48872: LD_EXP 5
48876: PUSH
48877: LD_VAR 0 2
48881: ARRAY
48882: ARRAY
48883: PPUSH
48884: CALL_OW 334
48888: GO 48804
48890: POP
48891: POP
// end ;
48892: GO 48752
48894: POP
48895: POP
// end ;
48896: LD_VAR 0 1
48900: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
48901: LD_EXP 37
48905: IFFALSE 49080
48907: GO 48909
48909: DISABLE
48910: LD_INT 0
48912: PPUSH
48913: PPUSH
// begin for i := 1 to 8 do
48914: LD_ADDR_VAR 0 1
48918: PUSH
48919: DOUBLE
48920: LD_INT 1
48922: DEC
48923: ST_TO_ADDR
48924: LD_INT 8
48926: PUSH
48927: FOR_TO
48928: IFFALSE 49077
// if mpSidePositions [ i ] then
48930: LD_EXP 5
48934: PUSH
48935: LD_VAR 0 1
48939: ARRAY
48940: IFFALSE 49075
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
48942: LD_ADDR_VAR 0 2
48946: PUSH
48947: LD_EXP 17
48951: PUSH
48952: LD_EXP 5
48956: PUSH
48957: LD_VAR 0 1
48961: ARRAY
48962: ARRAY
48963: PPUSH
48964: LD_INT 2
48966: PUSH
48967: LD_INT 21
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 21
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 22
48994: PUSH
48995: LD_OWVAR 2
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PPUSH
49008: CALL_OW 70
49012: PUSH
49013: FOR_IN
49014: IFFALSE 49073
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49016: LD_EXP 6
49020: PUSH
49021: LD_VAR 0 1
49025: ARRAY
49026: PUSH
49027: LD_EXP 6
49031: PUSH
49032: LD_OWVAR 2
49036: ARRAY
49037: NONEQUAL
49038: PUSH
49039: LD_EXP 9
49043: NOT
49044: PUSH
49045: LD_VAR 0 1
49049: PUSH
49050: LD_OWVAR 2
49054: NONEQUAL
49055: AND
49056: OR
49057: IFFALSE 49071
// ComMoveToArea ( un , BuildUpEscape ) ;
49059: LD_VAR 0 2
49063: PPUSH
49064: LD_INT 17
49066: PPUSH
49067: CALL_OW 113
49071: GO 49013
49073: POP
49074: POP
49075: GO 48927
49077: POP
49078: POP
// enable ;
49079: ENABLE
// end ;
49080: PPOPN 2
49082: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49083: LD_EXP 18
49087: IFFALSE 49137
49089: GO 49091
49091: DISABLE
49092: LD_INT 0
49094: PPUSH
// begin tmp := mpBuildUpTime ;
49095: LD_ADDR_VAR 0 1
49099: PUSH
49100: LD_EXP 18
49104: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49105: LD_INT 35
49107: PPUSH
49108: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49112: LD_ADDR_VAR 0 1
49116: PUSH
49117: LD_VAR 0 1
49121: PUSH
49122: LD_INT 35
49124: MINUS
49125: ST_TO_ADDR
// until not tmp ;
49126: LD_VAR 0 1
49130: NOT
49131: IFFALSE 49105
// EndBuildUp ;
49133: CALL 48726 0 0
// end ;
49137: PPOPN 1
49139: END
// every 0 0$1 trigger mpActive marked mpWin do
49140: LD_INT 100
49142: IFFALSE 49176
49144: GO 49146
49146: DISABLE
// begin if IAmServer then
49147: CALL_OW 518
49151: IFFALSE 49160
// wait ( 0 0$5 ) ;
49153: LD_INT 175
49155: PPUSH
49156: CALL_OW 67
// if Multiplayer then
49160: LD_OWVAR 4
49164: IFFALSE 49172
// YouWinInMultiplayer else
49166: CALL_OW 106
49170: GO 49176
// YouWin ;
49172: CALL_OW 103
// end ;
49176: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49177: LD_INT 0
49179: PPUSH
// result := false ;
49180: LD_ADDR_VAR 0 3
49184: PUSH
49185: LD_INT 0
49187: ST_TO_ADDR
// case gameType of GameTypeNormal :
49188: LD_VAR 0 1
49192: PUSH
49193: LD_INT 1
49195: DOUBLE
49196: EQUAL
49197: IFTRUE 49201
49199: GO 49274
49201: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49202: LD_ADDR_VAR 0 3
49206: PUSH
49207: LD_INT 22
49209: PUSH
49210: LD_VAR 0 2
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 2
49221: PUSH
49222: LD_INT 21
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 33
49234: PUSH
49235: LD_INT 3
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 33
49244: PUSH
49245: LD_INT 5
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PPUSH
49262: CALL_OW 69
49266: PPUSH
49267: CALL 4905 0 1
49271: ST_TO_ADDR
// end ; GameTypeSurvival :
49272: GO 49492
49274: LD_INT 2
49276: DOUBLE
49277: EQUAL
49278: IFTRUE 49282
49280: GO 49410
49282: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49283: LD_ADDR_VAR 0 3
49287: PUSH
49288: LD_INT 22
49290: PUSH
49291: LD_VAR 0 2
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 2
49302: PUSH
49303: LD_INT 30
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 30
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: LIST
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PPUSH
49332: CALL_OW 69
49336: PPUSH
49337: CALL 4905 0 1
49341: PUSH
49342: LD_INT 22
49344: PUSH
49345: LD_VAR 0 2
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 2
49356: PUSH
49357: LD_INT 21
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 33
49369: PUSH
49370: LD_INT 3
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 33
49379: PUSH
49380: LD_INT 5
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PPUSH
49397: CALL_OW 69
49401: PPUSH
49402: CALL 4905 0 1
49406: AND
49407: ST_TO_ADDR
// end ; GameTypeKing :
49408: GO 49492
49410: LD_INT 3
49412: DOUBLE
49413: EQUAL
49414: IFTRUE 49418
49416: GO 49491
49418: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49419: LD_ADDR_VAR 0 3
49423: PUSH
49424: LD_INT 22
49426: PUSH
49427: LD_VAR 0 2
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: LD_INT 21
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 33
49451: PUSH
49452: LD_INT 3
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 33
49461: PUSH
49462: LD_INT 5
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PPUSH
49479: CALL_OW 69
49483: PPUSH
49484: CALL 4905 0 1
49488: ST_TO_ADDR
// end ; end ;
49489: GO 49492
49491: POP
// end ;
49492: LD_VAR 0 3
49496: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49497: LD_INT 100
49499: IFFALSE 49701
49501: GO 49503
49503: DISABLE
49504: LD_INT 0
49506: PPUSH
49507: PPUSH
// begin if Multiplayer then
49508: LD_OWVAR 4
49512: IFFALSE 49520
// SetPlayerSpectator ( ) else
49514: CALL_OW 572
49518: GO 49529
// FogOff ( your_side ) ;
49520: LD_OWVAR 2
49524: PPUSH
49525: CALL_OW 344
// repeat gameIsOn := false ;
49529: LD_ADDR_VAR 0 1
49533: PUSH
49534: LD_INT 0
49536: ST_TO_ADDR
// for i := 1 to 8 do
49537: LD_ADDR_VAR 0 2
49541: PUSH
49542: DOUBLE
49543: LD_INT 1
49545: DEC
49546: ST_TO_ADDR
49547: LD_INT 8
49549: PUSH
49550: FOR_TO
49551: IFFALSE 49653
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49553: LD_EXP 5
49557: PUSH
49558: LD_VAR 0 2
49562: ARRAY
49563: PUSH
49564: LD_VAR 0 2
49568: PPUSH
49569: CALL_OW 108
49573: AND
49574: PUSH
49575: LD_VAR 0 2
49579: PUSH
49580: LD_OWVAR 2
49584: NONEQUAL
49585: AND
49586: IFFALSE 49651
// if not mpSideTeams [ i ] or ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) then
49588: LD_EXP 6
49592: PUSH
49593: LD_VAR 0 2
49597: ARRAY
49598: NOT
49599: PUSH
49600: LD_EXP 6
49604: PUSH
49605: LD_VAR 0 2
49609: ARRAY
49610: PUSH
49611: LD_EXP 6
49615: PUSH
49616: LD_OWVAR 2
49620: ARRAY
49621: NONEQUAL
49622: OR
49623: IFFALSE 49651
// if HasPowerByGameType ( mpGameType , i ) then
49625: LD_EXP 1
49629: PPUSH
49630: LD_VAR 0 2
49634: PPUSH
49635: CALL 49177 0 2
49639: IFFALSE 49651
// begin gameIsOn := true ;
49641: LD_ADDR_VAR 0 1
49645: PUSH
49646: LD_INT 1
49648: ST_TO_ADDR
// break ;
49649: GO 49653
// end ;
49651: GO 49550
49653: POP
49654: POP
// wait ( 100 ) ;
49655: LD_INT 100
49657: PPUSH
49658: CALL_OW 67
// until not gameIsOn ;
49662: LD_VAR 0 1
49666: NOT
49667: IFFALSE 49529
// if IAmServer then
49669: CALL_OW 518
49673: IFFALSE 49682
// wait ( 0 0$5 ) ;
49675: LD_INT 175
49677: PPUSH
49678: CALL_OW 67
// if Multiplayer then
49682: LD_OWVAR 4
49686: IFFALSE 49694
// YouLostInMultiplayer else
49688: CALL_OW 107
49692: GO 49701
// YouLost (  ) ;
49694: LD_STRING 
49696: PPUSH
49697: CALL_OW 104
// end ;
49701: PPOPN 2
49703: END
// every 0 0$1 marked mpActive do
49704: GO 49706
49706: DISABLE
// begin enable ;
49707: ENABLE
// if not mpDisplayStrings then
49708: LD_EXP 34
49712: NOT
49713: IFFALSE 49724
// begin display_strings := [ ] ;
49715: LD_ADDR_OWVAR 47
49719: PUSH
49720: EMPTY
49721: ST_TO_ADDR
// exit ;
49722: GO 49734
// end ; display_strings := mpDisplayStrings ;
49724: LD_ADDR_OWVAR 47
49728: PUSH
49729: LD_EXP 34
49733: ST_TO_ADDR
// end ; end_of_file
49734: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , area , nation , side , tmp ; begin
49735: LD_INT 0
49737: PPUSH
49738: PPUSH
49739: PPUSH
49740: PPUSH
49741: PPUSH
49742: PPUSH
49743: PPUSH
49744: PPUSH
// if GetType ( un ) = unit_vehicle then
49745: LD_VAR 0 1
49749: PPUSH
49750: CALL_OW 247
49754: PUSH
49755: LD_INT 2
49757: EQUAL
49758: IFFALSE 49762
// exit ;
49760: GO 50266
// if mpGameType = GameTypeSurvival then
49762: LD_EXP 1
49766: PUSH
49767: LD_INT 2
49769: EQUAL
49770: IFFALSE 49861
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
49772: LD_VAR 0 1
49776: PPUSH
49777: CALL_OW 266
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: IN
49792: IFFALSE 49861
// begin side := GetSide ( un ) ;
49794: LD_ADDR_VAR 0 8
49798: PUSH
49799: LD_VAR 0 1
49803: PPUSH
49804: CALL_OW 255
49808: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
49809: LD_ADDR_VAR 0 3
49813: PUSH
49814: LD_INT 22
49816: PUSH
49817: LD_VAR 0 8
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 21
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PPUSH
49840: CALL_OW 69
49844: PUSH
49845: FOR_IN
49846: IFFALSE 49859
// KillUnit ( i ) ;
49848: LD_VAR 0 3
49852: PPUSH
49853: CALL_OW 66
49857: GO 49845
49859: POP
49860: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
49861: LD_VAR 0 1
49865: PPUSH
49866: CALL_OW 257
49870: PUSH
49871: LD_INT 12
49873: PUSH
49874: LD_INT 17
49876: PUSH
49877: LD_INT 15
49879: PUSH
49880: LD_INT 16
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: IN
49889: PUSH
49890: LD_VAR 0 1
49894: PPUSH
49895: CALL_OW 263
49899: PUSH
49900: LD_INT 5
49902: EQUAL
49903: OR
49904: IFFALSE 49993
// begin tag := GetTag ( un ) ;
49906: LD_ADDR_VAR 0 5
49910: PUSH
49911: LD_VAR 0 1
49915: PPUSH
49916: CALL_OW 110
49920: ST_TO_ADDR
// area := mpApemansArea [ tag ] ;
49921: LD_ADDR_VAR 0 6
49925: PUSH
49926: LD_EXP 29
49930: PUSH
49931: LD_VAR 0 5
49935: ARRAY
49936: ST_TO_ADDR
// wait ( 4 4$00 ) ;
49937: LD_INT 8400
49939: PPUSH
49940: CALL_OW 67
// PrepareApeman ( - 5 ) ;
49944: LD_INT 5
49946: NEG
49947: PPUSH
49948: CALL 36762 0 1
// ape := CreateHuman ;
49952: LD_ADDR_VAR 0 4
49956: PUSH
49957: CALL_OW 44
49961: ST_TO_ADDR
// SetTag ( ape , tag ) ;
49962: LD_VAR 0 4
49966: PPUSH
49967: LD_VAR 0 5
49971: PPUSH
49972: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
49976: LD_VAR 0 4
49980: PPUSH
49981: LD_VAR 0 6
49985: PPUSH
49986: LD_INT 0
49988: PPUSH
49989: CALL_OW 49
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
49993: LD_VAR 0 1
49997: PPUSH
49998: CALL_OW 247
50002: PUSH
50003: LD_INT 1
50005: EQUAL
50006: PUSH
50007: LD_VAR 0 1
50011: PPUSH
50012: CALL_OW 248
50016: PUSH
50017: LD_INT 0
50019: GREATER
50020: AND
50021: IFFALSE 50266
// begin if not mpRespawn then
50023: LD_EXP 30
50027: NOT
50028: IFFALSE 50032
// exit ;
50030: GO 50266
// side := GetSide ( un ) ;
50032: LD_ADDR_VAR 0 8
50036: PUSH
50037: LD_VAR 0 1
50041: PPUSH
50042: CALL_OW 255
50046: ST_TO_ADDR
// nation := GetNation ( un ) ;
50047: LD_ADDR_VAR 0 7
50051: PUSH
50052: LD_VAR 0 1
50056: PPUSH
50057: CALL_OW 248
50061: ST_TO_ADDR
// wait ( mpRespawn ) ;
50062: LD_EXP 30
50066: PPUSH
50067: CALL_OW 67
// if Multiplayer and not MultiplayerSideAlive ( side ) and HasPowerByGameType ( mpGameType , side ) then
50071: LD_OWVAR 4
50075: PUSH
50076: LD_VAR 0 8
50080: PPUSH
50081: CALL_OW 108
50085: NOT
50086: AND
50087: PUSH
50088: LD_EXP 1
50092: PPUSH
50093: LD_VAR 0 8
50097: PPUSH
50098: CALL 49177 0 2
50102: AND
50103: IFFALSE 50107
// exit ;
50105: GO 50266
// uc_side := side ;
50107: LD_ADDR_OWVAR 20
50111: PUSH
50112: LD_VAR 0 8
50116: ST_TO_ADDR
// uc_nation := nation ;
50117: LD_ADDR_OWVAR 21
50121: PUSH
50122: LD_VAR 0 7
50126: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 2 ) ;
50127: LD_INT 0
50129: PPUSH
50130: LD_INT 1
50132: PPUSH
50133: LD_INT 4
50135: PPUSH
50136: CALL_OW 12
50140: PPUSH
50141: LD_INT 2
50143: PPUSH
50144: CALL_OW 380
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50148: LD_ADDR_VAR 0 9
50152: PUSH
50153: LD_INT 22
50155: PUSH
50156: LD_VAR 0 8
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: LD_INT 30
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 30
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: LIST
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PPUSH
50197: CALL_OW 69
50201: ST_TO_ADDR
// if not tmp then
50202: LD_VAR 0 9
50206: NOT
50207: IFFALSE 50223
// PlaceUnitAnywhere ( CreateHuman , true ) else
50209: CALL_OW 44
50213: PPUSH
50214: LD_INT 1
50216: PPUSH
50217: CALL_OW 51
50221: GO 50266
// PlaceUnitXYR ( CreateHuman , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 20 , true ) ;
50223: CALL_OW 44
50227: PPUSH
50228: LD_VAR 0 9
50232: PUSH
50233: LD_INT 1
50235: ARRAY
50236: PPUSH
50237: CALL_OW 250
50241: PPUSH
50242: LD_VAR 0 9
50246: PUSH
50247: LD_INT 1
50249: ARRAY
50250: PPUSH
50251: CALL_OW 251
50255: PPUSH
50256: LD_INT 20
50258: PPUSH
50259: LD_INT 1
50261: PPUSH
50262: CALL_OW 50
// end ; end ; end_of_file
50266: LD_VAR 0 2
50270: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
50271: LD_EXP 35
50275: PUSH
50276: CALL 50461 0 0
50280: AND
50281: PUSH
50282: LD_OWVAR 4
50286: AND
50287: IFFALSE 50458
50289: GO 50291
50291: DISABLE
50292: LD_INT 0
50294: PPUSH
50295: PPUSH
// begin canWin := false ;
50296: LD_ADDR_VAR 0 2
50300: PUSH
50301: LD_INT 0
50303: ST_TO_ADDR
// if not HasPower ( your_side ) then
50304: LD_OWVAR 2
50308: PPUSH
50309: CALL 50501 0 1
50313: NOT
50314: IFFALSE 50325
// begin Multiplayer_Loose_Message ;
50316: CALL_OW 521
// enable ( mpLose ) ;
50320: LD_INT 102
50322: ENABLE_MARKED
// end else
50323: GO 50458
// begin canWin := true ;
50325: LD_ADDR_VAR 0 2
50329: PUSH
50330: LD_INT 1
50332: ST_TO_ADDR
// for i := 1 to 8 do
50333: LD_ADDR_VAR 0 1
50337: PUSH
50338: DOUBLE
50339: LD_INT 1
50341: DEC
50342: ST_TO_ADDR
50343: LD_INT 8
50345: PUSH
50346: FOR_TO
50347: IFFALSE 50444
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50349: LD_EXP 5
50353: PUSH
50354: LD_VAR 0 1
50358: ARRAY
50359: PUSH
50360: LD_VAR 0 1
50364: PPUSH
50365: CALL_OW 108
50369: AND
50370: PUSH
50371: LD_VAR 0 1
50375: PUSH
50376: LD_OWVAR 2
50380: NONEQUAL
50381: AND
50382: IFFALSE 50442
// if not mpSideTeams [ i ] or ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) then
50384: LD_EXP 6
50388: PUSH
50389: LD_VAR 0 1
50393: ARRAY
50394: NOT
50395: PUSH
50396: LD_EXP 6
50400: PUSH
50401: LD_VAR 0 1
50405: ARRAY
50406: PUSH
50407: LD_EXP 6
50411: PUSH
50412: LD_OWVAR 2
50416: ARRAY
50417: NONEQUAL
50418: OR
50419: IFFALSE 50442
// if HasPower ( i ) then
50421: LD_VAR 0 1
50425: PPUSH
50426: CALL 50501 0 1
50430: IFFALSE 50442
// begin canWin := false ;
50432: LD_ADDR_VAR 0 2
50436: PUSH
50437: LD_INT 0
50439: ST_TO_ADDR
// break ;
50440: GO 50444
// end ;
50442: GO 50346
50444: POP
50445: POP
// if canWin then
50446: LD_VAR 0 2
50450: IFFALSE 50457
// enable ( mpWin ) else
50452: LD_INT 101
50454: ENABLE_MARKED
50455: GO 50458
// enable ;
50457: ENABLE
// end ; end ;
50458: PPOPN 2
50460: END
// function CanWinLoose ; begin
50461: LD_INT 0
50463: PPUSH
// result := true ;
50464: LD_ADDR_VAR 0 1
50468: PUSH
50469: LD_INT 1
50471: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
50472: CALL_OW 531
50476: PUSH
50477: CALL_OW 519
50481: PUSH
50482: LD_INT 1
50484: GREATER
50485: AND
50486: IFFALSE 50496
// result := false ;
50488: LD_ADDR_VAR 0 1
50492: PUSH
50493: LD_INT 0
50495: ST_TO_ADDR
// end ;
50496: LD_VAR 0 1
50500: RET
// function HasPower ( i ) ; begin
50501: LD_INT 0
50503: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
50504: LD_ADDR_VAR 0 2
50508: PUSH
50509: LD_INT 22
50511: PUSH
50512: LD_VAR 0 1
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: LD_INT 21
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 33
50536: PUSH
50537: LD_INT 3
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 33
50546: PUSH
50547: LD_INT 5
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PPUSH
50564: CALL_OW 69
50568: ST_TO_ADDR
// end ; end_of_file
50569: LD_VAR 0 2
50573: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
50574: LD_EXP 35
50578: IFFALSE 50621
50580: GO 50582
50582: DISABLE
50583: LD_INT 0
50585: PPUSH
// begin for i := 1 to 8 do
50586: LD_ADDR_VAR 0 1
50590: PUSH
50591: DOUBLE
50592: LD_INT 1
50594: DEC
50595: ST_TO_ADDR
50596: LD_INT 8
50598: PUSH
50599: FOR_TO
50600: IFFALSE 50619
// SetRestrict ( b_depot , i , state_disabled ) ;
50602: LD_INT 0
50604: PPUSH
50605: LD_VAR 0 1
50609: PPUSH
50610: LD_INT 0
50612: PPUSH
50613: CALL_OW 324
50617: GO 50599
50619: POP
50620: POP
// end ;
50621: PPOPN 1
50623: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
50624: LD_EXP 35
50628: PUSH
50629: CALL 50814 0 0
50633: AND
50634: PUSH
50635: LD_OWVAR 4
50639: AND
50640: IFFALSE 50811
50642: GO 50644
50644: DISABLE
50645: LD_INT 0
50647: PPUSH
50648: PPUSH
// begin canWin := false ;
50649: LD_ADDR_VAR 0 2
50653: PUSH
50654: LD_INT 0
50656: ST_TO_ADDR
// if not HasPower ( your_side ) then
50657: LD_OWVAR 2
50661: PPUSH
50662: CALL 50854 0 1
50666: NOT
50667: IFFALSE 50678
// begin Multiplayer_Loose_Message ;
50669: CALL_OW 521
// enable ( mpLose ) ;
50673: LD_INT 102
50675: ENABLE_MARKED
// end else
50676: GO 50811
// begin canWin := true ;
50678: LD_ADDR_VAR 0 2
50682: PUSH
50683: LD_INT 1
50685: ST_TO_ADDR
// for i := 1 to 8 do
50686: LD_ADDR_VAR 0 1
50690: PUSH
50691: DOUBLE
50692: LD_INT 1
50694: DEC
50695: ST_TO_ADDR
50696: LD_INT 8
50698: PUSH
50699: FOR_TO
50700: IFFALSE 50797
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50702: LD_EXP 5
50706: PUSH
50707: LD_VAR 0 1
50711: ARRAY
50712: PUSH
50713: LD_VAR 0 1
50717: PPUSH
50718: CALL_OW 108
50722: AND
50723: PUSH
50724: LD_VAR 0 1
50728: PUSH
50729: LD_OWVAR 2
50733: NONEQUAL
50734: AND
50735: IFFALSE 50795
// if not mpSideTeams [ i ] or ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) then
50737: LD_EXP 6
50741: PUSH
50742: LD_VAR 0 1
50746: ARRAY
50747: NOT
50748: PUSH
50749: LD_EXP 6
50753: PUSH
50754: LD_VAR 0 1
50758: ARRAY
50759: PUSH
50760: LD_EXP 6
50764: PUSH
50765: LD_OWVAR 2
50769: ARRAY
50770: NONEQUAL
50771: OR
50772: IFFALSE 50795
// if HasPower ( i ) then
50774: LD_VAR 0 1
50778: PPUSH
50779: CALL 50854 0 1
50783: IFFALSE 50795
// begin canWin := false ;
50785: LD_ADDR_VAR 0 2
50789: PUSH
50790: LD_INT 0
50792: ST_TO_ADDR
// break ;
50793: GO 50797
// end ;
50795: GO 50699
50797: POP
50798: POP
// if canWin then
50799: LD_VAR 0 2
50803: IFFALSE 50810
// enable ( mpWin ) else
50805: LD_INT 101
50807: ENABLE_MARKED
50808: GO 50811
// enable ;
50810: ENABLE
// end ; end ;
50811: PPOPN 2
50813: END
// function CanWinLoose ; begin
50814: LD_INT 0
50816: PPUSH
// result := true ;
50817: LD_ADDR_VAR 0 1
50821: PUSH
50822: LD_INT 1
50824: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
50825: CALL_OW 531
50829: PUSH
50830: CALL_OW 519
50834: PUSH
50835: LD_INT 1
50837: GREATER
50838: AND
50839: IFFALSE 50849
// result := false ;
50841: LD_ADDR_VAR 0 1
50845: PUSH
50846: LD_INT 0
50848: ST_TO_ADDR
// end ;
50849: LD_VAR 0 1
50853: RET
// function HasPower ( i ) ; begin
50854: LD_INT 0
50856: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
50857: LD_INT 22
50859: PUSH
50860: LD_VAR 0 1
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: LD_INT 30
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 30
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: LIST
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PPUSH
50901: CALL_OW 69
50905: NOT
50906: IFFALSE 50910
// exit ;
50908: GO 50975
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
50910: LD_ADDR_VAR 0 2
50914: PUSH
50915: LD_INT 22
50917: PUSH
50918: LD_VAR 0 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: LD_INT 21
50932: PUSH
50933: LD_INT 1
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 33
50942: PUSH
50943: LD_INT 3
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 33
50952: PUSH
50953: LD_INT 5
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PPUSH
50970: CALL_OW 69
50974: ST_TO_ADDR
// end ; end_of_file
50975: LD_VAR 0 2
50979: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , tmp ;
50980: LD_EXP 35
50984: IFFALSE 51217
50986: GO 50988
50988: DISABLE
50989: LD_INT 0
50991: PPUSH
50992: PPUSH
// begin mpKingPoints := [ ] ;
50993: LD_ADDR_EXP 38
50997: PUSH
50998: EMPTY
50999: ST_TO_ADDR
// if mpTeamGame then
51000: LD_EXP 9
51004: IFFALSE 51058
// begin for i := 1 to Count ( mpTeams ) do
51006: LD_ADDR_VAR 0 1
51010: PUSH
51011: DOUBLE
51012: LD_INT 1
51014: DEC
51015: ST_TO_ADDR
51016: LD_EXP 8
51020: PPUSH
51021: CALL 4905 0 1
51025: PUSH
51026: FOR_TO
51027: IFFALSE 51054
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
51029: LD_ADDR_EXP 38
51033: PUSH
51034: LD_EXP 38
51038: PPUSH
51039: LD_VAR 0 1
51043: PPUSH
51044: LD_INT 0
51046: PPUSH
51047: CALL_OW 1
51051: ST_TO_ADDR
51052: GO 51026
51054: POP
51055: POP
// end else
51056: GO 51101
// begin for i := 1 to 8 do
51058: LD_ADDR_VAR 0 1
51062: PUSH
51063: DOUBLE
51064: LD_INT 1
51066: DEC
51067: ST_TO_ADDR
51068: LD_INT 8
51070: PUSH
51071: FOR_TO
51072: IFFALSE 51099
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
51074: LD_ADDR_EXP 38
51078: PUSH
51079: LD_EXP 38
51083: PPUSH
51084: LD_VAR 0 1
51088: PPUSH
51089: LD_INT 0
51091: PPUSH
51092: CALL_OW 1
51096: ST_TO_ADDR
51097: GO 51071
51099: POP
51100: POP
// end ; SetAreaMapShow ( mpKingArea , 1 ) ;
51101: LD_EXP 31
51105: PPUSH
51106: LD_INT 1
51108: PPUSH
51109: CALL_OW 424
// UpdateCounter ;
51113: CALL 51542 0 0
// repeat wait ( 0 0$1 ) ;
51117: LD_INT 35
51119: PPUSH
51120: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51124: LD_ADDR_VAR 0 2
51128: PUSH
51129: LD_EXP 31
51133: PPUSH
51134: LD_INT 3
51136: PUSH
51137: LD_INT 57
51139: PUSH
51140: EMPTY
51141: LIST
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 50
51149: PUSH
51150: EMPTY
51151: LIST
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: LD_INT 30
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 30
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: LIST
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: LIST
51185: PPUSH
51186: CALL_OW 70
51190: ST_TO_ADDR
// if not tmp then
51191: LD_VAR 0 2
51195: NOT
51196: IFFALSE 51200
// continue ;
51198: GO 51117
// AddPoints ( tmp ) ;
51200: LD_VAR 0 2
51204: PPUSH
51205: CALL 51220 0 1
// UpdateCounter ;
51209: CALL 51542 0 0
// until false ;
51213: LD_INT 0
51215: IFFALSE 51117
// end ;
51217: PPOPN 2
51219: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
51220: LD_INT 0
51222: PPUSH
51223: PPUSH
51224: PPUSH
51225: PPUSH
51226: PPUSH
// if mpTeamGame then
51227: LD_EXP 9
51231: IFFALSE 51428
// begin first := depots [ 1 ] ;
51233: LD_ADDR_VAR 0 4
51237: PUSH
51238: LD_VAR 0 1
51242: PUSH
51243: LD_INT 1
51245: ARRAY
51246: ST_TO_ADDR
// side := GetSide ( first ) ;
51247: LD_ADDR_VAR 0 6
51251: PUSH
51252: LD_VAR 0 4
51256: PPUSH
51257: CALL_OW 255
51261: ST_TO_ADDR
// for i := 1 to mpTeams do
51262: LD_ADDR_VAR 0 3
51266: PUSH
51267: DOUBLE
51268: LD_INT 1
51270: DEC
51271: ST_TO_ADDR
51272: LD_EXP 8
51276: PUSH
51277: FOR_TO
51278: IFFALSE 51312
// if side in mpTeams [ i ] then
51280: LD_VAR 0 6
51284: PUSH
51285: LD_EXP 8
51289: PUSH
51290: LD_VAR 0 3
51294: ARRAY
51295: IN
51296: IFFALSE 51310
// begin team := i ;
51298: LD_ADDR_VAR 0 5
51302: PUSH
51303: LD_VAR 0 3
51307: ST_TO_ADDR
// break ;
51308: GO 51312
// end ;
51310: GO 51277
51312: POP
51313: POP
// if not team then
51314: LD_VAR 0 5
51318: NOT
51319: IFFALSE 51323
// exit ;
51321: GO 51537
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
51323: LD_EXP 31
51327: PPUSH
51328: LD_INT 81
51330: PUSH
51331: LD_VAR 0 6
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PPUSH
51340: CALL_OW 70
51344: IFFALSE 51348
// exit ;
51346: GO 51537
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
51348: LD_ADDR_EXP 38
51352: PUSH
51353: LD_EXP 38
51357: PPUSH
51358: LD_VAR 0 5
51362: PPUSH
51363: LD_EXP 38
51367: PUSH
51368: LD_VAR 0 5
51372: ARRAY
51373: PUSH
51374: LD_INT 1
51376: PLUS
51377: PPUSH
51378: CALL_OW 1
51382: ST_TO_ADDR
// for i in mpTeams [ team ] do
51383: LD_ADDR_VAR 0 3
51387: PUSH
51388: LD_EXP 8
51392: PUSH
51393: LD_VAR 0 5
51397: ARRAY
51398: PUSH
51399: FOR_IN
51400: IFFALSE 51424
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
51402: LD_VAR 0 3
51406: PPUSH
51407: LD_EXP 38
51411: PUSH
51412: LD_VAR 0 5
51416: ARRAY
51417: PPUSH
51418: CALL_OW 506
51422: GO 51399
51424: POP
51425: POP
// end else
51426: GO 51537
// begin first := depots [ 1 ] ;
51428: LD_ADDR_VAR 0 4
51432: PUSH
51433: LD_VAR 0 1
51437: PUSH
51438: LD_INT 1
51440: ARRAY
51441: ST_TO_ADDR
// side := GetSide ( first ) ;
51442: LD_ADDR_VAR 0 6
51446: PUSH
51447: LD_VAR 0 4
51451: PPUSH
51452: CALL_OW 255
51456: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
51457: LD_EXP 31
51461: PPUSH
51462: LD_INT 81
51464: PUSH
51465: LD_VAR 0 6
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PPUSH
51474: CALL_OW 70
51478: IFFALSE 51482
// exit ;
51480: GO 51537
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
51482: LD_ADDR_EXP 38
51486: PUSH
51487: LD_EXP 38
51491: PPUSH
51492: LD_VAR 0 6
51496: PPUSH
51497: LD_EXP 38
51501: PUSH
51502: LD_VAR 0 6
51506: ARRAY
51507: PUSH
51508: LD_INT 1
51510: PLUS
51511: PPUSH
51512: CALL_OW 1
51516: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
51517: LD_VAR 0 6
51521: PPUSH
51522: LD_EXP 38
51526: PUSH
51527: LD_VAR 0 6
51531: ARRAY
51532: PPUSH
51533: CALL_OW 506
// end ; end ;
51537: LD_VAR 0 2
51541: RET
// function UpdateCounter ; var i ; begin
51542: LD_INT 0
51544: PPUSH
51545: PPUSH
// result := [ ] ;
51546: LD_ADDR_VAR 0 1
51550: PUSH
51551: EMPTY
51552: ST_TO_ADDR
// if mpTeamGame then
51553: LD_EXP 9
51557: IFFALSE 51624
// begin for i := 1 to mpTeams do
51559: LD_ADDR_VAR 0 2
51563: PUSH
51564: DOUBLE
51565: LD_INT 1
51567: DEC
51568: ST_TO_ADDR
51569: LD_EXP 8
51573: PUSH
51574: FOR_TO
51575: IFFALSE 51620
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
51577: LD_ADDR_VAR 0 1
51581: PUSH
51582: LD_VAR 0 1
51586: PUSH
51587: LD_STRING #KingoftheHill-Team
51589: PUSH
51590: LD_VAR 0 2
51594: PUSH
51595: LD_EXP 38
51599: PUSH
51600: LD_VAR 0 2
51604: ARRAY
51605: PUSH
51606: LD_EXP 32
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: ADD
51617: ST_TO_ADDR
51618: GO 51574
51620: POP
51621: POP
// end else
51622: GO 51697
// begin for i := 1 to 8 do
51624: LD_ADDR_VAR 0 2
51628: PUSH
51629: DOUBLE
51630: LD_INT 1
51632: DEC
51633: ST_TO_ADDR
51634: LD_INT 8
51636: PUSH
51637: FOR_TO
51638: IFFALSE 51695
// if mpSidePositions [ i ] then
51640: LD_EXP 5
51644: PUSH
51645: LD_VAR 0 2
51649: ARRAY
51650: IFFALSE 51693
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
51652: LD_ADDR_VAR 0 1
51656: PUSH
51657: LD_VAR 0 1
51661: PUSH
51662: LD_STRING #KingoftheHill-Player
51664: PUSH
51665: LD_VAR 0 2
51669: PUSH
51670: LD_EXP 38
51674: PUSH
51675: LD_VAR 0 2
51679: ARRAY
51680: PUSH
51681: LD_EXP 32
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: ADD
51692: ST_TO_ADDR
51693: GO 51637
51695: POP
51696: POP
// end ; mpDisplayStrings := result ;
51697: LD_ADDR_EXP 34
51701: PUSH
51702: LD_VAR 0 1
51706: ST_TO_ADDR
// end ;
51707: LD_VAR 0 1
51711: RET
// function HowMuchPoints ( side ) ; var i ; begin
51712: LD_INT 0
51714: PPUSH
51715: PPUSH
// if mpTeamGame then
51716: LD_EXP 9
51720: IFFALSE 51789
// begin for i := 1 to Count ( mpTeams ) do
51722: LD_ADDR_VAR 0 3
51726: PUSH
51727: DOUBLE
51728: LD_INT 1
51730: DEC
51731: ST_TO_ADDR
51732: LD_EXP 8
51736: PPUSH
51737: CALL 4905 0 1
51741: PUSH
51742: FOR_TO
51743: IFFALSE 51785
// begin if side in mpTeams [ i ] then
51745: LD_VAR 0 1
51749: PUSH
51750: LD_EXP 8
51754: PUSH
51755: LD_VAR 0 3
51759: ARRAY
51760: IN
51761: IFFALSE 51783
// begin result := mpKingPoints [ i ] ;
51763: LD_ADDR_VAR 0 2
51767: PUSH
51768: LD_EXP 38
51772: PUSH
51773: LD_VAR 0 3
51777: ARRAY
51778: ST_TO_ADDR
// exit ;
51779: POP
51780: POP
51781: GO 51805
// end ; end ;
51783: GO 51742
51785: POP
51786: POP
// end else
51787: GO 51805
// result := mpKingPoints [ side ] ;
51789: LD_ADDR_VAR 0 2
51793: PUSH
51794: LD_EXP 38
51798: PUSH
51799: LD_VAR 0 1
51803: ARRAY
51804: ST_TO_ADDR
// end ;
51805: LD_VAR 0 2
51809: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
51810: LD_EXP 35
51814: PUSH
51815: CALL 52016 0 0
51819: AND
51820: PUSH
51821: LD_OWVAR 4
51825: AND
51826: IFFALSE 52013
51828: GO 51830
51830: DISABLE
51831: LD_INT 0
51833: PPUSH
51834: PPUSH
// begin canWin := false ;
51835: LD_ADDR_VAR 0 2
51839: PUSH
51840: LD_INT 0
51842: ST_TO_ADDR
// if not HasPower ( your_side ) then
51843: LD_OWVAR 2
51847: PPUSH
51848: CALL 52056 0 1
51852: NOT
51853: IFFALSE 51864
// begin Multiplayer_Loose_Message ;
51855: CALL_OW 521
// enable ( mpLose ) ;
51859: LD_INT 102
51861: ENABLE_MARKED
// end else
51862: GO 52013
// begin canWin := HowMuchPoints ( your_side ) >= mpPoints ;
51864: LD_ADDR_VAR 0 2
51868: PUSH
51869: LD_OWVAR 2
51873: PPUSH
51874: CALL 51712 0 1
51878: PUSH
51879: LD_EXP 32
51883: GREATEREQUAL
51884: ST_TO_ADDR
// for i := 1 to 8 do
51885: LD_ADDR_VAR 0 1
51889: PUSH
51890: DOUBLE
51891: LD_INT 1
51893: DEC
51894: ST_TO_ADDR
51895: LD_INT 8
51897: PUSH
51898: FOR_TO
51899: IFFALSE 51999
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51901: LD_EXP 5
51905: PUSH
51906: LD_VAR 0 1
51910: ARRAY
51911: PUSH
51912: LD_VAR 0 1
51916: PPUSH
51917: CALL_OW 108
51921: AND
51922: PUSH
51923: LD_VAR 0 1
51927: PUSH
51928: LD_OWVAR 2
51932: NONEQUAL
51933: AND
51934: IFFALSE 51997
// if not mpSideTeams [ i ] or ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) then
51936: LD_EXP 6
51940: PUSH
51941: LD_VAR 0 1
51945: ARRAY
51946: NOT
51947: PUSH
51948: LD_EXP 6
51952: PUSH
51953: LD_VAR 0 1
51957: ARRAY
51958: PUSH
51959: LD_EXP 6
51963: PUSH
51964: LD_OWVAR 2
51968: ARRAY
51969: NONEQUAL
51970: OR
51971: IFFALSE 51997
// if HowMuchPoints ( i ) >= mpPoints then
51973: LD_VAR 0 1
51977: PPUSH
51978: CALL 51712 0 1
51982: PUSH
51983: LD_EXP 32
51987: GREATEREQUAL
51988: IFFALSE 51997
// begin enable ( mpLose ) ;
51990: LD_INT 102
51992: ENABLE_MARKED
// exit ;
51993: POP
51994: POP
51995: GO 52013
// end ;
51997: GO 51898
51999: POP
52000: POP
// if canWin then
52001: LD_VAR 0 2
52005: IFFALSE 52012
// enable ( mpWin ) else
52007: LD_INT 101
52009: ENABLE_MARKED
52010: GO 52013
// enable ;
52012: ENABLE
// end ; end ;
52013: PPOPN 2
52015: END
// function CanWinLoose ; begin
52016: LD_INT 0
52018: PPUSH
// result := true ;
52019: LD_ADDR_VAR 0 1
52023: PUSH
52024: LD_INT 1
52026: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
52027: CALL_OW 531
52031: PUSH
52032: CALL_OW 519
52036: PUSH
52037: LD_INT 1
52039: GREATER
52040: AND
52041: IFFALSE 52051
// result := false ;
52043: LD_ADDR_VAR 0 1
52047: PUSH
52048: LD_INT 0
52050: ST_TO_ADDR
// end ;
52051: LD_VAR 0 1
52055: RET
// function HasPower ( i ) ; begin
52056: LD_INT 0
52058: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
52059: LD_ADDR_VAR 0 2
52063: PUSH
52064: LD_INT 22
52066: PUSH
52067: LD_VAR 0 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 2
52078: PUSH
52079: LD_INT 21
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 33
52091: PUSH
52092: LD_INT 3
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 33
52101: PUSH
52102: LD_INT 5
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PPUSH
52119: CALL_OW 69
52123: ST_TO_ADDR
// end ; end_of_file end_of_file
52124: LD_VAR 0 2
52128: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
52129: LD_VAR 0 1
52133: PPUSH
52134: LD_VAR 0 2
52138: PPUSH
52139: LD_VAR 0 3
52143: PPUSH
52144: LD_VAR 0 4
52148: PPUSH
52149: LD_VAR 0 5
52153: PPUSH
52154: LD_VAR 0 6
52158: PPUSH
52159: CALL 52360 0 6
// end ;
52163: PPOPN 6
52165: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
52166: LD_INT 0
52168: PPUSH
// begin if not units then
52169: LD_VAR 0 1
52173: NOT
52174: IFFALSE 52178
// exit ;
52176: GO 52178
// end ;
52178: PPOPN 7
52180: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
52181: CALL 52247 0 0
// end ; end_of_file
52185: PPOPN 1
52187: END
// export globalGameSaveCounter ; every 0 0$1 do
52188: GO 52190
52190: DISABLE
// begin enable ;
52191: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
52192: LD_STRING updateTimer(
52194: PUSH
52195: LD_OWVAR 1
52199: STR
52200: PUSH
52201: LD_STRING );
52203: STR
52204: PPUSH
52205: CALL_OW 559
// end ;
52209: END
// every 0 0$1 do
52210: GO 52212
52212: DISABLE
// begin globalGameSaveCounter := 0 ;
52213: LD_ADDR_EXP 39
52217: PUSH
52218: LD_INT 0
52220: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
52221: LD_STRING setGameSaveCounter(0)
52223: PPUSH
52224: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
52228: LD_STRING initStreamRollete();
52230: PPUSH
52231: CALL_OW 559
// InitStreamMode ;
52235: CALL 53578 0 0
// DefineStreamItems ( false ) ;
52239: LD_INT 0
52241: PPUSH
52242: CALL 54042 0 1
// end ;
52246: END
// export function SOS_MapStart ( ) ; begin
52247: LD_INT 0
52249: PPUSH
// if streamModeActive then
52250: LD_EXP 40
52254: IFFALSE 52263
// DefineStreamItems ( true ) ;
52256: LD_INT 1
52258: PPUSH
52259: CALL 54042 0 1
// UpdateLuaVariables ( ) ;
52263: CALL 52280 0 0
// UpdateFactoryWaypoints ( ) ;
52267: CALL 66911 0 0
// UpdateWarehouseGatheringPoints ( ) ;
52271: CALL 67168 0 0
// end ;
52275: LD_VAR 0 1
52279: RET
// function UpdateLuaVariables ( ) ; begin
52280: LD_INT 0
52282: PPUSH
// if globalGameSaveCounter then
52283: LD_EXP 39
52287: IFFALSE 52321
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
52289: LD_ADDR_EXP 39
52293: PUSH
52294: LD_EXP 39
52298: PPUSH
52299: CALL 41855 0 1
52303: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
52304: LD_STRING setGameSaveCounter(
52306: PUSH
52307: LD_EXP 39
52311: STR
52312: PUSH
52313: LD_STRING )
52315: STR
52316: PPUSH
52317: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
52321: LD_STRING setGameDifficulty(
52323: PUSH
52324: LD_OWVAR 67
52328: STR
52329: PUSH
52330: LD_STRING )
52332: STR
52333: PPUSH
52334: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
52338: LD_STRING displayDifficulty(
52340: PUSH
52341: LD_OWVAR 67
52345: STR
52346: PUSH
52347: LD_STRING )
52349: STR
52350: PPUSH
52351: CALL_OW 559
// end ;
52355: LD_VAR 0 1
52359: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
52360: LD_INT 0
52362: PPUSH
// if p2 = stream_mode then
52363: LD_VAR 0 2
52367: PUSH
52368: LD_INT 100
52370: EQUAL
52371: IFFALSE 53374
// begin if not StreamModeActive then
52373: LD_EXP 40
52377: NOT
52378: IFFALSE 52388
// StreamModeActive := true ;
52380: LD_ADDR_EXP 40
52384: PUSH
52385: LD_INT 1
52387: ST_TO_ADDR
// if p3 = 0 then
52388: LD_VAR 0 3
52392: PUSH
52393: LD_INT 0
52395: EQUAL
52396: IFFALSE 52402
// InitStreamMode ;
52398: CALL 53578 0 0
// if p3 = 1 then
52402: LD_VAR 0 3
52406: PUSH
52407: LD_INT 1
52409: EQUAL
52410: IFFALSE 52420
// sRocket := true ;
52412: LD_ADDR_EXP 45
52416: PUSH
52417: LD_INT 1
52419: ST_TO_ADDR
// if p3 = 2 then
52420: LD_VAR 0 3
52424: PUSH
52425: LD_INT 2
52427: EQUAL
52428: IFFALSE 52438
// sSpeed := true ;
52430: LD_ADDR_EXP 44
52434: PUSH
52435: LD_INT 1
52437: ST_TO_ADDR
// if p3 = 3 then
52438: LD_VAR 0 3
52442: PUSH
52443: LD_INT 3
52445: EQUAL
52446: IFFALSE 52456
// sEngine := true ;
52448: LD_ADDR_EXP 46
52452: PUSH
52453: LD_INT 1
52455: ST_TO_ADDR
// if p3 = 4 then
52456: LD_VAR 0 3
52460: PUSH
52461: LD_INT 4
52463: EQUAL
52464: IFFALSE 52474
// sSpec := true ;
52466: LD_ADDR_EXP 43
52470: PUSH
52471: LD_INT 1
52473: ST_TO_ADDR
// if p3 = 5 then
52474: LD_VAR 0 3
52478: PUSH
52479: LD_INT 5
52481: EQUAL
52482: IFFALSE 52492
// sLevel := true ;
52484: LD_ADDR_EXP 47
52488: PUSH
52489: LD_INT 1
52491: ST_TO_ADDR
// if p3 = 6 then
52492: LD_VAR 0 3
52496: PUSH
52497: LD_INT 6
52499: EQUAL
52500: IFFALSE 52510
// sArmoury := true ;
52502: LD_ADDR_EXP 48
52506: PUSH
52507: LD_INT 1
52509: ST_TO_ADDR
// if p3 = 7 then
52510: LD_VAR 0 3
52514: PUSH
52515: LD_INT 7
52517: EQUAL
52518: IFFALSE 52528
// sRadar := true ;
52520: LD_ADDR_EXP 49
52524: PUSH
52525: LD_INT 1
52527: ST_TO_ADDR
// if p3 = 8 then
52528: LD_VAR 0 3
52532: PUSH
52533: LD_INT 8
52535: EQUAL
52536: IFFALSE 52546
// sBunker := true ;
52538: LD_ADDR_EXP 50
52542: PUSH
52543: LD_INT 1
52545: ST_TO_ADDR
// if p3 = 9 then
52546: LD_VAR 0 3
52550: PUSH
52551: LD_INT 9
52553: EQUAL
52554: IFFALSE 52564
// sHack := true ;
52556: LD_ADDR_EXP 51
52560: PUSH
52561: LD_INT 1
52563: ST_TO_ADDR
// if p3 = 10 then
52564: LD_VAR 0 3
52568: PUSH
52569: LD_INT 10
52571: EQUAL
52572: IFFALSE 52582
// sFire := true ;
52574: LD_ADDR_EXP 52
52578: PUSH
52579: LD_INT 1
52581: ST_TO_ADDR
// if p3 = 11 then
52582: LD_VAR 0 3
52586: PUSH
52587: LD_INT 11
52589: EQUAL
52590: IFFALSE 52600
// sRefresh := true ;
52592: LD_ADDR_EXP 53
52596: PUSH
52597: LD_INT 1
52599: ST_TO_ADDR
// if p3 = 12 then
52600: LD_VAR 0 3
52604: PUSH
52605: LD_INT 12
52607: EQUAL
52608: IFFALSE 52618
// sExp := true ;
52610: LD_ADDR_EXP 54
52614: PUSH
52615: LD_INT 1
52617: ST_TO_ADDR
// if p3 = 13 then
52618: LD_VAR 0 3
52622: PUSH
52623: LD_INT 13
52625: EQUAL
52626: IFFALSE 52636
// sDepot := true ;
52628: LD_ADDR_EXP 55
52632: PUSH
52633: LD_INT 1
52635: ST_TO_ADDR
// if p3 = 14 then
52636: LD_VAR 0 3
52640: PUSH
52641: LD_INT 14
52643: EQUAL
52644: IFFALSE 52654
// sFlag := true ;
52646: LD_ADDR_EXP 56
52650: PUSH
52651: LD_INT 1
52653: ST_TO_ADDR
// if p3 = 15 then
52654: LD_VAR 0 3
52658: PUSH
52659: LD_INT 15
52661: EQUAL
52662: IFFALSE 52672
// sKamikadze := true ;
52664: LD_ADDR_EXP 64
52668: PUSH
52669: LD_INT 1
52671: ST_TO_ADDR
// if p3 = 16 then
52672: LD_VAR 0 3
52676: PUSH
52677: LD_INT 16
52679: EQUAL
52680: IFFALSE 52690
// sTroll := true ;
52682: LD_ADDR_EXP 65
52686: PUSH
52687: LD_INT 1
52689: ST_TO_ADDR
// if p3 = 17 then
52690: LD_VAR 0 3
52694: PUSH
52695: LD_INT 17
52697: EQUAL
52698: IFFALSE 52708
// sSlow := true ;
52700: LD_ADDR_EXP 66
52704: PUSH
52705: LD_INT 1
52707: ST_TO_ADDR
// if p3 = 18 then
52708: LD_VAR 0 3
52712: PUSH
52713: LD_INT 18
52715: EQUAL
52716: IFFALSE 52726
// sLack := true ;
52718: LD_ADDR_EXP 67
52722: PUSH
52723: LD_INT 1
52725: ST_TO_ADDR
// if p3 = 19 then
52726: LD_VAR 0 3
52730: PUSH
52731: LD_INT 19
52733: EQUAL
52734: IFFALSE 52744
// sTank := true ;
52736: LD_ADDR_EXP 69
52740: PUSH
52741: LD_INT 1
52743: ST_TO_ADDR
// if p3 = 20 then
52744: LD_VAR 0 3
52748: PUSH
52749: LD_INT 20
52751: EQUAL
52752: IFFALSE 52762
// sRemote := true ;
52754: LD_ADDR_EXP 70
52758: PUSH
52759: LD_INT 1
52761: ST_TO_ADDR
// if p3 = 21 then
52762: LD_VAR 0 3
52766: PUSH
52767: LD_INT 21
52769: EQUAL
52770: IFFALSE 52780
// sPowell := true ;
52772: LD_ADDR_EXP 71
52776: PUSH
52777: LD_INT 1
52779: ST_TO_ADDR
// if p3 = 22 then
52780: LD_VAR 0 3
52784: PUSH
52785: LD_INT 22
52787: EQUAL
52788: IFFALSE 52798
// sTeleport := true ;
52790: LD_ADDR_EXP 74
52794: PUSH
52795: LD_INT 1
52797: ST_TO_ADDR
// if p3 = 23 then
52798: LD_VAR 0 3
52802: PUSH
52803: LD_INT 23
52805: EQUAL
52806: IFFALSE 52816
// sOilTower := true ;
52808: LD_ADDR_EXP 76
52812: PUSH
52813: LD_INT 1
52815: ST_TO_ADDR
// if p3 = 24 then
52816: LD_VAR 0 3
52820: PUSH
52821: LD_INT 24
52823: EQUAL
52824: IFFALSE 52834
// sShovel := true ;
52826: LD_ADDR_EXP 77
52830: PUSH
52831: LD_INT 1
52833: ST_TO_ADDR
// if p3 = 25 then
52834: LD_VAR 0 3
52838: PUSH
52839: LD_INT 25
52841: EQUAL
52842: IFFALSE 52852
// sSheik := true ;
52844: LD_ADDR_EXP 78
52848: PUSH
52849: LD_INT 1
52851: ST_TO_ADDR
// if p3 = 26 then
52852: LD_VAR 0 3
52856: PUSH
52857: LD_INT 26
52859: EQUAL
52860: IFFALSE 52870
// sEarthquake := true ;
52862: LD_ADDR_EXP 80
52866: PUSH
52867: LD_INT 1
52869: ST_TO_ADDR
// if p3 = 27 then
52870: LD_VAR 0 3
52874: PUSH
52875: LD_INT 27
52877: EQUAL
52878: IFFALSE 52888
// sAI := true ;
52880: LD_ADDR_EXP 81
52884: PUSH
52885: LD_INT 1
52887: ST_TO_ADDR
// if p3 = 28 then
52888: LD_VAR 0 3
52892: PUSH
52893: LD_INT 28
52895: EQUAL
52896: IFFALSE 52906
// sCargo := true ;
52898: LD_ADDR_EXP 84
52902: PUSH
52903: LD_INT 1
52905: ST_TO_ADDR
// if p3 = 29 then
52906: LD_VAR 0 3
52910: PUSH
52911: LD_INT 29
52913: EQUAL
52914: IFFALSE 52924
// sDLaser := true ;
52916: LD_ADDR_EXP 85
52920: PUSH
52921: LD_INT 1
52923: ST_TO_ADDR
// if p3 = 30 then
52924: LD_VAR 0 3
52928: PUSH
52929: LD_INT 30
52931: EQUAL
52932: IFFALSE 52942
// sExchange := true ;
52934: LD_ADDR_EXP 86
52938: PUSH
52939: LD_INT 1
52941: ST_TO_ADDR
// if p3 = 31 then
52942: LD_VAR 0 3
52946: PUSH
52947: LD_INT 31
52949: EQUAL
52950: IFFALSE 52960
// sFac := true ;
52952: LD_ADDR_EXP 87
52956: PUSH
52957: LD_INT 1
52959: ST_TO_ADDR
// if p3 = 32 then
52960: LD_VAR 0 3
52964: PUSH
52965: LD_INT 32
52967: EQUAL
52968: IFFALSE 52978
// sPower := true ;
52970: LD_ADDR_EXP 88
52974: PUSH
52975: LD_INT 1
52977: ST_TO_ADDR
// if p3 = 33 then
52978: LD_VAR 0 3
52982: PUSH
52983: LD_INT 33
52985: EQUAL
52986: IFFALSE 52996
// sRandom := true ;
52988: LD_ADDR_EXP 89
52992: PUSH
52993: LD_INT 1
52995: ST_TO_ADDR
// if p3 = 34 then
52996: LD_VAR 0 3
53000: PUSH
53001: LD_INT 34
53003: EQUAL
53004: IFFALSE 53014
// sShield := true ;
53006: LD_ADDR_EXP 90
53010: PUSH
53011: LD_INT 1
53013: ST_TO_ADDR
// if p3 = 35 then
53014: LD_VAR 0 3
53018: PUSH
53019: LD_INT 35
53021: EQUAL
53022: IFFALSE 53032
// sTime := true ;
53024: LD_ADDR_EXP 91
53028: PUSH
53029: LD_INT 1
53031: ST_TO_ADDR
// if p3 = 36 then
53032: LD_VAR 0 3
53036: PUSH
53037: LD_INT 36
53039: EQUAL
53040: IFFALSE 53050
// sTools := true ;
53042: LD_ADDR_EXP 92
53046: PUSH
53047: LD_INT 1
53049: ST_TO_ADDR
// if p3 = 101 then
53050: LD_VAR 0 3
53054: PUSH
53055: LD_INT 101
53057: EQUAL
53058: IFFALSE 53068
// sSold := true ;
53060: LD_ADDR_EXP 57
53064: PUSH
53065: LD_INT 1
53067: ST_TO_ADDR
// if p3 = 102 then
53068: LD_VAR 0 3
53072: PUSH
53073: LD_INT 102
53075: EQUAL
53076: IFFALSE 53086
// sDiff := true ;
53078: LD_ADDR_EXP 58
53082: PUSH
53083: LD_INT 1
53085: ST_TO_ADDR
// if p3 = 103 then
53086: LD_VAR 0 3
53090: PUSH
53091: LD_INT 103
53093: EQUAL
53094: IFFALSE 53104
// sFog := true ;
53096: LD_ADDR_EXP 61
53100: PUSH
53101: LD_INT 1
53103: ST_TO_ADDR
// if p3 = 104 then
53104: LD_VAR 0 3
53108: PUSH
53109: LD_INT 104
53111: EQUAL
53112: IFFALSE 53122
// sReset := true ;
53114: LD_ADDR_EXP 62
53118: PUSH
53119: LD_INT 1
53121: ST_TO_ADDR
// if p3 = 105 then
53122: LD_VAR 0 3
53126: PUSH
53127: LD_INT 105
53129: EQUAL
53130: IFFALSE 53140
// sSun := true ;
53132: LD_ADDR_EXP 63
53136: PUSH
53137: LD_INT 1
53139: ST_TO_ADDR
// if p3 = 106 then
53140: LD_VAR 0 3
53144: PUSH
53145: LD_INT 106
53147: EQUAL
53148: IFFALSE 53158
// sTiger := true ;
53150: LD_ADDR_EXP 59
53154: PUSH
53155: LD_INT 1
53157: ST_TO_ADDR
// if p3 = 107 then
53158: LD_VAR 0 3
53162: PUSH
53163: LD_INT 107
53165: EQUAL
53166: IFFALSE 53176
// sBomb := true ;
53168: LD_ADDR_EXP 60
53172: PUSH
53173: LD_INT 1
53175: ST_TO_ADDR
// if p3 = 108 then
53176: LD_VAR 0 3
53180: PUSH
53181: LD_INT 108
53183: EQUAL
53184: IFFALSE 53194
// sWound := true ;
53186: LD_ADDR_EXP 68
53190: PUSH
53191: LD_INT 1
53193: ST_TO_ADDR
// if p3 = 109 then
53194: LD_VAR 0 3
53198: PUSH
53199: LD_INT 109
53201: EQUAL
53202: IFFALSE 53212
// sBetray := true ;
53204: LD_ADDR_EXP 72
53208: PUSH
53209: LD_INT 1
53211: ST_TO_ADDR
// if p3 = 110 then
53212: LD_VAR 0 3
53216: PUSH
53217: LD_INT 110
53219: EQUAL
53220: IFFALSE 53230
// sContamin := true ;
53222: LD_ADDR_EXP 73
53226: PUSH
53227: LD_INT 1
53229: ST_TO_ADDR
// if p3 = 111 then
53230: LD_VAR 0 3
53234: PUSH
53235: LD_INT 111
53237: EQUAL
53238: IFFALSE 53248
// sOil := true ;
53240: LD_ADDR_EXP 75
53244: PUSH
53245: LD_INT 1
53247: ST_TO_ADDR
// if p3 = 112 then
53248: LD_VAR 0 3
53252: PUSH
53253: LD_INT 112
53255: EQUAL
53256: IFFALSE 53266
// sStu := true ;
53258: LD_ADDR_EXP 79
53262: PUSH
53263: LD_INT 1
53265: ST_TO_ADDR
// if p3 = 113 then
53266: LD_VAR 0 3
53270: PUSH
53271: LD_INT 113
53273: EQUAL
53274: IFFALSE 53284
// sBazooka := true ;
53276: LD_ADDR_EXP 82
53280: PUSH
53281: LD_INT 1
53283: ST_TO_ADDR
// if p3 = 114 then
53284: LD_VAR 0 3
53288: PUSH
53289: LD_INT 114
53291: EQUAL
53292: IFFALSE 53302
// sMortar := true ;
53294: LD_ADDR_EXP 83
53298: PUSH
53299: LD_INT 1
53301: ST_TO_ADDR
// if p3 = 115 then
53302: LD_VAR 0 3
53306: PUSH
53307: LD_INT 115
53309: EQUAL
53310: IFFALSE 53320
// sRanger := true ;
53312: LD_ADDR_EXP 93
53316: PUSH
53317: LD_INT 1
53319: ST_TO_ADDR
// if p3 = 116 then
53320: LD_VAR 0 3
53324: PUSH
53325: LD_INT 116
53327: EQUAL
53328: IFFALSE 53338
// sComputer := true ;
53330: LD_ADDR_EXP 94
53334: PUSH
53335: LD_INT 1
53337: ST_TO_ADDR
// if p3 = 117 then
53338: LD_VAR 0 3
53342: PUSH
53343: LD_INT 117
53345: EQUAL
53346: IFFALSE 53356
// s30 := true ;
53348: LD_ADDR_EXP 95
53352: PUSH
53353: LD_INT 1
53355: ST_TO_ADDR
// if p3 = 118 then
53356: LD_VAR 0 3
53360: PUSH
53361: LD_INT 118
53363: EQUAL
53364: IFFALSE 53374
// s60 := true ;
53366: LD_ADDR_EXP 96
53370: PUSH
53371: LD_INT 1
53373: ST_TO_ADDR
// end ; if p2 = hack_mode then
53374: LD_VAR 0 2
53378: PUSH
53379: LD_INT 101
53381: EQUAL
53382: IFFALSE 53510
// begin case p3 of 1 :
53384: LD_VAR 0 3
53388: PUSH
53389: LD_INT 1
53391: DOUBLE
53392: EQUAL
53393: IFTRUE 53397
53395: GO 53404
53397: POP
// hHackUnlimitedResources ; 2 :
53398: CALL 65657 0 0
53402: GO 53510
53404: LD_INT 2
53406: DOUBLE
53407: EQUAL
53408: IFTRUE 53412
53410: GO 53419
53412: POP
// hHackSetLevel10 ; 3 :
53413: CALL 65790 0 0
53417: GO 53510
53419: LD_INT 3
53421: DOUBLE
53422: EQUAL
53423: IFTRUE 53427
53425: GO 53434
53427: POP
// hHackSetLevel10YourUnits ; 4 :
53428: CALL 65875 0 0
53432: GO 53510
53434: LD_INT 4
53436: DOUBLE
53437: EQUAL
53438: IFTRUE 53442
53440: GO 53449
53442: POP
// hHackInvincible ; 5 :
53443: CALL 66323 0 0
53447: GO 53510
53449: LD_INT 5
53451: DOUBLE
53452: EQUAL
53453: IFTRUE 53457
53455: GO 53464
53457: POP
// hHackInvisible ; 6 :
53458: CALL 66434 0 0
53462: GO 53510
53464: LD_INT 6
53466: DOUBLE
53467: EQUAL
53468: IFTRUE 53472
53470: GO 53479
53472: POP
// hHackChangeYourSide ; 7 :
53473: CALL 66491 0 0
53477: GO 53510
53479: LD_INT 7
53481: DOUBLE
53482: EQUAL
53483: IFTRUE 53487
53485: GO 53494
53487: POP
// hHackChangeUnitSide ; 8 :
53488: CALL 66533 0 0
53492: GO 53510
53494: LD_INT 8
53496: DOUBLE
53497: EQUAL
53498: IFTRUE 53502
53500: GO 53509
53502: POP
// hHackFog ; end ;
53503: CALL 66634 0 0
53507: GO 53510
53509: POP
// end ; if p2 = game_save_mode then
53510: LD_VAR 0 2
53514: PUSH
53515: LD_INT 102
53517: EQUAL
53518: IFFALSE 53573
// begin if p3 = 1 then
53520: LD_VAR 0 3
53524: PUSH
53525: LD_INT 1
53527: EQUAL
53528: IFFALSE 53540
// globalGameSaveCounter := p4 ;
53530: LD_ADDR_EXP 39
53534: PUSH
53535: LD_VAR 0 4
53539: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
53540: LD_VAR 0 3
53544: PUSH
53545: LD_INT 2
53547: EQUAL
53548: PUSH
53549: LD_EXP 39
53553: AND
53554: IFFALSE 53573
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53556: LD_STRING setGameSaveCounter(
53558: PUSH
53559: LD_EXP 39
53563: STR
53564: PUSH
53565: LD_STRING )
53567: STR
53568: PPUSH
53569: CALL_OW 559
// end ; end ;
53573: LD_VAR 0 7
53577: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
53578: LD_INT 0
53580: PPUSH
// streamModeActive := false ;
53581: LD_ADDR_EXP 40
53585: PUSH
53586: LD_INT 0
53588: ST_TO_ADDR
// normalCounter := 36 ;
53589: LD_ADDR_EXP 41
53593: PUSH
53594: LD_INT 36
53596: ST_TO_ADDR
// hardcoreCounter := 18 ;
53597: LD_ADDR_EXP 42
53601: PUSH
53602: LD_INT 18
53604: ST_TO_ADDR
// sRocket := false ;
53605: LD_ADDR_EXP 45
53609: PUSH
53610: LD_INT 0
53612: ST_TO_ADDR
// sSpeed := false ;
53613: LD_ADDR_EXP 44
53617: PUSH
53618: LD_INT 0
53620: ST_TO_ADDR
// sEngine := false ;
53621: LD_ADDR_EXP 46
53625: PUSH
53626: LD_INT 0
53628: ST_TO_ADDR
// sSpec := false ;
53629: LD_ADDR_EXP 43
53633: PUSH
53634: LD_INT 0
53636: ST_TO_ADDR
// sLevel := false ;
53637: LD_ADDR_EXP 47
53641: PUSH
53642: LD_INT 0
53644: ST_TO_ADDR
// sArmoury := false ;
53645: LD_ADDR_EXP 48
53649: PUSH
53650: LD_INT 0
53652: ST_TO_ADDR
// sRadar := false ;
53653: LD_ADDR_EXP 49
53657: PUSH
53658: LD_INT 0
53660: ST_TO_ADDR
// sBunker := false ;
53661: LD_ADDR_EXP 50
53665: PUSH
53666: LD_INT 0
53668: ST_TO_ADDR
// sHack := false ;
53669: LD_ADDR_EXP 51
53673: PUSH
53674: LD_INT 0
53676: ST_TO_ADDR
// sFire := false ;
53677: LD_ADDR_EXP 52
53681: PUSH
53682: LD_INT 0
53684: ST_TO_ADDR
// sRefresh := false ;
53685: LD_ADDR_EXP 53
53689: PUSH
53690: LD_INT 0
53692: ST_TO_ADDR
// sExp := false ;
53693: LD_ADDR_EXP 54
53697: PUSH
53698: LD_INT 0
53700: ST_TO_ADDR
// sDepot := false ;
53701: LD_ADDR_EXP 55
53705: PUSH
53706: LD_INT 0
53708: ST_TO_ADDR
// sFlag := false ;
53709: LD_ADDR_EXP 56
53713: PUSH
53714: LD_INT 0
53716: ST_TO_ADDR
// sKamikadze := false ;
53717: LD_ADDR_EXP 64
53721: PUSH
53722: LD_INT 0
53724: ST_TO_ADDR
// sTroll := false ;
53725: LD_ADDR_EXP 65
53729: PUSH
53730: LD_INT 0
53732: ST_TO_ADDR
// sSlow := false ;
53733: LD_ADDR_EXP 66
53737: PUSH
53738: LD_INT 0
53740: ST_TO_ADDR
// sLack := false ;
53741: LD_ADDR_EXP 67
53745: PUSH
53746: LD_INT 0
53748: ST_TO_ADDR
// sTank := false ;
53749: LD_ADDR_EXP 69
53753: PUSH
53754: LD_INT 0
53756: ST_TO_ADDR
// sRemote := false ;
53757: LD_ADDR_EXP 70
53761: PUSH
53762: LD_INT 0
53764: ST_TO_ADDR
// sPowell := false ;
53765: LD_ADDR_EXP 71
53769: PUSH
53770: LD_INT 0
53772: ST_TO_ADDR
// sTeleport := false ;
53773: LD_ADDR_EXP 74
53777: PUSH
53778: LD_INT 0
53780: ST_TO_ADDR
// sOilTower := false ;
53781: LD_ADDR_EXP 76
53785: PUSH
53786: LD_INT 0
53788: ST_TO_ADDR
// sShovel := false ;
53789: LD_ADDR_EXP 77
53793: PUSH
53794: LD_INT 0
53796: ST_TO_ADDR
// sSheik := false ;
53797: LD_ADDR_EXP 78
53801: PUSH
53802: LD_INT 0
53804: ST_TO_ADDR
// sEarthquake := false ;
53805: LD_ADDR_EXP 80
53809: PUSH
53810: LD_INT 0
53812: ST_TO_ADDR
// sAI := false ;
53813: LD_ADDR_EXP 81
53817: PUSH
53818: LD_INT 0
53820: ST_TO_ADDR
// sCargo := false ;
53821: LD_ADDR_EXP 84
53825: PUSH
53826: LD_INT 0
53828: ST_TO_ADDR
// sDLaser := false ;
53829: LD_ADDR_EXP 85
53833: PUSH
53834: LD_INT 0
53836: ST_TO_ADDR
// sExchange := false ;
53837: LD_ADDR_EXP 86
53841: PUSH
53842: LD_INT 0
53844: ST_TO_ADDR
// sFac := false ;
53845: LD_ADDR_EXP 87
53849: PUSH
53850: LD_INT 0
53852: ST_TO_ADDR
// sPower := false ;
53853: LD_ADDR_EXP 88
53857: PUSH
53858: LD_INT 0
53860: ST_TO_ADDR
// sRandom := false ;
53861: LD_ADDR_EXP 89
53865: PUSH
53866: LD_INT 0
53868: ST_TO_ADDR
// sShield := false ;
53869: LD_ADDR_EXP 90
53873: PUSH
53874: LD_INT 0
53876: ST_TO_ADDR
// sTime := false ;
53877: LD_ADDR_EXP 91
53881: PUSH
53882: LD_INT 0
53884: ST_TO_ADDR
// sTools := false ;
53885: LD_ADDR_EXP 92
53889: PUSH
53890: LD_INT 0
53892: ST_TO_ADDR
// sSold := false ;
53893: LD_ADDR_EXP 57
53897: PUSH
53898: LD_INT 0
53900: ST_TO_ADDR
// sDiff := false ;
53901: LD_ADDR_EXP 58
53905: PUSH
53906: LD_INT 0
53908: ST_TO_ADDR
// sFog := false ;
53909: LD_ADDR_EXP 61
53913: PUSH
53914: LD_INT 0
53916: ST_TO_ADDR
// sReset := false ;
53917: LD_ADDR_EXP 62
53921: PUSH
53922: LD_INT 0
53924: ST_TO_ADDR
// sSun := false ;
53925: LD_ADDR_EXP 63
53929: PUSH
53930: LD_INT 0
53932: ST_TO_ADDR
// sTiger := false ;
53933: LD_ADDR_EXP 59
53937: PUSH
53938: LD_INT 0
53940: ST_TO_ADDR
// sBomb := false ;
53941: LD_ADDR_EXP 60
53945: PUSH
53946: LD_INT 0
53948: ST_TO_ADDR
// sWound := false ;
53949: LD_ADDR_EXP 68
53953: PUSH
53954: LD_INT 0
53956: ST_TO_ADDR
// sBetray := false ;
53957: LD_ADDR_EXP 72
53961: PUSH
53962: LD_INT 0
53964: ST_TO_ADDR
// sContamin := false ;
53965: LD_ADDR_EXP 73
53969: PUSH
53970: LD_INT 0
53972: ST_TO_ADDR
// sOil := false ;
53973: LD_ADDR_EXP 75
53977: PUSH
53978: LD_INT 0
53980: ST_TO_ADDR
// sStu := false ;
53981: LD_ADDR_EXP 79
53985: PUSH
53986: LD_INT 0
53988: ST_TO_ADDR
// sBazooka := false ;
53989: LD_ADDR_EXP 82
53993: PUSH
53994: LD_INT 0
53996: ST_TO_ADDR
// sMortar := false ;
53997: LD_ADDR_EXP 83
54001: PUSH
54002: LD_INT 0
54004: ST_TO_ADDR
// sRanger := false ;
54005: LD_ADDR_EXP 93
54009: PUSH
54010: LD_INT 0
54012: ST_TO_ADDR
// sComputer := false ;
54013: LD_ADDR_EXP 94
54017: PUSH
54018: LD_INT 0
54020: ST_TO_ADDR
// s30 := false ;
54021: LD_ADDR_EXP 95
54025: PUSH
54026: LD_INT 0
54028: ST_TO_ADDR
// s60 := false ;
54029: LD_ADDR_EXP 96
54033: PUSH
54034: LD_INT 0
54036: ST_TO_ADDR
// end ;
54037: LD_VAR 0 1
54041: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
54042: LD_INT 0
54044: PPUSH
54045: PPUSH
54046: PPUSH
54047: PPUSH
54048: PPUSH
54049: PPUSH
54050: PPUSH
// result := [ ] ;
54051: LD_ADDR_VAR 0 2
54055: PUSH
54056: EMPTY
54057: ST_TO_ADDR
// if campaign_id = 1 then
54058: LD_OWVAR 69
54062: PUSH
54063: LD_INT 1
54065: EQUAL
54066: IFFALSE 57232
// begin case mission_number of 1 :
54068: LD_OWVAR 70
54072: PUSH
54073: LD_INT 1
54075: DOUBLE
54076: EQUAL
54077: IFTRUE 54081
54079: GO 54157
54081: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
54082: LD_ADDR_VAR 0 2
54086: PUSH
54087: LD_INT 2
54089: PUSH
54090: LD_INT 4
54092: PUSH
54093: LD_INT 11
54095: PUSH
54096: LD_INT 12
54098: PUSH
54099: LD_INT 15
54101: PUSH
54102: LD_INT 16
54104: PUSH
54105: LD_INT 22
54107: PUSH
54108: LD_INT 23
54110: PUSH
54111: LD_INT 26
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 101
54127: PUSH
54128: LD_INT 102
54130: PUSH
54131: LD_INT 106
54133: PUSH
54134: LD_INT 116
54136: PUSH
54137: LD_INT 117
54139: PUSH
54140: LD_INT 118
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: ST_TO_ADDR
54155: GO 57230
54157: LD_INT 2
54159: DOUBLE
54160: EQUAL
54161: IFTRUE 54165
54163: GO 54249
54165: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
54166: LD_ADDR_VAR 0 2
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: LD_INT 4
54176: PUSH
54177: LD_INT 11
54179: PUSH
54180: LD_INT 12
54182: PUSH
54183: LD_INT 15
54185: PUSH
54186: LD_INT 16
54188: PUSH
54189: LD_INT 22
54191: PUSH
54192: LD_INT 23
54194: PUSH
54195: LD_INT 26
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 101
54211: PUSH
54212: LD_INT 102
54214: PUSH
54215: LD_INT 105
54217: PUSH
54218: LD_INT 106
54220: PUSH
54221: LD_INT 108
54223: PUSH
54224: LD_INT 116
54226: PUSH
54227: LD_INT 117
54229: PUSH
54230: LD_INT 118
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: ST_TO_ADDR
54247: GO 57230
54249: LD_INT 3
54251: DOUBLE
54252: EQUAL
54253: IFTRUE 54257
54255: GO 54345
54257: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
54258: LD_ADDR_VAR 0 2
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: LD_INT 4
54268: PUSH
54269: LD_INT 5
54271: PUSH
54272: LD_INT 11
54274: PUSH
54275: LD_INT 12
54277: PUSH
54278: LD_INT 15
54280: PUSH
54281: LD_INT 16
54283: PUSH
54284: LD_INT 22
54286: PUSH
54287: LD_INT 26
54289: PUSH
54290: LD_INT 36
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 101
54307: PUSH
54308: LD_INT 102
54310: PUSH
54311: LD_INT 105
54313: PUSH
54314: LD_INT 106
54316: PUSH
54317: LD_INT 108
54319: PUSH
54320: LD_INT 116
54322: PUSH
54323: LD_INT 117
54325: PUSH
54326: LD_INT 118
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: ST_TO_ADDR
54343: GO 57230
54345: LD_INT 4
54347: DOUBLE
54348: EQUAL
54349: IFTRUE 54353
54351: GO 54449
54353: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
54354: LD_ADDR_VAR 0 2
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: LD_INT 4
54364: PUSH
54365: LD_INT 5
54367: PUSH
54368: LD_INT 8
54370: PUSH
54371: LD_INT 11
54373: PUSH
54374: LD_INT 12
54376: PUSH
54377: LD_INT 15
54379: PUSH
54380: LD_INT 16
54382: PUSH
54383: LD_INT 22
54385: PUSH
54386: LD_INT 23
54388: PUSH
54389: LD_INT 26
54391: PUSH
54392: LD_INT 36
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 101
54411: PUSH
54412: LD_INT 102
54414: PUSH
54415: LD_INT 105
54417: PUSH
54418: LD_INT 106
54420: PUSH
54421: LD_INT 108
54423: PUSH
54424: LD_INT 116
54426: PUSH
54427: LD_INT 117
54429: PUSH
54430: LD_INT 118
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: ST_TO_ADDR
54447: GO 57230
54449: LD_INT 5
54451: DOUBLE
54452: EQUAL
54453: IFTRUE 54457
54455: GO 54569
54457: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
54458: LD_ADDR_VAR 0 2
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: LD_INT 4
54468: PUSH
54469: LD_INT 5
54471: PUSH
54472: LD_INT 6
54474: PUSH
54475: LD_INT 8
54477: PUSH
54478: LD_INT 11
54480: PUSH
54481: LD_INT 12
54483: PUSH
54484: LD_INT 15
54486: PUSH
54487: LD_INT 16
54489: PUSH
54490: LD_INT 22
54492: PUSH
54493: LD_INT 23
54495: PUSH
54496: LD_INT 25
54498: PUSH
54499: LD_INT 26
54501: PUSH
54502: LD_INT 36
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 101
54523: PUSH
54524: LD_INT 102
54526: PUSH
54527: LD_INT 105
54529: PUSH
54530: LD_INT 106
54532: PUSH
54533: LD_INT 108
54535: PUSH
54536: LD_INT 109
54538: PUSH
54539: LD_INT 112
54541: PUSH
54542: LD_INT 116
54544: PUSH
54545: LD_INT 117
54547: PUSH
54548: LD_INT 118
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: ST_TO_ADDR
54567: GO 57230
54569: LD_INT 6
54571: DOUBLE
54572: EQUAL
54573: IFTRUE 54577
54575: GO 54709
54577: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
54578: LD_ADDR_VAR 0 2
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: LD_INT 4
54588: PUSH
54589: LD_INT 5
54591: PUSH
54592: LD_INT 6
54594: PUSH
54595: LD_INT 8
54597: PUSH
54598: LD_INT 11
54600: PUSH
54601: LD_INT 12
54603: PUSH
54604: LD_INT 15
54606: PUSH
54607: LD_INT 16
54609: PUSH
54610: LD_INT 20
54612: PUSH
54613: LD_INT 21
54615: PUSH
54616: LD_INT 22
54618: PUSH
54619: LD_INT 23
54621: PUSH
54622: LD_INT 25
54624: PUSH
54625: LD_INT 26
54627: PUSH
54628: LD_INT 30
54630: PUSH
54631: LD_INT 31
54633: PUSH
54634: LD_INT 32
54636: PUSH
54637: LD_INT 36
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 101
54663: PUSH
54664: LD_INT 102
54666: PUSH
54667: LD_INT 105
54669: PUSH
54670: LD_INT 106
54672: PUSH
54673: LD_INT 108
54675: PUSH
54676: LD_INT 109
54678: PUSH
54679: LD_INT 112
54681: PUSH
54682: LD_INT 116
54684: PUSH
54685: LD_INT 117
54687: PUSH
54688: LD_INT 118
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: ST_TO_ADDR
54707: GO 57230
54709: LD_INT 7
54711: DOUBLE
54712: EQUAL
54713: IFTRUE 54717
54715: GO 54829
54717: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
54718: LD_ADDR_VAR 0 2
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: LD_INT 4
54728: PUSH
54729: LD_INT 5
54731: PUSH
54732: LD_INT 7
54734: PUSH
54735: LD_INT 11
54737: PUSH
54738: LD_INT 12
54740: PUSH
54741: LD_INT 15
54743: PUSH
54744: LD_INT 16
54746: PUSH
54747: LD_INT 20
54749: PUSH
54750: LD_INT 21
54752: PUSH
54753: LD_INT 22
54755: PUSH
54756: LD_INT 23
54758: PUSH
54759: LD_INT 25
54761: PUSH
54762: LD_INT 26
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 101
54783: PUSH
54784: LD_INT 102
54786: PUSH
54787: LD_INT 103
54789: PUSH
54790: LD_INT 105
54792: PUSH
54793: LD_INT 106
54795: PUSH
54796: LD_INT 108
54798: PUSH
54799: LD_INT 112
54801: PUSH
54802: LD_INT 116
54804: PUSH
54805: LD_INT 117
54807: PUSH
54808: LD_INT 118
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: ST_TO_ADDR
54827: GO 57230
54829: LD_INT 8
54831: DOUBLE
54832: EQUAL
54833: IFTRUE 54837
54835: GO 54977
54837: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
54838: LD_ADDR_VAR 0 2
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: LD_INT 4
54848: PUSH
54849: LD_INT 5
54851: PUSH
54852: LD_INT 6
54854: PUSH
54855: LD_INT 7
54857: PUSH
54858: LD_INT 8
54860: PUSH
54861: LD_INT 11
54863: PUSH
54864: LD_INT 12
54866: PUSH
54867: LD_INT 15
54869: PUSH
54870: LD_INT 16
54872: PUSH
54873: LD_INT 20
54875: PUSH
54876: LD_INT 21
54878: PUSH
54879: LD_INT 22
54881: PUSH
54882: LD_INT 23
54884: PUSH
54885: LD_INT 25
54887: PUSH
54888: LD_INT 26
54890: PUSH
54891: LD_INT 30
54893: PUSH
54894: LD_INT 31
54896: PUSH
54897: LD_INT 32
54899: PUSH
54900: LD_INT 36
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 101
54927: PUSH
54928: LD_INT 102
54930: PUSH
54931: LD_INT 103
54933: PUSH
54934: LD_INT 105
54936: PUSH
54937: LD_INT 106
54939: PUSH
54940: LD_INT 108
54942: PUSH
54943: LD_INT 109
54945: PUSH
54946: LD_INT 112
54948: PUSH
54949: LD_INT 116
54951: PUSH
54952: LD_INT 117
54954: PUSH
54955: LD_INT 118
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: ST_TO_ADDR
54975: GO 57230
54977: LD_INT 9
54979: DOUBLE
54980: EQUAL
54981: IFTRUE 54985
54983: GO 55133
54985: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
54986: LD_ADDR_VAR 0 2
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: LD_INT 4
54996: PUSH
54997: LD_INT 5
54999: PUSH
55000: LD_INT 6
55002: PUSH
55003: LD_INT 7
55005: PUSH
55006: LD_INT 8
55008: PUSH
55009: LD_INT 11
55011: PUSH
55012: LD_INT 12
55014: PUSH
55015: LD_INT 15
55017: PUSH
55018: LD_INT 16
55020: PUSH
55021: LD_INT 20
55023: PUSH
55024: LD_INT 21
55026: PUSH
55027: LD_INT 22
55029: PUSH
55030: LD_INT 23
55032: PUSH
55033: LD_INT 25
55035: PUSH
55036: LD_INT 26
55038: PUSH
55039: LD_INT 28
55041: PUSH
55042: LD_INT 30
55044: PUSH
55045: LD_INT 31
55047: PUSH
55048: LD_INT 32
55050: PUSH
55051: LD_INT 36
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 101
55079: PUSH
55080: LD_INT 102
55082: PUSH
55083: LD_INT 103
55085: PUSH
55086: LD_INT 105
55088: PUSH
55089: LD_INT 106
55091: PUSH
55092: LD_INT 108
55094: PUSH
55095: LD_INT 109
55097: PUSH
55098: LD_INT 112
55100: PUSH
55101: LD_INT 114
55103: PUSH
55104: LD_INT 116
55106: PUSH
55107: LD_INT 117
55109: PUSH
55110: LD_INT 118
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: ST_TO_ADDR
55131: GO 57230
55133: LD_INT 10
55135: DOUBLE
55136: EQUAL
55137: IFTRUE 55141
55139: GO 55337
55141: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
55142: LD_ADDR_VAR 0 2
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: LD_INT 4
55152: PUSH
55153: LD_INT 5
55155: PUSH
55156: LD_INT 6
55158: PUSH
55159: LD_INT 7
55161: PUSH
55162: LD_INT 8
55164: PUSH
55165: LD_INT 9
55167: PUSH
55168: LD_INT 10
55170: PUSH
55171: LD_INT 11
55173: PUSH
55174: LD_INT 12
55176: PUSH
55177: LD_INT 13
55179: PUSH
55180: LD_INT 14
55182: PUSH
55183: LD_INT 15
55185: PUSH
55186: LD_INT 16
55188: PUSH
55189: LD_INT 17
55191: PUSH
55192: LD_INT 18
55194: PUSH
55195: LD_INT 19
55197: PUSH
55198: LD_INT 20
55200: PUSH
55201: LD_INT 21
55203: PUSH
55204: LD_INT 22
55206: PUSH
55207: LD_INT 23
55209: PUSH
55210: LD_INT 24
55212: PUSH
55213: LD_INT 25
55215: PUSH
55216: LD_INT 26
55218: PUSH
55219: LD_INT 28
55221: PUSH
55222: LD_INT 30
55224: PUSH
55225: LD_INT 31
55227: PUSH
55228: LD_INT 32
55230: PUSH
55231: LD_INT 36
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 101
55267: PUSH
55268: LD_INT 102
55270: PUSH
55271: LD_INT 103
55273: PUSH
55274: LD_INT 104
55276: PUSH
55277: LD_INT 105
55279: PUSH
55280: LD_INT 106
55282: PUSH
55283: LD_INT 107
55285: PUSH
55286: LD_INT 108
55288: PUSH
55289: LD_INT 109
55291: PUSH
55292: LD_INT 110
55294: PUSH
55295: LD_INT 111
55297: PUSH
55298: LD_INT 112
55300: PUSH
55301: LD_INT 114
55303: PUSH
55304: LD_INT 116
55306: PUSH
55307: LD_INT 117
55309: PUSH
55310: LD_INT 118
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: ST_TO_ADDR
55335: GO 57230
55337: LD_INT 11
55339: DOUBLE
55340: EQUAL
55341: IFTRUE 55345
55343: GO 55549
55345: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
55346: LD_ADDR_VAR 0 2
55350: PUSH
55351: LD_INT 2
55353: PUSH
55354: LD_INT 3
55356: PUSH
55357: LD_INT 4
55359: PUSH
55360: LD_INT 5
55362: PUSH
55363: LD_INT 6
55365: PUSH
55366: LD_INT 7
55368: PUSH
55369: LD_INT 8
55371: PUSH
55372: LD_INT 9
55374: PUSH
55375: LD_INT 10
55377: PUSH
55378: LD_INT 11
55380: PUSH
55381: LD_INT 12
55383: PUSH
55384: LD_INT 13
55386: PUSH
55387: LD_INT 14
55389: PUSH
55390: LD_INT 15
55392: PUSH
55393: LD_INT 16
55395: PUSH
55396: LD_INT 17
55398: PUSH
55399: LD_INT 18
55401: PUSH
55402: LD_INT 19
55404: PUSH
55405: LD_INT 20
55407: PUSH
55408: LD_INT 21
55410: PUSH
55411: LD_INT 22
55413: PUSH
55414: LD_INT 23
55416: PUSH
55417: LD_INT 24
55419: PUSH
55420: LD_INT 25
55422: PUSH
55423: LD_INT 26
55425: PUSH
55426: LD_INT 28
55428: PUSH
55429: LD_INT 30
55431: PUSH
55432: LD_INT 31
55434: PUSH
55435: LD_INT 32
55437: PUSH
55438: LD_INT 34
55440: PUSH
55441: LD_INT 36
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 101
55479: PUSH
55480: LD_INT 102
55482: PUSH
55483: LD_INT 103
55485: PUSH
55486: LD_INT 104
55488: PUSH
55489: LD_INT 105
55491: PUSH
55492: LD_INT 106
55494: PUSH
55495: LD_INT 107
55497: PUSH
55498: LD_INT 108
55500: PUSH
55501: LD_INT 109
55503: PUSH
55504: LD_INT 110
55506: PUSH
55507: LD_INT 111
55509: PUSH
55510: LD_INT 112
55512: PUSH
55513: LD_INT 114
55515: PUSH
55516: LD_INT 116
55518: PUSH
55519: LD_INT 117
55521: PUSH
55522: LD_INT 118
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: ST_TO_ADDR
55547: GO 57230
55549: LD_INT 12
55551: DOUBLE
55552: EQUAL
55553: IFTRUE 55557
55555: GO 55777
55557: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
55558: LD_ADDR_VAR 0 2
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: LD_INT 3
55571: PUSH
55572: LD_INT 4
55574: PUSH
55575: LD_INT 5
55577: PUSH
55578: LD_INT 6
55580: PUSH
55581: LD_INT 7
55583: PUSH
55584: LD_INT 8
55586: PUSH
55587: LD_INT 9
55589: PUSH
55590: LD_INT 10
55592: PUSH
55593: LD_INT 11
55595: PUSH
55596: LD_INT 12
55598: PUSH
55599: LD_INT 13
55601: PUSH
55602: LD_INT 14
55604: PUSH
55605: LD_INT 15
55607: PUSH
55608: LD_INT 16
55610: PUSH
55611: LD_INT 17
55613: PUSH
55614: LD_INT 18
55616: PUSH
55617: LD_INT 19
55619: PUSH
55620: LD_INT 20
55622: PUSH
55623: LD_INT 21
55625: PUSH
55626: LD_INT 22
55628: PUSH
55629: LD_INT 23
55631: PUSH
55632: LD_INT 24
55634: PUSH
55635: LD_INT 25
55637: PUSH
55638: LD_INT 26
55640: PUSH
55641: LD_INT 27
55643: PUSH
55644: LD_INT 28
55646: PUSH
55647: LD_INT 30
55649: PUSH
55650: LD_INT 31
55652: PUSH
55653: LD_INT 32
55655: PUSH
55656: LD_INT 33
55658: PUSH
55659: LD_INT 34
55661: PUSH
55662: LD_INT 36
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 101
55703: PUSH
55704: LD_INT 102
55706: PUSH
55707: LD_INT 103
55709: PUSH
55710: LD_INT 104
55712: PUSH
55713: LD_INT 105
55715: PUSH
55716: LD_INT 106
55718: PUSH
55719: LD_INT 107
55721: PUSH
55722: LD_INT 108
55724: PUSH
55725: LD_INT 109
55727: PUSH
55728: LD_INT 110
55730: PUSH
55731: LD_INT 111
55733: PUSH
55734: LD_INT 112
55736: PUSH
55737: LD_INT 113
55739: PUSH
55740: LD_INT 114
55742: PUSH
55743: LD_INT 116
55745: PUSH
55746: LD_INT 117
55748: PUSH
55749: LD_INT 118
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: ST_TO_ADDR
55775: GO 57230
55777: LD_INT 13
55779: DOUBLE
55780: EQUAL
55781: IFTRUE 55785
55783: GO 55993
55785: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
55786: LD_ADDR_VAR 0 2
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: LD_INT 2
55796: PUSH
55797: LD_INT 3
55799: PUSH
55800: LD_INT 4
55802: PUSH
55803: LD_INT 5
55805: PUSH
55806: LD_INT 8
55808: PUSH
55809: LD_INT 9
55811: PUSH
55812: LD_INT 10
55814: PUSH
55815: LD_INT 11
55817: PUSH
55818: LD_INT 12
55820: PUSH
55821: LD_INT 14
55823: PUSH
55824: LD_INT 15
55826: PUSH
55827: LD_INT 16
55829: PUSH
55830: LD_INT 17
55832: PUSH
55833: LD_INT 18
55835: PUSH
55836: LD_INT 19
55838: PUSH
55839: LD_INT 20
55841: PUSH
55842: LD_INT 21
55844: PUSH
55845: LD_INT 22
55847: PUSH
55848: LD_INT 23
55850: PUSH
55851: LD_INT 24
55853: PUSH
55854: LD_INT 25
55856: PUSH
55857: LD_INT 26
55859: PUSH
55860: LD_INT 27
55862: PUSH
55863: LD_INT 28
55865: PUSH
55866: LD_INT 30
55868: PUSH
55869: LD_INT 31
55871: PUSH
55872: LD_INT 32
55874: PUSH
55875: LD_INT 33
55877: PUSH
55878: LD_INT 34
55880: PUSH
55881: LD_INT 36
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 101
55919: PUSH
55920: LD_INT 102
55922: PUSH
55923: LD_INT 103
55925: PUSH
55926: LD_INT 104
55928: PUSH
55929: LD_INT 105
55931: PUSH
55932: LD_INT 106
55934: PUSH
55935: LD_INT 107
55937: PUSH
55938: LD_INT 108
55940: PUSH
55941: LD_INT 109
55943: PUSH
55944: LD_INT 110
55946: PUSH
55947: LD_INT 111
55949: PUSH
55950: LD_INT 112
55952: PUSH
55953: LD_INT 113
55955: PUSH
55956: LD_INT 114
55958: PUSH
55959: LD_INT 116
55961: PUSH
55962: LD_INT 117
55964: PUSH
55965: LD_INT 118
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: ST_TO_ADDR
55991: GO 57230
55993: LD_INT 14
55995: DOUBLE
55996: EQUAL
55997: IFTRUE 56001
55999: GO 56225
56001: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
56002: LD_ADDR_VAR 0 2
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: LD_INT 2
56012: PUSH
56013: LD_INT 3
56015: PUSH
56016: LD_INT 4
56018: PUSH
56019: LD_INT 5
56021: PUSH
56022: LD_INT 6
56024: PUSH
56025: LD_INT 7
56027: PUSH
56028: LD_INT 8
56030: PUSH
56031: LD_INT 9
56033: PUSH
56034: LD_INT 10
56036: PUSH
56037: LD_INT 11
56039: PUSH
56040: LD_INT 12
56042: PUSH
56043: LD_INT 13
56045: PUSH
56046: LD_INT 14
56048: PUSH
56049: LD_INT 15
56051: PUSH
56052: LD_INT 16
56054: PUSH
56055: LD_INT 17
56057: PUSH
56058: LD_INT 18
56060: PUSH
56061: LD_INT 19
56063: PUSH
56064: LD_INT 20
56066: PUSH
56067: LD_INT 21
56069: PUSH
56070: LD_INT 22
56072: PUSH
56073: LD_INT 23
56075: PUSH
56076: LD_INT 24
56078: PUSH
56079: LD_INT 25
56081: PUSH
56082: LD_INT 26
56084: PUSH
56085: LD_INT 27
56087: PUSH
56088: LD_INT 28
56090: PUSH
56091: LD_INT 29
56093: PUSH
56094: LD_INT 30
56096: PUSH
56097: LD_INT 31
56099: PUSH
56100: LD_INT 32
56102: PUSH
56103: LD_INT 33
56105: PUSH
56106: LD_INT 34
56108: PUSH
56109: LD_INT 36
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 101
56151: PUSH
56152: LD_INT 102
56154: PUSH
56155: LD_INT 103
56157: PUSH
56158: LD_INT 104
56160: PUSH
56161: LD_INT 105
56163: PUSH
56164: LD_INT 106
56166: PUSH
56167: LD_INT 107
56169: PUSH
56170: LD_INT 108
56172: PUSH
56173: LD_INT 109
56175: PUSH
56176: LD_INT 110
56178: PUSH
56179: LD_INT 111
56181: PUSH
56182: LD_INT 112
56184: PUSH
56185: LD_INT 113
56187: PUSH
56188: LD_INT 114
56190: PUSH
56191: LD_INT 116
56193: PUSH
56194: LD_INT 117
56196: PUSH
56197: LD_INT 118
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: ST_TO_ADDR
56223: GO 57230
56225: LD_INT 15
56227: DOUBLE
56228: EQUAL
56229: IFTRUE 56233
56231: GO 56457
56233: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
56234: LD_ADDR_VAR 0 2
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: LD_INT 3
56247: PUSH
56248: LD_INT 4
56250: PUSH
56251: LD_INT 5
56253: PUSH
56254: LD_INT 6
56256: PUSH
56257: LD_INT 7
56259: PUSH
56260: LD_INT 8
56262: PUSH
56263: LD_INT 9
56265: PUSH
56266: LD_INT 10
56268: PUSH
56269: LD_INT 11
56271: PUSH
56272: LD_INT 12
56274: PUSH
56275: LD_INT 13
56277: PUSH
56278: LD_INT 14
56280: PUSH
56281: LD_INT 15
56283: PUSH
56284: LD_INT 16
56286: PUSH
56287: LD_INT 17
56289: PUSH
56290: LD_INT 18
56292: PUSH
56293: LD_INT 19
56295: PUSH
56296: LD_INT 20
56298: PUSH
56299: LD_INT 21
56301: PUSH
56302: LD_INT 22
56304: PUSH
56305: LD_INT 23
56307: PUSH
56308: LD_INT 24
56310: PUSH
56311: LD_INT 25
56313: PUSH
56314: LD_INT 26
56316: PUSH
56317: LD_INT 27
56319: PUSH
56320: LD_INT 28
56322: PUSH
56323: LD_INT 29
56325: PUSH
56326: LD_INT 30
56328: PUSH
56329: LD_INT 31
56331: PUSH
56332: LD_INT 32
56334: PUSH
56335: LD_INT 33
56337: PUSH
56338: LD_INT 34
56340: PUSH
56341: LD_INT 36
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 101
56383: PUSH
56384: LD_INT 102
56386: PUSH
56387: LD_INT 103
56389: PUSH
56390: LD_INT 104
56392: PUSH
56393: LD_INT 105
56395: PUSH
56396: LD_INT 106
56398: PUSH
56399: LD_INT 107
56401: PUSH
56402: LD_INT 108
56404: PUSH
56405: LD_INT 109
56407: PUSH
56408: LD_INT 110
56410: PUSH
56411: LD_INT 111
56413: PUSH
56414: LD_INT 112
56416: PUSH
56417: LD_INT 113
56419: PUSH
56420: LD_INT 114
56422: PUSH
56423: LD_INT 116
56425: PUSH
56426: LD_INT 117
56428: PUSH
56429: LD_INT 118
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: ST_TO_ADDR
56455: GO 57230
56457: LD_INT 16
56459: DOUBLE
56460: EQUAL
56461: IFTRUE 56465
56463: GO 56601
56465: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
56466: LD_ADDR_VAR 0 2
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: LD_INT 4
56476: PUSH
56477: LD_INT 5
56479: PUSH
56480: LD_INT 7
56482: PUSH
56483: LD_INT 11
56485: PUSH
56486: LD_INT 12
56488: PUSH
56489: LD_INT 15
56491: PUSH
56492: LD_INT 16
56494: PUSH
56495: LD_INT 20
56497: PUSH
56498: LD_INT 21
56500: PUSH
56501: LD_INT 22
56503: PUSH
56504: LD_INT 23
56506: PUSH
56507: LD_INT 25
56509: PUSH
56510: LD_INT 26
56512: PUSH
56513: LD_INT 30
56515: PUSH
56516: LD_INT 31
56518: PUSH
56519: LD_INT 32
56521: PUSH
56522: LD_INT 33
56524: PUSH
56525: LD_INT 34
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 101
56551: PUSH
56552: LD_INT 102
56554: PUSH
56555: LD_INT 103
56557: PUSH
56558: LD_INT 106
56560: PUSH
56561: LD_INT 108
56563: PUSH
56564: LD_INT 112
56566: PUSH
56567: LD_INT 113
56569: PUSH
56570: LD_INT 114
56572: PUSH
56573: LD_INT 116
56575: PUSH
56576: LD_INT 117
56578: PUSH
56579: LD_INT 118
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: ST_TO_ADDR
56599: GO 57230
56601: LD_INT 17
56603: DOUBLE
56604: EQUAL
56605: IFTRUE 56609
56607: GO 56833
56609: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
56610: LD_ADDR_VAR 0 2
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: LD_INT 3
56623: PUSH
56624: LD_INT 4
56626: PUSH
56627: LD_INT 5
56629: PUSH
56630: LD_INT 6
56632: PUSH
56633: LD_INT 7
56635: PUSH
56636: LD_INT 8
56638: PUSH
56639: LD_INT 9
56641: PUSH
56642: LD_INT 10
56644: PUSH
56645: LD_INT 11
56647: PUSH
56648: LD_INT 12
56650: PUSH
56651: LD_INT 13
56653: PUSH
56654: LD_INT 14
56656: PUSH
56657: LD_INT 15
56659: PUSH
56660: LD_INT 16
56662: PUSH
56663: LD_INT 17
56665: PUSH
56666: LD_INT 18
56668: PUSH
56669: LD_INT 19
56671: PUSH
56672: LD_INT 20
56674: PUSH
56675: LD_INT 21
56677: PUSH
56678: LD_INT 22
56680: PUSH
56681: LD_INT 23
56683: PUSH
56684: LD_INT 24
56686: PUSH
56687: LD_INT 25
56689: PUSH
56690: LD_INT 26
56692: PUSH
56693: LD_INT 27
56695: PUSH
56696: LD_INT 28
56698: PUSH
56699: LD_INT 29
56701: PUSH
56702: LD_INT 30
56704: PUSH
56705: LD_INT 31
56707: PUSH
56708: LD_INT 32
56710: PUSH
56711: LD_INT 33
56713: PUSH
56714: LD_INT 34
56716: PUSH
56717: LD_INT 36
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 101
56759: PUSH
56760: LD_INT 102
56762: PUSH
56763: LD_INT 103
56765: PUSH
56766: LD_INT 104
56768: PUSH
56769: LD_INT 105
56771: PUSH
56772: LD_INT 106
56774: PUSH
56775: LD_INT 107
56777: PUSH
56778: LD_INT 108
56780: PUSH
56781: LD_INT 109
56783: PUSH
56784: LD_INT 110
56786: PUSH
56787: LD_INT 111
56789: PUSH
56790: LD_INT 112
56792: PUSH
56793: LD_INT 113
56795: PUSH
56796: LD_INT 114
56798: PUSH
56799: LD_INT 116
56801: PUSH
56802: LD_INT 117
56804: PUSH
56805: LD_INT 118
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: ST_TO_ADDR
56831: GO 57230
56833: LD_INT 18
56835: DOUBLE
56836: EQUAL
56837: IFTRUE 56841
56839: GO 56989
56841: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
56842: LD_ADDR_VAR 0 2
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: LD_INT 4
56852: PUSH
56853: LD_INT 5
56855: PUSH
56856: LD_INT 7
56858: PUSH
56859: LD_INT 11
56861: PUSH
56862: LD_INT 12
56864: PUSH
56865: LD_INT 15
56867: PUSH
56868: LD_INT 16
56870: PUSH
56871: LD_INT 20
56873: PUSH
56874: LD_INT 21
56876: PUSH
56877: LD_INT 22
56879: PUSH
56880: LD_INT 23
56882: PUSH
56883: LD_INT 25
56885: PUSH
56886: LD_INT 26
56888: PUSH
56889: LD_INT 30
56891: PUSH
56892: LD_INT 31
56894: PUSH
56895: LD_INT 32
56897: PUSH
56898: LD_INT 33
56900: PUSH
56901: LD_INT 34
56903: PUSH
56904: LD_INT 35
56906: PUSH
56907: LD_INT 36
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 101
56935: PUSH
56936: LD_INT 102
56938: PUSH
56939: LD_INT 103
56941: PUSH
56942: LD_INT 106
56944: PUSH
56945: LD_INT 108
56947: PUSH
56948: LD_INT 112
56950: PUSH
56951: LD_INT 113
56953: PUSH
56954: LD_INT 114
56956: PUSH
56957: LD_INT 115
56959: PUSH
56960: LD_INT 116
56962: PUSH
56963: LD_INT 117
56965: PUSH
56966: LD_INT 118
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: ST_TO_ADDR
56987: GO 57230
56989: LD_INT 19
56991: DOUBLE
56992: EQUAL
56993: IFTRUE 56997
56995: GO 57229
56997: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
56998: LD_ADDR_VAR 0 2
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: LD_INT 3
57011: PUSH
57012: LD_INT 4
57014: PUSH
57015: LD_INT 5
57017: PUSH
57018: LD_INT 6
57020: PUSH
57021: LD_INT 7
57023: PUSH
57024: LD_INT 8
57026: PUSH
57027: LD_INT 9
57029: PUSH
57030: LD_INT 10
57032: PUSH
57033: LD_INT 11
57035: PUSH
57036: LD_INT 12
57038: PUSH
57039: LD_INT 13
57041: PUSH
57042: LD_INT 14
57044: PUSH
57045: LD_INT 15
57047: PUSH
57048: LD_INT 16
57050: PUSH
57051: LD_INT 17
57053: PUSH
57054: LD_INT 18
57056: PUSH
57057: LD_INT 19
57059: PUSH
57060: LD_INT 20
57062: PUSH
57063: LD_INT 21
57065: PUSH
57066: LD_INT 22
57068: PUSH
57069: LD_INT 23
57071: PUSH
57072: LD_INT 24
57074: PUSH
57075: LD_INT 25
57077: PUSH
57078: LD_INT 26
57080: PUSH
57081: LD_INT 27
57083: PUSH
57084: LD_INT 28
57086: PUSH
57087: LD_INT 29
57089: PUSH
57090: LD_INT 30
57092: PUSH
57093: LD_INT 31
57095: PUSH
57096: LD_INT 32
57098: PUSH
57099: LD_INT 33
57101: PUSH
57102: LD_INT 34
57104: PUSH
57105: LD_INT 35
57107: PUSH
57108: LD_INT 36
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 101
57151: PUSH
57152: LD_INT 102
57154: PUSH
57155: LD_INT 103
57157: PUSH
57158: LD_INT 104
57160: PUSH
57161: LD_INT 105
57163: PUSH
57164: LD_INT 106
57166: PUSH
57167: LD_INT 107
57169: PUSH
57170: LD_INT 108
57172: PUSH
57173: LD_INT 109
57175: PUSH
57176: LD_INT 110
57178: PUSH
57179: LD_INT 111
57181: PUSH
57182: LD_INT 112
57184: PUSH
57185: LD_INT 113
57187: PUSH
57188: LD_INT 114
57190: PUSH
57191: LD_INT 115
57193: PUSH
57194: LD_INT 116
57196: PUSH
57197: LD_INT 117
57199: PUSH
57200: LD_INT 118
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: ST_TO_ADDR
57227: GO 57230
57229: POP
// end else
57230: GO 57461
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
57232: LD_ADDR_VAR 0 2
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: LD_INT 2
57242: PUSH
57243: LD_INT 3
57245: PUSH
57246: LD_INT 4
57248: PUSH
57249: LD_INT 5
57251: PUSH
57252: LD_INT 6
57254: PUSH
57255: LD_INT 7
57257: PUSH
57258: LD_INT 8
57260: PUSH
57261: LD_INT 9
57263: PUSH
57264: LD_INT 10
57266: PUSH
57267: LD_INT 11
57269: PUSH
57270: LD_INT 12
57272: PUSH
57273: LD_INT 13
57275: PUSH
57276: LD_INT 14
57278: PUSH
57279: LD_INT 15
57281: PUSH
57282: LD_INT 16
57284: PUSH
57285: LD_INT 17
57287: PUSH
57288: LD_INT 18
57290: PUSH
57291: LD_INT 19
57293: PUSH
57294: LD_INT 20
57296: PUSH
57297: LD_INT 21
57299: PUSH
57300: LD_INT 22
57302: PUSH
57303: LD_INT 23
57305: PUSH
57306: LD_INT 24
57308: PUSH
57309: LD_INT 25
57311: PUSH
57312: LD_INT 26
57314: PUSH
57315: LD_INT 27
57317: PUSH
57318: LD_INT 28
57320: PUSH
57321: LD_INT 29
57323: PUSH
57324: LD_INT 30
57326: PUSH
57327: LD_INT 31
57329: PUSH
57330: LD_INT 32
57332: PUSH
57333: LD_INT 33
57335: PUSH
57336: LD_INT 34
57338: PUSH
57339: LD_INT 35
57341: PUSH
57342: LD_INT 36
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 101
57385: PUSH
57386: LD_INT 102
57388: PUSH
57389: LD_INT 103
57391: PUSH
57392: LD_INT 104
57394: PUSH
57395: LD_INT 105
57397: PUSH
57398: LD_INT 106
57400: PUSH
57401: LD_INT 107
57403: PUSH
57404: LD_INT 108
57406: PUSH
57407: LD_INT 109
57409: PUSH
57410: LD_INT 110
57412: PUSH
57413: LD_INT 111
57415: PUSH
57416: LD_INT 112
57418: PUSH
57419: LD_INT 113
57421: PUSH
57422: LD_INT 114
57424: PUSH
57425: LD_INT 115
57427: PUSH
57428: LD_INT 116
57430: PUSH
57431: LD_INT 117
57433: PUSH
57434: LD_INT 118
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: ST_TO_ADDR
// if result then
57461: LD_VAR 0 2
57465: IFFALSE 58251
// begin normal :=  ;
57467: LD_ADDR_VAR 0 5
57471: PUSH
57472: LD_STRING 
57474: ST_TO_ADDR
// hardcore :=  ;
57475: LD_ADDR_VAR 0 6
57479: PUSH
57480: LD_STRING 
57482: ST_TO_ADDR
// active :=  ;
57483: LD_ADDR_VAR 0 7
57487: PUSH
57488: LD_STRING 
57490: ST_TO_ADDR
// for i = 1 to normalCounter do
57491: LD_ADDR_VAR 0 8
57495: PUSH
57496: DOUBLE
57497: LD_INT 1
57499: DEC
57500: ST_TO_ADDR
57501: LD_EXP 41
57505: PUSH
57506: FOR_TO
57507: IFFALSE 57608
// begin tmp := 0 ;
57509: LD_ADDR_VAR 0 3
57513: PUSH
57514: LD_STRING 0
57516: ST_TO_ADDR
// if result [ 1 ] then
57517: LD_VAR 0 2
57521: PUSH
57522: LD_INT 1
57524: ARRAY
57525: IFFALSE 57590
// if result [ 1 ] [ 1 ] = i then
57527: LD_VAR 0 2
57531: PUSH
57532: LD_INT 1
57534: ARRAY
57535: PUSH
57536: LD_INT 1
57538: ARRAY
57539: PUSH
57540: LD_VAR 0 8
57544: EQUAL
57545: IFFALSE 57590
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
57547: LD_ADDR_VAR 0 2
57551: PUSH
57552: LD_VAR 0 2
57556: PPUSH
57557: LD_INT 1
57559: PPUSH
57560: LD_VAR 0 2
57564: PUSH
57565: LD_INT 1
57567: ARRAY
57568: PPUSH
57569: LD_INT 1
57571: PPUSH
57572: CALL_OW 3
57576: PPUSH
57577: CALL_OW 1
57581: ST_TO_ADDR
// tmp := 1 ;
57582: LD_ADDR_VAR 0 3
57586: PUSH
57587: LD_STRING 1
57589: ST_TO_ADDR
// end ; normal := normal & tmp ;
57590: LD_ADDR_VAR 0 5
57594: PUSH
57595: LD_VAR 0 5
57599: PUSH
57600: LD_VAR 0 3
57604: STR
57605: ST_TO_ADDR
// end ;
57606: GO 57506
57608: POP
57609: POP
// for i = 1 to hardcoreCounter do
57610: LD_ADDR_VAR 0 8
57614: PUSH
57615: DOUBLE
57616: LD_INT 1
57618: DEC
57619: ST_TO_ADDR
57620: LD_EXP 42
57624: PUSH
57625: FOR_TO
57626: IFFALSE 57731
// begin tmp := 0 ;
57628: LD_ADDR_VAR 0 3
57632: PUSH
57633: LD_STRING 0
57635: ST_TO_ADDR
// if result [ 2 ] then
57636: LD_VAR 0 2
57640: PUSH
57641: LD_INT 2
57643: ARRAY
57644: IFFALSE 57713
// if result [ 2 ] [ 1 ] = 100 + i then
57646: LD_VAR 0 2
57650: PUSH
57651: LD_INT 2
57653: ARRAY
57654: PUSH
57655: LD_INT 1
57657: ARRAY
57658: PUSH
57659: LD_INT 100
57661: PUSH
57662: LD_VAR 0 8
57666: PLUS
57667: EQUAL
57668: IFFALSE 57713
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
57670: LD_ADDR_VAR 0 2
57674: PUSH
57675: LD_VAR 0 2
57679: PPUSH
57680: LD_INT 2
57682: PPUSH
57683: LD_VAR 0 2
57687: PUSH
57688: LD_INT 2
57690: ARRAY
57691: PPUSH
57692: LD_INT 1
57694: PPUSH
57695: CALL_OW 3
57699: PPUSH
57700: CALL_OW 1
57704: ST_TO_ADDR
// tmp := 1 ;
57705: LD_ADDR_VAR 0 3
57709: PUSH
57710: LD_STRING 1
57712: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
57713: LD_ADDR_VAR 0 6
57717: PUSH
57718: LD_VAR 0 6
57722: PUSH
57723: LD_VAR 0 3
57727: STR
57728: ST_TO_ADDR
// end ;
57729: GO 57625
57731: POP
57732: POP
// if isGameLoad then
57733: LD_VAR 0 1
57737: IFFALSE 58212
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
57739: LD_ADDR_VAR 0 4
57743: PUSH
57744: LD_EXP 45
57748: PUSH
57749: LD_EXP 44
57753: PUSH
57754: LD_EXP 46
57758: PUSH
57759: LD_EXP 43
57763: PUSH
57764: LD_EXP 47
57768: PUSH
57769: LD_EXP 48
57773: PUSH
57774: LD_EXP 49
57778: PUSH
57779: LD_EXP 50
57783: PUSH
57784: LD_EXP 51
57788: PUSH
57789: LD_EXP 52
57793: PUSH
57794: LD_EXP 53
57798: PUSH
57799: LD_EXP 54
57803: PUSH
57804: LD_EXP 55
57808: PUSH
57809: LD_EXP 56
57813: PUSH
57814: LD_EXP 64
57818: PUSH
57819: LD_EXP 65
57823: PUSH
57824: LD_EXP 66
57828: PUSH
57829: LD_EXP 67
57833: PUSH
57834: LD_EXP 69
57838: PUSH
57839: LD_EXP 70
57843: PUSH
57844: LD_EXP 71
57848: PUSH
57849: LD_EXP 74
57853: PUSH
57854: LD_EXP 76
57858: PUSH
57859: LD_EXP 77
57863: PUSH
57864: LD_EXP 78
57868: PUSH
57869: LD_EXP 80
57873: PUSH
57874: LD_EXP 81
57878: PUSH
57879: LD_EXP 84
57883: PUSH
57884: LD_EXP 85
57888: PUSH
57889: LD_EXP 86
57893: PUSH
57894: LD_EXP 87
57898: PUSH
57899: LD_EXP 88
57903: PUSH
57904: LD_EXP 89
57908: PUSH
57909: LD_EXP 90
57913: PUSH
57914: LD_EXP 91
57918: PUSH
57919: LD_EXP 92
57923: PUSH
57924: LD_EXP 57
57928: PUSH
57929: LD_EXP 58
57933: PUSH
57934: LD_EXP 61
57938: PUSH
57939: LD_EXP 62
57943: PUSH
57944: LD_EXP 63
57948: PUSH
57949: LD_EXP 59
57953: PUSH
57954: LD_EXP 60
57958: PUSH
57959: LD_EXP 68
57963: PUSH
57964: LD_EXP 72
57968: PUSH
57969: LD_EXP 73
57973: PUSH
57974: LD_EXP 75
57978: PUSH
57979: LD_EXP 79
57983: PUSH
57984: LD_EXP 82
57988: PUSH
57989: LD_EXP 83
57993: PUSH
57994: LD_EXP 93
57998: PUSH
57999: LD_EXP 94
58003: PUSH
58004: LD_EXP 95
58008: PUSH
58009: LD_EXP 96
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: ST_TO_ADDR
// tmp :=  ;
58070: LD_ADDR_VAR 0 3
58074: PUSH
58075: LD_STRING 
58077: ST_TO_ADDR
// for i = 1 to normalCounter do
58078: LD_ADDR_VAR 0 8
58082: PUSH
58083: DOUBLE
58084: LD_INT 1
58086: DEC
58087: ST_TO_ADDR
58088: LD_EXP 41
58092: PUSH
58093: FOR_TO
58094: IFFALSE 58130
// begin if flags [ i ] then
58096: LD_VAR 0 4
58100: PUSH
58101: LD_VAR 0 8
58105: ARRAY
58106: IFFALSE 58128
// tmp := tmp & i & ; ;
58108: LD_ADDR_VAR 0 3
58112: PUSH
58113: LD_VAR 0 3
58117: PUSH
58118: LD_VAR 0 8
58122: STR
58123: PUSH
58124: LD_STRING ;
58126: STR
58127: ST_TO_ADDR
// end ;
58128: GO 58093
58130: POP
58131: POP
// for i = 1 to hardcoreCounter do
58132: LD_ADDR_VAR 0 8
58136: PUSH
58137: DOUBLE
58138: LD_INT 1
58140: DEC
58141: ST_TO_ADDR
58142: LD_EXP 42
58146: PUSH
58147: FOR_TO
58148: IFFALSE 58194
// begin if flags [ normalCounter + i ] then
58150: LD_VAR 0 4
58154: PUSH
58155: LD_EXP 41
58159: PUSH
58160: LD_VAR 0 8
58164: PLUS
58165: ARRAY
58166: IFFALSE 58192
// tmp := tmp & ( 100 + i ) & ; ;
58168: LD_ADDR_VAR 0 3
58172: PUSH
58173: LD_VAR 0 3
58177: PUSH
58178: LD_INT 100
58180: PUSH
58181: LD_VAR 0 8
58185: PLUS
58186: STR
58187: PUSH
58188: LD_STRING ;
58190: STR
58191: ST_TO_ADDR
// end ;
58192: GO 58147
58194: POP
58195: POP
// if tmp then
58196: LD_VAR 0 3
58200: IFFALSE 58212
// active := tmp ;
58202: LD_ADDR_VAR 0 7
58206: PUSH
58207: LD_VAR 0 3
58211: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
58212: LD_STRING getStreamItemsFromMission("
58214: PUSH
58215: LD_VAR 0 5
58219: STR
58220: PUSH
58221: LD_STRING ","
58223: STR
58224: PUSH
58225: LD_VAR 0 6
58229: STR
58230: PUSH
58231: LD_STRING ","
58233: STR
58234: PUSH
58235: LD_VAR 0 7
58239: STR
58240: PUSH
58241: LD_STRING ")
58243: STR
58244: PPUSH
58245: CALL_OW 559
// end else
58249: GO 58258
// ToLua ( getStreamItemsFromMission("","","") ) ;
58251: LD_STRING getStreamItemsFromMission("","","")
58253: PPUSH
58254: CALL_OW 559
// end ;
58258: LD_VAR 0 2
58262: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
58263: LD_EXP 40
58267: PUSH
58268: LD_EXP 45
58272: AND
58273: IFFALSE 58397
58275: GO 58277
58277: DISABLE
58278: LD_INT 0
58280: PPUSH
58281: PPUSH
// begin enable ;
58282: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
58283: LD_ADDR_VAR 0 2
58287: PUSH
58288: LD_INT 22
58290: PUSH
58291: LD_OWVAR 2
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: LD_INT 34
58305: PUSH
58306: LD_INT 7
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 34
58315: PUSH
58316: LD_INT 45
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 34
58325: PUSH
58326: LD_INT 28
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 34
58335: PUSH
58336: LD_INT 47
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PPUSH
58354: CALL_OW 69
58358: ST_TO_ADDR
// if not tmp then
58359: LD_VAR 0 2
58363: NOT
58364: IFFALSE 58368
// exit ;
58366: GO 58397
// for i in tmp do
58368: LD_ADDR_VAR 0 1
58372: PUSH
58373: LD_VAR 0 2
58377: PUSH
58378: FOR_IN
58379: IFFALSE 58395
// begin SetLives ( i , 0 ) ;
58381: LD_VAR 0 1
58385: PPUSH
58386: LD_INT 0
58388: PPUSH
58389: CALL_OW 234
// end ;
58393: GO 58378
58395: POP
58396: POP
// end ;
58397: PPOPN 2
58399: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
58400: LD_EXP 40
58404: PUSH
58405: LD_EXP 46
58409: AND
58410: IFFALSE 58494
58412: GO 58414
58414: DISABLE
58415: LD_INT 0
58417: PPUSH
58418: PPUSH
// begin enable ;
58419: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
58420: LD_ADDR_VAR 0 2
58424: PUSH
58425: LD_INT 22
58427: PUSH
58428: LD_OWVAR 2
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 32
58439: PUSH
58440: LD_INT 3
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PPUSH
58451: CALL_OW 69
58455: ST_TO_ADDR
// if not tmp then
58456: LD_VAR 0 2
58460: NOT
58461: IFFALSE 58465
// exit ;
58463: GO 58494
// for i in tmp do
58465: LD_ADDR_VAR 0 1
58469: PUSH
58470: LD_VAR 0 2
58474: PUSH
58475: FOR_IN
58476: IFFALSE 58492
// begin SetLives ( i , 0 ) ;
58478: LD_VAR 0 1
58482: PPUSH
58483: LD_INT 0
58485: PPUSH
58486: CALL_OW 234
// end ;
58490: GO 58475
58492: POP
58493: POP
// end ;
58494: PPOPN 2
58496: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
58497: LD_EXP 40
58501: PUSH
58502: LD_EXP 43
58506: AND
58507: IFFALSE 58600
58509: GO 58511
58511: DISABLE
58512: LD_INT 0
58514: PPUSH
// begin enable ;
58515: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
58516: LD_ADDR_VAR 0 1
58520: PUSH
58521: LD_INT 22
58523: PUSH
58524: LD_OWVAR 2
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 2
58535: PUSH
58536: LD_INT 25
58538: PUSH
58539: LD_INT 5
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 25
58548: PUSH
58549: LD_INT 9
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 25
58558: PUSH
58559: LD_INT 8
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PPUSH
58576: CALL_OW 69
58580: PUSH
58581: FOR_IN
58582: IFFALSE 58598
// begin SetClass ( i , 1 ) ;
58584: LD_VAR 0 1
58588: PPUSH
58589: LD_INT 1
58591: PPUSH
58592: CALL_OW 336
// end ;
58596: GO 58581
58598: POP
58599: POP
// end ;
58600: PPOPN 1
58602: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
58603: LD_EXP 40
58607: PUSH
58608: LD_EXP 44
58612: AND
58613: PUSH
58614: LD_OWVAR 65
58618: PUSH
58619: LD_INT 7
58621: LESS
58622: AND
58623: IFFALSE 58637
58625: GO 58627
58627: DISABLE
// begin enable ;
58628: ENABLE
// game_speed := 7 ;
58629: LD_ADDR_OWVAR 65
58633: PUSH
58634: LD_INT 7
58636: ST_TO_ADDR
// end ;
58637: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
58638: LD_EXP 40
58642: PUSH
58643: LD_EXP 47
58647: AND
58648: IFFALSE 58850
58650: GO 58652
58652: DISABLE
58653: LD_INT 0
58655: PPUSH
58656: PPUSH
58657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58658: LD_ADDR_VAR 0 3
58662: PUSH
58663: LD_INT 81
58665: PUSH
58666: LD_OWVAR 2
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 21
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PPUSH
58689: CALL_OW 69
58693: ST_TO_ADDR
// if not tmp then
58694: LD_VAR 0 3
58698: NOT
58699: IFFALSE 58703
// exit ;
58701: GO 58850
// if tmp > 5 then
58703: LD_VAR 0 3
58707: PUSH
58708: LD_INT 5
58710: GREATER
58711: IFFALSE 58723
// k := 5 else
58713: LD_ADDR_VAR 0 2
58717: PUSH
58718: LD_INT 5
58720: ST_TO_ADDR
58721: GO 58733
// k := tmp ;
58723: LD_ADDR_VAR 0 2
58727: PUSH
58728: LD_VAR 0 3
58732: ST_TO_ADDR
// for i := 1 to k do
58733: LD_ADDR_VAR 0 1
58737: PUSH
58738: DOUBLE
58739: LD_INT 1
58741: DEC
58742: ST_TO_ADDR
58743: LD_VAR 0 2
58747: PUSH
58748: FOR_TO
58749: IFFALSE 58848
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
58751: LD_VAR 0 3
58755: PUSH
58756: LD_VAR 0 1
58760: ARRAY
58761: PPUSH
58762: LD_VAR 0 1
58766: PUSH
58767: LD_INT 4
58769: MOD
58770: PUSH
58771: LD_INT 1
58773: PLUS
58774: PPUSH
58775: CALL_OW 259
58779: PUSH
58780: LD_INT 10
58782: LESS
58783: IFFALSE 58846
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
58785: LD_VAR 0 3
58789: PUSH
58790: LD_VAR 0 1
58794: ARRAY
58795: PPUSH
58796: LD_VAR 0 1
58800: PUSH
58801: LD_INT 4
58803: MOD
58804: PUSH
58805: LD_INT 1
58807: PLUS
58808: PPUSH
58809: LD_VAR 0 3
58813: PUSH
58814: LD_VAR 0 1
58818: ARRAY
58819: PPUSH
58820: LD_VAR 0 1
58824: PUSH
58825: LD_INT 4
58827: MOD
58828: PUSH
58829: LD_INT 1
58831: PLUS
58832: PPUSH
58833: CALL_OW 259
58837: PUSH
58838: LD_INT 1
58840: PLUS
58841: PPUSH
58842: CALL_OW 237
58846: GO 58748
58848: POP
58849: POP
// end ;
58850: PPOPN 3
58852: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
58853: LD_EXP 40
58857: PUSH
58858: LD_EXP 48
58862: AND
58863: IFFALSE 58883
58865: GO 58867
58867: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
58868: LD_INT 4
58870: PPUSH
58871: LD_OWVAR 2
58875: PPUSH
58876: LD_INT 0
58878: PPUSH
58879: CALL_OW 324
58883: END
// every 0 0$1 trigger StreamModeActive and sShovel do
58884: LD_EXP 40
58888: PUSH
58889: LD_EXP 77
58893: AND
58894: IFFALSE 58914
58896: GO 58898
58898: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
58899: LD_INT 19
58901: PPUSH
58902: LD_OWVAR 2
58906: PPUSH
58907: LD_INT 0
58909: PPUSH
58910: CALL_OW 324
58914: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
58915: LD_EXP 40
58919: PUSH
58920: LD_EXP 49
58924: AND
58925: IFFALSE 59027
58927: GO 58929
58929: DISABLE
58930: LD_INT 0
58932: PPUSH
58933: PPUSH
// begin enable ;
58934: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
58935: LD_ADDR_VAR 0 2
58939: PUSH
58940: LD_INT 22
58942: PUSH
58943: LD_OWVAR 2
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: LD_INT 34
58957: PUSH
58958: LD_INT 11
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 34
58967: PUSH
58968: LD_INT 30
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: LIST
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PPUSH
58984: CALL_OW 69
58988: ST_TO_ADDR
// if not tmp then
58989: LD_VAR 0 2
58993: NOT
58994: IFFALSE 58998
// exit ;
58996: GO 59027
// for i in tmp do
58998: LD_ADDR_VAR 0 1
59002: PUSH
59003: LD_VAR 0 2
59007: PUSH
59008: FOR_IN
59009: IFFALSE 59025
// begin SetLives ( i , 0 ) ;
59011: LD_VAR 0 1
59015: PPUSH
59016: LD_INT 0
59018: PPUSH
59019: CALL_OW 234
// end ;
59023: GO 59008
59025: POP
59026: POP
// end ;
59027: PPOPN 2
59029: END
// every 0 0$1 trigger StreamModeActive and sBunker do
59030: LD_EXP 40
59034: PUSH
59035: LD_EXP 50
59039: AND
59040: IFFALSE 59060
59042: GO 59044
59044: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
59045: LD_INT 32
59047: PPUSH
59048: LD_OWVAR 2
59052: PPUSH
59053: LD_INT 0
59055: PPUSH
59056: CALL_OW 324
59060: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
59061: LD_EXP 40
59065: PUSH
59066: LD_EXP 51
59070: AND
59071: IFFALSE 59252
59073: GO 59075
59075: DISABLE
59076: LD_INT 0
59078: PPUSH
59079: PPUSH
59080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
59081: LD_ADDR_VAR 0 2
59085: PUSH
59086: LD_INT 22
59088: PUSH
59089: LD_OWVAR 2
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 33
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PPUSH
59112: CALL_OW 69
59116: ST_TO_ADDR
// if not tmp then
59117: LD_VAR 0 2
59121: NOT
59122: IFFALSE 59126
// exit ;
59124: GO 59252
// side := 0 ;
59126: LD_ADDR_VAR 0 3
59130: PUSH
59131: LD_INT 0
59133: ST_TO_ADDR
// for i := 1 to 8 do
59134: LD_ADDR_VAR 0 1
59138: PUSH
59139: DOUBLE
59140: LD_INT 1
59142: DEC
59143: ST_TO_ADDR
59144: LD_INT 8
59146: PUSH
59147: FOR_TO
59148: IFFALSE 59196
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
59150: LD_OWVAR 2
59154: PUSH
59155: LD_VAR 0 1
59159: NONEQUAL
59160: PUSH
59161: LD_OWVAR 2
59165: PPUSH
59166: LD_VAR 0 1
59170: PPUSH
59171: CALL_OW 81
59175: PUSH
59176: LD_INT 2
59178: EQUAL
59179: AND
59180: IFFALSE 59194
// begin side := i ;
59182: LD_ADDR_VAR 0 3
59186: PUSH
59187: LD_VAR 0 1
59191: ST_TO_ADDR
// break ;
59192: GO 59196
// end ;
59194: GO 59147
59196: POP
59197: POP
// if not side then
59198: LD_VAR 0 3
59202: NOT
59203: IFFALSE 59207
// exit ;
59205: GO 59252
// for i := 1 to tmp do
59207: LD_ADDR_VAR 0 1
59211: PUSH
59212: DOUBLE
59213: LD_INT 1
59215: DEC
59216: ST_TO_ADDR
59217: LD_VAR 0 2
59221: PUSH
59222: FOR_TO
59223: IFFALSE 59250
// if Prob ( 60 ) then
59225: LD_INT 60
59227: PPUSH
59228: CALL_OW 13
59232: IFFALSE 59248
// SetSide ( i , side ) ;
59234: LD_VAR 0 1
59238: PPUSH
59239: LD_VAR 0 3
59243: PPUSH
59244: CALL_OW 235
59248: GO 59222
59250: POP
59251: POP
// end ;
59252: PPOPN 3
59254: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
59255: LD_EXP 40
59259: PUSH
59260: LD_EXP 53
59264: AND
59265: IFFALSE 59384
59267: GO 59269
59269: DISABLE
59270: LD_INT 0
59272: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
59273: LD_ADDR_VAR 0 1
59277: PUSH
59278: LD_INT 22
59280: PUSH
59281: LD_OWVAR 2
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 21
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 3
59302: PUSH
59303: LD_INT 23
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: LIST
59321: PPUSH
59322: CALL_OW 69
59326: PUSH
59327: FOR_IN
59328: IFFALSE 59382
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
59330: LD_VAR 0 1
59334: PPUSH
59335: CALL_OW 257
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: LD_INT 3
59348: PUSH
59349: LD_INT 4
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: IN
59358: IFFALSE 59380
// SetClass ( un , rand ( 1 , 4 ) ) ;
59360: LD_VAR 0 1
59364: PPUSH
59365: LD_INT 1
59367: PPUSH
59368: LD_INT 4
59370: PPUSH
59371: CALL_OW 12
59375: PPUSH
59376: CALL_OW 336
59380: GO 59327
59382: POP
59383: POP
// end ;
59384: PPOPN 1
59386: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
59387: LD_EXP 40
59391: PUSH
59392: LD_EXP 52
59396: AND
59397: IFFALSE 59476
59399: GO 59401
59401: DISABLE
59402: LD_INT 0
59404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
59405: LD_ADDR_VAR 0 1
59409: PUSH
59410: LD_INT 22
59412: PUSH
59413: LD_OWVAR 2
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 21
59424: PUSH
59425: LD_INT 3
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PPUSH
59436: CALL_OW 69
59440: ST_TO_ADDR
// if not tmp then
59441: LD_VAR 0 1
59445: NOT
59446: IFFALSE 59450
// exit ;
59448: GO 59476
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
59450: LD_VAR 0 1
59454: PUSH
59455: LD_INT 1
59457: PPUSH
59458: LD_VAR 0 1
59462: PPUSH
59463: CALL_OW 12
59467: ARRAY
59468: PPUSH
59469: LD_INT 100
59471: PPUSH
59472: CALL_OW 234
// end ;
59476: PPOPN 1
59478: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
59479: LD_EXP 40
59483: PUSH
59484: LD_EXP 54
59488: AND
59489: IFFALSE 59587
59491: GO 59493
59493: DISABLE
59494: LD_INT 0
59496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59497: LD_ADDR_VAR 0 1
59501: PUSH
59502: LD_INT 22
59504: PUSH
59505: LD_OWVAR 2
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 21
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PPUSH
59528: CALL_OW 69
59532: ST_TO_ADDR
// if not tmp then
59533: LD_VAR 0 1
59537: NOT
59538: IFFALSE 59542
// exit ;
59540: GO 59587
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
59542: LD_VAR 0 1
59546: PUSH
59547: LD_INT 1
59549: PPUSH
59550: LD_VAR 0 1
59554: PPUSH
59555: CALL_OW 12
59559: ARRAY
59560: PPUSH
59561: LD_INT 1
59563: PPUSH
59564: LD_INT 4
59566: PPUSH
59567: CALL_OW 12
59571: PPUSH
59572: LD_INT 3000
59574: PPUSH
59575: LD_INT 9000
59577: PPUSH
59578: CALL_OW 12
59582: PPUSH
59583: CALL_OW 492
// end ;
59587: PPOPN 1
59589: END
// every 0 0$1 trigger StreamModeActive and sDepot do
59590: LD_EXP 40
59594: PUSH
59595: LD_EXP 55
59599: AND
59600: IFFALSE 59620
59602: GO 59604
59604: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
59605: LD_INT 1
59607: PPUSH
59608: LD_OWVAR 2
59612: PPUSH
59613: LD_INT 0
59615: PPUSH
59616: CALL_OW 324
59620: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
59621: LD_EXP 40
59625: PUSH
59626: LD_EXP 56
59630: AND
59631: IFFALSE 59714
59633: GO 59635
59635: DISABLE
59636: LD_INT 0
59638: PPUSH
59639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
59640: LD_ADDR_VAR 0 2
59644: PUSH
59645: LD_INT 22
59647: PUSH
59648: LD_OWVAR 2
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 21
59659: PUSH
59660: LD_INT 3
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PPUSH
59671: CALL_OW 69
59675: ST_TO_ADDR
// if not tmp then
59676: LD_VAR 0 2
59680: NOT
59681: IFFALSE 59685
// exit ;
59683: GO 59714
// for i in tmp do
59685: LD_ADDR_VAR 0 1
59689: PUSH
59690: LD_VAR 0 2
59694: PUSH
59695: FOR_IN
59696: IFFALSE 59712
// SetBLevel ( i , 10 ) ;
59698: LD_VAR 0 1
59702: PPUSH
59703: LD_INT 10
59705: PPUSH
59706: CALL_OW 241
59710: GO 59695
59712: POP
59713: POP
// end ;
59714: PPOPN 2
59716: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
59717: LD_EXP 40
59721: PUSH
59722: LD_EXP 57
59726: AND
59727: IFFALSE 59838
59729: GO 59731
59731: DISABLE
59732: LD_INT 0
59734: PPUSH
59735: PPUSH
59736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59737: LD_ADDR_VAR 0 3
59741: PUSH
59742: LD_INT 22
59744: PUSH
59745: LD_OWVAR 2
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 25
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PPUSH
59768: CALL_OW 69
59772: ST_TO_ADDR
// if not tmp then
59773: LD_VAR 0 3
59777: NOT
59778: IFFALSE 59782
// exit ;
59780: GO 59838
// un := tmp [ rand ( 1 , tmp ) ] ;
59782: LD_ADDR_VAR 0 2
59786: PUSH
59787: LD_VAR 0 3
59791: PUSH
59792: LD_INT 1
59794: PPUSH
59795: LD_VAR 0 3
59799: PPUSH
59800: CALL_OW 12
59804: ARRAY
59805: ST_TO_ADDR
// if Crawls ( un ) then
59806: LD_VAR 0 2
59810: PPUSH
59811: CALL_OW 318
59815: IFFALSE 59826
// ComWalk ( un ) ;
59817: LD_VAR 0 2
59821: PPUSH
59822: CALL_OW 138
// SetClass ( un , class_sniper ) ;
59826: LD_VAR 0 2
59830: PPUSH
59831: LD_INT 5
59833: PPUSH
59834: CALL_OW 336
// end ;
59838: PPOPN 3
59840: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
59841: LD_EXP 40
59845: PUSH
59846: LD_EXP 58
59850: AND
59851: PUSH
59852: LD_OWVAR 67
59856: PUSH
59857: LD_INT 4
59859: LESS
59860: AND
59861: IFFALSE 59880
59863: GO 59865
59865: DISABLE
// begin Difficulty := Difficulty + 1 ;
59866: LD_ADDR_OWVAR 67
59870: PUSH
59871: LD_OWVAR 67
59875: PUSH
59876: LD_INT 1
59878: PLUS
59879: ST_TO_ADDR
// end ;
59880: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
59881: LD_EXP 40
59885: PUSH
59886: LD_EXP 59
59890: AND
59891: IFFALSE 59994
59893: GO 59895
59895: DISABLE
59896: LD_INT 0
59898: PPUSH
// begin for i := 1 to 5 do
59899: LD_ADDR_VAR 0 1
59903: PUSH
59904: DOUBLE
59905: LD_INT 1
59907: DEC
59908: ST_TO_ADDR
59909: LD_INT 5
59911: PUSH
59912: FOR_TO
59913: IFFALSE 59992
// begin uc_nation := nation_nature ;
59915: LD_ADDR_OWVAR 21
59919: PUSH
59920: LD_INT 0
59922: ST_TO_ADDR
// uc_side := 0 ;
59923: LD_ADDR_OWVAR 20
59927: PUSH
59928: LD_INT 0
59930: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59931: LD_ADDR_OWVAR 29
59935: PUSH
59936: LD_INT 12
59938: PUSH
59939: LD_INT 12
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: ST_TO_ADDR
// hc_agressivity := 20 ;
59946: LD_ADDR_OWVAR 35
59950: PUSH
59951: LD_INT 20
59953: ST_TO_ADDR
// hc_class := class_tiger ;
59954: LD_ADDR_OWVAR 28
59958: PUSH
59959: LD_INT 14
59961: ST_TO_ADDR
// hc_gallery :=  ;
59962: LD_ADDR_OWVAR 33
59966: PUSH
59967: LD_STRING 
59969: ST_TO_ADDR
// hc_name :=  ;
59970: LD_ADDR_OWVAR 26
59974: PUSH
59975: LD_STRING 
59977: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
59978: CALL_OW 44
59982: PPUSH
59983: LD_INT 0
59985: PPUSH
59986: CALL_OW 51
// end ;
59990: GO 59912
59992: POP
59993: POP
// end ;
59994: PPOPN 1
59996: END
// every 0 0$1 trigger StreamModeActive and sBomb do
59997: LD_EXP 40
60001: PUSH
60002: LD_EXP 60
60006: AND
60007: IFFALSE 60016
60009: GO 60011
60011: DISABLE
// StreamSibBomb ;
60012: CALL 60017 0 0
60016: END
// export function StreamSibBomb ; var i , x , y ; begin
60017: LD_INT 0
60019: PPUSH
60020: PPUSH
60021: PPUSH
60022: PPUSH
// result := false ;
60023: LD_ADDR_VAR 0 1
60027: PUSH
60028: LD_INT 0
60030: ST_TO_ADDR
// for i := 1 to 16 do
60031: LD_ADDR_VAR 0 2
60035: PUSH
60036: DOUBLE
60037: LD_INT 1
60039: DEC
60040: ST_TO_ADDR
60041: LD_INT 16
60043: PUSH
60044: FOR_TO
60045: IFFALSE 60244
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
60047: LD_ADDR_VAR 0 3
60051: PUSH
60052: LD_INT 10
60054: PUSH
60055: LD_INT 20
60057: PUSH
60058: LD_INT 30
60060: PUSH
60061: LD_INT 40
60063: PUSH
60064: LD_INT 50
60066: PUSH
60067: LD_INT 60
60069: PUSH
60070: LD_INT 70
60072: PUSH
60073: LD_INT 80
60075: PUSH
60076: LD_INT 90
60078: PUSH
60079: LD_INT 100
60081: PUSH
60082: LD_INT 110
60084: PUSH
60085: LD_INT 120
60087: PUSH
60088: LD_INT 130
60090: PUSH
60091: LD_INT 140
60093: PUSH
60094: LD_INT 150
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: PPUSH
60117: LD_INT 15
60119: PPUSH
60120: CALL_OW 12
60124: ARRAY
60125: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
60126: LD_ADDR_VAR 0 4
60130: PUSH
60131: LD_INT 10
60133: PUSH
60134: LD_INT 20
60136: PUSH
60137: LD_INT 30
60139: PUSH
60140: LD_INT 40
60142: PUSH
60143: LD_INT 50
60145: PUSH
60146: LD_INT 60
60148: PUSH
60149: LD_INT 70
60151: PUSH
60152: LD_INT 80
60154: PUSH
60155: LD_INT 90
60157: PUSH
60158: LD_INT 100
60160: PUSH
60161: LD_INT 110
60163: PUSH
60164: LD_INT 120
60166: PUSH
60167: LD_INT 130
60169: PUSH
60170: LD_INT 140
60172: PUSH
60173: LD_INT 150
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: PPUSH
60196: LD_INT 15
60198: PPUSH
60199: CALL_OW 12
60203: ARRAY
60204: ST_TO_ADDR
// if ValidHex ( x , y ) then
60205: LD_VAR 0 3
60209: PPUSH
60210: LD_VAR 0 4
60214: PPUSH
60215: CALL_OW 488
60219: IFFALSE 60242
// begin result := [ x , y ] ;
60221: LD_ADDR_VAR 0 1
60225: PUSH
60226: LD_VAR 0 3
60230: PUSH
60231: LD_VAR 0 4
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: ST_TO_ADDR
// break ;
60240: GO 60244
// end ; end ;
60242: GO 60044
60244: POP
60245: POP
// if result then
60246: LD_VAR 0 1
60250: IFFALSE 60310
// begin ToLua ( playSibBomb() ) ;
60252: LD_STRING playSibBomb()
60254: PPUSH
60255: CALL_OW 559
// wait ( 0 0$14 ) ;
60259: LD_INT 490
60261: PPUSH
60262: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
60266: LD_VAR 0 1
60270: PUSH
60271: LD_INT 1
60273: ARRAY
60274: PPUSH
60275: LD_VAR 0 1
60279: PUSH
60280: LD_INT 2
60282: ARRAY
60283: PPUSH
60284: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
60288: LD_VAR 0 1
60292: PUSH
60293: LD_INT 1
60295: ARRAY
60296: PPUSH
60297: LD_VAR 0 1
60301: PUSH
60302: LD_INT 2
60304: ARRAY
60305: PPUSH
60306: CALL_OW 429
// end ; end ;
60310: LD_VAR 0 1
60314: RET
// every 0 0$1 trigger StreamModeActive and sReset do
60315: LD_EXP 40
60319: PUSH
60320: LD_EXP 62
60324: AND
60325: IFFALSE 60337
60327: GO 60329
60329: DISABLE
// YouLost (  ) ;
60330: LD_STRING 
60332: PPUSH
60333: CALL_OW 104
60337: END
// every 0 0$1 trigger StreamModeActive and sFog do
60338: LD_EXP 40
60342: PUSH
60343: LD_EXP 61
60347: AND
60348: IFFALSE 60362
60350: GO 60352
60352: DISABLE
// FogOff ( your_side ) ;
60353: LD_OWVAR 2
60357: PPUSH
60358: CALL_OW 344
60362: END
// every 0 0$1 trigger StreamModeActive and sSun do
60363: LD_EXP 40
60367: PUSH
60368: LD_EXP 63
60372: AND
60373: IFFALSE 60401
60375: GO 60377
60377: DISABLE
// begin solar_recharge_percent := 0 ;
60378: LD_ADDR_OWVAR 79
60382: PUSH
60383: LD_INT 0
60385: ST_TO_ADDR
// wait ( 5 5$00 ) ;
60386: LD_INT 10500
60388: PPUSH
60389: CALL_OW 67
// solar_recharge_percent := 100 ;
60393: LD_ADDR_OWVAR 79
60397: PUSH
60398: LD_INT 100
60400: ST_TO_ADDR
// end ;
60401: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
60402: LD_EXP 40
60406: PUSH
60407: LD_EXP 64
60411: AND
60412: IFFALSE 60651
60414: GO 60416
60416: DISABLE
60417: LD_INT 0
60419: PPUSH
60420: PPUSH
60421: PPUSH
// begin tmp := [ ] ;
60422: LD_ADDR_VAR 0 3
60426: PUSH
60427: EMPTY
60428: ST_TO_ADDR
// for i := 1 to 6 do
60429: LD_ADDR_VAR 0 1
60433: PUSH
60434: DOUBLE
60435: LD_INT 1
60437: DEC
60438: ST_TO_ADDR
60439: LD_INT 6
60441: PUSH
60442: FOR_TO
60443: IFFALSE 60548
// begin uc_nation := nation_nature ;
60445: LD_ADDR_OWVAR 21
60449: PUSH
60450: LD_INT 0
60452: ST_TO_ADDR
// uc_side := 0 ;
60453: LD_ADDR_OWVAR 20
60457: PUSH
60458: LD_INT 0
60460: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
60461: LD_ADDR_OWVAR 29
60465: PUSH
60466: LD_INT 12
60468: PUSH
60469: LD_INT 12
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: ST_TO_ADDR
// hc_agressivity := 20 ;
60476: LD_ADDR_OWVAR 35
60480: PUSH
60481: LD_INT 20
60483: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
60484: LD_ADDR_OWVAR 28
60488: PUSH
60489: LD_INT 17
60491: ST_TO_ADDR
// hc_gallery :=  ;
60492: LD_ADDR_OWVAR 33
60496: PUSH
60497: LD_STRING 
60499: ST_TO_ADDR
// hc_name :=  ;
60500: LD_ADDR_OWVAR 26
60504: PUSH
60505: LD_STRING 
60507: ST_TO_ADDR
// un := CreateHuman ;
60508: LD_ADDR_VAR 0 2
60512: PUSH
60513: CALL_OW 44
60517: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
60518: LD_VAR 0 2
60522: PPUSH
60523: LD_INT 1
60525: PPUSH
60526: CALL_OW 51
// tmp := tmp ^ un ;
60530: LD_ADDR_VAR 0 3
60534: PUSH
60535: LD_VAR 0 3
60539: PUSH
60540: LD_VAR 0 2
60544: ADD
60545: ST_TO_ADDR
// end ;
60546: GO 60442
60548: POP
60549: POP
// repeat wait ( 0 0$1 ) ;
60550: LD_INT 35
60552: PPUSH
60553: CALL_OW 67
// for un in tmp do
60557: LD_ADDR_VAR 0 2
60561: PUSH
60562: LD_VAR 0 3
60566: PUSH
60567: FOR_IN
60568: IFFALSE 60642
// begin if IsDead ( un ) then
60570: LD_VAR 0 2
60574: PPUSH
60575: CALL_OW 301
60579: IFFALSE 60599
// begin tmp := tmp diff un ;
60581: LD_ADDR_VAR 0 3
60585: PUSH
60586: LD_VAR 0 3
60590: PUSH
60591: LD_VAR 0 2
60595: DIFF
60596: ST_TO_ADDR
// continue ;
60597: GO 60567
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
60599: LD_VAR 0 2
60603: PPUSH
60604: LD_INT 3
60606: PUSH
60607: LD_INT 22
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PPUSH
60621: CALL_OW 69
60625: PPUSH
60626: LD_VAR 0 2
60630: PPUSH
60631: CALL_OW 74
60635: PPUSH
60636: CALL_OW 115
// end ;
60640: GO 60567
60642: POP
60643: POP
// until not tmp ;
60644: LD_VAR 0 3
60648: NOT
60649: IFFALSE 60550
// end ;
60651: PPOPN 3
60653: END
// every 0 0$1 trigger StreamModeActive and sTroll do
60654: LD_EXP 40
60658: PUSH
60659: LD_EXP 65
60663: AND
60664: IFFALSE 60718
60666: GO 60668
60668: DISABLE
// begin ToLua ( displayTroll(); ) ;
60669: LD_STRING displayTroll();
60671: PPUSH
60672: CALL_OW 559
// wait ( 3 3$00 ) ;
60676: LD_INT 6300
60678: PPUSH
60679: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60683: LD_STRING hideTroll();
60685: PPUSH
60686: CALL_OW 559
// wait ( 1 1$00 ) ;
60690: LD_INT 2100
60692: PPUSH
60693: CALL_OW 67
// ToLua ( displayTroll(); ) ;
60697: LD_STRING displayTroll();
60699: PPUSH
60700: CALL_OW 559
// wait ( 1 1$00 ) ;
60704: LD_INT 2100
60706: PPUSH
60707: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60711: LD_STRING hideTroll();
60713: PPUSH
60714: CALL_OW 559
// end ;
60718: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
60719: LD_EXP 40
60723: PUSH
60724: LD_EXP 66
60728: AND
60729: IFFALSE 60792
60731: GO 60733
60733: DISABLE
60734: LD_INT 0
60736: PPUSH
// begin p := 0 ;
60737: LD_ADDR_VAR 0 1
60741: PUSH
60742: LD_INT 0
60744: ST_TO_ADDR
// repeat game_speed := 1 ;
60745: LD_ADDR_OWVAR 65
60749: PUSH
60750: LD_INT 1
60752: ST_TO_ADDR
// wait ( 0 0$1 ) ;
60753: LD_INT 35
60755: PPUSH
60756: CALL_OW 67
// p := p + 1 ;
60760: LD_ADDR_VAR 0 1
60764: PUSH
60765: LD_VAR 0 1
60769: PUSH
60770: LD_INT 1
60772: PLUS
60773: ST_TO_ADDR
// until p >= 60 ;
60774: LD_VAR 0 1
60778: PUSH
60779: LD_INT 60
60781: GREATEREQUAL
60782: IFFALSE 60745
// game_speed := 4 ;
60784: LD_ADDR_OWVAR 65
60788: PUSH
60789: LD_INT 4
60791: ST_TO_ADDR
// end ;
60792: PPOPN 1
60794: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
60795: LD_EXP 40
60799: PUSH
60800: LD_EXP 67
60804: AND
60805: IFFALSE 60951
60807: GO 60809
60809: DISABLE
60810: LD_INT 0
60812: PPUSH
60813: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60814: LD_ADDR_VAR 0 1
60818: PUSH
60819: LD_INT 22
60821: PUSH
60822: LD_OWVAR 2
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 2
60833: PUSH
60834: LD_INT 30
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 30
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: LIST
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PPUSH
60863: CALL_OW 69
60867: ST_TO_ADDR
// if not depot then
60868: LD_VAR 0 1
60872: NOT
60873: IFFALSE 60877
// exit ;
60875: GO 60951
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
60877: LD_ADDR_VAR 0 2
60881: PUSH
60882: LD_VAR 0 1
60886: PUSH
60887: LD_INT 1
60889: PPUSH
60890: LD_VAR 0 1
60894: PPUSH
60895: CALL_OW 12
60899: ARRAY
60900: PPUSH
60901: CALL_OW 274
60905: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
60906: LD_VAR 0 2
60910: PPUSH
60911: LD_INT 1
60913: PPUSH
60914: LD_INT 0
60916: PPUSH
60917: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
60921: LD_VAR 0 2
60925: PPUSH
60926: LD_INT 2
60928: PPUSH
60929: LD_INT 0
60931: PPUSH
60932: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
60936: LD_VAR 0 2
60940: PPUSH
60941: LD_INT 3
60943: PPUSH
60944: LD_INT 0
60946: PPUSH
60947: CALL_OW 277
// end ;
60951: PPOPN 2
60953: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
60954: LD_EXP 40
60958: PUSH
60959: LD_EXP 68
60963: AND
60964: IFFALSE 61061
60966: GO 60968
60968: DISABLE
60969: LD_INT 0
60971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60972: LD_ADDR_VAR 0 1
60976: PUSH
60977: LD_INT 22
60979: PUSH
60980: LD_OWVAR 2
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 21
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 3
61001: PUSH
61002: LD_INT 23
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: LIST
61020: PPUSH
61021: CALL_OW 69
61025: ST_TO_ADDR
// if not tmp then
61026: LD_VAR 0 1
61030: NOT
61031: IFFALSE 61035
// exit ;
61033: GO 61061
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
61035: LD_VAR 0 1
61039: PUSH
61040: LD_INT 1
61042: PPUSH
61043: LD_VAR 0 1
61047: PPUSH
61048: CALL_OW 12
61052: ARRAY
61053: PPUSH
61054: LD_INT 200
61056: PPUSH
61057: CALL_OW 234
// end ;
61061: PPOPN 1
61063: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
61064: LD_EXP 40
61068: PUSH
61069: LD_EXP 69
61073: AND
61074: IFFALSE 61153
61076: GO 61078
61078: DISABLE
61079: LD_INT 0
61081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
61082: LD_ADDR_VAR 0 1
61086: PUSH
61087: LD_INT 22
61089: PUSH
61090: LD_OWVAR 2
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 21
61101: PUSH
61102: LD_INT 2
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PPUSH
61113: CALL_OW 69
61117: ST_TO_ADDR
// if not tmp then
61118: LD_VAR 0 1
61122: NOT
61123: IFFALSE 61127
// exit ;
61125: GO 61153
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
61127: LD_VAR 0 1
61131: PUSH
61132: LD_INT 1
61134: PPUSH
61135: LD_VAR 0 1
61139: PPUSH
61140: CALL_OW 12
61144: ARRAY
61145: PPUSH
61146: LD_INT 60
61148: PPUSH
61149: CALL_OW 234
// end ;
61153: PPOPN 1
61155: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
61156: LD_EXP 40
61160: PUSH
61161: LD_EXP 70
61165: AND
61166: IFFALSE 61265
61168: GO 61170
61170: DISABLE
61171: LD_INT 0
61173: PPUSH
61174: PPUSH
// begin enable ;
61175: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
61176: LD_ADDR_VAR 0 1
61180: PUSH
61181: LD_INT 22
61183: PUSH
61184: LD_OWVAR 2
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 61
61195: PUSH
61196: EMPTY
61197: LIST
61198: PUSH
61199: LD_INT 33
61201: PUSH
61202: LD_INT 2
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: LIST
61213: PPUSH
61214: CALL_OW 69
61218: ST_TO_ADDR
// if not tmp then
61219: LD_VAR 0 1
61223: NOT
61224: IFFALSE 61228
// exit ;
61226: GO 61265
// for i in tmp do
61228: LD_ADDR_VAR 0 2
61232: PUSH
61233: LD_VAR 0 1
61237: PUSH
61238: FOR_IN
61239: IFFALSE 61263
// if IsControledBy ( i ) then
61241: LD_VAR 0 2
61245: PPUSH
61246: CALL_OW 312
61250: IFFALSE 61261
// ComUnlink ( i ) ;
61252: LD_VAR 0 2
61256: PPUSH
61257: CALL_OW 136
61261: GO 61238
61263: POP
61264: POP
// end ;
61265: PPOPN 2
61267: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
61268: LD_EXP 40
61272: PUSH
61273: LD_EXP 71
61277: AND
61278: IFFALSE 61418
61280: GO 61282
61282: DISABLE
61283: LD_INT 0
61285: PPUSH
61286: PPUSH
// begin ToLua ( displayPowell(); ) ;
61287: LD_STRING displayPowell();
61289: PPUSH
61290: CALL_OW 559
// uc_side := 0 ;
61294: LD_ADDR_OWVAR 20
61298: PUSH
61299: LD_INT 0
61301: ST_TO_ADDR
// uc_nation := 2 ;
61302: LD_ADDR_OWVAR 21
61306: PUSH
61307: LD_INT 2
61309: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
61310: LD_ADDR_OWVAR 37
61314: PUSH
61315: LD_INT 14
61317: ST_TO_ADDR
// vc_engine := engine_siberite ;
61318: LD_ADDR_OWVAR 39
61322: PUSH
61323: LD_INT 3
61325: ST_TO_ADDR
// vc_control := control_apeman ;
61326: LD_ADDR_OWVAR 38
61330: PUSH
61331: LD_INT 5
61333: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
61334: LD_ADDR_OWVAR 40
61338: PUSH
61339: LD_INT 29
61341: ST_TO_ADDR
// un := CreateVehicle ;
61342: LD_ADDR_VAR 0 2
61346: PUSH
61347: CALL_OW 45
61351: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61352: LD_VAR 0 2
61356: PPUSH
61357: LD_INT 1
61359: PPUSH
61360: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
61364: LD_INT 35
61366: PPUSH
61367: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
61371: LD_VAR 0 2
61375: PPUSH
61376: LD_INT 22
61378: PUSH
61379: LD_OWVAR 2
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PPUSH
61388: CALL_OW 69
61392: PPUSH
61393: LD_VAR 0 2
61397: PPUSH
61398: CALL_OW 74
61402: PPUSH
61403: CALL_OW 115
// until IsDead ( un ) ;
61407: LD_VAR 0 2
61411: PPUSH
61412: CALL_OW 301
61416: IFFALSE 61364
// end ;
61418: PPOPN 2
61420: END
// every 0 0$1 trigger StreamModeActive and sStu do
61421: LD_EXP 40
61425: PUSH
61426: LD_EXP 79
61430: AND
61431: IFFALSE 61447
61433: GO 61435
61435: DISABLE
// begin ToLua ( displayStucuk(); ) ;
61436: LD_STRING displayStucuk();
61438: PPUSH
61439: CALL_OW 559
// ResetFog ;
61443: CALL_OW 335
// end ;
61447: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
61448: LD_EXP 40
61452: PUSH
61453: LD_EXP 72
61457: AND
61458: IFFALSE 61599
61460: GO 61462
61462: DISABLE
61463: LD_INT 0
61465: PPUSH
61466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61467: LD_ADDR_VAR 0 2
61471: PUSH
61472: LD_INT 22
61474: PUSH
61475: LD_OWVAR 2
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 21
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PPUSH
61498: CALL_OW 69
61502: ST_TO_ADDR
// if not tmp then
61503: LD_VAR 0 2
61507: NOT
61508: IFFALSE 61512
// exit ;
61510: GO 61599
// un := tmp [ rand ( 1 , tmp ) ] ;
61512: LD_ADDR_VAR 0 1
61516: PUSH
61517: LD_VAR 0 2
61521: PUSH
61522: LD_INT 1
61524: PPUSH
61525: LD_VAR 0 2
61529: PPUSH
61530: CALL_OW 12
61534: ARRAY
61535: ST_TO_ADDR
// SetSide ( un , 0 ) ;
61536: LD_VAR 0 1
61540: PPUSH
61541: LD_INT 0
61543: PPUSH
61544: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
61548: LD_VAR 0 1
61552: PPUSH
61553: LD_OWVAR 3
61557: PUSH
61558: LD_VAR 0 1
61562: DIFF
61563: PPUSH
61564: LD_VAR 0 1
61568: PPUSH
61569: CALL_OW 74
61573: PPUSH
61574: CALL_OW 115
// wait ( 0 0$20 ) ;
61578: LD_INT 700
61580: PPUSH
61581: CALL_OW 67
// SetSide ( un , your_side ) ;
61585: LD_VAR 0 1
61589: PPUSH
61590: LD_OWVAR 2
61594: PPUSH
61595: CALL_OW 235
// end ;
61599: PPOPN 2
61601: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
61602: LD_EXP 40
61606: PUSH
61607: LD_EXP 73
61611: AND
61612: IFFALSE 61718
61614: GO 61616
61616: DISABLE
61617: LD_INT 0
61619: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61620: LD_ADDR_VAR 0 1
61624: PUSH
61625: LD_INT 22
61627: PUSH
61628: LD_OWVAR 2
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 2
61639: PUSH
61640: LD_INT 30
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 30
61652: PUSH
61653: LD_INT 1
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: LIST
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PPUSH
61669: CALL_OW 69
61673: ST_TO_ADDR
// if not depot then
61674: LD_VAR 0 1
61678: NOT
61679: IFFALSE 61683
// exit ;
61681: GO 61718
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
61683: LD_VAR 0 1
61687: PUSH
61688: LD_INT 1
61690: ARRAY
61691: PPUSH
61692: CALL_OW 250
61696: PPUSH
61697: LD_VAR 0 1
61701: PUSH
61702: LD_INT 1
61704: ARRAY
61705: PPUSH
61706: CALL_OW 251
61710: PPUSH
61711: LD_INT 70
61713: PPUSH
61714: CALL_OW 495
// end ;
61718: PPOPN 1
61720: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
61721: LD_EXP 40
61725: PUSH
61726: LD_EXP 74
61730: AND
61731: IFFALSE 61942
61733: GO 61735
61735: DISABLE
61736: LD_INT 0
61738: PPUSH
61739: PPUSH
61740: PPUSH
61741: PPUSH
61742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61743: LD_ADDR_VAR 0 5
61747: PUSH
61748: LD_INT 22
61750: PUSH
61751: LD_OWVAR 2
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 21
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PPUSH
61774: CALL_OW 69
61778: ST_TO_ADDR
// if not tmp then
61779: LD_VAR 0 5
61783: NOT
61784: IFFALSE 61788
// exit ;
61786: GO 61942
// for i in tmp do
61788: LD_ADDR_VAR 0 1
61792: PUSH
61793: LD_VAR 0 5
61797: PUSH
61798: FOR_IN
61799: IFFALSE 61940
// begin d := rand ( 0 , 5 ) ;
61801: LD_ADDR_VAR 0 4
61805: PUSH
61806: LD_INT 0
61808: PPUSH
61809: LD_INT 5
61811: PPUSH
61812: CALL_OW 12
61816: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
61817: LD_ADDR_VAR 0 2
61821: PUSH
61822: LD_VAR 0 1
61826: PPUSH
61827: CALL_OW 250
61831: PPUSH
61832: LD_VAR 0 4
61836: PPUSH
61837: LD_INT 3
61839: PPUSH
61840: LD_INT 12
61842: PPUSH
61843: CALL_OW 12
61847: PPUSH
61848: CALL_OW 272
61852: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
61853: LD_ADDR_VAR 0 3
61857: PUSH
61858: LD_VAR 0 1
61862: PPUSH
61863: CALL_OW 251
61867: PPUSH
61868: LD_VAR 0 4
61872: PPUSH
61873: LD_INT 3
61875: PPUSH
61876: LD_INT 12
61878: PPUSH
61879: CALL_OW 12
61883: PPUSH
61884: CALL_OW 273
61888: ST_TO_ADDR
// if ValidHex ( x , y ) then
61889: LD_VAR 0 2
61893: PPUSH
61894: LD_VAR 0 3
61898: PPUSH
61899: CALL_OW 488
61903: IFFALSE 61938
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
61905: LD_VAR 0 1
61909: PPUSH
61910: LD_VAR 0 2
61914: PPUSH
61915: LD_VAR 0 3
61919: PPUSH
61920: LD_INT 3
61922: PPUSH
61923: LD_INT 6
61925: PPUSH
61926: CALL_OW 12
61930: PPUSH
61931: LD_INT 1
61933: PPUSH
61934: CALL_OW 483
// end ;
61938: GO 61798
61940: POP
61941: POP
// end ;
61942: PPOPN 5
61944: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
61945: LD_EXP 40
61949: PUSH
61950: LD_EXP 75
61954: AND
61955: IFFALSE 62049
61957: GO 61959
61959: DISABLE
61960: LD_INT 0
61962: PPUSH
61963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
61964: LD_ADDR_VAR 0 2
61968: PUSH
61969: LD_INT 22
61971: PUSH
61972: LD_OWVAR 2
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 32
61983: PUSH
61984: LD_INT 1
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 21
61993: PUSH
61994: LD_INT 2
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: LIST
62005: PPUSH
62006: CALL_OW 69
62010: ST_TO_ADDR
// if not tmp then
62011: LD_VAR 0 2
62015: NOT
62016: IFFALSE 62020
// exit ;
62018: GO 62049
// for i in tmp do
62020: LD_ADDR_VAR 0 1
62024: PUSH
62025: LD_VAR 0 2
62029: PUSH
62030: FOR_IN
62031: IFFALSE 62047
// SetFuel ( i , 0 ) ;
62033: LD_VAR 0 1
62037: PPUSH
62038: LD_INT 0
62040: PPUSH
62041: CALL_OW 240
62045: GO 62030
62047: POP
62048: POP
// end ;
62049: PPOPN 2
62051: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
62052: LD_EXP 40
62056: PUSH
62057: LD_EXP 76
62061: AND
62062: IFFALSE 62128
62064: GO 62066
62066: DISABLE
62067: LD_INT 0
62069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
62070: LD_ADDR_VAR 0 1
62074: PUSH
62075: LD_INT 22
62077: PUSH
62078: LD_OWVAR 2
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 30
62089: PUSH
62090: LD_INT 29
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PPUSH
62101: CALL_OW 69
62105: ST_TO_ADDR
// if not tmp then
62106: LD_VAR 0 1
62110: NOT
62111: IFFALSE 62115
// exit ;
62113: GO 62128
// DestroyUnit ( tmp [ 1 ] ) ;
62115: LD_VAR 0 1
62119: PUSH
62120: LD_INT 1
62122: ARRAY
62123: PPUSH
62124: CALL_OW 65
// end ;
62128: PPOPN 1
62130: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
62131: LD_EXP 40
62135: PUSH
62136: LD_EXP 78
62140: AND
62141: IFFALSE 62270
62143: GO 62145
62145: DISABLE
62146: LD_INT 0
62148: PPUSH
// begin uc_side := 0 ;
62149: LD_ADDR_OWVAR 20
62153: PUSH
62154: LD_INT 0
62156: ST_TO_ADDR
// uc_nation := nation_arabian ;
62157: LD_ADDR_OWVAR 21
62161: PUSH
62162: LD_INT 2
62164: ST_TO_ADDR
// hc_gallery :=  ;
62165: LD_ADDR_OWVAR 33
62169: PUSH
62170: LD_STRING 
62172: ST_TO_ADDR
// hc_name :=  ;
62173: LD_ADDR_OWVAR 26
62177: PUSH
62178: LD_STRING 
62180: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
62181: LD_INT 1
62183: PPUSH
62184: LD_INT 11
62186: PPUSH
62187: LD_INT 10
62189: PPUSH
62190: CALL_OW 380
// un := CreateHuman ;
62194: LD_ADDR_VAR 0 1
62198: PUSH
62199: CALL_OW 44
62203: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62204: LD_VAR 0 1
62208: PPUSH
62209: LD_INT 1
62211: PPUSH
62212: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62216: LD_INT 35
62218: PPUSH
62219: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62223: LD_VAR 0 1
62227: PPUSH
62228: LD_INT 22
62230: PUSH
62231: LD_OWVAR 2
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PPUSH
62240: CALL_OW 69
62244: PPUSH
62245: LD_VAR 0 1
62249: PPUSH
62250: CALL_OW 74
62254: PPUSH
62255: CALL_OW 115
// until IsDead ( un ) ;
62259: LD_VAR 0 1
62263: PPUSH
62264: CALL_OW 301
62268: IFFALSE 62216
// end ;
62270: PPOPN 1
62272: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
62273: LD_EXP 40
62277: PUSH
62278: LD_EXP 80
62282: AND
62283: IFFALSE 62295
62285: GO 62287
62287: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
62288: LD_STRING earthquake(getX(game), 0, 32)
62290: PPUSH
62291: CALL_OW 559
62295: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
62296: LD_EXP 40
62300: PUSH
62301: LD_EXP 81
62305: AND
62306: IFFALSE 62397
62308: GO 62310
62310: DISABLE
62311: LD_INT 0
62313: PPUSH
// begin enable ;
62314: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
62315: LD_ADDR_VAR 0 1
62319: PUSH
62320: LD_INT 22
62322: PUSH
62323: LD_OWVAR 2
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 21
62334: PUSH
62335: LD_INT 2
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 33
62344: PUSH
62345: LD_INT 3
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: LIST
62356: PPUSH
62357: CALL_OW 69
62361: ST_TO_ADDR
// if not tmp then
62362: LD_VAR 0 1
62366: NOT
62367: IFFALSE 62371
// exit ;
62369: GO 62397
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
62371: LD_VAR 0 1
62375: PUSH
62376: LD_INT 1
62378: PPUSH
62379: LD_VAR 0 1
62383: PPUSH
62384: CALL_OW 12
62388: ARRAY
62389: PPUSH
62390: LD_INT 1
62392: PPUSH
62393: CALL_OW 234
// end ;
62397: PPOPN 1
62399: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
62400: LD_EXP 40
62404: PUSH
62405: LD_EXP 82
62409: AND
62410: IFFALSE 62551
62412: GO 62414
62414: DISABLE
62415: LD_INT 0
62417: PPUSH
62418: PPUSH
62419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62420: LD_ADDR_VAR 0 3
62424: PUSH
62425: LD_INT 22
62427: PUSH
62428: LD_OWVAR 2
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 25
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PPUSH
62451: CALL_OW 69
62455: ST_TO_ADDR
// if not tmp then
62456: LD_VAR 0 3
62460: NOT
62461: IFFALSE 62465
// exit ;
62463: GO 62551
// un := tmp [ rand ( 1 , tmp ) ] ;
62465: LD_ADDR_VAR 0 2
62469: PUSH
62470: LD_VAR 0 3
62474: PUSH
62475: LD_INT 1
62477: PPUSH
62478: LD_VAR 0 3
62482: PPUSH
62483: CALL_OW 12
62487: ARRAY
62488: ST_TO_ADDR
// if Crawls ( un ) then
62489: LD_VAR 0 2
62493: PPUSH
62494: CALL_OW 318
62498: IFFALSE 62509
// ComWalk ( un ) ;
62500: LD_VAR 0 2
62504: PPUSH
62505: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
62509: LD_VAR 0 2
62513: PPUSH
62514: LD_INT 9
62516: PPUSH
62517: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
62521: LD_INT 28
62523: PPUSH
62524: LD_OWVAR 2
62528: PPUSH
62529: LD_INT 2
62531: PPUSH
62532: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
62536: LD_INT 29
62538: PPUSH
62539: LD_OWVAR 2
62543: PPUSH
62544: LD_INT 2
62546: PPUSH
62547: CALL_OW 322
// end ;
62551: PPOPN 3
62553: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
62554: LD_EXP 40
62558: PUSH
62559: LD_EXP 83
62563: AND
62564: IFFALSE 62675
62566: GO 62568
62568: DISABLE
62569: LD_INT 0
62571: PPUSH
62572: PPUSH
62573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62574: LD_ADDR_VAR 0 3
62578: PUSH
62579: LD_INT 22
62581: PUSH
62582: LD_OWVAR 2
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 25
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PPUSH
62605: CALL_OW 69
62609: ST_TO_ADDR
// if not tmp then
62610: LD_VAR 0 3
62614: NOT
62615: IFFALSE 62619
// exit ;
62617: GO 62675
// un := tmp [ rand ( 1 , tmp ) ] ;
62619: LD_ADDR_VAR 0 2
62623: PUSH
62624: LD_VAR 0 3
62628: PUSH
62629: LD_INT 1
62631: PPUSH
62632: LD_VAR 0 3
62636: PPUSH
62637: CALL_OW 12
62641: ARRAY
62642: ST_TO_ADDR
// if Crawls ( un ) then
62643: LD_VAR 0 2
62647: PPUSH
62648: CALL_OW 318
62652: IFFALSE 62663
// ComWalk ( un ) ;
62654: LD_VAR 0 2
62658: PPUSH
62659: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62663: LD_VAR 0 2
62667: PPUSH
62668: LD_INT 8
62670: PPUSH
62671: CALL_OW 336
// end ;
62675: PPOPN 3
62677: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
62678: LD_EXP 40
62682: PUSH
62683: LD_EXP 84
62687: AND
62688: IFFALSE 62832
62690: GO 62692
62692: DISABLE
62693: LD_INT 0
62695: PPUSH
62696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
62697: LD_ADDR_VAR 0 2
62701: PUSH
62702: LD_INT 22
62704: PUSH
62705: LD_OWVAR 2
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 21
62716: PUSH
62717: LD_INT 2
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 2
62726: PUSH
62727: LD_INT 34
62729: PUSH
62730: LD_INT 12
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 34
62739: PUSH
62740: LD_INT 51
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 34
62749: PUSH
62750: LD_INT 32
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: LIST
62767: PPUSH
62768: CALL_OW 69
62772: ST_TO_ADDR
// if not tmp then
62773: LD_VAR 0 2
62777: NOT
62778: IFFALSE 62782
// exit ;
62780: GO 62832
// for i in tmp do
62782: LD_ADDR_VAR 0 1
62786: PUSH
62787: LD_VAR 0 2
62791: PUSH
62792: FOR_IN
62793: IFFALSE 62830
// if GetCargo ( i , mat_artifact ) = 0 then
62795: LD_VAR 0 1
62799: PPUSH
62800: LD_INT 4
62802: PPUSH
62803: CALL_OW 289
62807: PUSH
62808: LD_INT 0
62810: EQUAL
62811: IFFALSE 62828
// SetCargo ( i , mat_siberit , 100 ) ;
62813: LD_VAR 0 1
62817: PPUSH
62818: LD_INT 3
62820: PPUSH
62821: LD_INT 100
62823: PPUSH
62824: CALL_OW 290
62828: GO 62792
62830: POP
62831: POP
// end ;
62832: PPOPN 2
62834: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
62835: LD_EXP 40
62839: PUSH
62840: LD_EXP 85
62844: AND
62845: IFFALSE 63028
62847: GO 62849
62849: DISABLE
62850: LD_INT 0
62852: PPUSH
62853: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62854: LD_ADDR_VAR 0 2
62858: PUSH
62859: LD_INT 22
62861: PUSH
62862: LD_OWVAR 2
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PPUSH
62871: CALL_OW 69
62875: ST_TO_ADDR
// if not tmp then
62876: LD_VAR 0 2
62880: NOT
62881: IFFALSE 62885
// exit ;
62883: GO 63028
// for i := 1 to 2 do
62885: LD_ADDR_VAR 0 1
62889: PUSH
62890: DOUBLE
62891: LD_INT 1
62893: DEC
62894: ST_TO_ADDR
62895: LD_INT 2
62897: PUSH
62898: FOR_TO
62899: IFFALSE 63026
// begin uc_side := your_side ;
62901: LD_ADDR_OWVAR 20
62905: PUSH
62906: LD_OWVAR 2
62910: ST_TO_ADDR
// uc_nation := nation_american ;
62911: LD_ADDR_OWVAR 21
62915: PUSH
62916: LD_INT 1
62918: ST_TO_ADDR
// vc_chassis := us_morphling ;
62919: LD_ADDR_OWVAR 37
62923: PUSH
62924: LD_INT 5
62926: ST_TO_ADDR
// vc_engine := engine_siberite ;
62927: LD_ADDR_OWVAR 39
62931: PUSH
62932: LD_INT 3
62934: ST_TO_ADDR
// vc_control := control_computer ;
62935: LD_ADDR_OWVAR 38
62939: PUSH
62940: LD_INT 3
62942: ST_TO_ADDR
// vc_weapon := us_double_laser ;
62943: LD_ADDR_OWVAR 40
62947: PUSH
62948: LD_INT 10
62950: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
62951: LD_VAR 0 2
62955: PUSH
62956: LD_INT 1
62958: ARRAY
62959: PPUSH
62960: CALL_OW 310
62964: NOT
62965: IFFALSE 63012
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
62967: CALL_OW 45
62971: PPUSH
62972: LD_VAR 0 2
62976: PUSH
62977: LD_INT 1
62979: ARRAY
62980: PPUSH
62981: CALL_OW 250
62985: PPUSH
62986: LD_VAR 0 2
62990: PUSH
62991: LD_INT 1
62993: ARRAY
62994: PPUSH
62995: CALL_OW 251
62999: PPUSH
63000: LD_INT 12
63002: PPUSH
63003: LD_INT 1
63005: PPUSH
63006: CALL_OW 50
63010: GO 63024
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
63012: CALL_OW 45
63016: PPUSH
63017: LD_INT 1
63019: PPUSH
63020: CALL_OW 51
// end ;
63024: GO 62898
63026: POP
63027: POP
// end ;
63028: PPOPN 2
63030: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
63031: LD_EXP 40
63035: PUSH
63036: LD_EXP 86
63040: AND
63041: IFFALSE 63263
63043: GO 63045
63045: DISABLE
63046: LD_INT 0
63048: PPUSH
63049: PPUSH
63050: PPUSH
63051: PPUSH
63052: PPUSH
63053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63054: LD_ADDR_VAR 0 6
63058: PUSH
63059: LD_INT 22
63061: PUSH
63062: LD_OWVAR 2
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 21
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 3
63083: PUSH
63084: LD_INT 23
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: LIST
63102: PPUSH
63103: CALL_OW 69
63107: ST_TO_ADDR
// if not tmp then
63108: LD_VAR 0 6
63112: NOT
63113: IFFALSE 63117
// exit ;
63115: GO 63263
// s1 := rand ( 1 , 4 ) ;
63117: LD_ADDR_VAR 0 2
63121: PUSH
63122: LD_INT 1
63124: PPUSH
63125: LD_INT 4
63127: PPUSH
63128: CALL_OW 12
63132: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
63133: LD_ADDR_VAR 0 4
63137: PUSH
63138: LD_VAR 0 6
63142: PUSH
63143: LD_INT 1
63145: ARRAY
63146: PPUSH
63147: LD_VAR 0 2
63151: PPUSH
63152: CALL_OW 259
63156: ST_TO_ADDR
// if s1 = 1 then
63157: LD_VAR 0 2
63161: PUSH
63162: LD_INT 1
63164: EQUAL
63165: IFFALSE 63185
// s2 := rand ( 2 , 4 ) else
63167: LD_ADDR_VAR 0 3
63171: PUSH
63172: LD_INT 2
63174: PPUSH
63175: LD_INT 4
63177: PPUSH
63178: CALL_OW 12
63182: ST_TO_ADDR
63183: GO 63193
// s2 := 1 ;
63185: LD_ADDR_VAR 0 3
63189: PUSH
63190: LD_INT 1
63192: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
63193: LD_ADDR_VAR 0 5
63197: PUSH
63198: LD_VAR 0 6
63202: PUSH
63203: LD_INT 1
63205: ARRAY
63206: PPUSH
63207: LD_VAR 0 3
63211: PPUSH
63212: CALL_OW 259
63216: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
63217: LD_VAR 0 6
63221: PUSH
63222: LD_INT 1
63224: ARRAY
63225: PPUSH
63226: LD_VAR 0 2
63230: PPUSH
63231: LD_VAR 0 5
63235: PPUSH
63236: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
63240: LD_VAR 0 6
63244: PUSH
63245: LD_INT 1
63247: ARRAY
63248: PPUSH
63249: LD_VAR 0 3
63253: PPUSH
63254: LD_VAR 0 4
63258: PPUSH
63259: CALL_OW 237
// end ;
63263: PPOPN 6
63265: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
63266: LD_EXP 40
63270: PUSH
63271: LD_EXP 87
63275: AND
63276: IFFALSE 63355
63278: GO 63280
63280: DISABLE
63281: LD_INT 0
63283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
63284: LD_ADDR_VAR 0 1
63288: PUSH
63289: LD_INT 22
63291: PUSH
63292: LD_OWVAR 2
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 30
63303: PUSH
63304: LD_INT 3
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PPUSH
63315: CALL_OW 69
63319: ST_TO_ADDR
// if not tmp then
63320: LD_VAR 0 1
63324: NOT
63325: IFFALSE 63329
// exit ;
63327: GO 63355
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63329: LD_VAR 0 1
63333: PUSH
63334: LD_INT 1
63336: PPUSH
63337: LD_VAR 0 1
63341: PPUSH
63342: CALL_OW 12
63346: ARRAY
63347: PPUSH
63348: LD_INT 1
63350: PPUSH
63351: CALL_OW 234
// end ;
63355: PPOPN 1
63357: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
63358: LD_EXP 40
63362: PUSH
63363: LD_EXP 88
63367: AND
63368: IFFALSE 63480
63370: GO 63372
63372: DISABLE
63373: LD_INT 0
63375: PPUSH
63376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
63377: LD_ADDR_VAR 0 2
63381: PUSH
63382: LD_INT 22
63384: PUSH
63385: LD_OWVAR 2
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 2
63396: PUSH
63397: LD_INT 30
63399: PUSH
63400: LD_INT 27
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 30
63409: PUSH
63410: LD_INT 26
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 30
63419: PUSH
63420: LD_INT 28
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PPUSH
63437: CALL_OW 69
63441: ST_TO_ADDR
// if not tmp then
63442: LD_VAR 0 2
63446: NOT
63447: IFFALSE 63451
// exit ;
63449: GO 63480
// for i in tmp do
63451: LD_ADDR_VAR 0 1
63455: PUSH
63456: LD_VAR 0 2
63460: PUSH
63461: FOR_IN
63462: IFFALSE 63478
// SetLives ( i , 1 ) ;
63464: LD_VAR 0 1
63468: PPUSH
63469: LD_INT 1
63471: PPUSH
63472: CALL_OW 234
63476: GO 63461
63478: POP
63479: POP
// end ;
63480: PPOPN 2
63482: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
63483: LD_EXP 40
63487: PUSH
63488: LD_EXP 89
63492: AND
63493: IFFALSE 63780
63495: GO 63497
63497: DISABLE
63498: LD_INT 0
63500: PPUSH
63501: PPUSH
63502: PPUSH
// begin i := rand ( 1 , 7 ) ;
63503: LD_ADDR_VAR 0 1
63507: PUSH
63508: LD_INT 1
63510: PPUSH
63511: LD_INT 7
63513: PPUSH
63514: CALL_OW 12
63518: ST_TO_ADDR
// case i of 1 :
63519: LD_VAR 0 1
63523: PUSH
63524: LD_INT 1
63526: DOUBLE
63527: EQUAL
63528: IFTRUE 63532
63530: GO 63542
63532: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
63533: LD_STRING earthquake(getX(game), 0, 32)
63535: PPUSH
63536: CALL_OW 559
63540: GO 63780
63542: LD_INT 2
63544: DOUBLE
63545: EQUAL
63546: IFTRUE 63550
63548: GO 63564
63550: POP
// begin ToLua ( displayStucuk(); ) ;
63551: LD_STRING displayStucuk();
63553: PPUSH
63554: CALL_OW 559
// ResetFog ;
63558: CALL_OW 335
// end ; 3 :
63562: GO 63780
63564: LD_INT 3
63566: DOUBLE
63567: EQUAL
63568: IFTRUE 63572
63570: GO 63676
63572: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63573: LD_ADDR_VAR 0 2
63577: PUSH
63578: LD_INT 22
63580: PUSH
63581: LD_OWVAR 2
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 25
63592: PUSH
63593: LD_INT 1
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PPUSH
63604: CALL_OW 69
63608: ST_TO_ADDR
// if not tmp then
63609: LD_VAR 0 2
63613: NOT
63614: IFFALSE 63618
// exit ;
63616: GO 63780
// un := tmp [ rand ( 1 , tmp ) ] ;
63618: LD_ADDR_VAR 0 3
63622: PUSH
63623: LD_VAR 0 2
63627: PUSH
63628: LD_INT 1
63630: PPUSH
63631: LD_VAR 0 2
63635: PPUSH
63636: CALL_OW 12
63640: ARRAY
63641: ST_TO_ADDR
// if Crawls ( un ) then
63642: LD_VAR 0 3
63646: PPUSH
63647: CALL_OW 318
63651: IFFALSE 63662
// ComWalk ( un ) ;
63653: LD_VAR 0 3
63657: PPUSH
63658: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63662: LD_VAR 0 3
63666: PPUSH
63667: LD_INT 8
63669: PPUSH
63670: CALL_OW 336
// end ; 4 :
63674: GO 63780
63676: LD_INT 4
63678: DOUBLE
63679: EQUAL
63680: IFTRUE 63684
63682: GO 63758
63684: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63685: LD_ADDR_VAR 0 2
63689: PUSH
63690: LD_INT 22
63692: PUSH
63693: LD_OWVAR 2
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 30
63704: PUSH
63705: LD_INT 29
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PPUSH
63716: CALL_OW 69
63720: ST_TO_ADDR
// if not tmp then
63721: LD_VAR 0 2
63725: NOT
63726: IFFALSE 63730
// exit ;
63728: GO 63780
// CenterNowOnUnits ( tmp [ 1 ] ) ;
63730: LD_VAR 0 2
63734: PUSH
63735: LD_INT 1
63737: ARRAY
63738: PPUSH
63739: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
63743: LD_VAR 0 2
63747: PUSH
63748: LD_INT 1
63750: ARRAY
63751: PPUSH
63752: CALL_OW 65
// end ; 5 .. 7 :
63756: GO 63780
63758: LD_INT 5
63760: DOUBLE
63761: GREATEREQUAL
63762: IFFALSE 63770
63764: LD_INT 7
63766: DOUBLE
63767: LESSEQUAL
63768: IFTRUE 63772
63770: GO 63779
63772: POP
// StreamSibBomb ; end ;
63773: CALL 60017 0 0
63777: GO 63780
63779: POP
// end ;
63780: PPOPN 3
63782: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
63783: LD_EXP 40
63787: PUSH
63788: LD_EXP 90
63792: AND
63793: IFFALSE 63949
63795: GO 63797
63797: DISABLE
63798: LD_INT 0
63800: PPUSH
63801: PPUSH
63802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
63803: LD_ADDR_VAR 0 2
63807: PUSH
63808: LD_INT 81
63810: PUSH
63811: LD_OWVAR 2
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 2
63822: PUSH
63823: LD_INT 21
63825: PUSH
63826: LD_INT 1
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 21
63835: PUSH
63836: LD_INT 2
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: LIST
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PPUSH
63852: CALL_OW 69
63856: ST_TO_ADDR
// if not tmp then
63857: LD_VAR 0 2
63861: NOT
63862: IFFALSE 63866
// exit ;
63864: GO 63949
// p := 0 ;
63866: LD_ADDR_VAR 0 3
63870: PUSH
63871: LD_INT 0
63873: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63874: LD_INT 35
63876: PPUSH
63877: CALL_OW 67
// p := p + 1 ;
63881: LD_ADDR_VAR 0 3
63885: PUSH
63886: LD_VAR 0 3
63890: PUSH
63891: LD_INT 1
63893: PLUS
63894: ST_TO_ADDR
// for i in tmp do
63895: LD_ADDR_VAR 0 1
63899: PUSH
63900: LD_VAR 0 2
63904: PUSH
63905: FOR_IN
63906: IFFALSE 63937
// if GetLives ( i ) < 1000 then
63908: LD_VAR 0 1
63912: PPUSH
63913: CALL_OW 256
63917: PUSH
63918: LD_INT 1000
63920: LESS
63921: IFFALSE 63935
// SetLives ( i , 1000 ) ;
63923: LD_VAR 0 1
63927: PPUSH
63928: LD_INT 1000
63930: PPUSH
63931: CALL_OW 234
63935: GO 63905
63937: POP
63938: POP
// until p > 20 ;
63939: LD_VAR 0 3
63943: PUSH
63944: LD_INT 20
63946: GREATER
63947: IFFALSE 63874
// end ;
63949: PPOPN 3
63951: END
// every 0 0$1 trigger StreamModeActive and sTime do
63952: LD_EXP 40
63956: PUSH
63957: LD_EXP 91
63961: AND
63962: IFFALSE 63997
63964: GO 63966
63966: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
63967: LD_INT 28
63969: PPUSH
63970: LD_OWVAR 2
63974: PPUSH
63975: LD_INT 2
63977: PPUSH
63978: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
63982: LD_INT 30
63984: PPUSH
63985: LD_OWVAR 2
63989: PPUSH
63990: LD_INT 2
63992: PPUSH
63993: CALL_OW 322
// end ;
63997: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
63998: LD_EXP 40
64002: PUSH
64003: LD_EXP 92
64007: AND
64008: IFFALSE 64129
64010: GO 64012
64012: DISABLE
64013: LD_INT 0
64015: PPUSH
64016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64017: LD_ADDR_VAR 0 2
64021: PUSH
64022: LD_INT 22
64024: PUSH
64025: LD_OWVAR 2
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 21
64036: PUSH
64037: LD_INT 1
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 3
64046: PUSH
64047: LD_INT 23
64049: PUSH
64050: LD_INT 0
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: LIST
64065: PPUSH
64066: CALL_OW 69
64070: ST_TO_ADDR
// if not tmp then
64071: LD_VAR 0 2
64075: NOT
64076: IFFALSE 64080
// exit ;
64078: GO 64129
// for i in tmp do
64080: LD_ADDR_VAR 0 1
64084: PUSH
64085: LD_VAR 0 2
64089: PUSH
64090: FOR_IN
64091: IFFALSE 64127
// begin if Crawls ( i ) then
64093: LD_VAR 0 1
64097: PPUSH
64098: CALL_OW 318
64102: IFFALSE 64113
// ComWalk ( i ) ;
64104: LD_VAR 0 1
64108: PPUSH
64109: CALL_OW 138
// SetClass ( i , 2 ) ;
64113: LD_VAR 0 1
64117: PPUSH
64118: LD_INT 2
64120: PPUSH
64121: CALL_OW 336
// end ;
64125: GO 64090
64127: POP
64128: POP
// end ;
64129: PPOPN 2
64131: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
64132: LD_EXP 40
64136: PUSH
64137: LD_EXP 93
64141: AND
64142: IFFALSE 64430
64144: GO 64146
64146: DISABLE
64147: LD_INT 0
64149: PPUSH
64150: PPUSH
64151: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
64152: LD_OWVAR 2
64156: PPUSH
64157: LD_INT 9
64159: PPUSH
64160: LD_INT 1
64162: PPUSH
64163: LD_INT 1
64165: PPUSH
64166: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
64170: LD_INT 9
64172: PPUSH
64173: LD_OWVAR 2
64177: PPUSH
64178: CALL_OW 343
// uc_side := 9 ;
64182: LD_ADDR_OWVAR 20
64186: PUSH
64187: LD_INT 9
64189: ST_TO_ADDR
// uc_nation := 2 ;
64190: LD_ADDR_OWVAR 21
64194: PUSH
64195: LD_INT 2
64197: ST_TO_ADDR
// hc_name := Dark Warrior ;
64198: LD_ADDR_OWVAR 26
64202: PUSH
64203: LD_STRING Dark Warrior
64205: ST_TO_ADDR
// hc_gallery :=  ;
64206: LD_ADDR_OWVAR 33
64210: PUSH
64211: LD_STRING 
64213: ST_TO_ADDR
// hc_noskilllimit := true ;
64214: LD_ADDR_OWVAR 76
64218: PUSH
64219: LD_INT 1
64221: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
64222: LD_ADDR_OWVAR 31
64226: PUSH
64227: LD_INT 30
64229: PUSH
64230: LD_INT 30
64232: PUSH
64233: LD_INT 30
64235: PUSH
64236: LD_INT 30
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: ST_TO_ADDR
// un := CreateHuman ;
64245: LD_ADDR_VAR 0 3
64249: PUSH
64250: CALL_OW 44
64254: ST_TO_ADDR
// hc_noskilllimit := false ;
64255: LD_ADDR_OWVAR 76
64259: PUSH
64260: LD_INT 0
64262: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
64263: LD_VAR 0 3
64267: PPUSH
64268: LD_INT 1
64270: PPUSH
64271: CALL_OW 51
// ToLua ( playRanger() ) ;
64275: LD_STRING playRanger()
64277: PPUSH
64278: CALL_OW 559
// p := 0 ;
64282: LD_ADDR_VAR 0 2
64286: PUSH
64287: LD_INT 0
64289: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
64290: LD_INT 35
64292: PPUSH
64293: CALL_OW 67
// p := p + 1 ;
64297: LD_ADDR_VAR 0 2
64301: PUSH
64302: LD_VAR 0 2
64306: PUSH
64307: LD_INT 1
64309: PLUS
64310: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
64311: LD_VAR 0 3
64315: PPUSH
64316: CALL_OW 256
64320: PUSH
64321: LD_INT 1000
64323: LESS
64324: IFFALSE 64338
// SetLives ( un , 1000 ) ;
64326: LD_VAR 0 3
64330: PPUSH
64331: LD_INT 1000
64333: PPUSH
64334: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
64338: LD_VAR 0 3
64342: PPUSH
64343: LD_INT 81
64345: PUSH
64346: LD_OWVAR 2
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 91
64357: PUSH
64358: LD_VAR 0 3
64362: PUSH
64363: LD_INT 30
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: LIST
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PPUSH
64375: CALL_OW 69
64379: PPUSH
64380: LD_VAR 0 3
64384: PPUSH
64385: CALL_OW 74
64389: PPUSH
64390: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
64394: LD_VAR 0 2
64398: PUSH
64399: LD_INT 80
64401: GREATER
64402: PUSH
64403: LD_VAR 0 3
64407: PPUSH
64408: CALL_OW 301
64412: OR
64413: IFFALSE 64290
// if un then
64415: LD_VAR 0 3
64419: IFFALSE 64430
// RemoveUnit ( un ) ;
64421: LD_VAR 0 3
64425: PPUSH
64426: CALL_OW 64
// end ;
64430: PPOPN 3
64432: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
64433: LD_EXP 94
64437: IFFALSE 64553
64439: GO 64441
64441: DISABLE
64442: LD_INT 0
64444: PPUSH
64445: PPUSH
64446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64447: LD_ADDR_VAR 0 2
64451: PUSH
64452: LD_INT 81
64454: PUSH
64455: LD_OWVAR 2
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 21
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PPUSH
64478: CALL_OW 69
64482: ST_TO_ADDR
// ToLua ( playComputer() ) ;
64483: LD_STRING playComputer()
64485: PPUSH
64486: CALL_OW 559
// if not tmp then
64490: LD_VAR 0 2
64494: NOT
64495: IFFALSE 64499
// exit ;
64497: GO 64553
// for i in tmp do
64499: LD_ADDR_VAR 0 1
64503: PUSH
64504: LD_VAR 0 2
64508: PUSH
64509: FOR_IN
64510: IFFALSE 64551
// for j := 1 to 4 do
64512: LD_ADDR_VAR 0 3
64516: PUSH
64517: DOUBLE
64518: LD_INT 1
64520: DEC
64521: ST_TO_ADDR
64522: LD_INT 4
64524: PUSH
64525: FOR_TO
64526: IFFALSE 64547
// SetSkill ( i , j , 10 ) ;
64528: LD_VAR 0 1
64532: PPUSH
64533: LD_VAR 0 3
64537: PPUSH
64538: LD_INT 10
64540: PPUSH
64541: CALL_OW 237
64545: GO 64525
64547: POP
64548: POP
64549: GO 64509
64551: POP
64552: POP
// end ;
64553: PPOPN 3
64555: END
// every 0 0$1 trigger s30 do var i , tmp ;
64556: LD_EXP 95
64560: IFFALSE 64629
64562: GO 64564
64564: DISABLE
64565: LD_INT 0
64567: PPUSH
64568: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64569: LD_ADDR_VAR 0 2
64573: PUSH
64574: LD_INT 22
64576: PUSH
64577: LD_OWVAR 2
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PPUSH
64586: CALL_OW 69
64590: ST_TO_ADDR
// if not tmp then
64591: LD_VAR 0 2
64595: NOT
64596: IFFALSE 64600
// exit ;
64598: GO 64629
// for i in tmp do
64600: LD_ADDR_VAR 0 1
64604: PUSH
64605: LD_VAR 0 2
64609: PUSH
64610: FOR_IN
64611: IFFALSE 64627
// SetLives ( i , 300 ) ;
64613: LD_VAR 0 1
64617: PPUSH
64618: LD_INT 300
64620: PPUSH
64621: CALL_OW 234
64625: GO 64610
64627: POP
64628: POP
// end ;
64629: PPOPN 2
64631: END
// every 0 0$1 trigger s60 do var i , tmp ;
64632: LD_EXP 96
64636: IFFALSE 64705
64638: GO 64640
64640: DISABLE
64641: LD_INT 0
64643: PPUSH
64644: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64645: LD_ADDR_VAR 0 2
64649: PUSH
64650: LD_INT 22
64652: PUSH
64653: LD_OWVAR 2
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PPUSH
64662: CALL_OW 69
64666: ST_TO_ADDR
// if not tmp then
64667: LD_VAR 0 2
64671: NOT
64672: IFFALSE 64676
// exit ;
64674: GO 64705
// for i in tmp do
64676: LD_ADDR_VAR 0 1
64680: PUSH
64681: LD_VAR 0 2
64685: PUSH
64686: FOR_IN
64687: IFFALSE 64703
// SetLives ( i , 600 ) ;
64689: LD_VAR 0 1
64693: PPUSH
64694: LD_INT 600
64696: PPUSH
64697: CALL_OW 234
64701: GO 64686
64703: POP
64704: POP
// end ;
64705: PPOPN 2
64707: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64708: LD_INT 0
64710: PPUSH
// case cmd of 301 :
64711: LD_VAR 0 1
64715: PUSH
64716: LD_INT 301
64718: DOUBLE
64719: EQUAL
64720: IFTRUE 64724
64722: GO 64756
64724: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
64725: LD_VAR 0 6
64729: PPUSH
64730: LD_VAR 0 7
64734: PPUSH
64735: LD_VAR 0 8
64739: PPUSH
64740: LD_VAR 0 4
64744: PPUSH
64745: LD_VAR 0 5
64749: PPUSH
64750: CALL 65965 0 5
64754: GO 64877
64756: LD_INT 302
64758: DOUBLE
64759: EQUAL
64760: IFTRUE 64764
64762: GO 64801
64764: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
64765: LD_VAR 0 6
64769: PPUSH
64770: LD_VAR 0 7
64774: PPUSH
64775: LD_VAR 0 8
64779: PPUSH
64780: LD_VAR 0 9
64784: PPUSH
64785: LD_VAR 0 4
64789: PPUSH
64790: LD_VAR 0 5
64794: PPUSH
64795: CALL 66056 0 6
64799: GO 64877
64801: LD_INT 303
64803: DOUBLE
64804: EQUAL
64805: IFTRUE 64809
64807: GO 64846
64809: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
64810: LD_VAR 0 6
64814: PPUSH
64815: LD_VAR 0 7
64819: PPUSH
64820: LD_VAR 0 8
64824: PPUSH
64825: LD_VAR 0 9
64829: PPUSH
64830: LD_VAR 0 4
64834: PPUSH
64835: LD_VAR 0 5
64839: PPUSH
64840: CALL 64882 0 6
64844: GO 64877
64846: LD_INT 304
64848: DOUBLE
64849: EQUAL
64850: IFTRUE 64854
64852: GO 64876
64854: POP
// hHackTeleport ( unit , x , y ) ; end ;
64855: LD_VAR 0 2
64859: PPUSH
64860: LD_VAR 0 4
64864: PPUSH
64865: LD_VAR 0 5
64869: PPUSH
64870: CALL 66649 0 3
64874: GO 64877
64876: POP
// end ;
64877: LD_VAR 0 12
64881: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
64882: LD_INT 0
64884: PPUSH
64885: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
64886: LD_VAR 0 1
64890: PUSH
64891: LD_INT 1
64893: LESS
64894: PUSH
64895: LD_VAR 0 1
64899: PUSH
64900: LD_INT 3
64902: GREATER
64903: OR
64904: PUSH
64905: LD_VAR 0 5
64909: PPUSH
64910: LD_VAR 0 6
64914: PPUSH
64915: CALL_OW 428
64919: OR
64920: IFFALSE 64924
// exit ;
64922: GO 65652
// uc_side := your_side ;
64924: LD_ADDR_OWVAR 20
64928: PUSH
64929: LD_OWVAR 2
64933: ST_TO_ADDR
// uc_nation := nation ;
64934: LD_ADDR_OWVAR 21
64938: PUSH
64939: LD_VAR 0 1
64943: ST_TO_ADDR
// bc_level = 1 ;
64944: LD_ADDR_OWVAR 43
64948: PUSH
64949: LD_INT 1
64951: ST_TO_ADDR
// case btype of 1 :
64952: LD_VAR 0 2
64956: PUSH
64957: LD_INT 1
64959: DOUBLE
64960: EQUAL
64961: IFTRUE 64965
64963: GO 64976
64965: POP
// bc_type := b_depot ; 2 :
64966: LD_ADDR_OWVAR 42
64970: PUSH
64971: LD_INT 0
64973: ST_TO_ADDR
64974: GO 65596
64976: LD_INT 2
64978: DOUBLE
64979: EQUAL
64980: IFTRUE 64984
64982: GO 64995
64984: POP
// bc_type := b_warehouse ; 3 :
64985: LD_ADDR_OWVAR 42
64989: PUSH
64990: LD_INT 1
64992: ST_TO_ADDR
64993: GO 65596
64995: LD_INT 3
64997: DOUBLE
64998: EQUAL
64999: IFTRUE 65003
65001: GO 65014
65003: POP
// bc_type := b_lab ; 4 .. 9 :
65004: LD_ADDR_OWVAR 42
65008: PUSH
65009: LD_INT 6
65011: ST_TO_ADDR
65012: GO 65596
65014: LD_INT 4
65016: DOUBLE
65017: GREATEREQUAL
65018: IFFALSE 65026
65020: LD_INT 9
65022: DOUBLE
65023: LESSEQUAL
65024: IFTRUE 65028
65026: GO 65088
65028: POP
// begin bc_type := b_lab_half ;
65029: LD_ADDR_OWVAR 42
65033: PUSH
65034: LD_INT 7
65036: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
65037: LD_ADDR_OWVAR 44
65041: PUSH
65042: LD_INT 10
65044: PUSH
65045: LD_INT 11
65047: PUSH
65048: LD_INT 12
65050: PUSH
65051: LD_INT 15
65053: PUSH
65054: LD_INT 14
65056: PUSH
65057: LD_INT 13
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: PUSH
65068: LD_VAR 0 2
65072: PUSH
65073: LD_INT 3
65075: MINUS
65076: ARRAY
65077: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
65078: LD_ADDR_OWVAR 45
65082: PUSH
65083: LD_INT 9
65085: ST_TO_ADDR
// end ; 10 .. 13 :
65086: GO 65596
65088: LD_INT 10
65090: DOUBLE
65091: GREATEREQUAL
65092: IFFALSE 65100
65094: LD_INT 13
65096: DOUBLE
65097: LESSEQUAL
65098: IFTRUE 65102
65100: GO 65179
65102: POP
// begin bc_type := b_lab_full ;
65103: LD_ADDR_OWVAR 42
65107: PUSH
65108: LD_INT 8
65110: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
65111: LD_ADDR_OWVAR 44
65115: PUSH
65116: LD_INT 10
65118: PUSH
65119: LD_INT 12
65121: PUSH
65122: LD_INT 14
65124: PUSH
65125: LD_INT 13
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: PUSH
65134: LD_VAR 0 2
65138: PUSH
65139: LD_INT 9
65141: MINUS
65142: ARRAY
65143: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
65144: LD_ADDR_OWVAR 45
65148: PUSH
65149: LD_INT 11
65151: PUSH
65152: LD_INT 15
65154: PUSH
65155: LD_INT 12
65157: PUSH
65158: LD_INT 15
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: PUSH
65167: LD_VAR 0 2
65171: PUSH
65172: LD_INT 9
65174: MINUS
65175: ARRAY
65176: ST_TO_ADDR
// end ; 14 :
65177: GO 65596
65179: LD_INT 14
65181: DOUBLE
65182: EQUAL
65183: IFTRUE 65187
65185: GO 65198
65187: POP
// bc_type := b_workshop ; 15 :
65188: LD_ADDR_OWVAR 42
65192: PUSH
65193: LD_INT 2
65195: ST_TO_ADDR
65196: GO 65596
65198: LD_INT 15
65200: DOUBLE
65201: EQUAL
65202: IFTRUE 65206
65204: GO 65217
65206: POP
// bc_type := b_factory ; 16 :
65207: LD_ADDR_OWVAR 42
65211: PUSH
65212: LD_INT 3
65214: ST_TO_ADDR
65215: GO 65596
65217: LD_INT 16
65219: DOUBLE
65220: EQUAL
65221: IFTRUE 65225
65223: GO 65236
65225: POP
// bc_type := b_ext_gun ; 17 :
65226: LD_ADDR_OWVAR 42
65230: PUSH
65231: LD_INT 17
65233: ST_TO_ADDR
65234: GO 65596
65236: LD_INT 17
65238: DOUBLE
65239: EQUAL
65240: IFTRUE 65244
65242: GO 65272
65244: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
65245: LD_ADDR_OWVAR 42
65249: PUSH
65250: LD_INT 19
65252: PUSH
65253: LD_INT 23
65255: PUSH
65256: LD_INT 19
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: LIST
65263: PUSH
65264: LD_VAR 0 1
65268: ARRAY
65269: ST_TO_ADDR
65270: GO 65596
65272: LD_INT 18
65274: DOUBLE
65275: EQUAL
65276: IFTRUE 65280
65278: GO 65291
65280: POP
// bc_type := b_ext_radar ; 19 :
65281: LD_ADDR_OWVAR 42
65285: PUSH
65286: LD_INT 20
65288: ST_TO_ADDR
65289: GO 65596
65291: LD_INT 19
65293: DOUBLE
65294: EQUAL
65295: IFTRUE 65299
65297: GO 65310
65299: POP
// bc_type := b_ext_radio ; 20 :
65300: LD_ADDR_OWVAR 42
65304: PUSH
65305: LD_INT 22
65307: ST_TO_ADDR
65308: GO 65596
65310: LD_INT 20
65312: DOUBLE
65313: EQUAL
65314: IFTRUE 65318
65316: GO 65329
65318: POP
// bc_type := b_ext_siberium ; 21 :
65319: LD_ADDR_OWVAR 42
65323: PUSH
65324: LD_INT 21
65326: ST_TO_ADDR
65327: GO 65596
65329: LD_INT 21
65331: DOUBLE
65332: EQUAL
65333: IFTRUE 65337
65335: GO 65348
65337: POP
// bc_type := b_ext_computer ; 22 :
65338: LD_ADDR_OWVAR 42
65342: PUSH
65343: LD_INT 24
65345: ST_TO_ADDR
65346: GO 65596
65348: LD_INT 22
65350: DOUBLE
65351: EQUAL
65352: IFTRUE 65356
65354: GO 65367
65356: POP
// bc_type := b_ext_track ; 23 :
65357: LD_ADDR_OWVAR 42
65361: PUSH
65362: LD_INT 16
65364: ST_TO_ADDR
65365: GO 65596
65367: LD_INT 23
65369: DOUBLE
65370: EQUAL
65371: IFTRUE 65375
65373: GO 65386
65375: POP
// bc_type := b_ext_laser ; 24 :
65376: LD_ADDR_OWVAR 42
65380: PUSH
65381: LD_INT 25
65383: ST_TO_ADDR
65384: GO 65596
65386: LD_INT 24
65388: DOUBLE
65389: EQUAL
65390: IFTRUE 65394
65392: GO 65405
65394: POP
// bc_type := b_control_tower ; 25 :
65395: LD_ADDR_OWVAR 42
65399: PUSH
65400: LD_INT 36
65402: ST_TO_ADDR
65403: GO 65596
65405: LD_INT 25
65407: DOUBLE
65408: EQUAL
65409: IFTRUE 65413
65411: GO 65424
65413: POP
// bc_type := b_breastwork ; 26 :
65414: LD_ADDR_OWVAR 42
65418: PUSH
65419: LD_INT 31
65421: ST_TO_ADDR
65422: GO 65596
65424: LD_INT 26
65426: DOUBLE
65427: EQUAL
65428: IFTRUE 65432
65430: GO 65443
65432: POP
// bc_type := b_bunker ; 27 :
65433: LD_ADDR_OWVAR 42
65437: PUSH
65438: LD_INT 32
65440: ST_TO_ADDR
65441: GO 65596
65443: LD_INT 27
65445: DOUBLE
65446: EQUAL
65447: IFTRUE 65451
65449: GO 65462
65451: POP
// bc_type := b_turret ; 28 :
65452: LD_ADDR_OWVAR 42
65456: PUSH
65457: LD_INT 33
65459: ST_TO_ADDR
65460: GO 65596
65462: LD_INT 28
65464: DOUBLE
65465: EQUAL
65466: IFTRUE 65470
65468: GO 65481
65470: POP
// bc_type := b_armoury ; 29 :
65471: LD_ADDR_OWVAR 42
65475: PUSH
65476: LD_INT 4
65478: ST_TO_ADDR
65479: GO 65596
65481: LD_INT 29
65483: DOUBLE
65484: EQUAL
65485: IFTRUE 65489
65487: GO 65500
65489: POP
// bc_type := b_barracks ; 30 :
65490: LD_ADDR_OWVAR 42
65494: PUSH
65495: LD_INT 5
65497: ST_TO_ADDR
65498: GO 65596
65500: LD_INT 30
65502: DOUBLE
65503: EQUAL
65504: IFTRUE 65508
65506: GO 65519
65508: POP
// bc_type := b_solar_power ; 31 :
65509: LD_ADDR_OWVAR 42
65513: PUSH
65514: LD_INT 27
65516: ST_TO_ADDR
65517: GO 65596
65519: LD_INT 31
65521: DOUBLE
65522: EQUAL
65523: IFTRUE 65527
65525: GO 65538
65527: POP
// bc_type := b_oil_power ; 32 :
65528: LD_ADDR_OWVAR 42
65532: PUSH
65533: LD_INT 26
65535: ST_TO_ADDR
65536: GO 65596
65538: LD_INT 32
65540: DOUBLE
65541: EQUAL
65542: IFTRUE 65546
65544: GO 65557
65546: POP
// bc_type := b_siberite_power ; 33 :
65547: LD_ADDR_OWVAR 42
65551: PUSH
65552: LD_INT 28
65554: ST_TO_ADDR
65555: GO 65596
65557: LD_INT 33
65559: DOUBLE
65560: EQUAL
65561: IFTRUE 65565
65563: GO 65576
65565: POP
// bc_type := b_oil_mine ; 34 :
65566: LD_ADDR_OWVAR 42
65570: PUSH
65571: LD_INT 29
65573: ST_TO_ADDR
65574: GO 65596
65576: LD_INT 34
65578: DOUBLE
65579: EQUAL
65580: IFTRUE 65584
65582: GO 65595
65584: POP
// bc_type := b_siberite_mine ; end ;
65585: LD_ADDR_OWVAR 42
65589: PUSH
65590: LD_INT 30
65592: ST_TO_ADDR
65593: GO 65596
65595: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
65596: LD_ADDR_VAR 0 8
65600: PUSH
65601: LD_VAR 0 5
65605: PPUSH
65606: LD_VAR 0 6
65610: PPUSH
65611: LD_VAR 0 3
65615: PPUSH
65616: CALL_OW 47
65620: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
65621: LD_OWVAR 42
65625: PUSH
65626: LD_INT 32
65628: PUSH
65629: LD_INT 33
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: IN
65636: IFFALSE 65652
// PlaceWeaponTurret ( b , weapon ) ;
65638: LD_VAR 0 8
65642: PPUSH
65643: LD_VAR 0 4
65647: PPUSH
65648: CALL_OW 431
// end ;
65652: LD_VAR 0 7
65656: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
65657: LD_INT 0
65659: PPUSH
65660: PPUSH
65661: PPUSH
65662: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65663: LD_ADDR_VAR 0 4
65667: PUSH
65668: LD_INT 22
65670: PUSH
65671: LD_OWVAR 2
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 2
65682: PUSH
65683: LD_INT 30
65685: PUSH
65686: LD_INT 0
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 30
65695: PUSH
65696: LD_INT 1
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: LIST
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PPUSH
65712: CALL_OW 69
65716: ST_TO_ADDR
// if not tmp then
65717: LD_VAR 0 4
65721: NOT
65722: IFFALSE 65726
// exit ;
65724: GO 65785
// for i in tmp do
65726: LD_ADDR_VAR 0 2
65730: PUSH
65731: LD_VAR 0 4
65735: PUSH
65736: FOR_IN
65737: IFFALSE 65783
// for j = 1 to 3 do
65739: LD_ADDR_VAR 0 3
65743: PUSH
65744: DOUBLE
65745: LD_INT 1
65747: DEC
65748: ST_TO_ADDR
65749: LD_INT 3
65751: PUSH
65752: FOR_TO
65753: IFFALSE 65779
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
65755: LD_VAR 0 2
65759: PPUSH
65760: CALL_OW 274
65764: PPUSH
65765: LD_VAR 0 3
65769: PPUSH
65770: LD_INT 99999
65772: PPUSH
65773: CALL_OW 277
65777: GO 65752
65779: POP
65780: POP
65781: GO 65736
65783: POP
65784: POP
// end ;
65785: LD_VAR 0 1
65789: RET
// export function hHackSetLevel10 ; var i , j ; begin
65790: LD_INT 0
65792: PPUSH
65793: PPUSH
65794: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65795: LD_ADDR_VAR 0 2
65799: PUSH
65800: LD_INT 21
65802: PUSH
65803: LD_INT 1
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PPUSH
65810: CALL_OW 69
65814: PUSH
65815: FOR_IN
65816: IFFALSE 65868
// if IsSelected ( i ) then
65818: LD_VAR 0 2
65822: PPUSH
65823: CALL_OW 306
65827: IFFALSE 65866
// begin for j := 1 to 4 do
65829: LD_ADDR_VAR 0 3
65833: PUSH
65834: DOUBLE
65835: LD_INT 1
65837: DEC
65838: ST_TO_ADDR
65839: LD_INT 4
65841: PUSH
65842: FOR_TO
65843: IFFALSE 65864
// SetSkill ( i , j , 10 ) ;
65845: LD_VAR 0 2
65849: PPUSH
65850: LD_VAR 0 3
65854: PPUSH
65855: LD_INT 10
65857: PPUSH
65858: CALL_OW 237
65862: GO 65842
65864: POP
65865: POP
// end ;
65866: GO 65815
65868: POP
65869: POP
// end ;
65870: LD_VAR 0 1
65874: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
65875: LD_INT 0
65877: PPUSH
65878: PPUSH
65879: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
65880: LD_ADDR_VAR 0 2
65884: PUSH
65885: LD_INT 22
65887: PUSH
65888: LD_OWVAR 2
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 21
65899: PUSH
65900: LD_INT 1
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PPUSH
65911: CALL_OW 69
65915: PUSH
65916: FOR_IN
65917: IFFALSE 65958
// begin for j := 1 to 4 do
65919: LD_ADDR_VAR 0 3
65923: PUSH
65924: DOUBLE
65925: LD_INT 1
65927: DEC
65928: ST_TO_ADDR
65929: LD_INT 4
65931: PUSH
65932: FOR_TO
65933: IFFALSE 65954
// SetSkill ( i , j , 10 ) ;
65935: LD_VAR 0 2
65939: PPUSH
65940: LD_VAR 0 3
65944: PPUSH
65945: LD_INT 10
65947: PPUSH
65948: CALL_OW 237
65952: GO 65932
65954: POP
65955: POP
// end ;
65956: GO 65916
65958: POP
65959: POP
// end ;
65960: LD_VAR 0 1
65964: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
65965: LD_INT 0
65967: PPUSH
// uc_side := your_side ;
65968: LD_ADDR_OWVAR 20
65972: PUSH
65973: LD_OWVAR 2
65977: ST_TO_ADDR
// uc_nation := nation ;
65978: LD_ADDR_OWVAR 21
65982: PUSH
65983: LD_VAR 0 1
65987: ST_TO_ADDR
// InitHc ;
65988: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
65992: LD_INT 0
65994: PPUSH
65995: LD_VAR 0 2
65999: PPUSH
66000: LD_VAR 0 3
66004: PPUSH
66005: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
66009: LD_VAR 0 4
66013: PPUSH
66014: LD_VAR 0 5
66018: PPUSH
66019: CALL_OW 428
66023: PUSH
66024: LD_INT 0
66026: EQUAL
66027: IFFALSE 66051
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
66029: CALL_OW 44
66033: PPUSH
66034: LD_VAR 0 4
66038: PPUSH
66039: LD_VAR 0 5
66043: PPUSH
66044: LD_INT 1
66046: PPUSH
66047: CALL_OW 48
// end ;
66051: LD_VAR 0 6
66055: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
66056: LD_INT 0
66058: PPUSH
66059: PPUSH
// uc_side := your_side ;
66060: LD_ADDR_OWVAR 20
66064: PUSH
66065: LD_OWVAR 2
66069: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
66070: LD_VAR 0 1
66074: PUSH
66075: LD_INT 1
66077: PUSH
66078: LD_INT 2
66080: PUSH
66081: LD_INT 3
66083: PUSH
66084: LD_INT 4
66086: PUSH
66087: LD_INT 5
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: IN
66097: IFFALSE 66109
// uc_nation := nation_american else
66099: LD_ADDR_OWVAR 21
66103: PUSH
66104: LD_INT 1
66106: ST_TO_ADDR
66107: GO 66152
// if chassis in [ 11 , 12 , 13 , 14 ] then
66109: LD_VAR 0 1
66113: PUSH
66114: LD_INT 11
66116: PUSH
66117: LD_INT 12
66119: PUSH
66120: LD_INT 13
66122: PUSH
66123: LD_INT 14
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: IN
66132: IFFALSE 66144
// uc_nation := nation_arabian else
66134: LD_ADDR_OWVAR 21
66138: PUSH
66139: LD_INT 2
66141: ST_TO_ADDR
66142: GO 66152
// uc_nation := nation_russian ;
66144: LD_ADDR_OWVAR 21
66148: PUSH
66149: LD_INT 3
66151: ST_TO_ADDR
// vc_chassis := chassis ;
66152: LD_ADDR_OWVAR 37
66156: PUSH
66157: LD_VAR 0 1
66161: ST_TO_ADDR
// vc_engine := engine ;
66162: LD_ADDR_OWVAR 39
66166: PUSH
66167: LD_VAR 0 2
66171: ST_TO_ADDR
// vc_control := control ;
66172: LD_ADDR_OWVAR 38
66176: PUSH
66177: LD_VAR 0 3
66181: ST_TO_ADDR
// vc_weapon := weapon ;
66182: LD_ADDR_OWVAR 40
66186: PUSH
66187: LD_VAR 0 4
66191: ST_TO_ADDR
// un := CreateVehicle ;
66192: LD_ADDR_VAR 0 8
66196: PUSH
66197: CALL_OW 45
66201: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
66202: LD_VAR 0 8
66206: PPUSH
66207: LD_INT 0
66209: PPUSH
66210: LD_INT 5
66212: PPUSH
66213: CALL_OW 12
66217: PPUSH
66218: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
66222: LD_VAR 0 8
66226: PPUSH
66227: LD_VAR 0 5
66231: PPUSH
66232: LD_VAR 0 6
66236: PPUSH
66237: LD_INT 1
66239: PPUSH
66240: CALL_OW 48
// end ;
66244: LD_VAR 0 7
66248: RET
// export hInvincible ; every 1 do
66249: GO 66251
66251: DISABLE
// hInvincible := [ ] ;
66252: LD_ADDR_EXP 97
66256: PUSH
66257: EMPTY
66258: ST_TO_ADDR
66259: END
// every 10 do var i ;
66260: GO 66262
66262: DISABLE
66263: LD_INT 0
66265: PPUSH
// begin enable ;
66266: ENABLE
// if not hInvincible then
66267: LD_EXP 97
66271: NOT
66272: IFFALSE 66276
// exit ;
66274: GO 66320
// for i in hInvincible do
66276: LD_ADDR_VAR 0 1
66280: PUSH
66281: LD_EXP 97
66285: PUSH
66286: FOR_IN
66287: IFFALSE 66318
// if GetLives ( i ) < 1000 then
66289: LD_VAR 0 1
66293: PPUSH
66294: CALL_OW 256
66298: PUSH
66299: LD_INT 1000
66301: LESS
66302: IFFALSE 66316
// SetLives ( i , 1000 ) ;
66304: LD_VAR 0 1
66308: PPUSH
66309: LD_INT 1000
66311: PPUSH
66312: CALL_OW 234
66316: GO 66286
66318: POP
66319: POP
// end ;
66320: PPOPN 1
66322: END
// export function hHackInvincible ; var i ; begin
66323: LD_INT 0
66325: PPUSH
66326: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
66327: LD_ADDR_VAR 0 2
66331: PUSH
66332: LD_INT 2
66334: PUSH
66335: LD_INT 21
66337: PUSH
66338: LD_INT 1
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 21
66347: PUSH
66348: LD_INT 2
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: LIST
66359: PPUSH
66360: CALL_OW 69
66364: PUSH
66365: FOR_IN
66366: IFFALSE 66427
// if IsSelected ( i ) then
66368: LD_VAR 0 2
66372: PPUSH
66373: CALL_OW 306
66377: IFFALSE 66425
// begin if i in hInvincible then
66379: LD_VAR 0 2
66383: PUSH
66384: LD_EXP 97
66388: IN
66389: IFFALSE 66409
// hInvincible := hInvincible diff i else
66391: LD_ADDR_EXP 97
66395: PUSH
66396: LD_EXP 97
66400: PUSH
66401: LD_VAR 0 2
66405: DIFF
66406: ST_TO_ADDR
66407: GO 66425
// hInvincible := hInvincible union i ;
66409: LD_ADDR_EXP 97
66413: PUSH
66414: LD_EXP 97
66418: PUSH
66419: LD_VAR 0 2
66423: UNION
66424: ST_TO_ADDR
// end ;
66425: GO 66365
66427: POP
66428: POP
// end ;
66429: LD_VAR 0 1
66433: RET
// export function hHackInvisible ; var i , j ; begin
66434: LD_INT 0
66436: PPUSH
66437: PPUSH
66438: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
66439: LD_ADDR_VAR 0 2
66443: PUSH
66444: LD_INT 21
66446: PUSH
66447: LD_INT 1
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PPUSH
66454: CALL_OW 69
66458: PUSH
66459: FOR_IN
66460: IFFALSE 66484
// if IsSelected ( i ) then
66462: LD_VAR 0 2
66466: PPUSH
66467: CALL_OW 306
66471: IFFALSE 66482
// ComForceInvisible ( i ) ;
66473: LD_VAR 0 2
66477: PPUSH
66478: CALL_OW 496
66482: GO 66459
66484: POP
66485: POP
// end ;
66486: LD_VAR 0 1
66490: RET
// export function hHackChangeYourSide ; begin
66491: LD_INT 0
66493: PPUSH
// if your_side = 8 then
66494: LD_OWVAR 2
66498: PUSH
66499: LD_INT 8
66501: EQUAL
66502: IFFALSE 66514
// your_side := 0 else
66504: LD_ADDR_OWVAR 2
66508: PUSH
66509: LD_INT 0
66511: ST_TO_ADDR
66512: GO 66528
// your_side := your_side + 1 ;
66514: LD_ADDR_OWVAR 2
66518: PUSH
66519: LD_OWVAR 2
66523: PUSH
66524: LD_INT 1
66526: PLUS
66527: ST_TO_ADDR
// end ;
66528: LD_VAR 0 1
66532: RET
// export function hHackChangeUnitSide ; var i , j ; begin
66533: LD_INT 0
66535: PPUSH
66536: PPUSH
66537: PPUSH
// for i in all_units do
66538: LD_ADDR_VAR 0 2
66542: PUSH
66543: LD_OWVAR 3
66547: PUSH
66548: FOR_IN
66549: IFFALSE 66627
// if IsSelected ( i ) then
66551: LD_VAR 0 2
66555: PPUSH
66556: CALL_OW 306
66560: IFFALSE 66625
// begin j := GetSide ( i ) ;
66562: LD_ADDR_VAR 0 3
66566: PUSH
66567: LD_VAR 0 2
66571: PPUSH
66572: CALL_OW 255
66576: ST_TO_ADDR
// if j = 8 then
66577: LD_VAR 0 3
66581: PUSH
66582: LD_INT 8
66584: EQUAL
66585: IFFALSE 66597
// j := 0 else
66587: LD_ADDR_VAR 0 3
66591: PUSH
66592: LD_INT 0
66594: ST_TO_ADDR
66595: GO 66611
// j := j + 1 ;
66597: LD_ADDR_VAR 0 3
66601: PUSH
66602: LD_VAR 0 3
66606: PUSH
66607: LD_INT 1
66609: PLUS
66610: ST_TO_ADDR
// SetSide ( i , j ) ;
66611: LD_VAR 0 2
66615: PPUSH
66616: LD_VAR 0 3
66620: PPUSH
66621: CALL_OW 235
// end ;
66625: GO 66548
66627: POP
66628: POP
// end ;
66629: LD_VAR 0 1
66633: RET
// export function hHackFog ; begin
66634: LD_INT 0
66636: PPUSH
// FogOff ( true ) ;
66637: LD_INT 1
66639: PPUSH
66640: CALL_OW 344
// end ;
66644: LD_VAR 0 1
66648: RET
// export function hHackTeleport ( unit , x , y ) ; begin
66649: LD_INT 0
66651: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
66652: LD_VAR 0 1
66656: PPUSH
66657: LD_VAR 0 2
66661: PPUSH
66662: LD_VAR 0 3
66666: PPUSH
66667: LD_INT 1
66669: PPUSH
66670: LD_INT 1
66672: PPUSH
66673: CALL_OW 483
// CenterOnXY ( x , y ) ;
66677: LD_VAR 0 2
66681: PPUSH
66682: LD_VAR 0 3
66686: PPUSH
66687: CALL_OW 84
// end ;
66691: LD_VAR 0 4
66695: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
66696: LD_INT 0
66698: PPUSH
66699: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
66700: LD_VAR 0 1
66704: NOT
66705: PUSH
66706: LD_VAR 0 2
66710: PPUSH
66711: LD_VAR 0 3
66715: PPUSH
66716: CALL_OW 488
66720: NOT
66721: OR
66722: PUSH
66723: LD_VAR 0 1
66727: PPUSH
66728: CALL_OW 266
66732: PUSH
66733: LD_INT 3
66735: NONEQUAL
66736: PUSH
66737: LD_VAR 0 1
66741: PPUSH
66742: CALL_OW 247
66746: PUSH
66747: LD_INT 1
66749: EQUAL
66750: NOT
66751: AND
66752: OR
66753: IFFALSE 66757
// exit ;
66755: GO 66906
// if GetType ( factory ) = unit_human then
66757: LD_VAR 0 1
66761: PPUSH
66762: CALL_OW 247
66766: PUSH
66767: LD_INT 1
66769: EQUAL
66770: IFFALSE 66787
// factory := IsInUnit ( factory ) ;
66772: LD_ADDR_VAR 0 1
66776: PUSH
66777: LD_VAR 0 1
66781: PPUSH
66782: CALL_OW 310
66786: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
66787: LD_VAR 0 1
66791: PPUSH
66792: CALL_OW 266
66796: PUSH
66797: LD_INT 3
66799: NONEQUAL
66800: IFFALSE 66804
// exit ;
66802: GO 66906
// if HexInfo ( x , y ) = factory then
66804: LD_VAR 0 2
66808: PPUSH
66809: LD_VAR 0 3
66813: PPUSH
66814: CALL_OW 428
66818: PUSH
66819: LD_VAR 0 1
66823: EQUAL
66824: IFFALSE 66851
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
66826: LD_ADDR_EXP 98
66830: PUSH
66831: LD_EXP 98
66835: PPUSH
66836: LD_VAR 0 1
66840: PPUSH
66841: LD_INT 0
66843: PPUSH
66844: CALL_OW 1
66848: ST_TO_ADDR
66849: GO 66902
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
66851: LD_ADDR_EXP 98
66855: PUSH
66856: LD_EXP 98
66860: PPUSH
66861: LD_VAR 0 1
66865: PPUSH
66866: LD_VAR 0 1
66870: PPUSH
66871: CALL_OW 255
66875: PUSH
66876: LD_VAR 0 1
66880: PUSH
66881: LD_VAR 0 2
66885: PUSH
66886: LD_VAR 0 3
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: PPUSH
66897: CALL_OW 1
66901: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66902: CALL 66911 0 0
// end ;
66906: LD_VAR 0 4
66910: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
66911: LD_INT 0
66913: PPUSH
66914: PPUSH
66915: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
66916: LD_STRING resetFactoryWaypoint();
66918: PPUSH
66919: CALL_OW 559
// if factoryWaypoints then
66923: LD_EXP 98
66927: IFFALSE 67053
// begin list := PrepareArray ( factoryWaypoints ) ;
66929: LD_ADDR_VAR 0 3
66933: PUSH
66934: LD_EXP 98
66938: PPUSH
66939: CALL 44256 0 1
66943: ST_TO_ADDR
// for i := 1 to list do
66944: LD_ADDR_VAR 0 2
66948: PUSH
66949: DOUBLE
66950: LD_INT 1
66952: DEC
66953: ST_TO_ADDR
66954: LD_VAR 0 3
66958: PUSH
66959: FOR_TO
66960: IFFALSE 67051
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66962: LD_STRING setFactoryWaypointXY(
66964: PUSH
66965: LD_VAR 0 3
66969: PUSH
66970: LD_VAR 0 2
66974: ARRAY
66975: PUSH
66976: LD_INT 1
66978: ARRAY
66979: STR
66980: PUSH
66981: LD_STRING ,
66983: STR
66984: PUSH
66985: LD_VAR 0 3
66989: PUSH
66990: LD_VAR 0 2
66994: ARRAY
66995: PUSH
66996: LD_INT 2
66998: ARRAY
66999: STR
67000: PUSH
67001: LD_STRING ,
67003: STR
67004: PUSH
67005: LD_VAR 0 3
67009: PUSH
67010: LD_VAR 0 2
67014: ARRAY
67015: PUSH
67016: LD_INT 3
67018: ARRAY
67019: STR
67020: PUSH
67021: LD_STRING ,
67023: STR
67024: PUSH
67025: LD_VAR 0 3
67029: PUSH
67030: LD_VAR 0 2
67034: ARRAY
67035: PUSH
67036: LD_INT 4
67038: ARRAY
67039: STR
67040: PUSH
67041: LD_STRING )
67043: STR
67044: PPUSH
67045: CALL_OW 559
67049: GO 66959
67051: POP
67052: POP
// end ; end ;
67053: LD_VAR 0 1
67057: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
67058: LD_INT 0
67060: PPUSH
// if HexInfo ( x , y ) = warehouse then
67061: LD_VAR 0 2
67065: PPUSH
67066: LD_VAR 0 3
67070: PPUSH
67071: CALL_OW 428
67075: PUSH
67076: LD_VAR 0 1
67080: EQUAL
67081: IFFALSE 67108
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
67083: LD_ADDR_EXP 99
67087: PUSH
67088: LD_EXP 99
67092: PPUSH
67093: LD_VAR 0 1
67097: PPUSH
67098: LD_INT 0
67100: PPUSH
67101: CALL_OW 1
67105: ST_TO_ADDR
67106: GO 67159
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
67108: LD_ADDR_EXP 99
67112: PUSH
67113: LD_EXP 99
67117: PPUSH
67118: LD_VAR 0 1
67122: PPUSH
67123: LD_VAR 0 1
67127: PPUSH
67128: CALL_OW 255
67132: PUSH
67133: LD_VAR 0 1
67137: PUSH
67138: LD_VAR 0 2
67142: PUSH
67143: LD_VAR 0 3
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: PPUSH
67154: CALL_OW 1
67158: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
67159: CALL 67168 0 0
// end ;
67163: LD_VAR 0 4
67167: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
67168: LD_INT 0
67170: PPUSH
67171: PPUSH
67172: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
67173: LD_STRING resetWarehouseGatheringPoints();
67175: PPUSH
67176: CALL_OW 559
// if warehouseGatheringPoints then
67180: LD_EXP 99
67184: IFFALSE 67310
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
67186: LD_ADDR_VAR 0 3
67190: PUSH
67191: LD_EXP 99
67195: PPUSH
67196: CALL 44256 0 1
67200: ST_TO_ADDR
// for i := 1 to list do
67201: LD_ADDR_VAR 0 2
67205: PUSH
67206: DOUBLE
67207: LD_INT 1
67209: DEC
67210: ST_TO_ADDR
67211: LD_VAR 0 3
67215: PUSH
67216: FOR_TO
67217: IFFALSE 67308
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67219: LD_STRING setWarehouseGatheringPointXY(
67221: PUSH
67222: LD_VAR 0 3
67226: PUSH
67227: LD_VAR 0 2
67231: ARRAY
67232: PUSH
67233: LD_INT 1
67235: ARRAY
67236: STR
67237: PUSH
67238: LD_STRING ,
67240: STR
67241: PUSH
67242: LD_VAR 0 3
67246: PUSH
67247: LD_VAR 0 2
67251: ARRAY
67252: PUSH
67253: LD_INT 2
67255: ARRAY
67256: STR
67257: PUSH
67258: LD_STRING ,
67260: STR
67261: PUSH
67262: LD_VAR 0 3
67266: PUSH
67267: LD_VAR 0 2
67271: ARRAY
67272: PUSH
67273: LD_INT 3
67275: ARRAY
67276: STR
67277: PUSH
67278: LD_STRING ,
67280: STR
67281: PUSH
67282: LD_VAR 0 3
67286: PUSH
67287: LD_VAR 0 2
67291: ARRAY
67292: PUSH
67293: LD_INT 4
67295: ARRAY
67296: STR
67297: PUSH
67298: LD_STRING )
67300: STR
67301: PPUSH
67302: CALL_OW 559
67306: GO 67216
67308: POP
67309: POP
// end ; end ;
67310: LD_VAR 0 1
67314: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
67315: LD_EXP 99
67319: IFFALSE 68004
67321: GO 67323
67323: DISABLE
67324: LD_INT 0
67326: PPUSH
67327: PPUSH
67328: PPUSH
67329: PPUSH
67330: PPUSH
67331: PPUSH
67332: PPUSH
67333: PPUSH
67334: PPUSH
// begin enable ;
67335: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
67336: LD_ADDR_VAR 0 3
67340: PUSH
67341: LD_EXP 99
67345: PPUSH
67346: CALL 44256 0 1
67350: ST_TO_ADDR
// if not list then
67351: LD_VAR 0 3
67355: NOT
67356: IFFALSE 67360
// exit ;
67358: GO 68004
// for i := 1 to list do
67360: LD_ADDR_VAR 0 1
67364: PUSH
67365: DOUBLE
67366: LD_INT 1
67368: DEC
67369: ST_TO_ADDR
67370: LD_VAR 0 3
67374: PUSH
67375: FOR_TO
67376: IFFALSE 68002
// begin depot := list [ i ] [ 2 ] ;
67378: LD_ADDR_VAR 0 8
67382: PUSH
67383: LD_VAR 0 3
67387: PUSH
67388: LD_VAR 0 1
67392: ARRAY
67393: PUSH
67394: LD_INT 2
67396: ARRAY
67397: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
67398: LD_ADDR_VAR 0 5
67402: PUSH
67403: LD_VAR 0 3
67407: PUSH
67408: LD_VAR 0 1
67412: ARRAY
67413: PUSH
67414: LD_INT 1
67416: ARRAY
67417: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
67418: LD_VAR 0 8
67422: PPUSH
67423: CALL_OW 301
67427: PUSH
67428: LD_VAR 0 5
67432: PUSH
67433: LD_VAR 0 8
67437: PPUSH
67438: CALL_OW 255
67442: NONEQUAL
67443: OR
67444: IFFALSE 67473
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
67446: LD_ADDR_EXP 99
67450: PUSH
67451: LD_EXP 99
67455: PPUSH
67456: LD_VAR 0 8
67460: PPUSH
67461: LD_INT 0
67463: PPUSH
67464: CALL_OW 1
67468: ST_TO_ADDR
// exit ;
67469: POP
67470: POP
67471: GO 68004
// end ; x := list [ i ] [ 3 ] ;
67473: LD_ADDR_VAR 0 6
67477: PUSH
67478: LD_VAR 0 3
67482: PUSH
67483: LD_VAR 0 1
67487: ARRAY
67488: PUSH
67489: LD_INT 3
67491: ARRAY
67492: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
67493: LD_ADDR_VAR 0 7
67497: PUSH
67498: LD_VAR 0 3
67502: PUSH
67503: LD_VAR 0 1
67507: ARRAY
67508: PUSH
67509: LD_INT 4
67511: ARRAY
67512: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
67513: LD_ADDR_VAR 0 9
67517: PUSH
67518: LD_VAR 0 6
67522: PPUSH
67523: LD_VAR 0 7
67527: PPUSH
67528: LD_INT 16
67530: PPUSH
67531: CALL 42840 0 3
67535: ST_TO_ADDR
// if not cratesNearbyPoint then
67536: LD_VAR 0 9
67540: NOT
67541: IFFALSE 67547
// exit ;
67543: POP
67544: POP
67545: GO 68004
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
67547: LD_ADDR_VAR 0 4
67551: PUSH
67552: LD_INT 22
67554: PUSH
67555: LD_VAR 0 5
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 3
67566: PUSH
67567: LD_INT 60
67569: PUSH
67570: EMPTY
67571: LIST
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 91
67579: PUSH
67580: LD_VAR 0 8
67584: PUSH
67585: LD_INT 6
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 2
67595: PUSH
67596: LD_INT 25
67598: PUSH
67599: LD_INT 2
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 25
67608: PUSH
67609: LD_INT 16
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: LIST
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: PPUSH
67627: CALL_OW 69
67631: PUSH
67632: LD_VAR 0 8
67636: PPUSH
67637: CALL_OW 313
67641: PPUSH
67642: LD_INT 3
67644: PUSH
67645: LD_INT 60
67647: PUSH
67648: EMPTY
67649: LIST
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 2
67657: PUSH
67658: LD_INT 25
67660: PUSH
67661: LD_INT 2
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 25
67670: PUSH
67671: LD_INT 16
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: LIST
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PPUSH
67687: CALL_OW 72
67691: UNION
67692: ST_TO_ADDR
// if tmp then
67693: LD_VAR 0 4
67697: IFFALSE 67777
// begin tmp := ShrinkArray ( tmp , 3 ) ;
67699: LD_ADDR_VAR 0 4
67703: PUSH
67704: LD_VAR 0 4
67708: PPUSH
67709: LD_INT 3
67711: PPUSH
67712: CALL 40809 0 2
67716: ST_TO_ADDR
// for j in tmp do
67717: LD_ADDR_VAR 0 2
67721: PUSH
67722: LD_VAR 0 4
67726: PUSH
67727: FOR_IN
67728: IFFALSE 67771
// begin if IsInUnit ( j ) then
67730: LD_VAR 0 2
67734: PPUSH
67735: CALL_OW 310
67739: IFFALSE 67750
// ComExit ( j ) ;
67741: LD_VAR 0 2
67745: PPUSH
67746: CALL 40892 0 1
// AddComCollect ( j , x , y ) ;
67750: LD_VAR 0 2
67754: PPUSH
67755: LD_VAR 0 6
67759: PPUSH
67760: LD_VAR 0 7
67764: PPUSH
67765: CALL_OW 177
// end ;
67769: GO 67727
67771: POP
67772: POP
// exit ;
67773: POP
67774: POP
67775: GO 68004
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
67777: LD_ADDR_VAR 0 4
67781: PUSH
67782: LD_INT 22
67784: PUSH
67785: LD_VAR 0 5
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 91
67796: PUSH
67797: LD_VAR 0 8
67801: PUSH
67802: LD_INT 8
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 2
67812: PUSH
67813: LD_INT 34
67815: PUSH
67816: LD_INT 12
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 34
67825: PUSH
67826: LD_INT 51
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 34
67835: PUSH
67836: LD_INT 32
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 34
67845: PUSH
67846: LD_INT 89
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: LIST
67864: PPUSH
67865: CALL_OW 69
67869: ST_TO_ADDR
// if tmp then
67870: LD_VAR 0 4
67874: IFFALSE 68000
// begin for j in tmp do
67876: LD_ADDR_VAR 0 2
67880: PUSH
67881: LD_VAR 0 4
67885: PUSH
67886: FOR_IN
67887: IFFALSE 67998
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
67889: LD_VAR 0 2
67893: PPUSH
67894: CALL_OW 262
67898: PUSH
67899: LD_INT 3
67901: EQUAL
67902: PUSH
67903: LD_VAR 0 2
67907: PPUSH
67908: CALL_OW 261
67912: PUSH
67913: LD_INT 20
67915: GREATER
67916: OR
67917: PUSH
67918: LD_VAR 0 2
67922: PPUSH
67923: CALL_OW 314
67927: NOT
67928: AND
67929: PUSH
67930: LD_VAR 0 2
67934: PPUSH
67935: CALL_OW 263
67939: PUSH
67940: LD_INT 1
67942: NONEQUAL
67943: PUSH
67944: LD_VAR 0 2
67948: PPUSH
67949: CALL_OW 311
67953: OR
67954: AND
67955: IFFALSE 67996
// begin ComCollect ( j , x , y ) ;
67957: LD_VAR 0 2
67961: PPUSH
67962: LD_VAR 0 6
67966: PPUSH
67967: LD_VAR 0 7
67971: PPUSH
67972: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
67976: LD_VAR 0 2
67980: PPUSH
67981: LD_VAR 0 8
67985: PPUSH
67986: CALL_OW 172
// exit ;
67990: POP
67991: POP
67992: POP
67993: POP
67994: GO 68004
// end ;
67996: GO 67886
67998: POP
67999: POP
// end ; end ;
68000: GO 67375
68002: POP
68003: POP
// end ; end_of_file
68004: PPOPN 9
68006: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68007: LD_VAR 0 1
68011: PUSH
68012: LD_INT 200
68014: DOUBLE
68015: GREATEREQUAL
68016: IFFALSE 68024
68018: LD_INT 299
68020: DOUBLE
68021: LESSEQUAL
68022: IFTRUE 68026
68024: GO 68058
68026: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68027: LD_VAR 0 1
68031: PPUSH
68032: LD_VAR 0 2
68036: PPUSH
68037: LD_VAR 0 3
68041: PPUSH
68042: LD_VAR 0 4
68046: PPUSH
68047: LD_VAR 0 5
68051: PPUSH
68052: CALL 68619 0 5
68056: GO 68135
68058: LD_INT 300
68060: DOUBLE
68061: GREATEREQUAL
68062: IFFALSE 68070
68064: LD_INT 399
68066: DOUBLE
68067: LESSEQUAL
68068: IFTRUE 68072
68070: GO 68134
68072: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68073: LD_VAR 0 1
68077: PPUSH
68078: LD_VAR 0 2
68082: PPUSH
68083: LD_VAR 0 3
68087: PPUSH
68088: LD_VAR 0 4
68092: PPUSH
68093: LD_VAR 0 5
68097: PPUSH
68098: LD_VAR 0 6
68102: PPUSH
68103: LD_VAR 0 7
68107: PPUSH
68108: LD_VAR 0 8
68112: PPUSH
68113: LD_VAR 0 9
68117: PPUSH
68118: LD_VAR 0 10
68122: PPUSH
68123: LD_VAR 0 11
68127: PPUSH
68128: CALL 64708 0 11
68132: GO 68135
68134: POP
// end ;
68135: PPOPN 11
68137: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68138: LD_VAR 0 1
68142: PPUSH
68143: LD_VAR 0 2
68147: PPUSH
68148: LD_VAR 0 3
68152: PPUSH
68153: LD_VAR 0 4
68157: PPUSH
68158: LD_VAR 0 5
68162: PPUSH
68163: CALL 68282 0 5
// end ; end_of_file
68167: PPOPN 5
68169: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
68170: LD_INT 0
68172: PPUSH
68173: PPUSH
68174: PPUSH
68175: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
68176: LD_VAR 0 1
68180: PPUSH
68181: CALL_OW 264
68185: PUSH
68186: LD_INT 91
68188: EQUAL
68189: IFFALSE 68261
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
68191: LD_INT 68
68193: PPUSH
68194: LD_VAR 0 1
68198: PPUSH
68199: CALL_OW 255
68203: PPUSH
68204: CALL_OW 321
68208: PUSH
68209: LD_INT 2
68211: EQUAL
68212: IFFALSE 68224
// eff := 70 else
68214: LD_ADDR_VAR 0 4
68218: PUSH
68219: LD_INT 70
68221: ST_TO_ADDR
68222: GO 68232
// eff := 30 ;
68224: LD_ADDR_VAR 0 4
68228: PUSH
68229: LD_INT 30
68231: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
68232: LD_VAR 0 1
68236: PPUSH
68237: CALL_OW 250
68241: PPUSH
68242: LD_VAR 0 1
68246: PPUSH
68247: CALL_OW 251
68251: PPUSH
68252: LD_VAR 0 4
68256: PPUSH
68257: CALL_OW 495
// end ; end ;
68261: LD_VAR 0 2
68265: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
68266: LD_INT 0
68268: PPUSH
// end ;
68269: LD_VAR 0 4
68273: RET
// export function SOS_Command ( cmd ) ; begin
68274: LD_INT 0
68276: PPUSH
// end ;
68277: LD_VAR 0 2
68281: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
68282: LD_INT 0
68284: PPUSH
// end ;
68285: LD_VAR 0 6
68289: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver ; begin
68290: LD_INT 0
68292: PPUSH
68293: PPUSH
68294: PPUSH
// if not vehicle or not factory then
68295: LD_VAR 0 1
68299: NOT
68300: PUSH
68301: LD_VAR 0 2
68305: NOT
68306: OR
68307: IFFALSE 68311
// exit ;
68309: GO 68614
// if factoryWaypoints >= factory then
68311: LD_EXP 98
68315: PUSH
68316: LD_VAR 0 2
68320: GREATEREQUAL
68321: IFFALSE 68614
// if factoryWaypoints [ factory ] then
68323: LD_EXP 98
68327: PUSH
68328: LD_VAR 0 2
68332: ARRAY
68333: IFFALSE 68614
// begin if GetControl ( vehicle ) = control_manual then
68335: LD_VAR 0 1
68339: PPUSH
68340: CALL_OW 263
68344: PUSH
68345: LD_INT 1
68347: EQUAL
68348: IFFALSE 68501
// begin driver := IsDrivenBy ( vehicle ) ;
68350: LD_ADDR_VAR 0 5
68354: PUSH
68355: LD_VAR 0 1
68359: PPUSH
68360: CALL_OW 311
68364: ST_TO_ADDR
// tag := GetTag ( driver ) ;
68365: LD_ADDR_VAR 0 4
68369: PUSH
68370: LD_VAR 0 5
68374: PPUSH
68375: CALL_OW 110
68379: ST_TO_ADDR
// if tag = tDriver then
68380: LD_VAR 0 4
68384: PUSH
68385: LD_INT 501
68387: EQUAL
68388: IFFALSE 68392
// exit ;
68390: GO 68614
// if not HasTask ( driver ) then
68392: LD_VAR 0 5
68396: PPUSH
68397: CALL_OW 314
68401: NOT
68402: IFFALSE 68499
// begin SetTag ( driver , tDriver ) ;
68404: LD_VAR 0 5
68408: PPUSH
68409: LD_INT 501
68411: PPUSH
68412: CALL_OW 109
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68416: LD_VAR 0 5
68420: PPUSH
68421: LD_EXP 98
68425: PUSH
68426: LD_VAR 0 2
68430: ARRAY
68431: PUSH
68432: LD_INT 3
68434: ARRAY
68435: PPUSH
68436: LD_EXP 98
68440: PUSH
68441: LD_VAR 0 2
68445: ARRAY
68446: PUSH
68447: LD_INT 4
68449: ARRAY
68450: PPUSH
68451: CALL_OW 111
// AddComExitVehicle ( driver ) ;
68455: LD_VAR 0 5
68459: PPUSH
68460: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
68464: LD_VAR 0 5
68468: PPUSH
68469: LD_VAR 0 2
68473: PPUSH
68474: CALL_OW 180
// wait ( 0 0$1 ) ;
68478: LD_INT 35
68480: PPUSH
68481: CALL_OW 67
// SetTag ( driver , tag ) ;
68485: LD_VAR 0 5
68489: PPUSH
68490: LD_VAR 0 4
68494: PPUSH
68495: CALL_OW 109
// end ; end else
68499: GO 68614
// if GetControl ( vehicle ) = control_remote then
68501: LD_VAR 0 1
68505: PPUSH
68506: CALL_OW 263
68510: PUSH
68511: LD_INT 2
68513: EQUAL
68514: IFFALSE 68575
// begin wait ( 0 0$2 ) ;
68516: LD_INT 70
68518: PPUSH
68519: CALL_OW 67
// if Connect ( vehicle ) then
68523: LD_VAR 0 1
68527: PPUSH
68528: CALL 11111 0 1
68532: IFFALSE 68573
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68534: LD_VAR 0 1
68538: PPUSH
68539: LD_EXP 98
68543: PUSH
68544: LD_VAR 0 2
68548: ARRAY
68549: PUSH
68550: LD_INT 3
68552: ARRAY
68553: PPUSH
68554: LD_EXP 98
68558: PUSH
68559: LD_VAR 0 2
68563: ARRAY
68564: PUSH
68565: LD_INT 4
68567: ARRAY
68568: PPUSH
68569: CALL_OW 171
// end else
68573: GO 68614
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68575: LD_VAR 0 1
68579: PPUSH
68580: LD_EXP 98
68584: PUSH
68585: LD_VAR 0 2
68589: ARRAY
68590: PUSH
68591: LD_INT 3
68593: ARRAY
68594: PPUSH
68595: LD_EXP 98
68599: PUSH
68600: LD_VAR 0 2
68604: ARRAY
68605: PUSH
68606: LD_INT 4
68608: ARRAY
68609: PPUSH
68610: CALL_OW 171
// end ; end ;
68614: LD_VAR 0 3
68618: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
68619: LD_INT 0
68621: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
68622: LD_VAR 0 1
68626: PUSH
68627: LD_INT 250
68629: EQUAL
68630: PUSH
68631: LD_VAR 0 2
68635: PPUSH
68636: CALL_OW 264
68640: PUSH
68641: LD_INT 81
68643: EQUAL
68644: AND
68645: IFFALSE 68666
// MinerPlaceMine ( unit , x , y ) ;
68647: LD_VAR 0 2
68651: PPUSH
68652: LD_VAR 0 4
68656: PPUSH
68657: LD_VAR 0 5
68661: PPUSH
68662: CALL 71656 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
68666: LD_VAR 0 1
68670: PUSH
68671: LD_INT 251
68673: EQUAL
68674: PUSH
68675: LD_VAR 0 2
68679: PPUSH
68680: CALL_OW 264
68684: PUSH
68685: LD_INT 81
68687: EQUAL
68688: AND
68689: IFFALSE 68710
// MinerDetonateMine ( unit , x , y ) ;
68691: LD_VAR 0 2
68695: PPUSH
68696: LD_VAR 0 4
68700: PPUSH
68701: LD_VAR 0 5
68705: PPUSH
68706: CALL 71931 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
68710: LD_VAR 0 1
68714: PUSH
68715: LD_INT 252
68717: EQUAL
68718: PUSH
68719: LD_VAR 0 2
68723: PPUSH
68724: CALL_OW 264
68728: PUSH
68729: LD_INT 81
68731: EQUAL
68732: AND
68733: IFFALSE 68754
// MinerCreateMinefield ( unit , x , y ) ;
68735: LD_VAR 0 2
68739: PPUSH
68740: LD_VAR 0 4
68744: PPUSH
68745: LD_VAR 0 5
68749: PPUSH
68750: CALL 72348 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
68754: LD_VAR 0 1
68758: PUSH
68759: LD_INT 253
68761: EQUAL
68762: PUSH
68763: LD_VAR 0 2
68767: PPUSH
68768: CALL_OW 257
68772: PUSH
68773: LD_INT 5
68775: EQUAL
68776: AND
68777: IFFALSE 68798
// ComBinocular ( unit , x , y ) ;
68779: LD_VAR 0 2
68783: PPUSH
68784: LD_VAR 0 4
68788: PPUSH
68789: LD_VAR 0 5
68793: PPUSH
68794: CALL 72717 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
68798: LD_VAR 0 1
68802: PUSH
68803: LD_INT 254
68805: EQUAL
68806: PUSH
68807: LD_VAR 0 2
68811: PPUSH
68812: CALL_OW 264
68816: PUSH
68817: LD_INT 99
68819: EQUAL
68820: AND
68821: PUSH
68822: LD_VAR 0 3
68826: PPUSH
68827: CALL_OW 263
68831: PUSH
68832: LD_INT 3
68834: EQUAL
68835: AND
68836: IFFALSE 68852
// HackDestroyVehicle ( unit , selectedUnit ) ;
68838: LD_VAR 0 2
68842: PPUSH
68843: LD_VAR 0 3
68847: PPUSH
68848: CALL 71020 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
68852: LD_VAR 0 1
68856: PUSH
68857: LD_INT 255
68859: EQUAL
68860: PUSH
68861: LD_VAR 0 2
68865: PPUSH
68866: CALL_OW 264
68870: PUSH
68871: LD_INT 14
68873: PUSH
68874: LD_INT 53
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: IN
68881: AND
68882: PUSH
68883: LD_VAR 0 4
68887: PPUSH
68888: LD_VAR 0 5
68892: PPUSH
68893: CALL_OW 488
68897: AND
68898: IFFALSE 68922
// CutTreeXYR ( unit , x , y , 12 ) ;
68900: LD_VAR 0 2
68904: PPUSH
68905: LD_VAR 0 4
68909: PPUSH
68910: LD_VAR 0 5
68914: PPUSH
68915: LD_INT 12
68917: PPUSH
68918: CALL 69017 0 4
// if cmd = 256 then
68922: LD_VAR 0 1
68926: PUSH
68927: LD_INT 256
68929: EQUAL
68930: IFFALSE 68951
// SetFactoryWaypoint ( unit , x , y ) ;
68932: LD_VAR 0 2
68936: PPUSH
68937: LD_VAR 0 4
68941: PPUSH
68942: LD_VAR 0 5
68946: PPUSH
68947: CALL 66696 0 3
// if cmd = 257 then
68951: LD_VAR 0 1
68955: PUSH
68956: LD_INT 257
68958: EQUAL
68959: IFFALSE 68980
// SetWarehouseGatheringPoint ( unit , x , y ) ;
68961: LD_VAR 0 2
68965: PPUSH
68966: LD_VAR 0 4
68970: PPUSH
68971: LD_VAR 0 5
68975: PPUSH
68976: CALL 67058 0 3
// if cmd = 258 then
68980: LD_VAR 0 1
68984: PUSH
68985: LD_INT 258
68987: EQUAL
68988: IFFALSE 69012
// BurnTreeXYR ( unit , x , y , 8 ) ;
68990: LD_VAR 0 2
68994: PPUSH
68995: LD_VAR 0 4
68999: PPUSH
69000: LD_VAR 0 5
69004: PPUSH
69005: LD_INT 8
69007: PPUSH
69008: CALL 69411 0 4
// end ;
69012: LD_VAR 0 6
69016: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
69017: LD_INT 0
69019: PPUSH
69020: PPUSH
69021: PPUSH
69022: PPUSH
69023: PPUSH
69024: PPUSH
69025: PPUSH
69026: PPUSH
69027: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
69028: LD_VAR 0 1
69032: PPUSH
69033: CALL_OW 302
69037: NOT
69038: PUSH
69039: LD_VAR 0 2
69043: PPUSH
69044: LD_VAR 0 3
69048: PPUSH
69049: CALL_OW 488
69053: NOT
69054: OR
69055: PUSH
69056: LD_VAR 0 4
69060: NOT
69061: OR
69062: IFFALSE 69066
// exit ;
69064: GO 69406
// list := [ ] ;
69066: LD_ADDR_VAR 0 13
69070: PUSH
69071: EMPTY
69072: ST_TO_ADDR
// if x - r < 0 then
69073: LD_VAR 0 2
69077: PUSH
69078: LD_VAR 0 4
69082: MINUS
69083: PUSH
69084: LD_INT 0
69086: LESS
69087: IFFALSE 69099
// min_x := 0 else
69089: LD_ADDR_VAR 0 7
69093: PUSH
69094: LD_INT 0
69096: ST_TO_ADDR
69097: GO 69115
// min_x := x - r ;
69099: LD_ADDR_VAR 0 7
69103: PUSH
69104: LD_VAR 0 2
69108: PUSH
69109: LD_VAR 0 4
69113: MINUS
69114: ST_TO_ADDR
// if y - r < 0 then
69115: LD_VAR 0 3
69119: PUSH
69120: LD_VAR 0 4
69124: MINUS
69125: PUSH
69126: LD_INT 0
69128: LESS
69129: IFFALSE 69141
// min_y := 0 else
69131: LD_ADDR_VAR 0 8
69135: PUSH
69136: LD_INT 0
69138: ST_TO_ADDR
69139: GO 69157
// min_y := y - r ;
69141: LD_ADDR_VAR 0 8
69145: PUSH
69146: LD_VAR 0 3
69150: PUSH
69151: LD_VAR 0 4
69155: MINUS
69156: ST_TO_ADDR
// max_x := x + r ;
69157: LD_ADDR_VAR 0 9
69161: PUSH
69162: LD_VAR 0 2
69166: PUSH
69167: LD_VAR 0 4
69171: PLUS
69172: ST_TO_ADDR
// max_y := y + r ;
69173: LD_ADDR_VAR 0 10
69177: PUSH
69178: LD_VAR 0 3
69182: PUSH
69183: LD_VAR 0 4
69187: PLUS
69188: ST_TO_ADDR
// for _x = min_x to max_x do
69189: LD_ADDR_VAR 0 11
69193: PUSH
69194: DOUBLE
69195: LD_VAR 0 7
69199: DEC
69200: ST_TO_ADDR
69201: LD_VAR 0 9
69205: PUSH
69206: FOR_TO
69207: IFFALSE 69324
// for _y = min_y to max_y do
69209: LD_ADDR_VAR 0 12
69213: PUSH
69214: DOUBLE
69215: LD_VAR 0 8
69219: DEC
69220: ST_TO_ADDR
69221: LD_VAR 0 10
69225: PUSH
69226: FOR_TO
69227: IFFALSE 69320
// begin if not ValidHex ( _x , _y ) then
69229: LD_VAR 0 11
69233: PPUSH
69234: LD_VAR 0 12
69238: PPUSH
69239: CALL_OW 488
69243: NOT
69244: IFFALSE 69248
// continue ;
69246: GO 69226
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
69248: LD_VAR 0 11
69252: PPUSH
69253: LD_VAR 0 12
69257: PPUSH
69258: CALL_OW 351
69262: PUSH
69263: LD_VAR 0 11
69267: PPUSH
69268: LD_VAR 0 12
69272: PPUSH
69273: CALL_OW 554
69277: AND
69278: IFFALSE 69318
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
69280: LD_ADDR_VAR 0 13
69284: PUSH
69285: LD_VAR 0 13
69289: PPUSH
69290: LD_VAR 0 13
69294: PUSH
69295: LD_INT 1
69297: PLUS
69298: PPUSH
69299: LD_VAR 0 11
69303: PUSH
69304: LD_VAR 0 12
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PPUSH
69313: CALL_OW 2
69317: ST_TO_ADDR
// end ;
69318: GO 69226
69320: POP
69321: POP
69322: GO 69206
69324: POP
69325: POP
// if not list then
69326: LD_VAR 0 13
69330: NOT
69331: IFFALSE 69335
// exit ;
69333: GO 69406
// for i in list do
69335: LD_ADDR_VAR 0 6
69339: PUSH
69340: LD_VAR 0 13
69344: PUSH
69345: FOR_IN
69346: IFFALSE 69404
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
69348: LD_VAR 0 1
69352: PPUSH
69353: LD_STRING M
69355: PUSH
69356: LD_VAR 0 6
69360: PUSH
69361: LD_INT 1
69363: ARRAY
69364: PUSH
69365: LD_VAR 0 6
69369: PUSH
69370: LD_INT 2
69372: ARRAY
69373: PUSH
69374: LD_INT 0
69376: PUSH
69377: LD_INT 0
69379: PUSH
69380: LD_INT 0
69382: PUSH
69383: LD_INT 0
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: PUSH
69395: EMPTY
69396: LIST
69397: PPUSH
69398: CALL_OW 447
69402: GO 69345
69404: POP
69405: POP
// end ;
69406: LD_VAR 0 5
69410: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
69411: LD_INT 0
69413: PPUSH
69414: PPUSH
69415: PPUSH
69416: PPUSH
69417: PPUSH
69418: PPUSH
69419: PPUSH
69420: PPUSH
69421: PPUSH
69422: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
69423: LD_VAR 0 1
69427: PPUSH
69428: CALL_OW 302
69432: NOT
69433: PUSH
69434: LD_VAR 0 2
69438: PPUSH
69439: LD_VAR 0 3
69443: PPUSH
69444: CALL_OW 488
69448: NOT
69449: OR
69450: PUSH
69451: LD_VAR 0 4
69455: NOT
69456: OR
69457: IFFALSE 69461
// exit ;
69459: GO 69974
// list := [ ] ;
69461: LD_ADDR_VAR 0 13
69465: PUSH
69466: EMPTY
69467: ST_TO_ADDR
// if x - r < 0 then
69468: LD_VAR 0 2
69472: PUSH
69473: LD_VAR 0 4
69477: MINUS
69478: PUSH
69479: LD_INT 0
69481: LESS
69482: IFFALSE 69494
// min_x := 0 else
69484: LD_ADDR_VAR 0 7
69488: PUSH
69489: LD_INT 0
69491: ST_TO_ADDR
69492: GO 69510
// min_x := x - r ;
69494: LD_ADDR_VAR 0 7
69498: PUSH
69499: LD_VAR 0 2
69503: PUSH
69504: LD_VAR 0 4
69508: MINUS
69509: ST_TO_ADDR
// if y - r < 0 then
69510: LD_VAR 0 3
69514: PUSH
69515: LD_VAR 0 4
69519: MINUS
69520: PUSH
69521: LD_INT 0
69523: LESS
69524: IFFALSE 69536
// min_y := 0 else
69526: LD_ADDR_VAR 0 8
69530: PUSH
69531: LD_INT 0
69533: ST_TO_ADDR
69534: GO 69552
// min_y := y - r ;
69536: LD_ADDR_VAR 0 8
69540: PUSH
69541: LD_VAR 0 3
69545: PUSH
69546: LD_VAR 0 4
69550: MINUS
69551: ST_TO_ADDR
// max_x := x + r ;
69552: LD_ADDR_VAR 0 9
69556: PUSH
69557: LD_VAR 0 2
69561: PUSH
69562: LD_VAR 0 4
69566: PLUS
69567: ST_TO_ADDR
// max_y := y + r ;
69568: LD_ADDR_VAR 0 10
69572: PUSH
69573: LD_VAR 0 3
69577: PUSH
69578: LD_VAR 0 4
69582: PLUS
69583: ST_TO_ADDR
// for _x = min_x to max_x do
69584: LD_ADDR_VAR 0 11
69588: PUSH
69589: DOUBLE
69590: LD_VAR 0 7
69594: DEC
69595: ST_TO_ADDR
69596: LD_VAR 0 9
69600: PUSH
69601: FOR_TO
69602: IFFALSE 69719
// for _y = min_y to max_y do
69604: LD_ADDR_VAR 0 12
69608: PUSH
69609: DOUBLE
69610: LD_VAR 0 8
69614: DEC
69615: ST_TO_ADDR
69616: LD_VAR 0 10
69620: PUSH
69621: FOR_TO
69622: IFFALSE 69715
// begin if not ValidHex ( _x , _y ) then
69624: LD_VAR 0 11
69628: PPUSH
69629: LD_VAR 0 12
69633: PPUSH
69634: CALL_OW 488
69638: NOT
69639: IFFALSE 69643
// continue ;
69641: GO 69621
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
69643: LD_VAR 0 11
69647: PPUSH
69648: LD_VAR 0 12
69652: PPUSH
69653: CALL_OW 351
69657: PUSH
69658: LD_VAR 0 11
69662: PPUSH
69663: LD_VAR 0 12
69667: PPUSH
69668: CALL_OW 554
69672: AND
69673: IFFALSE 69713
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
69675: LD_ADDR_VAR 0 13
69679: PUSH
69680: LD_VAR 0 13
69684: PPUSH
69685: LD_VAR 0 13
69689: PUSH
69690: LD_INT 1
69692: PLUS
69693: PPUSH
69694: LD_VAR 0 11
69698: PUSH
69699: LD_VAR 0 12
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PPUSH
69708: CALL_OW 2
69712: ST_TO_ADDR
// end ;
69713: GO 69621
69715: POP
69716: POP
69717: GO 69601
69719: POP
69720: POP
// if not list then
69721: LD_VAR 0 13
69725: NOT
69726: IFFALSE 69730
// exit ;
69728: GO 69974
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
69730: LD_ADDR_VAR 0 13
69734: PUSH
69735: LD_VAR 0 1
69739: PPUSH
69740: LD_VAR 0 13
69744: PPUSH
69745: LD_INT 1
69747: PPUSH
69748: LD_INT 1
69750: PPUSH
69751: CALL 8253 0 4
69755: ST_TO_ADDR
// ComStop ( flame ) ;
69756: LD_VAR 0 1
69760: PPUSH
69761: CALL_OW 141
// for i in list do
69765: LD_ADDR_VAR 0 6
69769: PUSH
69770: LD_VAR 0 13
69774: PUSH
69775: FOR_IN
69776: IFFALSE 69807
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
69778: LD_VAR 0 1
69782: PPUSH
69783: LD_VAR 0 6
69787: PUSH
69788: LD_INT 1
69790: ARRAY
69791: PPUSH
69792: LD_VAR 0 6
69796: PUSH
69797: LD_INT 2
69799: ARRAY
69800: PPUSH
69801: CALL_OW 176
69805: GO 69775
69807: POP
69808: POP
// repeat wait ( 0 0$1 ) ;
69809: LD_INT 35
69811: PPUSH
69812: CALL_OW 67
// task := GetTaskList ( flame ) ;
69816: LD_ADDR_VAR 0 14
69820: PUSH
69821: LD_VAR 0 1
69825: PPUSH
69826: CALL_OW 437
69830: ST_TO_ADDR
// if not task then
69831: LD_VAR 0 14
69835: NOT
69836: IFFALSE 69840
// exit ;
69838: GO 69974
// if task [ 1 ] [ 1 ] <> | then
69840: LD_VAR 0 14
69844: PUSH
69845: LD_INT 1
69847: ARRAY
69848: PUSH
69849: LD_INT 1
69851: ARRAY
69852: PUSH
69853: LD_STRING |
69855: NONEQUAL
69856: IFFALSE 69860
// exit ;
69858: GO 69974
// _x := task [ 1 ] [ 2 ] ;
69860: LD_ADDR_VAR 0 11
69864: PUSH
69865: LD_VAR 0 14
69869: PUSH
69870: LD_INT 1
69872: ARRAY
69873: PUSH
69874: LD_INT 2
69876: ARRAY
69877: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
69878: LD_ADDR_VAR 0 12
69882: PUSH
69883: LD_VAR 0 14
69887: PUSH
69888: LD_INT 1
69890: ARRAY
69891: PUSH
69892: LD_INT 3
69894: ARRAY
69895: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
69896: LD_VAR 0 11
69900: PPUSH
69901: LD_VAR 0 12
69905: PPUSH
69906: CALL_OW 351
69910: NOT
69911: PUSH
69912: LD_VAR 0 11
69916: PPUSH
69917: LD_VAR 0 12
69921: PPUSH
69922: CALL_OW 554
69926: NOT
69927: OR
69928: IFFALSE 69962
// begin task := Delete ( task , 1 ) ;
69930: LD_ADDR_VAR 0 14
69934: PUSH
69935: LD_VAR 0 14
69939: PPUSH
69940: LD_INT 1
69942: PPUSH
69943: CALL_OW 3
69947: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
69948: LD_VAR 0 1
69952: PPUSH
69953: LD_VAR 0 14
69957: PPUSH
69958: CALL_OW 446
// end ; until not HasTask ( flame ) ;
69962: LD_VAR 0 1
69966: PPUSH
69967: CALL_OW 314
69971: NOT
69972: IFFALSE 69809
// end ;
69974: LD_VAR 0 5
69978: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
69979: LD_EXP 101
69983: NOT
69984: IFFALSE 70034
69986: GO 69988
69988: DISABLE
// begin initHack := true ;
69989: LD_ADDR_EXP 101
69993: PUSH
69994: LD_INT 1
69996: ST_TO_ADDR
// hackTanks := [ ] ;
69997: LD_ADDR_EXP 102
70001: PUSH
70002: EMPTY
70003: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
70004: LD_ADDR_EXP 103
70008: PUSH
70009: EMPTY
70010: ST_TO_ADDR
// hackLimit := 3 ;
70011: LD_ADDR_EXP 104
70015: PUSH
70016: LD_INT 3
70018: ST_TO_ADDR
// hackDist := 12 ;
70019: LD_ADDR_EXP 105
70023: PUSH
70024: LD_INT 12
70026: ST_TO_ADDR
// hackCounter := [ ] ;
70027: LD_ADDR_EXP 106
70031: PUSH
70032: EMPTY
70033: ST_TO_ADDR
// end ;
70034: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
70035: LD_EXP 101
70039: PUSH
70040: LD_INT 34
70042: PUSH
70043: LD_INT 99
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PPUSH
70050: CALL_OW 69
70054: AND
70055: IFFALSE 70308
70057: GO 70059
70059: DISABLE
70060: LD_INT 0
70062: PPUSH
70063: PPUSH
// begin enable ;
70064: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
70065: LD_ADDR_VAR 0 1
70069: PUSH
70070: LD_INT 34
70072: PUSH
70073: LD_INT 99
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PPUSH
70080: CALL_OW 69
70084: PUSH
70085: FOR_IN
70086: IFFALSE 70306
// begin if not i in hackTanks then
70088: LD_VAR 0 1
70092: PUSH
70093: LD_EXP 102
70097: IN
70098: NOT
70099: IFFALSE 70182
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
70101: LD_ADDR_EXP 102
70105: PUSH
70106: LD_EXP 102
70110: PPUSH
70111: LD_EXP 102
70115: PUSH
70116: LD_INT 1
70118: PLUS
70119: PPUSH
70120: LD_VAR 0 1
70124: PPUSH
70125: CALL_OW 1
70129: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
70130: LD_ADDR_EXP 103
70134: PUSH
70135: LD_EXP 103
70139: PPUSH
70140: LD_EXP 103
70144: PUSH
70145: LD_INT 1
70147: PLUS
70148: PPUSH
70149: EMPTY
70150: PPUSH
70151: CALL_OW 1
70155: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
70156: LD_ADDR_EXP 106
70160: PUSH
70161: LD_EXP 106
70165: PPUSH
70166: LD_EXP 106
70170: PUSH
70171: LD_INT 1
70173: PLUS
70174: PPUSH
70175: EMPTY
70176: PPUSH
70177: CALL_OW 1
70181: ST_TO_ADDR
// end ; if not IsOk ( i ) then
70182: LD_VAR 0 1
70186: PPUSH
70187: CALL_OW 302
70191: NOT
70192: IFFALSE 70205
// begin HackUnlinkAll ( i ) ;
70194: LD_VAR 0 1
70198: PPUSH
70199: CALL 70311 0 1
// continue ;
70203: GO 70085
// end ; HackCheckCapturedStatus ( i ) ;
70205: LD_VAR 0 1
70209: PPUSH
70210: CALL 70754 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
70214: LD_ADDR_VAR 0 2
70218: PUSH
70219: LD_INT 81
70221: PUSH
70222: LD_VAR 0 1
70226: PPUSH
70227: CALL_OW 255
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 33
70238: PUSH
70239: LD_INT 3
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 91
70248: PUSH
70249: LD_VAR 0 1
70253: PUSH
70254: LD_EXP 105
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: LIST
70263: PUSH
70264: LD_INT 50
70266: PUSH
70267: EMPTY
70268: LIST
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: PPUSH
70276: CALL_OW 69
70280: ST_TO_ADDR
// if not tmp then
70281: LD_VAR 0 2
70285: NOT
70286: IFFALSE 70290
// continue ;
70288: GO 70085
// HackLink ( i , tmp ) ;
70290: LD_VAR 0 1
70294: PPUSH
70295: LD_VAR 0 2
70299: PPUSH
70300: CALL 70447 0 2
// end ;
70304: GO 70085
70306: POP
70307: POP
// end ;
70308: PPOPN 2
70310: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
70311: LD_INT 0
70313: PPUSH
70314: PPUSH
70315: PPUSH
// if not hack in hackTanks then
70316: LD_VAR 0 1
70320: PUSH
70321: LD_EXP 102
70325: IN
70326: NOT
70327: IFFALSE 70331
// exit ;
70329: GO 70442
// index := GetElementIndex ( hackTanks , hack ) ;
70331: LD_ADDR_VAR 0 4
70335: PUSH
70336: LD_EXP 102
70340: PPUSH
70341: LD_VAR 0 1
70345: PPUSH
70346: CALL 7550 0 2
70350: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
70351: LD_EXP 103
70355: PUSH
70356: LD_VAR 0 4
70360: ARRAY
70361: IFFALSE 70442
// begin for i in hackTanksCaptured [ index ] do
70363: LD_ADDR_VAR 0 3
70367: PUSH
70368: LD_EXP 103
70372: PUSH
70373: LD_VAR 0 4
70377: ARRAY
70378: PUSH
70379: FOR_IN
70380: IFFALSE 70406
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
70382: LD_VAR 0 3
70386: PUSH
70387: LD_INT 1
70389: ARRAY
70390: PPUSH
70391: LD_VAR 0 3
70395: PUSH
70396: LD_INT 2
70398: ARRAY
70399: PPUSH
70400: CALL_OW 235
70404: GO 70379
70406: POP
70407: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
70408: LD_ADDR_EXP 103
70412: PUSH
70413: LD_EXP 103
70417: PPUSH
70418: LD_VAR 0 4
70422: PPUSH
70423: EMPTY
70424: PPUSH
70425: CALL_OW 1
70429: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
70430: LD_VAR 0 1
70434: PPUSH
70435: LD_INT 0
70437: PPUSH
70438: CALL_OW 505
// end ; end ;
70442: LD_VAR 0 2
70446: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
70447: LD_INT 0
70449: PPUSH
70450: PPUSH
70451: PPUSH
// if not hack in hackTanks or not vehicles then
70452: LD_VAR 0 1
70456: PUSH
70457: LD_EXP 102
70461: IN
70462: NOT
70463: PUSH
70464: LD_VAR 0 2
70468: NOT
70469: OR
70470: IFFALSE 70474
// exit ;
70472: GO 70749
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
70474: LD_ADDR_VAR 0 2
70478: PUSH
70479: LD_VAR 0 1
70483: PPUSH
70484: LD_VAR 0 2
70488: PPUSH
70489: LD_INT 1
70491: PPUSH
70492: LD_INT 1
70494: PPUSH
70495: CALL 8200 0 4
70499: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
70500: LD_ADDR_VAR 0 5
70504: PUSH
70505: LD_EXP 102
70509: PPUSH
70510: LD_VAR 0 1
70514: PPUSH
70515: CALL 7550 0 2
70519: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
70520: LD_EXP 103
70524: PUSH
70525: LD_VAR 0 5
70529: ARRAY
70530: PUSH
70531: LD_EXP 104
70535: LESS
70536: IFFALSE 70725
// begin for i := 1 to vehicles do
70538: LD_ADDR_VAR 0 4
70542: PUSH
70543: DOUBLE
70544: LD_INT 1
70546: DEC
70547: ST_TO_ADDR
70548: LD_VAR 0 2
70552: PUSH
70553: FOR_TO
70554: IFFALSE 70723
// begin if hackTanksCaptured [ index ] = hackLimit then
70556: LD_EXP 103
70560: PUSH
70561: LD_VAR 0 5
70565: ARRAY
70566: PUSH
70567: LD_EXP 104
70571: EQUAL
70572: IFFALSE 70576
// break ;
70574: GO 70723
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
70576: LD_ADDR_EXP 106
70580: PUSH
70581: LD_EXP 106
70585: PPUSH
70586: LD_VAR 0 5
70590: PPUSH
70591: LD_EXP 106
70595: PUSH
70596: LD_VAR 0 5
70600: ARRAY
70601: PUSH
70602: LD_INT 1
70604: PLUS
70605: PPUSH
70606: CALL_OW 1
70610: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
70611: LD_ADDR_EXP 103
70615: PUSH
70616: LD_EXP 103
70620: PPUSH
70621: LD_VAR 0 5
70625: PUSH
70626: LD_EXP 103
70630: PUSH
70631: LD_VAR 0 5
70635: ARRAY
70636: PUSH
70637: LD_INT 1
70639: PLUS
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PPUSH
70645: LD_VAR 0 2
70649: PUSH
70650: LD_VAR 0 4
70654: ARRAY
70655: PUSH
70656: LD_VAR 0 2
70660: PUSH
70661: LD_VAR 0 4
70665: ARRAY
70666: PPUSH
70667: CALL_OW 255
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PPUSH
70676: CALL 7765 0 3
70680: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
70681: LD_VAR 0 2
70685: PUSH
70686: LD_VAR 0 4
70690: ARRAY
70691: PPUSH
70692: LD_VAR 0 1
70696: PPUSH
70697: CALL_OW 255
70701: PPUSH
70702: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
70706: LD_VAR 0 2
70710: PUSH
70711: LD_VAR 0 4
70715: ARRAY
70716: PPUSH
70717: CALL_OW 141
// end ;
70721: GO 70553
70723: POP
70724: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70725: LD_VAR 0 1
70729: PPUSH
70730: LD_EXP 103
70734: PUSH
70735: LD_VAR 0 5
70739: ARRAY
70740: PUSH
70741: LD_INT 0
70743: PLUS
70744: PPUSH
70745: CALL_OW 505
// end ;
70749: LD_VAR 0 3
70753: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
70754: LD_INT 0
70756: PPUSH
70757: PPUSH
70758: PPUSH
70759: PPUSH
// if not hack in hackTanks then
70760: LD_VAR 0 1
70764: PUSH
70765: LD_EXP 102
70769: IN
70770: NOT
70771: IFFALSE 70775
// exit ;
70773: GO 71015
// index := GetElementIndex ( hackTanks , hack ) ;
70775: LD_ADDR_VAR 0 4
70779: PUSH
70780: LD_EXP 102
70784: PPUSH
70785: LD_VAR 0 1
70789: PPUSH
70790: CALL 7550 0 2
70794: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
70795: LD_ADDR_VAR 0 3
70799: PUSH
70800: DOUBLE
70801: LD_EXP 103
70805: PUSH
70806: LD_VAR 0 4
70810: ARRAY
70811: INC
70812: ST_TO_ADDR
70813: LD_INT 1
70815: PUSH
70816: FOR_DOWNTO
70817: IFFALSE 70989
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
70819: LD_ADDR_VAR 0 5
70823: PUSH
70824: LD_EXP 103
70828: PUSH
70829: LD_VAR 0 4
70833: ARRAY
70834: PUSH
70835: LD_VAR 0 3
70839: ARRAY
70840: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
70841: LD_VAR 0 5
70845: PUSH
70846: LD_INT 1
70848: ARRAY
70849: PPUSH
70850: CALL_OW 302
70854: NOT
70855: PUSH
70856: LD_VAR 0 5
70860: PUSH
70861: LD_INT 1
70863: ARRAY
70864: PPUSH
70865: CALL_OW 255
70869: PUSH
70870: LD_VAR 0 1
70874: PPUSH
70875: CALL_OW 255
70879: NONEQUAL
70880: OR
70881: IFFALSE 70987
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
70883: LD_VAR 0 5
70887: PUSH
70888: LD_INT 1
70890: ARRAY
70891: PPUSH
70892: CALL_OW 305
70896: PUSH
70897: LD_VAR 0 5
70901: PUSH
70902: LD_INT 1
70904: ARRAY
70905: PPUSH
70906: CALL_OW 255
70910: PUSH
70911: LD_VAR 0 1
70915: PPUSH
70916: CALL_OW 255
70920: EQUAL
70921: AND
70922: IFFALSE 70946
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
70924: LD_VAR 0 5
70928: PUSH
70929: LD_INT 1
70931: ARRAY
70932: PPUSH
70933: LD_VAR 0 5
70937: PUSH
70938: LD_INT 2
70940: ARRAY
70941: PPUSH
70942: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
70946: LD_ADDR_EXP 103
70950: PUSH
70951: LD_EXP 103
70955: PPUSH
70956: LD_VAR 0 4
70960: PPUSH
70961: LD_EXP 103
70965: PUSH
70966: LD_VAR 0 4
70970: ARRAY
70971: PPUSH
70972: LD_VAR 0 3
70976: PPUSH
70977: CALL_OW 3
70981: PPUSH
70982: CALL_OW 1
70986: ST_TO_ADDR
// end ; end ;
70987: GO 70816
70989: POP
70990: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70991: LD_VAR 0 1
70995: PPUSH
70996: LD_EXP 103
71000: PUSH
71001: LD_VAR 0 4
71005: ARRAY
71006: PUSH
71007: LD_INT 0
71009: PLUS
71010: PPUSH
71011: CALL_OW 505
// end ;
71015: LD_VAR 0 2
71019: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
71020: LD_INT 0
71022: PPUSH
71023: PPUSH
71024: PPUSH
71025: PPUSH
// if not hack in hackTanks then
71026: LD_VAR 0 1
71030: PUSH
71031: LD_EXP 102
71035: IN
71036: NOT
71037: IFFALSE 71041
// exit ;
71039: GO 71126
// index := GetElementIndex ( hackTanks , hack ) ;
71041: LD_ADDR_VAR 0 5
71045: PUSH
71046: LD_EXP 102
71050: PPUSH
71051: LD_VAR 0 1
71055: PPUSH
71056: CALL 7550 0 2
71060: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
71061: LD_ADDR_VAR 0 4
71065: PUSH
71066: DOUBLE
71067: LD_INT 1
71069: DEC
71070: ST_TO_ADDR
71071: LD_EXP 103
71075: PUSH
71076: LD_VAR 0 5
71080: ARRAY
71081: PUSH
71082: FOR_TO
71083: IFFALSE 71124
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
71085: LD_EXP 103
71089: PUSH
71090: LD_VAR 0 5
71094: ARRAY
71095: PUSH
71096: LD_VAR 0 4
71100: ARRAY
71101: PUSH
71102: LD_INT 1
71104: ARRAY
71105: PUSH
71106: LD_VAR 0 2
71110: EQUAL
71111: IFFALSE 71122
// KillUnit ( vehicle ) ;
71113: LD_VAR 0 2
71117: PPUSH
71118: CALL_OW 66
71122: GO 71082
71124: POP
71125: POP
// end ;
71126: LD_VAR 0 3
71130: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
71131: LD_EXP 107
71135: NOT
71136: IFFALSE 71171
71138: GO 71140
71140: DISABLE
// begin initMiner := true ;
71141: LD_ADDR_EXP 107
71145: PUSH
71146: LD_INT 1
71148: ST_TO_ADDR
// minersList := [ ] ;
71149: LD_ADDR_EXP 108
71153: PUSH
71154: EMPTY
71155: ST_TO_ADDR
// minerMinesList := [ ] ;
71156: LD_ADDR_EXP 109
71160: PUSH
71161: EMPTY
71162: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
71163: LD_ADDR_EXP 110
71167: PUSH
71168: LD_INT 5
71170: ST_TO_ADDR
// end ;
71171: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
71172: LD_EXP 107
71176: PUSH
71177: LD_INT 34
71179: PUSH
71180: LD_INT 81
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PPUSH
71187: CALL_OW 69
71191: AND
71192: IFFALSE 71653
71194: GO 71196
71196: DISABLE
71197: LD_INT 0
71199: PPUSH
71200: PPUSH
71201: PPUSH
71202: PPUSH
// begin enable ;
71203: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
71204: LD_ADDR_VAR 0 1
71208: PUSH
71209: LD_INT 34
71211: PUSH
71212: LD_INT 81
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PPUSH
71219: CALL_OW 69
71223: PUSH
71224: FOR_IN
71225: IFFALSE 71297
// begin if not i in minersList then
71227: LD_VAR 0 1
71231: PUSH
71232: LD_EXP 108
71236: IN
71237: NOT
71238: IFFALSE 71295
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
71240: LD_ADDR_EXP 108
71244: PUSH
71245: LD_EXP 108
71249: PPUSH
71250: LD_EXP 108
71254: PUSH
71255: LD_INT 1
71257: PLUS
71258: PPUSH
71259: LD_VAR 0 1
71263: PPUSH
71264: CALL_OW 1
71268: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
71269: LD_ADDR_EXP 109
71273: PUSH
71274: LD_EXP 109
71278: PPUSH
71279: LD_EXP 109
71283: PUSH
71284: LD_INT 1
71286: PLUS
71287: PPUSH
71288: EMPTY
71289: PPUSH
71290: CALL_OW 1
71294: ST_TO_ADDR
// end end ;
71295: GO 71224
71297: POP
71298: POP
// for i := minerMinesList downto 1 do
71299: LD_ADDR_VAR 0 1
71303: PUSH
71304: DOUBLE
71305: LD_EXP 109
71309: INC
71310: ST_TO_ADDR
71311: LD_INT 1
71313: PUSH
71314: FOR_DOWNTO
71315: IFFALSE 71651
// begin if IsLive ( minersList [ i ] ) then
71317: LD_EXP 108
71321: PUSH
71322: LD_VAR 0 1
71326: ARRAY
71327: PPUSH
71328: CALL_OW 300
71332: IFFALSE 71360
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
71334: LD_EXP 108
71338: PUSH
71339: LD_VAR 0 1
71343: ARRAY
71344: PPUSH
71345: LD_EXP 109
71349: PUSH
71350: LD_VAR 0 1
71354: ARRAY
71355: PPUSH
71356: CALL_OW 505
// if not minerMinesList [ i ] then
71360: LD_EXP 109
71364: PUSH
71365: LD_VAR 0 1
71369: ARRAY
71370: NOT
71371: IFFALSE 71375
// continue ;
71373: GO 71314
// for j := minerMinesList [ i ] downto 1 do
71375: LD_ADDR_VAR 0 2
71379: PUSH
71380: DOUBLE
71381: LD_EXP 109
71385: PUSH
71386: LD_VAR 0 1
71390: ARRAY
71391: INC
71392: ST_TO_ADDR
71393: LD_INT 1
71395: PUSH
71396: FOR_DOWNTO
71397: IFFALSE 71647
// begin side := GetSide ( minersList [ i ] ) ;
71399: LD_ADDR_VAR 0 3
71403: PUSH
71404: LD_EXP 108
71408: PUSH
71409: LD_VAR 0 1
71413: ARRAY
71414: PPUSH
71415: CALL_OW 255
71419: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
71420: LD_ADDR_VAR 0 4
71424: PUSH
71425: LD_EXP 109
71429: PUSH
71430: LD_VAR 0 1
71434: ARRAY
71435: PUSH
71436: LD_VAR 0 2
71440: ARRAY
71441: PUSH
71442: LD_INT 1
71444: ARRAY
71445: PPUSH
71446: LD_EXP 109
71450: PUSH
71451: LD_VAR 0 1
71455: ARRAY
71456: PUSH
71457: LD_VAR 0 2
71461: ARRAY
71462: PUSH
71463: LD_INT 2
71465: ARRAY
71466: PPUSH
71467: CALL_OW 428
71471: ST_TO_ADDR
// if not tmp then
71472: LD_VAR 0 4
71476: NOT
71477: IFFALSE 71481
// continue ;
71479: GO 71396
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
71481: LD_VAR 0 4
71485: PUSH
71486: LD_INT 81
71488: PUSH
71489: LD_VAR 0 3
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PPUSH
71498: CALL_OW 69
71502: IN
71503: PUSH
71504: LD_EXP 109
71508: PUSH
71509: LD_VAR 0 1
71513: ARRAY
71514: PUSH
71515: LD_VAR 0 2
71519: ARRAY
71520: PUSH
71521: LD_INT 1
71523: ARRAY
71524: PPUSH
71525: LD_EXP 109
71529: PUSH
71530: LD_VAR 0 1
71534: ARRAY
71535: PUSH
71536: LD_VAR 0 2
71540: ARRAY
71541: PUSH
71542: LD_INT 2
71544: ARRAY
71545: PPUSH
71546: CALL_OW 458
71550: AND
71551: IFFALSE 71645
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
71553: LD_EXP 109
71557: PUSH
71558: LD_VAR 0 1
71562: ARRAY
71563: PUSH
71564: LD_VAR 0 2
71568: ARRAY
71569: PUSH
71570: LD_INT 1
71572: ARRAY
71573: PPUSH
71574: LD_EXP 109
71578: PUSH
71579: LD_VAR 0 1
71583: ARRAY
71584: PUSH
71585: LD_VAR 0 2
71589: ARRAY
71590: PUSH
71591: LD_INT 2
71593: ARRAY
71594: PPUSH
71595: LD_VAR 0 3
71599: PPUSH
71600: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
71604: LD_ADDR_EXP 109
71608: PUSH
71609: LD_EXP 109
71613: PPUSH
71614: LD_VAR 0 1
71618: PPUSH
71619: LD_EXP 109
71623: PUSH
71624: LD_VAR 0 1
71628: ARRAY
71629: PPUSH
71630: LD_VAR 0 2
71634: PPUSH
71635: CALL_OW 3
71639: PPUSH
71640: CALL_OW 1
71644: ST_TO_ADDR
// end ; end ;
71645: GO 71396
71647: POP
71648: POP
// end ;
71649: GO 71314
71651: POP
71652: POP
// end ;
71653: PPOPN 4
71655: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
71656: LD_INT 0
71658: PPUSH
71659: PPUSH
// result := false ;
71660: LD_ADDR_VAR 0 4
71664: PUSH
71665: LD_INT 0
71667: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
71668: LD_VAR 0 1
71672: PPUSH
71673: CALL_OW 264
71677: PUSH
71678: LD_INT 81
71680: EQUAL
71681: NOT
71682: IFFALSE 71686
// exit ;
71684: GO 71926
// index := GetElementIndex ( minersList , unit ) ;
71686: LD_ADDR_VAR 0 5
71690: PUSH
71691: LD_EXP 108
71695: PPUSH
71696: LD_VAR 0 1
71700: PPUSH
71701: CALL 7550 0 2
71705: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
71706: LD_EXP 109
71710: PUSH
71711: LD_VAR 0 5
71715: ARRAY
71716: PUSH
71717: LD_EXP 110
71721: GREATEREQUAL
71722: IFFALSE 71726
// exit ;
71724: GO 71926
// ComMoveXY ( unit , x , y ) ;
71726: LD_VAR 0 1
71730: PPUSH
71731: LD_VAR 0 2
71735: PPUSH
71736: LD_VAR 0 3
71740: PPUSH
71741: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71745: LD_INT 35
71747: PPUSH
71748: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
71752: LD_VAR 0 1
71756: PPUSH
71757: LD_VAR 0 2
71761: PPUSH
71762: LD_VAR 0 3
71766: PPUSH
71767: CALL 39291 0 3
71771: NOT
71772: PUSH
71773: LD_VAR 0 1
71777: PPUSH
71778: CALL_OW 314
71782: AND
71783: IFFALSE 71787
// exit ;
71785: GO 71926
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
71787: LD_VAR 0 2
71791: PPUSH
71792: LD_VAR 0 3
71796: PPUSH
71797: CALL_OW 428
71801: PUSH
71802: LD_VAR 0 1
71806: EQUAL
71807: PUSH
71808: LD_VAR 0 1
71812: PPUSH
71813: CALL_OW 314
71817: NOT
71818: AND
71819: IFFALSE 71745
// PlaySoundXY ( x , y , PlantMine ) ;
71821: LD_VAR 0 2
71825: PPUSH
71826: LD_VAR 0 3
71830: PPUSH
71831: LD_STRING PlantMine
71833: PPUSH
71834: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
71838: LD_VAR 0 2
71842: PPUSH
71843: LD_VAR 0 3
71847: PPUSH
71848: LD_VAR 0 1
71852: PPUSH
71853: CALL_OW 255
71857: PPUSH
71858: LD_INT 0
71860: PPUSH
71861: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
71865: LD_ADDR_EXP 109
71869: PUSH
71870: LD_EXP 109
71874: PPUSH
71875: LD_VAR 0 5
71879: PUSH
71880: LD_EXP 109
71884: PUSH
71885: LD_VAR 0 5
71889: ARRAY
71890: PUSH
71891: LD_INT 1
71893: PLUS
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: PPUSH
71899: LD_VAR 0 2
71903: PUSH
71904: LD_VAR 0 3
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PPUSH
71913: CALL 7765 0 3
71917: ST_TO_ADDR
// result := true ;
71918: LD_ADDR_VAR 0 4
71922: PUSH
71923: LD_INT 1
71925: ST_TO_ADDR
// end ;
71926: LD_VAR 0 4
71930: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
71931: LD_INT 0
71933: PPUSH
71934: PPUSH
71935: PPUSH
// if not unit in minersList then
71936: LD_VAR 0 1
71940: PUSH
71941: LD_EXP 108
71945: IN
71946: NOT
71947: IFFALSE 71951
// exit ;
71949: GO 72343
// index := GetElementIndex ( minersList , unit ) ;
71951: LD_ADDR_VAR 0 6
71955: PUSH
71956: LD_EXP 108
71960: PPUSH
71961: LD_VAR 0 1
71965: PPUSH
71966: CALL 7550 0 2
71970: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
71971: LD_ADDR_VAR 0 5
71975: PUSH
71976: DOUBLE
71977: LD_EXP 109
71981: PUSH
71982: LD_VAR 0 6
71986: ARRAY
71987: INC
71988: ST_TO_ADDR
71989: LD_INT 1
71991: PUSH
71992: FOR_DOWNTO
71993: IFFALSE 72154
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
71995: LD_EXP 109
71999: PUSH
72000: LD_VAR 0 6
72004: ARRAY
72005: PUSH
72006: LD_VAR 0 5
72010: ARRAY
72011: PUSH
72012: LD_INT 1
72014: ARRAY
72015: PUSH
72016: LD_VAR 0 2
72020: EQUAL
72021: PUSH
72022: LD_EXP 109
72026: PUSH
72027: LD_VAR 0 6
72031: ARRAY
72032: PUSH
72033: LD_VAR 0 5
72037: ARRAY
72038: PUSH
72039: LD_INT 2
72041: ARRAY
72042: PUSH
72043: LD_VAR 0 3
72047: EQUAL
72048: AND
72049: IFFALSE 72152
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
72051: LD_EXP 109
72055: PUSH
72056: LD_VAR 0 6
72060: ARRAY
72061: PUSH
72062: LD_VAR 0 5
72066: ARRAY
72067: PUSH
72068: LD_INT 1
72070: ARRAY
72071: PPUSH
72072: LD_EXP 109
72076: PUSH
72077: LD_VAR 0 6
72081: ARRAY
72082: PUSH
72083: LD_VAR 0 5
72087: ARRAY
72088: PUSH
72089: LD_INT 2
72091: ARRAY
72092: PPUSH
72093: LD_VAR 0 1
72097: PPUSH
72098: CALL_OW 255
72102: PPUSH
72103: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
72107: LD_ADDR_EXP 109
72111: PUSH
72112: LD_EXP 109
72116: PPUSH
72117: LD_VAR 0 6
72121: PPUSH
72122: LD_EXP 109
72126: PUSH
72127: LD_VAR 0 6
72131: ARRAY
72132: PPUSH
72133: LD_VAR 0 5
72137: PPUSH
72138: CALL_OW 3
72142: PPUSH
72143: CALL_OW 1
72147: ST_TO_ADDR
// exit ;
72148: POP
72149: POP
72150: GO 72343
// end ; end ;
72152: GO 71992
72154: POP
72155: POP
// for i := minerMinesList [ index ] downto 1 do
72156: LD_ADDR_VAR 0 5
72160: PUSH
72161: DOUBLE
72162: LD_EXP 109
72166: PUSH
72167: LD_VAR 0 6
72171: ARRAY
72172: INC
72173: ST_TO_ADDR
72174: LD_INT 1
72176: PUSH
72177: FOR_DOWNTO
72178: IFFALSE 72341
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
72180: LD_EXP 109
72184: PUSH
72185: LD_VAR 0 6
72189: ARRAY
72190: PUSH
72191: LD_VAR 0 5
72195: ARRAY
72196: PUSH
72197: LD_INT 1
72199: ARRAY
72200: PPUSH
72201: LD_EXP 109
72205: PUSH
72206: LD_VAR 0 6
72210: ARRAY
72211: PUSH
72212: LD_VAR 0 5
72216: ARRAY
72217: PUSH
72218: LD_INT 2
72220: ARRAY
72221: PPUSH
72222: LD_VAR 0 2
72226: PPUSH
72227: LD_VAR 0 3
72231: PPUSH
72232: CALL_OW 298
72236: PUSH
72237: LD_INT 6
72239: LESS
72240: IFFALSE 72339
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
72242: LD_EXP 109
72246: PUSH
72247: LD_VAR 0 6
72251: ARRAY
72252: PUSH
72253: LD_VAR 0 5
72257: ARRAY
72258: PUSH
72259: LD_INT 1
72261: ARRAY
72262: PPUSH
72263: LD_EXP 109
72267: PUSH
72268: LD_VAR 0 6
72272: ARRAY
72273: PUSH
72274: LD_VAR 0 5
72278: ARRAY
72279: PUSH
72280: LD_INT 2
72282: ARRAY
72283: PPUSH
72284: LD_VAR 0 1
72288: PPUSH
72289: CALL_OW 255
72293: PPUSH
72294: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
72298: LD_ADDR_EXP 109
72302: PUSH
72303: LD_EXP 109
72307: PPUSH
72308: LD_VAR 0 6
72312: PPUSH
72313: LD_EXP 109
72317: PUSH
72318: LD_VAR 0 6
72322: ARRAY
72323: PPUSH
72324: LD_VAR 0 5
72328: PPUSH
72329: CALL_OW 3
72333: PPUSH
72334: CALL_OW 1
72338: ST_TO_ADDR
// end ; end ;
72339: GO 72177
72341: POP
72342: POP
// end ;
72343: LD_VAR 0 4
72347: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
72348: LD_INT 0
72350: PPUSH
72351: PPUSH
72352: PPUSH
72353: PPUSH
72354: PPUSH
72355: PPUSH
72356: PPUSH
72357: PPUSH
72358: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
72359: LD_VAR 0 1
72363: PPUSH
72364: CALL_OW 264
72368: PUSH
72369: LD_INT 81
72371: EQUAL
72372: NOT
72373: PUSH
72374: LD_VAR 0 1
72378: PUSH
72379: LD_EXP 108
72383: IN
72384: NOT
72385: OR
72386: IFFALSE 72390
// exit ;
72388: GO 72712
// index := GetElementIndex ( minersList , unit ) ;
72390: LD_ADDR_VAR 0 6
72394: PUSH
72395: LD_EXP 108
72399: PPUSH
72400: LD_VAR 0 1
72404: PPUSH
72405: CALL 7550 0 2
72409: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
72410: LD_ADDR_VAR 0 8
72414: PUSH
72415: LD_EXP 110
72419: PUSH
72420: LD_EXP 109
72424: PUSH
72425: LD_VAR 0 6
72429: ARRAY
72430: MINUS
72431: ST_TO_ADDR
// if not minesFreeAmount then
72432: LD_VAR 0 8
72436: NOT
72437: IFFALSE 72441
// exit ;
72439: GO 72712
// tmp := [ ] ;
72441: LD_ADDR_VAR 0 7
72445: PUSH
72446: EMPTY
72447: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
72448: LD_ADDR_VAR 0 5
72452: PUSH
72453: DOUBLE
72454: LD_INT 1
72456: DEC
72457: ST_TO_ADDR
72458: LD_VAR 0 8
72462: PUSH
72463: FOR_TO
72464: IFFALSE 72659
// begin _d := rand ( 0 , 5 ) ;
72466: LD_ADDR_VAR 0 11
72470: PUSH
72471: LD_INT 0
72473: PPUSH
72474: LD_INT 5
72476: PPUSH
72477: CALL_OW 12
72481: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
72482: LD_ADDR_VAR 0 12
72486: PUSH
72487: LD_INT 2
72489: PPUSH
72490: LD_INT 6
72492: PPUSH
72493: CALL_OW 12
72497: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
72498: LD_ADDR_VAR 0 9
72502: PUSH
72503: LD_VAR 0 2
72507: PPUSH
72508: LD_VAR 0 11
72512: PPUSH
72513: LD_VAR 0 12
72517: PPUSH
72518: CALL_OW 272
72522: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
72523: LD_ADDR_VAR 0 10
72527: PUSH
72528: LD_VAR 0 3
72532: PPUSH
72533: LD_VAR 0 11
72537: PPUSH
72538: LD_VAR 0 12
72542: PPUSH
72543: CALL_OW 273
72547: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
72548: LD_VAR 0 9
72552: PPUSH
72553: LD_VAR 0 10
72557: PPUSH
72558: CALL_OW 488
72562: PUSH
72563: LD_VAR 0 9
72567: PUSH
72568: LD_VAR 0 10
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: LD_VAR 0 7
72581: IN
72582: NOT
72583: AND
72584: PUSH
72585: LD_VAR 0 9
72589: PPUSH
72590: LD_VAR 0 10
72594: PPUSH
72595: CALL_OW 458
72599: NOT
72600: AND
72601: IFFALSE 72643
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
72603: LD_ADDR_VAR 0 7
72607: PUSH
72608: LD_VAR 0 7
72612: PPUSH
72613: LD_VAR 0 7
72617: PUSH
72618: LD_INT 1
72620: PLUS
72621: PPUSH
72622: LD_VAR 0 9
72626: PUSH
72627: LD_VAR 0 10
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: PPUSH
72636: CALL_OW 1
72640: ST_TO_ADDR
72641: GO 72657
// i := i - 1 ;
72643: LD_ADDR_VAR 0 5
72647: PUSH
72648: LD_VAR 0 5
72652: PUSH
72653: LD_INT 1
72655: MINUS
72656: ST_TO_ADDR
// end ;
72657: GO 72463
72659: POP
72660: POP
// for i in tmp do
72661: LD_ADDR_VAR 0 5
72665: PUSH
72666: LD_VAR 0 7
72670: PUSH
72671: FOR_IN
72672: IFFALSE 72710
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
72674: LD_VAR 0 1
72678: PPUSH
72679: LD_VAR 0 5
72683: PUSH
72684: LD_INT 1
72686: ARRAY
72687: PPUSH
72688: LD_VAR 0 5
72692: PUSH
72693: LD_INT 2
72695: ARRAY
72696: PPUSH
72697: CALL 71656 0 3
72701: NOT
72702: IFFALSE 72708
// exit ;
72704: POP
72705: POP
72706: GO 72712
72708: GO 72671
72710: POP
72711: POP
// end ;
72712: LD_VAR 0 4
72716: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
72717: LD_INT 0
72719: PPUSH
72720: PPUSH
72721: PPUSH
72722: PPUSH
72723: PPUSH
72724: PPUSH
72725: PPUSH
// if not GetClass ( unit ) = class_sniper then
72726: LD_VAR 0 1
72730: PPUSH
72731: CALL_OW 257
72735: PUSH
72736: LD_INT 5
72738: EQUAL
72739: NOT
72740: IFFALSE 72744
// exit ;
72742: GO 73132
// dist := 8 ;
72744: LD_ADDR_VAR 0 5
72748: PUSH
72749: LD_INT 8
72751: ST_TO_ADDR
// viewRange := 12 ;
72752: LD_ADDR_VAR 0 7
72756: PUSH
72757: LD_INT 12
72759: ST_TO_ADDR
// side := GetSide ( unit ) ;
72760: LD_ADDR_VAR 0 6
72764: PUSH
72765: LD_VAR 0 1
72769: PPUSH
72770: CALL_OW 255
72774: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
72775: LD_INT 61
72777: PPUSH
72778: LD_VAR 0 6
72782: PPUSH
72783: CALL_OW 321
72787: PUSH
72788: LD_INT 2
72790: EQUAL
72791: IFFALSE 72801
// viewRange := 16 ;
72793: LD_ADDR_VAR 0 7
72797: PUSH
72798: LD_INT 16
72800: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
72801: LD_VAR 0 1
72805: PPUSH
72806: LD_VAR 0 2
72810: PPUSH
72811: LD_VAR 0 3
72815: PPUSH
72816: CALL_OW 297
72820: PUSH
72821: LD_VAR 0 5
72825: GREATER
72826: IFFALSE 72905
// begin ComMoveXY ( unit , x , y ) ;
72828: LD_VAR 0 1
72832: PPUSH
72833: LD_VAR 0 2
72837: PPUSH
72838: LD_VAR 0 3
72842: PPUSH
72843: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
72847: LD_INT 35
72849: PPUSH
72850: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
72854: LD_VAR 0 1
72858: PPUSH
72859: LD_VAR 0 2
72863: PPUSH
72864: LD_VAR 0 3
72868: PPUSH
72869: CALL 39291 0 3
72873: NOT
72874: IFFALSE 72878
// exit ;
72876: GO 73132
// until GetDistUnitXY ( unit , x , y ) < dist ;
72878: LD_VAR 0 1
72882: PPUSH
72883: LD_VAR 0 2
72887: PPUSH
72888: LD_VAR 0 3
72892: PPUSH
72893: CALL_OW 297
72897: PUSH
72898: LD_VAR 0 5
72902: LESS
72903: IFFALSE 72847
// end ; ComTurnXY ( unit , x , y ) ;
72905: LD_VAR 0 1
72909: PPUSH
72910: LD_VAR 0 2
72914: PPUSH
72915: LD_VAR 0 3
72919: PPUSH
72920: CALL_OW 118
// wait ( 5 ) ;
72924: LD_INT 5
72926: PPUSH
72927: CALL_OW 67
// _d := GetDir ( unit ) ;
72931: LD_ADDR_VAR 0 10
72935: PUSH
72936: LD_VAR 0 1
72940: PPUSH
72941: CALL_OW 254
72945: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
72946: LD_ADDR_VAR 0 8
72950: PUSH
72951: LD_VAR 0 1
72955: PPUSH
72956: CALL_OW 250
72960: PPUSH
72961: LD_VAR 0 10
72965: PPUSH
72966: LD_VAR 0 5
72970: PPUSH
72971: CALL_OW 272
72975: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
72976: LD_ADDR_VAR 0 9
72980: PUSH
72981: LD_VAR 0 1
72985: PPUSH
72986: CALL_OW 251
72990: PPUSH
72991: LD_VAR 0 10
72995: PPUSH
72996: LD_VAR 0 5
73000: PPUSH
73001: CALL_OW 273
73005: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73006: LD_VAR 0 8
73010: PPUSH
73011: LD_VAR 0 9
73015: PPUSH
73016: CALL_OW 488
73020: NOT
73021: IFFALSE 73025
// exit ;
73023: GO 73132
// ComAnimCustom ( unit , 1 ) ;
73025: LD_VAR 0 1
73029: PPUSH
73030: LD_INT 1
73032: PPUSH
73033: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
73037: LD_VAR 0 8
73041: PPUSH
73042: LD_VAR 0 9
73046: PPUSH
73047: LD_VAR 0 6
73051: PPUSH
73052: LD_VAR 0 7
73056: PPUSH
73057: CALL_OW 330
// repeat wait ( 1 ) ;
73061: LD_INT 1
73063: PPUSH
73064: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
73068: LD_VAR 0 1
73072: PPUSH
73073: CALL_OW 316
73077: PUSH
73078: LD_VAR 0 1
73082: PPUSH
73083: CALL_OW 314
73087: OR
73088: PUSH
73089: LD_VAR 0 1
73093: PPUSH
73094: CALL_OW 302
73098: NOT
73099: OR
73100: PUSH
73101: LD_VAR 0 1
73105: PPUSH
73106: CALL_OW 301
73110: OR
73111: IFFALSE 73061
// RemoveSeeing ( _x , _y , side ) ;
73113: LD_VAR 0 8
73117: PPUSH
73118: LD_VAR 0 9
73122: PPUSH
73123: LD_VAR 0 6
73127: PPUSH
73128: CALL_OW 331
// end ;
73132: LD_VAR 0 4
73136: RET
