// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 44974 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 45234 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 0
  48: PUSH
  49: LD_INT 0
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ ] , [ ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 3 , 6 , 9 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: PUSH
 298: EMPTY
 299: PUSH
 300: LD_INT 0
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 1
 312: NEG
 313: PUSH
 314: LD_INT 350
 316: PUSH
 317: LD_INT 700
 319: PUSH
 320: LD_INT 1400
 322: PUSH
 323: LD_INT 0
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: LIST
 332: PUSH
 333: LD_INT 0
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 0
 345: PUSH
 346: LD_INT 13650
 348: PUSH
 349: LD_INT 7350
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: LIST
 356: PUSH
 357: LD_INT 0
 359: PUSH
 360: LD_INT 3
 362: PUSH
 363: LD_INT 6
 365: PUSH
 366: LD_INT 9
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: PUSH
 375: EMPTY
 376: PUSH
 377: EMPTY
 378: PUSH
 379: LD_INT 0
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: LD_INT 31500
 387: PUSH
 388: LD_INT 52500
 390: PUSH
 391: LD_INT 63000
 393: PUSH
 394: LD_INT 94500
 396: PUSH
 397: LD_INT 126000
 399: PUSH
 400: LD_INT 189000
 402: PUSH
 403: LD_INT 210000
 405: PUSH
 406: LD_INT 252000
 408: PUSH
 409: LD_INT 378000
 411: PUSH
 412: EMPTY
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: PUSH
 427: EMPTY
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: LD_INT 6300
 434: PUSH
 435: LD_INT 10500
 437: PUSH
 438: LD_INT 16800
 440: PUSH
 441: LD_INT 21000
 443: PUSH
 444: LD_INT 25200
 446: PUSH
 447: LD_INT 31500
 449: PUSH
 450: LD_INT 42000
 452: PUSH
 453: LD_INT 63000
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: LIST
 465: LIST
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: LIST
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 0 , 0 , 1 , 0 0$20 , 1 , 1 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 490: LD_ADDR_EXP 4
 494: PUSH
 495: LD_INT 2
 497: PUSH
 498: LD_INT 15
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: LD_INT 100
 506: PUSH
 507: LD_INT 30
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 3
 520: PUSH
 521: LD_INT 1
 523: PUSH
 524: LD_INT 2
 526: PUSH
 527: LD_INT 250
 529: PUSH
 530: LD_INT 0
 532: PUSH
 533: LD_INT 0
 535: PUSH
 536: LD_INT 1
 538: PUSH
 539: LD_INT 700
 541: PUSH
 542: LD_INT 1
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: LD_INT 3
 550: PUSH
 551: LD_INT 0
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: LD_INT 31500
 559: PUSH
 560: LD_INT 0
 562: PUSH
 563: LD_INT 0
 565: PUSH
 566: LD_INT 6300
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: LIST
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 592: LD_ADDR_EXP 1
 596: PUSH
 597: LD_INT 1
 599: ST_TO_ADDR
// your_side := 1 ;
 600: LD_ADDR_OWVAR 2
 604: PUSH
 605: LD_INT 1
 607: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 608: LD_ADDR_EXP 5
 612: PUSH
 613: LD_INT 8
 615: PUSH
 616: LD_INT 2
 618: PUSH
 619: LD_INT 3
 621: PUSH
 622: LD_INT 4
 624: PUSH
 625: LD_INT 5
 627: PUSH
 628: LD_INT 6
 630: PUSH
 631: LD_INT 7
 633: PUSH
 634: LD_INT 1
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 647: LD_ADDR_EXP 6
 651: PUSH
 652: LD_INT 1
 654: PUSH
 655: LD_INT 2
 657: PUSH
 658: LD_INT 2
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: LD_INT 3
 666: PUSH
 667: LD_INT 4
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 686: LD_ADDR_EXP 7
 690: PUSH
 691: LD_INT 1
 693: PUSH
 694: LD_INT 2
 696: PUSH
 697: LD_INT 3
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 2
 705: PUSH
 706: LD_INT 3
 708: PUSH
 709: LD_INT 1
 711: PUSH
 712: LD_INT 2
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 725: LD_ADDR_EXP 8
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: LD_INT 8
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: PUSH
 740: LD_INT 2
 742: PUSH
 743: LD_INT 3
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PUSH
 750: LD_INT 4
 752: PUSH
 753: LD_INT 5
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 6
 762: PUSH
 763: LD_INT 7
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: ST_TO_ADDR
// mpTeamGame := true ;
 776: LD_ADDR_EXP 9
 780: PUSH
 781: LD_INT 1
 783: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 784: LD_ADDR_EXP 27
 788: PUSH
 789: LD_INT 160
 791: PUSH
 792: LD_INT 200
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: ST_TO_ADDR
// end ;
 799: LD_VAR 0 1
 803: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 804: LD_INT 0
 806: PPUSH
 807: PPUSH
 808: PPUSH
 809: PPUSH
 810: PPUSH
 811: PPUSH
 812: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 813: LD_ADDR_EXP 17
 817: PUSH
 818: LD_INT 9
 820: PUSH
 821: LD_INT 10
 823: PUSH
 824: LD_INT 11
 826: PUSH
 827: LD_INT 12
 829: PUSH
 830: LD_INT 13
 832: PUSH
 833: LD_INT 14
 835: PUSH
 836: LD_INT 15
 838: PUSH
 839: LD_INT 16
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 852: LD_ADDR_EXP 16
 856: PUSH
 857: LD_INT 18
 859: PUSH
 860: LD_INT 19
 862: PUSH
 863: LD_INT 20
 865: PUSH
 866: LD_INT 21
 868: PUSH
 869: LD_INT 22
 871: PUSH
 872: LD_INT 23
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_EXP 17
 887: UNION
 888: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 889: LD_VAR 0 1
 893: PUSH
 894: LD_INT 2
 896: EQUAL
 897: IFFALSE 909
// baseLevel := 1 else
 899: LD_ADDR_VAR 0 7
 903: PUSH
 904: LD_INT 1
 906: ST_TO_ADDR
 907: GO 923
// baseLevel := mpGameSettings [ 1 ] ;
 909: LD_ADDR_VAR 0 7
 913: PUSH
 914: LD_EXP 4
 918: PUSH
 919: LD_INT 1
 921: ARRAY
 922: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 923: LD_ADDR_EXP 22
 927: PUSH
 928: LD_EXP 4
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 937: LD_ADDR_EXP 23
 941: PUSH
 942: LD_EXP 4
 946: PUSH
 947: LD_INT 3
 949: ARRAY
 950: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 951: LD_ADDR_EXP 13
 955: PUSH
 956: LD_EXP 4
 960: PUSH
 961: LD_INT 4
 963: ARRAY
 964: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 965: LD_ADDR_EXP 25
 969: PUSH
 970: LD_EXP 4
 974: PUSH
 975: LD_INT 5
 977: ARRAY
 978: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 979: LD_ADDR_VAR 0 5
 983: PUSH
 984: LD_EXP 4
 988: PUSH
 989: LD_INT 6
 991: ARRAY
 992: PUSH
 993: LD_INT 0
 995: GREATER
 996: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 997: LD_ADDR_VAR 0 6
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 7
1009: ARRAY
1010: PUSH
1011: LD_INT 0
1013: GREATER
1014: ST_TO_ADDR
// if gameType = GameTypeKing then
1015: LD_VAR 0 1
1019: PUSH
1020: LD_INT 3
1022: EQUAL
1023: IFFALSE 1049
// begin mpKingArea := kingArea ;
1025: LD_ADDR_EXP 31
1029: PUSH
1030: LD_INT 64
1032: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1033: LD_ADDR_EXP 32
1037: PUSH
1038: LD_EXP 4
1042: PUSH
1043: LD_INT 8
1045: ARRAY
1046: ST_TO_ADDR
// end else
1047: GO 1065
// begin mpKingArea := 0 ;
1049: LD_ADDR_EXP 31
1053: PUSH
1054: LD_INT 0
1056: ST_TO_ADDR
// mpPoints := 0 ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1065: LD_ADDR_EXP 14
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 11
1077: ARRAY
1078: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1079: LD_ADDR_EXP 20
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 12
1091: ARRAY
1092: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1093: LD_ADDR_EXP 24
1097: PUSH
1098: LD_EXP 4
1102: PUSH
1103: LD_INT 13
1105: ARRAY
1106: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1107: LD_ADDR_EXP 30
1111: PUSH
1112: LD_EXP 4
1116: PUSH
1117: LD_INT 14
1119: ARRAY
1120: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1121: LD_ADDR_EXP 28
1125: PUSH
1126: LD_EXP 4
1130: PUSH
1131: LD_INT 15
1133: ARRAY
1134: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 17 ] ;
1135: LD_ADDR_EXP 26
1139: PUSH
1140: LD_EXP 4
1144: PUSH
1145: LD_INT 17
1147: ARRAY
1148: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 20 ] ;
1149: LD_ADDR_EXP 18
1153: PUSH
1154: LD_EXP 4
1158: PUSH
1159: LD_INT 20
1161: ARRAY
1162: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1163: LD_ADDR_EXP 29
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 2
1173: PUSH
1174: LD_INT 3
1176: PUSH
1177: LD_INT 4
1179: PUSH
1180: LD_INT 5
1182: PUSH
1183: LD_INT 6
1185: PUSH
1186: LD_INT 7
1188: PUSH
1189: LD_INT 8
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 5 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 2 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1202: LD_ADDR_VAR 0 8
1206: PUSH
1207: LD_INT 40
1209: PPUSH
1210: LD_INT 2
1212: PPUSH
1213: CALL 44283 0 2
1217: PUSH
1218: LD_INT 41
1220: PPUSH
1221: LD_INT 5
1223: PPUSH
1224: CALL 44283 0 2
1228: PUSH
1229: LD_INT 42
1231: PPUSH
1232: LD_INT 3
1234: PPUSH
1235: CALL 44283 0 2
1239: PUSH
1240: LD_INT 43
1242: PPUSH
1243: LD_INT 4
1245: PPUSH
1246: CALL 44283 0 2
1250: PUSH
1251: LD_INT 44
1253: PPUSH
1254: LD_INT 5
1256: PPUSH
1257: CALL 44283 0 2
1261: PUSH
1262: LD_INT 45
1264: PPUSH
1265: LD_INT 2
1267: PPUSH
1268: CALL 44283 0 2
1272: PUSH
1273: LD_INT 46
1275: PPUSH
1276: LD_INT 0
1278: PPUSH
1279: CALL 44283 0 2
1283: PUSH
1284: LD_INT 47
1286: PPUSH
1287: LD_INT 1
1289: PPUSH
1290: CALL 44283 0 2
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1305: LD_ADDR_VAR 0 3
1309: PUSH
1310: DOUBLE
1311: LD_INT 1
1313: DEC
1314: ST_TO_ADDR
1315: LD_VAR 0 8
1319: PPUSH
1320: CALL 4305 0 1
1324: PUSH
1325: FOR_TO
1326: IFFALSE 1430
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1328: LD_ADDR_EXP 19
1332: PUSH
1333: LD_EXP 19
1337: PPUSH
1338: LD_VAR 0 3
1342: PPUSH
1343: LD_VAR 0 8
1347: PUSH
1348: LD_VAR 0 3
1352: ARRAY
1353: PUSH
1354: LD_INT 1
1356: ARRAY
1357: PPUSH
1358: LD_VAR 0 8
1362: PUSH
1363: LD_VAR 0 3
1367: ARRAY
1368: PUSH
1369: LD_INT 3
1371: ARRAY
1372: PPUSH
1373: LD_INT 10
1375: PPUSH
1376: CALL_OW 272
1380: PUSH
1381: LD_VAR 0 8
1385: PUSH
1386: LD_VAR 0 3
1390: ARRAY
1391: PUSH
1392: LD_INT 2
1394: ARRAY
1395: PPUSH
1396: LD_VAR 0 8
1400: PUSH
1401: LD_VAR 0 3
1405: ARRAY
1406: PUSH
1407: LD_INT 3
1409: ARRAY
1410: PPUSH
1411: LD_INT 10
1413: PPUSH
1414: CALL_OW 273
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: PPUSH
1423: CALL_OW 1
1427: ST_TO_ADDR
1428: GO 1325
1430: POP
1431: POP
// if hasOil then
1432: LD_VAR 0 5
1436: IFFALSE 1575
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1438: LD_ADDR_VAR 0 4
1442: PUSH
1443: LD_EXP 4
1447: PUSH
1448: LD_INT 6
1450: ARRAY
1451: PUSH
1452: LD_INT 2
1454: EQUAL
1455: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1456: LD_ADDR_EXP 10
1460: PUSH
1461: LD_INT 24
1463: PPUSH
1464: LD_VAR 0 4
1468: PPUSH
1469: CALL 44116 0 2
1473: PUSH
1474: LD_INT 25
1476: PPUSH
1477: LD_VAR 0 4
1481: PPUSH
1482: CALL 44116 0 2
1486: PUSH
1487: LD_INT 26
1489: PPUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL 44116 0 2
1499: PUSH
1500: LD_INT 27
1502: PPUSH
1503: LD_VAR 0 4
1507: PPUSH
1508: CALL 44116 0 2
1512: PUSH
1513: LD_INT 28
1515: PPUSH
1516: LD_VAR 0 4
1520: PPUSH
1521: CALL 44116 0 2
1525: PUSH
1526: LD_INT 29
1528: PPUSH
1529: LD_VAR 0 4
1533: PPUSH
1534: CALL 44116 0 2
1538: PUSH
1539: LD_INT 30
1541: PPUSH
1542: LD_VAR 0 4
1546: PPUSH
1547: CALL 44116 0 2
1551: PUSH
1552: LD_INT 31
1554: PPUSH
1555: LD_VAR 0 4
1559: PPUSH
1560: CALL 44116 0 2
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: ST_TO_ADDR
// end ; if hasSib then
1575: LD_VAR 0 6
1579: IFFALSE 1718
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1581: LD_ADDR_VAR 0 4
1585: PUSH
1586: LD_EXP 4
1590: PUSH
1591: LD_INT 7
1593: ARRAY
1594: PUSH
1595: LD_INT 2
1597: EQUAL
1598: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1599: LD_ADDR_EXP 11
1603: PUSH
1604: LD_INT 32
1606: PPUSH
1607: LD_VAR 0 4
1611: PPUSH
1612: CALL 44116 0 2
1616: PUSH
1617: LD_INT 33
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL 44116 0 2
1629: PUSH
1630: LD_INT 34
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL 44116 0 2
1642: PUSH
1643: LD_INT 35
1645: PPUSH
1646: LD_VAR 0 4
1650: PPUSH
1651: CALL 44116 0 2
1655: PUSH
1656: LD_INT 36
1658: PPUSH
1659: LD_VAR 0 4
1663: PPUSH
1664: CALL 44116 0 2
1668: PUSH
1669: LD_INT 37
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL 44116 0 2
1681: PUSH
1682: LD_INT 38
1684: PPUSH
1685: LD_VAR 0 4
1689: PPUSH
1690: CALL 44116 0 2
1694: PUSH
1695: LD_INT 39
1697: PPUSH
1698: LD_VAR 0 4
1702: PPUSH
1703: CALL 44116 0 2
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1718: LD_VAR 0 7
1722: PUSH
1723: LD_INT 1
1725: GREATEREQUAL
1726: IFFALSE 1738
// mpDepots := startPos ;
1728: LD_ADDR_EXP 12
1732: PUSH
1733: LD_VAR 0 8
1737: ST_TO_ADDR
// if baseLevel >= 2 then
1738: LD_VAR 0 7
1742: PUSH
1743: LD_INT 2
1745: GREATEREQUAL
1746: IFFALSE 2035
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 4 ) ] ] ;
1748: LD_ADDR_EXP 15
1752: PUSH
1753: LD_INT 31
1755: PUSH
1756: LD_INT 48
1758: PPUSH
1759: LD_INT 5
1761: PPUSH
1762: CALL 44283 0 2
1766: ADD
1767: PUSH
1768: LD_INT 31
1770: PUSH
1771: LD_INT 49
1773: PPUSH
1774: LD_INT 4
1776: PPUSH
1777: CALL 44283 0 2
1781: ADD
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 31
1789: PUSH
1790: LD_INT 50
1792: PPUSH
1793: LD_INT 1
1795: PPUSH
1796: CALL 44283 0 2
1800: ADD
1801: PUSH
1802: LD_INT 31
1804: PUSH
1805: LD_INT 51
1807: PPUSH
1808: LD_INT 4
1810: PPUSH
1811: CALL 44283 0 2
1815: ADD
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: LD_INT 31
1823: PUSH
1824: LD_INT 52
1826: PPUSH
1827: LD_INT 0
1829: PPUSH
1830: CALL 44283 0 2
1834: ADD
1835: PUSH
1836: LD_INT 31
1838: PUSH
1839: LD_INT 53
1841: PPUSH
1842: LD_INT 0
1844: PPUSH
1845: CALL 44283 0 2
1849: ADD
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: LD_INT 31
1857: PUSH
1858: LD_INT 54
1860: PPUSH
1861: LD_INT 1
1863: PPUSH
1864: CALL 44283 0 2
1868: ADD
1869: PUSH
1870: LD_INT 31
1872: PUSH
1873: LD_INT 55
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL 44283 0 2
1883: ADD
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 31
1891: PUSH
1892: LD_INT 56
1894: PPUSH
1895: LD_INT 2
1897: PPUSH
1898: CALL 44283 0 2
1902: ADD
1903: PUSH
1904: LD_INT 31
1906: PUSH
1907: LD_INT 57
1909: PPUSH
1910: LD_INT 2
1912: PPUSH
1913: CALL 44283 0 2
1917: ADD
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 31
1925: PUSH
1926: LD_INT 58
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: CALL 44283 0 2
1936: ADD
1937: PUSH
1938: LD_INT 31
1940: PUSH
1941: LD_INT 59
1943: PPUSH
1944: LD_INT 4
1946: PPUSH
1947: CALL 44283 0 2
1951: ADD
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: LD_INT 31
1959: PUSH
1960: LD_INT 60
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: CALL 44283 0 2
1970: ADD
1971: PUSH
1972: LD_INT 31
1974: PUSH
1975: LD_INT 61
1977: PPUSH
1978: LD_INT 3
1980: PPUSH
1981: CALL 44283 0 2
1985: ADD
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PUSH
1991: LD_INT 31
1993: PUSH
1994: LD_INT 62
1996: PPUSH
1997: LD_INT 4
1999: PPUSH
2000: CALL 44283 0 2
2004: ADD
2005: PUSH
2006: LD_INT 31
2008: PUSH
2009: LD_INT 63
2011: PPUSH
2012: LD_INT 4
2014: PPUSH
2015: CALL 44283 0 2
2019: ADD
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: ST_TO_ADDR
// end ; end ;
2035: LD_VAR 0 2
2039: RET
// every 0 0$2 marked mpActive do var i , d , cratesTimeRate , cratesPerMinute ;
2040: GO 2042
2042: DISABLE
2043: LD_INT 0
2045: PPUSH
2046: PPUSH
2047: PPUSH
2048: PPUSH
// begin if not mpShipments then
2049: LD_EXP 25
2053: NOT
2054: IFFALSE 2058
// exit ;
2056: GO 2188
// case mpShipments of 1 :
2058: LD_EXP 25
2062: PUSH
2063: LD_INT 1
2065: DOUBLE
2066: EQUAL
2067: IFTRUE 2071
2069: GO 2082
2071: POP
// begin cratesPerMinute := 90 ;
2072: LD_ADDR_VAR 0 4
2076: PUSH
2077: LD_INT 90
2079: ST_TO_ADDR
// end ; 2 :
2080: GO 2140
2082: LD_INT 2
2084: DOUBLE
2085: EQUAL
2086: IFTRUE 2090
2088: GO 2101
2090: POP
// begin cratesPerMinute := 120 ;
2091: LD_ADDR_VAR 0 4
2095: PUSH
2096: LD_INT 120
2098: ST_TO_ADDR
// end ; 3 :
2099: GO 2140
2101: LD_INT 3
2103: DOUBLE
2104: EQUAL
2105: IFTRUE 2109
2107: GO 2120
2109: POP
// begin cratesPerMinute := 150 ;
2110: LD_ADDR_VAR 0 4
2114: PUSH
2115: LD_INT 150
2117: ST_TO_ADDR
// end ; 4 :
2118: GO 2140
2120: LD_INT 4
2122: DOUBLE
2123: EQUAL
2124: IFTRUE 2128
2126: GO 2139
2128: POP
// begin cratesPerMinute := 180 ;
2129: LD_ADDR_VAR 0 4
2133: PUSH
2134: LD_INT 180
2136: ST_TO_ADDR
// end ; end ;
2137: GO 2140
2139: POP
// if cratesPerMinute <= 50 then
2140: LD_VAR 0 4
2144: PUSH
2145: LD_INT 50
2147: LESSEQUAL
2148: IFFALSE 2160
// cratesTimeRate := 60 else
2150: LD_ADDR_VAR 0 3
2154: PUSH
2155: LD_INT 60
2157: ST_TO_ADDR
2158: GO 2188
// begin d := cratesPerMinute div 50 ;
2160: LD_ADDR_VAR 0 2
2164: PUSH
2165: LD_VAR 0 4
2169: PUSH
2170: LD_INT 50
2172: DIV
2173: ST_TO_ADDR
// cratesTimeRate := 60 div d ;
2174: LD_ADDR_VAR 0 3
2178: PUSH
2179: LD_INT 60
2181: PUSH
2182: LD_VAR 0 2
2186: DIV
2187: ST_TO_ADDR
// end ; end ; end_of_file
2188: PPOPN 4
2190: END
// on UnitDestroyed ( un ) do begin Multiplayer_UnitDestroyed ( un ) ;
2191: LD_VAR 0 1
2195: PPUSH
2196: CALL 48272 0 1
// end ; end_of_file
2200: PPOPN 1
2202: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2203: LD_INT 0
2205: PPUSH
2206: PPUSH
// if exist_mode then
2207: LD_VAR 0 2
2211: IFFALSE 2236
// unit := CreateCharacter ( prefix & ident ) else
2213: LD_ADDR_VAR 0 5
2217: PUSH
2218: LD_VAR 0 3
2222: PUSH
2223: LD_VAR 0 1
2227: STR
2228: PPUSH
2229: CALL_OW 34
2233: ST_TO_ADDR
2234: GO 2251
// unit := NewCharacter ( ident ) ;
2236: LD_ADDR_VAR 0 5
2240: PUSH
2241: LD_VAR 0 1
2245: PPUSH
2246: CALL_OW 25
2250: ST_TO_ADDR
// result := unit ;
2251: LD_ADDR_VAR 0 4
2255: PUSH
2256: LD_VAR 0 5
2260: ST_TO_ADDR
// end ;
2261: LD_VAR 0 4
2265: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2266: LD_INT 0
2268: PPUSH
2269: PPUSH
// if not side or not nation then
2270: LD_VAR 0 1
2274: NOT
2275: PUSH
2276: LD_VAR 0 2
2280: NOT
2281: OR
2282: IFFALSE 2286
// exit ;
2284: GO 3054
// case nation of nation_american :
2286: LD_VAR 0 2
2290: PUSH
2291: LD_INT 1
2293: DOUBLE
2294: EQUAL
2295: IFTRUE 2299
2297: GO 2513
2299: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2300: LD_ADDR_VAR 0 4
2304: PUSH
2305: LD_INT 35
2307: PUSH
2308: LD_INT 45
2310: PUSH
2311: LD_INT 46
2313: PUSH
2314: LD_INT 47
2316: PUSH
2317: LD_INT 82
2319: PUSH
2320: LD_INT 83
2322: PUSH
2323: LD_INT 84
2325: PUSH
2326: LD_INT 85
2328: PUSH
2329: LD_INT 86
2331: PUSH
2332: LD_INT 1
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: LD_INT 6
2340: PUSH
2341: LD_INT 15
2343: PUSH
2344: LD_INT 16
2346: PUSH
2347: LD_INT 7
2349: PUSH
2350: LD_INT 12
2352: PUSH
2353: LD_INT 13
2355: PUSH
2356: LD_INT 10
2358: PUSH
2359: LD_INT 14
2361: PUSH
2362: LD_INT 20
2364: PUSH
2365: LD_INT 21
2367: PUSH
2368: LD_INT 22
2370: PUSH
2371: LD_INT 25
2373: PUSH
2374: LD_INT 32
2376: PUSH
2377: LD_INT 27
2379: PUSH
2380: LD_INT 36
2382: PUSH
2383: LD_INT 69
2385: PUSH
2386: LD_INT 39
2388: PUSH
2389: LD_INT 34
2391: PUSH
2392: LD_INT 40
2394: PUSH
2395: LD_INT 48
2397: PUSH
2398: LD_INT 49
2400: PUSH
2401: LD_INT 50
2403: PUSH
2404: LD_INT 51
2406: PUSH
2407: LD_INT 52
2409: PUSH
2410: LD_INT 53
2412: PUSH
2413: LD_INT 54
2415: PUSH
2416: LD_INT 55
2418: PUSH
2419: LD_INT 56
2421: PUSH
2422: LD_INT 57
2424: PUSH
2425: LD_INT 58
2427: PUSH
2428: LD_INT 59
2430: PUSH
2431: LD_INT 60
2433: PUSH
2434: LD_INT 61
2436: PUSH
2437: LD_INT 62
2439: PUSH
2440: LD_INT 80
2442: PUSH
2443: LD_INT 82
2445: PUSH
2446: LD_INT 83
2448: PUSH
2449: LD_INT 84
2451: PUSH
2452: LD_INT 85
2454: PUSH
2455: LD_INT 86
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: ST_TO_ADDR
2511: GO 2978
2513: LD_INT 2
2515: DOUBLE
2516: EQUAL
2517: IFTRUE 2521
2519: GO 2747
2521: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
2522: LD_ADDR_VAR 0 4
2526: PUSH
2527: LD_INT 35
2529: PUSH
2530: LD_INT 45
2532: PUSH
2533: LD_INT 46
2535: PUSH
2536: LD_INT 47
2538: PUSH
2539: LD_INT 82
2541: PUSH
2542: LD_INT 83
2544: PUSH
2545: LD_INT 84
2547: PUSH
2548: LD_INT 85
2550: PUSH
2551: LD_INT 87
2553: PUSH
2554: LD_INT 70
2556: PUSH
2557: LD_INT 1
2559: PUSH
2560: LD_INT 11
2562: PUSH
2563: LD_INT 3
2565: PUSH
2566: LD_INT 4
2568: PUSH
2569: LD_INT 5
2571: PUSH
2572: LD_INT 6
2574: PUSH
2575: LD_INT 15
2577: PUSH
2578: LD_INT 18
2580: PUSH
2581: LD_INT 7
2583: PUSH
2584: LD_INT 17
2586: PUSH
2587: LD_INT 8
2589: PUSH
2590: LD_INT 20
2592: PUSH
2593: LD_INT 21
2595: PUSH
2596: LD_INT 22
2598: PUSH
2599: LD_INT 72
2601: PUSH
2602: LD_INT 26
2604: PUSH
2605: LD_INT 69
2607: PUSH
2608: LD_INT 39
2610: PUSH
2611: LD_INT 40
2613: PUSH
2614: LD_INT 41
2616: PUSH
2617: LD_INT 42
2619: PUSH
2620: LD_INT 43
2622: PUSH
2623: LD_INT 48
2625: PUSH
2626: LD_INT 49
2628: PUSH
2629: LD_INT 50
2631: PUSH
2632: LD_INT 51
2634: PUSH
2635: LD_INT 52
2637: PUSH
2638: LD_INT 53
2640: PUSH
2641: LD_INT 54
2643: PUSH
2644: LD_INT 55
2646: PUSH
2647: LD_INT 56
2649: PUSH
2650: LD_INT 60
2652: PUSH
2653: LD_INT 61
2655: PUSH
2656: LD_INT 62
2658: PUSH
2659: LD_INT 66
2661: PUSH
2662: LD_INT 67
2664: PUSH
2665: LD_INT 68
2667: PUSH
2668: LD_INT 81
2670: PUSH
2671: LD_INT 82
2673: PUSH
2674: LD_INT 83
2676: PUSH
2677: LD_INT 84
2679: PUSH
2680: LD_INT 85
2682: PUSH
2683: LD_INT 87
2685: PUSH
2686: LD_INT 88
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: LIST
2696: LIST
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: LIST
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: LIST
2736: LIST
2737: LIST
2738: LIST
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: LIST
2744: ST_TO_ADDR
2745: GO 2978
2747: LD_INT 3
2749: DOUBLE
2750: EQUAL
2751: IFTRUE 2755
2753: GO 2977
2755: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2756: LD_ADDR_VAR 0 4
2760: PUSH
2761: LD_INT 46
2763: PUSH
2764: LD_INT 47
2766: PUSH
2767: LD_INT 1
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: LD_INT 82
2775: PUSH
2776: LD_INT 83
2778: PUSH
2779: LD_INT 84
2781: PUSH
2782: LD_INT 85
2784: PUSH
2785: LD_INT 86
2787: PUSH
2788: LD_INT 11
2790: PUSH
2791: LD_INT 9
2793: PUSH
2794: LD_INT 20
2796: PUSH
2797: LD_INT 19
2799: PUSH
2800: LD_INT 21
2802: PUSH
2803: LD_INT 24
2805: PUSH
2806: LD_INT 22
2808: PUSH
2809: LD_INT 25
2811: PUSH
2812: LD_INT 28
2814: PUSH
2815: LD_INT 29
2817: PUSH
2818: LD_INT 30
2820: PUSH
2821: LD_INT 31
2823: PUSH
2824: LD_INT 37
2826: PUSH
2827: LD_INT 38
2829: PUSH
2830: LD_INT 32
2832: PUSH
2833: LD_INT 27
2835: PUSH
2836: LD_INT 33
2838: PUSH
2839: LD_INT 69
2841: PUSH
2842: LD_INT 39
2844: PUSH
2845: LD_INT 34
2847: PUSH
2848: LD_INT 40
2850: PUSH
2851: LD_INT 71
2853: PUSH
2854: LD_INT 23
2856: PUSH
2857: LD_INT 44
2859: PUSH
2860: LD_INT 48
2862: PUSH
2863: LD_INT 49
2865: PUSH
2866: LD_INT 50
2868: PUSH
2869: LD_INT 51
2871: PUSH
2872: LD_INT 52
2874: PUSH
2875: LD_INT 53
2877: PUSH
2878: LD_INT 54
2880: PUSH
2881: LD_INT 55
2883: PUSH
2884: LD_INT 56
2886: PUSH
2887: LD_INT 57
2889: PUSH
2890: LD_INT 58
2892: PUSH
2893: LD_INT 59
2895: PUSH
2896: LD_INT 63
2898: PUSH
2899: LD_INT 64
2901: PUSH
2902: LD_INT 65
2904: PUSH
2905: LD_INT 82
2907: PUSH
2908: LD_INT 83
2910: PUSH
2911: LD_INT 84
2913: PUSH
2914: LD_INT 85
2916: PUSH
2917: LD_INT 86
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: LIST
2924: LIST
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: LIST
2930: LIST
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: LIST
2936: LIST
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: LIST
2974: ST_TO_ADDR
2975: GO 2978
2977: POP
// if state > - 1 and state < 3 then
2978: LD_VAR 0 3
2982: PUSH
2983: LD_INT 1
2985: NEG
2986: GREATER
2987: PUSH
2988: LD_VAR 0 3
2992: PUSH
2993: LD_INT 3
2995: LESS
2996: AND
2997: IFFALSE 3054
// for i in result do
2999: LD_ADDR_VAR 0 5
3003: PUSH
3004: LD_VAR 0 4
3008: PUSH
3009: FOR_IN
3010: IFFALSE 3052
// if GetTech ( i , side ) <> state then
3012: LD_VAR 0 5
3016: PPUSH
3017: LD_VAR 0 1
3021: PPUSH
3022: CALL_OW 321
3026: PUSH
3027: LD_VAR 0 3
3031: NONEQUAL
3032: IFFALSE 3050
// result := result diff i ;
3034: LD_ADDR_VAR 0 4
3038: PUSH
3039: LD_VAR 0 4
3043: PUSH
3044: LD_VAR 0 5
3048: DIFF
3049: ST_TO_ADDR
3050: GO 3009
3052: POP
3053: POP
// end ;
3054: LD_VAR 0 4
3058: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3059: LD_INT 0
3061: PPUSH
3062: PPUSH
3063: PPUSH
// result := true ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_INT 1
3071: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3072: LD_ADDR_VAR 0 5
3076: PUSH
3077: LD_VAR 0 2
3081: PPUSH
3082: CALL_OW 480
3086: ST_TO_ADDR
// if not tmp then
3087: LD_VAR 0 5
3091: NOT
3092: IFFALSE 3096
// exit ;
3094: GO 3145
// for i in tmp do
3096: LD_ADDR_VAR 0 4
3100: PUSH
3101: LD_VAR 0 5
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3143
// if GetTech ( i , side ) <> state_researched then
3109: LD_VAR 0 4
3113: PPUSH
3114: LD_VAR 0 1
3118: PPUSH
3119: CALL_OW 321
3123: PUSH
3124: LD_INT 2
3126: NONEQUAL
3127: IFFALSE 3141
// begin result := false ;
3129: LD_ADDR_VAR 0 3
3133: PUSH
3134: LD_INT 0
3136: ST_TO_ADDR
// exit ;
3137: POP
3138: POP
3139: GO 3145
// end ;
3141: GO 3106
3143: POP
3144: POP
// end ;
3145: LD_VAR 0 3
3149: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3150: LD_INT 0
3152: PPUSH
3153: PPUSH
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
3163: PPUSH
3164: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3165: LD_VAR 0 1
3169: NOT
3170: PUSH
3171: LD_VAR 0 1
3175: PPUSH
3176: CALL_OW 257
3180: PUSH
3181: LD_INT 9
3183: NONEQUAL
3184: OR
3185: IFFALSE 3189
// exit ;
3187: GO 3762
// side := GetSide ( unit ) ;
3189: LD_ADDR_VAR 0 9
3193: PUSH
3194: LD_VAR 0 1
3198: PPUSH
3199: CALL_OW 255
3203: ST_TO_ADDR
// tech_space := tech_spacanom ;
3204: LD_ADDR_VAR 0 12
3208: PUSH
3209: LD_INT 29
3211: ST_TO_ADDR
// tech_time := tech_taurad ;
3212: LD_ADDR_VAR 0 13
3216: PUSH
3217: LD_INT 28
3219: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3220: LD_ADDR_VAR 0 11
3224: PUSH
3225: LD_VAR 0 1
3229: PPUSH
3230: CALL_OW 310
3234: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3235: LD_VAR 0 11
3239: PPUSH
3240: CALL_OW 247
3244: PUSH
3245: LD_INT 2
3247: EQUAL
3248: IFFALSE 3252
// exit ;
3250: GO 3762
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3252: LD_ADDR_VAR 0 8
3256: PUSH
3257: LD_INT 81
3259: PUSH
3260: LD_VAR 0 9
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: PUSH
3269: LD_INT 3
3271: PUSH
3272: LD_INT 21
3274: PUSH
3275: LD_INT 3
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PPUSH
3290: CALL_OW 69
3294: ST_TO_ADDR
// if not tmp then
3295: LD_VAR 0 8
3299: NOT
3300: IFFALSE 3304
// exit ;
3302: GO 3762
// if in_unit then
3304: LD_VAR 0 11
3308: IFFALSE 3332
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3310: LD_ADDR_VAR 0 10
3314: PUSH
3315: LD_VAR 0 8
3319: PPUSH
3320: LD_VAR 0 11
3324: PPUSH
3325: CALL_OW 74
3329: ST_TO_ADDR
3330: GO 3352
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3332: LD_ADDR_VAR 0 10
3336: PUSH
3337: LD_VAR 0 8
3341: PPUSH
3342: LD_VAR 0 1
3346: PPUSH
3347: CALL_OW 74
3351: ST_TO_ADDR
// if not enemy then
3352: LD_VAR 0 10
3356: NOT
3357: IFFALSE 3361
// exit ;
3359: GO 3762
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3361: LD_VAR 0 11
3365: PUSH
3366: LD_VAR 0 11
3370: PPUSH
3371: LD_VAR 0 10
3375: PPUSH
3376: CALL_OW 296
3380: PUSH
3381: LD_INT 13
3383: GREATER
3384: AND
3385: PUSH
3386: LD_VAR 0 1
3390: PPUSH
3391: LD_VAR 0 10
3395: PPUSH
3396: CALL_OW 296
3400: PUSH
3401: LD_INT 12
3403: GREATER
3404: OR
3405: IFFALSE 3409
// exit ;
3407: GO 3762
// missile := [ 1 ] ;
3409: LD_ADDR_VAR 0 14
3413: PUSH
3414: LD_INT 1
3416: PUSH
3417: EMPTY
3418: LIST
3419: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3420: LD_VAR 0 9
3424: PPUSH
3425: LD_VAR 0 12
3429: PPUSH
3430: CALL_OW 325
3434: IFFALSE 3463
// missile := Replace ( missile , missile + 1 , 2 ) ;
3436: LD_ADDR_VAR 0 14
3440: PUSH
3441: LD_VAR 0 14
3445: PPUSH
3446: LD_VAR 0 14
3450: PUSH
3451: LD_INT 1
3453: PLUS
3454: PPUSH
3455: LD_INT 2
3457: PPUSH
3458: CALL_OW 1
3462: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3463: LD_VAR 0 9
3467: PPUSH
3468: LD_VAR 0 13
3472: PPUSH
3473: CALL_OW 325
3477: PUSH
3478: LD_VAR 0 10
3482: PPUSH
3483: CALL_OW 255
3487: PPUSH
3488: LD_VAR 0 13
3492: PPUSH
3493: CALL_OW 325
3497: NOT
3498: AND
3499: IFFALSE 3528
// missile := Replace ( missile , missile + 1 , 3 ) ;
3501: LD_ADDR_VAR 0 14
3505: PUSH
3506: LD_VAR 0 14
3510: PPUSH
3511: LD_VAR 0 14
3515: PUSH
3516: LD_INT 1
3518: PLUS
3519: PPUSH
3520: LD_INT 3
3522: PPUSH
3523: CALL_OW 1
3527: ST_TO_ADDR
// if missile < 2 then
3528: LD_VAR 0 14
3532: PUSH
3533: LD_INT 2
3535: LESS
3536: IFFALSE 3540
// exit ;
3538: GO 3762
// x := GetX ( enemy ) ;
3540: LD_ADDR_VAR 0 4
3544: PUSH
3545: LD_VAR 0 10
3549: PPUSH
3550: CALL_OW 250
3554: ST_TO_ADDR
// y := GetY ( enemy ) ;
3555: LD_ADDR_VAR 0 5
3559: PUSH
3560: LD_VAR 0 10
3564: PPUSH
3565: CALL_OW 251
3569: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3570: LD_ADDR_VAR 0 6
3574: PUSH
3575: LD_VAR 0 4
3579: PUSH
3580: LD_INT 1
3582: NEG
3583: PPUSH
3584: LD_INT 1
3586: PPUSH
3587: CALL_OW 12
3591: PLUS
3592: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3593: LD_ADDR_VAR 0 7
3597: PUSH
3598: LD_VAR 0 5
3602: PUSH
3603: LD_INT 1
3605: NEG
3606: PPUSH
3607: LD_INT 1
3609: PPUSH
3610: CALL_OW 12
3614: PLUS
3615: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3616: LD_VAR 0 6
3620: PPUSH
3621: LD_VAR 0 7
3625: PPUSH
3626: CALL_OW 488
3630: NOT
3631: IFFALSE 3653
// begin _x := x ;
3633: LD_ADDR_VAR 0 6
3637: PUSH
3638: LD_VAR 0 4
3642: ST_TO_ADDR
// _y := y ;
3643: LD_ADDR_VAR 0 7
3647: PUSH
3648: LD_VAR 0 5
3652: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3653: LD_ADDR_VAR 0 3
3657: PUSH
3658: LD_INT 1
3660: PPUSH
3661: LD_VAR 0 14
3665: PPUSH
3666: CALL_OW 12
3670: ST_TO_ADDR
// case i of 1 :
3671: LD_VAR 0 3
3675: PUSH
3676: LD_INT 1
3678: DOUBLE
3679: EQUAL
3680: IFTRUE 3684
3682: GO 3701
3684: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3685: LD_VAR 0 1
3689: PPUSH
3690: LD_VAR 0 10
3694: PPUSH
3695: CALL_OW 115
3699: GO 3762
3701: LD_INT 2
3703: DOUBLE
3704: EQUAL
3705: IFTRUE 3709
3707: GO 3731
3709: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3710: LD_VAR 0 1
3714: PPUSH
3715: LD_VAR 0 6
3719: PPUSH
3720: LD_VAR 0 7
3724: PPUSH
3725: CALL_OW 153
3729: GO 3762
3731: LD_INT 3
3733: DOUBLE
3734: EQUAL
3735: IFTRUE 3739
3737: GO 3761
3739: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3740: LD_VAR 0 1
3744: PPUSH
3745: LD_VAR 0 6
3749: PPUSH
3750: LD_VAR 0 7
3754: PPUSH
3755: CALL_OW 154
3759: GO 3762
3761: POP
// end ;
3762: LD_VAR 0 2
3766: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3767: LD_INT 0
3769: PPUSH
3770: PPUSH
3771: PPUSH
3772: PPUSH
3773: PPUSH
3774: PPUSH
// if not unit or not building then
3775: LD_VAR 0 1
3779: NOT
3780: PUSH
3781: LD_VAR 0 2
3785: NOT
3786: OR
3787: IFFALSE 3791
// exit ;
3789: GO 3949
// x := GetX ( building ) ;
3791: LD_ADDR_VAR 0 5
3795: PUSH
3796: LD_VAR 0 2
3800: PPUSH
3801: CALL_OW 250
3805: ST_TO_ADDR
// y := GetY ( building ) ;
3806: LD_ADDR_VAR 0 6
3810: PUSH
3811: LD_VAR 0 2
3815: PPUSH
3816: CALL_OW 251
3820: ST_TO_ADDR
// for i = 0 to 5 do
3821: LD_ADDR_VAR 0 4
3825: PUSH
3826: DOUBLE
3827: LD_INT 0
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 5
3833: PUSH
3834: FOR_TO
3835: IFFALSE 3947
// begin _x := ShiftX ( x , i , 3 ) ;
3837: LD_ADDR_VAR 0 7
3841: PUSH
3842: LD_VAR 0 5
3846: PPUSH
3847: LD_VAR 0 4
3851: PPUSH
3852: LD_INT 3
3854: PPUSH
3855: CALL_OW 272
3859: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3860: LD_ADDR_VAR 0 8
3864: PUSH
3865: LD_VAR 0 6
3869: PPUSH
3870: LD_VAR 0 4
3874: PPUSH
3875: LD_INT 3
3877: PPUSH
3878: CALL_OW 273
3882: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3883: LD_VAR 0 7
3887: PPUSH
3888: LD_VAR 0 8
3892: PPUSH
3893: CALL_OW 488
3897: NOT
3898: IFFALSE 3902
// continue ;
3900: GO 3834
// if HexInfo ( _x , _y ) = 0 then
3902: LD_VAR 0 7
3906: PPUSH
3907: LD_VAR 0 8
3911: PPUSH
3912: CALL_OW 428
3916: PUSH
3917: LD_INT 0
3919: EQUAL
3920: IFFALSE 3945
// begin ComMoveXY ( unit , _x , _y ) ;
3922: LD_VAR 0 1
3926: PPUSH
3927: LD_VAR 0 7
3931: PPUSH
3932: LD_VAR 0 8
3936: PPUSH
3937: CALL_OW 111
// exit ;
3941: POP
3942: POP
3943: GO 3949
// end ; end ;
3945: GO 3834
3947: POP
3948: POP
// end ;
3949: LD_VAR 0 3
3953: RET
// export function ScanBase ( side , base_area ) ; begin
3954: LD_INT 0
3956: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3957: LD_ADDR_VAR 0 3
3961: PUSH
3962: LD_VAR 0 2
3966: PPUSH
3967: LD_INT 81
3969: PUSH
3970: LD_VAR 0 1
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PPUSH
3979: CALL_OW 70
3983: ST_TO_ADDR
// end ;
3984: LD_VAR 0 3
3988: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3989: LD_INT 0
3991: PPUSH
3992: PPUSH
3993: PPUSH
3994: PPUSH
// result := false ;
3995: LD_ADDR_VAR 0 2
3999: PUSH
4000: LD_INT 0
4002: ST_TO_ADDR
// side := GetSide ( unit ) ;
4003: LD_ADDR_VAR 0 3
4007: PUSH
4008: LD_VAR 0 1
4012: PPUSH
4013: CALL_OW 255
4017: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4018: LD_ADDR_VAR 0 4
4022: PUSH
4023: LD_VAR 0 1
4027: PPUSH
4028: CALL_OW 248
4032: ST_TO_ADDR
// case nat of 1 :
4033: LD_VAR 0 4
4037: PUSH
4038: LD_INT 1
4040: DOUBLE
4041: EQUAL
4042: IFTRUE 4046
4044: GO 4057
4046: POP
// tech := tech_lassight ; 2 :
4047: LD_ADDR_VAR 0 5
4051: PUSH
4052: LD_INT 12
4054: ST_TO_ADDR
4055: GO 4096
4057: LD_INT 2
4059: DOUBLE
4060: EQUAL
4061: IFTRUE 4065
4063: GO 4076
4065: POP
// tech := tech_mortar ; 3 :
4066: LD_ADDR_VAR 0 5
4070: PUSH
4071: LD_INT 41
4073: ST_TO_ADDR
4074: GO 4096
4076: LD_INT 3
4078: DOUBLE
4079: EQUAL
4080: IFTRUE 4084
4082: GO 4095
4084: POP
// tech := tech_bazooka ; end ;
4085: LD_ADDR_VAR 0 5
4089: PUSH
4090: LD_INT 44
4092: ST_TO_ADDR
4093: GO 4096
4095: POP
// if Researched ( side , tech ) then
4096: LD_VAR 0 3
4100: PPUSH
4101: LD_VAR 0 5
4105: PPUSH
4106: CALL_OW 325
4110: IFFALSE 4137
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4112: LD_ADDR_VAR 0 2
4116: PUSH
4117: LD_INT 5
4119: PUSH
4120: LD_INT 8
4122: PUSH
4123: LD_INT 9
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: PUSH
4131: LD_VAR 0 4
4135: ARRAY
4136: ST_TO_ADDR
// end ;
4137: LD_VAR 0 2
4141: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4142: LD_INT 0
4144: PPUSH
4145: PPUSH
4146: PPUSH
// if not mines then
4147: LD_VAR 0 2
4151: NOT
4152: IFFALSE 4156
// exit ;
4154: GO 4300
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4156: LD_ADDR_VAR 0 5
4160: PUSH
4161: LD_INT 81
4163: PUSH
4164: LD_VAR 0 1
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 3
4175: PUSH
4176: LD_INT 21
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PPUSH
4194: CALL_OW 69
4198: ST_TO_ADDR
// for i in mines do
4199: LD_ADDR_VAR 0 4
4203: PUSH
4204: LD_VAR 0 2
4208: PUSH
4209: FOR_IN
4210: IFFALSE 4298
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4212: LD_VAR 0 4
4216: PUSH
4217: LD_INT 1
4219: ARRAY
4220: PPUSH
4221: LD_VAR 0 4
4225: PUSH
4226: LD_INT 2
4228: ARRAY
4229: PPUSH
4230: CALL_OW 458
4234: NOT
4235: IFFALSE 4239
// continue ;
4237: GO 4209
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4239: LD_VAR 0 4
4243: PUSH
4244: LD_INT 1
4246: ARRAY
4247: PPUSH
4248: LD_VAR 0 4
4252: PUSH
4253: LD_INT 2
4255: ARRAY
4256: PPUSH
4257: CALL_OW 428
4261: PUSH
4262: LD_VAR 0 5
4266: IN
4267: IFFALSE 4296
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4269: LD_VAR 0 4
4273: PUSH
4274: LD_INT 1
4276: ARRAY
4277: PPUSH
4278: LD_VAR 0 4
4282: PUSH
4283: LD_INT 2
4285: ARRAY
4286: PPUSH
4287: LD_VAR 0 1
4291: PPUSH
4292: CALL_OW 456
// end ;
4296: GO 4209
4298: POP
4299: POP
// end ;
4300: LD_VAR 0 3
4304: RET
// export function Count ( array ) ; begin
4305: LD_INT 0
4307: PPUSH
// result := array + 0 ;
4308: LD_ADDR_VAR 0 2
4312: PUSH
4313: LD_VAR 0 1
4317: PUSH
4318: LD_INT 0
4320: PLUS
4321: ST_TO_ADDR
// end ;
4322: LD_VAR 0 2
4326: RET
// export function IsEmpty ( building ) ; begin
4327: LD_INT 0
4329: PPUSH
// if not building then
4330: LD_VAR 0 1
4334: NOT
4335: IFFALSE 4339
// exit ;
4337: GO 4382
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4339: LD_ADDR_VAR 0 2
4343: PUSH
4344: LD_VAR 0 1
4348: PUSH
4349: LD_INT 22
4351: PUSH
4352: LD_VAR 0 1
4356: PPUSH
4357: CALL_OW 255
4361: PUSH
4362: EMPTY
4363: LIST
4364: LIST
4365: PUSH
4366: LD_INT 58
4368: PUSH
4369: EMPTY
4370: LIST
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: PPUSH
4376: CALL_OW 69
4380: IN
4381: ST_TO_ADDR
// end ;
4382: LD_VAR 0 2
4386: RET
// export function IsNotFull ( building ) ; var places ; begin
4387: LD_INT 0
4389: PPUSH
4390: PPUSH
// if not building then
4391: LD_VAR 0 1
4395: NOT
4396: IFFALSE 4400
// exit ;
4398: GO 4428
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
4400: LD_ADDR_VAR 0 2
4404: PUSH
4405: LD_VAR 0 1
4409: PPUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 62
4415: PUSH
4416: EMPTY
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 72
4427: ST_TO_ADDR
// end ;
4428: LD_VAR 0 2
4432: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4433: LD_INT 0
4435: PPUSH
4436: PPUSH
4437: PPUSH
4438: PPUSH
// tmp := [ ] ;
4439: LD_ADDR_VAR 0 3
4443: PUSH
4444: EMPTY
4445: ST_TO_ADDR
// list := [ ] ;
4446: LD_ADDR_VAR 0 5
4450: PUSH
4451: EMPTY
4452: ST_TO_ADDR
// for i = 16 to 25 do
4453: LD_ADDR_VAR 0 4
4457: PUSH
4458: DOUBLE
4459: LD_INT 16
4461: DEC
4462: ST_TO_ADDR
4463: LD_INT 25
4465: PUSH
4466: FOR_TO
4467: IFFALSE 4540
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4469: LD_ADDR_VAR 0 3
4473: PUSH
4474: LD_VAR 0 3
4478: PUSH
4479: LD_INT 22
4481: PUSH
4482: LD_VAR 0 1
4486: PPUSH
4487: CALL_OW 255
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 91
4498: PUSH
4499: LD_VAR 0 1
4503: PUSH
4504: LD_INT 6
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: PUSH
4512: LD_INT 30
4514: PUSH
4515: LD_VAR 0 4
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: PUSH
4529: EMPTY
4530: LIST
4531: PPUSH
4532: CALL_OW 69
4536: ADD
4537: ST_TO_ADDR
4538: GO 4466
4540: POP
4541: POP
// for i = 1 to tmp do
4542: LD_ADDR_VAR 0 4
4546: PUSH
4547: DOUBLE
4548: LD_INT 1
4550: DEC
4551: ST_TO_ADDR
4552: LD_VAR 0 3
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4646
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4560: LD_ADDR_VAR 0 5
4564: PUSH
4565: LD_VAR 0 5
4569: PUSH
4570: LD_VAR 0 3
4574: PUSH
4575: LD_VAR 0 4
4579: ARRAY
4580: PPUSH
4581: CALL_OW 266
4585: PUSH
4586: LD_VAR 0 3
4590: PUSH
4591: LD_VAR 0 4
4595: ARRAY
4596: PPUSH
4597: CALL_OW 250
4601: PUSH
4602: LD_VAR 0 3
4606: PUSH
4607: LD_VAR 0 4
4611: ARRAY
4612: PPUSH
4613: CALL_OW 251
4617: PUSH
4618: LD_VAR 0 3
4622: PUSH
4623: LD_VAR 0 4
4627: ARRAY
4628: PPUSH
4629: CALL_OW 254
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: PUSH
4640: EMPTY
4641: LIST
4642: ADD
4643: ST_TO_ADDR
4644: GO 4557
4646: POP
4647: POP
// result := list ;
4648: LD_ADDR_VAR 0 2
4652: PUSH
4653: LD_VAR 0 5
4657: ST_TO_ADDR
// end ;
4658: LD_VAR 0 2
4662: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4663: LD_INT 0
4665: PPUSH
4666: PPUSH
4667: PPUSH
4668: PPUSH
4669: PPUSH
4670: PPUSH
4671: PPUSH
// if not factory then
4672: LD_VAR 0 1
4676: NOT
4677: IFFALSE 4681
// exit ;
4679: GO 5274
// if control = control_apeman then
4681: LD_VAR 0 4
4685: PUSH
4686: LD_INT 5
4688: EQUAL
4689: IFFALSE 4798
// begin tmp := UnitsInside ( factory ) ;
4691: LD_ADDR_VAR 0 8
4695: PUSH
4696: LD_VAR 0 1
4700: PPUSH
4701: CALL_OW 313
4705: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4706: LD_VAR 0 8
4710: PPUSH
4711: LD_INT 25
4713: PUSH
4714: LD_INT 12
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PPUSH
4721: CALL_OW 72
4725: NOT
4726: IFFALSE 4736
// control := control_manual ;
4728: LD_ADDR_VAR 0 4
4732: PUSH
4733: LD_INT 1
4735: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4736: LD_ADDR_VAR 0 8
4740: PUSH
4741: LD_VAR 0 1
4745: PPUSH
4746: CALL 4433 0 1
4750: ST_TO_ADDR
// if tmp then
4751: LD_VAR 0 8
4755: IFFALSE 4798
// begin for i in tmp do
4757: LD_ADDR_VAR 0 7
4761: PUSH
4762: LD_VAR 0 8
4766: PUSH
4767: FOR_IN
4768: IFFALSE 4796
// if i [ 1 ] = b_ext_radio then
4770: LD_VAR 0 7
4774: PUSH
4775: LD_INT 1
4777: ARRAY
4778: PUSH
4779: LD_INT 22
4781: EQUAL
4782: IFFALSE 4794
// begin control := control_remote ;
4784: LD_ADDR_VAR 0 4
4788: PUSH
4789: LD_INT 2
4791: ST_TO_ADDR
// break ;
4792: GO 4796
// end ;
4794: GO 4767
4796: POP
4797: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4798: LD_VAR 0 1
4802: PPUSH
4803: LD_VAR 0 2
4807: PPUSH
4808: LD_VAR 0 3
4812: PPUSH
4813: LD_VAR 0 4
4817: PPUSH
4818: LD_VAR 0 5
4822: PPUSH
4823: CALL_OW 448
4827: IFFALSE 4862
// begin result := [ chassis , engine , control , weapon ] ;
4829: LD_ADDR_VAR 0 6
4833: PUSH
4834: LD_VAR 0 2
4838: PUSH
4839: LD_VAR 0 3
4843: PUSH
4844: LD_VAR 0 4
4848: PUSH
4849: LD_VAR 0 5
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: ST_TO_ADDR
// exit ;
4860: GO 5274
// end ; _chassis := AvailableChassisList ( factory ) ;
4862: LD_ADDR_VAR 0 9
4866: PUSH
4867: LD_VAR 0 1
4871: PPUSH
4872: CALL_OW 475
4876: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4877: LD_ADDR_VAR 0 11
4881: PUSH
4882: LD_VAR 0 1
4886: PPUSH
4887: CALL_OW 476
4891: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4892: LD_ADDR_VAR 0 12
4896: PUSH
4897: LD_VAR 0 1
4901: PPUSH
4902: CALL_OW 477
4906: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4907: LD_ADDR_VAR 0 10
4911: PUSH
4912: LD_VAR 0 1
4916: PPUSH
4917: CALL_OW 478
4921: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4922: LD_VAR 0 9
4926: NOT
4927: PUSH
4928: LD_VAR 0 11
4932: NOT
4933: OR
4934: PUSH
4935: LD_VAR 0 12
4939: NOT
4940: OR
4941: PUSH
4942: LD_VAR 0 10
4946: NOT
4947: OR
4948: IFFALSE 4983
// begin result := [ chassis , engine , control , weapon ] ;
4950: LD_ADDR_VAR 0 6
4954: PUSH
4955: LD_VAR 0 2
4959: PUSH
4960: LD_VAR 0 3
4964: PUSH
4965: LD_VAR 0 4
4969: PUSH
4970: LD_VAR 0 5
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: ST_TO_ADDR
// exit ;
4981: GO 5274
// end ; if not chassis in _chassis then
4983: LD_VAR 0 2
4987: PUSH
4988: LD_VAR 0 9
4992: IN
4993: NOT
4994: IFFALSE 5020
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4996: LD_ADDR_VAR 0 2
5000: PUSH
5001: LD_VAR 0 9
5005: PUSH
5006: LD_INT 1
5008: PPUSH
5009: LD_VAR 0 9
5013: PPUSH
5014: CALL_OW 12
5018: ARRAY
5019: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5020: LD_VAR 0 2
5024: PPUSH
5025: LD_VAR 0 3
5029: PPUSH
5030: CALL 5279 0 2
5034: NOT
5035: IFFALSE 5094
// repeat engine := _engine [ 1 ] ;
5037: LD_ADDR_VAR 0 3
5041: PUSH
5042: LD_VAR 0 11
5046: PUSH
5047: LD_INT 1
5049: ARRAY
5050: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5051: LD_ADDR_VAR 0 11
5055: PUSH
5056: LD_VAR 0 11
5060: PPUSH
5061: LD_INT 1
5063: PPUSH
5064: CALL_OW 3
5068: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5069: LD_VAR 0 2
5073: PPUSH
5074: LD_VAR 0 3
5078: PPUSH
5079: CALL 5279 0 2
5083: PUSH
5084: LD_VAR 0 11
5088: PUSH
5089: EMPTY
5090: EQUAL
5091: OR
5092: IFFALSE 5037
// if not control in _control then
5094: LD_VAR 0 4
5098: PUSH
5099: LD_VAR 0 12
5103: IN
5104: NOT
5105: IFFALSE 5131
// control := _control [ rand ( 1 , _control ) ] ;
5107: LD_ADDR_VAR 0 4
5111: PUSH
5112: LD_VAR 0 12
5116: PUSH
5117: LD_INT 1
5119: PPUSH
5120: LD_VAR 0 12
5124: PPUSH
5125: CALL_OW 12
5129: ARRAY
5130: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5131: LD_VAR 0 2
5135: PPUSH
5136: LD_VAR 0 5
5140: PPUSH
5141: CALL 5499 0 2
5145: NOT
5146: IFFALSE 5205
// repeat weapon := _weapon [ 1 ] ;
5148: LD_ADDR_VAR 0 5
5152: PUSH
5153: LD_VAR 0 10
5157: PUSH
5158: LD_INT 1
5160: ARRAY
5161: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5162: LD_ADDR_VAR 0 10
5166: PUSH
5167: LD_VAR 0 10
5171: PPUSH
5172: LD_INT 1
5174: PPUSH
5175: CALL_OW 3
5179: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5180: LD_VAR 0 2
5184: PPUSH
5185: LD_VAR 0 5
5189: PPUSH
5190: CALL 5499 0 2
5194: PUSH
5195: LD_VAR 0 10
5199: PUSH
5200: EMPTY
5201: EQUAL
5202: OR
5203: IFFALSE 5148
// result := [ ] ;
5205: LD_ADDR_VAR 0 6
5209: PUSH
5210: EMPTY
5211: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5212: LD_VAR 0 1
5216: PPUSH
5217: LD_VAR 0 2
5221: PPUSH
5222: LD_VAR 0 3
5226: PPUSH
5227: LD_VAR 0 4
5231: PPUSH
5232: LD_VAR 0 5
5236: PPUSH
5237: CALL_OW 448
5241: IFFALSE 5274
// result := [ chassis , engine , control , weapon ] ;
5243: LD_ADDR_VAR 0 6
5247: PUSH
5248: LD_VAR 0 2
5252: PUSH
5253: LD_VAR 0 3
5257: PUSH
5258: LD_VAR 0 4
5262: PUSH
5263: LD_VAR 0 5
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: ST_TO_ADDR
// end ;
5274: LD_VAR 0 6
5278: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5279: LD_INT 0
5281: PPUSH
// if not chassis or not engine then
5282: LD_VAR 0 1
5286: NOT
5287: PUSH
5288: LD_VAR 0 2
5292: NOT
5293: OR
5294: IFFALSE 5298
// exit ;
5296: GO 5494
// case engine of engine_solar :
5298: LD_VAR 0 2
5302: PUSH
5303: LD_INT 2
5305: DOUBLE
5306: EQUAL
5307: IFTRUE 5311
5309: GO 5349
5311: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5312: LD_ADDR_VAR 0 3
5316: PUSH
5317: LD_INT 11
5319: PUSH
5320: LD_INT 12
5322: PUSH
5323: LD_INT 13
5325: PUSH
5326: LD_INT 14
5328: PUSH
5329: LD_INT 1
5331: PUSH
5332: LD_INT 2
5334: PUSH
5335: LD_INT 3
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: ST_TO_ADDR
5347: GO 5478
5349: LD_INT 1
5351: DOUBLE
5352: EQUAL
5353: IFTRUE 5357
5355: GO 5419
5357: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5358: LD_ADDR_VAR 0 3
5362: PUSH
5363: LD_INT 11
5365: PUSH
5366: LD_INT 12
5368: PUSH
5369: LD_INT 13
5371: PUSH
5372: LD_INT 14
5374: PUSH
5375: LD_INT 1
5377: PUSH
5378: LD_INT 2
5380: PUSH
5381: LD_INT 3
5383: PUSH
5384: LD_INT 4
5386: PUSH
5387: LD_INT 5
5389: PUSH
5390: LD_INT 21
5392: PUSH
5393: LD_INT 23
5395: PUSH
5396: LD_INT 22
5398: PUSH
5399: LD_INT 24
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: ST_TO_ADDR
5417: GO 5478
5419: LD_INT 3
5421: DOUBLE
5422: EQUAL
5423: IFTRUE 5427
5425: GO 5477
5427: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5428: LD_ADDR_VAR 0 3
5432: PUSH
5433: LD_INT 13
5435: PUSH
5436: LD_INT 14
5438: PUSH
5439: LD_INT 2
5441: PUSH
5442: LD_INT 3
5444: PUSH
5445: LD_INT 4
5447: PUSH
5448: LD_INT 5
5450: PUSH
5451: LD_INT 21
5453: PUSH
5454: LD_INT 22
5456: PUSH
5457: LD_INT 23
5459: PUSH
5460: LD_INT 24
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: ST_TO_ADDR
5475: GO 5478
5477: POP
// result := ( chassis in result ) ;
5478: LD_ADDR_VAR 0 3
5482: PUSH
5483: LD_VAR 0 1
5487: PUSH
5488: LD_VAR 0 3
5492: IN
5493: ST_TO_ADDR
// end ;
5494: LD_VAR 0 3
5498: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5499: LD_INT 0
5501: PPUSH
// if not chassis or not weapon then
5502: LD_VAR 0 1
5506: NOT
5507: PUSH
5508: LD_VAR 0 2
5512: NOT
5513: OR
5514: IFFALSE 5518
// exit ;
5516: GO 6578
// case weapon of us_machine_gun :
5518: LD_VAR 0 2
5522: PUSH
5523: LD_INT 2
5525: DOUBLE
5526: EQUAL
5527: IFTRUE 5531
5529: GO 5561
5531: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5532: LD_ADDR_VAR 0 3
5536: PUSH
5537: LD_INT 1
5539: PUSH
5540: LD_INT 2
5542: PUSH
5543: LD_INT 3
5545: PUSH
5546: LD_INT 4
5548: PUSH
5549: LD_INT 5
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: ST_TO_ADDR
5559: GO 6562
5561: LD_INT 3
5563: DOUBLE
5564: EQUAL
5565: IFTRUE 5569
5567: GO 5599
5569: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5570: LD_ADDR_VAR 0 3
5574: PUSH
5575: LD_INT 1
5577: PUSH
5578: LD_INT 2
5580: PUSH
5581: LD_INT 3
5583: PUSH
5584: LD_INT 4
5586: PUSH
5587: LD_INT 5
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: ST_TO_ADDR
5597: GO 6562
5599: LD_INT 11
5601: DOUBLE
5602: EQUAL
5603: IFTRUE 5607
5605: GO 5637
5607: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5608: LD_ADDR_VAR 0 3
5612: PUSH
5613: LD_INT 1
5615: PUSH
5616: LD_INT 2
5618: PUSH
5619: LD_INT 3
5621: PUSH
5622: LD_INT 4
5624: PUSH
5625: LD_INT 5
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: ST_TO_ADDR
5635: GO 6562
5637: LD_INT 4
5639: DOUBLE
5640: EQUAL
5641: IFTRUE 5645
5643: GO 5671
5645: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5646: LD_ADDR_VAR 0 3
5650: PUSH
5651: LD_INT 2
5653: PUSH
5654: LD_INT 3
5656: PUSH
5657: LD_INT 4
5659: PUSH
5660: LD_INT 5
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: ST_TO_ADDR
5669: GO 6562
5671: LD_INT 5
5673: DOUBLE
5674: EQUAL
5675: IFTRUE 5679
5677: GO 5705
5679: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5680: LD_ADDR_VAR 0 3
5684: PUSH
5685: LD_INT 2
5687: PUSH
5688: LD_INT 3
5690: PUSH
5691: LD_INT 4
5693: PUSH
5694: LD_INT 5
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: ST_TO_ADDR
5703: GO 6562
5705: LD_INT 9
5707: DOUBLE
5708: EQUAL
5709: IFTRUE 5713
5711: GO 5739
5713: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5714: LD_ADDR_VAR 0 3
5718: PUSH
5719: LD_INT 2
5721: PUSH
5722: LD_INT 3
5724: PUSH
5725: LD_INT 4
5727: PUSH
5728: LD_INT 5
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: ST_TO_ADDR
5737: GO 6562
5739: LD_INT 7
5741: DOUBLE
5742: EQUAL
5743: IFTRUE 5747
5745: GO 5773
5747: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5748: LD_ADDR_VAR 0 3
5752: PUSH
5753: LD_INT 2
5755: PUSH
5756: LD_INT 3
5758: PUSH
5759: LD_INT 4
5761: PUSH
5762: LD_INT 5
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: ST_TO_ADDR
5771: GO 6562
5773: LD_INT 12
5775: DOUBLE
5776: EQUAL
5777: IFTRUE 5781
5779: GO 5807
5781: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5782: LD_ADDR_VAR 0 3
5786: PUSH
5787: LD_INT 2
5789: PUSH
5790: LD_INT 3
5792: PUSH
5793: LD_INT 4
5795: PUSH
5796: LD_INT 5
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: ST_TO_ADDR
5805: GO 6562
5807: LD_INT 13
5809: DOUBLE
5810: EQUAL
5811: IFTRUE 5815
5813: GO 5841
5815: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5816: LD_ADDR_VAR 0 3
5820: PUSH
5821: LD_INT 2
5823: PUSH
5824: LD_INT 3
5826: PUSH
5827: LD_INT 4
5829: PUSH
5830: LD_INT 5
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: ST_TO_ADDR
5839: GO 6562
5841: LD_INT 14
5843: DOUBLE
5844: EQUAL
5845: IFTRUE 5849
5847: GO 5867
5849: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5850: LD_ADDR_VAR 0 3
5854: PUSH
5855: LD_INT 4
5857: PUSH
5858: LD_INT 5
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: ST_TO_ADDR
5865: GO 6562
5867: LD_INT 6
5869: DOUBLE
5870: EQUAL
5871: IFTRUE 5875
5873: GO 5893
5875: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5876: LD_ADDR_VAR 0 3
5880: PUSH
5881: LD_INT 4
5883: PUSH
5884: LD_INT 5
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: ST_TO_ADDR
5891: GO 6562
5893: LD_INT 10
5895: DOUBLE
5896: EQUAL
5897: IFTRUE 5901
5899: GO 5919
5901: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5902: LD_ADDR_VAR 0 3
5906: PUSH
5907: LD_INT 4
5909: PUSH
5910: LD_INT 5
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: ST_TO_ADDR
5917: GO 6562
5919: LD_INT 22
5921: DOUBLE
5922: EQUAL
5923: IFTRUE 5927
5925: GO 5953
5927: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5928: LD_ADDR_VAR 0 3
5932: PUSH
5933: LD_INT 11
5935: PUSH
5936: LD_INT 12
5938: PUSH
5939: LD_INT 13
5941: PUSH
5942: LD_INT 14
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: ST_TO_ADDR
5951: GO 6562
5953: LD_INT 23
5955: DOUBLE
5956: EQUAL
5957: IFTRUE 5961
5959: GO 5987
5961: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5962: LD_ADDR_VAR 0 3
5966: PUSH
5967: LD_INT 11
5969: PUSH
5970: LD_INT 12
5972: PUSH
5973: LD_INT 13
5975: PUSH
5976: LD_INT 14
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: ST_TO_ADDR
5985: GO 6562
5987: LD_INT 24
5989: DOUBLE
5990: EQUAL
5991: IFTRUE 5995
5993: GO 6021
5995: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5996: LD_ADDR_VAR 0 3
6000: PUSH
6001: LD_INT 11
6003: PUSH
6004: LD_INT 12
6006: PUSH
6007: LD_INT 13
6009: PUSH
6010: LD_INT 14
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: ST_TO_ADDR
6019: GO 6562
6021: LD_INT 30
6023: DOUBLE
6024: EQUAL
6025: IFTRUE 6029
6027: GO 6055
6029: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6030: LD_ADDR_VAR 0 3
6034: PUSH
6035: LD_INT 11
6037: PUSH
6038: LD_INT 12
6040: PUSH
6041: LD_INT 13
6043: PUSH
6044: LD_INT 14
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: ST_TO_ADDR
6053: GO 6562
6055: LD_INT 25
6057: DOUBLE
6058: EQUAL
6059: IFTRUE 6063
6061: GO 6081
6063: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6064: LD_ADDR_VAR 0 3
6068: PUSH
6069: LD_INT 13
6071: PUSH
6072: LD_INT 14
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: ST_TO_ADDR
6079: GO 6562
6081: LD_INT 27
6083: DOUBLE
6084: EQUAL
6085: IFTRUE 6089
6087: GO 6107
6089: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6090: LD_ADDR_VAR 0 3
6094: PUSH
6095: LD_INT 13
6097: PUSH
6098: LD_INT 14
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: ST_TO_ADDR
6105: GO 6562
6107: LD_INT 92
6109: DOUBLE
6110: EQUAL
6111: IFTRUE 6115
6113: GO 6141
6115: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6116: LD_ADDR_VAR 0 3
6120: PUSH
6121: LD_INT 11
6123: PUSH
6124: LD_INT 12
6126: PUSH
6127: LD_INT 13
6129: PUSH
6130: LD_INT 14
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: ST_TO_ADDR
6139: GO 6562
6141: LD_INT 28
6143: DOUBLE
6144: EQUAL
6145: IFTRUE 6149
6147: GO 6167
6149: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6150: LD_ADDR_VAR 0 3
6154: PUSH
6155: LD_INT 13
6157: PUSH
6158: LD_INT 14
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: ST_TO_ADDR
6165: GO 6562
6167: LD_INT 29
6169: DOUBLE
6170: EQUAL
6171: IFTRUE 6175
6173: GO 6193
6175: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6176: LD_ADDR_VAR 0 3
6180: PUSH
6181: LD_INT 13
6183: PUSH
6184: LD_INT 14
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: ST_TO_ADDR
6191: GO 6562
6193: LD_INT 31
6195: DOUBLE
6196: EQUAL
6197: IFTRUE 6201
6199: GO 6219
6201: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6202: LD_ADDR_VAR 0 3
6206: PUSH
6207: LD_INT 13
6209: PUSH
6210: LD_INT 14
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: ST_TO_ADDR
6217: GO 6562
6219: LD_INT 26
6221: DOUBLE
6222: EQUAL
6223: IFTRUE 6227
6225: GO 6245
6227: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6228: LD_ADDR_VAR 0 3
6232: PUSH
6233: LD_INT 13
6235: PUSH
6236: LD_INT 14
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: ST_TO_ADDR
6243: GO 6562
6245: LD_INT 42
6247: DOUBLE
6248: EQUAL
6249: IFTRUE 6253
6251: GO 6279
6253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6254: LD_ADDR_VAR 0 3
6258: PUSH
6259: LD_INT 21
6261: PUSH
6262: LD_INT 22
6264: PUSH
6265: LD_INT 23
6267: PUSH
6268: LD_INT 24
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: ST_TO_ADDR
6277: GO 6562
6279: LD_INT 43
6281: DOUBLE
6282: EQUAL
6283: IFTRUE 6287
6285: GO 6313
6287: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6288: LD_ADDR_VAR 0 3
6292: PUSH
6293: LD_INT 21
6295: PUSH
6296: LD_INT 22
6298: PUSH
6299: LD_INT 23
6301: PUSH
6302: LD_INT 24
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: ST_TO_ADDR
6311: GO 6562
6313: LD_INT 44
6315: DOUBLE
6316: EQUAL
6317: IFTRUE 6321
6319: GO 6347
6321: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6322: LD_ADDR_VAR 0 3
6326: PUSH
6327: LD_INT 21
6329: PUSH
6330: LD_INT 22
6332: PUSH
6333: LD_INT 23
6335: PUSH
6336: LD_INT 24
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: ST_TO_ADDR
6345: GO 6562
6347: LD_INT 45
6349: DOUBLE
6350: EQUAL
6351: IFTRUE 6355
6353: GO 6381
6355: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6356: LD_ADDR_VAR 0 3
6360: PUSH
6361: LD_INT 21
6363: PUSH
6364: LD_INT 22
6366: PUSH
6367: LD_INT 23
6369: PUSH
6370: LD_INT 24
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: ST_TO_ADDR
6379: GO 6562
6381: LD_INT 49
6383: DOUBLE
6384: EQUAL
6385: IFTRUE 6389
6387: GO 6415
6389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6390: LD_ADDR_VAR 0 3
6394: PUSH
6395: LD_INT 21
6397: PUSH
6398: LD_INT 22
6400: PUSH
6401: LD_INT 23
6403: PUSH
6404: LD_INT 24
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: ST_TO_ADDR
6413: GO 6562
6415: LD_INT 51
6417: DOUBLE
6418: EQUAL
6419: IFTRUE 6423
6421: GO 6449
6423: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6424: LD_ADDR_VAR 0 3
6428: PUSH
6429: LD_INT 21
6431: PUSH
6432: LD_INT 22
6434: PUSH
6435: LD_INT 23
6437: PUSH
6438: LD_INT 24
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: ST_TO_ADDR
6447: GO 6562
6449: LD_INT 52
6451: DOUBLE
6452: EQUAL
6453: IFTRUE 6457
6455: GO 6483
6457: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6458: LD_ADDR_VAR 0 3
6462: PUSH
6463: LD_INT 21
6465: PUSH
6466: LD_INT 22
6468: PUSH
6469: LD_INT 23
6471: PUSH
6472: LD_INT 24
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: ST_TO_ADDR
6481: GO 6562
6483: LD_INT 53
6485: DOUBLE
6486: EQUAL
6487: IFTRUE 6491
6489: GO 6509
6491: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6492: LD_ADDR_VAR 0 3
6496: PUSH
6497: LD_INT 23
6499: PUSH
6500: LD_INT 24
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: ST_TO_ADDR
6507: GO 6562
6509: LD_INT 46
6511: DOUBLE
6512: EQUAL
6513: IFTRUE 6517
6515: GO 6535
6517: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6518: LD_ADDR_VAR 0 3
6522: PUSH
6523: LD_INT 23
6525: PUSH
6526: LD_INT 24
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: ST_TO_ADDR
6533: GO 6562
6535: LD_INT 47
6537: DOUBLE
6538: EQUAL
6539: IFTRUE 6543
6541: GO 6561
6543: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6544: LD_ADDR_VAR 0 3
6548: PUSH
6549: LD_INT 23
6551: PUSH
6552: LD_INT 24
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: ST_TO_ADDR
6559: GO 6562
6561: POP
// result := ( chassis in result ) ;
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: LD_VAR 0 1
6571: PUSH
6572: LD_VAR 0 3
6576: IN
6577: ST_TO_ADDR
// end ;
6578: LD_VAR 0 3
6582: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6583: LD_INT 0
6585: PPUSH
6586: PPUSH
6587: PPUSH
6588: PPUSH
6589: PPUSH
6590: PPUSH
6591: PPUSH
// result := array ;
6592: LD_ADDR_VAR 0 5
6596: PUSH
6597: LD_VAR 0 1
6601: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6602: LD_VAR 0 1
6606: NOT
6607: PUSH
6608: LD_VAR 0 2
6612: NOT
6613: OR
6614: PUSH
6615: LD_VAR 0 3
6619: NOT
6620: OR
6621: PUSH
6622: LD_VAR 0 2
6626: PUSH
6627: LD_VAR 0 1
6631: GREATER
6632: OR
6633: PUSH
6634: LD_VAR 0 3
6638: PUSH
6639: LD_VAR 0 1
6643: GREATER
6644: OR
6645: IFFALSE 6649
// exit ;
6647: GO 6945
// if direction then
6649: LD_VAR 0 4
6653: IFFALSE 6717
// begin d := 1 ;
6655: LD_ADDR_VAR 0 9
6659: PUSH
6660: LD_INT 1
6662: ST_TO_ADDR
// if i_from > i_to then
6663: LD_VAR 0 2
6667: PUSH
6668: LD_VAR 0 3
6672: GREATER
6673: IFFALSE 6699
// length := ( array - i_from ) + i_to else
6675: LD_ADDR_VAR 0 11
6679: PUSH
6680: LD_VAR 0 1
6684: PUSH
6685: LD_VAR 0 2
6689: MINUS
6690: PUSH
6691: LD_VAR 0 3
6695: PLUS
6696: ST_TO_ADDR
6697: GO 6715
// length := i_to - i_from ;
6699: LD_ADDR_VAR 0 11
6703: PUSH
6704: LD_VAR 0 3
6708: PUSH
6709: LD_VAR 0 2
6713: MINUS
6714: ST_TO_ADDR
// end else
6715: GO 6778
// begin d := - 1 ;
6717: LD_ADDR_VAR 0 9
6721: PUSH
6722: LD_INT 1
6724: NEG
6725: ST_TO_ADDR
// if i_from > i_to then
6726: LD_VAR 0 2
6730: PUSH
6731: LD_VAR 0 3
6735: GREATER
6736: IFFALSE 6756
// length := i_from - i_to else
6738: LD_ADDR_VAR 0 11
6742: PUSH
6743: LD_VAR 0 2
6747: PUSH
6748: LD_VAR 0 3
6752: MINUS
6753: ST_TO_ADDR
6754: GO 6778
// length := ( array - i_to ) + i_from ;
6756: LD_ADDR_VAR 0 11
6760: PUSH
6761: LD_VAR 0 1
6765: PUSH
6766: LD_VAR 0 3
6770: MINUS
6771: PUSH
6772: LD_VAR 0 2
6776: PLUS
6777: ST_TO_ADDR
// end ; if not length then
6778: LD_VAR 0 11
6782: NOT
6783: IFFALSE 6787
// exit ;
6785: GO 6945
// tmp := array ;
6787: LD_ADDR_VAR 0 10
6791: PUSH
6792: LD_VAR 0 1
6796: ST_TO_ADDR
// for i = 1 to length do
6797: LD_ADDR_VAR 0 6
6801: PUSH
6802: DOUBLE
6803: LD_INT 1
6805: DEC
6806: ST_TO_ADDR
6807: LD_VAR 0 11
6811: PUSH
6812: FOR_TO
6813: IFFALSE 6933
// begin for j = 1 to array do
6815: LD_ADDR_VAR 0 7
6819: PUSH
6820: DOUBLE
6821: LD_INT 1
6823: DEC
6824: ST_TO_ADDR
6825: LD_VAR 0 1
6829: PUSH
6830: FOR_TO
6831: IFFALSE 6919
// begin k := j + d ;
6833: LD_ADDR_VAR 0 8
6837: PUSH
6838: LD_VAR 0 7
6842: PUSH
6843: LD_VAR 0 9
6847: PLUS
6848: ST_TO_ADDR
// if k > array then
6849: LD_VAR 0 8
6853: PUSH
6854: LD_VAR 0 1
6858: GREATER
6859: IFFALSE 6869
// k := 1 ;
6861: LD_ADDR_VAR 0 8
6865: PUSH
6866: LD_INT 1
6868: ST_TO_ADDR
// if not k then
6869: LD_VAR 0 8
6873: NOT
6874: IFFALSE 6886
// k := array ;
6876: LD_ADDR_VAR 0 8
6880: PUSH
6881: LD_VAR 0 1
6885: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6886: LD_ADDR_VAR 0 10
6890: PUSH
6891: LD_VAR 0 10
6895: PPUSH
6896: LD_VAR 0 8
6900: PPUSH
6901: LD_VAR 0 1
6905: PUSH
6906: LD_VAR 0 7
6910: ARRAY
6911: PPUSH
6912: CALL_OW 1
6916: ST_TO_ADDR
// end ;
6917: GO 6830
6919: POP
6920: POP
// array := tmp ;
6921: LD_ADDR_VAR 0 1
6925: PUSH
6926: LD_VAR 0 10
6930: ST_TO_ADDR
// end ;
6931: GO 6812
6933: POP
6934: POP
// result := array ;
6935: LD_ADDR_VAR 0 5
6939: PUSH
6940: LD_VAR 0 1
6944: ST_TO_ADDR
// end ;
6945: LD_VAR 0 5
6949: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6950: LD_INT 0
6952: PPUSH
6953: PPUSH
// result := 0 ;
6954: LD_ADDR_VAR 0 3
6958: PUSH
6959: LD_INT 0
6961: ST_TO_ADDR
// if not array or not value in array then
6962: LD_VAR 0 1
6966: NOT
6967: PUSH
6968: LD_VAR 0 2
6972: PUSH
6973: LD_VAR 0 1
6977: IN
6978: NOT
6979: OR
6980: IFFALSE 6984
// exit ;
6982: GO 7038
// for i = 1 to array do
6984: LD_ADDR_VAR 0 4
6988: PUSH
6989: DOUBLE
6990: LD_INT 1
6992: DEC
6993: ST_TO_ADDR
6994: LD_VAR 0 1
6998: PUSH
6999: FOR_TO
7000: IFFALSE 7036
// if value = array [ i ] then
7002: LD_VAR 0 2
7006: PUSH
7007: LD_VAR 0 1
7011: PUSH
7012: LD_VAR 0 4
7016: ARRAY
7017: EQUAL
7018: IFFALSE 7034
// begin result := i ;
7020: LD_ADDR_VAR 0 3
7024: PUSH
7025: LD_VAR 0 4
7029: ST_TO_ADDR
// exit ;
7030: POP
7031: POP
7032: GO 7038
// end ;
7034: GO 6999
7036: POP
7037: POP
// end ;
7038: LD_VAR 0 3
7042: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7043: LD_INT 0
7045: PPUSH
// vc_chassis := chassis ;
7046: LD_ADDR_OWVAR 37
7050: PUSH
7051: LD_VAR 0 1
7055: ST_TO_ADDR
// vc_engine := engine ;
7056: LD_ADDR_OWVAR 39
7060: PUSH
7061: LD_VAR 0 2
7065: ST_TO_ADDR
// vc_control := control ;
7066: LD_ADDR_OWVAR 38
7070: PUSH
7071: LD_VAR 0 3
7075: ST_TO_ADDR
// vc_weapon := weapon ;
7076: LD_ADDR_OWVAR 40
7080: PUSH
7081: LD_VAR 0 4
7085: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7086: LD_ADDR_OWVAR 41
7090: PUSH
7091: LD_VAR 0 5
7095: ST_TO_ADDR
// end ;
7096: LD_VAR 0 6
7100: RET
// export function WantPlant ( unit ) ; var task ; begin
7101: LD_INT 0
7103: PPUSH
7104: PPUSH
// result := false ;
7105: LD_ADDR_VAR 0 2
7109: PUSH
7110: LD_INT 0
7112: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7113: LD_ADDR_VAR 0 3
7117: PUSH
7118: LD_VAR 0 1
7122: PPUSH
7123: CALL_OW 437
7127: ST_TO_ADDR
// if task then
7128: LD_VAR 0 3
7132: IFFALSE 7160
// if task [ 1 ] [ 1 ] = p then
7134: LD_VAR 0 3
7138: PUSH
7139: LD_INT 1
7141: ARRAY
7142: PUSH
7143: LD_INT 1
7145: ARRAY
7146: PUSH
7147: LD_STRING p
7149: EQUAL
7150: IFFALSE 7160
// result := true ;
7152: LD_ADDR_VAR 0 2
7156: PUSH
7157: LD_INT 1
7159: ST_TO_ADDR
// end ;
7160: LD_VAR 0 2
7164: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7165: LD_INT 0
7167: PPUSH
7168: PPUSH
7169: PPUSH
7170: PPUSH
// if pos < 1 then
7171: LD_VAR 0 2
7175: PUSH
7176: LD_INT 1
7178: LESS
7179: IFFALSE 7183
// exit ;
7181: GO 7486
// if pos = 1 then
7183: LD_VAR 0 2
7187: PUSH
7188: LD_INT 1
7190: EQUAL
7191: IFFALSE 7224
// result := Replace ( arr , pos [ 1 ] , value ) else
7193: LD_ADDR_VAR 0 4
7197: PUSH
7198: LD_VAR 0 1
7202: PPUSH
7203: LD_VAR 0 2
7207: PUSH
7208: LD_INT 1
7210: ARRAY
7211: PPUSH
7212: LD_VAR 0 3
7216: PPUSH
7217: CALL_OW 1
7221: ST_TO_ADDR
7222: GO 7486
// begin tmp := arr ;
7224: LD_ADDR_VAR 0 6
7228: PUSH
7229: LD_VAR 0 1
7233: ST_TO_ADDR
// s_arr := [ tmp ] ;
7234: LD_ADDR_VAR 0 7
7238: PUSH
7239: LD_VAR 0 6
7243: PUSH
7244: EMPTY
7245: LIST
7246: ST_TO_ADDR
// for i = 1 to pos - 1 do
7247: LD_ADDR_VAR 0 5
7251: PUSH
7252: DOUBLE
7253: LD_INT 1
7255: DEC
7256: ST_TO_ADDR
7257: LD_VAR 0 2
7261: PUSH
7262: LD_INT 1
7264: MINUS
7265: PUSH
7266: FOR_TO
7267: IFFALSE 7312
// begin tmp := tmp [ pos [ i ] ] ;
7269: LD_ADDR_VAR 0 6
7273: PUSH
7274: LD_VAR 0 6
7278: PUSH
7279: LD_VAR 0 2
7283: PUSH
7284: LD_VAR 0 5
7288: ARRAY
7289: ARRAY
7290: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7291: LD_ADDR_VAR 0 7
7295: PUSH
7296: LD_VAR 0 7
7300: PUSH
7301: LD_VAR 0 6
7305: PUSH
7306: EMPTY
7307: LIST
7308: ADD
7309: ST_TO_ADDR
// end ;
7310: GO 7266
7312: POP
7313: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7314: LD_ADDR_VAR 0 6
7318: PUSH
7319: LD_VAR 0 6
7323: PPUSH
7324: LD_VAR 0 2
7328: PUSH
7329: LD_VAR 0 2
7333: ARRAY
7334: PPUSH
7335: LD_VAR 0 3
7339: PPUSH
7340: CALL_OW 1
7344: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7345: LD_ADDR_VAR 0 7
7349: PUSH
7350: LD_VAR 0 7
7354: PPUSH
7355: LD_VAR 0 7
7359: PPUSH
7360: LD_VAR 0 6
7364: PPUSH
7365: CALL_OW 1
7369: ST_TO_ADDR
// for i = s_arr downto 2 do
7370: LD_ADDR_VAR 0 5
7374: PUSH
7375: DOUBLE
7376: LD_VAR 0 7
7380: INC
7381: ST_TO_ADDR
7382: LD_INT 2
7384: PUSH
7385: FOR_DOWNTO
7386: IFFALSE 7470
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7388: LD_ADDR_VAR 0 6
7392: PUSH
7393: LD_VAR 0 7
7397: PUSH
7398: LD_VAR 0 5
7402: PUSH
7403: LD_INT 1
7405: MINUS
7406: ARRAY
7407: PPUSH
7408: LD_VAR 0 2
7412: PUSH
7413: LD_VAR 0 5
7417: PUSH
7418: LD_INT 1
7420: MINUS
7421: ARRAY
7422: PPUSH
7423: LD_VAR 0 7
7427: PUSH
7428: LD_VAR 0 5
7432: ARRAY
7433: PPUSH
7434: CALL_OW 1
7438: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7439: LD_ADDR_VAR 0 7
7443: PUSH
7444: LD_VAR 0 7
7448: PPUSH
7449: LD_VAR 0 5
7453: PUSH
7454: LD_INT 1
7456: MINUS
7457: PPUSH
7458: LD_VAR 0 6
7462: PPUSH
7463: CALL_OW 1
7467: ST_TO_ADDR
// end ;
7468: GO 7385
7470: POP
7471: POP
// result := s_arr [ 1 ] ;
7472: LD_ADDR_VAR 0 4
7476: PUSH
7477: LD_VAR 0 7
7481: PUSH
7482: LD_INT 1
7484: ARRAY
7485: ST_TO_ADDR
// end ; end ;
7486: LD_VAR 0 4
7490: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7491: LD_INT 0
7493: PPUSH
7494: PPUSH
// if not list then
7495: LD_VAR 0 1
7499: NOT
7500: IFFALSE 7504
// exit ;
7502: GO 7595
// i := list [ pos1 ] ;
7504: LD_ADDR_VAR 0 5
7508: PUSH
7509: LD_VAR 0 1
7513: PUSH
7514: LD_VAR 0 2
7518: ARRAY
7519: ST_TO_ADDR
// if not i then
7520: LD_VAR 0 5
7524: NOT
7525: IFFALSE 7529
// exit ;
7527: GO 7595
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7529: LD_ADDR_VAR 0 1
7533: PUSH
7534: LD_VAR 0 1
7538: PPUSH
7539: LD_VAR 0 2
7543: PPUSH
7544: LD_VAR 0 1
7548: PUSH
7549: LD_VAR 0 3
7553: ARRAY
7554: PPUSH
7555: CALL_OW 1
7559: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7560: LD_ADDR_VAR 0 1
7564: PUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: LD_VAR 0 3
7574: PPUSH
7575: LD_VAR 0 5
7579: PPUSH
7580: CALL_OW 1
7584: ST_TO_ADDR
// result := list ;
7585: LD_ADDR_VAR 0 4
7589: PUSH
7590: LD_VAR 0 1
7594: ST_TO_ADDR
// end ;
7595: LD_VAR 0 4
7599: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7600: LD_INT 0
7602: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7603: LD_ADDR_VAR 0 5
7607: PUSH
7608: LD_VAR 0 1
7612: PPUSH
7613: CALL_OW 250
7617: PPUSH
7618: LD_VAR 0 1
7622: PPUSH
7623: CALL_OW 251
7627: PPUSH
7628: LD_VAR 0 2
7632: PPUSH
7633: LD_VAR 0 3
7637: PPUSH
7638: LD_VAR 0 4
7642: PPUSH
7643: CALL 8021 0 5
7647: ST_TO_ADDR
// end ;
7648: LD_VAR 0 5
7652: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7653: LD_INT 0
7655: PPUSH
7656: PPUSH
7657: PPUSH
7658: PPUSH
// if not list or not unit then
7659: LD_VAR 0 2
7663: NOT
7664: PUSH
7665: LD_VAR 0 1
7669: NOT
7670: OR
7671: IFFALSE 7675
// exit ;
7673: GO 8016
// result := [ ] ;
7675: LD_ADDR_VAR 0 5
7679: PUSH
7680: EMPTY
7681: ST_TO_ADDR
// for i in list do
7682: LD_ADDR_VAR 0 6
7686: PUSH
7687: LD_VAR 0 2
7691: PUSH
7692: FOR_IN
7693: IFFALSE 7911
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7695: LD_ADDR_VAR 0 8
7699: PUSH
7700: LD_VAR 0 1
7704: PPUSH
7705: LD_VAR 0 6
7709: PUSH
7710: LD_INT 1
7712: ARRAY
7713: PPUSH
7714: LD_VAR 0 6
7718: PUSH
7719: LD_INT 2
7721: ARRAY
7722: PPUSH
7723: CALL_OW 297
7727: ST_TO_ADDR
// if not Count ( result ) then
7728: LD_VAR 0 5
7732: PPUSH
7733: CALL 4305 0 1
7737: NOT
7738: IFFALSE 7771
// begin result := Join ( result , [ i , tmp ] ) ;
7740: LD_ADDR_VAR 0 5
7744: PUSH
7745: LD_VAR 0 5
7749: PPUSH
7750: LD_VAR 0 6
7754: PUSH
7755: LD_VAR 0 8
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PPUSH
7764: CALL 39894 0 2
7768: ST_TO_ADDR
// continue ;
7769: GO 7692
// end ; if result [ result ] [ 2 ] <= tmp then
7771: LD_VAR 0 5
7775: PUSH
7776: LD_VAR 0 5
7780: ARRAY
7781: PUSH
7782: LD_INT 2
7784: ARRAY
7785: PUSH
7786: LD_VAR 0 8
7790: LESSEQUAL
7791: IFFALSE 7824
// result := Join ( result , [ i , tmp ] ) else
7793: LD_ADDR_VAR 0 5
7797: PUSH
7798: LD_VAR 0 5
7802: PPUSH
7803: LD_VAR 0 6
7807: PUSH
7808: LD_VAR 0 8
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PPUSH
7817: CALL 39894 0 2
7821: ST_TO_ADDR
7822: GO 7909
// begin for j := 1 to Count ( result ) do
7824: LD_ADDR_VAR 0 7
7828: PUSH
7829: DOUBLE
7830: LD_INT 1
7832: DEC
7833: ST_TO_ADDR
7834: LD_VAR 0 5
7838: PPUSH
7839: CALL 4305 0 1
7843: PUSH
7844: FOR_TO
7845: IFFALSE 7907
// begin if tmp < result [ j ] [ 2 ] then
7847: LD_VAR 0 8
7851: PUSH
7852: LD_VAR 0 5
7856: PUSH
7857: LD_VAR 0 7
7861: ARRAY
7862: PUSH
7863: LD_INT 2
7865: ARRAY
7866: LESS
7867: IFFALSE 7905
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7869: LD_ADDR_VAR 0 5
7873: PUSH
7874: LD_VAR 0 5
7878: PPUSH
7879: LD_VAR 0 7
7883: PPUSH
7884: LD_VAR 0 6
7888: PUSH
7889: LD_VAR 0 8
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PPUSH
7898: CALL_OW 2
7902: ST_TO_ADDR
// break ;
7903: GO 7907
// end ; end ;
7905: GO 7844
7907: POP
7908: POP
// end ; end ;
7909: GO 7692
7911: POP
7912: POP
// if result and not asc then
7913: LD_VAR 0 5
7917: PUSH
7918: LD_VAR 0 3
7922: NOT
7923: AND
7924: IFFALSE 7941
// result := ReverseArray ( result ) ;
7926: LD_ADDR_VAR 0 5
7930: PUSH
7931: LD_VAR 0 5
7935: PPUSH
7936: CALL 35181 0 1
7940: ST_TO_ADDR
// tmp := [ ] ;
7941: LD_ADDR_VAR 0 8
7945: PUSH
7946: EMPTY
7947: ST_TO_ADDR
// if mode then
7948: LD_VAR 0 4
7952: IFFALSE 8016
// begin for i := 1 to result do
7954: LD_ADDR_VAR 0 6
7958: PUSH
7959: DOUBLE
7960: LD_INT 1
7962: DEC
7963: ST_TO_ADDR
7964: LD_VAR 0 5
7968: PUSH
7969: FOR_TO
7970: IFFALSE 8004
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7972: LD_ADDR_VAR 0 8
7976: PUSH
7977: LD_VAR 0 8
7981: PPUSH
7982: LD_VAR 0 5
7986: PUSH
7987: LD_VAR 0 6
7991: ARRAY
7992: PUSH
7993: LD_INT 1
7995: ARRAY
7996: PPUSH
7997: CALL 39894 0 2
8001: ST_TO_ADDR
8002: GO 7969
8004: POP
8005: POP
// result := tmp ;
8006: LD_ADDR_VAR 0 5
8010: PUSH
8011: LD_VAR 0 8
8015: ST_TO_ADDR
// end ; end ;
8016: LD_VAR 0 5
8020: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8021: LD_INT 0
8023: PPUSH
8024: PPUSH
8025: PPUSH
8026: PPUSH
// if not list then
8027: LD_VAR 0 3
8031: NOT
8032: IFFALSE 8036
// exit ;
8034: GO 8424
// result := [ ] ;
8036: LD_ADDR_VAR 0 6
8040: PUSH
8041: EMPTY
8042: ST_TO_ADDR
// for i in list do
8043: LD_ADDR_VAR 0 7
8047: PUSH
8048: LD_VAR 0 3
8052: PUSH
8053: FOR_IN
8054: IFFALSE 8256
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8056: LD_ADDR_VAR 0 9
8060: PUSH
8061: LD_VAR 0 7
8065: PPUSH
8066: LD_VAR 0 1
8070: PPUSH
8071: LD_VAR 0 2
8075: PPUSH
8076: CALL_OW 297
8080: ST_TO_ADDR
// if not result then
8081: LD_VAR 0 6
8085: NOT
8086: IFFALSE 8112
// result := [ [ i , tmp ] ] else
8088: LD_ADDR_VAR 0 6
8092: PUSH
8093: LD_VAR 0 7
8097: PUSH
8098: LD_VAR 0 9
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: EMPTY
8108: LIST
8109: ST_TO_ADDR
8110: GO 8254
// begin if result [ result ] [ 2 ] < tmp then
8112: LD_VAR 0 6
8116: PUSH
8117: LD_VAR 0 6
8121: ARRAY
8122: PUSH
8123: LD_INT 2
8125: ARRAY
8126: PUSH
8127: LD_VAR 0 9
8131: LESS
8132: IFFALSE 8174
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8134: LD_ADDR_VAR 0 6
8138: PUSH
8139: LD_VAR 0 6
8143: PPUSH
8144: LD_VAR 0 6
8148: PUSH
8149: LD_INT 1
8151: PLUS
8152: PPUSH
8153: LD_VAR 0 7
8157: PUSH
8158: LD_VAR 0 9
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 2
8171: ST_TO_ADDR
8172: GO 8254
// for j = 1 to result do
8174: LD_ADDR_VAR 0 8
8178: PUSH
8179: DOUBLE
8180: LD_INT 1
8182: DEC
8183: ST_TO_ADDR
8184: LD_VAR 0 6
8188: PUSH
8189: FOR_TO
8190: IFFALSE 8252
// begin if tmp < result [ j ] [ 2 ] then
8192: LD_VAR 0 9
8196: PUSH
8197: LD_VAR 0 6
8201: PUSH
8202: LD_VAR 0 8
8206: ARRAY
8207: PUSH
8208: LD_INT 2
8210: ARRAY
8211: LESS
8212: IFFALSE 8250
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8214: LD_ADDR_VAR 0 6
8218: PUSH
8219: LD_VAR 0 6
8223: PPUSH
8224: LD_VAR 0 8
8228: PPUSH
8229: LD_VAR 0 7
8233: PUSH
8234: LD_VAR 0 9
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: PPUSH
8243: CALL_OW 2
8247: ST_TO_ADDR
// break ;
8248: GO 8252
// end ; end ;
8250: GO 8189
8252: POP
8253: POP
// end ; end ;
8254: GO 8053
8256: POP
8257: POP
// if result and not asc then
8258: LD_VAR 0 6
8262: PUSH
8263: LD_VAR 0 4
8267: NOT
8268: AND
8269: IFFALSE 8344
// begin tmp := result ;
8271: LD_ADDR_VAR 0 9
8275: PUSH
8276: LD_VAR 0 6
8280: ST_TO_ADDR
// for i = tmp downto 1 do
8281: LD_ADDR_VAR 0 7
8285: PUSH
8286: DOUBLE
8287: LD_VAR 0 9
8291: INC
8292: ST_TO_ADDR
8293: LD_INT 1
8295: PUSH
8296: FOR_DOWNTO
8297: IFFALSE 8342
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8299: LD_ADDR_VAR 0 6
8303: PUSH
8304: LD_VAR 0 6
8308: PPUSH
8309: LD_VAR 0 9
8313: PUSH
8314: LD_VAR 0 7
8318: MINUS
8319: PUSH
8320: LD_INT 1
8322: PLUS
8323: PPUSH
8324: LD_VAR 0 9
8328: PUSH
8329: LD_VAR 0 7
8333: ARRAY
8334: PPUSH
8335: CALL_OW 1
8339: ST_TO_ADDR
8340: GO 8296
8342: POP
8343: POP
// end ; tmp := [ ] ;
8344: LD_ADDR_VAR 0 9
8348: PUSH
8349: EMPTY
8350: ST_TO_ADDR
// if mode then
8351: LD_VAR 0 5
8355: IFFALSE 8424
// begin for i = 1 to result do
8357: LD_ADDR_VAR 0 7
8361: PUSH
8362: DOUBLE
8363: LD_INT 1
8365: DEC
8366: ST_TO_ADDR
8367: LD_VAR 0 6
8371: PUSH
8372: FOR_TO
8373: IFFALSE 8412
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8375: LD_ADDR_VAR 0 9
8379: PUSH
8380: LD_VAR 0 9
8384: PPUSH
8385: LD_VAR 0 7
8389: PPUSH
8390: LD_VAR 0 6
8394: PUSH
8395: LD_VAR 0 7
8399: ARRAY
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PPUSH
8405: CALL_OW 1
8409: ST_TO_ADDR
8410: GO 8372
8412: POP
8413: POP
// result := tmp ;
8414: LD_ADDR_VAR 0 6
8418: PUSH
8419: LD_VAR 0 9
8423: ST_TO_ADDR
// end ; end ;
8424: LD_VAR 0 6
8428: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8429: LD_INT 0
8431: PPUSH
8432: PPUSH
8433: PPUSH
8434: PPUSH
8435: PPUSH
8436: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8437: LD_ADDR_VAR 0 5
8441: PUSH
8442: LD_INT 0
8444: PUSH
8445: LD_INT 0
8447: PUSH
8448: LD_INT 0
8450: PUSH
8451: EMPTY
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: ST_TO_ADDR
// if not x or not y then
8459: LD_VAR 0 2
8463: NOT
8464: PUSH
8465: LD_VAR 0 3
8469: NOT
8470: OR
8471: IFFALSE 8475
// exit ;
8473: GO 10125
// if not range then
8475: LD_VAR 0 4
8479: NOT
8480: IFFALSE 8490
// range := 10 ;
8482: LD_ADDR_VAR 0 4
8486: PUSH
8487: LD_INT 10
8489: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8490: LD_ADDR_VAR 0 8
8494: PUSH
8495: LD_INT 81
8497: PUSH
8498: LD_VAR 0 1
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PUSH
8507: LD_INT 92
8509: PUSH
8510: LD_VAR 0 2
8514: PUSH
8515: LD_VAR 0 3
8519: PUSH
8520: LD_VAR 0 4
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 3
8533: PUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 3
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: LIST
8552: PPUSH
8553: CALL_OW 69
8557: ST_TO_ADDR
// if not tmp then
8558: LD_VAR 0 8
8562: NOT
8563: IFFALSE 8567
// exit ;
8565: GO 10125
// for i in tmp do
8567: LD_ADDR_VAR 0 6
8571: PUSH
8572: LD_VAR 0 8
8576: PUSH
8577: FOR_IN
8578: IFFALSE 10100
// begin points := [ 0 , 0 , 0 ] ;
8580: LD_ADDR_VAR 0 9
8584: PUSH
8585: LD_INT 0
8587: PUSH
8588: LD_INT 0
8590: PUSH
8591: LD_INT 0
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: LIST
8598: ST_TO_ADDR
// bpoints := 1 ;
8599: LD_ADDR_VAR 0 10
8603: PUSH
8604: LD_INT 1
8606: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8607: LD_VAR 0 6
8611: PPUSH
8612: CALL_OW 247
8616: PUSH
8617: LD_INT 1
8619: DOUBLE
8620: EQUAL
8621: IFTRUE 8625
8623: GO 9203
8625: POP
// begin if GetClass ( i ) = 1 then
8626: LD_VAR 0 6
8630: PPUSH
8631: CALL_OW 257
8635: PUSH
8636: LD_INT 1
8638: EQUAL
8639: IFFALSE 8660
// points := [ 10 , 5 , 3 ] ;
8641: LD_ADDR_VAR 0 9
8645: PUSH
8646: LD_INT 10
8648: PUSH
8649: LD_INT 5
8651: PUSH
8652: LD_INT 3
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: LIST
8659: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8660: LD_VAR 0 6
8664: PPUSH
8665: CALL_OW 257
8669: PUSH
8670: LD_INT 2
8672: PUSH
8673: LD_INT 3
8675: PUSH
8676: LD_INT 4
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: IN
8684: IFFALSE 8705
// points := [ 3 , 2 , 1 ] ;
8686: LD_ADDR_VAR 0 9
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: LD_INT 2
8696: PUSH
8697: LD_INT 1
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: LIST
8704: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8705: LD_VAR 0 6
8709: PPUSH
8710: CALL_OW 257
8714: PUSH
8715: LD_INT 5
8717: EQUAL
8718: IFFALSE 8739
// points := [ 130 , 5 , 2 ] ;
8720: LD_ADDR_VAR 0 9
8724: PUSH
8725: LD_INT 130
8727: PUSH
8728: LD_INT 5
8730: PUSH
8731: LD_INT 2
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: LIST
8738: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8739: LD_VAR 0 6
8743: PPUSH
8744: CALL_OW 257
8748: PUSH
8749: LD_INT 8
8751: EQUAL
8752: IFFALSE 8773
// points := [ 35 , 35 , 30 ] ;
8754: LD_ADDR_VAR 0 9
8758: PUSH
8759: LD_INT 35
8761: PUSH
8762: LD_INT 35
8764: PUSH
8765: LD_INT 30
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: LIST
8772: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8773: LD_VAR 0 6
8777: PPUSH
8778: CALL_OW 257
8782: PUSH
8783: LD_INT 9
8785: EQUAL
8786: IFFALSE 8807
// points := [ 20 , 55 , 40 ] ;
8788: LD_ADDR_VAR 0 9
8792: PUSH
8793: LD_INT 20
8795: PUSH
8796: LD_INT 55
8798: PUSH
8799: LD_INT 40
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: LIST
8806: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8807: LD_VAR 0 6
8811: PPUSH
8812: CALL_OW 257
8816: PUSH
8817: LD_INT 12
8819: PUSH
8820: LD_INT 16
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: IN
8827: IFFALSE 8848
// points := [ 5 , 3 , 2 ] ;
8829: LD_ADDR_VAR 0 9
8833: PUSH
8834: LD_INT 5
8836: PUSH
8837: LD_INT 3
8839: PUSH
8840: LD_INT 2
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8848: LD_VAR 0 6
8852: PPUSH
8853: CALL_OW 257
8857: PUSH
8858: LD_INT 17
8860: EQUAL
8861: IFFALSE 8882
// points := [ 100 , 50 , 75 ] ;
8863: LD_ADDR_VAR 0 9
8867: PUSH
8868: LD_INT 100
8870: PUSH
8871: LD_INT 50
8873: PUSH
8874: LD_INT 75
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: LIST
8881: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8882: LD_VAR 0 6
8886: PPUSH
8887: CALL_OW 257
8891: PUSH
8892: LD_INT 15
8894: EQUAL
8895: IFFALSE 8916
// points := [ 10 , 5 , 3 ] ;
8897: LD_ADDR_VAR 0 9
8901: PUSH
8902: LD_INT 10
8904: PUSH
8905: LD_INT 5
8907: PUSH
8908: LD_INT 3
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: LIST
8915: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8916: LD_VAR 0 6
8920: PPUSH
8921: CALL_OW 257
8925: PUSH
8926: LD_INT 14
8928: EQUAL
8929: IFFALSE 8950
// points := [ 10 , 0 , 0 ] ;
8931: LD_ADDR_VAR 0 9
8935: PUSH
8936: LD_INT 10
8938: PUSH
8939: LD_INT 0
8941: PUSH
8942: LD_INT 0
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: LIST
8949: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8950: LD_VAR 0 6
8954: PPUSH
8955: CALL_OW 257
8959: PUSH
8960: LD_INT 11
8962: EQUAL
8963: IFFALSE 8984
// points := [ 30 , 10 , 5 ] ;
8965: LD_ADDR_VAR 0 9
8969: PUSH
8970: LD_INT 30
8972: PUSH
8973: LD_INT 10
8975: PUSH
8976: LD_INT 5
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8984: LD_VAR 0 1
8988: PPUSH
8989: LD_INT 5
8991: PPUSH
8992: CALL_OW 321
8996: PUSH
8997: LD_INT 2
8999: EQUAL
9000: IFFALSE 9017
// bpoints := bpoints * 1.8 ;
9002: LD_ADDR_VAR 0 10
9006: PUSH
9007: LD_VAR 0 10
9011: PUSH
9012: LD_REAL  1.80000000000000E+0000
9015: MUL
9016: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9017: LD_VAR 0 6
9021: PPUSH
9022: CALL_OW 257
9026: PUSH
9027: LD_INT 1
9029: PUSH
9030: LD_INT 2
9032: PUSH
9033: LD_INT 3
9035: PUSH
9036: LD_INT 4
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: IN
9045: PUSH
9046: LD_VAR 0 1
9050: PPUSH
9051: LD_INT 51
9053: PPUSH
9054: CALL_OW 321
9058: PUSH
9059: LD_INT 2
9061: EQUAL
9062: AND
9063: IFFALSE 9080
// bpoints := bpoints * 1.2 ;
9065: LD_ADDR_VAR 0 10
9069: PUSH
9070: LD_VAR 0 10
9074: PUSH
9075: LD_REAL  1.20000000000000E+0000
9078: MUL
9079: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9080: LD_VAR 0 6
9084: PPUSH
9085: CALL_OW 257
9089: PUSH
9090: LD_INT 5
9092: PUSH
9093: LD_INT 7
9095: PUSH
9096: LD_INT 9
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: IN
9104: PUSH
9105: LD_VAR 0 1
9109: PPUSH
9110: LD_INT 52
9112: PPUSH
9113: CALL_OW 321
9117: PUSH
9118: LD_INT 2
9120: EQUAL
9121: AND
9122: IFFALSE 9139
// bpoints := bpoints * 1.5 ;
9124: LD_ADDR_VAR 0 10
9128: PUSH
9129: LD_VAR 0 10
9133: PUSH
9134: LD_REAL  1.50000000000000E+0000
9137: MUL
9138: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9139: LD_VAR 0 1
9143: PPUSH
9144: LD_INT 66
9146: PPUSH
9147: CALL_OW 321
9151: PUSH
9152: LD_INT 2
9154: EQUAL
9155: IFFALSE 9172
// bpoints := bpoints * 1.1 ;
9157: LD_ADDR_VAR 0 10
9161: PUSH
9162: LD_VAR 0 10
9166: PUSH
9167: LD_REAL  1.10000000000000E+0000
9170: MUL
9171: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9172: LD_ADDR_VAR 0 10
9176: PUSH
9177: LD_VAR 0 10
9181: PUSH
9182: LD_VAR 0 6
9186: PPUSH
9187: LD_INT 1
9189: PPUSH
9190: CALL_OW 259
9194: PUSH
9195: LD_REAL  1.15000000000000E+0000
9198: MUL
9199: MUL
9200: ST_TO_ADDR
// end ; unit_vehicle :
9201: GO 10029
9203: LD_INT 2
9205: DOUBLE
9206: EQUAL
9207: IFTRUE 9211
9209: GO 10017
9211: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9212: LD_VAR 0 6
9216: PPUSH
9217: CALL_OW 264
9221: PUSH
9222: LD_INT 2
9224: PUSH
9225: LD_INT 42
9227: PUSH
9228: LD_INT 24
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: IN
9236: IFFALSE 9257
// points := [ 25 , 5 , 3 ] ;
9238: LD_ADDR_VAR 0 9
9242: PUSH
9243: LD_INT 25
9245: PUSH
9246: LD_INT 5
9248: PUSH
9249: LD_INT 3
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9257: LD_VAR 0 6
9261: PPUSH
9262: CALL_OW 264
9266: PUSH
9267: LD_INT 4
9269: PUSH
9270: LD_INT 43
9272: PUSH
9273: LD_INT 25
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: LIST
9280: IN
9281: IFFALSE 9302
// points := [ 40 , 15 , 5 ] ;
9283: LD_ADDR_VAR 0 9
9287: PUSH
9288: LD_INT 40
9290: PUSH
9291: LD_INT 15
9293: PUSH
9294: LD_INT 5
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9302: LD_VAR 0 6
9306: PPUSH
9307: CALL_OW 264
9311: PUSH
9312: LD_INT 3
9314: PUSH
9315: LD_INT 23
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: IN
9322: IFFALSE 9343
// points := [ 7 , 25 , 8 ] ;
9324: LD_ADDR_VAR 0 9
9328: PUSH
9329: LD_INT 7
9331: PUSH
9332: LD_INT 25
9334: PUSH
9335: LD_INT 8
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9343: LD_VAR 0 6
9347: PPUSH
9348: CALL_OW 264
9352: PUSH
9353: LD_INT 5
9355: PUSH
9356: LD_INT 27
9358: PUSH
9359: LD_INT 44
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: LIST
9366: IN
9367: IFFALSE 9388
// points := [ 14 , 50 , 16 ] ;
9369: LD_ADDR_VAR 0 9
9373: PUSH
9374: LD_INT 14
9376: PUSH
9377: LD_INT 50
9379: PUSH
9380: LD_INT 16
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: LIST
9387: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9388: LD_VAR 0 6
9392: PPUSH
9393: CALL_OW 264
9397: PUSH
9398: LD_INT 6
9400: PUSH
9401: LD_INT 46
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: IN
9408: IFFALSE 9429
// points := [ 32 , 120 , 70 ] ;
9410: LD_ADDR_VAR 0 9
9414: PUSH
9415: LD_INT 32
9417: PUSH
9418: LD_INT 120
9420: PUSH
9421: LD_INT 70
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: LIST
9428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9429: LD_VAR 0 6
9433: PPUSH
9434: CALL_OW 264
9438: PUSH
9439: LD_INT 7
9441: PUSH
9442: LD_INT 28
9444: PUSH
9445: LD_INT 45
9447: PUSH
9448: LD_INT 92
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: IN
9457: IFFALSE 9478
// points := [ 35 , 20 , 45 ] ;
9459: LD_ADDR_VAR 0 9
9463: PUSH
9464: LD_INT 35
9466: PUSH
9467: LD_INT 20
9469: PUSH
9470: LD_INT 45
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: LIST
9477: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9478: LD_VAR 0 6
9482: PPUSH
9483: CALL_OW 264
9487: PUSH
9488: LD_INT 47
9490: PUSH
9491: EMPTY
9492: LIST
9493: IN
9494: IFFALSE 9515
// points := [ 67 , 45 , 75 ] ;
9496: LD_ADDR_VAR 0 9
9500: PUSH
9501: LD_INT 67
9503: PUSH
9504: LD_INT 45
9506: PUSH
9507: LD_INT 75
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9515: LD_VAR 0 6
9519: PPUSH
9520: CALL_OW 264
9524: PUSH
9525: LD_INT 26
9527: PUSH
9528: EMPTY
9529: LIST
9530: IN
9531: IFFALSE 9552
// points := [ 120 , 30 , 80 ] ;
9533: LD_ADDR_VAR 0 9
9537: PUSH
9538: LD_INT 120
9540: PUSH
9541: LD_INT 30
9543: PUSH
9544: LD_INT 80
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: LIST
9551: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9552: LD_VAR 0 6
9556: PPUSH
9557: CALL_OW 264
9561: PUSH
9562: LD_INT 22
9564: PUSH
9565: EMPTY
9566: LIST
9567: IN
9568: IFFALSE 9589
// points := [ 40 , 1 , 1 ] ;
9570: LD_ADDR_VAR 0 9
9574: PUSH
9575: LD_INT 40
9577: PUSH
9578: LD_INT 1
9580: PUSH
9581: LD_INT 1
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9589: LD_VAR 0 6
9593: PPUSH
9594: CALL_OW 264
9598: PUSH
9599: LD_INT 29
9601: PUSH
9602: EMPTY
9603: LIST
9604: IN
9605: IFFALSE 9626
// points := [ 70 , 200 , 400 ] ;
9607: LD_ADDR_VAR 0 9
9611: PUSH
9612: LD_INT 70
9614: PUSH
9615: LD_INT 200
9617: PUSH
9618: LD_INT 400
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: LIST
9625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9626: LD_VAR 0 6
9630: PPUSH
9631: CALL_OW 264
9635: PUSH
9636: LD_INT 14
9638: PUSH
9639: LD_INT 53
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: IN
9646: IFFALSE 9667
// points := [ 40 , 10 , 20 ] ;
9648: LD_ADDR_VAR 0 9
9652: PUSH
9653: LD_INT 40
9655: PUSH
9656: LD_INT 10
9658: PUSH
9659: LD_INT 20
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: LIST
9666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9667: LD_VAR 0 6
9671: PPUSH
9672: CALL_OW 264
9676: PUSH
9677: LD_INT 9
9679: PUSH
9680: EMPTY
9681: LIST
9682: IN
9683: IFFALSE 9704
// points := [ 5 , 70 , 20 ] ;
9685: LD_ADDR_VAR 0 9
9689: PUSH
9690: LD_INT 5
9692: PUSH
9693: LD_INT 70
9695: PUSH
9696: LD_INT 20
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: LIST
9703: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9704: LD_VAR 0 6
9708: PPUSH
9709: CALL_OW 264
9713: PUSH
9714: LD_INT 10
9716: PUSH
9717: EMPTY
9718: LIST
9719: IN
9720: IFFALSE 9741
// points := [ 35 , 110 , 70 ] ;
9722: LD_ADDR_VAR 0 9
9726: PUSH
9727: LD_INT 35
9729: PUSH
9730: LD_INT 110
9732: PUSH
9733: LD_INT 70
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9741: LD_VAR 0 6
9745: PPUSH
9746: CALL_OW 265
9750: PUSH
9751: LD_INT 25
9753: EQUAL
9754: IFFALSE 9775
// points := [ 80 , 65 , 100 ] ;
9756: LD_ADDR_VAR 0 9
9760: PUSH
9761: LD_INT 80
9763: PUSH
9764: LD_INT 65
9766: PUSH
9767: LD_INT 100
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9775: LD_VAR 0 6
9779: PPUSH
9780: CALL_OW 263
9784: PUSH
9785: LD_INT 1
9787: EQUAL
9788: IFFALSE 9823
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9790: LD_ADDR_VAR 0 10
9794: PUSH
9795: LD_VAR 0 10
9799: PUSH
9800: LD_VAR 0 6
9804: PPUSH
9805: CALL_OW 311
9809: PPUSH
9810: LD_INT 3
9812: PPUSH
9813: CALL_OW 259
9817: PUSH
9818: LD_INT 4
9820: MUL
9821: MUL
9822: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9823: LD_VAR 0 6
9827: PPUSH
9828: CALL_OW 263
9832: PUSH
9833: LD_INT 2
9835: EQUAL
9836: IFFALSE 9887
// begin j := IsControledBy ( i ) ;
9838: LD_ADDR_VAR 0 7
9842: PUSH
9843: LD_VAR 0 6
9847: PPUSH
9848: CALL_OW 312
9852: ST_TO_ADDR
// if j then
9853: LD_VAR 0 7
9857: IFFALSE 9887
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9859: LD_ADDR_VAR 0 10
9863: PUSH
9864: LD_VAR 0 10
9868: PUSH
9869: LD_VAR 0 7
9873: PPUSH
9874: LD_INT 3
9876: PPUSH
9877: CALL_OW 259
9881: PUSH
9882: LD_INT 3
9884: MUL
9885: MUL
9886: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9887: LD_VAR 0 6
9891: PPUSH
9892: CALL_OW 264
9896: PUSH
9897: LD_INT 5
9899: PUSH
9900: LD_INT 6
9902: PUSH
9903: LD_INT 46
9905: PUSH
9906: LD_INT 44
9908: PUSH
9909: LD_INT 47
9911: PUSH
9912: LD_INT 45
9914: PUSH
9915: LD_INT 28
9917: PUSH
9918: LD_INT 7
9920: PUSH
9921: LD_INT 27
9923: PUSH
9924: LD_INT 29
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: IN
9939: PUSH
9940: LD_VAR 0 1
9944: PPUSH
9945: LD_INT 52
9947: PPUSH
9948: CALL_OW 321
9952: PUSH
9953: LD_INT 2
9955: EQUAL
9956: AND
9957: IFFALSE 9974
// bpoints := bpoints * 1.2 ;
9959: LD_ADDR_VAR 0 10
9963: PUSH
9964: LD_VAR 0 10
9968: PUSH
9969: LD_REAL  1.20000000000000E+0000
9972: MUL
9973: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9974: LD_VAR 0 6
9978: PPUSH
9979: CALL_OW 264
9983: PUSH
9984: LD_INT 6
9986: PUSH
9987: LD_INT 46
9989: PUSH
9990: LD_INT 47
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: IN
9998: IFFALSE 10015
// bpoints := bpoints * 1.2 ;
10000: LD_ADDR_VAR 0 10
10004: PUSH
10005: LD_VAR 0 10
10009: PUSH
10010: LD_REAL  1.20000000000000E+0000
10013: MUL
10014: ST_TO_ADDR
// end ; unit_building :
10015: GO 10029
10017: LD_INT 3
10019: DOUBLE
10020: EQUAL
10021: IFTRUE 10025
10023: GO 10028
10025: POP
// ; end ;
10026: GO 10029
10028: POP
// for j = 1 to 3 do
10029: LD_ADDR_VAR 0 7
10033: PUSH
10034: DOUBLE
10035: LD_INT 1
10037: DEC
10038: ST_TO_ADDR
10039: LD_INT 3
10041: PUSH
10042: FOR_TO
10043: IFFALSE 10096
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10045: LD_ADDR_VAR 0 5
10049: PUSH
10050: LD_VAR 0 5
10054: PPUSH
10055: LD_VAR 0 7
10059: PPUSH
10060: LD_VAR 0 5
10064: PUSH
10065: LD_VAR 0 7
10069: ARRAY
10070: PUSH
10071: LD_VAR 0 9
10075: PUSH
10076: LD_VAR 0 7
10080: ARRAY
10081: PUSH
10082: LD_VAR 0 10
10086: MUL
10087: PLUS
10088: PPUSH
10089: CALL_OW 1
10093: ST_TO_ADDR
10094: GO 10042
10096: POP
10097: POP
// end ;
10098: GO 8577
10100: POP
10101: POP
// result := Replace ( result , 4 , tmp ) ;
10102: LD_ADDR_VAR 0 5
10106: PUSH
10107: LD_VAR 0 5
10111: PPUSH
10112: LD_INT 4
10114: PPUSH
10115: LD_VAR 0 8
10119: PPUSH
10120: CALL_OW 1
10124: ST_TO_ADDR
// end ;
10125: LD_VAR 0 5
10129: RET
// export function DangerAtRange ( unit , range ) ; begin
10130: LD_INT 0
10132: PPUSH
// if not unit then
10133: LD_VAR 0 1
10137: NOT
10138: IFFALSE 10142
// exit ;
10140: GO 10187
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10142: LD_ADDR_VAR 0 3
10146: PUSH
10147: LD_VAR 0 1
10151: PPUSH
10152: CALL_OW 255
10156: PPUSH
10157: LD_VAR 0 1
10161: PPUSH
10162: CALL_OW 250
10166: PPUSH
10167: LD_VAR 0 1
10171: PPUSH
10172: CALL_OW 251
10176: PPUSH
10177: LD_VAR 0 2
10181: PPUSH
10182: CALL 8429 0 4
10186: ST_TO_ADDR
// end ;
10187: LD_VAR 0 3
10191: RET
// export function DangerInArea ( side , area ) ; begin
10192: LD_INT 0
10194: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10195: LD_ADDR_VAR 0 3
10199: PUSH
10200: LD_VAR 0 2
10204: PPUSH
10205: LD_INT 81
10207: PUSH
10208: LD_VAR 0 1
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PPUSH
10217: CALL_OW 70
10221: ST_TO_ADDR
// end ;
10222: LD_VAR 0 3
10226: RET
// export function IsExtension ( b ) ; begin
10227: LD_INT 0
10229: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10230: LD_ADDR_VAR 0 2
10234: PUSH
10235: LD_VAR 0 1
10239: PUSH
10240: LD_INT 23
10242: PUSH
10243: LD_INT 20
10245: PUSH
10246: LD_INT 22
10248: PUSH
10249: LD_INT 17
10251: PUSH
10252: LD_INT 24
10254: PUSH
10255: LD_INT 21
10257: PUSH
10258: LD_INT 19
10260: PUSH
10261: LD_INT 16
10263: PUSH
10264: LD_INT 25
10266: PUSH
10267: LD_INT 18
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: IN
10282: ST_TO_ADDR
// end ;
10283: LD_VAR 0 2
10287: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10288: LD_INT 0
10290: PPUSH
10291: PPUSH
10292: PPUSH
// result := [ ] ;
10293: LD_ADDR_VAR 0 4
10297: PUSH
10298: EMPTY
10299: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10300: LD_ADDR_VAR 0 5
10304: PUSH
10305: LD_VAR 0 2
10309: PPUSH
10310: LD_INT 21
10312: PUSH
10313: LD_INT 3
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PPUSH
10320: CALL_OW 70
10324: ST_TO_ADDR
// if not tmp then
10325: LD_VAR 0 5
10329: NOT
10330: IFFALSE 10334
// exit ;
10332: GO 10398
// if checkLink then
10334: LD_VAR 0 3
10338: IFFALSE 10388
// begin for i in tmp do
10340: LD_ADDR_VAR 0 6
10344: PUSH
10345: LD_VAR 0 5
10349: PUSH
10350: FOR_IN
10351: IFFALSE 10386
// if GetBase ( i ) <> base then
10353: LD_VAR 0 6
10357: PPUSH
10358: CALL_OW 274
10362: PUSH
10363: LD_VAR 0 1
10367: NONEQUAL
10368: IFFALSE 10384
// ComLinkToBase ( base , i ) ;
10370: LD_VAR 0 1
10374: PPUSH
10375: LD_VAR 0 6
10379: PPUSH
10380: CALL_OW 169
10384: GO 10350
10386: POP
10387: POP
// end ; result := tmp ;
10388: LD_ADDR_VAR 0 4
10392: PUSH
10393: LD_VAR 0 5
10397: ST_TO_ADDR
// end ;
10398: LD_VAR 0 4
10402: RET
// export function ComComplete ( units , b ) ; var i ; begin
10403: LD_INT 0
10405: PPUSH
10406: PPUSH
// if not units then
10407: LD_VAR 0 1
10411: NOT
10412: IFFALSE 10416
// exit ;
10414: GO 10506
// for i in units do
10416: LD_ADDR_VAR 0 4
10420: PUSH
10421: LD_VAR 0 1
10425: PUSH
10426: FOR_IN
10427: IFFALSE 10504
// if BuildingStatus ( b ) = bs_build then
10429: LD_VAR 0 2
10433: PPUSH
10434: CALL_OW 461
10438: PUSH
10439: LD_INT 1
10441: EQUAL
10442: IFFALSE 10502
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10444: LD_VAR 0 4
10448: PPUSH
10449: LD_STRING h
10451: PUSH
10452: LD_VAR 0 2
10456: PPUSH
10457: CALL_OW 250
10461: PUSH
10462: LD_VAR 0 2
10466: PPUSH
10467: CALL_OW 251
10471: PUSH
10472: LD_VAR 0 2
10476: PUSH
10477: LD_INT 0
10479: PUSH
10480: LD_INT 0
10482: PUSH
10483: LD_INT 0
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: PUSH
10495: EMPTY
10496: LIST
10497: PPUSH
10498: CALL_OW 446
10502: GO 10426
10504: POP
10505: POP
// end ;
10506: LD_VAR 0 3
10510: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10511: LD_INT 0
10513: PPUSH
10514: PPUSH
10515: PPUSH
10516: PPUSH
10517: PPUSH
10518: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10519: LD_VAR 0 1
10523: NOT
10524: PUSH
10525: LD_VAR 0 1
10529: PPUSH
10530: CALL_OW 263
10534: PUSH
10535: LD_INT 2
10537: NONEQUAL
10538: OR
10539: IFFALSE 10543
// exit ;
10541: GO 10859
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10543: LD_ADDR_VAR 0 6
10547: PUSH
10548: LD_INT 22
10550: PUSH
10551: LD_VAR 0 1
10555: PPUSH
10556: CALL_OW 255
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: LD_INT 2
10567: PUSH
10568: LD_INT 30
10570: PUSH
10571: LD_INT 36
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 34
10580: PUSH
10581: LD_INT 31
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: LIST
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 69
10601: ST_TO_ADDR
// if not tmp then
10602: LD_VAR 0 6
10606: NOT
10607: IFFALSE 10611
// exit ;
10609: GO 10859
// result := [ ] ;
10611: LD_ADDR_VAR 0 2
10615: PUSH
10616: EMPTY
10617: ST_TO_ADDR
// for i in tmp do
10618: LD_ADDR_VAR 0 3
10622: PUSH
10623: LD_VAR 0 6
10627: PUSH
10628: FOR_IN
10629: IFFALSE 10700
// begin t := UnitsInside ( i ) ;
10631: LD_ADDR_VAR 0 4
10635: PUSH
10636: LD_VAR 0 3
10640: PPUSH
10641: CALL_OW 313
10645: ST_TO_ADDR
// if t then
10646: LD_VAR 0 4
10650: IFFALSE 10698
// for j in t do
10652: LD_ADDR_VAR 0 7
10656: PUSH
10657: LD_VAR 0 4
10661: PUSH
10662: FOR_IN
10663: IFFALSE 10696
// result := Replace ( result , result + 1 , j ) ;
10665: LD_ADDR_VAR 0 2
10669: PUSH
10670: LD_VAR 0 2
10674: PPUSH
10675: LD_VAR 0 2
10679: PUSH
10680: LD_INT 1
10682: PLUS
10683: PPUSH
10684: LD_VAR 0 7
10688: PPUSH
10689: CALL_OW 1
10693: ST_TO_ADDR
10694: GO 10662
10696: POP
10697: POP
// end ;
10698: GO 10628
10700: POP
10701: POP
// if not result then
10702: LD_VAR 0 2
10706: NOT
10707: IFFALSE 10711
// exit ;
10709: GO 10859
// mech := result [ 1 ] ;
10711: LD_ADDR_VAR 0 5
10715: PUSH
10716: LD_VAR 0 2
10720: PUSH
10721: LD_INT 1
10723: ARRAY
10724: ST_TO_ADDR
// if result > 1 then
10725: LD_VAR 0 2
10729: PUSH
10730: LD_INT 1
10732: GREATER
10733: IFFALSE 10845
// begin for i = 2 to result do
10735: LD_ADDR_VAR 0 3
10739: PUSH
10740: DOUBLE
10741: LD_INT 2
10743: DEC
10744: ST_TO_ADDR
10745: LD_VAR 0 2
10749: PUSH
10750: FOR_TO
10751: IFFALSE 10843
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10753: LD_ADDR_VAR 0 4
10757: PUSH
10758: LD_VAR 0 2
10762: PUSH
10763: LD_VAR 0 3
10767: ARRAY
10768: PPUSH
10769: LD_INT 3
10771: PPUSH
10772: CALL_OW 259
10776: PUSH
10777: LD_VAR 0 2
10781: PUSH
10782: LD_VAR 0 3
10786: ARRAY
10787: PPUSH
10788: CALL_OW 432
10792: MINUS
10793: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10794: LD_VAR 0 4
10798: PUSH
10799: LD_VAR 0 5
10803: PPUSH
10804: LD_INT 3
10806: PPUSH
10807: CALL_OW 259
10811: PUSH
10812: LD_VAR 0 5
10816: PPUSH
10817: CALL_OW 432
10821: MINUS
10822: GREATEREQUAL
10823: IFFALSE 10841
// mech := result [ i ] ;
10825: LD_ADDR_VAR 0 5
10829: PUSH
10830: LD_VAR 0 2
10834: PUSH
10835: LD_VAR 0 3
10839: ARRAY
10840: ST_TO_ADDR
// end ;
10841: GO 10750
10843: POP
10844: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10845: LD_VAR 0 1
10849: PPUSH
10850: LD_VAR 0 5
10854: PPUSH
10855: CALL_OW 135
// end ;
10859: LD_VAR 0 2
10863: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10864: LD_INT 0
10866: PPUSH
10867: PPUSH
10868: PPUSH
10869: PPUSH
10870: PPUSH
10871: PPUSH
10872: PPUSH
10873: PPUSH
10874: PPUSH
10875: PPUSH
10876: PPUSH
10877: PPUSH
10878: PPUSH
// result := [ ] ;
10879: LD_ADDR_VAR 0 7
10883: PUSH
10884: EMPTY
10885: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10886: LD_VAR 0 1
10890: PPUSH
10891: CALL_OW 266
10895: PUSH
10896: LD_INT 0
10898: PUSH
10899: LD_INT 1
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: IN
10906: NOT
10907: IFFALSE 10911
// exit ;
10909: GO 12545
// if name then
10911: LD_VAR 0 3
10915: IFFALSE 10931
// SetBName ( base_dep , name ) ;
10917: LD_VAR 0 1
10921: PPUSH
10922: LD_VAR 0 3
10926: PPUSH
10927: CALL_OW 500
// base := GetBase ( base_dep ) ;
10931: LD_ADDR_VAR 0 15
10935: PUSH
10936: LD_VAR 0 1
10940: PPUSH
10941: CALL_OW 274
10945: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10946: LD_ADDR_VAR 0 16
10950: PUSH
10951: LD_VAR 0 1
10955: PPUSH
10956: CALL_OW 255
10960: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10961: LD_ADDR_VAR 0 17
10965: PUSH
10966: LD_VAR 0 1
10970: PPUSH
10971: CALL_OW 248
10975: ST_TO_ADDR
// if sources then
10976: LD_VAR 0 5
10980: IFFALSE 11027
// for i = 1 to 3 do
10982: LD_ADDR_VAR 0 8
10986: PUSH
10987: DOUBLE
10988: LD_INT 1
10990: DEC
10991: ST_TO_ADDR
10992: LD_INT 3
10994: PUSH
10995: FOR_TO
10996: IFFALSE 11025
// AddResourceType ( base , i , sources [ i ] ) ;
10998: LD_VAR 0 15
11002: PPUSH
11003: LD_VAR 0 8
11007: PPUSH
11008: LD_VAR 0 5
11012: PUSH
11013: LD_VAR 0 8
11017: ARRAY
11018: PPUSH
11019: CALL_OW 276
11023: GO 10995
11025: POP
11026: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11027: LD_ADDR_VAR 0 18
11031: PUSH
11032: LD_VAR 0 15
11036: PPUSH
11037: LD_VAR 0 2
11041: PPUSH
11042: LD_INT 1
11044: PPUSH
11045: CALL 10288 0 3
11049: ST_TO_ADDR
// InitHc ;
11050: CALL_OW 19
// InitUc ;
11054: CALL_OW 18
// uc_side := side ;
11058: LD_ADDR_OWVAR 20
11062: PUSH
11063: LD_VAR 0 16
11067: ST_TO_ADDR
// uc_nation := nation ;
11068: LD_ADDR_OWVAR 21
11072: PUSH
11073: LD_VAR 0 17
11077: ST_TO_ADDR
// if buildings then
11078: LD_VAR 0 18
11082: IFFALSE 12404
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11084: LD_ADDR_VAR 0 19
11088: PUSH
11089: LD_VAR 0 18
11093: PPUSH
11094: LD_INT 2
11096: PUSH
11097: LD_INT 30
11099: PUSH
11100: LD_INT 29
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 30
11109: PUSH
11110: LD_INT 30
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: LIST
11121: PPUSH
11122: CALL_OW 72
11126: ST_TO_ADDR
// if tmp then
11127: LD_VAR 0 19
11131: IFFALSE 11179
// for i in tmp do
11133: LD_ADDR_VAR 0 8
11137: PUSH
11138: LD_VAR 0 19
11142: PUSH
11143: FOR_IN
11144: IFFALSE 11177
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11146: LD_VAR 0 8
11150: PPUSH
11151: CALL_OW 250
11155: PPUSH
11156: LD_VAR 0 8
11160: PPUSH
11161: CALL_OW 251
11165: PPUSH
11166: LD_VAR 0 16
11170: PPUSH
11171: CALL_OW 441
11175: GO 11143
11177: POP
11178: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11179: LD_VAR 0 18
11183: PPUSH
11184: LD_INT 2
11186: PUSH
11187: LD_INT 30
11189: PUSH
11190: LD_INT 32
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 30
11199: PUSH
11200: LD_INT 33
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: LIST
11211: PPUSH
11212: CALL_OW 72
11216: IFFALSE 11304
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11218: LD_ADDR_VAR 0 8
11222: PUSH
11223: LD_VAR 0 18
11227: PPUSH
11228: LD_INT 2
11230: PUSH
11231: LD_INT 30
11233: PUSH
11234: LD_INT 32
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 30
11243: PUSH
11244: LD_INT 33
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: LIST
11255: PPUSH
11256: CALL_OW 72
11260: PUSH
11261: FOR_IN
11262: IFFALSE 11302
// begin if not GetBWeapon ( i ) then
11264: LD_VAR 0 8
11268: PPUSH
11269: CALL_OW 269
11273: NOT
11274: IFFALSE 11300
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11276: LD_VAR 0 8
11280: PPUSH
11281: LD_VAR 0 8
11285: PPUSH
11286: LD_VAR 0 2
11290: PPUSH
11291: CALL 12550 0 2
11295: PPUSH
11296: CALL_OW 431
// end ;
11300: GO 11261
11302: POP
11303: POP
// end ; for i = 1 to personel do
11304: LD_ADDR_VAR 0 8
11308: PUSH
11309: DOUBLE
11310: LD_INT 1
11312: DEC
11313: ST_TO_ADDR
11314: LD_VAR 0 6
11318: PUSH
11319: FOR_TO
11320: IFFALSE 12384
// begin if i > 4 then
11322: LD_VAR 0 8
11326: PUSH
11327: LD_INT 4
11329: GREATER
11330: IFFALSE 11334
// break ;
11332: GO 12384
// case i of 1 :
11334: LD_VAR 0 8
11338: PUSH
11339: LD_INT 1
11341: DOUBLE
11342: EQUAL
11343: IFTRUE 11347
11345: GO 11427
11347: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11348: LD_ADDR_VAR 0 12
11352: PUSH
11353: LD_VAR 0 18
11357: PPUSH
11358: LD_INT 22
11360: PUSH
11361: LD_VAR 0 16
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: LD_INT 58
11372: PUSH
11373: EMPTY
11374: LIST
11375: PUSH
11376: LD_INT 2
11378: PUSH
11379: LD_INT 30
11381: PUSH
11382: LD_INT 32
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 30
11391: PUSH
11392: LD_INT 4
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 30
11401: PUSH
11402: LD_INT 5
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: LIST
11419: PPUSH
11420: CALL_OW 72
11424: ST_TO_ADDR
11425: GO 11649
11427: LD_INT 2
11429: DOUBLE
11430: EQUAL
11431: IFTRUE 11435
11433: GO 11497
11435: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11436: LD_ADDR_VAR 0 12
11440: PUSH
11441: LD_VAR 0 18
11445: PPUSH
11446: LD_INT 22
11448: PUSH
11449: LD_VAR 0 16
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: LD_INT 2
11460: PUSH
11461: LD_INT 30
11463: PUSH
11464: LD_INT 0
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 30
11473: PUSH
11474: LD_INT 1
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: LIST
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PPUSH
11490: CALL_OW 72
11494: ST_TO_ADDR
11495: GO 11649
11497: LD_INT 3
11499: DOUBLE
11500: EQUAL
11501: IFTRUE 11505
11503: GO 11567
11505: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11506: LD_ADDR_VAR 0 12
11510: PUSH
11511: LD_VAR 0 18
11515: PPUSH
11516: LD_INT 22
11518: PUSH
11519: LD_VAR 0 16
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 2
11530: PUSH
11531: LD_INT 30
11533: PUSH
11534: LD_INT 2
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: LD_INT 30
11543: PUSH
11544: LD_INT 3
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: LIST
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PPUSH
11560: CALL_OW 72
11564: ST_TO_ADDR
11565: GO 11649
11567: LD_INT 4
11569: DOUBLE
11570: EQUAL
11571: IFTRUE 11575
11573: GO 11648
11575: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11576: LD_ADDR_VAR 0 12
11580: PUSH
11581: LD_VAR 0 18
11585: PPUSH
11586: LD_INT 22
11588: PUSH
11589: LD_VAR 0 16
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 2
11600: PUSH
11601: LD_INT 30
11603: PUSH
11604: LD_INT 6
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 30
11613: PUSH
11614: LD_INT 7
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 30
11623: PUSH
11624: LD_INT 8
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PPUSH
11641: CALL_OW 72
11645: ST_TO_ADDR
11646: GO 11649
11648: POP
// if i = 1 then
11649: LD_VAR 0 8
11653: PUSH
11654: LD_INT 1
11656: EQUAL
11657: IFFALSE 11768
// begin tmp := [ ] ;
11659: LD_ADDR_VAR 0 19
11663: PUSH
11664: EMPTY
11665: ST_TO_ADDR
// for j in f do
11666: LD_ADDR_VAR 0 9
11670: PUSH
11671: LD_VAR 0 12
11675: PUSH
11676: FOR_IN
11677: IFFALSE 11750
// if GetBType ( j ) = b_bunker then
11679: LD_VAR 0 9
11683: PPUSH
11684: CALL_OW 266
11688: PUSH
11689: LD_INT 32
11691: EQUAL
11692: IFFALSE 11719
// tmp := Insert ( tmp , 1 , j ) else
11694: LD_ADDR_VAR 0 19
11698: PUSH
11699: LD_VAR 0 19
11703: PPUSH
11704: LD_INT 1
11706: PPUSH
11707: LD_VAR 0 9
11711: PPUSH
11712: CALL_OW 2
11716: ST_TO_ADDR
11717: GO 11748
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11719: LD_ADDR_VAR 0 19
11723: PUSH
11724: LD_VAR 0 19
11728: PPUSH
11729: LD_VAR 0 19
11733: PUSH
11734: LD_INT 1
11736: PLUS
11737: PPUSH
11738: LD_VAR 0 9
11742: PPUSH
11743: CALL_OW 2
11747: ST_TO_ADDR
11748: GO 11676
11750: POP
11751: POP
// if tmp then
11752: LD_VAR 0 19
11756: IFFALSE 11768
// f := tmp ;
11758: LD_ADDR_VAR 0 12
11762: PUSH
11763: LD_VAR 0 19
11767: ST_TO_ADDR
// end ; x := personel [ i ] ;
11768: LD_ADDR_VAR 0 13
11772: PUSH
11773: LD_VAR 0 6
11777: PUSH
11778: LD_VAR 0 8
11782: ARRAY
11783: ST_TO_ADDR
// if x = - 1 then
11784: LD_VAR 0 13
11788: PUSH
11789: LD_INT 1
11791: NEG
11792: EQUAL
11793: IFFALSE 12002
// begin for j in f do
11795: LD_ADDR_VAR 0 9
11799: PUSH
11800: LD_VAR 0 12
11804: PUSH
11805: FOR_IN
11806: IFFALSE 11998
// repeat InitHc ;
11808: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11812: LD_VAR 0 9
11816: PPUSH
11817: CALL_OW 266
11821: PUSH
11822: LD_INT 5
11824: EQUAL
11825: IFFALSE 11895
// begin if UnitsInside ( j ) < 3 then
11827: LD_VAR 0 9
11831: PPUSH
11832: CALL_OW 313
11836: PUSH
11837: LD_INT 3
11839: LESS
11840: IFFALSE 11876
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11842: LD_INT 0
11844: PPUSH
11845: LD_INT 5
11847: PUSH
11848: LD_INT 8
11850: PUSH
11851: LD_INT 9
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: LIST
11858: PUSH
11859: LD_VAR 0 17
11863: ARRAY
11864: PPUSH
11865: LD_VAR 0 4
11869: PPUSH
11870: CALL_OW 380
11874: GO 11893
// PrepareHuman ( false , i , skill ) ;
11876: LD_INT 0
11878: PPUSH
11879: LD_VAR 0 8
11883: PPUSH
11884: LD_VAR 0 4
11888: PPUSH
11889: CALL_OW 380
// end else
11893: GO 11912
// PrepareHuman ( false , i , skill ) ;
11895: LD_INT 0
11897: PPUSH
11898: LD_VAR 0 8
11902: PPUSH
11903: LD_VAR 0 4
11907: PPUSH
11908: CALL_OW 380
// un := CreateHuman ;
11912: LD_ADDR_VAR 0 14
11916: PUSH
11917: CALL_OW 44
11921: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11922: LD_ADDR_VAR 0 7
11926: PUSH
11927: LD_VAR 0 7
11931: PPUSH
11932: LD_INT 1
11934: PPUSH
11935: LD_VAR 0 14
11939: PPUSH
11940: CALL_OW 2
11944: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11945: LD_VAR 0 14
11949: PPUSH
11950: LD_VAR 0 9
11954: PPUSH
11955: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11959: LD_VAR 0 9
11963: PPUSH
11964: CALL_OW 313
11968: PUSH
11969: LD_INT 6
11971: EQUAL
11972: PUSH
11973: LD_VAR 0 9
11977: PPUSH
11978: CALL_OW 266
11982: PUSH
11983: LD_INT 32
11985: PUSH
11986: LD_INT 31
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: IN
11993: OR
11994: IFFALSE 11808
11996: GO 11805
11998: POP
11999: POP
// end else
12000: GO 12382
// for j = 1 to x do
12002: LD_ADDR_VAR 0 9
12006: PUSH
12007: DOUBLE
12008: LD_INT 1
12010: DEC
12011: ST_TO_ADDR
12012: LD_VAR 0 13
12016: PUSH
12017: FOR_TO
12018: IFFALSE 12380
// begin InitHc ;
12020: CALL_OW 19
// if not f then
12024: LD_VAR 0 12
12028: NOT
12029: IFFALSE 12118
// begin PrepareHuman ( false , i , skill ) ;
12031: LD_INT 0
12033: PPUSH
12034: LD_VAR 0 8
12038: PPUSH
12039: LD_VAR 0 4
12043: PPUSH
12044: CALL_OW 380
// un := CreateHuman ;
12048: LD_ADDR_VAR 0 14
12052: PUSH
12053: CALL_OW 44
12057: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12058: LD_ADDR_VAR 0 7
12062: PUSH
12063: LD_VAR 0 7
12067: PPUSH
12068: LD_INT 1
12070: PPUSH
12071: LD_VAR 0 14
12075: PPUSH
12076: CALL_OW 2
12080: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12081: LD_VAR 0 14
12085: PPUSH
12086: LD_VAR 0 1
12090: PPUSH
12091: CALL_OW 250
12095: PPUSH
12096: LD_VAR 0 1
12100: PPUSH
12101: CALL_OW 251
12105: PPUSH
12106: LD_INT 10
12108: PPUSH
12109: LD_INT 0
12111: PPUSH
12112: CALL_OW 50
// continue ;
12116: GO 12017
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12118: LD_VAR 0 12
12122: PUSH
12123: LD_INT 1
12125: ARRAY
12126: PPUSH
12127: CALL_OW 313
12131: PUSH
12132: LD_VAR 0 12
12136: PUSH
12137: LD_INT 1
12139: ARRAY
12140: PPUSH
12141: CALL_OW 266
12145: PUSH
12146: LD_INT 32
12148: PUSH
12149: LD_INT 31
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: IN
12156: AND
12157: PUSH
12158: LD_VAR 0 12
12162: PUSH
12163: LD_INT 1
12165: ARRAY
12166: PPUSH
12167: CALL_OW 313
12171: PUSH
12172: LD_INT 6
12174: EQUAL
12175: OR
12176: IFFALSE 12196
// f := Delete ( f , 1 ) ;
12178: LD_ADDR_VAR 0 12
12182: PUSH
12183: LD_VAR 0 12
12187: PPUSH
12188: LD_INT 1
12190: PPUSH
12191: CALL_OW 3
12195: ST_TO_ADDR
// if not f then
12196: LD_VAR 0 12
12200: NOT
12201: IFFALSE 12219
// begin x := x + 2 ;
12203: LD_ADDR_VAR 0 13
12207: PUSH
12208: LD_VAR 0 13
12212: PUSH
12213: LD_INT 2
12215: PLUS
12216: ST_TO_ADDR
// continue ;
12217: GO 12017
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12219: LD_VAR 0 12
12223: PUSH
12224: LD_INT 1
12226: ARRAY
12227: PPUSH
12228: CALL_OW 266
12232: PUSH
12233: LD_INT 5
12235: EQUAL
12236: IFFALSE 12310
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12238: LD_VAR 0 12
12242: PUSH
12243: LD_INT 1
12245: ARRAY
12246: PPUSH
12247: CALL_OW 313
12251: PUSH
12252: LD_INT 3
12254: LESS
12255: IFFALSE 12291
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12257: LD_INT 0
12259: PPUSH
12260: LD_INT 5
12262: PUSH
12263: LD_INT 8
12265: PUSH
12266: LD_INT 9
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: LIST
12273: PUSH
12274: LD_VAR 0 17
12278: ARRAY
12279: PPUSH
12280: LD_VAR 0 4
12284: PPUSH
12285: CALL_OW 380
12289: GO 12308
// PrepareHuman ( false , i , skill ) ;
12291: LD_INT 0
12293: PPUSH
12294: LD_VAR 0 8
12298: PPUSH
12299: LD_VAR 0 4
12303: PPUSH
12304: CALL_OW 380
// end else
12308: GO 12327
// PrepareHuman ( false , i , skill ) ;
12310: LD_INT 0
12312: PPUSH
12313: LD_VAR 0 8
12317: PPUSH
12318: LD_VAR 0 4
12322: PPUSH
12323: CALL_OW 380
// un := CreateHuman ;
12327: LD_ADDR_VAR 0 14
12331: PUSH
12332: CALL_OW 44
12336: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12337: LD_ADDR_VAR 0 7
12341: PUSH
12342: LD_VAR 0 7
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: LD_VAR 0 14
12354: PPUSH
12355: CALL_OW 2
12359: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12360: LD_VAR 0 14
12364: PPUSH
12365: LD_VAR 0 12
12369: PUSH
12370: LD_INT 1
12372: ARRAY
12373: PPUSH
12374: CALL_OW 52
// end ;
12378: GO 12017
12380: POP
12381: POP
// end ;
12382: GO 11319
12384: POP
12385: POP
// result := result ^ buildings ;
12386: LD_ADDR_VAR 0 7
12390: PUSH
12391: LD_VAR 0 7
12395: PUSH
12396: LD_VAR 0 18
12400: ADD
12401: ST_TO_ADDR
// end else
12402: GO 12545
// begin for i = 1 to personel do
12404: LD_ADDR_VAR 0 8
12408: PUSH
12409: DOUBLE
12410: LD_INT 1
12412: DEC
12413: ST_TO_ADDR
12414: LD_VAR 0 6
12418: PUSH
12419: FOR_TO
12420: IFFALSE 12543
// begin if i > 4 then
12422: LD_VAR 0 8
12426: PUSH
12427: LD_INT 4
12429: GREATER
12430: IFFALSE 12434
// break ;
12432: GO 12543
// x := personel [ i ] ;
12434: LD_ADDR_VAR 0 13
12438: PUSH
12439: LD_VAR 0 6
12443: PUSH
12444: LD_VAR 0 8
12448: ARRAY
12449: ST_TO_ADDR
// if x = - 1 then
12450: LD_VAR 0 13
12454: PUSH
12455: LD_INT 1
12457: NEG
12458: EQUAL
12459: IFFALSE 12463
// continue ;
12461: GO 12419
// PrepareHuman ( false , i , skill ) ;
12463: LD_INT 0
12465: PPUSH
12466: LD_VAR 0 8
12470: PPUSH
12471: LD_VAR 0 4
12475: PPUSH
12476: CALL_OW 380
// un := CreateHuman ;
12480: LD_ADDR_VAR 0 14
12484: PUSH
12485: CALL_OW 44
12489: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12490: LD_VAR 0 14
12494: PPUSH
12495: LD_VAR 0 1
12499: PPUSH
12500: CALL_OW 250
12504: PPUSH
12505: LD_VAR 0 1
12509: PPUSH
12510: CALL_OW 251
12514: PPUSH
12515: LD_INT 10
12517: PPUSH
12518: LD_INT 0
12520: PPUSH
12521: CALL_OW 50
// result := result ^ un ;
12525: LD_ADDR_VAR 0 7
12529: PUSH
12530: LD_VAR 0 7
12534: PUSH
12535: LD_VAR 0 14
12539: ADD
12540: ST_TO_ADDR
// end ;
12541: GO 12419
12543: POP
12544: POP
// end ; end ;
12545: LD_VAR 0 7
12549: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12550: LD_INT 0
12552: PPUSH
12553: PPUSH
12554: PPUSH
12555: PPUSH
12556: PPUSH
12557: PPUSH
12558: PPUSH
12559: PPUSH
12560: PPUSH
12561: PPUSH
12562: PPUSH
12563: PPUSH
12564: PPUSH
12565: PPUSH
12566: PPUSH
12567: PPUSH
// result := false ;
12568: LD_ADDR_VAR 0 3
12572: PUSH
12573: LD_INT 0
12575: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12576: LD_VAR 0 1
12580: NOT
12581: PUSH
12582: LD_VAR 0 1
12586: PPUSH
12587: CALL_OW 266
12591: PUSH
12592: LD_INT 32
12594: PUSH
12595: LD_INT 33
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: IN
12602: NOT
12603: OR
12604: IFFALSE 12608
// exit ;
12606: GO 13717
// nat := GetNation ( tower ) ;
12608: LD_ADDR_VAR 0 12
12612: PUSH
12613: LD_VAR 0 1
12617: PPUSH
12618: CALL_OW 248
12622: ST_TO_ADDR
// side := GetSide ( tower ) ;
12623: LD_ADDR_VAR 0 16
12627: PUSH
12628: LD_VAR 0 1
12632: PPUSH
12633: CALL_OW 255
12637: ST_TO_ADDR
// x := GetX ( tower ) ;
12638: LD_ADDR_VAR 0 10
12642: PUSH
12643: LD_VAR 0 1
12647: PPUSH
12648: CALL_OW 250
12652: ST_TO_ADDR
// y := GetY ( tower ) ;
12653: LD_ADDR_VAR 0 11
12657: PUSH
12658: LD_VAR 0 1
12662: PPUSH
12663: CALL_OW 251
12667: ST_TO_ADDR
// if not x or not y then
12668: LD_VAR 0 10
12672: NOT
12673: PUSH
12674: LD_VAR 0 11
12678: NOT
12679: OR
12680: IFFALSE 12684
// exit ;
12682: GO 13717
// weapon := 0 ;
12684: LD_ADDR_VAR 0 18
12688: PUSH
12689: LD_INT 0
12691: ST_TO_ADDR
// fac_list := [ ] ;
12692: LD_ADDR_VAR 0 17
12696: PUSH
12697: EMPTY
12698: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12699: LD_ADDR_VAR 0 6
12703: PUSH
12704: LD_VAR 0 1
12708: PPUSH
12709: CALL_OW 274
12713: PPUSH
12714: LD_VAR 0 2
12718: PPUSH
12719: LD_INT 0
12721: PPUSH
12722: CALL 10288 0 3
12726: PPUSH
12727: LD_INT 30
12729: PUSH
12730: LD_INT 3
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PPUSH
12737: CALL_OW 72
12741: ST_TO_ADDR
// if not factories then
12742: LD_VAR 0 6
12746: NOT
12747: IFFALSE 12751
// exit ;
12749: GO 13717
// for i in factories do
12751: LD_ADDR_VAR 0 8
12755: PUSH
12756: LD_VAR 0 6
12760: PUSH
12761: FOR_IN
12762: IFFALSE 12787
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12764: LD_ADDR_VAR 0 17
12768: PUSH
12769: LD_VAR 0 17
12773: PUSH
12774: LD_VAR 0 8
12778: PPUSH
12779: CALL_OW 478
12783: UNION
12784: ST_TO_ADDR
12785: GO 12761
12787: POP
12788: POP
// if not fac_list then
12789: LD_VAR 0 17
12793: NOT
12794: IFFALSE 12798
// exit ;
12796: GO 13717
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12798: LD_ADDR_VAR 0 5
12802: PUSH
12803: LD_INT 4
12805: PUSH
12806: LD_INT 5
12808: PUSH
12809: LD_INT 9
12811: PUSH
12812: LD_INT 10
12814: PUSH
12815: LD_INT 6
12817: PUSH
12818: LD_INT 7
12820: PUSH
12821: LD_INT 11
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 27
12835: PUSH
12836: LD_INT 28
12838: PUSH
12839: LD_INT 26
12841: PUSH
12842: LD_INT 30
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: PUSH
12851: LD_INT 43
12853: PUSH
12854: LD_INT 44
12856: PUSH
12857: LD_INT 46
12859: PUSH
12860: LD_INT 45
12862: PUSH
12863: LD_INT 47
12865: PUSH
12866: LD_INT 49
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: LIST
12881: PUSH
12882: LD_VAR 0 12
12886: ARRAY
12887: ST_TO_ADDR
// list := list isect fac_list ;
12888: LD_ADDR_VAR 0 5
12892: PUSH
12893: LD_VAR 0 5
12897: PUSH
12898: LD_VAR 0 17
12902: ISECT
12903: ST_TO_ADDR
// if not list then
12904: LD_VAR 0 5
12908: NOT
12909: IFFALSE 12913
// exit ;
12911: GO 13717
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12913: LD_VAR 0 12
12917: PUSH
12918: LD_INT 3
12920: EQUAL
12921: PUSH
12922: LD_INT 49
12924: PUSH
12925: LD_VAR 0 5
12929: IN
12930: AND
12931: PUSH
12932: LD_INT 31
12934: PPUSH
12935: LD_VAR 0 16
12939: PPUSH
12940: CALL_OW 321
12944: PUSH
12945: LD_INT 2
12947: EQUAL
12948: AND
12949: IFFALSE 13009
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12951: LD_INT 22
12953: PUSH
12954: LD_VAR 0 16
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: LD_INT 35
12965: PUSH
12966: LD_INT 49
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PUSH
12973: LD_INT 91
12975: PUSH
12976: LD_VAR 0 1
12980: PUSH
12981: LD_INT 10
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: LIST
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: LIST
12993: PPUSH
12994: CALL_OW 69
12998: NOT
12999: IFFALSE 13009
// weapon := ru_time_lapser ;
13001: LD_ADDR_VAR 0 18
13005: PUSH
13006: LD_INT 49
13008: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13009: LD_VAR 0 12
13013: PUSH
13014: LD_INT 1
13016: PUSH
13017: LD_INT 2
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: IN
13024: PUSH
13025: LD_INT 11
13027: PUSH
13028: LD_VAR 0 5
13032: IN
13033: PUSH
13034: LD_INT 30
13036: PUSH
13037: LD_VAR 0 5
13041: IN
13042: OR
13043: AND
13044: PUSH
13045: LD_INT 6
13047: PPUSH
13048: LD_VAR 0 16
13052: PPUSH
13053: CALL_OW 321
13057: PUSH
13058: LD_INT 2
13060: EQUAL
13061: AND
13062: IFFALSE 13227
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13064: LD_INT 22
13066: PUSH
13067: LD_VAR 0 16
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: LD_INT 2
13078: PUSH
13079: LD_INT 35
13081: PUSH
13082: LD_INT 11
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 35
13091: PUSH
13092: LD_INT 30
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 91
13106: PUSH
13107: LD_VAR 0 1
13111: PUSH
13112: LD_INT 18
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: LIST
13124: PPUSH
13125: CALL_OW 69
13129: NOT
13130: PUSH
13131: LD_INT 22
13133: PUSH
13134: LD_VAR 0 16
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: LD_INT 2
13145: PUSH
13146: LD_INT 30
13148: PUSH
13149: LD_INT 32
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 30
13158: PUSH
13159: LD_INT 33
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: LIST
13170: PUSH
13171: LD_INT 91
13173: PUSH
13174: LD_VAR 0 1
13178: PUSH
13179: LD_INT 12
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: LIST
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: LIST
13191: PUSH
13192: EMPTY
13193: LIST
13194: PPUSH
13195: CALL_OW 69
13199: PUSH
13200: LD_INT 2
13202: GREATER
13203: AND
13204: IFFALSE 13227
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13206: LD_ADDR_VAR 0 18
13210: PUSH
13211: LD_INT 11
13213: PUSH
13214: LD_INT 30
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_VAR 0 12
13225: ARRAY
13226: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13227: LD_VAR 0 18
13231: NOT
13232: PUSH
13233: LD_INT 40
13235: PPUSH
13236: LD_VAR 0 16
13240: PPUSH
13241: CALL_OW 321
13245: PUSH
13246: LD_INT 2
13248: EQUAL
13249: AND
13250: PUSH
13251: LD_INT 7
13253: PUSH
13254: LD_VAR 0 5
13258: IN
13259: PUSH
13260: LD_INT 28
13262: PUSH
13263: LD_VAR 0 5
13267: IN
13268: OR
13269: PUSH
13270: LD_INT 45
13272: PUSH
13273: LD_VAR 0 5
13277: IN
13278: OR
13279: AND
13280: IFFALSE 13534
// begin hex := GetHexInfo ( x , y ) ;
13282: LD_ADDR_VAR 0 4
13286: PUSH
13287: LD_VAR 0 10
13291: PPUSH
13292: LD_VAR 0 11
13296: PPUSH
13297: CALL_OW 546
13301: ST_TO_ADDR
// if hex [ 1 ] then
13302: LD_VAR 0 4
13306: PUSH
13307: LD_INT 1
13309: ARRAY
13310: IFFALSE 13314
// exit ;
13312: GO 13717
// height := hex [ 2 ] ;
13314: LD_ADDR_VAR 0 15
13318: PUSH
13319: LD_VAR 0 4
13323: PUSH
13324: LD_INT 2
13326: ARRAY
13327: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13328: LD_ADDR_VAR 0 14
13332: PUSH
13333: LD_INT 0
13335: PUSH
13336: LD_INT 2
13338: PUSH
13339: LD_INT 3
13341: PUSH
13342: LD_INT 5
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: ST_TO_ADDR
// for i in tmp do
13351: LD_ADDR_VAR 0 8
13355: PUSH
13356: LD_VAR 0 14
13360: PUSH
13361: FOR_IN
13362: IFFALSE 13532
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13364: LD_ADDR_VAR 0 9
13368: PUSH
13369: LD_VAR 0 10
13373: PPUSH
13374: LD_VAR 0 8
13378: PPUSH
13379: LD_INT 5
13381: PPUSH
13382: CALL_OW 272
13386: PUSH
13387: LD_VAR 0 11
13391: PPUSH
13392: LD_VAR 0 8
13396: PPUSH
13397: LD_INT 5
13399: PPUSH
13400: CALL_OW 273
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13409: LD_VAR 0 9
13413: PUSH
13414: LD_INT 1
13416: ARRAY
13417: PPUSH
13418: LD_VAR 0 9
13422: PUSH
13423: LD_INT 2
13425: ARRAY
13426: PPUSH
13427: CALL_OW 488
13431: IFFALSE 13530
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13433: LD_ADDR_VAR 0 4
13437: PUSH
13438: LD_VAR 0 9
13442: PUSH
13443: LD_INT 1
13445: ARRAY
13446: PPUSH
13447: LD_VAR 0 9
13451: PUSH
13452: LD_INT 2
13454: ARRAY
13455: PPUSH
13456: CALL_OW 546
13460: ST_TO_ADDR
// if hex [ 1 ] then
13461: LD_VAR 0 4
13465: PUSH
13466: LD_INT 1
13468: ARRAY
13469: IFFALSE 13473
// continue ;
13471: GO 13361
// h := hex [ 2 ] ;
13473: LD_ADDR_VAR 0 13
13477: PUSH
13478: LD_VAR 0 4
13482: PUSH
13483: LD_INT 2
13485: ARRAY
13486: ST_TO_ADDR
// if h + 7 < height then
13487: LD_VAR 0 13
13491: PUSH
13492: LD_INT 7
13494: PLUS
13495: PUSH
13496: LD_VAR 0 15
13500: LESS
13501: IFFALSE 13530
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13503: LD_ADDR_VAR 0 18
13507: PUSH
13508: LD_INT 7
13510: PUSH
13511: LD_INT 28
13513: PUSH
13514: LD_INT 45
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: LIST
13521: PUSH
13522: LD_VAR 0 12
13526: ARRAY
13527: ST_TO_ADDR
// break ;
13528: GO 13532
// end ; end ; end ;
13530: GO 13361
13532: POP
13533: POP
// end ; if not weapon then
13534: LD_VAR 0 18
13538: NOT
13539: IFFALSE 13599
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13541: LD_ADDR_VAR 0 5
13545: PUSH
13546: LD_VAR 0 5
13550: PUSH
13551: LD_INT 11
13553: PUSH
13554: LD_INT 30
13556: PUSH
13557: LD_INT 49
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: LIST
13564: DIFF
13565: ST_TO_ADDR
// if not list then
13566: LD_VAR 0 5
13570: NOT
13571: IFFALSE 13575
// exit ;
13573: GO 13717
// weapon := list [ rand ( 1 , list ) ] ;
13575: LD_ADDR_VAR 0 18
13579: PUSH
13580: LD_VAR 0 5
13584: PUSH
13585: LD_INT 1
13587: PPUSH
13588: LD_VAR 0 5
13592: PPUSH
13593: CALL_OW 12
13597: ARRAY
13598: ST_TO_ADDR
// end ; if weapon then
13599: LD_VAR 0 18
13603: IFFALSE 13717
// begin tmp := CostOfWeapon ( weapon ) ;
13605: LD_ADDR_VAR 0 14
13609: PUSH
13610: LD_VAR 0 18
13614: PPUSH
13615: CALL_OW 451
13619: ST_TO_ADDR
// j := GetBase ( tower ) ;
13620: LD_ADDR_VAR 0 9
13624: PUSH
13625: LD_VAR 0 1
13629: PPUSH
13630: CALL_OW 274
13634: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13635: LD_VAR 0 9
13639: PPUSH
13640: LD_INT 1
13642: PPUSH
13643: CALL_OW 275
13647: PUSH
13648: LD_VAR 0 14
13652: PUSH
13653: LD_INT 1
13655: ARRAY
13656: GREATEREQUAL
13657: PUSH
13658: LD_VAR 0 9
13662: PPUSH
13663: LD_INT 2
13665: PPUSH
13666: CALL_OW 275
13670: PUSH
13671: LD_VAR 0 14
13675: PUSH
13676: LD_INT 2
13678: ARRAY
13679: GREATEREQUAL
13680: AND
13681: PUSH
13682: LD_VAR 0 9
13686: PPUSH
13687: LD_INT 3
13689: PPUSH
13690: CALL_OW 275
13694: PUSH
13695: LD_VAR 0 14
13699: PUSH
13700: LD_INT 3
13702: ARRAY
13703: GREATEREQUAL
13704: AND
13705: IFFALSE 13717
// result := weapon ;
13707: LD_ADDR_VAR 0 3
13711: PUSH
13712: LD_VAR 0 18
13716: ST_TO_ADDR
// end ; end ;
13717: LD_VAR 0 3
13721: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13722: LD_INT 0
13724: PPUSH
13725: PPUSH
// result := true ;
13726: LD_ADDR_VAR 0 3
13730: PUSH
13731: LD_INT 1
13733: ST_TO_ADDR
// if array1 = array2 then
13734: LD_VAR 0 1
13738: PUSH
13739: LD_VAR 0 2
13743: EQUAL
13744: IFFALSE 13804
// begin for i = 1 to array1 do
13746: LD_ADDR_VAR 0 4
13750: PUSH
13751: DOUBLE
13752: LD_INT 1
13754: DEC
13755: ST_TO_ADDR
13756: LD_VAR 0 1
13760: PUSH
13761: FOR_TO
13762: IFFALSE 13800
// if array1 [ i ] <> array2 [ i ] then
13764: LD_VAR 0 1
13768: PUSH
13769: LD_VAR 0 4
13773: ARRAY
13774: PUSH
13775: LD_VAR 0 2
13779: PUSH
13780: LD_VAR 0 4
13784: ARRAY
13785: NONEQUAL
13786: IFFALSE 13798
// begin result := false ;
13788: LD_ADDR_VAR 0 3
13792: PUSH
13793: LD_INT 0
13795: ST_TO_ADDR
// break ;
13796: GO 13800
// end ;
13798: GO 13761
13800: POP
13801: POP
// end else
13802: GO 13812
// result := false ;
13804: LD_ADDR_VAR 0 3
13808: PUSH
13809: LD_INT 0
13811: ST_TO_ADDR
// end ;
13812: LD_VAR 0 3
13816: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13817: LD_INT 0
13819: PPUSH
13820: PPUSH
// if not array1 or not array2 then
13821: LD_VAR 0 1
13825: NOT
13826: PUSH
13827: LD_VAR 0 2
13831: NOT
13832: OR
13833: IFFALSE 13837
// exit ;
13835: GO 13901
// result := true ;
13837: LD_ADDR_VAR 0 3
13841: PUSH
13842: LD_INT 1
13844: ST_TO_ADDR
// for i = 1 to array1 do
13845: LD_ADDR_VAR 0 4
13849: PUSH
13850: DOUBLE
13851: LD_INT 1
13853: DEC
13854: ST_TO_ADDR
13855: LD_VAR 0 1
13859: PUSH
13860: FOR_TO
13861: IFFALSE 13899
// if array1 [ i ] <> array2 [ i ] then
13863: LD_VAR 0 1
13867: PUSH
13868: LD_VAR 0 4
13872: ARRAY
13873: PUSH
13874: LD_VAR 0 2
13878: PUSH
13879: LD_VAR 0 4
13883: ARRAY
13884: NONEQUAL
13885: IFFALSE 13897
// begin result := false ;
13887: LD_ADDR_VAR 0 3
13891: PUSH
13892: LD_INT 0
13894: ST_TO_ADDR
// break ;
13895: GO 13899
// end ;
13897: GO 13860
13899: POP
13900: POP
// end ;
13901: LD_VAR 0 3
13905: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13906: LD_INT 0
13908: PPUSH
13909: PPUSH
13910: PPUSH
// pom := GetBase ( fac ) ;
13911: LD_ADDR_VAR 0 5
13915: PUSH
13916: LD_VAR 0 1
13920: PPUSH
13921: CALL_OW 274
13925: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13926: LD_ADDR_VAR 0 4
13930: PUSH
13931: LD_VAR 0 2
13935: PUSH
13936: LD_INT 1
13938: ARRAY
13939: PPUSH
13940: LD_VAR 0 2
13944: PUSH
13945: LD_INT 2
13947: ARRAY
13948: PPUSH
13949: LD_VAR 0 2
13953: PUSH
13954: LD_INT 3
13956: ARRAY
13957: PPUSH
13958: LD_VAR 0 2
13962: PUSH
13963: LD_INT 4
13965: ARRAY
13966: PPUSH
13967: CALL_OW 449
13971: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13972: LD_ADDR_VAR 0 3
13976: PUSH
13977: LD_VAR 0 5
13981: PPUSH
13982: LD_INT 1
13984: PPUSH
13985: CALL_OW 275
13989: PUSH
13990: LD_VAR 0 4
13994: PUSH
13995: LD_INT 1
13997: ARRAY
13998: GREATEREQUAL
13999: PUSH
14000: LD_VAR 0 5
14004: PPUSH
14005: LD_INT 2
14007: PPUSH
14008: CALL_OW 275
14012: PUSH
14013: LD_VAR 0 4
14017: PUSH
14018: LD_INT 2
14020: ARRAY
14021: GREATEREQUAL
14022: AND
14023: PUSH
14024: LD_VAR 0 5
14028: PPUSH
14029: LD_INT 3
14031: PPUSH
14032: CALL_OW 275
14036: PUSH
14037: LD_VAR 0 4
14041: PUSH
14042: LD_INT 3
14044: ARRAY
14045: GREATEREQUAL
14046: AND
14047: ST_TO_ADDR
// end ;
14048: LD_VAR 0 3
14052: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14053: LD_INT 0
14055: PPUSH
14056: PPUSH
14057: PPUSH
14058: PPUSH
// pom := GetBase ( building ) ;
14059: LD_ADDR_VAR 0 3
14063: PUSH
14064: LD_VAR 0 1
14068: PPUSH
14069: CALL_OW 274
14073: ST_TO_ADDR
// if not pom then
14074: LD_VAR 0 3
14078: NOT
14079: IFFALSE 14083
// exit ;
14081: GO 14253
// btype := GetBType ( building ) ;
14083: LD_ADDR_VAR 0 5
14087: PUSH
14088: LD_VAR 0 1
14092: PPUSH
14093: CALL_OW 266
14097: ST_TO_ADDR
// if btype = b_armoury then
14098: LD_VAR 0 5
14102: PUSH
14103: LD_INT 4
14105: EQUAL
14106: IFFALSE 14116
// btype := b_barracks ;
14108: LD_ADDR_VAR 0 5
14112: PUSH
14113: LD_INT 5
14115: ST_TO_ADDR
// if btype = b_depot then
14116: LD_VAR 0 5
14120: PUSH
14121: LD_INT 0
14123: EQUAL
14124: IFFALSE 14134
// btype := b_warehouse ;
14126: LD_ADDR_VAR 0 5
14130: PUSH
14131: LD_INT 1
14133: ST_TO_ADDR
// if btype = b_workshop then
14134: LD_VAR 0 5
14138: PUSH
14139: LD_INT 2
14141: EQUAL
14142: IFFALSE 14152
// btype := b_factory ;
14144: LD_ADDR_VAR 0 5
14148: PUSH
14149: LD_INT 3
14151: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14152: LD_ADDR_VAR 0 4
14156: PUSH
14157: LD_VAR 0 5
14161: PPUSH
14162: LD_VAR 0 1
14166: PPUSH
14167: CALL_OW 248
14171: PPUSH
14172: CALL_OW 450
14176: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14177: LD_ADDR_VAR 0 2
14181: PUSH
14182: LD_VAR 0 3
14186: PPUSH
14187: LD_INT 1
14189: PPUSH
14190: CALL_OW 275
14194: PUSH
14195: LD_VAR 0 4
14199: PUSH
14200: LD_INT 1
14202: ARRAY
14203: GREATEREQUAL
14204: PUSH
14205: LD_VAR 0 3
14209: PPUSH
14210: LD_INT 2
14212: PPUSH
14213: CALL_OW 275
14217: PUSH
14218: LD_VAR 0 4
14222: PUSH
14223: LD_INT 2
14225: ARRAY
14226: GREATEREQUAL
14227: AND
14228: PUSH
14229: LD_VAR 0 3
14233: PPUSH
14234: LD_INT 3
14236: PPUSH
14237: CALL_OW 275
14241: PUSH
14242: LD_VAR 0 4
14246: PUSH
14247: LD_INT 3
14249: ARRAY
14250: GREATEREQUAL
14251: AND
14252: ST_TO_ADDR
// end ;
14253: LD_VAR 0 2
14257: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14258: LD_INT 0
14260: PPUSH
14261: PPUSH
14262: PPUSH
// pom := GetBase ( building ) ;
14263: LD_ADDR_VAR 0 4
14267: PUSH
14268: LD_VAR 0 1
14272: PPUSH
14273: CALL_OW 274
14277: ST_TO_ADDR
// if not pom then
14278: LD_VAR 0 4
14282: NOT
14283: IFFALSE 14287
// exit ;
14285: GO 14388
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14287: LD_ADDR_VAR 0 5
14291: PUSH
14292: LD_VAR 0 2
14296: PPUSH
14297: LD_VAR 0 1
14301: PPUSH
14302: CALL_OW 248
14306: PPUSH
14307: CALL_OW 450
14311: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14312: LD_ADDR_VAR 0 3
14316: PUSH
14317: LD_VAR 0 4
14321: PPUSH
14322: LD_INT 1
14324: PPUSH
14325: CALL_OW 275
14329: PUSH
14330: LD_VAR 0 5
14334: PUSH
14335: LD_INT 1
14337: ARRAY
14338: GREATEREQUAL
14339: PUSH
14340: LD_VAR 0 4
14344: PPUSH
14345: LD_INT 2
14347: PPUSH
14348: CALL_OW 275
14352: PUSH
14353: LD_VAR 0 5
14357: PUSH
14358: LD_INT 2
14360: ARRAY
14361: GREATEREQUAL
14362: AND
14363: PUSH
14364: LD_VAR 0 4
14368: PPUSH
14369: LD_INT 3
14371: PPUSH
14372: CALL_OW 275
14376: PUSH
14377: LD_VAR 0 5
14381: PUSH
14382: LD_INT 3
14384: ARRAY
14385: GREATEREQUAL
14386: AND
14387: ST_TO_ADDR
// end ;
14388: LD_VAR 0 3
14392: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14393: LD_INT 0
14395: PPUSH
14396: PPUSH
14397: PPUSH
14398: PPUSH
14399: PPUSH
14400: PPUSH
14401: PPUSH
14402: PPUSH
14403: PPUSH
14404: PPUSH
14405: PPUSH
// result := false ;
14406: LD_ADDR_VAR 0 8
14410: PUSH
14411: LD_INT 0
14413: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14414: LD_VAR 0 5
14418: NOT
14419: PUSH
14420: LD_VAR 0 1
14424: NOT
14425: OR
14426: PUSH
14427: LD_VAR 0 2
14431: NOT
14432: OR
14433: PUSH
14434: LD_VAR 0 3
14438: NOT
14439: OR
14440: IFFALSE 14444
// exit ;
14442: GO 15258
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14444: LD_ADDR_VAR 0 14
14448: PUSH
14449: LD_VAR 0 1
14453: PPUSH
14454: LD_VAR 0 2
14458: PPUSH
14459: LD_VAR 0 3
14463: PPUSH
14464: LD_VAR 0 4
14468: PPUSH
14469: LD_VAR 0 5
14473: PUSH
14474: LD_INT 1
14476: ARRAY
14477: PPUSH
14478: CALL_OW 248
14482: PPUSH
14483: LD_INT 0
14485: PPUSH
14486: CALL 16511 0 6
14490: ST_TO_ADDR
// if not hexes then
14491: LD_VAR 0 14
14495: NOT
14496: IFFALSE 14500
// exit ;
14498: GO 15258
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14500: LD_ADDR_VAR 0 17
14504: PUSH
14505: LD_VAR 0 5
14509: PPUSH
14510: LD_INT 22
14512: PUSH
14513: LD_VAR 0 13
14517: PPUSH
14518: CALL_OW 255
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: LD_INT 2
14529: PUSH
14530: LD_INT 30
14532: PUSH
14533: LD_INT 0
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PUSH
14540: LD_INT 30
14542: PUSH
14543: LD_INT 1
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: LIST
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PPUSH
14559: CALL_OW 72
14563: ST_TO_ADDR
// for i = 1 to hexes do
14564: LD_ADDR_VAR 0 9
14568: PUSH
14569: DOUBLE
14570: LD_INT 1
14572: DEC
14573: ST_TO_ADDR
14574: LD_VAR 0 14
14578: PUSH
14579: FOR_TO
14580: IFFALSE 15256
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14582: LD_ADDR_VAR 0 13
14586: PUSH
14587: LD_VAR 0 14
14591: PUSH
14592: LD_VAR 0 9
14596: ARRAY
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PPUSH
14602: LD_VAR 0 14
14606: PUSH
14607: LD_VAR 0 9
14611: ARRAY
14612: PUSH
14613: LD_INT 2
14615: ARRAY
14616: PPUSH
14617: CALL_OW 428
14621: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14622: LD_VAR 0 14
14626: PUSH
14627: LD_VAR 0 9
14631: ARRAY
14632: PUSH
14633: LD_INT 1
14635: ARRAY
14636: PPUSH
14637: LD_VAR 0 14
14641: PUSH
14642: LD_VAR 0 9
14646: ARRAY
14647: PUSH
14648: LD_INT 2
14650: ARRAY
14651: PPUSH
14652: CALL_OW 351
14656: PUSH
14657: LD_VAR 0 14
14661: PUSH
14662: LD_VAR 0 9
14666: ARRAY
14667: PUSH
14668: LD_INT 1
14670: ARRAY
14671: PPUSH
14672: LD_VAR 0 14
14676: PUSH
14677: LD_VAR 0 9
14681: ARRAY
14682: PUSH
14683: LD_INT 2
14685: ARRAY
14686: PPUSH
14687: CALL_OW 488
14691: NOT
14692: OR
14693: PUSH
14694: LD_VAR 0 13
14698: PPUSH
14699: CALL_OW 247
14703: PUSH
14704: LD_INT 3
14706: EQUAL
14707: OR
14708: IFFALSE 14714
// exit ;
14710: POP
14711: POP
14712: GO 15258
// if not tmp then
14714: LD_VAR 0 13
14718: NOT
14719: IFFALSE 14723
// continue ;
14721: GO 14579
// result := true ;
14723: LD_ADDR_VAR 0 8
14727: PUSH
14728: LD_INT 1
14730: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14731: LD_VAR 0 6
14735: PUSH
14736: LD_VAR 0 13
14740: PPUSH
14741: CALL_OW 247
14745: PUSH
14746: LD_INT 2
14748: EQUAL
14749: AND
14750: PUSH
14751: LD_VAR 0 13
14755: PPUSH
14756: CALL_OW 263
14760: PUSH
14761: LD_INT 1
14763: EQUAL
14764: AND
14765: IFFALSE 14929
// begin if IsDrivenBy ( tmp ) then
14767: LD_VAR 0 13
14771: PPUSH
14772: CALL_OW 311
14776: IFFALSE 14780
// continue ;
14778: GO 14579
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14780: LD_VAR 0 6
14784: PPUSH
14785: LD_INT 3
14787: PUSH
14788: LD_INT 60
14790: PUSH
14791: EMPTY
14792: LIST
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 3
14800: PUSH
14801: LD_INT 55
14803: PUSH
14804: EMPTY
14805: LIST
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PPUSH
14815: CALL_OW 72
14819: IFFALSE 14927
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14821: LD_ADDR_VAR 0 18
14825: PUSH
14826: LD_VAR 0 6
14830: PPUSH
14831: LD_INT 3
14833: PUSH
14834: LD_INT 60
14836: PUSH
14837: EMPTY
14838: LIST
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 3
14846: PUSH
14847: LD_INT 55
14849: PUSH
14850: EMPTY
14851: LIST
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PPUSH
14861: CALL_OW 72
14865: PUSH
14866: LD_INT 1
14868: ARRAY
14869: ST_TO_ADDR
// if IsInUnit ( driver ) then
14870: LD_VAR 0 18
14874: PPUSH
14875: CALL_OW 310
14879: IFFALSE 14890
// ComExit ( driver ) ;
14881: LD_VAR 0 18
14885: PPUSH
14886: CALL 40292 0 1
// AddComEnterUnit ( driver , tmp ) ;
14890: LD_VAR 0 18
14894: PPUSH
14895: LD_VAR 0 13
14899: PPUSH
14900: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14904: LD_VAR 0 18
14908: PPUSH
14909: LD_VAR 0 7
14913: PPUSH
14914: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14918: LD_VAR 0 18
14922: PPUSH
14923: CALL_OW 181
// end ; continue ;
14927: GO 14579
// end ; if not cleaners or not tmp in cleaners then
14929: LD_VAR 0 6
14933: NOT
14934: PUSH
14935: LD_VAR 0 13
14939: PUSH
14940: LD_VAR 0 6
14944: IN
14945: NOT
14946: OR
14947: IFFALSE 15254
// begin if dep then
14949: LD_VAR 0 17
14953: IFFALSE 15089
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14955: LD_ADDR_VAR 0 16
14959: PUSH
14960: LD_VAR 0 17
14964: PUSH
14965: LD_INT 1
14967: ARRAY
14968: PPUSH
14969: CALL_OW 250
14973: PPUSH
14974: LD_VAR 0 17
14978: PUSH
14979: LD_INT 1
14981: ARRAY
14982: PPUSH
14983: CALL_OW 254
14987: PPUSH
14988: LD_INT 5
14990: PPUSH
14991: CALL_OW 272
14995: PUSH
14996: LD_VAR 0 17
15000: PUSH
15001: LD_INT 1
15003: ARRAY
15004: PPUSH
15005: CALL_OW 251
15009: PPUSH
15010: LD_VAR 0 17
15014: PUSH
15015: LD_INT 1
15017: ARRAY
15018: PPUSH
15019: CALL_OW 254
15023: PPUSH
15024: LD_INT 5
15026: PPUSH
15027: CALL_OW 273
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15036: LD_VAR 0 16
15040: PUSH
15041: LD_INT 1
15043: ARRAY
15044: PPUSH
15045: LD_VAR 0 16
15049: PUSH
15050: LD_INT 2
15052: ARRAY
15053: PPUSH
15054: CALL_OW 488
15058: IFFALSE 15089
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15060: LD_VAR 0 13
15064: PPUSH
15065: LD_VAR 0 16
15069: PUSH
15070: LD_INT 1
15072: ARRAY
15073: PPUSH
15074: LD_VAR 0 16
15078: PUSH
15079: LD_INT 2
15081: ARRAY
15082: PPUSH
15083: CALL_OW 111
// continue ;
15087: GO 14579
// end ; end ; r := GetDir ( tmp ) ;
15089: LD_ADDR_VAR 0 15
15093: PUSH
15094: LD_VAR 0 13
15098: PPUSH
15099: CALL_OW 254
15103: ST_TO_ADDR
// if r = 5 then
15104: LD_VAR 0 15
15108: PUSH
15109: LD_INT 5
15111: EQUAL
15112: IFFALSE 15122
// r := 0 ;
15114: LD_ADDR_VAR 0 15
15118: PUSH
15119: LD_INT 0
15121: ST_TO_ADDR
// for j = r to 5 do
15122: LD_ADDR_VAR 0 10
15126: PUSH
15127: DOUBLE
15128: LD_VAR 0 15
15132: DEC
15133: ST_TO_ADDR
15134: LD_INT 5
15136: PUSH
15137: FOR_TO
15138: IFFALSE 15252
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15140: LD_ADDR_VAR 0 11
15144: PUSH
15145: LD_VAR 0 13
15149: PPUSH
15150: CALL_OW 250
15154: PPUSH
15155: LD_VAR 0 10
15159: PPUSH
15160: LD_INT 2
15162: PPUSH
15163: CALL_OW 272
15167: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15168: LD_ADDR_VAR 0 12
15172: PUSH
15173: LD_VAR 0 13
15177: PPUSH
15178: CALL_OW 251
15182: PPUSH
15183: LD_VAR 0 10
15187: PPUSH
15188: LD_INT 2
15190: PPUSH
15191: CALL_OW 273
15195: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15196: LD_VAR 0 11
15200: PPUSH
15201: LD_VAR 0 12
15205: PPUSH
15206: CALL_OW 488
15210: PUSH
15211: LD_VAR 0 11
15215: PPUSH
15216: LD_VAR 0 12
15220: PPUSH
15221: CALL_OW 428
15225: NOT
15226: AND
15227: IFFALSE 15250
// begin ComMoveXY ( tmp , _x , _y ) ;
15229: LD_VAR 0 13
15233: PPUSH
15234: LD_VAR 0 11
15238: PPUSH
15239: LD_VAR 0 12
15243: PPUSH
15244: CALL_OW 111
// break ;
15248: GO 15252
// end ; end ;
15250: GO 15137
15252: POP
15253: POP
// end ; end ;
15254: GO 14579
15256: POP
15257: POP
// end ;
15258: LD_VAR 0 8
15262: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15263: LD_INT 0
15265: PPUSH
// result := true ;
15266: LD_ADDR_VAR 0 3
15270: PUSH
15271: LD_INT 1
15273: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15274: LD_VAR 0 2
15278: PUSH
15279: LD_INT 24
15281: DOUBLE
15282: EQUAL
15283: IFTRUE 15293
15285: LD_INT 33
15287: DOUBLE
15288: EQUAL
15289: IFTRUE 15293
15291: GO 15318
15293: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15294: LD_ADDR_VAR 0 3
15298: PUSH
15299: LD_INT 32
15301: PPUSH
15302: LD_VAR 0 1
15306: PPUSH
15307: CALL_OW 321
15311: PUSH
15312: LD_INT 2
15314: EQUAL
15315: ST_TO_ADDR
15316: GO 15634
15318: LD_INT 20
15320: DOUBLE
15321: EQUAL
15322: IFTRUE 15326
15324: GO 15351
15326: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15327: LD_ADDR_VAR 0 3
15331: PUSH
15332: LD_INT 6
15334: PPUSH
15335: LD_VAR 0 1
15339: PPUSH
15340: CALL_OW 321
15344: PUSH
15345: LD_INT 2
15347: EQUAL
15348: ST_TO_ADDR
15349: GO 15634
15351: LD_INT 22
15353: DOUBLE
15354: EQUAL
15355: IFTRUE 15365
15357: LD_INT 36
15359: DOUBLE
15360: EQUAL
15361: IFTRUE 15365
15363: GO 15390
15365: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15366: LD_ADDR_VAR 0 3
15370: PUSH
15371: LD_INT 15
15373: PPUSH
15374: LD_VAR 0 1
15378: PPUSH
15379: CALL_OW 321
15383: PUSH
15384: LD_INT 2
15386: EQUAL
15387: ST_TO_ADDR
15388: GO 15634
15390: LD_INT 30
15392: DOUBLE
15393: EQUAL
15394: IFTRUE 15398
15396: GO 15423
15398: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15399: LD_ADDR_VAR 0 3
15403: PUSH
15404: LD_INT 20
15406: PPUSH
15407: LD_VAR 0 1
15411: PPUSH
15412: CALL_OW 321
15416: PUSH
15417: LD_INT 2
15419: EQUAL
15420: ST_TO_ADDR
15421: GO 15634
15423: LD_INT 28
15425: DOUBLE
15426: EQUAL
15427: IFTRUE 15437
15429: LD_INT 21
15431: DOUBLE
15432: EQUAL
15433: IFTRUE 15437
15435: GO 15462
15437: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15438: LD_ADDR_VAR 0 3
15442: PUSH
15443: LD_INT 21
15445: PPUSH
15446: LD_VAR 0 1
15450: PPUSH
15451: CALL_OW 321
15455: PUSH
15456: LD_INT 2
15458: EQUAL
15459: ST_TO_ADDR
15460: GO 15634
15462: LD_INT 16
15464: DOUBLE
15465: EQUAL
15466: IFTRUE 15470
15468: GO 15495
15470: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15471: LD_ADDR_VAR 0 3
15475: PUSH
15476: LD_INT 84
15478: PPUSH
15479: LD_VAR 0 1
15483: PPUSH
15484: CALL_OW 321
15488: PUSH
15489: LD_INT 2
15491: EQUAL
15492: ST_TO_ADDR
15493: GO 15634
15495: LD_INT 19
15497: DOUBLE
15498: EQUAL
15499: IFTRUE 15509
15501: LD_INT 23
15503: DOUBLE
15504: EQUAL
15505: IFTRUE 15509
15507: GO 15534
15509: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15510: LD_ADDR_VAR 0 3
15514: PUSH
15515: LD_INT 83
15517: PPUSH
15518: LD_VAR 0 1
15522: PPUSH
15523: CALL_OW 321
15527: PUSH
15528: LD_INT 2
15530: EQUAL
15531: ST_TO_ADDR
15532: GO 15634
15534: LD_INT 17
15536: DOUBLE
15537: EQUAL
15538: IFTRUE 15542
15540: GO 15567
15542: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15543: LD_ADDR_VAR 0 3
15547: PUSH
15548: LD_INT 39
15550: PPUSH
15551: LD_VAR 0 1
15555: PPUSH
15556: CALL_OW 321
15560: PUSH
15561: LD_INT 2
15563: EQUAL
15564: ST_TO_ADDR
15565: GO 15634
15567: LD_INT 18
15569: DOUBLE
15570: EQUAL
15571: IFTRUE 15575
15573: GO 15600
15575: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15576: LD_ADDR_VAR 0 3
15580: PUSH
15581: LD_INT 40
15583: PPUSH
15584: LD_VAR 0 1
15588: PPUSH
15589: CALL_OW 321
15593: PUSH
15594: LD_INT 2
15596: EQUAL
15597: ST_TO_ADDR
15598: GO 15634
15600: LD_INT 27
15602: DOUBLE
15603: EQUAL
15604: IFTRUE 15608
15606: GO 15633
15608: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15609: LD_ADDR_VAR 0 3
15613: PUSH
15614: LD_INT 35
15616: PPUSH
15617: LD_VAR 0 1
15621: PPUSH
15622: CALL_OW 321
15626: PUSH
15627: LD_INT 2
15629: EQUAL
15630: ST_TO_ADDR
15631: GO 15634
15633: POP
// end ;
15634: LD_VAR 0 3
15638: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15639: LD_INT 0
15641: PPUSH
15642: PPUSH
15643: PPUSH
15644: PPUSH
15645: PPUSH
15646: PPUSH
15647: PPUSH
15648: PPUSH
15649: PPUSH
15650: PPUSH
15651: PPUSH
// result := false ;
15652: LD_ADDR_VAR 0 6
15656: PUSH
15657: LD_INT 0
15659: ST_TO_ADDR
// if btype = b_depot then
15660: LD_VAR 0 2
15664: PUSH
15665: LD_INT 0
15667: EQUAL
15668: IFFALSE 15680
// begin result := true ;
15670: LD_ADDR_VAR 0 6
15674: PUSH
15675: LD_INT 1
15677: ST_TO_ADDR
// exit ;
15678: GO 16506
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15680: LD_VAR 0 1
15684: NOT
15685: PUSH
15686: LD_VAR 0 1
15690: PPUSH
15691: CALL_OW 266
15695: PUSH
15696: LD_INT 0
15698: PUSH
15699: LD_INT 1
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: IN
15706: NOT
15707: OR
15708: PUSH
15709: LD_VAR 0 2
15713: NOT
15714: OR
15715: PUSH
15716: LD_VAR 0 5
15720: PUSH
15721: LD_INT 0
15723: PUSH
15724: LD_INT 1
15726: PUSH
15727: LD_INT 2
15729: PUSH
15730: LD_INT 3
15732: PUSH
15733: LD_INT 4
15735: PUSH
15736: LD_INT 5
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: IN
15747: NOT
15748: OR
15749: PUSH
15750: LD_VAR 0 3
15754: PPUSH
15755: LD_VAR 0 4
15759: PPUSH
15760: CALL_OW 488
15764: NOT
15765: OR
15766: IFFALSE 15770
// exit ;
15768: GO 16506
// side := GetSide ( depot ) ;
15770: LD_ADDR_VAR 0 9
15774: PUSH
15775: LD_VAR 0 1
15779: PPUSH
15780: CALL_OW 255
15784: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15785: LD_VAR 0 9
15789: PPUSH
15790: LD_VAR 0 2
15794: PPUSH
15795: CALL 15263 0 2
15799: NOT
15800: IFFALSE 15804
// exit ;
15802: GO 16506
// pom := GetBase ( depot ) ;
15804: LD_ADDR_VAR 0 10
15808: PUSH
15809: LD_VAR 0 1
15813: PPUSH
15814: CALL_OW 274
15818: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15819: LD_ADDR_VAR 0 11
15823: PUSH
15824: LD_VAR 0 2
15828: PPUSH
15829: LD_VAR 0 1
15833: PPUSH
15834: CALL_OW 248
15838: PPUSH
15839: CALL_OW 450
15843: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15844: LD_VAR 0 10
15848: PPUSH
15849: LD_INT 1
15851: PPUSH
15852: CALL_OW 275
15856: PUSH
15857: LD_VAR 0 11
15861: PUSH
15862: LD_INT 1
15864: ARRAY
15865: GREATEREQUAL
15866: PUSH
15867: LD_VAR 0 10
15871: PPUSH
15872: LD_INT 2
15874: PPUSH
15875: CALL_OW 275
15879: PUSH
15880: LD_VAR 0 11
15884: PUSH
15885: LD_INT 2
15887: ARRAY
15888: GREATEREQUAL
15889: AND
15890: PUSH
15891: LD_VAR 0 10
15895: PPUSH
15896: LD_INT 3
15898: PPUSH
15899: CALL_OW 275
15903: PUSH
15904: LD_VAR 0 11
15908: PUSH
15909: LD_INT 3
15911: ARRAY
15912: GREATEREQUAL
15913: AND
15914: NOT
15915: IFFALSE 15919
// exit ;
15917: GO 16506
// if GetBType ( depot ) = b_depot then
15919: LD_VAR 0 1
15923: PPUSH
15924: CALL_OW 266
15928: PUSH
15929: LD_INT 0
15931: EQUAL
15932: IFFALSE 15944
// dist := 28 else
15934: LD_ADDR_VAR 0 14
15938: PUSH
15939: LD_INT 28
15941: ST_TO_ADDR
15942: GO 15952
// dist := 36 ;
15944: LD_ADDR_VAR 0 14
15948: PUSH
15949: LD_INT 36
15951: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15952: LD_VAR 0 1
15956: PPUSH
15957: LD_VAR 0 3
15961: PPUSH
15962: LD_VAR 0 4
15966: PPUSH
15967: CALL_OW 297
15971: PUSH
15972: LD_VAR 0 14
15976: GREATER
15977: IFFALSE 15981
// exit ;
15979: GO 16506
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15981: LD_ADDR_VAR 0 12
15985: PUSH
15986: LD_VAR 0 2
15990: PPUSH
15991: LD_VAR 0 3
15995: PPUSH
15996: LD_VAR 0 4
16000: PPUSH
16001: LD_VAR 0 5
16005: PPUSH
16006: LD_VAR 0 1
16010: PPUSH
16011: CALL_OW 248
16015: PPUSH
16016: LD_INT 0
16018: PPUSH
16019: CALL 16511 0 6
16023: ST_TO_ADDR
// if not hexes then
16024: LD_VAR 0 12
16028: NOT
16029: IFFALSE 16033
// exit ;
16031: GO 16506
// hex := GetHexInfo ( x , y ) ;
16033: LD_ADDR_VAR 0 15
16037: PUSH
16038: LD_VAR 0 3
16042: PPUSH
16043: LD_VAR 0 4
16047: PPUSH
16048: CALL_OW 546
16052: ST_TO_ADDR
// if hex [ 1 ] then
16053: LD_VAR 0 15
16057: PUSH
16058: LD_INT 1
16060: ARRAY
16061: IFFALSE 16065
// exit ;
16063: GO 16506
// height := hex [ 2 ] ;
16065: LD_ADDR_VAR 0 13
16069: PUSH
16070: LD_VAR 0 15
16074: PUSH
16075: LD_INT 2
16077: ARRAY
16078: ST_TO_ADDR
// for i = 1 to hexes do
16079: LD_ADDR_VAR 0 7
16083: PUSH
16084: DOUBLE
16085: LD_INT 1
16087: DEC
16088: ST_TO_ADDR
16089: LD_VAR 0 12
16093: PUSH
16094: FOR_TO
16095: IFFALSE 16425
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16097: LD_VAR 0 12
16101: PUSH
16102: LD_VAR 0 7
16106: ARRAY
16107: PUSH
16108: LD_INT 1
16110: ARRAY
16111: PPUSH
16112: LD_VAR 0 12
16116: PUSH
16117: LD_VAR 0 7
16121: ARRAY
16122: PUSH
16123: LD_INT 2
16125: ARRAY
16126: PPUSH
16127: CALL_OW 488
16131: NOT
16132: PUSH
16133: LD_VAR 0 12
16137: PUSH
16138: LD_VAR 0 7
16142: ARRAY
16143: PUSH
16144: LD_INT 1
16146: ARRAY
16147: PPUSH
16148: LD_VAR 0 12
16152: PUSH
16153: LD_VAR 0 7
16157: ARRAY
16158: PUSH
16159: LD_INT 2
16161: ARRAY
16162: PPUSH
16163: CALL_OW 428
16167: PUSH
16168: LD_INT 0
16170: GREATER
16171: OR
16172: PUSH
16173: LD_VAR 0 12
16177: PUSH
16178: LD_VAR 0 7
16182: ARRAY
16183: PUSH
16184: LD_INT 1
16186: ARRAY
16187: PPUSH
16188: LD_VAR 0 12
16192: PUSH
16193: LD_VAR 0 7
16197: ARRAY
16198: PUSH
16199: LD_INT 2
16201: ARRAY
16202: PPUSH
16203: CALL_OW 351
16207: OR
16208: IFFALSE 16214
// exit ;
16210: POP
16211: POP
16212: GO 16506
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16214: LD_ADDR_VAR 0 8
16218: PUSH
16219: LD_VAR 0 12
16223: PUSH
16224: LD_VAR 0 7
16228: ARRAY
16229: PUSH
16230: LD_INT 1
16232: ARRAY
16233: PPUSH
16234: LD_VAR 0 12
16238: PUSH
16239: LD_VAR 0 7
16243: ARRAY
16244: PUSH
16245: LD_INT 2
16247: ARRAY
16248: PPUSH
16249: CALL_OW 546
16253: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16254: LD_VAR 0 8
16258: PUSH
16259: LD_INT 1
16261: ARRAY
16262: PUSH
16263: LD_VAR 0 8
16267: PUSH
16268: LD_INT 2
16270: ARRAY
16271: PUSH
16272: LD_VAR 0 13
16276: PUSH
16277: LD_INT 2
16279: PLUS
16280: GREATER
16281: OR
16282: PUSH
16283: LD_VAR 0 8
16287: PUSH
16288: LD_INT 2
16290: ARRAY
16291: PUSH
16292: LD_VAR 0 13
16296: PUSH
16297: LD_INT 2
16299: MINUS
16300: LESS
16301: OR
16302: PUSH
16303: LD_VAR 0 8
16307: PUSH
16308: LD_INT 3
16310: ARRAY
16311: PUSH
16312: LD_INT 0
16314: PUSH
16315: LD_INT 8
16317: PUSH
16318: LD_INT 9
16320: PUSH
16321: LD_INT 10
16323: PUSH
16324: LD_INT 11
16326: PUSH
16327: LD_INT 12
16329: PUSH
16330: LD_INT 13
16332: PUSH
16333: LD_INT 16
16335: PUSH
16336: LD_INT 17
16338: PUSH
16339: LD_INT 18
16341: PUSH
16342: LD_INT 19
16344: PUSH
16345: LD_INT 20
16347: PUSH
16348: LD_INT 21
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: IN
16366: NOT
16367: OR
16368: PUSH
16369: LD_VAR 0 8
16373: PUSH
16374: LD_INT 5
16376: ARRAY
16377: NOT
16378: OR
16379: PUSH
16380: LD_VAR 0 8
16384: PUSH
16385: LD_INT 6
16387: ARRAY
16388: PUSH
16389: LD_INT 1
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: LD_INT 7
16397: PUSH
16398: LD_INT 9
16400: PUSH
16401: LD_INT 10
16403: PUSH
16404: LD_INT 11
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: IN
16415: NOT
16416: OR
16417: IFFALSE 16423
// exit ;
16419: POP
16420: POP
16421: GO 16506
// end ;
16423: GO 16094
16425: POP
16426: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16427: LD_VAR 0 9
16431: PPUSH
16432: LD_VAR 0 3
16436: PPUSH
16437: LD_VAR 0 4
16441: PPUSH
16442: LD_INT 20
16444: PPUSH
16445: CALL 8429 0 4
16449: PUSH
16450: LD_INT 4
16452: ARRAY
16453: IFFALSE 16457
// exit ;
16455: GO 16506
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16457: LD_VAR 0 2
16461: PUSH
16462: LD_INT 29
16464: PUSH
16465: LD_INT 30
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: IN
16472: PUSH
16473: LD_VAR 0 3
16477: PPUSH
16478: LD_VAR 0 4
16482: PPUSH
16483: LD_VAR 0 9
16487: PPUSH
16488: CALL_OW 440
16492: NOT
16493: AND
16494: IFFALSE 16498
// exit ;
16496: GO 16506
// result := true ;
16498: LD_ADDR_VAR 0 6
16502: PUSH
16503: LD_INT 1
16505: ST_TO_ADDR
// end ;
16506: LD_VAR 0 6
16510: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16511: LD_INT 0
16513: PPUSH
16514: PPUSH
16515: PPUSH
16516: PPUSH
16517: PPUSH
16518: PPUSH
16519: PPUSH
16520: PPUSH
16521: PPUSH
16522: PPUSH
16523: PPUSH
16524: PPUSH
16525: PPUSH
16526: PPUSH
16527: PPUSH
16528: PPUSH
16529: PPUSH
16530: PPUSH
16531: PPUSH
16532: PPUSH
16533: PPUSH
16534: PPUSH
16535: PPUSH
16536: PPUSH
16537: PPUSH
16538: PPUSH
16539: PPUSH
16540: PPUSH
16541: PPUSH
16542: PPUSH
16543: PPUSH
16544: PPUSH
16545: PPUSH
16546: PPUSH
16547: PPUSH
16548: PPUSH
16549: PPUSH
16550: PPUSH
16551: PPUSH
16552: PPUSH
16553: PPUSH
16554: PPUSH
16555: PPUSH
16556: PPUSH
16557: PPUSH
16558: PPUSH
16559: PPUSH
16560: PPUSH
16561: PPUSH
16562: PPUSH
16563: PPUSH
16564: PPUSH
16565: PPUSH
16566: PPUSH
16567: PPUSH
16568: PPUSH
16569: PPUSH
16570: PPUSH
// result = [ ] ;
16571: LD_ADDR_VAR 0 7
16575: PUSH
16576: EMPTY
16577: ST_TO_ADDR
// temp_list = [ ] ;
16578: LD_ADDR_VAR 0 9
16582: PUSH
16583: EMPTY
16584: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16585: LD_VAR 0 4
16589: PUSH
16590: LD_INT 0
16592: PUSH
16593: LD_INT 1
16595: PUSH
16596: LD_INT 2
16598: PUSH
16599: LD_INT 3
16601: PUSH
16602: LD_INT 4
16604: PUSH
16605: LD_INT 5
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: IN
16616: NOT
16617: PUSH
16618: LD_VAR 0 1
16622: PUSH
16623: LD_INT 0
16625: PUSH
16626: LD_INT 1
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: IN
16633: PUSH
16634: LD_VAR 0 5
16638: PUSH
16639: LD_INT 1
16641: PUSH
16642: LD_INT 2
16644: PUSH
16645: LD_INT 3
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: LIST
16652: IN
16653: NOT
16654: AND
16655: OR
16656: IFFALSE 16660
// exit ;
16658: GO 35051
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16660: LD_VAR 0 1
16664: PUSH
16665: LD_INT 6
16667: PUSH
16668: LD_INT 7
16670: PUSH
16671: LD_INT 8
16673: PUSH
16674: LD_INT 13
16676: PUSH
16677: LD_INT 12
16679: PUSH
16680: LD_INT 15
16682: PUSH
16683: LD_INT 11
16685: PUSH
16686: LD_INT 14
16688: PUSH
16689: LD_INT 10
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: IN
16703: IFFALSE 16713
// btype = b_lab ;
16705: LD_ADDR_VAR 0 1
16709: PUSH
16710: LD_INT 6
16712: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16713: LD_VAR 0 6
16717: PUSH
16718: LD_INT 0
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: LD_INT 2
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: LIST
16731: IN
16732: NOT
16733: PUSH
16734: LD_VAR 0 1
16738: PUSH
16739: LD_INT 0
16741: PUSH
16742: LD_INT 1
16744: PUSH
16745: LD_INT 2
16747: PUSH
16748: LD_INT 3
16750: PUSH
16751: LD_INT 6
16753: PUSH
16754: LD_INT 36
16756: PUSH
16757: LD_INT 4
16759: PUSH
16760: LD_INT 5
16762: PUSH
16763: LD_INT 31
16765: PUSH
16766: LD_INT 32
16768: PUSH
16769: LD_INT 33
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: IN
16785: NOT
16786: PUSH
16787: LD_VAR 0 6
16791: PUSH
16792: LD_INT 1
16794: EQUAL
16795: AND
16796: OR
16797: PUSH
16798: LD_VAR 0 1
16802: PUSH
16803: LD_INT 2
16805: PUSH
16806: LD_INT 3
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: IN
16813: NOT
16814: PUSH
16815: LD_VAR 0 6
16819: PUSH
16820: LD_INT 2
16822: EQUAL
16823: AND
16824: OR
16825: IFFALSE 16835
// mode = 0 ;
16827: LD_ADDR_VAR 0 6
16831: PUSH
16832: LD_INT 0
16834: ST_TO_ADDR
// case mode of 0 :
16835: LD_VAR 0 6
16839: PUSH
16840: LD_INT 0
16842: DOUBLE
16843: EQUAL
16844: IFTRUE 16848
16846: GO 28301
16848: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16849: LD_ADDR_VAR 0 11
16853: PUSH
16854: LD_INT 0
16856: PUSH
16857: LD_INT 0
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 0
16866: PUSH
16867: LD_INT 1
16869: NEG
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 1
16877: PUSH
16878: LD_INT 0
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: PUSH
16885: LD_INT 1
16887: PUSH
16888: LD_INT 1
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: PUSH
16895: LD_INT 0
16897: PUSH
16898: LD_INT 1
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 1
16907: NEG
16908: PUSH
16909: LD_INT 0
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: PUSH
16916: LD_INT 1
16918: NEG
16919: PUSH
16920: LD_INT 1
16922: NEG
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 1
16930: NEG
16931: PUSH
16932: LD_INT 2
16934: NEG
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: LD_INT 0
16942: PUSH
16943: LD_INT 2
16945: NEG
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 1
16953: PUSH
16954: LD_INT 1
16956: NEG
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 1
16964: PUSH
16965: LD_INT 2
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 0
16974: PUSH
16975: LD_INT 2
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 1
16984: NEG
16985: PUSH
16986: LD_INT 1
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 1
16995: PUSH
16996: LD_INT 3
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 0
17005: PUSH
17006: LD_INT 3
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: LD_INT 1
17015: NEG
17016: PUSH
17017: LD_INT 2
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17042: LD_ADDR_VAR 0 12
17046: PUSH
17047: LD_INT 0
17049: PUSH
17050: LD_INT 0
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 0
17059: PUSH
17060: LD_INT 1
17062: NEG
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 1
17070: PUSH
17071: LD_INT 0
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 1
17080: PUSH
17081: LD_INT 1
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 0
17090: PUSH
17091: LD_INT 1
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 1
17100: NEG
17101: PUSH
17102: LD_INT 0
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 1
17111: NEG
17112: PUSH
17113: LD_INT 1
17115: NEG
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 1
17123: PUSH
17124: LD_INT 1
17126: NEG
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 2
17134: PUSH
17135: LD_INT 0
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: LD_INT 2
17144: PUSH
17145: LD_INT 1
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 1
17154: NEG
17155: PUSH
17156: LD_INT 1
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PUSH
17163: LD_INT 2
17165: NEG
17166: PUSH
17167: LD_INT 0
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 2
17176: NEG
17177: PUSH
17178: LD_INT 1
17180: NEG
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 2
17188: NEG
17189: PUSH
17190: LD_INT 1
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 3
17199: NEG
17200: PUSH
17201: LD_INT 0
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: LD_INT 3
17210: NEG
17211: PUSH
17212: LD_INT 1
17214: NEG
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17238: LD_ADDR_VAR 0 13
17242: PUSH
17243: LD_INT 0
17245: PUSH
17246: LD_INT 0
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 0
17255: PUSH
17256: LD_INT 1
17258: NEG
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 1
17266: PUSH
17267: LD_INT 0
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 1
17276: PUSH
17277: LD_INT 1
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 0
17286: PUSH
17287: LD_INT 1
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 1
17296: NEG
17297: PUSH
17298: LD_INT 0
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 1
17307: NEG
17308: PUSH
17309: LD_INT 1
17311: NEG
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 1
17319: NEG
17320: PUSH
17321: LD_INT 2
17323: NEG
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 2
17331: PUSH
17332: LD_INT 1
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: LD_INT 2
17341: PUSH
17342: LD_INT 2
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 1
17351: PUSH
17352: LD_INT 2
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 2
17361: NEG
17362: PUSH
17363: LD_INT 1
17365: NEG
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 2
17373: NEG
17374: PUSH
17375: LD_INT 2
17377: NEG
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 2
17385: NEG
17386: PUSH
17387: LD_INT 3
17389: NEG
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 3
17397: NEG
17398: PUSH
17399: LD_INT 2
17401: NEG
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 3
17409: NEG
17410: PUSH
17411: LD_INT 3
17413: NEG
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17437: LD_ADDR_VAR 0 14
17441: PUSH
17442: LD_INT 0
17444: PUSH
17445: LD_INT 0
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 0
17454: PUSH
17455: LD_INT 1
17457: NEG
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: LD_INT 0
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 1
17475: PUSH
17476: LD_INT 1
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 0
17485: PUSH
17486: LD_INT 1
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 1
17495: NEG
17496: PUSH
17497: LD_INT 0
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 1
17506: NEG
17507: PUSH
17508: LD_INT 1
17510: NEG
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 1
17518: NEG
17519: PUSH
17520: LD_INT 2
17522: NEG
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 0
17530: PUSH
17531: LD_INT 2
17533: NEG
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 1
17541: PUSH
17542: LD_INT 1
17544: NEG
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 1
17552: PUSH
17553: LD_INT 2
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 0
17562: PUSH
17563: LD_INT 2
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 1
17572: NEG
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 1
17583: NEG
17584: PUSH
17585: LD_INT 3
17587: NEG
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 0
17595: PUSH
17596: LD_INT 3
17598: NEG
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 1
17606: PUSH
17607: LD_INT 2
17609: NEG
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17633: LD_ADDR_VAR 0 15
17637: PUSH
17638: LD_INT 0
17640: PUSH
17641: LD_INT 0
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: LD_INT 0
17650: PUSH
17651: LD_INT 1
17653: NEG
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 1
17661: PUSH
17662: LD_INT 0
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 1
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 0
17681: PUSH
17682: LD_INT 1
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 1
17691: NEG
17692: PUSH
17693: LD_INT 0
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 1
17702: NEG
17703: PUSH
17704: LD_INT 1
17706: NEG
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 1
17714: PUSH
17715: LD_INT 1
17717: NEG
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 2
17725: PUSH
17726: LD_INT 0
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 2
17735: PUSH
17736: LD_INT 1
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 1
17745: NEG
17746: PUSH
17747: LD_INT 1
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 2
17756: NEG
17757: PUSH
17758: LD_INT 0
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 2
17767: NEG
17768: PUSH
17769: LD_INT 1
17771: NEG
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 2
17779: PUSH
17780: LD_INT 1
17782: NEG
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 3
17790: PUSH
17791: LD_INT 0
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 3
17800: PUSH
17801: LD_INT 1
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17826: LD_ADDR_VAR 0 16
17830: PUSH
17831: LD_INT 0
17833: PUSH
17834: LD_INT 0
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 0
17843: PUSH
17844: LD_INT 1
17846: NEG
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 1
17854: PUSH
17855: LD_INT 0
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 1
17864: PUSH
17865: LD_INT 1
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 0
17874: PUSH
17875: LD_INT 1
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 1
17884: NEG
17885: PUSH
17886: LD_INT 0
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PUSH
17893: LD_INT 1
17895: NEG
17896: PUSH
17897: LD_INT 1
17899: NEG
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 1
17907: NEG
17908: PUSH
17909: LD_INT 2
17911: NEG
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 2
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 2
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 1
17939: PUSH
17940: LD_INT 2
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 2
17949: NEG
17950: PUSH
17951: LD_INT 1
17953: NEG
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 2
17961: NEG
17962: PUSH
17963: LD_INT 2
17965: NEG
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 3
17973: PUSH
17974: LD_INT 2
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 3
17983: PUSH
17984: LD_INT 3
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 2
17993: PUSH
17994: LD_INT 3
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18019: LD_ADDR_VAR 0 17
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: LD_INT 0
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 0
18036: PUSH
18037: LD_INT 1
18039: NEG
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 1
18047: PUSH
18048: LD_INT 0
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 1
18057: PUSH
18058: LD_INT 1
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 0
18067: PUSH
18068: LD_INT 1
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 1
18077: NEG
18078: PUSH
18079: LD_INT 0
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 1
18088: NEG
18089: PUSH
18090: LD_INT 1
18092: NEG
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 1
18100: NEG
18101: PUSH
18102: LD_INT 2
18104: NEG
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 0
18112: PUSH
18113: LD_INT 2
18115: NEG
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 1
18123: PUSH
18124: LD_INT 1
18126: NEG
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 2
18134: PUSH
18135: LD_INT 0
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 2
18144: PUSH
18145: LD_INT 1
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 2
18154: PUSH
18155: LD_INT 2
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 1
18164: PUSH
18165: LD_INT 2
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 0
18174: PUSH
18175: LD_INT 2
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 1
18184: NEG
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 2
18195: NEG
18196: PUSH
18197: LD_INT 0
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 2
18206: NEG
18207: PUSH
18208: LD_INT 1
18210: NEG
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 2
18218: NEG
18219: PUSH
18220: LD_INT 2
18222: NEG
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18249: LD_ADDR_VAR 0 18
18253: PUSH
18254: LD_INT 0
18256: PUSH
18257: LD_INT 0
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 0
18266: PUSH
18267: LD_INT 1
18269: NEG
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 1
18277: PUSH
18278: LD_INT 0
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: LD_INT 1
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 0
18297: PUSH
18298: LD_INT 1
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 1
18307: NEG
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 1
18318: NEG
18319: PUSH
18320: LD_INT 1
18322: NEG
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 1
18330: NEG
18331: PUSH
18332: LD_INT 2
18334: NEG
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 0
18342: PUSH
18343: LD_INT 2
18345: NEG
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: LD_INT 1
18356: NEG
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 2
18364: PUSH
18365: LD_INT 0
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 2
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 2
18384: PUSH
18385: LD_INT 2
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 1
18394: PUSH
18395: LD_INT 2
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: LD_INT 2
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 1
18414: NEG
18415: PUSH
18416: LD_INT 1
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 2
18425: NEG
18426: PUSH
18427: LD_INT 0
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 2
18436: NEG
18437: PUSH
18438: LD_INT 1
18440: NEG
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 2
18448: NEG
18449: PUSH
18450: LD_INT 2
18452: NEG
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18479: LD_ADDR_VAR 0 19
18483: PUSH
18484: LD_INT 0
18486: PUSH
18487: LD_INT 0
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 0
18496: PUSH
18497: LD_INT 1
18499: NEG
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: LD_INT 0
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 1
18517: PUSH
18518: LD_INT 1
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 0
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 1
18537: NEG
18538: PUSH
18539: LD_INT 0
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 1
18548: NEG
18549: PUSH
18550: LD_INT 1
18552: NEG
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 1
18560: NEG
18561: PUSH
18562: LD_INT 2
18564: NEG
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 0
18572: PUSH
18573: LD_INT 2
18575: NEG
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: LD_INT 1
18586: NEG
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 2
18594: PUSH
18595: LD_INT 0
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 2
18604: PUSH
18605: LD_INT 1
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 2
18614: PUSH
18615: LD_INT 2
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 1
18624: PUSH
18625: LD_INT 2
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: LD_INT 2
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 1
18644: NEG
18645: PUSH
18646: LD_INT 1
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 2
18655: NEG
18656: PUSH
18657: LD_INT 0
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 2
18666: NEG
18667: PUSH
18668: LD_INT 1
18670: NEG
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 2
18678: NEG
18679: PUSH
18680: LD_INT 2
18682: NEG
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18709: LD_ADDR_VAR 0 20
18713: PUSH
18714: LD_INT 0
18716: PUSH
18717: LD_INT 0
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 0
18726: PUSH
18727: LD_INT 1
18729: NEG
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 1
18737: PUSH
18738: LD_INT 0
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 1
18747: PUSH
18748: LD_INT 1
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 0
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 1
18767: NEG
18768: PUSH
18769: LD_INT 0
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 1
18778: NEG
18779: PUSH
18780: LD_INT 1
18782: NEG
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 1
18790: NEG
18791: PUSH
18792: LD_INT 2
18794: NEG
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 0
18802: PUSH
18803: LD_INT 2
18805: NEG
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 1
18813: PUSH
18814: LD_INT 1
18816: NEG
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: LD_INT 2
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 2
18834: PUSH
18835: LD_INT 1
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 2
18844: PUSH
18845: LD_INT 2
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 1
18854: PUSH
18855: LD_INT 2
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 0
18864: PUSH
18865: LD_INT 2
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 1
18874: NEG
18875: PUSH
18876: LD_INT 1
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 2
18885: NEG
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 2
18896: NEG
18897: PUSH
18898: LD_INT 1
18900: NEG
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 2
18908: NEG
18909: PUSH
18910: LD_INT 2
18912: NEG
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18939: LD_ADDR_VAR 0 21
18943: PUSH
18944: LD_INT 0
18946: PUSH
18947: LD_INT 0
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 0
18956: PUSH
18957: LD_INT 1
18959: NEG
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 1
18967: PUSH
18968: LD_INT 0
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 1
18977: PUSH
18978: LD_INT 1
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 0
18987: PUSH
18988: LD_INT 1
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 1
18997: NEG
18998: PUSH
18999: LD_INT 0
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 1
19008: NEG
19009: PUSH
19010: LD_INT 1
19012: NEG
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 1
19020: NEG
19021: PUSH
19022: LD_INT 2
19024: NEG
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 0
19032: PUSH
19033: LD_INT 2
19035: NEG
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 1
19043: PUSH
19044: LD_INT 1
19046: NEG
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 2
19054: PUSH
19055: LD_INT 0
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: LD_INT 1
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: LD_INT 2
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 1
19084: PUSH
19085: LD_INT 2
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 0
19094: PUSH
19095: LD_INT 2
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 1
19104: NEG
19105: PUSH
19106: LD_INT 1
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 2
19115: NEG
19116: PUSH
19117: LD_INT 0
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 2
19126: NEG
19127: PUSH
19128: LD_INT 1
19130: NEG
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 2
19138: NEG
19139: PUSH
19140: LD_INT 2
19142: NEG
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19169: LD_ADDR_VAR 0 22
19173: PUSH
19174: LD_INT 0
19176: PUSH
19177: LD_INT 0
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 0
19186: PUSH
19187: LD_INT 1
19189: NEG
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 1
19197: PUSH
19198: LD_INT 0
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: LD_INT 1
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 0
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 1
19227: NEG
19228: PUSH
19229: LD_INT 0
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 1
19238: NEG
19239: PUSH
19240: LD_INT 1
19242: NEG
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 1
19250: NEG
19251: PUSH
19252: LD_INT 2
19254: NEG
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 0
19262: PUSH
19263: LD_INT 2
19265: NEG
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: LD_INT 1
19276: NEG
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 2
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 2
19294: PUSH
19295: LD_INT 1
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 2
19304: PUSH
19305: LD_INT 2
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: LD_INT 2
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 0
19324: PUSH
19325: LD_INT 2
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 1
19334: NEG
19335: PUSH
19336: LD_INT 1
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 2
19345: NEG
19346: PUSH
19347: LD_INT 0
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 2
19356: NEG
19357: PUSH
19358: LD_INT 1
19360: NEG
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 2
19368: NEG
19369: PUSH
19370: LD_INT 2
19372: NEG
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19399: LD_ADDR_VAR 0 23
19403: PUSH
19404: LD_INT 0
19406: PUSH
19407: LD_INT 0
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: LD_INT 1
19419: NEG
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 1
19427: PUSH
19428: LD_INT 0
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: PUSH
19438: LD_INT 1
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 0
19447: PUSH
19448: LD_INT 1
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 1
19457: NEG
19458: PUSH
19459: LD_INT 0
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 1
19468: NEG
19469: PUSH
19470: LD_INT 1
19472: NEG
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 1
19480: NEG
19481: PUSH
19482: LD_INT 2
19484: NEG
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 0
19492: PUSH
19493: LD_INT 2
19495: NEG
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 1
19503: PUSH
19504: LD_INT 1
19506: NEG
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: LD_INT 1
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 2
19534: PUSH
19535: LD_INT 2
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 1
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 1
19564: NEG
19565: PUSH
19566: LD_INT 1
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 2
19575: NEG
19576: PUSH
19577: LD_INT 0
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 2
19586: NEG
19587: PUSH
19588: LD_INT 1
19590: NEG
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 2
19598: NEG
19599: PUSH
19600: LD_INT 2
19602: NEG
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 2
19610: NEG
19611: PUSH
19612: LD_INT 3
19614: NEG
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 1
19622: NEG
19623: PUSH
19624: LD_INT 3
19626: NEG
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 1
19634: PUSH
19635: LD_INT 2
19637: NEG
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 2
19645: PUSH
19646: LD_INT 1
19648: NEG
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19679: LD_ADDR_VAR 0 24
19683: PUSH
19684: LD_INT 0
19686: PUSH
19687: LD_INT 0
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 0
19696: PUSH
19697: LD_INT 1
19699: NEG
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 1
19707: PUSH
19708: LD_INT 0
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 1
19717: PUSH
19718: LD_INT 1
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 0
19727: PUSH
19728: LD_INT 1
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 1
19737: NEG
19738: PUSH
19739: LD_INT 0
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 1
19748: NEG
19749: PUSH
19750: LD_INT 1
19752: NEG
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 1
19760: NEG
19761: PUSH
19762: LD_INT 2
19764: NEG
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 0
19772: PUSH
19773: LD_INT 2
19775: NEG
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 1
19783: PUSH
19784: LD_INT 1
19786: NEG
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 2
19794: PUSH
19795: LD_INT 0
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 2
19804: PUSH
19805: LD_INT 1
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 2
19814: PUSH
19815: LD_INT 2
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 1
19824: PUSH
19825: LD_INT 2
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 0
19834: PUSH
19835: LD_INT 2
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 1
19844: NEG
19845: PUSH
19846: LD_INT 1
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 2
19855: NEG
19856: PUSH
19857: LD_INT 0
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 2
19866: NEG
19867: PUSH
19868: LD_INT 1
19870: NEG
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 2
19878: NEG
19879: PUSH
19880: LD_INT 2
19882: NEG
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 1
19890: PUSH
19891: LD_INT 2
19893: NEG
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 2
19901: PUSH
19902: LD_INT 1
19904: NEG
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 3
19912: PUSH
19913: LD_INT 1
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 3
19922: PUSH
19923: LD_INT 2
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19955: LD_ADDR_VAR 0 25
19959: PUSH
19960: LD_INT 0
19962: PUSH
19963: LD_INT 0
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 0
19972: PUSH
19973: LD_INT 1
19975: NEG
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 1
19983: PUSH
19984: LD_INT 0
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 1
19993: PUSH
19994: LD_INT 1
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 0
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 1
20013: NEG
20014: PUSH
20015: LD_INT 0
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 1
20024: NEG
20025: PUSH
20026: LD_INT 1
20028: NEG
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 1
20036: NEG
20037: PUSH
20038: LD_INT 2
20040: NEG
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 0
20048: PUSH
20049: LD_INT 2
20051: NEG
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 1
20059: PUSH
20060: LD_INT 1
20062: NEG
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 2
20070: PUSH
20071: LD_INT 0
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 2
20080: PUSH
20081: LD_INT 1
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 2
20090: PUSH
20091: LD_INT 2
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 1
20100: PUSH
20101: LD_INT 2
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 0
20110: PUSH
20111: LD_INT 2
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 1
20120: NEG
20121: PUSH
20122: LD_INT 1
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 2
20131: NEG
20132: PUSH
20133: LD_INT 0
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 2
20142: NEG
20143: PUSH
20144: LD_INT 1
20146: NEG
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 2
20154: NEG
20155: PUSH
20156: LD_INT 2
20158: NEG
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 3
20166: PUSH
20167: LD_INT 1
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 3
20176: PUSH
20177: LD_INT 2
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: LD_INT 3
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 1
20196: PUSH
20197: LD_INT 3
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20229: LD_ADDR_VAR 0 26
20233: PUSH
20234: LD_INT 0
20236: PUSH
20237: LD_INT 0
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 0
20246: PUSH
20247: LD_INT 1
20249: NEG
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 1
20257: PUSH
20258: LD_INT 0
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: LD_INT 1
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 1
20287: NEG
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 1
20298: NEG
20299: PUSH
20300: LD_INT 1
20302: NEG
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 1
20310: NEG
20311: PUSH
20312: LD_INT 2
20314: NEG
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: LD_INT 2
20325: NEG
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 1
20333: PUSH
20334: LD_INT 1
20336: NEG
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 2
20344: PUSH
20345: LD_INT 0
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 2
20354: PUSH
20355: LD_INT 1
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 2
20364: PUSH
20365: LD_INT 2
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 1
20374: PUSH
20375: LD_INT 2
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 0
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 1
20394: NEG
20395: PUSH
20396: LD_INT 1
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 2
20405: NEG
20406: PUSH
20407: LD_INT 0
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 2
20416: NEG
20417: PUSH
20418: LD_INT 1
20420: NEG
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 2
20428: NEG
20429: PUSH
20430: LD_INT 2
20432: NEG
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 2
20440: PUSH
20441: LD_INT 3
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 1
20450: PUSH
20451: LD_INT 3
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 1
20460: NEG
20461: PUSH
20462: LD_INT 2
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 2
20471: NEG
20472: PUSH
20473: LD_INT 1
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20505: LD_ADDR_VAR 0 27
20509: PUSH
20510: LD_INT 0
20512: PUSH
20513: LD_INT 0
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 0
20522: PUSH
20523: LD_INT 1
20525: NEG
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 1
20533: PUSH
20534: LD_INT 0
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 1
20543: PUSH
20544: LD_INT 1
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PUSH
20551: LD_INT 0
20553: PUSH
20554: LD_INT 1
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 1
20563: NEG
20564: PUSH
20565: LD_INT 0
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 1
20574: NEG
20575: PUSH
20576: LD_INT 1
20578: NEG
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 1
20586: NEG
20587: PUSH
20588: LD_INT 2
20590: NEG
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: LD_INT 2
20601: NEG
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: LD_INT 1
20612: NEG
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 2
20620: PUSH
20621: LD_INT 0
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 2
20630: PUSH
20631: LD_INT 1
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 2
20640: PUSH
20641: LD_INT 2
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: LD_INT 2
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: LD_INT 2
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 1
20670: NEG
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 2
20681: NEG
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 2
20692: NEG
20693: PUSH
20694: LD_INT 1
20696: NEG
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 2
20704: NEG
20705: PUSH
20706: LD_INT 2
20708: NEG
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 1
20716: NEG
20717: PUSH
20718: LD_INT 2
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 2
20727: NEG
20728: PUSH
20729: LD_INT 1
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 3
20738: NEG
20739: PUSH
20740: LD_INT 1
20742: NEG
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 3
20750: NEG
20751: PUSH
20752: LD_INT 2
20754: NEG
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20785: LD_ADDR_VAR 0 28
20789: PUSH
20790: LD_INT 0
20792: PUSH
20793: LD_INT 0
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 0
20802: PUSH
20803: LD_INT 1
20805: NEG
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: LD_INT 0
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: LD_INT 1
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 0
20833: PUSH
20834: LD_INT 1
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 1
20843: NEG
20844: PUSH
20845: LD_INT 0
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 1
20854: NEG
20855: PUSH
20856: LD_INT 1
20858: NEG
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 1
20866: NEG
20867: PUSH
20868: LD_INT 2
20870: NEG
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 0
20878: PUSH
20879: LD_INT 2
20881: NEG
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 1
20889: PUSH
20890: LD_INT 1
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: LD_INT 0
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: LD_INT 1
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 2
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 1
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 0
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 1
20950: NEG
20951: PUSH
20952: LD_INT 1
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 2
20961: NEG
20962: PUSH
20963: LD_INT 0
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 2
20972: NEG
20973: PUSH
20974: LD_INT 1
20976: NEG
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 2
20984: NEG
20985: PUSH
20986: LD_INT 2
20988: NEG
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 2
20996: NEG
20997: PUSH
20998: LD_INT 3
21000: NEG
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 1
21008: NEG
21009: PUSH
21010: LD_INT 3
21012: NEG
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 3
21020: NEG
21021: PUSH
21022: LD_INT 1
21024: NEG
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 3
21032: NEG
21033: PUSH
21034: LD_INT 2
21036: NEG
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21067: LD_ADDR_VAR 0 29
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: LD_INT 0
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 0
21084: PUSH
21085: LD_INT 1
21087: NEG
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 1
21095: PUSH
21096: LD_INT 0
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 1
21105: PUSH
21106: LD_INT 1
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 0
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 1
21125: NEG
21126: PUSH
21127: LD_INT 0
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 1
21136: NEG
21137: PUSH
21138: LD_INT 1
21140: NEG
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 1
21148: NEG
21149: PUSH
21150: LD_INT 2
21152: NEG
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 0
21160: PUSH
21161: LD_INT 2
21163: NEG
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 1
21171: PUSH
21172: LD_INT 1
21174: NEG
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 2
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 2
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: LD_INT 2
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: LD_INT 2
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 1
21222: NEG
21223: PUSH
21224: LD_INT 1
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 2
21233: NEG
21234: PUSH
21235: LD_INT 1
21237: NEG
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 2
21245: NEG
21246: PUSH
21247: LD_INT 2
21249: NEG
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 2
21257: NEG
21258: PUSH
21259: LD_INT 3
21261: NEG
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 2
21269: PUSH
21270: LD_INT 1
21272: NEG
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 3
21280: PUSH
21281: LD_INT 1
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 1
21290: PUSH
21291: LD_INT 3
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 1
21300: NEG
21301: PUSH
21302: LD_INT 2
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 3
21311: NEG
21312: PUSH
21313: LD_INT 2
21315: NEG
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21346: LD_ADDR_VAR 0 30
21350: PUSH
21351: LD_INT 0
21353: PUSH
21354: LD_INT 0
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: LD_INT 1
21366: NEG
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 1
21374: PUSH
21375: LD_INT 0
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: LD_INT 1
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 0
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 1
21404: NEG
21405: PUSH
21406: LD_INT 0
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 1
21415: NEG
21416: PUSH
21417: LD_INT 1
21419: NEG
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 1
21427: NEG
21428: PUSH
21429: LD_INT 2
21431: NEG
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 0
21439: PUSH
21440: LD_INT 2
21442: NEG
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 1
21450: PUSH
21451: LD_INT 1
21453: NEG
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 2
21461: PUSH
21462: LD_INT 0
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 2
21471: PUSH
21472: LD_INT 1
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 2
21481: PUSH
21482: LD_INT 2
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 1
21491: PUSH
21492: LD_INT 2
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 1
21501: NEG
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 2
21512: NEG
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 2
21523: NEG
21524: PUSH
21525: LD_INT 1
21527: NEG
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 1
21535: NEG
21536: PUSH
21537: LD_INT 3
21539: NEG
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 1
21547: PUSH
21548: LD_INT 2
21550: NEG
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 3
21558: PUSH
21559: LD_INT 2
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 2
21568: PUSH
21569: LD_INT 3
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 2
21578: NEG
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 3
21589: NEG
21590: PUSH
21591: LD_INT 1
21593: NEG
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21624: LD_ADDR_VAR 0 31
21628: PUSH
21629: LD_INT 0
21631: PUSH
21632: LD_INT 0
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: LD_INT 1
21644: NEG
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: LD_INT 0
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: LD_INT 1
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 0
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 1
21682: NEG
21683: PUSH
21684: LD_INT 0
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 1
21693: NEG
21694: PUSH
21695: LD_INT 1
21697: NEG
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 1
21705: NEG
21706: PUSH
21707: LD_INT 2
21709: NEG
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: LD_INT 1
21720: NEG
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 2
21728: PUSH
21729: LD_INT 0
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 2
21748: PUSH
21749: LD_INT 2
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 1
21758: PUSH
21759: LD_INT 2
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 0
21768: PUSH
21769: LD_INT 2
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 1
21778: NEG
21779: PUSH
21780: LD_INT 1
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 2
21789: NEG
21790: PUSH
21791: LD_INT 1
21793: NEG
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 2
21801: NEG
21802: PUSH
21803: LD_INT 2
21805: NEG
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 2
21813: NEG
21814: PUSH
21815: LD_INT 3
21817: NEG
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 2
21825: PUSH
21826: LD_INT 1
21828: NEG
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 3
21836: PUSH
21837: LD_INT 1
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 1
21846: PUSH
21847: LD_INT 3
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 1
21856: NEG
21857: PUSH
21858: LD_INT 2
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 3
21867: NEG
21868: PUSH
21869: LD_INT 2
21871: NEG
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21902: LD_ADDR_VAR 0 32
21906: PUSH
21907: LD_INT 0
21909: PUSH
21910: LD_INT 0
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 0
21919: PUSH
21920: LD_INT 1
21922: NEG
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 1
21930: PUSH
21931: LD_INT 0
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: LD_INT 1
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 1
21960: NEG
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: LD_INT 1
21975: NEG
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: LD_INT 2
21987: NEG
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 0
21995: PUSH
21996: LD_INT 2
21998: NEG
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 1
22006: PUSH
22007: LD_INT 1
22009: NEG
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 2
22017: PUSH
22018: LD_INT 1
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 2
22027: PUSH
22028: LD_INT 2
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 1
22037: PUSH
22038: LD_INT 2
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 0
22047: PUSH
22048: LD_INT 2
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 1
22057: NEG
22058: PUSH
22059: LD_INT 1
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 2
22068: NEG
22069: PUSH
22070: LD_INT 0
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 2
22079: NEG
22080: PUSH
22081: LD_INT 1
22083: NEG
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 1
22091: NEG
22092: PUSH
22093: LD_INT 3
22095: NEG
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 1
22103: PUSH
22104: LD_INT 2
22106: NEG
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 3
22114: PUSH
22115: LD_INT 2
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 2
22124: PUSH
22125: LD_INT 3
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 2
22134: NEG
22135: PUSH
22136: LD_INT 1
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 3
22145: NEG
22146: PUSH
22147: LD_INT 1
22149: NEG
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22180: LD_ADDR_VAR 0 33
22184: PUSH
22185: LD_INT 0
22187: PUSH
22188: LD_INT 0
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 0
22197: PUSH
22198: LD_INT 1
22200: NEG
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 1
22208: PUSH
22209: LD_INT 0
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 1
22218: PUSH
22219: LD_INT 1
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 0
22228: PUSH
22229: LD_INT 1
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 1
22238: NEG
22239: PUSH
22240: LD_INT 0
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 1
22249: NEG
22250: PUSH
22251: LD_INT 1
22253: NEG
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 1
22261: NEG
22262: PUSH
22263: LD_INT 2
22265: NEG
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 1
22273: PUSH
22274: LD_INT 1
22276: NEG
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 2
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 2
22294: PUSH
22295: LD_INT 1
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 1
22304: PUSH
22305: LD_INT 2
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 0
22314: PUSH
22315: LD_INT 2
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 1
22324: NEG
22325: PUSH
22326: LD_INT 1
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 2
22335: NEG
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 2
22346: NEG
22347: PUSH
22348: LD_INT 1
22350: NEG
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 2
22358: NEG
22359: PUSH
22360: LD_INT 2
22362: NEG
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 2
22370: NEG
22371: PUSH
22372: LD_INT 3
22374: NEG
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 2
22382: PUSH
22383: LD_INT 1
22385: NEG
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 3
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 1
22403: PUSH
22404: LD_INT 3
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 1
22413: NEG
22414: PUSH
22415: LD_INT 2
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 3
22424: NEG
22425: PUSH
22426: LD_INT 2
22428: NEG
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22459: LD_ADDR_VAR 0 34
22463: PUSH
22464: LD_INT 0
22466: PUSH
22467: LD_INT 0
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 0
22476: PUSH
22477: LD_INT 1
22479: NEG
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: LD_INT 0
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 1
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: LD_INT 1
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 1
22517: NEG
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 1
22528: NEG
22529: PUSH
22530: LD_INT 1
22532: NEG
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 1
22540: NEG
22541: PUSH
22542: LD_INT 2
22544: NEG
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 0
22552: PUSH
22553: LD_INT 2
22555: NEG
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 1
22563: PUSH
22564: LD_INT 1
22566: NEG
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 2
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: LD_INT 2
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: LD_INT 2
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 1
22604: NEG
22605: PUSH
22606: LD_INT 1
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 2
22615: NEG
22616: PUSH
22617: LD_INT 0
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 2
22626: NEG
22627: PUSH
22628: LD_INT 1
22630: NEG
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 2
22638: NEG
22639: PUSH
22640: LD_INT 2
22642: NEG
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 1
22650: NEG
22651: PUSH
22652: LD_INT 3
22654: NEG
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 1
22662: PUSH
22663: LD_INT 2
22665: NEG
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 3
22673: PUSH
22674: LD_INT 2
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 2
22683: PUSH
22684: LD_INT 3
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 2
22693: NEG
22694: PUSH
22695: LD_INT 1
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 3
22704: NEG
22705: PUSH
22706: LD_INT 1
22708: NEG
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22739: LD_ADDR_VAR 0 35
22743: PUSH
22744: LD_INT 0
22746: PUSH
22747: LD_INT 0
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 0
22756: PUSH
22757: LD_INT 1
22759: NEG
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 1
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 1
22777: PUSH
22778: LD_INT 1
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 0
22787: PUSH
22788: LD_INT 1
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 1
22797: NEG
22798: PUSH
22799: LD_INT 0
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 1
22808: NEG
22809: PUSH
22810: LD_INT 1
22812: NEG
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 2
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 2
22830: NEG
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22851: LD_ADDR_VAR 0 36
22855: PUSH
22856: LD_INT 0
22858: PUSH
22859: LD_INT 0
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 0
22868: PUSH
22869: LD_INT 1
22871: NEG
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 1
22879: PUSH
22880: LD_INT 0
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 1
22889: PUSH
22890: LD_INT 1
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 0
22899: PUSH
22900: LD_INT 1
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 1
22909: NEG
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 1
22920: NEG
22921: PUSH
22922: LD_INT 1
22924: NEG
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 1
22932: NEG
22933: PUSH
22934: LD_INT 2
22936: NEG
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 1
22944: PUSH
22945: LD_INT 2
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22963: LD_ADDR_VAR 0 37
22967: PUSH
22968: LD_INT 0
22970: PUSH
22971: LD_INT 0
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 0
22980: PUSH
22981: LD_INT 1
22983: NEG
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 1
22991: PUSH
22992: LD_INT 0
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 1
23001: PUSH
23002: LD_INT 1
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 0
23011: PUSH
23012: LD_INT 1
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: NEG
23022: PUSH
23023: LD_INT 0
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 1
23032: NEG
23033: PUSH
23034: LD_INT 1
23036: NEG
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 1
23055: NEG
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23075: LD_ADDR_VAR 0 38
23079: PUSH
23080: LD_INT 0
23082: PUSH
23083: LD_INT 0
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: LD_INT 1
23095: NEG
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: LD_INT 0
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: PUSH
23114: LD_INT 1
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 0
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: NEG
23134: PUSH
23135: LD_INT 0
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 1
23144: NEG
23145: PUSH
23146: LD_INT 1
23148: NEG
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 2
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 2
23166: NEG
23167: PUSH
23168: LD_INT 1
23170: NEG
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23187: LD_ADDR_VAR 0 39
23191: PUSH
23192: LD_INT 0
23194: PUSH
23195: LD_INT 0
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: LD_INT 1
23207: NEG
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: LD_INT 1
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 0
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 1
23245: NEG
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: NEG
23257: PUSH
23258: LD_INT 1
23260: NEG
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: LD_INT 2
23272: NEG
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 1
23280: PUSH
23281: LD_INT 2
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23299: LD_ADDR_VAR 0 40
23303: PUSH
23304: LD_INT 0
23306: PUSH
23307: LD_INT 0
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 0
23316: PUSH
23317: LD_INT 1
23319: NEG
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 1
23327: PUSH
23328: LD_INT 0
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 0
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 1
23357: NEG
23358: PUSH
23359: LD_INT 0
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 1
23368: NEG
23369: PUSH
23370: LD_INT 1
23372: NEG
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: LD_INT 1
23383: NEG
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 1
23391: NEG
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23411: LD_ADDR_VAR 0 41
23415: PUSH
23416: LD_INT 0
23418: PUSH
23419: LD_INT 0
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 0
23428: PUSH
23429: LD_INT 1
23431: NEG
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 1
23439: PUSH
23440: LD_INT 0
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 1
23449: PUSH
23450: LD_INT 1
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 0
23459: PUSH
23460: LD_INT 1
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 1
23469: NEG
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 1
23480: NEG
23481: PUSH
23482: LD_INT 1
23484: NEG
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 1
23492: NEG
23493: PUSH
23494: LD_INT 2
23496: NEG
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 1
23504: PUSH
23505: LD_INT 1
23507: NEG
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 2
23515: PUSH
23516: LD_INT 0
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 2
23525: PUSH
23526: LD_INT 1
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 2
23535: PUSH
23536: LD_INT 2
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 1
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 1
23555: NEG
23556: PUSH
23557: LD_INT 1
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 2
23566: NEG
23567: PUSH
23568: LD_INT 0
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 2
23577: NEG
23578: PUSH
23579: LD_INT 1
23581: NEG
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 2
23589: NEG
23590: PUSH
23591: LD_INT 2
23593: NEG
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 2
23601: NEG
23602: PUSH
23603: LD_INT 3
23605: NEG
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 2
23613: PUSH
23614: LD_INT 1
23616: NEG
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 3
23624: PUSH
23625: LD_INT 0
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 3
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 3
23644: PUSH
23645: LD_INT 2
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 3
23654: PUSH
23655: LD_INT 3
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 2
23664: PUSH
23665: LD_INT 3
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 2
23674: NEG
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 3
23685: NEG
23686: PUSH
23687: LD_INT 0
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 3
23696: NEG
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 3
23708: NEG
23709: PUSH
23710: LD_INT 2
23712: NEG
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 3
23720: NEG
23721: PUSH
23722: LD_INT 3
23724: NEG
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23761: LD_ADDR_VAR 0 42
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: LD_INT 1
23781: NEG
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 1
23789: PUSH
23790: LD_INT 0
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: LD_INT 1
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 0
23809: PUSH
23810: LD_INT 1
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 1
23819: NEG
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 1
23830: NEG
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 1
23842: NEG
23843: PUSH
23844: LD_INT 2
23846: NEG
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 0
23854: PUSH
23855: LD_INT 2
23857: NEG
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: LD_INT 1
23868: NEG
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 2
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 2
23886: PUSH
23887: LD_INT 2
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: LD_INT 2
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 0
23906: PUSH
23907: LD_INT 2
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 1
23916: NEG
23917: PUSH
23918: LD_INT 1
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 2
23927: NEG
23928: PUSH
23929: LD_INT 1
23931: NEG
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 2
23939: NEG
23940: PUSH
23941: LD_INT 2
23943: NEG
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 2
23951: NEG
23952: PUSH
23953: LD_INT 3
23955: NEG
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 1
23963: NEG
23964: PUSH
23965: LD_INT 3
23967: NEG
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 0
23975: PUSH
23976: LD_INT 3
23978: NEG
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 1
23986: PUSH
23987: LD_INT 2
23989: NEG
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 3
23997: PUSH
23998: LD_INT 2
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 3
24007: PUSH
24008: LD_INT 3
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 2
24017: PUSH
24018: LD_INT 3
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: LD_INT 3
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: LD_INT 3
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: NEG
24048: PUSH
24049: LD_INT 2
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 3
24058: NEG
24059: PUSH
24060: LD_INT 2
24062: NEG
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 3
24070: NEG
24071: PUSH
24072: LD_INT 3
24074: NEG
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24111: LD_ADDR_VAR 0 43
24115: PUSH
24116: LD_INT 0
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: LD_INT 0
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 1
24149: PUSH
24150: LD_INT 1
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 0
24159: PUSH
24160: LD_INT 1
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 1
24169: NEG
24170: PUSH
24171: LD_INT 0
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 1
24180: NEG
24181: PUSH
24182: LD_INT 1
24184: NEG
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: NEG
24193: PUSH
24194: LD_INT 2
24196: NEG
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 0
24204: PUSH
24205: LD_INT 2
24207: NEG
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: LD_INT 1
24218: NEG
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 2
24226: PUSH
24227: LD_INT 0
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 2
24236: PUSH
24237: LD_INT 1
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 1
24246: PUSH
24247: LD_INT 2
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 0
24256: PUSH
24257: LD_INT 2
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 1
24266: NEG
24267: PUSH
24268: LD_INT 1
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 2
24277: NEG
24278: PUSH
24279: LD_INT 0
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 2
24288: NEG
24289: PUSH
24290: LD_INT 1
24292: NEG
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: LD_INT 3
24304: NEG
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 0
24312: PUSH
24313: LD_INT 3
24315: NEG
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: LD_INT 2
24326: NEG
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 2
24334: PUSH
24335: LD_INT 1
24337: NEG
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 3
24345: PUSH
24346: LD_INT 0
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 3
24355: PUSH
24356: LD_INT 1
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: LD_INT 3
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 0
24375: PUSH
24376: LD_INT 3
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 1
24385: NEG
24386: PUSH
24387: LD_INT 2
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 2
24396: NEG
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 3
24407: NEG
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 3
24418: NEG
24419: PUSH
24420: LD_INT 1
24422: NEG
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24459: LD_ADDR_VAR 0 44
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: LD_INT 1
24479: NEG
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 1
24487: PUSH
24488: LD_INT 0
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: LD_INT 1
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 0
24507: PUSH
24508: LD_INT 1
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 1
24517: NEG
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 1
24528: NEG
24529: PUSH
24530: LD_INT 1
24532: NEG
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 1
24540: NEG
24541: PUSH
24542: LD_INT 2
24544: NEG
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: LD_INT 1
24555: NEG
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 2
24563: PUSH
24564: LD_INT 0
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 2
24573: PUSH
24574: LD_INT 1
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 2
24583: PUSH
24584: LD_INT 2
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 1
24593: PUSH
24594: LD_INT 2
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 1
24603: NEG
24604: PUSH
24605: LD_INT 1
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 2
24614: NEG
24615: PUSH
24616: LD_INT 0
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 2
24625: NEG
24626: PUSH
24627: LD_INT 1
24629: NEG
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 2
24637: NEG
24638: PUSH
24639: LD_INT 2
24641: NEG
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 2
24649: NEG
24650: PUSH
24651: LD_INT 3
24653: NEG
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 2
24661: PUSH
24662: LD_INT 1
24664: NEG
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 3
24672: PUSH
24673: LD_INT 0
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 3
24682: PUSH
24683: LD_INT 1
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 3
24692: PUSH
24693: LD_INT 2
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 3
24702: PUSH
24703: LD_INT 3
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 2
24712: PUSH
24713: LD_INT 3
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 2
24722: NEG
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 3
24733: NEG
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 3
24744: NEG
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 3
24756: NEG
24757: PUSH
24758: LD_INT 2
24760: NEG
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 3
24768: NEG
24769: PUSH
24770: LD_INT 3
24772: NEG
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24809: LD_ADDR_VAR 0 45
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 0
24826: PUSH
24827: LD_INT 1
24829: NEG
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 0
24857: PUSH
24858: LD_INT 1
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 1
24867: NEG
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: NEG
24879: PUSH
24880: LD_INT 1
24882: NEG
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: NEG
24891: PUSH
24892: LD_INT 2
24894: NEG
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 0
24902: PUSH
24903: LD_INT 2
24905: NEG
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: LD_INT 1
24916: NEG
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 2
24924: PUSH
24925: LD_INT 1
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 2
24934: PUSH
24935: LD_INT 2
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: LD_INT 2
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 0
24954: PUSH
24955: LD_INT 2
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 1
24964: NEG
24965: PUSH
24966: LD_INT 1
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 2
24975: NEG
24976: PUSH
24977: LD_INT 1
24979: NEG
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 2
24987: NEG
24988: PUSH
24989: LD_INT 2
24991: NEG
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 2
24999: NEG
25000: PUSH
25001: LD_INT 3
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: NEG
25012: PUSH
25013: LD_INT 3
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: LD_INT 3
25026: NEG
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: LD_INT 2
25037: NEG
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 3
25045: PUSH
25046: LD_INT 2
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 3
25055: PUSH
25056: LD_INT 3
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 2
25065: PUSH
25066: LD_INT 3
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: LD_INT 3
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: LD_INT 3
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 1
25095: NEG
25096: PUSH
25097: LD_INT 2
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 3
25106: NEG
25107: PUSH
25108: LD_INT 2
25110: NEG
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 3
25118: NEG
25119: PUSH
25120: LD_INT 3
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25159: LD_ADDR_VAR 0 46
25163: PUSH
25164: LD_INT 0
25166: PUSH
25167: LD_INT 0
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 0
25176: PUSH
25177: LD_INT 1
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: PUSH
25188: LD_INT 0
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: LD_INT 1
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 1
25217: NEG
25218: PUSH
25219: LD_INT 0
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 1
25228: NEG
25229: PUSH
25230: LD_INT 1
25232: NEG
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: NEG
25241: PUSH
25242: LD_INT 2
25244: NEG
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 0
25252: PUSH
25253: LD_INT 2
25255: NEG
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 1
25263: PUSH
25264: LD_INT 1
25266: NEG
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 2
25274: PUSH
25275: LD_INT 0
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 2
25284: PUSH
25285: LD_INT 1
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: LD_INT 2
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: LD_INT 2
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 1
25314: NEG
25315: PUSH
25316: LD_INT 1
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 2
25325: NEG
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 2
25336: NEG
25337: PUSH
25338: LD_INT 1
25340: NEG
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 1
25348: NEG
25349: PUSH
25350: LD_INT 3
25352: NEG
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 0
25360: PUSH
25361: LD_INT 3
25363: NEG
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 1
25371: PUSH
25372: LD_INT 2
25374: NEG
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 2
25382: PUSH
25383: LD_INT 1
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 3
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 3
25403: PUSH
25404: LD_INT 1
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 1
25413: PUSH
25414: LD_INT 3
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 0
25423: PUSH
25424: LD_INT 3
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 1
25433: NEG
25434: PUSH
25435: LD_INT 2
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 2
25444: NEG
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 3
25455: NEG
25456: PUSH
25457: LD_INT 0
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 3
25466: NEG
25467: PUSH
25468: LD_INT 1
25470: NEG
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25507: LD_ADDR_VAR 0 47
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 0
25524: PUSH
25525: LD_INT 1
25527: NEG
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: LD_INT 1
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 0
25555: PUSH
25556: LD_INT 1
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 1
25565: NEG
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 1
25576: NEG
25577: PUSH
25578: LD_INT 1
25580: NEG
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 1
25588: NEG
25589: PUSH
25590: LD_INT 2
25592: NEG
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: LD_INT 2
25603: NEG
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: LD_INT 1
25614: NEG
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 2
25622: NEG
25623: PUSH
25624: LD_INT 1
25626: NEG
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 2
25634: NEG
25635: PUSH
25636: LD_INT 2
25638: NEG
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25658: LD_ADDR_VAR 0 48
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: LD_INT 0
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 0
25675: PUSH
25676: LD_INT 1
25678: NEG
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: LD_INT 0
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: LD_INT 1
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 0
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 1
25716: NEG
25717: PUSH
25718: LD_INT 0
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 1
25727: NEG
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: LD_INT 2
25743: NEG
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: LD_INT 2
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: LD_INT 1
25765: NEG
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 2
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: LD_INT 1
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25805: LD_ADDR_VAR 0 49
25809: PUSH
25810: LD_INT 0
25812: PUSH
25813: LD_INT 0
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: LD_INT 0
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: LD_INT 1
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 0
25853: PUSH
25854: LD_INT 1
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: NEG
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 1
25874: NEG
25875: PUSH
25876: LD_INT 1
25878: NEG
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: LD_INT 1
25889: NEG
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 2
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 2
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 2
25917: PUSH
25918: LD_INT 2
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: PUSH
25928: LD_INT 2
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25949: LD_ADDR_VAR 0 50
25953: PUSH
25954: LD_INT 0
25956: PUSH
25957: LD_INT 0
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 0
25966: PUSH
25967: LD_INT 1
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 1
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 0
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 1
26007: NEG
26008: PUSH
26009: LD_INT 0
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 1
26018: NEG
26019: PUSH
26020: LD_INT 1
26022: NEG
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 2
26030: PUSH
26031: LD_INT 1
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 2
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: LD_INT 2
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 0
26060: PUSH
26061: LD_INT 2
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: LD_INT 1
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26093: LD_ADDR_VAR 0 51
26097: PUSH
26098: LD_INT 0
26100: PUSH
26101: LD_INT 0
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 0
26110: PUSH
26111: LD_INT 1
26113: NEG
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 1
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 1
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: LD_INT 1
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 1
26151: NEG
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 1
26162: NEG
26163: PUSH
26164: LD_INT 1
26166: NEG
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: LD_INT 2
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: LD_INT 2
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 1
26194: NEG
26195: PUSH
26196: LD_INT 1
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 2
26205: NEG
26206: PUSH
26207: LD_INT 0
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 2
26216: NEG
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26240: LD_ADDR_VAR 0 52
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: LD_INT 0
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: LD_INT 1
26260: NEG
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: LD_INT 1
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: LD_INT 1
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 1
26298: NEG
26299: PUSH
26300: LD_INT 0
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 1
26309: NEG
26310: PUSH
26311: LD_INT 1
26313: NEG
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 1
26321: NEG
26322: PUSH
26323: LD_INT 2
26325: NEG
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 1
26333: NEG
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 2
26344: NEG
26345: PUSH
26346: LD_INT 0
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 2
26355: NEG
26356: PUSH
26357: LD_INT 1
26359: NEG
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 2
26367: NEG
26368: PUSH
26369: LD_INT 2
26371: NEG
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26391: LD_ADDR_VAR 0 53
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: LD_INT 0
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: LD_INT 0
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 1
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 0
26439: PUSH
26440: LD_INT 1
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 1
26449: NEG
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: LD_INT 1
26464: NEG
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 1
26472: NEG
26473: PUSH
26474: LD_INT 2
26476: NEG
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 0
26484: PUSH
26485: LD_INT 2
26487: NEG
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: LD_INT 1
26498: NEG
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 2
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 2
26526: PUSH
26527: LD_INT 2
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: LD_INT 2
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: LD_INT 2
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 1
26556: NEG
26557: PUSH
26558: LD_INT 1
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 2
26567: NEG
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 2
26578: NEG
26579: PUSH
26580: LD_INT 1
26582: NEG
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 2
26590: NEG
26591: PUSH
26592: LD_INT 2
26594: NEG
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26621: LD_ADDR_VAR 0 54
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 1
26659: PUSH
26660: LD_INT 1
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: LD_INT 1
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 1
26679: NEG
26680: PUSH
26681: LD_INT 0
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: NEG
26691: PUSH
26692: LD_INT 1
26694: NEG
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 1
26702: NEG
26703: PUSH
26704: LD_INT 2
26706: NEG
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 0
26714: PUSH
26715: LD_INT 2
26717: NEG
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 1
26725: PUSH
26726: LD_INT 1
26728: NEG
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 2
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 2
26746: PUSH
26747: LD_INT 1
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 2
26756: PUSH
26757: LD_INT 2
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 1
26766: PUSH
26767: LD_INT 2
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: LD_INT 2
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 1
26786: NEG
26787: PUSH
26788: LD_INT 1
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 2
26797: NEG
26798: PUSH
26799: LD_INT 0
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 2
26808: NEG
26809: PUSH
26810: LD_INT 1
26812: NEG
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 2
26820: NEG
26821: PUSH
26822: LD_INT 2
26824: NEG
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26851: LD_ADDR_VAR 0 55
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 1
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 1
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 1
26909: NEG
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 1
26920: NEG
26921: PUSH
26922: LD_INT 1
26924: NEG
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 1
26932: NEG
26933: PUSH
26934: LD_INT 2
26936: NEG
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: LD_INT 2
26947: NEG
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: LD_INT 1
26958: NEG
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 2
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 2
26976: PUSH
26977: LD_INT 1
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 2
26986: PUSH
26987: LD_INT 2
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: LD_INT 2
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 0
27006: PUSH
27007: LD_INT 2
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 1
27016: NEG
27017: PUSH
27018: LD_INT 1
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 2
27027: NEG
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 2
27038: NEG
27039: PUSH
27040: LD_INT 1
27042: NEG
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 2
27050: NEG
27051: PUSH
27052: LD_INT 2
27054: NEG
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27081: LD_ADDR_VAR 0 56
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: LD_INT 1
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 1
27139: NEG
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 1
27162: NEG
27163: PUSH
27164: LD_INT 2
27166: NEG
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 0
27174: PUSH
27175: LD_INT 2
27177: NEG
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 1
27185: PUSH
27186: LD_INT 1
27188: NEG
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 2
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 2
27206: PUSH
27207: LD_INT 1
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 2
27216: PUSH
27217: LD_INT 2
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: LD_INT 2
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: LD_INT 2
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 1
27246: NEG
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 2
27257: NEG
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 2
27268: NEG
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 2
27280: NEG
27281: PUSH
27282: LD_INT 2
27284: NEG
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27311: LD_ADDR_VAR 0 57
27315: PUSH
27316: LD_INT 0
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 1
27339: PUSH
27340: LD_INT 0
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 1
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 1
27369: NEG
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 1
27380: NEG
27381: PUSH
27382: LD_INT 1
27384: NEG
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: LD_INT 2
27396: NEG
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: LD_INT 2
27407: NEG
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 2
27426: PUSH
27427: LD_INT 0
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 2
27436: PUSH
27437: LD_INT 1
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 2
27446: PUSH
27447: LD_INT 2
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: PUSH
27457: LD_INT 2
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: LD_INT 2
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: NEG
27477: PUSH
27478: LD_INT 1
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 2
27487: NEG
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 2
27498: NEG
27499: PUSH
27500: LD_INT 1
27502: NEG
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 2
27510: NEG
27511: PUSH
27512: LD_INT 2
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27541: LD_ADDR_VAR 0 58
27545: PUSH
27546: LD_INT 0
27548: PUSH
27549: LD_INT 0
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 0
27558: PUSH
27559: LD_INT 1
27561: NEG
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 1
27569: PUSH
27570: LD_INT 0
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: LD_INT 1
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 1
27599: NEG
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 1
27610: NEG
27611: PUSH
27612: LD_INT 1
27614: NEG
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 1
27622: NEG
27623: PUSH
27624: LD_INT 2
27626: NEG
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 0
27634: PUSH
27635: LD_INT 2
27637: NEG
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: LD_INT 1
27648: NEG
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 2
27656: PUSH
27657: LD_INT 0
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 2
27666: PUSH
27667: LD_INT 1
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 2
27676: PUSH
27677: LD_INT 2
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: LD_INT 2
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: LD_INT 2
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 2
27717: NEG
27718: PUSH
27719: LD_INT 0
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 2
27728: NEG
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 2
27740: NEG
27741: PUSH
27742: LD_INT 2
27744: NEG
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27771: LD_ADDR_VAR 0 59
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 1
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: LD_INT 0
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 1
27840: NEG
27841: PUSH
27842: LD_INT 1
27844: NEG
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27859: LD_ADDR_VAR 0 60
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 1
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: LD_INT 1
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 1
27928: NEG
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27947: LD_ADDR_VAR 0 61
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: LD_INT 1
27967: NEG
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 0
27995: PUSH
27996: LD_INT 1
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 1
28005: NEG
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: LD_INT 1
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28035: LD_ADDR_VAR 0 62
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 0
28052: PUSH
28053: LD_INT 1
28055: NEG
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 1
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: NEG
28094: PUSH
28095: LD_INT 0
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28123: LD_ADDR_VAR 0 63
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: LD_INT 0
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: LD_INT 1
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: PUSH
28152: LD_INT 0
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: LD_INT 1
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: LD_INT 1
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 1
28181: NEG
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: NEG
28193: PUSH
28194: LD_INT 1
28196: NEG
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28211: LD_ADDR_VAR 0 64
28215: PUSH
28216: LD_INT 0
28218: PUSH
28219: LD_INT 0
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 0
28228: PUSH
28229: LD_INT 1
28231: NEG
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 1
28239: PUSH
28240: LD_INT 0
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 1
28249: PUSH
28250: LD_INT 1
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 0
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 1
28269: NEG
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 1
28280: NEG
28281: PUSH
28282: LD_INT 1
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: ST_TO_ADDR
// end ; 1 :
28299: GO 34196
28301: LD_INT 1
28303: DOUBLE
28304: EQUAL
28305: IFTRUE 28309
28307: GO 30932
28309: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28310: LD_ADDR_VAR 0 11
28314: PUSH
28315: LD_INT 1
28317: NEG
28318: PUSH
28319: LD_INT 3
28321: NEG
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 0
28329: PUSH
28330: LD_INT 3
28332: NEG
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 1
28340: PUSH
28341: LD_INT 2
28343: NEG
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: LIST
28353: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28354: LD_ADDR_VAR 0 12
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: LD_INT 1
28364: NEG
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 3
28372: PUSH
28373: LD_INT 0
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 3
28382: PUSH
28383: LD_INT 1
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: LIST
28394: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28395: LD_ADDR_VAR 0 13
28399: PUSH
28400: LD_INT 3
28402: PUSH
28403: LD_INT 2
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 3
28412: PUSH
28413: LD_INT 3
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: LD_INT 3
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: LIST
28434: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28435: LD_ADDR_VAR 0 14
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: LD_INT 3
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 0
28452: PUSH
28453: LD_INT 3
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 1
28462: NEG
28463: PUSH
28464: LD_INT 2
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: LIST
28475: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28476: LD_ADDR_VAR 0 15
28480: PUSH
28481: LD_INT 2
28483: NEG
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 3
28494: NEG
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 3
28505: NEG
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: LIST
28519: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28520: LD_ADDR_VAR 0 16
28524: PUSH
28525: LD_INT 2
28527: NEG
28528: PUSH
28529: LD_INT 3
28531: NEG
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 3
28539: NEG
28540: PUSH
28541: LD_INT 2
28543: NEG
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 3
28551: NEG
28552: PUSH
28553: LD_INT 3
28555: NEG
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: LIST
28565: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28566: LD_ADDR_VAR 0 17
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: LD_INT 3
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: LD_INT 3
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: LD_INT 2
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28610: LD_ADDR_VAR 0 18
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: LD_INT 1
28620: NEG
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 3
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 3
28638: PUSH
28639: LD_INT 1
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: LIST
28650: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28651: LD_ADDR_VAR 0 19
28655: PUSH
28656: LD_INT 3
28658: PUSH
28659: LD_INT 2
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 3
28668: PUSH
28669: LD_INT 3
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 2
28678: PUSH
28679: LD_INT 3
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: LIST
28690: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28691: LD_ADDR_VAR 0 20
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: LD_INT 3
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: LD_INT 3
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: LD_INT 2
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: LIST
28731: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28732: LD_ADDR_VAR 0 21
28736: PUSH
28737: LD_INT 2
28739: NEG
28740: PUSH
28741: LD_INT 1
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 3
28750: NEG
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 3
28761: NEG
28762: PUSH
28763: LD_INT 1
28765: NEG
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: LIST
28775: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28776: LD_ADDR_VAR 0 22
28780: PUSH
28781: LD_INT 2
28783: NEG
28784: PUSH
28785: LD_INT 3
28787: NEG
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 3
28795: NEG
28796: PUSH
28797: LD_INT 2
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 3
28807: NEG
28808: PUSH
28809: LD_INT 3
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: LIST
28821: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28822: LD_ADDR_VAR 0 23
28826: PUSH
28827: LD_INT 0
28829: PUSH
28830: LD_INT 3
28832: NEG
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 1
28840: NEG
28841: PUSH
28842: LD_INT 4
28844: NEG
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 1
28852: PUSH
28853: LD_INT 3
28855: NEG
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: LIST
28865: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28866: LD_ADDR_VAR 0 24
28870: PUSH
28871: LD_INT 3
28873: PUSH
28874: LD_INT 0
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 3
28883: PUSH
28884: LD_INT 1
28886: NEG
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 4
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: LIST
28906: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28907: LD_ADDR_VAR 0 25
28911: PUSH
28912: LD_INT 3
28914: PUSH
28915: LD_INT 3
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 4
28924: PUSH
28925: LD_INT 3
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 3
28934: PUSH
28935: LD_INT 4
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: LIST
28946: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28947: LD_ADDR_VAR 0 26
28951: PUSH
28952: LD_INT 0
28954: PUSH
28955: LD_INT 3
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: LD_INT 4
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 1
28974: NEG
28975: PUSH
28976: LD_INT 3
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: LIST
28987: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28988: LD_ADDR_VAR 0 27
28992: PUSH
28993: LD_INT 3
28995: NEG
28996: PUSH
28997: LD_INT 0
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 3
29006: NEG
29007: PUSH
29008: LD_INT 1
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 4
29017: NEG
29018: PUSH
29019: LD_INT 1
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: LIST
29031: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29032: LD_ADDR_VAR 0 28
29036: PUSH
29037: LD_INT 3
29039: NEG
29040: PUSH
29041: LD_INT 3
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 3
29051: NEG
29052: PUSH
29053: LD_INT 4
29055: NEG
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 4
29063: NEG
29064: PUSH
29065: LD_INT 3
29067: NEG
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: LIST
29077: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29078: LD_ADDR_VAR 0 29
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: LD_INT 3
29089: NEG
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 0
29097: PUSH
29098: LD_INT 3
29100: NEG
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 1
29108: PUSH
29109: LD_INT 2
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 1
29119: NEG
29120: PUSH
29121: LD_INT 4
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 4
29134: NEG
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: LD_INT 3
29145: NEG
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: PUSH
29155: LD_INT 5
29157: NEG
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: LD_INT 5
29168: NEG
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 1
29176: PUSH
29177: LD_INT 4
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: LD_INT 6
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 0
29199: PUSH
29200: LD_INT 6
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 1
29210: PUSH
29211: LD_INT 5
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29233: LD_ADDR_VAR 0 30
29237: PUSH
29238: LD_INT 2
29240: PUSH
29241: LD_INT 1
29243: NEG
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 3
29251: PUSH
29252: LD_INT 0
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 3
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 3
29271: PUSH
29272: LD_INT 1
29274: NEG
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 4
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 4
29292: PUSH
29293: LD_INT 1
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 4
29302: PUSH
29303: LD_INT 1
29305: NEG
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 5
29313: PUSH
29314: LD_INT 0
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 5
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 5
29333: PUSH
29334: LD_INT 1
29336: NEG
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 6
29344: PUSH
29345: LD_INT 0
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 6
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29376: LD_ADDR_VAR 0 31
29380: PUSH
29381: LD_INT 3
29383: PUSH
29384: LD_INT 2
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 3
29393: PUSH
29394: LD_INT 3
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 2
29403: PUSH
29404: LD_INT 3
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 4
29413: PUSH
29414: LD_INT 3
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 4
29423: PUSH
29424: LD_INT 4
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 3
29433: PUSH
29434: LD_INT 4
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 5
29443: PUSH
29444: LD_INT 4
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 5
29453: PUSH
29454: LD_INT 5
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 4
29463: PUSH
29464: LD_INT 5
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 6
29473: PUSH
29474: LD_INT 5
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 6
29483: PUSH
29484: LD_INT 6
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 5
29493: PUSH
29494: LD_INT 6
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29515: LD_ADDR_VAR 0 32
29519: PUSH
29520: LD_INT 1
29522: PUSH
29523: LD_INT 3
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: LD_INT 3
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: LD_INT 2
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 1
29553: PUSH
29554: LD_INT 4
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: LD_INT 4
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 1
29573: NEG
29574: PUSH
29575: LD_INT 3
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: LD_INT 5
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 0
29594: PUSH
29595: LD_INT 5
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 1
29604: NEG
29605: PUSH
29606: LD_INT 4
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: LD_INT 6
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 0
29625: PUSH
29626: LD_INT 6
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: NEG
29636: PUSH
29637: LD_INT 5
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29658: LD_ADDR_VAR 0 33
29662: PUSH
29663: LD_INT 2
29665: NEG
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 3
29676: NEG
29677: PUSH
29678: LD_INT 0
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 3
29687: NEG
29688: PUSH
29689: LD_INT 1
29691: NEG
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 3
29699: NEG
29700: PUSH
29701: LD_INT 1
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 4
29710: NEG
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 4
29721: NEG
29722: PUSH
29723: LD_INT 1
29725: NEG
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 4
29733: NEG
29734: PUSH
29735: LD_INT 1
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 5
29744: NEG
29745: PUSH
29746: LD_INT 0
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 5
29755: NEG
29756: PUSH
29757: LD_INT 1
29759: NEG
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 5
29767: NEG
29768: PUSH
29769: LD_INT 1
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 6
29778: NEG
29779: PUSH
29780: LD_INT 0
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 6
29789: NEG
29790: PUSH
29791: LD_INT 1
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29813: LD_ADDR_VAR 0 34
29817: PUSH
29818: LD_INT 2
29820: NEG
29821: PUSH
29822: LD_INT 3
29824: NEG
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 3
29832: NEG
29833: PUSH
29834: LD_INT 2
29836: NEG
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 3
29844: NEG
29845: PUSH
29846: LD_INT 3
29848: NEG
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 3
29856: NEG
29857: PUSH
29858: LD_INT 4
29860: NEG
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 4
29868: NEG
29869: PUSH
29870: LD_INT 3
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 4
29880: NEG
29881: PUSH
29882: LD_INT 4
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 4
29892: NEG
29893: PUSH
29894: LD_INT 5
29896: NEG
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 5
29904: NEG
29905: PUSH
29906: LD_INT 4
29908: NEG
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 5
29916: NEG
29917: PUSH
29918: LD_INT 5
29920: NEG
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 5
29928: NEG
29929: PUSH
29930: LD_INT 6
29932: NEG
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 6
29940: NEG
29941: PUSH
29942: LD_INT 5
29944: NEG
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 6
29952: NEG
29953: PUSH
29954: LD_INT 6
29956: NEG
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29976: LD_ADDR_VAR 0 41
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: LD_INT 2
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: LD_INT 3
29998: NEG
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 1
30006: PUSH
30007: LD_INT 2
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: LIST
30019: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30020: LD_ADDR_VAR 0 42
30024: PUSH
30025: LD_INT 2
30027: PUSH
30028: LD_INT 0
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 2
30037: PUSH
30038: LD_INT 1
30040: NEG
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 3
30048: PUSH
30049: LD_INT 1
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: LIST
30060: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30061: LD_ADDR_VAR 0 43
30065: PUSH
30066: LD_INT 2
30068: PUSH
30069: LD_INT 2
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 3
30078: PUSH
30079: LD_INT 2
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 2
30088: PUSH
30089: LD_INT 3
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: LIST
30100: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30101: LD_ADDR_VAR 0 44
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: LD_INT 2
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: LD_INT 3
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 1
30128: NEG
30129: PUSH
30130: LD_INT 2
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: LIST
30141: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30142: LD_ADDR_VAR 0 45
30146: PUSH
30147: LD_INT 2
30149: NEG
30150: PUSH
30151: LD_INT 0
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 2
30160: NEG
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 3
30171: NEG
30172: PUSH
30173: LD_INT 1
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: LIST
30185: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30186: LD_ADDR_VAR 0 46
30190: PUSH
30191: LD_INT 2
30193: NEG
30194: PUSH
30195: LD_INT 2
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 2
30205: NEG
30206: PUSH
30207: LD_INT 3
30209: NEG
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 3
30217: NEG
30218: PUSH
30219: LD_INT 2
30221: NEG
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: LIST
30231: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30232: LD_ADDR_VAR 0 47
30236: PUSH
30237: LD_INT 2
30239: NEG
30240: PUSH
30241: LD_INT 3
30243: NEG
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: LD_INT 3
30255: NEG
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30265: LD_ADDR_VAR 0 48
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: LD_INT 2
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 2
30283: PUSH
30284: LD_INT 1
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30296: LD_ADDR_VAR 0 49
30300: PUSH
30301: LD_INT 3
30303: PUSH
30304: LD_INT 1
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 3
30313: PUSH
30314: LD_INT 2
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30325: LD_ADDR_VAR 0 50
30329: PUSH
30330: LD_INT 2
30332: PUSH
30333: LD_INT 3
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: LD_INT 3
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30354: LD_ADDR_VAR 0 51
30358: PUSH
30359: LD_INT 1
30361: NEG
30362: PUSH
30363: LD_INT 2
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 2
30372: NEG
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30385: LD_ADDR_VAR 0 52
30389: PUSH
30390: LD_INT 3
30392: NEG
30393: PUSH
30394: LD_INT 1
30396: NEG
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 3
30404: NEG
30405: PUSH
30406: LD_INT 2
30408: NEG
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30418: LD_ADDR_VAR 0 53
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: LD_INT 3
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 0
30437: PUSH
30438: LD_INT 3
30440: NEG
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: LD_INT 2
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: LIST
30461: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30462: LD_ADDR_VAR 0 54
30466: PUSH
30467: LD_INT 2
30469: PUSH
30470: LD_INT 1
30472: NEG
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 3
30480: PUSH
30481: LD_INT 0
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 3
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: LIST
30502: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30503: LD_ADDR_VAR 0 55
30507: PUSH
30508: LD_INT 3
30510: PUSH
30511: LD_INT 2
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 3
30520: PUSH
30521: LD_INT 3
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 2
30530: PUSH
30531: LD_INT 3
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: LIST
30542: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30543: LD_ADDR_VAR 0 56
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: LD_INT 3
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: LD_INT 3
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 1
30570: NEG
30571: PUSH
30572: LD_INT 2
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: LIST
30583: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30584: LD_ADDR_VAR 0 57
30588: PUSH
30589: LD_INT 2
30591: NEG
30592: PUSH
30593: LD_INT 1
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 3
30602: NEG
30603: PUSH
30604: LD_INT 0
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 3
30613: NEG
30614: PUSH
30615: LD_INT 1
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: LIST
30627: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30628: LD_ADDR_VAR 0 58
30632: PUSH
30633: LD_INT 2
30635: NEG
30636: PUSH
30637: LD_INT 3
30639: NEG
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 3
30647: NEG
30648: PUSH
30649: LD_INT 2
30651: NEG
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 3
30659: NEG
30660: PUSH
30661: LD_INT 3
30663: NEG
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: LIST
30673: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30674: LD_ADDR_VAR 0 59
30678: PUSH
30679: LD_INT 1
30681: NEG
30682: PUSH
30683: LD_INT 2
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 0
30693: PUSH
30694: LD_INT 2
30696: NEG
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: LD_INT 1
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: LIST
30717: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30718: LD_ADDR_VAR 0 60
30722: PUSH
30723: LD_INT 1
30725: PUSH
30726: LD_INT 1
30728: NEG
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 2
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 2
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: LIST
30758: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30759: LD_ADDR_VAR 0 61
30763: PUSH
30764: LD_INT 2
30766: PUSH
30767: LD_INT 1
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 2
30776: PUSH
30777: LD_INT 2
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 1
30786: PUSH
30787: LD_INT 2
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: LIST
30798: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30799: LD_ADDR_VAR 0 62
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: LD_INT 2
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: LD_INT 2
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: NEG
30827: PUSH
30828: LD_INT 1
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: LIST
30839: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30840: LD_ADDR_VAR 0 63
30844: PUSH
30845: LD_INT 1
30847: NEG
30848: PUSH
30849: LD_INT 1
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 2
30858: NEG
30859: PUSH
30860: LD_INT 0
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 2
30869: NEG
30870: PUSH
30871: LD_INT 1
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: LIST
30883: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30884: LD_ADDR_VAR 0 64
30888: PUSH
30889: LD_INT 1
30891: NEG
30892: PUSH
30893: LD_INT 2
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 2
30903: NEG
30904: PUSH
30905: LD_INT 1
30907: NEG
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 2
30915: NEG
30916: PUSH
30917: LD_INT 2
30919: NEG
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: LIST
30929: ST_TO_ADDR
// end ; 2 :
30930: GO 34196
30932: LD_INT 2
30934: DOUBLE
30935: EQUAL
30936: IFTRUE 30940
30938: GO 34195
30940: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30941: LD_ADDR_VAR 0 29
30945: PUSH
30946: LD_INT 4
30948: PUSH
30949: LD_INT 0
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 4
30958: PUSH
30959: LD_INT 1
30961: NEG
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 5
30969: PUSH
30970: LD_INT 0
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 5
30979: PUSH
30980: LD_INT 1
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 4
30989: PUSH
30990: LD_INT 1
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 3
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 3
31009: PUSH
31010: LD_INT 1
31012: NEG
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 3
31020: PUSH
31021: LD_INT 2
31023: NEG
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 5
31031: PUSH
31032: LD_INT 2
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 3
31041: PUSH
31042: LD_INT 3
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 3
31051: PUSH
31052: LD_INT 2
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 4
31061: PUSH
31062: LD_INT 3
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 4
31071: PUSH
31072: LD_INT 4
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 3
31081: PUSH
31082: LD_INT 4
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 2
31091: PUSH
31092: LD_INT 3
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 2
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 4
31111: PUSH
31112: LD_INT 2
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: LD_INT 4
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: LD_INT 4
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 0
31141: PUSH
31142: LD_INT 3
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 1
31151: PUSH
31152: LD_INT 4
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 1
31161: PUSH
31162: LD_INT 5
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: LD_INT 5
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 1
31181: NEG
31182: PUSH
31183: LD_INT 4
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 1
31192: NEG
31193: PUSH
31194: LD_INT 3
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 2
31203: PUSH
31204: LD_INT 5
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 2
31213: NEG
31214: PUSH
31215: LD_INT 3
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 3
31224: NEG
31225: PUSH
31226: LD_INT 0
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 3
31235: NEG
31236: PUSH
31237: LD_INT 1
31239: NEG
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 2
31247: NEG
31248: PUSH
31249: LD_INT 0
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 2
31258: NEG
31259: PUSH
31260: LD_INT 1
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 3
31269: NEG
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 4
31280: NEG
31281: PUSH
31282: LD_INT 0
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 4
31291: NEG
31292: PUSH
31293: LD_INT 1
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 4
31303: NEG
31304: PUSH
31305: LD_INT 2
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 2
31315: NEG
31316: PUSH
31317: LD_INT 2
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 4
31326: NEG
31327: PUSH
31328: LD_INT 4
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 4
31338: NEG
31339: PUSH
31340: LD_INT 5
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 3
31350: NEG
31351: PUSH
31352: LD_INT 4
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 3
31362: NEG
31363: PUSH
31364: LD_INT 3
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 4
31374: NEG
31375: PUSH
31376: LD_INT 3
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 5
31386: NEG
31387: PUSH
31388: LD_INT 4
31390: NEG
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 5
31398: NEG
31399: PUSH
31400: LD_INT 5
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 3
31410: NEG
31411: PUSH
31412: LD_INT 5
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 5
31422: NEG
31423: PUSH
31424: LD_INT 3
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31479: LD_ADDR_VAR 0 30
31483: PUSH
31484: LD_INT 4
31486: PUSH
31487: LD_INT 4
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 4
31496: PUSH
31497: LD_INT 3
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 5
31506: PUSH
31507: LD_INT 4
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 5
31516: PUSH
31517: LD_INT 5
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 4
31526: PUSH
31527: LD_INT 5
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 3
31536: PUSH
31537: LD_INT 4
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 3
31546: PUSH
31547: LD_INT 3
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 5
31556: PUSH
31557: LD_INT 3
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 3
31566: PUSH
31567: LD_INT 5
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 0
31576: PUSH
31577: LD_INT 3
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 0
31586: PUSH
31587: LD_INT 2
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 1
31596: PUSH
31597: LD_INT 3
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 4
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: LD_INT 4
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 1
31626: NEG
31627: PUSH
31628: LD_INT 3
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 1
31637: NEG
31638: PUSH
31639: LD_INT 2
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 2
31648: PUSH
31649: LD_INT 4
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 2
31658: NEG
31659: PUSH
31660: LD_INT 2
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 4
31669: NEG
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 4
31680: NEG
31681: PUSH
31682: LD_INT 1
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 3
31692: NEG
31693: PUSH
31694: LD_INT 0
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 3
31703: NEG
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 4
31714: NEG
31715: PUSH
31716: LD_INT 1
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 5
31725: NEG
31726: PUSH
31727: LD_INT 0
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 5
31736: NEG
31737: PUSH
31738: LD_INT 1
31740: NEG
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 5
31748: NEG
31749: PUSH
31750: LD_INT 2
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 3
31760: NEG
31761: PUSH
31762: LD_INT 2
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 3
31771: NEG
31772: PUSH
31773: LD_INT 3
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 3
31783: NEG
31784: PUSH
31785: LD_INT 4
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 2
31795: NEG
31796: PUSH
31797: LD_INT 3
31799: NEG
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: LD_INT 2
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 3
31819: NEG
31820: PUSH
31821: LD_INT 2
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 4
31831: NEG
31832: PUSH
31833: LD_INT 3
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 4
31843: NEG
31844: PUSH
31845: LD_INT 4
31847: NEG
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 2
31855: NEG
31856: PUSH
31857: LD_INT 4
31859: NEG
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 4
31867: NEG
31868: PUSH
31869: LD_INT 2
31871: NEG
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: LD_INT 4
31882: NEG
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 0
31890: PUSH
31891: LD_INT 5
31893: NEG
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: LD_INT 4
31904: NEG
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 1
31912: PUSH
31913: LD_INT 3
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 0
31923: PUSH
31924: LD_INT 3
31926: NEG
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 1
31934: NEG
31935: PUSH
31936: LD_INT 4
31938: NEG
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 1
31946: NEG
31947: PUSH
31948: LD_INT 5
31950: NEG
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 2
31958: PUSH
31959: LD_INT 3
31961: NEG
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 2
31969: NEG
31970: PUSH
31971: LD_INT 5
31973: NEG
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32026: LD_ADDR_VAR 0 31
32030: PUSH
32031: LD_INT 0
32033: PUSH
32034: LD_INT 4
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 0
32043: PUSH
32044: LD_INT 3
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: LD_INT 4
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: LD_INT 5
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 0
32073: PUSH
32074: LD_INT 5
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 1
32083: NEG
32084: PUSH
32085: LD_INT 4
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 1
32094: NEG
32095: PUSH
32096: LD_INT 3
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 2
32105: PUSH
32106: LD_INT 5
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 2
32115: NEG
32116: PUSH
32117: LD_INT 3
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 3
32126: NEG
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 3
32137: NEG
32138: PUSH
32139: LD_INT 1
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 2
32149: NEG
32150: PUSH
32151: LD_INT 0
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 2
32160: NEG
32161: PUSH
32162: LD_INT 1
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 3
32171: NEG
32172: PUSH
32173: LD_INT 1
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 4
32182: NEG
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 4
32193: NEG
32194: PUSH
32195: LD_INT 1
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 4
32205: NEG
32206: PUSH
32207: LD_INT 2
32209: NEG
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 2
32217: NEG
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 4
32228: NEG
32229: PUSH
32230: LD_INT 4
32232: NEG
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 4
32240: NEG
32241: PUSH
32242: LD_INT 5
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 3
32252: NEG
32253: PUSH
32254: LD_INT 4
32256: NEG
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 3
32264: NEG
32265: PUSH
32266: LD_INT 3
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 4
32276: NEG
32277: PUSH
32278: LD_INT 3
32280: NEG
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 5
32288: NEG
32289: PUSH
32290: LD_INT 4
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 5
32300: NEG
32301: PUSH
32302: LD_INT 5
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 3
32312: NEG
32313: PUSH
32314: LD_INT 5
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 5
32324: NEG
32325: PUSH
32326: LD_INT 3
32328: NEG
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: LD_INT 3
32339: NEG
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: LD_INT 4
32350: NEG
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 1
32358: PUSH
32359: LD_INT 3
32361: NEG
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: LD_INT 2
32372: NEG
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 0
32380: PUSH
32381: LD_INT 2
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 1
32391: NEG
32392: PUSH
32393: LD_INT 3
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: LD_INT 4
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 2
32415: PUSH
32416: LD_INT 2
32418: NEG
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 2
32426: NEG
32427: PUSH
32428: LD_INT 4
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 4
32438: PUSH
32439: LD_INT 0
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 4
32448: PUSH
32449: LD_INT 1
32451: NEG
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 5
32459: PUSH
32460: LD_INT 0
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 5
32469: PUSH
32470: LD_INT 1
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 4
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 3
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 3
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 3
32510: PUSH
32511: LD_INT 2
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 5
32521: PUSH
32522: LD_INT 2
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32576: LD_ADDR_VAR 0 32
32580: PUSH
32581: LD_INT 4
32583: NEG
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 4
32594: NEG
32595: PUSH
32596: LD_INT 1
32598: NEG
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 3
32606: NEG
32607: PUSH
32608: LD_INT 0
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 3
32617: NEG
32618: PUSH
32619: LD_INT 1
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 4
32628: NEG
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 5
32639: NEG
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 5
32650: NEG
32651: PUSH
32652: LD_INT 1
32654: NEG
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 5
32662: NEG
32663: PUSH
32664: LD_INT 2
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 3
32674: NEG
32675: PUSH
32676: LD_INT 2
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 3
32685: NEG
32686: PUSH
32687: LD_INT 3
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 3
32697: NEG
32698: PUSH
32699: LD_INT 4
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 2
32709: NEG
32710: PUSH
32711: LD_INT 3
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 2
32721: NEG
32722: PUSH
32723: LD_INT 2
32725: NEG
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 3
32733: NEG
32734: PUSH
32735: LD_INT 2
32737: NEG
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 4
32745: NEG
32746: PUSH
32747: LD_INT 3
32749: NEG
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 4
32757: NEG
32758: PUSH
32759: LD_INT 4
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 2
32769: NEG
32770: PUSH
32771: LD_INT 4
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 4
32781: NEG
32782: PUSH
32783: LD_INT 2
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 0
32793: PUSH
32794: LD_INT 4
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: LD_INT 5
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 1
32815: PUSH
32816: LD_INT 4
32818: NEG
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: LD_INT 3
32829: NEG
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: LD_INT 3
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 1
32848: NEG
32849: PUSH
32850: LD_INT 4
32852: NEG
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 1
32860: NEG
32861: PUSH
32862: LD_INT 5
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 2
32872: PUSH
32873: LD_INT 3
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 2
32883: NEG
32884: PUSH
32885: LD_INT 5
32887: NEG
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 3
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 3
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 4
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 4
32926: PUSH
32927: LD_INT 1
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 3
32936: PUSH
32937: LD_INT 1
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 2
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 2
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: LD_INT 2
32970: NEG
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 4
32978: PUSH
32979: LD_INT 2
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 4
32988: PUSH
32989: LD_INT 4
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 4
32998: PUSH
32999: LD_INT 3
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 5
33008: PUSH
33009: LD_INT 4
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 5
33018: PUSH
33019: LD_INT 5
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 4
33028: PUSH
33029: LD_INT 5
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 3
33038: PUSH
33039: LD_INT 4
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 3
33048: PUSH
33049: LD_INT 3
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 5
33058: PUSH
33059: LD_INT 3
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 3
33068: PUSH
33069: LD_INT 5
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33123: LD_ADDR_VAR 0 33
33127: PUSH
33128: LD_INT 4
33130: NEG
33131: PUSH
33132: LD_INT 4
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 4
33142: NEG
33143: PUSH
33144: LD_INT 5
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 3
33154: NEG
33155: PUSH
33156: LD_INT 4
33158: NEG
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 3
33166: NEG
33167: PUSH
33168: LD_INT 3
33170: NEG
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 4
33178: NEG
33179: PUSH
33180: LD_INT 3
33182: NEG
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 5
33190: NEG
33191: PUSH
33192: LD_INT 4
33194: NEG
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 5
33202: NEG
33203: PUSH
33204: LD_INT 5
33206: NEG
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 3
33214: NEG
33215: PUSH
33216: LD_INT 5
33218: NEG
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 5
33226: NEG
33227: PUSH
33228: LD_INT 3
33230: NEG
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 0
33238: PUSH
33239: LD_INT 3
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 0
33249: PUSH
33250: LD_INT 4
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 1
33260: PUSH
33261: LD_INT 3
33263: NEG
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: LD_INT 2
33274: NEG
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: LD_INT 2
33285: NEG
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: LD_INT 3
33297: NEG
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 1
33305: NEG
33306: PUSH
33307: LD_INT 4
33309: NEG
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 2
33317: PUSH
33318: LD_INT 2
33320: NEG
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 2
33328: NEG
33329: PUSH
33330: LD_INT 4
33332: NEG
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 4
33340: PUSH
33341: LD_INT 0
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 4
33350: PUSH
33351: LD_INT 1
33353: NEG
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 5
33361: PUSH
33362: LD_INT 0
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 5
33371: PUSH
33372: LD_INT 1
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 4
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 3
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 3
33401: PUSH
33402: LD_INT 1
33404: NEG
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 3
33412: PUSH
33413: LD_INT 2
33415: NEG
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 5
33423: PUSH
33424: LD_INT 2
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 3
33433: PUSH
33434: LD_INT 3
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 3
33443: PUSH
33444: LD_INT 2
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 4
33453: PUSH
33454: LD_INT 3
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 4
33463: PUSH
33464: LD_INT 4
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: LD_INT 4
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: LD_INT 3
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 2
33493: PUSH
33494: LD_INT 2
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 4
33503: PUSH
33504: LD_INT 2
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 2
33513: PUSH
33514: LD_INT 4
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 0
33523: PUSH
33524: LD_INT 4
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 0
33533: PUSH
33534: LD_INT 3
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 1
33543: PUSH
33544: LD_INT 4
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: LD_INT 5
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: LD_INT 5
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 1
33573: NEG
33574: PUSH
33575: LD_INT 4
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: LD_INT 3
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: LD_INT 5
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 2
33605: NEG
33606: PUSH
33607: LD_INT 3
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33661: LD_ADDR_VAR 0 34
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: LD_INT 4
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: LD_INT 5
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: LD_INT 4
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: LD_INT 3
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: LD_INT 3
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: LD_INT 4
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 1
33735: NEG
33736: PUSH
33737: LD_INT 5
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 2
33747: PUSH
33748: LD_INT 3
33750: NEG
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 2
33758: NEG
33759: PUSH
33760: LD_INT 5
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 3
33770: PUSH
33771: LD_INT 0
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 3
33780: PUSH
33781: LD_INT 1
33783: NEG
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 4
33791: PUSH
33792: LD_INT 0
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 4
33801: PUSH
33802: LD_INT 1
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 3
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 2
33831: PUSH
33832: LD_INT 1
33834: NEG
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 2
33842: PUSH
33843: LD_INT 2
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 4
33853: PUSH
33854: LD_INT 2
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 4
33863: PUSH
33864: LD_INT 4
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 4
33873: PUSH
33874: LD_INT 3
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 5
33883: PUSH
33884: LD_INT 4
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 5
33893: PUSH
33894: LD_INT 5
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 4
33903: PUSH
33904: LD_INT 5
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 3
33913: PUSH
33914: LD_INT 4
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 3
33923: PUSH
33924: LD_INT 3
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 5
33933: PUSH
33934: LD_INT 3
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 3
33943: PUSH
33944: LD_INT 5
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: LD_INT 3
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: LD_INT 2
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 1
33973: PUSH
33974: LD_INT 3
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 1
33983: PUSH
33984: LD_INT 4
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: LD_INT 4
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 1
34003: NEG
34004: PUSH
34005: LD_INT 3
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 1
34014: NEG
34015: PUSH
34016: LD_INT 2
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 2
34025: PUSH
34026: LD_INT 4
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 2
34035: NEG
34036: PUSH
34037: LD_INT 2
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 4
34046: NEG
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 4
34057: NEG
34058: PUSH
34059: LD_INT 1
34061: NEG
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 3
34069: NEG
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 3
34080: NEG
34081: PUSH
34082: LD_INT 1
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 4
34091: NEG
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 5
34102: NEG
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 5
34113: NEG
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 5
34125: NEG
34126: PUSH
34127: LD_INT 2
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 3
34137: NEG
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: ST_TO_ADDR
// end ; end ;
34193: GO 34196
34195: POP
// case btype of b_depot , b_warehouse :
34196: LD_VAR 0 1
34200: PUSH
34201: LD_INT 0
34203: DOUBLE
34204: EQUAL
34205: IFTRUE 34215
34207: LD_INT 1
34209: DOUBLE
34210: EQUAL
34211: IFTRUE 34215
34213: GO 34416
34215: POP
// case nation of nation_american :
34216: LD_VAR 0 5
34220: PUSH
34221: LD_INT 1
34223: DOUBLE
34224: EQUAL
34225: IFTRUE 34229
34227: GO 34285
34229: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34230: LD_ADDR_VAR 0 9
34234: PUSH
34235: LD_VAR 0 11
34239: PUSH
34240: LD_VAR 0 12
34244: PUSH
34245: LD_VAR 0 13
34249: PUSH
34250: LD_VAR 0 14
34254: PUSH
34255: LD_VAR 0 15
34259: PUSH
34260: LD_VAR 0 16
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: PUSH
34273: LD_VAR 0 4
34277: PUSH
34278: LD_INT 1
34280: PLUS
34281: ARRAY
34282: ST_TO_ADDR
34283: GO 34414
34285: LD_INT 2
34287: DOUBLE
34288: EQUAL
34289: IFTRUE 34293
34291: GO 34349
34293: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34294: LD_ADDR_VAR 0 9
34298: PUSH
34299: LD_VAR 0 17
34303: PUSH
34304: LD_VAR 0 18
34308: PUSH
34309: LD_VAR 0 19
34313: PUSH
34314: LD_VAR 0 20
34318: PUSH
34319: LD_VAR 0 21
34323: PUSH
34324: LD_VAR 0 22
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: PUSH
34337: LD_VAR 0 4
34341: PUSH
34342: LD_INT 1
34344: PLUS
34345: ARRAY
34346: ST_TO_ADDR
34347: GO 34414
34349: LD_INT 3
34351: DOUBLE
34352: EQUAL
34353: IFTRUE 34357
34355: GO 34413
34357: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34358: LD_ADDR_VAR 0 9
34362: PUSH
34363: LD_VAR 0 23
34367: PUSH
34368: LD_VAR 0 24
34372: PUSH
34373: LD_VAR 0 25
34377: PUSH
34378: LD_VAR 0 26
34382: PUSH
34383: LD_VAR 0 27
34387: PUSH
34388: LD_VAR 0 28
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: PUSH
34401: LD_VAR 0 4
34405: PUSH
34406: LD_INT 1
34408: PLUS
34409: ARRAY
34410: ST_TO_ADDR
34411: GO 34414
34413: POP
34414: GO 34969
34416: LD_INT 2
34418: DOUBLE
34419: EQUAL
34420: IFTRUE 34430
34422: LD_INT 3
34424: DOUBLE
34425: EQUAL
34426: IFTRUE 34430
34428: GO 34486
34430: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34431: LD_ADDR_VAR 0 9
34435: PUSH
34436: LD_VAR 0 29
34440: PUSH
34441: LD_VAR 0 30
34445: PUSH
34446: LD_VAR 0 31
34450: PUSH
34451: LD_VAR 0 32
34455: PUSH
34456: LD_VAR 0 33
34460: PUSH
34461: LD_VAR 0 34
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: PUSH
34474: LD_VAR 0 4
34478: PUSH
34479: LD_INT 1
34481: PLUS
34482: ARRAY
34483: ST_TO_ADDR
34484: GO 34969
34486: LD_INT 16
34488: DOUBLE
34489: EQUAL
34490: IFTRUE 34548
34492: LD_INT 17
34494: DOUBLE
34495: EQUAL
34496: IFTRUE 34548
34498: LD_INT 18
34500: DOUBLE
34501: EQUAL
34502: IFTRUE 34548
34504: LD_INT 19
34506: DOUBLE
34507: EQUAL
34508: IFTRUE 34548
34510: LD_INT 22
34512: DOUBLE
34513: EQUAL
34514: IFTRUE 34548
34516: LD_INT 20
34518: DOUBLE
34519: EQUAL
34520: IFTRUE 34548
34522: LD_INT 21
34524: DOUBLE
34525: EQUAL
34526: IFTRUE 34548
34528: LD_INT 23
34530: DOUBLE
34531: EQUAL
34532: IFTRUE 34548
34534: LD_INT 24
34536: DOUBLE
34537: EQUAL
34538: IFTRUE 34548
34540: LD_INT 25
34542: DOUBLE
34543: EQUAL
34544: IFTRUE 34548
34546: GO 34604
34548: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34549: LD_ADDR_VAR 0 9
34553: PUSH
34554: LD_VAR 0 35
34558: PUSH
34559: LD_VAR 0 36
34563: PUSH
34564: LD_VAR 0 37
34568: PUSH
34569: LD_VAR 0 38
34573: PUSH
34574: LD_VAR 0 39
34578: PUSH
34579: LD_VAR 0 40
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: PUSH
34592: LD_VAR 0 4
34596: PUSH
34597: LD_INT 1
34599: PLUS
34600: ARRAY
34601: ST_TO_ADDR
34602: GO 34969
34604: LD_INT 6
34606: DOUBLE
34607: EQUAL
34608: IFTRUE 34660
34610: LD_INT 7
34612: DOUBLE
34613: EQUAL
34614: IFTRUE 34660
34616: LD_INT 8
34618: DOUBLE
34619: EQUAL
34620: IFTRUE 34660
34622: LD_INT 13
34624: DOUBLE
34625: EQUAL
34626: IFTRUE 34660
34628: LD_INT 12
34630: DOUBLE
34631: EQUAL
34632: IFTRUE 34660
34634: LD_INT 15
34636: DOUBLE
34637: EQUAL
34638: IFTRUE 34660
34640: LD_INT 11
34642: DOUBLE
34643: EQUAL
34644: IFTRUE 34660
34646: LD_INT 14
34648: DOUBLE
34649: EQUAL
34650: IFTRUE 34660
34652: LD_INT 10
34654: DOUBLE
34655: EQUAL
34656: IFTRUE 34660
34658: GO 34716
34660: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34661: LD_ADDR_VAR 0 9
34665: PUSH
34666: LD_VAR 0 41
34670: PUSH
34671: LD_VAR 0 42
34675: PUSH
34676: LD_VAR 0 43
34680: PUSH
34681: LD_VAR 0 44
34685: PUSH
34686: LD_VAR 0 45
34690: PUSH
34691: LD_VAR 0 46
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: PUSH
34704: LD_VAR 0 4
34708: PUSH
34709: LD_INT 1
34711: PLUS
34712: ARRAY
34713: ST_TO_ADDR
34714: GO 34969
34716: LD_INT 36
34718: DOUBLE
34719: EQUAL
34720: IFTRUE 34724
34722: GO 34780
34724: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34725: LD_ADDR_VAR 0 9
34729: PUSH
34730: LD_VAR 0 47
34734: PUSH
34735: LD_VAR 0 48
34739: PUSH
34740: LD_VAR 0 49
34744: PUSH
34745: LD_VAR 0 50
34749: PUSH
34750: LD_VAR 0 51
34754: PUSH
34755: LD_VAR 0 52
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: PUSH
34768: LD_VAR 0 4
34772: PUSH
34773: LD_INT 1
34775: PLUS
34776: ARRAY
34777: ST_TO_ADDR
34778: GO 34969
34780: LD_INT 4
34782: DOUBLE
34783: EQUAL
34784: IFTRUE 34806
34786: LD_INT 5
34788: DOUBLE
34789: EQUAL
34790: IFTRUE 34806
34792: LD_INT 34
34794: DOUBLE
34795: EQUAL
34796: IFTRUE 34806
34798: LD_INT 37
34800: DOUBLE
34801: EQUAL
34802: IFTRUE 34806
34804: GO 34862
34806: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34807: LD_ADDR_VAR 0 9
34811: PUSH
34812: LD_VAR 0 53
34816: PUSH
34817: LD_VAR 0 54
34821: PUSH
34822: LD_VAR 0 55
34826: PUSH
34827: LD_VAR 0 56
34831: PUSH
34832: LD_VAR 0 57
34836: PUSH
34837: LD_VAR 0 58
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: PUSH
34850: LD_VAR 0 4
34854: PUSH
34855: LD_INT 1
34857: PLUS
34858: ARRAY
34859: ST_TO_ADDR
34860: GO 34969
34862: LD_INT 31
34864: DOUBLE
34865: EQUAL
34866: IFTRUE 34912
34868: LD_INT 32
34870: DOUBLE
34871: EQUAL
34872: IFTRUE 34912
34874: LD_INT 33
34876: DOUBLE
34877: EQUAL
34878: IFTRUE 34912
34880: LD_INT 27
34882: DOUBLE
34883: EQUAL
34884: IFTRUE 34912
34886: LD_INT 26
34888: DOUBLE
34889: EQUAL
34890: IFTRUE 34912
34892: LD_INT 28
34894: DOUBLE
34895: EQUAL
34896: IFTRUE 34912
34898: LD_INT 29
34900: DOUBLE
34901: EQUAL
34902: IFTRUE 34912
34904: LD_INT 30
34906: DOUBLE
34907: EQUAL
34908: IFTRUE 34912
34910: GO 34968
34912: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34913: LD_ADDR_VAR 0 9
34917: PUSH
34918: LD_VAR 0 59
34922: PUSH
34923: LD_VAR 0 60
34927: PUSH
34928: LD_VAR 0 61
34932: PUSH
34933: LD_VAR 0 62
34937: PUSH
34938: LD_VAR 0 63
34942: PUSH
34943: LD_VAR 0 64
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: PUSH
34956: LD_VAR 0 4
34960: PUSH
34961: LD_INT 1
34963: PLUS
34964: ARRAY
34965: ST_TO_ADDR
34966: GO 34969
34968: POP
// temp_list2 = [ ] ;
34969: LD_ADDR_VAR 0 10
34973: PUSH
34974: EMPTY
34975: ST_TO_ADDR
// for i in temp_list do
34976: LD_ADDR_VAR 0 8
34980: PUSH
34981: LD_VAR 0 9
34985: PUSH
34986: FOR_IN
34987: IFFALSE 35039
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34989: LD_ADDR_VAR 0 10
34993: PUSH
34994: LD_VAR 0 10
34998: PUSH
34999: LD_VAR 0 8
35003: PUSH
35004: LD_INT 1
35006: ARRAY
35007: PUSH
35008: LD_VAR 0 2
35012: PLUS
35013: PUSH
35014: LD_VAR 0 8
35018: PUSH
35019: LD_INT 2
35021: ARRAY
35022: PUSH
35023: LD_VAR 0 3
35027: PLUS
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: EMPTY
35034: LIST
35035: ADD
35036: ST_TO_ADDR
35037: GO 34986
35039: POP
35040: POP
// result = temp_list2 ;
35041: LD_ADDR_VAR 0 7
35045: PUSH
35046: LD_VAR 0 10
35050: ST_TO_ADDR
// end ;
35051: LD_VAR 0 7
35055: RET
// export function EnemyInRange ( unit , dist ) ; begin
35056: LD_INT 0
35058: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35059: LD_ADDR_VAR 0 3
35063: PUSH
35064: LD_VAR 0 1
35068: PPUSH
35069: CALL_OW 255
35073: PPUSH
35074: LD_VAR 0 1
35078: PPUSH
35079: CALL_OW 250
35083: PPUSH
35084: LD_VAR 0 1
35088: PPUSH
35089: CALL_OW 251
35093: PPUSH
35094: LD_VAR 0 2
35098: PPUSH
35099: CALL 8429 0 4
35103: PUSH
35104: LD_INT 4
35106: ARRAY
35107: ST_TO_ADDR
// end ;
35108: LD_VAR 0 3
35112: RET
// export function PlayerSeeMe ( unit ) ; begin
35113: LD_INT 0
35115: PPUSH
// result := See ( your_side , unit ) ;
35116: LD_ADDR_VAR 0 2
35120: PUSH
35121: LD_OWVAR 2
35125: PPUSH
35126: LD_VAR 0 1
35130: PPUSH
35131: CALL_OW 292
35135: ST_TO_ADDR
// end ;
35136: LD_VAR 0 2
35140: RET
// export function ReverseDir ( unit ) ; begin
35141: LD_INT 0
35143: PPUSH
// if not unit then
35144: LD_VAR 0 1
35148: NOT
35149: IFFALSE 35153
// exit ;
35151: GO 35176
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35153: LD_ADDR_VAR 0 2
35157: PUSH
35158: LD_VAR 0 1
35162: PPUSH
35163: CALL_OW 254
35167: PUSH
35168: LD_INT 3
35170: PLUS
35171: PUSH
35172: LD_INT 6
35174: MOD
35175: ST_TO_ADDR
// end ;
35176: LD_VAR 0 2
35180: RET
// export function ReverseArray ( array ) ; var i ; begin
35181: LD_INT 0
35183: PPUSH
35184: PPUSH
// if not array then
35185: LD_VAR 0 1
35189: NOT
35190: IFFALSE 35194
// exit ;
35192: GO 35249
// result := [ ] ;
35194: LD_ADDR_VAR 0 2
35198: PUSH
35199: EMPTY
35200: ST_TO_ADDR
// for i := array downto 1 do
35201: LD_ADDR_VAR 0 3
35205: PUSH
35206: DOUBLE
35207: LD_VAR 0 1
35211: INC
35212: ST_TO_ADDR
35213: LD_INT 1
35215: PUSH
35216: FOR_DOWNTO
35217: IFFALSE 35247
// result := Join ( result , array [ i ] ) ;
35219: LD_ADDR_VAR 0 2
35223: PUSH
35224: LD_VAR 0 2
35228: PPUSH
35229: LD_VAR 0 1
35233: PUSH
35234: LD_VAR 0 3
35238: ARRAY
35239: PPUSH
35240: CALL 39894 0 2
35244: ST_TO_ADDR
35245: GO 35216
35247: POP
35248: POP
// end ;
35249: LD_VAR 0 2
35253: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35254: LD_INT 0
35256: PPUSH
35257: PPUSH
35258: PPUSH
35259: PPUSH
35260: PPUSH
35261: PPUSH
// if not unit or not hexes then
35262: LD_VAR 0 1
35266: NOT
35267: PUSH
35268: LD_VAR 0 2
35272: NOT
35273: OR
35274: IFFALSE 35278
// exit ;
35276: GO 35401
// dist := 9999 ;
35278: LD_ADDR_VAR 0 5
35282: PUSH
35283: LD_INT 9999
35285: ST_TO_ADDR
// for i = 1 to hexes do
35286: LD_ADDR_VAR 0 4
35290: PUSH
35291: DOUBLE
35292: LD_INT 1
35294: DEC
35295: ST_TO_ADDR
35296: LD_VAR 0 2
35300: PUSH
35301: FOR_TO
35302: IFFALSE 35389
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35304: LD_ADDR_VAR 0 6
35308: PUSH
35309: LD_VAR 0 1
35313: PPUSH
35314: LD_VAR 0 2
35318: PUSH
35319: LD_VAR 0 4
35323: ARRAY
35324: PUSH
35325: LD_INT 1
35327: ARRAY
35328: PPUSH
35329: LD_VAR 0 2
35333: PUSH
35334: LD_VAR 0 4
35338: ARRAY
35339: PUSH
35340: LD_INT 2
35342: ARRAY
35343: PPUSH
35344: CALL_OW 297
35348: ST_TO_ADDR
// if tdist < dist then
35349: LD_VAR 0 6
35353: PUSH
35354: LD_VAR 0 5
35358: LESS
35359: IFFALSE 35387
// begin hex := hexes [ i ] ;
35361: LD_ADDR_VAR 0 8
35365: PUSH
35366: LD_VAR 0 2
35370: PUSH
35371: LD_VAR 0 4
35375: ARRAY
35376: ST_TO_ADDR
// dist := tdist ;
35377: LD_ADDR_VAR 0 5
35381: PUSH
35382: LD_VAR 0 6
35386: ST_TO_ADDR
// end ; end ;
35387: GO 35301
35389: POP
35390: POP
// result := hex ;
35391: LD_ADDR_VAR 0 3
35395: PUSH
35396: LD_VAR 0 8
35400: ST_TO_ADDR
// end ;
35401: LD_VAR 0 3
35405: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35406: LD_INT 0
35408: PPUSH
35409: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35410: LD_VAR 0 1
35414: NOT
35415: PUSH
35416: LD_VAR 0 1
35420: PUSH
35421: LD_INT 21
35423: PUSH
35424: LD_INT 2
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 23
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PPUSH
35445: CALL_OW 69
35449: IN
35450: NOT
35451: OR
35452: IFFALSE 35456
// exit ;
35454: GO 35503
// for i = 1 to 3 do
35456: LD_ADDR_VAR 0 3
35460: PUSH
35461: DOUBLE
35462: LD_INT 1
35464: DEC
35465: ST_TO_ADDR
35466: LD_INT 3
35468: PUSH
35469: FOR_TO
35470: IFFALSE 35501
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35472: LD_VAR 0 1
35476: PPUSH
35477: CALL_OW 250
35481: PPUSH
35482: LD_VAR 0 1
35486: PPUSH
35487: CALL_OW 251
35491: PPUSH
35492: LD_INT 1
35494: PPUSH
35495: CALL_OW 453
35499: GO 35469
35501: POP
35502: POP
// end ;
35503: LD_VAR 0 2
35507: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35508: LD_INT 0
35510: PPUSH
35511: PPUSH
35512: PPUSH
35513: PPUSH
35514: PPUSH
35515: PPUSH
// if not unit or not enemy_unit then
35516: LD_VAR 0 1
35520: NOT
35521: PUSH
35522: LD_VAR 0 2
35526: NOT
35527: OR
35528: IFFALSE 35532
// exit ;
35530: GO 35999
// if GetLives ( i ) < 250 then
35532: LD_VAR 0 4
35536: PPUSH
35537: CALL_OW 256
35541: PUSH
35542: LD_INT 250
35544: LESS
35545: IFFALSE 35558
// begin ComAutodestruct ( i ) ;
35547: LD_VAR 0 4
35551: PPUSH
35552: CALL 35406 0 1
// exit ;
35556: GO 35999
// end ; x := GetX ( enemy_unit ) ;
35558: LD_ADDR_VAR 0 7
35562: PUSH
35563: LD_VAR 0 2
35567: PPUSH
35568: CALL_OW 250
35572: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35573: LD_ADDR_VAR 0 8
35577: PUSH
35578: LD_VAR 0 2
35582: PPUSH
35583: CALL_OW 251
35587: ST_TO_ADDR
// if not x or not y then
35588: LD_VAR 0 7
35592: NOT
35593: PUSH
35594: LD_VAR 0 8
35598: NOT
35599: OR
35600: IFFALSE 35604
// exit ;
35602: GO 35999
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35604: LD_ADDR_VAR 0 6
35608: PUSH
35609: LD_VAR 0 7
35613: PPUSH
35614: LD_INT 0
35616: PPUSH
35617: LD_INT 4
35619: PPUSH
35620: CALL_OW 272
35624: PUSH
35625: LD_VAR 0 8
35629: PPUSH
35630: LD_INT 0
35632: PPUSH
35633: LD_INT 4
35635: PPUSH
35636: CALL_OW 273
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_VAR 0 7
35649: PPUSH
35650: LD_INT 1
35652: PPUSH
35653: LD_INT 4
35655: PPUSH
35656: CALL_OW 272
35660: PUSH
35661: LD_VAR 0 8
35665: PPUSH
35666: LD_INT 1
35668: PPUSH
35669: LD_INT 4
35671: PPUSH
35672: CALL_OW 273
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_VAR 0 7
35685: PPUSH
35686: LD_INT 2
35688: PPUSH
35689: LD_INT 4
35691: PPUSH
35692: CALL_OW 272
35696: PUSH
35697: LD_VAR 0 8
35701: PPUSH
35702: LD_INT 2
35704: PPUSH
35705: LD_INT 4
35707: PPUSH
35708: CALL_OW 273
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_VAR 0 7
35721: PPUSH
35722: LD_INT 3
35724: PPUSH
35725: LD_INT 4
35727: PPUSH
35728: CALL_OW 272
35732: PUSH
35733: LD_VAR 0 8
35737: PPUSH
35738: LD_INT 3
35740: PPUSH
35741: LD_INT 4
35743: PPUSH
35744: CALL_OW 273
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_VAR 0 7
35757: PPUSH
35758: LD_INT 4
35760: PPUSH
35761: LD_INT 4
35763: PPUSH
35764: CALL_OW 272
35768: PUSH
35769: LD_VAR 0 8
35773: PPUSH
35774: LD_INT 4
35776: PPUSH
35777: LD_INT 4
35779: PPUSH
35780: CALL_OW 273
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_VAR 0 7
35793: PPUSH
35794: LD_INT 5
35796: PPUSH
35797: LD_INT 4
35799: PPUSH
35800: CALL_OW 272
35804: PUSH
35805: LD_VAR 0 8
35809: PPUSH
35810: LD_INT 5
35812: PPUSH
35813: LD_INT 4
35815: PPUSH
35816: CALL_OW 273
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: ST_TO_ADDR
// for i = tmp downto 1 do
35833: LD_ADDR_VAR 0 4
35837: PUSH
35838: DOUBLE
35839: LD_VAR 0 6
35843: INC
35844: ST_TO_ADDR
35845: LD_INT 1
35847: PUSH
35848: FOR_DOWNTO
35849: IFFALSE 35950
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35851: LD_VAR 0 6
35855: PUSH
35856: LD_VAR 0 4
35860: ARRAY
35861: PUSH
35862: LD_INT 1
35864: ARRAY
35865: PPUSH
35866: LD_VAR 0 6
35870: PUSH
35871: LD_VAR 0 4
35875: ARRAY
35876: PUSH
35877: LD_INT 2
35879: ARRAY
35880: PPUSH
35881: CALL_OW 488
35885: NOT
35886: PUSH
35887: LD_VAR 0 6
35891: PUSH
35892: LD_VAR 0 4
35896: ARRAY
35897: PUSH
35898: LD_INT 1
35900: ARRAY
35901: PPUSH
35902: LD_VAR 0 6
35906: PUSH
35907: LD_VAR 0 4
35911: ARRAY
35912: PUSH
35913: LD_INT 2
35915: ARRAY
35916: PPUSH
35917: CALL_OW 428
35921: PUSH
35922: LD_INT 0
35924: NONEQUAL
35925: OR
35926: IFFALSE 35948
// tmp := Delete ( tmp , i ) ;
35928: LD_ADDR_VAR 0 6
35932: PUSH
35933: LD_VAR 0 6
35937: PPUSH
35938: LD_VAR 0 4
35942: PPUSH
35943: CALL_OW 3
35947: ST_TO_ADDR
35948: GO 35848
35950: POP
35951: POP
// j := GetClosestHex ( unit , tmp ) ;
35952: LD_ADDR_VAR 0 5
35956: PUSH
35957: LD_VAR 0 1
35961: PPUSH
35962: LD_VAR 0 6
35966: PPUSH
35967: CALL 35254 0 2
35971: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35972: LD_VAR 0 1
35976: PPUSH
35977: LD_VAR 0 5
35981: PUSH
35982: LD_INT 1
35984: ARRAY
35985: PPUSH
35986: LD_VAR 0 5
35990: PUSH
35991: LD_INT 2
35993: ARRAY
35994: PPUSH
35995: CALL_OW 111
// end ;
35999: LD_VAR 0 3
36003: RET
// export function PrepareApemanSoldier ( ) ; begin
36004: LD_INT 0
36006: PPUSH
// uc_nation := 0 ;
36007: LD_ADDR_OWVAR 21
36011: PUSH
36012: LD_INT 0
36014: ST_TO_ADDR
// hc_sex := sex_male ;
36015: LD_ADDR_OWVAR 27
36019: PUSH
36020: LD_INT 1
36022: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36023: LD_ADDR_OWVAR 28
36027: PUSH
36028: LD_INT 15
36030: ST_TO_ADDR
// hc_gallery :=  ;
36031: LD_ADDR_OWVAR 33
36035: PUSH
36036: LD_STRING 
36038: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36039: LD_ADDR_OWVAR 31
36043: PUSH
36044: LD_INT 0
36046: PPUSH
36047: LD_INT 3
36049: PPUSH
36050: CALL_OW 12
36054: PUSH
36055: LD_INT 0
36057: PPUSH
36058: LD_INT 3
36060: PPUSH
36061: CALL_OW 12
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: LD_INT 0
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: ST_TO_ADDR
// end ;
36078: LD_VAR 0 1
36082: RET
// export function PrepareApemanEngineer ( ) ; begin
36083: LD_INT 0
36085: PPUSH
// uc_nation := 0 ;
36086: LD_ADDR_OWVAR 21
36090: PUSH
36091: LD_INT 0
36093: ST_TO_ADDR
// hc_sex := sex_male ;
36094: LD_ADDR_OWVAR 27
36098: PUSH
36099: LD_INT 1
36101: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36102: LD_ADDR_OWVAR 28
36106: PUSH
36107: LD_INT 16
36109: ST_TO_ADDR
// hc_gallery :=  ;
36110: LD_ADDR_OWVAR 33
36114: PUSH
36115: LD_STRING 
36117: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36118: LD_ADDR_OWVAR 31
36122: PUSH
36123: LD_INT 0
36125: PPUSH
36126: LD_INT 3
36128: PPUSH
36129: CALL_OW 12
36133: PUSH
36134: LD_INT 0
36136: PPUSH
36137: LD_INT 3
36139: PPUSH
36140: CALL_OW 12
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: LD_INT 0
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: ST_TO_ADDR
// end ;
36157: LD_VAR 0 1
36161: RET
// export function PrepareApeman ( agressivity ) ; begin
36162: LD_INT 0
36164: PPUSH
// uc_side := 0 ;
36165: LD_ADDR_OWVAR 20
36169: PUSH
36170: LD_INT 0
36172: ST_TO_ADDR
// uc_nation := 0 ;
36173: LD_ADDR_OWVAR 21
36177: PUSH
36178: LD_INT 0
36180: ST_TO_ADDR
// hc_sex := sex_male ;
36181: LD_ADDR_OWVAR 27
36185: PUSH
36186: LD_INT 1
36188: ST_TO_ADDR
// hc_class := class_apeman ;
36189: LD_ADDR_OWVAR 28
36193: PUSH
36194: LD_INT 12
36196: ST_TO_ADDR
// hc_gallery :=  ;
36197: LD_ADDR_OWVAR 33
36201: PUSH
36202: LD_STRING 
36204: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36205: LD_ADDR_OWVAR 35
36209: PUSH
36210: LD_VAR 0 1
36214: NEG
36215: PPUSH
36216: LD_VAR 0 1
36220: PPUSH
36221: CALL_OW 12
36225: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36226: LD_ADDR_OWVAR 31
36230: PUSH
36231: LD_INT 0
36233: PPUSH
36234: LD_INT 3
36236: PPUSH
36237: CALL_OW 12
36241: PUSH
36242: LD_INT 0
36244: PPUSH
36245: LD_INT 3
36247: PPUSH
36248: CALL_OW 12
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: ST_TO_ADDR
// end ;
36265: LD_VAR 0 2
36269: RET
// export function PrepareTiger ( agressivity ) ; begin
36270: LD_INT 0
36272: PPUSH
// uc_side := 0 ;
36273: LD_ADDR_OWVAR 20
36277: PUSH
36278: LD_INT 0
36280: ST_TO_ADDR
// uc_nation := 0 ;
36281: LD_ADDR_OWVAR 21
36285: PUSH
36286: LD_INT 0
36288: ST_TO_ADDR
// hc_class := class_tiger ;
36289: LD_ADDR_OWVAR 28
36293: PUSH
36294: LD_INT 14
36296: ST_TO_ADDR
// hc_gallery :=  ;
36297: LD_ADDR_OWVAR 33
36301: PUSH
36302: LD_STRING 
36304: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36305: LD_ADDR_OWVAR 35
36309: PUSH
36310: LD_VAR 0 1
36314: NEG
36315: PPUSH
36316: LD_VAR 0 1
36320: PPUSH
36321: CALL_OW 12
36325: ST_TO_ADDR
// end ;
36326: LD_VAR 0 2
36330: RET
// export function PrepareEnchidna ( ) ; begin
36331: LD_INT 0
36333: PPUSH
// uc_side := 0 ;
36334: LD_ADDR_OWVAR 20
36338: PUSH
36339: LD_INT 0
36341: ST_TO_ADDR
// uc_nation := 0 ;
36342: LD_ADDR_OWVAR 21
36346: PUSH
36347: LD_INT 0
36349: ST_TO_ADDR
// hc_class := class_baggie ;
36350: LD_ADDR_OWVAR 28
36354: PUSH
36355: LD_INT 13
36357: ST_TO_ADDR
// hc_gallery :=  ;
36358: LD_ADDR_OWVAR 33
36362: PUSH
36363: LD_STRING 
36365: ST_TO_ADDR
// end ;
36366: LD_VAR 0 1
36370: RET
// export function PrepareFrog ( ) ; begin
36371: LD_INT 0
36373: PPUSH
// uc_side := 0 ;
36374: LD_ADDR_OWVAR 20
36378: PUSH
36379: LD_INT 0
36381: ST_TO_ADDR
// uc_nation := 0 ;
36382: LD_ADDR_OWVAR 21
36386: PUSH
36387: LD_INT 0
36389: ST_TO_ADDR
// hc_class := class_frog ;
36390: LD_ADDR_OWVAR 28
36394: PUSH
36395: LD_INT 19
36397: ST_TO_ADDR
// hc_gallery :=  ;
36398: LD_ADDR_OWVAR 33
36402: PUSH
36403: LD_STRING 
36405: ST_TO_ADDR
// end ;
36406: LD_VAR 0 1
36410: RET
// export function PrepareFish ( ) ; begin
36411: LD_INT 0
36413: PPUSH
// uc_side := 0 ;
36414: LD_ADDR_OWVAR 20
36418: PUSH
36419: LD_INT 0
36421: ST_TO_ADDR
// uc_nation := 0 ;
36422: LD_ADDR_OWVAR 21
36426: PUSH
36427: LD_INT 0
36429: ST_TO_ADDR
// hc_class := class_fish ;
36430: LD_ADDR_OWVAR 28
36434: PUSH
36435: LD_INT 20
36437: ST_TO_ADDR
// hc_gallery :=  ;
36438: LD_ADDR_OWVAR 33
36442: PUSH
36443: LD_STRING 
36445: ST_TO_ADDR
// end ;
36446: LD_VAR 0 1
36450: RET
// export function PrepareBird ( ) ; begin
36451: LD_INT 0
36453: PPUSH
// uc_side := 0 ;
36454: LD_ADDR_OWVAR 20
36458: PUSH
36459: LD_INT 0
36461: ST_TO_ADDR
// uc_nation := 0 ;
36462: LD_ADDR_OWVAR 21
36466: PUSH
36467: LD_INT 0
36469: ST_TO_ADDR
// hc_class := class_phororhacos ;
36470: LD_ADDR_OWVAR 28
36474: PUSH
36475: LD_INT 18
36477: ST_TO_ADDR
// hc_gallery :=  ;
36478: LD_ADDR_OWVAR 33
36482: PUSH
36483: LD_STRING 
36485: ST_TO_ADDR
// end ;
36486: LD_VAR 0 1
36490: RET
// export function PrepareHorse ( ) ; begin
36491: LD_INT 0
36493: PPUSH
// uc_side := 0 ;
36494: LD_ADDR_OWVAR 20
36498: PUSH
36499: LD_INT 0
36501: ST_TO_ADDR
// uc_nation := 0 ;
36502: LD_ADDR_OWVAR 21
36506: PUSH
36507: LD_INT 0
36509: ST_TO_ADDR
// hc_class := class_horse ;
36510: LD_ADDR_OWVAR 28
36514: PUSH
36515: LD_INT 21
36517: ST_TO_ADDR
// hc_gallery :=  ;
36518: LD_ADDR_OWVAR 33
36522: PUSH
36523: LD_STRING 
36525: ST_TO_ADDR
// end ;
36526: LD_VAR 0 1
36530: RET
// export function PrepareMastodont ( ) ; begin
36531: LD_INT 0
36533: PPUSH
// uc_side := 0 ;
36534: LD_ADDR_OWVAR 20
36538: PUSH
36539: LD_INT 0
36541: ST_TO_ADDR
// uc_nation := 0 ;
36542: LD_ADDR_OWVAR 21
36546: PUSH
36547: LD_INT 0
36549: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36550: LD_ADDR_OWVAR 37
36554: PUSH
36555: LD_INT 31
36557: ST_TO_ADDR
// vc_control := control_rider ;
36558: LD_ADDR_OWVAR 38
36562: PUSH
36563: LD_INT 4
36565: ST_TO_ADDR
// end ;
36566: LD_VAR 0 1
36570: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36571: LD_INT 0
36573: PPUSH
36574: PPUSH
36575: PPUSH
// uc_side = 0 ;
36576: LD_ADDR_OWVAR 20
36580: PUSH
36581: LD_INT 0
36583: ST_TO_ADDR
// uc_nation = 0 ;
36584: LD_ADDR_OWVAR 21
36588: PUSH
36589: LD_INT 0
36591: ST_TO_ADDR
// InitHc_All ( ) ;
36592: CALL_OW 584
// InitVc ;
36596: CALL_OW 20
// if mastodonts then
36600: LD_VAR 0 6
36604: IFFALSE 36671
// for i = 1 to mastodonts do
36606: LD_ADDR_VAR 0 11
36610: PUSH
36611: DOUBLE
36612: LD_INT 1
36614: DEC
36615: ST_TO_ADDR
36616: LD_VAR 0 6
36620: PUSH
36621: FOR_TO
36622: IFFALSE 36669
// begin vc_chassis := 31 ;
36624: LD_ADDR_OWVAR 37
36628: PUSH
36629: LD_INT 31
36631: ST_TO_ADDR
// vc_control := control_rider ;
36632: LD_ADDR_OWVAR 38
36636: PUSH
36637: LD_INT 4
36639: ST_TO_ADDR
// animal := CreateVehicle ;
36640: LD_ADDR_VAR 0 12
36644: PUSH
36645: CALL_OW 45
36649: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36650: LD_VAR 0 12
36654: PPUSH
36655: LD_VAR 0 8
36659: PPUSH
36660: LD_INT 0
36662: PPUSH
36663: CALL 38799 0 3
// end ;
36667: GO 36621
36669: POP
36670: POP
// if horses then
36671: LD_VAR 0 5
36675: IFFALSE 36742
// for i = 1 to horses do
36677: LD_ADDR_VAR 0 11
36681: PUSH
36682: DOUBLE
36683: LD_INT 1
36685: DEC
36686: ST_TO_ADDR
36687: LD_VAR 0 5
36691: PUSH
36692: FOR_TO
36693: IFFALSE 36740
// begin hc_class := 21 ;
36695: LD_ADDR_OWVAR 28
36699: PUSH
36700: LD_INT 21
36702: ST_TO_ADDR
// hc_gallery :=  ;
36703: LD_ADDR_OWVAR 33
36707: PUSH
36708: LD_STRING 
36710: ST_TO_ADDR
// animal := CreateHuman ;
36711: LD_ADDR_VAR 0 12
36715: PUSH
36716: CALL_OW 44
36720: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36721: LD_VAR 0 12
36725: PPUSH
36726: LD_VAR 0 8
36730: PPUSH
36731: LD_INT 0
36733: PPUSH
36734: CALL 38799 0 3
// end ;
36738: GO 36692
36740: POP
36741: POP
// if birds then
36742: LD_VAR 0 1
36746: IFFALSE 36813
// for i = 1 to birds do
36748: LD_ADDR_VAR 0 11
36752: PUSH
36753: DOUBLE
36754: LD_INT 1
36756: DEC
36757: ST_TO_ADDR
36758: LD_VAR 0 1
36762: PUSH
36763: FOR_TO
36764: IFFALSE 36811
// begin hc_class := 18 ;
36766: LD_ADDR_OWVAR 28
36770: PUSH
36771: LD_INT 18
36773: ST_TO_ADDR
// hc_gallery =  ;
36774: LD_ADDR_OWVAR 33
36778: PUSH
36779: LD_STRING 
36781: ST_TO_ADDR
// animal := CreateHuman ;
36782: LD_ADDR_VAR 0 12
36786: PUSH
36787: CALL_OW 44
36791: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36792: LD_VAR 0 12
36796: PPUSH
36797: LD_VAR 0 8
36801: PPUSH
36802: LD_INT 0
36804: PPUSH
36805: CALL 38799 0 3
// end ;
36809: GO 36763
36811: POP
36812: POP
// if tigers then
36813: LD_VAR 0 2
36817: IFFALSE 36901
// for i = 1 to tigers do
36819: LD_ADDR_VAR 0 11
36823: PUSH
36824: DOUBLE
36825: LD_INT 1
36827: DEC
36828: ST_TO_ADDR
36829: LD_VAR 0 2
36833: PUSH
36834: FOR_TO
36835: IFFALSE 36899
// begin hc_class = class_tiger ;
36837: LD_ADDR_OWVAR 28
36841: PUSH
36842: LD_INT 14
36844: ST_TO_ADDR
// hc_gallery =  ;
36845: LD_ADDR_OWVAR 33
36849: PUSH
36850: LD_STRING 
36852: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36853: LD_ADDR_OWVAR 35
36857: PUSH
36858: LD_INT 7
36860: NEG
36861: PPUSH
36862: LD_INT 7
36864: PPUSH
36865: CALL_OW 12
36869: ST_TO_ADDR
// animal := CreateHuman ;
36870: LD_ADDR_VAR 0 12
36874: PUSH
36875: CALL_OW 44
36879: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36880: LD_VAR 0 12
36884: PPUSH
36885: LD_VAR 0 8
36889: PPUSH
36890: LD_INT 0
36892: PPUSH
36893: CALL 38799 0 3
// end ;
36897: GO 36834
36899: POP
36900: POP
// if apemans then
36901: LD_VAR 0 3
36905: IFFALSE 37028
// for i = 1 to apemans do
36907: LD_ADDR_VAR 0 11
36911: PUSH
36912: DOUBLE
36913: LD_INT 1
36915: DEC
36916: ST_TO_ADDR
36917: LD_VAR 0 3
36921: PUSH
36922: FOR_TO
36923: IFFALSE 37026
// begin hc_class = class_apeman ;
36925: LD_ADDR_OWVAR 28
36929: PUSH
36930: LD_INT 12
36932: ST_TO_ADDR
// hc_gallery =  ;
36933: LD_ADDR_OWVAR 33
36937: PUSH
36938: LD_STRING 
36940: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36941: LD_ADDR_OWVAR 35
36945: PUSH
36946: LD_INT 2
36948: NEG
36949: PPUSH
36950: LD_INT 2
36952: PPUSH
36953: CALL_OW 12
36957: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36958: LD_ADDR_OWVAR 31
36962: PUSH
36963: LD_INT 1
36965: PPUSH
36966: LD_INT 3
36968: PPUSH
36969: CALL_OW 12
36973: PUSH
36974: LD_INT 1
36976: PPUSH
36977: LD_INT 3
36979: PPUSH
36980: CALL_OW 12
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: ST_TO_ADDR
// animal := CreateHuman ;
36997: LD_ADDR_VAR 0 12
37001: PUSH
37002: CALL_OW 44
37006: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37007: LD_VAR 0 12
37011: PPUSH
37012: LD_VAR 0 8
37016: PPUSH
37017: LD_INT 0
37019: PPUSH
37020: CALL 38799 0 3
// end ;
37024: GO 36922
37026: POP
37027: POP
// if enchidnas then
37028: LD_VAR 0 4
37032: IFFALSE 37099
// for i = 1 to enchidnas do
37034: LD_ADDR_VAR 0 11
37038: PUSH
37039: DOUBLE
37040: LD_INT 1
37042: DEC
37043: ST_TO_ADDR
37044: LD_VAR 0 4
37048: PUSH
37049: FOR_TO
37050: IFFALSE 37097
// begin hc_class = 13 ;
37052: LD_ADDR_OWVAR 28
37056: PUSH
37057: LD_INT 13
37059: ST_TO_ADDR
// hc_gallery =  ;
37060: LD_ADDR_OWVAR 33
37064: PUSH
37065: LD_STRING 
37067: ST_TO_ADDR
// animal := CreateHuman ;
37068: LD_ADDR_VAR 0 12
37072: PUSH
37073: CALL_OW 44
37077: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37078: LD_VAR 0 12
37082: PPUSH
37083: LD_VAR 0 8
37087: PPUSH
37088: LD_INT 0
37090: PPUSH
37091: CALL 38799 0 3
// end ;
37095: GO 37049
37097: POP
37098: POP
// if fishes then
37099: LD_VAR 0 7
37103: IFFALSE 37170
// for i = 1 to fishes do
37105: LD_ADDR_VAR 0 11
37109: PUSH
37110: DOUBLE
37111: LD_INT 1
37113: DEC
37114: ST_TO_ADDR
37115: LD_VAR 0 7
37119: PUSH
37120: FOR_TO
37121: IFFALSE 37168
// begin hc_class = 20 ;
37123: LD_ADDR_OWVAR 28
37127: PUSH
37128: LD_INT 20
37130: ST_TO_ADDR
// hc_gallery =  ;
37131: LD_ADDR_OWVAR 33
37135: PUSH
37136: LD_STRING 
37138: ST_TO_ADDR
// animal := CreateHuman ;
37139: LD_ADDR_VAR 0 12
37143: PUSH
37144: CALL_OW 44
37148: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37149: LD_VAR 0 12
37153: PPUSH
37154: LD_VAR 0 9
37158: PPUSH
37159: LD_INT 0
37161: PPUSH
37162: CALL 38799 0 3
// end ;
37166: GO 37120
37168: POP
37169: POP
// end ;
37170: LD_VAR 0 10
37174: RET
// export function WantHeal ( sci , unit ) ; begin
37175: LD_INT 0
37177: PPUSH
// if GetTaskList ( sci ) > 0 then
37178: LD_VAR 0 1
37182: PPUSH
37183: CALL_OW 437
37187: PUSH
37188: LD_INT 0
37190: GREATER
37191: IFFALSE 37261
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37193: LD_VAR 0 1
37197: PPUSH
37198: CALL_OW 437
37202: PUSH
37203: LD_INT 1
37205: ARRAY
37206: PUSH
37207: LD_INT 1
37209: ARRAY
37210: PUSH
37211: LD_STRING l
37213: EQUAL
37214: PUSH
37215: LD_VAR 0 1
37219: PPUSH
37220: CALL_OW 437
37224: PUSH
37225: LD_INT 1
37227: ARRAY
37228: PUSH
37229: LD_INT 4
37231: ARRAY
37232: PUSH
37233: LD_VAR 0 2
37237: EQUAL
37238: AND
37239: IFFALSE 37251
// result := true else
37241: LD_ADDR_VAR 0 3
37245: PUSH
37246: LD_INT 1
37248: ST_TO_ADDR
37249: GO 37259
// result := false ;
37251: LD_ADDR_VAR 0 3
37255: PUSH
37256: LD_INT 0
37258: ST_TO_ADDR
// end else
37259: GO 37269
// result := false ;
37261: LD_ADDR_VAR 0 3
37265: PUSH
37266: LD_INT 0
37268: ST_TO_ADDR
// end ;
37269: LD_VAR 0 3
37273: RET
// export function HealTarget ( sci ) ; begin
37274: LD_INT 0
37276: PPUSH
// if not sci then
37277: LD_VAR 0 1
37281: NOT
37282: IFFALSE 37286
// exit ;
37284: GO 37351
// result := 0 ;
37286: LD_ADDR_VAR 0 2
37290: PUSH
37291: LD_INT 0
37293: ST_TO_ADDR
// if GetTaskList ( sci ) then
37294: LD_VAR 0 1
37298: PPUSH
37299: CALL_OW 437
37303: IFFALSE 37351
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37305: LD_VAR 0 1
37309: PPUSH
37310: CALL_OW 437
37314: PUSH
37315: LD_INT 1
37317: ARRAY
37318: PUSH
37319: LD_INT 1
37321: ARRAY
37322: PUSH
37323: LD_STRING l
37325: EQUAL
37326: IFFALSE 37351
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37328: LD_ADDR_VAR 0 2
37332: PUSH
37333: LD_VAR 0 1
37337: PPUSH
37338: CALL_OW 437
37342: PUSH
37343: LD_INT 1
37345: ARRAY
37346: PUSH
37347: LD_INT 4
37349: ARRAY
37350: ST_TO_ADDR
// end ;
37351: LD_VAR 0 2
37355: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37356: LD_INT 0
37358: PPUSH
37359: PPUSH
37360: PPUSH
37361: PPUSH
// if not base_units then
37362: LD_VAR 0 1
37366: NOT
37367: IFFALSE 37371
// exit ;
37369: GO 37458
// result := false ;
37371: LD_ADDR_VAR 0 2
37375: PUSH
37376: LD_INT 0
37378: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37379: LD_ADDR_VAR 0 5
37383: PUSH
37384: LD_VAR 0 1
37388: PPUSH
37389: LD_INT 21
37391: PUSH
37392: LD_INT 3
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PPUSH
37399: CALL_OW 72
37403: ST_TO_ADDR
// if not tmp then
37404: LD_VAR 0 5
37408: NOT
37409: IFFALSE 37413
// exit ;
37411: GO 37458
// for i in tmp do
37413: LD_ADDR_VAR 0 3
37417: PUSH
37418: LD_VAR 0 5
37422: PUSH
37423: FOR_IN
37424: IFFALSE 37456
// begin result := EnemyInRange ( i , 22 ) ;
37426: LD_ADDR_VAR 0 2
37430: PUSH
37431: LD_VAR 0 3
37435: PPUSH
37436: LD_INT 22
37438: PPUSH
37439: CALL 35056 0 2
37443: ST_TO_ADDR
// if result then
37444: LD_VAR 0 2
37448: IFFALSE 37454
// exit ;
37450: POP
37451: POP
37452: GO 37458
// end ;
37454: GO 37423
37456: POP
37457: POP
// end ;
37458: LD_VAR 0 2
37462: RET
// export function FilterByTag ( units , tag ) ; begin
37463: LD_INT 0
37465: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37466: LD_ADDR_VAR 0 3
37470: PUSH
37471: LD_VAR 0 1
37475: PPUSH
37476: LD_INT 120
37478: PUSH
37479: LD_VAR 0 2
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PPUSH
37488: CALL_OW 72
37492: ST_TO_ADDR
// end ;
37493: LD_VAR 0 3
37497: RET
// export function IsDriver ( un ) ; begin
37498: LD_INT 0
37500: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37501: LD_ADDR_VAR 0 2
37505: PUSH
37506: LD_VAR 0 1
37510: PUSH
37511: LD_INT 55
37513: PUSH
37514: EMPTY
37515: LIST
37516: PPUSH
37517: CALL_OW 69
37521: IN
37522: ST_TO_ADDR
// end ;
37523: LD_VAR 0 2
37527: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37528: LD_INT 0
37530: PPUSH
37531: PPUSH
// list := [ ] ;
37532: LD_ADDR_VAR 0 5
37536: PUSH
37537: EMPTY
37538: ST_TO_ADDR
// case d of 0 :
37539: LD_VAR 0 3
37543: PUSH
37544: LD_INT 0
37546: DOUBLE
37547: EQUAL
37548: IFTRUE 37552
37550: GO 37685
37552: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37553: LD_ADDR_VAR 0 5
37557: PUSH
37558: LD_VAR 0 1
37562: PUSH
37563: LD_INT 4
37565: MINUS
37566: PUSH
37567: LD_VAR 0 2
37571: PUSH
37572: LD_INT 4
37574: MINUS
37575: PUSH
37576: LD_INT 2
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: LIST
37583: PUSH
37584: LD_VAR 0 1
37588: PUSH
37589: LD_INT 3
37591: MINUS
37592: PUSH
37593: LD_VAR 0 2
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: LIST
37605: PUSH
37606: LD_VAR 0 1
37610: PUSH
37611: LD_INT 4
37613: PLUS
37614: PUSH
37615: LD_VAR 0 2
37619: PUSH
37620: LD_INT 4
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: LIST
37627: PUSH
37628: LD_VAR 0 1
37632: PUSH
37633: LD_INT 3
37635: PLUS
37636: PUSH
37637: LD_VAR 0 2
37641: PUSH
37642: LD_INT 3
37644: PLUS
37645: PUSH
37646: LD_INT 5
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: LIST
37653: PUSH
37654: LD_VAR 0 1
37658: PUSH
37659: LD_VAR 0 2
37663: PUSH
37664: LD_INT 4
37666: PLUS
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: LIST
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: ST_TO_ADDR
// end ; 1 :
37683: GO 38383
37685: LD_INT 1
37687: DOUBLE
37688: EQUAL
37689: IFTRUE 37693
37691: GO 37826
37693: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37694: LD_ADDR_VAR 0 5
37698: PUSH
37699: LD_VAR 0 1
37703: PUSH
37704: LD_VAR 0 2
37708: PUSH
37709: LD_INT 4
37711: MINUS
37712: PUSH
37713: LD_INT 3
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: LIST
37720: PUSH
37721: LD_VAR 0 1
37725: PUSH
37726: LD_INT 3
37728: MINUS
37729: PUSH
37730: LD_VAR 0 2
37734: PUSH
37735: LD_INT 3
37737: MINUS
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: LIST
37746: PUSH
37747: LD_VAR 0 1
37751: PUSH
37752: LD_INT 4
37754: MINUS
37755: PUSH
37756: LD_VAR 0 2
37760: PUSH
37761: LD_INT 1
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: LIST
37768: PUSH
37769: LD_VAR 0 1
37773: PUSH
37774: LD_VAR 0 2
37778: PUSH
37779: LD_INT 3
37781: PLUS
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: LIST
37790: PUSH
37791: LD_VAR 0 1
37795: PUSH
37796: LD_INT 4
37798: PLUS
37799: PUSH
37800: LD_VAR 0 2
37804: PUSH
37805: LD_INT 4
37807: PLUS
37808: PUSH
37809: LD_INT 5
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: LIST
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: ST_TO_ADDR
// end ; 2 :
37824: GO 38383
37826: LD_INT 2
37828: DOUBLE
37829: EQUAL
37830: IFTRUE 37834
37832: GO 37963
37834: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37835: LD_ADDR_VAR 0 5
37839: PUSH
37840: LD_VAR 0 1
37844: PUSH
37845: LD_VAR 0 2
37849: PUSH
37850: LD_INT 3
37852: MINUS
37853: PUSH
37854: LD_INT 3
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: LIST
37861: PUSH
37862: LD_VAR 0 1
37866: PUSH
37867: LD_INT 4
37869: PLUS
37870: PUSH
37871: LD_VAR 0 2
37875: PUSH
37876: LD_INT 4
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: LIST
37883: PUSH
37884: LD_VAR 0 1
37888: PUSH
37889: LD_VAR 0 2
37893: PUSH
37894: LD_INT 4
37896: PLUS
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: LIST
37905: PUSH
37906: LD_VAR 0 1
37910: PUSH
37911: LD_INT 3
37913: MINUS
37914: PUSH
37915: LD_VAR 0 2
37919: PUSH
37920: LD_INT 1
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: LIST
37927: PUSH
37928: LD_VAR 0 1
37932: PUSH
37933: LD_INT 4
37935: MINUS
37936: PUSH
37937: LD_VAR 0 2
37941: PUSH
37942: LD_INT 4
37944: MINUS
37945: PUSH
37946: LD_INT 2
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: LIST
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: ST_TO_ADDR
// end ; 3 :
37961: GO 38383
37963: LD_INT 3
37965: DOUBLE
37966: EQUAL
37967: IFTRUE 37971
37969: GO 38104
37971: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37972: LD_ADDR_VAR 0 5
37976: PUSH
37977: LD_VAR 0 1
37981: PUSH
37982: LD_INT 3
37984: PLUS
37985: PUSH
37986: LD_VAR 0 2
37990: PUSH
37991: LD_INT 4
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: LIST
37998: PUSH
37999: LD_VAR 0 1
38003: PUSH
38004: LD_INT 4
38006: PLUS
38007: PUSH
38008: LD_VAR 0 2
38012: PUSH
38013: LD_INT 4
38015: PLUS
38016: PUSH
38017: LD_INT 5
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: LIST
38024: PUSH
38025: LD_VAR 0 1
38029: PUSH
38030: LD_INT 4
38032: MINUS
38033: PUSH
38034: LD_VAR 0 2
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: LIST
38046: PUSH
38047: LD_VAR 0 1
38051: PUSH
38052: LD_VAR 0 2
38056: PUSH
38057: LD_INT 4
38059: MINUS
38060: PUSH
38061: LD_INT 3
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: LIST
38068: PUSH
38069: LD_VAR 0 1
38073: PUSH
38074: LD_INT 3
38076: MINUS
38077: PUSH
38078: LD_VAR 0 2
38082: PUSH
38083: LD_INT 3
38085: MINUS
38086: PUSH
38087: LD_INT 2
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: LIST
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: ST_TO_ADDR
// end ; 4 :
38102: GO 38383
38104: LD_INT 4
38106: DOUBLE
38107: EQUAL
38108: IFTRUE 38112
38110: GO 38245
38112: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38113: LD_ADDR_VAR 0 5
38117: PUSH
38118: LD_VAR 0 1
38122: PUSH
38123: LD_VAR 0 2
38127: PUSH
38128: LD_INT 4
38130: PLUS
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: LIST
38139: PUSH
38140: LD_VAR 0 1
38144: PUSH
38145: LD_INT 3
38147: PLUS
38148: PUSH
38149: LD_VAR 0 2
38153: PUSH
38154: LD_INT 3
38156: PLUS
38157: PUSH
38158: LD_INT 5
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: LIST
38165: PUSH
38166: LD_VAR 0 1
38170: PUSH
38171: LD_INT 4
38173: PLUS
38174: PUSH
38175: LD_VAR 0 2
38179: PUSH
38180: LD_INT 4
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: LIST
38187: PUSH
38188: LD_VAR 0 1
38192: PUSH
38193: LD_VAR 0 2
38197: PUSH
38198: LD_INT 3
38200: MINUS
38201: PUSH
38202: LD_INT 3
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: LIST
38209: PUSH
38210: LD_VAR 0 1
38214: PUSH
38215: LD_INT 4
38217: MINUS
38218: PUSH
38219: LD_VAR 0 2
38223: PUSH
38224: LD_INT 4
38226: MINUS
38227: PUSH
38228: LD_INT 2
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: LIST
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: ST_TO_ADDR
// end ; 5 :
38243: GO 38383
38245: LD_INT 5
38247: DOUBLE
38248: EQUAL
38249: IFTRUE 38253
38251: GO 38382
38253: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38254: LD_ADDR_VAR 0 5
38258: PUSH
38259: LD_VAR 0 1
38263: PUSH
38264: LD_INT 4
38266: MINUS
38267: PUSH
38268: LD_VAR 0 2
38272: PUSH
38273: LD_INT 1
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: LIST
38280: PUSH
38281: LD_VAR 0 1
38285: PUSH
38286: LD_VAR 0 2
38290: PUSH
38291: LD_INT 4
38293: MINUS
38294: PUSH
38295: LD_INT 3
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: LIST
38302: PUSH
38303: LD_VAR 0 1
38307: PUSH
38308: LD_INT 4
38310: PLUS
38311: PUSH
38312: LD_VAR 0 2
38316: PUSH
38317: LD_INT 4
38319: PLUS
38320: PUSH
38321: LD_INT 5
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: LIST
38328: PUSH
38329: LD_VAR 0 1
38333: PUSH
38334: LD_INT 3
38336: PLUS
38337: PUSH
38338: LD_VAR 0 2
38342: PUSH
38343: LD_INT 4
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: LIST
38350: PUSH
38351: LD_VAR 0 1
38355: PUSH
38356: LD_VAR 0 2
38360: PUSH
38361: LD_INT 3
38363: PLUS
38364: PUSH
38365: LD_INT 0
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: LIST
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: ST_TO_ADDR
// end ; end ;
38380: GO 38383
38382: POP
// result := list ;
38383: LD_ADDR_VAR 0 4
38387: PUSH
38388: LD_VAR 0 5
38392: ST_TO_ADDR
// end ;
38393: LD_VAR 0 4
38397: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38398: LD_INT 0
38400: PPUSH
38401: PPUSH
38402: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38403: LD_VAR 0 1
38407: NOT
38408: PUSH
38409: LD_VAR 0 2
38413: PUSH
38414: LD_INT 1
38416: PUSH
38417: LD_INT 2
38419: PUSH
38420: LD_INT 3
38422: PUSH
38423: LD_INT 4
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: IN
38432: NOT
38433: OR
38434: IFFALSE 38438
// exit ;
38436: GO 38521
// tmp := [ ] ;
38438: LD_ADDR_VAR 0 5
38442: PUSH
38443: EMPTY
38444: ST_TO_ADDR
// for i in units do
38445: LD_ADDR_VAR 0 4
38449: PUSH
38450: LD_VAR 0 1
38454: PUSH
38455: FOR_IN
38456: IFFALSE 38490
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38458: LD_ADDR_VAR 0 5
38462: PUSH
38463: LD_VAR 0 5
38467: PPUSH
38468: LD_VAR 0 4
38472: PPUSH
38473: LD_VAR 0 2
38477: PPUSH
38478: CALL_OW 259
38482: PPUSH
38483: CALL 39894 0 2
38487: ST_TO_ADDR
38488: GO 38455
38490: POP
38491: POP
// if not tmp then
38492: LD_VAR 0 5
38496: NOT
38497: IFFALSE 38501
// exit ;
38499: GO 38521
// result := SortListByListDesc ( units , tmp ) ;
38501: LD_ADDR_VAR 0 3
38505: PUSH
38506: LD_VAR 0 1
38510: PPUSH
38511: LD_VAR 0 5
38515: PPUSH
38516: CALL_OW 77
38520: ST_TO_ADDR
// end ;
38521: LD_VAR 0 3
38525: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38526: LD_INT 0
38528: PPUSH
38529: PPUSH
38530: PPUSH
// result := false ;
38531: LD_ADDR_VAR 0 3
38535: PUSH
38536: LD_INT 0
38538: ST_TO_ADDR
// if not building then
38539: LD_VAR 0 2
38543: NOT
38544: IFFALSE 38548
// exit ;
38546: GO 38686
// x := GetX ( building ) ;
38548: LD_ADDR_VAR 0 4
38552: PUSH
38553: LD_VAR 0 2
38557: PPUSH
38558: CALL_OW 250
38562: ST_TO_ADDR
// y := GetY ( building ) ;
38563: LD_ADDR_VAR 0 5
38567: PUSH
38568: LD_VAR 0 2
38572: PPUSH
38573: CALL_OW 251
38577: ST_TO_ADDR
// if not x or not y then
38578: LD_VAR 0 4
38582: NOT
38583: PUSH
38584: LD_VAR 0 5
38588: NOT
38589: OR
38590: IFFALSE 38594
// exit ;
38592: GO 38686
// if GetTaskList ( unit ) then
38594: LD_VAR 0 1
38598: PPUSH
38599: CALL_OW 437
38603: IFFALSE 38686
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38605: LD_STRING e
38607: PUSH
38608: LD_VAR 0 1
38612: PPUSH
38613: CALL_OW 437
38617: PUSH
38618: LD_INT 1
38620: ARRAY
38621: PUSH
38622: LD_INT 1
38624: ARRAY
38625: EQUAL
38626: PUSH
38627: LD_VAR 0 4
38631: PUSH
38632: LD_VAR 0 1
38636: PPUSH
38637: CALL_OW 437
38641: PUSH
38642: LD_INT 1
38644: ARRAY
38645: PUSH
38646: LD_INT 2
38648: ARRAY
38649: EQUAL
38650: AND
38651: PUSH
38652: LD_VAR 0 5
38656: PUSH
38657: LD_VAR 0 1
38661: PPUSH
38662: CALL_OW 437
38666: PUSH
38667: LD_INT 1
38669: ARRAY
38670: PUSH
38671: LD_INT 3
38673: ARRAY
38674: EQUAL
38675: AND
38676: IFFALSE 38686
// result := true end ;
38678: LD_ADDR_VAR 0 3
38682: PUSH
38683: LD_INT 1
38685: ST_TO_ADDR
// end ;
38686: LD_VAR 0 3
38690: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38691: LD_INT 0
38693: PPUSH
// result := false ;
38694: LD_ADDR_VAR 0 4
38698: PUSH
38699: LD_INT 0
38701: ST_TO_ADDR
// if GetTaskList ( unit ) then
38702: LD_VAR 0 1
38706: PPUSH
38707: CALL_OW 437
38711: IFFALSE 38794
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38713: LD_STRING M
38715: PUSH
38716: LD_VAR 0 1
38720: PPUSH
38721: CALL_OW 437
38725: PUSH
38726: LD_INT 1
38728: ARRAY
38729: PUSH
38730: LD_INT 1
38732: ARRAY
38733: EQUAL
38734: PUSH
38735: LD_VAR 0 2
38739: PUSH
38740: LD_VAR 0 1
38744: PPUSH
38745: CALL_OW 437
38749: PUSH
38750: LD_INT 1
38752: ARRAY
38753: PUSH
38754: LD_INT 2
38756: ARRAY
38757: EQUAL
38758: AND
38759: PUSH
38760: LD_VAR 0 3
38764: PUSH
38765: LD_VAR 0 1
38769: PPUSH
38770: CALL_OW 437
38774: PUSH
38775: LD_INT 1
38777: ARRAY
38778: PUSH
38779: LD_INT 3
38781: ARRAY
38782: EQUAL
38783: AND
38784: IFFALSE 38794
// result := true ;
38786: LD_ADDR_VAR 0 4
38790: PUSH
38791: LD_INT 1
38793: ST_TO_ADDR
// end ; end ;
38794: LD_VAR 0 4
38798: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38799: LD_INT 0
38801: PPUSH
38802: PPUSH
38803: PPUSH
38804: PPUSH
// if not unit or not area then
38805: LD_VAR 0 1
38809: NOT
38810: PUSH
38811: LD_VAR 0 2
38815: NOT
38816: OR
38817: IFFALSE 38821
// exit ;
38819: GO 38997
// tmp := AreaToList ( area , i ) ;
38821: LD_ADDR_VAR 0 6
38825: PUSH
38826: LD_VAR 0 2
38830: PPUSH
38831: LD_VAR 0 5
38835: PPUSH
38836: CALL_OW 517
38840: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38841: LD_ADDR_VAR 0 5
38845: PUSH
38846: DOUBLE
38847: LD_INT 1
38849: DEC
38850: ST_TO_ADDR
38851: LD_VAR 0 6
38855: PUSH
38856: LD_INT 1
38858: ARRAY
38859: PUSH
38860: FOR_TO
38861: IFFALSE 38995
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38863: LD_ADDR_VAR 0 7
38867: PUSH
38868: LD_VAR 0 6
38872: PUSH
38873: LD_INT 1
38875: ARRAY
38876: PUSH
38877: LD_VAR 0 5
38881: ARRAY
38882: PUSH
38883: LD_VAR 0 6
38887: PUSH
38888: LD_INT 2
38890: ARRAY
38891: PUSH
38892: LD_VAR 0 5
38896: ARRAY
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38902: LD_INT 92
38904: PUSH
38905: LD_VAR 0 7
38909: PUSH
38910: LD_INT 1
38912: ARRAY
38913: PUSH
38914: LD_VAR 0 7
38918: PUSH
38919: LD_INT 2
38921: ARRAY
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: PPUSH
38932: CALL_OW 69
38936: PUSH
38937: LD_INT 0
38939: EQUAL
38940: IFFALSE 38993
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38942: LD_VAR 0 1
38946: PPUSH
38947: LD_VAR 0 7
38951: PUSH
38952: LD_INT 1
38954: ARRAY
38955: PPUSH
38956: LD_VAR 0 7
38960: PUSH
38961: LD_INT 2
38963: ARRAY
38964: PPUSH
38965: LD_VAR 0 3
38969: PPUSH
38970: CALL_OW 48
// result := IsPlaced ( unit ) ;
38974: LD_ADDR_VAR 0 4
38978: PUSH
38979: LD_VAR 0 1
38983: PPUSH
38984: CALL_OW 305
38988: ST_TO_ADDR
// exit ;
38989: POP
38990: POP
38991: GO 38997
// end ; end ;
38993: GO 38860
38995: POP
38996: POP
// end ;
38997: LD_VAR 0 4
39001: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39002: LD_INT 0
39004: PPUSH
39005: PPUSH
39006: PPUSH
// if not side or side > 8 then
39007: LD_VAR 0 1
39011: NOT
39012: PUSH
39013: LD_VAR 0 1
39017: PUSH
39018: LD_INT 8
39020: GREATER
39021: OR
39022: IFFALSE 39026
// exit ;
39024: GO 39213
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39026: LD_ADDR_VAR 0 4
39030: PUSH
39031: LD_INT 22
39033: PUSH
39034: LD_VAR 0 1
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 21
39045: PUSH
39046: LD_INT 3
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PPUSH
39057: CALL_OW 69
39061: ST_TO_ADDR
// if not tmp then
39062: LD_VAR 0 4
39066: NOT
39067: IFFALSE 39071
// exit ;
39069: GO 39213
// enable_addtolog := true ;
39071: LD_ADDR_OWVAR 81
39075: PUSH
39076: LD_INT 1
39078: ST_TO_ADDR
// AddToLog ( [ ) ;
39079: LD_STRING [
39081: PPUSH
39082: CALL_OW 561
// for i in tmp do
39086: LD_ADDR_VAR 0 3
39090: PUSH
39091: LD_VAR 0 4
39095: PUSH
39096: FOR_IN
39097: IFFALSE 39204
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39099: LD_STRING [
39101: PUSH
39102: LD_VAR 0 3
39106: PPUSH
39107: CALL_OW 266
39111: STR
39112: PUSH
39113: LD_STRING , 
39115: STR
39116: PUSH
39117: LD_VAR 0 3
39121: PPUSH
39122: CALL_OW 250
39126: STR
39127: PUSH
39128: LD_STRING , 
39130: STR
39131: PUSH
39132: LD_VAR 0 3
39136: PPUSH
39137: CALL_OW 251
39141: STR
39142: PUSH
39143: LD_STRING , 
39145: STR
39146: PUSH
39147: LD_VAR 0 3
39151: PPUSH
39152: CALL_OW 254
39156: STR
39157: PUSH
39158: LD_STRING , 
39160: STR
39161: PUSH
39162: LD_VAR 0 3
39166: PPUSH
39167: LD_INT 1
39169: PPUSH
39170: CALL_OW 268
39174: STR
39175: PUSH
39176: LD_STRING , 
39178: STR
39179: PUSH
39180: LD_VAR 0 3
39184: PPUSH
39185: LD_INT 2
39187: PPUSH
39188: CALL_OW 268
39192: STR
39193: PUSH
39194: LD_STRING ],
39196: STR
39197: PPUSH
39198: CALL_OW 561
// end ;
39202: GO 39096
39204: POP
39205: POP
// AddToLog ( ]; ) ;
39206: LD_STRING ];
39208: PPUSH
39209: CALL_OW 561
// end ;
39213: LD_VAR 0 2
39217: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39218: LD_INT 0
39220: PPUSH
39221: PPUSH
39222: PPUSH
39223: PPUSH
39224: PPUSH
// if not area or not rate or not max then
39225: LD_VAR 0 1
39229: NOT
39230: PUSH
39231: LD_VAR 0 2
39235: NOT
39236: OR
39237: PUSH
39238: LD_VAR 0 4
39242: NOT
39243: OR
39244: IFFALSE 39248
// exit ;
39246: GO 39437
// while 1 do
39248: LD_INT 1
39250: IFFALSE 39437
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39252: LD_ADDR_VAR 0 9
39256: PUSH
39257: LD_VAR 0 1
39261: PPUSH
39262: LD_INT 1
39264: PPUSH
39265: CALL_OW 287
39269: PUSH
39270: LD_INT 10
39272: MUL
39273: ST_TO_ADDR
// r := rate / 10 ;
39274: LD_ADDR_VAR 0 7
39278: PUSH
39279: LD_VAR 0 2
39283: PUSH
39284: LD_INT 10
39286: DIVREAL
39287: ST_TO_ADDR
// time := 1 1$00 ;
39288: LD_ADDR_VAR 0 8
39292: PUSH
39293: LD_INT 2100
39295: ST_TO_ADDR
// if amount < min then
39296: LD_VAR 0 9
39300: PUSH
39301: LD_VAR 0 3
39305: LESS
39306: IFFALSE 39324
// r := r * 2 else
39308: LD_ADDR_VAR 0 7
39312: PUSH
39313: LD_VAR 0 7
39317: PUSH
39318: LD_INT 2
39320: MUL
39321: ST_TO_ADDR
39322: GO 39350
// if amount > max then
39324: LD_VAR 0 9
39328: PUSH
39329: LD_VAR 0 4
39333: GREATER
39334: IFFALSE 39350
// r := r / 2 ;
39336: LD_ADDR_VAR 0 7
39340: PUSH
39341: LD_VAR 0 7
39345: PUSH
39346: LD_INT 2
39348: DIVREAL
39349: ST_TO_ADDR
// time := time / r ;
39350: LD_ADDR_VAR 0 8
39354: PUSH
39355: LD_VAR 0 8
39359: PUSH
39360: LD_VAR 0 7
39364: DIVREAL
39365: ST_TO_ADDR
// if time < 0 then
39366: LD_VAR 0 8
39370: PUSH
39371: LD_INT 0
39373: LESS
39374: IFFALSE 39391
// time := time * - 1 ;
39376: LD_ADDR_VAR 0 8
39380: PUSH
39381: LD_VAR 0 8
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: MUL
39390: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39391: LD_VAR 0 8
39395: PUSH
39396: LD_INT 35
39398: PPUSH
39399: LD_INT 875
39401: PPUSH
39402: CALL_OW 12
39406: PLUS
39407: PPUSH
39408: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39412: LD_INT 1
39414: PPUSH
39415: LD_INT 5
39417: PPUSH
39418: CALL_OW 12
39422: PPUSH
39423: LD_VAR 0 1
39427: PPUSH
39428: LD_INT 1
39430: PPUSH
39431: CALL_OW 55
// end ;
39435: GO 39248
// end ;
39437: LD_VAR 0 5
39441: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39442: LD_INT 0
39444: PPUSH
39445: PPUSH
39446: PPUSH
39447: PPUSH
39448: PPUSH
39449: PPUSH
39450: PPUSH
39451: PPUSH
// if not turrets or not factories then
39452: LD_VAR 0 1
39456: NOT
39457: PUSH
39458: LD_VAR 0 2
39462: NOT
39463: OR
39464: IFFALSE 39468
// exit ;
39466: GO 39775
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39468: LD_ADDR_VAR 0 10
39472: PUSH
39473: LD_INT 5
39475: PUSH
39476: LD_INT 6
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 2
39485: PUSH
39486: LD_INT 4
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 3
39495: PUSH
39496: LD_INT 5
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 24
39510: PUSH
39511: LD_INT 25
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 23
39520: PUSH
39521: LD_INT 27
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 42
39534: PUSH
39535: LD_INT 43
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 44
39544: PUSH
39545: LD_INT 46
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 45
39554: PUSH
39555: LD_INT 47
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: LIST
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: LIST
39571: ST_TO_ADDR
// result := [ ] ;
39572: LD_ADDR_VAR 0 3
39576: PUSH
39577: EMPTY
39578: ST_TO_ADDR
// for i in turrets do
39579: LD_ADDR_VAR 0 4
39583: PUSH
39584: LD_VAR 0 1
39588: PUSH
39589: FOR_IN
39590: IFFALSE 39773
// begin nat := GetNation ( i ) ;
39592: LD_ADDR_VAR 0 7
39596: PUSH
39597: LD_VAR 0 4
39601: PPUSH
39602: CALL_OW 248
39606: ST_TO_ADDR
// weapon := 0 ;
39607: LD_ADDR_VAR 0 8
39611: PUSH
39612: LD_INT 0
39614: ST_TO_ADDR
// if not nat then
39615: LD_VAR 0 7
39619: NOT
39620: IFFALSE 39624
// continue ;
39622: GO 39589
// for j in list [ nat ] do
39624: LD_ADDR_VAR 0 5
39628: PUSH
39629: LD_VAR 0 10
39633: PUSH
39634: LD_VAR 0 7
39638: ARRAY
39639: PUSH
39640: FOR_IN
39641: IFFALSE 39682
// if GetBWeapon ( i ) = j [ 1 ] then
39643: LD_VAR 0 4
39647: PPUSH
39648: CALL_OW 269
39652: PUSH
39653: LD_VAR 0 5
39657: PUSH
39658: LD_INT 1
39660: ARRAY
39661: EQUAL
39662: IFFALSE 39680
// begin weapon := j [ 2 ] ;
39664: LD_ADDR_VAR 0 8
39668: PUSH
39669: LD_VAR 0 5
39673: PUSH
39674: LD_INT 2
39676: ARRAY
39677: ST_TO_ADDR
// break ;
39678: GO 39682
// end ;
39680: GO 39640
39682: POP
39683: POP
// if not weapon then
39684: LD_VAR 0 8
39688: NOT
39689: IFFALSE 39693
// continue ;
39691: GO 39589
// for k in factories do
39693: LD_ADDR_VAR 0 6
39697: PUSH
39698: LD_VAR 0 2
39702: PUSH
39703: FOR_IN
39704: IFFALSE 39769
// begin weapons := AvailableWeaponList ( k ) ;
39706: LD_ADDR_VAR 0 9
39710: PUSH
39711: LD_VAR 0 6
39715: PPUSH
39716: CALL_OW 478
39720: ST_TO_ADDR
// if not weapons then
39721: LD_VAR 0 9
39725: NOT
39726: IFFALSE 39730
// continue ;
39728: GO 39703
// if weapon in weapons then
39730: LD_VAR 0 8
39734: PUSH
39735: LD_VAR 0 9
39739: IN
39740: IFFALSE 39767
// begin result := [ i , weapon ] ;
39742: LD_ADDR_VAR 0 3
39746: PUSH
39747: LD_VAR 0 4
39751: PUSH
39752: LD_VAR 0 8
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: ST_TO_ADDR
// exit ;
39761: POP
39762: POP
39763: POP
39764: POP
39765: GO 39775
// end ; end ;
39767: GO 39703
39769: POP
39770: POP
// end ;
39771: GO 39589
39773: POP
39774: POP
// end ;
39775: LD_VAR 0 3
39779: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39780: LD_INT 0
39782: PPUSH
// if not side or side > 8 then
39783: LD_VAR 0 3
39787: NOT
39788: PUSH
39789: LD_VAR 0 3
39793: PUSH
39794: LD_INT 8
39796: GREATER
39797: OR
39798: IFFALSE 39802
// exit ;
39800: GO 39861
// if not range then
39802: LD_VAR 0 4
39806: NOT
39807: IFFALSE 39818
// range := - 12 ;
39809: LD_ADDR_VAR 0 4
39813: PUSH
39814: LD_INT 12
39816: NEG
39817: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39818: LD_VAR 0 1
39822: PPUSH
39823: LD_VAR 0 2
39827: PPUSH
39828: LD_VAR 0 3
39832: PPUSH
39833: LD_VAR 0 4
39837: PPUSH
39838: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39842: LD_VAR 0 1
39846: PPUSH
39847: LD_VAR 0 2
39851: PPUSH
39852: LD_VAR 0 3
39856: PPUSH
39857: CALL_OW 331
// end ;
39861: LD_VAR 0 5
39865: RET
// export function Video ( mode ) ; begin
39866: LD_INT 0
39868: PPUSH
// ingame_video = mode ;
39869: LD_ADDR_OWVAR 52
39873: PUSH
39874: LD_VAR 0 1
39878: ST_TO_ADDR
// interface_hidden = mode ;
39879: LD_ADDR_OWVAR 54
39883: PUSH
39884: LD_VAR 0 1
39888: ST_TO_ADDR
// end ;
39889: LD_VAR 0 2
39893: RET
// export function Join ( array , element ) ; begin
39894: LD_INT 0
39896: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39897: LD_ADDR_VAR 0 3
39901: PUSH
39902: LD_VAR 0 1
39906: PPUSH
39907: LD_VAR 0 1
39911: PUSH
39912: LD_INT 1
39914: PLUS
39915: PPUSH
39916: LD_VAR 0 2
39920: PPUSH
39921: CALL_OW 1
39925: ST_TO_ADDR
// end ;
39926: LD_VAR 0 3
39930: RET
// export function JoinUnion ( array , element ) ; begin
39931: LD_INT 0
39933: PPUSH
// result := array union element ;
39934: LD_ADDR_VAR 0 3
39938: PUSH
39939: LD_VAR 0 1
39943: PUSH
39944: LD_VAR 0 2
39948: UNION
39949: ST_TO_ADDR
// end ;
39950: LD_VAR 0 3
39954: RET
// export function GetBehemoths ( side ) ; begin
39955: LD_INT 0
39957: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39958: LD_ADDR_VAR 0 2
39962: PUSH
39963: LD_INT 22
39965: PUSH
39966: LD_VAR 0 1
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 31
39977: PUSH
39978: LD_INT 25
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PPUSH
39989: CALL_OW 69
39993: ST_TO_ADDR
// end ;
39994: LD_VAR 0 2
39998: RET
// export function Shuffle ( array ) ; var i , index ; begin
39999: LD_INT 0
40001: PPUSH
40002: PPUSH
40003: PPUSH
// result := [ ] ;
40004: LD_ADDR_VAR 0 2
40008: PUSH
40009: EMPTY
40010: ST_TO_ADDR
// if not array then
40011: LD_VAR 0 1
40015: NOT
40016: IFFALSE 40020
// exit ;
40018: GO 40119
// Randomize ;
40020: CALL_OW 10
// for i = array downto 1 do
40024: LD_ADDR_VAR 0 3
40028: PUSH
40029: DOUBLE
40030: LD_VAR 0 1
40034: INC
40035: ST_TO_ADDR
40036: LD_INT 1
40038: PUSH
40039: FOR_DOWNTO
40040: IFFALSE 40117
// begin index := rand ( 1 , array ) ;
40042: LD_ADDR_VAR 0 4
40046: PUSH
40047: LD_INT 1
40049: PPUSH
40050: LD_VAR 0 1
40054: PPUSH
40055: CALL_OW 12
40059: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40060: LD_ADDR_VAR 0 2
40064: PUSH
40065: LD_VAR 0 2
40069: PPUSH
40070: LD_VAR 0 2
40074: PUSH
40075: LD_INT 1
40077: PLUS
40078: PPUSH
40079: LD_VAR 0 1
40083: PUSH
40084: LD_VAR 0 4
40088: ARRAY
40089: PPUSH
40090: CALL_OW 2
40094: ST_TO_ADDR
// array := Delete ( array , index ) ;
40095: LD_ADDR_VAR 0 1
40099: PUSH
40100: LD_VAR 0 1
40104: PPUSH
40105: LD_VAR 0 4
40109: PPUSH
40110: CALL_OW 3
40114: ST_TO_ADDR
// end ;
40115: GO 40039
40117: POP
40118: POP
// end ;
40119: LD_VAR 0 2
40123: RET
// export function GetBaseMaterials ( base ) ; begin
40124: LD_INT 0
40126: PPUSH
// result := [ 0 , 0 , 0 ] ;
40127: LD_ADDR_VAR 0 2
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: LIST
40145: ST_TO_ADDR
// if not base then
40146: LD_VAR 0 1
40150: NOT
40151: IFFALSE 40155
// exit ;
40153: GO 40204
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40155: LD_ADDR_VAR 0 2
40159: PUSH
40160: LD_VAR 0 1
40164: PPUSH
40165: LD_INT 1
40167: PPUSH
40168: CALL_OW 275
40172: PUSH
40173: LD_VAR 0 1
40177: PPUSH
40178: LD_INT 2
40180: PPUSH
40181: CALL_OW 275
40185: PUSH
40186: LD_VAR 0 1
40190: PPUSH
40191: LD_INT 3
40193: PPUSH
40194: CALL_OW 275
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: LIST
40203: ST_TO_ADDR
// end ;
40204: LD_VAR 0 2
40208: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40209: LD_INT 0
40211: PPUSH
40212: PPUSH
// result := array ;
40213: LD_ADDR_VAR 0 3
40217: PUSH
40218: LD_VAR 0 1
40222: ST_TO_ADDR
// if size >= result then
40223: LD_VAR 0 2
40227: PUSH
40228: LD_VAR 0 3
40232: GREATEREQUAL
40233: IFFALSE 40237
// exit ;
40235: GO 40287
// if size then
40237: LD_VAR 0 2
40241: IFFALSE 40287
// for i := array downto size do
40243: LD_ADDR_VAR 0 4
40247: PUSH
40248: DOUBLE
40249: LD_VAR 0 1
40253: INC
40254: ST_TO_ADDR
40255: LD_VAR 0 2
40259: PUSH
40260: FOR_DOWNTO
40261: IFFALSE 40285
// result := Delete ( result , result ) ;
40263: LD_ADDR_VAR 0 3
40267: PUSH
40268: LD_VAR 0 3
40272: PPUSH
40273: LD_VAR 0 3
40277: PPUSH
40278: CALL_OW 3
40282: ST_TO_ADDR
40283: GO 40260
40285: POP
40286: POP
// end ;
40287: LD_VAR 0 3
40291: RET
// export function ComExit ( unit ) ; var tmp ; begin
40292: LD_INT 0
40294: PPUSH
40295: PPUSH
// if not IsInUnit ( unit ) then
40296: LD_VAR 0 1
40300: PPUSH
40301: CALL_OW 310
40305: NOT
40306: IFFALSE 40310
// exit ;
40308: GO 40370
// tmp := IsInUnit ( unit ) ;
40310: LD_ADDR_VAR 0 3
40314: PUSH
40315: LD_VAR 0 1
40319: PPUSH
40320: CALL_OW 310
40324: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40325: LD_VAR 0 3
40329: PPUSH
40330: CALL_OW 247
40334: PUSH
40335: LD_INT 2
40337: EQUAL
40338: IFFALSE 40351
// ComExitVehicle ( unit ) else
40340: LD_VAR 0 1
40344: PPUSH
40345: CALL_OW 121
40349: GO 40360
// ComExitBuilding ( unit ) ;
40351: LD_VAR 0 1
40355: PPUSH
40356: CALL_OW 122
// result := tmp ;
40360: LD_ADDR_VAR 0 2
40364: PUSH
40365: LD_VAR 0 3
40369: ST_TO_ADDR
// end ;
40370: LD_VAR 0 2
40374: RET
// export function ComExitAll ( units ) ; var i ; begin
40375: LD_INT 0
40377: PPUSH
40378: PPUSH
// if not units then
40379: LD_VAR 0 1
40383: NOT
40384: IFFALSE 40388
// exit ;
40386: GO 40414
// for i in units do
40388: LD_ADDR_VAR 0 3
40392: PUSH
40393: LD_VAR 0 1
40397: PUSH
40398: FOR_IN
40399: IFFALSE 40412
// ComExit ( i ) ;
40401: LD_VAR 0 3
40405: PPUSH
40406: CALL 40292 0 1
40410: GO 40398
40412: POP
40413: POP
// end ;
40414: LD_VAR 0 2
40418: RET
// export function ResetHc ; begin
40419: LD_INT 0
40421: PPUSH
// InitHc ;
40422: CALL_OW 19
// hc_importance := 0 ;
40426: LD_ADDR_OWVAR 32
40430: PUSH
40431: LD_INT 0
40433: ST_TO_ADDR
// end ;
40434: LD_VAR 0 1
40438: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40439: LD_INT 0
40441: PPUSH
40442: PPUSH
40443: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40444: LD_ADDR_VAR 0 6
40448: PUSH
40449: LD_VAR 0 1
40453: PUSH
40454: LD_VAR 0 3
40458: PLUS
40459: PUSH
40460: LD_INT 2
40462: DIV
40463: ST_TO_ADDR
// if _x < 0 then
40464: LD_VAR 0 6
40468: PUSH
40469: LD_INT 0
40471: LESS
40472: IFFALSE 40489
// _x := _x * - 1 ;
40474: LD_ADDR_VAR 0 6
40478: PUSH
40479: LD_VAR 0 6
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: MUL
40488: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40489: LD_ADDR_VAR 0 7
40493: PUSH
40494: LD_VAR 0 2
40498: PUSH
40499: LD_VAR 0 4
40503: PLUS
40504: PUSH
40505: LD_INT 2
40507: DIV
40508: ST_TO_ADDR
// if _y < 0 then
40509: LD_VAR 0 7
40513: PUSH
40514: LD_INT 0
40516: LESS
40517: IFFALSE 40534
// _y := _y * - 1 ;
40519: LD_ADDR_VAR 0 7
40523: PUSH
40524: LD_VAR 0 7
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: MUL
40533: ST_TO_ADDR
// result := [ _x , _y ] ;
40534: LD_ADDR_VAR 0 5
40538: PUSH
40539: LD_VAR 0 6
40543: PUSH
40544: LD_VAR 0 7
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: ST_TO_ADDR
// end ;
40553: LD_VAR 0 5
40557: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40558: LD_INT 0
40560: PPUSH
40561: PPUSH
40562: PPUSH
40563: PPUSH
// task := GetTaskList ( unit ) ;
40564: LD_ADDR_VAR 0 7
40568: PUSH
40569: LD_VAR 0 1
40573: PPUSH
40574: CALL_OW 437
40578: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40579: LD_VAR 0 7
40583: NOT
40584: PUSH
40585: LD_VAR 0 1
40589: PPUSH
40590: LD_VAR 0 2
40594: PPUSH
40595: CALL_OW 308
40599: NOT
40600: AND
40601: IFFALSE 40605
// exit ;
40603: GO 40723
// if IsInArea ( unit , area ) then
40605: LD_VAR 0 1
40609: PPUSH
40610: LD_VAR 0 2
40614: PPUSH
40615: CALL_OW 308
40619: IFFALSE 40637
// begin ComMoveToArea ( unit , goAway ) ;
40621: LD_VAR 0 1
40625: PPUSH
40626: LD_VAR 0 3
40630: PPUSH
40631: CALL_OW 113
// exit ;
40635: GO 40723
// end ; if task [ 1 ] [ 1 ] <> M then
40637: LD_VAR 0 7
40641: PUSH
40642: LD_INT 1
40644: ARRAY
40645: PUSH
40646: LD_INT 1
40648: ARRAY
40649: PUSH
40650: LD_STRING M
40652: NONEQUAL
40653: IFFALSE 40657
// exit ;
40655: GO 40723
// x := task [ 1 ] [ 2 ] ;
40657: LD_ADDR_VAR 0 5
40661: PUSH
40662: LD_VAR 0 7
40666: PUSH
40667: LD_INT 1
40669: ARRAY
40670: PUSH
40671: LD_INT 2
40673: ARRAY
40674: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40675: LD_ADDR_VAR 0 6
40679: PUSH
40680: LD_VAR 0 7
40684: PUSH
40685: LD_INT 1
40687: ARRAY
40688: PUSH
40689: LD_INT 3
40691: ARRAY
40692: ST_TO_ADDR
// if InArea ( x , y , area ) then
40693: LD_VAR 0 5
40697: PPUSH
40698: LD_VAR 0 6
40702: PPUSH
40703: LD_VAR 0 2
40707: PPUSH
40708: CALL_OW 309
40712: IFFALSE 40723
// ComStop ( unit ) ;
40714: LD_VAR 0 1
40718: PPUSH
40719: CALL_OW 141
// end ;
40723: LD_VAR 0 4
40727: RET
// export function Abs ( value ) ; begin
40728: LD_INT 0
40730: PPUSH
// result := value ;
40731: LD_ADDR_VAR 0 2
40735: PUSH
40736: LD_VAR 0 1
40740: ST_TO_ADDR
// if value < 0 then
40741: LD_VAR 0 1
40745: PUSH
40746: LD_INT 0
40748: LESS
40749: IFFALSE 40766
// result := value * - 1 ;
40751: LD_ADDR_VAR 0 2
40755: PUSH
40756: LD_VAR 0 1
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: MUL
40765: ST_TO_ADDR
// end ;
40766: LD_VAR 0 2
40770: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40771: LD_INT 0
40773: PPUSH
40774: PPUSH
40775: PPUSH
40776: PPUSH
40777: PPUSH
40778: PPUSH
40779: PPUSH
40780: PPUSH
// if not unit or not building then
40781: LD_VAR 0 1
40785: NOT
40786: PUSH
40787: LD_VAR 0 2
40791: NOT
40792: OR
40793: IFFALSE 40797
// exit ;
40795: GO 41023
// x := GetX ( building ) ;
40797: LD_ADDR_VAR 0 4
40801: PUSH
40802: LD_VAR 0 2
40806: PPUSH
40807: CALL_OW 250
40811: ST_TO_ADDR
// y := GetY ( building ) ;
40812: LD_ADDR_VAR 0 6
40816: PUSH
40817: LD_VAR 0 2
40821: PPUSH
40822: CALL_OW 251
40826: ST_TO_ADDR
// d := GetDir ( building ) ;
40827: LD_ADDR_VAR 0 8
40831: PUSH
40832: LD_VAR 0 2
40836: PPUSH
40837: CALL_OW 254
40841: ST_TO_ADDR
// r := 4 ;
40842: LD_ADDR_VAR 0 9
40846: PUSH
40847: LD_INT 4
40849: ST_TO_ADDR
// for i := 1 to 5 do
40850: LD_ADDR_VAR 0 10
40854: PUSH
40855: DOUBLE
40856: LD_INT 1
40858: DEC
40859: ST_TO_ADDR
40860: LD_INT 5
40862: PUSH
40863: FOR_TO
40864: IFFALSE 41021
// begin _x := ShiftX ( x , d , r + i ) ;
40866: LD_ADDR_VAR 0 5
40870: PUSH
40871: LD_VAR 0 4
40875: PPUSH
40876: LD_VAR 0 8
40880: PPUSH
40881: LD_VAR 0 9
40885: PUSH
40886: LD_VAR 0 10
40890: PLUS
40891: PPUSH
40892: CALL_OW 272
40896: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40897: LD_ADDR_VAR 0 7
40901: PUSH
40902: LD_VAR 0 6
40906: PPUSH
40907: LD_VAR 0 8
40911: PPUSH
40912: LD_VAR 0 9
40916: PUSH
40917: LD_VAR 0 10
40921: PLUS
40922: PPUSH
40923: CALL_OW 273
40927: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40928: LD_VAR 0 5
40932: PPUSH
40933: LD_VAR 0 7
40937: PPUSH
40938: CALL_OW 488
40942: PUSH
40943: LD_VAR 0 5
40947: PPUSH
40948: LD_VAR 0 7
40952: PPUSH
40953: CALL_OW 428
40957: PPUSH
40958: CALL_OW 247
40962: PUSH
40963: LD_INT 3
40965: PUSH
40966: LD_INT 2
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: IN
40973: NOT
40974: AND
40975: IFFALSE 41019
// begin ComMoveXY ( unit , _x , _y ) ;
40977: LD_VAR 0 1
40981: PPUSH
40982: LD_VAR 0 5
40986: PPUSH
40987: LD_VAR 0 7
40991: PPUSH
40992: CALL_OW 111
// result := [ _x , _y ] ;
40996: LD_ADDR_VAR 0 3
41000: PUSH
41001: LD_VAR 0 5
41005: PUSH
41006: LD_VAR 0 7
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: ST_TO_ADDR
// exit ;
41015: POP
41016: POP
41017: GO 41023
// end ; end ;
41019: GO 40863
41021: POP
41022: POP
// end ;
41023: LD_VAR 0 3
41027: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41028: LD_INT 0
41030: PPUSH
41031: PPUSH
41032: PPUSH
// result := 0 ;
41033: LD_ADDR_VAR 0 3
41037: PUSH
41038: LD_INT 0
41040: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41041: LD_VAR 0 1
41045: PUSH
41046: LD_INT 0
41048: LESS
41049: PUSH
41050: LD_VAR 0 1
41054: PUSH
41055: LD_INT 8
41057: GREATER
41058: OR
41059: PUSH
41060: LD_VAR 0 2
41064: PUSH
41065: LD_INT 0
41067: LESS
41068: OR
41069: PUSH
41070: LD_VAR 0 2
41074: PUSH
41075: LD_INT 8
41077: GREATER
41078: OR
41079: IFFALSE 41083
// exit ;
41081: GO 41158
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41083: LD_ADDR_VAR 0 4
41087: PUSH
41088: LD_INT 22
41090: PUSH
41091: LD_VAR 0 2
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PPUSH
41100: CALL_OW 69
41104: PUSH
41105: FOR_IN
41106: IFFALSE 41156
// begin un := UnitShoot ( i ) ;
41108: LD_ADDR_VAR 0 5
41112: PUSH
41113: LD_VAR 0 4
41117: PPUSH
41118: CALL_OW 504
41122: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41123: LD_VAR 0 5
41127: PPUSH
41128: CALL_OW 255
41132: PUSH
41133: LD_VAR 0 1
41137: EQUAL
41138: IFFALSE 41154
// begin result := un ;
41140: LD_ADDR_VAR 0 3
41144: PUSH
41145: LD_VAR 0 5
41149: ST_TO_ADDR
// exit ;
41150: POP
41151: POP
41152: GO 41158
// end ; end ;
41154: GO 41105
41156: POP
41157: POP
// end ;
41158: LD_VAR 0 3
41162: RET
// export function GetCargoBay ( units ) ; begin
41163: LD_INT 0
41165: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41166: LD_ADDR_VAR 0 2
41170: PUSH
41171: LD_VAR 0 1
41175: PPUSH
41176: LD_INT 2
41178: PUSH
41179: LD_INT 34
41181: PUSH
41182: LD_INT 12
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 34
41191: PUSH
41192: LD_INT 51
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 34
41201: PUSH
41202: LD_INT 32
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 34
41211: PUSH
41212: LD_INT 89
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: PPUSH
41226: CALL_OW 72
41230: ST_TO_ADDR
// end ;
41231: LD_VAR 0 2
41235: RET
// export function Negate ( value ) ; begin
41236: LD_INT 0
41238: PPUSH
// result := not value ;
41239: LD_ADDR_VAR 0 2
41243: PUSH
41244: LD_VAR 0 1
41248: NOT
41249: ST_TO_ADDR
// end ;
41250: LD_VAR 0 2
41254: RET
// export function Inc ( value ) ; begin
41255: LD_INT 0
41257: PPUSH
// result := value + 1 ;
41258: LD_ADDR_VAR 0 2
41262: PUSH
41263: LD_VAR 0 1
41267: PUSH
41268: LD_INT 1
41270: PLUS
41271: ST_TO_ADDR
// end ;
41272: LD_VAR 0 2
41276: RET
// export function Dec ( value ) ; begin
41277: LD_INT 0
41279: PPUSH
// result := value - 1 ;
41280: LD_ADDR_VAR 0 2
41284: PUSH
41285: LD_VAR 0 1
41289: PUSH
41290: LD_INT 1
41292: MINUS
41293: ST_TO_ADDR
// end ;
41294: LD_VAR 0 2
41298: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41299: LD_INT 0
41301: PPUSH
41302: PPUSH
41303: PPUSH
41304: PPUSH
41305: PPUSH
41306: PPUSH
41307: PPUSH
41308: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41309: LD_VAR 0 1
41313: PPUSH
41314: LD_VAR 0 2
41318: PPUSH
41319: CALL_OW 488
41323: NOT
41324: PUSH
41325: LD_VAR 0 3
41329: PPUSH
41330: LD_VAR 0 4
41334: PPUSH
41335: CALL_OW 488
41339: NOT
41340: OR
41341: IFFALSE 41354
// begin result := - 1 ;
41343: LD_ADDR_VAR 0 5
41347: PUSH
41348: LD_INT 1
41350: NEG
41351: ST_TO_ADDR
// exit ;
41352: GO 41589
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41354: LD_ADDR_VAR 0 12
41358: PUSH
41359: LD_VAR 0 1
41363: PPUSH
41364: LD_VAR 0 2
41368: PPUSH
41369: LD_VAR 0 3
41373: PPUSH
41374: LD_VAR 0 4
41378: PPUSH
41379: CALL 40439 0 4
41383: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41384: LD_ADDR_VAR 0 11
41388: PUSH
41389: LD_VAR 0 1
41393: PPUSH
41394: LD_VAR 0 2
41398: PPUSH
41399: LD_VAR 0 12
41403: PUSH
41404: LD_INT 1
41406: ARRAY
41407: PPUSH
41408: LD_VAR 0 12
41412: PUSH
41413: LD_INT 2
41415: ARRAY
41416: PPUSH
41417: CALL_OW 298
41421: ST_TO_ADDR
// distance := 9999 ;
41422: LD_ADDR_VAR 0 10
41426: PUSH
41427: LD_INT 9999
41429: ST_TO_ADDR
// for i := 0 to 5 do
41430: LD_ADDR_VAR 0 6
41434: PUSH
41435: DOUBLE
41436: LD_INT 0
41438: DEC
41439: ST_TO_ADDR
41440: LD_INT 5
41442: PUSH
41443: FOR_TO
41444: IFFALSE 41587
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41446: LD_ADDR_VAR 0 7
41450: PUSH
41451: LD_VAR 0 1
41455: PPUSH
41456: LD_VAR 0 6
41460: PPUSH
41461: LD_VAR 0 11
41465: PPUSH
41466: CALL_OW 272
41470: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41471: LD_ADDR_VAR 0 8
41475: PUSH
41476: LD_VAR 0 2
41480: PPUSH
41481: LD_VAR 0 6
41485: PPUSH
41486: LD_VAR 0 11
41490: PPUSH
41491: CALL_OW 273
41495: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41496: LD_VAR 0 7
41500: PPUSH
41501: LD_VAR 0 8
41505: PPUSH
41506: CALL_OW 488
41510: NOT
41511: IFFALSE 41515
// continue ;
41513: GO 41443
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41515: LD_ADDR_VAR 0 9
41519: PUSH
41520: LD_VAR 0 12
41524: PUSH
41525: LD_INT 1
41527: ARRAY
41528: PPUSH
41529: LD_VAR 0 12
41533: PUSH
41534: LD_INT 2
41536: ARRAY
41537: PPUSH
41538: LD_VAR 0 7
41542: PPUSH
41543: LD_VAR 0 8
41547: PPUSH
41548: CALL_OW 298
41552: ST_TO_ADDR
// if tmp < distance then
41553: LD_VAR 0 9
41557: PUSH
41558: LD_VAR 0 10
41562: LESS
41563: IFFALSE 41585
// begin result := i ;
41565: LD_ADDR_VAR 0 5
41569: PUSH
41570: LD_VAR 0 6
41574: ST_TO_ADDR
// distance := tmp ;
41575: LD_ADDR_VAR 0 10
41579: PUSH
41580: LD_VAR 0 9
41584: ST_TO_ADDR
// end ; end ;
41585: GO 41443
41587: POP
41588: POP
// end ;
41589: LD_VAR 0 5
41593: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41594: LD_INT 0
41596: PPUSH
41597: PPUSH
// if not driver or not IsInUnit ( driver ) then
41598: LD_VAR 0 1
41602: NOT
41603: PUSH
41604: LD_VAR 0 1
41608: PPUSH
41609: CALL_OW 310
41613: NOT
41614: OR
41615: IFFALSE 41619
// exit ;
41617: GO 41709
// vehicle := IsInUnit ( driver ) ;
41619: LD_ADDR_VAR 0 3
41623: PUSH
41624: LD_VAR 0 1
41628: PPUSH
41629: CALL_OW 310
41633: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41634: LD_VAR 0 1
41638: PPUSH
41639: LD_STRING \
41641: PUSH
41642: LD_INT 0
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: PUSH
41669: LD_STRING E
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: LD_INT 0
41677: PUSH
41678: LD_VAR 0 3
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PPUSH
41705: CALL_OW 446
// end ;
41709: LD_VAR 0 2
41713: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41714: LD_INT 0
41716: PPUSH
41717: PPUSH
// if not driver or not IsInUnit ( driver ) then
41718: LD_VAR 0 1
41722: NOT
41723: PUSH
41724: LD_VAR 0 1
41728: PPUSH
41729: CALL_OW 310
41733: NOT
41734: OR
41735: IFFALSE 41739
// exit ;
41737: GO 41829
// vehicle := IsInUnit ( driver ) ;
41739: LD_ADDR_VAR 0 3
41743: PUSH
41744: LD_VAR 0 1
41748: PPUSH
41749: CALL_OW 310
41753: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41754: LD_VAR 0 1
41758: PPUSH
41759: LD_STRING \
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: PUSH
41789: LD_STRING E
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_VAR 0 3
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PPUSH
41825: CALL_OW 447
// end ;
41829: LD_VAR 0 2
41833: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41834: LD_INT 0
41836: PPUSH
41837: PPUSH
41838: PPUSH
// tmp := [ ] ;
41839: LD_ADDR_VAR 0 5
41843: PUSH
41844: EMPTY
41845: ST_TO_ADDR
// for i in units do
41846: LD_ADDR_VAR 0 4
41850: PUSH
41851: LD_VAR 0 1
41855: PUSH
41856: FOR_IN
41857: IFFALSE 41895
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41859: LD_ADDR_VAR 0 5
41863: PUSH
41864: LD_VAR 0 5
41868: PPUSH
41869: LD_VAR 0 5
41873: PUSH
41874: LD_INT 1
41876: PLUS
41877: PPUSH
41878: LD_VAR 0 4
41882: PPUSH
41883: CALL_OW 256
41887: PPUSH
41888: CALL_OW 2
41892: ST_TO_ADDR
41893: GO 41856
41895: POP
41896: POP
// if not tmp then
41897: LD_VAR 0 5
41901: NOT
41902: IFFALSE 41906
// exit ;
41904: GO 41954
// if asc then
41906: LD_VAR 0 2
41910: IFFALSE 41934
// result := SortListByListAsc ( units , tmp ) else
41912: LD_ADDR_VAR 0 3
41916: PUSH
41917: LD_VAR 0 1
41921: PPUSH
41922: LD_VAR 0 5
41926: PPUSH
41927: CALL_OW 76
41931: ST_TO_ADDR
41932: GO 41954
// result := SortListByListDesc ( units , tmp ) ;
41934: LD_ADDR_VAR 0 3
41938: PUSH
41939: LD_VAR 0 1
41943: PPUSH
41944: LD_VAR 0 5
41948: PPUSH
41949: CALL_OW 77
41953: ST_TO_ADDR
// end ;
41954: LD_VAR 0 3
41958: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41959: LD_INT 0
41961: PPUSH
41962: PPUSH
// task := GetTaskList ( mech ) ;
41963: LD_ADDR_VAR 0 4
41967: PUSH
41968: LD_VAR 0 1
41972: PPUSH
41973: CALL_OW 437
41977: ST_TO_ADDR
// if not task then
41978: LD_VAR 0 4
41982: NOT
41983: IFFALSE 41987
// exit ;
41985: GO 42029
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41987: LD_ADDR_VAR 0 3
41991: PUSH
41992: LD_VAR 0 4
41996: PUSH
41997: LD_INT 1
41999: ARRAY
42000: PUSH
42001: LD_INT 1
42003: ARRAY
42004: PUSH
42005: LD_STRING r
42007: EQUAL
42008: PUSH
42009: LD_VAR 0 4
42013: PUSH
42014: LD_INT 1
42016: ARRAY
42017: PUSH
42018: LD_INT 4
42020: ARRAY
42021: PUSH
42022: LD_VAR 0 2
42026: EQUAL
42027: AND
42028: ST_TO_ADDR
// end ;
42029: LD_VAR 0 3
42033: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42034: LD_INT 0
42036: PPUSH
// SetDir ( unit , d ) ;
42037: LD_VAR 0 1
42041: PPUSH
42042: LD_VAR 0 4
42046: PPUSH
42047: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42051: LD_VAR 0 1
42055: PPUSH
42056: LD_VAR 0 2
42060: PPUSH
42061: LD_VAR 0 3
42065: PPUSH
42066: LD_VAR 0 5
42070: PPUSH
42071: CALL_OW 48
// end ;
42075: LD_VAR 0 6
42079: RET
// export function ToNaturalNumber ( number ) ; begin
42080: LD_INT 0
42082: PPUSH
// result := number div 1 ;
42083: LD_ADDR_VAR 0 2
42087: PUSH
42088: LD_VAR 0 1
42092: PUSH
42093: LD_INT 1
42095: DIV
42096: ST_TO_ADDR
// if number < 0 then
42097: LD_VAR 0 1
42101: PUSH
42102: LD_INT 0
42104: LESS
42105: IFFALSE 42115
// result := 0 ;
42107: LD_ADDR_VAR 0 2
42111: PUSH
42112: LD_INT 0
42114: ST_TO_ADDR
// end ;
42115: LD_VAR 0 2
42119: RET
// export function SortByClass ( units , class ) ; var un ; begin
42120: LD_INT 0
42122: PPUSH
42123: PPUSH
// if not units or not class then
42124: LD_VAR 0 1
42128: NOT
42129: PUSH
42130: LD_VAR 0 2
42134: NOT
42135: OR
42136: IFFALSE 42140
// exit ;
42138: GO 42235
// result := [ ] ;
42140: LD_ADDR_VAR 0 3
42144: PUSH
42145: EMPTY
42146: ST_TO_ADDR
// for un in units do
42147: LD_ADDR_VAR 0 4
42151: PUSH
42152: LD_VAR 0 1
42156: PUSH
42157: FOR_IN
42158: IFFALSE 42233
// if GetClass ( un ) = class then
42160: LD_VAR 0 4
42164: PPUSH
42165: CALL_OW 257
42169: PUSH
42170: LD_VAR 0 2
42174: EQUAL
42175: IFFALSE 42202
// result := Insert ( result , 1 , un ) else
42177: LD_ADDR_VAR 0 3
42181: PUSH
42182: LD_VAR 0 3
42186: PPUSH
42187: LD_INT 1
42189: PPUSH
42190: LD_VAR 0 4
42194: PPUSH
42195: CALL_OW 2
42199: ST_TO_ADDR
42200: GO 42231
// result := Replace ( result , result + 1 , un ) ;
42202: LD_ADDR_VAR 0 3
42206: PUSH
42207: LD_VAR 0 3
42211: PPUSH
42212: LD_VAR 0 3
42216: PUSH
42217: LD_INT 1
42219: PLUS
42220: PPUSH
42221: LD_VAR 0 4
42225: PPUSH
42226: CALL_OW 1
42230: ST_TO_ADDR
42231: GO 42157
42233: POP
42234: POP
// end ;
42235: LD_VAR 0 3
42239: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42240: LD_INT 0
42242: PPUSH
42243: PPUSH
42244: PPUSH
42245: PPUSH
42246: PPUSH
42247: PPUSH
42248: PPUSH
// result := [ ] ;
42249: LD_ADDR_VAR 0 4
42253: PUSH
42254: EMPTY
42255: ST_TO_ADDR
// if x - r < 0 then
42256: LD_VAR 0 1
42260: PUSH
42261: LD_VAR 0 3
42265: MINUS
42266: PUSH
42267: LD_INT 0
42269: LESS
42270: IFFALSE 42282
// min_x := 0 else
42272: LD_ADDR_VAR 0 8
42276: PUSH
42277: LD_INT 0
42279: ST_TO_ADDR
42280: GO 42298
// min_x := x - r ;
42282: LD_ADDR_VAR 0 8
42286: PUSH
42287: LD_VAR 0 1
42291: PUSH
42292: LD_VAR 0 3
42296: MINUS
42297: ST_TO_ADDR
// if y - r < 0 then
42298: LD_VAR 0 2
42302: PUSH
42303: LD_VAR 0 3
42307: MINUS
42308: PUSH
42309: LD_INT 0
42311: LESS
42312: IFFALSE 42324
// min_y := 0 else
42314: LD_ADDR_VAR 0 7
42318: PUSH
42319: LD_INT 0
42321: ST_TO_ADDR
42322: GO 42340
// min_y := y - r ;
42324: LD_ADDR_VAR 0 7
42328: PUSH
42329: LD_VAR 0 2
42333: PUSH
42334: LD_VAR 0 3
42338: MINUS
42339: ST_TO_ADDR
// max_x := x + r ;
42340: LD_ADDR_VAR 0 9
42344: PUSH
42345: LD_VAR 0 1
42349: PUSH
42350: LD_VAR 0 3
42354: PLUS
42355: ST_TO_ADDR
// max_y := y + r ;
42356: LD_ADDR_VAR 0 10
42360: PUSH
42361: LD_VAR 0 2
42365: PUSH
42366: LD_VAR 0 3
42370: PLUS
42371: ST_TO_ADDR
// for _x = min_x to max_x do
42372: LD_ADDR_VAR 0 5
42376: PUSH
42377: DOUBLE
42378: LD_VAR 0 8
42382: DEC
42383: ST_TO_ADDR
42384: LD_VAR 0 9
42388: PUSH
42389: FOR_TO
42390: IFFALSE 42491
// for _y = min_y to max_y do
42392: LD_ADDR_VAR 0 6
42396: PUSH
42397: DOUBLE
42398: LD_VAR 0 7
42402: DEC
42403: ST_TO_ADDR
42404: LD_VAR 0 10
42408: PUSH
42409: FOR_TO
42410: IFFALSE 42487
// begin if not ValidHex ( _x , _y ) then
42412: LD_VAR 0 5
42416: PPUSH
42417: LD_VAR 0 6
42421: PPUSH
42422: CALL_OW 488
42426: NOT
42427: IFFALSE 42431
// continue ;
42429: GO 42409
// if GetResourceTypeXY ( _x , _y ) then
42431: LD_VAR 0 5
42435: PPUSH
42436: LD_VAR 0 6
42440: PPUSH
42441: CALL_OW 283
42445: IFFALSE 42485
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42447: LD_ADDR_VAR 0 4
42451: PUSH
42452: LD_VAR 0 4
42456: PPUSH
42457: LD_VAR 0 4
42461: PUSH
42462: LD_INT 1
42464: PLUS
42465: PPUSH
42466: LD_VAR 0 5
42470: PUSH
42471: LD_VAR 0 6
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PPUSH
42480: CALL_OW 1
42484: ST_TO_ADDR
// end ;
42485: GO 42409
42487: POP
42488: POP
42489: GO 42389
42491: POP
42492: POP
// end ;
42493: LD_VAR 0 4
42497: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42498: LD_INT 0
42500: PPUSH
42501: PPUSH
42502: PPUSH
42503: PPUSH
42504: PPUSH
42505: PPUSH
42506: PPUSH
42507: PPUSH
// if not units then
42508: LD_VAR 0 1
42512: NOT
42513: IFFALSE 42517
// exit ;
42515: GO 43041
// result := UnitFilter ( units , [ f_ok ] ) ;
42517: LD_ADDR_VAR 0 3
42521: PUSH
42522: LD_VAR 0 1
42526: PPUSH
42527: LD_INT 50
42529: PUSH
42530: EMPTY
42531: LIST
42532: PPUSH
42533: CALL_OW 72
42537: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42538: LD_ADDR_VAR 0 8
42542: PUSH
42543: LD_VAR 0 1
42547: PUSH
42548: LD_INT 1
42550: ARRAY
42551: PPUSH
42552: CALL_OW 255
42556: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42557: LD_ADDR_VAR 0 10
42561: PUSH
42562: LD_INT 29
42564: PUSH
42565: LD_INT 91
42567: PUSH
42568: LD_INT 49
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: LIST
42575: ST_TO_ADDR
// if not result then
42576: LD_VAR 0 3
42580: NOT
42581: IFFALSE 42585
// exit ;
42583: GO 43041
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42585: LD_ADDR_VAR 0 5
42589: PUSH
42590: LD_INT 81
42592: PUSH
42593: LD_VAR 0 8
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PPUSH
42602: CALL_OW 69
42606: ST_TO_ADDR
// for i in result do
42607: LD_ADDR_VAR 0 4
42611: PUSH
42612: LD_VAR 0 3
42616: PUSH
42617: FOR_IN
42618: IFFALSE 43039
// begin tag := GetTag ( i ) + 1 ;
42620: LD_ADDR_VAR 0 9
42624: PUSH
42625: LD_VAR 0 4
42629: PPUSH
42630: CALL_OW 110
42634: PUSH
42635: LD_INT 1
42637: PLUS
42638: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
42639: LD_ADDR_VAR 0 7
42643: PUSH
42644: LD_VAR 0 4
42648: PPUSH
42649: CALL_OW 250
42653: PPUSH
42654: LD_VAR 0 4
42658: PPUSH
42659: CALL_OW 251
42663: PPUSH
42664: LD_INT 6
42666: PPUSH
42667: CALL 42240 0 3
42671: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
42672: LD_VAR 0 4
42676: PPUSH
42677: CALL_OW 247
42681: PUSH
42682: LD_INT 2
42684: EQUAL
42685: PUSH
42686: LD_VAR 0 7
42690: AND
42691: PUSH
42692: LD_VAR 0 4
42696: PPUSH
42697: CALL_OW 264
42701: PUSH
42702: LD_VAR 0 10
42706: IN
42707: NOT
42708: AND
42709: IFFALSE 42748
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42711: LD_VAR 0 4
42715: PPUSH
42716: LD_VAR 0 7
42720: PUSH
42721: LD_INT 1
42723: ARRAY
42724: PUSH
42725: LD_INT 1
42727: ARRAY
42728: PPUSH
42729: LD_VAR 0 7
42733: PUSH
42734: LD_INT 1
42736: ARRAY
42737: PUSH
42738: LD_INT 2
42740: ARRAY
42741: PPUSH
42742: CALL_OW 116
42746: GO 43037
// if path > tag then
42748: LD_VAR 0 2
42752: PUSH
42753: LD_VAR 0 9
42757: GREATER
42758: IFFALSE 42966
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42760: LD_ADDR_VAR 0 6
42764: PUSH
42765: LD_VAR 0 5
42769: PPUSH
42770: LD_INT 91
42772: PUSH
42773: LD_VAR 0 4
42777: PUSH
42778: LD_INT 8
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: LIST
42785: PPUSH
42786: CALL_OW 72
42790: ST_TO_ADDR
// if nearEnemy then
42791: LD_VAR 0 6
42795: IFFALSE 42864
// begin if GetWeapon ( i ) = ru_time_lapser then
42797: LD_VAR 0 4
42801: PPUSH
42802: CALL_OW 264
42806: PUSH
42807: LD_INT 49
42809: EQUAL
42810: IFFALSE 42838
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42812: LD_VAR 0 4
42816: PPUSH
42817: LD_VAR 0 6
42821: PPUSH
42822: LD_VAR 0 4
42826: PPUSH
42827: CALL_OW 74
42831: PPUSH
42832: CALL_OW 112
42836: GO 42862
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42838: LD_VAR 0 4
42842: PPUSH
42843: LD_VAR 0 6
42847: PPUSH
42848: LD_VAR 0 4
42852: PPUSH
42853: CALL_OW 74
42857: PPUSH
42858: CALL 43966 0 2
// end else
42862: GO 42964
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42864: LD_VAR 0 4
42868: PPUSH
42869: LD_VAR 0 2
42873: PUSH
42874: LD_VAR 0 9
42878: ARRAY
42879: PUSH
42880: LD_INT 1
42882: ARRAY
42883: PPUSH
42884: LD_VAR 0 2
42888: PUSH
42889: LD_VAR 0 9
42893: ARRAY
42894: PUSH
42895: LD_INT 2
42897: ARRAY
42898: PPUSH
42899: CALL_OW 297
42903: PUSH
42904: LD_INT 6
42906: GREATER
42907: IFFALSE 42950
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42909: LD_VAR 0 4
42913: PPUSH
42914: LD_VAR 0 2
42918: PUSH
42919: LD_VAR 0 9
42923: ARRAY
42924: PUSH
42925: LD_INT 1
42927: ARRAY
42928: PPUSH
42929: LD_VAR 0 2
42933: PUSH
42934: LD_VAR 0 9
42938: ARRAY
42939: PUSH
42940: LD_INT 2
42942: ARRAY
42943: PPUSH
42944: CALL_OW 114
42948: GO 42964
// SetTag ( i , tag ) ;
42950: LD_VAR 0 4
42954: PPUSH
42955: LD_VAR 0 9
42959: PPUSH
42960: CALL_OW 109
// end else
42964: GO 43037
// if enemy then
42966: LD_VAR 0 5
42970: IFFALSE 43037
// begin if GetWeapon ( i ) = ru_time_lapser then
42972: LD_VAR 0 4
42976: PPUSH
42977: CALL_OW 264
42981: PUSH
42982: LD_INT 49
42984: EQUAL
42985: IFFALSE 43013
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42987: LD_VAR 0 4
42991: PPUSH
42992: LD_VAR 0 5
42996: PPUSH
42997: LD_VAR 0 4
43001: PPUSH
43002: CALL_OW 74
43006: PPUSH
43007: CALL_OW 112
43011: GO 43037
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43013: LD_VAR 0 4
43017: PPUSH
43018: LD_VAR 0 5
43022: PPUSH
43023: LD_VAR 0 4
43027: PPUSH
43028: CALL_OW 74
43032: PPUSH
43033: CALL 43966 0 2
// end ; end ;
43037: GO 42617
43039: POP
43040: POP
// end ;
43041: LD_VAR 0 3
43045: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43046: LD_INT 0
43048: PPUSH
43049: PPUSH
43050: PPUSH
// if not unit or IsInUnit ( unit ) then
43051: LD_VAR 0 1
43055: NOT
43056: PUSH
43057: LD_VAR 0 1
43061: PPUSH
43062: CALL_OW 310
43066: OR
43067: IFFALSE 43071
// exit ;
43069: GO 43162
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43071: LD_ADDR_VAR 0 4
43075: PUSH
43076: LD_VAR 0 1
43080: PPUSH
43081: CALL_OW 250
43085: PPUSH
43086: LD_VAR 0 2
43090: PPUSH
43091: LD_INT 1
43093: PPUSH
43094: CALL_OW 272
43098: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43099: LD_ADDR_VAR 0 5
43103: PUSH
43104: LD_VAR 0 1
43108: PPUSH
43109: CALL_OW 251
43113: PPUSH
43114: LD_VAR 0 2
43118: PPUSH
43119: LD_INT 1
43121: PPUSH
43122: CALL_OW 273
43126: ST_TO_ADDR
// if ValidHex ( x , y ) then
43127: LD_VAR 0 4
43131: PPUSH
43132: LD_VAR 0 5
43136: PPUSH
43137: CALL_OW 488
43141: IFFALSE 43162
// ComTurnXY ( unit , x , y ) ;
43143: LD_VAR 0 1
43147: PPUSH
43148: LD_VAR 0 4
43152: PPUSH
43153: LD_VAR 0 5
43157: PPUSH
43158: CALL_OW 118
// end ;
43162: LD_VAR 0 3
43166: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43167: LD_INT 0
43169: PPUSH
43170: PPUSH
// result := false ;
43171: LD_ADDR_VAR 0 3
43175: PUSH
43176: LD_INT 0
43178: ST_TO_ADDR
// if not units then
43179: LD_VAR 0 2
43183: NOT
43184: IFFALSE 43188
// exit ;
43186: GO 43233
// for i in units do
43188: LD_ADDR_VAR 0 4
43192: PUSH
43193: LD_VAR 0 2
43197: PUSH
43198: FOR_IN
43199: IFFALSE 43231
// if See ( side , i ) then
43201: LD_VAR 0 1
43205: PPUSH
43206: LD_VAR 0 4
43210: PPUSH
43211: CALL_OW 292
43215: IFFALSE 43229
// begin result := true ;
43217: LD_ADDR_VAR 0 3
43221: PUSH
43222: LD_INT 1
43224: ST_TO_ADDR
// exit ;
43225: POP
43226: POP
43227: GO 43233
// end ;
43229: GO 43198
43231: POP
43232: POP
// end ;
43233: LD_VAR 0 3
43237: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43238: LD_INT 0
43240: PPUSH
43241: PPUSH
43242: PPUSH
43243: PPUSH
// if not unit or not points then
43244: LD_VAR 0 1
43248: NOT
43249: PUSH
43250: LD_VAR 0 2
43254: NOT
43255: OR
43256: IFFALSE 43260
// exit ;
43258: GO 43350
// dist := 99999 ;
43260: LD_ADDR_VAR 0 5
43264: PUSH
43265: LD_INT 99999
43267: ST_TO_ADDR
// for i in points do
43268: LD_ADDR_VAR 0 4
43272: PUSH
43273: LD_VAR 0 2
43277: PUSH
43278: FOR_IN
43279: IFFALSE 43348
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43281: LD_ADDR_VAR 0 6
43285: PUSH
43286: LD_VAR 0 1
43290: PPUSH
43291: LD_VAR 0 4
43295: PUSH
43296: LD_INT 1
43298: ARRAY
43299: PPUSH
43300: LD_VAR 0 4
43304: PUSH
43305: LD_INT 2
43307: ARRAY
43308: PPUSH
43309: CALL_OW 297
43313: ST_TO_ADDR
// if tmpDist < dist then
43314: LD_VAR 0 6
43318: PUSH
43319: LD_VAR 0 5
43323: LESS
43324: IFFALSE 43346
// begin result := i ;
43326: LD_ADDR_VAR 0 3
43330: PUSH
43331: LD_VAR 0 4
43335: ST_TO_ADDR
// dist := tmpDist ;
43336: LD_ADDR_VAR 0 5
43340: PUSH
43341: LD_VAR 0 6
43345: ST_TO_ADDR
// end ; end ;
43346: GO 43278
43348: POP
43349: POP
// end ;
43350: LD_VAR 0 3
43354: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43355: LD_INT 0
43357: PPUSH
// uc_side := side ;
43358: LD_ADDR_OWVAR 20
43362: PUSH
43363: LD_VAR 0 1
43367: ST_TO_ADDR
// uc_nation := 3 ;
43368: LD_ADDR_OWVAR 21
43372: PUSH
43373: LD_INT 3
43375: ST_TO_ADDR
// vc_chassis := 25 ;
43376: LD_ADDR_OWVAR 37
43380: PUSH
43381: LD_INT 25
43383: ST_TO_ADDR
// vc_engine := engine_siberite ;
43384: LD_ADDR_OWVAR 39
43388: PUSH
43389: LD_INT 3
43391: ST_TO_ADDR
// vc_control := control_computer ;
43392: LD_ADDR_OWVAR 38
43396: PUSH
43397: LD_INT 3
43399: ST_TO_ADDR
// vc_weapon := 59 ;
43400: LD_ADDR_OWVAR 40
43404: PUSH
43405: LD_INT 59
43407: ST_TO_ADDR
// result := CreateVehicle ;
43408: LD_ADDR_VAR 0 5
43412: PUSH
43413: CALL_OW 45
43417: ST_TO_ADDR
// SetDir ( result , d ) ;
43418: LD_VAR 0 5
43422: PPUSH
43423: LD_VAR 0 4
43427: PPUSH
43428: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43432: LD_VAR 0 5
43436: PPUSH
43437: LD_VAR 0 2
43441: PPUSH
43442: LD_VAR 0 3
43446: PPUSH
43447: LD_INT 0
43449: PPUSH
43450: CALL_OW 48
// end ;
43454: LD_VAR 0 5
43458: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43459: LD_INT 0
43461: PPUSH
43462: PPUSH
43463: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43464: LD_ADDR_VAR 0 2
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43487: LD_VAR 0 1
43491: NOT
43492: PUSH
43493: LD_VAR 0 1
43497: PPUSH
43498: CALL_OW 264
43502: PUSH
43503: LD_INT 12
43505: PUSH
43506: LD_INT 51
43508: PUSH
43509: LD_INT 32
43511: PUSH
43512: LD_INT 89
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: IN
43521: NOT
43522: OR
43523: IFFALSE 43527
// exit ;
43525: GO 43625
// for i := 1 to 3 do
43527: LD_ADDR_VAR 0 3
43531: PUSH
43532: DOUBLE
43533: LD_INT 1
43535: DEC
43536: ST_TO_ADDR
43537: LD_INT 3
43539: PUSH
43540: FOR_TO
43541: IFFALSE 43623
// begin tmp := GetCargo ( cargo , i ) ;
43543: LD_ADDR_VAR 0 4
43547: PUSH
43548: LD_VAR 0 1
43552: PPUSH
43553: LD_VAR 0 3
43557: PPUSH
43558: CALL_OW 289
43562: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43563: LD_ADDR_VAR 0 2
43567: PUSH
43568: LD_VAR 0 2
43572: PPUSH
43573: LD_VAR 0 3
43577: PPUSH
43578: LD_VAR 0 4
43582: PPUSH
43583: CALL_OW 1
43587: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43588: LD_ADDR_VAR 0 2
43592: PUSH
43593: LD_VAR 0 2
43597: PPUSH
43598: LD_INT 4
43600: PPUSH
43601: LD_VAR 0 2
43605: PUSH
43606: LD_INT 4
43608: ARRAY
43609: PUSH
43610: LD_VAR 0 4
43614: PLUS
43615: PPUSH
43616: CALL_OW 1
43620: ST_TO_ADDR
// end ;
43621: GO 43540
43623: POP
43624: POP
// end ;
43625: LD_VAR 0 2
43629: RET
// export function Length ( array ) ; begin
43630: LD_INT 0
43632: PPUSH
// result := array + 0 ;
43633: LD_ADDR_VAR 0 2
43637: PUSH
43638: LD_VAR 0 1
43642: PUSH
43643: LD_INT 0
43645: PLUS
43646: ST_TO_ADDR
// end ;
43647: LD_VAR 0 2
43651: RET
// export function PrepareArray ( array ) ; begin
43652: LD_INT 0
43654: PPUSH
// result := array diff 0 ;
43655: LD_ADDR_VAR 0 2
43659: PUSH
43660: LD_VAR 0 1
43664: PUSH
43665: LD_INT 0
43667: DIFF
43668: ST_TO_ADDR
// if not result [ 1 ] then
43669: LD_VAR 0 2
43673: PUSH
43674: LD_INT 1
43676: ARRAY
43677: NOT
43678: IFFALSE 43698
// result := Delete ( result , 1 ) ;
43680: LD_ADDR_VAR 0 2
43684: PUSH
43685: LD_VAR 0 2
43689: PPUSH
43690: LD_INT 1
43692: PPUSH
43693: CALL_OW 3
43697: ST_TO_ADDR
// end ;
43698: LD_VAR 0 2
43702: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43703: LD_INT 0
43705: PPUSH
43706: PPUSH
43707: PPUSH
43708: PPUSH
// sibRocketRange := 25 ;
43709: LD_ADDR_VAR 0 6
43713: PUSH
43714: LD_INT 25
43716: ST_TO_ADDR
// result := false ;
43717: LD_ADDR_VAR 0 4
43721: PUSH
43722: LD_INT 0
43724: ST_TO_ADDR
// for i := 0 to 5 do
43725: LD_ADDR_VAR 0 5
43729: PUSH
43730: DOUBLE
43731: LD_INT 0
43733: DEC
43734: ST_TO_ADDR
43735: LD_INT 5
43737: PUSH
43738: FOR_TO
43739: IFFALSE 43806
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43741: LD_VAR 0 1
43745: PPUSH
43746: LD_VAR 0 5
43750: PPUSH
43751: LD_VAR 0 6
43755: PPUSH
43756: CALL_OW 272
43760: PPUSH
43761: LD_VAR 0 2
43765: PPUSH
43766: LD_VAR 0 5
43770: PPUSH
43771: LD_VAR 0 6
43775: PPUSH
43776: CALL_OW 273
43780: PPUSH
43781: LD_VAR 0 3
43785: PPUSH
43786: CALL_OW 309
43790: IFFALSE 43804
// begin result := true ;
43792: LD_ADDR_VAR 0 4
43796: PUSH
43797: LD_INT 1
43799: ST_TO_ADDR
// exit ;
43800: POP
43801: POP
43802: GO 43808
// end ;
43804: GO 43738
43806: POP
43807: POP
// end ;
43808: LD_VAR 0 4
43812: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43813: LD_INT 0
43815: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43816: LD_VAR 0 1
43820: PPUSH
43821: LD_VAR 0 2
43825: PPUSH
43826: LD_INT 0
43828: PPUSH
43829: LD_INT 0
43831: PPUSH
43832: LD_INT 1
43834: PPUSH
43835: LD_INT 0
43837: PPUSH
43838: CALL_OW 587
// end ;
43842: LD_VAR 0 3
43846: RET
// export function CenterOnNow ( unit ) ; begin
43847: LD_INT 0
43849: PPUSH
// result := IsInUnit ( unit ) ;
43850: LD_ADDR_VAR 0 2
43854: PUSH
43855: LD_VAR 0 1
43859: PPUSH
43860: CALL_OW 310
43864: ST_TO_ADDR
// if not result then
43865: LD_VAR 0 2
43869: NOT
43870: IFFALSE 43882
// result := unit ;
43872: LD_ADDR_VAR 0 2
43876: PUSH
43877: LD_VAR 0 1
43881: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43882: LD_VAR 0 1
43886: PPUSH
43887: CALL_OW 87
// end ;
43891: LD_VAR 0 2
43895: RET
// export function ComMoveHex ( unit , hex ) ; begin
43896: LD_INT 0
43898: PPUSH
// if not hex then
43899: LD_VAR 0 2
43903: NOT
43904: IFFALSE 43908
// exit ;
43906: GO 43961
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43908: LD_VAR 0 2
43912: PUSH
43913: LD_INT 1
43915: ARRAY
43916: PPUSH
43917: LD_VAR 0 2
43921: PUSH
43922: LD_INT 2
43924: ARRAY
43925: PPUSH
43926: CALL_OW 428
43930: IFFALSE 43934
// exit ;
43932: GO 43961
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43934: LD_VAR 0 1
43938: PPUSH
43939: LD_VAR 0 2
43943: PUSH
43944: LD_INT 1
43946: ARRAY
43947: PPUSH
43948: LD_VAR 0 2
43952: PUSH
43953: LD_INT 2
43955: ARRAY
43956: PPUSH
43957: CALL_OW 111
// end ;
43961: LD_VAR 0 3
43965: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43966: LD_INT 0
43968: PPUSH
43969: PPUSH
43970: PPUSH
// if not unit or not enemy then
43971: LD_VAR 0 1
43975: NOT
43976: PUSH
43977: LD_VAR 0 2
43981: NOT
43982: OR
43983: IFFALSE 43987
// exit ;
43985: GO 44111
// x := GetX ( enemy ) ;
43987: LD_ADDR_VAR 0 4
43991: PUSH
43992: LD_VAR 0 2
43996: PPUSH
43997: CALL_OW 250
44001: ST_TO_ADDR
// y := GetY ( enemy ) ;
44002: LD_ADDR_VAR 0 5
44006: PUSH
44007: LD_VAR 0 2
44011: PPUSH
44012: CALL_OW 251
44016: ST_TO_ADDR
// if ValidHex ( x , y ) then
44017: LD_VAR 0 4
44021: PPUSH
44022: LD_VAR 0 5
44026: PPUSH
44027: CALL_OW 488
44031: IFFALSE 44111
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44033: LD_VAR 0 2
44037: PPUSH
44038: CALL_OW 247
44042: PUSH
44043: LD_INT 3
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: IN
44053: PUSH
44054: LD_VAR 0 1
44058: PPUSH
44059: CALL_OW 255
44063: PPUSH
44064: LD_VAR 0 2
44068: PPUSH
44069: CALL_OW 292
44073: OR
44074: IFFALSE 44092
// ComAttackUnit ( unit , enemy ) else
44076: LD_VAR 0 1
44080: PPUSH
44081: LD_VAR 0 2
44085: PPUSH
44086: CALL_OW 115
44090: GO 44111
// ComAgressiveMove ( unit , x , y ) ;
44092: LD_VAR 0 1
44096: PPUSH
44097: LD_VAR 0 4
44101: PPUSH
44102: LD_VAR 0 5
44106: PPUSH
44107: CALL_OW 114
// end ;
44111: LD_VAR 0 3
44115: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44116: LD_INT 0
44118: PPUSH
44119: PPUSH
44120: PPUSH
// list := AreaToList ( area , 0 ) ;
44121: LD_ADDR_VAR 0 5
44125: PUSH
44126: LD_VAR 0 1
44130: PPUSH
44131: LD_INT 0
44133: PPUSH
44134: CALL_OW 517
44138: ST_TO_ADDR
// if not list then
44139: LD_VAR 0 5
44143: NOT
44144: IFFALSE 44148
// exit ;
44146: GO 44278
// if all then
44148: LD_VAR 0 2
44152: IFFALSE 44240
// begin for i := 1 to list [ 1 ] do
44154: LD_ADDR_VAR 0 4
44158: PUSH
44159: DOUBLE
44160: LD_INT 1
44162: DEC
44163: ST_TO_ADDR
44164: LD_VAR 0 5
44168: PUSH
44169: LD_INT 1
44171: ARRAY
44172: PUSH
44173: FOR_TO
44174: IFFALSE 44236
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44176: LD_ADDR_VAR 0 3
44180: PUSH
44181: LD_VAR 0 3
44185: PPUSH
44186: LD_VAR 0 3
44190: PUSH
44191: LD_INT 1
44193: PLUS
44194: PPUSH
44195: LD_VAR 0 5
44199: PUSH
44200: LD_INT 1
44202: ARRAY
44203: PUSH
44204: LD_VAR 0 4
44208: ARRAY
44209: PUSH
44210: LD_VAR 0 5
44214: PUSH
44215: LD_INT 2
44217: ARRAY
44218: PUSH
44219: LD_VAR 0 4
44223: ARRAY
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PPUSH
44229: CALL_OW 1
44233: ST_TO_ADDR
44234: GO 44173
44236: POP
44237: POP
// exit ;
44238: GO 44278
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44240: LD_ADDR_VAR 0 3
44244: PUSH
44245: LD_VAR 0 5
44249: PUSH
44250: LD_INT 1
44252: ARRAY
44253: PUSH
44254: LD_INT 1
44256: ARRAY
44257: PUSH
44258: LD_VAR 0 5
44262: PUSH
44263: LD_INT 2
44265: ARRAY
44266: PUSH
44267: LD_INT 1
44269: ARRAY
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: EMPTY
44276: LIST
44277: ST_TO_ADDR
// end ;
44278: LD_VAR 0 3
44282: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44283: LD_INT 0
44285: PPUSH
44286: PPUSH
// list := AreaToList ( area , 0 ) ;
44287: LD_ADDR_VAR 0 4
44291: PUSH
44292: LD_VAR 0 1
44296: PPUSH
44297: LD_INT 0
44299: PPUSH
44300: CALL_OW 517
44304: ST_TO_ADDR
// if not list then
44305: LD_VAR 0 4
44309: NOT
44310: IFFALSE 44314
// exit ;
44312: GO 44355
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44314: LD_ADDR_VAR 0 3
44318: PUSH
44319: LD_VAR 0 4
44323: PUSH
44324: LD_INT 1
44326: ARRAY
44327: PUSH
44328: LD_INT 1
44330: ARRAY
44331: PUSH
44332: LD_VAR 0 4
44336: PUSH
44337: LD_INT 2
44339: ARRAY
44340: PUSH
44341: LD_INT 1
44343: ARRAY
44344: PUSH
44345: LD_VAR 0 2
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: LIST
44354: ST_TO_ADDR
// end ;
44355: LD_VAR 0 3
44359: RET
// export function First ( array ) ; begin
44360: LD_INT 0
44362: PPUSH
// if not array then
44363: LD_VAR 0 1
44367: NOT
44368: IFFALSE 44372
// exit ;
44370: GO 44386
// result := array [ 1 ] ;
44372: LD_ADDR_VAR 0 2
44376: PUSH
44377: LD_VAR 0 1
44381: PUSH
44382: LD_INT 1
44384: ARRAY
44385: ST_TO_ADDR
// end ;
44386: LD_VAR 0 2
44390: RET
// export function Last ( array ) ; begin
44391: LD_INT 0
44393: PPUSH
// if not array then
44394: LD_VAR 0 1
44398: NOT
44399: IFFALSE 44403
// exit ;
44401: GO 44419
// result := array [ array ] ;
44403: LD_ADDR_VAR 0 2
44407: PUSH
44408: LD_VAR 0 1
44412: PUSH
44413: LD_VAR 0 1
44417: ARRAY
44418: ST_TO_ADDR
// end ;
44419: LD_VAR 0 2
44423: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44424: LD_INT 0
44426: PPUSH
44427: PPUSH
// result := [ ] ;
44428: LD_ADDR_VAR 0 5
44432: PUSH
44433: EMPTY
44434: ST_TO_ADDR
// if not array then
44435: LD_VAR 0 1
44439: NOT
44440: IFFALSE 44444
// exit ;
44442: GO 44556
// for i := 1 to array do
44444: LD_ADDR_VAR 0 6
44448: PUSH
44449: DOUBLE
44450: LD_INT 1
44452: DEC
44453: ST_TO_ADDR
44454: LD_VAR 0 1
44458: PUSH
44459: FOR_TO
44460: IFFALSE 44554
// if array [ i ] [ index ] = value then
44462: LD_VAR 0 1
44466: PUSH
44467: LD_VAR 0 6
44471: ARRAY
44472: PUSH
44473: LD_VAR 0 2
44477: ARRAY
44478: PUSH
44479: LD_VAR 0 3
44483: EQUAL
44484: IFFALSE 44552
// begin if indexColumn then
44486: LD_VAR 0 4
44490: IFFALSE 44526
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44492: LD_ADDR_VAR 0 5
44496: PUSH
44497: LD_VAR 0 5
44501: PPUSH
44502: LD_VAR 0 1
44506: PUSH
44507: LD_VAR 0 6
44511: ARRAY
44512: PUSH
44513: LD_VAR 0 4
44517: ARRAY
44518: PPUSH
44519: CALL 39894 0 2
44523: ST_TO_ADDR
44524: GO 44552
// result := Join ( result , array [ i ] ) ;
44526: LD_ADDR_VAR 0 5
44530: PUSH
44531: LD_VAR 0 5
44535: PPUSH
44536: LD_VAR 0 1
44540: PUSH
44541: LD_VAR 0 6
44545: ARRAY
44546: PPUSH
44547: CALL 39894 0 2
44551: ST_TO_ADDR
// end ;
44552: GO 44459
44554: POP
44555: POP
// end ;
44556: LD_VAR 0 5
44560: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44561: LD_INT 0
44563: PPUSH
44564: PPUSH
44565: PPUSH
// if btype = b_depot then
44566: LD_VAR 0 2
44570: PUSH
44571: LD_INT 0
44573: EQUAL
44574: IFFALSE 44586
// begin result := true ;
44576: LD_ADDR_VAR 0 3
44580: PUSH
44581: LD_INT 1
44583: ST_TO_ADDR
// exit ;
44584: GO 44702
// end ; pom := GetBase ( depot ) ;
44586: LD_ADDR_VAR 0 4
44590: PUSH
44591: LD_VAR 0 1
44595: PPUSH
44596: CALL_OW 274
44600: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44601: LD_ADDR_VAR 0 5
44605: PUSH
44606: LD_VAR 0 2
44610: PPUSH
44611: LD_VAR 0 1
44615: PPUSH
44616: CALL_OW 248
44620: PPUSH
44621: CALL_OW 450
44625: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44626: LD_ADDR_VAR 0 3
44630: PUSH
44631: LD_VAR 0 4
44635: PPUSH
44636: LD_INT 1
44638: PPUSH
44639: CALL_OW 275
44643: PUSH
44644: LD_VAR 0 5
44648: PUSH
44649: LD_INT 1
44651: ARRAY
44652: GREATEREQUAL
44653: PUSH
44654: LD_VAR 0 4
44658: PPUSH
44659: LD_INT 2
44661: PPUSH
44662: CALL_OW 275
44666: PUSH
44667: LD_VAR 0 5
44671: PUSH
44672: LD_INT 2
44674: ARRAY
44675: GREATEREQUAL
44676: AND
44677: PUSH
44678: LD_VAR 0 4
44682: PPUSH
44683: LD_INT 3
44685: PPUSH
44686: CALL_OW 275
44690: PUSH
44691: LD_VAR 0 5
44695: PUSH
44696: LD_INT 3
44698: ARRAY
44699: GREATEREQUAL
44700: AND
44701: ST_TO_ADDR
// end ;
44702: LD_VAR 0 3
44706: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44707: LD_INT 0
44709: PPUSH
// if not vehicles or not parkingPoint then
44710: LD_VAR 0 1
44714: NOT
44715: PUSH
44716: LD_VAR 0 2
44720: NOT
44721: OR
44722: IFFALSE 44726
// exit ;
44724: GO 44824
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44726: LD_ADDR_VAR 0 1
44730: PUSH
44731: LD_VAR 0 1
44735: PPUSH
44736: LD_INT 50
44738: PUSH
44739: EMPTY
44740: LIST
44741: PUSH
44742: LD_INT 3
44744: PUSH
44745: LD_INT 92
44747: PUSH
44748: LD_VAR 0 2
44752: PUSH
44753: LD_INT 1
44755: ARRAY
44756: PUSH
44757: LD_VAR 0 2
44761: PUSH
44762: LD_INT 2
44764: ARRAY
44765: PUSH
44766: LD_INT 8
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PPUSH
44783: CALL_OW 72
44787: ST_TO_ADDR
// if not vehicles then
44788: LD_VAR 0 1
44792: NOT
44793: IFFALSE 44797
// exit ;
44795: GO 44824
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44797: LD_VAR 0 1
44801: PPUSH
44802: LD_VAR 0 2
44806: PUSH
44807: LD_INT 1
44809: ARRAY
44810: PPUSH
44811: LD_VAR 0 2
44815: PUSH
44816: LD_INT 2
44818: ARRAY
44819: PPUSH
44820: CALL_OW 111
// end ;
44824: LD_VAR 0 3
44828: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44829: LD_INT 0
44831: PPUSH
44832: PPUSH
44833: PPUSH
// if not side or not area then
44834: LD_VAR 0 1
44838: NOT
44839: PUSH
44840: LD_VAR 0 2
44844: NOT
44845: OR
44846: IFFALSE 44850
// exit ;
44848: GO 44969
// tmp := AreaToList ( area , 0 ) ;
44850: LD_ADDR_VAR 0 5
44854: PUSH
44855: LD_VAR 0 2
44859: PPUSH
44860: LD_INT 0
44862: PPUSH
44863: CALL_OW 517
44867: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44868: LD_ADDR_VAR 0 4
44872: PUSH
44873: DOUBLE
44874: LD_INT 1
44876: DEC
44877: ST_TO_ADDR
44878: LD_VAR 0 5
44882: PUSH
44883: LD_INT 1
44885: ARRAY
44886: PUSH
44887: FOR_TO
44888: IFFALSE 44967
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44890: LD_VAR 0 5
44894: PUSH
44895: LD_INT 1
44897: ARRAY
44898: PUSH
44899: LD_VAR 0 4
44903: ARRAY
44904: PPUSH
44905: LD_VAR 0 5
44909: PUSH
44910: LD_INT 2
44912: ARRAY
44913: PUSH
44914: LD_VAR 0 4
44918: ARRAY
44919: PPUSH
44920: CALL_OW 351
44924: IFFALSE 44965
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44926: LD_VAR 0 5
44930: PUSH
44931: LD_INT 1
44933: ARRAY
44934: PUSH
44935: LD_VAR 0 4
44939: ARRAY
44940: PPUSH
44941: LD_VAR 0 5
44945: PUSH
44946: LD_INT 2
44948: ARRAY
44949: PUSH
44950: LD_VAR 0 4
44954: ARRAY
44955: PPUSH
44956: LD_VAR 0 1
44960: PPUSH
44961: CALL_OW 244
// end ;
44965: GO 44887
44967: POP
44968: POP
// end ; end_of_file
44969: LD_VAR 0 3
44973: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpDisplayStrings , mpGameActive ; export function InitMultiplayer ; var i ; begin
44974: LD_INT 0
44976: PPUSH
44977: PPUSH
// disable ( mpActive ) ;
44978: LD_INT 100
44980: DISABLE_MARKED
// disable ( mpWin ) ;
44981: LD_INT 101
44983: DISABLE_MARKED
// disable ( mpLose ) ;
44984: LD_INT 102
44986: DISABLE_MARKED
// mpGameType := 0 ;
44987: LD_ADDR_EXP 1
44991: PUSH
44992: LD_INT 0
44994: ST_TO_ADDR
// mpGameSettings := [ ] ;
44995: LD_ADDR_EXP 4
44999: PUSH
45000: EMPTY
45001: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45002: LD_ADDR_EXP 2
45006: PUSH
45007: EMPTY
45008: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45009: LD_ADDR_EXP 3
45013: PUSH
45014: EMPTY
45015: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45016: LD_ADDR_EXP 27
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: LD_INT 2
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45031: LD_ADDR_EXP 10
45035: PUSH
45036: EMPTY
45037: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45038: LD_ADDR_EXP 11
45042: PUSH
45043: EMPTY
45044: ST_TO_ADDR
// mpDepots := [ ] ;
45045: LD_ADDR_EXP 12
45049: PUSH
45050: EMPTY
45051: ST_TO_ADDR
// mpBuildings := [ ] ;
45052: LD_ADDR_EXP 15
45056: PUSH
45057: EMPTY
45058: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45059: LD_ADDR_EXP 16
45063: PUSH
45064: EMPTY
45065: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45066: LD_ADDR_EXP 17
45070: PUSH
45071: EMPTY
45072: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45073: LD_ADDR_EXP 18
45077: PUSH
45078: EMPTY
45079: ST_TO_ADDR
// mpStartingResources := [ ] ;
45080: LD_ADDR_EXP 13
45084: PUSH
45085: EMPTY
45086: ST_TO_ADDR
// mpStartPos := [ ] ;
45087: LD_ADDR_EXP 19
45091: PUSH
45092: EMPTY
45093: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45094: LD_ADDR_EXP 20
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45103: LD_ADDR_EXP 21
45107: PUSH
45108: EMPTY
45109: ST_TO_ADDR
// mpApemans := [ ] ;
45110: LD_ADDR_EXP 28
45114: PUSH
45115: EMPTY
45116: ST_TO_ADDR
// mpApemansArea := [ ] ;
45117: LD_ADDR_EXP 29
45121: PUSH
45122: EMPTY
45123: ST_TO_ADDR
// mpRespawn := [ ] ;
45124: LD_ADDR_EXP 30
45128: PUSH
45129: EMPTY
45130: ST_TO_ADDR
// mpKingArea := 0 ;
45131: LD_ADDR_EXP 31
45135: PUSH
45136: LD_INT 0
45138: ST_TO_ADDR
// mpPoints := [ ] ;
45139: LD_ADDR_EXP 32
45143: PUSH
45144: EMPTY
45145: ST_TO_ADDR
// mpShipments := 0 ;
45146: LD_ADDR_EXP 25
45150: PUSH
45151: LD_INT 0
45153: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45154: LD_ADDR_EXP 23
45158: PUSH
45159: LD_INT 3
45161: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45162: LD_ADDR_EXP 22
45166: PUSH
45167: LD_INT 15
45169: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45170: LD_ADDR_EXP 33
45174: PUSH
45175: LD_INT 0
45177: ST_TO_ADDR
// mpGameActive := false ;
45178: LD_ADDR_EXP 34
45182: PUSH
45183: LD_INT 0
45185: ST_TO_ADDR
// for i := 1 to 32 do
45186: LD_ADDR_VAR 0 2
45190: PUSH
45191: DOUBLE
45192: LD_INT 1
45194: DEC
45195: ST_TO_ADDR
45196: LD_INT 32
45198: PUSH
45199: FOR_TO
45200: IFFALSE 45227
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
45202: LD_ADDR_EXP 4
45206: PUSH
45207: LD_EXP 4
45211: PPUSH
45212: LD_VAR 0 2
45216: PPUSH
45217: LD_INT 0
45219: PPUSH
45220: CALL_OW 1
45224: ST_TO_ADDR
45225: GO 45199
45227: POP
45228: POP
// end ;
45229: LD_VAR 0 1
45233: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
45234: LD_INT 0
45236: PPUSH
45237: PPUSH
45238: PPUSH
45239: PPUSH
45240: PPUSH
45241: PPUSH
45242: PPUSH
45243: PPUSH
45244: PPUSH
45245: PPUSH
45246: PPUSH
45247: PPUSH
45248: PPUSH
45249: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
45250: LD_ADDR_VAR 0 14
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: LD_INT 2
45260: PUSH
45261: LD_INT 3
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: LIST
45268: ST_TO_ADDR
// for i in gameTypes do
45269: LD_ADDR_VAR 0 2
45273: PUSH
45274: LD_VAR 0 14
45278: PUSH
45279: FOR_IN
45280: IFFALSE 45289
// disable ( i ) ;
45282: LD_VAR 0 2
45286: DISABLE_MARKED
45287: GO 45279
45289: POP
45290: POP
// if Multiplayer then
45291: LD_OWVAR 4
45295: IFFALSE 45479
// begin mpGameType := mp_game_type ;
45297: LD_ADDR_EXP 1
45301: PUSH
45302: LD_OWVAR 6
45306: ST_TO_ADDR
// your_side := mp_player_side ;
45307: LD_ADDR_OWVAR 2
45311: PUSH
45312: LD_OWVAR 7
45316: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
45317: LD_ADDR_EXP 5
45321: PUSH
45322: LD_OWVAR 17
45326: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
45327: LD_ADDR_EXP 6
45331: PUSH
45332: LD_OWVAR 15
45336: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
45337: LD_ADDR_EXP 7
45341: PUSH
45342: LD_OWVAR 16
45346: ST_TO_ADDR
// mpTeams := mp_teams ;
45347: LD_ADDR_EXP 8
45351: PUSH
45352: LD_OWVAR 12
45356: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
45357: LD_ADDR_VAR 0 2
45361: PUSH
45362: DOUBLE
45363: LD_INT 1
45365: DEC
45366: ST_TO_ADDR
45367: LD_EXP 2
45371: PPUSH
45372: CALL 4305 0 1
45376: PUSH
45377: FOR_TO
45378: IFFALSE 45454
// begin setting := mpGameSettingsKeys [ i ] ;
45380: LD_ADDR_VAR 0 12
45384: PUSH
45385: LD_EXP 2
45389: PUSH
45390: LD_VAR 0 2
45394: ARRAY
45395: ST_TO_ADDR
// if setting then
45396: LD_VAR 0 12
45400: IFFALSE 45452
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
45402: LD_ADDR_EXP 4
45406: PUSH
45407: LD_EXP 4
45411: PPUSH
45412: LD_VAR 0 2
45416: PPUSH
45417: LD_EXP 3
45421: PUSH
45422: LD_VAR 0 2
45426: ARRAY
45427: PUSH
45428: LD_VAR 0 2
45432: PUSH
45433: LD_INT 1
45435: MINUS
45436: PPUSH
45437: CALL_OW 426
45441: PUSH
45442: LD_INT 1
45444: PLUS
45445: ARRAY
45446: PPUSH
45447: CALL_OW 1
45451: ST_TO_ADDR
// end ;
45452: GO 45377
45454: POP
45455: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
45456: LD_ADDR_EXP 9
45460: PUSH
45461: LD_EXP 6
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: DIFF
45472: PUSH
45473: LD_INT 1
45475: GREATER
45476: ST_TO_ADDR
// end else
45477: GO 45479
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
45479: LD_EXP 1
45483: PPUSH
45484: CALL 804 0 1
// if Count ( mpMarkedAreas ) then
45488: LD_EXP 16
45492: PPUSH
45493: CALL 4305 0 1
45497: IFFALSE 45528
// begin for i in mpMarkedAreas do
45499: LD_ADDR_VAR 0 2
45503: PUSH
45504: LD_EXP 16
45508: PUSH
45509: FOR_IN
45510: IFFALSE 45526
// SetAreaMapShow ( i , 0 ) ;
45512: LD_VAR 0 2
45516: PPUSH
45517: LD_INT 0
45519: PPUSH
45520: CALL_OW 424
45524: GO 45509
45526: POP
45527: POP
// end ; for i := 1 to 8 do
45528: LD_ADDR_VAR 0 2
45532: PUSH
45533: DOUBLE
45534: LD_INT 1
45536: DEC
45537: ST_TO_ADDR
45538: LD_INT 8
45540: PUSH
45541: FOR_TO
45542: IFFALSE 46641
// begin if not mpSidePositions [ i ] then
45544: LD_EXP 5
45548: PUSH
45549: LD_VAR 0 2
45553: ARRAY
45554: NOT
45555: IFFALSE 45559
// continue ;
45557: GO 45541
// side := i ;
45559: LD_ADDR_VAR 0 7
45563: PUSH
45564: LD_VAR 0 2
45568: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
45569: LD_ADDR_VAR 0 9
45573: PUSH
45574: LD_EXP 7
45578: PUSH
45579: LD_VAR 0 2
45583: ARRAY
45584: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
45585: LD_ADDR_VAR 0 8
45589: PUSH
45590: LD_EXP 5
45594: PUSH
45595: LD_VAR 0 2
45599: ARRAY
45600: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
45601: LD_EXP 10
45605: PPUSH
45606: CALL 4305 0 1
45610: IFFALSE 45687
// begin for j in mpOilDeposits [ pos ] do
45612: LD_ADDR_VAR 0 3
45616: PUSH
45617: LD_EXP 10
45621: PUSH
45622: LD_VAR 0 8
45626: ARRAY
45627: PUSH
45628: FOR_IN
45629: IFFALSE 45685
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
45631: LD_VAR 0 3
45635: PUSH
45636: LD_INT 1
45638: ARRAY
45639: PPUSH
45640: LD_VAR 0 3
45644: PUSH
45645: LD_INT 2
45647: ARRAY
45648: PPUSH
45649: LD_INT 2
45651: PPUSH
45652: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
45656: LD_VAR 0 3
45660: PUSH
45661: LD_INT 1
45663: ARRAY
45664: PPUSH
45665: LD_VAR 0 3
45669: PUSH
45670: LD_INT 2
45672: ARRAY
45673: PPUSH
45674: LD_VAR 0 7
45678: PPUSH
45679: CALL_OW 441
// end ;
45683: GO 45628
45685: POP
45686: POP
// end ; if Count ( mpSibDeposits ) then
45687: LD_EXP 11
45691: PPUSH
45692: CALL 4305 0 1
45696: IFFALSE 45773
// begin for j in mpSibDeposits [ pos ] do
45698: LD_ADDR_VAR 0 3
45702: PUSH
45703: LD_EXP 11
45707: PUSH
45708: LD_VAR 0 8
45712: ARRAY
45713: PUSH
45714: FOR_IN
45715: IFFALSE 45771
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
45717: LD_VAR 0 3
45721: PUSH
45722: LD_INT 1
45724: ARRAY
45725: PPUSH
45726: LD_VAR 0 3
45730: PUSH
45731: LD_INT 2
45733: ARRAY
45734: PPUSH
45735: LD_INT 3
45737: PPUSH
45738: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
45742: LD_VAR 0 3
45746: PUSH
45747: LD_INT 1
45749: ARRAY
45750: PPUSH
45751: LD_VAR 0 3
45755: PUSH
45756: LD_INT 2
45758: ARRAY
45759: PPUSH
45760: LD_VAR 0 7
45764: PPUSH
45765: CALL_OW 441
// end ;
45769: GO 45714
45771: POP
45772: POP
// end ; InitBc ;
45773: CALL_OW 21
// InitUc ;
45777: CALL_OW 18
// uc_side := side ;
45781: LD_ADDR_OWVAR 20
45785: PUSH
45786: LD_VAR 0 7
45790: ST_TO_ADDR
// uc_nation := nation ;
45791: LD_ADDR_OWVAR 21
45795: PUSH
45796: LD_VAR 0 9
45800: ST_TO_ADDR
// if Count ( mpDepots ) then
45801: LD_EXP 12
45805: PPUSH
45806: CALL 4305 0 1
45810: IFFALSE 45966
// begin bc_level := 0 ;
45812: LD_ADDR_OWVAR 43
45816: PUSH
45817: LD_INT 0
45819: ST_TO_ADDR
// bc_type := b_depot ;
45820: LD_ADDR_OWVAR 42
45824: PUSH
45825: LD_INT 0
45827: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
45828: LD_ADDR_VAR 0 4
45832: PUSH
45833: LD_EXP 12
45837: PUSH
45838: LD_VAR 0 8
45842: ARRAY
45843: PUSH
45844: LD_INT 1
45846: ARRAY
45847: PPUSH
45848: LD_EXP 12
45852: PUSH
45853: LD_VAR 0 8
45857: ARRAY
45858: PUSH
45859: LD_INT 2
45861: ARRAY
45862: PPUSH
45863: LD_EXP 12
45867: PUSH
45868: LD_VAR 0 8
45872: ARRAY
45873: PUSH
45874: LD_INT 3
45876: ARRAY
45877: PPUSH
45878: CALL_OW 47
45882: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
45883: LD_VAR 0 4
45887: PPUSH
45888: LD_STRING @
45890: PUSH
45891: LD_VAR 0 7
45895: STR
45896: PPUSH
45897: CALL_OW 500
// if Count ( mpStartingResources ) then
45901: LD_EXP 13
45905: PPUSH
45906: CALL 4305 0 1
45910: IFFALSE 45964
// begin for j := 1 to mpStartingResources do
45912: LD_ADDR_VAR 0 3
45916: PUSH
45917: DOUBLE
45918: LD_INT 1
45920: DEC
45921: ST_TO_ADDR
45922: LD_EXP 13
45926: PUSH
45927: FOR_TO
45928: IFFALSE 45962
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
45930: LD_VAR 0 4
45934: PPUSH
45935: CALL_OW 274
45939: PPUSH
45940: LD_VAR 0 3
45944: PPUSH
45945: LD_EXP 13
45949: PUSH
45950: LD_VAR 0 3
45954: ARRAY
45955: PPUSH
45956: CALL_OW 277
45960: GO 45927
45962: POP
45963: POP
// end ; end else
45964: GO 46113
// if Count ( mpStartingResources ) then
45966: LD_EXP 13
45970: PPUSH
45971: CALL 4305 0 1
45975: IFFALSE 46113
// begin for j := 1 to mpStartingResources do
45977: LD_ADDR_VAR 0 3
45981: PUSH
45982: DOUBLE
45983: LD_INT 1
45985: DEC
45986: ST_TO_ADDR
45987: LD_EXP 13
45991: PUSH
45992: FOR_TO
45993: IFFALSE 46111
// begin resources := mpStartingResources [ j ] ;
45995: LD_ADDR_VAR 0 13
45999: PUSH
46000: LD_EXP 13
46004: PUSH
46005: LD_VAR 0 3
46009: ARRAY
46010: ST_TO_ADDR
// repeat if resources >= 50 then
46011: LD_VAR 0 13
46015: PUSH
46016: LD_INT 50
46018: GREATEREQUAL
46019: IFFALSE 46065
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46021: LD_VAR 0 3
46025: PPUSH
46026: LD_INT 5
46028: PPUSH
46029: LD_VAR 0 5
46033: PPUSH
46034: LD_VAR 0 6
46038: PPUSH
46039: LD_INT 4
46041: PPUSH
46042: LD_INT 0
46044: PPUSH
46045: CALL_OW 60
// resources := resources - 50 ;
46049: LD_ADDR_VAR 0 13
46053: PUSH
46054: LD_VAR 0 13
46058: PUSH
46059: LD_INT 50
46061: MINUS
46062: ST_TO_ADDR
// end else
46063: GO 46099
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46065: LD_VAR 0 3
46069: PPUSH
46070: LD_VAR 0 13
46074: PUSH
46075: LD_INT 10
46077: DIV
46078: PPUSH
46079: LD_VAR 0 5
46083: PPUSH
46084: LD_VAR 0 6
46088: PPUSH
46089: LD_INT 4
46091: PPUSH
46092: LD_INT 0
46094: PPUSH
46095: CALL_OW 60
// until resources <= 0 ;
46099: LD_VAR 0 13
46103: PUSH
46104: LD_INT 0
46106: LESSEQUAL
46107: IFFALSE 46011
// end ;
46109: GO 45992
46111: POP
46112: POP
// end ; if Count ( mpBuildings ) then
46113: LD_EXP 15
46117: PPUSH
46118: CALL 4305 0 1
46122: IFFALSE 46200
// begin for j in mpBuildings [ pos ] do
46124: LD_ADDR_VAR 0 3
46128: PUSH
46129: LD_EXP 15
46133: PUSH
46134: LD_VAR 0 8
46138: ARRAY
46139: PUSH
46140: FOR_IN
46141: IFFALSE 46198
// begin bc_level := 0 ;
46143: LD_ADDR_OWVAR 43
46147: PUSH
46148: LD_INT 0
46150: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46151: LD_ADDR_OWVAR 42
46155: PUSH
46156: LD_VAR 0 3
46160: PUSH
46161: LD_INT 1
46163: ARRAY
46164: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46165: LD_VAR 0 3
46169: PUSH
46170: LD_INT 2
46172: ARRAY
46173: PPUSH
46174: LD_VAR 0 3
46178: PUSH
46179: LD_INT 3
46181: ARRAY
46182: PPUSH
46183: LD_VAR 0 3
46187: PUSH
46188: LD_INT 4
46190: ARRAY
46191: PPUSH
46192: CALL_OW 47
// end ;
46196: GO 46140
46198: POP
46199: POP
// end ; if mpBattleFlag > - 1 then
46200: LD_EXP 20
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: GREATER
46209: IFFALSE 46368
// begin x := mpStartPos [ pos ] [ 1 ] ;
46211: LD_ADDR_VAR 0 5
46215: PUSH
46216: LD_EXP 19
46220: PUSH
46221: LD_VAR 0 8
46225: ARRAY
46226: PUSH
46227: LD_INT 1
46229: ARRAY
46230: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
46231: LD_ADDR_VAR 0 6
46235: PUSH
46236: LD_EXP 19
46240: PUSH
46241: LD_VAR 0 8
46245: ARRAY
46246: PUSH
46247: LD_INT 2
46249: ARRAY
46250: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
46251: LD_VAR 0 5
46255: PPUSH
46256: LD_VAR 0 6
46260: PPUSH
46261: LD_INT 12
46263: PPUSH
46264: LD_INT 2
46266: PPUSH
46267: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
46271: LD_ADDR_EXP 21
46275: PUSH
46276: LD_EXP 21
46280: PPUSH
46281: LD_VAR 0 7
46285: PPUSH
46286: LD_VAR 0 7
46290: PPUSH
46291: LD_VAR 0 5
46295: PPUSH
46296: LD_VAR 0 6
46300: PPUSH
46301: LD_INT 1
46303: PUSH
46304: LD_INT 100
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: LD_INT 70
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 3
46323: PUSH
46324: LD_INT 40
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 10
46333: PUSH
46334: LD_INT 25
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 20
46343: PUSH
46344: LD_INT 100
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: PPUSH
46358: CALL_OW 418
46362: PPUSH
46363: CALL_OW 1
46367: ST_TO_ADDR
// end ; if mpApemans then
46368: LD_EXP 28
46372: IFFALSE 46451
// begin for j := 1 to mpApemans do
46374: LD_ADDR_VAR 0 3
46378: PUSH
46379: DOUBLE
46380: LD_INT 1
46382: DEC
46383: ST_TO_ADDR
46384: LD_EXP 28
46388: PUSH
46389: FOR_TO
46390: IFFALSE 46449
// begin PrepareApeman ( - 5 ) ;
46392: LD_INT 5
46394: NEG
46395: PPUSH
46396: CALL 36162 0 1
// ape := CreateHuman ;
46400: LD_ADDR_VAR 0 10
46404: PUSH
46405: CALL_OW 44
46409: ST_TO_ADDR
// SetTag ( ape , side ) ;
46410: LD_VAR 0 10
46414: PPUSH
46415: LD_VAR 0 7
46419: PPUSH
46420: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ side ] , false ) ;
46424: LD_VAR 0 10
46428: PPUSH
46429: LD_EXP 29
46433: PUSH
46434: LD_VAR 0 7
46438: ARRAY
46439: PPUSH
46440: LD_INT 0
46442: PPUSH
46443: CALL_OW 49
// end ;
46447: GO 46389
46449: POP
46450: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
46451: LD_EXP 24
46455: PUSH
46456: LD_INT 20
46458: PPUSH
46459: LD_VAR 0 7
46463: PPUSH
46464: CALL_OW 321
46468: PUSH
46469: LD_INT 1
46471: EQUAL
46472: AND
46473: IFFALSE 46490
// SetTech ( tech_SibDet , side , state_researched ) ;
46475: LD_INT 20
46477: PPUSH
46478: LD_VAR 0 7
46482: PPUSH
46483: LD_INT 2
46485: PPUSH
46486: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
46490: LD_INT 24
46492: PPUSH
46493: LD_VAR 0 7
46497: PPUSH
46498: LD_INT 0
46500: PPUSH
46501: CALL_OW 322
// if mpSibBomb = 1 then
46505: LD_EXP 26
46509: PUSH
46510: LD_INT 1
46512: EQUAL
46513: IFFALSE 46532
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
46515: LD_INT 25
46517: PPUSH
46518: LD_VAR 0 7
46522: PPUSH
46523: LD_INT 1
46525: PPUSH
46526: CALL_OW 322
// end else
46530: GO 46547
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
46532: LD_INT 25
46534: PPUSH
46535: LD_VAR 0 7
46539: PPUSH
46540: LD_INT 0
46542: PPUSH
46543: CALL_OW 322
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
46547: LD_ADDR_VAR 0 11
46551: PUSH
46552: LD_VAR 0 7
46556: PPUSH
46557: LD_VAR 0 9
46561: PPUSH
46562: LD_EXP 22
46566: PPUSH
46567: LD_EXP 23
46571: PPUSH
46572: CALL 47053 0 4
46576: ST_TO_ADDR
// for j in team do
46577: LD_ADDR_VAR 0 3
46581: PUSH
46582: LD_VAR 0 11
46586: PUSH
46587: FOR_IN
46588: IFFALSE 46637
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 9 , false ) ;
46590: LD_VAR 0 3
46594: PPUSH
46595: LD_EXP 19
46599: PUSH
46600: LD_VAR 0 8
46604: ARRAY
46605: PUSH
46606: LD_INT 1
46608: ARRAY
46609: PPUSH
46610: LD_EXP 19
46614: PUSH
46615: LD_VAR 0 8
46619: ARRAY
46620: PUSH
46621: LD_INT 2
46623: ARRAY
46624: PPUSH
46625: LD_INT 9
46627: PPUSH
46628: LD_INT 0
46630: PPUSH
46631: CALL_OW 50
46635: GO 46587
46637: POP
46638: POP
// end ;
46639: GO 45541
46641: POP
46642: POP
// if not mpTeamGame then
46643: LD_EXP 9
46647: NOT
46648: IFFALSE 46746
// begin for i := 1 to 8 do
46650: LD_ADDR_VAR 0 2
46654: PUSH
46655: DOUBLE
46656: LD_INT 1
46658: DEC
46659: ST_TO_ADDR
46660: LD_INT 8
46662: PUSH
46663: FOR_TO
46664: IFFALSE 46742
// for j := 1 to 8 do
46666: LD_ADDR_VAR 0 3
46670: PUSH
46671: DOUBLE
46672: LD_INT 1
46674: DEC
46675: ST_TO_ADDR
46676: LD_INT 8
46678: PUSH
46679: FOR_TO
46680: IFFALSE 46738
// if i <> j then
46682: LD_VAR 0 2
46686: PUSH
46687: LD_VAR 0 3
46691: NONEQUAL
46692: IFFALSE 46716
// SetAttitude ( i , j , att_neutral , true ) else
46694: LD_VAR 0 2
46698: PPUSH
46699: LD_VAR 0 3
46703: PPUSH
46704: LD_INT 0
46706: PPUSH
46707: LD_INT 1
46709: PPUSH
46710: CALL_OW 80
46714: GO 46736
// SetAttitude ( i , j , att_friend , true ) ;
46716: LD_VAR 0 2
46720: PPUSH
46721: LD_VAR 0 3
46725: PPUSH
46726: LD_INT 1
46728: PPUSH
46729: LD_INT 1
46731: PPUSH
46732: CALL_OW 80
46736: GO 46679
46738: POP
46739: POP
46740: GO 46663
46742: POP
46743: POP
// end else
46744: GO 46815
// begin if mpSharedVision then
46746: LD_EXP 14
46750: IFFALSE 46815
// begin for i in mpTeams do
46752: LD_ADDR_VAR 0 2
46756: PUSH
46757: LD_EXP 8
46761: PUSH
46762: FOR_IN
46763: IFFALSE 46813
// for j := 2 to i do
46765: LD_ADDR_VAR 0 3
46769: PUSH
46770: DOUBLE
46771: LD_INT 2
46773: DEC
46774: ST_TO_ADDR
46775: LD_VAR 0 2
46779: PUSH
46780: FOR_TO
46781: IFFALSE 46809
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
46783: LD_VAR 0 2
46787: PUSH
46788: LD_VAR 0 3
46792: ARRAY
46793: PPUSH
46794: LD_VAR 0 2
46798: PUSH
46799: LD_INT 1
46801: ARRAY
46802: PPUSH
46803: CALL_OW 343
46807: GO 46780
46809: POP
46810: POP
46811: GO 46762
46813: POP
46814: POP
// end ; end ; for i := 1 to 8 do
46815: LD_ADDR_VAR 0 2
46819: PUSH
46820: DOUBLE
46821: LD_INT 1
46823: DEC
46824: ST_TO_ADDR
46825: LD_INT 8
46827: PUSH
46828: FOR_TO
46829: IFFALSE 46919
// for j := 1 to 8 do
46831: LD_ADDR_VAR 0 3
46835: PUSH
46836: DOUBLE
46837: LD_INT 1
46839: DEC
46840: ST_TO_ADDR
46841: LD_INT 8
46843: PUSH
46844: FOR_TO
46845: IFFALSE 46915
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
46847: LD_EXP 6
46851: PUSH
46852: LD_VAR 0 2
46856: ARRAY
46857: PUSH
46858: LD_EXP 6
46862: PUSH
46863: LD_VAR 0 3
46867: ARRAY
46868: EQUAL
46869: IFFALSE 46893
// SetAttitude ( i , j , att_friend , true ) else
46871: LD_VAR 0 2
46875: PPUSH
46876: LD_VAR 0 3
46880: PPUSH
46881: LD_INT 1
46883: PPUSH
46884: LD_INT 1
46886: PPUSH
46887: CALL_OW 80
46891: GO 46913
// SetAttitude ( i , j , att_enemy , true ) ;
46893: LD_VAR 0 2
46897: PPUSH
46898: LD_VAR 0 3
46902: PPUSH
46903: LD_INT 2
46905: PPUSH
46906: LD_INT 1
46908: PPUSH
46909: CALL_OW 80
46913: GO 46844
46915: POP
46916: POP
46917: GO 46828
46919: POP
46920: POP
// music_nat := mpSideNations [ your_side ] ;
46921: LD_ADDR_OWVAR 71
46925: PUSH
46926: LD_EXP 7
46930: PUSH
46931: LD_OWVAR 2
46935: ARRAY
46936: ST_TO_ADDR
// if IAmSpec then
46937: CALL_OW 531
46941: IFFALSE 46982
// begin FogOff ( true ) ;
46943: LD_INT 1
46945: PPUSH
46946: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
46950: LD_EXP 27
46954: PUSH
46955: LD_INT 1
46957: ARRAY
46958: PUSH
46959: LD_INT 2
46961: DIV
46962: PPUSH
46963: LD_EXP 27
46967: PUSH
46968: LD_INT 2
46970: ARRAY
46971: PUSH
46972: LD_INT 2
46974: DIV
46975: PPUSH
46976: CALL_OW 86
// end else
46980: GO 47028
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
46982: LD_EXP 19
46986: PUSH
46987: LD_EXP 5
46991: PUSH
46992: LD_OWVAR 2
46996: ARRAY
46997: ARRAY
46998: PUSH
46999: LD_INT 1
47001: ARRAY
47002: PPUSH
47003: LD_EXP 19
47007: PUSH
47008: LD_EXP 5
47012: PUSH
47013: LD_OWVAR 2
47017: ARRAY
47018: ARRAY
47019: PUSH
47020: LD_INT 2
47022: ARRAY
47023: PPUSH
47024: CALL_OW 86
// end ; BeginBuildUp ;
47028: CALL 47592 0 0
// enable ( mpActive ) ;
47032: LD_INT 100
47034: ENABLE_MARKED
// enable ( mpGameType ) ;
47035: LD_EXP 1
47039: ENABLE_MARKED
// mpGameActive := true ;
47040: LD_ADDR_EXP 34
47044: PUSH
47045: LD_INT 1
47047: ST_TO_ADDR
// end ;
47048: LD_VAR 0 1
47052: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , d , class ; begin
47053: LD_INT 0
47055: PPUSH
47056: PPUSH
47057: PPUSH
47058: PPUSH
// result := [ ] ;
47059: LD_ADDR_VAR 0 5
47063: PUSH
47064: EMPTY
47065: ST_TO_ADDR
// class := class_soldier ;
47066: LD_ADDR_VAR 0 8
47070: PUSH
47071: LD_INT 1
47073: ST_TO_ADDR
// uc_side := side ;
47074: LD_ADDR_OWVAR 20
47078: PUSH
47079: LD_VAR 0 1
47083: ST_TO_ADDR
// uc_nation := nation ;
47084: LD_ADDR_OWVAR 21
47088: PUSH
47089: LD_VAR 0 2
47093: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
47094: LD_ADDR_OWVAR 26
47098: PUSH
47099: LD_OWVAR 19
47103: PUSH
47104: LD_VAR 0 1
47108: ARRAY
47109: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
47110: LD_INT 1
47112: PPUSH
47113: LD_INT 2
47115: PPUSH
47116: CALL_OW 12
47120: PPUSH
47121: LD_VAR 0 8
47125: PPUSH
47126: LD_VAR 0 4
47130: PUSH
47131: LD_INT 2
47133: PLUS
47134: PPUSH
47135: CALL_OW 380
// hc_importance := 105 ;
47139: LD_ADDR_OWVAR 32
47143: PUSH
47144: LD_INT 105
47146: ST_TO_ADDR
// if Multiplayer then
47147: LD_OWVAR 4
47151: IFFALSE 47191
// begin hc_gallery := MULTIAVATARS ;
47153: LD_ADDR_OWVAR 33
47157: PUSH
47158: LD_STRING MULTIAVATARS
47160: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
47161: LD_ADDR_OWVAR 34
47165: PUSH
47166: LD_VAR 0 1
47170: PPUSH
47171: CALL_OW 525
47175: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
47176: LD_ADDR_OWVAR 27
47180: PUSH
47181: LD_VAR 0 1
47185: PPUSH
47186: CALL_OW 526
47190: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
47191: LD_ADDR_VAR 0 5
47195: PUSH
47196: LD_VAR 0 5
47200: PPUSH
47201: CALL_OW 44
47205: PPUSH
47206: CALL 39894 0 2
47210: ST_TO_ADDR
// InitHc_All ( ) ;
47211: CALL_OW 584
// d := ( amount div 4 ) + 1 ;
47215: LD_ADDR_VAR 0 7
47219: PUSH
47220: LD_VAR 0 3
47224: PUSH
47225: LD_INT 4
47227: DIV
47228: PUSH
47229: LD_INT 1
47231: PLUS
47232: ST_TO_ADDR
// for i := 2 to amount do
47233: LD_ADDR_VAR 0 6
47237: PUSH
47238: DOUBLE
47239: LD_INT 2
47241: DEC
47242: ST_TO_ADDR
47243: LD_VAR 0 3
47247: PUSH
47248: FOR_TO
47249: IFFALSE 47321
// begin if i mod d = 0 then
47251: LD_VAR 0 6
47255: PUSH
47256: LD_VAR 0 7
47260: MOD
47261: PUSH
47262: LD_INT 0
47264: EQUAL
47265: IFFALSE 47282
// class := Inc ( class ) ;
47267: LD_ADDR_VAR 0 8
47271: PUSH
47272: LD_VAR 0 8
47276: PPUSH
47277: CALL 41255 0 1
47281: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
47282: LD_INT 0
47284: PPUSH
47285: LD_VAR 0 8
47289: PPUSH
47290: LD_VAR 0 4
47294: PPUSH
47295: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
47299: LD_ADDR_VAR 0 5
47303: PUSH
47304: LD_VAR 0 5
47308: PPUSH
47309: CALL_OW 44
47313: PPUSH
47314: CALL 39894 0 2
47318: ST_TO_ADDR
// end ;
47319: GO 47248
47321: POP
47322: POP
// end ;
47323: LD_VAR 0 5
47327: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
47328: LD_INT 0
47330: PPUSH
47331: PPUSH
// for i in mpBattleFlags do
47332: LD_ADDR_VAR 0 3
47336: PUSH
47337: LD_EXP 21
47341: PUSH
47342: FOR_IN
47343: IFFALSE 47420
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
47345: LD_VAR 0 3
47349: PPUSH
47350: LD_INT 1
47352: PUSH
47353: LD_VAR 0 1
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 2
47364: PUSH
47365: LD_VAR 0 1
47369: PUSH
47370: LD_REAL  7.00000000000000E-0001
47373: MUL
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 3
47381: PUSH
47382: LD_VAR 0 1
47386: PUSH
47387: LD_REAL  4.00000000000000E-0001
47390: MUL
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 20
47398: PUSH
47399: LD_VAR 0 1
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: PPUSH
47414: CALL_OW 423
47418: GO 47342
47420: POP
47421: POP
// end ;
47422: LD_VAR 0 2
47426: RET
// every 0 0$1 trigger mpActive do var i , strength ;
47427: LD_INT 100
47429: IFFALSE 47524
47431: GO 47433
47433: DISABLE
47434: LD_INT 0
47436: PPUSH
47437: PPUSH
// begin if mpBattleFlag <= 0 then
47438: LD_EXP 20
47442: PUSH
47443: LD_INT 0
47445: LESSEQUAL
47446: IFFALSE 47450
// exit ;
47448: GO 47524
// strength := 100 ;
47450: LD_ADDR_VAR 0 2
47454: PUSH
47455: LD_INT 100
47457: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
47458: LD_EXP 20
47462: PPUSH
47463: CALL_OW 67
// strength := Dec ( strength ) ;
47467: LD_ADDR_VAR 0 2
47471: PUSH
47472: LD_VAR 0 2
47476: PPUSH
47477: CALL 41277 0 1
47481: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
47482: LD_VAR 0 2
47486: PPUSH
47487: CALL 47328 0 1
// until not strength ;
47491: LD_VAR 0 2
47495: NOT
47496: IFFALSE 47458
// for i in mpBattleFlags do
47498: LD_ADDR_VAR 0 1
47502: PUSH
47503: LD_EXP 21
47507: PUSH
47508: FOR_IN
47509: IFFALSE 47522
// KillBattleFlag ( i ) ;
47511: LD_VAR 0 1
47515: PPUSH
47516: CALL_OW 419
47520: GO 47508
47522: POP
47523: POP
// end ;
47524: PPOPN 2
47526: END
// every 0 0$1 marked mpActive do var side ;
47527: GO 47529
47529: DISABLE
47530: LD_INT 0
47532: PPUSH
// begin if mpSibBomb <= 1 then
47533: LD_EXP 26
47537: PUSH
47538: LD_INT 1
47540: LESSEQUAL
47541: IFFALSE 47545
// exit ;
47543: GO 47589
// wait ( mpSibBomb ) ;
47545: LD_EXP 26
47549: PPUSH
47550: CALL_OW 67
// for side := 1 to 8 do
47554: LD_ADDR_VAR 0 1
47558: PUSH
47559: DOUBLE
47560: LD_INT 1
47562: DEC
47563: ST_TO_ADDR
47564: LD_INT 8
47566: PUSH
47567: FOR_TO
47568: IFFALSE 47587
// SetTech ( tech_SibFiss , side , state_enabled ) ;
47570: LD_INT 25
47572: PPUSH
47573: LD_VAR 0 1
47577: PPUSH
47578: LD_INT 1
47580: PPUSH
47581: CALL_OW 322
47585: GO 47567
47587: POP
47588: POP
// end ;
47589: PPOPN 1
47591: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
47592: LD_INT 0
47594: PPUSH
47595: PPUSH
47596: PPUSH
// mpBuildUpTimeDelay := 0 ;
47597: LD_ADDR_EXP 35
47601: PUSH
47602: LD_INT 0
47604: ST_TO_ADDR
// if not mpBuildUpTime then
47605: LD_EXP 18
47609: NOT
47610: IFFALSE 47614
// exit ;
47612: GO 47797
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
47614: LD_ADDR_EXP 35
47618: PUSH
47619: LD_INT 8400
47621: PUSH
47622: LD_INT 2100
47624: PUSH
47625: LD_EXP 18
47629: MUL
47630: PLUS
47631: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
47632: LD_ADDR_EXP 36
47636: PUSH
47637: LD_INT 1
47639: ST_TO_ADDR
// for i := 1 to 8 do
47640: LD_ADDR_VAR 0 2
47644: PUSH
47645: DOUBLE
47646: LD_INT 1
47648: DEC
47649: ST_TO_ADDR
47650: LD_INT 8
47652: PUSH
47653: FOR_TO
47654: IFFALSE 47795
// if mpSidePositions [ i ] then
47656: LD_EXP 5
47660: PUSH
47661: LD_VAR 0 2
47665: ARRAY
47666: IFFALSE 47793
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
47668: LD_EXP 17
47672: PUSH
47673: LD_EXP 5
47677: PUSH
47678: LD_VAR 0 2
47682: ARRAY
47683: ARRAY
47684: PPUSH
47685: LD_INT 5
47687: PPUSH
47688: CALL_OW 424
// for j := 1 to 8 do
47692: LD_ADDR_VAR 0 3
47696: PUSH
47697: DOUBLE
47698: LD_INT 1
47700: DEC
47701: ST_TO_ADDR
47702: LD_INT 8
47704: PUSH
47705: FOR_TO
47706: IFFALSE 47791
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
47708: LD_EXP 5
47712: PUSH
47713: LD_VAR 0 3
47717: ARRAY
47718: PUSH
47719: LD_EXP 6
47723: PUSH
47724: LD_VAR 0 2
47728: ARRAY
47729: PUSH
47730: LD_EXP 6
47734: PUSH
47735: LD_VAR 0 3
47739: ARRAY
47740: NONEQUAL
47741: PUSH
47742: LD_EXP 9
47746: NOT
47747: PUSH
47748: LD_VAR 0 2
47752: PUSH
47753: LD_VAR 0 3
47757: NONEQUAL
47758: AND
47759: OR
47760: AND
47761: IFFALSE 47789
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
47763: LD_VAR 0 3
47767: PPUSH
47768: LD_EXP 17
47772: PUSH
47773: LD_EXP 5
47777: PUSH
47778: LD_VAR 0 2
47782: ARRAY
47783: ARRAY
47784: PPUSH
47785: CALL_OW 333
47789: GO 47705
47791: POP
47792: POP
// end ;
47793: GO 47653
47795: POP
47796: POP
// end ;
47797: LD_VAR 0 1
47801: RET
// function EndBuildUp ; var i , j ; begin
47802: LD_INT 0
47804: PPUSH
47805: PPUSH
47806: PPUSH
// mpBuildUpTimeActive := false ;
47807: LD_ADDR_EXP 36
47811: PUSH
47812: LD_INT 0
47814: ST_TO_ADDR
// for i := 1 to 8 do
47815: LD_ADDR_VAR 0 2
47819: PUSH
47820: DOUBLE
47821: LD_INT 1
47823: DEC
47824: ST_TO_ADDR
47825: LD_INT 8
47827: PUSH
47828: FOR_TO
47829: IFFALSE 47970
// if mpSidePositions [ i ] then
47831: LD_EXP 5
47835: PUSH
47836: LD_VAR 0 2
47840: ARRAY
47841: IFFALSE 47968
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
47843: LD_EXP 17
47847: PUSH
47848: LD_EXP 5
47852: PUSH
47853: LD_VAR 0 2
47857: ARRAY
47858: ARRAY
47859: PPUSH
47860: LD_INT 0
47862: PPUSH
47863: CALL_OW 424
// for j := 1 to 8 do
47867: LD_ADDR_VAR 0 3
47871: PUSH
47872: DOUBLE
47873: LD_INT 1
47875: DEC
47876: ST_TO_ADDR
47877: LD_INT 8
47879: PUSH
47880: FOR_TO
47881: IFFALSE 47966
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
47883: LD_EXP 5
47887: PUSH
47888: LD_VAR 0 3
47892: ARRAY
47893: PUSH
47894: LD_EXP 6
47898: PUSH
47899: LD_VAR 0 2
47903: ARRAY
47904: PUSH
47905: LD_EXP 6
47909: PUSH
47910: LD_VAR 0 3
47914: ARRAY
47915: NONEQUAL
47916: PUSH
47917: LD_EXP 9
47921: NOT
47922: PUSH
47923: LD_VAR 0 2
47927: PUSH
47928: LD_VAR 0 3
47932: NONEQUAL
47933: AND
47934: OR
47935: AND
47936: IFFALSE 47964
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
47938: LD_VAR 0 3
47942: PPUSH
47943: LD_EXP 17
47947: PUSH
47948: LD_EXP 5
47952: PUSH
47953: LD_VAR 0 2
47957: ARRAY
47958: ARRAY
47959: PPUSH
47960: CALL_OW 334
47964: GO 47880
47966: POP
47967: POP
// end ;
47968: GO 47828
47970: POP
47971: POP
// end ;
47972: LD_VAR 0 1
47976: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
47977: LD_EXP 36
47981: IFFALSE 48156
47983: GO 47985
47985: DISABLE
47986: LD_INT 0
47988: PPUSH
47989: PPUSH
// begin for i := 1 to 8 do
47990: LD_ADDR_VAR 0 1
47994: PUSH
47995: DOUBLE
47996: LD_INT 1
47998: DEC
47999: ST_TO_ADDR
48000: LD_INT 8
48002: PUSH
48003: FOR_TO
48004: IFFALSE 48153
// if mpSidePositions [ i ] then
48006: LD_EXP 5
48010: PUSH
48011: LD_VAR 0 1
48015: ARRAY
48016: IFFALSE 48151
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
48018: LD_ADDR_VAR 0 2
48022: PUSH
48023: LD_EXP 17
48027: PUSH
48028: LD_EXP 5
48032: PUSH
48033: LD_VAR 0 1
48037: ARRAY
48038: ARRAY
48039: PPUSH
48040: LD_INT 2
48042: PUSH
48043: LD_INT 21
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 21
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 22
48070: PUSH
48071: LD_OWVAR 2
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PPUSH
48084: CALL_OW 70
48088: PUSH
48089: FOR_IN
48090: IFFALSE 48149
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
48092: LD_EXP 6
48096: PUSH
48097: LD_VAR 0 1
48101: ARRAY
48102: PUSH
48103: LD_EXP 6
48107: PUSH
48108: LD_OWVAR 2
48112: ARRAY
48113: NONEQUAL
48114: PUSH
48115: LD_EXP 9
48119: NOT
48120: PUSH
48121: LD_VAR 0 1
48125: PUSH
48126: LD_OWVAR 2
48130: NONEQUAL
48131: AND
48132: OR
48133: IFFALSE 48147
// ComMoveToArea ( un , BuildUpEscape ) ;
48135: LD_VAR 0 2
48139: PPUSH
48140: LD_INT 17
48142: PPUSH
48143: CALL_OW 113
48147: GO 48089
48149: POP
48150: POP
48151: GO 48003
48153: POP
48154: POP
// enable ;
48155: ENABLE
// end ;
48156: PPOPN 2
48158: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do
48159: LD_EXP 18
48163: IFFALSE 48189
48165: GO 48167
48167: DISABLE
// begin wait ( 4 4$00 + ( mpBuildUpTime * 1 1$00 ) ) ;
48168: LD_INT 8400
48170: PUSH
48171: LD_EXP 18
48175: PUSH
48176: LD_INT 2100
48178: MUL
48179: PLUS
48180: PPUSH
48181: CALL_OW 67
// EndBuildUp ;
48185: CALL 47802 0 0
// end ;
48189: END
// every 0 0$1 trigger mpActive marked mpWin do
48190: LD_INT 100
48192: IFFALSE 48213
48194: GO 48196
48196: DISABLE
// begin if Multiplayer then
48197: LD_OWVAR 4
48201: IFFALSE 48209
// YouWinInMultiplayer else
48203: CALL_OW 106
48207: GO 48213
// YouWin ;
48209: CALL_OW 103
// end ;
48213: END
// every 0 0$1 trigger mpActive marked mpLose do
48214: LD_INT 100
48216: IFFALSE 48240
48218: GO 48220
48220: DISABLE
// begin if Multiplayer then
48221: LD_OWVAR 4
48225: IFFALSE 48233
// YouLostInMultiplayer else
48227: CALL_OW 107
48231: GO 48240
// YouLost (  ) ;
48233: LD_STRING 
48235: PPUSH
48236: CALL_OW 104
// end ;
48240: END
// every 0 0$1 marked mpActive do
48241: GO 48243
48243: DISABLE
// begin enable ;
48244: ENABLE
// if not mpDisplayStrings then
48245: LD_EXP 33
48249: NOT
48250: IFFALSE 48261
// begin display_strings := [ ] ;
48252: LD_ADDR_OWVAR 47
48256: PUSH
48257: EMPTY
48258: ST_TO_ADDR
// exit ;
48259: GO 48271
// end ; display_strings := mpDisplayStrings ;
48261: LD_ADDR_OWVAR 47
48265: PUSH
48266: LD_EXP 33
48270: ST_TO_ADDR
// end ; end_of_file
48271: END
// export function Multiplayer_UnitDestroyed ( un ) ; var ape , tag , area , side , tmp ; begin
48272: LD_INT 0
48274: PPUSH
48275: PPUSH
48276: PPUSH
48277: PPUSH
48278: PPUSH
48279: PPUSH
// if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
48280: LD_VAR 0 1
48284: PPUSH
48285: CALL_OW 257
48289: PUSH
48290: LD_INT 12
48292: PUSH
48293: LD_INT 17
48295: PUSH
48296: LD_INT 15
48298: PUSH
48299: LD_INT 16
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: IN
48308: PUSH
48309: LD_VAR 0 1
48313: PPUSH
48314: CALL_OW 263
48318: PUSH
48319: LD_INT 5
48321: EQUAL
48322: OR
48323: IFFALSE 48412
// begin tag := GetTag ( un ) ;
48325: LD_ADDR_VAR 0 4
48329: PUSH
48330: LD_VAR 0 1
48334: PPUSH
48335: CALL_OW 110
48339: ST_TO_ADDR
// area := mpApemansArea [ tag ] ;
48340: LD_ADDR_VAR 0 5
48344: PUSH
48345: LD_EXP 29
48349: PUSH
48350: LD_VAR 0 4
48354: ARRAY
48355: ST_TO_ADDR
// wait ( 4 4$00 ) ;
48356: LD_INT 8400
48358: PPUSH
48359: CALL_OW 67
// PrepareApeman ( - 5 ) ;
48363: LD_INT 5
48365: NEG
48366: PPUSH
48367: CALL 36162 0 1
// ape := CreateHuman ;
48371: LD_ADDR_VAR 0 3
48375: PUSH
48376: CALL_OW 44
48380: ST_TO_ADDR
// SetTag ( ape , tag ) ;
48381: LD_VAR 0 3
48385: PPUSH
48386: LD_VAR 0 4
48390: PPUSH
48391: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
48395: LD_VAR 0 3
48399: PPUSH
48400: LD_VAR 0 5
48404: PPUSH
48405: LD_INT 0
48407: PPUSH
48408: CALL_OW 49
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
48412: LD_VAR 0 1
48416: PPUSH
48417: CALL_OW 247
48421: PUSH
48422: LD_INT 1
48424: EQUAL
48425: PUSH
48426: LD_VAR 0 1
48430: PPUSH
48431: CALL_OW 248
48435: PUSH
48436: LD_INT 0
48438: GREATER
48439: AND
48440: IFFALSE 48659
// begin if not mpRespawn then
48442: LD_EXP 30
48446: NOT
48447: IFFALSE 48451
// exit ;
48449: GO 48659
// side := GetSide ( un ) ;
48451: LD_ADDR_VAR 0 6
48455: PUSH
48456: LD_VAR 0 1
48460: PPUSH
48461: CALL_OW 255
48465: ST_TO_ADDR
// wait ( mpRespawn ) ;
48466: LD_EXP 30
48470: PPUSH
48471: CALL_OW 67
// if not MultiplayerSideAlive ( side ) then
48475: LD_VAR 0 6
48479: PPUSH
48480: CALL_OW 108
48484: NOT
48485: IFFALSE 48489
// exit ;
48487: GO 48659
// uc_side := side ;
48489: LD_ADDR_OWVAR 20
48493: PUSH
48494: LD_VAR 0 6
48498: ST_TO_ADDR
// uc_nation := GetNation ( un ) ;
48499: LD_ADDR_OWVAR 21
48503: PUSH
48504: LD_VAR 0 1
48508: PPUSH
48509: CALL_OW 248
48513: ST_TO_ADDR
// PrepareHuman ( GetSex ( un ) , GetClass ( un ) , 2 ) ;
48514: LD_VAR 0 1
48518: PPUSH
48519: CALL_OW 258
48523: PPUSH
48524: LD_VAR 0 1
48528: PPUSH
48529: CALL_OW 257
48533: PPUSH
48534: LD_INT 2
48536: PPUSH
48537: CALL_OW 380
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48541: LD_ADDR_VAR 0 7
48545: PUSH
48546: LD_INT 22
48548: PUSH
48549: LD_VAR 0 6
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: PUSH
48561: LD_INT 30
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 30
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: LIST
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PPUSH
48590: CALL_OW 69
48594: ST_TO_ADDR
// if not tmp then
48595: LD_VAR 0 7
48599: NOT
48600: IFFALSE 48616
// PlaceUnitAnywhere ( CreateHuman , true ) else
48602: CALL_OW 44
48606: PPUSH
48607: LD_INT 1
48609: PPUSH
48610: CALL_OW 51
48614: GO 48659
// PlaceUnitXYR ( CreateHuman , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 20 , true ) ;
48616: CALL_OW 44
48620: PPUSH
48621: LD_VAR 0 7
48625: PUSH
48626: LD_INT 1
48628: ARRAY
48629: PPUSH
48630: CALL_OW 250
48634: PPUSH
48635: LD_VAR 0 7
48639: PUSH
48640: LD_INT 1
48642: ARRAY
48643: PPUSH
48644: CALL_OW 251
48648: PPUSH
48649: LD_INT 20
48651: PPUSH
48652: LD_INT 1
48654: PPUSH
48655: CALL_OW 50
// end ; end ; end_of_file
48659: LD_VAR 0 2
48663: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
48664: LD_EXP 34
48668: PUSH
48669: CALL 48854 0 0
48673: AND
48674: PUSH
48675: LD_OWVAR 4
48679: AND
48680: IFFALSE 48851
48682: GO 48684
48684: DISABLE
48685: LD_INT 0
48687: PPUSH
48688: PPUSH
// begin canWin := false ;
48689: LD_ADDR_VAR 0 2
48693: PUSH
48694: LD_INT 0
48696: ST_TO_ADDR
// if not HasPower ( your_side ) then
48697: LD_OWVAR 2
48701: PPUSH
48702: CALL 48918 0 1
48706: NOT
48707: IFFALSE 48718
// begin Multiplayer_Loose_Message ;
48709: CALL_OW 521
// enable ( mpLose ) ;
48713: LD_INT 102
48715: ENABLE_MARKED
// end else
48716: GO 48851
// begin canWin := true ;
48718: LD_ADDR_VAR 0 2
48722: PUSH
48723: LD_INT 1
48725: ST_TO_ADDR
// for i := 1 to 8 do
48726: LD_ADDR_VAR 0 1
48730: PUSH
48731: DOUBLE
48732: LD_INT 1
48734: DEC
48735: ST_TO_ADDR
48736: LD_INT 8
48738: PUSH
48739: FOR_TO
48740: IFFALSE 48837
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
48742: LD_EXP 5
48746: PUSH
48747: LD_VAR 0 1
48751: ARRAY
48752: PUSH
48753: LD_VAR 0 1
48757: PPUSH
48758: CALL_OW 108
48762: AND
48763: PUSH
48764: LD_VAR 0 1
48768: PUSH
48769: LD_OWVAR 2
48773: NONEQUAL
48774: AND
48775: IFFALSE 48835
// if not mpSideTeams [ i ] or ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) then
48777: LD_EXP 6
48781: PUSH
48782: LD_VAR 0 1
48786: ARRAY
48787: NOT
48788: PUSH
48789: LD_EXP 6
48793: PUSH
48794: LD_VAR 0 1
48798: ARRAY
48799: PUSH
48800: LD_EXP 6
48804: PUSH
48805: LD_OWVAR 2
48809: ARRAY
48810: NONEQUAL
48811: OR
48812: IFFALSE 48835
// if HasPower ( i ) then
48814: LD_VAR 0 1
48818: PPUSH
48819: CALL 48918 0 1
48823: IFFALSE 48835
// begin canWin := false ;
48825: LD_ADDR_VAR 0 2
48829: PUSH
48830: LD_INT 0
48832: ST_TO_ADDR
// break ;
48833: GO 48837
// end ;
48835: GO 48739
48837: POP
48838: POP
// if canWin then
48839: LD_VAR 0 2
48843: IFFALSE 48850
// enable ( mpWin ) else
48845: LD_INT 101
48847: ENABLE_MARKED
48848: GO 48851
// enable ;
48850: ENABLE
// end ; end ;
48851: PPOPN 2
48853: END
// function CanWinLoose ; begin
48854: LD_INT 0
48856: PPUSH
// result := true ;
48857: LD_ADDR_VAR 0 1
48861: PUSH
48862: LD_INT 1
48864: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
48865: CALL_OW 518
48869: PUSH
48870: CALL_OW 519
48874: PUSH
48875: LD_INT 0
48877: GREATER
48878: AND
48879: IFFALSE 48889
// result := false ;
48881: LD_ADDR_VAR 0 1
48885: PUSH
48886: LD_INT 0
48888: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
48889: CALL_OW 531
48893: PUSH
48894: CALL_OW 519
48898: PUSH
48899: LD_INT 1
48901: GREATER
48902: AND
48903: IFFALSE 48913
// result := false ;
48905: LD_ADDR_VAR 0 1
48909: PUSH
48910: LD_INT 0
48912: ST_TO_ADDR
// end ;
48913: LD_VAR 0 1
48917: RET
// function HasPower ( i ) ; begin
48918: LD_INT 0
48920: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
48921: LD_ADDR_VAR 0 2
48925: PUSH
48926: LD_INT 22
48928: PUSH
48929: LD_VAR 0 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: LD_INT 21
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 33
48953: PUSH
48954: LD_INT 3
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 33
48963: PUSH
48964: LD_INT 5
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PPUSH
48981: CALL_OW 69
48985: ST_TO_ADDR
// end ; end_of_file
48986: LD_VAR 0 2
48990: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
48991: LD_EXP 34
48995: IFFALSE 49038
48997: GO 48999
48999: DISABLE
49000: LD_INT 0
49002: PPUSH
// begin for i := 1 to 8 do
49003: LD_ADDR_VAR 0 1
49007: PUSH
49008: DOUBLE
49009: LD_INT 1
49011: DEC
49012: ST_TO_ADDR
49013: LD_INT 8
49015: PUSH
49016: FOR_TO
49017: IFFALSE 49036
// SetRestrict ( b_depot , i , state_disabled ) ;
49019: LD_INT 0
49021: PPUSH
49022: LD_VAR 0 1
49026: PPUSH
49027: LD_INT 0
49029: PPUSH
49030: CALL_OW 324
49034: GO 49016
49036: POP
49037: POP
// end ;
49038: PPOPN 1
49040: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
49041: LD_EXP 34
49045: PUSH
49046: CALL 49231 0 0
49050: AND
49051: PUSH
49052: LD_OWVAR 4
49056: AND
49057: IFFALSE 49228
49059: GO 49061
49061: DISABLE
49062: LD_INT 0
49064: PPUSH
49065: PPUSH
// begin canWin := false ;
49066: LD_ADDR_VAR 0 2
49070: PUSH
49071: LD_INT 0
49073: ST_TO_ADDR
// if not HasPower ( your_side ) then
49074: LD_OWVAR 2
49078: PPUSH
49079: CALL 49295 0 1
49083: NOT
49084: IFFALSE 49095
// begin Multiplayer_Loose_Message ;
49086: CALL_OW 521
// enable ( mpLose ) ;
49090: LD_INT 102
49092: ENABLE_MARKED
// end else
49093: GO 49228
// begin canWin := true ;
49095: LD_ADDR_VAR 0 2
49099: PUSH
49100: LD_INT 1
49102: ST_TO_ADDR
// for i := 1 to 8 do
49103: LD_ADDR_VAR 0 1
49107: PUSH
49108: DOUBLE
49109: LD_INT 1
49111: DEC
49112: ST_TO_ADDR
49113: LD_INT 8
49115: PUSH
49116: FOR_TO
49117: IFFALSE 49214
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49119: LD_EXP 5
49123: PUSH
49124: LD_VAR 0 1
49128: ARRAY
49129: PUSH
49130: LD_VAR 0 1
49134: PPUSH
49135: CALL_OW 108
49139: AND
49140: PUSH
49141: LD_VAR 0 1
49145: PUSH
49146: LD_OWVAR 2
49150: NONEQUAL
49151: AND
49152: IFFALSE 49212
// if not mpSideTeams [ i ] or ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) then
49154: LD_EXP 6
49158: PUSH
49159: LD_VAR 0 1
49163: ARRAY
49164: NOT
49165: PUSH
49166: LD_EXP 6
49170: PUSH
49171: LD_VAR 0 1
49175: ARRAY
49176: PUSH
49177: LD_EXP 6
49181: PUSH
49182: LD_OWVAR 2
49186: ARRAY
49187: NONEQUAL
49188: OR
49189: IFFALSE 49212
// if HasPower ( i ) then
49191: LD_VAR 0 1
49195: PPUSH
49196: CALL 49295 0 1
49200: IFFALSE 49212
// begin canWin := false ;
49202: LD_ADDR_VAR 0 2
49206: PUSH
49207: LD_INT 0
49209: ST_TO_ADDR
// break ;
49210: GO 49214
// end ;
49212: GO 49116
49214: POP
49215: POP
// if canWin then
49216: LD_VAR 0 2
49220: IFFALSE 49227
// enable ( mpWin ) else
49222: LD_INT 101
49224: ENABLE_MARKED
49225: GO 49228
// enable ;
49227: ENABLE
// end ; end ;
49228: PPOPN 2
49230: END
// function CanWinLoose ; begin
49231: LD_INT 0
49233: PPUSH
// result := true ;
49234: LD_ADDR_VAR 0 1
49238: PUSH
49239: LD_INT 1
49241: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
49242: CALL_OW 518
49246: PUSH
49247: CALL_OW 519
49251: PUSH
49252: LD_INT 0
49254: GREATER
49255: AND
49256: IFFALSE 49266
// result := false ;
49258: LD_ADDR_VAR 0 1
49262: PUSH
49263: LD_INT 0
49265: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
49266: CALL_OW 531
49270: PUSH
49271: CALL_OW 519
49275: PUSH
49276: LD_INT 1
49278: GREATER
49279: AND
49280: IFFALSE 49290
// result := false ;
49282: LD_ADDR_VAR 0 1
49286: PUSH
49287: LD_INT 0
49289: ST_TO_ADDR
// end ;
49290: LD_VAR 0 1
49294: RET
// function HasPower ( i ) ; begin
49295: LD_INT 0
49297: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
49298: LD_INT 22
49300: PUSH
49301: LD_VAR 0 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: LD_INT 30
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 30
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: LIST
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PPUSH
49342: CALL_OW 69
49346: NOT
49347: IFFALSE 49351
// exit ;
49349: GO 49416
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
49351: LD_ADDR_VAR 0 2
49355: PUSH
49356: LD_INT 22
49358: PUSH
49359: LD_VAR 0 1
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: LD_INT 21
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 33
49383: PUSH
49384: LD_INT 3
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 33
49393: PUSH
49394: LD_INT 5
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PPUSH
49411: CALL_OW 69
49415: ST_TO_ADDR
// end ; end_of_file
49416: LD_VAR 0 2
49420: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , tmp ;
49421: LD_EXP 34
49425: IFFALSE 49658
49427: GO 49429
49429: DISABLE
49430: LD_INT 0
49432: PPUSH
49433: PPUSH
// begin mpKingPoints := [ ] ;
49434: LD_ADDR_EXP 37
49438: PUSH
49439: EMPTY
49440: ST_TO_ADDR
// if mpTeamGame then
49441: LD_EXP 9
49445: IFFALSE 49499
// begin for i := 1 to Count ( mpTeams ) do
49447: LD_ADDR_VAR 0 1
49451: PUSH
49452: DOUBLE
49453: LD_INT 1
49455: DEC
49456: ST_TO_ADDR
49457: LD_EXP 8
49461: PPUSH
49462: CALL 4305 0 1
49466: PUSH
49467: FOR_TO
49468: IFFALSE 49495
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
49470: LD_ADDR_EXP 37
49474: PUSH
49475: LD_EXP 37
49479: PPUSH
49480: LD_VAR 0 1
49484: PPUSH
49485: LD_INT 0
49487: PPUSH
49488: CALL_OW 1
49492: ST_TO_ADDR
49493: GO 49467
49495: POP
49496: POP
// end else
49497: GO 49542
// begin for i := 1 to 8 do
49499: LD_ADDR_VAR 0 1
49503: PUSH
49504: DOUBLE
49505: LD_INT 1
49507: DEC
49508: ST_TO_ADDR
49509: LD_INT 8
49511: PUSH
49512: FOR_TO
49513: IFFALSE 49540
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
49515: LD_ADDR_EXP 37
49519: PUSH
49520: LD_EXP 37
49524: PPUSH
49525: LD_VAR 0 1
49529: PPUSH
49530: LD_INT 0
49532: PPUSH
49533: CALL_OW 1
49537: ST_TO_ADDR
49538: GO 49512
49540: POP
49541: POP
// end ; SetAreaMapShow ( mpKingArea , 1 ) ;
49542: LD_EXP 31
49546: PPUSH
49547: LD_INT 1
49549: PPUSH
49550: CALL_OW 424
// UpdateCounter ;
49554: CALL 49990 0 0
// repeat wait ( 0 0$3 ) ;
49558: LD_INT 105
49560: PPUSH
49561: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49565: LD_ADDR_VAR 0 2
49569: PUSH
49570: LD_EXP 31
49574: PPUSH
49575: LD_INT 3
49577: PUSH
49578: LD_INT 57
49580: PUSH
49581: EMPTY
49582: LIST
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 50
49590: PUSH
49591: EMPTY
49592: LIST
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: LD_INT 30
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 30
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: LIST
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: LIST
49626: PPUSH
49627: CALL_OW 70
49631: ST_TO_ADDR
// if not tmp then
49632: LD_VAR 0 2
49636: NOT
49637: IFFALSE 49641
// continue ;
49639: GO 49558
// AddPoints ( tmp ) ;
49641: LD_VAR 0 2
49645: PPUSH
49646: CALL 49661 0 1
// UpdateCounter ;
49650: CALL 49990 0 0
// until false ;
49654: LD_INT 0
49656: IFFALSE 49558
// end ;
49658: PPOPN 2
49660: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
49661: LD_INT 0
49663: PPUSH
49664: PPUSH
49665: PPUSH
49666: PPUSH
49667: PPUSH
// if mpTeamGame then
49668: LD_EXP 9
49672: IFFALSE 49869
// begin first := depots [ 1 ] ;
49674: LD_ADDR_VAR 0 4
49678: PUSH
49679: LD_VAR 0 1
49683: PUSH
49684: LD_INT 1
49686: ARRAY
49687: ST_TO_ADDR
// side := GetSide ( first ) ;
49688: LD_ADDR_VAR 0 6
49692: PUSH
49693: LD_VAR 0 4
49697: PPUSH
49698: CALL_OW 255
49702: ST_TO_ADDR
// for i := 1 to mpTeams do
49703: LD_ADDR_VAR 0 3
49707: PUSH
49708: DOUBLE
49709: LD_INT 1
49711: DEC
49712: ST_TO_ADDR
49713: LD_EXP 8
49717: PUSH
49718: FOR_TO
49719: IFFALSE 49753
// if side in mpTeams [ i ] then
49721: LD_VAR 0 6
49725: PUSH
49726: LD_EXP 8
49730: PUSH
49731: LD_VAR 0 3
49735: ARRAY
49736: IN
49737: IFFALSE 49751
// begin team := i ;
49739: LD_ADDR_VAR 0 5
49743: PUSH
49744: LD_VAR 0 3
49748: ST_TO_ADDR
// break ;
49749: GO 49753
// end ;
49751: GO 49718
49753: POP
49754: POP
// if not team then
49755: LD_VAR 0 5
49759: NOT
49760: IFFALSE 49764
// exit ;
49762: GO 49985
// if UnitFilter ( depots , [ f_enemy , side ] ) then
49764: LD_VAR 0 1
49768: PPUSH
49769: LD_INT 81
49771: PUSH
49772: LD_VAR 0 6
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PPUSH
49781: CALL_OW 72
49785: IFFALSE 49789
// exit ;
49787: GO 49985
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 3 ) ;
49789: LD_ADDR_EXP 37
49793: PUSH
49794: LD_EXP 37
49798: PPUSH
49799: LD_VAR 0 5
49803: PPUSH
49804: LD_EXP 37
49808: PUSH
49809: LD_VAR 0 5
49813: ARRAY
49814: PUSH
49815: LD_INT 3
49817: PLUS
49818: PPUSH
49819: CALL_OW 1
49823: ST_TO_ADDR
// for i in mpTeams [ team ] do
49824: LD_ADDR_VAR 0 3
49828: PUSH
49829: LD_EXP 8
49833: PUSH
49834: LD_VAR 0 5
49838: ARRAY
49839: PUSH
49840: FOR_IN
49841: IFFALSE 49865
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
49843: LD_VAR 0 3
49847: PPUSH
49848: LD_EXP 37
49852: PUSH
49853: LD_VAR 0 5
49857: ARRAY
49858: PPUSH
49859: CALL_OW 506
49863: GO 49840
49865: POP
49866: POP
// end else
49867: GO 49985
// begin first := depots [ 1 ] ;
49869: LD_ADDR_VAR 0 4
49873: PUSH
49874: LD_VAR 0 1
49878: PUSH
49879: LD_INT 1
49881: ARRAY
49882: ST_TO_ADDR
// side := GetSide ( first ) ;
49883: LD_ADDR_VAR 0 6
49887: PUSH
49888: LD_VAR 0 4
49892: PPUSH
49893: CALL_OW 255
49897: ST_TO_ADDR
// if UnitFilter ( depots , [ f_not , [ f_side , side ] ] ) then
49898: LD_VAR 0 1
49902: PPUSH
49903: LD_INT 3
49905: PUSH
49906: LD_INT 22
49908: PUSH
49909: LD_VAR 0 6
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PPUSH
49922: CALL_OW 72
49926: IFFALSE 49930
// exit ;
49928: GO 49985
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 3 ) ;
49930: LD_ADDR_EXP 37
49934: PUSH
49935: LD_EXP 37
49939: PPUSH
49940: LD_VAR 0 6
49944: PPUSH
49945: LD_EXP 37
49949: PUSH
49950: LD_VAR 0 6
49954: ARRAY
49955: PUSH
49956: LD_INT 3
49958: PLUS
49959: PPUSH
49960: CALL_OW 1
49964: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
49965: LD_VAR 0 6
49969: PPUSH
49970: LD_EXP 37
49974: PUSH
49975: LD_VAR 0 6
49979: ARRAY
49980: PPUSH
49981: CALL_OW 506
// end ; end ;
49985: LD_VAR 0 2
49989: RET
// function UpdateCounter ; var i ; begin
49990: LD_INT 0
49992: PPUSH
49993: PPUSH
// result := [ ] ;
49994: LD_ADDR_VAR 0 1
49998: PUSH
49999: EMPTY
50000: ST_TO_ADDR
// if mpTeamGame then
50001: LD_EXP 9
50005: IFFALSE 50072
// begin for i := 1 to mpTeams do
50007: LD_ADDR_VAR 0 2
50011: PUSH
50012: DOUBLE
50013: LD_INT 1
50015: DEC
50016: ST_TO_ADDR
50017: LD_EXP 8
50021: PUSH
50022: FOR_TO
50023: IFFALSE 50068
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
50025: LD_ADDR_VAR 0 1
50029: PUSH
50030: LD_VAR 0 1
50034: PUSH
50035: LD_STRING #KingoftheHill-Team
50037: PUSH
50038: LD_VAR 0 2
50042: PUSH
50043: LD_EXP 37
50047: PUSH
50048: LD_VAR 0 2
50052: ARRAY
50053: PUSH
50054: LD_EXP 32
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: ADD
50065: ST_TO_ADDR
50066: GO 50022
50068: POP
50069: POP
// end else
50070: GO 50145
// begin for i := 1 to 8 do
50072: LD_ADDR_VAR 0 2
50076: PUSH
50077: DOUBLE
50078: LD_INT 1
50080: DEC
50081: ST_TO_ADDR
50082: LD_INT 8
50084: PUSH
50085: FOR_TO
50086: IFFALSE 50143
// if mpSidePositions [ i ] then
50088: LD_EXP 5
50092: PUSH
50093: LD_VAR 0 2
50097: ARRAY
50098: IFFALSE 50141
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
50100: LD_ADDR_VAR 0 1
50104: PUSH
50105: LD_VAR 0 1
50109: PUSH
50110: LD_STRING #KingoftheHill-Player
50112: PUSH
50113: LD_VAR 0 2
50117: PUSH
50118: LD_EXP 37
50122: PUSH
50123: LD_VAR 0 2
50127: ARRAY
50128: PUSH
50129: LD_EXP 32
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: ADD
50140: ST_TO_ADDR
50141: GO 50085
50143: POP
50144: POP
// end ; mpDisplayStrings := result ;
50145: LD_ADDR_EXP 33
50149: PUSH
50150: LD_VAR 0 1
50154: ST_TO_ADDR
// end ;
50155: LD_VAR 0 1
50159: RET
// function HowMuchPoints ( side ) ; var i ; begin
50160: LD_INT 0
50162: PPUSH
50163: PPUSH
// if mpTeamGame then
50164: LD_EXP 9
50168: IFFALSE 50237
// begin for i := 1 to Count ( mpTeams ) do
50170: LD_ADDR_VAR 0 3
50174: PUSH
50175: DOUBLE
50176: LD_INT 1
50178: DEC
50179: ST_TO_ADDR
50180: LD_EXP 8
50184: PPUSH
50185: CALL 4305 0 1
50189: PUSH
50190: FOR_TO
50191: IFFALSE 50233
// begin if side in mpTeams [ i ] then
50193: LD_VAR 0 1
50197: PUSH
50198: LD_EXP 8
50202: PUSH
50203: LD_VAR 0 3
50207: ARRAY
50208: IN
50209: IFFALSE 50231
// begin result := mpKingPoints [ i ] ;
50211: LD_ADDR_VAR 0 2
50215: PUSH
50216: LD_EXP 37
50220: PUSH
50221: LD_VAR 0 3
50225: ARRAY
50226: ST_TO_ADDR
// exit ;
50227: POP
50228: POP
50229: GO 50253
// end ; end ;
50231: GO 50190
50233: POP
50234: POP
// end else
50235: GO 50253
// result := mpKingPoints [ side ] ;
50237: LD_ADDR_VAR 0 2
50241: PUSH
50242: LD_EXP 37
50246: PUSH
50247: LD_VAR 0 1
50251: ARRAY
50252: ST_TO_ADDR
// end ;
50253: LD_VAR 0 2
50257: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
50258: LD_EXP 34
50262: PUSH
50263: CALL 50464 0 0
50267: AND
50268: PUSH
50269: LD_OWVAR 4
50273: AND
50274: IFFALSE 50461
50276: GO 50278
50278: DISABLE
50279: LD_INT 0
50281: PPUSH
50282: PPUSH
// begin canWin := false ;
50283: LD_ADDR_VAR 0 2
50287: PUSH
50288: LD_INT 0
50290: ST_TO_ADDR
// if not HasPower ( your_side ) then
50291: LD_OWVAR 2
50295: PPUSH
50296: CALL 50528 0 1
50300: NOT
50301: IFFALSE 50312
// begin Multiplayer_Loose_Message ;
50303: CALL_OW 521
// enable ( mpLose ) ;
50307: LD_INT 102
50309: ENABLE_MARKED
// end else
50310: GO 50461
// begin canWin := HowMuchPoints ( your_side ) >= mpPoints ;
50312: LD_ADDR_VAR 0 2
50316: PUSH
50317: LD_OWVAR 2
50321: PPUSH
50322: CALL 50160 0 1
50326: PUSH
50327: LD_EXP 32
50331: GREATEREQUAL
50332: ST_TO_ADDR
// for i := 1 to 8 do
50333: LD_ADDR_VAR 0 1
50337: PUSH
50338: DOUBLE
50339: LD_INT 1
50341: DEC
50342: ST_TO_ADDR
50343: LD_INT 8
50345: PUSH
50346: FOR_TO
50347: IFFALSE 50447
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50349: LD_EXP 5
50353: PUSH
50354: LD_VAR 0 1
50358: ARRAY
50359: PUSH
50360: LD_VAR 0 1
50364: PPUSH
50365: CALL_OW 108
50369: AND
50370: PUSH
50371: LD_VAR 0 1
50375: PUSH
50376: LD_OWVAR 2
50380: NONEQUAL
50381: AND
50382: IFFALSE 50445
// if not mpSideTeams [ i ] or ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) then
50384: LD_EXP 6
50388: PUSH
50389: LD_VAR 0 1
50393: ARRAY
50394: NOT
50395: PUSH
50396: LD_EXP 6
50400: PUSH
50401: LD_VAR 0 1
50405: ARRAY
50406: PUSH
50407: LD_EXP 6
50411: PUSH
50412: LD_OWVAR 2
50416: ARRAY
50417: NONEQUAL
50418: OR
50419: IFFALSE 50445
// if HowMuchPoints ( i ) >= mpPoints then
50421: LD_VAR 0 1
50425: PPUSH
50426: CALL 50160 0 1
50430: PUSH
50431: LD_EXP 32
50435: GREATEREQUAL
50436: IFFALSE 50445
// begin enable ( mpLose ) ;
50438: LD_INT 102
50440: ENABLE_MARKED
// exit ;
50441: POP
50442: POP
50443: GO 50461
// end ;
50445: GO 50346
50447: POP
50448: POP
// if canWin then
50449: LD_VAR 0 2
50453: IFFALSE 50460
// enable ( mpWin ) else
50455: LD_INT 101
50457: ENABLE_MARKED
50458: GO 50461
// enable ;
50460: ENABLE
// end ; end ;
50461: PPOPN 2
50463: END
// function CanWinLoose ; begin
50464: LD_INT 0
50466: PPUSH
// result := true ;
50467: LD_ADDR_VAR 0 1
50471: PUSH
50472: LD_INT 1
50474: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
50475: CALL_OW 518
50479: PUSH
50480: CALL_OW 519
50484: PUSH
50485: LD_INT 0
50487: GREATER
50488: AND
50489: IFFALSE 50499
// result := false ;
50491: LD_ADDR_VAR 0 1
50495: PUSH
50496: LD_INT 0
50498: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
50499: CALL_OW 531
50503: PUSH
50504: CALL_OW 519
50508: PUSH
50509: LD_INT 1
50511: GREATER
50512: AND
50513: IFFALSE 50523
// result := false ;
50515: LD_ADDR_VAR 0 1
50519: PUSH
50520: LD_INT 0
50522: ST_TO_ADDR
// end ;
50523: LD_VAR 0 1
50527: RET
// function HasPower ( i ) ; begin
50528: LD_INT 0
50530: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
50531: LD_ADDR_VAR 0 2
50535: PUSH
50536: LD_INT 22
50538: PUSH
50539: LD_VAR 0 1
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 2
50550: PUSH
50551: LD_INT 21
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 33
50563: PUSH
50564: LD_INT 3
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 33
50573: PUSH
50574: LD_INT 5
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PPUSH
50591: CALL_OW 69
50595: ST_TO_ADDR
// end ; end_of_file end_of_file
50596: LD_VAR 0 2
50600: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
50601: LD_VAR 0 1
50605: PPUSH
50606: LD_VAR 0 2
50610: PPUSH
50611: LD_VAR 0 3
50615: PPUSH
50616: LD_VAR 0 4
50620: PPUSH
50621: LD_VAR 0 5
50625: PPUSH
50626: LD_VAR 0 6
50630: PPUSH
50631: CALL 50832 0 6
// end ;
50635: PPOPN 6
50637: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
50638: LD_INT 0
50640: PPUSH
// begin if not units then
50641: LD_VAR 0 1
50645: NOT
50646: IFFALSE 50650
// exit ;
50648: GO 50650
// end ;
50650: PPOPN 7
50652: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
50653: CALL 50719 0 0
// end ; end_of_file
50657: PPOPN 1
50659: END
// export globalGameSaveCounter ; every 0 0$1 do
50660: GO 50662
50662: DISABLE
// begin enable ;
50663: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
50664: LD_STRING updateTimer(
50666: PUSH
50667: LD_OWVAR 1
50671: STR
50672: PUSH
50673: LD_STRING );
50675: STR
50676: PPUSH
50677: CALL_OW 559
// end ;
50681: END
// every 0 0$1 do
50682: GO 50684
50684: DISABLE
// begin globalGameSaveCounter := 0 ;
50685: LD_ADDR_EXP 38
50689: PUSH
50690: LD_INT 0
50692: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
50693: LD_STRING setGameSaveCounter(0)
50695: PPUSH
50696: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
50700: LD_STRING initStreamRollete();
50702: PPUSH
50703: CALL_OW 559
// InitStreamMode ;
50707: CALL 52050 0 0
// DefineStreamItems ( false ) ;
50711: LD_INT 0
50713: PPUSH
50714: CALL 52514 0 1
// end ;
50718: END
// export function SOS_MapStart ( ) ; begin
50719: LD_INT 0
50721: PPUSH
// if streamModeActive then
50722: LD_EXP 39
50726: IFFALSE 50735
// DefineStreamItems ( true ) ;
50728: LD_INT 1
50730: PPUSH
50731: CALL 52514 0 1
// UpdateLuaVariables ( ) ;
50735: CALL 50752 0 0
// UpdateFactoryWaypoints ( ) ;
50739: CALL 65383 0 0
// UpdateWarehouseGatheringPoints ( ) ;
50743: CALL 65640 0 0
// end ;
50747: LD_VAR 0 1
50751: RET
// function UpdateLuaVariables ( ) ; begin
50752: LD_INT 0
50754: PPUSH
// if globalGameSaveCounter then
50755: LD_EXP 38
50759: IFFALSE 50793
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
50761: LD_ADDR_EXP 38
50765: PUSH
50766: LD_EXP 38
50770: PPUSH
50771: CALL 41255 0 1
50775: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50776: LD_STRING setGameSaveCounter(
50778: PUSH
50779: LD_EXP 38
50783: STR
50784: PUSH
50785: LD_STRING )
50787: STR
50788: PPUSH
50789: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
50793: LD_STRING setGameDifficulty(
50795: PUSH
50796: LD_OWVAR 67
50800: STR
50801: PUSH
50802: LD_STRING )
50804: STR
50805: PPUSH
50806: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
50810: LD_STRING displayDifficulty(
50812: PUSH
50813: LD_OWVAR 67
50817: STR
50818: PUSH
50819: LD_STRING )
50821: STR
50822: PPUSH
50823: CALL_OW 559
// end ;
50827: LD_VAR 0 1
50831: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
50832: LD_INT 0
50834: PPUSH
// if p2 = stream_mode then
50835: LD_VAR 0 2
50839: PUSH
50840: LD_INT 100
50842: EQUAL
50843: IFFALSE 51846
// begin if not StreamModeActive then
50845: LD_EXP 39
50849: NOT
50850: IFFALSE 50860
// StreamModeActive := true ;
50852: LD_ADDR_EXP 39
50856: PUSH
50857: LD_INT 1
50859: ST_TO_ADDR
// if p3 = 0 then
50860: LD_VAR 0 3
50864: PUSH
50865: LD_INT 0
50867: EQUAL
50868: IFFALSE 50874
// InitStreamMode ;
50870: CALL 52050 0 0
// if p3 = 1 then
50874: LD_VAR 0 3
50878: PUSH
50879: LD_INT 1
50881: EQUAL
50882: IFFALSE 50892
// sRocket := true ;
50884: LD_ADDR_EXP 44
50888: PUSH
50889: LD_INT 1
50891: ST_TO_ADDR
// if p3 = 2 then
50892: LD_VAR 0 3
50896: PUSH
50897: LD_INT 2
50899: EQUAL
50900: IFFALSE 50910
// sSpeed := true ;
50902: LD_ADDR_EXP 43
50906: PUSH
50907: LD_INT 1
50909: ST_TO_ADDR
// if p3 = 3 then
50910: LD_VAR 0 3
50914: PUSH
50915: LD_INT 3
50917: EQUAL
50918: IFFALSE 50928
// sEngine := true ;
50920: LD_ADDR_EXP 45
50924: PUSH
50925: LD_INT 1
50927: ST_TO_ADDR
// if p3 = 4 then
50928: LD_VAR 0 3
50932: PUSH
50933: LD_INT 4
50935: EQUAL
50936: IFFALSE 50946
// sSpec := true ;
50938: LD_ADDR_EXP 42
50942: PUSH
50943: LD_INT 1
50945: ST_TO_ADDR
// if p3 = 5 then
50946: LD_VAR 0 3
50950: PUSH
50951: LD_INT 5
50953: EQUAL
50954: IFFALSE 50964
// sLevel := true ;
50956: LD_ADDR_EXP 46
50960: PUSH
50961: LD_INT 1
50963: ST_TO_ADDR
// if p3 = 6 then
50964: LD_VAR 0 3
50968: PUSH
50969: LD_INT 6
50971: EQUAL
50972: IFFALSE 50982
// sArmoury := true ;
50974: LD_ADDR_EXP 47
50978: PUSH
50979: LD_INT 1
50981: ST_TO_ADDR
// if p3 = 7 then
50982: LD_VAR 0 3
50986: PUSH
50987: LD_INT 7
50989: EQUAL
50990: IFFALSE 51000
// sRadar := true ;
50992: LD_ADDR_EXP 48
50996: PUSH
50997: LD_INT 1
50999: ST_TO_ADDR
// if p3 = 8 then
51000: LD_VAR 0 3
51004: PUSH
51005: LD_INT 8
51007: EQUAL
51008: IFFALSE 51018
// sBunker := true ;
51010: LD_ADDR_EXP 49
51014: PUSH
51015: LD_INT 1
51017: ST_TO_ADDR
// if p3 = 9 then
51018: LD_VAR 0 3
51022: PUSH
51023: LD_INT 9
51025: EQUAL
51026: IFFALSE 51036
// sHack := true ;
51028: LD_ADDR_EXP 50
51032: PUSH
51033: LD_INT 1
51035: ST_TO_ADDR
// if p3 = 10 then
51036: LD_VAR 0 3
51040: PUSH
51041: LD_INT 10
51043: EQUAL
51044: IFFALSE 51054
// sFire := true ;
51046: LD_ADDR_EXP 51
51050: PUSH
51051: LD_INT 1
51053: ST_TO_ADDR
// if p3 = 11 then
51054: LD_VAR 0 3
51058: PUSH
51059: LD_INT 11
51061: EQUAL
51062: IFFALSE 51072
// sRefresh := true ;
51064: LD_ADDR_EXP 52
51068: PUSH
51069: LD_INT 1
51071: ST_TO_ADDR
// if p3 = 12 then
51072: LD_VAR 0 3
51076: PUSH
51077: LD_INT 12
51079: EQUAL
51080: IFFALSE 51090
// sExp := true ;
51082: LD_ADDR_EXP 53
51086: PUSH
51087: LD_INT 1
51089: ST_TO_ADDR
// if p3 = 13 then
51090: LD_VAR 0 3
51094: PUSH
51095: LD_INT 13
51097: EQUAL
51098: IFFALSE 51108
// sDepot := true ;
51100: LD_ADDR_EXP 54
51104: PUSH
51105: LD_INT 1
51107: ST_TO_ADDR
// if p3 = 14 then
51108: LD_VAR 0 3
51112: PUSH
51113: LD_INT 14
51115: EQUAL
51116: IFFALSE 51126
// sFlag := true ;
51118: LD_ADDR_EXP 55
51122: PUSH
51123: LD_INT 1
51125: ST_TO_ADDR
// if p3 = 15 then
51126: LD_VAR 0 3
51130: PUSH
51131: LD_INT 15
51133: EQUAL
51134: IFFALSE 51144
// sKamikadze := true ;
51136: LD_ADDR_EXP 63
51140: PUSH
51141: LD_INT 1
51143: ST_TO_ADDR
// if p3 = 16 then
51144: LD_VAR 0 3
51148: PUSH
51149: LD_INT 16
51151: EQUAL
51152: IFFALSE 51162
// sTroll := true ;
51154: LD_ADDR_EXP 64
51158: PUSH
51159: LD_INT 1
51161: ST_TO_ADDR
// if p3 = 17 then
51162: LD_VAR 0 3
51166: PUSH
51167: LD_INT 17
51169: EQUAL
51170: IFFALSE 51180
// sSlow := true ;
51172: LD_ADDR_EXP 65
51176: PUSH
51177: LD_INT 1
51179: ST_TO_ADDR
// if p3 = 18 then
51180: LD_VAR 0 3
51184: PUSH
51185: LD_INT 18
51187: EQUAL
51188: IFFALSE 51198
// sLack := true ;
51190: LD_ADDR_EXP 66
51194: PUSH
51195: LD_INT 1
51197: ST_TO_ADDR
// if p3 = 19 then
51198: LD_VAR 0 3
51202: PUSH
51203: LD_INT 19
51205: EQUAL
51206: IFFALSE 51216
// sTank := true ;
51208: LD_ADDR_EXP 68
51212: PUSH
51213: LD_INT 1
51215: ST_TO_ADDR
// if p3 = 20 then
51216: LD_VAR 0 3
51220: PUSH
51221: LD_INT 20
51223: EQUAL
51224: IFFALSE 51234
// sRemote := true ;
51226: LD_ADDR_EXP 69
51230: PUSH
51231: LD_INT 1
51233: ST_TO_ADDR
// if p3 = 21 then
51234: LD_VAR 0 3
51238: PUSH
51239: LD_INT 21
51241: EQUAL
51242: IFFALSE 51252
// sPowell := true ;
51244: LD_ADDR_EXP 70
51248: PUSH
51249: LD_INT 1
51251: ST_TO_ADDR
// if p3 = 22 then
51252: LD_VAR 0 3
51256: PUSH
51257: LD_INT 22
51259: EQUAL
51260: IFFALSE 51270
// sTeleport := true ;
51262: LD_ADDR_EXP 73
51266: PUSH
51267: LD_INT 1
51269: ST_TO_ADDR
// if p3 = 23 then
51270: LD_VAR 0 3
51274: PUSH
51275: LD_INT 23
51277: EQUAL
51278: IFFALSE 51288
// sOilTower := true ;
51280: LD_ADDR_EXP 75
51284: PUSH
51285: LD_INT 1
51287: ST_TO_ADDR
// if p3 = 24 then
51288: LD_VAR 0 3
51292: PUSH
51293: LD_INT 24
51295: EQUAL
51296: IFFALSE 51306
// sShovel := true ;
51298: LD_ADDR_EXP 76
51302: PUSH
51303: LD_INT 1
51305: ST_TO_ADDR
// if p3 = 25 then
51306: LD_VAR 0 3
51310: PUSH
51311: LD_INT 25
51313: EQUAL
51314: IFFALSE 51324
// sSheik := true ;
51316: LD_ADDR_EXP 77
51320: PUSH
51321: LD_INT 1
51323: ST_TO_ADDR
// if p3 = 26 then
51324: LD_VAR 0 3
51328: PUSH
51329: LD_INT 26
51331: EQUAL
51332: IFFALSE 51342
// sEarthquake := true ;
51334: LD_ADDR_EXP 79
51338: PUSH
51339: LD_INT 1
51341: ST_TO_ADDR
// if p3 = 27 then
51342: LD_VAR 0 3
51346: PUSH
51347: LD_INT 27
51349: EQUAL
51350: IFFALSE 51360
// sAI := true ;
51352: LD_ADDR_EXP 80
51356: PUSH
51357: LD_INT 1
51359: ST_TO_ADDR
// if p3 = 28 then
51360: LD_VAR 0 3
51364: PUSH
51365: LD_INT 28
51367: EQUAL
51368: IFFALSE 51378
// sCargo := true ;
51370: LD_ADDR_EXP 83
51374: PUSH
51375: LD_INT 1
51377: ST_TO_ADDR
// if p3 = 29 then
51378: LD_VAR 0 3
51382: PUSH
51383: LD_INT 29
51385: EQUAL
51386: IFFALSE 51396
// sDLaser := true ;
51388: LD_ADDR_EXP 84
51392: PUSH
51393: LD_INT 1
51395: ST_TO_ADDR
// if p3 = 30 then
51396: LD_VAR 0 3
51400: PUSH
51401: LD_INT 30
51403: EQUAL
51404: IFFALSE 51414
// sExchange := true ;
51406: LD_ADDR_EXP 85
51410: PUSH
51411: LD_INT 1
51413: ST_TO_ADDR
// if p3 = 31 then
51414: LD_VAR 0 3
51418: PUSH
51419: LD_INT 31
51421: EQUAL
51422: IFFALSE 51432
// sFac := true ;
51424: LD_ADDR_EXP 86
51428: PUSH
51429: LD_INT 1
51431: ST_TO_ADDR
// if p3 = 32 then
51432: LD_VAR 0 3
51436: PUSH
51437: LD_INT 32
51439: EQUAL
51440: IFFALSE 51450
// sPower := true ;
51442: LD_ADDR_EXP 87
51446: PUSH
51447: LD_INT 1
51449: ST_TO_ADDR
// if p3 = 33 then
51450: LD_VAR 0 3
51454: PUSH
51455: LD_INT 33
51457: EQUAL
51458: IFFALSE 51468
// sRandom := true ;
51460: LD_ADDR_EXP 88
51464: PUSH
51465: LD_INT 1
51467: ST_TO_ADDR
// if p3 = 34 then
51468: LD_VAR 0 3
51472: PUSH
51473: LD_INT 34
51475: EQUAL
51476: IFFALSE 51486
// sShield := true ;
51478: LD_ADDR_EXP 89
51482: PUSH
51483: LD_INT 1
51485: ST_TO_ADDR
// if p3 = 35 then
51486: LD_VAR 0 3
51490: PUSH
51491: LD_INT 35
51493: EQUAL
51494: IFFALSE 51504
// sTime := true ;
51496: LD_ADDR_EXP 90
51500: PUSH
51501: LD_INT 1
51503: ST_TO_ADDR
// if p3 = 36 then
51504: LD_VAR 0 3
51508: PUSH
51509: LD_INT 36
51511: EQUAL
51512: IFFALSE 51522
// sTools := true ;
51514: LD_ADDR_EXP 91
51518: PUSH
51519: LD_INT 1
51521: ST_TO_ADDR
// if p3 = 101 then
51522: LD_VAR 0 3
51526: PUSH
51527: LD_INT 101
51529: EQUAL
51530: IFFALSE 51540
// sSold := true ;
51532: LD_ADDR_EXP 56
51536: PUSH
51537: LD_INT 1
51539: ST_TO_ADDR
// if p3 = 102 then
51540: LD_VAR 0 3
51544: PUSH
51545: LD_INT 102
51547: EQUAL
51548: IFFALSE 51558
// sDiff := true ;
51550: LD_ADDR_EXP 57
51554: PUSH
51555: LD_INT 1
51557: ST_TO_ADDR
// if p3 = 103 then
51558: LD_VAR 0 3
51562: PUSH
51563: LD_INT 103
51565: EQUAL
51566: IFFALSE 51576
// sFog := true ;
51568: LD_ADDR_EXP 60
51572: PUSH
51573: LD_INT 1
51575: ST_TO_ADDR
// if p3 = 104 then
51576: LD_VAR 0 3
51580: PUSH
51581: LD_INT 104
51583: EQUAL
51584: IFFALSE 51594
// sReset := true ;
51586: LD_ADDR_EXP 61
51590: PUSH
51591: LD_INT 1
51593: ST_TO_ADDR
// if p3 = 105 then
51594: LD_VAR 0 3
51598: PUSH
51599: LD_INT 105
51601: EQUAL
51602: IFFALSE 51612
// sSun := true ;
51604: LD_ADDR_EXP 62
51608: PUSH
51609: LD_INT 1
51611: ST_TO_ADDR
// if p3 = 106 then
51612: LD_VAR 0 3
51616: PUSH
51617: LD_INT 106
51619: EQUAL
51620: IFFALSE 51630
// sTiger := true ;
51622: LD_ADDR_EXP 58
51626: PUSH
51627: LD_INT 1
51629: ST_TO_ADDR
// if p3 = 107 then
51630: LD_VAR 0 3
51634: PUSH
51635: LD_INT 107
51637: EQUAL
51638: IFFALSE 51648
// sBomb := true ;
51640: LD_ADDR_EXP 59
51644: PUSH
51645: LD_INT 1
51647: ST_TO_ADDR
// if p3 = 108 then
51648: LD_VAR 0 3
51652: PUSH
51653: LD_INT 108
51655: EQUAL
51656: IFFALSE 51666
// sWound := true ;
51658: LD_ADDR_EXP 67
51662: PUSH
51663: LD_INT 1
51665: ST_TO_ADDR
// if p3 = 109 then
51666: LD_VAR 0 3
51670: PUSH
51671: LD_INT 109
51673: EQUAL
51674: IFFALSE 51684
// sBetray := true ;
51676: LD_ADDR_EXP 71
51680: PUSH
51681: LD_INT 1
51683: ST_TO_ADDR
// if p3 = 110 then
51684: LD_VAR 0 3
51688: PUSH
51689: LD_INT 110
51691: EQUAL
51692: IFFALSE 51702
// sContamin := true ;
51694: LD_ADDR_EXP 72
51698: PUSH
51699: LD_INT 1
51701: ST_TO_ADDR
// if p3 = 111 then
51702: LD_VAR 0 3
51706: PUSH
51707: LD_INT 111
51709: EQUAL
51710: IFFALSE 51720
// sOil := true ;
51712: LD_ADDR_EXP 74
51716: PUSH
51717: LD_INT 1
51719: ST_TO_ADDR
// if p3 = 112 then
51720: LD_VAR 0 3
51724: PUSH
51725: LD_INT 112
51727: EQUAL
51728: IFFALSE 51738
// sStu := true ;
51730: LD_ADDR_EXP 78
51734: PUSH
51735: LD_INT 1
51737: ST_TO_ADDR
// if p3 = 113 then
51738: LD_VAR 0 3
51742: PUSH
51743: LD_INT 113
51745: EQUAL
51746: IFFALSE 51756
// sBazooka := true ;
51748: LD_ADDR_EXP 81
51752: PUSH
51753: LD_INT 1
51755: ST_TO_ADDR
// if p3 = 114 then
51756: LD_VAR 0 3
51760: PUSH
51761: LD_INT 114
51763: EQUAL
51764: IFFALSE 51774
// sMortar := true ;
51766: LD_ADDR_EXP 82
51770: PUSH
51771: LD_INT 1
51773: ST_TO_ADDR
// if p3 = 115 then
51774: LD_VAR 0 3
51778: PUSH
51779: LD_INT 115
51781: EQUAL
51782: IFFALSE 51792
// sRanger := true ;
51784: LD_ADDR_EXP 92
51788: PUSH
51789: LD_INT 1
51791: ST_TO_ADDR
// if p3 = 116 then
51792: LD_VAR 0 3
51796: PUSH
51797: LD_INT 116
51799: EQUAL
51800: IFFALSE 51810
// sComputer := true ;
51802: LD_ADDR_EXP 93
51806: PUSH
51807: LD_INT 1
51809: ST_TO_ADDR
// if p3 = 117 then
51810: LD_VAR 0 3
51814: PUSH
51815: LD_INT 117
51817: EQUAL
51818: IFFALSE 51828
// s30 := true ;
51820: LD_ADDR_EXP 94
51824: PUSH
51825: LD_INT 1
51827: ST_TO_ADDR
// if p3 = 118 then
51828: LD_VAR 0 3
51832: PUSH
51833: LD_INT 118
51835: EQUAL
51836: IFFALSE 51846
// s60 := true ;
51838: LD_ADDR_EXP 95
51842: PUSH
51843: LD_INT 1
51845: ST_TO_ADDR
// end ; if p2 = hack_mode then
51846: LD_VAR 0 2
51850: PUSH
51851: LD_INT 101
51853: EQUAL
51854: IFFALSE 51982
// begin case p3 of 1 :
51856: LD_VAR 0 3
51860: PUSH
51861: LD_INT 1
51863: DOUBLE
51864: EQUAL
51865: IFTRUE 51869
51867: GO 51876
51869: POP
// hHackUnlimitedResources ; 2 :
51870: CALL 64129 0 0
51874: GO 51982
51876: LD_INT 2
51878: DOUBLE
51879: EQUAL
51880: IFTRUE 51884
51882: GO 51891
51884: POP
// hHackSetLevel10 ; 3 :
51885: CALL 64262 0 0
51889: GO 51982
51891: LD_INT 3
51893: DOUBLE
51894: EQUAL
51895: IFTRUE 51899
51897: GO 51906
51899: POP
// hHackSetLevel10YourUnits ; 4 :
51900: CALL 64347 0 0
51904: GO 51982
51906: LD_INT 4
51908: DOUBLE
51909: EQUAL
51910: IFTRUE 51914
51912: GO 51921
51914: POP
// hHackInvincible ; 5 :
51915: CALL 64795 0 0
51919: GO 51982
51921: LD_INT 5
51923: DOUBLE
51924: EQUAL
51925: IFTRUE 51929
51927: GO 51936
51929: POP
// hHackInvisible ; 6 :
51930: CALL 64906 0 0
51934: GO 51982
51936: LD_INT 6
51938: DOUBLE
51939: EQUAL
51940: IFTRUE 51944
51942: GO 51951
51944: POP
// hHackChangeYourSide ; 7 :
51945: CALL 64963 0 0
51949: GO 51982
51951: LD_INT 7
51953: DOUBLE
51954: EQUAL
51955: IFTRUE 51959
51957: GO 51966
51959: POP
// hHackChangeUnitSide ; 8 :
51960: CALL 65005 0 0
51964: GO 51982
51966: LD_INT 8
51968: DOUBLE
51969: EQUAL
51970: IFTRUE 51974
51972: GO 51981
51974: POP
// hHackFog ; end ;
51975: CALL 65106 0 0
51979: GO 51982
51981: POP
// end ; if p2 = game_save_mode then
51982: LD_VAR 0 2
51986: PUSH
51987: LD_INT 102
51989: EQUAL
51990: IFFALSE 52045
// begin if p3 = 1 then
51992: LD_VAR 0 3
51996: PUSH
51997: LD_INT 1
51999: EQUAL
52000: IFFALSE 52012
// globalGameSaveCounter := p4 ;
52002: LD_ADDR_EXP 38
52006: PUSH
52007: LD_VAR 0 4
52011: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
52012: LD_VAR 0 3
52016: PUSH
52017: LD_INT 2
52019: EQUAL
52020: PUSH
52021: LD_EXP 38
52025: AND
52026: IFFALSE 52045
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
52028: LD_STRING setGameSaveCounter(
52030: PUSH
52031: LD_EXP 38
52035: STR
52036: PUSH
52037: LD_STRING )
52039: STR
52040: PPUSH
52041: CALL_OW 559
// end ; end ;
52045: LD_VAR 0 7
52049: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
52050: LD_INT 0
52052: PPUSH
// streamModeActive := false ;
52053: LD_ADDR_EXP 39
52057: PUSH
52058: LD_INT 0
52060: ST_TO_ADDR
// normalCounter := 36 ;
52061: LD_ADDR_EXP 40
52065: PUSH
52066: LD_INT 36
52068: ST_TO_ADDR
// hardcoreCounter := 18 ;
52069: LD_ADDR_EXP 41
52073: PUSH
52074: LD_INT 18
52076: ST_TO_ADDR
// sRocket := false ;
52077: LD_ADDR_EXP 44
52081: PUSH
52082: LD_INT 0
52084: ST_TO_ADDR
// sSpeed := false ;
52085: LD_ADDR_EXP 43
52089: PUSH
52090: LD_INT 0
52092: ST_TO_ADDR
// sEngine := false ;
52093: LD_ADDR_EXP 45
52097: PUSH
52098: LD_INT 0
52100: ST_TO_ADDR
// sSpec := false ;
52101: LD_ADDR_EXP 42
52105: PUSH
52106: LD_INT 0
52108: ST_TO_ADDR
// sLevel := false ;
52109: LD_ADDR_EXP 46
52113: PUSH
52114: LD_INT 0
52116: ST_TO_ADDR
// sArmoury := false ;
52117: LD_ADDR_EXP 47
52121: PUSH
52122: LD_INT 0
52124: ST_TO_ADDR
// sRadar := false ;
52125: LD_ADDR_EXP 48
52129: PUSH
52130: LD_INT 0
52132: ST_TO_ADDR
// sBunker := false ;
52133: LD_ADDR_EXP 49
52137: PUSH
52138: LD_INT 0
52140: ST_TO_ADDR
// sHack := false ;
52141: LD_ADDR_EXP 50
52145: PUSH
52146: LD_INT 0
52148: ST_TO_ADDR
// sFire := false ;
52149: LD_ADDR_EXP 51
52153: PUSH
52154: LD_INT 0
52156: ST_TO_ADDR
// sRefresh := false ;
52157: LD_ADDR_EXP 52
52161: PUSH
52162: LD_INT 0
52164: ST_TO_ADDR
// sExp := false ;
52165: LD_ADDR_EXP 53
52169: PUSH
52170: LD_INT 0
52172: ST_TO_ADDR
// sDepot := false ;
52173: LD_ADDR_EXP 54
52177: PUSH
52178: LD_INT 0
52180: ST_TO_ADDR
// sFlag := false ;
52181: LD_ADDR_EXP 55
52185: PUSH
52186: LD_INT 0
52188: ST_TO_ADDR
// sKamikadze := false ;
52189: LD_ADDR_EXP 63
52193: PUSH
52194: LD_INT 0
52196: ST_TO_ADDR
// sTroll := false ;
52197: LD_ADDR_EXP 64
52201: PUSH
52202: LD_INT 0
52204: ST_TO_ADDR
// sSlow := false ;
52205: LD_ADDR_EXP 65
52209: PUSH
52210: LD_INT 0
52212: ST_TO_ADDR
// sLack := false ;
52213: LD_ADDR_EXP 66
52217: PUSH
52218: LD_INT 0
52220: ST_TO_ADDR
// sTank := false ;
52221: LD_ADDR_EXP 68
52225: PUSH
52226: LD_INT 0
52228: ST_TO_ADDR
// sRemote := false ;
52229: LD_ADDR_EXP 69
52233: PUSH
52234: LD_INT 0
52236: ST_TO_ADDR
// sPowell := false ;
52237: LD_ADDR_EXP 70
52241: PUSH
52242: LD_INT 0
52244: ST_TO_ADDR
// sTeleport := false ;
52245: LD_ADDR_EXP 73
52249: PUSH
52250: LD_INT 0
52252: ST_TO_ADDR
// sOilTower := false ;
52253: LD_ADDR_EXP 75
52257: PUSH
52258: LD_INT 0
52260: ST_TO_ADDR
// sShovel := false ;
52261: LD_ADDR_EXP 76
52265: PUSH
52266: LD_INT 0
52268: ST_TO_ADDR
// sSheik := false ;
52269: LD_ADDR_EXP 77
52273: PUSH
52274: LD_INT 0
52276: ST_TO_ADDR
// sEarthquake := false ;
52277: LD_ADDR_EXP 79
52281: PUSH
52282: LD_INT 0
52284: ST_TO_ADDR
// sAI := false ;
52285: LD_ADDR_EXP 80
52289: PUSH
52290: LD_INT 0
52292: ST_TO_ADDR
// sCargo := false ;
52293: LD_ADDR_EXP 83
52297: PUSH
52298: LD_INT 0
52300: ST_TO_ADDR
// sDLaser := false ;
52301: LD_ADDR_EXP 84
52305: PUSH
52306: LD_INT 0
52308: ST_TO_ADDR
// sExchange := false ;
52309: LD_ADDR_EXP 85
52313: PUSH
52314: LD_INT 0
52316: ST_TO_ADDR
// sFac := false ;
52317: LD_ADDR_EXP 86
52321: PUSH
52322: LD_INT 0
52324: ST_TO_ADDR
// sPower := false ;
52325: LD_ADDR_EXP 87
52329: PUSH
52330: LD_INT 0
52332: ST_TO_ADDR
// sRandom := false ;
52333: LD_ADDR_EXP 88
52337: PUSH
52338: LD_INT 0
52340: ST_TO_ADDR
// sShield := false ;
52341: LD_ADDR_EXP 89
52345: PUSH
52346: LD_INT 0
52348: ST_TO_ADDR
// sTime := false ;
52349: LD_ADDR_EXP 90
52353: PUSH
52354: LD_INT 0
52356: ST_TO_ADDR
// sTools := false ;
52357: LD_ADDR_EXP 91
52361: PUSH
52362: LD_INT 0
52364: ST_TO_ADDR
// sSold := false ;
52365: LD_ADDR_EXP 56
52369: PUSH
52370: LD_INT 0
52372: ST_TO_ADDR
// sDiff := false ;
52373: LD_ADDR_EXP 57
52377: PUSH
52378: LD_INT 0
52380: ST_TO_ADDR
// sFog := false ;
52381: LD_ADDR_EXP 60
52385: PUSH
52386: LD_INT 0
52388: ST_TO_ADDR
// sReset := false ;
52389: LD_ADDR_EXP 61
52393: PUSH
52394: LD_INT 0
52396: ST_TO_ADDR
// sSun := false ;
52397: LD_ADDR_EXP 62
52401: PUSH
52402: LD_INT 0
52404: ST_TO_ADDR
// sTiger := false ;
52405: LD_ADDR_EXP 58
52409: PUSH
52410: LD_INT 0
52412: ST_TO_ADDR
// sBomb := false ;
52413: LD_ADDR_EXP 59
52417: PUSH
52418: LD_INT 0
52420: ST_TO_ADDR
// sWound := false ;
52421: LD_ADDR_EXP 67
52425: PUSH
52426: LD_INT 0
52428: ST_TO_ADDR
// sBetray := false ;
52429: LD_ADDR_EXP 71
52433: PUSH
52434: LD_INT 0
52436: ST_TO_ADDR
// sContamin := false ;
52437: LD_ADDR_EXP 72
52441: PUSH
52442: LD_INT 0
52444: ST_TO_ADDR
// sOil := false ;
52445: LD_ADDR_EXP 74
52449: PUSH
52450: LD_INT 0
52452: ST_TO_ADDR
// sStu := false ;
52453: LD_ADDR_EXP 78
52457: PUSH
52458: LD_INT 0
52460: ST_TO_ADDR
// sBazooka := false ;
52461: LD_ADDR_EXP 81
52465: PUSH
52466: LD_INT 0
52468: ST_TO_ADDR
// sMortar := false ;
52469: LD_ADDR_EXP 82
52473: PUSH
52474: LD_INT 0
52476: ST_TO_ADDR
// sRanger := false ;
52477: LD_ADDR_EXP 92
52481: PUSH
52482: LD_INT 0
52484: ST_TO_ADDR
// sComputer := false ;
52485: LD_ADDR_EXP 93
52489: PUSH
52490: LD_INT 0
52492: ST_TO_ADDR
// s30 := false ;
52493: LD_ADDR_EXP 94
52497: PUSH
52498: LD_INT 0
52500: ST_TO_ADDR
// s60 := false ;
52501: LD_ADDR_EXP 95
52505: PUSH
52506: LD_INT 0
52508: ST_TO_ADDR
// end ;
52509: LD_VAR 0 1
52513: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
52514: LD_INT 0
52516: PPUSH
52517: PPUSH
52518: PPUSH
52519: PPUSH
52520: PPUSH
52521: PPUSH
52522: PPUSH
// result := [ ] ;
52523: LD_ADDR_VAR 0 2
52527: PUSH
52528: EMPTY
52529: ST_TO_ADDR
// if campaign_id = 1 then
52530: LD_OWVAR 69
52534: PUSH
52535: LD_INT 1
52537: EQUAL
52538: IFFALSE 55704
// begin case mission_number of 1 :
52540: LD_OWVAR 70
52544: PUSH
52545: LD_INT 1
52547: DOUBLE
52548: EQUAL
52549: IFTRUE 52553
52551: GO 52629
52553: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
52554: LD_ADDR_VAR 0 2
52558: PUSH
52559: LD_INT 2
52561: PUSH
52562: LD_INT 4
52564: PUSH
52565: LD_INT 11
52567: PUSH
52568: LD_INT 12
52570: PUSH
52571: LD_INT 15
52573: PUSH
52574: LD_INT 16
52576: PUSH
52577: LD_INT 22
52579: PUSH
52580: LD_INT 23
52582: PUSH
52583: LD_INT 26
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 101
52599: PUSH
52600: LD_INT 102
52602: PUSH
52603: LD_INT 106
52605: PUSH
52606: LD_INT 116
52608: PUSH
52609: LD_INT 117
52611: PUSH
52612: LD_INT 118
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: ST_TO_ADDR
52627: GO 55702
52629: LD_INT 2
52631: DOUBLE
52632: EQUAL
52633: IFTRUE 52637
52635: GO 52721
52637: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
52638: LD_ADDR_VAR 0 2
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: LD_INT 4
52648: PUSH
52649: LD_INT 11
52651: PUSH
52652: LD_INT 12
52654: PUSH
52655: LD_INT 15
52657: PUSH
52658: LD_INT 16
52660: PUSH
52661: LD_INT 22
52663: PUSH
52664: LD_INT 23
52666: PUSH
52667: LD_INT 26
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 101
52683: PUSH
52684: LD_INT 102
52686: PUSH
52687: LD_INT 105
52689: PUSH
52690: LD_INT 106
52692: PUSH
52693: LD_INT 108
52695: PUSH
52696: LD_INT 116
52698: PUSH
52699: LD_INT 117
52701: PUSH
52702: LD_INT 118
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: ST_TO_ADDR
52719: GO 55702
52721: LD_INT 3
52723: DOUBLE
52724: EQUAL
52725: IFTRUE 52729
52727: GO 52817
52729: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
52730: LD_ADDR_VAR 0 2
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: LD_INT 4
52740: PUSH
52741: LD_INT 5
52743: PUSH
52744: LD_INT 11
52746: PUSH
52747: LD_INT 12
52749: PUSH
52750: LD_INT 15
52752: PUSH
52753: LD_INT 16
52755: PUSH
52756: LD_INT 22
52758: PUSH
52759: LD_INT 26
52761: PUSH
52762: LD_INT 36
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 101
52779: PUSH
52780: LD_INT 102
52782: PUSH
52783: LD_INT 105
52785: PUSH
52786: LD_INT 106
52788: PUSH
52789: LD_INT 108
52791: PUSH
52792: LD_INT 116
52794: PUSH
52795: LD_INT 117
52797: PUSH
52798: LD_INT 118
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: ST_TO_ADDR
52815: GO 55702
52817: LD_INT 4
52819: DOUBLE
52820: EQUAL
52821: IFTRUE 52825
52823: GO 52921
52825: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
52826: LD_ADDR_VAR 0 2
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: LD_INT 4
52836: PUSH
52837: LD_INT 5
52839: PUSH
52840: LD_INT 8
52842: PUSH
52843: LD_INT 11
52845: PUSH
52846: LD_INT 12
52848: PUSH
52849: LD_INT 15
52851: PUSH
52852: LD_INT 16
52854: PUSH
52855: LD_INT 22
52857: PUSH
52858: LD_INT 23
52860: PUSH
52861: LD_INT 26
52863: PUSH
52864: LD_INT 36
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 101
52883: PUSH
52884: LD_INT 102
52886: PUSH
52887: LD_INT 105
52889: PUSH
52890: LD_INT 106
52892: PUSH
52893: LD_INT 108
52895: PUSH
52896: LD_INT 116
52898: PUSH
52899: LD_INT 117
52901: PUSH
52902: LD_INT 118
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: ST_TO_ADDR
52919: GO 55702
52921: LD_INT 5
52923: DOUBLE
52924: EQUAL
52925: IFTRUE 52929
52927: GO 53041
52929: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
52930: LD_ADDR_VAR 0 2
52934: PUSH
52935: LD_INT 2
52937: PUSH
52938: LD_INT 4
52940: PUSH
52941: LD_INT 5
52943: PUSH
52944: LD_INT 6
52946: PUSH
52947: LD_INT 8
52949: PUSH
52950: LD_INT 11
52952: PUSH
52953: LD_INT 12
52955: PUSH
52956: LD_INT 15
52958: PUSH
52959: LD_INT 16
52961: PUSH
52962: LD_INT 22
52964: PUSH
52965: LD_INT 23
52967: PUSH
52968: LD_INT 25
52970: PUSH
52971: LD_INT 26
52973: PUSH
52974: LD_INT 36
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 101
52995: PUSH
52996: LD_INT 102
52998: PUSH
52999: LD_INT 105
53001: PUSH
53002: LD_INT 106
53004: PUSH
53005: LD_INT 108
53007: PUSH
53008: LD_INT 109
53010: PUSH
53011: LD_INT 112
53013: PUSH
53014: LD_INT 116
53016: PUSH
53017: LD_INT 117
53019: PUSH
53020: LD_INT 118
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: ST_TO_ADDR
53039: GO 55702
53041: LD_INT 6
53043: DOUBLE
53044: EQUAL
53045: IFTRUE 53049
53047: GO 53181
53049: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
53050: LD_ADDR_VAR 0 2
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: LD_INT 4
53060: PUSH
53061: LD_INT 5
53063: PUSH
53064: LD_INT 6
53066: PUSH
53067: LD_INT 8
53069: PUSH
53070: LD_INT 11
53072: PUSH
53073: LD_INT 12
53075: PUSH
53076: LD_INT 15
53078: PUSH
53079: LD_INT 16
53081: PUSH
53082: LD_INT 20
53084: PUSH
53085: LD_INT 21
53087: PUSH
53088: LD_INT 22
53090: PUSH
53091: LD_INT 23
53093: PUSH
53094: LD_INT 25
53096: PUSH
53097: LD_INT 26
53099: PUSH
53100: LD_INT 30
53102: PUSH
53103: LD_INT 31
53105: PUSH
53106: LD_INT 32
53108: PUSH
53109: LD_INT 36
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 101
53135: PUSH
53136: LD_INT 102
53138: PUSH
53139: LD_INT 105
53141: PUSH
53142: LD_INT 106
53144: PUSH
53145: LD_INT 108
53147: PUSH
53148: LD_INT 109
53150: PUSH
53151: LD_INT 112
53153: PUSH
53154: LD_INT 116
53156: PUSH
53157: LD_INT 117
53159: PUSH
53160: LD_INT 118
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: ST_TO_ADDR
53179: GO 55702
53181: LD_INT 7
53183: DOUBLE
53184: EQUAL
53185: IFTRUE 53189
53187: GO 53301
53189: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
53190: LD_ADDR_VAR 0 2
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: LD_INT 4
53200: PUSH
53201: LD_INT 5
53203: PUSH
53204: LD_INT 7
53206: PUSH
53207: LD_INT 11
53209: PUSH
53210: LD_INT 12
53212: PUSH
53213: LD_INT 15
53215: PUSH
53216: LD_INT 16
53218: PUSH
53219: LD_INT 20
53221: PUSH
53222: LD_INT 21
53224: PUSH
53225: LD_INT 22
53227: PUSH
53228: LD_INT 23
53230: PUSH
53231: LD_INT 25
53233: PUSH
53234: LD_INT 26
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 101
53255: PUSH
53256: LD_INT 102
53258: PUSH
53259: LD_INT 103
53261: PUSH
53262: LD_INT 105
53264: PUSH
53265: LD_INT 106
53267: PUSH
53268: LD_INT 108
53270: PUSH
53271: LD_INT 112
53273: PUSH
53274: LD_INT 116
53276: PUSH
53277: LD_INT 117
53279: PUSH
53280: LD_INT 118
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: ST_TO_ADDR
53299: GO 55702
53301: LD_INT 8
53303: DOUBLE
53304: EQUAL
53305: IFTRUE 53309
53307: GO 53449
53309: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
53310: LD_ADDR_VAR 0 2
53314: PUSH
53315: LD_INT 2
53317: PUSH
53318: LD_INT 4
53320: PUSH
53321: LD_INT 5
53323: PUSH
53324: LD_INT 6
53326: PUSH
53327: LD_INT 7
53329: PUSH
53330: LD_INT 8
53332: PUSH
53333: LD_INT 11
53335: PUSH
53336: LD_INT 12
53338: PUSH
53339: LD_INT 15
53341: PUSH
53342: LD_INT 16
53344: PUSH
53345: LD_INT 20
53347: PUSH
53348: LD_INT 21
53350: PUSH
53351: LD_INT 22
53353: PUSH
53354: LD_INT 23
53356: PUSH
53357: LD_INT 25
53359: PUSH
53360: LD_INT 26
53362: PUSH
53363: LD_INT 30
53365: PUSH
53366: LD_INT 31
53368: PUSH
53369: LD_INT 32
53371: PUSH
53372: LD_INT 36
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 101
53399: PUSH
53400: LD_INT 102
53402: PUSH
53403: LD_INT 103
53405: PUSH
53406: LD_INT 105
53408: PUSH
53409: LD_INT 106
53411: PUSH
53412: LD_INT 108
53414: PUSH
53415: LD_INT 109
53417: PUSH
53418: LD_INT 112
53420: PUSH
53421: LD_INT 116
53423: PUSH
53424: LD_INT 117
53426: PUSH
53427: LD_INT 118
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: ST_TO_ADDR
53447: GO 55702
53449: LD_INT 9
53451: DOUBLE
53452: EQUAL
53453: IFTRUE 53457
53455: GO 53605
53457: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
53458: LD_ADDR_VAR 0 2
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: LD_INT 4
53468: PUSH
53469: LD_INT 5
53471: PUSH
53472: LD_INT 6
53474: PUSH
53475: LD_INT 7
53477: PUSH
53478: LD_INT 8
53480: PUSH
53481: LD_INT 11
53483: PUSH
53484: LD_INT 12
53486: PUSH
53487: LD_INT 15
53489: PUSH
53490: LD_INT 16
53492: PUSH
53493: LD_INT 20
53495: PUSH
53496: LD_INT 21
53498: PUSH
53499: LD_INT 22
53501: PUSH
53502: LD_INT 23
53504: PUSH
53505: LD_INT 25
53507: PUSH
53508: LD_INT 26
53510: PUSH
53511: LD_INT 28
53513: PUSH
53514: LD_INT 30
53516: PUSH
53517: LD_INT 31
53519: PUSH
53520: LD_INT 32
53522: PUSH
53523: LD_INT 36
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 101
53551: PUSH
53552: LD_INT 102
53554: PUSH
53555: LD_INT 103
53557: PUSH
53558: LD_INT 105
53560: PUSH
53561: LD_INT 106
53563: PUSH
53564: LD_INT 108
53566: PUSH
53567: LD_INT 109
53569: PUSH
53570: LD_INT 112
53572: PUSH
53573: LD_INT 114
53575: PUSH
53576: LD_INT 116
53578: PUSH
53579: LD_INT 117
53581: PUSH
53582: LD_INT 118
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: ST_TO_ADDR
53603: GO 55702
53605: LD_INT 10
53607: DOUBLE
53608: EQUAL
53609: IFTRUE 53613
53611: GO 53809
53613: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
53614: LD_ADDR_VAR 0 2
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: LD_INT 4
53624: PUSH
53625: LD_INT 5
53627: PUSH
53628: LD_INT 6
53630: PUSH
53631: LD_INT 7
53633: PUSH
53634: LD_INT 8
53636: PUSH
53637: LD_INT 9
53639: PUSH
53640: LD_INT 10
53642: PUSH
53643: LD_INT 11
53645: PUSH
53646: LD_INT 12
53648: PUSH
53649: LD_INT 13
53651: PUSH
53652: LD_INT 14
53654: PUSH
53655: LD_INT 15
53657: PUSH
53658: LD_INT 16
53660: PUSH
53661: LD_INT 17
53663: PUSH
53664: LD_INT 18
53666: PUSH
53667: LD_INT 19
53669: PUSH
53670: LD_INT 20
53672: PUSH
53673: LD_INT 21
53675: PUSH
53676: LD_INT 22
53678: PUSH
53679: LD_INT 23
53681: PUSH
53682: LD_INT 24
53684: PUSH
53685: LD_INT 25
53687: PUSH
53688: LD_INT 26
53690: PUSH
53691: LD_INT 28
53693: PUSH
53694: LD_INT 30
53696: PUSH
53697: LD_INT 31
53699: PUSH
53700: LD_INT 32
53702: PUSH
53703: LD_INT 36
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 101
53739: PUSH
53740: LD_INT 102
53742: PUSH
53743: LD_INT 103
53745: PUSH
53746: LD_INT 104
53748: PUSH
53749: LD_INT 105
53751: PUSH
53752: LD_INT 106
53754: PUSH
53755: LD_INT 107
53757: PUSH
53758: LD_INT 108
53760: PUSH
53761: LD_INT 109
53763: PUSH
53764: LD_INT 110
53766: PUSH
53767: LD_INT 111
53769: PUSH
53770: LD_INT 112
53772: PUSH
53773: LD_INT 114
53775: PUSH
53776: LD_INT 116
53778: PUSH
53779: LD_INT 117
53781: PUSH
53782: LD_INT 118
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: ST_TO_ADDR
53807: GO 55702
53809: LD_INT 11
53811: DOUBLE
53812: EQUAL
53813: IFTRUE 53817
53815: GO 54021
53817: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
53818: LD_ADDR_VAR 0 2
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: LD_INT 3
53828: PUSH
53829: LD_INT 4
53831: PUSH
53832: LD_INT 5
53834: PUSH
53835: LD_INT 6
53837: PUSH
53838: LD_INT 7
53840: PUSH
53841: LD_INT 8
53843: PUSH
53844: LD_INT 9
53846: PUSH
53847: LD_INT 10
53849: PUSH
53850: LD_INT 11
53852: PUSH
53853: LD_INT 12
53855: PUSH
53856: LD_INT 13
53858: PUSH
53859: LD_INT 14
53861: PUSH
53862: LD_INT 15
53864: PUSH
53865: LD_INT 16
53867: PUSH
53868: LD_INT 17
53870: PUSH
53871: LD_INT 18
53873: PUSH
53874: LD_INT 19
53876: PUSH
53877: LD_INT 20
53879: PUSH
53880: LD_INT 21
53882: PUSH
53883: LD_INT 22
53885: PUSH
53886: LD_INT 23
53888: PUSH
53889: LD_INT 24
53891: PUSH
53892: LD_INT 25
53894: PUSH
53895: LD_INT 26
53897: PUSH
53898: LD_INT 28
53900: PUSH
53901: LD_INT 30
53903: PUSH
53904: LD_INT 31
53906: PUSH
53907: LD_INT 32
53909: PUSH
53910: LD_INT 34
53912: PUSH
53913: LD_INT 36
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 101
53951: PUSH
53952: LD_INT 102
53954: PUSH
53955: LD_INT 103
53957: PUSH
53958: LD_INT 104
53960: PUSH
53961: LD_INT 105
53963: PUSH
53964: LD_INT 106
53966: PUSH
53967: LD_INT 107
53969: PUSH
53970: LD_INT 108
53972: PUSH
53973: LD_INT 109
53975: PUSH
53976: LD_INT 110
53978: PUSH
53979: LD_INT 111
53981: PUSH
53982: LD_INT 112
53984: PUSH
53985: LD_INT 114
53987: PUSH
53988: LD_INT 116
53990: PUSH
53991: LD_INT 117
53993: PUSH
53994: LD_INT 118
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: ST_TO_ADDR
54019: GO 55702
54021: LD_INT 12
54023: DOUBLE
54024: EQUAL
54025: IFTRUE 54029
54027: GO 54249
54029: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
54030: LD_ADDR_VAR 0 2
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: LD_INT 2
54040: PUSH
54041: LD_INT 3
54043: PUSH
54044: LD_INT 4
54046: PUSH
54047: LD_INT 5
54049: PUSH
54050: LD_INT 6
54052: PUSH
54053: LD_INT 7
54055: PUSH
54056: LD_INT 8
54058: PUSH
54059: LD_INT 9
54061: PUSH
54062: LD_INT 10
54064: PUSH
54065: LD_INT 11
54067: PUSH
54068: LD_INT 12
54070: PUSH
54071: LD_INT 13
54073: PUSH
54074: LD_INT 14
54076: PUSH
54077: LD_INT 15
54079: PUSH
54080: LD_INT 16
54082: PUSH
54083: LD_INT 17
54085: PUSH
54086: LD_INT 18
54088: PUSH
54089: LD_INT 19
54091: PUSH
54092: LD_INT 20
54094: PUSH
54095: LD_INT 21
54097: PUSH
54098: LD_INT 22
54100: PUSH
54101: LD_INT 23
54103: PUSH
54104: LD_INT 24
54106: PUSH
54107: LD_INT 25
54109: PUSH
54110: LD_INT 26
54112: PUSH
54113: LD_INT 27
54115: PUSH
54116: LD_INT 28
54118: PUSH
54119: LD_INT 30
54121: PUSH
54122: LD_INT 31
54124: PUSH
54125: LD_INT 32
54127: PUSH
54128: LD_INT 33
54130: PUSH
54131: LD_INT 34
54133: PUSH
54134: LD_INT 36
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 101
54175: PUSH
54176: LD_INT 102
54178: PUSH
54179: LD_INT 103
54181: PUSH
54182: LD_INT 104
54184: PUSH
54185: LD_INT 105
54187: PUSH
54188: LD_INT 106
54190: PUSH
54191: LD_INT 107
54193: PUSH
54194: LD_INT 108
54196: PUSH
54197: LD_INT 109
54199: PUSH
54200: LD_INT 110
54202: PUSH
54203: LD_INT 111
54205: PUSH
54206: LD_INT 112
54208: PUSH
54209: LD_INT 113
54211: PUSH
54212: LD_INT 114
54214: PUSH
54215: LD_INT 116
54217: PUSH
54218: LD_INT 117
54220: PUSH
54221: LD_INT 118
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: ST_TO_ADDR
54247: GO 55702
54249: LD_INT 13
54251: DOUBLE
54252: EQUAL
54253: IFTRUE 54257
54255: GO 54465
54257: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
54258: LD_ADDR_VAR 0 2
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: LD_INT 3
54271: PUSH
54272: LD_INT 4
54274: PUSH
54275: LD_INT 5
54277: PUSH
54278: LD_INT 8
54280: PUSH
54281: LD_INT 9
54283: PUSH
54284: LD_INT 10
54286: PUSH
54287: LD_INT 11
54289: PUSH
54290: LD_INT 12
54292: PUSH
54293: LD_INT 14
54295: PUSH
54296: LD_INT 15
54298: PUSH
54299: LD_INT 16
54301: PUSH
54302: LD_INT 17
54304: PUSH
54305: LD_INT 18
54307: PUSH
54308: LD_INT 19
54310: PUSH
54311: LD_INT 20
54313: PUSH
54314: LD_INT 21
54316: PUSH
54317: LD_INT 22
54319: PUSH
54320: LD_INT 23
54322: PUSH
54323: LD_INT 24
54325: PUSH
54326: LD_INT 25
54328: PUSH
54329: LD_INT 26
54331: PUSH
54332: LD_INT 27
54334: PUSH
54335: LD_INT 28
54337: PUSH
54338: LD_INT 30
54340: PUSH
54341: LD_INT 31
54343: PUSH
54344: LD_INT 32
54346: PUSH
54347: LD_INT 33
54349: PUSH
54350: LD_INT 34
54352: PUSH
54353: LD_INT 36
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 101
54391: PUSH
54392: LD_INT 102
54394: PUSH
54395: LD_INT 103
54397: PUSH
54398: LD_INT 104
54400: PUSH
54401: LD_INT 105
54403: PUSH
54404: LD_INT 106
54406: PUSH
54407: LD_INT 107
54409: PUSH
54410: LD_INT 108
54412: PUSH
54413: LD_INT 109
54415: PUSH
54416: LD_INT 110
54418: PUSH
54419: LD_INT 111
54421: PUSH
54422: LD_INT 112
54424: PUSH
54425: LD_INT 113
54427: PUSH
54428: LD_INT 114
54430: PUSH
54431: LD_INT 116
54433: PUSH
54434: LD_INT 117
54436: PUSH
54437: LD_INT 118
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: ST_TO_ADDR
54463: GO 55702
54465: LD_INT 14
54467: DOUBLE
54468: EQUAL
54469: IFTRUE 54473
54471: GO 54697
54473: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
54474: LD_ADDR_VAR 0 2
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: LD_INT 3
54487: PUSH
54488: LD_INT 4
54490: PUSH
54491: LD_INT 5
54493: PUSH
54494: LD_INT 6
54496: PUSH
54497: LD_INT 7
54499: PUSH
54500: LD_INT 8
54502: PUSH
54503: LD_INT 9
54505: PUSH
54506: LD_INT 10
54508: PUSH
54509: LD_INT 11
54511: PUSH
54512: LD_INT 12
54514: PUSH
54515: LD_INT 13
54517: PUSH
54518: LD_INT 14
54520: PUSH
54521: LD_INT 15
54523: PUSH
54524: LD_INT 16
54526: PUSH
54527: LD_INT 17
54529: PUSH
54530: LD_INT 18
54532: PUSH
54533: LD_INT 19
54535: PUSH
54536: LD_INT 20
54538: PUSH
54539: LD_INT 21
54541: PUSH
54542: LD_INT 22
54544: PUSH
54545: LD_INT 23
54547: PUSH
54548: LD_INT 24
54550: PUSH
54551: LD_INT 25
54553: PUSH
54554: LD_INT 26
54556: PUSH
54557: LD_INT 27
54559: PUSH
54560: LD_INT 28
54562: PUSH
54563: LD_INT 29
54565: PUSH
54566: LD_INT 30
54568: PUSH
54569: LD_INT 31
54571: PUSH
54572: LD_INT 32
54574: PUSH
54575: LD_INT 33
54577: PUSH
54578: LD_INT 34
54580: PUSH
54581: LD_INT 36
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 101
54623: PUSH
54624: LD_INT 102
54626: PUSH
54627: LD_INT 103
54629: PUSH
54630: LD_INT 104
54632: PUSH
54633: LD_INT 105
54635: PUSH
54636: LD_INT 106
54638: PUSH
54639: LD_INT 107
54641: PUSH
54642: LD_INT 108
54644: PUSH
54645: LD_INT 109
54647: PUSH
54648: LD_INT 110
54650: PUSH
54651: LD_INT 111
54653: PUSH
54654: LD_INT 112
54656: PUSH
54657: LD_INT 113
54659: PUSH
54660: LD_INT 114
54662: PUSH
54663: LD_INT 116
54665: PUSH
54666: LD_INT 117
54668: PUSH
54669: LD_INT 118
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: ST_TO_ADDR
54695: GO 55702
54697: LD_INT 15
54699: DOUBLE
54700: EQUAL
54701: IFTRUE 54705
54703: GO 54929
54705: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
54706: LD_ADDR_VAR 0 2
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: LD_INT 3
54719: PUSH
54720: LD_INT 4
54722: PUSH
54723: LD_INT 5
54725: PUSH
54726: LD_INT 6
54728: PUSH
54729: LD_INT 7
54731: PUSH
54732: LD_INT 8
54734: PUSH
54735: LD_INT 9
54737: PUSH
54738: LD_INT 10
54740: PUSH
54741: LD_INT 11
54743: PUSH
54744: LD_INT 12
54746: PUSH
54747: LD_INT 13
54749: PUSH
54750: LD_INT 14
54752: PUSH
54753: LD_INT 15
54755: PUSH
54756: LD_INT 16
54758: PUSH
54759: LD_INT 17
54761: PUSH
54762: LD_INT 18
54764: PUSH
54765: LD_INT 19
54767: PUSH
54768: LD_INT 20
54770: PUSH
54771: LD_INT 21
54773: PUSH
54774: LD_INT 22
54776: PUSH
54777: LD_INT 23
54779: PUSH
54780: LD_INT 24
54782: PUSH
54783: LD_INT 25
54785: PUSH
54786: LD_INT 26
54788: PUSH
54789: LD_INT 27
54791: PUSH
54792: LD_INT 28
54794: PUSH
54795: LD_INT 29
54797: PUSH
54798: LD_INT 30
54800: PUSH
54801: LD_INT 31
54803: PUSH
54804: LD_INT 32
54806: PUSH
54807: LD_INT 33
54809: PUSH
54810: LD_INT 34
54812: PUSH
54813: LD_INT 36
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 101
54855: PUSH
54856: LD_INT 102
54858: PUSH
54859: LD_INT 103
54861: PUSH
54862: LD_INT 104
54864: PUSH
54865: LD_INT 105
54867: PUSH
54868: LD_INT 106
54870: PUSH
54871: LD_INT 107
54873: PUSH
54874: LD_INT 108
54876: PUSH
54877: LD_INT 109
54879: PUSH
54880: LD_INT 110
54882: PUSH
54883: LD_INT 111
54885: PUSH
54886: LD_INT 112
54888: PUSH
54889: LD_INT 113
54891: PUSH
54892: LD_INT 114
54894: PUSH
54895: LD_INT 116
54897: PUSH
54898: LD_INT 117
54900: PUSH
54901: LD_INT 118
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: ST_TO_ADDR
54927: GO 55702
54929: LD_INT 16
54931: DOUBLE
54932: EQUAL
54933: IFTRUE 54937
54935: GO 55073
54937: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
54938: LD_ADDR_VAR 0 2
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: LD_INT 4
54948: PUSH
54949: LD_INT 5
54951: PUSH
54952: LD_INT 7
54954: PUSH
54955: LD_INT 11
54957: PUSH
54958: LD_INT 12
54960: PUSH
54961: LD_INT 15
54963: PUSH
54964: LD_INT 16
54966: PUSH
54967: LD_INT 20
54969: PUSH
54970: LD_INT 21
54972: PUSH
54973: LD_INT 22
54975: PUSH
54976: LD_INT 23
54978: PUSH
54979: LD_INT 25
54981: PUSH
54982: LD_INT 26
54984: PUSH
54985: LD_INT 30
54987: PUSH
54988: LD_INT 31
54990: PUSH
54991: LD_INT 32
54993: PUSH
54994: LD_INT 33
54996: PUSH
54997: LD_INT 34
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 101
55023: PUSH
55024: LD_INT 102
55026: PUSH
55027: LD_INT 103
55029: PUSH
55030: LD_INT 106
55032: PUSH
55033: LD_INT 108
55035: PUSH
55036: LD_INT 112
55038: PUSH
55039: LD_INT 113
55041: PUSH
55042: LD_INT 114
55044: PUSH
55045: LD_INT 116
55047: PUSH
55048: LD_INT 117
55050: PUSH
55051: LD_INT 118
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: ST_TO_ADDR
55071: GO 55702
55073: LD_INT 17
55075: DOUBLE
55076: EQUAL
55077: IFTRUE 55081
55079: GO 55305
55081: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
55082: LD_ADDR_VAR 0 2
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: LD_INT 3
55095: PUSH
55096: LD_INT 4
55098: PUSH
55099: LD_INT 5
55101: PUSH
55102: LD_INT 6
55104: PUSH
55105: LD_INT 7
55107: PUSH
55108: LD_INT 8
55110: PUSH
55111: LD_INT 9
55113: PUSH
55114: LD_INT 10
55116: PUSH
55117: LD_INT 11
55119: PUSH
55120: LD_INT 12
55122: PUSH
55123: LD_INT 13
55125: PUSH
55126: LD_INT 14
55128: PUSH
55129: LD_INT 15
55131: PUSH
55132: LD_INT 16
55134: PUSH
55135: LD_INT 17
55137: PUSH
55138: LD_INT 18
55140: PUSH
55141: LD_INT 19
55143: PUSH
55144: LD_INT 20
55146: PUSH
55147: LD_INT 21
55149: PUSH
55150: LD_INT 22
55152: PUSH
55153: LD_INT 23
55155: PUSH
55156: LD_INT 24
55158: PUSH
55159: LD_INT 25
55161: PUSH
55162: LD_INT 26
55164: PUSH
55165: LD_INT 27
55167: PUSH
55168: LD_INT 28
55170: PUSH
55171: LD_INT 29
55173: PUSH
55174: LD_INT 30
55176: PUSH
55177: LD_INT 31
55179: PUSH
55180: LD_INT 32
55182: PUSH
55183: LD_INT 33
55185: PUSH
55186: LD_INT 34
55188: PUSH
55189: LD_INT 36
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 101
55231: PUSH
55232: LD_INT 102
55234: PUSH
55235: LD_INT 103
55237: PUSH
55238: LD_INT 104
55240: PUSH
55241: LD_INT 105
55243: PUSH
55244: LD_INT 106
55246: PUSH
55247: LD_INT 107
55249: PUSH
55250: LD_INT 108
55252: PUSH
55253: LD_INT 109
55255: PUSH
55256: LD_INT 110
55258: PUSH
55259: LD_INT 111
55261: PUSH
55262: LD_INT 112
55264: PUSH
55265: LD_INT 113
55267: PUSH
55268: LD_INT 114
55270: PUSH
55271: LD_INT 116
55273: PUSH
55274: LD_INT 117
55276: PUSH
55277: LD_INT 118
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: ST_TO_ADDR
55303: GO 55702
55305: LD_INT 18
55307: DOUBLE
55308: EQUAL
55309: IFTRUE 55313
55311: GO 55461
55313: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
55314: LD_ADDR_VAR 0 2
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: LD_INT 4
55324: PUSH
55325: LD_INT 5
55327: PUSH
55328: LD_INT 7
55330: PUSH
55331: LD_INT 11
55333: PUSH
55334: LD_INT 12
55336: PUSH
55337: LD_INT 15
55339: PUSH
55340: LD_INT 16
55342: PUSH
55343: LD_INT 20
55345: PUSH
55346: LD_INT 21
55348: PUSH
55349: LD_INT 22
55351: PUSH
55352: LD_INT 23
55354: PUSH
55355: LD_INT 25
55357: PUSH
55358: LD_INT 26
55360: PUSH
55361: LD_INT 30
55363: PUSH
55364: LD_INT 31
55366: PUSH
55367: LD_INT 32
55369: PUSH
55370: LD_INT 33
55372: PUSH
55373: LD_INT 34
55375: PUSH
55376: LD_INT 35
55378: PUSH
55379: LD_INT 36
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 101
55407: PUSH
55408: LD_INT 102
55410: PUSH
55411: LD_INT 103
55413: PUSH
55414: LD_INT 106
55416: PUSH
55417: LD_INT 108
55419: PUSH
55420: LD_INT 112
55422: PUSH
55423: LD_INT 113
55425: PUSH
55426: LD_INT 114
55428: PUSH
55429: LD_INT 115
55431: PUSH
55432: LD_INT 116
55434: PUSH
55435: LD_INT 117
55437: PUSH
55438: LD_INT 118
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: ST_TO_ADDR
55459: GO 55702
55461: LD_INT 19
55463: DOUBLE
55464: EQUAL
55465: IFTRUE 55469
55467: GO 55701
55469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
55470: LD_ADDR_VAR 0 2
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: LD_INT 3
55483: PUSH
55484: LD_INT 4
55486: PUSH
55487: LD_INT 5
55489: PUSH
55490: LD_INT 6
55492: PUSH
55493: LD_INT 7
55495: PUSH
55496: LD_INT 8
55498: PUSH
55499: LD_INT 9
55501: PUSH
55502: LD_INT 10
55504: PUSH
55505: LD_INT 11
55507: PUSH
55508: LD_INT 12
55510: PUSH
55511: LD_INT 13
55513: PUSH
55514: LD_INT 14
55516: PUSH
55517: LD_INT 15
55519: PUSH
55520: LD_INT 16
55522: PUSH
55523: LD_INT 17
55525: PUSH
55526: LD_INT 18
55528: PUSH
55529: LD_INT 19
55531: PUSH
55532: LD_INT 20
55534: PUSH
55535: LD_INT 21
55537: PUSH
55538: LD_INT 22
55540: PUSH
55541: LD_INT 23
55543: PUSH
55544: LD_INT 24
55546: PUSH
55547: LD_INT 25
55549: PUSH
55550: LD_INT 26
55552: PUSH
55553: LD_INT 27
55555: PUSH
55556: LD_INT 28
55558: PUSH
55559: LD_INT 29
55561: PUSH
55562: LD_INT 30
55564: PUSH
55565: LD_INT 31
55567: PUSH
55568: LD_INT 32
55570: PUSH
55571: LD_INT 33
55573: PUSH
55574: LD_INT 34
55576: PUSH
55577: LD_INT 35
55579: PUSH
55580: LD_INT 36
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 101
55623: PUSH
55624: LD_INT 102
55626: PUSH
55627: LD_INT 103
55629: PUSH
55630: LD_INT 104
55632: PUSH
55633: LD_INT 105
55635: PUSH
55636: LD_INT 106
55638: PUSH
55639: LD_INT 107
55641: PUSH
55642: LD_INT 108
55644: PUSH
55645: LD_INT 109
55647: PUSH
55648: LD_INT 110
55650: PUSH
55651: LD_INT 111
55653: PUSH
55654: LD_INT 112
55656: PUSH
55657: LD_INT 113
55659: PUSH
55660: LD_INT 114
55662: PUSH
55663: LD_INT 115
55665: PUSH
55666: LD_INT 116
55668: PUSH
55669: LD_INT 117
55671: PUSH
55672: LD_INT 118
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: ST_TO_ADDR
55699: GO 55702
55701: POP
// end else
55702: GO 55933
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
55704: LD_ADDR_VAR 0 2
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: LD_INT 3
55717: PUSH
55718: LD_INT 4
55720: PUSH
55721: LD_INT 5
55723: PUSH
55724: LD_INT 6
55726: PUSH
55727: LD_INT 7
55729: PUSH
55730: LD_INT 8
55732: PUSH
55733: LD_INT 9
55735: PUSH
55736: LD_INT 10
55738: PUSH
55739: LD_INT 11
55741: PUSH
55742: LD_INT 12
55744: PUSH
55745: LD_INT 13
55747: PUSH
55748: LD_INT 14
55750: PUSH
55751: LD_INT 15
55753: PUSH
55754: LD_INT 16
55756: PUSH
55757: LD_INT 17
55759: PUSH
55760: LD_INT 18
55762: PUSH
55763: LD_INT 19
55765: PUSH
55766: LD_INT 20
55768: PUSH
55769: LD_INT 21
55771: PUSH
55772: LD_INT 22
55774: PUSH
55775: LD_INT 23
55777: PUSH
55778: LD_INT 24
55780: PUSH
55781: LD_INT 25
55783: PUSH
55784: LD_INT 26
55786: PUSH
55787: LD_INT 27
55789: PUSH
55790: LD_INT 28
55792: PUSH
55793: LD_INT 29
55795: PUSH
55796: LD_INT 30
55798: PUSH
55799: LD_INT 31
55801: PUSH
55802: LD_INT 32
55804: PUSH
55805: LD_INT 33
55807: PUSH
55808: LD_INT 34
55810: PUSH
55811: LD_INT 35
55813: PUSH
55814: LD_INT 36
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 101
55857: PUSH
55858: LD_INT 102
55860: PUSH
55861: LD_INT 103
55863: PUSH
55864: LD_INT 104
55866: PUSH
55867: LD_INT 105
55869: PUSH
55870: LD_INT 106
55872: PUSH
55873: LD_INT 107
55875: PUSH
55876: LD_INT 108
55878: PUSH
55879: LD_INT 109
55881: PUSH
55882: LD_INT 110
55884: PUSH
55885: LD_INT 111
55887: PUSH
55888: LD_INT 112
55890: PUSH
55891: LD_INT 113
55893: PUSH
55894: LD_INT 114
55896: PUSH
55897: LD_INT 115
55899: PUSH
55900: LD_INT 116
55902: PUSH
55903: LD_INT 117
55905: PUSH
55906: LD_INT 118
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: ST_TO_ADDR
// if result then
55933: LD_VAR 0 2
55937: IFFALSE 56723
// begin normal :=  ;
55939: LD_ADDR_VAR 0 5
55943: PUSH
55944: LD_STRING 
55946: ST_TO_ADDR
// hardcore :=  ;
55947: LD_ADDR_VAR 0 6
55951: PUSH
55952: LD_STRING 
55954: ST_TO_ADDR
// active :=  ;
55955: LD_ADDR_VAR 0 7
55959: PUSH
55960: LD_STRING 
55962: ST_TO_ADDR
// for i = 1 to normalCounter do
55963: LD_ADDR_VAR 0 8
55967: PUSH
55968: DOUBLE
55969: LD_INT 1
55971: DEC
55972: ST_TO_ADDR
55973: LD_EXP 40
55977: PUSH
55978: FOR_TO
55979: IFFALSE 56080
// begin tmp := 0 ;
55981: LD_ADDR_VAR 0 3
55985: PUSH
55986: LD_STRING 0
55988: ST_TO_ADDR
// if result [ 1 ] then
55989: LD_VAR 0 2
55993: PUSH
55994: LD_INT 1
55996: ARRAY
55997: IFFALSE 56062
// if result [ 1 ] [ 1 ] = i then
55999: LD_VAR 0 2
56003: PUSH
56004: LD_INT 1
56006: ARRAY
56007: PUSH
56008: LD_INT 1
56010: ARRAY
56011: PUSH
56012: LD_VAR 0 8
56016: EQUAL
56017: IFFALSE 56062
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
56019: LD_ADDR_VAR 0 2
56023: PUSH
56024: LD_VAR 0 2
56028: PPUSH
56029: LD_INT 1
56031: PPUSH
56032: LD_VAR 0 2
56036: PUSH
56037: LD_INT 1
56039: ARRAY
56040: PPUSH
56041: LD_INT 1
56043: PPUSH
56044: CALL_OW 3
56048: PPUSH
56049: CALL_OW 1
56053: ST_TO_ADDR
// tmp := 1 ;
56054: LD_ADDR_VAR 0 3
56058: PUSH
56059: LD_STRING 1
56061: ST_TO_ADDR
// end ; normal := normal & tmp ;
56062: LD_ADDR_VAR 0 5
56066: PUSH
56067: LD_VAR 0 5
56071: PUSH
56072: LD_VAR 0 3
56076: STR
56077: ST_TO_ADDR
// end ;
56078: GO 55978
56080: POP
56081: POP
// for i = 1 to hardcoreCounter do
56082: LD_ADDR_VAR 0 8
56086: PUSH
56087: DOUBLE
56088: LD_INT 1
56090: DEC
56091: ST_TO_ADDR
56092: LD_EXP 41
56096: PUSH
56097: FOR_TO
56098: IFFALSE 56203
// begin tmp := 0 ;
56100: LD_ADDR_VAR 0 3
56104: PUSH
56105: LD_STRING 0
56107: ST_TO_ADDR
// if result [ 2 ] then
56108: LD_VAR 0 2
56112: PUSH
56113: LD_INT 2
56115: ARRAY
56116: IFFALSE 56185
// if result [ 2 ] [ 1 ] = 100 + i then
56118: LD_VAR 0 2
56122: PUSH
56123: LD_INT 2
56125: ARRAY
56126: PUSH
56127: LD_INT 1
56129: ARRAY
56130: PUSH
56131: LD_INT 100
56133: PUSH
56134: LD_VAR 0 8
56138: PLUS
56139: EQUAL
56140: IFFALSE 56185
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
56142: LD_ADDR_VAR 0 2
56146: PUSH
56147: LD_VAR 0 2
56151: PPUSH
56152: LD_INT 2
56154: PPUSH
56155: LD_VAR 0 2
56159: PUSH
56160: LD_INT 2
56162: ARRAY
56163: PPUSH
56164: LD_INT 1
56166: PPUSH
56167: CALL_OW 3
56171: PPUSH
56172: CALL_OW 1
56176: ST_TO_ADDR
// tmp := 1 ;
56177: LD_ADDR_VAR 0 3
56181: PUSH
56182: LD_STRING 1
56184: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
56185: LD_ADDR_VAR 0 6
56189: PUSH
56190: LD_VAR 0 6
56194: PUSH
56195: LD_VAR 0 3
56199: STR
56200: ST_TO_ADDR
// end ;
56201: GO 56097
56203: POP
56204: POP
// if isGameLoad then
56205: LD_VAR 0 1
56209: IFFALSE 56684
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
56211: LD_ADDR_VAR 0 4
56215: PUSH
56216: LD_EXP 44
56220: PUSH
56221: LD_EXP 43
56225: PUSH
56226: LD_EXP 45
56230: PUSH
56231: LD_EXP 42
56235: PUSH
56236: LD_EXP 46
56240: PUSH
56241: LD_EXP 47
56245: PUSH
56246: LD_EXP 48
56250: PUSH
56251: LD_EXP 49
56255: PUSH
56256: LD_EXP 50
56260: PUSH
56261: LD_EXP 51
56265: PUSH
56266: LD_EXP 52
56270: PUSH
56271: LD_EXP 53
56275: PUSH
56276: LD_EXP 54
56280: PUSH
56281: LD_EXP 55
56285: PUSH
56286: LD_EXP 63
56290: PUSH
56291: LD_EXP 64
56295: PUSH
56296: LD_EXP 65
56300: PUSH
56301: LD_EXP 66
56305: PUSH
56306: LD_EXP 68
56310: PUSH
56311: LD_EXP 69
56315: PUSH
56316: LD_EXP 70
56320: PUSH
56321: LD_EXP 73
56325: PUSH
56326: LD_EXP 75
56330: PUSH
56331: LD_EXP 76
56335: PUSH
56336: LD_EXP 77
56340: PUSH
56341: LD_EXP 79
56345: PUSH
56346: LD_EXP 80
56350: PUSH
56351: LD_EXP 83
56355: PUSH
56356: LD_EXP 84
56360: PUSH
56361: LD_EXP 85
56365: PUSH
56366: LD_EXP 86
56370: PUSH
56371: LD_EXP 87
56375: PUSH
56376: LD_EXP 88
56380: PUSH
56381: LD_EXP 89
56385: PUSH
56386: LD_EXP 90
56390: PUSH
56391: LD_EXP 91
56395: PUSH
56396: LD_EXP 56
56400: PUSH
56401: LD_EXP 57
56405: PUSH
56406: LD_EXP 60
56410: PUSH
56411: LD_EXP 61
56415: PUSH
56416: LD_EXP 62
56420: PUSH
56421: LD_EXP 58
56425: PUSH
56426: LD_EXP 59
56430: PUSH
56431: LD_EXP 67
56435: PUSH
56436: LD_EXP 71
56440: PUSH
56441: LD_EXP 72
56445: PUSH
56446: LD_EXP 74
56450: PUSH
56451: LD_EXP 78
56455: PUSH
56456: LD_EXP 81
56460: PUSH
56461: LD_EXP 82
56465: PUSH
56466: LD_EXP 92
56470: PUSH
56471: LD_EXP 93
56475: PUSH
56476: LD_EXP 94
56480: PUSH
56481: LD_EXP 95
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: ST_TO_ADDR
// tmp :=  ;
56542: LD_ADDR_VAR 0 3
56546: PUSH
56547: LD_STRING 
56549: ST_TO_ADDR
// for i = 1 to normalCounter do
56550: LD_ADDR_VAR 0 8
56554: PUSH
56555: DOUBLE
56556: LD_INT 1
56558: DEC
56559: ST_TO_ADDR
56560: LD_EXP 40
56564: PUSH
56565: FOR_TO
56566: IFFALSE 56602
// begin if flags [ i ] then
56568: LD_VAR 0 4
56572: PUSH
56573: LD_VAR 0 8
56577: ARRAY
56578: IFFALSE 56600
// tmp := tmp & i & ; ;
56580: LD_ADDR_VAR 0 3
56584: PUSH
56585: LD_VAR 0 3
56589: PUSH
56590: LD_VAR 0 8
56594: STR
56595: PUSH
56596: LD_STRING ;
56598: STR
56599: ST_TO_ADDR
// end ;
56600: GO 56565
56602: POP
56603: POP
// for i = 1 to hardcoreCounter do
56604: LD_ADDR_VAR 0 8
56608: PUSH
56609: DOUBLE
56610: LD_INT 1
56612: DEC
56613: ST_TO_ADDR
56614: LD_EXP 41
56618: PUSH
56619: FOR_TO
56620: IFFALSE 56666
// begin if flags [ normalCounter + i ] then
56622: LD_VAR 0 4
56626: PUSH
56627: LD_EXP 40
56631: PUSH
56632: LD_VAR 0 8
56636: PLUS
56637: ARRAY
56638: IFFALSE 56664
// tmp := tmp & ( 100 + i ) & ; ;
56640: LD_ADDR_VAR 0 3
56644: PUSH
56645: LD_VAR 0 3
56649: PUSH
56650: LD_INT 100
56652: PUSH
56653: LD_VAR 0 8
56657: PLUS
56658: STR
56659: PUSH
56660: LD_STRING ;
56662: STR
56663: ST_TO_ADDR
// end ;
56664: GO 56619
56666: POP
56667: POP
// if tmp then
56668: LD_VAR 0 3
56672: IFFALSE 56684
// active := tmp ;
56674: LD_ADDR_VAR 0 7
56678: PUSH
56679: LD_VAR 0 3
56683: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56684: LD_STRING getStreamItemsFromMission("
56686: PUSH
56687: LD_VAR 0 5
56691: STR
56692: PUSH
56693: LD_STRING ","
56695: STR
56696: PUSH
56697: LD_VAR 0 6
56701: STR
56702: PUSH
56703: LD_STRING ","
56705: STR
56706: PUSH
56707: LD_VAR 0 7
56711: STR
56712: PUSH
56713: LD_STRING ")
56715: STR
56716: PPUSH
56717: CALL_OW 559
// end else
56721: GO 56730
// ToLua ( getStreamItemsFromMission("","","") ) ;
56723: LD_STRING getStreamItemsFromMission("","","")
56725: PPUSH
56726: CALL_OW 559
// end ;
56730: LD_VAR 0 2
56734: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
56735: LD_EXP 39
56739: PUSH
56740: LD_EXP 44
56744: AND
56745: IFFALSE 56869
56747: GO 56749
56749: DISABLE
56750: LD_INT 0
56752: PPUSH
56753: PPUSH
// begin enable ;
56754: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
56755: LD_ADDR_VAR 0 2
56759: PUSH
56760: LD_INT 22
56762: PUSH
56763: LD_OWVAR 2
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 2
56774: PUSH
56775: LD_INT 34
56777: PUSH
56778: LD_INT 7
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 34
56787: PUSH
56788: LD_INT 45
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 34
56797: PUSH
56798: LD_INT 28
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 34
56807: PUSH
56808: LD_INT 47
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PPUSH
56826: CALL_OW 69
56830: ST_TO_ADDR
// if not tmp then
56831: LD_VAR 0 2
56835: NOT
56836: IFFALSE 56840
// exit ;
56838: GO 56869
// for i in tmp do
56840: LD_ADDR_VAR 0 1
56844: PUSH
56845: LD_VAR 0 2
56849: PUSH
56850: FOR_IN
56851: IFFALSE 56867
// begin SetLives ( i , 0 ) ;
56853: LD_VAR 0 1
56857: PPUSH
56858: LD_INT 0
56860: PPUSH
56861: CALL_OW 234
// end ;
56865: GO 56850
56867: POP
56868: POP
// end ;
56869: PPOPN 2
56871: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
56872: LD_EXP 39
56876: PUSH
56877: LD_EXP 45
56881: AND
56882: IFFALSE 56966
56884: GO 56886
56886: DISABLE
56887: LD_INT 0
56889: PPUSH
56890: PPUSH
// begin enable ;
56891: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
56892: LD_ADDR_VAR 0 2
56896: PUSH
56897: LD_INT 22
56899: PUSH
56900: LD_OWVAR 2
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 32
56911: PUSH
56912: LD_INT 3
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PPUSH
56923: CALL_OW 69
56927: ST_TO_ADDR
// if not tmp then
56928: LD_VAR 0 2
56932: NOT
56933: IFFALSE 56937
// exit ;
56935: GO 56966
// for i in tmp do
56937: LD_ADDR_VAR 0 1
56941: PUSH
56942: LD_VAR 0 2
56946: PUSH
56947: FOR_IN
56948: IFFALSE 56964
// begin SetLives ( i , 0 ) ;
56950: LD_VAR 0 1
56954: PPUSH
56955: LD_INT 0
56957: PPUSH
56958: CALL_OW 234
// end ;
56962: GO 56947
56964: POP
56965: POP
// end ;
56966: PPOPN 2
56968: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
56969: LD_EXP 39
56973: PUSH
56974: LD_EXP 42
56978: AND
56979: IFFALSE 57072
56981: GO 56983
56983: DISABLE
56984: LD_INT 0
56986: PPUSH
// begin enable ;
56987: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
56988: LD_ADDR_VAR 0 1
56992: PUSH
56993: LD_INT 22
56995: PUSH
56996: LD_OWVAR 2
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: LD_INT 25
57010: PUSH
57011: LD_INT 5
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 25
57020: PUSH
57021: LD_INT 9
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 25
57030: PUSH
57031: LD_INT 8
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PPUSH
57048: CALL_OW 69
57052: PUSH
57053: FOR_IN
57054: IFFALSE 57070
// begin SetClass ( i , 1 ) ;
57056: LD_VAR 0 1
57060: PPUSH
57061: LD_INT 1
57063: PPUSH
57064: CALL_OW 336
// end ;
57068: GO 57053
57070: POP
57071: POP
// end ;
57072: PPOPN 1
57074: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
57075: LD_EXP 39
57079: PUSH
57080: LD_EXP 43
57084: AND
57085: PUSH
57086: LD_OWVAR 65
57090: PUSH
57091: LD_INT 7
57093: LESS
57094: AND
57095: IFFALSE 57109
57097: GO 57099
57099: DISABLE
// begin enable ;
57100: ENABLE
// game_speed := 7 ;
57101: LD_ADDR_OWVAR 65
57105: PUSH
57106: LD_INT 7
57108: ST_TO_ADDR
// end ;
57109: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
57110: LD_EXP 39
57114: PUSH
57115: LD_EXP 46
57119: AND
57120: IFFALSE 57322
57122: GO 57124
57124: DISABLE
57125: LD_INT 0
57127: PPUSH
57128: PPUSH
57129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57130: LD_ADDR_VAR 0 3
57134: PUSH
57135: LD_INT 81
57137: PUSH
57138: LD_OWVAR 2
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 21
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PPUSH
57161: CALL_OW 69
57165: ST_TO_ADDR
// if not tmp then
57166: LD_VAR 0 3
57170: NOT
57171: IFFALSE 57175
// exit ;
57173: GO 57322
// if tmp > 5 then
57175: LD_VAR 0 3
57179: PUSH
57180: LD_INT 5
57182: GREATER
57183: IFFALSE 57195
// k := 5 else
57185: LD_ADDR_VAR 0 2
57189: PUSH
57190: LD_INT 5
57192: ST_TO_ADDR
57193: GO 57205
// k := tmp ;
57195: LD_ADDR_VAR 0 2
57199: PUSH
57200: LD_VAR 0 3
57204: ST_TO_ADDR
// for i := 1 to k do
57205: LD_ADDR_VAR 0 1
57209: PUSH
57210: DOUBLE
57211: LD_INT 1
57213: DEC
57214: ST_TO_ADDR
57215: LD_VAR 0 2
57219: PUSH
57220: FOR_TO
57221: IFFALSE 57320
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
57223: LD_VAR 0 3
57227: PUSH
57228: LD_VAR 0 1
57232: ARRAY
57233: PPUSH
57234: LD_VAR 0 1
57238: PUSH
57239: LD_INT 4
57241: MOD
57242: PUSH
57243: LD_INT 1
57245: PLUS
57246: PPUSH
57247: CALL_OW 259
57251: PUSH
57252: LD_INT 10
57254: LESS
57255: IFFALSE 57318
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
57257: LD_VAR 0 3
57261: PUSH
57262: LD_VAR 0 1
57266: ARRAY
57267: PPUSH
57268: LD_VAR 0 1
57272: PUSH
57273: LD_INT 4
57275: MOD
57276: PUSH
57277: LD_INT 1
57279: PLUS
57280: PPUSH
57281: LD_VAR 0 3
57285: PUSH
57286: LD_VAR 0 1
57290: ARRAY
57291: PPUSH
57292: LD_VAR 0 1
57296: PUSH
57297: LD_INT 4
57299: MOD
57300: PUSH
57301: LD_INT 1
57303: PLUS
57304: PPUSH
57305: CALL_OW 259
57309: PUSH
57310: LD_INT 1
57312: PLUS
57313: PPUSH
57314: CALL_OW 237
57318: GO 57220
57320: POP
57321: POP
// end ;
57322: PPOPN 3
57324: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
57325: LD_EXP 39
57329: PUSH
57330: LD_EXP 47
57334: AND
57335: IFFALSE 57355
57337: GO 57339
57339: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
57340: LD_INT 4
57342: PPUSH
57343: LD_OWVAR 2
57347: PPUSH
57348: LD_INT 0
57350: PPUSH
57351: CALL_OW 324
57355: END
// every 0 0$1 trigger StreamModeActive and sShovel do
57356: LD_EXP 39
57360: PUSH
57361: LD_EXP 76
57365: AND
57366: IFFALSE 57386
57368: GO 57370
57370: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
57371: LD_INT 19
57373: PPUSH
57374: LD_OWVAR 2
57378: PPUSH
57379: LD_INT 0
57381: PPUSH
57382: CALL_OW 324
57386: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
57387: LD_EXP 39
57391: PUSH
57392: LD_EXP 48
57396: AND
57397: IFFALSE 57499
57399: GO 57401
57401: DISABLE
57402: LD_INT 0
57404: PPUSH
57405: PPUSH
// begin enable ;
57406: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
57407: LD_ADDR_VAR 0 2
57411: PUSH
57412: LD_INT 22
57414: PUSH
57415: LD_OWVAR 2
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: PUSH
57427: LD_INT 34
57429: PUSH
57430: LD_INT 11
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 34
57439: PUSH
57440: LD_INT 30
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: LIST
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PPUSH
57456: CALL_OW 69
57460: ST_TO_ADDR
// if not tmp then
57461: LD_VAR 0 2
57465: NOT
57466: IFFALSE 57470
// exit ;
57468: GO 57499
// for i in tmp do
57470: LD_ADDR_VAR 0 1
57474: PUSH
57475: LD_VAR 0 2
57479: PUSH
57480: FOR_IN
57481: IFFALSE 57497
// begin SetLives ( i , 0 ) ;
57483: LD_VAR 0 1
57487: PPUSH
57488: LD_INT 0
57490: PPUSH
57491: CALL_OW 234
// end ;
57495: GO 57480
57497: POP
57498: POP
// end ;
57499: PPOPN 2
57501: END
// every 0 0$1 trigger StreamModeActive and sBunker do
57502: LD_EXP 39
57506: PUSH
57507: LD_EXP 49
57511: AND
57512: IFFALSE 57532
57514: GO 57516
57516: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
57517: LD_INT 32
57519: PPUSH
57520: LD_OWVAR 2
57524: PPUSH
57525: LD_INT 0
57527: PPUSH
57528: CALL_OW 324
57532: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
57533: LD_EXP 39
57537: PUSH
57538: LD_EXP 50
57542: AND
57543: IFFALSE 57724
57545: GO 57547
57547: DISABLE
57548: LD_INT 0
57550: PPUSH
57551: PPUSH
57552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
57553: LD_ADDR_VAR 0 2
57557: PUSH
57558: LD_INT 22
57560: PUSH
57561: LD_OWVAR 2
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 33
57572: PUSH
57573: LD_INT 3
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PPUSH
57584: CALL_OW 69
57588: ST_TO_ADDR
// if not tmp then
57589: LD_VAR 0 2
57593: NOT
57594: IFFALSE 57598
// exit ;
57596: GO 57724
// side := 0 ;
57598: LD_ADDR_VAR 0 3
57602: PUSH
57603: LD_INT 0
57605: ST_TO_ADDR
// for i := 1 to 8 do
57606: LD_ADDR_VAR 0 1
57610: PUSH
57611: DOUBLE
57612: LD_INT 1
57614: DEC
57615: ST_TO_ADDR
57616: LD_INT 8
57618: PUSH
57619: FOR_TO
57620: IFFALSE 57668
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
57622: LD_OWVAR 2
57626: PUSH
57627: LD_VAR 0 1
57631: NONEQUAL
57632: PUSH
57633: LD_OWVAR 2
57637: PPUSH
57638: LD_VAR 0 1
57642: PPUSH
57643: CALL_OW 81
57647: PUSH
57648: LD_INT 2
57650: EQUAL
57651: AND
57652: IFFALSE 57666
// begin side := i ;
57654: LD_ADDR_VAR 0 3
57658: PUSH
57659: LD_VAR 0 1
57663: ST_TO_ADDR
// break ;
57664: GO 57668
// end ;
57666: GO 57619
57668: POP
57669: POP
// if not side then
57670: LD_VAR 0 3
57674: NOT
57675: IFFALSE 57679
// exit ;
57677: GO 57724
// for i := 1 to tmp do
57679: LD_ADDR_VAR 0 1
57683: PUSH
57684: DOUBLE
57685: LD_INT 1
57687: DEC
57688: ST_TO_ADDR
57689: LD_VAR 0 2
57693: PUSH
57694: FOR_TO
57695: IFFALSE 57722
// if Prob ( 60 ) then
57697: LD_INT 60
57699: PPUSH
57700: CALL_OW 13
57704: IFFALSE 57720
// SetSide ( i , side ) ;
57706: LD_VAR 0 1
57710: PPUSH
57711: LD_VAR 0 3
57715: PPUSH
57716: CALL_OW 235
57720: GO 57694
57722: POP
57723: POP
// end ;
57724: PPOPN 3
57726: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
57727: LD_EXP 39
57731: PUSH
57732: LD_EXP 52
57736: AND
57737: IFFALSE 57856
57739: GO 57741
57741: DISABLE
57742: LD_INT 0
57744: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
57745: LD_ADDR_VAR 0 1
57749: PUSH
57750: LD_INT 22
57752: PUSH
57753: LD_OWVAR 2
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 21
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 3
57774: PUSH
57775: LD_INT 23
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: LIST
57793: PPUSH
57794: CALL_OW 69
57798: PUSH
57799: FOR_IN
57800: IFFALSE 57854
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
57802: LD_VAR 0 1
57806: PPUSH
57807: CALL_OW 257
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: LD_INT 3
57820: PUSH
57821: LD_INT 4
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: IN
57830: IFFALSE 57852
// SetClass ( un , rand ( 1 , 4 ) ) ;
57832: LD_VAR 0 1
57836: PPUSH
57837: LD_INT 1
57839: PPUSH
57840: LD_INT 4
57842: PPUSH
57843: CALL_OW 12
57847: PPUSH
57848: CALL_OW 336
57852: GO 57799
57854: POP
57855: POP
// end ;
57856: PPOPN 1
57858: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
57859: LD_EXP 39
57863: PUSH
57864: LD_EXP 51
57868: AND
57869: IFFALSE 57948
57871: GO 57873
57873: DISABLE
57874: LD_INT 0
57876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57877: LD_ADDR_VAR 0 1
57881: PUSH
57882: LD_INT 22
57884: PUSH
57885: LD_OWVAR 2
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 21
57896: PUSH
57897: LD_INT 3
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PPUSH
57908: CALL_OW 69
57912: ST_TO_ADDR
// if not tmp then
57913: LD_VAR 0 1
57917: NOT
57918: IFFALSE 57922
// exit ;
57920: GO 57948
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
57922: LD_VAR 0 1
57926: PUSH
57927: LD_INT 1
57929: PPUSH
57930: LD_VAR 0 1
57934: PPUSH
57935: CALL_OW 12
57939: ARRAY
57940: PPUSH
57941: LD_INT 100
57943: PPUSH
57944: CALL_OW 234
// end ;
57948: PPOPN 1
57950: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
57951: LD_EXP 39
57955: PUSH
57956: LD_EXP 53
57960: AND
57961: IFFALSE 58059
57963: GO 57965
57965: DISABLE
57966: LD_INT 0
57968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57969: LD_ADDR_VAR 0 1
57973: PUSH
57974: LD_INT 22
57976: PUSH
57977: LD_OWVAR 2
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 21
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PPUSH
58000: CALL_OW 69
58004: ST_TO_ADDR
// if not tmp then
58005: LD_VAR 0 1
58009: NOT
58010: IFFALSE 58014
// exit ;
58012: GO 58059
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
58014: LD_VAR 0 1
58018: PUSH
58019: LD_INT 1
58021: PPUSH
58022: LD_VAR 0 1
58026: PPUSH
58027: CALL_OW 12
58031: ARRAY
58032: PPUSH
58033: LD_INT 1
58035: PPUSH
58036: LD_INT 4
58038: PPUSH
58039: CALL_OW 12
58043: PPUSH
58044: LD_INT 3000
58046: PPUSH
58047: LD_INT 9000
58049: PPUSH
58050: CALL_OW 12
58054: PPUSH
58055: CALL_OW 492
// end ;
58059: PPOPN 1
58061: END
// every 0 0$1 trigger StreamModeActive and sDepot do
58062: LD_EXP 39
58066: PUSH
58067: LD_EXP 54
58071: AND
58072: IFFALSE 58092
58074: GO 58076
58076: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
58077: LD_INT 1
58079: PPUSH
58080: LD_OWVAR 2
58084: PPUSH
58085: LD_INT 0
58087: PPUSH
58088: CALL_OW 324
58092: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
58093: LD_EXP 39
58097: PUSH
58098: LD_EXP 55
58102: AND
58103: IFFALSE 58186
58105: GO 58107
58107: DISABLE
58108: LD_INT 0
58110: PPUSH
58111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58112: LD_ADDR_VAR 0 2
58116: PUSH
58117: LD_INT 22
58119: PUSH
58120: LD_OWVAR 2
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 21
58131: PUSH
58132: LD_INT 3
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PPUSH
58143: CALL_OW 69
58147: ST_TO_ADDR
// if not tmp then
58148: LD_VAR 0 2
58152: NOT
58153: IFFALSE 58157
// exit ;
58155: GO 58186
// for i in tmp do
58157: LD_ADDR_VAR 0 1
58161: PUSH
58162: LD_VAR 0 2
58166: PUSH
58167: FOR_IN
58168: IFFALSE 58184
// SetBLevel ( i , 10 ) ;
58170: LD_VAR 0 1
58174: PPUSH
58175: LD_INT 10
58177: PPUSH
58178: CALL_OW 241
58182: GO 58167
58184: POP
58185: POP
// end ;
58186: PPOPN 2
58188: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
58189: LD_EXP 39
58193: PUSH
58194: LD_EXP 56
58198: AND
58199: IFFALSE 58310
58201: GO 58203
58203: DISABLE
58204: LD_INT 0
58206: PPUSH
58207: PPUSH
58208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58209: LD_ADDR_VAR 0 3
58213: PUSH
58214: LD_INT 22
58216: PUSH
58217: LD_OWVAR 2
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 25
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PPUSH
58240: CALL_OW 69
58244: ST_TO_ADDR
// if not tmp then
58245: LD_VAR 0 3
58249: NOT
58250: IFFALSE 58254
// exit ;
58252: GO 58310
// un := tmp [ rand ( 1 , tmp ) ] ;
58254: LD_ADDR_VAR 0 2
58258: PUSH
58259: LD_VAR 0 3
58263: PUSH
58264: LD_INT 1
58266: PPUSH
58267: LD_VAR 0 3
58271: PPUSH
58272: CALL_OW 12
58276: ARRAY
58277: ST_TO_ADDR
// if Crawls ( un ) then
58278: LD_VAR 0 2
58282: PPUSH
58283: CALL_OW 318
58287: IFFALSE 58298
// ComWalk ( un ) ;
58289: LD_VAR 0 2
58293: PPUSH
58294: CALL_OW 138
// SetClass ( un , class_sniper ) ;
58298: LD_VAR 0 2
58302: PPUSH
58303: LD_INT 5
58305: PPUSH
58306: CALL_OW 336
// end ;
58310: PPOPN 3
58312: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
58313: LD_EXP 39
58317: PUSH
58318: LD_EXP 57
58322: AND
58323: PUSH
58324: LD_OWVAR 67
58328: PUSH
58329: LD_INT 4
58331: LESS
58332: AND
58333: IFFALSE 58352
58335: GO 58337
58337: DISABLE
// begin Difficulty := Difficulty + 1 ;
58338: LD_ADDR_OWVAR 67
58342: PUSH
58343: LD_OWVAR 67
58347: PUSH
58348: LD_INT 1
58350: PLUS
58351: ST_TO_ADDR
// end ;
58352: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
58353: LD_EXP 39
58357: PUSH
58358: LD_EXP 58
58362: AND
58363: IFFALSE 58466
58365: GO 58367
58367: DISABLE
58368: LD_INT 0
58370: PPUSH
// begin for i := 1 to 5 do
58371: LD_ADDR_VAR 0 1
58375: PUSH
58376: DOUBLE
58377: LD_INT 1
58379: DEC
58380: ST_TO_ADDR
58381: LD_INT 5
58383: PUSH
58384: FOR_TO
58385: IFFALSE 58464
// begin uc_nation := nation_nature ;
58387: LD_ADDR_OWVAR 21
58391: PUSH
58392: LD_INT 0
58394: ST_TO_ADDR
// uc_side := 0 ;
58395: LD_ADDR_OWVAR 20
58399: PUSH
58400: LD_INT 0
58402: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58403: LD_ADDR_OWVAR 29
58407: PUSH
58408: LD_INT 12
58410: PUSH
58411: LD_INT 12
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: ST_TO_ADDR
// hc_agressivity := 20 ;
58418: LD_ADDR_OWVAR 35
58422: PUSH
58423: LD_INT 20
58425: ST_TO_ADDR
// hc_class := class_tiger ;
58426: LD_ADDR_OWVAR 28
58430: PUSH
58431: LD_INT 14
58433: ST_TO_ADDR
// hc_gallery :=  ;
58434: LD_ADDR_OWVAR 33
58438: PUSH
58439: LD_STRING 
58441: ST_TO_ADDR
// hc_name :=  ;
58442: LD_ADDR_OWVAR 26
58446: PUSH
58447: LD_STRING 
58449: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
58450: CALL_OW 44
58454: PPUSH
58455: LD_INT 0
58457: PPUSH
58458: CALL_OW 51
// end ;
58462: GO 58384
58464: POP
58465: POP
// end ;
58466: PPOPN 1
58468: END
// every 0 0$1 trigger StreamModeActive and sBomb do
58469: LD_EXP 39
58473: PUSH
58474: LD_EXP 59
58478: AND
58479: IFFALSE 58488
58481: GO 58483
58483: DISABLE
// StreamSibBomb ;
58484: CALL 58489 0 0
58488: END
// export function StreamSibBomb ; var i , x , y ; begin
58489: LD_INT 0
58491: PPUSH
58492: PPUSH
58493: PPUSH
58494: PPUSH
// result := false ;
58495: LD_ADDR_VAR 0 1
58499: PUSH
58500: LD_INT 0
58502: ST_TO_ADDR
// for i := 1 to 16 do
58503: LD_ADDR_VAR 0 2
58507: PUSH
58508: DOUBLE
58509: LD_INT 1
58511: DEC
58512: ST_TO_ADDR
58513: LD_INT 16
58515: PUSH
58516: FOR_TO
58517: IFFALSE 58716
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58519: LD_ADDR_VAR 0 3
58523: PUSH
58524: LD_INT 10
58526: PUSH
58527: LD_INT 20
58529: PUSH
58530: LD_INT 30
58532: PUSH
58533: LD_INT 40
58535: PUSH
58536: LD_INT 50
58538: PUSH
58539: LD_INT 60
58541: PUSH
58542: LD_INT 70
58544: PUSH
58545: LD_INT 80
58547: PUSH
58548: LD_INT 90
58550: PUSH
58551: LD_INT 100
58553: PUSH
58554: LD_INT 110
58556: PUSH
58557: LD_INT 120
58559: PUSH
58560: LD_INT 130
58562: PUSH
58563: LD_INT 140
58565: PUSH
58566: LD_INT 150
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: PPUSH
58589: LD_INT 15
58591: PPUSH
58592: CALL_OW 12
58596: ARRAY
58597: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58598: LD_ADDR_VAR 0 4
58602: PUSH
58603: LD_INT 10
58605: PUSH
58606: LD_INT 20
58608: PUSH
58609: LD_INT 30
58611: PUSH
58612: LD_INT 40
58614: PUSH
58615: LD_INT 50
58617: PUSH
58618: LD_INT 60
58620: PUSH
58621: LD_INT 70
58623: PUSH
58624: LD_INT 80
58626: PUSH
58627: LD_INT 90
58629: PUSH
58630: LD_INT 100
58632: PUSH
58633: LD_INT 110
58635: PUSH
58636: LD_INT 120
58638: PUSH
58639: LD_INT 130
58641: PUSH
58642: LD_INT 140
58644: PUSH
58645: LD_INT 150
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: PPUSH
58668: LD_INT 15
58670: PPUSH
58671: CALL_OW 12
58675: ARRAY
58676: ST_TO_ADDR
// if ValidHex ( x , y ) then
58677: LD_VAR 0 3
58681: PPUSH
58682: LD_VAR 0 4
58686: PPUSH
58687: CALL_OW 488
58691: IFFALSE 58714
// begin result := [ x , y ] ;
58693: LD_ADDR_VAR 0 1
58697: PUSH
58698: LD_VAR 0 3
58702: PUSH
58703: LD_VAR 0 4
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: ST_TO_ADDR
// break ;
58712: GO 58716
// end ; end ;
58714: GO 58516
58716: POP
58717: POP
// if result then
58718: LD_VAR 0 1
58722: IFFALSE 58782
// begin ToLua ( playSibBomb() ) ;
58724: LD_STRING playSibBomb()
58726: PPUSH
58727: CALL_OW 559
// wait ( 0 0$14 ) ;
58731: LD_INT 490
58733: PPUSH
58734: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
58738: LD_VAR 0 1
58742: PUSH
58743: LD_INT 1
58745: ARRAY
58746: PPUSH
58747: LD_VAR 0 1
58751: PUSH
58752: LD_INT 2
58754: ARRAY
58755: PPUSH
58756: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
58760: LD_VAR 0 1
58764: PUSH
58765: LD_INT 1
58767: ARRAY
58768: PPUSH
58769: LD_VAR 0 1
58773: PUSH
58774: LD_INT 2
58776: ARRAY
58777: PPUSH
58778: CALL_OW 429
// end ; end ;
58782: LD_VAR 0 1
58786: RET
// every 0 0$1 trigger StreamModeActive and sReset do
58787: LD_EXP 39
58791: PUSH
58792: LD_EXP 61
58796: AND
58797: IFFALSE 58809
58799: GO 58801
58801: DISABLE
// YouLost (  ) ;
58802: LD_STRING 
58804: PPUSH
58805: CALL_OW 104
58809: END
// every 0 0$1 trigger StreamModeActive and sFog do
58810: LD_EXP 39
58814: PUSH
58815: LD_EXP 60
58819: AND
58820: IFFALSE 58834
58822: GO 58824
58824: DISABLE
// FogOff ( your_side ) ;
58825: LD_OWVAR 2
58829: PPUSH
58830: CALL_OW 344
58834: END
// every 0 0$1 trigger StreamModeActive and sSun do
58835: LD_EXP 39
58839: PUSH
58840: LD_EXP 62
58844: AND
58845: IFFALSE 58873
58847: GO 58849
58849: DISABLE
// begin solar_recharge_percent := 0 ;
58850: LD_ADDR_OWVAR 79
58854: PUSH
58855: LD_INT 0
58857: ST_TO_ADDR
// wait ( 5 5$00 ) ;
58858: LD_INT 10500
58860: PPUSH
58861: CALL_OW 67
// solar_recharge_percent := 100 ;
58865: LD_ADDR_OWVAR 79
58869: PUSH
58870: LD_INT 100
58872: ST_TO_ADDR
// end ;
58873: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
58874: LD_EXP 39
58878: PUSH
58879: LD_EXP 63
58883: AND
58884: IFFALSE 59123
58886: GO 58888
58888: DISABLE
58889: LD_INT 0
58891: PPUSH
58892: PPUSH
58893: PPUSH
// begin tmp := [ ] ;
58894: LD_ADDR_VAR 0 3
58898: PUSH
58899: EMPTY
58900: ST_TO_ADDR
// for i := 1 to 6 do
58901: LD_ADDR_VAR 0 1
58905: PUSH
58906: DOUBLE
58907: LD_INT 1
58909: DEC
58910: ST_TO_ADDR
58911: LD_INT 6
58913: PUSH
58914: FOR_TO
58915: IFFALSE 59020
// begin uc_nation := nation_nature ;
58917: LD_ADDR_OWVAR 21
58921: PUSH
58922: LD_INT 0
58924: ST_TO_ADDR
// uc_side := 0 ;
58925: LD_ADDR_OWVAR 20
58929: PUSH
58930: LD_INT 0
58932: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58933: LD_ADDR_OWVAR 29
58937: PUSH
58938: LD_INT 12
58940: PUSH
58941: LD_INT 12
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: ST_TO_ADDR
// hc_agressivity := 20 ;
58948: LD_ADDR_OWVAR 35
58952: PUSH
58953: LD_INT 20
58955: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
58956: LD_ADDR_OWVAR 28
58960: PUSH
58961: LD_INT 17
58963: ST_TO_ADDR
// hc_gallery :=  ;
58964: LD_ADDR_OWVAR 33
58968: PUSH
58969: LD_STRING 
58971: ST_TO_ADDR
// hc_name :=  ;
58972: LD_ADDR_OWVAR 26
58976: PUSH
58977: LD_STRING 
58979: ST_TO_ADDR
// un := CreateHuman ;
58980: LD_ADDR_VAR 0 2
58984: PUSH
58985: CALL_OW 44
58989: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
58990: LD_VAR 0 2
58994: PPUSH
58995: LD_INT 1
58997: PPUSH
58998: CALL_OW 51
// tmp := tmp ^ un ;
59002: LD_ADDR_VAR 0 3
59006: PUSH
59007: LD_VAR 0 3
59011: PUSH
59012: LD_VAR 0 2
59016: ADD
59017: ST_TO_ADDR
// end ;
59018: GO 58914
59020: POP
59021: POP
// repeat wait ( 0 0$1 ) ;
59022: LD_INT 35
59024: PPUSH
59025: CALL_OW 67
// for un in tmp do
59029: LD_ADDR_VAR 0 2
59033: PUSH
59034: LD_VAR 0 3
59038: PUSH
59039: FOR_IN
59040: IFFALSE 59114
// begin if IsDead ( un ) then
59042: LD_VAR 0 2
59046: PPUSH
59047: CALL_OW 301
59051: IFFALSE 59071
// begin tmp := tmp diff un ;
59053: LD_ADDR_VAR 0 3
59057: PUSH
59058: LD_VAR 0 3
59062: PUSH
59063: LD_VAR 0 2
59067: DIFF
59068: ST_TO_ADDR
// continue ;
59069: GO 59039
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
59071: LD_VAR 0 2
59075: PPUSH
59076: LD_INT 3
59078: PUSH
59079: LD_INT 22
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PPUSH
59093: CALL_OW 69
59097: PPUSH
59098: LD_VAR 0 2
59102: PPUSH
59103: CALL_OW 74
59107: PPUSH
59108: CALL_OW 115
// end ;
59112: GO 59039
59114: POP
59115: POP
// until not tmp ;
59116: LD_VAR 0 3
59120: NOT
59121: IFFALSE 59022
// end ;
59123: PPOPN 3
59125: END
// every 0 0$1 trigger StreamModeActive and sTroll do
59126: LD_EXP 39
59130: PUSH
59131: LD_EXP 64
59135: AND
59136: IFFALSE 59190
59138: GO 59140
59140: DISABLE
// begin ToLua ( displayTroll(); ) ;
59141: LD_STRING displayTroll();
59143: PPUSH
59144: CALL_OW 559
// wait ( 3 3$00 ) ;
59148: LD_INT 6300
59150: PPUSH
59151: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59155: LD_STRING hideTroll();
59157: PPUSH
59158: CALL_OW 559
// wait ( 1 1$00 ) ;
59162: LD_INT 2100
59164: PPUSH
59165: CALL_OW 67
// ToLua ( displayTroll(); ) ;
59169: LD_STRING displayTroll();
59171: PPUSH
59172: CALL_OW 559
// wait ( 1 1$00 ) ;
59176: LD_INT 2100
59178: PPUSH
59179: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59183: LD_STRING hideTroll();
59185: PPUSH
59186: CALL_OW 559
// end ;
59190: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
59191: LD_EXP 39
59195: PUSH
59196: LD_EXP 65
59200: AND
59201: IFFALSE 59264
59203: GO 59205
59205: DISABLE
59206: LD_INT 0
59208: PPUSH
// begin p := 0 ;
59209: LD_ADDR_VAR 0 1
59213: PUSH
59214: LD_INT 0
59216: ST_TO_ADDR
// repeat game_speed := 1 ;
59217: LD_ADDR_OWVAR 65
59221: PUSH
59222: LD_INT 1
59224: ST_TO_ADDR
// wait ( 0 0$1 ) ;
59225: LD_INT 35
59227: PPUSH
59228: CALL_OW 67
// p := p + 1 ;
59232: LD_ADDR_VAR 0 1
59236: PUSH
59237: LD_VAR 0 1
59241: PUSH
59242: LD_INT 1
59244: PLUS
59245: ST_TO_ADDR
// until p >= 60 ;
59246: LD_VAR 0 1
59250: PUSH
59251: LD_INT 60
59253: GREATEREQUAL
59254: IFFALSE 59217
// game_speed := 4 ;
59256: LD_ADDR_OWVAR 65
59260: PUSH
59261: LD_INT 4
59263: ST_TO_ADDR
// end ;
59264: PPOPN 1
59266: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
59267: LD_EXP 39
59271: PUSH
59272: LD_EXP 66
59276: AND
59277: IFFALSE 59423
59279: GO 59281
59281: DISABLE
59282: LD_INT 0
59284: PPUSH
59285: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59286: LD_ADDR_VAR 0 1
59290: PUSH
59291: LD_INT 22
59293: PUSH
59294: LD_OWVAR 2
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 2
59305: PUSH
59306: LD_INT 30
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 30
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: LIST
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PPUSH
59335: CALL_OW 69
59339: ST_TO_ADDR
// if not depot then
59340: LD_VAR 0 1
59344: NOT
59345: IFFALSE 59349
// exit ;
59347: GO 59423
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
59349: LD_ADDR_VAR 0 2
59353: PUSH
59354: LD_VAR 0 1
59358: PUSH
59359: LD_INT 1
59361: PPUSH
59362: LD_VAR 0 1
59366: PPUSH
59367: CALL_OW 12
59371: ARRAY
59372: PPUSH
59373: CALL_OW 274
59377: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
59378: LD_VAR 0 2
59382: PPUSH
59383: LD_INT 1
59385: PPUSH
59386: LD_INT 0
59388: PPUSH
59389: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
59393: LD_VAR 0 2
59397: PPUSH
59398: LD_INT 2
59400: PPUSH
59401: LD_INT 0
59403: PPUSH
59404: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
59408: LD_VAR 0 2
59412: PPUSH
59413: LD_INT 3
59415: PPUSH
59416: LD_INT 0
59418: PPUSH
59419: CALL_OW 277
// end ;
59423: PPOPN 2
59425: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
59426: LD_EXP 39
59430: PUSH
59431: LD_EXP 67
59435: AND
59436: IFFALSE 59533
59438: GO 59440
59440: DISABLE
59441: LD_INT 0
59443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59444: LD_ADDR_VAR 0 1
59448: PUSH
59449: LD_INT 22
59451: PUSH
59452: LD_OWVAR 2
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 21
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 3
59473: PUSH
59474: LD_INT 23
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: LIST
59492: PPUSH
59493: CALL_OW 69
59497: ST_TO_ADDR
// if not tmp then
59498: LD_VAR 0 1
59502: NOT
59503: IFFALSE 59507
// exit ;
59505: GO 59533
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
59507: LD_VAR 0 1
59511: PUSH
59512: LD_INT 1
59514: PPUSH
59515: LD_VAR 0 1
59519: PPUSH
59520: CALL_OW 12
59524: ARRAY
59525: PPUSH
59526: LD_INT 200
59528: PPUSH
59529: CALL_OW 234
// end ;
59533: PPOPN 1
59535: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
59536: LD_EXP 39
59540: PUSH
59541: LD_EXP 68
59545: AND
59546: IFFALSE 59625
59548: GO 59550
59550: DISABLE
59551: LD_INT 0
59553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
59554: LD_ADDR_VAR 0 1
59558: PUSH
59559: LD_INT 22
59561: PUSH
59562: LD_OWVAR 2
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 21
59573: PUSH
59574: LD_INT 2
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PPUSH
59585: CALL_OW 69
59589: ST_TO_ADDR
// if not tmp then
59590: LD_VAR 0 1
59594: NOT
59595: IFFALSE 59599
// exit ;
59597: GO 59625
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
59599: LD_VAR 0 1
59603: PUSH
59604: LD_INT 1
59606: PPUSH
59607: LD_VAR 0 1
59611: PPUSH
59612: CALL_OW 12
59616: ARRAY
59617: PPUSH
59618: LD_INT 60
59620: PPUSH
59621: CALL_OW 234
// end ;
59625: PPOPN 1
59627: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
59628: LD_EXP 39
59632: PUSH
59633: LD_EXP 69
59637: AND
59638: IFFALSE 59737
59640: GO 59642
59642: DISABLE
59643: LD_INT 0
59645: PPUSH
59646: PPUSH
// begin enable ;
59647: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
59648: LD_ADDR_VAR 0 1
59652: PUSH
59653: LD_INT 22
59655: PUSH
59656: LD_OWVAR 2
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 61
59667: PUSH
59668: EMPTY
59669: LIST
59670: PUSH
59671: LD_INT 33
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: LIST
59685: PPUSH
59686: CALL_OW 69
59690: ST_TO_ADDR
// if not tmp then
59691: LD_VAR 0 1
59695: NOT
59696: IFFALSE 59700
// exit ;
59698: GO 59737
// for i in tmp do
59700: LD_ADDR_VAR 0 2
59704: PUSH
59705: LD_VAR 0 1
59709: PUSH
59710: FOR_IN
59711: IFFALSE 59735
// if IsControledBy ( i ) then
59713: LD_VAR 0 2
59717: PPUSH
59718: CALL_OW 312
59722: IFFALSE 59733
// ComUnlink ( i ) ;
59724: LD_VAR 0 2
59728: PPUSH
59729: CALL_OW 136
59733: GO 59710
59735: POP
59736: POP
// end ;
59737: PPOPN 2
59739: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
59740: LD_EXP 39
59744: PUSH
59745: LD_EXP 70
59749: AND
59750: IFFALSE 59890
59752: GO 59754
59754: DISABLE
59755: LD_INT 0
59757: PPUSH
59758: PPUSH
// begin ToLua ( displayPowell(); ) ;
59759: LD_STRING displayPowell();
59761: PPUSH
59762: CALL_OW 559
// uc_side := 0 ;
59766: LD_ADDR_OWVAR 20
59770: PUSH
59771: LD_INT 0
59773: ST_TO_ADDR
// uc_nation := 2 ;
59774: LD_ADDR_OWVAR 21
59778: PUSH
59779: LD_INT 2
59781: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
59782: LD_ADDR_OWVAR 37
59786: PUSH
59787: LD_INT 14
59789: ST_TO_ADDR
// vc_engine := engine_siberite ;
59790: LD_ADDR_OWVAR 39
59794: PUSH
59795: LD_INT 3
59797: ST_TO_ADDR
// vc_control := control_apeman ;
59798: LD_ADDR_OWVAR 38
59802: PUSH
59803: LD_INT 5
59805: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
59806: LD_ADDR_OWVAR 40
59810: PUSH
59811: LD_INT 29
59813: ST_TO_ADDR
// un := CreateVehicle ;
59814: LD_ADDR_VAR 0 2
59818: PUSH
59819: CALL_OW 45
59823: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59824: LD_VAR 0 2
59828: PPUSH
59829: LD_INT 1
59831: PPUSH
59832: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59836: LD_INT 35
59838: PPUSH
59839: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59843: LD_VAR 0 2
59847: PPUSH
59848: LD_INT 22
59850: PUSH
59851: LD_OWVAR 2
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PPUSH
59860: CALL_OW 69
59864: PPUSH
59865: LD_VAR 0 2
59869: PPUSH
59870: CALL_OW 74
59874: PPUSH
59875: CALL_OW 115
// until IsDead ( un ) ;
59879: LD_VAR 0 2
59883: PPUSH
59884: CALL_OW 301
59888: IFFALSE 59836
// end ;
59890: PPOPN 2
59892: END
// every 0 0$1 trigger StreamModeActive and sStu do
59893: LD_EXP 39
59897: PUSH
59898: LD_EXP 78
59902: AND
59903: IFFALSE 59919
59905: GO 59907
59907: DISABLE
// begin ToLua ( displayStucuk(); ) ;
59908: LD_STRING displayStucuk();
59910: PPUSH
59911: CALL_OW 559
// ResetFog ;
59915: CALL_OW 335
// end ;
59919: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
59920: LD_EXP 39
59924: PUSH
59925: LD_EXP 71
59929: AND
59930: IFFALSE 60071
59932: GO 59934
59934: DISABLE
59935: LD_INT 0
59937: PPUSH
59938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59939: LD_ADDR_VAR 0 2
59943: PUSH
59944: LD_INT 22
59946: PUSH
59947: LD_OWVAR 2
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 21
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PPUSH
59970: CALL_OW 69
59974: ST_TO_ADDR
// if not tmp then
59975: LD_VAR 0 2
59979: NOT
59980: IFFALSE 59984
// exit ;
59982: GO 60071
// un := tmp [ rand ( 1 , tmp ) ] ;
59984: LD_ADDR_VAR 0 1
59988: PUSH
59989: LD_VAR 0 2
59993: PUSH
59994: LD_INT 1
59996: PPUSH
59997: LD_VAR 0 2
60001: PPUSH
60002: CALL_OW 12
60006: ARRAY
60007: ST_TO_ADDR
// SetSide ( un , 0 ) ;
60008: LD_VAR 0 1
60012: PPUSH
60013: LD_INT 0
60015: PPUSH
60016: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
60020: LD_VAR 0 1
60024: PPUSH
60025: LD_OWVAR 3
60029: PUSH
60030: LD_VAR 0 1
60034: DIFF
60035: PPUSH
60036: LD_VAR 0 1
60040: PPUSH
60041: CALL_OW 74
60045: PPUSH
60046: CALL_OW 115
// wait ( 0 0$20 ) ;
60050: LD_INT 700
60052: PPUSH
60053: CALL_OW 67
// SetSide ( un , your_side ) ;
60057: LD_VAR 0 1
60061: PPUSH
60062: LD_OWVAR 2
60066: PPUSH
60067: CALL_OW 235
// end ;
60071: PPOPN 2
60073: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
60074: LD_EXP 39
60078: PUSH
60079: LD_EXP 72
60083: AND
60084: IFFALSE 60190
60086: GO 60088
60088: DISABLE
60089: LD_INT 0
60091: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60092: LD_ADDR_VAR 0 1
60096: PUSH
60097: LD_INT 22
60099: PUSH
60100: LD_OWVAR 2
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: LD_INT 30
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 30
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: LIST
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PPUSH
60141: CALL_OW 69
60145: ST_TO_ADDR
// if not depot then
60146: LD_VAR 0 1
60150: NOT
60151: IFFALSE 60155
// exit ;
60153: GO 60190
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
60155: LD_VAR 0 1
60159: PUSH
60160: LD_INT 1
60162: ARRAY
60163: PPUSH
60164: CALL_OW 250
60168: PPUSH
60169: LD_VAR 0 1
60173: PUSH
60174: LD_INT 1
60176: ARRAY
60177: PPUSH
60178: CALL_OW 251
60182: PPUSH
60183: LD_INT 70
60185: PPUSH
60186: CALL_OW 495
// end ;
60190: PPOPN 1
60192: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
60193: LD_EXP 39
60197: PUSH
60198: LD_EXP 73
60202: AND
60203: IFFALSE 60414
60205: GO 60207
60207: DISABLE
60208: LD_INT 0
60210: PPUSH
60211: PPUSH
60212: PPUSH
60213: PPUSH
60214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60215: LD_ADDR_VAR 0 5
60219: PUSH
60220: LD_INT 22
60222: PUSH
60223: LD_OWVAR 2
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 21
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PPUSH
60246: CALL_OW 69
60250: ST_TO_ADDR
// if not tmp then
60251: LD_VAR 0 5
60255: NOT
60256: IFFALSE 60260
// exit ;
60258: GO 60414
// for i in tmp do
60260: LD_ADDR_VAR 0 1
60264: PUSH
60265: LD_VAR 0 5
60269: PUSH
60270: FOR_IN
60271: IFFALSE 60412
// begin d := rand ( 0 , 5 ) ;
60273: LD_ADDR_VAR 0 4
60277: PUSH
60278: LD_INT 0
60280: PPUSH
60281: LD_INT 5
60283: PPUSH
60284: CALL_OW 12
60288: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
60289: LD_ADDR_VAR 0 2
60293: PUSH
60294: LD_VAR 0 1
60298: PPUSH
60299: CALL_OW 250
60303: PPUSH
60304: LD_VAR 0 4
60308: PPUSH
60309: LD_INT 3
60311: PPUSH
60312: LD_INT 12
60314: PPUSH
60315: CALL_OW 12
60319: PPUSH
60320: CALL_OW 272
60324: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
60325: LD_ADDR_VAR 0 3
60329: PUSH
60330: LD_VAR 0 1
60334: PPUSH
60335: CALL_OW 251
60339: PPUSH
60340: LD_VAR 0 4
60344: PPUSH
60345: LD_INT 3
60347: PPUSH
60348: LD_INT 12
60350: PPUSH
60351: CALL_OW 12
60355: PPUSH
60356: CALL_OW 273
60360: ST_TO_ADDR
// if ValidHex ( x , y ) then
60361: LD_VAR 0 2
60365: PPUSH
60366: LD_VAR 0 3
60370: PPUSH
60371: CALL_OW 488
60375: IFFALSE 60410
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
60377: LD_VAR 0 1
60381: PPUSH
60382: LD_VAR 0 2
60386: PPUSH
60387: LD_VAR 0 3
60391: PPUSH
60392: LD_INT 3
60394: PPUSH
60395: LD_INT 6
60397: PPUSH
60398: CALL_OW 12
60402: PPUSH
60403: LD_INT 1
60405: PPUSH
60406: CALL_OW 483
// end ;
60410: GO 60270
60412: POP
60413: POP
// end ;
60414: PPOPN 5
60416: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
60417: LD_EXP 39
60421: PUSH
60422: LD_EXP 74
60426: AND
60427: IFFALSE 60521
60429: GO 60431
60431: DISABLE
60432: LD_INT 0
60434: PPUSH
60435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
60436: LD_ADDR_VAR 0 2
60440: PUSH
60441: LD_INT 22
60443: PUSH
60444: LD_OWVAR 2
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 32
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 21
60465: PUSH
60466: LD_INT 2
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: LIST
60477: PPUSH
60478: CALL_OW 69
60482: ST_TO_ADDR
// if not tmp then
60483: LD_VAR 0 2
60487: NOT
60488: IFFALSE 60492
// exit ;
60490: GO 60521
// for i in tmp do
60492: LD_ADDR_VAR 0 1
60496: PUSH
60497: LD_VAR 0 2
60501: PUSH
60502: FOR_IN
60503: IFFALSE 60519
// SetFuel ( i , 0 ) ;
60505: LD_VAR 0 1
60509: PPUSH
60510: LD_INT 0
60512: PPUSH
60513: CALL_OW 240
60517: GO 60502
60519: POP
60520: POP
// end ;
60521: PPOPN 2
60523: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
60524: LD_EXP 39
60528: PUSH
60529: LD_EXP 75
60533: AND
60534: IFFALSE 60600
60536: GO 60538
60538: DISABLE
60539: LD_INT 0
60541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60542: LD_ADDR_VAR 0 1
60546: PUSH
60547: LD_INT 22
60549: PUSH
60550: LD_OWVAR 2
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 30
60561: PUSH
60562: LD_INT 29
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PPUSH
60573: CALL_OW 69
60577: ST_TO_ADDR
// if not tmp then
60578: LD_VAR 0 1
60582: NOT
60583: IFFALSE 60587
// exit ;
60585: GO 60600
// DestroyUnit ( tmp [ 1 ] ) ;
60587: LD_VAR 0 1
60591: PUSH
60592: LD_INT 1
60594: ARRAY
60595: PPUSH
60596: CALL_OW 65
// end ;
60600: PPOPN 1
60602: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
60603: LD_EXP 39
60607: PUSH
60608: LD_EXP 77
60612: AND
60613: IFFALSE 60742
60615: GO 60617
60617: DISABLE
60618: LD_INT 0
60620: PPUSH
// begin uc_side := 0 ;
60621: LD_ADDR_OWVAR 20
60625: PUSH
60626: LD_INT 0
60628: ST_TO_ADDR
// uc_nation := nation_arabian ;
60629: LD_ADDR_OWVAR 21
60633: PUSH
60634: LD_INT 2
60636: ST_TO_ADDR
// hc_gallery :=  ;
60637: LD_ADDR_OWVAR 33
60641: PUSH
60642: LD_STRING 
60644: ST_TO_ADDR
// hc_name :=  ;
60645: LD_ADDR_OWVAR 26
60649: PUSH
60650: LD_STRING 
60652: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
60653: LD_INT 1
60655: PPUSH
60656: LD_INT 11
60658: PPUSH
60659: LD_INT 10
60661: PPUSH
60662: CALL_OW 380
// un := CreateHuman ;
60666: LD_ADDR_VAR 0 1
60670: PUSH
60671: CALL_OW 44
60675: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60676: LD_VAR 0 1
60680: PPUSH
60681: LD_INT 1
60683: PPUSH
60684: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60688: LD_INT 35
60690: PPUSH
60691: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60695: LD_VAR 0 1
60699: PPUSH
60700: LD_INT 22
60702: PUSH
60703: LD_OWVAR 2
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PPUSH
60712: CALL_OW 69
60716: PPUSH
60717: LD_VAR 0 1
60721: PPUSH
60722: CALL_OW 74
60726: PPUSH
60727: CALL_OW 115
// until IsDead ( un ) ;
60731: LD_VAR 0 1
60735: PPUSH
60736: CALL_OW 301
60740: IFFALSE 60688
// end ;
60742: PPOPN 1
60744: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
60745: LD_EXP 39
60749: PUSH
60750: LD_EXP 79
60754: AND
60755: IFFALSE 60767
60757: GO 60759
60759: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
60760: LD_STRING earthquake(getX(game), 0, 32)
60762: PPUSH
60763: CALL_OW 559
60767: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
60768: LD_EXP 39
60772: PUSH
60773: LD_EXP 80
60777: AND
60778: IFFALSE 60869
60780: GO 60782
60782: DISABLE
60783: LD_INT 0
60785: PPUSH
// begin enable ;
60786: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
60787: LD_ADDR_VAR 0 1
60791: PUSH
60792: LD_INT 22
60794: PUSH
60795: LD_OWVAR 2
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 21
60806: PUSH
60807: LD_INT 2
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 33
60816: PUSH
60817: LD_INT 3
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: LIST
60828: PPUSH
60829: CALL_OW 69
60833: ST_TO_ADDR
// if not tmp then
60834: LD_VAR 0 1
60838: NOT
60839: IFFALSE 60843
// exit ;
60841: GO 60869
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60843: LD_VAR 0 1
60847: PUSH
60848: LD_INT 1
60850: PPUSH
60851: LD_VAR 0 1
60855: PPUSH
60856: CALL_OW 12
60860: ARRAY
60861: PPUSH
60862: LD_INT 1
60864: PPUSH
60865: CALL_OW 234
// end ;
60869: PPOPN 1
60871: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
60872: LD_EXP 39
60876: PUSH
60877: LD_EXP 81
60881: AND
60882: IFFALSE 61023
60884: GO 60886
60886: DISABLE
60887: LD_INT 0
60889: PPUSH
60890: PPUSH
60891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60892: LD_ADDR_VAR 0 3
60896: PUSH
60897: LD_INT 22
60899: PUSH
60900: LD_OWVAR 2
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 25
60911: PUSH
60912: LD_INT 1
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PPUSH
60923: CALL_OW 69
60927: ST_TO_ADDR
// if not tmp then
60928: LD_VAR 0 3
60932: NOT
60933: IFFALSE 60937
// exit ;
60935: GO 61023
// un := tmp [ rand ( 1 , tmp ) ] ;
60937: LD_ADDR_VAR 0 2
60941: PUSH
60942: LD_VAR 0 3
60946: PUSH
60947: LD_INT 1
60949: PPUSH
60950: LD_VAR 0 3
60954: PPUSH
60955: CALL_OW 12
60959: ARRAY
60960: ST_TO_ADDR
// if Crawls ( un ) then
60961: LD_VAR 0 2
60965: PPUSH
60966: CALL_OW 318
60970: IFFALSE 60981
// ComWalk ( un ) ;
60972: LD_VAR 0 2
60976: PPUSH
60977: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
60981: LD_VAR 0 2
60985: PPUSH
60986: LD_INT 9
60988: PPUSH
60989: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
60993: LD_INT 28
60995: PPUSH
60996: LD_OWVAR 2
61000: PPUSH
61001: LD_INT 2
61003: PPUSH
61004: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
61008: LD_INT 29
61010: PPUSH
61011: LD_OWVAR 2
61015: PPUSH
61016: LD_INT 2
61018: PPUSH
61019: CALL_OW 322
// end ;
61023: PPOPN 3
61025: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
61026: LD_EXP 39
61030: PUSH
61031: LD_EXP 82
61035: AND
61036: IFFALSE 61147
61038: GO 61040
61040: DISABLE
61041: LD_INT 0
61043: PPUSH
61044: PPUSH
61045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61046: LD_ADDR_VAR 0 3
61050: PUSH
61051: LD_INT 22
61053: PUSH
61054: LD_OWVAR 2
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 25
61065: PUSH
61066: LD_INT 1
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PPUSH
61077: CALL_OW 69
61081: ST_TO_ADDR
// if not tmp then
61082: LD_VAR 0 3
61086: NOT
61087: IFFALSE 61091
// exit ;
61089: GO 61147
// un := tmp [ rand ( 1 , tmp ) ] ;
61091: LD_ADDR_VAR 0 2
61095: PUSH
61096: LD_VAR 0 3
61100: PUSH
61101: LD_INT 1
61103: PPUSH
61104: LD_VAR 0 3
61108: PPUSH
61109: CALL_OW 12
61113: ARRAY
61114: ST_TO_ADDR
// if Crawls ( un ) then
61115: LD_VAR 0 2
61119: PPUSH
61120: CALL_OW 318
61124: IFFALSE 61135
// ComWalk ( un ) ;
61126: LD_VAR 0 2
61130: PPUSH
61131: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61135: LD_VAR 0 2
61139: PPUSH
61140: LD_INT 8
61142: PPUSH
61143: CALL_OW 336
// end ;
61147: PPOPN 3
61149: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
61150: LD_EXP 39
61154: PUSH
61155: LD_EXP 83
61159: AND
61160: IFFALSE 61304
61162: GO 61164
61164: DISABLE
61165: LD_INT 0
61167: PPUSH
61168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
61169: LD_ADDR_VAR 0 2
61173: PUSH
61174: LD_INT 22
61176: PUSH
61177: LD_OWVAR 2
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 21
61188: PUSH
61189: LD_INT 2
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 2
61198: PUSH
61199: LD_INT 34
61201: PUSH
61202: LD_INT 12
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 34
61211: PUSH
61212: LD_INT 51
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 34
61221: PUSH
61222: LD_INT 32
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: LIST
61239: PPUSH
61240: CALL_OW 69
61244: ST_TO_ADDR
// if not tmp then
61245: LD_VAR 0 2
61249: NOT
61250: IFFALSE 61254
// exit ;
61252: GO 61304
// for i in tmp do
61254: LD_ADDR_VAR 0 1
61258: PUSH
61259: LD_VAR 0 2
61263: PUSH
61264: FOR_IN
61265: IFFALSE 61302
// if GetCargo ( i , mat_artifact ) = 0 then
61267: LD_VAR 0 1
61271: PPUSH
61272: LD_INT 4
61274: PPUSH
61275: CALL_OW 289
61279: PUSH
61280: LD_INT 0
61282: EQUAL
61283: IFFALSE 61300
// SetCargo ( i , mat_siberit , 100 ) ;
61285: LD_VAR 0 1
61289: PPUSH
61290: LD_INT 3
61292: PPUSH
61293: LD_INT 100
61295: PPUSH
61296: CALL_OW 290
61300: GO 61264
61302: POP
61303: POP
// end ;
61304: PPOPN 2
61306: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
61307: LD_EXP 39
61311: PUSH
61312: LD_EXP 84
61316: AND
61317: IFFALSE 61500
61319: GO 61321
61321: DISABLE
61322: LD_INT 0
61324: PPUSH
61325: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61326: LD_ADDR_VAR 0 2
61330: PUSH
61331: LD_INT 22
61333: PUSH
61334: LD_OWVAR 2
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PPUSH
61343: CALL_OW 69
61347: ST_TO_ADDR
// if not tmp then
61348: LD_VAR 0 2
61352: NOT
61353: IFFALSE 61357
// exit ;
61355: GO 61500
// for i := 1 to 2 do
61357: LD_ADDR_VAR 0 1
61361: PUSH
61362: DOUBLE
61363: LD_INT 1
61365: DEC
61366: ST_TO_ADDR
61367: LD_INT 2
61369: PUSH
61370: FOR_TO
61371: IFFALSE 61498
// begin uc_side := your_side ;
61373: LD_ADDR_OWVAR 20
61377: PUSH
61378: LD_OWVAR 2
61382: ST_TO_ADDR
// uc_nation := nation_american ;
61383: LD_ADDR_OWVAR 21
61387: PUSH
61388: LD_INT 1
61390: ST_TO_ADDR
// vc_chassis := us_morphling ;
61391: LD_ADDR_OWVAR 37
61395: PUSH
61396: LD_INT 5
61398: ST_TO_ADDR
// vc_engine := engine_siberite ;
61399: LD_ADDR_OWVAR 39
61403: PUSH
61404: LD_INT 3
61406: ST_TO_ADDR
// vc_control := control_computer ;
61407: LD_ADDR_OWVAR 38
61411: PUSH
61412: LD_INT 3
61414: ST_TO_ADDR
// vc_weapon := us_double_laser ;
61415: LD_ADDR_OWVAR 40
61419: PUSH
61420: LD_INT 10
61422: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
61423: LD_VAR 0 2
61427: PUSH
61428: LD_INT 1
61430: ARRAY
61431: PPUSH
61432: CALL_OW 310
61436: NOT
61437: IFFALSE 61484
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
61439: CALL_OW 45
61443: PPUSH
61444: LD_VAR 0 2
61448: PUSH
61449: LD_INT 1
61451: ARRAY
61452: PPUSH
61453: CALL_OW 250
61457: PPUSH
61458: LD_VAR 0 2
61462: PUSH
61463: LD_INT 1
61465: ARRAY
61466: PPUSH
61467: CALL_OW 251
61471: PPUSH
61472: LD_INT 12
61474: PPUSH
61475: LD_INT 1
61477: PPUSH
61478: CALL_OW 50
61482: GO 61496
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
61484: CALL_OW 45
61488: PPUSH
61489: LD_INT 1
61491: PPUSH
61492: CALL_OW 51
// end ;
61496: GO 61370
61498: POP
61499: POP
// end ;
61500: PPOPN 2
61502: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
61503: LD_EXP 39
61507: PUSH
61508: LD_EXP 85
61512: AND
61513: IFFALSE 61735
61515: GO 61517
61517: DISABLE
61518: LD_INT 0
61520: PPUSH
61521: PPUSH
61522: PPUSH
61523: PPUSH
61524: PPUSH
61525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61526: LD_ADDR_VAR 0 6
61530: PUSH
61531: LD_INT 22
61533: PUSH
61534: LD_OWVAR 2
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 21
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 3
61555: PUSH
61556: LD_INT 23
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: LIST
61574: PPUSH
61575: CALL_OW 69
61579: ST_TO_ADDR
// if not tmp then
61580: LD_VAR 0 6
61584: NOT
61585: IFFALSE 61589
// exit ;
61587: GO 61735
// s1 := rand ( 1 , 4 ) ;
61589: LD_ADDR_VAR 0 2
61593: PUSH
61594: LD_INT 1
61596: PPUSH
61597: LD_INT 4
61599: PPUSH
61600: CALL_OW 12
61604: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
61605: LD_ADDR_VAR 0 4
61609: PUSH
61610: LD_VAR 0 6
61614: PUSH
61615: LD_INT 1
61617: ARRAY
61618: PPUSH
61619: LD_VAR 0 2
61623: PPUSH
61624: CALL_OW 259
61628: ST_TO_ADDR
// if s1 = 1 then
61629: LD_VAR 0 2
61633: PUSH
61634: LD_INT 1
61636: EQUAL
61637: IFFALSE 61657
// s2 := rand ( 2 , 4 ) else
61639: LD_ADDR_VAR 0 3
61643: PUSH
61644: LD_INT 2
61646: PPUSH
61647: LD_INT 4
61649: PPUSH
61650: CALL_OW 12
61654: ST_TO_ADDR
61655: GO 61665
// s2 := 1 ;
61657: LD_ADDR_VAR 0 3
61661: PUSH
61662: LD_INT 1
61664: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
61665: LD_ADDR_VAR 0 5
61669: PUSH
61670: LD_VAR 0 6
61674: PUSH
61675: LD_INT 1
61677: ARRAY
61678: PPUSH
61679: LD_VAR 0 3
61683: PPUSH
61684: CALL_OW 259
61688: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61689: LD_VAR 0 6
61693: PUSH
61694: LD_INT 1
61696: ARRAY
61697: PPUSH
61698: LD_VAR 0 2
61702: PPUSH
61703: LD_VAR 0 5
61707: PPUSH
61708: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
61712: LD_VAR 0 6
61716: PUSH
61717: LD_INT 1
61719: ARRAY
61720: PPUSH
61721: LD_VAR 0 3
61725: PPUSH
61726: LD_VAR 0 4
61730: PPUSH
61731: CALL_OW 237
// end ;
61735: PPOPN 6
61737: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
61738: LD_EXP 39
61742: PUSH
61743: LD_EXP 86
61747: AND
61748: IFFALSE 61827
61750: GO 61752
61752: DISABLE
61753: LD_INT 0
61755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
61756: LD_ADDR_VAR 0 1
61760: PUSH
61761: LD_INT 22
61763: PUSH
61764: LD_OWVAR 2
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 30
61775: PUSH
61776: LD_INT 3
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PPUSH
61787: CALL_OW 69
61791: ST_TO_ADDR
// if not tmp then
61792: LD_VAR 0 1
61796: NOT
61797: IFFALSE 61801
// exit ;
61799: GO 61827
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61801: LD_VAR 0 1
61805: PUSH
61806: LD_INT 1
61808: PPUSH
61809: LD_VAR 0 1
61813: PPUSH
61814: CALL_OW 12
61818: ARRAY
61819: PPUSH
61820: LD_INT 1
61822: PPUSH
61823: CALL_OW 234
// end ;
61827: PPOPN 1
61829: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
61830: LD_EXP 39
61834: PUSH
61835: LD_EXP 87
61839: AND
61840: IFFALSE 61952
61842: GO 61844
61844: DISABLE
61845: LD_INT 0
61847: PPUSH
61848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
61849: LD_ADDR_VAR 0 2
61853: PUSH
61854: LD_INT 22
61856: PUSH
61857: LD_OWVAR 2
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 2
61868: PUSH
61869: LD_INT 30
61871: PUSH
61872: LD_INT 27
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 30
61881: PUSH
61882: LD_INT 26
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 30
61891: PUSH
61892: LD_INT 28
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PPUSH
61909: CALL_OW 69
61913: ST_TO_ADDR
// if not tmp then
61914: LD_VAR 0 2
61918: NOT
61919: IFFALSE 61923
// exit ;
61921: GO 61952
// for i in tmp do
61923: LD_ADDR_VAR 0 1
61927: PUSH
61928: LD_VAR 0 2
61932: PUSH
61933: FOR_IN
61934: IFFALSE 61950
// SetLives ( i , 1 ) ;
61936: LD_VAR 0 1
61940: PPUSH
61941: LD_INT 1
61943: PPUSH
61944: CALL_OW 234
61948: GO 61933
61950: POP
61951: POP
// end ;
61952: PPOPN 2
61954: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
61955: LD_EXP 39
61959: PUSH
61960: LD_EXP 88
61964: AND
61965: IFFALSE 62252
61967: GO 61969
61969: DISABLE
61970: LD_INT 0
61972: PPUSH
61973: PPUSH
61974: PPUSH
// begin i := rand ( 1 , 7 ) ;
61975: LD_ADDR_VAR 0 1
61979: PUSH
61980: LD_INT 1
61982: PPUSH
61983: LD_INT 7
61985: PPUSH
61986: CALL_OW 12
61990: ST_TO_ADDR
// case i of 1 :
61991: LD_VAR 0 1
61995: PUSH
61996: LD_INT 1
61998: DOUBLE
61999: EQUAL
62000: IFTRUE 62004
62002: GO 62014
62004: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
62005: LD_STRING earthquake(getX(game), 0, 32)
62007: PPUSH
62008: CALL_OW 559
62012: GO 62252
62014: LD_INT 2
62016: DOUBLE
62017: EQUAL
62018: IFTRUE 62022
62020: GO 62036
62022: POP
// begin ToLua ( displayStucuk(); ) ;
62023: LD_STRING displayStucuk();
62025: PPUSH
62026: CALL_OW 559
// ResetFog ;
62030: CALL_OW 335
// end ; 3 :
62034: GO 62252
62036: LD_INT 3
62038: DOUBLE
62039: EQUAL
62040: IFTRUE 62044
62042: GO 62148
62044: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62045: LD_ADDR_VAR 0 2
62049: PUSH
62050: LD_INT 22
62052: PUSH
62053: LD_OWVAR 2
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 25
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PPUSH
62076: CALL_OW 69
62080: ST_TO_ADDR
// if not tmp then
62081: LD_VAR 0 2
62085: NOT
62086: IFFALSE 62090
// exit ;
62088: GO 62252
// un := tmp [ rand ( 1 , tmp ) ] ;
62090: LD_ADDR_VAR 0 3
62094: PUSH
62095: LD_VAR 0 2
62099: PUSH
62100: LD_INT 1
62102: PPUSH
62103: LD_VAR 0 2
62107: PPUSH
62108: CALL_OW 12
62112: ARRAY
62113: ST_TO_ADDR
// if Crawls ( un ) then
62114: LD_VAR 0 3
62118: PPUSH
62119: CALL_OW 318
62123: IFFALSE 62134
// ComWalk ( un ) ;
62125: LD_VAR 0 3
62129: PPUSH
62130: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62134: LD_VAR 0 3
62138: PPUSH
62139: LD_INT 8
62141: PPUSH
62142: CALL_OW 336
// end ; 4 :
62146: GO 62252
62148: LD_INT 4
62150: DOUBLE
62151: EQUAL
62152: IFTRUE 62156
62154: GO 62230
62156: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
62157: LD_ADDR_VAR 0 2
62161: PUSH
62162: LD_INT 22
62164: PUSH
62165: LD_OWVAR 2
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 30
62176: PUSH
62177: LD_INT 29
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PPUSH
62188: CALL_OW 69
62192: ST_TO_ADDR
// if not tmp then
62193: LD_VAR 0 2
62197: NOT
62198: IFFALSE 62202
// exit ;
62200: GO 62252
// CenterNowOnUnits ( tmp [ 1 ] ) ;
62202: LD_VAR 0 2
62206: PUSH
62207: LD_INT 1
62209: ARRAY
62210: PPUSH
62211: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
62215: LD_VAR 0 2
62219: PUSH
62220: LD_INT 1
62222: ARRAY
62223: PPUSH
62224: CALL_OW 65
// end ; 5 .. 7 :
62228: GO 62252
62230: LD_INT 5
62232: DOUBLE
62233: GREATEREQUAL
62234: IFFALSE 62242
62236: LD_INT 7
62238: DOUBLE
62239: LESSEQUAL
62240: IFTRUE 62244
62242: GO 62251
62244: POP
// StreamSibBomb ; end ;
62245: CALL 58489 0 0
62249: GO 62252
62251: POP
// end ;
62252: PPOPN 3
62254: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
62255: LD_EXP 39
62259: PUSH
62260: LD_EXP 89
62264: AND
62265: IFFALSE 62421
62267: GO 62269
62269: DISABLE
62270: LD_INT 0
62272: PPUSH
62273: PPUSH
62274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
62275: LD_ADDR_VAR 0 2
62279: PUSH
62280: LD_INT 81
62282: PUSH
62283: LD_OWVAR 2
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: LD_INT 21
62297: PUSH
62298: LD_INT 1
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 21
62307: PUSH
62308: LD_INT 2
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: LIST
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PPUSH
62324: CALL_OW 69
62328: ST_TO_ADDR
// if not tmp then
62329: LD_VAR 0 2
62333: NOT
62334: IFFALSE 62338
// exit ;
62336: GO 62421
// p := 0 ;
62338: LD_ADDR_VAR 0 3
62342: PUSH
62343: LD_INT 0
62345: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62346: LD_INT 35
62348: PPUSH
62349: CALL_OW 67
// p := p + 1 ;
62353: LD_ADDR_VAR 0 3
62357: PUSH
62358: LD_VAR 0 3
62362: PUSH
62363: LD_INT 1
62365: PLUS
62366: ST_TO_ADDR
// for i in tmp do
62367: LD_ADDR_VAR 0 1
62371: PUSH
62372: LD_VAR 0 2
62376: PUSH
62377: FOR_IN
62378: IFFALSE 62409
// if GetLives ( i ) < 1000 then
62380: LD_VAR 0 1
62384: PPUSH
62385: CALL_OW 256
62389: PUSH
62390: LD_INT 1000
62392: LESS
62393: IFFALSE 62407
// SetLives ( i , 1000 ) ;
62395: LD_VAR 0 1
62399: PPUSH
62400: LD_INT 1000
62402: PPUSH
62403: CALL_OW 234
62407: GO 62377
62409: POP
62410: POP
// until p > 20 ;
62411: LD_VAR 0 3
62415: PUSH
62416: LD_INT 20
62418: GREATER
62419: IFFALSE 62346
// end ;
62421: PPOPN 3
62423: END
// every 0 0$1 trigger StreamModeActive and sTime do
62424: LD_EXP 39
62428: PUSH
62429: LD_EXP 90
62433: AND
62434: IFFALSE 62469
62436: GO 62438
62438: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
62439: LD_INT 28
62441: PPUSH
62442: LD_OWVAR 2
62446: PPUSH
62447: LD_INT 2
62449: PPUSH
62450: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
62454: LD_INT 30
62456: PPUSH
62457: LD_OWVAR 2
62461: PPUSH
62462: LD_INT 2
62464: PPUSH
62465: CALL_OW 322
// end ;
62469: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
62470: LD_EXP 39
62474: PUSH
62475: LD_EXP 91
62479: AND
62480: IFFALSE 62601
62482: GO 62484
62484: DISABLE
62485: LD_INT 0
62487: PPUSH
62488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62489: LD_ADDR_VAR 0 2
62493: PUSH
62494: LD_INT 22
62496: PUSH
62497: LD_OWVAR 2
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 21
62508: PUSH
62509: LD_INT 1
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 3
62518: PUSH
62519: LD_INT 23
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: LIST
62537: PPUSH
62538: CALL_OW 69
62542: ST_TO_ADDR
// if not tmp then
62543: LD_VAR 0 2
62547: NOT
62548: IFFALSE 62552
// exit ;
62550: GO 62601
// for i in tmp do
62552: LD_ADDR_VAR 0 1
62556: PUSH
62557: LD_VAR 0 2
62561: PUSH
62562: FOR_IN
62563: IFFALSE 62599
// begin if Crawls ( i ) then
62565: LD_VAR 0 1
62569: PPUSH
62570: CALL_OW 318
62574: IFFALSE 62585
// ComWalk ( i ) ;
62576: LD_VAR 0 1
62580: PPUSH
62581: CALL_OW 138
// SetClass ( i , 2 ) ;
62585: LD_VAR 0 1
62589: PPUSH
62590: LD_INT 2
62592: PPUSH
62593: CALL_OW 336
// end ;
62597: GO 62562
62599: POP
62600: POP
// end ;
62601: PPOPN 2
62603: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
62604: LD_EXP 39
62608: PUSH
62609: LD_EXP 92
62613: AND
62614: IFFALSE 62902
62616: GO 62618
62618: DISABLE
62619: LD_INT 0
62621: PPUSH
62622: PPUSH
62623: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
62624: LD_OWVAR 2
62628: PPUSH
62629: LD_INT 9
62631: PPUSH
62632: LD_INT 1
62634: PPUSH
62635: LD_INT 1
62637: PPUSH
62638: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
62642: LD_INT 9
62644: PPUSH
62645: LD_OWVAR 2
62649: PPUSH
62650: CALL_OW 343
// uc_side := 9 ;
62654: LD_ADDR_OWVAR 20
62658: PUSH
62659: LD_INT 9
62661: ST_TO_ADDR
// uc_nation := 2 ;
62662: LD_ADDR_OWVAR 21
62666: PUSH
62667: LD_INT 2
62669: ST_TO_ADDR
// hc_name := Dark Warrior ;
62670: LD_ADDR_OWVAR 26
62674: PUSH
62675: LD_STRING Dark Warrior
62677: ST_TO_ADDR
// hc_gallery :=  ;
62678: LD_ADDR_OWVAR 33
62682: PUSH
62683: LD_STRING 
62685: ST_TO_ADDR
// hc_noskilllimit := true ;
62686: LD_ADDR_OWVAR 76
62690: PUSH
62691: LD_INT 1
62693: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
62694: LD_ADDR_OWVAR 31
62698: PUSH
62699: LD_INT 30
62701: PUSH
62702: LD_INT 30
62704: PUSH
62705: LD_INT 30
62707: PUSH
62708: LD_INT 30
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: ST_TO_ADDR
// un := CreateHuman ;
62717: LD_ADDR_VAR 0 3
62721: PUSH
62722: CALL_OW 44
62726: ST_TO_ADDR
// hc_noskilllimit := false ;
62727: LD_ADDR_OWVAR 76
62731: PUSH
62732: LD_INT 0
62734: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62735: LD_VAR 0 3
62739: PPUSH
62740: LD_INT 1
62742: PPUSH
62743: CALL_OW 51
// ToLua ( playRanger() ) ;
62747: LD_STRING playRanger()
62749: PPUSH
62750: CALL_OW 559
// p := 0 ;
62754: LD_ADDR_VAR 0 2
62758: PUSH
62759: LD_INT 0
62761: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62762: LD_INT 35
62764: PPUSH
62765: CALL_OW 67
// p := p + 1 ;
62769: LD_ADDR_VAR 0 2
62773: PUSH
62774: LD_VAR 0 2
62778: PUSH
62779: LD_INT 1
62781: PLUS
62782: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
62783: LD_VAR 0 3
62787: PPUSH
62788: CALL_OW 256
62792: PUSH
62793: LD_INT 1000
62795: LESS
62796: IFFALSE 62810
// SetLives ( un , 1000 ) ;
62798: LD_VAR 0 3
62802: PPUSH
62803: LD_INT 1000
62805: PPUSH
62806: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
62810: LD_VAR 0 3
62814: PPUSH
62815: LD_INT 81
62817: PUSH
62818: LD_OWVAR 2
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 91
62829: PUSH
62830: LD_VAR 0 3
62834: PUSH
62835: LD_INT 30
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: LIST
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PPUSH
62847: CALL_OW 69
62851: PPUSH
62852: LD_VAR 0 3
62856: PPUSH
62857: CALL_OW 74
62861: PPUSH
62862: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
62866: LD_VAR 0 2
62870: PUSH
62871: LD_INT 80
62873: GREATER
62874: PUSH
62875: LD_VAR 0 3
62879: PPUSH
62880: CALL_OW 301
62884: OR
62885: IFFALSE 62762
// if un then
62887: LD_VAR 0 3
62891: IFFALSE 62902
// RemoveUnit ( un ) ;
62893: LD_VAR 0 3
62897: PPUSH
62898: CALL_OW 64
// end ;
62902: PPOPN 3
62904: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
62905: LD_EXP 93
62909: IFFALSE 63025
62911: GO 62913
62913: DISABLE
62914: LD_INT 0
62916: PPUSH
62917: PPUSH
62918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62919: LD_ADDR_VAR 0 2
62923: PUSH
62924: LD_INT 81
62926: PUSH
62927: LD_OWVAR 2
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 21
62938: PUSH
62939: LD_INT 1
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PPUSH
62950: CALL_OW 69
62954: ST_TO_ADDR
// ToLua ( playComputer() ) ;
62955: LD_STRING playComputer()
62957: PPUSH
62958: CALL_OW 559
// if not tmp then
62962: LD_VAR 0 2
62966: NOT
62967: IFFALSE 62971
// exit ;
62969: GO 63025
// for i in tmp do
62971: LD_ADDR_VAR 0 1
62975: PUSH
62976: LD_VAR 0 2
62980: PUSH
62981: FOR_IN
62982: IFFALSE 63023
// for j := 1 to 4 do
62984: LD_ADDR_VAR 0 3
62988: PUSH
62989: DOUBLE
62990: LD_INT 1
62992: DEC
62993: ST_TO_ADDR
62994: LD_INT 4
62996: PUSH
62997: FOR_TO
62998: IFFALSE 63019
// SetSkill ( i , j , 10 ) ;
63000: LD_VAR 0 1
63004: PPUSH
63005: LD_VAR 0 3
63009: PPUSH
63010: LD_INT 10
63012: PPUSH
63013: CALL_OW 237
63017: GO 62997
63019: POP
63020: POP
63021: GO 62981
63023: POP
63024: POP
// end ;
63025: PPOPN 3
63027: END
// every 0 0$1 trigger s30 do var i , tmp ;
63028: LD_EXP 94
63032: IFFALSE 63101
63034: GO 63036
63036: DISABLE
63037: LD_INT 0
63039: PPUSH
63040: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63041: LD_ADDR_VAR 0 2
63045: PUSH
63046: LD_INT 22
63048: PUSH
63049: LD_OWVAR 2
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PPUSH
63058: CALL_OW 69
63062: ST_TO_ADDR
// if not tmp then
63063: LD_VAR 0 2
63067: NOT
63068: IFFALSE 63072
// exit ;
63070: GO 63101
// for i in tmp do
63072: LD_ADDR_VAR 0 1
63076: PUSH
63077: LD_VAR 0 2
63081: PUSH
63082: FOR_IN
63083: IFFALSE 63099
// SetLives ( i , 300 ) ;
63085: LD_VAR 0 1
63089: PPUSH
63090: LD_INT 300
63092: PPUSH
63093: CALL_OW 234
63097: GO 63082
63099: POP
63100: POP
// end ;
63101: PPOPN 2
63103: END
// every 0 0$1 trigger s60 do var i , tmp ;
63104: LD_EXP 95
63108: IFFALSE 63177
63110: GO 63112
63112: DISABLE
63113: LD_INT 0
63115: PPUSH
63116: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63117: LD_ADDR_VAR 0 2
63121: PUSH
63122: LD_INT 22
63124: PUSH
63125: LD_OWVAR 2
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PPUSH
63134: CALL_OW 69
63138: ST_TO_ADDR
// if not tmp then
63139: LD_VAR 0 2
63143: NOT
63144: IFFALSE 63148
// exit ;
63146: GO 63177
// for i in tmp do
63148: LD_ADDR_VAR 0 1
63152: PUSH
63153: LD_VAR 0 2
63157: PUSH
63158: FOR_IN
63159: IFFALSE 63175
// SetLives ( i , 600 ) ;
63161: LD_VAR 0 1
63165: PPUSH
63166: LD_INT 600
63168: PPUSH
63169: CALL_OW 234
63173: GO 63158
63175: POP
63176: POP
// end ;
63177: PPOPN 2
63179: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63180: LD_INT 0
63182: PPUSH
// case cmd of 301 :
63183: LD_VAR 0 1
63187: PUSH
63188: LD_INT 301
63190: DOUBLE
63191: EQUAL
63192: IFTRUE 63196
63194: GO 63228
63196: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
63197: LD_VAR 0 6
63201: PPUSH
63202: LD_VAR 0 7
63206: PPUSH
63207: LD_VAR 0 8
63211: PPUSH
63212: LD_VAR 0 4
63216: PPUSH
63217: LD_VAR 0 5
63221: PPUSH
63222: CALL 64437 0 5
63226: GO 63349
63228: LD_INT 302
63230: DOUBLE
63231: EQUAL
63232: IFTRUE 63236
63234: GO 63273
63236: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
63237: LD_VAR 0 6
63241: PPUSH
63242: LD_VAR 0 7
63246: PPUSH
63247: LD_VAR 0 8
63251: PPUSH
63252: LD_VAR 0 9
63256: PPUSH
63257: LD_VAR 0 4
63261: PPUSH
63262: LD_VAR 0 5
63266: PPUSH
63267: CALL 64528 0 6
63271: GO 63349
63273: LD_INT 303
63275: DOUBLE
63276: EQUAL
63277: IFTRUE 63281
63279: GO 63318
63281: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
63282: LD_VAR 0 6
63286: PPUSH
63287: LD_VAR 0 7
63291: PPUSH
63292: LD_VAR 0 8
63296: PPUSH
63297: LD_VAR 0 9
63301: PPUSH
63302: LD_VAR 0 4
63306: PPUSH
63307: LD_VAR 0 5
63311: PPUSH
63312: CALL 63354 0 6
63316: GO 63349
63318: LD_INT 304
63320: DOUBLE
63321: EQUAL
63322: IFTRUE 63326
63324: GO 63348
63326: POP
// hHackTeleport ( unit , x , y ) ; end ;
63327: LD_VAR 0 2
63331: PPUSH
63332: LD_VAR 0 4
63336: PPUSH
63337: LD_VAR 0 5
63341: PPUSH
63342: CALL 65121 0 3
63346: GO 63349
63348: POP
// end ;
63349: LD_VAR 0 12
63353: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
63354: LD_INT 0
63356: PPUSH
63357: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
63358: LD_VAR 0 1
63362: PUSH
63363: LD_INT 1
63365: LESS
63366: PUSH
63367: LD_VAR 0 1
63371: PUSH
63372: LD_INT 3
63374: GREATER
63375: OR
63376: PUSH
63377: LD_VAR 0 5
63381: PPUSH
63382: LD_VAR 0 6
63386: PPUSH
63387: CALL_OW 428
63391: OR
63392: IFFALSE 63396
// exit ;
63394: GO 64124
// uc_side := your_side ;
63396: LD_ADDR_OWVAR 20
63400: PUSH
63401: LD_OWVAR 2
63405: ST_TO_ADDR
// uc_nation := nation ;
63406: LD_ADDR_OWVAR 21
63410: PUSH
63411: LD_VAR 0 1
63415: ST_TO_ADDR
// bc_level = 1 ;
63416: LD_ADDR_OWVAR 43
63420: PUSH
63421: LD_INT 1
63423: ST_TO_ADDR
// case btype of 1 :
63424: LD_VAR 0 2
63428: PUSH
63429: LD_INT 1
63431: DOUBLE
63432: EQUAL
63433: IFTRUE 63437
63435: GO 63448
63437: POP
// bc_type := b_depot ; 2 :
63438: LD_ADDR_OWVAR 42
63442: PUSH
63443: LD_INT 0
63445: ST_TO_ADDR
63446: GO 64068
63448: LD_INT 2
63450: DOUBLE
63451: EQUAL
63452: IFTRUE 63456
63454: GO 63467
63456: POP
// bc_type := b_warehouse ; 3 :
63457: LD_ADDR_OWVAR 42
63461: PUSH
63462: LD_INT 1
63464: ST_TO_ADDR
63465: GO 64068
63467: LD_INT 3
63469: DOUBLE
63470: EQUAL
63471: IFTRUE 63475
63473: GO 63486
63475: POP
// bc_type := b_lab ; 4 .. 9 :
63476: LD_ADDR_OWVAR 42
63480: PUSH
63481: LD_INT 6
63483: ST_TO_ADDR
63484: GO 64068
63486: LD_INT 4
63488: DOUBLE
63489: GREATEREQUAL
63490: IFFALSE 63498
63492: LD_INT 9
63494: DOUBLE
63495: LESSEQUAL
63496: IFTRUE 63500
63498: GO 63560
63500: POP
// begin bc_type := b_lab_half ;
63501: LD_ADDR_OWVAR 42
63505: PUSH
63506: LD_INT 7
63508: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
63509: LD_ADDR_OWVAR 44
63513: PUSH
63514: LD_INT 10
63516: PUSH
63517: LD_INT 11
63519: PUSH
63520: LD_INT 12
63522: PUSH
63523: LD_INT 15
63525: PUSH
63526: LD_INT 14
63528: PUSH
63529: LD_INT 13
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: PUSH
63540: LD_VAR 0 2
63544: PUSH
63545: LD_INT 3
63547: MINUS
63548: ARRAY
63549: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
63550: LD_ADDR_OWVAR 45
63554: PUSH
63555: LD_INT 9
63557: ST_TO_ADDR
// end ; 10 .. 13 :
63558: GO 64068
63560: LD_INT 10
63562: DOUBLE
63563: GREATEREQUAL
63564: IFFALSE 63572
63566: LD_INT 13
63568: DOUBLE
63569: LESSEQUAL
63570: IFTRUE 63574
63572: GO 63651
63574: POP
// begin bc_type := b_lab_full ;
63575: LD_ADDR_OWVAR 42
63579: PUSH
63580: LD_INT 8
63582: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
63583: LD_ADDR_OWVAR 44
63587: PUSH
63588: LD_INT 10
63590: PUSH
63591: LD_INT 12
63593: PUSH
63594: LD_INT 14
63596: PUSH
63597: LD_INT 13
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: PUSH
63606: LD_VAR 0 2
63610: PUSH
63611: LD_INT 9
63613: MINUS
63614: ARRAY
63615: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
63616: LD_ADDR_OWVAR 45
63620: PUSH
63621: LD_INT 11
63623: PUSH
63624: LD_INT 15
63626: PUSH
63627: LD_INT 12
63629: PUSH
63630: LD_INT 15
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: PUSH
63639: LD_VAR 0 2
63643: PUSH
63644: LD_INT 9
63646: MINUS
63647: ARRAY
63648: ST_TO_ADDR
// end ; 14 :
63649: GO 64068
63651: LD_INT 14
63653: DOUBLE
63654: EQUAL
63655: IFTRUE 63659
63657: GO 63670
63659: POP
// bc_type := b_workshop ; 15 :
63660: LD_ADDR_OWVAR 42
63664: PUSH
63665: LD_INT 2
63667: ST_TO_ADDR
63668: GO 64068
63670: LD_INT 15
63672: DOUBLE
63673: EQUAL
63674: IFTRUE 63678
63676: GO 63689
63678: POP
// bc_type := b_factory ; 16 :
63679: LD_ADDR_OWVAR 42
63683: PUSH
63684: LD_INT 3
63686: ST_TO_ADDR
63687: GO 64068
63689: LD_INT 16
63691: DOUBLE
63692: EQUAL
63693: IFTRUE 63697
63695: GO 63708
63697: POP
// bc_type := b_ext_gun ; 17 :
63698: LD_ADDR_OWVAR 42
63702: PUSH
63703: LD_INT 17
63705: ST_TO_ADDR
63706: GO 64068
63708: LD_INT 17
63710: DOUBLE
63711: EQUAL
63712: IFTRUE 63716
63714: GO 63744
63716: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
63717: LD_ADDR_OWVAR 42
63721: PUSH
63722: LD_INT 19
63724: PUSH
63725: LD_INT 23
63727: PUSH
63728: LD_INT 19
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: LIST
63735: PUSH
63736: LD_VAR 0 1
63740: ARRAY
63741: ST_TO_ADDR
63742: GO 64068
63744: LD_INT 18
63746: DOUBLE
63747: EQUAL
63748: IFTRUE 63752
63750: GO 63763
63752: POP
// bc_type := b_ext_radar ; 19 :
63753: LD_ADDR_OWVAR 42
63757: PUSH
63758: LD_INT 20
63760: ST_TO_ADDR
63761: GO 64068
63763: LD_INT 19
63765: DOUBLE
63766: EQUAL
63767: IFTRUE 63771
63769: GO 63782
63771: POP
// bc_type := b_ext_radio ; 20 :
63772: LD_ADDR_OWVAR 42
63776: PUSH
63777: LD_INT 22
63779: ST_TO_ADDR
63780: GO 64068
63782: LD_INT 20
63784: DOUBLE
63785: EQUAL
63786: IFTRUE 63790
63788: GO 63801
63790: POP
// bc_type := b_ext_siberium ; 21 :
63791: LD_ADDR_OWVAR 42
63795: PUSH
63796: LD_INT 21
63798: ST_TO_ADDR
63799: GO 64068
63801: LD_INT 21
63803: DOUBLE
63804: EQUAL
63805: IFTRUE 63809
63807: GO 63820
63809: POP
// bc_type := b_ext_computer ; 22 :
63810: LD_ADDR_OWVAR 42
63814: PUSH
63815: LD_INT 24
63817: ST_TO_ADDR
63818: GO 64068
63820: LD_INT 22
63822: DOUBLE
63823: EQUAL
63824: IFTRUE 63828
63826: GO 63839
63828: POP
// bc_type := b_ext_track ; 23 :
63829: LD_ADDR_OWVAR 42
63833: PUSH
63834: LD_INT 16
63836: ST_TO_ADDR
63837: GO 64068
63839: LD_INT 23
63841: DOUBLE
63842: EQUAL
63843: IFTRUE 63847
63845: GO 63858
63847: POP
// bc_type := b_ext_laser ; 24 :
63848: LD_ADDR_OWVAR 42
63852: PUSH
63853: LD_INT 25
63855: ST_TO_ADDR
63856: GO 64068
63858: LD_INT 24
63860: DOUBLE
63861: EQUAL
63862: IFTRUE 63866
63864: GO 63877
63866: POP
// bc_type := b_control_tower ; 25 :
63867: LD_ADDR_OWVAR 42
63871: PUSH
63872: LD_INT 36
63874: ST_TO_ADDR
63875: GO 64068
63877: LD_INT 25
63879: DOUBLE
63880: EQUAL
63881: IFTRUE 63885
63883: GO 63896
63885: POP
// bc_type := b_breastwork ; 26 :
63886: LD_ADDR_OWVAR 42
63890: PUSH
63891: LD_INT 31
63893: ST_TO_ADDR
63894: GO 64068
63896: LD_INT 26
63898: DOUBLE
63899: EQUAL
63900: IFTRUE 63904
63902: GO 63915
63904: POP
// bc_type := b_bunker ; 27 :
63905: LD_ADDR_OWVAR 42
63909: PUSH
63910: LD_INT 32
63912: ST_TO_ADDR
63913: GO 64068
63915: LD_INT 27
63917: DOUBLE
63918: EQUAL
63919: IFTRUE 63923
63921: GO 63934
63923: POP
// bc_type := b_turret ; 28 :
63924: LD_ADDR_OWVAR 42
63928: PUSH
63929: LD_INT 33
63931: ST_TO_ADDR
63932: GO 64068
63934: LD_INT 28
63936: DOUBLE
63937: EQUAL
63938: IFTRUE 63942
63940: GO 63953
63942: POP
// bc_type := b_armoury ; 29 :
63943: LD_ADDR_OWVAR 42
63947: PUSH
63948: LD_INT 4
63950: ST_TO_ADDR
63951: GO 64068
63953: LD_INT 29
63955: DOUBLE
63956: EQUAL
63957: IFTRUE 63961
63959: GO 63972
63961: POP
// bc_type := b_barracks ; 30 :
63962: LD_ADDR_OWVAR 42
63966: PUSH
63967: LD_INT 5
63969: ST_TO_ADDR
63970: GO 64068
63972: LD_INT 30
63974: DOUBLE
63975: EQUAL
63976: IFTRUE 63980
63978: GO 63991
63980: POP
// bc_type := b_solar_power ; 31 :
63981: LD_ADDR_OWVAR 42
63985: PUSH
63986: LD_INT 27
63988: ST_TO_ADDR
63989: GO 64068
63991: LD_INT 31
63993: DOUBLE
63994: EQUAL
63995: IFTRUE 63999
63997: GO 64010
63999: POP
// bc_type := b_oil_power ; 32 :
64000: LD_ADDR_OWVAR 42
64004: PUSH
64005: LD_INT 26
64007: ST_TO_ADDR
64008: GO 64068
64010: LD_INT 32
64012: DOUBLE
64013: EQUAL
64014: IFTRUE 64018
64016: GO 64029
64018: POP
// bc_type := b_siberite_power ; 33 :
64019: LD_ADDR_OWVAR 42
64023: PUSH
64024: LD_INT 28
64026: ST_TO_ADDR
64027: GO 64068
64029: LD_INT 33
64031: DOUBLE
64032: EQUAL
64033: IFTRUE 64037
64035: GO 64048
64037: POP
// bc_type := b_oil_mine ; 34 :
64038: LD_ADDR_OWVAR 42
64042: PUSH
64043: LD_INT 29
64045: ST_TO_ADDR
64046: GO 64068
64048: LD_INT 34
64050: DOUBLE
64051: EQUAL
64052: IFTRUE 64056
64054: GO 64067
64056: POP
// bc_type := b_siberite_mine ; end ;
64057: LD_ADDR_OWVAR 42
64061: PUSH
64062: LD_INT 30
64064: ST_TO_ADDR
64065: GO 64068
64067: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
64068: LD_ADDR_VAR 0 8
64072: PUSH
64073: LD_VAR 0 5
64077: PPUSH
64078: LD_VAR 0 6
64082: PPUSH
64083: LD_VAR 0 3
64087: PPUSH
64088: CALL_OW 47
64092: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
64093: LD_OWVAR 42
64097: PUSH
64098: LD_INT 32
64100: PUSH
64101: LD_INT 33
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: IN
64108: IFFALSE 64124
// PlaceWeaponTurret ( b , weapon ) ;
64110: LD_VAR 0 8
64114: PPUSH
64115: LD_VAR 0 4
64119: PPUSH
64120: CALL_OW 431
// end ;
64124: LD_VAR 0 7
64128: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
64129: LD_INT 0
64131: PPUSH
64132: PPUSH
64133: PPUSH
64134: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64135: LD_ADDR_VAR 0 4
64139: PUSH
64140: LD_INT 22
64142: PUSH
64143: LD_OWVAR 2
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 2
64154: PUSH
64155: LD_INT 30
64157: PUSH
64158: LD_INT 0
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 30
64167: PUSH
64168: LD_INT 1
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: LIST
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PPUSH
64184: CALL_OW 69
64188: ST_TO_ADDR
// if not tmp then
64189: LD_VAR 0 4
64193: NOT
64194: IFFALSE 64198
// exit ;
64196: GO 64257
// for i in tmp do
64198: LD_ADDR_VAR 0 2
64202: PUSH
64203: LD_VAR 0 4
64207: PUSH
64208: FOR_IN
64209: IFFALSE 64255
// for j = 1 to 3 do
64211: LD_ADDR_VAR 0 3
64215: PUSH
64216: DOUBLE
64217: LD_INT 1
64219: DEC
64220: ST_TO_ADDR
64221: LD_INT 3
64223: PUSH
64224: FOR_TO
64225: IFFALSE 64251
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
64227: LD_VAR 0 2
64231: PPUSH
64232: CALL_OW 274
64236: PPUSH
64237: LD_VAR 0 3
64241: PPUSH
64242: LD_INT 99999
64244: PPUSH
64245: CALL_OW 277
64249: GO 64224
64251: POP
64252: POP
64253: GO 64208
64255: POP
64256: POP
// end ;
64257: LD_VAR 0 1
64261: RET
// export function hHackSetLevel10 ; var i , j ; begin
64262: LD_INT 0
64264: PPUSH
64265: PPUSH
64266: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64267: LD_ADDR_VAR 0 2
64271: PUSH
64272: LD_INT 21
64274: PUSH
64275: LD_INT 1
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PPUSH
64282: CALL_OW 69
64286: PUSH
64287: FOR_IN
64288: IFFALSE 64340
// if IsSelected ( i ) then
64290: LD_VAR 0 2
64294: PPUSH
64295: CALL_OW 306
64299: IFFALSE 64338
// begin for j := 1 to 4 do
64301: LD_ADDR_VAR 0 3
64305: PUSH
64306: DOUBLE
64307: LD_INT 1
64309: DEC
64310: ST_TO_ADDR
64311: LD_INT 4
64313: PUSH
64314: FOR_TO
64315: IFFALSE 64336
// SetSkill ( i , j , 10 ) ;
64317: LD_VAR 0 2
64321: PPUSH
64322: LD_VAR 0 3
64326: PPUSH
64327: LD_INT 10
64329: PPUSH
64330: CALL_OW 237
64334: GO 64314
64336: POP
64337: POP
// end ;
64338: GO 64287
64340: POP
64341: POP
// end ;
64342: LD_VAR 0 1
64346: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
64347: LD_INT 0
64349: PPUSH
64350: PPUSH
64351: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
64352: LD_ADDR_VAR 0 2
64356: PUSH
64357: LD_INT 22
64359: PUSH
64360: LD_OWVAR 2
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 21
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PPUSH
64383: CALL_OW 69
64387: PUSH
64388: FOR_IN
64389: IFFALSE 64430
// begin for j := 1 to 4 do
64391: LD_ADDR_VAR 0 3
64395: PUSH
64396: DOUBLE
64397: LD_INT 1
64399: DEC
64400: ST_TO_ADDR
64401: LD_INT 4
64403: PUSH
64404: FOR_TO
64405: IFFALSE 64426
// SetSkill ( i , j , 10 ) ;
64407: LD_VAR 0 2
64411: PPUSH
64412: LD_VAR 0 3
64416: PPUSH
64417: LD_INT 10
64419: PPUSH
64420: CALL_OW 237
64424: GO 64404
64426: POP
64427: POP
// end ;
64428: GO 64388
64430: POP
64431: POP
// end ;
64432: LD_VAR 0 1
64436: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
64437: LD_INT 0
64439: PPUSH
// uc_side := your_side ;
64440: LD_ADDR_OWVAR 20
64444: PUSH
64445: LD_OWVAR 2
64449: ST_TO_ADDR
// uc_nation := nation ;
64450: LD_ADDR_OWVAR 21
64454: PUSH
64455: LD_VAR 0 1
64459: ST_TO_ADDR
// InitHc ;
64460: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
64464: LD_INT 0
64466: PPUSH
64467: LD_VAR 0 2
64471: PPUSH
64472: LD_VAR 0 3
64476: PPUSH
64477: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
64481: LD_VAR 0 4
64485: PPUSH
64486: LD_VAR 0 5
64490: PPUSH
64491: CALL_OW 428
64495: PUSH
64496: LD_INT 0
64498: EQUAL
64499: IFFALSE 64523
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
64501: CALL_OW 44
64505: PPUSH
64506: LD_VAR 0 4
64510: PPUSH
64511: LD_VAR 0 5
64515: PPUSH
64516: LD_INT 1
64518: PPUSH
64519: CALL_OW 48
// end ;
64523: LD_VAR 0 6
64527: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
64528: LD_INT 0
64530: PPUSH
64531: PPUSH
// uc_side := your_side ;
64532: LD_ADDR_OWVAR 20
64536: PUSH
64537: LD_OWVAR 2
64541: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
64542: LD_VAR 0 1
64546: PUSH
64547: LD_INT 1
64549: PUSH
64550: LD_INT 2
64552: PUSH
64553: LD_INT 3
64555: PUSH
64556: LD_INT 4
64558: PUSH
64559: LD_INT 5
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: IN
64569: IFFALSE 64581
// uc_nation := nation_american else
64571: LD_ADDR_OWVAR 21
64575: PUSH
64576: LD_INT 1
64578: ST_TO_ADDR
64579: GO 64624
// if chassis in [ 11 , 12 , 13 , 14 ] then
64581: LD_VAR 0 1
64585: PUSH
64586: LD_INT 11
64588: PUSH
64589: LD_INT 12
64591: PUSH
64592: LD_INT 13
64594: PUSH
64595: LD_INT 14
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: IN
64604: IFFALSE 64616
// uc_nation := nation_arabian else
64606: LD_ADDR_OWVAR 21
64610: PUSH
64611: LD_INT 2
64613: ST_TO_ADDR
64614: GO 64624
// uc_nation := nation_russian ;
64616: LD_ADDR_OWVAR 21
64620: PUSH
64621: LD_INT 3
64623: ST_TO_ADDR
// vc_chassis := chassis ;
64624: LD_ADDR_OWVAR 37
64628: PUSH
64629: LD_VAR 0 1
64633: ST_TO_ADDR
// vc_engine := engine ;
64634: LD_ADDR_OWVAR 39
64638: PUSH
64639: LD_VAR 0 2
64643: ST_TO_ADDR
// vc_control := control ;
64644: LD_ADDR_OWVAR 38
64648: PUSH
64649: LD_VAR 0 3
64653: ST_TO_ADDR
// vc_weapon := weapon ;
64654: LD_ADDR_OWVAR 40
64658: PUSH
64659: LD_VAR 0 4
64663: ST_TO_ADDR
// un := CreateVehicle ;
64664: LD_ADDR_VAR 0 8
64668: PUSH
64669: CALL_OW 45
64673: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
64674: LD_VAR 0 8
64678: PPUSH
64679: LD_INT 0
64681: PPUSH
64682: LD_INT 5
64684: PPUSH
64685: CALL_OW 12
64689: PPUSH
64690: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
64694: LD_VAR 0 8
64698: PPUSH
64699: LD_VAR 0 5
64703: PPUSH
64704: LD_VAR 0 6
64708: PPUSH
64709: LD_INT 1
64711: PPUSH
64712: CALL_OW 48
// end ;
64716: LD_VAR 0 7
64720: RET
// export hInvincible ; every 1 do
64721: GO 64723
64723: DISABLE
// hInvincible := [ ] ;
64724: LD_ADDR_EXP 96
64728: PUSH
64729: EMPTY
64730: ST_TO_ADDR
64731: END
// every 10 do var i ;
64732: GO 64734
64734: DISABLE
64735: LD_INT 0
64737: PPUSH
// begin enable ;
64738: ENABLE
// if not hInvincible then
64739: LD_EXP 96
64743: NOT
64744: IFFALSE 64748
// exit ;
64746: GO 64792
// for i in hInvincible do
64748: LD_ADDR_VAR 0 1
64752: PUSH
64753: LD_EXP 96
64757: PUSH
64758: FOR_IN
64759: IFFALSE 64790
// if GetLives ( i ) < 1000 then
64761: LD_VAR 0 1
64765: PPUSH
64766: CALL_OW 256
64770: PUSH
64771: LD_INT 1000
64773: LESS
64774: IFFALSE 64788
// SetLives ( i , 1000 ) ;
64776: LD_VAR 0 1
64780: PPUSH
64781: LD_INT 1000
64783: PPUSH
64784: CALL_OW 234
64788: GO 64758
64790: POP
64791: POP
// end ;
64792: PPOPN 1
64794: END
// export function hHackInvincible ; var i ; begin
64795: LD_INT 0
64797: PPUSH
64798: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
64799: LD_ADDR_VAR 0 2
64803: PUSH
64804: LD_INT 2
64806: PUSH
64807: LD_INT 21
64809: PUSH
64810: LD_INT 1
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 21
64819: PUSH
64820: LD_INT 2
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: LIST
64831: PPUSH
64832: CALL_OW 69
64836: PUSH
64837: FOR_IN
64838: IFFALSE 64899
// if IsSelected ( i ) then
64840: LD_VAR 0 2
64844: PPUSH
64845: CALL_OW 306
64849: IFFALSE 64897
// begin if i in hInvincible then
64851: LD_VAR 0 2
64855: PUSH
64856: LD_EXP 96
64860: IN
64861: IFFALSE 64881
// hInvincible := hInvincible diff i else
64863: LD_ADDR_EXP 96
64867: PUSH
64868: LD_EXP 96
64872: PUSH
64873: LD_VAR 0 2
64877: DIFF
64878: ST_TO_ADDR
64879: GO 64897
// hInvincible := hInvincible union i ;
64881: LD_ADDR_EXP 96
64885: PUSH
64886: LD_EXP 96
64890: PUSH
64891: LD_VAR 0 2
64895: UNION
64896: ST_TO_ADDR
// end ;
64897: GO 64837
64899: POP
64900: POP
// end ;
64901: LD_VAR 0 1
64905: RET
// export function hHackInvisible ; var i , j ; begin
64906: LD_INT 0
64908: PPUSH
64909: PPUSH
64910: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64911: LD_ADDR_VAR 0 2
64915: PUSH
64916: LD_INT 21
64918: PUSH
64919: LD_INT 1
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PPUSH
64926: CALL_OW 69
64930: PUSH
64931: FOR_IN
64932: IFFALSE 64956
// if IsSelected ( i ) then
64934: LD_VAR 0 2
64938: PPUSH
64939: CALL_OW 306
64943: IFFALSE 64954
// ComForceInvisible ( i ) ;
64945: LD_VAR 0 2
64949: PPUSH
64950: CALL_OW 496
64954: GO 64931
64956: POP
64957: POP
// end ;
64958: LD_VAR 0 1
64962: RET
// export function hHackChangeYourSide ; begin
64963: LD_INT 0
64965: PPUSH
// if your_side = 8 then
64966: LD_OWVAR 2
64970: PUSH
64971: LD_INT 8
64973: EQUAL
64974: IFFALSE 64986
// your_side := 0 else
64976: LD_ADDR_OWVAR 2
64980: PUSH
64981: LD_INT 0
64983: ST_TO_ADDR
64984: GO 65000
// your_side := your_side + 1 ;
64986: LD_ADDR_OWVAR 2
64990: PUSH
64991: LD_OWVAR 2
64995: PUSH
64996: LD_INT 1
64998: PLUS
64999: ST_TO_ADDR
// end ;
65000: LD_VAR 0 1
65004: RET
// export function hHackChangeUnitSide ; var i , j ; begin
65005: LD_INT 0
65007: PPUSH
65008: PPUSH
65009: PPUSH
// for i in all_units do
65010: LD_ADDR_VAR 0 2
65014: PUSH
65015: LD_OWVAR 3
65019: PUSH
65020: FOR_IN
65021: IFFALSE 65099
// if IsSelected ( i ) then
65023: LD_VAR 0 2
65027: PPUSH
65028: CALL_OW 306
65032: IFFALSE 65097
// begin j := GetSide ( i ) ;
65034: LD_ADDR_VAR 0 3
65038: PUSH
65039: LD_VAR 0 2
65043: PPUSH
65044: CALL_OW 255
65048: ST_TO_ADDR
// if j = 8 then
65049: LD_VAR 0 3
65053: PUSH
65054: LD_INT 8
65056: EQUAL
65057: IFFALSE 65069
// j := 0 else
65059: LD_ADDR_VAR 0 3
65063: PUSH
65064: LD_INT 0
65066: ST_TO_ADDR
65067: GO 65083
// j := j + 1 ;
65069: LD_ADDR_VAR 0 3
65073: PUSH
65074: LD_VAR 0 3
65078: PUSH
65079: LD_INT 1
65081: PLUS
65082: ST_TO_ADDR
// SetSide ( i , j ) ;
65083: LD_VAR 0 2
65087: PPUSH
65088: LD_VAR 0 3
65092: PPUSH
65093: CALL_OW 235
// end ;
65097: GO 65020
65099: POP
65100: POP
// end ;
65101: LD_VAR 0 1
65105: RET
// export function hHackFog ; begin
65106: LD_INT 0
65108: PPUSH
// FogOff ( true ) ;
65109: LD_INT 1
65111: PPUSH
65112: CALL_OW 344
// end ;
65116: LD_VAR 0 1
65120: RET
// export function hHackTeleport ( unit , x , y ) ; begin
65121: LD_INT 0
65123: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
65124: LD_VAR 0 1
65128: PPUSH
65129: LD_VAR 0 2
65133: PPUSH
65134: LD_VAR 0 3
65138: PPUSH
65139: LD_INT 1
65141: PPUSH
65142: LD_INT 1
65144: PPUSH
65145: CALL_OW 483
// CenterOnXY ( x , y ) ;
65149: LD_VAR 0 2
65153: PPUSH
65154: LD_VAR 0 3
65158: PPUSH
65159: CALL_OW 84
// end ;
65163: LD_VAR 0 4
65167: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
65168: LD_INT 0
65170: PPUSH
65171: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
65172: LD_VAR 0 1
65176: NOT
65177: PUSH
65178: LD_VAR 0 2
65182: PPUSH
65183: LD_VAR 0 3
65187: PPUSH
65188: CALL_OW 488
65192: NOT
65193: OR
65194: PUSH
65195: LD_VAR 0 1
65199: PPUSH
65200: CALL_OW 266
65204: PUSH
65205: LD_INT 3
65207: NONEQUAL
65208: PUSH
65209: LD_VAR 0 1
65213: PPUSH
65214: CALL_OW 247
65218: PUSH
65219: LD_INT 1
65221: EQUAL
65222: NOT
65223: AND
65224: OR
65225: IFFALSE 65229
// exit ;
65227: GO 65378
// if GetType ( factory ) = unit_human then
65229: LD_VAR 0 1
65233: PPUSH
65234: CALL_OW 247
65238: PUSH
65239: LD_INT 1
65241: EQUAL
65242: IFFALSE 65259
// factory := IsInUnit ( factory ) ;
65244: LD_ADDR_VAR 0 1
65248: PUSH
65249: LD_VAR 0 1
65253: PPUSH
65254: CALL_OW 310
65258: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65259: LD_VAR 0 1
65263: PPUSH
65264: CALL_OW 266
65268: PUSH
65269: LD_INT 3
65271: NONEQUAL
65272: IFFALSE 65276
// exit ;
65274: GO 65378
// if HexInfo ( x , y ) = factory then
65276: LD_VAR 0 2
65280: PPUSH
65281: LD_VAR 0 3
65285: PPUSH
65286: CALL_OW 428
65290: PUSH
65291: LD_VAR 0 1
65295: EQUAL
65296: IFFALSE 65323
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
65298: LD_ADDR_EXP 97
65302: PUSH
65303: LD_EXP 97
65307: PPUSH
65308: LD_VAR 0 1
65312: PPUSH
65313: LD_INT 0
65315: PPUSH
65316: CALL_OW 1
65320: ST_TO_ADDR
65321: GO 65374
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
65323: LD_ADDR_EXP 97
65327: PUSH
65328: LD_EXP 97
65332: PPUSH
65333: LD_VAR 0 1
65337: PPUSH
65338: LD_VAR 0 1
65342: PPUSH
65343: CALL_OW 255
65347: PUSH
65348: LD_VAR 0 1
65352: PUSH
65353: LD_VAR 0 2
65357: PUSH
65358: LD_VAR 0 3
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: PPUSH
65369: CALL_OW 1
65373: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65374: CALL 65383 0 0
// end ;
65378: LD_VAR 0 4
65382: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65383: LD_INT 0
65385: PPUSH
65386: PPUSH
65387: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65388: LD_STRING resetFactoryWaypoint();
65390: PPUSH
65391: CALL_OW 559
// if factoryWaypoints then
65395: LD_EXP 97
65399: IFFALSE 65525
// begin list := PrepareArray ( factoryWaypoints ) ;
65401: LD_ADDR_VAR 0 3
65405: PUSH
65406: LD_EXP 97
65410: PPUSH
65411: CALL 43652 0 1
65415: ST_TO_ADDR
// for i := 1 to list do
65416: LD_ADDR_VAR 0 2
65420: PUSH
65421: DOUBLE
65422: LD_INT 1
65424: DEC
65425: ST_TO_ADDR
65426: LD_VAR 0 3
65430: PUSH
65431: FOR_TO
65432: IFFALSE 65523
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65434: LD_STRING setFactoryWaypointXY(
65436: PUSH
65437: LD_VAR 0 3
65441: PUSH
65442: LD_VAR 0 2
65446: ARRAY
65447: PUSH
65448: LD_INT 1
65450: ARRAY
65451: STR
65452: PUSH
65453: LD_STRING ,
65455: STR
65456: PUSH
65457: LD_VAR 0 3
65461: PUSH
65462: LD_VAR 0 2
65466: ARRAY
65467: PUSH
65468: LD_INT 2
65470: ARRAY
65471: STR
65472: PUSH
65473: LD_STRING ,
65475: STR
65476: PUSH
65477: LD_VAR 0 3
65481: PUSH
65482: LD_VAR 0 2
65486: ARRAY
65487: PUSH
65488: LD_INT 3
65490: ARRAY
65491: STR
65492: PUSH
65493: LD_STRING ,
65495: STR
65496: PUSH
65497: LD_VAR 0 3
65501: PUSH
65502: LD_VAR 0 2
65506: ARRAY
65507: PUSH
65508: LD_INT 4
65510: ARRAY
65511: STR
65512: PUSH
65513: LD_STRING )
65515: STR
65516: PPUSH
65517: CALL_OW 559
65521: GO 65431
65523: POP
65524: POP
// end ; end ;
65525: LD_VAR 0 1
65529: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65530: LD_INT 0
65532: PPUSH
// if HexInfo ( x , y ) = warehouse then
65533: LD_VAR 0 2
65537: PPUSH
65538: LD_VAR 0 3
65542: PPUSH
65543: CALL_OW 428
65547: PUSH
65548: LD_VAR 0 1
65552: EQUAL
65553: IFFALSE 65580
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65555: LD_ADDR_EXP 98
65559: PUSH
65560: LD_EXP 98
65564: PPUSH
65565: LD_VAR 0 1
65569: PPUSH
65570: LD_INT 0
65572: PPUSH
65573: CALL_OW 1
65577: ST_TO_ADDR
65578: GO 65631
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65580: LD_ADDR_EXP 98
65584: PUSH
65585: LD_EXP 98
65589: PPUSH
65590: LD_VAR 0 1
65594: PPUSH
65595: LD_VAR 0 1
65599: PPUSH
65600: CALL_OW 255
65604: PUSH
65605: LD_VAR 0 1
65609: PUSH
65610: LD_VAR 0 2
65614: PUSH
65615: LD_VAR 0 3
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: PPUSH
65626: CALL_OW 1
65630: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65631: CALL 65640 0 0
// end ;
65635: LD_VAR 0 4
65639: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65640: LD_INT 0
65642: PPUSH
65643: PPUSH
65644: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65645: LD_STRING resetWarehouseGatheringPoints();
65647: PPUSH
65648: CALL_OW 559
// if warehouseGatheringPoints then
65652: LD_EXP 98
65656: IFFALSE 65782
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65658: LD_ADDR_VAR 0 3
65662: PUSH
65663: LD_EXP 98
65667: PPUSH
65668: CALL 43652 0 1
65672: ST_TO_ADDR
// for i := 1 to list do
65673: LD_ADDR_VAR 0 2
65677: PUSH
65678: DOUBLE
65679: LD_INT 1
65681: DEC
65682: ST_TO_ADDR
65683: LD_VAR 0 3
65687: PUSH
65688: FOR_TO
65689: IFFALSE 65780
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65691: LD_STRING setWarehouseGatheringPointXY(
65693: PUSH
65694: LD_VAR 0 3
65698: PUSH
65699: LD_VAR 0 2
65703: ARRAY
65704: PUSH
65705: LD_INT 1
65707: ARRAY
65708: STR
65709: PUSH
65710: LD_STRING ,
65712: STR
65713: PUSH
65714: LD_VAR 0 3
65718: PUSH
65719: LD_VAR 0 2
65723: ARRAY
65724: PUSH
65725: LD_INT 2
65727: ARRAY
65728: STR
65729: PUSH
65730: LD_STRING ,
65732: STR
65733: PUSH
65734: LD_VAR 0 3
65738: PUSH
65739: LD_VAR 0 2
65743: ARRAY
65744: PUSH
65745: LD_INT 3
65747: ARRAY
65748: STR
65749: PUSH
65750: LD_STRING ,
65752: STR
65753: PUSH
65754: LD_VAR 0 3
65758: PUSH
65759: LD_VAR 0 2
65763: ARRAY
65764: PUSH
65765: LD_INT 4
65767: ARRAY
65768: STR
65769: PUSH
65770: LD_STRING )
65772: STR
65773: PPUSH
65774: CALL_OW 559
65778: GO 65688
65780: POP
65781: POP
// end ; end ;
65782: LD_VAR 0 1
65786: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
65787: LD_EXP 98
65791: IFFALSE 66476
65793: GO 65795
65795: DISABLE
65796: LD_INT 0
65798: PPUSH
65799: PPUSH
65800: PPUSH
65801: PPUSH
65802: PPUSH
65803: PPUSH
65804: PPUSH
65805: PPUSH
65806: PPUSH
// begin enable ;
65807: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
65808: LD_ADDR_VAR 0 3
65812: PUSH
65813: LD_EXP 98
65817: PPUSH
65818: CALL 43652 0 1
65822: ST_TO_ADDR
// if not list then
65823: LD_VAR 0 3
65827: NOT
65828: IFFALSE 65832
// exit ;
65830: GO 66476
// for i := 1 to list do
65832: LD_ADDR_VAR 0 1
65836: PUSH
65837: DOUBLE
65838: LD_INT 1
65840: DEC
65841: ST_TO_ADDR
65842: LD_VAR 0 3
65846: PUSH
65847: FOR_TO
65848: IFFALSE 66474
// begin depot := list [ i ] [ 2 ] ;
65850: LD_ADDR_VAR 0 8
65854: PUSH
65855: LD_VAR 0 3
65859: PUSH
65860: LD_VAR 0 1
65864: ARRAY
65865: PUSH
65866: LD_INT 2
65868: ARRAY
65869: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
65870: LD_ADDR_VAR 0 5
65874: PUSH
65875: LD_VAR 0 3
65879: PUSH
65880: LD_VAR 0 1
65884: ARRAY
65885: PUSH
65886: LD_INT 1
65888: ARRAY
65889: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
65890: LD_VAR 0 8
65894: PPUSH
65895: CALL_OW 301
65899: PUSH
65900: LD_VAR 0 5
65904: PUSH
65905: LD_VAR 0 8
65909: PPUSH
65910: CALL_OW 255
65914: NONEQUAL
65915: OR
65916: IFFALSE 65945
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
65918: LD_ADDR_EXP 98
65922: PUSH
65923: LD_EXP 98
65927: PPUSH
65928: LD_VAR 0 8
65932: PPUSH
65933: LD_INT 0
65935: PPUSH
65936: CALL_OW 1
65940: ST_TO_ADDR
// exit ;
65941: POP
65942: POP
65943: GO 66476
// end ; x := list [ i ] [ 3 ] ;
65945: LD_ADDR_VAR 0 6
65949: PUSH
65950: LD_VAR 0 3
65954: PUSH
65955: LD_VAR 0 1
65959: ARRAY
65960: PUSH
65961: LD_INT 3
65963: ARRAY
65964: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
65965: LD_ADDR_VAR 0 7
65969: PUSH
65970: LD_VAR 0 3
65974: PUSH
65975: LD_VAR 0 1
65979: ARRAY
65980: PUSH
65981: LD_INT 4
65983: ARRAY
65984: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
65985: LD_ADDR_VAR 0 9
65989: PUSH
65990: LD_VAR 0 6
65994: PPUSH
65995: LD_VAR 0 7
65999: PPUSH
66000: LD_INT 16
66002: PPUSH
66003: CALL 42240 0 3
66007: ST_TO_ADDR
// if not cratesNearbyPoint then
66008: LD_VAR 0 9
66012: NOT
66013: IFFALSE 66019
// exit ;
66015: POP
66016: POP
66017: GO 66476
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
66019: LD_ADDR_VAR 0 4
66023: PUSH
66024: LD_INT 22
66026: PUSH
66027: LD_VAR 0 5
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 3
66038: PUSH
66039: LD_INT 60
66041: PUSH
66042: EMPTY
66043: LIST
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 91
66051: PUSH
66052: LD_VAR 0 8
66056: PUSH
66057: LD_INT 6
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 2
66067: PUSH
66068: LD_INT 25
66070: PUSH
66071: LD_INT 2
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 25
66080: PUSH
66081: LD_INT 16
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: LIST
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: PPUSH
66099: CALL_OW 69
66103: PUSH
66104: LD_VAR 0 8
66108: PPUSH
66109: CALL_OW 313
66113: PPUSH
66114: LD_INT 3
66116: PUSH
66117: LD_INT 60
66119: PUSH
66120: EMPTY
66121: LIST
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 2
66129: PUSH
66130: LD_INT 25
66132: PUSH
66133: LD_INT 2
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 25
66142: PUSH
66143: LD_INT 16
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: LIST
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PPUSH
66159: CALL_OW 72
66163: UNION
66164: ST_TO_ADDR
// if tmp then
66165: LD_VAR 0 4
66169: IFFALSE 66249
// begin tmp := ShrinkArray ( tmp , 3 ) ;
66171: LD_ADDR_VAR 0 4
66175: PUSH
66176: LD_VAR 0 4
66180: PPUSH
66181: LD_INT 3
66183: PPUSH
66184: CALL 40209 0 2
66188: ST_TO_ADDR
// for j in tmp do
66189: LD_ADDR_VAR 0 2
66193: PUSH
66194: LD_VAR 0 4
66198: PUSH
66199: FOR_IN
66200: IFFALSE 66243
// begin if IsInUnit ( j ) then
66202: LD_VAR 0 2
66206: PPUSH
66207: CALL_OW 310
66211: IFFALSE 66222
// ComExit ( j ) ;
66213: LD_VAR 0 2
66217: PPUSH
66218: CALL 40292 0 1
// AddComCollect ( j , x , y ) ;
66222: LD_VAR 0 2
66226: PPUSH
66227: LD_VAR 0 6
66231: PPUSH
66232: LD_VAR 0 7
66236: PPUSH
66237: CALL_OW 177
// end ;
66241: GO 66199
66243: POP
66244: POP
// exit ;
66245: POP
66246: POP
66247: GO 66476
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
66249: LD_ADDR_VAR 0 4
66253: PUSH
66254: LD_INT 22
66256: PUSH
66257: LD_VAR 0 5
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 91
66268: PUSH
66269: LD_VAR 0 8
66273: PUSH
66274: LD_INT 8
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 2
66284: PUSH
66285: LD_INT 34
66287: PUSH
66288: LD_INT 12
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 34
66297: PUSH
66298: LD_INT 51
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 34
66307: PUSH
66308: LD_INT 32
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 34
66317: PUSH
66318: LD_INT 89
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: LIST
66336: PPUSH
66337: CALL_OW 69
66341: ST_TO_ADDR
// if tmp then
66342: LD_VAR 0 4
66346: IFFALSE 66472
// begin for j in tmp do
66348: LD_ADDR_VAR 0 2
66352: PUSH
66353: LD_VAR 0 4
66357: PUSH
66358: FOR_IN
66359: IFFALSE 66470
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
66361: LD_VAR 0 2
66365: PPUSH
66366: CALL_OW 262
66370: PUSH
66371: LD_INT 3
66373: EQUAL
66374: PUSH
66375: LD_VAR 0 2
66379: PPUSH
66380: CALL_OW 261
66384: PUSH
66385: LD_INT 20
66387: GREATER
66388: OR
66389: PUSH
66390: LD_VAR 0 2
66394: PPUSH
66395: CALL_OW 314
66399: NOT
66400: AND
66401: PUSH
66402: LD_VAR 0 2
66406: PPUSH
66407: CALL_OW 263
66411: PUSH
66412: LD_INT 1
66414: NONEQUAL
66415: PUSH
66416: LD_VAR 0 2
66420: PPUSH
66421: CALL_OW 311
66425: OR
66426: AND
66427: IFFALSE 66468
// begin ComCollect ( j , x , y ) ;
66429: LD_VAR 0 2
66433: PPUSH
66434: LD_VAR 0 6
66438: PPUSH
66439: LD_VAR 0 7
66443: PPUSH
66444: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
66448: LD_VAR 0 2
66452: PPUSH
66453: LD_VAR 0 8
66457: PPUSH
66458: CALL_OW 172
// exit ;
66462: POP
66463: POP
66464: POP
66465: POP
66466: GO 66476
// end ;
66468: GO 66358
66470: POP
66471: POP
// end ; end ;
66472: GO 65847
66474: POP
66475: POP
// end ; end_of_file
66476: PPOPN 9
66478: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66479: LD_VAR 0 1
66483: PUSH
66484: LD_INT 200
66486: DOUBLE
66487: GREATEREQUAL
66488: IFFALSE 66496
66490: LD_INT 299
66492: DOUBLE
66493: LESSEQUAL
66494: IFTRUE 66498
66496: GO 66530
66498: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66499: LD_VAR 0 1
66503: PPUSH
66504: LD_VAR 0 2
66508: PPUSH
66509: LD_VAR 0 3
66513: PPUSH
66514: LD_VAR 0 4
66518: PPUSH
66519: LD_VAR 0 5
66523: PPUSH
66524: CALL 67018 0 5
66528: GO 66607
66530: LD_INT 300
66532: DOUBLE
66533: GREATEREQUAL
66534: IFFALSE 66542
66536: LD_INT 399
66538: DOUBLE
66539: LESSEQUAL
66540: IFTRUE 66544
66542: GO 66606
66544: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66545: LD_VAR 0 1
66549: PPUSH
66550: LD_VAR 0 2
66554: PPUSH
66555: LD_VAR 0 3
66559: PPUSH
66560: LD_VAR 0 4
66564: PPUSH
66565: LD_VAR 0 5
66569: PPUSH
66570: LD_VAR 0 6
66574: PPUSH
66575: LD_VAR 0 7
66579: PPUSH
66580: LD_VAR 0 8
66584: PPUSH
66585: LD_VAR 0 9
66589: PPUSH
66590: LD_VAR 0 10
66594: PPUSH
66595: LD_VAR 0 11
66599: PPUSH
66600: CALL 63180 0 11
66604: GO 66607
66606: POP
// end ;
66607: PPOPN 11
66609: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66610: LD_VAR 0 1
66614: PPUSH
66615: LD_VAR 0 2
66619: PPUSH
66620: LD_VAR 0 3
66624: PPUSH
66625: LD_VAR 0 4
66629: PPUSH
66630: LD_VAR 0 5
66634: PPUSH
66635: CALL 66754 0 5
// end ; end_of_file
66639: PPOPN 5
66641: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
66642: LD_INT 0
66644: PPUSH
66645: PPUSH
66646: PPUSH
66647: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
66648: LD_VAR 0 1
66652: PPUSH
66653: CALL_OW 264
66657: PUSH
66658: LD_INT 91
66660: EQUAL
66661: IFFALSE 66733
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
66663: LD_INT 68
66665: PPUSH
66666: LD_VAR 0 1
66670: PPUSH
66671: CALL_OW 255
66675: PPUSH
66676: CALL_OW 321
66680: PUSH
66681: LD_INT 2
66683: EQUAL
66684: IFFALSE 66696
// eff := 70 else
66686: LD_ADDR_VAR 0 4
66690: PUSH
66691: LD_INT 70
66693: ST_TO_ADDR
66694: GO 66704
// eff := 30 ;
66696: LD_ADDR_VAR 0 4
66700: PUSH
66701: LD_INT 30
66703: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
66704: LD_VAR 0 1
66708: PPUSH
66709: CALL_OW 250
66713: PPUSH
66714: LD_VAR 0 1
66718: PPUSH
66719: CALL_OW 251
66723: PPUSH
66724: LD_VAR 0 4
66728: PPUSH
66729: CALL_OW 495
// end ; end ;
66733: LD_VAR 0 2
66737: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
66738: LD_INT 0
66740: PPUSH
// end ;
66741: LD_VAR 0 4
66745: RET
// export function SOS_Command ( cmd ) ; begin
66746: LD_INT 0
66748: PPUSH
// end ;
66749: LD_VAR 0 2
66753: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
66754: LD_INT 0
66756: PPUSH
// end ;
66757: LD_VAR 0 6
66761: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
66762: LD_INT 0
66764: PPUSH
66765: PPUSH
// if not vehicle or not factory then
66766: LD_VAR 0 1
66770: NOT
66771: PUSH
66772: LD_VAR 0 2
66776: NOT
66777: OR
66778: IFFALSE 66782
// exit ;
66780: GO 67013
// if factoryWaypoints >= factory then
66782: LD_EXP 97
66786: PUSH
66787: LD_VAR 0 2
66791: GREATEREQUAL
66792: IFFALSE 67013
// if factoryWaypoints [ factory ] then
66794: LD_EXP 97
66798: PUSH
66799: LD_VAR 0 2
66803: ARRAY
66804: IFFALSE 67013
// begin if GetControl ( vehicle ) = control_manual then
66806: LD_VAR 0 1
66810: PPUSH
66811: CALL_OW 263
66815: PUSH
66816: LD_INT 1
66818: EQUAL
66819: IFFALSE 66900
// begin driver := IsDrivenBy ( vehicle ) ;
66821: LD_ADDR_VAR 0 4
66825: PUSH
66826: LD_VAR 0 1
66830: PPUSH
66831: CALL_OW 311
66835: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66836: LD_VAR 0 4
66840: PPUSH
66841: LD_EXP 97
66845: PUSH
66846: LD_VAR 0 2
66850: ARRAY
66851: PUSH
66852: LD_INT 3
66854: ARRAY
66855: PPUSH
66856: LD_EXP 97
66860: PUSH
66861: LD_VAR 0 2
66865: ARRAY
66866: PUSH
66867: LD_INT 4
66869: ARRAY
66870: PPUSH
66871: CALL_OW 171
// AddComExitVehicle ( driver ) ;
66875: LD_VAR 0 4
66879: PPUSH
66880: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
66884: LD_VAR 0 4
66888: PPUSH
66889: LD_VAR 0 2
66893: PPUSH
66894: CALL_OW 180
// end else
66898: GO 67013
// if GetControl ( vehicle ) = control_remote then
66900: LD_VAR 0 1
66904: PPUSH
66905: CALL_OW 263
66909: PUSH
66910: LD_INT 2
66912: EQUAL
66913: IFFALSE 66974
// begin wait ( 0 0$2 ) ;
66915: LD_INT 70
66917: PPUSH
66918: CALL_OW 67
// if Connect ( vehicle ) then
66922: LD_VAR 0 1
66926: PPUSH
66927: CALL 10511 0 1
66931: IFFALSE 66972
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66933: LD_VAR 0 1
66937: PPUSH
66938: LD_EXP 97
66942: PUSH
66943: LD_VAR 0 2
66947: ARRAY
66948: PUSH
66949: LD_INT 3
66951: ARRAY
66952: PPUSH
66953: LD_EXP 97
66957: PUSH
66958: LD_VAR 0 2
66962: ARRAY
66963: PUSH
66964: LD_INT 4
66966: ARRAY
66967: PPUSH
66968: CALL_OW 171
// end else
66972: GO 67013
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66974: LD_VAR 0 1
66978: PPUSH
66979: LD_EXP 97
66983: PUSH
66984: LD_VAR 0 2
66988: ARRAY
66989: PUSH
66990: LD_INT 3
66992: ARRAY
66993: PPUSH
66994: LD_EXP 97
66998: PUSH
66999: LD_VAR 0 2
67003: ARRAY
67004: PUSH
67005: LD_INT 4
67007: ARRAY
67008: PPUSH
67009: CALL_OW 171
// end ; end ;
67013: LD_VAR 0 3
67017: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
67018: LD_INT 0
67020: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
67021: LD_VAR 0 1
67025: PUSH
67026: LD_INT 250
67028: EQUAL
67029: PUSH
67030: LD_VAR 0 2
67034: PPUSH
67035: CALL_OW 264
67039: PUSH
67040: LD_INT 81
67042: EQUAL
67043: AND
67044: IFFALSE 67065
// MinerPlaceMine ( unit , x , y ) ;
67046: LD_VAR 0 2
67050: PPUSH
67051: LD_VAR 0 4
67055: PPUSH
67056: LD_VAR 0 5
67060: PPUSH
67061: CALL 70055 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
67065: LD_VAR 0 1
67069: PUSH
67070: LD_INT 251
67072: EQUAL
67073: PUSH
67074: LD_VAR 0 2
67078: PPUSH
67079: CALL_OW 264
67083: PUSH
67084: LD_INT 81
67086: EQUAL
67087: AND
67088: IFFALSE 67109
// MinerDetonateMine ( unit , x , y ) ;
67090: LD_VAR 0 2
67094: PPUSH
67095: LD_VAR 0 4
67099: PPUSH
67100: LD_VAR 0 5
67104: PPUSH
67105: CALL 70330 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
67109: LD_VAR 0 1
67113: PUSH
67114: LD_INT 252
67116: EQUAL
67117: PUSH
67118: LD_VAR 0 2
67122: PPUSH
67123: CALL_OW 264
67127: PUSH
67128: LD_INT 81
67130: EQUAL
67131: AND
67132: IFFALSE 67153
// MinerCreateMinefield ( unit , x , y ) ;
67134: LD_VAR 0 2
67138: PPUSH
67139: LD_VAR 0 4
67143: PPUSH
67144: LD_VAR 0 5
67148: PPUSH
67149: CALL 70747 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
67153: LD_VAR 0 1
67157: PUSH
67158: LD_INT 253
67160: EQUAL
67161: PUSH
67162: LD_VAR 0 2
67166: PPUSH
67167: CALL_OW 257
67171: PUSH
67172: LD_INT 5
67174: EQUAL
67175: AND
67176: IFFALSE 67197
// ComBinocular ( unit , x , y ) ;
67178: LD_VAR 0 2
67182: PPUSH
67183: LD_VAR 0 4
67187: PPUSH
67188: LD_VAR 0 5
67192: PPUSH
67193: CALL 71116 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
67197: LD_VAR 0 1
67201: PUSH
67202: LD_INT 254
67204: EQUAL
67205: PUSH
67206: LD_VAR 0 2
67210: PPUSH
67211: CALL_OW 264
67215: PUSH
67216: LD_INT 99
67218: EQUAL
67219: AND
67220: PUSH
67221: LD_VAR 0 3
67225: PPUSH
67226: CALL_OW 263
67230: PUSH
67231: LD_INT 3
67233: EQUAL
67234: AND
67235: IFFALSE 67251
// HackDestroyVehicle ( unit , selectedUnit ) ;
67237: LD_VAR 0 2
67241: PPUSH
67242: LD_VAR 0 3
67246: PPUSH
67247: CALL 69419 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
67251: LD_VAR 0 1
67255: PUSH
67256: LD_INT 255
67258: EQUAL
67259: PUSH
67260: LD_VAR 0 2
67264: PPUSH
67265: CALL_OW 264
67269: PUSH
67270: LD_INT 14
67272: PUSH
67273: LD_INT 53
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: IN
67280: AND
67281: PUSH
67282: LD_VAR 0 4
67286: PPUSH
67287: LD_VAR 0 5
67291: PPUSH
67292: CALL_OW 488
67296: AND
67297: IFFALSE 67321
// CutTreeXYR ( unit , x , y , 12 ) ;
67299: LD_VAR 0 2
67303: PPUSH
67304: LD_VAR 0 4
67308: PPUSH
67309: LD_VAR 0 5
67313: PPUSH
67314: LD_INT 12
67316: PPUSH
67317: CALL 67416 0 4
// if cmd = 256 then
67321: LD_VAR 0 1
67325: PUSH
67326: LD_INT 256
67328: EQUAL
67329: IFFALSE 67350
// SetFactoryWaypoint ( unit , x , y ) ;
67331: LD_VAR 0 2
67335: PPUSH
67336: LD_VAR 0 4
67340: PPUSH
67341: LD_VAR 0 5
67345: PPUSH
67346: CALL 65168 0 3
// if cmd = 257 then
67350: LD_VAR 0 1
67354: PUSH
67355: LD_INT 257
67357: EQUAL
67358: IFFALSE 67379
// SetWarehouseGatheringPoint ( unit , x , y ) ;
67360: LD_VAR 0 2
67364: PPUSH
67365: LD_VAR 0 4
67369: PPUSH
67370: LD_VAR 0 5
67374: PPUSH
67375: CALL 65530 0 3
// if cmd = 258 then
67379: LD_VAR 0 1
67383: PUSH
67384: LD_INT 258
67386: EQUAL
67387: IFFALSE 67411
// BurnTreeXYR ( unit , x , y , 8 ) ;
67389: LD_VAR 0 2
67393: PPUSH
67394: LD_VAR 0 4
67398: PPUSH
67399: LD_VAR 0 5
67403: PPUSH
67404: LD_INT 8
67406: PPUSH
67407: CALL 67810 0 4
// end ;
67411: LD_VAR 0 6
67415: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
67416: LD_INT 0
67418: PPUSH
67419: PPUSH
67420: PPUSH
67421: PPUSH
67422: PPUSH
67423: PPUSH
67424: PPUSH
67425: PPUSH
67426: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
67427: LD_VAR 0 1
67431: PPUSH
67432: CALL_OW 302
67436: NOT
67437: PUSH
67438: LD_VAR 0 2
67442: PPUSH
67443: LD_VAR 0 3
67447: PPUSH
67448: CALL_OW 488
67452: NOT
67453: OR
67454: PUSH
67455: LD_VAR 0 4
67459: NOT
67460: OR
67461: IFFALSE 67465
// exit ;
67463: GO 67805
// list := [ ] ;
67465: LD_ADDR_VAR 0 13
67469: PUSH
67470: EMPTY
67471: ST_TO_ADDR
// if x - r < 0 then
67472: LD_VAR 0 2
67476: PUSH
67477: LD_VAR 0 4
67481: MINUS
67482: PUSH
67483: LD_INT 0
67485: LESS
67486: IFFALSE 67498
// min_x := 0 else
67488: LD_ADDR_VAR 0 7
67492: PUSH
67493: LD_INT 0
67495: ST_TO_ADDR
67496: GO 67514
// min_x := x - r ;
67498: LD_ADDR_VAR 0 7
67502: PUSH
67503: LD_VAR 0 2
67507: PUSH
67508: LD_VAR 0 4
67512: MINUS
67513: ST_TO_ADDR
// if y - r < 0 then
67514: LD_VAR 0 3
67518: PUSH
67519: LD_VAR 0 4
67523: MINUS
67524: PUSH
67525: LD_INT 0
67527: LESS
67528: IFFALSE 67540
// min_y := 0 else
67530: LD_ADDR_VAR 0 8
67534: PUSH
67535: LD_INT 0
67537: ST_TO_ADDR
67538: GO 67556
// min_y := y - r ;
67540: LD_ADDR_VAR 0 8
67544: PUSH
67545: LD_VAR 0 3
67549: PUSH
67550: LD_VAR 0 4
67554: MINUS
67555: ST_TO_ADDR
// max_x := x + r ;
67556: LD_ADDR_VAR 0 9
67560: PUSH
67561: LD_VAR 0 2
67565: PUSH
67566: LD_VAR 0 4
67570: PLUS
67571: ST_TO_ADDR
// max_y := y + r ;
67572: LD_ADDR_VAR 0 10
67576: PUSH
67577: LD_VAR 0 3
67581: PUSH
67582: LD_VAR 0 4
67586: PLUS
67587: ST_TO_ADDR
// for _x = min_x to max_x do
67588: LD_ADDR_VAR 0 11
67592: PUSH
67593: DOUBLE
67594: LD_VAR 0 7
67598: DEC
67599: ST_TO_ADDR
67600: LD_VAR 0 9
67604: PUSH
67605: FOR_TO
67606: IFFALSE 67723
// for _y = min_y to max_y do
67608: LD_ADDR_VAR 0 12
67612: PUSH
67613: DOUBLE
67614: LD_VAR 0 8
67618: DEC
67619: ST_TO_ADDR
67620: LD_VAR 0 10
67624: PUSH
67625: FOR_TO
67626: IFFALSE 67719
// begin if not ValidHex ( _x , _y ) then
67628: LD_VAR 0 11
67632: PPUSH
67633: LD_VAR 0 12
67637: PPUSH
67638: CALL_OW 488
67642: NOT
67643: IFFALSE 67647
// continue ;
67645: GO 67625
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
67647: LD_VAR 0 11
67651: PPUSH
67652: LD_VAR 0 12
67656: PPUSH
67657: CALL_OW 351
67661: PUSH
67662: LD_VAR 0 11
67666: PPUSH
67667: LD_VAR 0 12
67671: PPUSH
67672: CALL_OW 554
67676: AND
67677: IFFALSE 67717
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
67679: LD_ADDR_VAR 0 13
67683: PUSH
67684: LD_VAR 0 13
67688: PPUSH
67689: LD_VAR 0 13
67693: PUSH
67694: LD_INT 1
67696: PLUS
67697: PPUSH
67698: LD_VAR 0 11
67702: PUSH
67703: LD_VAR 0 12
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PPUSH
67712: CALL_OW 2
67716: ST_TO_ADDR
// end ;
67717: GO 67625
67719: POP
67720: POP
67721: GO 67605
67723: POP
67724: POP
// if not list then
67725: LD_VAR 0 13
67729: NOT
67730: IFFALSE 67734
// exit ;
67732: GO 67805
// for i in list do
67734: LD_ADDR_VAR 0 6
67738: PUSH
67739: LD_VAR 0 13
67743: PUSH
67744: FOR_IN
67745: IFFALSE 67803
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
67747: LD_VAR 0 1
67751: PPUSH
67752: LD_STRING M
67754: PUSH
67755: LD_VAR 0 6
67759: PUSH
67760: LD_INT 1
67762: ARRAY
67763: PUSH
67764: LD_VAR 0 6
67768: PUSH
67769: LD_INT 2
67771: ARRAY
67772: PUSH
67773: LD_INT 0
67775: PUSH
67776: LD_INT 0
67778: PUSH
67779: LD_INT 0
67781: PUSH
67782: LD_INT 0
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: PUSH
67794: EMPTY
67795: LIST
67796: PPUSH
67797: CALL_OW 447
67801: GO 67744
67803: POP
67804: POP
// end ;
67805: LD_VAR 0 5
67809: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
67810: LD_INT 0
67812: PPUSH
67813: PPUSH
67814: PPUSH
67815: PPUSH
67816: PPUSH
67817: PPUSH
67818: PPUSH
67819: PPUSH
67820: PPUSH
67821: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
67822: LD_VAR 0 1
67826: PPUSH
67827: CALL_OW 302
67831: NOT
67832: PUSH
67833: LD_VAR 0 2
67837: PPUSH
67838: LD_VAR 0 3
67842: PPUSH
67843: CALL_OW 488
67847: NOT
67848: OR
67849: PUSH
67850: LD_VAR 0 4
67854: NOT
67855: OR
67856: IFFALSE 67860
// exit ;
67858: GO 68373
// list := [ ] ;
67860: LD_ADDR_VAR 0 13
67864: PUSH
67865: EMPTY
67866: ST_TO_ADDR
// if x - r < 0 then
67867: LD_VAR 0 2
67871: PUSH
67872: LD_VAR 0 4
67876: MINUS
67877: PUSH
67878: LD_INT 0
67880: LESS
67881: IFFALSE 67893
// min_x := 0 else
67883: LD_ADDR_VAR 0 7
67887: PUSH
67888: LD_INT 0
67890: ST_TO_ADDR
67891: GO 67909
// min_x := x - r ;
67893: LD_ADDR_VAR 0 7
67897: PUSH
67898: LD_VAR 0 2
67902: PUSH
67903: LD_VAR 0 4
67907: MINUS
67908: ST_TO_ADDR
// if y - r < 0 then
67909: LD_VAR 0 3
67913: PUSH
67914: LD_VAR 0 4
67918: MINUS
67919: PUSH
67920: LD_INT 0
67922: LESS
67923: IFFALSE 67935
// min_y := 0 else
67925: LD_ADDR_VAR 0 8
67929: PUSH
67930: LD_INT 0
67932: ST_TO_ADDR
67933: GO 67951
// min_y := y - r ;
67935: LD_ADDR_VAR 0 8
67939: PUSH
67940: LD_VAR 0 3
67944: PUSH
67945: LD_VAR 0 4
67949: MINUS
67950: ST_TO_ADDR
// max_x := x + r ;
67951: LD_ADDR_VAR 0 9
67955: PUSH
67956: LD_VAR 0 2
67960: PUSH
67961: LD_VAR 0 4
67965: PLUS
67966: ST_TO_ADDR
// max_y := y + r ;
67967: LD_ADDR_VAR 0 10
67971: PUSH
67972: LD_VAR 0 3
67976: PUSH
67977: LD_VAR 0 4
67981: PLUS
67982: ST_TO_ADDR
// for _x = min_x to max_x do
67983: LD_ADDR_VAR 0 11
67987: PUSH
67988: DOUBLE
67989: LD_VAR 0 7
67993: DEC
67994: ST_TO_ADDR
67995: LD_VAR 0 9
67999: PUSH
68000: FOR_TO
68001: IFFALSE 68118
// for _y = min_y to max_y do
68003: LD_ADDR_VAR 0 12
68007: PUSH
68008: DOUBLE
68009: LD_VAR 0 8
68013: DEC
68014: ST_TO_ADDR
68015: LD_VAR 0 10
68019: PUSH
68020: FOR_TO
68021: IFFALSE 68114
// begin if not ValidHex ( _x , _y ) then
68023: LD_VAR 0 11
68027: PPUSH
68028: LD_VAR 0 12
68032: PPUSH
68033: CALL_OW 488
68037: NOT
68038: IFFALSE 68042
// continue ;
68040: GO 68020
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
68042: LD_VAR 0 11
68046: PPUSH
68047: LD_VAR 0 12
68051: PPUSH
68052: CALL_OW 351
68056: PUSH
68057: LD_VAR 0 11
68061: PPUSH
68062: LD_VAR 0 12
68066: PPUSH
68067: CALL_OW 554
68071: AND
68072: IFFALSE 68112
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
68074: LD_ADDR_VAR 0 13
68078: PUSH
68079: LD_VAR 0 13
68083: PPUSH
68084: LD_VAR 0 13
68088: PUSH
68089: LD_INT 1
68091: PLUS
68092: PPUSH
68093: LD_VAR 0 11
68097: PUSH
68098: LD_VAR 0 12
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PPUSH
68107: CALL_OW 2
68111: ST_TO_ADDR
// end ;
68112: GO 68020
68114: POP
68115: POP
68116: GO 68000
68118: POP
68119: POP
// if not list then
68120: LD_VAR 0 13
68124: NOT
68125: IFFALSE 68129
// exit ;
68127: GO 68373
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
68129: LD_ADDR_VAR 0 13
68133: PUSH
68134: LD_VAR 0 1
68138: PPUSH
68139: LD_VAR 0 13
68143: PPUSH
68144: LD_INT 1
68146: PPUSH
68147: LD_INT 1
68149: PPUSH
68150: CALL 7653 0 4
68154: ST_TO_ADDR
// ComStop ( flame ) ;
68155: LD_VAR 0 1
68159: PPUSH
68160: CALL_OW 141
// for i in list do
68164: LD_ADDR_VAR 0 6
68168: PUSH
68169: LD_VAR 0 13
68173: PUSH
68174: FOR_IN
68175: IFFALSE 68206
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
68177: LD_VAR 0 1
68181: PPUSH
68182: LD_VAR 0 6
68186: PUSH
68187: LD_INT 1
68189: ARRAY
68190: PPUSH
68191: LD_VAR 0 6
68195: PUSH
68196: LD_INT 2
68198: ARRAY
68199: PPUSH
68200: CALL_OW 176
68204: GO 68174
68206: POP
68207: POP
// repeat wait ( 0 0$1 ) ;
68208: LD_INT 35
68210: PPUSH
68211: CALL_OW 67
// task := GetTaskList ( flame ) ;
68215: LD_ADDR_VAR 0 14
68219: PUSH
68220: LD_VAR 0 1
68224: PPUSH
68225: CALL_OW 437
68229: ST_TO_ADDR
// if not task then
68230: LD_VAR 0 14
68234: NOT
68235: IFFALSE 68239
// exit ;
68237: GO 68373
// if task [ 1 ] [ 1 ] <> | then
68239: LD_VAR 0 14
68243: PUSH
68244: LD_INT 1
68246: ARRAY
68247: PUSH
68248: LD_INT 1
68250: ARRAY
68251: PUSH
68252: LD_STRING |
68254: NONEQUAL
68255: IFFALSE 68259
// exit ;
68257: GO 68373
// _x := task [ 1 ] [ 2 ] ;
68259: LD_ADDR_VAR 0 11
68263: PUSH
68264: LD_VAR 0 14
68268: PUSH
68269: LD_INT 1
68271: ARRAY
68272: PUSH
68273: LD_INT 2
68275: ARRAY
68276: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
68277: LD_ADDR_VAR 0 12
68281: PUSH
68282: LD_VAR 0 14
68286: PUSH
68287: LD_INT 1
68289: ARRAY
68290: PUSH
68291: LD_INT 3
68293: ARRAY
68294: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
68295: LD_VAR 0 11
68299: PPUSH
68300: LD_VAR 0 12
68304: PPUSH
68305: CALL_OW 351
68309: NOT
68310: PUSH
68311: LD_VAR 0 11
68315: PPUSH
68316: LD_VAR 0 12
68320: PPUSH
68321: CALL_OW 554
68325: NOT
68326: OR
68327: IFFALSE 68361
// begin task := Delete ( task , 1 ) ;
68329: LD_ADDR_VAR 0 14
68333: PUSH
68334: LD_VAR 0 14
68338: PPUSH
68339: LD_INT 1
68341: PPUSH
68342: CALL_OW 3
68346: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
68347: LD_VAR 0 1
68351: PPUSH
68352: LD_VAR 0 14
68356: PPUSH
68357: CALL_OW 446
// end ; until not HasTask ( flame ) ;
68361: LD_VAR 0 1
68365: PPUSH
68366: CALL_OW 314
68370: NOT
68371: IFFALSE 68208
// end ;
68373: LD_VAR 0 5
68377: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
68378: LD_EXP 100
68382: NOT
68383: IFFALSE 68433
68385: GO 68387
68387: DISABLE
// begin initHack := true ;
68388: LD_ADDR_EXP 100
68392: PUSH
68393: LD_INT 1
68395: ST_TO_ADDR
// hackTanks := [ ] ;
68396: LD_ADDR_EXP 101
68400: PUSH
68401: EMPTY
68402: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
68403: LD_ADDR_EXP 102
68407: PUSH
68408: EMPTY
68409: ST_TO_ADDR
// hackLimit := 3 ;
68410: LD_ADDR_EXP 103
68414: PUSH
68415: LD_INT 3
68417: ST_TO_ADDR
// hackDist := 12 ;
68418: LD_ADDR_EXP 104
68422: PUSH
68423: LD_INT 12
68425: ST_TO_ADDR
// hackCounter := [ ] ;
68426: LD_ADDR_EXP 105
68430: PUSH
68431: EMPTY
68432: ST_TO_ADDR
// end ;
68433: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
68434: LD_EXP 100
68438: PUSH
68439: LD_INT 34
68441: PUSH
68442: LD_INT 99
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PPUSH
68449: CALL_OW 69
68453: AND
68454: IFFALSE 68707
68456: GO 68458
68458: DISABLE
68459: LD_INT 0
68461: PPUSH
68462: PPUSH
// begin enable ;
68463: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
68464: LD_ADDR_VAR 0 1
68468: PUSH
68469: LD_INT 34
68471: PUSH
68472: LD_INT 99
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PPUSH
68479: CALL_OW 69
68483: PUSH
68484: FOR_IN
68485: IFFALSE 68705
// begin if not i in hackTanks then
68487: LD_VAR 0 1
68491: PUSH
68492: LD_EXP 101
68496: IN
68497: NOT
68498: IFFALSE 68581
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
68500: LD_ADDR_EXP 101
68504: PUSH
68505: LD_EXP 101
68509: PPUSH
68510: LD_EXP 101
68514: PUSH
68515: LD_INT 1
68517: PLUS
68518: PPUSH
68519: LD_VAR 0 1
68523: PPUSH
68524: CALL_OW 1
68528: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
68529: LD_ADDR_EXP 102
68533: PUSH
68534: LD_EXP 102
68538: PPUSH
68539: LD_EXP 102
68543: PUSH
68544: LD_INT 1
68546: PLUS
68547: PPUSH
68548: EMPTY
68549: PPUSH
68550: CALL_OW 1
68554: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
68555: LD_ADDR_EXP 105
68559: PUSH
68560: LD_EXP 105
68564: PPUSH
68565: LD_EXP 105
68569: PUSH
68570: LD_INT 1
68572: PLUS
68573: PPUSH
68574: EMPTY
68575: PPUSH
68576: CALL_OW 1
68580: ST_TO_ADDR
// end ; if not IsOk ( i ) then
68581: LD_VAR 0 1
68585: PPUSH
68586: CALL_OW 302
68590: NOT
68591: IFFALSE 68604
// begin HackUnlinkAll ( i ) ;
68593: LD_VAR 0 1
68597: PPUSH
68598: CALL 68710 0 1
// continue ;
68602: GO 68484
// end ; HackCheckCapturedStatus ( i ) ;
68604: LD_VAR 0 1
68608: PPUSH
68609: CALL 69153 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
68613: LD_ADDR_VAR 0 2
68617: PUSH
68618: LD_INT 81
68620: PUSH
68621: LD_VAR 0 1
68625: PPUSH
68626: CALL_OW 255
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 33
68637: PUSH
68638: LD_INT 3
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 91
68647: PUSH
68648: LD_VAR 0 1
68652: PUSH
68653: LD_EXP 104
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 50
68665: PUSH
68666: EMPTY
68667: LIST
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: PPUSH
68675: CALL_OW 69
68679: ST_TO_ADDR
// if not tmp then
68680: LD_VAR 0 2
68684: NOT
68685: IFFALSE 68689
// continue ;
68687: GO 68484
// HackLink ( i , tmp ) ;
68689: LD_VAR 0 1
68693: PPUSH
68694: LD_VAR 0 2
68698: PPUSH
68699: CALL 68846 0 2
// end ;
68703: GO 68484
68705: POP
68706: POP
// end ;
68707: PPOPN 2
68709: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
68710: LD_INT 0
68712: PPUSH
68713: PPUSH
68714: PPUSH
// if not hack in hackTanks then
68715: LD_VAR 0 1
68719: PUSH
68720: LD_EXP 101
68724: IN
68725: NOT
68726: IFFALSE 68730
// exit ;
68728: GO 68841
// index := GetElementIndex ( hackTanks , hack ) ;
68730: LD_ADDR_VAR 0 4
68734: PUSH
68735: LD_EXP 101
68739: PPUSH
68740: LD_VAR 0 1
68744: PPUSH
68745: CALL 6950 0 2
68749: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
68750: LD_EXP 102
68754: PUSH
68755: LD_VAR 0 4
68759: ARRAY
68760: IFFALSE 68841
// begin for i in hackTanksCaptured [ index ] do
68762: LD_ADDR_VAR 0 3
68766: PUSH
68767: LD_EXP 102
68771: PUSH
68772: LD_VAR 0 4
68776: ARRAY
68777: PUSH
68778: FOR_IN
68779: IFFALSE 68805
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
68781: LD_VAR 0 3
68785: PUSH
68786: LD_INT 1
68788: ARRAY
68789: PPUSH
68790: LD_VAR 0 3
68794: PUSH
68795: LD_INT 2
68797: ARRAY
68798: PPUSH
68799: CALL_OW 235
68803: GO 68778
68805: POP
68806: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
68807: LD_ADDR_EXP 102
68811: PUSH
68812: LD_EXP 102
68816: PPUSH
68817: LD_VAR 0 4
68821: PPUSH
68822: EMPTY
68823: PPUSH
68824: CALL_OW 1
68828: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
68829: LD_VAR 0 1
68833: PPUSH
68834: LD_INT 0
68836: PPUSH
68837: CALL_OW 505
// end ; end ;
68841: LD_VAR 0 2
68845: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
68846: LD_INT 0
68848: PPUSH
68849: PPUSH
68850: PPUSH
// if not hack in hackTanks or not vehicles then
68851: LD_VAR 0 1
68855: PUSH
68856: LD_EXP 101
68860: IN
68861: NOT
68862: PUSH
68863: LD_VAR 0 2
68867: NOT
68868: OR
68869: IFFALSE 68873
// exit ;
68871: GO 69148
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
68873: LD_ADDR_VAR 0 2
68877: PUSH
68878: LD_VAR 0 1
68882: PPUSH
68883: LD_VAR 0 2
68887: PPUSH
68888: LD_INT 1
68890: PPUSH
68891: LD_INT 1
68893: PPUSH
68894: CALL 7600 0 4
68898: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
68899: LD_ADDR_VAR 0 5
68903: PUSH
68904: LD_EXP 101
68908: PPUSH
68909: LD_VAR 0 1
68913: PPUSH
68914: CALL 6950 0 2
68918: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
68919: LD_EXP 102
68923: PUSH
68924: LD_VAR 0 5
68928: ARRAY
68929: PUSH
68930: LD_EXP 103
68934: LESS
68935: IFFALSE 69124
// begin for i := 1 to vehicles do
68937: LD_ADDR_VAR 0 4
68941: PUSH
68942: DOUBLE
68943: LD_INT 1
68945: DEC
68946: ST_TO_ADDR
68947: LD_VAR 0 2
68951: PUSH
68952: FOR_TO
68953: IFFALSE 69122
// begin if hackTanksCaptured [ index ] = hackLimit then
68955: LD_EXP 102
68959: PUSH
68960: LD_VAR 0 5
68964: ARRAY
68965: PUSH
68966: LD_EXP 103
68970: EQUAL
68971: IFFALSE 68975
// break ;
68973: GO 69122
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
68975: LD_ADDR_EXP 105
68979: PUSH
68980: LD_EXP 105
68984: PPUSH
68985: LD_VAR 0 5
68989: PPUSH
68990: LD_EXP 105
68994: PUSH
68995: LD_VAR 0 5
68999: ARRAY
69000: PUSH
69001: LD_INT 1
69003: PLUS
69004: PPUSH
69005: CALL_OW 1
69009: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
69010: LD_ADDR_EXP 102
69014: PUSH
69015: LD_EXP 102
69019: PPUSH
69020: LD_VAR 0 5
69024: PUSH
69025: LD_EXP 102
69029: PUSH
69030: LD_VAR 0 5
69034: ARRAY
69035: PUSH
69036: LD_INT 1
69038: PLUS
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PPUSH
69044: LD_VAR 0 2
69048: PUSH
69049: LD_VAR 0 4
69053: ARRAY
69054: PUSH
69055: LD_VAR 0 2
69059: PUSH
69060: LD_VAR 0 4
69064: ARRAY
69065: PPUSH
69066: CALL_OW 255
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PPUSH
69075: CALL 7165 0 3
69079: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
69080: LD_VAR 0 2
69084: PUSH
69085: LD_VAR 0 4
69089: ARRAY
69090: PPUSH
69091: LD_VAR 0 1
69095: PPUSH
69096: CALL_OW 255
69100: PPUSH
69101: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
69105: LD_VAR 0 2
69109: PUSH
69110: LD_VAR 0 4
69114: ARRAY
69115: PPUSH
69116: CALL_OW 141
// end ;
69120: GO 68952
69122: POP
69123: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
69124: LD_VAR 0 1
69128: PPUSH
69129: LD_EXP 102
69133: PUSH
69134: LD_VAR 0 5
69138: ARRAY
69139: PUSH
69140: LD_INT 0
69142: PLUS
69143: PPUSH
69144: CALL_OW 505
// end ;
69148: LD_VAR 0 3
69152: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
69153: LD_INT 0
69155: PPUSH
69156: PPUSH
69157: PPUSH
69158: PPUSH
// if not hack in hackTanks then
69159: LD_VAR 0 1
69163: PUSH
69164: LD_EXP 101
69168: IN
69169: NOT
69170: IFFALSE 69174
// exit ;
69172: GO 69414
// index := GetElementIndex ( hackTanks , hack ) ;
69174: LD_ADDR_VAR 0 4
69178: PUSH
69179: LD_EXP 101
69183: PPUSH
69184: LD_VAR 0 1
69188: PPUSH
69189: CALL 6950 0 2
69193: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
69194: LD_ADDR_VAR 0 3
69198: PUSH
69199: DOUBLE
69200: LD_EXP 102
69204: PUSH
69205: LD_VAR 0 4
69209: ARRAY
69210: INC
69211: ST_TO_ADDR
69212: LD_INT 1
69214: PUSH
69215: FOR_DOWNTO
69216: IFFALSE 69388
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
69218: LD_ADDR_VAR 0 5
69222: PUSH
69223: LD_EXP 102
69227: PUSH
69228: LD_VAR 0 4
69232: ARRAY
69233: PUSH
69234: LD_VAR 0 3
69238: ARRAY
69239: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
69240: LD_VAR 0 5
69244: PUSH
69245: LD_INT 1
69247: ARRAY
69248: PPUSH
69249: CALL_OW 302
69253: NOT
69254: PUSH
69255: LD_VAR 0 5
69259: PUSH
69260: LD_INT 1
69262: ARRAY
69263: PPUSH
69264: CALL_OW 255
69268: PUSH
69269: LD_VAR 0 1
69273: PPUSH
69274: CALL_OW 255
69278: NONEQUAL
69279: OR
69280: IFFALSE 69386
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
69282: LD_VAR 0 5
69286: PUSH
69287: LD_INT 1
69289: ARRAY
69290: PPUSH
69291: CALL_OW 305
69295: PUSH
69296: LD_VAR 0 5
69300: PUSH
69301: LD_INT 1
69303: ARRAY
69304: PPUSH
69305: CALL_OW 255
69309: PUSH
69310: LD_VAR 0 1
69314: PPUSH
69315: CALL_OW 255
69319: EQUAL
69320: AND
69321: IFFALSE 69345
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
69323: LD_VAR 0 5
69327: PUSH
69328: LD_INT 1
69330: ARRAY
69331: PPUSH
69332: LD_VAR 0 5
69336: PUSH
69337: LD_INT 2
69339: ARRAY
69340: PPUSH
69341: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
69345: LD_ADDR_EXP 102
69349: PUSH
69350: LD_EXP 102
69354: PPUSH
69355: LD_VAR 0 4
69359: PPUSH
69360: LD_EXP 102
69364: PUSH
69365: LD_VAR 0 4
69369: ARRAY
69370: PPUSH
69371: LD_VAR 0 3
69375: PPUSH
69376: CALL_OW 3
69380: PPUSH
69381: CALL_OW 1
69385: ST_TO_ADDR
// end ; end ;
69386: GO 69215
69388: POP
69389: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
69390: LD_VAR 0 1
69394: PPUSH
69395: LD_EXP 102
69399: PUSH
69400: LD_VAR 0 4
69404: ARRAY
69405: PUSH
69406: LD_INT 0
69408: PLUS
69409: PPUSH
69410: CALL_OW 505
// end ;
69414: LD_VAR 0 2
69418: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
69419: LD_INT 0
69421: PPUSH
69422: PPUSH
69423: PPUSH
69424: PPUSH
// if not hack in hackTanks then
69425: LD_VAR 0 1
69429: PUSH
69430: LD_EXP 101
69434: IN
69435: NOT
69436: IFFALSE 69440
// exit ;
69438: GO 69525
// index := GetElementIndex ( hackTanks , hack ) ;
69440: LD_ADDR_VAR 0 5
69444: PUSH
69445: LD_EXP 101
69449: PPUSH
69450: LD_VAR 0 1
69454: PPUSH
69455: CALL 6950 0 2
69459: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
69460: LD_ADDR_VAR 0 4
69464: PUSH
69465: DOUBLE
69466: LD_INT 1
69468: DEC
69469: ST_TO_ADDR
69470: LD_EXP 102
69474: PUSH
69475: LD_VAR 0 5
69479: ARRAY
69480: PUSH
69481: FOR_TO
69482: IFFALSE 69523
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
69484: LD_EXP 102
69488: PUSH
69489: LD_VAR 0 5
69493: ARRAY
69494: PUSH
69495: LD_VAR 0 4
69499: ARRAY
69500: PUSH
69501: LD_INT 1
69503: ARRAY
69504: PUSH
69505: LD_VAR 0 2
69509: EQUAL
69510: IFFALSE 69521
// KillUnit ( vehicle ) ;
69512: LD_VAR 0 2
69516: PPUSH
69517: CALL_OW 66
69521: GO 69481
69523: POP
69524: POP
// end ;
69525: LD_VAR 0 3
69529: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
69530: LD_EXP 106
69534: NOT
69535: IFFALSE 69570
69537: GO 69539
69539: DISABLE
// begin initMiner := true ;
69540: LD_ADDR_EXP 106
69544: PUSH
69545: LD_INT 1
69547: ST_TO_ADDR
// minersList := [ ] ;
69548: LD_ADDR_EXP 107
69552: PUSH
69553: EMPTY
69554: ST_TO_ADDR
// minerMinesList := [ ] ;
69555: LD_ADDR_EXP 108
69559: PUSH
69560: EMPTY
69561: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
69562: LD_ADDR_EXP 109
69566: PUSH
69567: LD_INT 5
69569: ST_TO_ADDR
// end ;
69570: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
69571: LD_EXP 106
69575: PUSH
69576: LD_INT 34
69578: PUSH
69579: LD_INT 81
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PPUSH
69586: CALL_OW 69
69590: AND
69591: IFFALSE 70052
69593: GO 69595
69595: DISABLE
69596: LD_INT 0
69598: PPUSH
69599: PPUSH
69600: PPUSH
69601: PPUSH
// begin enable ;
69602: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
69603: LD_ADDR_VAR 0 1
69607: PUSH
69608: LD_INT 34
69610: PUSH
69611: LD_INT 81
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PPUSH
69618: CALL_OW 69
69622: PUSH
69623: FOR_IN
69624: IFFALSE 69696
// begin if not i in minersList then
69626: LD_VAR 0 1
69630: PUSH
69631: LD_EXP 107
69635: IN
69636: NOT
69637: IFFALSE 69694
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
69639: LD_ADDR_EXP 107
69643: PUSH
69644: LD_EXP 107
69648: PPUSH
69649: LD_EXP 107
69653: PUSH
69654: LD_INT 1
69656: PLUS
69657: PPUSH
69658: LD_VAR 0 1
69662: PPUSH
69663: CALL_OW 1
69667: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
69668: LD_ADDR_EXP 108
69672: PUSH
69673: LD_EXP 108
69677: PPUSH
69678: LD_EXP 108
69682: PUSH
69683: LD_INT 1
69685: PLUS
69686: PPUSH
69687: EMPTY
69688: PPUSH
69689: CALL_OW 1
69693: ST_TO_ADDR
// end end ;
69694: GO 69623
69696: POP
69697: POP
// for i := minerMinesList downto 1 do
69698: LD_ADDR_VAR 0 1
69702: PUSH
69703: DOUBLE
69704: LD_EXP 108
69708: INC
69709: ST_TO_ADDR
69710: LD_INT 1
69712: PUSH
69713: FOR_DOWNTO
69714: IFFALSE 70050
// begin if IsLive ( minersList [ i ] ) then
69716: LD_EXP 107
69720: PUSH
69721: LD_VAR 0 1
69725: ARRAY
69726: PPUSH
69727: CALL_OW 300
69731: IFFALSE 69759
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
69733: LD_EXP 107
69737: PUSH
69738: LD_VAR 0 1
69742: ARRAY
69743: PPUSH
69744: LD_EXP 108
69748: PUSH
69749: LD_VAR 0 1
69753: ARRAY
69754: PPUSH
69755: CALL_OW 505
// if not minerMinesList [ i ] then
69759: LD_EXP 108
69763: PUSH
69764: LD_VAR 0 1
69768: ARRAY
69769: NOT
69770: IFFALSE 69774
// continue ;
69772: GO 69713
// for j := minerMinesList [ i ] downto 1 do
69774: LD_ADDR_VAR 0 2
69778: PUSH
69779: DOUBLE
69780: LD_EXP 108
69784: PUSH
69785: LD_VAR 0 1
69789: ARRAY
69790: INC
69791: ST_TO_ADDR
69792: LD_INT 1
69794: PUSH
69795: FOR_DOWNTO
69796: IFFALSE 70046
// begin side := GetSide ( minersList [ i ] ) ;
69798: LD_ADDR_VAR 0 3
69802: PUSH
69803: LD_EXP 107
69807: PUSH
69808: LD_VAR 0 1
69812: ARRAY
69813: PPUSH
69814: CALL_OW 255
69818: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
69819: LD_ADDR_VAR 0 4
69823: PUSH
69824: LD_EXP 108
69828: PUSH
69829: LD_VAR 0 1
69833: ARRAY
69834: PUSH
69835: LD_VAR 0 2
69839: ARRAY
69840: PUSH
69841: LD_INT 1
69843: ARRAY
69844: PPUSH
69845: LD_EXP 108
69849: PUSH
69850: LD_VAR 0 1
69854: ARRAY
69855: PUSH
69856: LD_VAR 0 2
69860: ARRAY
69861: PUSH
69862: LD_INT 2
69864: ARRAY
69865: PPUSH
69866: CALL_OW 428
69870: ST_TO_ADDR
// if not tmp then
69871: LD_VAR 0 4
69875: NOT
69876: IFFALSE 69880
// continue ;
69878: GO 69795
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
69880: LD_VAR 0 4
69884: PUSH
69885: LD_INT 81
69887: PUSH
69888: LD_VAR 0 3
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PPUSH
69897: CALL_OW 69
69901: IN
69902: PUSH
69903: LD_EXP 108
69907: PUSH
69908: LD_VAR 0 1
69912: ARRAY
69913: PUSH
69914: LD_VAR 0 2
69918: ARRAY
69919: PUSH
69920: LD_INT 1
69922: ARRAY
69923: PPUSH
69924: LD_EXP 108
69928: PUSH
69929: LD_VAR 0 1
69933: ARRAY
69934: PUSH
69935: LD_VAR 0 2
69939: ARRAY
69940: PUSH
69941: LD_INT 2
69943: ARRAY
69944: PPUSH
69945: CALL_OW 458
69949: AND
69950: IFFALSE 70044
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
69952: LD_EXP 108
69956: PUSH
69957: LD_VAR 0 1
69961: ARRAY
69962: PUSH
69963: LD_VAR 0 2
69967: ARRAY
69968: PUSH
69969: LD_INT 1
69971: ARRAY
69972: PPUSH
69973: LD_EXP 108
69977: PUSH
69978: LD_VAR 0 1
69982: ARRAY
69983: PUSH
69984: LD_VAR 0 2
69988: ARRAY
69989: PUSH
69990: LD_INT 2
69992: ARRAY
69993: PPUSH
69994: LD_VAR 0 3
69998: PPUSH
69999: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
70003: LD_ADDR_EXP 108
70007: PUSH
70008: LD_EXP 108
70012: PPUSH
70013: LD_VAR 0 1
70017: PPUSH
70018: LD_EXP 108
70022: PUSH
70023: LD_VAR 0 1
70027: ARRAY
70028: PPUSH
70029: LD_VAR 0 2
70033: PPUSH
70034: CALL_OW 3
70038: PPUSH
70039: CALL_OW 1
70043: ST_TO_ADDR
// end ; end ;
70044: GO 69795
70046: POP
70047: POP
// end ;
70048: GO 69713
70050: POP
70051: POP
// end ;
70052: PPOPN 4
70054: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
70055: LD_INT 0
70057: PPUSH
70058: PPUSH
// result := false ;
70059: LD_ADDR_VAR 0 4
70063: PUSH
70064: LD_INT 0
70066: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
70067: LD_VAR 0 1
70071: PPUSH
70072: CALL_OW 264
70076: PUSH
70077: LD_INT 81
70079: EQUAL
70080: NOT
70081: IFFALSE 70085
// exit ;
70083: GO 70325
// index := GetElementIndex ( minersList , unit ) ;
70085: LD_ADDR_VAR 0 5
70089: PUSH
70090: LD_EXP 107
70094: PPUSH
70095: LD_VAR 0 1
70099: PPUSH
70100: CALL 6950 0 2
70104: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
70105: LD_EXP 108
70109: PUSH
70110: LD_VAR 0 5
70114: ARRAY
70115: PUSH
70116: LD_EXP 109
70120: GREATEREQUAL
70121: IFFALSE 70125
// exit ;
70123: GO 70325
// ComMoveXY ( unit , x , y ) ;
70125: LD_VAR 0 1
70129: PPUSH
70130: LD_VAR 0 2
70134: PPUSH
70135: LD_VAR 0 3
70139: PPUSH
70140: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
70144: LD_INT 35
70146: PPUSH
70147: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
70151: LD_VAR 0 1
70155: PPUSH
70156: LD_VAR 0 2
70160: PPUSH
70161: LD_VAR 0 3
70165: PPUSH
70166: CALL 38691 0 3
70170: NOT
70171: PUSH
70172: LD_VAR 0 1
70176: PPUSH
70177: CALL_OW 314
70181: AND
70182: IFFALSE 70186
// exit ;
70184: GO 70325
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
70186: LD_VAR 0 2
70190: PPUSH
70191: LD_VAR 0 3
70195: PPUSH
70196: CALL_OW 428
70200: PUSH
70201: LD_VAR 0 1
70205: EQUAL
70206: PUSH
70207: LD_VAR 0 1
70211: PPUSH
70212: CALL_OW 314
70216: NOT
70217: AND
70218: IFFALSE 70144
// PlaySoundXY ( x , y , PlantMine ) ;
70220: LD_VAR 0 2
70224: PPUSH
70225: LD_VAR 0 3
70229: PPUSH
70230: LD_STRING PlantMine
70232: PPUSH
70233: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
70237: LD_VAR 0 2
70241: PPUSH
70242: LD_VAR 0 3
70246: PPUSH
70247: LD_VAR 0 1
70251: PPUSH
70252: CALL_OW 255
70256: PPUSH
70257: LD_INT 0
70259: PPUSH
70260: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
70264: LD_ADDR_EXP 108
70268: PUSH
70269: LD_EXP 108
70273: PPUSH
70274: LD_VAR 0 5
70278: PUSH
70279: LD_EXP 108
70283: PUSH
70284: LD_VAR 0 5
70288: ARRAY
70289: PUSH
70290: LD_INT 1
70292: PLUS
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PPUSH
70298: LD_VAR 0 2
70302: PUSH
70303: LD_VAR 0 3
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PPUSH
70312: CALL 7165 0 3
70316: ST_TO_ADDR
// result := true ;
70317: LD_ADDR_VAR 0 4
70321: PUSH
70322: LD_INT 1
70324: ST_TO_ADDR
// end ;
70325: LD_VAR 0 4
70329: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
70330: LD_INT 0
70332: PPUSH
70333: PPUSH
70334: PPUSH
// if not unit in minersList then
70335: LD_VAR 0 1
70339: PUSH
70340: LD_EXP 107
70344: IN
70345: NOT
70346: IFFALSE 70350
// exit ;
70348: GO 70742
// index := GetElementIndex ( minersList , unit ) ;
70350: LD_ADDR_VAR 0 6
70354: PUSH
70355: LD_EXP 107
70359: PPUSH
70360: LD_VAR 0 1
70364: PPUSH
70365: CALL 6950 0 2
70369: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
70370: LD_ADDR_VAR 0 5
70374: PUSH
70375: DOUBLE
70376: LD_EXP 108
70380: PUSH
70381: LD_VAR 0 6
70385: ARRAY
70386: INC
70387: ST_TO_ADDR
70388: LD_INT 1
70390: PUSH
70391: FOR_DOWNTO
70392: IFFALSE 70553
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
70394: LD_EXP 108
70398: PUSH
70399: LD_VAR 0 6
70403: ARRAY
70404: PUSH
70405: LD_VAR 0 5
70409: ARRAY
70410: PUSH
70411: LD_INT 1
70413: ARRAY
70414: PUSH
70415: LD_VAR 0 2
70419: EQUAL
70420: PUSH
70421: LD_EXP 108
70425: PUSH
70426: LD_VAR 0 6
70430: ARRAY
70431: PUSH
70432: LD_VAR 0 5
70436: ARRAY
70437: PUSH
70438: LD_INT 2
70440: ARRAY
70441: PUSH
70442: LD_VAR 0 3
70446: EQUAL
70447: AND
70448: IFFALSE 70551
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
70450: LD_EXP 108
70454: PUSH
70455: LD_VAR 0 6
70459: ARRAY
70460: PUSH
70461: LD_VAR 0 5
70465: ARRAY
70466: PUSH
70467: LD_INT 1
70469: ARRAY
70470: PPUSH
70471: LD_EXP 108
70475: PUSH
70476: LD_VAR 0 6
70480: ARRAY
70481: PUSH
70482: LD_VAR 0 5
70486: ARRAY
70487: PUSH
70488: LD_INT 2
70490: ARRAY
70491: PPUSH
70492: LD_VAR 0 1
70496: PPUSH
70497: CALL_OW 255
70501: PPUSH
70502: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
70506: LD_ADDR_EXP 108
70510: PUSH
70511: LD_EXP 108
70515: PPUSH
70516: LD_VAR 0 6
70520: PPUSH
70521: LD_EXP 108
70525: PUSH
70526: LD_VAR 0 6
70530: ARRAY
70531: PPUSH
70532: LD_VAR 0 5
70536: PPUSH
70537: CALL_OW 3
70541: PPUSH
70542: CALL_OW 1
70546: ST_TO_ADDR
// exit ;
70547: POP
70548: POP
70549: GO 70742
// end ; end ;
70551: GO 70391
70553: POP
70554: POP
// for i := minerMinesList [ index ] downto 1 do
70555: LD_ADDR_VAR 0 5
70559: PUSH
70560: DOUBLE
70561: LD_EXP 108
70565: PUSH
70566: LD_VAR 0 6
70570: ARRAY
70571: INC
70572: ST_TO_ADDR
70573: LD_INT 1
70575: PUSH
70576: FOR_DOWNTO
70577: IFFALSE 70740
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
70579: LD_EXP 108
70583: PUSH
70584: LD_VAR 0 6
70588: ARRAY
70589: PUSH
70590: LD_VAR 0 5
70594: ARRAY
70595: PUSH
70596: LD_INT 1
70598: ARRAY
70599: PPUSH
70600: LD_EXP 108
70604: PUSH
70605: LD_VAR 0 6
70609: ARRAY
70610: PUSH
70611: LD_VAR 0 5
70615: ARRAY
70616: PUSH
70617: LD_INT 2
70619: ARRAY
70620: PPUSH
70621: LD_VAR 0 2
70625: PPUSH
70626: LD_VAR 0 3
70630: PPUSH
70631: CALL_OW 298
70635: PUSH
70636: LD_INT 6
70638: LESS
70639: IFFALSE 70738
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
70641: LD_EXP 108
70645: PUSH
70646: LD_VAR 0 6
70650: ARRAY
70651: PUSH
70652: LD_VAR 0 5
70656: ARRAY
70657: PUSH
70658: LD_INT 1
70660: ARRAY
70661: PPUSH
70662: LD_EXP 108
70666: PUSH
70667: LD_VAR 0 6
70671: ARRAY
70672: PUSH
70673: LD_VAR 0 5
70677: ARRAY
70678: PUSH
70679: LD_INT 2
70681: ARRAY
70682: PPUSH
70683: LD_VAR 0 1
70687: PPUSH
70688: CALL_OW 255
70692: PPUSH
70693: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
70697: LD_ADDR_EXP 108
70701: PUSH
70702: LD_EXP 108
70706: PPUSH
70707: LD_VAR 0 6
70711: PPUSH
70712: LD_EXP 108
70716: PUSH
70717: LD_VAR 0 6
70721: ARRAY
70722: PPUSH
70723: LD_VAR 0 5
70727: PPUSH
70728: CALL_OW 3
70732: PPUSH
70733: CALL_OW 1
70737: ST_TO_ADDR
// end ; end ;
70738: GO 70576
70740: POP
70741: POP
// end ;
70742: LD_VAR 0 4
70746: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
70747: LD_INT 0
70749: PPUSH
70750: PPUSH
70751: PPUSH
70752: PPUSH
70753: PPUSH
70754: PPUSH
70755: PPUSH
70756: PPUSH
70757: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
70758: LD_VAR 0 1
70762: PPUSH
70763: CALL_OW 264
70767: PUSH
70768: LD_INT 81
70770: EQUAL
70771: NOT
70772: PUSH
70773: LD_VAR 0 1
70777: PUSH
70778: LD_EXP 107
70782: IN
70783: NOT
70784: OR
70785: IFFALSE 70789
// exit ;
70787: GO 71111
// index := GetElementIndex ( minersList , unit ) ;
70789: LD_ADDR_VAR 0 6
70793: PUSH
70794: LD_EXP 107
70798: PPUSH
70799: LD_VAR 0 1
70803: PPUSH
70804: CALL 6950 0 2
70808: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
70809: LD_ADDR_VAR 0 8
70813: PUSH
70814: LD_EXP 109
70818: PUSH
70819: LD_EXP 108
70823: PUSH
70824: LD_VAR 0 6
70828: ARRAY
70829: MINUS
70830: ST_TO_ADDR
// if not minesFreeAmount then
70831: LD_VAR 0 8
70835: NOT
70836: IFFALSE 70840
// exit ;
70838: GO 71111
// tmp := [ ] ;
70840: LD_ADDR_VAR 0 7
70844: PUSH
70845: EMPTY
70846: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
70847: LD_ADDR_VAR 0 5
70851: PUSH
70852: DOUBLE
70853: LD_INT 1
70855: DEC
70856: ST_TO_ADDR
70857: LD_VAR 0 8
70861: PUSH
70862: FOR_TO
70863: IFFALSE 71058
// begin _d := rand ( 0 , 5 ) ;
70865: LD_ADDR_VAR 0 11
70869: PUSH
70870: LD_INT 0
70872: PPUSH
70873: LD_INT 5
70875: PPUSH
70876: CALL_OW 12
70880: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
70881: LD_ADDR_VAR 0 12
70885: PUSH
70886: LD_INT 2
70888: PPUSH
70889: LD_INT 6
70891: PPUSH
70892: CALL_OW 12
70896: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
70897: LD_ADDR_VAR 0 9
70901: PUSH
70902: LD_VAR 0 2
70906: PPUSH
70907: LD_VAR 0 11
70911: PPUSH
70912: LD_VAR 0 12
70916: PPUSH
70917: CALL_OW 272
70921: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
70922: LD_ADDR_VAR 0 10
70926: PUSH
70927: LD_VAR 0 3
70931: PPUSH
70932: LD_VAR 0 11
70936: PPUSH
70937: LD_VAR 0 12
70941: PPUSH
70942: CALL_OW 273
70946: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
70947: LD_VAR 0 9
70951: PPUSH
70952: LD_VAR 0 10
70956: PPUSH
70957: CALL_OW 488
70961: PUSH
70962: LD_VAR 0 9
70966: PUSH
70967: LD_VAR 0 10
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_VAR 0 7
70980: IN
70981: NOT
70982: AND
70983: PUSH
70984: LD_VAR 0 9
70988: PPUSH
70989: LD_VAR 0 10
70993: PPUSH
70994: CALL_OW 458
70998: NOT
70999: AND
71000: IFFALSE 71042
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
71002: LD_ADDR_VAR 0 7
71006: PUSH
71007: LD_VAR 0 7
71011: PPUSH
71012: LD_VAR 0 7
71016: PUSH
71017: LD_INT 1
71019: PLUS
71020: PPUSH
71021: LD_VAR 0 9
71025: PUSH
71026: LD_VAR 0 10
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PPUSH
71035: CALL_OW 1
71039: ST_TO_ADDR
71040: GO 71056
// i := i - 1 ;
71042: LD_ADDR_VAR 0 5
71046: PUSH
71047: LD_VAR 0 5
71051: PUSH
71052: LD_INT 1
71054: MINUS
71055: ST_TO_ADDR
// end ;
71056: GO 70862
71058: POP
71059: POP
// for i in tmp do
71060: LD_ADDR_VAR 0 5
71064: PUSH
71065: LD_VAR 0 7
71069: PUSH
71070: FOR_IN
71071: IFFALSE 71109
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
71073: LD_VAR 0 1
71077: PPUSH
71078: LD_VAR 0 5
71082: PUSH
71083: LD_INT 1
71085: ARRAY
71086: PPUSH
71087: LD_VAR 0 5
71091: PUSH
71092: LD_INT 2
71094: ARRAY
71095: PPUSH
71096: CALL 70055 0 3
71100: NOT
71101: IFFALSE 71107
// exit ;
71103: POP
71104: POP
71105: GO 71111
71107: GO 71070
71109: POP
71110: POP
// end ;
71111: LD_VAR 0 4
71115: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
71116: LD_INT 0
71118: PPUSH
71119: PPUSH
71120: PPUSH
71121: PPUSH
71122: PPUSH
71123: PPUSH
71124: PPUSH
// if not GetClass ( unit ) = class_sniper then
71125: LD_VAR 0 1
71129: PPUSH
71130: CALL_OW 257
71134: PUSH
71135: LD_INT 5
71137: EQUAL
71138: NOT
71139: IFFALSE 71143
// exit ;
71141: GO 71531
// dist := 8 ;
71143: LD_ADDR_VAR 0 5
71147: PUSH
71148: LD_INT 8
71150: ST_TO_ADDR
// viewRange := 12 ;
71151: LD_ADDR_VAR 0 7
71155: PUSH
71156: LD_INT 12
71158: ST_TO_ADDR
// side := GetSide ( unit ) ;
71159: LD_ADDR_VAR 0 6
71163: PUSH
71164: LD_VAR 0 1
71168: PPUSH
71169: CALL_OW 255
71173: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
71174: LD_INT 61
71176: PPUSH
71177: LD_VAR 0 6
71181: PPUSH
71182: CALL_OW 321
71186: PUSH
71187: LD_INT 2
71189: EQUAL
71190: IFFALSE 71200
// viewRange := 16 ;
71192: LD_ADDR_VAR 0 7
71196: PUSH
71197: LD_INT 16
71199: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
71200: LD_VAR 0 1
71204: PPUSH
71205: LD_VAR 0 2
71209: PPUSH
71210: LD_VAR 0 3
71214: PPUSH
71215: CALL_OW 297
71219: PUSH
71220: LD_VAR 0 5
71224: GREATER
71225: IFFALSE 71304
// begin ComMoveXY ( unit , x , y ) ;
71227: LD_VAR 0 1
71231: PPUSH
71232: LD_VAR 0 2
71236: PPUSH
71237: LD_VAR 0 3
71241: PPUSH
71242: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71246: LD_INT 35
71248: PPUSH
71249: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
71253: LD_VAR 0 1
71257: PPUSH
71258: LD_VAR 0 2
71262: PPUSH
71263: LD_VAR 0 3
71267: PPUSH
71268: CALL 38691 0 3
71272: NOT
71273: IFFALSE 71277
// exit ;
71275: GO 71531
// until GetDistUnitXY ( unit , x , y ) < dist ;
71277: LD_VAR 0 1
71281: PPUSH
71282: LD_VAR 0 2
71286: PPUSH
71287: LD_VAR 0 3
71291: PPUSH
71292: CALL_OW 297
71296: PUSH
71297: LD_VAR 0 5
71301: LESS
71302: IFFALSE 71246
// end ; ComTurnXY ( unit , x , y ) ;
71304: LD_VAR 0 1
71308: PPUSH
71309: LD_VAR 0 2
71313: PPUSH
71314: LD_VAR 0 3
71318: PPUSH
71319: CALL_OW 118
// wait ( 5 ) ;
71323: LD_INT 5
71325: PPUSH
71326: CALL_OW 67
// _d := GetDir ( unit ) ;
71330: LD_ADDR_VAR 0 10
71334: PUSH
71335: LD_VAR 0 1
71339: PPUSH
71340: CALL_OW 254
71344: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
71345: LD_ADDR_VAR 0 8
71349: PUSH
71350: LD_VAR 0 1
71354: PPUSH
71355: CALL_OW 250
71359: PPUSH
71360: LD_VAR 0 10
71364: PPUSH
71365: LD_VAR 0 5
71369: PPUSH
71370: CALL_OW 272
71374: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
71375: LD_ADDR_VAR 0 9
71379: PUSH
71380: LD_VAR 0 1
71384: PPUSH
71385: CALL_OW 251
71389: PPUSH
71390: LD_VAR 0 10
71394: PPUSH
71395: LD_VAR 0 5
71399: PPUSH
71400: CALL_OW 273
71404: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71405: LD_VAR 0 8
71409: PPUSH
71410: LD_VAR 0 9
71414: PPUSH
71415: CALL_OW 488
71419: NOT
71420: IFFALSE 71424
// exit ;
71422: GO 71531
// ComAnimCustom ( unit , 1 ) ;
71424: LD_VAR 0 1
71428: PPUSH
71429: LD_INT 1
71431: PPUSH
71432: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
71436: LD_VAR 0 8
71440: PPUSH
71441: LD_VAR 0 9
71445: PPUSH
71446: LD_VAR 0 6
71450: PPUSH
71451: LD_VAR 0 7
71455: PPUSH
71456: CALL_OW 330
// repeat wait ( 1 ) ;
71460: LD_INT 1
71462: PPUSH
71463: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
71467: LD_VAR 0 1
71471: PPUSH
71472: CALL_OW 316
71476: PUSH
71477: LD_VAR 0 1
71481: PPUSH
71482: CALL_OW 314
71486: OR
71487: PUSH
71488: LD_VAR 0 1
71492: PPUSH
71493: CALL_OW 302
71497: NOT
71498: OR
71499: PUSH
71500: LD_VAR 0 1
71504: PPUSH
71505: CALL_OW 301
71509: OR
71510: IFFALSE 71460
// RemoveSeeing ( _x , _y , side ) ;
71512: LD_VAR 0 8
71516: PPUSH
71517: LD_VAR 0 9
71521: PPUSH
71522: LD_VAR 0 6
71526: PPUSH
71527: CALL_OW 331
// end ;
71531: LD_VAR 0 4
71535: RET
